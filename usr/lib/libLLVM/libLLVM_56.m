uint64_t llvm::MachO::getCPUTypeFromArchitecture(unsigned int a1)
{
  if (a1 > 0x76)
    return 0;
  else
    return qword_1C86737D0[(char)a1] | qword_1C8673418[(char)a1];
}

uint64_t llvm::MachO::getCPUTypeFromImplementation(signed int a1)
{
  if (a1 > 0x39)
    return 0;
  else
    return qword_1C8673D58[a1] | qword_1C8673B88[a1];
}

uint64_t llvm::MachO::mapToArchitecture(llvm::MachO *this, const llvm::Triple *a2)
{
  unint64_t v3;
  llvm::Triple *ArchName;
  size_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t AIRVersion;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t ArchitectureFromName;
  _QWORD *v28;
  __int128 v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  ArchName = llvm::Triple::getArchName(this);
  v5 = v3;
  v28 = v30;
  v29 = xmmword_1C6464ED0;
  if (v3 < 9)
  {
    v6 = 0;
    v7 = v30;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v3, 1);
  v7 = v28;
  v6 = v29;
  if (v5)
  {
LABEL_3:
    memcpy((char *)v7 + v6, ArchName, v5);
    v7 = v28;
    v6 = v29;
  }
LABEL_4:
  v8 = v6 + v5;
  *(_QWORD *)&v29 = v6 + v5;
  if (v6 + v5 != 5)
    goto LABEL_71;
  if ((*(_DWORD *)v7 != 863136097 || *((_BYTE *)v7 + 4) != 50)
    && (*(_DWORD *)v7 != 913467745 || *((_BYTE *)v7 + 4) != 52))
  {
    v8 = 5;
    goto LABEL_71;
  }
  AIRVersion = llvm::Triple::getAIRVersion(this);
  if ((_DWORD)AIRVersion == 2)
  {
    v19 = AIRVersion & 0x7FFFFFFF00000000;
    v20 = v12 & 0x7FFFFFFF00000000;
    if (!(AIRVersion & 0x7FFFFFFF00000000 | v12 & 0x7FFFFFFF00000000 | v12 & 0x7FFFFFFF))
    {
      v16 = v29;
      if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 4))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 4, 1);
        v16 = v29;
      }
      v17 = v28;
      v22 = 808613471;
      goto LABEL_69;
    }
    v21 = v12 & 0x7FFFFFFF;
    if (!v20 && !(v19 ^ 0x100000000 | v21))
    {
      v16 = v29;
      if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 4))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 4, 1);
        v16 = v29;
      }
      v17 = v28;
      v22 = 825390687;
      goto LABEL_69;
    }
    if (!v20 && !(v19 ^ 0x200000000 | v21))
    {
      v16 = v29;
      if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 4))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 4, 1);
        v16 = v29;
      }
      v17 = v28;
      v22 = 842167903;
      goto LABEL_69;
    }
    if (!v20 && !(v19 ^ 0x300000000 | v21))
    {
      v16 = v29;
      if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 4))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 4, 1);
        v16 = v29;
      }
      v17 = v28;
      v22 = 858945119;
      goto LABEL_69;
    }
    if (!v20 && !(v19 ^ 0x400000000 | v21))
    {
      v16 = v29;
      if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 4))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 4, 1);
        v16 = v29;
      }
      v17 = v28;
      v22 = 875722335;
      goto LABEL_69;
    }
    if (!v20 && !(v19 ^ 0x500000000 | v21))
    {
      v16 = v29;
      if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 4))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 4, 1);
        v16 = v29;
      }
      v17 = v28;
      v22 = 892499551;
      goto LABEL_69;
    }
    if (!v20 && !(v19 ^ 0x600000000 | v21))
    {
      v16 = v29;
      if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 4))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 4, 1);
        v16 = v29;
      }
      v17 = v28;
      v22 = 909276767;
      goto LABEL_69;
    }
    goto LABEL_66;
  }
  if ((_DWORD)AIRVersion != 1)
  {
LABEL_66:
    v16 = v29;
    if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 4))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 4, 1);
      v16 = v29;
    }
    v17 = v28;
    v22 = 926053983;
    goto LABEL_69;
  }
  v13 = AIRVersion & 0x7FFFFFFF00000000;
  v14 = v12 & 0x7FFFFFFF;
  v15 = v12 & 0x7FFFFFFF00000000;
  if ((v12 & 0x7FFFFFFF00000000) != 0 || v13 ^ 0x600000000 | v14)
  {
    if (!v15 && !(v13 ^ 0x800000000 | v14))
    {
      v16 = v29;
      if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 4))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 4, 1);
        v16 = v29;
      }
      v17 = v28;
      v18 = 926053983;
      goto LABEL_32;
    }
    if (!v15 && !(v13 ^ 0xB00000000 | v14))
    {
      v23 = v29;
      if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 5))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 5, 1);
        v23 = v29;
      }
      v24 = (char *)v28 + v23;
      v24[4] = 49;
      *(_DWORD *)v24 = 825325151;
      v25 = 5;
      goto LABEL_70;
    }
    goto LABEL_66;
  }
  v16 = v29;
  if (*((_QWORD *)&v29 + 1) < (unint64_t)(v29 + 4))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v28, v30, v29 + 4, 1);
    v16 = v29;
  }
  v17 = v28;
  v18 = 892499551;
LABEL_32:
  v22 = v18 + 16711680;
LABEL_69:
  *(_DWORD *)((char *)v17 + v16) = v22;
  v25 = 4;
LABEL_70:
  v7 = v28;
  v8 = v29 + v25;
  *(_QWORD *)&v29 = v29 + v25;
LABEL_71:
  ArchitectureFromName = llvm::MachO::getArchitectureFromName((uint64_t)v7, v8);
  if (v7 != v30)
    free(v7);
  return ArchitectureFromName;
}

uint64_t llvm::MachO::is64Bit(int a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_1C5E8E3EC + 4 * byte_1C8672DD8[a1]))(0);
}

uint64_t sub_1C5E8E3EC()
{
  return 1;
}

BOOL llvm::MachO::isAppleGPUArchitecture(int a1)
{
  return (a1 - 16) < 0x1B || (a1 - 96) < 0x16;
}

BOOL llvm::MachO::isAMDGPUArchitecture(int a1)
{
  return (a1 - 43) < 0xF;
}

BOOL llvm::MachO::isIntelGPUArchitecture(int a1)
{
  return (a1 - 58) < 0xA;
}

BOOL llvm::MachO::isAIRArchitecture(int a1)
{
  return (a1 - 72) < 0x16;
}

llvm::raw_ostream *llvm::MachO::operator<<(llvm::raw_ostream *a1, unsigned int a2)
{
  size_t v3;
  const char *ImplementationName;
  size_t v5;
  void *v6;

  ImplementationName = llvm::MachO::getImplementationName(a2);
  v5 = v3;
  v6 = (void *)*((_QWORD *)a1 + 4);
  if (v3 <= *((_QWORD *)a1 + 3) - (_QWORD)v6)
  {
    if (v3)
    {
      memcpy(v6, ImplementationName, v3);
      *((_QWORD *)a1 + 4) += v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(a1, ImplementationName, v3);
  }
  return a1;
}

{
  size_t v3;
  const char *ArchitectureName;
  size_t v5;
  void *v6;

  ArchitectureName = llvm::MachO::getArchitectureName(a2);
  v5 = v3;
  v6 = (void *)*((_QWORD *)a1 + 4);
  if (v3 <= *((_QWORD *)a1 + 3) - (_QWORD)v6)
  {
    if (v3)
    {
      memcpy(v6, ArchitectureName, v3);
      *((_QWORD *)a1 + 4) += v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(a1, ArchitectureName, v3);
  }
  return a1;
}

_DWORD *llvm::MachO::ArchitectureSet::ArchitectureSet(_DWORD *result, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  *result = 0;
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *v2;
      if (v5 != 118)
      {
        v4 |= 1 << v5;
        *result = v4;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  *result = 0;
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *v2;
      if (v5 != 118)
      {
        v4 |= 1 << v5;
        *result = v4;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t llvm::MachO::ArchitectureSet::count(llvm::MachO::ArchitectureSet *this)
{
  int32x2_t v1;
  int32x2_t v2;
  int64x2_t v3;
  int v4;
  int8x16_t v5;
  int32x2_t v6;
  int8x16_t v7;

  v1 = (int32x2_t)0x100000000;
  v2 = (int32x2_t)vld1_dup_f32((const float *)this);
  v3 = 0uLL;
  v4 = 32;
  v5 = (int8x16_t)vdupq_n_s64(1uLL);
  do
  {
    v6 = vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)v1), v2);
    v7.i64[0] = v6.u32[0];
    v7.i64[1] = v6.u32[1];
    v3 = vaddq_s64(v3, (int64x2_t)vandq_s8(v7, v5));
    v1 = vadd_s32(v1, (int32x2_t)0x200000002);
    v4 -= 2;
  }
  while (v4);
  return vaddvq_s64(v3);
}

void llvm::MachO::ArchitectureSet::operator std::string(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  int64x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int v8;
  int8x16_t v9;
  int32x2_t v10;
  int8x16_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *ArchitectureName;
  unint64_t v16;
  const char *v17;
  size_t v18;
  uint64_t v19;
  int v20;
  const std::string::value_type *v21;
  void **p_dst;
  uint64_t v23;
  const std::string::value_type *v24;
  uint64_t v25;
  unint64_t v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  unint64_t v29;
  int64x2_t v30;
  void **__dst;
  std::string::size_type v32;
  int64_t v33;

  v3 = *a1;
  if ((_DWORD)v3)
  {
    *(_QWORD *)(a2 + 16) = 0;
    v5 = 0uLL;
    *(_OWORD *)a2 = 0u;
    v6 = (int32x2_t)0x100000000;
    v7 = vdup_n_s32(v3);
    v8 = 32;
    v9 = (int8x16_t)vdupq_n_s64(1uLL);
    do
    {
      v10 = vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)v6), v7);
      v11.i64[0] = v10.u32[0];
      v11.i64[1] = v10.u32[1];
      v5 = vaddq_s64(v5, (int64x2_t)vandq_s8(v11, v9));
      v6 = vadd_s32(v6, (int32x2_t)0x200000002);
      v8 -= 2;
    }
    while (v8);
    if ((v3 & 1) != 0)
    {
      LODWORD(v13) = 0;
LABEL_13:
      v30 = v5;
      ArchitectureName = llvm::MachO::getArchitectureName(v13);
      if (v16 > 0x7FFFFFFFFFFFFFF7)
LABEL_35:
        abort();
      v17 = ArchitectureName;
      v18 = v16;
      v19 = vaddvq_s64(v30);
      v20 = v13;
      v21 = " ";
      while (v18 < 0x17)
      {
        HIBYTE(v33) = v18;
        p_dst = (void **)&__dst;
        if (v18)
          goto LABEL_21;
LABEL_22:
        *((_BYTE *)p_dst + v18) = 0;
        if (v33 >= 0)
          v27 = (const std::string::value_type *)&__dst;
        else
          v27 = (const std::string::value_type *)__dst;
        if (v33 >= 0)
          v28 = HIBYTE(v33) & 0x7F;
        else
          v28 = v32;
        std::string::append((std::string *)a2, v27, v28);
        if (SHIBYTE(v33) < 0)
          operator delete(__dst);
        if (--v19)
          std::string::append((std::string *)a2, v21);
        do
        {
          if (++v20 > 0x1F)
            return;
        }
        while ((((unint64_t)*a1 >> v20) & 1) == 0);
        v17 = llvm::MachO::getArchitectureName(v20);
        v18 = v29;
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_35;
      }
      v23 = (v18 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v23 = v18 | 7;
      v24 = v21;
      v25 = v23 + 1;
      p_dst = (void **)operator new(v23 + 1);
      v26 = v25 | 0x8000000000000000;
      v21 = v24;
      v32 = v18;
      v33 = v26;
      __dst = p_dst;
LABEL_21:
      memmove(p_dst, v17, v18);
      goto LABEL_22;
    }
    v12 = 0;
    do
    {
      if (v12 == 31)
        return;
      v13 = v12 + 1;
      v14 = v3 >> v12++;
    }
    while ((v14 & 2) == 0);
    if (v13 != 0xFFFFFFFFLL)
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 9;
    strcpy((char *)a2, "[(empty)]");
  }
}

void llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char v19;

  v3 = a2;
  LODWORD(a2) = 0;
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  v4 = *a1;
  if ((v4 & 1) != 0)
  {
LABEL_7:
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = (int)a2;
LABEL_8:
    if (v10 != 118)
    {
      if (v7 >= v8)
      {
        v12 = &v7[-v9];
        v13 = (uint64_t)&v7[-v9 + 1];
        if (v13 < 0)
          abort();
        if (2 * (uint64_t)&v8[-v9] > (unint64_t)v13)
          v13 = 2 * (_QWORD)&v8[-v9];
        if ((unint64_t)&v8[-v9] >= 0x3FFFFFFFFFFFFFFFLL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)operator new(v14);
        else
          v15 = 0;
        v16 = &v12[(_QWORD)v15];
        v17 = &v12[(_QWORD)v15];
        *v17 = v10;
        v11 = v17 + 1;
        if (v7 != (char *)v9)
        {
          v18 = &v7[~v9];
          do
          {
            v19 = *--v7;
            (v18--)[(_QWORD)v15] = v19;
          }
          while (v7 != (char *)v9);
          v16 = v15;
        }
        v8 = &v15[v14];
        *v3 = v16;
        v3[1] = v11;
        v3[2] = v8;
        if (v9)
          operator delete((void *)v9);
        v9 = (unint64_t)v16;
      }
      else
      {
        *v7 = v10;
        v11 = v7 + 1;
      }
      v3[1] = v11;
      v7 = v11;
    }
    while (++v10 <= 0x1F)
    {
      if ((((unint64_t)*a1 >> v10) & 1) != 0)
        goto LABEL_8;
    }
  }
  else
  {
    v5 = 0;
    while (v5 != 31)
    {
      a2 = (_QWORD *)(v5 + 1);
      v6 = v4 >> v5++;
      if ((v6 & 2) != 0)
      {
        if (a2 != (_QWORD *)0xFFFFFFFFLL)
          goto LABEL_7;
        return;
      }
    }
  }
}

uint64_t llvm::MachO::ArchitectureSet::hasABICompatibleSlice(unsigned int *a1, unsigned int a2)
{
  int CPUTypeFromArchitecture;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  unsigned int i;

  CPUTypeFromArchitecture = llvm::MachO::getCPUTypeFromArchitecture(a2);
  v4 = *a1;
  if ((v4 & 1) != 0)
  {
    LODWORD(v6) = 0;
LABEL_8:
    if (CPUTypeFromArchitecture == llvm::MachO::getCPUTypeFromArchitecture(v6))
    {
      return 1;
    }
    else
    {
      for (i = v6 + 1; ; ++i)
      {
        v8 = i < 0x20;
        if (i > 0x1F
          || (((unint64_t)*a1 >> i) & 1) != 0
          && CPUTypeFromArchitecture == llvm::MachO::getCPUTypeFromArchitecture(i))
        {
          break;
        }
      }
    }
  }
  else
  {
    v5 = 0;
    while (v5 != 31)
    {
      v6 = v5 + 1;
      v7 = v4 >> v5++;
      if ((v7 & 2) != 0)
      {
        if (v6 != 0xFFFFFFFFLL)
          goto LABEL_8;
        return 0;
      }
    }
    return 0;
  }
  return v8;
}

uint64_t llvm::MachO::ArchitectureSet::getABICompatibleSlice(unsigned int *a1, unsigned int a2)
{
  int CPUTypeFromArchitecture;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int i;

  CPUTypeFromArchitecture = llvm::MachO::getCPUTypeFromArchitecture(a2);
  v4 = *a1;
  if ((v4 & 1) == 0)
  {
    v5 = 0;
    while (v5 != 31)
    {
      v6 = v5 + 1;
      v7 = v4 >> v5++;
      if ((v7 & 2) != 0)
      {
        if (v6 != 0xFFFFFFFFLL)
          goto LABEL_8;
        goto LABEL_6;
      }
    }
    goto LABEL_6;
  }
  LODWORD(v6) = 0;
LABEL_8:
  LOBYTE(i) = v6;
  if (CPUTypeFromArchitecture != llvm::MachO::getCPUTypeFromArchitecture(v6))
  {
    for (i = v6 + 1; i <= 0x1F; ++i)
    {
      if ((((unint64_t)*a1 >> i) & 1) != 0
        && CPUTypeFromArchitecture == llvm::MachO::getCPUTypeFromArchitecture(i))
      {
        return i;
      }
    }
LABEL_6:
    LOBYTE(i) = 118;
  }
  return i;
}

void llvm::MachO::ArchitectureSet::print(llvm::MachO::ArchitectureSet *this, llvm::raw_ostream *a2)
{
  void **v3;
  size_t v4;
  void *__p[2];
  char v6;

  llvm::MachO::ArchitectureSet::operator std::string((unsigned int *)this, (uint64_t)__p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v6 >= 0)
    v4 = v6 & 0x7F;
  else
    v4 = (size_t)__p[1];
  llvm::raw_ostream::write(a2, (const char *)v3, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

llvm::raw_ostream *llvm::MachO::operator<<(llvm::raw_ostream *a1, int a2)
{
  int v4;

  v4 = a2;
  llvm::MachO::ArchitectureSet::print((llvm::MachO::ArchitectureSet *)&v4, a1);
  return a1;
}

uint64_t llvm::MachO::mapToArchitectureSet(llvm::Triple *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::Triple *ArchName;
  uint64_t v6;
  int ArchitectureFromName;
  int v8;

  if (!a2)
    return 0;
  LODWORD(v3) = 0;
  v4 = 48 * a2;
  do
  {
    ArchName = llvm::Triple::getArchName(this);
    ArchitectureFromName = llvm::MachO::getArchitectureFromName((uint64_t)ArchName, v6);
    v8 = 1 << ArchitectureFromName;
    if (ArchitectureFromName == 118)
      v8 = 0;
    v3 = v8 | v3;
    this = (llvm::Triple *)((char *)this + 48);
    v4 -= 48;
  }
  while (v4);
  return v3;
}

unsigned int *llvm::MachO::InterfaceFileRef::addTarget(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1C5E8EB40((unsigned int *)(a1 + 24), a2);
}

unsigned int *sub_1C5E8EB40(unsigned int *result, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v2 = result[2];
  if ((_DWORD)v2)
  {
    v3 = *a2;
    v4 = *(unsigned __int8 **)result;
    v5 = result[2];
    do
    {
      v6 = v5 >> 1;
      v7 = &v4[8 * (v5 >> 1)];
      v10 = *v7;
      v8 = v7 + 4;
      v9 = v10;
      if (v10 < v3 || v3 >= v9 && *v8 < *((_DWORD *)a2 + 1))
      {
        v4 += 8 * (v5 >> 1) + 8;
        v6 = v5 + ~v6;
      }
      v5 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = *(unsigned __int8 **)result;
  }
  if (v4 == (unsigned __int8 *)(*(_QWORD *)result + 8 * v2)
    || (v11 = *a2, v12 = *v4, v11 < v12)
    || v12 >= v11 && *((_DWORD *)a2 + 1) < *((_DWORD *)v4 + 1))
  {
    v13 = *(_QWORD *)a2;
    return sub_1C63A0B30(result, (uint64_t)v4, &v13);
  }
  return result;
}

const void **sub_1C5E8EC08(const void ***a1, void *__src, size_t __len)
{
  char *v5;
  const void **v6;
  unint64_t v7;
  const void **v8;
  char v9;
  int v10;
  size_t v11;
  size_t v12;
  size_t v13;
  const void **v14;
  int v15;
  int v16;
  const void ***v17;
  char v18;
  BOOL v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  const void **v23;
  const void **v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  size_t v30;
  size_t v31;
  const void **v32;
  uint64_t v33;
  char *v34;
  void *v35;
  size_t v36;
  size_t v37;
  const void **v38;
  const void **v39;
  uint64_t v40;
  char *v41;
  const void **v42;
  __int128 v43;
  const void **v44;
  uint64_t v45;
  const void **v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  const void **v50;
  const void **v51;
  const void **v52;
  const void **v53;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 *p_dst;
  size_t v60;
  size_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  const void **v66;
  const void **v67;
  unint64_t v68;
  __int128 v69;
  uint64_t v70;
  void **v71;
  __int128 *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  const void **v77;
  __int128 __dst;
  unint64_t v79;
  void *v80[2];
  _QWORD v81[7];

  v81[6] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v5 = (char *)a1[1];
  v77 = *a1;
  v75 = v5 - (char *)*a1;
  if (v5 != (char *)*a1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (char *)v6) >> 4);
    do
    {
      v8 = &v6[10 * (v7 >> 1)];
      v9 = *((_BYTE *)v8 + 23);
      v10 = v9;
      v11 = v9 & 0x7F;
      if (v10 >= 0)
        v12 = v11;
      else
        v12 = (size_t)v8[1];
      if (__len >= v12)
        v13 = v12;
      else
        v13 = __len;
      if (v13
        && (v10 >= 0 ? (v14 = &v6[10 * (v7 >> 1)]) : (v14 = (const void **)*v8), (v15 = memcmp(v14, __src, v13)) != 0))
      {
        v16 = (v15 >> 31) | 1;
      }
      else
      {
        if (v12 < __len)
          v16 = -1;
        else
          v16 = 1;
        if (v12 == __len)
          v16 = 0;
      }
      if (v16 == -1)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v16 == -1)
        v6 = v8 + 10;
    }
    while (v7);
  }
  v17 = a1;
  if (v6 != (const void **)v5)
  {
    v18 = *((_BYTE *)v6 + 23);
    v19 = v18 < 0;
    if (v18 >= 0)
      v20 = v6;
    else
      v20 = *v6;
    v21 = (const void *)(v18 & 0x7F);
    if (v19)
      v21 = v6[1];
    if (v21 == (const void *)__len && (!__len || !memcmp(v20, __src, __len)))
      return v6;
  }
  v22 = ((char *)v6 - (char *)v77) / 80;
  v23 = &v77[10 * v22];
  v24 = a1[2];
  if (v5 < (char *)v24)
  {
    if (v23 == (const void **)v5)
    {
      if (__len <= 0x7FFFFFFFFFFFFFF7)
      {
        if (__len >= 0x17)
        {
          v30 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__len | 7) != 0x17)
            v30 = __len | 7;
          v31 = v30 + 1;
          v25 = operator new(v30 + 1);
          *((_QWORD *)v5 + 1) = __len;
          *((_QWORD *)v5 + 2) = v31 | 0x8000000000000000;
          *(_QWORD *)v5 = v25;
        }
        else
        {
          v5[23] = __len;
          v25 = v5;
          if (!__len)
            goto LABEL_54;
        }
        memmove(v25, __src, __len);
LABEL_54:
        *((_BYTE *)v25 + __len) = 0;
        v32 = &v77[10 * v22];
        v32[3] = v32 + 5;
        v32[4] = (const void *)0x500000000;
        a1[1] = (const void **)(v5 + 80);
        return (const void **)v5;
      }
LABEL_125:
      abort();
    }
    v81[5] = a1 + 2;
    if (__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_125;
    if (__len >= 0x17)
    {
      v60 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v60 = __len | 7;
      v61 = v60 + 1;
      p_dst = (__int128 *)operator new(v60 + 1);
      *((_QWORD *)&__dst + 1) = __len;
      v79 = v61 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v79) = __len;
      p_dst = &__dst;
      if (!__len)
        goto LABEL_107;
    }
    memmove(p_dst, __src, __len);
LABEL_107:
    *((_BYTE *)p_dst + __len) = 0;
    v80[0] = v81;
    v80[1] = (void *)0x500000000;
    v62 = (unint64_t)a1[1];
    v63 = v62 - 80;
    v64 = v62;
    if (v62 >= 0x50)
    {
      v65 = 0;
      v66 = &v77[10 * v22] + 2 * ((uint64_t)(v62 - (_QWORD)(v23 + 10)) >> 4);
      do
      {
        v67 = &v66[v65 / 8];
        v68 = v62 + v65;
        v69 = *(_OWORD *)&v66[v65 / 8];
        *(_QWORD *)(v68 + 16) = v66[v65 / 8 + 2];
        *(_OWORD *)v68 = v69;
        v67[1] = 0;
        v67[2] = 0;
        *v67 = 0;
        *(_QWORD *)(v68 + 24) = v62 + v65 + 40;
        *(_QWORD *)(v62 + v65 + 32) = 0x500000000;
        if (LODWORD(v66[v65 / 8 + 4]))
          sub_1C614D378(v62 + v65 + 24, v63 + v65 + 24);
        v65 += 80;
      }
      while ((unint64_t)(v67 + 10) < v62);
      v64 = v62 + v65;
      v17 = a1;
    }
    v17[1] = (const void **)v64;
    if ((const void **)v62 != v23 + 10)
    {
      v70 = 0;
      do
      {
        v71 = (void **)(v62 + v70 - 80);
        if (*(char *)(v62 + v70 - 57) < 0)
          operator delete(*v71);
        v72 = (__int128 *)(v63 + v70 - 80);
        v73 = *v72;
        *(_QWORD *)(v62 + v70 - 64) = *(_QWORD *)(v63 + v70 - 64);
        *(_OWORD *)v71 = v73;
        *(_BYTE *)(v63 + v70 - 57) = 0;
        *(_BYTE *)v72 = 0;
        sub_1C614D378(v62 + v70 - 56, v63 + v70 - 56);
        v70 -= 80;
      }
      while (-16 * ((uint64_t)(v62 - (_QWORD)(v23 + 10)) >> 4) != v70);
    }
    if (*((char *)v23 + 23) < 0)
      operator delete((void *)*v23);
    v74 = __dst;
    v23[2] = (const void *)v79;
    *(_OWORD *)v23 = v74;
    HIBYTE(v79) = 0;
    LOBYTE(__dst) = 0;
    sub_1C614D378((uint64_t)&v77[10 * v22 + 3], (uint64_t)v80);
    if (v80[0] != v81)
      free(v80[0]);
    if (SHIBYTE(v79) < 0)
      operator delete((void *)__dst);
    return &v77[10 * v22];
  }
  v26 = 0xCCCCCCCCCCCCCCCDLL * (v75 >> 4) + 1;
  if (v26 > 0x333333333333333)
    goto LABEL_125;
  v27 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (char *)v77) >> 4);
  if (2 * v27 > v26)
    v26 = 2 * v27;
  if (v27 >= 0x199999999999999)
    v28 = 0x333333333333333;
  else
    v28 = v26;
  if (v28)
  {
    if (v28 > 0x333333333333333)
      goto LABEL_126;
    v29 = (char *)operator new(80 * v28);
  }
  else
  {
    v29 = 0;
  }
  v5 = &v29[80 * v22];
  if (v22 != v28)
  {
LABEL_62:
    v34 = &v29[80 * v28];
    goto LABEL_63;
  }
  if ((char *)v6 - (char *)v77 >= 1)
  {
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v5 -= 80 * (v33 >> 1);
    goto LABEL_62;
  }
  v55 = 2 * v22;
  if (v77 == v6)
    v55 = 1;
  if (v55 > 0x333333333333333)
LABEL_126:
    sub_1C4764EE4();
  v56 = v55 >> 2;
  v57 = 5 * v55;
  v58 = (char *)operator new(80 * v55);
  v5 = &v58[80 * v56];
  v34 = &v58[16 * v57];
  if (v29)
    operator delete(v29);
LABEL_63:
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_125;
  if (__len >= 0x17)
  {
    v36 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v36 = __len | 7;
    v37 = v36 + 1;
    v35 = operator new(v36 + 1);
    *((_QWORD *)v5 + 1) = __len;
    *((_QWORD *)v5 + 2) = v37 | 0x8000000000000000;
    *(_QWORD *)v5 = v35;
  }
  else
  {
    v5[23] = __len;
    v35 = v5;
    if (!__len)
      goto LABEL_71;
  }
  memmove(v35, __src, __len);
LABEL_71:
  *((_BYTE *)v35 + __len) = 0;
  *((_QWORD *)v5 + 3) = v5 + 40;
  *((_QWORD *)v5 + 4) = 0x500000000;
  v38 = *a1;
  v39 = (const void **)v5;
  if (*a1 != v23)
  {
    v40 = 0;
    do
    {
      v41 = &v5[v40 * 8];
      v42 = &v23[v40];
      v43 = *(_OWORD *)&v23[v40 - 10];
      *((_QWORD *)v41 - 8) = v23[v40 - 8];
      *((_OWORD *)v41 - 5) = v43;
      *(v42 - 9) = 0;
      *(v42 - 8) = 0;
      *(v42 - 10) = 0;
      *((_QWORD *)v41 - 7) = &v5[v40 * 8 - 40];
      *(_QWORD *)&v5[v40 * 8 - 48] = 0x500000000;
      if (LODWORD(v23[v40 - 6]))
        sub_1C614D378((uint64_t)&v5[v40 * 8 - 56], (uint64_t)(v42 - 7));
      v40 -= 10;
    }
    while (&v23[v40] != v38);
    v39 = (const void **)&v5[v40 * 8];
  }
  v44 = a1[1];
  if (v44 == v23)
  {
    v49 = (uint64_t)(v5 + 80);
  }
  else
  {
    v45 = 0;
    do
    {
      v46 = &v23[v45];
      v47 = &v5[v45 * 8];
      v48 = *(_OWORD *)&v23[v45];
      *((_QWORD *)v47 + 12) = v23[v45 + 2];
      *((_OWORD *)v47 + 5) = v48;
      v46[1] = 0;
      v46[2] = 0;
      *v46 = 0;
      *((_QWORD *)v47 + 13) = &v5[v45 * 8 + 120];
      *(_QWORD *)&v5[v45 * 8 + 112] = 0x500000000;
      if (LODWORD(v23[v45 + 4]))
        sub_1C614D378((uint64_t)&v5[v45 * 8 + 104], (uint64_t)(v46 + 3));
      v45 += 10;
    }
    while (v46 + 10 != v44);
    v23 = a1[1];
    v49 = (uint64_t)&v5[v45 * 8 + 80];
  }
  v50 = *a1;
  *a1 = v39;
  a1[1] = (const void **)v49;
  a1[2] = (const void **)v34;
  if (v23 != v50)
  {
    v51 = v23 - 5;
    do
    {
      v52 = (const void **)*(v51 - 2);
      if (v51 != v52)
        free(v52);
      if (*((char *)v51 - 17) < 0)
        operator delete((void *)*(v51 - 5));
      v53 = v51 - 5;
      v51 -= 10;
    }
    while (v53 != v50);
  }
  if (v50)
    operator delete(v50);
  return (const void **)v5;
}

__n128 llvm::MachO::InterfaceFile::addParentUmbrella(uint64_t a1, unsigned __int8 *a2, void *__src, size_t __len)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char **v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __n128 *p_dst;
  size_t v18;
  size_t v19;
  __n128 result;
  __n128 *v21;
  size_t v22;
  size_t v23;
  void **v24;
  __n128 __dst;
  unint64_t v26;

  v8 = *(unsigned __int8 **)(a1 + 224);
  v7 = *(unsigned __int8 **)(a1 + 232);
  v9 = (char **)(a1 + 224);
  if (v7 != v8)
  {
    v10 = (v7 - v8) >> 5;
    v11 = *a2;
    do
    {
      v12 = v10 >> 1;
      v13 = &v8[32 * (v10 >> 1)];
      v14 = *v13;
      if (v14 < v11 || v14 <= v11 && *((_DWORD *)v13 + 1) < *((_DWORD *)a2 + 1))
      {
        v8 = v13 + 32;
        v12 = v10 + ~v12;
      }
      v10 = v12;
    }
    while (v12);
  }
  if (v8 == v7 || (v15 = *a2, v16 = *v8, v15 < v16) || v16 >= v15 && *((_DWORD *)a2 + 1) < *((_DWORD *)v8 + 1))
  {
    if (__len <= 0x7FFFFFFFFFFFFFF7)
    {
      if (__len >= 0x17)
      {
        v18 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17)
          v18 = __len | 7;
        v19 = v18 + 1;
        p_dst = (__n128 *)operator new(v18 + 1);
        __dst.n128_u64[1] = __len;
        v26 = v19 | 0x8000000000000000;
        __dst.n128_u64[0] = (unint64_t)p_dst;
      }
      else
      {
        HIBYTE(v26) = __len;
        p_dst = &__dst;
        if (!__len)
        {
LABEL_20:
          p_dst->n128_u8[__len] = 0;
          sub_1C5E8F4F4(v9, (char *)v8, a2, (__int128 *)&__dst);
          if (SHIBYTE(v26) < 0)
            operator delete((void *)__dst.n128_u64[0]);
          return result;
        }
      }
      memmove(p_dst, __src, __len);
      goto LABEL_20;
    }
LABEL_34:
    abort();
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_34;
  if (__len >= 0x17)
  {
    v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v22 = __len | 7;
    v23 = v22 + 1;
    v21 = (__n128 *)operator new(v22 + 1);
    __dst.n128_u64[1] = __len;
    v26 = v23 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)v21;
  }
  else
  {
    HIBYTE(v26) = __len;
    v21 = &__dst;
    if (!__len)
      goto LABEL_30;
  }
  memmove(v21, __src, __len);
LABEL_30:
  v21->n128_u8[__len] = 0;
  v24 = (void **)(v8 + 8);
  if ((char)v8[31] < 0)
    operator delete(*v24);
  result = __dst;
  *((_QWORD *)v8 + 3) = v26;
  *(__n128 *)v24 = result;
  return result;
}

void sub_1C5E8F4F4(char **a1, char *a2, _QWORD *a3, __int128 *a4)
{
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  void **v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  char *v48;
  __int128 v49;
  char *v50;
  char *v51;
  char v52;
  void *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  __int128 v59;
  char *v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v6 = (unint64_t)a1[1];
  v8 = a2 - *a1;
  v9 = v8 >> 5;
  v10 = (unint64_t)&(*a1)[v8 & 0xFFFFFFFFFFFFFFE0];
  v12 = a1 + 2;
  v11 = (unint64_t)a1[2];
  if (v6 < v11)
  {
    if (v10 == v6)
    {
      *(_QWORD *)v10 = *a3;
      v26 = &v7[32 * v9];
      v27 = *a4;
      *((_QWORD *)v26 + 3) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(v26 + 8) = v27;
      *((_QWORD *)a4 + 1) = 0;
      *((_QWORD *)a4 + 2) = 0;
      *(_QWORD *)a4 = 0;
      a1[1] = (char *)(v10 + 32);
    }
    else
    {
      v13 = *a3;
      v53 = *(void **)a4;
      *(_QWORD *)&v59 = *((_QWORD *)a4 + 1);
      *(_QWORD *)((char *)&v59 + 7) = *(_QWORD *)((char *)a4 + 15);
      v52 = *((_BYTE *)a4 + 23);
      *((_QWORD *)a4 + 1) = 0;
      *((_QWORD *)a4 + 2) = 0;
      *(_QWORD *)a4 = 0;
      v14 = (unint64_t)a1[1];
      v15 = v10 + 32;
      v16 = v14 - 32;
      if (v14 < 0x20)
      {
        v19 = v8 >> 5;
        v17 = a1[1];
      }
      else
      {
        v17 = a1[1];
        do
        {
          *(_QWORD *)v17 = *(_QWORD *)v16;
          v18 = *(_OWORD *)(v16 + 8);
          *((_QWORD *)v17 + 3) = *(_QWORD *)(v16 + 24);
          *(_OWORD *)(v17 + 8) = v18;
          *(_QWORD *)(v16 + 16) = 0;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 8) = 0;
          v17 += 32;
          v16 += 32;
        }
        while (v16 < v14);
        v19 = v8 >> 5;
      }
      a1[1] = v17;
      if (v14 != v15)
      {
        v30 = 0;
        v31 = (uint64_t)(v14 - v15) >> 5;
        v32 = &v7[32 * v19 + 32 * v31];
        v33 = -32 * v31;
        do
        {
          v34 = &v32[v30];
          *(_QWORD *)(v14 + v30 - 32) = *(_QWORD *)&v32[v30 - 32];
          v35 = v14 + v30 - 24;
          if (*(char *)(v14 + v30 - 1) < 0)
            operator delete(*(void **)v35);
          v30 -= 32;
          v36 = *(_OWORD *)(v34 - 24);
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v34 - 1);
          *(_OWORD *)v35 = v36;
          *(v34 - 1) = 0;
          *(v34 - 24) = 0;
        }
        while (v33 != v30);
      }
      *(_QWORD *)v10 = v13;
      v37 = (void **)&v7[32 * v19 + 8];
      if (*(char *)(v10 + 31) < 0)
        operator delete(*v37);
      *v37 = v53;
      *(_QWORD *)&v7[32 * v19 + 16] = v59;
      *(_QWORD *)&v7[32 * v19 + 23] = *(_QWORD *)((char *)&v59 + 7);
      v7[32 * v19 + 31] = v52;
    }
    return;
  }
  v20 = ((uint64_t)(v6 - (_QWORD)v7) >> 5) + 1;
  if (v20 >> 59)
    abort();
  v22 = v11 - (_QWORD)v7;
  if (v22 >> 4 > v20)
    v20 = v22 >> 4;
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
    v23 = 0x7FFFFFFFFFFFFFFLL;
  else
    v23 = v20;
  v58 = a1 + 2;
  if (v23)
  {
    if (v23 >> 59)
      goto LABEL_47;
    v24 = a3;
    v25 = (char *)operator new(32 * v23);
    a3 = v24;
    v9 = v8 >> 5;
  }
  else
  {
    v25 = 0;
  }
  v28 = &v25[32 * v9];
  v56 = (unint64_t)v28;
  v57 = &v25[32 * v23];
  if (v9 == v23)
  {
    if (v8 >= 1)
    {
      v29 = v9 + 2;
      if (v9 >= -1)
        v29 = v9 + 1;
      v28 -= 32 * (v29 >> 1);
      v55 = v28;
      v56 = (unint64_t)v28;
      goto LABEL_37;
    }
    if (v7 == a2)
      v38 = 1;
    else
      v38 = v8 >> 4;
    v62 = v12;
    if (!(v38 >> 59))
    {
      v39 = a3;
      v40 = (char *)operator new(32 * v38);
      v41 = &v40[32 * (v38 >> 2)];
      v54 = v40;
      v55 = v41;
      *(_QWORD *)&v59 = v25;
      *((_QWORD *)&v59 + 1) = v28;
      v56 = (unint64_t)v41;
      v57 = &v40[32 * v38];
      v60 = v28;
      v61 = v28;
      sub_1C59C5548((uint64_t)&v59);
      v28 = v41;
      a3 = v39;
      goto LABEL_37;
    }
LABEL_47:
    sub_1C4764EE4();
  }
LABEL_37:
  *(_QWORD *)v28 = *a3;
  v42 = *((_QWORD *)a4 + 2);
  *(_OWORD *)(v28 + 8) = *a4;
  *((_QWORD *)v28 + 3) = v42;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  v43 = v56 + 32;
  v56 += 32;
  v44 = *a1;
  if (*a1 != (char *)v10)
  {
    v45 = v10;
    do
    {
      v46 = *(_QWORD *)(v45 - 32);
      v45 -= 32;
      *((_QWORD *)v28 - 4) = v46;
      v28 -= 32;
      v47 = *(_OWORD *)(v45 + 8);
      *((_QWORD *)v28 + 3) = *(_QWORD *)(v45 + 24);
      *(_OWORD *)(v28 + 8) = v47;
      *(_QWORD *)(v45 + 16) = 0;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 8) = 0;
    }
    while ((char *)v45 != v44);
    v43 = v56;
  }
  v48 = a1[1];
  if (v48 != (char *)v10)
  {
    do
    {
      *(_QWORD *)v43 = *(_QWORD *)v10;
      v49 = *(_OWORD *)(v10 + 8);
      *(_QWORD *)(v43 + 24) = *(_QWORD *)(v10 + 24);
      *(_OWORD *)(v43 + 8) = v49;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v43 += 32;
      v10 += 32;
    }
    while ((char *)v10 != v48);
    v10 = (unint64_t)a1[1];
  }
  v50 = *a1;
  *a1 = v28;
  a1[1] = (char *)v43;
  v51 = a1[2];
  a1[2] = v57;
  v56 = v10;
  v57 = v51;
  v54 = v50;
  v55 = v50;
  sub_1C59C5548((uint64_t)&v54);
}

__n128 llvm::MachO::InterfaceFile::addUUID(uint64_t a1, unsigned __int8 *a2, void *__src, size_t __len)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char **v16;
  __n128 *p_dst;
  size_t v18;
  size_t v19;
  __n128 result;
  __n128 *v21;
  size_t v22;
  size_t v23;
  void **v24;
  __n128 __dst;
  unint64_t v26;

  v8 = *(unsigned __int8 **)(a1 + 320);
  v7 = *(unsigned __int8 **)(a1 + 328);
  if (v7 != v8)
  {
    v9 = (v7 - v8) >> 5;
    v10 = *a2;
    do
    {
      v11 = v9 >> 1;
      v12 = &v8[32 * (v9 >> 1)];
      v13 = *v12;
      if (v13 < v10 || v13 <= v10 && *((_DWORD *)v12 + 1) < *((_DWORD *)a2 + 1))
      {
        v8 = v12 + 32;
        v11 = v9 + ~v11;
      }
      v9 = v11;
    }
    while (v11);
  }
  if (v8 == v7 || (v14 = *a2, v15 = *v8, v14 < v15) || v15 >= v14 && *((_DWORD *)a2 + 1) < *((_DWORD *)v8 + 1))
  {
    if (__len <= 0x7FFFFFFFFFFFFFF7)
    {
      v16 = (char **)(a1 + 320);
      if (__len >= 0x17)
      {
        v18 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17)
          v18 = __len | 7;
        v19 = v18 + 1;
        p_dst = (__n128 *)operator new(v18 + 1);
        __dst.n128_u64[1] = __len;
        v26 = v19 | 0x8000000000000000;
        __dst.n128_u64[0] = (unint64_t)p_dst;
      }
      else
      {
        HIBYTE(v26) = __len;
        p_dst = &__dst;
        if (!__len)
        {
LABEL_20:
          p_dst->n128_u8[__len] = 0;
          sub_1C5E8F4F4(v16, (char *)v8, a2, (__int128 *)&__dst);
          if (SHIBYTE(v26) < 0)
            operator delete((void *)__dst.n128_u64[0]);
          return result;
        }
      }
      memmove(p_dst, __src, __len);
      goto LABEL_20;
    }
LABEL_34:
    abort();
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_34;
  if (__len >= 0x17)
  {
    v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v22 = __len | 7;
    v23 = v22 + 1;
    v21 = (__n128 *)operator new(v22 + 1);
    __dst.n128_u64[1] = __len;
    v26 = v23 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)v21;
  }
  else
  {
    HIBYTE(v26) = __len;
    v21 = &__dst;
    if (!__len)
      goto LABEL_30;
  }
  memmove(v21, __src, __len);
LABEL_30:
  v21->n128_u8[__len] = 0;
  v24 = (void **)(v8 + 8);
  if ((char)v8[31] < 0)
    operator delete(*v24);
  result = __dst;
  *((_QWORD *)v8 + 3) = v26;
  *(__n128 *)v24 = result;
  return result;
}

uint64_t llvm::MachO::InterfaceFile::addUUID(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t i;
  uint64_t v4;
  char *v5;
  const std::locale::facet *v6;
  void *locale;
  size_t v8;
  uint64_t v9;
  std::locale v13;
  size_t v14;
  char v15;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  sub_1C4D7C8B4((uint64_t)v16);
  for (i = 0; i != 16; ++i)
  {
    if ((i & 0x7FFFFFFD) == 8 || (i & 0x7FFFFFFD) == 4)
    {
      LOBYTE(v13.__locale_) = 45;
      sub_1C4D7C62C(&v17, (uint64_t)&v13, 1);
    }
    v4 = v17;
    v5 = (char *)&v18[-1] + *(_QWORD *)(v17 - 24);
    if (*((_DWORD *)v5 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v18[-1] + *(_QWORD *)(v17 - 24)));
      v6 = std::locale::use_facet(&v13, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 32);
      std::locale::~locale(&v13);
      v4 = v17;
    }
    *((_DWORD *)v5 + 36) = 48;
    *(_QWORD *)((char *)&v18[2] + *(_QWORD *)(v4 - 24)) = 2;
    *(_DWORD *)((char *)v18 + *(_QWORD *)(v4 - 24)) |= 0x4000u;
    *(_DWORD *)((char *)v18 + *(_QWORD *)(v4 - 24)) = *(_DWORD *)((_BYTE *)v18 + *(_QWORD *)(v4 - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  if (v15 >= 0)
    locale = &v13;
  else
    locale = v13.__locale_;
  if (v15 >= 0)
    v8 = v15 & 0x7F;
  else
    v8 = v14;
  llvm::MachO::InterfaceFile::addUUID(a1, a2, locale, v8);
  if (v15 < 0)
    operator delete(v13.__locale_);
  v16[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17 = v9;
  v18[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CAA32F18](&v20);
}

uint64_t llvm::MachO::InterfaceFile::targets@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  void (**v3)(void);
  uint64_t result;
  uint64_t (**v5)(void);
  uint64_t (**v6)();
  int v7;
  uint64_t (***v8)();
  uint64_t (**v9)();
  int v10;
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = &v9;
  v8 = &v6;
  v9 = &off_1E81A8590;
  v6 = &off_1E81A8590;
  v7 = a2;
  sub_1C5E8FD70(a1 + 96, &v6, a3);
  if (v8 == &v6)
  {
    v3 = (void (**)(void))(v6 + 4);
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = (void (**)(void))(*v8 + 5);
  }
  (*v3)();
LABEL_6:
  result = (uint64_t)v11;
  if (v11 == &v9)
  {
    v5 = v9 + 4;
  }
  else
  {
    if (!v11)
      return result;
    v5 = *v11 + 5;
  }
  return (*v5)();
}

uint64_t sub_1C5E8FD70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void (**v13)(void);
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t (**v17)(void);
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20[2];
  _BYTE v21[24];
  _BYTE *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25[2];
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
  v8 = (_QWORD *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      v24 = v23;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v23);
    }
    else
    {
      v24 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v24 = 0;
  }
  sub_1C5E90C90(v25, v6, v7, v23);
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)a2[3];
  if (v10)
  {
    if (v10 == a2)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v18);
    }
    else
    {
      v19 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
    }
  }
  else
  {
    v19 = 0;
  }
  sub_1C5E90C90(v20, v9, v9, v18);
  sub_1C5E90A60(v25, v20, a3);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_16:
  if (v19 == v18)
  {
    v13 = (void (**)(void))(v18[0] + 32);
  }
  else
  {
    if (!v19)
      goto LABEL_21;
    v13 = (void (**)(void))(*v19 + 40);
  }
  (*v13)();
LABEL_21:
  v14 = v27;
  if (v27 == v26)
  {
    v15 = 4;
    v14 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  result = (uint64_t)v24;
  if (v24 == v23)
  {
    v17 = (uint64_t (**)(void))(v23[0] + 32);
  }
  else
  {
    if (!v24)
      return result;
    v17 = (uint64_t (**)(void))(*v24 + 40);
  }
  return (*v17)();
}

void llvm::MachO::InterfaceFile::addSymbol(uint64_t a1, char a2, const void *a3, size_t a4, uint64_t a5, char a6)
{
  void *v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE v20[8];
  void *v21;
  size_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[6];

  v27[5] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v11 = (void *)sub_1C484358C(a1, a4, 0);
    memcpy(v11, a3, a4);
  }
  else
  {
    v11 = 0;
  }
  v20[0] = a2;
  v21 = v11;
  v22 = a4;
  sub_1C63A09DC(a1 + 344, (uint64_t)v20, (uint64_t)&v23);
  if (v24)
  {
    v13 = (_QWORD *)sub_1C484358C(a1, 80, 3);
    v14 = v13;
    v25 = v27;
    v26 = 0x500000000;
    if (*(_DWORD *)(a5 + 8))
    {
      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v25, a5);
      v19 = v26;
      *v14 = v11;
      v14[1] = a4;
      v14[2] = v14 + 4;
      v14[3] = 0x500000000;
      if (v19)
        sub_1C614D378((uint64_t)(v14 + 2), (uint64_t)&v25);
    }
    else
    {
      *v13 = v11;
      v13[1] = a4;
      v13[2] = v13 + 4;
      v13[3] = 0x500000000;
    }
    *((_BYTE *)v14 + 72) = a2;
    *((_BYTE *)v14 + 73) = a6;
    *(_QWORD *)(v23 + 24) = v14;
    if (v25 != v27)
      free(v25);
  }
  else
  {
    v15 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)a5;
      v17 = 8 * v15;
      do
      {
        v18 = *v16++;
        sub_1C5E90124(*(_QWORD *)(v23 + 24), v18);
        v17 -= 8;
      }
      while (v17);
    }
  }
}

_QWORD *sub_1C5E90124(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(a1 + 24);
  if (v5 >= *(_DWORD *)(a1 + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, a1 + 32, v5 + 1, 8);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24)) = a2;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v5) = a2;
  }
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t *sub_1C5E90188(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *__p;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;

  v3 = a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 4;
  v9 = (uint64_t *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (uint64_t *)v5)
    {
      v15 = *(_OWORD *)a3;
      *(_OWORD *)v9 = *(_OWORD *)a3;
      if (*((_QWORD *)&v15 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      a1[1] = (uint64_t)(v9 + 2);
    }
    else
    {
      v11 = v9 + 2;
      v12 = v5 - 16;
      if (v5 < 0x10)
      {
        v14 = (_OWORD *)v5;
      }
      else
      {
        v13 = v5 - 16;
        v14 = (_OWORD *)v5;
        do
        {
          *v14++ = *(_OWORD *)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v13 += 16;
        }
        while (v13 < v5);
      }
      a1[1] = (uint64_t)v14;
      if ((_QWORD *)v5 != v11)
      {
        v18 = 16 * ((uint64_t)(v5 - (_QWORD)v11) >> 4);
        do
        {
          v12 = sub_1C5030834(v12, (__int128 *)(v6 + 16 * v8 - 16 + v18)) - 16;
          v18 -= 16;
        }
        while (v18);
      }
      if (v9 <= v3)
        v3 += 2 * (a1[1] > (unint64_t)v3);
      v20 = *v3;
      v19 = v3[1];
      if (v19)
      {
        v21 = (unint64_t *)(v19 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      *v9 = v20;
      v23 = v6 + 16 * v8;
      v24 = *(std::__shared_weak_count **)(v23 + 8);
      *(_QWORD *)(v23 + 8) = v19;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    return v9;
  }
  v27 = ((uint64_t)(v5 - v6) >> 4) + 1;
  if (v27 >> 60)
    abort();
  v29 = v10 - v6;
  if (v29 >> 3 > v27)
    v27 = v29 >> 3;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
    v30 = 0xFFFFFFFFFFFFFFFLL;
  else
    v30 = v27;
  v49 = a1 + 2;
  if (v30)
  {
    if (v30 >> 60)
      goto LABEL_60;
    v31 = (char *)operator new(16 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[16 * v8];
  __p = v31;
  v46 = v32;
  v48 = &v31[16 * v30];
  if (v8 == v30)
  {
    if (v7 >= 1)
    {
      v33 = v8 + 2;
      if (v8 >= -1)
        v33 = v8 + 1;
      v32 -= 16 * (v33 >> 1);
      v46 = v32;
      goto LABEL_46;
    }
    if (v6 == a2)
      v34 = 1;
    else
      v34 = v7 >> 3;
    if (!(v34 >> 60))
    {
      v35 = (char *)operator new(16 * v34);
      v32 = &v35[16 * (v34 >> 2)];
      __p = v35;
      v46 = v32;
      v48 = &v35[16 * v34];
      if (v31)
        operator delete(v31);
      goto LABEL_46;
    }
LABEL_60:
    sub_1C4764EE4();
  }
LABEL_46:
  v36 = v3[1];
  *(_QWORD *)v32 = *v3;
  *((_QWORD *)v32 + 1) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v47 = v32 + 16;
  v9 = (uint64_t *)sub_1C63A0F30(a1, &__p, v9);
  v39 = v46;
  while (1)
  {
    v40 = v47;
    if (v47 == v39)
      break;
    v47 -= 16;
    v41 = (std::__shared_weak_count *)*((_QWORD *)v40 - 1);
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  if (__p)
    operator delete(__p);
  return v9;
}

BOOL llvm::MachO::InterfaceFile::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  signed __int8 v21;
  uint64_t v22;
  uint64_t v23;
  signed __int8 v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void **v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  const void **v76;

  v2 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 104))
    return 0;
  if ((_DWORD)v2)
  {
    v5 = *(unsigned __int8 **)(a1 + 96);
    v6 = &v5[8 * v2];
    v7 = *(unsigned __int8 **)(a2 + 96);
    while (*v5 == *v7 && *((_DWORD *)v5 + 1) == *((_DWORD *)v7 + 1))
    {
      v5 += 8;
      v7 += 8;
      if (v5 == v6)
        goto LABEL_10;
    }
    return 0;
  }
LABEL_10:
  v9 = *(_BYTE *)(a1 + 207);
  v10 = v9 & 0x7F;
  if (v9 >= 0)
    v11 = v9 & 0x7F;
  else
    v11 = *(_QWORD *)(a1 + 192);
  v12 = *(_BYTE *)(a2 + 207);
  v13 = v12;
  v14 = v12 & 0x7F;
  if (v13 < 0)
    v14 = *(_QWORD *)(a2 + 192);
  if (v11 != v14)
    return 0;
  v15 = (const void **)(a1 + 184);
  if (v13 >= 0)
    v16 = (unsigned __int8 *)(a2 + 184);
  else
    v16 = *(unsigned __int8 **)(a2 + 184);
  if ((*(_BYTE *)(a1 + 207) & 0x80) != 0)
  {
    if (!memcmp(*v15, v16, *(_QWORD *)(a1 + 192)))
      goto LABEL_25;
    return 0;
  }
  if ((v9 & 0x7F) != 0)
  {
    while (*(unsigned __int8 *)v15 == *v16)
    {
      v15 = (const void **)((char *)v15 + 1);
      ++v16;
      if (!--v10)
        goto LABEL_25;
    }
    return 0;
  }
LABEL_25:
  if (*(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208))
    return 0;
  if (*(_DWORD *)(a1 + 212) != *(_DWORD *)(a2 + 212))
    return 0;
  if (*(unsigned __int8 *)(a1 + 216) != *(unsigned __int8 *)(a2 + 216))
    return 0;
  if (*(unsigned __int8 *)(a1 + 217) != *(unsigned __int8 *)(a2 + 217))
    return 0;
  if (*(unsigned __int8 *)(a1 + 218) != *(unsigned __int8 *)(a2 + 218))
    return 0;
  if (*(unsigned __int8 *)(a1 + 219) != *(unsigned __int8 *)(a2 + 219))
    return 0;
  v18 = *(unsigned __int8 **)(a1 + 224);
  v17 = *(unsigned __int8 **)(a1 + 232);
  v19 = *(unsigned __int8 **)(a2 + 224);
  if (v17 - v18 != *(_QWORD *)(a2 + 232) - (_QWORD)v19)
    return 0;
  while (v18 != v17)
  {
    if (*v18 != *v19 || *((_DWORD *)v18 + 1) != *((_DWORD *)v19 + 1))
      return 0;
    v21 = v18[31];
    v22 = v21 & 0x7F;
    if (v21 >= 0)
      v23 = v21 & 0x7F;
    else
      v23 = *((_QWORD *)v18 + 2);
    v24 = v19[31];
    v25 = v24;
    v26 = v24 & 0x7F;
    if (v25 < 0)
      v26 = *((_QWORD *)v19 + 2);
    if (v23 != v26)
      return 0;
    if (v25 >= 0)
      v27 = v19 + 8;
    else
      v27 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
    if ((v18[31] & 0x80) != 0)
    {
      if (memcmp(*((const void **)v18 + 1), v27, *((_QWORD *)v18 + 2)))
        return 0;
    }
    else if ((v21 & 0x7F) != 0)
    {
      v28 = 0;
      while (v18[v28 + 8] == v27[v28])
      {
        if (v22 == ++v28)
          goto LABEL_54;
      }
      return 0;
    }
LABEL_54:
    v18 += 32;
    v19 += 32;
  }
  v29 = *(_QWORD *)(a1 + 248);
  v30 = *(_QWORD *)(a1 + 256);
  v31 = *(_QWORD *)(a2 + 248);
  if (v30 - v29 != *(_QWORD *)(a2 + 256) - v31)
    return 0;
  while (v29 != v30)
  {
    v32 = v29 + 24;
    v33 = v31 + 24;
    result = sub_1C5E90EE4((unsigned __int8 *)v29, (unsigned __int8 **)(v29 + 24), (unsigned __int8 *)v31, (unsigned __int8 **)(v31 + 24));
    if (!result)
      return result;
    v29 = v32 + 56;
    v31 = v33 + 56;
  }
  v35 = *(_QWORD *)(a1 + 272);
  v36 = *(_QWORD *)(a1 + 280);
  v37 = *(_QWORD *)(a2 + 272);
  if (v36 - v35 != *(_QWORD *)(a2 + 280) - v37)
    return 0;
  while (v35 != v36)
  {
    v38 = v35 + 24;
    v39 = v37 + 24;
    result = sub_1C5E90EE4((unsigned __int8 *)v35, (unsigned __int8 **)(v35 + 24), (unsigned __int8 *)v37, (unsigned __int8 **)(v37 + 24));
    if (!result)
      return result;
    v35 = v38 + 56;
    v37 = v39 + 56;
  }
  v40 = *(_DWORD *)(a1 + 352);
  if (v40 != *(_DWORD *)(a2 + 352))
    return 0;
  v41 = *(_QWORD *)(a1 + 344);
  v42 = *(unsigned int *)(a1 + 360);
  v43 = v41 + 32 * v42;
  if (v40)
  {
    if ((_DWORD)v42)
    {
      v44 = 32 * v42;
      v45 = *(_QWORD *)(a1 + 344);
      while ((*(_BYTE *)v45 == 3 || !*(_BYTE *)v45) && !*(_QWORD *)(v45 + 16))
      {
        v45 += 32;
        v44 -= 32;
        if (!v44)
          goto LABEL_71;
      }
    }
    else
    {
      v45 = *(_QWORD *)(a1 + 344);
    }
  }
  else
  {
LABEL_71:
    v45 = v41 + 32 * v42;
  }
  v46 = v41 + 32 * v42;
  while (v45 != v46)
  {
    v76 = 0;
    if (sub_1C63A0C2C((uint64_t *)(a2 + 344), (unsigned __int8 *)v45, &v76))
    {
      v47 = v76;
      v48 = *(_QWORD *)(a2 + 344);
      v49 = *(unsigned int *)(a2 + 360);
    }
    else
    {
      v48 = *(_QWORD *)(a2 + 344);
      v49 = *(unsigned int *)(a2 + 360);
      v47 = (const void **)(v48 + 32 * v49);
    }
    if (v47 == (const void **)(v48 + 32 * v49))
      return 0;
    v50 = (unsigned __int8 *)v47[3];
    v51 = *(_QWORD *)(v45 + 24);
    v52 = *((_QWORD *)v50 + 1);
    if (v52 != *(_QWORD *)(v51 + 8) || v52 && memcmp(*(const void **)v50, *(const void **)v51, v52))
      return 0;
    if (v50[72] != *(unsigned __int8 *)(v51 + 72))
      return 0;
    v53 = *((unsigned int *)v50 + 6);
    if ((_DWORD)v53 != *(_DWORD *)(v51 + 24))
      return 0;
    if ((_DWORD)v53)
    {
      v54 = (unsigned __int8 *)*((_QWORD *)v50 + 2);
      v55 = &v54[8 * v53];
      v56 = *(unsigned __int8 **)(v51 + 16);
      while (*v54 == *v56 && *((_DWORD *)v54 + 1) == *((_DWORD *)v56 + 1))
      {
        v54 += 8;
        v56 += 8;
        if (v54 == v55)
          goto LABEL_91;
      }
      return 0;
    }
LABEL_91:
    if (v50[73] != *(unsigned __int8 *)(v51 + 73))
      return 0;
    v58 = v45 + 32;
    v45 = v43;
    if (v58 != v43)
    {
      v45 = v58;
      while ((*(_BYTE *)v45 == 3 || !*(_BYTE *)v45) && !*(_QWORD *)(v45 + 16))
      {
        v45 += 32;
        if (v45 == v43)
        {
          v45 = v43;
          break;
        }
      }
    }
  }
  v59 = *(char **)(a1 + 296);
  v60 = *(char **)(a1 + 304);
  v61 = *(char **)(a2 + 296);
  v62 = *(char **)(a2 + 304);
  if (v60 - v59 != v62 - v61)
    return 0;
  while (v59 != v60 && v61 != v62)
  {
    v63 = *(_QWORD *)v59;
    v64 = (std::__shared_weak_count *)*((_QWORD *)v59 + 1);
    if (v64)
    {
      p_shared_owners = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldxr(p_shared_owners);
      while (__stxr(v66 + 1, p_shared_owners));
    }
    v67 = *(_QWORD *)v61;
    v68 = (std::__shared_weak_count *)*((_QWORD *)v61 + 1);
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
      v71 = llvm::MachO::InterfaceFile::operator==(v63, v67);
      do
        v72 = __ldaxr(v69);
      while (__stlxr(v72 - 1, v69));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    else
    {
      v71 = llvm::MachO::InterfaceFile::operator==(v63, v67);
    }
    if (v64)
    {
      v73 = (unint64_t *)&v64->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v71)
      return 0;
    v59 += 16;
    v61 += 16;
  }
  return v59 == v60 && v61 == v62;
}

void sub_1C5E909E0()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C5E909F4(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E81A8590;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5E90A2C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E81A8590;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1C5E90A4C(uint64_t a1, _BYTE *a2)
{
  return (*(_DWORD *)(a1 + 8) >> *a2) & 1;
}

_QWORD *sub_1C5E90A60@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[2];
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v17[0] = *a1;
  v17[1] = v5;
  v6 = v18;
  v7 = (_QWORD *)a1[5];
  if (v7)
  {
    if (v7 == a1 + 2)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _BYTE *))(*v7 + 24))(v7, v18);
    }
    else
    {
      v19 = (_BYTE *)a1[5];
      a1[5] = 0;
    }
  }
  else
  {
    v19 = 0;
  }
  v8 = a2[1];
  v14[0] = *a2;
  v14[1] = v8;
  v9 = v15;
  v10 = (_QWORD *)a2[5];
  if (v10)
  {
    if (v10 == a2 + 2)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(*v10 + 24))(v10, v15);
    }
    else
    {
      v16 = (_BYTE *)a2[5];
      a2[5] = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  result = sub_1C5E90BC8(a3, v17, v14);
  if (v16 == v15)
  {
    v12 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_16;
    v12 = 5;
    v9 = v16;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8 * v12))(v9);
LABEL_16:
  if (v19 == v18)
  {
    v13 = 4;
  }
  else
  {
    if (!v19)
      return result;
    v13 = 5;
    v6 = v19;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8 * v13))(v6);
}

_QWORD *sub_1C5E90BC8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = (_QWORD *)a2[5];
  if (v5)
  {
    if (v5 == a2 + 2)
    {
      a1[5] = a1 + 2;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[5] + 24))(a2[5], a1 + 2);
    }
    else
    {
      a1[5] = v5;
      a2[5] = 0;
    }
  }
  else
  {
    a1[5] = 0;
  }
  a1[6] = *a3;
  a1[7] = a3[1];
  v6 = (_QWORD *)a3[5];
  if (v6)
  {
    if (v6 == a3 + 2)
    {
      a1[11] = a1 + 8;
      (*(void (**)(_QWORD))(*(_QWORD *)a3[5] + 24))(a3[5]);
    }
    else
    {
      a1[11] = v6;
      a3[5] = 0;
    }
  }
  else
  {
    a1[11] = 0;
  }
  return a1;
}

uint64_t *sub_1C5E90C90(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  void (**v8)(void);
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v10);
    }
    else
    {
      v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1C5E90D84(a1, a2, a3, (uint64_t)v10);
  if (v11 == v10)
  {
    v8 = (void (**)(void))(v10[0] + 32);
    goto LABEL_10;
  }
  if (v11)
  {
    v8 = (void (**)(void))(*v11 + 40);
LABEL_10:
    (*v8)();
  }
  return a1;
}

char *sub_1C5E90D84(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = a2;
  a1[1] = a3;
  v5 = *(_QWORD *)(a4 + 24);
  if (v5)
  {
    if (v5 == a4)
    {
      a1[5] = (uint64_t)(a1 + 2);
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
    }
    else
    {
      a1[5] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    a1[5] = 0;
  }
  if (*a1 == a1[1])
    return (char *)a1;
  while (1)
  {
    v6 = a1[5];
    if (!v6)
      break;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) & 1) == 0)
    {
      v7 = a1[1];
      v8 = *a1 + 8;
      *a1 = v8;
      if (v8 != v7)
        continue;
    }
    return (char *)a1;
  }
  sub_1C485C2F0();
  return sub_1C5E90E28(v10, v11);
}

char *sub_1C5E90E28(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  char *v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned __int8 **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63A0E68(a1, v4, (__int128 *)&v4[32 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = &result[32 * v10];
    do
    {
      *result = 0;
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)result + 2) = 0;
      result += 32;
    }
    while (result != v11);
  }
  return result;
}

BOOL sub_1C5E90EE4(unsigned __int8 *a1, unsigned __int8 **a2, unsigned __int8 *a3, unsigned __int8 **a4)
{
  signed __int8 v4;
  uint64_t v5;
  uint64_t v6;
  signed __int8 v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _BOOL8 result;

  v4 = a1[23];
  v5 = v4 & 0x7F;
  if (v4 >= 0)
    v6 = v4 & 0x7F;
  else
    v6 = *((_QWORD *)a1 + 1);
  v7 = a3[23];
  v8 = v7;
  v9 = v7 & 0x7F;
  if (v8 < 0)
    v9 = *((_QWORD *)a3 + 1);
  if (v6 != v9)
    return 0;
  if (v8 >= 0)
    v12 = a3;
  else
    v12 = *(unsigned __int8 **)a3;
  if ((a1[23] & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, v12, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if ((v4 & 0x7F) != 0)
  {
    while (*a1 == *v12)
    {
      ++a1;
      ++v12;
      if (!--v5)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v13 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v13 != *((_DWORD *)a4 + 2))
    return 0;
  if (!(_DWORD)v13)
    return 1;
  v14 = *a2;
  v15 = (uint64_t)&(*a2)[8 * v13];
  v16 = *a4;
  do
  {
    result = *v14 == *v16 && *((_DWORD *)v14 + 1) == *((_DWORD *)v16 + 1);
    v14 += 8;
    v16 += 8;
  }
  while (result && v14 != (unsigned __int8 *)v15);
  return result;
}

uint64_t llvm::MachO::PackedVersion::parse32(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  if (!a3)
    return 0;
  v26 = v28;
  v27 = 0x300000000;
  llvm::SplitString(a2, a3, (uint64_t)&v26, ".", 1);
  v4 = v27;
  v5 = (char *)v26;
  if (v27 <= 3)
  {
    v6 = *((_QWORD *)v26 + 1);
    if (v6)
    {
      v7 = 0;
      v8 = *(unsigned __int8 **)v26;
      while (1)
      {
        v9 = *v8;
        if ((v9 - 48) >= 0xA)
        {
          if ((v9 - 97) >= 0x1A)
          {
            if ((v9 - 65) > 0x19)
              break;
            v10 = -55;
          }
          else
          {
            v10 = -87;
          }
        }
        else
        {
          v10 = -48;
        }
        v11 = v10 + v9;
        if (v11 > 9)
          break;
        v12 = 10 * v7 + v11;
        if (v7 > v12 / 0xA)
          break;
        ++v8;
        v7 = v12;
        if (!--v6)
        {
          if (v12 >> 16)
            break;
          v15 = (_DWORD)v12 << 16;
          *a1 = (_DWORD)v12 << 16;
          if (v4 < 2)
          {
            v13 = 1;
            goto LABEL_18;
          }
          v16 = 8;
          v17 = 1;
          v13 = 1;
LABEL_23:
          v18 = &v5[16 * v17];
          v19 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
          if (v19)
          {
            v20 = 0;
            v21 = *(unsigned __int8 **)v18;
            while (1)
            {
              v22 = *v21;
              if ((v22 - 48) >= 0xA)
              {
                if ((v22 - 97) >= 0x1A)
                {
                  if ((v22 - 65) > 0x19)
                    goto LABEL_17;
                  v23 = -55;
                }
                else
                {
                  v23 = -87;
                }
              }
              else
              {
                v23 = -48;
              }
              v24 = v23 + v22;
              if (v24 > 9)
                break;
              v25 = 10 * v20 + v24;
              if (v20 > v25 / 0xA)
                break;
              ++v21;
              v20 = v25;
              if (!--v19)
              {
                if (v25 > 0xFF)
                  goto LABEL_17;
                v15 |= v25 << v16;
                *a1 = v15;
                ++v17;
                v16 -= 8;
                if (v17 != v4)
                  goto LABEL_23;
                goto LABEL_18;
              }
            }
          }
          break;
        }
      }
    }
  }
LABEL_17:
  v13 = 0;
LABEL_18:
  if (v5 != (char *)v28)
    free(v5);
  return v13;
}

uint64_t llvm::MachO::PackedVersion::parse64(int *a1, uint64_t a2, unint64_t a3)
{
  unsigned int v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[11];

  v33[10] = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  if (!a3)
    return 0;
  v31 = v33;
  v32 = 0x500000000;
  llvm::SplitString(a2, a3, (uint64_t)&v31, ".", 1);
  v4 = v32;
  v5 = (char *)v31;
  if (v32 <= 5)
  {
    v6 = *((_QWORD *)v31 + 1);
    if (v6)
    {
      v7 = 0;
      v8 = *(unsigned __int8 **)v31;
      while (1)
      {
        v9 = *v8;
        if ((v9 - 48) >= 0xA)
        {
          if ((v9 - 97) >= 0x1A)
          {
            if ((v9 - 65) > 0x19)
              break;
            v10 = -55;
          }
          else
          {
            v10 = -87;
          }
        }
        else
        {
          v10 = -48;
        }
        v11 = v10 + v9;
        if (v11 > 9)
          break;
        v12 = 10 * v7 + v11;
        if (v7 > v12 / 0xA)
          break;
        ++v8;
        v7 = v12;
        if (!--v6)
        {
          if (v12 >> 24)
            break;
          v15 = (v12 & 0xFFFFFFFFFFFF0000) != 0;
          v16 = 0xFFFF;
          if (v12 < 0xFFFF)
            v16 = v12;
          v17 = v16 << 16;
          *a1 = v17;
          if (v4 >= 2)
          {
            v19 = 2;
            if (v4 != 2)
              v19 = 3;
            v20 = 8;
            v21 = 1;
LABEL_30:
            v22 = &v5[16 * v21];
            v23 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
            if (v23)
            {
              v24 = 0;
              v25 = *(unsigned __int8 **)v22;
              while (1)
              {
                v26 = *v25;
                if ((v26 - 48) >= 0xA)
                {
                  if ((v26 - 97) >= 0x1A)
                  {
                    if ((v26 - 65) > 0x19)
                      break;
                    v27 = -55;
                  }
                  else
                  {
                    v27 = -87;
                  }
                }
                else
                {
                  v27 = -48;
                }
                v28 = v27 + v26;
                if (v28 > 9)
                  break;
                v29 = 10 * v24 + v28;
                if (v24 > v29 / 0xA)
                  break;
                ++v25;
                v24 = v29;
                if (!--v23)
                {
                  if (v29 >= 0x400)
                    break;
                  if (v29 >= 0xFF)
                    v30 = 255;
                  else
                    v30 = v29;
                  if (v29 > 0xFF)
                    v15 = 1;
                  v17 |= v30 << v20;
                  *a1 = v17;
                  ++v21;
                  v20 -= 8;
                  if (v21 != v19)
                    goto LABEL_30;
                  goto LABEL_24;
                }
              }
            }
            v13 = (v15 << 8);
          }
          else
          {
LABEL_24:
            v18 = (v15 << 8) | 1;
            if (v4 <= 3)
              v13 = v18;
            else
              v13 = 257;
          }
          goto LABEL_18;
        }
      }
    }
  }
  v13 = 0;
LABEL_18:
  if (v5 != (char *)v33)
    free(v5);
  return v13;
}

uint64_t llvm::MachO::mapToPlatformType(llvm::MachO *this, const llvm::Triple *a2)
{
  int v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  unsigned int v8;

  v2 = *((_DWORD *)this + 9);
  switch(v2)
  {
    case 28:
      v3 = *((_DWORD *)this + 10) == 20;
      v4 = 3;
      v5 = 8;
      goto LABEL_6;
    case 29:
      v3 = *((_DWORD *)this + 10) == 20;
      v4 = 4;
      v5 = 9;
LABEL_6:
      if (v3)
        result = v5;
      else
        result = v4;
      break;
    case 30:
      result = 5;
      break;
    case 31:
      result = 10;
      break;
    case 32:
      result = 14;
      break;
    case 33:
      if (*((_DWORD *)this + 10) == 20)
        result = 12;
      else
        result = 11;
      break;
    default:
      if (v2 == 7)
      {
        v7 = *((_DWORD *)this + 10);
        if (v7 == 21)
          v8 = 6;
        else
          v8 = 2;
        if (v7 == 20)
          result = 7;
        else
          result = v8;
      }
      else
      {
        result = v2 == 11;
      }
      break;
  }
  return result;
}

unint64_t llvm::MachO::mapToPlatformSet@<X0>(unint64_t this@<X0>, const llvm::Triple *a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::MachO *v4;
  uint64_t v5;
  int v6;

  *a3 = a3 + 2;
  a3[1] = 0x300000000;
  a3[6] = 0;
  a3[5] = 0;
  a3[4] = a3 + 5;
  if (a2)
  {
    v4 = (llvm::MachO *)this;
    v5 = 48 * (_QWORD)a2;
    do
    {
      v6 = llvm::MachO::mapToPlatformType(v4, a2);
      this = sub_1C5E915C4((uint64_t)a3, &v6);
      v4 = (llvm::MachO *)((char *)v4 + 48);
      v5 -= 48;
    }
    while (v5);
  }
  return this;
}

unint64_t sub_1C5E915C4(uint64_t a1, int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;

  if (*(_QWORD *)(a1 + 48))
  {
    sub_1C49915F0((uint64_t **)(a1 + 32), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 2)
    {
      do
      {
        v11 = (int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_1C49915F0((uint64_t **)(a1 + 32), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_1C49915F0((uint64_t **)(a1 + 32), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 4);
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t llvm::MachO::getPlatformFromName(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = 0;
  switch(a2)
  {
    case 3:
      v2 = 0x100000002;
      if (*a1 ^ 0x6F69 | *((unsigned __int8 *)a1 + 2) ^ 0x73)
        v2 = 0;
      break;
    case 4:
      if (*(_DWORD *)a1 == 1936684660)
        v2 = 0x100000003;
      else
        v2 = 0;
      break;
    case 5:
      if (*(_DWORD *)a1 != 1868783981 || *((_BYTE *)a1 + 4) != 115)
      {
        v4 = *(_DWORD *)a1 ^ 0x6F706573 | *((unsigned __int8 *)a1 + 4) ^ 0x73;
        v5 = 0x10000000ELL;
        goto LABEL_14;
      }
      v2 = 0x100000001;
      break;
    case 7:
      v4 = *(_DWORD *)a1 ^ 0x63746177 | *(_DWORD *)((char *)a1 + 3) ^ 0x736F6863;
      v5 = 0x100000004;
LABEL_14:
      v6 = v4 == 0;
      goto LABEL_22;
    case 8:
      v5 = 0x100000005;
      v6 = *(_QWORD *)a1 == 0x736F656764697262;
      goto LABEL_22;
    case 9:
      v7 = *(_QWORD *)a1 ^ 0x696B726576697264 | *((unsigned __int8 *)a1 + 8) ^ 0x74;
      v5 = 0x10000000ALL;
      goto LABEL_21;
    case 10:
      v7 = *(_QWORD *)a1 ^ 0x6163616D2D736F69 | a1[4] ^ 0x6962;
      v5 = 0x100000006;
      goto LABEL_21;
    case 13:
      v7 = *(_QWORD *)a1 ^ 0x756D69732D736F69 | *(_QWORD *)((char *)a1 + 5) ^ 0x726F74616C756D69;
      v5 = 0x100000007;
      goto LABEL_21;
    case 14:
      v7 = *(_QWORD *)a1 ^ 0x6D69732D736F7674 | *(_QWORD *)(a1 + 3) ^ 0x726F74616C756D69;
      v5 = 0x100000008;
      goto LABEL_21;
    case 17:
      v7 = *(_QWORD *)a1 ^ 0x2D736F6863746177 | *((_QWORD *)a1 + 1) ^ 0x6F74616C756D6973 | *((unsigned __int8 *)a1
                                                                                               + 16) ^ 0x72;
      v5 = 0x100000009;
LABEL_21:
      v6 = v7 == 0;
LABEL_22:
      if (v6)
        v2 = v5;
      else
        v2 = 0;
      break;
    default:
      break;
  }
  if (v2 <= 0x100000000)
    return 0x100000000;
  else
    return v2;
}

void llvm::MachO::getOSAndEnvironmentName(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1C5E9199C(uint64_t a1, std::string *a2)
{
  return std::operator+<char>();
}

uint64_t llvm::MachO::mapToPlatformFromXBSEnv(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v5;
  uint64_t v6;
  BOOL v7;

  v2 = 0;
  switch(a2)
  {
    case 3:
      v2 = 0x100000002;
      if (*a1 != 28521 || *((_BYTE *)a1 + 2) != 115)
      {
        if (*a1 != 29793 || *((_BYTE *)a1 + 2) != 118)
        {
          v5 = (*a1 ^ 0x736F | *((unsigned __int8 *)a1 + 2) ^ 0x78) == 0;
          v2 = 0x100000001;
          goto LABEL_28;
        }
        v2 = 0x100000003;
      }
      goto LABEL_45;
    case 4:
      v6 = 0x10000000BLL;
      v7 = *(_DWORD *)a1 == 1936683640;
      goto LABEL_13;
    case 5:
      v6 = 0x100000004;
      v7 = (*(_DWORD *)a1 ^ 0x63746177 | *((unsigned __int8 *)a1 + 4) ^ 0x68) == 0;
LABEL_13:
      if (v7)
        v2 = v6;
      else
        v2 = 0;
      goto LABEL_45;
    case 7:
      if (*(_DWORD *)a1 == 1601400681 && *(_DWORD *)((char *)a1 + 3) == 1835627359)
      {
        v2 = 0x100000007;
        goto LABEL_45;
      }
      if (*(_DWORD *)a1 == 1601598561 && *(_DWORD *)((char *)a1 + 3) == 1835627359)
      {
        v2 = 0x100000008;
        goto LABEL_45;
      }
      goto LABEL_39;
    case 8:
      if (*(_QWORD *)a1 == 0x736F656764697262)
      {
        v2 = 0x100000005;
      }
      else
      {
        v2 = 0x10000000CLL;
        v5 = *(_QWORD *)a1 == 0x6D69735F736F7278;
LABEL_28:
        if (!v5)
          v2 = 0;
      }
      goto LABEL_45;
    case 9:
      if (*(_QWORD *)a1 == 0x69735F6863746177 && *((_BYTE *)a1 + 8) == 109)
      {
        v2 = 0x100000009;
      }
      else if (*(_QWORD *)a1 == 0x696B726576697264 && *((_BYTE *)a1 + 8) == 116)
      {
        v2 = 0x10000000ALL;
      }
      else
      {
LABEL_39:
        v2 = 0;
      }
LABEL_45:
      if (v2 <= 0x100000000)
        return 0x100000000;
      else
        return v2;
    default:
      goto LABEL_45;
  }
}

void llvm::MachO::Symbol::dump(llvm::MachO::Symbol *this, llvm::raw_ostream *a2)
{
  char v4;
  const void *v5;
  size_t v6;
  void *v7;
  const void *v8;
  std::string::size_type v9;
  std::string *p_dst;
  const void *v11;
  std::string::size_type v12;
  std::string *v13;
  const void *v14;
  std::string::size_type v15;
  std::string *v16;
  void *v17;
  void **v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  void **v26;
  std::string::size_type v27;
  std::string::size_type v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  int64_t v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  size_t size;
  std::string __dst;
  void *__p[2];
  int64_t v42;
  std::string v43;

  memset(&v43, 0, sizeof(v43));
  v4 = *((_BYTE *)this + 73);
  if ((v4 & 8) != 0)
  {
    std::string::append(&v43, "(undef) ");
    v4 = *((_BYTE *)this + 73);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
LABEL_14:
      std::string::append(&v43, "(weak-ref) ");
      if ((*((_BYTE *)this + 73) & 1) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 73) & 2) == 0)
  {
    goto LABEL_3;
  }
  std::string::append(&v43, "(weak-def) ");
  v4 = *((_BYTE *)this + 73);
  if ((v4 & 4) != 0)
    goto LABEL_14;
LABEL_4:
  if ((v4 & 1) != 0)
LABEL_5:
    std::string::append(&v43, "(tlv) ");
LABEL_6:
  switch(*((_BYTE *)this + 72))
  {
    case 0:
      v5 = *(const void **)this;
      if (!*(_QWORD *)this)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        __p[0] = 0;
        __p[1] = 0;
        v42 = 0;
        goto LABEL_46;
      }
      v6 = *((_QWORD *)this + 1);
      if (v6 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_86;
      if (v6 >= 0x17)
      {
        v23 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v23 = v6 | 7;
        v24 = v23 + 1;
        v7 = operator new(v23 + 1);
        __p[1] = (void *)v6;
        v42 = v24 | 0x8000000000000000;
        __p[0] = v7;
      }
      else
      {
        HIBYTE(v42) = v6;
        v7 = __p;
        if (!v6)
          goto LABEL_45;
      }
      memmove(v7, v5, v6);
LABEL_45:
      *((_BYTE *)v7 + v6) = 0;
      v19 = HIBYTE(v42);
      v18 = (void **)__p[0];
      v17 = __p[1];
LABEL_46:
      v25 = v19 < 0;
      if (v19 >= 0)
        v26 = __p;
      else
        v26 = v18;
      v27 = v19 & 0x7F;
      if (v25)
        v28 = (std::string::size_type)v17;
      else
        v28 = v27;
      std::string::append(&v43, (const std::string::value_type *)v26, v28);
      if (SHIBYTE(v42) < 0)
      {
        v29 = __p[0];
LABEL_76:
        operator delete(v29);
        goto LABEL_77;
      }
      goto LABEL_77;
    case 1:
      v8 = *(const void **)this;
      if (!*(_QWORD *)this)
      {
        memset(&__dst, 0, sizeof(__dst));
LABEL_59:
        v22 = "(ObjC Class) ";
        goto LABEL_66;
      }
      v9 = *((_QWORD *)this + 1);
      if (v9 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_86;
      if (v9 >= 0x17)
      {
        v30 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17)
          v30 = v9 | 7;
        v31 = v30 + 1;
        p_dst = (std::string *)operator new(v30 + 1);
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
        p_dst = &__dst;
        if (!v9)
          goto LABEL_58;
      }
      memmove(p_dst, v8, v9);
LABEL_58:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      goto LABEL_59;
    case 2:
      v11 = *(const void **)this;
      if (!*(_QWORD *)this)
      {
        memset(&__dst, 0, sizeof(__dst));
LABEL_40:
        v22 = "(ObjC Class EH) ";
        goto LABEL_66;
      }
      v12 = *((_QWORD *)this + 1);
      if (v12 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_86;
      if (v12 >= 0x17)
      {
        v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v20 = v12 | 7;
        v21 = v20 + 1;
        v13 = (std::string *)operator new(v20 + 1);
        __dst.__r_.__value_.__l.__size_ = v12;
        __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12;
        v13 = &__dst;
        if (!v12)
          goto LABEL_39;
      }
      memmove(v13, v11, v12);
LABEL_39:
      v13->__r_.__value_.__s.__data_[v12] = 0;
      goto LABEL_40;
    case 3:
      v14 = *(const void **)this;
      if (!*(_QWORD *)this)
      {
        memset(&__dst, 0, sizeof(__dst));
        goto LABEL_65;
      }
      v15 = *((_QWORD *)this + 1);
      if (v15 > 0x7FFFFFFFFFFFFFF7)
LABEL_86:
        abort();
      if (v15 >= 0x17)
      {
        v32 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v32 = v15 | 7;
        v33 = v32 + 1;
        v16 = (std::string *)operator new(v32 + 1);
        __dst.__r_.__value_.__l.__size_ = v15;
        __dst.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
        v16 = &__dst;
        if (!v15)
          goto LABEL_64;
      }
      memmove(v16, v14, v15);
LABEL_64:
      v16->__r_.__value_.__s.__data_[v15] = 0;
LABEL_65:
      v22 = "(ObjC IVar) ";
LABEL_66:
      v34 = std::string::insert(&__dst, 0, v22);
      v35 = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v42 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (v42 >= 0)
        v36 = __p;
      else
        v36 = (void **)__p[0];
      if (v42 >= 0)
        v37 = HIBYTE(v42) & 0x7F;
      else
        v37 = (std::string::size_type)__p[1];
      std::string::append(&v43, (const std::string::value_type *)v36, v37);
      if (SHIBYTE(v42) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        v29 = (void *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_76;
      }
LABEL_77:
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v43;
      else
        v38 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v43.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v43.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(a2, (const char *)v38, size);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_77;
  }
}

uint64_t llvm::MachO::Symbol::targets@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  void (**v3)(void);
  uint64_t result;
  uint64_t (**v5)(void);
  uint64_t (**v6)();
  int v7;
  uint64_t (***v8)();
  uint64_t (**v9)();
  int v10;
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = &v9;
  v8 = &v6;
  v9 = &off_1E81A8650;
  v6 = &off_1E81A8650;
  v7 = a2;
  sub_1C5E8FD70(a1 + 16, &v6, a3);
  if (v8 == &v6)
  {
    v3 = (void (**)(void))(v6 + 4);
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = (void (**)(void))(*v8 + 5);
  }
  (*v3)();
LABEL_6:
  result = (uint64_t)v11;
  if (v11 == &v9)
  {
    v5 = v9 + 4;
  }
  else
  {
    if (!v11)
      return result;
    v5 = *v11 + 5;
  }
  return (*v5)();
}

void sub_1C5E921A0()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C5E921B4(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E81A8650;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5E921EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E81A8650;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1C5E9220C(uint64_t a1, _BYTE *a2)
{
  return (*(_DWORD *)(a1 + 8) >> *a2) & 1;
}

uint64_t llvm::MachO::Target::create@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  int v13;
  _BOOL4 v14;
  int v15;
  BOOL v20;
  BOOL v22;
  BOOL v23;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36[2];
  char v37;

  v36[0] = a1;
  v36[1] = a2;
  v37 = 45;
  v6 = llvm::StringRef::find(v36, &v37, 1uLL, 0);
  if (v6 == -1)
  {
    result = llvm::MachO::getArchitectureFromName(a1, a2);
LABEL_103:
    v12 = 0;
    goto LABEL_104;
  }
  if (a2 >= v6)
    v7 = v6;
  else
    v7 = a2;
  if (a2 >= v6 + 1)
    v8 = v6 + 1;
  else
    v8 = a2;
  v9 = a1 + v8;
  v10 = a2 - v8;
  result = llvm::MachO::getArchitectureFromName(a1, v7);
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v15 = 0;
  switch(v10)
  {
    case 3:
      if (*(_WORD *)v9 != 28521 || *(_BYTE *)(v9 + 2) != 115)
      {
        v13 = 0;
        v15 = 0;
        v12 = 0;
        goto LABEL_31;
      }
      v10 = 3;
      v12 = 0x100000002;
      goto LABEL_84;
    case 4:
      if (*(_DWORD *)v9 == 1936683640)
      {
        v12 = 0x10000000BLL;
      }
      else
      {
        if (*(_DWORD *)v9 != 1936684660)
          goto LABEL_25;
        v12 = 0x100000003;
        v10 = 4;
      }
      goto LABEL_84;
    case 5:
      v15 = 0;
      v12 = 0x100000001;
      if (*(_DWORD *)v9 ^ 0x6F63616D | *(unsigned __int8 *)(v9 + 4) ^ 0x73)
        v12 = 0;
      v13 = 1;
      goto LABEL_31;
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      goto LABEL_32;
    case 7:
      if (*(_DWORD *)v9 == 1668571511 && *(_DWORD *)(v9 + 3) == 1936681059)
      {
        v12 = 0x100000004;
        v10 = 7;
      }
      else
      {
LABEL_25:
        v12 = 0;
      }
      goto LABEL_84;
    case 14:
      if (*(_QWORD *)v9 == 0x6D69732D736F7278 && *(_QWORD *)(v9 + 6) == 0x726F74616C756D69)
      {
        v12 = 0x10000000CLL;
        v10 = 14;
        goto LABEL_84;
      }
      v13 = 0;
      v12 = 0;
      v15 = 1;
LABEL_31:
      v14 = HIDWORD(v12) == 0;
LABEL_32:
      if (!v14)
        goto LABEL_37;
LABEL_33:
      if (v10 == 8)
      {
        if (*(_QWORD *)v9 == 0x736F656764697262)
        {
          v12 = 0x100000005;
          goto LABEL_84;
        }
      }
      else
      {
LABEL_37:
        if (v10 == 11 && v14)
        {
          v20 = *(_QWORD *)v9 == 0x6C6174616363616DLL && *(_QWORD *)(v9 + 3) == 0x7473796C61746163;
          v10 = 11;
          if (v20)
          {
            v12 = 0x100000006;
            goto LABEL_84;
          }
        }
        else if (v10 == 13 && v14)
        {
          v22 = *(_QWORD *)v9 == 0x756D69732D736F69 && *(_QWORD *)(v9 + 5) == 0x726F74616C756D69;
          v10 = 13;
          if (v22)
          {
            v12 = 0x100000007;
            goto LABEL_84;
          }
        }
      }
      if ((v15 & v14) == 1
        && (*(_QWORD *)v9 == 0x6D69732D736F7674 ? (v23 = *(_QWORD *)(v9 + 6) == 0x726F74616C756D69) : (v23 = 0), v23))
      {
        v12 = 0x100000008;
      }
      else if (v10 == 17 && v14)
      {
        if (!(*(_QWORD *)v9 ^ 0x2D736F6863746177 | *(_QWORD *)(v9 + 8) ^ 0x6F74616C756D6973 | *(unsigned __int8 *)(v9 + 16) ^ 0x72))
          v12 = 0x100000009;
        v10 = 17;
      }
      else if (v10 == 9 && v14)
      {
        if (!(*(_QWORD *)v9 ^ 0x696B726576697264 | *(unsigned __int8 *)(v9 + 8) ^ 0x74))
          v12 = 0x10000000ALL;
        v10 = 9;
      }
      else if ((v13 & v14) == 1 && !(*(_DWORD *)v9 ^ 0x6F706573 | *(unsigned __int8 *)(v9 + 4) ^ 0x73))
      {
        v12 = 0x10000000ELL;
      }
LABEL_84:
      if ((v12 & 0x300000000) != 0 && (_DWORD)v12)
        goto LABEL_104;
      if (!v10 || *(_BYTE *)v9 != 60 || *(_BYTE *)(v9 + v10 - 1) != 62)
        goto LABEL_103;
      v26 = v10 - 1;
      if (v10 - 1 >= (unint64_t)(v10 - 2))
        v26 = v10 - 2;
      if (!v26)
      {
        v34 = 0;
LABEL_106:
        v35 = 1;
        goto LABEL_110;
      }
      v27 = 0;
      v28 = (unsigned __int8 *)(v8 + a1 + 1);
      v29 = v26;
      break;
    default:
      v15 = 0;
      goto LABEL_33;
  }
  while (1)
  {
    v31 = *v28++;
    v30 = v31;
    if ((v31 - 48) < 0xA)
    {
      v32 = -48;
      goto LABEL_95;
    }
    if ((v30 - 97) < 0x1A)
    {
      v32 = -87;
      goto LABEL_95;
    }
    if ((v30 - 65) > 0x19)
      break;
    v32 = -55;
LABEL_95:
    v33 = v32 + v30;
    if (v33 > 9)
      break;
    v34 = 10 * v27 + v33;
    if (v27 > v34 / 0xA)
    {
      LODWORD(v26) = 1;
      goto LABEL_106;
    }
    v27 = v34;
    if (!--v29)
      goto LABEL_109;
  }
  v34 = v27;
LABEL_109:
  v35 = v26 == v29;
  LODWORD(v26) = v29 != 0;
LABEL_110:
  if (v26 | v35)
    v12 = 0;
  else
    v12 = v34;
LABEL_104:
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = result | (v12 << 32);
  return result;
}

llvm::raw_ostream *llvm::MachO::operator<<(llvm::raw_ostream *a1, unsigned __int8 *a2)
{
  void **v3;
  size_t v4;
  void *__p[2];
  char v7;

  llvm::MachO::Target::operator std::string(a2, __p);
  if (v7 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v7 >= 0)
    v4 = v7 & 0x7F;
  else
    v4 = (size_t)__p[1];
  llvm::raw_ostream::write(a1, (const char *)v3, v4);
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void llvm::MachO::getTargetTripleName(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *ArchitectureName;
  uint64_t v5;
  void *__p;
  char v7;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  ArchitectureName = llvm::MachO::getArchitectureName(*a1);
  v9 = 773;
  v8[0] = ArchitectureName;
  v8[1] = v5;
  v8[2] = "-apple-";
  llvm::MachO::getOSAndEnvironmentName(*((_DWORD *)a1 + 1));
  v10[0] = v8;
  v10[2] = &__p;
  v11 = 1026;
  llvm::Twine::str((llvm::Twine *)v10, a2);
  if (v7 < 0)
    operator delete(__p);
}

void llvm::MachO::TextAPIReader::get(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  const void *v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  void ***v9;
  uint64_t v10;
  void ***v11;
  void **v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void ***v22;
  uint64_t v23;
  void *v24[2];
  void *__p[4];
  void **v26;
  std::__shared_weak_count *v27;
  __int16 v28;
  __int128 __dst;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)v24 = 0u;
  v3 = a1[3];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = (const void *)a1[2];
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v3;
    v30 = (void *)(v8 | 0x8000000000000000);
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v30) = a1[3];
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v5, v3);
  *((_BYTE *)p_dst + v3) = 0;
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  *(_OWORD *)&__p[1] = __dst;
  __p[3] = v30;
  llvm::yaml::Input::Input((uint64_t)&__dst, *a1, a1[1], (uint64_t)v24, (uint64_t)sub_1C5E92B20, (uint64_t)v24);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  sub_1C63A1230((uint64_t)&__dst, (uint64_t)&v21);
  v9 = v22;
  v11 = (void ***)((char *)v21 + 8);
  v10 = *(_QWORD *)v21;
  if ((char *)v21 + 8 != (char *)v22)
  {
    do
    {
      v26 = *v11;
      v12 = v26;
      v13 = (std::__shared_weak_count *)operator new();
      v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81A8800;
      v13->__shared_owners_ = 0;
      v13->__shared_weak_owners_ = 0;
      v13[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
      v27 = v13;
      llvm::MachO::InterfaceFile::addDocument(v10, (uint64_t *)&v26);
      v14 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      ++v11;
    }
    while (v11 != v9);
  }
  v17 = v31;
  if ((_DWORD)v31)
  {
    v18 = v32;
    v19 = operator new();
    v28 = 260;
    v26 = v24;
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v26, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = v17;
    *(_QWORD *)(v19 + 40) = v18;
    *(_BYTE *)(v19 + 48) = 1;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v19;
    if (v10)
    {
      v20 = sub_1C5A0AA74(v10);
      MEMORY[0x1CAA32FC0](v20, 0x10B2C40E0541032);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = v10;
  }
  if (v21)
    operator delete(v21);
  llvm::yaml::Input::~Input((llvm::yaml::Input *)&__dst);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v24[0]);
}

void sub_1C5E92B20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  void *v7;
  size_t v8;
  size_t v9;
  int v10;
  int v11;
  int v12;
  char v13;
  size_t v14;
  char v15;
  size_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  void *v23;
  void *v24;
  void *v25;
  size_t v26;
  void *v27;
  void *v28;
  void *v29;
  BOOL v30;
  void *v31;
  size_t v32;
  _QWORD v33[4];
  __int16 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t (**v37)();
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  void **v45;
  _BYTE v46[16];
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *__p;
  void *v54;
  char *v55;
  void *v56;
  __int128 v57;
  _QWORD v58[129];

  v58[128] = *MEMORY[0x1E0C80C00];
  v37 = &off_1E81A7280;
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a2 + 47);
  v6 = v5;
  if (v5 >= 0)
    v7 = (void *)(a2 + 24);
  else
    v7 = *(void **)(a2 + 24);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 44);
  v12 = *(_DWORD *)(a1 + 48);
  v13 = *(_BYTE *)(a1 + 79);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_BYTE *)(a1 + 103);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(const void **)(a1 + 104);
  v19 = *(_QWORD *)(a1 + 112);
  v20 = *(_QWORD *)(a1 + 128);
  v21 = *(unsigned int *)(a1 + 136);
  v22 = v13 < 0;
  v25 = *(void **)(a1 + 56);
  v23 = (void *)(a1 + 56);
  v24 = v25;
  if (v13 >= 0)
    v24 = v23;
  v26 = v13 & 0x7F;
  if (v22)
    v26 = v14;
  v29 = *(void **)(a1 + 80);
  v28 = (void *)(a1 + 80);
  v27 = v29;
  v30 = v15 < 0;
  if (v15 >= 0)
    v31 = v28;
  else
    v31 = v27;
  v32 = v15 & 0x7F;
  if (v30)
    v32 = v17;
  v45 = &v56;
  v56 = v58;
  v57 = xmmword_1C86520E0;
  v38 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  llvm::SMDiagnostic::SMDiagnostic((uint64_t)v46, v3, v4, v7, v9, v10, v11, v12, v24, v26, v31, v32, v18, (v19 - (uint64_t)v18) >> 3, v20, v21);
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v46, 0, (llvm::raw_ostream *)&v37, 1, 1);
  v34 = 1283;
  v33[0] = "malformed file\n";
  v33[2] = v56;
  v33[3] = v57;
  llvm::Twine::str((llvm::Twine *)v33, &v35);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v35;
  *(_QWORD *)(a2 + 16) = v36;
  sub_1C4FAD100(&v55);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  if (v52 < 0)
    operator delete(v51);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  v37 = (uint64_t (**)())off_1E81A6E70;
  if (v44 == 1 && v39)
    MEMORY[0x1CAA32F9C](v39, 0x1000C8077774924);
  if (v56 != v58)
    free(v56);
}

void llvm::MachO::TextAPIWriter::writeToStream(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char v4;
  const void *v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  void *v39[2];
  void *__p[4];
  int v41;
  __int128 __dst;
  void *v43;
  int v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[80];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)v39 = 0u;
  v4 = *(_BYTE *)(a2 + 175);
  if (v4 >= 0)
    v5 = (const void *)(a2 + 152);
  else
    v5 = *(const void **)(a2 + 152);
  if (v4 >= 0)
    v6 = v4 & 0x7F;
  else
    v6 = *(_QWORD *)(a2 + 160);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_63:
    abort();
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v43 = (void *)(v11 | 0x8000000000000000);
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_14;
  }
  HIBYTE(v43) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_14:
    memmove(p_dst, v5, v6);
  *((_BYTE *)p_dst + v6) = 0;
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  *(_OWORD *)&__p[1] = __dst;
  __p[3] = v43;
  v41 = *(_DWORD *)(a2 + 176);
  *(_QWORD *)&__dst = &off_1E81A6C18;
  *((_QWORD *)&__dst + 1) = v39;
  v43 = a1;
  v44 = 80;
  v45 = v47;
  v46 = 0x800000000;
  memset(&v47[32], 0, 48);
  v12 = (char *)operator new(8uLL);
  *(_QWORD *)v12 = a2;
  v13 = v12 + 8;
  v37 = v12 + 8;
  v38 = v12 + 8;
  v36 = v12;
  v14 = *(uint64_t **)(a2 + 296);
  v15 = *(uint64_t **)(a2 + 304);
  if (v14 == v15)
  {
    v32 = v12;
    llvm::yaml::Output::beginDocuments((llvm::yaml::Output *)&__dst);
LABEL_47:
    v33 = 0;
    if ((unint64_t)((v13 - v32) >> 3) <= 1)
      v34 = 1;
    else
      v34 = (v13 - v32) >> 3;
    do
    {
      if (llvm::yaml::Output::preflightDocument((llvm::yaml::Output *)&__dst, v33))
      {
        v35 = (uint64_t *)sub_1C63A12C4((uint64_t)&v36, v33);
        (*(void (**)(__int128 *))(__dst + 104))(&__dst);
        sub_1C63A1328((uint64_t *)&__dst, v35);
        (*(void (**)(__int128 *))(__dst + 112))(&__dst);
      }
      ++v33;
    }
    while (v34 != v33);
    v13 = v36;
    goto LABEL_54;
  }
  do
  {
    v17 = *v14;
    v16 = (std::__shared_weak_count *)v14[1];
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v20 = v37;
    if (v37 >= v38)
    {
      v22 = v36;
      v23 = (v37 - v36) >> 3;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61)
        goto LABEL_63;
      v25 = v38 - v36;
      if ((v38 - v36) >> 2 > v24)
        v24 = v25 >> 2;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 >> 61)
          sub_1C4764EE4();
        v27 = (char *)operator new(8 * v26);
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[8 * v23];
      *(_QWORD *)v28 = v17;
      v21 = v28 + 8;
      if (v20 != v22)
      {
        do
        {
          v29 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v28 - 1) = v29;
          v28 -= 8;
        }
        while (v20 != v22);
        v20 = v36;
      }
      v36 = v28;
      v38 = &v27[8 * v26];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v37 = v17;
      v21 = v20 + 8;
    }
    v37 = v21;
    if (v16)
    {
      v30 = (unint64_t *)&v16->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v14 += 2;
  }
  while (v14 != v15);
  v32 = v36;
  v13 = v37;
  llvm::yaml::Output::beginDocuments((llvm::yaml::Output *)&__dst);
  if (v37 != v36)
    goto LABEL_47;
LABEL_54:
  llvm::yaml::Output::output((uint64_t)&__dst, "\n...\n", 5uLL);
  *a3 = 0;
  if (v13)
    operator delete(v13);
  *(_QWORD *)&__dst = &off_1E81A6C18;
  if (v45 != v47)
    free(v45);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v39[0]);
}

void sub_1C5E93130(uint64_t *a1, uint64_t *a2)
{
  _DWORD *v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void **v29;
  void *v30;
  void *v31;
  void **v32;
  void **v33;
  void **v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  int64x2_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  unsigned __int8 *v55;
  uint64_t v56;
  _DWORD *v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  _QWORD *v61;
  char **v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  void *__p;
  int64x2_t v67;
  char *v68;
  char **v69;
  char v70[272];
  uint64_t *v71;
  _DWORD *v72;
  uint64_t *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  sub_1C63A152C((uint64_t)v70, (uint64_t)a1, a2);
  (*(void (**)(uint64_t *, const char *, uint64_t, uint64_t))(*a1 + 96))(a1, "!tapi-tbd", 9, 1);
  sub_1C6133C1C(a1, (uint64_t)"tbd-version", v72, 1);
  sub_1C63A2280((uint64_t)a1, (uint64_t)(v72 + 8));
  v3 = v72;
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || *((_QWORD *)v3 + 1) != *((_QWORD *)v3 + 2))
  {
    v64 = 0;
    v63 = 0;
    if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, "uuids", 0, 0, &v63, &v64))
    {
      v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
        v5 = ((*((_QWORD *)v3 + 2) - *((_QWORD *)v3 + 1)) >> 5);
      else
        v5 = v4;
      if ((_DWORD)v5)
      {
        v36 = 0;
        v62 = (char **)(v3 + 6);
        v57 = v3;
        do
        {
          v65 = 0;
          if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 32))(a1, v36, &v65))
          {
            v38 = *((_QWORD *)v3 + 1);
            v37 = *((_QWORD *)v3 + 2);
            v39 = v37 - v38;
            v40 = (uint64_t)(v37 - v38) >> 5;
            if (v40 <= v36)
            {
              v41 = v36 + 1;
              v42 = v36 + 1 - v40;
              v43 = *v62;
              if (v42 <= (uint64_t)&(*v62)[-v37] >> 5)
              {
                bzero(*((void **)v3 + 2), ((32 * v36 - v39) & 0xFFFFFFFFFFFFFFE0) + 32);
                *((_QWORD *)v3 + 2) = v37 + 32 * v42;
              }
              else
              {
                v60 = *v62;
                v44 = (unint64_t)&v43[-v38];
                v45 = (uint64_t)&v43[-v38] >> 4;
                if (v45 <= v41)
                  v45 = v36 + 1;
                if (v44 >= 0x7FFFFFFFFFFFFFE0)
                  v46 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v46 = v45;
                v68 = 0;
                v69 = v62;
                if (v46 >> 59)
LABEL_79:
                  sub_1C4764EE4();
                v47 = (char *)operator new(32 * v46);
                v48 = &v47[32 * v40];
                __p = v47;
                v67.i64[0] = (uint64_t)v48;
                v58 = &v47[32 * v46];
                v68 = v58;
                bzero(v48, ((32 * v36 - v39) & 0xFFFFFFFFFFFFFFE0) + 32);
                v49 = &v47[32 * v41];
                v67.i64[1] = (uint64_t)v49;
                if (v37 == v38)
                {
                  v50 = vdupq_n_s64(v37);
                  v3 = v57;
                  v51 = v58;
                  v52 = v60;
                }
                else
                {
                  v3 = v57;
                  do
                  {
                    v53 = *(_QWORD *)(v37 - 32);
                    v37 -= 32;
                    *((_QWORD *)v48 - 4) = v53;
                    v48 -= 32;
                    v54 = *(_OWORD *)(v37 + 8);
                    *((_QWORD *)v48 + 3) = *(_QWORD *)(v37 + 24);
                    *(_OWORD *)(v48 + 8) = v54;
                    *(_QWORD *)(v37 + 16) = 0;
                    *(_QWORD *)(v37 + 24) = 0;
                    *(_QWORD *)(v37 + 8) = 0;
                  }
                  while (v37 != v38);
                  v50 = *(int64x2_t *)(v57 + 2);
                  v52 = (char *)*((_QWORD *)v57 + 3);
                  v49 = (char *)v67.i64[1];
                  v51 = v68;
                }
                *((_QWORD *)v3 + 1) = v48;
                *((_QWORD *)v3 + 2) = v49;
                v67 = v50;
                *((_QWORD *)v3 + 3) = v51;
                v68 = v52;
                __p = (void *)v50.i64[0];
                sub_1C59C5548((uint64_t)&__p);
              }
            }
            v55 = (unsigned __int8 *)(*((_QWORD *)v3 + 1) + 32 * v36);
            (*(void (**)(uint64_t *))(*a1 + 104))(a1);
            sub_1C63A245C((uint64_t)a1, v55);
            sub_1C629AE0C(a1, (uint64_t)"value", (uint64_t)(v55 + 8), 1);
            (*(void (**)(uint64_t *))(*a1 + 112))(a1);
            (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, v65);
          }
          ++v36;
        }
        while (v36 != v5);
      }
      (*(void (**)(uint64_t *))(*a1 + 48))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v64);
    }
  }
  LODWORD(__p) = 0;
  sub_1C5E94800((uint64_t)a1, v72 + 42, &__p);
  sub_1C6205CC8(a1, (uint64_t)"install-name", v72 + 22, 1);
  LODWORD(__p) = 0x10000;
  sub_1C63A24D4((uint64_t)a1, (uint64_t)"current-version", (llvm::MachO::PackedVersion *)(v72 + 26), &__p);
  LODWORD(__p) = 0x10000;
  sub_1C63A24D4((uint64_t)a1, (uint64_t)"compatibility-version", (llvm::MachO::PackedVersion *)(v72 + 27), &__p);
  LOBYTE(__p) = 0;
  sub_1C63A2588(a1, (uint64_t)"swift-abi-version", (_BYTE *)v72 + 112, &__p);
  v6 = v72;
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || *((_QWORD *)v6 + 22) != *((_QWORD *)v6 + 23))
  {
    v64 = 0;
    v63 = 0;
    if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, "parent-umbrella", 0, 0, &v63, &v64))
    {
      v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
        v7 = -1431655765 * ((*((_QWORD *)v6 + 23) - *((_QWORD *)v6 + 22)) >> 4);
      if (v7)
      {
        v8 = 0;
        v9 = (uint64_t *)(v6 + 44);
        v10 = v7;
        v61 = v6 + 48;
        do
        {
          v65 = 0;
          if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 32))(a1, v8, &v65))
          {
            v11 = *((_QWORD *)v6 + 22);
            v12 = (char *)*((_QWORD *)v6 + 23);
            v13 = &v12[-v11];
            v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-v11] >> 4);
            if (v14 <= v8)
            {
              v59 = v9;
              v15 = 48 * v8;
              v16 = v8 + 1;
              v17 = v8 + 1 - v14;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v61 - (_QWORD)v12) >> 4) >= v17)
              {
                bzero(v12, 48 * ((v15 - (uint64_t)v13) / 0x30uLL) + 48);
                *((_QWORD *)v6 + 23) = &v12[48 * v17];
                v9 = v59;
              }
              else
              {
                v18 = 0xAAAAAAAAAAAAAAABLL * ((*v61 - v11) >> 4);
                v19 = 2 * v18;
                if (2 * v18 <= v16)
                  v19 = v8 + 1;
                if (v18 >= 0x2AAAAAAAAAAAAAALL)
                  v20 = 0x555555555555555;
                else
                  v20 = v19;
                v69 = (char **)(v6 + 48);
                if (v20 > 0x555555555555555)
                  goto LABEL_79;
                v21 = 3 * v20;
                v22 = (char *)operator new(48 * v20);
                __p = v22;
                v67.i64[0] = (uint64_t)&v22[48 * v14];
                v68 = &v22[16 * v21];
                bzero((void *)v67.i64[0], 48 * ((v15 - (uint64_t)v13) / 0x30uLL) + 48);
                v67.i64[1] = (uint64_t)&v22[48 * v16];
                v9 = v59;
                sub_1C5E96F2C(v59, &__p);
                v23 = v67.i64[1];
                for (i = v67.i64[0]; v23 != i; v23 -= 48)
                {
                  if (*(char *)(v23 - 1) < 0)
                    operator delete(*(void **)(v23 - 24));
                  v25 = *(void **)(v23 - 48);
                  if (v25)
                  {
                    *(_QWORD *)(v23 - 40) = v25;
                    operator delete(v25);
                  }
                }
                if (__p)
                  operator delete(__p);
              }
            }
            v26 = *v9 + 48 * v8;
            (*(void (**)(uint64_t *))(*a1 + 104))(a1);
            sub_1C63A263C((uint64_t)a1, v26);
            sub_1C629AE0C(a1, (uint64_t)"umbrella", v26 + 24, 1);
            (*(void (**)(uint64_t *))(*a1 + 112))(a1);
            (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, v65);
          }
          ++v8;
        }
        while (v8 != v10);
      }
      (*(void (**)(uint64_t *))(*a1 + 48))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v64);
    }
  }
  LODWORD(__p) = 0;
  sub_1C5E949A8(a1, (uint64_t)"allowable-clients", (uint64_t *)v72 + 15, &__p);
  LODWORD(__p) = 1;
  sub_1C5E949A8(a1, (uint64_t)"reexported-libraries", (uint64_t *)v72 + 18, &__p);
  sub_1C5E94CF0(a1, (uint64_t)"exports", (void **)v72 + 25);
  sub_1C5E94CF0(a1, (uint64_t)"reexports", (void **)v72 + 28);
  sub_1C5E94CF0(a1, (uint64_t)"undefineds", (void **)v72 + 31);
  if (((*(uint64_t (**)(uint64_t *))(*v71 + 16))(v71) & 1) == 0)
  {
    v56 = sub_1C63A2724((uint64_t)v72, v71[1]);
    *v73 = v56;
  }
  v27 = (void **)v72;
  sub_1C5E98B68((void **)v72 + 31);
  sub_1C5E98B68(v27 + 28);
  sub_1C5E98B68(v27 + 25);
  v28 = (void **)v27[22];
  if (v28)
  {
    v29 = (void **)v27[23];
    v30 = v27[22];
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v29 - 1) < 0)
          operator delete(*(v29 - 3));
        v31 = *(v29 - 6);
        if (v31)
        {
          *(v29 - 5) = v31;
          operator delete(v31);
        }
        v29 -= 6;
      }
      while (v29 != v28);
      v30 = v27[22];
    }
    v27[23] = v28;
    operator delete(v30);
  }
  sub_1C5E98BC0(v27 + 18);
  sub_1C5E98BC0(v27 + 15);
  v32 = (void **)v27[4];
  if (v32 != v27 + 6)
    free(v32);
  v33 = (void **)v27[1];
  if (v33)
  {
    v34 = (void **)v27[2];
    v35 = v27[1];
    if (v34 != v33)
    {
      do
      {
        if (*((char *)v34 - 1) < 0)
          operator delete(*(v34 - 3));
        v34 -= 4;
      }
      while (v34 != v33);
      v35 = v27[1];
    }
    v27[2] = v33;
    operator delete(v35);
  }
}

uint64_t sub_1C5E939C8(int a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  BOOL v15;
  void *v16;
  size_t v17;
  size_t v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  void *v33;
  size_t v34;
  size_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  unsigned __int8 **v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *j;
  unsigned __int8 *v50;
  uint64_t v51;
  const void **v52;
  unsigned __int8 *v53;
  unsigned __int8 *k;
  unsigned __int8 *v55;
  uint64_t v56;
  const void **v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  size_t v60;
  char v62;
  const void *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  const void *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  const void *v73;
  size_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  const void *v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  const void *v84;
  size_t v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  const void *v88;
  size_t v89;
  unsigned __int8 **v90;
  unsigned __int8 **v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  size_t v100;
  char v102;
  const void *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  const void *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  const void *v113;
  size_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  const void *v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  const void *v124;
  size_t v125;
  unint64_t i;
  uint64_t v128;
  char *v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  char **v156;
  unsigned __int8 **v157;
  char v158;
  uint64_t v159;
  uint64_t v160[38];
  _QWORD *v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  _QWORD v166[7];

  v166[5] = *MEMORY[0x1E0C80C00];
  sub_1C63A2A28(v160, (uint64_t)a2, a3);
  sub_1C63A2AF8((uint64_t)a2, (_DWORD *)(v162 + 96));
  v5 = v162;
  if (a1 == 1)
  {
    sub_1C63A2DD8(a2, (llvm::raw_ostream *)(v162 + 144));
  }
  else
  {
    if (!(*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2) || *(_QWORD *)(v5 + 120) != *(_QWORD *)(v5 + 128))
      sub_1C63A2C64(a2, (int64x2_t *)(v5 + 120));
    sub_1C63A2DD8(a2, (llvm::raw_ostream *)(v162 + 144));
    LODWORD(v164) = 0;
    sub_1C5E94800((uint64_t)a2, (_DWORD *)(v162 + 232), &v164);
  }
  sub_1C6205CC8(a2, (uint64_t)"install-name", (_OWORD *)(v162 + 200), 1);
  LODWORD(v164) = 0x10000;
  sub_1C63A24D4((uint64_t)a2, (uint64_t)"current-version", (llvm::MachO::PackedVersion *)(v162 + 216), &v164);
  LODWORD(v164) = 0x10000;
  sub_1C63A24D4((uint64_t)a2, (uint64_t)"compatibility-version", (llvm::MachO::PackedVersion *)(v162 + 220), &v164);
  LOBYTE(v164) = 0;
  if (a1 == 4)
    v6 = "swift-abi-version";
  else
    v6 = "swift-version";
  sub_1C63A2588(a2, (uint64_t)v6, (_BYTE *)(v162 + 224), &v164);
  LODWORD(v164) = a1 != 1;
  sub_1C63A2E50((uint64_t)a2, (_DWORD *)(v162 + 228), &v164);
  if (a1 == 1)
  {
    sub_1C5E98C38(a2, (_QWORD *)(v162 + 256));
  }
  else
  {
    v164 = 0;
    v165 = 0;
    sub_1C63A2F24(a2, v162 + 240, (uint64_t)&v164);
    sub_1C5E98C38(a2, (_QWORD *)(v162 + 256));
    v7 = v162;
    if (!(*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2) || *(_QWORD *)(v7 + 280) != *(_QWORD *)(v7 + 288))
    {
      v159 = 0;
      v158 = 0;
      if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*a2 + 120))(a2, "undefineds", 0, 0, &v158, &v159))
      {
        v8 = (*(uint64_t (**)(uint64_t *))(*a2 + 24))(a2);
        if ((*(unsigned int (**)(uint64_t *))(*a2 + 16))(a2))
          v8 = 954437177 * ((*(_QWORD *)(v7 + 288) - *(_QWORD *)(v7 + 280)) >> 4);
        if (v8)
        {
          for (i = 0; i != v8; ++i)
          {
            v164 = 0;
            if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t **))(*a2 + 32))(a2, i, &v164))
            {
              v128 = *(_QWORD *)(v7 + 280);
              v129 = *(char **)(v7 + 288);
              v130 = &v129[-v128];
              v131 = 0x8E38E38E38E38E39 * ((uint64_t)&v129[-v128] >> 4);
              if (v131 <= i)
              {
                v132 = 144 * i;
                v133 = (_QWORD *)v7;
                v134 = i + 1;
                v135 = i + 1 - v131;
                v136 = v133[37];
                if (0x8E38E38E38E38E39 * ((v136 - (uint64_t)v129) >> 4) >= v135)
                {
                  bzero(v129, 144 * ((v132 - (uint64_t)v130) / 0x90uLL) + 144);
                  v133[36] = &v129[144 * v135];
                  v7 = (uint64_t)v133;
                }
                else
                {
                  v137 = 0x8E38E38E38E38E39 * ((v136 - v128) >> 4);
                  v138 = 2 * v137;
                  if (2 * v137 <= v134)
                    v138 = i + 1;
                  if (v137 >= 0xE38E38E38E38E3)
                    v139 = 0x1C71C71C71C71C7;
                  else
                    v139 = v138;
                  if (v139 > 0x1C71C71C71C71C7)
                    sub_1C4764EE4();
                  v140 = 9 * v139;
                  v141 = (char *)operator new(144 * v139);
                  v142 = &v141[144 * v131];
                  v143 = &v141[16 * v140];
                  bzero(v142, 144 * ((v132 - (uint64_t)v130) / 0x90uLL) + 144);
                  v144 = &v141[144 * v134];
                  v7 = (uint64_t)v133;
                  v145 = (char *)v133[35];
                  v146 = (char *)v133[36];
                  if (v146 == v145)
                  {
                    v133[35] = v142;
                    v133[36] = v144;
                    v133[37] = v143;
                  }
                  else
                  {
                    do
                    {
                      v142 -= 144;
                      v146 -= 144;
                      sub_1C5E9BCD8(v142, (uint64_t)v146);
                    }
                    while (v146 != v145);
                    v146 = (char *)v133[35];
                    v147 = (char *)v133[36];
                    v133[35] = v142;
                    v133[36] = v144;
                    for (v133[37] = v143; v147 != v146; v147 -= 144)
                    {
                      v148 = (void *)*((_QWORD *)v147 - 3);
                      if (v148)
                      {
                        *((_QWORD *)v147 - 2) = v148;
                        operator delete(v148);
                      }
                      v149 = (void *)*((_QWORD *)v147 - 6);
                      if (v149)
                      {
                        *((_QWORD *)v147 - 5) = v149;
                        operator delete(v149);
                      }
                      v150 = (void *)*((_QWORD *)v147 - 9);
                      if (v150)
                      {
                        *((_QWORD *)v147 - 8) = v150;
                        operator delete(v150);
                      }
                      v151 = (void *)*((_QWORD *)v147 - 12);
                      if (v151)
                      {
                        *((_QWORD *)v147 - 11) = v151;
                        operator delete(v151);
                      }
                      v152 = (void *)*((_QWORD *)v147 - 15);
                      if (v152)
                      {
                        *((_QWORD *)v147 - 14) = v152;
                        operator delete(v152);
                      }
                      v153 = (void *)*((_QWORD *)v147 - 18);
                      if (v153)
                      {
                        *((_QWORD *)v147 - 17) = v153;
                        operator delete(v153);
                      }
                    }
                  }
                  if (v146)
                    operator delete(v146);
                }
              }
              v154 = *(_QWORD *)(v7 + 280);
              (*(void (**)(uint64_t *))(*a2 + 104))(a2);
              v155 = a2[1];
              sub_1C63A2AF8((uint64_t)a2, (_DWORD *)(v154 + 144 * i));
              v156 = (char **)(v154 + 144 * i + 24);
              if (!(*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2)
                || *v156 != *(char **)(v154 + 144 * i + 32))
              {
                sub_1C63A26B4(a2, (uint64_t)"symbols", v156, 0);
              }
              if (!(*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2)
                || *(_QWORD *)(v154 + 144 * i + 48) != *(_QWORD *)(v154 + 144 * i + 56))
              {
                sub_1C63A26B4(a2, (uint64_t)"objc-classes", (char **)(v154 + 144 * i + 48), 0);
              }
              if (*(_DWORD *)(v155 + 48) == 4
                && (!(*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2)
                 || *(_QWORD *)(v154 + 144 * i + 72) != *(_QWORD *)(v154 + 144 * i + 80)))
              {
                sub_1C63A26B4(a2, (uint64_t)"objc-eh-types", (char **)(v154 + 144 * i + 72), 0);
              }
              if (!(*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2)
                || *(_QWORD *)(v154 + 144 * i + 96) != *(_QWORD *)(v154 + 144 * i + 104))
              {
                sub_1C63A26B4(a2, (uint64_t)"objc-ivars", (char **)(v154 + 144 * i + 96), 0);
              }
              if (!(*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2)
                || *(_QWORD *)(v154 + 144 * i + 120) != *(_QWORD *)(v154 + 144 * i + 128))
              {
                sub_1C63A26B4(a2, (uint64_t)"weak-ref-symbols", (char **)(v154 + 144 * i + 120), 0);
              }
              (*(void (**)(uint64_t *))(*a2 + 112))(a2);
              (*(void (**)(uint64_t *, uint64_t *))(*a2 + 40))(a2, v164);
            }
          }
        }
        (*(void (**)(uint64_t *))(*a2 + 48))(a2);
        (*(void (**)(uint64_t *, uint64_t))(*a2 + 128))(a2, v159);
      }
    }
  }
  if (((*(uint64_t (**)(_QWORD *))(*v161 + 16))(v161) & 1) == 0)
  {
    v9 = v162;
    v10 = v161[1];
    v11 = operator new();
    v12 = v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = v11 + 32;
    *(_QWORD *)(v11 + 24) = 0x400000000;
    *(_QWORD *)(v11 + 80) = 0;
    *(_QWORD *)(v11 + 64) = v11 + 80;
    *(_QWORD *)(v11 + 72) = 0;
    *(_QWORD *)(v11 + 88) = 1;
    *(_QWORD *)(v11 + 96) = v11 + 112;
    v13 = (unsigned int *)(v11 + 96);
    *(_QWORD *)(v11 + 104) = 0x500000000;
    *(_QWORD *)(v11 + 160) = 0;
    *(_QWORD *)(v11 + 168) = 0;
    *(_QWORD *)(v11 + 152) = 0;
    *(_QWORD *)(v11 + 368) = 0;
    *(_OWORD *)(v11 + 200) = 0u;
    *(_OWORD *)(v11 + 216) = 0u;
    *(_OWORD *)(v11 + 232) = 0u;
    *(_OWORD *)(v11 + 248) = 0u;
    *(_DWORD *)(v11 + 360) = 0;
    *(_OWORD *)(v11 + 184) = 0u;
    *(_OWORD *)(v11 + 264) = 0u;
    *(_OWORD *)(v11 + 280) = 0u;
    *(_OWORD *)(v11 + 296) = 0u;
    *(_OWORD *)(v11 + 312) = 0u;
    *(_OWORD *)(v11 + 328) = 0u;
    *(_OWORD *)(v11 + 344) = 0u;
    v14 = *(_BYTE *)(v10 + 47);
    v15 = v14 < 0;
    if (v14 >= 0)
      v16 = (void *)(v10 + 24);
    else
      v16 = *(void **)(v10 + 24);
    v17 = v14 & 0x7F;
    if (v15)
      v18 = *(_QWORD *)(v10 + 32);
    else
      v18 = v17;
    sub_1C5E98894(v11, v16, v18);
    v19 = 0;
    *(_DWORD *)(v12 + 176) = *(_DWORD *)(v10 + 48);
    v20 = *(unsigned __int8 **)(v9 + 96);
    v21 = *(unsigned __int8 **)(v9 + 104);
    if (v20 != v21)
    {
      v19 = 0;
      v22 = 0;
      do
      {
        v23 = *v20++;
        v24 = (1 << v23) | v22;
        if (v23 != 118)
        {
          v19 = v24;
          v22 = v24;
        }
      }
      while (v20 != v21);
    }
    v25 = v9 + 144;
    sub_1C5E9C418(&v164, v19, v9 + 144);
    v26 = v164;
    if ((_DWORD)v165)
    {
      v27 = 8 * v165;
      do
      {
        v28 = *v26++;
        v159 = v28;
        sub_1C5E8EB40(v13, (unsigned __int8 *)&v159);
        v27 -= 8;
      }
      while (v27);
      v26 = v164;
    }
    if (v26 != v166)
      free(v26);
    v30 = *(_QWORD *)(v9 + 120);
    v29 = *(_QWORD *)(v9 + 128);
    while (v30 != v29)
    {
      v31 = *(_BYTE *)(v30 + 31);
      v32 = v31;
      if (v31 >= 0)
        v33 = (void *)(v30 + 8);
      else
        v33 = *(void **)(v30 + 8);
      v34 = v31 & 0x7F;
      if (v32 >= 0)
        v35 = v34;
      else
        v35 = *(_QWORD *)(v30 + 16);
      llvm::MachO::InterfaceFile::addUUID(v12, (unsigned __int8 *)v30, v33, v35);
      v30 += 32;
    }
    sub_1C5E98960(v12, *(void **)(v9 + 200), *(_QWORD *)(v9 + 208));
    *(_DWORD *)(v12 + 208) = *(_DWORD *)(v9 + 216);
    *(_DWORD *)(v12 + 212) = *(_DWORD *)(v9 + 220);
    *(_BYTE *)(v12 + 216) = *(_BYTE *)(v9 + 224);
    *(_DWORD *)(v12 + 220) = *(_DWORD *)(v9 + 228);
    v36 = *(unsigned int *)(v12 + 104);
    if ((_DWORD)v36)
    {
      v37 = *(unsigned __int8 **)(v12 + 96);
      v38 = 8 * v36;
      do
      {
        llvm::MachO::InterfaceFile::addParentUmbrella(v12, v37, *(void **)(v9 + 240), *(_QWORD *)(v9 + 248));
        v37 += 8;
        v38 -= 8;
      }
      while (v38);
    }
    v39 = *(_DWORD *)(v10 + 48);
    if (v39 == 1)
    {
      v40 = 1;
    }
    else
    {
      LOBYTE(v39) = (*(_DWORD *)(v9 + 232) & 1) == 0;
      v40 = (*(_DWORD *)(v9 + 232) & 2) == 0;
      *(_BYTE *)(v12 + 219) = (*(_DWORD *)(v9 + 232) & 4) != 0;
    }
    *(_BYTE *)(v12 + 217) = v39;
    *(_BYTE *)(v12 + 218) = v40;
    v41 = *(unsigned __int8 ***)(v9 + 256);
    v157 = *(unsigned __int8 ***)(v9 + 264);
    if (v41 != v157)
    {
      while (1)
      {
        v42 = *v41;
        v43 = v41[1];
        if (*v41 == v43)
        {
          v44 = 0;
        }
        else
        {
          v44 = 0;
          v45 = 0;
          do
          {
            v46 = *v42++;
            v47 = (1 << v46) | v45;
            if (v46 != 118)
            {
              v44 = v47;
              v45 = v47;
            }
          }
          while (v42 != v43);
        }
        sub_1C5E9C418(&v164, v44, v25);
        v48 = v41[3];
        for (j = v41[4]; v48 != j; v48 += 16)
        {
          if ((_DWORD)v165)
          {
            v50 = (unsigned __int8 *)v164;
            v51 = 8 * v165;
            do
            {
              v52 = sub_1C5E8EC08((const void ***)(v12 + 248), *(void **)v48, *((_QWORD *)v48 + 1));
              sub_1C5E8EB40((unsigned int *)v52 + 6, v50);
              v50 += 8;
              v51 -= 8;
            }
            while (v51);
          }
        }
        v53 = v41[6];
        for (k = v41[7]; v53 != k; v53 += 16)
        {
          if ((_DWORD)v165)
          {
            v55 = (unsigned __int8 *)v164;
            v56 = 8 * v165;
            do
            {
              v57 = sub_1C5E8EC08((const void ***)(v12 + 272), *(void **)v53, *((_QWORD *)v53 + 1));
              sub_1C5E8EB40((unsigned int *)v57 + 6, v55);
              v55 += 8;
              v56 -= 8;
            }
            while (v56);
          }
        }
        v58 = v41[9];
        v59 = v41[10];
        v25 = v9 + 144;
        if (v58 != v59)
          break;
LABEL_82:
        v64 = v41[12];
        v65 = v41[13];
        while (v64 != v65)
        {
          v66 = *(_QWORD *)v64;
          v67 = *((_QWORD *)v64 + 1);
          v64 += 16;
          v68 = *(_DWORD *)(v10 + 48) == 4 || v67 == 0;
          v69 = !v68;
          if (v68)
            v70 = (const void *)v66;
          else
            v70 = (const void *)(v66 + 1);
          llvm::MachO::InterfaceFile::addSymbol(v12, 1, v70, v67 - v69, (uint64_t)&v164, 0);
        }
        v71 = v41[15];
        v72 = v41[16];
        while (v71 != v72)
        {
          v73 = *(const void **)v71;
          v74 = *((_QWORD *)v71 + 1);
          v71 += 16;
          llvm::MachO::InterfaceFile::addSymbol(v12, 2, v73, v74, (uint64_t)&v164, 0);
        }
        v75 = v41[18];
        v76 = v41[19];
        while (v75 != v76)
        {
          v77 = *(_QWORD *)v75;
          v78 = *((_QWORD *)v75 + 1);
          v75 += 16;
          v79 = *(_DWORD *)(v10 + 48) == 4 || v78 == 0;
          v80 = !v79;
          if (v79)
            v81 = (const void *)v77;
          else
            v81 = (const void *)(v77 + 1);
          llvm::MachO::InterfaceFile::addSymbol(v12, 3, v81, v78 - v80, (uint64_t)&v164, 0);
        }
        v82 = v41[21];
        v83 = v41[22];
        while (v82 != v83)
        {
          v84 = *(const void **)v82;
          v85 = *((_QWORD *)v82 + 1);
          v82 += 16;
          llvm::MachO::InterfaceFile::addSymbol(v12, 0, v84, v85, (uint64_t)&v164, 2);
        }
        v86 = v41[24];
        v87 = v41[25];
        while (v86 != v87)
        {
          v88 = *(const void **)v86;
          v89 = *((_QWORD *)v86 + 1);
          v86 += 16;
          llvm::MachO::InterfaceFile::addSymbol(v12, 0, v88, v89, (uint64_t)&v164, 1);
        }
        if (v164 != v166)
          free(v164);
        v41 += 27;
        if (v41 == v157)
          goto LABEL_118;
      }
      while (1)
      {
        if (*(_DWORD *)(v10 + 48) == 4)
        {
          v60 = *((_QWORD *)v58 + 1);
        }
        else
        {
          v60 = *((_QWORD *)v58 + 1);
          if (v60 >= 0xF
            && **(_QWORD **)v58 == 0x48455F434A424F5FLL
            && *(_QWORD *)(*(_QWORD *)v58 + 7) == 0x5F245F4550595448)
          {
            v63 = (const void *)(*(_QWORD *)v58 + 15);
            v62 = 2;
            v60 -= 15;
            goto LABEL_79;
          }
        }
        v62 = 0;
        v63 = *(const void **)v58;
LABEL_79:
        llvm::MachO::InterfaceFile::addSymbol(v12, v62, v63, v60, (uint64_t)&v164, 0);
        v58 += 16;
        if (v58 == v59)
          goto LABEL_82;
      }
    }
LABEL_118:
    v90 = *(unsigned __int8 ***)(v9 + 280);
    v91 = *(unsigned __int8 ***)(v9 + 288);
    if (v90 == v91)
      goto LABEL_171;
LABEL_119:
    v92 = *v90;
    v93 = v90[1];
    if (*v90 == v93)
    {
      v94 = 0;
    }
    else
    {
      v94 = 0;
      v95 = 0;
      do
      {
        v96 = *v92++;
        v97 = (1 << v96) | v95;
        if (v96 != 118)
        {
          v94 = v97;
          v95 = v97;
        }
      }
      while (v92 != v93);
    }
    sub_1C5E9C418(&v164, v94, v25);
    v98 = v90[3];
    v99 = v90[4];
    while (1)
    {
      if (v98 == v99)
      {
        v104 = v90[6];
        v105 = v90[7];
        while (v104 != v105)
        {
          v106 = *(_QWORD *)v104;
          v107 = *((_QWORD *)v104 + 1);
          v104 += 16;
          v108 = *(_DWORD *)(v10 + 48) == 4 || v107 == 0;
          v109 = !v108;
          if (v108)
            v110 = (const void *)v106;
          else
            v110 = (const void *)(v106 + 1);
          llvm::MachO::InterfaceFile::addSymbol(v12, 1, v110, v107 - v109, (uint64_t)&v164, 8);
        }
        v111 = v90[9];
        v112 = v90[10];
        while (v111 != v112)
        {
          v113 = *(const void **)v111;
          v114 = *((_QWORD *)v111 + 1);
          v111 += 16;
          llvm::MachO::InterfaceFile::addSymbol(v12, 2, v113, v114, (uint64_t)&v164, 8);
        }
        v115 = v90[12];
        v116 = v90[13];
        while (v115 != v116)
        {
          v117 = *(_QWORD *)v115;
          v118 = *((_QWORD *)v115 + 1);
          v115 += 16;
          v119 = *(_DWORD *)(v10 + 48) == 4 || v118 == 0;
          v120 = !v119;
          if (v119)
            v121 = (const void *)v117;
          else
            v121 = (const void *)(v117 + 1);
          llvm::MachO::InterfaceFile::addSymbol(v12, 3, v121, v118 - v120, (uint64_t)&v164, 8);
        }
        v122 = v90[15];
        v123 = v90[16];
        while (v122 != v123)
        {
          v124 = *(const void **)v122;
          v125 = *((_QWORD *)v122 + 1);
          v122 += 16;
          llvm::MachO::InterfaceFile::addSymbol(v12, 0, v124, v125, (uint64_t)&v164, 12);
        }
        if (v164 != v166)
          free(v164);
        v90 += 18;
        if (v90 == v91)
        {
LABEL_171:
          *v163 = v12;
          return sub_1C63A30B8(v162);
        }
        goto LABEL_119;
      }
      if (*(_DWORD *)(v10 + 48) == 4)
        break;
      v100 = *((_QWORD *)v98 + 1);
      if (v100 < 0xF)
        goto LABEL_135;
      if (**(_QWORD **)v98 != 0x48455F434A424F5FLL || *(_QWORD *)(*(_QWORD *)v98 + 7) != 0x5F245F4550595448)
        goto LABEL_135;
      v103 = (const void *)(*(_QWORD *)v98 + 15);
      v102 = 2;
      v100 -= 15;
LABEL_136:
      llvm::MachO::InterfaceFile::addSymbol(v12, v102, v103, v100, (uint64_t)&v164, 8);
      v98 += 16;
    }
    v100 = *((_QWORD *)v98 + 1);
LABEL_135:
    v102 = 0;
    v103 = *(const void **)v98;
    goto LABEL_136;
  }
  return sub_1C63A30B8(v162);
}

uint64_t sub_1C5E94800(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;

  v13 = 0;
  v12 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == *a3)
    v7 = v6;
  else
    v7 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "flags", 0, v7, &v12, &v13);
  if ((_DWORD)result)
  {
    v14 = 0;
    if ((*(unsigned int (**)(uint64_t, char *))(*(_QWORD *)a1 + 192))(a1, &v14))
    {
      if (v14)
        *a2 = 0;
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "flat_namespace", v9 & *a2))
      {
        *a2 |= 1u;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "not_app_extension_safe", *(_DWORD *)&v10 & ((*a2 & 2u) >> 1)))
      {
        *a2 |= 2u;
      }
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "installapi", *(_DWORD *)&v11 & ((*a2 & 4u) >> 2)))
      {
        *a2 |= 4u;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13);
  }
  else if (v12)
  {
    *a2 = *a3;
  }
  return result;
}

uint64_t sub_1C5E949A8(_QWORD *a1, uint64_t a2, uint64_t *a3, _DWORD *i)
{
  uint64_t result;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  _DWORD *v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t *v37;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  if (!(_DWORD)result || *a3 != a3[1])
  {
    v31 = 0;
    v30 = 0;
    result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, 0, 0, &v30, &v31);
    if ((_DWORD)result)
    {
      v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
        v9 = -1431655765 * ((unint64_t)(a3[1] - *a3) >> 4);
      if (v9)
      {
        v10 = 0;
        v11 = v9;
        v29 = a3 + 2;
        do
        {
          v32 = 0;
          if ((*(unsigned int (**)(_QWORD *, unint64_t, uint64_t *))(*a1 + 32))(a1, v10, &v32))
          {
            v12 = (void *)a3[1];
            v13 = (uint64_t)v12 - *a3;
            v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 4);
            if (v14 <= v10)
            {
              v28 = i;
              v15 = 48 * v10;
              v16 = v10 + 1;
              v17 = v10 + 1 - v14;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v29 - (_QWORD)v12) >> 4) >= v17)
              {
                bzero(v12, 48 * ((v15 - v13) / 0x30uLL) + 48);
                a3[1] = (uint64_t)v12 + 48 * v17;
                i = v28;
              }
              else
              {
                v18 = 0x5555555555555556 * ((*v29 - *a3) >> 4);
                if (v18 <= v16)
                  v18 = v10 + 1;
                if (0xAAAAAAAAAAAAAAABLL * ((*v29 - *a3) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                  v19 = 0x555555555555555;
                else
                  v19 = v18;
                v37 = a3 + 2;
                if (v19 > 0x555555555555555)
                  sub_1C4764EE4();
                v20 = 3 * v19;
                v21 = (char *)operator new(48 * v19);
                __p = v21;
                v34 = &v21[16 * (v13 >> 4)];
                v36 = &v21[16 * v20];
                bzero(v34, 48 * ((v15 - v13) / 0x30uLL) + 48);
                v35 = &v21[48 * v16];
                sub_1C5E97C0C(a3, &__p);
                v22 = v34;
                v23 = v35;
                for (i = v28; v23 != v22; v23 -= 48)
                {
                  v24 = (void *)*((_QWORD *)v23 - 3);
                  if (v24)
                  {
                    *((_QWORD *)v23 - 2) = v24;
                    operator delete(v24);
                  }
                  v25 = (void *)*((_QWORD *)v23 - 6);
                  if (v25)
                  {
                    *((_QWORD *)v23 - 5) = v25;
                    operator delete(v25);
                  }
                }
                if (__p)
                  operator delete(__p);
              }
            }
            v26 = *a3 + 48 * v10;
            (*(void (**)(_QWORD *))(*a1 + 104))(a1);
            sub_1C63A263C((uint64_t)a1, v26);
            if (*i)
              v27 = "libraries";
            else
              v27 = "clients";
            sub_1C63A26B4(a1, (uint64_t)v27, (char **)(v26 + 24), 1);
            (*(void (**)(_QWORD *))(*a1 + 112))(a1);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v32);
          }
          ++v10;
        }
        while (v10 != v11);
      }
      (*(void (**)(_QWORD *))(*a1 + 48))(a1);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, v31);
    }
  }
  return result;
}

uint64_t sub_1C5E94CF0(_QWORD *a1, uint64_t a2, void **a3)
{
  uint64_t result;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t v29;
  char **v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  if (!(_DWORD)result || *a3 != a3[1])
  {
    v33 = 0;
    v32 = 0;
    result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, 0, 0, &v32, &v33);
    if ((_DWORD)result)
    {
      v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
        v7 = -1030792151 * ((unint64_t)((_BYTE *)a3[1] - (_BYTE *)*a3) >> 3);
      if (v7)
      {
        v8 = 0;
        v9 = v7;
        v10 = 200;
        do
        {
          v34 = 0;
          if ((*(unsigned int (**)(_QWORD *, unint64_t, uint64_t *))(*a1 + 32))(a1, v8, &v34))
          {
            v11 = (char *)*a3;
            v12 = (char *)a3[1];
            v13 = 0x8F5C28F5C28F5C29 * ((v12 - (_BYTE *)*a3) >> 3);
            if (v13 <= v8)
            {
              v14 = v8 + 1;
              v15 = v8 + 1 - v13;
              v16 = a3[2];
              if (0x8F5C28F5C28F5C29 * ((v16 - v12) >> 3) >= v15)
              {
                v25 = &v12[200 * v15];
                v26 = v10 - 8 * ((v12 - (_BYTE *)*a3) >> 3);
                do
                {
                  *((_QWORD *)v12 + 6) = 0;
                  *((_OWORD *)v12 + 2) = 0uLL;
                  *((_OWORD *)v12 + 1) = 0uLL;
                  *(_QWORD *)v12 = v12 + 16;
                  *((_QWORD *)v12 + 1) = 0x500000000;
                  *(_OWORD *)(v12 + 56) = 0uLL;
                  *(_OWORD *)(v12 + 72) = 0uLL;
                  *(_OWORD *)(v12 + 88) = 0uLL;
                  *(_OWORD *)(v12 + 104) = 0uLL;
                  *(_OWORD *)(v12 + 120) = 0uLL;
                  *(_OWORD *)(v12 + 136) = 0uLL;
                  *(_OWORD *)(v12 + 152) = 0uLL;
                  *(_OWORD *)(v12 + 168) = 0uLL;
                  *(_OWORD *)(v12 + 184) = 0uLL;
                  v12 += 200;
                  v26 -= 200;
                }
                while (v26);
                a3[1] = v25;
              }
              else
              {
                v17 = 0x8F5C28F5C28F5C29 * ((v16 - v11) >> 3);
                v18 = 2 * v17;
                if (2 * v17 <= v14)
                  v18 = v8 + 1;
                if (v17 >= 0xA3D70A3D70A3D7)
                  v19 = 0x147AE147AE147AELL;
                else
                  v19 = v18;
                if (v19 > 0x147AE147AE147AELL)
                  sub_1C4764EE4();
                v20 = (char *)operator new(200 * v19);
                v21 = 200 * v13;
                v22 = &v20[200 * v13];
                do
                {
                  v23 = &v20[v21];
                  *((_QWORD *)v23 + 6) = 0;
                  *((_OWORD *)v23 + 2) = 0uLL;
                  *(_OWORD *)&v20[v21 + 16] = 0uLL;
                  *(_QWORD *)v23 = &v20[v21 + 16];
                  *((_QWORD *)v23 + 1) = 0x500000000;
                  *(_OWORD *)(v23 + 56) = 0uLL;
                  *(_OWORD *)(v23 + 72) = 0uLL;
                  *(_OWORD *)(v23 + 88) = 0uLL;
                  *(_OWORD *)(v23 + 104) = 0uLL;
                  *(_OWORD *)(v23 + 120) = 0uLL;
                  *(_OWORD *)(v23 + 136) = 0uLL;
                  *(_OWORD *)(v23 + 152) = 0uLL;
                  *(_OWORD *)(v23 + 168) = 0uLL;
                  v21 += 200;
                  *(_OWORD *)(v23 + 184) = 0uLL;
                }
                while (v10 != v21);
                v24 = &v20[200 * v19];
                if (v12 == v11)
                {
                  *a3 = v22;
                  a3[1] = &v20[200 * v14];
                  a3[2] = v24;
                }
                else
                {
                  v31 = &v20[200 * v14];
                  do
                  {
                    v22 -= 200;
                    v12 -= 200;
                    sub_1C5E97DE8(v22, (uint64_t)v12);
                  }
                  while (v12 != v11);
                  v12 = (char *)*a3;
                  v27 = (uint64_t)a3[1];
                  *a3 = v22;
                  a3[1] = v31;
                  for (a3[2] = v24; (char *)v27 != v12; v27 = sub_1C5E97CB8(v27 - 200))
                    ;
                }
                if (v12)
                  operator delete(v12);
              }
            }
            v28 = (char **)*a3;
            v29 = (uint64_t)*a3 + 200 * v8;
            (*(void (**)(_QWORD *))(*a1 + 104))(a1);
            sub_1C63A2280((uint64_t)a1, v29);
            v30 = (char **)(v29 + 56);
            if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1) || *v30 != v28[25 * v8 + 8])
              sub_1C63A26B4(a1, (uint64_t)"symbols", v30, 0);
            if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1) || v28[25 * v8 + 10] != v28[25 * v8 + 11])
              sub_1C63A26B4(a1, (uint64_t)"objc-classes", &v28[25 * v8 + 10], 0);
            if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1) || v28[25 * v8 + 13] != v28[25 * v8 + 14])
              sub_1C63A26B4(a1, (uint64_t)"objc-eh-types", &v28[25 * v8 + 13], 0);
            if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1) || v28[25 * v8 + 16] != v28[25 * v8 + 17])
              sub_1C63A26B4(a1, (uint64_t)"objc-ivars", &v28[25 * v8 + 16], 0);
            if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1) || v28[25 * v8 + 19] != v28[25 * v8 + 20])
              sub_1C63A26B4(a1, (uint64_t)"weak-symbols", &v28[25 * v8 + 19], 0);
            if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1) || v28[25 * v8 + 22] != v28[25 * v8 + 23])
              sub_1C63A26B4(a1, (uint64_t)"thread-local-symbols", &v28[25 * v8 + 22], 0);
            (*(void (**)(_QWORD *))(*a1 + 112))(a1);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v34);
          }
          ++v8;
          v10 += 200;
        }
        while (v8 != v9);
      }
      (*(void (**)(_QWORD *))(*a1 + 48))(a1);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, v33);
    }
  }
  return result;
}

uint64_t sub_1C5E95248(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  unint64_t *v5;
  std::string::size_type *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  __int128 *v11;
  _BYTE *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  std::string::size_type size;
  _BYTE *v21;
  __int128 v22;
  std::string::size_type v23;
  std::string::size_type v24;
  uint64_t v25;
  __int128 v26;
  int64x2_t v27;
  std::string::size_type v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char **v43;
  _QWORD *v44;
  void (**v45)(_QWORD *);
  void **v46;
  _QWORD *v47;
  void (**v48)(_QWORD *);
  _QWORD *v49;
  void (**v50)(_QWORD *);
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  char *v55;
  char **v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  std::string *v63;
  uint64_t v64;
  std::string *i;
  std::string *v66;
  std::string::pointer data;
  int v68;
  void **v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  std::string v74[2];
  char **v75;
  char *v76[2];
  void *__p;
  std::string *v78;
  std::string *v79;
  char *v80;
  uint64_t v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[16];
  _QWORD v85[3];
  _QWORD *v86;
  _QWORD v87[16];
  _QWORD v88[3];
  _QWORD *v89;
  _QWORD v90[18];

  v3 = a3;
  v90[16] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (unint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (std::string::size_type *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x500000000;
  *(_OWORD *)(a1 + 120) = 0u;
  v70 = (uint64_t *)(a1 + 120);
  *(_OWORD *)(a1 + 176) = 0u;
  v73 = (uint64_t *)(a1 + 176);
  *(_OWORD *)(a1 + 192) = 0u;
  v72 = a1 + 192;
  *(_OWORD *)(a1 + 224) = 0u;
  v69 = (void **)(a1 + 224);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)a1 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 48) >> 1;
  sub_1C63A15C8((unsigned int *)(a1 + 32), a1 + 48, *(uint64_t **)(*a3 + 96), (uint64_t *)(*(_QWORD *)(*a3 + 96) + 8 * *(unsigned int *)(*a3 + 104)));
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 320);
  v9 = *(_QWORD *)(*v3 + 328);
  v71 = v3;
  if (v8 != v9)
  {
    v10 = *(_QWORD *)(a1 + 16);
    do
    {
      v11 = (__int128 *)(v8 + 8);
      if (v10 >= *v6)
      {
        v14 = *v5;
        v15 = (uint64_t)(v10 - *v5) >> 5;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59)
LABEL_92:
          abort();
        v17 = *v6 - v14;
        if (v17 >> 4 > v16)
          v16 = v17 >> 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        v74[1].__r_.__value_.__r.__words[0] = 0;
        v74[1].__r_.__value_.__l.__size_ = (std::string::size_type)v6;
        if (v18)
        {
          if (v18 >> 59)
LABEL_93:
            sub_1C4764EE4();
          v19 = operator new(32 * v18);
        }
        else
        {
          v19 = 0;
        }
        size = (std::string::size_type)v19 + 32 * v15;
        v74[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        v74[0].__r_.__value_.__l.__size_ = size;
        v74[0].__r_.__value_.__r.__words[2] = size;
        v74[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v19 + 32 * v18;
        *(_QWORD *)size = *(_QWORD *)v8;
        v21 = (_BYTE *)(size + 8);
        if (*(char *)(v8 + 31) < 0)
        {
          sub_1C47EBC30(v21, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
          v14 = *(_QWORD *)(a1 + 8);
          v10 = *(_QWORD *)(a1 + 16);
          v23 = v74[0].__r_.__value_.__r.__words[2];
          size = v74[0].__r_.__value_.__l.__size_;
        }
        else
        {
          v22 = *v11;
          *(_QWORD *)(size + 24) = *(_QWORD *)(v8 + 24);
          *(_OWORD *)v21 = v22;
          v23 = size;
        }
        v24 = v23 + 32;
        v74[0].__r_.__value_.__r.__words[2] = v24;
        if (v10 == v14)
        {
          v27 = vdupq_n_s64(v14);
          v10 = v24;
        }
        else
        {
          do
          {
            v25 = *(_QWORD *)(v10 - 32);
            v10 -= 32;
            *(_QWORD *)(size - 32) = v25;
            size -= 32;
            v26 = *(_OWORD *)(v10 + 8);
            *(_QWORD *)(size + 24) = *(_QWORD *)(v10 + 24);
            *(_OWORD *)(size + 8) = v26;
            *(_QWORD *)(v10 + 16) = 0;
            *(_QWORD *)(v10 + 24) = 0;
            *(_QWORD *)(v10 + 8) = 0;
          }
          while (v10 != v14);
          v27 = *(int64x2_t *)v5;
          v10 = v74[0].__r_.__value_.__r.__words[2];
        }
        *(_QWORD *)(a1 + 8) = size;
        *(_QWORD *)(a1 + 16) = v10;
        *(int64x2_t *)&v74[0].__r_.__value_.__r.__words[1] = v27;
        v28 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v74[1].__r_.__value_.__l.__data_;
        v74[1].__r_.__value_.__r.__words[0] = v28;
        v74[0].__r_.__value_.__r.__words[0] = v27.i64[0];
        sub_1C59C5548((uint64_t)v74);
      }
      else
      {
        *(_QWORD *)v10 = *(_QWORD *)v8;
        v12 = (_BYTE *)(v10 + 8);
        if (*(char *)(v8 + 31) < 0)
        {
          sub_1C47EBC30(v12, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
        }
        else
        {
          v13 = *v11;
          *(_QWORD *)(v10 + 24) = *(_QWORD *)(v8 + 24);
          *(_OWORD *)v12 = v13;
        }
        v10 += 32;
      }
      *(_QWORD *)(a1 + 16) = v10;
      v8 += 32;
    }
    while (v8 != v9);
    v3 = v71;
    v7 = *v71;
  }
  v31 = *(_QWORD *)(v7 + 184);
  v29 = v7 + 184;
  v30 = v31;
  v32 = *(_BYTE *)(v29 + 23);
  v33 = v32;
  if (v32 >= 0)
    v30 = v29;
  v34 = *(_QWORD *)(v29 + 8);
  v35 = v32 & 0x7F;
  if (v33 >= 0)
    v34 = v35;
  *(_QWORD *)(a1 + 88) = v30;
  *(_QWORD *)(a1 + 96) = v34;
  v36 = *v3;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(*v3 + 208);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(v36 + 212);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(v36 + 216);
  v37 = 2 * (*(_BYTE *)(v36 + 218) == 0);
  *(_DWORD *)(a1 + 168) = v37;
  v38 = *v3;
  if (!*(_BYTE *)(*v3 + 217))
  {
    v37 |= 1u;
    *(_DWORD *)(a1 + 168) = v37;
    v38 = *v3;
  }
  if (*(_BYTE *)(v38 + 219))
  {
    *(_DWORD *)(a1 + 168) = v37 | 4;
    v38 = *v3;
  }
  v76[0] = 0;
  v76[1] = 0;
  v75 = v76;
  v39 = *(_QWORD *)(v38 + 224);
  v40 = *(_QWORD *)(v38 + 232);
  if (v39 != v40)
  {
    do
    {
      v74[0].__r_.__value_.__r.__words[0] = v39 + 8;
      v41 = sub_1C63A17D8((uint64_t)&v75, (const void **)(v39 + 8), (uint64_t *)v74);
      v42 = *((unsigned int *)v41 + 16);
      if (v42 >= *((_DWORD *)v41 + 17))
      {
        sub_1C63A1878((_DWORD *)v41 + 14, *(_QWORD *)v39);
      }
      else
      {
        *(_QWORD *)(v41[7] + 8 * v42) = *(_QWORD *)v39;
        ++*((_DWORD *)v41 + 16);
      }
      v39 += 32;
    }
    while (v39 != v40);
    v43 = v75;
    if (v75 != v76)
    {
      do
      {
        memset(v74, 0, sizeof(v74));
        sub_1C5E96CF8((uint64_t)v74, v43[7], &v43[7][8 * *((unsigned int *)v43 + 16)], *((unsigned int *)v43 + 16));
        std::string::operator=(&v74[1], (const std::string *)(v43 + 4));
        v52 = *(_QWORD *)(a1 + 184);
        v53 = *(_QWORD *)(a1 + 192);
        if (v52 >= v53)
        {
          v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *v73) >> 4);
          v59 = v58 + 1;
          if (v58 + 1 > 0x555555555555555)
            goto LABEL_92;
          v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *v73) >> 4);
          if (2 * v60 > v59)
            v59 = 2 * v60;
          if (v60 >= 0x2AAAAAAAAAAAAAALL)
            v61 = 0x555555555555555;
          else
            v61 = v59;
          v81 = v72;
          if (v61)
          {
            if (v61 > 0x555555555555555)
              goto LABEL_93;
            v62 = (char *)operator new(48 * v61);
          }
          else
          {
            v62 = 0;
          }
          v63 = (std::string *)&v62[48 * v58];
          __p = v62;
          v78 = v63;
          *v63 = v74[0];
          memset(v74, 0, 24);
          v63[1] = v74[1];
          memset(&v74[1], 0, sizeof(std::string));
          v79 = v63 + 2;
          v80 = &v62[48 * v61];
          sub_1C5E96F2C(v73, &__p);
          v64 = *(_QWORD *)(a1 + 184);
          v66 = v78;
          for (i = v79; i != v66; i -= 2)
          {
            if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(i[-1].__r_.__value_.__l.__data_);
            data = i[-2].__r_.__value_.__l.__data_;
            if (data)
            {
              i[-2].__r_.__value_.__l.__size_ = (std::string::size_type)data;
              operator delete(data);
            }
          }
          if (__p)
            operator delete(__p);
          v68 = SHIBYTE(v74[1].__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a1 + 184) = v64;
          if (v68 < 0)
            operator delete(v74[1].__r_.__value_.__l.__data_);
          if (v74[0].__r_.__value_.__r.__words[0])
          {
            v74[0].__r_.__value_.__l.__size_ = v74[0].__r_.__value_.__r.__words[0];
            operator delete(v74[0].__r_.__value_.__l.__data_);
          }
        }
        else
        {
          *(_QWORD *)v52 = 0;
          *(_QWORD *)(v52 + 8) = 0;
          *(_QWORD *)(v52 + 16) = 0;
          *(std::string *)v52 = v74[0];
          v54 = *(_OWORD *)&v74[1].__r_.__value_.__l.__data_;
          *(_QWORD *)(v52 + 40) = *((_QWORD *)&v74[1].__r_.__value_.__l + 2);
          memset(v74, 0, 24);
          *(_OWORD *)(v52 + 24) = v54;
          memset(&v74[1], 0, sizeof(std::string));
          *(_QWORD *)(a1 + 184) = v52 + 48;
        }
        v55 = v43[1];
        if (v55)
        {
          do
          {
            v56 = (char **)v55;
            v55 = *(char **)v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            v56 = (char **)v43[2];
            v57 = *v56 == (char *)v43;
            v43 = v56;
          }
          while (!v57);
        }
        v43 = v56;
      }
      while (v56 != v76);
    }
  }
  sub_1C5E96FB4(v76[0]);
  sub_1C5E95974(*(_QWORD *)(*v71 + 248), *(_QWORD *)(*v71 + 256), v70);
  sub_1C5E95974(*(_QWORD *)(*v71 + 272), *(_QWORD *)(*v71 + 280), (uint64_t *)(a1 + 144));
  sub_1C5E96A18((uint64_t)v90, *v71);
  v88[0] = &off_1E81A86E0;
  v89 = v88;
  sub_1C5E95E78((void **)(a1 + 200), (uint64_t)v90, (uint64_t)v88);
  v44 = v89;
  if (v89 == v88)
  {
    v45 = (void (**)(_QWORD *))(v88[0] + 32);
    v44 = v88;
    v46 = v69;
  }
  else
  {
    v46 = v69;
    if (!v89)
      goto LABEL_48;
    v45 = (void (**)(_QWORD *))(*v89 + 40);
  }
  (*v45)(v44);
LABEL_48:
  sub_1C63A20DC(v90);
  sub_1C5E96A18((uint64_t)v87, *v71);
  v85[0] = &off_1E81A8728;
  v86 = v85;
  sub_1C5E95E78(v46, (uint64_t)v87, (uint64_t)v85);
  v47 = v86;
  if (v86 == v85)
  {
    v48 = (void (**)(_QWORD *))(v85[0] + 32);
    v47 = v85;
  }
  else
  {
    if (!v86)
      goto LABEL_53;
    v48 = (void (**)(_QWORD *))(*v86 + 40);
  }
  (*v48)(v47);
LABEL_53:
  sub_1C63A20DC(v87);
  sub_1C5E96B48((uint64_t)v84, *v71);
  v82[0] = &off_1E81A87B8;
  v83 = v82;
  sub_1C5E95E78((void **)(a1 + 248), (uint64_t)v84, (uint64_t)v82);
  v49 = v83;
  if (v83 == v82)
  {
    v50 = (void (**)(_QWORD *))(v82[0] + 32);
    v49 = v82;
LABEL_57:
    (*v50)(v49);
    goto LABEL_58;
  }
  if (v83)
  {
    v50 = (void (**)(_QWORD *))(*v83 + 40);
    goto LABEL_57;
  }
LABEL_58:
  sub_1C63A20DC(v84);
  return a1;
}

void sub_1C5E95974(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD **v14;
  uint64_t **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  BOOL v20;
  uint64_t *v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *i;
  void *v54;
  void *v55;
  _QWORD *v56;
  _QWORD **v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD **v61;
  _QWORD *v62[2];
  void *__p;
  char *v64;
  char *v65;
  char *v66;
  uint64_t *v67;
  void *v68[2];
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v62[0] = 0;
  v62[1] = 0;
  v60 = 0;
  v61 = v62;
  v58 = &v59;
  v59 = 0;
  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_BYTE **)(v5 + 24);
      v7 = &v6[8 * *(unsigned int *)(v5 + 32)];
      v68[0] = &v69;
      v68[1] = (void *)0x500000000;
      sub_1C618A450((unsigned int *)v68, v6, v7);
      v8 = v59;
      v9 = &v59;
      v10 = &v59;
      if (v59)
      {
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t **)v8;
            v11 = v8[4];
            if (v11 <= v5)
              break;
            v8 = *v10;
            v9 = v10;
            if (!*v10)
              goto LABEL_10;
          }
          if (v11 >= v5)
            break;
          v8 = v10[1];
          if (!v8)
          {
            v9 = v10 + 1;
            goto LABEL_10;
          }
        }
      }
      else
      {
LABEL_10:
        v12 = (uint64_t *)v10;
        v10 = (uint64_t **)operator new(0x60uLL);
        v10[4] = (uint64_t *)v5;
        v10[5] = (uint64_t *)(v10 + 7);
        v10[6] = (uint64_t *)0x500000000;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = v12;
        *v9 = (uint64_t *)v10;
        v13 = (uint64_t *)v10;
        if (*v58)
        {
          v58 = (uint64_t **)*v58;
          v13 = *v9;
        }
        sub_1C4768E74(v59, v13);
        ++v60;
      }
      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v10 + 5), (uint64_t)v68);
      sub_1C63A18D4((uint64_t)&v61, (unsigned __int8 *)v68[0], v68[1], (uint64_t)v68);
      if (v68[0] != &v69)
        free(v68[0]);
      v5 += 80;
    }
    while (v5 != a2);
    v14 = v61;
    if (v61 != v62)
    {
      do
      {
        v69 = 0u;
        v70 = 0u;
        *(_OWORD *)v68 = 0u;
        sub_1C5E96CF8((uint64_t)v68, (char *)v14[4], (char *)&v14[4][*((unsigned int *)v14 + 10)], *((unsigned int *)v14 + 10));
        v15 = v58;
        if (v58 != &v59)
        {
          do
          {
            v16 = *((unsigned int *)v15 + 12);
            if ((_DWORD)v16 == *((_DWORD *)v14 + 10))
            {
              if ((_DWORD)v16)
              {
                v17 = (unsigned __int8 *)v15[5];
                v18 = &v17[8 * v16];
                v19 = (unsigned __int8 *)v14[4];
                while (1)
                {
                  v20 = *v17 == *v19 && *((_DWORD *)v17 + 1) == *((_DWORD *)v19 + 1);
                  if (!v20)
                    break;
                  v17 += 8;
                  v19 += 8;
                  if (v17 == v18)
                    goto LABEL_27;
                }
              }
              else
              {
LABEL_27:
                v21 = v15[4];
                v22 = *((_BYTE *)v21 + 23);
                if (v22 >= 0)
                  v23 = v15[4];
                else
                  v23 = (uint64_t *)*v21;
                if (v22 >= 0)
                  v24 = v22 & 0x7F;
                else
                  v24 = v21[1];
                v25 = (_QWORD *)v70;
                if ((unint64_t)v70 >= *((_QWORD *)&v70 + 1))
                {
                  v27 = (_QWORD *)*((_QWORD *)&v69 + 1);
                  v28 = (uint64_t)(v70 - *((_QWORD *)&v69 + 1)) >> 4;
                  v29 = v28 + 1;
                  if ((unint64_t)(v28 + 1) >> 60)
                    goto LABEL_84;
                  v30 = *((_QWORD *)&v70 + 1) - *((_QWORD *)&v69 + 1);
                  if ((uint64_t)(*((_QWORD *)&v70 + 1) - *((_QWORD *)&v69 + 1)) >> 3 > v29)
                    v29 = v30 >> 3;
                  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
                    v31 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v31 = v29;
                  if (v31)
                  {
                    if (v31 >> 60)
                      goto LABEL_85;
                    v32 = (char *)operator new(16 * v31);
                  }
                  else
                  {
                    v32 = 0;
                  }
                  v33 = &v32[16 * v28];
                  *(_QWORD *)v33 = v23;
                  *((_QWORD *)v33 + 1) = v24;
                  v34 = v33;
                  if (v25 != v27)
                  {
                    do
                    {
                      *((_OWORD *)v34 - 1) = *((_OWORD *)v25 - 1);
                      v34 -= 16;
                      v25 -= 2;
                    }
                    while (v25 != v27);
                    v25 = (_QWORD *)*((_QWORD *)&v69 + 1);
                  }
                  v26 = v33 + 16;
                  *((_QWORD *)&v69 + 1) = v34;
                  *((_QWORD *)&v70 + 1) = &v32[16 * v31];
                  if (v25)
                    operator delete(v25);
                }
                else
                {
                  *(_QWORD *)v70 = v23;
                  v25[1] = v24;
                  v26 = v25 + 2;
                }
                *(_QWORD *)&v70 = v26;
              }
            }
            v35 = v15[1];
            if (v35)
            {
              do
              {
                v36 = (uint64_t **)v35;
                v35 = (uint64_t *)*v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                v36 = (uint64_t **)v15[2];
                v20 = *v36 == (uint64_t *)v15;
                v15 = v36;
              }
              while (!v20);
            }
            v15 = v36;
          }
          while (v36 != &v59);
        }
        v38 = *((_QWORD *)&v69 + 1);
        v37 = v70;
        v39 = 126 - 2 * __clz((uint64_t)(v70 - *((_QWORD *)&v69 + 1)) >> 4);
        if ((_QWORD)v70 == *((_QWORD *)&v69 + 1))
          v40 = 0;
        else
          v40 = v39;
        sub_1C5E9710C(*((uint64_t *)&v69 + 1), (const void **)v70, v40, 1);
        v41 = a3[1];
        v42 = a3[2];
        if (v41 >= v42)
        {
          v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *a3) >> 4);
          v45 = v44 + 1;
          if (v44 + 1 > 0x555555555555555)
LABEL_84:
            abort();
          v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *a3) >> 4);
          if (2 * v46 > v45)
            v45 = 2 * v46;
          if (v46 >= 0x2AAAAAAAAAAAAAALL)
            v45 = 0x555555555555555;
          v67 = a3 + 2;
          if (v45 > 0x555555555555555)
LABEL_85:
            sub_1C4764EE4();
          v47 = 3 * v45;
          v48 = (char *)operator new(48 * v45);
          v49 = &v48[48 * v44];
          __p = v48;
          v64 = v49;
          *(_OWORD *)v49 = *(_OWORD *)v68;
          v68[0] = 0;
          v68[1] = 0;
          v50 = v69;
          v51 = *((_QWORD *)&v70 + 1);
          *(_QWORD *)&v69 = 0;
          *((_QWORD *)v49 + 2) = v50;
          *((_QWORD *)v49 + 3) = v38;
          *((_QWORD *)v49 + 4) = v37;
          *((_QWORD *)v49 + 5) = v51;
          v65 = v49 + 48;
          v66 = &v48[16 * v47];
          sub_1C5E97C0C(a3, &__p);
          v43 = a3[1];
          v52 = v64;
          for (i = v65; i != v52; i -= 48)
          {
            v54 = (void *)*((_QWORD *)i - 3);
            if (v54)
            {
              *((_QWORD *)i - 2) = v54;
              operator delete(v54);
            }
            v55 = (void *)*((_QWORD *)i - 6);
            if (v55)
            {
              *((_QWORD *)i - 5) = v55;
              operator delete(v55);
            }
          }
          if (__p)
            operator delete(__p);
        }
        else
        {
          *(_OWORD *)v41 = *(_OWORD *)v68;
          *(_QWORD *)(v41 + 16) = v69;
          *(_QWORD *)(v41 + 24) = v38;
          v68[1] = 0;
          *(_QWORD *)&v69 = 0;
          v68[0] = 0;
          *(_QWORD *)(v41 + 32) = v37;
          *(_QWORD *)(v41 + 40) = *((_QWORD *)&v70 + 1);
          v43 = v41 + 48;
        }
        a3[1] = v43;
        v56 = v14[1];
        if (v56)
        {
          do
          {
            v57 = (_QWORD **)v56;
            v56 = (_QWORD *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            v57 = (_QWORD **)v14[2];
            v20 = *v57 == v14;
            v14 = v57;
          }
          while (!v20);
        }
        v14 = v57;
      }
      while (v57 != v62);
    }
  }
  sub_1C61D72D8(v59);
  sub_1C63A1994(v62[0]);
}

void sub_1C5E95E78(void **a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *i;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t *v104;
  uint64_t **v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  void **v118;
  char *v119;
  char *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  _QWORD *v131;
  _QWORD **v132;
  uint64_t v133;
  uint64_t **v135;
  uint64_t *v136;
  uint64_t v137;
  _QWORD **v138;
  _QWORD *v139[2];
  void *v140[2];
  __int128 v141;
  _BYTE v142[24];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  unsigned __int8 *v152;
  uint64_t v153;
  _BYTE v154[40];
  __int128 v155;
  __int128 v156;
  _BYTE v157[24];
  _BYTE *v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v139[0] = 0;
  v139[1] = 0;
  v137 = 0;
  v138 = v139;
  v135 = &v136;
  v136 = 0;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v140 = *(_OWORD *)a2;
  v141 = v5;
  v6 = v142;
  v7 = *(_QWORD *)(a2 + 56);
  if (v7)
  {
    if (v7 == a2 + 32)
    {
      *(_QWORD *)&v143 = v142;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 24))(v7, v142);
    }
    else
    {
      *(_QWORD *)&v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    *(_QWORD *)&v143 = 0;
  }
  v8 = *(_OWORD *)(a2 + 80);
  v155 = *(_OWORD *)(a2 + 64);
  v156 = v8;
  v9 = v157;
  v10 = *(_QWORD *)(a2 + 120);
  if (v10)
  {
    if (v10 == a2 + 96)
    {
      v158 = v157;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 24))(v10, v157);
    }
    else
    {
      v158 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
  }
  else
  {
    v158 = 0;
  }
  for (i = v140[0]; v140[0] != (void *)v155; i = v140[0])
  {
    v12 = i[3];
    v152 = (unsigned __int8 *)v12;
    v13 = *(_QWORD *)(a3 + 24);
    if (!v13)
      sub_1C485C2F0();
    if ((*(unsigned int (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v13 + 48))(v13, &v152))
    {
      v14 = *(_BYTE **)(v12 + 16);
      v15 = &v14[8 * *(unsigned int *)(v12 + 24)];
      v152 = v154;
      v153 = 0x500000000;
      sub_1C618A450((unsigned int *)&v152, v14, v15);
      v16 = v136;
      v17 = &v136;
      v18 = &v136;
      if (v136)
      {
        while (1)
        {
          while (1)
          {
            v18 = (uint64_t **)v16;
            v19 = v16[4];
            if (v19 <= v12)
              break;
            v16 = *v18;
            v17 = v18;
            if (!*v18)
              goto LABEL_21;
          }
          if (v19 >= v12)
            break;
          v16 = v18[1];
          if (!v16)
          {
            v17 = v18 + 1;
            goto LABEL_21;
          }
        }
      }
      else
      {
LABEL_21:
        v20 = (uint64_t *)v18;
        v18 = (uint64_t **)operator new(0x60uLL);
        v18[4] = (uint64_t *)v12;
        v18[5] = (uint64_t *)(v18 + 7);
        v18[6] = (uint64_t *)0x500000000;
        *v18 = 0;
        v18[1] = 0;
        v18[2] = v20;
        *v17 = (uint64_t *)v18;
        v21 = (uint64_t *)v18;
        if (*v135)
        {
          v135 = (uint64_t **)*v135;
          v21 = *v17;
        }
        sub_1C4768E74(v136, v21);
        ++v137;
      }
      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v18 + 5), (uint64_t)&v152);
      sub_1C63A18D4((uint64_t)&v138, v152, v153, (uint64_t)&v152);
      if (v152 != v154)
        free(v152);
    }
    sub_1C63A19E0((uint64_t *)v140);
  }
  if (v158 == v157)
  {
    v22 = 4;
  }
  else
  {
    if (!v158)
      goto LABEL_32;
    v22 = 5;
    v9 = v158;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v22))(v9);
LABEL_32:
  if ((_BYTE *)v143 == v142)
  {
    v23 = 4;
  }
  else
  {
    if (!(_QWORD)v143)
      goto LABEL_37;
    v23 = 5;
    v6 = (_QWORD *)v143;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v23))(v6);
LABEL_37:
  v24 = v138;
  if (v138 != v139)
  {
    do
    {
      v140[0] = &v141;
      v143 = 0u;
      v144 = 0u;
      v145 = 0u;
      v146 = 0u;
      v147 = 0u;
      v148 = 0u;
      v149 = 0u;
      v150 = 0u;
      v151 = 0u;
      v25 = v24[4];
      v26 = &v25[*((unsigned int *)v24 + 10)];
      v140[1] = (void *)0x500000000;
      sub_1C63A15C8((unsigned int *)v140, (uint64_t)&v141, v25, v26);
      v27 = v135;
      if (v135 != &v136)
      {
        do
        {
          v28 = *((unsigned int *)v27 + 12);
          if ((_DWORD)v28 == *((_DWORD *)v24 + 10))
          {
            if ((_DWORD)v28)
            {
              v29 = (unsigned __int8 *)v27[5];
              v30 = &v29[8 * v28];
              v31 = (unsigned __int8 *)v24[4];
              while (1)
              {
                v32 = *v29 == *v31 && *((_DWORD *)v29 + 1) == *((_DWORD *)v31 + 1);
                if (!v32)
                  break;
                v29 += 8;
                v31 += 8;
                if (v29 == v30)
                  goto LABEL_49;
              }
            }
            else
            {
LABEL_49:
              v33 = v27[4];
              switch(*((_BYTE *)v33 + 72))
              {
                case 0:
                  if ((*((_BYTE *)v33 + 73) & 2) != 0)
                  {
                    v51 = *v33;
                    v50 = v33[1];
                    v52 = (_QWORD *)*((_QWORD *)&v149 + 1);
                    if (*((_QWORD *)&v149 + 1) >= (unint64_t)v150)
                    {
                      v74 = (_QWORD *)v149;
                      v75 = (uint64_t)(*((_QWORD *)&v149 + 1) - v149) >> 4;
                      v76 = v75 + 1;
                      if ((unint64_t)(v75 + 1) >> 60)
                        goto LABEL_225;
                      v77 = v150 - v149;
                      if ((uint64_t)(v150 - v149) >> 3 > v76)
                        v76 = v77 >> 3;
                      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
                        v78 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v78 = v76;
                      if (v78)
                      {
                        if (v78 >> 60)
                          goto LABEL_226;
                        v79 = (char *)operator new(16 * v78);
                      }
                      else
                      {
                        v79 = 0;
                      }
                      v98 = &v79[16 * v75];
                      *(_QWORD *)v98 = v51;
                      *((_QWORD *)v98 + 1) = v50;
                      v99 = v98;
                      if (v52 != v74)
                      {
                        do
                        {
                          *((_OWORD *)v99 - 1) = *((_OWORD *)v52 - 1);
                          v99 -= 16;
                          v52 -= 2;
                        }
                        while (v52 != v74);
                        v52 = (_QWORD *)v149;
                      }
                      v53 = v98 + 16;
                      *(_QWORD *)&v149 = v99;
                      *((_QWORD *)&v149 + 1) = v98 + 16;
                      *(_QWORD *)&v150 = &v79[16 * v78];
                      if (v52)
                        operator delete(v52);
                    }
                    else
                    {
                      **((_QWORD **)&v149 + 1) = v51;
                      v52[1] = v50;
                      v53 = v52 + 2;
                    }
                    *((_QWORD *)&v149 + 1) = v53;
                  }
                  else
                  {
                    v34 = *v33;
                    v35 = v33[1];
                    if ((*((_BYTE *)v33 + 73) & 1) != 0)
                    {
                      v72 = (_QWORD *)v151;
                      if ((unint64_t)v151 >= *((_QWORD *)&v151 + 1))
                      {
                        v92 = (_QWORD *)*((_QWORD *)&v150 + 1);
                        v93 = (uint64_t)(v151 - *((_QWORD *)&v150 + 1)) >> 4;
                        v94 = v93 + 1;
                        if ((unint64_t)(v93 + 1) >> 60)
                          goto LABEL_225;
                        v95 = *((_QWORD *)&v151 + 1) - *((_QWORD *)&v150 + 1);
                        if ((uint64_t)(*((_QWORD *)&v151 + 1) - *((_QWORD *)&v150 + 1)) >> 3 > v94)
                          v94 = v95 >> 3;
                        if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0)
                          v96 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v96 = v94;
                        if (v96)
                        {
                          if (v96 >> 60)
                            goto LABEL_226;
                          v97 = (char *)operator new(16 * v96);
                        }
                        else
                        {
                          v97 = 0;
                        }
                        v102 = &v97[16 * v93];
                        *(_QWORD *)v102 = v34;
                        *((_QWORD *)v102 + 1) = v35;
                        v103 = v102;
                        if (v72 != v92)
                        {
                          do
                          {
                            *((_OWORD *)v103 - 1) = *((_OWORD *)v72 - 1);
                            v103 -= 16;
                            v72 -= 2;
                          }
                          while (v72 != v92);
                          v72 = (_QWORD *)*((_QWORD *)&v150 + 1);
                        }
                        v73 = v102 + 16;
                        *((_QWORD *)&v150 + 1) = v103;
                        *(_QWORD *)&v151 = v102 + 16;
                        *((_QWORD *)&v151 + 1) = &v97[16 * v96];
                        if (v72)
                          operator delete(v72);
                      }
                      else
                      {
                        *(_QWORD *)v151 = v34;
                        v72[1] = v35;
                        v73 = v72 + 2;
                      }
                      *(_QWORD *)&v151 = v73;
                    }
                    else
                    {
                      v36 = (_QWORD *)*((_QWORD *)&v143 + 1);
                      if (*((_QWORD *)&v143 + 1) >= (unint64_t)v144)
                      {
                        v86 = (_QWORD *)v143;
                        v87 = (uint64_t)(*((_QWORD *)&v143 + 1) - v143) >> 4;
                        v88 = v87 + 1;
                        if ((unint64_t)(v87 + 1) >> 60)
                          goto LABEL_225;
                        v89 = v144 - v143;
                        if ((uint64_t)(v144 - v143) >> 3 > v88)
                          v88 = v89 >> 3;
                        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
                          v90 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v90 = v88;
                        if (v90)
                        {
                          if (v90 >> 60)
                            goto LABEL_226;
                          v91 = (char *)operator new(16 * v90);
                        }
                        else
                        {
                          v91 = 0;
                        }
                        v100 = &v91[16 * v87];
                        *(_QWORD *)v100 = v34;
                        *((_QWORD *)v100 + 1) = v35;
                        v101 = v100;
                        if (v36 != v86)
                        {
                          do
                          {
                            *((_OWORD *)v101 - 1) = *((_OWORD *)v36 - 1);
                            v101 -= 16;
                            v36 -= 2;
                          }
                          while (v36 != v86);
                          v36 = (_QWORD *)v143;
                        }
                        v37 = v100 + 16;
                        *(_QWORD *)&v143 = v101;
                        *((_QWORD *)&v143 + 1) = v100 + 16;
                        *(_QWORD *)&v144 = &v91[16 * v90];
                        if (v36)
                          operator delete(v36);
                      }
                      else
                      {
                        **((_QWORD **)&v143 + 1) = v34;
                        v36[1] = v35;
                        v37 = v36 + 2;
                      }
                      *((_QWORD *)&v143 + 1) = v37;
                    }
                  }
                  break;
                case 1:
                  v43 = *v33;
                  v42 = v33[1];
                  v44 = (_QWORD *)v145;
                  if ((unint64_t)v145 >= *((_QWORD *)&v145 + 1))
                  {
                    v60 = (_QWORD *)*((_QWORD *)&v144 + 1);
                    v61 = (uint64_t)(v145 - *((_QWORD *)&v144 + 1)) >> 4;
                    v62 = v61 + 1;
                    if ((unint64_t)(v61 + 1) >> 60)
                      goto LABEL_225;
                    v63 = *((_QWORD *)&v145 + 1) - *((_QWORD *)&v144 + 1);
                    if ((uint64_t)(*((_QWORD *)&v145 + 1) - *((_QWORD *)&v144 + 1)) >> 3 > v62)
                      v62 = v63 >> 3;
                    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
                      v64 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v64 = v62;
                    if (v64)
                    {
                      if (v64 >> 60)
                        goto LABEL_226;
                      v65 = (char *)operator new(16 * v64);
                    }
                    else
                    {
                      v65 = 0;
                    }
                    v82 = &v65[16 * v61];
                    *(_QWORD *)v82 = v43;
                    *((_QWORD *)v82 + 1) = v42;
                    v83 = v82;
                    if (v44 != v60)
                    {
                      do
                      {
                        *((_OWORD *)v83 - 1) = *((_OWORD *)v44 - 1);
                        v83 -= 16;
                        v44 -= 2;
                      }
                      while (v44 != v60);
                      v44 = (_QWORD *)*((_QWORD *)&v144 + 1);
                    }
                    v45 = v82 + 16;
                    *((_QWORD *)&v144 + 1) = v83;
                    *(_QWORD *)&v145 = v82 + 16;
                    *((_QWORD *)&v145 + 1) = &v65[16 * v64];
                    if (v44)
                      operator delete(v44);
                  }
                  else
                  {
                    *(_QWORD *)v145 = v43;
                    v44[1] = v42;
                    v45 = v44 + 2;
                  }
                  *(_QWORD *)&v145 = v45;
                  break;
                case 2:
                  v39 = *v33;
                  v38 = v33[1];
                  v40 = (_QWORD *)*((_QWORD *)&v146 + 1);
                  if (*((_QWORD *)&v146 + 1) >= (unint64_t)v147)
                  {
                    v54 = (_QWORD *)v146;
                    v55 = (uint64_t)(*((_QWORD *)&v146 + 1) - v146) >> 4;
                    v56 = v55 + 1;
                    if ((unint64_t)(v55 + 1) >> 60)
                      goto LABEL_225;
                    v57 = v147 - v146;
                    if ((uint64_t)(v147 - v146) >> 3 > v56)
                      v56 = v57 >> 3;
                    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
                      v58 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v58 = v56;
                    if (v58)
                    {
                      if (v58 >> 60)
                        goto LABEL_226;
                      v59 = (char *)operator new(16 * v58);
                    }
                    else
                    {
                      v59 = 0;
                    }
                    v80 = &v59[16 * v55];
                    *(_QWORD *)v80 = v39;
                    *((_QWORD *)v80 + 1) = v38;
                    v81 = v80;
                    if (v40 != v54)
                    {
                      do
                      {
                        *((_OWORD *)v81 - 1) = *((_OWORD *)v40 - 1);
                        v81 -= 16;
                        v40 -= 2;
                      }
                      while (v40 != v54);
                      v40 = (_QWORD *)v146;
                    }
                    v41 = v80 + 16;
                    *(_QWORD *)&v146 = v81;
                    *((_QWORD *)&v146 + 1) = v80 + 16;
                    *(_QWORD *)&v147 = &v59[16 * v58];
                    if (v40)
                      operator delete(v40);
                  }
                  else
                  {
                    **((_QWORD **)&v146 + 1) = v39;
                    v40[1] = v38;
                    v41 = v40 + 2;
                  }
                  *((_QWORD *)&v146 + 1) = v41;
                  break;
                case 3:
                  v47 = *v33;
                  v46 = v33[1];
                  v48 = (_QWORD *)v148;
                  if ((unint64_t)v148 >= *((_QWORD *)&v148 + 1))
                  {
                    v66 = (_QWORD *)*((_QWORD *)&v147 + 1);
                    v67 = (uint64_t)(v148 - *((_QWORD *)&v147 + 1)) >> 4;
                    v68 = v67 + 1;
                    if ((unint64_t)(v67 + 1) >> 60)
                      goto LABEL_225;
                    v69 = *((_QWORD *)&v148 + 1) - *((_QWORD *)&v147 + 1);
                    if ((uint64_t)(*((_QWORD *)&v148 + 1) - *((_QWORD *)&v147 + 1)) >> 3 > v68)
                      v68 = v69 >> 3;
                    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
                      v70 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v70 = v68;
                    if (v70)
                    {
                      if (v70 >> 60)
                        goto LABEL_226;
                      v71 = (char *)operator new(16 * v70);
                    }
                    else
                    {
                      v71 = 0;
                    }
                    v84 = &v71[16 * v67];
                    *(_QWORD *)v84 = v47;
                    *((_QWORD *)v84 + 1) = v46;
                    v85 = v84;
                    if (v48 != v66)
                    {
                      do
                      {
                        *((_OWORD *)v85 - 1) = *((_OWORD *)v48 - 1);
                        v85 -= 16;
                        v48 -= 2;
                      }
                      while (v48 != v66);
                      v48 = (_QWORD *)*((_QWORD *)&v147 + 1);
                    }
                    v49 = v84 + 16;
                    *((_QWORD *)&v147 + 1) = v85;
                    *(_QWORD *)&v148 = v84 + 16;
                    *((_QWORD *)&v148 + 1) = &v71[16 * v70];
                    if (v48)
                      operator delete(v48);
                  }
                  else
                  {
                    *(_QWORD *)v148 = v47;
                    v48[1] = v46;
                    v49 = v48 + 2;
                  }
                  *(_QWORD *)&v148 = v49;
                  break;
                default:
                  break;
              }
            }
          }
          v104 = v27[1];
          if (v104)
          {
            do
            {
              v105 = (uint64_t **)v104;
              v104 = (uint64_t *)*v104;
            }
            while (v104);
          }
          else
          {
            do
            {
              v105 = (uint64_t **)v27[2];
              v32 = *v105 == (uint64_t *)v27;
              v27 = v105;
            }
            while (!v32);
          }
          v27 = v105;
        }
        while (v105 != &v136);
      }
      v106 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v143 + 1) - v143) >> 4);
      if (*((_QWORD *)&v143 + 1) == (_QWORD)v143)
        v107 = 0;
      else
        v107 = v106;
      sub_1C5E9710C(v143, *((const void ***)&v143 + 1), v107, 1);
      v108 = 126 - 2 * __clz((uint64_t)(v145 - *((_QWORD *)&v144 + 1)) >> 4);
      if ((_QWORD)v145 == *((_QWORD *)&v144 + 1))
        v109 = 0;
      else
        v109 = v108;
      sub_1C5E9710C(*((uint64_t *)&v144 + 1), (const void **)v145, v109, 1);
      v110 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v146 + 1) - v146) >> 4);
      if (*((_QWORD *)&v146 + 1) == (_QWORD)v146)
        v111 = 0;
      else
        v111 = v110;
      sub_1C5E9710C(v146, *((const void ***)&v146 + 1), v111, 1);
      v112 = 126 - 2 * __clz((uint64_t)(v148 - *((_QWORD *)&v147 + 1)) >> 4);
      if ((_QWORD)v148 == *((_QWORD *)&v147 + 1))
        v113 = 0;
      else
        v113 = v112;
      sub_1C5E9710C(*((uint64_t *)&v147 + 1), (const void **)v148, v113, 1);
      v114 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v149 + 1) - v149) >> 4);
      if (*((_QWORD *)&v149 + 1) == (_QWORD)v149)
        v115 = 0;
      else
        v115 = v114;
      sub_1C5E9710C(v149, *((const void ***)&v149 + 1), v115, 1);
      v116 = 126 - 2 * __clz((uint64_t)(v151 - *((_QWORD *)&v150 + 1)) >> 4);
      if ((_QWORD)v151 == *((_QWORD *)&v150 + 1))
        v117 = 0;
      else
        v117 = v116;
      sub_1C5E9710C(*((uint64_t *)&v150 + 1), (const void **)v151, v117, 1);
      v118 = a1;
      v120 = (char *)a1[1];
      v119 = (char *)a1[2];
      if (v120 >= v119)
      {
        v122 = 0x8F5C28F5C28F5C29 * ((v120 - (_BYTE *)*a1) >> 3);
        v123 = v122 + 1;
        if (v122 + 1 > 0x147AE147AE147AELL)
LABEL_225:
          abort();
        v124 = 0x8F5C28F5C28F5C29 * ((v119 - (_BYTE *)*a1) >> 3);
        if (2 * v124 > v123)
          v123 = 2 * v124;
        if (v124 >= 0xA3D70A3D70A3D7)
          v125 = 0x147AE147AE147AELL;
        else
          v125 = v123;
        if (v125)
        {
          if (v125 > 0x147AE147AE147AELL)
LABEL_226:
            sub_1C4764EE4();
          v126 = (char *)operator new(200 * v125);
        }
        else
        {
          v126 = 0;
        }
        v127 = &v126[200 * v122];
        v128 = &v126[200 * v125];
        sub_1C5E97DE8(v127, (uint64_t)v140);
        v121 = v127 + 200;
        v130 = (char *)*a1;
        v129 = (char *)a1[1];
        if (v129 == *a1)
        {
          *a1 = v127;
          a1[1] = v121;
          a1[2] = v128;
          v118 = a1;
        }
        else
        {
          do
          {
            v127 -= 200;
            v129 -= 200;
            sub_1C5E97DE8(v127, (uint64_t)v129);
          }
          while (v129 != v130);
          v129 = (char *)*a1;
          v133 = (uint64_t)a1[1];
          *a1 = v127;
          a1[1] = v121;
          v118 = a1;
          a1[2] = v128;
          while ((char *)v133 != v129)
            v133 = sub_1C5E97CB8(v133 - 200);
        }
        if (v129)
          operator delete(v129);
      }
      else
      {
        sub_1C5E97DE8(a1[1], (uint64_t)v140);
        v121 = v120 + 200;
      }
      v118[1] = v121;
      if (*((_QWORD *)&v150 + 1))
      {
        *(_QWORD *)&v151 = *((_QWORD *)&v150 + 1);
        operator delete(*((void **)&v150 + 1));
      }
      if ((_QWORD)v149)
      {
        *((_QWORD *)&v149 + 1) = v149;
        operator delete((void *)v149);
      }
      if (*((_QWORD *)&v147 + 1))
      {
        *(_QWORD *)&v148 = *((_QWORD *)&v147 + 1);
        operator delete(*((void **)&v147 + 1));
      }
      if ((_QWORD)v146)
      {
        *((_QWORD *)&v146 + 1) = v146;
        operator delete((void *)v146);
      }
      if (*((_QWORD *)&v144 + 1))
      {
        *(_QWORD *)&v145 = *((_QWORD *)&v144 + 1);
        operator delete(*((void **)&v144 + 1));
      }
      if ((_QWORD)v143)
      {
        *((_QWORD *)&v143 + 1) = v143;
        operator delete((void *)v143);
      }
      if (v140[0] != &v141)
        free(v140[0]);
      v131 = v24[1];
      if (v131)
      {
        do
        {
          v132 = (_QWORD **)v131;
          v131 = (_QWORD *)*v131;
        }
        while (v131);
      }
      else
      {
        do
        {
          v132 = (_QWORD **)v24[2];
          v32 = *v132 == v24;
          v24 = v132;
        }
        while (!v32);
      }
      v24 = v132;
    }
    while (v132 != v139);
  }
  sub_1C61D72D8(v136);
  sub_1C63A1994(v139[0]);
}

_QWORD *sub_1C5E96A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (**v5)(void);
  _QWORD *result;
  uint64_t (**v7)(_QWORD *);
  uint64_t v8;
  uint64_t v9[4];
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12[0] = &off_1E81A8698;
  v13 = v12;
  v2 = *(_QWORD *)(a2 + 344);
  v3 = *(unsigned int *)(a2 + 360);
  v4 = v2 + 32 * v3;
  if (*(_DWORD *)(a2 + 352))
  {
    if ((_DWORD)v3)
    {
      v8 = 32 * v3;
      while ((*(_BYTE *)v2 == 3 || !*(_BYTE *)v2) && !*(_QWORD *)(v2 + 16))
      {
        v2 += 32;
        v8 -= 32;
        if (!v8)
          goto LABEL_2;
      }
    }
  }
  else
  {
LABEL_2:
    v2 = v4;
  }
  v9[0] = v2;
  v9[1] = v4;
  v9[2] = v4;
  v9[3] = v4;
  v11 = v10;
  v10[0] = &off_1E81A8698;
  sub_1C63A1A3C(a1, v9, v10);
  if (v11 == v10)
  {
    v5 = (void (**)(void))(v10[0] + 32);
  }
  else
  {
    if (!v11)
      goto LABEL_9;
    v5 = (void (**)(void))(*v11 + 40);
  }
  (*v5)();
LABEL_9:
  result = v13;
  if (v13 == v12)
  {
    v7 = (uint64_t (**)(_QWORD *))(v12[0] + 32);
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v7 = (uint64_t (**)(_QWORD *))(*v13 + 40);
  }
  return (_QWORD *)(*v7)(result);
}

_QWORD *sub_1C5E96B48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (**v5)(void);
  _QWORD *result;
  uint64_t (**v7)(_QWORD *);
  uint64_t v8;
  uint64_t v9[4];
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12[0] = &off_1E81A8770;
  v13 = v12;
  v2 = *(_QWORD *)(a2 + 344);
  v3 = *(unsigned int *)(a2 + 360);
  v4 = v2 + 32 * v3;
  if (*(_DWORD *)(a2 + 352))
  {
    if ((_DWORD)v3)
    {
      v8 = 32 * v3;
      while ((*(_BYTE *)v2 == 3 || !*(_BYTE *)v2) && !*(_QWORD *)(v2 + 16))
      {
        v2 += 32;
        v8 -= 32;
        if (!v8)
          goto LABEL_2;
      }
    }
  }
  else
  {
LABEL_2:
    v2 = v4;
  }
  v9[0] = v2;
  v9[1] = v4;
  v9[2] = v4;
  v9[3] = v4;
  v11 = v10;
  v10[0] = &off_1E81A8770;
  sub_1C63A1A3C(a1, v9, v10);
  if (v11 == v10)
  {
    v5 = (void (**)(void))(v10[0] + 32);
  }
  else
  {
    if (!v11)
      goto LABEL_9;
    v5 = (void (**)(void))(*v11 + 40);
  }
  (*v5)();
LABEL_9:
  result = v13;
  if (v13 == v12)
  {
    v7 = (uint64_t (**)(_QWORD *))(v12[0] + 32);
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v7 = (uint64_t (**)(_QWORD *))(*v13 + 40);
  }
  return (_QWORD *)(*v7)(result);
}

double sub_1C5E96C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  double result;

  v5 = a2 + 8;
  v6 = operator new(0x70uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = v6 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C47EBC30(v7, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a3;
    v6[6] = *(_QWORD *)(a3 + 16);
  }
  v6[7] = v6 + 9;
  *(_QWORD *)&result = 0x500000000;
  v6[8] = 0x500000000;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1C5E96CF8(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  uint64_t *__srca;

  if (a4 < 1)
    return;
  v8 = *(_BYTE **)a1;
  v7 = *(uint64_t **)(a1 + 8);
  v9 = -*(_QWORD *)a1;
  v10 = (char *)(*(_QWORD *)a1 + (v9 & 0xFFFFFFFFFFFFFFF8));
  v11 = *(_QWORD *)(a1 + 16);
  if (a4 > (v11 - (uint64_t)v7) >> 3)
  {
    v12 = a4 + (((char *)v7 - v8) >> 3);
    if (v12 >> 61)
      abort();
    v13 = v11 - (_QWORD)v8;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    __srca = (uint64_t *)(*(_QWORD *)a1 + (v9 & 0xFFFFFFFFFFFFFFF8));
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v24 = &v15[8 * (v9 >> 3)];
    memcpy(v24, __src, 8 * a4);
    if ((unint64_t)v9 >= 8)
    {
      v25 = 8 * (v9 >> 3);
      do
      {
        *(_QWORD *)&v15[v25 - 8] = *(_QWORD *)&v8[v25 - 8];
        v25 -= 8;
      }
      while (v25);
      v7 = *(uint64_t **)(a1 + 8);
      v24 = v15;
    }
    v26 = &v15[8 * a4 + (v9 & 0xFFFFFFFFFFFFFFF8)];
    v27 = &v15[8 * v14];
    if (v7 != __srca)
      memmove(v26, __srca, (char *)v7 - (char *)__srca);
    v28 = *(_BYTE **)a1;
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = &v26[(char *)v7 - (char *)__srca];
    *(_QWORD *)(a1 + 16) = v27;
    if (v28)
      operator delete(v28);
    return;
  }
  v16 = ((char *)v7 - v10) >> 3;
  if (v16 >= a4)
  {
    v17 = &__src[8 * a4];
    v19 = *(char **)(a1 + 8);
LABEL_18:
    v20 = &v10[8 * a4];
    v21 = (uint64_t *)&v19[-8 * a4];
    v22 = v19;
    if (v21 < v7)
    {
      v22 = v19;
      do
      {
        v23 = *v21++;
        *(_QWORD *)v22 = v23;
        v22 += 8;
      }
      while (v21 < v7);
    }
    *(_QWORD *)(a1 + 8) = v22;
    if (v19 != v20)
      memmove(&v19[-8 * ((v19 - v20) >> 3)], v10, v19 - v20);
    if (v17 != __src)
      memmove(v10, __src, v17 - __src);
    return;
  }
  v17 = &__src[8 * v16];
  v18 = a3 - v17;
  if (a3 != v17)
    memmove(*(void **)(a1 + 8), &__src[8 * v16], a3 - v17);
  v19 = (char *)v7 + v18;
  *(_QWORD *)(a1 + 8) = (char *)v7 + v18;
  if ((char *)v7 - v10 >= 1)
    goto LABEL_18;
}

uint64_t *sub_1C5E96F2C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 48) = 0;
    *(_QWORD *)(v4 - 40) = 0;
    v4 -= 48;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    v6 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 40);
    *(_OWORD *)(v4 + 24) = v6;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 24) = 0;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void sub_1C5E96FB4(char *a1)
{
  char *v2;

  if (a1)
  {
    sub_1C5E96FB4(*(_QWORD *)a1);
    sub_1C5E96FB4(*((_QWORD *)a1 + 1));
    v2 = (char *)*((_QWORD *)a1 + 7);
    if (v2 != a1 + 72)
      free(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *sub_1C5E97010(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;

  v6 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        v7 = v5;
        v8 = (unsigned __int8 *)v5[4];
        v9 = *((unsigned int *)v7 + 10);
        if ((_DWORD)v9)
          break;
LABEL_10:
        if (a4)
        {
          v17 = 8 * v9;
          v18 = a3;
          while (v17)
          {
            v19 = *v8;
            v20 = *v18;
            if (v19 < v20)
              break;
            if (v20 < v19)
              goto LABEL_24;
            v21 = *((_DWORD *)v8 + 1);
            v22 = *((_DWORD *)v18 + 1);
            if (v21 < v22)
              break;
            if (v22 >= v21)
            {
              v8 += 8;
              v18 += 8;
              v17 -= 8;
              if (v18 != &a3[8 * a4])
                continue;
            }
            goto LABEL_24;
          }
          result = v7 + 1;
          v5 = (uint64_t *)v7[1];
          if (v5)
            continue;
        }
        goto LABEL_24;
      }
      v10 = 8 * a4;
      v11 = a3;
      v12 = v8;
      while (v10)
      {
        v13 = *v11;
        v14 = *v12;
        if (v13 < v14)
          break;
        if (v14 < v13)
          goto LABEL_10;
        v15 = *((_DWORD *)v11 + 1);
        v16 = *((_DWORD *)v12 + 1);
        if (v15 < v16)
          break;
        if (v16 >= v15)
        {
          v11 += 8;
          v12 += 8;
          v10 -= 8;
          if (v12 != &v8[8 * v9])
            continue;
        }
        goto LABEL_10;
      }
      v5 = (uint64_t *)*v7;
      result = v7;
    }
    while (*v7);
  }
  else
  {
    v7 = result;
  }
LABEL_24:
  *a2 = v7;
  return result;
}

void sub_1C5E9710C(uint64_t a1, const void **a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  BOOL v21;
  const void *v22;
  size_t v23;
  unint64_t v24;
  _BOOL4 v25;
  _OWORD *v26;
  const void *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  __int128 *v33;
  uint64_t v34;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  const void *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void **v48;
  const void *v49;
  size_t v50;
  const void **v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _OWORD *v62;
  const void *v63;
  size_t v64;
  _QWORD *v65;
  const void *v67;
  size_t v68;
  const void **v69;
  const void **v70;
  BOOL v71;
  __int128 *v72;
  __int128 *v73;
  const void **v74;
  __int128 *v75;
  int64_t v76;
  __int128 v77;
  __int128 v78;

BOOL sub_1C5E97848(__int128 *a1, uint64_t a2, __int128 *a3)
{
  BOOL v6;
  _BOOL8 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v6 = sub_1C4F79CE0(a2, *(const void **)a1, *((_QWORD *)a1 + 1));
  result = sub_1C4F79CE0((uint64_t)a3, *(const void **)a2, *(_QWORD *)(a2 + 8));
  if (v6)
  {
    if (result)
    {
      v8 = *a1;
      *a1 = *a3;
    }
    else
    {
      v11 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v11;
      result = sub_1C4F79CE0((uint64_t)a3, *(const void **)a2, *(_QWORD *)(a2 + 8));
      if (!result)
        return result;
      v8 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
    }
    *a3 = v8;
  }
  else if (result)
  {
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v9;
    result = sub_1C4F79CE0(a2, *(const void **)a1, *((_QWORD *)a1 + 1));
    if (result)
    {
      v10 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v10;
    }
  }
  return result;
}

BOOL sub_1C5E97918(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      if (sub_1C4F79CE0((uint64_t)(a2 - 1), *(const void **)a1, *(_QWORD *)(a1 + 8)))
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return 1;
    case 3:
      sub_1C5E97848((__int128 *)a1, a1 + 16, a2 - 1);
      return 1;
    case 4:
      sub_1C5E97AA8(a1, a1 + 16, a1 + 32, a2 - 1);
      return 1;
    case 5:
      sub_1C5E97B44(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 1);
      return 1;
    default:
      v8 = (_OWORD *)(a1 + 32);
      sub_1C5E97848((__int128 *)a1, a1 + 16, (__int128 *)(a1 + 32));
      v9 = (_OWORD *)(a1 + 48);
      if ((_OWORD *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C4F79CE0((uint64_t)v9, *(const void **)v8, *((_QWORD *)v8 + 1)))
    {
      v15 = *v9;
      v12 = v10;
      while (1)
      {
        v13 = a1 + v12;
        *(_OWORD *)(a1 + v12 + 48) = *(_OWORD *)(a1 + v12 + 32);
        if (v12 == -32)
          break;
        v12 -= 16;
        if (!sub_1C4F79CE0((uint64_t)&v15, *(const void **)(v13 + 16), *(_QWORD *)(v13 + 24)))
        {
          v14 = (_OWORD *)(a1 + v12 + 48);
          goto LABEL_12;
        }
      }
      v14 = (_OWORD *)a1;
LABEL_12:
      *v14 = v15;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 16;
    if (++v9 == a2)
      return 1;
  }
}

__n128 sub_1C5E97AA8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __n128 result;
  __int128 v9;
  __n128 v10;

  sub_1C5E97848((__int128 *)a1, a2, (__int128 *)a3);
  if (sub_1C4F79CE0((uint64_t)a4, *(const void **)a3, *(_QWORD *)(a3 + 8)))
  {
    v9 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = v9;
    if (sub_1C4F79CE0(a3, *(const void **)a2, *(_QWORD *)(a2 + 8)))
    {
      v10 = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = v10;
      if (sub_1C4F79CE0(a2, *(const void **)a1, *(_QWORD *)(a1 + 8)))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1C5E97B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __n128 v13;

  sub_1C5E97AA8(a1, a2, a3, (__int128 *)a4);
  if (sub_1C4F79CE0((uint64_t)a5, *(const void **)a4, *(_QWORD *)(a4 + 8)))
  {
    v11 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *a5;
    *a5 = v11;
    if (sub_1C4F79CE0(a4, *(const void **)a3, *(_QWORD *)(a3 + 8)))
    {
      v12 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v12;
      if (sub_1C4F79CE0(a3, *(const void **)a2, *(_QWORD *)(a2 + 8)))
      {
        v13 = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = v13;
        if (sub_1C4F79CE0(a2, *(const void **)a1, *(_QWORD *)(a1 + 8)))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C5E97C0C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C5E97CB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(_QWORD *)(a1 + 160) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 136) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(_QWORD *)(a1 + 112) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

double sub_1C5E97D4C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  if (*a1 != a1[2])
  {
    while (1)
    {
      v7 = *(_QWORD *)(v1 + 24);
      v3 = a1[7];
      if (!v3)
        break;
      if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7) & 1) == 0)
      {
        v1 = *a1;
        while (1)
        {
          v1 += 32;
          if (v1 == a1[1])
            break;
          if (*(_BYTE *)v1 != 3 && *(_BYTE *)v1 || *(_QWORD *)(v1 + 16))
            goto LABEL_11;
        }
        v1 = a1[1];
LABEL_11:
        *a1 = v1;
        if (v1 != a1[2])
          continue;
      }
      return result;
    }
    sub_1C485C2F0();
    *(_QWORD *)&result = sub_1C5E97DE8(v5, v6).n128_u64[0];
  }
  return result;
}

__n128 sub_1C5E97DE8(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  if (*(_DWORD *)(a2 + 8))
    sub_1C614D378((uint64_t)a1, a2);
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  a1[9] = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  a1[12] = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 104);
  a1[15] = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  a1[18] = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  *(_OWORD *)(a1 + 19) = *(_OWORD *)(a2 + 152);
  a1[21] = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  a1[22] = 0;
  a1[23] = 0;
  a1[24] = 0;
  result = *(__n128 *)(a2 + 176);
  *((__n128 *)a1 + 11) = result;
  a1[24] = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  return result;
}

uint64_t sub_1C5E97EF4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    v5 = *(unsigned int *)(a2 + 8);
  else
    v5 = v4;
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i != v5; ++i)
    {
      v9 = 0;
      if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, i, &v9))
      {
        if (i >= *(unsigned int *)(a2 + 8))
          sub_1C6154790(a2, i + 1);
        sub_1C5E97FE8(a1, (unsigned __int8 *)(*(_QWORD *)a2 + v6));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v9);
      }
      v6 += 8;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

void sub_1C5E97FE8(uint64_t a1, unsigned __int8 *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  _QWORD v10[2];
  void (**v11)(llvm::raw_ostream *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    LODWORD(v12) = 0;
    v16 = 0;
    v17 = 0;
    v11 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v19 = &v20;
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    sub_1C63A22F8(a2, (llvm::raw_ostream *)&v11);
    v4 = v19;
    v5 = *((_BYTE *)v19 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v19;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v19[1];
    v10[0] = v4;
    v10[1] = v7;
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v10, 0);
    v11 = off_1E81A6E70;
    if (v18 == 1 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 216))(a1, &v20, 0);
    v8 = sub_1C63A235C((uint64_t)v20, v21, (char **)a2);
    if (v9)
    {
      LOWORD(v15) = 261;
      v11 = (void (**)(llvm::raw_ostream *__hidden))v8;
      v12 = v9;
      (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)a1 + 248))(a1, &v11);
    }
  }
}

void sub_1C5E9813C(uint64_t a1, llvm::MachO::PackedVersion *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  _QWORD v8[2];
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    LODWORD(v10) = 0;
    v14 = 0;
    v15 = 0;
    v9 = (const char *)&unk_1E81A7208;
    v17 = &v18;
    v16 = 0;
    v12 = 0;
    v13 = 0;
    v11 = 0;
    llvm::MachO::PackedVersion::print(a2, (llvm::raw_ostream *)&v9);
    v4 = v17;
    v5 = *((_BYTE *)v17 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v17;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v17[1];
    v8[0] = v4;
    v8[1] = v7;
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v8, 0);
    v9 = (const char *)off_1E81A6E70;
    if (v16 == 1 && v11)
      MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    v18 = 0;
    v19 = 0;
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 216))(a1, &v18, 0);
    if ((llvm::MachO::PackedVersion::parse32(a2, (uint64_t)v18, v19) & 1) == 0)
    {
      LOWORD(v13) = 261;
      v9 = "invalid packed version string.";
      v10 = 30;
      (*(void (**)(uint64_t, const char **))(*(_QWORD *)a1 + 248))(a1, &v9);
    }
  }
}

void sub_1C5E9829C(uint64_t *a1, _BYTE *a2)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  char v7;
  BOOL v8;
  void *v9;
  _QWORD v10[2];
  void (**v11)(llvm::raw_ostream *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    LODWORD(v12) = 0;
    v16 = 0;
    v17 = 0;
    v11 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v19 = &v20;
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    llvm::yaml::ScalarTraits<SwiftVersion,void>::output(a2, a1[1], (llvm::raw_ostream *)&v11);
    v6 = v19;
    v7 = *((_BYTE *)v19 + 23);
    v8 = v7 < 0;
    if (v7 < 0)
      v6 = *v19;
    v9 = (void *)(v7 & 0x7F);
    if (v8)
      v9 = v19[1];
    v10[0] = v6;
    v10[1] = v9;
    (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 216))(a1, v10, 0);
    v11 = off_1E81A6E70;
    if (v18 == 1 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    (*(void (**)(uint64_t *, void **, _QWORD))(*a1 + 216))(a1, &v20, 0);
    v4 = llvm::yaml::ScalarTraits<SwiftVersion,void>::input((unsigned __int8 *)v20, v21, a1[1], a2);
    if (v5)
    {
      LOWORD(v15) = 261;
      v11 = (void (**)(llvm::raw_ostream *__hidden))v4;
      v12 = v5;
      (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden)))(*a1 + 248))(a1, &v11);
    }
  }
}

uint64_t sub_1C5E983F8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    v5 = ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  else
    v5 = v4;
  if ((_DWORD)v5)
  {
    v6 = 0;
    v20 = v5;
    do
    {
      v21 = 0;
      if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, v6, &v21))
      {
        v8 = *(unsigned __int8 **)a2;
        v7 = *(unsigned __int8 **)(a2 + 8);
        v9 = (uint64_t)&v7[-*(_QWORD *)a2];
        v10 = v9 >> 3;
        if (v9 >> 3 <= v6)
        {
          v11 = v6 + 1;
          v12 = v6 + 1 - v10;
          v13 = *(_QWORD *)(a2 + 16);
          if (v12 <= (v13 - (uint64_t)v7) >> 3)
          {
            bzero(*(void **)(a2 + 8), 8 * v12);
            *(_QWORD *)(a2 + 8) = &v7[8 * v12];
          }
          else
          {
            v14 = v13 - (_QWORD)v8;
            if (v14 >> 2 > v11)
              v11 = v14 >> 2;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
              v15 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v15 = v11;
            if (v15 >> 61)
              sub_1C4764EE4();
            v16 = (char *)operator new(8 * v15);
            v17 = &v16[8 * v10];
            bzero(v17, 8 * v12);
            if (v7 != v8)
            {
              do
              {
                v18 = *((_QWORD *)v7 - 1);
                v7 -= 8;
                *((_QWORD *)v17 - 1) = v18;
                v17 -= 8;
              }
              while (v7 != v8);
              v7 = v8;
            }
            *(_QWORD *)a2 = v17;
            *(_QWORD *)(a2 + 8) = &v16[8 * v12 + v9];
            *(_QWORD *)(a2 + 16) = &v16[8 * v15];
            v5 = v20;
            if (v7)
              operator delete(v7);
          }
          v8 = *(unsigned __int8 **)a2;
        }
        sub_1C5E97FE8(a1, &v8[8 * v6]);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v21);
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t sub_1C5E985AC(_QWORD *a1, char **a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char v18;
  char *v19;
  uint64_t v20;
  uint64_t mustQuote;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  void **v33;
  void *v34[2];
  uint64_t v35;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
    v5 = ((unint64_t)(a2[1] - *a2) >> 4);
  else
    v5 = v4;
  if ((_DWORD)v5)
  {
    v6 = 0;
    v23 = v5;
    do
    {
      v24 = 0;
      if ((*(unsigned int (**)(_QWORD *, unint64_t, uint64_t *))(*a1 + 72))(a1, v6, &v24))
      {
        v8 = *a2;
        v7 = a2[1];
        v9 = (v7 - *a2) >> 4;
        if (v9 <= v6)
        {
          v10 = v6 + 1;
          v11 = v6 + 1 - v9;
          v12 = a2[2];
          if (v11 <= (v12 - v7) >> 4)
          {
            bzero(a2[1], 16 * v11);
            a2[1] = &v7[16 * v11];
          }
          else
          {
            v13 = v12 - v8;
            v14 = v13 >> 3;
            if (v13 >> 3 <= v10)
              v14 = v6 + 1;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
              v15 = 0xFFFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            if (v15 >> 60)
              sub_1C4764EE4();
            v16 = (char *)operator new(16 * v15);
            v17 = &v16[16 * v9];
            bzero(v17, 16 * v11);
            if (v7 != v8)
            {
              do
              {
                *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
                v17 -= 16;
                v7 -= 16;
              }
              while (v7 != v8);
              v7 = v8;
            }
            *a2 = v17;
            a2[1] = &v16[16 * v10];
            a2[2] = &v16[16 * v15];
            v5 = v23;
            if (v7)
              operator delete(v7);
          }
          v8 = *a2;
        }
        if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
        {
          v34[0] = 0;
          v34[1] = 0;
          v35 = 0;
          DWORD2(v26) = 0;
          v30 = 0;
          v31 = 0;
          *(_QWORD *)&v26 = &unk_1E81A7208;
          v33 = v34;
          v32 = 0;
          v28 = 0;
          v29 = 0;
          v27 = 0;
          llvm::yaml::ScalarTraits<llvm::StringRef,void>::output((uint64_t)&v8[16 * v6], a1[1], (llvm::raw_ostream *)&v26);
          v18 = *((_BYTE *)v33 + 23);
          if (v18 >= 0)
            v19 = (char *)v33;
          else
            v19 = (char *)*v33;
          if (v18 >= 0)
            v20 = v18 & 0x7F;
          else
            v20 = (uint64_t)v33[1];
          v25[0] = v19;
          v25[1] = v20;
          mustQuote = llvm::yaml::ScalarTraits<FlowStringRef,void>::mustQuote(v19, v20);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*a1 + 216))(a1, v25, mustQuote);
          *(_QWORD *)&v26 = off_1E81A6E70;
          if (v32 == 1 && v27)
            MEMORY[0x1CAA32F9C](v27, 0x1000C8077774924);
          if (SHIBYTE(v35) < 0)
            operator delete(v34[0]);
        }
        else
        {
          v26 = 0uLL;
          (*(void (**)(_QWORD *, __int128 *, uint64_t))(*a1 + 216))(a1, &v26, 1);
          *(_OWORD *)&v8[16 * v6] = v26;
        }
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, v24);
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
}

double sub_1C5E98894(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 168) = v12;
  return result;
}

double sub_1C5E98960(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 200) = v12;
  return result;
}

void sub_1C5E98A2C(uint64_t *a1, _QWORD *a2, _QWORD *a3, char a4)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  size_t v31;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v8 = v6[7];
      v9 = v6[8];
      while (v8 != v9)
      {
        v10 = *(const void **)v8;
        v11 = *(_QWORD *)(v8 + 8);
        v8 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 0, v10, v11, (uint64_t)v6, a4);
      }
      v12 = v6[10];
      v13 = v6[11];
      while (v12 != v13)
      {
        v14 = *(const void **)v12;
        v15 = *(_QWORD *)(v12 + 8);
        v12 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 1, v14, v15, (uint64_t)v6, 0);
      }
      v16 = v6[13];
      v17 = v6[14];
      while (v16 != v17)
      {
        v18 = *(const void **)v16;
        v19 = *(_QWORD *)(v16 + 8);
        v16 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 2, v18, v19, (uint64_t)v6, 0);
      }
      v20 = v6[16];
      v21 = v6[17];
      while (v20 != v21)
      {
        v22 = *(const void **)v20;
        v23 = *(_QWORD *)(v20 + 8);
        v20 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 3, v22, v23, (uint64_t)v6, 0);
      }
      v24 = v6[19];
      v25 = v6[20];
      while (v24 != v25)
      {
        v26 = *(const void **)v24;
        v27 = *(_QWORD *)(v24 + 8);
        v24 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 0, v26, v27, (uint64_t)v6, 2);
      }
      v28 = v6[22];
      v29 = v6[23];
      while (v28 != v29)
      {
        v30 = *(const void **)v28;
        v31 = *(_QWORD *)(v28 + 8);
        v28 += 16;
        llvm::MachO::InterfaceFile::addSymbol(*a1, 0, v30, v31, (uint64_t)v6, 1);
      }
      v6 += 25;
    }
    while (v6 != a3);
  }
}

void **sub_1C5E98B68(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_1C5E97CB8(v3 - 200);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_1C5E98BC0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1C5E98C38(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  char **v28;
  int v29;
  const char *v30;
  char **v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  if (!(_DWORD)result || *a2 != a2[1])
  {
    v33 = 0;
    v32 = 0;
    result = (*(uint64_t (**)(_QWORD *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, "exports", 0, 0, &v32, &v33);
    if ((_DWORD)result)
    {
      v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
        v5 = 1749801491 * ((a2[1] - *a2) >> 3);
      if (v5)
      {
        v6 = 0;
        v7 = v5;
        while (1)
        {
          v34 = 0;
          if ((*(unsigned int (**)(_QWORD *, unint64_t, uint64_t *))(*a1 + 32))(a1, v6, &v34))
            break;
LABEL_9:
          if (++v6 == v7)
            goto LABEL_61;
        }
        v9 = (char *)*a2;
        v8 = (char *)a2[1];
        v10 = (uint64_t)&v8[-*a2];
        v11 = 0x84BDA12F684BDA13 * (v10 >> 3);
        if (v11 <= v6)
        {
          v12 = v6 + 1;
          v13 = v6 + 1 - v11;
          v14 = a2[2];
          if (0x84BDA12F684BDA13 * ((v14 - (uint64_t)v8) >> 3) >= v13)
          {
            bzero((void *)a2[1], 216 * ((216 * v6 - v10) / 0xD8) + 216);
            a2[1] = &v8[216 * v13];
          }
          else
          {
            v31 = (char **)a2;
            v15 = 0x84BDA12F684BDA13 * ((v14 - (uint64_t)v9) >> 3);
            v16 = 2 * v15;
            if (2 * v15 <= v12)
              v16 = v6 + 1;
            if (v15 >= 0x97B425ED097B42)
              v17 = 0x12F684BDA12F684;
            else
              v17 = v16;
            if (v17 > 0x12F684BDA12F684)
              sub_1C4764EE4();
            v18 = 216 * v17;
            v19 = (char *)operator new(216 * v17);
            v20 = &v19[8 * (v10 >> 3)];
            v21 = &v19[v18];
            bzero(v20, 216 * ((216 * v6 - v10) / 0xD8) + 216);
            v22 = &v19[216 * v12];
            if (v8 == v9)
            {
              a2 = v31;
              *v31 = v20;
              v31[1] = v22;
              v31[2] = v21;
            }
            else
            {
              a2 = v31;
              do
              {
                v20 -= 216;
                v8 -= 216;
                sub_1C5E9BBB4(v20, (uint64_t)v8);
              }
              while (v8 != v9);
              v8 = *v31;
              v23 = (uint64_t)v31[1];
              *v31 = v20;
              v31[1] = v22;
              for (v31[2] = v21; (char *)v23 != v8; v23 = sub_1C5E9BA84(v23 - 216))
                ;
            }
            if (v8)
              operator delete(v8);
          }
        }
        v24 = (char *)*a2;
        v25 = (_DWORD *)(*a2 + 216 * v6);
        (*(void (**)(_QWORD *))(*a1 + 104))(a1);
        v26 = a1[1];
        sub_1C63A2AF8((uint64_t)a1, v25);
        v27 = *(_DWORD *)(v26 + 48);
        v28 = (char **)(v25 + 6);
        v29 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
        if (v27 == 1)
        {
          if (v29)
          {
            if (*v28 == *(char **)&v24[216 * v6 + 32])
              goto LABEL_38;
            v30 = "allowed-clients";
          }
          else
          {
            v30 = "allowed-clients";
          }
        }
        else if (v29)
        {
          if (*v28 == *(char **)&v24[216 * v6 + 32])
            goto LABEL_38;
          v30 = "allowable-clients";
        }
        else
        {
          v30 = "allowable-clients";
        }
        sub_1C63A26B4(a1, (uint64_t)v30, v28, 0);
LABEL_38:
        if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1)
          || *(_QWORD *)&v24[216 * v6 + 48] != *(_QWORD *)&v24[216 * v6 + 56])
        {
          sub_1C63A26B4(a1, (uint64_t)"re-exports", (char **)&v24[216 * v6 + 48], 0);
        }
        if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1)
          || *(_QWORD *)&v24[216 * v6 + 72] != *(_QWORD *)&v24[216 * v6 + 80])
        {
          sub_1C63A26B4(a1, (uint64_t)"symbols", (char **)&v24[216 * v6 + 72], 0);
        }
        if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1)
          || *(_QWORD *)&v24[216 * v6 + 96] != *(_QWORD *)&v24[216 * v6 + 104])
        {
          sub_1C63A26B4(a1, (uint64_t)"objc-classes", (char **)&v24[216 * v6 + 96], 0);
        }
        if (*(_DWORD *)(v26 + 48) == 4
          && (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1)
           || *(_QWORD *)&v24[216 * v6 + 120] != *(_QWORD *)&v24[216 * v6 + 128]))
        {
          sub_1C63A26B4(a1, (uint64_t)"objc-eh-types", (char **)&v24[216 * v6 + 120], 0);
        }
        if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1)
          || *(_QWORD *)&v24[216 * v6 + 144] != *(_QWORD *)&v24[216 * v6 + 152])
        {
          sub_1C63A26B4(a1, (uint64_t)"objc-ivars", (char **)&v24[216 * v6 + 144], 0);
        }
        if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1)
          || *(_QWORD *)&v24[216 * v6 + 168] != *(_QWORD *)&v24[216 * v6 + 176])
        {
          sub_1C63A26B4(a1, (uint64_t)"weak-def-symbols", (char **)&v24[216 * v6 + 168], 0);
        }
        if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1)
          || *(_QWORD *)&v24[216 * v6 + 192] != *(_QWORD *)&v24[216 * v6 + 200])
        {
          sub_1C63A26B4(a1, (uint64_t)"thread-local-symbols", (char **)&v24[216 * v6 + 192], 0);
        }
        (*(void (**)(_QWORD *))(*a1 + 112))(a1);
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v34);
        goto LABEL_9;
      }
LABEL_61:
      (*(void (**)(_QWORD *))(*a1 + 48))(a1);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, v33);
    }
  }
  return result;
}

uint64_t sub_1C5E99238(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  void **v28;
  void **v29;
  __int128 v30;
  char *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  const std::string *v35;
  uint64_t v36;
  std::string *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  const std::string *v45;
  uint64_t v46;
  std::string *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  char v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int8 *v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t i;
  unint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned __int8 *v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  unsigned __int8 *v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  char v110;
  BOOL v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  int64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  int v128;
  unsigned __int8 *v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  char v134;
  BOOL v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  void *v140;
  _QWORD *v141;
  int64_t v142;
  unint64_t v143;
  int64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  const void *v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  const void *v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  const void *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  const void *v164;
  _QWORD *v165;
  _QWORD *v166;
  const void *v167;
  size_t v168;
  __int128 *v169;
  const void *v170;
  size_t v171;
  __int128 *v172;
  uint64_t v173;
  const void *v174;
  _QWORD *v175;
  _QWORD *v176;
  const void *v177;
  size_t v178;
  __int128 *p_dst;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  _QWORD *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  std::string *v208;
  size_t v209;
  __int128 *v210;
  void *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  int64_t v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  std::string *v222;
  size_t v223;
  __int128 *v224;
  void *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  std::string *v236;
  size_t v237;
  __int128 *v238;
  void *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  _QWORD *v248;
  uint64_t v249;
  unint64_t v250;
  int64_t v251;
  unint64_t v252;
  char *v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  uint64_t *v278;
  uint64_t *v279;
  BOOL v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  char *v294;
  _QWORD *v295;
  _BYTE *v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  uint64_t v303;
  _QWORD **v304;
  _QWORD *v305;
  _QWORD **v306;
  _QWORD *v307;
  uint64_t j;
  unint64_t v309;
  uint64_t v310;
  unsigned int v311;
  unsigned __int8 *v312;
  uint64_t v313;
  int v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  const void *v325;
  _QWORD *v326;
  _QWORD *v327;
  const void *v328;
  uint64_t v329;
  _QWORD *v330;
  _QWORD *v331;
  const void *v332;
  uint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  const void *v336;
  uint64_t v337;
  _QWORD *v338;
  void *v339;
  const void *v340;
  size_t v341;
  __int128 *v342;
  const void *v343;
  size_t v344;
  __int128 *v345;
  _QWORD *v346;
  _QWORD *v347;
  const void *v348;
  size_t v349;
  __int128 *v350;
  _QWORD *v351;
  uint64_t v352;
  unint64_t v353;
  int64_t v354;
  unint64_t v355;
  char *v356;
  _QWORD *v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  char *v362;
  _QWORD *v363;
  uint64_t v364;
  unint64_t v365;
  int64_t v366;
  unint64_t v367;
  char *v368;
  _QWORD *v369;
  int64_t v370;
  unint64_t v371;
  int64_t v372;
  unint64_t v373;
  char *v374;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  std::string *v383;
  size_t v384;
  __int128 *v385;
  void *v386;
  _QWORD *v387;
  _QWORD *v388;
  _QWORD *v389;
  uint64_t v390;
  unint64_t v391;
  int64_t v392;
  unint64_t v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  std::string *v397;
  size_t v398;
  __int128 *v399;
  void *v400;
  _QWORD *v401;
  _QWORD *v402;
  _QWORD *v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  std::string *v411;
  size_t v412;
  __int128 *v413;
  void *v414;
  _QWORD *v415;
  void *v416;
  _QWORD *v417;
  int64_t v418;
  unint64_t v419;
  int64_t v420;
  unint64_t v421;
  char *v422;
  char *v423;
  char *v424;
  char *v425;
  char *v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  char *v432;
  char *v433;
  char *v434;
  char *v435;
  char *v436;
  char *v437;
  char *v438;
  char *v439;
  char *v440;
  char *v441;
  char *v442;
  char *v443;
  char *v444;
  char *v445;
  char *v446;
  uint64_t *v447;
  uint64_t *v448;
  unint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  char *v460;
  _QWORD *v461;
  _BYTE *v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  char *v466;
  char *v467;
  char *v468;
  char *v469;
  void *v470;
  void *v471;
  void *v472;
  void *v473;
  void *v474;
  void *v475;
  _QWORD *v476;
  _QWORD **v477;
  uint64_t v478;
  uint64_t *v480;
  uint64_t *v481;
  uint64_t *v482;
  _QWORD *v483;
  uint64_t v484;
  _QWORD **v485;
  _QWORD *v486;
  uint64_t v487;
  void *__p[2];
  void *v489[2];
  __int128 v490;
  void *v491[2];
  void *v492[2];
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  char *v501;
  __int128 __dst;
  __int128 v503;
  _BYTE v504[24];
  _BYTE *v505;
  __int128 v506;
  __int128 v507;
  _BYTE v508[24];
  _BYTE *v509;
  uint64_t v510;

  v2 = a2;
  v3 = 0;
  v510 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = 0u;
  v4 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 144) = a1 + 160;
  v5 = a1 + 144;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 152) = 0x300000000;
  *(_QWORD *)(a1 + 184) = 0;
  v6 = a1 + 184;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v7 = (uint64_t *)(a1 + 176);
  *(_DWORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  v8 = *(unsigned int *)(*a2 + 104);
  if ((_DWORD)v8)
  {
    v3 = 0;
    v9 = *(unsigned __int8 **)(*a2 + 96);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      v9 += 8;
      v12 = 1 << v11;
      if (v11 == 118)
        v13 = 0;
      else
        v13 = v12;
      v3 |= v13;
      v10 -= 8;
    }
    while (v10);
  }
  v14 = a1 + 120;
  LODWORD(v506) = v3;
  llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>((unsigned int *)&v506, __p);
  v15 = *v4;
  if (*v4)
  {
    *(_QWORD *)(a1 + 104) = v15;
    operator delete(v15);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)__p;
  *(void **)(a1 + 112) = v489[0];
  v16 = *v2;
  v480 = v2;
  if (v14 != *v2 + 320)
  {
    v18 = *(char **)(v16 + 320);
    v17 = *(char **)(v16 + 328);
    v19 = (v17 - v18) >> 5;
    v20 = *(_QWORD *)(a1 + 136);
    v21 = *(char **)(a1 + 120);
    if (v19 <= (v20 - (uint64_t)v21) >> 5)
    {
      v31 = *(char **)(a1 + 128);
      v32 = (v31 - v21) >> 5;
      if (v32 >= v19)
      {
        if (v18 == v17)
        {
          v44 = *(char **)(a1 + 120);
          v2 = v480;
        }
        else
        {
          v44 = *(char **)(a1 + 120);
          v2 = v480;
          do
          {
            v45 = (const std::string *)(v18 + 8);
            v46 = *(_QWORD *)v18;
            v18 += 32;
            v47 = (std::string *)(v21 + 8);
            *(_QWORD *)v21 = v46;
            v21 += 32;
            std::string::operator=(v47, v45);
            v44 += 32;
          }
          while (v18 != v17);
          v31 = *(char **)(a1 + 128);
        }
        while (v31 != v44)
        {
          if (*(v31 - 1) < 0)
            operator delete(*((void **)v31 - 3));
          v31 -= 32;
        }
        *(_QWORD *)(a1 + 128) = v44;
      }
      else
      {
        v33 = &v18[32 * v32];
        if (v31 != v21)
        {
          v34 = v18;
          do
          {
            v35 = (const std::string *)(v34 + 8);
            v36 = *(_QWORD *)v34;
            v34 += 32;
            v37 = (std::string *)(v21 + 8);
            *(_QWORD *)v21 = v36;
            v21 += 32;
            std::string::operator=(v37, v35);
          }
          while (v34 != v33);
          v21 = *(char **)(a1 + 128);
        }
        v38 = v21;
        if (v33 != v17)
        {
          v39 = v21 + 8;
          v40 = (uint64_t)&v18[32 * v32 + 8];
          v38 = v21;
          do
          {
            v41 = v40 - 8;
            *(v39 - 1) = *(_QWORD *)(v40 - 8);
            if (*(char *)(v40 + 23) < 0)
            {
              sub_1C47EBC30(v39, *(void **)v40, *(_QWORD *)(v40 + 8));
            }
            else
            {
              v42 = *(_OWORD *)v40;
              v39[2] = *(_QWORD *)(v40 + 16);
              *(_OWORD *)v39 = v42;
            }
            v39 += 4;
            v40 += 32;
            v38 += 32;
          }
          while ((char *)(v41 + 32) != v17);
        }
        v43 = v38;
        v2 = v480;
        *(_QWORD *)(a1 + 128) = v43;
      }
    }
    else
    {
      if (v21)
      {
        v22 = *(_QWORD **)(a1 + 128);
        v23 = *(void **)(a1 + 120);
        if (v22 != (_QWORD *)v21)
        {
          do
          {
            if (*((char *)v22 - 1) < 0)
              operator delete((void *)*(v22 - 3));
            v22 -= 4;
          }
          while (v22 != (_QWORD *)v21);
          v23 = *(void **)v14;
        }
        *(_QWORD *)(a1 + 128) = v21;
        operator delete(v23);
        v20 = 0;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0;
      }
      if (v17 - v18 < 0)
        goto LABEL_808;
      v24 = v20 >> 4;
      if (v20 >> 4 <= v19)
        v24 = (v17 - v18) >> 5;
      v25 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v24;
      if (v25 >> 59)
LABEL_808:
        abort();
      v26 = (char *)operator new(32 * v25);
      v2 = v480;
      *(_QWORD *)(a1 + 120) = v26;
      *(_QWORD *)(a1 + 128) = v26;
      *(_QWORD *)(a1 + 136) = &v26[32 * v25];
      if (v18 != v17)
      {
        v27 = v26 + 8;
        v28 = (void **)(v18 + 8);
        do
        {
          v29 = v28 - 1;
          *((_QWORD *)v27 - 1) = *(v28 - 1);
          if (*((char *)v28 + 23) < 0)
          {
            sub_1C47EBC30(v27, *v28, (unint64_t)v28[1]);
          }
          else
          {
            v30 = *(_OWORD *)v28;
            *((_QWORD *)v27 + 2) = v28[2];
            *(_OWORD *)v27 = v30;
          }
          v27 += 32;
          v28 += 4;
        }
        while (v29 + 4 != (void **)v17);
        v26 = v27 - 8;
      }
      *(_QWORD *)(a1 + 128) = v26;
    }
    v16 = *v2;
  }
  llvm::MachO::mapToPlatformSet(*(_QWORD *)(v16 + 96), *(unsigned int *)(v16 + 104), __p);
  sub_1C614C900(v5, (uint64_t)__p);
  sub_1C47655E8((uint64_t)v7, *(_QWORD **)(a1 + 184));
  v48 = (_QWORD *)*((_QWORD *)&v490 + 1);
  *(_QWORD *)(a1 + 176) = v490;
  *(_QWORD *)(a1 + 184) = v48;
  v49 = v491[0];
  *(void **)(a1 + 192) = v491[0];
  if (v49)
  {
    v48[2] = v6;
    *(_QWORD *)&v490 = (char *)&v490 + 8;
    *((_QWORD *)&v490 + 1) = 0;
    v491[0] = 0;
    v48 = 0;
  }
  else
  {
    *v7 = v6;
  }
  sub_1C47655E8((uint64_t)&v490, v48);
  if (__p[0] != v489)
    free(__p[0]);
  v50 = *(_QWORD *)(*v2 + 184);
  v51 = *(_BYTE *)(*v2 + 207);
  v52 = v51;
  if (v51 >= 0)
    v50 = *v2 + 184;
  v53 = *(_QWORD *)(*v2 + 192);
  v54 = v51 & 0x7F;
  if (v52 >= 0)
    v53 = v54;
  *(_QWORD *)(a1 + 200) = v50;
  *(_QWORD *)(a1 + 208) = v53;
  v55 = *v2;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(*v2 + 208);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(v55 + 212);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(v55 + 216);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(v55 + 220);
  v56 = 2 * (*(_BYTE *)(v55 + 218) == 0);
  *(_DWORD *)(a1 + 232) = v56;
  v57 = *v2;
  if (!*(_BYTE *)(*v2 + 217))
  {
    v56 |= 1u;
    *(_DWORD *)(a1 + 232) = v56;
    v57 = *v2;
  }
  if (*(_BYTE *)(v57 + 219))
  {
    *(_DWORD *)(a1 + 232) = v56 | 4;
    v57 = *v2;
  }
  v58 = *(_QWORD *)(v57 + 224);
  if (v58 != *(_QWORD *)(v57 + 232))
  {
    v61 = *(_QWORD *)(v58 + 8);
    v59 = v58 + 8;
    v60 = v61;
    v62 = *(_BYTE *)(v59 + 23);
    v63 = v62;
    if (v62 >= 0)
      v60 = v59;
    v64 = *(_QWORD *)(v59 + 8);
    v65 = v62 & 0x7F;
    if (v63 >= 0)
      v64 = v65;
    *(_QWORD *)(a1 + 240) = v60;
    *(_QWORD *)(a1 + 248) = v64;
    v57 = *v2;
  }
  v486 = 0;
  v487 = 0;
  v485 = &v486;
  v66 = *(_QWORD *)(v57 + 248);
  v67 = *(_QWORD *)(v57 + 256);
  if (v66 != v67)
  {
    do
    {
      v68 = *(unsigned int *)(v66 + 32);
      if ((_DWORD)v68)
      {
        v69 = 0;
        v70 = *(unsigned __int8 **)(v66 + 24);
        v71 = 8 * v68;
        do
        {
          v72 = *v70;
          v70 += 8;
          v73 = 1 << v72;
          if (v72 == 118)
            v74 = 0;
          else
            v74 = v73;
          v69 |= v74;
          v71 -= 8;
        }
        while (v71);
      }
      else
      {
        v69 = 0;
      }
      sub_1C5244698((uint64_t *)&v485, v69, v69);
      v66 += 80;
    }
    while (v66 != v67);
    v57 = *v2;
  }
  v75 = *(_QWORD *)(v57 + 272);
  v76 = *(_QWORD *)(v57 + 280);
  if (v75 != v76)
  {
    do
    {
      v77 = *(unsigned int *)(v75 + 32);
      if ((_DWORD)v77)
      {
        v78 = 0;
        v79 = *(unsigned __int8 **)(v75 + 24);
        v80 = 8 * v77;
        do
        {
          v81 = *v79;
          v79 += 8;
          v82 = 1 << v81;
          if (v81 == 118)
            v83 = 0;
          else
            v83 = v82;
          v78 |= v83;
          v80 -= 8;
        }
        while (v80);
      }
      else
      {
        v78 = 0;
      }
      sub_1C5244698((uint64_t *)&v485, v78, v78);
      v75 += 80;
    }
    while (v75 != v76);
    v57 = *v2;
  }
  v483 = 0;
  v484 = 0;
  v482 = (uint64_t *)&v483;
  sub_1C5E96A18((uint64_t)__p, v57);
  v506 = *(_OWORD *)__p;
  v507 = *(_OWORD *)v489;
  v84 = v508;
  if (v491[1])
  {
    if (v491[1] == &v490)
    {
      v509 = v508;
      (*(void (**)(void))(*(_QWORD *)v491[1] + 24))();
    }
    else
    {
      v509 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v491[1] + 16))();
    }
  }
  else
  {
    v509 = 0;
  }
  __dst = *(_OWORD *)v492;
  v503 = v493;
  v85 = v504;
  if (*((_QWORD *)&v495 + 1))
  {
    if (*((__int128 **)&v495 + 1) == &v494)
    {
      v505 = v504;
      (*(void (**)(void))(**((_QWORD **)&v495 + 1) + 24))();
    }
    else
    {
      v505 = (_BYTE *)(*(uint64_t (**)(void))(**((_QWORD **)&v495 + 1) + 16))();
    }
  }
  else
  {
    v505 = 0;
  }
  for (i = v506; (_QWORD)v506 != (_QWORD)__dst; i = v506)
  {
    v87 = *(_QWORD *)(i + 24);
    v481 = (uint64_t *)v87;
    v88 = *(unsigned int *)(v87 + 24);
    if ((_DWORD)v88)
    {
      v89 = 0;
      v90 = *(unsigned __int8 **)(v87 + 16);
      v91 = 8 * v88;
      do
      {
        v92 = *v90;
        v90 += 8;
        v93 = 1 << v92;
        if (v92 == 118)
          v94 = 0;
        else
          v94 = v93;
        v89 |= v94;
        v91 -= 8;
      }
      while (v91);
    }
    else
    {
      v89 = 0;
    }
    *((_DWORD *)sub_1C5031104(&v482, v87, &v481) + 10) = v89;
    sub_1C5244698((uint64_t *)&v485, v89, v89);
    sub_1C63A19E0((uint64_t *)&v506);
  }
  if (v505 == v504)
  {
    v95 = 4;
  }
  else
  {
    if (!v505)
      goto LABEL_121;
    v95 = 5;
    v85 = v505;
  }
  (*(void (**)(_QWORD *))(*v85 + 8 * v95))(v85);
LABEL_121:
  if (v509 == v508)
  {
    v96 = 4;
  }
  else
  {
    if (!v509)
      goto LABEL_126;
    v96 = 5;
    v84 = v509;
  }
  (*(void (**)(_QWORD *))(*v84 + 8 * v96))(v84);
LABEL_126:
  sub_1C63A20DC(__p);
  v97 = (uint64_t)v485;
  if (v485 != &v486)
  {
    while (1)
    {
      v478 = v97;
      v99 = *(_DWORD *)(v97 + 28);
      LODWORD(v481) = v99;
      v501 = 0;
      v499 = 0u;
      v500 = 0u;
      v497 = 0u;
      v498 = 0u;
      v495 = 0u;
      v496 = 0u;
      v493 = 0u;
      v494 = 0u;
      *(_OWORD *)v491 = 0u;
      *(_OWORD *)v492 = 0u;
      *(_OWORD *)v489 = 0u;
      v490 = 0u;
      *(_OWORD *)__p = 0u;
      llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>((unsigned int *)&v481, &v506);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v506;
      v489[0] = (void *)v507;
      v100 = *v480;
      v101 = *(uint64_t **)(*v480 + 248);
      v102 = *(uint64_t **)(*v480 + 256);
      if (v101 != v102)
      {
        do
        {
          v103 = *((unsigned int *)v101 + 8);
          if ((_DWORD)v103)
          {
            v104 = 0;
            v105 = (unsigned __int8 *)v101[3];
            v106 = 8 * v103;
            do
            {
              v107 = *v105;
              v105 += 8;
              v108 = 1 << v107;
              if (v107 == 118)
                v109 = 0;
              else
                v109 = v108;
              v104 |= v109;
              v106 -= 8;
            }
            while (v106);
          }
          else
          {
            v104 = 0;
          }
          if (v104 == v99)
          {
            v110 = *((_BYTE *)v101 + 23);
            v111 = v110 < 0;
            if (v110 >= 0)
              v112 = v101;
            else
              v112 = (uint64_t *)*v101;
            v113 = v110 & 0x7F;
            if (v111)
              v114 = v101[1];
            else
              v114 = v113;
            v115 = (_QWORD *)v490;
            if ((unint64_t)v490 >= *((_QWORD *)&v490 + 1))
            {
              v117 = v489[1];
              v118 = (uint64_t)(v490 - (unint64_t)v489[1]) >> 4;
              v119 = v118 + 1;
              if ((unint64_t)(v118 + 1) >> 60)
                goto LABEL_808;
              v120 = *((_QWORD *)&v490 + 1) - (unint64_t)v489[1];
              if ((uint64_t)(*((_QWORD *)&v490 + 1) - (unint64_t)v489[1]) >> 3 > v119)
                v119 = v120 >> 3;
              if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF0)
                v121 = 0xFFFFFFFFFFFFFFFLL;
              else
                v121 = v119;
              if (v121)
              {
                if (v121 >> 60)
                  goto LABEL_809;
                v122 = (char *)operator new(16 * v121);
              }
              else
              {
                v122 = 0;
              }
              v123 = &v122[16 * v118];
              *(_QWORD *)v123 = v112;
              *((_QWORD *)v123 + 1) = v114;
              v124 = v123;
              if (v115 != v117)
              {
                do
                {
                  *((_OWORD *)v124 - 1) = *((_OWORD *)v115 - 1);
                  v124 -= 16;
                  v115 -= 2;
                }
                while (v115 != v117);
                v115 = v489[1];
              }
              v116 = v123 + 16;
              v489[1] = v124;
              *(_QWORD *)&v490 = v123 + 16;
              *((_QWORD *)&v490 + 1) = &v122[16 * v121];
              if (v115)
                operator delete(v115);
            }
            else
            {
              *(_QWORD *)v490 = v112;
              v115[1] = v114;
              v116 = v115 + 2;
            }
            *(_QWORD *)&v490 = v116;
          }
          v101 += 10;
        }
        while (v101 != v102);
        v100 = *v480;
      }
      v125 = *(uint64_t **)(v100 + 272);
      v126 = *(uint64_t **)(v100 + 280);
      while (v125 != v126)
      {
        v127 = *((unsigned int *)v125 + 8);
        if ((_DWORD)v127)
        {
          v128 = 0;
          v129 = (unsigned __int8 *)v125[3];
          v130 = 8 * v127;
          do
          {
            v131 = *v129;
            v129 += 8;
            v132 = 1 << v131;
            if (v131 == 118)
              v133 = 0;
            else
              v133 = v132;
            v128 |= v133;
            v130 -= 8;
          }
          while (v130);
        }
        else
        {
          v128 = 0;
        }
        if (v128 == v99)
        {
          v134 = *((_BYTE *)v125 + 23);
          v135 = v134 < 0;
          if (v134 >= 0)
            v136 = v125;
          else
            v136 = (uint64_t *)*v125;
          v137 = v134 & 0x7F;
          if (v135)
            v138 = v125[1];
          else
            v138 = v137;
          v139 = v491[1];
          if (v491[1] >= v492[0])
          {
            v141 = v491[0];
            v142 = ((char *)v491[1] - (char *)v491[0]) >> 4;
            v143 = v142 + 1;
            if ((unint64_t)(v142 + 1) >> 60)
              goto LABEL_808;
            v144 = (char *)v492[0] - (char *)v491[0];
            if (((char *)v492[0] - (char *)v491[0]) >> 3 > v143)
              v143 = v144 >> 3;
            if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF0)
              v145 = 0xFFFFFFFFFFFFFFFLL;
            else
              v145 = v143;
            if (v145)
            {
              if (v145 >> 60)
                goto LABEL_809;
              v146 = (char *)operator new(16 * v145);
            }
            else
            {
              v146 = 0;
            }
            v147 = &v146[16 * v142];
            *(_QWORD *)v147 = v136;
            *((_QWORD *)v147 + 1) = v138;
            v148 = v147;
            if (v139 != v141)
            {
              do
              {
                *((_OWORD *)v148 - 1) = *((_OWORD *)v139 - 1);
                v148 -= 16;
                v139 -= 2;
              }
              while (v139 != v141);
              v139 = v491[0];
            }
            v140 = v147 + 16;
            v491[0] = v148;
            v491[1] = v147 + 16;
            v492[0] = &v146[16 * v145];
            if (v139)
              operator delete(v139);
          }
          else
          {
            *(_QWORD *)v491[1] = v136;
            v139[1] = v138;
            v140 = v139 + 2;
          }
          v491[1] = v140;
        }
        v125 += 10;
      }
      v149 = v482;
      if (v482 != (uint64_t *)&v483)
      {
        do
        {
          if (*((_DWORD *)v149 + 10) == (_DWORD)v481)
          {
            v150 = v149[4];
            switch(*(_BYTE *)(v150 + 72))
            {
              case 0:
                if ((*(_BYTE *)(v150 + 73) & 2) != 0)
                {
                  v174 = *(const void **)v150;
                  v173 = *(_QWORD *)(v150 + 8);
                  v175 = (_QWORD *)v499;
                  if ((unint64_t)v499 >= *((_QWORD *)&v499 + 1))
                  {
                    v200 = (_QWORD *)*((_QWORD *)&v498 + 1);
                    v201 = (uint64_t)(v499 - *((_QWORD *)&v498 + 1)) >> 4;
                    v202 = v201 + 1;
                    if ((unint64_t)(v201 + 1) >> 60)
                      goto LABEL_808;
                    v203 = *((_QWORD *)&v499 + 1) - *((_QWORD *)&v498 + 1);
                    if ((uint64_t)(*((_QWORD *)&v499 + 1) - *((_QWORD *)&v498 + 1)) >> 3 > v202)
                      v202 = v203 >> 3;
                    if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFF0)
                      v204 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v204 = v202;
                    if (v204)
                    {
                      if (v204 >> 60)
                        goto LABEL_809;
                      v205 = (char *)operator new(16 * v204);
                    }
                    else
                    {
                      v205 = 0;
                    }
                    v266 = &v205[16 * v201];
                    *(_QWORD *)v266 = v174;
                    *((_QWORD *)v266 + 1) = v173;
                    v267 = v266;
                    if (v175 != v200)
                    {
                      do
                      {
                        *((_OWORD *)v267 - 1) = *((_OWORD *)v175 - 1);
                        v267 -= 16;
                        v175 -= 2;
                      }
                      while (v175 != v200);
                      v175 = (_QWORD *)*((_QWORD *)&v498 + 1);
                    }
                    v176 = v266 + 16;
                    *((_QWORD *)&v498 + 1) = v267;
                    *(_QWORD *)&v499 = v266 + 16;
                    *((_QWORD *)&v499 + 1) = &v205[16 * v204];
                    if (v175)
                      operator delete(v175);
                  }
                  else
                  {
                    *(_QWORD *)v499 = v174;
                    v175[1] = v173;
                    v176 = v175 + 2;
                  }
                  *(_QWORD *)&v499 = v176;
                }
                else
                {
                  v152 = *(const void **)v150;
                  v151 = *(_QWORD *)(v150 + 8);
                  if ((*(_BYTE *)(v150 + 73) & 1) != 0)
                  {
                    v192 = (_QWORD *)*((_QWORD *)&v500 + 1);
                    if (*((_QWORD *)&v500 + 1) >= (unint64_t)v501)
                    {
                      v254 = (_QWORD *)v500;
                      v255 = (uint64_t)(*((_QWORD *)&v500 + 1) - v500) >> 4;
                      v256 = v255 + 1;
                      if ((unint64_t)(v255 + 1) >> 60)
                        goto LABEL_808;
                      v257 = (uint64_t)&v501[-v500];
                      if ((uint64_t)&v501[-v500] >> 3 > v256)
                        v256 = v257 >> 3;
                      if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF0)
                        v258 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v258 = v256;
                      if (v258)
                      {
                        if (v258 >> 60)
                          goto LABEL_809;
                        v259 = (char *)operator new(16 * v258);
                      }
                      else
                      {
                        v259 = 0;
                      }
                      v276 = &v259[16 * v255];
                      *(_QWORD *)v276 = v152;
                      *((_QWORD *)v276 + 1) = v151;
                      v277 = v276;
                      if (v192 != v254)
                      {
                        do
                        {
                          *((_OWORD *)v277 - 1) = *((_OWORD *)v192 - 1);
                          v277 -= 16;
                          v192 -= 2;
                        }
                        while (v192 != v254);
                        v192 = (_QWORD *)v500;
                      }
                      v193 = v276 + 16;
                      *(_QWORD *)&v500 = v277;
                      *((_QWORD *)&v500 + 1) = v276 + 16;
                      v501 = &v259[16 * v258];
                      if (v192)
                        operator delete(v192);
                    }
                    else
                    {
                      **((_QWORD **)&v500 + 1) = v152;
                      v192[1] = v151;
                      v193 = v192 + 2;
                    }
                    *((_QWORD *)&v500 + 1) = v193;
                  }
                  else
                  {
                    v153 = (_QWORD *)v493;
                    if ((unint64_t)v493 >= *((_QWORD *)&v493 + 1))
                    {
                      v248 = v492[1];
                      v249 = (uint64_t)(v493 - (unint64_t)v492[1]) >> 4;
                      v250 = v249 + 1;
                      if ((unint64_t)(v249 + 1) >> 60)
                        goto LABEL_808;
                      v251 = *((_QWORD *)&v493 + 1) - (unint64_t)v492[1];
                      if ((uint64_t)(*((_QWORD *)&v493 + 1) - (unint64_t)v492[1]) >> 3 > v250)
                        v250 = v251 >> 3;
                      if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFF0)
                        v252 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v252 = v250;
                      if (v252)
                      {
                        if (v252 >> 60)
                          goto LABEL_809;
                        v253 = (char *)operator new(16 * v252);
                      }
                      else
                      {
                        v253 = 0;
                      }
                      v274 = &v253[16 * v249];
                      *(_QWORD *)v274 = v152;
                      *((_QWORD *)v274 + 1) = v151;
                      v275 = v274;
                      if (v153 != v248)
                      {
                        do
                        {
                          *((_OWORD *)v275 - 1) = *((_OWORD *)v153 - 1);
                          v275 -= 16;
                          v153 -= 2;
                        }
                        while (v153 != v248);
                        v153 = v492[1];
                      }
                      v154 = v274 + 16;
                      v492[1] = v275;
                      *(_QWORD *)&v493 = v274 + 16;
                      *((_QWORD *)&v493 + 1) = &v253[16 * v252];
                      if (v153)
                        operator delete(v153);
                    }
                    else
                    {
                      *(_QWORD *)v493 = v152;
                      v153[1] = v151;
                      v154 = v153 + 2;
                    }
                    *(_QWORD *)&v493 = v154;
                  }
                }
                break;
              case 1:
                if (*(_DWORD *)(*v480 + 176) == 4)
                {
                  v164 = *(const void **)v150;
                  v163 = *(_QWORD *)(v150 + 8);
                  v165 = (_QWORD *)*((_QWORD *)&v494 + 1);
                  if (*((_QWORD *)&v494 + 1) >= (unint64_t)v495)
                  {
                    v194 = (_QWORD *)v494;
                    v195 = (uint64_t)(*((_QWORD *)&v494 + 1) - v494) >> 4;
                    v196 = v195 + 1;
                    if ((unint64_t)(v195 + 1) >> 60)
                      goto LABEL_808;
                    v197 = v495 - v494;
                    if ((uint64_t)(v495 - v494) >> 3 > v196)
                      v196 = v197 >> 3;
                    if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF0)
                      v198 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v198 = v196;
                    if (v198)
                    {
                      if (v198 >> 60)
                        goto LABEL_809;
                      v199 = (char *)operator new(16 * v198);
                    }
                    else
                    {
                      v199 = 0;
                    }
                    v264 = &v199[16 * v195];
                    *(_QWORD *)v264 = v164;
                    *((_QWORD *)v264 + 1) = v163;
                    v265 = v264;
                    if (v165 != v194)
                    {
                      do
                      {
                        *((_OWORD *)v265 - 1) = *((_OWORD *)v165 - 1);
                        v265 -= 16;
                        v165 -= 2;
                      }
                      while (v165 != v194);
                      v165 = (_QWORD *)v494;
                    }
                    v166 = v264 + 16;
                    *(_QWORD *)&v494 = v265;
                    *((_QWORD *)&v494 + 1) = v264 + 16;
                    *(_QWORD *)&v495 = &v199[16 * v198];
                    if (v165)
                      operator delete(v165);
                  }
                  else
                  {
                    **((_QWORD **)&v494 + 1) = v164;
                    v165[1] = v163;
                    v166 = v165 + 2;
                  }
                  *((_QWORD *)&v494 + 1) = v166;
                  break;
                }
                v177 = *(const void **)v150;
                if (!*(_QWORD *)v150)
                {
                  __dst = 0uLL;
                  *(_QWORD *)&v503 = 0;
                  goto LABEL_332;
                }
                v178 = *(_QWORD *)(v150 + 8);
                if (v178 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_808;
                if (v178 >= 0x17)
                {
                  v234 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v178 | 7) != 0x17)
                    v234 = v178 | 7;
                  v235 = v234 + 1;
                  p_dst = (__int128 *)operator new(v234 + 1);
                  *((_QWORD *)&__dst + 1) = v178;
                  *(_QWORD *)&v503 = v235 | 0x8000000000000000;
                  *(_QWORD *)&__dst = p_dst;
                }
                else
                {
                  BYTE7(v503) = *(_QWORD *)(v150 + 8);
                  p_dst = &__dst;
                  if (!v178)
                    goto LABEL_331;
                }
                memmove(p_dst, v177, v178);
LABEL_331:
                *((_BYTE *)p_dst + v178) = 0;
LABEL_332:
                v236 = std::string::insert((std::string *)&__dst, 0, "_");
                *(_QWORD *)&v507 = *((_QWORD *)&v236->__r_.__value_.__l + 2);
                v506 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
                v236->__r_.__value_.__l.__size_ = 0;
                v236->__r_.__value_.__r.__words[2] = 0;
                v236->__r_.__value_.__r.__words[0] = 0;
                if ((SBYTE7(v507) & 0x80u) == 0)
                  v237 = BYTE7(v507) & 0x7F;
                else
                  v237 = *((_QWORD *)&v506 + 1);
                if (v237)
                {
                  if ((SBYTE7(v507) & 0x80u) == 0)
                    v238 = &v506;
                  else
                    v238 = (__int128 *)v506;
                  v239 = (void *)sub_1C484358C(a1, v237, 0);
                  memcpy(v239, v238, v237);
                }
                else
                {
                  v239 = 0;
                }
                v240 = (_QWORD *)*((_QWORD *)&v494 + 1);
                if (*((_QWORD *)&v494 + 1) >= (unint64_t)v495)
                {
                  v242 = (_QWORD *)v494;
                  v243 = (uint64_t)(*((_QWORD *)&v494 + 1) - v494) >> 4;
                  v244 = v243 + 1;
                  if ((unint64_t)(v243 + 1) >> 60)
                    goto LABEL_808;
                  v245 = v495 - v494;
                  if ((uint64_t)(v495 - v494) >> 3 > v244)
                    v244 = v245 >> 3;
                  if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF0)
                    v246 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v246 = v244;
                  if (v246)
                  {
                    if (v246 >> 60)
                      goto LABEL_809;
                    v247 = (char *)operator new(16 * v246);
                  }
                  else
                  {
                    v247 = 0;
                  }
                  v272 = &v247[16 * v243];
                  *(_QWORD *)v272 = v239;
                  *((_QWORD *)v272 + 1) = v237;
                  v273 = v272;
                  if (v240 != v242)
                  {
                    do
                    {
                      *((_OWORD *)v273 - 1) = *((_OWORD *)v240 - 1);
                      v273 -= 16;
                      v240 -= 2;
                    }
                    while (v240 != v242);
                    v240 = (_QWORD *)v494;
                  }
                  v241 = v272 + 16;
                  *(_QWORD *)&v494 = v273;
                  *((_QWORD *)&v494 + 1) = v272 + 16;
                  *(_QWORD *)&v495 = &v247[16 * v246];
                  if (v240)
                    operator delete(v240);
                }
                else
                {
                  **((_QWORD **)&v494 + 1) = v239;
                  v240[1] = v237;
                  v241 = v240 + 2;
                }
                *((_QWORD *)&v494 + 1) = v241;
LABEL_419:
                if (SBYTE7(v507) < 0)
                  operator delete((void *)v506);
                if (SBYTE7(v503) < 0)
                  operator delete((void *)__dst);
                break;
              case 2:
                if (*(_DWORD *)(*v480 + 176) == 4)
                {
                  v156 = *(const void **)v150;
                  v155 = *(_QWORD *)(v150 + 8);
                  v157 = (_QWORD *)v496;
                  if ((unint64_t)v496 >= *((_QWORD *)&v496 + 1))
                  {
                    v180 = (_QWORD *)*((_QWORD *)&v495 + 1);
                    v181 = (uint64_t)(v496 - *((_QWORD *)&v495 + 1)) >> 4;
                    v182 = v181 + 1;
                    if ((unint64_t)(v181 + 1) >> 60)
                      goto LABEL_808;
                    v183 = *((_QWORD *)&v496 + 1) - *((_QWORD *)&v495 + 1);
                    if ((uint64_t)(*((_QWORD *)&v496 + 1) - *((_QWORD *)&v495 + 1)) >> 3 > v182)
                      v182 = v183 >> 3;
                    if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF0)
                      v184 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v184 = v182;
                    if (v184)
                    {
                      if (v184 >> 60)
                        goto LABEL_809;
                      v185 = (char *)operator new(16 * v184);
                    }
                    else
                    {
                      v185 = 0;
                    }
                    v260 = &v185[16 * v181];
                    *(_QWORD *)v260 = v156;
                    *((_QWORD *)v260 + 1) = v155;
                    v261 = v260;
                    if (v157 != v180)
                    {
                      do
                      {
                        *((_OWORD *)v261 - 1) = *((_OWORD *)v157 - 1);
                        v261 -= 16;
                        v157 -= 2;
                      }
                      while (v157 != v180);
                      v157 = (_QWORD *)*((_QWORD *)&v495 + 1);
                    }
                    v158 = v260 + 16;
                    *((_QWORD *)&v495 + 1) = v261;
                    *(_QWORD *)&v496 = v260 + 16;
                    *((_QWORD *)&v496 + 1) = &v185[16 * v184];
                    if (v157)
                      operator delete(v157);
                  }
                  else
                  {
                    *(_QWORD *)v496 = v156;
                    v157[1] = v155;
                    v158 = v157 + 2;
                  }
                  *(_QWORD *)&v496 = v158;
                  break;
                }
                v167 = *(const void **)v150;
                if (!*(_QWORD *)v150)
                {
                  __dst = 0uLL;
                  *(_QWORD *)&v503 = 0;
                  goto LABEL_282;
                }
                v168 = *(_QWORD *)(v150 + 8);
                if (v168 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_808;
                if (v168 >= 0x17)
                {
                  v206 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v168 | 7) != 0x17)
                    v206 = v168 | 7;
                  v207 = v206 + 1;
                  v169 = (__int128 *)operator new(v206 + 1);
                  *((_QWORD *)&__dst + 1) = v168;
                  *(_QWORD *)&v503 = v207 | 0x8000000000000000;
                  *(_QWORD *)&__dst = v169;
                }
                else
                {
                  BYTE7(v503) = *(_QWORD *)(v150 + 8);
                  v169 = &__dst;
                  if (!v168)
                    goto LABEL_281;
                }
                memmove(v169, v167, v168);
LABEL_281:
                *((_BYTE *)v169 + v168) = 0;
LABEL_282:
                v208 = std::string::insert((std::string *)&__dst, 0, "_OBJC_EHTYPE_$_");
                *(_QWORD *)&v507 = *((_QWORD *)&v208->__r_.__value_.__l + 2);
                v506 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
                v208->__r_.__value_.__l.__size_ = 0;
                v208->__r_.__value_.__r.__words[2] = 0;
                v208->__r_.__value_.__r.__words[0] = 0;
                if ((SBYTE7(v507) & 0x80u) == 0)
                  v209 = BYTE7(v507) & 0x7F;
                else
                  v209 = *((_QWORD *)&v506 + 1);
                if (v209)
                {
                  if ((SBYTE7(v507) & 0x80u) == 0)
                    v210 = &v506;
                  else
                    v210 = (__int128 *)v506;
                  v211 = (void *)sub_1C484358C(a1, v209, 0);
                  memcpy(v211, v210, v209);
                }
                else
                {
                  v211 = 0;
                }
                v212 = (_QWORD *)v493;
                if ((unint64_t)v493 >= *((_QWORD *)&v493 + 1))
                {
                  v214 = v492[1];
                  v215 = (uint64_t)(v493 - (unint64_t)v492[1]) >> 4;
                  v216 = v215 + 1;
                  if ((unint64_t)(v215 + 1) >> 60)
                    goto LABEL_808;
                  v217 = *((_QWORD *)&v493 + 1) - (unint64_t)v492[1];
                  if ((uint64_t)(*((_QWORD *)&v493 + 1) - (unint64_t)v492[1]) >> 3 > v216)
                    v216 = v217 >> 3;
                  if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF0)
                    v218 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v218 = v216;
                  if (v218)
                  {
                    if (v218 >> 60)
                      goto LABEL_809;
                    v219 = (char *)operator new(16 * v218);
                  }
                  else
                  {
                    v219 = 0;
                  }
                  v268 = &v219[16 * v215];
                  *(_QWORD *)v268 = v211;
                  *((_QWORD *)v268 + 1) = v209;
                  v269 = v268;
                  if (v212 != v214)
                  {
                    do
                    {
                      *((_OWORD *)v269 - 1) = *((_OWORD *)v212 - 1);
                      v269 -= 16;
                      v212 -= 2;
                    }
                    while (v212 != v214);
                    v212 = v492[1];
                  }
                  v213 = v268 + 16;
                  v492[1] = v269;
                  *(_QWORD *)&v493 = v268 + 16;
                  *((_QWORD *)&v493 + 1) = &v219[16 * v218];
                  if (v212)
                    operator delete(v212);
                }
                else
                {
                  *(_QWORD *)v493 = v211;
                  v212[1] = v209;
                  v213 = v212 + 2;
                }
                *(_QWORD *)&v493 = v213;
                goto LABEL_419;
              case 3:
                if (*(_DWORD *)(*v480 + 176) == 4)
                {
                  v160 = *(const void **)v150;
                  v159 = *(_QWORD *)(v150 + 8);
                  v161 = (_QWORD *)*((_QWORD *)&v497 + 1);
                  if (*((_QWORD *)&v497 + 1) >= (unint64_t)v498)
                  {
                    v186 = (_QWORD *)v497;
                    v187 = (uint64_t)(*((_QWORD *)&v497 + 1) - v497) >> 4;
                    v188 = v187 + 1;
                    if ((unint64_t)(v187 + 1) >> 60)
                      goto LABEL_808;
                    v189 = v498 - v497;
                    if ((uint64_t)(v498 - v497) >> 3 > v188)
                      v188 = v189 >> 3;
                    if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF0)
                      v190 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v190 = v188;
                    if (v190)
                    {
                      if (v190 >> 60)
                        goto LABEL_809;
                      v191 = (char *)operator new(16 * v190);
                    }
                    else
                    {
                      v191 = 0;
                    }
                    v262 = &v191[16 * v187];
                    *(_QWORD *)v262 = v160;
                    *((_QWORD *)v262 + 1) = v159;
                    v263 = v262;
                    if (v161 != v186)
                    {
                      do
                      {
                        *((_OWORD *)v263 - 1) = *((_OWORD *)v161 - 1);
                        v263 -= 16;
                        v161 -= 2;
                      }
                      while (v161 != v186);
                      v161 = (_QWORD *)v497;
                    }
                    v162 = v262 + 16;
                    *(_QWORD *)&v497 = v263;
                    *((_QWORD *)&v497 + 1) = v262 + 16;
                    *(_QWORD *)&v498 = &v191[16 * v190];
                    if (v161)
                      operator delete(v161);
                  }
                  else
                  {
                    **((_QWORD **)&v497 + 1) = v160;
                    v161[1] = v159;
                    v162 = v161 + 2;
                  }
                  *((_QWORD *)&v497 + 1) = v162;
                  break;
                }
                v170 = *(const void **)v150;
                if (!*(_QWORD *)v150)
                {
                  __dst = 0uLL;
                  *(_QWORD *)&v503 = 0;
                  goto LABEL_307;
                }
                v171 = *(_QWORD *)(v150 + 8);
                if (v171 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_808;
                if (v171 >= 0x17)
                {
                  v220 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v171 | 7) != 0x17)
                    v220 = v171 | 7;
                  v221 = v220 + 1;
                  v172 = (__int128 *)operator new(v220 + 1);
                  *((_QWORD *)&__dst + 1) = v171;
                  *(_QWORD *)&v503 = v221 | 0x8000000000000000;
                  *(_QWORD *)&__dst = v172;
                }
                else
                {
                  BYTE7(v503) = *(_QWORD *)(v150 + 8);
                  v172 = &__dst;
                  if (!v171)
                    goto LABEL_306;
                }
                memmove(v172, v170, v171);
LABEL_306:
                *((_BYTE *)v172 + v171) = 0;
LABEL_307:
                v222 = std::string::insert((std::string *)&__dst, 0, "_");
                *(_QWORD *)&v507 = *((_QWORD *)&v222->__r_.__value_.__l + 2);
                v506 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
                v222->__r_.__value_.__l.__size_ = 0;
                v222->__r_.__value_.__r.__words[2] = 0;
                v222->__r_.__value_.__r.__words[0] = 0;
                if ((SBYTE7(v507) & 0x80u) == 0)
                  v223 = BYTE7(v507) & 0x7F;
                else
                  v223 = *((_QWORD *)&v506 + 1);
                if (v223)
                {
                  if ((SBYTE7(v507) & 0x80u) == 0)
                    v224 = &v506;
                  else
                    v224 = (__int128 *)v506;
                  v225 = (void *)sub_1C484358C(a1, v223, 0);
                  memcpy(v225, v224, v223);
                }
                else
                {
                  v225 = 0;
                }
                v226 = (_QWORD *)*((_QWORD *)&v497 + 1);
                if (*((_QWORD *)&v497 + 1) >= (unint64_t)v498)
                {
                  v228 = (_QWORD *)v497;
                  v229 = (uint64_t)(*((_QWORD *)&v497 + 1) - v497) >> 4;
                  v230 = v229 + 1;
                  if ((unint64_t)(v229 + 1) >> 60)
                    goto LABEL_808;
                  v231 = v498 - v497;
                  if ((uint64_t)(v498 - v497) >> 3 > v230)
                    v230 = v231 >> 3;
                  if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFF0)
                    v232 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v232 = v230;
                  if (v232)
                  {
                    if (v232 >> 60)
                      goto LABEL_809;
                    v233 = (char *)operator new(16 * v232);
                  }
                  else
                  {
                    v233 = 0;
                  }
                  v270 = &v233[16 * v229];
                  *(_QWORD *)v270 = v225;
                  *((_QWORD *)v270 + 1) = v223;
                  v271 = v270;
                  if (v226 != v228)
                  {
                    do
                    {
                      *((_OWORD *)v271 - 1) = *((_OWORD *)v226 - 1);
                      v271 -= 16;
                      v226 -= 2;
                    }
                    while (v226 != v228);
                    v226 = (_QWORD *)v497;
                  }
                  v227 = v270 + 16;
                  *(_QWORD *)&v497 = v271;
                  *((_QWORD *)&v497 + 1) = v270 + 16;
                  *(_QWORD *)&v498 = &v233[16 * v232];
                  if (v226)
                    operator delete(v226);
                }
                else
                {
                  **((_QWORD **)&v497 + 1) = v225;
                  v226[1] = v223;
                  v227 = v226 + 2;
                }
                *((_QWORD *)&v497 + 1) = v227;
                goto LABEL_419;
              default:
                break;
            }
          }
          v278 = (uint64_t *)v149[1];
          if (v278)
          {
            do
            {
              v279 = v278;
              v278 = (uint64_t *)*v278;
            }
            while (v278);
          }
          else
          {
            do
            {
              v279 = (uint64_t *)v149[2];
              v280 = *v279 == (_QWORD)v149;
              v149 = v279;
            }
            while (!v280);
          }
          v149 = v279;
        }
        while (v279 != (uint64_t *)&v483);
      }
      v281 = 126 - 2 * __clz((uint64_t)(v493 - (unint64_t)v492[1]) >> 4);
      v282 = (void *)v493 == v492[1] ? 0 : v281;
      sub_1C5E9710C((uint64_t)v492[1], (const void **)v493, v282, 1);
      v283 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v494 + 1) - v494) >> 4);
      v284 = *((_QWORD *)&v494 + 1) == (_QWORD)v494 ? 0 : v283;
      sub_1C5E9710C(v494, *((const void ***)&v494 + 1), v284, 1);
      v285 = 126 - 2 * __clz((uint64_t)(v496 - *((_QWORD *)&v495 + 1)) >> 4);
      v286 = (_QWORD)v496 == *((_QWORD *)&v495 + 1) ? 0 : v285;
      sub_1C5E9710C(*((uint64_t *)&v495 + 1), (const void **)v496, v286, 1);
      v287 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v497 + 1) - v497) >> 4);
      v288 = *((_QWORD *)&v497 + 1) == (_QWORD)v497 ? 0 : v287;
      sub_1C5E9710C(v497, *((const void ***)&v497 + 1), v288, 1);
      v289 = 126 - 2 * __clz((uint64_t)(v499 - *((_QWORD *)&v498 + 1)) >> 4);
      v290 = (_QWORD)v499 == *((_QWORD *)&v498 + 1) ? 0 : v289;
      sub_1C5E9710C(*((uint64_t *)&v498 + 1), (const void **)v499, v290, 1);
      v291 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v500 + 1) - v500) >> 4);
      v292 = *((_QWORD *)&v500 + 1) == (_QWORD)v500 ? 0 : v291;
      sub_1C5E9710C(v500, *((const void ***)&v500 + 1), v292, 1);
      v294 = *(char **)(a1 + 264);
      v293 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v294 >= v293)
        break;
      sub_1C5E9BBB4(*(_QWORD **)(a1 + 264), (uint64_t)__p);
      v295 = v294 + 216;
LABEL_479:
      *(_QWORD *)(a1 + 264) = v295;
      sub_1C5E9BA84((uint64_t)__p);
      v304 = (_QWORD **)v478;
      v305 = *(_QWORD **)(v478 + 8);
      if (v305)
      {
        do
        {
          v306 = (_QWORD **)v305;
          v305 = (_QWORD *)*v305;
        }
        while (v305);
      }
      else
      {
        do
        {
          v306 = (_QWORD **)v304[2];
          v280 = *v306 == v304;
          v304 = v306;
        }
        while (!v280);
      }
      v97 = (uint64_t)v306;
      if (v306 == &v486)
        goto LABEL_127;
    }
    v296 = *(_BYTE **)(a1 + 256);
    v297 = 0x84BDA12F684BDA13 * ((v294 - v296) >> 3) + 1;
    if (v297 > 0x12F684BDA12F684)
      goto LABEL_808;
    v298 = 0x84BDA12F684BDA13 * ((uint64_t)(v293 - (_QWORD)v296) >> 3);
    if (2 * v298 > v297)
      v297 = 2 * v298;
    if (v298 >= 0x97B425ED097B42)
      v299 = 0x12F684BDA12F684;
    else
      v299 = v297;
    if (v299)
    {
      if (v299 > 0x12F684BDA12F684)
LABEL_809:
        sub_1C4764EE4();
      v300 = (char *)operator new(216 * v299);
    }
    else
    {
      v300 = 0;
    }
    v301 = &v300[8 * ((v294 - v296) >> 3)];
    v302 = &v300[216 * v299];
    sub_1C5E9BBB4(v301, (uint64_t)__p);
    v295 = v301 + 216;
    if (v294 == v296)
    {
      *(_QWORD *)(a1 + 256) = v301;
      *(_QWORD *)(a1 + 264) = v295;
      *(_QWORD *)(a1 + 272) = v302;
    }
    else
    {
      do
      {
        v301 -= 216;
        v294 -= 216;
        sub_1C5E9BBB4(v301, (uint64_t)v294);
      }
      while (v294 != v296);
      v294 = *(char **)(a1 + 256);
      v303 = *(_QWORD *)(a1 + 264);
      *(_QWORD *)(a1 + 256) = v301;
      *(_QWORD *)(a1 + 264) = v295;
      *(_QWORD *)(a1 + 272) = v302;
      if ((char *)v303 != v294)
      {
        do
          v303 = sub_1C5E9BA84(v303 - 216);
        while ((char *)v303 != v294);
        if (!v294)
          goto LABEL_479;
LABEL_478:
        operator delete(v294);
        goto LABEL_479;
      }
    }
    if (!v294)
      goto LABEL_479;
    goto LABEL_478;
  }
LABEL_127:
  sub_1C6143384(v486);
  v486 = 0;
  v487 = 0;
  v485 = &v486;
  sub_1C6143384(v483);
  v483 = 0;
  v484 = 0;
  v482 = (uint64_t *)&v483;
  sub_1C5E96B48((uint64_t)__p, *v480);
  v506 = *(_OWORD *)__p;
  v507 = *(_OWORD *)v489;
  v98 = v508;
  if (v491[1])
  {
    if (v491[1] == &v490)
    {
      v509 = v508;
      (*(void (**)(void))(*(_QWORD *)v491[1] + 24))();
    }
    else
    {
      v509 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v491[1] + 16))();
    }
  }
  else
  {
    v509 = 0;
  }
  __dst = *(_OWORD *)v492;
  v503 = v493;
  v307 = v504;
  if (*((_QWORD *)&v495 + 1))
  {
    if (*((__int128 **)&v495 + 1) == &v494)
    {
      v505 = v504;
      (*(void (**)(void))(**((_QWORD **)&v495 + 1) + 24))();
    }
    else
    {
      v505 = (_BYTE *)(*(uint64_t (**)(void))(**((_QWORD **)&v495 + 1) + 16))();
    }
  }
  else
  {
    v505 = 0;
  }
  for (j = v506; (_QWORD)v506 != (_QWORD)__dst; j = v506)
  {
    v309 = *(_QWORD *)(j + 24);
    v481 = (uint64_t *)v309;
    v310 = *(unsigned int *)(v309 + 24);
    if ((_DWORD)v310)
    {
      v311 = 0;
      v312 = *(unsigned __int8 **)(v309 + 16);
      v313 = 8 * v310;
      do
      {
        v314 = *v312;
        v312 += 8;
        v315 = 1 << v314;
        if (v314 == 118)
          v316 = 0;
        else
          v316 = v315;
        v311 |= v316;
        v313 -= 8;
      }
      while (v313);
    }
    else
    {
      v311 = 0;
    }
    *((_DWORD *)sub_1C5031104(&v482, v309, &v481) + 10) = v311;
    sub_1C5244698((uint64_t *)&v485, v311, v311);
    sub_1C63A19E0((uint64_t *)&v506);
  }
  if (v505 == v504)
  {
    v317 = 4;
    v318 = a1;
  }
  else
  {
    v318 = a1;
    if (!v505)
      goto LABEL_511;
    v317 = 5;
    v307 = v505;
  }
  (*(void (**)(_QWORD *))(*v307 + 8 * v317))(v307);
LABEL_511:
  if (v509 == v508)
  {
    v319 = 4;
  }
  else
  {
    if (!v509)
      goto LABEL_516;
    v319 = 5;
    v98 = v509;
  }
  (*(void (**)(_QWORD *))(*v98 + 8 * v319))(v98);
LABEL_516:
  sub_1C63A20DC(__p);
  v320 = (uint64_t)v485;
  if (v485 != &v486)
  {
    while (1)
    {
      LODWORD(v481) = *(_DWORD *)(v320 + 28);
      v495 = 0u;
      v496 = 0u;
      v493 = 0u;
      v494 = 0u;
      *(_OWORD *)v491 = 0u;
      *(_OWORD *)v492 = 0u;
      *(_OWORD *)v489 = 0u;
      v490 = 0u;
      *(_OWORD *)__p = 0u;
      llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>((unsigned int *)&v481, &v506);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v506;
      v489[0] = (void *)v507;
      v322 = v482;
      if (v482 != (uint64_t *)&v483)
      {
        do
        {
          if (*((_DWORD *)v322 + 10) == (_DWORD)v481)
          {
            v323 = v322[4];
            switch(*(_BYTE *)(v323 + 72))
            {
              case 0:
                v325 = *(const void **)v323;
                v324 = *(_QWORD *)(v323 + 8);
                if ((*(_BYTE *)(v323 + 73) & 4) != 0)
                {
                  v346 = (_QWORD *)v496;
                  if ((unint64_t)v496 >= *((_QWORD *)&v496 + 1))
                  {
                    v375 = (_QWORD *)*((_QWORD *)&v495 + 1);
                    v376 = (uint64_t)(v496 - *((_QWORD *)&v495 + 1)) >> 4;
                    v377 = v376 + 1;
                    if ((unint64_t)(v376 + 1) >> 60)
                      goto LABEL_808;
                    v378 = *((_QWORD *)&v496 + 1) - *((_QWORD *)&v495 + 1);
                    if ((uint64_t)(*((_QWORD *)&v496 + 1) - *((_QWORD *)&v495 + 1)) >> 3 > v377)
                      v377 = v378 >> 3;
                    if ((unint64_t)v378 >= 0x7FFFFFFFFFFFFFF0)
                      v379 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v379 = v377;
                    if (v379)
                    {
                      if (v379 >> 60)
                        goto LABEL_809;
                      v380 = (char *)operator new(16 * v379);
                    }
                    else
                    {
                      v380 = 0;
                    }
                    v434 = &v380[16 * v376];
                    *(_QWORD *)v434 = v325;
                    *((_QWORD *)v434 + 1) = v324;
                    v435 = v434;
                    if (v346 != v375)
                    {
                      do
                      {
                        *((_OWORD *)v435 - 1) = *((_OWORD *)v346 - 1);
                        v435 -= 16;
                        v346 -= 2;
                      }
                      while (v346 != v375);
                      v346 = (_QWORD *)*((_QWORD *)&v495 + 1);
                    }
                    v443 = &v380[16 * v379];
                    v347 = v434 + 16;
                    *((_QWORD *)&v495 + 1) = v435;
                    *(_QWORD *)&v496 = v434 + 16;
                    *((_QWORD *)&v496 + 1) = v443;
                    if (v346)
                      operator delete(v346);
                  }
                  else
                  {
                    *(_QWORD *)v496 = v325;
                    v346[1] = v324;
                    v347 = v346 + 2;
                  }
                  *(_QWORD *)&v496 = v347;
                }
                else
                {
                  v326 = (_QWORD *)v490;
                  if ((unint64_t)v490 >= *((_QWORD *)&v490 + 1))
                  {
                    v363 = v489[1];
                    v364 = (uint64_t)(v490 - (unint64_t)v489[1]) >> 4;
                    v365 = v364 + 1;
                    if ((unint64_t)(v364 + 1) >> 60)
                      goto LABEL_808;
                    v366 = *((_QWORD *)&v490 + 1) - (unint64_t)v489[1];
                    if ((uint64_t)(*((_QWORD *)&v490 + 1) - (unint64_t)v489[1]) >> 3 > v365)
                      v365 = v366 >> 3;
                    if ((unint64_t)v366 >= 0x7FFFFFFFFFFFFFF0)
                      v367 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v367 = v365;
                    if (v367)
                    {
                      if (v367 >> 60)
                        goto LABEL_809;
                      v368 = (char *)operator new(16 * v367);
                    }
                    else
                    {
                      v368 = 0;
                    }
                    v429 = &v368[16 * v364];
                    *(_QWORD *)v429 = v325;
                    *((_QWORD *)v429 + 1) = v324;
                    v430 = v429;
                    if (v326 != v363)
                    {
                      do
                      {
                        *((_OWORD *)v430 - 1) = *((_OWORD *)v326 - 1);
                        v430 -= 16;
                        v326 -= 2;
                      }
                      while (v326 != v363);
                      v326 = v489[1];
                    }
                    v442 = &v368[16 * v367];
                    v327 = v429 + 16;
                    v489[1] = v430;
                    *(_QWORD *)&v490 = v429 + 16;
                    *((_QWORD *)&v490 + 1) = v442;
                    if (v326)
                      operator delete(v326);
                  }
                  else
                  {
                    *(_QWORD *)v490 = v325;
                    v326[1] = v324;
                    v327 = v326 + 2;
                  }
                  *(_QWORD *)&v490 = v327;
                }
                break;
              case 1:
                if (*(_DWORD *)(*v480 + 176) == 4)
                {
                  v336 = *(const void **)v323;
                  v337 = *(_QWORD *)(v323 + 8);
                  v338 = v491[1];
                  if (v491[1] >= v492[0])
                  {
                    v369 = v491[0];
                    v370 = ((char *)v491[1] - (char *)v491[0]) >> 4;
                    v371 = v370 + 1;
                    if ((unint64_t)(v370 + 1) >> 60)
                      goto LABEL_808;
                    v372 = (char *)v492[0] - (char *)v491[0];
                    if (((char *)v492[0] - (char *)v491[0]) >> 3 > v371)
                      v371 = v372 >> 3;
                    if ((unint64_t)v372 >= 0x7FFFFFFFFFFFFFF0)
                      v373 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v373 = v371;
                    if (v373)
                    {
                      if (v373 >> 60)
                        goto LABEL_809;
                      v374 = (char *)operator new(16 * v373);
                    }
                    else
                    {
                      v374 = 0;
                    }
                    v431 = &v374[16 * v370];
                    *(_QWORD *)v431 = v336;
                    *((_QWORD *)v431 + 1) = v337;
                    v432 = v431;
                    if (v338 != v369)
                    {
                      do
                      {
                        *((_OWORD *)v432 - 1) = *((_OWORD *)v338 - 1);
                        v432 -= 16;
                        v338 -= 2;
                      }
                      while (v338 != v369);
                      v338 = v491[0];
                    }
                    v433 = &v374[16 * v373];
                    v339 = v431 + 16;
                    v491[0] = v432;
                    v491[1] = v431 + 16;
                    v492[0] = v433;
                    if (v338)
                      operator delete(v338);
                  }
                  else
                  {
                    *(_QWORD *)v491[1] = v336;
                    v338[1] = v337;
                    v339 = v338 + 2;
                  }
                  v491[1] = v339;
                  break;
                }
                v348 = *(const void **)v323;
                if (!*(_QWORD *)v323)
                {
                  __dst = 0uLL;
                  *(_QWORD *)&v503 = 0;
                  goto LABEL_655;
                }
                v349 = *(_QWORD *)(v323 + 8);
                if (v349 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_808;
                if (v349 >= 0x17)
                {
                  v409 = (v349 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v349 | 7) != 0x17)
                    v409 = v349 | 7;
                  v410 = v409 + 1;
                  v350 = (__int128 *)operator new(v409 + 1);
                  *((_QWORD *)&__dst + 1) = v349;
                  *(_QWORD *)&v503 = v410 | 0x8000000000000000;
                  *(_QWORD *)&__dst = v350;
                }
                else
                {
                  BYTE7(v503) = *(_QWORD *)(v323 + 8);
                  v350 = &__dst;
                  if (!v349)
                    goto LABEL_654;
                }
                memmove(v350, v348, v349);
LABEL_654:
                *((_BYTE *)v350 + v349) = 0;
LABEL_655:
                v411 = std::string::insert((std::string *)&__dst, 0, "_");
                *(_QWORD *)&v507 = *((_QWORD *)&v411->__r_.__value_.__l + 2);
                v506 = *(_OWORD *)&v411->__r_.__value_.__l.__data_;
                v411->__r_.__value_.__l.__size_ = 0;
                v411->__r_.__value_.__r.__words[2] = 0;
                v411->__r_.__value_.__r.__words[0] = 0;
                if ((SBYTE7(v507) & 0x80u) == 0)
                  v412 = BYTE7(v507) & 0x7F;
                else
                  v412 = *((_QWORD *)&v506 + 1);
                if (v412)
                {
                  if ((SBYTE7(v507) & 0x80u) == 0)
                    v413 = &v506;
                  else
                    v413 = (__int128 *)v506;
                  v414 = (void *)sub_1C484358C(a1, v412, 0);
                  memcpy(v414, v413, v412);
                }
                else
                {
                  v414 = 0;
                }
                v415 = v491[1];
                if (v491[1] >= v492[0])
                {
                  v417 = v491[0];
                  v418 = ((char *)v491[1] - (char *)v491[0]) >> 4;
                  v419 = v418 + 1;
                  if ((unint64_t)(v418 + 1) >> 60)
                    goto LABEL_808;
                  v420 = (char *)v492[0] - (char *)v491[0];
                  if (((char *)v492[0] - (char *)v491[0]) >> 3 > v419)
                    v419 = v420 >> 3;
                  if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFF0)
                    v421 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v421 = v419;
                  if (v421)
                  {
                    if (v421 >> 60)
                      goto LABEL_809;
                    v422 = (char *)operator new(16 * v421);
                  }
                  else
                  {
                    v422 = 0;
                  }
                  v440 = &v422[16 * v418];
                  *(_QWORD *)v440 = v414;
                  *((_QWORD *)v440 + 1) = v412;
                  v441 = v440;
                  if (v415 != v417)
                  {
                    do
                    {
                      *((_OWORD *)v441 - 1) = *((_OWORD *)v415 - 1);
                      v441 -= 16;
                      v415 -= 2;
                    }
                    while (v415 != v417);
                    v415 = v491[0];
                  }
                  v446 = &v422[16 * v421];
                  v416 = v440 + 16;
                  v491[0] = v441;
                  v491[1] = v440 + 16;
                  v492[0] = v446;
                  if (v415)
                    operator delete(v415);
                }
                else
                {
                  *(_QWORD *)v491[1] = v414;
                  v415[1] = v412;
                  v416 = v415 + 2;
                }
                v491[1] = v416;
LABEL_731:
                if (SBYTE7(v507) < 0)
                  operator delete((void *)v506);
                if (SBYTE7(v503) < 0)
                  operator delete((void *)__dst);
                break;
              case 2:
                if (*(_DWORD *)(*v480 + 176) == 4)
                {
                  v328 = *(const void **)v323;
                  v329 = *(_QWORD *)(v323 + 8);
                  v330 = (_QWORD *)v493;
                  if ((unint64_t)v493 >= *((_QWORD *)&v493 + 1))
                  {
                    v351 = v492[1];
                    v352 = (uint64_t)(v493 - (unint64_t)v492[1]) >> 4;
                    v353 = v352 + 1;
                    if ((unint64_t)(v352 + 1) >> 60)
                      goto LABEL_808;
                    v354 = *((_QWORD *)&v493 + 1) - (unint64_t)v492[1];
                    if ((uint64_t)(*((_QWORD *)&v493 + 1) - (unint64_t)v492[1]) >> 3 > v353)
                      v353 = v354 >> 3;
                    if ((unint64_t)v354 >= 0x7FFFFFFFFFFFFFF0)
                      v355 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v355 = v353;
                    if (v355)
                    {
                      if (v355 >> 60)
                        goto LABEL_809;
                      v356 = (char *)operator new(16 * v355);
                    }
                    else
                    {
                      v356 = 0;
                    }
                    v423 = &v356[16 * v352];
                    *(_QWORD *)v423 = v328;
                    *((_QWORD *)v423 + 1) = v329;
                    v424 = v423;
                    if (v330 != v351)
                    {
                      do
                      {
                        *((_OWORD *)v424 - 1) = *((_OWORD *)v330 - 1);
                        v424 -= 16;
                        v330 -= 2;
                      }
                      while (v330 != v351);
                      v330 = v492[1];
                    }
                    v425 = &v356[16 * v355];
                    v331 = v423 + 16;
                    v492[1] = v424;
                    *(_QWORD *)&v493 = v423 + 16;
                    *((_QWORD *)&v493 + 1) = v425;
                    if (v330)
                      operator delete(v330);
                  }
                  else
                  {
                    *(_QWORD *)v493 = v328;
                    v330[1] = v329;
                    v331 = v330 + 2;
                  }
                  *(_QWORD *)&v493 = v331;
                  break;
                }
                v340 = *(const void **)v323;
                if (!*(_QWORD *)v323)
                {
                  __dst = 0uLL;
                  *(_QWORD *)&v503 = 0;
                  goto LABEL_605;
                }
                v341 = *(_QWORD *)(v323 + 8);
                if (v341 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_808;
                if (v341 >= 0x17)
                {
                  v381 = (v341 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v341 | 7) != 0x17)
                    v381 = v341 | 7;
                  v382 = v381 + 1;
                  v342 = (__int128 *)operator new(v381 + 1);
                  *((_QWORD *)&__dst + 1) = v341;
                  *(_QWORD *)&v503 = v382 | 0x8000000000000000;
                  *(_QWORD *)&__dst = v342;
                }
                else
                {
                  BYTE7(v503) = *(_QWORD *)(v323 + 8);
                  v342 = &__dst;
                  if (!v341)
                    goto LABEL_604;
                }
                memmove(v342, v340, v341);
LABEL_604:
                *((_BYTE *)v342 + v341) = 0;
LABEL_605:
                v383 = std::string::insert((std::string *)&__dst, 0, "_OBJC_EHTYPE_$_");
                *(_QWORD *)&v507 = *((_QWORD *)&v383->__r_.__value_.__l + 2);
                v506 = *(_OWORD *)&v383->__r_.__value_.__l.__data_;
                v383->__r_.__value_.__l.__size_ = 0;
                v383->__r_.__value_.__r.__words[2] = 0;
                v383->__r_.__value_.__r.__words[0] = 0;
                if ((SBYTE7(v507) & 0x80u) == 0)
                  v384 = BYTE7(v507) & 0x7F;
                else
                  v384 = *((_QWORD *)&v506 + 1);
                if (v384)
                {
                  if ((SBYTE7(v507) & 0x80u) == 0)
                    v385 = &v506;
                  else
                    v385 = (__int128 *)v506;
                  v386 = (void *)sub_1C484358C(a1, v384, 0);
                  memcpy(v386, v385, v384);
                }
                else
                {
                  v386 = 0;
                }
                v387 = (_QWORD *)v490;
                if ((unint64_t)v490 >= *((_QWORD *)&v490 + 1))
                {
                  v389 = v489[1];
                  v390 = (uint64_t)(v490 - (unint64_t)v489[1]) >> 4;
                  v391 = v390 + 1;
                  if ((unint64_t)(v390 + 1) >> 60)
                    goto LABEL_808;
                  v392 = *((_QWORD *)&v490 + 1) - (unint64_t)v489[1];
                  if ((uint64_t)(*((_QWORD *)&v490 + 1) - (unint64_t)v489[1]) >> 3 > v391)
                    v391 = v392 >> 3;
                  if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF0)
                    v393 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v393 = v391;
                  if (v393)
                  {
                    if (v393 >> 60)
                      goto LABEL_809;
                    v394 = (char *)operator new(16 * v393);
                  }
                  else
                  {
                    v394 = 0;
                  }
                  v436 = &v394[16 * v390];
                  *(_QWORD *)v436 = v386;
                  *((_QWORD *)v436 + 1) = v384;
                  v437 = v436;
                  if (v387 != v389)
                  {
                    do
                    {
                      *((_OWORD *)v437 - 1) = *((_OWORD *)v387 - 1);
                      v437 -= 16;
                      v387 -= 2;
                    }
                    while (v387 != v389);
                    v387 = v489[1];
                  }
                  v444 = &v394[16 * v393];
                  v388 = v436 + 16;
                  v489[1] = v437;
                  *(_QWORD *)&v490 = v436 + 16;
                  *((_QWORD *)&v490 + 1) = v444;
                  if (v387)
                    operator delete(v387);
                }
                else
                {
                  *(_QWORD *)v490 = v386;
                  v387[1] = v384;
                  v388 = v387 + 2;
                }
                *(_QWORD *)&v490 = v388;
                goto LABEL_731;
              case 3:
                if (*(_DWORD *)(*v480 + 176) == 4)
                {
                  v332 = *(const void **)v323;
                  v333 = *(_QWORD *)(v323 + 8);
                  v334 = (_QWORD *)*((_QWORD *)&v494 + 1);
                  if (*((_QWORD *)&v494 + 1) >= (unint64_t)v495)
                  {
                    v357 = (_QWORD *)v494;
                    v358 = (uint64_t)(*((_QWORD *)&v494 + 1) - v494) >> 4;
                    v359 = v358 + 1;
                    if ((unint64_t)(v358 + 1) >> 60)
                      goto LABEL_808;
                    v360 = v495 - v494;
                    if ((uint64_t)(v495 - v494) >> 3 > v359)
                      v359 = v360 >> 3;
                    if ((unint64_t)v360 >= 0x7FFFFFFFFFFFFFF0)
                      v361 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v361 = v359;
                    if (v361)
                    {
                      if (v361 >> 60)
                        goto LABEL_809;
                      v362 = (char *)operator new(16 * v361);
                    }
                    else
                    {
                      v362 = 0;
                    }
                    v426 = &v362[16 * v358];
                    *(_QWORD *)v426 = v332;
                    *((_QWORD *)v426 + 1) = v333;
                    v427 = v426;
                    if (v334 != v357)
                    {
                      do
                      {
                        *((_OWORD *)v427 - 1) = *((_OWORD *)v334 - 1);
                        v427 -= 16;
                        v334 -= 2;
                      }
                      while (v334 != v357);
                      v334 = (_QWORD *)v494;
                    }
                    v428 = &v362[16 * v361];
                    v335 = v426 + 16;
                    *(_QWORD *)&v494 = v427;
                    *((_QWORD *)&v494 + 1) = v426 + 16;
                    *(_QWORD *)&v495 = v428;
                    if (v334)
                      operator delete(v334);
                  }
                  else
                  {
                    **((_QWORD **)&v494 + 1) = v332;
                    v334[1] = v333;
                    v335 = v334 + 2;
                  }
                  *((_QWORD *)&v494 + 1) = v335;
                  break;
                }
                v343 = *(const void **)v323;
                if (!*(_QWORD *)v323)
                {
                  __dst = 0uLL;
                  *(_QWORD *)&v503 = 0;
                  goto LABEL_630;
                }
                v344 = *(_QWORD *)(v323 + 8);
                if (v344 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_808;
                if (v344 >= 0x17)
                {
                  v395 = (v344 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v344 | 7) != 0x17)
                    v395 = v344 | 7;
                  v396 = v395 + 1;
                  v345 = (__int128 *)operator new(v395 + 1);
                  *((_QWORD *)&__dst + 1) = v344;
                  *(_QWORD *)&v503 = v396 | 0x8000000000000000;
                  *(_QWORD *)&__dst = v345;
                }
                else
                {
                  BYTE7(v503) = *(_QWORD *)(v323 + 8);
                  v345 = &__dst;
                  if (!v344)
                    goto LABEL_629;
                }
                memmove(v345, v343, v344);
LABEL_629:
                *((_BYTE *)v345 + v344) = 0;
LABEL_630:
                v397 = std::string::insert((std::string *)&__dst, 0, "_");
                *(_QWORD *)&v507 = *((_QWORD *)&v397->__r_.__value_.__l + 2);
                v506 = *(_OWORD *)&v397->__r_.__value_.__l.__data_;
                v397->__r_.__value_.__l.__size_ = 0;
                v397->__r_.__value_.__r.__words[2] = 0;
                v397->__r_.__value_.__r.__words[0] = 0;
                if ((SBYTE7(v507) & 0x80u) == 0)
                  v398 = BYTE7(v507) & 0x7F;
                else
                  v398 = *((_QWORD *)&v506 + 1);
                if (v398)
                {
                  if ((SBYTE7(v507) & 0x80u) == 0)
                    v399 = &v506;
                  else
                    v399 = (__int128 *)v506;
                  v400 = (void *)sub_1C484358C(a1, v398, 0);
                  memcpy(v400, v399, v398);
                }
                else
                {
                  v400 = 0;
                }
                v401 = (_QWORD *)*((_QWORD *)&v494 + 1);
                if (*((_QWORD *)&v494 + 1) >= (unint64_t)v495)
                {
                  v403 = (_QWORD *)v494;
                  v404 = (uint64_t)(*((_QWORD *)&v494 + 1) - v494) >> 4;
                  v405 = v404 + 1;
                  if ((unint64_t)(v404 + 1) >> 60)
                    goto LABEL_808;
                  v406 = v495 - v494;
                  if ((uint64_t)(v495 - v494) >> 3 > v405)
                    v405 = v406 >> 3;
                  if ((unint64_t)v406 >= 0x7FFFFFFFFFFFFFF0)
                    v407 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v407 = v405;
                  if (v407)
                  {
                    if (v407 >> 60)
                      goto LABEL_809;
                    v408 = (char *)operator new(16 * v407);
                  }
                  else
                  {
                    v408 = 0;
                  }
                  v438 = &v408[16 * v404];
                  *(_QWORD *)v438 = v400;
                  *((_QWORD *)v438 + 1) = v398;
                  v439 = v438;
                  if (v401 != v403)
                  {
                    do
                    {
                      *((_OWORD *)v439 - 1) = *((_OWORD *)v401 - 1);
                      v439 -= 16;
                      v401 -= 2;
                    }
                    while (v401 != v403);
                    v401 = (_QWORD *)v494;
                  }
                  v445 = &v408[16 * v407];
                  v402 = v438 + 16;
                  *(_QWORD *)&v494 = v439;
                  *((_QWORD *)&v494 + 1) = v438 + 16;
                  *(_QWORD *)&v495 = v445;
                  if (v401)
                    operator delete(v401);
                }
                else
                {
                  **((_QWORD **)&v494 + 1) = v400;
                  v401[1] = v398;
                  v402 = v401 + 2;
                }
                *((_QWORD *)&v494 + 1) = v402;
                goto LABEL_731;
              default:
                break;
            }
          }
          v447 = (uint64_t *)v322[1];
          if (v447)
          {
            do
            {
              v448 = v447;
              v447 = (uint64_t *)*v447;
            }
            while (v447);
          }
          else
          {
            do
            {
              v448 = (uint64_t *)v322[2];
              v280 = *v448 == (_QWORD)v322;
              v322 = v448;
            }
            while (!v280);
          }
          v322 = v448;
        }
        while (v448 != (uint64_t *)&v483);
      }
      v449 = 126 - 2 * __clz((uint64_t)(v490 - (unint64_t)v489[1]) >> 4);
      v450 = (void *)v490 == v489[1] ? 0 : v449;
      sub_1C5E9710C((uint64_t)v489[1], (const void **)v490, v450, 1);
      v451 = 126 - 2 * __clz(((char *)v491[1] - (char *)v491[0]) >> 4);
      v452 = v491[1] == v491[0] ? 0 : v451;
      sub_1C5E9710C((uint64_t)v491[0], (const void **)v491[1], v452, 1);
      v453 = 126 - 2 * __clz((uint64_t)(v493 - (unint64_t)v492[1]) >> 4);
      v454 = (void *)v493 == v492[1] ? 0 : v453;
      sub_1C5E9710C((uint64_t)v492[1], (const void **)v493, v454, 1);
      v455 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v494 + 1) - v494) >> 4);
      v456 = *((_QWORD *)&v494 + 1) == (_QWORD)v494 ? 0 : v455;
      sub_1C5E9710C(v494, *((const void ***)&v494 + 1), v456, 1);
      v457 = 126 - 2 * __clz((uint64_t)(v496 - *((_QWORD *)&v495 + 1)) >> 4);
      v458 = (_QWORD)v496 == *((_QWORD *)&v495 + 1) ? 0 : v457;
      sub_1C5E9710C(*((uint64_t *)&v495 + 1), (const void **)v496, v458, 1);
      v460 = *(char **)(a1 + 288);
      v459 = *(_QWORD *)(a1 + 296);
      if ((unint64_t)v460 >= v459)
        break;
      sub_1C5E9BCD8(*(_QWORD **)(a1 + 288), (uint64_t)__p);
      v461 = v460 + 144;
LABEL_786:
      *(_QWORD *)(a1 + 288) = v461;
      v318 = a1;
      if (*((_QWORD *)&v495 + 1))
      {
        *(_QWORD *)&v496 = *((_QWORD *)&v495 + 1);
        operator delete(*((void **)&v495 + 1));
      }
      if ((_QWORD)v494)
      {
        *((_QWORD *)&v494 + 1) = v494;
        operator delete((void *)v494);
      }
      if (v492[1])
      {
        *(void **)&v493 = v492[1];
        operator delete(v492[1]);
      }
      if (v491[0])
      {
        v491[1] = v491[0];
        operator delete(v491[0]);
      }
      if (v489[1])
      {
        *(void **)&v490 = v489[1];
        operator delete(v489[1]);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v476 = *(_QWORD **)(v320 + 8);
      if (v476)
      {
        do
        {
          v477 = (_QWORD **)v476;
          v476 = (_QWORD *)*v476;
        }
        while (v476);
      }
      else
      {
        do
        {
          v477 = *(_QWORD ***)(v320 + 16);
          v280 = *v477 == (_QWORD *)v320;
          v320 = (uint64_t)v477;
        }
        while (!v280);
      }
      v320 = (uint64_t)v477;
      if (v477 == &v486)
        goto LABEL_517;
    }
    v462 = *(_BYTE **)(a1 + 280);
    v463 = 0x8E38E38E38E38E39 * ((v460 - v462) >> 4) + 1;
    if (v463 > 0x1C71C71C71C71C7)
      goto LABEL_808;
    v464 = 0x8E38E38E38E38E39 * ((uint64_t)(v459 - (_QWORD)v462) >> 4);
    if (2 * v464 > v463)
      v463 = 2 * v464;
    if (v464 >= 0xE38E38E38E38E3)
      v465 = 0x1C71C71C71C71C7;
    else
      v465 = v463;
    if (v465)
    {
      if (v465 > 0x1C71C71C71C71C7)
        goto LABEL_809;
      v466 = (char *)operator new(144 * v465);
    }
    else
    {
      v466 = 0;
    }
    v467 = &v466[16 * ((v460 - v462) >> 4)];
    v468 = &v466[144 * v465];
    sub_1C5E9BCD8(v467, (uint64_t)__p);
    v461 = v467 + 144;
    if (v460 == v462)
    {
      *(_QWORD *)(a1 + 280) = v467;
      *(_QWORD *)(a1 + 288) = v461;
      *(_QWORD *)(a1 + 296) = v468;
    }
    else
    {
      do
      {
        v467 -= 144;
        v460 -= 144;
        sub_1C5E9BCD8(v467, (uint64_t)v460);
      }
      while (v460 != v462);
      v460 = *(char **)(a1 + 280);
      v469 = *(char **)(a1 + 288);
      *(_QWORD *)(a1 + 280) = v467;
      *(_QWORD *)(a1 + 288) = v461;
      *(_QWORD *)(a1 + 296) = v468;
      if (v469 != v460)
      {
        do
        {
          v470 = (void *)*((_QWORD *)v469 - 3);
          if (v470)
          {
            *((_QWORD *)v469 - 2) = v470;
            operator delete(v470);
          }
          v471 = (void *)*((_QWORD *)v469 - 6);
          if (v471)
          {
            *((_QWORD *)v469 - 5) = v471;
            operator delete(v471);
          }
          v472 = (void *)*((_QWORD *)v469 - 9);
          if (v472)
          {
            *((_QWORD *)v469 - 8) = v472;
            operator delete(v472);
          }
          v473 = (void *)*((_QWORD *)v469 - 12);
          if (v473)
          {
            *((_QWORD *)v469 - 11) = v473;
            operator delete(v473);
          }
          v474 = (void *)*((_QWORD *)v469 - 15);
          if (v474)
          {
            *((_QWORD *)v469 - 14) = v474;
            operator delete(v474);
          }
          v475 = (void *)*((_QWORD *)v469 - 18);
          if (v475)
          {
            *((_QWORD *)v469 - 17) = v475;
            operator delete(v475);
          }
          v469 -= 144;
        }
        while (v469 != v460);
        if (!v460)
          goto LABEL_786;
LABEL_785:
        operator delete(v460);
        goto LABEL_786;
      }
    }
    if (!v460)
      goto LABEL_786;
    goto LABEL_785;
  }
LABEL_517:
  sub_1C6143384(v483);
  sub_1C6143384(v486);
  return v318;
}

uint64_t sub_1C5E9BA84(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(_QWORD *)(a1 + 200) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(_QWORD *)(a1 + 176) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(_QWORD *)(a1 + 152) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(_QWORD *)(a1 + 104) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 24);
  if (v9)
  {
    *(_QWORD *)(a1 + 32) = v9;
    operator delete(v9);
  }
  v10 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_1C5E9BB34(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

__n128 sub_1C5E9BBB4(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  a1[20] = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 168);
  a1[23] = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  result = *(__n128 *)(a2 + 192);
  *((__n128 *)a1 + 12) = result;
  a1[26] = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  return result;
}

__n128 sub_1C5E9BCD8(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 15) = result;
  a1[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  return result;
}

void sub_1C5E9BD9C(uint64_t a1, _BYTE *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  _QWORD v8[2];
  void (**v9)(llvm::raw_ostream *__hidden);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *v18[2];
  uint64_t v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    LODWORD(v10) = 0;
    v14 = 0;
    v15 = 0;
    v9 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v17 = v18;
    v16 = 0;
    v12 = 0;
    v13 = 0;
    v11 = 0;
    llvm::MachO::operator<<((llvm::raw_ostream *)&v9, *a2);
    v4 = v17;
    v5 = *((_BYTE *)v17 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v17;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v17[1];
    v8[0] = v4;
    v8[1] = v7;
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v8, 0);
    v9 = off_1E81A6E70;
    if (v16 == 1 && v11)
      MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden), _QWORD))(*(_QWORD *)a1 + 216))(a1, &v9, 0);
    *a2 = llvm::MachO::getArchitectureFromName((uint64_t)v9, v10);
  }
}

void sub_1C5E9BECC(uint64_t a1, size_t a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD *)a1;
    v7 = &v5[-*(_QWORD *)a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = v4 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = operator new(v10);
    else
      v11 = 0;
    v12 = &v7[(_QWORD)v11];
    v13 = (char *)v11 + v10;
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (v5 != (char *)v6);
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = &v12[a2];
    *(_QWORD *)(a1 + 16) = v13;
    if (v6)
      operator delete((void *)v6);
  }
}

void sub_1C5E9BFEC(uint64_t *a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  char v7;
  BOOL v8;
  void *v9;
  _QWORD v10[2];
  void (**v11)(llvm::raw_ostream *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    LODWORD(v12) = 0;
    v16 = 0;
    v17 = 0;
    v11 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v19 = &v20;
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    llvm::yaml::ScalarTraits<std::pair<llvm::MachO::Target,std::string>,void>::output(a2, a1[1], (llvm::raw_ostream *)&v11);
    v6 = v19;
    v7 = *((_BYTE *)v19 + 23);
    v8 = v7 < 0;
    if (v7 < 0)
      v6 = *v19;
    v9 = (void *)(v7 & 0x7F);
    if (v8)
      v9 = v19[1];
    v10[0] = v6;
    v10[1] = v9;
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 216))(a1, v10, 1);
    v11 = off_1E81A6E70;
    if (v18 == 1 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    (*(void (**)(uint64_t *, void **, uint64_t))(*a1 + 216))(a1, &v20, 1);
    v4 = llvm::yaml::ScalarTraits<std::pair<llvm::MachO::Target,std::string>,void>::input((uint64_t)v20, v21, a1[1], a2);
    if (v5)
    {
      LOWORD(v15) = 261;
      v11 = (void (**)(llvm::raw_ostream *__hidden))v4;
      v12 = v5;
      (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden)))(*a1 + 248))(a1, &v11);
    }
  }
}

void sub_1C5E9C148(int64x2_t *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  int64x2_t v15;
  unint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  int64x2_t *v20;

  v5 = a1->i64[0];
  v4 = a1->u64[1];
  v6 = (uint64_t)(v4 - a1->i64[0]) >> 5;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v16 = v5 + 32 * a2;
    while (v4 != v16)
    {
      if (*(char *)(v4 - 1) < 0)
        operator delete(*(void **)(v4 - 24));
      v4 -= 32;
    }
LABEL_20:
    a1->i64[1] = v16;
    return;
  }
  v7 = a2 - v6;
  v8 = a1[1].i64[0];
  if (a2 - v6 <= (uint64_t)(v8 - v4) >> 5)
  {
    v16 = v4 + 32 * v7;
    bzero((void *)a1->i64[1], 32 * v7);
    goto LABEL_20;
  }
  if (a2 >> 59)
    abort();
  v9 = (v8 - v5) >> 4;
  if (v9 <= a2)
    v9 = a2;
  if ((unint64_t)(v8 - v5) >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v20 = a1 + 1;
  if (v10 >> 59)
    sub_1C4764EE4();
  v11 = (char *)operator new(32 * v10);
  v12 = &v11[32 * v6];
  bzero(v12, 32 * v7);
  if (v4 == v5)
  {
    v15 = vdupq_n_s64(v4);
  }
  else
  {
    do
    {
      v13 = *(_QWORD *)(v4 - 32);
      v4 -= 32;
      *((_QWORD *)v12 - 4) = v13;
      v12 -= 32;
      v14 = *(_OWORD *)(v4 + 8);
      *((_QWORD *)v12 + 3) = *(_QWORD *)(v4 + 24);
      *(_OWORD *)(v12 + 8) = v14;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    while (v4 != v5);
    v15 = *a1;
    v8 = a1[1].i64[0];
  }
  a1->i64[0] = (uint64_t)v12;
  a1->i64[1] = (uint64_t)&v11[32 * a2];
  v18 = v15;
  a1[1].i64[0] = (uint64_t)&v11[32 * v10];
  v19 = v8;
  v17 = v15.i64[0];
  sub_1C59C5548((uint64_t)&v17);
}

void sub_1C5E9C2BC(uint64_t *a1, llvm::raw_ostream *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  _QWORD v10[2];
  void (**v11)(llvm::raw_ostream *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    LODWORD(v12) = 0;
    v16 = 0;
    v17 = 0;
    v11 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v19 = &v20;
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::output(a2, a1[1], (llvm::raw_ostream *)&v11);
    v4 = v19;
    v5 = *((_BYTE *)v19 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v19;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v19[1];
    v10[0] = v4;
    v10[1] = v7;
    (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 216))(a1, v10, 0);
    v11 = off_1E81A6E70;
    if (v18 == 1 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    (*(void (**)(uint64_t *, void **, _QWORD))(*a1 + 216))(a1, &v20, 0);
    v8 = llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::input((unsigned __int16 *)v20, v21, a1[1], (uint64_t)a2);
    if (v9)
    {
      LOWORD(v15) = 261;
      v11 = (void (**)(llvm::raw_ostream *__hidden))v8;
      v12 = v9;
      (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden)))(*a1 + 248))(a1, &v11);
    }
  }
}

_QWORD *sub_1C5E9C418(_QWORD *result, unsigned int a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  uint64_t v23;

  v3 = a2;
  *result = result + 2;
  v4 = *(_QWORD *)(a3 + 48);
  if (v4)
    v5 = *(_QWORD **)(a3 + 32);
  else
    v5 = *(_QWORD **)a3;
  v6 = *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8);
  v7 = (_QWORD *)(a3 + 40);
  v8 = a2;
  v23 = (uint64_t)result;
  result[1] = 0x500000000;
  if ((a2 & 7) != 0)
    v9 = 9;
  else
    v9 = 4;
  if ((a2 & 7) != 0)
    v10 = 8;
  else
    v10 = 3;
  if ((a2 & 7) != 0)
    v11 = 7;
  else
    v11 = 2;
  v22 = v10;
  while (v4)
  {
    if (v5 == v7)
      return result;
LABEL_18:
    v12 = (unsigned int *)v5 + 7;
    if (!v4)
      v12 = (unsigned int *)v5;
    v13 = *v12;
    if (v13 == 4)
    {
      v14 = v9;
      if ((v3 & 1) != 0)
        goto LABEL_39;
    }
    else
    {
      v14 = v10;
      if (v13 != 3)
      {
        if (v13 == 2)
          v14 = v11;
        else
          v14 = v13;
      }
      if ((v3 & 1) != 0)
      {
LABEL_39:
        LODWORD(v16) = 0;
LABEL_40:
        v21 = v16;
LABEL_41:
        if ((_BYTE)v21 || (_DWORD)v14 != 6)
        {
          result = (_QWORD *)sub_1C63A3010(v23, v21, v14);
          v10 = v22;
        }
        while (++v21 <= 0x1F)
        {
          if (((v8 >> v21) & 1) != 0)
            goto LABEL_41;
        }
        goto LABEL_30;
      }
    }
    v15 = 0;
    while (v15 != 31)
    {
      v16 = v15 + 1;
      v17 = v8 >> v15++;
      if ((v17 & 2) != 0)
      {
        if (v16 != 0xFFFFFFFFLL)
          goto LABEL_40;
        break;
      }
    }
LABEL_30:
    if (v4)
    {
      v18 = (_QWORD *)v5[1];
      v19 = v5;
      if (v18)
      {
        do
        {
          v5 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v19[2];
          v20 = *v5 == (_QWORD)v19;
          v19 = v5;
        }
        while (!v20);
      }
    }
    else
    {
      v5 = (_QWORD *)((char *)v5 + 4);
    }
  }
  if (v5 != (_QWORD *)v6)
    goto LABEL_18;
  return result;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::output(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v3;
  uint64_t *i;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *j;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  _DWORD *v17;
  _DWORD *v18;

  if (a2 && *(_DWORD *)(a2 + 48) == 4)
  {
    v3 = *((_QWORD *)result + 6);
    if (v3)
    {
      for (i = (uint64_t *)*((_QWORD *)result + 5); i; i = (uint64_t *)*i)
      {
        v5 = *((_DWORD *)i + 7);
        if (v5 <= 1)
        {
          if (v5 == 1)
            goto LABEL_16;
          ++i;
        }
      }
    }
    else
    {
      v6 = *((unsigned int *)result + 2);
      if ((_DWORD)v6)
      {
        v7 = *(_DWORD **)result;
        v8 = 4 * v6;
        while (*v7 != 1)
        {
          ++v7;
          v8 -= 4;
          if (!v8)
            goto LABEL_31;
        }
        if (v8)
        {
LABEL_16:
          if (v3)
          {
            for (j = (uint64_t *)*((_QWORD *)result + 5); j; j = (uint64_t *)*j)
            {
              v10 = *((_DWORD *)j + 7);
              if (v10 <= 6)
              {
                if (v10 == 6)
                  goto LABEL_29;
                ++j;
              }
            }
          }
          else
          {
            v11 = *((unsigned int *)result + 2);
            if ((_DWORD)v11)
            {
              v12 = *(_DWORD **)result;
              v13 = 4 * v11;
              while (*v12 != 6)
              {
                ++v12;
                v13 -= 4;
                if (!v13)
                  goto LABEL_31;
              }
              if (v13)
              {
LABEL_29:
                v14 = (_QWORD *)*((_QWORD *)this + 4);
                if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 7uLL)
                  return llvm::raw_ostream::write(this, "zippered", 8uLL);
                *v14 = 0x646572657070697ALL;
                *((_QWORD *)this + 4) += 8;
                return result;
              }
            }
          }
        }
      }
    }
  }
LABEL_31:
  v15 = *((_QWORD *)result + 6);
  v16 = v15 == 0;
  if (v15)
    v17 = (_DWORD *)*((_QWORD *)result + 4);
  else
    v17 = *(_DWORD **)result;
  v18 = v17 + 7;
  if (v16)
    v18 = *(_DWORD **)result;
  return (llvm::raw_ostream *)((uint64_t (*)(void))((char *)&loc_1C5E9C6F4 + 4 * byte_1C8674000[*v18 - 1]))();
}

const char *llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::input(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  int *v8;
  int v10;
  int v12;
  int v13;
  int v14;

  if (a2 == 8)
  {
    if (*(_QWORD *)a1 == 0x646572657070697ALL)
    {
      if (!a3 || *(_DWORD *)(a3 + 48) != 4)
        return "invalid platform";
      v14 = 1;
      sub_1C5E915C4(a4, &v14);
      v13 = 6;
      v8 = &v13;
      goto LABEL_33;
    }
    v5 = 0x100000005;
    v6 = *(_QWORD *)a1 == 0x736F656764697262;
  }
  else
  {
    v7 = 0;
    switch(a2)
    {
      case 3:
        v7 = 0x100000002;
        if (*a1 ^ 0x6F69 | *((unsigned __int8 *)a1 + 2) ^ 0x73)
          v7 = 0;
        goto LABEL_25;
      case 4:
        if (*(_DWORD *)a1 == 1936684660)
          v7 = 0x100000003;
        else
          v7 = 0;
        goto LABEL_25;
      case 6:
        if (*(_DWORD *)a1 == 1868783981 && a1[2] == 30835)
        {
          v7 = 0x100000001;
          goto LABEL_25;
        }
        v10 = *(_DWORD *)a1 ^ 0x6D736F69 | a1[2] ^ 0x6361;
        v5 = 0x100000006;
LABEL_20:
        v6 = v10 == 0;
        break;
      case 7:
        v10 = *(_DWORD *)a1 ^ 0x63746177 | *(_DWORD *)((char *)a1 + 3) ^ 0x736F6863;
        v5 = 0x100000004;
        goto LABEL_20;
      case 9:
        v5 = 0x10000000ALL;
        v6 = (*(_QWORD *)a1 ^ 0x696B726576697264 | *((unsigned __int8 *)a1 + 8) ^ 0x74) == 0;
        break;
      default:
        goto LABEL_25;
    }
  }
  if (v6)
    v7 = v5;
  else
    v7 = 0;
LABEL_25:
  if (v7 <= 0x100000000)
    LODWORD(v7) = 0;
  v12 = v7;
  if (a3 && (_DWORD)v7 == 6)
  {
    if (*(_DWORD *)(a3 + 48) != 4)
      return "invalid platform";
    goto LABEL_32;
  }
  if ((_DWORD)v7)
  {
LABEL_32:
    v8 = &v12;
LABEL_33:
    sub_1C5E915C4(a4, v8);
    return 0;
  }
  return "unknown platform";
}

uint64_t llvm::yaml::ScalarBitSetTraits<llvm::MachO::ArchitectureSet,void>::bitset(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "i386", v4 & *a2))
    *a2 |= 1u;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "x86_64", *(_DWORD *)&v5 & ((*a2 & 2u) >> 1)))
  {
    *a2 |= 2u;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "x86_64h", *(_DWORD *)&v6 & ((*a2 & 4u) >> 2)))
  {
    *a2 |= 4u;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "armv4t", *(_DWORD *)&v7 & ((*a2 & 8u) >> 3)))
  {
    *a2 |= 8u;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "armv6", *(_DWORD *)&v8 & ((*a2 & 0x10u) >> 4)))
  {
    *a2 |= 0x10u;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "armv5", *(_DWORD *)&v9 & ((*a2 & 0x20u) >> 5)))
  {
    *a2 |= 0x20u;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "armv7", *(_DWORD *)&v10 & ((*a2 & 0x40u) >> 6)))
  {
    *a2 |= 0x40u;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "armv7s", *(_DWORD *)&v11 & ((*a2 & 0x80u) >> 7)))
  {
    *a2 |= 0x80u;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "armv7k", *(_DWORD *)&v12 & ((*a2 & 0x100u) >> 8)))
  {
    *a2 |= 0x100u;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "armv6m", *(_DWORD *)&v13 & ((*a2 & 0x200u) >> 9)))
  {
    *a2 |= 0x200u;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "armv7m", *(_DWORD *)&v14 & ((*a2 & 0x400u) >> 10)))
  {
    *a2 |= 0x400u;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "armv7em", *(_DWORD *)&v15 & ((*a2 & 0x800u) >> 11)))
  {
    *a2 |= 0x800u;
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "arm64", *(_DWORD *)&v16 & ((*a2 & 0x1000u) >> 12)))
  {
    *a2 |= 0x1000u;
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "arm64e", *(_DWORD *)&v17 & ((*a2 & 0x2000u) >> 13)))
  {
    *a2 |= 0x2000u;
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "arm64_32", *(_DWORD *)&v18 & ((*a2 & 0x4000u) >> 14)))
  {
    *a2 |= 0x4000u;
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  result = (*(uint64_t (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "arm64v8", *(_DWORD *)&v19 & ((*a2 & 0x8000u) >> 15));
  if ((_DWORD)result)
    *a2 |= 0x8000u;
  return result;
}

const char *llvm::yaml::ScalarTraits<SwiftVersion,void>::input(unsigned __int8 *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v4;
  const char *v5;
  int v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;

  if (*(_DWORD *)(a3 + 48) == 8)
  {
    if (a2)
    {
      v4 = 0;
      v5 = "invalid Swift ABI version.";
      while (1)
      {
        v6 = *a1;
        if ((v6 - 48) >= 0xA)
        {
          if ((v6 - 97) >= 0x1A)
          {
            if ((v6 - 65) > 0x19)
              return v5;
            v7 = -55;
          }
          else
          {
            v7 = -87;
          }
        }
        else
        {
          v7 = -48;
        }
        v8 = v7 + v6;
        if (v8 > 9)
          return v5;
        v9 = 10 * v4 + v8;
        if (v4 > v9 / 0xA)
          return v5;
        ++a1;
        v4 = 10 * v4 + v8;
        if (!--a2)
        {
          if (v9 <= 0xFF)
            goto LABEL_52;
          return "invalid Swift ABI version.";
        }
      }
    }
    return "invalid Swift ABI version.";
  }
  if (a2 == 3)
  {
    if (*(_WORD *)a1 == 11825 && a1[2] == 48)
    {
      LOBYTE(v9) = 1;
      goto LABEL_52;
    }
    if (*(_WORD *)a1 == 11825 && a1[2] == 49)
    {
      LOBYTE(v9) = 2;
      goto LABEL_52;
    }
    if (*(_WORD *)a1 == 11826 && a1[2] == 48)
    {
      LOBYTE(v9) = 3;
      goto LABEL_52;
    }
    if (bswap32(*(unsigned __int16 *)a1) >> 16 == 13102 && a1[2] == 48)
    {
      LOBYTE(v9) = 4;
      goto LABEL_52;
    }
    *a4 = 0;
  }
  else
  {
    *a4 = 0;
    if (!a2)
      return "invalid Swift ABI version.";
  }
  v13 = 0;
  v14 = a2;
  v5 = "invalid Swift ABI version.";
  while (1)
  {
    v15 = *a1;
    if ((v15 - 48) < 0xA)
    {
      v16 = -48;
      goto LABEL_36;
    }
    if ((v15 - 97) < 0x1A)
    {
      v16 = -87;
      goto LABEL_36;
    }
    if ((v15 - 65) > 0x19)
      break;
    v16 = -55;
LABEL_36:
    v17 = v16 + v15;
    if (v17 > 9)
      break;
    v9 = 10 * v13 + v17;
    if (v13 > v9 / 0xA)
      return v5;
    ++a1;
    v13 = v9;
    if (!--v14)
      goto LABEL_50;
  }
  v9 = v13;
LABEL_50:
  v5 = "invalid Swift ABI version.";
  if (v9 <= 0xFF && !v14)
  {
LABEL_52:
    v5 = 0;
    *a4 = v9;
  }
  return v5;
}

const char *llvm::yaml::ScalarTraits<std::pair<llvm::MachO::Target,std::string>,void>::input(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  const void *v18;
  __int128 *p_dst;
  const char *result;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  unsigned int ArchitectureFromName;
  __int128 __dst;
  unint64_t v26;
  __int128 v27;
  uint64_t v28[2];
  __int128 v29;

  *(_QWORD *)&v29 = a1;
  *((_QWORD *)&v29 + 1) = a2;
  LOBYTE(__dst) = 58;
  v7 = llvm::StringRef::find((uint64_t *)&v29, (char *)&__dst, 1uLL, 0);
  if (v7 == -1)
  {
    v10 = 0;
    v11 = 0;
    v27 = v29;
  }
  else
  {
    if (a2 >= v7)
      v8 = v7;
    else
      v8 = a2;
    if (a2 >= v7 + 1)
      v9 = v7 + 1;
    else
      v9 = a2;
    v10 = a1 + v9;
    v11 = a2 - v9;
    *(_QWORD *)&v27 = a1;
    *((_QWORD *)&v27 + 1) = v8;
  }
  v28[0] = v10;
  v28[1] = v11;
  v12 = sub_1C534E9D8((uint64_t *)&v27, " \t\n\v\f\r", 6);
  v14 = v13;
  v15 = sub_1C534E9D8(v28, " \t\n\v\f\r", 6);
  if (!v16)
    return "invalid uuid string pair";
  v17 = v16;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v18 = (const void *)v15;
  if (v16 >= 0x17)
  {
    v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v21 = v16 | 7;
    v22 = v21 + 1;
    p_dst = (__int128 *)operator new(v21 + 1);
    *((_QWORD *)&__dst + 1) = v17;
    v26 = v22 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v26) = v16;
    p_dst = &__dst;
  }
  memmove(p_dst, v18, v17);
  *((_BYTE *)p_dst + v17) = 0;
  v23 = (void **)(a4 + 8);
  if (*(char *)(a4 + 31) < 0)
    operator delete(*v23);
  *(_OWORD *)v23 = __dst;
  *(_QWORD *)(a4 + 24) = v26;
  ArchitectureFromName = llvm::MachO::getArchitectureFromName(v12, v14);
  result = 0;
  *(_QWORD *)a4 = ArchitectureFromName;
  return result;
}

_QWORD *sub_1C5E9D34C(uint64_t a1, uint64_t a2)
{
  uint64_t NamedMetadata;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[4];
  __int16 v19;

  v18[0] = (uint64_t)"agx.driver_bindings";
  v19 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)v18);
  if (NamedMetadata)
  {
    v5 = NamedMetadata;
    v6 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 8 * v6;
      do
      {
        v9 = *(_QWORD *)(**(_QWORD **)(v5 + 48) + v7);
        v10 = *(unsigned int *)(v9 + 8);
        if (*(_QWORD *)(v9 - 8 * v10))
        {
          v18[0] = 0;
          v18[0] = *(_QWORD *)(*(_QWORD *)(v9 - 8 * v10) + 128);
          *(_QWORD *)sub_1C5E9D498(a2, v18) = v9;
        }
        v7 += 8;
      }
      while (v8 != v7);
    }
  }
  v18[0] = (uint64_t)"agx.driver_parameters_dma";
  v19 = 259;
  result = (_QWORD *)llvm::Module::getNamedMetadata(a1, (uint64_t)v18);
  if (result)
  {
    v12 = result;
    v13 = *(unsigned int *)(result[6] + 8);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = 8 * v13;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)v12[6] + v14);
        v17 = *(unsigned int *)(v16 + 8);
        if (*(_QWORD *)(v16 - 8 * v17))
        {
          v18[0] = 0;
          v18[0] = *(_QWORD *)(*(_QWORD *)(v16 - 8 * v17) + 128);
          result = (_QWORD *)sub_1C5E9D498(a2, v18);
          *result = v16;
        }
        v14 += 8;
      }
      while (v15 != v14);
    }
  }
  return result;
}

uint64_t sub_1C5E9D498(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v29;
  int v30;
  uint64_t v31;
  int v32;

  v4 = *a2;
  v31 = *a2;
  v32 = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)a1;
    v7 = v5 - 1;
    v8 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
    v10 = *v9;
    if (v4 == *v9)
    {
LABEL_34:
      v27 = *(_DWORD *)(v6 + 16 * v8 + 8);
      v26 = *(_QWORD *)(a1 + 24);
      return v26 + 16 * v27 + 8;
    }
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v29 = 0;
      else
        v29 = v10 == -8192;
      if (v29)
        v11 = v9;
      v30 = v8 + v12++;
      v8 = v30 & v7;
      v9 = (_QWORD *)(v6 + 16 * v8);
      v10 = *v9;
      if (v4 == *v9)
        goto LABEL_34;
    }
    if (v11)
      v13 = v11;
    else
      v13 = v9;
  }
  else
  {
    v13 = 0;
  }
  v14 = sub_1C4E2FC78(a1, (uint64_t)&v31, &v31, v13);
  *v14 = v31;
  *((_DWORD *)v14 + 2) = v32;
  v15 = *a2;
  v17 = *(uint64_t **)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v17 < v16)
  {
    *v17 = v15;
    v17[1] = 0;
    v25 = v17 + 2;
  }
  else
  {
    v18 = *(char **)(a1 + 24);
    v19 = ((char *)v17 - v18) >> 4;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60)
      abort();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 3 > v20)
      v20 = v21 >> 3;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v22 = 0xFFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 60)
        sub_1C4764EE4();
      v23 = (char *)operator new(16 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = (uint64_t *)&v23[16 * v19];
    *v24 = v15;
    v24[1] = 0;
    v25 = v24 + 2;
    if (v17 != (uint64_t *)v18)
    {
      do
      {
        *((_OWORD *)v24 - 1) = *((_OWORD *)v17 - 1);
        v24 -= 2;
        v17 -= 2;
      }
      while (v17 != (uint64_t *)v18);
      v17 = *(uint64_t **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v24;
    *(_QWORD *)(a1 + 32) = v25;
    *(_QWORD *)(a1 + 40) = &v23[16 * v22];
    if (v17)
      operator delete(v17);
  }
  *(_QWORD *)(a1 + 32) = v25;
  v26 = *(_QWORD *)(a1 + 24);
  v27 = (((unint64_t)v25 - v26) >> 4) - 1;
  *((_DWORD *)v14 + 2) = v27;
  return v26 + 16 * v27 + 8;
}

_QWORD *sub_1C5E9D674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NamedMetadata;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];
  __int16 v29;

  v28[0] = (uint64_t)"agx.compute_driver_bindings";
  v29 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)v28);
  if (NamedMetadata)
  {
    v7 = NamedMetadata;
    v8 = *(_QWORD *)(NamedMetadata + 48);
    v9 = *(_DWORD *)(v8 + 8);
    if (v9)
    {
      v10 = 0;
      while (1)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v10);
        v12 = *(unsigned int *)(v11 + 8);
        v13 = *(_QWORD *)(v11 - 8 * v12);
        if (v13)
        {
          if (*(_BYTE *)v13 == 1)
          {
            v14 = *(_QWORD *)(v13 + 128);
            if (!*(_BYTE *)(v14 + 16))
            {
              if (a3)
              {
                if (v14 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 560))(a3))
                  goto LABEL_19;
                LODWORD(v12) = *(_DWORD *)(v11 + 8);
              }
              v15 = v12 - 1;
              if ((_DWORD)v12 != 1)
              {
                v16 = v11 + 8;
                do
                {
                  v17 = *(_QWORD *)(v16 - 8 * *(unsigned int *)(v11 + 8));
                  v18 = *(unsigned int *)(v17 + 8);
                  if ((_DWORD)v18)
                  {
                    v28[0] = 0;
                    v19 = *(_QWORD *)(v17 - 8 * v18);
                    if (v19)
                    {
                      if (*(_BYTE *)v19 == 1)
                      {
                        v20 = *(_QWORD *)(v19 + 128);
                        if (*(unsigned __int8 *)(v20 + 16) <= 3u)
                        {
                          v28[0] = v20;
                          *(_QWORD *)sub_1C5E9D498(a2, v28) = v17;
                        }
                      }
                    }
                  }
                  v16 += 8;
                  --v15;
                }
                while (v15);
              }
              if (a3)
                break;
            }
          }
        }
LABEL_19:
        if (v9 == ++v10)
          break;
        v8 = *(_QWORD *)(v7 + 48);
      }
    }
  }
  v28[0] = (uint64_t)"agx.driver_parameters_dma";
  v29 = 259;
  result = (_QWORD *)llvm::Module::getNamedMetadata(a1, (uint64_t)v28);
  if (result)
  {
    v22 = result;
    v23 = *(unsigned int *)(result[6] + 8);
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = 8 * v23;
      do
      {
        v26 = *(_QWORD *)(*(_QWORD *)v22[6] + v24);
        v27 = *(unsigned int *)(v26 + 8);
        if (*(_QWORD *)(v26 - 8 * v27))
        {
          v28[0] = 0;
          v28[0] = *(_QWORD *)(*(_QWORD *)(v26 - 8 * v27) + 128);
          result = (_QWORD *)sub_1C5E9D498(a2, v28);
          *result = v26;
        }
        v24 += 8;
      }
      while (v25 != v24);
    }
  }
  return result;
}

uint64_t sub_1C5E9D850(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 2560)
  {
    if ((a1 - 2561) < 0x10)
      return 3;
    if (a1 == 2704)
      return result;
    if (a1 == 2703)
      return 3;
    return 0;
  }
  if ((a1 - 2545) >= 0x10 && (a1 - 1994) >= 2)
    return 0;
  return result;
}

uint64_t sub_1C5E9D8A8(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if ((a1 - 2447) > 0x17 || ((1 << (a1 + 113)) & 0x800073) == 0)
  {
    v3 = a1 - 1989;
    if (v3 > 4 || ((1 << v3) & 0x19) == 0)
      return 0;
  }
  return result;
}

BOOL sub_1C5E9D8F8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v9;

  if (*(_BYTE *)(a1 + 16) != 84)
    return 0;
  v1 = *(_QWORD *)(a1 - 32);
  if (!v1 || *(_BYTE *)(v1 + 16) || *(_QWORD *)(v1 + 24) != *(_QWORD *)(a1 + 72) || (*(_BYTE *)(v1 + 33) & 0x20) == 0)
    return 0;
  v2 = *(_DWORD *)(v1 + 36);
  if (v2 <= 1992)
    return v2 == 1992;
  if (v2 != 2470)
    return 0;
  v4 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v4)
    v6 = v5 == 16;
  else
    v6 = 0;
  if (v6)
  {
    v9 = (_QWORD *)(v4 + 24);
    if (*(_DWORD *)(v4 + 32) >= 0x41u)
      v9 = (_QWORD *)*v9;
    return *v9 == 255;
  }
  else
  {
    if (v5 != 84)
      return 0;
    v7 = *(_QWORD *)(v4 - 32);
    if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *(_QWORD *)(v4 + 72) || (*(_BYTE *)(v7 + 33) & 0x20) == 0)
      return 0;
    return *(_DWORD *)(v7 + 36) == 1268;
  }
}

uint64_t sub_1C5E9D9E4(int a1)
{
  uint64_t result;
  unsigned int v3;

  if ((sub_1C5E9D850(a1) & 1) != 0)
    return 2;
  result = 2;
  if (a1 > 2469)
  {
    if (a1 != 2470)
    {
      if ((a1 - 2471) < 8)
        return result;
      v3 = a1 - 2703;
      goto LABEL_11;
    }
    return 1;
  }
  if (a1 == 2448)
    return 1;
  v3 = a1 - 1996;
LABEL_11:
  if (v3 >= 2)
  {
    if (a1 == 2452)
      return 2;
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_1C5E9DA60(int a1, uint64_t a2)
{
  if (a1 <= 2469)
  {
    if (a1 != 2448)
    {
      if ((a1 - 1996) < 2)
        goto LABEL_5;
      goto LABEL_11;
    }
LABEL_8:
    if (!(_DWORD)a2)
      return a2;
    return 0xFFFFFFFFLL;
  }
  if (a1 == 2470)
    goto LABEL_8;
  if ((a1 - 2471) < 8 || (a1 - 2703) <= 1)
  {
LABEL_5:
    if (!(_DWORD)a2)
      return 4;
    return 0xFFFFFFFFLL;
  }
LABEL_11:
  if (a1 != 2452 || a2 >= 2)
    return 0xFFFFFFFFLL;
  return a2;
}

uint64_t sub_1C5E9DACC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  int v7;

  if (*(_BYTE *)(a1 + 16) != 84)
    return 0;
  v2 = *(_QWORD *)(a1 - 32);
  if (!v2 || *(_BYTE *)(v2 + 16) || *(_QWORD *)(v2 + 24) != *(_QWORD *)(a1 + 72) || (*(_BYTE *)(v2 + 33) & 0x20) == 0)
    return 0;
  switch(a2)
  {
    case 11:
      v4 = *(_DWORD *)(v2 + 36) - 2447;
      if (v4 >= 7)
        return 0;
      v5 = 115;
      return (v5 >> v4) & 1;
    case 16:
      v4 = *(_DWORD *)(v2 + 36) - 2712;
      if (v4 >= 0x14)
        return 0;
      v5 = 1035519;
      return (v5 >> v4) & 1;
    case 17:
      v7 = *(_DWORD *)(v2 + 36);
      result = 1;
      if ((v7 - 2471) >= 8 && (v7 - 2703) >= 2 && (v7 - 1996) >= 2)
        return 0;
      return result;
    case 18:
      return sub_1C5E9D850(*(_DWORD *)(v2 + 36)) & 1;
    case 19:
      return llvm::GetItrKind((llvm *)*(unsigned int *)(v2 + 36)) != 0;
    case 20:
      return sub_1C47860D0(*(_DWORD *)(v2 + 36));
    case 21:
      return (*(_DWORD *)(v2 + 36) - 1682) < 0x8C;
    case 22:
      v6 = *(_DWORD *)(v2 + 36) == 2149;
      goto LABEL_22;
    default:
      v6 = *(_DWORD *)(v2 + 36) == dword_1C867421C[a2];
LABEL_22:
      result = v6;
      break;
  }
  return result;
}

uint64_t sub_1C5E9DC10(int a1)
{
  uint64_t result;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;

  result = 0;
  if (a1 > 201)
  {
    if (a1 > 1821)
    {
      if (a1 <= 2424)
      {
        if (((a1 - 2131) > 0x29 || ((1 << (a1 - 83)) & 0x32000000001) == 0)
          && a1 != 1822
          && (a1 - 2374) >= 2)
        {
          return 1;
        }
        return result;
      }
      if (a1 <= 2680)
      {
        if (((a1 - 2578) > 0x33 || ((1 << (a1 - 18)) & 0xBE00000000001) == 0)
          && ((a1 - 2483) > 0x2C || ((1 << (a1 + 77)) & 0x120000000001) == 0)
          && (a1 - 2425) >= 0x13)
        {
          return 1;
        }
        return result;
      }
      if ((a1 - 2681) <= 0x18 && ((1 << (a1 - 121)) & 0x13FFFCF) != 0
        || (a1 - 2749) <= 0x36 && ((1 << (a1 + 67)) & 0x7F001000000001) != 0)
      {
        return result;
      }
      v6 = a1 - 2842;
      if (v6 <= 7)
      {
        v4 = 1 << v6;
        v5 = 143;
LABEL_12:
        if ((v4 & v5) != 0)
          return result;
      }
    }
    else
    {
      if ((a1 - 202) <= 0x3D && ((1 << (a1 + 54)) & 0x3B08083000000003) != 0
        || (a1 - 273) <= 0x27 && ((1 << (a1 - 17)) & 0xD318800CA7) != 0)
      {
        return result;
      }
      v3 = a1 - 1266;
      if (v3 <= 0xF)
      {
        v4 = 1 << v3;
        v5 = 32771;
        goto LABEL_12;
      }
    }
    return 1;
  }
  if (((a1 - 139) > 0x3C || ((1 << (a1 + 117)) & 0x14C000703000071FLL) == 0)
    && (a1 - 75) >= 3
    && (a1 > 0x3C || ((1 << a1) & 0x10780000000E4302) == 0))
  {
    return 1;
  }
  return result;
}

BOOL sub_1C5E9DE14(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a1 + 16);
    if (v3 == 62)
    {
LABEL_5:
      v5 = *(_DWORD *)(a1 + 20);
      if ((v5 & 0x40000000) != 0)
      {
        v7 = *(_QWORD *)(a1 - 8);
        v6 = v5 & 0x7FFFFFF;
      }
      else
      {
        v6 = v5 & 0x7FFFFFF;
        v7 = a1 - 32 * v6;
      }
      v10 = (uint64_t *)(v7 + 32);
      for (i = 32 * v6 - 32; i; i -= 32)
      {
        v12 = *v10;
        v10 += 4;
        if (*(_BYTE *)(v12 + 16) != 16)
          return 0;
      }
      if ((v5 & 0x40000000) == 0)
      {
        v13 = (uint64_t *)(a1 - 32 * v6);
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    if (v3 == 5)
    {
      v4 = *(unsigned __int16 *)(a1 + 18);
      if (v4 - 48 < 2)
        goto LABEL_19;
      if (v4 == 34)
        goto LABEL_5;
      v9 = 1;
      v8 = -23;
      goto LABEL_18;
    }
    v8 = v3 - 28;
    if (v3 < 0x1C)
      break;
    if ((v3 & 0xFE) == 0x4C)
      goto LABEL_19;
    v9 = 0;
    v4 = v3 - 28;
LABEL_18:
    if (v4 != 47)
      goto LABEL_24;
LABEL_19:
    v14 = *(_DWORD *)(a1 + 20);
    if ((v14 & 0x40000000) == 0)
    {
      v13 = (uint64_t *)(a1 - 32 * (v14 & 0x7FFFFFF));
      goto LABEL_22;
    }
LABEL_21:
    v13 = *(uint64_t **)(a1 - 8);
LABEL_22:
    a1 = *v13;
  }
  v9 = 1;
LABEL_24:
  if (v3 < 0x11 && ((0x1000Fu >> v3) & 1) != 0)
    return 1;
  v15 = v3 == 60 ? a1 : 0;
  if (v15 && (_DWORD)a2 != 0)
  {
    v17 = **(_QWORD **)(v15 - 32);
    v18 = *(_DWORD *)(v17 + 8);
    if ((v18 & 0xFE) == 0x12)
      v18 = *(_DWORD *)(**(_QWORD **)(v17 + 16) + 8);
    if ((v18 & 0xFFFFFF00) == 0x4000)
      return 1;
  }
  if (!v9)
    goto LABEL_39;
  if (v3 != 5)
    return 0;
  v8 = *(unsigned __int16 *)(a1 + 18);
LABEL_39:
  if (v8 != 13)
    return 0;
  v19 = *(_DWORD *)(a1 + 20);
  if ((v19 & 0x40000000) != 0)
  {
    v20 = *(_QWORD **)(a1 - 8);
    if (!sub_1C5E9DE14(*v20, a2))
      return 0;
  }
  else
  {
    v20 = (_QWORD *)(a1 - 32 * (v19 & 0x7FFFFFF));
    if ((sub_1C5E9DE14(*v20, a2) & 1) == 0)
      return 0;
  }
  return (sub_1C5E9DE14(v20[4], a2) & 1) != 0;
}

uint64_t sub_1C5E9DFC8(uint64_t a1, llvm::BinaryOperator *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  char v17;
  llvm::Type *v18;
  const llvm::APInt *v19;
  llvm::Value *v20;
  unint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  llvm::ConstantInt *v25;
  unsigned int v26;
  unint64_t v27;
  llvm::ValueHandleBase *v28;
  const llvm::APInt *v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  llvm::ConstantInt *v34;
  unsigned int v35;
  unint64_t v36;
  llvm::ValueHandleBase *v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  const llvm::APInt *v41;
  uint64_t v42;
  llvm::ConstantInt *v43;
  unsigned int v44;
  unint64_t v45;
  llvm::ValueHandleBase *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  BOOL v53;
  llvm::ConstantFP **v54;
  llvm::Value **v55;
  llvm::Type *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  llvm::Value *Select;
  uint64_t v62;
  uint64_t *v63;
  llvm::Value *v64;
  unsigned __int8 *v65;
  uint64_t *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  llvm::Value **v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  unsigned __int8 *v82;
  llvm::Type *v83;
  llvm::APFloatBase *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  char *v91;
  char *v92;
  uint64_t **v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t ***v98;
  uint64_t v99;
  char *v100;
  char *v101;
  unsigned __int8 **v102;
  int v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  const llvm::APFloat *v114;
  llvm::APFloatBase *v115;
  uint64_t FCmpHelper;
  uint64_t *v117;
  llvm::Value *v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  uint64_t v121;
  llvm::Value *v122;
  char *v123;
  char *v124;
  unsigned __int8 **v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 ***v130;
  uint64_t v131;
  char *v132;
  char *v133;
  unsigned __int8 **v134;
  int v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  llvm::Value *v142;
  uint64_t v143;
  uint64_t *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD **v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  char *v157;
  char *v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t *v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD **v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  unint64_t *v173;
  unint64_t v174;
  int v176;
  unsigned int v177;
  char *v178;
  _DWORD *v179;
  _DWORD *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  unsigned __int8 *v189;
  unsigned __int8 *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 *v193;
  int v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  char *v200;
  char *v201;
  uint64_t v202;
  int v203;
  _BYTE v204[64];
  _QWORD v205[4];
  __int16 v206;
  _BYTE v207[32];
  __int16 v208;
  const char *v209;
  unsigned int v210;
  __int16 v211;
  unsigned __int8 *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  int v216;
  _BYTE v217[32];
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;

  v185 = (int)a2;
  v2 = 0;
  v223 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 72;
  v200 = v204;
  v201 = v204;
  v202 = 8;
  v203 = 0;
  v198 = a1 + 72;
  do
  {
    v4 = *(_QWORD *)(a1 + 80);
LABEL_3:
    if (v4 == v3)
    {
      v17 = 1;
      goto LABEL_195;
    }
    if (v4)
      v5 = v4 - 24;
    else
      v5 = 0;
    v6 = v5 + 40;
    v7 = *(_QWORD *)(v5 + 48);
    while (1)
    {
      if (v7 == v6)
      {
        v4 = *(_QWORD *)(v4 + 8);
        goto LABEL_3;
      }
      v8 = v7 - 24;
      v52 = v7 == 0;
      v7 = *(_QWORD *)(v7 + 8);
      if (v52)
        v9 = 0;
      else
        v9 = v8;
      v10 = *(unsigned __int8 *)(v9 + 16);
      v11 = v10 - 47;
      v12 = (v10 & 0xFE) != 0x32 && v11 > 1;
      if (!v12)
      {
        v13 = *(unsigned int **)v9;
        v14 = *(_DWORD *)(*(_QWORD *)v9 + 8);
        if (v14 == 16397)
          goto LABEL_95;
        v15 = *(_DWORD *)(v9 + 20);
        v16 = (v15 & 0x40000000) != 0 ? *(_QWORD *)(v9 - 8) : v9 - 32 * (v15 & 0x7FFFFFF);
        if (*(_BYTE *)(*(_QWORD *)(v16 + 32) + 16) != 16)
        {
          if ((*(_DWORD *)(*(_QWORD *)v9 + 8) & 0xFE) == 0x12)
          {
            sub_1C4773D54((uint64_t)&v215, v9, 0, 0, 0);
            v20 = llvm::UndefValue::get((llvm::UndefValue *)v13, v18);
            if (v13[8])
            {
              v21 = 0;
              do
              {
                v22 = *(_DWORD *)(v9 + 20);
                if ((v22 & 0x40000000) != 0)
                  v23 = *(uint64_t **)(v9 - 8);
                else
                  v23 = (uint64_t *)(v9 - 32 * (v22 & 0x7FFFFFF));
                v24 = *v23;
                v25 = *(llvm::ConstantInt **)(*(_QWORD *)v220 + 1960);
                v26 = *(_DWORD *)(*(_QWORD *)v220 + 1968);
                v210 = v26 >> 8;
                if (v26 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v209, v21, 0);
                }
                else
                {
                  if (v26 <= 0xFF)
                    v27 = 0;
                  else
                    v27 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v26);
                  v209 = (const char *)(v27 & v21);
                }
                v28 = llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v209, v19);
                if (v210 >= 0x41 && v209)
                  MEMORY[0x1CAA32F9C](v209, 0x1000C8000313F17);
                v211 = 257;
                v30 = sub_1C4772EE0((uint64_t *)&v215, v24, (uint64_t)v28, (uint64_t)&v209);
                v31 = *(_DWORD *)(v9 + 20);
                if ((v31 & 0x40000000) != 0)
                  v32 = *(_QWORD *)(v9 - 8);
                else
                  v32 = v9 - 32 * (v31 & 0x7FFFFFF);
                v33 = *(_QWORD *)(v32 + 32);
                v34 = *(llvm::ConstantInt **)(*(_QWORD *)v220 + 1960);
                v35 = *(_DWORD *)(*(_QWORD *)v220 + 1968);
                v210 = v35 >> 8;
                if (v35 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v209, v21, 0);
                }
                else
                {
                  if (v35 <= 0xFF)
                    v36 = 0;
                  else
                    v36 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v35);
                  v209 = (const char *)(v36 & v21);
                }
                v37 = llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v209, v29);
                if (v210 >= 0x41 && v209)
                  MEMORY[0x1CAA32F9C](v209, 0x1000C8000313F17);
                v211 = 257;
                v38 = sub_1C4772EE0((uint64_t *)&v215, v33, (uint64_t)v37, (uint64_t)&v209);
                v39 = *(unsigned __int8 *)(v9 + 16);
                if (v39 == 47)
                {
                  v211 = 257;
                  v40 = sub_1C538E6F8((uint64_t)&v215, (uint64_t)v30, (uint64_t)v38, (uint64_t)&v209, 0);
                }
                else if (v39 == 48)
                {
                  v211 = 257;
                  v40 = sub_1C538EA44((uint64_t)&v215, (uint64_t)v30, (uint64_t)v38, (uint64_t)&v209, 0);
                }
                else
                {
                  v211 = 257;
                  if (v39 == 51)
                    v40 = (uint64_t)sub_1C622AECC((uint64_t *)&v215, v30, (uint64_t)v38, (uint64_t)&v209);
                  else
                    v40 = (uint64_t)sub_1C538EDCC((uint64_t *)&v215, v30, (uint64_t)v38, (uint64_t)&v209);
                }
                v42 = v40;
                v43 = *(llvm::ConstantInt **)(*(_QWORD *)v220 + 1960);
                v44 = *(_DWORD *)(*(_QWORD *)v220 + 1968);
                v210 = v44 >> 8;
                if (v44 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v209, v21, 0);
                }
                else
                {
                  if (v44 <= 0xFF)
                    v45 = 0;
                  else
                    v45 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v44);
                  v209 = (const char *)(v45 & v21);
                }
                v46 = llvm::ConstantInt::get(v43, (llvm::LLVMContext *)&v209, v41);
                if (v210 >= 0x41 && v209)
                  MEMORY[0x1CAA32F9C](v209, 0x1000C8000313F17);
                v211 = 257;
                v20 = (llvm::Value *)sub_1C4773154((uint64_t *)&v215, (uint64_t)v20, v42, (uint64_t)v46, (uint64_t)&v209);
                ++v21;
              }
              while (v21 < v13[8]);
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, v20, (llvm::Value *)1);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v200, v9);
            if (v215 != v217)
              free(v215);
            v17 = 0;
            v2 = 1;
            v3 = v198;
            goto LABEL_195;
          }
          if (*(_DWORD *)(*(_QWORD *)v9 + 8) == 13)
            break;
        }
      }
    }
    if (v14 >> 8 >= 0x21)
    {
LABEL_95:
      if (v11 > 1)
        llvm::expandRemainderUpTo64Bits((llvm *)v9, a2);
      else
        llvm::expandDivisionUpTo64Bits((llvm *)v9, a2);
      goto LABEL_194;
    }
    if (!v185)
    {
      if (v11 > 1)
        llvm::expandRemainderUpTo32Bits((llvm *)v9, a2);
      else
        llvm::expandDivisionUpTo32Bits((llvm *)v9, a2);
      goto LABEL_194;
    }
    v47 = *(_QWORD *)(v9 - 64);
    v48 = *(_QWORD *)(v9 - 32);
    if (*(unsigned __int8 *)(v47 + 16) <= 0x1Bu)
      v49 = 0;
    else
      v49 = *(_QWORD *)(v9 - 64);
    if (*(unsigned __int8 *)(v48 + 16) <= 0x1Bu)
      v50 = 0;
    else
      v50 = *(_QWORD *)(v9 - 32);
    if (v14 >= 0x2000)
    {
      if (v49)
      {
        v51 = *(unsigned __int8 *)(v49 + 16);
        v52 = v51 != 68 || v50 == 0;
        if (v52)
        {
          v53 = v51 != 67 || v50 == 0;
          if (!v53 && *(_BYTE *)(v50 + 16) == 67)
            goto LABEL_82;
        }
        else if (*(_BYTE *)(v50 + 16) == 68)
        {
          goto LABEL_82;
        }
      }
      v194 = 0;
    }
    else
    {
LABEL_82:
      v194 = 1;
    }
    v188 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 56) + 40);
    v54 = (llvm::ConstantFP **)(**(_QWORD **)v13 + 1672);
    sub_1C4773D54((uint64_t)&v215, v9, 0, 0, 0);
    v55 = llvm::ConstantInt::get((llvm::ConstantInt *)v13, 0, 0);
    v196 = (uint64_t *)v54;
    v195 = (uint64_t *)llvm::ConstantFP::get(v54, v56, 1.0);
    if (v10 == 51 || (v193 = 0, v57 = (uint64_t *)v48, v58 = (uint64_t *)v47, v10 == 48))
    {
      v211 = 257;
      v193 = sub_1C506EC1C((uint64_t *)&v215, (_QWORD *)v48, v47, (uint64_t)&v209);
      v211 = 257;
      v59 = sub_1C4774B48((uint64_t)&v215, 40, v48, (uint64_t)v55, (uint64_t)&v209);
      v208 = 257;
      v60 = (uint64_t *)sub_1C47733F8((uint64_t)&v215, (uint64_t)v55, v48, (uint64_t)v207, 0, 0);
      v206 = 257;
      Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v215, v59, v60, v48, (uint64_t)v205, 0);
      v211 = 257;
      v62 = sub_1C4774B48((uint64_t)&v215, 40, v47, (uint64_t)v55, (uint64_t)&v209);
      v208 = 257;
      v63 = (uint64_t *)sub_1C47733F8((uint64_t)&v215, (uint64_t)v55, v47, (uint64_t)v207, 0, 0);
      v206 = 257;
      v64 = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v215, v62, v63, v47, (uint64_t)v205, 0);
      v57 = (uint64_t *)Select;
      v58 = (uint64_t *)v64;
    }
    v191 = v48;
    v211 = 257;
    v189 = (unsigned __int8 *)v57;
    v65 = sub_1C5345CE4((uint64_t)&v215, v57, v196, (uint64_t)&v209);
    v211 = 257;
    v66 = (uint64_t *)sub_1C5345CE4((uint64_t)&v215, v58, v196, (uint64_t)&v209);
    v211 = 257;
    v67 = sub_1C5390814((uint64_t)&v215, v66, (uint64_t *)v13, (uint64_t)&v209);
    v209 = "sub";
    v211 = 259;
    v190 = (unsigned __int8 *)v58;
    v68 = sub_1C47733F8((uint64_t)&v215, (uint64_t)v58, (uint64_t)v67, (uint64_t)&v209, 1, 0);
    v69 = llvm::ConstantInt::get((llvm::ConstantInt *)v13, 1, 0);
    v192 = v47;
    v187 = (uint64_t)v55;
    if ((v194 & 1) != 0 || v10 == 48 || v10 == 51)
    {
      v186 = (uint64_t *)v68;
      v70 = v196;
    }
    else
    {
      v113 = (uint64_t)v69;
      llvm::APFloat::APFloat((uint64_t)&v212, &unk_1C866F184, "0x1p+32", 7uLL);
      v70 = v196;
      v115 = llvm::ConstantFP::get((llvm::ConstantFP *)*v196, (llvm::LLVMContext *)&v212, v114);
      v211 = 257;
      FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v215, 1, v66, (uint64_t)v115, (uint64_t)&v209, 0, 0);
      v208 = 257;
      v117 = (uint64_t *)sub_1C47733F8((uint64_t)&v215, v68, v113, (uint64_t)v207, 0, 0);
      v206 = 257;
      v118 = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v215, FCmpHelper, v117, v68, (uint64_t)v205, 0);
      if ((_UNKNOWN *)v213 == &unk_1C866F1C0)
      {
        sub_1C4773C74(&v214);
      }
      else if ((*(_DWORD *)(v213 + 8) - 64) <= 0xFFFFFF7F && v214)
      {
        MEMORY[0x1CAA32F9C](v214, 0x1000C8000313F17);
      }
      v186 = (uint64_t *)v118;
    }
    v211 = 257;
    v71 = sub_1C47721F8((uint64_t)&v215, v195, (uint64_t)v65, (uint64_t)&v209, 0);
    *(_BYTE *)(v71 + 17) |= 0xFEu;
    v211 = 257;
    v72 = sub_1C4772428((uint64_t)&v215, (uint64_t *)v71, (uint64_t)v66, (uint64_t)&v209, 0);
    *(_BYTE *)(v72 + 17) |= 0xFEu;
    v211 = 257;
    v73 = sub_1C4772890((uint64_t *)&v215, (uint64_t)v65, (uint64_t)&v209, 0);
    v75 = sub_1C5EA6D90(v188, (uint64_t *)&v215, 142, (uint64_t **)v73, v72, (uint64_t)v66, 0, v74);
    *(_BYTE *)(v75 + 17) |= 0xFEu;
    v211 = 257;
    if (v194)
    {
      v76 = sub_1C4772428((uint64_t)&v215, (uint64_t *)v71, v75, (uint64_t)&v209, 0);
    }
    else
    {
      v77 = sub_1C4773B3C((uint64_t)&v215, v186, v70, (uint64_t)&v209);
      v211 = 257;
      v78 = sub_1C4772428((uint64_t)&v215, (uint64_t *)v71, (uint64_t)v77, (uint64_t)&v209, 0);
      *(_BYTE *)(v78 + 17) |= 0xFEu;
      v76 = sub_1C5EA6D90(v188, (uint64_t *)&v215, 142, (uint64_t **)v71, v75, v78, 0, v79);
    }
    v80 = (uint64_t *)v76;
    *(_BYTE *)(v76 + 17) |= 0xFEu;
    v211 = 257;
    v81 = (uint64_t *)sub_1C5390814((uint64_t)&v215, (uint64_t *)v72, (uint64_t *)v13, (uint64_t)&v209);
    v211 = 257;
    v82 = sub_1C5345CE4((uint64_t)&v215, v81, v70, (uint64_t)&v209);
    v84 = llvm::ConstantFP::get((llvm::ConstantFP **)v70, v83, 1024.0);
    v211 = 257;
    v85 = sub_1C47721F8((uint64_t)&v215, v195, (uint64_t)v84, (uint64_t)&v209, 0);
    v208 = 257;
    v86 = sub_1C534554C((uint64_t)&v215, v80, v85, (uint64_t)v207, 0);
    *(_BYTE *)(v86 + 17) |= 0xFEu;
    v211 = 257;
    v87 = sub_1C477265C((uint64_t)&v215, (uint64_t *)v72, (uint64_t)v82, (uint64_t)&v209, 0);
    *(_BYTE *)(v87 + 17) |= 0xFEu;
    v211 = 257;
    v88 = sub_1C534554C((uint64_t)&v215, (uint64_t *)v86, v87, (uint64_t)&v209, 0);
    *(_BYTE *)(v88 + 17) |= 0xFEu;
    v211 = 257;
    v89 = sub_1C53908A8((uint64_t)&v215, (uint64_t *)v88, (uint64_t *)v13, (uint64_t)&v209);
    if (v10 != 48 && v10 != 51)
    {
      v107 = *(_QWORD **)v13;
      LODWORD(v209) = (v14 >> 7) & 0x1FFFFFE;
      HIDWORD(v108) = (_DWORD)v209;
      LODWORD(v108) = (v14 >> 7) - 8;
      switch((v108 >> 3))
      {
        case 0u:
          v109 = (_QWORD *)(*v107 + 1912);
          break;
        case 1u:
          v109 = (_QWORD *)(*v107 + 1936);
          break;
        case 3u:
          v109 = (_QWORD *)(*v107 + 1960);
          break;
        case 7u:
          v109 = (_QWORD *)(*v107 + 1984);
          break;
        default:
          v179 = sub_1C5270984(*v107 + 2168, &v209);
          v109 = (_QWORD *)*((_QWORD *)v179 + 1);
          if (!v109)
          {
            v180 = v179;
            v109 = (_QWORD *)sub_1C484358C(*v107 + 2040, 24, 3);
            v181 = (int)v209;
            *v109 = v107;
            v109[2] = 0;
            v109[1] = (v181 << 8) | 0xDu;
            *((_QWORD *)v180 + 1) = v109;
          }
          break;
      }
      v211 = 257;
      v119 = sub_1C4773E38((uint64_t *)&v215, 39, (unsigned __int8 *)v81, (uint64_t)v109, (uint64_t)&v209);
      v208 = 257;
      v120 = sub_1C4773E38((uint64_t *)&v215, 40, v89, (uint64_t)v109, (uint64_t)v207);
      v206 = 257;
      v121 = (uint64_t)v109;
      v122 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)v221 + 16))(v221, v119, v120, 0, 0);
      if (!v122)
      {
        v197 = v121;
        v211 = 257;
        v123 = (char *)operator new(0x80uLL);
        v124 = v123;
        *(_QWORD *)v123 = 0;
        *((_QWORD *)v123 + 1) = 0;
        *((_QWORD *)v123 + 2) = 0;
        *((_QWORD *)v123 + 5) = 0;
        *((_QWORD *)v123 + 6) = 0;
        *((_QWORD *)v123 + 4) = 0;
        v125 = (unsigned __int8 **)(v123 + 32);
        *((_QWORD *)v123 + 8) = *(_QWORD *)v119;
        v122 = (llvm::Value *)(v123 + 64);
        *((_QWORD *)v123 + 3) = v123 + 64;
        *((_QWORD *)v123 + 7) = v123 + 64;
        *((_QWORD *)v123 + 9) = 0;
        v123[80] = 41;
        v123[81] = 0;
        *((_WORD *)v123 + 41) = 0;
        *((_DWORD *)v123 + 21) = 2;
        *((_DWORD *)v123 + 30) = 0;
        *(_OWORD *)(v123 + 104) = 0u;
        *(_OWORD *)(v123 + 88) = 0u;
        *(_QWORD *)v123 = v119;
        v128 = *((_QWORD *)v119 + 1);
        v127 = v119 + 8;
        v126 = v128;
        *((_QWORD *)v123 + 1) = v128;
        if (v128)
          *(_QWORD *)(v126 + 16) = v123 + 8;
        *((_QWORD *)v123 + 2) = v127;
        *v127 = v123;
        if (*((_QWORD *)v123 + 4))
        {
          **((_QWORD **)v123 + 6) = *((_QWORD *)v123 + 5);
          v183 = *((_QWORD *)v123 + 5);
          if (v183)
            *(_QWORD *)(v183 + 16) = *((_QWORD *)v123 + 6);
        }
        *v125 = v120;
        if (v120)
        {
          v131 = *((_QWORD *)v120 + 1);
          v130 = (unsigned __int8 ***)(v120 + 8);
          v129 = v131;
          *((_QWORD *)v123 + 5) = v131;
          if (v131)
            *(_QWORD *)(v129 + 16) = v123 + 40;
          *((_QWORD *)v123 + 6) = v130;
          *v130 = v125;
        }
        llvm::Value::setName((uint64_t ***)v123 + 8, (uint64_t)&v209);
        (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v222 + 16))(v222, v122, v205, v218, v219);
        if (v216)
        {
          v132 = v215;
          v133 = &v215[16 * v216];
          v134 = (unsigned __int8 **)(v124 + 112);
          do
          {
            v135 = *(_DWORD *)v132;
            v136 = (unsigned __int8 *)*((_QWORD *)v132 + 1);
            if (v136)
            {
              if (!v135)
              {
                v212 = (unsigned __int8 *)*((_QWORD *)v132 + 1);
                llvm::MetadataTracking::track((uint64_t)&v212, v136, 2);
                v137 = *v134;
                if (!*v134)
                {
LABEL_167:
                  v138 = v212;
                  *v134 = v212;
                  if (v138)
                    llvm::MetadataTracking::retrack((uint64_t)&v212, v138, (uint64_t)(v124 + 112));
                  goto LABEL_164;
                }
LABEL_161:
                llvm::MetadataTracking::untrack((uint64_t)(v124 + 112), v137);
                goto LABEL_167;
              }
            }
            else
            {
              v137 = *v134;
              if (!*v134 && (v124[87] & 0x20) == 0)
                goto LABEL_164;
              if (!v135)
              {
                v212 = 0;
                if (!v137)
                  goto LABEL_167;
                goto LABEL_161;
              }
            }
            llvm::Value::setMetadata(v122, *(_DWORD *)v132, (llvm::MDNode *)v136);
LABEL_164:
            v132 += 16;
          }
          while (v132 != v133);
        }
        v121 = v197;
      }
      v211 = 257;
      v139 = sub_1C4773E38((uint64_t *)&v215, 39, v189, v121, (uint64_t)&v209);
      v208 = 257;
      v110 = sub_1C4EC4040((uint64_t)&v215, (uint64_t)v122, (uint64_t)v139, (uint64_t)v207, 0, 0);
      v211 = 257;
      v112 = sub_1C4773E38((uint64_t *)&v215, 39, v190, v121, (uint64_t)&v209);
      v211 = 257;
      v90 = sub_1C4773E38((uint64_t *)&v215, 38, (unsigned __int8 *)v122, (uint64_t)v13, (uint64_t)&v209);
      v111 = v191;
      goto LABEL_171;
    }
    v208 = 257;
    v90 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v221 + 16))(v221, v89, v81, 0, 0);
    if (!v90)
    {
      v211 = 257;
      v91 = (char *)operator new(0x80uLL);
      v92 = v91;
      *(_QWORD *)v91 = 0;
      *((_QWORD *)v91 + 1) = 0;
      *((_QWORD *)v91 + 2) = 0;
      *((_QWORD *)v91 + 5) = 0;
      *((_QWORD *)v91 + 6) = 0;
      *((_QWORD *)v91 + 4) = 0;
      v93 = (uint64_t **)(v91 + 32);
      *((_QWORD *)v91 + 8) = *(_QWORD *)v89;
      v90 = (unsigned __int8 *)(v91 + 64);
      *((_QWORD *)v91 + 3) = v91 + 64;
      *((_QWORD *)v91 + 7) = v91 + 64;
      *((_QWORD *)v91 + 9) = 0;
      v91[80] = 41;
      v91[81] = 0;
      *((_WORD *)v91 + 41) = 0;
      *((_DWORD *)v91 + 21) = 2;
      *((_DWORD *)v91 + 30) = 0;
      *(_OWORD *)(v91 + 104) = 0u;
      *(_OWORD *)(v91 + 88) = 0u;
      *(_QWORD *)v91 = v89;
      v96 = *((_QWORD *)v89 + 1);
      v95 = v89 + 8;
      v94 = v96;
      *((_QWORD *)v91 + 1) = v96;
      if (v96)
        *(_QWORD *)(v94 + 16) = v91 + 8;
      *((_QWORD *)v91 + 2) = v95;
      *v95 = v91;
      if (*((_QWORD *)v91 + 4))
      {
        **((_QWORD **)v91 + 6) = *((_QWORD *)v91 + 5);
        v182 = *((_QWORD *)v91 + 5);
        if (v182)
          *(_QWORD *)(v182 + 16) = *((_QWORD *)v91 + 6);
      }
      *v93 = v81;
      if (v81)
      {
        v99 = v81[1];
        v98 = (uint64_t ***)(v81 + 1);
        v97 = v99;
        *((_QWORD *)v91 + 5) = v99;
        if (v99)
          *(_QWORD *)(v97 + 16) = v91 + 40;
        *((_QWORD *)v91 + 6) = v98;
        *v98 = v93;
      }
      llvm::Value::setName((uint64_t ***)v91 + 8, (uint64_t)&v209);
      (*(void (**)(uint64_t, unsigned __int8 *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v222 + 16))(v222, v90, v207, v218, v219);
      if (v216)
      {
        v100 = v215;
        v101 = &v215[16 * v216];
        v102 = (unsigned __int8 **)(v92 + 112);
        do
        {
          v103 = *(_DWORD *)v100;
          v104 = (unsigned __int8 *)*((_QWORD *)v100 + 1);
          if (v104)
          {
            if (!v103)
            {
              v205[0] = *((_QWORD *)v100 + 1);
              llvm::MetadataTracking::track((uint64_t)v205, v104, 2);
              v105 = *v102;
              if (!*v102)
              {
LABEL_132:
                v106 = (unsigned __int8 *)v205[0];
                *v102 = (unsigned __int8 *)v205[0];
                if (v106)
                  llvm::MetadataTracking::retrack((uint64_t)v205, v106, (uint64_t)(v92 + 112));
                goto LABEL_129;
              }
LABEL_126:
              llvm::MetadataTracking::untrack((uint64_t)(v92 + 112), v105);
              goto LABEL_132;
            }
          }
          else
          {
            v105 = *v102;
            if (!*v102 && (v92[87] & 0x20) == 0)
              goto LABEL_129;
            if (!v103)
            {
              v205[0] = 0;
              if (!v105)
                goto LABEL_132;
              goto LABEL_126;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v90, *(_DWORD *)v100, (llvm::MDNode *)v104);
LABEL_129:
          v100 += 16;
        }
        while (v100 != v101);
      }
    }
    v211 = 257;
    v110 = sub_1C4EC4040((uint64_t)&v215, (uint64_t)v90, (uint64_t)v189, (uint64_t)&v209, 0, 0);
    v112 = v190;
    v111 = v191;
LABEL_171:
    v211 = 257;
    v140 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&v215, 36, (uint64_t)v112, v110, (uint64_t)&v209);
    v211 = 257;
    v141 = sub_1C4773E38((uint64_t *)&v215, 39, v140, (uint64_t)v13, (uint64_t)&v209);
    v208 = 257;
    v142 = (llvm::Value *)sub_1C47733F8((uint64_t)&v215, (uint64_t)v90, (uint64_t)v141, (uint64_t)v207, 0, 0);
    if (v10 == 51 || v10 == 48)
    {
      v211 = 257;
      v143 = sub_1C4774B48((uint64_t)&v215, 40, (uint64_t)v193, v187, (uint64_t)&v209);
      v208 = 257;
      v144 = (uint64_t *)sub_1C47733F8((uint64_t)&v215, v187, (uint64_t)v142, (uint64_t)v207, 0, 0);
      v206 = 257;
      v142 = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v215, v143, v144, (uint64_t)v142, (uint64_t)v205, 0);
    }
    v145 = *(unsigned __int8 *)(v9 + 16);
    if ((v145 & 0xFE) == 0x32)
    {
      v211 = 257;
      v146 = sub_1C4EC4040((uint64_t)&v215, (uint64_t)v142, v111, (uint64_t)&v209, 0, 0);
      v208 = 257;
      v142 = (llvm::Value *)sub_1C47733F8((uint64_t)&v215, v192, v146, (uint64_t)v207, 0, 0);
      if (v10 != 48 && v10 != 51)
      {
        v211 = 257;
        v147 = sub_1C4774B48((uint64_t)&v215, 36, v192, v111, (uint64_t)&v209);
        v208 = 257;
        v148 = (uint64_t *)v192;
        goto LABEL_182;
      }
    }
    else if ((v145 - 47) > 1)
    {
      v142 = 0;
    }
    else if (v10 != 48 && v10 != 51)
    {
      v211 = 257;
      v147 = sub_1C4774B48((uint64_t)&v215, 36, v192, v111, (uint64_t)&v209);
      v208 = 257;
      v148 = (uint64_t *)v187;
LABEL_182:
      v142 = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v215, v147, v148, (uint64_t)v142, (uint64_t)v207, 0);
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, v142, (llvm::Value *)1);
    v149 = *(_DWORD *)(v9 + 20);
    if ((v149 & 0x40000000) != 0)
    {
      v151 = *(_QWORD *)(v9 - 8);
      v150 = v149 & 0x7FFFFFF;
    }
    else
    {
      v150 = v149 & 0x7FFFFFF;
      v151 = v9 - 32 * v150;
    }
    v3 = v198;
    if (v150)
    {
      v152 = 32 * v150;
      v153 = (_QWORD **)(v151 + 16);
      do
      {
        if (*(v153 - 2))
        {
          **v153 = *(v153 - 1);
          v154 = (uint64_t)*(v153 - 1);
          if (v154)
            *(_QWORD *)(v154 + 16) = *v153;
        }
        *(v153 - 2) = 0;
        v153 += 4;
        v152 -= 32;
      }
      while (v152);
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v9 + 40) + 40, (uint64_t ***)v9);
    v155 = *(_QWORD *)(v9 + 24);
    v156 = *(_QWORD **)(v9 + 32);
    *v156 = v155;
    *(_QWORD *)(v155 + 8) = v156;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v9);
    if (v215 != v217)
      free(v215);
LABEL_194:
    v17 = 0;
    v2 = 1;
LABEL_195:
    v158 = v200;
    v157 = v201;
    v159 = (uint64_t *)((char *)&v202 + 4);
    if (v201 != v200)
      v159 = &v202;
    v160 = *(unsigned int *)v159;
    v161 = (unint64_t *)v201;
    if ((_DWORD)v160)
    {
      v162 = 0;
      while (*(_QWORD *)&v201[v162] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v162 += 8;
        if (8 * v160 == v162)
          goto LABEL_219;
      }
      v161 = (unint64_t *)&v201[v162];
    }
    v163 = &v201[8 * v160];
    if (v161 != (unint64_t *)v163)
    {
      v164 = *v161;
LABEL_205:
      v165 = *(_DWORD *)(v164 + 20);
      if ((v165 & 0x40000000) != 0)
      {
        v167 = *(_QWORD *)(v164 - 8);
        v166 = v165 & 0x7FFFFFF;
        if (!v166)
          goto LABEL_212;
      }
      else
      {
        v166 = v165 & 0x7FFFFFF;
        v167 = v164 - 32 * v166;
        if (!v166)
          goto LABEL_212;
      }
      v168 = 32 * v166;
      v169 = (_QWORD **)(v167 + 16);
      do
      {
        if (*(v169 - 2))
        {
          **v169 = *(v169 - 1);
          v170 = (uint64_t)*(v169 - 1);
          if (v170)
            *(_QWORD *)(v170 + 16) = *v169;
        }
        *(v169 - 2) = 0;
        v169 += 4;
        v168 -= 32;
      }
      while (v168);
LABEL_212:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v164 + 40) + 40, (uint64_t ***)v164);
      v171 = *(_QWORD *)(v164 + 24);
      v172 = *(_QWORD **)(v164 + 32);
      *v172 = v171;
      *(_QWORD *)(v171 + 8) = v172;
      *(_QWORD *)(v164 + 24) = 0;
      *(_QWORD *)(v164 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v164);
      v173 = v161 + 1;
      while (v173 != (unint64_t *)v163)
      {
        v174 = *v173++;
        v164 = v174;
        if (v174 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v161 = v173 - 1;
          goto LABEL_205;
        }
      }
      v158 = v200;
      v157 = v201;
      v3 = v198;
    }
LABEL_219:
    if (v157 == v158)
      goto LABEL_220;
    if (v202 < 0x21 || 4 * (HIDWORD(v202) - v203) >= v202)
    {
      memset(v157, 255, 8 * v202);
LABEL_220:
      HIDWORD(v202) = 0;
      v203 = 0;
      continue;
    }
    free(v157);
    v176 = 1 << (33 - __clz(HIDWORD(v202) - v203 - 1));
    v12 = (HIDWORD(v202) - v203) > 0x10;
    HIDWORD(v202) = 0;
    v203 = 0;
    if (v12)
      v177 = v176;
    else
      v177 = 32;
    LODWORD(v202) = v177;
    v178 = (char *)malloc_type_malloc(8 * v177, 0x4065EBACuLL);
    if (!v178)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v201 = v178;
    memset(v178, 255, 8 * v202);
  }
  while ((v17 & 1) == 0);
  if (v201 != v200)
    free(v201);
  return v2 & 1;
}

uint64_t sub_1C5E9F490(uint64_t a1, void **a2, llvm::Instruction *a3)
{
  unint64_t *v3;
  uint64_t v4;
  void **v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  llvm **v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  llvm::Value *v27;
  llvm::Instruction *v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unsigned __int8 **v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  int v54;
  unsigned __int8 **v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  unsigned __int8 **v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD **v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD **v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t *v101;
  unint64_t v102;
  int v105;
  BOOL v106;
  unsigned int v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v111;
  char v112[32];
  __int16 v113;
  unint64_t *v114;
  unint64_t *v115;
  uint64_t v116;
  int v117;
  _BYTE v118[64];
  _BYTE v119[32];
  __int16 v120;
  unsigned __int8 *v121;
  void *v122;
  unsigned int v123;
  _QWORD v124[7];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)v118;
  v114 = (unint64_t *)v118;
  v115 = (unint64_t *)v118;
  v116 = 8;
  v117 = 0;
  v4 = *(_QWORD *)(a1 + 80);
  v109 = a1 + 72;
  if (v4 != a1 + 72)
  {
    v6 = a2;
    v7 = 0;
    v8 = v124;
    while (1)
    {
      v9 = v4 - 24;
      v111 = v4;
      if (!v4)
        v9 = 0;
      v10 = v9 + 40;
      v11 = *(_QWORD *)(v9 + 48);
      while (v11 != v10)
      {
        v12 = v11 - 24;
        v48 = v11 == 0;
        v11 = *(_QWORD *)(v11 + 8);
        if (v48)
          v13 = 0;
        else
          v13 = v12;
        v14 = *(unsigned __int8 *)(v13 + 16);
        if (v14 != 57)
          goto LABEL_18;
        v15 = *(_DWORD *)(v13 + 20);
        if ((v15 & 0x40000000) != 0)
          v16 = *(llvm ***)(v13 - 8);
        else
          v16 = (llvm **)(v13 - 32 * (v15 & 0x7FFFFFF));
        if (llvm::haveNoCommonBitsSet(*v16, v16[4], v6, 0, (llvm::AssumptionCache *)v13, a3, (const llvm::DominatorTree *)1))
        {
          sub_1C4773D54((uint64_t)&v122, v13, 0, 0, 0);
          v17 = *(_DWORD *)(v13 + 20);
          if ((v17 & 0x40000000) != 0)
            v18 = *(_QWORD *)(v13 - 8);
          else
            v18 = v13 - 32 * (v17 & 0x7FFFFFF);
          v25 = *(_QWORD **)v18;
          v26 = *(_QWORD *)(v18 + 32);
          v113 = 257;
          v27 = (llvm::Value *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v125 + 16))(v125, v25, v26, 0, 0);
          if (!v27)
          {
            v28 = a3;
            v120 = 257;
            v29 = (char *)operator new(0x80uLL);
            v30 = v29;
            *(_QWORD *)v29 = 0;
            *((_QWORD *)v29 + 1) = 0;
            *((_QWORD *)v29 + 2) = 0;
            *((_QWORD *)v29 + 5) = 0;
            *((_QWORD *)v29 + 6) = 0;
            *((_QWORD *)v29 + 4) = 0;
            v31 = v29 + 32;
            *((_QWORD *)v29 + 8) = *v25;
            v27 = (llvm::Value *)(v29 + 64);
            *((_QWORD *)v29 + 3) = v29 + 64;
            *((_QWORD *)v29 + 7) = v29 + 64;
            *((_QWORD *)v29 + 9) = 0;
            v29[80] = 41;
            v29[81] = 0;
            *((_WORD *)v29 + 41) = 0;
            *((_DWORD *)v29 + 21) = 2;
            *((_DWORD *)v29 + 30) = 0;
            *(_OWORD *)(v29 + 104) = 0u;
            *(_OWORD *)(v29 + 88) = 0u;
            *(_QWORD *)v29 = v25;
            v34 = v25[1];
            v33 = v25 + 1;
            v32 = v34;
            *((_QWORD *)v29 + 1) = v34;
            if (v34)
              *(_QWORD *)(v32 + 16) = v29 + 8;
            v35 = v8;
            *((_QWORD *)v29 + 2) = v33;
            *v33 = v29;
            if (*((_QWORD *)v29 + 4))
            {
              **((_QWORD **)v29 + 6) = *((_QWORD *)v29 + 5);
              v85 = *((_QWORD *)v29 + 5);
              if (v85)
                *(_QWORD *)(v85 + 16) = *((_QWORD *)v29 + 6);
            }
            *v31 = v26;
            if (v26)
            {
              v38 = *(_QWORD *)(v26 + 8);
              v37 = (_QWORD *)(v26 + 8);
              v36 = v38;
              *((_QWORD *)v29 + 5) = v38;
              if (v38)
                *(_QWORD *)(v36 + 16) = v29 + 40;
              *((_QWORD *)v29 + 6) = v37;
              *v37 = v31;
            }
            llvm::Value::setName((uint64_t ***)v29 + 8, (uint64_t)v119);
            (*(void (**)(uint64_t, llvm::Value *, char *, _QWORD, _QWORD))(*(_QWORD *)v126 + 16))(v126, v27, v112, v124[4], v124[5]);
            if (v123)
            {
              v39 = (char *)v122;
              v40 = (char *)v122 + 16 * v123;
              v41 = (unsigned __int8 **)(v30 + 112);
              do
              {
                v42 = *(_DWORD *)v39;
                v43 = (unsigned __int8 *)*((_QWORD *)v39 + 1);
                if (v43)
                {
                  if (!v42)
                  {
                    v121 = (unsigned __int8 *)*((_QWORD *)v39 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v121, v43, 2);
                    v44 = *v41;
                    if (!*v41)
                    {
LABEL_49:
                      v45 = v121;
                      *v41 = v121;
                      if (v45)
                        llvm::MetadataTracking::retrack((uint64_t)&v121, v45, (uint64_t)(v30 + 112));
                      goto LABEL_46;
                    }
LABEL_43:
                    llvm::MetadataTracking::untrack((uint64_t)(v30 + 112), v44);
                    goto LABEL_49;
                  }
                }
                else
                {
                  v44 = *v41;
                  if (!*v41 && (v30[87] & 0x20) == 0)
                    goto LABEL_46;
                  if (!v42)
                  {
                    v121 = 0;
                    if (!v44)
                      goto LABEL_49;
                    goto LABEL_43;
                  }
                }
                llvm::Value::setMetadata(v27, *(_DWORD *)v39, (llvm::MDNode *)v43);
LABEL_46:
                v39 += 16;
              }
              while (v39 != v40);
            }
            v8 = v35;
            a3 = v28;
            v6 = a2;
          }
          *((_BYTE *)v27 + 17) |= 6u;
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, v27, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v114, v13);
          if (v122 != v8)
            free(v122);
          v7 = 1;
        }
        else
        {
          v14 = *(unsigned __int8 *)(v13 + 16);
LABEL_18:
          if (v14 == 56)
          {
            if (*(_DWORD *)(*(_QWORD *)v13 + 8) == 8205)
            {
              v23 = *(_DWORD *)(v13 + 20);
              v24 = (v23 & 0x40000000) != 0 ? *(_QWORD *)(v13 - 8) : v13 - 32 * (v23 & 0x7FFFFFF);
              v51 = *(_QWORD *)(v24 + 32);
              if (v51 && *(_BYTE *)(v51 + 16) == 16)
              {
                v53 = (_QWORD *)(v51 + 24);
                if (*(_DWORD *)(v51 + 32) >= 0x41u)
                  v53 = (_QWORD *)*v53;
                if (*v53 == 0xFFFFLL)
                {
                  sub_1C4773D54((uint64_t)&v122, v13, 0, 0, 0);
                  v54 = *(_DWORD *)(v13 + 20);
                  if ((v54 & 0x40000000) != 0)
                    v55 = *(unsigned __int8 ***)(v13 - 8);
                  else
                    v55 = (unsigned __int8 **)(v13 - 32 * (v54 & 0x7FFFFFF));
                  v56 = ***(_QWORD ***)v13 + 1936;
                  v57 = *v55;
                  v120 = 257;
                  v58 = sub_1C4773E38((uint64_t *)&v122, 38, v57, v56, (uint64_t)v119);
                  v59 = *(_QWORD *)v13;
                  v120 = 257;
                  v60 = sub_1C4773E38((uint64_t *)&v122, 39, v58, v59, (uint64_t)v119);
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, (llvm::Value *)v60, (llvm::Value *)1);
                  v61 = *(_DWORD *)(v13 + 20);
                  if ((v61 & 0x40000000) != 0)
                  {
                    v63 = *(_QWORD *)(v13 - 8);
                    v62 = v61 & 0x7FFFFFF;
                    if (v62)
                      goto LABEL_80;
                  }
                  else
                  {
                    v62 = v61 & 0x7FFFFFF;
                    v63 = v13 - 32 * v62;
                    if (v62)
                    {
LABEL_80:
                      v64 = 32 * v62;
                      v65 = (_QWORD **)(v63 + 16);
                      do
                      {
                        if (*(v65 - 2))
                        {
                          **v65 = *(v65 - 1);
                          v66 = (uint64_t)*(v65 - 1);
                          if (v66)
                            *(_QWORD *)(v66 + 16) = *v65;
                        }
                        *(v65 - 2) = 0;
                        v65 += 4;
                        v64 -= 32;
                      }
                      while (v64);
                    }
                  }
                  v67 = v13;
                  goto LABEL_86;
                }
              }
            }
          }
          else if (v14 == 55 && *(_DWORD *)(*(_QWORD *)v13 + 8) == 8205)
          {
            v19 = *(_DWORD *)(v13 + 20);
            if ((v19 & 0x40000000) != 0)
            {
              v20 = *(uint64_t **)(v13 - 8);
              v21 = *v20;
              v22 = *(unsigned __int8 *)(*v20 + 16);
              if (v22 > 0x1B)
              {
LABEL_56:
                v46 = v20[4];
                if (*(_BYTE *)(v46 + 16) != 16)
                  v46 = 0;
                if (v22 == 53)
                {
                  v47 = *(_QWORD *)(v21 + 8);
                  if (v47)
                  {
                    v48 = *(_QWORD *)(v47 + 8) || v46 == 0;
                    if (!v48)
                    {
                      v49 = *(_DWORD *)(v21 + 20);
                      v50 = (v49 & 0x40000000) != 0 ? *(_QWORD *)(v21 - 8) : v21 - 32 * (v49 & 0x7FFFFFF);
                      v68 = *(_QWORD *)(v50 + 32);
                      if (v68 && *(_BYTE *)(v68 + 16) == 16)
                      {
                        v70 = (_QWORD *)(v68 + 24);
                        if (*(_DWORD *)(v68 + 32) >= 0x41u)
                          v70 = (_QWORD *)*v70;
                        if (*v70 == 16)
                        {
                          v71 = (_QWORD *)(v46 + 24);
                          if (*(_DWORD *)(v46 + 32) >= 0x41u)
                            v71 = (_QWORD *)*v71;
                          if (*v71 == 16)
                          {
                            sub_1C4773D54((uint64_t)&v122, v13, 0, 0, 0);
                            v72 = *(_DWORD *)(v21 + 20);
                            if ((v72 & 0x40000000) != 0)
                              v73 = *(unsigned __int8 ***)(v21 - 8);
                            else
                              v73 = (unsigned __int8 **)(v21 - 32 * (v72 & 0x7FFFFFF));
                            v74 = ***(_QWORD ***)v13 + 1936;
                            v75 = *v73;
                            v120 = 257;
                            v76 = sub_1C4773E38((uint64_t *)&v122, 38, v75, v74, (uint64_t)v119);
                            v77 = *(_QWORD *)v13;
                            v120 = 257;
                            v78 = sub_1C4773E38((uint64_t *)&v122, 40, v76, v77, (uint64_t)v119);
                            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, (llvm::Value *)v78, (llvm::Value *)1);
                            v79 = *(_DWORD *)(v13 + 20);
                            if ((v79 & 0x40000000) != 0)
                            {
                              v81 = *(_QWORD *)(v13 - 8);
                              v80 = v79 & 0x7FFFFFF;
                              if (v80)
                              {
LABEL_108:
                                v82 = 32 * v80;
                                v83 = (_QWORD **)(v81 + 16);
                                do
                                {
                                  if (*(v83 - 2))
                                  {
                                    **v83 = *(v83 - 1);
                                    v84 = (uint64_t)*(v83 - 1);
                                    if (v84)
                                      *(_QWORD *)(v84 + 16) = *v83;
                                  }
                                  *(v83 - 2) = 0;
                                  v83 += 4;
                                  v82 -= 32;
                                }
                                while (v82);
                              }
                            }
                            else
                            {
                              v80 = v79 & 0x7FFFFFF;
                              v81 = v13 - 32 * v80;
                              if (v80)
                                goto LABEL_108;
                            }
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v114, v13);
                            v67 = v21;
LABEL_86:
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v114, v67);
                            if (v122 != v8)
                              free(v122);
                            v7 = 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              v20 = (uint64_t *)(v13 - 32 * (v19 & 0x7FFFFFF));
              v21 = *v20;
              v22 = *(unsigned __int8 *)(*v20 + 16);
              if (v22 >= 0x1C)
                goto LABEL_56;
            }
          }
        }
      }
      v4 = *(_QWORD *)(v111 + 8);
      if (v4 == v109)
      {
        v3 = v114;
        v86 = v115;
        v88 = v116;
        LODWORD(v87) = HIDWORD(v116);
        goto LABEL_121;
      }
    }
  }
  LODWORD(v87) = 0;
  v7 = 0;
  v88 = 8;
  v86 = (unint64_t *)v118;
LABEL_121:
  if (v86 == v3)
    v87 = v87;
  else
    v87 = v88;
  v89 = v86;
  if ((_DWORD)v87)
  {
    v90 = 0;
    while (v86[v90] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v87 == ++v90)
        goto LABEL_146;
    }
    v89 = &v86[v90];
  }
  v91 = &v86[v87];
  if (v89 != v91)
  {
    v92 = *v89;
LABEL_132:
    v93 = *(_DWORD *)(v92 + 20);
    if ((v93 & 0x40000000) != 0)
    {
      v95 = *(_QWORD *)(v92 - 8);
      v94 = v93 & 0x7FFFFFF;
      if (!v94)
        goto LABEL_139;
    }
    else
    {
      v94 = v93 & 0x7FFFFFF;
      v95 = v92 - 32 * v94;
      if (!v94)
        goto LABEL_139;
    }
    v96 = 32 * v94;
    v97 = (_QWORD **)(v95 + 16);
    do
    {
      if (*(v97 - 2))
      {
        **v97 = *(v97 - 1);
        v98 = (uint64_t)*(v97 - 1);
        if (v98)
          *(_QWORD *)(v98 + 16) = *v97;
      }
      *(v97 - 2) = 0;
      v97 += 4;
      v96 -= 32;
    }
    while (v96);
LABEL_139:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v92 + 40) + 40, (uint64_t ***)v92);
    v99 = *(_QWORD *)(v92 + 24);
    v100 = *(_QWORD **)(v92 + 32);
    *v100 = v99;
    *(_QWORD *)(v99 + 8) = v100;
    *(_QWORD *)(v92 + 24) = 0;
    *(_QWORD *)(v92 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v92);
    v101 = v89 + 1;
    while (v101 != v91)
    {
      v102 = *v101++;
      v92 = v102;
      if (v102 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v89 = v101 - 1;
        goto LABEL_132;
      }
    }
    v3 = v114;
    v86 = v115;
  }
LABEL_146:
  if (v86 == v3)
  {
LABEL_147:
    HIDWORD(v116) = 0;
    v117 = 0;
    goto LABEL_148;
  }
  if (v116 < 0x21 || 4 * (HIDWORD(v116) - v117) >= v116)
  {
    memset(v86, 255, 8 * v116);
    goto LABEL_147;
  }
  free(v86);
  v105 = 1 << (33 - __clz(HIDWORD(v116) - v117 - 1));
  v106 = (HIDWORD(v116) - v117) > 0x10;
  HIDWORD(v116) = 0;
  v117 = 0;
  if (v106)
    v107 = v105;
  else
    v107 = 32;
  LODWORD(v116) = v107;
  v108 = (unint64_t *)malloc_type_malloc(8 * v107, 0x4065EBACuLL);
  if (!v108)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v115 = v108;
  memset(v108, 255, 8 * v116);
LABEL_148:
  if (v115 != v114)
    free(v115);
  return v7 & 1;
}

llvm::APFloatBase *sub_1C5E9FD60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  _BOOL4 v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  const llvm::APFloat *v13;
  int v14;
  llvm::APFloatBase *result;
  llvm::APFloatBase *v16;
  uint64_t v17;
  char v18;
  char v19[8];
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;

  v1 = a1;
  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((_UNKNOWN *)v2 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v20, (const llvm::detail::DoubleAPFloat *)(a1 + 32));
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 32);
    if ((*(_DWORD *)(v2 + 8) + 64) >= 0x80)
    {
      v17 = v2;
      a1 = operator new[]();
      v2 = v17;
      v21 = a1;
    }
    v3 = *(_BYTE *)(v1 + 52);
    v4 = v3 & 7;
    v23 = v3 & 0xF;
    v22 = *(_DWORD *)(v1 + 48);
    v6 = (v3 & 6) != 0 && v4 != 3;
    if (v4 == 1 || v6)
    {
      v8 = *(unsigned int *)(v2 + 8);
      if ((v8 - 64) <= 0xFFFFFF7F)
        v9 = (uint64_t *)a1;
      else
        v9 = &v21;
      v10 = (uint64_t *)(v1 + 40);
      if ((*(_DWORD *)(*(_QWORD *)(v1 + 32) + 8) - 64) < 0xFFFFFF80)
        v10 = *(uint64_t **)(v1 + 40);
      if (v8 <= 0xFFFFFFBF)
      {
        v11 = (unint64_t)(v8 + 64) >> 6;
        do
        {
          v12 = *v10++;
          *v9++ = v12;
          --v11;
        }
        while (v11);
      }
    }
  }
  v18 = 0;
  v14 = llvm::APFloat::convert((uint64_t)v19, &unk_1C866F15C, 1, &v18);
  result = 0;
  if (!v14 && !v18)
    result = llvm::ConstantFP::get(**(llvm::ConstantFP ***)v1, (llvm::LLVMContext *)v19, v13);
  if ((_UNKNOWN *)v20 == &unk_1C866F1C0)
  {
    v16 = result;
    sub_1C4773C74(&v21);
    return v16;
  }
  if ((*(_DWORD *)(v20 + 8) - 64) <= 0xFFFFFF7F && v21)
  {
    v16 = result;
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    return v16;
  }
  return result;
}

uint64_t sub_1C5E9FF40(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  _BOOL4 v26;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  llvm::ConstantInt *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  int v46;
  llvm::ConstantInt ***v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  uint64_t v51;
  int v52;
  BOOL v53;
  int v54;
  llvm::ConstantInt ***v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v61;
  llvm::ConstantInt ***v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v69;
  llvm::ConstantFP **v70;
  llvm::Type *v71;
  llvm::APFloatBase *v72;
  llvm::Type *v73;
  llvm::APFloatBase *v74;
  llvm::PHINode *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::Value *FCmpHelper;
  int v91;
  uint64_t v92;
  _QWORD **v93;
  uint64_t v94;
  uint64_t v95;
  llvm::PHINode *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v103;
  uint64_t *v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  llvm::Value **v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  int v120;
  uint64_t v121;
  _QWORD **v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t i;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  BOOL v130;
  int v131;
  _QWORD **v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  int v143;
  uint64_t *v144;
  uint64_t v145;
  llvm::APFloatBase *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  unsigned __int8 *v156;
  int v157;
  uint64_t v158;
  _QWORD **v159;
  uint64_t v160;
  unint64_t *v161;
  uint64_t v162;
  unsigned int v163;
  unint64_t *v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  _QWORD **v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE v182[32];
  __int16 v183;
  unint64_t *v184;
  unint64_t *v185;
  uint64_t v186;
  int v187;
  _BYTE v188[64];
  void *v189[2];
  uint64_t v190;
  __int16 v191;
  void *v192[2];
  _QWORD v193[17];

  v193[15] = *MEMORY[0x1E0C80C00];
  v1 = (unint64_t *)v188;
  v184 = (unint64_t *)v188;
  v185 = (unint64_t *)v188;
  v186 = 8;
  v187 = 0;
  v2 = *(_QWORD *)(a1 + 80);
  v179 = a1 + 72;
  if (v2 != a1 + 72)
  {
    v3 = 0;
    while (1)
    {
      v4 = v2 ? v2 - 24 : 0;
      v5 = v4 + 40;
      v6 = *(_QWORD *)(v4 + 48);
      v7 = v6;
      if (v6 == v5)
      {
LABEL_12:
        v8 = 0;
      }
      else
      {
        while (1)
        {
          v8 = v7 - 24;
          v9 = v7 ? v7 - 24 : 0;
          if (*(_BYTE *)(v9 + 16) != 83)
            break;
          v7 = *(_QWORD *)(v7 + 8);
          if (v7 == v5)
            goto LABEL_12;
        }
      }
      v180 = v2;
      v10 = v8 ? v8 + 24 : 0;
      v181 = v10;
      if (v6 != v10)
        break;
LABEL_260:
      v2 = *(_QWORD *)(v180 + 8);
      if (v2 == v179)
      {
        v1 = v184;
        v161 = v185;
        v163 = v186;
        LODWORD(v162) = HIDWORD(v186);
        goto LABEL_263;
      }
    }
    while (1)
    {
      v18 = v6;
      v6 = *(_QWORD *)(v6 + 8);
      if (v18)
        v19 = v18 - 24;
      else
        v19 = 0;
      v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 == 83)
        v21 = v19;
      else
        v21 = 0;
      if (v18 && v20 == 83)
      {
        v22 = *(_DWORD *)(*(_QWORD *)v19 + 8);
        v23 = *(_DWORD *)(*(_QWORD *)v19 + 8) >> 8;
        if (v22 == 13 && v23 == 1)
        {
          v31 = *(_DWORD *)(v19 + 20);
          if ((v31 & 0x40000000) != 0)
          {
            v33 = *(_QWORD *)(v19 - 8);
            v32 = v31 & 0x7FFFFFF;
            if (v32)
            {
LABEL_116:
              v65 = 32 * v32;
              while (*(_BYTE *)(*(_QWORD *)v33 + 16) == 16)
              {
                v33 += 32;
                v65 -= 32;
                if (!v65)
                  goto LABEL_119;
              }
              goto LABEL_259;
            }
          }
          else
          {
            v32 = v31 & 0x7FFFFFF;
            v33 = v19 - 32 * v32;
            if (v32)
              goto LABEL_116;
          }
LABEL_119:
          v66 = *(_QWORD *)(v19 + 8);
          if (!v66)
          {
LABEL_126:
            sub_1C4773D54((uint64_t)v192, v19, 0, 0, 0);
            v69 = *(_DWORD *)(v21 + 20) & 0x7FFFFFF;
            v70 = (llvm::ConstantFP **)(***(_QWORD ***)v19 + 1624);
            v72 = llvm::ConstantFP::get(v70, v71, 0.0);
            v74 = llvm::ConstantFP::get(v70, v73, 1.0);
            v191 = 257;
            v75 = (llvm::PHINode *)sub_1C4867E94((uint64_t)v192, (uint64_t)v70, v69, (uint64_t)v189);
            if ((_DWORD)v69)
            {
              v76 = 0;
              v77 = 0;
              v78 = 32 * v69;
              do
              {
                v79 = *(_DWORD *)(v21 + 20);
                if ((v79 & 0x40000000) != 0)
                  v80 = *(_QWORD *)(v21 - 8);
                else
                  v80 = v21 - 32 * (v79 & 0x7FFFFFF);
                v81 = *(_QWORD *)(v80 + v77);
                v82 = (_QWORD *)(v81 + 24);
                if (*(_DWORD *)(v81 + 32) >= 0x41u)
                  v82 = (_QWORD *)*v82;
                if (*v82)
                  v83 = (uint64_t)v72;
                else
                  v83 = (uint64_t)v74;
                if ((v79 & 0x40000000) != 0)
                  v84 = *(_QWORD *)(v21 - 8);
                else
                  v84 = v21 - 32 * (v79 & 0x7FFFFFF);
                sub_1C477667C(v75, v83, *(_QWORD *)(v84 + 32 * *(unsigned int *)(v21 + 60) + v76));
                v77 += 32;
                v76 += 8;
              }
              while (v78 != v77);
            }
            v85 = *(_QWORD *)(v19 + 40);
            v86 = v85 + 40;
            v87 = *(_QWORD *)(v85 + 48);
            if (v87 == v86)
            {
LABEL_146:
              v88 = 0;
            }
            else
            {
              while (1)
              {
                v88 = v87 - 24;
                v89 = v87 ? v87 - 24 : 0;
                if (*(_BYTE *)(v89 + 16) != 83)
                  break;
                v87 = *(_QWORD *)(v87 + 8);
                if (v87 == v86)
                  goto LABEL_146;
              }
            }
            sub_1C4773D54((uint64_t)v189, v88, 0, 0, 0);
            v183 = 257;
            FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v189, 1, (uint64_t *)v75, (uint64_t)v72, (uint64_t)v182, 0, 0);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v19, FCmpHelper, (llvm::Value *)1);
            v91 = *(_DWORD *)(v19 + 20);
            if ((v91 & 0x40000000) != 0)
            {
              v12 = *(_QWORD *)(v19 - 8);
              v13 = v91 & 0x7FFFFFF;
            }
            else
            {
              v13 = v91 & 0x7FFFFFF;
              v12 = v19 - 32 * v13;
            }
            v10 = v181;
            if (v13)
            {
              v92 = 32 * v13;
              v93 = (_QWORD **)(v12 + 16);
              do
              {
                if (*(v93 - 2))
                {
                  **v93 = *(v93 - 1);
                  v94 = (uint64_t)*(v93 - 1);
                  if (v94)
                    *(_QWORD *)(v94 + 16) = *v93;
                }
                *(v93 - 2) = 0;
                v93 += 4;
                v92 -= 32;
              }
              while (v92);
            }
            goto LABEL_254;
          }
          while (1)
          {
            v67 = *(unsigned __int8 *)(*(_QWORD *)(v66 + 24) + 16);
            if (v67 != 85 && v67 != 30)
              break;
            v66 = *(_QWORD *)(v66 + 8);
            if (!v66)
              goto LABEL_126;
          }
        }
        else
        {
          v26 = v23 == 32 || v23 == 64;
          if (v22 != 13 || !v26)
          {
            if (v22 == 2 && sub_1C5EA0B48(v19, 0))
            {
              v28 = *(_DWORD *)(v19 + 20);
              if ((v28 & 0x40000000) != 0)
              {
                v30 = *(uint64_t **)(v19 - 8);
                v29 = v28 & 0x7FFFFFF;
              }
              else
              {
                v29 = v28 & 0x7FFFFFF;
                v30 = (uint64_t *)(v19 - 32 * v29);
              }
              v124 = *(_DWORD *)(v21 + 20);
              v125 = ***(_QWORD ***)v19 + 1624;
              if (v29)
              {
                for (i = 32 * v29; i; i -= 32)
                {
                  v127 = *v30;
                  v128 = *(unsigned __int8 *)(*v30 + 16);
                  if (v128 <= 0x1B)
                    v129 = 0;
                  else
                    v129 = *v30;
                  if (v127)
                    v130 = v128 == 17;
                  else
                    v130 = 0;
                  if (v130)
                  {
                    if (!sub_1C5E9FD60(v127))
                      goto LABEL_18;
                  }
                  else if (!v129
                         || *(_BYTE *)(v129 + 16) != 74
                         || ((v131 = *(_DWORD *)(v129 + 20), (v131 & 0x40000000) != 0)
                           ? (v132 = *(_QWORD ***)(v129 - 8))
                           : (v132 = (_QWORD **)(v129 - 32 * (v131 & 0x7FFFFFF))),
                             **v132 != v125))
                  {
LABEL_18:
                    v10 = v181;
                    goto LABEL_259;
                  }
                  v30 += 4;
                }
              }
              v133 = v124 & 0x7FFFFFF;
              v134 = sub_1C4773D54((uint64_t)v192, v19, 0, 0, 0);
              v191 = 257;
              v135 = (uint64_t *)sub_1C4867E94(v134, v125, v124 & 0x7FFFFFF, (uint64_t)v189);
              if ((v124 & 0x7FFFFFF) == 0)
              {
LABEL_240:
                v150 = *(_QWORD *)(v19 + 40);
                v151 = v150 + 40;
                v152 = *(_QWORD *)(v150 + 48);
                v10 = v181;
                if (v152 == v151)
                {
LABEL_246:
                  v153 = 0;
                }
                else
                {
                  while (1)
                  {
                    v153 = v152 - 24;
                    v154 = v152 ? v152 - 24 : 0;
                    if (*(_BYTE *)(v154 + 16) != 83)
                      break;
                    v152 = *(_QWORD *)(v152 + 8);
                    if (v152 == v151)
                      goto LABEL_246;
                  }
                }
                sub_1C4773D54((uint64_t)v189, v153, 0, 0, 0);
                v155 = *(uint64_t **)v19;
                v183 = 257;
                v156 = sub_1C47721A0((uint64_t)v189, v135, v155, (uint64_t)v182);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v19, (llvm::Value *)v156, (llvm::Value *)1);
                v157 = *(_DWORD *)(v19 + 20);
                if ((v157 & 0x40000000) != 0)
                {
                  v16 = *(_QWORD *)(v19 - 8);
                  v17 = v157 & 0x7FFFFFF;
                  if (!v17)
                    goto LABEL_254;
                }
                else
                {
                  v17 = v157 & 0x7FFFFFF;
                  v16 = v19 - 32 * v17;
                  if (!v17)
                    goto LABEL_254;
                }
                v158 = 32 * v17;
                v159 = (_QWORD **)(v16 + 16);
                do
                {
                  if (*(v159 - 2))
                  {
                    **v159 = *(v159 - 1);
                    v160 = (uint64_t)*(v159 - 1);
                    if (v160)
                      *(_QWORD *)(v160 + 16) = *v159;
                  }
                  *(v159 - 2) = 0;
                  v159 += 4;
                  v158 -= 32;
                }
                while (v158);
LABEL_254:
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v184, v19);
                if (v189[0] != &v190)
                  free(v189[0]);
                if (v192[0] != v193)
                  free(v192[0]);
                v3 = 1;
                goto LABEL_259;
              }
              v136 = 0;
              v137 = 0;
              v138 = 32 * v133;
              while (2)
              {
                v139 = *(_DWORD *)(v21 + 20);
                if ((v139 & 0x40000000) != 0)
                  v140 = *(_QWORD *)(v21 - 8);
                else
                  v140 = v21 - 32 * (v139 & 0x7FFFFFF);
                v141 = *(_QWORD *)(v140 + v137);
                if (v141)
                  v142 = *(_BYTE *)(v141 + 16) == 17;
                else
                  v142 = 0;
                if (v142)
                {
                  v146 = sub_1C5E9FD60(v141);
                  v147 = *(_DWORD *)(v21 + 20);
                  if ((v147 & 0x40000000) != 0)
                    v148 = *(_QWORD *)(v21 - 8);
                  else
                    v148 = v21 - 32 * (v147 & 0x7FFFFFF);
                  sub_1C477667C((llvm::PHINode *)v135, (uint64_t)v146, *(_QWORD *)(v148 + 32 * *(unsigned int *)(v21 + 60) + v136));
                }
                else
                {
                  v143 = *(_DWORD *)(v141 + 20);
                  if ((v143 & 0x40000000) != 0)
                  {
                    v144 = *(uint64_t **)(v141 - 8);
                    if ((v139 & 0x40000000) == 0)
                      goto LABEL_233;
LABEL_229:
                    v145 = *(_QWORD *)(v21 - 8);
                  }
                  else
                  {
                    v144 = (uint64_t *)(v141 - 32 * (v143 & 0x7FFFFFF));
                    if ((v139 & 0x40000000) != 0)
                      goto LABEL_229;
LABEL_233:
                    v145 = v21 - 32 * (v139 & 0x7FFFFFF);
                  }
                  sub_1C477667C((llvm::PHINode *)v135, *v144, *(_QWORD *)(v145 + 32 * *(unsigned int *)(v21 + 60) + v136));
                  v149 = *(_QWORD *)(v141 + 8);
                  if (v149 && !*(_QWORD *)(v149 + 8))
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v184, v141);
                }
                v137 += 32;
                v136 += 8;
                if (v138 == v137)
                  goto LABEL_240;
                continue;
              }
            }
          }
          else
          {
            v34 = *(_DWORD *)(v21 + 20);
            v35 = v34 & 0x7FFFFFF;
            if ((v34 & 0x7FFFFFF) != 0)
            {
              v36 = 0;
              v37 = 0;
              v38 = *(_DWORD *)(v19 + 20);
              v39 = v38 & 0x7FFFFFF;
              v40 = v19 - 32 * v39;
              do
              {
                v41 = v19 - 32 * (v38 & 0x7FFFFFF);
                if ((v38 & 0x40000000) != 0)
                  v41 = *(_QWORD *)(v19 - 8);
                v42 = *(_QWORD *)(v41 + v36);
                v43 = *(unsigned __int8 *)(v42 + 16);
                if (v42)
                  v44 = v43 >= 0x1C;
                else
                  v44 = 0;
                if (v44 && v43 - 67 <= 1)
                {
                  v46 = *(_DWORD *)(v42 + 20);
                  if ((v46 & 0x40000000) != 0)
                    v47 = *(llvm::ConstantInt ****)(v42 - 8);
                  else
                    v47 = (llvm::ConstantInt ***)(v42 - 32 * (v46 & 0x7FFFFFF));
                  v37 = **v47;
                }
                v36 += 32;
              }
              while (32 * v35 != v36);
              if (v37)
              {
                v48 = v19 - 32 * (v38 & 0x7FFFFFF);
                if ((v38 & 0x40000000) != 0)
                  v48 = *(_QWORD *)(v19 - 8);
                v49 = 32 * v39;
                if ((_DWORD)v39)
                {
                  for (j = 32 * v39; j; j -= 32)
                  {
                    v51 = *(_QWORD *)v48;
                    v52 = *(unsigned __int8 *)(*(_QWORD *)v48 + 16);
                    if (*(_QWORD *)v48)
                      v53 = v52 == 16;
                    else
                      v53 = 0;
                    if (v53)
                    {
                      v56 = (_QWORD *)(v51 + 24);
                      if (*(_DWORD *)(v51 + 32) >= 0x41u)
                        v56 = (_QWORD *)*v56;
                      if (*v56 >> BYTE1(*((_DWORD *)v37 + 2)))
                        goto LABEL_19;
                    }
                    else
                    {
                      v11 = 0;
                      if (!v51 || v52 != 67)
                        goto LABEL_93;
                      v54 = *(_DWORD *)(v51 + 20);
                      if ((v54 & 0x40000000) != 0)
                        v55 = *(llvm::ConstantInt ****)(v51 - 8);
                      else
                        v55 = (llvm::ConstantInt ***)(v51 - 32 * (v54 & 0x7FFFFFF));
                      if (**v55 != v37)
                      {
LABEL_19:
                        v11 = 0;
                        if ((v38 & 0x40000000) == 0)
                          goto LABEL_95;
LABEL_94:
                        v40 = *(_QWORD *)(v19 - 8);
                        goto LABEL_95;
                      }
                    }
                    v48 += 32;
                  }
                }
                v11 = 1;
LABEL_93:
                if ((v38 & 0x40000000) != 0)
                  goto LABEL_94;
LABEL_95:
                if (!(_DWORD)v39)
                  goto LABEL_157;
                v57 = -1 << (BYTE1(*((_DWORD *)v37 + 2)) - 1);
                while (1)
                {
                  v58 = *(_QWORD *)v40;
                  v59 = *(unsigned __int8 *)(*(_QWORD *)v40 + 16);
                  if (*(_QWORD *)v40 && v59 == 16)
                    break;
                  if (!v58 || v59 != 68)
                    goto LABEL_156;
                  v61 = *(_DWORD *)(v58 + 20);
                  v62 = (v61 & 0x40000000) != 0
                      ? *(llvm::ConstantInt ****)(v58 - 8)
                      : (llvm::ConstantInt ***)(v58 - 32 * (v61 & 0x7FFFFFF));
                  if (**v62 != v37)
                    goto LABEL_156;
LABEL_113:
                  v40 += 32;
                  v49 -= 32;
                  if (!v49)
                    goto LABEL_157;
                }
                v63 = *(_DWORD *)(v58 + 32);
                if (v63 > 0x40)
                  v64 = **(_QWORD **)(v58 + 24);
                else
                  v64 = (uint64_t)(*(_QWORD *)(v58 + 24) << -(char)v63) >> -(char)v63;
                if (v64 <= ~v57 && v64 >= v57)
                  goto LABEL_113;
LABEL_156:
                if (v11)
                {
LABEL_157:
                  v95 = sub_1C4773D54((uint64_t)v192, v19, 0, 0, 0);
                  v191 = 257;
                  v96 = (llvm::PHINode *)sub_1C4867E94(v95, (uint64_t)v37, v35, (uint64_t)v189);
                  v97 = 0;
                  v98 = 0;
                  while (1)
                  {
                    v99 = *(_DWORD *)(v21 + 20);
                    v100 = (v99 & 0x40000000) != 0 ? *(_QWORD *)(v21 - 8) : v21 - 32 * (v99 & 0x7FFFFFF);
                    v101 = *(_QWORD *)(v100 + v97);
                    if (!v101 || *(_BYTE *)(v101 + 16) != 16)
                      break;
                    v106 = *(_DWORD *)(v101 + 32);
                    if (v106 > 0x40)
                      v107 = **(_QWORD **)(v101 + 24);
                    else
                      v107 = (uint64_t)(*(_QWORD *)(v101 + 24) << -(char)v106) >> -(char)v106;
                    v109 = llvm::ConstantInt::get(v37, v107, (const llvm::APInt *)1);
                    v110 = *(_DWORD *)(v21 + 20);
                    if ((v110 & 0x40000000) != 0)
                      v111 = *(_QWORD *)(v21 - 8);
                    else
                      v111 = v21 - 32 * (v110 & 0x7FFFFFF);
                    sub_1C477667C(v96, (uint64_t)v109, *(_QWORD *)(v111 + 32 * *(unsigned int *)(v21 + 60) + 8 * v98));
LABEL_180:
                    ++v98;
                    v97 += 32;
                    if (v35 == v98)
                    {
                      v112 = *(_QWORD *)(v19 + 40);
                      v113 = v112 + 40;
                      v114 = *(_QWORD *)(v112 + 48);
                      v10 = v181;
                      if (v114 == v113)
                      {
LABEL_187:
                        v115 = 0;
                      }
                      else
                      {
                        while (1)
                        {
                          v115 = v114 - 24;
                          v116 = v114 ? v114 - 24 : 0;
                          if (*(_BYTE *)(v116 + 16) != 83)
                            break;
                          v114 = *(_QWORD *)(v114 + 8);
                          if (v114 == v113)
                            goto LABEL_187;
                        }
                      }
                      sub_1C4773D54((uint64_t)v189, v115, 0, 0, 0);
                      v117 = *(_QWORD *)v19;
                      v183 = 257;
                      if ((v11 & 1) != 0)
                        v118 = 39;
                      else
                        v118 = 40;
                      v119 = sub_1C4773E38((uint64_t *)v189, v118, (unsigned __int8 *)v96, v117, (uint64_t)v182);
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v19, (llvm::Value *)v119, (llvm::Value *)1);
                      v120 = *(_DWORD *)(v19 + 20);
                      if ((v120 & 0x40000000) != 0)
                      {
                        v14 = *(_QWORD *)(v19 - 8);
                        v15 = v120 & 0x7FFFFFF;
                        if (v15)
                        {
LABEL_193:
                          v121 = 32 * v15;
                          v122 = (_QWORD **)(v14 + 16);
                          do
                          {
                            if (*(v122 - 2))
                            {
                              **v122 = *(v122 - 1);
                              v123 = (uint64_t)*(v122 - 1);
                              if (v123)
                                *(_QWORD *)(v123 + 16) = *v122;
                            }
                            *(v122 - 2) = 0;
                            v122 += 4;
                            v121 -= 32;
                          }
                          while (v121);
                        }
                      }
                      else
                      {
                        v15 = v120 & 0x7FFFFFF;
                        v14 = v19 - 32 * v15;
                        if (v15)
                          goto LABEL_193;
                      }
                      goto LABEL_254;
                    }
                  }
                  v103 = *(_DWORD *)(v101 + 20);
                  if ((v103 & 0x40000000) != 0)
                  {
                    v104 = *(uint64_t **)(v101 - 8);
                    if ((v99 & 0x40000000) == 0)
                      goto LABEL_171;
LABEL_167:
                    v105 = *(_QWORD *)(v21 - 8);
                  }
                  else
                  {
                    v104 = (uint64_t *)(v101 - 32 * (v103 & 0x7FFFFFF));
                    if ((v99 & 0x40000000) != 0)
                      goto LABEL_167;
LABEL_171:
                    v105 = v21 - 32 * (v99 & 0x7FFFFFF);
                  }
                  sub_1C477667C(v96, *v104, *(_QWORD *)(v105 + 32 * *(unsigned int *)(v21 + 60) + 8 * v98));
                  v108 = *(_QWORD *)(v101 + 8);
                  if (v108 && !*(_QWORD *)(v108 + 8))
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v184, v101);
                  goto LABEL_180;
                }
              }
            }
          }
        }
      }
LABEL_259:
      if (v6 == v10)
        goto LABEL_260;
    }
  }
  LODWORD(v162) = 0;
  v3 = 0;
  v163 = 8;
  v161 = (unint64_t *)v188;
LABEL_263:
  if (v161 == v1)
    v162 = v162;
  else
    v162 = v163;
  v164 = v161;
  if ((_DWORD)v162)
  {
    v165 = 0;
    while (v161[v165] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v162 == ++v165)
        goto LABEL_288;
    }
    v164 = &v161[v165];
  }
  v166 = &v161[v162];
  if (v164 != v166)
  {
    v167 = *v164;
LABEL_274:
    v168 = *(_DWORD *)(v167 + 20);
    if ((v168 & 0x40000000) != 0)
    {
      v170 = *(_QWORD *)(v167 - 8);
      v169 = v168 & 0x7FFFFFF;
      if (!v169)
        goto LABEL_281;
    }
    else
    {
      v169 = v168 & 0x7FFFFFF;
      v170 = v167 - 32 * v169;
      if (!v169)
        goto LABEL_281;
    }
    v171 = 32 * v169;
    v172 = (_QWORD **)(v170 + 16);
    do
    {
      if (*(v172 - 2))
      {
        **v172 = *(v172 - 1);
        v173 = (uint64_t)*(v172 - 1);
        if (v173)
          *(_QWORD *)(v173 + 16) = *v172;
      }
      *(v172 - 2) = 0;
      v172 += 4;
      v171 -= 32;
    }
    while (v171);
LABEL_281:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v167 + 40) + 40, (uint64_t ***)v167);
    v174 = *(_QWORD *)(v167 + 24);
    v175 = *(_QWORD **)(v167 + 32);
    *v175 = v174;
    *(_QWORD *)(v174 + 8) = v175;
    *(_QWORD *)(v167 + 24) = 0;
    *(_QWORD *)(v167 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v167);
    v176 = v164 + 1;
    while (v176 != v166)
    {
      v177 = *v176++;
      v167 = v177;
      if (v177 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v164 = v176 - 1;
        goto LABEL_274;
      }
    }
    v1 = v184;
    v161 = v185;
  }
LABEL_288:
  if (v161 != v1)
    free(v161);
  return v3 & 1;
}

BOOL sub_1C5EA0B48(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  uint64_t i;
  uint64_t v4;

  if (a2 > 5)
    return 0;
  for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 24);
    if (*(unsigned __int8 *)(v4 + 16) - 73 > 1)
    {
      result = sub_1C5EA11A0(v4);
      if (!result)
        return result;
    }
    else if ((sub_1C5EA0B48() & 1) == 0)
    {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1C5EA0BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  BOOL v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;

  if (*(_BYTE *)(a1 + 16) != 84)
    return 0;
  v1 = *(_QWORD *)(a1 - 32);
  if (!v1 || *(_BYTE *)(v1 + 16) || *(_QWORD *)(v1 + 24) != *(_QWORD *)(a1 + 72) || (*(_BYTE *)(v1 + 33) & 0x20) == 0)
    return 0;
  v3 = *(_DWORD *)(v1 + 36);
  result = 1;
  if (v3 <= 2364)
  {
    v6 = (v3 - 2132) > 0x2C || ((1 << (v3 - 84)) & 0x1E0801DCE081) == 0;
    if (!v6 || (v3 - 2305) < 4)
      return result;
    v5 = v3 - 2107;
  }
  else
  {
    if (v3 > 2664)
    {
      v7 = (v3 - 2669) > 0x3F || ((1 << (v3 - 109)) & 0x800000000000037FLL) == 0;
      if (v7 && (v3 - 2665) >= 3)
        return 0;
      return result;
    }
    v4 = (v3 - 2444) > 0x30 || ((1 << (v3 + 116)) & 0x1870000000001) == 0;
    if (!v4 || (v3 - 2365) <= 0x3A && ((1 << (v3 - 61)) & 0x400380000000001) != 0)
      return result;
    v5 = v3 - 2586;
  }
  if (v5 >= 2)
    return 0;
  return result;
}

uint64_t sub_1C5EA0CE0(uint64_t a1, llvm::DominatorTree *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _BOOL4 v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  unsigned __int8 **v26;
  uint64_t v27;
  int v28;
  int v29;
  const llvm::Instruction *v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  llvm::Instruction *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Type *v44;
  unsigned int v45;
  char v48;
  char v49;
  uint64_t v51;

  v2 = a1 + 72;
  v3 = -1;
  v4 = a1 + 72;
  do
  {
    v4 = *(_QWORD *)(v4 + 8);
    ++v3;
  }
  while (v4 != v2);
  if (v3 >= 2)
  {
    v48 = 0;
    v51 = a1 + 72;
    while (1)
    {
      v5 = *(_QWORD *)(a1 + 80);
      if (v5 == v2)
        return v48 & 1;
      v49 = 0;
      do
      {
        v6 = v5 - 24;
        if (!v5)
          v6 = 0;
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          while (1)
          {
            v8 = *(_QWORD *)(v7 + 24);
            v9 = *(unsigned __int8 *)(v8 + 16);
            v10 = v8 && v9 >= 0x1C;
            if (v10 && v9 - 29 <= 0xA)
              break;
            v7 = *(_QWORD *)(v7 + 8);
            if (!v7)
              goto LABEL_20;
          }
          v12 = v6 + 40;
          v13 = *(_QWORD *)(v6 + 48);
          while (2)
          {
            if (v13 == v12)
              goto LABEL_20;
            v14 = 0;
            if (v13)
              v15 = v13 - 24;
            else
              v15 = 0;
            v16 = *(unsigned __int8 *)(v15 + 16);
            if (v16 == 84)
            {
              v17 = *(_QWORD *)(v15 - 32);
              if (v17 && !*(_BYTE *)(v17 + 16) && *(_QWORD *)(v17 + 24) == *(_QWORD *)(v15 + 72))
              {
                if ((*(_BYTE *)(v17 + 33) & 0x20) != 0)
                  v14 = v13 - 24;
                else
                  v14 = 0;
              }
              else
              {
                v14 = 0;
              }
            }
            v13 = *(_QWORD *)(v13 + 8);
            v18 = sub_1C5EA10CC(v15);
            v19 = v18;
            v21 = v16 == 89 || v16 == 92;
            if (v14
              && ((v22 = *(_DWORD *)(*(_QWORD *)(v14 - 32) + 36), (v22 - 2713) <= 0x12)
                ? (v23 = ((1 << (v22 + 103)) & 0x77855) == 0)
                : (v23 = 1),
                  !v23 || (v22 - 2098) < 7))
            {
              v24 = 1;
              if ((v18 & 1) == 0)
                goto LABEL_45;
            }
            else
            {
              v24 = 0;
              if ((v18 & 1) != 0)
                break;
LABEL_45:
              if (v16 == 89 || v16 == 92)
              {
                if (!v14)
                  break;
LABEL_50:
                if (v24)
                {
                  v25 = *(_DWORD *)(v15 + 20);
                  if ((v25 & 0x40000000) != 0)
                    v26 = *(unsigned __int8 ***)(v15 - 8);
                  else
                    v26 = (unsigned __int8 **)(v15 - 32 * (v25 & 0x7FFFFFF));
                  v29 = 0;
                  v31 = *v26;
                  if (v31[16] <= 0x1Bu)
                    v30 = 0;
                  else
                    v30 = (const llvm::Instruction *)v31;
                  v27 = 1;
                }
                else
                {
                  v27 = 0;
                  v28 = *(_DWORD *)(*(_QWORD *)(v14 - 32) + 36);
                  v29 = 1;
                  v30 = 0;
                  if (v28 != 2131 && v28 != 1830)
                    continue;
                }
LABEL_68:
                v32 = *(_DWORD *)(v15 + 20);
                if ((v32 & 0x40000000) != 0)
                  v33 = *(_QWORD *)(v15 - 8);
                else
                  v33 = v15 - 32 * (v32 & 0x7FFFFFF);
                v34 = *(_QWORD *)(v33 + 32 * v27);
                v35 = *(unsigned __int8 *)(v34 + 16);
                if (v34)
                  v36 = v35 >= 0x1C;
                else
                  v36 = 0;
                if (v36)
                {
                  v37 = *(_QWORD *)(v34 + 8);
                  if (v37)
                    LODWORD(v37) = *(_QWORD *)(v37 + 8) == 0;
                  v38 = v21 | v37;
                  if (v35 == 83)
                    v38 = 0;
                  if ((v24 | v38) == 1)
                  {
                    v39 = *(_QWORD *)(v34 + 32);
                    if (v30 && llvm::DominatorTree::dominates(a2, (const llvm::Value *)v34, v30))
                      v39 = *((_QWORD *)v30 + 4);
                    v40 = (llvm::Instruction *)(v39 - 24);
                    if (v39)
                      v41 = v39 - 24;
                    else
                      v41 = 0;
                    if (*(_QWORD *)(v41 + 40) != *(_QWORD *)(v15 + 40))
                    {
                      while (*(_BYTE *)(v41 + 16) == 83)
                      {
                        v39 = *(_QWORD *)(v39 + 8);
                        v40 = (llvm::Instruction *)(v39 - 24);
                        if (v39)
                          v41 = v39 - 24;
                        else
                          v41 = 0;
                      }
                      if (!v29 || sub_1C5EA11A0(v34))
                      {
                        if (!v19
                          || (v42 = *(_QWORD *)(v15 + 8)) == 0
                          || *(_QWORD *)(v42 + 8)
                          || (v43 = *(_QWORD *)(v42 + 24), *(_BYTE *)(v43 + 16) != 74)
                          || !sub_1C5EA0B48(v43, 0))
                        {
                          if (*(_BYTE *)(v15 + 16) != 74 || sub_1C5EA10CC(v34) && !sub_1C5EA0B48(v15, 0))
                          {
                            if (v16 != 92 && v16 != 89)
                              goto LABEL_109;
                            v44 = *(llvm::Type **)v15;
                            if ((*(_DWORD *)(*(_QWORD *)v15 + 8) & 0xFE) == 0x12)
                              v44 = (llvm::Type *)**((_QWORD **)v44 + 2);
                            v45 = llvm::Type::getPrimitiveSizeInBits(v44) - 16;
                            if (v45 <= 0x30 && ((1 << v45) & 0x1000000010001) != 0)
                            {
LABEL_109:
                              llvm::Instruction::moveBefore((llvm::Instruction *)v15, v40);
                              v48 = 1;
                              v49 = 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                continue;
              }
              if (v14)
                goto LABEL_50;
              if ((v16 | 8) != 0x4A)
                continue;
            }
            break;
          }
          v27 = 0;
          v29 = 0;
          v30 = 0;
          goto LABEL_68;
        }
LABEL_20:
        v5 = *(_QWORD *)(v5 + 8);
        v2 = v51;
      }
      while (v5 != v51);
      if ((v49 & 1) == 0)
        return v48 & 1;
    }
  }
  v48 = 0;
  return v48 & 1;
}

uint64_t sub_1C5EA10CC(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  while (1)
  {
    v1 = *(unsigned __int8 *)(a1 + 16);
    if (v1 != 77)
      break;
    v2 = *(_DWORD *)(a1 + 20);
    if ((v2 & 0x40000000) != 0)
      v3 = *(uint64_t **)(a1 - 8);
    else
      v3 = (uint64_t *)(a1 - 32 * (v2 & 0x7FFFFFF));
    a1 = *v3;
    if (*(unsigned __int8 *)(*v3 + 16) <= 0x1Bu)
      return 0;
  }
  if (v1 == 73)
    return 1;
  if (v1 == 84)
  {
    v4 = *(_QWORD *)(a1 - 32);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 16)
        && *(_QWORD *)(v4 + 24) == *(_QWORD *)(a1 + 72)
        && (*(_BYTE *)(v4 + 33) & 0x20) != 0
        && *(_DWORD *)(v4 + 36) == 1982)
      {
        v5 = *(_DWORD *)(a1 + 20);
        v6 = (v5 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v5 & 0x7FFFFFF);
        v7 = *(_QWORD *)(v6 + 32);
        if (*(_BYTE *)(v7 + 16) == 16)
        {
          v8 = (_QWORD *)(v7 + 24);
          if (*(_DWORD *)(v7 + 32) >= 0x41u)
            v8 = (_QWORD *)*v8;
          if (*v8 == 12)
            return 1;
        }
      }
    }
  }
  return 0;
}

BOOL sub_1C5EA11A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  __int32 v13;

  if (*(_BYTE *)(a1 + 16) == 84)
  {
    v2 = *(_QWORD *)(a1 - 32);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 16) && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a1 + 72) && (*(_BYTE *)(v2 + 33) & 0x20) != 0)
      {
        if ((v3 = *(_QWORD *)(a1 + 64)) != 0 && (*(_BYTE *)(v3 + 17) & 0x10) != 0
          || ((v13 = 7, !sub_1C53E4BBC(a1, &v13, 1uLL))
           || (v5 = *(_QWORD *)(a1 - 32)) != 0
           && !*(_BYTE *)(v5 + 16)
           && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a1 + 72)
           && *(_DWORD *)(v5 + 36) == 7)
          && llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44))
        {
          if (*(unsigned __int8 *)(*(_QWORD *)a1 + 8) < 7u)
            return 1;
        }
      }
    }
  }
  v6 = *(unsigned __int8 *)(a1 + 16);
  v7 = v6 - 28;
  v8 = v6 - 75;
  return v7 == 14 || v7 == 54 || (v7 & 0xFFFFFFFD) == 16 || v7 == 21 || v8 > 0xFFFFFFFD;
}

void sub_1C5EA12A4(uint64_t a1, char a2, unsigned int a3, int a4, char a5, uint64_t *a6)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  int64x2_t *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  llvm::Instruction **v31;
  uint64_t v32;
  llvm::Instruction *v33;
  uint64_t v34;
  int v35;
  llvm::Instruction *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned int v57;
  int v58;
  char v59;
  uint64_t v60;
  int64x2_t *v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  char v68;
  llvm::Instruction **v69;
  uint64_t v70;
  llvm::Instruction *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v89;
  uint8x8_t v90;
  unsigned __int32 v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t *v95;
  BOOL v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  _QWORD *v101;
  uint64_t v102;
  int v103;
  char v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int32 v108;
  int v109;
  llvm::Instruction **v110;
  uint64_t v111;
  llvm::Instruction *v112;
  int v113;
  char v118;
  uint64_t v119;
  uint64_t v120;
  int64x2_t v121;
  void **v123;
  void *v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  void *v129;
  uint64_t v130;
  _QWORD v131[10];

  v131[8] = *MEMORY[0x1E0C80C00];
  v7 = a1 + 72;
  v8 = -1;
  v9 = a1 + 72;
  do
  {
    v9 = *(_QWORD *)(v9 + 8);
    ++v8;
  }
  while (v9 != v7);
  if (v8 >= 2)
  {
    v10 = atomic_load((unsigned __int8 *)&qword_1ED825DB8);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED825DB8))
    {
      byte_1ED825DA9 = 1;
      __cxa_guard_release(&qword_1ED825DB8);
    }
    v11 = byte_1ED825DA9 ? 0 : a5;
    v118 = v11;
    v12 = *(_QWORD *)(a1 + 80);
    if (v12 != v7)
    {
      v121 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v119 = v7;
      while (1)
      {
        v13 = 0;
        do
        {
          v14 = v12 - 24;
          if (!v12)
            v14 = 0;
          v16 = v14 + 40;
          v15 = *(_QWORD *)(v14 + 40);
          v120 = v12;
          if (v15 == v14 + 40)
            goto LABEL_261;
          if (v15)
            v17 = v15 - 24;
          else
            v17 = 0;
          if (*(_BYTE *)(v17 + 16) != 30)
          {
            switch(*(_BYTE *)(v17 + 16))
            {
              case 0x1E:
                __break(1u);
                return;
              case 0x1F:
                v113 = (*(_DWORD *)(v17 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_264;
              case 0x20:
              case 0x26:
                v113 = (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_264;
              case 0x21:
              case 0x25:
                break;
              case 0x24:
                v113 = *(_WORD *)(v17 + 18) & 1;
                goto LABEL_264;
              case 0x27:
                v113 = *(_DWORD *)(v17 + 80) + 1;
LABEL_264:
                if (!v113)
                  goto LABEL_261;
                break;
              default:
                goto LABEL_261;
            }
          }
          v18 = *(_QWORD *)(v14 + 48);
          if (v18 == v16)
            goto LABEL_261;
          do
          {
            v19 = *(_QWORD *)(v18 + 8);
            v20 = v18 - 24;
            if (v18)
              v21 = v18 - 24;
            else
              v21 = 0;
            if (*(_BYTE *)(v21 + 16) == 46)
            {
              v124 = (void *)1;
              v125 = v121;
              v126 = v121;
              v127 = v121;
              v128 = v121;
              v129 = v131;
              v130 = 0x800000000;
              v22 = sub_1C5EADA98(v21, a3, (uint64_t)&v124, 0);
              v23 = v22;
              if (v22)
              {
                v34 = v16;
                if (v19 == v16)
                  goto LABEL_39;
                v24 = &v125;
                if ((v124 & 1) != 0)
                {
                  v25 = 7;
                }
                else
                {
                  v24 = (int64x2_t *)v125.i64[0];
                  v25 = v125.i32[2] - 1;
                }
                v34 = v19;
                while (1)
                {
                  v26 = v34 - 24;
                  if (!v34)
                    v26 = 0;
                  if (!(v124 & 1 | (v125.i32[2] != 0)))
                  {
                    v34 = v19;
                    goto LABEL_39;
                  }
                  v27 = ((v26 >> 4) ^ (v26 >> 9)) & v25;
                  v28 = v24->i64[v27];
                  if (v26 != v28)
                    break;
LABEL_37:
                  v34 = *(_QWORD *)(v34 + 8);
                  if (v34 == v16)
                  {
                    v34 = v16;
                    goto LABEL_39;
                  }
                }
                v29 = 1;
                while (v28 != -4096)
                {
                  v30 = v27 + v29++;
                  v27 = v30 & v25;
                  v28 = v24->i64[v27];
                  if (v26 == v28)
                    goto LABEL_37;
                }
LABEL_39:
                if ((_DWORD)v130)
                {
                  v31 = (llvm::Instruction **)v129;
                  v32 = 8 * v130;
                  do
                  {
                    v33 = *v31++;
                    v13 |= sub_1C5EADC74(v33, 0);
                    v32 -= 8;
                  }
                  while (v32);
                }
                v13 |= sub_1C5EADC74((llvm::Instruction *)v21, 0);
              }
              else
              {
                v34 = v19;
              }
              if (v129 != v131)
                free(v129);
              if ((v124 & 1) != 0)
              {
                if ((v23 & 1) != 0)
                  goto LABEL_53;
              }
              else
              {
                MEMORY[0x1CAA32FB4](v125.i64[0], 8);
                if ((v23 & 1) != 0)
                  goto LABEL_53;
              }
            }
            else
            {
              v34 = *(_QWORD *)(v18 + 8);
            }
            v123 = &v124;
            v124 = 0;
            if (sub_1C4E7B6EC(&v123, v21) && v124)
              goto LABEL_51;
            v35 = *(unsigned __int8 *)(v21 + 16);
            if ((v35 - 81) < 2)
              goto LABEL_51;
            if (v35 == 84)
            {
              v37 = *(_QWORD *)(v21 - 32);
              if (!v37)
                goto LABEL_199;
              if (!*(_BYTE *)(v37 + 16)
                && *(_QWORD *)(v37 + 24) == *(_QWORD *)(v21 + 72)
                && (*(_BYTE *)(v37 + 33) & 0x20) != 0)
              {
                v72 = *(_DWORD *)(*(_QWORD *)(v18 - 56) + 36);
                if (v72 > 1821)
                {
                  if (v72 == 2131 || v72 == 1830)
                  {
                    if (!*(_BYTE *)(*(_QWORD *)v20 + 8) && sub_1C5EA0B48(v18 - 24, 0))
                    {
                      v73 = *(_QWORD *)(v20 - 32 * (*(_DWORD *)(v18 - 4) & 0x7FFFFFF));
                      if (!v73)
                        goto LABEL_51;
                      if (*(unsigned __int8 *)(v73 + 16) < 0x1Cu)
                        goto LABEL_51;
                      v74 = *(_QWORD *)(v73 + 8);
                      if (!v74 || *(_QWORD *)(v74 + 8) || !sub_1C5EA11A0(v73))
                        goto LABEL_51;
                    }
                  }
                  else if (v72 == 1822)
                  {
                    goto LABEL_51;
                  }
                }
                else if (v72 == 139 || v72 == 1275 || v72 == 1281)
                {
                  goto LABEL_51;
                }
                if (*(_DWORD *)(*(_QWORD *)(v18 - 56) + 36) == 280)
                {
                  v75 = *(_QWORD *)(v18 - 16);
                  if (!v75)
                  {
LABEL_164:
                    v36 = (llvm::Instruction *)(v18 - 24);
                    goto LABEL_52;
                  }
                  while (1)
                  {
                    v76 = *(_QWORD *)(v75 + 24);
                    if (*(_BYTE *)(v76 + 16) != 49)
                      break;
                    v77 = *(_DWORD *)(v76 + 20);
                    v78 = (v77 & 0x40000000) != 0 ? *(_QWORD *)(v76 - 8) : v76 - 32 * (v77 & 0x7FFFFFF);
                    if (*(_QWORD *)(v78 + 32) != v20 || (*(_BYTE *)(v76 + 17) & 0x20) == 0)
                      break;
                    v75 = *(_QWORD *)(v75 + 8);
                    if (!v75)
                      goto LABEL_164;
                  }
                }
              }
              v35 = *(unsigned __int8 *)(v21 + 16);
            }
            if ((v35 - 67) <= 1)
            {
              v38 = *(_QWORD *)(v21 + 8);
              if (!v38)
              {
LABEL_51:
                v36 = (llvm::Instruction *)v21;
LABEL_52:
                v13 |= sub_1C5EADC74(v36, 0);
                goto LABEL_53;
              }
              v39 = a3;
              if (v35 == 68)
                v39 = 1;
              while (2)
              {
                v40 = *(_QWORD *)(v38 + 24);
                v41 = *(unsigned __int8 *)(v40 + 16);
                v42 = (v41 - 41);
                if (v42 <= 0x28)
                {
                  if (((1 << (v41 - 41)) & 0xCE200015) != 0)
                  {
LABEL_67:
                    v38 = *(_QWORD *)(v38 + 8);
                    if (!v38)
                      goto LABEL_51;
                    continue;
                  }
                  if (v42 == 40)
                  {
                    v43 = *(_WORD *)(v40 + 18) & 0x3F;
                    if ((v43 - 34) >= 4)
                    {
                      if ((v43 - 38) > 3)
                      {
                        if ((v39 & 1) == 0)
                          goto LABEL_84;
                      }
                      else if (v35 == 67)
                      {
                        goto LABEL_199;
                      }
                    }
                    else if (v35 != 67)
                    {
                      goto LABEL_84;
                    }
                    goto LABEL_67;
                  }
                }
                break;
              }
              if (v35 != 67)
                goto LABEL_84;
              if (v41 != 58 && (v41 - 53) >= 5)
                goto LABEL_199;
              goto LABEL_67;
            }
LABEL_84:
            if (v35 == 74)
            {
              v45 = *(_DWORD *)(v21 + 20);
              if ((v45 & 0x40000000) != 0)
                v46 = *(uint64_t **)(v21 - 8);
              else
                v46 = (uint64_t *)(v21 - 32 * (v45 & 0x7FFFFFF));
              v47 = *v46;
              if (*(unsigned __int8 *)(v47 + 16) <= 0x1Bu)
                v48 = 0;
              else
                v48 = v47;
              if (sub_1C5EA0B48(v21, 0) || !v48 || !sub_1C5EA11A0(v48))
                goto LABEL_51;
              v35 = *(unsigned __int8 *)(v21 + 16);
            }
            if (v35 == 73)
            {
              v49 = *(_DWORD *)(v21 + 20);
              if ((v49 & 0x40000000) != 0)
                v50 = *(_QWORD *)(v21 - 8);
              else
                v50 = v21 - 32 * (v49 & 0x7FFFFFF);
              v51 = *(_QWORD *)(*(_QWORD *)v50 + 8);
              if (v51 && !*(_QWORD *)(v51 + 8))
                goto LABEL_199;
              v52 = *(_QWORD *)(v21 + 8);
              if (!v52)
                goto LABEL_199;
              while (*(_QWORD *)(*(_QWORD *)(v52 + 24) + 40) == *(_QWORD *)(v21 + 40))
              {
                v52 = *(_QWORD *)(v52 + 8);
                if (!v52)
                  goto LABEL_199;
              }
              if (sub_1C5EA0B48(v21, 0))
                goto LABEL_51;
              v35 = *(unsigned __int8 *)(v21 + 16);
            }
            if (v35 != 53)
              goto LABEL_170;
            v53 = *(_DWORD *)(v21 + 20);
            if ((v53 & 0x40000000) != 0)
              v54 = *(_QWORD *)(v21 - 8);
            else
              v54 = v21 - 32 * (v53 & 0x7FFFFFF);
            v55 = *(_QWORD *)(v54 + 32);
            if (*(_BYTE *)(v55 + 16) == 16)
            {
              v56 = (_QWORD *)(v55 + 24);
              if (*(_DWORD *)(v55 + 32) >= 0x41u)
                v56 = (_QWORD *)*v56;
              v57 = *(_DWORD *)v56;
              v124 = (void *)1;
              v125 = v121;
              v126 = v121;
              v127 = v121;
              v128 = v121;
              v129 = v131;
              v130 = 0x800000000;
              v58 = sub_1C5EA4C7C(v21, a2, a3, v57, (uint64_t)&v124);
              v59 = v58;
              if (v58)
              {
                v60 = v16;
                if (v34 == v16)
                  goto LABEL_129;
                v61 = &v125;
                if ((v124 & 1) != 0)
                {
                  v62 = 7;
                }
                else
                {
                  v61 = (int64x2_t *)v125.i64[0];
                  v62 = v125.i32[2] - 1;
                }
                v60 = v34;
                while (1)
                {
                  v63 = v60 - 24;
                  if (!v60)
                    v63 = 0;
                  if (!(v124 & 1 | (v125.i32[2] != 0)))
                  {
                    v60 = v34;
                    goto LABEL_129;
                  }
                  v64 = ((v63 >> 4) ^ (v63 >> 9)) & v62;
                  v65 = v61->i64[v64];
                  if (v63 != v65)
                    break;
LABEL_127:
                  v60 = *(_QWORD *)(v60 + 8);
                  if (v60 == v16)
                  {
                    v60 = v16;
                    goto LABEL_129;
                  }
                }
                v66 = 1;
                while (v65 != -4096)
                {
                  v67 = v64 + v66++;
                  v64 = v67 & v62;
                  v65 = v61->i64[v64];
                  if (v63 == v65)
                    goto LABEL_127;
                }
LABEL_129:
                v68 = v58;
                if ((_DWORD)v130)
                {
                  v69 = (llvm::Instruction **)v129;
                  v70 = 8 * v130;
                  do
                  {
                    v71 = *v69++;
                    v13 |= sub_1C5EADC74(v71, 0);
                    v70 -= 8;
                  }
                  while (v70);
                }
                v13 |= sub_1C5EADC74((llvm::Instruction *)v21, 0);
                v59 = v68;
              }
              else
              {
                v60 = v34;
              }
              if (v129 != v131)
                free(v129);
              if ((v124 & 1) != 0)
              {
                if ((v59 & 1) != 0)
                  goto LABEL_143;
              }
              else
              {
                MEMORY[0x1CAA32FB4](v125.i64[0], 8);
                if ((v59 & 1) != 0)
                {
LABEL_143:
                  v34 = v60;
                  goto LABEL_53;
                }
              }
              v35 = *(unsigned __int8 *)(v21 + 16);
              v34 = v60;
LABEL_170:
              if (v35 == 41)
              {
                v81 = *(_DWORD *)(v21 + 20);
                if ((v81 & 0x40000000) != 0)
                  v82 = *(_QWORD *)(v21 - 8);
                else
                  v82 = v21 - 32 * (v81 & 0x7FFFFFF);
                if (*(_BYTE *)(*(_QWORD *)(v82 + 32) + 16) == 16 && sub_1C5EADF34(v21, 0))
                  goto LABEL_51;
              }
              else if (v35 == 54)
              {
                v79 = *(_DWORD *)(v21 + 20);
                if ((v79 & 0x40000000) != 0)
                  v80 = *(_QWORD *)(v21 - 8);
                else
                  v80 = v21 - 32 * (v79 & 0x7FFFFFF);
                if (*(_BYTE *)(*(_QWORD *)(v80 + 32) + 16) == 16)
                {
                  v83 = *(_QWORD *)(v21 + 8);
                  if (!v83)
                    goto LABEL_51;
                  while (1)
                  {
                    v84 = *(_QWORD *)(v83 + 24);
                    if (*(_BYTE *)(v84 + 16) != 56)
                      break;
                    v85 = *(_DWORD *)(v84 + 20);
                    v86 = (v85 & 0x40000000) != 0 ? *(_QWORD *)(v84 - 8) : v84 - 32 * (v85 & 0x7FFFFFF);
                    v87 = *(_QWORD *)(v86 + 32);
                    if (!v87 || *(_BYTE *)(v87 + 16) != 16)
                      break;
                    v89 = (_QWORD *)(v87 + 24);
                    if (*(_DWORD *)(v87 + 32) >= 0x41u)
                      v89 = (_QWORD *)*v89;
                    v90 = (uint8x8_t)vcnt_s8((int8x8_t)(*v89 + 1));
                    v90.i16[0] = vaddlv_u8(v90);
                    if (v90.u32[0] != 1)
                      break;
                    v83 = *(_QWORD *)(v83 + 8);
                    if (!v83)
                      goto LABEL_51;
                  }
                }
              }
              else if (v35 == 45 && sub_1C5EA4F14(v21, a3, a4, a6))
              {
                goto LABEL_51;
              }
            }
LABEL_199:
            v91 = 0;
            v124 = &v125.u64[1];
            v125.i64[0] = 0x800000000;
            v92 = *(unsigned __int8 *)(v18 - 8);
            while (1)
            {
              v93 = v92 - 54;
              if (v93 > 0x23)
                goto LABEL_231;
              if (((1 << (v92 - 54)) & 0x800987000) == 0)
                break;
LABEL_202:
              if (v91 >= v125.i32[1])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)&v125.i64[1], v91 + 1, 8);
                v91 = v125.i32[0];
              }
              *((_QWORD *)v124 + v91) = v20;
              v91 = ++v125.i32[0];
              v94 = *(_DWORD *)(v20 + 20);
              if ((v94 & 0x40000000) != 0)
                v95 = *(uint64_t **)(v20 - 8);
              else
                v95 = (uint64_t *)(v20 - 32 * (v94 & 0x7FFFFFF));
              v20 = *v95;
              v92 = *(unsigned __int8 *)(*v95 + 16);
              if (*v95)
                v96 = v92 >= 0x1C;
              else
                v96 = 0;
              if (!v96)
                goto LABEL_255;
            }
            if (v92 == 54)
            {
              v97 = *(_DWORD *)(v20 + 20);
              if ((v97 & 0x40000000) != 0)
                v98 = *(_QWORD *)(v20 - 8);
              else
                v98 = v20 - 32 * (v97 & 0x7FFFFFF);
              v99 = *(_QWORD *)(v98 + 32);
              if (v99)
                v100 = *(_BYTE *)(v99 + 16) == 16;
              else
                v100 = 0;
              if (!v100)
                goto LABEL_231;
              v101 = (_QWORD *)(v99 + 24);
              if (*(_DWORD *)(v99 + 32) >= 0x41u)
                v101 = (_QWORD *)*v101;
              if (*v101 != 16)
                goto LABEL_231;
              goto LABEL_202;
            }
            if (v93 != 6)
            {
LABEL_231:
              if ((v118 & 1) == 0 && sub_1C5EA0BBC(v20))
              {
                if (v92 != 84)
                {
                  v106 = 0;
                  v104 = 1;
                  goto LABEL_239;
                }
                v107 = *(_QWORD *)(v20 + 64);
                if ((!v107 || (*(_BYTE *)(v107 + 12) & 0x40) == 0)
                  && (llvm::CallBase::hasFnAttrOnCalledFunction(v20, 6) & 1) == 0)
                {
                  v106 = 0;
                  v104 = 1;
                  v91 = v125.i32[0];
                  goto LABEL_239;
                }
              }
LABEL_255:
              v105 = 0;
              goto LABEL_256;
            }
            v102 = *(_QWORD *)(v20 - 32);
            v103 = *(_DWORD *)(*(_QWORD *)v102 + 8);
            if ((v103 & 0xFE) == 0x12)
              v103 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v102 + 16) + 8);
            if ((v103 & 0xFFFFFF00) != 0x4000)
              goto LABEL_255;
            v104 = 0;
            v105 = 0;
            v106 = v20;
            if (!sub_1C5E9DE14(v102, 0))
              goto LABEL_256;
LABEL_239:
            if (v91 >= v125.i32[1])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)&v125.i64[1], v91 + 1, 8);
              v91 = v125.i32[0];
            }
            *((_QWORD *)v124 + v91) = v20;
            v108 = ++v125.i32[0];
            if ((v104 & 1) == 0)
            {
              while (1)
              {
                v106 = *(_QWORD *)(v106 - 32);
                v109 = *(unsigned __int8 *)(v106 + 16);
                if (!v106 || v109 != 77)
                  break;
                if (v108 >= v125.i32[1])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)&v125.i64[1], v108 + 1, 8);
                  v108 = v125.i32[0];
                }
                *((_QWORD *)v124 + v108) = v106;
                v108 = ++v125.i32[0];
              }
              if (v109 == 62)
              {
                if (v108 >= v125.i32[1])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)&v125.i64[1], v108 + 1, 8);
                  v108 = v125.i32[0];
                }
                *((_QWORD *)v124 + v108) = v106;
                v108 = ++v125.i32[0];
              }
            }
            if (!v108)
              goto LABEL_255;
            v105 = 0;
            v110 = (llvm::Instruction **)v124;
            v111 = 8 * v108;
            do
            {
              v112 = *v110++;
              v105 |= sub_1C5EADC74(v112, 1);
              v111 -= 8;
            }
            while (v111);
LABEL_256:
            if (v124 != &v125.u64[1])
              free(v124);
            v13 |= v105;
LABEL_53:
            v18 = v34;
          }
          while (v34 != v16);
LABEL_261:
          v12 = *(_QWORD *)(v120 + 8);
        }
        while (v12 != v119);
        if ((v13 & 1) != 0)
        {
          v12 = *(_QWORD *)(a1 + 80);
          if (v12 != v119)
            continue;
        }
        return;
      }
    }
  }
}

uint64_t sub_1C5EA1EE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::ValueSymbolTable *v33;
  uint64_t v34;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
    v2 = v1 - 24;
  else
    v2 = 0;
  v3 = v2 + 40;
  for (i = *(_QWORD *)(v2 + 48); i != v3; i = *(_QWORD *)(i + 8))
  {
    v5 = i - 24;
    if (!i)
      v5 = 0;
    if (*(_BYTE *)(v5 + 16) != 83)
    {
      v6 = *(unsigned __int8 *)(i - 8) - 38;
      v7 = v6 > 0x38;
      v8 = (1 << v6) & 0x100060000000001;
      if (v7 || v8 == 0)
        v3 = i;
      else
        v3 = *(_QWORD *)(i + 8);
      break;
    }
  }
  v10 = a1 + 72;
  if (v1 == a1 + 72)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    if (v3)
      v12 = v3 - 24;
    else
      v12 = 0;
    v13 = (uint64_t *)(v12 + 24);
    do
    {
      v14 = v1 - 24;
      if (!v1)
        v14 = 0;
      if (v14 != v2)
      {
        v15 = (uint64_t *)(v14 + 40);
        v16 = *(uint64_t **)(v14 + 48);
        if (v16 != (uint64_t *)(v14 + 40))
        {
          do
          {
            v17 = (uint64_t *)v16[1];
            v18 = v16 - 3;
            if (v16)
              v19 = v16 - 3;
            else
              v19 = 0;
            if (*((_BYTE *)v19 + 16) == 84)
            {
              v20 = *(v19 - 4);
              if (v20)
              {
                if (!*(_BYTE *)(v20 + 16)
                  && *(_QWORD *)(v20 + 24) == v19[9]
                  && (*(_BYTE *)(v20 + 33) & 0x20) != 0
                  && llvm::GetItrKind((llvm *)*(unsigned int *)(*(v16 - 7) + 36))
                  && (*(_DWORD *)(*v18 + 8) & 0xFE) != 0x12)
                {
                  v21 = *((unsigned __int8 *)v16 - 8);
                  if (v21 == 84)
                  {
                    v22 = 0;
                  }
                  else if (v21 == 39)
                  {
                    v22 = (*((_DWORD *)v16 + 14) + 1);
                  }
                  else
                  {
                    v22 = 2;
                  }
                  v23 = *((_DWORD *)v16 - 1);
                  v24 = v23 & 0x7FFFFFF;
                  v25 = &v18[-4 * v24];
                  if (v23 < 0 && (v34 = *(v25 - 1), (v34 & 0xFFFFFFFF0) != 0))
                    v26 = (*((_DWORD *)v25 - 3) - *(_DWORD *)((char *)v25 - v34));
                  else
                    v26 = 0;
                  if (v25 == &v18[-4 * v22 - 4 + -4 * v26])
                  {
LABEL_42:
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v16[2] + 40, (uint64_t ***)v16 - 3);
                    v28 = *v16;
                    v29 = (uint64_t *)v16[1];
                    *v29 = *v16;
                    *(_QWORD *)(v28 + 8) = v29;
                    *v16 = 0;
                    v16[1] = 0;
                    v30 = *(_QWORD *)(v12 + 40);
                    v16[2] = v30;
                    *(_WORD *)(v30 + 18) &= ~0x8000u;
                    if ((*((_BYTE *)v16 - 1) & 0x10) != 0)
                    {
                      v32 = *(_QWORD *)(v30 + 56);
                      if (v32)
                      {
                        v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
                        if (v33)
                          llvm::ValueSymbolTable::reinsertValue(v33, (llvm::Value *)(v16 - 3));
                      }
                    }
                    v31 = *v13;
                    *v16 = *v13;
                    v16[1] = (uint64_t)v13;
                    *(_QWORD *)(v31 + 8) = v16;
                    *v13 = (uint64_t)v16;
                    v11 = 1;
                  }
                  else
                  {
                    v27 = 32 * v24 - 32 * v22 - 32 * v26 - 32;
                    while (*(unsigned __int8 *)(*v25 + 16) <= 0x1Bu)
                    {
                      v25 += 4;
                      v27 -= 32;
                      if (!v27)
                        goto LABEL_42;
                    }
                  }
                }
              }
            }
            v16 = v17;
          }
          while (v17 != v15);
        }
      }
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1 != v10);
  }
  return v11 & 1;
}

void ***sub_1C5EA2178(void ***result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void **v4;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t i;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  uint64_t v20;
  int ItrKind;
  _WORD *v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t NearestCommonDominator;
  BOOL v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  void **v52;
  int v53;
  int v54;
  _QWORD *v55;
  int v56;
  _DWORD *v57;
  uint64_t v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v67;
  char v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  _DWORD *v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t j;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  llvm::ValueSymbolTable *v105;
  uint64_t k;
  uint64_t v107;
  int v108;
  void ***v111;
  void **v112;
  char v113;
  void **v114;
  unsigned int v115;
  uint64_t v116;
  __int128 v117;
  _DWORD *v118;
  _BYTE __b[800];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v4 = result[10];
  v111 = result + 9;
  while (v4 != (void **)v111)
  {
    if (v4)
      v6 = v4 - 3;
    else
      v6 = 0;
    v114 = v6;
    v9 = (void **)v6[5];
    v8 = v6 + 5;
    v7 = v9;
    if (v9 != v8)
    {
      if (v7)
        v10 = v7 - 3;
      else
        v10 = 0;
      if (*((_BYTE *)v10 + 16) != 30)
      {
        switch(*((_BYTE *)v10 + 16))
        {
          case 0x1E:
            __break(1u);
            return result;
          case 0x1F:
            v108 = (*((_DWORD *)v10 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_175;
          case 0x20:
          case 0x26:
            v108 = (*((_DWORD *)v10 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_175;
          case 0x21:
          case 0x25:
            break;
          case 0x24:
            v108 = *((_WORD *)v10 + 9) & 1;
            goto LABEL_175;
          case 0x27:
            v108 = *((_DWORD *)v10 + 20) + 1;
LABEL_175:
            if (!v108)
              goto LABEL_171;
            break;
          default:
            goto LABEL_171;
        }
      }
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = v11;
        v14 = &__b[392 * v12 + 16];
        *v14 = 1;
        for (i = 1; i != 49; i += 3)
          LODWORD(v14[i]) = -1;
        v11 = 1;
        v12 = 1;
      }
      while ((v13 & 1) == 0);
      v112 = v4;
      memset_pattern16(__b, &xmmword_1C677F4F0, 0x10uLL);
      v16 = (void **)v114[6];
      if (v16 != v8)
      {
        do
        {
          v17 = v16 - 3;
          if (v16)
            v18 = v16 - 3;
          else
            v18 = 0;
          v19 = (void **)v16[1];
          if (*((_BYTE *)v18 + 16) == 84)
          {
            v20 = (uint64_t)*(v18 - 4);
            if (v20)
            {
              if (!*(_BYTE *)(v20 + 16) && *(void **)(v20 + 24) == v18[9] && (*(_BYTE *)(v20 + 33) & 0x20) != 0)
              {
                ItrKind = llvm::GetItrKind((llvm *)*((unsigned int *)*(v16 - 7) + 9));
                if (a2)
                {
                  if (ItrKind && *(v16 - 2) && (*((_DWORD *)*v17 + 2) & 0xFE) != 0x12)
                  {
                    v22 = v17[-4 * (*((_DWORD *)v16 - 1) & 0x7FFFFFF)];
                    v23 = *((unsigned __int8 *)v22 + 16);
                    if (v22 && v23 < 4)
                    {
                      v24 = 0;
                    }
                    else
                    {
                      if (v23 != 62 && (v23 != 5 || v22[9] != 34))
                        goto LABEL_23;
                      v33 = *((_DWORD *)v22 + 5);
                      if ((v33 & 0x7FFFFFF) != 3)
                        goto LABEL_23;
                      v34 = (v33 & 0x40000000) != 0 ? (char *)*((_QWORD *)v22 - 1) : (char *)(v22 - 48);
                      v58 = 32;
                      while (v58 != 96)
                      {
                        v59 = *(unsigned __int8 *)(*(_QWORD *)&v34[v58] + 16);
                        v58 += 32;
                        if (v59 != 16)
                          goto LABEL_23;
                      }
                      if ((v33 & 0x40000000) != 0)
                        v60 = (_WORD *)*((_QWORD *)v22 - 1);
                      else
                        v60 = v22 - 48;
                      v61 = *((_QWORD *)v60 + 8);
                      v62 = (_QWORD *)(v61 + 24);
                      if (*(_DWORD *)(v61 + 32) >= 0x41u)
                        v62 = (_QWORD *)*v62;
                      v63 = (v33 & 0x40000000) != 0 ? (char *)*((_QWORD *)v22 - 1) : (char *)(v22 - 48);
                      v64 = *(_QWORD *)v63;
                      v65 = *(unsigned __int8 *)(*(_QWORD *)v63 + 16);
                      if (!v64 || v65 > 3)
                        goto LABEL_23;
                      v24 = *(_DWORD *)v62;
                    }
                    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 400))(a2);
                    v27 = v26;
                    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 336))(a2);
                    v29 = v24
                        + (((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 24))(v28, v27) * v25) >> 4);
                    if ((_DWORD)v29 != -1)
                    {
                      v30 = *((unsigned __int8 *)*v17 + 8) == 2;
                      v31 = *(_QWORD *)&__b[8 * (*((_BYTE *)*v17 + 8) == 2)];
                      if ((v31 & 1) != 0)
                        v32 = v31 >> 58;
                      else
                        v32 = *(unsigned int *)(v31 + 64);
                      if (v32 <= v29)
                        sub_1C496F5AC((unint64_t *)&__b[8 * (*((_BYTE *)*v17 + 8) == 2)], (v29 + 1), 0);
                      sub_1C496F8DC((unint64_t *)&__b[8 * v30], v29);
                      v35 = (uint64_t)*(v16 - 2);
                      v36 = *(_QWORD *)(*(_QWORD *)(v35 + 24) + 40);
                      do
                      {
                        v37 = *(_QWORD *)(v35 + 24);
                        if (*(_BYTE *)(v37 + 16) == 83)
                          goto LABEL_23;
                        v38 = *(_QWORD *)(v37 + 40);
                        if (v38 != v36)
                        {
                          NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a3, v38, v36);
                          v36 = NearestCommonDominator;
                          if (!NearestCommonDominator || NearestCommonDominator == (_QWORD)v114)
                            break;
                        }
                        v35 = *(_QWORD *)(v35 + 8);
                      }
                      while (v35);
                      if (v36)
                        v41 = v36 == (_QWORD)v114;
                      else
                        v41 = 1;
                      if (v41)
                        goto LABEL_23;
                      v42 = *((_DWORD *)a4 + 4);
                      if (v42)
                      {
                        v43 = *a4;
                        v44 = v42 - 1;
                        v45 = v44 & ((v36 >> 4) ^ (v36 >> 9));
                        v46 = *(_QWORD *)(*a4 + 16 * v45);
                        if (v36 == v46)
                        {
LABEL_61:
                          v49 = *(_QWORD **)(v43 + 16 * v45 + 8);
                          if (!v49)
                            goto LABEL_65;
                          v50 = 0;
                          do
                          {
                            v49 = (_QWORD *)*v49;
                            ++v50;
                          }
                          while (v49);
                        }
                        else
                        {
                          v47 = 1;
                          while (v46 != -4096)
                          {
                            v48 = v45 + v47++;
                            v45 = v48 & v44;
                            v46 = *(_QWORD *)(v43 + 16 * v45);
                            if (v36 == v46)
                              goto LABEL_61;
                          }
LABEL_65:
                          v50 = 0;
                        }
                        v51 = v44 & ((v114 >> 4) ^ (v114 >> 9));
                        v52 = *(void ***)(v43 + 16 * v51);
                        if (v114 == v52)
                        {
LABEL_70:
                          v55 = *(_QWORD **)(v43 + 16 * v51 + 8);
                          if (!v55)
                            goto LABEL_74;
                          v56 = 0;
                          do
                          {
                            v55 = (_QWORD *)*v55;
                            ++v56;
                          }
                          while (v55);
                        }
                        else
                        {
                          v53 = 1;
                          while (v52 != (void **)-4096)
                          {
                            v54 = v51 + v53++;
                            v51 = v54 & v44;
                            v52 = *(void ***)(v43 + 16 * v51);
                            if (v114 == v52)
                              goto LABEL_70;
                          }
LABEL_74:
                          v56 = 0;
                        }
                        if (v50 != v56)
                          goto LABEL_23;
                      }
                      LODWORD(v116) = v29;
                      *(_QWORD *)&v117 = v17;
                      *((_QWORD *)&v117 + 1) = v36;
                      v118 = 0;
                      if ((sub_1C5EAEA00((uint64_t)&__b[392 * v30 + 16], v29, &v118) & 1) == 0)
                      {
                        v57 = sub_1C5EAEAB0(&__b[392 * v30 + 16], (int *)&v116, v118);
                        *v57 = v29;
                        *(_OWORD *)(v57 + 2) = v117;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_23:
          v16 = v19;
        }
        while (v19 != v8);
      }
      v67 = 0;
      v68 = 1;
      do
      {
        v69 = v68;
        if (*(_DWORD *)&__b[392 * v67 + 16] >= 2u)
        {
          v113 = v68;
          v70 = *(_QWORD *)&__b[8 * v67];
          if ((v70 & 1) != 0)
            v71 = v70 >> 58;
          else
            LODWORD(v71) = *(_DWORD *)(v70 + 64);
          LODWORD(v118) = 0;
          if ((_DWORD)v71)
          {
            v72 = 0;
            while (!sub_1C5EAEA00((uint64_t)&__b[392 * v67 + 16], v72, &v116))
            {
LABEL_161:
              LODWORD(v118) = ++v72;
              if (v72 >= v71)
                goto LABEL_162;
            }
            if (v72)
            {
              v73 = v72 - 1;
              v74 = *(_QWORD *)&__b[8 * v67];
              if ((v74 & 1) != 0)
              {
                if (((1 << v73) & (v74 >> 1) & ~(-1 << (v74 >> 58))) == 0)
                  goto LABEL_115;
              }
              else if ((*(_QWORD *)(*(_QWORD *)v74 + 8 * (v73 >> 6)) & (1 << v73)) == 0)
              {
                goto LABEL_115;
              }
              v75 = v72 - 2;
              if (v72 >= 2)
              {
                if ((v74 & 1) != 0)
                {
                  if (((1 << v75) & (v74 >> 1) & ~(-1 << (v74 >> 58))) != 0)
                    goto LABEL_115;
                }
                else if ((*(_QWORD *)(*(_QWORD *)v74 + 8 * (v75 >> 6)) & (1 << v75)) != 0)
                {
                  goto LABEL_115;
                }
              }
            }
            else
            {
LABEL_115:
              v76 = *((_QWORD *)sub_1C5EAEDC8(&__b[392 * v67 + 16], (int *)&v118) + 2);
              v77 = v72 + 1;
              v115 = v72 + 1;
              v78 = 1;
              if (v72 + 1 < v71)
              {
                while (sub_1C5EAEA00((uint64_t)&__b[392 * v67 + 16], v77, &v116))
                {
                  if (*((_QWORD *)sub_1C5EAEDC8(&__b[392 * v67 + 16], (int *)&v115) + 2) != v76)
                  {
                    if (v78 > 1)
                      break;
                    v79 = sub_1C5EAEDC8(&__b[392 * v67 + 16], (int *)&v115);
                    v80 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a3, *((_QWORD *)v79 + 2), v76);
                    if ((void **)v80 == v114)
                      break;
                    v77 = v115;
                    v76 = v80;
                  }
                  ++v78;
                  v115 = ++v77;
                  if (v77 >= v71)
                    break;
                }
                v72 = v118;
                v77 = (_DWORD)v118 + 1;
              }
              if (v77 >= v71)
              {
                v83 = 1;
              }
              else
              {
                v81 = 0;
                v82 = *(_QWORD *)&__b[8 * v67];
                v83 = v71 - v72;
                while (1)
                {
                  v84 = v77 + v81;
                  v85 = (v82 >> 1) & ~(-1 << (v82 >> 58));
                  if ((v82 & 1) == 0)
                  {
                    v86 = v84 >> 6;
                    LOBYTE(v84) = v84 & 0x3F;
                    v85 = *(_QWORD *)(*(_QWORD *)v82 + 8 * v86);
                  }
                  if (((v85 >> v84) & 1) == 0)
                    break;
                  ++v81;
                  if (!(v77 - (_DWORD)v71 + v81))
                    goto LABEL_132;
                }
                v83 = v81 + 1;
              }
LABEL_132:
              if (v83 == v78 + 1)
              {
                sub_1C5EA2B74(&__b[392 * v67 + 16], v72 + v83 - 1);
                --v78;
              }
              if (v78 != 1)
              {
LABEL_141:
                for (j = *(_QWORD *)(v76 + 48); j != v76 + 40; j = *(_QWORD *)(j + 8))
                {
                  v90 = j - 24;
                  if (j)
                    v91 = j - 24;
                  else
                    v91 = 0;
                  if (*(_BYTE *)(v91 + 16) != 83)
                    goto LABEL_149;
                }
                v90 = 0;
LABEL_149:
                v92 = a3;
                LODWORD(v116) = v72;
                v93 = v72 + v78;
                if (v72 < v93)
                {
                  v94 = (uint64_t *)(v90 + 24);
                  v95 = v72;
                  do
                  {
                    v96 = *((_QWORD *)sub_1C5EAEDC8(&__b[392 * v67 + 16], (int *)&v116) + 1);
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v96 + 40) + 40, (uint64_t ***)v96);
                    v97 = *(_QWORD *)(v96 + 24);
                    v98 = *(_QWORD **)(v96 + 32);
                    *v98 = v97;
                    *(_QWORD *)(v97 + 8) = v98;
                    *(_QWORD *)(v96 + 24) = 0;
                    *(_QWORD *)(v96 + 32) = 0;
                    v99 = *((_QWORD *)sub_1C5EAEDC8(&__b[392 * v67 + 16], (int *)&v116) + 1);
                    v100 = *(_QWORD *)(v90 + 40);
                    *(_QWORD *)(v99 + 40) = v100;
                    *(_WORD *)(v100 + 18) &= ~0x8000u;
                    if ((*(_BYTE *)(v99 + 23) & 0x10) != 0)
                    {
                      v104 = *(_QWORD *)(v100 + 56);
                      if (v104)
                      {
                        v105 = *(llvm::ValueSymbolTable **)(v104 + 104);
                        if (v105)
                          llvm::ValueSymbolTable::reinsertValue(v105, (llvm::Value *)v99);
                      }
                    }
                    v101 = *v94;
                    *(_QWORD *)(v99 + 24) = *v94;
                    *(_QWORD *)(v99 + 32) = v94;
                    v102 = v99 + 24;
                    *(_QWORD *)(v101 + 8) = v102;
                    *v94 = v102;
                    sub_1C5EA2B74(&__b[392 * v67 + 16], v95);
                    v103 = *(_QWORD *)&__b[8 * v67];
                    if ((v103 & 1) != 0)
                      *(_QWORD *)&__b[8 * v67] = ((2 * ~((-1 << (v103 >> 58)) | (1 << v95))) | 0xFC00000000000000) & v103 | 1;
                    else
                      *(_QWORD *)(*(_QWORD *)v103 + 8 * (v95 >> 6)) &= ~(1 << v95);
                    LODWORD(v116) = ++v95;
                  }
                  while (v95 < v93);
                }
                a3 = v92;
                goto LABEL_161;
              }
              if (v83 == 1 && v72)
              {
                v87 = v72 - 1;
                v88 = *(_QWORD *)&__b[8 * v67];
                if ((v88 & 1) != 0)
                {
                  if (((1 << v87) & (v88 >> 1) & ~(-1 << (v88 >> 58))) == 0)
                    goto LABEL_141;
                }
                else if ((*(_QWORD *)(*(_QWORD *)v88 + 8 * (v87 >> 6)) & (1 << v87)) == 0)
                {
                  goto LABEL_141;
                }
              }
            }
            sub_1C5EA2B74(&__b[392 * v67 + 16], v72);
            goto LABEL_161;
          }
LABEL_162:
          v69 = v113;
        }
        v68 = 0;
        v67 = 1;
      }
      while ((v69 & 1) != 0);
      for (k = 8; k != -8; k -= 8)
        result = sub_1C4914448((void ***)&__b[k]);
      v107 = 784;
      do
      {
        if ((__b[v107 - 376] & 1) == 0)
          result = (void ***)MEMORY[0x1CAA32FB4](*(_QWORD *)&__b[v107 - 368], 8);
        v107 -= 392;
      }
      while (v107);
      v4 = v112;
    }
LABEL_171:
    v4 = (void **)v4[1];
  }
  return 0;
}

uint64_t sub_1C5EA2B74(_DWORD *a1, int a2)
{
  uint64_t result;
  int v4;
  _DWORD *v5;

  v5 = 0;
  result = sub_1C5EAEA00((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -2;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1C5EA2BC4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t *v33;
  BOOL v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  unsigned int v44;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  llvm::BasicBlock **v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t *v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int64x2_t *v75;
  int64x2_t *v76;
  uint64_t v77;
  int64x2_t v78;
  uint64_t v79;
  int64x2_t *v80;
  int32x2_t v81;
  uint64_t *v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  int v92;
  _OWORD *v93;
  int v94;
  unsigned int v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  int v99;
  BOOL v100;
  unsigned int v101;
  _QWORD *v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  void **v108;
  int v109;
  llvm::BasicBlock *v110;
  _QWORD *v111;
  int v112;
  uint64_t v113;
  uint64_t UniquePredecessor;
  llvm::BasicBlock *v115;
  _QWORD *v116;
  _QWORD *v117;
  unsigned int v118;
  uint64_t *v119;
  _QWORD *v120;
  char *v121;
  uint64_t *v122;
  llvm::Instruction *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  unsigned int v130;
  uint64_t v131;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  llvm::Instruction *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  llvm::ValueSymbolTable *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  char *v161;
  uint64_t *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t v169;
  char *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  llvm::ValueSymbolTable *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v193;
  _QWORD *v194;
  void **v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t *v201;
  int64x2_t v202;
  int64x2_t v203;
  char *v204;
  void *__p;
  char *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  int v212;
  _BYTE v213[64];
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  int v221;
  _BYTE v222[32];
  char *v223;
  char *v224;
  uint64_t v225;
  int v226;
  _BYTE v227[32];
  llvm::BasicBlock *v228;
  void *v229;
  unsigned int v230;
  unsigned int v231;
  _QWORD v232[4];
  void *v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  void *v237;
  _OWORD v238[2];
  void *v239;
  uint64_t v240;
  _BYTE v241[32];
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unsigned int v247;
  _QWORD **v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;

  v251 = *MEMORY[0x1E0C80C00];
  v214 = 0;
  v215 = 0;
  v216 = 0;
  v209 = v213;
  v210 = v213;
  v211 = 8;
  v212 = 0;
  v1 = a1 + 9;
  v2 = (uint64_t *)a1[10];
  if (v2 == a1 + 9)
    goto LABEL_297;
  do
  {
    if (v2)
      v3 = v2 - 3;
    else
      v3 = 0;
    v4 = (uint64_t *)v3[5];
    if (v4 == v3 + 5)
      goto LABEL_49;
    v5 = 0;
    while (1)
    {
      v6 = v4 ? (uint64_t)(v4 - 3) : 0;
      v7 = *(unsigned __int8 *)(v6 + 16);
      if (v7 <= 0x3B)
        break;
      v8 = v7 - 60;
      if (v8 > 0x1C)
        goto LABEL_31;
      if (v8 == 24)
      {
        v9 = *(_QWORD *)(v6 - 32);
        if (v9)
        {
          if (!*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v6 + 72) && (*(_BYTE *)(v9 + 33) & 0x20) != 0)
          {
            v10 = *(_DWORD *)(*(v4 - 7) + 36);
            if ((v10 - 1682) <= 0x8B)
            {
              if (!v5)
              {
                v237 = (char *)v238 + 8;
                *(_QWORD *)&v238[0] = 0x200000000;
                v242 = v3;
                v243 = (uint64_t)&v245;
                v244 = 0x200000000;
                sub_1C63A3C6C((uint64_t)&v233, (uint64_t)&v214, (uint64_t *)&v242, (uint64_t)&v243);
                v5 = v233;
                if ((uint64_t *)v243 != &v245)
                  free((void *)v243);
                if (v237 != (char *)v238 + 8)
                  free(v237);
                v10 = *(_DWORD *)(*(v4 - 7) + 36);
              }
              llvm::SampleInfo::SampleInfo((uint64_t)&v242, v10, 1);
              v13 = (uint64_t)&v4[-4 * (*((_DWORD *)v4 - 1) & 0x7FFFFFF) - 3];
              v14 = *(uint64_t **)(v13 + 32 * v246);
              v15 = *(_QWORD *)(v13 + 32 * v247);
              v242 = v14;
              v243 = v15;
              sub_1C63A3908((uint64_t)v5 + 8, (uint64_t)(v4 - 3), (uint64_t *)&v242);
              goto LABEL_31;
            }
          }
        }
        goto LABEL_18;
      }
      if (((1 << v8) & 0x1010003A) != 0 || !v8 && (*(_WORD *)(v6 + 18) & 0x301) != 0)
        goto LABEL_48;
LABEL_31:
      v4 = (uint64_t *)*v4;
      if (v4 == v3 + 5)
        goto LABEL_49;
    }
    if (v7 == 37)
      goto LABEL_48;
    if (v7 != 33 && v7 != 39)
      goto LABEL_31;
LABEL_18:
    v11 = *(_QWORD *)(v6 + 64);
    if (v11 && (*(_BYTE *)(v11 + 17) & 0x30) != 0)
      goto LABEL_31;
    v12 = *(_DWORD *)(v6 + 20);
    if ((v12 & 0x80000000) == 0
      || (v16 = v6 - 32 * (v12 & 0x7FFFFFF), v19 = *(_QWORD *)(v16 - 8), v17 = v16 - 8, (v18 = v19) == 0))
    {
LABEL_21:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v6, 45) & 1) == 0
        && (llvm::CallBase::hasFnAttrOnCalledFunction(v6, 44) & 1) == 0)
      {
        goto LABEL_48;
      }
      goto LABEL_31;
    }
    v20 = -v18;
    while (1)
    {
      v21 = *(_DWORD *)(*(_QWORD *)(v17 + v20) + 8);
      v22 = v21 > 7;
      v23 = (1 << v21) & 0x83;
      if (v22 || v23 == 0)
        break;
      v20 += 16;
      if (!v20)
        goto LABEL_21;
    }
LABEL_48:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v209, (uint64_t)v3);
LABEL_49:
    v2 = (uint64_t *)v2[1];
  }
  while (v2 != v1);
  if (!(_DWORD)v215)
  {
LABEL_297:
    v27 = 0;
    goto LABEL_300;
  }
  v242 = a1;
  v207 = 0;
  v208 = 0;
  __p = 0;
  sub_1C5643D14((char **)&__p, (uint64_t)&v242);
  v26 = (char *)__p;
  v25 = v207;
  if (v207 != __p)
  {
    v27 = 0;
    v203 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v204 = (char *)__p;
    while (1)
    {
      v29 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      v28 = v29;
      v228 = (llvm::BasicBlock *)v29;
      v242 = 0;
      v30 = v214;
      v31 = v216;
      v32 = sub_1C61A4EFC(v214, v216, v29, &v242);
      v33 = v242;
      if (v32 && v242 != (uint64_t *)(v30 + 72 * v31))
        break;
      v35 = 0;
LABEL_295:
      v27 |= v35;
      if (v25 == v26)
      {
        v25 = (char *)__p;
        if (!__p)
          goto LABEL_300;
        goto LABEL_299;
      }
    }
    v237 = (void *)1;
    v238[0] = v203;
    v238[1] = v203;
    v239 = v241;
    v240 = 0x400000000;
    v223 = v227;
    v224 = v227;
    v225 = 4;
    v226 = 0;
    v233 = &v235;
    v235 = v28;
    v236 = 0;
    v36 = 1;
    v234 = 0x400000001;
    while (1)
    {
      v37 = (char *)v233 + 16 * v36;
      v38 = *((_QWORD *)v37 - 2);
      v39 = (char *)*((_QWORD *)v37 - 1);
      LODWORD(v234) = v36 - 1;
      v218 = (char *)v38;
      v219 = v39;
      v40 = (uint64_t)v228;
      if (v228 == (llvm::BasicBlock *)v38)
        goto LABEL_60;
      v242 = 0;
      v59 = v214;
      v60 = v216;
      v61 = sub_1C61A4EFC(v214, v216, v38, &v242);
      v62 = v242;
      if (v61)
        v63 = v242 == (uint64_t *)(v59 + 72 * v60);
      else
        v63 = 1;
      if (v63)
      {
        LODWORD(v39) = (_DWORD)v219;
LABEL_60:
        if ((int)v39 <= 10)
        {
          v41 = (uint64_t)v218;
          v42 = (char *)*((_QWORD *)v218 + 5);
          if (v42 != v218 + 40)
          {
            v43 = v42 - 24;
            if (!v42)
              v43 = 0;
            v44 = v43[16] - 40;
            if (v44 < 0xFFFFFFF5)
              v43 = 0;
            if (v42)
            {
              if (v43[16] == 30 && v44 >= 0xFFFFFFF5)
              {
                v46 = *((_DWORD *)v43 + 5);
                if ((v46 & 0x40000000) != 0)
                {
                  v48 = (char *)*((_QWORD *)v43 - 1);
                  v47 = v46 & 0x7FFFFFF;
                }
                else
                {
                  v47 = v46 & 0x7FFFFFF;
                  v48 = &v43[-32 * v47];
                }
                v49 = (_DWORD)v47 == 3;
                if (v47 == v49)
                {
LABEL_79:
                  if (v41 == v40
                    || ((v52 = (char *)sub_1C477672C((uint64_t)&v209, v41), v210 != v209)
                      ? (v53 = &v211)
                      : (v53 = (uint64_t *)((char *)&v211 + 4)),
                        v52 == &v210[8 * *(unsigned int *)v53]
                     && ((v242 = 0, v54 = v214, v55 = v216, !sub_1C61A4EFC(v214, v216, v41, &v242))
                      || v242 == (uint64_t *)(v54 + 72 * v55)
                      || !*((_DWORD *)v242 + 4))))
                  {
                    v56 = (char *)*((_QWORD *)v218 + 5);
                    if (v56 == v218 + 40)
                    {
                      v58 = 0;
                    }
                    else
                    {
                      v57 = v56 ? (uint64_t)(v56 - 24) : 0;
                      v58 = *(unsigned __int8 *)(v57 + 16) - 29 >= 0xB ? 0 : v57;
                    }
                    v64 = *(_DWORD *)(v58 + 20);
                    if ((v64 & 0x40000000) != 0)
                    {
                      v66 = *(_QWORD *)(v58 - 8);
                      v65 = v64 & 0x7FFFFFF;
                    }
                    else
                    {
                      v65 = v64 & 0x7FFFFFF;
                      v66 = v58 - 32 * v65;
                    }
                    v67 = (_DWORD)v65 == 3;
                    if (v65 != v67)
                    {
                      v68 = (uint64_t *)(v66 + 32 * v67);
                      v69 = 32 * v65 - 32 * v67;
                      do
                      {
                        v70 = *v68;
                        v68 += 4;
                        sub_1C621E53C((uint64_t)&v233, v70, (_DWORD)v219 + 1);
                        v69 -= 32;
                      }
                      while (v69);
                    }
                  }
                }
                else
                {
                  v50 = (llvm::BasicBlock **)&v48[32 * v49];
                  v51 = 32 * v47 - 32 * v49;
                  while (llvm::BasicBlock::getUniquePredecessor(*v50) == v41)
                  {
                    v50 += 4;
                    v51 -= 32;
                    if (!v51)
                      goto LABEL_79;
                  }
                }
              }
            }
          }
        }
        goto LABEL_107;
      }
      v242 = &v244;
      v243 = 0x400000000;
      v249 = 0;
      v250 = 0;
      v248 = &v249;
      v71 = *((_DWORD *)v62 + 4);
      if (v71)
        break;
LABEL_110:
      v72 = *((_DWORD *)v33 + 4);
      if (!v72)
        goto LABEL_111;
      v82 = (uint64_t *)v33[1];
      v83 = &v82[3 * v72];
      while (1)
      {
        v84 = v82[1];
        v85 = v82[2];
        if (v250)
          break;
        if (!(_DWORD)v243)
          goto LABEL_111;
        v89 = 16 * v243;
        v90 = v242 + 1;
        while (*(v90 - 1) != v84 || *v90 != v85)
        {
          v90 += 2;
          v89 -= 16;
          if (!v89)
            goto LABEL_111;
        }
        if (!v89)
          goto LABEL_111;
LABEL_149:
        if ((v237 & 1) != 0)
        {
          v92 = 4;
          v93 = v238;
        }
        else
        {
          v92 = DWORD2(v238[0]);
          if (!DWORD2(v238[0]))
          {
            v102 = 0;
LABEL_164:
            v103 = sub_1C5648ADC((uint64_t)&v237, (uint64_t)&v218, &v218, v102);
            *v103 = v218;
            v104 = v218;
            v105 = v240;
            if (v240 >= (unint64_t)HIDWORD(v240))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v239, (uint64_t)v241, v240 + 1, 8);
              v105 = v240;
            }
            *((_QWORD *)v239 + v105) = v104;
            LODWORD(v240) = v240 + 1;
            goto LABEL_167;
          }
          v93 = *(_OWORD **)&v238[0];
        }
        v94 = v92 - 1;
        v95 = ((v218 >> 4) ^ (v218 >> 9)) & v94;
        v96 = (_QWORD *)v93 + v95;
        v97 = (_QWORD *)*v96;
        if (v218 != (char *)*v96)
        {
          v98 = 0;
          v99 = 1;
          while (v97 != (_QWORD *)-4096)
          {
            if (v98)
              v100 = 0;
            else
              v100 = v97 == (_QWORD *)-8192;
            if (v100)
              v98 = v96;
            v101 = v95 + v99++;
            v95 = v101 & v94;
            v96 = (_QWORD *)v93 + v95;
            v97 = (_QWORD *)*v96;
            if (v218 == (char *)*v96)
              goto LABEL_167;
          }
          if (v98)
            v102 = v98;
          else
            v102 = v96;
          goto LABEL_164;
        }
LABEL_167:
        v106 = *v82;
        v82 += 3;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v223, v106);
        if (v82 == v83)
          goto LABEL_111;
      }
      v86 = v249;
      if (v249)
      {
        while (1)
        {
          v87 = v86[4];
          if (v87 <= v84)
          {
            if (v87 < v84)
              goto LABEL_137;
            v88 = v86[5];
            if (v88 <= v85)
              break;
          }
LABEL_138:
          v86 = (_QWORD *)*v86;
          if (!v86)
            goto LABEL_111;
        }
        if (v88 >= v85)
          goto LABEL_149;
LABEL_137:
        ++v86;
        goto LABEL_138;
      }
LABEL_111:
      sub_1C6143384(v249);
      if (v242 != &v244)
        free(v242);
LABEL_107:
      v36 = v234;
      if (!(_DWORD)v234)
      {
        v35 = (_DWORD)v240 != 0;
        if ((_DWORD)v240)
        {
          v218 = v222;
          v219 = v222;
          v220 = 4;
          v221 = 0;
          v107 = (void **)v239;
          v108 = (void **)((char *)v239 + 8 * v240);
          v109 = 1;
          do
          {
            v110 = (llvm::BasicBlock *)*v107;
            v229 = *v107;
            v111 = sub_1C63A3A50((uint64_t)&v214, (uint64_t *)&v228);
            if (*((_DWORD *)v111 + 4)
              && (v116 = v111,
                  v117 = sub_1C63A3A50((uint64_t)&v214, (uint64_t *)&v229),
                  (v118 = *((_DWORD *)v116 + 4)) != 0))
            {
              v195 = v108;
              v119 = (uint64_t *)v116[1];
              v196 = &v119[3 * v118];
              v198 = (uint64_t)(v117 + 1);
              v112 = v109 & 1;
              v120 = (_QWORD *)((char *)v110 + 40);
              do
              {
                v121 = (char *)sub_1C477672C((uint64_t)&v223, *v119);
                if (v224 == v223)
                  v122 = (uint64_t *)((char *)&v225 + 4);
                else
                  v122 = &v225;
                if (v121 == &v224[8 * *(unsigned int *)v122])
                  break;
                v123 = (llvm::Instruction *)*v119;
                v200 = v119;
                if ((v109 & 1) != 0)
                {
                  v128 = (_QWORD *)((char *)v110 + 40);
                  if (*((_QWORD **)v110 + 6) != v120)
                  {
                    v128 = (_QWORD *)*((_QWORD *)v110 + 6);
                    while (1)
                    {
                      v129 = v128 - 3;
                      if (!v128)
                        v129 = 0;
                      if (*((_BYTE *)v129 + 16) != 83)
                        break;
                      v128 = (_QWORD *)v128[1];
                      if (v128 == v120)
                      {
                        v128 = (_QWORD *)((char *)v110 + 40);
                        goto LABEL_221;
                      }
                    }
                    v140 = *((unsigned __int8 *)v128 - 8) - 38;
                    v22 = v140 > 0x38;
                    v141 = (1 << v140) & 0x100060000000001;
                    if (!v22 && v141 != 0)
                      v128 = (_QWORD *)v128[1];
                  }
LABEL_221:
                  v143 = v128 ? (llvm::Instruction *)(v128 - 3) : 0;
                  llvm::Instruction::moveBefore(v123, v143);
                  v193 = *v119;
                  llvm::SampleInfo::SampleInfo((uint64_t)&v242, *(_DWORD *)(*(_QWORD *)(*v119 - 32) + 36), 1);
                  v144 = v193 - 32 * (*(_DWORD *)(v193 + 20) & 0x7FFFFFF);
                  v145 = *(uint64_t **)(v144 + 32 * v246);
                  v146 = *(_QWORD *)(v144 + 32 * v247);
                  v242 = v145;
                  v243 = v146;
                  sub_1C63A3908(v198, *v119, (uint64_t *)&v242);
                }
                else
                {
                  llvm::Instruction::clone(v123);
                  v125 = v124;
                  v126 = (_QWORD *)((char *)v110 + 40);
                  if (*((_QWORD **)v110 + 6) != v120)
                  {
                    v126 = (_QWORD *)*((_QWORD *)v110 + 6);
                    while (1)
                    {
                      v127 = v126 - 3;
                      if (!v126)
                        v127 = 0;
                      if (*((_BYTE *)v127 + 16) != 83)
                        break;
                      v126 = (_QWORD *)v126[1];
                      if (v126 == v120)
                      {
                        v126 = (_QWORD *)((char *)v110 + 40);
                        goto LABEL_211;
                      }
                    }
                    v130 = *((unsigned __int8 *)v126 - 8) - 38;
                    v22 = v130 > 0x38;
                    v131 = (1 << v130) & 0x100060000000001;
                    if (!v22 && v131 != 0)
                      v126 = (_QWORD *)v126[1];
                  }
LABEL_211:
                  if (v126)
                    v133 = v126 - 3;
                  else
                    v133 = 0;
                  v134 = v133[5];
                  *(_QWORD *)(v124 + 40) = v134;
                  *(_WORD *)(v134 + 18) &= ~0x8000u;
                  if ((*(_BYTE *)(v124 + 23) & 0x10) != 0)
                  {
                    v147 = *(_QWORD *)(v134 + 56);
                    if (v147)
                    {
                      v148 = *(llvm::ValueSymbolTable **)(v147 + 104);
                      if (v148)
                      {
                        v194 = v133;
                        llvm::ValueSymbolTable::reinsertValue(v148, (llvm::Value *)v125);
                        v133 = v194;
                      }
                    }
                  }
                  v136 = v133[3];
                  v135 = v133 + 3;
                  *(_QWORD *)(v125 + 32) = v135;
                  *(_QWORD *)(v125 + 24) = v136;
                  *(_QWORD *)(v136 + 8) = v125 + 24;
                  *v135 = v125 + 24;
                  llvm::SampleInfo::SampleInfo((uint64_t)&v242, *(_DWORD *)(*(_QWORD *)(v125 - 32) + 36), 1);
                  v137 = v125 - 32 * (*(_DWORD *)(v125 + 20) & 0x7FFFFFF);
                  v138 = *(uint64_t **)(v137 + 32 * v246);
                  v139 = *(_QWORD *)(v137 + 32 * v247);
                  v242 = v138;
                  v243 = v139;
                  sub_1C63A3908(v198, v125, (uint64_t *)&v242);
                  v119 = v200;
                }
                v119 += 3;
              }
              while (v119 != v196);
              v108 = v195;
            }
            else
            {
              v112 = v109;
            }
            if (v112)
              v109 = 0;
            v113 = (uint64_t)v228;
            if (v110 != v228)
            {
              UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v110);
              if (UniquePredecessor != v113)
              {
                v115 = (llvm::BasicBlock *)UniquePredecessor;
                do
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v218, (uint64_t)v115);
                  v115 = (llvm::BasicBlock *)llvm::BasicBlock::getUniquePredecessor(v115);
                }
                while (v115 != (llvm::BasicBlock *)v113);
              }
              v110 = (llvm::BasicBlock *)v113;
            }
            ++v107;
          }
          while (v107 != v108);
          v229 = v232;
          v231 = 4;
          v149 = 1;
          v232[0] = v110;
          do
          {
            v150 = *((_QWORD *)v229 + --v149);
            v230 = v149;
            v151 = *(_QWORD *)(v150 + 40);
            if (v151 == v150 + 40)
            {
              v153 = 0;
            }
            else
            {
              if (v151)
                v152 = v151 - 24;
              else
                v152 = 0;
              if (*(unsigned __int8 *)(v152 + 16) - 29 >= 0xB)
                v153 = 0;
              else
                v153 = v152;
            }
            v154 = *(_DWORD *)(v153 + 20);
            if ((v154 & 0x40000000) != 0)
            {
              v156 = *(_QWORD *)(v153 - 8);
              v155 = v154 & 0x7FFFFFF;
            }
            else
            {
              v155 = v154 & 0x7FFFFFF;
              v156 = v153 - 32 * v155;
            }
            v157 = (_DWORD)v155 == 3;
            if (v155 != v157)
            {
              v158 = (uint64_t *)(v156 + 32 * v155);
              v159 = (uint64_t *)(v156 + 32 * v157);
              do
              {
                v217 = 0;
                v160 = *v159;
                v217 = v160;
                if ((sub_1C6154170((uint64_t)&v237, v160, &v242) & 1) == 0)
                {
                  v161 = (char *)sub_1C477672C((uint64_t)&v218, v160);
                  if (v219 == v218)
                    v162 = (uint64_t *)((char *)&v220 + 4);
                  else
                    v162 = &v220;
                  if (v161 == &v219[8 * *(unsigned int *)v162])
                  {
                    v164 = sub_1C63A3A50((uint64_t)&v214, (uint64_t *)&v228);
                    if (*((_DWORD *)v164 + 4))
                    {
                      v165 = v164;
                      v166 = sub_1C63A3A50((uint64_t)&v214, &v217);
                      v167 = *((_DWORD *)v165 + 4);
                      if (v167)
                      {
                        v168 = (uint64_t *)v165[1];
                        v197 = &v168[3 * v167];
                        v199 = (uint64_t)(v166 + 1);
                        v169 = v160 + 40;
                        do
                        {
                          v170 = (char *)sub_1C477672C((uint64_t)&v223, *v168);
                          if (v224 == v223)
                            v171 = (uint64_t *)((char *)&v225 + 4);
                          else
                            v171 = &v225;
                          if (v170 == &v224[8 * *(unsigned int *)v171])
                            break;
                          llvm::Instruction::clone((llvm::Instruction *)*v168);
                          v173 = v172;
                          v174 = v160 + 40;
                          if (*(_QWORD *)(v160 + 48) != v169)
                          {
                            v174 = *(_QWORD *)(v160 + 48);
                            while (1)
                            {
                              v175 = v174 - 24;
                              if (!v174)
                                v175 = 0;
                              if (*(_BYTE *)(v175 + 16) != 83)
                                break;
                              v174 = *(_QWORD *)(v174 + 8);
                              if (v174 == v169)
                              {
                                v174 = v160 + 40;
                                goto LABEL_273;
                              }
                            }
                            v176 = *(unsigned __int8 *)(v174 - 8) - 38;
                            v22 = v176 > 0x38;
                            v177 = (1 << v176) & 0x100060000000001;
                            if (!v22 && v177 != 0)
                              v174 = *(_QWORD *)(v174 + 8);
                          }
LABEL_273:
                          v201 = v168;
                          if (v174)
                            v179 = v174 - 24;
                          else
                            v179 = 0;
                          v180 = *(_QWORD *)(v179 + 40);
                          *(_QWORD *)(v172 + 40) = v180;
                          *(_WORD *)(v180 + 18) &= ~0x8000u;
                          if ((*(_BYTE *)(v172 + 23) & 0x10) != 0)
                          {
                            v186 = *(_QWORD *)(v180 + 56);
                            if (v186)
                            {
                              v187 = *(llvm::ValueSymbolTable **)(v186 + 104);
                              if (v187)
                                llvm::ValueSymbolTable::reinsertValue(v187, (llvm::Value *)v173);
                            }
                          }
                          v182 = *(_QWORD *)(v179 + 24);
                          v181 = (_QWORD *)(v179 + 24);
                          *(_QWORD *)(v173 + 32) = v181;
                          *(_QWORD *)(v173 + 24) = v182;
                          *(_QWORD *)(v182 + 8) = v173 + 24;
                          *v181 = v173 + 24;
                          llvm::SampleInfo::SampleInfo((uint64_t)&v242, *(_DWORD *)(*(_QWORD *)(v173 - 32) + 36), 1);
                          v183 = v173 - 32 * (*(_DWORD *)(v173 + 20) & 0x7FFFFFF);
                          v184 = *(uint64_t **)(v183 + 32 * v246);
                          v185 = *(_QWORD *)(v183 + 32 * v247);
                          v242 = v184;
                          v243 = v185;
                          sub_1C63A3908(v199, v173, (uint64_t *)&v242);
                          v168 = v201 + 3;
                        }
                        while (v201 + 3 != v197);
                      }
                    }
                  }
                  else
                  {
                    v163 = v230;
                    if (v230 >= (unint64_t)v231)
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v229, (uint64_t)v232, v230 + 1, 8);
                      v163 = v230;
                    }
                    *((_QWORD *)v229 + v163) = v160;
                    ++v230;
                  }
                }
                v159 += 4;
              }
              while (v159 != v158);
              v149 = v230;
            }
          }
          while (v149);
          if (v229 != v232)
            free(v229);
          v35 = 1;
          if (v219 != v218)
            free(v219);
        }
        v26 = v204;
        if (v233 != &v235)
          free(v233);
        if (v224 != v223)
          free(v224);
        if (v239 != v241)
          free(v239);
        if ((v237 & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)&v238[0], 8);
        goto LABEL_295;
      }
    }
    v73 = v62[1];
    v74 = v73 + 24 * v71;
    while (2)
    {
      v75 = (int64x2_t *)(v73 + 8);
      if (!v250)
      {
        v76 = (int64x2_t *)v242;
        v77 = v243;
        if (!(_DWORD)v243)
        {
          v78 = *v75;
          goto LABEL_123;
        }
        v78 = *v75;
        v79 = 16 * v243;
        v80 = (int64x2_t *)v242;
        while (1)
        {
          v81 = vmovn_s64(vceqq_s64(*v80, v78));
          if ((v81.i32[0] & v81.i32[1] & 1) != 0)
            break;
          ++v80;
          v79 -= 16;
          if (!v79)
            goto LABEL_122;
        }
        if (v79)
          goto LABEL_126;
LABEL_122:
        if (v243 < 4)
        {
LABEL_123:
          if (v243 >= HIDWORD(v243))
          {
            v202 = v78;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v242, (uint64_t)&v244, v243 + 1, 16);
            v78 = v202;
            v76 = (int64x2_t *)v242;
            v77 = v243;
          }
          v76[v77] = v78;
          LODWORD(v243) = v243 + 1;
LABEL_126:
          v73 += 24;
          if (v73 == v74)
            goto LABEL_110;
          continue;
        }
        do
        {
          sub_1C6294AE8((uint64_t)&v248, v242[2 * v77 - 2], v242[2 * v77 - 1], &v242[2 * v77 - 2]);
          LODWORD(v77) = v243 - 1;
          LODWORD(v243) = v77;
        }
        while ((_DWORD)v77);
      }
      break;
    }
    sub_1C6294AE8((uint64_t)&v248, *(_QWORD *)(v73 + 8), *(_QWORD *)(v73 + 16), (_OWORD *)(v73 + 8));
    goto LABEL_126;
  }
  v27 = 0;
  if (v207)
  {
LABEL_299:
    v207 = v25;
    operator delete(v25);
  }
LABEL_300:
  if (v210 != v209)
    free(v210);
  v188 = v214;
  if (v216)
  {
    v189 = 72 * v216;
    v190 = (_QWORD *)(v214 + 24);
    do
    {
      if ((*(v190 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v191 = (_QWORD *)*(v190 - 2);
        if (v190 != v191)
          free(v191);
      }
      v190 += 9;
      v189 -= 72;
    }
    while (v189);
  }
  MEMORY[0x1CAA32FB4](v188, 8);
  return v27 & 1;
}

uint64_t sub_1C5EA3C3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  _BYTE *v5;
  _DWORD **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int *v24;
  _QWORD *v25;
  unsigned int v26;
  llvm::Value **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE *v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _DWORD *v40;
  llvm::Value *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char v50;
  char v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t ****v54;
  int v55;
  void **v56;
  BOOL v57;
  _OWORD *v58;
  unsigned int v59;
  uint64_t ****v60;
  uint64_t ***v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t ****v64;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD v71[4];
  __int16 v72;
  _QWORD v73[4];
  __int16 v74;
  void *v75;
  uint64_t v76;
  _BYTE v77[32];
  uint64_t v78;
  _OWORD v79[4];
  void *v80;
  uint64_t v81;
  _QWORD v82[34];

  v82[32] = *MEMORY[0x1E0C80C00];
  v80 = v82;
  v81 = 0x2000000000;
  v78 = 1;
  v79[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v79[1] = v79[0];
  v79[2] = v79[0];
  v79[3] = v79[0];
  v1 = *(_QWORD *)(a1 + 80);
  v68 = a1 + 72;
  if (v1 == a1 + 72)
  {
    v50 = 0;
    goto LABEL_78;
  }
  v67 = 0;
  do
  {
    v2 = v1 - 24;
    if (!v1)
      v2 = 0;
    v3 = v2 + 40;
    for (i = *(_QWORD *)(v2 + 48); i != v3; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v5 = (_BYTE *)(i - 24);
      else
        v5 = 0;
      if (v5[16] == 89)
      {
        v6 = *(_BYTE *)(*((_QWORD *)v5 - 8) + 16) == 91 ? (_DWORD **)*((_QWORD *)v5 - 8) : 0;
        v7 = *(_BYTE *)(*((_QWORD *)v5 - 4) + 16) == 16 ? *((_QWORD *)v5 - 4) : 0;
        v8 = !v6 || v7 == 0;
        if (!v8 && *((_BYTE *)*v6 + 8) == 18)
        {
          v9 = *(v6 - 8);
          v10 = *(_DWORD *)(*v9 + 32);
          v11 = (*v6)[8];
          v75 = v77;
          v76 = 0x800000000;
          if ((int)v11 < 1)
          {
            v16 = v77;
            v17 = v77;
            v18 = v77;
            goto LABEL_42;
          }
          v12 = *v6[8];
          if ((v12 & 0x80000000) == 0 && v12 < v10)
          {
            v69 = v1;
            LODWORD(v13) = 0;
            v14 = 1;
            do
            {
              v15 = v14;
              if (v13 >= HIDWORD(v76))
              {
                v66 = v9;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, (uint64_t)v77, v13 + 1, 4);
                v9 = v66;
                LODWORD(v13) = v76;
              }
              *((_DWORD *)v75 + v13) = v12;
              v13 = (v76 + 1);
              LODWORD(v76) = v76 + 1;
              if (v11 == v15)
                break;
              v12 = v6[8][v15];
              if (v12 < 0)
                break;
              v14 = v15 + 1;
            }
            while (v12 < v10);
            v19 = v15 >= v11;
            v17 = v75;
            v16 = (char *)v75 + 4 * v13;
            if ((_DWORD)v13)
            {
              v20 = 0;
              v21 = 4 * v13 - 4;
              v1 = v69;
              while (v21 != v20)
              {
                v22 = *(_DWORD *)((char *)v75 + v20);
                v23 = *(_DWORD *)((char *)v75 + v20 + 4);
                v20 += 4;
                if (v23 < v22)
                {
                  v18 = (char *)v75 + v20;
                  if (v19)
                    goto LABEL_42;
                  goto LABEL_66;
                }
              }
              v18 = v16;
              if (!v19)
                goto LABEL_66;
LABEL_42:
              if (v18 == v16)
              {
                v24 = (unsigned int *)(v7 + 24);
                v25 = v9;
                if (*(_DWORD *)(v7 + 32) >= 0x41u)
                  v24 = *(unsigned int **)v24;
                v26 = v6[8][*v24];
                v27 = llvm::ConstantInt::get((llvm::ConstantInt *)(***(_QWORD ***)v5 + 1960), (int)v26, 0);
                if ((v5[23] & 0x10) != 0)
                {
                  v28 = ***(_QWORD ***)v5;
                  v29 = *(_QWORD *)(v28 + 152);
                  v30 = *(unsigned int *)(v28 + 168);
                  if (!(_DWORD)v30)
                    goto LABEL_52;
                  LODWORD(v31) = (v30 - 1) & ((v5 >> 4) ^ (v5 >> 9));
                  v32 = (_QWORD *)(v29 + 16 * v31);
                  v33 = (_BYTE *)*v32;
                  if ((_BYTE *)*v32 != v5)
                  {
                    v34 = 1;
                    while (v33 != (_BYTE *)-4096)
                    {
                      v35 = v31 + v34++;
                      v31 = v35 & (v30 - 1);
                      v33 = *(_BYTE **)(v29 + 16 * v31);
                      if (v33 == v5)
                      {
                        v32 = (_QWORD *)(v29 + 16 * v31);
                        goto LABEL_53;
                      }
                    }
LABEL_52:
                    v32 = (_QWORD *)(v29 + 16 * v30);
                  }
LABEL_53:
                  v36 = (_QWORD *)v32[1];
                  v39 = *v36;
                  v38 = (char *)(v36 + 2);
                  v37 = v39;
                }
                else
                {
                  v37 = 0;
                  v38 = &byte_1C871356D;
                }
                v72 = 773;
                v71[0] = v38;
                v71[1] = v37;
                v71[2] = "_elem";
                v73[0] = v71;
                v70 = v70 & 0xFFFFFFFF00000000 | v26;
                v73[2] = v70;
                v74 = 2306;
                v40 = operator new(0x80uLL);
                v40[21] = v40[21] & 0x38000000 | 2;
                v41 = (llvm::Value *)(v40 + 16);
                *(_QWORD *)v40 = 0;
                *((_QWORD *)v40 + 1) = 0;
                *((_QWORD *)v40 + 2) = 0;
                *((_QWORD *)v40 + 3) = v40 + 16;
                *((_QWORD *)v40 + 4) = 0;
                *((_QWORD *)v40 + 5) = 0;
                *((_QWORD *)v40 + 6) = 0;
                *((_QWORD *)v40 + 7) = v40 + 16;
                llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v40 + 16), v25, (uint64_t)v27, (uint64_t)v73, (uint64_t)v5);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v5, v41, (llvm::Value *)1);
                v42 = v81;
                if (v81 >= (unint64_t)HIDWORD(v81))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v81 + 1, 8);
                  v42 = v81;
                }
                *((_QWORD *)v80 + v42) = v5;
                LODWORD(v81) = v81 + 1;
                v73[0] = 0;
                if ((sub_1C5EAEE2C((uint64_t)&v78, (uint64_t)v6, v73) & 1) == 0)
                {
                  v43 = v78 >> 1;
                  if ((v78 & 1) != 0)
                    v44 = 8;
                  else
                    v44 = DWORD2(v79[0]);
                  if (4 * v43 + 4 >= 3 * v44)
                  {
                    v44 *= 2;
                  }
                  else if (v44 + ~v43 - HIDWORD(v78) > v44 >> 3)
                  {
                    goto LABEL_62;
                  }
                  sub_1C5EAEED8((uint64_t)&v78, v44);
                  v73[0] = 0;
                  sub_1C5EAEE2C((uint64_t)&v78, (uint64_t)v6, v73);
LABEL_62:
                  LODWORD(v78) = v78 + 2;
                  if (*(_QWORD *)v73[0] != -4096)
                    --HIDWORD(v78);
                  *(_QWORD *)v73[0] = v6;
                }
                v67 = 1;
                v17 = v75;
              }
            }
            else
            {
              v18 = (char *)v75;
              v1 = v69;
              if (v19)
                goto LABEL_42;
            }
LABEL_66:
            if (v17 != v77)
              free(v17);
            continue;
          }
        }
      }
    }
    v1 = *(_QWORD *)(v1 + 8);
  }
  while (v1 != v68);
  if ((_DWORD)v81)
  {
    v45 = (uint64_t *)v80;
    v46 = 8 * v81;
    do
    {
      v47 = *v45++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v47 + 40) + 40, (uint64_t ***)v47);
      v48 = *(_QWORD *)(v47 + 24);
      v49 = *(_QWORD **)(v47 + 32);
      *v49 = v48;
      *(_QWORD *)(v48 + 8) = v49;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v47);
      v46 -= 8;
    }
    while (v46);
  }
  v50 = v67;
LABEL_78:
  v51 = v78;
  if (v78 > 1)
  {
    if ((v78 & 1) != 0)
    {
      v56 = &v80;
      v54 = (uint64_t ****)v79;
    }
    else
    {
      v54 = *(uint64_t *****)&v79[0];
      v55 = DWORD2(v79[0]);
      if (!DWORD2(v79[0]))
        goto LABEL_82;
      v56 = (void **)(*(_QWORD *)&v79[0] + 8 * DWORD2(v79[0]));
    }
    v55 = v78 & 1;
    while (*v54 == (uint64_t ***)-4096 || *v54 == (uint64_t ***)-8192)
    {
      if (++v54 == (uint64_t ****)v56)
      {
        v54 = (uint64_t ****)v56;
        break;
      }
    }
  }
  else
  {
    if ((_DWORD)v78)
    {
      v52 = 8;
      v53 = v79;
    }
    else
    {
      v53 = *(_OWORD **)&v79[0];
      v52 = DWORD2(v79[0]);
    }
    v54 = (uint64_t ****)v53 + v52;
    v55 = v78;
LABEL_82:
    v56 = (void **)v54;
  }
  v57 = v55 == 0;
  if (v55)
    v58 = v79;
  else
    v58 = *(_OWORD **)&v79[0];
  v59 = DWORD2(v79[0]);
  if (!v57)
    v59 = 8;
  v60 = (uint64_t ****)v58 + v59;
  if (v54 != v60)
  {
    do
    {
      v61 = *v54;
      if (!(*v54)[1])
      {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v61[5] + 5), *v54);
        v62 = v61[3];
        v63 = v61[4];
        *v63 = (uint64_t *)v62;
        v62[1] = (uint64_t *)v63;
        v61[3] = 0;
        v61[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v61);
      }
      v64 = v54 + 1;
      v54 = (uint64_t ****)v56;
      if (v64 != (uint64_t ****)v56)
      {
        v54 = v64;
        while (((unint64_t)*v54 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v54 == (uint64_t ****)v56)
          {
            v54 = (uint64_t ****)v56;
            break;
          }
        }
      }
    }
    while (v54 != v60);
    v51 = v78;
  }
  if ((v51 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v79[0], 8);
  if (v80 != v82)
    free(v80);
  return v50 & 1;
}

uint64_t sub_1C5EA42E4(uint64_t a1, llvm::SmallPtrSetImplBase *a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  _QWORD v27[4];
  __int16 v28;

  v27[0] = "agx.driver_bindings";
  v28 = 259;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)v27);
  if (result)
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)(result + 48) + 8);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      do
      {
        v11 = *(_QWORD *)(**(_QWORD **)(v7 + 48) + v9);
        v12 = *(unsigned int *)(v11 + 8);
        if (v12 == 4)
          v13 = 1;
        else
          v13 = a3;
        if ((v12 - 3) <= 1 && v13 != 0)
        {
          v15 = *(_QWORD *)(v11 - 8 * v12);
          if (v15)
            result = (uint64_t)sub_1C4774094(a2, *(_QWORD *)(v15 + 128));
        }
        v9 += 8;
      }
      while (v10 != v9);
    }
  }
  else
  {
    v27[0] = "agx.compute_driver_bindings";
    v28 = 259;
    result = llvm::Module::getNamedMetadata(a1, (uint64_t)v27);
    if (result)
    {
      v16 = result;
      v17 = *(unsigned int *)(*(_QWORD *)(result + 48) + 8);
      if ((_DWORD)v17)
      {
        for (i = 0; i != v17; ++i)
        {
          v19 = *(_QWORD *)(**(_QWORD **)(v16 + 48) + 8 * i);
          v20 = *(unsigned int *)(v19 + 8);
          v21 = v19;
          if ((_DWORD)v20)
          {
            do
            {
              v22 = *(unsigned __int8 **)(v21 - 8 * *(unsigned int *)(v19 + 8));
              if (v22 && *v22 - 4 <= 0x1E)
              {
                v23 = *((unsigned int *)v22 + 2);
                v24 = v23 == 4 ? 1 : a3;
                if ((v23 - 3) <= 1 && v24 != 0)
                {
                  v26 = *(_QWORD *)&v22[-8 * v23];
                  if (v26)
                    result = (uint64_t)sub_1C4774094(a2, *(_QWORD *)(v26 + 128));
                }
              }
              v21 += 8;
              --v20;
            }
            while (v20);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5EA4468(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  const char *v4;
  __int16 v5;

  v4 = "agx.support.soft.fault";
  v5 = 259;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)&v4);
  if (result)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(result + 48)
                               - 8 * *(unsigned int *)(***(_QWORD ***)(result + 48) + 8))
                   + 128);
    v3 = (_QWORD *)(v2 + 24);
    if (*(_DWORD *)(v2 + 32) >= 0x41u)
      v3 = (_QWORD *)*v3;
    return *v3 != 0;
  }
  return result;
}

uint64_t sub_1C5EA44DC(llvm::Instruction *this, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  unsigned int v12;
  llvm *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  llvm *UnderlyingObject;
  llvm *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  uint64_t v34;
  __int32 v35;

  v7 = *((unsigned __int8 *)this + 16) - 33;
  if (v7 <= 0x37)
  {
    if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x808001D0000010) != 0)
      return 0xFFFFFFFFLL;
    if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x8000000000041) != 0)
    {
      v17 = *((_QWORD *)this + 8);
      if (!v17 || (*(_BYTE *)(v17 + 17) & 0x30) == 0)
      {
        v18 = *((_DWORD *)this + 5);
        if (v18 < 0)
        {
          v25 = (char *)this - 32 * (v18 & 0x7FFFFFF);
          v28 = *((_QWORD *)v25 - 1);
          v26 = v25 - 8;
          v27 = v28;
          if (v28)
          {
            v29 = -v27;
            do
            {
              v30 = *(_DWORD *)(*(_QWORD *)&v26[v29] + 8);
              v31 = v30 > 7;
              v32 = (1 << v30) & 0x83;
              if (v31 || v32 == 0)
                return 0xFFFFFFFFLL;
              v29 += 16;
            }
            while (v29);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
        {
          return 0xFFFFFFFFLL;
        }
      }
    }
    else if (v7 == 27 && (*((_WORD *)this + 9) & 0x301) != 0)
    {
      return 0xFFFFFFFFLL;
    }
  }
  if ((llvm::Instruction::mayThrow(this) & 1) != 0 || !llvm::Instruction::willReturn(this))
    return 0xFFFFFFFFLL;
  v8 = *((unsigned __int8 *)this + 16);
  if (v8 == 60)
  {
    v13 = (llvm *)*((_QWORD *)this - 4);
    v14 = *(_DWORD *)(*(_QWORD *)v13 + 8);
    if ((v14 & 0xFE) == 0x12)
      v14 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v13 + 16) + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40);
    if (v14 >> 8 == 2)
    {
      UnderlyingObject = llvm::getUnderlyingObject(v13, (const llvm::Value *)6);
      if (UnderlyingObject)
      {
        if (*((_BYTE *)UnderlyingObject + 16) == 60)
        {
          v20 = llvm::getUnderlyingObject(*((llvm **)UnderlyingObject - 4), (const llvm::Value *)6);
          if (v20)
          {
            if (*((_BYTE *)v20 + 16) == 3)
            {
              v21 = sub_1C477672C((uint64_t)a3, (uint64_t)v20);
              v22 = a3[1];
              v23 = v22 == *a3 ? (unsigned int *)((char *)a3 + 20) : (unsigned int *)(a3 + 2);
              if (v21 != (_QWORD *)(v22 + 8 * *v23))
              {
                v8 = *((unsigned __int8 *)this + 16);
LABEL_45:
                if ((v8 - 89) < 5)
                  return 0;
                if (v8 != 84)
                  return 1;
                v9 = *((_QWORD *)this - 4);
                if (v9)
                  goto LABEL_49;
                return 0xFFFFFFFFLL;
              }
            }
          }
        }
      }
    }
    else if (v14 >> 8 == 64)
    {
      return 1;
    }
    v16 = (v14 & 0xFFFFFF00) != 0x100 || a4 == 0;
    if (!v16 && (sub_1C5EA4468(v15) & 1) != 0)
      return 5;
    return 0xFFFFFFFFLL;
  }
  if (v8 != 84)
    goto LABEL_45;
  v9 = *((_QWORD *)this - 4);
  if (!v9)
    return 0xFFFFFFFFLL;
  if (*(_BYTE *)(v9 + 16)
    || *(_QWORD *)(v9 + 24) != *((_QWORD *)this + 9)
    || (*(_BYTE *)(v9 + 33) & 0x20) == 0
    || ((v10 = *(_DWORD *)(v9 + 36), result = 0xFFFFFFFFLL, (v10 - 2493) > 0xF)
     || ((1 << (v10 + 67)) & 0xFF0F) == 0)
    && ((v12 = v10 - 2588, v12 > 0xF) || ((1 << v12) & 0xFF0F) == 0))
  {
LABEL_49:
    if (*(_BYTE *)(v9 + 16) || *(_QWORD *)(v9 + 24) != *((_QWORD *)this + 9) || (*(_BYTE *)(v9 + 33) & 0x20) == 0)
      return 0xFFFFFFFFLL;
    v24 = *((_QWORD *)this + 8);
    if (!v24 || (*(_BYTE *)(v24 + 20) & 4) == 0 && (*(_BYTE *)(v24 + 17) & 0x10) == 0)
    {
      v35 = 7;
      if (sub_1C53E4BBC((uint64_t)this, &v35, 1uLL))
      {
        v34 = *((_QWORD *)this - 4);
        if (!v34
          || *(_BYTE *)(v34 + 16)
          || *(_QWORD *)(v34 + 24) != *((_QWORD *)this + 9)
          || *(_DWORD *)(v34 + 36) != 7)
        {
          return 1000;
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) == 0
        && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) & 1) == 0)
      {
        return 1000;
      }
    }
    return 1;
  }
  return result;
}

BOOL sub_1C5EA484C(uint64_t a1, int a2)
{
  int v2;
  _BOOL8 result;
  int v6;
  uint64_t **v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  char v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[9];

  v44[8] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 16);
  if ((v2 - 89) <= 4 && ((1 << (v2 - 89)) & 0x13) != 0)
    return 0;
  if ((v2 - 66) <= 0xC)
  {
    v6 = *(_DWORD *)(a1 + 20);
    if ((v6 & 0x40000000) != 0)
      v7 = *(uint64_t ***)(a1 - 8);
    else
      v7 = (uint64_t **)(a1 - 32 * (v6 & 0x7FFFFFF));
    v12 = **v7;
    v13 = *(_QWORD *)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 13)
      v13 = 0;
    if (v12)
      v14 = (*(_DWORD *)(v12 + 8) & 0xFFFFF0FF) == 13;
    else
      v14 = 0;
    if (!v14 && (!v13 || *(_DWORD *)(v13 + 8) >= 0x1000u))
    {
      if (v2 != 73 && v2 != 66)
        return (v2 - 69) < 4;
      v15 = (v6 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v6 & 0x7FFFFFF);
      v20 = *(_QWORD *)(*(_QWORD *)v15 + 8);
      if (!v20 || *(_QWORD *)(v20 + 8))
        return (v2 - 69) < 4;
    }
    return 1;
  }
  if ((v2 - 81) < 2)
    return 0;
  if (v2 == 84)
  {
    v9 = *(_QWORD *)(a1 - 32);
    if (v9)
    {
      if (!*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(a1 + 72) && (*(_BYTE *)(v9 + 33) & 0x20) != 0)
      {
        v33 = *(_DWORD *)(v9 + 36);
        if (v33 == 2131)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 8);
          if ((!v35 || *(_QWORD *)(v35 + 8)) && !*(_BYTE *)(*(_QWORD *)a1 + 8))
            return 0;
        }
        else if (v33 == 139)
        {
          v34 = *(_QWORD *)(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 8);
          if (!v34 || *(_QWORD *)(v34 + 8))
            return 0;
        }
        if ((sub_1C5EA0BBC(a1) & 1) != 0)
          return 0;
        result = 0;
        if (v33 == 1281 || v33 == 1822)
          return result;
      }
    }
  }
  v36 = &v37;
  v37 = 0;
  if (sub_1C4E7B6EC(&v36, a1) && v37)
  {
    v10 = *(_DWORD *)(a1 + 20);
    v11 = (v10 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v10 & 0x7FFFFFF);
    v16 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if (!v16 || *(_QWORD *)(v16 + 8))
      return 0;
  }
  v17 = *(unsigned __int8 *)(a1 + 16);
  if (v17 > 0x3D)
  {
    result = 0;
    if (v17 == 62 || v17 == 83)
      return result;
    goto LABEL_61;
  }
  if (v17 != 53)
  {
    if (v17 == 60)
    {
      v18 = **(_QWORD **)(a1 - 32);
      v19 = *(_DWORD *)(v18 + 8);
      if ((v19 & 0xFE) == 0x12)
        v19 = *(_DWORD *)(**(_QWORD **)(v18 + 16) + 8);
      return (v19 & 0xFFFFFF00) != 0x4000;
    }
    goto LABEL_61;
  }
  v21 = *(_DWORD *)(a1 + 20);
  if ((v21 & 0x40000000) != 0)
    v22 = *(_QWORD *)(a1 - 8);
  else
    v22 = a1 - 32 * (v21 & 0x7FFFFFF);
  v23 = *(_QWORD *)(v22 + 32);
  if (*(_BYTE *)(v23 + 16) != 16)
    return 1;
  v24 = (_QWORD *)(v23 + 24);
  if (*(_DWORD *)(v23 + 32) >= 0x41u)
    v24 = (_QWORD *)*v24;
  v25 = *(_DWORD *)v24;
  v37 = 1;
  v38 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v39 = v38;
  v40 = v38;
  v41 = v38;
  v42 = v44;
  v43 = 0x800000000;
  v26 = sub_1C5EA4C7C(a1, 0, 1, v25, (uint64_t)&v37);
  if (v42 != v44)
    free(v42);
  if ((v37 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](v38.i64[0], 8);
    if ((v26 & 1) == 0)
      goto LABEL_60;
    return 0;
  }
  if ((v26 & 1) != 0)
    return 0;
LABEL_60:
  v17 = *(unsigned __int8 *)(a1 + 16);
LABEL_61:
  if (!a2 || v17 != 45)
  {
    if ((v17 | 0x10) == 0x39)
    {
      v28 = *(_DWORD *)(a1 + 20);
      v29 = (v28 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v28 & 0x7FFFFFF);
      if (*(_BYTE *)(*(_QWORD *)(v29 + 32) + 16) == 16)
      {
        v30 = *(_QWORD *)(a1 + 8);
        if (v30)
        {
          if (!*(_QWORD *)(v30 + 8))
          {
            while (1)
            {
              v32 = *(_QWORD *)(v30 + 24);
              v30 = *(_QWORD *)(v32 + 8);
              if (!v30 || *(_QWORD *)(v30 + 8))
                break;
              v31 = *(unsigned __int8 *)(v32 + 16);
              if ((v31 - 66) >= 0xD)
                return v31 != 62 || (*(_BYTE *)(*(_QWORD *)(v30 + 24) + 16) & 0xFE) != 0x3C;
            }
          }
        }
      }
    }
    return 1;
  }
  v27 = sub_1C5EA4F14(a1, 1, 0, 0);
  result = 0;
  if ((v27 & 1) == 0)
    return 1;
  return result;
}

uint64_t sub_1C5EA4C7C(uint64_t a1, char a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v36;
  uint8x8_t v37;
  uint64_t v39;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    return 1;
  v11 = a4;
  while (1)
  {
    v12 = *(_QWORD *)(v5 + 24);
    v39 = v12;
    v13 = *(unsigned __int8 *)(v12 + 16);
    switch((_DWORD)v13)
    {
      case 'B':
LABEL_24:
        if (!sub_1C5EA4C7C())
          return 0;
        sub_1C4E7C77C(a5, &v39);
        goto LABEL_77;
      case '>':
        goto LABEL_77;
      case '8':
        v14 = *(_DWORD *)(v12 + 20);
        if ((v14 & 0x40000000) != 0)
          v15 = *(_QWORD *)(v12 - 8);
        else
          v15 = v12 - 32 * (v14 & 0x7FFFFFF);
        v16 = *(_QWORD *)(v15 + 32);
        if (v16)
          v17 = *(_BYTE *)(v16 + 16) == 16;
        else
          v17 = 0;
        if (v17 && *(_QWORD *)v12 && *(_DWORD *)(*(_QWORD *)v12 + 8) == 16397)
        {
          v19 = (uint64_t *)(v16 + 24);
          if (*(_DWORD *)(v16 + 32) >= 0x41u)
            v19 = (uint64_t *)*v19;
          if (!*((_DWORD *)v19 + 1))
            goto LABEL_24;
        }
        break;
      default:
        if ((v13 - 41) > 0x11)
          return 0;
        v14 = *(_DWORD *)(v12 + 20);
        break;
    }
    if ((v14 & 0x40000000) != 0)
      v20 = *(uint64_t **)(v12 - 8);
    else
      v20 = (uint64_t *)(v12 - 32 * (v14 & 0x7FFFFFF));
    if (v13 > 0x38)
      return 0;
    if (((1 << v13) & 0x60200000000000) != 0)
    {
      if ((v14 & 0x40000000) != 0)
        v27 = *(_QWORD *)(v12 - 8);
      else
        v27 = v12 - 32 * (v14 & 0x7FFFFFF);
      if (*(_BYTE *)(*(_QWORD *)(v27 + 32) + 16) != 16)
        return 0;
      goto LABEL_77;
    }
    if (((1 << v13) & 0xA0000000000) == 0)
      break;
    v21 = *v20;
    v22 = *(_DWORD *)(*(_QWORD *)v12 + 8);
    v23 = *(_DWORD *)(*(_QWORD *)v12 + 8) >> 8;
    v24 = v22 == 13 && v23 == 16;
    if (!v24 && (v22 != 13 || (v23 == 32 ? (v25 = a3 == 0) : (v25 = 1), v25))
      || ((v14 & 0x40000000) != 0 ? (v26 = *(_QWORD *)(v12 - 8)) : (v26 = v12 - 32 * (v14 & 0x7FFFFFF)),
          (v29 = *(_QWORD *)(v26 + 32 * (v21 == a1)), v30 = *(unsigned __int8 *)(v29 + 16), v29)
        ? (v31 = v30 >= 0x1C)
        : (v31 = 0),
          v31 && v30 == 45))
    {
      v32 = (_DWORD)v13 == 43 && v21 == a1;
      v33 = v32;
      if (a4 > 4 || v33 || (a2 & 1) != 0)
        return 0;
    }
LABEL_77:
    v5 = *(_QWORD *)(v5 + 8);
    if (!v5)
      return 1;
  }
  if (v13 == 56)
  {
    v28 = (v14 & 0x40000000) != 0 ? *(_QWORD *)(v12 - 8) : v12 - 32 * (v14 & 0x7FFFFFF);
    v34 = *(_QWORD *)(v28 + 32);
    if (v34 && *(_BYTE *)(v34 + 16) == 16)
    {
      v36 = (_QWORD *)(v34 + 24);
      if (*(_DWORD *)(v34 + 32) >= 0x41u)
        v36 = (_QWORD *)*v36;
      v37 = (uint8x8_t)vcnt_s8((int8x8_t)((*v36 >> v11) + 1));
      v37.i16[0] = vaddlv_u8(v37);
      if (v37.u32[0] == 1)
        goto LABEL_77;
    }
  }
  return 0;
}

uint64_t sub_1C5EA4F14(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _QWORD *v31;
  unsigned int v32;
  BOOL v34;
  int v35;
  int v36;
  uint64_t v39;

  if (!a4)
    goto LABEL_11;
  v4 = *((_DWORD *)a4 + 4);
  if (!v4)
    goto LABEL_11;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *a4;
  v7 = v4 - 1;
  v8 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  v9 = *(_QWORD *)(*a4 + 16 * v8);
  if (v5 != v9)
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(_QWORD *)(v6 + 16 * v8);
      if (v5 == v9)
        goto LABEL_7;
    }
    goto LABEL_11;
  }
LABEL_7:
  v12 = *(_QWORD **)(v6 + 16 * v8 + 8);
  if (!v12)
  {
LABEL_11:
    v13 = 0;
    goto LABEL_12;
  }
  v13 = 0;
  do
  {
    v12 = (_QWORD *)*v12;
    ++v13;
  }
  while (v12);
LABEL_12:
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    if (a4)
      v15 = a3;
    else
      v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 24);
      v17 = *(unsigned __int8 *)(v16 + 16);
      if (v16)
        v18 = v17 >= 0x1C;
      else
        v18 = 0;
      if (!v18 || v17 - 59 < 0xFFFFFFEE)
        return 0;
      v20 = *(_DWORD *)(v16 + 20);
      v21 = (v20 & 0x40000000) != 0 ? *(uint64_t **)(v16 - 8) : (uint64_t *)(v16 - 32 * (v20 & 0x7FFFFFF));
      if ((v17 | 2) != 0x2B)
        return 0;
      v22 = *v21;
      if (v15)
      {
        v23 = *((_DWORD *)a4 + 4);
        if (v23)
        {
          v24 = *(_QWORD *)(v16 + 40);
          v25 = *a4;
          v26 = v23 - 1;
          v27 = ((v24 >> 4) ^ (v24 >> 9)) & (v23 - 1);
          v28 = *(_QWORD *)(*a4 + 16 * v27);
          if (v24 == v28)
          {
LABEL_34:
            v31 = *(_QWORD **)(v25 + 16 * v27 + 8);
            if (v31)
            {
              v32 = 0;
              do
              {
                v31 = (_QWORD *)*v31;
                ++v32;
              }
              while (v31);
              v34 = v17 == 43 && v22 != a1;
              if (v32 > v13 || v34)
                return (uint64_t)v31;
              goto LABEL_48;
            }
          }
          else
          {
            v29 = 1;
            while (v28 != -4096)
            {
              v30 = v27 + v29++;
              v27 = v30 & v26;
              v28 = *(_QWORD *)(v25 + 16 * v27);
              if (v24 == v28)
                goto LABEL_34;
            }
          }
        }
      }
      if (v17 == 43 && v22 != a1)
        return 0;
LABEL_48:
      v35 = *(_DWORD *)(*(_QWORD *)v16 + 8);
      v36 = *(_DWORD *)(*(_QWORD *)v16 + 8) >> 8;
      if (v35 != 13 || v36 != 16)
      {
        v31 = 0;
        if (v35 != 13)
          return (uint64_t)v31;
        if (v36 != 32 || a2 == 0)
          return (uint64_t)v31;
      }
      v39 = *(_QWORD *)(v16 + 32 * (v22 == a1) - 64);
      if (v39 && *(_BYTE *)(v39 + 16) == 45)
        return 0;
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14);
  }
  return 1;
}

unint64_t sub_1C5EA50FC(uint64_t a1)
{
  uint64_t NamedMetadata;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  const char *v18;
  __int16 v19;

  v18 = "agx.boundcheck";
  v19 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)&v18);
  if (NamedMetadata)
  {
    v2 = *(uint64_t **)(NamedMetadata + 48);
    v3 = *((unsigned int *)v2 + 2);
    if ((_DWORD)v3)
    {
      v4 = *v2;
      v5 = -1;
      NamedMetadata = 1;
      do
      {
        v6 = (_QWORD *)(*(_QWORD *)v4 - 8 * *(unsigned int *)(*(_QWORD *)v4 + 8));
        v7 = *(_QWORD *)(v6[1] + 128);
        v8 = (unsigned int *)(v7 + 24);
        if (*(_DWORD *)(v7 + 32) >= 0x41u)
          v8 = *(unsigned int **)v8;
        v9 = *(_QWORD *)(*v6 + 8);
        v10 = *v8;
        switch(*(_QWORD *)v9)
        {
          case 9:
            v11 = *(_QWORD *)(v9 + 24);
            v12 = *(unsigned __int8 *)(v9 + 32);
            if (v11 == 0x6E6974726F706572 && v12 == 103)
              v5 = v10;
            break;
          case 0xDLL:
            v14 = *(_QWORD *)(v9 + 24);
            v15 = *(_QWORD *)(v9 + 29);
            if (v14 == 0x6F7479726F6D656DLL && v15 == 0x6B636568636F7479)
              NamedMetadata = v10;
            break;
          default:
            break;
        }
        v4 += 8;
        --v3;
      }
      while (v3);
    }
    else
    {
      NamedMetadata = 1;
      v5 = -1;
    }
  }
  else
  {
    v5 = -1;
  }
  return v5 | (unint64_t)(NamedMetadata << 32);
}

uint64_t sub_1C5EA54B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v33;
  __int16 v34;

  v33 = "agx.local.store.spill";
  v34 = 259;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)&v33);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (result)
  {
    v4 = *(uint64_t **)(result + 48);
    v5 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v5)
    {
      v6 = *v4;
      result = 97;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)v6 - 8 * *(unsigned int *)(*(_QWORD *)v6 + 8));
        v8 = *(_QWORD *)(v7[1] + 128);
        v9 = (_QWORD *)(v8 + 24);
        if (*(_DWORD *)(v8 + 32) >= 0x41u)
          v9 = (_QWORD *)*v9;
        v10 = *(_QWORD *)(*v7 + 8);
        v11 = *(_QWORD *)v10;
        v12 = *(_DWORD *)v9;
        if (*(uint64_t *)v10 > 21)
        {
          if (v11 == 23)
          {
            v28 = *(_QWORD *)(v10 + 24);
            v29 = *(_QWORD *)(v10 + 32);
            v30 = *(_QWORD *)(v10 + 39);
            if (v28 == 0x657268742D726570 && v29 == 0x636F6C6C612D6461 && v30 == 0x73657479622D6163)
              *(_DWORD *)(a2 + 12) = v12;
          }
          else if (v11 == 22)
          {
            v20 = *(_QWORD *)(v10 + 24);
            v21 = *(_QWORD *)(v10 + 32);
            v22 = *(_QWORD *)(v10 + 38);
            v23 = v20 == 0x657268742D726570 && v21 == 0x6C6C6970732D6461;
            if (v23 && v22 == 0x73657479622D6C6CLL)
              *(_DWORD *)(a2 + 4) = v12;
          }
        }
        else if (v11 == 10)
        {
          v25 = *(_QWORD *)(v10 + 24);
          v26 = *(unsigned __int16 *)(v10 + 32);
          if (v25 == 0x6F79616C2D616F73 && v26 == 29813)
            *(_BYTE *)(a2 + 8) = v12 != 0;
        }
        else if (v11 == 17)
        {
          if (*(_QWORD *)(v10 + 24) == 0x672D646165726874
            && *(_QWORD *)(v10 + 32) == 0x7A69732D70756F72
            && *(_BYTE *)(v10 + 40) == 101)
          {
            *(_DWORD *)a2 = v12;
          }
          v15 = *(_QWORD *)(v10 + 24);
          v16 = *(_QWORD *)(v10 + 32);
          v17 = *(unsigned __int8 *)(v10 + 40);
          if (v15 == 0x6F79616C2D616F73 && v16 == 0x636F6C6C612D7475 && v17 == 97)
            *(_BYTE *)(a2 + 16) = v12 != 0;
        }
        v6 += 8;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t sub_1C5EA56B4(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  result = *(_QWORD *)(a1 - 32);
  v6 = *(_DWORD *)(*(_QWORD *)result + 8);
  v7 = v6;
  if ((v6 & 0xFE) == 0x12)
    v7 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)result + 16) + 8);
  v8 = v7 >> 8;
  if (a4 && v8 == 2)
    return 1;
  if (v8 - 1 > 1)
    return v8 == 64;
  if (*(_BYTE *)(result + 16) == 3)
    goto LABEL_12;
  result = (uint64_t)llvm::getUnderlyingObject((llvm *)result, (const llvm::Value *)6);
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 60)
      return 0;
    result = (uint64_t)llvm::getUnderlyingObject(*(llvm **)(result - 32), (const llvm::Value *)6);
    if (result)
    {
      if (*(_BYTE *)(result + 16) == 3)
      {
        v6 = *(_DWORD *)(*(_QWORD *)result + 8);
LABEL_12:
        if ((v6 & 0xFFFFFF00) != 0x200)
        {
          v9 = a3 + 2;
          v10 = *a3;
          if ((*a3 & 1) != 0)
          {
            v11 = 16;
            v12 = a3 + 2;
          }
          else
          {
            v12 = (int *)*((_QWORD *)a3 + 1);
            v11 = a3[4];
            if (!v11)
            {
              v20 = 0;
              goto LABEL_32;
            }
          }
          v13 = v11 - 1;
          v14 = (uint64_t *)&v12[8 * (v13 & ((result >> 4) ^ (result >> 9)))];
          v15 = *v14;
          if (*v14 == result)
            goto LABEL_16;
          v17 = 1;
          LODWORD(v18) = v13 & ((result >> 4) ^ (result >> 9));
          while (v15 != -4096)
          {
            v19 = v18 + v17++;
            v18 = v19 & v13;
            v15 = *(_QWORD *)&v12[8 * v18];
            if (v15 == result)
            {
              v14 = (uint64_t *)&v12[8 * v18];
              goto LABEL_16;
            }
          }
          if ((v10 & 1) != 0)
          {
            v20 = 16;
            v12 = a3 + 2;
          }
          else
          {
            v12 = (int *)*((_QWORD *)a3 + 1);
            v20 = a3[4];
          }
LABEL_32:
          v14 = (uint64_t *)&v12[8 * v20];
LABEL_16:
          if ((v10 & 1) == 0)
            v9 = (int *)*((_QWORD *)a3 + 1);
          LODWORD(v16) = a3[4];
          if ((*a3 & 1) != 0)
            v16 = 16;
          else
            v16 = v16;
          if (&v9[8 * v16] != (int *)v14)
            return *((_BYTE *)v14 + 24) != 0;
          return 0;
        }
        return 1;
      }
      return 0;
    }
  }
  return result;
}

llvm *sub_1C5EA5854(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  llvm *result;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  int *v15;
  llvm *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  result = 0;
  if (a1 && *(_BYTE *)(a1 + 16) == 60)
  {
    result = *(llvm **)(a1 - 32);
    v8 = *(_DWORD *)(*(_QWORD *)result + 8);
    if ((v8 & 0xFE) == 0x12)
      v8 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)result + 16) + 8);
    v9 = v8 >> 8;
    if (v9 == 64)
      return (llvm *)1;
    if (v9 != 2)
      return 0;
    if (*((_BYTE *)result + 16) != 3)
    {
      result = llvm::getUnderlyingObject(result, (const llvm::Value *)6);
      if (!result)
        return result;
      if (*((_BYTE *)result + 16) != 60)
        return 0;
      result = llvm::getUnderlyingObject(*((llvm **)result - 4), (const llvm::Value *)6);
      if (!result)
        return result;
      if (*((_BYTE *)result + 16) != 3)
        return 0;
    }
    v10 = a3 + 2;
    v11 = *a3;
    if ((*a3 & 1) != 0)
    {
      v12 = 16;
      v13 = a3 + 2;
    }
    else
    {
      v13 = (int *)*((_QWORD *)a3 + 1);
      v12 = a3[4];
      if (!v12)
      {
        v21 = 0;
        goto LABEL_33;
      }
    }
    v14 = v12 - 1;
    v15 = &v13[8 * (v14 & ((result >> 4) ^ (result >> 9)))];
    v16 = *(llvm **)v15;
    if (*(llvm **)v15 == result)
      goto LABEL_15;
    v18 = 1;
    LODWORD(v19) = v14 & ((result >> 4) ^ (result >> 9));
    while (v16 != (llvm *)-4096)
    {
      v20 = v19 + v18++;
      v19 = v20 & v14;
      v16 = *(llvm **)&v13[8 * v19];
      if (v16 == result)
      {
        v15 = &v13[8 * v19];
        goto LABEL_15;
      }
    }
    if ((v11 & 1) != 0)
    {
      v21 = 16;
      v13 = a3 + 2;
    }
    else
    {
      v13 = (int *)*((_QWORD *)a3 + 1);
      v21 = a3[4];
    }
LABEL_33:
    v15 = &v13[8 * v21];
LABEL_15:
    if ((v11 & 1) == 0)
      v10 = (int *)*((_QWORD *)a3 + 1);
    LODWORD(v17) = a3[4];
    if ((*a3 & 1) != 0)
      v17 = 16;
    else
      v17 = v17;
    if (&v10[8 * v17] != v15)
    {
      if (*((_BYTE *)v15 + 16))
        return (llvm *)(*((_QWORD *)v15 + 1) > 3uLL);
      else
        return (llvm *)a4;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C5EA59F0(llvm::Instruction *a1, int a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t **v7;
  int v9;
  llvm::Instruction *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  llvm *v28;
  BOOL v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  uint64_t *v39;
  uint64_t v40;

  result = 0;
  if (!a1)
    return result;
  v4 = *((unsigned __int8 *)a1 + 16);
  if (v4 < 0x1C)
    return result;
  v5 = v4 - 66;
  if (v4 - 66 <= 0xC)
  {
    v6 = *((_DWORD *)a1 + 5);
    if ((v6 & 0x40000000) != 0)
      v7 = (uint64_t **)*((_QWORD *)a1 - 1);
    else
      v7 = (uint64_t **)((char *)a1 - 32 * (v6 & 0x7FFFFFF));
    v11 = **v7;
    v12 = *(_QWORD *)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 13)
      v12 = 0;
    if (v11)
      v13 = (*(_DWORD *)(v11 + 8) & 0xFFFFF0FF) == 13;
    else
      v13 = 0;
    if (v13 || v12 && *(_DWORD *)(v12 + 8) < 0x1000u)
      return 1;
    result = 1;
    if (v5 <= 7 && ((1 << v5) & 0x83) != 0)
    {
      if ((v6 & 0x40000000) != 0)
        v14 = (char *)*((_QWORD *)a1 - 1);
      else
        v14 = (char *)a1 - 32 * (v6 & 0x7FFFFFF);
      v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
      if (v27)
        return *(_QWORD *)(v27 + 8) == 0;
      return 0;
    }
    return result;
  }
  v39 = &v40;
  v40 = 0;
  if (sub_1C4E7B6EC(&v39, (uint64_t)a1) && v40)
  {
    v9 = *((_DWORD *)a1 + 5);
    v10 = (v9 & 0x40000000) != 0
        ? (llvm::Instruction *)*((_QWORD *)a1 - 1)
        : (llvm::Instruction *)((char *)a1 - 32 * (v9 & 0x7FFFFFF));
    v15 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if (v15)
    {
      if (!*(_QWORD *)(v15 + 8))
        return 0;
    }
  }
  v16 = *((unsigned __int8 *)a1 + 16);
  if (v16 <= 0x3C)
  {
    if (*((unsigned __int8 *)a1 + 16) <= 0x3Bu)
    {
      if (v16 == 37)
        goto LABEL_62;
      if (v16 != 33 && v16 != 39)
        goto LABEL_40;
      goto LABEL_35;
    }
    v21 = **((_QWORD **)a1 - 4);
    if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
      v22 = *(_DWORD *)(**(_QWORD **)(v21 + 16) + 8) & 0xFFFFFF00;
    else
      v22 = *(_DWORD *)(v21 + 8) & 0xFFFFFF00;
    if (v22 != 0x4000)
    {
      v25 = v22 == 768;
      v26 = 10;
LABEL_58:
      if (v25)
        return v26;
      else
        return 100;
    }
    return 0;
  }
  v17 = v16 - 61;
  if (v17 > 0x1B)
    goto LABEL_40;
  if (!v17)
  {
    v23 = **((_QWORD **)a1 - 4);
    v24 = *(_DWORD *)(v23 + 8);
    if ((v24 & 0xFE) == 0x12)
      v24 = *(_DWORD *)(**(_QWORD **)(v23 + 16) + 8);
    v25 = (v24 & 0xFFFFFF00) == 0x4000;
    v26 = 5;
    goto LABEL_58;
  }
  if (v17 != 23)
  {
    if (((1 << v17) & 0x808001C) == 0)
      goto LABEL_40;
    goto LABEL_62;
  }
  v18 = *((_QWORD *)a1 - 4);
  if (!v18
    || *(_BYTE *)(v18 + 16)
    || *(_QWORD *)(v18 + 24) != *((_QWORD *)a1 + 9)
    || (*(_BYTE *)(v18 + 33) & 0x20) == 0)
  {
    goto LABEL_35;
  }
  v28 = (llvm *)*(unsigned int *)(v18 + 36);
  v29 = sub_1C47860D0(*(_DWORD *)(v18 + 36));
  result = 100;
  if (!v29 && ((_DWORD)v28 - 1682) >= 0x8C)
  {
    if (llvm::GetItrKind(v28))
      return 15;
    if ((sub_1C5E9D8A8((int)v28) & 1) != 0 || (sub_1C5E9D850((int)v28) & 1) != 0)
      return 10;
    result = 10;
    if (((_DWORD)v28 - 2471) >= 8
      && ((_DWORD)v28 - 2703) >= 2
      && ((_DWORD)v28 - 1996) >= 2)
    {
LABEL_35:
      v19 = *((_QWORD *)a1 + 8);
      if (v19 && (*(_BYTE *)(v19 + 17) & 0x30) != 0)
        goto LABEL_40;
      v20 = *((_DWORD *)a1 + 5);
      if (v20 < 0)
      {
        v30 = (char *)a1 - 32 * (v20 & 0x7FFFFFF);
        v33 = *((_QWORD *)v30 - 1);
        v31 = v30 - 8;
        v32 = v33;
        if (v33)
        {
          v34 = -v32;
          do
          {
            v35 = *(_DWORD *)(*(_QWORD *)&v31[v34] + 8);
            v36 = v35 > 7;
            v37 = (1 << v35) & 0x83;
            if (v36 || v37 == 0)
              goto LABEL_62;
            v34 += 16;
          }
          while (v34);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a1, 45) & 1) != 0
        || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a1, 44))
      {
LABEL_40:
        if ((llvm::Instruction::mayThrow(a1) & 1) == 0 && (llvm::Instruction::willReturn(a1) & 1) != 0)
        {
          if (a2)
            return 1;
          else
            return 20;
        }
      }
LABEL_62:
      if (a2)
        return 10;
      else
        return 100;
    }
  }
  return result;
}

void sub_1C5EA5D84(uint64_t a1, uint64_t a2)
{
  uint64_t NamedMetadata;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE v47[24];
  const char *v48;
  __int128 v49;
  char v50;
  __int16 v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  _WORD v56[20];

  v52 = "agx.speculative_bindings";
  v56[0] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)&v52);
  v52 = (const char *)v56;
  v53 = (char *)v56;
  v54 = 4;
  v55 = 0;
  if (NamedMetadata)
  {
    v4 = NamedMetadata;
    v5 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v52, *(_QWORD *)(**(_QWORD **)(v4 + 48) + v6));
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  v48 = "agx.driver_bindings";
  v51 = 259;
  v8 = llvm::Module::getNamedMetadata(a1, (uint64_t)&v48);
  if (v8)
  {
    v9 = v8;
    v10 = *(unsigned int *)(*(_QWORD *)(v8 + 48) + 8);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 0;
      v45 = 0;
      v13 = 8 * v10;
      do
      {
        v14 = *(_QWORD *)(**(_QWORD **)(v9 + 48) + v11);
        v15 = *(unsigned __int8 **)(v14 - 8 * *(unsigned int *)(v14 + 8));
        if (v15 && *v15 - 1 <= 1 && sub_1C5EA6114(*((_QWORD *)v15 + 16)))
        {
          v16 = *(unsigned int *)(v14 + 8);
          if (v16 < 4)
          {
            v20 = 0;
            v19 = 0;
          }
          else
          {
            v17 = *(_QWORD *)(*(_QWORD *)(v14 - 8 * v16 + 24) + 128);
            if (v17)
            {
              v18 = (unint64_t *)(v17 + 24);
              if (*(_DWORD *)(v17 + 32) >= 0x41u)
                v18 = (unint64_t *)*v18;
              v19 = *v18;
              v12 = v19 >> 8;
              v20 = 1;
            }
            else
            {
              v20 = 0;
              LOBYTE(v19) = 0;
              v12 = v45;
            }
            v19 = v19;
            v45 = v12;
          }
          v21 = v19 | (v12 << 8);
          v22 = (char *)sub_1C477672C((uint64_t)&v52, v14);
          if (v53 == v52)
            v23 = (uint64_t *)((char *)&v54 + 4);
          else
            v23 = &v54;
          if (v20)
            v24 = 0;
          else
            v24 = v22 == &v53[8 * *(unsigned int *)v23];
          v25 = !v24;
          v48 = (const char *)*((_QWORD *)v15 + 16);
          *(_QWORD *)&v49 = v21;
          *((_QWORD *)&v49 + 1) = v20;
          v50 = v25;
          sub_1C5EAF0F8((uint64_t)v47, a2, (uint64_t *)&v48, &v49);
        }
        v11 += 8;
      }
      while (v13 != v11);
    }
  }
  else
  {
    v48 = "agx.compute_driver_bindings";
    v51 = 259;
    v44 = llvm::Module::getNamedMetadata(a1, (uint64_t)&v48);
    if (v44)
    {
      v43 = *(unsigned int *)(*(_QWORD *)(v44 + 48) + 8);
      if ((_DWORD)v43)
      {
        v26 = 0;
        v27 = 0;
        do
        {
          v28 = *(_QWORD *)(**(_QWORD **)(v44 + 48) + 8 * v26);
          v29 = *(unsigned int *)(v28 + 8);
          v30 = v28;
          if ((_DWORD)v29)
          {
            do
            {
              v31 = *(unsigned __int8 **)(v30 - 8 * *(unsigned int *)(v28 + 8));
              if (v31)
              {
                if (*v31 - 4 <= 0x1E)
                {
                  v32 = *(unsigned __int8 **)&v31[-8 * *((unsigned int *)v31 + 2)];
                  if (v32)
                  {
                    if (*v32 - 1 <= 1 && sub_1C5EA6114(*((_QWORD *)v32 + 16)))
                    {
                      v33 = *((unsigned int *)v31 + 2);
                      if (v33 < 4)
                      {
                        LOBYTE(v36) = 0;
                        v37 = 0;
                      }
                      else
                      {
                        v34 = *(_QWORD *)(*(_QWORD *)&v31[-8 * v33 + 24] + 128);
                        v35 = (_QWORD *)(v34 + 24);
                        if (*(_DWORD *)(v34 + 32) >= 0x41u)
                          v35 = (_QWORD *)*v35;
                        v36 = (_QWORD *)*v35;
                        v27 = *v35 >> 8;
                        v37 = 1;
                      }
                      v38 = (char *)sub_1C477672C((uint64_t)&v52, (uint64_t)v31);
                      if (v53 == v52)
                        v39 = (uint64_t *)((char *)&v54 + 4);
                      else
                        v39 = &v54;
                      v40 = v36 | (unint64_t)(v27 << 8);
                      v42 = v33 > 3 || v38 != &v53[8 * *(unsigned int *)v39];
                      v48 = (const char *)*((_QWORD *)v32 + 16);
                      *(_QWORD *)&v49 = v40;
                      *((_QWORD *)&v49 + 1) = v37;
                      v50 = v42;
                      sub_1C5EAF0F8((uint64_t)v47, a2, (uint64_t *)&v48, &v49);
                    }
                  }
                }
              }
              v30 += 8;
              --v29;
            }
            while (v29);
          }
          ++v26;
        }
        while (v26 != v43);
      }
    }
  }
  if (v53 != v52)
    free(v53);
}

uint64_t sub_1C5EA6114(uint64_t result)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  if (!result)
    return result;
  v1 = result;
  if (*(_BYTE *)(result + 16) != 3 || (*(_BYTE *)(result + 34) & 0x40) == 0)
    return 0;
  v2 = *(uint64_t ***)result;
  v3 = ***(_QWORD ***)result;
  v22 = result;
  v4 = *(_DWORD *)(v3 + 2520);
  if (!v4)
  {
    v20 = 0;
LABEL_30:
    v8 = sub_1C53D65B8(v3 + 2504, (uint64_t)&v22, &v22, v20);
    v21 = v22;
    v8[1] = 0;
    v8[2] = 0;
    *v8 = v21;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(v3 + 2504);
  v6 = v4 - 1;
  v7 = v6 & ((result >> 4) ^ (result >> 9));
  v8 = (_QWORD *)(v5 + 24 * v7);
  v9 = *v8;
  if (*v8 != v1)
  {
    v16 = 0;
    v17 = 1;
    while (v9 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v9 == -8192;
      if (v18)
        v16 = v8;
      v19 = v7 + v17++;
      v7 = v19 & v6;
      v8 = (_QWORD *)(v5 + 24 * v7);
      v9 = *v8;
      if (*v8 == v1)
        goto LABEL_6;
    }
    if (v16)
      v20 = v16;
    else
      v20 = v8;
    goto LABEL_30;
  }
LABEL_6:
  if (v8[2] != 15)
    return 0;
  v10 = (uint64_t *)v8[1];
  v11 = *v10;
  v12 = *(uint64_t *)((char *)v10 + 7);
  v13 = v11 == 0x625F726566667562 && v12 == 0x73676E69646E6962;
  if (!v13 || ((_DWORD)v2[1] & 0xFFFFFF00) != 0x4000)
    return 0;
  result = 0;
  v14 = *(_QWORD *)(v1 + 24);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 8);
    if (v15 == 15)
      return (v15 & 0xFFFFFF00) == 512;
  }
  return result;
}

double sub_1C5EA6284@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t NamedMetadata;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::UndefValue *AggregateElement;
  BOOL v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  double result;
  const char *v19;
  __int16 v20;

  v19 = "agx.lib_valid_bytes";
  v20 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)&v19);
  if (NamedMetadata)
  {
    v6 = NamedMetadata;
    v7 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    v8 = (unsigned int *)operator new(0x20uLL);
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    if ((_DWORD)v7)
    {
      v9 = 0;
      v10 = 8 * v7;
      do
      {
        v11 = *(_QWORD *)(**(_QWORD **)(v6 + 48) + v9);
        AggregateElement = *(llvm::UndefValue **)(*(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8)) + 128);
        if (AggregateElement)
          v13 = *((_BYTE *)AggregateElement + 16) == 16;
        else
          v13 = 0;
        if (!v13)
          AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
        v14 = (uint64_t **)((char *)AggregateElement + 24);
        v15 = *((_DWORD *)AggregateElement + 8);
        if (v15 < 0x41
          || v15
           - llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AggregateElement + 24)) <= 0x40)
        {
          v17 = *v14;
          if (v15 < 0x41)
            v17 = (uint64_t *)v14;
          v16 = *v17;
        }
        else
        {
          v16 = -1;
        }
        if (v9 == 32)
          abort();
        *(_QWORD *)&v8[v9 / 4] = v16;
        v9 += 8;
      }
      while (v10 != v9);
    }
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x600000000;
    sub_1C4765AA4((char *)a3, (a2 + 63) >> 6, 0);
    *(_DWORD *)(a3 + 64) = a2;
    sub_1C4914230(a3, v8, a2 >> 5);
    operator delete(v8);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)&result = 0x600000000;
    *(_QWORD *)(a3 + 8) = 0x600000000;
    *(_DWORD *)(a3 + 64) = 0;
  }
  return result;
}

void sub_1C5EA6408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  __int16 v57;
  void **v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void **v63;
  void **v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  int v99;
  _QWORD *v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  unsigned int v112;
  unsigned int v113;
  _DWORD *v114;
  int v115;
  _DWORD *v116;
  int v117;
  BOOL v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  uint64_t v128;
  uint64_t NamedMetadata;
  uint64_t v132;
  uint64_t v133;
  __int16 v134;
  __int16 v135;
  __int16 v136;

  v133 = (uint64_t)"agx.prid";
  v136 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)&v133);
  if (NamedMetadata)
  {
    v128 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v128)
    {
      v4 = 0;
      while (1)
      {
        v5 = *(_QWORD *)(**(_QWORD **)(NamedMetadata + 48) + 8 * v4);
        v7 = (unsigned int *)(v5 + 8);
        v6 = *(unsigned int *)(v5 + 8);
        v8 = (uint64_t *)(v5 - 8 * v6);
        v9 = *v8;
        if (*v8)
        {
          if (*(_BYTE *)v9)
          {
            v133 = *(_QWORD *)(v9 + 128);
            v10 = (unsigned __int8 *)v8[1];
            v11 = *v10;
            if ((v11 - 4) >= 0x1F)
            {
              if (v11 == 1 && (v71 = *((_QWORD *)v10 + 16), *(_BYTE *)(v71 + 16) == 16))
              {
                v72 = (_QWORD *)(v71 + 24);
                if (*(_DWORD *)(v71 + 32) >= 0x41u)
                  v72 = (_QWORD *)*v72;
                v73 = *(_QWORD *)(v8[3] + 128);
                v74 = *(_QWORD *)(v8[5] + 128);
                v75 = (_QWORD *)*v72;
              }
              else
              {
                v73 = *(_QWORD *)(v8[2] + 128);
                v74 = *(_QWORD *)(v8[4] + 128);
                LODWORD(v75) = 0xFFFF;
              }
              v76 = (_QWORD *)(v73 + 24);
              if (*(_DWORD *)(v73 + 32) >= 0x41u)
                v76 = (_QWORD *)*v76;
              v77 = (_QWORD *)(v74 + 24);
              if (*(_DWORD *)(v74 + 32) >= 0x41u)
                v77 = (_QWORD *)*v77;
              v78 = (_QWORD *)*v76;
              v79 = (_QWORD *)*v77;
              sub_1C5EAE220(a2, &v133);
              v81 = v80;
              v82 = *(unsigned int *)(v80 + 16);
              if (v82 >= *(unsigned int *)(v80 + 20))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v80 + 8, v80 + 24, v82 + 1, 6);
                LODWORD(v82) = *(_DWORD *)(v81 + 16);
              }
              v83 = *(_QWORD *)(v81 + 8) + 6 * v82;
              *(_WORD *)(v83 + 4) = 0;
              *(_DWORD *)v83 = v78 & 0xF | ((_DWORD)v75 << 16) | (16 * (v79 & 0xF));
              ++*(_DWORD *)(v81 + 16);
            }
            else if ((int)v6 >= 2)
            {
              v12 = v6 - 1;
              v13 = v5 + 8;
              do
              {
                v14 = *(_QWORD *)(v13 - 8 * *v7);
                v15 = (_QWORD *)(v14 - 8 * *(unsigned int *)(v14 + 8));
                v16 = *(_QWORD *)(v15[3] + 128);
                v17 = (_QWORD *)(v16 + 24);
                if (*(_DWORD *)(v16 + 32) >= 0x41u)
                  v17 = (_QWORD *)*v17;
                v18 = *(_QWORD *)(v15[5] + 128);
                v19 = (_QWORD *)(v18 + 24);
                if (*(_DWORD *)(v18 + 32) >= 0x41u)
                  v19 = (_QWORD *)*v19;
                v20 = *(_QWORD *)(*v15 + 128);
                v21 = (uint64_t *)(v20 + 24);
                v22 = *(_DWORD *)(v20 + 32);
                v23 = (uint64_t *)(v20 + 24);
                if (v22 >= 0x41)
                  v23 = (uint64_t *)*v21;
                v24 = *(_QWORD *)(v15[1] + 128);
                v25 = (_QWORD *)(v24 + 24);
                if (*(_DWORD *)(v24 + 32) >= 0x41u)
                  v25 = (_QWORD *)*v25;
                if (v22 >= 0x41)
                  v21 = (uint64_t *)*v21;
                v26 = (_QWORD *)*v17;
                v27 = (_QWORD *)*v19;
                v28 = *v23;
                v29 = (_QWORD *)*v25;
                v30 = (uint64_t *)*v21;
                sub_1C5EAE220(a2, &v133);
                v32 = v31;
                v33 = *(unsigned int *)(v31 + 40);
                if (v33 >= *(unsigned int *)(v31 + 44))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v31 + 32, v31 + 48, v33 + 1, 6);
                  LODWORD(v33) = *(_DWORD *)(v32 + 40);
                }
                v34 = *(_QWORD *)(v32 + 32) + 6 * v33;
                *(_WORD *)(v34 + 4) = (_WORD)v29 - (_WORD)v30;
                *(_DWORD *)v34 = v26 & 0xF | (16 * (v27 & 0xF)) | ((_DWORD)v28 << 16);
                ++*(_DWORD *)(v32 + 40);
                v13 += 8;
                --v12;
              }
              while (v12);
            }
            goto LABEL_77;
          }
          if (v6 >= 2)
            break;
        }
LABEL_77:
        if (++v4 == v128)
          return;
      }
      v35 = *(_QWORD *)(v9 + 8);
      if (*(_QWORD *)v35 != 21)
      {
        if (*(_QWORD *)v35 != 3)
          goto LABEL_77;
        v36 = *(unsigned __int16 *)(v35 + 24);
        v37 = *(unsigned __int8 *)(v35 + 26);
        if (v36 != 18764 || v37 != 66)
          goto LABEL_77;
        v39 = v6 - 1;
        v40 = v5 + 8;
        while (1)
        {
          v41 = *(_QWORD *)(v40 - 8 * *v7);
          v42 = (_QWORD *)(v41 - 8 * *(unsigned int *)(v41 + 8));
          v43 = *(_QWORD *)(*v42 + 128);
          v44 = (_QWORD *)(v43 + 24);
          if (*(_DWORD *)(v43 + 32) >= 0x41u)
            v44 = (_QWORD *)*v44;
          v45 = *(_QWORD *)(v42[1] + 128);
          v46 = (_QWORD *)(v45 + 24);
          if (*(_DWORD *)(v45 + 32) >= 0x41u)
            v46 = (_QWORD *)*v46;
          v47 = *(_DWORD *)v44;
          if (*(_DWORD *)v46 == -1)
            v48 = 1024;
          else
            v48 = *(_DWORD *)v46 + 1;
          v49 = v48 + v47;
          v132 = 1;
          if (v49 > 0x39)
          {
            v50 = operator new();
            *(_QWORD *)v50 = v50 + 16;
            *(_QWORD *)(v50 + 8) = 0x600000000;
            sub_1C4765AA4((char *)v50, (v49 + 63) >> 6, 0);
            *(_DWORD *)(v50 + 64) = v49;
          }
          else
          {
            v50 = (v49 << 58) | 1;
          }
          v132 = v50;
          sub_1C49144A0((unint64_t *)&v132, v47, v48);
          v51 = v41 - 8 * *(unsigned int *)(v41 + 8);
          v52 = *(_QWORD *)(*(_QWORD *)(v51 + 24) + 128);
          v53 = *(_QWORD *)(*(_QWORD *)(v51 + 40) + 128);
          v54 = (_QWORD *)(v52 + 24);
          if (*(_DWORD *)(v52 + 32) >= 0x41u)
            v54 = (_QWORD *)*v54;
          v55 = (_QWORD *)*v54;
          v56 = (_QWORD *)(v53 + 24);
          if (*(_DWORD *)(v53 + 32) >= 0x41u)
            v56 = (_QWORD *)*v56;
          v57 = *(_WORD *)v56;
          v133 = 1;
          v58 = (void **)v132;
          if ((v132 & 1) == 0)
            break;
LABEL_46:
          v133 = (uint64_t)v58;
          v134 = (__int16)v55;
          v135 = v57;
          v59 = *(unsigned int *)(a3 + 8);
          v60 = *(_QWORD *)a3;
          if (v59 >= *(_DWORD *)(a3 + 12))
          {
            v68 = v59 + 1;
            v69 = v60 + 16 * v59 > (unint64_t)&v133;
            if (v60 <= (unint64_t)&v133 && v69)
            {
              v70 = (char *)&v133 - v60;
              sub_1C63A3D64(a3, v68);
              v60 = *(_QWORD *)a3;
              v61 = (uint64_t *)&v70[*(_QWORD *)a3];
              goto LABEL_48;
            }
            sub_1C63A3D64(a3, v68);
            v60 = *(_QWORD *)a3;
          }
          v61 = &v133;
LABEL_48:
          v62 = v60 + 16 * *(unsigned int *)(a3 + 8);
          *(_QWORD *)v62 = *v61;
          *v61 = 1;
          *(_DWORD *)(v62 + 8) = *((_DWORD *)v61 + 2);
          ++*(_DWORD *)(a3 + 8);
          sub_1C4914448((void ***)&v133);
          sub_1C4914448((void ***)&v132);
          v40 += 8;
          if (!--v39)
            goto LABEL_77;
        }
        v63 = (void **)operator new();
        v58 = v63;
        v64 = (void **)v132;
        v65 = v63 + 2;
        *v63 = v63 + 2;
        v63[1] = (void *)0x600000000;
        if (v63 == v64 || (v66 = *((unsigned int *)v64 + 2), !*((_DWORD *)v64 + 2)))
        {
LABEL_58:
          *((_DWORD *)v58 + 16) = *((_DWORD *)v64 + 16);
          goto LABEL_46;
        }
        if (v66 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v63, (uint64_t)(v63 + 2), *((unsigned int *)v64 + 2), 8);
          v67 = *((unsigned int *)v64 + 2);
          if (!(_DWORD)v67)
          {
LABEL_57:
            *((_DWORD *)v58 + 2) = v66;
            goto LABEL_58;
          }
          v65 = *v58;
        }
        else
        {
          v67 = *((unsigned int *)v64 + 2);
        }
        memcpy(v65, *v64, 8 * v67);
        goto LABEL_57;
      }
      v84 = *(_QWORD *)(v35 + 24);
      v85 = *(_QWORD *)(v35 + 32);
      v86 = *(_QWORD *)(v35 + 37);
      if (v84 != 0x746E6174736E6F63 || v85 != 0x6E695F706165685FLL || v86 != 0x73656369646E695FLL)
        goto LABEL_77;
      v89 = 1;
      while (1)
      {
        v90 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8) + 8 * v89);
        v91 = (_QWORD *)(v90 - 8 * *(unsigned int *)(v90 + 8));
        v92 = *(_QWORD *)(*v91 + 128);
        v93 = (_QWORD *)(v92 + 24);
        if (*(_DWORD *)(v92 + 32) >= 0x41u)
          v93 = (_QWORD *)*v93;
        v94 = a4;
        v95 = *(_QWORD *)(v91[2] + 128);
        v96 = (_QWORD *)(v95 + 24);
        if (*(_DWORD *)(v95 + 32) >= 0x41u)
          v96 = (_QWORD *)*v96;
        v97 = *(_QWORD *)(v91[4] + 128);
        v98 = (_QWORD *)(v97 + 24);
        if (*(_DWORD *)(v97 + 32) >= 0x41u)
          v98 = (_QWORD *)*v98;
        v99 = *(_DWORD *)v93;
        v100 = (_QWORD *)*v96;
        v101 = *(_BYTE *)v98;
        v102 = *(_DWORD *)(a4 + 16);
        if (!v102)
        {
          v103 = 0;
          goto LABEL_96;
        }
        v113 = (v102 - 1) & (37 * v99);
        v114 = (_DWORD *)(*(_QWORD *)a4 + 8 * v113);
        v115 = *v114;
        if (*v114 != v99)
          break;
LABEL_135:
        if (++v89 == v6)
          goto LABEL_77;
      }
      v116 = 0;
      v117 = 1;
      while (v115 != -1)
      {
        if (v116)
          v118 = 0;
        else
          v118 = v115 == -2;
        if (v118)
          v116 = v114;
        v119 = v113 + v117++;
        v113 = v119 & (v102 - 1);
        v114 = (_DWORD *)(*(_QWORD *)a4 + 8 * v113);
        v115 = *v114;
        if (*v114 == v99)
          goto LABEL_135;
      }
      if (v116)
        v103 = (uint64_t)v116;
      else
        v103 = (uint64_t)v114;
      v94 = a4;
LABEL_96:
      v104 = *(_DWORD *)(v94 + 8);
      if (4 * v104 + 4 < 3 * v102)
      {
        if (v102 + ~v104 - *(_DWORD *)(v94 + 12) > v102 >> 3)
          goto LABEL_132;
        sub_1C5EAF540(a4, v102);
        v120 = *(_DWORD *)(a4 + 16);
        if (v120)
        {
          v121 = v120 - 1;
          v122 = (v120 - 1) & (37 * v99);
          v103 = *(_QWORD *)a4 + 8 * v122;
          v123 = *(_DWORD *)v103;
          if (*(_DWORD *)v103 != v99)
          {
            v109 = 0;
            v124 = 1;
            while (v123 != -1)
            {
              if (v109)
                v125 = 0;
              else
                v125 = v123 == -2;
              if (v125)
                v109 = v103;
              v126 = v122 + v124++;
              v122 = v126 & v121;
              v103 = *(_QWORD *)a4 + 8 * (v126 & v121);
              v123 = *(_DWORD *)v103;
              if (*(_DWORD *)v103 == v99)
                goto LABEL_132;
            }
            goto LABEL_130;
          }
LABEL_132:
          ++*(_DWORD *)(a4 + 8);
          if (*(_DWORD *)v103 != -1)
            --*(_DWORD *)(a4 + 12);
          *(_DWORD *)v103 = v99;
          *(_BYTE *)(v103 + 4) = (_BYTE)v100;
          *(_BYTE *)(v103 + 5) = v101;
          goto LABEL_135;
        }
      }
      else
      {
        sub_1C5EAF540(v94, 2 * v102);
        v105 = *(_DWORD *)(a4 + 16);
        if (v105)
        {
          v106 = v105 - 1;
          v107 = (v105 - 1) & (37 * v99);
          v103 = *(_QWORD *)a4 + 8 * v107;
          v108 = *(_DWORD *)v103;
          if (*(_DWORD *)v103 != v99)
          {
            v109 = 0;
            v110 = 1;
            while (v108 != -1)
            {
              if (v109)
                v111 = 0;
              else
                v111 = v108 == -2;
              if (v111)
                v109 = v103;
              v112 = v107 + v110++;
              v107 = v112 & v106;
              v103 = *(_QWORD *)a4 + 8 * (v112 & v106);
              v108 = *(_DWORD *)v103;
              if (*(_DWORD *)v103 == v99)
                goto LABEL_132;
            }
LABEL_130:
            if (v109)
              v103 = v109;
            goto LABEL_132;
          }
          goto LABEL_132;
        }
      }
      v103 = 0;
      goto LABEL_132;
    }
  }
}

uint64_t sub_1C5EA6C88(uint64_t *a1, uint64_t *a2, int a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t Declaration;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v13[4];
  __int16 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v13[0] = *a4;
  v8 = 1;
  Declaration = llvm::Intrinsic::getDeclaration(a1, a3, v13, 1);
  v15 = v17;
  v17[0] = (uint64_t)a4;
  v16 = 0x200000001;
  if (a5)
  {
    v17[1] = a5;
    v8 = 2;
    LODWORD(v16) = 2;
  }
  if (Declaration)
    v10 = *(uint64_t ***)(Declaration + 24);
  else
    v10 = 0;
  v14 = 257;
  v11 = sub_1C4774778(a2, v10, Declaration, v17, v8, (uint64_t)v13, 0);
  if (v15 != v17)
    free(v15);
  return v11;
}

uint64_t sub_1C5EA6D90(uint64_t *a1, uint64_t *a2, int a3, uint64_t **a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8)
{
  int v8;
  uint64_t *v9;
  uint64_t *v14;
  std::string *p_p;
  unint64_t size;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v23[32];
  __int16 v24;
  uint64_t **v25;
  std::string __p;
  uint64_t v27;
  uint64_t v28;

  v8 = (int)a7;
  v9 = (uint64_t *)a6;
  v28 = *MEMORY[0x1E0C80C00];
  v14 = *a4;
  v25 = (uint64_t **)*a4;
  if ((_DWORD)a7)
    v14 = (uint64_t *)(*(_QWORD *)*v14 + 1672);
  sub_1C53CF274(a3, (uint64_t *)&v25, 1, a1, 0, a6, a7, a8, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v17 = (uint64_t **)sub_1C5867298((uint64_t)a1, (unsigned __int8 *)p_p, size, 0, v25, (uint64_t)v25, (uint64_t)v25, (uint64_t)v14);
  v19 = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)a4;
  v27 = a5;
  __p.__r_.__value_.__l.__size_ = 0x300000002;
  if (!v8 || (uint64_t *)*v9 == v14)
  {
    v20 = 2;
  }
  else
  {
    v24 = 257;
    v9 = (uint64_t *)sub_1C47721A0((uint64_t)a2, v9, v14, (uint64_t)v23);
    v20 = __p.__r_.__value_.__r.__words[1];
    if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= HIDWORD(__p.__r_.__value_.__r.__words[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&__p.__r_.__value_.__r.__words[2], LODWORD(__p.__r_.__value_.__r.__words[1]) + 1, 8);
      v20 = __p.__r_.__value_.__r.__words[1];
    }
  }
  *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v20) = v9;
  ++LODWORD(__p.__r_.__value_.__r.__words[1]);
  v24 = 257;
  v21 = sub_1C4774778(a2, v17, v19, (uint64_t *)__p.__r_.__value_.__l.__data_, LODWORD(__p.__r_.__value_.__r.__words[1]), (uint64_t)v23, 0);
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
    free(__p.__r_.__value_.__l.__data_);
  return v21;
}

uint64_t sub_1C5EA6F60(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;

  v10 = "agx.interpolations";
  v11 = 259;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)&v10);
  if (result)
  {
    v4 = result;
    v5 = *(unsigned int *)(*(_QWORD *)(result + 48) + 8);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        v8 = *(_QWORD *)(**(_QWORD **)(v4 + 48) + v6);
        v9 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
        if (v9)
          result = (uint64_t)sub_1C4774094(a2, *(_QWORD *)(v9 + 128));
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  return result;
}

uint64_t sub_1C5EA6FF8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  int v10;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = 1;
  if (v1)
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 24);
      if (!v5 || *(_BYTE *)(v5 + 16) != 89)
        break;
      v6 = *(_QWORD *)(v5 - 32);
      v7 = (_QWORD *)(v6 + 24);
      if (*(_DWORD *)(v6 + 32) >= 0x41u)
        v7 = (_QWORD *)*v7;
      v8 = 1 << *(_DWORD *)v7;
      v10 = v8 & v4;
      v9 = (v8 & v4) == 0;
      if ((v8 & v4) != 0)
        v8 = 0;
      v4 |= v8;
      if (v9)
        ++v3;
      if (v10)
        break;
      v1 = *(_QWORD *)(v1 + 8);
      if (!v1)
      {
        v2 = 1;
        goto LABEL_16;
      }
    }
    v2 = 0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
LABEL_16:
  if (v4 == ~(-1 << v3))
    return v2;
  else
    return 0;
}

uint64_t sub_1C5EA708C(uint64_t a1, llvm::DataLayout *this)
{
  int v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  llvm::StructLayout *StructLayout;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  char v29;
  const char *v30;
  char v32;

  v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(uint64_t ***)(a1 - 8);
  else
    v5 = (uint64_t **)(a1 - 32 * (v4 & 0x7FFFFFF));
  v6 = 0;
  v8 = *v5;
  v7 = (uint64_t *)(v5 + 4);
  v9 = *v8;
  if ((v4 & 0x40000000) != 0)
    goto LABEL_6;
LABEL_5:
  v10 = v4 & 0x7FFFFFF;
  v11 = a1 - 32 * v10;
  while (v7 != (uint64_t *)(v11 + 32 * v10))
  {
    v12 = 0;
    v13 = *v7;
    v14 = 0x100000000;
    if (!*v7 || *(_BYTE *)(v13 + 16) != 16)
      return v14 | v12;
    v15 = *(unsigned __int8 *)(v9 + 8);
    if (v15 == 16 && v9)
    {
      v16 = *(_DWORD *)(v13 + 32);
      if (v16 > 0x40)
        LODWORD(v17) = **(_DWORD **)(v13 + 24);
      else
        v17 = (uint64_t)(*(_QWORD *)(v13 + 24) << -(char)v16) >> -(char)v16;
      StructLayout = llvm::DataLayout::getStructLayout(this, (llvm::StructType *)v9);
      v22 = 8 * v17;
      v23 = *(_QWORD *)((char *)StructLayout + v22 + 16);
      v9 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + v22);
    }
    else
    {
      if (v15 == 15 && v9)
      {
        v18 = *(_DWORD *)(v13 + 32);
        if (v18 > 0x40)
          v19 = **(_QWORD **)(v13 + 24);
        else
          v19 = (uint64_t)(*(_QWORD *)(v13 + 24) << -(char)v18) >> -(char)v18;
        v24 = 24;
        if (*(_BYTE *)(a1 + 16) == 62)
          v24 = 64;
        v9 = *(_QWORD *)(a1 + v24);
      }
      else
      {
        if ((v15 & 0xFE) != 0x12 || !v9)
        {
          v12 = 0;
          v14 = 0x10000000000;
          if (v15 != 17 || !v9)
            return v14 | v12;
        }
        v20 = *(_DWORD *)(v13 + 32);
        if (v20 > 0x40)
          v19 = **(_QWORD **)(v13 + 24);
        else
          v19 = (uint64_t)(*(_QWORD *)(v13 + 24) << -(char)v20) >> -(char)v20;
        v9 = *(_QWORD *)(v9 + 24);
      }
      sub_1C4768AD0((uint64_t)this, v9);
      v26 = v25;
      v28 = v27 == 1;
      llvm::DataLayout::getAlignment((uint64_t)this, v9);
      if (v28)
      {
        v32 = v29;
        v29 = v32;
      }
      v23 = (((1 << v29) + ((unint64_t)(v26 + 7) >> 3) - 1) & -(1 << v29)) * v19;
    }
    v6 += v23;
    v4 = *(_DWORD *)(a1 + 20);
    v7 += 4;
    if ((v4 & 0x40000000) == 0)
      goto LABEL_5;
LABEL_6:
    v11 = *(_QWORD *)(a1 - 8);
    v10 = v4 & 0x7FFFFFF;
  }
  v14 = 0;
  v12 = v6;
  return v14 | v12;
}

uint64_t sub_1C5EA72C0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a3;
  if (a4 != -1)
  {
    v7 = *(_QWORD *)(a3 + 40);
    if (v7 == a3 + 40)
    {
      v8 = 0;
    }
    else
    {
      if (v7)
        v8 = v7 - 24;
      else
        v8 = 0;
      if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
        v8 = 0;
    }
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v9 != 30)
      __asm { BR              X11 }
    v4 = *(_QWORD *)(v8 - 32 * a4 - 32);
  }
  v24 = 0;
  v25 = v4;
  if ((sub_1C564FD70(a2, &v25, &v24) & 1) != 0)
  {
LABEL_24:
    v24 = 0;
    v25 = v4;
    if (sub_1C564FD70(a2, &v25, &v24))
    {
      v20 = v24;
    }
    else
    {
      if ((*(_DWORD *)a2 & 1) != 0)
        v22 = a2 + 8;
      else
        v22 = *(_QWORD *)(a2 + 8);
      if ((*(_DWORD *)a2 & 1) != 0)
        v23 = 8;
      else
        v23 = *(_DWORD *)(a2 + 16);
      v20 = v22 + 16 * v23;
    }
    return *(_QWORD *)(v20 + 8);
  }
  v10 = *(_QWORD *)(a1 + 3344);
  v11 = *(_QWORD *)(v10 + 48);
  v12 = *(unsigned int *)(v10 + 64);
  if ((_DWORD)v12)
  {
    LODWORD(v13) = (v12 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v14 = (uint64_t *)(v11 + 16 * v13);
    v15 = *v14;
    if (v4 == *v14)
      goto LABEL_20;
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v15 = *(_QWORD *)(v11 + 16 * v13);
      if (v4 == v15)
      {
        v14 = (uint64_t *)(v11 + 16 * v13);
        goto LABEL_20;
      }
    }
  }
  v14 = (uint64_t *)(v11 + 16 * v12);
LABEL_20:
  v18 = (uint64_t *)v14[1];
  while (1)
  {
    v18 = (uint64_t *)v18[1];
    if (!v18)
      return 0;
    v19 = *v18;
    v24 = 0;
    v25 = v19;
    if (sub_1C564FD70(a2, &v25, &v24))
    {
      v4 = *v18;
      goto LABEL_24;
    }
  }
}

void sub_1C5EA7478()
{
  JUMPOUT(0x1C5EA7448);
}

void sub_1C5EA748C()
{
  JUMPOUT(0x1C5EA7330);
}

void sub_1C5EA74A8(uint64_t a1@<X8>)
{
  if ((*(_WORD *)(a1 + 18) & 1) == 0)
    JUMPOUT(0x1C5EA7334);
  JUMPOUT(0x1C5EA7330);
}

void sub_1C5EA74B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
    JUMPOUT(0x1C5EA732CLL);
  JUMPOUT(0x1C5EA7330);
}

void sub_1C5EA750C(uint64_t a1, llvm::SmallPtrSetImplBase *a2, uint64_t a3, int32x2_t *a4, int32x2_t *a5)
{
  uint64_t LoopPredecessor;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *UniqueExitBlock;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const llvm::APInt *v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::BasicBlock *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  llvm::Value *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  unsigned __int8 **v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  void *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  char *v50;
  llvm::Value *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unsigned __int8 **v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  _QWORD *v61;
  uint64_t ***v62;
  uint64_t ***v63;
  uint64_t **v64;
  uint64_t **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD **v75;
  uint64_t v76;
  llvm::BasicBlock **v77;
  uint64_t v78;
  uint64_t v79;
  llvm::BasicBlock *v80;
  unsigned __int8 *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  llvm::SmallPtrSetImplBase *v98;
  void (**v99)(void);
  unsigned int v100;
  uint64_t *v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  llvm::Loop *v107;
  llvm::ConstantInt *v108;
  uint64_t v110;
  int32x2_t *v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  uint64_t v114;
  int v115;
  _BYTE v116[64];
  _QWORD v117[3];
  _QWORD *v118;
  void *v119;
  uint64_t v120;
  _BYTE v121[16];
  __int16 v122;
  char *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
  if (!LoopPredecessor)
    goto LABEL_8;
  v10 = *(_QWORD *)(LoopPredecessor + 40);
  if (v10 == LoopPredecessor + 40)
    goto LABEL_8;
  if (v10)
    v11 = v10 - 24;
  else
    v11 = 0;
  if (*(_BYTE *)(v11 + 16) == 30)
  {
    if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_8:
      v12 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
    switch(*(_BYTE *)(v11 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_13;
      case 0x1E:
        __break(1u);
        goto LABEL_166;
      case 0x1F:
        v13 = (*(_DWORD *)(v11 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_166:
        v13 = (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v13 = *(_DWORD *)(v11 + 80) + 1;
        break;
      default:
        goto LABEL_8;
    }
    if (v13 != 1)
      goto LABEL_8;
  }
  v12 = LoopPredecessor;
LABEL_13:
  v110 = a3;
  if (a4)
    llvm::ScalarEvolution::forgetLoop(a4, (const llvm::Loop *)a1);
  UniqueExitBlock = (_QWORD *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock((_QWORD *)a1);
  v16 = (_QWORD *)(v12 + 40);
  v15 = *(_QWORD *)(v12 + 40);
  v111 = a5;
  if (v15 == v12 + 40)
  {
    v17 = 0;
  }
  else
  {
    if (v15)
      v17 = v15 - 24;
    else
      v17 = 0;
    if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB)
      v17 = 0;
  }
  if (*(_BYTE *)(v17 + 16) == 30)
    v18 = v17;
  else
    v18 = 0;
  sub_1C4773D54((uint64_t)&v123, v18, 0, 0, 0);
  v20 = *v128;
  v21 = *(llvm::Value **)(*v128 + 1568);
  if (!v21)
  {
    v108 = *(llvm::ConstantInt **)(v20 + 1888);
    LODWORD(v120) = *(_DWORD *)(v20 + 1896) >> 8;
    if (v120 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v119, 0, 0);
    else
      v119 = 0;
    v21 = llvm::ConstantInt::get(v108, (llvm::LLVMContext *)&v119, v19);
    if (v120 >= 0x41 && v119)
      MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
    *(_QWORD *)(v20 + 1568) = v21;
  }
  v22 = **(llvm::BasicBlock ***)(a1 + 32);
  v23 = operator new(0xA0uLL);
  v24 = v23;
  v25 = 0;
  v26 = (llvm::Value *)(v23 + 24);
  v23[29] = v23[29] & 0x38000000 | 3;
  do
  {
    v27 = &v23[v25];
    *v27 = 0;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v26;
    v25 += 8;
  }
  while (v25 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v23 + 24), v22, (llvm::BasicBlock *)UniqueExitBlock, v21, 0);
  v122 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v26, &v119, v126, v127);
  if (v124)
  {
    v28 = v123;
    v29 = &v123[16 * v124];
    v30 = (unsigned __int8 **)(v24 + 36);
    do
    {
      v31 = *(_DWORD *)v28;
      v32 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
      if (v32)
      {
        if (!v31)
        {
          v112 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
          llvm::MetadataTracking::track((uint64_t)&v112, v32, 2);
          v33 = *v30;
          if (!*v30)
          {
LABEL_42:
            v34 = v112;
            *v30 = v112;
            if (v34)
              llvm::MetadataTracking::retrack((uint64_t)&v112, v34, (uint64_t)(v24 + 36));
            goto LABEL_39;
          }
LABEL_36:
          llvm::MetadataTracking::untrack((uint64_t)(v24 + 36), v33);
          goto LABEL_42;
        }
      }
      else
      {
        v33 = *v30;
        if (!*v30 && (*((_BYTE *)v24 + 119) & 0x20) == 0)
          goto LABEL_39;
        if (!v31)
        {
          v112 = 0;
          if (!v33)
            goto LABEL_42;
          goto LABEL_36;
        }
      }
      llvm::Value::setMetadata(v26, *(_DWORD *)v28, (llvm::MDNode *)v32);
LABEL_39:
      v28 += 16;
    }
    while (v28 != v29);
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v18 + 40) + 40, (uint64_t ***)v18);
  v35 = *(_QWORD *)(v18 + 24);
  v36 = *(_QWORD **)(v18 + 32);
  *v36 = v35;
  *(_QWORD *)(v35 + 8) = v36;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v18);
  v37 = UniqueExitBlock[6];
  v38 = (_DWORD *)(v37 - 24);
  if (v37)
    v39 = v37 - 24;
  else
    v39 = 0;
  if (v37 && *(_BYTE *)(v39 + 16) == 83)
  {
    do
    {
      v40 = v38[5];
      if ((v40 & 0x40000000) != 0)
        v41 = (_DWORD *)*((_QWORD *)v38 - 1);
      else
        v41 = &v38[-8 * (v40 & 0x7FFFFFF)];
      *(_QWORD *)&v41[8 * v38[15]] = v12;
      v42 = v38[5] & 0x7FFFFFF;
      v43 = v42 - 1;
      if (v42 != 1)
      {
        do
          llvm::PHINode::removeIncomingValue((llvm::PHINode *)v38, v43--, 0);
        while (v43);
      }
      v37 = *(_QWORD *)(v37 + 8);
      v44 = v37 - 24;
      if (!v37)
        v44 = 0;
      v45 = *(unsigned __int8 *)(v44 + 16);
      if (v45 == 83)
        v38 = (_DWORD *)v44;
      else
        v38 = 0;
    }
    while (v37 && v45 == 83);
  }
  v46 = 0;
  if (*v16)
    v47 = *v16 - 24;
  else
    v47 = 0;
  if (*(unsigned __int8 *)(v47 + 16) - 29 >= 0xB)
    v47 = 0;
  v126 = *(_QWORD *)(v47 + 40);
  v127 = v47 + 24;
  v48 = *(void **)(v47 + 48);
  v119 = v48;
  if (v48)
  {
    llvm::MetadataTracking::track((uint64_t)&v119, (unsigned __int8 *)v48, 2);
    v46 = v119;
  }
  sub_1C4774EF4((uint64_t)&v123, 0, (uint64_t)v46);
  if (v119)
    llvm::MetadataTracking::untrack((uint64_t)&v119, (unsigned __int8 *)v119);
  v49 = (char *)operator new(0x60uLL);
  v50 = v49;
  *((_DWORD *)v49 + 13) = *((_DWORD *)v49 + 13) & 0x38000000 | 1;
  *(_QWORD *)v49 = 0;
  *((_QWORD *)v49 + 2) = 0;
  *((_QWORD *)v49 + 1) = 0;
  *((_QWORD *)v49 + 4) = **(_QWORD **)*UniqueExitBlock + 1576;
  v51 = (llvm::Value *)(v49 + 32);
  *((_QWORD *)v49 + 3) = v49 + 32;
  *((_QWORD *)v49 + 5) = 0;
  v49[48] = 30;
  v49[49] = 0;
  *((_WORD *)v49 + 25) = 0;
  *((_DWORD *)v49 + 13) = 1;
  *(_OWORD *)(v49 + 56) = 0u;
  *(_OWORD *)(v49 + 72) = 0u;
  *((_DWORD *)v49 + 22) = 0;
  *(_QWORD *)v49 = UniqueExitBlock;
  v52 = UniqueExitBlock + 1;
  v53 = UniqueExitBlock[1];
  *((_QWORD *)v49 + 1) = v53;
  if (v53)
    *(_QWORD *)(v53 + 16) = v49 + 8;
  *((_QWORD *)v49 + 2) = v52;
  *v52 = v49;
  v122 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v51, &v119, v126, v127);
  if (v124)
  {
    v54 = v123;
    v55 = &v123[16 * v124];
    v56 = (unsigned __int8 **)(v50 + 80);
    do
    {
      v57 = *(_DWORD *)v54;
      v58 = (unsigned __int8 *)*((_QWORD *)v54 + 1);
      if (v58)
      {
        if (!v57)
        {
          v112 = (unsigned __int8 *)*((_QWORD *)v54 + 1);
          llvm::MetadataTracking::track((uint64_t)&v112, v58, 2);
          v59 = *v56;
          if (!*v56)
          {
LABEL_85:
            v60 = v112;
            *v56 = v112;
            if (v60)
              llvm::MetadataTracking::retrack((uint64_t)&v112, v60, (uint64_t)(v50 + 80));
            goto LABEL_82;
          }
LABEL_79:
          llvm::MetadataTracking::untrack((uint64_t)(v50 + 80), v59);
          goto LABEL_85;
        }
      }
      else
      {
        v59 = *v56;
        if (!*v56 && (v50[55] & 0x20) == 0)
          goto LABEL_82;
        if (!v57)
        {
          v112 = 0;
          if (!v59)
            goto LABEL_85;
          goto LABEL_79;
        }
      }
      llvm::Value::setMetadata(v51, *(_DWORD *)v54, (llvm::MDNode *)v58);
LABEL_82:
      v54 += 16;
    }
    while (v54 != v55);
  }
  v61 = (_QWORD *)*v16;
  if ((_QWORD *)*v16 == v16)
  {
    v63 = 0;
  }
  else
  {
    if (v61)
      v62 = (uint64_t ***)(v61 - 3);
    else
      v62 = 0;
    if (*((unsigned __int8 *)v62 + 16) - 29 >= 0xB)
      v63 = 0;
    else
      v63 = v62;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v63[5] + 5), v63);
  v64 = v63[3];
  v65 = v63[4];
  *v65 = (uint64_t *)v64;
  v64[1] = (uint64_t *)v65;
  v63[3] = 0;
  v63[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v63);
  if (v110)
  {
    sub_1C53BAD9C(v110, 0, v12, (uint64_t)UniqueExitBlock);
    sub_1C53BB778(v110, 0, v12, **(_QWORD **)(a1 + 32));
  }
  v66 = *(_QWORD *)(a1 + 32);
  v67 = *(_QWORD *)(a1 + 40);
  if (v67 != v66)
  {
LABEL_98:
    v68 = *(_QWORD *)v66 + 40;
    for (i = *(_QWORD *)(*(_QWORD *)v66 + 48); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v68)
      {
        v66 += 8;
        if (v66 == v67)
        {
          v77 = *(llvm::BasicBlock ***)(a1 + 32);
          v78 = *(_QWORD *)(a1 + 40) - (_QWORD)v77;
          if (v78)
          {
            v79 = 8 * (v78 >> 3);
            do
            {
              v80 = *v77++;
              llvm::BasicBlock::eraseFromParent(v80);
              v79 -= 8;
            }
            while (v79);
          }
          break;
        }
        goto LABEL_98;
      }
      if (i)
        v70 = i - 24;
      else
        v70 = 0;
      v71 = *(_DWORD *)(v70 + 20);
      if ((v71 & 0x40000000) != 0)
      {
        v73 = *(_QWORD *)(v70 - 8);
        v72 = v71 & 0x7FFFFFF;
        if (!v72)
          continue;
      }
      else
      {
        v72 = v71 & 0x7FFFFFF;
        v73 = v70 - 32 * v72;
        if (!v72)
          continue;
      }
      v74 = 32 * v72;
      v75 = (_QWORD **)(v73 + 16);
      do
      {
        if (*(v75 - 2))
        {
          **v75 = *(v75 - 1);
          v76 = (uint64_t)*(v75 - 1);
          if (v76)
            *(_QWORD *)(v76 + 16) = *v75;
        }
        *(v75 - 2) = 0;
        v75 += 4;
        v74 -= 32;
      }
      while (v74);
    }
  }
  if (v111)
  {
    v81 = v116;
    v112 = v116;
    v113 = v116;
    v114 = 8;
    v115 = 0;
    v82 = *(uint64_t **)(a1 + 32);
    v83 = *(_QWORD *)(a1 + 40) - (_QWORD)v82;
    if (v83)
    {
      v84 = 8 * (v83 >> 3);
      do
      {
        v85 = *v82++;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v112, v85);
        v84 -= 8;
      }
      while (v84);
      v81 = v112;
      v86 = v113;
      v88 = v114;
      v87 = HIDWORD(v114);
    }
    else
    {
      v87 = 0;
      v88 = 8;
      v86 = v116;
    }
    if (v86 == v81)
      v89 = v87;
    else
      v89 = v88;
    v90 = (uint64_t *)v86;
    if ((_DWORD)v89)
    {
      v91 = 8 * v89;
      v90 = (uint64_t *)v86;
      while ((unint64_t)*v90 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v90;
        v91 -= 8;
        if (!v91)
          goto LABEL_137;
      }
    }
    v92 = &v86[8 * v89];
    if (v90 != (uint64_t *)v92)
    {
      v93 = *v90;
LABEL_133:
      llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(v111, v93);
      v94 = (unint64_t *)(v90 + 1);
      while (v94 != (unint64_t *)v92)
      {
        v95 = *v94++;
        v93 = v95;
        if (v95 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v90 = (uint64_t *)(v94 - 1);
          goto LABEL_133;
        }
      }
    }
LABEL_137:
    v120 = 0x1000000000;
    v96 = *(uint64_t **)(a1 + 8);
    v97 = *(uint64_t **)(a1 + 16);
    v117[0] = &off_1E81A88A8;
    v117[1] = &v119;
    v118 = v117;
    v119 = v121;
    sub_1C55AF96C(v96, v97, (uint64_t)v117);
    if (v118 == v117)
    {
      v99 = (void (**)(void))(v117[0] + 32);
      v98 = a2;
    }
    else
    {
      v98 = a2;
      if (!v118)
      {
LABEL_142:
        v100 = v120;
        if (v120 >= HIDWORD(v120))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v120 + 1, 8);
          v100 = v120;
        }
        *((_QWORD *)v119 + v100) = a1;
        v101 = (uint64_t *)v119;
        v102 = __CFADD__((_DWORD)v120, 1);
        v103 = (v120 + 1);
        LODWORD(v120) = v120 + 1;
        if (!v102)
        {
          v104 = 8 * v103;
          do
          {
            v105 = *v101++;
            sub_1C4774094(v98, v105);
            v104 -= 8;
          }
          while (v104);
          v101 = (uint64_t *)v119;
          if ((_DWORD)v120)
          {
            v106 = 8 * v120;
            do
            {
              v107 = (llvm::Loop *)*v101++;
              llvm::LoopInfo::erase(v111, v107);
              v106 -= 8;
            }
            while (v106);
            v101 = (uint64_t *)v119;
          }
        }
        if (v101 != (uint64_t *)v121)
          free(v101);
        if (v113 != v112)
          free(v113);
        goto LABEL_155;
      }
      v99 = (void (**)(void))(*v118 + 40);
    }
    (*v99)();
    goto LABEL_142;
  }
LABEL_155:
  if (v123 != (char *)&v125)
    free(v123);
}

uint64_t sub_1C5EA7E14(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  result = 0;
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = (v3 - 33);
  if (v4 > 0x37)
    return result;
  if (((1 << (v3 - 33)) & 0x8000000000041) != 0)
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5 && (*(_BYTE *)(v5 + 17) & 0x30) != 0)
      return 0;
    v6 = *(_DWORD *)(a1 + 20);
    if (v6 < 0 && (v10 = a1 - 32 * (v6 & 0x7FFFFFF), v13 = *(_QWORD *)(v10 - 8), v11 = v10 - 8, (v12 = v13) != 0))
    {
      v14 = -v12;
      while (1)
      {
        v15 = *(_DWORD *)(*(_QWORD *)(v11 + v14) + 8);
        v16 = v15 > 7;
        v17 = (1 << v15) & 0x83;
        if (v16 || v17 == 0)
          break;
        v14 += 16;
        if (!v14)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0)
      {
        return 0;
      }
      v3 = *(unsigned __int8 *)(a1 + 16);
    }
  }
  else
  {
    if (v4 == 27)
      return (*(_WORD *)(a1 + 18) & 0x301) != 0;
    if (((1 << (v3 - 33)) & 0x808001D0000010) == 0)
      return result;
  }
  if (v3 == 61)
    return 0;
  if (v3 != 84)
    return 1;
  v7 = *(_QWORD *)(a1 - 32);
  if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *(_QWORD *)(a1 + 72) || (*(_BYTE *)(v7 + 33) & 0x20) == 0)
    return 1;
  v8 = *(_DWORD *)(v7 + 36);
  result = sub_1C5E9DC10(v8);
  if (!(_DWORD)result)
    return result;
  result = 0;
  if ((v8 - 2630) < 0x20 || v8 == 2144)
    return result;
  if ((v8 - 2838) < 3)
    return 0;
  v9 = sub_1C5E9D8A8(v8);
  result = 0;
  if ((v8 - 1682) >= 0x8C && (v9 & 1) == 0)
  {
    result = 0;
    if (v8 <= 2702)
    {
      if ((v8 - 2471) < 8 || (v8 - 1996) < 2 || (v8 - 2098) < 7)
        return result;
      return 1;
    }
    if ((v8 - 2703) > 0x1C || ((1 << (v8 + 113)) & 0x1DE15403) == 0)
      return 1;
  }
  return result;
}

BOOL sub_1C5EA8010(unsigned __int8 *a1, llvm::ScalarEvolution *this, int a3)
{
  _BOOL8 v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  const llvm::SCEV *SCEVIter;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  const llvm::SCEV *v27;
  llvm::Type *v28;
  uint64_t SignExtendExpr;
  uint64_t RangeRef;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t ZeroExtendExpr;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  const void *v59;
  void *v60;
  size_t v62;
  size_t v63;
  void *v64;
  const void *v65;
  size_t v66;
  size_t v67;
  size_t v68;
  void *v69;
  const void *v70;
  size_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  void *v82;
  int v83;
  const void *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;

  if (*(_DWORD *)(*(_QWORD *)a1 + 8) != 4109)
    return 0;
  if (a3)
  {
    if ((a1[17] & 4) != 0)
      return 1;
  }
  else if ((a1[17] & 2) != 0)
  {
    return 1;
  }
  v7 = *((_DWORD *)a1 + 5);
  if ((v7 & 0x40000000) != 0)
    v8 = (unint64_t *)*((_QWORD *)a1 - 1);
  else
    v8 = (unint64_t *)&a1[-32 * (v7 & 0x7FFFFFF)];
  v9 = *v8;
  v10 = *((_QWORD *)this + 13);
  v11 = *((_DWORD *)this + 30);
  if (!v11)
    goto LABEL_16;
  v12 = ((v9 >> 4) ^ (v9 >> 9)) & (v11 - 1);
  v13 = v10 + 48 * v12;
  v14 = *(_QWORD *)(v13 + 24);
  if (v14 != v9)
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v13 = v10 + 48 * v12;
      v14 = *(_QWORD *)(v13 + 24);
      if (v14 == v9)
        goto LABEL_17;
    }
LABEL_16:
    v13 = v10 + 48 * v11;
  }
LABEL_17:
  if (v13 == v10 + 48 * v11 || (SCEVIter = *(const llvm::SCEV **)(v13 + 40)) == 0)
  {
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v9);
    v7 = *((_DWORD *)a1 + 5);
    if ((v7 & 0x40000000) == 0)
      goto LABEL_20;
  }
  else if ((v7 & 0x40000000) == 0)
  {
LABEL_20:
    v18 = &a1[-32 * (v7 & 0x7FFFFFF)];
    goto LABEL_23;
  }
  v18 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
LABEL_23:
  v19 = *((_QWORD *)v18 + 4);
  v20 = *((_QWORD *)this + 13);
  v21 = *((_DWORD *)this + 30);
  if (v21)
  {
    v22 = ((v19 >> 4) ^ (v19 >> 9)) & (v21 - 1);
    v23 = v20 + 48 * v22;
    v24 = *(_QWORD *)(v23 + 24);
    if (v24 == v19)
      goto LABEL_30;
    v25 = 1;
    while (v24 != -4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v21 - 1);
      v23 = v20 + 48 * v22;
      v24 = *(_QWORD *)(v23 + 24);
      if (v24 == v19)
        goto LABEL_30;
    }
  }
  v23 = v20 + 48 * v21;
LABEL_30:
  if (v23 == v20 + 48 * v21 || (v27 = *(const llvm::SCEV **)(v23 + 40)) == 0)
    v27 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v19);
  v95 = 16;
  v94 = 0xFFFFLL;
  v97 = 16;
  v96 = 0xFFFFLL;
  v91 = 16;
  v90 = 0xFFFFLL;
  v93 = 16;
  v92 = 0xFFFFLL;
  v28 = (llvm::Type *)(***(_QWORD ***)a1 + 1960);
  if (a3)
  {
    SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, SCEVIter, v28, 0);
    RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)this, SignExtendExpr, 1u, 0);
    v31 = RangeRef;
    v32 = *(unsigned int *)(RangeRef + 8);
    if (v32 > 0x40)
    {
      v62 = ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8;
      v74 = *(_DWORD *)(RangeRef + 8);
      v33 = (void *)operator new[]();
      memcpy(v33, *(const void **)v31, v62);
      LODWORD(v32) = v74;
    }
    else
    {
      v33 = *(void **)RangeRef;
    }
    v34 = *(unsigned int *)(v31 + 24);
    if (v34 > 0x40)
    {
      v63 = ((unint64_t)(v34 + 63) >> 3) & 0x3FFFFFF8;
      v72 = *(_DWORD *)(v31 + 24);
      v75 = v32;
      v64 = (void *)operator new[]();
      v65 = *(const void **)(v31 + 16);
      v35 = (uint64_t)v64;
      memcpy(v64, v65, v63);
      LODWORD(v34) = v72;
      LODWORD(v32) = v75;
    }
    else
    {
      v35 = *(_QWORD *)(v31 + 16);
    }
    v94 = (uint64_t)v33;
    v95 = v32;
    v96 = v35;
    v97 = v34;
    v36 = llvm::ScalarEvolution::getSignExtendExpr(this, v27, (llvm::Type *)(***(_QWORD ***)a1 + 1960), 0);
    v37 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v36, 1u, 0);
    v38 = v37;
    v39 = *(unsigned int *)(v37 + 8);
    if (v39 > 0x40)
    {
      v40 = (void *)operator new[]();
      memcpy(v40, *(const void **)v38, ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v40 = *(void **)v37;
    }
    v41 = *(unsigned int *)(v38 + 24);
    if (v41 > 0x40)
    {
      v66 = ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8;
      v76 = *(_DWORD *)(v38 + 24);
      v42 = (void *)operator new[]();
      memcpy(v42, *(const void **)(v38 + 16), v66);
      LODWORD(v41) = v76;
    }
    else
    {
      v42 = *(void **)(v38 + 16);
    }
    v90 = (uint64_t)v40;
    v91 = v39;
    v92 = (uint64_t)v42;
    v43 = 4294934528;
    v44 = 0x7FFFLL;
  }
  else
  {
    ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, SCEVIter, v28, 0);
    v46 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, ZeroExtendExpr, 0, 0);
    v47 = v46;
    v48 = *(unsigned int *)(v46 + 8);
    if (v48 > 0x40)
    {
      v67 = ((unint64_t)(v48 + 63) >> 3) & 0x3FFFFFF8;
      v77 = *(_DWORD *)(v46 + 8);
      v49 = (void *)operator new[]();
      memcpy(v49, *(const void **)v47, v67);
      LODWORD(v48) = v77;
    }
    else
    {
      v49 = *(void **)v46;
    }
    v50 = *(unsigned int *)(v47 + 24);
    if (v50 > 0x40)
    {
      v68 = ((unint64_t)(v50 + 63) >> 3) & 0x3FFFFFF8;
      v73 = *(_DWORD *)(v47 + 24);
      v78 = v48;
      v69 = (void *)operator new[]();
      v70 = *(const void **)(v47 + 16);
      v51 = (uint64_t)v69;
      memcpy(v69, v70, v68);
      LODWORD(v50) = v73;
      LODWORD(v48) = v78;
    }
    else
    {
      v51 = *(_QWORD *)(v47 + 16);
    }
    v94 = (uint64_t)v49;
    v95 = v48;
    v96 = v51;
    v97 = v50;
    v52 = llvm::ScalarEvolution::getZeroExtendExpr(this, v27, (llvm::Type *)(***(_QWORD ***)a1 + 1960), 0);
    v53 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v52, 0, 0);
    v54 = v53;
    v55 = *(unsigned int *)(v53 + 8);
    if (v55 > 0x40)
    {
      v56 = (void *)operator new[]();
      memcpy(v56, *(const void **)v54, ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v56 = *(void **)v53;
    }
    v41 = *(unsigned int *)(v54 + 24);
    if (v41 > 0x40)
    {
      v71 = ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8;
      v79 = *(_DWORD *)(v54 + 24);
      v57 = (void *)operator new[]();
      memcpy(v57, *(const void **)(v54 + 16), v71);
      LODWORD(v41) = v79;
    }
    else
    {
      v57 = *(void **)(v54 + 16);
    }
    v43 = 0;
    v90 = (uint64_t)v56;
    v91 = v55;
    v92 = (uint64_t)v57;
    v44 = 0xFFFFLL;
  }
  v93 = v41;
  llvm::ConstantRange::binaryOp((llvm::ConstantRange *)&v90, (unsigned int *)&v94, a1[16] - 28, (llvm::ConstantRange *)&v86);
  v85 = 32;
  v84 = (const void *)v44;
  llvm::APInt::operator+=((uint64_t)&v84, 1uLL);
  v58 = v85;
  v59 = v84;
  v85 = 0;
  v60 = (void *)v84;
  if (v58 >= 0x41)
  {
    v60 = (void *)operator new[]();
    memcpy(v60, v59, ((unint64_t)(v58 + 63) >> 3) & 0x3FFFFFF8);
  }
  v81 = 32;
  v80 = v43;
  v83 = v58;
  v82 = v60;
  v6 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v80, (const llvm::ConstantRange *)&v86);
  if (v58 > 0x40)
  {
    if (v60)
    {
      MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
      if (v81 >= 0x41)
      {
        if (v80)
          MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
      }
    }
    if (v59)
      MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
  }
  if (v89 >= 0x41 && v88)
    MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
  if (v87 >= 0x41 && v86)
    MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
  if (v93 >= 0x41 && v92)
    MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
  if (v91 >= 0x41 && v90)
    MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
  if (v97 >= 0x41 && v96)
    MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
  if (v95 >= 0x41 && v94)
    MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
  return v6;
}

unsigned __int8 *sub_1C5EA8790(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  void *v35[2];
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v35, a1, 0, 0, 0);
  v6 = *(_DWORD *)(a1 + 20);
  if (a3)
  {
    if ((v6 & 0x40000000) != 0)
      v26 = *(unsigned __int8 ***)(a1 - 8);
    else
      v26 = (unsigned __int8 **)(a1 - 32 * (v6 & 0x7FFFFFF));
    v27 = *v26;
    v28 = *v37 + 1960;
    v33[0] = "extendintsext";
    v34 = 259;
    v10 = sub_1C4773E38((uint64_t *)v35, 40, v27, v28, (uint64_t)v33);
    v29 = *(_DWORD *)(a1 + 20);
    if ((v29 & 0x40000000) != 0)
      v30 = *(_QWORD *)(a1 - 8);
    else
      v30 = a1 - 32 * (v29 & 0x7FFFFFF);
    v13 = *(unsigned __int8 **)(v30 + 32);
    v14 = *v37 + 1960;
    v33[0] = "extendintsext";
    v34 = 259;
    v15 = v33;
    v16 = 40;
  }
  else
  {
    if ((v6 & 0x40000000) != 0)
      v7 = *(unsigned __int8 ***)(a1 - 8);
    else
      v7 = (unsigned __int8 **)(a1 - 32 * (v6 & 0x7FFFFFF));
    v8 = *v7;
    v9 = *v37 + 1960;
    v31[0] = "extendintzext";
    v32 = 259;
    v10 = sub_1C4773E38((uint64_t *)v35, 39, v8, v9, (uint64_t)v31);
    v11 = *(_DWORD *)(a1 + 20);
    if ((v11 & 0x40000000) != 0)
      v12 = *(_QWORD *)(a1 - 8);
    else
      v12 = a1 - 32 * (v11 & 0x7FFFFFF);
    v13 = *(unsigned __int8 **)(v12 + 32);
    v14 = *v37 + 1960;
    v31[0] = "extendintzext";
    v32 = 259;
    v15 = v31;
    v16 = 39;
  }
  v17 = sub_1C4773E38((uint64_t *)v35, v16, v13, v14, (uint64_t)v15);
  v18 = *(_BYTE *)(a1 + 17);
  v19 = a3 | ((v18 & 4) >> 2);
  v20 = a3 ^ 1 | ((v18 & 2) >> 1);
  v21 = *(unsigned __int8 *)(a1 + 16);
  if (v21 == 41)
  {
    v33[0] = "extendint";
    v34 = 259;
    v22 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v10, v17, v20, v19);
    if (!v22)
      v22 = (unsigned __int8 *)sub_1C4774D04((uint64_t *)v35, 13, v10, (uint64_t)v17, (uint64_t)v33, v20, v19);
  }
  else
  {
    v33[0] = "extendint";
    v34 = 259;
    if (v21 == 53)
      v22 = (unsigned __int8 *)sub_1C506E874((uint64_t)v35, (uint64_t)v10, (uint64_t)v17, (uint64_t)v33, v20, v19);
    else
      v22 = (unsigned __int8 *)sub_1C4EC4040((uint64_t)v35, (uint64_t)v10, (uint64_t)v17, (uint64_t)v33, v20, v19);
  }
  if (a3)
  {
    v33[0] = "extendintsext";
    v34 = 259;
    v23 = sub_1C4773B94((uint64_t *)v35, v22, a2, (uint64_t)v33);
  }
  else
  {
    v33[0] = "extendintzext";
    v34 = 259;
    v23 = sub_1C4773690((uint64_t *)v35, v22, a2, (uint64_t)v33);
  }
  v24 = v23;
  if (v35[0] != &v36)
    free(v35[0]);
  return v24;
}

void sub_1C5EA8AA8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  llvm::Type *v16;
  unint64_t v17;
  _QWORD *v18;
  llvm::ConstantExpr **v19;
  uint64_t *v20;
  llvm::ConstantExpr *v21;
  int v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t i;
  int32x2_t ****v29;
  uint64_t v30;
  uint64_t v31;
  int32x2_t ****v32;
  int v33;
  int v34;
  _QWORD *v36;
  unint64_t v37;
  int32x2_t ****v38;
  int32x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int32x2_t *****v44;
  int32x2_t ****v45;
  int v46;
  int v47;
  int32x2_t ****v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int32x2_t ****v56;
  int32x2_t *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int32x2_t *****v62;
  int32x2_t ****v63;
  int v64;
  int v65;
  uint64_t v66;
  llvm::ValueSymbolTable *v67;
  char *AsInstruction;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  int32x2_t ****v74;
  uint64_t v75;
  uint64_t v76;
  int32x2_t ****v77;
  int v78;
  int v79;
  _QWORD *v80;
  unint64_t v81;
  int32x2_t ****v82;
  int32x2_t *v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int32x2_t *****v88;
  int32x2_t ****v89;
  int v90;
  int v91;
  int32x2_t ****v93;
  unint64_t v95;
  uint64_t v96;
  llvm::Value **v98;
  _DWORD *v99;
  _DWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  unint64_t v106;
  int32x2_t ****v107;
  int32x2_t *v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  int32x2_t *****v113;
  int32x2_t ****v114;
  int v115;
  int v116;
  uint64_t v117;
  llvm::ValueSymbolTable *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  int32x2_t ****v130;
  int32x2_t *v131;
  unint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  int32x2_t *****v136;
  int32x2_t ****v137;
  int v138;
  int v139;
  _QWORD *v140;
  int v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char **v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  uint64_t v158;
  int32x2_t *v159;
  unint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  int v167;
  uint64_t v168;
  llvm::ValueSymbolTable *v169;
  uint64_t v170;
  llvm::ValueSymbolTable *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t *v182;
  uint64_t v183;
  int32x2_t *v184;
  unint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  int v191;
  int v192;
  unint64_t v194;
  unint64_t *v195;
  uint64_t v196;
  int32x2_t *v197;
  unint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  _QWORD *v207;
  char *v209;
  char *v210;
  llvm::ConstantExpr **v211;
  llvm::ConstantInt *v212;
  uint64_t v213;
  unint64_t *v214;
  int32x2_t ****v215;
  _QWORD v216[2];
  unsigned int v217;
  uint64_t v218[3];
  char v219;
  void *v220;
  uint64_t v221;
  unint64_t *v222;
  int32x2_t ****v223;
  _QWORD *v224;
  void *v225;
  uint64_t v226;
  _BYTE v227[32];
  void *v228;
  uint64_t v229;
  _QWORD v230[34];

  v230[32] = *MEMORY[0x1E0C80C00];
  v228 = v230;
  v229 = 0x1000000000;
  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1 + 24);
      v4 = *(_QWORD *)(v3 + 8);
      if (v4 || *(unsigned __int8 *)(v3 + 16) >= 0x1Cu)
      {
        if (v2 >= HIDWORD(v229))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v228, (uint64_t)v230, v2 + 1, 16);
          v2 = v229;
        }
        v5 = (char *)v228 + 16 * v2;
        *v5 = v1;
        v5[1] = v4;
        v2 = v229 + 1;
        LODWORD(v229) = v229 + 1;
      }
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
    if (v2)
    {
      v225 = v227;
      v226 = 0x400000000;
      while (1)
      {
        v6 = (char *)v228 + 16 * v2;
        v7 = *(_QWORD *)(*((_QWORD *)v6 - 2) + 24);
        if (v7 && *(unsigned __int8 *)(v7 + 16) >= 0x1Cu)
          break;
        v9 = *((_QWORD *)v6 - 1);
        if (v9)
        {
          v10 = *(_QWORD *)(v7 + 8);
          if (v10)
          {
            if (v9 == v10)
            {
              v11 = v226;
              if (!(_DWORD)v226 || *((_QWORD *)v225 + v226 - 1) != v7)
              {
                if (v226 >= (unint64_t)HIDWORD(v226))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, (uint64_t)v227, v226 + 1, 8);
                  v11 = v226;
                }
                *((_QWORD *)v225 + v11) = v7;
                LODWORD(v226) = v226 + 1;
                v9 = *((_QWORD *)v6 - 1);
              }
            }
            *((_QWORD *)v6 - 1) = *(_QWORD *)(v9 + 8);
            v12 = *(_QWORD *)(v9 + 24);
            v13 = *(unsigned __int8 *)(v12 + 16);
            if (v13 >= 0x1C)
            {
              v14 = *(_QWORD *)(v12 + 8);
LABEL_302:
              v206 = v229;
              if (v229 >= (unint64_t)HIDWORD(v229))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v228, (uint64_t)v230, v229 + 1, 16);
                v206 = v229;
              }
              v207 = (char *)v228 + 16 * v206;
              *v207 = v9;
              v207[1] = v14;
              v2 = v229 + 1;
              goto LABEL_305;
            }
            if (v13 >= 4)
            {
              v14 = *(_QWORD *)(v12 + 8);
              if (v14)
                goto LABEL_302;
            }
LABEL_295:
            v2 = v229;
            if (!(_DWORD)v229)
              goto LABEL_306;
          }
          else
          {
            --v2;
LABEL_305:
            LODWORD(v229) = v2;
            if (!v2)
            {
LABEL_306:
              llvm::Constant::removeDeadConstantUsers(a1);
              if (v225 != v227)
                free(v225);
              goto LABEL_308;
            }
          }
        }
        else
        {
          LODWORD(v229) = --v2;
          LODWORD(v226) = v226 - 1;
          if (!v2)
            goto LABEL_306;
        }
      }
      v209 = (char *)v228 + 16 * v2;
      v217 = 128;
      v15 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
      v216[0] = v15;
      v216[1] = 0;
      if (v217)
      {
        v17 = (unint64_t)v217 << 6;
        v18 = v15 + 16;
        do
        {
          *v18 = 0;
          v18[1] = -4096;
          *(v18 - 2) = &unk_1E814DA10;
          *(v18 - 1) = 2;
          v18[2] = 0;
          v18 += 8;
          v17 -= 64;
        }
        while (v17);
      }
      LOBYTE(v218[0]) = 0;
      v219 = 0;
      if (!(_DWORD)v226)
      {
LABEL_256:
        LODWORD(v229) = v229 - 1;
        if (v219)
        {
          sub_1C4E43068((uint64_t)v218);
          MEMORY[0x1CAA32FB4](v218[0], 8);
          v219 = 0;
        }
        v177 = (_QWORD *)v216[0];
        if (v217)
        {
          v178 = v216[0] + ((unint64_t)v217 << 6);
          do
          {
            v179 = v177[3];
            if ((v179 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v180 = v177[7];
              if (v180)
              {
                if (v180 != -8192 && v180 != -4096)
                {
                  v181 = v177[5] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v181 = v177[6];
                  v182 = (unint64_t *)v177[6];
                  if (v182)
                  {
                    *v182 = *v182 & 7 | v181;
                  }
                  else
                  {
                    v183 = v177[7];
                    v184 = ***(int32x2_t ****)v183;
                    v185 = (unint64_t)v184[303];
                    if (v185 <= v181)
                    {
                      v186 = v184[305].u32[0];
                      if (v185 + 16 * v186 > v181)
                      {
                        v187 = v186 - 1;
                        LODWORD(v188) = v187 & ((v183 >> 4) ^ (v183 >> 9));
                        v189 = (uint64_t *)(v185 + 16 * v188);
                        v190 = *v189;
                        if (v183 == *v189)
                        {
LABEL_272:
                          *v189 = -8192;
                          v184[304] = vadd_s32(v184[304], (int32x2_t)0x1FFFFFFFFLL);
                          v183 = v177[7];
                        }
                        else
                        {
                          v191 = 1;
                          while (v190 != -4096)
                          {
                            v192 = v188 + v191++;
                            v188 = v192 & v187;
                            v190 = *(_QWORD *)(v185 + 16 * v188);
                            if (v183 == v190)
                            {
                              v189 = (uint64_t *)(v185 + 16 * v188);
                              goto LABEL_272;
                            }
                          }
                        }
                        *(_BYTE *)(v183 + 17) &= ~1u;
                      }
                    }
                  }
                  v179 = v177[3];
                }
              }
            }
            if (v179 != -4096 && v179 != -8192 && v179 != 0)
            {
              v194 = v177[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v194 = v177[2];
              v195 = (unint64_t *)v177[2];
              if (v195)
              {
                *v195 = *v195 & 7 | v194;
              }
              else
              {
                v196 = v177[3];
                v197 = ***(int32x2_t ****)v196;
                v198 = (unint64_t)v197[303];
                if (v198 <= v194)
                {
                  v199 = v197[305].u32[0];
                  if (v198 + 16 * v199 > v194)
                  {
                    v200 = v199 - 1;
                    LODWORD(v201) = v200 & ((v196 >> 4) ^ (v196 >> 9));
                    v202 = (uint64_t *)(v198 + 16 * v201);
                    v203 = *v202;
                    if (v196 == *v202)
                    {
LABEL_291:
                      *v202 = -8192;
                      v197[304] = vadd_s32(v197[304], (int32x2_t)0x1FFFFFFFFLL);
                      v196 = v177[3];
                    }
                    else
                    {
                      v204 = 1;
                      while (v203 != -4096)
                      {
                        v205 = v201 + v204++;
                        v201 = v205 & v200;
                        v203 = *(_QWORD *)(v198 + 16 * v201);
                        if (v196 == v203)
                        {
                          v202 = (uint64_t *)(v198 + 16 * v201);
                          goto LABEL_291;
                        }
                      }
                    }
                    *(_BYTE *)(v196 + 17) &= ~1u;
                  }
                }
              }
            }
            v177 += 8;
          }
          while (v177 != (_QWORD *)v178);
          v177 = (_QWORD *)v216[0];
        }
        MEMORY[0x1CAA32FB4](v177, 8);
        goto LABEL_295;
      }
      v19 = (llvm::ConstantExpr **)v225;
      v210 = (char *)v225 + 8 * v226;
      v20 = (uint64_t *)(v7 + 24);
      while (1)
      {
        v21 = *v19;
        v22 = *((unsigned __int8 *)*v19 + 16);
        if (*v19)
          v23 = v22 == 5;
        else
          v23 = 0;
        v211 = v19;
        if (v23)
        {
          AsInstruction = llvm::ConstantExpr::getAsInstruction(v21, 0);
          v26 = AsInstruction;
          if (*(_BYTE *)(v7 + 16) == 83)
          {
            v69 = *(_DWORD *)(v7 + 20);
            if ((v69 & 0x40000000) != 0)
              v70 = *(_QWORD *)(v7 - 8);
            else
              v70 = v7 - 32 * (v69 & 0x7FFFFFF);
            v121 = *(_QWORD *)(v70
                             + 32 * *(unsigned int *)(v7 + 60)
                             + 8 * ((unint64_t)(*((_QWORD *)v209 - 2) - v70) >> 5));
            v122 = *(_QWORD *)(v121 + 40);
            if (v122 == v121 + 40)
            {
              v124 = 0;
            }
            else
            {
              if (v122)
                v123 = v122 - 24;
              else
                v123 = 0;
              if (*(unsigned __int8 *)(v123 + 16) - 29 >= 0xB)
                v124 = 0;
              else
                v124 = v123;
            }
            v125 = *(_QWORD *)(v124 + 40);
            *((_QWORD *)AsInstruction + 5) = v125;
            *(_WORD *)(v125 + 18) &= ~0x8000u;
            if ((AsInstruction[23] & 0x10) != 0)
            {
              v170 = *(_QWORD *)(v125 + 56);
              if (v170)
              {
                v171 = *(llvm::ValueSymbolTable **)(v170 + 104);
                if (v171)
                  llvm::ValueSymbolTable::reinsertValue(v171, (llvm::Value *)v26);
              }
            }
            v127 = *(_QWORD *)(v124 + 24);
            v126 = (_QWORD *)(v124 + 24);
            v26[3] = v127;
            v26[4] = v126;
            *(_QWORD *)(v127 + 8) = v26 + 3;
            *v126 = v26 + 3;
          }
          else
          {
            v119 = *(_QWORD *)(v7 + 40);
            *((_QWORD *)AsInstruction + 5) = v119;
            *(_WORD *)(v119 + 18) &= ~0x8000u;
            if ((AsInstruction[23] & 0x10) != 0)
            {
              v168 = *(_QWORD *)(v119 + 56);
              if (v168)
              {
                v169 = *(llvm::ValueSymbolTable **)(v168 + 104);
                if (v169)
                  llvm::ValueSymbolTable::reinsertValue(v169, (llvm::Value *)v26);
              }
            }
            v120 = *v20;
            v26[3] = *v20;
            v26[4] = v20;
            *(_QWORD *)(v120 + 8) = v26 + 3;
            *v20 = (uint64_t)(v26 + 3);
          }
        }
        else
        {
          if (v21)
            v24 = v22 == 10;
          else
            v24 = 0;
          if (v24)
          {
            v26 = llvm::UndefValue::get(*(llvm::UndefValue **)v21, v16);
            v71 = *(unsigned int *)(*(_QWORD *)v21 + 32);
            if (!(_DWORD)v71)
              goto LABEL_185;
            v72 = 0;
            v212 = (llvm::ConstantInt *)(***(_QWORD ***)v21 + 1960);
            while (2)
            {
              v73 = v26;
              v74 = (int32x2_t ****)*((_QWORD *)v21 + 4 * v72 + -4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
              if (v217)
              {
                v75 = ((v74 >> 4) ^ (v74 >> 9)) & (v217 - 1);
                v76 = v216[0] + (v75 << 6);
                v77 = *(int32x2_t *****)(v76 + 24);
                if (v74 != v77)
                {
                  v78 = 1;
                  while (v77 != (int32x2_t ****)-4096)
                  {
                    v79 = v75 + v78++;
                    v75 = v79 & (v217 - 1);
                    v76 = v216[0] + (v75 << 6);
                    v77 = *(int32x2_t *****)(v76 + 24);
                    if (v74 == v77)
                      goto LABEL_115;
                  }
                  goto LABEL_133;
                }
LABEL_115:
                if (v76 == v216[0] + ((unint64_t)v217 << 6))
                  goto LABEL_133;
                v221 = 2;
                v222 = 0;
                v223 = v74;
                if (v74 != (int32x2_t ****)-8192 && v74 != (int32x2_t ****)-4096 && v74)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v221);
                v220 = &unk_1E814DA10;
                v224 = v216;
                v80 = sub_1C52E2ED8((uint64_t)v216, &v220);
                if (v223 != (int32x2_t ****)-8192 && v223 != (int32x2_t ****)-4096 && v223)
                {
                  v81 = v221 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v221 & 0xFFFFFFFFFFFFFFF8) = v222;
                  if (v222)
                  {
                    *v222 = *v222 & 7 | v81;
                  }
                  else
                  {
                    v82 = v223;
                    v83 = ***v223;
                    v84 = (unint64_t)v83[303];
                    if (v84 <= v81)
                    {
                      v85 = v83[305].u32[0];
                      if (v84 + 16 * v85 > v81)
                      {
                        v86 = v85 - 1;
                        LODWORD(v87) = v86 & ((v223 >> 4) ^ (v223 >> 9));
                        v88 = (int32x2_t *****)(v84 + 16 * v87);
                        v89 = *v88;
                        if (v223 == *v88)
                        {
LABEL_131:
                          *v88 = (int32x2_t ****)-8192;
                          v83[304] = vadd_s32(v83[304], (int32x2_t)0x1FFFFFFFFLL);
                          v82 = v223;
                        }
                        else
                        {
                          v90 = 1;
                          while (v89 != (int32x2_t ****)-4096)
                          {
                            v91 = v87 + v90++;
                            v87 = v91 & v86;
                            v89 = *(int32x2_t *****)(v84 + 16 * v87);
                            if (v223 == v89)
                            {
                              v88 = (int32x2_t *****)(v84 + 16 * v87);
                              goto LABEL_131;
                            }
                          }
                        }
                        *((_BYTE *)v82 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v213 = 6;
                v214 = 0;
                v93 = (int32x2_t ****)v80[7];
                v215 = v93;
                if (v93 != (int32x2_t ****)-8192 && v93 != (int32x2_t ****)-4096 && v93 != 0)
                {
                  v95 = v80[5] & 0xFFFFFFFFFFFFFFF8;
                  v214 = *(unint64_t **)v95;
                  *(_QWORD *)v95 = &v213;
                  v213 = v95 | 6;
                  if (v214)
                    *v214 = *v214 & 7 | (unint64_t)&v214;
                }
              }
              else
              {
LABEL_133:
                v213 = 6;
                v214 = 0;
                v215 = v74;
                if (v74 != (int32x2_t ****)-8192 && v74 != (int32x2_t ****)-4096 && v74 != 0)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v213);
              }
              v96 = (uint64_t)v215;
              if (v215 != (int32x2_t ****)-8192 && v215 != (int32x2_t ****)-4096 && v215 != 0)
              {
                v106 = v213 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v213 & 0xFFFFFFFFFFFFFFF8) = v214;
                if (v214)
                {
                  *v214 = *v214 & 7 | v106;
                }
                else
                {
                  v107 = v215;
                  v108 = ***v215;
                  v109 = (unint64_t)v108[303];
                  if (v109 <= v106)
                  {
                    v110 = v108[305].u32[0];
                    if (v109 + 16 * v110 > v106)
                    {
                      v111 = v110 - 1;
                      LODWORD(v112) = v111 & ((v215 >> 4) ^ (v215 >> 9));
                      v113 = (int32x2_t *****)(v109 + 16 * v112);
                      v114 = *v113;
                      if (v215 == *v113)
                      {
LABEL_166:
                        *v113 = (int32x2_t ****)-8192;
                        v108[304] = vadd_s32(v108[304], (int32x2_t)0x1FFFFFFFFLL);
                        v107 = v215;
                      }
                      else
                      {
                        v115 = 1;
                        while (v114 != (int32x2_t ****)-4096)
                        {
                          v116 = v112 + v115++;
                          v112 = v116 & v111;
                          v114 = *(int32x2_t *****)(v109 + 16 * v112);
                          if (v215 == v114)
                          {
                            v113 = (int32x2_t *****)(v109 + 16 * v112);
                            goto LABEL_166;
                          }
                        }
                      }
                      *((_BYTE *)v107 + 17) &= ~1u;
                    }
                  }
                }
              }
              v98 = llvm::ConstantInt::get(v212, v72, 0);
              LOWORD(v224) = 257;
              v99 = operator new(0xA0uLL);
              v100 = v99;
              v101 = 0;
              v26 = v99 + 24;
              v99[29] = v99[29] & 0x38000000 | 3;
              do
              {
                v102 = &v99[v101];
                *v102 = 0;
                v102[1] = 0;
                v102[2] = 0;
                v102[3] = v26;
                v101 += 8;
              }
              while (v101 != 24);
              llvm::InsertElementInst::InsertElementInst((uint64_t)(v99 + 24), v73, v96, (uint64_t)v98, (uint64_t)&v220, 0);
              v103 = *(_QWORD *)(v7 + 40);
              *((_QWORD *)v100 + 17) = v103;
              *(_WORD *)(v103 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v100 + 119) & 0x10) != 0)
              {
                v117 = *(_QWORD *)(v103 + 56);
                if (v117)
                {
                  v118 = *(llvm::ValueSymbolTable **)(v117 + 104);
                  if (v118)
                    llvm::ValueSymbolTable::reinsertValue(v118, (llvm::Value *)v26);
                }
              }
              v104 = *v20;
              *((_QWORD *)v100 + 15) = *v20;
              *((_QWORD *)v100 + 16) = v20;
              v105 = v100 + 30;
              *(_QWORD *)(v104 + 8) = v105;
              *v20 = (uint64_t)v105;
              if (++v72 == v71)
                goto LABEL_185;
              continue;
            }
          }
          if (v21)
            v25 = v22 == 9;
          else
            v25 = 0;
          if (!v25)
            llvm::report_fatal_error((llvm *)"Unable to replace a constant with instructions", (const char *)1);
          v26 = llvm::UndefValue::get(*(llvm::UndefValue **)v21, v16);
          v27 = *(unsigned int *)(*(_QWORD *)v21 + 12);
          if ((_DWORD)v27)
          {
            for (i = 0; i != v27; ++i)
            {
              v29 = (int32x2_t ****)*((_QWORD *)v21 + 4 * i + -4 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
              if (v217)
              {
                v30 = ((v29 >> 4) ^ (v29 >> 9)) & (v217 - 1);
                v31 = v216[0] + (v30 << 6);
                v32 = *(int32x2_t *****)(v31 + 24);
                if (v29 == v32)
                {
LABEL_50:
                  if (v31 != v216[0] + ((unint64_t)v217 << 6))
                  {
                    v221 = 2;
                    v222 = 0;
                    v223 = v29;
                    if (v29 != (int32x2_t ****)-8192 && v29 != (int32x2_t ****)-4096 && v29)
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v221);
                    v220 = &unk_1E814DA10;
                    v224 = v216;
                    v36 = sub_1C52E2ED8((uint64_t)v216, &v220);
                    if (v223 != (int32x2_t ****)-8192 && v223 != (int32x2_t ****)-4096 && v223)
                    {
                      v37 = v221 & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)(v221 & 0xFFFFFFFFFFFFFFF8) = v222;
                      if (v222)
                      {
                        *v222 = *v222 & 7 | v37;
                      }
                      else
                      {
                        v38 = v223;
                        v39 = ***v223;
                        v40 = (unint64_t)v39[303];
                        if (v40 <= v37)
                        {
                          v41 = v39[305].u32[0];
                          if (v40 + 16 * v41 > v37)
                          {
                            v42 = v41 - 1;
                            LODWORD(v43) = v42 & ((v223 >> 4) ^ (v223 >> 9));
                            v44 = (int32x2_t *****)(v40 + 16 * v43);
                            v45 = *v44;
                            if (v223 == *v44)
                            {
LABEL_72:
                              *v44 = (int32x2_t ****)-8192;
                              v39[304] = vadd_s32(v39[304], (int32x2_t)0x1FFFFFFFFLL);
                              v38 = v223;
                            }
                            else
                            {
                              v46 = 1;
                              while (v45 != (int32x2_t ****)-4096)
                              {
                                v47 = v43 + v46++;
                                v43 = v47 & v42;
                                v45 = *(int32x2_t *****)(v40 + 16 * v43);
                                if (v223 == v45)
                                {
                                  v44 = (int32x2_t *****)(v40 + 16 * v43);
                                  goto LABEL_72;
                                }
                              }
                            }
                            *((_BYTE *)v38 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    v213 = 6;
                    v214 = 0;
                    v48 = (int32x2_t ****)v36[7];
                    v215 = v48;
                    if (v48 != (int32x2_t ****)-8192 && v48 != (int32x2_t ****)-4096 && v48 != 0)
                    {
                      v50 = v36[5] & 0xFFFFFFFFFFFFFFF8;
                      v214 = *(unint64_t **)v50;
                      *(_QWORD *)v50 = &v213;
                      v213 = v50 | 6;
                      if (v214)
                        *v214 = *v214 & 7 | (unint64_t)&v214;
                    }
                    goto LABEL_82;
                  }
                }
                else
                {
                  v33 = 1;
                  while (v32 != (int32x2_t ****)-4096)
                  {
                    v34 = v30 + v33++;
                    v30 = v34 & (v217 - 1);
                    v31 = v216[0] + (v30 << 6);
                    v32 = *(int32x2_t *****)(v31 + 24);
                    if (v29 == v32)
                      goto LABEL_50;
                  }
                }
              }
              v213 = 6;
              v214 = 0;
              v215 = v29;
              if (v29 != (int32x2_t ****)-8192 && v29 != (int32x2_t ****)-4096 && v29 != 0)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v213);
LABEL_82:
              v51 = (uint64_t)v215;
              if (v215 != (int32x2_t ****)-8192 && v215 != (int32x2_t ****)-4096 && v215 != 0)
              {
                v55 = v213 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v213 & 0xFFFFFFFFFFFFFFF8) = v214;
                if (v214)
                {
                  *v214 = *v214 & 7 | v55;
                }
                else
                {
                  v56 = v215;
                  v57 = ***v215;
                  v58 = (unint64_t)v57[303];
                  if (v58 <= v55)
                  {
                    v59 = v57[305].u32[0];
                    if (v58 + 16 * v59 > v55)
                    {
                      v60 = v59 - 1;
                      LODWORD(v61) = v60 & ((v215 >> 4) ^ (v215 >> 9));
                      v62 = (int32x2_t *****)(v58 + 16 * v61);
                      v63 = *v62;
                      if (v215 == *v62)
                      {
LABEL_99:
                        *v62 = (int32x2_t ****)-8192;
                        v57[304] = vadd_s32(v57[304], (int32x2_t)0x1FFFFFFFFLL);
                        v56 = v215;
                      }
                      else
                      {
                        v64 = 1;
                        while (v63 != (int32x2_t ****)-4096)
                        {
                          v65 = v61 + v64++;
                          v61 = v65 & v60;
                          v63 = *(int32x2_t *****)(v58 + 16 * v61);
                          if (v215 == v63)
                          {
                            v62 = (int32x2_t *****)(v58 + 16 * v61);
                            goto LABEL_99;
                          }
                        }
                      }
                      *((_BYTE *)v56 + 17) &= ~1u;
                    }
                  }
                }
              }
              LODWORD(v213) = i;
              LOWORD(v224) = 257;
              v26 = sub_1C61BD4C4((llvm::Type **)v26, v51, &v213, 1, (uint64_t)&v220, 0);
              v53 = *(_QWORD *)(v7 + 40);
              v26[5] = v53;
              *(_WORD *)(v53 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v26 + 23) & 0x10) != 0)
              {
                v66 = *(_QWORD *)(v53 + 56);
                if (v66)
                {
                  v67 = *(llvm::ValueSymbolTable **)(v66 + 104);
                  if (v67)
                    llvm::ValueSymbolTable::reinsertValue(v67, (llvm::Value *)v26);
                }
              }
              v54 = *v20;
              v26[3] = *v20;
              v26[4] = v20;
              *(_QWORD *)(v54 + 8) = v26 + 3;
              *v20 = (uint64_t)(v26 + 3);
            }
          }
        }
LABEL_185:
        v221 = 2;
        v222 = 0;
        v223 = (int32x2_t ****)v21;
        if (v21 != (llvm::ConstantExpr *)-8192 && v21 != (llvm::ConstantExpr *)-4096 && v21)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v221);
        v220 = &unk_1E814DA10;
        v224 = v216;
        v128 = sub_1C52E2ED8((uint64_t)v216, &v220);
        if (v223 != (int32x2_t ****)-8192 && v223 != (int32x2_t ****)-4096 && v223)
        {
          v129 = v221 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v221 & 0xFFFFFFFFFFFFFFF8) = v222;
          if (v222)
          {
            *v222 = *v222 & 7 | v129;
          }
          else
          {
            v130 = v223;
            v131 = ***v223;
            v132 = (unint64_t)v131[303];
            if (v132 <= v129)
            {
              v133 = v131[305].u32[0];
              if (v132 + 16 * v133 > v129)
              {
                v134 = v133 - 1;
                LODWORD(v135) = v134 & ((v223 >> 4) ^ (v223 >> 9));
                v136 = (int32x2_t *****)(v132 + 16 * v135);
                v137 = *v136;
                if (v223 == *v136)
                {
LABEL_200:
                  *v136 = (int32x2_t ****)-8192;
                  v131[304] = vadd_s32(v131[304], (int32x2_t)0x1FFFFFFFFLL);
                  v130 = v223;
                }
                else
                {
                  v138 = 1;
                  while (v137 != (int32x2_t ****)-4096)
                  {
                    v139 = v135 + v138++;
                    v135 = v139 & v134;
                    v137 = *(int32x2_t *****)(v132 + 16 * v135);
                    if (v223 == v137)
                    {
                      v136 = (int32x2_t *****)(v132 + 16 * v135);
                      goto LABEL_200;
                    }
                  }
                }
                *((_BYTE *)v130 + 17) &= ~1u;
              }
            }
          }
        }
        v140 = (_QWORD *)v128[7];
        if (v140 != v26)
        {
          if (v140 && v140 != (_QWORD *)-8192 && v140 != (_QWORD *)-4096)
          {
            v156 = v128[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v156 = v128[6];
            v157 = (unint64_t *)v128[6];
            if (v157)
            {
              *v157 = *v157 & 7 | v156;
            }
            else
            {
              v158 = v128[7];
              v159 = ***(int32x2_t ****)v158;
              v160 = (unint64_t)v159[303];
              if (v160 <= v156)
              {
                v161 = v159[305].u32[0];
                if (v160 + 16 * v161 > v156)
                {
                  v162 = v161 - 1;
                  LODWORD(v163) = v162 & ((v158 >> 4) ^ (v158 >> 9));
                  v164 = (uint64_t *)(v160 + 16 * v163);
                  v165 = *v164;
                  if (v158 == *v164)
                  {
LABEL_240:
                    *v164 = -8192;
                    v159[304] = vadd_s32(v159[304], (int32x2_t)0x1FFFFFFFFLL);
                    v158 = v128[7];
                  }
                  else
                  {
                    v166 = 1;
                    while (v165 != -4096)
                    {
                      v167 = v163 + v166++;
                      v163 = v167 & v162;
                      v165 = *(_QWORD *)(v160 + 16 * v163);
                      if (v158 == v165)
                      {
                        v164 = (uint64_t *)(v160 + 16 * v163);
                        goto LABEL_240;
                      }
                    }
                  }
                  *(_BYTE *)(v158 + 17) &= ~1u;
                }
              }
            }
          }
          v128[7] = v26;
          if (v26 != (_QWORD *)-8192 && v26 != (_QWORD *)-4096 && v26)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v128 + 5));
        }
        v141 = *((_DWORD *)v26 + 5);
        if ((v141 & 0x40000000) != 0)
        {
          v143 = (char *)*(v26 - 1);
          v142 = v141 & 0x7FFFFFF;
          if (v142)
          {
LABEL_213:
            v144 = &v143[32 * v142];
            do
            {
              if (v217)
              {
                v145 = *(_QWORD *)v143;
                v146 = ((*(_QWORD *)v143 >> 4) ^ (*(_QWORD *)v143 >> 9)) & (v217 - 1);
                v147 = v216[0] + (v146 << 6);
                v148 = *(_QWORD *)(v147 + 24);
                if (*(_QWORD *)v143 == v148)
                {
LABEL_219:
                  if (v147 != v216[0] + ((unint64_t)v217 << 6))
                  {
                    v151 = *(_QWORD *)(v147 + 56);
                    if (v145)
                    {
                      **((_QWORD **)v143 + 2) = *((_QWORD *)v143 + 1);
                      v152 = *((_QWORD *)v143 + 1);
                      if (v152)
                        *(_QWORD *)(v152 + 16) = *((_QWORD *)v143 + 2);
                    }
                    *(_QWORD *)v143 = v151;
                    if (v151)
                    {
                      v155 = *(_QWORD *)(v151 + 8);
                      v154 = (char **)(v151 + 8);
                      v153 = v155;
                      *((_QWORD *)v143 + 1) = v155;
                      if (v155)
                        *(_QWORD *)(v153 + 16) = v143 + 8;
                      *((_QWORD *)v143 + 2) = v154;
                      *v154 = v143;
                    }
                  }
                }
                else
                {
                  v149 = 1;
                  while (v148 != -4096)
                  {
                    v150 = v146 + v149++;
                    v146 = v150 & (v217 - 1);
                    v147 = v216[0] + (v146 << 6);
                    v148 = *(_QWORD *)(v147 + 24);
                    if (v145 == v148)
                      goto LABEL_219;
                  }
                }
              }
              v143 += 32;
            }
            while (v143 != v144);
          }
        }
        else
        {
          v142 = v141 & 0x7FFFFFF;
          v143 = (char *)&v26[-4 * v142];
          if (v142)
            goto LABEL_213;
        }
        v19 = v211 + 1;
        if (v211 + 1 == (llvm::ConstantExpr **)v210)
        {
          if (v26)
          {
            v172 = *((_QWORD *)v209 - 2);
            if (*(_QWORD *)v172)
            {
              **(_QWORD **)(v172 + 16) = *(_QWORD *)(v172 + 8);
              v173 = *(_QWORD *)(v172 + 8);
              if (v173)
                *(_QWORD *)(v173 + 16) = *(_QWORD *)(v172 + 16);
            }
            *(_QWORD *)v172 = v26;
            v176 = v26[1];
            v175 = v26 + 1;
            v174 = v176;
            *(_QWORD *)(v172 + 8) = v176;
            if (v176)
              *(_QWORD *)(v174 + 16) = v172 + 8;
            *(_QWORD *)(v172 + 16) = v175;
            *v175 = v172;
          }
          goto LABEL_256;
        }
      }
    }
  }
LABEL_308:
  if (v228 != v230)
    free(v228);
}

uint64_t sub_1C5EA9C8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  LODWORD(v2) = 0;
  do
  {
    v3 = *(_QWORD *)(v1 + 24);
    result = 0xFFFFFFFFLL;
    if (!v3)
      break;
    if (*(_BYTE *)(v3 + 16) != 89)
      break;
    v5 = *(_QWORD *)(v3 - 32);
    if (*(_BYTE *)(v5 + 16) != 16)
      break;
    v6 = (_QWORD *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u)
      v6 = (_QWORD *)*v6;
    v7 = *(_DWORD *)v6;
    v2 = v2 <= v7 ? v7 : v2;
    v1 = *(_QWORD *)(v1 + 8);
    result = v2;
  }
  while (v1);
  return result;
}

BOOL sub_1C5EA9CF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  char *v9;
  _QWORD **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  _BOOL8 v17;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[32];
  void *v23;
  uint64_t v24;
  _BYTE v25[128];
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v26 = 1;
  memset_pattern16(&v27, &unk_1C85F2160, 0x80uLL);
  v23 = v25;
  v24 = 0x800000000;
  llvm::FindFunctionBackedges(a1, (uint64_t)&v23);
  v4 = (uint64_t *)v23;
  if ((_DWORD)v24)
  {
    v5 = 16 * v24;
    while (1)
    {
      v20 = 0;
      if ((sub_1C5EAF6BC((uint64_t)&v26, *v4, v4[1], &v20) & 1) == 0)
        break;
LABEL_12:
      v4 += 2;
      v5 -= 16;
      if (!v5)
      {
        v4 = (uint64_t *)v23;
        goto LABEL_17;
      }
    }
    v6 = v26 >> 1;
    if ((v26 & 1) != 0)
      v7 = 8;
    else
      v7 = v28;
    if (4 * v6 + 4 >= 3 * v7)
    {
      v7 *= 2;
    }
    else if (v7 + ~v6 - HIDWORD(v26) > v7 >> 3)
    {
      goto LABEL_9;
    }
    sub_1C5EAF7BC((uint64_t)&v26, v7);
    v20 = 0;
    sub_1C5EAF6BC((uint64_t)&v26, *v4, v4[1], &v20);
LABEL_9:
    LODWORD(v26) = v26 + 2;
    if (*(_QWORD *)v20 != -4096 || *((_QWORD *)v20 + 1) != -4096)
      --HIDWORD(v26);
    *(_OWORD *)v20 = *(_OWORD *)v4;
    goto LABEL_12;
  }
LABEL_17:
  if (v4 != (uint64_t *)v25)
    free(v4);
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(a2, (uint64_t)&v23);
  v8 = v23;
  if ((_DWORD)v24)
  {
    v9 = (char *)v23 + 8 * v24;
    while (1)
    {
      v10 = (_QWORD **)*v8;
      v20 = v22;
      v21 = 0x400000000;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatches(v10, (uint64_t)&v20);
      v11 = (uint64_t *)v20;
      if ((_DWORD)v21)
        break;
LABEL_29:
      if (v11 != (uint64_t *)v22)
        free(v11);
      if (++v8 == (_QWORD *)v9)
      {
        v8 = v23;
        goto LABEL_33;
      }
    }
    v12 = 8 * v21;
    while (1)
    {
      v13 = *v11;
      v14 = *v10[4];
      v19 = 0;
      if (sub_1C5EAF6BC((uint64_t)&v26, v13, v14, &v19))
      {
        v15 = v19;
        *v19 = -8192;
        v15[1] = -8192;
        v16 = v26 - 2;
        LODWORD(v26) = v26 - 2;
        ++HIDWORD(v26);
      }
      else
      {
        v16 = v26;
      }
      if (v16 <= 1)
        break;
      ++v11;
      v12 -= 8;
      if (!v12)
      {
        v11 = (uint64_t *)v20;
        goto LABEL_29;
      }
    }
    if (v20 != v22)
      free(v20);
    if (v23 != v25)
      free(v23);
    v17 = 0;
    if ((v26 & 1) == 0)
      goto LABEL_42;
  }
  else
  {
LABEL_33:
    if (v8 != (_QWORD *)v25)
      free(v8);
    v17 = v26 > 1;
    if ((v26 & 1) == 0)
LABEL_42:
      MEMORY[0x1CAA32FB4](v27, 8);
  }
  return v17;
}

uint64_t sub_1C5EA9FF0(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8)
{
  std::string *p_p;
  unint64_t size;
  uint64_t v11;
  uint64_t v12;
  std::string __p;

  sub_1C53CF274(a2, a3, a4, (uint64_t *)a1, 0, a6, a7, a8, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), (unsigned __int8 *)p_p, size);
  v12 = 0;
  if (v11)
  {
    if (*(_BYTE *)(v11 + 16))
      v12 = 0;
    else
      v12 = v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

BOOL sub_1C5EAA084(unsigned int a1, unsigned int a2, unsigned int a3)
{
  if (a3 <= 3 && (a1 <= 8 && ((a2 | a1) & 1) == 0 || a1 <= 4 && a2 == 1))
    return 1;
  if ((a1 & 3) != 0 || (a2 & 3) != 0 && a2 % a1)
    return 0;
  return a1 < 4 || a3 != 1 || (a2 & 3) == 0;
}

uint64_t sub_1C5EAA0EC(uint64_t a1, unsigned int a2, llvm::Type ***this)
{
  llvm::Type *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;

  v6 = (llvm::Type *)this;
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    v6 = *this[2];
  if (llvm::Type::getPrimitiveSizeInBits(v6) != 8)
  {
LABEL_13:
    if (a1 >= 4)
      return 4;
    else
      return a1;
  }
  if (a2 * (_DWORD)a1 != 128 || (v7 = 8 * *((_DWORD *)this + 8), v7 < 0x20))
  {
    if (a2 > 8)
      return 1;
    goto LABEL_13;
  }
  do
  {
    result = a1;
    v9 = a1 * a2;
    a1 = a1 >> 1;
  }
  while (v9 >= 0x20 && v7 < v9);
  return result;
}

void sub_1C5EAA198(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5, char a6, int a7, int a8)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  int v32;
  llvm *v33;
  unsigned int v34;
  unsigned int v35;
  _BOOL4 v36;
  char v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  llvm *v59;
  const llvm::SCEV *v60;
  _BOOL4 v61;
  BOOL v62;
  _BOOL4 v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  const llvm::SCEV *v73;
  int v74;
  int v76;
  unsigned int v77;
  uint64_t v78;
  const llvm::SCEV *SCEVIter;
  int LoopDisposition;
  unsigned int v82;
  llvm *UnderlyingObject;
  llvm *v84;
  _QWORD *v85;
  uint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  const llvm::SCEV *v93;
  int v94;
  uint64_t v96;
  int v97;
  BOOL v98;
  unsigned int v100;
  uint64_t v102;
  uint64_t v104;
  int v105;
  int v106;
  int8x8_t v108;
  uint64_t v109;
  _QWORD *v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  const char *v114;
  uint64_t v115;
  unint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int v123;
  unsigned int v124;
  const llvm::SCEV *v125;
  int v126;
  uint64_t v128;
  int v129;
  BOOL v130;
  unsigned int v132;
  uint8x8_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int v141;
  unsigned int v142;
  const llvm::SCEV *v143;
  int v144;
  uint64_t v146;
  int v147;
  BOOL v148;
  unsigned int v150;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  int v157;
  int v158;
  _DWORD *v159;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  llvm::Loop *v171;
  int v173;
  char v174;
  uint64_t v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  _BYTE *v181;
  _BYTE *v182;
  uint64_t v183;
  int v184;
  _BYTE v185[64];
  char v186[24];
  unsigned int v187;

  v13 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 56) + 40);
  v181 = v185;
  v182 = v185;
  v183 = 8;
  v184 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  sub_1C5EA42E4(v13, (llvm::SmallPtrSetImplBase *)&v181, 1);
  v14 = *(_QWORD *)(a1 + 32);
  v171 = (llvm::Loop *)a1;
  v162 = *(_QWORD *)(a1 + 40);
  if (v162 == v14)
  {
    v155 = 0;
    goto LABEL_265;
  }
  v157 = a4;
  v158 = a5;
  v159 = a3;
  v15 = 0;
  v166 = 0;
  v164 = 0;
  v165 = 0;
  v168 = 0;
  v163 = 0;
  v16 = 0;
  v169 = 0;
  v170 = 0;
  v161 = 0;
  v177 = v13 + 272;
  v173 = ~(-1 << a6);
  v174 = a6;
  do
  {
    v167 = v14;
    v17 = *(_QWORD *)v14 + 40;
    v18 = *(_QWORD *)(*(_QWORD *)v14 + 48);
    v175 = v17;
    while (v18 != v17)
    {
      v19 = v18 - 24;
      if (v18)
        v20 = v18 - 24;
      else
        v20 = 0;
      v21 = *(unsigned __int8 *)(v20 + 16);
      if (v21 == 84)
      {
        v22 = *(_QWORD *)(v20 - 32);
        if (v22)
        {
          if (!*(_BYTE *)(v22 + 16)
            && *(_QWORD *)(v22 + 24) == *(_QWORD *)(v20 + 72)
            && (*(_BYTE *)(v22 + 33) & 0x20) != 0
            && *(_BYTE *)(*(_QWORD *)v19 + 8) != 7
            && ((v23 = *(_DWORD *)(*(_QWORD *)(v18 - 56) + 36), sub_1C47860D0(v23))
             || (v23 - 2022) <= 0x3F))
          {
            v104 = *(_QWORD *)v20;
            v105 = *(_DWORD *)(v22 + 36);
            if (!sub_1C47860D0(v105))
              goto LABEL_180;
            v106 = *(unsigned __int8 *)(v104 + 8);
            if (v106 == 16 && v104 != 0)
            {
              v104 = **(_QWORD **)(v104 + 16);
              v106 = *(_DWORD *)(v104 + 8);
            }
            if ((v106 & 0xFE) == 0x12)
            {
              llvm::SampleInfo::SampleInfo((uint64_t)v186, v105, 1);
              v109 = *(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) + 32 * v187);
              v110 = (_QWORD *)(v109 + 24);
              if (*(_DWORD *)(v109 + 32) >= 0x41u)
                v110 = (_QWORD *)*v110;
              v111 = *(_DWORD *)v110;
              if (a8)
              {
                if (v111 <= 1)
                  v112 = 1;
                else
                  v112 = 2;
                if (v111 > 3)
                  v112 = 3;
                if (v111 > 7)
                  v112 = 4;
                if (v111 == -1)
                  v113 = -1;
                else
                  v113 = v112;
              }
              else
              {
                v108.i32[0] = v111;
                v134 = (uint8x8_t)vcnt_s8(v108);
                v134.i16[0] = vaddlv_u8(v134);
                v113 = v134.i32[0];
              }
              sub_1C4768AD0(v177, *(_QWORD *)(v104 + 24));
              v137 = v136;
              if ((_DWORD)v135 == 1)
              v116 = ((unint64_t)(v137 + 7) >> 3) * v113;
            }
            else
            {
LABEL_180:
              sub_1C4768AD0(v177, v104);
              v116 = (unint64_t)(v115 + 7) >> 3;
              if ((_DWORD)v114 == 1)
            }
            LODWORD(v170) = ((v116 + v173) >> v174) + v170;
          }
          else if (!*(_BYTE *)(v22 + 16)
                 && *(_QWORD *)(v22 + 24) == *(_QWORD *)(v20 + 72)
                 && (*(_BYTE *)(v22 + 33) & 0x20) != 0
                 && *(_BYTE *)(*(_QWORD *)v19 + 8) == 7)
          {
            v24 = *(_DWORD *)(*(_QWORD *)(v18 - 56) + 36);
            if ((v24 - 1682) < 0x8C || (v24 - 2022) <= 0x3F)
            {
              v25 = *(_DWORD *)(v20 + 20);
              v26 = v25 & 0x7FFFFFF;
              if ((v25 & 0x40000000) != 0)
                v27 = *(_QWORD *)(v20 - 8);
              else
                v27 = v20 - 32 * v26;
              sub_1C4768AD0(v177, **(_QWORD **)(v27 + 32 * (v26 - 1)));
              v119 = v118;
              if ((_DWORD)v117 == 1)
              HIDWORD(v170) += (((unint64_t)(v119 + 7) >> 3) + 1) >> 1;
            }
          }
        }
        goto LABEL_120;
      }
      if (!v18 || v21 != 60)
      {
        if (!v18 || v21 != 61)
          goto LABEL_120;
        v45 = *(_QWORD *)(v20 - 32);
        sub_1C4768AD0(v177, **(_QWORD **)(v20 - 64));
        v48 = v47;
        if ((_DWORD)v46 == 1)
        v49 = **(_QWORD **)(v20 - 32);
        v50 = *(_DWORD *)(v49 + 8);
        if ((v50 & 0xFE) == 0x12)
          v50 = *(_DWORD *)(**(_QWORD **)(v49 + 16) + 8);
        v51 = (((unint64_t)(v48 + 7) >> 3) + v173) >> v174;
        if (v50 <= 0xFF)
        {
          v52 = *(_QWORD *)(a2 + 104);
          v53 = *(_DWORD *)(a2 + 120);
          if (!v53)
            goto LABEL_100;
          v54 = (v53 - 1) & ((v45 >> 4) ^ (v45 >> 9));
          v55 = v52 + 48 * v54;
          v56 = *(_QWORD *)(v55 + 24);
          if (v56 != v45)
          {
            v57 = 1;
            while (v56 != -4096)
            {
              v58 = v54 + v57++;
              v54 = v58 & (v53 - 1);
              v55 = v52 + 48 * v54;
              v56 = *(_QWORD *)(v55 + 24);
              if (v56 == v45)
                goto LABEL_101;
            }
LABEL_100:
            v55 = v52 + 48 * v53;
          }
LABEL_101:
          if (v55 == v52 + 48 * v53 || (SCEVIter = *(const llvm::SCEV **)(v55 + 40)) == 0)
            SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v45);
          LoopDisposition = llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a2, SCEVIter, v171);
          if (LoopDisposition)
          {
            if (LoopDisposition == 1)
            {
              v82 = 0;
              v62 = 1;
            }
            else
            {
              v62 = 0;
              v82 = v51;
            }
            v35 = v50 >> 8;
            LODWORD(v169) = v51 + v169;
            LODWORD(v164) = v82 + v164;
            if (v166)
            {
              v87 = ~((unint64_t)(37 * v51) << 32)
                  + 37 * v51
                  + ((unint64_t)((SCEVIter >> 4) ^ (SCEVIter >> 9)) << 32);
              v88 = (v87 ^ (v87 >> 22)) + ~((v87 ^ (v87 >> 22)) << 13);
              v89 = (9 * (v88 ^ (v88 >> 8))) ^ ((9 * (v88 ^ (v88 >> 8))) >> 15);
              v90 = v166 - 1;
              v91 = (v166 - 1) & (((v89 + ~(v89 << 27)) >> 31) ^ (v89 + ~((_DWORD)v89 << 27)));
              v92 = v165 + 16 * v91;
              v93 = *(const llvm::SCEV **)v92;
              v94 = *(_DWORD *)(v92 + 8);
              if (SCEVIter == *(const llvm::SCEV **)v92 && v51 == v94)
              {
                v63 = 1;
                v168 = v166;
                v163 = v165;
                goto LABEL_74;
              }
              v96 = 0;
              v97 = 1;
              while (v93 != (const llvm::SCEV *)-4096 || v94 != -1)
              {
                if (v96)
                  v98 = 0;
                else
                  v98 = v94 == -2;
                if (v98 && v93 == (const llvm::SCEV *)-8192)
                  v96 = v92;
                v100 = v91 + v97++;
                v91 = v100 & v90;
                v92 = v165 + 16 * (v100 & v90);
                v93 = *(const llvm::SCEV **)v92;
                v94 = *(_DWORD *)(v92 + 8);
                v63 = 1;
                if (SCEVIter == *(const llvm::SCEV **)v92 && v51 == v94)
                  goto LABEL_156;
              }
              if (v96)
                v102 = v96;
              else
                v102 = v92;
            }
            else
            {
              v102 = 0;
            }
            if (4 * v15 + 4 >= 3 * v166)
            {
              sub_1C5EAFA10(&v178, 2 * v166);
              v165 = v178;
              if (v180)
              {
                v120 = ~((unint64_t)(37 * v51) << 32)
                     + 37 * v51
                     + ((unint64_t)((SCEVIter >> 4) ^ (SCEVIter >> 9)) << 32);
                v121 = (v120 ^ (v120 >> 22)) + ~((v120 ^ (v120 >> 22)) << 13);
                v122 = (9 * (v121 ^ (v121 >> 8))) ^ ((9 * (v121 ^ (v121 >> 8))) >> 15);
                v166 = v180;
                v123 = v180 - 1;
                v124 = (v180 - 1) & (((v122 + ~(v122 << 27)) >> 31) ^ (v122 + ~((_DWORD)v122 << 27)));
                v102 = v178 + 16 * v124;
                v125 = *(const llvm::SCEV **)v102;
                v126 = *(_DWORD *)(v102 + 8);
                if (SCEVIter != *(const llvm::SCEV **)v102 || v51 != v126)
                {
                  v128 = 0;
                  v129 = 1;
                  while (v125 != (const llvm::SCEV *)-4096 || v126 != -1)
                  {
                    if (v128)
                      v130 = 0;
                    else
                      v130 = v126 == -2;
                    if (v130 && v125 == (const llvm::SCEV *)-8192)
                      v128 = v102;
                    v132 = v124 + v129++;
                    v124 = v132 & v123;
                    v102 = v178 + 16 * (v132 & v123);
                    v125 = *(const llvm::SCEV **)v102;
                    v126 = *(_DWORD *)(v102 + 8);
                    if (SCEVIter == *(const llvm::SCEV **)v102 && v51 == v126)
                      goto LABEL_150;
                  }
                  if (v128)
                    v102 = v128;
                }
              }
              else
              {
                v166 = 0;
                v102 = 0;
              }
            }
            else if (v166 + ~v15 - HIDWORD(v179) <= v166 >> 3)
            {
              sub_1C5EAFA10(&v178, v166);
              v165 = v178;
              v166 = v180;
              if (v180)
              {
                v138 = ~((unint64_t)(37 * v51) << 32)
                     + 37 * v51
                     + ((unint64_t)((SCEVIter >> 4) ^ (SCEVIter >> 9)) << 32);
                v139 = (v138 ^ (v138 >> 22)) + ~((v138 ^ (v138 >> 22)) << 13);
                v140 = (9 * (v139 ^ (v139 >> 8))) ^ ((9 * (v139 ^ (v139 >> 8))) >> 15);
                v141 = v180 - 1;
                v142 = (v180 - 1) & (((v140 + ~(v140 << 27)) >> 31) ^ (v140 + ~((_DWORD)v140 << 27)));
                v102 = v178 + 16 * v142;
                v143 = *(const llvm::SCEV **)v102;
                v144 = *(_DWORD *)(v102 + 8);
                if (*(const llvm::SCEV **)v102 != SCEVIter || v144 != v51)
                {
                  v146 = 0;
                  v147 = 1;
                  while (v143 != (const llvm::SCEV *)-4096 || v144 != -1)
                  {
                    if (v146)
                      v148 = 0;
                    else
                      v148 = v144 == -2;
                    if (v148 && v143 == (const llvm::SCEV *)-8192)
                      v146 = v102;
                    v150 = v142 + v147++;
                    v142 = v150 & v141;
                    v102 = v178 + 16 * (v150 & v141);
                    v143 = *(const llvm::SCEV **)v102;
                    v144 = *(_DWORD *)(v102 + 8);
                    if (*(const llvm::SCEV **)v102 == SCEVIter && v144 == v51)
                      goto LABEL_243;
                  }
                  if (v146)
                    v102 = v146;
                }
              }
              else
              {
                v166 = 0;
                v102 = 0;
              }
LABEL_243:
              v17 = v175;
            }
LABEL_150:
            v15 = v179 + 1;
            LODWORD(v179) = v179 + 1;
            if (*(_QWORD *)v102 != -4096 || *(_DWORD *)(v102 + 8) != -1)
              --HIDWORD(v179);
            *(_QWORD *)v102 = SCEVIter;
            *(_DWORD *)(v102 + 8) = v51;
            v63 = 1;
LABEL_156:
            v168 = v166;
            v163 = v165;
            goto LABEL_74;
          }
        }
        HIDWORD(v170) += v51;
        goto LABEL_120;
      }
      sub_1C5EAAE98((uint64_t *)v20, v177);
      v28 = *(_QWORD *)(v20 - 32);
      v29 = *(_DWORD *)(*(_QWORD *)v28 + 8);
      if ((v29 & 0xFE) == 0x12)
        v29 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v28 + 16) + 8);
      v30 = v29 >> 8;
      if (v30 == 2)
      {
        UnderlyingObject = llvm::getUnderlyingObject(*(llvm **)(v20 - 32), (const llvm::Value *)6);
        if (!UnderlyingObject
          || *((_BYTE *)UnderlyingObject + 16) != 60
          || (v84 = llvm::getUnderlyingObject(*((llvm **)UnderlyingObject - 4), (const llvm::Value *)6)) == 0
          || *((_BYTE *)v84 + 16) != 3)
        {
LABEL_29:
          v31 = 0;
          goto LABEL_30;
        }
        v85 = sub_1C477672C((uint64_t)&v181, (uint64_t)v84);
        if (v182 == v181)
          v86 = (uint64_t *)((char *)&v183 + 4);
        else
          v86 = &v183;
        v31 = v85 != (_QWORD *)&v182[8 * *(unsigned int *)v86];
      }
      else
      {
        if (v30 != 64)
          goto LABEL_29;
        v31 = 1;
      }
LABEL_30:
      v32 = sub_1C5EAAE98((uint64_t *)v20, v177);
      v33 = *(llvm **)(v20 - 32);
      v34 = *(_DWORD *)(*(_QWORD *)v33 + 8);
      if ((v34 & 0xFE) == 0x12)
        v34 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v33 + 16) + 8);
      v35 = v34 >> 8;
      v36 = v34 < 0x100;
      v37 = v34 < 0x100 || v31;
      if ((v37 & 1) != 0)
      {
LABEL_36:
        v38 = *(_QWORD *)(a2 + 104);
        v39 = *(_DWORD *)(a2 + 120);
        if (!v39)
          goto LABEL_62;
        v40 = (v39 - 1) & ((v28 >> 4) ^ (v28 >> 9));
        v41 = v38 + 48 * v40;
        v42 = *(_QWORD *)(v41 + 24);
        if (v42 != v28)
        {
          v43 = 1;
          while (v42 != -4096)
          {
            v44 = v40 + v43++;
            v40 = v44 & (v39 - 1);
            v41 = v38 + 48 * v40;
            v42 = *(_QWORD *)(v41 + 24);
            if (v42 == v28)
              goto LABEL_63;
          }
LABEL_62:
          v41 = v38 + 48 * v39;
        }
LABEL_63:
        v17 = v175;
        if (v41 == v38 + 48 * v39 || (v60 = *(const llvm::SCEV **)(v41 + 40)) == 0)
          v60 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v28);
        v64 = llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a2, v60, v171);
        if (v64)
          v62 = v64 == 1;
        else
          v62 = 0;
        if (v64)
          v61 = v64 != 1;
        else
          v61 = 1;
        v63 = v64 != 0;
        goto LABEL_73;
      }
      if ((v34 & 0xFFFFFF00) == 0x200
        && (v59 = llvm::getUnderlyingObject(v33, (const llvm::Value *)6)) != 0
        && *((_BYTE *)v59 + 16) == 3)
      {
        v36 = 0;
        if ((*((_DWORD *)v59 + 5) & 0x7FFFFFF) != 0)
          goto LABEL_36;
        v60 = 0;
        v61 = 1;
        v62 = 0;
        v63 = 0;
      }
      else
      {
        v36 = 0;
        v60 = 0;
        v62 = 0;
        v63 = 0;
        v61 = 1;
      }
      v17 = v175;
LABEL_73:
      if ((v31 & a7 & 1) != 0)
        goto LABEL_74;
      v66 = (v32 + v173) >> v174;
      if (v63)
      {
        if (v61)
          v67 = (v32 + v173) >> v174;
        else
          v67 = 0;
        HIDWORD(v169) += v67;
        if (v36)
        {
          if (!v168)
            goto LABEL_157;
          v68 = ~((unint64_t)(37 * v66) << 32)
              + 37 * v66
              + ((unint64_t)((v60 >> 4) ^ (v60 >> 9)) << 32);
          v69 = (v68 ^ (v68 >> 22)) + ~((v68 ^ (v68 >> 22)) << 13);
          v70 = (9 * (v69 ^ (v69 >> 8))) ^ ((9 * (v69 ^ (v69 >> 8))) >> 15);
          v71 = (v168 - 1) & (((v70 + ~(v70 << 27)) >> 31) ^ (v70 + ~((_DWORD)v70 << 27)));
          v72 = v163 + 16 * v71;
          v73 = *(const llvm::SCEV **)v72;
          v74 = *(_DWORD *)(v72 + 8);
          if (v60 == v73 && v66 == v74)
          {
LABEL_98:
            LODWORD(v169) = v169 - v66;
          }
          else
          {
            v76 = 1;
            while (v73 != (const llvm::SCEV *)-4096 || v74 != -1)
            {
              v77 = v71 + v76++;
              v71 = v77 & (v168 - 1);
              v78 = v163 + 16 * v71;
              v73 = *(const llvm::SCEV **)v78;
              v74 = *(_DWORD *)(v78 + 8);
              if (v60 == v73 && v66 == v74)
                goto LABEL_98;
            }
LABEL_157:
            v161 += v66;
          }
          v63 = 1;
        }
        else
        {
          v63 = 1;
        }
LABEL_74:
        if (!v62 && v63 && v35 != 3 && v35 != 1)
        {
          if (v35)
          {
            v65 = HIDWORD(v164);
            if (HIDWORD(v164) <= 1)
              v65 = 1;
          }
          else
          {
            v65 = 2;
          }
          HIDWORD(v164) = v65;
        }
        goto LABEL_120;
      }
      LODWORD(v170) = v66 + v170;
LABEL_120:
      ++v16;
      v18 = *(_QWORD *)(v18 + 8);
    }
    v14 = v167 + 8;
  }
  while (v167 + 8 != v162);
  v152 = v170 + HIDWORD(v169);
  if (v170 <= HIDWORD(v170))
    v153 = HIDWORD(v170);
  else
    v153 = v170;
  v154 = v161;
  if (v161 <= v169)
    v154 = v169;
  if (v152 <= HIDWORD(v170) + (int)v164)
    v152 = HIDWORD(v170) + v164;
  if (HIDWORD(v164))
  {
    a3 = v159;
    v155 = v165;
    if (HIDWORD(v164) != 2 || v154 && v16 / v154 <= 0x95)
      *v159 = v157;
    if (HIDWORD(v164) == 2)
      v153 = v154;
    v156 = v158;
    if (v152)
      goto LABEL_261;
  }
  else
  {
    a3 = v159;
    v156 = v158;
    v155 = v165;
    if (v152)
LABEL_261:
      a3[7] = v156 / v152;
  }
  if (v153)
  {
    a3[8] = (v156 << SBYTE4(v164)) / v153;
    goto LABEL_266;
  }
LABEL_265:
  *((_BYTE *)a3 + 40) = 0;
LABEL_266:
  MEMORY[0x1CAA32FB4](v155, 8);
  if (v182 != v181)
    free(v182);
}

unint64_t sub_1C5EAAE98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  const char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  unint64_t v18;

  v3 = *a1;
  if (*a1)
    v4 = (*(_DWORD *)(*a1 + 8) & 0xFE) == 18;
  else
    v4 = 0;
  if (!v4)
  {
LABEL_5:
    sub_1C4768AD0(a2, v3);
    v7 = v6 + 7;
    if ((_DWORD)v5 == 1)
    return v7 >> 3;
  }
  v9 = a1[1];
  if (v9)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(v9 + 24);
      if (!v11)
        goto LABEL_5;
      if (*(_BYTE *)(v11 + 16) != 89)
        goto LABEL_5;
      v12 = *(_QWORD *)(v11 - 32);
      if (*(_BYTE *)(v12 + 16) != 16)
        goto LABEL_5;
      v13 = (_QWORD *)(v12 + 24);
      if (*(_DWORD *)(v12 + 32) >= 0x41u)
        v13 = (_QWORD *)*v13;
      v14 = *(_DWORD *)v13;
      if (v10 <= v14)
        v10 = v14;
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
      {
        if (v10 != -1)
          goto LABEL_21;
        goto LABEL_5;
      }
    }
  }
  v10 = 0;
LABEL_21:
  sub_1C4768AD0(a2, *(_QWORD *)(v3 + 24));
  v17 = v15 + 7;
  if ((_DWORD)v16 == 1)
  {
    v18 = v15 + 7;
    v17 = v18;
  }
  return (v17 >> 3) + (v17 >> 3) * v10;
}

BOOL sub_1C5EAAFA0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v7;

  if (llvm::Module::getPICLevel(*(llvm::Module **)(a1 + 40)))
    return 1;
  v4 = (*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FF;
  if (v4)
  {
    if (v4 != 255 && v4 != 8)
      return v4 == 104 || ((*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FD) == 101;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 592))(a2, 101))
    return 1;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 592))(a2, 103);
  if (!v7)
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 592))(a2, 104);
  return v7 != 0;
}

void sub_1C5EAB050(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[6];

  v34[5] = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v32 = v34;
  v33 = 0x500000000;
  if (v4)
  {
    v8 = 0;
    v9 = v4;
    do
    {
      v9 = *(_QWORD *)(v9 + 8);
      --v8;
    }
    while (v9);
    if (v8 <= 0xFFFFFFFFFFFFFFFALL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, -(uint64_t)v8, 8);
      v10 = v33;
      v12 = v32;
      v11 = v33;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = v34;
    }
    v13 = &v12[v10];
    do
    {
      *v13++ = *(_QWORD *)(v4 + 24);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
    v14 = v11 - v8;
    LODWORD(v33) = v11 - v8;
    if (v11 != (_DWORD)v8)
    {
      do
      {
        v15 = *((_QWORD *)v32 + v14 - 1);
        v16 = v14 - 1;
        LODWORD(v33) = v16;
        v17 = *(unsigned __int8 *)(v15 + 16);
        if (v17 >= 0x1C)
        {
          v31 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(*(_QWORD *)(v15 + 40) + 56));
          sub_1C5600638(a3, &v31);
          if (!*a4)
          {
            v18 = *(unsigned __int8 *)(v15 + 16);
            if ((v18 - 84) < 2)
            {
LABEL_23:
              *a4 = 1;
            }
            else if (v18 == 77)
            {
              v27 = *(_QWORD *)(v15 + 8);
              if (v27)
              {
                v14 = v33;
                do
                {
                  v28 = *(_QWORD *)(v27 + 24);
                  if (v14 >= HIDWORD(v33))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v14 + 1, 8);
                    v14 = v33;
                  }
                  *((_QWORD *)v32 + v14) = v28;
                  v14 = v33 + 1;
                  LODWORD(v33) = v33 + 1;
                  v27 = *(_QWORD *)(v27 + 8);
                }
                while (v27);
                continue;
              }
            }
            else if (v18 == 62)
            {
              v19 = 32 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF);
              while (v19)
              {
                v20 = *(_QWORD *)(v15 + v19);
                v19 += 32;
                if (v20)
                  v21 = *(_BYTE *)(v20 + 16) == 16;
                else
                  v21 = 0;
                if (!v21)
                  goto LABEL_23;
              }
              *a4 = 0;
              v29 = *(_QWORD *)(v15 + 8);
              if (v29)
              {
                v14 = v33;
                do
                {
                  v30 = *(_QWORD *)(v29 + 24);
                  if (v14 >= HIDWORD(v33))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v14 + 1, 8);
                    v14 = v33;
                  }
                  *((_QWORD *)v32 + v14) = v30;
                  v14 = v33 + 1;
                  LODWORD(v33) = v33 + 1;
                  v29 = *(_QWORD *)(v29 + 8);
                }
                while (v29);
                continue;
              }
            }
          }
LABEL_47:
          v14 = v33;
          continue;
        }
        if (v17 != 5)
          goto LABEL_47;
        v22 = *(_QWORD *)(v15 + 8);
        if (v22)
        {
          v23 = 0;
          v24 = v22;
          do
          {
            ++v23;
            v24 = *(_QWORD *)(v24 + 8);
          }
          while (v24);
        }
        else
        {
          v23 = 0;
        }
        v25 = v23 + v16;
        if (v25 > HIDWORD(v33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v25, 8);
          v16 = v33;
          if (v22)
          {
LABEL_32:
            v26 = (char *)v32 + 8 * v16;
            do
            {
              *v26++ = *(_QWORD *)(v22 + 24);
              v22 = *(_QWORD *)(v22 + 8);
            }
            while (v22);
          }
        }
        else if (v22)
        {
          goto LABEL_32;
        }
        v14 = v16 + v23;
        LODWORD(v33) = v14;
      }
      while (v14);
    }
  }
  if (v32 != v34)
    free(v32);
}

uint64_t sub_1C5EAB358(int a1)
{
  uint64_t result;
  unsigned __int8 v3;
  int v4;

  result = 0x4000000010;
  if ((a1 - 1) >= 0xC)
  {
    v3 = atomic_load((unsigned __int8 *)&qword_1ED825DC0);
    if ((v3 & 1) == 0)
    {
      v4 = __cxa_guard_acquire(&qword_1ED825DC0);
      result = 0x4000000010;
      if (v4)
      {
        byte_1ED825DAA = 0;
        __cxa_guard_release(&qword_1ED825DC0);
        result = 0x4000000010;
      }
    }
    if (!byte_1ED825DAA)
      return 0x8000000020;
  }
  return result;
}

unint64_t sub_1C5EAB3E0(llvm::GlobalValue *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  llvm::GlobalValue *Section;
  unint64_t v12;
  size_t v13;
  llvm::GlobalValue *v14;
  void **p_dst;
  __int16 v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  std::string::size_type v24;
  const std::string::value_type *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  uint64_t NamedMetadata;
  uint64_t v38;
  llvm::UndefValue *AggregateElement;
  BOOL v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  llvm::GlobalValue *v48;
  uint64_t v49;
  uint64_t v54;
  int v55;
  llvm::GlobalValue *v56;
  uint64_t v57;
  BOOL v58;
  llvm::GlobalValue *v60;
  uint64_t v61;
  BOOL v62;
  BOOL v63;
  llvm::GlobalValue *v64;
  uint64_t v65;
  BOOL v66;
  BOOL v67;
  llvm::GlobalValue *v68;
  uint64_t v69;
  int v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v77;
  BOOL v78;
  unsigned int v79;
  uint64_t v80;
  int v83;
  std::string v84;
  __int16 v85;
  void **__dst;
  size_t v87;
  unint64_t v88;
  std::string v89;
  void *__p[2];
  std::string::size_type v91;

  v83 = HIDWORD(a4);
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 8) >> 8;
  if (v6 == 75 || v6 == 5)
  {
    v8 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)a1 + 5) + 112), "agc.ria.ray_data_driver_start", 0x1DuLL);
    v9 = !v8 || *(_BYTE *)(v8 + 16) != 3 || (*(_DWORD *)(v8 + 32) & 0xFu) - 7 <= 1;
    v10 = *((_QWORD *)a1 + 5);
    Section = llvm::GlobalValue::getSection(a1);
    *((_BYTE *)&v89.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v89, "agx.");
    if (!Section)
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      __dst = 0;
      v87 = 0;
      v88 = 0;
      goto LABEL_24;
    }
    v13 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v14 = Section;
    if (v12 >= 0x17)
    {
      v27 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v27 = v12 | 7;
      v28 = v27 + 1;
      p_dst = (void **)operator new(v27 + 1);
      v87 = v13;
      v88 = v28 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v88) = v12;
      p_dst = (void **)&__dst;
      if (!v12)
        goto LABEL_23;
    }
    memmove(p_dst, v14, v13);
LABEL_23:
    *((_BYTE *)p_dst + v13) = 0;
    v26 = HIBYTE(v88);
    v25 = (const std::string::value_type *)__dst;
    v24 = v87;
LABEL_24:
    v29 = v26 < 0;
    if (v26 >= 0)
      v30 = (const std::string::value_type *)&__dst;
    else
      v30 = v25;
    v31 = v26 & 0x7F;
    if (v29)
      v32 = v24;
    else
      v32 = v31;
    v33 = std::string::append(&v89, v30, v32);
    v34 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v84, ".offset");
    v36 = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v91 = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    if (SHIBYTE(v88) < 0)
      operator delete(__dst);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    v85 = 260;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    NamedMetadata = llvm::Module::getNamedMetadata(v10, (uint64_t)&v84);
    v38 = NamedMetadata;
    if (NamedMetadata)
    {
      AggregateElement = *(llvm::UndefValue **)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                                                          - 8
                                                          * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                                              + 128);
      if (AggregateElement)
        v40 = *((_BYTE *)AggregateElement + 16) == 16;
      else
        v40 = 0;
      if (!v40)
        AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
      v43 = (_DWORD *)*((_QWORD *)AggregateElement + 3);
      v41 = (_DWORD *)((char *)AggregateElement + 24);
      v42 = v43;
      if (v41[2] < 0x41u)
        v42 = v41;
      v44 = *v42 << 10;
    }
    else
    {
      v44 = 0;
    }
    if (SHIBYTE(v91) < 0)
    {
      operator delete(__p[0]);
      if (!v38)
        goto LABEL_50;
    }
    else if (!v38)
    {
LABEL_50:
      v45 = sub_1C5EAB358(v83);
      if (v9)
      {
        v46 = HIDWORD(v45);
        v47 = HIDWORD(v45) + 5680;
        v48 = llvm::GlobalValue::getSection(a1);
        switch(v49)
        {
          case 21:
            if (*(_QWORD *)v48 == 0x766972642E616972
              && *((_QWORD *)v48 + 1) == 0x6D617261705F7265
              && *(_QWORD *)((char *)v48 + 13) == 0x73726574656D6172)
            {
              v70 = v46 + 5664;
              goto LABEL_142;
            }
            v77 = *(_QWORD *)((char *)v48 + 13);
            v78 = *(_QWORD *)v48 == 0x5F7961722E616972 && *((_QWORD *)v48 + 1) == 0x6465646E65747865;
            v79 = 1600415076;
            break;
          case 19:
            v77 = *(_QWORD *)((char *)v48 + 11);
            v78 = *(_QWORD *)v48 == 0x5F7961722E616972 && *((_QWORD *)v48 + 1) == 0x645F726576697264;
            v79 = 1601332598;
            break;
          case 17:
            if (*(_QWORD *)v48 != 0x656B6F742E616972
              || *((_QWORD *)v48 + 1) != 0x7265666675625F6ELL
              || *((_BYTE *)v48 + 16) != 115)
            {
              if (*(_QWORD *)v48 != 0x5F7961722E616972
                || *((_QWORD *)v48 + 1) != 0x7461645F65726F63
                || *((_BYTE *)v48 + 16) != 97)
              {
                v54 = *(_QWORD *)v48 ^ 0x5F7961722E616972 | *((_QWORD *)v48 + 1) ^ 0x7461645F72657375 | *((unsigned __int8 *)v48 + 16) ^ 0x61;
                v55 = v46 + 7984;
                goto LABEL_97;
              }
              v70 = 32;
LABEL_142:
              v44 = v70 << 10;
              return a2 + v44;
            }
LABEL_135:
            v70 = 0;
            goto LABEL_142;
          default:
            goto LABEL_134;
        }
        v80 = v79 | 0x6174616400000000;
        if (v78 && v77 == v80)
        {
          v70 = v47;
          goto LABEL_142;
        }
        goto LABEL_134;
      }
      v56 = llvm::GlobalValue::getSection(a1);
      if (v57 == 19)
      {
        v58 = *(_QWORD *)v56 == 0x5F7961722E616972 && *((_QWORD *)v56 + 1) == 0x645F726576697264;
        if (v58 && *(_QWORD *)((char *)v56 + 11) == 0x617461645F726576)
          goto LABEL_146;
      }
      if ((v60 = llvm::GlobalValue::getSection(a1), v61 == 17)
        && (*(_QWORD *)v60 == 0x5F7961722E616972 ? (v62 = *((_QWORD *)v60 + 1) == 0x7461645F72657375) : (v62 = 0),
            v62 ? (v63 = *((_BYTE *)v60 + 16) == 97) : (v63 = 0),
            v63)
        || (v64 = llvm::GlobalValue::getSection(a1), v65 == 17)
        && (*(_QWORD *)v64 == 0x657478655F796172 ? (v66 = *((_QWORD *)v64 + 1) == 0x7461645F6465646ELL) : (v66 = 0),
            v66 ? (v67 = *((_BYTE *)v64 + 16) == 97) : (v67 = 0),
            v67))
      {
LABEL_146:
        llvm::report_fatal_error((llvm *)"ria.ray_driver_data/ray_user_data/ray_extended_data cannot be a constant address", (const char *)1);
      }
      v68 = llvm::GlobalValue::getSection(a1);
      if (v69 == 17)
      {
        if (*(_QWORD *)v68 != 0x656B6F742E616972
          || *((_QWORD *)v68 + 1) != 0x7265666675625F6ELL
          || *((_BYTE *)v68 + 16) != 115)
        {
          v70 = 32;
          if (*(_QWORD *)v68 ^ 0x5F7961722E616972 | *((_QWORD *)v68 + 1) ^ 0x7461645F65726F63 | *((unsigned __int8 *)v68 + 16) ^ 0x61)
            v70 = 0;
          goto LABEL_142;
        }
        goto LABEL_135;
      }
      if (v69 == 21)
      {
        v54 = *(_QWORD *)v68 ^ 0x766972642E616972 | *((_QWORD *)v68 + 1) ^ 0x6D617261705F7265 | *(_QWORD *)((char *)v68 + 13) ^ 0x73726574656D6172;
        v55 = 24;
LABEL_97:
        if (v54)
          v70 = 0;
        else
          v70 = v55;
        goto LABEL_142;
      }
LABEL_134:
      v70 = 0;
      goto LABEL_142;
    }
    return a2 + v44;
  }
  v16 = a4;
  v18 = (*(uint64_t (**)(uint64_t, llvm::GlobalValue *))(*(_QWORD *)a3 + 400))(a3, a1);
  v20 = v19;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 336))(a3);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(v21, v20);
  v23 = v22 * v18 + a2;
  if (v20 < 3)
  {
    v23 /= v22;
  }
  else if ((v20 - 15) >= 2)
  {
    if ((_DWORD)v20 == 17)
    {
      v71 = atomic_load((unsigned __int8 *)&qword_1ED825DB0);
      if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_1ED825DB0))
      {
        byte_1ED825DA8 = 0;
        __cxa_guard_release(&qword_1ED825DB0);
      }
      v72 = 65600;
      if (!byte_1ED825DA8)
        v72 = 0x10000;
      v23 += v72;
    }
  }
  else if ((v16 & 0x100) != 0)
  {
    v23 /= v22;
  }
  return v23;
}

uint64_t sub_1C5EABB48(uint64_t a1)
{
  uint64_t result;

  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), "agc.ria.ray_user_data", 0x15uLL);
  if (!result || *(_BYTE *)(result + 16) != 3 || (*(_DWORD *)(result + 32) & 0xFu) - 7 <= 1)
    return 0;
  return result;
}

uint64_t sub_1C5EABB98(uint64_t a1)
{
  uint64_t result;

  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), "agc.ria.ray_data_user_bound", 0x1BuLL);
  if (!result || *(_BYTE *)(result + 16) != 3 || (*(_DWORD *)(result + 32) & 0xFu) - 7 <= 1)
    return 0;
  return result;
}

uint64_t sub_1C5EABBE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v3 = sub_1C4FB7E80(*(uint64_t **)(v2 + 112), "agc.ria.ray_data_user_bound", 0x1BuLL);
  if (!v3 || (v4 = v3, *(_BYTE *)(v3 + 16) != 3) || (*(_DWORD *)(v3 + 32) & 0xFu) - 7 <= 1)
    v4 = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 400))(a1, v4);
  v7 = v6;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v7) * v5;
}

uint64_t sub_1C5EABC98(uint64_t a1)
{
  uint64_t result;

  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), "agc.ria.ray_data_driver_start", 0x1DuLL);
  if (!result || *(_BYTE *)(result + 16) != 3 || (*(_DWORD *)(result + 32) & 0xFu) - 7 <= 1)
    return 0;
  return result;
}

void sub_1C5EABCE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t j;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  int v19;
  unsigned int k;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[9];

  v28[8] = *MEMORY[0x1E0C80C00];
  v1 = a1 + 40;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 != a1 + 40)
  {
    v3 = v2 - 24;
    if (!v2)
      v3 = 0;
    if (*(_BYTE *)(v3 + 16) == 83)
    {
      for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v6 = *(_QWORD *)(i + 24);
        v7 = *(unsigned __int8 *)(v6 + 16);
        if (v6)
          v8 = v7 >= 0x1C;
        else
          v8 = 0;
        if (v8 && v7 - 29 < 0xB)
          break;
      }
      v26 = v28;
      v27 = 0x800000000;
      sub_1C4DBBCC0((unsigned int *)&v26, i, 0);
      for (j = *(_QWORD *)(a1 + 48); j != v1; j = *(_QWORD *)(j + 8))
      {
        v11 = j - 24;
        if (!j)
          v11 = 0;
        if (*(_BYTE *)(v11 + 16) != 83)
        {
          v12 = *(unsigned __int8 *)(j - 8) - 38;
          v13 = v12 > 0x38;
          v14 = (1 << v12) & 0x100060000000001;
          if (v13 || v14 == 0)
            v1 = j;
          else
            v1 = *(_QWORD *)(j + 8);
          break;
        }
      }
      while (v2 != v1)
      {
        v16 = v2 - 24;
        if (!v2)
          v16 = 0;
        v17 = *(unsigned __int8 *)(v16 + 16);
        v18 = v17 == 83 ? (_DWORD *)v16 : 0;
        if (!v2 || v17 != 83)
          break;
        v2 = *(_QWORD *)(v2 + 8);
        v19 = v18[5] & 0x7FFFFFF;
        if (v19)
        {
          for (k = 0; k != v19; ++k)
          {
            v21 = v18[5];
            if ((v21 & 0x40000000) != 0)
              v22 = (_DWORD *)*((_QWORD *)v18 - 1);
            else
              v22 = &v18[-8 * (v21 & 0x7FFFFFF)];
            if ((_DWORD)v27)
            {
              v23 = *(_QWORD *)&v22[8 * v18[15] + 2 * k];
              v24 = 8 * v27;
              v25 = (char *)v26;
              while (*(_QWORD *)v25 != v23)
              {
                v25 += 8;
                v24 -= 8;
                if (!v24)
                {
                  v25 = (char *)v26 + 8 * v27;
                  break;
                }
              }
            }
            else
            {
              v25 = (char *)v26;
            }
            if (v27 == (v25 - (_BYTE *)v26) >> 3)
            {
              llvm::PHINode::removeIncomingValue((llvm::PHINode *)v18, k--, 1);
              --v19;
            }
          }
        }
      }
      if (v26 != v28)
        free(v26);
    }
  }
}

uint64_t llvm::AGXIR::getShaderID(llvm::AGXIR *this, const llvm::Module *a2)
{
  uint64_t NamedMetadata;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  __int16 v19;

  v18 = "agxcompiler.config";
  v19 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)this, (uint64_t)&v18);
  if (NamedMetadata && (v3 = *(uint64_t **)(NamedMetadata + 48), v4 = *((unsigned int *)v3 + 2), (_DWORD)v4))
  {
    v5 = *v3;
    while (1)
    {
      v6 = (_QWORD *)(*(_QWORD *)v5 - 8 * *(unsigned int *)(*(_QWORD *)v5 + 8));
      if (!*(_BYTE *)*v6)
      {
        v7 = *(_QWORD **)(*v6 + 8);
        if (*v7 == 16)
        {
          v9 = v7[3];
          v8 = v7[4];
          if (v9 == 0x2E74736575716552 && v8 == 0x4449726564616853)
          {
            v11 = v6[1];
            if (*(_BYTE *)v11 == 1)
            {
              v12 = *(_QWORD *)(v11 + 128);
              if (*(_BYTE *)(v12 + 16) == 16)
                break;
            }
          }
        }
      }
      v5 += 8;
      if (!--v4)
        goto LABEL_16;
    }
    v16 = *(_DWORD *)(v12 + 32);
    if (v16 > 0x40)
      v17 = **(_QWORD **)(v12 + 24);
    else
      v17 = (uint64_t)(*(_QWORD *)(v12 + 24) << -(char)v16) >> -(char)v16;
    v14 = v17 & 0xFFFFFF00;
    v13 = v17;
    v4 = 0x100000000;
  }
  else
  {
    v4 = 0;
LABEL_16:
    v13 = 0;
    v14 = 0;
  }
  return v13 | v4 | v14;
}

double sub_1C5EAC020@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t NamedMetadata;
  double result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v15;
  unint64_t *v16;
  size_t v17;
  const void *v18;
  unint64_t v19;
  __int128 *p_dst;
  uint64_t v21;
  uint64_t v22;
  __int128 __dst;
  unint64_t v24;
  __int16 v25;

  *(_QWORD *)&__dst = "agxcompiler.config";
  v25 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)&__dst);
  if (!NamedMetadata || (v5 = *(uint64_t **)(NamedMetadata + 48), v6 = *((unsigned int *)v5 + 2), !(_DWORD)v6))
  {
LABEL_16:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return result;
  }
  v7 = *v5;
  while (1)
  {
    v8 = (_QWORD *)(*(_QWORD *)v7 - 8 * *(unsigned int *)(*(_QWORD *)v7 + 8));
    if (!*(_BYTE *)*v8)
    {
      v9 = *(_QWORD *)(*v8 + 8);
      if (*(_QWORD *)v9 == 18)
      {
        v10 = *(_QWORD *)(v9 + 24);
        v11 = *(_QWORD *)(v9 + 32);
        v12 = *(unsigned __int16 *)(v9 + 40);
        v13 = v10 == 0x2E74736575716552 && v11 == 0x7954726564616853;
        if (v13 && v12 == 25968)
        {
          v15 = v8[1];
          if (!*(_BYTE *)v15)
            break;
        }
      }
    }
    v7 += 8;
    if (!--v6)
      goto LABEL_16;
  }
  v16 = *(unint64_t **)(v15 + 8);
  v19 = *v16;
  v18 = v16 + 3;
  v17 = v19;
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v17 >= 0x17)
  {
    v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v21 = v17 | 7;
    v22 = v21 + 1;
    p_dst = (__int128 *)operator new(v21 + 1);
    *((_QWORD *)&__dst + 1) = v17;
    v24 = v22 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v24) = v17;
    p_dst = &__dst;
    if (!v17)
      goto LABEL_25;
  }
  memmove(p_dst, v18, v17);
LABEL_25:
  *((_BYTE *)p_dst + v17) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v24;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t llvm::AGXIR::getForwardProgressMode(llvm::AGXIR *this, const llvm::Module *a2)
{
  uint64_t NamedMetadata;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;

  v16 = "agxcompiler.config";
  v17 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)this, (uint64_t)&v16);
  if (!NamedMetadata || (v3 = *(uint64_t **)(NamedMetadata + 48), v4 = *((unsigned int *)v3 + 2), !(_DWORD)v4))
  {
LABEL_9:
    v9 = 0;
    v10 = 0;
    return v10 | v9;
  }
  v5 = *v3;
  while (1)
  {
    v6 = (_QWORD *)(*(_QWORD *)v5 - 8 * *(unsigned int *)(*(_QWORD *)v5 + 8));
    if (!*(_BYTE *)*v6)
    {
      v7 = *(_QWORD **)(*v6 + 8);
      if (*v7 == 35 && !memcmp(v7 + 3, "Request.Options.ForwardProgressMode", 0x23uLL))
      {
        v8 = v6[1];
        if (!*(_BYTE *)v8)
          break;
      }
    }
    v5 += 8;
    if (!--v4)
      goto LABEL_9;
  }
  v12 = *(_QWORD *)(v8 + 8);
  if (*(_QWORD *)v12 != 17)
  {
    if (*(_QWORD *)v12 == 4 && *(_DWORD *)(v12 + 24) == 1801545047)
    {
      v10 = 0;
      v9 = 0x100000000;
      return v10 | v9;
    }
    goto LABEL_9;
  }
  v13 = 0x53494D4447726F75;
  v14 = bswap64(*(_QWORD *)(v12 + 24));
  if (v14 == 0x53494D4447726F75
    && (v13 = 0x70506172616C6C65, v14 = bswap64(*(_QWORD *)(v12 + 32)), v14 == 0x70506172616C6C65))
  {
    v15 = *(unsigned __int8 *)(v12 + 40) - 108;
  }
  else if (v14 < v13)
  {
    v15 = -1;
  }
  else
  {
    v15 = 1;
  }
  v10 = v15 == 0;
  v9 = v10 << 32;
  return v10 | v9;
}

_QWORD *sub_1C5EAC2F8(uint64_t **a1, unsigned int a2, int a3)
{
  uint64_t *v6;
  size_t v7;
  char *v8;
  const llvm::APInt *v9;
  llvm::ValueHandleBase *v10;
  llvm::Value *v11;
  uint64_t inserted;
  unsigned __int8 *Impl;
  unsigned __int8 *v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  char v20[4];
  unsigned int v21;
  char v22;
  unsigned __int8 *v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  sub_1C5EAE59C((uint64_t)a1, a3, (uint64_t)v20);
  v6 = *a1;
  v19 = 32;
  v18 = a2;
  if (a3)
    v7 = 18;
  else
    v7 = 14;
  if (a3)
    v8 = "min-temp-reg-limit";
  else
    v8 = "temp-reg-limit";
  v24[0] = llvm::MDString::get(v6, (unsigned __int8 *)v8, v7);
  v10 = llvm::ConstantInt::get((llvm::ConstantInt *)v6, (llvm::LLVMContext *)&v18, v9);
  v24[1] = llvm::ValueAsMetadata::get(v10, v11);
  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)a1, "agx.unified.store.limits", 0x18uLL);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v6, v24, 2, 0, 1);
  v14 = Impl;
  if (v22)
  {
    result = sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(inserted + 48) + 8 * v21), Impl);
  }
  else
  {
    v23 = Impl;
    v16 = *(_QWORD *)(inserted + 48);
    v17 = *(unsigned int *)(v16 + 8);
    if (v17 >= *(_DWORD *)(v16 + 12))
    {
      result = (_QWORD *)sub_1C5419FD8(v16, &v23);
    }
    else
    {
      result = (_QWORD *)(*(_QWORD *)v16 + 8 * v17);
      *result = v14;
      if (v14)
      {
        result = (_QWORD *)llvm::MetadataTracking::track((uint64_t)result, v14, 2);
        LODWORD(v17) = *(_DWORD *)(v16 + 8);
      }
      *(_DWORD *)(v16 + 8) = v17 + 1;
    }
  }
  if (v19 >= 0x41)
  {
    result = (_QWORD *)v18;
    if (v18)
      return (_QWORD *)MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C5EAC480(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 1282;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 256:
    case 257:
    case 258:
    case 259:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 336:
    case 337:
    case 338:
    case 339:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 362:
    case 363:
    case 372:
    case 373:
    case 374:
    case 375:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 398:
    case 399:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C5EAC4B0(int a1)
{
  char v2;
  _BOOL4 v3;

  v2 = sub_1C5EAC480(a1);
  v3 = (a1 - 2449) < 2 || (a1 - 1990) < 2;
  return (v2 & 1) != 0 || v3;
}

uint64_t sub_1C5EAC4F8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t j;
  int v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  _DWORD v15[26];
  void *v16;
  uint64_t v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x1000000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    LODWORD(v4) = 0;
    do
    {
      if (v4 >= HIDWORD(v17))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v4 + 1, 8);
        LODWORD(v4) = v17;
      }
      *((_QWORD *)v16 + v4) = v2;
      v4 = (v17 + 1);
      LODWORD(v17) = v17 + 1;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
    while ((_DWORD)v4)
    {
      v5 = (_QWORD *)*((_QWORD *)v16 + v4 - 1);
      v4 = (v4 - 1);
      LODWORD(v17) = v4;
      v6 = v5[3];
      v7 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
        v8 = v7 == 5;
      else
        v8 = 0;
      if (v8)
      {
        v10 = *(unsigned __int16 *)(v6 + 18);
        if (v10 == 49 || v10 == 34)
        {
          for (i = *(_QWORD *)(v6 + 8); i; i = *(_QWORD *)(i + 8))
          {
            if (v4 >= HIDWORD(v17))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v4 + 1, 8);
              LODWORD(v4) = v17;
            }
            *((_QWORD *)v16 + v4) = i;
            v4 = (v17 + 1);
            LODWORD(v17) = v17 + 1;
          }
        }
      }
      else if (v6 && v7 == 77)
      {
        for (j = *(_QWORD *)(v6 + 8); j; j = *(_QWORD *)(j + 8))
        {
          if (v4 >= HIDWORD(v17))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v4 + 1, 8);
            LODWORD(v4) = v17;
          }
          *((_QWORD *)v16 + v4) = j;
          v4 = (v17 + 1);
          LODWORD(v17) = v17 + 1;
        }
      }
      else if (v7 == 84)
      {
        v12 = *(_QWORD *)(v6 - 32);
        if (v12)
        {
          if (!*(_BYTE *)(v12 + 16)
            && *(_QWORD *)(v12 + 24) == *(_QWORD *)(v6 + 72)
            && (*(_BYTE *)(v12 + 33) & 0x20) != 0)
          {
            v13 = *(_DWORD *)(v12 + 36);
            if (sub_1C47860D0(v13) || (v13 - 1682) <= 0x8B)
            {
              v4 = 1;
              if (!a2)
                break;
              llvm::SampleInfo::SampleInfo((uint64_t)v15, v13, 1);
              if (*(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32 * v15[9]) == *v5)
                break;
              v4 = v17;
            }
          }
        }
      }
    }
  }
  else
  {
    v4 = 0;
  }
  if (v16 != v18)
    free(v16);
  return v4;
}

uint64_t sub_1C5EAC778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t i;
  uint64_t v8;
  int PointerSize;

  v5 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) + 4);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 440))(a2);
  for (i = *(_QWORD *)(a3 + 16); i != a3 + 8; i = *(_QWORD *)(i + 8))
  {
    v8 = i - 56;
    if (!i)
      v8 = 0;
    if ((*(_DWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFF00) == 0x200 && (*(_BYTE *)(v8 + 80) & 2) == 0)
    {
      if (i && *(_BYTE *)(v8 + 16) == 3)
      {
        if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_15;
      }
      else if (*(_BYTE *)(v8 + 16) || *(_QWORD *)(v8 + 72) != v8 + 72 || (*(_BYTE *)(v8 + 34) & 0x80) != 0)
      {
LABEL_15:
        PointerSize = llvm::DataLayout::getPointerSize((llvm::DataLayout *)(a3 + 272), 2u);
        return (v5 - (v6 + PointerSize));
      }
    }
  }
  PointerSize = 0;
  return (v5 - (v6 + PointerSize));
}

uint64_t sub_1C5EAC85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 128))(&v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(&v20, a1, a2);
  v7 = v20;
  v6 = v21;
  if (v21)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v21 + 16))(&v21, v21);
    v8 = v21;
  }
  else
  {
    v8 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 16))(&v21, v7);
  v9 = v21;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v9) & 1) == 0)
  {
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 400))(a1, *v10);
    v12 = v11;
    v14 = v13;
    v15 = HIDWORD(v11);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v14);
    v18 = (v15 + v17 - 1) / v17 + v12;
    if (a3 <= v18)
      a3 = v18;
    else
      a3 = a3;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  }
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a3;
}

uint64_t sub_1C5EAC9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  int v36;
  unsigned int v37;
  _QWORD v38[2];
  int v39;
  void *__p;
  void *v41;
  uint64_t v42;
  uint64_t v43;

  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  v41 = 0;
  v42 = 0;
  __p = 0;
  sub_1C5E9D34C(a1, (uint64_t)v38);
  sub_1C5E9D674(a1, (uint64_t)v38, 0);
  v4 = a1 + 8;
  for (i = *(_QWORD *)(a1 + 16); i != v4; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v6 = i - 56;
    else
      v6 = 0;
    if ((*(_BYTE *)(v6 + 34) & 0x40) == 0)
      continue;
    v7 = ***(_QWORD ***)v6;
    v43 = v6;
    v8 = *(_DWORD *)(v7 + 2520);
    if (v8)
    {
      v9 = *(_QWORD *)(v7 + 2504);
      v10 = v8 - 1;
      v11 = v10 & ((v6 >> 4) ^ (v6 >> 9));
      v12 = (_QWORD *)(v9 + 24 * v11);
      v13 = *v12;
      if (*v12 == v6)
        goto LABEL_8;
      v20 = 0;
      v21 = 1;
      while (v13 != -4096)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v13 == -8192;
        if (v22)
          v20 = v12;
        v23 = v11 + v21++;
        v11 = v23 & v10;
        v12 = (_QWORD *)(v9 + 24 * v11);
        v13 = *v12;
        if (*v12 == v6)
          goto LABEL_8;
      }
      if (v20)
        v28 = v20;
      else
        v28 = v12;
    }
    else
    {
      v28 = 0;
    }
    v12 = sub_1C53D65B8(v7 + 2504, (uint64_t)&v43, &v43, v28);
    v29 = v43;
    v12[1] = 0;
    v12[2] = 0;
    *v12 = v29;
LABEL_8:
    if (v12[2] == 17)
    {
      v14 = (uint64_t *)v12[1];
      v15 = *v14;
      v16 = v14[1];
      v17 = *((unsigned __int8 *)v14 + 16);
      v18 = v15 == 0x705F726576697264 && v16 == 0x726574656D617261;
      if (v18 && v17 == 115)
      {
        v43 = v6;
        v24 = sub_1C5E9D498((uint64_t)v38, &v43);
        v25 = *(_QWORD *)(*(_QWORD *)v24 - 8 * *(unsigned int *)(*(_QWORD *)v24 + 8) + 8);
        if (v25)
        {
          if (*(_BYTE *)v25 == 1)
          {
            v26 = *(_QWORD *)(v25 + 128);
            if (*(_BYTE *)(v26 + 16) == 16)
            {
              v27 = (_QWORD *)(v26 + 24);
              if (*(_DWORD *)(v26 + 32) >= 0x41u)
                v27 = (_QWORD *)*v27;
              if (*v27 == 43)
              {
                v35 = 0;
                v36 = 0;
                v37 = 0;
                goto LABEL_40;
              }
            }
          }
        }
      }
    }
  }
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 336))(a2);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 24))(v30, 17);
  v32 = sub_1C5EAC85C(a2, 13, 0);
  v33 = sub_1C5EAC85C(a2, 12, v32) * v31;
  v37 = v33 & 0xFFFFFF00;
  v36 = v33;
  v35 = 0x100000000;
LABEL_40:
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v38[0], 8);
  return v35 | v37 | v36;
}

unsigned __int8 *sub_1C5EACC80(llvm::Loop *a1)
{
  unsigned __int8 *result;
  uint64_t v2;
  unsigned int *v3;

  result = (unsigned __int8 *)llvm::Loop::getLoopID(a1);
  if (result)
  {
    result = llvm::GetUnrollMetadata((uint64_t)result, "llvm.loop.unroll.count", 0x16uLL);
    if (result)
    {
      v2 = *(_QWORD *)(*(_QWORD *)&result[-8 * *((unsigned int *)result + 2) + 8] + 128);
      v3 = (unsigned int *)(v2 + 24);
      if (*(_DWORD *)(v2 + 32) >= 0x41u)
        v3 = *(unsigned int **)v3;
      return (unsigned __int8 *)*v3;
    }
  }
  return result;
}

void sub_1C5EACCD4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  BOOL v4;
  int *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *__s;
  __int128 v16;
  _BYTE v17[32];
  int v18[4];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v19 = xmmword_1C85F4BB0;
  v20 = 0;
  __s = v17;
  v16 = xmmword_1C677F680;
  v3 = *(_BYTE *)(a1 + 23);
  v4 = v3 < 0;
  if (v3 >= 0)
    v5 = (int *)a1;
  else
    v5 = *(int **)a1;
  v6 = v3 & 0x7F;
  if (v4)
    v7 = *(_QWORD *)(a1 + 8);
  else
    v7 = v6;
  llvm::MD5::update((int *)&v19, v5, v7);
  llvm::MD5::final((int *)&v19, v18);
  llvm::MD5::stringifyResult((unsigned __int8 *)v18, &__s);
  v8 = v16;
  if ((unint64_t)(v16 + 1) > *((_QWORD *)&v16 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__s, v17, v16 + 1, 1);
    v8 = v16;
  }
  __s[v8] = 0;
  v9 = __s;
  v10 = strlen(__s);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v14 = operator new(v12 + 1);
    a2[1] = v11;
    a2[2] = v13 | 0x8000000000000000;
    *a2 = v14;
    a2 = v14;
    goto LABEL_16;
  }
  *((_BYTE *)a2 + 23) = v10;
  if (v10)
LABEL_16:
    memmove(a2, v9, v11);
  *((_BYTE *)a2 + v11) = 0;
  if (__s != v17)
    free(__s);
}

_QWORD *sub_1C5EACE4C@<X0>(const std::string *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  void (**v3)(llvm::raw_ostream *__hidden);
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = 0;
  v8 = 0;
  v9 = 0;
  v3 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v11 = a2;
  v10 = 0;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  result = llvm::Module::print(a1, (llvm::raw_ostream *)&v3, 0, 0, 0);
  v3 = off_1E81A6E70;
  if (v10 == 1)
  {
    result = v5;
    if (v5)
      return (_QWORD *)MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924);
  }
  return result;
}

uint64_t sub_1C5EACEE8(llvm::Instruction *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int8 *)this + 16);
  if (this && v5 >= 0x1C)
  {
    result = 1;
    if (v5 > 59)
    {
      v8 = v5 - 61;
      if ((v5 - 61) <= 0x1B)
      {
        if (((1 << v8) & 0x18) != 0)
          return result;
        if (v5 == 84)
        {
          v9 = *((_QWORD *)this - 4);
          if (v9
            && !*(_BYTE *)(v9 + 16)
            && *(_QWORD *)(v9 + 24) == *((_QWORD *)this + 9)
            && (*(_BYTE *)(v9 + 33) & 0x20) != 0)
          {
            if ((sub_1C5E9DACC((uint64_t)this, 20) & 1) == 0)
            {
              v24 = *(_DWORD *)(v9 + 36);
              result = sub_1C5E9DC10(v24);
              if (!(_DWORD)result)
                return result;
              if ((v24 - 2670) >= 6 && v24 != 2587)
                return 1;
            }
            return 0;
          }
          goto LABEL_11;
        }
        if (((1 << v8) & 0x8080005) != 0)
          return 1;
      }
      if (v5 == 60)
      {
        v14 = *((_QWORD *)this - 4);
        v15 = *(_DWORD *)(*(_QWORD *)v14 + 8);
        if ((v15 & 0xFE) == 0x12)
          v15 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v14 + 16) + 8);
        if ((v15 & 0xFFFFFF00) == 0x300)
        {
          if (!a4 || *(_DWORD *)(a4 + 20) == *(_DWORD *)(a4 + 24))
            return 0;
          v35 = v37;
          v36 = 0x400000000;
          llvm::getUnderlyingObjects(v14, (uint64_t)&v35, 0, (llvm::Value *)6);
          v16 = (uint64_t *)v35;
          if ((_DWORD)v36)
          {
            v17 = 8 * v36;
            while (1)
            {
              if (*(_BYTE *)(*v16 + 16) == 3)
              {
                v18 = sub_1C477672C(a4, *v16);
                v19 = *(_QWORD *)(a4 + 8);
                v20 = v19 == *(_QWORD *)a4 ? 20 : 16;
                if (v18 != (_QWORD *)(v19 + 8 * *(unsigned int *)(a4 + v20)))
                  break;
              }
              ++v16;
              v17 -= 8;
              if (!v17)
              {
                v21 = 1;
                goto LABEL_67;
              }
            }
            v21 = 0;
LABEL_67:
            v16 = (uint64_t *)v35;
          }
          else
          {
            v21 = 1;
          }
          if (v16 != v37)
            free(v16);
          if (!v21)
            return 1;
        }
        return v15 < 0x100;
      }
      goto LABEL_46;
    }
    if (v5 > 58)
      return result;
    if (v5 == 37)
      return 1;
    if (v5 != 33 && v5 != 39)
    {
LABEL_46:
      if ((llvm::Instruction::mayThrow(this) & 1) != 0 || !llvm::Instruction::willReturn(this))
        return 1;
      result = 0;
      v22 = *((unsigned __int8 *)this + 16) - 33;
      if (v22 > 0x37)
        return result;
      if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x8000000000041) != 0)
      {
        v23 = *((_QWORD *)this + 8);
        if (!v23 || (*(_BYTE *)(v23 + 20) & 4) == 0 && (*(_BYTE *)(v23 + 17) & 0x10) == 0)
        {
          LODWORD(v35) = 7;
          if (sub_1C53E4BBC((uint64_t)this, (__int32 *)&v35, 1uLL))
          {
            v34 = *((_QWORD *)this - 4);
            if (!v34
              || *(_BYTE *)(v34 + 16)
              || *(_QWORD *)(v34 + 24) != *((_QWORD *)this + 9)
              || *(_DWORD *)(v34 + 36) != 7)
            {
              return 1;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) & 1) == 0)
          {
            return 1;
          }
        }
      }
      else
      {
        if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x808001C8000010) != 0)
          return 1;
        if (v22 != 28)
          return result;
        if ((*((_WORD *)this + 9) & 0x301) != 0)
          return 1;
      }
      return 0;
    }
LABEL_11:
    v10 = *((_QWORD *)this + 8);
    if (!v10 || (*(_BYTE *)(v10 + 17) & 0x30) == 0)
    {
      v11 = *((_DWORD *)this + 5);
      if (v11 < 0)
      {
        v25 = (char *)this - 32 * (v11 & 0x7FFFFFF);
        v28 = *((_QWORD *)v25 - 1);
        v26 = v25 - 8;
        v27 = v28;
        if (v28)
        {
          v29 = -v27;
          do
          {
            v30 = *(_DWORD *)(*(_QWORD *)&v26[v29] + 8);
            v31 = v30 > 7;
            v32 = (1 << v30) & 0x83;
            if (v31 || v32 == 0)
              return 1;
            v29 += 16;
          }
          while (v29);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
      {
        return 1;
      }
    }
    goto LABEL_46;
  }
  result = 1;
  if (this && v5 <= 3)
  {
    v12 = *(_DWORD *)(*(_QWORD *)this + 8) >> 8;
    return v12 != 64 && v12 != 2;
  }
  return result;
}

BOOL sub_1C5EAD2F0(llvm::Module *a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4, int *a5, _DWORD *a6)
{
  _QWORD *v12;
  void (**v13)(_QWORD *);
  int v14;
  int *v15;
  unsigned int v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  BOOL v22;
  int *v23;
  unsigned int v24;
  int *v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  unsigned int v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (llvm::Module::getPICLevel(a1))
    return 0;
  v34[0] = &off_1E81A88F0;
  v35 = v34;
  sub_1C5EAD518((uint64_t)a1, (uint64_t)v34, a3, a5, a6);
  v12 = v35;
  if (v35 == v34)
  {
    v13 = (void (**)(_QWORD *))(v34[0] + 32);
    v12 = v34;
LABEL_4:
    (*v13)(v12);
    goto LABEL_5;
  }
  if (v35)
  {
    v13 = (void (**)(_QWORD *))(*v35 + 40);
    goto LABEL_4;
  }
LABEL_5:
  v14 = *a5;
  if (*a5 <= 1)
  {
    if (v14)
    {
      v15 = a5 + 2;
      v16 = 4;
    }
    else
    {
      v15 = (int *)*((_QWORD *)a5 + 1);
      v16 = a5[4];
    }
    v17 = &v15[14 * v16];
    goto LABEL_9;
  }
  if ((v14 & 1) != 0)
  {
    v17 = a5 + 2;
    v18 = a5 + 58;
    goto LABEL_30;
  }
  v17 = (int *)*((_QWORD *)a5 + 1);
  v33 = a5[4];
  if (v33)
  {
    v18 = &v17[14 * v33];
LABEL_30:
    v14 = *a5 & 1;
    while (*(_QWORD *)v17 == -4096 || *(_QWORD *)v17 == -8192)
    {
      v17 += 14;
      if (v17 == v18)
      {
        v17 = v18;
        goto LABEL_10;
      }
    }
    goto LABEL_10;
  }
  v14 = 0;
LABEL_9:
  v18 = v17;
LABEL_10:
  v21 = (int *)*((_QWORD *)a5 + 1);
  v20 = a5 + 2;
  v19 = v21;
  v22 = v14 == 0;
  if (v14)
    v23 = v20;
  else
    v23 = v19;
  v24 = v20[2];
  if (!v22)
    v24 = 4;
  v25 = &v23[14 * v24];
LABEL_16:
  while (v17 != v25)
  {
    v27 = v17[10];
    if ((_DWORD)v27)
    {
      v28 = (uint64_t *)*((_QWORD *)v17 + 4);
      v29 = 8 * v27;
      do
      {
        v30 = *v28++;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v30);
        sub_1C4774094(a4, v31);
        v29 -= 8;
      }
      while (v29);
    }
    v32 = v17 + 14;
    v17 = v18;
    if (v32 != v18)
    {
      v17 = v32;
      while (*(_QWORD *)v17 == -4096 || *(_QWORD *)v17 == -8192)
      {
        v17 += 14;
        if (v17 == v18)
        {
          v17 = v18;
          goto LABEL_16;
        }
      }
    }
  }
  return *((_DWORD *)a4 + 5) != *((_DWORD *)a4 + 6);
}

void sub_1C5EAD518(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[64];
  void *v53;
  uint64_t v54;
  _QWORD v55[6];

  v55[4] = *MEMORY[0x1E0C80C00];
  v8 = a1 + 8;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 != a1 + 8)
  {
    do
    {
      if (v9)
        v11 = v9 - 56;
      else
        v11 = 0;
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        sub_1C485C2F0();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, v11))
      {
        v13 = *(unsigned int *)(a3 + 8);
        if (v13 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v13 + 1, 8);
          v13 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = v11;
        ++*(_DWORD *)(a3 + 8);
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9 != v8);
  }
  v14 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v14)
  {
    v15 = *(uint64_t **)a3;
    v16 = *(_QWORD *)a3 + 8 * v14;
    do
    {
      v17 = *v15;
      v48 = v17;
      if (!*(_QWORD *)(v17 + 8))
        goto LABEL_79;
      if (*(_BYTE *)(v17 + 16))
      {
        if (*(_BYTE *)(v17 + 16) != 3 || (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_21;
      }
      else if (*(_QWORD *)(v17 + 72) != v17 + 72 || (*(_BYTE *)(v17 + 34) & 0x80) != 0)
      {
LABEL_21:
        v18 = *(_QWORD *)(v17 + 24);
        goto LABEL_22;
      }
      v18 = *(_QWORD *)v17;
LABEL_22:
      sub_1C4768AD0(a1 + 272, v18);
      v21 = (unint64_t)(v20 + 7) >> 3;
      if ((_DWORD)v19 == 1)
      *a5 += v21;
      v53 = v55;
      v54 = 0x400000000;
      v22 = sub_1C563A038(a4, &v48);
      v23 = *(_QWORD *)(v48 + 8);
      v50 = v52;
      v51 = 0x800000000;
      if (v23)
      {
        v24 = -1;
        v25 = v23;
        do
        {
          v25 = *(_QWORD *)(v25 + 8);
          ++v24;
        }
        while (v25);
        v26 = v24 + 1;
        if (v24 >= 8)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v24 + 1, 8);
          v27 = v51;
          v29 = v50;
          v28 = v51;
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v29 = v52;
        }
        v30 = &v29[8 * v27];
        do
        {
          *v30++ = *(_QWORD *)(v23 + 24);
          v23 = *(_QWORD *)(v23 + 8);
        }
        while (v23);
      }
      else
      {
        v28 = 0;
        v26 = 0;
      }
      LODWORD(v31) = v28 + v26;
      LODWORD(v51) = v31;
      if ((_DWORD)v31)
      {
        v32 = v22 + 1;
        while (1)
        {
          v33 = *((_QWORD *)v50 + v31 - 1);
          v31 = (v31 - 1);
          LODWORD(v51) = v31;
          v34 = *(unsigned __int8 *)(v33 + 16);
          if (!v33 || v34 > 0x14)
            break;
          if (v34 >= 4)
          {
            v42 = *(_QWORD *)(v33 + 8);
            if (v42)
            {
              v43 = 0;
              v44 = *(_QWORD *)(v33 + 8);
              do
              {
                ++v43;
                v44 = *(_QWORD *)(v44 + 8);
              }
              while (v44);
            }
            else
            {
              v43 = 0;
            }
            v45 = v43 + v31;
            if (v45 > HIDWORD(v51))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v45, 8);
              v31 = v51;
              if (v42)
                goto LABEL_65;
            }
            else if (v42)
            {
LABEL_65:
              v46 = (char *)v50 + 8 * v31;
              do
              {
                *v46++ = *(_QWORD *)(v42 + 24);
                v42 = *(_QWORD *)(v42 + 8);
              }
              while (v42);
            }
            LODWORD(v31) = v31 + v43;
            LODWORD(v51) = v31;
          }
LABEL_68:
          if (!(_DWORD)v31)
            goto LABEL_75;
        }
        if (v33)
          v36 = v34 >= 0x1C;
        else
          v36 = 0;
        if (!v36)
          goto LABEL_68;
        v37 = *(_QWORD *)(*(_QWORD *)(v33 + 40) + 56);
        v49 = 0;
        if ((sub_1C5EAE72C((uint64_t)(v22 + 1), v37, &v49) & 1) == 0)
        {
          if ((*v32 & 1) != 0)
            v38 = 1;
          else
            v38 = *((_DWORD *)v22 + 6);
          v39 = *v32 >> 1;
          if (4 * v39 + 4 >= 3 * v38)
          {
            v38 *= 2;
            goto LABEL_50;
          }
          if (v38 + ~v39 - *((_DWORD *)v22 + 3) <= v38 >> 3)
          {
LABEL_50:
            sub_1C5EAE7D8((uint64_t)(v22 + 1), v38);
            v49 = 0;
            sub_1C5EAE72C((uint64_t)(v22 + 1), v37, &v49);
          }
          v40 = v49;
          *v32 += 2;
          if (*v40 != -4096)
            --*((_DWORD *)v22 + 3);
          *v40 = v37;
          v41 = *((unsigned int *)v22 + 10);
          if (v41 >= *((unsigned int *)v22 + 11))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v22 + 4), (uint64_t)(v22 + 6), v41 + 1, 8);
            v41 = *((unsigned int *)v22 + 10);
          }
          *(_QWORD *)(v22[4] + 8 * v41) = v37;
          ++*((_DWORD *)v22 + 10);
        }
        LODWORD(v31) = v51;
        goto LABEL_68;
      }
LABEL_75:
      if (v50 != v52)
        free(v50);
      if (v53 != v55)
        free(v53);
LABEL_79:
      ++v15;
    }
    while (v15 != (uint64_t *)v16);
  }
}

_QWORD *sub_1C5EAD984(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _QWORD *result;
  uint64_t (**v4)(_QWORD *);
  int v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E81A8938;
  v7 = v6;
  sub_1C5EAD518(a1, (uint64_t)v6, a2, a3, &v5);
  result = v7;
  if (v7 == v6)
  {
    v4 = (uint64_t (**)(_QWORD *))(v6[0] + 32);
    result = v6;
    return (_QWORD *)(*v4)(result);
  }
  if (v7)
  {
    v4 = (uint64_t (**)(_QWORD *))(*v7 + 40);
    return (_QWORD *)(*v4)(result);
  }
  return result;
}

void sub_1C5EADA2C(uint64_t a1, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v3;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;

  v3 = *((_QWORD *)a2 + 1);
  while (v3)
  {
    v7 = *(_QWORD *)(v3 + 24);
    v3 = *(_QWORD *)(v3 + 8);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7)
      v9 = v8 >= 0x1C;
    else
      v9 = 0;
    if (v9 && v8 != 83 && *(_QWORD *)(v7 + 40) == a1)
      llvm::User::replaceUsesOfWith((llvm::User *)v7, a2, a3);
  }
}

uint64_t sub_1C5EADA98(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v26[9];

  if (a4 > 5)
    return 0;
  v26[7] = v4;
  v26[8] = v5;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return 1;
  v11 = a4 + 1;
  while (1)
  {
    v12 = *(_QWORD *)(v8 + 24);
    v24 = v12;
    v13 = *(unsigned __int8 *)(v12 + 16);
    if ((v13 - 73) <= 1)
      break;
    if (v13 != 44 && v13 != 42)
      return 0;
    v25 = v26;
    v26[0] = 0;
    v17 = !sub_1C4E7B6EC(&v25, v12) || v26[0] == 0;
    if (!v17 || *(unsigned __int8 *)(v24 + 17) < 0xFEu)
      return 0;
    if ((a2 & 1) != 0 || *(_BYTE *)(*(_QWORD *)v24 + 8) == 2)
    {
      v18 = *(_DWORD *)(v24 + 20);
      v19 = (v18 & 0x40000000) != 0 ? *(_QWORD **)(v24 - 8) : (_QWORD *)(v24 - 32 * (v18 & 0x7FFFFFF));
      v20 = v19[4 * (*v19 == a1)];
      v21 = *(unsigned __int8 *)(v20 + 16);
      if (v20 && v21 >= 0x1C)
      {
        if (v21 != 84)
          goto LABEL_35;
        v23 = *(_QWORD *)(v20 - 32);
        if (v23)
        {
          if (!*(_BYTE *)(v23 + 16) && *(_QWORD *)(v23 + 24) == *(_QWORD *)(v20 + 72))
          {
            if ((*(_BYTE *)(v23 + 33) & 0x20) != 0)
              v23 = v20;
            else
              v23 = 0;
          }
          else
          {
LABEL_35:
            v23 = 0;
          }
        }
        if (v20 != v24
          && *(_QWORD *)(v20 + 40) == *(_QWORD *)(v24 + 40)
          && (v21 == 46 || v21 == 49 || v23 && *(_DWORD *)(*(_QWORD *)(v23 - 32) + 36) == 280))
        {
          return 0;
        }
      }
    }
LABEL_42:
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      return 1;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if (!v14)
    goto LABEL_51;
  v15 = -2;
  do
  {
    v16 = v15;
    if (!v15)
      break;
    v14 = *(_QWORD *)(v14 + 8);
    ++v15;
  }
  while (v14);
  if (v16)
  {
LABEL_51:
    if (sub_1C5EADA98(v12, a2, a3, v11))
    {
      sub_1C4E7C77C(a3, &v24);
      goto LABEL_42;
    }
  }
  return 0;
}

uint64_t sub_1C5EADC74(llvm::Instruction *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t *v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  llvm::Value *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::ValueSymbolTable *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  _QWORD v44[2];
  int v45;

  v3 = *((_QWORD *)this + 5);
  v44[0] = 0;
  v44[1] = 0;
  v45 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4;
      v8 = (_QWORD *)(v4 + 8);
      v4 = *(_QWORD *)(v4 + 8);
      v9 = v8[2];
      v10 = *(_QWORD *)(v9 + 40);
      v43 = v10;
      if (v9 && *(_BYTE *)(v9 + 16) == 83)
      {
        if (!a2)
          goto LABEL_48;
        v11 = *(_DWORD *)(v9 + 20);
        if ((v11 & 0x40000000) != 0)
          v12 = *(_QWORD *)(v9 - 8);
        else
          v12 = v9 - 32 * (v11 & 0x7FFFFFF);
        v10 = *(_QWORD *)(v12
                        + 32 * *(unsigned int *)(v9 + 60)
                        + 8 * ((unint64_t)(v7 - v12) >> 5));
        v43 = v10;
      }
      if (v10 != v3)
      {
        if (v45)
        {
          v13 = (v45 - 1) & ((v10 >> 4) ^ (v10 >> 9));
          v14 = (_QWORD *)(v44[0] + 16 * v13);
          v15 = *v14;
          if (v10 != *v14)
          {
            v16 = 0;
            v17 = 1;
            while (v15 != -4096)
            {
              if (v16)
                v18 = 0;
              else
                v18 = v15 == -8192;
              if (v18)
                v16 = v14;
              v19 = v13 + v17++;
              v13 = v19 & (v45 - 1);
              v14 = (_QWORD *)(v44[0] + 16 * v13);
              v15 = *v14;
              if (v10 == *v14)
                goto LABEL_27;
            }
            if (v16)
              v20 = v16;
            else
              v20 = v14;
LABEL_26:
            v14 = sub_1C4775118((uint64_t)v44, (uint64_t)&v43, &v43, v20);
            *v14 = v43;
            v14[1] = 0;
          }
LABEL_27:
          v21 = v14[1];
          if (!v21)
          {
            v22 = (uint64_t *)(v43 + 40);
            for (i = *(uint64_t **)(v43 + 48); i != v22; i = (uint64_t *)i[1])
            {
              v24 = i - 3;
              if (!i)
                v24 = 0;
              if (*((_BYTE *)v24 + 16) != 83)
              {
                v25 = *((unsigned __int8 *)i - 8) - 38;
                v26 = v25 > 0x38;
                v27 = (1 << v25) & 0x100060000000001;
                if (v26 || v27 == 0)
                  v22 = i;
                else
                  v22 = (uint64_t *)i[1];
                break;
              }
            }
            llvm::Instruction::clone(this);
            v30 = (llvm::Value *)v29;
            v14[1] = v29;
            v31 = v43;
            *(_QWORD *)(v29 + 40) = v43;
            *(_WORD *)(v31 + 18) &= ~0x8000u;
            if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
            {
              v38 = *(_QWORD *)(v31 + 56);
              if (v38)
              {
                v39 = *(llvm::ValueSymbolTable **)(v38 + 104);
                if (v39)
                  llvm::ValueSymbolTable::reinsertValue(v39, v30);
              }
            }
            v32 = *v22;
            *((_QWORD *)v30 + 3) = *v22;
            *((_QWORD *)v30 + 4) = v22;
            v33 = (_QWORD *)((char *)v30 + 24);
            *(_QWORD *)(v32 + 8) = v33;
            *v22 = (uint64_t)v33;
            v21 = v14[1];
            v6 = 1;
          }
          if (*(_QWORD *)v7)
          {
            **(_QWORD **)(v7 + 16) = *(_QWORD *)(v7 + 8);
            v34 = *(_QWORD *)(v7 + 8);
            if (v34)
              *(_QWORD *)(v34 + 16) = *(_QWORD *)(v7 + 16);
          }
          *(_QWORD *)v7 = v21;
          if (v21)
          {
            v37 = *(_QWORD *)(v21 + 8);
            v35 = (_QWORD *)(v21 + 8);
            v36 = v37;
            *v8 = v37;
            if (v37)
              *(_QWORD *)(v36 + 16) = v8;
            *(_QWORD *)(v7 + 16) = v35;
            *v35 = v7;
          }
          goto LABEL_48;
        }
        v20 = 0;
        goto LABEL_26;
      }
LABEL_48:
      if (!v4)
      {
        if (!*((_QWORD *)this + 1))
        {
          v3 = *((_QWORD *)this + 5);
          goto LABEL_57;
        }
        goto LABEL_58;
      }
    }
  }
  v6 = 0;
LABEL_57:
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v3 + 40, (uint64_t ***)this);
  v40 = *((_QWORD *)this + 3);
  v41 = (_QWORD *)*((_QWORD *)this + 4);
  *v41 = v40;
  *(_QWORD *)(v40 + 8) = v41;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  llvm::Value::deleteValue(this);
LABEL_58:
  MEMORY[0x1CAA32FB4](v44[0], 8);
  return v6 & 1;
}

uint64_t sub_1C5EADF34(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  if (a2 > 5)
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 1;
  while (1)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(unsigned __int8 *)(v4 + 16);
    if ((v5 - 66) <= 2)
    {
      if ((sub_1C5EADF34() & 1) == 0)
        return 0;
      goto LABEL_15;
    }
    if (v5 == 41)
      goto LABEL_10;
    if (v5 != 62)
      break;
LABEL_15:
    v3 = *(_QWORD *)(v3 + 8);
    if (!v3)
      return 1;
  }
  if (v5 != 45)
    return 0;
LABEL_10:
  v6 = *(_DWORD *)(v4 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD *)(v4 - 8);
  else
    v7 = v4 - 32 * (v6 & 0x7FFFFFF);
  if (*(_BYTE *)(*(_QWORD *)(v7 + 32) + 16) == 16)
  {
    result = sub_1C5EADF34();
    if (!(_DWORD)result)
      return result;
    goto LABEL_15;
  }
  return 0;
}

_QWORD *sub_1C5EADFEC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63A3B78(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5EAE0B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v7 = (_DWORD *)(a2 + 8);
      v8 = *(unsigned int *)(a2 + 8);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = &v4[3 * v8];
          v12 = *(_QWORD **)a1;
          do
          {
            *v12 = *v4;
            v12[1] = v4[1];
            v12[2] = v4[2];
            v4 += 3;
            v12 += 3;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v13 = &v4[3 * v9];
            v14 = *(_QWORD **)a1;
            do
            {
              *v14 = *v4;
              v14[1] = v4[1];
              v14[2] = v4[2];
              v4 += 3;
              v14 += 3;
            }
            while (v4 != v13);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 24);
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*(_QWORD *)a2 + 24 * v9), *(_QWORD *)a2 + 24 * v10 - (*(_QWORD *)a2 + 24 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(_QWORD **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

double sub_1C5EAE220(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  v4 = sub_1C5EAE32C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  v6 = v10;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1C5EAE3C0(a1, v8);
    v10 = 0;
    sub_1C5EAE32C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
    v6 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  v9 = *a2;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_QWORD *)(v6 + 56) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)v6 = v9;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(v6 + 16) = 0x100000000;
  *(_QWORD *)(v6 + 32) = v6 + 48;
  *(_DWORD *)(v6 + 44) = 2;
  return result;
}

uint64_t sub_1C5EAE32C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + (v4 << 6));
    v6 = *v5;
    if (*v5 == a3)
    {
      v9 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v7 = v5;
        v12 = v4 + v8++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + (v4 << 6));
        v6 = *v5;
        v9 = 1;
        if (*v5 == a3)
          goto LABEL_7;
      }
      v9 = 0;
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
    v9 = 0;
  }
LABEL_7:
  *a4 = v5;
  return v9;
}

_QWORD *sub_1C5EAE3C0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        *result = -4096;
        result += 8;
        v11 -= 64;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v3 << 6;
      do
      {
        v14 = *(_QWORD *)(v4 + v12);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v22 = 0;
          sub_1C5EAE32C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          v15 = v22;
          *v22 = *(_QWORD *)(v4 + v12);
          v15[1] = v15 + 3;
          v16 = (void **)(v4 + v12 + 8);
          v15[2] = 0x100000000;
          if (*(_DWORD *)(v4 + v12 + 16))
          {
            v21 = v15;
            sub_1C627FAA8((uint64_t)(v15 + 1), v4 + v12 + 8);
            v15 = v21;
          }
          v15[4] = v15 + 6;
          v17 = (uint64_t)(v15 + 4);
          *(_QWORD *)(v17 + 8) = 0x200000000;
          if (*(_DWORD *)(v4 + v12 + 40))
            sub_1C627FAA8(v17, v4 + v12 + 32);
          ++*(_DWORD *)(a1 + 8);
          v18 = *(void **)(v4 + v12 + 32);
          if ((void *)(v4 + v12 + 48) != v18)
            free(v18);
          if ((void *)(v4 + v12 + 24) != *v16)
            free(*v16);
        }
        v12 += 64;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = v19 << 6;
    do
    {
      *result = -4096;
      result += 8;
      v20 -= 64;
    }
    while (v20);
  }
  return result;
}

uint64_t sub_1C5EAE59C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  const char *v23;
  __int16 v24;

  v23 = "agx.unified.store.limits";
  v24 = 259;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)&v23);
  if (result)
  {
    if (a2)
      v6 = "min-temp-reg-limit";
    else
      v6 = "temp-reg-limit";
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    v7 = *(uint64_t **)(result + 48);
    v8 = *((unsigned int *)v7 + 2);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 0;
      v22 = 0;
      if (a2)
        v11 = 18;
      else
        v11 = 14;
      v12 = *v7;
      do
      {
        v13 = *(_QWORD *)(v12 + 8 * v10);
        v14 = *(unsigned int *)(v13 + 8);
        v15 = (_QWORD *)(v13 - 8 * v14);
        if (!*(_BYTE *)*v15)
        {
          v16 = *(_QWORD **)(*v15 + 8);
          if (*v16 == v11)
          {
            result = memcmp(v16 + 3, v6, v11);
            if (v14 >= 2 && (_DWORD)result == 0)
            {
              v18 = v15[1];
              if (*(_BYTE *)v18 == 1)
              {
                v19 = *(_QWORD *)(v18 + 128);
                if (*(_BYTE *)(v19 + 16) == 16)
                {
                  v20 = (_QWORD *)(v19 + 24);
                  if (*(_DWORD *)(v19 + 32) >= 0x41u)
                    v20 = (_QWORD *)*v20;
                  v21 = (_QWORD *)*v20;
                  if (v22)
                  {
                    if (*(_DWORD *)a3 > v21)
                    {
                      *(_DWORD *)a3 = (_DWORD)v21;
                      *(_DWORD *)(a3 + 4) = v10;
                    }
                    v22 = 1;
                  }
                  else
                  {
                    *(_QWORD *)a3 = v9 + v21;
                    v22 = 1;
                    *(_BYTE *)(a3 + 8) = 1;
                  }
                }
              }
            }
          }
        }
        ++v10;
        v9 += 0x100000000;
      }
      while (v8 != v10);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t sub_1C5EAE72C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_6;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_6;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_6:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5EAE7D8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_1C5EAE930(a1, v7, &v7[v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = &v13;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v9 = &v14;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v10 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v10;
  }
  return sub_1C5EAE930(a1, &v13, v9);
}

uint64_t sub_1C5EAE930(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v3 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v3 & 1) != 0)
  {
    v5 = (_QWORD *)(result + 8);
    v6 = (_QWORD *)(result + 16);
  }
  else
  {
    v4 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = *(_QWORD **)(result + 8);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      v10 = a3;
      v7 = (_DWORD *)result;
      v8 = a2;
      v9 = *a2;
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = 0;
        sub_1C5EAE72C(result, v9, &v11);
        *v11 = *v8;
        *v7 += 2;
      }
      a2 = v8 + 1;
      a3 = v10;
      result = (uint64_t)v7;
    }
    while (v8 + 1 != v10);
  }
  return result;
}

uint64_t sub_1C5EAEA00(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_14;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 24 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 24 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_14;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C5EAEAB0(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 16;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C5EAEB70((uint64_t)a1, v6);
  v8 = 0;
  sub_1C5EAEA00((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -1)
    --a1[1];
  return a3;
}

uint64_t sub_1C5EAEB70(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[384];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5EAED08(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *(_DWORD *)v9 = v10;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a1 + v8 + 16);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 384);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5EAED08(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C5EAED08(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 392);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_9;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[6 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 6;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v12 = 0;
      result = sub_1C5EAEA00((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_DWORD *)a2;
      *(_OWORD *)(v11 + 2) = *(_OWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

_DWORD *sub_1C5EAEDC8(_DWORD *a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_1C5EAEA00((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5EAEAB0(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_1C5EAEE2C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5EAEED8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5EAF040(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5EAF040(a1, v14, v8);
}

uint64_t sub_1C5EAF040(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5EAEE2C((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C5EAF0F8(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = 0;
  result = sub_1C5EAF248(a2, *a3, &v20);
  v9 = v20;
  v10 = *(_DWORD *)a2;
  if ((_DWORD)result)
  {
    if ((v10 & 1) != 0)
    {
      v18 = a2 + 8;
      v19 = 16;
    }
    else
    {
      v18 = *(_QWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a2 + 16);
    }
    v17 = 0;
    v16 = v18 + 32 * v19;
    goto LABEL_11;
  }
  v11 = v10 >> 1;
  if ((v10 & 1) != 0)
    v12 = 16;
  else
    v12 = *(_DWORD *)(a2 + 16);
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_15;
  }
  if (v12 + ~v11 - *(_DWORD *)(a2 + 4) <= v12 >> 3)
  {
LABEL_15:
    sub_1C5EAF2EC(a2, v12);
    v20 = 0;
    result = sub_1C5EAF248(a2, *a3, &v20);
    v9 = v20;
  }
  *(_DWORD *)a2 += 2;
  if (*(_QWORD *)v9 != -4096)
    --*(_DWORD *)(a2 + 4);
  *(_QWORD *)v9 = *a3;
  v13 = *a4;
  *(_QWORD *)(v9 + 24) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(v9 + 8) = v13;
  v14 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v15 = 16;
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 8);
    v15 = *(unsigned int *)(a2 + 16);
  }
  v16 = v14 + 32 * v15;
  v17 = 1;
LABEL_11:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

uint64_t sub_1C5EAF248(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 32 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 32 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5EAF2EC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[512];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(32 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5EAF478(a1, v6, v6 + 32 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v16;
  do
  {
    v10 = a1 + v8;
    v11 = *(_QWORD *)(a1 + v8 + 8);
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v11;
      v12 = *(_OWORD *)(v10 + 16);
      *((_QWORD *)v9 + 3) = *(_QWORD *)(v10 + 32);
      *(_OWORD *)(v9 + 8) = v12;
      v9 += 32;
    }
    v8 += 32;
  }
  while (v8 != 512);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(32 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C5EAF478(a1, (uint64_t)v16, (uint64_t)v9);
}

uint64_t sub_1C5EAF478(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 520);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[4 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      result = sub_1C5EAF248((uint64_t)v5, v10, &v13);
      v11 = v13;
      *v13 = *(_QWORD *)a2;
      v12 = *(_OWORD *)(a2 + 8);
      v11[3] = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(v11 + 1) = v12;
      *v5 += 2;
    }
    a2 += 32;
  }
  return result;
}

_DWORD *sub_1C5EAF540(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63A3E24(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

void sub_1C5EAF5FC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5EAF610(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81A88A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5EAF644(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81A88A8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C5EAF660(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = result[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(result[1], v3 + 16, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_1C5EAF6BC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 8;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      result = 0;
      goto LABEL_26;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v5 - 1;
  v11 = (v5 - 1) & v9;
  v12 = (_QWORD *)(v4 + 16 * v11);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 != -4096 || v14 != -4096)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == -8192;
      if (v19 && v13 == -8192)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (_QWORD *)(v4 + 16 * (v21 & v10));
      v13 = *v12;
      v14 = v12[1];
      if (*v12 == a2 && v14 == a3)
        goto LABEL_26;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_26:
  *a4 = v12;
  return result;
}

void sub_1C5EAF7BC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5EAF940(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v11 = *(_QWORD *)(a1 + v8 + 8);
    v10 = *(_QWORD *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  sub_1C5EAF940(a1, v14, v9);
}

void sub_1C5EAF940(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(a1 + 8);
    v9 = 128;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v7)
      goto LABEL_12;
    v8 = *(void **)(a1 + 8);
    v9 = 16 * v7;
  }
  memset_pattern16(v8, &unk_1C85F2160, v9);
LABEL_12:
  while (a2 != a3)
  {
    v10 = *a2;
    v11 = a2[1];
    if ((*a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      v13 = 0;
      sub_1C5EAF6BC(a1, v10, v11, &v13);
      v12 = v13;
      *v13 = *a2;
      v12[1] = a2[1];
      *(_DWORD *)a1 += 2;
    }
    a2 += 2;
  }
}

_OWORD *sub_1C5EAFA10(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  _OWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      v12 = result;
      do
      {
        *v12++ = xmmword_1C85F22C0;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        v17 = *((_DWORD *)v15 + 2);
        if ((*v15 != -4096 || v17 != -1) && (v16 != -8192 || v17 != -2))
        {
          v20 = ~((unint64_t)(37 * v17) << 32)
              + (37 * v17)
              + ((unint64_t)((v16 >> 4) ^ (v16 >> 9)) << 32);
          v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          v23 = v14 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
          v24 = &result[v23];
          v25 = *(_QWORD *)v24;
          v26 = *((_DWORD *)v24 + 2);
          if (v16 != *(_QWORD *)v24 || v17 != v26)
          {
            v28 = 0;
            v29 = 1;
            while (v25 != -4096 || v26 != -1)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v26 == -2;
              if (v30 && v25 == -8192)
                v28 = v24;
              v32 = v23 + v29++;
              v23 = v32 & v14;
              v24 = &result[v32 & v14];
              v25 = *(_QWORD *)v24;
              v26 = *((_DWORD *)v24 + 2);
              if (v16 == *(_QWORD *)v24 && v17 == v26)
                goto LABEL_41;
            }
            if (v28)
              v24 = v28;
          }
LABEL_41:
          *(_QWORD *)v24 = v16;
          *((_DWORD *)v24 + 2) = v17;
          *((_DWORD *)a1 + 2) = ++v13;
        }
        v15 += 2;
      }
      while (v15 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v34 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v34)
  {
    v35 = 16 * v34;
    do
    {
      *result++ = xmmword_1C85F22C0;
      v35 -= 16;
    }
    while (v35);
  }
  return result;
}

BOOL sub_1C5EAFBF8(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;

  v5 = *(unsigned __int8 *)(a3 + 16);
  LOBYTE(v6) = a2 + 28;
  if (a2 + 28 == v5)
  {
    result = sub_1C4E5C310(a1, *(llvm::Constant **)(a3 - 64));
    if (result)
    {
      v8 = *(_QWORD *)(a3 - 32);
      if (v8)
      {
        **(_QWORD **)(a1 + 8) = v8;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    if (v5 == 5)
    {
      if (*(unsigned __int16 *)(a3 + 18) == a2
        && sub_1C4E7BBEC(a1, *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))))
      {
        v6 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
        if (v6)
        {
          **(_QWORD **)(a1 + 8) = v6;
          LOBYTE(v6) = 1;
        }
      }
      else
      {
        LOBYTE(v6) = 0;
      }
    }
    return (v5 == 5) & v6;
  }
  return result;
}

void sub_1C5EAFCC8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5EAFCDC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81A88F0;
  return result;
}

void sub_1C5EAFD00(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81A88F0;
}

uint64_t sub_1C5EAFD18(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFFFFFF00) != 0x200 || (*(_BYTE *)(a2 + 80) & 2) != 0)
    return 0;
  if (*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(a2 + 16) == 3 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 0)
    {
      v2 = *(_DWORD *)(a2 + 32);
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)(a2 + 72) == a2 + 72)
  {
    v2 = *(_DWORD *)(a2 + 32);
    if ((v2 & 0x800000) == 0)
    {
LABEL_9:
      if ((v2 & 0xF) != 0)
        return 0;
      if ((v2 & 0x400000) == 0)
        return 1;
      v4 = ***(_QWORD ***)a2;
      v17 = a2;
      v5 = *(_DWORD *)(v4 + 2520);
      if (v5)
      {
        v6 = *(_QWORD *)(v4 + 2504);
        v7 = v5 - 1;
        v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
        v9 = (_QWORD *)(v6 + 24 * v8);
        v10 = *v9;
        if (*v9 == a2)
          return v9[2] == 0;
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = (_QWORD *)(v6 + 24 * v8);
          v10 = *v9;
          if (*v9 == a2)
            return v9[2] == 0;
        }
        if (v11)
          v15 = v11;
        else
          v15 = v9;
      }
      else
      {
        v15 = 0;
      }
      v9 = sub_1C53D65B8(v4 + 2504, (uint64_t)&v17, &v17, v15);
      v16 = v17;
      v9[1] = 0;
      v9[2] = 0;
      *v9 = v16;
      return v9[2] == 0;
    }
  }
  return 1;
}

void sub_1C5EAFE60()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5EAFE74()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81A8938;
  return result;
}

void sub_1C5EAFE98(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81A8938;
}

BOOL sub_1C5EAFEB0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE *v20;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFFFFFF00) != 0x200 || (a2[34] & 0x40) == 0)
    return 0;
  v2 = ***(_QWORD ***)a2;
  v20 = a2;
  v3 = *(_DWORD *)(v2 + 2520);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 2504);
    v5 = v3 - 1;
    v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (_QWORD *)(v4 + 24 * v6);
    v8 = (_BYTE *)*v7;
    if ((_BYTE *)*v7 == a2)
      goto LABEL_5;
    v14 = 0;
    v15 = 1;
    while (v8 != (_BYTE *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v8 == (_BYTE *)-8192;
      if (v16)
        v14 = v7;
      v17 = v6 + v15++;
      v6 = v17 & v5;
      v7 = (_QWORD *)(v4 + 24 * v6);
      v8 = (_BYTE *)*v7;
      if ((_BYTE *)*v7 == a2)
        goto LABEL_5;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v7;
  }
  else
  {
    v18 = 0;
  }
  v7 = sub_1C53D65B8(v2 + 2504, (uint64_t)&v20, (uint64_t *)&v20, v18);
  v19 = (uint64_t)v20;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = v19;
LABEL_5:
  if (v7[2] != 15)
    return 0;
  v9 = (uint64_t *)v7[1];
  v10 = *v9;
  v11 = *(uint64_t *)((char *)v9 + 7);
  return v10 == 0x625F6C61626F6C67 && v11 == 0x73676E69646E6962;
}

_QWORD *sub_1C5EAFFDC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81A8988;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E81A89F0;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

void llvm::initializeAGXShaderCanonicalizerPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED836FF0);
  if (v2 != -1)
  {
    v5[0] = sub_1C5EB00B8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED836FF0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5EB00B8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Drop redundant metadata, assign empty names to most of the values";
  *(_QWORD *)(v2 + 8) = 65;
  *(_QWORD *)(v2 + 16) = "agx-shader-canonicalizer";
  *(_QWORD *)(v2 + 24) = 24;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5870;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5EB057C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5EB0148(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5870;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81A8A80;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED836FF0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5EB00B8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED836FF0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *sub_1C5EB0210(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81A89F0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C5EB0250(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C5EB0370(v17);
  }
}

uint64_t sub_1C5EB0370(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C5EB0388(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81A8988;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E81A89F0;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C5EB0418(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C5EB0424(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C5EB0434(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E81A8A40;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C5EB04A0(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C5EB04B4(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C5EB04BC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81A89F0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5EB050C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C5EB0514(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C5EB0528(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C5EB053C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C5EB0550(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1C5EB057C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5EB0148(v0);
}

void sub_1C5EB05A8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5EB05CC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C5EB05D8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  char *v4;
  char v5;
  llvm::Module **NamedMetadata;
  _QWORD *v7;
  void (**v8)(_QWORD *);
  _QWORD *v9;
  void (**v10)(_QWORD *);
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::NamedMDNode *v16;
  llvm::NamedMDNode *v17;
  llvm::Module **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t j;
  uint64_t ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ***v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ****v31;
  uint64_t ***v32;
  int v33;
  int v34;
  uint64_t ***v35;
  BOOL v36;
  uint64_t ***v37;
  uint64_t ***v38;
  uint64_t ***v39;
  uint64_t **v40;
  uint64_t **k;
  uint64_t ***v42;
  uint64_t **v43;
  uint64_t **m;
  uint64_t ***v45;
  const char *v47;
  uint64_t *v48;
  __int16 v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 191) < 0)
    operator delete(*(void **)(a2 + 168));
  *(_BYTE *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 191) = 0;
  if (*(char *)(a2 + 215) < 0)
    operator delete(*(void **)(a2 + 192));
  *(_BYTE *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 215) = 0;
  llvm::DataLayout::reset(a2 + 272, "", 0);
  for (i = 0; i != 6; ++i)
  {
    v4 = off_1E81A8B10[i];
    v49 = 257;
    if (*v4)
    {
      v47 = v4;
      v5 = 3;
    }
    else
    {
      v5 = 1;
    }
    LOBYTE(v49) = v5;
    NamedMetadata = (llvm::Module **)llvm::Module::getNamedMetadata(a2, (uint64_t)&v47);
    if (NamedMetadata)
      llvm::Module::eraseNamedMetadata(NamedMetadata[5], (llvm::NamedMDNode *)NamedMetadata);
  }
  v52[0] = &unk_1E81A8B50;
  v53 = v52;
  sub_1C5EB0B08("llvm.module.flags", (unsigned __int8 *)0x11, (uint64_t *)a2, (uint64_t)v52);
  v7 = v53;
  if (v53 == v52)
  {
    v8 = (void (**)(_QWORD *))(v52[0] + 32);
    v7 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_17;
    v8 = (void (**)(_QWORD *))(*v53 + 40);
  }
  (*v8)(v7);
LABEL_17:
  v50[0] = &off_1E81A8BF8;
  v51 = v50;
  sub_1C5EB0B08("agxcompiler.config", (unsigned __int8 *)0x12, (uint64_t *)a2, (uint64_t)v50);
  v9 = v51;
  if (v51 == v50)
  {
    v10 = (void (**)(_QWORD *))(v50[0] + 32);
    v9 = v50;
    goto LABEL_21;
  }
  if (v51)
  {
    v10 = (void (**)(_QWORD *))(*v51 + 40);
LABEL_21:
    (*v10)(v9);
  }
  if (dword_1ED825E48 != 1)
  {
    v47 = "agx.reduce.reg.pressure";
    v49 = 259;
    v11 = llvm::Module::getNamedMetadata(a2, (uint64_t)&v47);
    if (v11)
    {
      v12 = *(uint64_t ***)(v11 + 48);
      if (*((_DWORD *)v12 + 2) == 1)
      {
        v13 = **v12;
        if (*(_DWORD *)(v13 + 8) == 1)
        {
          v14 = *(_QWORD *)(v13 - 8);
          if (*(_BYTE *)v14 == 1)
          {
            v15 = *(_QWORD *)(v14 + 128);
            if (*(_BYTE *)(v15 + 16) == 16 && *(_DWORD *)(v15 + 32) == 1 && !*(_QWORD *)(v15 + 24))
              llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v11 + 40), (llvm::NamedMDNode *)v11);
          }
        }
      }
    }
    v47 = "agx.interpolations";
    v49 = 259;
    v16 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (uint64_t)&v47);
    sub_1C5EB1010(v16);
    v47 = "agx.driver_bindings";
    v49 = 259;
    v17 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (uint64_t)&v47);
    sub_1C5EB1010(v17);
    v47 = "llvm.ident";
    v49 = 259;
    v18 = (llvm::Module **)llvm::Module::getNamedMetadata(a2, (uint64_t)&v47);
    if (v18)
      llvm::Module::eraseNamedMetadata(v18[5], (llvm::NamedMDNode *)v18);
    llvm::Module::getIdentifiedStructTypes((llvm::Module *)a2, &v47);
    v19 = (uint64_t *)v47;
    v20 = v48;
    if (v47 != (const char *)v48)
    {
      do
      {
        v21 = *v19++;
        llvm::StructType::setName(v21, "", 0);
      }
      while (v19 != v20);
      v19 = (uint64_t *)v47;
    }
    if (v19)
    {
      v48 = v19;
      operator delete(v19);
    }
    for (j = *(_QWORD *)(a2 + 16); j != a2 + 8; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v23 = (uint64_t ***)(j - 56);
      else
        v23 = 0;
      v49 = 257;
      llvm::Value::setName(v23, (uint64_t)&v47);
    }
    v24 = a2 + 24;
    v25 = *(_QWORD *)(a2 + 32);
    if (v25 != a2 + 24)
    {
      while (1)
      {
        if (v25)
          v26 = (uint64_t ***)(v25 - 56);
        else
          v26 = 0;
        if ((*((_BYTE *)v26 + 23) & 0x10) == 0)
        {
LABEL_62:
          v49 = 257;
          llvm::Value::setName(v26, (uint64_t)&v47);
          goto LABEL_63;
        }
        v27 = ***v26;
        v28 = *(_QWORD *)(v27 + 152);
        v29 = *(unsigned int *)(v27 + 168);
        if (!(_DWORD)v29)
          goto LABEL_54;
        LODWORD(v30) = (v29 - 1) & ((v26 >> 4) ^ (v26 >> 9));
        v31 = (uint64_t ****)(v28 + 16 * v30);
        v32 = *v31;
        if (*v31 != v26)
          break;
LABEL_55:
        v35 = v31[1];
        if ((unint64_t)*v35 < 5)
          goto LABEL_62;
        v36 = *((_DWORD *)v35 + 4) == 1836477548 && *((_BYTE *)v35 + 20) == 46;
        if (!v36 && ((unint64_t)*v35 < 8 || v35[2] != (uint64_t **)0x6E69616D2E636761))
          goto LABEL_62;
LABEL_63:
        if ((*((_WORD *)v26 + 9) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v26);
          v37 = (uint64_t ***)v26[11];
          if ((*((_WORD *)v26 + 9) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v26);
            v38 = (uint64_t ***)v26[11];
            goto LABEL_66;
          }
        }
        else
        {
          v37 = (uint64_t ***)v26[11];
        }
        v38 = v37;
LABEL_66:
        v39 = &v38[5 * (_QWORD)v26[12]];
        while (v37 != v39)
        {
          v49 = 257;
          llvm::Value::setName(v37, (uint64_t)&v47);
          v37 += 5;
        }
        v40 = (uint64_t **)(v26 + 9);
        for (k = v26[10]; k != v40; k = (uint64_t **)k[1])
        {
          if (k)
            v42 = (uint64_t ***)(k - 3);
          else
            v42 = 0;
          v49 = 257;
          llvm::Value::setName(v42, (uint64_t)&v47);
          v43 = (uint64_t **)(v42 + 5);
          for (m = v42[6]; m != v43; m = (uint64_t **)m[1])
          {
            if (m)
              v45 = (uint64_t ***)(m - 3);
            else
              v45 = 0;
            if (*((_BYTE *)*v45 + 8) != 7)
            {
              v49 = 257;
              llvm::Value::setName(v45, (uint64_t)&v47);
            }
          }
        }
        v25 = *(_QWORD *)(v25 + 8);
        if (v25 == v24)
          return 1;
      }
      v33 = 1;
      while (v32 != (uint64_t ***)-4096)
      {
        v34 = v30 + v33++;
        v30 = v34 & (v29 - 1);
        v32 = *(uint64_t ****)(v28 + 16 * v30);
        if (v32 == v26)
        {
          v31 = (uint64_t ****)(v28 + 16 * v30);
          goto LABEL_55;
        }
      }
LABEL_54:
      v31 = (uint64_t ****)(v28 + 16 * v29);
      goto LABEL_55;
    }
  }
  return 1;
}

void sub_1C5EB0B08(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  int64x2_t v7;
  uint64_t NamedMetadata;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22[4];
  __int16 v23;
  _QWORD v24[17];
  void *v25;
  uint64_t v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x1E0C80C00];
  v24[0] = 1;
  v6 = 1;
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v24[v6] = v7;
    v6 += 2;
  }
  while (v6 != 17);
  v25 = v27;
  v26 = 0x1000000000;
  v23 = 261;
  v22[0] = a1;
  v22[1] = a2;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)a3, (uint64_t)v22);
  if (NamedMetadata)
  {
    v9 = NamedMetadata;
    v10 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *a3;
      v13 = 8 * v10;
      do
      {
        v21 = 0;
        v21 = *(unsigned __int8 **)(**(_QWORD **)(v9 + 48) + v11);
        if (sub_1C62B3A60((uint64_t)v24, (uint64_t *)&v21))
        {
          v22[0] = v21;
          v14 = *(_QWORD *)(a4 + 24);
          if (!v14)
          {
            sub_1C485C2F0();
            JUMPOUT(0x1C5EB0CE4);
          }
          (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *, uint64_t))(*(_QWORD *)v14 + 48))(v14, v22, v24, v12);
        }
        v11 += 8;
      }
      while (v13 != v11);
    }
    llvm::NamedMDNode::clearOperands(v9);
    if ((_DWORD)v26)
    {
      v15 = (unsigned __int8 **)v25;
      v16 = 8 * v26;
      do
      {
        v17 = *v15;
        v22[0] = *v15;
        v18 = *(_QWORD *)(v9 + 48);
        v19 = *(unsigned int *)(v18 + 8);
        if (v19 >= *(_DWORD *)(v18 + 12))
        {
          sub_1C5419FD8(*(_QWORD *)(v9 + 48), v22);
        }
        else
        {
          v20 = (unsigned __int8 **)(*(_QWORD *)v18 + 8 * v19);
          *v20 = v17;
          if (v17)
          {
            llvm::MetadataTracking::track((uint64_t)v20, v17, 2);
            LODWORD(v19) = *(_DWORD *)(v18 + 8);
          }
          *(_DWORD *)(v18 + 8) = v19 + 1;
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
  }
  if (v25 != v27)
    free(v25);
  if ((v24[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v24[1], 8);
}

void sub_1C5EB0CE8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5EB0CFC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E81A8B50;
  return result;
}

void sub_1C5EB0D20(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E81A8B50;
}

void sub_1C5EB0D38(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  const void *v9;
  char *v10;
  char *v11;
  _BOOL4 v12;
  uint64_t v13;

  v3 = *a2;
  v13 = v3;
  if (*(_DWORD *)(v3 + 8) == 3)
  {
    v4 = *(_QWORD *)(v3 - 16);
    if (!*(_BYTE *)v4)
    {
      v6 = 0;
      v7 = 0;
      v8 = *(char ***)(v4 + 8);
      v11 = *v8;
      v9 = v8 + 3;
      v10 = v11;
      do
      {
        v12 = (&off_1E81A8B88)[v6 + 1] == v10;
        if (v10 && (&off_1E81A8B88)[v6 + 1] == v10)
          v12 = memcmp((&off_1E81A8B88)[v6], v9, (size_t)v10) == 0;
        v7 += v12;
        v6 += 2;
      }
      while (v6 != 12);
      if (v7)
        sub_1C6348508(a3, &v13);
    }
  }
}

void sub_1C5EB0DFC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5EB0E10()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81A8BF8;
  return result;
}

void sub_1C5EB0E34(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81A8BF8;
}

void sub_1C5EB0E4C(uint64_t a1, llvm::Type *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v15;
  int v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value **NullValue;
  llvm::Value *v23;
  _QWORD *v24;
  uint64_t Impl;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  v26 = v4;
  if (*(_DWORD *)(v4 + 8) != 2)
    return;
  v5 = *(_QWORD *)(v4 - 16);
  if (*(_BYTE *)v5)
    return;
  v7 = *(uint64_t **)(v5 + 8);
  v8 = *v7;
  if (*v7 == 21)
  {
    v9 = v7[3];
    v10 = v7[4];
    v11 = *(uint64_t *)((char *)v7 + 37);
    if (v9 == 0x525458455F584741 && v10 == 0x415F4D564C4C5F41 && v11 == 0x4249525454415F4DLL)
      sub_1C6348508(a3, &v26);
    return;
  }
  if (dword_1ED825E48 == 1)
    return;
  if (v8 != 16)
  {
    if (v8 != 7)
      return;
    v15 = *((_DWORD *)v7 + 6);
    v16 = *(_DWORD *)((char *)v7 + 27);
    if (v15 != 1215588679 || v16 != 1752392008)
      return;
    v18 = llvm::MDString::get(a4, "", 0);
LABEL_29:
    v24 = v18;
    sub_1C6348508(a3, &v26);
    v27[0] = v5;
    v27[1] = v24;
    Impl = llvm::MDTuple::getImpl(a4, v27, 2, 0, 1);
    sub_1C62B3A60(a3, &Impl);
    return;
  }
  v20 = v7[3];
  v19 = v7[4];
  if (v20 == 0x2E74736575716552 && v19 == 0x4449726564616853)
  {
    NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*a4 + 1960), a2);
    v18 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)NullValue, v23);
    if (v18)
      goto LABEL_29;
  }
}

void sub_1C5EB1010(llvm::NamedMDNode *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v15 = v17;
    v16 = 0x800000000;
    v2 = *(unsigned int *)(*((_QWORD *)a1 + 6) + 8);
    if (!(_DWORD)v2)
      goto LABEL_22;
    v3 = 0;
    v4 = 0;
    v5 = 8 * v2;
    do
    {
      v6 = *(_QWORD *)(**((_QWORD **)a1 + 6) + v3);
      if (*(_BYTE *)v6 != 4)
        goto LABEL_23;
      v7 = *(unsigned int *)(v6 + 8);
      if (!(_DWORD)v7)
        goto LABEL_23;
      if (*(_QWORD *)(v6 - 8 * v7))
      {
        if (v4 >= HIDWORD(v16))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, v4 + 1, 8);
          v4 = v16;
        }
        *((_QWORD *)v15 + v4) = v6;
        v4 = v16 + 1;
        LODWORD(v16) = v16 + 1;
      }
      v3 += 8;
    }
    while (v5 != v3);
    if (!v4)
LABEL_22:
      llvm::Module::eraseNamedMetadata(*((llvm::Module **)a1 + 5), a1);
    if (v4 < *(_DWORD *)(*((_QWORD *)a1 + 6) + 8))
    {
      llvm::NamedMDNode::clearOperands((uint64_t)a1);
      if ((_DWORD)v16)
      {
        v8 = (unsigned __int8 **)v15;
        v9 = 8 * v16;
        do
        {
          v10 = *v8;
          v14 = *v8;
          v11 = *((_QWORD *)a1 + 6);
          v12 = *(unsigned int *)(v11 + 8);
          if (v12 >= *(_DWORD *)(v11 + 12))
          {
            sub_1C5419FD8(*((_QWORD *)a1 + 6), &v14);
          }
          else
          {
            v13 = (unsigned __int8 **)(*(_QWORD *)v11 + 8 * v12);
            *v13 = v10;
            if (v10)
            {
              llvm::MetadataTracking::track((uint64_t)v13, v10, 2);
              LODWORD(v12) = *(_DWORD *)(v11 + 8);
            }
            *(_DWORD *)(v11 + 8) = v12 + 1;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
    }
LABEL_23:
    if (v15 != v17)
      free(v15);
  }
}

void sub_1C5EB11C8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5EB11DC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81A8C40;
  return result;
}

void sub_1C5EB1200(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81A8C40;
}

uint64_t sub_1C5EB121C()
{
  uint64_t v0;
  char *v1;
  char *v2;
  unsigned __int8 *v3;
  size_t v4;
  __int128 v5;
  int v6;
  unsigned int v7;
  char *v8;
  char *v9;
  int *v10;
  char *v11;
  __int128 v12;
  int v13;
  _BOOL4 v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  int v21;
  int v22;
  int v24;
  unint64_t v25;
  _BOOL4 v26;
  _QWORD v27[2];
  __int128 v28;
  uint64_t (**v29)();
  int v30;
  char v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  int v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  int v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v33 = v35;
  v35[0] = "agx-canon-dedup";
  v35[1] = 15;
  v36 = 0;
  v37 = "Strip all metadata that does not change assembly output (or WILL in undesirable way), drop most type and value n"
        "ames. Optimal for IR deduplication purposes";
  v38 = 155;
  v39 = "agx-canon-test";
  v40 = 14;
  v41 = 1;
  v42 = "Only strip metadata that we don't care to have in OfflineIR suite and regression tests";
  v43 = 86;
  v34 = 0x400000002;
  v0 = sub_1C47AD050((uint64_t)&unk_1ED825DC8, 0, 0);
  *(_DWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 136) = &off_1E81A8A40;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)v0 = off_1E81A8988;
  *(_QWORD *)(v0 + 152) = &off_1E81A89F0;
  *(_QWORD *)(v0 + 160) = v0;
  *(_QWORD *)(v0 + 168) = v0 + 184;
  *(_QWORD *)(v0 + 176) = 0x800000000;
  *(_QWORD *)(v0 + 568) = &off_1E81A8C40;
  *(_QWORD *)(v0 + 592) = v0 + 568;
  *(_QWORD *)(v0 + 32) = "Pick mode of operation for agx-shader-canonicalizer:";
  *(_QWORD *)(v0 + 40) = 52;
  if ((_DWORD)v34)
  {
    v1 = (char *)v33;
    v2 = (char *)v33 + 40 * v34;
    do
    {
      v3 = *(unsigned __int8 **)v1;
      v4 = *((_QWORD *)v1 + 1);
      v5 = *(_OWORD *)(v1 + 24);
      v6 = *((_DWORD *)v1 + 4);
      v27[0] = *(_QWORD *)v1;
      v27[1] = v4;
      v28 = v5;
      v29 = &off_1E81A8A40;
      v31 = 1;
      v30 = v6;
      v7 = dword_1ED825E78;
      v8 = (char *)qword_1ED825E70;
      if (dword_1ED825E78 >= dword_1ED825E7C)
      {
        v15 = qword_1ED825E70 <= (unint64_t)v27
           && qword_1ED825E70 + 48 * (unint64_t)dword_1ED825E78 > (unint64_t)v27;
        v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v27 - qword_1ED825E70) >> 4);
        v26 = v15;
        if (!v15)
          v16 = -1;
        v25 = v16;
        v32 = 0;
        v8 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED825E70, dword_1ED825E78 + 1, 48, &v32);
        v17 = (_OWORD *)qword_1ED825E70;
        if (dword_1ED825E78)
        {
          v18 = qword_1ED825E70 + 48 * dword_1ED825E78;
          v19 = v8;
          do
          {
            v20 = v17[1];
            *(_OWORD *)v19 = *v17;
            *((_OWORD *)v19 + 1) = v20;
            *((_QWORD *)v19 + 4) = &off_1E81A8A60;
            v21 = *((_DWORD *)v17 + 10);
            v19[44] = *((_BYTE *)v17 + 44);
            *((_DWORD *)v19 + 10) = v21;
            *((_QWORD *)v19 + 4) = &off_1E81A8A40;
            v17 += 3;
            v19 += 48;
          }
          while (v17 != (_OWORD *)v18);
          v17 = (_OWORD *)qword_1ED825E70;
        }
        v22 = v32;
        if (v17 != (_OWORD *)&unk_1ED825E80)
        {
          v24 = v32;
          free(v17);
          v22 = v24;
        }
        qword_1ED825E70 = (uint64_t)v8;
        dword_1ED825E7C = v22;
        v9 = (char *)v27;
        if (v26)
        {
          v9 = &v8[48 * v25];
          v10 = (int *)(v9 + 40);
        }
        else
        {
          v10 = &v30;
        }
        v7 = dword_1ED825E78;
      }
      else
      {
        v9 = (char *)v27;
        v10 = &v30;
      }
      v11 = &v8[48 * v7];
      v12 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v9;
      *((_OWORD *)v11 + 1) = v12;
      *((_QWORD *)v11 + 4) = &off_1E81A8A60;
      v13 = *v10;
      v11[44] = *((_BYTE *)v10 + 4);
      *((_DWORD *)v11 + 10) = v13;
      *((_QWORD *)v11 + 4) = &off_1E81A8A40;
      ++dword_1ED825E78;
      llvm::cl::AddLiteralOption(qword_1ED825E68, v3, v4);
      v1 += 40;
    }
    while (v1 != v2);
  }
  dword_1ED825E48 = 0;
  byte_1ED825E5C = 1;
  dword_1ED825E58 = 0;
  word_1ED825DD2 = word_1ED825DD2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&unk_1ED825DC8);
  if (v33 != v35)
    free(v33);
  return __cxa_atexit((void (*)(void *))sub_1C5EAFFDC, &unk_1ED825DC8, &dword_1C475E000);
}

void llvm::initializeAddDiscriminatorsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED836FF8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5EB15E4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED836FF8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5EB15E4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Add DWARF path discriminators";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "add-discriminators";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5878;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5EB1C84;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5EB1674(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5878;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A8C88;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED836FF8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5EB15E4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED836FF8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5EB173C(uint64_t a1, llvm::Module *a2)
{
  char v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  char v41;
  unsigned __int8 *v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned __int8 **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  llvm::DILocation *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned __int8 *v63;
  char v64;
  unsigned __int8 *v65;
  const char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  _QWORD v71[2];
  int v72;
  unsigned __int8 *v73;
  const char *v74;
  uint64_t v75;
  int v76;
  _QWORD v77[2];
  int v78;
  uint64_t v79[2];
  unsigned int v80;
  uint64_t v81[2];
  unsigned __int8 v82;

  if (byte_1ED8260A0 || (*(_BYTE *)(a1 + 23) & 0x20) == 0)
  {
LABEL_2:
    v2 = 0;
    return v2 & 1;
  }
  v5 = ***(_QWORD ***)a1;
  v81[0] = a1;
  v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    v68 = 0;
LABEL_102:
    v10 = sub_1C541AB24(v5 + 2480, (uint64_t)v81, v81, v68);
    v69 = v81[0];
    v10[3] = 0;
    v10[4] = 0;
    *v10 = v69;
    v10[1] = v10 + 3;
    v10[2] = 0x100000000;
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(v5 + 2480);
  v8 = v6 - 1;
  v9 = v8 & ((a1 >> 4) ^ (a1 >> 9));
  v10 = (_QWORD *)(v7 + 40 * v9);
  v11 = *v10;
  if (*v10 != a1)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (_QWORD *)(v7 + 40 * v9);
      v11 = *v10;
      if (*v10 == a1)
        goto LABEL_15;
    }
    if (v12)
      v68 = v12;
    else
      v68 = v10;
    goto LABEL_102;
  }
LABEL_15:
  v16 = *((unsigned int *)v10 + 4);
  if (!(_DWORD)v16)
    goto LABEL_2;
  v17 = (_QWORD *)(v10[1] + 8);
  v18 = 16 * v16;
  v2 = 0;
  while (*((_DWORD *)v17 - 2))
  {
    v17 += 2;
    v18 -= 16;
    if (!v18)
      return v2 & 1;
  }
  if (!*v17)
    goto LABEL_2;
  if (byte_1ED830650)
    llvm::sampleprofutil::createFSDiscriminatorVariable(*(uint64_t ***)(a1 + 40), a2);
  v2 = 0;
  v79[0] = 0;
  v79[1] = 0;
  v80 = 0;
  v19 = a1 + 72;
  v77[0] = 0;
  v77[1] = 0;
  v78 = 0;
  v20 = *(_QWORD *)(a1 + 80);
  if (v20 != a1 + 72)
  {
    v2 = 0;
    do
    {
      if (v20)
        v21 = v20 - 24;
      else
        v21 = 0;
      for (i = *(_QWORD *)(v21 + 48); i != v21 + 40; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v23 = i - 24;
        else
          v23 = 0;
        if (*(_BYTE *)(v23 + 16) == 84)
        {
          v24 = *(_QWORD *)(v23 - 32);
          if (v24)
          {
            if (!*(_BYTE *)(v24 + 16)
              && *(_QWORD *)(v24 + 24) == *(_QWORD *)(v23 + 72)
              && (*(_BYTE *)(v24 + 33) & 0x20) != 0
              && !sub_1C4DE85D0(v23))
            {
              continue;
            }
          }
        }
        v27 = *(_QWORD *)(v23 + 48);
        v25 = (unsigned __int8 **)(v23 + 48);
        v26 = v27;
        if (v27)
        {
          v28 = *(_QWORD *)(v26 - 8 * *(unsigned int *)(v26 + 8));
          if (*(_BYTE *)v28 == 15 || (v28 = *(_QWORD *)(v28 - 8 * *(unsigned int *)(v28 + 8))) != 0)
          {
            v28 = *(_QWORD *)(v28 - 8 * *(unsigned int *)(v28 + 8));
            if (v28)
            {
              v30 = *(_QWORD **)(v28 + 8);
              v31 = *v30;
              v29 = (const char *)(v30 + 3);
              v28 = v31;
            }
            else
            {
              v29 = 0;
            }
          }
          else
          {
            v29 = "";
          }
          v32 = *(_DWORD *)(v26 + 4);
          v74 = v29;
          v75 = v28;
          v76 = v32;
          v33 = sub_1C63A3FBC((uint64_t)v79, (uint64_t)&v74);
          v71[0] = v21;
          sub_1C614F72C(v33 + 24, v71, (uint64_t)v81);
          if (*(_DWORD *)(v33 + 32) != 1)
          {
            v34 = v82;
            v35 = sub_1C63A446C((uint64_t)v77, (uint64_t)&v74);
            v39 = *(unsigned int *)(v35 + 24);
            if (v34)
            {
              v39 = (v39 + 1);
              *(_DWORD *)(v35 + 24) = v39;
            }
            v40 = (unsigned __int8 *)sub_1C5EB1CDC(v26, (llvm::DILocation *)v39, v36, v37, v38);
            if (v41)
            {
              v73 = v40;
              if (v40)
                llvm::MetadataTracking::track((uint64_t)&v73, v40, 2);
              if (&v73 == v25)
              {
                if (v73)
                  llvm::MetadataTracking::untrack((uint64_t)&v73, v73);
              }
              else
              {
                if (*v25)
                  llvm::MetadataTracking::untrack((uint64_t)v25, *v25);
                v42 = v73;
                *v25 = v73;
                if (v42)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v73, v42, (uint64_t)v25);
                  v73 = 0;
                }
              }
            }
            v2 = 1;
          }
        }
      }
      v20 = *(_QWORD *)(v20 + 8);
    }
    while (v20 != v19);
    for (j = *(_QWORD *)(a1 + 80); j != v19; j = *(_QWORD *)(j + 8))
    {
      v44 = j - 24;
      if (!j)
        v44 = 0;
      v45 = v44 + 40;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v46 = *(_QWORD *)(v44 + 48);
      if (v46 == v44 + 40)
      {
        v66 = 0;
      }
      else
      {
        do
        {
          if (v46)
            v47 = v46 - 24;
          else
            v47 = 0;
          v48 = *(unsigned __int8 *)(v47 + 16);
          if (v48 == 33
            || v48 == 84
            && ((v49 = *(_QWORD *)(v47 - 32)) == 0
             || *(_BYTE *)(v49 + 16)
             || *(_QWORD *)(v49 + 24) != *(_QWORD *)(v47 + 72)
             || (*(_BYTE *)(v49 + 33) & 0x20) == 0))
          {
            v52 = *(_QWORD *)(v47 + 48);
            v50 = (unsigned __int8 **)(v47 + 48);
            v51 = v52;
            if (v52)
            {
              v53 = *(_QWORD *)(v51 - 8 * *(unsigned int *)(v51 + 8));
              if (*(_BYTE *)v53 == 15 || (v53 = *(_QWORD *)(v53 - 8 * *(unsigned int *)(v53 + 8))) != 0)
              {
                v53 = *(_QWORD *)(v53 - 8 * *(unsigned int *)(v53 + 8));
                if (v53)
                {
                  v55 = *(_QWORD **)(v53 + 8);
                  v56 = *v55;
                  v54 = (const char *)(v55 + 3);
                  v53 = v56;
                }
                else
                {
                  v54 = 0;
                }
              }
              else
              {
                v54 = "";
              }
              v57 = *(_DWORD *)(v51 + 4);
              v71[0] = v54;
              v71[1] = v53;
              v72 = v57;
              sub_1C63A47DC((uint64_t)v81, (uint64_t)&v74, (uint64_t)v71);
              if (!v82)
              {
                v58 = sub_1C63A446C((uint64_t)v77, (uint64_t)v71);
                v59 = (llvm::DILocation *)(*(_DWORD *)(v58 + 24) + 1);
                *(_DWORD *)(v58 + 24) = (_DWORD)v59;
                v63 = (unsigned __int8 *)sub_1C5EB1CDC(v51, v59, v60, v61, v62);
                if (v64)
                {
                  v70 = v63;
                  if (v63)
                    llvm::MetadataTracking::track((uint64_t)&v70, v63, 2);
                  if (&v70 == v50)
                  {
                    if (v70)
                      llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
                  }
                  else
                  {
                    if (*v50)
                      llvm::MetadataTracking::untrack((uint64_t)v50, *v50);
                    v65 = v70;
                    *v50 = v70;
                    if (v65)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v70, v65, (uint64_t)v50);
                      v70 = 0;
                    }
                  }
                  v2 = 1;
                }
              }
            }
          }
          v46 = *(_QWORD *)(v46 + 8);
        }
        while (v46 != v45);
        v66 = v74;
      }
      MEMORY[0x1CAA32FB4](v66, 8);
    }
  }
  MEMORY[0x1CAA32FB4](v77[0], 8);
  v67 = v79[0];
  sub_1C63A4B70(v79[0], v80);
  MEMORY[0x1CAA32FB4](v67, 8);
  return v2 & 1;
}

uint64_t sub_1C5EB1C84()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5EB1674(v0);
}

void sub_1C5EB1CB0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5EB1CD4(uint64_t a1, llvm::Module *a2)
{
  return sub_1C5EB173C((uint64_t)a2, a2);
}

uint64_t sub_1C5EB1CDC(uint64_t a1, llvm::DILocation *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  llvm::MDNode *Impl;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26[2];

  v6 = a1;
  v7 = (uint64_t *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v8 = *v7;
  v9 = *(unsigned __int8 *)*v7;
  if (byte_1ED830650)
  {
    if (v9 == 19)
    {
      if (*(unsigned __int8 *)(v8 + 24) == (_DWORD)a2)
        return v6;
      v10 = *v7;
      do
      {
        if (!*(_DWORD *)(v10 + 24))
          break;
        v10 = *(_QWORD *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8);
      }
      while (*(_BYTE *)v10 == 19);
    }
    else
    {
      v10 = *v7;
      if (!(_DWORD)a2)
        return v6;
    }
    v11 = *(_QWORD *)(a1 + 16);
    v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)*v12;
    if (v9 != 15)
      v8 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
    v13 = v8;
    v14 = (int)a2;
  }
  else
  {
    if (v9 == 19)
      v19 = *(unsigned int *)(v8 + 24);
    else
      v19 = 0;
    *(_QWORD *)v26 = 0;
    v25 = 0;
    llvm::DILocation::decodeDiscriminator(v19, &v26[1], v26, &v25, a5);
    if (v26[1] == (_DWORD)a2)
      return v6;
    v23 = llvm::DILocation::encodeDiscriminator(a2, v26[0], v25, v20, v21);
    if ((v23 & 0xFF00000000) == 0)
      return 0;
    v14 = v23;
    v10 = v8;
    if (v9 == 19)
    {
      v10 = v8;
      do
      {
        if (!*(_DWORD *)(v10 + 24))
          break;
        v10 = *(_QWORD *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8);
      }
      while (*(_BYTE *)v10 == 19);
    }
    v24 = *(_QWORD *)(v6 + 16);
    v12 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
    if ((v24 & 4) != 0)
      v12 = (_QWORD *)*v12;
    if (v9 != 15)
      v8 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
    v13 = v8;
  }
  Impl = llvm::DILexicalBlockFile::getImpl(v12, v10, v13, v14, 0, 1);
  v16 = *(_QWORD *)(v6 + 16);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)*v17;
  if (*(_DWORD *)(v6 + 8) == 2)
    v18 = *(_QWORD *)(v6 - 8);
  else
    v18 = 0;
  return llvm::DILocation::getImpl(v17, *(_DWORD *)(v6 + 4), *(unsigned __int16 *)(v6 + 2), (uint64_t)Impl, v18, 0, 0, 1);
}

char *sub_1C5EB1EB4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63A4324(a1, v4, v4 + 48 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = &result[48 * v10];
    do
    {
      *(_OWORD *)result = xmmword_1C85F6FF0;
      *((_DWORD *)result + 4) = -1;
      result += 48;
    }
    while (result != v11);
  }
  return result;
}

char *sub_1C5EB1F88(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  char *v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63A46DC(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = &result[32 * v10];
    do
    {
      *(_OWORD *)result = xmmword_1C85F6FF0;
      *((_DWORD *)result + 4) = -1;
      result += 32;
    }
    while (result != v11);
  }
  return result;
}

char *sub_1C5EB2050(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63A4A74(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = &result[24 * v10];
    do
    {
      *(_OWORD *)result = xmmword_1C85F6FF0;
      *((_DWORD *)result + 4) = -1;
      result += 24;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1C5EB2124()
{
  __int128 v1;
  char v2;
  char *v3;

  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Disable generation of discriminator information.";
  *((_QWORD *)&v1 + 1) = 48;
  sub_1C63A4C08(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED826020, &dword_1C475E000);
}

unsigned __int8 *llvm::emitAMDGPUPrintfCall(uint64_t a1, llvm **a2, uint64_t a3)
{
  llvm **v4;
  llvm *v6;
  int ConstantStringInfo;
  const llvm::APInt *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  llvm::ConstantInt *v12;
  llvm::ValueHandleBase *v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  const llvm::APInt *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v27;
  int v28;
  uint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  uint64_t first_of;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  llvm::ConstantInt *v53;
  llvm::ValueHandleBase *v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  const llvm::APInt *v58;
  uint64_t **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  llvm::ConstantInt *v63;
  unint64_t v64;
  unint64_t v65;
  const llvm::APInt *v66;
  llvm::ValueHandleBase *v67;
  uint64_t v68;
  llvm::ConstantInt *v69;
  unsigned int v70;
  unint64_t v71;
  llvm::ValueHandleBase *v72;
  __int128 v73;
  uint64_t v74;
  llvm **v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80[4];
  __int16 v81;
  uint64_t v82;
  llvm::ValueHandleBase *v83;
  unsigned __int8 *v84;
  llvm::ValueHandleBase *v85;
  llvm::ValueHandleBase *v86;
  llvm::ValueHandleBase *v87;
  llvm::ValueHandleBase *v88;
  llvm::ValueHandleBase *v89;
  llvm::ValueHandleBase *v90;
  llvm::ValueHandleBase *v91;
  uint64_t v92;

  v4 = a2;
  v92 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v76 = (uint64_t *)&v76;
  v77 = (uint64_t *)&v76;
  v78 = 0;
  v79 = (uint64_t *)&v76;
  v82 = 0;
  v83 = 0;
  ConstantStringInfo = llvm::getConstantStringInfo(v6, (const llvm::Value *)&v82, 0, 1);
  v9 = (unint64_t)v83;
  if (ConstantStringInfo)
    v10 = v83 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v27 = 0;
    v28 = 1;
    v29 = v82;
    do
    {
      v30 = memchr((void *)(v29 + v27), 37, v9 - v27);
      if (!v30)
        break;
      v31 = (unint64_t)&v30[-v29];
      if (&v30[-v29] == (_BYTE *)-1)
        break;
      if (v30[1] == 37)
      {
        v27 = v31 + 2;
      }
      else
      {
        first_of = llvm::StringRef::find_first_of(&v82, "diouxXfFeEgGaAcspn", 18, v31);
        if (first_of == -1)
          break;
        v27 = first_of + 1;
        if (v9 >= v31)
          v33 = v31;
        else
          v33 = v9;
        if (v33 <= v27)
          v34 = first_of + 1;
        else
          v34 = v33;
        if (v9 < v34)
          v34 = v9;
        v35 = v33 - v34;
        if (v33 == v34)
        {
          v36 = 0;
        }
        else
        {
          v36 = 0;
          v37 = (unsigned __int8 *)(v29 + v33);
          do
          {
            v38 = *v37++;
            if (v38 == 42)
              ++v36;
          }
          while (!__CFADD__(v35++, 1));
        }
        v40 = v36 + v28;
        if (*(_BYTE *)(v29 + first_of) == 115)
          sub_1C63A4CCC((uint64_t *)&v76, v40);
        v28 = v40 + 1;
      }
    }
    while (v9 > v27);
  }
  v11 = **(_QWORD **)(a1 + 64);
  v12 = *(llvm::ConstantInt **)(v11 + 1984);
  LODWORD(v83) = *(_DWORD *)(v11 + 1992) >> 8;
  if (v83 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v82, 0, 0);
  else
    v82 = 0;
  v13 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v82, v8);
  if (v83 >= 0x41 && v82)
    MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
  v80[0] = (uint64_t)v13;
  v14 = (uint64_t **)sub_1C6212CB8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), "__ockl_printf_begin", 0x13uLL, 0, (uint64_t **)(**(_QWORD **)(a1 + 64) + 1984), **(_QWORD **)(a1 + 64) + 1984);
  LOWORD(v86) = 257;
  v16 = sub_1C4774778((uint64_t *)a1, v14, v15, v80, 1, (uint64_t)&v82, 0);
  v18 = (unsigned __int8 *)sub_1C5EB283C(a1, v16, (unsigned __int8 *)v6, a3 == 1);
  v19 = a3 - 1;
  if (a3 != 1)
  {
    v41 = 1;
    v74 = a3;
    v75 = v4;
    while (v78)
    {
      v42 = v79;
      if (v79 == (uint64_t *)&v76)
      {
        v42 = v76;
        v79 = v76;
      }
      v43 = v41 >> 3;
      v44 = *((_DWORD *)v42 + 4);
      if (v44 != v41 >> 3)
      {
        if (v44 <= v43)
        {
          if (&v76 == (uint64_t **)v42)
          {
LABEL_52:
            v42 = (uint64_t *)&v76;
          }
          else
          {
            while (*((_DWORD *)v42 + 4) < v43)
            {
              v42 = (uint64_t *)v42[1];
              if (v42 == (uint64_t *)&v76)
                goto LABEL_52;
            }
          }
        }
        else if (v77 == v42)
        {
LABEL_48:
          v42 = v77;
        }
        else
        {
          while (*((_DWORD *)v42 + 4) > v43)
          {
            v42 = (uint64_t *)*v42;
            if (v42 == v77)
              goto LABEL_48;
          }
        }
        v79 = v42;
      }
      if (v42 == (uint64_t *)&v76 || *((_DWORD *)v42 + 4) != v43)
        break;
      v45 = (unsigned __int8 *)v4[v41];
      if ((((unint64_t)v42[3] >> (v41 & 7)) & 1) == 0 || *(_BYTE *)(*(_QWORD *)v45 + 8) != 15)
        goto LABEL_60;
      v18 = (unsigned __int8 *)sub_1C5EB283C(a1, (uint64_t)v18, (unsigned __int8 *)v4[v41], v19 == v41);
LABEL_86:
      v41 = (v41 + 1);
      if (a3 == v41)
        goto LABEL_10;
    }
    v45 = (unsigned __int8 *)v4[v41];
LABEL_60:
    v46 = **(_QWORD **)(a1 + 64) + 1984;
    v47 = *(_DWORD *)(*(_QWORD *)v45 + 8);
    if (*(_QWORD *)v45)
      v48 = v47 == 13;
    else
      v48 = 0;
    if (v48)
    {
      v51 = *(_DWORD *)(*(_QWORD *)v45 + 8) >> 8;
      if (v51 == 64)
      {
LABEL_71:
        v52 = **(_QWORD **)(a1 + 64);
        v53 = *(llvm::ConstantInt **)(v52 + 1984);
        LODWORD(v83) = *(_DWORD *)(v52 + 1992) >> 8;
        if (v83 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v82, 0, 0);
        else
          v82 = 0;
        v54 = llvm::ConstantInt::get(v53, (llvm::LLVMContext *)&v82, v17);
        if (v83 >= 0x41 && v82)
          MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
        v55 = v19;
        v56 = v19 == v41;
        v57 = **(_QWORD **)(a1 + 64);
        *(_QWORD *)&v73 = v57 + 1984;
        *((_QWORD *)&v73 + 1) = v57 + 1984;
        v59 = (uint64_t **)sub_1C63A4F0C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), (uint64_t **)(v57 + 1984), v57 + 1984, v57 + 1960, v57 + 1984, v57 + 1984, v57 + 1984, v57 + 1984, v73, v57 + 1984, v57 + 1960);
        v61 = v60;
        v62 = **(_QWORD **)(a1 + 64);
        v63 = *(llvm::ConstantInt **)(v62 + 1960);
        v64 = *(unsigned int *)(v62 + 1968);
        LODWORD(v83) = v64 >> 8;
        if (v64 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v82, v56, 0);
        }
        else
        {
          if (v64 <= 0xFF)
            v65 = 0;
          else
            v65 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v64);
          v82 = v65 & v56;
        }
        v67 = llvm::ConstantInt::get(v63, (llvm::LLVMContext *)&v82, v58);
        if (v83 >= 0x41 && v82)
          MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
        v68 = **(_QWORD **)(a1 + 64);
        v69 = *(llvm::ConstantInt **)(v68 + 1960);
        v70 = *(_DWORD *)(v68 + 1968);
        LODWORD(v83) = v70 >> 8;
        if (v70 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v82, 1, 0);
        }
        else
        {
          if (v70 <= 0xFF)
            LOBYTE(v71) = 0;
          else
            v71 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v70);
          v82 = v71 & 1;
        }
        v72 = llvm::ConstantInt::get(v69, (llvm::LLVMContext *)&v82, v66);
        if (v83 >= 0x41 && v82)
          MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
        v82 = (uint64_t)v18;
        v83 = v72;
        v84 = v45;
        v85 = v54;
        v86 = v54;
        v87 = v54;
        v88 = v54;
        v89 = v54;
        v90 = v54;
        v91 = v67;
        v81 = 257;
        v18 = (unsigned __int8 *)sub_1C4774778((uint64_t *)a1, v59, v61, &v82, 10, (uint64_t)v80, 0);
        a3 = v74;
        v4 = v75;
        v19 = v55;
        goto LABEL_86;
      }
      if (v51 == 32)
      {
        LOWORD(v86) = 257;
        v49 = (uint64_t *)a1;
        v50 = 39;
        goto LABEL_70;
      }
    }
    else if (v47 == 3)
    {
      LOWORD(v86) = 257;
      v49 = (uint64_t *)a1;
      v50 = 49;
LABEL_70:
      v45 = sub_1C4773E38(v49, v50, v45, v46, (uint64_t)&v82);
      goto LABEL_71;
    }
    LOWORD(v86) = 257;
    v49 = (uint64_t *)a1;
    v50 = 47;
    goto LABEL_70;
  }
LABEL_10:
  v20 = **(_QWORD **)(a1 + 64) + 1960;
  LOWORD(v86) = 257;
  v21 = sub_1C4773E38((uint64_t *)a1, 38, v18, v20, (uint64_t)&v82);
  if (v78)
  {
    v23 = (uint64_t)v76;
    v22 = v77;
    v24 = *v77;
    *(_QWORD *)(v24 + 8) = v76[1];
    **(_QWORD **)(v23 + 8) = v24;
    v78 = 0;
    if (v22 != (uint64_t *)&v76)
    {
      do
      {
        v25 = (uint64_t *)v22[1];
        operator delete(v22);
        v22 = v25;
      }
      while (v25 != (uint64_t *)&v76);
    }
  }
  return v21;
}

uint64_t sub_1C5EB283C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t v9;
  const llvm::APInt *v10;
  unsigned __int8 *v11;
  _QWORD **v12;
  uint64_t v13;
  llvm::ConstantInt *v14;
  const llvm::APInt *v15;
  llvm::ValueHandleBase *v16;
  uint64_t v17;
  llvm::ConstantInt *v18;
  unint64_t v19;
  char v20;
  const llvm::APInt *v21;
  llvm::ValueHandleBase *v22;
  uint64_t v23;
  llvm::ConstantInt *v24;
  llvm::ValueHandleBase *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  llvm::Type *v57;
  llvm::Value **NullValue;
  llvm::Value *v59;
  _DWORD *v60;
  uint64_t v61;
  llvm::BranchInst *v62;
  _QWORD *v63;
  llvm::Constant *v64;
  _QWORD *v65;
  llvm::GetElementPtrInst *v66;
  uint64_t ***v67;
  uint64_t v68;
  char v69;
  char v70;
  char *v71;
  char *v72;
  llvm::Value *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Value *v77;
  char *v78;
  uint64_t v79;
  unsigned __int8 **v80;
  char *v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  _QWORD *v84;
  uint64_t *v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _DWORD *v94;
  uint64_t v95;
  llvm::PHINode *v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t v99;
  const llvm::APInt *v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  llvm::ConstantInt *v105;
  unint64_t v106;
  int v107;
  llvm::ValueHandleBase *v108;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 **v112;
  int v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  llvm::ValueHandleBase *v122;
  llvm::Constant **v123;
  uint64_t *v124;
  uint64_t *v125;
  const char *v126;
  unsigned int v127;
  __int16 v128;
  unsigned __int8 *v129;
  uint64_t v130[4];
  __int16 v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
  v9 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 64) + 1912), (llvm::Type *)(v8 >> 8));
  v128 = 257;
  v11 = sub_1C4773E38((uint64_t *)a1, 49, a3, v9, (uint64_t)&v126);
  v125 = *(uint64_t **)(a1 + 48);
  v12 = *(_QWORD ***)(v125[7] + 40);
  v13 = **(_QWORD **)(a1 + 64);
  v14 = *(llvm::ConstantInt **)(v13 + 1912);
  v127 = *(_DWORD *)(v13 + 1920) >> 8;
  if (v127 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v126, 0, 0);
  else
    v126 = 0;
  v16 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v126, v10);
  if (v127 >= 0x41 && v126)
    MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
  v17 = **(_QWORD **)(a1 + 64);
  v18 = *(llvm::ConstantInt **)(v17 + 1984);
  v19 = *(unsigned int *)(v17 + 1992);
  v127 = v19 >> 8;
  if (v19 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v126, 1, 0);
  }
  else
  {
    if (v19 <= 0xFF)
      v20 = 0;
    else
      v20 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v19);
    v126 = (const char *)(v20 & 1);
  }
  v22 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v126, v15);
  if (v127 >= 0x41 && v126)
    MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
  v23 = **(_QWORD **)(a1 + 64);
  v24 = *(llvm::ConstantInt **)(v23 + 1984);
  v127 = *(_DWORD *)(v23 + 1992) >> 8;
  if (v127 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v126, 0, 0);
  else
    v126 = 0;
  v123 = (llvm::Constant **)v11;
  v25 = llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v126, v21);
  if (v127 >= 0x41 && v126)
    MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
  v26 = **(_QWORD **)(a1 + 64);
  v28 = v125 + 5;
  v27 = (uint64_t *)v125[5];
  v121 = a2;
  v122 = v22;
  v120 = a4;
  v118 = (uint64_t)v16;
  v119 = (uint64_t)v25;
  if (v27 == v125 + 5 || !v27 || *((unsigned __int8 *)v27 - 8) - 40 < 0xFFFFFFF5)
  {
    v33 = *v12;
    v126 = "strlen.join";
    v128 = 259;
    v34 = v125[7];
    v35 = operator new();
    *(_QWORD *)v35 = *v33 + 1600;
    *(_QWORD *)(v35 + 8) = 0;
    v36 = *(_DWORD *)(v35 + 20) & 0xC0000000;
    *(_QWORD *)(v35 + 24) = 0;
    v37 = v35 + 24;
    *(_DWORD *)(v35 + 16) = 22;
    *(_DWORD *)(v35 + 20) = v36;
    *(_QWORD *)(v35 + 32) = 0;
    *(_QWORD *)(v35 + 40) = v35 + 40;
    *(_QWORD *)(v35 + 48) = v35 + 40;
    *(_QWORD *)(v35 + 56) = 0;
    if (v34)
    {
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v34 + 72, (_QWORD *)v35);
      v38 = *(_QWORD *)(v34 + 72);
      *(_QWORD *)(v35 + 24) = v38;
      *(_QWORD *)(v35 + 32) = v34 + 72;
      *(_QWORD *)(v38 + 8) = v37;
      *(_QWORD *)(v34 + 72) = v37;
    }
    v124 = (uint64_t *)v35;
    llvm::Value::setName((uint64_t ***)v35, (uint64_t)&v126);
  }
  else
  {
    v29 = *(uint64_t **)(a1 + 56);
    v126 = "strlen.join";
    v128 = 259;
    v30 = llvm::BasicBlock::splitBasicBlock(v125, v29, (uint64_t)&v126, 0);
    v31 = v125[5];
    if ((uint64_t *)v31 == v28)
    {
      v32 = 0;
    }
    else
    {
      if (v31)
        v39 = v31 - 24;
      else
        v39 = 0;
      if (*(unsigned __int8 *)(v39 + 16) - 29 >= 0xB)
        v32 = 0;
      else
        v32 = v39;
    }
    v124 = (uint64_t *)v30;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v32 + 40) + 40, (uint64_t ***)v32);
    v40 = *(_QWORD *)(v32 + 24);
    v41 = *(_QWORD **)(v32 + 32);
    *v41 = v40;
    *(_QWORD *)(v40 + 8) = v41;
    *(_QWORD *)(v32 + 24) = 0;
    *(_QWORD *)(v32 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v32);
  }
  v42 = *v12;
  v126 = "strlen.while";
  v128 = 259;
  v43 = v125[7];
  v44 = operator new();
  *(_QWORD *)v44 = *v42 + 1600;
  *(_QWORD *)(v44 + 8) = 0;
  v45 = *(_DWORD *)(v44 + 20) & 0xC0000000;
  *(_QWORD *)(v44 + 24) = 0;
  v46 = v44 + 24;
  *(_DWORD *)(v44 + 16) = 22;
  *(_DWORD *)(v44 + 20) = v45;
  *(_QWORD *)(v44 + 32) = 0;
  *(_QWORD *)(v44 + 40) = v44 + 40;
  *(_QWORD *)(v44 + 48) = v44 + 40;
  *(_QWORD *)(v44 + 56) = 0;
  if (v43)
  {
    v47 = v43 + 72;
    if (v124)
      v48 = v124 + 3;
    else
      v48 = (uint64_t *)(v43 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v47, (_QWORD *)v44);
    v49 = *v48;
    *(_QWORD *)(v44 + 24) = *v48;
    *(_QWORD *)(v44 + 32) = v48;
    *(_QWORD *)(v49 + 8) = v46;
    *v48 = v46;
  }
  v117 = v26 + 1984;
  llvm::Value::setName((uint64_t ***)v44, (uint64_t)&v126);
  v50 = *v12;
  v126 = "strlen.while.done";
  v128 = 259;
  v51 = v125[7];
  v52 = operator new();
  *(_QWORD *)v52 = *v50 + 1600;
  *(_QWORD *)(v52 + 8) = 0;
  v53 = *(_DWORD *)(v52 + 20) & 0xC0000000;
  *(_QWORD *)(v52 + 24) = 0;
  v54 = v52 + 24;
  *(_DWORD *)(v52 + 16) = 22;
  *(_DWORD *)(v52 + 20) = v53;
  *(_QWORD *)(v52 + 32) = 0;
  *(_QWORD *)(v52 + 40) = v52 + 40;
  *(_QWORD *)(v52 + 48) = v52 + 40;
  *(_QWORD *)(v52 + 56) = 0;
  if (v51)
  {
    if (v124)
      v55 = v124 + 3;
    else
      v55 = (uint64_t *)(v51 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v51 + 72, (_QWORD *)v52);
    v56 = *v55;
    *(_QWORD *)(v52 + 24) = *v55;
    *(_QWORD *)(v52 + 32) = v55;
    *(_QWORD *)(v56 + 8) = v54;
    *v55 = v54;
  }
  llvm::Value::setName((uint64_t ***)v52, (uint64_t)&v126);
  *(_QWORD *)(a1 + 48) = v125;
  *(_QWORD *)(a1 + 56) = v28;
  NullValue = llvm::Constant::getNullValue(*v123, v57);
  v128 = 257;
  v59 = (llvm::Value *)sub_1C4774B48(a1, 32, (uint64_t)v123, (uint64_t)NullValue, (uint64_t)&v126);
  v60 = operator new(0xA0uLL);
  v61 = 0;
  v62 = (llvm::BranchInst *)(v60 + 24);
  v60[29] = v60[29] & 0x38000000 | 3;
  do
  {
    v63 = &v60[v61];
    *v63 = 0;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
    v61 += 8;
  }
  while (v61 != 24);
  llvm::BranchInst::BranchInst(v62, (llvm::BasicBlock *)v124, (llvm::BasicBlock *)v44, v59, (llvm::BasicBlock *)v125);
  *(_QWORD *)(a1 + 48) = v44;
  *(_QWORD *)(a1 + 56) = v44 + 40;
  v64 = *v123;
  v128 = 257;
  v65 = (_QWORD *)sub_1C4867E94(a1, (uint64_t)v64, 2, (uint64_t)&v126);
  sub_1C477667C((llvm::PHINode *)v65, (uint64_t)v123, (uint64_t)v125);
  v66 = (llvm::GetElementPtrInst *)(**(_QWORD **)(a1 + 64) + 1912);
  v128 = 257;
  v67 = sub_1C4867B70((uint64_t *)a1, v66, v65, (uint64_t)v22, (uint64_t)&v126);
  sub_1C477667C((llvm::PHINode *)v65, (uint64_t)v67, v44);
  v68 = **(_QWORD **)(a1 + 64) + 1912;
  v131 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40) + 272, v68);
  v70 = v69;
  v71 = (char *)operator new(0x60uLL);
  v72 = v71;
  v73 = (llvm::Value *)(v71 + 32);
  *((_QWORD *)v71 + 2) = 0;
  *((_QWORD *)v71 + 3) = v71 + 32;
  v128 = 257;
  *((_QWORD *)v71 + 4) = v68;
  *((_QWORD *)v71 + 5) = 0;
  *((_WORD *)v71 + 24) = 60;
  *((_DWORD *)v71 + 13) = 1;
  *(_OWORD *)(v71 + 56) = 0u;
  *(_OWORD *)(v71 + 72) = 0u;
  *((_DWORD *)v71 + 22) = 0;
  *(_QWORD *)v71 = v65;
  *((_QWORD *)v71 + 1) = 0;
  if (v65)
  {
    v74 = v65 + 1;
    v75 = v65[1];
    *((_QWORD *)v71 + 1) = v75;
    if (v75)
      *(_QWORD *)(v75 + 16) = v71 + 8;
    *((_QWORD *)v71 + 2) = v74;
    *v74 = v71;
  }
  *((_WORD *)v71 + 25) = 2 * (v70 & 0x3F);
  v71[92] = 1;
  llvm::Value::setName((uint64_t ***)v71 + 4, (uint64_t)&v126);
  (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v73, v130, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v76 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v76)
  {
    v110 = *(_QWORD *)a1;
    v111 = *(_QWORD *)a1 + 16 * v76;
    v112 = (unsigned __int8 **)(v72 + 80);
    do
    {
      v113 = *(_DWORD *)v110;
      v114 = *(unsigned __int8 **)(v110 + 8);
      if (v114)
      {
        if (!v113)
        {
          v129 = *(unsigned __int8 **)(v110 + 8);
          llvm::MetadataTracking::track((uint64_t)&v129, v114, 2);
          v115 = *v112;
          goto LABEL_75;
        }
      }
      else
      {
        v115 = *v112;
        if (!*v112 && (v72[55] & 0x20) == 0)
          goto LABEL_72;
        if (!v113)
        {
          v129 = 0;
LABEL_75:
          if (v115)
            llvm::MetadataTracking::untrack((uint64_t)(v72 + 80), v115);
          v116 = v129;
          *v112 = v129;
          if (v116)
            llvm::MetadataTracking::retrack((uint64_t)&v129, v116, (uint64_t)(v72 + 80));
          goto LABEL_72;
        }
      }
      llvm::Value::setMetadata(v73, *(_DWORD *)v110, (llvm::MDNode *)v114);
LABEL_72:
      v110 += 16;
    }
    while (v110 != v111);
  }
  v128 = 257;
  v77 = (llvm::Value *)sub_1C4774B48(a1, 32, (uint64_t)v73, v118, (uint64_t)&v126);
  v78 = (char *)operator new(0xA0uLL);
  v79 = 0;
  v80 = (unsigned __int8 **)(v78 + 96);
  *((_DWORD *)v78 + 29) = *((_DWORD *)v78 + 29) & 0x38000000 | 3;
  do
  {
    v81 = &v78[v79];
    *(_QWORD *)v81 = 0;
    *((_QWORD *)v81 + 1) = 0;
    *((_QWORD *)v81 + 2) = 0;
    *((_QWORD *)v81 + 3) = v80;
    v79 += 32;
  }
  while (v79 != 96);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v78 + 96), (llvm::BasicBlock *)v52, (llvm::BasicBlock *)v44, v77, 0);
  v128 = 257;
  sub_1C4867F8C((uint64_t *)a1, v80, (uint64_t)&v126);
  sub_1C4D8AE2C(a1, v52, *(_QWORD *)(v52 + 48));
  v128 = 257;
  v82 = sub_1C4773E38((uint64_t *)a1, 47, (unsigned __int8 *)v123, v117, (uint64_t)&v126);
  v128 = 257;
  v83 = sub_1C4773E38((uint64_t *)a1, 47, (unsigned __int8 *)v65, v117, (uint64_t)&v126);
  v128 = 257;
  v84 = (_QWORD *)sub_1C47733F8(a1, (uint64_t)v83, (uint64_t)v82, (uint64_t)&v126, 0, 0);
  v131 = 257;
  v85 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD *, llvm::ValueHandleBase *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), v84, v122, 0, 0);
  if (!v85)
  {
    v128 = 257;
    v86 = (char *)operator new(0x80uLL);
    *((_QWORD *)v86 + 5) = 0;
    v87 = v86 + 40;
    *((_QWORD *)v86 + 6) = 0;
    *((_QWORD *)v86 + 8) = *v84;
    v88 = (uint64_t)(v86 + 64);
    *((_QWORD *)v86 + 3) = v86 + 64;
    *((_QWORD *)v86 + 7) = v86 + 64;
    *((_QWORD *)v86 + 9) = 0;
    v86[80] = 41;
    v86[81] = 0;
    *((_WORD *)v86 + 41) = 0;
    *((_DWORD *)v86 + 21) = 2;
    *(_OWORD *)(v86 + 88) = 0u;
    *(_OWORD *)(v86 + 104) = 0u;
    *((_DWORD *)v86 + 30) = 0;
    *(_QWORD *)v86 = v84;
    v91 = v84[1];
    v90 = v84 + 1;
    v89 = v91;
    *((_QWORD *)v86 + 1) = v91;
    if (v91)
      *(_QWORD *)(v89 + 16) = v86 + 8;
    *((_QWORD *)v86 + 2) = v90;
    *v90 = v86;
    *((_QWORD *)v86 + 4) = v122;
    if (v122)
    {
      v93 = (_QWORD *)((char *)v122 + 8);
      v92 = *((_QWORD *)v122 + 1);
      *v87 = v92;
      if (v92)
        *(_QWORD *)(v92 + 16) = v87;
      *((_QWORD *)v86 + 6) = v93;
      *v93 = v86 + 32;
    }
    llvm::Value::setName((uint64_t ***)v86 + 8, (uint64_t)&v126);
    v85 = (uint64_t *)sub_1C4773754((uint64_t *)a1, v88, (uint64_t)v130);
  }
  v94 = operator new(0x60uLL);
  v94[13] = v94[13] & 0x38000000 | 1;
  *(_QWORD *)v94 = 0;
  *((_QWORD *)v94 + 1) = 0;
  *((_QWORD *)v94 + 2) = 0;
  *((_QWORD *)v94 + 3) = v94 + 8;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v94 + 8), (llvm::BasicBlock *)v124, (llvm::BasicBlock *)v52);
  sub_1C4D8AE2C(a1, (uint64_t)v124, v124[6]);
  v95 = *v85;
  v128 = 257;
  v96 = (llvm::PHINode *)sub_1C4867E94(a1, v95, 2, (uint64_t)&v126);
  sub_1C477667C(v96, (uint64_t)v85, v52);
  sub_1C477667C(v96, v119, (uint64_t)v125);
  v97 = **(_QWORD **)(a1 + 64);
  v98 = (uint64_t **)(v97 + 1984);
  v99 = llvm::PointerType::get((llvm::PointerType *)(v97 + 1912), 0);
  v101 = (uint64_t **)sub_1C63A4E48(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), v98, (uint64_t)v98, v99, (uint64_t)v98, **(_QWORD **)(a1 + 64) + 1960);
  v103 = v102;
  v104 = **(_QWORD **)(a1 + 64);
  v105 = *(llvm::ConstantInt **)(v104 + 1960);
  v106 = *(unsigned int *)(v104 + 1968);
  v127 = v106 >> 8;
  if (v106 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v126, v120, 0);
  }
  else
  {
    if (v106 <= 0xFF)
      v107 = 0;
    else
      v107 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v106);
    v126 = (const char *)(v107 & v120);
  }
  v108 = llvm::ConstantInt::get(v105, (llvm::LLVMContext *)&v126, v100);
  if (v127 >= 0x41 && v126)
    MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
  v130[0] = v121;
  v130[1] = (uint64_t)v123;
  v130[2] = (uint64_t)v96;
  v130[3] = (uint64_t)v108;
  v128 = 257;
  return sub_1C4774778((uint64_t *)a1, v101, v103, v130, 4, (uint64_t)&v126, 0);
}

uint64_t ***llvm::computeEltAddr(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::PointerType *this, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  unsigned __int8 *v23;
  llvm::GetElementPtrInst *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _DWORD *v38;
  int v39;
  _DWORD *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  llvm::PointerType *v43;
  char v44[32];
  __int16 v45;
  _DWORD v46[8];
  __int16 v47;

  v12 = llvm::PointerType::get(this, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a1 + 8) >> 8));
  v47 = 257;
  v41 = a5;
  v42 = sub_1C5098D9C((uint64_t *)a6, a1, v12, (uint64_t)v46);
  v13 = *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
  v14 = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
  v15 = *(_DWORD *)(*(_QWORD *)a5 + 8);
  v16 = v15 >> 8;
  if (v13 <= v14)
    v17 = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
  else
    v17 = *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
  if (v17 <= v15 >> 8)
    v18 = v15 >> 8;
  else
    v18 = v17;
  v19 = *(_QWORD **)(a6 + 64);
  v46[0] = v18;
  v43 = this;
  if (v18 <= 63)
  {
    if (v18 <= 31)
    {
      switch(v18)
      {
        case 16:
          v20 = *v19 + 1936;
          goto LABEL_15;
        case 8:
          v20 = *v19 + 1912;
          goto LABEL_15;
        case 1:
          v20 = *v19 + 1888;
          goto LABEL_15;
      }
    }
    else if (v18 == 32)
    {
      v20 = *v19 + 1960;
      goto LABEL_15;
    }
  }
  else
  {
    if (v18 == 64)
    {
      v20 = *v19 + 1984;
      goto LABEL_15;
    }
    if (v18 == 128)
    {
      v20 = *v19 + 2008;
      goto LABEL_15;
    }
  }
  v38 = sub_1C5270984(*v19 + 2168, v46);
  v20 = *((_QWORD *)v38 + 1);
  if (!v20)
  {
    v40 = v38;
    v20 = sub_1C484358C(*v19 + 2040, 24, 3);
    v39 = v46[0];
    *(_QWORD *)v20 = v19;
    *(_QWORD *)(v20 + 16) = 0;
    *(_DWORD *)(v20 + 8) = (v39 << 8) | 0xD;
    *(_DWORD *)(v20 + 12) = 0;
    *((_QWORD *)v40 + 1) = v20;
  }
LABEL_15:
  if (v13 == v18 && v14 == v18 && v16 >= v17)
  {
    v25 = (uint64_t *)v42;
    v24 = v43;
    v23 = v41;
  }
  else
  {
    v47 = 257;
    a2 = sub_1C4773E38((uint64_t *)a6, 39, a2, v20, (uint64_t)v46);
    v47 = 257;
    a3 = sub_1C4773E38((uint64_t *)a6, 39, a3, v20, (uint64_t)v46);
    v47 = 257;
    v23 = sub_1C4773E38((uint64_t *)a6, 39, v41, v20, (uint64_t)v46);
    v25 = (uint64_t *)v42;
    v24 = v43;
  }
  v47 = 257;
  v26 = sub_1C4EC4040(a6, (uint64_t)a3, (uint64_t)v23, (uint64_t)v46, 0, 0);
  v45 = 257;
  v27 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a6 + 72) + 16))(*(_QWORD *)(a6 + 72), a2, v26, 0, 0);
  if (!v27)
  {
    v47 = 257;
    v28 = (char *)operator new(0x80uLL);
    *((_QWORD *)v28 + 5) = 0;
    v29 = v28 + 40;
    *((_QWORD *)v28 + 6) = 0;
    *((_QWORD *)v28 + 8) = *(_QWORD *)a2;
    v30 = (uint64_t)(v28 + 64);
    *((_QWORD *)v28 + 3) = v28 + 64;
    *((_QWORD *)v28 + 7) = v28 + 64;
    *((_QWORD *)v28 + 9) = 0;
    v28[80] = 41;
    v28[81] = 0;
    *((_WORD *)v28 + 41) = 0;
    *((_DWORD *)v28 + 21) = 2;
    *(_OWORD *)(v28 + 88) = 0u;
    *(_OWORD *)(v28 + 104) = 0u;
    *((_DWORD *)v28 + 30) = 0;
    *(_QWORD *)v28 = a2;
    v33 = *((_QWORD *)a2 + 1);
    v32 = a2 + 8;
    v31 = v33;
    *((_QWORD *)v28 + 1) = v33;
    if (v33)
      *(_QWORD *)(v31 + 16) = v28 + 8;
    *((_QWORD *)v28 + 2) = v32;
    *v32 = v28;
    *((_QWORD *)v28 + 4) = v26;
    if (v26)
    {
      v36 = *(_QWORD *)(v26 + 8);
      v35 = (_QWORD *)(v26 + 8);
      v34 = v36;
      *v29 = v36;
      if (v36)
        *(_QWORD *)(v34 + 16) = v29;
      *((_QWORD *)v28 + 6) = v35;
      *v35 = v28 + 32;
    }
    llvm::Value::setName((uint64_t ***)v28 + 8, (uint64_t)v46);
    v27 = sub_1C4773754((uint64_t *)a6, v30, (uint64_t)v44);
  }
  v47 = 257;
  return sub_1C4867B70((uint64_t *)a6, v24, v25, v27, (uint64_t)v46);
}

void llvm::ComputeASanStackFrameLayout(unsigned int *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  const std::nothrow_t *v14;
  unint64_t v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  BOOL (*v31)(uint64_t, uint64_t);

  v30 = a2;
  v9 = a1[2];
  v10 = *(_QWORD *)a1;
  if (!(_DWORD)v9)
  {
    v13 = *(char **)a1;
    v31 = sub_1C5EB38A8;
LABEL_12:
    sub_1C5EB3CCC(v10, v13, (unsigned int (**)(uint64_t, uint64_t))&v31, v9, 0, 0, a5);
    goto LABEL_13;
  }
  v11 = 0;
  do
  {
    v12 = *(_QWORD *)(v10 + v11 + 24);
    if (v12 <= 0x10)
      v12 = 16;
    *(_QWORD *)(v10 + v11 + 24) = v12;
    v11 += 56;
  }
  while (56 * v9 != v11);
  v13 = (char *)(v10 + 56 * v9);
  v31 = sub_1C5EB38A8;
  if (v9 < 0x81)
    goto LABEL_12;
  v14 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v15 = v9;
  while (1)
  {
    v16 = operator new(56 * v15, v14);
    if (v16)
      break;
    v17 = v15 > 1;
    v15 >>= 1;
    if (!v17)
      goto LABEL_12;
  }
  v29 = v16;
  sub_1C5EB3CCC(v10, (char *)(v10 + 56 * v9), (unsigned int (**)(uint64_t, uint64_t))&v31, v9, (uint64_t)v16, v15, a5);
  operator delete(v29);
LABEL_13:
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (a2 <= v19)
    v20 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  else
    v20 = a2;
  *a4 = a2;
  a4[1] = v20;
  if (a3 <= a2)
    v21 = a2;
  else
    v21 = a3;
  if (v21 > v19)
    v19 = v21;
  if ((_DWORD)v9)
  {
    v22 = (unint64_t *)(v18 + 80);
    do
    {
      if (v9 == 1)
      {
        v23 = &v30;
      }
      else if (*v22 <= a2)
      {
        v23 = &v30;
      }
      else
      {
        v23 = v22;
      }
      v24 = *(v22 - 9);
      v25 = *v23;
      v26 = v24 + 256;
      if (v24 <= 0x1000)
        v26 = v24 + 128;
      if (v24 <= 0x200)
        v26 = v24 + 64;
      if (v24 <= 0x80)
        v26 = v24 + 32;
      if (v24 < 0x11)
        v26 = 32;
      if (v24 >= 5)
        v27 = v26;
      else
        v27 = 16;
      if (v27 <= 2 * a2)
        v27 = 2 * a2;
      *(v22 - 5) = v19;
      v19 += (v25 + v27 - 1) / v25 * v25;
      v22 += 7;
      --v9;
    }
    while (v9);
  }
  if (v19 % a3)
    v28 = a3 - v19 % a3;
  else
    v28 = 0;
  a4[2] = v28 + v19;
}

BOOL sub_1C5EB38A8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 24) > *(_QWORD *)(a2 + 24);
}

void llvm::ComputeASanStackFrameDescription(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  const char *v6;
  size_t v7;
  std::string::size_type v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const std::string::value_type *v12;
  void *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t size;
  _BYTE *v18;
  std::string *v19;
  size_t v20;
  unint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *__p[2];
  char v28;
  std::string __dst;
  uint64_t (**v30)();
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  char v35;
  uint64_t v36;
  int v37;
  void **v38;
  void *v39;
  __int128 v40;
  _QWORD v41[258];

  v41[256] = *MEMORY[0x1E0C80C00];
  v39 = v41;
  v40 = xmmword_1C86622A0;
  v31 = 0;
  v35 = 0;
  v36 = 0;
  v30 = &off_1E81A7280;
  v38 = &v39;
  v37 = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  sub_1C5E21910((llvm::raw_ostream *)&v30, a1[2], 0, 0, 0);
  v3 = a1[2];
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    v5 = (unsigned int *)(*(_QWORD *)a1 + 48);
    while (1)
    {
      v6 = (const char *)*((_QWORD *)v5 - 6);
      v7 = strlen(v6);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v8 = v7;
      if (v7 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7;
      p_dst = &__dst;
      if (v7)
        goto LABEL_10;
LABEL_11:
      p_dst->__r_.__value_.__s.__data_[v8] = 0;
      if (*v5)
      {
        std::string::append(&__dst, ":");
        sub_1C5A128A4(v5, (uint64_t)__p);
        v12 = v28 >= 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
        v13 = v28 >= 0 ? (void *)(v28 & 0x7F) : __p[1];
        std::string::append(&__dst, v12, (std::string::size_type)v13);
        if (v28 < 0)
          operator delete(__p[0]);
      }
      if (v33 == v34)
      {
        v14 = llvm::raw_ostream::write((llvm::raw_ostream *)&v30, " ", 1uLL);
      }
      else
      {
        *v34++ = 32;
        v14 = (llvm::raw_ostream *)&v30;
      }
      sub_1C5E21910(v14, *((_QWORD *)v5 - 1), 0, 0, 0);
      v15 = (_BYTE *)*((_QWORD *)v14 + 4);
      if (*((_BYTE **)v14 + 3) == v15)
      {
        v14 = llvm::raw_ostream::write(v14, " ", 1uLL);
      }
      else
      {
        *v15 = 32;
        ++*((_QWORD *)v14 + 4);
      }
      sub_1C5E21910(v14, *((_QWORD *)v5 - 5), 0, 0, 0);
      v16 = (_BYTE *)*((_QWORD *)v14 + 4);
      if (*((_BYTE **)v14 + 3) == v16)
      {
        v14 = llvm::raw_ostream::write(v14, " ", 1uLL);
      }
      else
      {
        *v16 = 32;
        ++*((_QWORD *)v14 + 4);
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __dst.__r_.__value_.__l.__size_;
      sub_1C5E21910(v14, size, 0, 0, 0);
      v18 = (_BYTE *)*((_QWORD *)v14 + 4);
      if (*((_BYTE **)v14 + 3) == v18)
      {
        v14 = llvm::raw_ostream::write(v14, " ", 1uLL);
      }
      else
      {
        *v18 = 32;
        ++*((_QWORD *)v14 + 4);
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &__dst;
      else
        v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
      else
        v20 = __dst.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v14, (const char *)v19, v20);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v5 += 14;
      v4 -= 56;
      if (!v4)
        goto LABEL_45;
    }
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_10:
    memmove(p_dst, v6, v8);
    goto LABEL_11;
  }
LABEL_45:
  v22 = *v38;
  v21 = (unint64_t)v38[1];
  v23 = (char *)(a2 + 24);
  *(_QWORD *)a2 = a2 + 24;
  *(_OWORD *)(a2 + 8) = xmmword_1C64638C0;
  if (v21 >= 0x41)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, v23, v21, 1);
    v23 = *(char **)a2;
    v24 = *(_QWORD *)(a2 + 8);
    goto LABEL_47;
  }
  v24 = 0;
  v25 = 0;
  if (v21)
  {
LABEL_47:
    memcpy(&v23[v24], v22, v21);
    v25 = *(_QWORD *)(a2 + 8);
  }
  *(_QWORD *)(a2 + 8) = v25 + v21;
  v30 = (uint64_t (**)())off_1E81A6E70;
  if (v37 == 1 && v32)
    MEMORY[0x1CAA32F9C](v32, 0x1000C8077774924);
  if (v39 != v41)
    free(v39);
}

__n128 sub_1C5EB3CCC(uint64_t a1, char *a2, unsigned int (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t a5, uint64_t a6, __n128 result)
{
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  __int128 v12;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __n128 v51;
  uint64_t v52;

  if (a4 >= 2)
  {
    v9 = a1;
    if (a4 == 2)
    {
      v10 = (__n128 *)(a2 - 56);
      if ((*a3)((uint64_t)(a2 - 56), a1))
      {
        v11 = *(_QWORD *)(v9 + 48);
        v12 = *(_OWORD *)(v9 + 16);
        result = *(__n128 *)(v9 + 32);
        v13 = *(__n128 *)v9;
        v15 = *(_OWORD *)(a2 - 40);
        v14 = *(_OWORD *)(a2 - 24);
        v16 = *v10;
        *(_QWORD *)(v9 + 48) = *((_QWORD *)a2 - 1);
        *(_OWORD *)(v9 + 16) = v15;
        *(_OWORD *)(v9 + 32) = v14;
        *(__n128 *)v9 = v16;
        *v10 = v13;
        *(_OWORD *)(a2 - 40) = v12;
        *(__n128 *)(a2 - 24) = result;
        *((_QWORD *)a2 - 1) = v11;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v29 = a5;
      v30 = a4 >> 1;
      v31 = a1 + 56 * (a4 >> 1);
      v32 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v33 = sub_1C5EB3FE4(a1, v31, a3, v32, a5, result);
        v34 = v29 + 56 * v30;
        result = sub_1C5EB3FE4(v9 + 56 * (a4 >> 1), (uint64_t)a2, a3, a4 - (a4 >> 1), v34, v33);
        v35 = v29 + 56 * a4;
        v36 = v34;
        while (v36 != v35)
        {
          if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v36, v29, result))
          {
            result = *(__n128 *)v36;
            v37 = *(_OWORD *)(v36 + 16);
            v38 = *(_OWORD *)(v36 + 32);
            *(_QWORD *)(v9 + 48) = *(_QWORD *)(v36 + 48);
            *(_OWORD *)(v9 + 16) = v37;
            *(_OWORD *)(v9 + 32) = v38;
            *(__n128 *)v9 = result;
            v36 += 56;
          }
          else
          {
            result = *(__n128 *)v29;
            v39 = *(_OWORD *)(v29 + 16);
            v40 = *(_OWORD *)(v29 + 32);
            *(_QWORD *)(v9 + 48) = *(_QWORD *)(v29 + 48);
            *(_OWORD *)(v9 + 16) = v39;
            *(_OWORD *)(v9 + 32) = v40;
            *(__n128 *)v9 = result;
            v29 += 56;
          }
          v9 += 56;
          if (v29 == v34)
          {
            if (v36 != v35)
            {
              v41 = 0;
              do
              {
                v42 = v9 + v41;
                result = *(__n128 *)(v36 + v41);
                v43 = *(_OWORD *)(v36 + v41 + 16);
                v44 = *(_OWORD *)(v36 + v41 + 32);
                *(_QWORD *)(v42 + 48) = *(_QWORD *)(v36 + v41 + 48);
                *(_OWORD *)(v42 + 16) = v43;
                *(_OWORD *)(v42 + 32) = v44;
                *(__n128 *)v42 = result;
                v41 += 56;
              }
              while (v36 + v41 != v35);
            }
            return result;
          }
        }
        if (v29 != v34)
        {
          v45 = 0;
          do
          {
            v46 = v9 + v45;
            result = *(__n128 *)(v29 + v45);
            v47 = *(_OWORD *)(v29 + v45 + 16);
            v48 = *(_OWORD *)(v29 + v45 + 32);
            *(_QWORD *)(v46 + 48) = *(_QWORD *)(v29 + v45 + 48);
            *(_OWORD *)(v46 + 16) = v47;
            *(_OWORD *)(v46 + 32) = v48;
            *(__n128 *)v46 = result;
            v45 += 56;
          }
          while (v29 + v45 != v34);
        }
      }
      else
      {
        sub_1C5EB3CCC(a1, v31, a3, v32, a5, a6);
        sub_1C5EB3CCC(v9 + 56 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v29, a6);
        sub_1C5EB42F0(v9, (char *)(v9 + 56 * (a4 >> 1)), a2, (unsigned int (**)(char *, unint64_t))a3, a4 >> 1, a4 - (a4 >> 1), (char *)v29, a6);
      }
    }
    else if ((char *)a1 != a2)
    {
      v18 = a1 + 56;
      if ((char *)(a1 + 56) != a2)
      {
        v19 = 0;
        v20 = a1;
        do
        {
          v21 = v20;
          v20 = v18;
          if ((*a3)(v18, v21))
          {
            v22 = *(_OWORD *)(v20 + 16);
            v49 = *(_OWORD *)v20;
            v50 = v22;
            v51 = *(__n128 *)(v20 + 32);
            v52 = *(_QWORD *)(v20 + 48);
            v23 = v19;
            while (1)
            {
              v24 = v9 + v23;
              v25 = *(_OWORD *)(v9 + v23 + 16);
              *(_OWORD *)(v24 + 56) = *(_OWORD *)(v9 + v23);
              *(_OWORD *)(v24 + 72) = v25;
              *(_OWORD *)(v24 + 88) = *(_OWORD *)(v9 + v23 + 32);
              *(_QWORD *)(v24 + 104) = *(_QWORD *)(v9 + v23 + 48);
              if (!v23)
                break;
              v23 -= 56;
              if ((((uint64_t (*)(__int128 *, uint64_t))*a3)(&v49, v23 + v9) & 1) == 0)
              {
                v26 = v9 + v23 + 56;
                goto LABEL_15;
              }
            }
            v26 = v9;
LABEL_15:
            v27 = v50;
            *(_OWORD *)v26 = v49;
            *(_OWORD *)(v26 + 16) = v27;
            result = v51;
            *(__n128 *)(v26 + 32) = v51;
            *(_QWORD *)(v26 + 48) = v52;
          }
          v18 = v20 + 56;
          v19 += 56;
        }
        while ((char *)(v20 + 56) != a2);
      }
    }
  }
  return result;
}

__n128 sub_1C5EB3FE4(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v6;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;

  if (a4)
  {
    v6 = a5;
    v10 = a1;
    if (a4 == 2)
    {
      v13 = a2 - 56;
      if ((*a3)(a2 - 56, a1))
      {
        v14 = *(__n128 *)v13;
        v15 = *(_OWORD *)(v13 + 16);
        v16 = *(_OWORD *)(v13 + 32);
        *(_QWORD *)(v6 + 48) = *(_QWORD *)(v13 + 48);
        *(_OWORD *)(v6 + 16) = v15;
        *(_OWORD *)(v6 + 32) = v16;
        *(__n128 *)v6 = v14;
        result = *(__n128 *)v10;
        v17 = *(_OWORD *)(v10 + 16);
        v18 = *(_OWORD *)(v10 + 32);
        v19 = *(_QWORD *)(v10 + 48);
      }
      else
      {
        v32 = *(__n128 *)v10;
        v33 = *(_OWORD *)(v10 + 16);
        v34 = *(_OWORD *)(v10 + 32);
        *(_QWORD *)(v6 + 48) = *(_QWORD *)(v10 + 48);
        *(_OWORD *)(v6 + 16) = v33;
        *(_OWORD *)(v6 + 32) = v34;
        *(__n128 *)v6 = v32;
        result = *(__n128 *)v13;
        v17 = *(_OWORD *)(v13 + 16);
        v18 = *(_OWORD *)(v13 + 32);
        v19 = *(_QWORD *)(v13 + 48);
      }
      *(_QWORD *)(v6 + 104) = v19;
      *(_OWORD *)(v6 + 72) = v17;
      *(_OWORD *)(v6 + 88) = v18;
      *(__n128 *)(v6 + 56) = result;
    }
    else if (a4 == 1)
    {
      result = *(__n128 *)a1;
      v11 = *(_OWORD *)(a1 + 16);
      v12 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a5 + 48) = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a5 + 16) = v11;
      *(_OWORD *)(a5 + 32) = v12;
      *(__n128 *)a5 = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      v35 = 56 * (a4 >> 1);
      v36 = a1 + v35;
      sub_1C5EB3CCC(a1, a1 + v35, a3, a4 >> 1, a5, a4 >> 1);
      sub_1C5EB3CCC(v10 + v35, a2, a3, a4 - (a4 >> 1), v6 + v35, a4 - (a4 >> 1));
      v37 = v10 + v35;
      while (v37 != a2)
      {
        if ((*a3)(v37, v10))
        {
          result = *(__n128 *)v37;
          v38 = *(_OWORD *)(v37 + 16);
          v39 = *(_OWORD *)(v37 + 32);
          *(_QWORD *)(v6 + 48) = *(_QWORD *)(v37 + 48);
          *(_OWORD *)(v6 + 16) = v38;
          *(_OWORD *)(v6 + 32) = v39;
          *(__n128 *)v6 = result;
          v37 += 56;
        }
        else
        {
          result = *(__n128 *)v10;
          v40 = *(_OWORD *)(v10 + 16);
          v41 = *(_OWORD *)(v10 + 32);
          *(_QWORD *)(v6 + 48) = *(_QWORD *)(v10 + 48);
          *(_OWORD *)(v6 + 16) = v40;
          *(_OWORD *)(v6 + 32) = v41;
          *(__n128 *)v6 = result;
          v10 += 56;
        }
        v6 += 56;
        if (v10 == v36)
        {
          if (v37 != a2)
          {
            v42 = 0;
            do
            {
              v43 = v6 + v42;
              result = *(__n128 *)(v37 + v42);
              v44 = *(_OWORD *)(v37 + v42 + 16);
              v45 = *(_OWORD *)(v37 + v42 + 32);
              *(_QWORD *)(v43 + 48) = *(_QWORD *)(v37 + v42 + 48);
              *(_OWORD *)(v43 + 16) = v44;
              *(_OWORD *)(v43 + 32) = v45;
              *(__n128 *)v43 = result;
              v42 += 56;
            }
            while (v37 + v42 != a2);
          }
          return result;
        }
      }
      if (v10 != v36)
      {
        v46 = 0;
        do
        {
          v47 = v6 + v46;
          result = *(__n128 *)(v10 + v46);
          v48 = *(_OWORD *)(v10 + v46 + 16);
          v49 = *(_OWORD *)(v10 + v46 + 32);
          *(_QWORD *)(v47 + 48) = *(_QWORD *)(v10 + v46 + 48);
          *(_OWORD *)(v47 + 16) = v48;
          *(_OWORD *)(v47 + 32) = v49;
          *(__n128 *)v47 = result;
          v46 += 56;
        }
        while (v10 + v46 != v36);
      }
    }
    else if (a1 != a2)
    {
      result = *(__n128 *)a1;
      v20 = *(_OWORD *)(a1 + 16);
      v21 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a5 + 48) = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a5 + 16) = v20;
      *(_OWORD *)(a5 + 32) = v21;
      *(__n128 *)a5 = result;
      v22 = a1 + 56;
      if (a1 + 56 != a2)
      {
        v23 = 0;
        v24 = a5;
        do
        {
          v25 = v24;
          v24 += 56;
          v26 = v24;
          if ((*a3)(v22, v25))
          {
            v27 = *(_OWORD *)(v25 + 16);
            *(_OWORD *)v24 = *(_OWORD *)v25;
            *(_OWORD *)(v24 + 16) = v27;
            *(_OWORD *)(v24 + 32) = *(_OWORD *)(v25 + 32);
            *(_QWORD *)(v24 + 48) = *(_QWORD *)(v25 + 48);
            v26 = v6;
            if (v25 != v6)
            {
              v28 = v23;
              while (1)
              {
                v26 = v6 + v28;
                if (!(*a3)(v22, v6 + v28 - 56))
                  break;
                v29 = *(_OWORD *)(v6 + v28 - 40);
                *(_OWORD *)v26 = *(_OWORD *)(v6 + v28 - 56);
                *(_OWORD *)(v26 + 16) = v29;
                *(_OWORD *)(v26 + 32) = *(_OWORD *)(v6 + v28 - 24);
                *(_QWORD *)(v26 + 48) = *(_QWORD *)(v6 + v28 - 8);
                v28 -= 56;
                if (!v28)
                {
                  v26 = v6;
                  break;
                }
              }
            }
          }
          result = *(__n128 *)v22;
          v30 = *(_OWORD *)(v22 + 16);
          v31 = *(_OWORD *)(v22 + 32);
          *(_QWORD *)(v26 + 48) = *(_QWORD *)(v22 + 48);
          *(_OWORD *)(v26 + 16) = v30;
          *(_OWORD *)(v26 + 32) = v31;
          *(__n128 *)v26 = result;
          v22 += 56;
          v23 += 56;
        }
        while (v22 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5EB42F0(uint64_t result, char *a2, char *a3, unsigned int (**a4)(char *, unint64_t), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v15;
  char *i;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int (*v25)(char *, unint64_t);
  char *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int (**v95)(char *, unint64_t);
  char *__src;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  if (!a6)
    return result;
  v10 = a6;
  v15 = (char *)result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    for (i = v15; ; i += 56)
    {
      result = ((uint64_t (*)(char *, char *))*a4)(a2, v15);
      if ((result & 1) != 0)
        break;
      v15 += 56;
      if (!--a5)
        return result;
    }
    v95 = a4;
    __src = a2;
    v93 = a8;
    v94 = v10;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v116 = *((_QWORD *)v15 + 6);
        v106 = *((_OWORD *)v15 + 1);
        v111 = *((_OWORD *)v15 + 2);
        v101 = *(_OWORD *)v15;
        v85 = *(_OWORD *)a2;
        v86 = *((_OWORD *)a2 + 1);
        v87 = *((_OWORD *)a2 + 2);
        *((_QWORD *)v15 + 6) = *((_QWORD *)a2 + 6);
        *((_OWORD *)v15 + 1) = v86;
        *((_OWORD *)v15 + 2) = v87;
        *(_OWORD *)v15 = v85;
        *((_QWORD *)a2 + 6) = v116;
        *((_OWORD *)a2 + 1) = v106;
        *((_OWORD *)a2 + 2) = v111;
        *(_OWORD *)a2 = v101;
        return result;
      }
      v22 = a7;
      if (a5 >= 0)
        v24 = a5;
      else
        v24 = a5 + 1;
      v21 = v24 >> 1;
      v19 = &v15[56 * (v24 >> 1)];
      v23 = a2;
      v18 = 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 3);
      if (a3 == __src)
      {
        v20 = a3;
      }
      else
      {
        v25 = *a4;
        v20 = __src;
        do
        {
          v26 = &v20[56 * (v18 >> 1)];
          v27 = v25(v26, (unint64_t)v19);
          if (v27)
            v18 += ~(v18 >> 1);
          else
            v18 >>= 1;
          if (v27)
            v20 = v26 + 56;
        }
        while (v18);
        v23 = __src;
        v18 = 0x6DB6DB6DB6DB6DB7 * ((v20 - __src) >> 3);
        v22 = a7;
      }
    }
    else
    {
      if (v10 >= 0)
        v17 = v10;
      else
        v17 = v10 + 1;
      v18 = v17 >> 1;
      v19 = __src;
      v20 = &__src[56 * (v17 >> 1)];
      v21 = 0x6DB6DB6DB6DB6DB7 * ((__src - i) >> 3);
      v22 = a7;
      if (v15 == __src)
      {
        v15 = __src;
        goto LABEL_46;
      }
      v19 = v15;
      do
      {
        if ((*v95)(v20, (unint64_t)&v19[56 * (v21 >> 1)]))
        {
          v21 >>= 1;
        }
        else
        {
          v19 += 56 * (v21 >> 1) + 56;
          v21 += ~(v21 >> 1);
        }
      }
      while (v21);
      v21 = 0x6DB6DB6DB6DB6DB7 * ((v19 - i) >> 3);
      v22 = a7;
      v23 = __src;
    }
    if (v19 != v23)
    {
      if (v23 == v20)
      {
        v20 = v23;
        __src = v19;
      }
      else if (v19 + 56 == v23)
      {
        v113 = *((_QWORD *)v19 + 6);
        v103 = *((_OWORD *)v19 + 1);
        v108 = *((_OWORD *)v19 + 2);
        v98 = *(_OWORD *)v19;
        v35 = v20 - v23;
        v36 = v22;
        memmove(v19, v23, v20 - v23);
        v22 = v36;
        v37 = &v19[v35];
        *((_QWORD *)v37 + 6) = v113;
        *((_OWORD *)v37 + 1) = v103;
        *((_OWORD *)v37 + 2) = v108;
        *(_OWORD *)v37 = v98;
        __src = &v19[v35];
      }
      else if (v23 + 56 == v20)
      {
        v114 = *((_QWORD *)v20 - 1);
        v104 = *(_OWORD *)(v20 - 40);
        v109 = *(_OWORD *)(v20 - 24);
        v99 = *(_OWORD *)(v20 - 56);
        if (v20 - 56 != v19)
        {
          v38 = v22;
          memmove(v19 + 56, v19, v20 - 56 - v19);
          v22 = v38;
        }
        __src = v19 + 56;
        *((_QWORD *)v19 + 6) = v114;
        *((_OWORD *)v19 + 1) = v104;
        *((_OWORD *)v19 + 2) = v109;
        *(_OWORD *)v19 = v99;
      }
      else
      {
        v28 = 0x6DB6DB6DB6DB6DB7 * ((v23 - v19) >> 3);
        if (v28 == 0x6DB6DB6DB6DB6DB7 * ((v20 - v23) >> 3))
        {
          v29 = 0;
          do
          {
            v30 = &__src[v29];
            v31 = &v19[v29];
            v112 = *(_QWORD *)&v19[v29 + 48];
            v102 = *(_OWORD *)&v19[v29 + 16];
            v107 = *(_OWORD *)&v19[v29 + 32];
            v97 = *(_OWORD *)&v19[v29];
            v32 = *(_OWORD *)&__src[v29];
            v33 = *(_OWORD *)&__src[v29 + 16];
            v34 = *(_OWORD *)&__src[v29 + 32];
            *((_QWORD *)v31 + 6) = *(_QWORD *)&__src[v29 + 48];
            *((_OWORD *)v31 + 1) = v33;
            *((_OWORD *)v31 + 2) = v34;
            *(_OWORD *)v31 = v32;
            *((_QWORD *)v30 + 6) = v112;
            *((_OWORD *)v30 + 1) = v102;
            *((_OWORD *)v30 + 2) = v107;
            *(_OWORD *)v30 = v97;
            if (&v19[v29 + 56] == __src)
              break;
            v29 += 56;
          }
          while (v30 + 56 != v20);
        }
        else
        {
          v39 = 0x6DB6DB6DB6DB6DB7 * ((v20 - v23) >> 3);
          v40 = 0x6DB6DB6DB6DB6DB7 * ((v23 - v19) >> 3);
          do
          {
            v41 = v40;
            v40 = v39;
            v39 = v41 % v39;
          }
          while (v39);
          if (v40)
          {
            v42 = &v19[56 * v40];
            do
            {
              v43 = *(_OWORD *)(v42 - 56);
              v44 = *(_OWORD *)(v42 - 40);
              v45 = *(_OWORD *)(v42 - 24);
              v46 = *((_QWORD *)v42 - 1);
              v42 -= 56;
              v115 = v46;
              v105 = v44;
              v110 = v45;
              v100 = v43;
              v47 = &v42[8 * ((v23 - v19) >> 3)];
              v48 = v42;
              do
              {
                v49 = v48;
                v48 = v47;
                v50 = *(_OWORD *)v47;
                v51 = *((_OWORD *)v47 + 1);
                v52 = *((_OWORD *)v47 + 2);
                *((_QWORD *)v49 + 6) = *((_QWORD *)v47 + 6);
                *((_OWORD *)v49 + 1) = v51;
                *((_OWORD *)v49 + 2) = v52;
                *(_OWORD *)v49 = v50;
                v53 = 0x6DB6DB6DB6DB6DB7 * ((v20 - v47) >> 3);
                v54 = __OFSUB__(v28, v53);
                v56 = v28 - v53;
                v55 = (v56 < 0) ^ v54;
                v47 = &v19[56 * v56];
                if (v55)
                  v47 = &v48[8 * ((v23 - v19) >> 3)];
              }
              while (v47 != v42);
              *((_QWORD *)v48 + 6) = v115;
              *((_OWORD *)v48 + 1) = v105;
              *((_OWORD *)v48 + 2) = v110;
              *(_OWORD *)v48 = v100;
            }
            while (v42 != v19);
          }
          __src = &v19[8 * ((v20 - v23) >> 3)];
        }
      }
      goto LABEL_62;
    }
    v19 = v23;
LABEL_46:
    __src = v20;
LABEL_62:
    v57 = v94 - v18;
    if ((uint64_t)(v18 + v21) >= (uint64_t)(v94 - (v18 + v21) + a5))
    {
      a7 = v22;
      result = sub_1C5EB42F0(__src, v20, a3, v95, a5 - v21, v94 - v18);
      v20 = v19;
      v57 = v18;
      v61 = v21;
      a8 = v93;
      a3 = __src;
    }
    else
    {
      v58 = v15;
      v15 = __src;
      v59 = a5 - v21;
      v60 = v21;
      a7 = v22;
      a8 = v93;
      result = sub_1C5EB42F0(v58, v19, __src, v95, v60, v18);
      v61 = v59;
    }
    a5 = v61;
    v10 = v57;
    a2 = v20;
    a4 = v95;
    if (!v57)
      return result;
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v73 = 0;
      do
      {
        v74 = &a7[v73];
        v75 = *(_OWORD *)&v15[v73];
        v76 = *(_OWORD *)&v15[v73 + 16];
        v77 = *(_OWORD *)&v15[v73 + 32];
        *((_QWORD *)v74 + 6) = *(_QWORD *)&v15[v73 + 48];
        *((_OWORD *)v74 + 1) = v76;
        *((_OWORD *)v74 + 2) = v77;
        *(_OWORD *)v74 = v75;
        v73 += 56;
      }
      while (&v15[v73] != a2);
      if (v73)
      {
        v78 = a7;
        while (a2 != a3)
        {
          result = ((uint64_t (*)(char *, char *))*a4)(a2, v78);
          if ((_DWORD)result)
          {
            v79 = *(_OWORD *)a2;
            v80 = *((_OWORD *)a2 + 1);
            v81 = *((_OWORD *)a2 + 2);
            *((_QWORD *)v15 + 6) = *((_QWORD *)a2 + 6);
            *((_OWORD *)v15 + 1) = v80;
            *((_OWORD *)v15 + 2) = v81;
            *(_OWORD *)v15 = v79;
            a2 += 56;
          }
          else
          {
            v82 = *(_OWORD *)v78;
            v83 = *((_OWORD *)v78 + 1);
            v84 = *((_OWORD *)v78 + 2);
            *((_QWORD *)v15 + 6) = *((_QWORD *)v78 + 6);
            *((_OWORD *)v15 + 1) = v83;
            *((_OWORD *)v15 + 2) = v84;
            *(_OWORD *)v15 = v82;
            v78 += 56;
          }
          v15 += 56;
          if (&a7[v73] == v78)
            return result;
        }
        return (uint64_t)memmove(v15, v78, a7 - v78 + v73);
      }
    }
  }
  else if (a2 != a3)
  {
    v62 = 0;
    do
    {
      v63 = &a7[v62];
      v64 = *(_OWORD *)&a2[v62];
      v65 = *(_OWORD *)&a2[v62 + 16];
      v66 = *(_OWORD *)&a2[v62 + 32];
      *((_QWORD *)v63 + 6) = *(_QWORD *)&a2[v62 + 48];
      *((_OWORD *)v63 + 1) = v65;
      *((_OWORD *)v63 + 2) = v66;
      *(_OWORD *)v63 = v64;
      v62 += 56;
    }
    while (&a2[v62] != a3);
    if (v62)
    {
      v67 = &a7[v62];
      v68 = a3 - 56;
      while (a2 != v15)
      {
        result = ((uint64_t (*)(char *, char *))*a4)(v67 - 56, a2 - 56);
        if ((_DWORD)result)
          v69 = a2 - 56;
        else
          v69 = v67 - 56;
        if ((_DWORD)result)
          a2 -= 56;
        else
          v67 -= 56;
        v71 = *((_OWORD *)v69 + 1);
        v70 = *((_OWORD *)v69 + 2);
        v72 = *(_OWORD *)v69;
        *((_QWORD *)v68 + 6) = *((_QWORD *)v69 + 6);
        *((_OWORD *)v68 + 1) = v71;
        *((_OWORD *)v68 + 2) = v70;
        *(_OWORD *)v68 = v72;
        v68 -= 56;
        if (v67 == a7)
          return result;
      }
      if (v67 != a7)
      {
        v88 = 0;
        do
        {
          v89 = &v68[v88];
          v90 = *(_OWORD *)&v67[v88 - 56];
          v91 = *(_OWORD *)&v67[v88 - 40];
          v92 = *(_OWORD *)&v67[v88 - 24];
          *((_QWORD *)v89 + 6) = *(_QWORD *)&v67[v88 - 8];
          *((_OWORD *)v89 + 1) = v91;
          *((_OWORD *)v89 + 2) = v92;
          *(_OWORD *)v89 = v90;
          v88 -= 56;
        }
        while (&v67[v88] != a7);
      }
    }
  }
  return result;
}

uint64_t llvm::buildAssumeFromInst(llvm *this, llvm::Instruction *a2)
{
  uint64_t i;
  uint64_t v3;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _BYTE v10[216];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!byte_1ED837140)
    return 0;
  v5 = *(uint64_t ***)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40);
  v6 = 1;
  for (i = 2; i != 26; i += 3)
    *(_OWORD *)&(&v5)[i] = xmmword_1C85F2170;
  v8 = v10;
  v9 = 0x800000000;
  memset(&v10[192], 0, 24);
  sub_1C5EB4B1C((unint64_t)&v5, (uint64_t)this);
  v3 = sub_1C5EB4C70(&v5);
  if (v8 != v10)
    free(v8);
  if ((v6 & 1) == 0)
    MEMORY[0x1CAA32FB4](v7, 8);
  return v3;
}

void sub_1C5EB4B1C(unint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 <= 0x3B)
  {
    if (v2 != 33 && v2 != 39)
      return;
    goto LABEL_8;
  }
  if (v2 == 60)
  {
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)a2;
LABEL_18:
    sub_1C5EB72C8(a1, a2, v8, v9, ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F);
    return;
  }
  if (v2 == 61)
  {
    v8 = *(_QWORD *)(a2 - 32);
    v9 = **(_QWORD **)(a2 - 64);
    goto LABEL_18;
  }
  if (v2 != 84)
    return;
LABEL_8:
  v13 = a2;
  v12[0] = &v13;
  v12[1] = a1;
  if (v2 == 84)
  {
    v3 = 0;
  }
  else if (v2 == 39)
  {
    v3 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v3 = 2;
  }
  v4 = 0;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = -(uint64_t)(v5 & 0x7FFFFFF);
  if (v5 < 0)
  {
    v10 = a2 - 32 * (v5 & 0x7FFFFFF);
    v11 = *(_QWORD *)(v10 - 8);
    if ((v11 & 0xFFFFFFFF0) != 0)
      v4 = *(_DWORD *)(v10 - 12) - *(_DWORD *)(v10 - v11);
    else
      v4 = 0;
  }
  sub_1C5EB73C0((unint64_t)v12, *(_QWORD *)(a2 + 64), (-32 * v3 + 32 * (unint64_t)-v4 - 32 * v6 - 32) >> 5);
  v7 = *(_QWORD *)(v13 - 32);
  if (v7 && !*(_BYTE *)(v7 + 16) && *(_QWORD *)(v7 + 24) == *(_QWORD *)(v13 + 72))
    sub_1C5EB73C0((unint64_t)v12, *(_QWORD *)(v7 + 112), *(_DWORD *)(v7 + 96));
}

uint64_t sub_1C5EB4C70(uint64_t ***a1)
{
  uint64_t Declaration;
  const llvm::APInt *v3;
  unsigned int v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  llvm::ConstantInt *v9;
  unint64_t v10;
  unint64_t v11;
  llvm::ValueHandleBase *v12;
  uint64_t v13;
  char *NameFromAttrKind;
  unint64_t v15;
  char *v16;
  size_t v17;
  __int128 *p_dst;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::ValueHandleBase *v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void *v46;
  llvm::ConstantInt *v48;
  unsigned int v49;
  char v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  __int128 __dst;
  unint64_t v61;
  void *v62[2];
  unint64_t v63;
  void *__p;
  void *v65;
  char *v66;
  char v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[2];
  void *v71;
  uint64_t v72;
  _QWORD v73[50];

  v73[48] = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)a1 + 54))
    return 0;
  Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)*a1, 7, 0, 0);
  v58 = **a1;
  v59 = Declaration;
  v71 = v73;
  v72 = 0x800000000;
  v4 = *((_DWORD *)a1 + 54);
  if (v4)
  {
    v5 = a1[26];
    v6 = &v5[3 * v4];
    do
    {
      v68 = v70;
      v69 = 0x200000000;
      if (*v5)
      {
        v70[0] = *v5;
        LODWORD(v69) = 1;
      }
      v7 = (uint64_t)v5[2];
      if (v7)
      {
        v8 = ***a1;
        v9 = *(llvm::ConstantInt **)(v8 + 1984);
        v10 = *(unsigned int *)(v8 + 1992);
        LODWORD(v62[1]) = v10 >> 8;
        if (v10 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)v62, v7, 0);
        }
        else
        {
          if (v10 <= 0xFF)
            v11 = 0;
          else
            v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
          v62[0] = (void *)(v11 & v7);
        }
        v12 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)v62, v3);
        if (LODWORD(v62[1]) >= 0x41 && v62[0])
          MEMORY[0x1CAA32F9C](v62[0], 0x1000C8000313F17);
        v13 = v69;
        if (v69 >= (unint64_t)HIDWORD(v69))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, (uint64_t)v70, v69 + 1, 8);
          v13 = v69;
        }
        *((_QWORD *)v68 + v13) = v12;
        LODWORD(v69) = v69 + 1;
      }
      NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*((_DWORD *)v5 + 2));
      if (v15 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v16 = NameFromAttrKind;
      v17 = v15;
      if (v15 >= 0x17)
      {
        v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v19 = v15 | 7;
        v20 = v19 + 1;
        p_dst = (__int128 *)operator new(v19 + 1);
        *((_QWORD *)&__dst + 1) = v17;
        v61 = v20 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v61) = v15;
        p_dst = &__dst;
        if (!v15)
          goto LABEL_24;
      }
      memmove(p_dst, v16, v17);
LABEL_24:
      *((_BYTE *)p_dst + v17) = 0;
      v21 = v68;
      v22 = v69;
      *(_OWORD *)v62 = __dst;
      v63 = v61;
      __dst = 0uLL;
      v61 = 0;
      v65 = 0;
      v66 = 0;
      __p = 0;
      if ((_DWORD)v69)
      {
        v23 = 8 * v69;
        __p = operator new(v23);
        v65 = __p;
        v24 = (char *)__p + 8 * v22;
        v66 = v24;
        memmove(__p, v21, v23);
        v65 = v24;
      }
      sub_1C5062D60((uint64_t)&v71, (unint64_t)v62);
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v63) < 0)
        operator delete(v62[0]);
      if (v68 != v70)
        free(v68);
      v5 += 3;
    }
    while (v5 != v6);
  }
  v25 = v59;
  if (v59)
    v26 = *(_QWORD *)(v59 + 24);
  else
    v26 = 0;
  v28 = *v58;
  v29 = *(llvm::ValueHandleBase **)(*v58 + 1560);
  if (!v29)
  {
    v48 = *(llvm::ConstantInt **)(v28 + 1888);
    v49 = *(_DWORD *)(v28 + 1896);
    LODWORD(v62[1]) = v49 >> 8;
    if (v49 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)v62, 1, 0);
    }
    else
    {
      if (v49 <= 0xFF)
        v50 = 0;
      else
        v50 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v49);
      v62[0] = (void *)(v50 & 1);
    }
    v29 = llvm::ConstantInt::get(v48, (llvm::LLVMContext *)v62, v3);
    if (LODWORD(v62[1]) >= 0x41 && v62[0])
      MEMORY[0x1CAA32F9C](v62[0], 0x1000C8000313F17);
    *(_QWORD *)(v28 + 1560) = v29;
  }
  v68 = v29;
  v30 = (char *)v71;
  v31 = v72;
  LOWORD(v65) = 257;
  if ((_DWORD)v72)
  {
    v51 = 0;
    v52 = 48 * v72;
    v53 = (char *)v71 + 32;
    do
    {
      v51 += (*v53 - *(v53 - 1)) >> 3;
      v53 += 6;
      v52 -= 48;
    }
    while (v52);
    v32 = v51 + 2;
    v25 = v59;
  }
  else
  {
    v32 = 2;
  }
  v33 = (16 * v72);
  if ((_DWORD)v33)
    v34 = (16 * (_DWORD)v72) | 8u;
  else
    v34 = 0;
  v35 = (char *)operator new(v34 + 32 * v32 + 80);
  v36 = &v35[v34];
  v27 = (uint64_t)&v35[32 * v32 + v34];
  *(_DWORD *)(v27 + 20) = v32 & 0x7FFFFFF | (((_DWORD)v33 != 0) << 31) | *(_DWORD *)(v27 + 20) & 0x38000000;
  if (v32)
  {
    do
    {
      *(_QWORD *)v36 = 0;
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v36 + 2) = 0;
      *((_QWORD *)v36 + 3) = v27;
      v36 += 32;
    }
    while (v36 != (char *)v27);
  }
  if ((_DWORD)v33)
    *(_QWORD *)&v35[v33] = v33;
  if ((_DWORD)v31)
  {
    v54 = 0;
    v55 = 48 * v31;
    v56 = v30 + 32;
    do
    {
      v54 += (*v56 - *(v56 - 1)) >> 3;
      v56 += 6;
      v55 -= 48;
    }
    while (v55);
    v37 = (v54 + 2) & 0x7FFFFFF;
    v25 = v59;
  }
  else
  {
    v37 = 2;
  }
  *(_QWORD *)v27 = **(_QWORD **)(v26 + 16);
  *(_QWORD *)(v27 + 8) = 0;
  v38 = *(_DWORD *)(v27 + 20) & 0xC0000000 | v37;
  *(_DWORD *)(v27 + 16) = 84;
  *(_DWORD *)(v27 + 20) = v38;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_DWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 64) = 0;
  *(_QWORD *)(v27 + 72) = v26;
  sub_1C5382FD4((uint64_t)&v67, (uint64_t *)&v68, &v69, v27 - 32 * v37);
  v39 = (uint64_t *)(v27 - 32);
  if (*(_QWORD *)(v27 - 32))
  {
    **(_QWORD **)(v27 - 16) = *(_QWORD *)(v27 - 24);
    v57 = *(_QWORD *)(v27 - 24);
    if (v57)
      *(_QWORD *)(v57 + 16) = *(_QWORD *)(v27 - 16);
  }
  *v39 = v25;
  if (v25)
  {
    v42 = *(_QWORD *)(v25 + 8);
    v41 = (uint64_t **)(v25 + 8);
    v40 = v42;
    *(_QWORD *)(v27 - 24) = v42;
    if (v42)
      *(_QWORD *)(v40 + 16) = v27 - 24;
    *(_QWORD *)(v27 - 16) = v41;
    *v41 = v39;
  }
  llvm::CallBase::populateBundleOperandInfos(v27, (uint64_t)v30, v31, 1u);
  llvm::Value::setName((uint64_t ***)v27, (uint64_t)v62);
  v43 = (char *)v71;
  if ((_DWORD)v72)
  {
    v44 = 48 * v72;
    do
    {
      v45 = &v43[v44];
      v46 = *(void **)&v43[v44 - 24];
      if (v46)
      {
        *((_QWORD *)v45 - 2) = v46;
        operator delete(v46);
      }
      if (*(v45 - 25) < 0)
        operator delete(*((void **)v45 - 6));
      v44 -= 48;
    }
    while (v44);
    v43 = (char *)v71;
  }
  if (v43 != (char *)v73)
    free(v43);
  return v27;
}

void llvm::salvageKnowledge(llvm *this, char **a2, llvm::AssumptionCache *a3, llvm::DominatorTree *a4)
{
  uint64_t i;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[28];

  v19[27] = *MEMORY[0x1E0C80C00];
  if (byte_1ED837140 && *((unsigned __int8 *)this + 16) - 29 >= 0xB)
  {
    v14 = *(uint64_t ***)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40);
    v15 = 1;
    for (i = 2; i != 26; i += 3)
      *(_OWORD *)&(&v14)[i] = xmmword_1C85F2170;
    v17 = v19;
    v18 = 0x800000000;
    v19[24] = this;
    v19[25] = a2;
    v19[26] = a3;
    sub_1C5EB4B1C((unint64_t)&v14, (uint64_t)this);
    v7 = sub_1C5EB4C70(&v14);
    if (v7)
    {
      v8 = (llvm::Value *)v7;
      v9 = *((_QWORD *)this + 5);
      *(_QWORD *)(v7 + 40) = v9;
      *(_WORD *)(v9 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v7 + 23) & 0x10) != 0)
      {
        v12 = *(_QWORD *)(v9 + 56);
        if (v12)
        {
          v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
          if (v13)
            llvm::ValueSymbolTable::reinsertValue(v13, v8);
        }
      }
      v11 = *((_QWORD *)this + 3);
      v10 = (_QWORD *)((char *)this + 24);
      *((_QWORD *)v8 + 3) = v11;
      *((_QWORD *)v8 + 4) = v10;
      *(_QWORD *)(v11 + 8) = (char *)v8 + 24;
      *v10 = (char *)v8 + 24;
      if (a2)
        llvm::AssumptionCache::registerAssumption(a2, (uint64_t)v8);
    }
    if (v17 != v19)
      free(v17);
    if ((v15 & 1) == 0)
      MEMORY[0x1CAA32FB4](v16, 8);
  }
}

uint64_t llvm::buildAssumeFromKnowledge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x1E0C80C00];
  v12 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 56) + 40);
  v13 = 1;
  for (i = 2; i != 26; i += 3)
    *(_OWORD *)&(&v12)[i] = xmmword_1C85F2170;
  v15 = v17;
  v16 = 0x800000000;
  v17[24] = a3;
  v17[25] = a4;
  v17[26] = a5;
  if (a2)
  {
    v7 = 24 * a2;
    do
    {
      v10 = *(_OWORD *)a1;
      v11 = *(_QWORD *)(a1 + 16);
      sub_1C5EB54D0((unint64_t)&v12, &v10);
      a1 += 24;
      v7 -= 24;
    }
    while (v7);
  }
  v8 = sub_1C5EB4C70(&v12);
  if (v15 != v17)
    free(v15);
  if ((v13 & 1) == 0)
    MEMORY[0x1CAA32FB4](v14, 8);
  return v8;
}

uint64_t sub_1C5EB54D0(unint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  sub_1C5EB5740(&v12, (llvm::DataLayout *)(*(_QWORD *)a1 + 272), (uint64_t)&v14);
  *a2 = v14;
  v4 = v15;
  *((_QWORD *)a2 + 2) = v15;
  v10 = *a2;
  v11 = v4;
  result = sub_1C5EB5888(a1, (uint64_t)&v10);
  if ((_DWORD)result)
  {
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 2);
    result = sub_1C5EB59B0(a1, (int *)&v8);
    if ((result & 1) == 0)
    {
      *(_QWORD *)&v14 = *((_QWORD *)a2 + 2);
      DWORD2(v14) = *(_DWORD *)a2;
      result = sub_1C63A52AC(a1 + 8, &v14);
      if (result == *(_QWORD *)(a1 + 208) + 24 * *(unsigned int *)(a1 + 216))
      {
        v7 = *((_QWORD *)a2 + 1);
        result = sub_1C63A530C(a1 + 8, &v14);
        *(_QWORD *)result = v7;
      }
      else
      {
        v6 = *(_QWORD *)(result + 16);
        if (v6 <= *((_QWORD *)a2 + 1))
          v6 = *((_QWORD *)a2 + 1);
        *(_QWORD *)(result + 16) = v6;
      }
    }
  }
  return result;
}

void llvm::simplifyRetainedKnowledge(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[28];

  v23[27] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40);
  v18 = v7;
  v19 = 1;
  for (i = 16; i != 208; i += 24)
    *(_OWORD *)((char *)&v18 + i) = xmmword_1C85F2170;
  v21 = v23;
  v22 = 0x800000000;
  v23[24] = a1;
  v23[25] = a3;
  v23[26] = a4;
  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  sub_1C5EB5740(&v14, (llvm::DataLayout *)(v7 + 272), (uint64_t)&v16);
  *a2 = v16;
  v9 = v17;
  *((_QWORD *)a2 + 2) = v17;
  v12 = *a2;
  v13 = v9;
  if ((sub_1C5EB5888((uint64_t)&v18, (uint64_t)&v12) & 1) != 0
    && (v10 = *a2, v11 = *((_QWORD *)a2 + 2), !sub_1C5EB59B0((unint64_t)&v18, (int *)&v10)))
  {
    *(_OWORD *)a5 = *a2;
    *(_QWORD *)(a5 + 16) = *((_QWORD *)a2 + 2);
  }
  else
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  if (v21 != v23)
    free(v21);
  if ((v19 & 1) == 0)
    MEMORY[0x1CAA32FB4](v20, 8);
}

__n128 sub_1C5EB5740@<Q0>(_QWORD *a1@<X0>, llvm::DataLayout *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t UnderlyingObject;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  const void *v14;
  llvm::DataLayout *v15;

  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 - 76) < 2)
  {
    v9 = (uint64_t *)a1[2];
    LODWORD(v15) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a2, *v9);
    if (v15 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v14, 0, 0);
    else
      v14 = 0;
    v11 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v9, a2, &v14, 0, 0, 0, v10);
    if (v15 > 0x40)
    {
      v12 = *(_QWORD *)v14;
      MEMORY[0x1CAA32F9C]();
      if (v12 < 0)
        goto LABEL_15;
    }
    else
    {
      v12 = (uint64_t)((_QWORD)v14 << -(uint64_t)v15) >> -(uint64_t)v15;
      if (v12 < 0)
        goto LABEL_15;
    }
    a1[1] += v12;
    a1[2] = v11;
    *(_QWORD *)(a3 + 16) = v11;
LABEL_12:
    result = *(__n128 *)a1;
    *(_OWORD *)a3 = *(_OWORD *)a1;
    return result;
  }
  if (v6 == 39)
  {
    UnderlyingObject = (uint64_t)llvm::getUnderlyingObject((llvm *)a1[2], (const llvm::Value *)6);
    goto LABEL_11;
  }
  if (v6 == 74)
  {
    v7 = a1[2];
    v14 = a1;
    v15 = a2;
    UnderlyingObject = llvm::Value::stripInBoundsOffsets(v7, (void (*)(uint64_t, uint64_t))sub_1C5EB77B4, (uint64_t)&v14);
LABEL_11:
    a1[2] = UnderlyingObject;
    *(_QWORD *)(a3 + 16) = UnderlyingObject;
    goto LABEL_12;
  }
LABEL_15:
  result = *(__n128 *)a1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = a1[2];
  return result;
}

uint64_t sub_1C5EB5888(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unsigned int v6;
  uint64_t AttributeAtIndex;
  unint64_t v8;
  uint64_t result;
  llvm::Value *v10;
  uint64_t SingleUndroppableUse;

  if (!*(_DWORD *)a2)
    return 0;
  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    return 1;
  if (*(_BYTE *)(*(_QWORD *)v3 + 8) == 15)
  {
    v5 = *((unsigned __int8 *)llvm::getUnderlyingObject(*(llvm **)(a2 + 16), (const llvm::Value *)6) + 16);
    if (v5 < 0x3C && ((0x80000000000000FuLL >> v5) & 1) != 0)
      return 0;
    v3 = *(_QWORD *)(a2 + 16);
  }
  v6 = *(unsigned __int8 *)(v3 + 16);
  if (v3 && v6 == 21)
  {
    if (!llvm::Argument::hasAttribute(v3, *(_DWORD *)a2))
      return 1;
    if ((*(_DWORD *)a2 - 74) <= 6)
    {
      AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)(*(_QWORD *)(v3 + 24) + 112), *(_DWORD *)(v3 + 32) + 1, *(_DWORD *)a2);
      v8 = AttributeAtIndex ? *(_QWORD *)(AttributeAtIndex + 16) : 0;
      if (v8 < *(_QWORD *)(a2 + 8))
        return 1;
    }
    return 0;
  }
  result = 1;
  if (v3 && v6 >= 0x1C)
  {
    if (llvm::wouldInstructionBeTriviallyDead(v3, 0))
    {
      v10 = *(llvm::Value **)(a2 + 16);
      if (!*((_QWORD *)v10 + 1))
        return 0;
      SingleUndroppableUse = llvm::Value::getSingleUndroppableUse(v10);
      if (SingleUndroppableUse)
      {
        if (*(_QWORD *)(SingleUndroppableUse + 24) == *(_QWORD *)(a1 + 416))
          return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_1C5EB59B0(unint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t v5;
  const llvm::APInt *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::ConstantInt *v10;
  unint64_t v11;
  unint64_t v12;
  llvm::ValueHandleBase *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::ValueHandleBase *v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  char *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  char v26;

  if (!*(_QWORD *)(a1 + 416))
    return 0;
  result = *((_QWORD *)a2 + 2);
  if (result)
  {
    v26 = 0;
    v25 = 0;
    v24 = *a2;
    v5 = *(_QWORD *)(a1 + 424);
    v20 = a1;
    v21 = a2;
    v22 = &v26;
    v23 = &v25;
    llvm::getKnowledgeForValue(result, &v24, 1, v5, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1C5EB7820, (uint64_t)&v20, (uint64_t)&v19);
    v7 = v25;
    if (v25)
    {
      v8 = ***(_QWORD ***)a1;
      v9 = *((_QWORD *)a2 + 1);
      v10 = *(llvm::ConstantInt **)(v8 + 1984);
      v11 = *(unsigned int *)(v8 + 1992);
      LODWORD(v21) = v11 >> 8;
      if (v11 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v20, v9, 0);
      }
      else
      {
        if (v11 <= 0xFF)
          v12 = 0;
        else
          v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
        v20 = v12 & v9;
      }
      v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v20, v6);
      if (v21 >= 0x41 && v20)
      {
        v18 = v13;
        MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
        v13 = v18;
      }
      if (*(_QWORD *)v7)
      {
        **(_QWORD **)(v7 + 16) = *(_QWORD *)(v7 + 8);
        v14 = *(_QWORD *)(v7 + 8);
        if (v14)
          *(_QWORD *)(v14 + 16) = *(_QWORD *)(v7 + 16);
      }
      *(_QWORD *)v7 = v13;
      if (v13)
      {
        v17 = *((_QWORD *)v13 + 1);
        v15 = (_QWORD *)((char *)v13 + 8);
        v16 = v17;
        *(_QWORD *)(v7 + 8) = v17;
        if (v17)
          *(_QWORD *)(v16 + 16) = v7 + 8;
        *(_QWORD *)(v7 + 16) = v15;
        *v15 = v7;
      }
    }
    return v26 != 0;
  }
  return result;
}

BOOL sub_1C5EB5B2C(uint64_t ***a1, char **a2, llvm::Instruction *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t i;
  uint64_t *v7;
  uint64_t j;
  _BYTE *v9;
  const void *v10;
  const void *v11;
  int v12;
  unsigned int v13;
  _BYTE *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm *v33;
  uint64_t v34;
  int v35;
  const llvm::DominatorTree *v36;
  int hasAttribute;
  uint64_t AttributeAtIndex;
  unint64_t v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t **v42;
  uint64_t *k;
  uint64_t *v44;
  const llvm::Instruction *v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t **v49;
  uint64_t *m;
  uint64_t *v51;
  uint64_t v53;
  char v54;
  const llvm::DominatorTree *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  _DWORD *v60;
  unint64_t v61;
  uint64_t v62;
  const llvm::APInt *v63;
  const llvm::Instruction *v64;
  llvm::ConstantInt *v65;
  unsigned int v66;
  unint64_t v67;
  llvm::ValueHandleBase *v68;
  char *v69;
  uint64_t v70;
  llvm::ValueHandleBase **v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  llvm::ValueHandleBase ***v77;
  uint64_t v78;
  char *v79;
  llvm::Type *v80;
  uint64_t v81;
  _DWORD *v82;
  llvm::UndefValue *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  void **v97;
  unint64_t v98;
  __int128 v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  llvm::Type *v104;
  uint64_t v105;
  _DWORD *v106;
  _DWORD *v107;
  llvm::UndefValue *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  _DWORD *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  void **v121;
  uint64_t **v122;
  int v123;
  _QWORD *v124;
  char *v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  int v133;
  _QWORD *v134;
  int *v135;
  int *v136;
  _QWORD *v137;
  unsigned int v138;
  int *v139;
  int *v140;
  _BYTE *v141;
  _QWORD *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t *v155;
  llvm::Value *v156;
  const llvm::Value *v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t **v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t v173;
  uint64_t n;
  _BYTE *v175;
  uint64_t ii;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  BOOL v182;
  uint64_t *v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v202;
  llvm::Value *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  int v209;
  llvm::Value *PersonalityFn;
  const llvm::Value *v211;
  uint64_t v212;
  BOOL v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  llvm::ValueSymbolTable *v218;
  int v219;
  int v221;
  unsigned int v222;
  int v223;
  int v224;
  _DWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t *v233;
  int *v234;
  uint64_t v235;
  int *v236;
  uint64_t v237;
  int v238;
  int v239;
  unint64_t v240;
  uint64_t v241;
  llvm *v242;
  uint64_t v243;
  _BYTE *v244;
  _BYTE *v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  _BYTE v249[64];
  char *v250;
  char *v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  int v255;
  _BYTE v256[64];
  void *__p;
  char *v258;
  uint64_t v259;
  __int128 v260;
  uint64_t v261;
  int v262;
  void *v263;
  _BYTE *v264;
  void *v265;
  void *__src;
  unsigned int v267;
  unsigned int v268;
  int v269;
  void *v270;
  _BYTE *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t ***v274;
  char **v275;
  llvm::Instruction *v276;
  uint64_t *v277;
  uint64_t v278;
  int64x2_t v279;
  int64x2_t v280;
  _QWORD *inserted;
  uint64_t v282;
  _QWORD *v283;
  unsigned int v284;
  unsigned __int8 v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD v288[24];
  void *v289;
  uint64_t v290;
  _BYTE v291[1064];
  void *v292;
  uint64_t v293;
  _QWORD v294[161];

  v294[158] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  v274 = a1;
  v275 = a2;
  v276 = a3;
  v277 = v3;
  v278 = 1;
  v279 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v280 = v279;
  inserted = llvm::LLVMContextImpl::getOrInsertBundleTag((_DWORD *)*v3, "ignore", 6uLL);
  v4 = &v282;
  v282 = 1;
  v5 = &v283;
  for (i = 11; i != 67; i += 7)
    (&v274)[i] = (uint64_t ***)-4096;
  v285 = 0;
  sub_1C5EB7A04((uint64_t)&v274, 0);
  v286 = 1;
  v7 = &v287;
  for (j = 8; j != 1288; j += 80)
    *(_OWORD *)((char *)&v286 + j) = xmmword_1C85F2170;
  sub_1C61B4BCC(&v260, (uint64_t)v274[10]);
  v9 = v256;
  *(_QWORD *)&v253 = v256;
  v10 = (const void *)*((_QWORD *)&v260 + 1);
  if (*((_QWORD *)&v260 + 1) == (_QWORD)v260)
  {
    *((_QWORD *)&v253 + 1) = v256;
    v11 = (const void *)*((_QWORD *)&v260 + 1);
  }
  else
  {
    v221 = v261;
    v9 = malloc_type_malloc(8 * v261, 0x4065EBACuLL);
    if (!v9)
    {
      if (v221)
        goto LABEL_364;
      v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v9)
        goto LABEL_364;
    }
    *((_QWORD *)&v253 + 1) = v9;
    v10 = (const void *)*((_QWORD *)&v260 + 1);
    v11 = (const void *)v260;
  }
  v12 = HIDWORD(v261);
  LODWORD(v254) = v261;
  if (v10 == v11)
    v13 = HIDWORD(v261);
  else
    v13 = v261;
  if (v13)
  {
    memmove(v9, v10, 8 * v13);
    v12 = HIDWORD(v261);
  }
  HIDWORD(v254) = v12;
  v255 = v262;
  v258 = 0;
  v259 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v263, v264, (v264 - (_BYTE *)v263) >> 5);
  v14 = v249;
  v244 = v249;
  v15 = __src;
  if (__src != v265)
  {
    v222 = v267;
    v14 = malloc_type_malloc(8 * v267, 0x4065EBACuLL);
    if (v14 || !v222 && (v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v245 = v14;
      v16 = v265;
      v15 = __src;
      goto LABEL_14;
    }
LABEL_364:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v245 = v249;
  v16 = __src;
LABEL_14:
  v17 = v268;
  v246 = v267;
  if (v15 == v16)
    v18 = v268;
  else
    v18 = v267;
  if (v18)
  {
    memmove(v14, v15, 8 * v18);
    v17 = v268;
  }
  v247 = v17;
  v248 = v269;
  v251 = 0;
  v252 = 0;
  v250 = 0;
  sub_1C4E19D7C(&v250, v270, v271, (v271 - (_BYTE *)v270) >> 5);
  while (1)
  {
    if (v258 - (_BYTE *)__p != v251 - v250)
      goto LABEL_34;
    if (__p == v258)
      break;
    v19 = v250 + 16;
    v20 = (char *)__p + 16;
    while (1)
    {
      v21 = v20 - 16;
      if (*((_QWORD *)v20 - 2) != *((_QWORD *)v19 - 2))
        break;
      v22 = v19[8];
      if (v20[8])
        v23 = v22 == 0;
      else
        v23 = 1;
      if (v23)
      {
        if ((v20[8] == 0) == (v22 != 0))
          break;
      }
      else if (*(_DWORD *)v20 != *(_DWORD *)v19)
      {
        break;
      }
      v19 += 32;
      v20 += 32;
      if (v21 + 32 == v258)
        goto LABEL_179;
    }
LABEL_34:
    v243 = *((_QWORD *)v258 - 4);
    v24 = sub_1C63A5AF8(v4, &v243);
    v25 = *((unsigned int *)v24 + 4);
    if ((_DWORD)v25)
    {
      v26 = (uint64_t *)v24[1];
      v27 = &v26[v25];
      while (1)
      {
        v28 = *v26;
        if (*v26)
        {
          v242 = (llvm *)*v26;
          v29 = *(_DWORD *)(v28 + 20);
          if (v29 < 0)
          {
            v30 = v28 - 32 * (v29 & 0x7FFFFFF);
            v31 = *(_QWORD *)(v30 - 8);
            v235 = v30 - 8;
            if (v31)
              break;
          }
        }
LABEL_39:
        if (++v26 == v27)
          goto LABEL_35;
      }
      v32 = v235 - v31;
      v232 = v26;
      v233 = v27;
      v226 = v5;
      v228 = v7;
      v230 = v4;
      while (2)
      {
        if (*(_QWORD **)v32 == inserted)
        {
          sub_1C61540B4((uint64_t)&v292, (uint64_t)&v278, (uint64_t *)&v242);
          goto LABEL_133;
        }
        v33 = v242;
        llvm::getKnowledgeFromBundle((uint64_t)v242, v32, (uint64_t)&v239);
        v34 = v241;
        if (v241 && *(_BYTE *)(v241 + 16) == 21)
        {
          v35 = v239;
          hasAttribute = llvm::Argument::hasAttribute(v241, v239);
          if (hasAttribute
            && ((v35 - 74) > 6
             || ((AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)(*(_QWORD *)(v34 + 24) + 112), *(_DWORD *)(v34 + 32) + 1, v35)) == 0? (v39 = 0): (v39 = *(_QWORD *)(AttributeAtIndex + 16)), v39 >= v240)))
          {
            sub_1C61540B4((uint64_t)&v292, (uint64_t)&v278, (uint64_t *)&v242);
            v105 = *(unsigned int *)(v32 + 8);
            if ((_DWORD)v105 != *(_DWORD *)(v32 + 12))
            {
              v106 = (_DWORD *)((char *)v33 - 32 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF));
              goto LABEL_143;
            }
          }
          else
          {
            v40 = v274[10];
            v41 = v40 - 3;
            if (!v40)
              v41 = 0;
            v42 = v41 + 5;
            for (k = v41[6]; k != (uint64_t *)v42; k = (uint64_t *)k[1])
            {
              v44 = k - 3;
              if (!k)
                v44 = 0;
              if (*((_BYTE *)v44 + 16) != 83)
              {
                if (*((unsigned __int8 *)k - 8) - 38 > 0x38
                  || ((1 << (*((_BYTE *)k - 8) - 38)) & 0x100060000000001) == 0)
                {
                  v42 = (uint64_t **)k;
                }
                else
                {
                  v42 = (uint64_t **)k[1];
                }
                break;
              }
            }
            if (v42)
              v46 = (const llvm::Instruction *)(v42 - 3);
            else
              v46 = 0;
            if ((llvm::isValidAssumeForContext(v33, v46, 0, v36) & 1) == 0)
            {
              v47 = v274[10];
              v48 = v47 - 3;
              if (!v47)
                v48 = 0;
              v49 = v48 + 5;
              for (m = v48[6]; m != (uint64_t *)v49; m = (uint64_t *)m[1])
              {
                v51 = m - 3;
                if (!m)
                  v51 = 0;
                if (*((_BYTE *)v51 + 16) != 83)
                {
                  if (*((unsigned __int8 *)m - 8) - 38 > 0x38
                    || ((1 << (*((_BYTE *)m - 8) - 38)) & 0x100060000000001) == 0)
                  {
                    v49 = (uint64_t **)m;
                  }
                  else
                  {
                    v49 = (uint64_t **)m[1];
                  }
                  break;
                }
              }
              v33 = v242;
              v53 = v49 ? (uint64_t)(v49 - 3) : 0;
              if (v242 != (llvm *)v53)
              {
                v34 = v241;
                break;
              }
            }
            v100 = v239;
            if (hasAttribute)
            {
              v101 = *(_QWORD *)(v34 + 24);
              *(_QWORD *)(v101 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v101 + 112), **(uint64_t ***)v101, *(_DWORD *)(v34 + 32) + 1, v239);
            }
            v102 = llvm::Attribute::get(v277, v100, v240);
            v103 = *(_QWORD *)(v34 + 24);
            LODWORD(v292) = *(_DWORD *)(v34 + 32);
            *(_QWORD *)(v103 + 112) = llvm::AttributeList::addParamAttribute((_QWORD *)(v103 + 112), **(uint64_t ***)v103, &v292, 1, v102);
            v285 = 1;
            sub_1C61540B4((uint64_t)&v292, (uint64_t)&v278, (uint64_t *)&v242);
            v105 = *(unsigned int *)(v32 + 8);
            if ((_DWORD)v105 != *(_DWORD *)(v32 + 12))
            {
              v106 = (_DWORD *)((char *)v242 - 32 * (*((_DWORD *)v242 + 5) & 0x7FFFFFF));
LABEL_143:
              v107 = &v106[8 * v105];
              v108 = llvm::UndefValue::get(**(llvm::UndefValue ***)v107, v104);
              if (*(_QWORD *)v107)
              {
                **((_QWORD **)v107 + 2) = *((_QWORD *)v107 + 1);
                v109 = *((_QWORD *)v107 + 1);
                if (v109)
                  *(_QWORD *)(v109 + 16) = *((_QWORD *)v107 + 2);
              }
              *(_QWORD *)v107 = v108;
              if (v108)
              {
                v112 = *((_QWORD *)v108 + 1);
                v110 = (_QWORD *)((char *)v108 + 8);
                v111 = v112;
                v113 = &v106[8 * v105];
                *((_QWORD *)v113 + 1) = v112;
                v114 = v113 + 2;
                if (v112)
                  *(_QWORD *)(v111 + 16) = v114;
                *(_QWORD *)&v106[8 * v105 + 4] = v110;
                *v110 = v107;
              }
            }
          }
          *(_QWORD *)v32 = inserted;
LABEL_133:
          v32 += 16;
          v27 = v233;
          v5 = v226;
          v7 = v228;
          v4 = v230;
          v26 = v232;
          if (v32 == v235)
            goto LABEL_39;
          continue;
        }
        break;
      }
      v237 = v34;
      v238 = v239;
      v272 = 0;
      v54 = sub_1C5EB937C((uint64_t)&v286, &v237, &v272);
      v56 = v272;
      if ((v54 & 1) != 0)
      {
        v58 = (unint64_t *)(v272 + 16);
        v57 = *(_QWORD *)(v272 + 16);
        v60 = (_DWORD *)(v272 + 24);
        v59 = *(unsigned int *)(v272 + 24);
        v61 = v240;
        if ((_DWORD)v59)
        {
          v62 = 24 * v59;
          while (1)
          {
            if (llvm::isValidAssumeForContext(*(llvm **)v57, v33, v276, v55))
            {
              if (*(_QWORD *)(v57 + 8) >= v61)
                goto LABEL_108;
              if (llvm::isValidAssumeForContext(v33, *(const llvm::Instruction **)v57, v276, v55))
                break;
            }
LABEL_92:
            v57 += 24;
            v62 -= 24;
            if (!v62)
            {
              v96 = *v60;
              v57 = *v58;
              goto LABEL_130;
            }
          }
          v64 = *(const llvm::Instruction **)v57;
          v224 = *(_DWORD *)(*(_QWORD *)v57 + 20);
          v223 = *(_DWORD *)(*(_QWORD *)(v57 + 16) + 8);
          v65 = *(llvm::ConstantInt **)(*v277 + 1984);
          v66 = *(_DWORD *)(*v277 + 1992);
          LODWORD(v293) = v66 >> 8;
          if (v66 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v292, v61, 0);
          }
          else
          {
            if (v66 <= 0xFF)
              v67 = 0;
            else
              v67 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v66);
            v292 = (void *)(v67 & v61);
          }
          v68 = llvm::ConstantInt::get(v65, (llvm::LLVMContext *)&v292, v63);
          if (v293 >= 0x41 && v292)
            MEMORY[0x1CAA32F9C](v292, 0x1000C8000313F17);
          v69 = (char *)v64 - 32 * (v224 & 0x7FFFFFF);
          v70 = (v223 + 1);
          v71 = (llvm::ValueHandleBase **)&v69[32 * v70];
          if (*v71)
          {
            v72 = &v69[32 * v70];
            v74 = (_QWORD *)*((_QWORD *)v72 + 2);
            v73 = v72 + 16;
            *v74 = *(v73 - 1);
            v75 = *(v73 - 1);
            if (v75)
              *(_QWORD *)(v75 + 16) = *v73;
          }
          *v71 = v68;
          if (v68)
          {
            v78 = *((_QWORD *)v68 + 1);
            v77 = (llvm::ValueHandleBase ***)((char *)v68 + 8);
            v76 = v78;
            v79 = &v69[32 * v70];
            *((_QWORD *)v79 + 1) = v78;
            if (v78)
              *(_QWORD *)(v76 + 16) = v79 + 8;
            *((_QWORD *)v79 + 2) = v77;
            *v77 = v71;
          }
          v285 = 1;
LABEL_108:
          sub_1C61540B4((uint64_t)&v292, (uint64_t)&v278, (uint64_t *)&v242);
          v81 = *(unsigned int *)(v32 + 8);
          if ((_DWORD)v81 != *(_DWORD *)(v32 + 12))
          {
            v225 = (_DWORD *)((char *)v33 - 32 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF));
            v82 = &v225[8 * v81];
            v83 = llvm::UndefValue::get(**(llvm::UndefValue ***)v82, v80);
            if (*(_QWORD *)v82)
            {
              **((_QWORD **)v82 + 2) = *((_QWORD *)v82 + 1);
              v84 = *((_QWORD *)v82 + 1);
              if (v84)
                *(_QWORD *)(v84 + 16) = *((_QWORD *)v82 + 2);
            }
            *(_QWORD *)v82 = v83;
            if (v83)
            {
              v87 = *((_QWORD *)v83 + 1);
              v85 = (_QWORD *)((char *)v83 + 8);
              v86 = v87;
              v88 = &v225[8 * v81];
              *((_QWORD *)v88 + 1) = v87;
              v89 = v88 + 2;
              if (v87)
                *(_QWORD *)(v86 + 16) = v89;
              *(_QWORD *)&v225[8 * v81 + 4] = v85;
              *v85 = v82;
            }
          }
          *(_QWORD *)v32 = inserted;
          goto LABEL_92;
        }
        v96 = 0;
LABEL_130:
        v292 = v33;
        v293 = v61;
        v294[0] = v32;
        if (v96 >= *(unsigned int *)(v56 + 28))
        {
          v115 = v96 + 1;
          if (v57 > (unint64_t)&v292 || v57 + 24 * v96 <= (unint64_t)&v292)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v58, v56 + 32, v115, 24);
            v57 = *v58;
            goto LABEL_131;
          }
          v125 = (char *)&v292 - v57;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v58, v56 + 32, v115, 24);
          v57 = *v58;
          v97 = (void **)&v125[*v58];
        }
        else
        {
LABEL_131:
          v97 = &v292;
        }
        v98 = v57 + 24 * *v60;
        v99 = *(_OWORD *)v97;
        *(_QWORD *)(v98 + 16) = v97[2];
        *(_OWORD *)v98 = v99;
        ++*v60;
        goto LABEL_133;
      }
      v273 = v272;
      v90 = v286;
      v91 = v288[0];
      v92 = v286 >> 1;
      v93 = v286 & 1;
      if ((v286 & 1) != 0)
        v94 = 16;
      else
        v94 = v288[0];
      if (4 * v92 + 4 >= 3 * v94)
      {
        v94 *= 2;
      }
      else if (v94 + ~v92 - HIDWORD(v286) > v94 >> 3)
      {
LABEL_125:
        LODWORD(v286) = ((v90 & 0xFFFFFFFE) + 2) | v93;
        if (*(_QWORD *)v56 != -4096 || *(_DWORD *)(v56 + 8) != 82)
          --HIDWORD(v286);
        v96 = 0;
        *(_QWORD *)v56 = v237;
        v95 = v238;
        v57 = v56 + 32;
        *(_QWORD *)(v56 + 16) = v56 + 32;
        v58 = (unint64_t *)(v56 + 16);
        *(_DWORD *)(v56 + 8) = v95;
        *(_QWORD *)(v56 + 24) = 0x200000000;
        v60 = (_DWORD *)(v56 + 24);
        v33 = v242;
        v61 = v240;
        goto LABEL_130;
      }
      if (v94 >= 0x11)
      {
        v116 = (v94 - 1) | ((unint64_t)(v94 - 1) >> 1);
        v117 = v116 | (v116 >> 2) | ((v116 | (v116 >> 2)) >> 4);
        v118 = ((v117 | (v117 >> 8)) >> 16) | v117 | (v117 >> 8);
        if ((v118 + 1) > 0x40)
          v94 = v118 + 1;
        else
          v94 = 64;
      }
      if ((v286 & 1) != 0)
      {
        v120 = 0;
        v121 = &v292;
        do
        {
          v122 = *(uint64_t ***)((char *)&v286 + v120 * 8 + 8);
          v123 = v288[v120];
          if ((v122 != (uint64_t **)-4096 || v123 != 82) && (v122 != (uint64_t **)-8192 || v123 != 83))
          {
            *(_OWORD *)v121 = *(_OWORD *)((char *)&v286 + v120 * 8 + 8);
            sub_1C5EB9478((uint64_t)(v121 + 2), (uint64_t)&v288[v120 + 1]);
            v121 += 10;
            v124 = (_QWORD *)v288[v120 + 1];
            if (&v288[v120 + 3] != v124)
              free(v124);
          }
          v120 += 10;
        }
        while (v120 != 160);
        if (v94 > 0x10)
        {
          LODWORD(v286) = v286 & 0xFFFFFFFE;
          v287 = (uint64_t)operator new(80 * v94, (std::align_val_t)8uLL);
          v288[0] = v94;
        }
        sub_1C5EB953C((uint64_t)&v286, (uint64_t)&v292, (uint64_t)v121);
      }
      else
      {
        v119 = v287;
        if (v94 > 0x10)
        {
          v287 = (uint64_t)operator new(80 * v94, (std::align_val_t)8uLL);
          v288[0] = v94;
        }
        else
        {
          LODWORD(v286) = v286 | 1;
        }
        sub_1C5EB953C((uint64_t)&v286, v119, v119 + 80 * v91);
        MEMORY[0x1CAA32FB4](v119, 8);
      }
      sub_1C5EB937C((uint64_t)&v286, &v237, &v273);
      v90 = v286;
      v56 = v273;
      v93 = v286 & 1;
      goto LABEL_125;
    }
LABEL_35:
    sub_1C61AF464((void **)&v253);
  }
LABEL_179:
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v245 != v244)
    free(v245);
  if (__p)
  {
    v258 = (char *)__p;
    operator delete(__p);
  }
  if (*((_QWORD *)&v253 + 1) != (_QWORD)v253)
    free(*((void **)&v253 + 1));
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  if (__src != v265)
    free(__src);
  if (v263)
  {
    v264 = v263;
    operator delete(v263);
  }
  if (*((_QWORD *)&v260 + 1) != (_QWORD)v260)
    free(*((void **)&v260 + 1));
  v126 = v286;
  v127 = v288[0];
  if (v286 & 1 | LODWORD(v288[0]))
  {
    v128 = v287;
    if ((v286 & 1) != 0)
    {
      v128 = (uint64_t)v7;
      v127 = 16;
    }
    if (v127)
    {
      v129 = v128 + 80 * v127;
      v130 = (_QWORD *)(v128 + 32);
      do
      {
        v132 = (char *)(v130 - 4);
        v131 = *(v130 - 4);
        v133 = *((_DWORD *)v130 - 6);
        if ((v131 != -4096 || v133 != 82) && (v131 != -8192 || v133 != 83))
        {
          v134 = (_QWORD *)*(v130 - 2);
          if (v130 != v134)
            free(v134);
        }
        v130 += 10;
      }
      while (v132 + 80 != (char *)v129);
      v126 = v286;
    }
  }
  if ((v126 & 1) == 0)
    MEMORY[0x1CAA32FB4](v287, 8);
  sub_1C5EB78CC((uint64_t)&v274, 0);
  sub_1C5EB7A04((uint64_t)&v274, 1);
  v292 = v294;
  v293 = 0x400000000;
  v135 = sub_1C63A5930((int *)v4);
  if ((v282 & 1) != 0)
    v137 = v5;
  else
    v137 = v283;
  v138 = v284;
  if ((v282 & 1) != 0)
    v138 = 8;
  v139 = (int *)&v137[7 * v138];
  if (v139 != v135)
  {
    v140 = v135;
    v231 = v4;
    v141 = v291;
    v142 = v294;
    v234 = v136;
    v143 = xmmword_1C85F2170;
    v236 = v139;
    while (1)
    {
      v144 = v140[4];
      if (v144 < 2)
        goto LABEL_343;
      v145 = (uint64_t *)*((_QWORD *)v140 + 1);
      v146 = *v145;
      v147 = v145[v144 - 1];
      if (HIDWORD(v293))
      {
        v148 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v292, (uint64_t)v294, 1uLL, 8);
        v143 = xmmword_1C85F2170;
        v148 = v293;
        v142 = v292;
      }
      v142[v148] = v145;
      v149 = v293 + 1;
      LODWORD(v293) = v293 + 1;
      v150 = (uint64_t *)*((_QWORD *)v140 + 1);
      if (v146 != v147)
        break;
LABEL_248:
      v166 = v140[4];
      if (v149 >= HIDWORD(v293))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v292, (uint64_t)v294, v149 + 1, 8);
        v143 = xmmword_1C85F2170;
        v149 = v293;
      }
      *((_QWORD *)v292 + v149) = &v150[v166];
      v167 = v293 + 1;
      LODWORD(v293) = v167;
      v142 = v292;
      v168 = (uint64_t **)v292;
      if (v292 != (char *)v292 + 8 * v167 - 8)
      {
        do
        {
          v169 = *v168;
          v171 = v168[1];
          ++v168;
          v170 = v171;
          if (v169 != v171 && v169 + 1 != v170)
          {
            v173 = *(_QWORD *)v140;
            v286 = (uint64_t)v274[5];
            v287 = 1;
            for (n = 16; n != 208; n += 24)
              *(_OWORD *)((char *)&v286 + n) = v143;
            v175 = v141;
            v289 = v141;
            v290 = 0x800000000;
            memset(&v291[192], 0, 24);
            for (ii = *(_QWORD *)(v173 + 48); ; ii = *(_QWORD *)(ii + 8))
            {
              v177 = ii - 24;
              v178 = ii ? ii - 24 : 0;
              if (*(_BYTE *)(v178 + 16) != 83)
                break;
            }
            if (*(_BYTE *)(ii - 8) == 94)
            {
              v180 = ii + 8;
              v179 = *(_QWORD *)(ii + 8);
              v181 = *(_QWORD *)(v180 + 8) + 40;
              if (v179)
                v182 = v179 == v181;
              else
                v182 = 1;
              if (v182)
                v177 = 0;
              else
                v177 = v179 - 24;
            }
            v183 = v169;
            do
            {
              v244 = (_BYTE *)*v183;
              v184 = (uint64_t)v244;
              sub_1C61540B4((uint64_t)&v260, (uint64_t)&v278, (uint64_t *)&v244);
              v185 = *(_DWORD *)(v184 + 20);
              if (v185 < 0)
              {
                v186 = v184 - 32 * (v185 & 0x7FFFFFF);
                v187 = *(_QWORD *)(v186 - 8);
                v227 = v186 - 8;
                if (v187)
                {
                  v229 = v227 - v187;
                  do
                  {
                    llvm::getKnowledgeFromBundle(v184, v229, (uint64_t)&v260);
                    if ((_DWORD)v260)
                    {
                      v253 = v260;
                      v254 = v261;
                      sub_1C5EB54D0((unint64_t)&v286, &v253);
                      v188 = v261;
                      if (v261)
                      {
                        if (*(unsigned __int8 *)(v261 + 16) >= 0x1Cu)
                        {
                          v189 = *(_QWORD *)(v261 + 40);
                          if (v189 == *(_QWORD *)(v177 + 40))
                          {
                            v190 = *(__int16 *)(v189 + 18);
                            if ((v190 & 0x80000000) == 0)
                            {
                              v195 = *(_QWORD *)(v189 + 48);
                              if (v195 != v189 + 40)
                              {
                                v196 = 0;
                                do
                                {
                                  v197 = v195 - 24;
                                  if (!v195)
                                    v197 = 0;
                                  *(_DWORD *)(v197 + 56) = v196++;
                                  v195 = *(_QWORD *)(v195 + 8);
                                }
                                while (v195 != v189 + 40);
                              }
                              *(_WORD *)(v189 + 18) = v190 | 0x8000;
                            }
                            if (*(_DWORD *)(v177 + 56) < *(_DWORD *)(v188 + 56) || v177 == v188)
                            {
                              v192 = *(_QWORD *)(v188 + 32);
                              v193 = v189 + 40;
                              if (v192)
                                v194 = v192 == v193;
                              else
                                v194 = 1;
                              if (v194)
                                v177 = 0;
                              else
                                v177 = v192 - 24;
                            }
                          }
                        }
                      }
                    }
                    v229 += 16;
                  }
                  while (v229 != v227);
                }
              }
              ++v183;
            }
            while (v183 != v170);
            v198 = *v169;
            v199 = *(_QWORD *)(v177 + 40);
            v200 = *(__int16 *)(v199 + 18);
            if ((v200 & 0x80000000) == 0)
            {
              v214 = *(_QWORD *)(v199 + 48);
              if (v214 != v199 + 40)
              {
                v215 = 0;
                do
                {
                  v216 = v214 - 24;
                  if (!v214)
                    v216 = 0;
                  *(_DWORD *)(v216 + 56) = v215++;
                  v214 = *(_QWORD *)(v214 + 8);
                }
                while (v214 != v199 + 40);
              }
              *(_WORD *)(v199 + 18) = v200 | 0x8000;
            }
            if (*(_DWORD *)(v177 + 56) < *(_DWORD *)(v198 + 56) && v198 != v177)
            {
              v207 = (_QWORD *)(v198 + 24);
              while (1)
              {
                v208 = v207 ? (uint64_t)(v207 - 3) : 0;
                v209 = *(unsigned __int8 *)(v208 + 16);
                if (v209 == 29 || v209 == 35)
                  break;
                if (v209 == 80)
                {
                  PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v208 + 40) + 56));
                  if (llvm::classifyEHPersonality(PersonalityFn, v211) != 10)
                    break;
                }
                else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v208) & 1) != 0
                       || (llvm::Instruction::willReturn((llvm::Instruction *)v208) & 1) == 0)
                {
                  break;
                }
                v207 = (_QWORD *)*v207;
                if (v207 == (_QWORD *)(v177 + 24))
                  goto LABEL_306;
              }
              v212 = *(_QWORD *)(v208 + 32);
              if (v212)
                v213 = v212 == *(_QWORD *)(v208 + 40) + 40;
              else
                v213 = 1;
              if (v213)
                v177 = 0;
              else
                v177 = v212 - 24;
            }
LABEL_306:
            v202 = sub_1C5EB4C70((uint64_t ***)&v286);
            if (v202)
            {
              v203 = (llvm::Value *)v202;
              v285 = 1;
              v204 = *(_QWORD *)(v177 + 40);
              *(_QWORD *)(v202 + 40) = v204;
              *(_WORD *)(v204 + 18) &= ~0x8000u;
              if ((*(_BYTE *)(v202 + 23) & 0x10) != 0)
              {
                v217 = *(_QWORD *)(v204 + 56);
                if (v217)
                {
                  v218 = *(llvm::ValueSymbolTable **)(v217 + 104);
                  if (v218)
                    llvm::ValueSymbolTable::reinsertValue(v218, v203);
                }
              }
              v206 = *(_QWORD *)(v177 + 24);
              v205 = (_QWORD *)(v177 + 24);
              *((_QWORD *)v203 + 4) = v205;
              *((_QWORD *)v203 + 3) = v206;
              *(_QWORD *)(v206 + 8) = (char *)v203 + 24;
              *v205 = (char *)v203 + 24;
              llvm::AssumptionCache::registerAssumption(v275, (uint64_t)v203);
            }
            v141 = v175;
            if (v289 != v175)
              free(v289);
            if ((v287 & 1) == 0)
              MEMORY[0x1CAA32FB4](v288[0], 8);
            v142 = v292;
            v167 = v293;
            v143 = xmmword_1C85F2170;
          }
        }
        while (v168 != &v142[v167 - 1]);
      }
      LODWORD(v293) = 0;
      v136 = v234;
      v139 = v236;
LABEL_343:
      while (1)
      {
        v140 += 14;
        if (v140 == v136)
          break;
        if ((*(_QWORD *)v140 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_347;
      }
      v140 = v136;
LABEL_347:
      if (v140 == v139)
      {
        v4 = v231;
        if (v142 != v294)
          free(v142);
        goto LABEL_352;
      }
    }
    v151 = v146 + 24;
    v152 = v147 + 24;
    while (2)
    {
      if (v151)
        v153 = v151 - 24;
      else
        v153 = 0;
      v154 = *(unsigned __int8 *)(v153 + 16);
      if (v154 != 29 && v154 != 35)
      {
        if (v154 == 80)
        {
          v156 = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v153 + 40) + 56));
          if (llvm::classifyEHPersonality(v156, v157) == 10)
            goto LABEL_230;
        }
        else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v153) & 1) == 0
               && (llvm::Instruction::willReturn((llvm::Instruction *)v153) & 1) != 0)
        {
LABEL_230:
          v155 = v150;
          goto LABEL_245;
        }
      }
      do
      {
        v155 = v150;
        v161 = *v150;
        v162 = *(_QWORD *)(*v150 + 40);
        v163 = *(__int16 *)(v162 + 18);
        if ((v163 & 0x80000000) == 0)
        {
          v158 = *(_QWORD *)(v162 + 48);
          if (v158 != v162 + 40)
          {
            v159 = 0;
            do
            {
              v160 = v158 - 24;
              if (!v158)
                v160 = 0;
              *(_DWORD *)(v160 + 56) = v159++;
              v158 = *(_QWORD *)(v158 + 8);
            }
            while (v158 != v162 + 40);
          }
          *(_WORD *)(v162 + 18) = v163 | 0x8000;
        }
        ++v150;
      }
      while (*(_DWORD *)(v161 + 56) < *(_DWORD *)(v153 + 56));
      v164 = v292;
      v165 = v293;
      if (*((uint64_t **)v292 + v293 - 1) == v155)
      {
LABEL_245:
        v143 = xmmword_1C85F2170;
      }
      else
      {
        v143 = xmmword_1C85F2170;
        if (v293 >= HIDWORD(v293))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v292, (uint64_t)v294, v293 + 1, 8);
          v143 = xmmword_1C85F2170;
          v164 = v292;
          v165 = v293;
        }
        v164[v165] = v155;
        LODWORD(v293) = v293 + 1;
      }
      v151 = *(_QWORD *)(v151 + 8);
      v150 = v155;
      if (v151 == v152)
      {
        v150 = (uint64_t *)*((_QWORD *)v140 + 1);
        v149 = v293;
        goto LABEL_248;
      }
      continue;
    }
  }
LABEL_352:
  sub_1C5EB78CC((uint64_t)&v274, 1);
  v219 = v285;
  sub_1C63A5DE4((uint64_t)v4);
  if ((v278 & 1) == 0)
    MEMORY[0x1CAA32FB4](v279.i64[0], 8);
  return v219 != 0;
}

void llvm::initializeAssumeSimplifyPassLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837180);
  if (v2 != -1)
  {
    v5[0] = sub_1C5EB6F44;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837180, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5EB6F44(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Assume Simplify";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "assume-simplify";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F587C;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5EB9640;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5EB6FD4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F587C;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A8D28;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837180);
  if (v3 != -1)
  {
    v7[0] = sub_1C5EB6F44;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837180, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::AssumeBuilderPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  uint64_t CachedResultImpl;
  llvm::DominatorTree *v8;
  llvm::AssumptionCache *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  llvm *v15;
  uint64_t v16;
  uint64_t v17;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1);
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a1);
  if (CachedResultImpl)
    v9 = (llvm::AssumptionCache *)(CachedResultImpl + 8);
  else
    v9 = 0;
  v10 = a1 + 72;
  for (i = *(_QWORD *)(a1 + 80); i != v10; i = *(_QWORD *)(i + 8))
  {
    v12 = i - 24;
    if (!i)
      v12 = 0;
    v13 = *(_QWORD *)(v12 + 48);
    if (v13 != v12 + 40)
    {
      v14 = (char **)(ResultImpl + 8);
      while (1)
      {
        if (v13)
          v15 = (llvm *)(v13 - 24);
        else
          v15 = 0;
        llvm::salvageKnowledge(v15, v14, v9, v8);
        v13 = *(_QWORD *)(v13 + 8);
        v16 = i - 24;
        if (!i)
          v16 = 0;
        if (v13 == v16 + 40)
          break;
LABEL_21:
        if (i == v10)
          goto LABEL_22;
      }
      while (1)
      {
        i = *(_QWORD *)(i + 8);
        if (i == v10)
          goto LABEL_22;
        v17 = i - 24;
        if (!i)
          v17 = 0;
        v13 = *(_QWORD *)(v17 + 48);
        if (v13 != v17 + 40)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

void llvm::initializeAssumeBuilderPassLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837188);
  if (v2 != -1)
  {
    v5[0] = sub_1C5EB7238;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837188, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5EB7238(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Assume Builder";
  *(_QWORD *)(v2 + 8) = 14;
  *(_QWORD *)(v2 + 16) = "assume-builder";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F587D;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5EB9798;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C5EB72C8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272, a4);
  if (((unint64_t)(v9 + 7) >> 3))
  {
    LODWORD(v17) = 76;
    *((_QWORD *)&v17 + 1) = ((unint64_t)(v9 + 7) >> 3);
    v18 = a3;
    sub_1C5EB54D0(a1, &v17);
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
    v11 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    if ((v11 & 0xFE) == 0x12)
      v11 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
    if ((!v10 || (v12 = *(_QWORD *)(v10 + 112)) == 0 || (*(_BYTE *)(v12 + 17) & 1) == 0) && v11 <= 0xFF)
    {
      LODWORD(v15) = 39;
      *((_QWORD *)&v15 + 1) = 0;
      v16 = a3;
      sub_1C5EB54D0(a1, &v15);
    }
  }
  if (a5)
  {
    LODWORD(v13) = 74;
    *((_QWORD *)&v13 + 1) = 1 << a5;
    v14 = a3;
    sub_1C5EB54D0(a1, &v13);
  }
}

unint64_t sub_1C5EB73C0(unint64_t result, uint64_t a2, unsigned int a3)
{
  unint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(result + 8);
  if (a3)
  {
    v5 = (uint64_t **)result;
    v6 = 0;
    v7 = a3;
    do
    {
      if (a2)
      {
        if ((v6 + 2) < *(_DWORD *)(a2 + 8))
        {
          v8 = *(_QWORD *)(a2 + 40 + 8 * (v6 + 2));
          if (v8)
          {
            v9 = *(unsigned int *)(v8 + 8);
            if ((_DWORD)v9)
            {
              v10 = (uint64_t *)(v8 + 48);
              v11 = 8 * v9;
              do
              {
                v12 = *v10;
                if (!*v10
                  || *(_BYTE *)(v12 + 8) == 2
                  || (v13 = *(_DWORD *)(v12 + 12), v13 != 74) && v13 != 39
                  || (result = sub_1C5EB74F8(**v5, v6), (_DWORD)result))
                {
                  result = sub_1C5EB7554(v4, v12, *(_QWORD *)(**v5 - 32 * (*(_DWORD *)(**v5 + 20) & 0x7FFFFFF) + 32 * v6));
                }
                ++v10;
                v11 -= 8;
              }
              while (v11);
            }
          }
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  if (a2)
  {
    if (*(_DWORD *)(a2 + 8))
    {
      v14 = *(_QWORD *)(a2 + 40);
      if (v14)
      {
        v15 = *(unsigned int *)(v14 + 8);
        if ((_DWORD)v15)
        {
          v16 = (uint64_t *)(v14 + 48);
          v17 = 8 * v15;
          do
          {
            v18 = *v16++;
            result = sub_1C5EB7554(v4, v18, 0);
            v17 -= 8;
          }
          while (v17);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5EB74F8(uint64_t a1, int a2)
{
  if ((llvm::CallBase::paramHasAttr(a1, a2, 36) & 1) != 0 || (llvm::CallBase::paramHasAttr(a1, a2, 76) & 1) != 0)
    return 1;
  else
    return llvm::CallBase::paramHasAttr(a1, a2, 77);
}

unint64_t sub_1C5EB7554(unint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  if (!a2)
  {
    if (!byte_1ED837080)
      return result;
    v7 = 0;
    v8 = 0;
LABEL_16:
    LODWORD(v9) = v8;
    *((_QWORD *)&v9 + 1) = v7;
    v10 = a3;
    return sub_1C5EB54D0(result, &v9);
  }
  v3 = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 0xFE) != 2)
  {
    if (byte_1ED837080
      || ((v4 = *(_DWORD *)(a2 + 12), (v4 - 36) <= 0x29)
        ? (v5 = ((1 << (v4 - 36)) & 0x34000000009) == 0)
        : (v5 = 1),
          v5 ? (v6 = v4 == 5) : (v6 = 1),
          v6))
    {
      if (v3 == 1)
        v7 = *(_QWORD *)(a2 + 16);
      else
        v7 = 0;
      v8 = *(_DWORD *)(a2 + 12);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_1C5EB75F8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  _DWORD v15[48];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_DWORD **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 8)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63A56E4(a1, v6, &v6[6 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v15;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    v11 = *(_DWORD *)(a1 + v8 + 16);
    if ((v10 != -4096 || v11 != 82) && (v10 != -8192 || v11 != 83))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      v9[4] = *(_DWORD *)(a1 + v8 + 24);
      v9 += 6;
    }
    v8 += 24;
  }
  while (v8 != 192);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return sub_1C63A56E4(a1, v15, v9);
}

uint64_t sub_1C5EB77B4(uint64_t result, llvm::GEPOperator *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  v3 = *((unsigned __int8 *)this + 16);
  if (v3 == 62 || v3 == 5 && *((_WORD *)this + 9) == 34)
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    result = llvm::GEPOperator::getMaxPreservedAlignment(this, *(const llvm::DataLayout **)(result + 8));
    *(_QWORD *)(*(_QWORD *)v2 + 8) = ((1 << result) | v4) & -((1 << result) | v4);
  }
  return result;
}

uint64_t sub_1C5EB7820(uint64_t *a1, uint64_t a2, llvm *this, const llvm::DominatorTree *a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  const llvm::DominatorTree *v10;
  _QWORD *v11;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *a1;
  result = llvm::isValidAssumeForContext(this, *(const llvm::Instruction **)(*a1 + 416), *(const llvm::Instruction **)(*a1 + 432), a4);
  if ((_DWORD)result)
  {
    if (v7 >= *(_QWORD *)(a1[1] + 8))
    {
      result = 1;
      *(_BYTE *)a1[2] = 1;
    }
    else
    {
      result = llvm::isValidAssumeForContext(*(llvm **)(v8 + 416), this, *(const llvm::Instruction **)(v8 + 432), v10);
      if ((_DWORD)result)
      {
        result = 1;
        v11 = (_QWORD *)a1[3];
        *(_BYTE *)a1[2] = 1;
        *v11 = (char *)this + 32 * (*((_DWORD *)a4 + 2) + 1) + -32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
      }
    }
  }
  return result;
}

_QWORD *sub_1C5EB78CC(uint64_t a1, char a2)
{
  _QWORD *v4;
  int *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  llvm::APInt *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = (_QWORD *)(a1 + 32);
  v5 = sub_1C619D0D0((int *)(a1 + 32));
  v6 = (uint64_t *)v5;
  v8 = v7;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v9 = a1 + 40;
    v10 = 4;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(unsigned int *)(a1 + 48);
  }
  v11 = (int *)(v9 + 8 * v10);
  if (v11 != v5)
  {
    do
    {
      v12 = *v6;
      v13 = *(_QWORD *)(*v6 - 32 * (*(_DWORD *)(*v6 + 20) & 0x7FFFFFF));
      if (v13)
        v14 = *(_BYTE *)(v13 + 16) == 16;
      else
        v14 = 0;
      if (v14)
      {
        v15 = (llvm::APInt *)(v13 + 24);
        v16 = *(_DWORD *)(v13 + 32);
        if (v16 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v15) == v16)
            goto LABEL_17;
        }
        else if (!*(_QWORD *)v15)
        {
          goto LABEL_17;
        }
        if ((a2 & 1) != 0 || llvm::isAssumeWithEmptyBundle(v12))
        {
          *(_BYTE *)(a1 + 536) = 1;
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v12 + 40) + 40, (uint64_t ***)v12);
          v17 = *(_QWORD *)(v12 + 24);
          v18 = *(_QWORD **)(v12 + 32);
          *v18 = v17;
          *(_QWORD *)(v17 + 8) = v18;
          *(_QWORD *)(v12 + 24) = 0;
          *(_QWORD *)(v12 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v12);
        }
      }
LABEL_17:
      while (++v6 != v8)
      {
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_21;
      }
      v6 = v8;
LABEL_21:
      ;
    }
    while (v6 != (uint64_t *)v11);
  }
  return sub_1C628250C(v4);
}

unint64_t sub_1C5EB7A04(uint64_t a1, int a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::APInt *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = (int *)(a1 + 80);
  sub_1C63A5860(a1 + 80);
  v5 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v5 + 184))
    llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a1 + 8));
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6)
  {
    v13 = 32 * v6;
    v14 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16);
    do
    {
      v15 = *v14;
      if (*v14)
      {
        if (!a2)
          goto LABEL_18;
        v16 = *(_QWORD *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF));
        if (v16 && *(_BYTE *)(v16 + 16) == 16)
        {
          v18 = (llvm::APInt *)(v16 + 24);
          v19 = *(_DWORD *)(v16 + 32);
          if (v19 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v18) != v19)
            {
LABEL_18:
              v27 = *(_QWORD *)(v15 + 40);
              v20 = sub_1C63A5AF8(v4, &v27);
              v21 = v20;
              v22 = *((unsigned int *)v20 + 4);
              if (v22 >= *((unsigned int *)v20 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v20 + 1), (uint64_t)(v20 + 3), v22 + 1, 8);
                v22 = *((unsigned int *)v21 + 4);
              }
              *(_QWORD *)(v21[1] + 8 * v22) = v15;
              ++*((_DWORD *)v21 + 4);
            }
          }
          else if (*(_QWORD *)v18)
          {
            goto LABEL_18;
          }
        }
      }
      v14 += 4;
      v13 -= 32;
    }
    while (v13);
  }
  result = (unint64_t)sub_1C63A5930(v4);
  v8 = result;
  v10 = v9;
  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
  {
    v11 = a1 + 88;
    v12 = 8;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 88);
    v12 = *(_DWORD *)(a1 + 96);
  }
  v23 = v11 + 56 * v12;
  if (v23 != result)
  {
    do
    {
      v24 = *(unsigned int *)(v8 + 16);
      v25 = 126 - 2 * __clz(v24);
      if ((_DWORD)v24)
        v26 = v25;
      else
        v26 = 0;
      result = sub_1C5EB7DA8(*(_QWORD *)(v8 + 8), (uint64_t *)(*(_QWORD *)(v8 + 8) + 8 * v24), v26, 1);
      while (1)
      {
        v8 += 56;
        if (v8 == v10)
          break;
        if ((*(_QWORD *)v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_33;
      }
      v8 = v10;
LABEL_33:
      ;
    }
    while (v8 != v23);
  }
  return result;
}

void sub_1C5EB7BC0(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  _BYTE v14[448];
  uint64_t v15;

  v2 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 8)
    {
      *(_QWORD *)(a1 + 8) = operator new(56 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63A5CD8(a1, v7, v7 + 56 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v14;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v10 = v12;
      v10[1] = v10 + 3;
      v13 = (void **)(v11 + 16);
      v10[2] = 0x400000000;
      if (*(_DWORD *)(v11 + 24))
        sub_1C614D378((uint64_t)(v10 + 1), (uint64_t)v13);
      v10 += 7;
      if ((void *)(a1 + v9 + 32) != *v13)
        free(*v13);
    }
    v9 += 56;
  }
  while (v9 != 448);
  if (v2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(56 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C63A5CD8(a1, (uint64_t)v14, (uint64_t)v10);
}

unint64_t sub_1C5EB7DA8(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  BOOL v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t *v111;
  BOOL v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int64_t v130;
  int64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t *v157;
  int v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t *v190;
  int v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  uint64_t *v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t *v205;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v90 = *(a2 - 1);
        v91 = *v8;
        v92 = *(_QWORD *)(v90 + 40);
        v93 = *(__int16 *)(v92 + 18);
        if ((v93 & 0x80000000) == 0)
        {
          v207 = *(_QWORD *)(v92 + 48);
          if (v207 != v92 + 40)
          {
            v208 = 0;
            do
            {
              v209 = v207 - 24;
              if (!v207)
                v209 = 0;
              *(_DWORD *)(v209 + 56) = v208++;
              v207 = *(_QWORD *)(v207 + 8);
            }
            while (v207 != v92 + 40);
          }
          *(_WORD *)(v92 + 18) = v93 | 0x8000;
        }
        if (*(_DWORD *)(v90 + 56) < *(_DWORD *)(v91 + 56))
        {
          *v8 = v90;
          *(a2 - 1) = v91;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C5EB8C44(v8, v8 + 1, a2 - 1);
      case 4:
        return (unint64_t)sub_1C5EB9204(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v94 = v8 + 2;
        v95 = v8 + 3;
        result = (unint64_t)sub_1C5EB9204(v8, v8 + 1, v8 + 2, v8 + 3);
        v96 = *(a2 - 1);
        v97 = v8[3];
        v98 = *(_QWORD *)(v96 + 40);
        v99 = *(__int16 *)(v98 + 18);
        if ((v99 & 0x80000000) == 0)
        {
          v210 = *(_QWORD *)(v98 + 48);
          if (v210 != v98 + 40)
          {
            v211 = 0;
            do
            {
              v212 = v210 - 24;
              if (!v210)
                v212 = 0;
              *(_DWORD *)(v212 + 56) = v211++;
              v210 = *(_QWORD *)(v210 + 8);
            }
            while (v210 != v98 + 40);
          }
          *(_WORD *)(v98 + 18) = v99 | 0x8000;
        }
        if (*(_DWORD *)(v96 + 56) < *(_DWORD *)(v97 + 56))
        {
          *v95 = v96;
          *(a2 - 1) = v97;
          v100 = *v95;
          v101 = *v94;
          v102 = *(_QWORD *)(*v95 + 40);
          v103 = *(__int16 *)(v102 + 18);
          if ((v103 & 0x80000000) == 0)
          {
            v213 = *(_QWORD *)(v102 + 48);
            if (v213 != v102 + 40)
            {
              v214 = 0;
              do
              {
                v215 = v213 - 24;
                if (!v213)
                  v215 = 0;
                *(_DWORD *)(v215 + 56) = v214++;
                v213 = *(_QWORD *)(v213 + 8);
              }
              while (v213 != v102 + 40);
            }
            *(_WORD *)(v102 + 18) = v103 | 0x8000;
          }
          v104 = *(_DWORD *)(v100 + 56);
          if (v104 < *(_DWORD *)(v101 + 56))
          {
            *v94 = v100;
            *v95 = v101;
            v105 = v8[1];
            v106 = *(_QWORD *)(v100 + 40);
            v107 = *(__int16 *)(v106 + 18);
            if ((v107 & 0x80000000) == 0)
            {
              v216 = *(_QWORD *)(v106 + 48);
              if (v216 != v106 + 40)
              {
                v217 = 0;
                do
                {
                  v218 = v216 - 24;
                  if (!v216)
                    v218 = 0;
                  *(_DWORD *)(v218 + 56) = v217++;
                  v216 = *(_QWORD *)(v216 + 8);
                }
                while (v216 != v106 + 40);
                v104 = *(_DWORD *)(v100 + 56);
              }
              *(_WORD *)(v106 + 18) = v107 | 0x8000;
            }
            if (v104 < *(_DWORD *)(v105 + 56))
            {
              v8[1] = v100;
              v8[2] = v105;
              v108 = *v8;
              v109 = *(_QWORD *)(v100 + 40);
              v110 = *(__int16 *)(v109 + 18);
              if ((v110 & 0x80000000) == 0)
              {
                v219 = *(_QWORD *)(v109 + 48);
                if (v219 != v109 + 40)
                {
                  v220 = 0;
                  do
                  {
                    v221 = v219 - 24;
                    if (!v219)
                      v221 = 0;
                    *(_DWORD *)(v221 + 56) = v220++;
                    v219 = *(_QWORD *)(v219 + 8);
                  }
                  while (v219 != v109 + 40);
                  v104 = *(_DWORD *)(v100 + 56);
                }
                *(_WORD *)(v109 + 18) = v110 | 0x8000;
              }
              if (v104 < *(_DWORD *)(v108 + 56))
              {
                *v8 = v100;
                v8[1] = v108;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v111 = v8 + 1;
          v113 = v8 == a2 || v111 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v113)
            {
              v114 = v8;
              do
              {
                v115 = v111;
                v117 = *v114;
                v116 = v114[1];
                v118 = *(_QWORD *)(v116 + 40);
                v119 = *(__int16 *)(v118 + 18);
                if ((v119 & 0x80000000) == 0)
                {
                  v127 = *(_QWORD *)(v118 + 48);
                  if (v127 != v118 + 40)
                  {
                    v128 = 0;
                    do
                    {
                      v129 = v127 - 24;
                      if (!v127)
                        v129 = 0;
                      *(_DWORD *)(v129 + 56) = v128++;
                      v127 = *(_QWORD *)(v127 + 8);
                    }
                    while (v127 != v118 + 40);
                  }
                  *(_WORD *)(v118 + 18) = v119 | 0x8000;
                }
                v120 = *(_DWORD *)(v116 + 56);
                if (v120 < *(_DWORD *)(v117 + 56))
                {
                  v121 = v115;
                  while (1)
                  {
                    *v121 = v117;
                    if (v114 == v8)
                      break;
                    v121 = v114;
                    v122 = *--v114;
                    v117 = v122;
                    v123 = *(_QWORD *)(v116 + 40);
                    v124 = *(__int16 *)(v123 + 18);
                    if ((v124 & 0x80000000) == 0)
                    {
                      v125 = *(_QWORD *)(v123 + 48);
                      if (v125 != v123 + 40)
                      {
                        v126 = 0;
                        do
                        {
                          result = v125 - 24;
                          if (!v125)
                            result = 0;
                          *(_DWORD *)(result + 56) = v126++;
                          v125 = *(_QWORD *)(v125 + 8);
                        }
                        while (v125 != v123 + 40);
                        v120 = *(_DWORD *)(v116 + 56);
                      }
                      *(_WORD *)(v123 + 18) = v124 | 0x8000;
                    }
                    if (v120 >= *(_DWORD *)(v117 + 56))
                      goto LABEL_170;
                  }
                  v121 = v8;
LABEL_170:
                  *v121 = v116;
                }
                v111 = v115 + 1;
                v114 = v115;
              }
              while (v115 + 1 != a2);
            }
          }
          else if (!v113)
          {
            do
            {
              v163 = v111;
              v165 = *v7;
              v164 = v7[1];
              v166 = *(_QWORD *)(v164 + 40);
              v167 = *(__int16 *)(v166 + 18);
              if ((v167 & 0x80000000) == 0)
              {
                v176 = *(_QWORD *)(v166 + 48);
                if (v176 != v166 + 40)
                {
                  v177 = 0;
                  do
                  {
                    v178 = v176 - 24;
                    if (!v176)
                      v178 = 0;
                    *(_DWORD *)(v178 + 56) = v177++;
                    v176 = *(_QWORD *)(v176 + 8);
                  }
                  while (v176 != v166 + 40);
                }
                *(_WORD *)(v166 + 18) = v167 | 0x8000;
              }
              v168 = *(_DWORD *)(v164 + 56);
              if (v168 < *(_DWORD *)(v165 + 56))
              {
                v169 = v163;
                do
                {
                  *v169 = v165;
                  v169 = v7;
                  v170 = *--v7;
                  v165 = v170;
                  v171 = *(_QWORD *)(v164 + 40);
                  v172 = *(__int16 *)(v171 + 18);
                  if ((v172 & 0x80000000) == 0)
                  {
                    v173 = *(_QWORD *)(v171 + 48);
                    if (v173 != v171 + 40)
                    {
                      v174 = 0;
                      do
                      {
                        v175 = v173 - 24;
                        if (!v173)
                          v175 = 0;
                        *(_DWORD *)(v175 + 56) = v174++;
                        v173 = *(_QWORD *)(v173 + 8);
                      }
                      while (v173 != v171 + 40);
                      v168 = *(_DWORD *)(v164 + 56);
                    }
                    *(_WORD *)(v171 + 18) = v172 | 0x8000;
                  }
                }
                while (v168 < *(_DWORD *)(v165 + 56));
                *v169 = v164;
              }
              v111 = v163 + 1;
              v7 = v163;
            }
            while (v163 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v130 = (unint64_t)(v10 - 2) >> 1;
            v131 = v130;
            do
            {
              v132 = v131;
              if (v130 >= v131)
              {
                v133 = (2 * v131) | 1;
                v134 = &v8[v133];
                if (2 * v132 + 2 < v10)
                {
                  v135 = *v134;
                  v136 = v134[1];
                  v137 = *(_QWORD *)(*v134 + 40);
                  result = *(__int16 *)(v137 + 18);
                  if ((result & 0x80000000) == 0)
                  {
                    v160 = *(_QWORD *)(v137 + 48);
                    if (v160 != v137 + 40)
                    {
                      v161 = 0;
                      do
                      {
                        v162 = v160 - 24;
                        if (!v160)
                          v162 = 0;
                        *(_DWORD *)(v162 + 56) = v161++;
                        v160 = *(_QWORD *)(v160 + 8);
                      }
                      while (v160 != v137 + 40);
                    }
                    result = result | 0x8000;
                    *(_WORD *)(v137 + 18) = result;
                  }
                  if (*(_DWORD *)(v135 + 56) < *(_DWORD *)(v136 + 56))
                  {
                    ++v134;
                    v133 = 2 * v132 + 2;
                  }
                }
                v138 = &v8[v132];
                v139 = *v134;
                v140 = *v138;
                v141 = *(_QWORD *)(*v134 + 40);
                v142 = *(__int16 *)(v141 + 18);
                if ((v142 & 0x80000000) == 0)
                {
                  result = v141 + 40;
                  v157 = *(uint64_t **)(v141 + 48);
                  if (v157 != (uint64_t *)(v141 + 40))
                  {
                    v158 = 0;
                    do
                    {
                      v159 = v157 - 3;
                      if (!v157)
                        v159 = 0;
                      *((_DWORD *)v159 + 14) = v158++;
                      v157 = (uint64_t *)v157[1];
                    }
                    while (v157 != (uint64_t *)result);
                  }
                  *(_WORD *)(v141 + 18) = v142 | 0x8000;
                }
                if (*(_DWORD *)(v139 + 56) >= *(_DWORD *)(v140 + 56))
                {
                  do
                  {
                    v143 = v134;
                    *v138 = v139;
                    if (v130 < v133)
                      break;
                    v144 = (2 * v133) | 1;
                    v134 = &v8[v144];
                    v133 = 2 * v133 + 2;
                    if (v133 >= v10)
                    {
                      v133 = v144;
                    }
                    else
                    {
                      v145 = *v134;
                      v146 = v134[1];
                      v147 = *(_QWORD *)(*v134 + 40);
                      v148 = *(__int16 *)(v147 + 18);
                      if ((v148 & 0x80000000) == 0)
                      {
                        v154 = *(_QWORD *)(v147 + 48);
                        if (v154 != v147 + 40)
                        {
                          v155 = 0;
                          do
                          {
                            v156 = v154 - 24;
                            if (!v154)
                              v156 = 0;
                            *(_DWORD *)(v156 + 56) = v155++;
                            v154 = *(_QWORD *)(v154 + 8);
                          }
                          while (v154 != v147 + 40);
                        }
                        *(_WORD *)(v147 + 18) = v148 | 0x8000;
                      }
                      if (*(_DWORD *)(v145 + 56) >= *(_DWORD *)(v146 + 56))
                        v133 = v144;
                      else
                        ++v134;
                    }
                    v139 = *v134;
                    v149 = *(_QWORD *)(*v134 + 40);
                    v150 = *(__int16 *)(v149 + 18);
                    if ((v150 & 0x80000000) == 0)
                    {
                      v151 = *(_QWORD *)(v149 + 48);
                      if (v151 != v149 + 40)
                      {
                        v152 = 0;
                        do
                        {
                          v153 = v151 - 24;
                          if (!v151)
                            v153 = 0;
                          *(_DWORD *)(v153 + 56) = v152++;
                          v151 = *(_QWORD *)(v151 + 8);
                        }
                        while (v151 != v149 + 40);
                      }
                      *(_WORD *)(v149 + 18) = v150 | 0x8000;
                    }
                    result = *(unsigned int *)(v140 + 56);
                    v138 = v143;
                  }
                  while (*(_DWORD *)(v139 + 56) >= result);
                  *v143 = v140;
                }
              }
              v131 = v132 - 1;
            }
            while (v132);
            do
            {
              v181 = 0;
              v182 = *v8;
              v183 = v8;
              do
              {
                v184 = &v183[v181 + 1];
                v185 = (2 * v181) | 1;
                v186 = 2 * v181 + 2;
                if (v186 < v10)
                {
                  v187 = *v184;
                  v188 = v184[1];
                  result = *(_QWORD *)(*v184 + 40);
                  v189 = *(__int16 *)(result + 18);
                  if ((v189 & 0x80000000) == 0)
                  {
                    v190 = *(uint64_t **)(result + 48);
                    if (v190 != (uint64_t *)(result + 40))
                    {
                      v191 = 0;
                      do
                      {
                        v192 = v190 - 3;
                        if (!v190)
                          v192 = 0;
                        *((_DWORD *)v192 + 14) = v191++;
                        v190 = (uint64_t *)v190[1];
                      }
                      while (v190 != (uint64_t *)(result + 40));
                    }
                    *(_WORD *)(result + 18) = v189 | 0x8000;
                  }
                  if (*(_DWORD *)(v187 + 56) < *(_DWORD *)(v188 + 56))
                  {
                    ++v184;
                    v185 = v186;
                  }
                }
                *v183 = *v184;
                v183 = v184;
                v181 = v185;
              }
              while (v185 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v184 == --a2)
              {
                *v184 = v182;
              }
              else
              {
                *v184 = *a2;
                *a2 = v182;
                v193 = (char *)v184 - (char *)v8 + 8;
                if (v193 >= 9)
                {
                  v194 = (((unint64_t)v193 >> 3) - 2) >> 1;
                  v195 = &v8[v194];
                  v196 = *v195;
                  v197 = *v184;
                  v198 = *(_QWORD *)(*v195 + 40);
                  v199 = *(__int16 *)(v198 + 18);
                  if ((v199 & 0x80000000) == 0)
                  {
                    v179 = *(_QWORD *)(v198 + 48);
                    if (v179 != v198 + 40)
                    {
                      LODWORD(result) = 0;
                      do
                      {
                        v180 = v179 - 24;
                        if (!v179)
                          v180 = 0;
                        *(_DWORD *)(v180 + 56) = result;
                        result = (result + 1);
                        v179 = *(_QWORD *)(v179 + 8);
                      }
                      while (v179 != v198 + 40);
                    }
                    *(_WORD *)(v198 + 18) = v199 | 0x8000;
                  }
                  v200 = *(_DWORD *)(v197 + 56);
                  if (*(_DWORD *)(v196 + 56) < v200)
                  {
                    do
                    {
                      v201 = v195;
                      *v184 = v196;
                      if (!v194)
                        break;
                      v194 = (v194 - 1) >> 1;
                      v195 = &v8[v194];
                      v196 = *v195;
                      v202 = *(_QWORD *)(*v195 + 40);
                      v203 = *(__int16 *)(v202 + 18);
                      if ((v203 & 0x80000000) == 0)
                      {
                        result = *(_QWORD *)(v202 + 48);
                        if (result != v202 + 40)
                        {
                          v204 = 0;
                          do
                          {
                            v205 = (uint64_t *)(result - 24);
                            if (!result)
                              v205 = 0;
                            *((_DWORD *)v205 + 14) = v204++;
                            result = *(_QWORD *)(result + 8);
                          }
                          while (result != v202 + 40);
                          v200 = *(_DWORD *)(v197 + 56);
                        }
                        *(_WORD *)(v202 + 18) = v203 | 0x8000;
                      }
                      v184 = v201;
                    }
                    while (*(_DWORD *)(v196 + 56) < v200);
                    *v201 = v197;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (unint64_t)sub_1C5EB8C44(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C5EB8C44(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C5EB8C44(v7 + 1, v12 - 1, a2 - 2);
          sub_1C5EB8C44(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (unint64_t)sub_1C5EB8C44(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(v7 - 1);
          v16 = *(_QWORD *)(v15 + 40);
          v17 = *(__int16 *)(v16 + 18);
          if ((v17 & 0x80000000) == 0)
          {
            v61 = *(_QWORD *)(v16 + 48);
            if (v61 != v16 + 40)
            {
              v62 = 0;
              do
              {
                v63 = v61 - 24;
                if (!v61)
                  v63 = 0;
                *(_DWORD *)(v63 + 56) = v62++;
                v61 = *(_QWORD *)(v61 + 8);
              }
              while (v61 != v16 + 40);
            }
            *(_WORD *)(v16 + 18) = v17 | 0x8000;
          }
          v18 = *(_DWORD *)(v15 + 56);
          v19 = *(_DWORD *)(v14 + 56);
          if (v18 >= v19)
          {
            v64 = *(a2 - 1);
            v65 = *(_QWORD *)(v14 + 40);
            v66 = *(__int16 *)(v65 + 18);
            if ((v66 & 0x80000000) == 0)
            {
              v87 = *(_QWORD *)(v65 + 48);
              if (v87 != v65 + 40)
              {
                v88 = 0;
                do
                {
                  v89 = v87 - 24;
                  if (!v87)
                    v89 = 0;
                  *(_DWORD *)(v89 + 56) = v88++;
                  v87 = *(_QWORD *)(v87 + 8);
                }
                while (v87 != v65 + 40);
                v19 = *(_DWORD *)(v14 + 56);
              }
              LOWORD(v66) = v66 | 0x8000;
              *(_WORD *)(v65 + 18) = v66;
            }
            if (v19 >= *(_DWORD *)(v64 + 56))
            {
              v68 = v7 + 1;
              do
              {
                v8 = v68;
                if (v68 >= a2)
                  break;
                ++v68;
              }
              while (v19 >= *(_DWORD *)(*v8 + 56));
            }
            else
            {
              v8 = v7;
              do
              {
                v67 = v8[1];
                ++v8;
              }
              while (v19 >= *(_DWORD *)(v67 + 56));
            }
            if (v8 >= a2)
            {
              v70 = a2;
            }
            else
            {
              v69 = v65 + 40;
              v70 = a2;
              do
              {
                v72 = *--v70;
                v71 = v72;
                if ((v66 & 0x8000) == 0)
                {
                  v73 = *(_QWORD *)(v65 + 48);
                  if (v73 != v69)
                  {
                    v74 = 0;
                    do
                    {
                      v75 = v73 - 24;
                      if (!v73)
                        v75 = 0;
                      *(_DWORD *)(v75 + 56) = v74++;
                      v73 = *(_QWORD *)(v73 + 8);
                    }
                    while (v73 != v69);
                    v19 = *(_DWORD *)(v14 + 56);
                  }
                  LOWORD(v66) = v66 | 0x8000;
                  *(_WORD *)(v65 + 18) = v66;
                }
              }
              while (v19 < *(_DWORD *)(v71 + 56));
            }
            if (v8 < v70)
            {
              v76 = *v8;
              v77 = *v70;
              do
              {
                *v8 = v77;
                *v70 = v76;
                v78 = *(_QWORD *)(v14 + 40);
                v79 = *(_WORD *)(v78 + 18);
                v80 = v78 + 40;
                do
                {
                  v81 = v8[1];
                  ++v8;
                  v76 = v81;
                  if ((v79 & 0x8000) == 0)
                  {
                    v82 = *(_QWORD *)(v78 + 48);
                    if (v82 != v80)
                    {
                      v83 = 0;
                      do
                      {
                        v84 = v82 - 24;
                        if (!v82)
                          v84 = 0;
                        *(_DWORD *)(v84 + 56) = v83++;
                        v82 = *(_QWORD *)(v82 + 8);
                      }
                      while (v82 != v80);
                      v19 = *(_DWORD *)(v14 + 56);
                    }
                    v79 |= 0x8000u;
                    *(_WORD *)(v78 + 18) = v79;
                  }
                }
                while (v19 >= *(_DWORD *)(v76 + 56));
                do
                {
                  v85 = *--v70;
                  v77 = v85;
                }
                while (v19 < *(_DWORD *)(v85 + 56));
              }
              while (v8 < v70);
            }
            v86 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v86;
            a4 = 0;
            *v86 = v14;
            continue;
          }
        }
        v20 = v7;
        do
        {
          v21 = v20;
          v23 = v20[1];
          ++v20;
          v22 = v23;
          v24 = *(_QWORD *)(v23 + 40);
          v25 = *(__int16 *)(v24 + 18);
          if ((v25 & 0x80000000) == 0)
          {
            v27 = *(_QWORD *)(v24 + 48);
            if (v27 != v24 + 40)
            {
              v28 = 0;
              do
              {
                v29 = v27 - 24;
                if (!v27)
                  v29 = 0;
                *(_DWORD *)(v29 + 56) = v28++;
                v27 = *(_QWORD *)(v27 + 8);
              }
              while (v27 != v24 + 40);
            }
            *(_WORD *)(v24 + 18) = v25 | 0x8000;
          }
          v26 = *(_DWORD *)(v14 + 56);
        }
        while (*(_DWORD *)(v22 + 56) < v26);
        if (v21 == v7)
        {
          v30 = a2;
          do
          {
            if (v20 >= v30)
              break;
            v39 = *--v30;
            v38 = v39;
            v40 = *(_QWORD *)(v39 + 40);
            v41 = *(__int16 *)(v40 + 18);
            if ((v41 & 0x80000000) == 0)
            {
              v42 = *(_QWORD *)(v40 + 48);
              if (v42 != v40 + 40)
              {
                v43 = 0;
                do
                {
                  v44 = v42 - 24;
                  if (!v42)
                    v44 = 0;
                  *(_DWORD *)(v44 + 56) = v43++;
                  v42 = *(_QWORD *)(v42 + 8);
                }
                while (v42 != v40 + 40);
                v26 = *(_DWORD *)(v14 + 56);
              }
              *(_WORD *)(v40 + 18) = v41 | 0x8000;
            }
          }
          while (*(_DWORD *)(v38 + 56) >= v26);
        }
        else
        {
          v30 = a2;
          do
          {
            v32 = *--v30;
            v31 = v32;
            v33 = *(_QWORD *)(v32 + 40);
            v34 = *(__int16 *)(v33 + 18);
            if ((v34 & 0x80000000) == 0)
            {
              v35 = *(_QWORD *)(v33 + 48);
              if (v35 != v33 + 40)
              {
                v36 = 0;
                do
                {
                  v37 = v35 - 24;
                  if (!v35)
                    v37 = 0;
                  *(_DWORD *)(v37 + 56) = v36++;
                  v35 = *(_QWORD *)(v35 + 8);
                }
                while (v35 != v33 + 40);
                v26 = *(_DWORD *)(v14 + 56);
              }
              *(_WORD *)(v33 + 18) = v34 | 0x8000;
            }
          }
          while (*(_DWORD *)(v31 + 56) >= v26);
        }
        if (v20 >= v30)
        {
          v8 = v20;
        }
        else
        {
          v45 = *v30;
          v8 = v20;
          v46 = v30;
          do
          {
            *v8 = v45;
            *v46 = v22;
            do
            {
              v47 = v8[1];
              ++v8;
              v22 = v47;
              v48 = *(_QWORD *)(v47 + 40);
              v49 = *(__int16 *)(v48 + 18);
              if ((v49 & 0x80000000) == 0)
              {
                v50 = *(_QWORD *)(v48 + 48);
                if (v50 != v48 + 40)
                {
                  v51 = 0;
                  do
                  {
                    v52 = v50 - 24;
                    if (!v50)
                      v52 = 0;
                    *(_DWORD *)(v52 + 56) = v51++;
                    v50 = *(_QWORD *)(v50 + 8);
                  }
                  while (v50 != v48 + 40);
                  v26 = *(_DWORD *)(v14 + 56);
                }
                *(_WORD *)(v48 + 18) = v49 | 0x8000;
              }
            }
            while (*(_DWORD *)(v22 + 56) < v26);
            do
            {
              v56 = *--v46;
              v45 = v56;
              v57 = *(_QWORD *)(v56 + 40);
              v58 = *(__int16 *)(v57 + 18);
              if ((v58 & 0x80000000) == 0)
              {
                v53 = *(_QWORD *)(v57 + 48);
                if (v53 != v57 + 40)
                {
                  v54 = 0;
                  do
                  {
                    v55 = v53 - 24;
                    if (!v53)
                      v55 = 0;
                    *(_DWORD *)(v55 + 56) = v54++;
                    v53 = *(_QWORD *)(v53 + 8);
                  }
                  while (v53 != v57 + 40);
                  v26 = *(_DWORD *)(v14 + 56);
                }
                *(_WORD *)(v57 + 18) = v58 | 0x8000;
              }
            }
            while (*(_DWORD *)(v45 + 56) >= v26);
          }
          while (v8 < v46);
        }
        v59 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v59;
        *v59 = v14;
        if (v20 < v30)
        {
LABEL_76:
          result = sub_1C5EB7DA8(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v60 = sub_1C5EB8E0C(v7, v8 - 1);
        result = sub_1C5EB8E0C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v60)
            continue;
          goto LABEL_76;
        }
        a2 = v8 - 1;
        if (!v60)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C5EB8C44(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*a2 + 40);
  v6 = *(__int16 *)(v5 + 18);
  if ((v6 & 0x80000000) == 0)
  {
    v21 = *(_QWORD *)(v5 + 48);
    if (v21 != v5 + 40)
    {
      v22 = 0;
      do
      {
        v23 = v21 - 24;
        if (!v21)
          v23 = 0;
        *(_DWORD *)(v23 + 56) = v22++;
        v21 = *(_QWORD *)(v21 + 8);
      }
      while (v21 != v5 + 40);
    }
    *(_WORD *)(v5 + 18) = v6 | 0x8000;
  }
  v7 = *(_DWORD *)(v3 + 56);
  v8 = *(_DWORD *)(v4 + 56);
  v9 = *a3;
  v10 = *(_QWORD *)(*a3 + 40);
  v11 = *(__int16 *)(v10 + 18);
  if (v11 < 0)
  {
    v12 = *(_DWORD *)(v3 + 56);
  }
  else
  {
    v24 = *(_QWORD *)(v10 + 48);
    v12 = *(_DWORD *)(v3 + 56);
    if (v24 != v10 + 40)
    {
      v25 = 0;
      do
      {
        v26 = v24 - 24;
        if (!v24)
          v26 = 0;
        *(_DWORD *)(v26 + 56) = v25++;
        v24 = *(_QWORD *)(v24 + 8);
      }
      while (v24 != v10 + 40);
      v12 = *(_DWORD *)(v3 + 56);
    }
    *(_WORD *)(v10 + 18) = v11 | 0x8000;
  }
  v13 = *(_DWORD *)(v9 + 56);
  if (v7 >= v8)
  {
    if (v13 < v12)
    {
      *a2 = v9;
      *a3 = v3;
      v14 = *a2;
      v15 = *result;
      v16 = *(_QWORD *)(*a2 + 40);
      v17 = *(__int16 *)(v16 + 18);
      if ((v17 & 0x80000000) == 0)
      {
        v27 = *(_QWORD *)(v16 + 48);
        if (v27 != v16 + 40)
        {
          v28 = 0;
          do
          {
            v29 = v27 - 24;
            if (!v27)
              v29 = 0;
            *(_DWORD *)(v29 + 56) = v28++;
            v27 = *(_QWORD *)(v27 + 8);
          }
          while (v27 != v16 + 40);
        }
        *(_WORD *)(v16 + 18) = v17 | 0x8000;
      }
      if (*(_DWORD *)(v14 + 56) < *(_DWORD *)(v15 + 56))
      {
        *result = v14;
        *a2 = v15;
      }
    }
  }
  else
  {
    if (v13 < v12)
    {
      *result = v9;
LABEL_14:
      *a3 = v4;
      return result;
    }
    *result = v3;
    *a2 = v4;
    v18 = *a3;
    v19 = *(_QWORD *)(*a3 + 40);
    v20 = *(__int16 *)(v19 + 18);
    if ((v20 & 0x80000000) == 0)
    {
      v30 = *(_QWORD *)(v19 + 48);
      if (v30 != v19 + 40)
      {
        v31 = 0;
        do
        {
          v32 = v30 - 24;
          if (!v30)
            v32 = 0;
          *(_DWORD *)(v32 + 56) = v31++;
          v30 = *(_QWORD *)(v30 + 8);
        }
        while (v30 != v19 + 40);
      }
      *(_WORD *)(v19 + 18) = v20 | 0x8000;
    }
    if (*(_DWORD *)(v18 + 56) < *(_DWORD *)(v4 + 56))
    {
      *a2 = v18;
      goto LABEL_14;
    }
  }
  return result;
}

BOOL sub_1C5EB8E0C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(_QWORD *)(v6 + 40);
      v9 = *(__int16 *)(v8 + 18);
      if ((v9 & 0x80000000) == 0)
      {
        v45 = *(_QWORD *)(v8 + 48);
        if (v45 != v8 + 40)
        {
          v46 = 0;
          do
          {
            v47 = v45 - 24;
            if (!v45)
              v47 = 0;
            *(_DWORD *)(v47 + 56) = v46++;
            v45 = *(_QWORD *)(v45 + 8);
          }
          while (v45 != v8 + 40);
        }
        *(_WORD *)(v8 + 18) = v9 | 0x8000;
      }
      if (*(_DWORD *)(v6 + 56) < *(_DWORD *)(v7 + 56))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      sub_1C5EB8C44(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C5EB9204(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v28 = a1 + 2;
      v29 = a1 + 3;
      sub_1C5EB9204(a1, a1 + 1, a1 + 2, a1 + 3);
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = *(_QWORD *)(v30 + 40);
      v33 = *(__int16 *)(v32 + 18);
      if ((v33 & 0x80000000) == 0)
      {
        v48 = *(_QWORD *)(v32 + 48);
        if (v48 != v32 + 40)
        {
          v49 = 0;
          do
          {
            v50 = v48 - 24;
            if (!v48)
              v50 = 0;
            *(_DWORD *)(v50 + 56) = v49++;
            v48 = *(_QWORD *)(v48 + 8);
          }
          while (v48 != v32 + 40);
        }
        *(_WORD *)(v32 + 18) = v33 | 0x8000;
      }
      if (*(_DWORD *)(v30 + 56) < *(_DWORD *)(v31 + 56))
      {
        *v29 = v30;
        *(a2 - 1) = v31;
        v34 = *v29;
        v35 = *v28;
        v36 = *(_QWORD *)(*v29 + 40);
        v37 = *(__int16 *)(v36 + 18);
        if ((v37 & 0x80000000) == 0)
        {
          v51 = *(_QWORD *)(v36 + 48);
          if (v51 != v36 + 40)
          {
            v52 = 0;
            do
            {
              v53 = v51 - 24;
              if (!v51)
                v53 = 0;
              *(_DWORD *)(v53 + 56) = v52++;
              v51 = *(_QWORD *)(v51 + 8);
            }
            while (v51 != v36 + 40);
          }
          *(_WORD *)(v36 + 18) = v37 | 0x8000;
        }
        v38 = *(_DWORD *)(v34 + 56);
        if (v38 < *(_DWORD *)(v35 + 56))
        {
          *v28 = v34;
          *v29 = v35;
          v39 = a1[1];
          v40 = *(_QWORD *)(v34 + 40);
          v41 = *(__int16 *)(v40 + 18);
          if ((v41 & 0x80000000) == 0)
          {
            v54 = *(_QWORD *)(v40 + 48);
            if (v54 != v40 + 40)
            {
              v55 = 0;
              do
              {
                v56 = v54 - 24;
                if (!v54)
                  v56 = 0;
                *(_DWORD *)(v56 + 56) = v55++;
                v54 = *(_QWORD *)(v54 + 8);
              }
              while (v54 != v40 + 40);
              v38 = *(_DWORD *)(v34 + 56);
            }
            *(_WORD *)(v40 + 18) = v41 | 0x8000;
          }
          if (v38 < *(_DWORD *)(v39 + 56))
          {
            a1[1] = v34;
            a1[2] = v39;
            v42 = *a1;
            v43 = *(_QWORD *)(v34 + 40);
            v44 = *(__int16 *)(v43 + 18);
            if ((v44 & 0x80000000) == 0)
            {
              v57 = *(_QWORD *)(v43 + 48);
              if (v57 != v43 + 40)
              {
                v58 = 0;
                do
                {
                  v59 = v57 - 24;
                  if (!v57)
                    v59 = 0;
                  *(_DWORD *)(v59 + 56) = v58++;
                  v57 = *(_QWORD *)(v57 + 8);
                }
                while (v57 != v43 + 40);
                v38 = *(_DWORD *)(v34 + 56);
              }
              *(_WORD *)(v43 + 18) = v44 | 0x8000;
            }
            if (v38 < *(_DWORD *)(v42 + 56))
            {
              *a1 = v34;
              a1[1] = v42;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      sub_1C5EB8C44(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v11;
    v14 = *v10;
    v15 = *(_QWORD *)(*v11 + 40);
    v16 = *(__int16 *)(v15 + 18);
    if ((v16 & 0x80000000) == 0)
    {
      v25 = *(_QWORD *)(v15 + 48);
      if (v25 != v15 + 40)
      {
        v26 = 0;
        do
        {
          v27 = v25 - 24;
          if (!v25)
            v27 = 0;
          *(_DWORD *)(v27 + 56) = v26++;
          v25 = *(_QWORD *)(v25 + 8);
        }
        while (v25 != v15 + 40);
      }
      *(_WORD *)(v15 + 18) = v16 | 0x8000;
    }
    v17 = *(_DWORD *)(v13 + 56);
    if (v17 < *(_DWORD *)(v14 + 56))
    {
      v18 = v11;
      while (1)
      {
        *v18 = v14;
        if (v10 == a1)
          break;
        v18 = v10;
        v19 = *--v10;
        v14 = v19;
        v20 = *(_QWORD *)(v13 + 40);
        v21 = *(__int16 *)(v20 + 18);
        if ((v21 & 0x80000000) == 0)
        {
          v22 = *(_QWORD *)(v20 + 48);
          if (v22 != v20 + 40)
          {
            v23 = 0;
            do
            {
              v24 = v22 - 24;
              if (!v22)
                v24 = 0;
              *(_DWORD *)(v24 + 56) = v23++;
              v22 = *(_QWORD *)(v22 + 8);
            }
            while (v22 != v20 + 40);
            v17 = *(_DWORD *)(v13 + 56);
          }
          *(_WORD *)(v20 + 18) = v21 | 0x8000;
        }
        if (v17 >= *(_DWORD *)(v14 + 56))
          goto LABEL_22;
      }
      v18 = a1;
LABEL_22:
      *v18 = v13;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11++;
    if (v11 == a2)
      return 1;
  }
}

uint64_t *sub_1C5EB9204(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  result = sub_1C5EB8C44(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = *(_QWORD *)(*a4 + 40);
  v12 = *(__int16 *)(v11 + 18);
  if ((v12 & 0x80000000) == 0)
  {
    v21 = *(_QWORD *)(v11 + 48);
    if (v21 != v11 + 40)
    {
      v22 = 0;
      do
      {
        v23 = v21 - 24;
        if (!v21)
          v23 = 0;
        *(_DWORD *)(v23 + 56) = v22++;
        v21 = *(_QWORD *)(v21 + 8);
      }
      while (v21 != v11 + 40);
    }
    *(_WORD *)(v11 + 18) = v12 | 0x8000;
  }
  if (*(_DWORD *)(v9 + 56) < *(_DWORD *)(v10 + 56))
  {
    *a3 = v9;
    *a4 = v10;
    v13 = *a3;
    v14 = *a2;
    v15 = *(_QWORD *)(*a3 + 40);
    v16 = *(__int16 *)(v15 + 18);
    if ((v16 & 0x80000000) == 0)
    {
      v24 = *(_QWORD *)(v15 + 48);
      if (v24 != v15 + 40)
      {
        v25 = 0;
        do
        {
          v26 = v24 - 24;
          if (!v24)
            v26 = 0;
          *(_DWORD *)(v26 + 56) = v25++;
          v24 = *(_QWORD *)(v24 + 8);
        }
        while (v24 != v15 + 40);
      }
      *(_WORD *)(v15 + 18) = v16 | 0x8000;
    }
    if (*(_DWORD *)(v13 + 56) < *(_DWORD *)(v14 + 56))
    {
      *a2 = v13;
      *a3 = v14;
      v17 = *a2;
      v18 = *a1;
      v19 = *(_QWORD *)(*a2 + 40);
      v20 = *(__int16 *)(v19 + 18);
      if ((v20 & 0x80000000) == 0)
      {
        v27 = *(_QWORD *)(v19 + 48);
        if (v27 != v19 + 40)
        {
          v28 = 0;
          do
          {
            v29 = v27 - 24;
            if (!v27)
              v29 = 0;
            *(_DWORD *)(v29 + 56) = v28++;
            v27 = *(_QWORD *)(v27 + 8);
          }
          while (v27 != v19 + 40);
        }
        *(_WORD *)(v19 + 18) = v20 | 0x8000;
      }
      if (*(_DWORD *)(v17 + 56) < *(_DWORD *)(v18 + 56))
      {
        *a1 = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t sub_1C5EB937C(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t result;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 16;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      v7 = 0;
      result = 0;
      goto LABEL_4;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v9 = sub_1C6179E94(a2);
  v10 = v6 - 1;
  v11 = a2[2];
  v12 = v9 & (v6 - 1);
  v7 = (uint64_t *)(v5 + 80 * v12);
  v13 = *v7;
  v14 = *((_DWORD *)v7 + 2);
  if (*(_QWORD *)a2 == *v7 && v11 == v14)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 != -4096 || v14 != 82)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v14 == 83;
      if (v18 && v13 == -8192)
        v16 = v7;
      v20 = v12 + v17++;
      v12 = v20 & v10;
      v7 = (uint64_t *)(v5 + 80 * (v20 & v10));
      v13 = *v7;
      v14 = *((_DWORD *)v7 + 2);
      if (*(_QWORD *)a2 == *v7 && v11 == v14)
        goto LABEL_4;
    }
    result = 0;
    if (v16)
      v7 = v16;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5EB9478(uint64_t a1, uint64_t a2)
{
  void *v3;
  unint64_t v5;
  const void *v6;
  int v7;
  unsigned int v8;

  v3 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  if (a1 != a2)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v7 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v7;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
LABEL_11:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
      if (v5 < 3)
      {
        v8 = v5;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 24);
        v8 = *(_DWORD *)(a2 + 8);
        if (!v8)
        {
LABEL_10:
          *(_DWORD *)(a1 + 8) = v5;
          goto LABEL_11;
        }
        v6 = *(const void **)a2;
        v3 = *(void **)a1;
      }
      memcpy(v3, v6, 24 * v8);
      goto LABEL_10;
    }
  }
  return a1;
}

void sub_1C5EB953C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  _OWORD *v8;
  _OWORD *v9;
  int v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_OWORD *)(a1 + 8);
    v9 = (_OWORD *)(a1 + 1288);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_14;
    v8 = *(_OWORD **)(a1 + 8);
    v9 = &v8[5 * v7];
  }
  do
  {
    *v8 = xmmword_1C85F2170;
    v8 += 5;
  }
  while (v8 != v9);
LABEL_14:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != 82) && (*(_QWORD *)a2 != -8192 || v10 != 83))
    {
      v13 = 0;
      sub_1C5EB937C(a1, (_DWORD *)a2, &v13);
      v11 = v13;
      *v13 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      sub_1C5EB9478((uint64_t)(v11 + 2), a2 + 16);
      *(_DWORD *)a1 += 2;
      v12 = *(void **)(a2 + 16);
      if ((void *)(a2 + 32) != v12)
        free(v12);
    }
    a2 += 80;
  }
}

uint64_t sub_1C5EB9640()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5EB6FD4(v0);
}

void sub_1C5EB966C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5EB9690(uint64_t a1, uint64_t a2)
{
  void *result;

  result = sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

BOOL sub_1C5EB96C4(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  char **v4;
  char *v5;
  llvm::AssumptionCacheTracker *v6;
  char **AssumptionCache;
  uint64_t AnalysisPass;
  llvm::Instruction *v9;

  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0 || !byte_1ED837140)
    return 0;
  v4 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::AssumptionCacheTracker::ID);
  v6 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (char **)llvm::AssumptionCacheTracker::getAssumptionCache(v6, a2);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
    AnalysisPass = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
  if (AnalysisPass)
    v9 = (llvm::Instruction *)(AnalysisPass + 32);
  else
    v9 = 0;
  return sub_1C5EB5B2C((uint64_t ***)a2, AssumptionCache, v9);
}

uint64_t sub_1C5EB9798()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F587D;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E81A8DC8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED837188);
  if (v2 != -1)
  {
    v6[0] = sub_1C5EB7238;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED837188, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5EB987C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5EB98A0(uint64_t a1, uint64_t a2)
{
  void *result;

  result = sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C5EB98D4(uint64_t a1, llvm::Function *a2)
{
  char **v4;
  char *v5;
  llvm::AssumptionCacheTracker *v6;
  char **AssumptionCache;
  uint64_t AnalysisPass;
  llvm::DominatorTree *v9;
  _QWORD *v10;
  _QWORD *i;
  _QWORD *v12;
  _QWORD *v13;
  llvm::AssumptionCache *v14;
  llvm *v15;
  _QWORD *v16;
  _QWORD *v17;

  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::AssumptionCacheTracker::ID);
  v6 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (char **)llvm::AssumptionCacheTracker::getAssumptionCache(v6, a2);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
    AnalysisPass = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
  v10 = (_QWORD *)((char *)a2 + 72);
  for (i = (_QWORD *)*((_QWORD *)a2 + 10); i != v10; i = (_QWORD *)i[1])
  {
    v12 = i - 3;
    if (!i)
      v12 = 0;
    v13 = (_QWORD *)v12[6];
    if (v13 != v12 + 5)
    {
      if (AnalysisPass)
        v14 = (llvm::AssumptionCache *)(AnalysisPass + 32);
      else
        v14 = 0;
      while (1)
      {
        if (v13)
          v15 = (llvm *)(v13 - 3);
        else
          v15 = 0;
        llvm::salvageKnowledge(v15, AssumptionCache, v14, v9);
        v13 = (_QWORD *)v13[1];
        v16 = i - 3;
        if (!i)
          v16 = 0;
        if (v13 == v16 + 5)
          break;
LABEL_24:
        if (i == v10)
          return 1;
      }
      while (1)
      {
        i = (_QWORD *)i[1];
        if (i == v10)
          return 1;
        v17 = i - 3;
        if (!i)
          v17 = 0;
        v13 = (_QWORD *)v17[6];
        if (v13 != v17 + 5)
          goto LABEL_24;
      }
    }
  }
  return 1;
}

uint64_t sub_1C5EB9A1C()
{
  uint64_t result;
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"enable preservation of all attrbitues. even those that are unlikely to be usefull";
  v1.n128_u64[1] = 81;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::ShouldPreserveAllAttributes, "assume-preserve-all", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::ShouldPreserveAllAttributes, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"enable preservation of attributes throughout code transformation";
  v1.n128_u64[1] = 64;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableKnowledgeRetention, "enable-knowledge-retention", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableKnowledgeRetention, &dword_1C475E000);
  result = sub_1C4D9A2C4("assume-builder-counter", 0x16uLL, "Controls which assumes gets created", 0x23uLL);
  dword_1ED8260E0 = result;
  return result;
}

void llvm::detachDeadBlocks(_QWORD *a1, llvm::Type *a2, uint64_t a3, int a4)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  llvm::ValueAsMetadata *v21;
  llvm::UndefValue *v22;
  uint64_t ***v23;
  uint64_t **v24;
  uint64_t **v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  llvm::ValueSymbolTable *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  _BYTE v38[32];

  if (a2)
  {
    v5 = a1;
    v31 = &a1[(_QWORD)a2];
    v30 = a3 + 16;
    do
    {
      v6 = *v5;
      v34 = v38;
      v35 = v38;
      v36 = 4;
      v37 = 0;
      v8 = (_QWORD *)(v6 + 40);
      v7 = *(_QWORD **)(v6 + 40);
      if (v7 != (_QWORD *)(v6 + 40))
      {
        if (v7)
          v9 = v7 - 3;
        else
          v9 = 0;
        v10 = *((unsigned __int8 *)v9 + 16);
        v11 = v10 - 29;
        if (v10 != 30)
        {
          v12 = 2;
          switch(v11)
          {
            case 1:
              __break(1u);
              return;
            case 2:
              v12 = (*((_DWORD *)v9 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_23;
            case 3:
            case 9:
              v12 = (*((_DWORD *)v9 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_23;
            case 4:
              goto LABEL_11;
            case 7:
              v12 = *((_WORD *)v9 + 9) & 1;
              goto LABEL_23;
            case 8:
              v12 = 1;
              goto LABEL_11;
            case 10:
              v12 = *((_DWORD *)v9 + 20) + 1;
LABEL_23:
              if (!v12)
                goto LABEL_34;
              goto LABEL_11;
            default:
              goto LABEL_34;
          }
        }
        if ((*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 3)
          v12 = 2;
        else
          v12 = 1;
LABEL_11:
        v32 = v5;
        v13 = 0;
        v14 = 0;
        v15 = v9 - 8;
        v16 = v12;
        do
        {
          v17 = *((unsigned __int8 *)v9 + 16);
          if (v17 != 30)
            __asm { BR              X9 }
          v18 = v9[-4 * v14 - 4];
          llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v18, (llvm::BasicBlock *)v6, a4);
          if (a3)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v34, v18);
            if ((_BYTE)a2)
            {
              v19 = *(unsigned int *)(a3 + 8);
              if (v19 >= *(unsigned int *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v30, v19 + 1, 16);
                v19 = *(unsigned int *)(a3 + 8);
              }
              v20 = (_QWORD *)(*(_QWORD *)a3 + 16 * v19);
              *v20 = v6;
              v20[1] = v18 | 4;
              ++*(_DWORD *)(a3 + 8);
            }
          }
          ++v14;
          v13 += 2;
          v15 += 4;
        }
        while (v16 != v14);
        v7 = (_QWORD *)*v8;
        v5 = v32;
LABEL_34:
        while (v7 != v8)
        {
          if (v7)
            v21 = (llvm::ValueAsMetadata *)(v7 - 3);
          else
            v21 = 0;
          if (*((_QWORD *)v21 + 1))
          {
            v22 = llvm::UndefValue::get(*(llvm::UndefValue **)v21, a2);
            llvm::Value::doRAUW(v21, v22, (llvm::Value *)1);
            v7 = (_QWORD *)*v8;
          }
          if (v7)
            v23 = (uint64_t ***)(v7 - 3);
          else
            v23 = 0;
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v6 + 40, v23);
          v24 = v23[3];
          v25 = v23[4];
          *v25 = (uint64_t *)v24;
          v24[1] = (uint64_t *)v25;
          v23[3] = 0;
          v23[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v23);
          v7 = (_QWORD *)*v8;
        }
      }
      v26 = (char *)operator new(0x40uLL);
      *((_DWORD *)v26 + 5) &= 0x38000000u;
      *(_QWORD *)v26 = ***(_QWORD ***)v6 + 1576;
      *((_QWORD *)v26 + 1) = 0;
      v26[16] = 35;
      *(_OWORD *)(v26 + 44) = 0u;
      *(_OWORD *)(v26 + 33) = 0u;
      *(_OWORD *)(v26 + 17) = 0u;
      *((_QWORD *)v26 + 5) = v6;
      *(_WORD *)(v6 + 18) &= ~0x8000u;
      if ((v26[23] & 0x10) != 0)
      {
        v28 = *(_QWORD *)(v6 + 56);
        if (v28)
        {
          v29 = *(llvm::ValueSymbolTable **)(v28 + 104);
          if (v29)
            llvm::ValueSymbolTable::reinsertValue(v29, (llvm::Value *)v26);
        }
      }
      v27 = (_QWORD *)*v8;
      *((_QWORD *)v26 + 3) = *v8;
      *((_QWORD *)v26 + 4) = v8;
      v27[1] = v26 + 24;
      *v8 = v26 + 24;
      if (v35 != v34)
        free(v35);
      ++v5;
    }
    while (v5 != v31);
  }
}

void sub_1C5EB9F00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (*a1)
    v1 = *a1 - 24;
  else
    v1 = 0;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)a1, (uint64_t ***)v1);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD **)(v1 + 32);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v1);
}

void llvm::DeleteDeadBlock(llvm *this, llvm::BasicBlock *a2, llvm::DomTreeUpdater *a3)
{
  int v3;
  void **v5;
  llvm::BasicBlock *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[9];

  v3 = (int)a3;
  v9[8] = *MEMORY[0x1E0C80C00];
  v6 = this;
  v7 = v9;
  v8 = 0x400000000;
  if (a2)
    v5 = &v7;
  else
    v5 = 0;
  llvm::detachDeadBlocks(&v6, (llvm::Type *)1, (uint64_t)v5, v3);
  if (a2)
  {
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)v7, v8);
    llvm::DomTreeUpdater::deleteBB(a2, v6);
  }
  else
  {
    llvm::BasicBlock::eraseFromParent(v6);
  }
  if (v7 != v9)
    free(v7);
}

void llvm::DeleteDeadBlocks(llvm::BasicBlock **a1, llvm::Type *a2, llvm::DomTreeUpdater *a3, int a4)
{
  llvm::BasicBlock **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[9];

  v6 = a1;
  v11[8] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x400000000;
  if (a3)
    v7 = &v9;
  else
    v7 = 0;
  llvm::detachDeadBlocks(a1, a2, (uint64_t)v7, a4);
  if (a3)
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a3, (unint64_t *)v9, v10);
  if (a2)
  {
    v8 = 8 * (_QWORD)a2;
    do
    {
      if (a3)
        llvm::DomTreeUpdater::deleteBB(a3, *v6);
      else
        llvm::BasicBlock::eraseFromParent(*v6);
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  if (v9 != v11)
    free(v9);
}

BOOL llvm::EliminateUnreachableBlocks(llvm *this, llvm::Function *a2, llvm::DomTreeUpdater *a3)
{
  llvm::SmallPtrSetImplBase *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  llvm::SmallPtrSetImplBase *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  char *v39;
  char *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  llvm::SmallPtrSetImplBase **v54;
  uint64_t v55;
  llvm::BasicBlock **v56;
  int v58;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  _BYTE v64[64];
  llvm::SmallPtrSetImplBase *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;

  v58 = (int)a3;
  v69 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::SmallPtrSetImplBase *)&v60;
  v60 = v64;
  v61 = v64;
  v62 = 8;
  v63 = 0;
  v5 = *((_QWORD *)this + 10);
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v60, v6);
  if (v7)
  {
    v8 = operator new(0x20uLL);
    *(_QWORD *)v8 = v6;
    v8[8] = 0;
    v8[24] = 0;
    v9 = v8 + 32;
  }
  else
  {
LABEL_116:
    v9 = 0;
    v8 = 0;
  }
  v65 = v4;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  sub_1C4E19D7C(&v66, v8, v9, (v9 - v8) >> 5);
  if (v8)
    operator delete(v8);
  v10 = (_BYTE *)v66;
  v11 = v67;
  v12 = ((uint64_t)v67 - v66) >> 5;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  sub_1C4E19D7C(&v66, v10, v11, v12);
  v13 = v67;
  if (v67 == (uint64_t *)v66)
  {
LABEL_61:
    if (!v13)
      goto LABEL_63;
  }
  else
  {
LABEL_9:
    while (2)
    {
      v14 = *(v13 - 4);
      if (!*((_BYTE *)v13 - 8))
      {
        v15 = *(_QWORD *)(v14 + 40);
        if (v15 == v14 + 40)
        {
          v16 = 0;
        }
        else
        {
          if (v15)
            v16 = v15 - 24;
          else
            v16 = 0;
          if (*(unsigned __int8 *)(v16 + 16) - 29 >= 0xB)
            v16 = 0;
        }
        *(v13 - 3) = v16;
        *(v13 - 2) = 0;
        *((_BYTE *)v13 - 8) = 1;
      }
      v17 = (_QWORD *)(v14 + 40);
      while (1)
      {
        v18 = (_QWORD *)*v17;
        if ((_QWORD *)*v17 == v17)
        {
LABEL_32:
          v22 = 0;
        }
        else
        {
          v19 = v18 - 3;
          if (!v18)
            v19 = 0;
          v20 = *((unsigned __int8 *)v19 + 16);
          v21 = v20 - 29;
          if (v20 != 30)
          {
            v22 = 0;
            switch(v21)
            {
              case 0:
              case 5:
              case 6:
                goto LABEL_25;
              case 1:
                __break(1u);
                goto LABEL_116;
              case 2:
                v22 = (*((_DWORD *)v19 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_25;
              case 3:
              case 9:
                v22 = (*((_DWORD *)v19 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_25;
              case 4:
                v22 = 2;
                goto LABEL_25;
              case 7:
                v22 = *((_WORD *)v19 + 9) & 1;
                goto LABEL_25;
              case 8:
                v22 = 1;
                goto LABEL_25;
              case 10:
                v22 = *((_DWORD *)v19 + 20) + 1;
                goto LABEL_25;
              default:
                goto LABEL_32;
            }
          }
          v22 = (*((_DWORD *)v19 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
        }
LABEL_25:
        v23 = *((_DWORD *)v13 - 4);
        if (v23 == v22)
          break;
        v25 = *(v13 - 3);
        v24 = *(v13 - 2);
        *((_DWORD *)v13 - 4) = v23 + 1;
        v26 = *(unsigned __int8 *)(v25 + 16);
        if (v26 != 30)
          __asm { BR              X11 }
        v27 = (uint64_t *)(v25 - 32 * v24 - 32);
        v28 = *v27;
        sub_1C4774094(v65, *v27);
        if (v29)
        {
          v30 = (llvm::SmallPtrSetImplBase *)v67;
          if (v67 >= v68)
          {
            v4 = (llvm::SmallPtrSetImplBase *)v66;
            v31 = ((uint64_t)v67 - v66) >> 5;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 59)
LABEL_113:
              abort();
            v33 = (uint64_t)v68 - v66;
            if (((uint64_t)v68 - v66) >> 4 > v32)
              v32 = v33 >> 4;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
              v34 = 0x7FFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              if (v34 >> 59)
LABEL_114:
                sub_1C4764EE4();
              v35 = (char *)operator new(32 * v34);
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[32 * v31];
            *(_QWORD *)v36 = v28;
            v36[8] = 0;
            v36[24] = 0;
            v37 = (uint64_t)v36;
            if (v30 != v4)
            {
              do
              {
                v38 = *((_OWORD *)v30 - 1);
                *(_OWORD *)(v37 - 32) = *((_OWORD *)v30 - 2);
                *(_OWORD *)(v37 - 16) = v38;
                v37 -= 32;
                v30 = (llvm::SmallPtrSetImplBase *)((char *)v30 - 32);
              }
              while (v30 != v4);
              v30 = (llvm::SmallPtrSetImplBase *)v66;
            }
            v13 = (uint64_t *)(v36 + 32);
            v66 = v37;
            v67 = (uint64_t *)(v36 + 32);
            v68 = (uint64_t *)&v35[32 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *v67 = v28;
            *((_BYTE *)v30 + 8) = 0;
            v13 = (uint64_t *)((char *)v30 + 32);
            *((_BYTE *)v30 + 24) = 0;
          }
          v67 = v13;
          if (v13 == (uint64_t *)v66)
          {
            v13 = (uint64_t *)v66;
            goto LABEL_61;
          }
          goto LABEL_9;
        }
      }
      v13 = v67 - 4;
      v67 = v13;
      if ((uint64_t *)v66 != v13)
        continue;
      break;
    }
  }
  v67 = v13;
  operator delete(v13);
LABEL_63:
  if (v10)
    operator delete(v10);
  v39 = (char *)this + 72;
  v40 = (char *)*((_QWORD *)this + 10);
  if (v40 != (char *)this + 72)
  {
    v41 = 0;
    v42 = 0;
    v43 = 0;
    while (1)
    {
      if (v40)
        v44 = (uint64_t)(v40 - 24);
      else
        v44 = 0;
      v45 = (char *)sub_1C477672C((uint64_t)&v60, v44);
      if (v61 == v60)
        v46 = (uint64_t *)((char *)&v62 + 4);
      else
        v46 = &v62;
      if (v45 != &v61[8 * *(unsigned int *)v46])
        goto LABEL_76;
      if (v42 < v43)
        break;
      v48 = v42 - v41;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 61)
        goto LABEL_113;
      if (((char *)v43 - (char *)v41) >> 2 > v49)
        v49 = ((char *)v43 - (char *)v41) >> 2;
      if ((unint64_t)((char *)v43 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
      {
        if (v50 >> 61)
          goto LABEL_114;
        v51 = (char *)operator new(8 * v50);
      }
      else
      {
        v51 = 0;
      }
      v52 = (uint64_t *)&v51[8 * v48];
      *v52 = v44;
      v47 = v52 + 1;
      while (v42 != v41)
      {
        v53 = *--v42;
        *--v52 = v53;
      }
      v43 = (uint64_t *)&v51[8 * v50];
      if (v41)
        operator delete(v41);
      v41 = v52;
LABEL_77:
      v40 = (char *)*((_QWORD *)v40 + 1);
      v42 = v47;
      if (v40 == v39)
        goto LABEL_96;
    }
    *v42++ = v44;
LABEL_76:
    v47 = v42;
    goto LABEL_77;
  }
  v47 = 0;
  v41 = 0;
LABEL_96:
  v65 = (llvm::SmallPtrSetImplBase *)&v67;
  v66 = 0x400000000;
  if (a2)
    v54 = &v65;
  else
    v54 = 0;
  llvm::detachDeadBlocks(v41, (llvm::Type *)(v47 - v41), (uint64_t)v54, v58);
  if (a2)
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)v65, v66);
  if (v47 != v41)
  {
    v55 = 8 * (v47 - v41);
    v56 = (llvm::BasicBlock **)v41;
    do
    {
      if (a2)
        llvm::DomTreeUpdater::deleteBB(a2, *v56);
      else
        llvm::BasicBlock::eraseFromParent(*v56);
      ++v56;
      v55 -= 8;
    }
    while (v55);
  }
  if (v65 == (llvm::SmallPtrSetImplBase *)&v67)
  {
    if (!v41)
      goto LABEL_110;
    goto LABEL_109;
  }
  free(v65);
  if (v41)
LABEL_109:
    operator delete(v41);
LABEL_110:
  if (v61 != v60)
    free(v61);
  return v41 != v47;
}

BOOL llvm::FoldSingleEntryPHINodes(llvm *this, llvm::BasicBlock *a2, llvm::MemoryDependenceResults *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v9;
  llvm::UndefValue **v10;
  llvm::UndefValue *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v3 = *((_QWORD *)this + 6);
  v4 = v3 - 24;
  if (v3)
    v5 = v3 - 24;
  else
    v5 = 0;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v3 && v6 == 83)
  {
    do
    {
      v9 = *(_DWORD *)(v4 + 20);
      if ((v9 & 0x40000000) != 0)
        v10 = *(llvm::UndefValue ***)(v4 - 8);
      else
        v10 = (llvm::UndefValue **)(v4 - 32 * (v9 & 0x7FFFFFF));
      v11 = *v10;
      if (*v10 == (llvm::UndefValue *)v4)
        v11 = llvm::UndefValue::get(*(llvm::UndefValue **)v4, v11);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, v11, (llvm::Value *)1);
      if (a2)
        llvm::MemoryDependenceResults::removeInstruction(a2, (llvm::Instruction *)v4);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v4 + 40) + 40, (uint64_t ***)v4);
      v12 = *(_QWORD *)(v4 + 24);
      v13 = *(_QWORD **)(v4 + 32);
      *v13 = v12;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v4);
      v14 = *((_QWORD *)this + 6);
      v15 = v14 - 24;
      if (!v14)
        v15 = 0;
      v16 = *(unsigned __int8 *)(v15 + 16);
      if (v16 == 83)
        v4 = v15;
      else
        v4 = 0;
    }
    while (v14 && v16 == 83);
  }
  return v6 == 83;
}

uint64_t llvm::DeleteDeadPHIs(uint64_t a1, uint64_t *a2, int32x2_t **a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  int v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  unint64_t v18;
  int32x2_t ****v19;
  int32x2_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int32x2_t *****v25;
  int32x2_t ****v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Instruction *v33;
  uint64_t v35;
  unint64_t *v36;
  int32x2_t ****v37;
  char *v38;
  uint64_t v39;
  _QWORD v40[25];

  v40[24] = *MEMORY[0x1E0C80C00];
  v38 = (char *)v40;
  v39 = 0x800000000;
  if (*(_QWORD *)(a1 + 40) == a1 + 40)
    goto LABEL_44;
  LOBYTE(v3) = 0;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = v4 - 24;
  if (v4)
    v6 = v4 - 24;
  else
    v6 = 0;
  if (!v4 || *(_BYTE *)(v6 + 16) != 83)
    goto LABEL_45;
  do
  {
    v35 = 6;
    v36 = 0;
    v37 = (int32x2_t ****)v5;
    if (v5 != -8192 && v5 != -4096 && v5)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v35);
    v9 = (_QWORD *)sub_1C5087E70((unsigned int *)&v38, (unint64_t)&v35, 1);
    v10 = v39;
    v11 = &v38[24 * v39];
    *(_QWORD *)v11 = 6;
    *((_QWORD *)v11 + 1) = 0;
    v12 = (unint64_t)(v11 + 8);
    v13 = v9[2];
    *((_QWORD *)v11 + 2) = v13;
    if (v13 != -8192 && v13 != -4096 && v13 != 0)
    {
      v15 = *v9 & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v11 + 1) = *(_QWORD *)v15;
      *(_QWORD *)v15 = v11;
      *(_QWORD *)v11 = v15 | 6;
      v16 = (uint64_t *)*((_QWORD *)v11 + 1);
      if (v16)
        *v16 = *v16 & 7 | v12;
    }
    v17 = v10 + 1;
    LODWORD(v39) = v17;
    if (v37 != (int32x2_t ****)-8192 && v37 != (int32x2_t ****)-4096 && v37)
    {
      v18 = v35 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8) = v36;
      if (v36)
      {
        *v36 = *v36 & 7 | v18;
      }
      else
      {
        v19 = v37;
        v20 = ***v37;
        v21 = (unint64_t)v20[303];
        if (v21 <= v18)
        {
          v22 = v20[305].u32[0];
          if (v21 + 16 * v22 > v18)
          {
            v23 = v22 - 1;
            LODWORD(v24) = v23 & ((v37 >> 4) ^ (v37 >> 9));
            v25 = (int32x2_t *****)(v21 + 16 * v24);
            v26 = *v25;
            if (v37 == *v25)
            {
LABEL_29:
              *v25 = (int32x2_t ****)-8192;
              v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
              v19 = v37;
            }
            else
            {
              v27 = 1;
              while (v26 != (int32x2_t ****)-4096)
              {
                v28 = v24 + v27++;
                v24 = v28 & v23;
                v26 = *(int32x2_t *****)(v21 + 16 * v24);
                if (v37 == v26)
                {
                  v25 = (int32x2_t *****)(v21 + 16 * v24);
                  goto LABEL_29;
                }
              }
            }
            *((_BYTE *)v19 + 17) &= ~1u;
          }
        }
      }
    }
    v29 = *(_QWORD *)(v5 + 32);
    v5 = v29 - 24;
    if (v29)
      v30 = v29 - 24;
    else
      v30 = 0;
  }
  while (v29 && *(_BYTE *)(v30 + 16) == 83);
  if (!v17)
  {
LABEL_44:
    LOBYTE(v3) = 0;
    goto LABEL_45;
  }
  v31 = 0;
  v3 = 0;
  v32 = 24 * v17;
  do
  {
    v33 = *(llvm::Instruction **)&v38[v31 + 16];
    if (v33 && *((_BYTE *)v33 + 16) == 83)
      v3 |= llvm::RecursivelyDeleteDeadPHINode(v33, a2, a3);
    v31 += 24;
  }
  while (v32 != v31);
LABEL_45:
  sub_1C52768FC(&v38);
  return v3 & 1;
}

uint64_t llvm::MergeBlockIntoPredecessor(uint64_t this, llvm::BasicBlock *a2, int32x2_t *a3, llvm::LoopInfo *a4, unint64_t a5, llvm::MemoryDependenceResults *a6)
{
  uint64_t result;
  uint64_t v7;
  llvm::MemoryDependenceResults *v13;
  llvm::BasicBlock **UniquePredecessor;
  llvm::BasicBlock *v15;
  llvm::DomTreeUpdater *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::DomTreeUpdater *v36;
  unsigned int v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::DomTreeUpdater *v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  int v52;
  int v53;
  _QWORD *v54;
  int v55;
  int v56;
  llvm::MemorySSAUpdater *v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  char v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  llvm::BasicBlock **v71;
  llvm::BasicBlock **v72;
  _QWORD *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  llvm::BasicBlock **v101;
  char *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t *v105;
  llvm::Instruction *v106;
  llvm::Instruction *v107;
  uint64_t *v108;
  llvm::ValueSymbolTable *v109;
  uint64_t *v110;
  uint64_t v111;
  llvm::ValueSymbolTable *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  llvm::DomTreeUpdater *v118;
  int32x2_t *v119;
  _QWORD *v120;
  _QWORD *v121;
  __int32 v122;
  int32x2_t v123;
  __int32 v124;
  uint64_t v125;
  _QWORD *v126;
  int v127;
  int v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void **v132;
  int v133;
  BOOL v134;
  unsigned int v135;
  void *v136;
  llvm::Value *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  llvm::Value **v142;
  llvm::Value *v143;
  int v144;
  int v145;
  uint64_t v146;
  size_t *v147;
  int v148;
  size_t v149;
  unsigned __int8 *v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  _QWORD *v157;
  llvm::Instruction *v158;
  llvm::ValueSymbolTable *v159;
  uint64_t v160;
  int v161;
  unsigned __int8 *__s1;
  uint64_t *v163;
  uint64_t v164;
  llvm::Value *v165;
  size_t __n;
  llvm::DomTreeUpdater *v167;
  llvm::DomTreeUpdater *v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  llvm::MemorySSAUpdater *v172;
  int32x2_t *v173;
  llvm::BasicBlock *v174;
  unsigned int *v175;
  _QWORD *v176;
  int v177;
  llvm::BasicBlock *v178;
  void *__p;
  char *v180;
  char *v181;
  llvm::BasicBlock *v182;
  llvm::BasicBlock *v183;
  uint64_t v184;
  int v185;
  _BYTE v186[16];
  void *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  _BYTE v191[64];
  _QWORD *v192;
  uint64_t v193;
  _QWORD v194[6];

  v194[4] = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(this + 18) & 0x7FFF) != 0)
    return 0;
  LODWORD(v7) = (_DWORD)a6;
  UniquePredecessor = (llvm::BasicBlock **)llvm::BasicBlock::getUniquePredecessor((llvm::BasicBlock *)this);
  result = 0;
  if (UniquePredecessor && UniquePredecessor != (llvm::BasicBlock **)this)
  {
    v16 = (llvm::DomTreeUpdater *)(UniquePredecessor + 5);
    v15 = UniquePredecessor[5];
    v17 = (uint64_t)v15 - 24;
    if (v15)
      v18 = (char *)v15 - 24;
    else
      v18 = 0;
    v19 = v18[16] - 40;
    if (v19 < 0xFFFFFFF5)
      v18 = 0;
    v20 = v18[16];
    if ((v20 - 33) < 6 && ((0x3Bu >> (v20 - 33)) & 1) != 0)
      return 0;
    if ((v7 & 1) != 0)
    {
      result = 0;
      if (!v15)
        return result;
      if (v20 != 30 || v19 < 0xFFFFFFF5)
        return result;
      v22 = *(_QWORD *)(this + 40);
      if (v22 != this + 40)
      {
        result = 0;
        v23 = v22 - 24;
        if (!v22)
          v23 = 0;
        v24 = *(unsigned __int8 *)(v23 + 16) - 40;
        if (v24 < 0xFFFFFFF5)
          v23 = 0;
        if (!v22)
          return result;
        if (*(_BYTE *)(v23 + 16) != 30 || v24 < 0xFFFFFFF5)
          return result;
        if ((*(_DWORD *)(v23 + 20) & 0x7FFFFFF) == 1)
        {
          v170 = *(_QWORD *)(v23 - 32);
          v171 = v17;
          v169 = *((_QWORD *)v18 - 4) != this;
          goto LABEL_35;
        }
      }
    }
    else if (llvm::BasicBlock::getUniqueSuccessor((llvm::BasicBlock *)UniquePredecessor) == this)
    {
      v169 = 0;
      v170 = 0;
      v171 = 0;
      v22 = *(_QWORD *)(this + 40);
      v16 = (llvm::DomTreeUpdater *)(UniquePredecessor + 5);
LABEL_35:
      v176 = (_QWORD *)(this + 40);
      if (v22 == this + 40)
      {
LABEL_294:
        v175 = (unsigned int *)a5;
        v26 = *(_QWORD *)(this + 48);
      }
      else
      {
        v26 = *(_QWORD *)(this + 48);
        v27 = v26 - 24;
        if (v26)
          v28 = v26 - 24;
        else
          v28 = 0;
        if (v26)
        {
          do
          {
            if (*(_BYTE *)(v28 + 16) != 83)
              break;
            v29 = *(_DWORD *)(v27 + 20);
            if ((v29 & 0x40000000) != 0)
            {
              v31 = *(char **)(v27 - 8);
              v30 = v29 & 0x7FFFFFF;
              if (v30)
              {
LABEL_43:
                v32 = 32 * v30;
                v33 = v31;
                while (*(_QWORD *)v33 != v27)
                {
                  v33 += 32;
                  v32 -= 32;
                  if (!v32)
                  {
                    v33 = &v31[32 * v30];
                    goto LABEL_49;
                  }
                }
                goto LABEL_49;
              }
            }
            else
            {
              v30 = v29 & 0x7FFFFFF;
              v31 = (char *)(v27 - 32 * v30);
              if (v30)
                goto LABEL_43;
            }
            v33 = v31;
LABEL_49:
            if (v30 != (v33 - v31) >> 5)
              return 0;
            v34 = *(_QWORD *)(v27 + 32);
            v27 = v34 - 24;
            if (v34)
              v28 = v34 - 24;
            else
              v28 = 0;
          }
          while (v34);
        }
        v175 = (unsigned int *)a5;
      }
      v192 = v194;
      v193 = 0x400000000;
      a5 = v26 - 24;
      if (v26)
        v35 = v26 - 24;
      else
        v35 = 0;
      if (*(_BYTE *)(v35 + 16) == 83)
      {
        v36 = v16;
        if ((_QWORD *)v22 != v176 && v26)
        {
          v37 = 0;
          do
          {
            v38 = *(_DWORD *)(a5 + 20);
            if ((v38 & 0x40000000) != 0)
              v39 = *(char **)(a5 - 8);
            else
              v39 = (char *)(a5 - 32 * (v38 & 0x7FFFFFF));
            v40 = *(_QWORD *)v39;
            if (*(_BYTE *)(*(_QWORD *)v39 + 16) != 83 || *(_QWORD *)(v40 + 40) != this)
            {
              if (v37 >= HIDWORD(v193))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v192, (uint64_t)v194, v37 + 1, 8);
                v37 = v193;
              }
              v192[v37] = v40;
              v37 = v193 + 1;
              LODWORD(v193) = v193 + 1;
            }
            v41 = *(_QWORD *)(a5 + 32);
            a5 = v41 - 24;
            if (v41)
              v42 = v41 - 24;
            else
              v42 = 0;
          }
          while (v41 && *(_BYTE *)(v42 + 16) == 83);
        }
        llvm::FoldSingleEntryPHINodes((llvm *)this, (llvm::BasicBlock *)v175, v13);
        v16 = v36;
      }
      __p = 0;
      v180 = 0;
      v181 = 0;
      v43 = *(llvm::DomTreeUpdater **)v16;
      v174 = a2;
      v172 = a4;
      v173 = a3;
      v178 = (llvm::BasicBlock *)UniquePredecessor;
      v177 = v7;
      if (!a2)
        goto LABEL_203;
      v187 = v191;
      v188 = (uint64_t)v191;
      v189 = 8;
      v190 = 0;
      if (v43 == v16)
      {
LABEL_92:
        v48 = 0;
        v22 = 0;
        v182 = (llvm::BasicBlock *)v186;
        v183 = (llvm::BasicBlock *)v186;
        v184 = 2;
        v185 = 0;
      }
      else
      {
        if (v43)
          a5 = (unint64_t)v43 - 24;
        else
          a5 = 0;
        v44 = *(unsigned __int8 *)(a5 + 16);
        v45 = v44 - 29;
        if (v44 == 30)
        {
          if ((*(_DWORD *)(a5 + 20) & 0x7FFFFFF) == 3)
            LODWORD(v22) = 2;
          else
            LODWORD(v22) = 1;
LABEL_85:
          v182 = (llvm::BasicBlock *)v186;
          v183 = (llvm::BasicBlock *)v186;
          v184 = 2;
          v185 = 0;
LABEL_86:
          v46 = 0;
          UniquePredecessor = (llvm::BasicBlock **)(a5 + 32);
          a2 = (llvm::BasicBlock *)(a5 - 32);
          v7 = v22;
          a4 = (llvm::LoopInfo *)(a5 - 32);
          do
          {
            v47 = *(unsigned __int8 *)(a5 + 16);
            if (v47 != 30)
              __asm { BR              X9 }
            a3 = (int32x2_t *)v16;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v182, *(_QWORD *)a4);
            ++v46;
            a4 = (llvm::LoopInfo *)((char *)a4 - 32);
            v16 = (llvm::DomTreeUpdater *)a3;
          }
          while (v7 != v46);
          v48 = __p;
          v22 = (uint64_t)v180;
        }
        else
        {
          v22 = 2;
          switch(v45)
          {
            case 1:
LABEL_293:
              __break(1u);
              goto LABEL_294;
            case 2:
              LODWORD(v22) = (*(_DWORD *)(a5 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_284;
            case 3:
            case 9:
              LODWORD(v22) = (*(_DWORD *)(a5 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_284;
            case 4:
              goto LABEL_85;
            case 7:
              LODWORD(v22) = *(_WORD *)(a5 + 18) & 1;
              goto LABEL_284;
            case 8:
              LODWORD(v22) = 1;
              goto LABEL_85;
            case 10:
              LODWORD(v22) = *(_DWORD *)(a5 + 80) + 1;
LABEL_284:
              v182 = (llvm::BasicBlock *)v186;
              v183 = (llvm::BasicBlock *)v186;
              v184 = 2;
              v185 = 0;
              if ((_DWORD)v22)
                goto LABEL_86;
              v48 = 0;
              v22 = 0;
              break;
            default:
              goto LABEL_92;
          }
        }
      }
      v49 = (_QWORD *)*v176;
      v167 = v16;
      if ((_QWORD *)*v176 == v176)
      {
LABEL_100:
        v53 = 0;
      }
      else
      {
        v50 = v49 - 3;
        if (!v49)
          v50 = 0;
        v51 = *((unsigned __int8 *)v50 + 16);
        v52 = v51 - 29;
        if (v51 != 30)
        {
          v53 = 0;
          switch(v52)
          {
            case 0:
            case 5:
            case 6:
              goto LABEL_101;
            case 1:
              goto LABEL_293;
            case 2:
              v53 = (*((_DWORD *)v50 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_101;
            case 3:
            case 9:
              v53 = (*((_DWORD *)v50 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_101;
            case 4:
              v53 = 2;
              goto LABEL_101;
            case 7:
              v53 = *((_WORD *)v50 + 9) & 1;
              goto LABEL_101;
            case 8:
              v53 = 1;
              goto LABEL_101;
            case 10:
              v53 = *((_DWORD *)v50 + 20) + 1;
              goto LABEL_101;
            default:
              goto LABEL_100;
          }
        }
        if ((*((_DWORD *)v50 + 5) & 0x7FFFFFF) == 3)
          v53 = 2;
        else
          v53 = 1;
      }
LABEL_101:
      sub_1C501881C((uint64_t)&__p, ((v22 - (uint64_t)v48) >> 4) + (2 * v53) + 1);
      v54 = (_QWORD *)*v176;
      if ((_QWORD *)*v176 != v176)
      {
        if (v54)
          a4 = (llvm::LoopInfo *)(v54 - 3);
        else
          a4 = 0;
        v55 = *((unsigned __int8 *)a4 + 16);
        v56 = v55 - 29;
        if (v55 != 30)
        {
          v22 = 2;
          switch(v56)
          {
            case 1:
              goto LABEL_293;
            case 2:
              LODWORD(v22) = (*((_DWORD *)a4 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_276;
            case 3:
            case 9:
              LODWORD(v22) = (*((_DWORD *)a4 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_276;
            case 4:
              goto LABEL_109;
            case 7:
              LODWORD(v22) = *((_WORD *)a4 + 9) & 1;
              goto LABEL_276;
            case 8:
              LODWORD(v22) = 1;
              goto LABEL_109;
            case 10:
              LODWORD(v22) = *((_DWORD *)a4 + 20) + 1;
LABEL_276:
              if (!(_DWORD)v22)
                goto LABEL_139;
              goto LABEL_109;
            default:
              goto LABEL_139;
          }
        }
        if ((*((_DWORD *)a4 + 5) & 0x7FFFFFF) == 3)
          LODWORD(v22) = 2;
        else
          LODWORD(v22) = 1;
LABEL_109:
        v57 = 0;
        a2 = (llvm::LoopInfo *)((char *)a4 - 32);
        a5 = v22;
        UniquePredecessor = &v182;
        do
        {
          v58 = *((unsigned __int8 *)a4 + 16);
          if (v58 != 30)
            __asm { BR              X9 }
          v59 = *((_QWORD *)a2 - 4 * (_QWORD)v57);
          v60 = sub_1C477672C((uint64_t)&v182, v59);
          if (v183 == v182)
            v61 = (uint64_t *)((char *)&v184 + 4);
          else
            v61 = &v184;
          if (v60 == (_QWORD *)((char *)v183 + 8 * *(unsigned int *)v61))
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v187, v59);
            if (v62)
            {
              a3 = (int32x2_t *)(v59 & 0xFFFFFFFFFFFFFFFBLL);
              v63 = v180;
              if (v180 >= v181)
              {
                v65 = __p;
                v66 = (v180 - (_BYTE *)__p) >> 4;
                v67 = v66 + 1;
                if ((unint64_t)(v66 + 1) >> 60)
                  goto LABEL_291;
                v68 = v181 - (_BYTE *)__p;
                if ((v181 - (_BYTE *)__p) >> 3 > v67)
                  v67 = v68 >> 3;
                if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0)
                  v69 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v69 = v67;
                if (v69)
                {
                  if (v69 >> 60)
                    goto LABEL_292;
                  v70 = (char *)operator new(16 * v69);
                }
                else
                {
                  v70 = 0;
                }
                v71 = (llvm::BasicBlock **)&v70[16 * v66];
                *v71 = v178;
                v71[1] = (llvm::BasicBlock *)a3;
                v72 = v71;
                if (v63 != v65)
                {
                  do
                  {
                    *((_OWORD *)v72 - 1) = *((_OWORD *)v63 - 1);
                    v72 -= 2;
                    v63 -= 2;
                  }
                  while (v63 != v65);
                  v63 = __p;
                }
                v64 = (char *)(v71 + 2);
                __p = v72;
                v180 = (char *)(v71 + 2);
                v181 = &v70[16 * v69];
                if (v63)
                  operator delete(v63);
                UniquePredecessor = &v182;
              }
              else
              {
                *(_QWORD *)v180 = v178;
                v63[1] = a3;
                v64 = (char *)(v63 + 2);
              }
              v180 = v64;
            }
          }
          v57 = (llvm::MemorySSAUpdater *)((char *)v57 + 1);
        }
        while (v57 != (llvm::MemorySSAUpdater *)a5);
      }
LABEL_139:
      if ((void *)v188 != v187)
      {
        if (v189 >= 0x21 && 4 * (HIDWORD(v189) - v190) < v189)
        {
          free((void *)v188);
          v133 = 1 << (33 - __clz(HIDWORD(v189) - v190 - 1));
          v134 = (HIDWORD(v189) - v190) > 0x10;
          v190 = 0;
          if (v134)
            v135 = v133;
          else
            v135 = 32;
          v189 = v135;
          v136 = malloc_type_malloc(8 * v135, 0x4065EBACuLL);
          if (!v136)
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          v188 = (uint64_t)v136;
          memset(v136, 255, 8 * v189);
          goto LABEL_141;
        }
        memset((void *)v188, 255, 8 * v189);
      }
      v190 = 0;
      HIDWORD(v189) = 0;
LABEL_141:
      LODWORD(v7) = v177;
      v73 = (_QWORD *)*v176;
      if ((_QWORD *)*v176 != v176)
      {
        if (v73)
          a4 = (llvm::LoopInfo *)(v73 - 3);
        else
          a4 = 0;
        v74 = *((unsigned __int8 *)a4 + 16);
        v75 = v74 - 29;
        if (v74 != 30)
        {
          v22 = 2;
          switch(v75)
          {
            case 1:
              goto LABEL_293;
            case 2:
              LODWORD(v22) = (*((_DWORD *)a4 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_279;
            case 3:
            case 9:
              LODWORD(v22) = (*((_DWORD *)a4 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_279;
            case 4:
              goto LABEL_149;
            case 7:
              LODWORD(v22) = *((_WORD *)a4 + 9) & 1;
              goto LABEL_279;
            case 8:
              LODWORD(v22) = 1;
              goto LABEL_149;
            case 10:
              LODWORD(v22) = *((_DWORD *)a4 + 20) + 1;
LABEL_279:
              if (!(_DWORD)v22)
                goto LABEL_179;
              goto LABEL_149;
            default:
              goto LABEL_179;
          }
        }
        if ((*((_DWORD *)a4 + 5) & 0x7FFFFFF) == 3)
          LODWORD(v22) = 2;
        else
          LODWORD(v22) = 1;
LABEL_149:
        v76 = 0;
        v77 = v22;
        do
        {
          v78 = *((unsigned __int8 *)a4 + 16);
          if (v78 != 30)
            __asm { BR              X9 }
          v79 = *((_QWORD *)a4 - 4 * v76 - 4);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v187, v79);
          if (v80)
          {
            v81 = v79 | 4;
            v82 = v180;
            if (v180 >= v181)
            {
              v84 = __p;
              v85 = (v180 - (_BYTE *)__p) >> 4;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 60)
                goto LABEL_291;
              v87 = v181 - (_BYTE *)__p;
              if ((v181 - (_BYTE *)__p) >> 3 > v86)
                v86 = v87 >> 3;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
                v88 = 0xFFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
              {
                if (v88 >> 60)
                  goto LABEL_292;
                v89 = (char *)operator new(16 * v88);
              }
              else
              {
                v89 = 0;
              }
              v90 = (uint64_t *)&v89[16 * v85];
              *v90 = this;
              v90[1] = v81;
              v91 = (char *)v90;
              if (v82 == v84)
              {
                LODWORD(v7) = v177;
              }
              else
              {
                LODWORD(v7) = v177;
                do
                {
                  *((_OWORD *)v91 - 1) = *((_OWORD *)v82 - 1);
                  v91 -= 16;
                  v82 -= 2;
                }
                while (v82 != v84);
                v82 = __p;
              }
              v83 = (char *)(v90 + 2);
              __p = v91;
              v180 = (char *)(v90 + 2);
              v181 = &v89[16 * v88];
              if (v82)
                operator delete(v82);
            }
            else
            {
              *(_QWORD *)v180 = this;
              v82[1] = v81;
              v83 = (char *)(v82 + 2);
            }
            v180 = v83;
          }
          ++v76;
        }
        while (v76 != v77);
      }
LABEL_179:
      v92 = this | 4;
      v93 = v180;
      if (v180 >= v181)
      {
        v95 = __p;
        v96 = (v180 - (_BYTE *)__p) >> 4;
        v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 60)
LABEL_291:
          abort();
        v98 = v181 - (_BYTE *)__p;
        if ((v181 - (_BYTE *)__p) >> 3 > v97)
          v97 = v98 >> 3;
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0)
          v99 = 0xFFFFFFFFFFFFFFFLL;
        else
          v99 = v97;
        if (v99)
        {
          if (v99 >> 60)
LABEL_292:
            sub_1C4764EE4();
          v100 = (char *)operator new(16 * v99);
        }
        else
        {
          v100 = 0;
        }
        v101 = (llvm::BasicBlock **)&v100[16 * v96];
        *v101 = v178;
        v101[1] = (llvm::BasicBlock *)v92;
        v94 = (char *)(v101 + 2);
        if (v93 == v95)
        {
          a2 = v174;
        }
        else
        {
          a2 = v174;
          do
          {
            *((_OWORD *)v101 - 1) = *((_OWORD *)v93 - 1);
            v101 -= 2;
            v93 -= 2;
          }
          while (v93 != v95);
          v93 = __p;
        }
        __p = v101;
        v180 = v94;
        v181 = &v100[16 * v99];
        if (v93)
          operator delete(v93);
      }
      else
      {
        *(_QWORD *)v180 = v178;
        v93[1] = v92;
        v94 = (char *)(v93 + 2);
        a2 = v174;
      }
      v180 = v94;
      if (v183 != v182)
        free(v183);
      if ((void *)v188 != v187)
        free((void *)v188);
      v16 = v167;
      v43 = *(llvm::DomTreeUpdater **)v167;
LABEL_203:
      if (v43 == v16)
      {
        v102 = 0;
      }
      else
      {
        if (v43)
          v102 = (char *)v43 - 24;
        else
          v102 = 0;
        if (v102[16] - 29 >= 0xB)
          v102 = 0;
      }
      v103 = (_QWORD *)*v176;
      if ((_QWORD *)*v176 == v176)
      {
        v104 = 0;
      }
      else
      {
        if (v103)
          v104 = v103 - 3;
        else
          v104 = 0;
        if (*((unsigned __int8 *)v104 + 16) - 29 >= 0xB)
          v104 = 0;
      }
      v105 = *(uint64_t **)(this + 48);
      v106 = (llvm::Instruction *)(v105 - 3);
      if (!v105)
        v106 = 0;
      if (v106 == (llvm::Instruction *)v104)
        v107 = (llvm::Instruction *)v102;
      else
        v107 = v106;
      v108 = v104 + 3;
      if (v105 == v104 + 3 || v102 == (char *)v104)
      {
LABEL_236:
        v118 = v16;
        if (v172)
          llvm::MemorySSAUpdater::moveAllAfterMergeBlocks((int32x2_t **)v172, (llvm::BasicBlock **)this, v178, v107);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)this, v178, (llvm::Value *)1);
        if ((_DWORD)v7)
        {
          sub_1C5EB9F00(v176);
          sub_1C53E1B14(v171, v169, v170);
        }
        else
        {
          sub_1C5EB9F00(v118);
          sub_1C5EBBDF4(v118, v118, v176);
          if (v172)
          {
            v119 = *(int32x2_t **)v172;
            v120 = *(_QWORD **)v118;
            if (*(llvm::DomTreeUpdater **)v118 == v118)
            {
              v121 = 0;
            }
            else
            {
              if (v120)
                v121 = v120 - 3;
              else
                v121 = 0;
              if (*((unsigned __int8 *)v121 + 16) - 29 >= 0xB)
                v121 = 0;
            }
            v122 = v119[5].i32[0];
            if (v122)
            {
              v123 = v119[3];
              v124 = v122 - 1;
              v125 = ((v121 >> 4) ^ (v121 >> 9)) & (v122 - 1);
              v126 = *(_QWORD **)(*(_QWORD *)&v123 + 16 * v125);
              if (v121 == v126)
              {
LABEL_254:
                v129 = *(_QWORD *)(*(_QWORD *)&v123 + 16 * v125 + 8);
                if (v129)
                  sub_1C4EE2FE8((uint64_t)v172, v129, v178, 1);
              }
              else
              {
                v127 = 1;
                while (v126 != (_QWORD *)-4096)
                {
                  v128 = v125 + v127++;
                  v125 = v128 & v124;
                  v126 = *(_QWORD **)(*(_QWORD *)&v123 + 16 * v125);
                  if (v121 == v126)
                    goto LABEL_254;
                }
              }
            }
          }
        }
        v130 = (char *)operator new(0x40uLL);
        *(_QWORD *)v130 = ***(_QWORD ***)this + 1576;
        *((_QWORD *)v130 + 1) = 0;
        v130[16] = 35;
        *(_OWORD *)(v130 + 44) = 0u;
        *(_OWORD *)(v130 + 33) = 0u;
        *(_OWORD *)(v130 + 17) = 0u;
        *(_WORD *)(this + 18) &= ~0x8000u;
        v131 = *(_QWORD *)(this + 40);
        *((_QWORD *)v130 + 4) = v176;
        *((_QWORD *)v130 + 5) = this;
        *((_QWORD *)v130 + 3) = v131;
        v130 += 24;
        *(_QWORD *)(v131 + 8) = v130;
        *(_QWORD *)(this + 40) = v130;
        if ((*((_BYTE *)v178 + 23) & 0x10) == 0)
          llvm::Value::takeName(v178, (llvm::Value *)this);
        if (v173)
          llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(v173, this);
        if (v175)
        {
          sub_1C4ECACE0(v175 + 58);
          sub_1C4ECAD30(v175 + 64);
          sub_1C4926A50((uint64_t)(v175 + 70));
        }
        if (a2)
        {
          llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)__p, (v180 - (_BYTE *)__p) >> 4);
          v132 = &v187;
        }
        else
        {
          v132 = 0;
        }
        v182 = (llvm::BasicBlock *)this;
        v187 = &v189;
        v188 = 0x400000000;
        llvm::detachDeadBlocks(&v182, (llvm::Type *)1, (uint64_t)v132, 0);
        if (a2)
        {
          llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)v187, v188);
          llvm::DomTreeUpdater::deleteBB(a2, v182);
        }
        else
        {
          llvm::BasicBlock::eraseFromParent(v182);
        }
        if (v187 != &v189)
          free(v187);
        if (__p)
        {
          v180 = (char *)__p;
          operator delete(__p);
        }
        if (v192 != v194)
          free(v192);
        return 1;
      }
      *((_WORD *)v178 + 9) &= ~0x8000u;
      v109 = (llvm::ValueSymbolTable *)*((_QWORD *)v178 + 7);
      if (v109)
        v109 = (llvm::ValueSymbolTable *)*((_QWORD *)v109 + 13);
      v110 = (uint64_t *)(v102 + 24);
      v111 = *(_QWORD *)(this + 56);
      if (v111)
        v112 = *(llvm::ValueSymbolTable **)(v111 + 104);
      else
        v112 = 0;
      if (v109 == v112)
      {
        v113 = v105;
        do
        {
          v114 = v113 - 3;
          if (!v113)
            v114 = 0;
          v114[5] = (uint64_t)v178;
          v113 = (uint64_t *)v113[1];
        }
        while (v113 != v108);
LABEL_235:
        v115 = *v108;
        v116 = *v105;
        *(_QWORD *)(v116 + 8) = v108;
        *v108 = v116;
        v117 = *v110;
        *(_QWORD *)(v115 + 8) = v110;
        *v105 = v117;
        *(_QWORD *)(v117 + 8) = v105;
        *v110 = v115;
        a2 = v174;
        goto LABEL_236;
      }
      v159 = v109;
      v163 = v105;
      v168 = v16;
      v158 = v107;
      while (1)
      {
        v137 = (llvm::Value *)(v163 - 3);
        if (!v163)
          v137 = 0;
        v165 = v137;
        v161 = *((_DWORD *)v137 + 5) & 0x10000000;
        if (v112)
        {
          if (v161)
            break;
        }
LABEL_321:
        *((_QWORD *)v165 + 5) = v178;
        if (v159 && v161)
          llvm::ValueSymbolTable::reinsertValue(v159, v165);
        v163 = (uint64_t *)v163[1];
        LODWORD(v7) = v177;
        v16 = v168;
        v107 = v158;
        if (v163 == v108)
          goto LABEL_235;
      }
      v138 = ***(_QWORD ***)v137;
      v139 = *(_QWORD *)(v138 + 152);
      v140 = *(unsigned int *)(v138 + 168);
      if ((_DWORD)v140)
      {
        LODWORD(v141) = (v140 - 1) & ((v165 >> 4) ^ (v165 >> 9));
        v142 = (llvm::Value **)(v139 + 16 * v141);
        v143 = *v142;
        if (*v142 == v165)
          goto LABEL_308;
        v144 = 1;
        while (v143 != (llvm::Value *)-4096)
        {
          v145 = v141 + v144++;
          v141 = v145 & (v140 - 1);
          v143 = *(llvm::Value **)(v139 + 16 * v141);
          if (v143 == v165)
          {
            v142 = (llvm::Value **)(v139 + 16 * v141);
            goto LABEL_308;
          }
        }
      }
      v142 = (llvm::Value **)(v139 + 16 * v140);
LABEL_308:
      v146 = *((unsigned int *)v112 + 2);
      if ((_DWORD)v146)
      {
        v147 = (size_t *)v142[1];
        v160 = *((unsigned int *)v112 + 5);
        __s1 = (unsigned __int8 *)v147 + v160;
        __n = *v147;
        v148 = 0;
        if (*v147)
        {
          v149 = *v147;
          v150 = __s1;
          do
          {
            v151 = *v150++;
            v148 = 33 * v148 + v151;
            --v149;
          }
          while (v149);
        }
        v152 = v146 - 1;
        v153 = *(_QWORD *)v112;
        v164 = *(_QWORD *)v112 + 8 * v146 + 8;
        v154 = 1;
        v155 = v148;
        while (1)
        {
          v156 = v155 & v152;
          v157 = *(_QWORD **)(v153 + 8 * v156);
          if (v157 != (_QWORD *)-8)
          {
            if (!v157)
              goto LABEL_321;
            if (*(_DWORD *)(v164 + 4 * v156) == v148
              && __n == *v157
              && (!__n || !memcmp(__s1, (char *)v157 + v160, __n)))
            {
              break;
            }
          }
          v155 = v154 + v156;
          ++v154;
        }
        *(_QWORD *)(v153 + 8 * (int)v156) = -8;
        *(int32x2_t *)((char *)v112 + 12) = vadd_s32(*(int32x2_t *)((char *)v112 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
      goto LABEL_321;
    }
    return 0;
  }
  return result;
}

void sub_1C5EBBDF4(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  llvm::ValueSymbolTable *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  size_t *ValueName;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  llvm::ValueSymbolTable *v21;
  uint64_t *v22;

  if ((_QWORD *)*a3 != a3 && a2 != a3)
  {
    v3 = (_QWORD *)a3[1];
    *((_WORD *)a1 - 11) &= ~0x8000u;
    if (a1 != a3)
    {
      v4 = a1[2];
      if (v4)
        v5 = *(llvm::ValueSymbolTable **)(v4 + 104);
      else
        v5 = 0;
      v6 = a3[2];
      if (v6)
        v7 = *(uint64_t **)(v6 + 104);
      else
        v7 = 0;
      if (v5 == (llvm::ValueSymbolTable *)v7)
      {
        if (v3 != a3)
        {
          v8 = v3;
          do
          {
            v9 = v8 - 3;
            if (!v8)
              v9 = 0;
            v9[5] = a1 - 5;
            v8 = (_QWORD *)v8[1];
          }
          while (v8 != a3);
        }
      }
      else
      {
        v21 = v5;
        v22 = v7;
        if (v3 != a3)
        {
          v13 = v3;
          v19 = v3;
          v20 = a1 - 5;
          v17 = a3;
          v18 = a2;
          do
          {
            if (v13)
              v14 = v13 - 3;
            else
              v14 = 0;
            v15 = *((_DWORD *)v14 + 5) & 0x10000000;
            if (v22 && v15)
            {
              ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v14);
              llvm::ValueSymbolTable::removeValueName(v22, ValueName);
            }
            v14[5] = v20;
            if (v21 && v15)
              llvm::ValueSymbolTable::reinsertValue(v21, (llvm::Value *)v14);
            v13 = (_QWORD *)v13[1];
            a3 = v17;
            a2 = v18;
            v3 = v19;
          }
          while (v13 != v17);
        }
      }
    }
    if (v3 != a3)
    {
      v10 = (_QWORD *)*a3;
      v11 = *v3;
      *(_QWORD *)(v11 + 8) = a3;
      *a3 = v11;
      v12 = *a2;
      v10[1] = a2;
      *v3 = v12;
      *(_QWORD *)(v12 + 8) = v3;
      *a2 = v10;
    }
  }
}

BOOL llvm::RemoveRedundantDbgInstrs(llvm *this, llvm::BasicBlock *a2)
{
  uint64_t v3;
  char *v4;
  llvm *v5;
  llvm *v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  void **v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  llvm *v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  void *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  _BYTE *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  int v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59[2];
  unsigned int v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  _DWORD v65[38];
  char *v66;
  uint64_t v67;
  _BYTE v68[32];
  uint64_t v69;
  __int128 v70;
  _BYTE v71[16];
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v66 = v68;
  v67 = 0x800000000;
  v63 = (void *)1;
  v3 = 8;
  do
  {
    v4 = (char *)&v63 + v3;
    *(_QWORD *)v4 = 0;
    v4[8] = 0;
    v4[24] = 0;
    *((_QWORD *)v4 + 4) = 0;
    v3 += 40;
  }
  while (v4 + 40 != (char *)&v66);
  v5 = (llvm *)((char *)this + 40);
  v6 = (llvm *)*((_QWORD *)this + 5);
  if (v6 == (llvm *)((char *)this + 40))
    goto LABEL_42;
  do
  {
    if (v6)
      v7 = (uint64_t)v6 - 24;
    else
      v7 = 0;
    v8 = sub_1C50A0300(v7);
    if (!v8)
      v7 = 0;
    if (v6 && v8)
    {
      v9 = *(_QWORD *)(v7 + 48);
      if (*(_DWORD *)(v9 + 8) == 2)
        v10 = *(_QWORD *)(v9 - 8);
      else
        v10 = 0;
      v15 = v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
      v16 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 24);
      v17 = *(_QWORD *)(*(_QWORD *)(v15 + 64) + 24);
      *(_QWORD *)&v70 = v16;
      if (v17)
      {
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v17 + 24), *(uint64_t **)(v17 + 32), (int8x16_t *)((char *)&v70 + 8));
      }
      else
      {
        BYTE8(v70) = 0;
        v71[8] = 0;
      }
      v72 = v10;
      sub_1C5260430((uint64_t)&v63, (uint64_t)&v70, (uint64_t)&v54);
      if (!v56)
      {
        v18 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, (uint64_t)v68, v67 + 1, 8);
          v18 = v67;
        }
        *(_QWORD *)&v66[8 * v18] = v7;
        LODWORD(v67) = v67 + 1;
      }
    }
    else
    {
      if (v63 <= 1 && HIDWORD(v63) == 0)
        goto LABEL_32;
      if ((v63 & 1) != 0)
      {
        v13 = (void **)&v66;
        v12 = &v64;
        do
        {
LABEL_21:
          *v12 = 0;
          *((_BYTE *)v12 + 8) = 0;
          *(uint64_t *)((char *)v12 + 9) = v70;
          v12[2] = *(_QWORD *)((char *)&v70 + 7);
          *((_BYTE *)v12 + 24) = 0;
          *(_DWORD *)((char *)v12 + 25) = v54;
          *((_DWORD *)v12 + 7) = *(_DWORD *)((char *)&v54 + 3);
          v12[4] = 0;
          v12 += 5;
        }
        while (v12 != (uint64_t *)v13);
        v14 = v63 & 1;
        goto LABEL_23;
      }
      if (((2 * (_DWORD)v63) & 0xFFFFFFFC) >= v65[0])
      {
        if (v65[0])
        {
LABEL_20:
          v12 = (uint64_t *)v64;
          v13 = (void **)(v64 + 40 * v65[0]);
          goto LABEL_21;
        }
        v14 = 0;
LABEL_23:
        v63 = (void *)v14;
        goto LABEL_32;
      }
      if (v65[0] <= 0x40u)
        goto LABEL_20;
      sub_1C620EAA4((uint64_t)&v63);
    }
LABEL_32:
    v6 = *(llvm **)v6;
  }
  while (v6 != v5);
  if (!(_DWORD)v67)
  {
LABEL_42:
    v24 = 0;
    goto LABEL_43;
  }
  v19 = (uint64_t *)v66;
  v20 = 8 * v67;
  do
  {
    v21 = *v19++;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v21 + 40) + 40, (uint64_t ***)v21);
    v22 = *(_QWORD *)(v21 + 24);
    v23 = *(_QWORD **)(v21 + 32);
    *v23 = v22;
    *(_QWORD *)(v22 + 8) = v23;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v21);
    v20 -= 8;
  }
  while (v20);
  v24 = v67;
LABEL_43:
  if ((v63 & 1) == 0)
    MEMORY[0x1CAA32FB4](v64, 8);
  if (v66 != v68)
    free(v66);
  v63 = v65;
  v64 = 0x800000000;
  v59[0] = 0;
  v59[1] = 0;
  v60 = 0;
  v25 = (llvm *)*((_QWORD *)this + 6);
  if (v25 == v5)
  {
LABEL_96:
    v47 = 0;
    goto LABEL_97;
  }
  v53 = v24;
  while (2)
  {
    if (v25)
      v26 = (uint64_t)v25 - 24;
    else
      v26 = 0;
    v27 = sub_1C50A0300(v26);
    if (!v27)
      v26 = 0;
    if (v25 && v27)
    {
      v28 = *(_QWORD *)(v26 + 48);
      if (*(_DWORD *)(v28 + 8) == 2)
        v29 = *(_QWORD *)(v28 - 8);
      else
        v29 = 0;
      v54 = *(_QWORD *)(*(_QWORD *)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF) + 32) + 24);
      v55 = 0;
      v57 = 0;
      v58 = v29;
      v66 = 0;
      v30 = v59[0];
      v31 = v60;
      v32 = sub_1C5EC2054(v59[0], v60, &v54, (uint64_t *)&v66);
      v33 = v66;
      llvm::DbgVariableIntrinsic::location_ops(v26, &v66);
      *(_QWORD *)&v70 = v71;
      *((_QWORD *)&v70 + 1) = 0x400000000;
      v61 = v67;
      v62 = v66;
      sub_1C6364964((uint64_t)&v70, (unint64_t *)&v62, &v61);
      v34 = DWORD2(v70);
      if (v32
        && v33 != (void *)(v30 + 96 * v31)
        && *((_DWORD *)v33 + 12) == DWORD2(v70)
        && !memcmp(*((const void **)v33 + 5), (const void *)v70, 8 * DWORD2(v70))
        && *((_QWORD *)v33 + 11) == *(_QWORD *)(*(_QWORD *)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF) + 64) + 24))
      {
        v35 = v64;
        if (v64 >= (unint64_t)HIDWORD(v64))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 8);
          v35 = v64;
        }
        *((_QWORD *)v63 + v35) = v26;
        LODWORD(v64) = v64 + 1;
LABEL_69:
        if ((_BYTE *)v70 != v71)
          free((void *)v70);
        goto LABEL_56;
      }
      v36 = *(_QWORD *)(*(_QWORD *)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF) + 64) + 24);
      v66 = v68;
      v67 = 0x400000000;
      if (v34)
        sub_1C49EEBE4((uint64_t)&v66, (uint64_t)&v70);
      v69 = v36;
      v37 = sub_1C63A6390((uint64_t)v59, (uint64_t)&v54);
      v38 = (void **)(v37 + 40);
      v39 = v66;
      if ((char **)(v37 + 40) == &v66)
      {
LABEL_83:
        *(_QWORD *)(v37 + 88) = v69;
        if (v39 != v68)
          free(v39);
        goto LABEL_69;
      }
      if (v66 != v68)
      {
        if (*(_QWORD *)(v37 + 40) != v37 + 56)
        {
          free(*(void **)(v37 + 40));
          v39 = v66;
        }
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v67;
        v66 = v68;
        HIDWORD(v67) = 0;
        goto LABEL_82;
      }
      v40 = v67;
      v41 = *(unsigned int *)(v37 + 48);
      if (v41 >= v67)
      {
        if ((_DWORD)v67)
          memmove(*v38, v68, 8 * v67);
        goto LABEL_81;
      }
      if (*(_DWORD *)(v37 + 52) < v67)
      {
        *(_DWORD *)(v37 + 48) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v38, v37 + 56, v40, 8);
      }
      else if ((_DWORD)v41)
      {
        memmove(*v38, v68, 8 * v41);
LABEL_79:
        if (v41 != v67)
          memcpy((char *)*v38 + 8 * v41, &v66[8 * v41], 8 * v67 - 8 * v41);
LABEL_81:
        *(_DWORD *)(v37 + 48) = v40;
LABEL_82:
        LODWORD(v67) = 0;
        v39 = v66;
        goto LABEL_83;
      }
      v41 = 0;
      goto LABEL_79;
    }
LABEL_56:
    v25 = (llvm *)*((_QWORD *)v25 + 1);
    if (v25 != v5)
      continue;
    break;
  }
  v24 = v53;
  if (!(_DWORD)v64)
    goto LABEL_96;
  v42 = (uint64_t *)v63;
  v43 = 8 * v64;
  do
  {
    v44 = *v42++;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v44 + 40) + 40, (uint64_t ***)v44);
    v45 = *(_QWORD *)(v44 + 24);
    v46 = *(_QWORD **)(v44 + 32);
    *v46 = v45;
    *(_QWORD *)(v45 + 8) = v46;
    *(_QWORD *)(v44 + 24) = 0;
    *(_QWORD *)(v44 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v44);
    v43 -= 8;
  }
  while (v43);
  v47 = v64;
LABEL_97:
  v48 = v59[0];
  if (v60)
  {
    v49 = v59[0] + 56;
    v50 = 96 * v60;
    do
    {
      if (*(_QWORD *)(v49 - 56) || *(_BYTE *)(v49 - 32) && *(_OWORD *)(v49 - 48) != 0 || *(_QWORD *)(v49 - 24))
      {
        v51 = *(void **)(v49 - 16);
        if ((void *)v49 != v51)
          free(v51);
      }
      v49 += 96;
      v50 -= 96;
    }
    while (v50);
  }
  MEMORY[0x1CAA32FB4](v48, 8);
  if (v63 != v65)
    free(v63);
  return (v47 | v24) != 0;
}

void llvm::ReplaceInstWithValue(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  llvm::ValueAsMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (*(_QWORD *)a2)
    v6 = (llvm::ValueAsMetadata *)(*(_QWORD *)a2 - 24);
  else
    v6 = 0;
  llvm::Value::doRAUW(v6, a3, (llvm::Value *)1);
  if ((*((_BYTE *)v6 + 23) & 0x10) != 0 && (*((_BYTE *)a3 + 23) & 0x10) == 0)
    llvm::Value::takeName(a3, v6);
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (*(_QWORD *)a2)
    v8 = *(_QWORD *)a2 - 24;
  else
    v8 = 0;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(a1, (uint64_t ***)v8);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD **)(v8 + 32);
  *v10 = v9;
  *(_QWORD *)(v9 + 8) = v10;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v8);
  *(_QWORD *)a2 = v7;
}

void llvm::ReplaceInstWithInst(uint64_t a1, uint64_t **a2, llvm::Value *a3)
{
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;
  unsigned __int8 *v14;

  v6 = (unsigned __int8 **)((char *)a3 + 48);
  if (!*((_QWORD *)a3 + 6))
  {
    if (*a2)
      v7 = (uint64_t)(*a2 - 3);
    else
      v7 = 0;
    v8 = *(unsigned __int8 **)(v7 + 48);
    v14 = v8;
    if (v8)
      llvm::MetadataTracking::track((uint64_t)&v14, v8, 2);
    if (&v14 == v6)
    {
      if (v14)
        llvm::MetadataTracking::untrack((uint64_t)&v14, v14);
    }
    else
    {
      if (*v6)
        llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
      v9 = v14;
      *v6 = v14;
      if (v9)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v14, v9, (uint64_t)v6);
        v14 = 0;
      }
    }
  }
  v10 = *a2;
  *((_QWORD *)a3 + 5) = a1 - 40;
  *(_WORD *)(a1 - 22) &= ~0x8000u;
  if ((*((_BYTE *)a3 + 23) & 0x10) != 0)
  {
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13)
        llvm::ValueSymbolTable::reinsertValue(v13, a3);
    }
  }
  v11 = *v10;
  *((_QWORD *)a3 + 4) = v10;
  *((_QWORD *)a3 + 3) = v11;
  *(_QWORD *)(v11 + 8) = (char *)a3 + 24;
  *v10 = (uint64_t)a3 + 24;
  llvm::ReplaceInstWithValue(a1, (uint64_t)a2, a3);
  *a2 = (uint64_t *)((char *)a3 + 24);
}

uint64_t llvm::IsBlockFollowedByDeoptOrUnreachable(llvm *this, const llvm::BasicBlock *a2)
{
  uint64_t UniqueSuccessor;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[64];

  UniqueSuccessor = (uint64_t)this;
  v15 = v19;
  v16 = v19;
  v17 = 8;
  v18 = 0;
  if (this)
  {
    v3 = -1;
    while (++v3 < dword_1ED837210)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v15, UniqueSuccessor);
      if (!v4)
        break;
      v5 = *(_QWORD *)(UniqueSuccessor + 40);
      if (v5 != UniqueSuccessor + 40)
      {
        v6 = v5 - 24;
        if (!v5)
          v6 = 0;
        v7 = *(unsigned __int8 *)(v6 + 16);
        if (v7 != 29)
          v6 = 0;
        if (v5 && v7 == 29)
        {
          v9 = *(_QWORD *)(UniqueSuccessor + 48);
          v10 = v9 ? v9 - 24 : 0;
          if (v6 != v10)
          {
            v11 = (uint64_t *)(v6 + 24);
            if (*(_QWORD *)(*(_QWORD *)(v6 + 40) + 48) != v6 + 24)
            {
              v12 = *v11;
              if (*v11)
              {
                if (*(_BYTE *)(v12 - 8) == 84)
                {
                  v13 = *(_QWORD *)(v12 - 56);
                  if (v13)
                  {
                    if (!*(_BYTE *)(v13 + 16)
                      && *(_QWORD *)(v13 + 24) == *(_QWORD *)(v12 + 48)
                      && *(_DWORD *)(v13 + 36) == 119)
                    {
                      goto LABEL_31;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v5)
        v8 = v5 - 24;
      else
        v8 = 0;
      if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
        v8 = 0;
      if (*(_BYTE *)(v8 + 16) == 35)
      {
LABEL_31:
        UniqueSuccessor = 1;
        goto LABEL_33;
      }
      UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor((llvm::BasicBlock *)UniqueSuccessor);
      if (!UniqueSuccessor)
        goto LABEL_33;
    }
    UniqueSuccessor = 0;
LABEL_33:
    if (v16 != v15)
      free(v16);
  }
  return UniqueSuccessor;
}

uint64_t llvm::ehAwareSplitEdge(llvm *a1, uint64_t a2, llvm::Instruction *a3, llvm::BasicBlock *a4, uint64_t a5, llvm::MemorySSAUpdater *a6, const llvm::Twine *a7)
{
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  llvm::BasicBlock *v28;
  _QWORD **v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  llvm *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  BOOL v44;
  uint64_t v45;
  llvm::PHINode *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int32x2_t **v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  llvm **v59;
  llvm *v60;
  int v61;
  int v62;
  llvm *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  llvm *v68;
  llvm *v69;
  llvm *v70;
  int v71;
  llvm::Type ***v72;
  llvm::Type **v73;
  _DWORD *v74;
  llvm::Value *v75;
  uint64_t v76;
  llvm::CleanupReturnInst *v77;
  llvm::CleanupReturnInst *v78;
  uint64_t v79;
  llvm::ValueSymbolTable *v80;
  unsigned int v81;
  llvm *v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  llvm *v87;
  int v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  BOOL v92;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  llvm *v100;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  llvm *v108;
  void *v109;
  uint64_t v110;
  unint64_t v111[6];
  void *v112[2];
  _QWORD v113[36];
  char v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  int v118;
  _BYTE v119[64];
  _QWORD v120[3];
  __int16 v121;
  uint64_t *v122;
  uint64_t v123;
  _QWORD v124[6];

  v124[4] = *MEMORY[0x1E0C80C00];
  v108 = a1;
  for (i = *(_QWORD *)(a2 + 48); i != a2 + 40; i = *(_QWORD *)(i + 8))
  {
    v12 = i - 24;
    if (i)
      v13 = i - 24;
    else
      v13 = 0;
    if (*(_BYTE *)(v13 + 16) != 83)
      goto LABEL_9;
  }
  v12 = 0;
LABEL_9:
  if (!a4)
  {
    v14 = *(unsigned __int8 *)(v12 + 16) - 38;
    v44 = v14 > 0x38;
    v15 = (1 << v14) & 0x100060000000001;
    if (v44 || v15 == 0)
      return llvm::SplitEdge(a1, (llvm::BasicBlock *)a2, *(llvm::BasicBlock **)a5, *(llvm::DominatorTree **)(a5 + 16), *(llvm::LoopInfo **)(a5 + 24), a6, a7);
  }
  v17 = *(_QWORD *)(a5 + 16);
  v122 = v124;
  v123 = 0x400000000;
  if (*(_BYTE *)(a5 + 36))
    v19 = v17 == 0;
  else
    v19 = 1;
  if (v19)
    goto LABEL_19;
  v32 = *(_DWORD *)(v17 + 16);
  if (!v32)
    goto LABEL_19;
  v33 = *(_QWORD *)v17;
  v34 = v32 - 1;
  v35 = (v32 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v36 = *(llvm **)(*(_QWORD *)v17 + 16 * v35);
  if (v36 != a1)
  {
    v37 = 1;
    while (v36 != (llvm *)-4096)
    {
      v38 = v35 + v37++;
      v35 = v38 & v34;
      v36 = *(llvm **)(v33 + 16 * v35);
      if (v36 == a1)
        goto LABEL_36;
    }
    goto LABEL_19;
  }
LABEL_36:
  v39 = *(_QWORD *)(v33 + 16 * v35 + 8);
  if (!v39)
    goto LABEL_19;
  v40 = *(_QWORD *)(a2 + 8);
  if (!v40)
    goto LABEL_19;
  while (1)
  {
    v41 = *(_QWORD *)(v40 + 24);
    v42 = *(unsigned __int8 *)(v41 + 16);
    v43 = v41 && v42 >= 0x1C;
    v44 = !v43 || v42 - 29 > 0xA;
    if (!v44)
      break;
    v40 = *(_QWORD *)(v40 + 8);
    if (!v40)
      goto LABEL_19;
  }
  v81 = 0;
LABEL_92:
  v82 = *(llvm **)(v41 + 40);
  if (v82 == a1)
    goto LABEL_104;
  v83 = *(_DWORD *)(v17 + 16);
  if (v83)
  {
    v84 = *(_QWORD *)v17;
    v85 = v83 - 1;
    v86 = (v83 - 1) & ((v82 >> 4) ^ (v82 >> 9));
    v87 = *(llvm **)(*(_QWORD *)v17 + 16 * v86);
    if (v82 == v87)
    {
LABEL_98:
      v90 = *(_QWORD *)(v84 + 16 * v86 + 8);
      goto LABEL_100;
    }
    v88 = 1;
    while (v87 != (llvm *)-4096)
    {
      v89 = v86 + v88++;
      v86 = v89 & v85;
      v87 = *(llvm **)(v84 + 16 * v86);
      if (v82 == v87)
        goto LABEL_98;
    }
  }
  v90 = 0;
LABEL_100:
  if (v90 == v39)
  {
    if (v81 >= HIDWORD(v123))
    {
      v106 = v39;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, (uint64_t)v124, v81 + 1, 8);
      v39 = v106;
      v81 = v123;
    }
    v122[v81] = (uint64_t)v82;
    v81 = v123 + 1;
    LODWORD(v123) = v123 + 1;
LABEL_104:
    while (1)
    {
      v40 = *(_QWORD *)(v40 + 8);
      if (!v40)
        break;
      v41 = *(_QWORD *)(v40 + 24);
      v91 = *(unsigned __int8 *)(v41 + 16);
      if (v41)
        v92 = v91 >= 0x1C;
      else
        v92 = 0;
      if (v92 && v91 - 29 < 0xB)
        goto LABEL_92;
    }
    if (v81)
    {
      v94 = (char *)v122;
      v95 = 8 * v81;
      while (1)
      {
        v96 = *(_QWORD *)(*(_QWORD *)v94 + 40);
        if (v96)
          v97 = v96 - 24;
        else
          v97 = 0;
        if (*(unsigned __int8 *)(v97 + 16) - 29 >= 0xB)
          v97 = 0;
        if (*(_BYTE *)(v97 + 16) == 32)
          break;
        v94 += 8;
        v95 -= 8;
        if (!v95)
          goto LABEL_19;
      }
      v22 = 0;
      goto LABEL_147;
    }
  }
  else
  {
    LODWORD(v123) = 0;
  }
LABEL_19:
  v20 = **(_QWORD ***)a1;
  v21 = (_QWORD *)*((_QWORD *)a1 + 7);
  v22 = operator new();
  *(_QWORD *)v22 = *v20 + 1600;
  *(_QWORD *)(v22 + 8) = 0;
  v23 = *(_DWORD *)(v22 + 20) & 0xC0000000;
  *(_QWORD *)(v22 + 24) = 0;
  v24 = v22 + 24;
  *(_DWORD *)(v22 + 16) = 22;
  *(_DWORD *)(v22 + 20) = v23;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = v22 + 40;
  *(_QWORD *)(v22 + 48) = v22 + 40;
  *(_QWORD *)(v22 + 56) = 0;
  if (v21)
  {
    v25 = (uint64_t)(v21 + 9);
    if (a2)
      v26 = (unint64_t *)(a2 + 24);
    else
      v26 = v21 + 9;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v25, (_QWORD *)v22);
    v27 = *v26;
    *(_QWORD *)(v22 + 24) = *v26;
    *(_QWORD *)(v22 + 32) = v26;
    *(_QWORD *)(v27 + 8) = v24;
    *v26 = v24;
  }
  llvm::Value::setName((uint64_t ***)v22, (uint64_t)a6);
  v29 = (_QWORD **)*((_QWORD *)a1 + 5);
  if (v29 == (_QWORD **)((char *)a1 + 40))
  {
    v31 = 0;
  }
  else
  {
    if (v29)
      v30 = (uint64_t)(v29 - 3);
    else
      v30 = 0;
    if (*(unsigned __int8 *)(v30 + 16) - 29 >= 0xB)
      v31 = 0;
    else
      v31 = v30;
  }
  v45 = a5;
  llvm::setUnwindEdgeTo(v31, (llvm::Instruction *)v22, v28);
  llvm::updatePhiNodes(a2, a1, (llvm::BasicBlock *)v22, a4, v46);
  if (!a4)
  {
    v71 = *(unsigned __int8 *)(v12 + 16);
    if ((v71 - 81) < 0xFFFFFFFE || !v12)
    {
      if (v71 == 38 && v12)
      {
        v98 = *(_DWORD *)(v12 + 20);
        if ((v98 & 0x40000000) != 0)
          v72 = *(llvm::Type ****)(v12 - 8);
        else
          v72 = (llvm::Type ***)(v12 - 32 * (v98 & 0x7FFFFFF));
LABEL_83:
        v73 = *v72;
        v74 = operator new(0x60uLL);
        v74[13] = v74[13] & 0x38000000 | 1;
        v75 = (llvm::Value *)(v74 + 8);
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v74 + 1) = 0;
        *((_QWORD *)v74 + 2) = 0;
        *((_QWORD *)v74 + 3) = v74 + 8;
        llvm::FuncletPadInst::FuncletPadInst((llvm::Instruction *)(v74 + 8), 51, v73, 0, 0, 1u, (uint64_t)a6, (llvm::BasicBlock *)v22);
        if (a2)
          v76 = 2;
        else
          v76 = 1;
        v77 = (llvm::CleanupReturnInst *)operator new(32 * v76 + 64);
        v78 = (llvm::CleanupReturnInst *)((char *)v77 + 32 * v76);
        *((_DWORD *)v78 + 5) = *((_DWORD *)v78 + 5) & 0x38000000 | v76;
        do
        {
          *(_QWORD *)v77 = 0;
          *((_QWORD *)v77 + 1) = 0;
          *((_QWORD *)v77 + 2) = 0;
          *((_QWORD *)v77 + 3) = v78;
          v77 = (llvm::CleanupReturnInst *)((char *)v77 + 32);
        }
        while (v77 != v78);
        llvm::CleanupReturnInst::CleanupReturnInst(v78, v75, (llvm::BasicBlock *)a2, v76, (llvm::BasicBlock *)v22);
        goto LABEL_52;
      }
      if (v71 != 79 || !v12)
      {
        if (v71 == 94)
          v99 = v12;
        else
          v99 = 0;
        v72 = (llvm::Type ***)(v99 + 40);
        goto LABEL_83;
      }
    }
    v72 = (llvm::Type ***)(v12 - 32);
    goto LABEL_83;
  }
  llvm::Instruction::clone(a3);
  v48 = v47;
  v49 = (char *)operator new(0x60uLL);
  *((_DWORD *)v49 + 13) = *((_DWORD *)v49 + 13) & 0x38000000 | 1;
  *(_QWORD *)v49 = 0;
  *((_QWORD *)v49 + 1) = 0;
  *((_QWORD *)v49 + 2) = 0;
  *((_QWORD *)v49 + 3) = v49 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v49 + 32), (llvm::BasicBlock *)a2, (llvm::BasicBlock *)v22);
  v50 = *((_QWORD *)v49 + 9);
  *(_QWORD *)(v48 + 40) = v50;
  *(_WORD *)(v50 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v48 + 23) & 0x10) != 0)
  {
    v79 = *(_QWORD *)(v50 + 56);
    if (v79)
    {
      v80 = *(llvm::ValueSymbolTable **)(v79 + 104);
      if (v80)
        llvm::ValueSymbolTable::reinsertValue(v80, (llvm::Value *)v48);
    }
  }
  v52 = *((_QWORD *)v49 + 7);
  v51 = v49 + 56;
  *(_QWORD *)(v48 + 32) = v51;
  *(_QWORD *)(v48 + 24) = v52;
  *(_QWORD *)(v52 + 8) = v48 + 24;
  *v51 = v48 + 24;
  sub_1C477667C(a4, v48, v22);
LABEL_52:
  v53 = *(_QWORD *)v45;
  if (*(_QWORD *)v45 | v17)
  {
    v54 = *(int32x2_t ***)(v45 + 24);
    if (!v53)
      goto LABEL_61;
    v112[0] = v113;
    v112[1] = (void *)0x1000000000;
    v113[32] = 0;
    v113[33] = 0;
    v113[34] = v53;
    v113[35] = 0;
    v114 = 1;
    v115 = v119;
    v116 = v119;
    v117 = 8;
    v118 = 0;
    memset(v120, 0, sizeof(v120));
    v121 = 0;
    v109 = v111;
    v111[0] = (unint64_t)a1;
    v111[1] = v22 & 0xFFFFFFFFFFFFFFFBLL;
    v111[2] = v22;
    v111[3] = a2 & 0xFFFFFFFFFFFFFFFBLL;
    v111[4] = (unint64_t)a1;
    v111[5] = a2 | 4;
    v110 = 0x300000003;
    llvm::DomTreeUpdater::applyUpdates((uint64_t)v112, v111, 3);
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v112);
    if (v54)
      llvm::MemorySSAUpdater::applyUpdates(v54, (unint64_t *)v109, v110, v53, 0);
    if (v109 != v111)
      free(v109);
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v112);
    v109 = v120;
    sub_1C50B10F0((void ***)&v109);
    if (v116 != v115)
      free(v116);
    if (v112[0] != v113)
    {
      free(v112[0]);
      if (v17)
      {
LABEL_62:
        v55 = *(_DWORD *)(v17 + 16);
        if (v55)
        {
          v56 = *(_QWORD *)v17;
          v57 = v55 - 1;
          LODWORD(v58) = v57 & ((a1 >> 4) ^ (a1 >> 9));
          v59 = (llvm **)(*(_QWORD *)v17 + 16 * v58);
          v60 = *v59;
          if (*v59 == a1)
          {
            v63 = v59[1];
            if (v63)
            {
LABEL_70:
              v64 = v57 & ((a2 >> 4) ^ (a2 >> 9));
              v65 = *(_QWORD *)(v56 + 16 * v64);
              if (v65 == a2)
              {
LABEL_74:
                v68 = *(llvm **)(v56 + 16 * v64 + 8);
                if (v68)
                {
                  v69 = v63;
                  if (v63 == v68)
                    goto LABEL_143;
                  v70 = v68;
                  while (v70)
                  {
                    v70 = *(llvm **)v70;
                    if (v70 == v63)
                    {
                      v69 = v63;
                      goto LABEL_143;
                    }
                  }
                  v100 = v63;
                  while (v100)
                  {
                    v100 = *(llvm **)v100;
                    if (v100 == v68)
                    {
                      v69 = v68;
                      goto LABEL_143;
                    }
                  }
                  v69 = *(llvm **)v68;
                  if (*(_QWORD *)v68)
LABEL_143:
                    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v69, v22, v17);
                }
              }
              else
              {
                v66 = 1;
                while (v65 != -4096)
                {
                  v67 = v64 + v66++;
                  v64 = v67 & v57;
                  v65 = *(_QWORD *)(v56 + 16 * v64);
                  if (v65 == a2)
                    goto LABEL_74;
                }
              }
              v102 = sub_1C477672C((uint64_t)v63 + 56, a2);
              v103 = *((_QWORD *)v63 + 8);
              v104 = 72;
              if (v103 == *((_QWORD *)v63 + 7))
                v104 = 76;
              if (v102 == (_QWORD *)(v103 + 8 * *(unsigned int *)((char *)v63 + v104)))
              {
                if (*(_BYTE *)(v45 + 34))
                  llvm::createPHIsForSplitLoopExit((uint64_t)&v108, 1, v22, a2);
                if ((_DWORD)v123)
                {
                  v105 = sub_1C5EBE3AC((uint64_t **)a2, v122, v123, "split", 0, v53, v17, (llvm::MemorySSAUpdater *)v54, *(_BYTE *)(v45 + 34));
                  if (*(_BYTE *)(v45 + 34))
                    llvm::createPHIsForSplitLoopExit((uint64_t)v122, v123, v105, a2);
                }
              }
            }
          }
          else
          {
            v61 = 1;
            while (v60 != (llvm *)-4096)
            {
              v62 = v58 + v61++;
              v58 = v62 & v57;
              v60 = *(llvm **)(v56 + 16 * v58);
              if (v60 == a1)
              {
                v63 = *(llvm **)(v56 + 16 * v58 + 8);
                if (v63)
                  goto LABEL_70;
                break;
              }
            }
          }
        }
      }
    }
    else
    {
LABEL_61:
      if (v17)
        goto LABEL_62;
    }
  }
LABEL_147:
  if (v122 != v124)
    free(v122);
  return v22;
}

uint64_t llvm::SplitBlock(llvm *this, llvm::BasicBlock *a2, llvm::Instruction *a3, llvm::DominatorTree *a4, int32x2_t **a5, llvm::MemorySSAUpdater *a6, const llvm::Twine *a7)
{
  return sub_1C5EBD70C(this, a2, 0, (uint64_t)a3, a4, a5, a6, (int)a7);
}

uint64_t llvm::setUnwindEdgeTo(uint64_t this, llvm::Instruction *a2, llvm::BasicBlock *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(unsigned __int8 *)(this + 16);
  if (this && v3 == 33)
  {
    v4 = (_QWORD *)(this - 64);
    if (*(_QWORD *)(this - 64))
    {
      **(_QWORD **)(this - 48) = *(_QWORD *)(this - 56);
      v5 = *(_QWORD *)(this - 56);
      if (v5)
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(this - 48);
    }
    *v4 = a2;
    if (a2)
    {
      v8 = *((_QWORD *)a2 + 1);
      v6 = (_QWORD *)((char *)a2 + 8);
      v7 = v8;
      *(_QWORD *)(this - 56) = v8;
      if (v8)
        *(_QWORD *)(v7 + 16) = this - 56;
      *(_QWORD *)(this - 48) = v6;
      *v6 = v4;
    }
  }
  else if (this && v3 == 38)
  {
    v9 = *(_DWORD *)(this + 20);
    if ((v9 & 0x40000000) != 0)
      v10 = *(_QWORD *)(this - 8);
    else
      v10 = this - 32 * (v9 & 0x7FFFFFF);
    v11 = (_QWORD *)(v10 + 32);
    if (*(_QWORD *)(v10 + 32))
    {
      **(_QWORD **)(v10 + 48) = *(_QWORD *)(v10 + 40);
      v12 = *(_QWORD *)(v10 + 40);
      if (v12)
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 48);
    }
    *v11 = a2;
    if (a2)
    {
      v15 = *((_QWORD *)a2 + 1);
      v13 = (_QWORD *)((char *)a2 + 8);
      v14 = v15;
      *(_QWORD *)(v10 + 40) = v15;
      if (v15)
        *(_QWORD *)(v14 + 16) = v10 + 40;
      *(_QWORD *)(v10 + 48) = v13;
      *v13 = v11;
    }
  }
  else
  {
    if (v3 != 36)
      this = 0;
    return sub_1C622AB8C(this, (uint64_t)a2);
  }
  return this;
}

uint64_t llvm::updatePhiNodes(uint64_t this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, llvm::PHINode *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)(this + 40) != this + 40)
  {
    v5 = *(_QWORD *)(this + 48);
    v6 = v5 - 24;
    v7 = v5 ? v5 - 24 : 0;
    if (v5 && *(_BYTE *)(v7 + 16) == 83)
    {
      v8 = 0;
      while (1)
      {
        if ((llvm::BasicBlock *)v6 == a4)
          return this;
        v9 = *(_DWORD *)(v6 + 20);
        if ((v9 & 0x40000000) != 0)
          v10 = *(_QWORD *)(v6 - 8);
        else
          v10 = v6 - 32 * (v9 & 0x7FFFFFF);
        v11 = *(unsigned int *)(v6 + 60);
        if (*(llvm::BasicBlock **)(v10 + 32 * v11 + 8 * v8) == a2)
          goto LABEL_20;
        v12 = v9 & 0x7FFFFFF;
        if ((v9 & 0x7FFFFFF) == 0)
          break;
        v13 = 0;
        while (1)
        {
          v14 = v6 - 32 * v12;
          if ((v9 & 0x40000000) != 0)
            v14 = *(_QWORD *)(v6 - 8);
          if (*(llvm::BasicBlock **)(v14 + 32 * v11 + 8 * v13) == a2)
            break;
          if (v12 == ++v13)
            goto LABEL_19;
        }
        v8 = v13;
        if ((v9 & 0x40000000) != 0)
        {
LABEL_23:
          v15 = *(_QWORD *)(v6 - 8);
          goto LABEL_24;
        }
LABEL_21:
        v15 = v6 - 32 * (v9 & 0x7FFFFFF);
LABEL_24:
        *(_QWORD *)(v15 + 32 * v11 + 8 * v8) = a3;
        v16 = *(_QWORD *)(v6 + 32);
        v6 = v16 - 24;
        if (v16)
          v17 = v16 - 24;
        else
          v17 = 0;
        if (!v16 || *(_BYTE *)(v17 + 16) != 83)
          return this;
      }
LABEL_19:
      v8 = 0xFFFFFFFFLL;
LABEL_20:
      if ((v9 & 0x40000000) != 0)
        goto LABEL_23;
      goto LABEL_21;
    }
  }
  return this;
}

uint64_t llvm::createPHIsForSplitLoopExit(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  llvm::Value *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::ValueSymbolTable *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  const char *v44;
  __int16 v45;

  v43 = (uint64_t *)result;
  if (*(_QWORD *)(a4 + 40) != a4 + 40)
  {
    v4 = *(_QWORD *)(a4 + 48);
    v5 = v4 - 24;
    v6 = v4 ? v4 - 24 : 0;
    if (v4 && *(_BYTE *)(v6 + 16) == 83)
    {
      v9 = (uint64_t *)(a3 + 48);
      v41 = 8 * a2;
      v42 = (_QWORD *)(a3 + 40);
      do
      {
        v10 = *(_DWORD *)(v5 + 20);
        v11 = v10 & 0x7FFFFFF;
        if ((v10 & 0x7FFFFFF) != 0)
        {
          v12 = 0;
          while (1)
          {
            v13 = v5 - 32 * v11;
            if ((v10 & 0x40000000) != 0)
              v13 = *(_QWORD *)(v5 - 8);
            if (*(_QWORD *)(v13 + 32 * *(unsigned int *)(v5 + 60) + 8 * v12) == a3)
              break;
            if (v11 == ++v12)
              goto LABEL_14;
          }
          if ((v10 & 0x40000000) == 0)
          {
LABEL_15:
            v14 = v5 - 32 * v11;
            goto LABEL_18;
          }
        }
        else
        {
LABEL_14:
          LODWORD(v12) = -1;
          if ((v10 & 0x40000000) == 0)
            goto LABEL_15;
        }
        v14 = *(_QWORD *)(v5 - 8);
LABEL_18:
        v15 = *(_QWORD *)(v14 + 32 * v12);
        if (!v15 || *(_BYTE *)(v15 + 16) != 83 || *(_QWORD *)(v15 + 40) != a3)
        {
          v18 = *(_QWORD *)v5;
          v44 = "split";
          v19 = v9;
          v45 = 259;
          do
          {
            v20 = *v19;
            v21 = v20 - 24;
            if (!v20)
              v21 = 0;
            v22 = *(unsigned __int8 *)(v21 + 16);
            v19 = (uint64_t *)(v20 + 8);
          }
          while (v22 == 83);
          if (v22 == 94)
          {
            if (*v9)
              v23 = *v9 - 24;
            else
              v23 = 0;
          }
          else
          {
            v24 = (_QWORD *)*v42;
            if ((_QWORD *)*v42 == v42)
            {
              v23 = 0;
            }
            else
            {
              v25 = (uint64_t)(v24 - 3);
              if (v24)
                v26 = v24 - 3;
              else
                v26 = 0;
              if (*((unsigned __int8 *)v26 + 16) - 29 >= 0xB)
                v23 = 0;
              else
                v23 = v25;
            }
          }
          v27 = operator new(0x48uLL);
          v28 = v27;
          v27[1] = v18;
          v29 = (llvm::Value *)(v27 + 1);
          *v27 = 0;
          v27[2] = 0;
          v27[3] = 0x4000000000000053;
          *((_OWORD *)v27 + 2) = 0u;
          v30 = (char *)(v27 + 4);
          *((_OWORD *)v27 + 3) = 0u;
          *((_DWORD *)v27 + 16) = 0;
          if (v23)
          {
            v37 = *(_QWORD *)(v23 + 40);
            v27[6] = v37;
            *(_WORD *)(v37 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v27 + 31) & 0x10) != 0)
            {
              v39 = *(_QWORD *)(v37 + 56);
              if (v39)
              {
                v40 = *(llvm::ValueSymbolTable **)(v39 + 104);
                if (v40)
                  llvm::ValueSymbolTable::reinsertValue(v40, v29);
              }
            }
            v38 = *(_QWORD *)(v23 + 24);
            v28[4] = v38;
            v28[5] = v23 + 24;
            *(_QWORD *)(v38 + 8) = v30;
            *(_QWORD *)(v23 + 24) = v30;
          }
          *((_DWORD *)v28 + 17) = a2;
          llvm::Value::setName((uint64_t ***)v29, (uint64_t)&v44);
          v31 = *((unsigned int *)v28 + 17);
          v32 = operator new(40 * v31);
          *v28 = v32;
          if ((_DWORD)v31)
          {
            v33 = &v32[4 * v31];
            do
            {
              *v32 = 0;
              v32[1] = 0;
              v32[2] = 0;
              v32[3] = v29;
              v32 += 4;
            }
            while (v32 != v33);
          }
          if (a2)
          {
            v34 = v41;
            v35 = v43;
            do
            {
              v36 = *v35++;
              sub_1C477667C(v29, v15, v36);
              v34 -= 8;
            }
            while (v34);
          }
          result = sub_1C6125834(v5, v12, (uint64_t)v29);
        }
        v16 = *(_QWORD *)(v5 + 32);
        v5 = v16 - 24;
        if (v16)
          v17 = v16 - 24;
        else
          v17 = 0;
      }
      while (v16 && *(_BYTE *)(v17 + 16) == 83);
    }
  }
  return result;
}

uint64_t llvm::SplitBlockPredecessors(uint64_t **a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, llvm::MemorySSAUpdater *a7, char a8)
{
  return sub_1C5EBE3AC(a1, a2, a3, a4, 0, a5, a6, a7, a8);
}

uint64_t sub_1C5EBD70C(llvm *a1, llvm::BasicBlock *a2, llvm::Instruction *a3, uint64_t a4, llvm::DomTreeUpdater *a5, int32x2_t **a6, llvm::Twine *this, int a8)
{
  _QWORD *v8;
  int32x2_t **v9;
  uint64_t v12;
  void **v14;
  uint64_t v15;
  uint64_t *i;
  uint64_t *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  void **v22;
  void *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm **v30;
  llvm *v31;
  int v32;
  int v33;
  llvm *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  llvm *v41;
  int v42;
  int v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  llvm **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm **v67;
  llvm *v68;
  int v69;
  int v70;
  llvm *v71;
  uint64_t v72;
  const void *v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v86;
  llvm::Instruction *v87;
  int32x2_t **v88;
  void **v89;
  void **v90;
  uint64_t v91;
  int v92;
  _BYTE v93[64];
  void *__p[2];
  char v95;
  void *v96;
  uint64_t v97;
  _QWORD v98[2];
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  int v109;
  _BYTE v110[64];
  _QWORD v111[3];
  __int16 v112;
  uint64_t v113;

  v9 = a6;
  v12 = (uint64_t)a3;
  v113 = *MEMORY[0x1E0C80C00];
  if (a8)
  {
    v14 = &v96;
    v96 = v98;
    v97 = 0x1000000000;
    v101 = 0;
    v102 = 0;
    v103 = a4;
    v104 = 0;
    v105 = 1;
    v106 = v110;
    v107 = v110;
    v108 = 8;
    v109 = 0;
    if (!a4)
      v14 = 0;
    if (!a3)
      a3 = (llvm::Instruction *)v14;
    memset(v111, 0, sizeof(v111));
    v112 = 0;
    v15 = llvm::splitBlockBefore(a1, a2, a3, a5, a6, this, this);
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v96);
    v89 = (void **)v111;
    sub_1C50B10F0(&v89);
    if (v107 != v106)
      free(v107);
    if (v96 != v98)
      free(v96);
    return v15;
  }
  for (i = (uint64_t *)((char *)a2 + 24); ; i = (uint64_t *)i[1])
  {
    v17 = i - 3;
    if (!i)
      v17 = 0;
    v18 = *((unsigned __int8 *)v17 + 16) - 38;
    v19 = v18 > 0x38;
    v20 = (1 << v18) & 0x100260000000001;
    if (v19 || v20 == 0)
      break;
  }
  v22 = __p;
  llvm::Twine::str(this, __p);
  v23 = (void *)(v95 & 0x7F);
  if (v95 < 0)
    v23 = __p[1];
  if (!v23)
  {
    if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    {
      v35 = 0;
      v22 = (void **)&byte_1C871356D;
      goto LABEL_31;
    }
    v26 = ***(_QWORD ***)a1;
    v27 = *(_QWORD *)(v26 + 152);
    v28 = *(unsigned int *)(v26 + 168);
    if ((_DWORD)v28)
    {
      LODWORD(v29) = (v28 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v30 = (llvm **)(v27 + 16 * v29);
      v31 = *v30;
      if (*v30 == a1)
      {
LABEL_30:
        v34 = v30[1];
        v36 = *(_QWORD *)v34;
        v22 = (void **)((char *)v34 + 16);
        v35 = v36;
LABEL_31:
        v97 = v35;
        v98[0] = ".split";
        v24 = 3;
        v25 = 5;
        goto LABEL_32;
      }
      v32 = 1;
      while (v31 != (llvm *)-4096)
      {
        v33 = v29 + v32++;
        v29 = v33 & (v28 - 1);
        v31 = *(llvm **)(v27 + 16 * v29);
        if (v31 == a1)
        {
          v30 = (llvm **)(v27 + 16 * v29);
          goto LABEL_30;
        }
      }
    }
    v30 = (llvm **)(v27 + 16 * v28);
    goto LABEL_30;
  }
  v24 = 1;
  v25 = 4;
LABEL_32:
  v99 = v25;
  v100 = v24;
  v96 = v22;
  v15 = llvm::BasicBlock::splitBasicBlock((uint64_t *)a1, i, (uint64_t)&v96, 0);
  if (a5)
  {
    v37 = *((_DWORD *)a5 + 4);
    if (v37)
    {
      v38 = *(_QWORD *)a5;
      v39 = v37 - 1;
      v40 = (v37 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v41 = *(llvm **)(*(_QWORD *)a5 + 16 * v40);
      if (v41 == a1)
      {
LABEL_38:
        v44 = *(_QWORD **)(v38 + 16 * v40 + 8);
        if (v44)
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v44, v15, (uint64_t)a5);
      }
      else
      {
        v42 = 1;
        while (v41 != (llvm *)-4096)
        {
          v43 = v40 + v42++;
          v40 = v43 & v39;
          v41 = *(llvm **)(v38 + 16 * v40);
          if (v41 == a1)
            goto LABEL_38;
        }
      }
    }
  }
  if (v12)
  {
    v88 = v9;
    v96 = v98;
    v89 = (void **)v93;
    v90 = (void **)v93;
    v91 = 8;
    v92 = 0;
    v98[0] = a1;
    v98[1] = v15 & 0xFFFFFFFFFFFFFFFBLL;
    v97 = 0x800000001;
    v46 = (_QWORD *)(v15 + 40);
    v45 = *(_QWORD **)(v15 + 40);
    if (v45 != (_QWORD *)(v15 + 40))
    {
      v47 = v45 - 3;
      if (!v45)
        v47 = 0;
      if (*((_BYTE *)v47 + 16) == 30)
      {
        if ((*((_DWORD *)v47 + 5) & 0x7FFFFFF) == 3)
          v48 = 2;
        else
          v48 = 1;
LABEL_48:
        v49 = (2 * v48) | 1u;
        if (v49 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, (uint64_t)v98, v49, 16);
          v45 = (_QWORD *)*v46;
        }
LABEL_50:
        if (v45 != v46)
        {
          if (v45)
            v8 = v45 - 3;
          else
            v8 = 0;
          v50 = *((unsigned __int8 *)v8 + 16);
          v51 = v50 - 29;
          if (v50 == 30)
          {
            if ((*((_DWORD *)v8 + 5) & 0x7FFFFFF) == 3)
              v52 = 2;
            else
              v52 = 1;
LABEL_58:
            v53 = 0;
            v54 = 0;
            v55 = v8 - 8;
            v56 = v52;
            do
            {
              v57 = *((unsigned __int8 *)v8 + 16);
              if (v57 != 30)
                __asm { BR              X9 }
              v58 = v8[-4 * v54 - 4];
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v89, v58);
              if (v59)
              {
                v60 = v97;
                if (v97 >= (unint64_t)HIDWORD(v97))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, (uint64_t)v98, v97 + 1, 16);
                  v60 = v97;
                }
                v61 = (uint64_t *)((char *)v96 + 16 * v60);
                *v61 = v15;
                v61[1] = v58 & 0xFFFFFFFFFFFFFFFBLL;
                v62 = (v97 + 1);
                LODWORD(v97) = v62;
                if (v62 >= HIDWORD(v97))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, (uint64_t)v98, v62 + 1, 16);
                  LODWORD(v62) = v97;
                }
                v63 = (llvm **)((char *)v96 + 16 * v62);
                *v63 = a1;
                v63[1] = (llvm *)(v58 | 4);
                LODWORD(v97) = v97 + 1;
              }
              ++v54;
              v53 += 2;
              v55 += 4;
            }
            while (v56 != v54);
          }
          else
          {
            v52 = 2;
            switch(v51)
            {
              case 1:
                goto LABEL_114;
              case 2:
                v52 = (*((_DWORD *)v8 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_111;
              case 3:
              case 9:
                goto LABEL_115;
              case 4:
                goto LABEL_58;
              case 7:
                v52 = *((_WORD *)v8 + 9) & 1;
                goto LABEL_111;
              case 8:
                v52 = 1;
                goto LABEL_58;
              case 10:
                v52 = *((_DWORD *)v8 + 20) + 1;
                goto LABEL_111;
              default:
                break;
            }
          }
        }
      }
      else
      {
        switch(*((_BYTE *)v47 + 16))
        {
          case 0x1E:
LABEL_114:
            __break(1u);
LABEL_115:
            v52 = (*((_DWORD *)v8 + 5) & 0x7FFFFFF) - 1;
LABEL_111:
            if (v52)
              goto LABEL_58;
            break;
          case 0x1F:
            v48 = (*((_DWORD *)v47 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_48;
          case 0x20:
          case 0x26:
            v48 = (*((_DWORD *)v47 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_48;
          case 0x24:
            v48 = *((_WORD *)v47 + 9) & 1;
            goto LABEL_48;
          case 0x27:
            v48 = *((_DWORD *)v47 + 20) + 1;
            goto LABEL_48;
          default:
            goto LABEL_50;
        }
      }
    }
    llvm::DomTreeUpdater::applyUpdates(v12, (unint64_t *)v96, v97);
    if (v90 != v89)
      free(v90);
    v9 = v88;
    if (v96 != v98)
      free(v96);
    goto LABEL_100;
  }
  if (a4)
  {
    v64 = *(_QWORD *)(a4 + 24);
    v65 = *(unsigned int *)(a4 + 40);
    if ((_DWORD)v65)
    {
      LODWORD(v66) = (v65 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v67 = (llvm **)(v64 + 16 * v66);
      v68 = *v67;
      if (*v67 == a1)
      {
LABEL_77:
        if (v67 != (llvm **)(v64 + 16 * v65))
        {
          v71 = v67[1];
          if (v71)
          {
            v72 = *((unsigned int *)v71 + 8);
            if ((_DWORD)v72)
            {
              v73 = (const void *)*((_QWORD *)v71 + 3);
              v74 = (char *)operator new(8 * v72);
              memmove(v74, v73, 8 * v72);
              v75 = (uint64_t *)&v74[8 * v72];
              v76 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(a4, v15, (uint64_t)a1);
              v77 = (uint64_t *)v74;
              do
              {
                v78 = *v77;
                *(_BYTE *)(a4 + 64) = 0;
                v79 = *(_QWORD *)(v78 + 8);
                if (v79 != v76)
                {
                  v80 = *(_QWORD **)(v79 + 24);
                  v81 = *(unsigned int *)(v79 + 32);
                  v82 = &v80[v81];
                  if ((_DWORD)v81)
                  {
                    v83 = 8 * v81;
                    while (*v80 != v78)
                    {
                      ++v80;
                      v83 -= 8;
                      if (!v83)
                      {
                        v80 = v82;
                        break;
                      }
                    }
                  }
                  if (v82 != v80 + 1)
                  {
                    memmove(v80, v80 + 1, (char *)v82 - (char *)(v80 + 1));
                    LODWORD(v81) = *(_DWORD *)(v79 + 32);
                  }
                  *(_DWORD *)(v79 + 32) = v81 - 1;
                  *(_QWORD *)(v78 + 8) = v76;
                  v84 = *(unsigned int *)(v76 + 32);
                  if (v84 >= *(unsigned int *)(v76 + 36))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v76 + 24, v76 + 40, v84 + 1, 8);
                    v84 = *(unsigned int *)(v76 + 32);
                  }
                  *(_QWORD *)(*(_QWORD *)(v76 + 24) + 8 * v84) = v78;
                  ++*(_DWORD *)(v76 + 32);
                  llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v78);
                }
                ++v77;
              }
              while (v77 != v75);
              operator delete(v74);
            }
            else
            {
              llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(a4, v15, (uint64_t)a1);
            }
          }
        }
        goto LABEL_100;
      }
      v69 = 1;
      while (v68 != (llvm *)-4096)
      {
        v70 = v66 + v69++;
        v66 = v70 & (v65 - 1);
        v68 = *(llvm **)(v64 + 16 * v66);
        if (v68 == a1)
        {
          v67 = (llvm **)(v64 + 16 * v66);
          goto LABEL_77;
        }
      }
    }
    v67 = (llvm **)(v64 + 16 * v65);
    goto LABEL_77;
  }
LABEL_100:
  if (v9)
  {
    v86 = *(_QWORD *)(v15 + 48);
    if (v86)
      v87 = (llvm::Instruction *)(v86 - 24);
    else
      v87 = 0;
    llvm::MemorySSAUpdater::moveAllAfterSpliceBlocks(v9, a1, (llvm::BasicBlock **)v15, v87);
  }
  if (v95 < 0)
    operator delete(__p[0]);
  return v15;
}

uint64_t llvm::SplitBlock(llvm *this, llvm::BasicBlock *a2, llvm::Instruction *a3, llvm::DomTreeUpdater *a4, int32x2_t **a5, llvm::MemorySSAUpdater *a6, const llvm::Twine *a7)
{
  return sub_1C5EBD70C(this, a2, a3, 0, a4, a5, a6, (int)a7);
}

uint64_t llvm::splitBlockBefore(llvm *this, llvm::BasicBlock *a2, llvm::Instruction *a3, llvm::DomTreeUpdater *a4, int32x2_t **a5, llvm::MemorySSAUpdater *a6, const llvm::Twine *a7)
{
  uint64_t *i;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  void **v16;
  void *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm *v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  llvm *v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  unint64_t *v56;
  uint64_t v57;
  uint64_t DomTree;
  unint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  unsigned int v67;
  BOOL v68;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  int v73;
  _BYTE v74[64];
  void *__p[2];
  char v76;
  void *v77;
  uint64_t v78;
  _QWORD v79[2];
  char v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  for (i = (uint64_t *)((char *)a2 + 24); ; i = (uint64_t *)i[1])
  {
    v12 = i - 3;
    if (!i)
      v12 = 0;
    v13 = *((unsigned __int8 *)v12 + 16) - 38;
    v45 = v13 > 0x38;
    v14 = (1 << v13) & 0x100260000000001;
    if (v45 || v14 == 0)
      break;
  }
  v16 = __p;
  llvm::Twine::str(a6, __p);
  v17 = (void *)(v76 & 0x7F);
  if (v76 < 0)
    v17 = __p[1];
  if (!v17)
  {
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
    {
      v29 = 0;
      v16 = (void **)&byte_1C871356D;
      goto LABEL_22;
    }
    v20 = ***(_QWORD ***)this;
    v21 = *(_QWORD *)(v20 + 152);
    v22 = *(unsigned int *)(v20 + 168);
    if ((_DWORD)v22)
    {
      LODWORD(v23) = (v22 - 1) & ((this >> 4) ^ (this >> 9));
      v24 = v21 + 16 * v23;
      v25 = *(llvm **)v24;
      if (*(llvm **)v24 == this)
      {
LABEL_21:
        v28 = *(_QWORD **)(v24 + 8);
        v30 = *v28;
        v16 = (void **)(v28 + 2);
        v29 = v30;
LABEL_22:
        v78 = v29;
        v79[0] = ".split";
        v18 = 3;
        v19 = 5;
        goto LABEL_23;
      }
      v26 = 1;
      while (v25 != (llvm *)-4096)
      {
        v27 = v23 + v26++;
        v23 = v27 & (v22 - 1);
        v25 = *(llvm **)(v21 + 16 * v23);
        if (v25 == this)
        {
          v24 = v21 + 16 * v23;
          goto LABEL_21;
        }
      }
    }
    v24 = v21 + 16 * v22;
    goto LABEL_21;
  }
  v18 = 1;
  v19 = 4;
LABEL_23:
  v80 = v19;
  v81 = v18;
  v77 = v16;
  v31 = llvm::BasicBlock::splitBasicBlock((uint64_t *)this, i, (uint64_t)&v77, 1);
  if (a4)
  {
    v32 = *((_DWORD *)a4 + 4);
    if (v32)
    {
      v33 = *(_QWORD *)a4;
      v34 = v32 - 1;
      v35 = (v32 - 1) & ((this >> 4) ^ (this >> 9));
      v36 = *(llvm **)(*(_QWORD *)a4 + 16 * v35);
      if (v36 == this)
      {
LABEL_29:
        v39 = *(_QWORD **)(v33 + 16 * v35 + 8);
        if (v39)
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v39, v31, (uint64_t)a4);
      }
      else
      {
        v37 = 1;
        while (v36 != (llvm *)-4096)
        {
          v38 = v35 + v37++;
          v35 = v38 & v34;
          v36 = *(llvm **)(v33 + 16 * v35);
          if (v36 == this)
            goto LABEL_29;
        }
      }
    }
  }
  if (a3)
  {
    v77 = v79;
    v70 = v74;
    v71 = v74;
    v72 = 8;
    v73 = 0;
    v79[0] = v31;
    v79[1] = (unint64_t)this & 0xFFFFFFFFFFFFFFFBLL;
    v78 = 0x800000001;
    v40 = *(_QWORD *)(v31 + 8);
    if (v40)
    {
      v41 = *(_QWORD *)(v31 + 8);
      while (1)
      {
        v42 = *(_QWORD *)(v41 + 24);
        v43 = *(unsigned __int8 *)(v42 + 16);
        v44 = v42 && v43 >= 0x1C;
        v45 = !v44 || v43 - 29 > 0xA;
        if (!v45)
          break;
        v41 = *(_QWORD *)(v41 + 8);
        if (!v41)
          goto LABEL_56;
      }
      v46 = 0;
LABEL_44:
      ++v46;
      while (1)
      {
        v41 = *(_QWORD *)(v41 + 8);
        if (!v41)
          break;
        v47 = *(_QWORD *)(v41 + 24);
        v48 = *(unsigned __int8 *)(v47 + 16);
        if (v47)
          v49 = v48 >= 0x1C;
        else
          v49 = 0;
        if (v49 && v48 - 29 < 0xB)
          goto LABEL_44;
      }
      v51 = (2 * v46) | 1u;
      if (v51 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v51, 16);
        v40 = *(_QWORD *)(v31 + 8);
      }
LABEL_56:
      if (v40)
      {
        while (1)
        {
          v52 = *(_QWORD *)(v40 + 24);
          v53 = *(unsigned __int8 *)(v52 + 16);
          v54 = v52 && v53 >= 0x1C;
          if (v54 && v53 - 29 < 0xB)
            break;
          v40 = *(_QWORD *)(v40 + 8);
          if (!v40)
            goto LABEL_66;
        }
        v60 = (unint64_t)this | 4;
LABEL_75:
        v61 = *(_QWORD *)(v52 + 40);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v70, v61);
        if (v62)
        {
          v63 = v78;
          if (v78 >= (unint64_t)HIDWORD(v78))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v78 + 1, 16);
            v63 = v78;
          }
          v64 = (uint64_t *)((char *)v77 + 16 * v63);
          *v64 = v61;
          v64[1] = v31 & 0xFFFFFFFFFFFFFFFBLL;
          v65 = (v78 + 1);
          LODWORD(v78) = v65;
          if (v65 >= HIDWORD(v78))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v65 + 1, 16);
            LODWORD(v65) = v78;
          }
          v66 = (uint64_t *)((char *)v77 + 16 * v65);
          *v66 = v61;
          v66[1] = v60;
          LODWORD(v78) = v78 + 1;
        }
        while (1)
        {
          v40 = *(_QWORD *)(v40 + 8);
          if (!v40)
            break;
          v52 = *(_QWORD *)(v40 + 24);
          v67 = *(unsigned __int8 *)(v52 + 16);
          if (v52)
            v68 = v67 >= 0x1C;
          else
            v68 = 0;
          if (v68 && v67 - 29 < 0xB)
            goto LABEL_75;
        }
      }
    }
LABEL_66:
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a3, (unint64_t *)v77, v78);
    if (a5)
    {
      v56 = (unint64_t *)v77;
      v57 = v78;
      DomTree = llvm::DomTreeUpdater::getDomTree(a3);
      llvm::MemorySSAUpdater::applyUpdates(a5, v56, v57, DomTree, 0);
    }
    if (v71 != v70)
      free(v71);
    if (v77 != v79)
      free(v77);
  }
  if (v76 < 0)
    operator delete(__p[0]);
  return v31;
}

uint64_t sub_1C5EBE3AC(uint64_t **a1, uint64_t *a2, uint64_t a3, char *__s, llvm::DomTreeUpdater *a5, uint64_t a6, uint64_t a7, llvm::MemorySSAUpdater *a8, char a9)
{
  llvm::DomTreeUpdater *v10;
  uint64_t *v13;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  size_t v26;
  std::string::size_type v27;
  std::string *p_dst;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ***v34;
  uint64_t **v35;
  int v36;
  int v37;
  uint64_t v38;
  llvm::DomTreeUpdater *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  std::string *v45;
  std::string::size_type v46;
  void **v47;
  _QWORD *v48;
  uint64_t **v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t v64;
  int v65;
  uint64_t **v66;
  int v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 **v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t LoopLatch;
  llvm::Loop *v75;
  int v76;
  int v77;
  unsigned __int8 *v78;
  unsigned __int8 **v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  llvm::User *v86;
  uint64_t v87;
  llvm::PHINode *v88;
  uint64_t v89;
  llvm::UndefValue *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  std::string __dst;
  void *__p[2];
  uint64_t v123;
  void *v124;
  uint64_t v125;
  _QWORD v126[2];
  __int16 v127;
  uint64_t v128;

  v10 = a5;
  v13 = a2;
  v15 = a9;
  v128 = *MEMORY[0x1E0C80C00];
  v16 = (uint64_t *)(a1 + 6);
  v17 = (uint64_t *)(a1 + 6);
  do
  {
    v18 = *v17;
    v19 = v18 - 24;
    if (!v18)
      v19 = 0;
    v20 = *(unsigned __int8 *)(v19 + 16);
    v17 = (uint64_t *)(v18 + 8);
  }
  while (v20 == 83);
  if ((v20 - 38) <= 0x2A && ((1 << (v20 - 38)) & 0x60000000001) != 0)
    return 0;
  v22 = (uint64_t *)(a1 + 6);
  do
  {
    v23 = *v22;
    v24 = v23 - 24;
    if (!v23)
      v24 = 0;
    v25 = *(unsigned __int8 *)(v24 + 16);
    v22 = (uint64_t *)(v23 + 8);
  }
  while (v25 == 83);
  if (v25 == 94)
  {
    v124 = v126;
    v125 = 0x200000000;
    v26 = strlen(__s);
    if (v26 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v27 = v26;
    if (v26 >= 0x17)
    {
      v38 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v38 = v26 | 7;
      v39 = v10;
      v40 = a3;
      v41 = a7;
      v42 = v13;
      v43 = v38 + 1;
      p_dst = (std::string *)operator new(v38 + 1);
      v44 = v43 | 0x8000000000000000;
      v13 = v42;
      a7 = v41;
      a3 = v40;
      v10 = v39;
      v15 = a9;
      __dst.__r_.__value_.__l.__size_ = v27;
      __dst.__r_.__value_.__r.__words[2] = v44;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26;
      p_dst = &__dst;
      if (!v26)
        goto LABEL_30;
    }
    memcpy(p_dst, __s, v27);
LABEL_30:
    p_dst->__r_.__value_.__s.__data_[v27] = 0;
    v45 = std::string::append(&__dst, ".split-lp");
    v46 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v123 = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v123 >= 0)
      v47 = __p;
    else
      v47 = (void **)__p[0];
    sub_1C5EBEB94(a1, v13, a3, __s, v47, (uint64_t)&v124, v10, a6, a7, a8, v15);
    v48 = v124;
    v114 = *(_QWORD *)v124;
    if (SHIBYTE(v123) < 0)
    {
      operator delete(__p[0]);
      v48 = v124;
    }
    if (v48 != v126)
      free(v48);
    return v114;
  }
  v29 = **a1;
  v30 = a1 >> 4;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v51 = 0;
    v50 = &byte_1C871356D;
    goto LABEL_41;
  }
  v31 = *(_QWORD *)(*(_QWORD *)v29 + 152);
  v32 = *(unsigned int *)(*(_QWORD *)v29 + 168);
  if (!(_DWORD)v32)
    goto LABEL_39;
  LODWORD(v33) = (v32 - 1) & (v30 ^ (a1 >> 9));
  v34 = (uint64_t ***)(v31 + 16 * v33);
  v35 = *v34;
  if (*v34 != a1)
  {
    v36 = 1;
    while (v35 != (uint64_t **)-4096)
    {
      v37 = v33 + v36++;
      v33 = v37 & (v32 - 1);
      v35 = *(uint64_t ***)(v31 + 16 * v33);
      if (v35 == a1)
      {
        v34 = (uint64_t ***)(v31 + 16 * v33);
        goto LABEL_40;
      }
    }
LABEL_39:
    v34 = (uint64_t ***)(v31 + 16 * v32);
  }
LABEL_40:
  v49 = v34[1];
  v52 = (uint64_t)*v49;
  v50 = (char *)(v49 + 2);
  v51 = v52;
LABEL_41:
  v127 = 773;
  v124 = v50;
  v125 = v51;
  v126[0] = __s;
  v53 = a1[7];
  v114 = operator new();
  *(_QWORD *)v114 = *(_QWORD *)v29 + 1600;
  *(_QWORD *)(v114 + 8) = 0;
  v54 = *(_DWORD *)(v114 + 20) & 0xC0000000;
  *(_QWORD *)(v114 + 24) = 0;
  v55 = (uint64_t *)(v114 + 24);
  *(_DWORD *)(v114 + 16) = 22;
  *(_DWORD *)(v114 + 20) = v54;
  *(_QWORD *)(v114 + 32) = 0;
  *(_QWORD *)(v114 + 40) = v114 + 40;
  *(_QWORD *)(v114 + 48) = v114 + 40;
  *(_QWORD *)(v114 + 56) = 0;
  if (v53)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v53 + 9), (_QWORD *)v114);
    v56 = a1[3];
    *(_QWORD *)(v114 + 24) = v56;
    *(_QWORD *)(v114 + 32) = a1 + 3;
    v56[1] = (uint64_t)v55;
    a1[3] = v55;
  }
  llvm::Value::setName((uint64_t ***)v114, (uint64_t)&v124);
  v57 = (char *)operator new(0x60uLL);
  *((_DWORD *)v57 + 13) = *((_DWORD *)v57 + 13) & 0x38000000 | 1;
  v58 = (uint64_t)(v57 + 32);
  *(_QWORD *)v57 = 0;
  *((_QWORD *)v57 + 1) = 0;
  *((_QWORD *)v57 + 2) = 0;
  *((_QWORD *)v57 + 3) = v57 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v57 + 32), (llvm::BasicBlock *)a1, (llvm::BasicBlock *)v114);
  if (!a7)
    goto LABEL_51;
  v59 = *(_DWORD *)(a7 + 16);
  if (!v59)
    goto LABEL_51;
  v60 = *(_QWORD *)a7;
  v61 = v59 - 1;
  v62 = (v59 - 1) & (v30 ^ (a1 >> 9));
  v63 = *(uint64_t ***)(*(_QWORD *)a7 + 16 * v62);
  v64 = v62;
  if (v63 != a1)
  {
    v65 = 1;
    v66 = *(uint64_t ***)(*(_QWORD *)a7 + 16 * (v61 & (v30 ^ (a1 >> 9))));
    LODWORD(v64) = v61 & (v30 ^ (a1 >> 9));
    while (v66 != (uint64_t **)-4096)
    {
      v67 = v64 + v65++;
      v64 = v67 & v61;
      v66 = *(uint64_t ***)(v60 + 16 * v64);
      if (v66 == a1)
        goto LABEL_49;
    }
    goto LABEL_51;
  }
LABEL_49:
  v68 = *(_QWORD *)(v60 + 16 * v64 + 8);
  if (!v68 || **(uint64_t ****)(v68 + 32) != a1)
  {
LABEL_51:
    v69 = (unsigned __int8 *)*((_QWORD *)llvm::BasicBlock::getFirstNonPHIOrDbg((llvm::BasicBlock *)a1, 1) + 6);
    v119 = v69;
    if (v69)
      llvm::MetadataTracking::track((uint64_t)&v119, v69, 2);
    v72 = (unsigned __int8 *)*((_QWORD *)v57 + 10);
    v71 = (unsigned __int8 **)(v57 + 80);
    v70 = v72;
    if (v72)
      llvm::MetadataTracking::untrack((uint64_t)v71, v70);
    v73 = v119;
    *v71 = v119;
    if (v73)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v119, v73, (uint64_t)v71);
      LoopLatch = 0;
      v75 = 0;
      v119 = 0;
    }
    else
    {
      LoopLatch = 0;
      v75 = 0;
    }
    goto LABEL_69;
  }
  if (v63 == a1)
  {
LABEL_62:
    v75 = *(llvm::Loop **)(v60 + 16 * v62 + 8);
  }
  else
  {
    v76 = 1;
    while (v63 != (uint64_t **)-4096)
    {
      v77 = v62 + v76++;
      v62 = v77 & v61;
      v63 = *(uint64_t ***)(v60 + 16 * v62);
      if (v63 == a1)
        goto LABEL_62;
    }
    v75 = 0;
  }
  llvm::Loop::getStartLoc(v75, &v120);
  v80 = (unsigned __int8 *)*((_QWORD *)v57 + 10);
  v79 = (unsigned __int8 **)(v57 + 80);
  v78 = v80;
  if (v80)
    llvm::MetadataTracking::untrack((uint64_t)v79, v78);
  v81 = v120;
  *v79 = v120;
  if (v81)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v120, v81, (uint64_t)v79);
    v120 = 0;
  }
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v75);
LABEL_69:
  v82 = a3;
  if ((_DWORD)a3)
  {
    v83 = a2;
    do
    {
      v84 = *(_QWORD *)(*v83 + 40);
      if (v84 == *v83 + 40)
      {
        v86 = 0;
      }
      else
      {
        if (v84)
          v85 = (unsigned __int8 *)(v84 - 24);
        else
          v85 = 0;
        if (v85[16] - 29 >= 0xB)
          v86 = 0;
        else
          v86 = (llvm::User *)v85;
      }
      llvm::User::replaceUsesOfWith(v86, (llvm::Value *)a1, (llvm::Value *)v114);
      ++v83;
      --v82;
    }
    while (v82);
  }
  if (a3)
  {
    LOBYTE(v124) = 0;
    sub_1C5EC23D8((uint64_t)a1, v114, a2, a3, a5, a6, a7, a8, a9, &v124);
    sub_1C5EC29A0((uint64_t)a1, v114, a2, a3, v58, (char)v124);
    if (!LoopLatch)
      return v114;
  }
  else
  {
    v87 = *v16;
    v88 = (llvm::PHINode *)(*v16 - 24);
    if (*v16)
      v89 = *v16 - 24;
    else
      v89 = 0;
    if (*(_BYTE *)(v89 + 16) == 83)
    {
      do
      {
        v90 = llvm::UndefValue::get(*(llvm::UndefValue **)(v87 - 24), (llvm::Type *)v73);
        sub_1C477667C(v88, (uint64_t)v90, v114);
        v87 = *(_QWORD *)(v87 + 8);
        v88 = (llvm::PHINode *)(v87 - 24);
        if (v87)
          v91 = v87 - 24;
        else
          v91 = 0;
      }
      while (*(_BYTE *)(v91 + 16) == 83);
    }
    LOBYTE(v124) = 0;
    sub_1C5EC23D8((uint64_t)a1, v114, a2, 0, a5, a6, a7, a8, a9, &v124);
    if (!LoopLatch)
      return v114;
  }
  v92 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v75);
  if (v92 != LoopLatch)
  {
    v93 = v92;
    v95 = (_QWORD *)(LoopLatch + 40);
    v94 = *(_QWORD *)(LoopLatch + 40);
    if (v94 == LoopLatch + 40)
    {
      v97 = 0;
    }
    else
    {
      v96 = v94 ? v94 - 24 : 0;
      v97 = *(unsigned __int8 *)(v96 + 16) - 29 >= 0xB ? 0 : v96;
    }
    v98 = *(_QWORD *)(v97 + 48) || (*(_BYTE *)(v97 + 23) & 0x20) != 0
        ? (unsigned __int8 *)llvm::Instruction::getMetadataImpl((uint64_t ***)v97, "llvm.loop", 9uLL)
        : 0;
    v99 = *(_QWORD *)(v93 + 40);
    if (v99 == v93 + 40)
    {
      v101 = 0;
    }
    else
    {
      v100 = v99 ? v99 - 24 : 0;
      v101 = *(unsigned __int8 *)(v100 + 16) - 29 >= 0xB ? 0 : v100;
    }
    llvm::Instruction::setMetadata(v101, "llvm.loop", 9uLL, v98);
    v102 = *(_DWORD *)(a7 + 16);
    if (v102)
    {
      v103 = *(_QWORD *)a7;
      v104 = v102 - 1;
      v105 = (v102 - 1) & ((LoopLatch >> 4) ^ (LoopLatch >> 9));
      v106 = *(_QWORD *)(*(_QWORD *)a7 + 16 * v105);
      if (LoopLatch == v106)
      {
LABEL_118:
        v109 = *(_QWORD *)(v103 + 16 * v105 + 8);
        if (v109 && llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v109) != LoopLatch)
        {
          v110 = (_QWORD *)*v95;
          if ((_QWORD *)*v95 == v95)
          {
            v112 = 0;
          }
          else
          {
            if (v110)
              v111 = (uint64_t)(v110 - 3);
            else
              v111 = 0;
            if (*(unsigned __int8 *)(v111 + 16) - 29 >= 0xB)
              v112 = 0;
            else
              v112 = v111;
          }
          llvm::Instruction::setMetadata(v112, "llvm.loop", 9uLL, 0);
        }
      }
      else
      {
        v107 = 1;
        while (v106 != -4096)
        {
          v108 = v105 + v107++;
          v105 = v108 & v104;
          v106 = *(_QWORD *)(v103 + 16 * v105);
          if (LoopLatch == v106)
            goto LABEL_118;
        }
      }
    }
  }
  return v114;
}

void sub_1C5EBEB94(uint64_t **a1, uint64_t *a2, uint64_t a3, _BYTE *a4, _BYTE *a5, uint64_t a6, llvm::DomTreeUpdater *a7, uint64_t a8, uint64_t a9, llvm::MemorySSAUpdater *a10, char a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ***v19;
  uint64_t **v20;
  int v21;
  int v22;
  uint64_t **v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *i;
  uint64_t *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 **v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  llvm::User *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ***v64;
  uint64_t **v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t **k;
  llvm::Instruction *v70;
  uint64_t **v71;
  uint64_t **v72;
  char *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *j;
  uint64_t *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 **v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  llvm::User *v94;
  uint64_t v95;
  llvm::Instruction *v96;
  uint64_t ***v97;
  uint64_t v98;
  __int16 v99;
  uint64_t *m;
  uint64_t *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v105;
  llvm::ValueAsMetadata *v106;
  uint64_t ***v107;
  uint64_t v108;
  __int16 v109;
  llvm::Value *v110;
  uint64_t *v111;
  uint64_t *n;
  uint64_t *v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  llvm::PHINode *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  llvm::ValueSymbolTable *v129;
  uint64_t v130;
  llvm::ValueSymbolTable *v131;
  unsigned int v132;
  unsigned __int8 *v137;
  _QWORD v138[2];
  _BYTE *v139;
  __int16 v140;
  char v141;
  unsigned __int8 *v142;
  void *v143;
  uint64_t v144;
  _QWORD v145[2];
  __int16 v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v15 = **a1;
  v132 = a1 >> 4;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v25 = 0;
    v24 = &byte_1C871356D;
    goto LABEL_10;
  }
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 152);
  v17 = *(unsigned int *)(*(_QWORD *)v15 + 168);
  if (!(_DWORD)v17)
    goto LABEL_8;
  LODWORD(v18) = (v17 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v19 = (uint64_t ***)(v16 + 16 * v18);
  v20 = *v19;
  if (*v19 != a1)
  {
    v21 = 1;
    while (v20 != (uint64_t **)-4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v17 - 1);
      v20 = *(uint64_t ***)(v16 + 16 * v18);
      if (v20 == a1)
      {
        v19 = (uint64_t ***)(v16 + 16 * v18);
        goto LABEL_9;
      }
    }
LABEL_8:
    v19 = (uint64_t ***)(v16 + 16 * v17);
  }
LABEL_9:
  v23 = v19[1];
  v26 = (uint64_t)*v23;
  v24 = (char *)(v23 + 2);
  v25 = v26;
LABEL_10:
  v146 = 773;
  v143 = v24;
  v144 = v25;
  v145[0] = a4;
  v27 = a1[7];
  v28 = operator new();
  *(_QWORD *)v28 = *(_QWORD *)v15 + 1600;
  *(_QWORD *)(v28 + 8) = 0;
  v29 = *(_DWORD *)(v28 + 20) & 0xC0000000;
  *(_QWORD *)(v28 + 24) = 0;
  v30 = (uint64_t *)(v28 + 24);
  *(_DWORD *)(v28 + 16) = 22;
  *(_DWORD *)(v28 + 20) = v29;
  v31 = (uint64_t *)(v28 + 40);
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = v28 + 40;
  *(_QWORD *)(v28 + 48) = v28 + 40;
  *(_QWORD *)(v28 + 56) = 0;
  if (v27)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v27 + 9), (_QWORD *)v28);
    v32 = a1[3];
    *(_QWORD *)(v28 + 24) = v32;
    *(_QWORD *)(v28 + 32) = a1 + 3;
    v32[1] = (uint64_t)v30;
    a1[3] = v30;
  }
  llvm::Value::setName((uint64_t ***)v28, (uint64_t)&v143);
  v33 = *(unsigned int *)(a6 + 8);
  if (v33 >= *(_DWORD *)(a6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v33 + 1, 8);
    LODWORD(v33) = *(_DWORD *)(a6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a6 + 8 * v33) = v28;
  ++*(_DWORD *)(a6 + 8);
  v34 = (char *)operator new(0x60uLL);
  *((_DWORD *)v34 + 13) = *((_DWORD *)v34 + 13) & 0x38000000 | 1;
  v35 = (uint64_t)(v34 + 32);
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  *((_QWORD *)v34 + 2) = 0;
  *((_QWORD *)v34 + 3) = v34 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v34 + 32), (llvm::BasicBlock *)a1, (llvm::BasicBlock *)v28);
  for (i = a1[6]; ; i = (uint64_t *)i[1])
  {
    v37 = i - 3;
    if (!i)
      v37 = 0;
    if (*((_BYTE *)v37 + 16) != 83)
      break;
  }
  v38 = (unsigned __int8 *)i[3];
  v142 = v38;
  if (v38)
    llvm::MetadataTracking::track((uint64_t)&v142, v38, 2);
  v41 = (unsigned __int8 *)*((_QWORD *)v34 + 10);
  v40 = (unsigned __int8 **)(v34 + 80);
  v39 = v41;
  if (v41)
    llvm::MetadataTracking::untrack((uint64_t)v40, v39);
  v42 = v142;
  *v40 = v142;
  if (v42)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v142, v42, (uint64_t)v40);
    v142 = 0;
  }
  v43 = a3;
  if ((_DWORD)a3)
  {
    v44 = a2;
    do
    {
      v45 = *(_QWORD *)(*v44 + 40);
      if (v45 == *v44 + 40)
      {
        v47 = 0;
      }
      else
      {
        if (v45)
          v46 = (unsigned __int8 *)(v45 - 24);
        else
          v46 = 0;
        if (v46[16] - 29 >= 0xB)
          v47 = 0;
        else
          v47 = (llvm::User *)v46;
      }
      llvm::User::replaceUsesOfWith(v47, (llvm::Value *)a1, (llvm::Value *)v28);
      ++v44;
      --v43;
    }
    while (v43);
  }
  v141 = 0;
  sub_1C5EC23D8((uint64_t)a1, v28, a2, a3, a7, a8, a9, a10, a11, &v141);
  sub_1C5EC29A0((uint64_t)a1, v28, a2, a3, v35, v141);
  v143 = v145;
  v144 = 0x800000000;
  v48 = a1[1];
  if (v48)
  {
    while (1)
    {
      v49 = v48[3];
      v50 = *(unsigned __int8 *)(v49 + 16);
      v51 = v49 && v50 >= 0x1C;
      v52 = !v51 || v50 - 29 > 0xA;
      if (!v52)
        break;
      v48 = (uint64_t *)v48[1];
      if (!v48)
        goto LABEL_69;
    }
    v53 = 0;
    do
    {
      v54 = v48;
      do
      {
        v48 = (uint64_t *)v48[1];
        if (!v48)
          break;
        v55 = v48[3];
        v56 = *(unsigned __int8 *)(v55 + 16);
        v57 = v55 && v56 >= 0x1C;
      }
      while (!v57 || v56 - 29 > 0xA);
      v59 = *(_QWORD *)(v54[3] + 40);
      if (v59 != v28)
      {
        if (v53 >= HIDWORD(v144))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v143, (uint64_t)v145, v53 + 1, 8);
          v53 = v144;
        }
        *((_QWORD *)v143 + v53) = v59;
        v53 = v144 + 1;
        LODWORD(v144) = v144 + 1;
      }
    }
    while (v48);
    if (v53)
    {
      v60 = **a1;
      if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
      {
        v74 = 0;
        v73 = &byte_1C871356D;
        goto LABEL_79;
      }
      v61 = *(_QWORD *)(*(_QWORD *)v60 + 152);
      v62 = *(unsigned int *)(*(_QWORD *)v60 + 168);
      if ((_DWORD)v62)
      {
        LODWORD(v63) = (v62 - 1) & (v132 ^ (a1 >> 9));
        v64 = (uint64_t ***)(v61 + 16 * v63);
        v65 = *v64;
        if (*v64 == a1)
        {
LABEL_78:
          v72 = v64[1];
          v75 = *v72;
          v73 = (char *)(v72 + 2);
          v74 = v75;
LABEL_79:
          v140 = 773;
          v138[0] = v73;
          v138[1] = v74;
          v139 = a5;
          v76 = a1[7];
          v68 = operator new();
          *(_QWORD *)v68 = *(_QWORD *)v60 + 1600;
          *(_QWORD *)(v68 + 8) = 0;
          v77 = *(_DWORD *)(v68 + 20) & 0xC0000000;
          *(_QWORD *)(v68 + 24) = 0;
          v78 = (uint64_t *)(v68 + 24);
          *(_DWORD *)(v68 + 16) = 22;
          *(_DWORD *)(v68 + 20) = v77;
          *(_QWORD *)(v68 + 32) = 0;
          *(_QWORD *)(v68 + 40) = v68 + 40;
          *(_QWORD *)(v68 + 48) = v68 + 40;
          *(_QWORD *)(v68 + 56) = 0;
          if (v76)
          {
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v76 + 9), (_QWORD *)v68);
            v79 = a1[3];
            *(_QWORD *)(v68 + 24) = v79;
            *(_QWORD *)(v68 + 32) = a1 + 3;
            v79[1] = (uint64_t)v78;
            a1[3] = v78;
          }
          llvm::Value::setName((uint64_t ***)v68, (uint64_t)v138);
          v80 = *(unsigned int *)(a6 + 8);
          if (v80 >= *(_DWORD *)(a6 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v80 + 1, 8);
            LODWORD(v80) = *(_DWORD *)(a6 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a6 + 8 * v80) = v68;
          ++*(_DWORD *)(a6 + 8);
          v81 = (char *)operator new(0x60uLL);
          *((_DWORD *)v81 + 13) = *((_DWORD *)v81 + 13) & 0x38000000 | 1;
          v82 = (uint64_t)(v81 + 32);
          *(_QWORD *)v81 = 0;
          *((_QWORD *)v81 + 1) = 0;
          *((_QWORD *)v81 + 2) = 0;
          *((_QWORD *)v81 + 3) = v81 + 32;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v81 + 32), (llvm::BasicBlock *)a1, (llvm::BasicBlock *)v68);
          for (j = a1[6]; ; j = (uint64_t *)j[1])
          {
            v84 = j - 3;
            if (!j)
              v84 = 0;
            if (*((_BYTE *)v84 + 16) != 83)
              break;
          }
          v85 = (unsigned __int8 *)j[3];
          v137 = v85;
          if (v85)
            llvm::MetadataTracking::track((uint64_t)&v137, v85, 2);
          v88 = (unsigned __int8 *)*((_QWORD *)v81 + 10);
          v87 = (unsigned __int8 **)(v81 + 80);
          v86 = v88;
          if (v88)
            llvm::MetadataTracking::untrack((uint64_t)v87, v86);
          v89 = v137;
          *v87 = v137;
          if (v89)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v137, v89, (uint64_t)v87);
            v137 = 0;
          }
          v90 = (uint64_t *)v143;
          if ((_DWORD)v144)
          {
            v91 = 8 * v144;
            do
            {
              v92 = *(_QWORD *)(*v90 + 40);
              if (v92 == *v90 + 40)
              {
                v94 = 0;
              }
              else
              {
                if (v92)
                  v93 = (unsigned __int8 *)(v92 - 24);
                else
                  v93 = 0;
                if (v93[16] - 29 >= 0xB)
                  v94 = 0;
                else
                  v94 = (llvm::User *)v93;
              }
              llvm::User::replaceUsesOfWith(v94, (llvm::Value *)a1, (llvm::Value *)v68);
              ++v90;
              v91 -= 8;
            }
            while (v91);
            v90 = (uint64_t *)v143;
            v95 = v144;
          }
          else
          {
            v95 = 0;
          }
          v141 = 0;
          sub_1C5EC23D8((uint64_t)a1, v68, v90, v95, a7, a8, a9, a10, a11, &v141);
          sub_1C5EC29A0((uint64_t)a1, v68, (uint64_t *)v143, v144, v82, v141);
          goto LABEL_70;
        }
        v66 = 1;
        while (v65 != (uint64_t **)-4096)
        {
          v67 = v63 + v66++;
          v63 = v67 & (v62 - 1);
          v65 = *(uint64_t ***)(v61 + 16 * v63);
          if (v65 == a1)
          {
            v64 = (uint64_t ***)(v61 + 16 * v63);
            goto LABEL_78;
          }
        }
      }
      v64 = (uint64_t ***)(v61 + 16 * v62);
      goto LABEL_78;
    }
  }
LABEL_69:
  v68 = 0;
LABEL_70:
  for (k = (uint64_t **)a1[6]; k != a1 + 5; k = (uint64_t **)k[1])
  {
    v70 = (llvm::Instruction *)(k - 3);
    if (k)
      v71 = k - 3;
    else
      v71 = 0;
    if (*((_BYTE *)v71 + 16) != 83)
      goto LABEL_111;
  }
  v70 = 0;
LABEL_111:
  if (*((_BYTE *)v70 + 16) == 94)
    v96 = v70;
  else
    v96 = 0;
  llvm::Instruction::clone(v96);
  v98 = (uint64_t)v97;
  if (*a4)
  {
    v138[0] = "lpad";
    v139 = a4;
    v99 = 771;
  }
  else
  {
    v138[0] = "lpad";
    v99 = 259;
  }
  v140 = v99;
  llvm::Value::setName(v97, (uint64_t)v138);
  for (m = *(uint64_t **)(v28 + 48); m != v31; m = (uint64_t *)m[1])
  {
    v101 = m - 3;
    if (!m)
      v101 = 0;
    if (*((_BYTE *)v101 + 16) != 83)
    {
      v102 = *((unsigned __int8 *)m - 8) - 38;
      v52 = v102 > 0x38;
      v103 = (1 << v102) & 0x100060000000001;
      if (v52 || v103 == 0)
        v31 = m;
      else
        v31 = (uint64_t *)m[1];
      break;
    }
  }
  *(_QWORD *)(v98 + 40) = v28;
  *(_WORD *)(v28 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v98 + 23) & 0x10) != 0)
  {
    v128 = *(_QWORD *)(v28 + 56);
    if (v128)
    {
      v129 = *(llvm::ValueSymbolTable **)(v128 + 104);
      if (v129)
        llvm::ValueSymbolTable::reinsertValue(v129, (llvm::Value *)v98);
    }
  }
  v105 = *v31;
  *(_QWORD *)(v98 + 24) = *v31;
  *(_QWORD *)(v98 + 32) = v31;
  *(_QWORD *)(v105 + 8) = v98 + 24;
  *v31 = v98 + 24;
  v106 = v96;
  if (!v68)
  {
    v110 = (llvm::Value *)v98;
LABEL_151:
    llvm::Value::doRAUW(v106, v110, (llvm::Value *)1);
    goto LABEL_152;
  }
  llvm::Instruction::clone(v96);
  v108 = (uint64_t)v107;
  if (*a5)
  {
    v138[0] = "lpad";
    v139 = a5;
    v109 = 771;
  }
  else
  {
    v138[0] = "lpad";
    v109 = 259;
  }
  v140 = v109;
  llvm::Value::setName(v107, (uint64_t)v138);
  v111 = (uint64_t *)(v68 + 40);
  for (n = *(uint64_t **)(v68 + 48); n != v111; n = (uint64_t *)n[1])
  {
    v113 = n - 3;
    if (!n)
      v113 = 0;
    if (*((_BYTE *)v113 + 16) != 83)
    {
      v114 = *((unsigned __int8 *)n - 8) - 38;
      v52 = v114 > 0x38;
      v115 = (1 << v114) & 0x100060000000001;
      if (v52 || v115 == 0)
        v111 = n;
      else
        v111 = (uint64_t *)n[1];
      break;
    }
  }
  *(_QWORD *)(v108 + 40) = v68;
  *(_WORD *)(v68 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v108 + 23) & 0x10) != 0)
  {
    v130 = *(_QWORD *)(v68 + 56);
    if (v130)
    {
      v131 = *(llvm::ValueSymbolTable **)(v130 + 104);
      if (v131)
        llvm::ValueSymbolTable::reinsertValue(v131, (llvm::Value *)v108);
    }
  }
  v117 = *v111;
  *(_QWORD *)(v108 + 24) = *v111;
  *(_QWORD *)(v108 + 32) = v111;
  *(_QWORD *)(v117 + 8) = v108 + 24;
  *v111 = v108 + 24;
  if (*((_QWORD *)v96 + 1))
  {
    v118 = *(_QWORD *)v96;
    v138[0] = "lpad.phi";
    v140 = 259;
    v119 = operator new(0x48uLL);
    v119[1] = v118;
    v120 = (llvm::PHINode *)(v119 + 1);
    *v119 = 0;
    v119[2] = 0;
    v119[3] = 0x4000000000000053;
    *((_DWORD *)v119 + 16) = 0;
    *((_OWORD *)v119 + 3) = 0u;
    *((_OWORD *)v119 + 2) = 0u;
    v121 = *((_QWORD *)v96 + 3);
    v122 = *((_QWORD *)v96 + 5);
    v119[6] = v122;
    *(_WORD *)(v122 + 18) &= ~0x8000u;
    v119[5] = (char *)v96 + 24;
    v119[4] = v121;
    *(_QWORD *)(v121 + 8) = v119 + 4;
    *((_QWORD *)v96 + 3) = v119 + 4;
    *((_DWORD *)v119 + 17) = 2;
    llvm::Value::setName((uint64_t ***)v119 + 1, (uint64_t)v138);
    v123 = *((unsigned int *)v119 + 17);
    v124 = operator new(40 * v123);
    *v119 = v124;
    if ((_DWORD)v123)
    {
      v125 = &v124[4 * v123];
      do
      {
        *v124 = 0;
        v124[1] = 0;
        v124[2] = 0;
        v124[3] = v120;
        v124 += 4;
      }
      while (v124 != v125);
    }
    sub_1C477667C(v120, v98, v28);
    sub_1C477667C(v120, v108, v68);
    v106 = v96;
    v110 = (llvm::Value *)(v119 + 1);
    goto LABEL_151;
  }
LABEL_152:
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v96 + 5) + 40, (uint64_t ***)v96);
  v126 = *((_QWORD *)v96 + 3);
  v127 = (_QWORD *)*((_QWORD *)v96 + 4);
  *v127 = v126;
  *(_QWORD *)(v126 + 8) = v127;
  *((_QWORD *)v96 + 3) = 0;
  *((_QWORD *)v96 + 4) = 0;
  llvm::Value::deleteValue(v96);
  if (v143 != v145)
    free(v143);
}

uint64_t llvm::FoldReturnIntoUncondBranch(llvm *this, llvm::ReturnInst *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, llvm::DomTreeUpdater *a5)
{
  llvm::BasicBlock *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Instruction *v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  llvm::Instruction *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm::ValueSymbolTable *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::ValueSymbolTable *v76;
  uint64_t v77;
  llvm::ValueSymbolTable *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v82;
  llvm::ValueSymbolTable *v83;
  unint64_t v85[3];

  v85[2] = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)((char *)a3 + 40);
  v7 = (llvm::BasicBlock *)*((_QWORD *)a3 + 5);
  if (v7 == (llvm::BasicBlock *)((char *)a3 + 40))
  {
    v10 = 0;
  }
  else
  {
    if (v7)
      v9 = (char *)v7 - 24;
    else
      v9 = 0;
    if (v9[16] - 29 >= 0xB)
      v10 = 0;
    else
      v10 = v9;
  }
  llvm::Instruction::clone(this);
  v12 = v11;
  *(_QWORD *)(v11 + 40) = a3;
  *((_WORD *)a3 + 9) &= ~0x8000u;
  if ((*(_BYTE *)(v11 + 23) & 0x10) != 0)
  {
    v82 = *((_QWORD *)a3 + 7);
    if (v82)
    {
      v83 = *(llvm::ValueSymbolTable **)(v82 + 104);
      if (v83)
        llvm::ValueSymbolTable::reinsertValue(v83, (llvm::Value *)v12);
    }
  }
  v13 = *v8;
  *(_QWORD *)(v12 + 24) = *v8;
  *(_QWORD *)(v12 + 32) = v8;
  v14 = (uint64_t *)(v12 + 24);
  *(_QWORD *)(v13 + 8) = v12 + 24;
  *v8 = v12 + 24;
  v15 = *(_DWORD *)(v12 + 20);
  if ((v15 & 0x40000000) != 0)
  {
    v17 = *(_QWORD *)(v12 - 8);
    v16 = v15 & 0x7FFFFFF;
    if (!v16)
      goto LABEL_120;
    goto LABEL_14;
  }
  v16 = v15 & 0x7FFFFFF;
  v17 = v12 - 32 * v16;
  if (v16)
  {
LABEL_14:
    v18 = v17 + 32 * v16;
    do
    {
      v19 = 0;
      v20 = *(llvm::Instruction **)v17;
      v21 = *(unsigned __int8 *)(*(_QWORD *)v17 + 16);
      if (*(_QWORD *)v17 && v21 == 77)
      {
        v22 = (unsigned __int8 *)*((_QWORD *)v20 - 4);
        llvm::Instruction::clone(v20);
        v19 = v23;
        *(_QWORD *)(v23 + 40) = a3;
        *((_WORD *)a3 + 9) &= ~0x8000u;
        if ((*(_BYTE *)(v23 + 23) & 0x10) != 0)
        {
          v65 = *((_QWORD *)a3 + 7);
          if (v65)
          {
            v66 = *(llvm::ValueSymbolTable **)(v65 + 104);
            if (v66)
              llvm::ValueSymbolTable::reinsertValue(v66, (llvm::Value *)v19);
          }
        }
        v24 = *v14;
        *(_QWORD *)(v19 + 24) = *v14;
        *(_QWORD *)(v19 + 32) = v14;
        *(_QWORD *)(v24 + 8) = v19 + 24;
        *v14 = v19 + 24;
        if (*(_QWORD *)v17)
        {
          **(_QWORD **)(v17 + 16) = *(_QWORD *)(v17 + 8);
          v25 = *(_QWORD *)(v17 + 8);
          if (v25)
            *(_QWORD *)(v25 + 16) = *(_QWORD *)(v17 + 16);
        }
        *(_QWORD *)v17 = v19;
        v26 = (_QWORD *)(v19 + 8);
        v27 = *(_QWORD *)(v19 + 8);
        *(_QWORD *)(v17 + 8) = v27;
        if (v27)
          *(_QWORD *)(v27 + 16) = v17 + 8;
        *(_QWORD *)(v17 + 16) = v26;
        *v26 = v17;
        v21 = v22[16];
        v20 = (llvm::Instruction *)v22;
      }
      if (v21 == 92)
      {
        v28 = (llvm::Instruction *)*((_QWORD *)v20 - 4);
        llvm::Instruction::clone(v20);
        v30 = v29;
        if (v19)
        {
          v31 = *(_DWORD *)(v19 + 20);
          if ((v31 & 0x40000000) != 0)
            v32 = *(_QWORD *)(v19 - 8);
          else
            v32 = v19 - 32 * (v31 & 0x7FFFFFF);
          if (*(_QWORD *)v32)
          {
            **(_QWORD **)(v32 + 16) = *(_QWORD *)(v32 + 8);
            v33 = *(_QWORD *)(v32 + 8);
            if (v33)
              *(_QWORD *)(v33 + 16) = *(_QWORD *)(v32 + 16);
          }
          *(_QWORD *)v32 = v29;
          if (v29)
          {
            v34 = (_QWORD *)(v29 + 8);
            v35 = *(_QWORD *)(v29 + 8);
            *(_QWORD *)(v32 + 8) = v35;
            if (v35)
              *(_QWORD *)(v35 + 16) = v32 + 8;
            *(_QWORD *)(v32 + 16) = v34;
            *v34 = v32;
          }
          *(_QWORD *)(v29 + 40) = a3;
          *((_WORD *)a3 + 9) &= ~0x8000u;
          if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
          {
            v75 = *((_QWORD *)a3 + 7);
            if (v75)
            {
              v76 = *(llvm::ValueSymbolTable **)(v75 + 104);
              if (v76)
                llvm::ValueSymbolTable::reinsertValue(v76, (llvm::Value *)v30);
            }
          }
          v36 = *(_QWORD *)(v19 + 24);
          *(_QWORD *)(v30 + 24) = v36;
          *(_QWORD *)(v30 + 32) = v19 + 24;
          *(_QWORD *)(v36 + 8) = v30 + 24;
          *(_QWORD *)(v19 + 24) = v30 + 24;
          if (v28)
            goto LABEL_47;
        }
        else
        {
          *(_QWORD *)(v29 + 40) = a3;
          *((_WORD *)a3 + 9) &= ~0x8000u;
          if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
          {
            v77 = *((_QWORD *)a3 + 7);
            if (v77)
            {
              v78 = *(llvm::ValueSymbolTable **)(v77 + 104);
              if (v78)
                llvm::ValueSymbolTable::reinsertValue(v78, (llvm::Value *)v30);
            }
          }
          v37 = *v14;
          *(_QWORD *)(v30 + 24) = *v14;
          *(_QWORD *)(v30 + 32) = v14;
          *(_QWORD *)(v37 + 8) = v30 + 24;
          *v14 = v30 + 24;
          if (*(_QWORD *)v17)
          {
            **(_QWORD **)(v17 + 16) = *(_QWORD *)(v17 + 8);
            v38 = *(_QWORD *)(v17 + 8);
            if (v38)
              *(_QWORD *)(v38 + 16) = *(_QWORD *)(v17 + 16);
          }
          *(_QWORD *)v17 = v30;
          v39 = (_QWORD *)(v30 + 8);
          v40 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v17 + 8) = v40;
          if (v40)
            *(_QWORD *)(v40 + 16) = v17 + 8;
          *(_QWORD *)(v17 + 16) = v39;
          *v39 = v17;
          if (v28)
          {
LABEL_47:
            if (*((_BYTE *)v28 + 16) == 83 && *((llvm::ReturnInst **)v28 + 5) == a2)
            {
              if (v30)
              {
                v41 = *((_DWORD *)v28 + 5);
                v42 = v41 & 0x7FFFFFF;
                if ((v41 & 0x7FFFFFF) != 0)
                {
                  v43 = 0;
                  while (1)
                  {
                    v44 = (char *)v28 - 32 * v42;
                    if ((v41 & 0x40000000) != 0)
                      v44 = (char *)*((_QWORD *)v28 - 1);
                    if (*(llvm::BasicBlock **)&v44[32 * *((unsigned int *)v28 + 15) + 8 * v43] == a3)
                      break;
                    if (v42 == ++v43)
                      goto LABEL_56;
                  }
                }
                else
                {
LABEL_56:
                  LODWORD(v43) = -1;
                }
                if ((v41 & 0x40000000) != 0)
                  v45 = (char *)*((_QWORD *)v28 - 1);
                else
                  v45 = (char *)v28 - 32 * v42;
                v46 = *(_DWORD *)(v30 + 20);
                if ((v46 & 0x40000000) != 0)
                  v47 = *(_QWORD *)(v30 - 8);
                else
                  v47 = v30 - 32 * (v46 & 0x7FFFFFF);
                v48 = *(_QWORD *)&v45[32 * v43];
                if (*(_QWORD *)v47)
                {
                  **(_QWORD **)(v47 + 16) = *(_QWORD *)(v47 + 8);
                  v49 = *(_QWORD *)(v47 + 8);
                  if (v49)
                    *(_QWORD *)(v49 + 16) = *(_QWORD *)(v47 + 16);
                }
                *(_QWORD *)v47 = v48;
                if (v48)
                {
                  v52 = *(_QWORD *)(v48 + 8);
                  v50 = (_QWORD *)(v48 + 8);
                  v51 = v52;
                  *(_QWORD *)(v47 + 8) = v52;
                  if (v52)
                    *(_QWORD *)(v51 + 16) = v47 + 8;
                  *(_QWORD *)(v47 + 16) = v50;
                  *v50 = v47;
                }
              }
              else
              {
                v53 = *((_DWORD *)v28 + 5);
                v54 = v53 & 0x7FFFFFF;
                if (v19)
                {
                  if ((_DWORD)v54)
                  {
                    v55 = 0;
                    while (1)
                    {
                      v56 = (char *)v28 - 32 * v54;
                      if ((v53 & 0x40000000) != 0)
                        v56 = (char *)*((_QWORD *)v28 - 1);
                      if (*(llvm::BasicBlock **)&v56[32 * *((unsigned int *)v28 + 15) + 8 * v55] == a3)
                        break;
                      if (v54 == ++v55)
                        goto LABEL_75;
                    }
                  }
                  else
                  {
LABEL_75:
                    LODWORD(v55) = -1;
                  }
                  if ((v53 & 0x40000000) != 0)
                    v57 = (char *)*((_QWORD *)v28 - 1);
                  else
                    v57 = (char *)v28 - 32 * v54;
                  v58 = *(_DWORD *)(v19 + 20);
                  if ((v58 & 0x40000000) != 0)
                    v59 = *(_QWORD *)(v19 - 8);
                  else
                    v59 = v19 - 32 * (v58 & 0x7FFFFFF);
                  v60 = *(_QWORD *)&v57[32 * v55];
                  if (*(_QWORD *)v59)
                  {
                    **(_QWORD **)(v59 + 16) = *(_QWORD *)(v59 + 8);
                    v61 = *(_QWORD *)(v59 + 8);
                    if (v61)
                      *(_QWORD *)(v61 + 16) = *(_QWORD *)(v59 + 16);
                  }
                  *(_QWORD *)v59 = v60;
                  if (v60)
                  {
                    v64 = *(_QWORD *)(v60 + 8);
                    v62 = (_QWORD *)(v60 + 8);
                    v63 = v64;
                    *(_QWORD *)(v59 + 8) = v64;
                    if (v64)
                      *(_QWORD *)(v63 + 16) = v59 + 8;
                    *(_QWORD *)(v59 + 16) = v62;
                    *v62 = v59;
                  }
                }
                else
                {
                  if ((_DWORD)v54)
                  {
                    v67 = 0;
                    while (1)
                    {
                      v68 = (char *)v28 - 32 * v54;
                      if ((v53 & 0x40000000) != 0)
                        v68 = (char *)*((_QWORD *)v28 - 1);
                      if (*(llvm::BasicBlock **)&v68[32 * *((unsigned int *)v28 + 15) + 8 * v67] == a3)
                        break;
                      if (v54 == ++v67)
                        goto LABEL_96;
                    }
                  }
                  else
                  {
LABEL_96:
                    LODWORD(v67) = -1;
                  }
                  if ((v53 & 0x40000000) != 0)
                    v69 = (char *)*((_QWORD *)v28 - 1);
                  else
                    v69 = (char *)v28 - 32 * v54;
                  v70 = *(_QWORD *)&v69[32 * v67];
                  if (*(_QWORD *)v17)
                  {
                    **(_QWORD **)(v17 + 16) = *(_QWORD *)(v17 + 8);
                    v71 = *(_QWORD *)(v17 + 8);
                    if (v71)
                      *(_QWORD *)(v71 + 16) = *(_QWORD *)(v17 + 16);
                  }
                  *(_QWORD *)v17 = v70;
                  if (v70)
                  {
                    v74 = *(_QWORD *)(v70 + 8);
                    v72 = (_QWORD *)(v70 + 8);
                    v73 = v74;
                    *(_QWORD *)(v17 + 8) = v74;
                    if (v74)
                      *(_QWORD *)(v73 + 16) = v17 + 8;
                    *(_QWORD *)(v17 + 16) = v72;
                    *v72 = v17;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v30 = 0;
        v28 = v20;
        if (v20)
          goto LABEL_47;
      }
      v17 += 32;
    }
    while (v17 != v18);
  }
LABEL_120:
  llvm::BasicBlock::removePredecessor(a2, a3, 0);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v10 + 5) + 40, (uint64_t ***)v10);
  v79 = *((_QWORD *)v10 + 3);
  v80 = (_QWORD *)*((_QWORD *)v10 + 4);
  *v80 = v79;
  *(_QWORD *)(v79 + 8) = v80;
  *((_QWORD *)v10 + 3) = 0;
  *((_QWORD *)v10 + 4) = 0;
  llvm::Value::deleteValue((llvm::Value *)v10);
  if (a4)
  {
    v85[0] = (unint64_t)a3;
    v85[1] = (unint64_t)a2 | 4;
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a4, v85, 1);
  }
  return v12;
}

char *sub_1C5EBFBC0(llvm::Value *a1, uint64_t *a2, int a3, llvm::MDNode *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t **v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _DWORD *v55;
  unsigned int v56;
  uint64_t *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  llvm::Value *v64;
  _QWORD *v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  int v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t *v84;
  int v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  const void *v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v108;
  llvm::Value *v110;
  llvm::MDNode *v112;
  unsigned __int8 *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  _WORD v118[32];
  void *v119;
  uint64_t v120;
  _QWORD v121[18];

  v121[16] = *MEMORY[0x1E0C80C00];
  v119 = v121;
  v120 = 0x800000000;
  v13 = (uint64_t *)a2[5];
  v118[0] = 257;
  v14 = llvm::BasicBlock::splitBasicBlock(v13, a2 + 3, (uint64_t)&v114, 0);
  v108 = a8;
  if (!a5)
    goto LABEL_38;
  v114 = (uint64_t *)v118;
  v115 = (uint64_t *)v118;
  v116 = 8;
  v117 = 0;
  v15 = v120;
  if (v120 >= HIDWORD(v120))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v120 + 1, 16);
    v15 = v120;
  }
  v16 = (uint64_t **)((char *)v119 + 16 * v15);
  *v16 = v13;
  v16[1] = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFBLL);
  v17 = (v120 + 1);
  LODWORD(v120) = v120 + 1;
  v19 = (_QWORD *)(v14 + 40);
  v18 = *(_QWORD **)(v14 + 40);
  if (v18 == (_QWORD *)(v14 + 40))
  {
LABEL_12:
    v23 = 0;
  }
  else
  {
    if (v18)
      v20 = v18 - 3;
    else
      v20 = 0;
    v21 = *((unsigned __int8 *)v20 + 16);
    v22 = v21 - 29;
    if (v21 != 30)
    {
      v23 = 0;
      switch(v22)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_13;
        case 1:
LABEL_138:
          __break(1u);
LABEL_139:
          v27 = (*((_DWORD *)v8 + 5) & 0x7FFFFFF) - 1;
LABEL_134:
          if (v27)
            goto LABEL_23;
          break;
        case 2:
          v23 = (*((_DWORD *)v20 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_13;
        case 3:
        case 9:
          v23 = (*((_DWORD *)v20 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_13;
        case 4:
          v23 = 2;
          goto LABEL_13;
        case 7:
          v23 = *((_WORD *)v20 + 9) & 1;
          goto LABEL_13;
        case 8:
          v23 = 1;
          goto LABEL_13;
        case 10:
          v23 = *((_DWORD *)v20 + 20) + 1;
          goto LABEL_13;
        default:
          goto LABEL_12;
      }
      goto LABEL_35;
    }
    if ((*((_DWORD *)v20 + 5) & 0x7FFFFFF) == 3)
      v23 = 2;
    else
      v23 = 1;
  }
LABEL_13:
  v9 = a5;
  v103 = a7;
  v24 = (2 * v23) + v17;
  if (v24 > HIDWORD(v120))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v24, 16);
    v18 = (_QWORD *)*v19;
  }
  if (v18 != v19)
  {
    if (v18)
      v8 = v18 - 3;
    else
      v8 = 0;
    v25 = *((unsigned __int8 *)v8 + 16);
    v26 = v25 - 29;
    if (v25 == 30)
    {
      if ((*((_DWORD *)v8 + 5) & 0x7FFFFFF) == 3)
        v27 = 2;
      else
        v27 = 1;
LABEL_23:
      v28 = 0;
      v29 = 0;
      v30 = v8 - 8;
      v31 = v27;
      do
      {
        v32 = *((unsigned __int8 *)v8 + 16);
        if (v32 != 30)
          __asm { BR              X9 }
        v33 = v8[-4 * v29 - 4];
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v114, v33);
        if (v34)
        {
          v35 = v120;
          if (v120 >= (unint64_t)HIDWORD(v120))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v120 + 1, 16);
            v35 = v120;
          }
          v36 = (uint64_t *)((char *)v119 + 16 * v35);
          *v36 = v14;
          v36[1] = v33 & 0xFFFFFFFFFFFFFFFBLL;
          v37 = (v120 + 1);
          LODWORD(v120) = v37;
          if (v37 >= HIDWORD(v120))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v37 + 1, 16);
            LODWORD(v37) = v120;
          }
          v38 = (uint64_t **)((char *)v119 + 16 * v37);
          *v38 = v13;
          v38[1] = (uint64_t *)(v33 | 4);
          LODWORD(v120) = v120 + 1;
        }
        ++v29;
        v28 += 2;
        v30 += 4;
      }
      while (v31 != v29);
    }
    else
    {
      v27 = 2;
      switch(v26)
      {
        case 1:
          goto LABEL_138;
        case 2:
          v27 = (*((_DWORD *)v8 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_134;
        case 3:
        case 9:
          goto LABEL_139;
        case 4:
          goto LABEL_23;
        case 7:
          v27 = *((_WORD *)v8 + 9) & 1;
          goto LABEL_134;
        case 8:
          v27 = 1;
          goto LABEL_23;
        case 10:
          v27 = *((_DWORD *)v8 + 20) + 1;
          goto LABEL_134;
        default:
          break;
      }
    }
  }
LABEL_35:
  if (v115 != v114)
    free(v115);
  a7 = v103;
  a8 = v108;
  a5 = v9;
LABEL_38:
  v39 = (uint64_t *)v13[5];
  if (v39 == v13 + 5)
  {
    v41 = 0;
    if (a8)
      goto LABEL_46;
  }
  else
  {
    if (v39)
      v40 = v39 - 3;
    else
      v40 = 0;
    if (*((unsigned __int8 *)v40 + 16) - 29 >= 0xB)
      v41 = 0;
    else
      v41 = v40;
    if (a8)
    {
LABEL_46:
      v42 = *(_QWORD *)(a8 + 40);
      if (v42 == a8 + 40)
      {
        v54 = 0;
      }
      else
      {
        if (v42)
          v43 = (unsigned __int8 *)(v42 - 24);
        else
          v43 = 0;
        if (v43[16] - 29 >= 0xB)
          v54 = 0;
        else
          v54 = (char *)v43;
      }
      v47 = a8;
      goto LABEL_73;
    }
  }
  v44 = a5;
  v45 = *(_QWORD **)*v13;
  v118[0] = 257;
  v46 = v13[7];
  v47 = operator new();
  *(_QWORD *)v47 = *v45 + 1600;
  *(_QWORD *)(v47 + 8) = 0;
  v48 = *(_DWORD *)(v47 + 20) & 0xC0000000;
  *(_QWORD *)(v47 + 24) = 0;
  v49 = v47 + 24;
  *(_DWORD *)(v47 + 16) = 22;
  *(_DWORD *)(v47 + 20) = v48;
  *(_QWORD *)(v47 + 32) = 0;
  *(_QWORD *)(v47 + 40) = v47 + 40;
  *(_QWORD *)(v47 + 48) = v47 + 40;
  *(_QWORD *)(v47 + 56) = 0;
  if (v46)
  {
    v50 = v46 + 72;
    if (v14)
      v51 = (uint64_t *)(v14 + 24);
    else
      v51 = (uint64_t *)(v46 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v50, (_QWORD *)v47);
    v52 = *v51;
    *(_QWORD *)(v47 + 24) = *v51;
    *(_QWORD *)(v47 + 32) = v51;
    *(_QWORD *)(v52 + 8) = v49;
    *v51 = v49;
  }
  llvm::Value::setName((uint64_t ***)v47, (uint64_t)&v114);
  if (a3)
  {
    v54 = (char *)operator new(0x40uLL);
    *((_DWORD *)v54 + 5) &= 0x38000000u;
    *(_QWORD *)v54 = *v45 + 1576;
    *((_QWORD *)v54 + 1) = 0;
    v54[16] = 35;
    *(_OWORD *)(v54 + 44) = 0u;
    *(_OWORD *)(v54 + 33) = 0u;
    *(_OWORD *)(v54 + 17) = 0u;
    *(_WORD *)(v47 + 18) &= ~0x8000u;
    v53 = *(_QWORD *)(v47 + 40);
    *((_QWORD *)v54 + 4) = v47 + 40;
    *((_QWORD *)v54 + 5) = v47;
    *((_QWORD *)v54 + 3) = v53;
    *(_QWORD *)(v53 + 8) = v54 + 24;
    *(_QWORD *)(v47 + 40) = v54 + 24;
    a5 = v44;
  }
  else
  {
    v55 = operator new(0x60uLL);
    v55[13] = v55[13] & 0x38000000 | 1;
    v54 = (char *)(v55 + 8);
    *(_QWORD *)v55 = 0;
    *((_QWORD *)v55 + 1) = 0;
    *((_QWORD *)v55 + 2) = 0;
    *((_QWORD *)v55 + 3) = v55 + 8;
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v55 + 8), (llvm::BasicBlock *)v14, (llvm::BasicBlock *)v47);
    a5 = v44;
    if (v44)
    {
      v56 = v120;
      if (v120 >= HIDWORD(v120))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v120 + 1, 16);
        v56 = v120;
      }
      v57 = (uint64_t *)((char *)v119 + 16 * v56);
      *v57 = v47;
      v57[1] = v14 & 0xFFFFFFFFFFFFFFFBLL;
      LODWORD(v120) = v120 + 1;
    }
  }
  v58 = (unsigned __int8 *)a2[6];
  v113 = v58;
  if (v58)
    llvm::MetadataTracking::track((uint64_t)&v113, v58, 2);
  v59 = (unsigned __int8 *)*((_QWORD *)v54 + 6);
  if (v59)
    llvm::MetadataTracking::untrack((uint64_t)(v54 + 48), v59);
  v60 = v113;
  *((_QWORD *)v54 + 6) = v113;
  if (v60)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v113, v60, (uint64_t)(v54 + 48));
    v113 = 0;
  }
LABEL_73:
  v61 = operator new(0xA0uLL);
  v62 = v61;
  v63 = 0;
  v64 = (llvm::Value *)(v61 + 24);
  v61[29] = v61[29] & 0x38000000 | 3;
  do
  {
    v65 = &v61[v63];
    *v65 = 0;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v64;
    v63 += 8;
  }
  while (v63 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v61 + 24), (llvm::BasicBlock *)v47, (llvm::BasicBlock *)v14, a1, 0);
  if (a5)
  {
    v66 = v120;
    if (v120 >= HIDWORD(v120))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v120 + 1, 16);
      v66 = v120;
    }
    v67 = (uint64_t **)((char *)v119 + 16 * v66);
    *v67 = v13;
    v67[1] = (uint64_t *)(v47 & 0xFFFFFFFFFFFFFFFBLL);
    LODWORD(v120) = v120 + 1;
    if (a4 || *((_QWORD *)v62 + 18) || (*((_BYTE *)v62 + 119) & 0x20) != 0)
      llvm::Value::setMetadata(v64, 2, a4);
    v68 = v41 + 3;
    if (!v41)
      v68 = 0;
    v114 = v68;
    llvm::ReplaceInstWithInst(v41[5] + 40, &v114, v64);
    llvm::DomTreeUpdater::applyUpdates(a5, (unint64_t *)v119, v120);
    goto LABEL_85;
  }
  if (a4 || *((_QWORD *)v62 + 18) || (*((_BYTE *)v62 + 119) & 0x20) != 0)
    llvm::Value::setMetadata(v64, 2, a4);
  v79 = v41 + 3;
  if (!v41)
    v79 = 0;
  v114 = v79;
  llvm::ReplaceInstWithInst(v41[5] + 40, &v114, v64);
  if (a6)
  {
    v80 = *(_QWORD *)(a6 + 24);
    v81 = *(unsigned int *)(a6 + 40);
    if ((_DWORD)v81)
    {
      LODWORD(v82) = (v81 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      v83 = (uint64_t **)(v80 + 16 * v82);
      v84 = *v83;
      if (v13 == *v83)
      {
LABEL_110:
        if (v83 != (uint64_t **)(v80 + 16 * v81))
        {
          v87 = v83[1];
          if (v87)
          {
            v88 = *((unsigned int *)v87 + 8);
            if ((_DWORD)v88)
            {
              v104 = a7;
              v89 = (const void *)v87[3];
              v90 = (char *)operator new(8 * v88);
              memmove(v90, v89, 8 * v88);
              v91 = (uint64_t *)&v90[8 * v88];
              v92 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(a6, v14, (uint64_t)v13);
              v93 = a6;
              v94 = v92;
              v110 = (llvm::Value *)(v92 + 40);
              v112 = (llvm::MDNode *)(v92 + 24);
              v95 = (uint64_t *)v90;
              do
              {
                v96 = *v95;
                *(_BYTE *)(v93 + 64) = 0;
                v97 = *(_QWORD *)(v96 + 8);
                if (v97 != v94)
                {
                  v98 = *(_QWORD **)(v97 + 24);
                  v99 = *(unsigned int *)(v97 + 32);
                  v100 = &v98[v99];
                  if ((_DWORD)v99)
                  {
                    v101 = 8 * v99;
                    while (*v98 != v96)
                    {
                      ++v98;
                      v101 -= 8;
                      if (!v101)
                      {
                        v98 = v100;
                        break;
                      }
                    }
                  }
                  if (v100 != v98 + 1)
                  {
                    memmove(v98, v98 + 1, (char *)v100 - (char *)(v98 + 1));
                    LODWORD(v99) = *(_DWORD *)(v97 + 32);
                  }
                  *(_DWORD *)(v97 + 32) = v99 - 1;
                  *(_QWORD *)(v96 + 8) = v94;
                  v102 = *(unsigned int *)(v94 + 32);
                  if (v102 >= *(unsigned int *)(v94 + 36))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v112, (uint64_t)v110, v102 + 1, 8);
                    v102 = *(unsigned int *)(v94 + 32);
                  }
                  *(_QWORD *)(*(_QWORD *)(v94 + 24) + 8 * v102) = v96;
                  ++*(_DWORD *)(v94 + 32);
                  llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v96);
                  v93 = a6;
                }
                ++v95;
              }
              while (v95 != v91);
              a7 = v104;
            }
            else
            {
              llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(a6, v14, (uint64_t)v13);
              v93 = a6;
              v90 = 0;
            }
            if (v108)
            {
              llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(v93, v47, (uint64_t)v13);
              if (!v90)
                goto LABEL_85;
            }
            else
            {
              llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(v93, v47, (uint64_t)v13);
              if (!v90)
                goto LABEL_85;
            }
            operator delete(v90);
            goto LABEL_85;
          }
        }
        goto LABEL_85;
      }
      v85 = 1;
      while (v84 != (uint64_t *)-4096)
      {
        v86 = v82 + v85++;
        v82 = v86 & (v81 - 1);
        v84 = *(uint64_t **)(v80 + 16 * v82);
        if (v13 == v84)
        {
          v83 = (uint64_t **)(v80 + 16 * v82);
          goto LABEL_110;
        }
      }
    }
    v83 = (uint64_t **)(v80 + 16 * v81);
    goto LABEL_110;
  }
LABEL_85:
  if (a7)
  {
    v69 = *(_DWORD *)(a7 + 16);
    if (v69)
    {
      v70 = *(_QWORD *)a7;
      v71 = v69 - 1;
      v72 = (v69 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      v73 = *(uint64_t **)(*(_QWORD *)a7 + 16 * v72);
      if (v13 == v73)
      {
LABEL_91:
        v76 = v70 + 16 * v72;
        v77 = *(_QWORD **)(v76 + 8);
        if (v77)
        {
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(*(_QWORD **)(v76 + 8), v47, a7);
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v77, v14, a7);
        }
      }
      else
      {
        v74 = 1;
        while (v73 != (uint64_t *)-4096)
        {
          v75 = v72 + v74++;
          v72 = v75 & v71;
          v73 = *(uint64_t **)(v70 + 16 * v72);
          if (v13 == v73)
            goto LABEL_91;
        }
      }
    }
  }
  if (v119 != v121)
    free(v119);
  return v54;
}

void llvm::SplitBlockAndInsertIfThenElse(llvm *this, llvm::Value *a2, llvm::Instruction *a3, llvm::Instruction **a4, llvm::Instruction **a5, llvm::MDNode *a6)
{
  uint64_t *v9;
  llvm::BasicBlock *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  char *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 **v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  llvm::Value *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t *v46;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t *v51[4];
  __int16 v52;

  v9 = (uint64_t *)*((_QWORD *)a2 + 5);
  v52 = 257;
  v10 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v9, (uint64_t *)a2 + 3, (uint64_t)v51, 0);
  v11 = (uint64_t *)v9[5];
  if (v11 == v9 + 5)
  {
    v46 = 0;
  }
  else
  {
    if (v11)
      v12 = v11 - 3;
    else
      v12 = 0;
    if (*((unsigned __int8 *)v12 + 16) - 29 >= 0xB)
      v12 = 0;
    v46 = v12;
  }
  v13 = *(_QWORD **)*v9;
  v52 = 257;
  v14 = v9[7];
  v15 = operator new();
  *(_QWORD *)v15 = *v13 + 1600;
  *(_QWORD *)(v15 + 8) = 0;
  v16 = *(_DWORD *)(v15 + 20) & 0xC0000000;
  *(_QWORD *)(v15 + 24) = 0;
  v17 = v15 + 24;
  *(_DWORD *)(v15 + 16) = 22;
  *(_DWORD *)(v15 + 20) = v16;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = v15 + 40;
  *(_QWORD *)(v15 + 48) = v15 + 40;
  *(_QWORD *)(v15 + 56) = 0;
  if (v14)
  {
    v18 = v14 + 72;
    if (v10)
      v19 = (uint64_t *)((char *)v10 + 24);
    else
      v19 = (uint64_t *)(v14 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v18, (_QWORD *)v15);
    v20 = *v19;
    *(_QWORD *)(v15 + 24) = *v19;
    *(_QWORD *)(v15 + 32) = v19;
    *(_QWORD *)(v20 + 8) = v17;
    *v19 = v17;
  }
  llvm::Value::setName((uint64_t ***)v15, (uint64_t)v51);
  v52 = 257;
  v21 = v9[7];
  v22 = operator new();
  *(_QWORD *)v22 = *v13 + 1600;
  *(_QWORD *)(v22 + 8) = 0;
  v23 = *(_DWORD *)(v22 + 20) & 0xC0000000;
  *(_QWORD *)(v22 + 24) = 0;
  v24 = v22 + 24;
  *(_DWORD *)(v22 + 16) = 22;
  *(_DWORD *)(v22 + 20) = v23;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = v22 + 40;
  *(_QWORD *)(v22 + 48) = v22 + 40;
  *(_QWORD *)(v22 + 56) = 0;
  if (v21)
  {
    v25 = v21 + 72;
    if (v10)
      v26 = (uint64_t *)((char *)v10 + 24);
    else
      v26 = (uint64_t *)(v21 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v25, (_QWORD *)v22);
    v27 = *v26;
    *(_QWORD *)(v22 + 24) = *v26;
    *(_QWORD *)(v22 + 32) = v26;
    *(_QWORD *)(v27 + 8) = v24;
    *v26 = v24;
  }
  llvm::Value::setName((uint64_t ***)v22, (uint64_t)v51);
  v28 = (char *)operator new(0x60uLL);
  *((_DWORD *)v28 + 13) = *((_DWORD *)v28 + 13) & 0x38000000 | 1;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *((_QWORD *)v28 + 3) = v28 + 32;
  *(_QWORD *)a3 = llvm::BranchInst::BranchInst((llvm::BranchInst *)(v28 + 32), v10, (llvm::BasicBlock *)v15);
  v29 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  v50 = v29;
  if (v29)
    llvm::MetadataTracking::track((uint64_t)&v50, v29, 2);
  v32 = (unsigned __int8 *)*((_QWORD *)v28 + 10);
  v31 = (unsigned __int8 **)(v28 + 80);
  v30 = v32;
  if (v32)
    llvm::MetadataTracking::untrack((uint64_t)v31, v30);
  v33 = v50;
  *v31 = v50;
  if (v33)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v50, v33, (uint64_t)v31);
    v50 = 0;
  }
  v34 = (char *)operator new(0x60uLL);
  *((_DWORD *)v34 + 13) = *((_DWORD *)v34 + 13) & 0x38000000 | 1;
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  *((_QWORD *)v34 + 2) = 0;
  *((_QWORD *)v34 + 3) = v34 + 32;
  *a4 = llvm::BranchInst::BranchInst((llvm::BranchInst *)(v34 + 32), v10, (llvm::BasicBlock *)v22);
  v35 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  v49 = v35;
  if (v35)
    llvm::MetadataTracking::track((uint64_t)&v49, v35, 2);
  v38 = (unsigned __int8 *)*((_QWORD *)v34 + 10);
  v37 = (unsigned __int8 **)(v34 + 80);
  v36 = v38;
  if (v38)
    llvm::MetadataTracking::untrack((uint64_t)v37, v36);
  v39 = v49;
  *v37 = v49;
  if (v39)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v49, v39, (uint64_t)v37);
    v49 = 0;
  }
  v40 = operator new(0xA0uLL);
  v41 = v40;
  v42 = 0;
  v43 = (llvm::Value *)(v40 + 24);
  v40[29] = v40[29] & 0x38000000 | 3;
  do
  {
    v44 = &v40[v42];
    *v44 = 0;
    v44[1] = 0;
    v44[2] = 0;
    v44[3] = v43;
    v42 += 8;
  }
  while (v42 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v40 + 24), (llvm::BasicBlock *)v15, (llvm::BasicBlock *)v22, this, 0);
  if (a5 || *((_QWORD *)v41 + 18) || (*((_BYTE *)v41 + 119) & 0x20) != 0)
    llvm::Value::setMetadata(v43, 2, (llvm::MDNode *)a5);
  v45 = v46 + 3;
  if (!v46)
    v45 = 0;
  v51[0] = v45;
  llvm::ReplaceInstWithInst(v46[5] + 40, v51, v43);
}

_QWORD *llvm::GetIfCondition(llvm *this, llvm::BasicBlock *a2, llvm::BasicBlock **a3, llvm::BasicBlock **a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v21;
  llvm::BasicBlock **v22;
  llvm::BasicBlock *v23;
  _QWORD *v24;
  _QWORD *v25;
  _DWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *result;
  _DWORD *v31;
  BOOL v32;
  llvm::BasicBlock *v33;
  llvm::BasicBlock *v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  llvm *v39;
  llvm::BasicBlock *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  llvm::BasicBlock *v46;
  BOOL v47;
  llvm::BasicBlock *v48;

  v7 = *((_QWORD *)this + 6);
  v8 = v7 - 24;
  if (!v7)
    v8 = 0;
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 != 83)
    v8 = 0;
  if (!v7 || v9 != 83)
  {
    v12 = *((_QWORD *)this + 1);
    if (v12)
    {
      while (1)
      {
        v13 = *(_QWORD *)(v12 + 24);
        v14 = *(unsigned __int8 *)(v13 + 16);
        v15 = v13 && v14 >= 0x1C;
        if (v15 && v14 - 29 <= 0xA)
          break;
        v12 = *(_QWORD *)(v12 + 8);
        if (!v12)
          return 0;
      }
      while (1)
      {
        v12 = *(_QWORD *)(v12 + 8);
        if (!v12)
          break;
        v17 = *(_QWORD *)(v12 + 24);
        v18 = *(unsigned __int8 *)(v17 + 16);
        if (v17)
          v19 = v18 >= 0x1C;
        else
          v19 = 0;
        if (v19 && v18 - 29 <= 0xA)
        {
          v34 = *(llvm::BasicBlock **)(v13 + 40);
          while (1)
          {
            v12 = *(_QWORD *)(v12 + 8);
            if (!v12)
              break;
            v35 = *(_QWORD *)(v12 + 24);
            v36 = *(unsigned __int8 *)(v35 + 16);
            if (v35)
              v37 = v36 >= 0x1C;
            else
              v37 = 0;
            if (v37 && v36 - 29 < 0xB)
              return 0;
          }
          v22 = (llvm::BasicBlock **)(v17 + 40);
          goto LABEL_33;
        }
      }
    }
    return 0;
  }
  v10 = *(_DWORD *)(v8 + 20);
  if ((v10 & 0x7FFFFFF) != 2)
    return 0;
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(v8 - 8);
  else
    v11 = v8 - 64;
  v21 = *(unsigned int *)(v8 + 60);
  v34 = *(llvm::BasicBlock **)(v11 + 32 * v21);
  v22 = (llvm::BasicBlock **)(v11 + 32 * v21 + 8);
LABEL_33:
  v23 = *v22;
  v24 = (_QWORD *)*((_QWORD *)v34 + 5);
  if (v24 == (_QWORD *)((char *)v34 + 40))
  {
    v25 = 0;
  }
  else
  {
    if (v24)
      v25 = v24 - 3;
    else
      v25 = 0;
    if (*((unsigned __int8 *)v25 + 16) - 29 >= 0xB)
      v25 = 0;
  }
  if (*((_BYTE *)v25 + 16) == 30)
    v26 = v25;
  else
    v26 = 0;
  v27 = (_QWORD *)*((_QWORD *)v23 + 5);
  if (v27 == (_QWORD *)((char *)v23 + 40))
  {
    v29 = 0;
  }
  else
  {
    if (v27)
      v28 = v27 - 3;
    else
      v28 = 0;
    if (*((unsigned __int8 *)v28 + 16) - 29 >= 0xB)
      v29 = 0;
    else
      v29 = v28;
  }
  result = 0;
  if (*((_BYTE *)v29 + 16) == 30)
    v31 = v29;
  else
    v31 = 0;
  if (v26)
    v32 = v31 == 0;
  else
    v32 = 1;
  if (!v32)
  {
    if ((v31[5] & 0x7FFFFFF) == 3)
    {
      v33 = v34;
      if ((v26[5] & 0x7FFFFFF) == 3)
        return 0;
    }
    else
    {
      v33 = v23;
      v23 = v34;
      v29 = v25;
    }
    if ((*((_DWORD *)v29 + 5) & 0x7FFFFFF) == 3)
    {
      result = (_QWORD *)llvm::BasicBlock::getSinglePredecessor(v33);
      if (!result)
        return result;
      v39 = (llvm *)*(v29 - 4);
      if (v39 == this && (llvm::BasicBlock *)*(v29 - 8) == v33)
      {
        v40 = v33;
        v33 = v23;
      }
      else
      {
        if (v39 != v33)
          return 0;
        v40 = v23;
        if ((llvm *)*(v29 - 8) != this)
          return 0;
      }
      *(_QWORD *)a2 = v33;
LABEL_104:
      *a3 = v40;
      return v29;
    }
    result = (_QWORD *)llvm::BasicBlock::getSinglePredecessor(v23);
    if (!result)
      return result;
    v41 = (uint64_t)result;
    if (result != (_QWORD *)llvm::BasicBlock::getSinglePredecessor(v33))
      return 0;
    v42 = *(_QWORD *)(v41 + 40);
    if (v42 == v41 + 40)
      return 0;
    result = 0;
    v29 = (_QWORD *)(v42 - 24);
    if (v42)
      v43 = v42 - 24;
    else
      v43 = 0;
    v44 = *(unsigned __int8 *)(v43 + 16) - 40;
    if (v44 < 0xFFFFFFF5)
      v43 = 0;
    if (v42)
    {
      if (*(_BYTE *)(v43 + 16) == 30 && v44 >= 0xFFFFFFF5)
      {
        v46 = *(llvm::BasicBlock **)(v43 - 32);
        v47 = v46 == v23;
        if (v46 == v23)
          v48 = v23;
        else
          v48 = v33;
        *(_QWORD *)a2 = v48;
        if (v47)
          v40 = v33;
        else
          v40 = v23;
        goto LABEL_104;
      }
    }
  }
  return result;
}

void llvm::CreateControlFlowHub(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, uint64_t a6)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  const llvm::APInt *v14;
  llvm::BasicBlock *v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t ****v18;
  uint64_t ***v19;
  uint64_t ***v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ***v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t ****v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  llvm::ValueHandleBase *v35;
  llvm::ValueHandleBase *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  llvm::BasicBlock **v56;
  llvm::BasicBlock *i;
  llvm::BasicBlock *v58;
  uint64_t v59;
  uint64_t v60;
  llvm *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  llvm::Value *v74;
  llvm::PHINode *v75;
  int v77;
  _QWORD *v78;
  int v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  const char *v86;
  int32x2_t *v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  const char **v92;
  const char *v93;
  int v94;
  int v95;
  llvm::Value *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _DWORD *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  llvm::BasicBlock *v117;
  llvm::BasicBlock *v118;
  llvm::Value *v119;
  llvm::BasicBlock *v120;
  _DWORD *v121;
  uint64_t v122;
  llvm::BranchInst *v123;
  _QWORD *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  char *v148;
  char *v149;
  char *v150;
  unint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  unint64_t v156;
  const char *v157;
  int32x2_t *v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  const char **v163;
  const char *v164;
  int v165;
  int v166;
  llvm::ConstantInt *v167;
  llvm::ConstantInt *v168;
  unsigned int v169;
  char v170;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  llvm::Value *v175;
  llvm::Value *v176;
  llvm::BasicBlock **v177;
  uint64_t v178;
  uint64_t v179;
  int v182;
  llvm::BasicBlock *v183;
  unint64_t v184;
  uint64_t v185;
  llvm::BasicBlock *v186;
  llvm::BasicBlock *v187;
  _QWORD v188[2];
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  __int16 v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  _QWORD v201[2];
  __int16 v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(**(_QWORD **)(a3 + 24) + 56);
  v10 = **(_QWORD ***)v9;
  v202 = 773;
  v199 = a5;
  v200 = a6;
  v201[0] = ".guard";
  v11 = operator new();
  *(_QWORD *)v11 = *v10 + 1600;
  *(_QWORD *)(v11 + 8) = 0;
  v174 = (_QWORD *)(v11 + 8);
  v12 = *(_DWORD *)(v11 + 20) & 0xC0000000;
  *(_DWORD *)(v11 + 16) = 22;
  *(_DWORD *)(v11 + 20) = v12;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 40;
  *(_QWORD *)(v11 + 48) = v11 + 40;
  *(_QWORD *)(v11 + 56) = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v9 + 72, (_QWORD *)v11);
  v13 = *(_QWORD *)(v9 + 72);
  v178 = v9 + 72;
  v179 = v9;
  *(_QWORD *)(v11 + 32) = v9 + 72;
  *(_QWORD *)(v11 + 24) = v13;
  *(_QWORD *)(v13 + 8) = v11 + 24;
  *(_QWORD *)(v9 + 72) = v11 + 24;
  llvm::Value::setName((uint64_t ***)v11, (uint64_t)&v199);
  v199 = v201;
  v200 = 0x1000000000;
  v15 = *(llvm::BasicBlock **)(a3 + 24);
  v183 = (llvm::BasicBlock *)v11;
  v172 = a1;
  v173 = a3;
  if (a1)
  {
    v186 = *(llvm::BasicBlock **)(a3 + 32);
    if (v15 != v186)
    {
      v184 = v11 & 0xFFFFFFFFFFFFFFFBLL;
      do
      {
        v16 = *(uint64_t ****)v15;
        v17 = v200;
        if (v200 >= (unint64_t)HIDWORD(v200))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v200 + 1, 16);
          v17 = v200;
        }
        v18 = (uint64_t ****)((char *)v199 + 16 * v17);
        *v18 = v16;
        v18[1] = (uint64_t ***)v184;
        LODWORD(v200) = v200 + 1;
        v19 = (uint64_t ***)v16[5];
        if (v19 != v16 + 5)
        {
          if (v19)
            v20 = v19 - 3;
          else
            v20 = 0;
          v21 = *((unsigned __int8 *)v20 + 16);
          v22 = v21 - 29;
          if (v21 != 30)
          {
            v23 = 2;
            switch(v22)
            {
              case 1:
                __break(1u);
                return;
              case 2:
                v23 = (*((_DWORD *)v20 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_27;
              case 3:
              case 9:
                v23 = (*((_DWORD *)v20 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_27;
              case 4:
                goto LABEL_14;
              case 7:
                v23 = *((_WORD *)v20 + 9) & 1;
                goto LABEL_27;
              case 8:
                v23 = 1;
                goto LABEL_14;
              case 10:
                v23 = *((_DWORD *)v20 + 20) + 1;
LABEL_27:
                if (!v23)
                  goto LABEL_24;
                goto LABEL_14;
              default:
                goto LABEL_24;
            }
          }
          if ((*((_DWORD *)v20 + 5) & 0x7FFFFFF) == 3)
            v23 = 2;
          else
            v23 = 1;
LABEL_14:
          v24 = 0;
          v25 = 0;
          v26 = v20 - 8;
          v27 = v23;
          do
          {
            v28 = *((unsigned __int8 *)v20 + 16);
            if (v28 != 30)
              __asm { BR              X9 }
            v29 = (char *)v20[-4 * v25 - 4];
            v196 = v29;
            v191 = 0;
            if (sub_1C4E36498(a4, &v196, &v191))
            {
              v30 = v200;
              if (v200 >= (unint64_t)HIDWORD(v200))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v200 + 1, 16);
                v30 = v200;
              }
              v31 = (uint64_t ****)((char *)v199 + 16 * v30);
              *v31 = v16;
              v31[1] = (uint64_t ***)((unint64_t)v29 | 4);
              LODWORD(v200) = v200 + 1;
            }
            ++v25;
            v24 += 2;
            v26 += 4;
          }
          while (v27 != v25);
        }
LABEL_24:
        v15 = (llvm::BasicBlock *)((char *)v15 + 8);
        v11 = (uint64_t)v183;
      }
      while (v15 != v186);
      v15 = *(llvm::BasicBlock **)(v173 + 24);
    }
  }
  v188[0] = 0;
  v188[1] = 0;
  v189 = 0;
  v196 = (char *)&v198;
  v197 = 0x800000000;
  v32 = **(uint64_t ****)v15;
  v33 = *v32;
  v34 = **v32;
  v35 = *(llvm::ValueHandleBase **)(v34 + 1560);
  if (!v35)
  {
    v168 = *(llvm::ConstantInt **)(v34 + 1888);
    v169 = *(_DWORD *)(v34 + 1896);
    LODWORD(v192) = v169 >> 8;
    if (v169 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v191, 1, 0);
    }
    else
    {
      if (v169 <= 0xFF)
        v170 = 0;
      else
        v170 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v169);
      v191 = v170 & 1;
    }
    v35 = llvm::ConstantInt::get(v168, (llvm::LLVMContext *)&v191, v14);
    if (v192 >= 0x41 && v191)
      MEMORY[0x1CAA32F9C](v191, 0x1000C8000313F17);
    *(_QWORD *)(v34 + 1560) = v35;
    v34 = *v33;
  }
  v36 = *(llvm::ValueHandleBase **)(v34 + 1568);
  if (!v36)
  {
    v167 = *(llvm::ConstantInt **)(v34 + 1888);
    LODWORD(v192) = *(_DWORD *)(v34 + 1896) >> 8;
    if (v192 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v191, 0, 0);
    else
      v191 = 0;
    v36 = llvm::ConstantInt::get(v167, (llvm::LLVMContext *)&v191, v14);
    if (v192 >= 0x41 && v191)
      MEMORY[0x1CAA32F9C](v191, 0x1000C8000313F17);
    *(_QWORD *)(v34 + 1568) = v36;
  }
  v175 = v36;
  v176 = v35;
  v37 = (unint64_t)(a4[4] - a4[3]) >> 3;
  v38 = (v37 - 1);
  if ((_DWORD)v37 != 1)
  {
    v39 = 0;
    while (1)
    {
      v40 = *(_QWORD *)(a4[3] + 8 * v39);
      v190 = v40;
      if ((*(_BYTE *)(v40 + 23) & 0x10) == 0)
      {
        v50 = 0;
        v51 = &byte_1C871356D;
        goto LABEL_46;
      }
      v41 = ***(_QWORD ***)v40;
      v42 = *(_QWORD *)(v41 + 152);
      v43 = *(unsigned int *)(v41 + 168);
      if (!(_DWORD)v43)
        goto LABEL_44;
      LODWORD(v44) = (v43 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      v45 = (uint64_t *)(v42 + 16 * v44);
      v46 = *v45;
      if (*v45 != v40)
        break;
LABEL_45:
      v49 = (_QWORD *)v45[1];
      v52 = *v49;
      v51 = (char *)(v49 + 2);
      v50 = v52;
LABEL_46:
      v53 = *v33 + 1888;
      v54 = (*(_QWORD *)(v173 + 32) - *(_QWORD *)(v173 + 24)) >> 3;
      v191 = (uint64_t)"Guard.";
      v192 = 6;
      v193 = v51;
      v194 = v50;
      v195 = 1285;
      v55 = sub_1C50B1024(v53, v54, (uint64_t)&v191, v11);
      sub_1C6180A54((uint64_t)v188, &v190)[1] = v55;
      if (++v39 == v38)
        goto LABEL_49;
    }
    v47 = 1;
    while (v46 != -4096)
    {
      v48 = v44 + v47++;
      v44 = v48 & (v43 - 1);
      v46 = *(_QWORD *)(v42 + 16 * v44);
      if (v46 == v40)
      {
        v45 = (uint64_t *)(v42 + 16 * v44);
        goto LABEL_45;
      }
    }
LABEL_44:
    v45 = (uint64_t *)(v42 + 16 * v43);
    goto LABEL_45;
  }
LABEL_49:
  v56 = *(llvm::BasicBlock ***)(v173 + 24);
  v177 = *(llvm::BasicBlock ***)(v173 + 32);
  for (i = (llvm::BasicBlock *)v11; v56 != v177; i = v183)
  {
    v187 = *v56;
    v58 = (llvm::BasicBlock *)*((_QWORD *)*v56 + 5);
    if (v58 == (llvm::BasicBlock *)((char *)*v56 + 40))
    {
      v60 = 0;
    }
    else
    {
      if (v58)
        v59 = (uint64_t)v58 - 24;
      else
        v59 = 0;
      if (*(unsigned __int8 *)(v59 + 16) - 29 >= 0xB)
        v60 = 0;
      else
        v60 = v59;
    }
    if ((*(_DWORD *)(v60 + 20) & 0x7FFFFFF) == 3)
      v61 = *(llvm **)(v60 - 96);
    else
      v61 = 0;
    v63 = (_QWORD *)(v60 - 32);
    v62 = *(_QWORD *)(v60 - 32);
    v190 = 0;
    v191 = v62;
    if (!sub_1C4E36498(a4, &v191, &v190))
      v62 = 0;
    if ((*(_DWORD *)(v60 + 20) & 0x7FFFFFF) == 1
      || ((v64 = (_QWORD *)(v60 - 64),
           v65 = *(_QWORD *)(v60 - 64),
           v190 = 0,
           v191 = v65,
           !sub_1C4E36498(a4, &v191, &v190))
        ? (v66 = 0)
        : (v66 = v65),
          v62 && !v66))
    {
      if (*v63)
      {
        **(_QWORD **)(v60 - 16) = *(_QWORD *)(v60 - 24);
        v67 = *(_QWORD *)(v60 - 24);
        if (v67)
          *(_QWORD *)(v67 + 16) = *(_QWORD *)(v60 - 16);
      }
      *(_QWORD *)(v60 - 32) = i;
      v68 = *((_QWORD *)i + 1);
      *(_QWORD *)(v60 - 24) = v68;
      if (v68)
        *(_QWORD *)(v68 + 16) = v60 - 24;
      v66 = 0;
      *(_QWORD *)(v60 - 16) = v174;
      *v174 = v63;
    }
    else if (v62 || !v66)
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v60 + 40) + 40, (uint64_t ***)v60);
      v99 = *(_QWORD *)(v60 + 24);
      v100 = *(_QWORD **)(v60 + 32);
      *v100 = v99;
      *(_QWORD *)(v99 + 8) = v100;
      *(_QWORD *)(v60 + 24) = 0;
      *(_QWORD *)(v60 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v60);
      v101 = operator new(0x60uLL);
      v101[13] = v101[13] & 0x38000000 | 1;
      *(_QWORD *)v101 = 0;
      *((_QWORD *)v101 + 1) = 0;
      *((_QWORD *)v101 + 2) = 0;
      *((_QWORD *)v101 + 3) = v101 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v101 + 8), i, v187);
    }
    else
    {
      if (*v64)
      {
        **(_QWORD **)(v60 - 48) = *(_QWORD *)(v60 - 56);
        v97 = *(_QWORD *)(v60 - 56);
        if (v97)
          *(_QWORD *)(v97 + 16) = *(_QWORD *)(v60 - 48);
      }
      *(_QWORD *)(v60 - 64) = i;
      v98 = *((_QWORD *)i + 1);
      *(_QWORD *)(v60 - 56) = v98;
      if (v98)
        *(_QWORD *)(v98 + 16) = v60 - 56;
      *(_QWORD *)(v60 - 48) = v174;
      *v174 = v64;
      v66 = v65;
    }
    v185 = ((unint64_t)(a4[4] - a4[3]) >> 3) - 1;
    if (((unint64_t)(a4[4] - a4[3]) >> 3) != 1)
    {
      v69 = 0;
      v70 = 0;
      if (v62)
        v71 = v66 == 0;
      else
        v71 = 1;
      v72 = v71;
      v182 = v72;
      do
      {
        v190 = *(_QWORD *)(a4[3] + 8 * v69);
        v73 = v190;
        v75 = (llvm::PHINode *)sub_1C6180A54((uint64_t)v188, &v190)[1];
        if (v73 == v62 || v73 == v66)
        {
          v77 = (v182 | v70) & 1;
          if (v77)
            v96 = v176;
          else
            v96 = v61;
          v70 |= (v182 | v70) ^ 1;
          if (!v77 && v73 != v62)
          {
            v96 = llvm::invertCondition(v61, v74);
            v191 = 4;
            v192 = 0;
            v193 = (const char *)v61;
            if (v61 != (llvm *)-8192 && v61 != (llvm *)-4096 && v61)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v191);
            v78 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v196, (unint64_t)&v191, 1);
            v79 = v197;
            v80 = &v196[24 * v197];
            *(_QWORD *)v80 = 4;
            *((_QWORD *)v80 + 1) = 0;
            v81 = (unint64_t)(v80 + 8);
            v82 = v78[2];
            *((_QWORD *)v80 + 2) = v82;
            if (v82 != -8192 && v82 != -4096)
            {
              if (v82)
              {
                v83 = *v78 & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)v80 + 1) = *(_QWORD *)v83;
                *(_QWORD *)v83 = v80;
                *(_QWORD *)v80 = v83 | 4;
                v84 = (uint64_t *)*((_QWORD *)v80 + 1);
                if (v84)
                  *v84 = *v84 & 7 | v81;
              }
            }
            LODWORD(v197) = v79 + 1;
            if (v193 != (const char *)-8192 && v193 != (const char *)-4096 && v193)
            {
              v85 = v191 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v191 & 0xFFFFFFFFFFFFFFF8) = v192;
              if (v192)
              {
                *(_QWORD *)v192 = *(_QWORD *)v192 & 7 | v85;
              }
              else
              {
                v86 = v193;
                v87 = ***(int32x2_t ****)v193;
                v88 = (unint64_t)v87[303];
                if (v88 <= v85)
                {
                  v89 = v87[305].u32[0];
                  if (v88 + 16 * v89 > v85)
                  {
                    v90 = v89 - 1;
                    LODWORD(v91) = v90 & ((v193 >> 4) ^ (v193 >> 9));
                    v92 = (const char **)(v88 + 16 * v91);
                    v93 = *v92;
                    if (v193 == *v92)
                    {
LABEL_113:
                      *v92 = (const char *)-8192;
                      v87[304] = vadd_s32(v87[304], (int32x2_t)0x1FFFFFFFFLL);
                      v86 = v193;
                    }
                    else
                    {
                      v94 = 1;
                      while (v93 != (const char *)-4096)
                      {
                        v95 = v91 + v94++;
                        v91 = v95 & v90;
                        v93 = *(const char **)(v88 + 16 * v91);
                        if (v193 == v93)
                        {
                          v92 = (const char **)(v88 + 16 * v91);
                          goto LABEL_113;
                        }
                      }
                    }
                    *((_BYTE *)v86 + 17) &= ~1u;
                  }
                }
              }
            }
            v70 = 1;
          }
        }
        else
        {
          v96 = v175;
        }
        sub_1C477667C(v75, (uint64_t)v96, (uint64_t)v187);
        ++v69;
      }
      while (v69 != v185);
    }
    ++v56;
  }
  v102 = *(unsigned int *)(a2 + 8);
  if (v102 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v102 + 1, 8);
    LODWORD(v102) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v102) = i;
  v103 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v103;
  v104 = a4[4];
  v105 = (unint64_t)(v104 - a4[3]) >> 3;
  v106 = v105 - 2;
  v107 = (uint64_t)i;
  if ((_DWORD)v105 != 2)
  {
    do
    {
      v108 = **(_QWORD ***)v179;
      v195 = 773;
      v191 = (uint64_t)a5;
      v192 = a6;
      v193 = ".guard";
      v109 = operator new();
      *(_QWORD *)v109 = *v108 + 1600;
      *(_QWORD *)(v109 + 8) = 0;
      v110 = *(_DWORD *)(v109 + 20) & 0xC0000000;
      *(_DWORD *)(v109 + 16) = 22;
      *(_DWORD *)(v109 + 20) = v110;
      *(_QWORD *)(v109 + 24) = 0;
      *(_QWORD *)(v109 + 32) = 0;
      *(_QWORD *)(v109 + 40) = v109 + 40;
      *(_QWORD *)(v109 + 48) = v109 + 40;
      *(_QWORD *)(v109 + 56) = 0;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v178, (_QWORD *)v109);
      v111 = *(_QWORD *)(v179 + 72);
      *(_QWORD *)(v109 + 32) = v178;
      *(_QWORD *)(v109 + 24) = v111;
      *(_QWORD *)(v111 + 8) = v109 + 24;
      *(_QWORD *)(v179 + 72) = v109 + 24;
      llvm::Value::setName((uint64_t ***)v109, (uint64_t)&v191);
      v112 = *(unsigned int *)(a2 + 8);
      if (v112 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v112 + 1, 8);
        v112 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v112) = v109;
      v103 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v103;
      --v106;
    }
    while (v106);
    v104 = a4[4];
  }
  v113 = *(_QWORD *)(v104 - 8);
  if (v103 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v103 + 1, 8);
    v103 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v103) = v113;
  v114 = *(unsigned int *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v114 + 1;
  if ((_DWORD)v114)
  {
    v115 = 0;
    do
    {
      v116 = v115;
      v117 = *(llvm::BasicBlock **)(a4[3] + 8 * v115);
      v191 = (uint64_t)v117;
      ++v115;
      v118 = *(llvm::BasicBlock **)(*(_QWORD *)a2 + 8 * v115);
      v119 = (llvm::Value *)sub_1C6180A54((uint64_t)v188, &v191)[1];
      v120 = *(llvm::BasicBlock **)(*(_QWORD *)a2 + 8 * v116);
      v121 = operator new(0xA0uLL);
      v122 = 0;
      v123 = (llvm::BranchInst *)(v121 + 24);
      v121[29] = v121[29] & 0x38000000 | 3;
      do
      {
        v124 = &v121[v122];
        *v124 = 0;
        v124[1] = 0;
        v124[2] = 0;
        v124[3] = v123;
        v122 += 8;
      }
      while (v122 != 24);
      llvm::BranchInst::BranchInst(v123, v117, v118, v119, v120);
    }
    while (v115 != v114);
    v125 = *(_DWORD *)(a2 + 8) - 1;
    *(_DWORD *)(a2 + 8) = v125;
    if (v125)
    {
      v126 = 0;
      v127 = 8 * v125;
      i = (llvm::BasicBlock *)v107;
      do
      {
        sub_1C5EC1D30(*(_QWORD *)(a4[3] + v126), *(_QWORD *)(*(_QWORD *)a2 + v126), v173, v107);
        v126 += 8;
      }
      while (v127 != v126);
      v128 = *(unsigned int *)(a2 + 8);
    }
    else
    {
      v128 = 0;
      i = (llvm::BasicBlock *)v107;
    }
  }
  else
  {
    v128 = 0;
    *(_DWORD *)(a2 + 8) = 0;
  }
  sub_1C5EC1D30(*(_QWORD *)(a4[4] - 8), *(_QWORD *)(*(_QWORD *)a2 + 8 * v128 - 8), v173, (uint64_t)i);
  if (v172)
  {
    v129 = *(int *)(a2 + 8);
    v130 = v200;
    v131 = v129 - 1;
    if ((_DWORD)v129 != 1)
    {
      v132 = 0;
      do
      {
        v133 = *(_QWORD *)(*(_QWORD *)a2 + v132);
        v134 = *(_QWORD *)(a4[3] + v132);
        if (v130 >= HIDWORD(v200))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v130 + 1, 16);
          v130 = v200;
        }
        v135 = (char *)v199 + 16 * v130;
        *v135 = v133;
        v135[1] = v134 & 0xFFFFFFFFFFFFFFFBLL;
        v136 = (v200 + 1);
        LODWORD(v200) = v136;
        v137 = (uint64_t *)(*(_QWORD *)a2 + v132);
        v138 = *v137;
        v139 = v137[1];
        if (v136 >= HIDWORD(v200))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v136 + 1, 16);
          LODWORD(v136) = v200;
        }
        v140 = (char *)v199 + 16 * v136;
        *v140 = v138;
        v140[1] = v139 & 0xFFFFFFFFFFFFFFFBLL;
        v130 = v200 + 1;
        LODWORD(v200) = v200 + 1;
        v132 += 8;
      }
      while (8 * (v129 - 1) != v132);
    }
    v141 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v131);
    v142 = *(_QWORD *)(a4[3] + 8 * v131) & 0xFFFFFFFFFFFFFFFBLL;
    if (v130 >= HIDWORD(v200))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v130 + 1, 16);
      v130 = v200;
    }
    v143 = (char *)v199 + 16 * v130;
    *v143 = v141;
    v143[1] = v142;
    v144 = (v200 + 1);
    LODWORD(v200) = v144;
    v145 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v131);
    v146 = *(_QWORD *)(a4[3] + 8 * v129) & 0xFFFFFFFFFFFFFFFBLL;
    if (v144 >= HIDWORD(v200))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v144 + 1, 16);
      LODWORD(v144) = v200;
    }
    v147 = (char *)v199 + 16 * v144;
    *v147 = v145;
    v147[1] = v146;
    LODWORD(v200) = v200 + 1;
    llvm::DomTreeUpdater::applyUpdates(v172, (unint64_t *)v199, v200);
  }
  if ((_DWORD)v197)
  {
    v148 = v196;
    v149 = &v196[24 * v197];
    do
    {
      v191 = 4;
      v192 = 0;
      v150 = (char *)*((_QWORD *)v148 + 2);
      v193 = v150;
      if (v150 != (char *)-8192 && v150 != (char *)-4096 && v150 != 0)
      {
        v152 = *(_QWORD *)v148 & 0xFFFFFFFFFFFFFFF8;
        v192 = *(_QWORD *)v152;
        *(_QWORD *)v152 = &v191;
        v191 = v152 | 4;
        if (v192)
          *(_QWORD *)v192 = *(_QWORD *)v192 & 7 | (unint64_t)&v192;
        v150 = (char *)v193;
      }
      if (!*((_QWORD *)v150 + 1) && v150[16] >= 0x1Cu)
      {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v150 + 5) + 40, (uint64_t ***)v150);
        v153 = *((_QWORD *)v150 + 3);
        v154 = (_QWORD *)*((_QWORD *)v150 + 4);
        *v154 = v153;
        *(_QWORD *)(v153 + 8) = v154;
        *((_QWORD *)v150 + 3) = 0;
        *((_QWORD *)v150 + 4) = 0;
        llvm::Value::deleteValue((llvm::Value *)v150);
        v150 = (char *)v193;
      }
      if (v150 != (char *)-8192 && v150 != (char *)-4096 && v150 != 0)
      {
        v156 = v191 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v191 & 0xFFFFFFFFFFFFFFF8) = v192;
        if (v192)
        {
          *(_QWORD *)v192 = *(_QWORD *)v192 & 7 | v156;
        }
        else
        {
          v157 = v193;
          v158 = ***(int32x2_t ****)v193;
          v159 = (unint64_t)v158[303];
          if (v159 <= v156)
          {
            v160 = v158[305].u32[0];
            if (v159 + 16 * v160 > v156)
            {
              v161 = v160 - 1;
              LODWORD(v162) = v161 & ((v193 >> 4) ^ (v193 >> 9));
              v163 = (const char **)(v159 + 16 * v162);
              v164 = *v163;
              if (v193 == *v163)
              {
LABEL_191:
                *v163 = (const char *)-8192;
                v158[304] = vadd_s32(v158[304], (int32x2_t)0x1FFFFFFFFLL);
                v157 = v193;
              }
              else
              {
                v165 = 1;
                while (v164 != (const char *)-4096)
                {
                  v166 = v162 + v165++;
                  v162 = v166 & v161;
                  v164 = *(const char **)(v159 + 16 * v162);
                  if (v193 == v164)
                  {
                    v163 = (const char **)(v159 + 16 * v162);
                    goto LABEL_191;
                  }
                }
              }
              *((_BYTE *)v157 + 17) &= ~1u;
            }
          }
        }
      }
      v148 += 24;
    }
    while (v148 != v149);
  }
  sub_1C4EE4F14(&v196);
  MEMORY[0x1CAA32FB4](v188[0], 8);
  if (v199 != v201)
    free(v199);
}

void sub_1C5EC1D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  llvm::UndefValue *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  llvm::Value *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  llvm::Type *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::ValueSymbolTable *v49;
  uint64_t v51;
  _QWORD v53[4];
  __int16 v54;

  v4 = *(_QWORD *)(a1 + 48);
  v51 = a1 + 40;
  if (v4 != a1 + 40)
  {
    while (1)
    {
      if (v4)
        v7 = v4 - 24;
      else
        v7 = 0;
      if (*(_BYTE *)(v7 + 16) != 83)
        return;
      v8 = *(llvm::UndefValue **)v7;
      if ((*(_BYTE *)(v7 + 23) & 0x10) != 0)
        break;
      v18 = 0;
      v19 = &byte_1C871356D;
LABEL_15:
      v21 = *(_QWORD *)(a3 + 24);
      v22 = *(_QWORD *)(a3 + 32);
      v54 = 773;
      v53[0] = v19;
      v53[1] = v18;
      v53[2] = ".moved";
      v23 = *(uint64_t **)(a4 + 40);
      v24 = operator new(0x48uLL);
      v25 = v24;
      v24[1] = v8;
      v26 = (llvm::Value *)(v24 + 1);
      *v24 = 0;
      v24[2] = 0;
      v24[3] = 0x4000000000000053;
      *((_OWORD *)v24 + 2) = 0u;
      v27 = (char *)(v24 + 4);
      *((_OWORD *)v24 + 3) = 0u;
      *((_DWORD *)v24 + 16) = 0;
      if (v23)
      {
        v46 = v23[2];
        v24[6] = v46;
        *(_WORD *)(v46 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v24 + 31) & 0x10) != 0)
        {
          v48 = *(_QWORD *)(v46 + 56);
          if (v48)
          {
            v49 = *(llvm::ValueSymbolTable **)(v48 + 104);
            if (v49)
              llvm::ValueSymbolTable::reinsertValue(v49, v26);
          }
        }
        v47 = *v23;
        v25[4] = *v23;
        v25[5] = v23;
        *(_QWORD *)(v47 + 8) = v27;
        *v23 = (uint64_t)v27;
      }
      *((_DWORD *)v25 + 17) = (unint64_t)(v22 - v21) >> 3;
      llvm::Value::setName((uint64_t ***)v26, (uint64_t)v53);
      v28 = *((unsigned int *)v25 + 17);
      v29 = operator new(40 * v28);
      *v25 = v29;
      if ((_DWORD)v28)
      {
        v31 = &v29[4 * v28];
        do
        {
          *v29 = 0;
          v29[1] = 0;
          v29[2] = 0;
          v29[3] = v26;
          v29 += 4;
        }
        while (v29 != v31);
      }
      v33 = *(uint64_t **)(a3 + 24);
      v32 = *(uint64_t **)(a3 + 32);
      while (v33 != v32)
      {
        v34 = *v33;
        v35 = (uint64_t)llvm::UndefValue::get(*(llvm::UndefValue **)v7, v30);
        v36 = (uint64_t)v26;
        if (v34 != a1)
        {
          v37 = *(_DWORD *)(v7 + 20);
          v38 = v37 & 0x7FFFFFF;
          if ((v37 & 0x7FFFFFF) != 0)
          {
            v39 = v37 & 0x7FFFFFF;
            v40 = 32 * *(unsigned int *)(v7 + 60);
            while (1)
            {
              v41 = v7 - 32 * v38;
              if ((v37 & 0x40000000) != 0)
                v41 = *(_QWORD *)(v7 - 8);
              if (*(_QWORD *)(v41 + v40) == v34)
                break;
              v40 += 8;
              if (!--v39)
                goto LABEL_36;
            }
            v42 = 0;
            while (1)
            {
              v43 = v7 - 32 * v38;
              if ((v37 & 0x40000000) != 0)
                v43 = *(_QWORD *)(v7 - 8);
              if (*(_QWORD *)(v43 + 32 * *(unsigned int *)(v7 + 60) + 8 * v42) == v34)
                break;
              if (v38 == ++v42)
              {
                LODWORD(v42) = -1;
                break;
              }
            }
            v35 = llvm::PHINode::removeIncomingValue((llvm::PHINode *)v7, v42, 0);
          }
LABEL_36:
          v36 = v35;
        }
        sub_1C477667C(v26, v36, v34);
        ++v33;
      }
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 0)
      {
        sub_1C477667C((llvm::PHINode *)v7, (uint64_t)v26, a2);
        v4 = *(_QWORD *)(v4 + 8);
      }
      else
      {
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, v26, (llvm::Value *)1);
        v4 = *(_QWORD *)(v7 + 32);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v7 + 40) + 40, (uint64_t ***)v7);
        v44 = *(_QWORD *)(v7 + 24);
        v45 = *(_QWORD **)(v7 + 32);
        *v45 = v44;
        *(_QWORD *)(v44 + 8) = v45;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v7);
      }
      if (v4 == v51)
        return;
    }
    v9 = **(_QWORD **)v8;
    v10 = *(_QWORD *)(v9 + 152);
    v11 = *(unsigned int *)(v9 + 168);
    if ((_DWORD)v11)
    {
      LODWORD(v12) = (v11 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v13 = (uint64_t *)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 == v7)
      {
LABEL_14:
        v17 = (_QWORD *)v13[1];
        v20 = *v17;
        v19 = (char *)(v17 + 2);
        v18 = v20;
        goto LABEL_15;
      }
      v15 = 1;
      while (v14 != -4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v14 = *(_QWORD *)(v10 + 16 * v12);
        if (v14 == v7)
        {
          v13 = (uint64_t *)(v10 + 16 * v12);
          goto LABEL_14;
        }
      }
    }
    v13 = (uint64_t *)(v10 + 16 * v11);
    goto LABEL_14;
  }
}

uint64_t sub_1C5EC2054(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  if (!a2)
  {
    v9 = 0;
    result = 0;
    goto LABEL_5;
  }
  v7 = a2 - 1;
  v8 = sub_1C50FD958(a3) & (a2 - 1);
  v9 = a1 + 96 * v8;
  if (sub_1C50FDDD0((uint64_t)a3, v9))
  {
    result = 1;
    goto LABEL_5;
  }
  v11 = 0;
  v12 = 1;
  while (1)
  {
    if (*(_QWORD *)v9)
      goto LABEL_8;
    if (!*(_BYTE *)(v9 + 24))
      break;
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      v13 = *(_QWORD *)(v9 + 32) == 0;
      goto LABEL_9;
    }
LABEL_8:
    v13 = 0;
LABEL_9:
    if (v13 && v11 == 0)
      v11 = v9;
    v14 = v12 + 1;
    v8 = (v8 + v12) & v7;
    v9 = a1 + 96 * v8;
    v15 = sub_1C50FDDD0((uint64_t)a3, v9);
    result = 1;
    v12 = v14;
    if (v15)
      goto LABEL_5;
  }
  if (*(_QWORD *)(v9 + 32))
    goto LABEL_8;
  result = 0;
  if (v11)
    v9 = v11;
LABEL_5:
  *a4 = v9;
  return result;
}

char *sub_1C5EC216C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(96 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[96 * v10];
      do
      {
        *(_QWORD *)result = 0;
        result[8] = 0;
        result[24] = 0;
        *((_QWORD *)result + 4) = 0;
        result += 96;
      }
      while (result != v11);
    }
    if (!(_DWORD)v3)
LABEL_34:
      JUMPOUT(0x1CAA32FB4);
    v12 = 0;
    v13 = 96 * v3;
    while (1)
    {
      v14 = (__int128 *)(v4 + v12);
      if (!*(_QWORD *)(v4 + v12)
        && (!*((_BYTE *)v14 + 24) || *(_OWORD *)(v4 + v12 + 8) == 0)
        && !*((_QWORD *)v14 + 4))
      {
        goto LABEL_24;
      }
      v27 = 0;
      sub_1C5EC2054(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t *)(v4 + v12), &v27);
      v15 = v27;
      v16 = *v14;
      v17 = v14[1];
      *(_QWORD *)(v27 + 32) = *((_QWORD *)v14 + 4);
      *(_OWORD *)v15 = v16;
      *(_OWORD *)(v15 + 16) = v17;
      v18 = (void *)(v15 + 56);
      *(_QWORD *)(v15 + 40) = v15 + 56;
      *(_QWORD *)(v15 + 48) = 0x400000000;
      v19 = (void *)*((_QWORD *)v14 + 5);
      if (v14 != (__int128 *)v15)
      {
        v20 = *((unsigned int *)v14 + 12);
        if ((_DWORD)v20)
          break;
      }
LABEL_22:
      *(_QWORD *)(v15 + 88) = *(_QWORD *)(v4 + v12 + 88);
      ++*(_DWORD *)(a1 + 8);
      if ((void *)(v4 + v12 + 56) != v19)
        free(v19);
LABEL_24:
      v12 += 96;
      if (v13 == v12)
        goto LABEL_34;
    }
    v21 = v4 + v12;
    v22 = v4 + v12 + 56;
    if ((void *)v22 != v19)
    {
      *(_QWORD *)(v15 + 40) = v19;
      v24 = *(_DWORD *)(v21 + 52);
      *(_DWORD *)(v15 + 48) = v20;
      *(_DWORD *)(v15 + 52) = v24;
      *((_QWORD *)v14 + 5) = v22;
      *(_DWORD *)(v21 + 52) = 0;
      v19 = (void *)(v4 + v12 + 56);
      goto LABEL_21;
    }
    if (v20 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15 + 40, v15 + 56, v20, 8);
      v23 = *((unsigned int *)v14 + 12);
      if (!(_DWORD)v23)
        goto LABEL_20;
      v19 = (void *)*((_QWORD *)v14 + 5);
      v18 = *(void **)(v15 + 40);
    }
    else
    {
      v23 = *((unsigned int *)v14 + 12);
    }
    memcpy(v18, v19, 8 * v23);
LABEL_20:
    *(_DWORD *)(v15 + 48) = v20;
    v19 = (void *)*((_QWORD *)v14 + 5);
LABEL_21:
    *((_DWORD *)v14 + 12) = 0;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v25 = *(_DWORD *)(a1 + 16);
  if (v25)
  {
    v26 = &result[96 * v25];
    do
    {
      *(_QWORD *)result = 0;
      result[8] = 0;
      result[24] = 0;
      *((_QWORD *)result + 4) = 0;
      result += 96;
    }
    while (result != v26);
  }
  return result;
}

void sub_1C5EC23D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, llvm::DomTreeUpdater *a5, uint64_t a6, uint64_t a7, llvm::MemorySSAUpdater *a8, char a9, _BYTE *a10)
{
  uint64_t v11;
  llvm::BasicBlock *v15;
  llvm::Function *v16;
  uint64_t v17;
  llvm::BasicBlock *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  char v37;
  uint64_t *v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t DomTree;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  int v88;
  _BYTE v89[64];
  void *v90;
  uint64_t v91;
  _QWORD v92[18];

  v11 = a7;
  v15 = (llvm::BasicBlock *)a2;
  v92[16] = *MEMORY[0x1E0C80C00];
  DomTree = a6;
  if (a5)
  {
    v16 = *(llvm::Function **)(a2 + 56);
    v17 = *((_QWORD *)v16 + 10);
    if (v17)
      v18 = (llvm::BasicBlock *)(v17 - 24);
    else
      v18 = 0;
    if (v18 == v15 && *((_QWORD *)a5 + 36))
    {
      llvm::DomTreeUpdater::recalculate(a5, v16);
    }
    else
    {
      v90 = v92;
      v85 = v89;
      v86 = v89;
      v87 = 8;
      v88 = 0;
      v92[0] = v15;
      v92[1] = a1 & 0xFFFFFFFFFFFFFFFBLL;
      v91 = 0x800000001;
      v19 = (2 * a4) | 1;
      if (v19 >= 9)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, v19, 16);
      if (a4)
      {
        v20 = 8 * a4;
        v21 = a3;
        do
        {
          v22 = *v21;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v85, *v21);
          if (v23)
          {
            v24 = v91;
            if (v91 >= (unint64_t)HIDWORD(v91))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, v91 + 1, 16);
              v24 = v91;
            }
            v25 = (uint64_t *)((char *)v90 + 16 * v24);
            *v25 = v22;
            v25[1] = a2 & 0xFFFFFFFFFFFFFFFBLL;
            v26 = (v91 + 1);
            LODWORD(v91) = v26;
            if (v26 >= HIDWORD(v91))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, v26 + 1, 16);
              LODWORD(v26) = v91;
            }
            v27 = (uint64_t *)((char *)v90 + 16 * v26);
            *v27 = v22;
            v27[1] = a1 | 4;
            LODWORD(v91) = v91 + 1;
          }
          ++v21;
          v20 -= 8;
        }
        while (v20);
      }
      llvm::DomTreeUpdater::applyUpdates((uint64_t)a5, (unint64_t *)v90, v91);
      if (v86 != v85)
        free(v86);
      v15 = (llvm::BasicBlock *)a2;
      if (v90 != v92)
        free(v90);
      v11 = a7;
    }
  }
  else if (a6)
  {
    if (**(_QWORD **)(a6 + 48) == a1)
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::setNewRoot(a6, a2);
    else
      sub_1C53B3EC4(a6, a2);
  }
  if (a8)
    llvm::MemorySSAUpdater::wireOldPredecessorsToNewImmediatePredecessor(a8, (llvm::BasicBlock *)a1, v15, a3, a4, 1);
  if (!v11)
    return;
  if (a5)
  {
    v28 = a1;
    if (*((_QWORD *)a5 + 36))
      DomTree = llvm::DomTreeUpdater::getDomTree(a5);
  }
  else
  {
    v28 = a1;
  }
  v29 = *(_DWORD *)(v11 + 16);
  if (!v29)
    goto LABEL_39;
  v30 = *(_QWORD *)v11;
  v31 = v29 - 1;
  v32 = (v29 - 1) & ((v28 >> 4) ^ (v28 >> 9));
  v33 = *(_QWORD *)(*(_QWORD *)v11 + 16 * v32);
  if (v33 != v28)
  {
    v34 = 1;
    while (v33 != -4096)
    {
      v35 = v32 + v34++;
      v32 = v35 & v31;
      v33 = *(_QWORD *)(v30 + 16 * v32);
      if (v33 == v28)
        goto LABEL_38;
    }
LABEL_39:
    v36 = 0;
    goto LABEL_40;
  }
LABEL_38:
  v36 = *(_QWORD **)(v30 + 16 * v32 + 8);
LABEL_40:
  v37 = v36 != 0;
  v38 = &a3[a4];
  v80 = a4;
  v39 = 0;
  if (a4)
  {
    v40 = a3;
    v41 = DomTree;
    do
    {
      v42 = *v40;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v41, *v40))
      {
        if (a9)
        {
          v43 = *(_DWORD *)(v11 + 16);
          if (v43)
          {
            v44 = *(_QWORD *)v11;
            v45 = v43 - 1;
            v46 = (v43 - 1) & ((v42 >> 4) ^ (v42 >> 9));
            v47 = *(_QWORD *)(*(_QWORD *)v11 + 16 * v46);
            if (v42 == v47)
            {
LABEL_49:
              v50 = *(_QWORD *)(v44 + 16 * v46 + 8);
              if (v50)
              {
                v51 = sub_1C477672C(v50 + 56, a1);
                v52 = *(_QWORD *)(v50 + 64);
                v53 = 72;
                if (v52 == *(_QWORD *)(v50 + 56))
                  v53 = 76;
                if (v51 == (_QWORD *)(v52 + 8 * *(unsigned int *)(v50 + v53)))
                  *a10 = 1;
              }
            }
            else
            {
              v48 = 1;
              while (v47 != -4096)
              {
                v49 = v46 + v48++;
                v46 = v49 & v45;
                v47 = *(_QWORD *)(v44 + 16 * v46);
                if (v42 == v47)
                  goto LABEL_49;
              }
            }
          }
        }
        if (v36)
        {
          v54 = sub_1C477672C((uint64_t)(v36 + 7), v42);
          v55 = v36[8];
          v56 = 72;
          if (v55 == v36[7])
            v56 = 76;
          v57 = v54 == (_QWORD *)(v55 + 8 * *(unsigned int *)((char *)v36 + v56));
          v39 |= v57;
          v37 &= v57;
        }
        v41 = DomTree;
      }
      ++v40;
    }
    while (v40 != v38);
  }
  if (v36)
  {
    if ((v37 & 1) != 0)
    {
      if (v80)
      {
        v58 = 0;
        do
        {
          v59 = *(_DWORD *)(v11 + 16);
          if (v59)
          {
            v60 = *(_QWORD *)v11;
            v61 = v59 - 1;
            v62 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v59 - 1);
            v63 = *(_QWORD *)(*(_QWORD *)v11 + 16 * (((*a3 >> 4) ^ (*a3 >> 9)) & v61));
            if (*a3 == v63)
            {
LABEL_69:
              v66 = *(_QWORD **)(v60 + 16 * v62 + 8);
              if (v66)
              {
                while (1)
                {
                  v67 = sub_1C477672C((uint64_t)(v66 + 7), a1);
                  v68 = v66[8];
                  v69 = v68 == v66[7] ? 76 : 72;
                  if (v67 != (_QWORD *)(v68 + 8 * *(unsigned int *)((char *)v66 + v69)))
                    break;
                  v66 = (_QWORD *)*v66;
                  if (!v66)
                    goto LABEL_87;
                }
                v70 = sub_1C477672C((uint64_t)(v66 + 7), a1);
                v71 = v66[8];
                if (v71 == v66[7])
                  v72 = 76;
                else
                  v72 = 72;
                if (v70 != (_QWORD *)(v71 + 8 * *(unsigned int *)((char *)v66 + v72)))
                {
                  if (!v58)
                    goto LABEL_86;
                  v73 = 0;
                  v74 = v58;
                  do
                  {
                    v74 = (_QWORD *)*v74;
                    ++v73;
                  }
                  while (v74);
                  v75 = v66;
                  do
                  {
                    v75 = (_QWORD *)*v75;
                    LODWORD(v74) = (_DWORD)v74 + 1;
                  }
                  while (v75);
                  if (v73 < v74)
LABEL_86:
                    v58 = v66;
                }
              }
            }
            else
            {
              v64 = 1;
              while (v63 != -4096)
              {
                v65 = v62 + v64++;
                v62 = v65 & v61;
                v63 = *(_QWORD *)(v60 + 16 * v62);
                if (*a3 == v63)
                  goto LABEL_69;
              }
            }
          }
LABEL_87:
          ++a3;
        }
        while (a3 != v38);
        if (v58)
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v58, a2, v11);
      }
    }
    else
    {
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v36, a2, v11);
      if ((v39 & 1) != 0)
      {
        v76 = (_QWORD *)v36[4];
        if (*v76 != a2)
        {
          v77 = 0;
          do
          {
            v78 = v77;
            v79 = v76[v77++];
          }
          while (v79 != a2);
          v76[v78] = *v76;
          *(_QWORD *)v36[4] = a2;
        }
      }
    }
  }
}

void sub_1C5EC29A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  int v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  BOOL v37;
  uint64_t **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::ValueSymbolTable *v68;
  uint64_t *v69;
  _QWORD v72[4];
  __int16 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  _BYTE v78[136];

  v7 = a4;
  v74 = v78;
  v75 = v78;
  v76 = 16;
  v77 = 0;
  if (a4)
  {
    v10 = 8 * a4;
    v11 = a3;
    do
    {
      v12 = *v11++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v74, v12);
      v10 -= 8;
    }
    while (v10);
  }
  v13 = *(_QWORD *)(a1 + 48);
  v14 = v13 - 24;
  if (v13)
    v15 = v13 - 24;
  else
    v15 = 0;
  if (*(_BYTE *)(v15 + 16) == 83)
  {
    v69 = (uint64_t *)(a5 + 24);
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if ((a6 & 1) == 0)
      {
        v16 = *(_DWORD *)(v14 + 20);
        v17 = v16 & 0x7FFFFFF;
        if ((v16 & 0x7FFFFFF) != 0)
        {
          v18 = 0;
          while (1)
          {
            v19 = v14 - 32 * v17;
            if ((v16 & 0x40000000) != 0)
              v19 = *(_QWORD *)(v14 - 8);
            if (*(_QWORD *)(v19 + 32 * *(unsigned int *)(v14 + 60) + 8 * v18) == *a3)
              break;
            if (v17 == ++v18)
              goto LABEL_16;
          }
        }
        else
        {
LABEL_16:
          LODWORD(v18) = -1;
        }
        if ((v16 & 0x40000000) != 0)
          v20 = *(_QWORD *)(v14 - 8);
        else
          v20 = v14 - 32 * v17;
        v21 = *(llvm::Value **)(v20 + 32 * v18);
        if ((_DWORD)v17)
        {
          v22 = 0;
          v23 = 0;
          v24 = 8 * v17;
          do
          {
            v25 = *(_DWORD *)(v14 + 20);
            if ((v25 & 0x40000000) != 0)
              v26 = *(_QWORD *)(v14 - 8);
            else
              v26 = v14 - 32 * (v25 & 0x7FFFFFF);
            v27 = (char *)sub_1C477672C((uint64_t)&v74, *(_QWORD *)(v26 + 32 * *(unsigned int *)(v14 + 60) + v23));
            if (v75 == v74)
              v28 = (uint64_t *)((char *)&v76 + 4);
            else
              v28 = &v76;
            if (v27 != &v75[8 * *(unsigned int *)v28])
            {
              v29 = *(_DWORD *)(v14 + 20);
              if (v21)
              {
                if ((v29 & 0x40000000) != 0)
                  v30 = *(_QWORD *)(v14 - 8);
                else
                  v30 = v14 - 32 * (v29 & 0x7FFFFFF);
                if (v21 != *(llvm::Value **)(v30 + v22))
                  goto LABEL_52;
              }
              else
              {
                if ((v29 & 0x40000000) != 0)
                  v31 = *(_QWORD *)(v14 - 8);
                else
                  v31 = v14 - 32 * (v29 & 0x7FFFFFF);
                v21 = *(llvm::Value **)(v31 + v22);
              }
            }
            v23 += 8;
            v22 += 32;
          }
          while (v24 != v23);
        }
        if (v21)
        {
          v32 = (*(_DWORD *)(v14 + 20) & 0x7FFFFFFu) - 1;
          do
          {
            v33 = *(_DWORD *)(v14 + 20);
            if ((v33 & 0x40000000) != 0)
              v34 = *(_QWORD *)(v14 - 8);
            else
              v34 = v14 - 32 * (v33 & 0x7FFFFFF);
            v35 = (char *)sub_1C477672C((uint64_t)&v74, *(_QWORD *)(v34 + 32 * *(unsigned int *)(v14 + 60) + 8 * v32));
            if (v75 == v74)
              v36 = (uint64_t *)((char *)&v76 + 4);
            else
              v36 = &v76;
            if (v35 != &v75[8 * *(unsigned int *)v36])
              llvm::PHINode::removeIncomingValue((llvm::PHINode *)v14, v32, 0);
            v37 = v32-- <= 0;
          }
          while (!v37);
          goto LABEL_76;
        }
      }
LABEL_52:
      v38 = *(uint64_t ***)v14;
      if ((*(_BYTE *)(v14 + 23) & 0x10) == 0)
      {
        v48 = 0;
        v49 = &byte_1C871356D;
        goto LABEL_61;
      }
      v39 = **v38;
      v40 = *(_QWORD *)(v39 + 152);
      v41 = *(unsigned int *)(v39 + 168);
      if (!(_DWORD)v41)
        goto LABEL_59;
      LODWORD(v42) = (v41 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v43 = (uint64_t *)(v40 + 16 * v42);
      v44 = *v43;
      if (*v43 != v14)
        break;
LABEL_60:
      v47 = (_QWORD *)v43[1];
      v50 = *v47;
      v49 = (char *)(v47 + 2);
      v48 = v50;
LABEL_61:
      v73 = 773;
      v72[0] = v49;
      v72[1] = v48;
      v72[2] = ".ph";
      v51 = operator new(0x48uLL);
      v52 = v51;
      v51[1] = v38;
      v21 = (llvm::Value *)(v51 + 1);
      *v51 = 0;
      v51[2] = 0;
      v51[3] = 0x4000000000000053;
      *((_OWORD *)v51 + 2) = 0u;
      v53 = (char *)(v51 + 4);
      *((_OWORD *)v51 + 3) = 0u;
      *((_DWORD *)v51 + 16) = 0;
      if (a5)
      {
        v65 = *(_QWORD *)(a5 + 40);
        v51[6] = v65;
        *(_WORD *)(v65 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v51 + 31) & 0x10) != 0)
        {
          v67 = *(_QWORD *)(v65 + 56);
          if (v67)
          {
            v68 = *(llvm::ValueSymbolTable **)(v67 + 104);
            if (v68)
              llvm::ValueSymbolTable::reinsertValue(v68, v21);
          }
        }
        v66 = *v69;
        v52[4] = *v69;
        v52[5] = v69;
        *(_QWORD *)(v66 + 8) = v53;
        *v69 = (uint64_t)v53;
      }
      *((_DWORD *)v52 + 17) = v7;
      llvm::Value::setName((uint64_t ***)v21, (uint64_t)v72);
      v54 = *((unsigned int *)v52 + 17);
      v55 = operator new(40 * v54);
      *v52 = v55;
      if ((_DWORD)v54)
      {
        v56 = &v55[4 * v54];
        do
        {
          *v55 = 0;
          v55[1] = 0;
          v55[2] = 0;
          v55[3] = v21;
          v55 += 4;
        }
        while (v55 != v56);
      }
      v57 = (*(_DWORD *)(v14 + 20) & 0x7FFFFFFu) - 1;
      do
      {
        v58 = *(_DWORD *)(v14 + 20);
        if ((v58 & 0x40000000) != 0)
          v59 = *(_QWORD *)(v14 - 8);
        else
          v59 = v14 - 32 * (v58 & 0x7FFFFFF);
        v60 = *(_QWORD *)(v59 + 32 * *(unsigned int *)(v14 + 60) + 8 * v57);
        v61 = (char *)sub_1C477672C((uint64_t)&v74, v60);
        if (v75 == v74)
          v62 = (uint64_t *)((char *)&v76 + 4);
        else
          v62 = &v76;
        if (v61 != &v75[8 * *(unsigned int *)v62])
        {
          v63 = llvm::PHINode::removeIncomingValue((llvm::PHINode *)v14, v57, 0);
          sub_1C477667C(v21, v63, v60);
        }
        v37 = v57-- <= 0;
      }
      while (!v37);
LABEL_76:
      sub_1C477667C((llvm::PHINode *)v14, (uint64_t)v21, a2);
      v14 = v13 - 24;
      if (v13)
        v64 = v13 - 24;
      else
        v64 = 0;
      if (*(_BYTE *)(v64 + 16) != 83)
        goto LABEL_88;
    }
    v45 = 1;
    while (v44 != -4096)
    {
      v46 = v42 + v45++;
      v42 = v46 & (v41 - 1);
      v44 = *(_QWORD *)(v40 + 16 * v42);
      if (v44 == v14)
      {
        v43 = (uint64_t *)(v40 + 16 * v42);
        goto LABEL_60;
      }
    }
LABEL_59:
    v43 = (uint64_t *)(v40 + 16 * v41);
    goto LABEL_60;
  }
LABEL_88:
  if (v75 != v74)
    free(v75);
}

uint64_t sub_1C5EC2E50()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  v3 = 8;
  v4 = &v3;
  v2 = 1;
  *(_QWORD *)&v1 = "Set the maximum path length when checking whether a basic block is followed by a block that either ha"
                   "s a terminating deoptimizing call or is terminated with an unreachable";
  *((_QWORD *)&v1 + 1) = 171;
  sub_1C63A64D0(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED837190, &dword_1C475E000);
}

uint64_t sub_1C5EC2EBC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Break critical edges in CFG";
  *(_QWORD *)(v2 + 8) = 27;
  *(_QWORD *)(v2 + 16) = "break-crit-edges";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7638;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5EC4C98;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5EC2F4C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F7638;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A8E68;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837250);
  if (v3 != -1)
  {
    v7[0] = sub_1C5EC2EBC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837250, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::BreakCriticalEdgesPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t CachedResultImpl;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v12[4];
  int v13;
  char v14;

  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a1);
  if (CachedResultImpl)
    v7 = CachedResultImpl + 8;
  else
    v7 = 0;
  v8 = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::LoopAnalysis::Key, a1);
  v9 = v8 + 8;
  v12[0] = v7;
  v12[1] = 0;
  if (!v8)
    v9 = 0;
  v12[2] = v9;
  v12[3] = 0;
  v13 = 0;
  v14 = 1;
  v10 = llvm::SplitAllCriticalEdges(a1, (uint64_t)v12);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if (!v10)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  return sub_1C4DDB144(a3, (uint64_t)&llvm::LoopAnalysis::Key);
}

uint64_t llvm::SplitCriticalEdge(llvm::Instruction *a1, unsigned int a2, uint64_t a3, llvm::Twine *a4)
{
  int v8;
  uint64_t Successor;

  v8 = *(unsigned __int8 *)(a3 + 32);
  Successor = llvm::Instruction::getSuccessor(a1, a2);
  if (llvm::isCriticalEdge((uint64_t)a1, Successor, v8))
    return llvm::SplitKnownCriticalEdge(a1, a2, a3, a4);
  else
    return 0;
}

uint64_t llvm::SplitKnownCriticalEdge(llvm::Instruction *a1, unsigned int a2, uint64_t a3, llvm::Twine *a4)
{
  llvm::BasicBlock *v8;
  llvm::BasicBlock *Successor;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  llvm::BasicBlock *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  BOOL v31;
  unsigned int v32;
  llvm::BasicBlock *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  llvm::BasicBlock *v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::BasicBlock **v62;
  llvm::BasicBlock *v63;
  int v64;
  int v65;
  llvm::BasicBlock *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  int v77;
  _QWORD *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  char *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 **v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unsigned int j;
  uint64_t v107;
  uint64_t v108;
  llvm::MemorySSAUpdater *v109;
  uint64_t v110;
  llvm::BasicBlock *v111;
  llvm::BasicBlock *v112;
  char *v113;
  unsigned int v114;
  unsigned int v115;
  llvm::BasicBlock **v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  llvm::BasicBlock *v121;
  int v122;
  int v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  _QWORD **v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  _QWORD v139[4];
  __int16 v140;
  llvm::BasicBlock *v141;
  void *v142;
  uint64_t v143;
  llvm::BasicBlock *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  int v149[2];
  _BYTE v150[32];
  void *__p[2];
  const char *v152;
  __int16 v153;
  _BYTE v154[304];
  void *v155;
  _QWORD v156[10];

  v156[8] = *MEMORY[0x1E0C80C00];
  v8 = (llvm::BasicBlock *)*((_QWORD *)a1 + 5);
  v141 = v8;
  Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(a1, a2);
  v10 = (uint64_t)Successor;
  for (i = *((_QWORD *)Successor + 6); ; i = *(_QWORD *)(i + 8))
  {
    v12 = i - 24;
    if (!i)
      v12 = 0;
    if (*(_BYTE *)(v12 + 16) != 83)
      break;
  }
  v13 = *(unsigned __int8 *)(i - 8) - 38;
  v31 = v13 > 0x38;
  v14 = (1 << v13) & 0x100060000000001;
  v15 = v31 || v14 == 0;
  if (!v15 || *(_BYTE *)(a3 + 35) && llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(Successor, 1)[16] == 35)
    return 0;
  v18 = *(_QWORD *)(a3 + 16);
  v148 = v150;
  *(_QWORD *)v149 = 0x400000000;
  v137 = v18;
  if (!v18)
    goto LABEL_76;
  v19 = *(_DWORD *)(v18 + 16);
  if (!v19)
    goto LABEL_76;
  v20 = *(_QWORD *)v18;
  v21 = v19 - 1;
  v22 = (v19 - 1) & ((v8 >> 4) ^ (v8 >> 9));
  v23 = *(llvm::BasicBlock **)(*(_QWORD *)v18 + 16 * v22);
  if (v8 != v23)
  {
    v24 = 1;
    do
    {
      if (v23 == (llvm::BasicBlock *)-4096)
        goto LABEL_76;
      v25 = v22 + v24++;
      v22 = v25 & v21;
      v23 = *(llvm::BasicBlock **)(v20 + 16 * v22);
    }
    while (v8 != v23);
  }
  v26 = *(_QWORD *)(v20 + 16 * v22 + 8);
  if (!v26)
    goto LABEL_76;
  v27 = *(_QWORD *)(v10 + 8);
  if (!v27)
    goto LABEL_76;
  while (1)
  {
    v28 = *(_QWORD *)(v27 + 24);
    v29 = *(unsigned __int8 *)(v28 + 16);
    v30 = v28 && v29 >= 0x1C;
    v31 = !v30 || v29 - 29 > 0xA;
    if (!v31)
      break;
    v27 = *(_QWORD *)(v27 + 8);
    if (!v27)
      goto LABEL_76;
  }
  v32 = 0;
LABEL_32:
  v33 = *(llvm::BasicBlock **)(v28 + 40);
  if (v33 == v8)
    goto LABEL_44;
  v34 = *(_DWORD *)(v18 + 16);
  if (!v34)
    goto LABEL_39;
  v35 = *(_QWORD *)v18;
  v36 = v34 - 1;
  v37 = (v34 - 1) & ((v33 >> 4) ^ (v33 >> 9));
  v38 = *(llvm::BasicBlock **)(*(_QWORD *)v18 + 16 * v37);
  if (v33 != v38)
  {
    v39 = 1;
    while (v38 != (llvm::BasicBlock *)-4096)
    {
      v40 = v37 + v39++;
      v37 = v40 & v36;
      v38 = *(llvm::BasicBlock **)(v35 + 16 * v37);
      if (v33 == v38)
        goto LABEL_38;
    }
LABEL_39:
    v41 = 0;
    goto LABEL_40;
  }
LABEL_38:
  v41 = *(_QWORD *)(v35 + 16 * v37 + 8);
LABEL_40:
  if (v41 != v26)
    goto LABEL_75;
  if (v32 >= v149[1])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v148, (uint64_t)v150, v32 + 1, 8);
    v18 = v137;
    v32 = v149[0];
  }
  *((_QWORD *)v148 + v32) = v33;
  v32 = ++v149[0];
LABEL_44:
  while (1)
  {
    v27 = *(_QWORD *)(v27 + 8);
    if (!v27)
      break;
    v28 = *(_QWORD *)(v27 + 24);
    v42 = *(unsigned __int8 *)(v28 + 16);
    if (v28)
      v43 = v42 >= 0x1C;
    else
      v43 = 0;
    if (v43 && v42 - 29 < 0xB)
      goto LABEL_32;
  }
  if (!v32)
    goto LABEL_76;
  v45 = (char *)v148;
  v46 = 8 * v32;
  while (1)
  {
    v47 = *(_QWORD *)(*(_QWORD *)v45 + 40);
    if (v47 == *(_QWORD *)v45 + 40)
    {
      v51 = MEMORY[0x10];
    }
    else
    {
      v48 = v47 - 24;
      if (!v47)
        v48 = 0;
      v49 = *(unsigned __int8 *)(v48 + 16) - 40;
      if (v49 >= 0xFFFFFFF5)
        v50 = v48;
      else
        v50 = 0;
      v51 = *(unsigned __int8 *)(v50 + 16);
      if (v47)
      {
        if (v51 == 39 && v49 > 0xFFFFFFF4)
        {
          if (*(_QWORD *)(v50 - 32 * *(unsigned int *)(v50 + 80) - 64) != *(_QWORD *)v45)
            break;
          goto LABEL_71;
        }
      }
    }
    if (v51 == 32)
      break;
LABEL_71:
    v45 += 8;
    v46 -= 8;
    if (!v46)
      goto LABEL_76;
  }
  if (*(_BYTE *)(a3 + 36))
  {
    v16 = 0;
    goto LABEL_206;
  }
LABEL_75:
  v149[0] = 0;
LABEL_76:
  llvm::Twine::str(a4, __p);
  if (SHIBYTE(v152) >= 0)
    v53 = (void *)HIBYTE(v152);
  else
    v53 = __p[1];
  if (SHIBYTE(v152) < 0)
    operator delete(__p[0]);
  v54 = **(_QWORD ***)a1;
  if (v53)
  {
    v55 = operator new();
    v16 = v55;
    *(_QWORD *)v55 = *v54 + 1600;
    *(_QWORD *)(v55 + 8) = 0;
    v56 = *(_DWORD *)(v55 + 20) & 0xC0000000;
    *(_DWORD *)(v55 + 16) = 22;
    *(_DWORD *)(v55 + 20) = v56;
    *(_QWORD *)(v55 + 24) = 0;
    *(_QWORD *)(v55 + 32) = 0;
    *(_QWORD *)(v55 + 40) = v55 + 40;
    *(_QWORD *)(v55 + 48) = v55 + 40;
    *(_QWORD *)(v55 + 56) = 0;
    v57 = (void **)a4;
    goto LABEL_102;
  }
  if ((*((_BYTE *)v8 + 23) & 0x10) != 0)
  {
    v58 = ***(_QWORD ***)v8;
    v59 = *(_QWORD *)(v58 + 152);
    v60 = *(unsigned int *)(v58 + 168);
    if (!(_DWORD)v60)
      goto LABEL_90;
    LODWORD(v61) = (v60 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    v62 = (llvm::BasicBlock **)(v59 + 16 * v61);
    v63 = *v62;
    if (*v62 != v8)
    {
      v64 = 1;
      while (v63 != (llvm::BasicBlock *)-4096)
      {
        v65 = v61 + v64++;
        v61 = v65 & (v60 - 1);
        v63 = *(llvm::BasicBlock **)(v59 + 16 * v61);
        if (v63 == v8)
        {
          v62 = (llvm::BasicBlock **)(v59 + 16 * v61);
          goto LABEL_91;
        }
      }
LABEL_90:
      v62 = (llvm::BasicBlock **)(v59 + 16 * v60);
    }
LABEL_91:
    v66 = v62[1];
    v69 = *(_QWORD *)v66;
    v67 = (char *)v66 + 16;
    v68 = v69;
  }
  else
  {
    v68 = 0;
    v67 = &byte_1C871356D;
  }
  v140 = 773;
  v139[0] = v67;
  v139[1] = v68;
  v139[2] = ".";
  if ((*(_BYTE *)(v10 + 23) & 0x10) != 0)
  {
    v70 = ***(_QWORD ***)v10;
    v71 = *(_QWORD *)(v70 + 152);
    v72 = *(unsigned int *)(v70 + 168);
    if (!(_DWORD)v72)
      goto LABEL_99;
    LODWORD(v73) = (v72 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    v74 = (uint64_t *)(v71 + 16 * v73);
    v75 = *v74;
    if (*v74 != v10)
    {
      v76 = 1;
      while (v75 != -4096)
      {
        v77 = v73 + v76++;
        v73 = v77 & (v72 - 1);
        v75 = *(_QWORD *)(v71 + 16 * v73);
        if (v75 == v10)
        {
          v74 = (uint64_t *)(v71 + 16 * v73);
          goto LABEL_100;
        }
      }
LABEL_99:
      v74 = (uint64_t *)(v71 + 16 * v72);
    }
LABEL_100:
    v78 = (_QWORD *)v74[1];
    v81 = *v78;
    v79 = (char *)(v78 + 2);
    v80 = v81;
  }
  else
  {
    v80 = 0;
    v79 = &byte_1C871356D;
  }
  v142 = v139;
  v144 = (llvm::BasicBlock *)v79;
  v145 = v80;
  LOWORD(v146) = 1282;
  __p[0] = &v142;
  v152 = "_crit_edge";
  v153 = 770;
  v55 = operator new();
  v16 = v55;
  *(_QWORD *)v55 = *v54 + 1600;
  *(_QWORD *)(v55 + 8) = 0;
  v82 = *(_DWORD *)(v55 + 20) & 0xC0000000;
  *(_DWORD *)(v55 + 16) = 22;
  *(_DWORD *)(v55 + 20) = v82;
  *(_QWORD *)(v55 + 24) = 0;
  *(_QWORD *)(v55 + 32) = 0;
  *(_QWORD *)(v55 + 40) = v55 + 40;
  *(_QWORD *)(v55 + 48) = v55 + 40;
  *(_QWORD *)(v55 + 56) = 0;
  v57 = __p;
LABEL_102:
  llvm::Value::setName((uint64_t ***)v55, (uint64_t)v57);
  v83 = (char *)operator new(0x60uLL);
  *((_DWORD *)v83 + 13) = *((_DWORD *)v83 + 13) & 0x38000000 | 1;
  *(_QWORD *)v83 = 0;
  *((_QWORD *)v83 + 1) = 0;
  *((_QWORD *)v83 + 2) = 0;
  *((_QWORD *)v83 + 3) = v83 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v83 + 32), (llvm::BasicBlock *)v10, (llvm::BasicBlock *)v16);
  v84 = (unsigned __int8 *)*((_QWORD *)a1 + 6);
  v138 = v84;
  if (v84)
    llvm::MetadataTracking::track((uint64_t)&v138, v84, 2);
  v87 = (unsigned __int8 *)*((_QWORD *)v83 + 10);
  v86 = (unsigned __int8 **)(v83 + 80);
  v85 = v87;
  if (v87)
    llvm::MetadataTracking::untrack((uint64_t)v86, v85);
  v88 = v138;
  *v86 = v138;
  if (v88)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v138, v88, (uint64_t)v86);
    v138 = 0;
  }
  v89 = *((_QWORD *)v8 + 7) + 72;
  v90 = (uint64_t *)*((_QWORD *)v8 + 4);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v89, (_QWORD *)v16);
  v91 = *v90;
  *(_QWORD *)(v16 + 32) = v90;
  *(_QWORD *)(v16 + 24) = v91;
  *(_QWORD *)(v91 + 8) = v16 + 24;
  *v90 = v16 + 24;
  llvm::Instruction::setSuccessor(a1, a2, (llvm::BasicBlock *)v16);
  v92 = *(_QWORD *)(v10 + 48);
  v93 = v92 - 24;
  if (v92)
    v94 = v92 - 24;
  else
    v94 = 0;
  if (*(_BYTE *)(v94 + 16) == 83)
  {
    v95 = 0;
    while (1)
    {
      v96 = *(_DWORD *)(v93 + 20);
      if ((v96 & 0x40000000) != 0)
        v97 = *(_QWORD *)(v93 - 8);
      else
        v97 = v93 - 32 * (v96 & 0x7FFFFFF);
      v98 = *(unsigned int *)(v93 + 60);
      if (*(llvm::BasicBlock **)(v97 + 32 * v98 + 8 * v95) == v141)
        goto LABEL_124;
      v99 = v96 & 0x7FFFFFF;
      if ((v96 & 0x7FFFFFF) == 0)
        break;
      v100 = 0;
      while (1)
      {
        v101 = v93 - 32 * v99;
        if ((v96 & 0x40000000) != 0)
          v101 = *(_QWORD *)(v93 - 8);
        if (*(llvm::BasicBlock **)(v101 + 32 * v98 + 8 * v100) == v141)
          break;
        if (v99 == ++v100)
          goto LABEL_123;
      }
      v95 = v100;
      if ((v96 & 0x40000000) != 0)
      {
LABEL_127:
        v102 = *(_QWORD *)(v93 - 8);
        goto LABEL_128;
      }
LABEL_125:
      v102 = v93 - 32 * (v96 & 0x7FFFFFF);
LABEL_128:
      *(_QWORD *)(v102 + 32 * v98 + 8 * v95) = v16;
      v92 = *(_QWORD *)(v92 + 8);
      v93 = v92 - 24;
      if (v92)
        v103 = v92 - 24;
      else
        v103 = 0;
      if (*(_BYTE *)(v103 + 16) != 83)
        goto LABEL_132;
    }
LABEL_123:
    v95 = 0xFFFFFFFFLL;
LABEL_124:
    if ((v96 & 0x40000000) != 0)
      goto LABEL_127;
    goto LABEL_125;
  }
LABEL_132:
  if (*(_BYTE *)(a3 + 32))
  {
    v104 = *((unsigned __int8 *)a1 + 16);
    if (v104 != 30)
      __asm { BR              X10 }
    if ((*((_DWORD *)a1 + 5) & 0x7FFFFFF) == 3)
      v105 = 2;
    else
      v105 = 1;
    for (j = a2 + 1; v105 != j; ++j)
    {
      if (llvm::Instruction::getSuccessor(a1, j) == v10)
      {
        llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v10, v141, *(unsigned __int8 *)(a3 + 33));
        llvm::Instruction::setSuccessor(a1, j, (llvm::BasicBlock *)v16);
      }
    }
  }
  v107 = *(_QWORD *)a3;
  v108 = *(_QWORD *)(a3 + 8);
  v109 = *(llvm::MemorySSAUpdater **)(a3 + 24);
  if (v109)
  {
    __p[0] = v141;
    llvm::MemorySSAUpdater::wireOldPredecessorsToNewImmediatePredecessor(v109, (llvm::BasicBlock *)v10, (llvm::BasicBlock *)v16, (uint64_t *)__p, 1, *(_BYTE *)(a3 + 32));
  }
  v110 = v137;
  if (v137 || v107 | v108)
  {
    if (v107 | v108)
    {
      v142 = &v144;
      v111 = v141;
      v144 = v141;
      v145 = v16 & 0xFFFFFFFFFFFFFFFBLL;
      v146 = v16;
      v147 = v10 & 0xFFFFFFFFFFFFFFFBLL;
      v143 = 0x300000002;
      v112 = (llvm::BasicBlock *)*((_QWORD *)v141 + 5);
      if (v112 == (llvm::BasicBlock *)((char *)v141 + 40))
      {
LABEL_194:
        v114 = 2;
LABEL_159:
        v116 = (llvm::BasicBlock **)((char *)v142 + 16 * v114);
        *v116 = v111;
        v116[1] = (llvm::BasicBlock *)(v10 | 4);
        LODWORD(v143) = v143 + 1;
      }
      else
      {
        if (v112)
          v113 = (char *)v112 - 24;
        else
          v113 = 0;
        if (v113[16] != 30)
        {
          v114 = 2;
          switch(v113[16])
          {
            case 29:
            case 34:
            case 35:
              goto LABEL_159;
            case 30:
              __break(1u);
              JUMPOUT(0x1C5EC3D20);
            case 31:
              v114 = (*((_DWORD *)v113 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_193;
            case 32:
            case 38:
              v114 = (*((_DWORD *)v113 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_193;
            case 33:
              goto LABEL_154;
            case 36:
              v114 = *((_WORD *)v113 + 9) & 1;
              goto LABEL_193;
            case 37:
              v114 = 1;
              goto LABEL_154;
            case 39:
              v114 = *((_DWORD *)v113 + 20) + 1;
LABEL_193:
              if (!v114)
                goto LABEL_194;
              goto LABEL_154;
            default:
              goto LABEL_194;
          }
        }
        if ((*((_DWORD *)v113 + 5) & 0x7FFFFFF) == 3)
          v114 = 2;
        else
          v114 = 1;
LABEL_154:
        v115 = 0;
        while (llvm::Instruction::getSuccessor((llvm::Instruction *)v113, v115) != v10)
        {
          if (v114 == ++v115)
          {
            v114 = v143;
            if (v143 >= HIDWORD(v143))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, (uint64_t)&v144, v143 + 1, 16);
              v114 = v143;
            }
            goto LABEL_159;
          }
        }
      }
      if (v107)
      {
        sub_1C4E25D14((uint64_t)__p, (unint64_t *)v142, v143, 1u);
        llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v107, (uint64_t)__p, 0);
        if (v155 != v156)
          free(v155);
        sub_1C4E28CA4((uint64_t)v154);
        sub_1C4E28CA4((uint64_t)__p);
      }
      if (v108)
      {
        sub_1C4E28D78((uint64_t)__p, (unint64_t *)v142, v143, 1u);
        llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(v108, (uint64_t)__p, 0);
        if (v155 != v156)
          free(v155);
        sub_1C4E295E8((uint64_t)v154);
        sub_1C4E295E8((uint64_t)__p);
      }
      if (v142 != &v144)
        free(v142);
      v110 = v137;
    }
    if (v110)
    {
      v117 = *(_DWORD *)(v110 + 16);
      if (v117)
      {
        v118 = *(_QWORD *)v110;
        v119 = v117 - 1;
        LODWORD(v110) = ((v141 >> 4) ^ (v141 >> 9)) & v119;
        v120 = v118 + 16 * v110;
        v121 = *(llvm::BasicBlock **)v120;
        if (v141 == *(llvm::BasicBlock **)v120)
        {
          v124 = *(_QWORD **)(v120 + 8);
          if (v124)
          {
LABEL_180:
            v125 = v119 & ((v10 >> 4) ^ (v10 >> 9));
            v126 = *(_QWORD *)(v118 + 16 * v125);
            if (v10 == v126)
            {
LABEL_184:
              v129 = *(_QWORD ***)(v118 + 16 * v125 + 8);
              if (v129)
              {
                v130 = v124;
                if (v124 == v129)
                  goto LABEL_202;
                v131 = v129;
                while (v131)
                {
                  v131 = (_QWORD *)*v131;
                  if (v131 == v124)
                  {
                    v130 = v124;
                    goto LABEL_202;
                  }
                }
                v132 = v124;
                while (v132)
                {
                  v132 = (_QWORD *)*v132;
                  if (v132 == v129)
                  {
                    v130 = v129;
                    goto LABEL_202;
                  }
                }
                v130 = *v129;
                if (*v129)
LABEL_202:
                  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v130, v16, v137);
              }
            }
            else
            {
              v127 = 1;
              while (v126 != -4096)
              {
                v128 = v125 + v127++;
                v125 = v128 & v119;
                v126 = *(_QWORD *)(v118 + 16 * v125);
                if (v10 == v126)
                  goto LABEL_184;
              }
            }
            v133 = sub_1C477672C((uint64_t)(v124 + 7), v10);
            v134 = v124[8];
            v135 = 72;
            if (v134 == v124[7])
              v135 = 76;
            if (v133 == (_QWORD *)(v134 + 8 * *(unsigned int *)((char *)v124 + v135)))
            {
              if (*(_BYTE *)(a3 + 34))
                llvm::createPHIsForSplitLoopExit((uint64_t)&v141, 1, v16, v10);
              if (v149[0])
              {
                v136 = sub_1C5EBE3AC((uint64_t **)v10, (uint64_t *)v148, v149[0], "split", 0, v107, v137, v109, *(_BYTE *)(a3 + 34));
                if (*(_BYTE *)(a3 + 34))
                  llvm::createPHIsForSplitLoopExit((uint64_t)v148, v149[0], v136, v10);
              }
            }
          }
        }
        else
        {
          v122 = 1;
          while (v121 != (llvm::BasicBlock *)-4096)
          {
            v123 = v110 + v122++;
            v110 = v123 & v119;
            v121 = *(llvm::BasicBlock **)(v118 + 16 * v110);
            if (v141 == v121)
            {
              v124 = *(_QWORD **)(v118 + 16 * v110 + 8);
              if (v124)
                goto LABEL_180;
              break;
            }
          }
        }
      }
    }
  }
LABEL_206:
  if (v148 != v150)
    free(v148);
  return v16;
}

uint64_t llvm::SplitIndirectBrCriticalEdges(llvm *this, llvm::Function *a2, uint64_t a3, llvm::BranchProbabilityInfo *a4, llvm::BlockFrequencyInfo *a5)
{
  uint64_t v6;
  int64x2_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  int v23;
  _QWORD *v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  _QWORD **v37;
  char v38;
  BOOL v39;
  int v40;
  char *v41;
  uint64_t *v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v58;
  BOOL v59;
  uint64_t *i;
  _QWORD *v62;
  uint64_t *v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  _QWORD *v73;
  int v74;
  _QWORD *v75;
  int v76;
  int v77;
  int j;
  int EdgeProbability;
  int v80;
  const llvm::BasicBlock *v81;
  uint64_t BlockFreq;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  llvm::Value *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  llvm::User *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v108;
  _DWORD *v109;
  uint64_t *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  llvm::Value *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  llvm::Value *v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  llvm::ValueSymbolTable *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  llvm::ValueSymbolTable *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  int32x2_t *v154;
  unint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  int v162;
  unint64_t v164;
  unint64_t *v165;
  uint64_t v166;
  int32x2_t *v167;
  unint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t *v177;
  char *v178;
  llvm *v179;
  _QWORD *v181;
  uint64_t *v182;
  uint64_t v183;
  int v184;
  int v185;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD v191[4];
  __int16 v192;
  _QWORD v193[2];
  unsigned int v194;
  uint64_t v195;
  __int16 v196;
  char v197;
  void *v198;
  uint64_t v199;
  _BYTE v200[16];
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  int v206;
  void *v207;
  uint64_t v208;
  _QWORD v209[18];

  v185 = (int)a2;
  v209[16] = *MEMORY[0x1E0C80C00];
  v204 = 1;
  v6 = 8;
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v204 + v6) = v7;
    v6 += 16;
  }
  while (v6 != 136);
  v207 = v209;
  v208 = 0x1000000000;
  v8 = (char *)this + 72;
  v9 = (char *)*((_QWORD *)this + 10);
  if (v9 == (char *)this + 72)
  {
    v38 = 0;
    goto LABEL_286;
  }
  v10 = 0;
  do
  {
    if (v9)
      v11 = v9 - 24;
    else
      v11 = 0;
    v12 = (char *)*((_QWORD *)v11 + 5);
    if (v12 != v11 + 40)
    {
      v13 = v12 ? (uint64_t)(v12 - 24) : 0;
      v14 = *(unsigned __int8 *)(v13 + 16) - 40;
      v15 = v14 >= 0xFFFFFFF5 ? v13 : 0;
      if (v12)
      {
        if (*(_BYTE *)(v15 + 16) == 32 && v14 >= 0xFFFFFFF5)
        {
          v17 = *(_DWORD *)(v15 + 20) & 0x7FFFFFF;
          v18 = (v17 - 1);
          if (v17 != 1)
          {
            v19 = 0;
            do
            {
              v20 = *(_DWORD *)(v15 + 20);
              if ((v20 & 0x40000000) != 0)
                v21 = *(_QWORD *)(v15 - 8);
              else
                v21 = v15 - 32 * (v20 & 0x7FFFFFF);
              ++v19;
              v22 = *(void **)(v21 + 32 * v19);
              v201 = v22;
              if ((v204 & 1) != 0)
              {
                v23 = 16;
                v24 = &v205;
              }
              else
              {
                v23 = v206;
                if (!v206)
                {
                  v33 = 0;
LABEL_43:
                  v34 = sub_1C5AC7B84((uint64_t)&v204, (uint64_t)&v201, &v201, v33);
                  *v34 = v201;
                  v35 = v201;
                  v36 = v208;
                  if (v208 >= (unint64_t)HIDWORD(v208))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v207, (uint64_t)v209, v208 + 1, 8);
                    v36 = v208;
                  }
                  *((_QWORD *)v207 + v36) = v35;
                  v10 = v208 + 1;
                  LODWORD(v208) = v208 + 1;
                  continue;
                }
                v24 = v205;
              }
              v25 = v23 - 1;
              v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
              v27 = &v24[v26];
              v28 = (void *)*v27;
              if (v22 != (void *)*v27)
              {
                v29 = 0;
                v30 = 1;
                while (v28 != (void *)-4096)
                {
                  if (v29)
                    v31 = 0;
                  else
                    v31 = v28 == (void *)-8192;
                  if (v31)
                    v29 = v27;
                  v32 = v26 + v30++;
                  v26 = v32 & v25;
                  v27 = &v24[v26];
                  v28 = (void *)*v27;
                  if (v22 == (void *)*v27)
                    goto LABEL_46;
                }
                if (v29)
                  v33 = v29;
                else
                  v33 = v27;
                goto LABEL_43;
              }
LABEL_46:
              ;
            }
            while (v19 != v18);
          }
        }
      }
    }
    v9 = (char *)*((_QWORD *)v9 + 1);
  }
  while (v9 != v8);
  v37 = (_QWORD **)v207;
  if (!v10)
  {
    v38 = 0;
    goto LABEL_284;
  }
  v38 = 0;
  if (a3)
    v39 = a4 == 0;
  else
    v39 = 1;
  v40 = !v39;
  v184 = v40;
  v41 = (char *)v207 + 8 * v10;
  v42 = &v203;
  v179 = this;
  v43 = v185;
  while (2)
  {
    v44 = *v37;
    if (v43)
    {
      if ((_QWORD *)v44[5] == v44 + 5)
        goto LABEL_110;
      v45 = v44[6];
      if (!v45 || *(_BYTE *)(v45 - 8) != 83)
        goto LABEL_110;
    }
    v201 = v42;
    v202 = 0x1000000000;
    v46 = v44[1];
    if (!v46)
      goto LABEL_108;
    while (1)
    {
      v47 = *(_QWORD *)(v46 + 24);
      v48 = *(unsigned __int8 *)(v47 + 16);
      v49 = v47 && v48 >= 0x1C;
      v50 = !v49 || v48 - 29 > 0xA;
      if (!v50)
        break;
      v46 = *(_QWORD *)(v46 + 8);
      if (!v46)
        goto LABEL_108;
    }
    v51 = 0;
    v52 = 0;
LABEL_73:
    v53 = *(_QWORD **)(v47 + 40);
    v54 = v53[5];
    if (v54)
      v55 = v54 - 24;
    else
      v55 = 0;
    if (*(unsigned __int8 *)(v55 + 16) - 29 >= 0xB)
      v55 = 0;
    v56 = *(unsigned __int8 *)(v55 + 16);
    if ((v56 - 30) >= 2)
    {
      if (v56 == 32 && v52 == 0)
        goto LABEL_87;
LABEL_107:
      v43 = v185;
      goto LABEL_108;
    }
    if (v51 >= HIDWORD(v202))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v201, (uint64_t)v42, v51 + 1, 8);
      v51 = v202;
    }
    *((_QWORD *)v201 + v51) = v53;
    v51 = v202 + 1;
    LODWORD(v202) = v202 + 1;
    v53 = v52;
LABEL_87:
    while (1)
    {
      v46 = *(_QWORD *)(v46 + 8);
      if (!v46)
        break;
      v47 = *(_QWORD *)(v46 + 24);
      v58 = *(unsigned __int8 *)(v47 + 16);
      if (v47)
        v59 = v58 >= 0x1C;
      else
        v59 = 0;
      if (v59 && v58 - 29 < 0xB)
      {
        v52 = v53;
        goto LABEL_73;
      }
    }
    if (!v53 || !v51)
      goto LABEL_107;
    v62 = v44 + 6;
    for (i = (uint64_t *)v44[6]; ; i = (uint64_t *)i[1])
    {
      v63 = i - 3;
      if (!i)
        v63 = 0;
      if (*((_BYTE *)v63 + 16) != 83)
        break;
    }
    v64 = *((unsigned __int8 *)i - 8) - 38;
    v50 = v64 > 0x38;
    v65 = (1 << v64) & 0x100060000000001;
    if (!v50 && v65 != 0)
      goto LABEL_107;
    v67 = v44 + 5;
    v68 = v44 + 6;
    do
    {
      v69 = *v68;
      v70 = v69 - 24;
      if (!v69)
        v70 = 0;
      v71 = *(unsigned __int8 *)(v70 + 16);
      v68 = (uint64_t *)(v69 + 8);
    }
    while (v71 == 83);
    if (v71 == 94)
      goto LABEL_107;
    v198 = v200;
    v199 = 0x400000000;
    v187 = v44 + 5;
    if (v184)
    {
      v72 = (_QWORD *)*v67;
      if ((_QWORD *)*v67 == v67)
      {
        v73 = 0;
      }
      else
      {
        v73 = v72 - 3;
        if (!v72)
          v73 = 0;
        if (*((unsigned __int8 *)v73 + 16) - 29 >= 0xB)
          v73 = 0;
      }
      v74 = *((unsigned __int8 *)v73 + 16);
      if ((v74 - 29) >= 2)
        __asm { BR              X11 }
      if (v72 == v67)
      {
        v75 = 0;
      }
      else
      {
        if (v72)
          v75 = v72 - 3;
        else
          v75 = 0;
        if (*((unsigned __int8 *)v75 + 16) - 29 >= 0xB)
          v75 = 0;
      }
      v76 = *((unsigned __int8 *)v75 + 16);
      if (v76 != 30)
        __asm { BR              X10 }
      if ((*((_DWORD *)v75 + 5) & 0x7FFFFFF) == 3)
        v77 = 2;
      else
        v77 = 1;
      for (j = 0; j != v77; ++j)
      {
        EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(a3, (uint64_t)v44, j);
        v80 = EdgeProbability;
        if (v199 >= HIDWORD(v199))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, (uint64_t)v200, v199 + 1, 4);
          *((_DWORD *)v198 + v199) = v80;
        }
        else
        {
          *((_DWORD *)v198 + v199) = EdgeProbability;
        }
        LODWORD(v199) = v199 + 1;
      }
      llvm::BranchProbabilityInfo::eraseBlock(a3, (const llvm::BasicBlock *)v44);
      v62 = v44 + 6;
    }
    v177 = v42;
    v178 = v41;
    v193[0] = ".split";
    v196 = 259;
    v81 = (const llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v44, i, (uint64_t)v193, 0);
    if (v184)
    {
      llvm::BranchProbabilityInfo::setEdgeProbability(a3, v81, (uint64_t *)&v198);
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq((uint64_t *)a4, (uint64_t)v44);
      sub_1C4DAD074(*(_QWORD *)a4, (uint64_t)v81, BlockFreq);
    }
    v189 = v62;
    if (v53 == v44)
      v83 = (uint64_t)v81;
    else
      v83 = (uint64_t)v53;
    v194 = 128;
    v84 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
    v193[0] = v84;
    v193[1] = 0;
    if (v194)
    {
      v85 = (unint64_t)v194 << 6;
      v86 = v84 + 16;
      do
      {
        *v86 = 0;
        v86[1] = -4096;
        *(v86 - 2) = &unk_1E814DA10;
        *(v86 - 1) = 2;
        v86[2] = 0;
        v86 += 8;
        v85 -= 64;
      }
      while (v85);
    }
    LOBYTE(v195) = 0;
    v197 = 0;
    v191[0] = ".clone";
    v192 = 259;
    v87 = (llvm::Value *)llvm::CloneBasicBlock((uint64_t ***)v44, (uint64_t)v193, (uint64_t)v191, (uint64_t)v179, 0, 0);
    if ((_DWORD)v202)
    {
      v88 = 0;
      v89 = (uint64_t *)v201;
      v90 = 8 * v202;
      do
      {
        if ((_QWORD *)*v89 == v44)
          v91 = (uint64_t)v81;
        else
          v91 = *v89;
        v92 = *(_QWORD *)(v91 + 40);
        if (v92 == v91 + 40)
        {
          v94 = 0;
        }
        else
        {
          if (v92)
            v93 = (unsigned __int8 *)(v92 - 24);
          else
            v93 = 0;
          if (v93[16] - 29 >= 0xB)
            v94 = 0;
          else
            v94 = (llvm::User *)v93;
        }
        llvm::User::replaceUsesOfWith(v94, (llvm::Value *)v44, v87);
        if (v184)
        {
          v95 = llvm::BlockFrequencyInfo::getBlockFreq((uint64_t *)a4, v91);
          LODWORD(v191[0]) = llvm::BranchProbabilityInfo::getEdgeProbability(a3, v91, (uint64_t)v87);
          v96 = llvm::BranchProbability::scale((llvm::BranchProbability *)v191, v95);
          if (__CFADD__(v96, v88))
            v88 = -1;
          else
            v88 += v96;
        }
        ++v89;
        v90 -= 8;
      }
      while (v90);
    }
    else
    {
      v88 = 0;
    }
    if ((v184 & 1) != 0)
    {
      sub_1C4DAD074(*(_QWORD *)a4, (uint64_t)v87, v88);
      v97 = llvm::BlockFrequencyInfo::getBlockFreq((uint64_t *)a4, (uint64_t)v44);
      if (v97 >= v88)
        v98 = v97 - v88;
      else
        v98 = 0;
      sub_1C4DAD074(*(_QWORD *)a4, (uint64_t)v44, v98);
    }
    v99 = (_QWORD *)*v189;
    v100 = (_QWORD *)*v189;
    if ((_QWORD *)*v189 == v187)
    {
LABEL_184:
      v101 = 0;
    }
    else
    {
      while (1)
      {
        v101 = v100 - 3;
        v102 = v100 ? (uint64_t)(v100 - 3) : 0;
        if (*(_BYTE *)(v102 + 16) != 83)
          break;
        v100 = (_QWORD *)v100[1];
        if (v100 == v187)
          goto LABEL_184;
      }
    }
    v103 = (uint64_t *)*((_QWORD *)v81 + 6);
    v183 = (uint64_t)v87;
    if (v103 == (uint64_t *)((char *)v81 + 40))
    {
LABEL_190:
      v182 = (uint64_t *)((char *)v81 + 40);
    }
    else
    {
      while (1)
      {
        v104 = v103 - 3;
        if (!v103)
          v104 = 0;
        if (*((_BYTE *)v104 + 16) != 83)
          break;
        v103 = (uint64_t *)v103[1];
        if (v103 == (uint64_t *)((char *)v81 + 40))
          goto LABEL_190;
      }
      v105 = *((unsigned __int8 *)v103 - 8) - 38;
      v50 = v105 > 0x38;
      v106 = (1 << v105) & 0x100060000000001;
      if (!v50 && v106 != 0)
        v103 = (uint64_t *)v103[1];
      v182 = v103;
    }
    v181 = v101 + 3;
    if (v99 != v101 + 3)
    {
      v108 = *((_QWORD *)v87 + 6);
      do
      {
        if (v108)
          v109 = (_DWORD *)(v108 - 24);
        else
          v109 = 0;
        if (v99)
          v110 = v99 - 3;
        else
          v110 = 0;
        v111 = v109[5];
        v112 = v111 & 0x7FFFFFF;
        if ((v111 & 0x7FFFFFF) != 0)
        {
          v113 = 0;
          while (1)
          {
            v114 = &v109[-8 * v112];
            if ((v111 & 0x40000000) != 0)
              v114 = (_DWORD *)*((_QWORD *)v109 - 1);
            if (*(_QWORD *)&v114[8 * v109[15] + 2 * v113] == v83)
              break;
            if (v112 == ++v113)
              goto LABEL_211;
          }
        }
        else
        {
LABEL_211:
          LODWORD(v113) = -1;
        }
        llvm::PHINode::removeIncomingValue((llvm::PHINode *)v109, v113, 1);
        v188 = *(_QWORD *)(v108 + 8);
        v115 = (_QWORD *)v99[1];
        v116 = *v110;
        v191[0] = "ind";
        v192 = 259;
        v117 = operator new(0x48uLL);
        v117[1] = v116;
        v118 = (llvm::Value *)(v117 + 1);
        *v117 = 0;
        v117[2] = 0;
        v117[3] = 0x4000000000000053;
        *((_OWORD *)v117 + 2) = 0u;
        v119 = (char *)(v117 + 4);
        *((_OWORD *)v117 + 3) = 0u;
        *((_DWORD *)v117 + 16) = 0;
        v120 = v110[5];
        v117[6] = v120;
        *(_WORD *)(v120 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v117 + 31) & 0x10) != 0)
        {
          v141 = *(_QWORD *)(v120 + 56);
          if (v141)
          {
            v142 = *(llvm::ValueSymbolTable **)(v141 + 104);
            if (v142)
              llvm::ValueSymbolTable::reinsertValue(v142, v118);
          }
        }
        v121 = v110[3];
        v117[4] = v121;
        v117[5] = v110 + 3;
        *(_QWORD *)(v121 + 8) = v119;
        v110[3] = (uint64_t)v119;
        *((_DWORD *)v117 + 17) = 1;
        llvm::Value::setName((uint64_t ***)v118, (uint64_t)v191);
        v122 = *((unsigned int *)v117 + 17);
        v123 = operator new(40 * v122);
        *v117 = v123;
        if ((_DWORD)v122)
        {
          v124 = &v123[4 * v122];
          do
          {
            *v123 = 0;
            v123[1] = 0;
            v123[2] = 0;
            v123[3] = v118;
            v123 += 4;
          }
          while (v123 != v124);
        }
        v125 = *((_DWORD *)v110 + 5);
        v126 = v125 & 0x7FFFFFF;
        if ((v125 & 0x7FFFFFF) != 0)
        {
          v127 = 0;
          while (1)
          {
            v128 = &v110[-4 * v126];
            if ((v125 & 0x40000000) != 0)
              v128 = (uint64_t *)*(v110 - 1);
            if (v128[4 * *((unsigned int *)v110 + 15) + v127] == v83)
              break;
            if (v126 == ++v127)
              goto LABEL_222;
          }
        }
        else
        {
LABEL_222:
          LODWORD(v127) = -1;
        }
        v190 = v115;
        if ((v125 & 0x40000000) != 0)
          v129 = (uint64_t *)*(v110 - 1);
        else
          v129 = &v110[-4 * v126];
        sub_1C477667C(v118, v129[4 * v127], v83);
        v130 = *v110;
        v191[0] = "merge";
        v192 = 259;
        v131 = operator new(0x48uLL);
        v132 = v131;
        v131[1] = v130;
        v133 = (llvm::Value *)(v131 + 1);
        *v131 = 0;
        v131[2] = 0;
        v131[3] = 0x4000000000000053;
        *((_OWORD *)v131 + 2) = 0u;
        v134 = (char *)(v131 + 4);
        *((_OWORD *)v131 + 3) = 0u;
        *((_DWORD *)v131 + 16) = 0;
        v135 = v182;
        if (v182)
        {
          v143 = v182[2];
          v131[6] = v143;
          *(_WORD *)(v143 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v131 + 31) & 0x10) != 0)
          {
            v145 = *(_QWORD *)(v143 + 56);
            if (v145)
            {
              v146 = *(llvm::ValueSymbolTable **)(v145 + 104);
              if (v146)
              {
                llvm::ValueSymbolTable::reinsertValue(v146, v133);
                v135 = v182;
              }
            }
          }
          v144 = *v135;
          v132[4] = *v135;
          v132[5] = v135;
          *(_QWORD *)(v144 + 8) = v134;
          *v135 = (uint64_t)v134;
        }
        *((_DWORD *)v132 + 17) = 2;
        llvm::Value::setName((uint64_t ***)v133, (uint64_t)v191);
        v136 = *((unsigned int *)v132 + 17);
        v137 = operator new(40 * v136);
        *v132 = v137;
        if ((_DWORD)v136)
        {
          v138 = &v137[4 * v136];
          do
          {
            *v137 = 0;
            v137[1] = 0;
            v137[2] = 0;
            v137[3] = v133;
            v137 += 4;
          }
          while (v137 != v138);
        }
        sub_1C477667C(v133, (uint64_t)v118, (uint64_t)v44);
        sub_1C477667C(v133, (uint64_t)v109, v183);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v110, v133, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v110[5] + 40, (uint64_t ***)v110);
        v139 = v110[3];
        v140 = (_QWORD *)v110[4];
        *v140 = v139;
        *(_QWORD *)(v139 + 8) = v140;
        v110[3] = 0;
        v110[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v110);
        v108 = v188;
        v99 = v190;
      }
      while (v190 != v181);
    }
    if (v197)
    {
      sub_1C4E43068((uint64_t)&v195);
      MEMORY[0x1CAA32FB4](v195, 8);
      v197 = 0;
    }
    v147 = (_QWORD *)v193[0];
    v43 = v185;
    v42 = v177;
    v41 = v178;
    if (v194)
    {
      v148 = v193[0] + ((unint64_t)v194 << 6);
      do
      {
        v149 = v147[3];
        if ((v149 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v150 = v147[7];
          if (v150)
          {
            if (v150 != -8192 && v150 != -4096)
            {
              v151 = v147[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v151 = v147[6];
              v152 = (unint64_t *)v147[6];
              if (v152)
              {
                *v152 = *v152 & 7 | v151;
              }
              else
              {
                v153 = v147[7];
                v154 = ***(int32x2_t ****)v153;
                v155 = (unint64_t)v154[303];
                if (v155 <= v151)
                {
                  v156 = v154[305].u32[0];
                  if (v155 + 16 * v156 > v151)
                  {
                    v157 = v156 - 1;
                    LODWORD(v158) = v157 & ((v153 >> 4) ^ (v153 >> 9));
                    v159 = (uint64_t *)(v155 + 16 * v158);
                    v160 = *v159;
                    if (v153 == *v159)
                    {
LABEL_256:
                      *v159 = -8192;
                      v154[304] = vadd_s32(v154[304], (int32x2_t)0x1FFFFFFFFLL);
                      v153 = v147[7];
                    }
                    else
                    {
                      v161 = 1;
                      while (v160 != -4096)
                      {
                        v162 = v158 + v161++;
                        v158 = v162 & v157;
                        v160 = *(_QWORD *)(v155 + 16 * v158);
                        if (v153 == v160)
                        {
                          v159 = (uint64_t *)(v155 + 16 * v158);
                          goto LABEL_256;
                        }
                      }
                    }
                    *(_BYTE *)(v153 + 17) &= ~1u;
                  }
                }
              }
              v149 = v147[3];
            }
          }
        }
        if (v149 != -4096 && v149 != -8192 && v149 != 0)
        {
          v164 = v147[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v164 = v147[2];
          v165 = (unint64_t *)v147[2];
          if (v165)
          {
            *v165 = *v165 & 7 | v164;
          }
          else
          {
            v166 = v147[3];
            v167 = ***(int32x2_t ****)v166;
            v168 = (unint64_t)v167[303];
            if (v168 <= v164)
            {
              v169 = v167[305].u32[0];
              if (v168 + 16 * v169 > v164)
              {
                v170 = v169 - 1;
                LODWORD(v171) = v170 & ((v166 >> 4) ^ (v166 >> 9));
                v172 = (uint64_t *)(v168 + 16 * v171);
                v173 = *v172;
                if (v166 == *v172)
                {
LABEL_275:
                  *v172 = -8192;
                  v167[304] = vadd_s32(v167[304], (int32x2_t)0x1FFFFFFFFLL);
                  v166 = v147[3];
                }
                else
                {
                  v174 = 1;
                  while (v173 != -4096)
                  {
                    v175 = v171 + v174++;
                    v171 = v175 & v170;
                    v173 = *(_QWORD *)(v168 + 16 * v171);
                    if (v166 == v173)
                    {
                      v172 = (uint64_t *)(v168 + 16 * v171);
                      goto LABEL_275;
                    }
                  }
                }
                *(_BYTE *)(v166 + 17) &= ~1u;
              }
            }
          }
        }
        v147 += 8;
      }
      while (v147 != (_QWORD *)v148);
      v147 = (_QWORD *)v193[0];
    }
    MEMORY[0x1CAA32FB4](v147, 8);
    if (v198 != v200)
      free(v198);
    v38 = 1;
LABEL_108:
    if (v201 != v42)
      free(v201);
LABEL_110:
    if (++v37 != (_QWORD **)v41)
      continue;
    break;
  }
  v37 = (_QWORD **)v207;
LABEL_284:
  if (v37 != v209)
    free(v37);
LABEL_286:
  if ((v204 & 1) == 0)
    MEMORY[0x1CAA32FB4](v205, 8, a3, a4, a5);
  return v38 & 1;
}

uint64_t sub_1C5EC4C98()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5EC2F4C(v0);
}

void sub_1C5EC4CC4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5EC4CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2 + 112;
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, v3, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  return sub_1C4771E64(a2, v3, (uint64_t)byte_1EF8F7650);
}

BOOL sub_1C5EC4D40(uint64_t a1, uint64_t a2)
{
  llvm::PMDataManager *v4;
  uint64_t AnalysisPass;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  int v15;
  char v16;

  v4 = *(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(v4, llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v6 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
    v4 = *(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24);
  }
  else
  {
    v6 = 0;
  }
  v7 = llvm::PMDataManager::findAnalysisPass(v4, &llvm::PostDominatorTreeWrapperPass::ID, 1);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v7 + 96))(v7, &llvm::PostDominatorTreeWrapperPass::ID);
    v4 = *(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24);
  }
  else
  {
    v8 = 0;
  }
  v9 = llvm::PMDataManager::findAnalysisPass(v4, llvm::LoopInfoWrapperPass::ID, 1);
  if (v9)
    v9 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v9 + 96))(v9, llvm::LoopInfoWrapperPass::ID);
  v10 = v8 + 32;
  if (!v8)
    v10 = 0;
  v11 = v6 + 32;
  if (!v6)
    v11 = 0;
  v14[0] = v11;
  v14[1] = v10;
  if (v9)
    v12 = v9 + 32;
  else
    v12 = 0;
  v14[2] = v12;
  v14[3] = 0;
  v15 = 0;
  v16 = 1;
  return llvm::SplitAllCriticalEdges(a2, (uint64_t)v14) != 0;
}

uint64_t llvm::inferLibFuncAttributes(uint64_t ***a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  uint64_t ***v14;
  char *v15;
  size_t v16;
  size_t v17;
  int LibFunc;
  uint64_t v19;
  unint64_t v20;
  uint64_t **v21;
  int v22;
  llvm::Module *v23;
  uint64_t **v24;
  int v25;
  uint64_t **v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  int v40;
  int v41;
  uint64_t **v42;
  uint64_t *v43;
  int v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t **v55;
  uint64_t *v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  uint64_t *v75;
  uint64_t *v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t **v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  uint64_t **v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t **v90;
  uint64_t *v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  uint64_t **v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  int v111;
  uint64_t **v112;
  int v113;
  uint64_t **v114;
  uint64_t *v115;
  int v116;
  uint64_t **v117;
  uint64_t *v118;
  int v119;
  int v120;
  uint64_t **v121;
  int v122;
  int v123;
  uint64_t *v124;
  uint64_t *v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t *v133;
  int v134;
  int v135;
  uint64_t *v136;
  uint64_t *v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t **v146;
  uint64_t **v147;
  int v148;
  uint64_t **v149;
  uint64_t *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t **v155;
  uint64_t *v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t *v165;
  uint64_t *v166;
  int v167;
  int v168;
  int v169;
  uint64_t **v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t *v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t *v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t **v208;
  uint64_t *v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t *v232;
  int v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t *v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t *v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t *v267;
  int v268;
  int v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t *v275;
  uint64_t *v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  int v289;
  int v290;
  int v291;
  uint64_t v292;
  int v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t **v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  unsigned int v336;

  if ((*((_BYTE *)a1 + 33) & 0x20) != 0)
    return 0;
  v5 = *a2;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v16 = 0;
    v15 = &byte_1C871356D;
    goto LABEL_12;
  }
  v6 = ***a1;
  v7 = *(_QWORD *)(v6 + 152);
  v8 = *(unsigned int *)(v6 + 168);
  if (!(_DWORD)v8)
    goto LABEL_21;
  LODWORD(v9) = (v8 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v10 = (uint64_t ****)(v7 + 16 * v9);
  v11 = *v10;
  if (*v10 != a1)
  {
    v12 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(uint64_t ****)(v7 + 16 * v9);
      if (v11 == a1)
      {
        v10 = (uint64_t ****)(v7 + 16 * v9);
        goto LABEL_11;
      }
    }
LABEL_21:
    v10 = (uint64_t ****)(v7 + 16 * v8);
  }
LABEL_11:
  v14 = v10[1];
  v17 = (size_t)*v14;
  v15 = (char *)(v14 + 2);
  v16 = v17;
LABEL_12:
  v336 = 0;
  LibFunc = llvm::TargetLibraryInfoImpl::getLibFunc((int)a1, v15, v16, &v336);
  result = 0;
  if (LibFunc)
  {
    v19 = v5;
    v20 = v336;
    result = llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v19, (uint64_t)a1[3], v336);
    if ((_DWORD)result)
    {
      if (((*(_QWORD *)(a2[1] + 8 * (v20 >> 6)) >> v20) & 1) != 0
        || ((*(unsigned __int8 *)(*a2 + (v20 >> 2)) >> (2 * (v20 & 3))) & 3) == 0)
      {
        return 0;
      }
      if (llvm::isLibFreeFunction(a1, v20)
        || (llvm::isReallocLikeFn((uint64_t)a1, a2) & 1) != 0
        || (v21 = a1[14]) != 0 && (*((_BYTE *)v21 + 15) & 2) != 0)
      {
        v22 = 0;
      }
      else
      {
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 25);
        v22 = 1;
      }
      v23 = (llvm::Module *)a1[5];
      if (v23 && llvm::Module::getRtLibUseGOT(v23))
      {
        v24 = a1[14];
        if (v24 && ((_BYTE)v24[2] & 0x40) != 0)
        {
          v25 = 0;
        }
        else
        {
          a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 38);
          v25 = 1;
        }
        v22 |= v25;
      }
      result = 0;
      switch((int)v20)
      {
        case 20:
        case 183:
        case 184:
        case 194:
        case 218:
        case 220:
        case 222:
        case 226:
        case 227:
        case 231:
        case 233:
        case 264:
        case 265:
        case 266:
        case 267:
        case 272:
        case 273:
        case 274:
        case 275:
        case 276:
        case 279:
        case 280:
        case 285:
        case 343:
        case 369:
        case 381:
        case 383:
        case 441:
        case 448:
          v128 = sub_1C5EC8030((uint64_t)a1);
          v59 = v128 | sub_1C5EC80B0((uint64_t)a1);
          v129 = (uint64_t)a1[14];
          if (v129 && (*(_BYTE *)(v129 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v129 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            v62 = 0;
            a1[14] = (uint64_t **)v129;
            if (!v129)
            {
LABEL_493:
              v199 = **a1;
              v200 = (uint64_t *)(a1 + 14);
              v201 = 1;
              goto LABEL_494;
            }
          }
          if (*(_DWORD *)(v129 + 8) < 3u)
            goto LABEL_493;
          v234 = *(_QWORD *)(v129 + 56);
          if (!v234 || (*(_BYTE *)(v234 + 14) & 0x40) == 0)
            goto LABEL_493;
          goto LABEL_867;
        case 21:
        case 253:
        case 254:
        case 268:
        case 269:
        case 270:
        case 271:
        case 284:
        case 352:
        case 353:
        case 449:
          v74 = sub_1C5EC8030((uint64_t)a1);
          v59 = v74 | sub_1C5EC80B0((uint64_t)a1);
          v69 = (uint64_t *)(a1 + 14);
          v68 = (uint64_t)a1[14];
          if (!v68 || (*(_BYTE *)(v68 + 16) & 0x20) == 0)
          {
            v75 = **a1;
            v76 = (uint64_t *)(a1 + 14);
            v77 = -1;
            v78 = 37;
            goto LABEL_349;
          }
          v62 = 1;
          goto LABEL_369;
        case 74:
        case 75:
        case 112:
        case 116:
        case 117:
        case 140:
        case 142:
        case 143:
        case 144:
        case 145:
        case 146:
        case 147:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
        case 175:
        case 176:
        case 177:
        case 178:
        case 179:
        case 180:
        case 185:
        case 186:
        case 187:
        case 188:
        case 189:
        case 190:
        case 191:
        case 192:
        case 193:
        case 203:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 223:
        case 224:
        case 225:
        case 234:
        case 235:
        case 236:
        case 237:
        case 238:
        case 239:
        case 240:
        case 241:
        case 242:
        case 243:
        case 244:
        case 245:
        case 246:
        case 247:
        case 248:
        case 292:
        case 293:
        case 294:
        case 299:
        case 300:
        case 301:
        case 302:
        case 303:
        case 304:
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 312:
        case 313:
        case 314:
        case 335:
        case 336:
        case 337:
        case 347:
        case 348:
        case 349:
        case 370:
        case 371:
        case 372:
        case 374:
        case 378:
        case 379:
        case 384:
        case 385:
        case 386:
        case 387:
        case 388:
        case 389:
        case 393:
        case 394:
        case 395:
        case 435:
        case 436:
        case 437:
        case 438:
        case 439:
        case 440:
        case 444:
        case 445:
        case 446:
        case 447:
          v26 = a1[14];
          if (v26 && ((_BYTE)v26[2] & 0x20) != 0)
          {
            v27 = 1;
          }
          else
          {
            v26 = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = v26;
            if (!v26)
            {
LABEL_271:
              v26 = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 25);
              v27 = 0;
              a1[14] = v26;
              if (!v26)
              {
LABEL_275:
                v164 = 66;
                goto LABEL_692;
              }
LABEL_272:
              if ((*((_BYTE *)v26 + 17) & 0x10) == 0 && (*((_BYTE *)v26 + 20) & 4) == 0)
              {
                if ((*((_BYTE *)v26 + 17) & 0x20) == 0)
                  goto LABEL_275;
                llvm::Function::removeFnAttr((uint64_t)a1, 45);
                v26 = a1[14];
                if (!v26 || (*((_BYTE *)v26 + 17) & 0x10) == 0)
                {
                  v164 = 44;
LABEL_692:
                  v26 = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, v164);
                  a1[14] = v26;
                  v288 = 1;
                  if (!v26)
                    goto LABEL_834;
                  goto LABEL_833;
                }
              }
              v288 = 0;
LABEL_833:
              if ((*((_BYTE *)v26 + 20) & 2) == 0)
              {
LABEL_834:
                v320 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
                v321 = 0;
                a1[14] = (uint64_t **)v320;
                goto LABEL_870;
              }
              v321 = 1;
LABEL_870:
              v315 = v27 & v321 ^ 1;
              v316 = v22 | v288;
              return v316 | v315;
            }
            v27 = 0;
          }
          if ((*((_BYTE *)v26 + 15) & 2) != 0)
            goto LABEL_272;
          goto LABEL_271;
        case 89:
        case 141:
        case 181:
        case 182:
        case 286:
        case 295:
        case 330:
        case 344:
        case 351:
        case 356:
        case 363:
        case 367:
        case 373:
        case 380:
        case 450:
        case 451:
        case 461:
        case 462:
          v123 = sub_1C5EC8030((uint64_t)a1);
          v59 = v123 | sub_1C5EC80B0((uint64_t)a1);
          v109 = (uint64_t *)(a1 + 14);
          v108 = (uint64_t)a1[14];
          if (!v108 || (*(_BYTE *)(v108 + 16) & 0x20) == 0)
          {
            v124 = **a1;
            v125 = (uint64_t *)(a1 + 14);
            v126 = -1;
            v127 = 37;
            goto LABEL_475;
          }
          v62 = 1;
          goto LABEL_485;
        case 90:
        case 368:
        case 396:
        case 452:
        case 453:
        case 465:
          v135 = sub_1C5EC8030((uint64_t)a1);
          v59 = v135 | sub_1C5EC80B0((uint64_t)a1);
          v61 = (uint64_t *)(a1 + 14);
          v60 = (uint64_t)a1[14];
          if (!v60 || (*(_BYTE *)(v60 + 16) & 0x20) == 0)
          {
            v136 = **a1;
            v137 = (uint64_t *)(a1 + 14);
            v138 = -1;
            v139 = 37;
            goto LABEL_361;
          }
          v62 = 1;
          goto LABEL_546;
        case 103:
          v28 = (uint64_t)a1[14];
          goto LABEL_407;
        case 106:
          v29 = (uint64_t)a1[14];
          goto LABEL_863;
        case 107:
          v30 = sub_1C5EC8030((uint64_t)a1);
          v31 = v30 | sub_1C5EC80B0((uint64_t)a1);
          v32 = (uint64_t)a1[14];
          if (v32 && (*(_BYTE *)(v32 + 17) & 0x10) != 0)
          {
            v33 = 1;
          }
          else
          {
            v32 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 44);
            v33 = 0;
            a1[14] = (uint64_t **)v32;
            if (!v32)
              goto LABEL_278;
          }
          if ((*(_BYTE *)(v32 + 16) & 0x20) != 0)
            goto LABEL_873;
LABEL_278:
          v165 = **a1;
          v166 = (uint64_t *)(a1 + 14);
          v167 = -1;
          v168 = 37;
          goto LABEL_853;
        case 130:
          v34 = (uint64_t)a1[14];
          goto LABEL_281;
        case 136:
          v34 = (uint64_t)a1[14];
          if (v34
            && *(_DWORD *)(v34 + 8) >= 4u
            && (v35 = *(_QWORD *)(v34 + 64)) != 0
            && (*(_BYTE *)(v35 + 16) & 0x10) != 0)
          {
            v36 = 0;
          }
          else
          {
            v34 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 36);
            a1[14] = (uint64_t **)v34;
            v36 = 1;
          }
          v22 |= v36;
LABEL_281:
          v156 = (uint64_t *)(a1 + 14);
          if (!v34 || (*(_BYTE *)(v34 + 16) & 0x20) == 0)
            goto LABEL_812;
          v52 = 1;
          goto LABEL_814;
        case 137:
          v37 = (uint64_t *)(a1 + 14);
          v28 = (uint64_t)a1[14];
          if (!v28 || (*(_BYTE *)(v28 + 16) & 0x20) == 0)
          {
            v38 = **a1;
            v39 = (uint64_t *)(a1 + 14);
            v40 = -1;
            v41 = 37;
            goto LABEL_734;
          }
          v52 = 1;
          goto LABEL_736;
        case 148:
          v42 = a1[14];
          if (v42 && *((_DWORD *)v42 + 2) >= 3u && (v43 = v42[7]) != 0 && (*((_BYTE *)v43 + 12) & 2) != 0)
          {
            v44 = 0;
          }
          else
          {
            v44 = 1;
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 1);
          }
          v22 |= v44 | sub_1C5EC7FB4((llvm::LLVMContext ***)a1, 1, 0);
          goto LABEL_287;
        case 164:
        case 165:
        case 166:
        case 167:
          v46 = (uint64_t *)(a1 + 14);
          v45 = a1[14];
          if (v45 && ((_BYTE)v45[2] & 0x20) != 0)
          {
            v33 = 1;
          }
          else
          {
            v33 = 0;
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
          }
          v31 = sub_1C5EC7F60((uint64_t)a1);
          v106 = (uint64_t)a1[14];
          if (!v106)
            goto LABEL_388;
          goto LABEL_387;
        case 168:
          v48 = (uint64_t *)(a1 + 14);
          v47 = (uint64_t)a1[14];
          if (v47 && (*(_BYTE *)(v47 + 16) & 0x20) != 0)
          {
            v49 = 1;
          }
          else
          {
            v47 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            v49 = 0;
            a1[14] = (uint64_t **)v47;
            if (!v47)
              goto LABEL_295;
          }
          if ((*(_BYTE *)(v47 + 12) & 8) == 0)
          {
LABEL_295:
            v172 = 0;
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
            goto LABEL_700;
          }
          v172 = 1;
LABEL_700:
          v31 = sub_1C5EC7F60((uint64_t)a1);
          v215 = (uint64_t)a1[14];
          if (v215 && (*(_BYTE *)(v215 + 20) & 2) != 0)
          {
            v33 = v49 & v172;
            goto LABEL_843;
          }
LABEL_702:
          v215 = llvm::AttributeList::addAttributeAtIndex(v48, **a1, -1, 65);
          a1[14] = (uint64_t **)v215;
          if (v215)
          {
            v33 = 0;
LABEL_843:
            if (*(_DWORD *)(v215 + 8) < 3u)
              goto LABEL_846;
            v325 = *(_QWORD *)(v215 + 56);
            if (!v325 || (*(_BYTE *)(v325 + 14) & 0x40) == 0)
              goto LABEL_846;
LABEL_848:
            if (*(_DWORD *)(v215 + 8) < 4u)
              goto LABEL_851;
            v326 = *(_QWORD *)(v215 + 64);
            if (!v326 || (*(_BYTE *)(v326 + 14) & 0x40) == 0)
              goto LABEL_851;
LABEL_873:
            v328 = 1;
            goto LABEL_874;
          }
          goto LABEL_846;
        case 169:
          v51 = (uint64_t *)(a1 + 14);
          v50 = (uint64_t)a1[14];
          if (v50 && (*(_BYTE *)(v50 + 16) & 0x20) != 0)
          {
            v52 = 1;
          }
          else
          {
            v50 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v50;
            if (!v50)
            {
LABEL_298:
              v50 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
              a1[14] = (uint64_t **)v50;
              if (!v50)
              {
LABEL_301:
                v50 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
                a1[14] = (uint64_t **)v50;
                if (!v50)
                {
LABEL_306:
                  v50 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
                  a1[14] = (uint64_t **)v50;
                  if (!v50)
                  {
LABEL_311:
                    v50 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 45);
                    a1[14] = (uint64_t **)v50;
                    if (!v50)
                    {
LABEL_316:
                      v176 = **a1;
                      v177 = (uint64_t *)(a1 + 14);
                      v178 = 2;
                      v179 = 66;
                      goto LABEL_465;
                    }
                    v52 = 0;
LABEL_313:
                    if (*(_DWORD *)(v50 + 8) < 4u)
                      goto LABEL_316;
                    v175 = *(_QWORD *)(v50 + 64);
                    if (!v175 || (*(_BYTE *)(v175 + 20) & 4) == 0)
                      goto LABEL_316;
LABEL_466:
                    if (*(_DWORD *)(v50 + 8) < 4u
                      || (v226 = *(_QWORD *)(v50 + 64)) == 0
                      || (*(_BYTE *)(v226 + 14) & 0x40) == 0)
                    {
LABEL_469:
                      v182 = **a1;
                      v183 = v51;
                      v184 = 2;
                      v185 = 22;
LABEL_886:
                      v334 = llvm::AttributeList::addAttributeAtIndex(v183, v182, v184, v185);
                      v335 = 0;
                      a1[14] = (uint64_t **)v334;
LABEL_888:
                      v332 = v52 & v335 ^ 1;
                      return v22 | v332;
                    }
LABEL_887:
                    v335 = 1;
                    goto LABEL_888;
                  }
                  v52 = 0;
LABEL_308:
                  if (*(_DWORD *)(v50 + 8) >= 3u)
                  {
                    v174 = *(_QWORD *)(v50 + 56);
                    if (v174)
                    {
                      if ((*(_BYTE *)(v174 + 17) & 0x20) != 0)
                        goto LABEL_313;
                    }
                  }
                  goto LABEL_311;
                }
                v52 = 0;
LABEL_303:
                if (*(_DWORD *)(v50 + 8) >= 3u)
                {
                  v173 = *(_QWORD *)(v50 + 56);
                  if (v173)
                  {
                    if ((*(_BYTE *)(v173 + 14) & 0x40) != 0)
                      goto LABEL_308;
                  }
                }
                goto LABEL_306;
              }
              v52 = 0;
LABEL_300:
              if ((*(_BYTE *)(v50 + 20) & 2) != 0)
                goto LABEL_303;
              goto LABEL_301;
            }
            v52 = 0;
          }
          if ((*(_BYTE *)(v50 + 12) & 8) != 0)
            goto LABEL_300;
          goto LABEL_298;
        case 170:
          v53 = (uint64_t)a1[14];
          if (v53 && (*(_BYTE *)(v53 + 16) & 0x20) != 0)
          {
            v52 = 1;
          }
          else
          {
            v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v53;
            if (!v53)
            {
LABEL_319:
              v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
              a1[14] = (uint64_t **)v53;
              if (!v53)
              {
LABEL_322:
                v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
                a1[14] = (uint64_t **)v53;
                if (!v53)
                  goto LABEL_327;
                v52 = 0;
LABEL_324:
                if (*(_DWORD *)(v53 + 8) >= 3u)
                {
                  v180 = *(_QWORD *)(v53 + 56);
                  if (v180)
                  {
                    if ((*(_BYTE *)(v180 + 14) & 0x40) != 0)
                    {
LABEL_328:
                      if (*(_DWORD *)(v53 + 8) >= 3u)
                      {
                        v181 = *(_QWORD *)(v53 + 56);
                        if (v181)
                        {
                          if ((*(_BYTE *)(v181 + 20) & 4) != 0)
                            goto LABEL_887;
                        }
                      }
LABEL_331:
                      v182 = **a1;
                      v183 = (uint64_t *)(a1 + 14);
                      v184 = 1;
                      v185 = 66;
                      goto LABEL_886;
                    }
                  }
                }
LABEL_327:
                v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
                v52 = 0;
                a1[14] = (uint64_t **)v53;
                if (!v53)
                  goto LABEL_331;
                goto LABEL_328;
              }
              v52 = 0;
LABEL_321:
              if ((*(_BYTE *)(v53 + 20) & 2) != 0)
                goto LABEL_324;
              goto LABEL_322;
            }
            v52 = 0;
          }
          if ((*(_BYTE *)(v53 + 12) & 8) != 0)
            goto LABEL_321;
          goto LABEL_319;
        case 174:
        case 455:
          v54 = sub_1C5EC7FB4((llvm::LLVMContext ***)a1, 0, 0x100000001);
          v56 = (uint64_t *)(a1 + 14);
          v55 = a1[14];
          if (v55 && (*((_BYTE *)v55 + 13) & 8) != 0)
          {
            v57 = 0;
          }
          else
          {
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 11);
            v57 = 1;
          }
          v186 = v54 | v57;
          v187 = sub_1C5EC8030((uint64_t)a1);
          v188 = v186 | v187 | sub_1C5EC80B0((uint64_t)a1);
          goto LABEL_711;
        case 219:
          v58 = sub_1C5EC8030((uint64_t)a1);
          v59 = v58 | sub_1C5EC80B0((uint64_t)a1);
          v61 = (uint64_t *)(a1 + 14);
          v60 = (uint64_t)a1[14];
          if (v60 && (*(_BYTE *)(v60 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v60 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v60;
            if (!v60)
            {
LABEL_338:
              v190 = **a1;
              v191 = (uint64_t *)(a1 + 14);
              v192 = 0;
              v193 = 19;
              goto LABEL_538;
            }
            v62 = 0;
          }
          if (*(_DWORD *)(v60 + 8) < 2u)
            goto LABEL_338;
          v189 = *(_QWORD *)(v60 + 48);
          if (!v189 || (*(_BYTE *)(v189 + 14) & 8) == 0)
            goto LABEL_338;
          goto LABEL_540;
        case 221:
          v63 = sub_1C5EC8030((uint64_t)a1);
          v64 = v63 | sub_1C5EC80B0((uint64_t)a1);
          v65 = (uint64_t)a1[14];
          if (v65 && (*(_BYTE *)(v65 + 16) & 0x20) != 0)
          {
            v66 = 1;
          }
          else
          {
            v65 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            v66 = 0;
            a1[14] = (uint64_t **)v65;
            if (!v65)
            {
LABEL_343:
              v195 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
              v196 = 0;
              a1[14] = (uint64_t **)v195;
              goto LABEL_705;
            }
          }
          if (*(_DWORD *)(v65 + 8) < 3u)
            goto LABEL_343;
          v194 = *(_QWORD *)(v65 + 56);
          if (!v194 || (*(_BYTE *)(v194 + 14) & 0x40) == 0)
            goto LABEL_343;
          v196 = 1;
LABEL_705:
          v83 = v64 | v66 & v196 ^ 1;
          v228 = v22 | sub_1C5EC7F60((uint64_t)a1);
          return v228 | v83;
        case 228:
        case 288:
          v67 = sub_1C5EC8030((uint64_t)a1);
          v59 = v67 | sub_1C5EC80B0((uint64_t)a1);
          v69 = (uint64_t *)(a1 + 14);
          v68 = (uint64_t)a1[14];
          if (v68 && (*(_BYTE *)(v68 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v68 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v68;
            if (!v68)
            {
LABEL_348:
              v75 = **a1;
              v76 = (uint64_t *)(a1 + 14);
              v77 = 1;
              v78 = 22;
LABEL_349:
              v68 = llvm::AttributeList::addAttributeAtIndex(v76, v75, v77, v78);
              v62 = 0;
              a1[14] = (uint64_t **)v68;
              if (!v68)
                goto LABEL_372;
LABEL_369:
              if (*(_DWORD *)(v68 + 8) < 4u
                || (v204 = *(_QWORD *)(v68 + 64)) == 0
                || (*(_BYTE *)(v204 + 14) & 0x40) == 0)
              {
LABEL_372:
                v199 = **a1;
                v200 = v69;
                v201 = 2;
                goto LABEL_494;
              }
              goto LABEL_867;
            }
            v62 = 0;
          }
          if (*(_DWORD *)(v68 + 8) >= 3u)
          {
            v197 = *(_QWORD *)(v68 + 56);
            if (v197)
            {
              if ((*(_BYTE *)(v197 + 14) & 0x40) != 0)
                goto LABEL_369;
            }
          }
          goto LABEL_348;
        case 229:
        case 230:
          v70 = sub_1C5EC8030((uint64_t)a1);
          v59 = v70 | sub_1C5EC80B0((uint64_t)a1);
          v71 = (uint64_t)a1[14];
          if (v71 && (*(_BYTE *)(v71 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v71 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            v62 = 0;
            a1[14] = (uint64_t **)v71;
            if (!v71)
            {
LABEL_355:
              v199 = **a1;
              v200 = (uint64_t *)(a1 + 14);
              v201 = 3;
              goto LABEL_494;
            }
          }
          if (*(_DWORD *)(v71 + 8) < 5u)
            goto LABEL_355;
          v198 = *(_QWORD *)(v71 + 72);
          if (!v198 || (*(_BYTE *)(v198 + 14) & 0x40) == 0)
            goto LABEL_355;
          goto LABEL_867;
        case 249:
        case 250:
        case 345:
          v72 = sub_1C5EC8030((uint64_t)a1);
          v59 = v72 | sub_1C5EC80B0((uint64_t)a1);
          v61 = (uint64_t *)(a1 + 14);
          v60 = (uint64_t)a1[14];
          if (v60 && (*(_BYTE *)(v60 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v60 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v60;
            if (!v60)
            {
LABEL_360:
              v136 = **a1;
              v137 = (uint64_t *)(a1 + 14);
              v138 = 0;
              v139 = 19;
LABEL_361:
              v60 = llvm::AttributeList::addAttributeAtIndex(v137, v136, v138, v139);
              a1[14] = (uint64_t **)v60;
              if (!v60)
              {
LABEL_549:
                v60 = llvm::AttributeList::addAttributeAtIndex(v61, **a1, 1, 22);
                a1[14] = (uint64_t **)v60;
                if (!v60)
                  goto LABEL_554;
                v62 = 0;
LABEL_551:
                if (*(_DWORD *)(v60 + 8) >= 4u)
                {
                  v253 = *(_QWORD *)(v60 + 64);
                  if (v253)
                  {
                    if ((*(_BYTE *)(v253 + 14) & 0x40) != 0)
                    {
LABEL_556:
                      if (*(_DWORD *)(v60 + 8) < 3u)
                        goto LABEL_559;
                      v254 = *(_QWORD *)(v60 + 56);
                      if (!v254 || (*(_BYTE *)(v254 + 17) & 0x20) == 0)
                        goto LABEL_559;
LABEL_561:
                      if (*(_DWORD *)(v60 + 8) < 4u
                        || (v255 = *(_QWORD *)(v60 + 64)) == 0
                        || (*(_BYTE *)(v255 + 17) & 0x20) == 0)
                      {
LABEL_564:
                        v199 = **a1;
                        v200 = v61;
                        v201 = 2;
                        goto LABEL_688;
                      }
LABEL_867:
                      v308 = 1;
LABEL_868:
                      v332 = v59 | v62 & v308 ^ 1;
                      return v22 | v332;
                    }
                  }
                }
LABEL_554:
                v60 = llvm::AttributeList::addAttributeAtIndex(v61, **a1, 2, 22);
                a1[14] = (uint64_t **)v60;
                if (!v60)
                {
LABEL_559:
                  v238 = **a1;
                  v239 = v61;
                  v240 = 1;
                  v251 = 45;
                  goto LABEL_560;
                }
                v62 = 0;
                goto LABEL_556;
              }
              v62 = 0;
LABEL_546:
              if (*(_DWORD *)(v60 + 8) >= 3u)
              {
                v252 = *(_QWORD *)(v60 + 56);
                if (v252)
                {
                  if ((*(_BYTE *)(v252 + 14) & 0x40) != 0)
                    goto LABEL_551;
                }
              }
              goto LABEL_549;
            }
            v62 = 0;
          }
          if (*(_DWORD *)(v60 + 8) >= 2u)
          {
            v202 = *(_QWORD *)(v60 + 48);
            if (v202)
            {
              if ((*(_BYTE *)(v202 + 14) & 8) != 0)
                goto LABEL_546;
            }
          }
          goto LABEL_360;
        case 252:
        case 263:
        case 459:
        case 460:
        case 464:
          v73 = sub_1C5EC8030((uint64_t)a1);
          v59 = v73 | sub_1C5EC80B0((uint64_t)a1);
          v61 = (uint64_t *)(a1 + 14);
          v60 = (uint64_t)a1[14];
          if (v60 && (*(_BYTE *)(v60 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v60 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v60;
            if (!v60)
              goto LABEL_367;
            v62 = 0;
          }
          if (*(_DWORD *)(v60 + 8) >= 3u)
          {
            v203 = *(_QWORD *)(v60 + 56);
            if (v203)
            {
              if ((*(_BYTE *)(v203 + 14) & 0x40) != 0)
              {
LABEL_540:
                if (*(_DWORD *)(v60 + 8) < 4u
                  || (v250 = *(_QWORD *)(v60 + 64)) == 0
                  || (*(_BYTE *)(v250 + 14) & 0x40) == 0)
                {
LABEL_543:
                  v238 = **a1;
                  v239 = v61;
                  v240 = 2;
LABEL_544:
                  v251 = 22;
LABEL_560:
                  v60 = llvm::AttributeList::addAttributeAtIndex(v239, v238, v240, v251);
                  v62 = 0;
                  a1[14] = (uint64_t **)v60;
                  if (!v60)
                    goto LABEL_564;
                }
                goto LABEL_561;
              }
            }
          }
LABEL_367:
          v190 = **a1;
          v191 = (uint64_t *)(a1 + 14);
          v192 = 1;
          v193 = 22;
          goto LABEL_538;
        case 255:
        case 256:
        case 315:
        case 316:
        case 360:
        case 397:
        case 398:
        case 399:
        case 400:
          v140 = sub_1C5EC8030((uint64_t)a1);
          v59 = v140 | sub_1C5EC80B0((uint64_t)a1);
          v109 = (uint64_t *)(a1 + 14);
          v108 = (uint64_t)a1[14];
          if (v108 && (*(_BYTE *)(v108 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v108 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v108;
            if (!v108)
              goto LABEL_569;
            v62 = 0;
          }
          if (*(_DWORD *)(v108 + 8) >= 3u)
          {
            v256 = *(_QWORD *)(v108 + 56);
            if (v256)
            {
              if ((*(_BYTE *)(v256 + 14) & 0x40) != 0)
              {
LABEL_571:
                if (*(_DWORD *)(v108 + 8) < 4u)
                  goto LABEL_574;
                v257 = *(_QWORD *)(v108 + 64);
                if (!v257 || (*(_BYTE *)(v257 + 14) & 0x40) == 0)
                  goto LABEL_574;
LABEL_576:
                if (*(_DWORD *)(v108 + 8) >= 3u)
                {
                  v258 = *(_QWORD *)(v108 + 56);
                  if (v258)
                  {
                    if ((*(_BYTE *)(v258 + 17) & 0x20) != 0)
                      goto LABEL_867;
                  }
                }
LABEL_579:
                v199 = **a1;
                v200 = v109;
                v201 = 1;
LABEL_688:
                v235 = 45;
LABEL_770:
                v307 = llvm::AttributeList::addAttributeAtIndex(v200, v199, v201, v235);
                v308 = 0;
                a1[14] = (uint64_t **)v307;
                goto LABEL_868;
              }
            }
          }
LABEL_569:
          v108 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
          a1[14] = (uint64_t **)v108;
          if (!v108)
          {
LABEL_574:
            v231 = **a1;
            v232 = (uint64_t *)(a1 + 14);
            v233 = 2;
            goto LABEL_575;
          }
          v62 = 0;
          goto LABEL_571;
        case 257:
        case 258:
        case 277:
        case 278:
          v79 = sub_1C5EC8030((uint64_t)a1);
          v59 = v79 | sub_1C5EC80B0((uint64_t)a1);
          v80 = (uint64_t)a1[14];
          if (v80 && (*(_BYTE *)(v80 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v80 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v80;
            if (!v80)
              goto LABEL_377;
            v62 = 0;
          }
          if (*(_DWORD *)(v80 + 8) >= 3u)
          {
            v205 = *(_QWORD *)(v80 + 56);
            if (v205)
            {
              if ((*(_BYTE *)(v205 + 14) & 0x40) != 0)
                goto LABEL_378;
            }
          }
LABEL_377:
          v80 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
          v62 = 0;
          a1[14] = (uint64_t **)v80;
          if (!v80)
            goto LABEL_381;
LABEL_378:
          if (*(_DWORD *)(v80 + 8) >= 6u)
          {
            v206 = *(_QWORD *)(v80 + 80);
            if (v206)
            {
              if ((*(_BYTE *)(v206 + 14) & 0x40) != 0)
                goto LABEL_867;
            }
          }
LABEL_381:
          v199 = **a1;
          v200 = (uint64_t *)(a1 + 14);
          v201 = 4;
LABEL_494:
          v235 = 22;
          goto LABEL_770;
        case 259:
        case 456:
          v46 = (uint64_t *)(a1 + 14);
          v81 = a1[14];
          if (v81 && (*((_BYTE *)v81 + 13) & 0x10) != 0)
          {
            v33 = 1;
          }
          else
          {
            v33 = 0;
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 12);
          }
          v31 = sub_1C5EC80B0((uint64_t)a1);
          v106 = (uint64_t)a1[14];
          if (!v106 || (*(_BYTE *)(v106 + 16) & 0x20) == 0)
            goto LABEL_385;
          goto LABEL_387;
        case 260:
        case 261:
        case 262:
        case 332:
        case 333:
        case 334:
          v51 = (uint64_t *)(a1 + 14);
          v50 = (uint64_t)a1[14];
          if (v50 && (*(_BYTE *)(v50 + 16) & 0x20) != 0)
          {
            v52 = 1;
          }
          else
          {
            v50 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v50;
            if (!v50)
              goto LABEL_464;
            v52 = 0;
          }
          if ((*(_BYTE *)(v50 + 20) & 2) != 0)
            goto LABEL_466;
LABEL_464:
          v176 = **a1;
          v177 = (uint64_t *)(a1 + 14);
          v178 = -1;
          v179 = 65;
LABEL_465:
          v50 = llvm::AttributeList::addAttributeAtIndex(v177, v176, v178, v179);
          v52 = 0;
          a1[14] = (uint64_t **)v50;
          if (v50)
            goto LABEL_466;
          goto LABEL_469;
        case 281:
        case 282:
        case 287:
          v82 = sub_1C5EC8030((uint64_t)a1);
          v83 = v82 | sub_1C5EC80B0((uint64_t)a1);
          goto LABEL_162;
        case 283:
          v84 = sub_1C5EC8030((uint64_t)a1);
          v85 = v84 | sub_1C5EC80B0((uint64_t)a1);
          v86 = a1[14];
          if (v86 && ((_BYTE)v86[2] & 0x20) != 0)
          {
            v87 = 0;
          }
          else
          {
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            v87 = 1;
          }
          v188 = v85 | v87 | sub_1C5EC7F60((uint64_t)a1);
          v208 = a1[14];
          if (v208 && *((_DWORD *)v208 + 2) >= 3u && (v209 = v208[7]) != 0 && (*((_BYTE *)v209 + 14) & 0x40) != 0)
          {
            v210 = 0;
          }
          else
          {
            v210 = 1;
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
          }
          v294 = v22 | v210;
          return v294 | v188;
        case 289:
        case 290:
        case 338:
        case 339:
          v88 = (uint64_t)a1[14];
          if (v88 && (*(_BYTE *)(v88 + 16) & 0x20) != 0)
          {
            v52 = 1;
          }
          else
          {
            v88 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            v52 = 0;
            a1[14] = (uint64_t **)v88;
            if (!v88)
              goto LABEL_401;
          }
          if ((*(_BYTE *)(v88 + 17) & 0x10) != 0)
            goto LABEL_887;
LABEL_401:
          v182 = **a1;
          v183 = (uint64_t *)(a1 + 14);
          v184 = -1;
          v185 = 44;
          goto LABEL_886;
        case 296:
        case 297:
        case 298:
          v83 = sub_1C5EC8158((uint64_t)a1, 1, *a2);
          v89 = (uint64_t *)(a1 + 14);
          v90 = a1[14];
          if (v90 && (*((_BYTE *)v90 + 20) & 2) != 0)
            goto LABEL_477;
          v91 = **a1;
          v92 = -1;
          v93 = 65;
          goto LABEL_176;
        case 317:
        case 454:
        case 457:
LABEL_287:
          v169 = v22 | sub_1C5EC7FB4((llvm::LLVMContext ***)a1, 0, 0);
          v170 = a1[14];
          if (v170 && (*((_BYTE *)v170 + 13) & 8) != 0)
          {
            v171 = 0;
          }
          else
          {
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 11);
            v171 = 1;
          }
          v289 = v169 | v171;
          v290 = sub_1C5EC8030((uint64_t)a1);
          v291 = v289 | v290 | sub_1C5EC80B0((uint64_t)a1);
          v292 = (uint64_t)a1[14];
          if (v292 && (*(_BYTE *)(v292 + 16) & 0x20) != 0)
          {
            v293 = 1;
          }
          else
          {
            v292 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v292;
            if (!v292)
              goto LABEL_839;
            v293 = 0;
          }
          if (*(_DWORD *)(v292 + 8) >= 2u)
          {
            v322 = *(_QWORD *)(v292 + 48);
            if (v322)
            {
              if ((*(_BYTE *)(v322 + 14) & 8) != 0)
                goto LABEL_840;
            }
          }
LABEL_839:
          v292 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 0, 19);
          v293 = 0;
          a1[14] = (uint64_t **)v292;
          if (!v292)
          {
LABEL_841:
            v323 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
            v324 = 0;
            a1[14] = (uint64_t **)v323;
            return v291 | v293 & v324 ^ 1u;
          }
LABEL_840:
          if ((*(_BYTE *)(v292 + 20) & 2) == 0)
            goto LABEL_841;
          v324 = 1;
          return v291 | v293 & v324 ^ 1u;
        case 318:
          v94 = sub_1C5EC7FB4((llvm::LLVMContext ***)a1, 1, 0);
          v56 = (uint64_t *)(a1 + 14);
          v95 = (uint64_t)a1[14];
          if (v95
            && *(_DWORD *)(v95 + 8) >= 3u
            && (v96 = *(_QWORD *)(v95 + 56)) != 0
            && (*(_BYTE *)(v96 + 12) & 2) != 0)
          {
            v97 = 1;
          }
          else
          {
            v95 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 1);
            v97 = 0;
            a1[14] = (uint64_t **)v95;
            if (!v95)
              goto LABEL_404;
          }
          if ((*(_BYTE *)(v95 + 13) & 8) == 0)
          {
LABEL_404:
            v211 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 11);
            v212 = 0;
            a1[14] = (uint64_t **)v211;
            goto LABEL_710;
          }
          v212 = 1;
LABEL_710:
          v188 = sub_1C5EC8030((uint64_t)a1) | v94 | v97 & v212 ^ 1;
LABEL_711:
          v295 = (uint64_t)a1[14];
          if (v295 && (*(_BYTE *)(v295 + 16) & 0x20) != 0)
          {
            v296 = 1;
          }
          else
          {
            v295 = llvm::AttributeList::addAttributeAtIndex(v56, **a1, -1, 37);
            a1[14] = (uint64_t **)v295;
            if (!v295)
              goto LABEL_858;
            v296 = 0;
          }
          if (*(_DWORD *)(v295 + 8) >= 2u)
          {
            v329 = *(_QWORD *)(v295 + 48);
            if (v329)
            {
              if ((*(_BYTE *)(v329 + 14) & 8) != 0)
                goto LABEL_859;
            }
          }
LABEL_858:
          v295 = llvm::AttributeList::addAttributeAtIndex(v56, **a1, 0, 19);
          v296 = 0;
          a1[14] = (uint64_t **)v295;
          if (!v295)
          {
LABEL_860:
            v330 = llvm::AttributeList::addAttributeAtIndex(v56, **a1, -1, 65);
            v331 = 0;
            a1[14] = (uint64_t **)v330;
            goto LABEL_877;
          }
LABEL_859:
          if ((*(_BYTE *)(v295 + 20) & 2) == 0)
            goto LABEL_860;
          v331 = 1;
LABEL_877:
          v294 = v22 | v296 & v331 ^ 1;
          return v294 | v188;
        case 319:
        case 324:
          v28 = (uint64_t)a1[14];
          if (v28 && (*(_BYTE *)(v28 + 20) & 2) != 0)
          {
            v98 = 0;
          }
          else
          {
            v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
            a1[14] = (uint64_t **)v28;
            v98 = 1;
          }
          v22 |= v98;
LABEL_407:
          v37 = (uint64_t *)(a1 + 14);
          if (v28 && (*(_BYTE *)(v28 + 16) & 0x20) != 0)
          {
            v52 = 1;
          }
          else
          {
            v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v28;
            if (!v28)
            {
LABEL_717:
              v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
              a1[14] = (uint64_t **)v28;
              if (!v28)
              {
LABEL_722:
                v218 = **a1;
                v219 = (uint64_t *)(a1 + 14);
                v220 = 19;
                goto LABEL_723;
              }
              v52 = 0;
LABEL_719:
              if (*(_DWORD *)(v28 + 8) < 3u)
                goto LABEL_722;
              v297 = *(_QWORD *)(v28 + 56);
              if (!v297 || (*(_BYTE *)(v297 + 14) & 8) == 0)
                goto LABEL_722;
LABEL_725:
              if (*(_DWORD *)(v28 + 8) < 3u || (v298 = *(_QWORD *)(v28 + 56)) == 0 || (*(_BYTE *)(v298 + 20) & 4) == 0)
              {
LABEL_728:
                v28 = llvm::AttributeList::addAttributeAtIndex(v37, **a1, 1, 66);
                a1[14] = (uint64_t **)v28;
                if (!v28)
                {
LABEL_733:
                  v38 = **a1;
                  v39 = v37;
                  v40 = 2;
                  v41 = 19;
LABEL_734:
                  v28 = llvm::AttributeList::addAttributeAtIndex(v39, v38, v40, v41);
                  a1[14] = (uint64_t **)v28;
                  if (!v28)
                  {
LABEL_739:
                    v28 = llvm::AttributeList::addAttributeAtIndex(v37, **a1, 2, 22);
                    v52 = 0;
                    a1[14] = (uint64_t **)v28;
                    if (!v28)
                    {
LABEL_743:
                      v182 = **a1;
                      v183 = v37;
                      v184 = 2;
                      goto LABEL_831;
                    }
LABEL_740:
                    if (*(_DWORD *)(v28 + 8) >= 4u)
                    {
                      v301 = *(_QWORD *)(v28 + 64);
                      if (v301)
                      {
                        if ((*(_BYTE *)(v301 + 17) & 0x20) != 0)
                          goto LABEL_887;
                      }
                    }
                    goto LABEL_743;
                  }
                  v52 = 0;
LABEL_736:
                  if (*(_DWORD *)(v28 + 8) >= 4u)
                  {
                    v300 = *(_QWORD *)(v28 + 64);
                    if (v300)
                    {
                      if ((*(_BYTE *)(v300 + 14) & 0x40) != 0)
                        goto LABEL_740;
                    }
                  }
                  goto LABEL_739;
                }
                v52 = 0;
              }
              if (*(_DWORD *)(v28 + 8) >= 4u)
              {
                v299 = *(_QWORD *)(v28 + 64);
                if (v299)
                {
                  if ((*(_BYTE *)(v299 + 14) & 8) != 0)
                    goto LABEL_736;
                }
              }
              goto LABEL_733;
            }
            v52 = 0;
          }
          if ((*(_BYTE *)(v28 + 12) & 8) != 0)
            goto LABEL_719;
          goto LABEL_717;
        case 320:
        case 325:
          v100 = (uint64_t *)(a1 + 14);
          v99 = (uint64_t)a1[14];
          if (v99 && (*(_BYTE *)(v99 + 16) & 0x20) != 0)
          {
            v101 = 1;
          }
          else
          {
            v99 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            v101 = 0;
            a1[14] = (uint64_t **)v99;
            if (!v99)
              goto LABEL_413;
          }
          if ((*(_BYTE *)(v99 + 12) & 8) != 0)
          {
            v214 = 1;
LABEL_745:
            v33 = v101 & v214;
            v31 = sub_1C5EC7F60((uint64_t)a1);
            v302 = a1[14];
            if (!v302 || (*((_BYTE *)v302 + 20) & 2) == 0)
            {
LABEL_747:
              v165 = **a1;
              v166 = v100;
              v167 = -1;
              v168 = 65;
LABEL_853:
              v327 = llvm::AttributeList::addAttributeAtIndex(v166, v165, v167, v168);
              v328 = 0;
              a1[14] = (uint64_t **)v327;
LABEL_874:
              v315 = v33 & v328 ^ 1;
              v316 = v22 | v31;
              return v316 | v315;
            }
            goto LABEL_873;
          }
LABEL_413:
          v213 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          v214 = 0;
          a1[14] = (uint64_t **)v213;
          goto LABEL_745;
        case 321:
          v48 = (uint64_t *)(a1 + 14);
          v102 = a1[14];
          if (v102 && (*((_BYTE *)v102 + 12) & 8) != 0)
          {
            v33 = 1;
          }
          else
          {
            v33 = 0;
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          }
          v31 = sub_1C5EC7F60((uint64_t)a1);
          v215 = (uint64_t)a1[14];
          if (v215 && (*(_BYTE *)(v215 + 16) & 0x20) != 0)
            goto LABEL_419;
          v215 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
          a1[14] = (uint64_t **)v215;
          if (v215)
          {
            v33 = 0;
LABEL_419:
            if ((*(_BYTE *)(v215 + 20) & 2) != 0)
              goto LABEL_843;
          }
          goto LABEL_702;
        case 322:
          v37 = (uint64_t *)(a1 + 14);
          v28 = (uint64_t)a1[14];
          if (v28 && (*(_BYTE *)(v28 + 16) & 0x20) != 0)
          {
            v52 = 1;
          }
          else
          {
            v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v28;
            if (!v28)
              goto LABEL_423;
            v52 = 0;
          }
          if ((*(_BYTE *)(v28 + 12) & 8) != 0)
            goto LABEL_425;
LABEL_423:
          v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          a1[14] = (uint64_t **)v28;
          if (!v28)
            goto LABEL_426;
          v52 = 0;
LABEL_425:
          if ((*(_BYTE *)(v28 + 20) & 2) != 0)
            goto LABEL_428;
LABEL_426:
          v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
          a1[14] = (uint64_t **)v28;
          if (!v28)
            goto LABEL_431;
          v52 = 0;
LABEL_428:
          if (*(_DWORD *)(v28 + 8) >= 3u)
          {
            v216 = *(_QWORD *)(v28 + 56);
            if (v216)
            {
              if ((*(_BYTE *)(v216 + 14) & 8) != 0)
                goto LABEL_433;
            }
          }
LABEL_431:
          v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 19);
          a1[14] = (uint64_t **)v28;
          if (!v28)
            goto LABEL_436;
          v52 = 0;
LABEL_433:
          if (*(_DWORD *)(v28 + 8) >= 3u)
          {
            v217 = *(_QWORD *)(v28 + 56);
            if (v217)
            {
              if ((*(_BYTE *)(v217 + 17) & 0x40) != 0)
                goto LABEL_725;
            }
          }
LABEL_436:
          v218 = **a1;
          v219 = (uint64_t *)(a1 + 14);
          v220 = 46;
LABEL_723:
          v28 = llvm::AttributeList::addAttributeAtIndex(v219, v218, 1, v220);
          a1[14] = (uint64_t **)v28;
          if (v28)
          {
            v52 = 0;
            goto LABEL_725;
          }
          goto LABEL_728;
        case 323:
          v37 = (uint64_t *)(a1 + 14);
          v28 = (uint64_t)a1[14];
          if (v28 && (*(_BYTE *)(v28 + 16) & 0x20) != 0)
          {
            v52 = 1;
          }
          else
          {
            v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v28;
            if (!v28)
            {
LABEL_439:
              v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
              a1[14] = (uint64_t **)v28;
              if (!v28)
              {
LABEL_442:
                v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
                a1[14] = (uint64_t **)v28;
                if (!v28)
                {
LABEL_447:
                  v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 46);
                  a1[14] = (uint64_t **)v28;
                  if (!v28)
                    goto LABEL_452;
                  v52 = 0;
LABEL_449:
                  if (*(_DWORD *)(v28 + 8) >= 3u)
                  {
                    v222 = *(_QWORD *)(v28 + 56);
                    if (v222)
                    {
                      if ((*(_BYTE *)(v222 + 20) & 4) != 0)
                        goto LABEL_736;
                    }
                  }
LABEL_452:
                  v38 = **a1;
                  v39 = (uint64_t *)(a1 + 14);
                  v40 = 1;
                  v41 = 66;
                  goto LABEL_734;
                }
                v52 = 0;
LABEL_444:
                if (*(_DWORD *)(v28 + 8) >= 3u)
                {
                  v221 = *(_QWORD *)(v28 + 56);
                  if (v221)
                  {
                    if ((*(_BYTE *)(v221 + 17) & 0x40) != 0)
                      goto LABEL_449;
                  }
                }
                goto LABEL_447;
              }
              v52 = 0;
LABEL_441:
              if ((*(_BYTE *)(v28 + 20) & 2) != 0)
                goto LABEL_444;
              goto LABEL_442;
            }
            v52 = 0;
          }
          if ((*(_BYTE *)(v28 + 12) & 8) != 0)
            goto LABEL_441;
          goto LABEL_439;
        case 326:
          v29 = (uint64_t)a1[14];
          goto LABEL_750;
        case 327:
        case 328:
        case 329:
          v29 = (uint64_t)a1[14];
          if (v29
            && *(_DWORD *)(v29 + 8) >= 3u
            && (v103 = *(_QWORD *)(v29 + 56)) != 0
            && (*(_BYTE *)(v103 + 14) & 0x40) != 0)
          {
            v104 = 1;
          }
          else
          {
            v29 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
            a1[14] = (uint64_t **)v29;
            if (!v29)
            {
LABEL_457:
              v29 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 22);
              v104 = 0;
              a1[14] = (uint64_t **)v29;
              if (!v29)
              {
LABEL_461:
                v29 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 45);
                v225 = 0;
                a1[14] = (uint64_t **)v29;
                goto LABEL_749;
              }
LABEL_458:
              if (*(_DWORD *)(v29 + 8) < 4u)
                goto LABEL_461;
              v224 = *(_QWORD *)(v29 + 64);
              if (!v224 || (*(_BYTE *)(v224 + 17) & 0x20) == 0)
                goto LABEL_461;
              v225 = 1;
LABEL_749:
              v22 |= v104 & v225 ^ 1;
LABEL_750:
              if (v29 && (*(_BYTE *)(v29 + 20) & 2) != 0)
              {
                v303 = 0;
              }
              else
              {
                v29 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
                a1[14] = (uint64_t **)v29;
                v303 = 1;
              }
              v22 |= v303;
LABEL_863:
              if (v29 && (*(_BYTE *)(v29 + 12) & 8) != 0)
              {
                v52 = 1;
              }
              else
              {
                v29 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
                a1[14] = (uint64_t **)v29;
                if (!v29)
                  goto LABEL_883;
                v52 = 0;
              }
              if (*(_DWORD *)(v29 + 8) >= 3u)
              {
                v333 = *(_QWORD *)(v29 + 56);
                if (v333)
                {
                  if ((*(_BYTE *)(v333 + 20) & 4) != 0)
                  {
LABEL_884:
                    if ((*(_BYTE *)(v29 + 16) & 0x20) != 0)
                      goto LABEL_887;
LABEL_885:
                    v182 = **a1;
                    v183 = (uint64_t *)(a1 + 14);
                    v184 = -1;
                    v185 = 37;
                    goto LABEL_886;
                  }
                }
              }
LABEL_883:
              v29 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 66);
              v52 = 0;
              a1[14] = (uint64_t **)v29;
              if (!v29)
                goto LABEL_885;
              goto LABEL_884;
            }
            v104 = 0;
          }
          if (*(_DWORD *)(v29 + 8) >= 4u)
          {
            v223 = *(_QWORD *)(v29 + 64);
            if (v223)
            {
              if ((*(_BYTE *)(v223 + 14) & 0x40) != 0)
                goto LABEL_458;
            }
          }
          goto LABEL_457;
        case 331:
          v105 = sub_1C5EC8030((uint64_t)a1);
          v31 = v105 | sub_1C5EC80B0((uint64_t)a1);
          v46 = (uint64_t *)(a1 + 14);
          v106 = (uint64_t)a1[14];
          if (v106 && (*(_BYTE *)(v106 + 16) & 0x20) != 0)
          {
            v33 = 1;
          }
          else
          {
LABEL_385:
            v106 = llvm::AttributeList::addAttributeAtIndex(v46, **a1, -1, 37);
            a1[14] = (uint64_t **)v106;
            if (!v106)
              goto LABEL_388;
            v33 = 0;
          }
LABEL_387:
          if ((*(_BYTE *)(v106 + 20) & 2) != 0)
          {
LABEL_389:
            if (*(_DWORD *)(v106 + 8) >= 3u)
            {
              v207 = *(_QWORD *)(v106 + 56);
              if (v207)
              {
                if ((*(_BYTE *)(v207 + 14) & 0x40) != 0)
                  goto LABEL_873;
              }
            }
LABEL_392:
            v165 = **a1;
            v166 = v46;
            v167 = 1;
            goto LABEL_852;
          }
LABEL_388:
          v106 = llvm::AttributeList::addAttributeAtIndex(v46, **a1, -1, 65);
          v33 = 0;
          a1[14] = (uint64_t **)v106;
          if (!v106)
            goto LABEL_392;
          goto LABEL_389;
        case 340:
        case 341:
        case 434:
          v157 = sub_1C5EC8030((uint64_t)a1);
          v59 = v157 | sub_1C5EC80B0((uint64_t)a1);
          v109 = (uint64_t *)(a1 + 14);
          v108 = (uint64_t)a1[14];
          if (!v108)
            goto LABEL_488;
          if (*(_DWORD *)(v108 + 8) < 3u)
            goto LABEL_488;
          v158 = *(_QWORD *)(v108 + 56);
          if (!v158 || (*(_BYTE *)(v158 + 14) & 0x40) == 0)
            goto LABEL_488;
          v62 = 1;
          goto LABEL_576;
        case 342:
          v107 = sub_1C5EC8030((uint64_t)a1);
          v59 = v107 | sub_1C5EC80B0((uint64_t)a1);
          v109 = (uint64_t *)(a1 + 14);
          v108 = (uint64_t)a1[14];
          if (v108 && (*(_BYTE *)(v108 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v108 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v108;
            if (!v108)
              goto LABEL_474;
            v62 = 0;
          }
          if (*(_DWORD *)(v108 + 8) >= 2u)
          {
            v227 = *(_QWORD *)(v108 + 48);
            if (v227)
            {
              if ((*(_BYTE *)(v227 + 14) & 8) != 0)
                goto LABEL_485;
            }
          }
LABEL_474:
          v124 = **a1;
          v125 = (uint64_t *)(a1 + 14);
          v126 = 0;
          v127 = 19;
LABEL_475:
          v108 = llvm::AttributeList::addAttributeAtIndex(v125, v124, v126, v127);
          a1[14] = (uint64_t **)v108;
          if (!v108)
            goto LABEL_488;
          v62 = 0;
LABEL_485:
          if (*(_DWORD *)(v108 + 8) >= 3u)
          {
            v230 = *(_QWORD *)(v108 + 56);
            if (v230)
            {
              if ((*(_BYTE *)(v230 + 14) & 0x40) != 0)
                goto LABEL_576;
            }
          }
LABEL_488:
          v231 = **a1;
          v232 = v109;
          v233 = 1;
LABEL_575:
          v108 = llvm::AttributeList::addAttributeAtIndex(v232, v231, v233, 22);
          v62 = 0;
          a1[14] = (uint64_t **)v108;
          if (v108)
            goto LABEL_576;
          goto LABEL_579;
        case 350:
        case 359:
          v116 = sub_1C5EC8030((uint64_t)a1);
          v83 = v116 | sub_1C5EC80B0((uint64_t)a1);
          v89 = (uint64_t *)(a1 + 14);
          v117 = a1[14];
          if (v117)
          {
            if (*((_DWORD *)v117 + 2) >= 4u)
            {
              v118 = v117[8];
              if (v118)
              {
                if ((*((_BYTE *)v118 + 14) & 0x40) != 0)
                  goto LABEL_477;
              }
            }
          }
          v91 = **a1;
          v92 = 2;
          goto LABEL_175;
        case 354:
        case 355:
          v110 = sub_1C5EC8030((uint64_t)a1);
          v111 = v110 | sub_1C5EC80B0((uint64_t)a1);
          v83 = v111 | sub_1C5EC8158((uint64_t)a1, 0, *a2);
LABEL_162:
          v89 = (uint64_t *)(a1 + 14);
          v112 = a1[14];
          if (v112 && ((_BYTE)v112[2] & 0x20) != 0)
            goto LABEL_477;
          v91 = **a1;
          v92 = -1;
          v93 = 37;
          goto LABEL_176;
        case 357:
        case 467:
          v162 = sub_1C5EC8030((uint64_t)a1);
          v59 = v162 | sub_1C5EC80B0((uint64_t)a1);
          v61 = (uint64_t *)(a1 + 14);
          v60 = (uint64_t)a1[14];
          if (!v60)
            goto LABEL_543;
          if (*(_DWORD *)(v60 + 8) < 4u)
            goto LABEL_543;
          v163 = *(_QWORD *)(v60 + 64);
          if (!v163 || (*(_BYTE *)(v163 + 14) & 0x40) == 0)
            goto LABEL_543;
          v62 = 1;
          goto LABEL_561;
        case 358:
          v113 = sub_1C5EC8030((uint64_t)a1);
          v83 = v113 | sub_1C5EC80B0((uint64_t)a1);
          v89 = (uint64_t *)(a1 + 14);
          v114 = a1[14];
          if (v114 && *((_DWORD *)v114 + 2) >= 6u && (v115 = v114[10]) != 0 && (*((_BYTE *)v115 + 14) & 0x40) != 0)
          {
LABEL_477:
            v119 = 0;
          }
          else
          {
            v91 = **a1;
            v92 = 4;
LABEL_175:
            v93 = 22;
LABEL_176:
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex(v89, v91, v92, v93);
            v119 = 1;
          }
          v228 = v22 | v119;
          return v228 | v83;
        case 361:
        case 362:
        case 458:
          v120 = sub_1C5EC7FB4((llvm::LLVMContext ***)a1, 1, 0);
          v121 = a1[14];
          if (v121 && (*((_BYTE *)v121 + 13) & 0x10) != 0)
          {
            v122 = 0;
          }
          else
          {
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 12);
            v122 = 1;
          }
          v59 = v120 | v122 | sub_1C5EC8030((uint64_t)a1);
          v229 = (uint64_t)a1[14];
          if (v229 && (*(_BYTE *)(v229 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v229 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v229;
            if (!v229)
            {
LABEL_757:
              v229 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 0, 19);
              a1[14] = (uint64_t **)v229;
              if (!v229)
              {
LABEL_760:
                v229 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
                a1[14] = (uint64_t **)v229;
                if (!v229)
                  goto LABEL_765;
                v62 = 0;
LABEL_762:
                if (*(_DWORD *)(v229 + 8) >= 3u)
                {
                  v305 = *(_QWORD *)(v229 + 56);
                  if (v305)
                  {
                    if ((*(_BYTE *)(v305 + 14) & 0x40) != 0)
                    {
LABEL_766:
                      if (*(_DWORD *)(v229 + 8) >= 4u)
                      {
                        v306 = *(_QWORD *)(v229 + 64);
                        if (v306)
                        {
                          if ((*(_BYTE *)(v306 + 16) & 0x10) != 0)
                            goto LABEL_867;
                        }
                      }
LABEL_769:
                      v199 = **a1;
                      v200 = (uint64_t *)(a1 + 14);
                      v201 = 2;
                      v235 = 36;
                      goto LABEL_770;
                    }
                  }
                }
LABEL_765:
                v229 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
                v62 = 0;
                a1[14] = (uint64_t **)v229;
                if (!v229)
                  goto LABEL_769;
                goto LABEL_766;
              }
              v62 = 0;
LABEL_759:
              if ((*(_BYTE *)(v229 + 20) & 2) != 0)
                goto LABEL_762;
              goto LABEL_760;
            }
            v62 = 0;
          }
          if (*(_DWORD *)(v229 + 8) >= 2u)
          {
            v304 = *(_QWORD *)(v229 + 48);
            if (v304)
            {
              if ((*(_BYTE *)(v304 + 14) & 8) != 0)
                goto LABEL_759;
            }
          }
          goto LABEL_757;
        case 382:
          v130 = sub_1C5EC8030((uint64_t)a1);
          v59 = v130 | sub_1C5EC80B0((uint64_t)a1);
          v61 = (uint64_t *)(a1 + 14);
          v60 = (uint64_t)a1[14];
          if (v60 && (*(_BYTE *)(v60 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v60 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v60;
            if (!v60)
            {
LABEL_497:
              v60 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
              a1[14] = (uint64_t **)v60;
              if (!v60)
              {
LABEL_502:
                v60 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 22);
                a1[14] = (uint64_t **)v60;
                if (!v60)
                  goto LABEL_507;
                v62 = 0;
LABEL_504:
                if (*(_DWORD *)(v60 + 8) >= 5u)
                {
                  v237 = *(_QWORD *)(v60 + 72);
                  if (v237)
                  {
                    if ((*(_BYTE *)(v237 + 14) & 0x40) != 0)
                      goto LABEL_561;
                  }
                }
LABEL_507:
                v238 = **a1;
                v239 = (uint64_t *)(a1 + 14);
                v240 = 3;
                goto LABEL_544;
              }
              v62 = 0;
LABEL_499:
              if (*(_DWORD *)(v60 + 8) >= 4u)
              {
                v236 = *(_QWORD *)(v60 + 64);
                if (v236)
                {
                  if ((*(_BYTE *)(v236 + 14) & 0x40) != 0)
                    goto LABEL_504;
                }
              }
              goto LABEL_502;
            }
            v62 = 0;
          }
          if ((*(_BYTE *)(v60 + 20) & 2) != 0)
            goto LABEL_499;
          goto LABEL_497;
        case 391:
          v131 = sub_1C5EC8030((uint64_t)a1);
          v59 = v131 | sub_1C5EC80B0((uint64_t)a1);
          v133 = (uint64_t *)(a1 + 14);
          v132 = (uint64_t)a1[14];
          if (v132 && (*(_BYTE *)(v132 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v132 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v132;
            if (!v132)
            {
LABEL_512:
              v132 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
              a1[14] = (uint64_t **)v132;
              if (!v132)
              {
LABEL_517:
                v132 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 19);
                a1[14] = (uint64_t **)v132;
                if (!v132)
                {
LABEL_522:
                  v244 = **a1;
                  v245 = (uint64_t *)(a1 + 14);
                  v246 = 66;
                  goto LABEL_678;
                }
                v62 = 0;
LABEL_519:
                if (*(_DWORD *)(v132 + 8) < 3u)
                  goto LABEL_522;
                v243 = *(_QWORD *)(v132 + 56);
                if (!v243 || (*(_BYTE *)(v243 + 20) & 4) == 0)
                  goto LABEL_522;
LABEL_680:
                if (*(_DWORD *)(v132 + 8) < 5u
                  || (v286 = *(_QWORD *)(v132 + 72)) == 0
                  || (*(_BYTE *)(v286 + 14) & 0x40) == 0)
                {
LABEL_683:
                  v132 = llvm::AttributeList::addAttributeAtIndex(v133, **a1, 3, 22);
                  v62 = 0;
                  a1[14] = (uint64_t **)v132;
                  if (!v132)
                  {
LABEL_687:
                    v199 = **a1;
                    v200 = v133;
                    v201 = 3;
                    goto LABEL_688;
                  }
                }
                if (*(_DWORD *)(v132 + 8) >= 5u)
                {
                  v287 = *(_QWORD *)(v132 + 72);
                  if (v287)
                  {
                    if ((*(_BYTE *)(v287 + 17) & 0x20) != 0)
                      goto LABEL_867;
                  }
                }
                goto LABEL_687;
              }
              v62 = 0;
LABEL_514:
              if (*(_DWORD *)(v132 + 8) >= 3u)
              {
                v242 = *(_QWORD *)(v132 + 56);
                if (v242)
                {
                  if ((*(_BYTE *)(v242 + 14) & 8) != 0)
                    goto LABEL_519;
                }
              }
              goto LABEL_517;
            }
            v62 = 0;
          }
          if (*(_DWORD *)(v132 + 8) >= 3u)
          {
            v241 = *(_QWORD *)(v132 + 56);
            if (v241)
            {
              if ((*(_BYTE *)(v241 + 14) & 0x40) != 0)
                goto LABEL_514;
            }
          }
          goto LABEL_512;
        case 392:
          v134 = sub_1C5EC8030((uint64_t)a1);
          v59 = v134 | sub_1C5EC80B0((uint64_t)a1);
          v61 = (uint64_t *)(a1 + 14);
          v60 = (uint64_t)a1[14];
          if (v60 && (*(_BYTE *)(v60 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v60 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v60;
            if (!v60)
              goto LABEL_527;
            v62 = 0;
          }
          if (*(_DWORD *)(v60 + 8) >= 3u)
          {
            v247 = *(_QWORD *)(v60 + 56);
            if (v247)
            {
              if ((*(_BYTE *)(v247 + 14) & 0x40) != 0)
                goto LABEL_529;
            }
          }
LABEL_527:
          v60 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
          a1[14] = (uint64_t **)v60;
          if (!v60)
            goto LABEL_532;
          v62 = 0;
LABEL_529:
          if (*(_DWORD *)(v60 + 8) >= 3u)
          {
            v248 = *(_QWORD *)(v60 + 56);
            if (v248)
            {
              if ((*(_BYTE *)(v248 + 14) & 8) != 0)
                goto LABEL_534;
            }
          }
LABEL_532:
          v60 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 19);
          a1[14] = (uint64_t **)v60;
          if (!v60)
            goto LABEL_537;
          v62 = 0;
LABEL_534:
          if (*(_DWORD *)(v60 + 8) >= 3u)
          {
            v249 = *(_QWORD *)(v60 + 56);
            if (v249)
            {
              if ((*(_BYTE *)(v249 + 20) & 4) != 0)
                goto LABEL_540;
            }
          }
LABEL_537:
          v190 = **a1;
          v191 = (uint64_t *)(a1 + 14);
          v192 = 1;
          v193 = 66;
LABEL_538:
          v60 = llvm::AttributeList::addAttributeAtIndex(v191, v190, v192, v193);
          a1[14] = (uint64_t **)v60;
          if (v60)
          {
            v62 = 0;
            goto LABEL_540;
          }
          goto LABEL_543;
        case 401:
        case 402:
          goto LABEL_621;
        case 403:
        case 407:
        case 414:
          v141 = sub_1C5EC7F60((uint64_t)a1);
          v142 = (uint64_t)a1[14];
          if (v142 && (*(_BYTE *)(v142 + 16) & 0x20) != 0)
          {
            v143 = 1;
          }
          else
          {
            v142 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v142;
            if (!v142)
            {
LABEL_582:
              v142 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
              a1[14] = (uint64_t **)v142;
              if (!v142)
                goto LABEL_587;
              v143 = 0;
LABEL_584:
              if (*(_DWORD *)(v142 + 8) >= 3u)
              {
                v259 = *(_QWORD *)(v142 + 56);
                if (v259)
                {
                  if ((*(_BYTE *)(v259 + 14) & 0x40) != 0)
                  {
LABEL_588:
                    if (*(_DWORD *)(v142 + 8) >= 4u)
                    {
                      v260 = *(_QWORD *)(v142 + 64);
                      if (v260)
                      {
                        if ((*(_BYTE *)(v260 + 14) & 0x40) != 0)
                        {
LABEL_808:
                          v274 = 1;
LABEL_809:
                          v315 = v143 & v274 ^ 1;
                          v316 = v22 | v141;
                          return v316 | v315;
                        }
                      }
                    }
LABEL_591:
                    v261 = **a1;
                    v262 = (uint64_t *)(a1 + 14);
                    v263 = 2;
                    goto LABEL_635;
                  }
                }
              }
LABEL_587:
              v142 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
              v143 = 0;
              a1[14] = (uint64_t **)v142;
              if (!v142)
                goto LABEL_591;
              goto LABEL_588;
            }
            v143 = 0;
          }
          if ((*(_BYTE *)(v142 + 20) & 2) != 0)
            goto LABEL_584;
          goto LABEL_582;
        case 404:
        case 415:
          v145 = (uint64_t *)(a1 + 14);
          v144 = (uint64_t)a1[14];
          if (v144 && (*(_BYTE *)(v144 + 12) & 8) != 0)
          {
            v52 = 1;
          }
          else
          {
            v144 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
            a1[14] = (uint64_t **)v144;
            if (!v144)
            {
LABEL_594:
              v144 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
              a1[14] = (uint64_t **)v144;
              if (!v144)
              {
LABEL_597:
                v144 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
                a1[14] = (uint64_t **)v144;
                if (!v144)
                {
LABEL_602:
                  v144 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 46);
                  a1[14] = (uint64_t **)v144;
                  if (!v144)
                  {
LABEL_607:
                    v266 = **a1;
                    v267 = (uint64_t *)(a1 + 14);
                    v268 = 2;
                    v269 = 22;
                    goto LABEL_793;
                  }
                  v52 = 0;
LABEL_604:
                  if (*(_DWORD *)(v144 + 8) < 4u)
                    goto LABEL_607;
                  v265 = *(_QWORD *)(v144 + 64);
                  if (!v265 || (*(_BYTE *)(v265 + 14) & 0x40) == 0)
                    goto LABEL_607;
LABEL_795:
                  if (*(_DWORD *)(v144 + 8) < 4u
                    || (v312 = *(_QWORD *)(v144 + 64)) == 0
                    || (*(_BYTE *)(v312 + 17) & 0x20) == 0)
                  {
LABEL_798:
                    v144 = llvm::AttributeList::addAttributeAtIndex(v145, **a1, 2, 45);
                    a1[14] = (uint64_t **)v144;
                    if (!v144)
                      goto LABEL_803;
                    v52 = 0;
                  }
                  if (*(_DWORD *)(v144 + 8) >= 3u)
                  {
                    v313 = *(_QWORD *)(v144 + 56);
                    if (v313)
                    {
                      if ((*(_BYTE *)(v313 + 14) & 8) != 0)
                      {
LABEL_804:
                        if (*(_DWORD *)(v144 + 8) >= 4u)
                        {
                          v314 = *(_QWORD *)(v144 + 64);
                          if (v314)
                          {
                            if ((*(_BYTE *)(v314 + 14) & 8) != 0)
                              goto LABEL_887;
                          }
                        }
LABEL_807:
                        v182 = **a1;
                        v183 = v145;
                        v184 = 2;
                        v185 = 19;
                        goto LABEL_886;
                      }
                    }
                  }
LABEL_803:
                  v144 = llvm::AttributeList::addAttributeAtIndex(v145, **a1, 1, 19);
                  v52 = 0;
                  a1[14] = (uint64_t **)v144;
                  if (!v144)
                    goto LABEL_807;
                  goto LABEL_804;
                }
                v52 = 0;
LABEL_599:
                if (*(_DWORD *)(v144 + 8) >= 3u)
                {
                  v264 = *(_QWORD *)(v144 + 56);
                  if (v264)
                  {
                    if ((*(_BYTE *)(v264 + 17) & 0x40) != 0)
                      goto LABEL_604;
                  }
                }
                goto LABEL_602;
              }
              v52 = 0;
LABEL_596:
              if ((*(_BYTE *)(v144 + 20) & 2) != 0)
                goto LABEL_599;
              goto LABEL_597;
            }
            v52 = 0;
          }
          if ((*(_BYTE *)(v144 + 16) & 0x20) != 0)
            goto LABEL_596;
          goto LABEL_594;
        case 405:
        case 421:
          v100 = (uint64_t *)(a1 + 14);
          v146 = a1[14];
          if (v146 && (*((_BYTE *)v146 + 12) & 8) != 0)
          {
            v33 = 1;
          }
          else
          {
            v33 = 0;
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          }
          v31 = sub_1C5EC7F60((uint64_t)a1);
          v270 = (uint64_t)a1[14];
          if (v270 && (*(_BYTE *)(v270 + 16) & 0x20) != 0
            || (v270 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37),
                v33 = 0,
                (a1[14] = (uint64_t **)v270) != 0))
          {
            if ((*(_BYTE *)(v270 + 20) & 2) != 0)
              goto LABEL_873;
          }
          goto LABEL_747;
        case 406:
        case 409:
        case 416:
        case 422:
          v48 = (uint64_t *)(a1 + 14);
          v147 = a1[14];
          if (v147 && ((_BYTE)v147[2] & 0x20) != 0)
          {
            v148 = 1;
          }
          else
          {
            v147 = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = v147;
            if (!v147)
              goto LABEL_616;
            v148 = 0;
          }
          if ((*((_BYTE *)v147 + 12) & 8) != 0)
          {
LABEL_617:
            if ((*((_BYTE *)v147 + 20) & 2) != 0)
            {
              v271 = 1;
LABEL_772:
              v31 = sub_1C5EC7F60((uint64_t)a1);
              v215 = (uint64_t)a1[14];
              if (v215)
              {
                if (*(_DWORD *)(v215 + 8) >= 3u)
                {
                  v309 = *(_QWORD *)(v215 + 56);
                  if (v309)
                  {
                    if ((*(_BYTE *)(v309 + 14) & 0x40) != 0)
                    {
                      v33 = v148 & v271;
                      goto LABEL_848;
                    }
                  }
                }
              }
LABEL_846:
              v275 = **a1;
              v276 = v48;
              v277 = 1;
              v278 = 22;
LABEL_847:
              v215 = llvm::AttributeList::addAttributeAtIndex(v276, v275, v277, v278);
              v33 = 0;
              a1[14] = (uint64_t **)v215;
              if (!v215)
              {
LABEL_851:
                v165 = **a1;
                v166 = v48;
                v167 = 2;
LABEL_852:
                v168 = 22;
                goto LABEL_853;
              }
              goto LABEL_848;
            }
LABEL_618:
            v271 = 0;
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
            goto LABEL_772;
          }
LABEL_616:
          v147 = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          v148 = 0;
          a1[14] = v147;
          if (!v147)
            goto LABEL_618;
          goto LABEL_617;
        case 408:
        case 417:
          v149 = a1[14];
          if (v149 && *((_DWORD *)v149 + 2) >= 3u && (v150 = v149[7]) != 0 && (*((_BYTE *)v150 + 17) & 0x40) != 0)
          {
            v151 = 0;
          }
          else
          {
            v151 = 1;
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 46);
          }
          v22 |= v151;
LABEL_621:
          v145 = (uint64_t *)(a1 + 14);
          v144 = (uint64_t)a1[14];
          if (v144 && (*(_BYTE *)(v144 + 12) & 8) != 0)
          {
            v52 = 1;
          }
          else
          {
            v144 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
            a1[14] = (uint64_t **)v144;
            if (!v144)
              goto LABEL_779;
            v52 = 0;
          }
          if ((*(_BYTE *)(v144 + 16) & 0x20) != 0)
            goto LABEL_781;
LABEL_779:
          v144 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
          a1[14] = (uint64_t **)v144;
          if (!v144)
            goto LABEL_782;
          v52 = 0;
LABEL_781:
          if ((*(_BYTE *)(v144 + 20) & 2) != 0)
            goto LABEL_784;
LABEL_782:
          v144 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
          a1[14] = (uint64_t **)v144;
          if (!v144)
            goto LABEL_787;
          v52 = 0;
LABEL_784:
          if (*(_DWORD *)(v144 + 8) >= 4u)
          {
            v310 = *(_QWORD *)(v144 + 64);
            if (v310)
            {
              if ((*(_BYTE *)(v310 + 14) & 0x40) != 0)
                goto LABEL_789;
            }
          }
LABEL_787:
          v144 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 22);
          a1[14] = (uint64_t **)v144;
          if (!v144)
            goto LABEL_792;
          v52 = 0;
LABEL_789:
          if (*(_DWORD *)(v144 + 8) >= 3u)
          {
            v311 = *(_QWORD *)(v144 + 56);
            if (v311)
            {
              if ((*(_BYTE *)(v311 + 20) & 4) != 0)
                goto LABEL_795;
            }
          }
LABEL_792:
          v266 = **a1;
          v267 = (uint64_t *)(a1 + 14);
          v268 = 1;
          v269 = 66;
LABEL_793:
          v144 = llvm::AttributeList::addAttributeAtIndex(v267, v266, v268, v269);
          a1[14] = (uint64_t **)v144;
          if (v144)
          {
            v52 = 0;
            goto LABEL_795;
          }
          goto LABEL_798;
        case 410:
          v34 = (uint64_t)a1[14];
          goto LABEL_638;
        case 413:
        case 419:
        case 466:
          v141 = sub_1C5EC7F60((uint64_t)a1);
          v152 = (uint64_t)a1[14];
          if (v152 && (*(_BYTE *)(v152 + 16) & 0x20) != 0)
          {
            v143 = 1;
          }
          else
          {
            v152 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v152;
            if (!v152)
              goto LABEL_627;
            v143 = 0;
          }
          if ((*(_BYTE *)(v152 + 12) & 8) != 0)
            goto LABEL_629;
LABEL_627:
          v152 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          a1[14] = (uint64_t **)v152;
          if (!v152)
            goto LABEL_630;
          v143 = 0;
LABEL_629:
          if ((*(_BYTE *)(v152 + 20) & 2) != 0)
            goto LABEL_631;
LABEL_630:
          v152 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
          v143 = 0;
          a1[14] = (uint64_t **)v152;
          if (!v152)
            goto LABEL_634;
LABEL_631:
          if (*(_DWORD *)(v152 + 8) >= 3u)
          {
            v272 = *(_QWORD *)(v152 + 56);
            if (v272)
            {
              if ((*(_BYTE *)(v272 + 14) & 0x40) != 0)
                goto LABEL_808;
            }
          }
LABEL_634:
          v261 = **a1;
          v262 = (uint64_t *)(a1 + 14);
          v263 = 1;
LABEL_635:
          v273 = llvm::AttributeList::addAttributeAtIndex(v262, v261, v263, 22);
          v274 = 0;
          a1[14] = (uint64_t **)v273;
          goto LABEL_809;
        case 418:
          v34 = (uint64_t)a1[14];
          if (v34
            && *(_DWORD *)(v34 + 8) >= 4u
            && (v153 = *(_QWORD *)(v34 + 64)) != 0
            && (*(_BYTE *)(v153 + 16) & 0x10) != 0)
          {
            v154 = 0;
          }
          else
          {
            v34 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 36);
            a1[14] = (uint64_t **)v34;
            v154 = 1;
          }
          v22 |= v154;
LABEL_638:
          v156 = (uint64_t *)(a1 + 14);
          if (v34 && (*(_BYTE *)(v34 + 13) & 0x10) != 0)
          {
            v52 = 1;
          }
          else
          {
            v34 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 12);
            a1[14] = (uint64_t **)v34;
            if (!v34)
            {
LABEL_812:
              v34 = llvm::AttributeList::addAttributeAtIndex(v156, **a1, -1, 37);
              a1[14] = (uint64_t **)v34;
              if (!v34)
              {
LABEL_817:
                v34 = llvm::AttributeList::addAttributeAtIndex(v156, **a1, 0, 19);
                a1[14] = (uint64_t **)v34;
                if (!v34)
                {
LABEL_820:
                  v34 = llvm::AttributeList::addAttributeAtIndex(v156, **a1, -1, 65);
                  a1[14] = (uint64_t **)v34;
                  if (!v34)
                    goto LABEL_825;
                  v52 = 0;
LABEL_822:
                  if (*(_DWORD *)(v34 + 8) >= 3u)
                  {
                    v318 = *(_QWORD *)(v34 + 56);
                    if (v318)
                    {
                      if ((*(_BYTE *)(v318 + 14) & 0x40) != 0)
                      {
LABEL_827:
                        if (*(_DWORD *)(v34 + 8) >= 3u)
                        {
                          v319 = *(_QWORD *)(v34 + 56);
                          if (v319)
                          {
                            if ((*(_BYTE *)(v319 + 17) & 0x20) != 0)
                              goto LABEL_887;
                          }
                        }
LABEL_830:
                        v182 = **a1;
                        v183 = v156;
                        v184 = 1;
LABEL_831:
                        v185 = 45;
                        goto LABEL_886;
                      }
                    }
                  }
LABEL_825:
                  v280 = **a1;
                  v281 = v156;
                  v282 = 1;
                  goto LABEL_826;
                }
                v52 = 0;
LABEL_819:
                if ((*(_BYTE *)(v34 + 20) & 2) != 0)
                  goto LABEL_822;
                goto LABEL_820;
              }
              v52 = 0;
LABEL_814:
              if (*(_DWORD *)(v34 + 8) >= 2u)
              {
                v317 = *(_QWORD *)(v34 + 48);
                if (v317)
                {
                  if ((*(_BYTE *)(v317 + 14) & 8) != 0)
                    goto LABEL_819;
                }
              }
              goto LABEL_817;
            }
            v52 = 0;
          }
          if ((*(_BYTE *)(v34 + 16) & 0x20) != 0)
            goto LABEL_814;
          goto LABEL_812;
        case 420:
        case 423:
          v48 = (uint64_t *)(a1 + 14);
          v155 = a1[14];
          if (v155 && (*((_BYTE *)v155 + 12) & 8) != 0)
          {
            v33 = 1;
          }
          else
          {
            v33 = 0;
            a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          }
          v31 = sub_1C5EC7F60((uint64_t)a1);
          v215 = (uint64_t)a1[14];
          if (v215 && (*(_BYTE *)(v215 + 16) & 0x20) != 0)
            goto LABEL_647;
          v215 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
          a1[14] = (uint64_t **)v215;
          if (v215)
          {
            v33 = 0;
LABEL_647:
            if ((*(_BYTE *)(v215 + 20) & 2) != 0)
              goto LABEL_848;
          }
          v275 = **a1;
          v276 = (uint64_t *)(a1 + 14);
          v277 = -1;
          v278 = 65;
          goto LABEL_847;
        case 424:
        case 425:
        case 428:
        case 429:
        case 430:
        case 431:
        case 432:
          v156 = (uint64_t *)(a1 + 14);
          v34 = (uint64_t)a1[14];
          if (v34 && (*(_BYTE *)(v34 + 16) & 0x20) != 0)
          {
            v52 = 1;
          }
          else
          {
            v34 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v34;
            if (!v34)
              goto LABEL_651;
            v52 = 0;
          }
          if ((*(_BYTE *)(v34 + 20) & 2) != 0)
            goto LABEL_653;
LABEL_651:
          v34 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
          a1[14] = (uint64_t **)v34;
          if (!v34)
            goto LABEL_656;
          v52 = 0;
LABEL_653:
          if (*(_DWORD *)(v34 + 8) >= 4u)
          {
            v279 = *(_QWORD *)(v34 + 64);
            if (v279)
            {
              if ((*(_BYTE *)(v279 + 14) & 0x40) != 0)
                goto LABEL_827;
            }
          }
LABEL_656:
          v280 = **a1;
          v281 = (uint64_t *)(a1 + 14);
          v282 = 2;
LABEL_826:
          v34 = llvm::AttributeList::addAttributeAtIndex(v281, v280, v282, 22);
          v52 = 0;
          a1[14] = (uint64_t **)v34;
          if (v34)
            goto LABEL_827;
          goto LABEL_830;
        case 426:
        case 427:
          v37 = (uint64_t *)(a1 + 14);
          v28 = (uint64_t)a1[14];
          if (v28 && (*(_BYTE *)(v28 + 16) & 0x20) != 0)
          {
            v52 = 1;
          }
          else
          {
            v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v28;
            if (!v28)
              goto LABEL_659;
            v52 = 0;
          }
          if ((*(_BYTE *)(v28 + 20) & 2) != 0)
            goto LABEL_736;
LABEL_659:
          v38 = **a1;
          v39 = (uint64_t *)(a1 + 14);
          v40 = -1;
          v41 = 65;
          goto LABEL_734;
        case 433:
          v37 = (uint64_t *)(a1 + 14);
          v28 = (uint64_t)a1[14];
          if (v28 && (*(_BYTE *)(v28 + 16) & 0x20) != 0)
          {
            v52 = 1;
          }
          else
          {
            v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v28;
            if (!v28)
            {
LABEL_662:
              v28 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
              a1[14] = (uint64_t **)v28;
              if (!v28)
                goto LABEL_667;
              v52 = 0;
LABEL_664:
              if (*(_DWORD *)(v28 + 8) >= 3u)
              {
                v283 = *(_QWORD *)(v28 + 56);
                if (v283)
                {
                  if ((*(_BYTE *)(v283 + 14) & 0x40) != 0)
                    goto LABEL_736;
                }
              }
LABEL_667:
              v38 = **a1;
              v39 = (uint64_t *)(a1 + 14);
              v40 = 1;
              v41 = 22;
              goto LABEL_734;
            }
            v52 = 0;
          }
          if ((*(_BYTE *)(v28 + 20) & 2) != 0)
            goto LABEL_664;
          goto LABEL_662;
        case 442:
        case 443:
          v159 = sub_1C5EC8030((uint64_t)a1);
          v59 = v159 | sub_1C5EC80B0((uint64_t)a1);
          v160 = (uint64_t)a1[14];
          if (v160 && (*(_BYTE *)(v160 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v160 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            v62 = 0;
            a1[14] = (uint64_t **)v160;
            if (!v160)
              goto LABEL_672;
          }
          if (*(_DWORD *)(v160 + 8) >= 2u)
          {
            v284 = *(_QWORD *)(v160 + 48);
            if (v284)
            {
              if ((*(_BYTE *)(v284 + 14) & 8) != 0)
                goto LABEL_867;
            }
          }
LABEL_672:
          v199 = **a1;
          v200 = (uint64_t *)(a1 + 14);
          v201 = 0;
          v235 = 19;
          goto LABEL_770;
        case 463:
          v161 = sub_1C5EC8030((uint64_t)a1);
          v59 = v161 | sub_1C5EC80B0((uint64_t)a1);
          v133 = (uint64_t *)(a1 + 14);
          v132 = (uint64_t)a1[14];
          if (v132 && (*(_BYTE *)(v132 + 16) & 0x20) != 0)
          {
            v62 = 1;
          }
          else
          {
            v132 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
            a1[14] = (uint64_t **)v132;
            if (!v132)
              goto LABEL_677;
            v62 = 0;
          }
          if (*(_DWORD *)(v132 + 8) >= 3u)
          {
            v285 = *(_QWORD *)(v132 + 56);
            if (v285)
            {
              if ((*(_BYTE *)(v285 + 14) & 0x40) != 0)
                goto LABEL_680;
            }
          }
LABEL_677:
          v244 = **a1;
          v245 = (uint64_t *)(a1 + 14);
          v246 = 22;
LABEL_678:
          v132 = llvm::AttributeList::addAttributeAtIndex(v245, v244, 1, v246);
          a1[14] = (uint64_t **)v132;
          if (v132)
          {
            v62 = 0;
            goto LABEL_680;
          }
          goto LABEL_683;
        default:
          return result;
      }
    }
  }
  return result;
}

uint64_t sub_1C5EC7F60(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 112);
  v2 = (uint64_t *)(a1 + 112);
  v3 = v4;
  if (v4 && (*(_BYTE *)(v3 + 17) & 0x30) != 0)
    return 0;
  *(_QWORD *)(a1 + 112) = llvm::AttributeList::addAttributeAtIndex(v2, **(uint64_t ***)a1, -1, 45);
  return 1;
}

uint64_t sub_1C5EC7FB4(llvm::LLVMContext ***a1, uint64_t a2, uint64_t a3)
{
  llvm::LLVMContext **v4;
  llvm::AttributeList *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;

  v5 = (llvm::AttributeList *)(a1 + 14);
  v4 = a1[14];
  if (v4 && (*((_BYTE *)v4 + 21) & 8) != 0)
    return 0;
  v6 = (uint64_t *)**a1;
  v7 = a3;
  if ((a3 & 0xFF00000000) == 0)
    v7 = 0xFFFFFFFFLL;
  v8 = llvm::Attribute::get(v6, 75, v7 | (a2 << 32));
  a1[14] = (llvm::LLVMContext **)llvm::AttributeList::addAttributeAtIndex(v5, **a1, -1, v8);
  return 1;
}

uint64_t sub_1C5EC8030(uint64_t a1)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 8) == 7)
    return 0;
  v5 = *(_QWORD *)(a1 + 112);
  v3 = (uint64_t *)(a1 + 112);
  v4 = v5;
  if (v5)
  {
    if (*(_DWORD *)(v4 + 8) >= 2u)
    {
      v6 = *(_QWORD *)(v4 + 48);
      if (v6)
      {
        if ((*(_BYTE *)(v6 + 16) & 0x10) != 0)
          return 0;
      }
    }
  }
  *(_QWORD *)(a1 + 112) = llvm::AttributeList::addAttributeAtIndex(v3, **(uint64_t ***)a1, 0, 36);
  return 1;
}

uint64_t sub_1C5EC80B0(uint64_t a1)
{
  unint64_t v1;
  unsigned int v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 96);
  if (v1)
  {
    v3 = 0;
    v4 = 0;
    v6 = (uint64_t *)(a1 + 112);
    v5 = *(_QWORD *)(a1 + 112);
    do
    {
      if (v5
        && v3 + 2 < *(_DWORD *)(v5 + 8)
        && (v7 = *(_QWORD *)(v5 + 8 * (v3 + 2) + 40)) != 0
        && (*(_BYTE *)(v7 + 16) & 0x10) != 0)
      {
        ++v3;
      }
      else
      {
        v5 = llvm::AttributeList::addAttributeAtIndex(v6, **(uint64_t ***)a1, ++v3, 36);
        *(_QWORD *)(a1 + 112) = v5;
        v1 = *(_QWORD *)(a1 + 96);
        v4 = 1;
      }
    }
    while (v1 > v3);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1C5EC8158(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  if (!*(_BYTE *)(a3 + 144) && !*(_BYTE *)(a3 + 146))
    return 0;
  v4 = (uint64_t *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 112);
  if (v5)
  {
    if ((a2 + 2) < *(_DWORD *)(v5 + 8))
    {
      v7 = *(_QWORD *)(v5 + 8 * (a2 + 2) + 40);
      if (v7)
      {
        if ((*(_BYTE *)(v7 + 18) & 1) != 0)
          return 0;
      }
    }
  }
  *(_QWORD *)(a1 + 112) = llvm::AttributeList::addAttributeAtIndex(v4, **(uint64_t ***)a1, a2 + 1, 48);
  return 1;
}

BOOL llvm::hasFloatFn(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int v5;

  v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == 2)
  {
    if (((*(_QWORD *)(a1[1] + 8 * (a4 >> 6)) >> a4) & 1) == 0)
      return ((*(unsigned __int8 *)(*a1 + ((unint64_t)a4 >> 2)) >> (2 * (a4 & 3))) & 3) != 0;
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    if (v5 == 3)
    {
      a4 = a3;
      if (((*(_QWORD *)(a1[1] + 8 * (a3 >> 6)) >> a3) & 1) == 0)
        return ((*(unsigned __int8 *)(*a1 + ((unint64_t)a4 >> 2)) >> (2 * (a4 & 3))) & 3) != 0;
    }
    else
    {
      a4 = a5;
      if (((*(_QWORD *)(a1[1] + 8 * (a5 >> 6)) >> a5) & 1) == 0)
        return ((*(unsigned __int8 *)(*a1 + ((unint64_t)a4 >> 2)) >> (2 * (a4 & 3))) & 3) != 0;
    }
  }
  return 0;
}

uint64_t sub_1C5EC826C(unsigned int a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, unsigned __int8 a9)
{
  uint64_t v10;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  llvm::PointerType *v21;
  uint64_t **inserted;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  llvm::Value *v26;
  BOOL v27;
  _QWORD v29[4];
  __int16 v30;

  if (((*(_QWORD *)(a8[1] + 8 * (a1 >> 6)) >> a1) & 1) != 0
    || ((*(unsigned __int8 *)(*a8 + ((unint64_t)a1 >> 2)) >> (2 * (a1 & 3))) & 3) == 0)
  {
    return 0;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a7[6] + 56) + 40);
  v18 = (unsigned __int8 *)sub_1C56EAC88(a8, a1);
  v20 = v19;
  v21 = (llvm::PointerType *)llvm::FunctionType::get(a2, a3, a4, a9);
  inserted = (uint64_t **)llvm::Module::getOrInsertFunction(v17, v18, v20, v21, 0);
  v24 = v23;
  v25 = sub_1C4FB7E80(*(uint64_t **)(v17 + 112), v18, v20);
  if (v25 && !*(_BYTE *)(v25 + 16))
    llvm::inferLibFuncAttributes((uint64_t ***)v25, a8);
  v30 = 261;
  v29[0] = v18;
  v29[1] = v20;
  v10 = sub_1C4774778(a7, inserted, (uint64_t)v24, a5, a6, (uint64_t)v29, 0);
  v26 = llvm::Value::stripPointerCasts(v24);
  if (v26)
    v27 = *((_BYTE *)v26 + 16) == 0;
  else
    v27 = 0;
  if (v27)
    *(_WORD *)(v10 + 18) = (*((_WORD *)v26 + 9) >> 2) & 0xFFC | *(_WORD *)(v10 + 18) & 0xF003;
  return v10;
}

uint64_t llvm::emitMemCpyChk(llvm *a1, llvm *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::DataLayout *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t **v15;
  uint64_t *v16;
  llvm::LLVMContext *v17;
  uint64_t v18;
  _QWORD *IntPtrType;
  _QWORD *v20;
  uint64_t **v21;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::IRBuilderBase *v24;
  unsigned __int8 *v25;
  llvm::IRBuilderBase *v26;
  unsigned __int8 *v27;
  llvm::Value *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  int v33[8];
  __int16 v34;
  uint64_t v35;
  uint64_t v36[5];

  v36[4] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a7[1] + 12) & 0x80) != 0 || *(unsigned __int8 *)(*a7 + 25) < 0x40u)
    return 0;
  v15 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a5 + 48) + 56) + 40);
  v16 = *v15;
  v33[0] = 37;
  v35 = llvm::AttributeList::get(v16, 0xFFFFFFFF, v33, 1);
  v17 = ***(llvm::LLVMContext ****)(a5 + 48);
  v32 = llvm::AttributeList::get(*v15, &v35, 1);
  v31 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a5 + 64) + 1912), 0);
  v30 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a5 + 64) + 1912), 0);
  v18 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a5 + 64) + 1912), 0);
  IntPtrType = llvm::DataLayout::getIntPtrType(a6, v17, 0);
  v20 = llvm::DataLayout::getIntPtrType(a6, v17, 0);
  v21 = (uint64_t **)sub_1C63A6D80((uint64_t)v15, "__memcpy_chk", 0xCuLL, v32, v31, v30, v18, (uint64_t)IntPtrType, (uint64_t)v20);
  v23 = v22;
  v25 = llvm::castToCStr(a1, (llvm::Value *)a5, v24);
  v27 = llvm::castToCStr(a2, (llvm::Value *)a5, v26);
  v36[0] = (uint64_t)v25;
  v36[1] = (uint64_t)v27;
  v36[2] = a3;
  v36[3] = a4;
  v34 = 257;
  v7 = sub_1C4774778((uint64_t *)a5, v21, (uint64_t)v23, v36, 4, (uint64_t)v33, 0);
  v28 = llvm::Value::stripPointerCasts(v23);
  if (v28)
    v29 = *((_BYTE *)v28 + 16) == 0;
  else
    v29 = 0;
  if (v29)
    *(_WORD *)(v7 + 18) = (*((_WORD *)v28 + 9) >> 2) & 0xFFC | *(_WORD *)(v7 + 18) & 0xF003;
  return v7;
}

void *sub_1C5EC8604(void *result, uint64_t a2, uint64_t *a3)
{
  void *v5;
  size_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(*(_QWORD *)result + 8) == 3)
    return result;
  v5 = result;
  v7 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = a3[1];
  if (a3[2] < v6 + v8)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v6 + v8, 1);
    v8 = a3[1];
    if (!v6)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v6)
  {
LABEL_4:
    result = memcpy((void *)(*a3 + v8), v7, v6);
    v8 = a3[1];
  }
LABEL_5:
  v9 = v8 + v6;
  a3[1] = v9;
  v10 = v9 + 1;
  if (*(_BYTE *)(*(_QWORD *)v5 + 8) == 2)
    v11 = 102;
  else
    v11 = 108;
  if (v10 > a3[2])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v10, 1);
    v9 = a3[1];
  }
  *(_BYTE *)(*a3 + v9) = v11;
  v12 = *a3;
  v13 = a3[1] + 1;
  a3[1] = v13;
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v13;
  return result;
}

uint64_t sub_1C5EC86F4(uint64_t ***a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t v12;
  llvm::Value *v13;
  BOOL v14;
  _QWORD v16[4];
  __int16 v17;
  uint64_t ***v18;

  v18 = a1;
  v9 = (uint64_t **)sub_1C6212CB8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 48) + 56) + 40), a2, a3, 0, *a1, (uint64_t)*a1);
  v11 = (llvm::Value *)v10;
  v17 = 261;
  v16[0] = a2;
  v16[1] = a3;
  v12 = sub_1C4774778((uint64_t *)a4, v9, v10, (uint64_t *)&v18, 1, (uint64_t)v16, 0);
  *(_QWORD *)(v12 + 64) = llvm::AttributeList::removeAttributeAtIndex(a5, *(uint64_t **)(a4 + 64), -1, 56);
  v13 = llvm::Value::stripPointerCasts(v11);
  if (v13)
    v14 = *((_BYTE *)v13 + 16) == 0;
  else
    v14 = 0;
  if (v14)
    *(_WORD *)(v12 + 18) = (*((_WORD *)v13 + 9) >> 2) & 0xFFC | *(_WORD *)(v12 + 18) & 0xF003;
  return v12;
}

uint64_t sub_1C5EC87E0(uint64_t ***a1, uint64_t *a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t **v15;
  llvm::Value *v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  BOOL v21;
  _QWORD v23[4];
  __int16 v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 48) + 56) + 40);
  v15 = (uint64_t **)sub_1C6291FE0(v14, a3, a4, 0, *a1, (uint64_t)*a1, *a2);
  v17 = v16;
  if (a7)
  {
    v18 = sub_1C4FB7E80(*(uint64_t **)(v14 + 112), a3, a4);
    if (v18)
    {
      if (!*(_BYTE *)(v18 + 16))
        llvm::inferLibFuncAttributes((uint64_t ***)v18, a7);
    }
  }
  v25[0] = (uint64_t)a1;
  v25[1] = (uint64_t)a2;
  v24 = 261;
  v23[0] = a3;
  v23[1] = a4;
  v19 = sub_1C4774778((uint64_t *)a5, v15, (uint64_t)v17, v25, 2, (uint64_t)v23, 0);
  *(_QWORD *)(v19 + 64) = llvm::AttributeList::removeAttributeAtIndex(a6, *(uint64_t **)(a5 + 64), -1, 56);
  v20 = llvm::Value::stripPointerCasts(v17);
  if (v20)
    v21 = *((_BYTE *)v20 + 16) == 0;
  else
    v21 = 0;
  if (v21)
    *(_WORD *)(v19 + 18) = (*((_WORD *)v20 + 9) >> 2) & 0xFFC | *(_WORD *)(v19 + 18) & 0xF003;
  return v19;
}

uint64_t llvm::emitPutChar(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  llvm::Value *v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  BOOL v18;
  _QWORD v19[4];
  __int16 v20;
  const char *v21;
  __int16 v22;
  unsigned __int8 *v23;

  if ((*(_BYTE *)(a3[1] + 44) & 4) != 0 || (*(_BYTE *)(*a3 + 88) & 0x30) == 0)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 56) + 40);
  v9 = (unsigned __int8 *)sub_1C56EAC88(a3, 0x162u);
  v11 = v10;
  v12 = (uint64_t **)sub_1C6212CB8(v8, v9, v10, 0, (uint64_t **)(**(_QWORD **)(a2 + 64) + 1960), **(_QWORD **)(a2 + 64) + 1960);
  v14 = v13;
  v15 = sub_1C4FB7E80(*(uint64_t **)(v8 + 112), v9, v11);
  if (v15 && !*(_BYTE *)(v15 + 16))
    llvm::inferLibFuncAttributes((uint64_t ***)v15, a3);
  v16 = **(_QWORD **)(a2 + 64) + 1960;
  v21 = "chari";
  v22 = 259;
  v23 = sub_1C4D8D514((uint64_t *)a2, a1, v16, 1, (uint64_t)&v21);
  v20 = 261;
  v19[0] = v9;
  v19[1] = v11;
  v4 = sub_1C4774778((uint64_t *)a2, v12, (uint64_t)v14, (uint64_t *)&v23, 1, (uint64_t)v19, 0);
  v17 = llvm::Value::stripPointerCasts(v14);
  if (v17)
    v18 = *((_BYTE *)v17 + 16) == 0;
  else
    v18 = 0;
  if (v18)
    *(_WORD *)(v4 + 18) = (*((_WORD *)v17 + 9) >> 2) & 0xFFC | *(_WORD *)(v4 + 18) & 0xF003;
  return v4;
}

uint64_t llvm::emitPutS(llvm *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t **v15;
  llvm::Value *v16;
  llvm::Value *v17;
  uint64_t v18;
  llvm::IRBuilderBase *v19;
  llvm::Value *v20;
  BOOL v21;
  _QWORD v22[4];
  __int16 v23;
  unsigned __int8 *v24;

  if ((*(_BYTE *)(a3[1] + 44) & 0x10) != 0 || (*(_BYTE *)(*a3 + 89) & 3) == 0)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 56) + 40);
  v9 = (unsigned __int8 *)sub_1C56EAC88(a3, 0x164u);
  v11 = v10;
  v12 = **(_QWORD **)(a2 + 64);
  v13 = (uint64_t **)(v12 + 1960);
  v14 = llvm::PointerType::get((llvm::PointerType *)(v12 + 1912), 0);
  v15 = (uint64_t **)sub_1C6212CB8(v8, v9, v11, 0, v13, v14);
  v17 = v16;
  v18 = sub_1C4FB7E80(*(uint64_t **)(v8 + 112), v9, v11);
  if (v18 && !*(_BYTE *)(v18 + 16))
    llvm::inferLibFuncAttributes((uint64_t ***)v18, a3);
  v24 = llvm::castToCStr(a1, (llvm::Value *)a2, v19);
  v23 = 261;
  v22[0] = v9;
  v22[1] = v11;
  v4 = sub_1C4774778((uint64_t *)a2, v15, (uint64_t)v17, (uint64_t *)&v24, 1, (uint64_t)v22, 0);
  v20 = llvm::Value::stripPointerCasts(v17);
  if (v20)
    v21 = *((_BYTE *)v20 + 16) == 0;
  else
    v21 = 0;
  if (v21)
    *(_WORD *)(v4 + 18) = (*((_WORD *)v20 + 9) >> 2) & 0xFFC | *(_WORD *)(v4 + 18) & 0xF003;
  return v4;
}

uint64_t llvm::emitFPutC(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  BOOL v20;
  _QWORD v21[4];
  __int16 v22;
  uint64_t v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a4[1] + 31) & 0x20) != 0 || (*(_BYTE *)(*a4 + 63) & 0xC) == 0)
    return 0;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 56) + 40);
  v11 = (unsigned __int8 *)sub_1C56EAC88(a4, 0xFDu);
  v13 = v12;
  v14 = (uint64_t **)sub_1C6291FE0(v10, v11, v12, 0, (uint64_t **)(**(_QWORD **)(a3 + 64) + 1960), **(_QWORD **)(a3 + 64) + 1960, *a2);
  v16 = v15;
  if (*(_BYTE *)(*a2 + 8) == 15)
  {
    v17 = sub_1C4FB7E80(*(uint64_t **)(v10 + 112), v11, v13);
    if (v17)
    {
      if (!*(_BYTE *)(v17 + 16))
        llvm::inferLibFuncAttributes((uint64_t ***)v17, a4);
    }
  }
  v18 = **(_QWORD **)(a3 + 64) + 1960;
  v21[0] = "chari";
  v22 = 259;
  v23[0] = (uint64_t)sub_1C4D8D514((uint64_t *)a3, a1, v18, 1, (uint64_t)v21);
  v23[1] = (uint64_t)a2;
  v22 = 261;
  v21[0] = v11;
  v21[1] = v13;
  v5 = sub_1C4774778((uint64_t *)a3, v14, (uint64_t)v16, v23, 2, (uint64_t)v21, 0);
  v19 = llvm::Value::stripPointerCasts(v16);
  if (v19)
    v20 = *((_BYTE *)v19 + 16) == 0;
  else
    v20 = 0;
  if (v20)
    *(_WORD *)(v5 + 18) = (*((_WORD *)v19 + 9) >> 2) & 0xFFC | *(_WORD *)(v5 + 18) & 0xF003;
  return v5;
}

uint64_t llvm::emitFPutS(llvm *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  llvm::IRBuilderBase *v17;
  uint64_t **v18;
  llvm::Value *v19;
  llvm::Value *v20;
  uint64_t v21;
  llvm::Value *v22;
  BOOL v23;
  _QWORD v24[4];
  __int16 v25;
  uint64_t v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  if ((*(_QWORD *)(a4[1] + 24) & 0x8000000000000000) != 0 || *(unsigned __int8 *)(*a4 + 63) < 0x40u)
    return 0;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 56) + 40);
  v11 = (unsigned __int8 *)sub_1C56EAC88(a4, 0xFFu);
  v13 = v12;
  v14 = **(_QWORD **)(a3 + 64);
  v15 = (uint64_t **)(v14 + 1960);
  v16 = llvm::PointerType::get((llvm::PointerType *)(v14 + 1912), 0);
  v18 = (uint64_t **)sub_1C6291FE0(v10, v11, v13, 0, v15, v16, *a2);
  v20 = v19;
  if (*(_BYTE *)(*a2 + 8) == 15)
  {
    v21 = sub_1C4FB7E80(*(uint64_t **)(v10 + 112), v11, v13);
    if (v21)
    {
      if (!*(_BYTE *)(v21 + 16))
        llvm::inferLibFuncAttributes((uint64_t ***)v21, a4);
    }
  }
  v26[0] = (uint64_t)llvm::castToCStr(a1, (llvm::Value *)a3, v17);
  v26[1] = (uint64_t)a2;
  v25 = 261;
  v24[0] = v11;
  v24[1] = v13;
  v5 = sub_1C4774778((uint64_t *)a3, v18, (uint64_t)v20, v26, 2, (uint64_t)v24, 0);
  v22 = llvm::Value::stripPointerCasts(v20);
  if (v22)
    v23 = *((_BYTE *)v22 + 16) == 0;
  else
    v23 = 0;
  if (v23)
    *(_WORD *)(v5 + 18) = (*((_WORD *)v22 + 9) >> 2) & 0xFFC | *(_WORD *)(v5 + 18) & 0xF003;
  return v5;
}

uint64_t llvm::emitFWrite(llvm *a1, uint64_t a2, uint64_t *a3, uint64_t a4, llvm::DataLayout *a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  llvm::LLVMContext *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  llvm::IRBuilderBase *v21;
  uint64_t **v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  _QWORD *v26;
  const llvm::APInt *v27;
  llvm::ConstantInt *v28;
  unsigned int v29;
  char v30;
  llvm::ValueHandleBase *v31;
  llvm::Value *v32;
  BOOL v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t **IntPtrType;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  __int16 v40;
  uint64_t v41[5];

  v41[4] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a6[1] + 34) & 0x20) != 0 || (*(_BYTE *)(*a6 + 69) & 0xC) == 0)
    return 0;
  v14 = *(_QWORD *)(a4 + 48);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 40);
  v16 = **(llvm::LLVMContext ***)v14;
  v17 = (unsigned __int8 *)sub_1C56EAC88(a6, 0x115u);
  v37 = v18;
  IntPtrType = (uint64_t **)llvm::DataLayout::getIntPtrType(a5, v16, 0);
  v35 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a4 + 64) + 1912), 0);
  v19 = llvm::DataLayout::getIntPtrType(a5, v16, 0);
  v20 = llvm::DataLayout::getIntPtrType(a5, v16, 0);
  v34 = v17;
  v22 = (uint64_t **)sub_1C63A6D80(v15, v17, v37, 0, IntPtrType, v35, (uint64_t)v19, (uint64_t)v20, *a3);
  v24 = v23;
  if (*(_BYTE *)(*a3 + 8) == 15)
  {
    v25 = sub_1C4FB7E80(*(uint64_t **)(v15 + 112), v34, v37);
    if (v25)
    {
      if (!*(_BYTE *)(v25 + 16))
        llvm::inferLibFuncAttributes((uint64_t ***)v25, a6);
    }
  }
  v41[0] = (uint64_t)llvm::castToCStr(a1, (llvm::Value *)a4, v21);
  v41[1] = a2;
  v26 = llvm::DataLayout::getIntPtrType(a5, v16, 0);
  v28 = (llvm::ConstantInt *)*v26;
  v29 = *((_DWORD *)v26 + 2);
  v39 = v29 >> 8;
  if (v29 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v38, 1, 0);
  }
  else
  {
    if (v29 <= 0xFF)
      v30 = 0;
    else
      v30 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v29);
    v38 = v30 & 1;
  }
  v31 = llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v38, v27);
  if (v39 >= 0x41 && v38)
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  v41[2] = (uint64_t)v31;
  v41[3] = (uint64_t)a3;
  v40 = 257;
  v7 = sub_1C4774778((uint64_t *)a4, v22, (uint64_t)v24, v41, 4, (uint64_t)&v38, 0);
  v32 = llvm::Value::stripPointerCasts(v24);
  if (v32)
    v33 = *((_BYTE *)v32 + 16) == 0;
  else
    v33 = 0;
  if (v33)
    *(_WORD *)(v7 + 18) = (*((_WORD *)v32 + 9) >> 2) & 0xFFC | *(_WORD *)(v7 + 18) & 0xF003;
  return v7;
}

uint64_t llvm::emitMalloc(uint64_t a1, uint64_t a2, llvm::DataLayout *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  llvm::LLVMContext *v13;
  uint64_t **v14;
  _QWORD *IntPtrType;
  uint64_t **v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  llvm::Value *v20;
  BOOL v21;
  _QWORD v22[4];
  __int16 v23;
  uint64_t v24;

  v24 = a1;
  if ((*(_BYTE *)(a4[1] + 39) & 0x20) != 0 || (*(_BYTE *)(*a4 + 79) & 0xC) == 0)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 56) + 40);
  v10 = (unsigned __int8 *)sub_1C56EAC88(a4, 0x13Du);
  v12 = v11;
  v13 = ***(llvm::LLVMContext ****)(a2 + 48);
  v14 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a2 + 64) + 1912), 0);
  IntPtrType = llvm::DataLayout::getIntPtrType(a3, v13, 0);
  v16 = (uint64_t **)sub_1C6212CB8(v9, v10, v12, 0, v14, (uint64_t)IntPtrType);
  v18 = v17;
  v19 = sub_1C4FB7E80(*(uint64_t **)(v9 + 112), v10, v12);
  if (v19 && !*(_BYTE *)(v19 + 16))
    llvm::inferLibFuncAttributes((uint64_t ***)v19, a4);
  v23 = 261;
  v22[0] = v10;
  v22[1] = v12;
  v5 = sub_1C4774778((uint64_t *)a2, v16, (uint64_t)v18, &v24, 1, (uint64_t)v22, 0);
  v20 = llvm::Value::stripPointerCasts(v18);
  if (v20)
    v21 = *((_BYTE *)v20 + 16) == 0;
  else
    v21 = 0;
  if (v21)
    *(_WORD *)(v5 + 18) = (*((_WORD *)v20 + 9) >> 2) & 0xFFC | *(_WORD *)(v5 + 18) & 0xF003;
  return v5;
}

uint64_t llvm::emitCalloc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *IntPtrType;
  uint64_t **v15;
  uint64_t **v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  llvm::Value *v20;
  BOOL v21;
  _QWORD v22[4];
  __int16 v23;
  uint64_t v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a4[1] + 21) & 0x40) != 0 || (*(_BYTE *)(*a4 + 43) & 0x30) == 0)
    return 0;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 56) + 40);
  v11 = (unsigned __int8 *)sub_1C56EAC88(a4, 0xAEu);
  v13 = v12;
  IntPtrType = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(v10 + 272), ***(llvm::LLVMContext ****)(a3 + 48), 0);
  v15 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a3 + 64) + 1912), 0);
  v16 = (uint64_t **)sub_1C6291FE0(v10, v11, v13, 0, v15, (uint64_t)IntPtrType, (uint64_t)IntPtrType);
  v18 = v17;
  v19 = sub_1C4FB7E80(*(uint64_t **)(v10 + 112), v11, v13);
  if (v19 && !*(_BYTE *)(v19 + 16))
    llvm::inferLibFuncAttributes((uint64_t ***)v19, a4);
  v24[0] = a1;
  v24[1] = a2;
  v23 = 261;
  v22[0] = v11;
  v22[1] = v13;
  v5 = sub_1C4774778((uint64_t *)a3, v16, (uint64_t)v18, v24, 2, (uint64_t)v22, 0);
  v20 = llvm::Value::stripPointerCasts(v18);
  if (v20)
    v21 = *((_BYTE *)v20 + 16) == 0;
  else
    v21 = 0;
  if (v21)
    *(_WORD *)(v5 + 18) = (*((_WORD *)v20 + 9) >> 2) & 0xFFC | *(_WORD *)(v5 + 18) & 0xF003;
  return v5;
}

uint64_t llvm::bypassSlowDivision(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _BOOL4 v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  llvm::ConstantInt **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int *v21;
  int v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  int v27;
  llvm::ConstantInt **v28;
  llvm::ConstantInt *v29;
  llvm::ConstantInt *v30;
  BOOL v32;
  int v33;
  _BYTE *v34;
  uint64_t *v35;
  llvm::ConstantInt **v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  void *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  llvm::ConstantInt *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD ***v61;
  uint64_t v62;
  _QWORD **v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  llvm::BasicBlock *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  llvm::Value *v79;
  llvm::BasicBlock *v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  llvm::Value *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  unsigned __int8 **v88;
  int v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  int v93;
  llvm::ConstantInt **v94;
  llvm::ConstantInt *v95;
  uint64_t v96;
  int v97;
  unsigned __int8 *v98;
  char *v99;
  char *v100;
  llvm::Value *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 **v106;
  int v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  llvm::ConstantInt **v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unint64_t v115;
  llvm::Value **v116;
  uint64_t v117;
  llvm::Value **v118;
  llvm::Value *v119;
  llvm::BasicBlock *v120;
  _DWORD *v121;
  _DWORD *v122;
  uint64_t v123;
  llvm::Value *v124;
  _QWORD *v125;
  char *v126;
  char *v127;
  unsigned __int8 **v128;
  int v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  char v133;
  int v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  llvm::Value *v138;
  uint64_t v139;
  uint64_t *v140;
  _DWORD *v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  void (**v169)(void);
  uint64_t v170;
  llvm::ConstantInt **v172;
  llvm::BasicBlock *v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 *v177;
  int v178;
  unsigned int v180;
  uint64_t v181;
  int v182;
  _QWORD *v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t *v186;
  _QWORD *v187;
  unsigned __int8 *v188;
  __int128 v189;
  llvm::ConstantInt *v190;
  unsigned __int8 *v191;
  uint64_t v192;
  unsigned __int8 *v193;
  uint64_t v194[3];
  unsigned __int8 *v195;
  _BYTE *v196;
  _BYTE *v197;
  uint64_t v198;
  int v199;
  _BYTE v200[32];
  _BYTE *v201;
  _BYTE *v202;
  uint64_t v203;
  int v204;
  _BYTE v205[32];
  unsigned __int8 *v206;
  uint64_t v207[4];
  __int16 v208;
  unsigned __int8 *v209;
  _QWORD v210[3];
  _QWORD *v211;
  void *v212;
  unsigned int v213;
  uint64_t v214;
  __int16 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE v219[24];
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

  v224 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a1 + 48);
  if (!v3)
  {
    LODWORD(v6) = 0;
    v5 = 0;
    LOBYTE(v7) = 0;
    goto LABEL_227;
  }
  v4 = a2;
  v182 = 0;
  v178 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  a3 = 1;
  do
  {
    v8 = (uint64_t *)v3[1];
    v10 = v8 == (uint64_t *)(v3[2] + 40) || v8 == 0;
    if (!*(v3 - 2))
      goto LABEL_184;
    v11 = *((unsigned __int8 *)v3 - 8);
    v12 = v11 > 0x33;
    v13 = (1 << v11) & 0xD800000000000;
    if (v12 || v13 == 0)
      goto LABEL_184;
    v15 = (llvm::ConstantInt **)(v3 - 3);
    v186 = v3 - 3;
    v16 = *(v3 - 3);
    if (!v16 || *(_DWORD *)(v16 + 8) != 13)
      goto LABEL_184;
    v17 = *v4;
    v18 = *((unsigned int *)v4 + 4);
    if ((_DWORD)v18)
    {
      v19 = *(_DWORD *)(v16 + 8) >> 8;
      LODWORD(v20) = (v18 - 1) & (37 * v19);
      v21 = (int *)(v17 + 8 * v20);
      v22 = *v21;
      if (v19 == *v21)
        goto LABEL_18;
      v154 = v6;
      v155 = v5;
      v156 = v7;
      v157 = 1;
      while (1)
      {
        v7 = v156;
        v5 = v155;
        v4 = a2;
        a3 = 1;
        v6 = v154;
        if (v22 == -1)
          break;
        v158 = v20 + v157++;
        v20 = v158 & (v18 - 1);
        v22 = *(_DWORD *)(v17 + 8 * v20);
        if (v19 == v22)
        {
          v21 = (int *)(v17 + 8 * v20);
          v7 = v156;
          v5 = v155;
          v4 = a2;
          a3 = 1;
          v6 = v154;
          goto LABEL_18;
        }
      }
    }
    v21 = (int *)(v17 + 8 * v18);
LABEL_18:
    if ((int *)(v17 + 8 * v18) == v21)
      goto LABEL_184;
    v184 = v6;
    v23 = *(_QWORD **)v16;
    v24 = v21[1];
    *(_DWORD *)v219 = v24;
    if (v24 <= 63)
    {
      if (v24 <= 31)
      {
        switch(v24)
        {
          case 16:
            v25 = (_QWORD *)(*v23 + 1936);
            goto LABEL_27;
          case 8:
            v25 = (_QWORD *)(*v23 + 1912);
            goto LABEL_27;
          case 1:
            v25 = (_QWORD *)(*v23 + 1888);
            goto LABEL_27;
        }
      }
      else if (v24 == 32)
      {
        v25 = (_QWORD *)(*v23 + 1960);
        goto LABEL_27;
      }
    }
    else
    {
      if (v24 == 64)
      {
        v25 = (_QWORD *)(*v23 + 1984);
        goto LABEL_27;
      }
      if (v24 == 128)
      {
        v25 = (_QWORD *)(*v23 + 2008);
        goto LABEL_27;
      }
    }
    v141 = sub_1C5270984(*v23 + 2168, v219);
    v25 = (_QWORD *)*((_QWORD *)v141 + 1);
    if (!v25)
    {
      v25 = (_QWORD *)sub_1C484358C(*v23 + 2040, 24, 3);
      v142 = *(_DWORD *)v219;
      *v25 = v23;
      v25[2] = 0;
      v25[1] = (v142 << 8) | 0xDu;
      *((_QWORD *)v141 + 1) = v25;
    }
LABEL_27:
    v26 = (unsigned __int8 *)v3[2];
    v187 = v25;
    v188 = v26;
    LOBYTE(v185) = 1;
    v27 = *((_DWORD *)v3 - 1);
    v183 = v25;
    if ((v27 & 0x40000000) != 0)
      v28 = (llvm::ConstantInt **)*(v3 - 4);
    else
      v28 = &v15[-4 * (v27 & 0x7FFFFFF)];
    v6 = v184;
    v29 = *v28;
    v30 = v28[4];
    v32 = *((_BYTE *)v3 - 8) == 48 || *((_BYTE *)v3 - 8) == 51;
    LOBYTE(v189) = v32;
    *((_QWORD *)&v189 + 1) = v29;
    v190 = v30;
    *(_QWORD *)v219 = 0;
    v33 = sub_1C5ECA77C(v5, v184, (unsigned __int8 *)&v189, v219);
    v34 = *(_BYTE **)v219;
    if (!v33)
      v34 = (_BYTE *)(v5 + 40 * v184);
    if (v34 == (_BYTE *)(v5 + 40 * v184))
    {
      v180 = v7;
      v181 = v5;
      if ((v27 & 0x40000000) != 0)
        v36 = (llvm::ConstantInt **)*(v3 - 4);
      else
        v36 = &v15[-4 * (v27 & 0x7FFFFFF)];
      v37 = (unsigned __int8 *)*v36;
      v38 = (uint64_t)v36[4];
      v201 = v205;
      v202 = v205;
      v203 = 4;
      v204 = 0;
      v39 = sub_1C5ECA83C((uint64_t)&v185, (uint64_t)v37, (llvm::SmallPtrSetImplBase *)&v201);
      if (v39 == 2)
      {
        v40 = 0;
        v41 = 0;
        v7 = v180;
        goto LABEL_164;
      }
      v42 = v39;
      v196 = v200;
      v197 = v200;
      v198 = 4;
      v199 = 0;
      v43 = sub_1C5ECA83C((uint64_t)&v185, v38, (llvm::SmallPtrSetImplBase *)&v196);
      if (v43 == 2)
        goto LABEL_46;
      if (!(v43 | v42))
      {
        v47 = (uint64_t *)sub_1C4773D54((uint64_t)v219, (uint64_t)(v3 - 3), 0, 0, 0);
        v48 = (uint64_t)v187;
        v215 = 257;
        v49 = sub_1C4773E38(v47, 38, v37, (uint64_t)v187, (uint64_t)&v212);
        v215 = 257;
        v50 = sub_1C4773E38((uint64_t *)v219, 38, (unsigned __int8 *)v38, v48, (uint64_t)&v212);
        v215 = 257;
        v51 = (unsigned __int8 *)sub_1C538E6F8((uint64_t)v219, (uint64_t)v49, (uint64_t)v50, (uint64_t)&v212, 0);
        v215 = 257;
        v52 = sub_1C538EDCC((uint64_t *)v219, v49, (uint64_t)v50, (uint64_t)&v212);
        v53 = *v15;
        v215 = 257;
        v40 = sub_1C4773E38((uint64_t *)v219, 39, v51, (uint64_t)v53, (uint64_t)&v212);
        v54 = (uint64_t)*v15;
        v215 = 257;
        v26 = sub_1C4773E38((uint64_t *)v219, 39, v52, v54, (uint64_t)&v212);
        v5 = v181;
        if (*(_BYTE **)v219 != &v219[16])
          free(*(void **)v219);
        v41 = 1;
        v7 = v180;
        v6 = v184;
        goto LABEL_162;
      }
      v44 = *(unsigned __int8 *)(v38 + 16);
      if (v44 == 16 || v44 == 77 && *(_QWORD *)(v38 + 40) == v3[2] && *(_BYTE *)(*(_QWORD *)(v38 - 32) + 16) == 16)
      {
LABEL_46:
        v40 = 0;
        v41 = 0;
        v7 = v180;
        v5 = v181;
LABEL_162:
        if (v197 != v196)
          free(v197);
LABEL_164:
        if (v202 != v201)
          free(v202);
        if (!v41)
        {
          v4 = a2;
          a3 = 1;
          goto LABEL_184;
        }
        *(_OWORD *)v219 = v189;
        *(_QWORD *)&v219[16] = v190;
        *(_QWORD *)&v220 = v40;
        *((_QWORD *)&v220 + 1) = v26;
        v196 = 0;
        v133 = sub_1C5ECA77C(v5, v6, v219, &v196);
        v34 = v196;
        if ((v133 & 1) != 0)
        {
          v4 = a2;
LABEL_178:
          v35 = v186;
          goto LABEL_179;
        }
        v201 = v196;
        if (4 * v182 + 4 >= (3 * v6))
        {
          v134 = 2 * v6;
          v4 = a2;
        }
        else
        {
          v134 = v6;
          v4 = a2;
          if (~v182 - v178 + (int)v6 > v6 >> 3)
          {
            v135 = v5;
LABEL_173:
            if (*v34 || *((_QWORD *)v34 + 1) || *((_QWORD *)v34 + 2))
              --v178;
            ++v182;
            *v34 = v219[0];
            *(_OWORD *)(v34 + 8) = *(_OWORD *)&v219[8];
            *(_OWORD *)(v34 + 24) = v220;
            v5 = v135;
            goto LABEL_178;
          }
        }
        v143 = (v134 - 1) | ((unint64_t)(v134 - 1) >> 1);
        v144 = v143 | (v143 >> 2) | ((v143 | (v143 >> 2)) >> 4);
        v145 = ((v144 | (v144 >> 8)) >> 16) | v144 | (v144 >> 8);
        if ((v145 + 1) > 0x40)
          v6 = (v145 + 1);
        else
          v6 = 64;
        v146 = (char *)operator new(40 * v6, (std::align_val_t)8uLL);
        v135 = (uint64_t)v146;
        v147 = &v146[40 * v6];
        if (v5)
        {
          v148 = v146;
          do
          {
            *v148 = 0;
            *((_QWORD *)v148 + 1) = 0;
            *((_QWORD *)v148 + 2) = 0;
            v148 += 40;
          }
          while (v148 != v147);
          if (v184)
          {
            v182 = 0;
            v149 = 40 * v184;
            v150 = v181;
            do
            {
              v151 = *(_BYTE *)v150;
              if (*(_QWORD *)(v150 + 8) || *(_QWORD *)(v150 + 16))
              {
                v212 = 0;
                sub_1C5ECA77C(v135, v6, (unsigned __int8 *)v150, &v212);
                v152 = (char *)v212;
                *(_BYTE *)v212 = v151;
                *((_QWORD *)v152 + 1) = *(_QWORD *)(v150 + 8);
                *((_QWORD *)v152 + 2) = *(_QWORD *)(v150 + 16);
                *(_OWORD *)(v152 + 24) = *(_OWORD *)(v150 + 24);
                ++v182;
              }
              v4 = a2;
              v150 += 40;
              v149 -= 40;
            }
            while (v149);
          }
          else
          {
            v182 = 0;
          }
          MEMORY[0x1CAA32FB4](v181, 8);
        }
        else
        {
          v153 = v146;
          do
          {
            *v153 = 0;
            *((_QWORD *)v153 + 1) = 0;
            *((_QWORD *)v153 + 2) = 0;
            v153 += 40;
          }
          while (v153 != v147);
          v182 = 0;
        }
        sub_1C5ECA77C(v135, v6, v219, &v201);
        v178 = 0;
        v34 = v201;
        goto LABEL_173;
      }
      v174 = v43;
      sub_1C4D8ADA0((uint64_t)&v212, (uint64_t **)v26, (uint64_t)(v26 + 40), 0, 0, 0);
      v45 = (unsigned __int8 *)v3[3];
      v195 = v45;
      if (v45)
      {
        llvm::MetadataTracking::track((uint64_t)&v195, v45, 2);
        v46 = v195;
      }
      else
      {
        v46 = 0;
      }
      sub_1C4774EF4((uint64_t)&v212, 0, (uint64_t)v46);
      if (v195)
        llvm::MetadataTracking::untrack((uint64_t)&v195, v195);
      v175 = v38;
      if (v42)
      {
        v55 = v37;
LABEL_66:
        v172 = (llvm::ConstantInt **)v55;
        WORD4(v220) = 257;
        v56 = llvm::BasicBlock::splitBasicBlock((uint64_t *)v26, v3, (uint64_t)v219, 0);
        v57 = *((_QWORD *)v26 + 5);
        if (v57)
          v58 = v57 - 24;
        else
          v58 = 0;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v58 + 40) + 40, (uint64_t ***)v58);
        v59 = *(_QWORD *)(v58 + 24);
        v60 = *(_QWORD **)(v58 + 32);
        *v60 = v59;
        *(_QWORD *)(v59 + 8) = v60;
        *(_QWORD *)(v58 + 24) = 0;
        *(_QWORD *)(v58 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v58);
        sub_1C5ECAB60(v194, &v185, v56);
        v192 = 0;
        v193 = 0;
        v61 = (_QWORD ***)*((_QWORD *)v26 + 7);
        v63 = *v61;
        v62 = (uint64_t)(v61 + 9);
        v64 = *v63;
        WORD4(v220) = 257;
        v65 = operator new();
        *(_QWORD *)v65 = *v64 + 1600;
        *(_QWORD *)(v65 + 8) = 0;
        v66 = *(_DWORD *)(v65 + 20) & 0xC0000000;
        *(_DWORD *)(v65 + 16) = 22;
        *(_DWORD *)(v65 + 20) = v66;
        *(_QWORD *)(v65 + 24) = 0;
        v67 = (_QWORD *)(v65 + 24);
        *(_QWORD *)(v65 + 32) = 0;
        *(_QWORD *)(v65 + 40) = v65 + 40;
        *(_QWORD *)(v65 + 48) = v65 + 40;
        *(_QWORD *)(v65 + 56) = 0;
        v176 = v56;
        if (v56)
          v68 = (uint64_t *)(v56 + 24);
        else
          v68 = (uint64_t *)v62;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v62, (_QWORD *)v65);
        v69 = *v68;
        *(_QWORD *)(v65 + 32) = v68;
        *v67 = v69;
        *(_QWORD *)(v69 + 8) = v67;
        *v68 = (uint64_t)v67;
        llvm::Value::setName((uint64_t ***)v65, (uint64_t)v219);
        v191 = (unsigned __int8 *)v65;
        sub_1C4D8ADA0((uint64_t)v219, (uint64_t **)v65, *(_QWORD *)(v65 + 48), 0, 0, 0);
        v70 = (unsigned __int8 *)v3[3];
        v206 = v70;
        if (v70)
        {
          llvm::MetadataTracking::track((uint64_t)&v206, v70, 2);
          v71 = v206;
        }
        else
        {
          v71 = 0;
        }
        sub_1C4774EF4((uint64_t)v219, 0, (uint64_t)v71);
        if (v206)
          llvm::MetadataTracking::untrack((uint64_t)&v206, v206);
        v93 = *((_DWORD *)v3 - 1);
        if ((v93 & 0x40000000) != 0)
          v94 = (llvm::ConstantInt **)*(v3 - 4);
        else
          v94 = &v15[-4 * (v93 & 0x7FFFFFF)];
        v95 = *v94;
        v96 = (uint64_t)v94[4];
        v97 = *((unsigned __int8 *)v3 - 8);
        v173 = (llvm::BasicBlock *)v65;
        if (v97 == 51 || v97 == 48)
        {
          v208 = 257;
          v192 = sub_1C538EA44((uint64_t)v219, (uint64_t)v95, v96, (uint64_t)v207, 0);
          v208 = 257;
          v98 = sub_1C622AECC((uint64_t *)v219, v95, v96, (uint64_t)v207);
        }
        else
        {
          v208 = 257;
          v192 = sub_1C538E6F8((uint64_t)v219, (uint64_t)v95, v96, (uint64_t)v207, 0);
          v208 = 257;
          v98 = sub_1C538EDCC((uint64_t *)v219, v95, v96, (uint64_t)v207);
        }
        v193 = v98;
        v99 = (char *)operator new(0x60uLL);
        v100 = v99;
        *((_DWORD *)v99 + 13) = *((_DWORD *)v99 + 13) & 0x38000000 | 1;
        *(_QWORD *)v99 = 0;
        *((_QWORD *)v99 + 2) = 0;
        *((_QWORD *)v99 + 1) = 0;
        *((_QWORD *)v99 + 4) = ***(_QWORD ***)v176 + 1576;
        v101 = (llvm::Value *)(v99 + 32);
        *((_QWORD *)v99 + 3) = v99 + 32;
        *((_QWORD *)v99 + 5) = 0;
        v99[48] = 30;
        v99[49] = 0;
        *((_WORD *)v99 + 25) = 0;
        *((_DWORD *)v99 + 13) = 1;
        *(_OWORD *)(v99 + 56) = 0u;
        *(_OWORD *)(v99 + 72) = 0u;
        *((_DWORD *)v99 + 22) = 0;
        *(_QWORD *)v99 = v176;
        v102 = (_QWORD *)(v176 + 8);
        v103 = *(_QWORD *)(v176 + 8);
        *((_QWORD *)v99 + 1) = v103;
        if (v103)
          *(_QWORD *)(v103 + 16) = v99 + 8;
        *((_QWORD *)v99 + 2) = v102;
        *v102 = v99;
        v208 = 257;
        (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v223 + 16))(v223, v101, v207, v221, v222);
        v104 = *(_QWORD *)v219;
        if (*(_DWORD *)&v219[8])
        {
          v105 = *(_QWORD *)v219 + 16 * *(unsigned int *)&v219[8];
          v106 = (unsigned __int8 **)(v100 + 80);
          while (1)
          {
            v107 = *(_DWORD *)v104;
            v108 = *(unsigned __int8 **)(v104 + 8);
            if (v108)
            {
              if (!v107)
              {
                v209 = *(unsigned __int8 **)(v104 + 8);
                llvm::MetadataTracking::track((uint64_t)&v209, v108, 2);
                v109 = *v106;
                goto LABEL_120;
              }
            }
            else
            {
              v109 = *v106;
              if (!*v106 && (v100[55] & 0x20) == 0)
                goto LABEL_117;
              if (!v107)
              {
                v209 = 0;
LABEL_120:
                if (v109)
                  llvm::MetadataTracking::untrack((uint64_t)(v100 + 80), v109);
                v110 = v209;
                *v106 = v209;
                if (v110)
                  llvm::MetadataTracking::retrack((uint64_t)&v209, v110, (uint64_t)(v100 + 80));
                goto LABEL_117;
              }
            }
            llvm::Value::setMetadata(v101, *(_DWORD *)v104, (llvm::MDNode *)v108);
LABEL_117:
            v104 += 16;
            if (v104 == v105)
            {
              v104 = *(_QWORD *)v219;
              break;
            }
          }
        }
        if ((_BYTE *)v104 != &v219[16])
          free((void *)v104);
        v40 = sub_1C5ECAF30((uint64_t)&v185, v194, (uint64_t *)&v191, v176);
        v177 = v111;
        if (v174)
          v112 = (llvm::ConstantInt **)v175;
        else
          v112 = 0;
        sub_1C4D8ADA0((uint64_t)v219, (uint64_t **)v26, (uint64_t)(v26 + 40), 0, 0, 0);
        v113 = (unsigned __int8 *)v3[3];
        v209 = v113;
        if (v113)
        {
          llvm::MetadataTracking::track((uint64_t)&v209, v113, 2);
          v114 = v209;
        }
        else
        {
          v114 = 0;
        }
        sub_1C4774EF4((uint64_t)v219, 0, (uint64_t)v114);
        if (v209)
          llvm::MetadataTracking::untrack((uint64_t)&v209, v209);
        if (v112 && v172)
        {
          v208 = 257;
          v112 = (llvm::ConstantInt **)sub_1C4773594((uint64_t)v219, v172, (uint64_t)v112, (uint64_t)v207);
        }
        else if (v172)
        {
          v112 = v172;
        }
        v115 = ~(0xFFFFFFFFFFFFFFFFLL >> -(*((_DWORD *)v183 + 2) >> 8));
        v208 = 257;
        v116 = llvm::ConstantInt::get(*v112, v115, 0);
        v117 = sub_1C4D89BCC((uint64_t)v219, v112, (uint64_t)v116, (uint64_t)v207);
        v118 = llvm::ConstantInt::get(*v15, 0, (const llvm::APInt *)1);
        v208 = 257;
        v119 = (llvm::Value *)sub_1C4774B48((uint64_t)v219, 32, v117, (uint64_t)v118, (uint64_t)v207);
        if (*(_BYTE **)v219 != &v219[16])
          free(*(void **)v219);
        v120 = (llvm::BasicBlock *)v194[0];
        v121 = operator new(0xA0uLL);
        v122 = v121;
        v123 = 0;
        v124 = (llvm::Value *)(v121 + 24);
        v121[29] = v121[29] & 0x38000000 | 3;
        do
        {
          v125 = &v121[v123];
          *v125 = 0;
          v125[1] = 0;
          v125[2] = 0;
          v125[3] = v124;
          v123 += 8;
        }
        while (v123 != 24);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v121 + 24), v120, v173, v119, 0);
        WORD4(v220) = 257;
        (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v218 + 16))(v218, v124, v219, v216, v217);
        if (v213)
        {
          v126 = (char *)v212;
          v127 = (char *)v212 + 16 * v213;
          v128 = (unsigned __int8 **)(v122 + 36);
          while (1)
          {
            v129 = *(_DWORD *)v126;
            v130 = (unsigned __int8 *)*((_QWORD *)v126 + 1);
            if (v130)
            {
              if (!v129)
              {
                v207[0] = *((_QWORD *)v126 + 1);
                llvm::MetadataTracking::track((uint64_t)v207, v130, 2);
                v131 = *v128;
                goto LABEL_155;
              }
            }
            else
            {
              v131 = *v128;
              if (!*v128 && (*((_BYTE *)v122 + 119) & 0x20) == 0)
                goto LABEL_152;
              if (!v129)
              {
                v207[0] = 0;
LABEL_155:
                if (v131)
                  llvm::MetadataTracking::untrack((uint64_t)(v122 + 36), v131);
                v132 = (unsigned __int8 *)v207[0];
                *v128 = (unsigned __int8 *)v207[0];
                if (v132)
                  llvm::MetadataTracking::retrack((uint64_t)v207, v132, (uint64_t)(v122 + 36));
                goto LABEL_152;
              }
            }
            llvm::Value::setMetadata(v124, *(_DWORD *)v126, (llvm::MDNode *)v130);
LABEL_152:
            v126 += 16;
            if (v126 == v127)
              goto LABEL_159;
          }
        }
        goto LABEL_159;
      }
      v55 = 0;
      v72 = *((unsigned __int8 *)v3 - 8);
      if (v72 == 48 || v72 == 51)
        goto LABEL_66;
      WORD4(v220) = 257;
      v73 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock((uint64_t *)v26, v3, (uint64_t)v219, 0);
      v74 = *((_QWORD *)v26 + 5);
      if (v74)
        v75 = v74 - 24;
      else
        v75 = 0;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v75 + 40) + 40, (uint64_t ***)v75);
      v76 = *(_QWORD *)(v75 + 24);
      v77 = *(_QWORD **)(v75 + 32);
      *v77 = v76;
      *(_QWORD *)(v76 + 8) = v77;
      *(_QWORD *)(v75 + 24) = 0;
      *(_QWORD *)(v75 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v75);
      v207[0] = (uint64_t)v26;
      v207[1] = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt *)*(v3 - 3), 0, 0);
      v207[2] = (uint64_t)v37;
      sub_1C5ECAB60(v194, &v185, (uint64_t)v73);
      v40 = sub_1C5ECAF30((uint64_t)&v185, v194, v207, (uint64_t)v73);
      v177 = v78;
      WORD4(v220) = 257;
      v79 = (llvm::Value *)sub_1C4774B48((uint64_t)&v212, 35, (uint64_t)v37, v175, (uint64_t)v219);
      v80 = (llvm::BasicBlock *)v194[0];
      v81 = operator new(0xA0uLL);
      v82 = v81;
      v83 = 0;
      v84 = (llvm::Value *)(v81 + 24);
      v81[29] = v81[29] & 0x38000000 | 3;
      do
      {
        v85 = &v81[v83];
        *v85 = 0;
        v85[1] = 0;
        v85[2] = 0;
        v85[3] = v84;
        v83 += 8;
      }
      while (v83 != 24);
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v81 + 24), v80, v73, v79, 0);
      WORD4(v220) = 257;
      (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v218 + 16))(v218, v84, v219, v216, v217);
      if (!v213)
      {
LABEL_159:
        v7 = v180;
        v5 = v181;
        v6 = v184;
        v26 = v177;
        if (v212 != &v214)
          free(v212);
        v41 = 1;
        goto LABEL_162;
      }
      v86 = (char *)v212;
      v87 = (char *)v212 + 16 * v213;
      v88 = (unsigned __int8 **)(v82 + 36);
      while (1)
      {
        v89 = *(_DWORD *)v86;
        v90 = (unsigned __int8 *)*((_QWORD *)v86 + 1);
        if (v90)
        {
          if (!v89)
          {
            v191 = (unsigned __int8 *)*((_QWORD *)v86 + 1);
            llvm::MetadataTracking::track((uint64_t)&v191, v90, 2);
            v91 = *v88;
            goto LABEL_93;
          }
        }
        else
        {
          v91 = *v88;
          if (!*v88 && (*((_BYTE *)v82 + 119) & 0x20) == 0)
            goto LABEL_90;
          if (!v89)
          {
            v191 = 0;
LABEL_93:
            if (v91)
              llvm::MetadataTracking::untrack((uint64_t)(v82 + 36), v91);
            v92 = v191;
            *v88 = v191;
            if (v92)
              llvm::MetadataTracking::retrack((uint64_t)&v191, v92, (uint64_t)(v82 + 36));
            goto LABEL_90;
          }
        }
        llvm::Value::setMetadata(v84, *(_DWORD *)v86, (llvm::MDNode *)v90);
LABEL_90:
        v86 += 16;
        if (v86 == v87)
          goto LABEL_159;
      }
    }
    v35 = v3 - 3;
LABEL_179:
    v136 = *((unsigned __int8 *)v35 + 16) - 47 >= 2;
    v137 = 32;
    if (!v136)
      v137 = 24;
    v138 = *(llvm::Value **)&v34[v137];
    if (v138)
    {
      v7 = 1;
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v3 - 3), v138, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v3[2] + 40, (uint64_t ***)v3 - 3);
      v139 = *v3;
      v140 = (uint64_t *)v3[1];
      *v140 = *v3;
      *(_QWORD *)(v139 + 8) = v140;
      *v3 = 0;
      v3[1] = 0;
      llvm::Value::deleteValue((llvm::Value *)(v3 - 3));
    }
    a3 = 1;
LABEL_184:
    v3 = v8;
  }
  while (!v10);
  if (v182)
  {
    v159 = v5 + 40 * v6;
    if ((_DWORD)v6)
    {
      v160 = 0;
      v161 = v6;
      v162 = v5;
      while (1)
      {
        v163 = *(_QWORD *)(v5 + v160 + 8);
        if (*(_BYTE *)(v5 + v160))
        {
          if (v163)
            goto LABEL_228;
        }
        else if (v163)
        {
          v162 = v5 + v160;
          goto LABEL_228;
        }
        if (*(_QWORD *)(v5 + v160 + 16))
          goto LABEL_228;
        v162 += 40;
        v160 += 40;
        if (40 * v6 == v160)
        {
          v162 = v5 + 40 * v6;
          goto LABEL_228;
        }
      }
    }
    v161 = 0;
    v162 = v5;
    goto LABEL_228;
  }
LABEL_227:
  v161 = v6;
  v162 = v5 + 40 * v6;
  v159 = v162;
LABEL_228:
  v164 = v5 + 40 * v161;
  if (v162 == v164)
    goto LABEL_243;
  do
  {
    v165 = 0;
    v166 = 0;
    *(_OWORD *)v219 = *(_OWORD *)(v162 + 24);
    do
    {
      v167 = v165;
      v168 = *(_QWORD *)&v219[8 * v166];
      v211 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions(v168, 0, 0, v210);
      if (v211 == v210)
      {
        v169 = (void (**)(void))(v210[0] + 32);
      }
      else
      {
        if (!v211)
          goto LABEL_235;
        v169 = (void (**)(void))(*v211 + 40);
      }
      (*v169)();
LABEL_235:
      v165 = 1;
      v166 = 1;
    }
    while ((v167 & 1) == 0);
    v170 = v162 + 40;
    v162 = v159;
    if (v170 != v159)
    {
      v162 = v170;
      while (!*(_QWORD *)(v162 + 8) && !*(_QWORD *)(v162 + 16))
      {
        v162 += 40;
        if (v162 == v159)
        {
          v162 = v159;
          break;
        }
      }
    }
  }
  while (v162 != v164);
LABEL_243:
  MEMORY[0x1CAA32FB4](v5, 8, a3);
  return v7 & 1;
}

uint64_t sub_1C5ECA77C(uint64_t a1, int a2, unsigned __int8 *a3, _QWORD *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int i;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  BOOL v15;
  uint64_t result;

  if (!a2)
  {
    v12 = 0;
    result = 0;
    goto LABEL_23;
  }
  v4 = 0;
  v5 = *((_QWORD *)a3 + 1);
  v6 = *((_QWORD *)a3 + 2);
  v7 = *a3;
  v8 = v6 ^ v5 ^ v7;
  v9 = a2 - 1;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v9;
    v12 = (unsigned __int8 *)(a1 + 40 * (v8 & v9));
    v13 = *((_QWORD *)v12 + 1);
    if (v7 == *v12 && v5 == v13)
    {
      v13 = *((_QWORD *)a3 + 1);
      if (v6 == *((_QWORD *)v12 + 2))
      {
        result = 1;
        goto LABEL_23;
      }
    }
    if (!*v12)
      break;
    if (!v13)
    {
      v15 = *((_QWORD *)v12 + 2) == 0;
      goto LABEL_14;
    }
LABEL_13:
    v15 = 0;
LABEL_14:
    if (v15 && v4 == 0)
      v4 = (unsigned __int8 *)(a1 + 40 * v11);
    v8 = v11 + i;
  }
  if (v13 || *((_QWORD *)v12 + 2))
    goto LABEL_13;
  result = 0;
  if (v4)
    v12 = v4;
LABEL_23:
  *a4 = v12;
  return result;
}

uint64_t sub_1C5ECA83C(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  unsigned int v6;
  unsigned int v7;
  const llvm::DataLayout *v8;
  const llvm::DataLayout *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int64_t v15;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  const llvm::DataLayout *v36[5];
  char v37;

  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v7 = *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
  v8 = (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 56) + 40) + 272);
  v33 = v7;
  if (v7 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v32, 0, 0);
    v35 = v7;
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, 0, 0);
  }
  else
  {
    v35 = v7;
    v32 = 0;
    v34 = 0;
  }
  if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu || (v9 = (const llvm::DataLayout *)a2, !*(_QWORD *)(a2 + 40)))
    v9 = 0;
  v36[0] = v8;
  v36[1] = 0;
  v10 = v7 - (v6 >> 8);
  v36[3] = 0;
  v36[4] = 0;
  v36[2] = v9;
  v37 = 1;
  sub_1C4F82B7C(a2, &v32, 0, v36);
  if (v33 > 0x40)
  {
    v11 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v32);
  }
  else if (v33)
  {
    v11 = __clz(~(*(_QWORD *)&v32 << -(char)v33));
  }
  else
  {
    v11 = 0;
  }
  if (v11 < v10)
  {
    if (v35 > 0x40)
    {
      v14 = 0;
      v15 = ((unint64_t)v35 + 63) >> 6;
      do
      {
        if (v15-- < 1)
          break;
        v17 = *(_QWORD *)(v34 + 8 * v15);
        v14 += __clz(v17);
      }
      while (!v17);
      if ((v35 & 0x3F) != 0)
        v18 = v35 | 0xFFFFFFC0;
      else
        v18 = 0;
      v12 = v14 + v18;
    }
    else
    {
      v12 = v35 + __clz(v34) - 64;
    }
    if (v12 < v10)
      goto LABEL_21;
    v19 = *(unsigned __int8 *)(a2 + 16);
    if (v19 < 0x1C)
    {
LABEL_23:
      v13 = 1;
      goto LABEL_24;
    }
    if (v19 == 83)
    {
      if ((*((_DWORD *)a3 + 5) - *((_DWORD *)a3 + 6)) > 0xF)
        goto LABEL_23;
      sub_1C4774094(a3, a2);
      if (v23)
      {
        v24 = *(_DWORD *)(a2 + 20);
        if ((v24 & 0x40000000) != 0)
        {
          v26 = *(_QWORD **)(a2 - 8);
          v25 = v24 & 0x7FFFFFF;
        }
        else
        {
          v25 = v24 & 0x7FFFFFF;
          v26 = (_QWORD *)(a2 - 32 * v25);
        }
        if (v25)
        {
          v30 = 32 * v25;
          do
          {
            v31 = *v26;
            if (sub_1C5ECA83C(a1, *v26, a3) != 2 && *(unsigned __int8 *)(v31 + 16) - 11 > 1)
              goto LABEL_23;
            v26 += 4;
            v30 -= 32;
          }
          while (v30);
        }
      }
    }
    else if (v19 != 58)
    {
      if (v19 != 45)
        goto LABEL_23;
      v21 = *(_DWORD *)(a2 + 20);
      v22 = (v21 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v21 & 0x7FFFFFF);
      v27 = *(_QWORD *)(v22 + 32);
      v28 = *(unsigned __int8 *)(v27 + 16);
      if (!v27 || v28 != 16)
      {
        if (v28 != 77)
          goto LABEL_23;
        v27 = *(_QWORD *)(v27 - 32);
        if (*(_BYTE *)(v27 + 16) != 16)
          goto LABEL_23;
      }
      v29 = *(_DWORD *)(v27 + 32);
      if (v29 - sub_1C4959174((llvm::APInt *)(v27 + 24)) + 1 <= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8) >> 8)
        goto LABEL_23;
    }
LABEL_21:
    v13 = 2;
    goto LABEL_24;
  }
  v13 = 0;
LABEL_24:
  if (v35 >= 0x41 && v34)
    MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
  if (v33 >= 0x41 && *(_QWORD *)&v32)
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v32, 0x1000C8000313F17);
  return v13;
}

void sub_1C5ECAB60(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD ***v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  llvm::Value *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unsigned __int8 **v37;
  int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  _BYTE v43[32];
  __int16 v44;
  unsigned __int8 *v45;
  void *v46;
  unsigned int v47;
  _WORD v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  a1[2] = 0;
  v6 = *(_QWORD ****)(a2[3] + 56);
  v8 = *v6;
  v7 = (uint64_t)(v6 + 9);
  v9 = *v8;
  v48[8] = 257;
  v10 = operator new();
  *(_QWORD *)v10 = *v9 + 1600;
  *(_QWORD *)(v10 + 8) = 0;
  v11 = *(_DWORD *)(v10 + 20) & 0xC0000000;
  *(_DWORD *)(v10 + 16) = 22;
  *(_DWORD *)(v10 + 20) = v11;
  *(_QWORD *)(v10 + 24) = 0;
  v12 = (_QWORD *)(v10 + 24);
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = v10 + 40;
  *(_QWORD *)(v10 + 48) = v10 + 40;
  *(_QWORD *)(v10 + 56) = 0;
  if (a3)
    v13 = (uint64_t *)(a3 + 24);
  else
    v13 = (uint64_t *)v7;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v7, (_QWORD *)v10);
  v14 = *v13;
  *(_QWORD *)(v10 + 32) = v13;
  *v12 = v14;
  *(_QWORD *)(v14 + 8) = v12;
  *v13 = (uint64_t)v12;
  llvm::Value::setName((uint64_t ***)v10, (uint64_t)&v46);
  *a1 = v10;
  sub_1C4D8ADA0((uint64_t)&v46, (uint64_t **)v10, *(_QWORD *)(v10 + 48), 0, 0, 0);
  v15 = *(unsigned __int8 **)(a2[1] + 48);
  v42 = v15;
  if (v15)
  {
    llvm::MetadataTracking::track((uint64_t)&v42, v15, 2);
    v16 = v42;
  }
  else
  {
    v16 = 0;
  }
  sub_1C4774EF4((uint64_t)&v46, 0, (uint64_t)v16);
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  v17 = a2[1];
  v18 = *(_DWORD *)(v17 + 20);
  if ((v18 & 0x40000000) != 0)
    v19 = *(unsigned __int8 ***)(v17 - 8);
  else
    v19 = (unsigned __int8 **)(v17 - 32 * (v18 & 0x7FFFFFF));
  v20 = *v19;
  v21 = v19[4];
  v22 = a2[2];
  v44 = 257;
  v23 = sub_1C4773E38((uint64_t *)&v46, 38, v21, v22, (uint64_t)v43);
  v24 = a2[2];
  v44 = 257;
  v25 = sub_1C4773E38((uint64_t *)&v46, 38, v20, v24, (uint64_t)v43);
  v44 = 257;
  v26 = (unsigned __int8 *)sub_1C538E6F8((uint64_t)&v46, (uint64_t)v25, (uint64_t)v23, (uint64_t)v43, 0);
  v44 = 257;
  v27 = sub_1C538EDCC((uint64_t *)&v46, v25, (uint64_t)v23, (uint64_t)v43);
  v28 = *(_QWORD *)a2[1];
  v44 = 257;
  a1[1] = (uint64_t)sub_1C4773E38((uint64_t *)&v46, 39, v26, v28, (uint64_t)v43);
  v29 = *(_QWORD *)a2[1];
  v44 = 257;
  a1[2] = (uint64_t)sub_1C4773E38((uint64_t *)&v46, 39, v27, v29, (uint64_t)v43);
  v30 = (char *)operator new(0x60uLL);
  v31 = v30;
  *((_DWORD *)v30 + 13) = *((_DWORD *)v30 + 13) & 0x38000000 | 1;
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 2) = 0;
  *((_QWORD *)v30 + 1) = 0;
  *((_QWORD *)v30 + 4) = ***(_QWORD ***)a3 + 1576;
  v32 = (llvm::Value *)(v30 + 32);
  *((_QWORD *)v30 + 3) = v30 + 32;
  *((_QWORD *)v30 + 5) = 0;
  v30[48] = 30;
  v30[49] = 0;
  *((_WORD *)v30 + 25) = 0;
  *((_DWORD *)v30 + 13) = 1;
  *((_DWORD *)v30 + 22) = 0;
  *(_OWORD *)(v30 + 72) = 0u;
  *(_OWORD *)(v30 + 56) = 0u;
  v33 = (_QWORD *)(a3 + 8);
  v34 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v30 = a3;
  *((_QWORD *)v30 + 1) = v34;
  if (v34)
    *(_QWORD *)(v34 + 16) = v30 + 8;
  *((_QWORD *)v30 + 2) = v33;
  *v33 = v30;
  v44 = 257;
  (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v32, v43, v49, v50);
  v35 = (char *)v46;
  if (v47)
  {
    v36 = (char *)v46 + 16 * v47;
    v37 = (unsigned __int8 **)(v31 + 80);
    while (1)
    {
      v38 = *(_DWORD *)v35;
      v39 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
      if (v39)
      {
        if (!v38)
        {
          v45 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
          llvm::MetadataTracking::track((uint64_t)&v45, v39, 2);
          v40 = *v37;
          if (!*v37)
          {
LABEL_27:
            v41 = v45;
            *v37 = v45;
            if (v41)
              llvm::MetadataTracking::retrack((uint64_t)&v45, v41, (uint64_t)(v31 + 80));
            goto LABEL_24;
          }
LABEL_21:
          llvm::MetadataTracking::untrack((uint64_t)(v31 + 80), v40);
          goto LABEL_27;
        }
      }
      else
      {
        v40 = *v37;
        if (!*v37 && (v31[55] & 0x20) == 0)
          goto LABEL_24;
        if (!v38)
        {
          v45 = 0;
          if (!v40)
            goto LABEL_27;
          goto LABEL_21;
        }
      }
      llvm::Value::setMetadata(v32, *(_DWORD *)v35, (llvm::MDNode *)v39);
LABEL_24:
      v35 += 16;
      if (v35 == v36)
      {
        v35 = (char *)v46;
        break;
      }
    }
  }
  if (v35 != (char *)v48)
    free(v35);
}

llvm::PHINode *sub_1C5ECAF30(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  llvm::PHINode *v10;
  uint64_t v11;
  llvm::PHINode *v12;
  _BYTE v14[32];
  __int16 v15;
  unsigned __int8 *v16;
  void *v17[2];
  _QWORD v18[16];

  v18[15] = *MEMORY[0x1E0C80C00];
  sub_1C4D8ADA0((uint64_t)v17, (uint64_t **)a4, *(_QWORD *)(a4 + 48), 0, 0, 0);
  v7 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 48);
  v16 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v16, v7, 2);
    v8 = v16;
  }
  else
  {
    v8 = 0;
  }
  sub_1C4774EF4((uint64_t)v17, 0, (uint64_t)v8);
  if (v16)
    llvm::MetadataTracking::untrack((uint64_t)&v16, v16);
  v9 = **(_QWORD **)(a1 + 8);
  v15 = 257;
  v10 = (llvm::PHINode *)sub_1C4867E94((uint64_t)v17, v9, 2, (uint64_t)v14);
  sub_1C477667C(v10, a2[1], *a2);
  sub_1C477667C(v10, a3[1], *a3);
  v11 = **(_QWORD **)(a1 + 8);
  v15 = 257;
  v12 = (llvm::PHINode *)sub_1C4867E94((uint64_t)v17, v11, 2, (uint64_t)v14);
  sub_1C477667C(v12, a2[2], *a2);
  sub_1C477667C(v12, a3[2], *a3);
  if (v17[0] != v18)
    free(v17[0]);
  return v10;
}

uint64_t llvm::versionCallSite(llvm *this, llvm::CallBase *a2, llvm::Value *a3, llvm::MDNode *a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  llvm::Value *v10;
  llvm::MDNode *v11;
  char *v12;
  uint64_t ***v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Instruction *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Instruction *v22;
  llvm::User *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ***v27;
  uint64_t ***v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ***v31;
  uint64_t **v32;
  _QWORD *v33;
  uint64_t **v34;
  int v35;
  BOOL v36;
  llvm *v37;
  uint64_t ***v38;
  uint64_t **v39;
  uint64_t **v40;
  llvm::Instruction *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  llvm::Value *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unsigned __int8 **v53;
  int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  llvm::Value *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _BYTE *v93;
  _QWORD *v94;
  llvm::User **v95;
  uint64_t v96;
  llvm::User *v97;
  llvm::User *v98;
  llvm::User *v99;
  uint64_t v100;
  llvm::Value *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v108;
  llvm::ValueSymbolTable *v109;
  uint64_t v110;
  llvm::ValueSymbolTable *v111;
  uint64_t v112;
  llvm::ValueSymbolTable *v113;
  uint64_t v114;
  llvm::ValueSymbolTable *v115;
  char *v116;
  llvm *v117;
  uint64_t ***v118;
  llvm::Instruction *v119;
  uint64_t ***v120;
  unsigned __int8 *v121;
  void *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  _BYTE v130[16];
  __int16 v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v122, (uint64_t)this, 0, 0, 0);
  v7 = *((_QWORD *)this + 5);
  v8 = (uint64_t *)*((_QWORD *)this - 4);
  v9 = *v8;
  if (*v8 != *(_QWORD *)a2)
  {
    v131 = 257;
    a2 = (llvm::CallBase *)sub_1C4773E38((uint64_t *)&v122, 49, (unsigned __int8 *)a2, v9, (uint64_t)&v128);
    v8 = (uint64_t *)*((_QWORD *)this - 4);
  }
  v131 = 257;
  v10 = (llvm::Value *)sub_1C4774B48((uint64_t)&v122, 32, (uint64_t)v8, (uint64_t)a2, (uint64_t)&v128);
  if (*((_BYTE *)this + 16) == 84 && (*((_WORD *)this + 9) & 3) == 2)
  {
    v12 = sub_1C5EBFBC0(v10, (uint64_t *)this, 0, a3, 0, 0, 0, 0);
    v13 = (uint64_t ***)*((_QWORD *)v12 + 5);
    v128 = "if.true.direct_targ";
    v131 = 259;
    llvm::Value::setName(v13, (uint64_t)&v128);
    llvm::Instruction::clone(this);
    v15 = v14;
    v16 = *((_QWORD *)v12 + 5);
    *(_QWORD *)(v14 + 40) = v16;
    *(_WORD *)(v16 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(v14 + 23) & 0x10) != 0)
    {
      v110 = *(_QWORD *)(v16 + 56);
      if (v110)
      {
        v111 = *(llvm::ValueSymbolTable **)(v110 + 104);
        if (v111)
          llvm::ValueSymbolTable::reinsertValue(v111, (llvm::Value *)v15);
      }
    }
    v17 = 0;
    v19 = (uint64_t *)(v12 + 24);
    v18 = *((_QWORD *)v12 + 3);
    *(_QWORD *)(v15 + 24) = v18;
    *(_QWORD *)(v15 + 32) = v12 + 24;
    *(_QWORD *)(v18 + 8) = v15 + 24;
    *((_QWORD *)v12 + 3) = v15 + 24;
    v20 = *((_QWORD *)this + 4);
    v21 = v15;
    if (v20 == *((_QWORD *)this + 5) + 40 || !v20)
      goto LABEL_111;
    v22 = (llvm::Instruction *)(v20 - 24);
    if (*(_BYTE *)(v20 - 8) == 77)
    {
      llvm::Instruction::clone(v22);
      v21 = (uint64_t)v23;
      llvm::User::replaceUsesOfWith(v23, this, (llvm::Value *)v15);
      v24 = *((_QWORD *)v12 + 5);
      *(_QWORD *)(v21 + 40) = v24;
      *(_WORD *)(v24 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v21 + 23) & 0x10) != 0)
      {
        v114 = *(_QWORD *)(v24 + 56);
        if (v114)
        {
          v115 = *(llvm::ValueSymbolTable **)(v114 + 104);
          if (v115)
            llvm::ValueSymbolTable::reinsertValue(v115, (llvm::Value *)v21);
        }
      }
      v17 = 0;
      v25 = *v19;
      *(_QWORD *)(v21 + 24) = *v19;
      *(_QWORD *)(v21 + 32) = v19;
      *(_QWORD *)(v25 + 8) = v21 + 24;
      *v19 = v21 + 24;
      v26 = *(_QWORD *)(v20 + 8);
      if (v26 == *(_QWORD *)(v20 + 16) + 40 || !v26)
        goto LABEL_111;
      v22 = (llvm::Instruction *)(v26 - 24);
    }
    else
    {
      v21 = v15;
    }
    if (*((_BYTE *)v22 + 16) == 29)
      v17 = v22;
    else
      v17 = 0;
LABEL_111:
    llvm::Instruction::clone(v17);
    v99 = v98;
    v100 = *((_DWORD *)v17 + 5) & 0x7FFFFFF;
    if ((_DWORD)v100)
    {
      v101 = (llvm::Value *)*((_QWORD *)v17 - 4 * v100);
      if (v101)
        llvm::User::replaceUsesOfWith(v98, v101, (llvm::Value *)v21);
    }
    v102 = *((_QWORD *)v12 + 5);
    *((_QWORD *)v99 + 5) = v102;
    *(_WORD *)(v102 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v99 + 23) & 0x10) != 0)
    {
      v112 = *(_QWORD *)(v102 + 56);
      if (v112)
      {
        v113 = *(llvm::ValueSymbolTable **)(v112 + 104);
        if (v113)
          llvm::ValueSymbolTable::reinsertValue(v113, v99);
      }
    }
    v103 = *((_QWORD *)v12 + 3);
    *((_QWORD *)v99 + 3) = v103;
    *((_QWORD *)v99 + 4) = v19;
    v104 = (char *)v99 + 24;
    *(_QWORD *)(v103 + 8) = v104;
    *((_QWORD *)v12 + 3) = v104;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v12 + 5) + 40, (uint64_t ***)v12);
    v105 = *((_QWORD *)v12 + 3);
    v106 = (_QWORD *)*((_QWORD *)v12 + 4);
    *v106 = v105;
    *(_QWORD *)(v105 + 8) = v106;
    *v19 = 0;
    *((_QWORD *)v12 + 4) = 0;
    llvm::Value::deleteValue((llvm::Value *)v12);
    goto LABEL_116;
  }
  v119 = 0;
  v120 = 0;
  llvm::SplitBlockAndInsertIfThenElse(v10, this, (llvm::Instruction *)&v120, &v119, (llvm::Instruction **)a3, v11);
  v27 = (uint64_t ***)v120[5];
  v28 = (uint64_t ***)*((_QWORD *)v119 + 5);
  v29 = *((_QWORD *)this + 5);
  v128 = "if.true.direct_targ";
  v131 = 259;
  llvm::Value::setName(v27, (uint64_t)&v128);
  v128 = "if.false.orig_indirect";
  v131 = 259;
  llvm::Value::setName(v28, (uint64_t)&v128);
  v128 = "if.end.icp";
  v131 = 259;
  llvm::Value::setName((uint64_t ***)v29, (uint64_t)&v128);
  llvm::Instruction::clone(this);
  v15 = v30;
  llvm::Instruction::moveBefore(this, v119);
  v31 = v120;
  v32 = v120[5];
  *(_QWORD *)(v15 + 40) = v32;
  *((_WORD *)v32 + 9) &= ~0x8000u;
  if ((*(_BYTE *)(v15 + 23) & 0x10) != 0)
  {
    v108 = v32[7];
    if (v108)
    {
      v109 = (llvm::ValueSymbolTable *)v108[13];
      if (v109)
        llvm::ValueSymbolTable::reinsertValue(v109, (llvm::Value *)v15);
    }
  }
  v34 = v31[3];
  v33 = v31 + 3;
  *(_QWORD *)(v15 + 24) = v34;
  *(_QWORD *)(v15 + 32) = v33;
  v34[1] = (uint64_t *)(v15 + 24);
  *v33 = v15 + 24;
  v35 = *((unsigned __int8 *)this + 16);
  v36 = v35 == 33;
  if (v35 == 33)
    v37 = this;
  else
    v37 = 0;
  if (v36)
  {
    v117 = v37;
    v118 = v27;
    v38 = v120;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v120[5] + 5), v120);
    v39 = v38[3];
    v40 = v38[4];
    *v40 = (uint64_t *)v39;
    v39[1] = (uint64_t *)v40;
    v38[3] = 0;
    v38[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v38);
    v41 = v119;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v119 + 5) + 40, (uint64_t ***)v119);
    v42 = *((_QWORD *)v41 + 3);
    v43 = (_QWORD *)*((_QWORD *)v41 + 4);
    *v43 = v42;
    *(_QWORD *)(v42 + 8) = v43;
    *((_QWORD *)v41 + 3) = 0;
    *((_QWORD *)v41 + 4) = 0;
    llvm::Value::deleteValue(v41);
    v125 = v29;
    v126 = v29 + 40;
    v44 = *((_QWORD *)this - 12);
    v116 = (char *)this - 96;
    v45 = (char *)operator new(0x60uLL);
    v46 = v45;
    *((_DWORD *)v45 + 13) = *((_DWORD *)v45 + 13) & 0x38000000 | 1;
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    *((_QWORD *)v45 + 2) = 0;
    *((_QWORD *)v45 + 4) = ***(_QWORD ***)v44 + 1576;
    v47 = (llvm::Value *)(v45 + 32);
    *((_QWORD *)v45 + 3) = v45 + 32;
    *((_QWORD *)v45 + 5) = 0;
    v45[48] = 30;
    v45[49] = 0;
    *((_WORD *)v45 + 25) = 0;
    *((_DWORD *)v45 + 13) = 1;
    *(_OWORD *)(v45 + 56) = 0u;
    *(_OWORD *)(v45 + 72) = 0u;
    *((_DWORD *)v45 + 22) = 0;
    *(_QWORD *)v45 = v44;
    v50 = *(_QWORD *)(v44 + 8);
    v49 = (_QWORD *)(v44 + 8);
    v48 = v50;
    *((_QWORD *)v45 + 1) = v50;
    if (v50)
      *(_QWORD *)(v48 + 16) = v45 + 8;
    *((_QWORD *)v45 + 2) = v49;
    *v49 = v45;
    v131 = 257;
    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v127 + 16))(v127, v47, &v128, v125, v126);
    if (!v123)
    {
LABEL_36:
      if (*(_QWORD *)(*(_QWORD *)v116 + 40) == *(_QWORD *)v116 + 40)
      {
LABEL_54:
        if (*(_QWORD *)(*((_QWORD *)v117 - 8) + 40) == *((_QWORD *)v117 - 8) + 40)
        {
LABEL_72:
          if (*(_QWORD *)v116)
          {
            **((_QWORD **)v117 - 10) = *((_QWORD *)v117 - 11);
            v75 = *((_QWORD *)v117 - 11);
            if (v75)
              *(_QWORD *)(v75 + 16) = *((_QWORD *)v117 - 10);
          }
          *(_QWORD *)v116 = v29;
          if (v29)
          {
            v76 = (_QWORD *)(v29 + 8);
            v77 = *(_QWORD *)(v29 + 8);
            *((_QWORD *)v117 - 11) = v77;
            if (v77)
              *(_QWORD *)(v77 + 16) = (char *)v117 - 88;
            *((_QWORD *)v117 - 10) = v76;
            *v76 = v116;
          }
          v78 = (_QWORD *)(v15 - 96);
          if (*(_QWORD *)(v15 - 96))
          {
            **(_QWORD **)(v15 - 80) = *(_QWORD *)(v15 - 88);
            v79 = *(_QWORD *)(v15 - 88);
            if (v79)
              *(_QWORD *)(v79 + 16) = *(_QWORD *)(v15 - 80);
          }
          *v78 = v29;
          if (v29)
          {
            v80 = (_QWORD *)(v29 + 8);
            v81 = *(_QWORD *)(v29 + 8);
            *(_QWORD *)(v15 - 88) = v81;
            if (v81)
              *(_QWORD *)(v81 + 16) = v15 - 88;
            *(_QWORD *)(v15 - 80) = v80;
            *v80 = v78;
          }
          goto LABEL_86;
        }
        v65 = *(_QWORD *)(*((_QWORD *)v117 - 8) + 48);
LABEL_56:
        v66 = v65 - 24;
        if (v65)
          v67 = v65 - 24;
        else
          v67 = 0;
        if (!v65 || *(_BYTE *)(v67 + 16) != 83)
          goto LABEL_72;
        v68 = *(_DWORD *)(v65 - 4);
        v69 = v68 & 0x7FFFFFF;
        if ((v68 & 0x7FFFFFF) == 0)
          goto LABEL_71;
        v70 = 0;
        v71 = v66 - 32 * v69;
        v72 = 32 * *(unsigned int *)(v66 + 60);
        v73 = 32 * v69;
        while (1)
        {
          if ((v68 & 0x40000000) != 0)
          {
            if (*(_QWORD *)(*(_QWORD *)(v66 - 8) + v72) == v29)
            {
              v71 = *(_QWORD *)(v66 - 8);
LABEL_70:
              v74 = *(_QWORD *)(v71 + v70);
              *(_QWORD *)(v71 + v72) = v118;
              sub_1C477667C((llvm::PHINode *)v66, v74, (uint64_t)v28);
LABEL_71:
              v65 = *(_QWORD *)(v66 + 32);
              goto LABEL_56;
            }
          }
          else if (*(_QWORD *)(v71 + v72) == v29)
          {
            goto LABEL_70;
          }
          v70 += 32;
          v72 += 8;
          if (v73 == v70)
            goto LABEL_71;
        }
      }
      v58 = *(_QWORD *)(*(_QWORD *)v116 + 48);
LABEL_38:
      v59 = v58 - 24;
      if (v58)
        v60 = v58 - 24;
      else
        v60 = 0;
      if (!v58 || *(_BYTE *)(v60 + 16) != 83)
        goto LABEL_54;
      v61 = *(_DWORD *)(v58 - 4);
      v62 = v61 & 0x7FFFFFF;
      if ((v61 & 0x7FFFFFF) == 0)
        goto LABEL_53;
      v63 = v59 - 32 * v62;
      v64 = 32 * *(unsigned int *)(v59 + 60);
      while (1)
      {
        if ((v61 & 0x40000000) != 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(v59 - 8) + v64) == v7)
          {
            v63 = *(_QWORD *)(v59 - 8);
LABEL_52:
            *(_QWORD *)(v63 + v64) = v29;
LABEL_53:
            v58 = *(_QWORD *)(v59 + 32);
            goto LABEL_38;
          }
        }
        else if (*(_QWORD *)(v63 + v64) == v7)
        {
          goto LABEL_52;
        }
        v64 += 8;
        if (!--v62)
          goto LABEL_53;
      }
    }
    v51 = (char *)v122;
    v52 = (char *)v122 + 16 * v123;
    v53 = (unsigned __int8 **)(v46 + 80);
    while (1)
    {
      v54 = *(_DWORD *)v51;
      v55 = (unsigned __int8 *)*((_QWORD *)v51 + 1);
      if (v55)
      {
        if (!v54)
        {
          v121 = (unsigned __int8 *)*((_QWORD *)v51 + 1);
          llvm::MetadataTracking::track((uint64_t)&v121, v55, 2);
          v56 = *v53;
          if (!*v53)
          {
LABEL_34:
            v57 = v121;
            *v53 = v121;
            if (v57)
              llvm::MetadataTracking::retrack((uint64_t)&v121, v57, (uint64_t)(v46 + 80));
            goto LABEL_31;
          }
LABEL_28:
          llvm::MetadataTracking::untrack((uint64_t)(v46 + 80), v56);
          goto LABEL_34;
        }
      }
      else
      {
        v56 = *v53;
        if (!*v53 && (v46[55] & 0x20) == 0)
          goto LABEL_31;
        if (!v54)
        {
          v121 = 0;
          if (!v56)
            goto LABEL_34;
          goto LABEL_28;
        }
      }
      llvm::Value::setMetadata(v47, *(_DWORD *)v51, (llvm::MDNode *)v55);
LABEL_31:
      v51 += 16;
      if (v51 == v52)
        goto LABEL_36;
    }
  }
LABEL_86:
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 7 && *((_QWORD *)this + 1))
  {
    v82 = 0;
    v83 = *(_QWORD *)(v29 + 48);
    if (v83)
      v84 = v83 - 24;
    else
      v84 = 0;
    v125 = *(_QWORD *)(v84 + 40);
    v126 = v84 + 24;
    v85 = *(void **)(v84 + 48);
    v128 = v85;
    if (v85)
    {
      llvm::MetadataTracking::track((uint64_t)&v128, (unsigned __int8 *)v85, 2);
      v82 = v128;
    }
    sub_1C4774EF4((uint64_t)&v122, 0, (uint64_t)v82);
    if (v128)
      llvm::MetadataTracking::untrack((uint64_t)&v128, (unsigned __int8 *)v128);
    v86 = *(_QWORD *)this;
    v131 = 257;
    v87 = (llvm::Value *)sub_1C4867E94((uint64_t)&v122, v86, 0, (uint64_t)&v128);
    v88 = *((_QWORD *)this + 1);
    v128 = v130;
    v129 = 0x1000000000;
    if (v88)
    {
      v89 = 0;
      v90 = v88;
      do
      {
        v90 = *(_QWORD *)(v90 + 8);
        --v89;
      }
      while (v90);
      if (v89 <= 0xFFFFFFFFFFFFFFEFLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v130, -(uint64_t)v89, 8);
        v91 = v129;
        v93 = v128;
        v92 = v129;
      }
      else
      {
        v91 = 0;
        v92 = 0;
        v93 = v130;
      }
      v94 = &v93[8 * v91];
      do
      {
        *v94++ = *(_QWORD *)(v88 + 24);
        v88 = *(_QWORD *)(v88 + 8);
      }
      while (v88);
      v95 = (llvm::User **)v128;
      LODWORD(v129) = v92 - v89;
      if (v92 != (_DWORD)v89)
      {
        v96 = 8 * (v92 - v89);
        do
        {
          v97 = *v95++;
          llvm::User::replaceUsesOfWith(v97, this, v87);
          v96 -= 8;
        }
        while (v96);
      }
    }
    sub_1C477667C(v87, (uint64_t)this, *((_QWORD *)this + 5));
    sub_1C477667C(v87, v15, *(_QWORD *)(v15 + 40));
    if (v128 != v130)
      free(v128);
  }
LABEL_116:
  if (v122 != &v124)
    free(v122);
  return v15;
}

uint64_t llvm::isLegalToPromote(llvm::Type **this, const llvm::CallBase *a2, llvm::Function *a3, const char **a4)
{
  __int32 **v7;
  llvm::Type *v8;
  uint64_t v9;
  llvm::CastInst *v10;
  int v11;
  int v12;
  uint64_t NumSubclassExtraOperandsDynamic;
  int v14;
  char *Descriptor;
  char *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  llvm *v21;
  llvm::Type *v22;
  llvm::CastInst *v23;
  uint64_t result;
  int hasParamAttribute;
  int v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  llvm::Type *v33;

  v7 = (__int32 **)(*((_QWORD *)a2 + 5) + 272);
  v8 = *this;
  v9 = *((_QWORD *)a2 + 3);
  v10 = **(llvm::CastInst ***)(v9 + 16);
  if (v8 != v10)
  {
    if (!llvm::CastInst::isBitOrNoopPointerCastable(v10, v8, v7, (const llvm::DataLayout *)a4))
    {
      if (a3)
      {
        v27 = "Return type mismatch";
        goto LABEL_39;
      }
      return 0;
    }
    v9 = *((_QWORD *)a2 + 3);
  }
  v11 = *(_DWORD *)(v9 + 12);
  v12 = *((unsigned __int8 *)this + 16);
  if (v12 == 84)
  {
    NumSubclassExtraOperandsDynamic = 0;
  }
  else if (v12 == 39)
  {
    NumSubclassExtraOperandsDynamic = llvm::CallBase::getNumSubclassExtraOperandsDynamic((llvm::CallBase *)this);
  }
  else
  {
    NumSubclassExtraOperandsDynamic = 2;
  }
  v14 = *((_DWORD *)this + 5);
  if (v14 < 0)
  {
    Descriptor = llvm::User::getDescriptor((llvm::User *)this);
    v14 = *((_DWORD *)this + 5);
    if (v14 < 0)
    {
      v28 = llvm::User::getDescriptor((llvm::User *)this);
      v16 = &v28[v29];
      v14 = *((_DWORD *)this + 5);
      goto LABEL_7;
    }
  }
  else
  {
    Descriptor = 0;
  }
  v16 = 0;
LABEL_7:
  v17 = (v11 - 1);
  if (((v16 - Descriptor) & 0xFFFFFFFF0) != 0)
  {
    v30 = *((_DWORD *)llvm::User::getDescriptor((llvm::User *)this) + 2);
    v31 = llvm::User::getDescriptor((llvm::User *)this);
    v18 = *(_DWORD *)&v31[v32 - 4] - v30;
    v14 = *((_DWORD *)this + 5);
  }
  else
  {
    v18 = 0;
  }
  v19 = (-32 * NumSubclassExtraOperandsDynamic
       + 32 * -v18
       - 32 * (unint64_t)-(v14 & 0x7FFFFFF)
       - 32) >> 5;
  if ((_DWORD)v17 != (_DWORD)v19 && *(_DWORD *)(*((_QWORD *)a2 + 3) + 8) <= 0xFFu)
  {
    if (a3)
    {
      v27 = "The number of arguments mismatch";
      goto LABEL_39;
    }
    return 0;
  }
  if (!(_DWORD)v17)
  {
LABEL_14:
    if (v17 >= v19)
      return 1;
    while (!llvm::CallBase::paramHasAttr((uint64_t)this, v17, 73))
    {
      LODWORD(v17) = v17 + 1;
      result = 1;
      if ((_DWORD)v19 == (_DWORD)v17)
        return result;
    }
    if (a3)
    {
      v27 = "SRet arg to vararg function";
      goto LABEL_39;
    }
    return 0;
  }
  v20 = 0;
  v21 = (llvm *)this;
  while (1)
  {
    v22 = *(llvm::Type **)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 16) + 8 * v20 + 8);
    v23 = (llvm::CastInst *)**((_QWORD **)v21 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    if (v22 == v23)
      goto LABEL_13;
    if (!llvm::CastInst::isBitOrNoopPointerCastable(v23, v22, v7, (const llvm::DataLayout *)a4))
    {
      if (!a3)
        return 0;
      v27 = "Argument type mismatch";
      goto LABEL_39;
    }
    hasParamAttribute = llvm::Function::hasParamAttribute((uint64_t)a2, v20, 69);
    v33 = this[8];
    if (hasParamAttribute != llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v33, (int)v20 + 1, 69))
      break;
    v26 = llvm::Function::hasParamAttribute((uint64_t)a2, v20, 71);
    v33 = this[8];
    if (v26 != llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v33, (int)v20 + 1, 71))
    {
      if (!a3)
        return 0;
      v27 = "inalloca mismatch";
      goto LABEL_39;
    }
LABEL_13:
    ++v20;
    v21 = (llvm *)((char *)v21 + 32);
    if (v17 == v20)
      goto LABEL_14;
  }
  if (!a3)
    return 0;
  v27 = "byval mismatch";
LABEL_39:
  result = 0;
  *(_QWORD *)a3 = v27;
  return result;
}

llvm *llvm::promoteCall(llvm *this, void ***a2, llvm::Function *a3, llvm::CastInst **a4, llvm::Instruction *a5)
{
  void ****v8;
  uint64_t v9;
  void *****v10;
  void **v11;
  void **v12;
  llvm::Value *v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::CastInst *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ***BitOrPointerCast;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t **v34;
  uint64_t **v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t Attribute;
  uint64_t v40;
  uint64_t Sorted;
  uint64_t v42;
  uint64_t v43;
  llvm::Type *ParamByValType;
  llvm::Type *ParamInAllocaType;
  char *v46;
  char *v47;
  llvm::Value *v48;
  llvm::Instruction *v49;
  const llvm::Twine *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t *v59;
  int v60;
  llvm *v61;
  llvm::BasicBlock *v62;
  uint64_t v63;
  const llvm::Twine *v64;
  uint64_t ***v65;
  llvm::Value *v66;
  llvm::User **v67;
  uint64_t v68;
  llvm::User *v69;
  uint64_t v70;
  llvm::AttributeList *v72;
  llvm::Function *v73;
  uint64_t v74;
  llvm::Value *v75;
  void *v76;
  _BYTE v77[32];
  __int16 v78;
  void *v79;
  void *v80;
  uint64_t v81;
  _QWORD *v82[8];
  void *__src;
  size_t __n;
  _BYTE v85[32];
  void *v86;
  void *v87;
  uint64_t v88;
  _QWORD *v89;
  __int16 v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v8 = (void ****)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v9 = *((_QWORD *)this - 3);
    if (v9)
      *(_QWORD *)(v9 + 16) = *((_QWORD *)this - 2);
  }
  *v8 = a2;
  if (a2)
  {
    v10 = (void *****)(a2 + 1);
    v11 = a2[1];
    *((_QWORD *)this - 3) = v11;
    if (v11)
      v11[2] = (char *)this - 24;
    *((_QWORD *)this - 2) = v10;
    *v10 = v8;
  }
  if ((*((_QWORD *)this + 6) || (*((_BYTE *)this + 23) & 0x20) != 0)
    && (llvm::Value::setMetadata(this, 2, 0), *((_QWORD *)this + 6))
    || (*((_BYTE *)this + 23) & 0x20) != 0)
  {
    llvm::Value::setMetadata(this, 23, 0);
  }
  v12 = a2[3];
  if (*((void ***)this + 9) != v12)
  {
    v13 = *(llvm::Value **)this;
    v73 = a3;
    v74 = *(_QWORD *)v12[2];
    *(_QWORD *)this = v74;
    *((_QWORD *)this + 9) = v12;
    v14 = *((_DWORD *)v12 + 3);
    v76 = **a2;
    v15 = *((_QWORD *)this + 8);
    v75 = v13;
    __src = v85;
    __n = 0x400000000;
    v16 = &dword_1C6404980[7584];
    v17 = v14 - 1;
    if (v17)
    {
      v18 = 0;
      v19 = 0;
      v72 = (llvm::AttributeList *)(a2 + 14);
      v20 = v15 + 40;
      v21 = 32 * v17;
      v22 = 1;
      do
      {
        v23 = *(llvm::CastInst **)((char *)this + v18 + -32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
        v24 = (llvm::Value *)*((_QWORD *)v12[2] + v22);
        if (v24 == *(llvm::Value **)v23)
        {
          if (v15 && (v22 + 1) < *(_DWORD *)(v15 + 8))
            v25 = *(_QWORD *)(v20 + 8 * (v22 + 1));
          else
            v25 = 0;
          v26 = __n;
          if (__n >= (unint64_t)HIDWORD(__n))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v85, __n + 1, 8);
            v16 = dword_1C6404980 + 30336;
            v26 = __n;
          }
          *((_QWORD *)__src + v26) = v25;
          LODWORD(__n) = __n + 1;
        }
        else
        {
          v90 = 257;
          BitOrPointerCast = llvm::CastInst::CreateBitOrPointerCast(v23, v24, (llvm::Type *)&v86, this, a5);
          v28 = *((_DWORD *)this + 5) & 0x7FFFFFF;
          v29 = v18 - 32 * v28;
          v30 = (char *)this + v29;
          if (*(_QWORD *)((char *)this + v29))
          {
            v31 = (char *)this + v18 + -32 * v28;
            **((_QWORD **)v30 + 2) = *((_QWORD *)v31 + 1);
            v32 = *((_QWORD *)v31 + 1);
            if (v32)
              *(_QWORD *)(v32 + 16) = *((_QWORD *)v30 + 2);
          }
          *(_QWORD *)v30 = BitOrPointerCast;
          if (BitOrPointerCast)
          {
            v35 = BitOrPointerCast[1];
            v33 = BitOrPointerCast + 1;
            v34 = v35;
            v36 = (char *)this + v29;
            *(_QWORD *)((char *)this + v18 + -32 * v28 + 8) = v35;
            if (v35)
              v34[2] = (uint64_t *)(v36 + 8);
            *((_QWORD *)v36 + 2) = v33;
            *v33 = v30;
          }
          if (v15 && (v22 + 1) < *(_DWORD *)(v15 + 8))
          {
            v43 = *(_QWORD *)(v20 + 8 * (v22 + 1));
            v86 = v76;
            v87 = &v89;
            v88 = 0x800000000;
            if (v43)
            {
              v37 = (char *)(v43 + 48);
              v38 = (char *)(v43 + 48 + 8 * *(unsigned int *)(v43 + 8));
            }
            else
            {
              v37 = 0;
              v38 = 0;
            }
          }
          else
          {
            v37 = 0;
            v38 = 0;
            v86 = v76;
            v87 = &v89;
            v88 = 0x800000000;
          }
          sub_1C53321EC((unsigned int *)&v87, (uint64_t)&v89, v37, v38);
          llvm::AttributeFuncs::typeIncompatible((uint64_t)v24, 3, (uint64_t *)&v79);
          llvm::AttrBuilder::remove((uint64_t)&v86, (uint64_t)&v79);
          sub_1C5010E9C((uint64_t)&v81, v82[0]);
          Attribute = llvm::AttrBuilder::getAttribute((uint64_t)&v86, 69);
          if (Attribute && *(_QWORD *)(Attribute + 16))
          {
            ParamByValType = (llvm::Type *)llvm::AttributeList::getParamByValType(v72, (int)v22 - 1);
            llvm::AttrBuilder::addByValAttr((uint64_t **)&v86, ParamByValType);
          }
          v40 = llvm::AttrBuilder::getAttribute((uint64_t)&v86, 71);
          if (v40 && *(_QWORD *)(v40 + 16))
          {
            ParamInAllocaType = (llvm::Type *)llvm::AttributeList::getParamInAllocaType(v72, (int)v22 - 1);
            llvm::AttrBuilder::addInAllocaAttr((uint64_t **)&v86, ParamInAllocaType);
          }
          Sorted = llvm::AttributeSetNode::getSorted((uint64_t *)v76, (uint64_t *)v87, v88);
          v42 = __n;
          if (__n >= (unint64_t)HIDWORD(__n))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v85, __n + 1, 8);
            v42 = __n;
          }
          *((_QWORD *)__src + v42) = Sorted;
          LODWORD(__n) = __n + 1;
          if (v87 != &v89)
            free(v87);
          v19 = 1;
          v16 = dword_1C6404980 + 30336;
        }
        ++v22;
        v18 += 32;
      }
      while (v21 != v18);
    }
    else
    {
      v19 = 0;
    }
    if (v15 && *(_DWORD *)(v15 + 8) > 1u)
    {
      v52 = *(_QWORD *)(v15 + 48);
      v79 = v76;
      v80 = v82;
      v81 = *((_QWORD *)v16 + 203);
      v48 = v75;
      if (v52)
      {
        v46 = (char *)(v52 + 48);
        v47 = (char *)(v52 + 48 + 8 * *(unsigned int *)(v52 + 8));
      }
      else
      {
        v46 = 0;
        v47 = 0;
      }
    }
    else
    {
      v46 = 0;
      v47 = 0;
      v79 = v76;
      v80 = v82;
      v81 = *((_QWORD *)v16 + 203);
      v48 = v75;
    }
    sub_1C53321EC((unsigned int *)&v80, (uint64_t)v82, v46, v47);
    if (*((_BYTE *)v48 + 8) == 7 || v48 == (llvm::Value *)v74)
    {
      if ((v19 & 1) == 0)
      {
LABEL_89:
        if (v80 != v82)
          free(v80);
        if (__src != v85)
          free(__src);
        return this;
      }
      if (!v15)
        goto LABEL_87;
    }
    else
    {
      v53 = *((_QWORD *)this + 1);
      v86 = &v88;
      v87 = (void *)0x1000000000;
      if (v53)
      {
        v54 = 0;
        v55 = v53;
        do
        {
          ++v54;
          v55 = *(_QWORD *)(v55 + 8);
        }
        while (v55);
        if (v54 - 1 >= 0x10)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)&v88, v54, 8);
          v56 = v87;
          v58 = (uint64_t *)v86;
          v57 = (int)v87;
        }
        else
        {
          v56 = 0;
          v57 = 0;
          v58 = &v88;
        }
        v59 = &v58[v56];
        do
        {
          *v59++ = *(_QWORD *)(v53 + 24);
          v53 = *(_QWORD *)(v53 + 8);
        }
        while (v53);
        v60 = v57 + v54;
      }
      else
      {
        v60 = 0;
      }
      LODWORD(v87) = v60;
      if (*((_BYTE *)this + 16) == 33)
      {
        v61 = (llvm *)*((_QWORD *)this + 5);
        v62 = (llvm::BasicBlock *)*((_QWORD *)this - 12);
        v78 = 257;
        v63 = *(_QWORD *)(llvm::SplitEdge(v61, v62, 0, 0, 0, (llvm::MemorySSAUpdater *)v77, v50) + 48);
      }
      else
      {
        v63 = *((_QWORD *)this + 4);
      }
      if (v63)
        v64 = (const llvm::Twine *)(v63 - 24);
      else
        v64 = 0;
      v78 = 257;
      v65 = llvm::CastInst::CreateBitOrPointerCast(this, v48, (llvm::Type *)v77, v64, v49);
      v66 = (llvm::Value *)v65;
      if (v73)
        *(_QWORD *)v73 = v65;
      v67 = (llvm::User **)v86;
      if ((_DWORD)v87)
      {
        v68 = 8 * v87;
        do
        {
          v69 = *v67++;
          llvm::User::replaceUsesOfWith(v69, this, v66);
          v68 -= 8;
        }
        while (v68);
        v67 = (llvm::User **)v86;
      }
      if (v67 != (llvm::User **)&v88)
        free(v67);
      llvm::AttributeFuncs::typeIncompatible(v74, 3, (uint64_t *)&v86);
      llvm::AttrBuilder::remove((uint64_t)&v79, (uint64_t)&v86);
      sub_1C5010E9C((uint64_t)&v88, v89);
      if (!v15)
        goto LABEL_87;
    }
    if (*(_DWORD *)(v15 + 8))
    {
      v51 = *(_QWORD *)(v15 + 40);
LABEL_88:
      v70 = llvm::AttributeSetNode::getSorted((uint64_t *)v76, (uint64_t *)v80, v81);
      *((_QWORD *)this + 8) = llvm::AttributeList::get((uint64_t *)v76, v51, v70, __src, __n);
      goto LABEL_89;
    }
LABEL_87:
    v51 = 0;
    goto LABEL_88;
  }
  return this;
}

llvm *llvm::promoteCallWithIfThenElse(llvm *this, llvm::CallBase *a2, llvm::Function *a3, llvm::MDNode *a4)
{
  llvm *v5;
  llvm::CastInst **v6;
  llvm::Instruction *v7;

  v5 = (llvm *)llvm::versionCallSite(this, a2, a3, a4);
  return llvm::promoteCall(v5, (void ***)a2, 0, v6, v7);
}

uint64_t llvm::tryPromoteCall(llvm *this, llvm::CallBase *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  int v20;
  int64_t v21;
  BOOL v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t *AvailableLoadedValue;
  const char *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  llvm::GlobalValue *Section;
  llvm::Constant *v34;
  uint64_t v35;
  llvm::Module *v36;
  llvm *v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _BOOL4 v50;
  _BOOL4 v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  llvm *PointerAtOffset;
  llvm::Value *v56;
  const char **v57;
  void ***v59;
  llvm::CastInst **v60;
  llvm::Instruction *v61;
  BOOL v62;
  llvm *v63;
  unsigned int v64;
  void *__src;
  unsigned int v66;
  uint64_t *v67;
  _QWORD *v68;
  unsigned int v69;
  char *v70;
  unsigned int v71;

  v2 = 0;
  v3 = *((_QWORD *)this - 4);
  if (!v3 || *(_BYTE *)(v3 + 16) != 60)
    return v2;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40);
  v6 = *(uint64_t **)(v3 - 32);
  sub_1C4768AD0(v5 + 272, *v6);
  v10 = v9;
  if ((_DWORD)v7 == 1)
  v71 = v10;
  if (v10 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v70, 0, 0);
  else
    v70 = 0;
  v11 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v6, (llvm::DataLayout *)(v5 + 272), (const void **)&v70, 1, 0, 0, v8);
  v2 = 0;
  if (!v11)
    goto LABEL_27;
  v12 = (uint64_t *)v11;
  if (*(_BYTE *)(v11 + 16) != 60)
    goto LABEL_27;
  v13 = *(uint64_t **)(v11 - 32);
  sub_1C4768AD0(v5 + 272, *v13);
  if ((_DWORD)v15 == 1)
  {
    v64 = v14;
    v14 = v64;
  }
  v69 = v14;
  if (v14 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v68, 0, 0);
  else
    v68 = 0;
  v17 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v13, (llvm::DataLayout *)(v5 + 272), (const void **)&v68, 1, 0, 0, v16);
  v18 = v69;
  if (*(_BYTE *)(v17 + 16) == 59)
  {
    v19 = v68;
    if (v69 >= 0x41)
    {
      v20 = 0;
      v21 = ((unint64_t)v69 + 63) >> 6;
      do
      {
        v22 = v21-- < 1;
        if (v22)
          break;
        v23 = v68[v21];
        v20 += __clz(v23);
      }
      while (!v23);
      v24 = v69 | 0xFFFFFFC0;
      if ((v69 & 0x3F) == 0)
        v24 = 0;
      if (v69 - v20 - v24 > 0x40)
      {
        v2 = 0;
        if (!v68)
          goto LABEL_27;
        goto LABEL_26;
      }
      v19 = (_QWORD *)*v68;
    }
    if (!v19)
    {
      v67 = v12 + 3;
      AvailableLoadedValue = (uint64_t *)llvm::FindAvailableLoadedValue((llvm::MemoryLocation *)v12, v12[5], &v67, 0, 0, 0, 0);
      v2 = (uint64_t)AvailableLoadedValue;
      if (!AvailableLoadedValue)
      {
LABEL_91:
        v18 = v69;
        goto LABEL_24;
      }
      sub_1C4768AD0(v5 + 272, *AvailableLoadedValue);
      v30 = v29;
      if ((_DWORD)v27 == 1)
      v66 = v30;
      if (v30 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      else
        __src = 0;
      v31 = llvm::Value::stripAndAccumulateConstantOffsets(v2, (llvm::DataLayout *)(v5 + 272), (const void **)&__src, 1, 0, 0, v28);
      v2 = 0;
      if (v31)
      {
        v32 = v31;
        if (*(_BYTE *)(v31 + 16) == 3)
        {
          if ((*(_BYTE *)(v31 + 80) & 1) == 0
            || (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) == 0
            || (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v31), v35 == 12)
            && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
              ? (v62 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
              : (v62 = 0),
                v62))
          {
LABEL_87:
            v2 = 0;
            goto LABEL_88;
          }
          if ((*(_DWORD *)(v32 + 32) & 0xFu) - 5 < 4 || (v2 = 0, ((1 << (*(_DWORD *)(v32 + 32) & 0xF)) & 0x614) == 0))
          {
            v36 = *(llvm::Module **)(v32 + 40);
            if ((!v36 || !llvm::Module::getSemanticInterposition(v36) || (*(_BYTE *)(v32 + 33) & 0x40) != 0)
              && (*(_BYTE *)(v32 + 80) & 2) == 0)
            {
              v37 = *(llvm **)(v32 - 32);
              v38 = v66;
              if (v66 >= 0x41)
              {
                v63 = *(llvm **)(v32 - 32);
                v43 = v66 + 63;
                v41 = (unint64_t *)operator new[]();
                memcpy(v41, __src, (v43 >> 3) & 0x3FFFFFF8);
                v44 = 0;
                v45 = 0;
                v46 = v70;
                v47 = v43 >> 6;
                do
                {
                  v48 = v41[v44];
                  v49 = *(_QWORD *)&v46[v44 * 8] + v48;
                  v50 = v49 < v48;
                  v51 = v49 + 1 <= v48;
                  if (v45)
                  {
                    ++v49;
                    v45 = v51;
                  }
                  else
                  {
                    v45 = v50;
                  }
                  v41[v44++] = v49;
                }
                while (v43 >> 6 != v44);
                v52 = 0;
                v41[(v47 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
                do
                {
                  v22 = v47-- < 1;
                  if (v22)
                    break;
                  v53 = v41[v47];
                  v52 += __clz(v53);
                }
                while (!v53);
                v54 = v38 | 0xFFFFFFC0;
                if ((v38 & 0x3F) == 0)
                  v54 = 0;
                if (v38 - v52 - v54 > 0x40)
                  goto LABEL_71;
                v42 = *v41;
                v37 = v63;
              }
              else
              {
                v39 = (unint64_t)__src + (_QWORD)v70;
                if (v66)
                  v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v66;
                else
                  v40 = 0;
                v41 = (unint64_t *)(v40 & v39);
                v42 = v40 & v39;
              }
              PointerAtOffset = llvm::getPointerAtOffset(v37, v42, v5, 0, v34);
              if (PointerAtOffset)
              {
                v56 = llvm::Value::stripPointerCasts(PointerAtOffset);
                if (v56 && *((_BYTE *)v56 + 16) == 0)
                {
                  v59 = (void ***)v56;
                  if (llvm::isLegalToPromote((llvm::Type **)this, v56, 0, v57))
                  {
                    llvm::promoteCall(this, v59, 0, v60, v61);
                    v2 = 1;
LABEL_72:
                    if (v38 >= 0x41 && v41)
                      MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
                    goto LABEL_88;
                  }
                }
              }
LABEL_71:
              v2 = 0;
              goto LABEL_72;
            }
            goto LABEL_87;
          }
        }
      }
LABEL_88:
      if (v66 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      goto LABEL_91;
    }
  }
  v2 = 0;
LABEL_24:
  if (v18 >= 0x41 && v68)
LABEL_26:
    MEMORY[0x1CAA32F9C]();
LABEL_27:
  if (v71 >= 0x41 && v70)
    MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
  return v2;
}

BOOL llvm::CallGraphUpdater::finalize(llvm::CallGraphUpdater *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  llvm::UndefValue **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Type *v14;
  llvm::UndefValue *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t v23;
  llvm::Function *v24;
  llvm::Function *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD **v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  llvm::ValueAsMetadata *v39;
  llvm::Type *v40;
  llvm::UndefValue *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::ValueAsMetadata **v56;
  llvm::ValueAsMetadata *v57;
  int v58;
  int v59;
  llvm::ValueAsMetadata *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  _BOOL8 result;
  void *__p[2];
  char v69;
  unint64_t v70;

  if (*((_DWORD *)this + 78))
  {
    llvm::filterDeadComdatFunctions((uint64_t)this + 304);
    sub_1C618A450((unsigned int *)this + 40, *((_BYTE **)this + 38), (_BYTE *)(*((_QWORD *)this + 38) + 8 * *((unsigned int *)this + 78)));
  }
  v2 = (uint64_t *)*((_QWORD *)this + 20);
  v3 = *((unsigned int *)this + 42);
  v4 = &v2[v3];
  if (!*((_QWORD *)this + 56))
  {
    if (!(_DWORD)v3)
      goto LABEL_77;
    while (1)
    {
      v39 = (llvm::ValueAsMetadata *)*v2;
      llvm::Constant::removeDeadConstantUsers(*v2);
      v41 = llvm::UndefValue::get(*(llvm::UndefValue **)v39, v40);
      llvm::Value::doRAUW(v39, v41, (llvm::Value *)1);
      if (*((_QWORD *)this + 58))
      {
        v42 = sub_1C477672C((uint64_t)this, (uint64_t)v39);
        v43 = *((_QWORD *)this + 1);
        v44 = v43 == *(_QWORD *)this ? 20 : 16;
        if (v42 == (_QWORD *)(v43 + 8 * *(unsigned int *)((char *)this + v44)))
          break;
      }
LABEL_74:
      llvm::Function::eraseFromParent(v39);
      if (++v2 == v4)
        goto LABEL_77;
    }
    v45 = *((_QWORD *)this + 58);
    __p[0] = v39;
    v46 = sub_1C4E851E8((uint64_t *)(v45 + 96), __p);
    v47 = (_QWORD *)v46[1];
    if (!v47)
    {
      v47 = (_QWORD *)sub_1C484358C(v45, 104, 3);
      v46[1] = v47;
      *v47 = v45;
      v47[1] = v39;
      *((_BYTE *)v47 + 96) = 0;
      v47[2] = 0;
      *((_BYTE *)v47 + 24) = 0;
    }
    v48 = (uint64_t *)(*((_QWORD *)this + 58) + 288);
    __p[0] = v47;
    v70 = 0;
    v49 = 0;
    if (sub_1C4DD8A9C(v48, __p, &v70))
      v49 = *(uint64_t **)(v70 + 8);
    v50 = *v49;
    v51 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(*((_QWORD *)this + 60), &llvm::FunctionAnalysisManagerCGSCCProxy::Key, (uint64_t)v49, *((_QWORD *)this + 58))+ 8);
    if ((*((_BYTE *)v39 + 23) & 0x10) == 0)
    {
      v62 = 0;
      v61 = &byte_1C871356D;
      goto LABEL_65;
    }
    v52 = ***(_QWORD ***)v39;
    v53 = *(_QWORD *)(v52 + 152);
    v54 = *(unsigned int *)(v52 + 168);
    if ((_DWORD)v54)
    {
      LODWORD(v55) = (v54 - 1) & ((v39 >> 4) ^ (v39 >> 9));
      v56 = (llvm::ValueAsMetadata **)(v53 + 16 * v55);
      v57 = *v56;
      if (*v56 == v39)
      {
LABEL_64:
        v60 = v56[1];
        v63 = *(_QWORD *)v60;
        v61 = (char *)v60 + 16;
        v62 = v63;
LABEL_65:
        llvm::AnalysisManager<llvm::Function>::clear(v51, (uint64_t)v39, (uint64_t)v61, v62);
        v64 = *((_QWORD *)this + 60);
        sub_1C57034B8((uint64_t)v49, __p);
        if (v69 >= 0)
          v65 = __p;
        else
          v65 = (void **)__p[0];
        if (v69 >= 0)
          v66 = v69 & 0x7F;
        else
          v66 = (uint64_t)__p[1];
        llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::clear(v64, (uint64_t)v49, (uint64_t)v65, v66);
        if (v69 < 0)
          operator delete(__p[0]);
        llvm::LazyCallGraph::removeDeadFunction(*((llvm::LazyCallGraph **)this + 58), v39);
        sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(*((_QWORD *)this + 61) + 24), (uint64_t)v49);
        sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(*((_QWORD *)this + 61) + 16), v50);
        goto LABEL_74;
      }
      v58 = 1;
      while (v57 != (llvm::ValueAsMetadata *)-4096)
      {
        v59 = v55 + v58++;
        v55 = v59 & (v54 - 1);
        v57 = *(llvm::ValueAsMetadata **)(v53 + 16 * v55);
        if (v57 == v39)
        {
          v56 = (llvm::ValueAsMetadata **)(v53 + 16 * v55);
          goto LABEL_64;
        }
      }
    }
    v56 = (llvm::ValueAsMetadata **)(v53 + 16 * v54);
    goto LABEL_64;
  }
  if ((_DWORD)v3)
  {
    do
    {
      v5 = (llvm::UndefValue **)*v2;
      llvm::Constant::removeDeadConstantUsers(*v2);
      v6 = *((_QWORD *)this + 56);
      v7 = *(_QWORD **)(v6 + 16);
      if (!v7)
        goto LABEL_16;
      v8 = (_QWORD *)(v6 + 16);
      do
      {
        v9 = v7[4];
        v10 = v9 >= (unint64_t)v5;
        if (v9 >= (unint64_t)v5)
          v11 = v7;
        else
          v11 = v7 + 1;
        if (v10)
          v8 = v7;
        v7 = (_QWORD *)*v11;
      }
      while (*v11);
      if (v8 == (_QWORD *)(v6 + 16) || v8[4] > (unint64_t)v5)
LABEL_16:
        v8 = (_QWORD *)(v6 + 16);
      v12 = v8[5];
      v13 = *(_QWORD *)(v12 + 24);
      if (*(_QWORD *)(v12 + 16) != v13)
      {
        do
        {
          --*(_DWORD *)(*(_QWORD *)(v13 - 8) + 40);
          sub_1C4DDDF70(v12 + 16, v13 - 40);
          v13 = *(_QWORD *)(v12 + 24);
        }
        while (*(_QWORD *)(v12 + 16) != v13);
        v6 = *((_QWORD *)this + 56);
      }
      llvm::CallGraphNode::removeAnyCallEdgeTo(*(_QWORD *)(v6 + 80), v12);
      v15 = llvm::UndefValue::get(*v5, v14);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v5, v15, (llvm::Value *)1);
      ++v2;
    }
    while (v2 != v4);
    v16 = *((unsigned int *)this + 42);
    if ((_DWORD)v16)
    {
      v17 = (unint64_t *)*((_QWORD *)this + 20);
      v18 = &v17[v16];
      do
      {
        v19 = *((_QWORD *)this + 56);
        v70 = *v17;
        __p[0] = &v70;
        v21 = sub_1C4DE25A0((uint64_t **)(v19 + 8), &v70, (uint64_t)&std::piecewise_construct, (uint64_t **)__p) + 5;
        v20 = (uint64_t)*v21;
        if (!*v21)
        {
          v22 = v70;
          v20 = operator new();
          *(_QWORD *)v20 = v19;
          *(_QWORD *)(v20 + 8) = v22;
          *(_QWORD *)(v20 + 24) = 0;
          *(_QWORD *)(v20 + 32) = 0;
          *(_QWORD *)(v20 + 16) = 0;
          *(_DWORD *)(v20 + 40) = 0;
          v23 = (uint64_t)*v21;
          *v21 = (uint64_t *)v20;
          if (v23)
          {
            sub_1C4DDE2A8((uint64_t)v21, v23);
            v20 = (uint64_t)*v21;
          }
        }
        v24 = (llvm::Function *)llvm::CallGraph::removeFunctionFromModule(*((_QWORD *)this + 56), v20);
        if (v24)
        {
          v25 = v24;
          llvm::Function::~Function(v24);
          v27 = *(_DWORD *)(v26 + 20);
          if ((v27 & 0x40000000) != 0)
          {
            v34 = (char *)*((_QWORD *)v25 - 1);
            v32 = (char *)v25 - 8;
            v33 = v34;
            v35 = v27 & 0x7FFFFFF;
            if ((_DWORD)v35)
            {
              v36 = 32 * v35;
              do
              {
                v37 = &v33[v36];
                if (*(_QWORD *)&v33[v36 - 32])
                {
                  **((_QWORD **)v37 - 2) = *((_QWORD *)v37 - 3);
                  v38 = *((_QWORD *)v37 - 3);
                  if (v38)
                    *(_QWORD *)(v38 + 16) = *((_QWORD *)v37 - 2);
                }
                v36 -= 32;
              }
              while (v36);
            }
            operator delete(v33);
          }
          else
          {
            v28 = v27 & 0x7FFFFFF;
            if ((_DWORD)v28)
            {
              v29 = (_QWORD **)((char *)v25 - 16);
              v30 = -32 * v28;
              do
              {
                if (*(v29 - 2))
                {
                  **v29 = *(v29 - 1);
                  v31 = (uint64_t)*(v29 - 1);
                  if (v31)
                    *(_QWORD *)(v31 + 16) = *v29;
                }
                v29 -= 4;
                v30 += 32;
              }
              while (v30);
            }
            v32 = (char *)v25 - 32 * v28;
            if (v27 < 0)
              v32 = &v32[-*((_QWORD *)v32 - 1) - 8];
          }
          operator delete(v32);
        }
        ++v17;
      }
      while (v17 != v18);
    }
  }
LABEL_77:
  result = *((_DWORD *)this + 42) != 0;
  *((_DWORD *)this + 78) = 0;
  *((_DWORD *)this + 42) = 0;
  return result;
}

uint64_t llvm::CallGraphUpdater::replaceCallSite(llvm::CallGraphUpdater *this, llvm::CallBase *a2, llvm::CallBase *a3)
{
  uint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  llvm::CallGraphNode *v21;
  uint64_t i;
  unint64_t v24;
  unint64_t *v25;

  v3 = *((_QWORD *)this + 56);
  if (v3)
  {
    v7 = *((_QWORD *)a3 - 4);
    if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *((_QWORD *)a3 + 9))
      v7 = 0;
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 56);
    v24 = v7;
    v25 = &v24;
    v10 = sub_1C4DE25A0((uint64_t **)(v3 + 8), &v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25) + 5;
    v9 = (uint64_t)*v10;
    if (!*v10)
    {
      v11 = v24;
      v9 = operator new();
      *(_QWORD *)v9 = v3;
      *(_QWORD *)(v9 + 8) = v11;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 40) = 0;
      v12 = (uint64_t)*v10;
      *v10 = (uint64_t *)v9;
      if (v12)
      {
        sub_1C4DDE2A8((uint64_t)v10, v12);
        v9 = (uint64_t)*v10;
      }
    }
    v13 = *((_QWORD *)this + 56);
    v16 = *(_QWORD **)(v13 + 16);
    v14 = (_QWORD *)(v13 + 16);
    v15 = v16;
    if (!v16)
      goto LABEL_20;
    v17 = v14;
    do
    {
      v18 = v15[4];
      v19 = v18 >= v8;
      if (v18 >= v8)
        v20 = v15;
      else
        v20 = v15 + 1;
      if (v19)
        v17 = v15;
      v15 = (_QWORD *)*v20;
    }
    while (*v20);
    if (v17 == v14 || v17[4] > v8)
LABEL_20:
      v17 = v14;
    v21 = (llvm::CallGraphNode *)v17[5];
    for (i = *((_QWORD *)v21 + 2); ; i += 40)
    {
      if (i == *((_QWORD *)v21 + 3))
        return 0;
      if (*(_BYTE *)(i + 24) && *(llvm::CallBase **)(i + 16) == a2)
        break;
    }
    llvm::CallGraphNode::replaceCallEdge(v21, a2, a3, (llvm::CallGraphNode *)v9);
  }
  return 1;
}

void llvm::initializeCanonicalizeAliasesLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837258);
  if (v2 != -1)
  {
    v5[0] = sub_1C5ECCF68;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837258, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5ECCF68(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Canonicalize aliases";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "canonicalize-aliases";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F587E;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5ECD1BC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

llvm::Constant *sub_1C5ECCFF4(uint64_t a1, _BYTE *a2)
{
  int v4;
  llvm::Constant *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v4 == 1)
  {
    v5 = (llvm::Constant *)sub_1C5ECCFF4(*(_QWORD *)(a1 - 32), a2);
    if (v5 != *(llvm::Constant **)(a1 - 32))
    {
      llvm::GlobalAlias::setAliasee(a1, v5);
      *a2 = 1;
    }
    return v5;
  }
  if (!a1 || v4 != 5)
    return (llvm::Constant *)a1;
  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = *(_QWORD **)(a1 - 8);
    v7 = v6 & 0x7FFFFFF;
    if (v7)
    {
LABEL_9:
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = &v8[4 * v7];
      do
      {
        v13 = sub_1C5ECCFF4(*v8, a2);
        v14 = v13;
        if (v11 >= v9)
        {
          v16 = v11 - v10;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            abort();
          if (((char *)v9 - (char *)v10) >> 2 > v17)
            v17 = ((char *)v9 - (char *)v10) >> 2;
          if ((unint64_t)((char *)v9 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
          {
            if (v18 >> 61)
              sub_1C4764EE4();
            v19 = (char *)operator new(8 * v18);
          }
          else
          {
            v19 = 0;
          }
          v20 = (uint64_t *)&v19[8 * v16];
          *v20 = v14;
          v15 = v20 + 1;
          while (v11 != v10)
          {
            v21 = *--v11;
            *--v20 = v21;
          }
          v9 = (uint64_t *)&v19[8 * v18];
          if (v10)
            operator delete(v10);
          v10 = v20;
        }
        else
        {
          *v11 = v13;
          v15 = v11 + 1;
        }
        v8 += 4;
        v11 = v15;
      }
      while (v8 != v12);
      goto LABEL_33;
    }
  }
  else
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = (_QWORD *)(a1 - 32 * v7);
    if (v7)
      goto LABEL_9;
  }
  v15 = 0;
  v10 = 0;
LABEL_33:
  v5 = (llvm::Constant *)llvm::ConstantExpr::getWithOperands(a1, (uint64_t)v10, (llvm::Constant *)(v15 - v10), *(llvm::Constant **)a1, 0, 0);
  if (v10)
    operator delete(v10);
  return v5;
}

uint64_t sub_1C5ECD1BC()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F587E;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81A8F10;
  return result;
}

void sub_1C5ECD208(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5ECD22C()
{
  return "Canonicalize Aliases";
}

BOOL sub_1C5ECD23C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v6 = 0;
  v2 = a2 + 40;
  v3 = *(_QWORD *)(a2 + 48);
  if (v3 == a2 + 40)
    return 0;
  do
  {
    if (v3)
      v4 = v3 - 48;
    else
      v4 = 0;
    sub_1C5ECCFF4(v4, &v6);
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != v2);
  return v6 != 0;
}

BOOL sub_1C5ECD2A4(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  llvm::Loop *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int32x2_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  char v34;
  llvm::Instruction *v35;
  int v36;
  _DWORD *v37;
  int v38;
  llvm::Instruction **v39;
  llvm::ValueAsMetadata **v40;
  uint64_t v41;
  llvm::ValueAsMetadata *v42;
  llvm::ValueAsMetadata *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD v47[2];
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[24];
  void *v60;
  uint64_t v61;
  _QWORD v62[18];

  v62[16] = *MEMORY[0x1E0C80C00];
  if (!llvm::Loop::isLoopSimplifyForm(*(llvm::Loop **)a1))
    return 0;
  v60 = v62;
  v61 = 0x400000000;
  if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 32) + 40) == **(_QWORD **)(*(_QWORD *)a1 + 32) + 40)
    return 0;
  v2 = 0;
  v3 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 32) + 48);
  v4 = v3 - 24;
  if (v3)
    v5 = v3 - 24;
  else
    v5 = 0;
  if (v3 && *(_BYTE *)(v5 + 16) == 83)
  {
    do
    {
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v55 = 0;
      v56 = 0;
      v54 = 0;
      v50 = 6;
      v57 = v59;
      v58 = 0x200000000;
      if (llvm::InductionDescriptor::isInductionPHI(v4, *(const llvm::Loop **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v50, 0, 0))
      {
        v47[0] = 0;
        v47[1] = v4;
        v48 = v55;
        if (v55)
        {
          v6 = *(unsigned __int8 *)(v55 + 16);
          v7 = v6 > 0x2D;
          v8 = (1 << v6) & 0x2A0000000000;
          if (!v7 && v8 != 0)
          {
            v10 = *(_QWORD *)(v55 - 64) == v4;
            v49 = v10;
            v11 = *(_QWORD *)(v55 - 64 + 32 * v10);
            if (!v11 || *(unsigned __int8 *)(v11 + 16) < 0x1Cu)
              goto LABEL_22;
            v13 = *(llvm::Loop **)a1;
            v14 = sub_1C477672C(*(_QWORD *)a1 + 56, *(_QWORD *)(v11 + 40));
            v15 = *((_QWORD *)v13 + 8);
            v16 = 72;
            if (v15 == *((_QWORD *)v13 + 7))
              v16 = 76;
            if (v14 == (_QWORD *)(v15 + 8 * *(unsigned int *)((char *)v13 + v16)))
            {
LABEL_22:
              sub_1C5ECD8F4(*(_QWORD *)(v4 + 8), 0, (char *)v47, (uint64_t)&v60);
              sub_1C5ECD8F4(*(_QWORD *)(v48 + 8), 0, (char *)v47, (uint64_t)&v60);
            }
          }
        }
      }
      if (v57 != v59)
        free(v57);
      if (v52 && v52 != -8192 && v52 != -4096)
      {
        v17 = v50 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF8) = v51;
        if (v51)
        {
          *v51 = *v51 & 7 | v17;
        }
        else
        {
          v18 = v52;
          v19 = ***(int32x2_t ****)v52;
          v20 = (unint64_t)v19[303];
          if (v20 <= v17)
          {
            v21 = v19[305].u32[0];
            if (v20 + 16 * v21 > v17)
            {
              v22 = v21 - 1;
              LODWORD(v23) = v22 & ((v52 >> 4) ^ (v52 >> 9));
              v24 = (uint64_t *)(v20 + 16 * v23);
              v25 = *v24;
              if (v52 == *v24)
              {
LABEL_36:
                *v24 = -8192;
                v19[304] = vadd_s32(v19[304], (int32x2_t)0x1FFFFFFFFLL);
                v18 = v52;
              }
              else
              {
                v26 = 1;
                while (v25 != -4096)
                {
                  v27 = v23 + v26++;
                  v23 = v27 & v22;
                  v25 = *(_QWORD *)(v20 + 16 * v23);
                  if (v52 == v25)
                  {
                    v24 = (uint64_t *)(v20 + 16 * v23);
                    goto LABEL_36;
                  }
                }
              }
              *(_BYTE *)(v18 + 17) &= ~1u;
            }
          }
        }
      }
      v28 = *(_QWORD *)(v4 + 32);
      v4 = v28 - 24;
      if (v28)
        v29 = v28 - 24;
      else
        v29 = 0;
    }
    while (v28 && *(_BYTE *)(v29 + 16) == 83);
    v2 = (_DWORD)v61 != 0;
    v30 = v60;
    if ((_DWORD)v61)
    {
      v50 = (uint64_t)&v54;
      v51 = (unint64_t *)&v54;
      v52 = 8;
      v53 = 0;
      v31 = 32 * v61;
      v32 = (unsigned int *)((char *)v60 + 24);
      do
      {
        v33 = *((_QWORD *)v32 - 2);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v50, v33);
        if (v34)
        {
          v35 = (llvm::Instruction *)*((_QWORD *)v32 - 1);
          if ((sub_1C4F8BE80((uint64_t ***)v35, 0, (uint64_t)v35, *(_QWORD *)(a1 + 16), 0, 0) & 1) == 0)
          {
            llvm::Instruction::dropPoisonGeneratingFlags(v35);
            llvm::ScalarEvolution::forgetValue(*(int32x2_t **)(a1 + 8), v35);
          }
          v36 = *((_DWORD *)v35 + 5);
          if ((v36 & 0x40000000) != 0)
            v37 = (_DWORD *)*((_QWORD *)v35 - 1);
          else
            v37 = (_DWORD *)((char *)v35 - 32 * (v36 & 0x7FFFFFF));
          sub_1C5ECD9E4(a1, (uint64_t)&v37[8 * *v32]);
          v38 = *(_DWORD *)(v33 + 20);
          if ((v38 & 0x40000000) != 0)
            v39 = *(llvm::Instruction ***)(v33 - 8);
          else
            v39 = (llvm::Instruction **)(v33 - 32 * (v38 & 0x7FFFFFF));
          sub_1C5ECD9E4(a1, (uint64_t)&v39[4 * (*v39 == v35)]);
        }
        v32 += 8;
        v31 -= 32;
      }
      while (v31);
      if ((_DWORD)v61)
      {
        v40 = (llvm::ValueAsMetadata **)v60;
        v41 = 32 * v61;
        do
        {
          v43 = *v40;
          v40 += 4;
          v42 = v43;
          llvm::ScalarEvolution::forgetValue(*(int32x2_t **)(a1 + 8), v43);
          llvm::Value::doRAUW(v42, *((llvm::Value **)v42 - 4), (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v42 + 5) + 40, (uint64_t ***)v42);
          v44 = *((_QWORD *)v43 + 3);
          v45 = (_QWORD *)*((_QWORD *)v43 + 4);
          *v45 = v44;
          *(_QWORD *)(v44 + 8) = v45;
          *((_QWORD *)v43 + 3) = 0;
          *((_QWORD *)v43 + 4) = 0;
          llvm::Value::deleteValue(v43);
          v41 -= 32;
        }
        while (v41);
      }
      if (v51 != (unint64_t *)v50)
        free(v51);
      v30 = v60;
    }
    if (v30 != v62)
      free(v30);
  }
  return v2;
}

void llvm::initializeCanonicalizeFreezeInLoopsPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837260);
  if (v2 != -1)
  {
    v5[0] = sub_1C5ECD788;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837260, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5ECD788(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeLoopSimplifyPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Canonicalize Freeze Instructions in Loops";
  *(_QWORD *)(v4 + 8) = 41;
  *(_QWORD *)(v4 + 16) = "canon-freeze";
  *(_QWORD *)(v4 + 24) = 12;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F587F;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5ECDC40;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5ECD82C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F587F;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E81A8FB0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837260);
  if (v3 != -1)
  {
    v7[0] = sub_1C5ECD788;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837260, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

char *sub_1C5ECD8F4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  char *v17;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (!v8 || *(_BYTE *)(v8 + 16) != 95)
        goto LABEL_8;
      *(_QWORD *)a3 = v8;
      v9 = *(unsigned int *)(a4 + 8);
      v10 = *(_QWORD *)a4;
      if (v9 >= *(_DWORD *)(a4 + 12))
      {
        v14 = v9 + 1;
        v15 = v10 + 32 * v9;
        if (v10 <= (unint64_t)a3 && v15 > (unint64_t)a3)
        {
          v17 = &a3[-v10];
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v14, 32);
          v10 = *(_QWORD *)a4;
          v11 = &v17[*(_QWORD *)a4];
          goto LABEL_7;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v14, 32);
        v10 = *(_QWORD *)a4;
      }
      v11 = a3;
LABEL_7:
      v12 = (_OWORD *)(v10 + 32 * *(unsigned int *)(a4 + 8));
      v13 = *((_OWORD *)v11 + 1);
      *v12 = *(_OWORD *)v11;
      v12[1] = v13;
      ++*(_DWORD *)(a4 + 8);
LABEL_8:
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1C5ECD9E4(uint64_t a1, uint64_t a2)
{
  uint64_t LoopPredecessor;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  llvm::Value *v9;
  uint64_t ***v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  uint64_t ***v20;
  char *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[4];
  __int16 v33;

  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)a1);
  if (!LoopPredecessor)
    goto LABEL_8;
  v5 = *(_QWORD *)(LoopPredecessor + 40);
  if (v5 == LoopPredecessor + 40)
    goto LABEL_8;
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  if (*(_BYTE *)(v6 + 16) == 30)
  {
    if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_8:
      v7 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v7 = 0;
    switch(*(_BYTE *)(v6 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_13;
      case 0x1E:
        __break(1u);
        goto LABEL_40;
      case 0x1F:
        v8 = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_40:
        v8 = (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v8 = *(_DWORD *)(v6 + 80) + 1;
        break;
      default:
        goto LABEL_8;
    }
    if (v8 != 1)
      goto LABEL_8;
  }
  v7 = LoopPredecessor;
LABEL_13:
  v9 = *(llvm::Value **)(a2 + 24);
  v10 = *(uint64_t ****)a2;
  if ((sub_1C4F8BE80(*(uint64_t ****)a2, 0, (uint64_t)v9, *(_QWORD *)(a1 + 16), 0, 0) & 1) != 0)
    return;
  v11 = (char *)operator new(0x60uLL);
  *((_DWORD *)v11 + 13) = *((_DWORD *)v11 + 13) & 0x38000000 | 1;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 32;
  if ((*((_BYTE *)v10 + 23) & 0x10) == 0)
  {
    v22 = 0;
    v21 = &byte_1C871356D;
    goto LABEL_23;
  }
  v12 = ***v10;
  v13 = *(_QWORD *)(v12 + 152);
  v14 = *(unsigned int *)(v12 + 168);
  if (!(_DWORD)v14)
    goto LABEL_21;
  LODWORD(v15) = (v14 - 1) & ((v10 >> 4) ^ (v10 >> 9));
  v16 = (uint64_t ****)(v13 + 16 * v15);
  v17 = *v16;
  if (*v16 != v10)
  {
    v18 = 1;
    while (v17 != (uint64_t ***)-4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(uint64_t ****)(v13 + 16 * v15);
      if (v17 == v10)
      {
        v16 = (uint64_t ****)(v13 + 16 * v15);
        goto LABEL_22;
      }
    }
LABEL_21:
    v16 = (uint64_t ****)(v13 + 16 * v14);
  }
LABEL_22:
  v20 = v16[1];
  v23 = *v20;
  v21 = (char *)(v20 + 2);
  v22 = v23;
LABEL_23:
  v33 = 773;
  v32[0] = v21;
  v32[1] = v22;
  v32[2] = ".frozen";
  v24 = *(_QWORD *)(v7 + 40);
  if (v24 == v7 + 40)
  {
    v26 = 0;
  }
  else
  {
    if (v24)
      v25 = v24 - 24;
    else
      v25 = 0;
    if (*(unsigned __int8 *)(v25 + 16) - 29 >= 0xB)
      v26 = 0;
    else
      v26 = v25;
  }
  v27 = llvm::FreezeInst::FreezeInst((uint64_t)(v11 + 32), v10, (uint64_t)v32, v26);
  if (*(_QWORD *)a2)
  {
    **(_QWORD **)(a2 + 16) = *(_QWORD *)(a2 + 8);
    v28 = *(_QWORD *)(a2 + 8);
    if (v28)
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)a2 = v27;
  v31 = *((_QWORD *)v11 + 5);
  v30 = v11 + 40;
  v29 = v31;
  *(_QWORD *)(a2 + 8) = v31;
  if (v31)
    *(_QWORD *)(v29 + 16) = a2 + 8;
  *(_QWORD *)(a2 + 16) = v30;
  *v30 = a2;
  llvm::ScalarEvolution::forgetValue(*(int32x2_t **)(a1 + 8), v9);
}

uint64_t sub_1C5ECDC40()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5ECD82C(v0);
}

void sub_1C5ECDC6C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5ECDC90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2 + 112;
  sub_1C4771E64(a2, a2 + 112, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, v3, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, v3, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, v3, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1C5ECDD54(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  _QWORD v11[3];

  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::ScalarEvolutionWrapperPass::ID);
  v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v8 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::DominatorTreeWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::DominatorTreeWrapperPass::ID);
  v11[0] = a2;
  v11[1] = v7;
  v11[2] = v10 + 32;
  return sub_1C5ECD2A4((uint64_t)v11);
}

uint64_t llvm::CloneBasicBlock(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, llvm::DebugInfoFinder *a6)
{
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ****v20;
  uint64_t ***v21;
  int v22;
  int v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  int32x2_t ****v30;
  unint64_t *v31;
  uint64_t ***v32;
  char v33;
  char v34;
  BOOL v35;
  int v36;
  llvm::DILocation **v37;
  uint64_t ***v38;
  uint64_t ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::DILocation ***v44;
  llvm::DILocation **v45;
  int v46;
  int v47;
  int v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int32x2_t ****v54;
  unint64_t *v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  int32x2_t ****v59;
  int32x2_t *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int32x2_t *****v65;
  int32x2_t ****v66;
  int v67;
  int v68;
  uint64_t ***v69;
  int v70;
  BOOL v71;
  BOOL v72;
  llvm::DILocation *v73;
  uint64_t v74;
  llvm::DILocation *v75;
  BOOL v76;
  uint64_t v77;
  llvm::ValueSymbolTable *v78;
  unint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  int32x2_t *v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  int v90;
  _BYTE *v92;
  const llvm::Module *v93;
  int v96;
  void *v97;
  uint64_t v98;
  unint64_t *v99;
  int32x2_t ****v100;
  uint64_t v101;

  v10 = **a1;
  LOWORD(v101) = 257;
  v11 = operator new();
  *(_QWORD *)v11 = *v10 + 1600;
  *(_QWORD *)(v11 + 8) = 0;
  v12 = *(_DWORD *)(v11 + 20) & 0xC0000000;
  *(_QWORD *)(v11 + 24) = 0;
  v13 = v11 + 24;
  *(_DWORD *)(v11 + 16) = 22;
  *(_DWORD *)(v11 + 20) = v12;
  v14 = (uint64_t **)(v11 + 40);
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 40;
  *(_QWORD *)(v11 + 48) = v11 + 40;
  *(_QWORD *)(v11 + 56) = 0;
  if (a4)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(a4 + 72, (_QWORD *)v11);
    v15 = *(_QWORD *)(a4 + 72);
    *(_QWORD *)(v11 + 24) = v15;
    *(_QWORD *)(v11 + 32) = a4 + 72;
    *(_QWORD *)(v15 + 8) = v13;
    *(_QWORD *)(a4 + 72) = v13;
  }
  llvm::Value::setName((uint64_t ***)v11, (uint64_t)&v97);
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v16 = ***a1;
    v17 = *(_QWORD *)(v16 + 152);
    v18 = *(unsigned int *)(v16 + 168);
    if ((_DWORD)v18)
    {
      LODWORD(v19) = (v18 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v20 = (uint64_t ****)(v17 + 16 * v19);
      v21 = *v20;
      if (*v20 == a1)
        goto LABEL_11;
      v22 = 1;
      while (v21 != (uint64_t ***)-4096)
      {
        v23 = v19 + v22++;
        v19 = v23 & (v18 - 1);
        v21 = *(uint64_t ****)(v17 + 16 * v19);
        if (v21 == a1)
        {
          v20 = (uint64_t ****)(v17 + 16 * v19);
          goto LABEL_11;
        }
      }
    }
    v20 = (uint64_t ****)(v17 + 16 * v18);
LABEL_11:
    v24 = (uint64_t *)v20[1];
    v27 = *v24;
    v25 = v24 + 2;
    v26 = v27;
    v28 = *(unsigned __int8 *)(a3 + 32);
    if (v28 == 1)
    {
      v97 = v25;
      v98 = v26;
      v29 = 261;
    }
    else
    {
      if (*(_BYTE *)(a3 + 32))
      {
        v30 = *(int32x2_t *****)(a3 + 8);
        if (*(_BYTE *)(a3 + 33) == 1)
        {
          v31 = *(unint64_t **)a3;
        }
        else
        {
          LOBYTE(v28) = 2;
          v31 = (unint64_t *)a3;
        }
        v97 = v25;
        v98 = v26;
        v99 = v31;
        v100 = v30;
        LOBYTE(v101) = 5;
        BYTE1(v101) = v28;
        goto LABEL_20;
      }
      v29 = 256;
    }
    LOWORD(v101) = v29;
LABEL_20:
    llvm::Value::setName((uint64_t ***)v11, (uint64_t)&v97);
  }
  v92 = a5;
  if (a4)
    v93 = *(const llvm::Module **)(a4 + 40);
  else
    v93 = 0;
  v32 = (uint64_t ***)a1[6];
  if (v32 != a1 + 5)
  {
    v33 = 0;
    v34 = 0;
    if (a6)
      v35 = v93 == 0;
    else
      v35 = 1;
    v36 = !v35;
    v96 = v36;
    while (1)
    {
      if (v32)
        v37 = (llvm::DILocation **)(v32 - 3);
      else
        v37 = 0;
      if (v96)
        llvm::DebugInfoFinder::processInstruction(a6, v93, v37);
      llvm::Instruction::clone((llvm::Instruction *)v37);
      v39 = v38;
      if ((*((_BYTE *)v37 + 23) & 0x10) != 0)
        break;
LABEL_58:
      v39[5] = (uint64_t **)v11;
      *(_WORD *)(v11 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v39 + 23) & 0x10) != 0)
      {
        v77 = *(_QWORD *)(v11 + 56);
        if (v77)
        {
          v78 = *(llvm::ValueSymbolTable **)(v77 + 104);
          if (v78)
            llvm::ValueSymbolTable::reinsertValue(v78, (llvm::Value *)v39);
        }
      }
      v56 = *v14;
      v39[3] = (uint64_t **)*v14;
      v39[4] = v14;
      v56[1] = (uint64_t)(v39 + 3);
      *v14 = (uint64_t *)(v39 + 3);
      v98 = 2;
      v99 = 0;
      v100 = (int32x2_t ****)v37;
      if (v37 != (llvm::DILocation **)-8192 && v37 != (llvm::DILocation **)-4096 && v37)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v98);
      v97 = &unk_1E814DA10;
      v101 = a2;
      v57 = sub_1C52E2ED8(a2, &v97);
      if (v100 != (int32x2_t ****)-8192 && v100 != (int32x2_t ****)-4096 && v100)
      {
        v58 = v98 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v98 & 0xFFFFFFFFFFFFFFF8) = v99;
        if (v99)
        {
          *v99 = *v99 & 7 | v58;
        }
        else
        {
          v59 = v100;
          v60 = ***v100;
          v61 = (unint64_t)v60[303];
          if (v61 <= v58)
          {
            v62 = v60[305].u32[0];
            if (v61 + 16 * v62 > v58)
            {
              v63 = v62 - 1;
              LODWORD(v64) = v63 & ((v100 >> 4) ^ (v100 >> 9));
              v65 = (int32x2_t *****)(v61 + 16 * v64);
              v66 = *v65;
              if (v100 == *v65)
              {
LABEL_74:
                *v65 = (int32x2_t ****)-8192;
                v60[304] = vadd_s32(v60[304], (int32x2_t)0x1FFFFFFFFLL);
                v59 = v100;
              }
              else
              {
                v67 = 1;
                while (v66 != (int32x2_t ****)-4096)
                {
                  v68 = v64 + v67++;
                  v64 = v68 & v63;
                  v66 = *(int32x2_t *****)(v61 + 16 * v64);
                  if (v100 == v66)
                  {
                    v65 = (int32x2_t *****)(v61 + 16 * v64);
                    goto LABEL_74;
                  }
                }
              }
              *((_BYTE *)v59 + 17) &= ~1u;
            }
          }
        }
      }
      v69 = (uint64_t ***)v57[7];
      if (v69 != v39)
      {
        if (v69 && v69 != (uint64_t ***)-8192 && v69 != (uint64_t ***)-4096)
        {
          v79 = v57[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v79 = v57[6];
          v80 = (unint64_t *)v57[6];
          if (v80)
          {
            *v80 = *v80 & 7 | v79;
          }
          else
          {
            v81 = v57[7];
            v82 = ***(int32x2_t ****)v81;
            v83 = (unint64_t)v82[303];
            if (v83 <= v79)
            {
              v84 = v82[305].u32[0];
              if (v83 + 16 * v84 > v79)
              {
                v85 = v84 - 1;
                LODWORD(v86) = v85 & ((v81 >> 4) ^ (v81 >> 9));
                v87 = (uint64_t *)(v83 + 16 * v86);
                v88 = *v87;
                if (v81 == *v87)
                {
LABEL_113:
                  *v87 = -8192;
                  v82[304] = vadd_s32(v82[304], (int32x2_t)0x1FFFFFFFFLL);
                  v81 = v57[7];
                }
                else
                {
                  v89 = 1;
                  while (v88 != -4096)
                  {
                    v90 = v86 + v89++;
                    v86 = v90 & v85;
                    v88 = *(_QWORD *)(v83 + 16 * v86);
                    if (v81 == v88)
                    {
                      v87 = (uint64_t *)(v83 + 16 * v86);
                      goto LABEL_113;
                    }
                  }
                }
                *(_BYTE *)(v81 + 17) &= ~1u;
              }
            }
          }
        }
        v57[7] = v39;
        if (v39 != (uint64_t ***)-8192 && v39 != (uint64_t ***)-4096 && v39)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v57 + 5));
      }
      v70 = *((unsigned __int8 *)v37 + 16);
      if (v70 == 84)
      {
        v71 = sub_1C4D99D08((uint64_t)v37) || sub_1C509DDB0((uint64_t)v37);
        v72 = !v71;
        v70 = *((unsigned __int8 *)v37 + 16);
        if (v32)
        {
LABEL_90:
          if (v70 == 59)
          {
            v76 = *((_BYTE *)*(v37 - 4) + 16) == 16
               && ((v73 = v37[5], (v74 = *(_QWORD *)(*((_QWORD *)v73 + 7) + 80)) != 0)
                 ? (v75 = (llvm::DILocation *)(v74 - 24))
                 : (v75 = 0),
                   v73 == v75)
               && (*((_WORD *)v37 + 9) & 0x40) == 0;
            v34 |= !v76;
          }
        }
      }
      else
      {
        v72 = 0;
        if (v32)
          goto LABEL_90;
      }
      v33 |= v72;
      v32 = (uint64_t ***)v32[1];
      if (v32 == a1 + 5)
        goto LABEL_118;
    }
    v40 = **(_QWORD **)*v37;
    v41 = *(_QWORD *)(v40 + 152);
    v42 = *(unsigned int *)(v40 + 168);
    if ((_DWORD)v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      v44 = (llvm::DILocation ***)(v41 + 16 * v43);
      v45 = *v44;
      if (*v44 == v37)
      {
LABEL_45:
        v48 = *(unsigned __int8 *)(a3 + 32);
        if (*(_BYTE *)(a3 + 32))
        {
          v49 = (uint64_t *)v44[1];
          v52 = *v49;
          v50 = v49 + 2;
          v51 = v52;
          if (v48 == 1)
          {
            v97 = v50;
            v98 = v51;
            v53 = 1;
          }
          else
          {
            v54 = *(int32x2_t *****)(a3 + 8);
            if (*(_BYTE *)(a3 + 33) == 1)
              v53 = *(_BYTE *)(a3 + 32);
            else
              v53 = 2;
            if (*(_BYTE *)(a3 + 33) == 1)
              v55 = *(unint64_t **)a3;
            else
              v55 = (unint64_t *)a3;
            v97 = v50;
            v98 = v51;
            v99 = v55;
            v100 = v54;
          }
          LOBYTE(v48) = 5;
        }
        else
        {
          v53 = 1;
        }
        LOBYTE(v101) = v48;
        BYTE1(v101) = v53;
        llvm::Value::setName(v38, (uint64_t)&v97);
        goto LABEL_58;
      }
      v46 = 1;
      while (v45 != (llvm::DILocation **)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & (v42 - 1);
        v45 = *(llvm::DILocation ***)(v41 + 16 * v43);
        if (v45 == v37)
        {
          v44 = (llvm::DILocation ***)(v41 + 16 * v43);
          goto LABEL_45;
        }
      }
    }
    v44 = (llvm::DILocation ***)(v41 + 16 * v42);
    goto LABEL_45;
  }
  v34 = 0;
  v33 = 0;
LABEL_118:
  if (v92)
  {
    *v92 |= v33 & 1;
    v92[1] |= v34 & 1;
  }
  return v11;
}

void llvm::CloneFunctionInto(uint64_t a1, const llvm::Function *a2, uint64_t a3, int a4, uint64_t a5, _BYTE *a6, _BYTE *a7, uint64_t a8, uint64_t a9)
{
  llvm::BlockAddress *v12;
  _BOOL4 v14;
  uint64_t v15;
  int v16;
  llvm::MDNode ***v17;
  llvm::MDNode **v18;
  _QWORD *v19;
  uint64_t v20;
  llvm::LLVMContext *v21;
  llvm::LLVMContext *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v31;
  int32x2_t ****v32;
  int32x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int32x2_t *****v38;
  int32x2_t ****v39;
  int v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  llvm::BlockAddress **v56;
  llvm::BlockAddress *v57;
  llvm::BlockAddress **v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  uint64_t v62;
  llvm::DISubprogram **v63;
  uint64_t v64;
  llvm::DISubprogram *v65;
  char *v66;
  char *v67;
  uint64_t ***v68;
  char v69;
  void **v70;
  llvm::Function *v71;
  _QWORD *v72;
  llvm::BasicBlock *v73;
  unint64_t v74;
  int32x2_t ****v75;
  int32x2_t *v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int32x2_t *****v81;
  int32x2_t ****v82;
  int v83;
  int v84;
  llvm::Function *v85;
  _QWORD *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v91;
  llvm::BlockAddress *v92;
  llvm::BasicBlock *v93;
  llvm::BlockAddress *v94;
  _QWORD *v95;
  unint64_t v96;
  int32x2_t ****v97;
  int32x2_t *v98;
  unint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int32x2_t *****v103;
  int32x2_t ****v104;
  int v105;
  int v106;
  unint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  int32x2_t *v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  int v118;
  llvm::BlockAddress *v119;
  unint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  int32x2_t *v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  void **v133;
  _QWORD *v134;
  uint64_t v135;
  unsigned __int8 *v136;
  void **v137;
  uint64_t v138;
  unsigned __int8 *v139;
  void **v140;
  uint64_t v141;
  unsigned __int8 *v142;
  int v143;
  char *v144;
  char *v145;
  int v146;
  llvm::MDNode *v147;
  uint64_t v148;
  llvm::MDNode *v149;
  llvm::LLVMContext *v150;
  llvm::LLVMContext *v151;
  uint64_t v152;
  int32x2_t ****v153;
  _QWORD *v154;
  unint64_t v155;
  int32x2_t ****v156;
  int32x2_t *v157;
  unint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  int32x2_t *****v162;
  int32x2_t ****v163;
  int v164;
  int v165;
  uint64_t i;
  uint64_t v167;
  uint64_t v168;
  uint64_t j;
  uint64_t ***v170;
  uint64_t v171;
  llvm::LLVMContext *v172;
  llvm::LLVMContext *v173;
  uint64_t inserted;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  llvm::MDNode **v178;
  uint64_t v179;
  llvm::MDNode *v180;
  uint64_t v181;
  unsigned __int8 *v182;
  llvm::LLVMContext *v183;
  llvm::LLVMContext *v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  unsigned __int8 **v188;
  llvm::BlockAddress **v189;
  uint64_t v190;
  llvm::DISubprogram *v191;
  int v192;
  llvm::BlockAddress *v193;
  _QWORD *v197;
  unint64_t v198;
  uint64_t v199;
  int32x2_t ****v200;
  _QWORD v201[8];
  uint64_t v202;
  unsigned __int8 *v203;
  void *v204;
  uint64_t v205;
  _BYTE v206[16];
  void *v207;
  uint64_t v208;
  unint64_t *v209;
  int32x2_t ****v210;
  uint64_t v211;
  void *v212;
  unsigned int v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  void *v217;
  unsigned int v218;
  uint64_t v219;
  void *v220;
  _QWORD v221[9];
  void *v222;
  char v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD v226[6];

  v12 = a2;
  v226[4] = *MEMORY[0x1E0C80C00];
  v14 = a4 > 0;
  v15 = *(_QWORD *)(a1 + 112);
  llvm::Function::copyAttributesFrom((llvm::Function *)a1, a2);
  *(_QWORD *)(a1 + 112) = v15;
  if ((*((_WORD *)v12 + 9) & 8) != 0)
  {
    v16 = *((_DWORD *)v12 + 5);
    if ((v16 & 0x40000000) != 0)
      v17 = (llvm::MDNode ***)*((_QWORD *)v12 - 1);
    else
      v17 = (llvm::MDNode ***)((char *)v12 - 32 * (v16 & 0x7FFFFFF));
    v18 = *v17;
    v19 = (_QWORD *)operator new();
    *(_DWORD *)v19 = a4 < 1;
    v19[1] = a8;
    *((_DWORD *)v19 + 4) = 0;
    v19[5] = a3;
    v19[3] = v19 + 5;
    v19[6] = a9;
    v19[4] = 0x200000001;
    v19[9] = v19 + 11;
    v19[10] = 0x400000000;
    v19[23] = v19 + 25;
    v19[24] = 0x100000000;
    v19[27] = v19 + 29;
    v19[28] = 0x1000000000;
    v197 = v19;
    v207 = v19;
    v20 = sub_1C5FD3BE0((uint64_t)v19, v18);
    sub_1C5FD3718((uint64_t *)&v207, v21);
    llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v197, v22);
    sub_1C53D1F60((_QWORD *)a1, v20);
    *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFF7 | (8 * (v20 != 0));
  }
  v192 = a4;
  v23 = *(_QWORD *)(a1 + 96);
  v224 = v226;
  v225 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v224, v23, 0);
  v24 = *((_QWORD *)v12 + 14);
  v193 = v12;
  v25 = sub_1C485F330((uint64_t)v12);
  if (v25 != v26)
  {
    v27 = v25;
    v28 = v26;
    do
    {
      v208 = 2;
      v209 = 0;
      v210 = (int32x2_t ****)v27;
      if (v27 != -8192 && v27 != -4096 && v27)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v208);
      v207 = &unk_1E814DA10;
      v211 = a3;
      v29 = sub_1C52E2ED8(a3, &v207);
      if (v210 != (int32x2_t ****)-8192 && v210 != (int32x2_t ****)-4096 && v210 != 0)
      {
        v31 = v208 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v208 & 0xFFFFFFFFFFFFFFF8) = v209;
        if (v209)
        {
          *v209 = *v209 & 7 | v31;
        }
        else
        {
          v32 = v210;
          v33 = ***v210;
          v34 = (unint64_t)v33[303];
          if (v34 <= v31)
          {
            v35 = v33[305].u32[0];
            if (v34 + 16 * v35 > v31)
            {
              v36 = v35 - 1;
              LODWORD(v37) = v36 & ((v210 >> 4) ^ (v210 >> 9));
              v38 = (int32x2_t *****)(v34 + 16 * v37);
              v39 = *v38;
              if (v210 == *v38)
              {
LABEL_25:
                *v38 = (int32x2_t ****)-8192;
                v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
                v32 = v210;
              }
              else
              {
                v40 = 1;
                while (v39 != (int32x2_t ****)-4096)
                {
                  v41 = v37 + v40++;
                  v37 = v41 & v36;
                  v39 = *(int32x2_t *****)(v34 + 16 * v37);
                  if (v210 == v39)
                  {
                    v38 = (int32x2_t *****)(v34 + 16 * v37);
                    goto LABEL_25;
                  }
                }
              }
              *((_BYTE *)v32 + 17) &= ~1u;
            }
          }
        }
      }
      v42 = v29[7];
      if (v42)
        v43 = *(_BYTE *)(v42 + 16) == 21;
      else
        v43 = 0;
      if (v43)
      {
        if (v24 && (v44 = *(_DWORD *)(v27 + 32) + 2, v44 < *(_DWORD *)(v24 + 8)))
          v45 = *(_QWORD *)(v24 + 40 + 8 * v44);
        else
          v45 = 0;
        v224[*(unsigned int *)(v42 + 32)] = v45;
      }
      v27 += 40;
    }
    while (v27 != v28);
  }
  if (v24 && (v46 = *(_DWORD *)(v24 + 8)) != 0)
  {
    v47 = *(_QWORD *)(v24 + 40);
    if (v46 == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(v24 + 48);
    v49 = a4;
  }
  else
  {
    v47 = 0;
    v48 = 0;
    v49 = a4;
  }
  *(_QWORD *)(a1 + 112) = llvm::AttributeList::get(**(uint64_t ***)a1, v47, v48, v224, v225);
  if (v12 && *((_BYTE *)v12 + 16) == 3)
  {
    if ((*((_DWORD *)v12 + 5) & 0x7FFFFFF) == 0)
      goto LABEL_264;
  }
  else if (!*((_BYTE *)v12 + 16)
         && *((llvm::BlockAddress **)v12 + 9) == (llvm::BlockAddress *)((char *)v12 + 72)
         && (*((_BYTE *)v12 + 34) & 0x80) == 0)
  {
    goto LABEL_264;
  }
  LOBYTE(v207) = 0;
  v223 = 0;
  if (v49 > 1)
  {
    if (v49 == 2)
      sub_1C5ED705C((uint64_t)&v207);
    v65 = 0;
    v50 = a6;
    goto LABEL_75;
  }
  sub_1C5ED705C((uint64_t)&v207);
  v50 = a6;
  if ((*((_BYTE *)v12 + 23) & 0x20) != 0)
  {
    v51 = ***(_QWORD ***)v12;
    v197 = v12;
    v52 = *(_DWORD *)(v51 + 2496);
    if (v52)
    {
      v53 = *(_QWORD *)(v51 + 2480);
      v54 = v52 - 1;
      v55 = v54 & ((v12 >> 4) ^ (v12 >> 9));
      v56 = (llvm::BlockAddress **)(v53 + 40 * v55);
      v57 = *v56;
      if (*v56 == v12)
        goto LABEL_66;
      v58 = 0;
      v59 = 1;
      while (v57 != (llvm::BlockAddress *)-4096)
      {
        if (v58)
          v60 = 0;
        else
          v60 = v57 == (llvm::BlockAddress *)-8192;
        if (v60)
          v58 = v56;
        v61 = v55 + v59++;
        v55 = v61 & v54;
        v56 = (llvm::BlockAddress **)(v53 + 40 * v55);
        v57 = *v56;
        if (*v56 == v12)
          goto LABEL_66;
      }
      if (v58)
        v189 = v58;
      else
        v189 = v56;
    }
    else
    {
      v189 = 0;
    }
    v56 = (llvm::BlockAddress **)sub_1C541AB24(v51 + 2480, (uint64_t)&v197, (uint64_t *)&v197, v189);
    v190 = (uint64_t)v197;
    v56[4] = 0;
    v56[3] = 0;
    *v56 = (llvm::BlockAddress *)v190;
    v56[1] = (llvm::BlockAddress *)(v56 + 3);
    v56[2] = (llvm::BlockAddress *)0x100000000;
LABEL_66:
    v62 = *((unsigned int *)v56 + 4);
    if ((_DWORD)v62)
    {
      v63 = (llvm::DISubprogram **)((char *)v56[1] + 8);
      v64 = 16 * v62;
      v65 = 0;
      while (*((_DWORD *)v63 - 2))
      {
        v63 += 2;
        v64 -= 16;
        if (!v64)
          goto LABEL_75;
      }
      v65 = *v63;
      if (*v63)
        llvm::DebugInfoFinder::processSubprogram((llvm::DebugInfoFinder *)&v207, *v63);
      goto LABEL_75;
    }
  }
  v65 = 0;
LABEL_75:
  v191 = v65;
  v66 = (char *)v12 + 72;
  v67 = (char *)*((_QWORD *)v12 + 10);
  if (v67 != (char *)v12 + 72)
  {
    do
    {
      if (v67)
        v68 = (uint64_t ***)(v67 - 24);
      else
        v68 = 0;
      v69 = 1;
      BYTE1(v201[0]) = 1;
      if (*v50)
      {
        v197 = v50;
        v69 = 3;
      }
      LOBYTE(v201[0]) = v69;
      if (v223)
        v70 = &v207;
      else
        v70 = 0;
      v71 = (llvm::Function *)llvm::CloneBasicBlock(v68, a3, (uint64_t)&v197, a1, a7, (llvm::DebugInfoFinder *)v70);
      v198 = 2;
      v199 = 0;
      v200 = (int32x2_t ****)v68;
      if (v68 != (uint64_t ***)-8192 && v68 != (uint64_t ***)-4096 && v68)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v198);
      v197 = &unk_1E814DA10;
      v201[0] = a3;
      v72 = sub_1C52E2ED8(a3, &v197);
      if (v200 != (int32x2_t ****)-8192 && v200 != (int32x2_t ****)-4096 && v200)
      {
        v74 = v198 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v198 & 0xFFFFFFFFFFFFFFF8) = v199;
        if (v199)
        {
          *(_QWORD *)v199 = *(_QWORD *)v199 & 7 | v74;
        }
        else
        {
          v75 = v200;
          v76 = ***v200;
          v77 = (unint64_t)v76[303];
          if (v77 <= v74)
          {
            v78 = v76[305].u32[0];
            if (v77 + 16 * v78 > v74)
            {
              v79 = v78 - 1;
              LODWORD(v80) = v79 & ((v200 >> 4) ^ (v200 >> 9));
              v81 = (int32x2_t *****)(v77 + 16 * v80);
              v82 = *v81;
              if (v200 == *v81)
              {
LABEL_99:
                *v81 = (int32x2_t ****)-8192;
                v76[304] = vadd_s32(v76[304], (int32x2_t)0x1FFFFFFFFLL);
                v75 = v200;
              }
              else
              {
                v83 = 1;
                while (v82 != (int32x2_t ****)-4096)
                {
                  v84 = v80 + v83++;
                  v80 = v84 & v79;
                  v82 = *(int32x2_t *****)(v77 + 16 * v80);
                  if (v200 == v82)
                  {
                    v81 = (int32x2_t *****)(v77 + 16 * v80);
                    goto LABEL_99;
                  }
                }
              }
              *((_BYTE *)v75 + 17) &= ~1u;
            }
          }
        }
      }
      v85 = (llvm::Function *)v72[7];
      if (v85 != v71)
      {
        if (v85 && v85 != (llvm::Function *)-8192 && v85 != (llvm::Function *)-4096)
        {
          v107 = v72[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v107 = v72[6];
          v108 = (unint64_t *)v72[6];
          if (v108)
          {
            *v108 = *v108 & 7 | v107;
          }
          else
          {
            v109 = v72[7];
            v110 = ***(int32x2_t ****)v109;
            v111 = (unint64_t)v110[303];
            if (v111 <= v107)
            {
              v112 = v110[305].u32[0];
              if (v111 + 16 * v112 > v107)
              {
                v113 = v112 - 1;
                LODWORD(v114) = v113 & ((v109 >> 4) ^ (v109 >> 9));
                v115 = (uint64_t *)(v111 + 16 * v114);
                v116 = *v115;
                if (v109 == *v115)
                {
LABEL_154:
                  *v115 = -8192;
                  v110[304] = vadd_s32(v110[304], (int32x2_t)0x1FFFFFFFFLL);
                  v109 = v72[7];
                }
                else
                {
                  v117 = 1;
                  while (v116 != -4096)
                  {
                    v118 = v114 + v117++;
                    v114 = v118 & v113;
                    v116 = *(_QWORD *)(v111 + 16 * v114);
                    if (v109 == v116)
                    {
                      v115 = (uint64_t *)(v111 + 16 * v114);
                      goto LABEL_154;
                    }
                  }
                }
                *(_BYTE *)(v109 + 17) &= ~1u;
              }
            }
          }
        }
        v72[7] = v71;
        if (v71 != (llvm::Function *)-8192 && v71 != (llvm::Function *)-4096 && v71)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v72 + 5));
      }
      if ((*((_WORD *)v68 + 9) & 0x7FFF) != 0)
      {
        v92 = llvm::BlockAddress::get(v12, (llvm::Function *)v68, v73);
        v94 = llvm::BlockAddress::get((llvm::BlockAddress *)a1, v71, v93);
        v198 = 2;
        v199 = 0;
        v200 = (int32x2_t ****)v92;
        if (v92 != (llvm::BlockAddress *)-8192 && v92 != (llvm::BlockAddress *)-4096 && v92)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v198);
        v197 = &unk_1E814DA10;
        v201[0] = a3;
        v95 = sub_1C52E2ED8(a3, &v197);
        v12 = v193;
        if (v200 != (int32x2_t ****)-8192 && v200 != (int32x2_t ****)-4096 && v200)
        {
          v96 = v198 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v198 & 0xFFFFFFFFFFFFFFF8) = v199;
          if (v199)
          {
            *(_QWORD *)v199 = *(_QWORD *)v199 & 7 | v96;
          }
          else
          {
            v97 = v200;
            v98 = ***v200;
            v99 = (unint64_t)v98[303];
            if (v99 <= v96)
            {
              v100 = v98[305].u32[0];
              if (v99 + 16 * v100 > v96)
              {
                v101 = v100 - 1;
                LODWORD(v102) = v101 & ((v200 >> 4) ^ (v200 >> 9));
                v103 = (int32x2_t *****)(v99 + 16 * v102);
                v104 = *v103;
                if (v200 == *v103)
                {
LABEL_142:
                  *v103 = (int32x2_t ****)-8192;
                  v98[304] = vadd_s32(v98[304], (int32x2_t)0x1FFFFFFFFLL);
                  v97 = v200;
                }
                else
                {
                  v105 = 1;
                  while (v104 != (int32x2_t ****)-4096)
                  {
                    v106 = v102 + v105++;
                    v102 = v106 & v101;
                    v104 = *(int32x2_t *****)(v99 + 16 * v102);
                    if (v200 == v104)
                    {
                      v103 = (int32x2_t *****)(v99 + 16 * v102);
                      goto LABEL_142;
                    }
                  }
                }
                *((_BYTE *)v97 + 17) &= ~1u;
              }
            }
          }
        }
        v119 = (llvm::BlockAddress *)v95[7];
        if (v119 != v94)
        {
          if (v119 && v119 != (llvm::BlockAddress *)-8192 && v119 != (llvm::BlockAddress *)-4096)
          {
            v120 = v95[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v120 = v95[6];
            v121 = (unint64_t *)v95[6];
            if (v121)
            {
              *v121 = *v121 & 7 | v120;
            }
            else
            {
              v122 = v95[7];
              v123 = ***(int32x2_t ****)v122;
              v124 = (unint64_t)v123[303];
              if (v124 <= v120)
              {
                v125 = v123[305].u32[0];
                if (v124 + 16 * v125 > v120)
                {
                  v126 = v125 - 1;
                  LODWORD(v127) = v126 & ((v122 >> 4) ^ (v122 >> 9));
                  v128 = (uint64_t *)(v124 + 16 * v127);
                  v129 = *v128;
                  if (v122 == *v128)
                  {
LABEL_174:
                    *v128 = -8192;
                    v123[304] = vadd_s32(v123[304], (int32x2_t)0x1FFFFFFFFLL);
                    v122 = v95[7];
                  }
                  else
                  {
                    v130 = 1;
                    while (v129 != -4096)
                    {
                      v131 = v127 + v130++;
                      v127 = v131 & v126;
                      v129 = *(_QWORD *)(v124 + 16 * v127);
                      if (v122 == v129)
                      {
                        v128 = (uint64_t *)(v124 + 16 * v127);
                        goto LABEL_174;
                      }
                    }
                  }
                  *(_BYTE *)(v122 + 17) &= ~1u;
                }
              }
            }
          }
          v95[7] = v94;
          if (v94 != (llvm::BlockAddress *)-8192 && v94 != (llvm::BlockAddress *)-4096 && v94)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v95 + 5));
        }
      }
      v86 = (_QWORD *)*((_QWORD *)v71 + 5);
      if (v86 != (_QWORD *)((char *)v71 + 40))
      {
        v87 = v86 ? (uint64_t)(v86 - 3) : 0;
        v88 = *(unsigned __int8 *)(v87 + 16) - 40;
        v89 = v88 >= 0xFFFFFFF5 ? v87 : 0;
        if (v86)
        {
          if (*(_BYTE *)(v89 + 16) == 29 && v88 >= 0xFFFFFFF5)
          {
            v91 = *(unsigned int *)(a5 + 8);
            if (v91 >= *(unsigned int *)(a5 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v91 + 1, 8);
              v91 = *(unsigned int *)(a5 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a5 + 8 * v91) = v89;
            ++*(_DWORD *)(a5 + 8);
          }
        }
      }
      v67 = (char *)*((_QWORD *)v67 + 1);
      v50 = a6;
    }
    while (v67 != v66);
  }
  if (v192 >= 2)
  {
    v132 = v14;
  }
  else
  {
    v132 = v14;
    if (v213)
    {
      v133 = (void **)v212;
      v134 = (_QWORD *)(a3 + 24);
      v135 = 8 * v213;
      do
      {
        v136 = (unsigned __int8 *)*v133;
        if (*v133 != v191)
        {
          v204 = *v133;
          if (!*(_BYTE *)(a3 + 48))
          {
            *v134 = 0;
            *(_QWORD *)(a3 + 32) = 0;
            *(_DWORD *)(a3 + 40) = 0;
            *(_BYTE *)(a3 + 48) = 1;
          }
          v203 = v136;
          sub_1C63A852C((uint64_t)&v197, (_DWORD *)(a3 + 24), &v203, (unsigned __int8 **)&v204);
        }
        ++v133;
        v135 -= 8;
      }
      while (v135);
      if ((_DWORD)v208)
      {
        v137 = (void **)v207;
        v138 = 8 * v208;
        do
        {
          v139 = (unsigned __int8 *)*v137;
          v204 = *v137;
          if (!*(_BYTE *)(a3 + 48))
          {
            *v134 = 0;
            *(_QWORD *)(a3 + 32) = 0;
            *(_DWORD *)(a3 + 40) = 0;
            *(_BYTE *)(a3 + 48) = 1;
          }
          v203 = v139;
          sub_1C63A852C((uint64_t)&v197, (_DWORD *)(a3 + 24), &v203, (unsigned __int8 **)&v204);
          ++v137;
          v138 -= 8;
        }
        while (v138);
      }
      if (v218)
      {
        v140 = (void **)v217;
        v141 = 8 * v218;
        do
        {
          v142 = (unsigned __int8 *)*v140;
          v204 = *v140;
          if (!*(_BYTE *)(a3 + 48))
          {
            *v134 = 0;
            *(_QWORD *)(a3 + 32) = 0;
            *(_DWORD *)(a3 + 40) = 0;
            *(_BYTE *)(a3 + 48) = 1;
          }
          v203 = v142;
          sub_1C63A852C((uint64_t)&v197, (_DWORD *)(a3 + 24), &v203, (unsigned __int8 **)&v204);
          ++v140;
          v132 = 1;
          v141 -= 8;
        }
        while (v141);
      }
      else
      {
        v132 = 1;
      }
    }
  }
  v143 = v132 ^ 1;
  v204 = v206;
  v205 = 0x100000000;
  llvm::Value::getAllMetadata(v12, (uint64_t)&v204);
  if ((_DWORD)v205)
  {
    v144 = (char *)v204;
    v145 = (char *)v204 + 16 * v205;
    do
    {
      v146 = *(_DWORD *)v144;
      v147 = (llvm::MDNode *)*((_QWORD *)v144 + 1);
      v148 = operator new();
      *(_DWORD *)v148 = v143;
      *(_QWORD *)(v148 + 8) = a8;
      *(_DWORD *)(v148 + 16) = 0;
      *(_QWORD *)(v148 + 40) = a3;
      *(_QWORD *)(v148 + 24) = v148 + 40;
      *(_QWORD *)(v148 + 48) = a9;
      *(_QWORD *)(v148 + 32) = 0x200000001;
      *(_QWORD *)(v148 + 72) = v148 + 88;
      *(_QWORD *)(v148 + 80) = 0x400000000;
      *(_QWORD *)(v148 + 184) = v148 + 200;
      *(_QWORD *)(v148 + 192) = 0x100000000;
      *(_QWORD *)(v148 + 216) = v148 + 232;
      *(_QWORD *)(v148 + 224) = 0x1000000000;
      v203 = (unsigned __int8 *)v148;
      v197 = (_QWORD *)v148;
      v149 = (llvm::MDNode *)sub_1C5FD6E5C(v148, v147);
      sub_1C5FD3718((uint64_t *)&v197, v150);
      llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v203, v151);
      llvm::Value::addMetadata((llvm::Value *)a1, v146, v149);
      v144 += 16;
    }
    while (v144 != v145);
  }
  v152 = *((_QWORD *)v193 + 10);
  if (v152)
    v153 = (int32x2_t ****)(v152 - 24);
  else
    v153 = 0;
  v198 = 2;
  v199 = 0;
  v200 = v153;
  if (v153 != (int32x2_t ****)-8192 && v153 != (int32x2_t ****)-4096 && v153)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v198);
  v197 = &unk_1E814DA10;
  v201[0] = a3;
  v154 = sub_1C52E2ED8(a3, &v197);
  if (v200 != (int32x2_t ****)-8192 && v200 != (int32x2_t ****)-4096 && v200)
  {
    v155 = v198 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v198 & 0xFFFFFFFFFFFFFFF8) = v199;
    if (v199)
    {
      *(_QWORD *)v199 = *(_QWORD *)v199 & 7 | v155;
    }
    else
    {
      v156 = v200;
      v157 = ***v200;
      v158 = (unint64_t)v157[303];
      if (v158 <= v155)
      {
        v159 = v157[305].u32[0];
        if (v158 + 16 * v159 > v155)
        {
          v160 = v159 - 1;
          LODWORD(v161) = v160 & ((v200 >> 4) ^ (v200 >> 9));
          v162 = (int32x2_t *****)(v158 + 16 * v161);
          v163 = *v162;
          if (v200 == *v162)
          {
LABEL_220:
            *v162 = (int32x2_t ****)-8192;
            v157[304] = vadd_s32(v157[304], (int32x2_t)0x1FFFFFFFFLL);
            v156 = v200;
          }
          else
          {
            v164 = 1;
            while (v163 != (int32x2_t ****)-4096)
            {
              v165 = v161 + v164++;
              v161 = v165 & v160;
              v163 = *(int32x2_t *****)(v158 + 16 * v161);
              if (v200 == v163)
              {
                v162 = (int32x2_t *****)(v158 + 16 * v161);
                goto LABEL_220;
              }
            }
          }
          *((_BYTE *)v156 + 17) &= ~1u;
        }
      }
    }
  }
  for (i = v154[7] + 24; i != a1 + 72; i = *(_QWORD *)(i + 8))
  {
    v167 = i - 24;
    if (!i)
      v167 = 0;
    v168 = v167 + 40;
    for (j = *(_QWORD *)(v167 + 48); j != v168; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v170 = (uint64_t ***)(j - 24);
      else
        v170 = 0;
      v171 = operator new();
      *(_DWORD *)v171 = v143;
      *(_QWORD *)(v171 + 8) = a8;
      *(_DWORD *)(v171 + 16) = 0;
      *(_QWORD *)(v171 + 40) = a3;
      *(_QWORD *)(v171 + 24) = v171 + 40;
      *(_QWORD *)(v171 + 48) = a9;
      *(_QWORD *)(v171 + 32) = 0x200000001;
      *(_QWORD *)(v171 + 72) = v171 + 88;
      *(_QWORD *)(v171 + 80) = 0x400000000;
      *(_QWORD *)(v171 + 184) = v171 + 200;
      *(_QWORD *)(v171 + 192) = 0x100000000;
      *(_QWORD *)(v171 + 216) = v171 + 232;
      *(_QWORD *)(v171 + 224) = 0x1000000000;
      v203 = (unsigned __int8 *)v171;
      v197 = (_QWORD *)v171;
      sub_1C5FD706C(v171, v170);
      sub_1C5FD3718((uint64_t *)&v197, v172);
      llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v203, v173);
    }
  }
  if (v192 == 2)
  {
    inserted = llvm::Module::getOrInsertNamedMetadata(*(_QWORD *)(a1 + 40), "llvm.dbg.cu", 0xBuLL);
    v197 = v201;
    v198 = (unint64_t)v201;
    v199 = 8;
    LODWORD(v200) = 0;
    v175 = *(unsigned int *)(*(_QWORD *)(inserted + 48) + 8);
    if ((_DWORD)v175)
    {
      v176 = 0;
      v177 = 8 * v175;
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v197, *(_QWORD *)(**(_QWORD **)(inserted + 48) + v176));
        v176 += 8;
      }
      while (v177 != v176);
    }
    if ((_DWORD)v208)
    {
      v178 = (llvm::MDNode **)v207;
      v179 = 8 * v208;
      do
      {
        v180 = *v178;
        v181 = operator new();
        *(_DWORD *)v181 = 0;
        *(_QWORD *)(v181 + 8) = a8;
        *(_DWORD *)(v181 + 16) = 0;
        *(_QWORD *)(v181 + 40) = a3;
        *(_QWORD *)(v181 + 24) = v181 + 40;
        *(_QWORD *)(v181 + 48) = a9;
        *(_QWORD *)(v181 + 32) = 0x200000001;
        *(_QWORD *)(v181 + 72) = v181 + 88;
        *(_QWORD *)(v181 + 80) = 0x400000000;
        *(_QWORD *)(v181 + 184) = v181 + 200;
        *(_QWORD *)(v181 + 192) = 0x100000000;
        *(_QWORD *)(v181 + 216) = v181 + 232;
        *(_QWORD *)(v181 + 224) = 0x1000000000;
        v202 = v181;
        v203 = (unsigned __int8 *)v181;
        v182 = (unsigned __int8 *)sub_1C5FD6E5C(v181, v180);
        sub_1C5FD3718((uint64_t *)&v203, v183);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v202, v184);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v197, (uint64_t)v182);
        if (v185)
        {
          v203 = v182;
          v186 = *(_QWORD *)(inserted + 48);
          v187 = *(unsigned int *)(v186 + 8);
          if (v187 >= *(_DWORD *)(v186 + 12))
          {
            sub_1C5419FD8(*(_QWORD *)(inserted + 48), &v203);
          }
          else
          {
            v188 = (unsigned __int8 **)(*(_QWORD *)v186 + 8 * v187);
            *v188 = v182;
            if (v182)
            {
              llvm::MetadataTracking::track((uint64_t)v188, v182, 2);
              LODWORD(v187) = *(_DWORD *)(v186 + 8);
            }
            *(_DWORD *)(v186 + 8) = v187 + 1;
          }
        }
        ++v178;
        v179 -= 8;
      }
      while (v179);
    }
    if ((_QWORD *)v198 != v197)
      free((void *)v198);
  }
  if (v204 != v206)
    free(v204);
  if (v223)
  {
    if (v222 != (void *)v221[8])
      free(v222);
    if (v220 != v221)
      free(v220);
    if (v217 != &v219)
      free(v217);
    if (v215 != &v216)
      free(v215);
    if (v212 != &v214)
      free(v212);
    if (v207 != &v209)
      free(v207);
  }
LABEL_264:
  if (v224 != v226)
    free(v224);
}

char *llvm::CloneFunction(llvm::Function *this, uint64_t a2, _BYTE *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  llvm::PointerType *v26;
  char v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Function *v34;
  int v35;
  int v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t ***v43;
  int32x2_t ****v44;
  int32x2_t ****v45;
  int32x2_t ****v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int32x2_t ****v52;
  int v53;
  int v54;
  int32x2_t *v55;
  int32x2_t v56;
  uint64_t v57;
  uint64_t v58;
  int32x2_t *****v59;
  int32x2_t ****v60;
  int v61;
  int v62;
  int32x2_t ****v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  int32x2_t ****v70;
  int32x2_t *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  int32x2_t *****v76;
  int32x2_t ****v77;
  int v78;
  int v79;
  uint64_t ***v80;
  uint64_t ***v81;
  void *v84;
  uint64_t v85;
  unint64_t *v86;
  int32x2_t ****v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 11);
LABEL_3:
    v6 = v5;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  v5 = (_QWORD *)*((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0)
    goto LABEL_3;
  llvm::Function::BuildLazyArguments(this);
  v6 = (_QWORD *)*((_QWORD *)this + 11);
LABEL_4:
  v7 = &v6[5 * *((_QWORD *)this + 12)];
  if (v5 != v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)a2;
        v13 = ((_DWORD)v11 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        v14 = *(_QWORD *)a2 + (v13 << 6);
        v15 = *(_QWORD **)(v14 + 24);
        if (v5 == v15)
        {
LABEL_11:
          if (v14 != v12 + (v11 << 6))
            goto LABEL_14;
        }
        else
        {
          v16 = 1;
          while (v15 != (_QWORD *)-4096)
          {
            v17 = v13 + v16++;
            v13 = v17 & (v11 - 1);
            v14 = v12 + (v13 << 6);
            v15 = *(_QWORD **)(v14 + 24);
            if (v5 == v15)
              goto LABEL_11;
          }
        }
      }
      v18 = *v5;
      if (v9 >= (uint64_t *)v8)
      {
        v20 = v9 - v10;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          abort();
        if ((v8 - (char *)v10) >> 2 > v21)
          v21 = (v8 - (char *)v10) >> 2;
        if ((unint64_t)(v8 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
        {
          if (v22 >> 61)
            sub_1C4764EE4();
          v23 = (char *)operator new(8 * v22);
        }
        else
        {
          v23 = 0;
        }
        v24 = (uint64_t *)&v23[8 * v20];
        *v24 = v18;
        v19 = v24 + 1;
        if (v9 != v10)
        {
          do
          {
            v25 = *--v9;
            *--v24 = v25;
          }
          while (v9 != v10);
          v9 = v10;
        }
        v10 = v24;
        v8 = &v23[8 * v22];
        if (v9)
          operator delete(v9);
        goto LABEL_15;
      }
      *v9++ = v18;
LABEL_14:
      v19 = v9;
LABEL_15:
      v5 += 5;
      v9 = v19;
      if (v5 == v7)
        goto LABEL_35;
    }
  }
  v10 = 0;
  v19 = 0;
LABEL_35:
  v26 = (llvm::PointerType *)llvm::FunctionType::get(**(uint64_t ****)(*((_QWORD *)this + 3) + 16), v10, v19 - v10, *(_DWORD *)(*((_QWORD *)this + 3) + 8) > 0xFFu);
  v27 = *((_DWORD *)this + 8) & 0xF;
  v28 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)this + 8) >> 8);
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v29 = ***(_QWORD ***)this;
    v30 = *(_QWORD *)(v29 + 152);
    v31 = *(unsigned int *)(v29 + 168);
    if ((_DWORD)v31)
    {
      LODWORD(v32) = (v31 - 1) & ((this >> 4) ^ (this >> 9));
      v33 = v30 + 16 * v32;
      v34 = *(llvm::Function **)v33;
      if (*(llvm::Function **)v33 == this)
      {
LABEL_42:
        v37 = *(_QWORD **)(v33 + 8);
        v40 = *v37;
        v38 = (char *)(v37 + 2);
        v39 = v40;
        goto LABEL_43;
      }
      v35 = 1;
      while (v34 != (llvm::Function *)-4096)
      {
        v36 = v32 + v35++;
        v32 = v36 & (v31 - 1);
        v34 = *(llvm::Function **)(v30 + 16 * v32);
        if (v34 == this)
        {
          v33 = v30 + 16 * v32;
          goto LABEL_42;
        }
      }
    }
    v33 = v30 + 16 * v31;
    goto LABEL_42;
  }
  v39 = 0;
  v38 = &byte_1C871356D;
LABEL_43:
  LOWORD(v88) = 261;
  v84 = v38;
  v85 = v39;
  v41 = *((_QWORD *)this + 5);
  v42 = (char *)operator new(0x80uLL);
  *((_DWORD *)v42 + 7) = *((_DWORD *)v42 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v42 = 0;
  llvm::Function::Function((uint64_t *)v42 + 1, v26, v27, v28, (uint64_t)&v84, v41);
  if ((*((_WORD *)v42 + 13) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)(v42 + 8));
  v43 = (uint64_t ***)*((_QWORD *)v42 + 12);
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    v44 = (int32x2_t ****)*((_QWORD *)this + 11);
LABEL_47:
    v45 = v44;
    goto LABEL_48;
  }
  llvm::Function::BuildLazyArguments(this);
  v44 = (int32x2_t ****)*((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0)
    goto LABEL_47;
  llvm::Function::BuildLazyArguments(this);
  v45 = (int32x2_t ****)*((_QWORD *)this + 11);
LABEL_48:
  v46 = &v45[5 * *((_QWORD *)this + 12)];
  if (v44 != v46)
  {
    while (1)
    {
      v47 = *(unsigned int *)(a2 + 16);
      v48 = v44 >> 4;
      if (!(_DWORD)v47)
        goto LABEL_55;
      v49 = *(_QWORD *)a2;
      v50 = ((_DWORD)v47 - 1) & (v48 ^ (v44 >> 9));
      v51 = *(_QWORD *)a2 + (v50 << 6);
      v52 = *(int32x2_t *****)(v51 + 24);
      if (v44 != v52)
        break;
LABEL_54:
      if (v51 == v49 + (v47 << 6))
        goto LABEL_55;
      v80 = v43;
LABEL_88:
      v44 += 5;
      v43 = v80;
      if (v44 == v46)
        goto LABEL_94;
    }
    v53 = 1;
    while (v52 != (int32x2_t ****)-4096)
    {
      v54 = v50 + v53++;
      v50 = v54 & (v47 - 1);
      v51 = v49 + (v50 << 6);
      v52 = *(int32x2_t *****)(v51 + 24);
      if (v44 == v52)
        goto LABEL_54;
    }
LABEL_55:
    if ((*((_BYTE *)v44 + 23) & 0x10) == 0)
    {
      v64 = 0;
      v65 = &byte_1C871356D;
LABEL_63:
      LOWORD(v88) = 261;
      v84 = v65;
      v85 = v64;
      llvm::Value::setName(v43, (uint64_t)&v84);
      v85 = 2;
      v86 = 0;
      v87 = v44;
      if (v44 != (int32x2_t ****)-8192 && v44 != (int32x2_t ****)-4096 && v44)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v85);
      v84 = &unk_1E814DA10;
      v88 = a2;
      v67 = sub_1C52E2ED8(a2, &v84);
      v68 = v67;
      if (v87 != (int32x2_t ****)-8192 && v87 != (int32x2_t ****)-4096 && v87)
      {
        v69 = v85 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF8) = v86;
        if (v86)
        {
          *v86 = *v86 & 7 | v69;
        }
        else
        {
          v70 = v87;
          v71 = ***v87;
          v72 = (unint64_t)v71[303];
          if (v72 <= v69)
          {
            v73 = v71[305].u32[0];
            if (v72 + 16 * v73 > v69)
            {
              v74 = v73 - 1;
              LODWORD(v75) = v74 & ((v87 >> 4) ^ (v87 >> 9));
              v76 = (int32x2_t *****)(v72 + 16 * v75);
              v77 = *v76;
              if (v87 == *v76)
              {
LABEL_78:
                *v76 = (int32x2_t ****)-8192;
                v71[304] = vadd_s32(v71[304], (int32x2_t)0x1FFFFFFFFLL);
                v70 = v87;
              }
              else
              {
                v78 = 1;
                while (v77 != (int32x2_t ****)-4096)
                {
                  v79 = v75 + v78++;
                  v75 = v79 & v74;
                  v77 = *(int32x2_t *****)(v72 + 16 * v75);
                  if (v87 == v77)
                  {
                    v76 = (int32x2_t *****)(v72 + 16 * v75);
                    goto LABEL_78;
                  }
                }
              }
              *((_BYTE *)v70 + 17) &= ~1u;
            }
          }
        }
      }
      v80 = v43 + 5;
      v81 = (uint64_t ***)v67[7];
      if (v81 != v43)
      {
        if (v81 && v81 != (uint64_t ***)-8192 && v81 != (uint64_t ***)-4096)
          llvm::ValueHandleBase::RemoveFromUseList(v67 + 5);
        v68[7] = v43;
        if (v43 != (uint64_t ***)-8192 && v43 != (uint64_t ***)-4096 && v43)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v68 + 5));
      }
      goto LABEL_88;
    }
    v55 = ***v44;
    v56 = v55[19];
    v57 = v55[21].u32[0];
    if ((_DWORD)v57)
    {
      LODWORD(v58) = (v57 - 1) & (v48 ^ (v44 >> 9));
      v59 = (int32x2_t *****)(*(_QWORD *)&v56 + 16 * v58);
      v60 = *v59;
      if (*v59 == v44)
      {
LABEL_62:
        v63 = v59[1];
        v66 = (uint64_t)*v63;
        v65 = (char *)(v63 + 2);
        v64 = v66;
        goto LABEL_63;
      }
      v61 = 1;
      while (v60 != (int32x2_t ****)-4096)
      {
        v62 = v58 + v61++;
        v58 = v62 & (v57 - 1);
        v60 = *(int32x2_t *****)(*(_QWORD *)&v56 + 16 * v58);
        if (v60 == v44)
        {
          v59 = (int32x2_t *****)(*(_QWORD *)&v56 + 16 * v58);
          goto LABEL_62;
        }
      }
    }
    v59 = (int32x2_t *****)(*(_QWORD *)&v56 + 16 * v57);
    goto LABEL_62;
  }
LABEL_94:
  v84 = &v86;
  v85 = 0x800000000;
  llvm::CloneFunctionInto((uint64_t)(v42 + 8), this, a2, 0, (uint64_t)&v84, "", a3, 0, 0);
  if (v84 != &v86)
    free(v84);
  if (v10)
    operator delete(v10);
  return v42 + 8;
}

void llvm::CloneAndPruneIntoFromInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int32x2_t ****v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ***i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t *v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t j;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v39;
  int32x2_t ****v40;
  int32x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int32x2_t *****v46;
  int32x2_t ****v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t ***v52;
  uint64_t ***v53;
  unint64_t v54;
  uint64_t v55;
  int32x2_t *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  _QWORD *v65;
  llvm::LLVMContext *v66;
  llvm::LLVMContext *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int32x2_t ****v71;
  _QWORD *v73;
  llvm::Type *v74;
  unint64_t v75;
  int32x2_t ****v76;
  int32x2_t *v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int32x2_t *****v82;
  int32x2_t ****v83;
  int v84;
  int v85;
  uint64_t v86;
  _QWORD *v88;
  unint64_t v89;
  int32x2_t ****v90;
  int32x2_t *v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  int32x2_t *****v96;
  int32x2_t ****v97;
  int v98;
  int v99;
  unsigned int v100;
  _DWORD *v101;
  int v102;
  int v103;
  _DWORD *v104;
  uint64_t **v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t **v109;
  uint64_t *v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v116;
  unint64_t v118;
  uint64_t v119;
  int32x2_t *v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  _DWORD *v130;
  llvm::MDNode **v131;
  _QWORD *v132;
  uint64_t v133;
  llvm::LLVMContext *v134;
  llvm::LLVMContext *v135;
  int v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  BOOL v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  BOOL v148;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t v165;
  void *v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  _DWORD *v172;
  void **v173;
  void **v174;
  uint64_t v175;
  int v176;
  llvm::ValueAsMetadata *v177;
  uint64_t v178;
  uint64_t *v179;
  llvm::UndefValue *v180;
  uint64_t v181;
  llvm::UndefValue *v182;
  int32x2_t ****v183;
  _QWORD *v185;
  unint64_t v186;
  int32x2_t ****v187;
  int32x2_t *v188;
  unint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  int32x2_t *****v193;
  int32x2_t ****v194;
  int v195;
  int v196;
  llvm::UndefValue *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t *v202;
  uint64_t v203;
  int32x2_t *v204;
  unint64_t v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  unsigned int v215;
  BOOL v216;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  uint64_t *v224;
  unsigned int v225;
  BOOL v226;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  int32x2_t ****v232;
  _QWORD *v234;
  llvm::Type *v235;
  llvm::DSOLocalEquivalent **v236;
  unint64_t v238;
  int32x2_t ****v239;
  int32x2_t *v240;
  unint64_t v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  int32x2_t *****v245;
  int32x2_t ****v246;
  int v247;
  int v248;
  unsigned int k;
  uint64_t *v250;
  uint64_t **v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t **v254;
  uint64_t *v255;
  int v256;
  int v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  int32x2_t *v265;
  unint64_t v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  int v272;
  int v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v277;
  int v278;
  unint64_t v279;
  uint64_t *v280;
  int v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t *v287;
  llvm::UndefValue *v288;
  uint64_t m;
  _QWORD *v290;
  unint64_t v291;
  int32x2_t ****v292;
  int32x2_t *v293;
  unint64_t v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v297;
  int32x2_t *****v298;
  int32x2_t ****v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  unint64_t v305;
  unint64_t *v306;
  uint64_t v307;
  int32x2_t *v308;
  unint64_t v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  int v315;
  int v316;
  _QWORD *v317;
  unint64_t v318;
  int32x2_t ****v319;
  int32x2_t *v320;
  unint64_t v321;
  uint64_t v322;
  unsigned int v323;
  uint64_t v324;
  int32x2_t *****v325;
  int32x2_t ****v326;
  int v327;
  int v328;
  char *v329;
  char *v330;
  char *v331;
  char *v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  _QWORD *v336;
  char v337;
  _BYTE *v338;
  _BYTE *v339;
  _BYTE *v340;
  uint64_t v341;
  _BYTE *v342;
  int v343;
  int v344;
  int v345;
  int v346;
  char *v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t *v350;
  uint64_t v351;
  llvm::BasicBlock **v352;
  llvm::Type *v353;
  uint64_t v354;
  llvm::BasicBlock *v355;
  llvm::Value *v356;
  _QWORD *v357;
  uint64_t ***v358;
  unsigned int v359;
  uint64_t ***v360;
  BOOL v361;
  llvm::ValueAsMetadata *v362;
  uint64_t **v363;
  uint64_t **v364;
  _QWORD *v365;
  unint64_t v366;
  int32x2_t ****v367;
  int32x2_t *v368;
  unint64_t v369;
  uint64_t v370;
  unsigned int v371;
  uint64_t v372;
  int32x2_t *****v373;
  int32x2_t ****v374;
  int v375;
  int v376;
  uint64_t n;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  uint64_t v382;
  unint64_t v384;
  int32x2_t ****v385;
  int v388;
  uint64_t v389;
  int v390;
  int32x2_t ****v391;
  int v392;
  void *__p;
  char *v394;
  uint64_t v395;
  uint64_t ***v396[3];
  char v397;
  uint64_t v398;
  uint64_t v399;
  char v400;
  void *v401;
  uint64_t v402;
  _BYTE v403[128];
  void *v404[5];
  __int16 v405;
  void *v406;
  unint64_t v407;
  uint64_t v408;
  int32x2_t ****v409;
  _QWORD v410[16];
  uint64_t v411;
  int64x2_t v412;
  int64x2_t v413;
  int64x2_t v414;
  int64x2_t v415;
  void *v416;
  uint64_t v417;
  _BYTE v418[64];
  void *v419;
  uint64_t v420;
  _BYTE v421[128];
  _QWORD *v422;
  uint64_t v423;
  _QWORD v424[10];

  v424[8] = *MEMORY[0x1E0C80C00];
  v396[0] = (uint64_t ***)a1;
  v396[1] = (uint64_t ***)a2;
  v396[2] = (uint64_t ***)a4;
  v397 = a5;
  v398 = a7;
  v399 = a8;
  v11 = *(_QWORD *)(a1 + 112);
  if (v11)
    LODWORD(v11) = (*(unsigned __int8 *)(v11 + 19) >> 5) & 1;
  v400 = v11;
  if (a3)
  {
    v12 = *(int32x2_t *****)(a3 + 40);
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 80);
    v12 = (int32x2_t ****)(v13 - 24);
    if (v13)
      v14 = v13 - 24;
    else
      v14 = 0;
    v15 = *(_QWORD *)(v14 + 48);
    if (v15)
      a3 = v15 - 24;
    else
      a3 = 0;
  }
  v16 = a3 + 24;
  __p = 0;
  v394 = 0;
  v395 = 0;
  for (i = (uint64_t ***)v12; ; v16 = (uint64_t)i[6])
  {
    sub_1C5ED1D80(v396, i, v16, (llvm::BasicBlock ***)&__p);
    if (__p == v394)
      break;
    i = (uint64_t ***)*((_QWORD *)v394 - 1);
    v394 -= 8;
  }
  v385 = v12;
  v419 = v421;
  v420 = 0x1000000000;
  v18 = *(_QWORD *)(a2 + 80);
  if (v18 == a2 + 72)
    goto LABEL_349;
  v19 = (uint64_t *)(a1 + 72);
  v390 = a5 ^ 1;
  do
  {
    if (v18)
      v20 = (uint64_t *)(v18 - 24);
    else
      v20 = 0;
    v21 = *(uint64_t ***)a4;
    v22 = *(unsigned int *)(a4 + 16);
    if ((_DWORD)v22)
    {
      v23 = ((v20 >> 4) ^ (v20 >> 9)) & ((_DWORD)v22 - 1);
      v24 = &v21[8 * v23];
      v25 = v24[3];
      if (v20 == v25)
        goto LABEL_26;
      v26 = 1;
      while (v25 != (uint64_t *)-4096)
      {
        v27 = v23 + v26++;
        v23 = v27 & (v22 - 1);
        v24 = &v21[8 * v23];
        v25 = v24[3];
        if (v20 == v25)
          goto LABEL_26;
      }
    }
    v24 = &v21[8 * v22];
LABEL_26:
    v406 = (void *)6;
    if (v24 == &v21[8 * v22])
    {
      v28 = 0;
      v29 = 0;
      v407 = 0;
      v408 = 0;
    }
    else
    {
      v28 = 0;
      v29 = v24[7];
      v407 = 0;
      v408 = (uint64_t)v29;
      if (v29 != (uint64_t *)-8192)
      {
        v30 = v29 == (uint64_t *)-4096 || v29 == 0;
        if (!v30)
        {
          v31 = (unint64_t)v24[5] & 0xFFFFFFFFFFFFFFF8;
          v407 = *(_QWORD *)v31;
          *(_QWORD *)v31 = &v406;
          v406 = (void *)(v31 | 6);
          v28 = v407;
          if (v407)
            *(_QWORD *)v407 = *(_QWORD *)v407 & 7 | (unint64_t)&v407;
          v29 = (uint64_t *)v408;
        }
      }
    }
    if (v29 != (uint64_t *)-8192 && v29 != (uint64_t *)-4096 && v29 != 0)
    {
      v54 = (unint64_t)v406 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v406 & 0xFFFFFFFFFFFFFFF8) = v28;
      if (v407)
      {
        *(_QWORD *)v407 = *(_QWORD *)v407 & 7 | v54;
      }
      else
      {
        v55 = v408;
        v56 = ***(int32x2_t ****)v408;
        v57 = (unint64_t)v56[303];
        if (v57 <= v54)
        {
          v58 = v56[305].u32[0];
          if (v57 + 16 * v58 > v54)
          {
            v59 = v58 - 1;
            LODWORD(v60) = v59 & ((v408 >> 4) ^ (v408 >> 9));
            v61 = (uint64_t *)(v57 + 16 * v60);
            v62 = *v61;
            if (v408 == *v61)
            {
LABEL_89:
              *v61 = -8192;
              v56[304] = vadd_s32(v56[304], (int32x2_t)0x1FFFFFFFFLL);
              v55 = v408;
            }
            else
            {
              v63 = 1;
              while (v62 != -4096)
              {
                v64 = v60 + v63++;
                v60 = v64 & v59;
                v62 = *(_QWORD *)(v57 + 16 * v60);
                if (v408 == v62)
                {
                  v61 = (uint64_t *)(v57 + 16 * v60);
                  goto LABEL_89;
                }
              }
            }
            *(_BYTE *)(v55 + 17) &= ~1u;
          }
        }
      }
    }
    if (v29)
    {
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v19, v29);
      v33 = *v19;
      v29[3] = *v19;
      v29[4] = (uint64_t)v19;
      *(_QWORD *)(v33 + 8) = v29 + 3;
      *v19 = (uint64_t)(v29 + 3);
      if ((uint64_t *)v20[5] != v20 + 5)
      {
        for (j = v20[6]; ; j = *(_QWORD *)(v35 + 32))
        {
          v35 = j - 24;
          v36 = j ? j - 24 : 0;
          if (!j || *(_BYTE *)(v36 + 16) != 83)
            break;
          v407 = 2;
          v408 = 0;
          v409 = (int32x2_t ****)(j - 24);
          if (j != -8168 && j != -4072 && j != 24)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v407);
          v406 = &unk_1E814DA10;
          v410[0] = a4;
          v37 = sub_1C52E2ED8(a4, &v406);
          if (v409 != (int32x2_t ****)-8192 && v409 != (int32x2_t ****)-4096 && v409 != 0)
          {
            v39 = v407 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v407 & 0xFFFFFFFFFFFFFFF8) = v408;
            if (v408)
            {
              *(_QWORD *)v408 = *(_QWORD *)v408 & 7 | v39;
            }
            else
            {
              v40 = v409;
              v41 = ***v409;
              v42 = (unint64_t)v41[303];
              if (v42 <= v39)
              {
                v43 = v41[305].u32[0];
                if (v42 + 16 * v43 > v39)
                {
                  v44 = v43 - 1;
                  LODWORD(v45) = v44 & ((v409 >> 4) ^ (v409 >> 9));
                  v46 = (int32x2_t *****)(v42 + 16 * v45);
                  v47 = *v46;
                  if (v409 == *v46)
                  {
LABEL_67:
                    *v46 = (int32x2_t ****)-8192;
                    v41[304] = vadd_s32(v41[304], (int32x2_t)0x1FFFFFFFFLL);
                    v40 = v409;
                  }
                  else
                  {
                    v48 = 1;
                    while (v47 != (int32x2_t ****)-4096)
                    {
                      v49 = v45 + v48++;
                      v45 = v49 & v44;
                      v47 = *(int32x2_t *****)(v42 + 16 * v45);
                      if (v409 == v47)
                      {
                        v46 = (int32x2_t *****)(v42 + 16 * v45);
                        goto LABEL_67;
                      }
                    }
                  }
                  *((_BYTE *)v40 + 17) &= ~1u;
                }
              }
            }
          }
          if (*(_BYTE *)(v37[7] + 16) != 83)
            break;
          v50 = v420;
          if (v420 >= (unint64_t)HIDWORD(v420))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v419, (uint64_t)v421, v420 + 1, 8);
            v50 = v420;
          }
          *((_QWORD *)v419 + v50) = v35;
          LODWORD(v420) = v420 + 1;
        }
      }
      v51 = (uint64_t *)v29[5];
      if (v51 == v29 + 5)
      {
        v53 = 0;
      }
      else
      {
        if (v51)
          v52 = (uint64_t ***)(v51 - 3);
        else
          v52 = 0;
        if (*((unsigned __int8 *)v52 + 16) - 29 >= 0xB)
          v53 = 0;
        else
          v53 = v52;
      }
      v65 = (_QWORD *)operator new();
      *(_DWORD *)v65 = v390;
      v65[1] = 0;
      *((_DWORD *)v65 + 4) = 0;
      v65[5] = a4;
      v65[3] = v65 + 5;
      v65[6] = 0;
      v65[4] = 0x200000001;
      v65[9] = v65 + 11;
      v65[10] = 0x400000000;
      v65[23] = v65 + 25;
      v65[24] = 0x100000000;
      v65[27] = v65 + 29;
      v65[28] = 0x1000000000;
      v411 = (uint64_t)v65;
      v406 = v65;
      sub_1C5FD706C((uint64_t)v65, v53);
      sub_1C5FD3718((uint64_t *)&v406, v66);
      llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v411, v67);
    }
    v18 = *(_QWORD *)(v18 + 8);
  }
  while (v18 != a2 + 72);
  v388 = v420;
  if ((_DWORD)v420)
  {
    v68 = 0;
    while (1)
    {
      v69 = *((_QWORD *)v419 + v68);
      v70 = *(_DWORD *)(v69 + 20);
      v71 = *(int32x2_t *****)(v69 + 40);
      v407 = 2;
      v408 = 0;
      v409 = v71;
      v391 = v71;
      if (v71 != (int32x2_t ****)-8192 && v71 != (int32x2_t ****)-4096 && v71 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v407);
      v406 = &unk_1E814DA10;
      v410[0] = a4;
      v73 = sub_1C52E2ED8(a4, &v406);
      if (v409 != (int32x2_t ****)-8192 && v409 != (int32x2_t ****)-4096 && v409)
      {
        v75 = v407 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v407 & 0xFFFFFFFFFFFFFFF8) = v408;
        if (v408)
        {
          *(_QWORD *)v408 = *(_QWORD *)v408 & 7 | v75;
        }
        else
        {
          v76 = v409;
          v77 = ***v409;
          v78 = (unint64_t)v77[303];
          if (v78 <= v75)
          {
            v79 = v77[305].u32[0];
            if (v78 + 16 * v79 > v75)
            {
              v80 = v79 - 1;
              LODWORD(v81) = v80 & ((v409 >> 4) ^ (v409 >> 9));
              v82 = (int32x2_t *****)(v78 + 16 * v81);
              v83 = *v82;
              if (v409 == *v82)
              {
LABEL_115:
                *v82 = (int32x2_t ****)-8192;
                v77[304] = vadd_s32(v77[304], (int32x2_t)0x1FFFFFFFFLL);
                v76 = v409;
              }
              else
              {
                v84 = 1;
                while (v83 != (int32x2_t ****)-4096)
                {
                  v85 = v81 + v84++;
                  v81 = v85 & v80;
                  v83 = *(int32x2_t *****)(v78 + 16 * v81);
                  if (v409 == v83)
                  {
                    v82 = (int32x2_t *****)(v78 + 16 * v81);
                    goto LABEL_115;
                  }
                }
              }
              *((_BYTE *)v76 + 17) &= ~1u;
            }
          }
        }
      }
      v389 = v73[7];
      if ((_DWORD)v420 != (_DWORD)v68)
        break;
LABEL_192:
      v138 = *(_QWORD *)(v389 + 48);
      if (v138)
        v139 = v138 - 24;
      else
        v139 = 0;
      v140 = *(_QWORD *)(v389 + 8);
      if (v140)
      {
        while (1)
        {
          v141 = *(_QWORD *)(v140 + 24);
          v142 = *(unsigned __int8 *)(v141 + 16);
          v143 = v141 && v142 >= 0x1C;
          v144 = !v143 || v142 - 29 > 0xA;
          if (!v144)
            break;
          v140 = *(_QWORD *)(v140 + 8);
          if (!v140)
            goto LABEL_205;
        }
        v213 = 0;
LABEL_319:
        ++v213;
        while (1)
        {
          v140 = *(_QWORD *)(v140 + 8);
          if (!v140)
            break;
          v214 = *(_QWORD *)(v140 + 24);
          v215 = *(unsigned __int8 *)(v214 + 16);
          if (v214)
            v216 = v215 >= 0x1C;
          else
            v216 = 0;
          if (v216 && v215 - 29 < 0xB)
            goto LABEL_319;
        }
      }
      else
      {
LABEL_205:
        v213 = 0;
      }
      if (v213 != (*(_DWORD *)(v139 + 20) & 0x7FFFFFF))
      {
        v407 = 0;
        v408 = 0;
        v406 = &v407;
        v145 = *(_QWORD *)(v389 + 8);
        if (v145)
        {
          while (1)
          {
            v146 = *(_QWORD *)(v145 + 24);
            v147 = *(unsigned __int8 *)(v146 + 16);
            v148 = v146 && v147 >= 0x1C;
            if (v148 && v147 - 29 <= 0xA)
              break;
            v145 = *(_QWORD *)(v145 + 8);
            if (!v145)
              goto LABEL_217;
          }
          v218 = 0;
LABEL_329:
          v219 = *(_QWORD *)(v146 + 40);
          v220 = &v407;
          v221 = &v407;
          if (v218)
          {
            while (1)
            {
              while (1)
              {
                v221 = v218;
                v222 = v218[4];
                if (v222 <= v219)
                  break;
                v218 = (unint64_t *)*v218;
                v220 = v221;
                if (!*v221)
                  goto LABEL_336;
              }
              if (v222 >= v219)
                break;
              v218 = (unint64_t *)v218[1];
              if (!v218)
              {
                v220 = v221 + 1;
                goto LABEL_336;
              }
            }
          }
          else
          {
LABEL_336:
            v223 = v221;
            v221 = (unint64_t *)operator new(0x30uLL);
            v221[4] = v219;
            *((_DWORD *)v221 + 10) = 0;
            *v221 = 0;
            v221[1] = 0;
            v221[2] = (unint64_t)v223;
            *v220 = (unint64_t)v221;
            v224 = (uint64_t *)v221;
            if (*(_QWORD *)v406)
            {
              v406 = *(void **)v406;
              v224 = (uint64_t *)*v220;
            }
            sub_1C4768E74((uint64_t *)v407, v224);
            ++v408;
          }
          --*((_DWORD *)v221 + 10);
          while (1)
          {
            v145 = *(_QWORD *)(v145 + 8);
            if (!v145)
              break;
            v146 = *(_QWORD *)(v145 + 24);
            v225 = *(unsigned __int8 *)(v146 + 16);
            if (v146)
              v226 = v225 >= 0x1C;
            else
              v226 = 0;
            if (v226 && v225 - 29 <= 0xA)
            {
              v218 = (unint64_t *)v407;
              goto LABEL_329;
            }
          }
        }
LABEL_217:
        v150 = *(_DWORD *)(v139 + 20);
        v151 = v150 & 0x7FFFFFF;
        if ((v150 & 0x7FFFFFF) != 0)
        {
          v152 = 0;
          do
          {
            v153 = *(_DWORD *)(v139 + 20);
            if ((v153 & 0x40000000) != 0)
              v154 = *(_QWORD *)(v139 - 8);
            else
              v154 = v139 - 32 * (v153 & 0x7FFFFFF);
            v155 = *(_QWORD *)(v154 + 32 * *(unsigned int *)(v139 + 60) + 8 * v152);
            v156 = v407;
            v157 = &v407;
            v158 = &v407;
            if (v407)
            {
              while (1)
              {
                while (1)
                {
                  v158 = (unint64_t *)v156;
                  v159 = *(_QWORD *)(v156 + 32);
                  if (v159 <= v155)
                    break;
                  v156 = *v158;
                  v157 = v158;
                  if (!*v158)
                    goto LABEL_229;
                }
                if (v159 >= v155)
                  break;
                v156 = v158[1];
                if (!v156)
                {
                  v157 = v158 + 1;
                  goto LABEL_229;
                }
              }
            }
            else
            {
LABEL_229:
              v160 = v68;
              v161 = v158;
              v158 = (unint64_t *)operator new(0x30uLL);
              v158[4] = v155;
              *((_DWORD *)v158 + 10) = 0;
              *v158 = 0;
              v158[1] = 0;
              v158[2] = (unint64_t)v161;
              *v157 = (unint64_t)v158;
              v162 = (uint64_t *)v158;
              if (*(_QWORD *)v406)
              {
                v406 = *(void **)v406;
                v162 = (uint64_t *)*v157;
              }
              sub_1C4768E74((uint64_t *)v407, v162);
              ++v408;
              v68 = v160;
            }
            ++*((_DWORD *)v158 + 10);
            ++v152;
          }
          while (v152 != v151);
        }
        v163 = *(_QWORD *)(v389 + 48);
        v164 = (_DWORD *)(v163 - 24);
        if (v163)
          v165 = v163 - 24;
        else
          v165 = 0;
        if (v163 && *(_BYTE *)(v165 + 16) == 83)
        {
          do
          {
            v166 = v406;
            if (v406 != &v407)
            {
              do
              {
                v167 = *((_DWORD *)v166 + 10);
                if (v167)
                {
                  v168 = *((_QWORD *)v166 + 4);
                  do
                  {
                    v169 = v164[5];
                    v170 = v169 & 0x7FFFFFF;
                    if ((v169 & 0x7FFFFFF) != 0)
                    {
                      v171 = 0;
                      while (1)
                      {
                        v172 = &v164[-8 * v170];
                        if ((v169 & 0x40000000) != 0)
                          v172 = (_DWORD *)*((_QWORD *)v164 - 1);
                        if (*(_QWORD *)&v172[8 * v164[15] + 2 * v171] == v168)
                          break;
                        if (v170 == ++v171)
                          goto LABEL_247;
                      }
                    }
                    else
                    {
LABEL_247:
                      LODWORD(v171) = -1;
                    }
                    llvm::PHINode::removeIncomingValue((llvm::PHINode *)v164, v171, 0);
                    --v167;
                  }
                  while (v167);
                }
                v173 = (void **)*((_QWORD *)v166 + 1);
                if (v173)
                {
                  do
                  {
                    v174 = v173;
                    v173 = (void **)*v173;
                  }
                  while (v173);
                }
                else
                {
                  do
                  {
                    v174 = (void **)*((_QWORD *)v166 + 2);
                    v30 = *v174 == v166;
                    v166 = v174;
                  }
                  while (!v30);
                }
                v166 = v174;
              }
              while (v174 != (void **)&v407);
            }
            v163 = *(_QWORD *)(v163 + 8);
            v175 = v163 - 24;
            if (!v163)
              v175 = 0;
            v176 = *(unsigned __int8 *)(v175 + 16);
            if (v176 == 83)
              v164 = (_DWORD *)v175;
            else
              v164 = 0;
          }
          while (v163 && v176 == 83);
        }
        sub_1C6143384((_QWORD *)v407);
        v138 = *(_QWORD *)(v389 + 48);
      }
      v177 = (llvm::ValueAsMetadata *)(v138 - 24);
      if (v138)
        v178 = v138 - 24;
      else
        v178 = 0;
      if ((*(_DWORD *)(v178 + 20) & 0x7FFFFFF) == 0 && v138 && *(_BYTE *)(v178 + 16) == 83)
      {
        v179 = (uint64_t *)(v391 + 6);
        do
        {
          v180 = *(llvm::UndefValue **)(v138 - 24);
          v138 = *(_QWORD *)(v138 + 8);
          v181 = *v179;
          v182 = llvm::UndefValue::get(v180, v74);
          llvm::Value::doRAUW(v177, v182, (llvm::Value *)1);
          v183 = (int32x2_t ****)(v181 - 24);
          if (!v181)
            v183 = 0;
          v407 = 2;
          v408 = 0;
          v409 = v183;
          if (v183 != (int32x2_t ****)-8192 && v183 != (int32x2_t ****)-4096 && v183 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v407);
          v406 = &unk_1E814DA10;
          v410[0] = a4;
          v185 = sub_1C52E2ED8(a4, &v406);
          if (v409 != (int32x2_t ****)-8192 && v409 != (int32x2_t ****)-4096 && v409)
          {
            v186 = v407 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v407 & 0xFFFFFFFFFFFFFFF8) = v408;
            if (v408)
            {
              *(_QWORD *)v408 = *(_QWORD *)v408 & 7 | v186;
            }
            else
            {
              v187 = v409;
              v188 = ***v409;
              v189 = (unint64_t)v188[303];
              if (v189 <= v186)
              {
                v190 = v188[305].u32[0];
                if (v189 + 16 * v190 > v186)
                {
                  v191 = v190 - 1;
                  LODWORD(v192) = v191 & ((v409 >> 4) ^ (v409 >> 9));
                  v193 = (int32x2_t *****)(v189 + 16 * v192);
                  v194 = *v193;
                  if (v409 == *v193)
                  {
LABEL_291:
                    *v193 = (int32x2_t ****)-8192;
                    v188[304] = vadd_s32(v188[304], (int32x2_t)0x1FFFFFFFFLL);
                    v187 = v409;
                  }
                  else
                  {
                    v195 = 1;
                    while (v194 != (int32x2_t ****)-4096)
                    {
                      v196 = v192 + v195++;
                      v192 = v196 & v191;
                      v194 = *(int32x2_t *****)(v189 + 16 * v192);
                      if (v409 == v194)
                      {
                        v193 = (int32x2_t *****)(v189 + 16 * v192);
                        goto LABEL_291;
                      }
                    }
                  }
                  *((_BYTE *)v187 + 17) &= ~1u;
                }
              }
            }
          }
          v197 = (llvm::UndefValue *)v185[7];
          if (v197 != v182)
          {
            if (v197 && v197 != (llvm::UndefValue *)-8192 && v197 != (llvm::UndefValue *)-4096)
            {
              v201 = v185[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v201 = v185[6];
              v202 = (unint64_t *)v185[6];
              if (v202)
              {
                *v202 = *v202 & 7 | v201;
              }
              else
              {
                v203 = v185[7];
                v204 = ***(int32x2_t ****)v203;
                v205 = (unint64_t)v204[303];
                if (v205 <= v201)
                {
                  v206 = v204[305].u32[0];
                  if (v205 + 16 * v206 > v201)
                  {
                    v207 = v206 - 1;
                    LODWORD(v208) = v207 & ((v203 >> 4) ^ (v203 >> 9));
                    v209 = (uint64_t *)(v205 + 16 * v208);
                    v210 = *v209;
                    if (v203 == *v209)
                    {
LABEL_316:
                      *v209 = -8192;
                      v204[304] = vadd_s32(v204[304], (int32x2_t)0x1FFFFFFFFLL);
                      v203 = v185[7];
                    }
                    else
                    {
                      v211 = 1;
                      while (v210 != -4096)
                      {
                        v212 = v208 + v211++;
                        v208 = v212 & v207;
                        v210 = *(_QWORD *)(v205 + 16 * v208);
                        if (v203 == v210)
                        {
                          v209 = (uint64_t *)(v205 + 16 * v208);
                          goto LABEL_316;
                        }
                      }
                    }
                    *(_BYTE *)(v203 + 17) &= ~1u;
                  }
                }
              }
            }
            v185[7] = v182;
            if (v182 != (llvm::UndefValue *)-8192 && v182 != (llvm::UndefValue *)-4096 && v182)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v185 + 5));
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v177 + 5) + 40, (uint64_t ***)v177);
          v198 = *((_QWORD *)v177 + 3);
          v199 = (_QWORD *)*((_QWORD *)v177 + 4);
          *v199 = v198;
          *(_QWORD *)(v198 + 8) = v199;
          *((_QWORD *)v177 + 3) = 0;
          *((_QWORD *)v177 + 4) = 0;
          llvm::Value::deleteValue(v177);
          v177 = (llvm::ValueAsMetadata *)(v138 - 24);
          if (v138)
            v200 = v138 - 24;
          else
            v200 = 0;
          if (!v138)
            break;
          v179 = (uint64_t *)(v181 + 8);
        }
        while (*(_BYTE *)(v200 + 16) == 83);
      }
      if ((_DWORD)v68 == v388)
        goto LABEL_349;
    }
    v392 = v70 & 0x7FFFFFF;
    while (1)
    {
      v86 = *((_QWORD *)v419 + v68);
      if (*(int32x2_t *****)(v86 + 40) != v391)
        goto LABEL_192;
      v407 = 2;
      v408 = 0;
      v409 = (int32x2_t ****)v86;
      if (v86 != -8192 && v86 != -4096 && v86 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v407);
      v406 = &unk_1E814DA10;
      v410[0] = a4;
      v88 = sub_1C52E2ED8(a4, &v406);
      if (v409 != (int32x2_t ****)-8192 && v409 != (int32x2_t ****)-4096 && v409)
      {
        v89 = v407 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v407 & 0xFFFFFFFFFFFFFFF8) = v408;
        if (v408)
        {
          *(_QWORD *)v408 = *(_QWORD *)v408 & 7 | v89;
        }
        else
        {
          v90 = v409;
          v91 = ***v409;
          v92 = (unint64_t)v91[303];
          if (v92 <= v89)
          {
            v93 = v91[305].u32[0];
            if (v92 + 16 * v93 > v89)
            {
              v94 = v93 - 1;
              LODWORD(v95) = v94 & ((v409 >> 4) ^ (v409 >> 9));
              v96 = (int32x2_t *****)(v92 + 16 * v95);
              v97 = *v96;
              if (v409 == *v96)
              {
LABEL_138:
                *v96 = (int32x2_t ****)-8192;
                v91[304] = vadd_s32(v91[304], (int32x2_t)0x1FFFFFFFFLL);
                v90 = v409;
              }
              else
              {
                v98 = 1;
                while (v97 != (int32x2_t ****)-4096)
                {
                  v99 = v95 + v98++;
                  v95 = v99 & v94;
                  v97 = *(int32x2_t *****)(v92 + 16 * v95);
                  if (v409 == v97)
                  {
                    v96 = (int32x2_t *****)(v92 + 16 * v95);
                    goto LABEL_138;
                  }
                }
              }
              *((_BYTE *)v90 + 17) &= ~1u;
            }
          }
        }
      }
      if (v392)
        break;
LABEL_191:
      v68 = (v68 + 1);
      if ((_DWORD)v420 == (_DWORD)v68)
        goto LABEL_192;
    }
    v100 = 0;
    v101 = (_DWORD *)v88[7];
    v102 = v392;
    while (2)
    {
      v103 = v101[5];
      if ((v103 & 0x40000000) != 0)
        v104 = (_DWORD *)*((_QWORD *)v101 - 1);
      else
        v104 = &v101[-8 * (v103 & 0x7FFFFFF)];
      v105 = *(uint64_t ***)a4;
      v106 = *(unsigned int *)(a4 + 16);
      if ((_DWORD)v106)
      {
        v107 = *(uint64_t **)&v104[8 * v101[15] + 2 * v100];
        v108 = ((v107 >> 4) ^ (v107 >> 9)) & ((_DWORD)v106 - 1);
        v109 = &v105[8 * v108];
        v110 = v109[3];
        if (v107 != v110)
        {
          v111 = 1;
          while (v110 != (uint64_t *)-4096)
          {
            v112 = v108 + v111++;
            v108 = v112 & (v106 - 1);
            v109 = &v105[8 * v108];
            v110 = v109[3];
            if (v107 == v110)
              goto LABEL_153;
          }
          goto LABEL_152;
        }
      }
      else
      {
LABEL_152:
        v109 = &v105[8 * v106];
      }
LABEL_153:
      v406 = (void *)6;
      if (v109 == &v105[8 * v106])
      {
        v113 = 0;
        v114 = 0;
        v407 = 0;
        v408 = 0;
      }
      else
      {
        v113 = 0;
        v114 = (uint64_t)v109[7];
        v407 = 0;
        v408 = v114;
        if (v114 != -8192 && v114 != -4096 && v114 != 0)
        {
          v116 = (unint64_t)v109[5] & 0xFFFFFFFFFFFFFFF8;
          v407 = *(_QWORD *)v116;
          *(_QWORD *)v116 = &v406;
          v406 = (void *)(v116 | 6);
          v113 = v407;
          if (v407)
            *(_QWORD *)v407 = *(_QWORD *)v407 & 7 | (unint64_t)&v407;
          v114 = v408;
        }
      }
      if (v114 != -8192 && v114 != -4096 && v114 != 0)
      {
        v118 = (unint64_t)v406 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v406 & 0xFFFFFFFFFFFFFFF8) = v113;
        if (v407)
        {
          *(_QWORD *)v407 = *(_QWORD *)v407 & 7 | v118;
        }
        else
        {
          v119 = v408;
          v120 = ***(int32x2_t ****)v408;
          v121 = (unint64_t)v120[303];
          if (v121 <= v118)
          {
            v122 = v120[305].u32[0];
            if (v121 + 16 * v122 > v118)
            {
              v123 = v122 - 1;
              LODWORD(v124) = v123 & ((v408 >> 4) ^ (v408 >> 9));
              v125 = (uint64_t *)(v121 + 16 * v124);
              v126 = *v125;
              if (v408 == *v125)
              {
LABEL_181:
                *v125 = -8192;
                v120[304] = vadd_s32(v120[304], (int32x2_t)0x1FFFFFFFFLL);
                v119 = v408;
              }
              else
              {
                v127 = 1;
                while (v126 != -4096)
                {
                  v128 = v124 + v127++;
                  v124 = v128 & v123;
                  v126 = *(_QWORD *)(v121 + 16 * v124);
                  if (v408 == v126)
                  {
                    v125 = (uint64_t *)(v121 + 16 * v124);
                    goto LABEL_181;
                  }
                }
              }
              *(_BYTE *)(v119 + 17) &= ~1u;
            }
          }
        }
      }
      if (v114)
      {
        v129 = v101[5];
        if ((v129 & 0x40000000) != 0)
          v130 = (_DWORD *)*((_QWORD *)v101 - 1);
        else
          v130 = &v101[-8 * (v129 & 0x7FFFFFF)];
        v131 = *(llvm::MDNode ***)&v130[8 * v100];
        v132 = (_QWORD *)operator new();
        *(_DWORD *)v132 = v390;
        v132[1] = 0;
        *((_DWORD *)v132 + 4) = 0;
        v132[5] = a4;
        v132[3] = v132 + 5;
        v132[6] = 0;
        v132[4] = 0x200000001;
        v132[9] = v132 + 11;
        v132[10] = 0x400000000;
        v132[23] = v132 + 25;
        v132[24] = 0x100000000;
        v132[27] = v132 + 29;
        v132[28] = 0x1000000000;
        v411 = (uint64_t)v132;
        v406 = v132;
        v133 = sub_1C5FD3BE0((uint64_t)v132, v131);
        sub_1C5FD3718((uint64_t *)&v406, v134);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v411, v135);
        sub_1C6125834((uint64_t)v101, v100, v133);
        v136 = v101[5];
        if ((v136 & 0x40000000) != 0)
          v137 = (_DWORD *)*((_QWORD *)v101 - 1);
        else
          v137 = &v101[-8 * (v136 & 0x7FFFFFF)];
        *(_QWORD *)&v137[8 * v101[15] + 2 * v100] = v114;
      }
      else
      {
        llvm::PHINode::removeIncomingValue((llvm::PHINode *)v101, v100--, 0);
        --v102;
      }
      if (++v100 == v102)
        goto LABEL_191;
      continue;
    }
  }
LABEL_349:
  v411 = 1;
  v228 = *(_QWORD *)(a1 + 40);
  v412 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v413 = v412;
  v414 = v412;
  v415 = v412;
  v416 = v418;
  v417 = 0x800000000;
  v229 = v420;
  if ((_DWORD)v420)
  {
    v230 = 0;
    v231 = (void *)(v228 + 272);
    do
    {
      v232 = (int32x2_t ****)*((_QWORD *)v419 + v230);
      v407 = 2;
      v408 = 0;
      v409 = v232;
      if (v232 != (int32x2_t ****)-8192 && v232 != (int32x2_t ****)-4096 && v232 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v407);
      v406 = &unk_1E814DA10;
      v410[0] = a4;
      v234 = sub_1C52E2ED8(a4, &v406);
      if (v409 != (int32x2_t ****)-8192 && v409 != (int32x2_t ****)-4096 && v409 != 0)
      {
        v238 = v407 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v407 & 0xFFFFFFFFFFFFFFF8) = v408;
        if (v408)
        {
          *(_QWORD *)v408 = *(_QWORD *)v408 & 7 | v238;
        }
        else
        {
          v239 = v409;
          v240 = ***v409;
          v241 = (unint64_t)v240[303];
          if (v241 <= v238)
          {
            v242 = v240[305].u32[0];
            if (v241 + 16 * v242 > v238)
            {
              v243 = v242 - 1;
              LODWORD(v244) = v243 & ((v409 >> 4) ^ (v409 >> 9));
              v245 = (int32x2_t *****)(v241 + 16 * v244);
              v246 = *v245;
              if (v409 == *v245)
              {
LABEL_370:
                *v245 = (int32x2_t ****)-8192;
                v240[304] = vadd_s32(v240[304], (int32x2_t)0x1FFFFFFFFLL);
                v239 = v409;
              }
              else
              {
                v247 = 1;
                while (v246 != (int32x2_t ****)-4096)
                {
                  v248 = v244 + v247++;
                  v244 = v248 & v243;
                  v246 = *(int32x2_t *****)(v241 + 16 * v244);
                  if (v409 == v246)
                  {
                    v245 = (int32x2_t *****)(v241 + 16 * v244);
                    goto LABEL_370;
                  }
                }
              }
              *((_BYTE *)v239 + 17) &= ~1u;
            }
          }
        }
      }
      if (*(_BYTE *)(v234[7] + 16) == 83)
      {
        v406 = (void *)*((_QWORD *)v419 + v230);
        sub_1C5ED4A7C((uint64_t)&v411, (uint64_t *)&v406);
      }
      ++v230;
    }
    while (v230 != v229);
    if ((_DWORD)v417)
    {
      for (k = 0; (_DWORD)v417 != k; ++k)
      {
        v250 = (uint64_t *)*((_QWORD *)v416 + k);
        v251 = *(uint64_t ***)a4;
        v252 = *(unsigned int *)(a4 + 16);
        if ((_DWORD)v252)
        {
          v253 = ((_DWORD)v252 - 1) & ((v250 >> 4) ^ (v250 >> 9));
          v254 = &v251[8 * v253];
          v255 = v254[3];
          if (v250 == v255)
            goto LABEL_385;
          v256 = 1;
          while (v255 != (uint64_t *)-4096)
          {
            v257 = v253 + v256++;
            v253 = v257 & (v252 - 1);
            v254 = &v251[8 * v253];
            v255 = v254[3];
            if (v250 == v255)
              goto LABEL_385;
          }
        }
        v254 = &v251[8 * v252];
LABEL_385:
        v406 = (void *)6;
        if (v254 == &v251[8 * v252])
        {
          v258 = 0;
          v259 = 0;
          v262 = 0;
          v407 = 0;
          v408 = 0;
        }
        else
        {
          v258 = 0;
          v259 = (uint64_t)v254[7];
          v407 = 0;
          v408 = v259;
          if (v259 != -8192 && v259 != -4096 && v259 != 0)
          {
            v261 = (unint64_t)v254[5] & 0xFFFFFFFFFFFFFFF8;
            v407 = *(_QWORD *)v261;
            *(_QWORD *)v261 = &v406;
            v406 = (void *)(v261 | 6);
            v258 = v407;
            if (v407)
              *(_QWORD *)v407 = *(_QWORD *)v407 & 7 | (unint64_t)&v407;
            v259 = v408;
          }
          if (v259)
          {
            if (*(unsigned __int8 *)(v259 + 16) <= 0x1Bu)
              v262 = 0;
            else
              v262 = v259;
          }
          else
          {
            v262 = 0;
          }
        }
        if (v259 != -8192 && v259 != -4096 && v259)
        {
          v263 = (unint64_t)v406 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)((unint64_t)v406 & 0xFFFFFFFFFFFFFFF8) = v258;
          if (v407)
          {
            *(_QWORD *)v407 = *(_QWORD *)v407 & 7 | v263;
            if (!v262)
              continue;
            goto LABEL_414;
          }
          v264 = v408;
          v265 = ***(int32x2_t ****)v408;
          v266 = (unint64_t)v265[303];
          if (v266 <= v263)
          {
            v267 = v265[305].u32[0];
            if (v266 + 16 * v267 > v263)
            {
              v268 = v267 - 1;
              LODWORD(v269) = v268 & ((v408 >> 4) ^ (v408 >> 9));
              v270 = (uint64_t *)(v266 + 16 * v269);
              v271 = *v270;
              if (v408 == *v270)
              {
LABEL_411:
                *v270 = -8192;
                v265[304] = vadd_s32(v265[304], (int32x2_t)0x1FFFFFFFFLL);
                v264 = v408;
              }
              else
              {
                v272 = 1;
                while (v271 != -4096)
                {
                  v273 = v269 + v272++;
                  v269 = v273 & v268;
                  v271 = *(_QWORD *)(v266 + 16 * v269);
                  if (v408 == v271)
                  {
                    v270 = (uint64_t *)(v266 + 16 * v269);
                    goto LABEL_411;
                  }
                }
              }
              *(_BYTE *)(v264 + 17) &= ~1u;
            }
          }
        }
        if (!v262)
          continue;
LABEL_414:
        v274 = *(unsigned __int8 *)(v262 + 16) - 33;
        v144 = v274 > 0x33;
        v275 = (1 << v274) & 0x8000000000041;
        if (!v144 && v275 != 0)
        {
          v277 = *(_QWORD *)(v262 - 32);
          if (v277)
          {
            if (!*(_BYTE *)(v277 + 16)
              && *(_QWORD *)(v277 + 24) == *(_QWORD *)(v262 + 72)
              && (*(_BYTE *)(v277 + 33) & 0x20) == 0)
            {
              continue;
            }
          }
        }
        v404[0] = v231;
        memset(&v404[1], 0, 32);
        v405 = 257;
        v278 = *(_DWORD *)(v262 + 20);
        if ((v278 & 0x40000000) != 0)
        {
          v280 = *(uint64_t **)(v262 - 8);
          v279 = v278 & 0x7FFFFFF;
        }
        else
        {
          v279 = v278 & 0x7FFFFFF;
          v280 = (uint64_t *)(v262 - 32 * v279);
        }
        v406 = &v408;
        v407 = 0x800000000;
        if (v279 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v406, (uint64_t)&v408, v279, 8);
          v281 = v407;
          v283 = (uint64_t *)v406;
          v282 = v407;
        }
        else
        {
          v281 = 0;
          if (!v279)
          {
            v287 = &v408;
            goto LABEL_431;
          }
          v282 = 0;
          v283 = &v408;
        }
        v284 = 32 * v279;
        v285 = &v283[v282];
        do
        {
          v286 = *v280;
          v280 += 4;
          *v285++ = v286;
          v284 -= 32;
        }
        while (v284);
        v287 = (uint64_t *)v406;
LABEL_431:
        LODWORD(v407) = v281 + v279;
        v288 = llvm::SimplifyInstructionWithOperands((llvm *)v262, (uint64_t)v287, (v281 + v279), (uint64_t)v404, v235, v236);
        if (v406 == &v408)
        {
          if (v288)
            goto LABEL_433;
        }
        else
        {
          free(v406);
          if (v288)
          {
LABEL_433:
            for (m = v250[1]; m; m = *(_QWORD *)(m + 8))
            {
              v406 = *(void **)(m + 24);
              sub_1C5ED4A7C((uint64_t)&v411, (uint64_t *)&v406);
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v262, v288, (llvm::Value *)1);
            if (*(_QWORD *)(v262 + 8) || (llvm::wouldInstructionBeTriviallyDead(v262, 0) & 1) == 0)
            {
              v407 = 2;
              v408 = 0;
              v409 = (int32x2_t ****)v250;
              if (v250 != (uint64_t *)-8192 && v250 != (uint64_t *)-4096 && v250)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v407);
              v406 = &unk_1E814DA10;
              v410[0] = a4;
              v290 = sub_1C52E2ED8(a4, &v406);
              if (v409 != (int32x2_t ****)-8192 && v409 != (int32x2_t ****)-4096 && v409)
              {
                v291 = v407 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v407 & 0xFFFFFFFFFFFFFFF8) = v408;
                if (v408)
                {
                  *(_QWORD *)v408 = *(_QWORD *)v408 & 7 | v291;
                }
                else
                {
                  v292 = v409;
                  v293 = ***v409;
                  v294 = (unint64_t)v293[303];
                  if (v294 <= v291)
                  {
                    v295 = v293[305].u32[0];
                    if (v294 + 16 * v295 > v291)
                    {
                      v296 = v295 - 1;
                      LODWORD(v297) = v296 & ((v409 >> 4) ^ (v409 >> 9));
                      v298 = (int32x2_t *****)(v294 + 16 * v297);
                      v299 = *v298;
                      if (v409 == *v298)
                      {
LABEL_451:
                        *v298 = (int32x2_t ****)-8192;
                        v293[304] = vadd_s32(v293[304], (int32x2_t)0x1FFFFFFFFLL);
                        v292 = v409;
                      }
                      else
                      {
                        v300 = 1;
                        while (v299 != (int32x2_t ****)-4096)
                        {
                          v301 = v297 + v300++;
                          v297 = v301 & v296;
                          v299 = *(int32x2_t *****)(v294 + 16 * v297);
                          if (v409 == v299)
                          {
                            v298 = (int32x2_t *****)(v294 + 16 * v297);
                            goto LABEL_451;
                          }
                        }
                      }
                      *((_BYTE *)v292 + 17) &= ~1u;
                    }
                  }
                }
              }
              v302 = v290[7];
              if (v302 != v262)
              {
                if (v302 && v302 != -8192 && v302 != -4096)
                {
                  v305 = v290[5] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v305 = v290[6];
                  v306 = (unint64_t *)v290[6];
                  if (v306)
                  {
                    *v306 = *v306 & 7 | v305;
                  }
                  else
                  {
                    v307 = v290[7];
                    v308 = ***(int32x2_t ****)v307;
                    v309 = (unint64_t)v308[303];
                    if (v309 <= v305)
                    {
                      v310 = v308[305].u32[0];
                      if (v309 + 16 * v310 > v305)
                      {
                        v311 = v310 - 1;
                        LODWORD(v312) = v311 & ((v307 >> 4) ^ (v307 >> 9));
                        v313 = (uint64_t *)(v309 + 16 * v312);
                        v314 = *v313;
                        if (v307 == *v313)
                        {
LABEL_476:
                          *v313 = -8192;
                          v308[304] = vadd_s32(v308[304], (int32x2_t)0x1FFFFFFFFLL);
                          v307 = v290[7];
                        }
                        else
                        {
                          v315 = 1;
                          while (v314 != -4096)
                          {
                            v316 = v312 + v315++;
                            v312 = v316 & v311;
                            v314 = *(_QWORD *)(v309 + 16 * v312);
                            if (v307 == v314)
                            {
                              v313 = (uint64_t *)(v309 + 16 * v312);
                              goto LABEL_476;
                            }
                          }
                        }
                        *(_BYTE *)(v307 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v290[7] = v262;
                if (v262 != -8192 && v262 != -4096)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v290 + 5));
              }
            }
            else
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v262 + 40) + 40, (uint64_t ***)v262);
              v303 = *(_QWORD *)(v262 + 24);
              v304 = *(_QWORD **)(v262 + 32);
              *v304 = v303;
              *(_QWORD *)(v303 + 8) = v304;
              *(_QWORD *)(v262 + 24) = 0;
              *(_QWORD *)(v262 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v262);
            }
          }
        }
      }
    }
  }
  v407 = 2;
  v408 = 0;
  v409 = v385;
  if (v385 != (int32x2_t ****)-8192 && v385 != (int32x2_t ****)-4096 && v385)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v407);
  v406 = &unk_1E814DA10;
  v410[0] = a4;
  v317 = sub_1C52E2ED8(a4, &v406);
  if (v409 != (int32x2_t ****)-8192 && v409 != (int32x2_t ****)-4096 && v409)
  {
    v318 = v407 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v407 & 0xFFFFFFFFFFFFFFF8) = v408;
    if (v408)
    {
      *(_QWORD *)v408 = *(_QWORD *)v408 & 7 | v318;
    }
    else
    {
      v319 = v409;
      v320 = ***v409;
      v321 = (unint64_t)v320[303];
      if (v321 <= v318)
      {
        v322 = v320[305].u32[0];
        if (v321 + 16 * v322 > v318)
        {
          v323 = v322 - 1;
          LODWORD(v324) = v323 & ((v409 >> 4) ^ (v409 >> 9));
          v325 = (int32x2_t *****)(v321 + 16 * v324);
          v326 = *v325;
          if (v409 == *v325)
          {
LABEL_497:
            *v325 = (int32x2_t ****)-8192;
            v320[304] = vadd_s32(v320[304], (int32x2_t)0x1FFFFFFFFLL);
            v319 = v409;
          }
          else
          {
            v327 = 1;
            while (v326 != (int32x2_t ****)-4096)
            {
              v328 = v324 + v327++;
              v324 = v328 & v323;
              v326 = *(int32x2_t *****)(v321 + 16 * v324);
              if (v409 == v326)
              {
                v325 = (int32x2_t *****)(v321 + 16 * v324);
                goto LABEL_497;
              }
            }
          }
          *((_BYTE *)v319 + 17) &= ~1u;
        }
      }
    }
  }
  v329 = (char *)v317[7];
  v330 = v329 + 24;
  v331 = (char *)(a1 + 72);
  if (v329 + 24 != (char *)(a1 + 72))
  {
    v332 = v329 + 24;
    do
    {
      if (v332)
        v333 = (uint64_t)(v332 - 24);
      else
        v333 = 0;
      llvm::ConstantFoldTerminator(v333, 0, 0, 0);
      v332 = (char *)*((_QWORD *)v332 + 1);
    }
    while (v332 != v331);
  }
  v406 = v410;
  v407 = (unint64_t)v410;
  v408 = 16;
  LODWORD(v409) = 0;
  v404[0] = &v404[2];
  HIDWORD(v404[1]) = 16;
  v404[2] = v329;
  v334 = 1;
  do
  {
    v335 = *((_QWORD *)v404[0] + v334 - 1);
    LODWORD(v404[1]) = v334 - 1;
    v336 = sub_1C4774094((llvm::SmallPtrSetImplBase *)&v406, v335);
    if (v337)
    {
      v340 = *(_BYTE **)(v335 + 40);
      v339 = (_BYTE *)(v335 + 40);
      v338 = v340;
      if (v340 == v339)
      {
LABEL_522:
        v341 = 0;
        v342 = 0;
        v346 = 0;
      }
      else
      {
        v341 = (uint64_t)(v338 - 24);
        if (v338)
          v342 = v338 - 24;
        else
          v342 = 0;
        v343 = v342[16];
        v344 = v343 - 29;
        if (v343 != 30)
        {
          v345 = 0;
          switch(v344)
          {
            case 0:
            case 5:
            case 6:
              goto LABEL_516;
            case 1:
              __break(1u);
              goto LABEL_623;
            case 2:
              v345 = (*((_DWORD *)v342 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_516;
            case 3:
            case 9:
              v345 = (*((_DWORD *)v342 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_516;
            case 4:
              v345 = 2;
              goto LABEL_516;
            case 7:
              v345 = *((_WORD *)v342 + 9) & 1;
              goto LABEL_516;
            case 8:
              v345 = 1;
              goto LABEL_516;
            case 10:
              v345 = *((_DWORD *)v342 + 20) + 1;
              goto LABEL_516;
            default:
              goto LABEL_522;
          }
        }
        if ((*((_DWORD *)v342 + 5) & 0x7FFFFFF) == 3)
          v345 = 2;
        else
          v345 = 1;
LABEL_516:
        v346 = v345;
      }
      sub_1C4DFBE40((unsigned int *)v404, (uint64_t)v404[0] + 8 * LODWORD(v404[1]), (llvm::Instruction *)v342, 0, v341, v346);
    }
    v334 = v404[1];
  }
  while (LODWORD(v404[1]));
  v339 = v403;
  v401 = v403;
  v402 = 0x1000000000;
  if (v330 == v331)
  {
    v353 = 0;
    v352 = (llvm::BasicBlock **)v403;
  }
  else
  {
    v347 = v330;
    do
    {
      if (v347)
        v348 = (uint64_t)(v347 - 24);
      else
        v348 = 0;
      v349 = sub_1C477672C((uint64_t)&v406, v348);
      if ((void *)v407 == v406)
        v350 = (uint64_t *)((char *)&v408 + 4);
      else
        v350 = &v408;
      if (v349 == (_QWORD *)(v407 + 8 * *(unsigned int *)v350))
      {
        v351 = v402;
        if (v402 >= (unint64_t)HIDWORD(v402))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v401, (uint64_t)v403, v402 + 1, 8);
          v351 = v402;
        }
        *((_QWORD *)v401 + v351) = v348;
        LODWORD(v402) = v402 + 1;
      }
      v347 = (char *)*((_QWORD *)v347 + 1);
    }
    while (v347 != v331);
    v352 = (llvm::BasicBlock **)v401;
    v353 = (llvm::Type *)v402;
  }
  v422 = v424;
  v423 = 0x400000000;
  llvm::detachDeadBlocks(v352, v353, 0, 0);
  if (v353)
  {
    v354 = 8 * (_QWORD)v353;
    do
    {
      v355 = *v352++;
      llvm::BasicBlock::eraseFromParent(v355);
      v354 -= 8;
    }
    while (v354);
  }
  v336 = v422;
  if (v422 != v424)
LABEL_623:
    free(v336);
  if (v401 != v339)
    free(v401);
  if (v404[0] != &v404[2])
    free(v404[0]);
  if ((void *)v407 != v406)
    free((void *)v407);
  while (v330 != v331)
  {
    if (v330)
      v356 = (llvm::Value *)(v330 - 24);
    else
      v356 = 0;
    v357 = (_QWORD *)*((_QWORD *)v356 + 5);
    if (v357 != (_QWORD *)((char *)v356 + 40)
      && (v357 ? (v358 = (uint64_t ***)(v357 - 3)) : (v358 = 0),
          (v359 = *((unsigned __int8 *)v358 + 16) - 40, v359 >= 0xFFFFFFF5) ? (v360 = v358) : (v360 = 0),
          v357
       && (*((_BYTE *)v360 + 16) == 30 ? (v361 = v359 >= 0xFFFFFFF5) : (v361 = 0),
           v361
        && (*((_DWORD *)v360 + 5) & 0x7FFFFFF) != 3
        && (v362 = (llvm::ValueAsMetadata *)*(v360 - 4), llvm::BasicBlock::getSinglePredecessor(v362)))))
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v360[5] + 5), v360);
      v363 = v360[3];
      v364 = v360[4];
      *v364 = (uint64_t *)v363;
      v363[1] = (uint64_t *)v364;
      v360[3] = 0;
      v360[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v360);
      llvm::Value::doRAUW(v362, v356, (llvm::Value *)1);
      sub_1C5EBBDF4((_QWORD *)v356 + 5, (_QWORD *)v356 + 5, (_QWORD *)v362 + 5);
      llvm::BasicBlock::eraseFromParent(v362);
    }
    else
    {
      v330 = (char *)*((_QWORD *)v330 + 1);
    }
  }
  v407 = 2;
  v408 = 0;
  v409 = v385;
  if (v385 != (int32x2_t ****)-8192 && v385 != (int32x2_t ****)-4096 && v385)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v407);
  v406 = &unk_1E814DA10;
  v410[0] = a4;
  v365 = sub_1C52E2ED8(a4, &v406);
  if (v409 != (int32x2_t ****)-8192 && v409 != (int32x2_t ****)-4096 && v409)
  {
    v366 = v407 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v407 & 0xFFFFFFFFFFFFFFF8) = v408;
    if (v408)
    {
      *(_QWORD *)v408 = *(_QWORD *)v408 & 7 | v366;
    }
    else
    {
      v367 = v409;
      v368 = ***v409;
      v369 = (unint64_t)v368[303];
      if (v369 <= v366)
      {
        v370 = v368[305].u32[0];
        if (v369 + 16 * v370 > v366)
        {
          v371 = v370 - 1;
          LODWORD(v372) = v371 & ((v409 >> 4) ^ (v409 >> 9));
          v373 = (int32x2_t *****)(v369 + 16 * v372);
          v374 = *v373;
          if (v409 == *v373)
          {
LABEL_589:
            *v373 = (int32x2_t ****)-8192;
            v368[304] = vadd_s32(v368[304], (int32x2_t)0x1FFFFFFFFLL);
            v367 = v409;
          }
          else
          {
            v375 = 1;
            while (v374 != (int32x2_t ****)-4096)
            {
              v376 = v372 + v375++;
              v372 = v376 & v371;
              v374 = *(int32x2_t *****)(v369 + 16 * v372);
              if (v409 == v374)
              {
                v373 = (int32x2_t *****)(v369 + 16 * v372);
                goto LABEL_589;
              }
            }
          }
          *((_BYTE *)v367 + 17) &= ~1u;
        }
      }
    }
  }
  for (n = v365[7] + 24; (char *)n != v331; n = *(_QWORD *)(n + 8))
  {
    if (n)
      v378 = n - 24;
    else
      v378 = 0;
    v379 = *(_QWORD *)(v378 + 40);
    if (v379 != v378 + 40)
    {
      v380 = v379 ? v379 - 24 : 0;
      v381 = *(unsigned __int8 *)(v380 + 16) - 40;
      v382 = v381 >= 0xFFFFFFF5 ? v380 : 0;
      if (v379)
      {
        if (*(_BYTE *)(v382 + 16) == 29 && v381 >= 0xFFFFFFF5)
        {
          v384 = *(unsigned int *)(a6 + 8);
          if (v384 >= *(unsigned int *)(a6 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v384 + 1, 8);
            v384 = *(unsigned int *)(a6 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a6 + 8 * v384) = v382;
          ++*(_DWORD *)(a6 + 8);
        }
      }
    }
  }
  if (v416 != v418)
    free(v416);
  if ((v411 & 1) == 0)
    MEMORY[0x1CAA32FB4](v412.i64[0], 8);
  if (v419 != v421)
    free(v419);
  if (__p)
    operator delete(__p);
}

void sub_1C5ED1D80(uint64_t ****a1, uint64_t ***a2, uint64_t a3, llvm::BasicBlock ***a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v12;
  int32x2_t ****v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t *****v19;
  int32x2_t ****v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  llvm::BasicBlock *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ****v32;
  uint64_t ***v33;
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t ***v38;
  _QWORD *v39;
  llvm::Instruction *v40;
  int ConstrainedIntrinsicID;
  int v42;
  int v43;
  unsigned int v44;
  _DWORD *v45;
  int v46;
  _QWORD ***v47;
  uint64_t **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t Declaration;
  int v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  _QWORD ***v60;
  _QWORD **v61;
  unsigned __int8 *PredicateName;
  size_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::Instruction **v81;
  llvm::Instruction *v82;
  int v83;
  int v84;
  llvm::Instruction *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t **v95;
  uint64_t v96;
  uint64_t ***v98;
  _BOOL4 v99;
  _QWORD *v100;
  llvm::LLVMContext *v101;
  llvm::LLVMContext *v102;
  llvm::Type *v103;
  llvm::DSOLocalEquivalent **v104;
  int v105;
  unint64_t v106;
  uint64_t *v107;
  int v108;
  uint64_t v109;
  uint64_t **v110;
  uint64_t v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t **v114;
  llvm::UndefValue *v115;
  uint64_t ***v116;
  uint64_t **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t **v120;
  llvm::UndefValue *v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t *v125;
  unint64_t v127;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  int32x2_t ****v133;
  int32x2_t *v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  int32x2_t *****v139;
  int32x2_t ****v140;
  int v141;
  int v142;
  unint64_t v143;
  uint64_t *v144;
  int32x2_t *v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t **v150;
  uint64_t *v151;
  int v152;
  int v153;
  llvm::UndefValue *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  llvm::Instruction **v161;
  llvm::Instruction *v162;
  int v163;
  int v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t ***v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  int32x2_t ****v171;
  int32x2_t *v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  int32x2_t *****v177;
  int32x2_t ****v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t *v182;
  BOOL v183;
  BOOL v184;
  uint64_t ***v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t **v188;
  int v189;
  int v190;
  unsigned int v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t *v194;
  int v195;
  BOOL v196;
  unsigned int v197;
  uint64_t *v198;
  unsigned int v199;
  int v200;
  uint64_t v201;
  llvm::ValueSymbolTable *v202;
  unint64_t v203;
  unint64_t *v204;
  uint64_t v205;
  int32x2_t *v206;
  unint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  int v213;
  int v214;
  unint64_t v215;
  unint64_t *v216;
  uint64_t v217;
  int32x2_t *v218;
  unint64_t v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  int v225;
  int v226;
  uint64_t *v227;
  unint64_t *v228;
  uint64_t *v229;
  unint64_t v230;
  unint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t *v235;
  int32x2_t *v236;
  unint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t **v241;
  uint64_t *v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  BOOL v251;
  int v252;
  _QWORD *v254;
  llvm::Instruction *v255;
  BOOL v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t *v262;
  BOOL v263;
  uint64_t ***v264;
  uint64_t **v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t **v268;
  uint64_t *v269;
  int v270;
  int v271;
  char v272;
  int v273;
  uint64_t *v274;
  uint64_t v275;
  int v276;
  BOOL v277;
  uint64_t ***v278;
  uint64_t **v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t **v282;
  uint64_t *v283;
  int v284;
  int v285;
  llvm::BlockAddress *v286;
  llvm::BasicBlock *v287;
  llvm::BlockAddress *v288;
  uint64_t v289;
  _QWORD *v290;
  unint64_t v291;
  int32x2_t ****v292;
  int32x2_t *v293;
  unint64_t v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v297;
  int32x2_t *****v298;
  int32x2_t ****v299;
  int v300;
  int v301;
  unint64_t v302;
  unint64_t *v303;
  uint64_t v304;
  int32x2_t *v305;
  unint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  int v312;
  int v313;
  llvm::BlockAddress *v314;
  uint64_t v315;
  unint64_t v317;
  uint64_t v319;
  int v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  llvm::BasicBlock *v324;
  _DWORD *v325;
  char *v326;
  uint64_t v327;
  _QWORD *v328;
  unint64_t v329;
  int32x2_t ****v330;
  int32x2_t *v331;
  unint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  int32x2_t *****v336;
  int32x2_t ****v337;
  int v338;
  int v339;
  char *v340;
  unint64_t v341;
  llvm::BasicBlock **v342;
  llvm::BasicBlock **v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t v347;
  char *v348;
  unint64_t v349;
  uint64_t *v350;
  int32x2_t *v351;
  unint64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t **v356;
  uint64_t *v357;
  int v358;
  int v359;
  llvm::BasicBlock **v360;
  char *v361;
  llvm::BasicBlock **v362;
  llvm::BasicBlock *v363;
  uint64_t v364;
  unint64_t v366;
  _QWORD *v368;
  uint64_t v369;
  _DWORD *v370;
  char *v371;
  uint64_t v372;
  _QWORD *v373;
  unint64_t v374;
  int32x2_t ****v375;
  int32x2_t *v376;
  unint64_t v377;
  uint64_t v378;
  unsigned int v379;
  uint64_t v380;
  int32x2_t *****v381;
  int32x2_t ****v382;
  int v383;
  int v384;
  uint64_t ***v385;
  uint64_t ***v386;
  unsigned int v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  llvm::Instruction **v392;
  llvm::Instruction *v393;
  int v394;
  int v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t ***v398;
  uint64_t *v399;
  uint64_t v400;
  _QWORD *v401;
  unint64_t v402;
  int32x2_t ****v403;
  int32x2_t *v404;
  unint64_t v405;
  uint64_t v406;
  unsigned int v407;
  uint64_t v408;
  int32x2_t *****v409;
  int32x2_t ****v410;
  int v411;
  int v412;
  uint64_t ***v413;
  uint64_t ***v414;
  uint64_t v415;
  uint64_t **v416;
  uint64_t **v417;
  int v418;
  int v419;
  unsigned int v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t *v423;
  int v424;
  BOOL v425;
  unsigned int v426;
  uint64_t *v427;
  unsigned int v428;
  int v430;
  _QWORD *v431;
  llvm::Instruction *v432;
  _QWORD *v433;
  int v434;
  int v435;
  unsigned int v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  char *v441;
  llvm::BasicBlock **v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  char *v448;
  unint64_t v449;
  uint64_t v450;
  unint64_t v451;
  char *v452;
  char *v453;
  char *v454;
  uint64_t *v455;
  char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  char *v460;
  char *v461;
  uint64_t v462;
  char *v463;
  char *v464;
  uint64_t v465;
  char *v466;
  llvm::BasicBlock **v467;
  uint64_t v468;
  llvm::BasicBlock **v469;
  uint64_t v470;
  llvm::ValueSymbolTable *v471;
  unint64_t v472;
  unint64_t *v473;
  uint64_t v474;
  int32x2_t *v475;
  unint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t *v480;
  uint64_t v481;
  int v482;
  int v483;
  char *v484;
  unint64_t v485;
  llvm::BasicBlock **v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  char *v491;
  unint64_t v492;
  uint64_t *v493;
  int32x2_t *v494;
  unint64_t v495;
  uint64_t v496;
  unsigned int v497;
  uint64_t v498;
  uint64_t **v499;
  uint64_t *v500;
  int v501;
  int v502;
  llvm::BasicBlock *v503;
  _BYTE *v504;
  uint64_t *v505;
  uint64_t ***v506;
  BOOL v507;
  unint64_t v508;
  unint64_t *v509;
  uint64_t v510;
  int32x2_t *v511;
  unint64_t v512;
  uint64_t v513;
  unsigned int v514;
  uint64_t v515;
  uint64_t *v516;
  uint64_t v517;
  int v518;
  int v519;
  unint64_t v520;
  unint64_t *v521;
  uint64_t v522;
  int32x2_t *v523;
  unint64_t v524;
  uint64_t v525;
  unsigned int v526;
  uint64_t v527;
  uint64_t *v528;
  uint64_t v529;
  int v530;
  int v531;
  unint64_t v532;
  unint64_t *v533;
  uint64_t v534;
  int32x2_t *v535;
  unint64_t v536;
  uint64_t v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t *v540;
  uint64_t v541;
  int v542;
  int v543;
  uint64_t *v544;
  unint64_t *v545;
  uint64_t *v546;
  unint64_t v547;
  unint64_t *v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t *v551;
  int32x2_t *v552;
  unint64_t v553;
  uint64_t v554;
  unsigned int v555;
  uint64_t v556;
  uint64_t **v557;
  uint64_t *v558;
  int v559;
  int v560;
  _QWORD *v561;
  llvm::BasicBlock ***v562;
  uint64_t ***v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t **v566;
  uint64_t **v567;
  char v568;
  _QWORD v569[4];
  __int16 v570;
  char v571;
  void *v572[5];
  __int16 v573;
  void *v574;
  uint64_t v575;
  uint64_t *v576;
  int32x2_t ****v577;
  uint64_t v578;
  uint64_t *v579;
  uint64_t v580;
  _QWORD v581[4];

  v581[2] = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t)a1[2];
  v575 = 2;
  v576 = 0;
  v577 = (int32x2_t ****)a2;
  if (a2 != (uint64_t ***)-8192 && a2 != (uint64_t ***)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v575);
  v574 = &unk_1E814DA10;
  v578 = v8;
  v9 = sub_1C52E2ED8(v8, &v574);
  v10 = v9;
  if (v577 != (int32x2_t ****)-8192 && v577 != (int32x2_t ****)-4096 && v577 != 0)
  {
    v12 = v575 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v575 & 0xFFFFFFFFFFFFFFF8) = v576;
    if (v576)
    {
      *v576 = *v576 & 7 | v12;
    }
    else
    {
      v13 = v577;
      v14 = ***v577;
      v15 = (unint64_t)v14[303];
      if (v15 <= v12)
      {
        v16 = v14[305].u32[0];
        if (v15 + 16 * v16 > v12)
        {
          v17 = v16 - 1;
          LODWORD(v18) = v17 & ((v577 >> 4) ^ (v577 >> 9));
          v19 = (int32x2_t *****)(v15 + 16 * v18);
          v20 = *v19;
          if (v577 == *v19)
          {
LABEL_18:
            *v19 = (int32x2_t ****)-8192;
            v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
            v13 = v577;
          }
          else
          {
            v21 = 1;
            while (v20 != (int32x2_t ****)-4096)
            {
              v22 = v18 + v21++;
              v18 = v22 & v17;
              v20 = *(int32x2_t *****)(v15 + 16 * v18);
              if (v577 == v20)
              {
                v19 = (int32x2_t *****)(v15 + 16 * v18);
                goto LABEL_18;
              }
            }
          }
          *((_BYTE *)v13 + 17) &= ~1u;
        }
      }
    }
  }
  if (!v9[7])
  {
    v23 = **a2;
    LOWORD(v578) = 257;
    v24 = operator new();
    *(_QWORD *)v24 = *v23 + 1600;
    *(_QWORD *)(v24 + 8) = 0;
    v25 = *(_DWORD *)(v24 + 20) & 0xC0000000;
    *(_DWORD *)(v24 + 16) = 22;
    *(_DWORD *)(v24 + 20) = v25;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = v24 + 40;
    *(_QWORD *)(v24 + 48) = v24 + 40;
    v566 = (uint64_t **)(v24 + 40);
    *(_QWORD *)(v24 + 56) = 0;
    llvm::Value::setName((uint64_t ***)v24, (uint64_t)&v574);
    v27 = v10[7];
    if (v27 != v24)
    {
      if (v27 && v27 != -8192 && v27 != -4096)
      {
        v302 = v10[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v302 = v10[6];
        v303 = (unint64_t *)v10[6];
        if (v303)
        {
          *v303 = *v303 & 7 | v302;
        }
        else
        {
          v304 = v10[7];
          v305 = ***(int32x2_t ****)v304;
          v306 = (unint64_t)v305[303];
          if (v306 <= v302)
          {
            v307 = v305[305].u32[0];
            if (v306 + 16 * v307 > v302)
            {
              v308 = v307 - 1;
              LODWORD(v309) = v308 & ((v304 >> 4) ^ (v304 >> 9));
              v310 = (uint64_t *)(v306 + 16 * v309);
              v311 = *v310;
              if (v304 == *v310)
              {
LABEL_407:
                *v310 = -8192;
                v305[304] = vadd_s32(v305[304], (int32x2_t)0x1FFFFFFFFLL);
                v304 = v10[7];
              }
              else
              {
                v312 = 1;
                while (v311 != -4096)
                {
                  v313 = v309 + v312++;
                  v309 = v313 & v308;
                  v311 = *(_QWORD *)(v306 + 16 * v309);
                  if (v304 == v311)
                  {
                    v310 = (uint64_t *)(v306 + 16 * v309);
                    goto LABEL_407;
                  }
                }
              }
              *(_BYTE *)(v304 + 17) &= ~1u;
            }
          }
        }
      }
      v10[7] = v24;
      if (v24 != -8192 && v24 != -4096 && v24)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v10 + 5));
    }
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
LABEL_37:
      if ((*((_WORD *)a2 + 9) & 0x7FFF) != 0)
      {
        v286 = llvm::BlockAddress::get((llvm::BlockAddress *)a1[1], (llvm::Function *)a2, v26);
        v288 = llvm::BlockAddress::get((llvm::BlockAddress *)*a1, (llvm::Function *)v24, v287);
        v289 = (uint64_t)a1[2];
        v575 = 2;
        v576 = 0;
        v577 = (int32x2_t ****)v286;
        if (v286 != (llvm::BlockAddress *)-8192 && v286 != (llvm::BlockAddress *)-4096 && v286)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v575);
        v574 = &unk_1E814DA10;
        v578 = v289;
        v290 = sub_1C52E2ED8(v289, &v574);
        if (v577 != (int32x2_t ****)-8192 && v577 != (int32x2_t ****)-4096 && v577)
        {
          v291 = v575 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v575 & 0xFFFFFFFFFFFFFFF8) = v576;
          if (v576)
          {
            *v576 = *v576 & 7 | v291;
          }
          else
          {
            v292 = v577;
            v293 = ***v577;
            v294 = (unint64_t)v293[303];
            if (v294 <= v291)
            {
              v295 = v293[305].u32[0];
              if (v294 + 16 * v295 > v291)
              {
                v296 = v295 - 1;
                LODWORD(v297) = v296 & ((v577 >> 4) ^ (v577 >> 9));
                v298 = (int32x2_t *****)(v294 + 16 * v297);
                v299 = *v298;
                if (v577 == *v298)
                {
LABEL_395:
                  *v298 = (int32x2_t ****)-8192;
                  v293[304] = vadd_s32(v293[304], (int32x2_t)0x1FFFFFFFFLL);
                  v292 = v577;
                }
                else
                {
                  v300 = 1;
                  while (v299 != (int32x2_t ****)-4096)
                  {
                    v301 = v297 + v300++;
                    v297 = v301 & v296;
                    v299 = *(int32x2_t *****)(v294 + 16 * v297);
                    if (v577 == v299)
                    {
                      v298 = (int32x2_t *****)(v294 + 16 * v297);
                      goto LABEL_395;
                    }
                  }
                }
                *((_BYTE *)v292 + 17) &= ~1u;
              }
            }
          }
        }
        v314 = (llvm::BlockAddress *)v290[7];
        if (v314 != v288)
        {
          if (v314 && v314 != (llvm::BlockAddress *)-8192 && v314 != (llvm::BlockAddress *)-4096)
          {
            v532 = v290[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v532 = v290[6];
            v533 = (unint64_t *)v290[6];
            if (v533)
            {
              *v533 = *v533 & 7 | v532;
            }
            else
            {
              v534 = v290[7];
              v535 = ***(int32x2_t ****)v534;
              v536 = (unint64_t)v535[303];
              if (v536 <= v532)
              {
                v537 = v535[305].u32[0];
                if (v536 + 16 * v537 > v532)
                {
                  v538 = v537 - 1;
                  LODWORD(v539) = v538 & ((v534 >> 4) ^ (v534 >> 9));
                  v540 = (uint64_t *)(v536 + 16 * v539);
                  v541 = *v540;
                  if (v534 == *v540)
                  {
LABEL_732:
                    *v540 = -8192;
                    v535[304] = vadd_s32(v535[304], (int32x2_t)0x1FFFFFFFFLL);
                    v534 = v290[7];
                  }
                  else
                  {
                    v542 = 1;
                    while (v541 != -4096)
                    {
                      v543 = v539 + v542++;
                      v539 = v543 & v538;
                      v541 = *(_QWORD *)(v536 + 16 * v539);
                      if (v534 == v541)
                      {
                        v540 = (uint64_t *)(v536 + 16 * v539);
                        goto LABEL_732;
                      }
                    }
                  }
                  *(_BYTE *)(v534 + 17) &= ~1u;
                }
              }
            }
          }
          v290[7] = v288;
          if (v288 != (llvm::BlockAddress *)-8192 && v288 != (llvm::BlockAddress *)-4096 && v288)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v290 + 5));
        }
      }
      v39 = a2 + 5;
      v567 = a2[5];
      v562 = a4;
      v563 = a2;
      if (v567 != (uint64_t **)a3)
      {
        v561 = a2 + 5;
        v568 = 0;
        v565 = 0;
        v564 = v24;
        while (1)
        {
          if (a3)
            v40 = (llvm::Instruction *)(a3 - 24);
          else
            v40 = 0;
          if (!*((_BYTE *)a1 + 48) || (ConstrainedIntrinsicID = llvm::getConstrainedIntrinsicID((uint64_t)v40)) == 0)
          {
            llvm::Instruction::clone(v40);
            v51 = v50;
            goto LABEL_110;
          }
          v42 = ConstrainedIntrinsicID;
          v579 = v581;
          v580 = 0x200000000;
          v574 = &v576;
          v575 = 0x800000000;
          llvm::Intrinsic::getIntrinsicInfoTableEntries(ConstrainedIntrinsicID);
          v43 = v575;
          if ((_DWORD)v575)
          {
            v44 = 0;
            do
            {
              v45 = (char *)v574 + 12 * v44;
              if (*v45 == 18)
              {
                ++v44;
              }
              else if (*v45 == 14 && (~v45[1] & 7) != 0)
              {
                if (v44)
                {
                  v46 = *((_DWORD *)v40 + 5);
                  if ((v46 & 0x40000000) != 0)
                    v47 = (_QWORD ***)*((_QWORD *)v40 - 1);
                  else
                    v47 = (_QWORD ***)((char *)v40 - 32 * (v46 & 0x7FFFFFF));
                  v48 = (uint64_t **)*v47[4 * v44 - 4];
                  v49 = v580;
                  if (v580 >= (unint64_t)HIDWORD(v580))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v579, (uint64_t)v581, v580 + 1, 8);
                    v49 = v580;
                  }
                }
                else
                {
                  v48 = *(uint64_t ***)v40;
                  v49 = v580;
                  if (v580 >= (unint64_t)HIDWORD(v580))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v579, (uint64_t)v581, v580 + 1, 8);
                    v49 = v580;
                  }
                  v44 = 0;
                }
                v579[v49] = (uint64_t)v48;
                LODWORD(v580) = v580 + 1;
              }
              ++v44;
            }
            while (v44 != v43);
          }
          v52 = ***a1;
          Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)(*a1)[5], v42, v579, v580);
          v572[0] = &v572[2];
          v572[1] = (void *)0x400000000;
          v54 = *((unsigned __int8 *)v40 + 16);
          v55 = (*((_DWORD *)v40 + 5) & 0x7FFFFFF) - (v54 == 84);
          if (v55)
          {
            v56 = 0;
            v57 = 0;
            v58 = 32 * v55;
            do
            {
              v59 = *((_DWORD *)v40 + 5);
              if ((v59 & 0x40000000) != 0)
                v60 = (_QWORD ***)*((_QWORD *)v40 - 1);
              else
                v60 = (_QWORD ***)((char *)v40 - 32 * (v59 & 0x7FFFFFF));
              v61 = v60[v56 / 8];
              if (v57 >= HIDWORD(v572[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v572, (uint64_t)&v572[2], v57 + 1, 8);
                v57 = v572[1];
              }
              *((_QWORD *)v572[0] + v57) = v61;
              v57 = ++LODWORD(v572[1]);
              v56 += 32;
            }
            while (v58 != v56);
            v54 = *((unsigned __int8 *)v40 + 16);
          }
          if (a3 && v54 == 82)
          {
            PredicateName = (unsigned __int8 *)llvm::CmpInst::getPredicateName(*((_WORD *)v40 + 9) & 0x3F);
            v64 = (unsigned __int8 *)llvm::MDString::get(v52, PredicateName, v63);
            v65 = llvm::MetadataAsValue::get(v52, v64);
            v66 = LODWORD(v572[1]);
            if (LODWORD(v572[1]) >= (unint64_t)HIDWORD(v572[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v572, (uint64_t)&v572[2], LODWORD(v572[1]) + 1, 8);
              v66 = LODWORD(v572[1]);
            }
            *((_QWORD *)v572[0] + v66) = v65;
            ++LODWORD(v572[1]);
          }
          if (((1 << (v42 - 79)) & 0xB9E0F78E9ELL) != 0)
          {
            v67 = (unsigned __int8 *)llvm::MDString::get(v52, "round.tonearest", 0xFuLL);
            v68 = llvm::MetadataAsValue::get(v52, v67);
            v69 = LODWORD(v572[1]);
            if (LODWORD(v572[1]) >= (unint64_t)HIDWORD(v572[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v572, (uint64_t)&v572[2], LODWORD(v572[1]) + 1, 8);
              v69 = LODWORD(v572[1]);
            }
            *((_QWORD *)v572[0] + v69) = v68;
            ++LODWORD(v572[1]);
          }
          v70 = (unsigned __int8 *)llvm::MDString::get(v52, "fpexcept.ignore", 0xFuLL);
          v71 = llvm::MetadataAsValue::get(v52, v70);
          v72 = LODWORD(v572[1]);
          if (LODWORD(v572[1]) >= (unint64_t)HIDWORD(v572[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v572, (uint64_t)&v572[2], LODWORD(v572[1]) + 1, 8);
            v72 = LODWORD(v572[1]);
          }
          *((_QWORD *)v572[0] + v72) = v71;
          v73 = (int)v572[1];
          v74 = ++LODWORD(v572[1]);
          if (Declaration)
            v75 = *(_QWORD *)(Declaration + 24);
          else
            v75 = 0;
          v76 = (uint64_t *)v572[0];
          if ((*((_BYTE *)v40 + 23) & 0x10) == 0)
          {
            v86 = 0;
            v87 = &byte_1C871356D;
            goto LABEL_96;
          }
          v77 = ***(_QWORD ***)v40;
          v78 = *(_QWORD *)(v77 + 152);
          v79 = *(unsigned int *)(v77 + 168);
          if (!(_DWORD)v79)
            goto LABEL_94;
          LODWORD(v80) = (v79 - 1) & ((v40 >> 4) ^ (v40 >> 9));
          v81 = (llvm::Instruction **)(v78 + 16 * v80);
          v82 = *v81;
          if (*v81 != v40)
            break;
LABEL_95:
          v85 = v81[1];
          v88 = *(_QWORD *)v85;
          v87 = (char *)v85 + 16;
          v86 = v88;
LABEL_96:
          v570 = 773;
          v569[0] = v87;
          v569[1] = v86;
          v569[2] = ".strict";
          v89 = (v73 + 2);
          v90 = operator new(32 * v89 + 80);
          v51 = (uint64_t)&v90[4 * v89];
          v91 = *(_DWORD *)(v51 + 20) & 0x38000000 | v89 & 0x7FFFFFF;
          *(_DWORD *)(v51 + 20) = v91;
          if ((_DWORD)v89)
          {
            do
            {
              *v90 = 0;
              v90[1] = 0;
              v90[2] = 0;
              v90[3] = v51;
              v90 += 4;
            }
            while (v90 != (_QWORD *)v51);
            v91 = *(_DWORD *)(v51 + 20);
          }
          v92 = v89 & 0x7FFFFFF;
          *(_QWORD *)v51 = **(_QWORD **)(v75 + 16);
          *(_QWORD *)(v51 + 8) = 0;
          *(_BYTE *)(v51 + 16) = 84;
          *(_BYTE *)(v51 + 17) = 0;
          *(_WORD *)(v51 + 18) = 0;
          *(_DWORD *)(v51 + 20) = v91 & 0xC0000000 | v92;
          *(_OWORD *)(v51 + 24) = 0u;
          *(_OWORD *)(v51 + 40) = 0u;
          *(_DWORD *)(v51 + 56) = 0;
          *(_QWORD *)(v51 + 64) = 0;
          *(_QWORD *)(v51 + 72) = v75;
          sub_1C5382FD4((uint64_t)&v571, v76, &v76[v74], v51 - 32 * v92);
          v93 = (uint64_t *)(v51 - 32);
          if (*(_QWORD *)(v51 - 32))
          {
            **(_QWORD **)(v51 - 16) = *(_QWORD *)(v51 - 24);
            v233 = *(_QWORD *)(v51 - 24);
            if (v233)
              *(_QWORD *)(v233 + 16) = *(_QWORD *)(v51 - 16);
          }
          *v93 = Declaration;
          v24 = v564;
          if (Declaration)
          {
            v96 = *(_QWORD *)(Declaration + 8);
            v95 = (uint64_t **)(Declaration + 8);
            v94 = v96;
            *(_QWORD *)(v51 - 24) = v96;
            if (v96)
              *(_QWORD *)(v94 + 16) = v51 - 24;
            *(_QWORD *)(v51 - 16) = v95;
            *v95 = v93;
          }
          llvm::CallBase::populateBundleOperandInfos(v51, 0, 0, v74);
          llvm::Value::setName((uint64_t ***)v51, (uint64_t)v569);
          if (v572[0] != &v572[2])
            free(v572[0]);
          if (v574 != &v576)
            free(v574);
          if (v579 != v581)
            free(v579);
LABEL_110:
          if (*((_BYTE *)a1 + 48))
          {
            if (*(_BYTE *)(v51 + 16) == 84 && v51 != 0)
              *(_QWORD *)(v51 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v51 + 64), **(uint64_t ***)v51, -1, 61);
          }
          if (*(_BYTE *)(v51 + 16) == 83)
            goto LABEL_206;
          v98 = a1[2];
          v99 = *((_BYTE *)a1 + 24) == 0;
          v100 = (_QWORD *)operator new();
          *(_DWORD *)v100 = v99;
          v100[1] = 0;
          *((_DWORD *)v100 + 4) = 0;
          v100[5] = v98;
          v100[3] = v100 + 5;
          v100[6] = 0;
          v100[4] = 0x200000001;
          v100[9] = v100 + 11;
          v100[10] = 0x400000000;
          v100[23] = v100 + 25;
          v100[24] = 0x100000000;
          v100[27] = v100 + 29;
          v100[28] = 0x1000000000;
          v572[0] = v100;
          v574 = v100;
          sub_1C5FD706C((uint64_t)v100, (uint64_t ***)v51);
          sub_1C5FD3718((uint64_t *)&v574, v101);
          llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)v572, v102);
          v572[0] = v563[7][5] + 34;
          memset(&v572[1], 0, 32);
          v573 = 257;
          v105 = *(_DWORD *)(v51 + 20);
          if ((v105 & 0x40000000) != 0)
          {
            v107 = *(uint64_t **)(v51 - 8);
            v106 = v105 & 0x7FFFFFF;
          }
          else
          {
            v106 = v105 & 0x7FFFFFF;
            v107 = (uint64_t *)(v51 - 32 * v106);
          }
          v574 = &v576;
          v575 = 0x800000000;
          if (v106 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v574, (uint64_t)&v576, v106, 8);
            v108 = v575;
            v110 = (uint64_t **)v574;
            v109 = v575;
          }
          else
          {
            v108 = 0;
            if (!v106)
            {
              v114 = &v576;
              goto LABEL_126;
            }
            v109 = 0;
            v110 = &v576;
          }
          v111 = 32 * v106;
          v112 = &v110[v109];
          do
          {
            v113 = (uint64_t *)*v107;
            v107 += 4;
            *v112++ = v113;
            v111 -= 32;
          }
          while (v111);
          v114 = (uint64_t **)v574;
LABEL_126:
          LODWORD(v575) = v108 + v106;
          v115 = llvm::SimplifyInstructionWithOperands((llvm *)v51, (uint64_t)v114, (v108 + v106), (uint64_t)v572, v103, v104);
          v24 = v564;
          if (v574 == &v576)
          {
            if (!v115)
              goto LABEL_206;
          }
          else
          {
            free(v574);
            if (!v115)
              goto LABEL_206;
          }
          if (*a1 != a1[1])
          {
            v116 = a1[2];
            v117 = *v116;
            v118 = *((unsigned int *)v116 + 4);
            if (!(_DWORD)v118)
              goto LABEL_136;
            v119 = ((_DWORD)v118 - 1) & ((v115 >> 4) ^ (v115 >> 9));
            v120 = &v117[8 * v119];
            v121 = (llvm::UndefValue *)v120[3];
            if (v115 != v121)
            {
              v122 = 1;
              while (v121 != (llvm::UndefValue *)-4096)
              {
                v123 = v119 + v122++;
                v119 = v123 & (v118 - 1);
                v120 = &v117[8 * v119];
                v121 = (llvm::UndefValue *)v120[3];
                if (v115 == v121)
                  goto LABEL_137;
              }
LABEL_136:
              v120 = &v117[8 * v118];
            }
LABEL_137:
            v574 = (void *)6;
            if (v120 == &v117[8 * v118])
            {
              v124 = 0;
              v125 = 0;
              v575 = 0;
              v576 = 0;
            }
            else
            {
              v124 = 0;
              v125 = v120[7];
              v575 = 0;
              v576 = v125;
              if (v125 != (uint64_t *)-8192 && v125 != (uint64_t *)-4096 && v125 != 0)
              {
                v127 = (unint64_t)v120[5] & 0xFFFFFFFFFFFFFFF8;
                v575 = *(_QWORD *)v127;
                *(_QWORD *)v127 = &v574;
                v574 = (void *)(v127 | 6);
                v124 = v575;
                if (v575)
                  *(_QWORD *)v575 = *(_QWORD *)v575 & 7 | (unint64_t)&v575;
                v125 = v576;
              }
            }
            if (v125 != (uint64_t *)-8192 && v125 != (uint64_t *)-4096 && v125 != 0)
            {
              v143 = (unint64_t)v574 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)((unint64_t)v574 & 0xFFFFFFFFFFFFFFF8) = v124;
              if (v575)
              {
                *(_QWORD *)v575 = *(_QWORD *)v575 & 7 | v143;
              }
              else
              {
                v144 = v576;
                v145 = **(int32x2_t ***)*v576;
                v146 = (unint64_t)v145[303];
                if (v146 <= v143)
                {
                  v147 = v145[305].u32[0];
                  if (v146 + 16 * v147 > v143)
                  {
                    v148 = v147 - 1;
                    LODWORD(v149) = v148 & ((v576 >> 4) ^ (v576 >> 9));
                    v150 = (uint64_t **)(v146 + 16 * v149);
                    v151 = *v150;
                    if (v576 == *v150)
                    {
LABEL_186:
                      *v150 = (uint64_t *)-8192;
                      v145[304] = vadd_s32(v145[304], (int32x2_t)0x1FFFFFFFFLL);
                      v144 = v576;
                    }
                    else
                    {
                      v152 = 1;
                      while (v151 != (uint64_t *)-4096)
                      {
                        v153 = v149 + v152++;
                        v149 = v153 & v148;
                        v151 = *(uint64_t **)(v146 + 16 * v149);
                        if (v576 == v151)
                        {
                          v150 = (uint64_t **)(v146 + 16 * v149);
                          goto LABEL_186;
                        }
                      }
                    }
                    *((_BYTE *)v144 + 17) &= ~1u;
                  }
                }
              }
            }
            if (v125)
              v115 = (llvm::UndefValue *)v125;
          }
          v129 = *(unsigned __int8 *)(v51 + 16) - 33;
          if (v129 <= 0x37)
          {
            if (((1 << (*(_BYTE *)(v51 + 16) - 33)) & 0x808001D0000010) != 0)
              goto LABEL_206;
            if (((1 << (*(_BYTE *)(v51 + 16) - 33)) & 0x8000000000041) != 0)
            {
              v155 = *(_QWORD *)(v51 + 64);
              if (!v155 || (*(_BYTE *)(v155 + 17) & 0x30) == 0)
              {
                v156 = *(_DWORD *)(v51 + 20);
                if (v156 < 0)
                {
                  v245 = v51 - 32 * (v156 & 0x7FFFFFF);
                  v248 = *(_QWORD *)(v245 - 8);
                  v246 = v245 - 8;
                  v247 = v248;
                  if (v248)
                  {
                    v249 = -v247;
                    do
                    {
                      v250 = *(_DWORD *)(*(_QWORD *)(v246 + v249) + 8);
                      v251 = v250 > 7;
                      v252 = (1 << v250) & 0x83;
                      if (v251 || v252 == 0)
                        goto LABEL_206;
                      v249 += 16;
                    }
                    while (v249);
                  }
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v51, 45) & 1) == 0
                  && !llvm::CallBase::hasFnAttrOnCalledFunction(v51, 44))
                {
                  goto LABEL_206;
                }
              }
            }
            else if (v129 == 27 && (*(_WORD *)(v51 + 18) & 0x301) != 0)
            {
              goto LABEL_206;
            }
          }
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v51) & 1) == 0
            && llvm::Instruction::willReturn((llvm::Instruction *)v51))
          {
            v130 = (uint64_t)a1[2];
            v575 = 2;
            v576 = 0;
            v577 = (int32x2_t ****)v40;
            if (v40 != (llvm::Instruction *)-8192 && v40 != (llvm::Instruction *)-4096 && v40)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v575);
            v574 = &unk_1E814DA10;
            v578 = v130;
            v131 = sub_1C52E2ED8(v130, &v574);
            if (v577 != (int32x2_t ****)-8192 && v577 != (int32x2_t ****)-4096 && v577)
            {
              v132 = v575 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v575 & 0xFFFFFFFFFFFFFFF8) = v576;
              if (v576)
              {
                *v576 = *v576 & 7 | v132;
              }
              else
              {
                v133 = v577;
                v134 = ***v577;
                v135 = (unint64_t)v134[303];
                if (v135 <= v132)
                {
                  v136 = v134[305].u32[0];
                  if (v135 + 16 * v136 > v132)
                  {
                    v137 = v136 - 1;
                    LODWORD(v138) = v137 & ((v577 >> 4) ^ (v577 >> 9));
                    v139 = (int32x2_t *****)(v135 + 16 * v138);
                    v140 = *v139;
                    if (v577 == *v139)
                    {
LABEL_176:
                      *v139 = (int32x2_t ****)-8192;
                      v134[304] = vadd_s32(v134[304], (int32x2_t)0x1FFFFFFFFLL);
                      v133 = v577;
                    }
                    else
                    {
                      v141 = 1;
                      while (v140 != (int32x2_t ****)-4096)
                      {
                        v142 = v138 + v141++;
                        v138 = v142 & v137;
                        v140 = *(int32x2_t *****)(v135 + 16 * v138);
                        if (v577 == v140)
                        {
                          v139 = (int32x2_t *****)(v135 + 16 * v138);
                          goto LABEL_176;
                        }
                      }
                    }
                    *((_BYTE *)v133 + 17) &= ~1u;
                  }
                }
              }
            }
            v154 = (llvm::UndefValue *)v131[7];
            if (v154 != v115)
            {
              if (v154 && v154 != (llvm::UndefValue *)-8192 && v154 != (llvm::UndefValue *)-4096)
              {
                v215 = v131[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v215 = v131[6];
                v216 = (unint64_t *)v131[6];
                if (v216)
                {
                  *v216 = *v216 & 7 | v215;
                }
                else
                {
                  v217 = v131[7];
                  v218 = ***(int32x2_t ****)v217;
                  v219 = (unint64_t)v218[303];
                  if (v219 <= v215)
                  {
                    v220 = v218[305].u32[0];
                    if (v219 + 16 * v220 > v215)
                    {
                      v221 = v220 - 1;
                      LODWORD(v222) = v221 & ((v217 >> 4) ^ (v217 >> 9));
                      v223 = (uint64_t *)(v219 + 16 * v222);
                      v224 = *v223;
                      if (v217 == *v223)
                      {
LABEL_297:
                        *v223 = -8192;
                        v218[304] = vadd_s32(v218[304], (int32x2_t)0x1FFFFFFFFLL);
                        v217 = v131[7];
                      }
                      else
                      {
                        v225 = 1;
                        while (v224 != -4096)
                        {
                          v226 = v222 + v225++;
                          v222 = v226 & v221;
                          v224 = *(_QWORD *)(v219 + 16 * v222);
                          if (v217 == v224)
                          {
                            v223 = (uint64_t *)(v219 + 16 * v222);
                            goto LABEL_297;
                          }
                        }
                      }
                      *(_BYTE *)(v217 + 17) &= ~1u;
                    }
                  }
                }
              }
              v131[7] = v115;
              if (v115 != (llvm::UndefValue *)-8192 && v115 != (llvm::UndefValue *)-4096)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v131 + 5));
            }
            llvm::Value::deleteValue((llvm::Value *)v51);
            goto LABEL_268;
          }
LABEL_206:
          if ((*((_BYTE *)v40 + 23) & 0x10) != 0)
          {
            v157 = ***(_QWORD ***)v40;
            v158 = *(_QWORD *)(v157 + 152);
            v159 = *(unsigned int *)(v157 + 168);
            if (!(_DWORD)v159)
              goto LABEL_213;
            LODWORD(v160) = (v159 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            v161 = (llvm::Instruction **)(v158 + 16 * v160);
            v162 = *v161;
            if (*v161 != v40)
            {
              v163 = 1;
              while (v162 != (llvm::Instruction *)-4096)
              {
                v164 = v160 + v163++;
                v160 = v164 & (v159 - 1);
                v162 = *(llvm::Instruction **)(v158 + 16 * v160);
                if (v162 == v40)
                {
                  v161 = (llvm::Instruction **)(v158 + 16 * v160);
                  goto LABEL_214;
                }
              }
LABEL_213:
              v161 = (llvm::Instruction **)(v158 + 16 * v159);
            }
LABEL_214:
            v165 = (uint64_t *)v161[1];
            v166 = *v165;
            v167 = a1[4];
            LOWORD(v578) = 773;
            v574 = v165 + 2;
            v575 = v166;
            v576 = (uint64_t *)v167;
            llvm::Value::setName((uint64_t ***)v51, (uint64_t)&v574);
          }
          v168 = (uint64_t)a1[2];
          v575 = 2;
          v576 = 0;
          v577 = (int32x2_t ****)v40;
          if (v40 != (llvm::Instruction *)-8192 && v40 != (llvm::Instruction *)-4096 && v40)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v575);
          v574 = &unk_1E814DA10;
          v578 = v168;
          v169 = sub_1C52E2ED8(v168, &v574);
          if (v577 != (int32x2_t ****)-8192 && v577 != (int32x2_t ****)-4096 && v577)
          {
            v170 = v575 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v575 & 0xFFFFFFFFFFFFFFF8) = v576;
            if (v576)
            {
              *v576 = *v576 & 7 | v170;
            }
            else
            {
              v171 = v577;
              v172 = ***v577;
              v173 = (unint64_t)v172[303];
              if (v173 <= v170)
              {
                v174 = v172[305].u32[0];
                if (v173 + 16 * v174 > v170)
                {
                  v175 = v174 - 1;
                  LODWORD(v176) = v175 & ((v577 >> 4) ^ (v577 >> 9));
                  v177 = (int32x2_t *****)(v173 + 16 * v176);
                  v178 = *v177;
                  if (v577 == *v177)
                  {
LABEL_230:
                    *v177 = (int32x2_t ****)-8192;
                    v172[304] = vadd_s32(v172[304], (int32x2_t)0x1FFFFFFFFLL);
                    v171 = v577;
                  }
                  else
                  {
                    v179 = 1;
                    while (v178 != (int32x2_t ****)-4096)
                    {
                      v180 = v176 + v179++;
                      v176 = v180 & v175;
                      v178 = *(int32x2_t *****)(v173 + 16 * v176);
                      if (v577 == v178)
                      {
                        v177 = (int32x2_t *****)(v173 + 16 * v176);
                        goto LABEL_230;
                      }
                    }
                  }
                  *((_BYTE *)v171 + 17) &= ~1u;
                }
              }
            }
          }
          v181 = v169[7];
          if (v181 != v51)
          {
            if (v181 && v181 != -8192 && v181 != -4096)
            {
              v203 = v169[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v203 = v169[6];
              v204 = (unint64_t *)v169[6];
              if (v204)
              {
                *v204 = *v204 & 7 | v203;
              }
              else
              {
                v205 = v169[7];
                v206 = ***(int32x2_t ****)v205;
                v207 = (unint64_t)v206[303];
                if (v207 <= v203)
                {
                  v208 = v206[305].u32[0];
                  if (v207 + 16 * v208 > v203)
                  {
                    v209 = v208 - 1;
                    LODWORD(v210) = v209 & ((v205 >> 4) ^ (v205 >> 9));
                    v211 = (uint64_t *)(v207 + 16 * v210);
                    v212 = *v211;
                    if (v205 == *v211)
                    {
LABEL_283:
                      *v211 = -8192;
                      v206[304] = vadd_s32(v206[304], (int32x2_t)0x1FFFFFFFFLL);
                      v205 = v169[7];
                    }
                    else
                    {
                      v213 = 1;
                      while (v212 != -4096)
                      {
                        v214 = v210 + v213++;
                        v210 = v214 & v209;
                        v212 = *(_QWORD *)(v207 + 16 * v210);
                        if (v205 == v212)
                        {
                          v211 = (uint64_t *)(v207 + 16 * v210);
                          goto LABEL_283;
                        }
                      }
                    }
                    *(_BYTE *)(v205 + 17) &= ~1u;
                  }
                }
              }
            }
            v169[7] = v51;
            if (v51 != -8192 && v51 != -4096 && v51)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v169 + 5));
          }
          *(_QWORD *)(v51 + 40) = v24;
          *(_WORD *)(v24 + 18) &= ~0x8000u;
          if ((*(_BYTE *)(v51 + 23) & 0x10) != 0)
          {
            v201 = *(_QWORD *)(v24 + 56);
            if (v201)
            {
              v202 = *(llvm::ValueSymbolTable **)(v201 + 104);
              if (v202)
                llvm::ValueSymbolTable::reinsertValue(v202, (llvm::Value *)v51);
            }
          }
          v182 = *v566;
          *(_QWORD *)(v51 + 24) = *v566;
          *(_QWORD *)(v51 + 32) = v566;
          v182[1] = v51 + 24;
          *v566 = (uint64_t *)(v51 + 24);
          if (*((_BYTE *)v40 + 16) == 84)
          {
            v183 = sub_1C4D99D08((uint64_t)v40) || sub_1C509DDB0((uint64_t)v40);
            v184 = !v183;
          }
          else
          {
            v184 = 0;
          }
          v185 = a1[5];
          if (!v185)
            goto LABEL_265;
          v188 = v185[4];
          v186 = (uint64_t)(v185 + 4);
          v187 = v188;
          v574 = v40;
          v189 = *(_DWORD *)(v186 + 16);
          if (!v189)
          {
            v198 = 0;
LABEL_261:
            v192 = sub_1C50F5E68(v186, (uint64_t *)&v574, v198);
            *v192 = (uint64_t)v40;
            v192[1] = 0;
            goto LABEL_262;
          }
          v190 = v189 - 1;
          v191 = (v189 - 1) & ((v40 >> 4) ^ (v40 >> 9));
          v192 = (uint64_t *)&v187[2 * v191];
          v193 = *v192;
          if (v40 != (llvm::Instruction *)*v192)
          {
            v194 = 0;
            v195 = 1;
            while (v193 != -4096)
            {
              if (v194)
                v196 = 0;
              else
                v196 = v193 == -8192;
              if (v196)
                v194 = v192;
              v197 = v191 + v195++;
              v191 = v197 & v190;
              v192 = (uint64_t *)&v187[2 * (v197 & v190)];
              v193 = *v192;
              if (v40 == (llvm::Instruction *)*v192)
                goto LABEL_262;
            }
            if (v194)
              v198 = v194;
            else
              v198 = v192;
            goto LABEL_261;
          }
LABEL_262:
          v192[1] = v51;
          v199 = *((unsigned __int8 *)v40 + 16) - 33;
          if (v199 <= 0x33 && ((1 << v199) & 0x8000000000041) != 0)
          {
            v200 = *(_DWORD *)(a3 - 4);
            if (v200 < 0 && (*(_QWORD *)(a3 - 24 - 32 * (v200 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
            {
              v227 = (uint64_t *)a1[5];
              v574 = (void *)6;
              v575 = 0;
              v576 = (uint64_t *)v51;
              if (v51 != -8192 && v51 != -4096 && v51)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v574);
              v228 = (unint64_t *)v227[2];
              if ((unint64_t)v228 >= v227[3])
              {
                v232 = sub_1C571CA4C(v227 + 1, &v574);
              }
              else
              {
                *v228 = 6;
                v228[1] = 0;
                v229 = v576;
                v228[2] = (unint64_t)v576;
                if (v229 != (uint64_t *)-8192 && v229 != (uint64_t *)-4096)
                {
                  if (v229)
                  {
                    v230 = (unint64_t)v574 & 0xFFFFFFFFFFFFFFF8;
                    v228[1] = *(_QWORD *)((unint64_t)v574 & 0xFFFFFFFFFFFFFFF8);
                    *(_QWORD *)v230 = v228;
                    *v228 = v230 | 6;
                    v231 = (unint64_t *)v228[1];
                    if (v231)
                      *v231 = *v231 & 7 | (unint64_t)(v228 + 1);
                  }
                }
                v232 = (uint64_t)(v228 + 3);
              }
              v227[2] = v232;
              if (v576 != (uint64_t *)-8192 && v576 != (uint64_t *)-4096 && v576)
              {
                v234 = (unint64_t)v574 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)((unint64_t)v574 & 0xFFFFFFFFFFFFFFF8) = v575;
                if (v575)
                {
                  *(_QWORD *)v575 = *(_QWORD *)v575 & 7 | v234;
                }
                else
                {
                  v235 = v576;
                  v236 = **(int32x2_t ***)*v576;
                  v237 = (unint64_t)v236[303];
                  if (v237 <= v234)
                  {
                    v238 = v236[305].u32[0];
                    if (v237 + 16 * v238 > v234)
                    {
                      v239 = v238 - 1;
                      LODWORD(v240) = v239 & ((v576 >> 4) ^ (v576 >> 9));
                      v241 = (uint64_t **)(v237 + 16 * v240);
                      v242 = *v241;
                      if (v576 == *v241)
                      {
LABEL_327:
                        *v241 = (uint64_t *)-8192;
                        v236[304] = vadd_s32(v236[304], (int32x2_t)0x1FFFFFFFFLL);
                        v235 = v576;
                      }
                      else
                      {
                        v243 = 1;
                        while (v242 != (uint64_t *)-4096)
                        {
                          v244 = v240 + v243++;
                          v240 = v244 & v239;
                          v242 = *(uint64_t **)(v237 + 16 * v240);
                          if (v576 == v242)
                          {
                            v241 = (uint64_t **)(v237 + 16 * v240);
                            goto LABEL_327;
                          }
                        }
                      }
                      *((_BYTE *)v235 + 17) &= ~1u;
                    }
                  }
                }
              }
              v24 = v564;
            }
          }
LABEL_265:
          v568 |= v184;
          if (a3 && *((_BYTE *)v40 + 16) == 59)
          {
            LOBYTE(v565) = (*(_BYTE *)(*((_QWORD *)v40 - 4) + 16) != 16) | v565;
            BYTE4(v565) |= *(_BYTE *)(*((_QWORD *)v40 - 4) + 16) == 16;
          }
LABEL_268:
          a3 = *(_QWORD *)(a3 + 8);
          if ((uint64_t **)a3 == v567)
          {
            v39 = v561;
            a4 = v562;
            a3 = *v561;
            goto LABEL_340;
          }
        }
        v83 = 1;
        while (v82 != (llvm::Instruction *)-4096)
        {
          v84 = v80 + v83++;
          v80 = v84 & (v79 - 1);
          v82 = *(llvm::Instruction **)(v78 + 16 * v80);
          if (v82 == v40)
          {
            v81 = (llvm::Instruction **)(v78 + 16 * v80);
            goto LABEL_95;
          }
        }
LABEL_94:
        v81 = (llvm::Instruction **)(v78 + 16 * v79);
        goto LABEL_95;
      }
      v565 = 0;
      v568 = 0;
LABEL_340:
      v254 = v39;
      if ((_QWORD *)a3 == v39)
      {
        v255 = 0;
        v261 = 16;
        goto LABEL_531;
      }
      v255 = (llvm::Instruction *)(a3 - 24);
      v256 = a3 == 0;
      if (a3)
        v257 = a3 - 24;
      else
        v257 = 0;
      v258 = *(unsigned __int8 *)(v257 + 16) - 40;
      if (v258 >= 0xFFFFFFF5)
        v259 = v257;
      else
        v259 = 0;
      v261 = v259 + 16;
      v260 = *(unsigned __int8 *)(v259 + 16);
      if (v258 < 0xFFFFFFF5)
        v256 = 1;
      if (v260 == 30 && !v256)
      {
        if ((*(_DWORD *)(v259 + 20) & 0x7FFFFFF) != 3)
          goto LABEL_531;
        v262 = *(uint64_t **)(v259 - 96);
        if (v262)
          v263 = *((_BYTE *)v262 + 16) == 16;
        else
          v263 = 0;
        if (v263)
          goto LABEL_508;
        v264 = a1[2];
        v265 = *v264;
        v266 = *((unsigned int *)v264 + 4);
        if ((_DWORD)v266)
        {
          v267 = ((_DWORD)v266 - 1) & ((v262 >> 4) ^ (v262 >> 9));
          v268 = &v265[8 * v267];
          v269 = v268[3];
          if (v262 == v269)
            goto LABEL_490;
          v270 = 1;
          while (v269 != (uint64_t *)-4096)
          {
            v271 = v267 + v270++;
            v267 = v271 & (v266 - 1);
            v268 = &v265[8 * v267];
            v269 = v268[3];
            if (v262 == v269)
              goto LABEL_490;
          }
        }
        v268 = &v265[8 * v266];
LABEL_490:
        v574 = (void *)6;
        if (v268 == &v265[8 * v266])
        {
          v364 = 0;
          v262 = 0;
          v575 = 0;
          v576 = 0;
        }
        else
        {
          v364 = 0;
          v262 = v268[7];
          v575 = 0;
          v576 = v262;
          if (v262 != (uint64_t *)-8192 && v262 != (uint64_t *)-4096 && v262 != 0)
          {
            v366 = (unint64_t)v268[5] & 0xFFFFFFFFFFFFFFF8;
            v575 = *(_QWORD *)v366;
            *(_QWORD *)v366 = &v574;
            v574 = (void *)(v366 | 6);
            v364 = v575;
            if (v575)
              *(_QWORD *)v575 = *(_QWORD *)v575 & 7 | (unint64_t)&v575;
            v262 = v576;
          }
        }
        if (v262 != (uint64_t *)-8192 && v262 != (uint64_t *)-4096 && v262 != 0)
        {
          v492 = (unint64_t)v574 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)((unint64_t)v574 & 0xFFFFFFFFFFFFFFF8) = v364;
          if (v575)
          {
            *(_QWORD *)v575 = *(_QWORD *)v575 & 7 | v492;
          }
          else
          {
            v493 = v576;
            v494 = **(int32x2_t ***)*v576;
            v495 = (unint64_t)v494[303];
            if (v495 <= v492)
            {
              v496 = v494[305].u32[0];
              if (v495 + 16 * v496 > v492)
              {
                v497 = v496 - 1;
                LODWORD(v498) = v497 & ((v576 >> 4) ^ (v576 >> 9));
                v499 = (uint64_t **)(v495 + 16 * v498);
                v500 = *v499;
                if (v576 == *v499)
                {
LABEL_675:
                  *v499 = (uint64_t *)-8192;
                  v494[304] = vadd_s32(v494[304], (int32x2_t)0x1FFFFFFFFLL);
                  v493 = v576;
                }
                else
                {
                  v501 = 1;
                  while (v500 != (uint64_t *)-4096)
                  {
                    v502 = v498 + v501++;
                    v498 = v502 & v497;
                    v500 = *(uint64_t **)(v495 + 16 * v498);
                    if (v576 == v500)
                    {
                      v499 = (uint64_t **)(v495 + 16 * v498);
                      goto LABEL_675;
                    }
                  }
                }
                *((_BYTE *)v493 + 17) &= ~1u;
              }
            }
          }
        }
        if (v262 && *((_BYTE *)v262 + 16) == 16)
        {
LABEL_508:
          v368 = v262 + 3;
          if (*((_DWORD *)v262 + 8) >= 0x41u)
            v368 = (_QWORD *)*v368;
          if (*v368)
            v369 = 0;
          else
            v369 = -1;
          v324 = *(llvm::BasicBlock **)(v259 + 32 * v369 - 32);
          v370 = operator new(0x60uLL);
          v370[13] = v370[13] & 0x38000000 | 1;
          v371 = (char *)(v370 + 8);
          *(_QWORD *)v370 = 0;
          *((_QWORD *)v370 + 1) = 0;
          *((_QWORD *)v370 + 2) = 0;
          *((_QWORD *)v370 + 3) = v370 + 8;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v370 + 8), v324, (llvm::BasicBlock *)v24);
          v372 = (uint64_t)a1[2];
          v575 = 2;
          v576 = 0;
          v577 = (int32x2_t ****)v259;
          if (v259 != -8192 && v259 != -4096 && v259)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v575);
          v574 = &unk_1E814DA10;
          v578 = v372;
          v373 = sub_1C52E2ED8(v372, &v574);
          if (v577 != (int32x2_t ****)-8192 && v577 != (int32x2_t ****)-4096 && v577)
          {
            v374 = v575 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v575 & 0xFFFFFFFFFFFFFFF8) = v576;
            if (v576)
            {
              *v576 = *v576 & 7 | v374;
            }
            else
            {
              v375 = v577;
              v376 = ***v577;
              v377 = (unint64_t)v376[303];
              if (v377 <= v374)
              {
                v378 = v376[305].u32[0];
                if (v377 + 16 * v378 > v374)
                {
                  v379 = v378 - 1;
                  LODWORD(v380) = v379 & ((v577 >> 4) ^ (v577 >> 9));
                  v381 = (int32x2_t *****)(v377 + 16 * v380);
                  v382 = *v381;
                  if (v577 == *v381)
                  {
LABEL_528:
                    *v381 = (int32x2_t ****)-8192;
                    v376[304] = vadd_s32(v376[304], (int32x2_t)0x1FFFFFFFFLL);
                    v375 = v577;
                  }
                  else
                  {
                    v383 = 1;
                    while (v382 != (int32x2_t ****)-4096)
                    {
                      v384 = v380 + v383++;
                      v380 = v384 & v379;
                      v382 = *(int32x2_t *****)(v377 + 16 * v380);
                      if (v577 == v382)
                      {
                        v381 = (int32x2_t *****)(v377 + 16 * v380);
                        goto LABEL_528;
                      }
                    }
                  }
                  *((_BYTE *)v375 + 17) &= ~1u;
                }
              }
            }
          }
          v484 = (char *)v373[7];
          if (v484 != v371)
          {
            if (v484 && v484 != (char *)-8192 && v484 != (char *)-4096)
            {
              v520 = v373[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v520 = v373[6];
              v521 = (unint64_t *)v373[6];
              if (v521)
              {
                *v521 = *v521 & 7 | v520;
              }
              else
              {
                v522 = v373[7];
                v523 = ***(int32x2_t ****)v522;
                v524 = (unint64_t)v523[303];
                if (v524 <= v520)
                {
                  v525 = v523[305].u32[0];
                  if (v524 + 16 * v525 > v520)
                  {
                    v526 = v525 - 1;
                    LODWORD(v527) = v526 & ((v522 >> 4) ^ (v522 >> 9));
                    v528 = (uint64_t *)(v524 + 16 * v527);
                    v529 = *v528;
                    if (v522 == *v528)
                    {
LABEL_720:
                      *v528 = -8192;
                      v523[304] = vadd_s32(v523[304], (int32x2_t)0x1FFFFFFFFLL);
                      v522 = v373[7];
                    }
                    else
                    {
                      v530 = 1;
                      while (v529 != -4096)
                      {
                        v531 = v527 + v530++;
                        v527 = v531 & v526;
                        v529 = *(_QWORD *)(v524 + 16 * v527);
                        if (v522 == v529)
                        {
                          v528 = (uint64_t *)(v524 + 16 * v527);
                          goto LABEL_720;
                        }
                      }
                    }
                    *(_BYTE *)(v522 + 17) &= ~1u;
                  }
                }
              }
            }
            v373[7] = v371;
            if (v371 != (char *)-8192 && v371 != (char *)-4096 && v371)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v373 + 5));
          }
          v342 = a4[1];
          v485 = (unint64_t)a4[2];
          if ((unint64_t)v342 < v485)
          {
LABEL_657:
            *v342 = v324;
            v362 = v342 + 1;
LABEL_683:
            a4[1] = v362;
            goto LABEL_684;
          }
          v486 = *a4;
          v487 = v342 - *a4;
          v488 = v487 + 1;
          if (!((unint64_t)(v487 + 1) >> 61))
          {
            v489 = v485 - (_QWORD)v486;
            if (v489 >> 2 > v488)
              v488 = v489 >> 2;
            if ((unint64_t)v489 >= 0x7FFFFFFFFFFFFFF8)
              v490 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v490 = v488;
            if (!v490)
            {
              v491 = 0;
              goto LABEL_678;
            }
            if (!(v490 >> 61))
            {
              v491 = (char *)operator new(8 * v490);
LABEL_678:
              v360 = (llvm::BasicBlock **)&v491[8 * v487];
              v361 = &v491[8 * v490];
              *v360 = v324;
              v362 = v360 + 1;
              if (v342 == v486)
                goto LABEL_681;
              do
              {
                v503 = *--v342;
                *--v360 = v503;
              }
              while (v342 != v486);
LABEL_680:
              v342 = *a4;
LABEL_681:
              *a4 = v360;
              a4[1] = v362;
              a4[2] = (llvm::BasicBlock **)v361;
              if (v342)
                operator delete(v342);
              goto LABEL_683;
            }
LABEL_739:
            sub_1C4764EE4();
          }
          goto LABEL_738;
        }
        goto LABEL_530;
      }
      v272 = v260 != 31 || v256;
      if ((v272 & 1) != 0)
      {
LABEL_531:
        llvm::Instruction::clone(v255);
        v386 = v385;
        v387 = v255 >> 4;
        if ((*((_BYTE *)v255 + 23) & 0x10) == 0)
        {
LABEL_540:
          v386[5] = (uint64_t **)v24;
          *(_WORD *)(v24 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v386 + 23) & 0x10) != 0)
          {
            v470 = *(_QWORD *)(v24 + 56);
            if (v470)
            {
              v471 = *(llvm::ValueSymbolTable **)(v470 + 104);
              if (v471)
                llvm::ValueSymbolTable::reinsertValue(v471, (llvm::Value *)v386);
            }
          }
          v399 = *v566;
          v386[3] = (uint64_t **)*v566;
          v386[4] = v566;
          v399[1] = (uint64_t)(v386 + 3);
          *v566 = (uint64_t *)(v386 + 3);
          v400 = (uint64_t)a1[2];
          v575 = 2;
          v576 = 0;
          v577 = (int32x2_t ****)v255;
          if (v255 != (llvm::Instruction *)-8192 && v255 != (llvm::Instruction *)-4096 && v255)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v575);
          v574 = &unk_1E814DA10;
          v578 = v400;
          v401 = sub_1C52E2ED8(v400, &v574);
          if (v577 != (int32x2_t ****)-8192 && v577 != (int32x2_t ****)-4096 && v577)
          {
            v402 = v575 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v575 & 0xFFFFFFFFFFFFFFF8) = v576;
            if (v576)
            {
              *v576 = *v576 & 7 | v402;
            }
            else
            {
              v403 = v577;
              v404 = ***v577;
              v405 = (unint64_t)v404[303];
              if (v405 <= v402)
              {
                v406 = v404[305].u32[0];
                if (v405 + 16 * v406 > v402)
                {
                  v407 = v406 - 1;
                  LODWORD(v408) = v407 & ((v577 >> 4) ^ (v577 >> 9));
                  v409 = (int32x2_t *****)(v405 + 16 * v408);
                  v410 = *v409;
                  if (v577 == *v409)
                  {
LABEL_556:
                    *v409 = (int32x2_t ****)-8192;
                    v404[304] = vadd_s32(v404[304], (int32x2_t)0x1FFFFFFFFLL);
                    v403 = v577;
                  }
                  else
                  {
                    v411 = 1;
                    while (v410 != (int32x2_t ****)-4096)
                    {
                      v412 = v408 + v411++;
                      v408 = v412 & v407;
                      v410 = *(int32x2_t *****)(v405 + 16 * v408);
                      if (v577 == v410)
                      {
                        v409 = (int32x2_t *****)(v405 + 16 * v408);
                        goto LABEL_556;
                      }
                    }
                  }
                  *((_BYTE *)v403 + 17) &= ~1u;
                }
              }
            }
          }
          v413 = (uint64_t ***)v401[7];
          if (v413 != v386)
          {
            if (v413 && v413 != (uint64_t ***)-8192 && v413 != (uint64_t ***)-4096)
            {
              v472 = v401[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v472 = v401[6];
              v473 = (unint64_t *)v401[6];
              if (v473)
              {
                *v473 = *v473 & 7 | v472;
              }
              else
              {
                v474 = v401[7];
                v475 = ***(int32x2_t ****)v474;
                v476 = (unint64_t)v475[303];
                if (v476 <= v472)
                {
                  v477 = v475[305].u32[0];
                  if (v476 + 16 * v477 > v472)
                  {
                    v478 = v477 - 1;
                    LODWORD(v479) = v478 & ((v474 >> 4) ^ (v474 >> 9));
                    v480 = (uint64_t *)(v476 + 16 * v479);
                    v481 = *v480;
                    if (v474 == *v480)
                    {
LABEL_647:
                      *v480 = -8192;
                      v475[304] = vadd_s32(v475[304], (int32x2_t)0x1FFFFFFFFLL);
                      v474 = v401[7];
                    }
                    else
                    {
                      v482 = 1;
                      while (v481 != -4096)
                      {
                        v483 = v479 + v482++;
                        v479 = v483 & v478;
                        v481 = *(_QWORD *)(v476 + 16 * v479);
                        if (v474 == v481)
                        {
                          v480 = (uint64_t *)(v476 + 16 * v479);
                          goto LABEL_647;
                        }
                      }
                    }
                    *(_BYTE *)(v474 + 17) &= ~1u;
                  }
                }
              }
            }
            v401[7] = v386;
            if (v386 != (uint64_t ***)-8192 && v386 != (uint64_t ***)-4096 && v386)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v401 + 5));
          }
          v414 = a1[5];
          if (!v414)
          {
LABEL_587:
            v431 = (_QWORD *)*v254;
            if ((_QWORD *)*v254 == v254)
            {
LABEL_596:
              v432 = 0;
              v437 = 0;
            }
            else
            {
              v432 = (llvm::Instruction *)(v431 - 3);
              if (v431)
                v433 = v431 - 3;
              else
                v433 = 0;
              v434 = *((unsigned __int8 *)v433 + 16);
              v435 = v434 - 29;
              if (v434 == 30)
              {
                if ((*((_DWORD *)v433 + 5) & 0x7FFFFFF) == 3)
                  v436 = 2;
                else
                  v436 = 1;
              }
              else
              {
                v436 = 0;
                switch(v435)
                {
                  case 0:
                  case 5:
                  case 6:
                    goto LABEL_595;
                  case 1:
                    __break(1u);
                    break;
                  case 2:
                    v436 = (*((_DWORD *)v433 + 5) >> 1) & 0x3FFFFFF;
                    goto LABEL_595;
                  case 3:
                  case 9:
                    break;
                  case 4:
                    v436 = 2;
                    goto LABEL_595;
                  case 7:
                    v436 = *((_WORD *)v433 + 9) & 1;
                    goto LABEL_595;
                  case 8:
                    v436 = 1;
                    goto LABEL_595;
                  case 10:
                    v436 = *((_DWORD *)v433 + 20) + 1;
                    goto LABEL_595;
                  default:
                    goto LABEL_596;
                }
                v436 = (*((_DWORD *)v433 + 5) & 0x7FFFFFF) - 1;
              }
LABEL_595:
              v437 = v436;
            }
            if (v437 << 32 < 1)
              goto LABEL_684;
            v438 = (int)v437;
            v439 = (unint64_t)v562[1];
            v440 = v439 - (_QWORD)*v562;
            v441 = (char *)*v562 + (v440 & 0xFFFFFFFFFFFFFFF8);
            v442 = v562[2];
            if ((int)v437 <= (uint64_t)((uint64_t)v442 - v439) >> 3)
            {
              v449 = v439 - (_QWORD)v441;
              v450 = (uint64_t)(v439 - (_QWORD)v441) >> 3;
              if (v450 >= (int)v437)
              {
                v452 = (char *)v562[1];
                LODWORD(v450) = v437;
              }
              else
              {
                v451 = v449 >> 3;
                v452 = (char *)v562[1];
                if ((v449 >> 3) != (_DWORD)v437)
                {
                  v452 = (char *)v562[1];
                  v453 = v452;
                  do
                  {
                    *(_QWORD *)v453 = llvm::Instruction::getSuccessor(v432, v451);
                    v453 += 8;
                    LODWORD(v451) = v451 + 1;
                    v452 += 8;
                  }
                  while ((_DWORD)v437 != (_DWORD)v451);
                }
                v562[1] = (llvm::BasicBlock **)v452;
                if ((uint64_t)(v439 - (_QWORD)v441) < 1)
                  goto LABEL_684;
              }
              v454 = &v441[8 * (int)v437];
              v455 = (uint64_t *)&v452[-8 * (int)v437];
              v456 = v452;
              if ((unint64_t)v455 < v439)
              {
                v456 = v452;
                do
                {
                  v457 = *v455++;
                  *(_QWORD *)v456 = v457;
                  v456 += 8;
                }
                while ((unint64_t)v455 < v439);
              }
              v562[1] = (llvm::BasicBlock **)v456;
              if (v452 != v454)
                memmove(&v452[-8 * ((v452 - v454) >> 3)], v441, v452 - v454);
              if ((_DWORD)v450)
              {
                v458 = 0;
                do
                {
                  *(_QWORD *)&v441[8 * v458] = llvm::Instruction::getSuccessor(v432, v458);
                  ++v458;
                }
                while ((_DWORD)v450 != (_DWORD)v458);
              }
LABEL_684:
              v504 = a1[5];
              if (v504)
              {
                *v504 |= v568 & 1;
                if ((v565 & 0x100000000) != 0)
                {
                  v505 = v563[7][10];
                  if (v505)
                    v506 = (uint64_t ***)(v505 - 3);
                  else
                    v506 = 0;
                  v507 = v506 != v563;
                }
                else
                {
                  v507 = 0;
                }
                v504[1] |= v565 & 1 | v507;
              }
              return;
            }
            v443 = v440 >> 3;
            v444 = (v440 >> 3) + (int)v437;
            if (!(v444 >> 61))
            {
              v445 = (char *)v442 - (char *)*v562;
              v446 = v445 >> 2;
              if (v445 >> 2 <= v444)
                v446 = v444;
              if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFF8)
                v447 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v447 = v446;
              if (v447)
              {
                if (v447 >> 61)
                  goto LABEL_739;
                v448 = (char *)operator new(8 * v447);
              }
              else
              {
                v448 = 0;
              }
              v459 = 0;
              v460 = &v448[8 * v443];
              v461 = &v460[8 * v438];
              v462 = 8 * v438;
              do
              {
                *(_QWORD *)&v460[8 * v459] = llvm::Instruction::getSuccessor(v432, v459);
                ++v459;
                v462 -= 8;
              }
              while (v462);
              v463 = (char *)*v562;
              if (v441 != (char *)*v562)
              {
                v464 = v441;
                do
                {
                  v465 = *((_QWORD *)v464 - 1);
                  v464 -= 8;
                  *((_QWORD *)v460 - 1) = v465;
                  v460 -= 8;
                }
                while (v464 != v463);
              }
              v466 = &v448[8 * v447];
              v467 = v562[1];
              v468 = (char *)v467 - v441;
              if (v467 != (llvm::BasicBlock **)v441)
                memmove(v461, v441, (char *)v467 - v441);
              v469 = *v562;
              *v562 = (llvm::BasicBlock **)v460;
              v562[1] = (llvm::BasicBlock **)&v461[v468];
              v562[2] = (llvm::BasicBlock **)v466;
              if (v469)
                operator delete(v469);
              goto LABEL_684;
            }
LABEL_738:
            abort();
          }
          v417 = v414[4];
          v415 = (uint64_t)(v414 + 4);
          v416 = v417;
          v574 = v255;
          v418 = *(_DWORD *)(v415 + 16);
          if (v418)
          {
            v419 = v418 - 1;
            v420 = (v418 - 1) & (v387 ^ (v255 >> 9));
            v421 = (uint64_t *)&v416[2 * v420];
            v422 = *v421;
            if (v255 == (llvm::Instruction *)*v421)
              goto LABEL_581;
            v423 = 0;
            v424 = 1;
            while (v422 != -4096)
            {
              if (v423)
                v425 = 0;
              else
                v425 = v422 == -8192;
              if (v425)
                v423 = v421;
              v426 = v420 + v424++;
              v420 = v426 & v419;
              v421 = (uint64_t *)&v416[2 * (v426 & v419)];
              v422 = *v421;
              if (v255 == (llvm::Instruction *)*v421)
                goto LABEL_581;
            }
            if (v423)
              v427 = v423;
            else
              v427 = v421;
          }
          else
          {
            v427 = 0;
          }
          v421 = sub_1C50F5E68(v415, (uint64_t *)&v574, v427);
          *v421 = (uint64_t)v255;
          v421[1] = 0;
LABEL_581:
          v421[1] = (uint64_t)v386;
          v428 = *(unsigned __int8 *)v261 - 33;
          if (v428 <= 0x33 && ((1 << v428) & 0x8000000000041) != 0 && v255 != 0)
          {
            v430 = *((_DWORD *)v255 + 5);
            if (v430 < 0 && (*((_QWORD *)v255 - 4 * (v430 & 0x7FFFFFF) - 1) & 0xFFFFFFFF0) != 0)
            {
              v544 = (uint64_t *)a1[5];
              v574 = (void *)6;
              v575 = 0;
              v576 = (uint64_t *)v386;
              if (v386 != (uint64_t ***)-8192 && v386 != (uint64_t ***)-4096 && v386)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v574);
              v545 = (unint64_t *)v544[2];
              if ((unint64_t)v545 >= v544[3])
              {
                v549 = sub_1C571CA4C(v544 + 1, &v574);
              }
              else
              {
                *v545 = 6;
                v545[1] = 0;
                v546 = v576;
                v545[2] = (unint64_t)v576;
                if (v546 != (uint64_t *)-8192 && v546 != (uint64_t *)-4096)
                {
                  if (v546)
                  {
                    v547 = (unint64_t)v574 & 0xFFFFFFFFFFFFFFF8;
                    v545[1] = *(_QWORD *)((unint64_t)v574 & 0xFFFFFFFFFFFFFFF8);
                    *(_QWORD *)v547 = v545;
                    *v545 = v547 | 6;
                    v548 = (unint64_t *)v545[1];
                    if (v548)
                      *v548 = *v548 & 7 | (unint64_t)(v545 + 1);
                  }
                }
                v549 = (uint64_t)(v545 + 3);
              }
              v544[2] = v549;
              if (v576 != (uint64_t *)-8192 && v576 != (uint64_t *)-4096 && v576)
              {
                v550 = (unint64_t)v574 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)((unint64_t)v574 & 0xFFFFFFFFFFFFFFF8) = v575;
                if (v575)
                {
                  *(_QWORD *)v575 = *(_QWORD *)v575 & 7 | v550;
                }
                else
                {
                  v551 = v576;
                  v552 = **(int32x2_t ***)*v576;
                  v553 = (unint64_t)v552[303];
                  if (v553 <= v550)
                  {
                    v554 = v552[305].u32[0];
                    if (v553 + 16 * v554 > v550)
                    {
                      v555 = v554 - 1;
                      LODWORD(v556) = v555 & ((v576 >> 4) ^ (v576 >> 9));
                      v557 = (uint64_t **)(v553 + 16 * v556);
                      v558 = *v557;
                      if (v576 == *v557)
                      {
LABEL_764:
                        *v557 = (uint64_t *)-8192;
                        v552[304] = vadd_s32(v552[304], (int32x2_t)0x1FFFFFFFFLL);
                        v551 = v576;
                      }
                      else
                      {
                        v559 = 1;
                        while (v558 != (uint64_t *)-4096)
                        {
                          v560 = v556 + v559++;
                          v556 = v560 & v555;
                          v558 = *(uint64_t **)(v553 + 16 * v556);
                          if (v576 == v558)
                          {
                            v557 = (uint64_t **)(v553 + 16 * v556);
                            goto LABEL_764;
                          }
                        }
                      }
                      *((_BYTE *)v551 + 17) &= ~1u;
                    }
                  }
                }
              }
            }
          }
          goto LABEL_587;
        }
        v388 = ***(_QWORD ***)v255;
        v389 = *(_QWORD *)(v388 + 152);
        v390 = *(unsigned int *)(v388 + 168);
        if ((_DWORD)v390)
        {
          LODWORD(v391) = (v390 - 1) & (v387 ^ (v255 >> 9));
          v392 = (llvm::Instruction **)(v389 + 16 * v391);
          v393 = *v392;
          if (*v392 == v255)
          {
LABEL_539:
            v396 = (uint64_t *)v392[1];
            v397 = *v396;
            v398 = a1[4];
            LOWORD(v578) = 773;
            v574 = v396 + 2;
            v575 = v397;
            v576 = (uint64_t *)v398;
            llvm::Value::setName(v385, (uint64_t)&v574);
            goto LABEL_540;
          }
          v394 = 1;
          while (v393 != (llvm::Instruction *)-4096)
          {
            v395 = v391 + v394++;
            v391 = v395 & (v390 - 1);
            v393 = *(llvm::Instruction **)(v389 + 16 * v391);
            if (v393 == v255)
            {
              v392 = (llvm::Instruction **)(v389 + 16 * v391);
              goto LABEL_539;
            }
          }
        }
        v392 = (llvm::Instruction **)(v389 + 16 * v390);
        goto LABEL_539;
      }
      v273 = *(_DWORD *)(v259 + 20);
      if ((v273 & 0x40000000) != 0)
        v274 = *(uint64_t **)(v259 - 8);
      else
        v274 = (uint64_t *)(v259 - 32 * (v273 & 0x7FFFFFF));
      v275 = *v274;
      v276 = *(unsigned __int8 *)(*v274 + 16);
      if (v275)
        v277 = v276 == 16;
      else
        v277 = 0;
      if (v277)
      {
LABEL_436:
        v319 = sub_1C4E5D490(v259, v275);
        v321 = *(_DWORD *)(v319 + 20);
        if ((v321 & 0x40000000) != 0)
          v322 = *(_QWORD *)(v319 - 8);
        else
          v322 = v319 - 32 * (v321 & 0x7FFFFFF);
        v323 = (2 * v320 + 3);
        if (v320 == -2)
          v323 = 1;
        v324 = *(llvm::BasicBlock **)(v322 + 32 * v323);
        v325 = operator new(0x60uLL);
        v325[13] = v325[13] & 0x38000000 | 1;
        v326 = (char *)(v325 + 8);
        *(_QWORD *)v325 = 0;
        *((_QWORD *)v325 + 1) = 0;
        *((_QWORD *)v325 + 2) = 0;
        *((_QWORD *)v325 + 3) = v325 + 8;
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v325 + 8), v324, (llvm::BasicBlock *)v24);
        v327 = (uint64_t)a1[2];
        v575 = 2;
        v576 = 0;
        v577 = (int32x2_t ****)v259;
        if (v259 != -8192 && v259 != -4096 && v259)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v575);
        v574 = &unk_1E814DA10;
        v578 = v327;
        v328 = sub_1C52E2ED8(v327, &v574);
        if (v577 != (int32x2_t ****)-8192 && v577 != (int32x2_t ****)-4096 && v577)
        {
          v329 = v575 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v575 & 0xFFFFFFFFFFFFFFF8) = v576;
          if (v576)
          {
            *v576 = *v576 & 7 | v329;
          }
          else
          {
            v330 = v577;
            v331 = ***v577;
            v332 = (unint64_t)v331[303];
            if (v332 <= v329)
            {
              v333 = v331[305].u32[0];
              if (v332 + 16 * v333 > v329)
              {
                v334 = v333 - 1;
                LODWORD(v335) = v334 & ((v577 >> 4) ^ (v577 >> 9));
                v336 = (int32x2_t *****)(v332 + 16 * v335);
                v337 = *v336;
                if (v577 == *v336)
                {
LABEL_456:
                  *v336 = (int32x2_t ****)-8192;
                  v331[304] = vadd_s32(v331[304], (int32x2_t)0x1FFFFFFFFLL);
                  v330 = v577;
                }
                else
                {
                  v338 = 1;
                  while (v337 != (int32x2_t ****)-4096)
                  {
                    v339 = v335 + v338++;
                    v335 = v339 & v334;
                    v337 = *(int32x2_t *****)(v332 + 16 * v335);
                    if (v577 == v337)
                    {
                      v336 = (int32x2_t *****)(v332 + 16 * v335);
                      goto LABEL_456;
                    }
                  }
                }
                *((_BYTE *)v330 + 17) &= ~1u;
              }
            }
          }
        }
        v340 = (char *)v328[7];
        if (v340 != v326)
        {
          if (v340 && v340 != (char *)-8192 && v340 != (char *)-4096)
          {
            v508 = v328[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v508 = v328[6];
            v509 = (unint64_t *)v328[6];
            if (v509)
            {
              *v509 = *v509 & 7 | v508;
            }
            else
            {
              v510 = v328[7];
              v511 = ***(int32x2_t ****)v510;
              v512 = (unint64_t)v511[303];
              if (v512 <= v508)
              {
                v513 = v511[305].u32[0];
                if (v512 + 16 * v513 > v508)
                {
                  v514 = v513 - 1;
                  LODWORD(v515) = v514 & ((v510 >> 4) ^ (v510 >> 9));
                  v516 = (uint64_t *)(v512 + 16 * v515);
                  v517 = *v516;
                  if (v510 == *v516)
                  {
LABEL_708:
                    *v516 = -8192;
                    v511[304] = vadd_s32(v511[304], (int32x2_t)0x1FFFFFFFFLL);
                    v510 = v328[7];
                  }
                  else
                  {
                    v518 = 1;
                    while (v517 != -4096)
                    {
                      v519 = v515 + v518++;
                      v515 = v519 & v514;
                      v517 = *(_QWORD *)(v512 + 16 * v515);
                      if (v510 == v517)
                      {
                        v516 = (uint64_t *)(v512 + 16 * v515);
                        goto LABEL_708;
                      }
                    }
                  }
                  *(_BYTE *)(v510 + 17) &= ~1u;
                }
              }
            }
          }
          v328[7] = v326;
          if (v326 != (char *)-8192 && v326 != (char *)-4096 && v326)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v328 + 5));
        }
        v342 = a4[1];
        v341 = (unint64_t)a4[2];
        if ((unint64_t)v342 < v341)
          goto LABEL_657;
        v343 = *a4;
        v344 = v342 - *a4;
        v345 = v344 + 1;
        if (!((unint64_t)(v344 + 1) >> 61))
        {
          v346 = v341 - (_QWORD)v343;
          if (v346 >> 2 > v345)
            v345 = v346 >> 2;
          if ((unint64_t)v346 >= 0x7FFFFFFFFFFFFFF8)
            v347 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v347 = v345;
          if (v347)
          {
            if (v347 >> 61)
              goto LABEL_739;
            v348 = (char *)operator new(8 * v347);
          }
          else
          {
            v348 = 0;
          }
          v360 = (llvm::BasicBlock **)&v348[8 * v344];
          v361 = &v348[8 * v347];
          *v360 = v324;
          v362 = v360 + 1;
          if (v342 == v343)
            goto LABEL_681;
          do
          {
            v363 = *--v342;
            *--v360 = v363;
          }
          while (v342 != v343);
          goto LABEL_680;
        }
        goto LABEL_738;
      }
      v278 = a1[2];
      v279 = *v278;
      v280 = *((unsigned int *)v278 + 4);
      if ((_DWORD)v280)
      {
        v281 = ((v275 >> 4) ^ (v275 >> 9)) & ((_DWORD)v280 - 1);
        v282 = &v279[8 * v281];
        v283 = v282[3];
        if ((uint64_t *)v275 == v283)
          goto LABEL_418;
        v284 = 1;
        while (v283 != (uint64_t *)-4096)
        {
          v285 = v281 + v284++;
          v281 = v285 & (v280 - 1);
          v282 = &v279[8 * v281];
          v283 = v282[3];
          if ((uint64_t *)v275 == v283)
            goto LABEL_418;
        }
      }
      v282 = &v279[8 * v280];
LABEL_418:
      v574 = (void *)6;
      if (v282 == &v279[8 * v280])
      {
        v315 = 0;
        v275 = 0;
        v575 = 0;
        v576 = 0;
      }
      else
      {
        v315 = 0;
        v275 = (uint64_t)v282[7];
        v575 = 0;
        v576 = (uint64_t *)v275;
        if (v275 != -8192 && v275 != -4096 && v275 != 0)
        {
          v317 = (unint64_t)v282[5] & 0xFFFFFFFFFFFFFFF8;
          v575 = *(_QWORD *)v317;
          *(_QWORD *)v317 = &v574;
          v574 = (void *)(v317 | 6);
          v315 = v575;
          if (v575)
            *(_QWORD *)v575 = *(_QWORD *)v575 & 7 | (unint64_t)&v575;
          v275 = (uint64_t)v576;
        }
      }
      if (v275 != -8192 && v275 != -4096 && v275 != 0)
      {
        v349 = (unint64_t)v574 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v574 & 0xFFFFFFFFFFFFFFF8) = v315;
        if (v575)
        {
          *(_QWORD *)v575 = *(_QWORD *)v575 & 7 | v349;
        }
        else
        {
          v350 = v576;
          v351 = **(int32x2_t ***)*v576;
          v352 = (unint64_t)v351[303];
          if (v352 <= v349)
          {
            v353 = v351[305].u32[0];
            if (v352 + 16 * v353 > v349)
            {
              v354 = v353 - 1;
              LODWORD(v355) = v354 & ((v576 >> 4) ^ (v576 >> 9));
              v356 = (uint64_t **)(v352 + 16 * v355);
              v357 = *v356;
              if (v576 == *v356)
              {
LABEL_483:
                *v356 = (uint64_t *)-8192;
                v351[304] = vadd_s32(v351[304], (int32x2_t)0x1FFFFFFFFLL);
                v350 = v576;
              }
              else
              {
                v358 = 1;
                while (v357 != (uint64_t *)-4096)
                {
                  v359 = v355 + v358++;
                  v355 = v359 & v354;
                  v357 = *(uint64_t **)(v352 + 16 * v355);
                  if (v576 == v357)
                  {
                    v356 = (uint64_t **)(v352 + 16 * v355);
                    goto LABEL_483;
                  }
                }
              }
              *((_BYTE *)v350 + 17) &= ~1u;
            }
          }
        }
      }
      if (!v275 || *(_BYTE *)(v275 + 16) != 16)
      {
LABEL_530:
        v255 = (llvm::Instruction *)v259;
        goto LABEL_531;
      }
      goto LABEL_436;
    }
    v28 = ***a2;
    v29 = *(_QWORD *)(v28 + 152);
    v30 = *(unsigned int *)(v28 + 168);
    if ((_DWORD)v30)
    {
      LODWORD(v31) = (v30 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v32 = (uint64_t ****)(v29 + 16 * v31);
      v33 = *v32;
      if (*v32 == a2)
      {
LABEL_36:
        v36 = (uint64_t *)v32[1];
        v37 = *v36;
        v38 = a1[4];
        LOWORD(v578) = 773;
        v574 = v36 + 2;
        v575 = v37;
        v576 = (uint64_t *)v38;
        llvm::Value::setName((uint64_t ***)v24, (uint64_t)&v574);
        goto LABEL_37;
      }
      v34 = 1;
      while (v33 != (uint64_t ***)-4096)
      {
        v35 = v31 + v34++;
        v31 = v35 & (v30 - 1);
        v33 = *(uint64_t ****)(v29 + 16 * v31);
        if (v33 == a2)
        {
          v32 = (uint64_t ****)(v29 + 16 * v31);
          goto LABEL_36;
        }
      }
    }
    v32 = (uint64_t ****)(v29 + 16 * v30);
    goto LABEL_36;
  }
}

uint64_t sub_1C5ED4A7C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  result = sub_1C5ED70F8(a1, *a2, &v10);
  if ((result & 1) != 0)
    return result;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 8;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_14;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 4) <= v6 >> 3)
  {
LABEL_14:
    sub_1C5ED719C(a1, v6);
    v10 = 0;
    result = sub_1C5ED70F8(a1, *a2, &v10);
  }
  v7 = v10;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a1 + 4);
  *v7 = *a2;
  v8 = *a2;
  v9 = *(unsigned int *)(a1 + 80);
  if (v9 >= *(_DWORD *)(a1 + 84))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 80);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 80);
  return result;
}

void llvm::CloneAndPruneFunctionInto(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v12 = *(_QWORD *)(a2 + 80);
  if (v12)
    v13 = v12 - 24;
  else
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 48);
  if (v14)
    v15 = v14 - 24;
  else
    v15 = 0;
  llvm::CloneAndPruneIntoFromInst(a1, a2, v15, a3, a4, a5, a6, a7);
}

void llvm::remapInstructionsInBlocks(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t ***v8;
  uint64_t v9;
  llvm::LLVMContext *v10;
  llvm::LLVMContext *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *a1;
    v5 = *a1 + 8 * v2;
    do
    {
      v6 = *(_QWORD *)v4 + 40;
      for (i = *(_QWORD *)(*(_QWORD *)v4 + 48); i != v6; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v8 = (uint64_t ***)(i - 24);
        else
          v8 = 0;
        v9 = operator new();
        *(_DWORD *)v9 = 3;
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        *(_QWORD *)(v9 + 40) = a2;
        *(_QWORD *)(v9 + 24) = v9 + 40;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 32) = 0x200000001;
        *(_QWORD *)(v9 + 72) = v9 + 88;
        *(_QWORD *)(v9 + 80) = 0x400000000;
        *(_QWORD *)(v9 + 184) = v9 + 200;
        *(_QWORD *)(v9 + 192) = 0x100000000;
        *(_QWORD *)(v9 + 216) = v9 + 232;
        *(_QWORD *)(v9 + 224) = 0x1000000000;
        v12 = v9;
        v13 = v9;
        sub_1C5FD706C(v9, v8);
        sub_1C5FD3718(&v13, v10);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v12, v11);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
}

unint64_t llvm::cloneLoopWithPreheader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t *v35;
  char *v36;
  unint64_t v37;
  unint64_t *v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t LoopPredecessor;
  uint64_t v43;
  uint64_t v44;
  uint64_t ***v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t ***v50;
  int32x2_t *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t ****v56;
  uint64_t ***v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t **v62;
  unint64_t **v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t ****v80;
  uint64_t ****v81;
  uint64_t v82;
  uint64_t ***v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t ***v88;
  int v89;
  int v90;
  unint64_t *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v95;
  unint64_t v96;
  uint64_t ***v97;
  int32x2_t *v98;
  unint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t ****v103;
  uint64_t ***v104;
  int v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  int32x2_t *v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t ****v122;
  uint64_t ****i;
  uint64_t ***v124;
  unsigned int v125;
  int v126;
  int v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  int v131;
  BOOL v132;
  int v133;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t ***v137;
  int32x2_t *v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t ****v143;
  uint64_t ***v144;
  int v145;
  int v146;
  uint64_t v147;
  _QWORD *v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t ****v155;
  uint64_t ***v156;
  int v157;
  int v158;
  uint64_t ***v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t ***v162;
  int32x2_t *v163;
  unint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t ****v168;
  uint64_t ***v169;
  int v170;
  int v171;
  uint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  uint64_t ***v175;
  int32x2_t *v176;
  unint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t ****v181;
  uint64_t ***v182;
  int v183;
  int v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v193;
  unint64_t *v194;
  uint64_t v195;
  int32x2_t *v196;
  unint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t *v214;
  uint64_t v215[2];
  int v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  unint64_t *v220;
  uint64_t ***v221;
  uint64_t v222;
  uint64_t v223;

  v223 = *MEMORY[0x1E0C80C00];
  v217 = a3;
  v211 = *(_QWORD *)(**(_QWORD **)(a3 + 32) + 56);
  v14 = *(_QWORD **)a3;
  v215[0] = 0;
  v215[1] = 0;
  v216 = 0;
  v207 = a6 + 48;
  v15 = sub_1C484358C(a6 + 48, 152, 3);
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 128) = 0u;
  *(_QWORD *)(v15 + 144) = 0;
  *(_QWORD *)(v15 + 56) = v15 + 88;
  *(_QWORD *)(v15 + 64) = v15 + 88;
  *(_DWORD *)(v15 + 72) = 8;
  sub_1C4EB63C4(v215, &v217)[1] = v15;
  v208 = a7;
  v212 = a6;
  if (!v14)
  {
    v19 = a6;
    v20 = *(unint64_t **)(a6 + 32);
    v21 = *(_QWORD *)(v19 + 40);
    if ((unint64_t)v20 >= v21)
    {
      v29 = *(_QWORD **)(v19 + 24);
      v30 = v20 - v29;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 61)
        goto LABEL_260;
      v32 = v21 - (_QWORD)v29;
      if (v32 >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 >> 61)
          goto LABEL_261;
        v34 = (char *)operator new(8 * v33);
      }
      else
      {
        v34 = 0;
      }
      v38 = (unint64_t *)&v34[8 * v30];
      v39 = &v34[8 * v33];
      *v38 = v15;
      v22 = v38 + 1;
      if (v20 == v29)
      {
        a7 = v208;
        v41 = (_QWORD *)v212;
      }
      else
      {
        a7 = v208;
        do
        {
          v40 = *--v20;
          *--v38 = v40;
        }
        while (v20 != v29);
        v41 = (_QWORD *)v212;
        v20 = *(unint64_t **)(v212 + 24);
      }
      v41[3] = v38;
      v41[4] = v22;
      v41[5] = v39;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v20 = v15;
      v22 = v20 + 1;
    }
    *(_QWORD *)(v212 + 32) = v22;
    goto LABEL_42;
  }
  *(_QWORD *)v15 = v14;
  v17 = (unint64_t *)v14[2];
  v16 = v14[3];
  if ((unint64_t)v17 >= v16)
  {
    v23 = (_QWORD *)v14[1];
    v24 = v17 - v23;
    v25 = v24 + 1;
    if (!((unint64_t)(v24 + 1) >> 61))
    {
      v26 = v16 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (!v27)
      {
        v28 = 0;
LABEL_25:
        v35 = (unint64_t *)&v28[8 * v24];
        v36 = &v28[8 * v27];
        *v35 = v15;
        v18 = v35 + 1;
        if (v17 == v23)
        {
          a7 = v208;
        }
        else
        {
          a7 = v208;
          do
          {
            v37 = *--v17;
            *--v35 = v37;
          }
          while (v17 != v23);
          v17 = (unint64_t *)v14[1];
        }
        v14[1] = v35;
        v14[2] = v18;
        v14[3] = v36;
        if (v17)
          operator delete(v17);
        goto LABEL_32;
      }
      if (!(v27 >> 61))
      {
        v28 = (char *)operator new(8 * v27);
        goto LABEL_25;
      }
LABEL_261:
      sub_1C4764EE4();
    }
LABEL_260:
    abort();
  }
  *v17 = v15;
  v18 = v17 + 1;
LABEL_32:
  v14[2] = v18;
LABEL_42:
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v217);
  if (!LoopPredecessor)
    goto LABEL_49;
  v43 = *(_QWORD *)(LoopPredecessor + 40);
  if (v43 == LoopPredecessor + 40)
    goto LABEL_49;
  if (v43)
    v44 = v43 - 24;
  else
    v44 = 0;
  if (*(_BYTE *)(v44 + 16) == 30)
  {
    if ((*(_DWORD *)(v44 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_49:
      v45 = 0;
      goto LABEL_54;
    }
  }
  else
  {
    v45 = 0;
    switch(*(_BYTE *)(v44 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_54;
      case 0x1E:
        __break(1u);
        goto LABEL_263;
      case 0x1F:
        v46 = (*(_DWORD *)(v44 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_263:
        v46 = (*(_DWORD *)(v44 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v46 = *(_DWORD *)(v44 + 80) + 1;
        break;
      default:
        goto LABEL_49;
    }
    if (v46 != 1)
      goto LABEL_49;
  }
  v45 = (uint64_t ***)LoopPredecessor;
LABEL_54:
  v47 = llvm::CloneBasicBlock(v45, a4, a5, v211, 0, 0);
  v219 = 2;
  v220 = 0;
  v221 = v45;
  if (v45 != (uint64_t ***)-8192 && v45 != (uint64_t ***)-4096 && v45)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v219);
  v218 = &unk_1E814DA10;
  v222 = a4;
  v48 = sub_1C52E2ED8(a4, &v218);
  if (v221 != (uint64_t ***)-8192 && v221 != (uint64_t ***)-4096 && v221)
  {
    v49 = v219 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v219 & 0xFFFFFFFFFFFFFFF8) = v220;
    if (v220)
    {
      *v220 = *v220 & 7 | v49;
    }
    else
    {
      v50 = v221;
      v51 = (int32x2_t *)***v221;
      v52 = (unint64_t)v51[303];
      if (v52 <= v49)
      {
        v53 = v51[305].u32[0];
        if (v52 + 16 * v53 > v49)
        {
          v54 = v53 - 1;
          LODWORD(v55) = v54 & ((v221 >> 4) ^ (v221 >> 9));
          v56 = (uint64_t ****)(v52 + 16 * v55);
          v57 = *v56;
          if (v221 == *v56)
          {
LABEL_69:
            *v56 = (uint64_t ***)-8192;
            v51[304] = vadd_s32(v51[304], (int32x2_t)0x1FFFFFFFFLL);
            v50 = v221;
          }
          else
          {
            v58 = 1;
            while (v57 != (uint64_t ***)-4096)
            {
              v59 = v55 + v58++;
              v55 = v59 & v54;
              v57 = *(uint64_t ****)(v52 + 16 * v55);
              if (v221 == v57)
              {
                v56 = (uint64_t ****)(v52 + 16 * v55);
                goto LABEL_69;
              }
            }
          }
          *((_BYTE *)v50 + 17) &= ~1u;
        }
      }
    }
  }
  v60 = v48[7];
  if (v60 != v47)
  {
    if (v60 && v60 != -8192 && v60 != -4096)
    {
      v193 = v48[5] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v193 = v48[6];
      v194 = (unint64_t *)v48[6];
      if (v194)
      {
        *v194 = *v194 & 7 | v193;
      }
      else
      {
        v195 = v48[7];
        v196 = ***(int32x2_t ****)v195;
        v197 = (unint64_t)v196[303];
        if (v197 <= v193)
        {
          v198 = v196[305].u32[0];
          if (v197 + 16 * v198 > v193)
          {
            v199 = v198 - 1;
            LODWORD(v200) = v199 & ((v195 >> 4) ^ (v195 >> 9));
            v201 = (uint64_t *)(v197 + 16 * v200);
            v202 = *v201;
            if (v195 == *v201)
            {
LABEL_257:
              *v201 = -8192;
              v196[304] = vadd_s32(v196[304], (int32x2_t)0x1FFFFFFFFLL);
              v195 = v48[7];
            }
            else
            {
              v203 = 1;
              while (v202 != -4096)
              {
                v204 = v200 + v203++;
                v200 = v204 & v199;
                v202 = *(_QWORD *)(v197 + 16 * v200);
                if (v195 == v202)
                {
                  v201 = (uint64_t *)(v197 + 16 * v200);
                  goto LABEL_257;
                }
              }
            }
            *(_BYTE *)(v195 + 17) &= ~1u;
          }
        }
      }
    }
    v48[7] = v47;
    if (v47 != -8192 && v47 != -4096 && v47)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v48 + 5));
  }
  v61 = *(unsigned int *)(a8 + 8);
  if (v61 >= *(_DWORD *)(a8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a8, a8 + 16, v61 + 1, 8);
    LODWORD(v61) = *(_DWORD *)(a8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a8 + 8 * v61) = v47;
  ++*(_DWORD *)(a8 + 8);
  if (v14)
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v14, v47, v212);
  v205 = a1;
  v206 = v15;
  v209 = v47;
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(a7, v47, a2);
  v218 = &v220;
  v220 = (unint64_t *)v217;
  v219 = 0x400000001;
  sub_1C4EAF900(v217, (uint64_t)&v218);
  v62 = (unint64_t **)v218;
  if ((_DWORD)v219)
  {
    v63 = (unint64_t **)((char *)v218 + 8 * v219);
    do
    {
      v214 = *v62;
      v64 = sub_1C4EB63C4(v215, &v214);
      if (!v64[1])
      {
        v65 = v64;
        v66 = sub_1C484358C(v207, 152, 3);
        *(_OWORD *)v66 = 0u;
        *(_OWORD *)(v66 + 16) = 0u;
        *(_OWORD *)(v66 + 32) = 0u;
        *(_OWORD *)(v66 + 48) = 0u;
        *(_OWORD *)(v66 + 64) = 0u;
        *(_OWORD *)(v66 + 80) = 0u;
        *(_OWORD *)(v66 + 96) = 0u;
        *(_OWORD *)(v66 + 112) = 0u;
        *(_OWORD *)(v66 + 128) = 0u;
        *(_QWORD *)(v66 + 144) = 0;
        *(_QWORD *)(v66 + 56) = v66 + 88;
        *(_QWORD *)(v66 + 64) = v66 + 88;
        *(_DWORD *)(v66 + 72) = 8;
        v65[1] = v66;
        v213 = 0;
        v213 = *v214;
        v67 = (_QWORD *)sub_1C4EB63C4(v215, &v213)[1];
        v68 = (_QWORD *)v65[1];
        *v68 = v67;
        v70 = (_QWORD *)v67[2];
        v69 = v67[3];
        if ((unint64_t)v70 >= v69)
        {
          v72 = (_QWORD *)v67[1];
          v73 = v70 - v72;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 61)
            goto LABEL_260;
          v75 = v69 - (_QWORD)v72;
          if (v75 >> 2 > v74)
            v74 = v75 >> 2;
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
            v76 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v76 = v74;
          if (v76)
          {
            if (v76 >> 61)
              goto LABEL_261;
            v77 = (char *)operator new(8 * v76);
          }
          else
          {
            v77 = 0;
          }
          v78 = &v77[8 * v73];
          *(_QWORD *)v78 = v68;
          v71 = v78 + 8;
          if (v70 == v72)
          {
            a7 = v208;
          }
          else
          {
            a7 = v208;
            do
            {
              v79 = *--v70;
              *((_QWORD *)v78 - 1) = v79;
              v78 -= 8;
            }
            while (v70 != v72);
            v70 = (_QWORD *)v67[1];
          }
          v67[1] = v78;
          v67[2] = v71;
          v67[3] = &v77[8 * v76];
          if (v70)
            operator delete(v70);
        }
        else
        {
          *v70 = v68;
          v71 = v70 + 1;
          a7 = v208;
        }
        v67[2] = v71;
      }
      ++v62;
    }
    while (v62 != v63);
    v62 = (unint64_t **)v218;
  }
  if (v62 != &v220)
    free(v62);
  v81 = *(uint64_t *****)(v217 + 32);
  v80 = *(uint64_t *****)(v217 + 40);
  if (v80 == v81)
    goto LABEL_241;
  v82 = v212;
  do
  {
    v83 = *v81;
    v214 = 0;
    v84 = *(_DWORD *)(v82 + 16);
    if (!v84)
      goto LABEL_117;
    v85 = *(_QWORD *)v82;
    v86 = v84 - 1;
    v87 = (v84 - 1) & ((v83 >> 4) ^ (v83 >> 9));
    v88 = *(uint64_t ****)(*(_QWORD *)v82 + 16 * v87);
    if (v83 != v88)
    {
      v89 = 1;
      while (v88 != (uint64_t ***)-4096)
      {
        v90 = v87 + v89++;
        v87 = v90 & v86;
        v88 = *(uint64_t ****)(v85 + 16 * v87);
        if (v83 == v88)
          goto LABEL_116;
      }
LABEL_117:
      v91 = 0;
      goto LABEL_118;
    }
LABEL_116:
    v91 = *(unint64_t **)(v85 + 16 * v87 + 8);
LABEL_118:
    v214 = v91;
    v92 = sub_1C4EB63C4(v215, &v214);
    v93 = llvm::CloneBasicBlock(v83, a4, a5, v211, 0, 0);
    v219 = 2;
    v220 = 0;
    v221 = v83;
    if (v83 != (uint64_t ***)-8192 && v83 != (uint64_t ***)-4096 && v83 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v219);
    v218 = &unk_1E814DA10;
    v222 = a4;
    v95 = sub_1C52E2ED8(a4, &v218);
    if (v221 != (uint64_t ***)-8192 && v221 != (uint64_t ***)-4096 && v221)
    {
      v96 = v219 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v219 & 0xFFFFFFFFFFFFFFF8) = v220;
      if (v220)
      {
        *v220 = *v220 & 7 | v96;
      }
      else
      {
        v97 = v221;
        v98 = (int32x2_t *)***v221;
        v99 = (unint64_t)v98[303];
        if (v99 <= v96)
        {
          v100 = v98[305].u32[0];
          if (v99 + 16 * v100 > v96)
          {
            v101 = v100 - 1;
            LODWORD(v102) = v101 & ((v221 >> 4) ^ (v221 >> 9));
            v103 = (uint64_t ****)(v99 + 16 * v102);
            v104 = *v103;
            if (v221 == *v103)
            {
LABEL_135:
              *v103 = (uint64_t ***)-8192;
              v98[304] = vadd_s32(v98[304], (int32x2_t)0x1FFFFFFFFLL);
              v97 = v221;
            }
            else
            {
              v105 = 1;
              while (v104 != (uint64_t ***)-4096)
              {
                v106 = v102 + v105++;
                v102 = v106 & v101;
                v104 = *(uint64_t ****)(v99 + 16 * v102);
                if (v221 == v104)
                {
                  v103 = (uint64_t ****)(v99 + 16 * v102);
                  goto LABEL_135;
                }
              }
            }
            *((_BYTE *)v97 + 17) &= ~1u;
          }
        }
      }
    }
    v107 = v95[7];
    if (v107 != v93)
    {
      if (v107 && v107 != -8192 && v107 != -4096)
      {
        v110 = v95[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v110 = v95[6];
        v111 = (unint64_t *)v95[6];
        if (v111)
        {
          *v111 = *v111 & 7 | v110;
        }
        else
        {
          v112 = v95[7];
          v113 = ***(int32x2_t ****)v112;
          v114 = (unint64_t)v113[303];
          if (v114 <= v110)
          {
            v115 = v113[305].u32[0];
            if (v114 + 16 * v115 > v110)
            {
              v116 = v115 - 1;
              LODWORD(v117) = v116 & ((v112 >> 4) ^ (v112 >> 9));
              v118 = (uint64_t *)(v114 + 16 * v117);
              v119 = *v118;
              if (v112 == *v118)
              {
LABEL_158:
                *v118 = -8192;
                v113[304] = vadd_s32(v113[304], (int32x2_t)0x1FFFFFFFFLL);
                v112 = v95[7];
              }
              else
              {
                v120 = 1;
                while (v119 != -4096)
                {
                  v121 = v117 + v120++;
                  v117 = v121 & v116;
                  v119 = *(_QWORD *)(v114 + 16 * v117);
                  if (v112 == v119)
                  {
                    v118 = (uint64_t *)(v114 + 16 * v117);
                    goto LABEL_158;
                  }
                }
              }
              *(_BYTE *)(v112 + 17) &= ~1u;
            }
          }
        }
      }
      v95[7] = v93;
      if (v93 != -8192 && v93 != -4096 && v93)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v95 + 5));
    }
    v108 = (_QWORD *)v92[1];
    v82 = v212;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v108, v93, v212);
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(a7, v93, v209);
    v109 = *(unsigned int *)(a8 + 8);
    if (v109 >= *(unsigned int *)(a8 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a8, a8 + 16, v109 + 1, 8);
      v109 = *(unsigned int *)(a8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a8 + 8 * v109) = v93;
    ++*(_DWORD *)(a8 + 8);
    ++v81;
  }
  while (v81 != v80);
  v122 = *(uint64_t *****)(v217 + 32);
  for (i = *(uint64_t *****)(v217 + 40); v122 != i; ++v122)
  {
    v124 = *v122;
    v214 = 0;
    v125 = (v124 >> 4) ^ (v124 >> 9);
    v126 = *(_DWORD *)(v212 + 16) - 1;
    v127 = v126 & v125;
    v128 = (_QWORD *)(*(_QWORD *)v212 + 16 * (v126 & v125));
    v129 = *v128;
    if (v124 != (uint64_t ***)*v128)
    {
      v130 = 0;
      v131 = 1;
      while (v129 != -4096)
      {
        if (v130)
          v132 = 0;
        else
          v132 = v129 == -8192;
        if (v132)
          v130 = v128;
        v133 = v127 + v131++;
        v127 = v133 & v126;
        v128 = (_QWORD *)(*(_QWORD *)v212 + 16 * (v133 & v126));
        v129 = *v128;
        if (v124 == (uint64_t ***)*v128)
          goto LABEL_174;
      }
      if (v130)
        v128 = v130;
    }
LABEL_174:
    v214 = (unint64_t *)v128[1];
    if (v124 == *(uint64_t ****)v214[4])
    {
      v134 = sub_1C4EB63C4(v215, &v214)[1];
      v219 = 2;
      v220 = 0;
      v221 = v124;
      if (v124 != (uint64_t ***)-8192 && v124 != (uint64_t ***)-4096 && v124)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v219);
      v218 = &unk_1E814DA10;
      v222 = a4;
      v135 = sub_1C52E2ED8(a4, &v218);
      if (v221 != (uint64_t ***)-8192 && v221 != (uint64_t ***)-4096 && v221)
      {
        v136 = v219 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v219 & 0xFFFFFFFFFFFFFFF8) = v220;
        if (v220)
        {
          *v220 = *v220 & 7 | v136;
        }
        else
        {
          v137 = v221;
          v138 = (int32x2_t *)***v221;
          v139 = (unint64_t)v138[303];
          if (v139 <= v136)
          {
            v140 = v138[305].u32[0];
            if (v139 + 16 * v140 > v136)
            {
              v141 = v140 - 1;
              LODWORD(v142) = v141 & ((v221 >> 4) ^ (v221 >> 9));
              v143 = (uint64_t ****)(v139 + 16 * v142);
              v144 = *v143;
              if (v221 == *v143)
              {
LABEL_190:
                *v143 = (uint64_t ***)-8192;
                v138[304] = vadd_s32(v138[304], (int32x2_t)0x1FFFFFFFFLL);
                v137 = v221;
              }
              else
              {
                v145 = 1;
                while (v144 != (uint64_t ***)-4096)
                {
                  v146 = v142 + v145++;
                  v142 = v146 & v141;
                  v144 = *(uint64_t ****)(v139 + 16 * v142);
                  if (v221 == v144)
                  {
                    v143 = (uint64_t ****)(v139 + 16 * v142);
                    goto LABEL_190;
                  }
                }
              }
              *((_BYTE *)v137 + 17) &= ~1u;
            }
          }
        }
      }
      v147 = v135[7];
      v148 = *(_QWORD **)(v134 + 32);
      if (*v148 != v147)
      {
        v149 = 0;
        do
        {
          v150 = v149;
          v151 = v148[v149++];
        }
        while (v151 != v147);
        v148[v150] = *v148;
        **(_QWORD **)(v134 + 32) = v147;
      }
    }
    v152 = *(_QWORD *)(a7 + 24);
    v153 = *(unsigned int *)(a7 + 40);
    if ((_DWORD)v153)
    {
      LODWORD(v154) = (v153 - 1) & v125;
      v155 = (uint64_t ****)(v152 + 16 * v154);
      v156 = *v155;
      if (v124 == *v155)
        goto LABEL_204;
      v157 = 1;
      while (v156 != (uint64_t ***)-4096)
      {
        v158 = v154 + v157++;
        v154 = v158 & (v153 - 1);
        v156 = *(uint64_t ****)(v152 + 16 * v154);
        if (v124 == v156)
        {
          v155 = (uint64_t ****)(v152 + 16 * v154);
          goto LABEL_204;
        }
      }
    }
    v155 = (uint64_t ****)(v152 + 16 * v153);
LABEL_204:
    v159 = (uint64_t ***)*v155[1][1];
    v219 = 2;
    v220 = 0;
    v221 = v124;
    if (v124 != (uint64_t ***)-8192 && v124 != (uint64_t ***)-4096 && v124)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v219);
    v218 = &unk_1E814DA10;
    v222 = a4;
    v160 = sub_1C52E2ED8(a4, &v218);
    if (v221 != (uint64_t ***)-8192 && v221 != (uint64_t ***)-4096 && v221)
    {
      v161 = v219 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v219 & 0xFFFFFFFFFFFFFFF8) = v220;
      if (v220)
      {
        *v220 = *v220 & 7 | v161;
      }
      else
      {
        v162 = v221;
        v163 = (int32x2_t *)***v221;
        v164 = (unint64_t)v163[303];
        if (v164 <= v161)
        {
          v165 = v163[305].u32[0];
          if (v164 + 16 * v165 > v161)
          {
            v166 = v165 - 1;
            LODWORD(v167) = v166 & ((v221 >> 4) ^ (v221 >> 9));
            v168 = (uint64_t ****)(v164 + 16 * v167);
            v169 = *v168;
            if (v221 == *v168)
            {
LABEL_219:
              *v168 = (uint64_t ***)-8192;
              v163[304] = vadd_s32(v163[304], (int32x2_t)0x1FFFFFFFFLL);
              v162 = v221;
            }
            else
            {
              v170 = 1;
              while (v169 != (uint64_t ***)-4096)
              {
                v171 = v167 + v170++;
                v167 = v171 & v166;
                v169 = *(uint64_t ****)(v164 + 16 * v167);
                if (v221 == v169)
                {
                  v168 = (uint64_t ****)(v164 + 16 * v167);
                  goto LABEL_219;
                }
              }
            }
            *((_BYTE *)v162 + 17) &= ~1u;
          }
        }
      }
    }
    v172 = v160[7];
    v219 = 2;
    v220 = 0;
    v221 = v159;
    if (v159 != (uint64_t ***)-8192 && v159 != (uint64_t ***)-4096 && v159)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v219);
    v218 = &unk_1E814DA10;
    v222 = a4;
    v173 = sub_1C52E2ED8(a4, &v218);
    if (v221 != (uint64_t ***)-8192 && v221 != (uint64_t ***)-4096 && v221)
    {
      v174 = v219 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v219 & 0xFFFFFFFFFFFFFFF8) = v220;
      if (v220)
      {
        *v220 = *v220 & 7 | v174;
      }
      else
      {
        v175 = v221;
        v176 = (int32x2_t *)***v221;
        v177 = (unint64_t)v176[303];
        if (v177 <= v174)
        {
          v178 = v176[305].u32[0];
          if (v177 + 16 * v178 > v174)
          {
            v179 = v178 - 1;
            LODWORD(v180) = v179 & ((v221 >> 4) ^ (v221 >> 9));
            v181 = (uint64_t ****)(v177 + 16 * v180);
            v182 = *v181;
            if (v221 == *v181)
            {
LABEL_237:
              *v181 = (uint64_t ***)-8192;
              v176[304] = vadd_s32(v176[304], (int32x2_t)0x1FFFFFFFFLL);
              v175 = v221;
            }
            else
            {
              v183 = 1;
              while (v182 != (uint64_t ***)-4096)
              {
                v184 = v180 + v183++;
                v180 = v184 & v179;
                v182 = *(uint64_t ****)(v177 + 16 * v180);
                if (v221 == v182)
                {
                  v181 = (uint64_t ****)(v177 + 16 * v180);
                  goto LABEL_237;
                }
              }
            }
            *((_BYTE *)v175 + 17) &= ~1u;
          }
        }
      }
    }
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(a7, v172, v173[7]);
  }
LABEL_241:
  v185 = (uint64_t *)(v211 + 72);
  v186 = (uint64_t *)(v205 + 24);
  sub_1C4FCEAA0(v211 + 72, (uint64_t *)(v205 + 24), v211 + 72, (uint64_t *)(v209 + 24));
  v187 = (uint64_t *)(**(_QWORD **)(v206 + 32) + 24);
  if (v187 != (uint64_t *)(v211 + 72) && v186 != v185)
  {
    v189 = *v185;
    v190 = *v187;
    *(_QWORD *)(v190 + 8) = v185;
    *v185 = v190;
    v191 = *v186;
    *(_QWORD *)(v189 + 8) = v186;
    *v187 = v191;
    *(_QWORD *)(v191 + 8) = v187;
    *v186 = v189;
  }
  MEMORY[0x1CAA32FB4](v215[0], 8);
  return v206;
}

uint64_t llvm::DuplicateInstructionsInSplitBetween(unint64_t a1, llvm *a2, uint64_t ***a3, uint64_t a4, uint64_t a5, uint64_t a6, const llvm::Twine *a7)
{
  uint64_t v10;
  uint64_t ***v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ***v16;
  uint64_t ***v17;
  uint64_t **v18;
  _QWORD *v19;
  unint64_t v20;
  int32x2_t ****v21;
  int32x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int32x2_t *****v27;
  int32x2_t ****v28;
  int v29;
  int v30;
  uint64_t **v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  int32x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t ***v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm **v51;
  llvm *v52;
  int v53;
  int v54;
  llvm *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ***v59;
  uint64_t ***v60;
  uint64_t ***v61;
  _QWORD *v62;
  uint64_t **v63;
  _QWORD *v64;
  uint64_t ***v65;
  uint64_t ***v66;
  uint64_t ***v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ****v72;
  uint64_t ***v73;
  int v74;
  int v75;
  uint64_t ***v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t **v80;
  uint64_t *v81;
  _QWORD *v82;
  unint64_t v83;
  int32x2_t ****v84;
  int32x2_t *v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  int32x2_t *****v90;
  int32x2_t ****v91;
  int v92;
  int v93;
  uint64_t ***v94;
  uint64_t v95;
  uint64_t i;
  int v97;
  uint64_t ***v98;
  uint64_t **v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t **v105;
  int v106;
  int v107;
  uint64_t ***v108;
  uint64_t v109;
  uint64_t ***v110;
  uint64_t **v111;
  uint64_t **v112;
  uint64_t **v113;
  uint64_t **v114;
  uint64_t ***v115;
  uint64_t *v116;
  llvm::ValueSymbolTable *v117;
  unint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  int32x2_t *v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  int v128;
  int v129;
  char *v133;
  uint64_t v134;
  char *v135;
  int32x2_t ****v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 48);
  v11 = (uint64_t ***)(v10 - 24);
  if (v10)
    v12 = v10 - 24;
  else
    v12 = 0;
  if (v10 && *(_BYTE *)(v12 + 16) == 83)
  {
    do
    {
      v13 = *((_DWORD *)v11 + 5);
      v14 = v13 & 0x7FFFFFF;
      if ((v13 & 0x7FFFFFF) != 0)
      {
        v15 = 0;
        while (1)
        {
          v16 = &v11[-4 * v14];
          if ((v13 & 0x40000000) != 0)
            v16 = (uint64_t ***)*(v11 - 1);
          if ((&v16[4 * *((unsigned int *)v11 + 15)])[v15] == (uint64_t **)a2)
            break;
          if (v14 == ++v15)
            goto LABEL_12;
        }
      }
      else
      {
LABEL_12:
        LODWORD(v15) = -1;
      }
      if ((v13 & 0x40000000) != 0)
        v17 = (uint64_t ***)*(v11 - 1);
      else
        v17 = &v11[-4 * v14];
      v18 = v17[4 * v15];
      v134 = 2;
      v135 = 0;
      v136 = (int32x2_t ****)v11;
      if (v11 != (uint64_t ***)-8192 && v11 != (uint64_t ***)-4096 && v11)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v134);
      v133 = (char *)&unk_1E814DA10;
      v137 = a4;
      v19 = sub_1C52E2ED8(a4, &v133);
      if (v136 != (int32x2_t ****)-8192 && v136 != (int32x2_t ****)-4096 && v136)
      {
        v20 = v134 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v134 & 0xFFFFFFFFFFFFFFF8) = v135;
        if (v135)
        {
          *(_QWORD *)v135 = *(_QWORD *)v135 & 7 | v20;
        }
        else
        {
          v21 = v136;
          v22 = ***v136;
          v23 = (unint64_t)v22[303];
          if (v23 <= v20)
          {
            v24 = v22[305].u32[0];
            if (v23 + 16 * v24 > v20)
            {
              v25 = v24 - 1;
              LODWORD(v26) = v25 & ((v136 >> 4) ^ (v136 >> 9));
              v27 = (int32x2_t *****)(v23 + 16 * v26);
              v28 = *v27;
              if (v136 == *v27)
              {
LABEL_30:
                *v27 = (int32x2_t ****)-8192;
                v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
                v21 = v136;
              }
              else
              {
                v29 = 1;
                while (v28 != (int32x2_t ****)-4096)
                {
                  v30 = v26 + v29++;
                  v26 = v30 & v25;
                  v28 = *(int32x2_t *****)(v23 + 16 * v26);
                  if (v136 == v28)
                  {
                    v27 = (int32x2_t *****)(v23 + 16 * v26);
                    goto LABEL_30;
                  }
                }
              }
              *((_BYTE *)v21 + 17) &= ~1u;
            }
          }
        }
      }
      v31 = (uint64_t **)v19[7];
      if (v31 != v18)
      {
        if (v31 && v31 != (uint64_t **)-8192 && v31 != (uint64_t **)-4096)
        {
          v33 = v19[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v33 = v19[6];
          v34 = (unint64_t *)v19[6];
          if (v34)
          {
            *v34 = *v34 & 7 | v33;
          }
          else
          {
            v35 = v19[7];
            v36 = ***(int32x2_t ****)v35;
            v37 = (unint64_t)v36[303];
            if (v37 <= v33)
            {
              v38 = v36[305].u32[0];
              if (v37 + 16 * v38 > v33)
              {
                v39 = v38 - 1;
                LODWORD(v40) = v39 & ((v35 >> 4) ^ (v35 >> 9));
                v41 = (uint64_t *)(v37 + 16 * v40);
                v42 = *v41;
                if (v35 == *v41)
                {
LABEL_55:
                  *v41 = -8192;
                  v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
                  v35 = v19[7];
                }
                else
                {
                  v43 = 1;
                  while (v42 != -4096)
                  {
                    v44 = v40 + v43++;
                    v40 = v44 & v39;
                    v42 = *(_QWORD *)(v37 + 16 * v40);
                    if (v35 == v42)
                    {
                      v41 = (uint64_t *)(v37 + 16 * v40);
                      goto LABEL_55;
                    }
                  }
                }
                *(_BYTE *)(v35 + 17) &= ~1u;
              }
            }
          }
        }
        v19[7] = v18;
        if (v18 != (uint64_t **)-8192 && v18 != (uint64_t **)-4096 && v18)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v19 + 5));
      }
      v10 = *(_QWORD *)(v10 + 8);
      v11 = (uint64_t ***)(v10 - 24);
      if (v10)
        v32 = v10 - 24;
      else
        v32 = 0;
    }
    while (v10 && *(_BYTE *)(v32 + 16) == 83);
  }
  LOWORD(v137) = 257;
  v45 = (uint64_t ***)llvm::SplitEdge(a2, (llvm::BasicBlock *)a1, 0, 0, 0, (llvm::MemorySSAUpdater *)&v133, a7);
  v46 = (uint64_t)v45;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v47 = ***(_QWORD ***)a2;
    v48 = *(_QWORD *)(v47 + 152);
    v49 = *(unsigned int *)(v47 + 168);
    if ((_DWORD)v49)
    {
      LODWORD(v50) = (v49 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v51 = (llvm **)(v48 + 16 * v50);
      v52 = *v51;
      if (*v51 == a2)
      {
LABEL_67:
        v55 = v51[1];
        v58 = *(_QWORD *)v55;
        v56 = (char *)v55 + 16;
        v57 = v58;
        goto LABEL_68;
      }
      v53 = 1;
      while (v52 != (llvm *)-4096)
      {
        v54 = v50 + v53++;
        v50 = v54 & (v49 - 1);
        v52 = *(llvm **)(v48 + 16 * v50);
        if (v52 == a2)
        {
          v51 = (llvm **)(v48 + 16 * v50);
          goto LABEL_67;
        }
      }
    }
    v51 = (llvm **)(v48 + 16 * v49);
    goto LABEL_67;
  }
  v57 = 0;
  v56 = &byte_1C871356D;
LABEL_68:
  LOWORD(v137) = 773;
  v133 = v56;
  v134 = v57;
  v135 = ".split";
  llvm::Value::setName(v45, (uint64_t)&v133);
  v59 = *(uint64_t ****)(v46 + 40);
  if (v59 == (uint64_t ***)(v46 + 40))
  {
    v61 = 0;
  }
  else
  {
    if (v59)
      v60 = v59 - 3;
    else
      v60 = 0;
    if (*((unsigned __int8 *)v60 + 16) - 29 >= 0xB)
      v61 = 0;
    else
      v61 = v60;
  }
  v133 = (char *)a2;
  v134 = a1 | 4;
  v135 = (char *)a2;
  v136 = (int32x2_t ****)(v46 & 0xFFFFFFFFFFFFFFFBLL);
  v137 = v46;
  v138 = a1 & 0xFFFFFFFFFFFFFFFBLL;
  llvm::DomTreeUpdater::applyUpdates(a5, (unint64_t *)&v133, 3);
  if (v11 != a3)
  {
    v62 = (_QWORD *)(a1 + 40);
    v63 = (uint64_t **)(v61 + 3);
    while (1)
    {
      v64 = (_QWORD *)*v62;
      if ((_QWORD *)*v62 == v62)
      {
        v65 = 0;
      }
      else
      {
        if (v64)
          v65 = (uint64_t ***)(v64 - 3);
        else
          v65 = 0;
        if (*((unsigned __int8 *)v65 + 16) - 29 >= 0xB)
          v65 = 0;
      }
      if (v65 == v11)
        return v46;
      llvm::Instruction::clone((llvm::Instruction *)v11);
      v67 = v66;
      if ((*((_BYTE *)v11 + 23) & 0x10) != 0)
        break;
      v77 = 0;
      v78 = &byte_1C871356D;
LABEL_96:
      LOWORD(v137) = 261;
      v133 = v78;
      v134 = v77;
      llvm::Value::setName(v66, (uint64_t)&v133);
      v80 = v61[5];
      v67[5] = v80;
      *((_WORD *)v80 + 9) &= ~0x8000u;
      if ((*((_BYTE *)v67 + 23) & 0x10) != 0)
      {
        v116 = v80[7];
        if (v116)
        {
          v117 = (llvm::ValueSymbolTable *)v116[13];
          if (v117)
            llvm::ValueSymbolTable::reinsertValue(v117, (llvm::Value *)v67);
        }
      }
      v81 = *v63;
      v67[3] = (uint64_t **)*v63;
      v67[4] = v63;
      v81[1] = (uint64_t)(v67 + 3);
      *v63 = (uint64_t *)(v67 + 3);
      v134 = 2;
      v135 = 0;
      v136 = (int32x2_t ****)v11;
      if (v11 != (uint64_t ***)-8192 && v11 != (uint64_t ***)-4096 && v11)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v134);
      v133 = (char *)&unk_1E814DA10;
      v137 = a4;
      v82 = sub_1C52E2ED8(a4, &v133);
      if (v136 != (int32x2_t ****)-8192 && v136 != (int32x2_t ****)-4096 && v136)
      {
        v83 = v134 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v134 & 0xFFFFFFFFFFFFFFF8) = v135;
        if (v135)
        {
          *(_QWORD *)v135 = *(_QWORD *)v135 & 7 | v83;
        }
        else
        {
          v84 = v136;
          v85 = ***v136;
          v86 = (unint64_t)v85[303];
          if (v86 <= v83)
          {
            v87 = v85[305].u32[0];
            if (v86 + 16 * v87 > v83)
            {
              v88 = v87 - 1;
              LODWORD(v89) = v88 & ((v136 >> 4) ^ (v136 >> 9));
              v90 = (int32x2_t *****)(v86 + 16 * v89);
              v91 = *v90;
              if (v136 == *v90)
              {
LABEL_112:
                *v90 = (int32x2_t ****)-8192;
                v85[304] = vadd_s32(v85[304], (int32x2_t)0x1FFFFFFFFLL);
                v84 = v136;
              }
              else
              {
                v92 = 1;
                while (v91 != (int32x2_t ****)-4096)
                {
                  v93 = v89 + v92++;
                  v89 = v93 & v88;
                  v91 = *(int32x2_t *****)(v86 + 16 * v89);
                  if (v136 == v91)
                  {
                    v90 = (int32x2_t *****)(v86 + 16 * v89);
                    goto LABEL_112;
                  }
                }
              }
              *((_BYTE *)v84 + 17) &= ~1u;
            }
          }
        }
      }
      v94 = (uint64_t ***)v82[7];
      if (v94 != v67)
      {
        if (v94 && v94 != (uint64_t ***)-8192 && v94 != (uint64_t ***)-4096)
        {
          v118 = v82[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v118 = v82[6];
          v119 = (unint64_t *)v82[6];
          if (v119)
          {
            *v119 = *v119 & 7 | v118;
          }
          else
          {
            v120 = v82[7];
            v121 = ***(int32x2_t ****)v120;
            v122 = (unint64_t)v121[303];
            if (v122 <= v118)
            {
              v123 = v121[305].u32[0];
              if (v122 + 16 * v123 > v118)
              {
                v124 = v123 - 1;
                LODWORD(v125) = v124 & ((v120 >> 4) ^ (v120 >> 9));
                v126 = (uint64_t *)(v122 + 16 * v125);
                v127 = *v126;
                if (v120 == *v126)
                {
LABEL_167:
                  *v126 = -8192;
                  v121[304] = vadd_s32(v121[304], (int32x2_t)0x1FFFFFFFFLL);
                  v120 = v82[7];
                }
                else
                {
                  v128 = 1;
                  while (v127 != -4096)
                  {
                    v129 = v125 + v128++;
                    v125 = v129 & v124;
                    v127 = *(_QWORD *)(v122 + 16 * v125);
                    if (v120 == v127)
                    {
                      v126 = (uint64_t *)(v122 + 16 * v125);
                      goto LABEL_167;
                    }
                  }
                }
                *(_BYTE *)(v120 + 17) &= ~1u;
              }
            }
          }
        }
        v82[7] = v67;
        if (v67 != (uint64_t ***)-8192 && v67 != (uint64_t ***)-4096 && v67)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v82 + 5));
      }
      v95 = *((_DWORD *)v67 + 5) & 0x7FFFFFF;
      if ((_DWORD)v95)
      {
        for (i = 0; i != v95; ++i)
        {
          v97 = *((_DWORD *)v67 + 5);
          if ((v97 & 0x40000000) != 0)
            v98 = (uint64_t ***)*(v67 - 1);
          else
            v98 = &v67[-4 * (v97 & 0x7FFFFFF)];
          v99 = v98[4 * i];
          if (v99)
            v100 = *((unsigned __int8 *)v99 + 16) >= 0x1Cu;
          else
            v100 = 0;
          if (v100)
          {
            v101 = *(unsigned int *)(a4 + 16);
            if ((_DWORD)v101)
            {
              v102 = *(_QWORD *)a4;
              v103 = ((_DWORD)v101 - 1) & ((v99 >> 4) ^ (v99 >> 9));
              v104 = *(_QWORD *)a4 + (v103 << 6);
              v105 = *(uint64_t ***)(v104 + 24);
              if (v99 == v105)
              {
LABEL_136:
                if (v104 != v102 + (v101 << 6))
                {
                  if ((v97 & 0x40000000) != 0)
                    v108 = (uint64_t ***)*(v67 - 1);
                  else
                    v108 = &v67[-4 * (v97 & 0x7FFFFFF)];
                  v109 = *(_QWORD *)(v104 + 56);
                  v110 = &v108[4 * i];
                  if (*v110)
                  {
                    *v110[2] = (uint64_t *)v110[1];
                    v111 = v110[1];
                    if (v111)
                      v111[2] = (uint64_t *)v110[2];
                  }
                  *v110 = (uint64_t **)v109;
                  if (v109)
                  {
                    v114 = *(uint64_t ***)(v109 + 8);
                    v112 = (uint64_t **)(v109 + 8);
                    v113 = v114;
                    v115 = &v108[4 * i];
                    v115[1] = v114;
                    if (v114)
                      v113[2] = (uint64_t *)(v115 + 1);
                    v115[2] = v112;
                    *v112 = (uint64_t *)v110;
                  }
                }
              }
              else
              {
                v106 = 1;
                while (v105 != (uint64_t **)-4096)
                {
                  v107 = v103 + v106++;
                  v103 = v107 & (v101 - 1);
                  v104 = v102 + (v103 << 6);
                  v105 = *(uint64_t ***)(v104 + 24);
                  if (v99 == v105)
                    goto LABEL_136;
                }
              }
            }
          }
        }
      }
      v10 = *(_QWORD *)(v10 + 8);
      if (v10)
        v11 = (uint64_t ***)(v10 - 24);
      else
        v11 = 0;
      if (v11 == a3)
        return v46;
    }
    v68 = ***v11;
    v69 = *(_QWORD *)(v68 + 152);
    v70 = *(unsigned int *)(v68 + 168);
    if ((_DWORD)v70)
    {
      LODWORD(v71) = (v70 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v72 = (uint64_t ****)(v69 + 16 * v71);
      v73 = *v72;
      if (*v72 == v11)
      {
LABEL_95:
        v76 = v72[1];
        v79 = (uint64_t)*v76;
        v78 = (char *)(v76 + 2);
        v77 = v79;
        goto LABEL_96;
      }
      v74 = 1;
      while (v73 != (uint64_t ***)-4096)
      {
        v75 = v71 + v74++;
        v71 = v75 & (v70 - 1);
        v73 = *(uint64_t ****)(v69 + 16 * v71);
        if (v73 == v11)
        {
          v72 = (uint64_t ****)(v69 + 16 * v71);
          goto LABEL_95;
        }
      }
    }
    v72 = (uint64_t ****)(v69 + 16 * v70);
    goto LABEL_95;
  }
  return v46;
}

void llvm::cloneNoAliasScopes(uint64_t *a1, uint64_t a2, uint64_t a3, void *__src, size_t __len, uint64_t *a6)
{
  uint64_t *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 *p_dst;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned __int8 *v23;
  size_t v24;
  llvm::MDNode *v25;
  uint64_t *v26;
  unint64_t v27;
  size_t __sz;
  _QWORD *v29;
  _QWORD v30[3];
  __int16 v31;
  __int128 __dst;
  unint64_t v33;
  size_t v34;
  __int16 v35;
  __int128 v36;
  unint64_t v37;
  void *__p[2];
  unint64_t v39;
  uint64_t *v40;

  v40 = a6;
  if (a2)
  {
    v9 = a1;
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    __sz = v10 + 1;
    v26 = &a1[a2];
    v27 = (v10 + 1) | 0x8000000000000000;
    while (1)
    {
      v11 = *v9;
      v12 = *(unsigned int *)(*v9 + 8);
      if ((_DWORD)v12)
        break;
LABEL_38:
      if (++v9 == v26)
        return;
    }
    v13 = -8 * v12;
    while (1)
    {
      v14 = *(unsigned __int8 **)(v11 + v13);
      if (*v14 - 4 <= 0x1E)
        break;
LABEL_33:
      v13 += 8;
      if (!v13)
        goto LABEL_38;
    }
    __p[1] = 0;
    v39 = 0;
    __p[0] = 0;
    v15 = *((unsigned int *)v14 + 2);
    if (v15 >= 3)
    {
      v16 = *(_QWORD *)&v14[-8 * v15 + 16];
      if (v16)
      {
        if (!*(_BYTE *)v16)
        {
          v17 = *(uint64_t **)(v16 + 8);
          v18 = *v17;
          if (*v17)
          {
            v29 = v17 + 3;
            v30[0] = v18;
            v30[1] = ":";
            v31 = 773;
            *(_QWORD *)&__dst = &v29;
            v33 = (unint64_t)__src;
            v34 = __len;
            v35 = 1282;
            llvm::Twine::str((llvm::Twine *)&__dst, &v36);
            if (SHIBYTE(v39) < 0)
              operator delete(__p[0]);
            *(_OWORD *)__p = v36;
            v20 = v37;
            goto LABEL_21;
          }
        }
      }
    }
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      p_dst = (__int128 *)operator new(__sz);
      *((_QWORD *)&__dst + 1) = __len;
      v33 = v27;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = __len;
      p_dst = &__dst;
      if (!__len)
        goto LABEL_18;
    }
    memmove(p_dst, __src, __len);
LABEL_18:
    *((_BYTE *)p_dst + __len) = 0;
    if (SHIBYTE(v39) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = __dst;
    v20 = v33;
LABEL_21:
    v39 = v20;
    v21 = *((unsigned int *)v14 + 2);
    if (v21 >= 2)
    {
      v22 = *(_BYTE **)&v14[-8 * v21 + 8];
      if (v22)
      {
        switch(*v22)
        {
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
            break;
          default:
            goto LABEL_22;
        }
      }
    }
    else
    {
LABEL_22:
      v22 = 0;
    }
    if ((v39 & 0x8000000000000000) == 0)
      v23 = (unsigned __int8 *)__p;
    else
      v23 = (unsigned __int8 *)__p[0];
    if ((v39 & 0x8000000000000000) == 0)
      v24 = HIBYTE(v39) & 0x7F;
    else
      v24 = (size_t)__p[1];
    v25 = llvm::MDBuilder::createAnonymousAARoot(&v40, v23, v24, (uint64_t)v22);
    v29 = v14;
    v30[0] = v25;
    sub_1C63A860C((uint64_t)&__dst, a3, &v29, v30);
    if (SHIBYTE(v39) < 0)
      operator delete(__p[0]);
    goto LABEL_33;
  }
}

void llvm::adaptNoAliasScopes(uint64_t ***a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t ***v10;
  _QWORD *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t **v14;
  _QWORD **v15;
  _QWORD **v16;
  uint64_t ***v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t ****v24;
  uint64_t ***v25;
  uint64_t ****v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t ****v38;
  uint64_t ***v39;
  uint64_t ****v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  llvm::MDNode *v47;
  llvm::MDNode *v48;
  uint64_t ****v49;
  uint64_t v50;
  uint64_t ****v51;
  uint64_t v52;
  uint64_t v53[2];
  uint64_t ***v54;

  v53[0] = a2;
  v53[1] = a3;
  v4 = sub_1C5790664((uint64_t)a1);
  if (a1)
  {
    if (v4)
    {
      v5 = (unsigned __int8 *)sub_1C5ED6C44(v53, (uint64_t)a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)][3]);
      if (v5)
      {
        v6 = llvm::MetadataAsValue::get(**a1, v5);
        v7 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
        v8 = -v7;
        v9 = (uint64_t *)&a1[-4 * v7];
        if (*v9)
        {
          v10 = &a1[4 * v8];
          v12 = v10[2];
          v11 = v10 + 2;
          *v12 = (uint64_t *)*(v11 - 1);
          v13 = *(v11 - 1);
          if (v13)
            *(_QWORD *)(v13 + 16) = *v11;
        }
        *v9 = v6;
        if (v6)
        {
          v16 = *(_QWORD ***)(v6 + 8);
          v14 = (uint64_t **)(v6 + 8);
          v15 = v16;
          v17 = &a1[4 * v8];
          v17[1] = v16;
          if (v16)
            v15[2] = v17 + 1;
          v17[2] = v14;
          *v14 = v9;
        }
      }
    }
  }
  v18 = a1 >> 4;
  if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
    goto LABEL_26;
  v19 = ***a1;
  v54 = a1;
  v20 = *(_DWORD *)(v19 + 2496);
  if (v20)
  {
    v21 = *(_QWORD *)(v19 + 2480);
    v22 = v20 - 1;
    v23 = v22 & (v18 ^ (a1 >> 9));
    v24 = (uint64_t ****)(v21 + 40 * v23);
    v25 = *v24;
    if (*v24 == a1)
      goto LABEL_22;
    v26 = 0;
    v27 = 1;
    while (v25 != (uint64_t ***)-4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == (uint64_t ***)-8192;
      if (v28)
        v26 = v24;
      v29 = v23 + v27++;
      v23 = v29 & v22;
      v24 = (uint64_t ****)(v21 + 40 * v23);
      v25 = *v24;
      if (*v24 == a1)
        goto LABEL_22;
    }
    if (v26)
      v49 = v26;
    else
      v49 = v24;
  }
  else
  {
    v49 = 0;
  }
  v24 = (uint64_t ****)sub_1C541AB24(v19 + 2480, (uint64_t)&v54, (uint64_t *)&v54, v49);
  v50 = (uint64_t)v54;
  v24[3] = 0;
  v24[4] = 0;
  *v24 = (uint64_t ***)v50;
  v24[1] = (uint64_t ***)(v24 + 3);
  v24[2] = (uint64_t ***)0x100000000;
LABEL_22:
  v30 = *((unsigned int *)v24 + 4);
  if ((_DWORD)v30)
  {
    v31 = (uint64_t *)(v24[1] + 1);
    v32 = 16 * v30;
    while (*((_DWORD *)v31 - 2) != 8)
    {
      v31 += 2;
      v32 -= 16;
      if (!v32)
        goto LABEL_26;
    }
    if (*v31)
    {
      v47 = (llvm::MDNode *)sub_1C5ED6C44(v53, *v31);
      if (v47)
        llvm::Value::setMetadata((llvm::Value *)a1, 8, v47);
    }
  }
LABEL_26:
  if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
    return;
  v33 = ***a1;
  v54 = a1;
  v34 = *(_DWORD *)(v33 + 2496);
  if (v34)
  {
    v35 = *(_QWORD *)(v33 + 2480);
    v36 = v34 - 1;
    v37 = v36 & (v18 ^ (a1 >> 9));
    v38 = (uint64_t ****)(v35 + 40 * v37);
    v39 = *v38;
    if (*v38 == a1)
      goto LABEL_37;
    v40 = 0;
    v41 = 1;
    while (v39 != (uint64_t ***)-4096)
    {
      if (v40)
        v42 = 0;
      else
        v42 = v39 == (uint64_t ***)-8192;
      if (v42)
        v40 = v38;
      v43 = v37 + v41++;
      v37 = v43 & v36;
      v38 = (uint64_t ****)(v35 + 40 * v37);
      v39 = *v38;
      if (*v38 == a1)
        goto LABEL_37;
    }
    if (v40)
      v51 = v40;
    else
      v51 = v38;
  }
  else
  {
    v51 = 0;
  }
  v38 = (uint64_t ****)sub_1C541AB24(v33 + 2480, (uint64_t)&v54, (uint64_t *)&v54, v51);
  v52 = (uint64_t)v54;
  v38[3] = 0;
  v38[4] = 0;
  *v38 = (uint64_t ***)v52;
  v38[1] = (uint64_t ***)(v38 + 3);
  v38[2] = (uint64_t ***)0x100000000;
LABEL_37:
  v44 = *((unsigned int *)v38 + 4);
  if ((_DWORD)v44)
  {
    v45 = (uint64_t *)(v38[1] + 1);
    v46 = 16 * v44;
    while (*((_DWORD *)v45 - 2) != 7)
    {
      v45 += 2;
      v46 -= 16;
      if (!v46)
        return;
    }
    if (*v45)
    {
      v48 = (llvm::MDNode *)sub_1C5ED6C44(v53, *v45);
      if (v48)
        llvm::Value::setMetadata((llvm::Value *)a1, 7, v48);
    }
  }
}

uint64_t sub_1C5ED6C44(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Impl;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x800000000;
  v2 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v2)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = (uint64_t *)(a2 - 8 * v2);
  do
  {
    while (1)
    {
      v8 = *v7;
      if (*(unsigned __int8 *)*v7 - 4 > 0x1E)
        goto LABEL_9;
      v9 = *a1;
      v17 = 0;
      if ((sub_1C6144BDC(*(_QWORD *)v9, *(_DWORD *)(v9 + 16), v8, &v17) & 1) == 0)
        break;
      v10 = *(_QWORD *)(v17 + 8);
      if (!v10)
        break;
      v12 = v19;
      if (v19 >= (unint64_t)HIDWORD(v19))
      {
        v13 = *(_QWORD *)(v17 + 8);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v20, v19 + 1, 8);
        v10 = v13;
        v12 = v19;
      }
      *((_QWORD *)v18 + v12) = v10;
      v5 = v19 + 1;
      LODWORD(v19) = v19 + 1;
      ++v7;
      v6 = 1;
      if (v7 == (uint64_t *)a2)
      {
        v16 = v18;
LABEL_16:
        Impl = llvm::MDTuple::getImpl((uint64_t *)a1[1], v16, v5, 0, 1);
        v16 = v18;
        goto LABEL_19;
      }
    }
    v11 = v19;
    if (v19 >= (unint64_t)HIDWORD(v19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v20, v19 + 1, 8);
      v11 = v19;
    }
    *((_QWORD *)v18 + v11) = v8;
    v5 = v19 + 1;
    LODWORD(v19) = v19 + 1;
LABEL_9:
    ++v7;
  }
  while (v7 != (uint64_t *)a2);
  v16 = v18;
  if ((v6 & 1) != 0)
    goto LABEL_16;
  Impl = 0;
LABEL_19:
  if (v16 != v20)
    free(v16);
  return Impl;
}

uint64_t *llvm::cloneAndAdaptNoAliasScopes(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *__src, size_t __len)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t ***v13;
  _QWORD v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    v18 = v7;
    v19 = v8;
    v16[0] = 0;
    v16[1] = 0;
    v17 = 0;
    llvm::cloneNoAliasScopes(result, a2, (uint64_t)v16, __src, __len, a5);
    if (a4)
    {
      v10 = a3 + 8 * a4;
      do
      {
        v11 = *(_QWORD *)a3 + 40;
        for (i = *(_QWORD *)(*(_QWORD *)a3 + 48); i != v11; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v13 = (uint64_t ***)(i - 24);
          else
            v13 = 0;
          llvm::adaptNoAliasScopes(v13, (uint64_t)v16, (uint64_t)a5);
        }
        a3 += 8;
      }
      while (a3 != v10);
    }
    return (uint64_t *)MEMORY[0x1CAA32FB4](v16[0], 8);
  }
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t ***v12;
  _QWORD v13[2];
  int v14;

  if (a2)
  {
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
    llvm::cloneNoAliasScopes(result, a2, (uint64_t)v13, __src, __len, a5);
    v10 = a3 + 24;
    v11 = *(_QWORD *)(a4 + 32);
    while (v10 != v11)
    {
      if (v10)
        v12 = (uint64_t ***)(v10 - 24);
      else
        v12 = 0;
      llvm::adaptNoAliasScopes(v12, (uint64_t)v13, (uint64_t)a5);
      v10 = *(_QWORD *)(v10 + 8);
    }
    return (uint64_t *)MEMORY[0x1CAA32FB4](v13[0], 8);
  }
  return result;
}

char *llvm::identifyNoAliasScopesToClone(char *result, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a2)
  {
    v4 = result;
    v5 = &result[8 * a2];
    v6 = a3 + 16;
    do
    {
      v7 = *(_QWORD *)v4 + 40;
      for (i = *(_QWORD *)(*(_QWORD *)v4 + 48); i != v7; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v9 = i - 24;
        else
          v9 = 0;
        result = (char *)sub_1C5790664(v9);
        if (i && (_DWORD)result)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)) + 24);
          v11 = *(unsigned int *)(a3 + 8);
          if (v11 >= *(unsigned int *)(a3 + 12))
          {
            result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v11 + 1, 8);
            v11 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v10;
          ++*(_DWORD *)(a3 + 8);
        }
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return result;
}

void *llvm::identifyNoAliasScopesToClone(void *result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (result != a2)
  {
    v5 = result;
    v6 = a3 + 16;
    do
    {
      if (v5)
        v7 = (uint64_t)(v5 - 3);
      else
        v7 = 0;
      result = (void *)sub_1C5790664(v7);
      if (v5 && (_DWORD)result)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)) + 24);
        v9 = *(unsigned int *)(a3 + 8);
        if (v9 >= *(unsigned int *)(a3 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v9 + 1, 8);
          v9 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
        ++*(_DWORD *)(a3 + 8);
      }
      v5 = (_QWORD *)v5[1];
    }
    while (v5 != a2);
  }
  return result;
}

double sub_1C5ED705C(uint64_t a1)
{
  double result;

  if (*(_BYTE *)(a1 + 688))
    sub_1C5A5507C(a1);
  bzero((void *)(a1 + 16), 0x2A0uLL);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(a1 + 8) = 0x800000000;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_DWORD *)(a1 + 92) = 8;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  *(_DWORD *)(a1 + 172) = 8;
  *(_QWORD *)(a1 + 240) = a1 + 256;
  *(_DWORD *)(a1 + 252) = 8;
  *(_QWORD *)(a1 + 320) = a1 + 336;
  *(_DWORD *)(a1 + 332) = 8;
  *(_QWORD *)(a1 + 400) = a1 + 432;
  *(_QWORD *)(a1 + 408) = a1 + 432;
  *(_DWORD *)(a1 + 416) = 32;
  *(_BYTE *)(a1 + 688) = 1;
  return result;
}

uint64_t sub_1C5ED70F8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5ED719C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5ED7304(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5ED7304(a1, v14, v8);
}

uint64_t sub_1C5ED7304(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5ED70F8((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::CloneModule@<X0>(llvm *this@<X0>, uint64_t *a2@<X8>)
{
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  _QWORD v38[2];
  unsigned int v39;
  uint64_t v40[3];
  char v41;
  char v42;

  v39 = 128;
  v5 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v6 = 0;
  v38[0] = v5;
  v38[1] = 0;
  do
  {
    v7 = &v5[v6];
    *((_QWORD *)v7 + 2) = 0;
    *((_QWORD *)v7 + 3) = -4096;
    *(_QWORD *)v7 = &unk_1E814DA10;
    *((_QWORD *)v7 + 1) = 2;
    v6 += 64;
    *((_QWORD *)v7 + 4) = 0;
  }
  while (v6 != 0x2000);
  LOBYTE(v40[0]) = 0;
  v41 = 0;
  llvm::CloneModule((uint64_t *)this, (uint64_t)v38, (uint64_t (*)(uint64_t, const llvm::GlobalValue *))sub_1C5ED95A0, (uint64_t)&v42, a2);
  if (v41)
  {
    sub_1C4E43068((uint64_t)v40);
    MEMORY[0x1CAA32FB4](v40[0], 8);
    v41 = 0;
  }
  v8 = (_QWORD *)v38[0];
  if (v39)
  {
    v9 = v38[0] + ((unint64_t)v39 << 6);
    do
    {
      v10 = v8[3];
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = v8[7];
        if (v11)
        {
          if (v11 != -8192 && v11 != -4096)
          {
            v12 = v8[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v12 = v8[6];
            v13 = (unint64_t *)v8[6];
            if (v13)
            {
              *v13 = *v13 & 7 | v12;
            }
            else
            {
              v14 = v8[7];
              v15 = ***(int32x2_t ****)v14;
              v16 = (unint64_t)v15[303];
              if (v16 <= v12)
              {
                v17 = v15[305].u32[0];
                if (v16 + 16 * v17 > v12)
                {
                  v18 = v17 - 1;
                  LODWORD(v19) = v18 & ((v14 >> 4) ^ (v14 >> 9));
                  v20 = (uint64_t *)(v16 + 16 * v19);
                  v21 = *v20;
                  if (v14 == *v20)
                  {
LABEL_19:
                    *v20 = -8192;
                    v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                    v14 = v8[7];
                  }
                  else
                  {
                    v22 = 1;
                    while (v21 != -4096)
                    {
                      v23 = v19 + v22++;
                      v19 = v23 & v18;
                      v21 = *(_QWORD *)(v16 + 16 * v19);
                      if (v14 == v21)
                      {
                        v20 = (uint64_t *)(v16 + 16 * v19);
                        goto LABEL_19;
                      }
                    }
                  }
                  *(_BYTE *)(v14 + 17) &= ~1u;
                }
              }
            }
            v10 = v8[3];
          }
        }
      }
      if (v10 != -4096 && v10 != -8192 && v10 != 0)
      {
        v25 = v8[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v25 = v8[2];
        v26 = (unint64_t *)v8[2];
        if (v26)
        {
          *v26 = *v26 & 7 | v25;
        }
        else
        {
          v27 = v8[3];
          v28 = ***(int32x2_t ****)v27;
          v29 = (unint64_t)v28[303];
          if (v29 <= v25)
          {
            v30 = v28[305].u32[0];
            if (v29 + 16 * v30 > v25)
            {
              v31 = v30 - 1;
              LODWORD(v32) = v31 & ((v27 >> 4) ^ (v27 >> 9));
              v33 = (uint64_t *)(v29 + 16 * v32);
              v34 = *v33;
              if (v27 == *v33)
              {
LABEL_38:
                *v33 = -8192;
                v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
                v27 = v8[3];
              }
              else
              {
                v35 = 1;
                while (v34 != -4096)
                {
                  v36 = v32 + v35++;
                  v32 = v36 & v31;
                  v34 = *(_QWORD *)(v29 + 16 * v32);
                  if (v27 == v34)
                  {
                    v33 = (uint64_t *)(v29 + 16 * v32);
                    goto LABEL_38;
                  }
                }
              }
              *(_BYTE *)(v27 + 17) &= ~1u;
            }
          }
        }
      }
      v8 += 8;
    }
    while (v8 != (_QWORD *)v9);
    v8 = (_QWORD *)v38[0];
  }
  return MEMORY[0x1CAA32FB4](v8, 8);
}

void llvm::CloneModule(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v3;

  llvm::CloneModule(a1, a2, (uint64_t (*)(uint64_t, const llvm::GlobalValue *))sub_1C5ED95A0, (uint64_t)&v3, a3);
}

void llvm::CloneModule(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, const llvm::GlobalValue *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  char v17;
  int v18;
  void *v19;
  size_t v20;
  size_t v21;
  char v22;
  int v23;
  void *v24;
  size_t v25;
  size_t v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  char v30;
  int v31;
  void *v32;
  size_t v33;
  size_t v34;
  _QWORD *v35;
  uint64_t ***v36;
  _DWORD *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  int v46;
  int v47;
  uint64_t ***v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  llvm::PointerType *v52;
  int v53;
  char v54;
  llvm::GlobalObject *v55;
  _QWORD *v56;
  unint64_t v57;
  int32x2_t ****v58;
  int32x2_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int32x2_t *****v64;
  int32x2_t ****v65;
  int v66;
  int v67;
  char *v68;
  unint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  int32x2_t *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  int v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  llvm::PointerType *v96;
  int v97;
  llvm::Type *v98;
  char *v99;
  char *v100;
  uint64_t *v101;
  _QWORD *v102;
  unint64_t v103;
  int32x2_t ****v104;
  int32x2_t *v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  int32x2_t *****v110;
  int32x2_t ****v111;
  int v112;
  int v113;
  char *v114;
  unint64_t v115;
  unint64_t *v116;
  uint64_t v117;
  int32x2_t *v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t *v127;
  uint64_t v128;
  const llvm::GlobalValue *v129;
  char v130;
  llvm::PointerType *v131;
  uint64_t **v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const llvm::GlobalValue **v137;
  const llvm::GlobalValue *v138;
  int v139;
  int v140;
  _DWORD *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const llvm::GlobalValue **v147;
  const llvm::GlobalValue *v148;
  int v149;
  int v150;
  const llvm::GlobalValue *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  llvm::Type *v155;
  char *v156;
  const llvm::GlobalValue *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  llvm::PointerType *v161;
  _QWORD *v162;
  unint64_t v163;
  int32x2_t ****v164;
  int32x2_t *v165;
  unint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  int32x2_t *****v170;
  int32x2_t ****v171;
  int v172;
  int v173;
  char *v174;
  uint64_t **v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const llvm::GlobalValue **v181;
  const llvm::GlobalValue *v182;
  int v183;
  int v184;
  unint64_t v185;
  unint64_t *v186;
  uint64_t v187;
  int32x2_t *v188;
  unint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  int v195;
  int v196;
  const llvm::GlobalValue *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  int v201;
  llvm::GlobalValue *v202;
  unint64_t v203;
  int32x2_t ****v204;
  int32x2_t *v205;
  unint64_t v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  int32x2_t *****v210;
  int32x2_t ****v211;
  int v212;
  int v213;
  llvm::GlobalValue *v214;
  unint64_t v215;
  unint64_t *v216;
  uint64_t v217;
  int32x2_t *v218;
  unint64_t v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  int v225;
  int v226;
  _QWORD *i;
  int32x2_t ****v228;
  _QWORD *v230;
  unint64_t v232;
  int32x2_t ****v233;
  int32x2_t *v234;
  unint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  int32x2_t *****v239;
  int32x2_t ****v240;
  int v241;
  int v242;
  llvm::Value *v243;
  char *v244;
  char *v245;
  int v246;
  llvm::MDNode *v247;
  uint64_t v248;
  llvm::MDNode *v249;
  llvm::LLVMContext *v250;
  llvm::LLVMContext *v251;
  int v252;
  llvm::MDNode **v253;
  uint64_t v254;
  llvm::Constant *v255;
  llvm::LLVMContext *v256;
  llvm::LLVMContext *v257;
  uint64_t *j;
  uint64_t v259;
  _QWORD *v261;
  unint64_t v263;
  int32x2_t ****v264;
  int32x2_t *v265;
  unint64_t v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  int32x2_t *****v270;
  int32x2_t ****v271;
  int v272;
  int v273;
  uint64_t v274;
  unint64_t **v275;
  unint64_t **v276;
  int v277;
  llvm::MDNode *v278;
  uint64_t v279;
  llvm::MDNode *v280;
  llvm::LLVMContext *v281;
  llvm::LLVMContext *v282;
  uint64_t ***v283;
  uint64_t v284;
  uint64_t ***v285;
  uint64_t ***v286;
  uint64_t ***v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t ****v292;
  uint64_t ***v293;
  int v294;
  int v295;
  uint64_t ***v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  _QWORD *v300;
  unint64_t v301;
  int32x2_t ****v302;
  int32x2_t *v303;
  unint64_t v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  int32x2_t *****v308;
  int32x2_t ****v309;
  int v310;
  int v311;
  uint64_t ***v312;
  unint64_t v313;
  unint64_t *v314;
  uint64_t v315;
  int32x2_t *v316;
  unint64_t v317;
  uint64_t v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  int v323;
  int v324;
  int v325;
  int v326;
  llvm::MDNode ***v327;
  llvm::MDNode **v328;
  uint64_t v329;
  uint64_t v330;
  llvm::LLVMContext *v331;
  llvm::LLVMContext *v332;
  uint64_t *k;
  int32x2_t ****v334;
  _QWORD *v335;
  unint64_t v336;
  int32x2_t ****v337;
  int32x2_t *v338;
  unint64_t v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  int32x2_t *****v343;
  int32x2_t ****v344;
  int v345;
  int v346;
  llvm::MDNode **v347;
  uint64_t v348;
  _QWORD *v349;
  llvm::Constant *v350;
  llvm::LLVMContext *v351;
  llvm::LLVMContext *v352;
  uint64_t v353;
  uint64_t v354;
  char v355;
  int v356;
  unsigned __int8 *v357;
  size_t v358;
  size_t v359;
  uint64_t inserted;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  llvm::MDNode *v365;
  _QWORD *v366;
  _QWORD *v367;
  llvm::LLVMContext *v368;
  llvm::LLVMContext *v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t *v373;
  uint64_t *v374;
  _QWORD *v375;
  uint64_t *v376;
  uint64_t *v377;
  uint64_t v380;
  _QWORD *v381;
  void *v382;
  uint64_t v383;
  unint64_t *v384;
  int32x2_t ****v385;
  uint64_t v386;
  uint64_t v387;

  v387 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = operator new();
  v10 = v9;
  v11 = *((_BYTE *)a1 + 191);
  v12 = v11;
  if (v11 >= 0)
    v13 = a1 + 21;
  else
    v13 = (const void *)a1[21];
  v14 = v11 & 0x7F;
  if (v12 >= 0)
    v15 = v14;
  else
    v15 = a1[22];
  v16 = llvm::Module::Module(v9, v13, v15, v8);
  v373 = a5;
  *a5 = v16;
  v17 = *((_BYTE *)a1 + 215);
  v18 = v17;
  if (v17 >= 0)
    v19 = a1 + 24;
  else
    v19 = (void *)a1[24];
  v20 = v17 & 0x7F;
  if (v18 >= 0)
    v21 = v20;
  else
    v21 = a1[25];
  LLVMSetSourceFileName_0(v16, v19, v21);
  sub_1C48815D8(v10 + 272, (uint64_t)(a1 + 34));
  v22 = *((_BYTE *)a1 + 239);
  v23 = v22;
  if (v22 >= 0)
    v24 = a1 + 27;
  else
    v24 = (void *)a1[27];
  v25 = v22 & 0x7F;
  if (v23 >= 0)
    v26 = v25;
  else
    v26 = a1[28];
  sub_1C4D828E4(v10, v24, v26);
  v374 = a1;
  v29 = (void *)a1[11];
  v28 = a1 + 11;
  v27 = v29;
  v30 = *((_BYTE *)v28 + 23);
  v31 = v30;
  if (v30 >= 0)
    v32 = v28;
  else
    v32 = v27;
  v33 = v30 & 0x7F;
  if (v31 >= 0)
    v34 = v33;
  else
    v34 = v28[1];
  LLVMSetModuleInlineAsm2_0(v10, v32, v34);
  v35 = (_QWORD *)*(v28 - 9);
  v375 = v28 - 10;
  if (v35 != v28 - 10)
  {
    while (1)
    {
      v36 = (uint64_t ***)(v35 - 7);
      v37 = operator new(0x78uLL);
      v38 = v37;
      v39 = (char *)(v37 + 8);
      v37[13] = v37[13] & 0x38000000 | 1;
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v37 + 1) = 0;
      *((_QWORD *)v37 + 2) = 0;
      *((_QWORD *)v37 + 3) = v37 + 8;
      if (!v35)
        v36 = 0;
      if ((*((_BYTE *)v36 + 23) & 0x10) != 0)
        break;
      v49 = 0;
      v50 = &byte_1C871356D;
LABEL_37:
      v52 = (llvm::PointerType *)v36[3];
      v53 = (_DWORD)v36[4] & 0xF;
      v54 = (_BYTE)v36[10] & 1;
      LOWORD(v386) = 261;
      v382 = v50;
      v383 = v49;
      v55 = (llvm::GlobalObject *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v37 + 8), v10, v52, v54, v53, 0, (uint64_t)&v382, 0, (*((_DWORD *)v36 + 8) >> 10) & 7, ((unint64_t)*((unsigned int *)*v36 + 2) >> 8) | 0x100000000, 0);
      llvm::GlobalObject::copyAttributesFrom(v55, (const llvm::GlobalObject *)v36);
      *((_BYTE *)v38 + 112) = v38[28] & 0xFD | (_BYTE)v36[10] & 2;
      *((_QWORD *)v38 + 13) = v36[9];
      v383 = 2;
      v384 = 0;
      v385 = (int32x2_t ****)v36;
      if (v36 != (uint64_t ***)-8192 && v36 != (uint64_t ***)-4096 && v36)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v383);
      v382 = &unk_1E814DA10;
      v386 = a2;
      v56 = sub_1C52E2ED8(a2, &v382);
      if (v385 != (int32x2_t ****)-8192 && v385 != (int32x2_t ****)-4096 && v385)
      {
        v57 = v383 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v383 & 0xFFFFFFFFFFFFFFF8) = v384;
        if (v384)
        {
          *v384 = *v384 & 7 | v57;
        }
        else
        {
          v58 = v385;
          v59 = ***v385;
          v60 = (unint64_t)v59[303];
          if (v60 <= v57)
          {
            v61 = v59[305].u32[0];
            if (v60 + 16 * v61 > v57)
            {
              v62 = v61 - 1;
              LODWORD(v63) = v62 & ((v385 >> 4) ^ (v385 >> 9));
              v64 = (int32x2_t *****)(v60 + 16 * v63);
              v65 = *v64;
              if (v385 == *v64)
              {
LABEL_52:
                *v64 = (int32x2_t ****)-8192;
                v59[304] = vadd_s32(v59[304], (int32x2_t)0x1FFFFFFFFLL);
                v58 = v385;
              }
              else
              {
                v66 = 1;
                while (v65 != (int32x2_t ****)-4096)
                {
                  v67 = v63 + v66++;
                  v63 = v67 & v62;
                  v65 = *(int32x2_t *****)(v60 + 16 * v63);
                  if (v385 == v65)
                  {
                    v64 = (int32x2_t *****)(v60 + 16 * v63);
                    goto LABEL_52;
                  }
                }
              }
              *((_BYTE *)v58 + 17) &= ~1u;
            }
          }
        }
      }
      v68 = (char *)v56[7];
      if (v68 != v39)
      {
        if (v68 && v68 != (char *)-8192 && v68 != (char *)-4096)
        {
          v69 = v56[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v69 = v56[6];
          v70 = (unint64_t *)v56[6];
          if (v70)
          {
            *v70 = *v70 & 7 | v69;
          }
          else
          {
            v71 = v56[7];
            v72 = ***(int32x2_t ****)v71;
            v73 = (unint64_t)v72[303];
            if (v73 <= v69)
            {
              v74 = v72[305].u32[0];
              if (v73 + 16 * v74 > v69)
              {
                v75 = v74 - 1;
                LODWORD(v76) = v75 & ((v71 >> 4) ^ (v71 >> 9));
                v77 = (uint64_t *)(v73 + 16 * v76);
                v78 = *v77;
                if (v71 == *v77)
                {
LABEL_73:
                  *v77 = -8192;
                  v72[304] = vadd_s32(v72[304], (int32x2_t)0x1FFFFFFFFLL);
                  v71 = v56[7];
                }
                else
                {
                  v79 = 1;
                  while (v78 != -4096)
                  {
                    v80 = v76 + v79++;
                    v76 = v80 & v75;
                    v78 = *(_QWORD *)(v73 + 16 * v76);
                    if (v71 == v78)
                    {
                      v77 = (uint64_t *)(v73 + 16 * v76);
                      goto LABEL_73;
                    }
                  }
                }
                *(_BYTE *)(v71 + 17) &= ~1u;
              }
            }
          }
        }
        v56[7] = v39;
        if (v39 != (char *)-8192 && v39 != (char *)-4096 && v39)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v56 + 5));
      }
      v35 = (_QWORD *)v35[1];
      if (v35 == v375)
        goto LABEL_77;
    }
    v40 = ***v36;
    v41 = *(_QWORD *)(v40 + 152);
    v42 = *(unsigned int *)(v40 + 168);
    if ((_DWORD)v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v36 >> 4) ^ (v36 >> 9));
      v44 = (uint64_t ****)(v41 + 16 * v43);
      v45 = *v44;
      if (*v44 == v36)
      {
LABEL_36:
        v48 = v44[1];
        v51 = (uint64_t)*v48;
        v50 = (char *)(v48 + 2);
        v49 = v51;
        goto LABEL_37;
      }
      v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & (v42 - 1);
        v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == v36)
        {
          v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_36;
        }
      }
    }
    v44 = (uint64_t ****)(v41 + 16 * v42);
    goto LABEL_36;
  }
LABEL_77:
  v81 = (uint64_t *)v374[4];
  v377 = v374 + 3;
  if (v81 != v374 + 3)
  {
    while (1)
    {
      v82 = v81 ? (uint64_t)(v81 - 7) : 0;
      v83 = *(uint64_t ***)v82;
      if ((*(_BYTE *)(v82 + 23) & 0x10) != 0)
        break;
      v93 = 0;
      v94 = &byte_1C871356D;
LABEL_90:
      v96 = *(llvm::PointerType **)(v82 + 24);
      v97 = *(_DWORD *)(v82 + 32) & 0xF;
      v98 = (llvm::Type *)(*((_DWORD *)v83 + 2) >> 8);
      LOWORD(v386) = 261;
      v382 = v94;
      v383 = v93;
      v99 = (char *)operator new(0x80uLL);
      v100 = v99 + 8;
      *((_DWORD *)v99 + 7) = *((_DWORD *)v99 + 7) & 0x38000000 | 0x40000000;
      *(_QWORD *)v99 = 0;
      v101 = llvm::Function::Function((uint64_t *)v99 + 1, v96, v97, v98, (uint64_t)&v382, v10);
      llvm::Function::copyAttributesFrom((llvm::Function *)v101, (const llvm::Function *)v82);
      v383 = 2;
      v384 = 0;
      v385 = (int32x2_t ****)v82;
      if (v82 != -8192 && v82 != -4096 && v82)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v383);
      v382 = &unk_1E814DA10;
      v386 = a2;
      v102 = sub_1C52E2ED8(a2, &v382);
      if (v385 != (int32x2_t ****)-8192 && v385 != (int32x2_t ****)-4096 && v385)
      {
        v103 = v383 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v383 & 0xFFFFFFFFFFFFFFF8) = v384;
        if (v384)
        {
          *v384 = *v384 & 7 | v103;
        }
        else
        {
          v104 = v385;
          v105 = ***v385;
          v106 = (unint64_t)v105[303];
          if (v106 <= v103)
          {
            v107 = v105[305].u32[0];
            if (v106 + 16 * v107 > v103)
            {
              v108 = v107 - 1;
              LODWORD(v109) = v108 & ((v385 >> 4) ^ (v385 >> 9));
              v110 = (int32x2_t *****)(v106 + 16 * v109);
              v111 = *v110;
              if (v385 == *v110)
              {
LABEL_105:
                *v110 = (int32x2_t ****)-8192;
                v105[304] = vadd_s32(v105[304], (int32x2_t)0x1FFFFFFFFLL);
                v104 = v385;
              }
              else
              {
                v112 = 1;
                while (v111 != (int32x2_t ****)-4096)
                {
                  v113 = v109 + v112++;
                  v109 = v113 & v108;
                  v111 = *(int32x2_t *****)(v106 + 16 * v109);
                  if (v385 == v111)
                  {
                    v110 = (int32x2_t *****)(v106 + 16 * v109);
                    goto LABEL_105;
                  }
                }
              }
              *((_BYTE *)v104 + 17) &= ~1u;
            }
          }
        }
      }
      v114 = (char *)v102[7];
      if (v114 != v100)
      {
        if (v114 && v114 != (char *)-8192 && v114 != (char *)-4096)
        {
          v115 = v102[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v115 = v102[6];
          v116 = (unint64_t *)v102[6];
          if (v116)
          {
            *v116 = *v116 & 7 | v115;
          }
          else
          {
            v117 = v102[7];
            v118 = ***(int32x2_t ****)v117;
            v119 = (unint64_t)v118[303];
            if (v119 <= v115)
            {
              v120 = v118[305].u32[0];
              if (v119 + 16 * v120 > v115)
              {
                v121 = v120 - 1;
                LODWORD(v122) = v121 & ((v117 >> 4) ^ (v117 >> 9));
                v123 = (uint64_t *)(v119 + 16 * v122);
                v124 = *v123;
                if (v117 == *v123)
                {
LABEL_126:
                  *v123 = -8192;
                  v118[304] = vadd_s32(v118[304], (int32x2_t)0x1FFFFFFFFLL);
                  v117 = v102[7];
                }
                else
                {
                  v125 = 1;
                  while (v124 != -4096)
                  {
                    v126 = v122 + v125++;
                    v122 = v126 & v121;
                    v124 = *(_QWORD *)(v119 + 16 * v122);
                    if (v117 == v124)
                    {
                      v123 = (uint64_t *)(v119 + 16 * v122);
                      goto LABEL_126;
                    }
                  }
                }
                *(_BYTE *)(v117 + 17) &= ~1u;
              }
            }
          }
        }
        v102[7] = v100;
        if (v100 != (char *)-8192 && v100 != (char *)-4096 && v100)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v102 + 5));
      }
      v81 = (uint64_t *)v81[1];
      if (v81 == v377)
        goto LABEL_130;
    }
    v84 = **v83;
    v85 = *(_QWORD *)(v84 + 152);
    v86 = *(unsigned int *)(v84 + 168);
    if ((_DWORD)v86)
    {
      LODWORD(v87) = (v86 - 1) & ((v82 >> 4) ^ (v82 >> 9));
      v88 = (uint64_t *)(v85 + 16 * v87);
      v89 = *v88;
      if (*v88 == v82)
      {
LABEL_89:
        v92 = (_QWORD *)v88[1];
        v95 = *v92;
        v94 = (char *)(v92 + 2);
        v93 = v95;
        goto LABEL_90;
      }
      v90 = 1;
      while (v89 != -4096)
      {
        v91 = v87 + v90++;
        v87 = v91 & (v86 - 1);
        v89 = *(_QWORD *)(v85 + 16 * v87);
        if (v89 == v82)
        {
          v88 = (uint64_t *)(v85 + 16 * v87);
          goto LABEL_89;
        }
      }
    }
    v88 = (uint64_t *)(v85 + 16 * v86);
    goto LABEL_89;
  }
LABEL_130:
  v127 = (uint64_t *)v374[6];
  v376 = v374 + 5;
  if (v127 != v374 + 5)
  {
    v128 = *v373;
    while (1)
    {
      if (v127)
        v129 = (const llvm::GlobalValue *)(v127 - 6);
      else
        v129 = 0;
      v130 = a3(a4, v129);
      v131 = (llvm::PointerType *)*((_QWORD *)v129 + 3);
      if ((v130 & 1) == 0)
      {
        if (*((_BYTE *)v131 + 8) == 14)
        {
          v132 = *(uint64_t ***)v129;
          if ((*((_BYTE *)v129 + 23) & 0x10) != 0)
          {
            v133 = **v132;
            v134 = *(_QWORD *)(v133 + 152);
            v135 = *(unsigned int *)(v133 + 168);
            if (!(_DWORD)v135)
              goto LABEL_151;
            LODWORD(v136) = (v135 - 1) & ((v129 >> 4) ^ (v129 >> 9));
            v137 = (const llvm::GlobalValue **)(v134 + 16 * v136);
            v138 = *v137;
            if (*v137 != v129)
            {
              v139 = 1;
              while (v138 != (const llvm::GlobalValue *)-4096)
              {
                v140 = v136 + v139++;
                v136 = v140 & (v135 - 1);
                v138 = *(const llvm::GlobalValue **)(v134 + 16 * v136);
                if (v138 == v129)
                {
                  v137 = (const llvm::GlobalValue **)(v134 + 16 * v136);
                  goto LABEL_152;
                }
              }
LABEL_151:
              v137 = (const llvm::GlobalValue **)(v134 + 16 * v135);
            }
LABEL_152:
            v151 = v137[1];
            v154 = *(_QWORD *)v151;
            v153 = (char *)v151 + 16;
            v152 = v154;
          }
          else
          {
            v152 = 0;
            v153 = &byte_1C871356D;
          }
          v155 = (llvm::Type *)(*((_DWORD *)v132 + 2) >> 8);
          LOWORD(v386) = 261;
          v382 = v153;
          v383 = v152;
          v156 = (char *)operator new(0x80uLL);
          v142 = v156 + 8;
          *((_DWORD *)v156 + 7) = *((_DWORD *)v156 + 7) & 0x38000000 | 0x40000000;
          *(_QWORD *)v156 = 0;
          llvm::Function::Function((uint64_t *)v156 + 1, v131, 0, v155, (uint64_t)&v382, v128);
LABEL_157:
          v383 = 2;
          v384 = 0;
          v385 = (int32x2_t ****)v129;
          if (v129 != (const llvm::GlobalValue *)-8192 && v129 != (const llvm::GlobalValue *)-4096 && v129)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v383);
          v382 = &unk_1E814DA10;
          v386 = a2;
          v162 = sub_1C52E2ED8(a2, &v382);
          if (v385 != (int32x2_t ****)-8192 && v385 != (int32x2_t ****)-4096 && v385)
          {
            v163 = v383 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v383 & 0xFFFFFFFFFFFFFFF8) = v384;
            if (v384)
            {
              *v384 = *v384 & 7 | v163;
            }
            else
            {
              v164 = v385;
              v165 = ***v385;
              v166 = (unint64_t)v165[303];
              if (v166 <= v163)
              {
                v167 = v165[305].u32[0];
                if (v166 + 16 * v167 > v163)
                {
                  v168 = v167 - 1;
                  LODWORD(v169) = v168 & ((v385 >> 4) ^ (v385 >> 9));
                  v170 = (int32x2_t *****)(v166 + 16 * v169);
                  v171 = *v170;
                  if (v385 == *v170)
                  {
LABEL_172:
                    *v170 = (int32x2_t ****)-8192;
                    v165[304] = vadd_s32(v165[304], (int32x2_t)0x1FFFFFFFFLL);
                    v164 = v385;
                  }
                  else
                  {
                    v172 = 1;
                    while (v171 != (int32x2_t ****)-4096)
                    {
                      v173 = v169 + v172++;
                      v169 = v173 & v168;
                      v171 = *(int32x2_t *****)(v166 + 16 * v169);
                      if (v385 == v171)
                      {
                        v170 = (int32x2_t *****)(v166 + 16 * v169);
                        goto LABEL_172;
                      }
                    }
                  }
                  *((_BYTE *)v164 + 17) &= ~1u;
                }
              }
            }
          }
          v174 = (char *)v162[7];
          if (v174 == v142)
            goto LABEL_181;
          if (v174 && v174 != (char *)-8192 && v174 != (char *)-4096)
          {
            v185 = v162[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v185 = v162[6];
            v186 = (unint64_t *)v162[6];
            if (v186)
            {
              *v186 = *v186 & 7 | v185;
            }
            else
            {
              v187 = v162[7];
              v188 = ***(int32x2_t ****)v187;
              v189 = (unint64_t)v188[303];
              if (v189 <= v185)
              {
                v190 = v188[305].u32[0];
                if (v189 + 16 * v190 > v185)
                {
                  v191 = v190 - 1;
                  LODWORD(v192) = v191 & ((v187 >> 4) ^ (v187 >> 9));
                  v193 = (uint64_t *)(v189 + 16 * v192);
                  v194 = *v193;
                  if (v187 == *v193)
                  {
LABEL_202:
                    *v193 = -8192;
                    v188[304] = vadd_s32(v188[304], (int32x2_t)0x1FFFFFFFFLL);
                    v187 = v162[7];
                  }
                  else
                  {
                    v195 = 1;
                    while (v194 != -4096)
                    {
                      v196 = v192 + v195++;
                      v192 = v196 & v191;
                      v194 = *(_QWORD *)(v189 + 16 * v192);
                      if (v187 == v194)
                      {
                        v193 = (uint64_t *)(v189 + 16 * v192);
                        goto LABEL_202;
                      }
                    }
                  }
                  *(_BYTE *)(v187 + 17) &= ~1u;
                }
              }
            }
          }
          v162[7] = v142;
          if (v142 == (char *)-8192 || v142 == (char *)-4096 || !v142)
            goto LABEL_181;
          goto LABEL_180;
        }
        v141 = operator new(0x78uLL);
        v142 = (char *)(v141 + 8);
        v141[13] = v141[13] & 0x38000000 | 1;
        *(_QWORD *)v141 = 0;
        *((_QWORD *)v141 + 1) = 0;
        *((_QWORD *)v141 + 2) = 0;
        *((_QWORD *)v141 + 3) = v141 + 8;
        if ((*((_BYTE *)v129 + 23) & 0x10) != 0)
        {
          v143 = ***(_QWORD ***)v129;
          v144 = *(_QWORD *)(v143 + 152);
          v145 = *(unsigned int *)(v143 + 168);
          if (!(_DWORD)v145)
            goto LABEL_154;
          LODWORD(v146) = (v145 - 1) & ((v129 >> 4) ^ (v129 >> 9));
          v147 = (const llvm::GlobalValue **)(v144 + 16 * v146);
          v148 = *v147;
          if (*v147 != v129)
          {
            v149 = 1;
            while (v148 != (const llvm::GlobalValue *)-4096)
            {
              v150 = v146 + v149++;
              v146 = v150 & (v145 - 1);
              v148 = *(const llvm::GlobalValue **)(v144 + 16 * v146);
              if (v148 == v129)
              {
                v147 = (const llvm::GlobalValue **)(v144 + 16 * v146);
                goto LABEL_155;
              }
            }
LABEL_154:
            v147 = (const llvm::GlobalValue **)(v144 + 16 * v145);
          }
LABEL_155:
          v157 = v147[1];
          v160 = *(_QWORD *)v157;
          v159 = (char *)v157 + 16;
          v158 = v160;
        }
        else
        {
          v158 = 0;
          v159 = &byte_1C871356D;
        }
        v161 = (llvm::PointerType *)*((_QWORD *)v129 + 3);
        LOWORD(v386) = 261;
        v382 = v159;
        v383 = v158;
        llvm::GlobalVariable::GlobalVariable((uint64_t)(v141 + 8), v128, v161, 0, 0, 0, (uint64_t)&v382, 0, (*((_DWORD *)v129 + 8) >> 10) & 7, ((unint64_t)*(unsigned int *)(*(_QWORD *)v129 + 8) >> 8) | 0x100000000, 0);
        goto LABEL_157;
      }
      v175 = *(uint64_t ***)v129;
      v176 = *(_DWORD *)(*(_QWORD *)v129 + 8);
      if ((v176 & 0xFE) == 0x12)
        v176 = *(_DWORD *)(*v175[2] + 8);
      if ((*((_BYTE *)v129 + 23) & 0x10) == 0)
      {
        v198 = 0;
        v199 = &byte_1C871356D;
        goto LABEL_209;
      }
      v177 = **v175;
      v178 = *(_QWORD *)(v177 + 152);
      v179 = *(unsigned int *)(v177 + 168);
      if (!(_DWORD)v179)
        goto LABEL_207;
      LODWORD(v180) = (v179 - 1) & ((v129 >> 4) ^ (v129 >> 9));
      v181 = (const llvm::GlobalValue **)(v178 + 16 * v180);
      v182 = *v181;
      if (*v181 != v129)
        break;
LABEL_208:
      v197 = v181[1];
      v200 = *(_QWORD *)v197;
      v199 = (char *)v197 + 16;
      v198 = v200;
LABEL_209:
      v201 = *((_DWORD *)v129 + 8) & 0xF;
      LOWORD(v386) = 261;
      v382 = v199;
      v383 = v198;
      v202 = (llvm::GlobalValue *)llvm::GlobalAlias::create(v131, (llvm::Type *)(v176 >> 8), v201, (uint64_t)&v382, v128);
      llvm::GlobalValue::copyAttributesFrom(v202, v129);
      v383 = 2;
      v384 = 0;
      v385 = (int32x2_t ****)v129;
      if (v129 != (const llvm::GlobalValue *)-8192 && v129 != (const llvm::GlobalValue *)-4096 && v129)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v383);
      v382 = &unk_1E814DA10;
      v386 = a2;
      v162 = sub_1C52E2ED8(a2, &v382);
      if (v385 != (int32x2_t ****)-8192 && v385 != (int32x2_t ****)-4096 && v385)
      {
        v203 = v383 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v383 & 0xFFFFFFFFFFFFFFF8) = v384;
        if (v384)
        {
          *v384 = *v384 & 7 | v203;
        }
        else
        {
          v204 = v385;
          v205 = ***v385;
          v206 = (unint64_t)v205[303];
          if (v206 <= v203)
          {
            v207 = v205[305].u32[0];
            if (v206 + 16 * v207 > v203)
            {
              v208 = v207 - 1;
              LODWORD(v209) = v208 & ((v385 >> 4) ^ (v385 >> 9));
              v210 = (int32x2_t *****)(v206 + 16 * v209);
              v211 = *v210;
              if (v385 == *v210)
              {
LABEL_224:
                *v210 = (int32x2_t ****)-8192;
                v205[304] = vadd_s32(v205[304], (int32x2_t)0x1FFFFFFFFLL);
                v204 = v385;
              }
              else
              {
                v212 = 1;
                while (v211 != (int32x2_t ****)-4096)
                {
                  v213 = v209 + v212++;
                  v209 = v213 & v208;
                  v211 = *(int32x2_t *****)(v206 + 16 * v209);
                  if (v385 == v211)
                  {
                    v210 = (int32x2_t *****)(v206 + 16 * v209);
                    goto LABEL_224;
                  }
                }
              }
              *((_BYTE *)v204 + 17) &= ~1u;
            }
          }
        }
      }
      v214 = (llvm::GlobalValue *)v162[7];
      if (v214 == v202)
        goto LABEL_181;
      if (v214 && v214 != (llvm::GlobalValue *)-8192 && v214 != (llvm::GlobalValue *)-4096)
      {
        v215 = v162[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v215 = v162[6];
        v216 = (unint64_t *)v162[6];
        if (v216)
        {
          *v216 = *v216 & 7 | v215;
        }
        else
        {
          v217 = v162[7];
          v218 = ***(int32x2_t ****)v217;
          v219 = (unint64_t)v218[303];
          if (v219 <= v215)
          {
            v220 = v218[305].u32[0];
            if (v219 + 16 * v220 > v215)
            {
              v221 = v220 - 1;
              LODWORD(v222) = v221 & ((v217 >> 4) ^ (v217 >> 9));
              v223 = (uint64_t *)(v219 + 16 * v222);
              v224 = *v223;
              if (v217 == *v223)
              {
LABEL_243:
                *v223 = -8192;
                v218[304] = vadd_s32(v218[304], (int32x2_t)0x1FFFFFFFFLL);
                v217 = v162[7];
              }
              else
              {
                v225 = 1;
                while (v224 != -4096)
                {
                  v226 = v222 + v225++;
                  v222 = v226 & v221;
                  v224 = *(_QWORD *)(v219 + 16 * v222);
                  if (v217 == v224)
                  {
                    v223 = (uint64_t *)(v219 + 16 * v222);
                    goto LABEL_243;
                  }
                }
              }
              *(_BYTE *)(v217 + 17) &= ~1u;
            }
          }
        }
      }
      v162[7] = v202;
      if (v202 == (llvm::GlobalValue *)-8192 || v202 == (llvm::GlobalValue *)-4096 || !v202)
        goto LABEL_181;
LABEL_180:
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v162 + 5));
LABEL_181:
      v127 = (uint64_t *)v127[1];
      if (v127 == v376)
        goto LABEL_247;
    }
    v183 = 1;
    while (v182 != (const llvm::GlobalValue *)-4096)
    {
      v184 = v180 + v183++;
      v180 = v184 & (v179 - 1);
      v182 = *(const llvm::GlobalValue **)(v178 + 16 * v180);
      if (v182 == v129)
      {
        v181 = (const llvm::GlobalValue **)(v178 + 16 * v180);
        goto LABEL_208;
      }
    }
LABEL_207:
    v181 = (const llvm::GlobalValue **)(v178 + 16 * v179);
    goto LABEL_208;
  }
LABEL_247:
  for (i = (_QWORD *)v374[2]; i != v375; i = (_QWORD *)i[1])
  {
    if (i)
      v228 = (int32x2_t ****)(i - 7);
    else
      v228 = 0;
    v383 = 2;
    v384 = 0;
    v385 = v228;
    if (v228 != (int32x2_t ****)-8192 && v228 != (int32x2_t ****)-4096 && v228 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v383);
    v382 = &unk_1E814DA10;
    v386 = a2;
    v230 = sub_1C52E2ED8(a2, &v382);
    if (v385 != (int32x2_t ****)-8192 && v385 != (int32x2_t ****)-4096 && v385 != 0)
    {
      v232 = v383 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v383 & 0xFFFFFFFFFFFFFFF8) = v384;
      if (v384)
      {
        *v384 = *v384 & 7 | v232;
      }
      else
      {
        v233 = v385;
        v234 = ***v385;
        v235 = (unint64_t)v234[303];
        if (v235 <= v232)
        {
          v236 = v234[305].u32[0];
          if (v235 + 16 * v236 > v232)
          {
            v237 = v236 - 1;
            LODWORD(v238) = v237 & ((v385 >> 4) ^ (v385 >> 9));
            v239 = (int32x2_t *****)(v235 + 16 * v238);
            v240 = *v239;
            if (v385 == *v239)
            {
LABEL_270:
              *v239 = (int32x2_t ****)-8192;
              v234[304] = vadd_s32(v234[304], (int32x2_t)0x1FFFFFFFFLL);
              v233 = v385;
            }
            else
            {
              v241 = 1;
              while (v240 != (int32x2_t ****)-4096)
              {
                v242 = v238 + v241++;
                v238 = v242 & v237;
                v240 = *(int32x2_t *****)(v235 + 16 * v238);
                if (v385 == v240)
                {
                  v239 = (int32x2_t *****)(v235 + 16 * v238);
                  goto LABEL_270;
                }
              }
            }
            *((_BYTE *)v233 + 17) &= ~1u;
          }
        }
      }
    }
    v243 = (llvm::Value *)v230[7];
    v382 = &v384;
    v383 = 0x100000000;
    llvm::Value::getAllMetadata(v228, (uint64_t)&v382);
    if ((_DWORD)v383)
    {
      v244 = (char *)v382;
      v245 = (char *)v382 + 16 * v383;
      do
      {
        v246 = *(_DWORD *)v244;
        v247 = (llvm::MDNode *)*((_QWORD *)v244 + 1);
        v248 = operator new();
        *(_DWORD *)v248 = 0;
        *(_QWORD *)(v248 + 8) = 0;
        *(_DWORD *)(v248 + 16) = 0;
        *(_QWORD *)(v248 + 40) = a2;
        *(_QWORD *)(v248 + 24) = v248 + 40;
        *(_QWORD *)(v248 + 48) = 0;
        *(_QWORD *)(v248 + 32) = 0x200000001;
        *(_QWORD *)(v248 + 72) = v248 + 88;
        *(_QWORD *)(v248 + 80) = 0x400000000;
        *(_QWORD *)(v248 + 184) = v248 + 200;
        *(_QWORD *)(v248 + 192) = 0x100000000;
        *(_QWORD *)(v248 + 216) = v248 + 232;
        *(_QWORD *)(v248 + 224) = 0x1000000000;
        v380 = v248;
        v381 = (_QWORD *)v248;
        v249 = (llvm::MDNode *)sub_1C5FD6E5C(v248, v247);
        sub_1C5FD3718((uint64_t *)&v381, v250);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v380, v251);
        llvm::Value::addMetadata(v243, v246, v249);
        v244 += 16;
      }
      while (v244 != v245);
    }
    if (i && *((_BYTE *)v228 + 16) == 3)
    {
      if ((*((_DWORD *)v228 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_296;
    }
    else if (!*((_BYTE *)v228 + 16) && v228[9] == (int32x2_t ***)(v228 + 9) && (*((_BYTE *)v228 + 34) & 0x80) == 0)
    {
      goto LABEL_296;
    }
    if ((a3(a4, (const llvm::GlobalValue *)v228) & 1) == 0)
    {
      v252 = *((_DWORD *)v243 + 8);
      *((_DWORD *)v243 + 8) = v252 & 0xFFFFFFF0;
      if ((v252 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v243) & 1) == 0)
        *((_DWORD *)v243 + 8) |= 0x4000u;
      goto LABEL_296;
    }
    if (i && *((_BYTE *)v228 + 16) == 3)
    {
      if ((*((_DWORD *)v228 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_295;
    }
    else if (!*((_BYTE *)v228 + 16) && v228[9] == (int32x2_t ***)(v228 + 9) && (*((_BYTE *)v228 + 34) & 0x80) == 0)
    {
      goto LABEL_295;
    }
    v253 = (llvm::MDNode **)*(v228 - 4);
    v254 = operator new();
    *(_DWORD *)v254 = 0;
    *(_QWORD *)(v254 + 8) = 0;
    *(_DWORD *)(v254 + 16) = 0;
    *(_QWORD *)(v254 + 40) = a2;
    *(_QWORD *)(v254 + 24) = v254 + 40;
    *(_QWORD *)(v254 + 48) = 0;
    *(_QWORD *)(v254 + 32) = 0x200000001;
    *(_QWORD *)(v254 + 72) = v254 + 88;
    *(_QWORD *)(v254 + 80) = 0x400000000;
    *(_QWORD *)(v254 + 184) = v254 + 200;
    *(_QWORD *)(v254 + 192) = 0x100000000;
    *(_QWORD *)(v254 + 216) = v254 + 232;
    *(_QWORD *)(v254 + 224) = 0x1000000000;
    v380 = v254;
    v381 = (_QWORD *)v254;
    v255 = (llvm::Constant *)sub_1C5FD3BE0(v254, v253);
    sub_1C5FD3718((uint64_t *)&v381, v256);
    llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v380, v257);
    llvm::GlobalVariable::setInitializer((uint64_t)v243, v255);
LABEL_295:
    sub_1C5ED9534(v243, (uint64_t)v228[6]);
LABEL_296:
    if (v382 != &v384)
      free(v382);
  }
  for (j = (uint64_t *)v374[4]; j != v377; j = (uint64_t *)j[1])
  {
    if (j)
      v259 = (uint64_t)(j - 7);
    else
      v259 = 0;
    v383 = 2;
    v384 = 0;
    v385 = (int32x2_t ****)v259;
    if (v259 != -8192 && v259 != -4096 && v259 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v383);
    v382 = &unk_1E814DA10;
    v386 = a2;
    v261 = sub_1C52E2ED8(a2, &v382);
    if (v385 != (int32x2_t ****)-8192 && v385 != (int32x2_t ****)-4096 && v385 != 0)
    {
      v263 = v383 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v383 & 0xFFFFFFFFFFFFFFF8) = v384;
      if (v384)
      {
        *v384 = *v384 & 7 | v263;
      }
      else
      {
        v264 = v385;
        v265 = ***v385;
        v266 = (unint64_t)v265[303];
        if (v266 <= v263)
        {
          v267 = v265[305].u32[0];
          if (v266 + 16 * v267 > v263)
          {
            v268 = v267 - 1;
            LODWORD(v269) = v268 & ((v385 >> 4) ^ (v385 >> 9));
            v270 = (int32x2_t *****)(v266 + 16 * v269);
            v271 = *v270;
            if (v385 == *v270)
            {
LABEL_322:
              *v270 = (int32x2_t ****)-8192;
              v265[304] = vadd_s32(v265[304], (int32x2_t)0x1FFFFFFFFLL);
              v264 = v385;
            }
            else
            {
              v272 = 1;
              while (v271 != (int32x2_t ****)-4096)
              {
                v273 = v269 + v272++;
                v269 = v273 & v268;
                v271 = *(int32x2_t *****)(v266 + 16 * v269);
                if (v385 == v271)
                {
                  v270 = (int32x2_t *****)(v266 + 16 * v269);
                  goto LABEL_322;
                }
              }
            }
            *((_BYTE *)v264 + 17) &= ~1u;
          }
        }
      }
    }
    v274 = v261[7];
    if (j && *(_BYTE *)(v259 + 16) == 3)
    {
      if ((*(_DWORD *)(v259 + 20) & 0x7FFFFFF) != 0)
        goto LABEL_337;
    }
    else if (*(_BYTE *)(v259 + 16) || *(_QWORD *)(v259 + 72) != v259 + 72 || (*(_BYTE *)(v259 + 34) & 0x80) != 0)
    {
LABEL_337:
      if ((a3(a4, (const llvm::GlobalValue *)v259) & 1) == 0)
      {
        v325 = *(_DWORD *)(v274 + 32);
        *(_DWORD *)(v274 + 32) = v325 & 0xFFFFFFF0;
        if ((v325 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v274) & 1) == 0)
          *(_DWORD *)(v274 + 32) |= 0x4000u;
        sub_1C53D1F60((_QWORD *)v274, 0);
        *(_WORD *)(v274 + 18) &= ~8u;
        continue;
      }
      if ((*(_WORD *)(v274 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)v274);
      v283 = *(uint64_t ****)(v274 + 88);
      v284 = sub_1C485F330(v259);
      if ((uint64_t ***)v284 == v285)
      {
LABEL_395:
        v382 = &v384;
        v383 = 0x800000000;
        llvm::CloneFunctionInto(v274, (const llvm::Function *)v259, a2, 3, (uint64_t)&v382, "", 0, 0, 0);
        if ((*(_WORD *)(v259 + 18) & 8) != 0)
        {
          v326 = *(_DWORD *)(v259 + 20);
          if ((v326 & 0x40000000) != 0)
            v327 = *(llvm::MDNode ****)(v259 - 8);
          else
            v327 = (llvm::MDNode ***)(v259 - 32 * (v326 & 0x7FFFFFF));
          v328 = *v327;
          v329 = operator new();
          *(_DWORD *)v329 = 0;
          *(_QWORD *)(v329 + 8) = 0;
          *(_DWORD *)(v329 + 16) = 0;
          *(_QWORD *)(v329 + 40) = a2;
          *(_QWORD *)(v329 + 24) = v329 + 40;
          *(_QWORD *)(v329 + 48) = 0;
          *(_QWORD *)(v329 + 32) = 0x200000001;
          *(_QWORD *)(v329 + 72) = v329 + 88;
          *(_QWORD *)(v329 + 80) = 0x400000000;
          *(_QWORD *)(v329 + 184) = v329 + 200;
          *(_QWORD *)(v329 + 192) = 0x100000000;
          *(_QWORD *)(v329 + 216) = v329 + 232;
          *(_QWORD *)(v329 + 224) = 0x1000000000;
          v380 = v329;
          v381 = (_QWORD *)v329;
          v330 = sub_1C5FD3BE0(v329, v328);
          sub_1C5FD3718((uint64_t *)&v381, v331);
          llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v380, v332);
          sub_1C53D1F60((_QWORD *)v274, v330);
          *(_WORD *)(v274 + 18) = *(_WORD *)(v274 + 18) & 0xFFF7 | (8 * (v330 != 0));
        }
        sub_1C5ED9534((llvm::GlobalObject *)v274, *(_QWORD *)(v259 + 48));
        if (v382 != &v384)
          free(v382);
        continue;
      }
      v286 = (uint64_t ***)v284;
      v287 = v285;
      while (2)
      {
        if ((*((_BYTE *)v286 + 23) & 0x10) != 0)
        {
          v288 = ***v286;
          v289 = *(_QWORD *)(v288 + 152);
          v290 = *(unsigned int *)(v288 + 168);
          if (!(_DWORD)v290)
            goto LABEL_349;
          LODWORD(v291) = (v290 - 1) & ((v286 >> 4) ^ (v286 >> 9));
          v292 = (uint64_t ****)(v289 + 16 * v291);
          v293 = *v292;
          if (*v292 != v286)
          {
            v294 = 1;
            while (v293 != (uint64_t ***)-4096)
            {
              v295 = v291 + v294++;
              v291 = v295 & (v290 - 1);
              v293 = *(uint64_t ****)(v289 + 16 * v291);
              if (v293 == v286)
              {
                v292 = (uint64_t ****)(v289 + 16 * v291);
                goto LABEL_350;
              }
            }
LABEL_349:
            v292 = (uint64_t ****)(v289 + 16 * v290);
          }
LABEL_350:
          v296 = v292[1];
          v299 = (uint64_t)*v296;
          v298 = (char *)(v296 + 2);
          v297 = v299;
        }
        else
        {
          v297 = 0;
          v298 = &byte_1C871356D;
        }
        LOWORD(v386) = 261;
        v382 = v298;
        v383 = v297;
        llvm::Value::setName(v283, (uint64_t)&v382);
        v383 = 2;
        v384 = 0;
        v385 = (int32x2_t ****)v286;
        if (v286 != (uint64_t ***)-8192 && v286 != (uint64_t ***)-4096 && v286)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v383);
        v382 = &unk_1E814DA10;
        v386 = a2;
        v300 = sub_1C52E2ED8(a2, &v382);
        if (v385 != (int32x2_t ****)-8192 && v385 != (int32x2_t ****)-4096 && v385)
        {
          v301 = v383 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v383 & 0xFFFFFFFFFFFFFFF8) = v384;
          if (v384)
          {
            *v384 = *v384 & 7 | v301;
          }
          else
          {
            v302 = v385;
            v303 = ***v385;
            v304 = (unint64_t)v303[303];
            if (v304 <= v301)
            {
              v305 = v303[305].u32[0];
              if (v304 + 16 * v305 > v301)
              {
                v306 = v305 - 1;
                LODWORD(v307) = v306 & ((v385 >> 4) ^ (v385 >> 9));
                v308 = (int32x2_t *****)(v304 + 16 * v307);
                v309 = *v308;
                if (v385 == *v308)
                {
LABEL_366:
                  *v308 = (int32x2_t ****)-8192;
                  v303[304] = vadd_s32(v303[304], (int32x2_t)0x1FFFFFFFFLL);
                  v302 = v385;
                }
                else
                {
                  v310 = 1;
                  while (v309 != (int32x2_t ****)-4096)
                  {
                    v311 = v307 + v310++;
                    v307 = v311 & v306;
                    v309 = *(int32x2_t *****)(v304 + 16 * v307);
                    if (v385 == v309)
                    {
                      v308 = (int32x2_t *****)(v304 + 16 * v307);
                      goto LABEL_366;
                    }
                  }
                }
                *((_BYTE *)v302 + 17) &= ~1u;
              }
            }
          }
        }
        v312 = (uint64_t ***)v300[7];
        if (v312 != v283)
        {
          if (v312 && v312 != (uint64_t ***)-8192 && v312 != (uint64_t ***)-4096)
          {
            v313 = v300[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v313 = v300[6];
            v314 = (unint64_t *)v300[6];
            if (v314)
            {
              *v314 = *v314 & 7 | v313;
            }
            else
            {
              v315 = v300[7];
              v316 = ***(int32x2_t ****)v315;
              v317 = (unint64_t)v316[303];
              if (v317 <= v313)
              {
                v318 = v316[305].u32[0];
                if (v317 + 16 * v318 > v313)
                {
                  v319 = v318 - 1;
                  LODWORD(v320) = v319 & ((v315 >> 4) ^ (v315 >> 9));
                  v321 = (uint64_t *)(v317 + 16 * v320);
                  v322 = *v321;
                  if (v315 == *v321)
                  {
LABEL_387:
                    *v321 = -8192;
                    v316[304] = vadd_s32(v316[304], (int32x2_t)0x1FFFFFFFFLL);
                    v315 = v300[7];
                  }
                  else
                  {
                    v323 = 1;
                    while (v322 != -4096)
                    {
                      v324 = v320 + v323++;
                      v320 = v324 & v319;
                      v322 = *(_QWORD *)(v317 + 16 * v320);
                      if (v315 == v322)
                      {
                        v321 = (uint64_t *)(v317 + 16 * v320);
                        goto LABEL_387;
                      }
                    }
                  }
                  *(_BYTE *)(v315 + 17) &= ~1u;
                }
              }
            }
          }
          v300[7] = v283;
          if (v283 != (uint64_t ***)-8192 && v283 != (uint64_t ***)-4096 && v283)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v300 + 5));
        }
        v283 += 5;
        v286 += 5;
        if (v286 == v287)
          goto LABEL_395;
        continue;
      }
    }
    v382 = &v384;
    v383 = 0x100000000;
    llvm::Value::getAllMetadata((_BYTE *)v259, (uint64_t)&v382);
    v275 = (unint64_t **)v382;
    v276 = (unint64_t **)((char *)v382 + 16 * v383);
    if ((_DWORD)v383)
    {
      do
      {
        v277 = *(_DWORD *)v275;
        v278 = (llvm::MDNode *)v275[1];
        v279 = operator new();
        *(_DWORD *)v279 = 0;
        *(_QWORD *)(v279 + 8) = 0;
        *(_DWORD *)(v279 + 16) = 0;
        *(_QWORD *)(v279 + 40) = a2;
        *(_QWORD *)(v279 + 24) = v279 + 40;
        *(_QWORD *)(v279 + 48) = 0;
        *(_QWORD *)(v279 + 32) = 0x200000001;
        *(_QWORD *)(v279 + 72) = v279 + 88;
        *(_QWORD *)(v279 + 80) = 0x400000000;
        *(_QWORD *)(v279 + 184) = v279 + 200;
        *(_QWORD *)(v279 + 192) = 0x100000000;
        *(_QWORD *)(v279 + 216) = v279 + 232;
        *(_QWORD *)(v279 + 224) = 0x1000000000;
        v380 = v279;
        v381 = (_QWORD *)v279;
        v280 = (llvm::MDNode *)sub_1C5FD6E5C(v279, v278);
        sub_1C5FD3718((uint64_t *)&v381, v281);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v380, v282);
        llvm::Value::addMetadata((llvm::Value *)v274, v277, v280);
        v275 += 2;
      }
      while (v275 != v276);
      v275 = (unint64_t **)v382;
    }
    if (v275 != &v384)
      free(v275);
  }
  for (k = (uint64_t *)v374[6]; k != v376; k = (uint64_t *)k[1])
  {
    if (k)
      v334 = (int32x2_t ****)(k - 6);
    else
      v334 = 0;
    if (a3(a4, (const llvm::GlobalValue *)v334))
    {
      v383 = 2;
      v384 = 0;
      v385 = v334;
      if (v334 != (int32x2_t ****)-8192 && v334 != (int32x2_t ****)-4096 && v334)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v383);
      v382 = &unk_1E814DA10;
      v386 = a2;
      v335 = sub_1C52E2ED8(a2, &v382);
      if (v385 != (int32x2_t ****)-8192 && v385 != (int32x2_t ****)-4096 && v385)
      {
        v336 = v383 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v383 & 0xFFFFFFFFFFFFFFF8) = v384;
        if (v384)
        {
          *v384 = *v384 & 7 | v336;
        }
        else
        {
          v337 = v385;
          v338 = ***v385;
          v339 = (unint64_t)v338[303];
          if (v339 <= v336)
          {
            v340 = v338[305].u32[0];
            if (v339 + 16 * v340 > v336)
            {
              v341 = v340 - 1;
              LODWORD(v342) = v341 & ((v385 >> 4) ^ (v385 >> 9));
              v343 = (int32x2_t *****)(v339 + 16 * v342);
              v344 = *v343;
              if (v385 == *v343)
              {
LABEL_423:
                *v343 = (int32x2_t ****)-8192;
                v338[304] = vadd_s32(v338[304], (int32x2_t)0x1FFFFFFFFLL);
                v337 = v385;
              }
              else
              {
                v345 = 1;
                while (v344 != (int32x2_t ****)-4096)
                {
                  v346 = v342 + v345++;
                  v342 = v346 & v341;
                  v344 = *(int32x2_t *****)(v339 + 16 * v342);
                  if (v385 == v344)
                  {
                    v343 = (int32x2_t *****)(v339 + 16 * v342);
                    goto LABEL_423;
                  }
                }
              }
              *((_BYTE *)v337 + 17) &= ~1u;
            }
          }
        }
      }
      v347 = (llvm::MDNode **)*(v334 - 4);
      if (v347)
      {
        v348 = v335[7];
        v349 = (_QWORD *)operator new();
        *(_DWORD *)v349 = 0;
        v349[1] = 0;
        *((_DWORD *)v349 + 4) = 0;
        v349[5] = a2;
        v349[3] = v349 + 5;
        v349[6] = 0;
        v349[4] = 0x200000001;
        v349[9] = v349 + 11;
        v349[10] = 0x400000000;
        v349[23] = v349 + 25;
        v349[24] = 0x100000000;
        v349[27] = v349 + 29;
        v349[28] = 0x1000000000;
        v381 = v349;
        v382 = v349;
        v350 = (llvm::Constant *)sub_1C5FD3BE0((uint64_t)v349, v347);
        sub_1C5FD3718((uint64_t *)&v382, v351);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v381, v352);
        llvm::GlobalAlias::setAliasee(v348, v350);
      }
    }
  }
  v353 = v374[10];
  if ((uint64_t *)v353 != v374 + 9)
  {
    v354 = *v373;
    do
    {
      v355 = *(_BYTE *)(v353 + 39);
      v356 = v355;
      if (v355 >= 0)
        v357 = (unsigned __int8 *)(v353 + 16);
      else
        v357 = *(unsigned __int8 **)(v353 + 16);
      v358 = v355 & 0x7F;
      if (v356 >= 0)
        v359 = v358;
      else
        v359 = *(_QWORD *)(v353 + 24);
      inserted = llvm::Module::getOrInsertNamedMetadata(v354, v357, v359);
      v361 = *(unsigned int *)(*(_QWORD *)(v353 + 48) + 8);
      if ((_DWORD)v361)
      {
        v362 = inserted;
        v363 = 0;
        v364 = 8 * v361;
        do
        {
          v365 = *(llvm::MDNode **)(**(_QWORD **)(v353 + 48) + v363);
          v366 = (_QWORD *)operator new();
          *(_DWORD *)v366 = 0;
          v366[1] = 0;
          *((_DWORD *)v366 + 4) = 0;
          v366[5] = a2;
          v366[3] = v366 + 5;
          v366[6] = 0;
          v366[4] = 0x200000001;
          v366[9] = v366 + 11;
          v366[10] = 0x400000000;
          v366[23] = v366 + 25;
          v366[24] = 0x100000000;
          v366[27] = v366 + 29;
          v366[28] = 0x1000000000;
          v381 = v366;
          v382 = v366;
          v367 = sub_1C5FD6E5C((uint64_t)v366, v365);
          sub_1C5FD3718((uint64_t *)&v382, v368);
          llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v381, v369);
          v382 = v367;
          v370 = *(_QWORD *)(v362 + 48);
          v371 = *(unsigned int *)(v370 + 8);
          if (v371 >= *(_DWORD *)(v370 + 12))
          {
            sub_1C5419FD8(*(_QWORD *)(v362 + 48), (unsigned __int8 **)&v382);
          }
          else
          {
            v372 = (_QWORD *)(*(_QWORD *)v370 + 8 * v371);
            *v372 = v367;
            if (v367)
            {
              llvm::MetadataTracking::track((uint64_t)v372, (unsigned __int8 *)v367, 2);
              LODWORD(v371) = *(_DWORD *)(v370 + 8);
            }
            *(_DWORD *)(v370 + 8) = v371 + 1;
          }
          v363 += 8;
        }
        while (v364 != v363);
      }
      v353 = *(_QWORD *)(v353 + 8);
    }
    while ((uint64_t *)v353 != v374 + 9);
  }
}

llvm::GlobalObject *sub_1C5ED9534(llvm::GlobalObject *result, uint64_t a2)
{
  llvm::GlobalObject *v3;
  size_t *inserted;

  if (a2)
  {
    v3 = result;
    inserted = llvm::Module::getOrInsertComdat(*((_QWORD *)result + 5), (unsigned __int8 *)(*(_QWORD *)a2 + 72), **(_QWORD **)a2);
    *((_DWORD *)inserted + 2) = *(_DWORD *)(a2 + 8);
    return (llvm::GlobalObject *)llvm::GlobalObject::setComdat(v3, (llvm::Comdat *)inserted);
  }
  return result;
}

uint64_t LLVMCloneModule(llvm *a1)
{
  uint64_t v2;

  llvm::CloneModule(a1, &v2);
  return v2;
}

uint64_t sub_1C5ED95A0()
{
  return 1;
}

uint64_t llvm::CodeExtractor::CodeExtractor(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, char a10, uint64_t a11, __int128 *a12)
{
  _BYTE *v14;
  __int128 v15;

  *(_QWORD *)a1 = a4;
  if (byte_1ED826168)
    a5 = 1;
  *(_BYTE *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  *(_QWORD *)(a1 + 32) = a8;
  *(_QWORD *)(a1 + 40) = a11;
  *(_BYTE *)(a1 + 48) = a9;
  sub_1C5ED965C(a1 + 56, a2, a3, a4, a9, a10);
  *(_DWORD *)(a1 + 104) = -1;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x400000000;
  v14 = (_BYTE *)(a1 + 168);
  if (*((char *)a12 + 23) < 0)
  {
    sub_1C47EBC30(v14, *(void **)a12, *((_QWORD *)a12 + 1));
  }
  else
  {
    v15 = *a12;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a12 + 2);
    *(_OWORD *)v14 = v15;
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  return a1;
}

{
  return llvm::CodeExtractor::CodeExtractor(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

_QWORD *sub_1C5ED965C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  BOOL v81;
  uint64_t i;
  uint64_t v84;
  unsigned int v85;
  BOOL v86;
  uint64_t v87;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  int v96;
  unsigned int v97;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  int v110;
  _BYTE v111[128];
  void *v112;
  uint64_t v113;
  _QWORD v114[18];

  v114[16] = *MEMORY[0x1E0C80C00];
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  if (!a3)
  {
    v13 = 0;
    v77 = 0;
LABEL_186:
    *(_QWORD *)a1 = v101;
    *(_QWORD *)(a1 + 8) = v102;
    v101 = 0;
    v102 = 0;
    *(_DWORD *)(a1 + 16) = v103;
    v103 = 0;
    *(_QWORD *)(a1 + 24) = v77;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v106;
    v105 = 0;
    v106 = 0;
    v104 = 0;
    return sub_1C5408A20(&v101);
  }
  v11 = 8 * a3;
  do
  {
    v12 = *a2;
    v107 = (_BYTE *)*a2;
    if (!a4 || llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a4, v12))
      sub_1C5ACED14((uint64_t)&v101, &v107);
    ++a2;
    v11 -= 8;
  }
  while (v11);
  v13 = v104;
  v100 = v105;
  if (v104 == v105)
  {
    v77 = v104;
    goto LABEL_186;
  }
  v99 = a5;
  while (2)
  {
    v14 = *v13;
    if ((*(_WORD *)(*v13 + 18) & 0x7FFF) != 0)
      break;
    v107 = v111;
    v108 = v111;
    v109 = 16;
    v110 = 0;
    v112 = v114;
    v113 = 0x1000000000;
    v15 = v14 + 40;
    v16 = *(_QWORD *)(v14 + 48);
    if (v16 != v14 + 40)
    {
      v17 = 0;
      do
      {
        if (v16)
          v18 = v16 - 24;
        else
          v18 = 0;
        if (v17 >= HIDWORD(v113))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v17 + 1, 8);
          v17 = v113;
        }
        *((_QWORD *)v112 + v17) = v18;
        v17 = v113 + 1;
        LODWORD(v113) = v113 + 1;
        v16 = *(_QWORD *)(v16 + 8);
      }
      while (v16 != v15);
      while (v17)
      {
        v26 = *((_QWORD *)v112 + v17 - 1);
        LODWORD(v113) = v17 - 1;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v107, v26);
        if (v27)
        {
          v28 = *(unsigned __int8 *)(v26 + 16);
          if (v28 == 4)
            goto LABEL_39;
          if (v28 < 0x1C || *(_QWORD *)(v26 + 40) == v14)
          {
            v19 = *(_DWORD *)(v26 + 20);
            if ((v19 & 0x40000000) != 0)
            {
              v21 = *(_QWORD *)(v26 - 8);
              v20 = v19 & 0x7FFFFFF;
              if (!v20)
                goto LABEL_35;
            }
            else
            {
              v20 = v19 & 0x7FFFFFF;
              v21 = v26 - 32 * v20;
              if (!v20)
                goto LABEL_35;
            }
            v22 = 32 * v20;
            do
            {
              v23 = *(_QWORD *)v21;
              if (*(_QWORD *)v21)
                v24 = *(unsigned __int8 *)(*(_QWORD *)v21 + 16) - 21 >= 7;
              else
                v24 = 0;
              if (v24)
              {
                v25 = v113;
                if (v113 >= (unint64_t)HIDWORD(v113))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 8);
                  v25 = v113;
                }
                *((_QWORD *)v112 + v25) = v23;
                LODWORD(v113) = v113 + 1;
              }
              v21 += 32;
              v22 -= 32;
            }
            while (v22);
          }
        }
LABEL_35:
        v17 = v113;
      }
    }
    v30 = *(_QWORD *)(v14 + 48);
    if (v30 == v15)
    {
LABEL_137:
      v29 = 1;
      goto LABEL_138;
    }
    v31 = v103 - 1;
    while (1)
    {
      v32 = v30 - 24;
      if (!v30)
        v32 = 0;
      v33 = *(unsigned __int8 *)(v32 + 16);
      if (v33 == 59)
      {
        if ((a6 & 1) == 0)
          goto LABEL_39;
        goto LABEL_97;
      }
      if (v30 && v33 == 33)
      {
        v34 = *(_QWORD *)(v32 - 64);
        if (v34)
        {
          if (!v103)
            goto LABEL_39;
          v35 = ((v34 >> 4) ^ (v34 >> 9)) & v31;
          v36 = *(_QWORD *)(v101 + 8 * v35);
          if (v34 != v36)
          {
            v37 = 1;
            while (v36 != -4096)
            {
              v38 = v35 + v37++;
              v35 = v38 & v31;
              v36 = *(_QWORD *)(v101 + 8 * v35);
              if (v34 == v36)
                goto LABEL_97;
            }
            goto LABEL_39;
          }
        }
        goto LABEL_97;
      }
      v39 = v33 == 38 ? v32 : 0;
      if (!v30 || v33 != 38)
        break;
      v40 = *(_WORD *)(v39 + 18);
      v41 = *(_DWORD *)(v39 + 20);
      if ((v40 & 1) != 0)
      {
        v42 = (v41 & 0x40000000) != 0 ? *(_QWORD *)(v39 - 8) : v39 - 32 * (v41 & 0x7FFFFFF);
        v55 = *(_QWORD *)(v42 + 32);
        if (v55)
        {
          if (!v103)
            goto LABEL_39;
          v56 = ((v55 >> 4) ^ (v55 >> 9)) & v31;
          v57 = *(_QWORD *)(v101 + 8 * v56);
          if (v55 != v57)
          {
            v75 = 1;
            while (v57 != -4096)
            {
              v76 = v56 + v75++;
              v56 = v76 & v31;
              v57 = *(_QWORD *)(v101 + 8 * v56);
              if (v55 == v57)
                goto LABEL_90;
            }
            goto LABEL_39;
          }
        }
      }
LABEL_90:
      if ((v41 & 0x40000000) != 0)
      {
        v59 = *(_QWORD *)(v39 - 8);
        v58 = v41 & 0x7FFFFFF;
      }
      else
      {
        v58 = v41 & 0x7FFFFFF;
        v59 = v39 - 32 * v58;
      }
      if ((v40 & 1) != 0)
        v60 = 2;
      else
        v60 = 1;
      if (v60 != v58)
      {
        if (v103)
        {
          v61 = (_QWORD *)(v59 + 32 * v58);
          v62 = (_QWORD *)(v59 + 32 * v60);
          while (1)
          {
            v63 = ((*v62 >> 4) ^ (*v62 >> 9)) & v31;
            v64 = *(_QWORD *)(v101 + 8 * v63);
            if (*v62 != v64)
              break;
LABEL_102:
            v62 += 4;
            if (v62 == v61)
              goto LABEL_97;
          }
          v65 = 1;
          while (v64 != -4096)
          {
            v66 = v63 + v65++;
            v63 = v66 & v31;
            v64 = *(_QWORD *)(v101 + 8 * v63);
            if (*v62 == v64)
              goto LABEL_102;
          }
        }
        goto LABEL_39;
      }
LABEL_97:
      v30 = *(_QWORD *)(v30 + 8);
      if (v30 == v15)
        goto LABEL_137;
    }
    if (v30 && v33 == 80)
    {
LABEL_66:
      while (1)
      {
        v32 = *(_QWORD *)(v32 + 8);
        if (!v32)
          goto LABEL_97;
        v43 = *(_QWORD *)(v32 + 24);
        if (v43 && *(_BYTE *)(v43 + 16) == 37)
        {
          if (!v103)
            goto LABEL_39;
          v44 = *(_QWORD *)(v43 + 40);
          v45 = ((v44 >> 4) ^ (v44 >> 9)) & v31;
          v46 = *(_QWORD *)(v101 + 8 * v45);
          if (v44 != v46)
          {
            v47 = 1;
            while (v46 != -4096)
            {
              v48 = v45 + v47++;
              v45 = v48 & v31;
              v46 = *(_QWORD *)(v101 + 8 * v45);
              if (v44 == v46)
                goto LABEL_66;
            }
            goto LABEL_39;
          }
        }
      }
    }
    if (v30 && v33 == 79)
    {
LABEL_77:
      while (1)
      {
        v32 = *(_QWORD *)(v32 + 8);
        if (!v32)
          goto LABEL_97;
        v49 = *(_QWORD *)(v32 + 24);
        if (v49 && *(_BYTE *)(v49 + 16) == 36)
        {
          if (!v103)
            goto LABEL_39;
          v50 = *(_QWORD *)(v49 + 40);
          v51 = ((v50 >> 4) ^ (v50 >> 9)) & v31;
          v52 = *(_QWORD *)(v101 + 8 * v51);
          if (v50 != v52)
          {
            v53 = 1;
            while (v52 != -4096)
            {
              v54 = v51 + v53++;
              v51 = v54 & v31;
              v52 = *(_QWORD *)(v101 + 8 * v51);
              if (v50 == v52)
                goto LABEL_77;
            }
            goto LABEL_39;
          }
        }
      }
    }
    if (v33 == 36)
      v67 = v32;
    else
      v67 = 0;
    if (!v30 || v33 != 36)
    {
      if (v33 != 84)
        v32 = 0;
      if (v30)
      {
        if (v33 == 84)
        {
          v73 = *(_QWORD *)(v32 - 32);
          if (v73)
          {
            if (!*(_BYTE *)(v73 + 16) && *(_QWORD *)(v73 + 24) == *(_QWORD *)(v32 + 72))
            {
              v74 = *(_DWORD *)(v73 + 36);
              if (v74 == 315)
              {
                if (!v99)
                  goto LABEL_39;
              }
              else if (v74 == 73)
              {
                goto LABEL_39;
              }
            }
          }
        }
      }
      goto LABEL_97;
    }
    if ((*(_WORD *)(v67 + 18) & 1) == 0)
      goto LABEL_97;
    v68 = *(_QWORD *)(v67 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF) + 32);
    if (!v68)
      goto LABEL_97;
    if (!v103)
      goto LABEL_39;
    v69 = ((v68 >> 4) ^ (v68 >> 9)) & v31;
    v70 = *(_QWORD *)(v101 + 8 * v69);
    if (v68 == v70)
      goto LABEL_97;
    v71 = 1;
    while (v70 != -4096)
    {
      v72 = v69 + v71++;
      v69 = v72 & v31;
      v70 = *(_QWORD *)(v101 + 8 * v69);
      if (v68 == v70)
        goto LABEL_97;
    }
LABEL_39:
    v29 = 0;
LABEL_138:
    if (v112 != v114)
      free(v112);
    if (v108 != v107)
      free(v108);
    if ((v29 & 1) != 0)
    {
      v77 = v104;
      if (v14 == *v104)
      {
        for (i = *(_QWORD *)(v14 + 48); ; i = *(_QWORD *)(i + 8))
        {
          v84 = i - 24;
          if (!i)
            v84 = 0;
          if (*(_BYTE *)(v84 + 16) != 83)
            break;
        }
        v85 = *(unsigned __int8 *)(i - 8) - 38;
        v86 = v85 > 0x38;
        v87 = (1 << v85) & 0x100060000000001;
        if (!v86 && v87 != 0)
          break;
      }
      else
      {
        v78 = *(_QWORD *)(v14 + 8);
        if (v78)
        {
          while (1)
          {
            v79 = *(_QWORD *)(v78 + 24);
            v80 = *(unsigned __int8 *)(v79 + 16);
            v81 = v79 && v80 >= 0x1C;
            if (v81 && v80 - 29 < 0xB)
              break;
            v78 = *(_QWORD *)(v78 + 8);
            if (!v78)
              goto LABEL_165;
          }
          if (v103)
          {
            v89 = v103 - 1;
LABEL_169:
            v90 = *(_QWORD *)(v79 + 40);
            v91 = ((v90 >> 4) ^ (v90 >> 9)) & v89;
            v92 = *(_QWORD *)(v101 + 8 * v91);
            if (v90 == v92)
              goto LABEL_170;
            v96 = 1;
            while (v92 != -4096)
            {
              v97 = v91 + v96++;
              v91 = v97 & v89;
              v92 = *(_QWORD *)(v101 + 8 * v91);
              if (v90 == v92)
              {
LABEL_170:
                while (1)
                {
                  v78 = *(_QWORD *)(v78 + 8);
                  if (!v78)
                    goto LABEL_165;
                  v79 = *(_QWORD *)(v78 + 24);
                  v93 = *(unsigned __int8 *)(v79 + 16);
                  if (v79)
                    v94 = v93 >= 0x1C;
                  else
                    v94 = 0;
                  if (v94 && v93 - 29 < 0xB)
                    goto LABEL_169;
                }
              }
            }
          }
          break;
        }
      }
LABEL_165:
      if (++v13 == v100)
      {
        v13 = v105;
        goto LABEL_186;
      }
      continue;
    }
    break;
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return sub_1C5408A20(&v101);
}

uint64_t llvm::CodeExtractor::CodeExtractor(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8)
{
  _BYTE *v11;
  __int128 v12;

  *(_QWORD *)a1 = a2;
  if (byte_1ED826168)
    a4 = 1;
  *(_BYTE *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  sub_1C5ED965C(a1 + 56, *(uint64_t **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3, a2, 0, 0);
  *(_DWORD *)(a1 + 104) = -1;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x400000000;
  v11 = (_BYTE *)(a1 + 168);
  if (*((char *)a8 + 23) < 0)
  {
    sub_1C47EBC30(v11, *(void **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v12 = *a8;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a8 + 2);
    *(_OWORD *)v11 = v12;
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  return a1;
}

llvm::CodeExtractorAnalysisCache *llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache(llvm::CodeExtractorAnalysisCache *this, llvm::Function *a2)
{
  char *v3;
  char *v4;
  char *v5;
  llvm::BasicBlock *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  __int128 v19;
  _BYTE v20[24];
  _BYTE *v21;
  __int128 v22;
  _QWORD v23[3];
  _QWORD *v24;
  __int128 v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 16;
  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 0x1000000000;
  v4 = (char *)a2 + 72;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  v5 = (char *)*((_QWORD *)a2 + 10);
  if (v5 != (char *)a2 + 72)
  {
    while (1)
    {
      v6 = v5 ? (llvm::BasicBlock *)(v5 - 24) : 0;
      llvm::BasicBlock::instructionsWithoutDebug(v6, 1, (uint64_t)&v22);
      v19 = v22;
      if (v24)
      {
        if (v24 == v23)
        {
          v21 = v20;
          (*(void (**)(_QWORD *, _BYTE *))(v23[0] + 24))(v23, v20);
        }
        else
        {
          v21 = (_BYTE *)(*(uint64_t (**)(void))(*v24 + 16))();
        }
      }
      else
      {
LABEL_32:
        v21 = 0;
      }
      v16 = v25;
      if (v27)
      {
        if (v27 == v26)
        {
          v18 = v17;
          (*(void (**)(_QWORD *, _BYTE *))(v26[0] + 24))(v26, v17);
        }
        else
        {
          v18 = (_BYTE *)(*(uint64_t (**)(void))(*v27 + 16))();
        }
      }
      else
      {
        v18 = 0;
      }
LABEL_11:
      v7 = v19;
      while (v7 != v16)
      {
        v8 = v7 - 24;
        if (v7 && *(_BYTE *)(v7 - 8) == 59)
        {
          v13 = *((unsigned int *)this + 2);
          if (v13 >= *((unsigned int *)this + 3))
          {
            v15 = v8;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (uint64_t)v3, v13 + 1, 8);
            v8 = v15;
            v13 = *((unsigned int *)this + 2);
          }
          *(_QWORD *)(*(_QWORD *)this + 8 * v13) = v8;
          ++*((_DWORD *)this + 2);
        }
        while (1)
        {
          v7 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)&v19 = v7;
          if (v7 == *((_QWORD *)&v19 + 1))
            break;
          if (!v21)
          {
            sub_1C485C2F0();
            goto LABEL_32;
          }
          if ((*(unsigned int (**)(void))(*(_QWORD *)v21 + 48))())
            goto LABEL_11;
        }
      }
      v9 = v18;
      if (v18 == v17)
        break;
      if (v18)
      {
        v10 = 5;
        goto LABEL_21;
      }
LABEL_22:
      v11 = v21;
      if (v21 == v20)
      {
        v11 = v20;
        v12 = 4;
      }
      else
      {
        if (!v21)
          goto LABEL_25;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_25:
      sub_1C5EE1AB4(&v22);
      llvm::CodeExtractorAnalysisCache::findSideEffectInfoForBlock(this, v6);
      v5 = (char *)*((_QWORD *)v5 + 1);
      if (v5 == v4)
        return this;
    }
    v9 = v17;
    v10 = 4;
LABEL_21:
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_22;
  }
  return this;
}

_QWORD *llvm::CodeExtractorAnalysisCache::findSideEffectInfoForBlock(llvm::CodeExtractorAnalysisCache *this, llvm::BasicBlock *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  llvm::Instruction *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v23;
  llvm::BasicBlock **v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  llvm::BasicBlock *v31;
  llvm::Value *v32;
  _BYTE v33[24];
  __int128 v34;
  _BYTE v35[24];
  _BYTE *v36;
  __int128 v37;
  _BYTE v38[24];
  _BYTE *v39;
  __int128 v40;
  _BYTE v41[24];
  _BYTE *v42;
  __int128 v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  llvm::BasicBlock::instructionsWithoutDebug(a2, 1, (uint64_t)&v40);
  v37 = v40;
  v4 = v38;
  if (v42)
  {
    if (v42 == v41)
    {
      v39 = v38;
      (*(void (**)(void))(*(_QWORD *)v42 + 24))();
    }
    else
    {
      v39 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v42 + 16))();
    }
  }
  else
  {
    v39 = 0;
  }
  v34 = v43;
  v5 = v35;
  if (v45)
  {
    if (v45 == v44)
    {
      v36 = v35;
      (*(void (**)(void))(*(_QWORD *)v45 + 24))();
    }
    else
    {
      v36 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v45 + 16))();
    }
  }
  else
  {
    v36 = 0;
  }
  v6 = v37;
  if ((_QWORD)v37 == (_QWORD)v34)
    goto LABEL_60;
  while (1)
  {
    v7 = (llvm::Instruction *)(v6 - 24);
    v8 = v6 ? v6 - 24 : 0;
    v9 = *(unsigned __int8 *)(v8 + 16);
    if ((v9 & 0xFE) == 0x3C)
      break;
    if (*(unsigned __int8 *)(v8 + 16) <= 0x3Bu)
    {
      if (v9 == 37)
        goto LABEL_58;
      if (v9 != 33 && v9 != 39)
        goto LABEL_39;
    }
    else
    {
      v12 = v9 - 60;
      if (v12 > 0x1C)
        goto LABEL_39;
      if (v12 != 24)
      {
        if (((1 << v12) & 0x1010003A) != 0 || !v12 && (*(_WORD *)(v8 + 18) & 0x301) != 0)
          goto LABEL_58;
        goto LABEL_39;
      }
      v13 = *(_QWORD *)(v8 - 32);
      if (v13
        && !*(_BYTE *)(v13 + 16)
        && *(_QWORD *)(v13 + 24) == *(_QWORD *)(v8 + 72)
        && (*(_BYTE *)(v13 + 33) & 0x20) != 0)
      {
        if (llvm::Instruction::isLifetimeStartOrEnd(v7))
          goto LABEL_41;
LABEL_58:
        v23 = (_DWORD *)((char *)this + 168);
        v32 = a2;
        v24 = &v32;
        goto LABEL_59;
      }
    }
    v14 = *(_QWORD *)(v8 + 64);
    if (!v14 || (*(_BYTE *)(v14 + 17) & 0x30) == 0)
    {
      v15 = *(_DWORD *)(v8 + 20);
      if (v15 < 0)
      {
        v16 = v8 - 32 * (v15 & 0x7FFFFFF);
        v19 = *(_QWORD *)(v16 - 8);
        v17 = v16 - 8;
        v18 = v19;
        if (v19)
        {
          v20 = -v18;
          do
          {
            v21 = *(_DWORD *)(*(_QWORD *)(v17 + v20) + 8);
            if (v21 >= 2 && v21 != 7)
              goto LABEL_58;
            v20 += 16;
          }
          while (v20);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v8, 45) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(v8, 44))
      {
        goto LABEL_58;
      }
    }
LABEL_39:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v8) & 1) != 0
      || (llvm::Instruction::willReturn((llvm::Instruction *)v8) & 1) == 0)
    {
      goto LABEL_58;
    }
LABEL_41:
    while (1)
    {
      v6 = *(_QWORD *)(v37 + 8);
      *(_QWORD *)&v37 = v6;
      if (v6 == *((_QWORD *)&v37 + 1))
        break;
      if (!v39)
        sub_1C485C2F0();
      if ((*(unsigned int (**)(void))(*(_QWORD *)v39 + 48))())
      {
        v6 = v37;
        break;
      }
    }
    if (v6 == (_QWORD)v34)
      goto LABEL_60;
  }
  v10 = *(unsigned __int8 **)(v8 - 32);
  if (v10[16] <= 0x14u)
    goto LABEL_41;
  v32 = 0;
  v32 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v10);
  if (*((_BYTE *)v32 + 16) == 59)
  {
    v31 = a2;
    v11 = sub_1C63A8C90((uint64_t)this + 144, (uint64_t *)&v31);
    sub_1C4D95920((uint64_t)(v11 + 1), &v32, (uint64_t)v33);
    goto LABEL_41;
  }
  v23 = (_DWORD *)((char *)this + 168);
  v31 = a2;
  v24 = &v31;
LABEL_59:
  sub_1C6187FB8(v23, v24, (uint64_t)v33);
LABEL_60:
  if (v36 == v35)
  {
    v25 = 4;
LABEL_64:
    (*(void (**)(_QWORD *))(*v5 + 8 * v25))(v5);
  }
  else if (v36)
  {
    v25 = 5;
    v5 = v36;
    goto LABEL_64;
  }
  if (v39 == v38)
  {
    v26 = 4;
LABEL_69:
    (*(void (**)(_QWORD *))(*v4 + 8 * v26))(v4);
  }
  else if (v39)
  {
    v26 = 5;
    v4 = v39;
    goto LABEL_69;
  }
  v27 = v45;
  if (v45 == v44)
  {
    v28 = 4;
    v27 = v44;
    goto LABEL_72;
  }
  if (v45)
  {
    v28 = 5;
LABEL_72:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  result = v42;
  if (v42 == v41)
  {
    v30 = 4;
    result = v41;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v30))();
  }
  if (v42)
  {
    v30 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v30))();
  }
  return result;
}

llvm::BasicBlock *llvm::CodeExtractor::findOrCreateBlockForHoisting(llvm::CodeExtractor *this, llvm::BasicBlock *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  _QWORD *i;
  _QWORD *v15;
  _QWORD *v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  llvm::User *v31;
  uint64_t v32;
  _QWORD v34[4];
  __int16 v35;
  llvm::BasicBlock *v36;
  uint64_t v37;

  v36 = a2;
  v4 = *((_QWORD *)a2 + 1);
  if (!v4)
  {
LABEL_27:
    for (i = (_QWORD *)*((_QWORD *)a2 + 6); i != (_QWORD *)((char *)a2 + 40); i = (_QWORD *)i[1])
    {
      v15 = i - 3;
      if (i)
        v16 = i - 3;
      else
        v16 = 0;
      if (*((_BYTE *)v16 + 16) != 83)
        goto LABEL_35;
    }
    v15 = 0;
LABEL_35:
    v35 = 257;
    v17 = (llvm::Value *)llvm::BasicBlock::splitBasicBlock((uint64_t *)a2, v15 + 3, (uint64_t)v34, 0);
    v18 = *((_QWORD *)a2 + 1);
    if (v18)
    {
      while (1)
      {
        v19 = *(_QWORD *)(v18 + 24);
        v20 = *(unsigned __int8 *)(v19 + 16);
        v21 = v19 && v20 >= 0x1C;
        if (v21 && v20 - 29 < 0xB)
          break;
        v18 = *(_QWORD *)(v18 + 8);
        if (!v18)
          goto LABEL_66;
      }
      do
      {
        v23 = v18;
        do
        {
          v18 = *(_QWORD *)(v18 + 8);
          if (!v18)
            break;
          v24 = *(_QWORD *)(v18 + 24);
          v25 = *(unsigned __int8 *)(v24 + 16);
          v26 = v24 && v25 >= 0x1C;
        }
        while (!v26 || v25 - 29 > 0xA);
        v28 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 40);
        v34[0] = v28;
        v37 = 0;
        if ((sub_1C4E36498((uint64_t *)this + 7, v34, &v37) & 1) == 0)
        {
          v29 = *(_QWORD *)(v28 + 40);
          if (v29 == v28 + 40)
          {
            v31 = 0;
          }
          else
          {
            if (v29)
              v30 = (unsigned __int8 *)(v29 - 24);
            else
              v30 = 0;
            if (v30[16] - 29 >= 0xB)
              v31 = 0;
            else
              v31 = (llvm::User *)v30;
          }
          llvm::User::replaceUsesOfWith(v31, a2, v17);
        }
      }
      while (v18);
    }
LABEL_66:
    sub_1C5ACED14((uint64_t)this + 56, &v36);
    v32 = *((unsigned int *)this + 32);
    if (v32 >= *((_DWORD *)this + 33))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 120, (uint64_t)this + 136, v32 + 1, 8);
      LODWORD(v32) = *((_DWORD *)this + 32);
    }
    *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v32) = v17;
    ++*((_DWORD *)this + 32);
    return v36;
  }
  while (1)
  {
    v5 = *(_QWORD *)(v4 + 24);
    v6 = *(unsigned __int8 *)(v5 + 16);
    v7 = v5 && v6 >= 0x1C;
    if (v7 && v6 - 29 < 0xB)
      break;
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      goto LABEL_27;
  }
  v9 = 0;
LABEL_12:
  v10 = *(_QWORD *)(v5 + 40);
  v34[0] = v10;
  v37 = 0;
  if (!sub_1C4E36498((uint64_t *)this + 7, v34, &v37))
    goto LABEL_17;
  if (v9)
  {
    if (v9 == v10)
      goto LABEL_17;
    goto LABEL_27;
  }
  v9 = v10;
LABEL_17:
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      break;
    v5 = *(_QWORD *)(v4 + 24);
    v11 = *(unsigned __int8 *)(v5 + 16);
    if (v5)
      v12 = v11 >= 0x1C;
    else
      v12 = 0;
    if (v12 && v11 - 29 < 0xB)
      goto LABEL_12;
  }
  if (!v9)
    goto LABEL_27;
  return (llvm::BasicBlock *)v9;
}

uint64_t llvm::CodeExtractor::getLifetimeMarkers@<X0>(uint64_t this@<X0>, const llvm::CodeExtractorAnalysisCache *a2@<X1>, llvm::Instruction *a3@<X2>, llvm::BasicBlock *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  llvm::CodeExtractor *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  int v23;
  char v24;
  uint64_t v26;
  uint64_t v27;

  v6 = *((_QWORD *)a3 + 1);
  if (!v6)
    goto LABEL_36;
  v8 = (llvm::CodeExtractor *)this;
  v10 = 0;
  v11 = 0;
  v12 = (uint64_t *)(this + 56);
  do
  {
    v13 = v11;
    v14 = v10;
    v10 = *(_QWORD *)(v6 + 24);
    v15 = *(unsigned __int8 *)(v10 + 16);
    if (v15 != 84)
    {
      if (v15 < 0x1C)
        goto LABEL_36;
LABEL_13:
      v18 = *(_QWORD *)(v10 + 40);
      v26 = 0;
      v27 = v18;
      this = sub_1C4E36498(v12, &v27, &v26);
      v10 = v14;
      if ((this & 1) == 0)
        goto LABEL_36;
      goto LABEL_14;
    }
    v16 = *(_QWORD *)(v10 - 32);
    if (!v16
      || *(_BYTE *)(v16 + 16)
      || *(_QWORD *)(v16 + 24) != *(_QWORD *)(v10 + 72)
      || (*(_BYTE *)(v16 + 33) & 0x20) == 0)
    {
      goto LABEL_13;
    }
    v17 = *(_DWORD *)(v16 + 36);
    if (v17 != 167)
    {
      if (v17 == 168)
      {
        v11 = *(_QWORD *)(v6 + 24);
        v10 = v14;
        if (v13)
          goto LABEL_36;
        goto LABEL_14;
      }
      if ((v17 - 55) < 4)
      {
        v10 = v14;
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    if (v14)
      goto LABEL_36;
LABEL_14:
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6);
  if (!v11 || !v10)
    goto LABEL_36;
  v20 = 1;
  if (*(unsigned __int8 *)(v11 + 16) >= 0x1Cu)
  {
    v19 = *(_QWORD *)(v11 + 40);
    v26 = 0;
    v27 = v19;
    if ((sub_1C4E36498(v12, &v27, &v26) & 1) != 0)
      v20 = 0;
  }
  if (*(unsigned __int8 *)(v10 + 16) < 0x1Cu)
  {
    v22 = 0;
    LOBYTE(v23) = 1;
  }
  else
  {
    v21 = *(_QWORD *)(v10 + 40);
    v26 = 0;
    v27 = v21;
    this = sub_1C4E36498(v12, &v27, &v26);
    v22 = this;
    v23 = this ^ 1;
    if (!v20 && !v23)
      goto LABEL_29;
  }
  this = llvm::CodeExtractor::isLegalToShrinkwrapLifetimeMarkers(v8, a2, a3);
  if ((this & 1) != 0 && (a4 ? (v24 = 1) : (v24 = v22), (v24 & 1) != 0))
  {
LABEL_29:
    *(_BYTE *)a5 = v20;
    *(_BYTE *)(a5 + 1) = v23;
    *(_QWORD *)(a5 + 8) = v11;
    *(_QWORD *)(a5 + 16) = v10;
  }
  else
  {
LABEL_36:
    *(_WORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  return this;
}

void llvm::CodeExtractor::findAllocas(uint64_t a1, unsigned int *a2, _QWORD *a3, _QWORD *a4, llvm::BasicBlock **a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::BasicBlock *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int i;
  llvm::BasicBlock *Successor;
  const llvm::CodeExtractorAnalysisCache *v15;
  uint64_t v16;
  llvm::Instruction **v17;
  uint64_t v18;
  llvm::Instruction *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD **v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  llvm::Value *PointerCast;
  int v33;
  llvm::Value **v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  BOOL v50;
  _QWORD v56[3];
  _BYTE v57[8];
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _WORD v63[24];
  char *v64;
  uint64_t v65;
  _BYTE v66[16];
  _QWORD *v67;
  uint64_t v68;
  _QWORD v69[4];

  v69[2] = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 56);
  if (v6 == v7)
  {
LABEL_28:
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 40);
      if (v10 != *(_QWORD *)v6 + 40)
      {
        if (v10)
          v11 = v10 - 24;
        else
          v11 = 0;
        if (*(_BYTE *)(v11 + 16) != 30)
        {
          v12 = 2;
          switch(*(_BYTE *)(v11 + 16))
          {
            case 0x1E:
              __break(1u);
              return;
            case 0x1F:
              v12 = (*(_DWORD *)(v11 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_22;
            case 0x20:
            case 0x26:
              v12 = (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_22;
            case 0x21:
              goto LABEL_11;
            case 0x24:
              v12 = *(_WORD *)(v11 + 18) & 1;
              goto LABEL_22;
            case 0x25:
              v12 = 1;
              goto LABEL_11;
            case 0x27:
              v12 = *(_DWORD *)(v11 + 80) + 1;
LABEL_22:
              if (!v12)
                goto LABEL_18;
              goto LABEL_11;
            default:
              goto LABEL_18;
          }
        }
        if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 3)
          v12 = 2;
        else
          v12 = 1;
LABEL_11:
        for (i = 0; i != v12; ++i)
        {
          Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v11, i);
          v61 = Successor;
          v67 = 0;
          if ((sub_1C4E36498(v5, &v61, &v67) & 1) == 0)
          {
            if (v9)
            {
              if (v9 != Successor)
                goto LABEL_28;
            }
            else
            {
              v9 = Successor;
            }
          }
        }
      }
LABEL_18:
      v6 += 8;
    }
    while (v6 != v7);
  }
  *a5 = v9;
  v15 = (const llvm::CodeExtractorAnalysisCache *)a2;
  v16 = a2[2];
  if ((_DWORD)v16)
  {
    v17 = *(llvm::Instruction ***)a2;
    v18 = *(_QWORD *)a2 + 8 * v16;
    do
    {
      v19 = *v17;
      v20 = (_QWORD *)*((_QWORD *)*v17 + 5);
      v61 = v20;
      v67 = 0;
      if ((sub_1C4E36498(v5, &v61, &v67) & 1) == 0 && v20[7] == v8)
      {
        llvm::CodeExtractor::getLifetimeMarkers(a1, v15, v19, *a5, (uint64_t)v57);
        if (v58)
        {
          if (v57[0])
          {
            v61 = v58;
            sub_1C4D954B8(a3, &v61);
          }
          if (v57[1])
          {
            v61 = v59;
            sub_1C4D954B8(a4, &v61);
          }
          v61 = v19;
          sub_1C4D954B8(a3, &v61);
        }
        else
        {
          v67 = v69;
          v68 = 0x200000000;
          v21 = *((_QWORD *)v19 + 1);
          if (v21)
          {
            do
            {
              v22 = *(_QWORD *)(v21 + 24);
              if (v22)
                v23 = *(unsigned __int8 *)(v22 + 16) >= 0x1Cu;
              else
                v23 = 0;
              if (v23)
              {
                v61 = *(void **)(v22 + 40);
                v64 = 0;
                if (sub_1C4E36498(v5, &v61, &v64))
                {
                  if (llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v22) == v19)
                  {
                    for (j = *(_QWORD *)(v22 + 8); j; j = *(_QWORD *)(j + 8))
                    {
                      v25 = *(_QWORD *)(j + 24);
                      if (*(_BYTE *)(v25 + 16) == 84)
                      {
                        v26 = *(_QWORD *)(v25 - 32);
                        if (v26)
                        {
                          if (!*(_BYTE *)(v26 + 16)
                            && *(_QWORD *)(v26 + 24) == *(_QWORD *)(v25 + 72)
                            && (*(_BYTE *)(v26 + 33) & 0x20) != 0
                            && llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(j + 24)))
                          {
                            v61 = *(void **)(v25 + 40);
                            v64 = 0;
                            if ((sub_1C4E36498(v5, &v61, &v64) & 1) == 0)
                            {
                              v27 = v68;
                              if (v68 >= (unint64_t)HIDWORD(v68))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, (uint64_t)v69, v68 + 1, 8);
                                v27 = v68;
                              }
                              v67[v27] = v25;
                              LODWORD(v68) = v68 + 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              v21 = *(_QWORD *)(v21 + 8);
            }
            while (v21);
            if ((_DWORD)v68)
            {
              v28 = (_DWORD **)v67;
              v29 = 8 * v68;
              do
              {
                v30 = *v28;
                v31 = llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)(v8 + 40) + 1912), 0);
                v61 = "lt.cast";
                v63[8] = 259;
                PointerCast = llvm::CastInst::CreatePointerCast(v19, v31, (uint64_t)&v61, (uint64_t)v30);
                v33 = v30[5];
                if ((v33 & 0x40000000) != 0)
                  v34 = (llvm::Value **)*((_QWORD *)v30 - 1);
                else
                  v34 = (llvm::Value **)&v30[-8 * (v33 & 0x7FFFFFF)];
                llvm::User::replaceUsesOfWith((llvm::User *)v30, v34[4], PointerCast);
                ++v28;
                v29 -= 8;
              }
              while (v29);
            }
          }
          v64 = v66;
          v65 = 0x200000000;
          v61 = v63;
          v62 = 0x200000000;
          v35 = *((_QWORD *)v19 + 1);
          if (v35)
          {
            do
            {
              v36 = *(_QWORD *)(v35 + 24);
              if (llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v36) == v19
                && (llvm::CodeExtractor::getLifetimeMarkers(a1, v15, (llvm::Instruction *)v36, *a5, (uint64_t)v56), v56[1]))
              {
                v38 = v65;
                if (v65 >= (unint64_t)HIDWORD(v65))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v65 + 1, 8);
                  v38 = v65;
                }
                *(_QWORD *)&v64[8 * v38] = v36;
                LODWORD(v65) = v65 + 1;
                v39 = (char *)v61;
                if (v62 >= HIDWORD(v62))
                {
                  v43 = v62 + 1;
                  if (v61 <= v56 && (char *)v61 + 24 * v62 > (char *)v56)
                  {
                    v44 = (char *)v56 - (_BYTE *)v61;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v43, 24);
                    v39 = (char *)v61;
                    v40 = (char *)v61 + v44;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v43, 24);
                    v40 = (char *)v56;
                    v39 = (char *)v61;
                  }
                }
                else
                {
                  v40 = (char *)v56;
                }
                v41 = &v39[24 * v62];
                v42 = *(_OWORD *)v40;
                *((_QWORD *)v41 + 2) = *((_QWORD *)v40 + 2);
                *(_OWORD *)v41 = v42;
                LODWORD(v62) = v62 + 1;
              }
              else
              {
                if (v36)
                  v37 = *(unsigned __int8 *)(v36 + 16) >= 0x1Cu;
                else
                  v37 = 0;
                if (!v37 || (v56[0] = *(_QWORD *)(v36 + 40), v60 = 0, (sub_1C4E36498(v5, v56, &v60) & 1) == 0))
                {
                  LODWORD(v65) = 0;
                  goto LABEL_90;
                }
              }
              v35 = *(_QWORD *)(v35 + 8);
            }
            while (v35);
            if ((_DWORD)v65)
            {
              v56[0] = v19;
              sub_1C4D954B8(a3, v56);
              if ((_DWORD)v65)
              {
                v45 = 0;
                v46 = 0;
                v47 = 8 * v65;
                do
                {
                  v48 = *(_QWORD *)&v64[v46];
                  v49 = v61;
                  if (*(_QWORD *)((char *)v61 + v45 + 8))
                  {
                    if (*((_BYTE *)v61 + v45))
                    {
                      v56[0] = *(_QWORD *)((char *)v61 + v45 + 8);
                      sub_1C4D954B8(a3, v56);
                    }
                    if (v49[v45 + 1])
                    {
                      v56[0] = *(_QWORD *)&v49[v45 + 16];
                      sub_1C4D954B8(a4, v56);
                    }
                  }
                  if (v48)
                    v50 = *(unsigned __int8 *)(v48 + 16) >= 0x1Cu;
                  else
                    v50 = 0;
                  if (!v50 || (v56[0] = *(_QWORD *)(v48 + 40), v60 = 0, (sub_1C4E36498(v5, v56, &v60) & 1) == 0))
                  {
                    v56[0] = v48;
                    sub_1C4D954B8(a3, v56);
                  }
                  v46 += 8;
                  v45 += 24;
                  v15 = (const llvm::CodeExtractorAnalysisCache *)a2;
                }
                while (v47 != v46);
              }
            }
          }
LABEL_90:
          if (v61 != v63)
            free(v61);
          if (v64 != v66)
            free(v64);
          if (v67 != v69)
            free(v67);
        }
      }
      ++v17;
    }
    while (v17 != (llvm::Instruction **)v18);
  }
}

uint64_t llvm::CodeExtractor::isEligible(llvm::CodeExtractor *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 10);
  if (v1 == *((_QWORD *)this + 11))
    return 0;
  if (*((_BYTE *)this + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
    if (*(_DWORD *)(*(_QWORD *)(v2 + 24) + 8) >= 0x100u)
    {
      v3 = v2 + 72;
      v4 = *(_QWORD *)(v2 + 80);
      if (v4 != v2 + 72)
      {
        v5 = (uint64_t *)((char *)this + 56);
        do
        {
          if (v4)
            v6 = v4 - 24;
          else
            v6 = 0;
          v11 = 0;
          v12 = v6;
          if ((sub_1C4E36498(v5, &v12, &v11) & 1) == 0)
          {
            for (i = *(_QWORD *)(v6 + 48); i != v6 + 40; i = *(_QWORD *)(i + 8))
            {
              v8 = i - 24;
              if (!i)
                v8 = 0;
              if (*(_BYTE *)(v8 + 16) == 84)
              {
                v9 = *(_QWORD *)(v8 - 32);
                if (v9)
                {
                  if (!*(_BYTE *)(v9 + 16)
                    && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v8 + 72)
                    && (*(_DWORD *)(v9 + 36) & 0xFFFFFFFE) == 0x13A)
                  {
                    return 0;
                  }
                }
              }
            }
          }
          v4 = *(_QWORD *)(v4 + 8);
        }
        while (v4 != v3);
      }
    }
  }
  return 1;
}

uint64_t llvm::CodeExtractor::findInputsOutputs(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(result + 80);
  v22 = *(_QWORD *)(result + 88);
  if (v4 != v22)
  {
    v8 = (uint64_t *)(result + 56);
    do
    {
      v9 = *(_QWORD *)v4 + 40;
      for (i = *(_QWORD *)(*(_QWORD *)v4 + 48); i != v9; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v11 = i - 24;
        else
          v11 = 0;
        v12 = *(_DWORD *)(v11 + 20);
        if ((v12 & 0x40000000) != 0)
        {
          v14 = *(uint64_t **)(v11 - 8);
          v13 = v12 & 0x7FFFFFF;
          if (!v13)
            goto LABEL_19;
        }
        else
        {
          v13 = v12 & 0x7FFFFFF;
          v14 = (uint64_t *)(v11 - 32 * v13);
          if (!v13)
            goto LABEL_19;
        }
        v15 = 32 * v13;
        do
        {
          v23 = 0;
          v23 = *v14;
          v24 = 0;
          v25 = v23;
          result = sub_1C614F7B0(a4, &v25, &v24);
          if ((result & 1) == 0)
          {
            v16 = *(unsigned __int8 *)(v23 + 16);
            if (v16 == 21
              || v16 >= 0x1C
              && (v17 = *(_QWORD *)(v23 + 40),
                  v24 = 0,
                  v25 = v17,
                  result = sub_1C4E36498(v8, &v25, &v24),
                  (result & 1) == 0))
            {
              result = sub_1C4D954B8(a2, &v23);
            }
          }
          v14 += 4;
          v15 -= 32;
        }
        while (v15);
LABEL_19:
        v18 = *(_QWORD *)(v11 + 8);
        if (v18)
        {
          while (1)
          {
            v19 = *(_QWORD *)(v18 + 24);
            if (!v19 || *(unsigned __int8 *)(v19 + 16) < 0x1Cu)
              break;
            v21 = *(_QWORD *)(v19 + 40);
            v24 = 0;
            v25 = v21;
            result = sub_1C4E36498(v8, &v25, &v24);
            if ((result & 1) == 0)
              break;
            v18 = *(_QWORD *)(v18 + 8);
            if (!v18)
              goto LABEL_29;
          }
          v25 = v11;
          result = sub_1C4D954B8(a3, &v25);
        }
LABEL_29:
        ;
      }
      v4 += 8;
    }
    while (v4 != v22);
  }
  return result;
}

void llvm::CodeExtractor::severSplitPHINodesOfEntry(llvm::CodeExtractor *this, llvm::BasicBlock **a2)
{
  llvm::Value *v4;
  uint64_t v5;
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD *i;
  llvm::BasicBlock *v20;
  _QWORD *v21;
  int32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  llvm::User *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  llvm::Value *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm::ValueSymbolTable *v71;
  llvm::Value *v72;
  _QWORD v73[4];
  __int16 v74;
  llvm::Value *v75;
  uint64_t v76;

  v4 = *a2;
  v5 = *(_QWORD *)(*((_QWORD *)*a2 + 7) + 80);
  if (v5)
    v6 = (llvm::Value *)(v5 - 24);
  else
    v6 = 0;
  if (v4 == v6)
  {
    v13 = 0;
  }
  else
  {
    v7 = *((_QWORD *)v4 + 6);
    v8 = v7 - 24;
    if (!v7)
      v8 = 0;
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v9 == 83)
      v10 = v8;
    else
      v10 = 0;
    if (!v7)
      return;
    if (v9 != 83)
      return;
    v11 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
    if (!(_DWORD)v11)
      return;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 8 * v11;
    do
    {
      v16 = *(_DWORD *)(v10 + 20);
      if ((v16 & 0x40000000) != 0)
        v17 = *(_QWORD *)(v10 - 8);
      else
        v17 = v10 - 32 * (v16 & 0x7FFFFFF);
      v73[0] = *(_QWORD *)(v17 + 32 * *(unsigned int *)(v10 + 60) + v12);
      v76 = 0;
      v18 = sub_1C4E36498((uint64_t *)this + 7, v73, &v76);
      v14 += v18 ^ 1;
      v13 += v18;
      v12 += 8;
    }
    while (v15 != v12);
    if (v14 < 2)
      return;
    v4 = *a2;
  }
  for (i = (_QWORD *)*((_QWORD *)v4 + 6); i != (_QWORD *)((char *)v4 + 40); i = (_QWORD *)i[1])
  {
    v20 = (llvm::BasicBlock *)(i - 3);
    if (i)
      v21 = i - 3;
    else
      v21 = 0;
    if (*((_BYTE *)v21 + 16) != 83)
      goto LABEL_30;
  }
  v20 = 0;
LABEL_30:
  v23 = *(_QWORD *)this;
  v22 = (int32x2_t *)((char *)this + 56);
  v74 = 257;
  v75 = (llvm::Value *)sub_1C5EBD70C(v4, v20, 0, v23, 0, 0, (llvm::Twine *)v73, 0);
  v72 = *a2;
  sub_1C63A8834(v22, &v72);
  sub_1C5ACED14((uint64_t)v22, &v75);
  *a2 = v75;
  if (v13)
  {
    v24 = *((_QWORD *)v72 + 6);
    if (v24)
      v25 = v24 - 24;
    else
      v25 = 0;
    v26 = *(_DWORD *)(v25 + 20) & 0x7FFFFFF;
    if ((_DWORD)v26)
    {
      v27 = 0;
      v28 = 8 * v26;
      do
      {
        v29 = *(_DWORD *)(v25 + 20);
        if ((v29 & 0x40000000) != 0)
          v30 = *(_QWORD *)(v25 - 8);
        else
          v30 = v25 - 32 * (v29 & 0x7FFFFFF);
        v73[0] = *(_QWORD *)(v30 + 32 * *(unsigned int *)(v25 + 60) + v27);
        v76 = 0;
        if (sub_1C4E36498((uint64_t *)v22, v73, &v76))
        {
          v31 = *(_DWORD *)(v25 + 20);
          if ((v31 & 0x40000000) != 0)
            v32 = *(_QWORD *)(v25 - 8);
          else
            v32 = v25 - 32 * (v31 & 0x7FFFFFF);
          v33 = *(_QWORD *)(v32 + 32 * *(unsigned int *)(v25 + 60) + v27);
          v34 = *(_QWORD *)(v33 + 40);
          if (v34 == v33 + 40)
          {
            v36 = 0;
          }
          else
          {
            if (v34)
              v35 = (unsigned __int8 *)(v34 - 24);
            else
              v35 = 0;
            if (v35[16] - 29 >= 0xB)
              v36 = 0;
            else
              v36 = (llvm::User *)v35;
          }
          llvm::User::replaceUsesOfWith(v36, v72, v75);
        }
        v27 += 8;
      }
      while (v28 != v27);
      v24 = *((_QWORD *)v72 + 6);
    }
    v37 = v24 - 24;
    v38 = v24 ? v24 - 24 : 0;
    if (*(_BYTE *)(v38 + 16) == 83)
    {
      v39 = v13 + 1;
      while (1)
      {
        v40 = *(uint64_t ***)(v24 - 24);
        if ((*(_BYTE *)(v37 + 23) & 0x10) == 0)
        {
          v50 = 0;
          v51 = &byte_1C871356D;
          goto LABEL_68;
        }
        v41 = **v40;
        v42 = *(_QWORD *)(v41 + 152);
        v43 = *(unsigned int *)(v41 + 168);
        if (!(_DWORD)v43)
          goto LABEL_66;
        LODWORD(v44) = (v43 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        v45 = (uint64_t *)(v42 + 16 * v44);
        v46 = *v45;
        if (*v45 != v37)
          break;
LABEL_67:
        v49 = (_QWORD *)v45[1];
        v52 = *v49;
        v51 = (char *)(v49 + 2);
        v50 = v52;
LABEL_68:
        v74 = 773;
        v73[0] = v51;
        v73[1] = v50;
        v73[2] = ".ce";
        v53 = (uint64_t *)*((_QWORD *)v75 + 6);
        v54 = operator new(0x48uLL);
        v55 = v54;
        v54[1] = v40;
        v56 = (llvm::Value *)(v54 + 1);
        *v54 = 0;
        v54[2] = 0;
        v54[3] = 0x4000000000000053;
        *((_OWORD *)v54 + 2) = 0u;
        v57 = (char *)(v54 + 4);
        *((_OWORD *)v54 + 3) = 0u;
        *((_DWORD *)v54 + 16) = 0;
        if (v53)
        {
          v68 = v53[2];
          v54[6] = v68;
          *(_WORD *)(v68 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v54 + 31) & 0x10) != 0)
          {
            v70 = *(_QWORD *)(v68 + 56);
            if (v70)
            {
              v71 = *(llvm::ValueSymbolTable **)(v70 + 104);
              if (v71)
                llvm::ValueSymbolTable::reinsertValue(v71, v56);
            }
          }
          v69 = *v53;
          v55[4] = *v53;
          v55[5] = v53;
          *(_QWORD *)(v69 + 8) = v57;
          *v53 = (uint64_t)v57;
        }
        *((_DWORD *)v55 + 17) = v39;
        llvm::Value::setName((uint64_t ***)v56, (uint64_t)v73);
        v58 = *((unsigned int *)v55 + 17);
        v59 = operator new(40 * v58);
        *v55 = v59;
        if ((_DWORD)v58)
        {
          v60 = &v59[4 * v58];
          do
          {
            *v59 = 0;
            v59[1] = 0;
            v59[2] = 0;
            v59[3] = v56;
            v59 += 4;
          }
          while (v59 != v60);
        }
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v37, v56, (llvm::Value *)1);
        sub_1C477667C(v56, v37, (uint64_t)v72);
        v61 = *(_DWORD *)(v37 + 20);
        v62 = v61 & 0x7FFFFFF;
        if ((v61 & 0x7FFFFFF) != 0)
        {
          v63 = 0;
          do
          {
            if ((v61 & 0x40000000) != 0)
              v64 = *(_QWORD *)(v37 - 8);
            else
              v64 = v37 - 32 * v62;
            v73[0] = *(_QWORD *)(v64 + 32 * *(unsigned int *)(v37 + 60) + 8 * v63);
            v76 = 0;
            if (sub_1C4E36498((uint64_t *)v22, v73, &v76))
            {
              v65 = *(_DWORD *)(v37 + 20);
              if ((v65 & 0x40000000) != 0)
                v66 = *(_QWORD *)(v37 - 8);
              else
                v66 = v37 - 32 * (v65 & 0x7FFFFFF);
              sub_1C477667C(v56, *(_QWORD *)(v66 + 32 * v63), *(_QWORD *)(v66 + 32 * *(unsigned int *)(v37 + 60) + 8 * v63));
              llvm::PHINode::removeIncomingValue((llvm::PHINode *)v37, v63--, 1);
            }
            ++v63;
            v61 = *(_DWORD *)(v37 + 20);
            v62 = v61 & 0x7FFFFFF;
          }
          while (v63 != (v61 & 0x7FFFFFF));
        }
        v24 = *(_QWORD *)(v24 + 8);
        v37 = v24 - 24;
        if (v24)
          v67 = v24 - 24;
        else
          v67 = 0;
        if (*(_BYTE *)(v67 + 16) != 83)
          return;
      }
      v47 = 1;
      while (v46 != -4096)
      {
        v48 = v44 + v47++;
        v44 = v48 & (v43 - 1);
        v46 = *(_QWORD *)(v42 + 16 * v44);
        if (v46 == v37)
        {
          v45 = (uint64_t *)(v42 + 16 * v44);
          goto LABEL_67;
        }
      }
LABEL_66:
      v45 = (uint64_t *)(v42 + 16 * v43);
      goto LABEL_67;
    }
  }
}

void llvm::CodeExtractor::severSplitPHINodesOfExits(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *i;
  unint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t k;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  llvm::User *v47;
  llvm::BasicBlock *v48;
  _DWORD *v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD *j;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  llvm::Value *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unsigned int *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  llvm::ValueSymbolTable *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t *v88;
  llvm::Value *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  _QWORD v94[2];
  __int16 v95;
  void *v96;
  uint64_t v97;
  _QWORD v98[3];

  v98[1] = *MEMORY[0x1E0C80C00];
  v2 = a2[1];
  if (v2 == *a2)
    v3 = (unsigned int *)a2 + 5;
  else
    v3 = (unsigned int *)(a2 + 2);
  v4 = *v3;
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    for (i = (unint64_t *)a2[1]; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v5 -= 8;
      if (!v5)
        return;
    }
  }
  else
  {
    i = (unint64_t *)a2[1];
  }
  v7 = (unint64_t *)(v2 + 8 * v4);
  if (i != v7)
  {
    v87 = v7;
    v8 = (uint64_t *)(a1 + 56);
    v9 = (_QWORD *)*i;
LABEL_12:
    v89 = 0;
    if ((_QWORD *)v9[5] != v9 + 5)
    {
      v10 = v9[6];
      v11 = v10 - 24;
      v12 = v10 ? v10 - 24 : 0;
      if (v10 && *(_BYTE *)(v12 + 16) == 83)
      {
        v88 = v9 + 3;
        while (1)
        {
          v96 = v98;
          v97 = 0x200000000;
          v13 = *(_DWORD *)(v11 + 20);
          v14 = v13 & 0x7FFFFFF;
          if ((v13 & 0x7FFFFFF) != 0)
          {
            v15 = 0;
            do
            {
              if ((v13 & 0x40000000) != 0)
                v16 = *(_QWORD *)(v11 - 8);
              else
                v16 = v11 - 32 * v14;
              v17 = *(void **)(v16 + 32 * *(unsigned int *)(v11 + 60) + 8 * v15);
              v91 = 0;
              v92 = v17;
              if (sub_1C4E36498(v8, &v92, &v91))
              {
                v18 = v97;
                if (v97 >= (unint64_t)HIDWORD(v97))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, (uint64_t)v98, v97 + 1, 4);
                  v18 = v97;
                }
                *((_DWORD *)v96 + v18) = v15;
                LODWORD(v97) = v97 + 1;
              }
              ++v15;
              v13 = *(_DWORD *)(v11 + 20);
              v14 = v13 & 0x7FFFFFF;
            }
            while (v15 < v14);
            v19 = v97;
            if (v97 >= 2)
              break;
          }
LABEL_101:
          if (v96 != v98)
            free(v96);
          v79 = *(_QWORD *)(v11 + 32);
          v11 = v79 - 24;
          if (v79)
            v80 = v79 - 24;
          else
            v80 = 0;
          if (!v79 || *(_BYTE *)(v80 + 16) != 83)
            goto LABEL_114;
        }
        if (v89)
        {
LABEL_68:
          v50 = *(uint64_t ***)v11;
          if ((v13 & 0x10000000) == 0)
          {
            v60 = 0;
            v61 = &byte_1C871356D;
LABEL_77:
            v95 = 773;
            v92 = v61;
            v93 = v60;
            v94[0] = ".ce";
            for (j = (_QWORD *)*((_QWORD *)v89 + 6); j != (_QWORD *)((char *)v89 + 40); j = (_QWORD *)j[1])
            {
              v64 = j - 3;
              if (j)
                v65 = j - 3;
              else
                v65 = 0;
              if (*((_BYTE *)v65 + 16) != 83)
                goto LABEL_87;
            }
            v64 = 0;
LABEL_87:
            v66 = operator new(0x48uLL);
            v67 = v66;
            v66[1] = v50;
            v68 = (llvm::Value *)(v66 + 1);
            *v66 = 0;
            v66[2] = 0;
            v66[3] = 0x4000000000000053;
            *((_OWORD *)v66 + 2) = 0u;
            v69 = (char *)(v66 + 4);
            *((_OWORD *)v66 + 3) = 0u;
            *((_DWORD *)v66 + 16) = 0;
            if (v64)
            {
              v81 = v64[5];
              v66[6] = v81;
              *(_WORD *)(v81 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v66 + 31) & 0x10) != 0)
              {
                v83 = *(_QWORD *)(v81 + 56);
                if (v83)
                {
                  v84 = *(llvm::ValueSymbolTable **)(v83 + 104);
                  if (v84)
                    llvm::ValueSymbolTable::reinsertValue(v84, v68);
                }
              }
              v82 = v64[3];
              v67[4] = v82;
              v67[5] = v64 + 3;
              *(_QWORD *)(v82 + 8) = v69;
              v64[3] = v69;
            }
            *((_DWORD *)v67 + 17) = v19;
            llvm::Value::setName((uint64_t ***)v68, (uint64_t)&v92);
            v70 = *((unsigned int *)v67 + 17);
            v71 = operator new(40 * v70);
            *v67 = v71;
            if ((_DWORD)v70)
            {
              v72 = &v71[4 * v70];
              do
              {
                *v71 = 0;
                v71[1] = 0;
                v71[2] = 0;
                v71[3] = v68;
                v71 += 4;
              }
              while (v71 != v72);
            }
            if ((_DWORD)v97)
            {
              v73 = (unsigned int *)v96;
              v74 = 4 * v97;
              do
              {
                v75 = *(_DWORD *)(v11 + 20);
                if ((v75 & 0x40000000) != 0)
                  v76 = *(_QWORD *)(v11 - 8);
                else
                  v76 = v11 - 32 * (v75 & 0x7FFFFFF);
                sub_1C477667C(v68, *(_QWORD *)(v76 + 32 * *v73), *(_QWORD *)(v76 + 32 * *(unsigned int *)(v11 + 60) + 8 * *v73));
                ++v73;
                v74 -= 4;
              }
              while (v74);
              if ((_DWORD)v97)
              {
                v77 = 4 * v97;
                v78 = (char *)v96 - 4;
                do
                {
                  llvm::PHINode::removeIncomingValue((llvm::PHINode *)v11, *(_DWORD *)&v78[v77], 0);
                  v77 -= 4;
                }
                while (v77);
              }
            }
            sub_1C477667C((llvm::PHINode *)v11, (uint64_t)v68, (uint64_t)v89);
            goto LABEL_101;
          }
          v51 = **v50;
          v52 = *(_QWORD *)(v51 + 152);
          v53 = *(unsigned int *)(v51 + 168);
          if ((_DWORD)v53)
          {
            LODWORD(v54) = (v53 - 1) & ((v11 >> 4) ^ (v11 >> 9));
            v55 = (uint64_t *)(v52 + 16 * v54);
            v56 = *v55;
            if (*v55 == v11)
            {
LABEL_76:
              v59 = (_QWORD *)v55[1];
              v62 = *v59;
              v61 = (char *)(v59 + 2);
              v60 = v62;
              goto LABEL_77;
            }
            v57 = 1;
            while (v56 != -4096)
            {
              v58 = v54 + v57++;
              v54 = v58 & (v53 - 1);
              v56 = *(_QWORD *)(v52 + 16 * v54);
              if (v56 == v11)
              {
                v55 = (uint64_t *)(v52 + 16 * v54);
                goto LABEL_76;
              }
            }
          }
          v55 = (uint64_t *)(v52 + 16 * v53);
          goto LABEL_76;
        }
        v20 = *(_QWORD *)*v9;
        if ((*((_BYTE *)v9 + 23) & 0x10) == 0)
        {
          v29 = 0;
          v30 = &byte_1C871356D;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(*(_QWORD *)v20 + 152);
        v22 = *(unsigned int *)(*(_QWORD *)v20 + 168);
        if ((_DWORD)v22)
        {
          LODWORD(v23) = (v22 - 1) & ((v9 >> 4) ^ (v9 >> 9));
          v24 = (_QWORD *)(v21 + 16 * v23);
          v25 = (_QWORD *)*v24;
          if ((_QWORD *)*v24 == v9)
          {
LABEL_39:
            v28 = (_QWORD *)v24[1];
            v31 = *v28;
            v30 = (char *)(v28 + 2);
            v29 = v31;
LABEL_40:
            v95 = 773;
            v92 = v30;
            v93 = v29;
            v94[0] = ".split";
            v32 = v9[7];
            v33 = operator new();
            *(_QWORD *)v33 = *(_QWORD *)v20 + 1600;
            *(_QWORD *)(v33 + 8) = 0;
            v34 = *(_DWORD *)(v33 + 20) & 0xC0000000;
            *(_QWORD *)(v33 + 24) = 0;
            v35 = v33 + 24;
            *(_DWORD *)(v33 + 16) = 22;
            *(_DWORD *)(v33 + 20) = v34;
            *(_QWORD *)(v33 + 32) = 0;
            *(_QWORD *)(v33 + 40) = v33 + 40;
            *(_QWORD *)(v33 + 48) = v33 + 40;
            *(_QWORD *)(v33 + 56) = 0;
            if (v32)
            {
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v32 + 72, (_QWORD *)v33);
              v36 = *v88;
              *(_QWORD *)(v33 + 24) = *v88;
              *(_QWORD *)(v33 + 32) = v88;
              *(_QWORD *)(v36 + 8) = v35;
              *v88 = v35;
            }
            llvm::Value::setName((uint64_t ***)v33, (uint64_t)&v92);
            v89 = (llvm::Value *)v33;
            for (k = v9[1]; k; k = *(_QWORD *)(k + 8))
            {
              v38 = *(_QWORD *)(k + 24);
              v39 = *(unsigned __int8 *)(v38 + 16);
              if (v38)
                v40 = v39 >= 0x1C;
              else
                v40 = 0;
              if (v40 && v39 - 29 < 0xB)
                break;
            }
            v92 = v94;
            v93 = 0x400000000;
            sub_1C4DBBCC0((unsigned int *)&v92, k, 0);
            if ((_DWORD)v93)
            {
              v42 = (uint64_t *)v92;
              v43 = 8 * v93;
              do
              {
                v44 = *v42;
                v90 = 0;
                v91 = v44;
                if (sub_1C4E36498(v8, &v91, &v90))
                {
                  v45 = *(_QWORD *)(v44 + 40);
                  if (v45 == v44 + 40)
                  {
                    v47 = 0;
                  }
                  else
                  {
                    if (v45)
                      v46 = (unsigned __int8 *)(v45 - 24);
                    else
                      v46 = 0;
                    if (v46[16] - 29 >= 0xB)
                      v47 = 0;
                    else
                      v47 = (llvm::User *)v46;
                  }
                  llvm::User::replaceUsesOfWith(v47, (llvm::Value *)v9, v89);
                }
                ++v42;
                v43 -= 8;
              }
              while (v43);
            }
            v48 = v89;
            v49 = operator new(0x60uLL);
            v49[13] = v49[13] & 0x38000000 | 1;
            *(_QWORD *)v49 = 0;
            *((_QWORD *)v49 + 1) = 0;
            *((_QWORD *)v49 + 2) = 0;
            *((_QWORD *)v49 + 3) = v49 + 8;
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v49 + 8), (llvm::BasicBlock *)v9, v48);
            sub_1C5ACED14((uint64_t)v8, &v89);
            if (v92 != v94)
              free(v92);
            v19 = v97;
            v13 = *(_DWORD *)(v11 + 20);
            goto LABEL_68;
          }
          v26 = 1;
          while (v25 != (_QWORD *)-4096)
          {
            v27 = v23 + v26++;
            v23 = v27 & (v22 - 1);
            v25 = *(_QWORD **)(v21 + 16 * v23);
            if (v25 == v9)
            {
              v24 = (_QWORD *)(v21 + 16 * v23);
              goto LABEL_39;
            }
          }
        }
        v24 = (_QWORD *)(v21 + 16 * v22);
        goto LABEL_39;
      }
    }
LABEL_114:
    v85 = i + 1;
    while (v85 != v87)
    {
      v86 = *v85++;
      v9 = (_QWORD *)v86;
      if (v86 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = v85 - 1;
        goto LABEL_12;
      }
    }
  }
}

void llvm::CodeExtractor::splitReturnBlocks(llvm::CodeExtractor *this)
{
  uint64_t ****v1;
  uint64_t ****v2;
  const char **v4;
  uint64_t ***v5;
  uint64_t ***v6;
  uint64_t ***v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  uint64_t ***v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ****v29;
  uint64_t ***v30;
  int v31;
  int v32;
  uint64_t ***v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char **v49;
  void *v50;
  uint64_t v51;
  const char *v52;
  __int16 v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t ****)*((_QWORD *)this + 10);
  v2 = (uint64_t ****)*((_QWORD *)this + 11);
  if (v1 != v2)
  {
    v4 = &v52;
    while (1)
    {
      v5 = *v1;
      v6 = (uint64_t ***)(*v1)[5];
      if (v6 == *v1 + 5)
        goto LABEL_24;
      v7 = v6 - 3;
      if (!v6)
        v7 = 0;
      v8 = *((unsigned __int8 *)v7 + 16) - 40;
      if (v8 < 0xFFFFFFF5)
        v7 = 0;
      if (!v6)
        goto LABEL_24;
      if (*((_BYTE *)v7 + 16) != 29 || v8 < 0xFFFFFFF5)
        goto LABEL_24;
      v10 = v5 >> 4;
      if ((*((_BYTE *)v5 + 23) & 0x10) != 0)
        break;
      v20 = 0;
      v21 = &byte_1C871356D;
LABEL_23:
      v53 = 773;
      v50 = v21;
      v51 = v20;
      v52 = ".ret";
      v23 = llvm::BasicBlock::splitBasicBlock((uint64_t *)v5, (uint64_t *)v7 + 3, (uint64_t)&v50, 0);
      v24 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v25 = v23;
        v26 = *(_QWORD *)(v24 + 24);
        v27 = *(unsigned int *)(v24 + 40);
        if (!(_DWORD)v27)
          goto LABEL_33;
        LODWORD(v28) = (v27 - 1) & (v10 ^ (v5 >> 9));
        v29 = (uint64_t ****)(v26 + 16 * v28);
        v30 = *v29;
        if (v5 != *v29)
        {
          v31 = 1;
          while (v30 != (uint64_t ***)-4096)
          {
            v32 = v28 + v31++;
            v28 = v32 & (v27 - 1);
            v30 = *(uint64_t ****)(v26 + 16 * v28);
            if (v5 == v30)
            {
              v29 = (uint64_t ****)(v26 + 16 * v28);
              goto LABEL_34;
            }
          }
LABEL_33:
          v29 = (uint64_t ****)(v26 + 16 * v27);
        }
LABEL_34:
        v33 = v29[1];
        v34 = v33[3];
        v35 = &v34[*((unsigned int *)v33 + 8)];
        v50 = v4;
        v51 = 0x800000000;
        sub_1C618A450((unsigned int *)&v50, v34, v35);
        v36 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(*(_QWORD *)this, v25, (uint64_t)v5);
        v37 = (uint64_t *)v50;
        if ((_DWORD)v51)
        {
          v38 = v36;
          v39 = (uint64_t *)((char *)v50 + 8 * v51);
          v48 = v36 + 24;
          v49 = v4;
          v47 = v36 + 40;
          do
          {
            v40 = *v37;
            *(_BYTE *)(*(_QWORD *)this + 64) = 0;
            v41 = *(_QWORD *)(v40 + 8);
            if (v41 != v38)
            {
              v42 = *(_QWORD **)(v41 + 24);
              v43 = *(unsigned int *)(v41 + 32);
              v44 = &v42[v43];
              if ((_DWORD)v43)
              {
                v45 = 8 * v43;
                while (*v42 != v40)
                {
                  ++v42;
                  v45 -= 8;
                  if (!v45)
                  {
                    v42 = v44;
                    break;
                  }
                }
              }
              if (v44 != v42 + 1)
              {
                memmove(v42, v42 + 1, (char *)v44 - (char *)(v42 + 1));
                LODWORD(v43) = *(_DWORD *)(v41 + 32);
              }
              *(_DWORD *)(v41 + 32) = v43 - 1;
              *(_QWORD *)(v40 + 8) = v38;
              v46 = *(unsigned int *)(v38 + 32);
              if (v46 >= *(unsigned int *)(v38 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v48, v47, v46 + 1, 8);
                v46 = *(unsigned int *)(v38 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v38 + 24) + 8 * v46) = v40;
              ++*(_DWORD *)(v38 + 32);
              llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v40);
            }
            ++v37;
          }
          while (v37 != v39);
          v4 = v49;
          v37 = (uint64_t *)v50;
        }
        if (v37 != (uint64_t *)v4)
          free(v37);
      }
LABEL_24:
      if (++v1 == v2)
        return;
    }
    v11 = ***v5;
    v12 = *(_QWORD *)(v11 + 152);
    v13 = *(unsigned int *)(v11 + 168);
    if ((_DWORD)v13)
    {
      LODWORD(v14) = (v13 - 1) & (v10 ^ (v5 >> 9));
      v15 = (uint64_t ****)(v12 + 16 * v14);
      v16 = *v15;
      if (*v15 == v5)
      {
LABEL_22:
        v19 = v15[1];
        v22 = (uint64_t)*v19;
        v21 = (char *)(v19 + 2);
        v20 = v22;
        goto LABEL_23;
      }
      v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v13 - 1);
        v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v5)
        {
          v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_22;
        }
      }
    }
    v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_22;
  }
}

llvm::LLVMContext ***llvm::CodeExtractor::constructFunction(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Value *a4, _QWORD *a5, llvm::Value *a6, uint64_t ***a7, uint64_t **a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  const char **v12;
  const char **v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  llvm::Value **v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value **v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  llvm::PointerType ***i;
  llvm::PointerType ***v40;
  llvm::PointerType **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  llvm::Value **v51;
  uint64_t v52;
  uint64_t v53;
  llvm::Value **v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  llvm::PointerType *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t ***v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  _BOOL4 v74;
  llvm::PointerType *v75;
  void **v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  llvm::Value *v84;
  int v85;
  int v86;
  uint64_t v87;
  llvm::Value **v88;
  llvm::Value *v89;
  int v90;
  int v91;
  unint64_t *v92;
  size_t v93;
  const void *v94;
  unint64_t v95;
  __int128 *p_dst;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  llvm::Type *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t ****v106;
  uint64_t ***v107;
  int v108;
  int v109;
  uint64_t ***v110;
  char *v111;
  llvm::ValueHandleBase *v112;
  llvm::ValueHandleBase *v113;
  char *v114;
  uint64_t **v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t j;
  uint64_t v121;
  int v123;
  BOOL v124;
  llvm::Type *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  llvm::Value *v129;
  uint64_t *v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  llvm::Value *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  const char *v139;
  llvm::User *v140;
  BOOL v141;
  llvm::Value **v142;
  const llvm::APInt *v143;
  uint64_t v144;
  llvm::ConstantInt *v145;
  unint64_t v146;
  int v147;
  llvm::ValueHandleBase *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t ***v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t ****v159;
  uint64_t ***v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t ***v164;
  uint64_t **v165;
  char *v166;
  uint64_t **v167;
  _DWORD *v168;
  _DWORD *v169;
  uint64_t v170;
  llvm::Value *v171;
  _QWORD *v172;
  llvm::GetElementPtrInst *v173;
  llvm::Value *v174;
  _DWORD *v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  llvm::GetElementPtrInst *TypeAtIndex;
  uint64_t v180;
  uint64_t v181;
  uint64_t **v182;
  uint64_t **v183;
  char *v184;
  _DWORD *v185;
  uint64_t v186;
  uint64_t ***v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t ****v192;
  uint64_t ***v193;
  int v194;
  int v195;
  uint64_t ***v196;
  uint64_t **v197;
  char *v198;
  uint64_t **v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  llvm::ValueSymbolTable *v203;
  int v204;
  unsigned int v205;
  char *v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t ***v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t ***v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t ***v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t ****v222;
  uint64_t ***v223;
  int v224;
  int v225;
  uint64_t ***v226;
  const char *v227;
  char *v228;
  const char *v229;
  int v230;
  unsigned int v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t ***v235;
  unsigned int v236;
  unsigned int v237;
  uint64_t ***v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t ****v243;
  uint64_t ***v244;
  int v245;
  int v246;
  uint64_t ***v247;
  const char *v248;
  char *v249;
  const char *v250;
  int v251;
  unsigned int v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t ***v256;
  llvm::Value *v257;
  char *v258;
  const char *v259;
  llvm::User *v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v264;
  uint64_t *v266;
  char *__p;
  uint64_t v271;
  llvm::Value *v272;
  uint64_t v274;
  char *v275;
  uint64_t ***v276;
  uint64_t *v278;
  llvm::GetElementPtrInst *v279;
  uint64_t *v280;
  llvm::LLVMContext ***v281;
  unsigned int v283;
  char *v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v290;
  const char *v291;
  const char *v292;
  uint64_t **v293;
  __int16 v294;
  __int128 __dst;
  unint64_t v296;
  _QWORD v297[2];
  int v298;
  void *v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  llvm::Value **NullValue;
  llvm::ValueHandleBase *v304;
  const char *v305;
  __int16 v306;
  uint64_t v307;

  v8 = a2;
  v9 = a1;
  v307 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 104);
  if (v10 >= 2)
  {
    if (v10 == 2)
      v11 = ***(_QWORD ***)a4 + 1888;
    else
      v11 = ***(_QWORD ***)a4 + 1936;
  }
  else
  {
    v11 = ***(_QWORD ***)a4 + 1576;
  }
  *(_QWORD *)(a1 + 112) = v11;
  v297[0] = 0;
  v297[1] = 0;
  v298 = 0;
  v300 = 0;
  v301 = 0;
  v299 = 0;
  v12 = *(const char ***)(a2 + 24);
  v13 = *(const char ***)(a2 + 32);
  if (v12 != v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v284 = 0;
    v17 = 0;
    __p = 0;
    v280 = (uint64_t *)(a1 + 192);
    while (1)
    {
      *(_QWORD *)&__dst = 0;
      v18 = *v12;
      *(_QWORD *)&__dst = *v12;
      if (!*(_BYTE *)(v9 + 8))
        goto LABEL_9;
      v290 = (char *)v18;
      NullValue = 0;
      if (sub_1C614F7B0(v280, &v290, &NullValue))
      {
        v27 = NullValue;
        v28 = *(_QWORD *)(v9 + 192);
        v29 = *(unsigned int *)(v9 + 208);
      }
      else
      {
        v28 = *(_QWORD *)(v9 + 192);
        v29 = *(unsigned int *)(v9 + 208);
        v27 = (llvm::Value **)(v28 + 8 * v29);
      }
      v30 = (llvm::Value **)(v28 + 8 * v29);
      v18 = (const char *)__dst;
      if (v27 == v30)
      {
        v31 = *(_QWORD *)__dst;
        if (v17 >= v284)
        {
          v33 = (v17 - __p) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_351;
          if ((v284 - __p) >> 2 > v34)
            v34 = (v284 - __p) >> 2;
          if ((unint64_t)(v284 - __p) >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
          {
            if (v35 >> 61)
              goto LABEL_352;
            v285 = v35;
            v36 = (char *)operator new(8 * v35);
            v35 = v285;
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[8 * v33];
          *(_QWORD *)v37 = v31;
          v32 = v37 + 8;
          if (v17 == __p)
          {
            __p = v37;
            v9 = a1;
          }
          else
          {
            v9 = a1;
            do
            {
              v38 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *((_QWORD *)v37 - 1) = v38;
              v37 -= 8;
            }
            while (v17 != __p);
            v17 = __p;
            __p = v37;
          }
          v284 = &v36[8 * v35];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_QWORD *)v17 = v31;
          v32 = v17 + 8;
          v9 = a1;
        }
        sub_1C4D954B8(v297, &__dst);
        v17 = v32;
      }
      else
      {
LABEL_9:
        v19 = *(_QWORD *)v18;
        if (v15 >= (uint64_t *)v14)
        {
          v20 = v15 - v16;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61)
            goto LABEL_351;
          if ((v14 - (char *)v16) >> 2 > v21)
            v21 = (v14 - (char *)v16) >> 2;
          if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
          {
            if (v22 >> 61)
              goto LABEL_352;
            v23 = (char *)operator new(8 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = (uint64_t *)&v23[8 * v20];
          *v24 = v19;
          v25 = v24 + 1;
          if (v15 == v16)
          {
            v16 = v24;
            v9 = a1;
          }
          else
          {
            v9 = a1;
            do
            {
              v26 = *--v15;
              *--v24 = v26;
            }
            while (v15 != v16);
            v15 = v16;
            v16 = v24;
          }
          v14 = &v23[8 * v22];
          if (v15)
            operator delete(v15);
          v15 = v25;
        }
        else
        {
          *v15++ = v19;
          v9 = a1;
        }
      }
      if (++v12 == v13)
        goto LABEL_56;
    }
  }
  __p = 0;
  v17 = 0;
  v284 = 0;
  v16 = 0;
  v15 = 0;
  v14 = 0;
LABEL_56:
  v40 = *(llvm::PointerType ****)(a3 + 24);
  for (i = *(llvm::PointerType ****)(a3 + 32); v40 != i; ++v40)
  {
    *(_QWORD *)&__dst = 0;
    v41 = *v40;
    *(_QWORD *)&__dst = *v40;
    if (!*(_BYTE *)(v9 + 8))
      goto LABEL_58;
    v290 = (char *)v41;
    NullValue = 0;
    if (sub_1C614F7B0((uint64_t *)(v9 + 192), &v290, &NullValue))
    {
      v51 = NullValue;
      v52 = *(_QWORD *)(v9 + 192);
      v53 = *(unsigned int *)(v9 + 208);
    }
    else
    {
      v52 = *(_QWORD *)(v9 + 192);
      v53 = *(unsigned int *)(v9 + 208);
      v51 = (llvm::Value **)(v52 + 8 * v53);
    }
    v54 = (llvm::Value **)(v52 + 8 * v53);
    v41 = (llvm::PointerType **)__dst;
    if (v51 == v54)
    {
      v55 = *(_QWORD *)__dst;
      if (v17 >= v284)
      {
        v57 = (v17 - __p) >> 3;
        v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 61)
          goto LABEL_351;
        if ((v284 - __p) >> 2 > v58)
          v58 = (v284 - __p) >> 2;
        if ((unint64_t)(v284 - __p) >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v59 = v58;
        if (v59)
        {
          if (v59 >> 61)
            goto LABEL_352;
          v286 = v59;
          v60 = (char *)operator new(8 * v59);
          v59 = v286;
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[8 * v57];
        *(_QWORD *)v61 = v55;
        v56 = v61 + 8;
        if (v17 != __p)
        {
          do
          {
            v62 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v61 - 1) = v62;
            v61 -= 8;
          }
          while (v17 != __p);
          v17 = __p;
        }
        __p = v61;
        v284 = &v60[8 * v59];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v17 = v55;
        v56 = v17 + 8;
      }
      sub_1C4D954B8(v297, &__dst);
      v17 = v56;
    }
    else
    {
LABEL_58:
      v42 = llvm::PointerType::get(*v41, 0);
      v43 = v42;
      if (v15 >= (uint64_t *)v14)
      {
        v44 = v15 - v16;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
          goto LABEL_351;
        if ((v14 - (char *)v16) >> 2 > v45)
          v45 = (v14 - (char *)v16) >> 2;
        if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          if (v46 >> 61)
            goto LABEL_352;
          v47 = (char *)operator new(8 * v46);
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v44];
        *v48 = v43;
        v49 = v48 + 1;
        if (v15 != v16)
        {
          do
          {
            v50 = *--v15;
            *--v48 = v50;
          }
          while (v15 != v16);
          v15 = v16;
        }
        v16 = v48;
        v14 = &v47[8 * v46];
        if (v15)
          operator delete(v15);
        v15 = v49;
      }
      else
      {
        *v15++ = v42;
      }
    }
  }
  v63 = 0;
  v287 = v15 - v16;
  if (*(_BYTE *)(v9 + 8))
  {
    v64 = v16;
    v65 = v15;
    v66 = a7;
    v67 = (uint64_t)a8;
    if (__p != v17)
    {
      v63 = (llvm::PointerType *)llvm::StructType::get(*a8, (uint64_t)__p, (v17 - __p) >> 3, 0);
      v68 = llvm::PointerType::get(v63, 0);
      v69 = v68;
      if (v15 >= (uint64_t *)v14)
      {
        v70 = v287 + 1;
        if ((unint64_t)(v287 + 1) >> 61)
          goto LABEL_351;
        if ((v14 - (char *)v16) >> 2 > v70)
          v70 = (v14 - (char *)v16) >> 2;
        if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        if (v70)
        {
          if (v70 >> 61)
LABEL_352:
            sub_1C4764EE4();
          v71 = (char *)operator new(8 * v70);
        }
        else
        {
          v71 = 0;
        }
        v64 = (uint64_t *)&v71[8 * v287];
        *v64 = v69;
        v65 = v64 + 1;
        if (v15 != v16)
        {
          v72 = v15;
          do
          {
            v73 = *--v72;
            *--v64 = v73;
          }
          while (v72 != v16);
        }
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v15 = v68;
        v65 = v15 + 1;
        v64 = v16;
      }
    }
  }
  else
  {
    v64 = v16;
    v65 = v15;
    v66 = a7;
    v67 = (uint64_t)a8;
  }
  if (*(_BYTE *)(a1 + 48))
    v74 = *((_DWORD *)v66[3] + 2) > 0xFFu;
  else
    v74 = 0;
  v75 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(a1 + 112), v64, v65 - v64, v74);
  v76 = (void **)(a1 + 168);
  v279 = v63;
  if (*(char *)(a1 + 191) < 0)
  {
    v77 = *(_QWORD *)(a1 + 176);
    if (v77)
    {
      sub_1C47EBC30(&__dst, *v76, v77);
      goto LABEL_155;
    }
  }
  else if (*(_BYTE *)(a1 + 191))
  {
    __dst = *(_OWORD *)v76;
    v296 = *(_QWORD *)(a1 + 184);
    goto LABEL_155;
  }
  if ((*((_BYTE *)a4 + 23) & 0x10) == 0)
    goto LABEL_144;
  v78 = ***(_QWORD ***)a4;
  v79 = *(_QWORD *)(v78 + 152);
  v80 = *(unsigned int *)(v78 + 168);
  v81 = a4 >> 4;
  if (!(_DWORD)v80)
  {
LABEL_136:
    v82 = v80;
LABEL_137:
    if (**(_QWORD **)(v79 + 16 * v82 + 8))
    {
      if (!(_DWORD)v80)
        goto LABEL_145;
      goto LABEL_139;
    }
LABEL_144:
    HIBYTE(v296) = 9;
    strcpy((char *)&__dst, "extracted");
    goto LABEL_155;
  }
  LODWORD(v82) = (v80 - 1) & (v81 ^ (a4 >> 9));
  v83 = v79 + 16 * v82;
  v84 = *(llvm::Value **)v83;
  if (*(llvm::Value **)v83 != a4)
  {
    v85 = 1;
    while (v84 != (llvm::Value *)-4096)
    {
      v86 = v82 + v85++;
      v82 = v86 & (v80 - 1);
      v84 = *(llvm::Value **)(v79 + 16 * v82);
      if (v84 == a4)
        goto LABEL_137;
    }
    goto LABEL_136;
  }
  if (!**(_QWORD **)(v83 + 8))
    goto LABEL_144;
LABEL_139:
  LODWORD(v87) = (v80 - 1) & (v81 ^ (a4 >> 9));
  v88 = (llvm::Value **)(v79 + 16 * v87);
  v89 = *v88;
  if (*v88 == a4)
    goto LABEL_146;
  v90 = 1;
  while (v89 != (llvm::Value *)-4096)
  {
    v91 = v87 + v90++;
    v87 = v91 & (v80 - 1);
    v89 = *(llvm::Value **)(v79 + 16 * v87);
    if (v89 == a4)
    {
      v88 = (llvm::Value **)(v79 + 16 * v87);
      goto LABEL_146;
    }
  }
LABEL_145:
  v88 = (llvm::Value **)(v79 + 16 * v80);
LABEL_146:
  v92 = (unint64_t *)v88[1];
  v95 = *v92;
  v94 = v92 + 2;
  v93 = v95;
  if (v95 >= 0x7FFFFFFFFFFFFFF8)
LABEL_351:
    abort();
  if (v93 >= 0x17)
  {
    v97 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17)
      v97 = v93 | 7;
    v98 = v67;
    v99 = v97 + 1;
    p_dst = (__int128 *)operator new(v97 + 1);
    v100 = v99 | 0x8000000000000000;
    v67 = v98;
    v66 = a7;
    *((_QWORD *)&__dst + 1) = v93;
    v296 = v100;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v296) = v93;
    p_dst = &__dst;
    if (!v93)
      goto LABEL_154;
  }
  memmove(p_dst, v94, v93);
LABEL_154:
  *((_BYTE *)p_dst + v93) = 0;
LABEL_155:
  v101 = (llvm::Type *)(*((_DWORD *)*v66 + 2) >> 8);
  v266 = v64;
  if ((*((_BYTE *)v66 + 23) & 0x10) != 0)
  {
    v102 = ***v66;
    v103 = *(_QWORD *)(v102 + 152);
    v104 = *(unsigned int *)(v102 + 168);
    if ((_DWORD)v104)
    {
      LODWORD(v105) = (v104 - 1) & ((v66 >> 4) ^ (v66 >> 9));
      v106 = (uint64_t ****)(v103 + 16 * v105);
      v107 = *v106;
      if (*v106 == v66)
      {
LABEL_163:
        v110 = v106[1];
        v113 = (llvm::ValueHandleBase *)*v110;
        v111 = (char *)(v110 + 2);
        v112 = v113;
        goto LABEL_164;
      }
      v108 = 1;
      while (v107 != (uint64_t ***)-4096)
      {
        v109 = v105 + v108++;
        v105 = v109 & (v104 - 1);
        v107 = *(uint64_t ****)(v103 + 16 * v105);
        if (v107 == v66)
        {
          v106 = (uint64_t ****)(v103 + 16 * v105);
          goto LABEL_163;
        }
      }
    }
    v106 = (uint64_t ****)(v103 + 16 * v104);
    goto LABEL_163;
  }
  v112 = 0;
  v111 = &byte_1C871356D;
LABEL_164:
  v306 = 773;
  NullValue = (llvm::Value **)v111;
  v304 = v112;
  v305 = ".";
  v290 = (char *)&NullValue;
  v292 = (const char *)&__dst;
  v294 = 1026;
  v114 = (char *)operator new(0x80uLL);
  *((_DWORD *)v114 + 7) = *((_DWORD *)v114 + 7) & 0x38000000 | 0x40000000;
  v275 = v114;
  *(_QWORD *)v114 = 0;
  v281 = (llvm::LLVMContext ***)(v114 + 8);
  llvm::Function::Function((uint64_t *)v114 + 1, v75, 7, v101, (uint64_t)&v290, v67);
  v115 = v66[14];
  v116 = a1;
  if (v115)
  {
    if (*((_DWORD *)v115 + 2))
    {
      v117 = v115[5];
      if (v117)
      {
        v118 = *((unsigned int *)v117 + 2);
        if ((_DWORD)v118)
        {
          v119 = v117 + 6;
          for (j = 8 * v118; j; j -= 8)
          {
            v121 = *v119;
            if (*v119)
            {
              if (*(_BYTE *)(v121 + 8) == 2)
              {
                if (*(_DWORD *)(v121 + 12) == 5 && *(_DWORD *)(v121 + 24) == 1853188212 && *(_BYTE *)(v121 + 28) == 107)
                  goto LABEL_181;
              }
              else
              {
                v123 = *(_DWORD *)(v121 + 12);
                v124 = (v123 - 3) > 0x3F
                    || ((1 << (v123 - 3)) & 0xC020160122024B0BLL) == 0;
                if (!v124 || v123 == 75 || v123 == 78)
                  goto LABEL_181;
              }
            }
            *((_QWORD *)v275 + 15) = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v275 + 120), **v281, -1, v121);
LABEL_181:
            ++v119;
          }
        }
      }
    }
  }
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v275 + 80), a5);
  v126 = *((_QWORD *)v275 + 10);
  a5[3] = v126;
  a5[4] = v275 + 80;
  *(_QWORD *)(v126 + 8) = a5 + 3;
  *((_QWORD *)v275 + 10) = a5 + 3;
  if ((v275[26] & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v281);
  v127 = *(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24);
  if ((v127 & 0x7FFFFFFF8) != 0)
  {
    v128 = 0;
    v283 = 0;
    v129 = (llvm::Value *)*((_QWORD *)v275 + 12);
    v130 = (uint64_t *)((char *)v129 + 40 * v287);
    v288 = (v127 >> 3);
    v272 = v129;
    v276 = (uint64_t ***)(v130 + 1);
    v278 = v130;
    v271 = v8;
    do
    {
      if (*(_BYTE *)(v116 + 8) && v298)
      {
        v131 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v128);
        v132 = ((v131 >> 4) ^ (v131 >> 9)) & (v298 - 1);
        v133 = *(_QWORD *)(v297[0] + 8 * v132);
        if (v131 == v133)
        {
LABEL_193:
          if (v132 != v298)
          {
            NullValue = 0;
            v304 = 0;
            NullValue = llvm::Constant::getNullValue((llvm::Constant *)(***(_QWORD ***)a4 + 1960), v125);
            v144 = ***(_QWORD ***)a4;
            v145 = *(llvm::ConstantInt **)(v144 + 1960);
            v146 = *(unsigned int *)(v144 + 1968);
            LODWORD(v291) = v146 >> 8;
            if (v146 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v290, v283, 0);
            }
            else
            {
              if (v146 <= 0xFF)
                v147 = 0;
              else
                v147 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v146);
              v290 = (char *)(v147 & v283);
            }
            v148 = llvm::ConstantInt::get(v145, (llvm::LLVMContext *)&v290, v143);
            if (v291 >= 0x41 && v290)
              MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
            v304 = v148;
            v149 = *((_QWORD *)v275 + 11);
            v150 = v149 - 24;
            if (!v149)
              v150 = 0;
            v151 = *(_QWORD *)(v150 + 40);
            if (v151 == v150 + 40)
            {
              v153 = 0;
            }
            else
            {
              if (v151)
                v152 = v151 - 24;
              else
                v152 = 0;
              if (*(unsigned __int8 *)(v152 + 16) - 29 >= 0xB)
                v153 = 0;
              else
                v153 = v152;
            }
            v154 = *(uint64_t ****)(*(_QWORD *)(v8 + 24) + 8 * v128);
            if ((*((_BYTE *)v154 + 23) & 0x10) != 0)
            {
              v155 = ***v154;
              v156 = *(_QWORD *)(v155 + 152);
              v157 = *(unsigned int *)(v155 + 168);
              if (!(_DWORD)v157)
                goto LABEL_235;
              LODWORD(v158) = (v157 - 1) & ((v154 >> 4) ^ (v154 >> 9));
              v159 = (uint64_t ****)(v156 + 16 * v158);
              v160 = *v159;
              if (*v159 != v154)
              {
                v161 = 1;
                while (v160 != (uint64_t ***)-4096)
                {
                  v162 = v158 + v161++;
                  v158 = v162 & (v157 - 1);
                  v160 = *(uint64_t ****)(v156 + 16 * v158);
                  if (v160 == v154)
                  {
                    v159 = (uint64_t ****)(v156 + 16 * v158);
                    goto LABEL_236;
                  }
                }
LABEL_235:
                v159 = (uint64_t ****)(v156 + 16 * v157);
              }
LABEL_236:
              v163 = v153;
              v164 = v159[1];
              v167 = *v164;
              v166 = (char *)(v164 + 2);
              v165 = v167;
            }
            else
            {
              v163 = v153;
              v165 = 0;
              v166 = &byte_1C871356D;
            }
            v294 = 1283;
            v290 = "gep_";
            v292 = v166;
            v293 = v165;
            v168 = operator new(0xB0uLL);
            v169 = v168;
            v170 = 0;
            v171 = (llvm::Value *)(v168 + 24);
            v168[29] = v168[29] & 0x38000000 | 3;
            do
            {
              v172 = &v168[v170];
              *v172 = 0;
              v172[1] = 0;
              v172[2] = 0;
              v172[3] = v171;
              v170 += 8;
            }
            while (v170 != 24);
            v173 = v279;
            sub_1C4774650(v279, v278, (llvm::Value *)&NullValue, 2);
            *(_OWORD *)(v169 + 30) = 0u;
            v175 = v169 + 30;
            *((_QWORD *)v169 + 12) = v176;
            *((_QWORD *)v169 + 13) = 0;
            v177 = v169[29] & 0xC0000000 | 3;
            v169[28] = 62;
            v169[29] = v177;
            *(_OWORD *)(v169 + 34) = 0u;
            v169[38] = 0;
            if (v163)
            {
              v200 = *(_QWORD *)(v163 + 40);
              *((_QWORD *)v169 + 17) = v200;
              *(_WORD *)(v200 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v169 + 119) & 0x10) != 0)
              {
                v202 = *(_QWORD *)(v200 + 56);
                if (v202)
                {
                  v203 = *(llvm::ValueSymbolTable **)(v202 + 104);
                  if (v203)
                    llvm::ValueSymbolTable::reinsertValue(v203, v171);
                }
              }
              v201 = *(_QWORD *)(v163 + 24);
              *((_QWORD *)v169 + 15) = v201;
              *((_QWORD *)v169 + 16) = v163 + 24;
              *(_QWORD *)(v201 + 8) = v175;
              *(_QWORD *)(v163 + 24) = v175;
              v173 = v279;
            }
            v274 = v163;
            *((_QWORD *)v169 + 20) = v173;
            v178 = 1;
            TypeAtIndex = v173;
            v8 = v271;
            do
            {
              if (v178 == 2)
                break;
              TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, (llvm::Type *)(&NullValue)[v178++], v174);
            }
            while (TypeAtIndex);
            *((_QWORD *)v169 + 21) = TypeAtIndex;
            v180 = v169[29] & 0x7FFFFFF;
            v181 = -v180;
            v182 = (uint64_t **)((char *)v171 - 32 * v180);
            if (*v182)
            {
              v206 = (char *)v171 + 32 * v181;
              v208 = (_QWORD *)*((_QWORD *)v206 + 2);
              v207 = v206 + 16;
              *v208 = *(v207 - 1);
              v209 = *(v207 - 1);
              if (v209)
                *(_QWORD *)(v209 + 16) = *v207;
            }
            *v182 = v278;
            if (v272)
            {
              v183 = *v276;
              v184 = (char *)v171 + 32 * v181;
              *((_QWORD *)v184 + 1) = *v276;
              if (v183)
                v183[2] = (uint64_t *)(v184 + 8);
              *((_QWORD *)v184 + 2) = v276;
              *v276 = v182;
            }
            sub_1C5382FD4((uint64_t)&v302, (uint64_t *)&NullValue, (uint64_t *)&v305, (uint64_t)v171 - 32 * (v169[29] & 0x7FFFFFF) + 32);
            llvm::Value::setName((uint64_t ***)v171, (uint64_t)&v290);
            v185 = operator new(0x60uLL);
            v134 = (llvm::Value *)(v185 + 8);
            v185[13] = v185[13] & 0x38000000 | 1;
            *(_QWORD *)v185 = 0;
            *((_QWORD *)v185 + 1) = 0;
            *((_QWORD *)v185 + 2) = 0;
            *((_QWORD *)v185 + 3) = v185 + 8;
            v186 = *(_QWORD *)(*((_QWORD *)v279 + 2) + 8 * v283);
            v187 = *(uint64_t ****)(*(_QWORD *)(v271 + 24) + 8 * v128);
            if ((*((_BYTE *)v187 + 23) & 0x10) != 0)
            {
              v188 = ***v187;
              v189 = *(_QWORD *)(v188 + 152);
              v190 = *(unsigned int *)(v188 + 168);
              if (!(_DWORD)v190)
                goto LABEL_255;
              LODWORD(v191) = (v190 - 1) & ((v187 >> 4) ^ (v187 >> 9));
              v192 = (uint64_t ****)(v189 + 16 * v191);
              v193 = *v192;
              if (*v192 != v187)
              {
                v194 = 1;
                while (v193 != (uint64_t ***)-4096)
                {
                  v195 = v191 + v194++;
                  v191 = v195 & (v190 - 1);
                  v193 = *(uint64_t ****)(v189 + 16 * v191);
                  if (v193 == v187)
                  {
                    v192 = (uint64_t ****)(v189 + 16 * v191);
                    goto LABEL_256;
                  }
                }
LABEL_255:
                v192 = (uint64_t ****)(v189 + 16 * v190);
              }
LABEL_256:
              v196 = v192[1];
              v199 = *v196;
              v198 = (char *)(v196 + 2);
              v197 = v199;
            }
            else
            {
              v197 = 0;
              v198 = &byte_1C871356D;
            }
            v294 = 1283;
            v290 = "loadgep_";
            v292 = v198;
            v293 = v197;
            llvm::LoadInst::LoadInst((uint64_t)(v185 + 8), v186, (uint64_t)v171, (uint64_t)&v290, 0, v274);
            ++v283;
            goto LABEL_195;
          }
        }
        else
        {
          v204 = 1;
          while (v133 != -4096)
          {
            v205 = v132 + v204++;
            v132 = v205 & (v298 - 1);
            v133 = *(_QWORD *)(v297[0] + 8 * v132);
            if (v131 == v133)
              goto LABEL_193;
          }
        }
      }
      v134 = v129;
      v129 = (llvm::Value *)((char *)v129 + 40);
LABEL_195:
      v135 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v128) + 8);
      v291 = 0;
      v292 = 0;
      v290 = 0;
      v136 = 0;
      if (v135)
      {
        v137 = v135;
        do
        {
          ++v136;
          v137 = *(_QWORD *)(v137 + 8);
        }
        while (v137);
      }
      sub_1C574ECB0(&v290, v135, 0, v136);
      v138 = v290;
      v139 = v291;
      if (v290 != v291)
      {
        do
        {
          v140 = *(llvm::User **)v138;
          if (*(_QWORD *)v138)
            v141 = *(unsigned __int8 *)(*(_QWORD *)v138 + 16) >= 0x1Cu;
          else
            v141 = 0;
          if (v141)
          {
            v142 = (llvm::Value **)*((_QWORD *)v140 + 5);
            v302 = 0;
            NullValue = v142;
            if (sub_1C4E36498((uint64_t *)(a1 + 56), &NullValue, &v302))
              llvm::User::replaceUsesOfWith(v140, *(llvm::Value **)(*(_QWORD *)(v8 + 24) + 8 * v128), v134);
          }
          v138 += 8;
        }
        while (v138 != v139);
        v138 = v290;
      }
      if (v138)
      {
        v291 = v138;
        operator delete(v138);
      }
      ++v128;
      v116 = a1;
    }
    while (v128 != v288);
  }
  if (v15 != v16)
  {
    if ((*((_WORD *)v275 + 13) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v281);
    v210 = (uint64_t ***)*((_QWORD *)v275 + 12);
    v211 = *(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24);
    if ((v211 & 0x7FFFFFFF8) != 0)
    {
      v212 = 0;
      v213 = (v211 >> 3);
      while (1)
      {
        v214 = *(uint64_t ****)(*(_QWORD *)(v8 + 24) + 8 * v212);
        v215 = v214 >> 4;
        if (!v298)
          goto LABEL_282;
        v216 = (v215 ^ (v214 >> 9)) & (v298 - 1);
        v217 = *(uint64_t ****)(v297[0] + 8 * v216);
        if (v214 != v217)
          break;
LABEL_281:
        if (v216 == v298)
          goto LABEL_282;
LABEL_292:
        ++v212;
        v210 += 5;
        if (v212 == v213)
          goto LABEL_299;
      }
      v230 = 1;
      while (v217 != (uint64_t ***)-4096)
      {
        v231 = v216 + v230++;
        v216 = v231 & (v298 - 1);
        v217 = *(uint64_t ****)(v297[0] + 8 * v216);
        if (v214 == v217)
          goto LABEL_281;
      }
LABEL_282:
      if ((*((_BYTE *)v214 + 23) & 0x10) == 0)
      {
        v227 = 0;
        v228 = &byte_1C871356D;
        goto LABEL_291;
      }
      v218 = ***v214;
      v219 = *(_QWORD *)(v218 + 152);
      v220 = *(unsigned int *)(v218 + 168);
      if ((_DWORD)v220)
      {
        LODWORD(v221) = (v220 - 1) & (v215 ^ (v214 >> 9));
        v222 = (uint64_t ****)(v219 + 16 * v221);
        v223 = *v222;
        if (*v222 == v214)
        {
LABEL_290:
          v226 = v222[1];
          v229 = (const char *)*v226;
          v228 = (char *)(v226 + 2);
          v227 = v229;
LABEL_291:
          v294 = 261;
          v290 = v228;
          v291 = v227;
          llvm::Value::setName(v210, (uint64_t)&v290);
          goto LABEL_292;
        }
        v224 = 1;
        while (v223 != (uint64_t ***)-4096)
        {
          v225 = v221 + v224++;
          v221 = v225 & (v220 - 1);
          v223 = *(uint64_t ****)(v219 + 16 * v221);
          if (v223 == v214)
          {
            v222 = (uint64_t ****)(v219 + 16 * v221);
            goto LABEL_290;
          }
        }
      }
      v222 = (uint64_t ****)(v219 + 16 * v220);
      goto LABEL_290;
    }
LABEL_299:
    v232 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if ((v232 & 0x7FFFFFFF8) != 0)
    {
      v233 = 0;
      v234 = (v232 >> 3);
      while (1)
      {
        v235 = *(uint64_t ****)(*(_QWORD *)(a3 + 24) + 8 * v233);
        v236 = v235 >> 4;
        if (!v298)
          goto LABEL_304;
        v237 = (v236 ^ (v235 >> 9)) & (v298 - 1);
        v238 = *(uint64_t ****)(v297[0] + 8 * v237);
        if (v235 != v238)
          break;
LABEL_303:
        if (v237 == v298)
          goto LABEL_304;
LABEL_314:
        ++v233;
        v210 += 5;
        if (v233 == v234)
          goto LABEL_321;
      }
      v251 = 1;
      while (v238 != (uint64_t ***)-4096)
      {
        v252 = v237 + v251++;
        v237 = v252 & (v298 - 1);
        v238 = *(uint64_t ****)(v297[0] + 8 * v237);
        if (v235 == v238)
          goto LABEL_303;
      }
LABEL_304:
      if ((*((_BYTE *)v235 + 23) & 0x10) == 0)
      {
        v248 = 0;
        v249 = &byte_1C871356D;
        goto LABEL_313;
      }
      v239 = ***v235;
      v240 = *(_QWORD *)(v239 + 152);
      v241 = *(unsigned int *)(v239 + 168);
      if ((_DWORD)v241)
      {
        LODWORD(v242) = (v241 - 1) & (v236 ^ (v235 >> 9));
        v243 = (uint64_t ****)(v240 + 16 * v242);
        v244 = *v243;
        if (*v243 == v235)
        {
LABEL_312:
          v247 = v243[1];
          v250 = (const char *)*v247;
          v249 = (char *)(v247 + 2);
          v248 = v250;
LABEL_313:
          v294 = 773;
          v290 = v249;
          v291 = v248;
          v292 = ".out";
          llvm::Value::setName(v210, (uint64_t)&v290);
          goto LABEL_314;
        }
        v245 = 1;
        while (v244 != (uint64_t ***)-4096)
        {
          v246 = v242 + v245++;
          v242 = v246 & (v241 - 1);
          v244 = *(uint64_t ****)(v240 + 16 * v242);
          if (v244 == v235)
          {
            v243 = (uint64_t ****)(v240 + 16 * v242);
            goto LABEL_312;
          }
        }
      }
      v243 = (uint64_t ****)(v240 + 16 * v241);
      goto LABEL_312;
    }
  }
LABEL_321:
  v253 = *((_QWORD *)a4 + 1);
  v291 = 0;
  v292 = 0;
  v290 = 0;
  v254 = 0;
  if (v253)
  {
    v255 = v253;
    v256 = a7;
    v257 = a6;
    do
    {
      ++v254;
      v255 = *(_QWORD *)(v255 + 8);
    }
    while (v255);
  }
  else
  {
    v256 = a7;
    v257 = a6;
  }
  sub_1C574ECB0(&v290, v253, 0, v254);
  v258 = v290;
  v259 = v291;
  if (v290 != v291)
  {
    do
    {
      v260 = *(llvm::User **)v258;
      v261 = *(unsigned __int8 *)(*(_QWORD *)v258 + 16);
      if (*(_QWORD *)v258)
        v262 = v261 >= 0x1C;
      else
        v262 = 0;
      if (v262 && v261 - 29 <= 0xA)
      {
        v264 = *((_QWORD *)v260 + 5);
        if (*(uint64_t ****)(v264 + 56) == v256)
        {
          v302 = 0;
          NullValue = (llvm::Value **)v264;
          if ((sub_1C4E36498((uint64_t *)(a1 + 56), &NullValue, &v302) & 1) == 0)
            llvm::User::replaceUsesOfWith(v260, a4, v257);
        }
      }
      v258 += 8;
    }
    while (v258 != v259);
    v258 = v290;
  }
  if (v258)
  {
    v291 = v258;
    operator delete(v258);
  }
  if (SHIBYTE(v296) < 0)
    operator delete((void *)__dst);
  if (v299)
  {
    v300 = v299;
    operator delete(v299);
  }
  MEMORY[0x1CAA32FB4](v297[0], 8);
  if (__p)
    operator delete(__p);
  if (v266)
    operator delete(v266);
  return v281;
}

llvm::Value *llvm::CodeExtractor::emitCallAndSwitchStatement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::Value **v5;
  llvm::Value **v6;
  char *v7;
  char *v8;
  char *v9;
  unsigned int v10;
  llvm::Value **v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  llvm::GetElementPtrInst *v16;
  uint64_t *v17;
  llvm::Value *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  llvm::Value *v31;
  _DWORD *v32;
  char *v33;
  llvm::PointerType *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Value *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _BYTE *v44;
  char *v45;
  _BYTE *v46;
  llvm::Type *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t **v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  llvm::PointerType *v84;
  _DWORD *v85;
  _DWORD *v86;
  uint64_t *v87;
  llvm::Type *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t **v102;
  uint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  BOOL v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t ***v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  uint64_t ****v128;
  uint64_t ***v129;
  uint64_t ****v130;
  int v131;
  BOOL v132;
  unsigned int v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  uint64_t *v143;
  uint64_t v144;
  int *v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  llvm::Value **v149;
  llvm::Value **v150;
  _DWORD *v151;
  llvm::Value *v152;
  uint64_t v153;
  llvm::Type *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t i;
  unsigned int v158;
  llvm::Value *v159;
  llvm::Value **v160;
  uint64_t v161;
  uint64_t v162;
  llvm::Value **v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  llvm::Value *v168;
  _DWORD *v169;
  llvm::Value *v170;
  uint64_t v171;
  llvm::Type *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  int v179;
  int v180;
  _QWORD *v181;
  _BYTE *v182;
  char *v183;
  _BYTE *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  llvm::Value **v189;
  llvm::Value **v190;
  llvm::Value *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  llvm::User *v198;
  const llvm::APInt *v199;
  llvm::ConstantInt *v200;
  unsigned int v201;
  int v202;
  llvm::ValueHandleBase *v203;
  uint64_t ***v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t ****v209;
  uint64_t ***v210;
  int v211;
  int v212;
  uint64_t ***v213;
  uint64_t **v214;
  char *v215;
  uint64_t **v216;
  char *v217;
  char *v218;
  uint64_t v219;
  char *v220;
  llvm::Value *v221;
  char *v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  llvm::GetElementPtrInst *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t **v229;
  uint64_t *v230;
  uint64_t ***v231;
  char *v232;
  uint64_t v233;
  llvm::ValueSymbolTable *v234;
  int v235;
  unsigned int v236;
  uint64_t ***v237;
  _QWORD *v238;
  uint64_t **v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t **v242;
  uint64_t **v243;
  uint64_t *v244;
  uint64_t **v245;
  uint64_t **v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t **v251;
  uint64_t *v252;
  int v253;
  int v254;
  uint64_t *v255;
  _BYTE *v256;
  char *v257;
  _BYTE *v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  const llvm::APInt *v263;
  unsigned int v264;
  llvm::Value *v265;
  uint64_t v266;
  llvm::ConstantInt *v267;
  unint64_t v268;
  unint64_t v269;
  llvm::BasicBlock *v270;
  _BOOL8 v271;
  size_t v272;
  llvm::ReturnInst *v273;
  llvm::ReturnInst *v274;
  const llvm::APInt *v275;
  llvm::ConstantInt *v276;
  unsigned int v277;
  int v278;
  llvm::ConstantInt *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  unsigned int j;
  uint64_t **v286;
  unint64_t v287;
  int v288;
  int v289;
  int v290;
  llvm::Value ***v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  BOOL v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t k;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t **v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  llvm::Instruction *v309;
  unsigned int v310;
  uint64_t v311;
  _DWORD *v312;
  const llvm::APInt *v313;
  llvm::ConstantInt *v314;
  unsigned int v315;
  int v316;
  llvm::ValueHandleBase *v317;
  uint64_t ***v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t ****v323;
  uint64_t ***v324;
  int v325;
  int v326;
  uint64_t ***v327;
  uint64_t **v328;
  char *v329;
  uint64_t **v330;
  _DWORD *v331;
  _DWORD *v332;
  uint64_t v333;
  llvm::Value *v334;
  _QWORD *v335;
  llvm::GetElementPtrInst *v336;
  llvm::Value *v337;
  _DWORD *v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t v341;
  llvm::GetElementPtrInst *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t **v345;
  uint64_t v346;
  char *v347;
  _DWORD *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  llvm::ValueSymbolTable *v352;
  int v353;
  unsigned int v354;
  char *v355;
  _QWORD *v356;
  _QWORD *v357;
  uint64_t v358;
  int v359;
  llvm::Value ***v360;
  _QWORD *v361;
  llvm::Constant *v362;
  llvm::ReturnInst *v363;
  int v364;
  llvm::Value ***v365;
  uint64_t v366;
  int v367;
  llvm::Value ***v368;
  llvm::Value **v369;
  char *v370;
  char *v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  llvm::Value *v375;
  _QWORD *v376;
  llvm::Value *v377;
  uint64_t v378;
  _QWORD *v379;
  int v380;
  llvm::Value ***v381;
  llvm::BasicBlock *v382;
  llvm::BasicBlock *v383;
  _DWORD *v384;
  uint64_t v385;
  llvm::BranchInst *v386;
  _QWORD *v387;
  uint64_t v388;
  _QWORD *v389;
  llvm::Value *v390;
  llvm::Value **v391;
  llvm::Value ***v392;
  llvm::Value **v393;
  llvm::Value **v394;
  llvm::Value **v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t v399;
  llvm::Type *v400;
  const llvm::APInt *v401;
  llvm::ConstantInt *v402;
  unsigned int v403;
  unint64_t v404;
  llvm::ValueHandleBase *v405;
  uint64_t ***v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t ****v411;
  uint64_t ***v412;
  int v413;
  int v414;
  uint64_t ***v415;
  uint64_t **v416;
  char *v417;
  uint64_t **v418;
  char *v419;
  char *v420;
  uint64_t v421;
  uint64_t ***v422;
  char *v423;
  llvm::Value *v424;
  char *v425;
  uint64_t v426;
  unsigned int v427;
  uint64_t v428;
  llvm::GetElementPtrInst *TypeAtIndex;
  uint64_t v430;
  uint64_t v431;
  uint64_t **v432;
  uint64_t *v433;
  uint64_t ***v434;
  uint64_t v435;
  _DWORD *v436;
  uint64_t v437;
  llvm::ValueSymbolTable *v438;
  uint64_t ***v439;
  _QWORD *v440;
  uint64_t **v441;
  uint64_t v442;
  llvm::Value **v443;
  _DWORD *v444;
  llvm::ReturnInst *v445;
  _BOOL8 v446;
  size_t v447;
  llvm::ReturnInst *v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v452;
  llvm::ValueSymbolTable *v453;
  uint64_t ****v454;
  uint64_t ***v455;
  unsigned int v456;
  uint64_t v457;
  llvm::Value **v459;
  llvm::Value **v460;
  uint64_t v461;
  llvm::ValueSymbolTable *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  llvm::Value ****v467;
  unsigned int v468;
  char **v469;
  llvm::Value *v470;
  uint64_t ***v471;
  char *v472;
  uint64_t **v473;
  unint64_t v474;
  unsigned int v475;
  uint64_t *v476;
  uint64_t *v477;
  llvm::SwitchInst *v478;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v484;
  int v485;
  uint64_t *v486;
  llvm::GetElementPtrInst *v487;
  llvm::GetElementPtrInst *v488;
  llvm::LLVMContext *v489;
  uint64_t **v490;
  llvm::Value **v491;
  uint64_t **v492;
  llvm::Value *v493;
  uint64_t v494;
  unsigned int v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  llvm::Value **v499;
  llvm::Value **v500;
  llvm::BasicBlock *v502;
  int v504;
  uint64_t *v505;
  uint64_t *v507;
  unsigned __int8 *v508;
  void *__p;
  _BYTE *v510;
  const char *v511;
  uint64_t **v512;
  __int16 v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  _QWORD v517[2];
  int v518;
  uint64_t **v519;
  uint64_t **v520;
  uint64_t v521;
  llvm::Value *v522;
  llvm::ValueHandleBase *v523;
  llvm::Value **NullValue;
  llvm::ValueHandleBase *v525;
  uint64_t v526[3];

  v526[1] = *MEMORY[0x1E0C80C00];
  v517[0] = 0;
  v517[1] = 0;
  v518 = 0;
  v520 = 0;
  v521 = 0;
  v519 = 0;
  v498 = *(_QWORD *)(a2 + 40);
  v489 = *(llvm::LLVMContext **)v498;
  v514 = &v516;
  v515 = 0x100000000;
  v5 = *(llvm::Value ***)(a4 + 24);
  v6 = *(llvm::Value ***)(a4 + 32);
  if (v5 == v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v17 = (uint64_t *)(a1 + 192);
    do
    {
      v18 = *v5;
      v522 = *v5;
      if (*(_BYTE *)(a1 + 8)
        && ((__p = v18, NullValue = 0, !sub_1C614F7B0(v17, &__p, &NullValue))
          ? (v28 = *(_QWORD *)(a1 + 192), v29 = *(unsigned int *)(a1 + 208), v27 = (uint64_t *)(v28 + 8 * v29))
          : (uint64_t *)(v27 = (uint64_t *)NullValue, v28 = *(_QWORD *)(a1 + 192), v29 = *(unsigned int *)(a1 + 208)),
            v27 == (uint64_t *)(v28 + 8 * v29)))
      {
        sub_1C4D954B8(v517, &v522);
      }
      else
      {
        if (v8 >= v9)
        {
          v19 = (v8 - v7) >> 3;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61)
            goto LABEL_570;
          if ((v9 - v7) >> 2 > v20)
            v20 = (v9 - v7) >> 2;
          if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
          {
            if (v21 >> 61)
              goto LABEL_571;
            v22 = (char *)operator new(8 * v21);
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[8 * v19];
          *(_QWORD *)v23 = v522;
          v24 = v23 + 8;
          if (v8 != v7)
          {
            do
            {
              v25 = *((_QWORD *)v8 - 1);
              v8 -= 8;
              *((_QWORD *)v23 - 1) = v25;
              v23 -= 8;
            }
            while (v8 != v7);
            v8 = v7;
          }
          v7 = v23;
          v9 = &v22[8 * v21];
          if (v8)
            operator delete(v8);
          v8 = v24;
        }
        else
        {
          *(_QWORD *)v8 = v522;
          v8 += 8;
        }
        if (llvm::Value::isSwiftError(v522))
        {
          v26 = v515;
          if (v515 >= (unint64_t)HIDWORD(v515))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v514, (uint64_t)&v516, v515 + 1, 4);
            v26 = v515;
          }
          *((_DWORD *)v514 + v26) = v10;
          LODWORD(v515) = v515 + 1;
        }
      }
      ++v10;
      ++v5;
    }
    while (v5 != v6);
  }
  v468 = v10;
  v11 = *(llvm::Value ***)(a5 + 24);
  v499 = *(llvm::Value ***)(a5 + 32);
  if (v11 != v499)
  {
    v504 = 0;
    v30 = 0;
    v13 = 0;
    v12 = 0;
    v14 = a1;
    while (1)
    {
      v522 = 0;
      v31 = *v11;
      v522 = *v11;
      if (!*(_BYTE *)(v14 + 8))
        break;
      __p = v31;
      NullValue = 0;
      if (sub_1C614F7B0((uint64_t *)(a1 + 192), &__p, &NullValue))
      {
        v68 = (uint64_t *)NullValue;
        v69 = *(_QWORD *)(v14 + 192);
        v70 = *(unsigned int *)(v14 + 208);
      }
      else
      {
        v69 = *(_QWORD *)(v14 + 192);
        v70 = *(unsigned int *)(v14 + 208);
        v68 = (uint64_t *)(v69 + 8 * v70);
      }
      if (v68 != (uint64_t *)(v69 + 8 * v70))
        break;
      sub_1C4D954B8(v517, &v522);
LABEL_92:
      if (++v11 == v499)
        goto LABEL_5;
    }
    v32 = operator new(0x68uLL);
    v33 = (char *)(v32 + 8);
    v32[13] = v32[13] & 0x38000000 | 1;
    *(_QWORD *)v32 = 0;
    *((_QWORD *)v32 + 1) = 0;
    *((_QWORD *)v32 + 2) = 0;
    *((_QWORD *)v32 + 3) = v32 + 8;
    v34 = *(llvm::PointerType **)v522;
    if ((*((_BYTE *)v522 + 23) & 0x10) == 0)
    {
      v44 = 0;
      v45 = &byte_1C871356D;
      goto LABEL_49;
    }
    v35 = **(_QWORD **)v34;
    v36 = *(_QWORD *)(v35 + 152);
    v37 = *(unsigned int *)(v35 + 168);
    if ((_DWORD)v37)
    {
      LODWORD(v38) = (v37 - 1) & ((v522 >> 4) ^ (v522 >> 9));
      v39 = v36 + 16 * v38;
      v40 = *(llvm::Value **)v39;
      if (*(llvm::Value **)v39 == v522)
      {
LABEL_48:
        v43 = *(_QWORD **)(v39 + 8);
        v46 = (_BYTE *)*v43;
        v45 = (char *)(v43 + 2);
        v44 = v46;
LABEL_49:
        v47 = (llvm::Type *)*(unsigned int *)(v498 + 276);
        v513 = 773;
        __p = v45;
        v510 = v44;
        v511 = ".loc";
        v48 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 80);
        if (v48)
          v49 = v48 - 24;
        else
          v49 = 0;
        v50 = *(_QWORD *)(v49 + 48);
        if (v50)
          v51 = v50 - 24;
        else
          v51 = 0;
        llvm::AllocaInst::AllocaInst((uint64_t)(v32 + 8), v34, v47, 0, (uint64_t)&__p, v51);
        if (v13 >= v30)
        {
          v52 = (v13 - v12) >> 3;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61)
            goto LABEL_570;
          if ((v30 - v12) >> 2 > v53)
            v53 = (v30 - v12) >> 2;
          if ((unint64_t)(v30 - v12) >= 0x7FFFFFFFFFFFFFF8)
            v54 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v54 = v53;
          v496 = (unint64_t)v9;
          if (v54)
          {
            if (v54 >> 61)
              goto LABEL_571;
            v55 = (char *)operator new(8 * v54);
          }
          else
          {
            v55 = 0;
          }
          v56 = &v55[8 * v52];
          *(_QWORD *)v56 = v33;
          v57 = v56 + 8;
          if (v13 != v12)
          {
            do
            {
              v58 = *((_QWORD *)v13 - 1);
              v13 -= 8;
              *((_QWORD *)v56 - 1) = v58;
              v56 -= 8;
            }
            while (v13 != v12);
            v13 = v12;
          }
          v12 = v56;
          v30 = &v55[8 * v54];
          if (v13)
            operator delete(v13);
          v13 = v57;
          v9 = (char *)v496;
        }
        else
        {
          *(_QWORD *)v13 = v33;
          v13 += 8;
        }
        if (v8 >= v9)
        {
          v61 = (v8 - v7) >> 3;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 61)
            goto LABEL_570;
          v63 = v12;
          if ((v9 - v7) >> 2 > v62)
            v62 = (v9 - v7) >> 2;
          if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFF8)
            v64 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v64 = v62;
          if (v64)
          {
            if (v64 >> 61)
              goto LABEL_571;
            v65 = (char *)operator new(8 * v64);
          }
          else
          {
            v65 = 0;
          }
          v66 = &v65[8 * v61];
          *(_QWORD *)v66 = v33;
          v60 = v66 + 8;
          if (v8 != v7)
          {
            do
            {
              v67 = *((_QWORD *)v8 - 1);
              v8 -= 8;
              *((_QWORD *)v66 - 1) = v67;
              v66 -= 8;
            }
            while (v8 != v7);
            v8 = v7;
          }
          v7 = v66;
          v59 = &v65[8 * v64];
          if (v8)
            operator delete(v8);
          v12 = v63;
          v14 = a1;
        }
        else
        {
          v59 = v9;
          *(_QWORD *)v8 = v33;
          v60 = v8 + 8;
        }
        ++v504;
        v8 = v60;
        v9 = v59;
        goto LABEL_92;
      }
      v41 = 1;
      while (v40 != (llvm::Value *)-4096)
      {
        v42 = v38 + v41++;
        v38 = v42 & (v37 - 1);
        v40 = *(llvm::Value **)(v36 + 16 * v38);
        if (v40 == v522)
        {
          v39 = v36 + 16 * v38;
          goto LABEL_48;
        }
      }
    }
    v39 = v36 + 16 * v37;
    goto LABEL_48;
  }
  v12 = 0;
  v13 = 0;
  v504 = 0;
  v14 = a1;
LABEL_5:
  v500 = (llvm::Value **)v12;
  if (!*(_BYTE *)(v14 + 8))
  {
    v495 = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_158;
  }
  v72 = v519;
  v71 = v520;
  if (v519 == v520)
  {
    v495 = 0;
    v15 = 0;
    v16 = 0;
    v14 = a1;
    goto LABEL_158;
  }
  v490 = v520;
  v497 = (unint64_t)v9;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  do
  {
    v76 = **v72;
    if (v74 >= v75)
    {
      v77 = (v74 - v73) >> 3;
      v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 61)
        goto LABEL_570;
      if ((v75 - v73) >> 2 > v78)
        v78 = (v75 - v73) >> 2;
      if ((unint64_t)(v75 - v73) >= 0x7FFFFFFFFFFFFFF8)
        v79 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v79 = v78;
      if (v79)
      {
        if (v79 >> 61)
          goto LABEL_571;
        v80 = (char *)operator new(8 * v79);
      }
      else
      {
        v80 = 0;
      }
      v81 = &v80[8 * v77];
      *(_QWORD *)v81 = v76;
      v82 = v81 + 8;
      while (v74 != v73)
      {
        v83 = *((_QWORD *)v74 - 1);
        v74 -= 8;
        *((_QWORD *)v81 - 1) = v83;
        v81 -= 8;
      }
      v75 = &v80[8 * v79];
      if (v73)
        operator delete(v73);
      v73 = v81;
      v74 = v82;
      v71 = v490;
    }
    else
    {
      *(_QWORD *)v74 = v76;
      v74 += 8;
    }
    ++v72;
  }
  while (v72 != v71);
  v84 = (llvm::PointerType *)llvm::StructType::get(**(uint64_t ***)a2, (uint64_t)v73, (v74 - v73) >> 3, 0);
  v85 = operator new(0x68uLL);
  v86 = v85;
  v87 = (uint64_t *)(v85 + 8);
  v85[13] = v85[13] & 0x38000000 | 1;
  *(_QWORD *)v85 = 0;
  *((_QWORD *)v85 + 1) = 0;
  *((_QWORD *)v85 + 2) = 0;
  *((_QWORD *)v85 + 3) = v85 + 8;
  v88 = (llvm::Type *)*(unsigned int *)(v498 + 276);
  __p = "structArg";
  v513 = 259;
  v89 = *(_QWORD *)(a1 + 40);
  if (!v89)
  {
    v90 = a3;
    v91 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 80);
    if (v91)
      v92 = v91 - 24;
    else
      v92 = 0;
    v93 = (uint64_t *)(v92 + 48);
    v94 = v497;
    goto LABEL_127;
  }
  v95 = v89 + 40;
  v96 = *(_QWORD *)(v89 + 48);
  v90 = a3;
  v94 = v497;
  if (v96 != v95)
  {
    while (1)
    {
      v97 = v96 - 24;
      if (!v96)
        v97 = 0;
      if (*(_BYTE *)(v97 + 16) != 83)
        break;
      v96 = *(_QWORD *)(v96 + 8);
      if (v96 == v95)
        goto LABEL_133;
    }
    v456 = *(unsigned __int8 *)(v96 - 8) - 38;
    v306 = v456 > 0x38;
    v457 = (1 << v456) & 0x100060000000001;
    if (!v306 && v457 != 0)
    {
      v93 = (uint64_t *)(v96 + 8);
LABEL_127:
      v95 = *v93;
      goto LABEL_133;
    }
    v95 = v96;
  }
LABEL_133:
  if (v95)
    v98 = v95 - 24;
  else
    v98 = 0;
  llvm::AllocaInst::AllocaInst((uint64_t)(v85 + 8), v84, v88, 0, (uint64_t)&__p, v98);
  if ((unint64_t)v8 >= v94)
  {
    v99 = (v8 - v7) >> 3;
    v100 = v99 + 1;
    if ((unint64_t)(v99 + 1) >> 61)
LABEL_570:
      abort();
    if ((uint64_t)(v94 - (_QWORD)v7) >> 2 > v100)
      v100 = (uint64_t)(v94 - (_QWORD)v7) >> 2;
    if (v94 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      v100 = 0x1FFFFFFFFFFFFFFFLL;
    if (v100)
    {
      if (v100 >> 61)
LABEL_571:
        sub_1C4764EE4();
      v101 = (char *)operator new(8 * v100);
    }
    else
    {
      v101 = 0;
    }
    v102 = (uint64_t **)&v101[8 * v99];
    *v102 = v87;
    v472 = (char *)(v102 + 1);
    while (v8 != v7)
    {
      v103 = (uint64_t *)*((_QWORD *)v8 - 1);
      v8 -= 8;
      *--v102 = v103;
    }
    if (v7)
      operator delete(v7);
    v7 = (char *)v102;
    v90 = a3;
  }
  else
  {
    *(_QWORD *)v8 = v87;
    v472 = v8 + 8;
  }
  v476 = v87;
  v487 = v84;
  if ((((char *)v520 - (char *)v519) & 0x7FFFFFFF8) != 0)
  {
    v396 = 0;
    v495 = 0;
    v494 = v90 + 40;
    v397 = ((unint64_t)((char *)v520 - (char *)v519) >> 3);
    v398 = (uint64_t **)(v86 + 10);
    v399 = a4;
    v482 = v397;
    while (1)
    {
      __p = v519[v396];
      NullValue = 0;
      if (sub_1C614F7B0((uint64_t *)v399, &__p, &NullValue))
      {
        if (NullValue != (llvm::Value **)(*(_QWORD *)v399 + 8 * *(unsigned int *)(v399 + 16)))
          break;
      }
LABEL_515:
      if (++v396 == v397)
        goto LABEL_155;
    }
    NullValue = 0;
    v525 = 0;
    NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v489 + 1960), v400);
    v402 = *(llvm::ConstantInt **)(*(_QWORD *)v489 + 1960);
    v403 = *(_DWORD *)(*(_QWORD *)v489 + 1968);
    LODWORD(v510) = v403 >> 8;
    if (v403 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, v396, 0);
    }
    else
    {
      if (v403 <= 0xFF)
        v404 = 0;
      else
        v404 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v403);
      __p = (void *)(v404 & v396);
    }
    v405 = llvm::ConstantInt::get(v402, (llvm::LLVMContext *)&__p, v401);
    if (v510 >= 0x41 && __p)
      MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
    v525 = v405;
    v406 = (uint64_t ***)v519[v396];
    if ((*((_BYTE *)v406 + 23) & 0x10) == 0)
    {
      v416 = 0;
      v417 = &byte_1C871356D;
      goto LABEL_505;
    }
    v407 = ***v406;
    v408 = *(_QWORD *)(v407 + 152);
    v409 = *(unsigned int *)(v407 + 168);
    if ((_DWORD)v409)
    {
      LODWORD(v410) = (v409 - 1) & ((v406 >> 4) ^ (v406 >> 9));
      v411 = (uint64_t ****)(v408 + 16 * v410);
      v412 = *v411;
      if (*v411 == v406)
      {
LABEL_504:
        v415 = v411[1];
        v418 = *v415;
        v417 = (char *)(v415 + 2);
        v416 = v418;
LABEL_505:
        v513 = 1283;
        __p = "gep_";
        v511 = v417;
        v512 = v416;
        v419 = (char *)operator new(0xB0uLL);
        v420 = v419;
        v421 = 0;
        v422 = (uint64_t ***)(v419 + 96);
        *((_DWORD *)v419 + 29) = *((_DWORD *)v419 + 29) & 0x38000000 | 3;
        do
        {
          v423 = &v419[v421];
          *(_QWORD *)v423 = 0;
          *((_QWORD *)v423 + 1) = 0;
          *((_QWORD *)v423 + 2) = 0;
          *((_QWORD *)v423 + 3) = v422;
          v421 += 32;
        }
        while (v421 != 96);
        sub_1C4774650(v487, v476, (llvm::Value *)&NullValue, 2);
        *(_OWORD *)(v420 + 120) = 0u;
        v425 = v420 + 120;
        *((_QWORD *)v420 + 12) = v426;
        *((_QWORD *)v420 + 13) = 0;
        v427 = *((_DWORD *)v420 + 29) & 0xC0000000 | 3;
        *((_DWORD *)v420 + 28) = 62;
        *((_DWORD *)v420 + 29) = v427;
        *(_OWORD *)(v420 + 136) = 0u;
        *((_DWORD *)v420 + 38) = 0;
        *((_QWORD *)v420 + 20) = v487;
        v428 = 1;
        TypeAtIndex = v487;
        do
        {
          if (v428 == 2)
            break;
          TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, (llvm::Type *)(&NullValue)[v428++], v424);
        }
        while (TypeAtIndex);
        *((_QWORD *)v420 + 21) = TypeAtIndex;
        v430 = *((_DWORD *)v420 + 29) & 0x7FFFFFF;
        v431 = -v430;
        v432 = (uint64_t **)&v422[-4 * v430];
        if (*v432)
        {
          v439 = &v422[4 * v431];
          v441 = v439[2];
          v440 = v439 + 2;
          *v441 = (uint64_t *)*(v440 - 1);
          v442 = *(v440 - 1);
          if (v442)
            *(_QWORD *)(v442 + 16) = *v440;
        }
        *v432 = v476;
        v433 = *v398;
        v434 = &v422[4 * v431];
        v434[1] = (uint64_t **)*v398;
        if (v433)
          v433[2] = (uint64_t)(v434 + 1);
        v434[2] = v398;
        *v398 = (uint64_t *)v432;
        sub_1C5382FD4((uint64_t)&v522, (uint64_t *)&NullValue, v526, (uint64_t)&v422[-4 * (*((_DWORD *)v420 + 29) & 0x7FFFFFF) + 4]);
        llvm::Value::setName(v422, (uint64_t)&__p);
        *((_QWORD *)v420 + 17) = a3;
        *(_WORD *)(a3 + 18) &= ~0x8000u;
        if ((v420[119] & 0x10) != 0)
        {
          v437 = *(_QWORD *)(a3 + 56);
          if (v437)
          {
            v438 = *(llvm::ValueSymbolTable **)(v437 + 104);
            if (v438)
              llvm::ValueSymbolTable::reinsertValue(v438, (llvm::Value *)v422);
          }
        }
        v435 = *(_QWORD *)(a3 + 40);
        *((_QWORD *)v420 + 15) = v435;
        *((_QWORD *)v420 + 16) = v494;
        *(_QWORD *)(v435 + 8) = v425;
        *(_QWORD *)(a3 + 40) = v425;
        v436 = operator new(0x80uLL);
        v436[21] = v436[21] & 0x38000000 | 2;
        *(_QWORD *)v436 = 0;
        *((_QWORD *)v436 + 1) = 0;
        *((_QWORD *)v436 + 2) = 0;
        *((_QWORD *)v436 + 3) = v436 + 16;
        *((_QWORD *)v436 + 4) = 0;
        *((_QWORD *)v436 + 5) = 0;
        *((_QWORD *)v436 + 6) = 0;
        *((_QWORD *)v436 + 7) = v436 + 16;
        llvm::StoreInst::StoreInst((llvm::StoreInst *)(v436 + 16), (llvm::Value *)v519[v396], (llvm::Value *)v422, 0, (llvm::BasicBlock *)a3);
        ++v495;
        v397 = v482;
        v399 = a4;
        goto LABEL_515;
      }
      v413 = 1;
      while (v412 != (uint64_t ***)-4096)
      {
        v414 = v410 + v413++;
        v410 = v414 & (v409 - 1);
        v412 = *(uint64_t ****)(v408 + 16 * v410);
        if (v412 == v406)
        {
          v411 = (uint64_t ****)(v408 + 16 * v410);
          goto LABEL_504;
        }
      }
    }
    v411 = (uint64_t ****)(v408 + 16 * v409);
    goto LABEL_504;
  }
  v495 = 0;
LABEL_155:
  v15 = v476;
  if (v73)
    operator delete(v73);
  v8 = v472;
  v14 = a1;
  v16 = v487;
LABEL_158:
  if (a2)
    v104 = *(_QWORD *)(a2 + 24);
  else
    v104 = 0;
  v477 = v15;
  v488 = v16;
  v105 = v8 - v7;
  v106 = "targetBlock";
  if (*(_DWORD *)(v14 + 104) <= 1u)
    v106 = "";
  v107 = 1;
  HIBYTE(v513) = 1;
  if (*v106)
  {
    __p = v106;
    v107 = 3;
  }
  v108 = (uint64_t)v105 >> 3;
  v109 = v105 >> 3;
  LOBYTE(v513) = v107;
  v110 = (v105 >> 3) + 1;
  v111 = (v105 >> 3) == -1;
  v112 = operator new(32 * v110 + 80);
  v113 = (uint64_t)&v112[4 * v110];
  v114 = v110 & 0x7FFFFFF;
  v115 = *(_DWORD *)(v113 + 20) & 0x38000000 | v110 & 0x7FFFFFF;
  *(_DWORD *)(v113 + 20) = v115;
  if (!v111)
  {
    do
    {
      *v112 = 0;
      v112[1] = 0;
      v112[2] = 0;
      v112[3] = v113;
      v112 += 4;
    }
    while (v112 != (_QWORD *)v113);
    v115 = *(_DWORD *)(v113 + 20);
  }
  *(_QWORD *)v113 = **(_QWORD **)(v104 + 16);
  *(_QWORD *)(v113 + 8) = 0;
  v467 = (llvm::Value ****)(v113 + 8);
  *(_BYTE *)(v113 + 16) = 84;
  *(_BYTE *)(v113 + 17) = 0;
  *(_WORD *)(v113 + 18) = 0;
  *(_DWORD *)(v113 + 20) = v115 & 0xC0000000 | v114;
  *(_OWORD *)(v113 + 24) = 0u;
  v116 = v113 + 24;
  *(_OWORD *)(v113 + 40) = 0u;
  *(_DWORD *)(v113 + 56) = 0;
  *(_QWORD *)(v113 + 64) = 0;
  *(_QWORD *)(v113 + 72) = v104;
  sub_1C5382FD4((uint64_t)&NullValue, (uint64_t *)v7, (uint64_t *)&v7[8 * v108], v113 - 32 * v114);
  v117 = (_QWORD *)(v113 - 32);
  if (*(_QWORD *)(v113 - 32))
  {
    **(_QWORD **)(v113 - 16) = *(_QWORD *)(v113 - 24);
    v466 = *(_QWORD *)(v113 - 24);
    if (v466)
      *(_QWORD *)(v466 + 16) = *(_QWORD *)(v113 - 16);
  }
  *v117 = a2;
  if (a2)
  {
    v118 = (_QWORD *)(a2 + 8);
    v119 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(v113 - 24) = v119;
    if (v119)
      *(_QWORD *)(v119 + 16) = v113 - 24;
    *(_QWORD *)(v113 - 16) = v118;
    *v118 = v117;
  }
  llvm::CallBase::populateBundleOperandInfos(v113, 0, 0, v109);
  llvm::Value::setName((uint64_t ***)v113, (uint64_t)&__p);
  v121 = a3;
  v122 = *(uint64_t ****)(a3 + 56);
  if ((*((_BYTE *)v122 + 23) & 0x20) == 0)
    goto LABEL_206;
  v123 = ***v122;
  __p = *(void **)(a3 + 56);
  v124 = *(_DWORD *)(v123 + 2496);
  if (v124)
  {
    v125 = *(_QWORD *)(v123 + 2480);
    v126 = v124 - 1;
    v127 = v126 & ((v122 >> 4) ^ (v122 >> 9));
    v128 = (uint64_t ****)(v125 + 40 * v127);
    v129 = *v128;
    if (*v128 == v122)
      goto LABEL_184;
    v130 = 0;
    v131 = 1;
    while (v129 != (uint64_t ***)-4096)
    {
      if (v130)
        v132 = 0;
      else
        v132 = v129 == (uint64_t ***)-8192;
      if (v132)
        v130 = v128;
      v133 = v127 + v131++;
      v127 = v133 & v126;
      v128 = (uint64_t ****)(v125 + 40 * v127);
      v129 = *v128;
      if (*v128 == v122)
        goto LABEL_184;
    }
    if (v130)
      v454 = v130;
    else
      v454 = v128;
  }
  else
  {
    v454 = 0;
  }
  v128 = (uint64_t ****)sub_1C541AB24(v123 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v454);
  v455 = (uint64_t ***)__p;
  v128[4] = 0;
  v128[3] = 0;
  *v128 = v455;
  v128[1] = (uint64_t ***)(v128 + 3);
  v128[2] = (uint64_t ***)0x100000000;
LABEL_184:
  v134 = *((unsigned int *)v128 + 4);
  if ((_DWORD)v134)
  {
    v135 = v128[1] + 1;
    v136 = 16 * v134;
    while (*((_DWORD *)v135 - 2))
    {
      v135 += 2;
      v136 -= 16;
      if (!v136)
        goto LABEL_206;
    }
    if (*v135)
    {
      v137 = *(_QWORD *)(a2 + 80);
      if (v137)
        v138 = v137 - 24;
      else
        v138 = 0;
      v139 = *(_QWORD *)(v138 + 40);
      if (v139)
        v140 = v139 - 24;
      else
        v140 = 0;
      if (*(unsigned __int8 *)(v140 + 16) - 29 >= 0xB)
        v140 = 0;
      v120 = *(void **)(v140 + 48);
      __p = v120;
      if (v120)
      {
        llvm::MetadataTracking::track((uint64_t)&__p, (unsigned __int8 *)v120, 2);
        v120 = __p;
        if (__p)
        {
          v508 = (unsigned __int8 *)__p;
          llvm::MetadataTracking::track((uint64_t)&v508, (unsigned __int8 *)__p, 2);
          v141 = *(unsigned __int8 **)(v113 + 48);
          if (v141)
            llvm::MetadataTracking::untrack(v113 + 48, v141);
          v142 = v508;
          *(_QWORD *)(v113 + 48) = v508;
          if (v142)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v508, v142, v113 + 48);
            v508 = 0;
          }
          v120 = __p;
          v121 = a3;
          if (__p)
            llvm::MetadataTracking::untrack((uint64_t)&__p, (unsigned __int8 *)__p);
        }
      }
    }
  }
LABEL_206:
  v143 = (uint64_t *)(v121 + 40);
  *(_QWORD *)(v113 + 40) = v121;
  *(_WORD *)(v121 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v113 + 23) & 0x10) != 0)
  {
    v452 = *(_QWORD *)(v121 + 56);
    if (v452)
    {
      v453 = *(llvm::ValueSymbolTable **)(v452 + 104);
      if (v453)
        llvm::ValueSymbolTable::reinsertValue(v453, (llvm::Value *)v113);
    }
  }
  v144 = *v143;
  *(_QWORD *)(v113 + 24) = *v143;
  *(_QWORD *)(v113 + 32) = v143;
  *(_QWORD *)(v144 + 8) = v116;
  *v143 = v116;
  if ((_DWORD)v515)
  {
    v145 = (int *)v514;
    v146 = 4 * v515;
    do
    {
      v147 = *v145++;
      *(_QWORD *)(v113 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v113 + 64), **(uint64_t ***)v113, v147 + 1, 63);
      *(_QWORD *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a2 + 112), **(uint64_t ***)a2, v147 + 1, 63);
      v146 -= 4;
    }
    while (v146);
  }
  v470 = (llvm::Value *)v113;
  v148 = *(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24);
  if ((v148 & 0x7FFFFFFF8) != 0)
  {
    v469 = (char **)(v121 + 40);
    v162 = 0;
    v485 = 0;
    v149 = 0;
    v163 = 0;
    v491 = 0;
    v164 = a1;
    v480 = (v148 >> 3);
    v473 = (uint64_t **)(v477 + 1);
    v475 = v495;
    while (1)
    {
      if (!*(_BYTE *)(v164 + 8) || !v518)
        goto LABEL_221;
      v165 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8 * v162);
      v166 = ((v165 >> 4) ^ (v165 >> 9)) & (v518 - 1);
      v167 = *(_QWORD *)(v517[0] + 8 * v166);
      if (v165 != v167)
      {
        v235 = 1;
        while (v167 != -4096)
        {
          v236 = v166 + v235++;
          v166 = v236 & (v518 - 1);
          v167 = *(_QWORD *)(v517[0] + 8 * v166);
          if (v165 == v167)
            goto LABEL_220;
        }
LABEL_221:
        v168 = v500[v485++];
        goto LABEL_222;
      }
LABEL_220:
      if (v166 == v518)
        goto LABEL_221;
      NullValue = 0;
      v525 = 0;
      NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v489 + 1960), (llvm::Type *)v120);
      v200 = *(llvm::ConstantInt **)(*(_QWORD *)v489 + 1960);
      v201 = *(_DWORD *)(*(_QWORD *)v489 + 1968);
      LODWORD(v510) = v201 >> 8;
      if (v201 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__p, v475, 0);
      }
      else
      {
        if (v201 <= 0xFF)
          v202 = 0;
        else
          v202 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v201);
        __p = (void *)(v202 & v475);
      }
      v203 = llvm::ConstantInt::get(v200, (llvm::LLVMContext *)&__p, v199);
      if (v510 >= 0x41 && __p)
        MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
      v525 = v203;
      v204 = *(uint64_t ****)(*(_QWORD *)(a5 + 24) + 8 * v162);
      if ((*((_BYTE *)v204 + 23) & 0x10) == 0)
      {
        v214 = 0;
        v215 = &byte_1C871356D;
        goto LABEL_278;
      }
      v205 = ***v204;
      v206 = *(_QWORD *)(v205 + 152);
      v207 = *(unsigned int *)(v205 + 168);
      if (!(_DWORD)v207)
        goto LABEL_276;
      LODWORD(v208) = (v207 - 1) & ((v204 >> 4) ^ (v204 >> 9));
      v209 = (uint64_t ****)(v206 + 16 * v208);
      v210 = *v209;
      if (*v209 != v204)
        break;
LABEL_277:
      v213 = v209[1];
      v216 = *v213;
      v215 = (char *)(v213 + 2);
      v214 = v216;
LABEL_278:
      v513 = 1283;
      __p = "gep_reload_";
      v511 = v215;
      v512 = v214;
      v217 = (char *)operator new(0xB0uLL);
      v218 = v217;
      v219 = 0;
      *((_DWORD *)v217 + 29) = *((_DWORD *)v217 + 29) & 0x38000000 | 3;
      do
      {
        v220 = &v217[v219];
        *(_QWORD *)v220 = 0;
        *((_QWORD *)v220 + 1) = 0;
        *((_QWORD *)v220 + 2) = 0;
        *((_QWORD *)v220 + 3) = v217 + 96;
        v219 += 32;
      }
      while (v219 != 96);
      v471 = (uint64_t ***)(v217 + 96);
      sub_1C4774650(v488, v477, (llvm::Value *)&NullValue, 2);
      *(_OWORD *)(v218 + 120) = 0u;
      v222 = v218 + 120;
      *((_QWORD *)v218 + 12) = v223;
      *((_QWORD *)v218 + 13) = 0;
      v224 = *((_DWORD *)v218 + 29) & 0xC0000000 | 3;
      *((_DWORD *)v218 + 28) = 62;
      *((_DWORD *)v218 + 29) = v224;
      *(_OWORD *)(v218 + 136) = 0u;
      *((_DWORD *)v218 + 38) = 0;
      *((_QWORD *)v218 + 20) = v488;
      v225 = 1;
      v226 = v488;
      do
      {
        if (v225 == 2)
          break;
        v226 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(v226, (llvm::Type *)(&NullValue)[v225++], v221);
      }
      while (v226);
      *((_QWORD *)v218 + 21) = v226;
      v227 = *((_DWORD *)v218 + 29) & 0x7FFFFFF;
      v228 = -v227;
      v168 = (llvm::Value *)v471;
      v229 = (uint64_t **)&v471[-4 * v227];
      if (*v229)
      {
        v237 = &v471[4 * v228];
        v239 = v237[2];
        v238 = v237 + 2;
        *v239 = (uint64_t *)*(v238 - 1);
        v240 = *(v238 - 1);
        if (v240)
          *(_QWORD *)(v240 + 16) = *v238;
      }
      *v229 = v477;
      if (v477)
      {
        v230 = *v473;
        v231 = &v471[4 * v228];
        v231[1] = (uint64_t **)*v473;
        if (v230)
          v230[2] = (uint64_t)(v231 + 1);
        v231[2] = v473;
        *v473 = (uint64_t *)v229;
      }
      sub_1C5382FD4((uint64_t)&v522, (uint64_t *)&NullValue, v526, (uint64_t)&v471[-4 * (*((_DWORD *)v218 + 29) & 0x7FFFFFF) + 4]);
      llvm::Value::setName(v471, (uint64_t)&__p);
      *((_QWORD *)v218 + 17) = a3;
      *(_WORD *)(a3 + 18) &= ~0x8000u;
      if ((v218[119] & 0x10) != 0)
      {
        v233 = *(_QWORD *)(a3 + 56);
        if (v233)
        {
          v234 = *(llvm::ValueSymbolTable **)(v233 + 104);
          if (v234)
            llvm::ValueSymbolTable::reinsertValue(v234, (llvm::Value *)v471);
        }
      }
      v232 = *v469;
      *((_QWORD *)v218 + 15) = *v469;
      *((_QWORD *)v218 + 16) = v469;
      *((_QWORD *)v232 + 1) = v222;
      *v469 = v222;
      ++v475;
      v164 = a1;
LABEL_222:
      v169 = operator new(0x60uLL);
      v170 = (llvm::Value *)(v169 + 8);
      v169[13] = v169[13] & 0x38000000 | 1;
      *(_QWORD *)v169 = 0;
      *((_QWORD *)v169 + 1) = 0;
      *((_QWORD *)v169 + 2) = 0;
      *((_QWORD *)v169 + 3) = v169 + 8;
      v171 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8 * v162);
      v172 = *(llvm::Type **)v171;
      if ((*(_BYTE *)(v171 + 23) & 0x10) == 0)
      {
        v182 = 0;
        v183 = &byte_1C871356D;
        goto LABEL_231;
      }
      v173 = **(_QWORD **)v172;
      v174 = *(_QWORD *)(v173 + 152);
      v175 = *(unsigned int *)(v173 + 168);
      if (!(_DWORD)v175)
        goto LABEL_229;
      LODWORD(v176) = (v175 - 1) & ((v171 >> 4) ^ (v171 >> 9));
      v177 = (uint64_t *)(v174 + 16 * v176);
      v178 = *v177;
      if (*v177 != v171)
      {
        v179 = 1;
        while (v178 != -4096)
        {
          v180 = v176 + v179++;
          v176 = v180 & (v175 - 1);
          v178 = *(_QWORD *)(v174 + 16 * v176);
          if (v178 == v171)
          {
            v177 = (uint64_t *)(v174 + 16 * v176);
            goto LABEL_230;
          }
        }
LABEL_229:
        v177 = (uint64_t *)(v174 + 16 * v175);
      }
LABEL_230:
      v181 = (_QWORD *)v177[1];
      v184 = (_BYTE *)*v181;
      v183 = (char *)(v181 + 2);
      v182 = v184;
LABEL_231:
      v513 = 773;
      __p = v183;
      v510 = v182;
      v511 = ".reload";
      llvm::LoadInst::LoadInst((llvm::LoadInst *)(v169 + 8), v172, v168, (const llvm::Twine *)&__p, 0, (llvm::BasicBlock *)a3);
      if (v163 >= v491)
      {
        v185 = v163 - v149;
        v186 = v185 + 1;
        if ((unint64_t)(v185 + 1) >> 61)
          goto LABEL_570;
        if (((char *)v491 - (char *)v149) >> 2 > v186)
          v186 = ((char *)v491 - (char *)v149) >> 2;
        if ((unint64_t)((char *)v491 - (char *)v149) >= 0x7FFFFFFFFFFFFFF8)
          v187 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v187 = v186;
        if (v187)
        {
          if (v187 >> 61)
            goto LABEL_571;
          v188 = (char *)operator new(8 * v187);
        }
        else
        {
          v188 = 0;
        }
        v189 = (llvm::Value **)&v188[8 * v185];
        *v189 = v170;
        v190 = v189 + 1;
        while (v163 != v149)
        {
          v191 = *--v163;
          *--v189 = v191;
        }
        v491 = (llvm::Value **)&v188[8 * v187];
        if (v149)
          operator delete(v149);
        v149 = v189;
        v163 = v190;
        v164 = a1;
      }
      else
      {
        *v163++ = v170;
      }
      v192 = 0;
      v193 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 24) + 8 * v162) + 8);
      v510 = 0;
      v511 = 0;
      __p = 0;
      if (v193)
      {
        v192 = 0;
        v194 = v193;
        do
        {
          ++v192;
          v194 = *(_QWORD *)(v194 + 8);
        }
        while (v194);
      }
      sub_1C574ECB0(&__p, v193, 0, v192);
      v195 = __p;
      if (((v510 - (_BYTE *)__p) & 0x7FFFFFFF8) != 0)
      {
        v196 = 0;
        v197 = ((unint64_t)(v510 - (_BYTE *)__p) >> 3);
        do
        {
          v198 = (llvm::User *)*((_QWORD *)__p + v196);
          NullValue = (llvm::Value **)*((_QWORD *)v198 + 5);
          v522 = 0;
          if ((sub_1C4E36498((uint64_t *)(a1 + 56), &NullValue, &v522) & 1) == 0)
            llvm::User::replaceUsesOfWith(v198, *(llvm::Value **)(*(_QWORD *)(a5 + 24) + 8 * v162), v170);
          ++v196;
        }
        while (v197 != v196);
        v195 = __p;
        v164 = a1;
      }
      if (v195)
      {
        v510 = v195;
        operator delete(v195);
      }
      if (++v162 == v480)
        goto LABEL_212;
    }
    v211 = 1;
    while (v210 != (uint64_t ***)-4096)
    {
      v212 = v208 + v211++;
      v208 = v212 & (v207 - 1);
      v210 = *(uint64_t ****)(v206 + 16 * v208);
      if (v210 == v204)
      {
        v209 = (uint64_t ****)(v206 + 16 * v208);
        goto LABEL_277;
      }
    }
LABEL_276:
    v209 = (uint64_t ****)(v206 + 16 * v207);
    goto LABEL_277;
  }
  v149 = 0;
LABEL_212:
  v150 = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v489 + 1936), (llvm::Type *)v120);
  v151 = operator new(0x48uLL);
  v151[7] = v151[7] & 0x38000000 | 0x40000000;
  v474 = (unint64_t)v151;
  v478 = (llvm::SwitchInst *)(v151 + 2);
  *(_QWORD *)v151 = 0;
  v152 = (llvm::Value *)v150;
  v153 = a1;
  llvm::SwitchInst::SwitchInst((llvm::SwitchInst *)(v151 + 2), v152, (llvm::BasicBlock *)a3, 0, (llvm::BasicBlock *)a3);
  v525 = 0;
  v526[0] = 0;
  NullValue = &v525;
  v155 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v155)
  {
    v241 = 0;
    v242 = *(uint64_t ***)(a1 + 120);
    v243 = &v242[v155];
    v486 = (uint64_t *)(a2 + 72);
    v492 = v243;
    while (1)
    {
      v244 = *v242;
      v507 = v244;
      __p = v244;
      v522 = 0;
      if ((sub_1C4E36498((uint64_t *)(a1 + 56), &__p, &v522) & 1) == 0)
      {
        v245 = sub_1C506577C((uint64_t **)&NullValue, (unint64_t)v244, &v507);
        if (!v245[5])
          break;
      }
LABEL_306:
      if (++v242 == v243)
        goto LABEL_213;
    }
    v246 = v245;
    if ((*((_BYTE *)v244 + 23) & 0x10) == 0)
    {
      v256 = 0;
      v257 = &byte_1C871356D;
      goto LABEL_317;
    }
    v247 = **(_QWORD **)*v244;
    v248 = *(_QWORD *)(v247 + 152);
    v249 = *(unsigned int *)(v247 + 168);
    if ((_DWORD)v249)
    {
      LODWORD(v250) = (v249 - 1) & ((v244 >> 4) ^ (v244 >> 9));
      v251 = (uint64_t **)(v248 + 16 * v250);
      v252 = *v251;
      if (*v251 == v244)
      {
LABEL_316:
        v255 = v251[1];
        v258 = (_BYTE *)*v255;
        v257 = (char *)(v255 + 2);
        v256 = v258;
LABEL_317:
        v513 = 773;
        __p = v257;
        v510 = v256;
        v511 = ".exitStub";
        v259 = operator new();
        *(_QWORD *)v259 = *(_QWORD *)v489 + 1600;
        *(_QWORD *)(v259 + 8) = 0;
        v260 = *(_DWORD *)(v259 + 20) & 0xC0000000;
        *(_QWORD *)(v259 + 24) = 0;
        v261 = v259 + 24;
        *(_DWORD *)(v259 + 16) = 22;
        *(_DWORD *)(v259 + 20) = v260;
        *(_QWORD *)(v259 + 32) = 0;
        *(_QWORD *)(v259 + 40) = v259 + 40;
        *(_QWORD *)(v259 + 48) = v259 + 40;
        *(_QWORD *)(v259 + 56) = 0;
        if (a2)
        {
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v486, (_QWORD *)v259);
          v262 = *v486;
          *(_QWORD *)(v259 + 24) = *v486;
          *(_QWORD *)(v259 + 32) = v486;
          *(_QWORD *)(v262 + 8) = v261;
          *v486 = v261;
        }
        llvm::Value::setName((uint64_t ***)v259, (uint64_t)&__p);
        v246[5] = (uint64_t *)v259;
        v264 = *(_DWORD *)(a1 + 104);
        if (v264 >= 2)
        {
          if (v264 == 2)
          {
            v266 = v241 == 0;
            v267 = *(llvm::ConstantInt **)(*(_QWORD *)v489 + 1888);
            v268 = *(unsigned int *)(*(_QWORD *)v489 + 1896);
          }
          else
          {
            v266 = v241;
            v267 = *(llvm::ConstantInt **)(*(_QWORD *)v489 + 1936);
            v268 = *(unsigned int *)(*(_QWORD *)v489 + 1944);
          }
          LODWORD(v510) = v268 >> 8;
          if (v268 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__p, v266, 0);
          }
          else
          {
            if (v268 <= 0xFF)
              v269 = 0;
            else
              v269 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v268);
            __p = (void *)(v269 & v266);
          }
          v265 = llvm::ConstantInt::get(v267, (llvm::LLVMContext *)&__p, v263);
          if (v510 >= 0x41 && __p)
            MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
        }
        else
        {
          v265 = 0;
        }
        v270 = (llvm::BasicBlock *)v246[5];
        v271 = v265 != 0;
        if (v265)
          v272 = 96;
        else
          v272 = 64;
        v273 = (llvm::ReturnInst *)operator new(v272);
        v274 = (llvm::ReturnInst *)((char *)v273 + 32 * v271);
        *((_DWORD *)v274 + 5) = *((_DWORD *)v274 + 5) & 0x38000000 | v271;
        if (v265)
        {
          do
          {
            *(_QWORD *)v273 = 0;
            *((_QWORD *)v273 + 1) = 0;
            *((_QWORD *)v273 + 2) = 0;
            *((_QWORD *)v273 + 3) = v274;
            v273 = (llvm::ReturnInst *)((char *)v273 + 32);
          }
          while (v273 != v274);
        }
        llvm::ReturnInst::ReturnInst(v274, v489, v265, v270);
        v276 = *(llvm::ConstantInt **)(*(_QWORD *)v489 + 1936);
        v277 = *(_DWORD *)(*(_QWORD *)v489 + 1944);
        LODWORD(v510) = v277 >> 8;
        if (v277 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v241, 0);
        }
        else
        {
          if (v277 <= 0xFF)
            v278 = 0;
          else
            v278 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v277);
          __p = (void *)(v278 & v241);
        }
        v243 = v492;
        v279 = llvm::ConstantInt::get(v276, (llvm::LLVMContext *)&__p, v275);
        if (v510 >= 0x41 && __p)
          MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
        ++v241;
        llvm::SwitchInst::addCase(v478, v279, (llvm::BasicBlock *)v244);
        v153 = a1;
        goto LABEL_306;
      }
      v253 = 1;
      while (v252 != (uint64_t *)-4096)
      {
        v254 = v250 + v253++;
        v250 = v254 & (v249 - 1);
        v252 = *(uint64_t **)(v248 + 16 * v250);
        if (v252 == v244)
        {
          v251 = (uint64_t **)(v248 + 16 * v250);
          goto LABEL_316;
        }
      }
    }
    v251 = (uint64_t **)(v248 + 16 * v249);
    goto LABEL_316;
  }
LABEL_213:
  v156 = *(_QWORD *)(v153 + 80);
  for (i = *(_QWORD *)(v153 + 88); v156 != i; v156 += 8)
  {
    v280 = *(_QWORD *)(*(_QWORD *)v156 + 40);
    if (v280 == *(_QWORD *)v156 + 40)
    {
      v282 = 0;
    }
    else
    {
      if (v280)
        v281 = v280 - 24;
      else
        v281 = 0;
      if (*(unsigned __int8 *)(v281 + 16) - 29 >= 0xB)
        v282 = 0;
      else
        v282 = v281;
    }
    v283 = *(unsigned __int8 *)(v282 + 16);
    if (v283 != 30)
      __asm { BR              X9 }
    if ((*(_DWORD *)(v282 + 20) & 0x7FFFFFF) == 3)
      v284 = 2;
    else
      v284 = 1;
    for (j = 0; j != v284; ++j)
    {
      __p = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v282, j);
      v522 = 0;
      if ((sub_1C4E36498((uint64_t *)(a1 + 56), &__p, &v522) & 1) == 0)
      {
        __p = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v282, j);
        v286 = sub_1C506577C((uint64_t **)&NullValue, (unint64_t)__p, (uint64_t **)&__p);
        llvm::Instruction::setSuccessor((llvm::Instruction *)v282, j, (llvm::BasicBlock *)v286[5]);
      }
    }
  }
  if ((*(_WORD *)(a2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a2);
    v158 = v468;
    v484 = *(_QWORD *)(a2 + 88);
    v159 = (llvm::Value *)(v484 + 40 * v468);
    v160 = v500;
    v161 = a1;
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      v484 = *(_QWORD *)(a2 + 88);
    }
  }
  else
  {
    v158 = v468;
    v484 = *(_QWORD *)(a2 + 88);
    v159 = (llvm::Value *)(v484 + 40 * v468);
    v160 = v500;
    v161 = a1;
  }
  v287 = *(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24);
  if ((v287 & 0x7FFFFFFF8) != 0)
  {
    v292 = 0;
    v293 = (uint64_t *)(v484 + 40 * (v504 + v158));
    v294 = (v287 >> 3);
    v481 = v294;
    v505 = v293;
    v502 = (llvm::BasicBlock *)(v293 + 1);
    do
    {
      v295 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8 * v292);
      v296 = *(unsigned __int8 *)(v295 + 16);
      if (v295)
        v297 = v296 >= 0x1C;
      else
        v297 = 0;
      if (v297)
      {
        if (v296 == 83)
        {
          v302 = *(_QWORD *)(v295 + 40);
          v299 = (uint64_t *)(v302 + 40);
          for (k = *(_QWORD *)(v302 + 48); (uint64_t *)k != v299; k = *(_QWORD *)(k + 8))
          {
            v303 = k - 24;
            if (!k)
              v303 = 0;
            if (*(_BYTE *)(v303 + 16) != 83)
            {
LABEL_397:
              v305 = *(unsigned __int8 *)(k - 8) - 38;
              v306 = v305 > 0x38;
              v307 = (1 << v305) & 0x100060000000001;
              if (!v306 && v307 != 0)
              {
                v304 = (uint64_t **)(k + 8);
                goto LABEL_402;
              }
              v299 = (uint64_t *)k;
              break;
            }
          }
        }
        else if (v296 == 33)
        {
          v298 = *(_QWORD *)(v295 - 96);
          v299 = (uint64_t *)(v298 + 40);
          for (k = *(_QWORD *)(v298 + 48); (uint64_t *)k != v299; k = *(_QWORD *)(k + 8))
          {
            v301 = k - 24;
            if (!k)
              v301 = 0;
            if (*(_BYTE *)(v301 + 16) != 83)
              goto LABEL_397;
          }
        }
        else
        {
          v304 = (uint64_t **)(v295 + 32);
LABEL_402:
          v299 = *v304;
        }
        if (v299)
          v309 = (llvm::Instruction *)(v299 - 3);
        else
          v309 = 0;
        if (*(_BYTE *)(v161 + 8) && v518)
        {
          v310 = (v518 - 1) & ((v295 >> 4) ^ (v295 >> 9));
          v311 = *(_QWORD *)(v517[0] + 8 * v310);
          if (v295 == v311)
          {
LABEL_409:
            if (v310 != v518)
            {
              v522 = 0;
              v523 = 0;
              v522 = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v489 + 1960), v154);
              v314 = *(llvm::ConstantInt **)(*(_QWORD *)v489 + 1960);
              v315 = *(_DWORD *)(*(_QWORD *)v489 + 1968);
              LODWORD(v510) = v315 >> 8;
              if (v315 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&__p, v495, 0);
              }
              else
              {
                if (v315 <= 0xFF)
                  v316 = 0;
                else
                  v316 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v315);
                __p = (void *)(v316 & v495);
              }
              v317 = llvm::ConstantInt::get(v314, (llvm::LLVMContext *)&__p, v313);
              if (v510 >= 0x41 && __p)
                MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
              v523 = v317;
              v318 = *(uint64_t ****)(*(_QWORD *)(a5 + 24) + 8 * v292);
              v493 = v159;
              if ((*((_BYTE *)v318 + 23) & 0x10) != 0)
              {
                v319 = ***v318;
                v320 = *(_QWORD *)(v319 + 152);
                v321 = *(unsigned int *)(v319 + 168);
                if (!(_DWORD)v321)
                  goto LABEL_427;
                LODWORD(v322) = (v321 - 1) & ((v318 >> 4) ^ (v318 >> 9));
                v323 = (uint64_t ****)(v320 + 16 * v322);
                v324 = *v323;
                if (*v323 != v318)
                {
                  v325 = 1;
                  while (v324 != (uint64_t ***)-4096)
                  {
                    v326 = v322 + v325++;
                    v322 = v326 & (v321 - 1);
                    v324 = *(uint64_t ****)(v320 + 16 * v322);
                    if (v324 == v318)
                    {
                      v323 = (uint64_t ****)(v320 + 16 * v322);
                      goto LABEL_428;
                    }
                  }
LABEL_427:
                  v323 = (uint64_t ****)(v320 + 16 * v321);
                }
LABEL_428:
                v327 = v323[1];
                v330 = *v327;
                v329 = (char *)(v327 + 2);
                v328 = v330;
              }
              else
              {
                v328 = 0;
                v329 = &byte_1C871356D;
              }
              v513 = 1283;
              __p = "gep_";
              v511 = v329;
              v512 = v328;
              v331 = operator new(0xB0uLL);
              v332 = v331;
              v333 = 0;
              v334 = (llvm::Value *)(v331 + 24);
              v331[29] = v331[29] & 0x38000000 | 3;
              do
              {
                v335 = &v331[v333];
                *v335 = 0;
                v335[1] = 0;
                v335[2] = 0;
                v335[3] = v334;
                v333 += 8;
              }
              while (v333 != 24);
              v336 = v488;
              sub_1C4774650(v488, v505, (llvm::Value *)&v522, 2);
              *(_OWORD *)(v332 + 30) = 0u;
              v338 = v332 + 30;
              *((_QWORD *)v332 + 12) = v339;
              *((_QWORD *)v332 + 13) = 0;
              v340 = v332[29] & 0xC0000000 | 3;
              v332[28] = 62;
              v332[29] = v340;
              *(_OWORD *)(v332 + 34) = 0u;
              v332[38] = 0;
              if (v299)
              {
                v349 = v299[2];
                *((_QWORD *)v332 + 17) = v349;
                *(_WORD *)(v349 + 18) &= ~0x8000u;
                if ((*((_BYTE *)v332 + 119) & 0x10) != 0)
                {
                  v351 = *(_QWORD *)(v349 + 56);
                  if (v351)
                  {
                    v352 = *(llvm::ValueSymbolTable **)(v351 + 104);
                    if (v352)
                      llvm::ValueSymbolTable::reinsertValue(v352, v334);
                  }
                }
                v350 = *v299;
                *((_QWORD *)v332 + 15) = *v299;
                *((_QWORD *)v332 + 16) = v299;
                *(_QWORD *)(v350 + 8) = v338;
                *v299 = (uint64_t)v338;
                v336 = v488;
              }
              *((_QWORD *)v332 + 20) = v336;
              v341 = 8;
              v342 = v336;
              v294 = v481;
              do
              {
                if (v341 == 16)
                  break;
                v342 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(v342, *(llvm::Value **)((char *)&v522 + v341), v337);
                v341 += 8;
              }
              while (v342);
              *((_QWORD *)v332 + 21) = v342;
              v343 = v332[29] & 0x7FFFFFF;
              v344 = -v343;
              v345 = (uint64_t **)((char *)v334 - 32 * v343);
              if (*v345)
              {
                v355 = (char *)v334 + 32 * v344;
                v357 = (_QWORD *)*((_QWORD *)v355 + 2);
                v356 = v355 + 16;
                *v357 = *(v356 - 1);
                v358 = *(v356 - 1);
                if (v358)
                  *(_QWORD *)(v358 + 16) = *v356;
              }
              *v345 = v505;
              if (v484)
              {
                v346 = *(_QWORD *)v502;
                v347 = (char *)v334 + 32 * v344;
                *((_QWORD *)v347 + 1) = *(_QWORD *)v502;
                if (v346)
                  *(_QWORD *)(v346 + 16) = v347 + 8;
                *((_QWORD *)v347 + 2) = v502;
                *(_QWORD *)v502 = v345;
              }
              sub_1C5382FD4((uint64_t)&v507, (uint64_t *)&v522, (uint64_t *)&NullValue, (uint64_t)v334 - 32 * (v332[29] & 0x7FFFFFF) + 32);
              llvm::Value::setName((uint64_t ***)v334, (uint64_t)&__p);
              v348 = operator new(0x80uLL);
              v348[21] = v348[21] & 0x38000000 | 2;
              *(_QWORD *)v348 = 0;
              *((_QWORD *)v348 + 1) = 0;
              *((_QWORD *)v348 + 2) = 0;
              *((_QWORD *)v348 + 3) = v348 + 16;
              *((_QWORD *)v348 + 4) = 0;
              *((_QWORD *)v348 + 5) = 0;
              *((_QWORD *)v348 + 6) = 0;
              *((_QWORD *)v348 + 7) = v348 + 16;
              llvm::StoreInst::StoreInst((llvm::StoreInst *)(v348 + 16), *(llvm::Value **)(*(_QWORD *)(a5 + 24) + 8 * v292), v334, 0, v309);
              ++v495;
              v160 = v500;
              v161 = a1;
              v159 = v493;
              goto LABEL_411;
            }
          }
          else
          {
            v353 = 1;
            while (v311 != -4096)
            {
              v354 = v310 + v353++;
              v310 = v354 & (v518 - 1);
              v311 = *(_QWORD *)(v517[0] + 8 * v310);
              if (v295 == v311)
                goto LABEL_409;
            }
          }
        }
        v312 = operator new(0x80uLL);
        v312[21] = v312[21] & 0x38000000 | 2;
        *(_QWORD *)v312 = 0;
        *((_QWORD *)v312 + 1) = 0;
        *((_QWORD *)v312 + 2) = 0;
        *((_QWORD *)v312 + 3) = v312 + 16;
        *((_QWORD *)v312 + 4) = 0;
        *((_QWORD *)v312 + 5) = 0;
        *((_QWORD *)v312 + 6) = 0;
        *((_QWORD *)v312 + 7) = v312 + 16;
        llvm::StoreInst::StoreInst((llvm::StoreInst *)(v312 + 16), *(llvm::Value **)(*(_QWORD *)(a5 + 24) + 8 * v292), v159, 0, v309);
        v159 = (llvm::Value *)((char *)v159 + 40);
        v160 = v500;
      }
LABEL_411:
      ++v292;
    }
    while (v292 != v294);
  }
  v288 = *(_DWORD *)(v161 + 104);
  if (!v288)
  {
    v361 = (_QWORD *)v474;
    v362 = **(llvm::Constant ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v474 + 48) + 56) + 24) + 16);
    if (*((_BYTE *)v362 + 8) == 7)
    {
      v363 = (llvm::ReturnInst *)operator new(0x40uLL);
      *((_DWORD *)v363 + 5) &= 0x38000000u;
      llvm::ReturnInst::ReturnInst(v363, v489, 0, v478);
    }
    else
    {
      v380 = *(_DWORD *)(v474 + 28);
      if ((v380 & 0x40000000) != 0)
        v381 = *(llvm::Value ****)v474;
      else
        v381 = (llvm::Value ***)((char *)v478 - 32 * (v380 & 0x7FFFFFF));
      v443 = *v381;
      if (v362 == **v381)
      {
        v444 = operator new(0x60uLL);
        v444[13] = v444[13] & 0x38000000 | 1;
        *(_QWORD *)v444 = 0;
        *((_QWORD *)v444 + 1) = 0;
        *((_QWORD *)v444 + 2) = 0;
        *((_QWORD *)v444 + 3) = v444 + 8;
        v445 = (llvm::ReturnInst *)(v444 + 8);
      }
      else
      {
        v443 = llvm::Constant::getNullValue(v362, v154);
        v446 = v443 != 0;
        if (v443)
          v447 = 96;
        else
          v447 = 64;
        v448 = (llvm::ReturnInst *)operator new(v447);
        v445 = (llvm::ReturnInst *)((char *)v448 + 32 * v446);
        *((_DWORD *)v445 + 5) = *((_DWORD *)v445 + 5) & 0x38000000 | v446;
        if (v443)
        {
          do
          {
            *(_QWORD *)v448 = 0;
            *((_QWORD *)v448 + 1) = 0;
            *((_QWORD *)v448 + 2) = 0;
            *((_QWORD *)v448 + 3) = v445;
            v448 = (llvm::ReturnInst *)((char *)v448 + 32);
          }
          while (v448 != v445);
        }
      }
      llvm::ReturnInst::ReturnInst(v445, v489, (llvm::Value *)v443, v478);
      v361 = (_QWORD *)v474;
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v361[6] + 40, (uint64_t ***)v478);
    v449 = v361[4];
    v450 = (_QWORD *)v361[5];
    *v450 = v449;
    *(_QWORD *)(v449 + 8) = v450;
    v361[4] = 0;
    v361[5] = 0;
    v390 = v478;
    goto LABEL_536;
  }
  v289 = v288 - 1;
  if (v288 == 1)
  {
    v359 = *(_DWORD *)(v474 + 28);
    if ((v359 & 0x40000000) != 0)
      v360 = *(llvm::Value ****)v474;
    else
      v360 = (llvm::Value ***)((char *)v478 - 32 * (v359 & 0x7FFFFFF));
    v369 = v360[12];
    v370 = (char *)operator new(0x60uLL);
    *((_DWORD *)v370 + 13) = *((_DWORD *)v370 + 13) & 0x38000000 | 1;
    *((_QWORD *)v370 + 1) = 0;
    *((_QWORD *)v370 + 2) = 0;
    *(_QWORD *)v370 = 0;
    *((_QWORD *)v370 + 4) = **(_QWORD **)*v369 + 1576;
    *((_QWORD *)v370 + 3) = v370 + 32;
    *((_QWORD *)v370 + 5) = 0;
    v370[48] = 30;
    v370[49] = 0;
    *((_WORD *)v370 + 25) = 0;
    *((_DWORD *)v370 + 13) = 1;
    *(_OWORD *)(v370 + 56) = 0u;
    v371 = v370 + 56;
    *(_OWORD *)(v370 + 72) = 0u;
    *((_DWORD *)v370 + 22) = 0;
    v372 = *(_QWORD *)(v474 + 48);
    v373 = (uint64_t *)(v474 + 32);
    *((_QWORD *)v370 + 9) = v372;
    *(_WORD *)(v372 + 18) &= ~0x8000u;
    if ((v370[55] & 0x10) != 0
      && (v461 = *(_QWORD *)(v372 + 56)) != 0
      && (v462 = *(llvm::ValueSymbolTable **)(v461 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v462, (llvm::Value *)(v370 + 32));
      v463 = *(_QWORD *)v370;
      v464 = *v373;
      *((_QWORD *)v370 + 7) = *v373;
      *((_QWORD *)v370 + 8) = v373;
      *(_QWORD *)(v464 + 8) = v371;
      *v373 = (uint64_t)v371;
      if (v463)
      {
        **((_QWORD **)v370 + 2) = *((_QWORD *)v370 + 1);
        v465 = *((_QWORD *)v370 + 1);
        if (v465)
          *(_QWORD *)(v465 + 16) = *((_QWORD *)v370 + 2);
      }
    }
    else
    {
      v374 = *v373;
      *((_QWORD *)v370 + 7) = *v373;
      *((_QWORD *)v370 + 8) = v373;
      *(_QWORD *)(v374 + 8) = v371;
      *v373 = (uint64_t)v371;
    }
    *(_QWORD *)v370 = v369;
    v377 = v369[1];
    v376 = v369 + 1;
    v375 = v377;
    *((_QWORD *)v370 + 1) = v377;
    if (v377)
      *((_QWORD *)v375 + 2) = v370 + 8;
    *((_QWORD *)v370 + 2) = v376;
    *v376 = v370;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v474 + 48) + 40, (uint64_t ***)v478);
    v378 = *(_QWORD *)(v474 + 32);
    v379 = *(_QWORD **)(v474 + 40);
    *v379 = v378;
    *(_QWORD *)(v378 + 8) = v379;
    *v373 = 0;
    *(_QWORD *)(v474 + 40) = 0;
    goto LABEL_479;
  }
  if (v288 == 2)
  {
    v290 = *(_DWORD *)(v474 + 28);
    if ((v290 & 0x40000000) != 0)
      v291 = *(llvm::Value ****)v474;
    else
      v291 = (llvm::Value ***)((char *)v478 - 32 * (v290 & 0x7FFFFFF));
    v382 = (llvm::BasicBlock *)v291[12];
    v383 = (llvm::BasicBlock *)v291[20];
    v384 = operator new(0xA0uLL);
    v385 = 0;
    v386 = (llvm::BranchInst *)(v384 + 24);
    v384[29] = v384[29] & 0x38000000 | 3;
    do
    {
      v387 = &v384[v385];
      *v387 = 0;
      v387[1] = 0;
      v387[2] = 0;
      v387[3] = v386;
      v385 += 8;
    }
    while (v385 != 24);
    llvm::BranchInst::BranchInst(v386, v382, v383, v470, v478);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v474 + 48) + 40, (uint64_t ***)v478);
    v388 = *(_QWORD *)(v474 + 32);
    v389 = *(_QWORD **)(v474 + 40);
    *v389 = v388;
    *(_QWORD *)(v388 + 8) = v389;
    *(_QWORD *)(v474 + 32) = 0;
    *(_QWORD *)(v474 + 40) = 0;
LABEL_479:
    v390 = v478;
LABEL_536:
    llvm::Value::deleteValue(v390);
    goto LABEL_537;
  }
  v364 = *(_DWORD *)(v474 + 28);
  if ((v364 & 0x40000000) != 0)
    v365 = *(llvm::Value ****)v474;
  else
    v365 = (llvm::Value ***)((char *)v478 - 32 * (v364 & 0x7FFFFFF));
  if (*v365)
  {
    *v365[2] = (llvm::Value *)v365[1];
    v459 = v365[1];
    if (v459)
      v459[2] = (llvm::Value *)v365[2];
  }
  *v365 = (llvm::Value **)v470;
  v366 = *((_QWORD *)v470 + 1);
  v365[1] = (llvm::Value **)v366;
  if (v366)
    *(_QWORD *)(v366 + 16) = v365 + 1;
  v365[2] = (llvm::Value **)v467;
  *v467 = v365;
  v367 = *(_DWORD *)(v474 + 28);
  if ((v367 & 0x40000000) != 0)
    v368 = *(llvm::Value ****)v474;
  else
    v368 = (llvm::Value ***)((char *)v478 - 32 * (v367 & 0x7FFFFFF));
  v391 = v368[4 * ((2 * v288) | 1u)];
  v392 = v368 + 4;
  if (v368[4])
  {
    *v368[6] = (llvm::Value *)v368[5];
    v460 = v368[5];
    if (v460)
      v460[2] = (llvm::Value *)v368[6];
  }
  *v392 = v391;
  if (v391)
  {
    v395 = (llvm::Value **)v391[1];
    v393 = v391 + 1;
    v394 = v395;
    v368[5] = v395;
    if (v395)
      v394[2] = (llvm::Value *)(v368 + 5);
    v368[6] = v393;
    *v393 = (llvm::Value *)v392;
  }
  llvm::SwitchInst::removeCase((uint64_t)v478, (uint64_t)v478, v289);
LABEL_537:
  sub_1C5EDFBE0((uint64_t *)v498, v160, (v13 - (char *)v160) >> 3, v160, (v13 - (char *)v160) >> 3, (uint64_t)v470);
  sub_1C6143384(v525);
  if (v514 != &v516)
    free(v514);
  if (v519)
  {
    v520 = v519;
    operator delete(v519);
  }
  MEMORY[0x1CAA32FB4](v517[0], 8);
  if (v149)
    operator delete(v149);
  if (v160)
    operator delete(v160);
  if (v7)
    operator delete(v7);
  return v470;
}

uint64_t sub_1C5EDFBE0(uint64_t *a1, llvm::Value **a2, uint64_t a3, llvm::Value **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  const llvm::APInt *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Declaration;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22[5];
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  llvm::ValueHandleBase *Signed;
  uint64_t v27;
  uint64_t v28;

  v28 = a6;
  v12 = *a1;
  v13 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)*a1 + 1912), 0);
  v27 = v13;
  Signed = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(*(_QWORD *)v12 + 1984), -1, v14);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = *(_QWORD *)(v15 + 40);
  if (v16 == v15 + 40)
  {
    v17 = 0;
  }
  else
  {
    if (v16)
      v17 = v16 - 24;
    else
      v17 = 0;
    if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB)
      v17 = 0;
  }
  v25 = v17;
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  v22[0] = v23;
  v22[1] = &v27;
  v22[2] = &v28;
  v22[3] = (uint64_t *)&Signed;
  v22[4] = &v25;
  if (a3)
  {
    v21 = v13;
    Declaration = llvm::Intrinsic::getDeclaration(a1, 168, &v21, 1);
    sub_1C5EE1B34(v22, Declaration, a2, a3, 1);
  }
  if (a5)
  {
    v21 = v27;
    v19 = llvm::Intrinsic::getDeclaration(a1, 167, &v21, 1);
    sub_1C5EE1B34(v22, v19, a4, a5, 0);
  }
  return MEMORY[0x1CAA32FB4](v23[0], 8);
}

uint64_t llvm::CodeExtractor::extractCodeRegion(uint64_t a1, unsigned int *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t *v10;
  llvm::BasicBlock **v11;
  llvm::BasicBlock *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  llvm::BasicBlock **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::BasicBlock *v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t ***v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  llvm::BasicBlock *v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  llvm::Value *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  const char **v63;
  const char *v64;
  const char **v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned int j;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t k;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t BlockFreq;
  unint64_t v87;
  unsigned int v88;
  BOOL v89;
  unsigned __int8 *v91;
  const char **v92;
  unsigned __int8 *v93;
  uint64_t v94;
  llvm::Instruction **v95;
  llvm::Instruction **v96;
  llvm::Instruction *v97;
  llvm::Instruction *v98;
  uint64_t *v99;
  uint64_t *v100;
  unsigned int v101;
  BOOL v102;
  uint64_t v103;
  llvm::Instruction **v105;
  llvm::Instruction **v106;
  llvm::BasicBlock *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  _QWORD *v121;
  llvm::BlockFrequencyInfoImplBase **v122;
  uint64_t *ProfileCountFromFreq;
  char v124;
  llvm::Value *v125;
  uint64_t v126;
  llvm::Function *v127;
  int v128;
  uint64_t *v129;
  llvm::BasicBlock *BlockForHoisting;
  llvm::BasicBlock *v131;
  llvm::Instruction *v132;
  __int16 v133;
  uint64_t m;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t *v147;
  char *v148;
  unint64_t v149;
  uint64_t n;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  uint64_t ****v171;
  uint64_t ***v172;
  uint64_t ****v173;
  int v174;
  BOOL v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  unsigned __int8 *v180;
  llvm::Instruction **v181;
  llvm::Instruction **v182;
  llvm::Instruction *v183;
  uint64_t v184;
  uint64_t mm;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  llvm::ValueSymbolTable *v191;
  const char **v192;
  const char *v193;
  uint64_t ****v194;
  const char *v195;
  uint64_t TypeArray;
  char *Impl;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  int v206;
  int v207;
  _QWORD *v208;
  unsigned __int8 *v209;
  size_t v210;
  size_t v211;
  _QWORD *v212;
  size_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  int v217;
  int v218;
  _QWORD *v219;
  unsigned __int8 *v220;
  size_t v221;
  size_t v222;
  void *v223;
  uint64_t ii;
  uint64_t v225;
  uint64_t jj;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _BOOL4 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  unsigned __int8 *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  int v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  unsigned __int8 *v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  unsigned __int8 *v252;
  _QWORD *v253;
  unsigned __int8 *v254;
  _QWORD *v255;
  uint64_t v256;
  size_t v257;
  unsigned __int8 *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  _QWORD *v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t **v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  size_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t kk;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned __int8 **v285;
  unsigned __int8 *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned __int8 **v289;
  uint64_t v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  _DWORD *i;
  unint64_t v294;
  llvm::BasicBlock *v295;
  unsigned int *v296;
  uint64_t v297;
  _QWORD *v298;
  unsigned __int8 *v299;
  _QWORD *v300;
  const char *v301;
  uint64_t *v302;
  llvm::Value *v303;
  llvm::MDNode *Function;
  _QWORD v305[2];
  int v306;
  void *__p;
  _BYTE *v308;
  uint64_t v309;
  llvm::BasicBlock *v310;
  _QWORD v311[2];
  int v312;
  void *v313;
  llvm::Instruction **v314;
  uint64_t v315;
  uint64_t v316[2];
  int v317;
  void *v318;
  llvm::Instruction **v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326[2];
  int v327;
  llvm::BasicBlock *v328;
  unsigned __int8 *v329;
  unsigned __int8 *v330;
  llvm::MDNode *v331;
  unsigned __int8 *v332;
  _QWORD v333[2];
  int v334;
  void *Successor;
  uint64_t v336;
  _BYTE v337[32];
  _QWORD v338[9];
  const char *v339;
  uint64_t *v340;
  __int16 v341;
  _QWORD v342[8];

  v342[6] = *MEMORY[0x1E0C80C00];
  if (!llvm::CodeExtractor::isEligible((llvm::CodeExtractor *)a1))
    return 0;
  v298 = a3;
  v300 = a4;
  v10 = (uint64_t *)(a1 + 56);
  v11 = *(llvm::BasicBlock ***)(a1 + 80);
  v12 = *v11;
  v328 = v12;
  v301 = (const char *)*((_QWORD *)v12 + 7);
  v296 = a2;
  if (*(_QWORD *)(a1 + 16) && (v13 = *((_QWORD *)v12 + 1)) != 0)
  {
    while (1)
    {
      v14 = *(_QWORD *)(v13 + 24);
      v15 = *(unsigned __int8 *)(v14 + 16);
      v16 = v14 && v15 >= 0x1C;
      if (v16 && v15 - 29 < 0xB)
        break;
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        goto LABEL_15;
    }
    v84 = 0;
LABEL_114:
    v85 = *(_QWORD *)(v14 + 40);
    v339 = (const char *)v85;
    v338[0] = 0;
    if ((sub_1C4E36498((uint64_t *)(a1 + 56), &v339, v338) & 1) == 0)
    {
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(a1 + 16), v85);
      LODWORD(v339) = llvm::BranchProbabilityInfo::getEdgeProbability(*(_QWORD *)(a1 + 24), v85, (uint64_t)v12);
      v87 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v339, BlockFreq);
      if (__CFADD__(v87, v84))
        v84 = -1;
      else
        v84 += v87;
    }
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        break;
      v14 = *(_QWORD *)(v13 + 24);
      v88 = *(unsigned __int8 *)(v14 + 16);
      if (v14)
        v89 = v88 >= 0x1C;
      else
        v89 = 0;
      if (v89 && v88 - 29 < 0xB)
        goto LABEL_114;
    }
    v294 = v84;
    v11 = *(llvm::BasicBlock ***)(a1 + 80);
  }
  else
  {
LABEL_15:
    v294 = 0;
  }
  v18 = *(llvm::BasicBlock ***)(a1 + 88);
  while (v11 != v18)
  {
    v19 = (uint64_t)*v11 + 40;
    v20 = *((_QWORD *)*v11 + 6);
    while (v20 != v19)
    {
      v21 = v20;
      v20 = *(_QWORD *)(v20 + 8);
      if (v21)
        v22 = v21 - 24;
      else
        v22 = 0;
      v23 = sub_1C4D9F8B4(v22);
      if (!v23)
        v22 = 0;
      if (v21 && v23)
      {
        v24 = *(_QWORD *)(a1 + 32);
        if (v24)
          llvm::AssumptionCache::unregisterAssumption(v24, v22);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v22 + 40) + 40, (uint64_t ***)v22);
        v25 = *(_QWORD *)(v22 + 24);
        v26 = *(_QWORD **)(v22 + 32);
        *v26 = v25;
        *(_QWORD *)(v25 + 8) = v26;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v22);
      }
    }
    ++v11;
  }
  llvm::CodeExtractor::splitReturnBlocks((llvm::CodeExtractor *)a1);
  v326[0] = 0;
  v326[1] = 0;
  v327 = 0;
  v321 = (char *)&v325;
  v322 = (char *)&v325;
  v323 = 1;
  v324 = 0;
  v27 = *(uint64_t **)(a1 + 80);
  v28 = *(uint64_t **)(a1 + 88);
  if (v27 == v28)
  {
    *(_DWORD *)(a1 + 104) = 0;
    i = (_DWORD *)(a1 + 104);
    goto LABEL_62;
  }
  do
  {
    v29 = *v27;
    v30 = *(_QWORD *)(*v27 + 40);
    if (v30 == *v27 + 40)
      goto LABEL_52;
    if (v30)
      v31 = v30 - 24;
    else
      v31 = 0;
    if (*(_BYTE *)(v31 + 16) == 30)
    {
      if ((*(_DWORD *)(v31 + 20) & 0x7FFFFFF) == 3)
        LODWORD(v8) = 2;
      else
        LODWORD(v8) = 1;
LABEL_41:
      v32 = 0;
      do
      {
        Successor = 0;
        Successor = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v31, v32);
        v339 = (const char *)Successor;
        v338[0] = 0;
        if ((sub_1C4E36498((uint64_t *)(a1 + 56), &v339, v338) & 1) == 0)
        {
          if (*(_QWORD *)(a1 + 16))
          {
            v33 = sub_1C61BEB98(v326, &Successor);
            v34 = llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(a1 + 16), v29);
            LODWORD(v339) = llvm::BranchProbabilityInfo::getEdgeProbability(*(_QWORD *)(a1 + 24), v29, (uint64_t)Successor);
            v35 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v339, v34);
            v36 = v33[1];
            v16 = __CFADD__(v35, v36);
            v37 = v35 + v36;
            if (v16)
              v37 = -1;
            v33[1] = v37;
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v321, (uint64_t)Successor);
        }
        ++v32;
      }
      while ((_DWORD)v8 != v32);
      goto LABEL_52;
    }
    v8 = 2;
    switch(*(_BYTE *)(v31 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_442;
      case 0x1F:
        LODWORD(v8) = (*(_DWORD *)(v31 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
        LODWORD(v8) = (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x21:
        goto LABEL_41;
      case 0x24:
        LODWORD(v8) = *(_WORD *)(v31 + 18) & 1;
        break;
      case 0x25:
        LODWORD(v8) = 1;
        goto LABEL_41;
      case 0x27:
        LODWORD(v8) = *(_DWORD *)(v31 + 80) + 1;
        break;
      default:
        goto LABEL_52;
    }
    if ((_DWORD)v8)
      goto LABEL_41;
LABEL_52:
    ++v27;
  }
  while (v27 != v28);
  *(_DWORD *)(a1 + 104) = HIDWORD(v323) - v324;
  v38 = *(_QWORD *)(a1 + 80);
  v39 = *(_QWORD *)(a1 + 88);
  for (i = (_DWORD *)(a1 + 104); v38 != v39; v38 += 8)
  {
    v72 = *(_QWORD *)(*(_QWORD *)v38 + 40);
    if (v72 == *(_QWORD *)v38 + 40)
    {
      v74 = 0;
    }
    else
    {
      if (v72)
        v73 = v72 - 24;
      else
        v73 = 0;
      if (*(unsigned __int8 *)(v73 + 16) - 29 >= 0xB)
        v74 = 0;
      else
        v74 = v73;
    }
    v75 = *(unsigned __int8 *)(v74 + 16);
    if (v75 != 30)
      __asm { BR              X9 }
    if ((*(_DWORD *)(v74 + 20) & 0x7FFFFFF) == 3)
      v76 = 2;
    else
      v76 = 1;
    for (j = 0; j != v76; ++j)
    {
      v339 = (const char *)llvm::Instruction::getSuccessor((llvm::Instruction *)v74, j);
      v338[0] = 0;
      if ((sub_1C4E36498((uint64_t *)(a1 + 56), &v339, v338) & 1) == 0)
      {
        v78 = llvm::Instruction::getSuccessor((llvm::Instruction *)v74, j);
        v79 = *(unsigned int *)(a1 + 128);
        if (v79 >= *(unsigned int *)(a1 + 132))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 120, a1 + 136, v79 + 1, 8);
          v79 = *(unsigned int *)(a1 + 128);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v79) = v78;
        ++*(_DWORD *)(a1 + 128);
      }
    }
  }
LABEL_62:
  llvm::CodeExtractor::severSplitPHINodesOfEntry((llvm::CodeExtractor *)a1, &v328);
  llvm::CodeExtractor::severSplitPHINodesOfExits(a1, &v321);
  v40 = v328;
  v41 = **(_QWORD ***)v328;
  v339 = "codeRepl";
  v341 = 259;
  v42 = operator new();
  *(_QWORD *)v42 = *v41 + 1600;
  *(_QWORD *)(v42 + 8) = 0;
  v43 = *(_DWORD *)(v42 + 20) & 0xC0000000;
  *(_QWORD *)(v42 + 24) = 0;
  v44 = v42 + 24;
  *(_DWORD *)(v42 + 16) = 22;
  *(_DWORD *)(v42 + 20) = v43;
  *(_QWORD *)(v42 + 32) = 0;
  *(_QWORD *)(v42 + 40) = v42 + 40;
  *(_QWORD *)(v42 + 48) = v42 + 40;
  *(_QWORD *)(v42 + 56) = 0;
  v45 = (uint64_t ***)v301;
  if (v301)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v301 + 72), (_QWORD *)v42);
    v46 = *((_QWORD *)v40 + 3);
    *(_QWORD *)(v42 + 24) = v46;
    *(_QWORD *)(v42 + 32) = (char *)v40 + 24;
    *(_QWORD *)(v46 + 8) = v44;
    *((_QWORD *)v40 + 3) = v44;
  }
  v303 = (llvm::Value *)v42;
  llvm::Value::setName((uint64_t ***)v42, (uint64_t)&v339);
  v47 = **(_QWORD ***)v40;
  v339 = "newFuncRoot";
  v341 = 259;
  v48 = operator new();
  *(_QWORD *)v48 = *v47 + 1600;
  *(_QWORD *)(v48 + 8) = 0;
  v49 = *(_DWORD *)(v48 + 20) & 0xC0000000;
  *(_DWORD *)(v48 + 16) = 22;
  *(_DWORD *)(v48 + 20) = v49;
  v50 = v40;
  v51 = (uint64_t *)(v48 + 40);
  *(_QWORD *)(v48 + 24) = 0;
  *(_QWORD *)(v48 + 32) = 0;
  *(_QWORD *)(v48 + 40) = v48 + 40;
  *(_QWORD *)(v48 + 48) = v48 + 40;
  *(_QWORD *)(v48 + 56) = 0;
  llvm::Value::setName((uint64_t ***)v48, (uint64_t)&v339);
  v52 = (char *)operator new(0x60uLL);
  v53 = v52;
  *((_DWORD *)v52 + 13) = *((_DWORD *)v52 + 13) & 0x38000000 | 1;
  *(_QWORD *)v52 = 0;
  *((_QWORD *)v52 + 2) = 0;
  *((_QWORD *)v52 + 1) = 0;
  *((_QWORD *)v52 + 4) = ***(_QWORD ***)v50 + 1576;
  v54 = (llvm::Value *)(v52 + 32);
  *((_QWORD *)v52 + 3) = v52 + 32;
  *((_QWORD *)v52 + 5) = 0;
  v52[48] = 30;
  v52[49] = 0;
  *((_WORD *)v52 + 25) = 0;
  *((_DWORD *)v52 + 13) = 1;
  *(_OWORD *)(v52 + 56) = 0u;
  v55 = v52 + 56;
  *(_OWORD *)(v52 + 72) = 0u;
  *((_DWORD *)v52 + 22) = 0;
  *(_QWORD *)v52 = v50;
  v295 = v50;
  v56 = (_QWORD *)((char *)v50 + 8);
  v57 = *((_QWORD *)v50 + 1);
  *((_QWORD *)v52 + 1) = v57;
  if (v57)
    *(_QWORD *)(v57 + 16) = v52 + 8;
  *((_QWORD *)v52 + 2) = v56;
  *v56 = v52;
  if ((v301[23] & 0x20) != 0)
  {
    v58 = ***(_QWORD ***)v301;
    v339 = v301;
    v59 = *(_DWORD *)(v58 + 2496);
    if (!v59)
    {
      v192 = 0;
      goto LABEL_308;
    }
    v60 = *(_QWORD *)(v58 + 2480);
    v61 = v59 - 1;
    v62 = v61 & ((v301 >> 4) ^ (v301 >> 9));
    v63 = (const char **)(v60 + 40 * v62);
    v64 = *v63;
    if (*v63 != v301)
    {
      v65 = 0;
      v66 = 1;
      while (v64 != (const char *)-4096)
      {
        if (v65)
          v67 = 0;
        else
          v67 = v64 == (const char *)-8192;
        if (v67)
          v65 = v63;
        v68 = v62 + v66++;
        v62 = v68 & v61;
        v63 = (const char **)(v60 + 40 * v62);
        v64 = *v63;
        if (*v63 == v301)
          goto LABEL_77;
      }
      if (v65)
        v192 = v65;
      else
        v192 = v63;
LABEL_308:
      v63 = (const char **)sub_1C541AB24(v58 + 2480, (uint64_t)&v339, (uint64_t *)&v339, v192);
      v193 = v339;
      v63[3] = 0;
      v63[4] = 0;
      *v63 = v193;
      v63[1] = (const char *)(v63 + 3);
      v63[2] = (const char *)0x100000000;
    }
LABEL_77:
    v69 = *((unsigned int *)v63 + 4);
    if ((_DWORD)v69)
    {
      v70 = v63[1] + 8;
      v71 = 16 * v69;
      while (*((_DWORD *)v70 - 2))
      {
        v70 += 2;
        v71 -= 16;
        if (!v71)
          goto LABEL_132;
      }
      if (*v70)
      {
        v80 = *(_QWORD *)(a1 + 80);
LABEL_106:
        if (v80 != *(_QWORD *)(a1 + 88))
        {
          for (k = *(_QWORD *)(*(_QWORD *)v80 + 48); ; k = *(_QWORD *)(k + 8))
          {
            if (k == *(_QWORD *)v80 + 40)
            {
              v80 += 8;
              goto LABEL_106;
            }
            v82 = k - 24;
            if (!k)
              v82 = 0;
            v83 = *(unsigned __int8 **)(v82 + 48);
            if (v83)
              break;
          }
          v339 = *(const char **)(v82 + 48);
          llvm::MetadataTracking::track((uint64_t)&v339, v83, 2);
          v92 = (const char **)(v53 + 80);
          v91 = (unsigned __int8 *)*((_QWORD *)v53 + 10);
          if (v91)
          {
            llvm::MetadataTracking::untrack((uint64_t)(v53 + 80), v91);
            v92 = (const char **)(v53 + 80);
          }
          v93 = (unsigned __int8 *)v339;
          *v92 = v339;
          if (v93)
            llvm::MetadataTracking::retrack((uint64_t)&v339, v93, (uint64_t)v92);
        }
      }
    }
  }
LABEL_132:
  *((_QWORD *)v53 + 9) = v48;
  *(_WORD *)(v48 + 18) &= ~0x8000u;
  if ((v53[55] & 0x10) != 0)
  {
    v190 = *(_QWORD *)(v48 + 56);
    if (v190)
    {
      v191 = *(llvm::ValueSymbolTable **)(v190 + 104);
      if (v191)
        llvm::ValueSymbolTable::reinsertValue(v191, v54);
    }
  }
  v94 = *v51;
  *((_QWORD *)v53 + 7) = *v51;
  *((_QWORD *)v53 + 8) = v51;
  *(_QWORD *)(v94 + 8) = v55;
  *v51 = (uint64_t)v55;
  v316[0] = 0;
  v316[1] = 0;
  v317 = 0;
  v319 = 0;
  v320 = 0;
  v318 = 0;
  v311[0] = 0;
  v311[1] = 0;
  v312 = 0;
  v314 = 0;
  v315 = 0;
  v313 = 0;
  v310 = 0;
  llvm::CodeExtractor::findAllocas(a1, v296, v316, v311, &v310);
  llvm::CodeExtractor::findInputsOutputs(a1, v298, v300, v316);
  v95 = (llvm::Instruction **)v318;
  v96 = v319;
  if (v318 != v319)
  {
    v97 = 0;
    do
    {
      v98 = *v95;
      if (*v95 && *((_BYTE *)v98 + 16) == 59)
      {
        v99 = (uint64_t *)(v48 + 40);
        if (*(uint64_t **)(v48 + 48) != v51)
        {
          v99 = *(uint64_t **)(v48 + 48);
          while (1)
          {
            v100 = v99 - 3;
            if (!v99)
              v100 = 0;
            if (*((_BYTE *)v100 + 16) != 83)
              break;
            v99 = (uint64_t *)v99[1];
            if (v99 == v51)
            {
              v99 = (uint64_t *)(v48 + 40);
              goto LABEL_149;
            }
          }
          v101 = *((unsigned __int8 *)v99 - 8) - 38;
          v102 = v101 > 0x38;
          v103 = (1 << v101) & 0x100060000000001;
          if (!v102 && v103 != 0)
            v99 = (uint64_t *)v99[1];
        }
LABEL_149:
        llvm::Instruction::moveBefore(*v95, v48, v99);
        if (!v97)
          v97 = v98;
      }
      ++v95;
    }
    while (v95 != v96);
    v105 = (llvm::Instruction **)v318;
    v106 = v319;
    v45 = (uint64_t ***)v301;
    if (v318 != v319)
    {
      do
      {
        if (*((_BYTE *)*v105 + 16) != 59)
          llvm::Instruction::moveAfter(*v105, v97);
        ++v105;
      }
      while (v105 != v106);
    }
  }
  v107 = v295;
  if (v313 != v314)
  {
    BlockForHoisting = llvm::CodeExtractor::findOrCreateBlockForHoisting((llvm::CodeExtractor *)a1, v310);
    v131 = (llvm::BasicBlock *)*((_QWORD *)BlockForHoisting + 5);
    if (v131 == (llvm::BasicBlock *)((char *)BlockForHoisting + 40))
    {
      v132 = 0;
    }
    else
    {
      if (v131)
        v180 = (unsigned __int8 *)v131 - 24;
      else
        v180 = 0;
      if (v180[16] - 29 >= 0xB)
        v132 = 0;
      else
        v132 = (llvm::Instruction *)v180;
    }
    v181 = (llvm::Instruction **)v313;
    v182 = v314;
    while (v181 != v182)
    {
      v183 = *v181++;
      llvm::Instruction::moveBefore(v183, v132);
    }
  }
  v305[0] = 0;
  v305[1] = 0;
  v306 = 0;
  v308 = 0;
  v309 = 0;
  __p = 0;
  v108 = *(_QWORD *)(a1 + 80);
  v109 = *(_QWORD *)(a1 + 88);
  if (v108 != v109)
  {
    while (2)
    {
      v110 = *(_QWORD *)v108 + 40;
      v111 = *(_QWORD **)(*(_QWORD *)v108 + 48);
      if (v111 != (_QWORD *)v110)
      {
        while (1)
        {
          v112 = (_QWORD *)v111[1];
          v113 = v111 ? (uint64_t)(v111 - 3) : 0;
          if (*(_BYTE *)(v113 + 16) == 84)
          {
            v114 = *(_QWORD *)(v113 - 32);
            if (v114)
            {
              if (!*(_BYTE *)(v114 + 16)
                && *(_QWORD *)(v114 + 24) == *(_QWORD *)(v113 + 72)
                && (*(_BYTE *)(v114 + 33) & 0x20) != 0
                && llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)(v111 - 3)))
              {
                Successor = 0;
                v115 = llvm::Value::stripInBoundsOffsets(v111[-4 * (*((_DWORD *)v111 - 1) & 0x7FFFFFF) + 1], (void (*)(uint64_t, uint64_t))nullsub_615, (uint64_t)&v339);
                Successor = (void *)v115;
                if (!v317)
                  goto LABEL_174;
                v116 = (v317 - 1) & ((v115 >> 4) ^ (v115 >> 9));
                v117 = *(_QWORD *)(v316[0] + 8 * v116);
                if (v115 != v117)
                  break;
              }
            }
          }
LABEL_180:
          v111 = v112;
          if (v112 == (_QWORD *)v110)
            goto LABEL_181;
        }
        v118 = 1;
        while (v117 != -4096)
        {
          v119 = v116 + v118++;
          v116 = v119 & (v317 - 1);
          v117 = *(_QWORD *)(v316[0] + 8 * v116);
          if (v115 == v117)
            goto LABEL_180;
        }
LABEL_174:
        if (!v115
          || *(unsigned __int8 *)(v115 + 16) < 0x1Cu
          || (v339 = *(const char **)(v115 + 40),
              v338[0] = 0,
              (sub_1C4E36498((uint64_t *)(a1 + 56), &v339, v338) & 1) == 0))
        {
          if (*(_DWORD *)(*(v111 - 7) + 36) == 168)
            sub_1C4D954B8(v305, &Successor);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v111[2] + 40, (uint64_t ***)v111 - 3);
          v120 = *v111;
          v121 = (_QWORD *)v111[1];
          *v121 = *v111;
          *(_QWORD *)(v120 + 8) = v121;
          *v111 = 0;
          v111[1] = 0;
          llvm::Value::deleteValue((llvm::Value *)(v111 - 3));
        }
        goto LABEL_180;
      }
LABEL_181:
      v108 += 8;
      if (v108 != v109)
        continue;
      break;
    }
    v107 = v328;
    v45 = (uint64_t ***)v301;
  }
  v8 = (uint64_t)llvm::CodeExtractor::constructFunction(a1, (uint64_t)v298, (uint64_t)v300, v107, (_QWORD *)v48, v303, v45, v45[5]);
  v122 = *(llvm::BlockFrequencyInfoImplBase ***)(a1 + 16);
  if (v122)
  {
    if (*v122)
    {
      ProfileCountFromFreq = llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq(*v122, *((uint64_t ****)*v122 + 16), v294, 0);
      if (v124)
        llvm::Function::setEntryCount((uint64_t ***)v8, (uint64_t)ProfileCountFromFreq, 0, 0);
    }
    sub_1C4DAD074(**(_QWORD **)(a1 + 16), (uint64_t)v303, v294);
  }
  v125 = llvm::CodeExtractor::emitCallAndSwitchStatement(a1, v8, (uint64_t)v303, (uint64_t)v298, (uint64_t)v300);
  llvm::CodeExtractor::moveCodeToFunction((_QWORD *)a1, (llvm::Function *)v8);
  v126 = sub_1C5EDFBE0((uint64_t *)v45[5], (llvm::Value **)__p, (v308 - (_BYTE *)__p) >> 3, 0, 0, (uint64_t)v125);
  if ((*((_WORD *)v45 + 9) & 8) != 0)
  {
    v128 = *((_DWORD *)v45 + 5);
    if ((v128 & 0x40000000) != 0)
      v129 = (uint64_t *)*(v45 - 1);
    else
      v129 = (uint64_t *)&v45[-4 * (v128 & 0x7FFFFFF)];
    v133 = *v129 != 0;
    v126 = (uint64_t)sub_1C53D1F60((_QWORD *)v8, *v129);
    *(_WORD *)(v8 + 18) = *(_WORD *)(v8 + 18) & 0xFFF7 | (8 * v133);
  }
  if (*(_QWORD *)(a1 + 16) && *i >= 2u)
    llvm::CodeExtractor::calculateNewCallTerminatorWeights(v126, v303, v326, *(_QWORD *)(a1 + 24));
  for (m = *((_QWORD *)v107 + 6); ; m = *(_QWORD *)(m + 8))
  {
    v135 = m - 24;
    v136 = m ? m - 24 : 0;
    if (*(_BYTE *)(v136 + 16) != 83)
      break;
    v137 = *(_DWORD *)(m - 4) & 0x7FFFFFF;
    if ((_DWORD)v137)
    {
      v138 = 0;
      v139 = 8 * v137;
      do
      {
        v140 = *(_DWORD *)(m - 4);
        if ((v140 & 0x40000000) != 0)
          v141 = *(_QWORD *)(m - 32);
        else
          v141 = v135 - 32 * (v140 & 0x7FFFFFF);
        v339 = *(const char **)(v141 + 32 * *(unsigned int *)(m + 36) + v138);
        v338[0] = 0;
        if ((sub_1C4E36498(v10, &v339, v338) & 1) == 0)
        {
          v142 = *(_DWORD *)(m - 4);
          if ((v142 & 0x40000000) != 0)
            v143 = *(_QWORD *)(m - 32);
          else
            v143 = v135 - 32 * (v142 & 0x7FFFFFF);
          *(_QWORD *)(v143 + 32 * *(unsigned int *)(m + 36) + v138) = v48;
        }
        v138 += 8;
      }
      while (v139 != v138);
    }
  }
  if (v322 == v321)
    v144 = (uint64_t *)((char *)&v323 + 4);
  else
    v144 = &v323;
  v145 = *(unsigned int *)v144;
  if ((_DWORD)v145)
  {
    v146 = 8 * v145;
    v147 = (unint64_t *)v322;
    while (*v147 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v147;
      v146 -= 8;
      if (!v146)
        goto LABEL_253;
    }
  }
  else
  {
    v147 = (unint64_t *)v322;
  }
  v148 = &v322[8 * v145];
  if (v147 != (unint64_t *)v148)
  {
    v149 = *v147;
LABEL_226:
    if (*(_QWORD *)(v149 + 40) != v149 + 40)
    {
      for (n = *(_QWORD *)(v149 + 48); ; n = *(_QWORD *)(v151 + 32))
      {
        v151 = n - 24;
        v152 = n ? n - 24 : 0;
        if (!n || *(_BYTE *)(v152 + 16) != 83)
          break;
        v153 = *(_DWORD *)(n - 4) & 0x7FFFFFF;
        if ((_DWORD)v153)
        {
          v154 = 0;
          v155 = 0;
          v156 = 0;
          v157 = 8 * v153;
          do
          {
            v158 = *(_DWORD *)(v151 + 20);
            if ((v158 & 0x40000000) != 0)
              v159 = *(_QWORD *)(v151 - 8);
            else
              v159 = v151 - 32 * (v158 & 0x7FFFFFF);
            v339 = *(const char **)(v159 + 32 * *(unsigned int *)(v151 + 60) + v155);
            v338[0] = 0;
            if (sub_1C4E36498(v10, &v339, v338) && !v156)
            {
              v160 = *(_DWORD *)(v151 + 20);
              if ((v160 & 0x40000000) != 0)
                v161 = *(_QWORD *)(v151 - 8);
              else
                v161 = v151 - 32 * (v160 & 0x7FFFFFF);
              *(_QWORD *)(v161 + 32 * *(unsigned int *)(v151 + 60) + v155) = v303;
              v162 = *(_DWORD *)(v151 + 20);
              if ((v162 & 0x40000000) != 0)
                v163 = *(_QWORD *)(v151 - 8);
              else
                v163 = v151 - 32 * (v162 & 0x7FFFFFF);
              v156 = *(_QWORD *)(v163 + v154);
            }
            v155 += 8;
            v154 += 32;
          }
          while (v157 != v155);
        }
      }
    }
    v164 = v147 + 1;
    v45 = (uint64_t ***)v301;
    while (v164 != (unint64_t *)v148)
    {
      v165 = *v164++;
      v149 = v165;
      if (v165 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v147 = v164 - 1;
        goto LABEL_226;
      }
    }
  }
LABEL_253:
  if ((*((_BYTE *)v45 + 23) & 0x20) != 0)
  {
    v166 = ***v45;
    v339 = (const char *)v45;
    v167 = *(_DWORD *)(v166 + 2496);
    if (!v167)
    {
      v194 = 0;
      goto LABEL_312;
    }
    v168 = *(_QWORD *)(v166 + 2480);
    v169 = v167 - 1;
    v170 = v169 & ((v301 >> 4) ^ (v45 >> 9));
    v171 = (uint64_t ****)(v168 + 40 * v170);
    v172 = *v171;
    if (*v171 != v45)
    {
      v173 = 0;
      v174 = 1;
      while (v172 != (uint64_t ***)-4096)
      {
        if (v173)
          v175 = 0;
        else
          v175 = v172 == (uint64_t ***)-8192;
        if (v175)
          v173 = v171;
        v176 = v170 + v174++;
        v170 = v176 & v169;
        v171 = (uint64_t ****)(v168 + 40 * v170);
        v172 = *v171;
        if (*v171 == v45)
          goto LABEL_264;
      }
      if (v173)
        v194 = v173;
      else
        v194 = v171;
LABEL_312:
      v171 = (uint64_t ****)sub_1C541AB24(v166 + 2480, (uint64_t)&v339, (uint64_t *)&v339, v194);
      v195 = v339;
      v171[3] = 0;
      v171[4] = 0;
      *v171 = (uint64_t ***)v195;
      v171[1] = (uint64_t ***)(v171 + 3);
      v171[2] = (uint64_t ***)0x100000000;
    }
LABEL_264:
    v177 = *((unsigned int *)v171 + 4);
    if ((_DWORD)v177)
    {
      v178 = (uint64_t *)(v171[1] + 1);
      v179 = 16 * v177;
      while (*((_DWORD *)v178 - 2))
      {
        v178 += 2;
        v179 -= 16;
        if (!v179)
          goto LABEL_279;
      }
      v184 = *v178;
      if (*v178)
      {
        v302 = **v45;
        llvm::DIBuilder::DIBuilder((uint64_t)&v339, v45[5], 0, *(_QWORD *)(v184 - 8 * *(unsigned int *)(v184 + 8) + 40));
        TypeArray = llvm::DIBuilder::getOrCreateTypeArray((uint64_t)&v339, 0, 0);
        Impl = llvm::DISubroutineType::getImpl(v340, 0, 0, TypeArray, 0, 1);
        v198 = v184 - 8 * *(unsigned int *)(v184 + 8);
        if ((*(_BYTE *)(v8 + 23) & 0x10) == 0)
        {
          v210 = 0;
          v221 = 0;
          v209 = (unsigned __int8 *)&byte_1C871356D;
          v220 = (unsigned __int8 *)&byte_1C871356D;
LABEL_330:
          v223 = (void *)v184;
          if (*(_BYTE *)v184 != 15)
            v223 = *(void **)v198;
          Function = (llvm::MDNode *)llvm::DIBuilder::createFunction((uint64_t)&v339, *(_BYTE **)(v198 + 40), v209, v210, v220, v221, v223, 0, Impl, 0, 0, 0x1Cu, 0, 0, 0, 0, "", 0);
          llvm::Value::setMetadata((llvm::Value *)v8, 0, Function);
          v338[0] = 1;
          for (ii = 1; ii != 9; ii += 2)
            v338[ii] = -4096;
          v300 = v337;
          Successor = v337;
          v336 = 0x400000000;
          v225 = v8 + 72;
          v333[0] = 0;
          v333[1] = 0;
          v334 = 0;
          for (jj = *(_QWORD *)(v8 + 80); jj != v225; jj = *(_QWORD *)(jj + 8))
          {
            v227 = jj - 24;
            if (!jj)
              v227 = 0;
            v228 = *(_QWORD *)(v227 + 48);
            if (v228 != v227 + 40)
            {
              while (1)
              {
                if (v228)
                  v229 = v228 - 24;
                else
                  v229 = 0;
                v230 = sub_1C4D99D08(v229);
                if (v230)
                  v231 = v229;
                else
                  v231 = 0;
                if (v228 && v230)
                {
                  if (sub_1C5392454(v229))
                  {
                    v232 = *(_QWORD *)(v229 + 48);
                    if (*(_DWORD *)(v232 + 8) != 2 || !*(_QWORD *)(v232 - 8))
                    {
                      v233 = *(_QWORD *)(*(_QWORD *)(v229 - 32 * (*(_DWORD *)(v229 + 20) & 0x7FFFFFF)) + 24);
                      v329 = (unsigned __int8 *)v233;
                      v234 = sub_1C6281BA0(v338, &v329);
                      v235 = (unsigned __int8 *)v234[1];
                      if (!v235)
                      {
                        v236 = v234;
                        v299 = llvm::DILocalScope::cloneScopeForSubprogram(*(llvm::DIScope **)(v233 - 8 * *(unsigned int *)(v233 + 8)), (unsigned __int8 *)Function, (uint64_t)v302, (uint64_t)v333);
                        v237 = v233 - 8 * *(unsigned int *)(v233 + 8);
                        v238 = *(_QWORD *)(v237 + 8);
                        if (v238)
                        {
                          v239 = *(_QWORD *)(v238 + 8);
                          v240 = *(_QWORD **)v239;
                          v297 = *(_QWORD *)(v237 + 16);
                          v241 = *(_DWORD *)(v233 + 24);
                          if (*(_QWORD *)v239)
                            v240 = llvm::MDString::get(v302, (unsigned __int8 *)(v239 + 24), (size_t)v240);
                        }
                        else
                        {
                          v240 = 0;
                          v297 = *(_QWORD *)(v237 + 16);
                          v241 = *(_DWORD *)(v233 + 24);
                        }
                        v235 = (unsigned __int8 *)llvm::DILabel::getImpl(v302, (uint64_t)v299, (uint64_t)v240, v297, v241, 0, 1);
                        v236[1] = v235;
                      }
                      v260 = llvm::MetadataAsValue::get(v302, v235);
                      v261 = *(_DWORD *)(v229 + 20) & 0x7FFFFFF;
                      v262 = -v261;
                      v263 = (uint64_t *)(v229 - 32 * v261);
                      if (*v263)
                      {
                        v264 = v229 + 32 * v262;
                        v266 = *(_QWORD **)(v264 + 16);
                        v265 = (_QWORD *)(v264 + 16);
                        *v266 = *(v265 - 1);
                        v267 = *(v265 - 1);
                        if (v267)
                          *(_QWORD *)(v267 + 16) = *v265;
                      }
                      *v263 = v260;
                      if (v260)
                      {
                        v270 = *(_QWORD *)(v260 + 8);
                        v268 = (uint64_t **)(v260 + 8);
                        v269 = v270;
                        v271 = v229 + 32 * v262;
                        *(_QWORD *)(v271 + 8) = v270;
                        if (v270)
                          *(_QWORD *)(v269 + 16) = v271 + 8;
                        *(_QWORD *)(v271 + 16) = v268;
                        *v268 = v263;
                      }
                    }
                  }
                  else
                  {
                    llvm::DbgVariableIntrinsic::location_ops(v231, &v329);
                    v242 = (uint64_t)v329;
                    while ((unsigned __int8 *)v242 != v330)
                    {
                      v243 = (unint64_t *)(v242 & 0xFFFFFFFFFFFFFFF8);
                      v244 = v242 & 0xFFFFFFFFFFFFFFF8;
                      if ((v242 & 4) != 0)
                        v244 = *v243;
                      v245 = *(_QWORD *)(v244 + 128);
                      if (!v245
                        || (v246 = *(unsigned __int8 *)(v245 + 16), v246 - 28 > 0xFFFFFFF8)
                        || v246 >= 0x1C && *(_QWORD *)(*(_QWORD *)(v245 + 40) + 56) != v8)
                      {
                        v259 = v336;
                        if (v336 >= (unint64_t)HIDWORD(v336))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Successor, (uint64_t)v337, v336 + 1, 8);
                          v259 = v336;
                        }
                        *((_QWORD *)Successor + v259) = v231;
                        LODWORD(v336) = v336 + 1;
                        goto LABEL_388;
                      }
                      v247 = (unint64_t)(v243 + 1) | 4;
                      v248 = (unsigned __int8 *)(v243 + 17);
                      if ((v242 & 4) != 0)
                        v242 = v247;
                      else
                        v242 = (uint64_t)v248;
                    }
                    v249 = *(_QWORD *)(v231 + 48);
                    if (*(_DWORD *)(v249 + 8) != 2 || !*(_QWORD *)(v249 - 8))
                    {
                      v250 = *(_QWORD *)(*(_QWORD *)(v231 - 32 * (*(_DWORD *)(v231 + 20) & 0x7FFFFFF) + 32) + 24);
                      v329 = (unsigned __int8 *)v250;
                      v251 = sub_1C6281BA0(v338, &v329);
                      v252 = (unsigned __int8 *)v251[1];
                      if (!v252)
                      {
                        v253 = v251;
                        v254 = llvm::DILocalScope::cloneScopeForSubprogram(*(llvm::DIScope **)(v250 - 8 * *(unsigned int *)(v250 + 8)), (unsigned __int8 *)Function, (uint64_t)v302, (uint64_t)v333);
                        v255 = (_QWORD *)(v250 - 8 * *(unsigned int *)(v250 + 8));
                        v256 = v255[1];
                        if (v256)
                        {
                          v272 = *(_QWORD **)(v256 + 8);
                          v273 = *v272;
                          v258 = (unsigned __int8 *)(v272 + 3);
                          v257 = v273;
                        }
                        else
                        {
                          v257 = 0;
                          v258 = 0;
                        }
                        v252 = sub_1C5393B20(v340, (uint64_t)v342, v254, v258, v257, 0, v255[2], *(_DWORD *)(v250 + 24), v255[3], 0, 0, *(_DWORD *)(v250 + 28), 0);
                        v253[1] = v252;
                      }
                      sub_1C6281B64(v231, (uint64_t)v252);
                    }
                  }
                }
LABEL_388:
                v228 = *(_QWORD *)(v228 + 8);
                v274 = jj - 24;
                if (!jj)
                  v274 = 0;
                if (v228 == v274 + 40)
                  break;
LABEL_395:
                if (jj == v225)
                  goto LABEL_396;
              }
              while (1)
              {
                jj = *(_QWORD *)(jj + 8);
                if (jj == v225)
                  break;
                v275 = jj - 24;
                if (!jj)
                  v275 = 0;
                v228 = *(_QWORD *)(v275 + 48);
                if (v228 != v275 + 40)
                  goto LABEL_395;
              }
LABEL_396:
              if ((_DWORD)v336)
              {
                v276 = (uint64_t *)Successor;
                v277 = 8 * v336;
                do
                {
                  v278 = *v276++;
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v278 + 40) + 40, (uint64_t ***)v278);
                  v279 = *(_QWORD *)(v278 + 24);
                  v280 = *(_QWORD **)(v278 + 32);
                  *v280 = v279;
                  *(_QWORD *)(v279 + 8) = v280;
                  *(_QWORD *)(v278 + 24) = 0;
                  *(_QWORD *)(v278 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v278);
                  v277 -= 8;
                }
                while (v277);
              }
              break;
            }
          }
          llvm::DIBuilder::finalizeSubprogram((llvm::DIBuilder *)&v339, Function);
          for (kk = *(_QWORD *)(v8 + 80); kk != v225; kk = *(_QWORD *)(kk + 8))
          {
            v282 = kk - 24;
            if (!kk)
              v282 = 0;
            v283 = *(_QWORD *)(v282 + 48);
            if (v283 != v282 + 40)
            {
              while (1)
              {
                if (v283)
                  v284 = v283 - 24;
                else
                  v284 = 0;
                v285 = (unsigned __int8 **)(v284 + 48);
                if (*(_QWORD *)(v284 + 48))
                {
                  llvm::DebugLoc::replaceInlinedAtSubprogram((uint64_t *)(v284 + 48), (unsigned __int8 *)Function, v302, (uint64_t)v333, &v332);
                  if (&v332 == v285)
                  {
                    if (v332)
                      llvm::MetadataTracking::untrack((uint64_t)&v332, v332);
                  }
                  else
                  {
                    if (*v285)
                      llvm::MetadataTracking::untrack(v284 + 48, *v285);
                    v286 = v332;
                    *v285 = v332;
                    if (v286)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v332, v286, v284 + 48);
                      v332 = 0;
                    }
                  }
                }
                v329 = (unsigned __int8 *)v302;
                v330 = (unsigned __int8 *)v333;
                v331 = Function;
                llvm::updateLoopMetadataDebugLocations(v284, (uint64_t (*)(uint64_t))sub_1C5EE1F54, (uint64_t)&v329);
                v283 = *(_QWORD *)(v283 + 8);
                v287 = kk - 24;
                if (!kk)
                  v287 = 0;
                if (v283 == v287 + 40)
                  break;
LABEL_421:
                if (kk == v225)
                  goto LABEL_425;
              }
              while (1)
              {
                kk = *(_QWORD *)(kk + 8);
                if (kk == v225)
                  goto LABEL_425;
                v288 = kk - 24;
                if (!kk)
                  v288 = 0;
                v283 = *(_QWORD *)(v288 + 48);
                if (v283 != v288 + 40)
                  goto LABEL_421;
              }
            }
          }
LABEL_425:
          v290 = *((_QWORD *)v125 + 6);
          v289 = (unsigned __int8 **)((char *)v125 + 48);
          if (!v290)
          {
            v291 = (unsigned __int8 *)llvm::DILocation::getImpl(v302, 0, 0, v184, 0, 0, 0, 1);
            v329 = v291;
            if (v291)
              llvm::MetadataTracking::track((uint64_t)&v329, v291, 2);
            if (&v329 == v289)
            {
LABEL_442:
              if (v329)
                llvm::MetadataTracking::untrack((uint64_t)&v329, v329);
            }
            else
            {
              if (*v289)
                llvm::MetadataTracking::untrack((uint64_t)v289, *v289);
              v292 = v329;
              *v289 = v329;
              if (v292)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v329, v292, (uint64_t)v289);
                v329 = 0;
              }
            }
          }
          sub_1C5EE1DC8((uint64_t *)v8);
          MEMORY[0x1CAA32FB4](v333[0], 8);
          if (Successor != v300)
            free(Successor);
          if ((v338[0] & 1) == 0)
            MEMORY[0x1CAA32FB4](v338[1], 8);
          sub_1C50F023C((uint64_t)&v339);
          goto LABEL_280;
        }
        v199 = ***(_QWORD ***)v8;
        v200 = *(_QWORD *)(v199 + 152);
        v201 = *(unsigned int *)(v199 + 168);
        v202 = v8 >> 4;
        if ((_DWORD)v201)
        {
          LODWORD(v203) = (v201 - 1) & (v202 ^ (v8 >> 9));
          v204 = (uint64_t *)(v200 + 16 * v203);
          v205 = *v204;
          if (*v204 == v8)
          {
            v208 = (_QWORD *)v204[1];
            v211 = *v208;
            v209 = (unsigned __int8 *)(v208 + 2);
            v210 = v211;
LABEL_323:
            LODWORD(v214) = (v201 - 1) & (v202 ^ (v8 >> 9));
            v215 = (uint64_t *)(v200 + 16 * v214);
            v216 = *v215;
            if (*v215 == v8)
            {
LABEL_329:
              v219 = (_QWORD *)v215[1];
              v222 = *v219;
              v220 = (unsigned __int8 *)(v219 + 2);
              v221 = v222;
              goto LABEL_330;
            }
            v217 = 1;
            while (v216 != -4096)
            {
              v218 = v214 + v217++;
              v214 = v218 & (v201 - 1);
              v216 = *(_QWORD *)(v200 + 16 * v214);
              if (v216 == v8)
              {
                v215 = (uint64_t *)(v200 + 16 * v214);
                goto LABEL_329;
              }
            }
LABEL_328:
            v215 = (uint64_t *)(v200 + 16 * v201);
            goto LABEL_329;
          }
          v206 = 1;
          while (v205 != -4096)
          {
            v207 = v203 + v206++;
            v203 = v207 & (v201 - 1);
            v205 = *(_QWORD *)(v200 + 16 * v203);
            if (v205 == v8)
              goto LABEL_322;
          }
        }
        v203 = v201;
LABEL_322:
        v212 = *(_QWORD **)(v200 + 16 * v203 + 8);
        v213 = *v212;
        v209 = (unsigned __int8 *)(v212 + 2);
        v210 = v213;
        if (!(_DWORD)v201)
          goto LABEL_328;
        goto LABEL_323;
      }
    }
  }
LABEL_279:
  llvm::stripDebugInfo((llvm *)v8, v127);
  sub_1C5EE1DC8((uint64_t *)v8);
LABEL_280:
  for (mm = *(_QWORD *)(v8 + 80); mm != v8 + 72; mm = *(_QWORD *)(mm + 8))
  {
    v186 = mm - 24;
    if (!mm)
      v186 = 0;
    v187 = *(_QWORD *)(v186 + 40);
    if (v187)
      v188 = v187 - 24;
    else
      v188 = 0;
    if (*(unsigned __int8 *)(v188 + 16) - 29 >= 0xB)
      v188 = 0;
    v189 = *(unsigned __int8 *)(v188 + 16);
    if (v189 == 29 || v189 == 34)
      goto LABEL_293;
  }
  *(_QWORD *)(v8 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v8 + 112), **(uint64_t ***)v8, -1, 32);
LABEL_293:
  if (__p)
  {
    v308 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v305[0], 8);
  if (v313)
  {
    v314 = (llvm::Instruction **)v313;
    operator delete(v313);
  }
  MEMORY[0x1CAA32FB4](v311[0], 8);
  if (v318)
  {
    v319 = (llvm::Instruction **)v318;
    operator delete(v318);
  }
  MEMORY[0x1CAA32FB4](v316[0], 8);
  if (v322 != v321)
    free(v322);
  MEMORY[0x1CAA32FB4](v326[0], 8);
  return v8;
}

uint64_t llvm::CodeExtractor::verifyAssumptionCache(int32x2_t **this, const llvm::Function *a2, const llvm::Function *a3, llvm::AssumptionCache *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t ****v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  int32x2_t ****v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int32x2_t *****v20;
  int32x2_t ****v21;
  int v22;
  int v23;
  int32x2_t ***v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int32x2_t ***v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  int32x2_t ****v35;
  unint64_t v36;
  unint64_t v38;
  int32x2_t ****v39;
  int32x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int32x2_t *****v45;
  int32x2_t ****v46;
  int v47;
  int v48;
  uint64_t v50;
  unint64_t *v51;
  int32x2_t ****v52;
  int v53;
  uint64_t v54;
  unint64_t *v55;
  int32x2_t ****v56;
  int v57;

  if (!*((_BYTE *)a3 + 184))
    llvm::AssumptionCache::scanFunction(a3);
  v6 = *((unsigned int *)a3 + 6);
  if (!(_DWORD)v6)
    return 0;
  v7 = *((_QWORD *)a3 + 2);
  v8 = v7 + 32 * v6;
  while (1)
  {
    v54 = 4;
    v55 = 0;
    v9 = *(int32x2_t *****)(v7 + 16);
    v56 = v9;
    if (v9 && v9 != (int32x2_t ****)-8192 && v9 != (int32x2_t ****)-4096)
    {
      v10 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      v55 = *(unint64_t **)v10;
      *(_QWORD *)v10 = &v54;
      v54 = v10 | 4;
      if (v55)
        *v55 = *v55 & 7 | (unint64_t)&v55;
      v9 = v56;
    }
    v57 = *(_DWORD *)(v7 + 24);
    if (!v9 || *((_BYTE *)v9 + 16) != 84)
    {
      LODWORD(v11) = 3;
      goto LABEL_16;
    }
    if (v9[5][7] != this)
    {
      LODWORD(v11) = 1;
      goto LABEL_16;
    }
    v24 = v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
    if (!*((_BYTE *)a3 + 184))
      llvm::AssumptionCache::scanFunction(a3);
    v25 = *((_QWORD *)a3 + 20);
    v26 = *((_DWORD *)a3 + 44);
    if (!v26)
      goto LABEL_39;
    v28 = (v26 - 1) & ((v24 >> 4) ^ (v24 >> 9));
    v27 = v25 + 88 * v28;
    v29 = *(int32x2_t ****)(v27 + 24);
    if (v29 != v24)
    {
      v30 = 1;
      while (v29 != (int32x2_t ***)-4096)
      {
        v31 = v28 + v30++;
        v28 = v31 & (v26 - 1);
        v27 = v25 + 88 * v28;
        v29 = *(int32x2_t ****)(v27 + 24);
        if (v29 == v24)
          goto LABEL_40;
      }
LABEL_39:
      v27 = v25 + 88 * v26;
    }
LABEL_40:
    if (v27 == v25 + 88 * v26)
    {
      LODWORD(v11) = 0;
    }
    else
    {
      v11 = *(unsigned int *)(v27 + 48);
      if ((_DWORD)v11)
      {
        v32 = *(_QWORD *)(v27 + 40);
        v33 = v32 + 32 * v11;
        do
        {
          v34 = 0;
          v50 = 4;
          v51 = 0;
          v35 = *(int32x2_t *****)(v32 + 16);
          v52 = v35;
          if (v35 && v35 != (int32x2_t ****)-8192 && v35 != (int32x2_t ****)-4096)
          {
            v36 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
            v51 = *(unint64_t **)v36;
            *(_QWORD *)v36 = &v50;
            v50 = v36 | 4;
            v34 = v51;
            if (v51)
              *v51 = *v51 & 7 | (unint64_t)&v51;
            v35 = v52;
          }
          v53 = *(_DWORD *)(v32 + 24);
          if (v35 && *((_BYTE *)v35 + 16) == 84)
            LODWORD(v11) = v35[5][7] != this || v35[-4 * (*((_DWORD *)v35 + 5) & 0x7FFFFFF)][5][7] != (int32x2_t *)this;
          else
            LODWORD(v11) = 5;
          if (v35 != (int32x2_t ****)-8192 && v35 != (int32x2_t ****)-4096 && v35 != 0)
          {
            v38 = v50 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF8) = v34;
            if (v51)
            {
              *v51 = *v51 & 7 | v38;
            }
            else
            {
              v39 = v52;
              v40 = ***v52;
              v41 = (unint64_t)v40[303];
              if (v41 <= v38)
              {
                v42 = v40[305].u32[0];
                if (v41 + 16 * v42 > v38)
                {
                  v43 = v42 - 1;
                  LODWORD(v44) = v43 & ((v52 >> 4) ^ (v52 >> 9));
                  v45 = (int32x2_t *****)(v41 + 16 * v44);
                  v46 = *v45;
                  if (v52 == *v45)
                  {
LABEL_79:
                    *v45 = (int32x2_t ****)-8192;
                    v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
                    v39 = v52;
                  }
                  else
                  {
                    v47 = 1;
                    while (v46 != (int32x2_t ****)-4096)
                    {
                      v48 = v44 + v47++;
                      v44 = v48 & v43;
                      v46 = *(int32x2_t *****)(v41 + 16 * v44);
                      if (v52 == v46)
                      {
                        v45 = (int32x2_t *****)(v41 + 16 * v44);
                        goto LABEL_79;
                      }
                    }
                  }
                  *((_BYTE *)v39 + 17) &= ~1u;
                }
              }
            }
          }
          if ((_DWORD)v11 != 5 && (_DWORD)v11)
            break;
          LODWORD(v11) = 0;
          v32 += 32;
        }
        while (v32 != v33);
      }
    }
LABEL_16:
    if (v56 != (int32x2_t ****)-8192 && v56 != (int32x2_t ****)-4096 && v56 != 0)
    {
      v13 = v54 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF8) = v55;
      if (v55)
      {
        *v55 = *v55 & 7 | v13;
      }
      else
      {
        v14 = v56;
        v15 = ***v56;
        v16 = (unint64_t)v15[303];
        if (v16 <= v13)
        {
          v17 = v15[305].u32[0];
          if (v16 + 16 * v17 > v13)
          {
            v18 = v17 - 1;
            LODWORD(v19) = v18 & ((v56 >> 4) ^ (v56 >> 9));
            v20 = (int32x2_t *****)(v16 + 16 * v19);
            v21 = *v20;
            if (v56 == *v20)
            {
LABEL_34:
              *v20 = (int32x2_t ****)-8192;
              v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
              v14 = v56;
            }
            else
            {
              v22 = 1;
              while (v21 != (int32x2_t ****)-4096)
              {
                v23 = v19 + v22++;
                v19 = v23 & v18;
                v21 = *(int32x2_t *****)(v16 + 16 * v19);
                if (v56 == v21)
                {
                  v20 = (int32x2_t *****)(v16 + 16 * v19);
                  goto LABEL_34;
                }
              }
            }
            *((_BYTE *)v14 + 17) &= ~1u;
          }
        }
      }
    }
    if ((_DWORD)v11 != 3 && (_DWORD)v11)
      return 1;
    v7 += 32;
    if (v7 == v8)
      return 0;
  }
}

_QWORD *sub_1C5EE1AB4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  v5 = (_QWORD *)a1[5];
  if (v5 == a1 + 2)
  {
    v6 = 4;
    v5 = a1 + 2;
  }
  else
  {
    if (!v5)
      return a1;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
  return a1;
}

void sub_1C5EE1B34(uint64_t **a1, uint64_t a2, llvm::Value **a3, uint64_t a4, int a5)
{
  llvm::Value **v5;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::Value *PointerCast;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t ***v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::ValueSymbolTable *v29;
  uint64_t v30;
  uint64_t **v31;
  llvm::Value **v32;
  _QWORD v33[4];
  __int16 v34;
  llvm::Value *v35;
  char v36;
  uint64_t v37[2];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v5 = a3;
    v8 = (uint64_t *)(a2 + 8);
    v31 = a1 + 2;
    v32 = &a3[a4];
    if (a5)
      v9 = a1 + 2;
    else
      v9 = a1 + 4;
    do
    {
      v35 = *v5;
      v10 = sub_1C509B72C(*a1, &v35);
      if (v10[1])
      {
        if (a2)
          goto LABEL_7;
      }
      else
      {
        PointerCast = v35;
        v13 = a1[1];
        v14 = *v13;
        if (*(_QWORD *)v35 != *v13)
        {
          v33[0] = "lt.cast";
          v34 = 259;
          PointerCast = llvm::CastInst::CreatePointerCast(v35, v14, (uint64_t)v33, **v31);
        }
        v10[1] = PointerCast;
        if (a2)
        {
LABEL_7:
          v11 = *(_QWORD *)(a2 + 24);
          goto LABEL_12;
        }
      }
      v11 = 0;
LABEL_12:
      v15 = v10[1];
      v37[0] = *a1[3];
      v37[1] = v15;
      v34 = 257;
      v16 = (char *)operator new(0xB0uLL);
      v17 = v16;
      v18 = 0;
      v19 = (uint64_t ***)(v16 + 96);
      *((_DWORD *)v16 + 29) = *((_DWORD *)v16 + 29) & 0x38000000 | 3;
      do
      {
        v20 = &v16[v18];
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v20 + 1) = 0;
        *((_QWORD *)v20 + 2) = 0;
        *((_QWORD *)v20 + 3) = v19;
        v18 += 32;
      }
      while (v18 != 96);
      *((_QWORD *)v16 + 12) = **(_QWORD **)(v11 + 16);
      *((_QWORD *)v16 + 13) = 0;
      v16[112] = 84;
      v16[113] = 0;
      *((_WORD *)v16 + 57) = 0;
      *((_DWORD *)v16 + 29) = *((_DWORD *)v16 + 29) & 0xC0000000 | 3;
      *(_OWORD *)(v16 + 120) = 0u;
      v21 = v16 + 120;
      *(_OWORD *)(v16 + 136) = 0u;
      *((_DWORD *)v16 + 38) = 0;
      *((_QWORD *)v16 + 20) = 0;
      *((_QWORD *)v16 + 21) = v11;
      sub_1C5382FD4((uint64_t)&v36, v37, &v38, (uint64_t)v16);
      v22 = v17 + 64;
      if (*((_QWORD *)v17 + 8))
      {
        **((_QWORD **)v17 + 10) = *((_QWORD *)v17 + 9);
        v30 = *((_QWORD *)v17 + 9);
        if (v30)
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v17 + 10);
      }
      *v22 = a2;
      if (a2)
      {
        v23 = *v8;
        *((_QWORD *)v17 + 9) = *v8;
        if (v23)
          *(_QWORD *)(v23 + 16) = v17 + 72;
        *((_QWORD *)v17 + 10) = v8;
        *v8 = (uint64_t)v22;
      }
      llvm::CallBase::populateBundleOperandInfos((uint64_t)v19, 0, 0, 2u);
      llvm::Value::setName(v19, (uint64_t)v33);
      v24 = **v9;
      v25 = *(_QWORD *)(v24 + 40);
      *((_QWORD *)v17 + 17) = v25;
      *(_WORD *)(v25 + 18) &= ~0x8000u;
      if ((v17[119] & 0x10) != 0)
      {
        v28 = *(_QWORD *)(v25 + 56);
        if (v28)
        {
          v29 = *(llvm::ValueSymbolTable **)(v28 + 104);
          if (v29)
            llvm::ValueSymbolTable::reinsertValue(v29, (llvm::Value *)v19);
        }
      }
      v27 = *(_QWORD *)(v24 + 24);
      v26 = (_QWORD *)(v24 + 24);
      *((_QWORD *)v17 + 15) = v27;
      *((_QWORD *)v17 + 16) = v26;
      *(_QWORD *)(v27 + 8) = v21;
      *v26 = v21;
      ++v5;
    }
    while (v5 != v32);
  }
}

void sub_1C5EE1DC8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t ****v7;
  uint64_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  v1 = a1 + 9;
  v2 = (uint64_t *)a1[10];
  if (v2 != a1 + 9)
  {
    while (1)
    {
      v4 = v2 - 3;
      if (!v2)
        v4 = 0;
      v5 = (uint64_t *)v4[6];
      if (v5 != v4 + 5)
        break;
      v2 = (uint64_t *)v2[1];
      if (v2 == v1)
        return;
    }
    while (1)
    {
      if (v5)
        v6 = (uint64_t)(v5 - 3);
      else
        v6 = 0;
      v15 = v17;
      v16 = 0x400000000;
      llvm::findDbgUsers((uint64_t)&v15, v6);
      v7 = (uint64_t ****)v15;
      if ((_DWORD)v16)
      {
        v8 = 8 * v16;
        do
        {
          v9 = *v7;
          v10 = (*v7)[5];
          if (v10[7] != a1)
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v10 + 5), *v7);
            v11 = v9[3];
            v12 = v9[4];
            *v12 = (uint64_t *)v11;
            v11[1] = (uint64_t *)v12;
            v9[3] = 0;
            v9[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v9);
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
        v7 = (uint64_t ****)v15;
      }
      if (v7 != v17)
        free(v7);
      v5 = (uint64_t *)v5[1];
      v13 = v2 - 3;
      if (!v2)
        v13 = 0;
      if (v5 == v13 + 5)
        break;
LABEL_25:
      if (v2 == v1)
        return;
    }
    while (1)
    {
      v2 = (uint64_t *)v2[1];
      if (v2 == v1)
        break;
      v14 = v2 - 3;
      if (!v2)
        v14 = 0;
      v5 = (uint64_t *)v14[6];
      if (v5 != v14 + 5)
        goto LABEL_25;
    }
  }
}

unsigned __int8 *sub_1C5EE1F54(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v2 = a2;
  if (a2 && *a2 == 5)
  {
    v5 = a2;
    llvm::MetadataTracking::track((uint64_t)&v5, a2, 2);
    llvm::DebugLoc::replaceInlinedAtSubprogram((uint64_t *)&v5, *(unsigned __int8 **)(a1 + 16), *(uint64_t **)a1, *(_QWORD *)(a1 + 8), &v6);
    v2 = v6;
    if (v6)
      llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
    if (v5)
      llvm::MetadataTracking::untrack((uint64_t)&v5, v5);
  }
  return v2;
}

_QWORD *sub_1C5EE1FDC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63A8DAC(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5EE2094()
{
  __int128 v1;
  int v2;

  v2 = 1;
  *(_QWORD *)&v1 = "Aggregate arguments to code-extracted functions";
  *((_QWORD *)&v1 + 1) = 47;
  sub_1C61B2D38((uint64_t)&unk_1ED8260E8, "aggregate-extracted-args", &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8260E8, &dword_1C475E000);
}

void llvm::applyExtTspLayout(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unsigned int *a3@<X2>, char **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *j;
  unint64_t v27;
  _BYTE *v28;
  char **v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  void **v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  void **v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  __int128 v88;
  char *v89;
  char *v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  char *v96;
  _QWORD *v97;
  _QWORD *v98;
  char **v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  _QWORD *v114;
  char **v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v127;
  int64_t v128;
  _QWORD *k;
  _QWORD *v130;
  _BYTE *v131;
  _BYTE *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *m;
  char *v139;
  _QWORD *v140;
  char *v141;
  int64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  _QWORD *v147;
  _QWORD *n;
  _QWORD *v149;
  char *v150;
  char *v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  _BYTE *v163;
  _BYTE *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  int64x2_t v173;
  uint64_t *v174;
  _QWORD **v175;
  _QWORD **v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  unint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  char *v186;
  void *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  int64x2_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t *v220;
  _QWORD *v221;
  BOOL v222;
  uint64_t v223;
  BOOL v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int *v227;
  _QWORD *v228;
  double v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t *v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  double v238;
  uint64_t v239;
  int v240;
  _BYTE *v241;
  _BYTE *v242;
  int64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  char *v247;
  uint64_t v248;
  _QWORD *v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  char *v258;
  char *v259;
  _BOOL4 v260;
  _BOOL4 v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t **v264;
  uint64_t jj;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t **v272;
  uint64_t **v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t kk;
  uint64_t v279;
  BOOL v280;
  unint64_t v281;
  _DWORD *v282;
  uint64_t v283;
  uint64_t mm;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  size_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void **v304;
  void **v305;
  double *v306;
  double *v307;
  uint64_t *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  char *v312;
  char *v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t *v316;
  double v317;
  double v318;
  uint64_t v319;
  double v320;
  unsigned int v321;
  double *v322;
  double v323;
  double *v324;
  int v325;
  BOOL v326;
  unsigned int v327;
  double *v328;
  unint64_t v329;
  const std::nothrow_t *v330;
  unint64_t v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t *v334;
  uint64_t **v335;
  uint64_t **v336;
  char *v337;
  uint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  char *v346;
  char *v347;
  uint64_t v348;
  char *v349;
  char *v350;
  char *v351;
  void *v352;
  void *v353;
  _QWORD *v354;
  _QWORD *v355;
  void *v356;
  _QWORD *v357;
  _QWORD *v358;
  void *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  unint64_t *v364;
  uint64_t v365;
  char **v366;
  double *v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  _QWORD *v372;
  unsigned int *__p;
  uint64_t *__pa;
  uint64_t *__pb;
  uint64_t **__pc;
  uint64_t **__pd;
  uint64_t *__pe;
  uint64_t v379;
  uint64_t ii;
  double *v381;
  unint64_t v382;
  _OWORD v383[3];
  void *v384[2];
  void *v385[2];
  __int128 v386;
  void *v387[2];
  void *v388[4];
  __int128 v389;
  char *v390;
  _BYTE v391[24];
  char *v392;
  void **v393;
  void **v394[3];

  v9 = *a1;
  v8 = a1[1];
  memset(v383, 0, sizeof(v383));
  *(_OWORD *)v384 = 0u;
  *(_OWORD *)v385 = 0u;
  v386 = 0u;
  *(_OWORD *)v387 = 0u;
  memset(v388, 0, sizeof(v388));
  v389 = 0u;
  v390 = 0;
  v10 = v8 - v9;
  v11 = v10 >> 3;
  v382 = v10 >> 3;
  if (v10)
  {
    if ((unint64_t)v10 >= 0x1249249249249249)
      goto LABEL_511;
    v393 = v385;
    v12 = 112 * v11;
    *(_QWORD *)v391 = operator new(112 * v11);
    *(_QWORD *)&v391[8] = *(_QWORD *)v391;
    *(_QWORD *)&v391[16] = *(_QWORD *)v391;
    v392 = (char *)(*(_QWORD *)v391 + v12);
    sub_1C5EE40E0((uint64_t *)v384, v391);
    v13 = *(_QWORD **)&v391[8];
    for (i = *(_QWORD **)&v391[16]; i != v13; sub_1C5EE419C(i))
      i -= 14;
    if (*(_QWORD *)v391)
      operator delete(*(void **)v391);
    v11 = v382;
  }
  __p = a3;
  v366 = a4;
  if (v11)
  {
    v15 = 0;
    v16 = (unint64_t *)v384[1];
    do
    {
      if (*(_QWORD *)(*a1 + 8 * v15) <= 1uLL)
        v17 = 1;
      else
        v17 = *(_QWORD *)(*a1 + 8 * v15);
      if (v15 | *(_QWORD *)(*a2 + 8 * v15))
        v18 = *(_QWORD *)(*a2 + 8 * v15);
      else
        v18 = 1;
      if (v16 >= v385[0])
      {
        v19 = 0x6DB6DB6DB6DB6DB7 * (((char *)v16 - (char *)v384[0]) >> 4);
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) > 0x249249249249249)
          goto LABEL_511;
        if (0xDB6DB6DB6DB6DB6ELL * (((char *)v385[0] - (char *)v384[0]) >> 4) > v20)
          v20 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v385[0] - (char *)v384[0]) >> 4);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v385[0] - (char *)v384[0]) >> 4)) >= 0x124924924924924)
          v21 = 0x249249249249249;
        else
          v21 = v20;
        v393 = v385;
        if (v21 > 0x249249249249249)
LABEL_512:
          sub_1C4764EE4();
        v22 = 112 * v21;
        v23 = (char *)operator new(112 * v21);
        v24 = &v23[112 * v19];
        *(_QWORD *)v391 = v23;
        *(_QWORD *)&v391[8] = v24;
        *(_QWORD *)v24 = v15;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = v17;
        *((_QWORD *)v24 + 3) = v18;
        *((_OWORD *)v24 + 2) = 0u;
        *((_OWORD *)v24 + 3) = 0u;
        *((_OWORD *)v24 + 4) = 0u;
        *((_OWORD *)v24 + 5) = 0u;
        *((_OWORD *)v24 + 6) = 0u;
        *(_QWORD *)&v391[16] = v24 + 112;
        v392 = &v23[v22];
        sub_1C5EE40E0((uint64_t *)v384, v391);
        v16 = (unint64_t *)v384[1];
        v25 = *(_QWORD **)&v391[8];
        for (j = *(_QWORD **)&v391[16]; j != v25; sub_1C5EE419C(j))
          j -= 14;
        if (*(_QWORD *)v391)
          operator delete(*(void **)v391);
        v11 = v382;
      }
      else
      {
        *v16 = v15;
        v16[1] = 0;
        v16[2] = v17;
        v16[3] = v18;
        *((_OWORD *)v16 + 2) = 0u;
        *((_OWORD *)v16 + 3) = 0u;
        *((_OWORD *)v16 + 4) = 0u;
        *((_OWORD *)v16 + 5) = 0u;
        *((_OWORD *)v16 + 6) = 0u;
        v16 += 14;
      }
      v384[1] = v16;
      ++v15;
    }
    while (v15 < v11);
  }
  sub_1C617C694(v391, v11);
  sub_1C617C730((void **)v383);
  v383[0] = *(_OWORD *)v391;
  *(_QWORD *)&v383[1] = *(_QWORD *)&v391[16];
  memset(v391, 0, sizeof(v391));
  v394[0] = (void **)v391;
  sub_1C4DB60AC(v394);
  sub_1C617C694(v391, v382);
  sub_1C617C730((void **)&v383[1] + 1);
  *(_OWORD *)((char *)&v383[1] + 8) = *(_OWORD *)v391;
  *((_QWORD *)&v383[2] + 1) = *(_QWORD *)&v391[16];
  memset(v391, 0, sizeof(v391));
  v394[0] = (void **)v391;
  sub_1C4DB60AC(v394);
  v27 = __p[2];
  v28 = v385[1];
  v29 = v366;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v386 + 1) - (unint64_t)v385[1]) >> 3) < v27)
  {
    v30 = (_BYTE *)v386;
    v31 = 3 * v27;
    v32 = (char *)operator new(24 * v27);
    v33 = &v32[24 * ((v30 - v28) / 24)];
    v34 = v33;
    if (v30 != v28)
    {
      v35 = &v32[24 * ((v30 - v28) / 24)];
      do
      {
        v36 = *(_OWORD *)(v30 - 24);
        v34 = v35 - 24;
        *((_QWORD *)v35 - 1) = *((_QWORD *)v30 - 1);
        *(_OWORD *)(v35 - 24) = v36;
        v30 -= 24;
        v35 -= 24;
      }
      while (v30 != v28);
    }
    v385[1] = v34;
    *(_QWORD *)&v386 = v33;
    *((_QWORD *)&v386 + 1) = &v32[8 * v31];
    if (v28)
      operator delete(v28);
  }
  v37 = sub_1C63A8E9C((uint64_t)__p);
  __pa = (uint64_t *)(*(_QWORD *)__p + 24 * __p[4]);
  if (__pa != v37)
  {
    v39 = v37;
    v40 = v38;
    do
    {
      v41 = *v39;
      v42 = v39[1];
      if (*v39 == v42)
        goto LABEL_133;
      v43 = v39[2];
      v44 = *(_QWORD *)&v383[0] + 24 * v41;
      v47 = *(char **)(v44 + 8);
      v46 = (_QWORD *)(v44 + 8);
      v45 = v47;
      v48 = v46[1];
      v379 = *v39;
      v370 = v43;
      if ((unint64_t)v47 >= v48)
      {
        v50 = (void **)(*(_QWORD *)&v383[0] + 24 * v41);
        v51 = (char *)*v50;
        v52 = (v45 - (_BYTE *)*v50) >> 3;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 61)
          goto LABEL_511;
        v54 = v48 - (_QWORD)v51;
        if (v54 >> 2 > v53)
          v53 = v54 >> 2;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          if (v55 >> 61)
            goto LABEL_512;
          v56 = (char *)operator new(8 * v55);
          v41 = v379;
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[8 * v52];
        *(_QWORD *)v57 = v42;
        v49 = v57 + 8;
        while (v45 != v51)
        {
          v58 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          *((_QWORD *)v57 - 1) = v58;
          v57 -= 8;
        }
        *v50 = v57;
        *v46 = v49;
        v46[1] = &v56[8 * v55];
        if (v51)
        {
          operator delete(v51);
          v41 = v379;
        }
        v43 = v370;
      }
      else
      {
        *(_QWORD *)v45 = v42;
        v49 = v45 + 8;
      }
      *v46 = v49;
      v59 = *((_QWORD *)&v383[1] + 1) + 24 * v42;
      v62 = *(char **)(v59 + 8);
      v61 = (_QWORD *)(v59 + 8);
      v60 = v62;
      v63 = v61[1];
      if ((unint64_t)v62 >= v63)
      {
        v65 = (void **)(*((_QWORD *)&v383[1] + 1) + 24 * v42);
        v66 = (char *)*v65;
        v67 = (v60 - (_BYTE *)*v65) >> 3;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61)
          goto LABEL_511;
        v69 = v63 - (_QWORD)v66;
        if (v69 >> 2 > v68)
          v68 = v69 >> 2;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 >> 61)
            goto LABEL_512;
          v71 = (char *)operator new(8 * v70);
          v41 = v379;
        }
        else
        {
          v71 = 0;
        }
        v72 = &v71[8 * v67];
        *(_QWORD *)v72 = v41;
        v64 = v72 + 8;
        while (v60 != v66)
        {
          v73 = *((_QWORD *)v60 - 1);
          v60 -= 8;
          *((_QWORD *)v72 - 1) = v73;
          v72 -= 8;
        }
        *v65 = v72;
        *v61 = v64;
        v61[1] = &v71[8 * v70];
        if (v66)
        {
          operator delete(v66);
          v41 = v379;
        }
        v43 = v370;
      }
      else
      {
        *(_QWORD *)v60 = v41;
        v64 = v60 + 8;
      }
      *v61 = v64;
      v29 = v366;
      if (!v43)
        goto LABEL_133;
      v74 = (char *)v384[0];
      v75 = (char *)v384[0] + 112 * v41;
      v76 = (char *)v384[0] + 112 * v42;
      v77 = (_QWORD *)v386;
      v368 = (char *)v384[0];
      if ((unint64_t)v386 >= *((_QWORD *)&v386 + 1))
      {
        v79 = v385[1];
        v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v386 - (unint64_t)v385[1]) >> 3);
        v81 = v80 + 1;
        if (v80 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_511;
        if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v386 + 1) - (unint64_t)v385[1]) >> 3) > v81)
          v81 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v386 + 1) - (unint64_t)v385[1]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v386 + 1) - (unint64_t)v385[1]) >> 3) >= 0x555555555555555)
          v82 = 0xAAAAAAAAAAAAAAALL;
        else
          v82 = v81;
        if (v82 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_512;
        v83 = v43;
        v84 = 3 * v82;
        v85 = (char *)operator new(24 * v82);
        v86 = &v85[24 * v80];
        *(_QWORD *)v86 = v75;
        *((_QWORD *)v86 + 1) = v76;
        *((_QWORD *)v86 + 2) = v83;
        if (v77 == v79)
        {
          v89 = &v85[24 * v80];
        }
        else
        {
          v87 = &v85[24 * v80];
          do
          {
            v88 = *(_OWORD *)(v77 - 3);
            v89 = v87 - 24;
            *((_QWORD *)v87 - 1) = *(v77 - 1);
            *(_OWORD *)(v87 - 24) = v88;
            v77 -= 3;
            v87 -= 24;
          }
          while (v77 != v79);
        }
        v90 = &v85[8 * v84];
        v78 = v86 + 24;
        v385[1] = v89;
        *(_QWORD *)&v386 = v86 + 24;
        *((_QWORD *)&v386 + 1) = v90;
        if (v79)
          operator delete(v79);
        v41 = v379;
        v74 = v368;
      }
      else
      {
        *(_QWORD *)v386 = v75;
        v77[1] = v76;
        v78 = v77 + 3;
        v77[2] = v43;
      }
      *(_QWORD *)&v386 = v78;
      v91 = &v74[112 * v42];
      v94 = *((_QWORD *)v91 + 13);
      v93 = v91 + 104;
      v92 = v94;
      v95 = v78 - 3;
      v97 = v93 - 1;
      v96 = (char *)*(v93 - 1);
      if ((unint64_t)v96 >= v94)
      {
        v99 = (char **)(v93 - 2);
        v100 = (char *)*(v93 - 2);
        v101 = (v96 - v100) >> 3;
        v102 = v101 + 1;
        if ((unint64_t)(v101 + 1) >> 61)
          goto LABEL_511;
        v103 = v92 - (_QWORD)v100;
        if (v103 >> 2 > v102)
          v102 = v103 >> 2;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
          v102 = 0x1FFFFFFFFFFFFFFFLL;
        v371 = v102;
        if (v102)
        {
          if (v102 >> 61)
            goto LABEL_512;
          v104 = (char *)operator new(8 * v102);
          v41 = v379;
        }
        else
        {
          v104 = 0;
        }
        v105 = &v104[8 * v101];
        *(_QWORD *)v105 = v95;
        v98 = v105 + 8;
        if (v96 != v100)
        {
          do
          {
            v106 = *((_QWORD *)v96 - 1);
            v96 -= 8;
            *((_QWORD *)v105 - 1) = v106;
            v105 -= 8;
          }
          while (v96 != v100);
          v96 = *v99;
        }
        *v99 = v105;
        *v97 = v98;
        *v93 = &v104[8 * v371];
        if (v96)
        {
          operator delete(v96);
          v41 = v379;
        }
        v74 = v368;
      }
      else
      {
        *(_QWORD *)v96 = v95;
        v98 = v96 + 8;
      }
      *v97 = v98;
      v107 = &v74[112 * v41];
      v110 = *((_QWORD *)v107 + 10);
      v109 = v107 + 80;
      v108 = v110;
      v111 = v386 - 24;
      v113 = v109 - 1;
      v112 = (char *)*(v109 - 1);
      if ((unint64_t)v112 >= v110)
      {
        v115 = (char **)(v109 - 2);
        v116 = (char *)*(v109 - 2);
        v117 = (v112 - v116) >> 3;
        v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 61)
          goto LABEL_511;
        v119 = v108 - (_QWORD)v116;
        if (v119 >> 2 > v118)
          v118 = v119 >> 2;
        if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
          v120 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v120 = v118;
        if (v120)
        {
          if (v120 >> 61)
            goto LABEL_512;
          v121 = (char *)operator new(8 * v120);
        }
        else
        {
          v121 = 0;
        }
        v122 = &v121[8 * v117];
        *(_QWORD *)v122 = v111;
        v114 = v122 + 8;
        if (v112 == v116)
        {
          v29 = v366;
        }
        else
        {
          v29 = v366;
          do
          {
            v123 = *((_QWORD *)v112 - 1);
            v112 -= 8;
            *((_QWORD *)v122 - 1) = v123;
            v122 -= 8;
          }
          while (v112 != v116);
          v112 = *v115;
        }
        *v115 = v122;
        *v113 = v114;
        *v109 = &v121[8 * v120];
        if (v112)
          operator delete(v112);
      }
      else
      {
        *(_QWORD *)v112 = v111;
        v114 = v112 + 8;
        v29 = v366;
      }
      *v113 = v114;
LABEL_133:
      while (1)
      {
        v39 += 3;
        if (v39 == v40)
          break;
        v124 = v39[1];
        if ((*v39 != -1 || v124 != -1) && (*v39 != -2 || v124 != -2))
          goto LABEL_144;
      }
      v39 = v40;
LABEL_144:
      ;
    }
    while (v39 != __pa);
  }
  v127 = v382;
  if (v382 > ((char *)v388[0] - (char *)v387[0]) >> 6)
  {
    if (v382 >> 58)
      goto LABEL_511;
    v128 = (char *)v387[1] - (char *)v387[0];
    v393 = v388;
    *(_QWORD *)v391 = operator new(v382 << 6);
    *(_QWORD *)&v391[8] = *(_QWORD *)v391 + v128;
    *(_QWORD *)&v391[16] = *(_QWORD *)v391 + v128;
    v392 = (char *)(*(_QWORD *)v391 + (v382 << 6));
    sub_1C5EE41E0((uint64_t *)v387, v391);
    v130 = *(_QWORD **)&v391[8];
    for (k = *(_QWORD **)&v391[16]; k != v130; sub_1C5EE4294(k))
      k -= 8;
    if (*(_QWORD *)v391)
      operator delete(*(void **)v391);
    v127 = v382;
  }
  v131 = (_BYTE *)v389;
  if (v127 > (uint64_t)&v390[-v389] >> 3)
  {
    if (v127 >> 61)
      goto LABEL_511;
    v132 = (_BYTE *)*((_QWORD *)&v389 + 1);
    v133 = (char *)operator new(8 * v127);
    v134 = &v133[(v132 - v131) & 0xFFFFFFFFFFFFFFF8];
    v135 = v134;
    if (v132 != v131)
    {
      v135 = &v133[(v132 - v131) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v136 = *((_QWORD *)v132 - 1);
        v132 -= 8;
        *((_QWORD *)v135 - 1) = v136;
        v135 -= 8;
      }
      while (v132 != v131);
    }
    *(_QWORD *)&v389 = v135;
    *((_QWORD *)&v389 + 1) = v134;
    v390 = &v133[8 * v127];
    if (v131)
      operator delete(v131);
  }
  v137 = v384[0];
  for (m = v384[1]; v137 != m; v137 += 14)
  {
    v139 = (char *)v387[1];
    if (v387[1] >= v388[0])
    {
      v142 = ((char *)v387[1] - (char *)v387[0]) >> 6;
      if ((unint64_t)(v142 + 1) >> 58)
        goto LABEL_511;
      v143 = ((char *)v388[0] - (char *)v387[0]) >> 5;
      if (v143 <= v142 + 1)
        v143 = v142 + 1;
      if ((void *)((char *)v388[0] - (char *)v387[0]) >= (void *)0x7FFFFFFFFFFFFFC0)
        v144 = 0x3FFFFFFFFFFFFFFLL;
      else
        v144 = v143;
      v393 = v388;
      if (v144)
      {
        if (v144 >> 58)
          goto LABEL_512;
        v145 = (char *)operator new(v144 << 6);
      }
      else
      {
        v145 = 0;
      }
      v146 = &v145[64 * v142];
      *(_QWORD *)v391 = v145;
      *(_QWORD *)&v391[8] = v146;
      v392 = &v145[64 * v144];
      *(_QWORD *)v146 = *v137;
      *(_OWORD *)(v146 + 24) = 0u;
      *(_OWORD *)(v146 + 8) = 0u;
      v147 = operator new(8uLL);
      *((_QWORD *)v146 + 2) = v147;
      *v147 = v137;
      *(int64x2_t *)(v146 + 24) = vdupq_n_s64((unint64_t)(v147 + 1));
      *((_QWORD *)v146 + 6) = 0;
      *((_QWORD *)v146 + 7) = 0;
      *((_QWORD *)v146 + 5) = 0;
      *(_QWORD *)&v391[16] = v146 + 64;
      sub_1C5EE41E0((uint64_t *)v387, v391);
      v141 = (char *)v387[1];
      v149 = *(_QWORD **)&v391[8];
      for (n = *(_QWORD **)&v391[16]; n != v149; sub_1C5EE4294(n))
        n -= 8;
      if (*(_QWORD *)v391)
        operator delete(*(void **)v391);
    }
    else
    {
      *(_QWORD *)v387[1] = *v137;
      *(_OWORD *)(v139 + 8) = 0u;
      *(_OWORD *)(v139 + 24) = 0u;
      v140 = operator new(8uLL);
      *((_QWORD *)v139 + 2) = v140;
      *((_QWORD *)v139 + 4) = v140 + 1;
      *v140 = v137;
      *((_QWORD *)v139 + 3) = v140 + 1;
      v141 = v139 + 64;
      *((_QWORD *)v139 + 6) = 0;
      *((_QWORD *)v139 + 7) = 0;
      *((_QWORD *)v139 + 5) = 0;
    }
    v387[1] = v141;
    v150 = v141 - 64;
    v137[4] = v141 - 64;
    if (v137[3])
    {
      v151 = (char *)*((_QWORD *)&v389 + 1);
      if (*((_QWORD *)&v389 + 1) >= (unint64_t)v390)
      {
        v153 = (char *)v389;
        v154 = (uint64_t)(*((_QWORD *)&v389 + 1) - v389) >> 3;
        v155 = v154 + 1;
        if ((unint64_t)(v154 + 1) >> 61)
          goto LABEL_511;
        v156 = (uint64_t)&v390[-v389];
        if ((uint64_t)&v390[-v389] >> 2 > v155)
          v155 = v156 >> 2;
        if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
          v157 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v157 = v155;
        if (v157)
        {
          if (v157 >> 61)
            goto LABEL_512;
          v158 = (char *)operator new(8 * v157);
        }
        else
        {
          v158 = 0;
        }
        v159 = &v158[8 * v154];
        *(_QWORD *)v159 = v150;
        v152 = v159 + 8;
        if (v151 != v153)
        {
          do
          {
            v160 = *((_QWORD *)v151 - 1);
            v151 -= 8;
            *((_QWORD *)v159 - 1) = v160;
            v159 -= 8;
          }
          while (v151 != v153);
          v151 = (char *)v389;
        }
        *(_QWORD *)&v389 = v159;
        *((_QWORD *)&v389 + 1) = v152;
        v390 = &v158[8 * v157];
        v29 = v366;
        if (v151)
          operator delete(v151);
      }
      else
      {
        **((_QWORD **)&v389 + 1) = v150;
        v152 = v151 + 8;
      }
      *((_QWORD *)&v389 + 1) = v152;
    }
  }
  v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v386 - (unint64_t)v385[1]) >> 3);
  v162 = (char *)v388[3];
  v163 = v388[1];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v388[3] - (char *)v388[1]) >> 5) < v161)
  {
    if (v161 <= 0x2AAAAAAAAAAAAAALL)
    {
      v164 = v388[2];
      v393 = &v388[3];
      v165 = (uint64_t)(v386 - (unint64_t)v385[1]) >> 3;
      v166 = (char *)operator new(32 * v165);
      v167 = &v166[v164 - v163];
      *(_QWORD *)v391 = v166;
      *(_QWORD *)&v391[8] = v167;
      v168 = &v166[32 * v165];
      *(_QWORD *)&v391[16] = v167;
      v392 = v168;
      if (v164 == v163)
      {
        v173 = vdupq_n_s64((unint64_t)v163);
        v169 = &v166[v164 - v163];
      }
      else
      {
        v169 = &v166[v164 - v163];
        do
        {
          *((_OWORD *)v169 - 6) = *((_OWORD *)v164 - 6);
          *((_QWORD *)v169 - 9) = 0;
          *((_QWORD *)v169 - 8) = 0;
          *((_QWORD *)v169 - 10) = 0;
          *((_OWORD *)v169 - 5) = *((_OWORD *)v164 - 5);
          *((_QWORD *)v169 - 8) = *((_QWORD *)v164 - 8);
          *((_QWORD *)v164 - 10) = 0;
          *((_QWORD *)v164 - 9) = 0;
          *((_QWORD *)v164 - 8) = 0;
          v170 = *(_OWORD *)(v164 - 56);
          v171 = *(_OWORD *)(v164 - 40);
          v172 = *(_OWORD *)(v164 - 24);
          *((_WORD *)v169 - 4) = *((_WORD *)v164 - 4);
          *(_OWORD *)(v169 - 24) = v172;
          *(_OWORD *)(v169 - 40) = v171;
          *(_OWORD *)(v169 - 56) = v170;
          v169 -= 96;
          v164 -= 96;
        }
        while (v164 != v163);
        v173 = *(int64x2_t *)&v388[1];
        v162 = (char *)v388[3];
        v167 = *(char **)&v391[16];
        v168 = v392;
      }
      v388[1] = v169;
      v388[2] = v167;
      *(int64x2_t *)&v391[8] = v173;
      v388[3] = v168;
      v392 = v162;
      *(_QWORD *)v391 = v173.i64[0];
      sub_1C5EE42D8((uint64_t)v391);
      goto LABEL_206;
    }
LABEL_511:
    abort();
  }
LABEL_206:
  v174 = (uint64_t *)v384[0];
  __pb = (uint64_t *)v384[1];
  if (v384[0] == v384[1])
  {
    *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
  }
  else
  {
    do
    {
      v176 = (_QWORD **)v174[8];
      v175 = (_QWORD **)v174[9];
      while (v176 != v175)
      {
        v177 = (uint64_t)*v176;
        v178 = (*v176)[1];
        v179 = v174[4];
        v180 = *(_QWORD **)(v179 + 40);
        v181 = *(_QWORD **)(v179 + 48);
        if (v180 == v181)
          goto LABEL_216;
        while (*v180 != *(_QWORD *)(v178 + 32))
        {
          v180 += 2;
          if (v180 == v181)
            goto LABEL_216;
        }
        v182 = (_QWORD *)v180[1];
        if (!v182)
        {
LABEL_216:
          v186 = (char *)v388[2];
          if (v388[2] >= v388[3])
          {
            v188 = 0xAAAAAAAAAAAAAAABLL * (((char *)v388[2] - (char *)v388[1]) >> 5);
            v189 = v188 + 1;
            if (v188 + 1 > 0x2AAAAAAAAAAAAAALL)
              goto LABEL_511;
            if (0x5555555555555556 * (((char *)v388[3] - (char *)v388[1]) >> 5) > v189)
              v189 = 0x5555555555555556 * (((char *)v388[3] - (char *)v388[1]) >> 5);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v388[3] - (char *)v388[1]) >> 5) >= 0x155555555555555)
              v190 = 0x2AAAAAAAAAAAAAALL;
            else
              v190 = v189;
            v392 = 0;
            v393 = &v388[3];
            if (v190)
            {
              if (v190 > 0x2AAAAAAAAAAAAAALL)
                goto LABEL_512;
              v191 = (char *)operator new(96 * v190);
            }
            else
            {
              v191 = 0;
            }
            *(_QWORD *)v391 = v191;
            *(_QWORD *)&v391[8] = &v191[96 * v188];
            *(_QWORD *)&v391[16] = *(_QWORD *)&v391[8];
            v392 = &v191[96 * v190];
            sub_1C5EE4338(*(uint64_t *)&v391[8], *v176);
            v192 = *(char **)&v391[8];
            v187 = (void *)(*(_QWORD *)&v391[16] + 96);
            *(_QWORD *)&v391[16] += 96;
            v194 = (char *)v388[1];
            v193 = (char *)v388[2];
            if (v388[2] == v388[1])
            {
              v198 = vdupq_n_s64((unint64_t)v388[2]);
            }
            else
            {
              do
              {
                *((_OWORD *)v192 - 6) = *((_OWORD *)v193 - 6);
                *((_QWORD *)v192 - 9) = 0;
                *((_QWORD *)v192 - 8) = 0;
                *((_QWORD *)v192 - 10) = 0;
                *((_OWORD *)v192 - 5) = *((_OWORD *)v193 - 5);
                *((_QWORD *)v192 - 8) = *((_QWORD *)v193 - 8);
                *((_QWORD *)v193 - 10) = 0;
                *((_QWORD *)v193 - 9) = 0;
                *((_QWORD *)v193 - 8) = 0;
                v195 = *(_OWORD *)(v193 - 56);
                v196 = *(_OWORD *)(v193 - 40);
                v197 = *(_OWORD *)(v193 - 24);
                *((_WORD *)v192 - 4) = *((_WORD *)v193 - 4);
                *(_OWORD *)(v192 - 24) = v197;
                *(_OWORD *)(v192 - 40) = v196;
                *(_OWORD *)(v192 - 56) = v195;
                v192 -= 96;
                v193 -= 96;
              }
              while (v193 != v194);
              v198 = *(int64x2_t *)&v388[1];
              v187 = *(void **)&v391[16];
            }
            v388[1] = v192;
            v388[2] = v187;
            *(int64x2_t *)&v391[8] = v198;
            v199 = (char *)v388[3];
            v388[3] = v392;
            v392 = v199;
            *(_QWORD *)v391 = v198.i64[0];
            sub_1C5EE42D8((uint64_t)v391);
          }
          else
          {
            sub_1C5EE4338((uint64_t)v388[2], *v176);
            v187 = v186 + 96;
          }
          v388[2] = v187;
          sub_1C5EE3FE0((_QWORD *)v174[4], *(_QWORD *)(v178 + 32), (uint64_t)v187 - 96);
          sub_1C5EE3FE0(*(_QWORD **)(v178 + 32), v174[4], (uint64_t)v388[2] - 96);
        }
        else
        {
          v184 = (_QWORD *)v182[3];
          v183 = v182[4];
          if ((unint64_t)v184 >= v183)
          {
            v200 = v182[2];
            v201 = ((uint64_t)v184 - v200) >> 3;
            if ((unint64_t)(v201 + 1) >> 61)
              goto LABEL_511;
            v202 = v183 - v200;
            v203 = v202 >> 2;
            if (v202 >> 2 <= (unint64_t)(v201 + 1))
              v203 = v201 + 1;
            if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
              v204 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v204 = v203;
            if (v204)
            {
              if (v204 >> 61)
                goto LABEL_512;
              v205 = (char *)operator new(8 * v204);
            }
            else
            {
              v205 = 0;
            }
            v206 = &v205[8 * v201];
            *(_QWORD *)v206 = v177;
            v185 = v206 + 8;
            v208 = (char *)v182[2];
            v207 = (char *)v182[3];
            if (v207 != v208)
            {
              do
              {
                v209 = *((_QWORD *)v207 - 1);
                v207 -= 8;
                *((_QWORD *)v206 - 1) = v209;
                v206 -= 8;
              }
              while (v207 != v208);
              v207 = (char *)v182[2];
            }
            v182[2] = v206;
            v182[3] = v185;
            v182[4] = &v205[8 * v204];
            if (v207)
              operator delete(v207);
          }
          else
          {
            *v184 = v177;
            v185 = v184 + 1;
          }
          v182[3] = v185;
        }
        ++v176;
      }
      v174 += 14;
    }
    while (v174 != __pb);
    v210 = (uint64_t *)v384[0];
    v211 = (uint64_t *)v384[1];
    v29 = v366;
    v366[1] = 0;
    v366[2] = 0;
    *v366 = 0;
    if (v210 != v211)
    {
      v212 = *(_QWORD *)&v383[0];
      v213 = *((_QWORD *)&v383[1] + 1);
      v214 = v210;
      do
      {
        v215 = *(uint64_t **)(v212 + 24 * *v214);
        if (*(_QWORD *)(v212 + 24 * *v214 + 8) - (_QWORD)v215 == 8)
        {
          v216 = *v215;
          if (v216 && *(_QWORD *)(v213 + 24 * v216 + 8) - *(_QWORD *)(v213 + 24 * v216) == 8)
          {
            v218 = &v210[14 * v216];
            v214[6] = (uint64_t)v218;
            v218[7] = (uint64_t)v214;
          }
        }
        v214 += 14;
      }
      while (v214 != v211);
      v219 = v210;
      do
      {
        v220 = (uint64_t *)v219[6];
        if (v220)
        {
          v221 = (_QWORD *)v219[7];
          if (v221)
          {
            if (v220 == v219)
              goto LABEL_272;
            do
            {
              v220 = (uint64_t *)v220[6];
              if (v220)
                v222 = v220 == v219;
              else
                v222 = 1;
            }
            while (!v222);
            if (v220)
            {
LABEL_272:
              v210[14 * *v221 + 6] = 0;
              v219[7] = 0;
            }
          }
        }
        v219 += 14;
      }
      while (v219 != v211);
      do
      {
        v223 = v210[6];
        if (v210[7])
          v224 = 1;
        else
          v224 = v223 == 0;
        if (!v224)
        {
          do
          {
            sub_1C5EE4394((uint64_t)&v382, v210[4], *(_QWORD *)(v223 + 32), 0, 0);
            v223 = *(_QWORD *)(v223 + 48);
          }
          while (v223);
        }
        v210 += 14;
      }
      while (v210 != v211);
    }
  }
  v225 = *((_QWORD *)&v389 + 1);
  v226 = v389;
  if (*((_QWORD *)&v389 + 1) - (_QWORD)v389 >= 9uLL)
  {
    v227 = (unsigned int *)&unk_1ED826000;
    do
    {
      if (v226 == v225)
        break;
      v228 = 0;
      v364 = 0;
      v362 = 0;
      v363 = 0;
      v229 = -1.0;
      v360 = v225;
      do
      {
        v361 = v226;
        v230 = *(_QWORD **)v226;
        v231 = *(_QWORD *)(*(_QWORD *)v226 + 40);
        v232 = *(_QWORD *)(*(_QWORD *)v226 + 48);
        if (v231 != v232)
        {
          v365 = *(_QWORD *)(*(_QWORD *)v226 + 48);
          do
          {
            v233 = *(unint64_t **)v231;
            if (v230 != *(_QWORD **)v231
              && ((uint64_t)(v233[3] - v233[2]) >> 3) + ((uint64_t)(v230[3] - v230[2]) >> 3) < (unint64_t)v227[234])
            {
              v234 = *(_QWORD **)(v231 + 8);
              if ((_QWORD *)*v234 == v230)
                v235 = 88;
              else
                v235 = 89;
              if (*((_BYTE *)v234 + v235))
              {
                v236 = v234 + 5;
                v237 = 8;
                if ((_QWORD *)*v234 == v230)
                  v237 = 5;
                else
                  v236 = v234 + 8;
                v238 = *(double *)&v234[v237];
                v239 = v236[1];
                v240 = *((_DWORD *)v236 + 4);
              }
              else
              {
                v242 = (_BYTE *)v234[2];
                v241 = (_BYTE *)v234[3];
                v243 = v241 - v242;
                if (v241 == v242)
                {
                  v247 = 0;
                  v248 = 0;
                }
                else
                {
                  if (v243 < 0)
                    goto LABEL_511;
                  v244 = v228;
                  v245 = v231;
                  v246 = *(_QWORD **)(v231 + 8);
                  v247 = (char *)operator new(v241 - v242);
                  v248 = (uint64_t)&v247[8 * (v243 >> 3)];
                  memmove(v247, v242, v243);
                  v234 = v246;
                  v231 = v245;
                  v228 = v244;
                }
                v249 = (_QWORD *)v230[5];
                v250 = (_QWORD *)v230[6];
                v369 = v231;
                v372 = v228;
                v367 = (double *)v234;
                if (v249 == v250)
                  goto LABEL_316;
                while ((_QWORD *)*v249 != v230)
                {
                  v249 += 2;
                  if (v249 == v250)
                    goto LABEL_316;
                }
                v251 = v249[1];
                if (!v251 || (v252 = *(uint64_t **)(v251 + 16), v253 = *(_QWORD *)(v251 + 24) - (_QWORD)v252, v253 < 1))
                {
LABEL_316:
                  v259 = v247;
                }
                else
                {
                  v254 = v253 >> 3;
                  v255 = v248 - (_QWORD)v247;
                  v256 = (v248 - (uint64_t)v247) >> 3;
                  v257 = (v253 >> 3) + v256;
                  if (v257 >> 61)
                    goto LABEL_511;
                  if (v255 >> 2 > v257)
                    v257 = v255 >> 2;
                  if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFF8)
                    v257 = 0x1FFFFFFFFFFFFFFFLL;
                  if (v257)
                  {
                    if (v257 >> 61)
                      goto LABEL_512;
                    v258 = (char *)operator new(8 * v257);
                  }
                  else
                  {
                    v258 = 0;
                  }
                  v287 = &v247[v255 & 0xFFFFFFFFFFFFFFF8];
                  v259 = &v258[8 * v256];
                  v288 = &v259[8 * v254];
                  v289 = 8 * v254;
                  v290 = v259;
                  do
                  {
                    v291 = *v252++;
                    *(_QWORD *)v290 = v291;
                    v290 += 8;
                    v289 -= 8;
                  }
                  while (v289);
                  if ((unint64_t)v255 >= 8)
                  {
                    v292 = 8 * v256;
                    do
                    {
                      *(_QWORD *)&v258[v292 - 8] = *(_QWORD *)&v247[v292 - 8];
                      v292 -= 8;
                    }
                    while (v292);
                    v259 = v258;
                  }
                  v293 = v248 - (_QWORD)v287;
                  if (v293)
                    memcpy(v288, v287, v293);
                  v248 = (uint64_t)&v288[v293];
                  if (v247)
                    operator delete(v247);
                }
                sub_1C5EE4DD8((uint64_t)v391, (uint64_t)v230, v233[2], v233[3], (uint64_t)v259, v248, 0, 0);
                v260 = *(double *)v391 > 0.00000001;
                v261 = *(double *)v391 > -0.99999999;
                if (v260 && v261)
                  v239 = *(_QWORD *)&v391[8];
                else
                  v239 = 0;
                if (v260 && v261)
                  v240 = *(_DWORD *)&v391[16];
                else
                  v240 = 0;
                if (v260 && v261)
                  v238 = *(double *)v391;
                else
                  v238 = -1.0;
                if (byte_1ED826528)
                {
                  v262 = *(_QWORD *)v233[2];
                  v264 = *(uint64_t ***)(v262 + 88);
                  v263 = *(uint64_t ***)(v262 + 96);
                  __pc = v263;
                  for (ii = v248; v264 != v263; ++v264)
                  {
                    v266 = **v264;
                    if (*(_QWORD **)(v266 + 32) == v230)
                    {
                      v267 = *(_QWORD *)(v266 + 8);
                      v268 = v267 + 1;
                      v269 = operator new(8uLL);
                      *v269 = 0x300000001;
                      if (v267 == -1 || (v270 = v230[2], v268 == (v230[3] - v270) >> 3))
                      {
                        v248 = ii;
                      }
                      else
                      {
                        v248 = ii;
                        if (!*(_QWORD *)(*(_QWORD *)(v270 + 8 * v267) + 48))
                        {
                          for (jj = 0; jj != 8; jj += 4)
                          {
                            sub_1C5EE4DD8((uint64_t)v391, (uint64_t)v230, v233[2], v233[3], (uint64_t)v259, ii, v268, *(_DWORD *)((char *)v269 + jj));
                            if (*(double *)v391 > 0.00000001 && *(double *)v391 > v238 + 0.00000001)
                            {
                              v239 = *(_QWORD *)&v391[8];
                              v240 = *(_DWORD *)&v391[16];
                              v238 = *(double *)v391;
                            }
                          }
                        }
                      }
                      operator delete(v269);
                      v263 = __pc;
                    }
                  }
                  v271 = *(_QWORD *)(v233[3] - 8);
                  v273 = *(uint64_t ***)(v271 + 64);
                  v272 = *(uint64_t ***)(v271 + 72);
                  for (__pd = v272; v273 != v272; ++v273)
                  {
                    v274 = **v273;
                    if (*(_QWORD **)(v274 + 32) == v230)
                    {
                      v275 = *(_QWORD *)(v274 + 8);
                      v276 = operator new(8uLL);
                      *v276 = 0x200000001;
                      if (v275)
                      {
                        v277 = v230[2];
                        if (v275 != (v230[3] - v277) >> 3 && !*(_QWORD *)(*(_QWORD *)(v277 + 8 * v275 - 8) + 48))
                        {
                          for (kk = 0; kk != 8; kk += 4)
                          {
                            sub_1C5EE4DD8((uint64_t)v391, (uint64_t)v230, v233[2], v233[3], (uint64_t)v259, v248, v275, *(_DWORD *)((char *)v276 + kk));
                            if (*(double *)v391 > 0.00000001 && *(double *)v391 > v238 + 0.00000001)
                            {
                              v239 = *(_QWORD *)&v391[8];
                              v240 = *(_DWORD *)&v391[16];
                              v238 = *(double *)v391;
                            }
                          }
                        }
                      }
                      operator delete(v276);
                      v272 = __pd;
                    }
                  }
                }
                v279 = v230[3] - v230[2];
                v280 = (unint64_t)v279 < 9 || v279 >> 3 > (unint64_t)dword_1ED826468;
                if (!v280)
                {
                  v281 = 1;
                  do
                  {
                    v282 = operator new(0xCuLL);
                    *(_QWORD *)v282 = 0x200000001;
                    v282[2] = 3;
                    v283 = v230[2];
                    if (v281 != (v230[3] - v283) >> 3 && !*(_QWORD *)(*(_QWORD *)(v283 + 8 * v281 - 8) + 48))
                    {
                      for (mm = 0; mm != 3; ++mm)
                      {
                        sub_1C5EE4DD8((uint64_t)v391, (uint64_t)v230, v233[2], v233[3], (uint64_t)v259, v248, v281, v282[mm]);
                        if (*(double *)v391 > 0.00000001 && *(double *)v391 > v238 + 0.00000001)
                        {
                          v239 = *(_QWORD *)&v391[8];
                          v240 = *(_DWORD *)&v391[16];
                          v238 = *(double *)v391;
                        }
                      }
                    }
                    operator delete(v282);
                    ++v281;
                  }
                  while (v281 < (uint64_t)(v230[3] - v230[2]) >> 3);
                }
                if (*(_QWORD **)v367 == v230)
                {
                  v367[5] = v238;
                  *((_QWORD *)v367 + 6) = v239;
                  *((_DWORD *)v367 + 14) = v240;
                  *((_BYTE *)v367 + 88) = 1;
                }
                else
                {
                  v367[8] = v238;
                  *((_QWORD *)v367 + 9) = v239;
                  *((_DWORD *)v367 + 20) = v240;
                  *((_BYTE *)v367 + 89) = 1;
                }
                v227 = (_DWORD *)&unk_1ED826000;
                if (v259)
                  operator delete(v259);
                v232 = v365;
                v29 = v366;
                v231 = v369;
                v228 = v372;
              }
              if (v238 > 0.00000001)
              {
                if (v238 > v229 + 0.00000001
                  || vabdd_f64(v238, v229) < 0.00000001
                  && (v230 == v228 ? (v285 = *v233, v286 = *v364, v228 = v230) : (_QWORD *)(v285 = *v230, v286 = *v228),
                      v285 < v286))
                {
                  v363 = v240;
                  v362 = v239;
                  v229 = v238;
                  v364 = v233;
                  v228 = v230;
                }
              }
            }
            v231 += 16;
          }
          while (v231 != v232);
        }
        v226 = v361 + 8;
      }
      while (v361 + 8 != v360);
      if (v229 <= 0.00000001)
        break;
      sub_1C5EE4394((uint64_t)&v382, (uint64_t)v228, (uint64_t)v364, v362, v363);
      v225 = *((_QWORD *)&v389 + 1);
      v226 = v389;
    }
    while (*((_QWORD *)&v389 + 1) - (_QWORD)v389 > 8uLL);
  }
  v294 = v382;
  if (v382)
  {
    v295 = 0;
    do
    {
      v296 = *(_QWORD *)(*(_QWORD *)&v383[0] + 24 * v295 + 8) - *(_QWORD *)(*(_QWORD *)&v383[0] + 24 * v295);
      if (v296)
      {
        if ((unint64_t)(v296 >> 3) <= 1)
          v297 = 1;
        else
          v297 = v296 >> 3;
        v298 = 8 * (v296 >> 3) - 8;
        do
        {
          v299 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v383[0] + 24 * v295) + v298);
          v300 = *((_QWORD *)v384[0] + 14 * v295 + 4);
          v301 = *((_QWORD *)v384[0] + 14 * v299 + 4);
          if (v300 != v301)
          {
            v302 = ***(_QWORD ***)(v301 + 16);
            if (v302)
            {
              if (v302 == v299 && **(_QWORD **)(*(_QWORD *)(v300 + 24) - 8) == v295)
                sub_1C5EE4394((uint64_t)&v382, v300, v301, 0, 0);
            }
          }
          v298 -= 8;
          --v297;
        }
        while (v297);
        v294 = v382;
      }
      ++v295;
    }
    while (v295 < v294);
  }
  memset(v391, 0, 20);
  v304 = (void **)v387[0];
  v305 = (void **)v387[1];
  if (v387[0] != v387[1])
  {
    v306 = 0;
    v307 = 0;
    v308 = 0;
    while (v304[2] == v304[3])
    {
      v381 = v307;
LABEL_452:
      v304 += 8;
      if (v304 == v305)
        goto LABEL_458;
    }
    if (v307 >= v306)
    {
      v309 = ((char *)v307 - (char *)v308) >> 3;
      v310 = v309 + 1;
      if ((unint64_t)(v309 + 1) >> 61)
        goto LABEL_511;
      if (((char *)v306 - (char *)v308) >> 2 > v310)
        v310 = ((char *)v306 - (char *)v308) >> 2;
      if ((unint64_t)((char *)v306 - (char *)v308) >= 0x7FFFFFFFFFFFFFF8)
        v311 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v311 = v310;
      if (v311)
      {
        if (v311 >> 61)
          goto LABEL_512;
        v312 = (char *)operator new(8 * v311);
      }
      else
      {
        v312 = 0;
      }
      v313 = &v312[8 * v309];
      *(_QWORD *)v313 = v304;
      v381 = (double *)(v313 + 8);
      if (v307 != (double *)v308)
      {
        do
        {
          v314 = *((_QWORD *)v307-- - 1);
          *((_QWORD *)v313 - 1) = v314;
          v313 -= 8;
        }
        while (v307 != (double *)v308);
        v307 = (double *)v308;
      }
      v308 = (uint64_t *)v313;
      v306 = (double *)&v312[8 * v311];
      if (v307)
        operator delete(v307);
    }
    else
    {
      *(_QWORD *)v307 = v304;
      v381 = v307 + 1;
    }
    v315 = (uint64_t *)v304[2];
    v316 = (uint64_t *)v304[3];
    if (v315 == v316)
    {
      v320 = NAN;
    }
    else
    {
      v317 = 0.0;
      v318 = 0.0;
      do
      {
        v319 = *v315++;
        v317 = v317 + (double)*(unint64_t *)(v319 + 16);
        v318 = v318 + (double)*(unint64_t *)(v319 + 24);
      }
      while (v315 != v316);
      v320 = v318 / v317;
    }
    v394[0] = v304;
    if (*(_DWORD *)&v391[16])
    {
      v321 = (*(_DWORD *)&v391[16] - 1) & ((v304 >> 4) ^ (v304 >> 9));
      v322 = (double *)(*(_QWORD *)v391 + 16 * v321);
      v323 = *v322;
      if (v304 == *(void ***)v322)
      {
LABEL_451:
        v322[1] = v320;
        v307 = v381;
        goto LABEL_452;
      }
      v324 = 0;
      v325 = 1;
      while (v323 != NAN)
      {
        if (v324)
          v326 = 0;
        else
          v326 = *(_QWORD *)&v323 == -8192;
        if (v326)
          v324 = v322;
        v327 = v321 + v325++;
        v321 = v327 & (*(_DWORD *)&v391[16] - 1);
        v322 = (double *)(*(_QWORD *)v391 + 16 * v321);
        v323 = *v322;
        if (v304 == *(void ***)v322)
          goto LABEL_451;
      }
      if (v324)
        v328 = v324;
      else
        v328 = v322;
    }
    else
    {
      v328 = 0;
    }
    v322 = (double *)sub_1C5EE4ED4((uint64_t)v391, (uint64_t *)v394, v328);
    *(_QWORD *)v322 = v304;
    v322[1] = 0.0;
    goto LABEL_451;
  }
  v308 = 0;
  v381 = 0;
LABEL_458:
  v394[0] = (void **)v391;
  v329 = ((char *)v381 - (char *)v308) >> 3;
  if ((char *)v381 - (char *)v308 < 1025)
  {
LABEL_462:
    sub_1C5EE5094(v308, v381, (uint64_t *)v394, v329, 0, 0);
  }
  else
  {
    v330 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v331 = ((char *)v381 - (char *)v308) >> 3;
    while (1)
    {
      v332 = (uint64_t *)operator new(8 * v331, v330);
      if (v332)
        break;
      v280 = v331 > 1;
      v331 >>= 1;
      if (!v280)
        goto LABEL_462;
    }
    v333 = v332;
    sub_1C5EE5094(v308, v381, (uint64_t *)v394, v329, v332, v331);
    operator delete(v333);
  }
  sub_1C4DB1D18((uint64_t)v29, v382);
  __pe = v308;
  if (v308 != (uint64_t *)v381)
  {
    v334 = v308;
    do
    {
      v335 = *(uint64_t ***)(*v334 + 16);
      v336 = *(uint64_t ***)(*v334 + 24);
      if (v335 != v336)
      {
        v337 = v29[1];
        do
        {
          v338 = **v335;
          v339 = (unint64_t)v29[2];
          if ((unint64_t)v337 >= v339)
          {
            v341 = *v29;
            v342 = (v337 - *v29) >> 3;
            v343 = v342 + 1;
            if ((unint64_t)(v342 + 1) >> 61)
              goto LABEL_511;
            v344 = v339 - (_QWORD)v341;
            if (v344 >> 2 > v343)
              v343 = v344 >> 2;
            if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFF8)
              v345 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v345 = v343;
            if (v345)
            {
              if (v345 >> 61)
                goto LABEL_512;
              v346 = (char *)operator new(8 * v345);
            }
            else
            {
              v346 = 0;
            }
            v347 = &v346[8 * v342];
            *(_QWORD *)v347 = v338;
            v340 = v347 + 8;
            while (v337 != v341)
            {
              v348 = *((_QWORD *)v337 - 1);
              v337 -= 8;
              *((_QWORD *)v347 - 1) = v348;
              v347 -= 8;
            }
            v349 = &v346[8 * v345];
            v29 = v366;
            *v366 = v347;
            v366[1] = v340;
            v366[2] = v349;
            if (v341)
              operator delete(v341);
          }
          else
          {
            *(_QWORD *)v337 = v338;
            v340 = v337 + 8;
          }
          v29[1] = v340;
          ++v335;
          v337 = v340;
        }
        while (v335 != v336);
      }
      ++v334;
    }
    while (v334 != (uint64_t *)v381);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)v391, 8);
  if (__pe)
    operator delete(__pe);
  if ((_QWORD)v389)
  {
    *((_QWORD *)&v389 + 1) = v389;
    operator delete((void *)v389);
  }
  v350 = (char *)v388[1];
  if (v388[1])
  {
    v351 = (char *)v388[2];
    v352 = v388[1];
    if (v388[2] != v388[1])
    {
      do
      {
        v353 = (void *)*((_QWORD *)v351 - 10);
        if (v353)
        {
          *((_QWORD *)v351 - 9) = v353;
          operator delete(v353);
        }
        v351 -= 96;
      }
      while (v351 != v350);
      v352 = v388[1];
    }
    v388[2] = v350;
    operator delete(v352);
  }
  v354 = v387[0];
  if (v387[0])
  {
    v355 = v387[1];
    v356 = v387[0];
    if (v387[1] != v387[0])
    {
      do
      {
        v355 -= 8;
        sub_1C5EE4294(v355);
      }
      while (v355 != v354);
      v356 = v387[0];
    }
    v387[1] = v354;
    operator delete(v356);
  }
  if (v385[1])
  {
    *(void **)&v386 = v385[1];
    operator delete(v385[1]);
  }
  v357 = v384[0];
  if (v384[0])
  {
    v358 = v384[1];
    v359 = v384[0];
    if (v384[1] != v384[0])
    {
      do
      {
        v358 -= 14;
        sub_1C5EE419C(v358);
      }
      while (v358 != v357);
      v359 = v384[0];
    }
    v384[1] = v357;
    operator delete(v359);
  }
  *(_QWORD *)v391 = (char *)&v383[1] + 8;
  sub_1C4DB60AC((void ***)v391);
  *(_QWORD *)v391 = v383;
  sub_1C4DB60AC((void ***)v391);
}

double llvm::calcExtTspScore(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  double v25;
  double v26;
  uint64_t v27;

  v7 = *a2;
  v6 = a2[1];
  v8 = v6 - *a2;
  if (v6 == *a2)
  {
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      abort();
    v9 = operator new(v6 - *a2);
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
  }
  v10 = *(uint64_t **)a1;
  v11 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((unint64_t)v11 >= 9)
  {
    v12 = v11 >> 3;
    v13 = 2;
    if (v12 > 2)
      v13 = v12;
    v16 = *v10;
    v14 = v10 + 1;
    v15 = v16;
    v17 = *((_QWORD *)v9 + v16);
    v18 = v13 - 1;
    do
    {
      v17 += *(_QWORD *)(v7 + 8 * v15);
      v19 = *v14++;
      v15 = v19;
      *((_QWORD *)v9 + v19) = v17;
      --v18;
    }
    while (v18);
  }
  v20 = sub_1C63A8E9C(a4);
  v22 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 16);
  if ((_QWORD *)v22 == v20)
  {
    v25 = 0.0;
    if (!v9)
      return v25;
    goto LABEL_26;
  }
  v23 = v20;
  v24 = v21;
  v25 = 0.0;
  do
  {
    v26 = sub_1C5EE3E6C(*((_QWORD *)v9 + *v23), *(_QWORD *)(v7 + 8 * *v23), *((_QWORD *)v9 + v23[1]), v23[2]);
    while (1)
    {
      v23 += 3;
      if (v23 == v24)
        break;
      v27 = v23[1];
      if ((*v23 != -1 || v27 != -1) && (*v23 != -2 || v27 != -2))
        goto LABEL_24;
    }
    v23 = v24;
LABEL_24:
    v25 = v25 + v26;
  }
  while (v23 != (_QWORD *)v22);
  if (v9)
LABEL_26:
    operator delete(v9);
  return v25;
}

double sub_1C5EE3E6C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  double result;
  unint64_t v6;
  double v7;
  double v8;

  v4 = a2 + a1 - a3;
  if (a2 + a1 == a3)
    return (double)a4;
  if (a2 + a1 >= a3)
  {
    result = 0.0;
    if (v4 <= dword_1ED8262E8)
    {
      v7 = 1.0 - (double)v4 / (double)dword_1ED8262E8;
      v8 = *(double *)&xmmword_1ED8266B0;
      return v7 * v8 * (double)a4;
    }
  }
  else
  {
    v6 = a3 - (a2 + a1);
    result = 0.0;
    if (v6 <= dword_1ED826228)
    {
      v7 = 1.0 - (double)v6 / (double)dword_1ED826228;
      v8 = *(double *)&xmmword_1ED8265E8;
      return v7 * v8 * (double)a4;
    }
  }
  return result;
}

double llvm::calcExtTspScore(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char *v16;
  char *v17;
  char *v18;

  v6 = *a1;
  v5 = a1[1];
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v7 = v5 - v6;
  if (v5 == v6)
    return llvm::calcExtTspScore((uint64_t)&v16, a1, a3, a3);
  if (v7 < 0)
    abort();
  v8 = v7 >> 3;
  v9 = (char *)operator new(v5 - v6);
  v16 = v9;
  v18 = &v9[8 * (v7 >> 3)];
  v10 = v7 & 0xFFFFFFFFFFFFFFF8;
  bzero(v9, v10);
  v12 = 0;
  v17 = &v9[v10];
  if (v8 <= 1)
    v13 = 1;
  else
    v13 = v8;
  do
  {
    *(_QWORD *)&v9[8 * v12] = v12;
    ++v12;
  }
  while (v13 != v12);
  v14 = llvm::calcExtTspScore((uint64_t)&v16, a1, v11, a3);
  operator delete(v9);
  return v14;
}

void sub_1C5EE3FE0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;

  v7 = (char *)a1[6];
  v6 = a1[7];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char *)a1[5];
    v10 = (v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 60)
        sub_1C4764EE4();
      v14 = (char *)operator new(16 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[16 * v10];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    v8 = v15 + 16;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v9);
      v7 = (char *)a1[5];
    }
    a1[5] = v15;
    a1[6] = v8;
    a1[7] = &v14[16 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    *((_QWORD *)v7 + 1) = a3;
    v8 = v7 + 16;
  }
  a1[6] = v8;
}

uint64_t *sub_1C5EE40E0(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 112;
      v6 = *(_OWORD *)(v3 - 112);
      v7 = *(_OWORD *)(v3 - 96);
      v8 = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 80) = *(_OWORD *)(v3 - 80);
      *(_OWORD *)(v4 - 64) = v8;
      *(_OWORD *)(v4 - 112) = v6;
      *(_OWORD *)(v4 - 96) = v7;
      *(_QWORD *)(v4 - 40) = 0;
      *(_QWORD *)(v4 - 32) = 0;
      *(_QWORD *)(v4 - 48) = 0;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 112;
      v4 -= 112;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void sub_1C5EE419C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
}

uint64_t *sub_1C5EE41E0(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_1C5EE4294(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

uint64_t sub_1C5EE42D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 96;
    v4 = *(void **)(v2 - 80);
    if (v4)
    {
      *(_QWORD *)(v2 - 72) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 96;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1C5EE4338(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  v4 = *(_QWORD *)(a2[1] + 32);
  *(_QWORD *)a1 = *(_QWORD *)(*a2 + 32);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = operator new(8uLL);
  *(_QWORD *)(a1 + 16) = v5;
  *v5 = a2;
  result = v5 + 1;
  *(_QWORD *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 0;
  return result;
}

void sub_1C5EE4394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __asm { BR              X13 }
}

void sub_1C5EE43F0(char *a1@<X8>)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  char *v22;
  size_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *i;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  char *v49;
  char *v50;
  _OWORD *v51;
  _OWORD *v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  __int128 v56;
  _OWORD *v57;
  uint64_t v58;
  char *v59;
  size_t v60;
  char *v61;
  BOOL v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  size_t v98;
  uint64_t *v99;
  char *v100;
  _BYTE *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;

  *(_QWORD *)&v103 = v6;
  *((_QWORD *)&v103 + 1) = v7;
  *(_QWORD *)&v104 = a1;
  *((_QWORD *)&v104 + 1) = v1;
  v8 = v1;
  v105 = 0uLL;
  v10 = ((v1 - a1) >> 3) + ((v7 - v6) >> 3);
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v95 = v2;
  if (v10)
  {
    if (v10 >> 61)
      goto LABEL_126;
    v11 = (char *)operator new(8 * v10);
    v100 = v11;
    v101 = v11;
    v102 = &v11[8 * v10];
  }
  else
  {
    v11 = 0;
  }
  sub_1C5EE4BCC((uint64_t)&v100, (uint64_t)v11, v6, v7);
  sub_1C5EE4BCC((uint64_t)&v100, (uint64_t)v101, a1, v8);
  sub_1C5EE4BCC((uint64_t)&v100, (uint64_t)v101, 0, 0);
  v12 = v100;
  v13 = (uint64_t)v101;
  v14 = v101 - v100;
  v15 = (v101 - v100) >> 3;
  v16 = *(_QWORD *)(v3 + 32);
  v17 = *(char **)(v3 + 16);
  if (v15 > (v16 - (uint64_t)v17) >> 3)
  {
    if (v17)
    {
      *(_QWORD *)(v3 + 24) = v17;
      operator delete(v17);
      v16 = 0;
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
    }
    if ((v14 & 0x8000000000000000) == 0)
    {
      v18 = v16 >> 2;
      if (v16 >> 2 <= v15)
        v18 = v15;
      v19 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v18;
      if (!(v19 >> 61))
      {
        v17 = (char *)operator new(8 * v19);
        *(_QWORD *)(v3 + 16) = v17;
        *(_QWORD *)(v3 + 24) = v17;
        *(_QWORD *)(v3 + 32) = &v17[8 * v19];
LABEL_22:
        if ((char *)v13 != v12)
          memmove(v17, v12, v14);
        v24 = &v17[8 * v15];
        goto LABEL_25;
      }
    }
LABEL_126:
    abort();
  }
  v20 = *(_BYTE **)(v3 + 24);
  v21 = (v20 - v17) >> 3;
  if (v21 >= v15)
    goto LABEL_22;
  v22 = &v100[8 * v21];
  if (v20 != v17)
  {
    memmove(*(void **)(v3 + 16), v100, v20 - v17);
    v17 = *(char **)(v3 + 24);
  }
  v23 = v13 - (_QWORD)v22;
  if (v23)
    memmove(v17, v22, v23);
  v24 = &v17[v23];
LABEL_25:
  *(_QWORD *)(v3 + 24) = v24;
  v25 = *(char **)(v3 + 16);
  v26 = v24 - v25;
  if (v24 != v25)
  {
    v27 = 0;
    v28 = v26 >> 3;
    if (v28 <= 1)
      v28 = 1;
    do
    {
      *(_QWORD *)(*(_QWORD *)&v25[8 * v27] + 32) = v3;
      *(_QWORD *)(*(_QWORD *)&v25[8 * v27] + 8) = v27;
      ++v27;
    }
    while (v28 != v27);
  }
  if (v12)
    operator delete(v12);
  v29 = (uint64_t *)v5[5];
  v30 = (uint64_t *)v5[6];
  if (v29 != v30)
  {
    v99 = (uint64_t *)v5[6];
    do
    {
      v31 = (_QWORD *)*v29;
      v32 = (uint64_t *)v29[1];
      if ((_QWORD *)*v29 == v5)
        v33 = v3;
      else
        v33 = *v29;
      for (i = *(_QWORD **)(v3 + 40); ; i += 2)
      {
        if (i == *(_QWORD **)(v3 + 48))
          goto LABEL_51;
        if (*i == v33)
          break;
      }
      v35 = (_QWORD *)i[1];
      if (v35)
      {
        v36 = (char *)v32[2];
        v37 = v32[3];
        if (v37 - (uint64_t)v36 >= 1)
        {
          v38 = (v37 - (uint64_t)v36) >> 3;
          v39 = v35[2];
          v40 = v35[3];
          v41 = v40 - v39;
          v42 = (char *)(v39 + ((v40 - v39) & 0xFFFFFFFFFFFFFFF8));
          v43 = v35[4];
          if (v38 <= (uint64_t)(v43 - v40) >> 3)
          {
            v58 = (uint64_t)(v40 - (_QWORD)v42) >> 3;
            if (v58 >= v38)
            {
              v59 = &v36[8 * v38];
              v61 = (char *)v35[3];
              v58 = v38;
            }
            else
            {
              v59 = &v36[8 * v58];
              v60 = v37 - (_QWORD)v59;
              if (v60)
              {
                v93 = (char *)(v39 + ((v40 - v39) & 0xFFFFFFFFFFFFFFF8));
                v98 = v60;
                memmove((void *)v35[3], &v36[8 * v58], v60);
                v60 = v98;
                v59 = &v36[8 * v58];
                v42 = v93;
              }
              v61 = (char *)(v40 + v60);
              v35[3] = v61;
            }
            v62 = v58 < 1;
            v30 = v99;
            if (!v62)
            {
              v63 = (uint64_t *)&v61[-8 * v38];
              v64 = v61;
              while ((unint64_t)v63 < v40)
              {
                v65 = *v63++;
                *(_QWORD *)v64 = v65;
                v64 += 8;
              }
              v66 = &v42[8 * v38];
              v35[3] = v64;
              if (v61 != v66)
              {
                v67 = v42;
                v68 = v59;
                memmove(&v61[-8 * ((v61 - v66) >> 3)], v42, v61 - v66);
                v59 = v68;
                v42 = v67;
              }
              if (v59 != v36)
                memmove(v42, v36, v59 - v36);
            }
          }
          else
          {
            v44 = v41 >> 3;
            v45 = (v41 >> 3) + v38;
            if (v45 >> 61)
              goto LABEL_126;
            v46 = v43 - v39;
            if (v46 >> 2 > v45)
              v45 = v46 >> 2;
            v47 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8;
            v48 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v47)
              v48 = v45;
            v97 = v48;
            if (v48)
            {
              if (v48 >> 61)
                sub_1C4764EE4();
              v49 = v42;
              v50 = (char *)operator new(8 * v48);
              v42 = v49;
              v30 = v99;
            }
            else
            {
              v50 = 0;
            }
            v69 = &v50[8 * v44];
            v70 = &v69[8 * v38];
            v71 = 8 * v38;
            v72 = v69;
            do
            {
              v73 = *(_QWORD *)v36;
              v36 += 8;
              *(_QWORD *)v72 = v73;
              v72 += 8;
              v71 -= 8;
            }
            while (v71);
            v74 = (char *)v35[2];
            if (v42 != v74)
            {
              v75 = v42;
              do
              {
                v76 = *((_QWORD *)v75 - 1);
                v75 -= 8;
                *((_QWORD *)v69 - 1) = v76;
                v69 -= 8;
              }
              while (v75 != v74);
            }
            v77 = (_BYTE *)v35[3];
            v78 = v77 - v42;
            if (v77 != v42)
            {
              v94 = v50;
              v79 = v70;
              memmove(v70, v42, v77 - v42);
              v70 = v79;
              v50 = v94;
            }
            v80 = &v50[8 * v97];
            v81 = (void *)v35[2];
            v35[2] = v69;
            v35[3] = &v70[v78];
            v35[4] = v80;
            if (v81)
              operator delete(v81);
          }
        }
        v82 = (void *)v32[2];
        v32[3] = (uint64_t)v82;
        if ((void *)v32[4] != v82)
        {
          v32[2] = 0;
          v32[3] = 0;
          v32[4] = 0;
          if (v82)
            operator delete(v82);
        }
      }
      else
      {
LABEL_51:
        if ((_QWORD *)*v32 == v5)
          *v32 = v3;
        if ((_QWORD *)v32[1] == v5)
          v32[1] = v3;
        sub_1C5EE3FE0((_QWORD *)v3, v33, (uint64_t)v32);
        if (v31 != (_QWORD *)v3 && v31 != v5)
          sub_1C5EE3FE0(v31, v3, (uint64_t)v32);
      }
      if (v31 != v5)
      {
        v52 = (_OWORD *)v31[5];
        v51 = (_OWORD *)v31[6];
        if (v52 != v51)
        {
          v53 = 0;
          while (*(_QWORD **)&v52[v53] != v5)
          {
            if (&v52[++v53] == v51)
              goto LABEL_70;
          }
          v54 = &v52[v53];
          if (v54 + 1 == v51)
          {
            v55 = v54;
          }
          else
          {
            v55 = v54;
            do
            {
              v56 = v55[1];
              ++v55;
              *v54 = v56;
              v57 = v54 + 2;
              v54 = v55;
            }
            while (v57 != v51);
          }
          v31[6] = v55;
        }
      }
LABEL_70:
      v29 += 2;
    }
    while (v29 != v30);
  }
  v83 = (void *)v5[2];
  v5[3] = v83;
  if ((void *)v5[4] != v83)
  {
    *v95 = 0;
    v95[1] = 0;
    v95[2] = 0;
    if (v83)
      operator delete(v83);
  }
  v84 = (void *)v5[5];
  v5[6] = v84;
  if ((void *)v5[7] != v84)
  {
    v5[5] = 0;
    v5[6] = 0;
    v5[7] = 0;
    if (v84)
      operator delete(v84);
  }
  v85 = *(_QWORD **)(v3 + 40);
  v86 = *(_QWORD **)(v3 + 48);
  if (v85 != v86)
  {
    while (*v85 != v3)
    {
      v85 += 2;
      if (v85 == v86)
        goto LABEL_110;
    }
    v87 = v85[1];
    if (v87)
    {
      v103 = *(_OWORD *)(v3 + 16);
      v104 = 0u;
      v105 = 0u;
      *(double *)(v3 + 8) = sub_1C5EE4AEC((uint64_t **)&v103, *(_QWORD ***)(v87 + 16), *(_QWORD ***)(v87 + 24));
    }
  }
LABEL_110:
  v88 = *(_QWORD **)(v96 + 160);
  v89 = *(_QWORD **)(v96 + 152);
  if (v89 != v88)
  {
    while ((_QWORD *)*v89 != v5)
    {
      if (++v89 == v88)
      {
        v89 = *(_QWORD **)(v96 + 160);
        break;
      }
    }
  }
  if (v89 != v88)
  {
    v90 = v89 + 1;
    if (v89 + 1 != v88)
    {
      do
      {
        if ((_QWORD *)*v90 != v5)
          *v89++ = *v90;
        ++v90;
      }
      while (v90 != v88);
      v88 = *(_QWORD **)(v96 + 160);
    }
  }
  if (v89 != v88)
    *(_QWORD *)(v96 + 160) = v89;
  v91 = *(_QWORD *)(v3 + 40);
  v92 = *(_QWORD *)(v3 + 48);
  while (v91 != v92)
  {
    *(_WORD *)(*(_QWORD *)(v91 + 8) + 88) = 0;
    v91 += 16;
  }
}

