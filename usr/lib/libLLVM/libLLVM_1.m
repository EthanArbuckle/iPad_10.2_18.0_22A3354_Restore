#error "1C47C47C8: too big function (funcsize=0)"

uint64_t sub_1C47DE640(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C47DE65C + 4 * byte_1C64172E4[a2]))();
}

BOOL sub_1C47DE65C(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 480) + 281) != 0;
}

void sub_1C47DE6C0(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

BOOL sub_1C47DE704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;

  if (**(_BYTE **)(a2 + 40) != 4)
  {
    v2 = *(_QWORD *)(a2 + 48);
    return v2 && *(_QWORD *)(v2 + 32) == 0;
  }
  return result;
}

void sub_1C47DE874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  __asm { BR              X10 }
}

uint64_t sub_1C47DE8BC()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C47C1164(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1), 0, 1, 0, 0, 0, 0);
}

uint64_t sub_1C47DE9D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C612DE00(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1), 0);
}

uint64_t sub_1C47DEA20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C612DF50(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1));
}

uint64_t sub_1C47DEA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C612E0A4(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1));
}

uint64_t sub_1C47DEAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C612DFB0(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1), 0);
}

uint64_t sub_1C47DEAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C612E038(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1));
}

uint64_t sub_1C47DEB34()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C47C0FD4(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1), 0);
}

uint64_t sub_1C47DEB7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C612DEF4(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1));
}

uint64_t sub_1C47DEBC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C612E038(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1));
}

uint64_t sub_1C47DEC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C612DE88(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1));
}

uint64_t sub_1C47DEC48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C47C14FC(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1), 0);
}

void sub_1C47DEC90()
{
  uint64_t v0;
  int v1;

  sub_1C612E83C(v0, (v1 + 2));
  JUMPOUT(0x1C47DECD0);
}

void sub_1C47DECD8()
{
  int v0;
  uint64_t v1;
  _QWORD *v2;
  unsigned int v3;
  uint64_t v4;

  sub_1C612E83C((uint64_t)v2, v3 + 1);
  v4 = *v2 + 24 * v3;
  *(_QWORD *)v4 = v1;
  *(_DWORD *)(v4 + 8) = v0;
  JUMPOUT(0x1C47DE9C0);
}

void sub_1C47DED00(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __asm { BR              X10 }
}

_QWORD *sub_1C47DED4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned __int8 *v9;
  int v10;

  v2 = *(_QWORD *)(v1 + 296);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = (unsigned int *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = *(unsigned int **)v4;
  v5 = *v4;
  v6 = *(unsigned __int8 **)(v0 + 64);
  v9 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v9, v6, 2);
  v10 = *(_DWORD *)(v0 + 60);
  v7 = sub_1C6366AB4(v2, v5, (const llvm::APInt *)&v9, (llvm *)6, 0, 1, 0);
  if (v9)
    llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  return v7;
}

_QWORD *sub_1C47DF390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6, llvm *a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v24;
  llvm::detail::DoubleAPFloat *v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  llvm::detail::DoubleAPFloat *v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD *v50;
  unsigned int v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  unsigned __int8 *v64[2];
  void *v65;
  uint64_t v66;
  _QWORD v67[15];

  v67[14] = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 == 36 || v8 == 12)
    v10 = a2;
  else
    v10 = 0;
  if (v8 == 35 || v8 == 11)
    v12 = a2;
  else
    v12 = 0;
  v13 = *(unsigned __int16 *)(a4 + 24);
  if (v13 == 36 || v13 == 12)
    v15 = a4;
  else
    v15 = 0;
  if (v13 == 35 || v13 == 11)
    v17 = a4;
  else
    v17 = 0;
  if (!(v10 | v12) || !(v15 | v17))
    return 0;
  if (v10)
  {
    v24 = *(_QWORD *)(v10 + 80);
    v26 = *(void **)(v24 + 32);
    v25 = (llvm::detail::DoubleAPFloat *)(v24 + 32);
    if (v26 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v25, (unsigned int *)&v65);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v25, (unsigned int *)&v65);
    if (v66 >= 0x41)
      v27 = (uint64_t *)v65;
    else
      v27 = (uint64_t *)&v65;
    v28 = *v27;
    if (v66 >= 0x41 && v65)
      MEMORY[0x1CAA32F9C]();
  }
  else
  {
    v29 = *(_QWORD *)(v12 + 80);
    v30 = (unsigned __int16 *)(v29 + 24);
    if (*(_DWORD *)(v29 + 32) >= 0x41u)
      v30 = *(unsigned __int16 **)v30;
    v28 = *v30;
  }
  if (v15)
  {
    v31 = *(_QWORD *)(v15 + 80);
    v33 = *(void **)(v31 + 32);
    v32 = (llvm::detail::DoubleAPFloat *)(v31 + 32);
    if (v33 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v32, (unsigned int *)&v65);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v32, (unsigned int *)&v65);
    if (v66 >= 0x41)
      v34 = (uint64_t *)v65;
    else
      v34 = (uint64_t *)&v65;
    v35 = *v34;
    if (v66 >= 0x41 && v65)
      MEMORY[0x1CAA32F9C]();
  }
  else
  {
    v36 = *(_QWORD *)(v17 + 80);
    v37 = (unsigned __int16 *)(v36 + 24);
    if (*(_DWORD *)(v36 + 32) >= 0x41u)
      v37 = *(unsigned __int16 **)v37;
    v35 = *v37;
  }
  v38 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), v28 + (v35 << 16), a6, (llvm *)6, 0, 1, 0);
  v40 = v39;
  v41 = *(_QWORD *)(a1 + 296);
  v42 = *(unsigned __int8 **)a6;
  v62 = v42;
  v43 = v41;
  if (v42)
  {
    llvm::MetadataTracking::track((uint64_t)&v62, v42, 2);
    v43 = *(_QWORD *)(a1 + 296);
  }
  v63 = *((_DWORD *)a6 + 2);
  v44 = sub_1C5D428B0(v43, 0, (llvm *)5, 0);
  v46 = v45;
  v61 = 0;
  v64[1] = 0;
  v65 = v67;
  v66 = 0x700000000;
  v64[0] = 0;
  v47 = sub_1C6366AB4(v41, 0, (const llvm::APInt *)v64, (llvm *)6, 0, 1, 0);
  v49 = v66;
  if (v66 >= HIDWORD(v66))
  {
    v59 = v48;
    v60 = v47;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v66 + 1, 16);
    v48 = v59;
    v47 = v60;
    v49 = v66;
  }
  v50 = (char *)v65 + 16 * v49;
  *v50 = v47;
  v50[1] = v48;
  v51 = v66 + 1;
  LODWORD(v66) = v66 + 1;
  if (v64[0])
  {
    llvm::MetadataTracking::untrack((uint64_t)v64, v64[0]);
    v51 = v66;
  }
  if (v51 >= HIDWORD(v66))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v51 + 1, 16);
    v51 = v66;
  }
  v52 = (char *)v65 + 16 * v51;
  *v52 = v38;
  v52[1] = v40;
  v53 = (v66 + 1);
  LODWORD(v66) = v53;
  if (v53 >= HIDWORD(v66))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v53 + 1, 16);
    LODWORD(v53) = v66;
  }
  v54 = (char *)v65 + 16 * v53;
  *v54 = v38;
  v54[1] = v40;
  v55 = (v66 + 1);
  LODWORD(v66) = v55;
  if (v55 >= HIDWORD(v66))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v55 + 1, 16);
    LODWORD(v55) = v66;
  }
  v56 = (char *)v65 + 16 * v55;
  *v56 = v38;
  v56[1] = v40;
  v57 = (v66 + 1);
  LODWORD(v66) = v57;
  if (v57 >= HIDWORD(v66))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v57 + 1, 16);
    LODWORD(v57) = v66;
  }
  v58 = (uint64_t *)((char *)v65 + 16 * v57);
  *v58 = v44;
  v58[1] = v46;
  LODWORD(v66) = v66 + 1;
  sub_1C47E2930(v41, (uint64_t)&v65, (uint64_t)&v61);
  v18 = sub_1C636E56C(v41, 1445, (uint64_t)&v62, a7, a8, (uint64_t *)v65, v66);
  if (v65 != v67)
    free(v65);
  if (v62)
    llvm::MetadataTracking::untrack((uint64_t)&v62, v62);
  return v18;
}

BOOL sub_1C47DF7BC(int a1)
{
  _BOOL8 result;

  result = 1;
  if (((a1 - 96) > 0x2D || ((1 << (a1 - 96)) & 0x200000000005) == 0)
    && ((a1 - 231) > 0xA || ((1 << (a1 + 25)) & 0x409) == 0))
  {
    return (a1 - 424) < 3;
  }
  return result;
}

uint64_t *sub_1C47DF81C(_QWORD *a1, const llvm::APInt *a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, int a11, unsigned int a12)
{
  uint64_t v18;
  llvm *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v18 = *(_QWORD *)(a7 + 40) + 16 * a8;
  v19 = *(llvm **)v18;
  v20 = *(_QWORD *)(v18 + 8);
  v21 = sub_1C6367818(a1, a12);
  return sub_1C63698B8((uint64_t)a1, (const char *)0xC0, a2, v19, v20, a3, a4, v23, a5, a6, a7, a8, a9, a10, v21, v22);
}

uint64_t sub_1C47DF8BC(uint64_t a1, unint64_t *a2, _DWORD *a3, int *a4)
{
  int v4;
  uint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  int v16;
  _BOOL8 *v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t i;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 **v31;
  unsigned int v32;
  unsigned __int8 **v33;
  unint64_t j;
  unsigned __int8 **v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int16 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned int v55;
  _QWORD *v56;
  int v57;
  unsigned int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  uint64_t v72;
  _DWORD v73[2];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int16 *)(*(_QWORD *)a3 + 24);
  if (v4 != 35 && v4 != 11)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 80);
  v9 = (unint64_t *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = (unint64_t *)*v9;
  v10 = (_QWORD *)*a2;
  v11 = *(unsigned __int16 *)(*a2 + 24);
  if ((v11 - 173) < 0xFFFFFFFE)
    return 0;
  if (*(_BYTE *)(v10[5] + 16 * *((unsigned int *)a2 + 2)) != 4)
    return 0;
  v12 = *v9;
  if (*a4 != 22 && *a4 != 17)
    return 0;
  if (v12 > 1)
    return 0;
  v14 = v10[6];
  if (v14)
  {
    v15 = 3;
    do
    {
      v16 = *(unsigned __int16 *)(*(_QWORD *)(v14 + 16) + 24);
      if (v16 != 260 && v16 != 192)
        return 0;
      if (!--v15)
        return 0;
      v14 = *(_QWORD *)(v14 + 32);
    }
    while (v14);
  }
  result = 0;
  v17 = (_BOOL8 *)v10[4];
  v18 = *v17;
  v19 = *(unsigned __int16 *)(*v17 + 24);
  if (v19 != 50 && v19 != 437 && v19 != 65527)
  {
    v21 = *(_QWORD *)(v18 + 48);
    if (v21)
    {
      while (*(_WORD *)(*(_QWORD *)(v21 + 16) + 24) != 49)
      {
        v21 = *(_QWORD *)(v21 + 32);
        if (!v21)
          goto LABEL_29;
      }
      return 0;
    }
LABEL_29:
    result = 0;
    v22 = v17[5];
    v23 = *(unsigned __int16 *)(v22 + 24);
    if (v23 != 50 && v23 != 437 && v23 != 65527)
    {
      v25 = *(_QWORD *)(v22 + 48);
      if (v25)
      {
        while (*(_WORD *)(*(_QWORD *)(v25 + 16) + 24) != 49)
        {
          v25 = *(_QWORD *)(v25 + 32);
          if (!v25)
            goto LABEL_37;
        }
        return 0;
      }
LABEL_37:
      for (i = 0; i != 8; i += 4)
      {
        v27 = &(&v66)[i];
        *((_DWORD *)v27 + 2) = 1;
        *v27 = 0;
        *((_DWORD *)v27 + 6) = 1;
        v27[2] = 0;
      }
      sub_1C6368768(*(_QWORD *)(a1 + 296), v18, v17[1], 0, (uint64_t)&v62);
      if (v67 >= 0x41 && v66)
        MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
      v28 = v62;
      v66 = v62;
      v29 = v63;
      v67 = v63;
      v63 = 0;
      if (v69 >= 0x41 && v68)
      {
        MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
        v68 = v64;
        v69 = v65;
        v65 = 0;
        if (v63 >= 0x41 && v62)
          MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
      }
      else
      {
        v68 = v64;
        v69 = v65;
      }
      sub_1C6368768(*(_QWORD *)(a1 + 296), *(_QWORD *)(*(_QWORD *)(*a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(*a2 + 32) + 48), 0, (uint64_t)&v62);
      if (v71 >= 0x41 && v70)
        MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
      v31 = (unsigned __int8 **)v62;
      v70 = v62;
      v32 = v63;
      v71 = v63;
      v63 = 0;
      if (v73[0] >= 0x41u && v72)
      {
        v59 = v62;
        v58 = v32;
        MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
        v32 = v58;
        v31 = (unsigned __int8 **)v59;
        v72 = v64;
        v73[0] = v65;
        v65 = 0;
        if (v63 >= 0x41 && v62)
        {
          MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
          v32 = v58;
          v31 = (unsigned __int8 **)v59;
        }
      }
      else
      {
        v72 = v64;
        v73[0] = v65;
      }
      v33 = &v66;
      if (v29 >= 0x41)
        v33 = (unsigned __int8 **)v28;
      if (*v33 == (unsigned __int8 *)65534)
      {
        if (v32 < 0x41)
          v31 = &v70;
        if (*v31 == (unsigned __int8 *)65534)
          goto LABEL_62;
      }
      result = 0;
      if (v11 == 172 && !v12)
      {
LABEL_62:
        v39 = *a2;
        v40 = *(unsigned __int8 **)(*a2 + 64);
        v62 = v40;
        v41 = v39;
        if (v40)
        {
          llvm::MetadataTracking::track((uint64_t)&v62, v40, 2);
          v41 = *a2;
        }
        v63 = *(_DWORD *)(v39 + 60);
        v42 = *(_QWORD *)(a1 + 296);
        v43 = *(uint64_t **)(v41 + 32);
        v44 = *v43;
        v45 = v43[1];
        v46 = v43[5];
        v47 = v43[6];
        v48 = *(_QWORD *)(v42 + 832);
        if (v48)
          LOWORD(v48) = *(_WORD *)(v48 + 8);
        v49 = sub_1C5D56C70(v42, 146, (const llvm::APInt *)&v62, (llvm *)0x26, 0, v44, v45, v30, v46, v47, v48);
        v50 = 0;
        *a2 = (unint64_t)v49;
        *((_DWORD *)a2 + 2) = v51;
        v52 = *(_QWORD *)(a1 + 296);
        v53 = *(_QWORD *)(v52 + 832);
        if (v53)
          v50 = *(_WORD *)(v53 + 8);
        v54 = sub_1C5D52060(v52, 216, (const llvm::APInt *)&v62, (llvm *)5, 0, (uint64_t)v49, a2[1], v50);
        *a2 = (unint64_t)v54;
        *((_DWORD *)a2 + 2) = v55;
        if (v11 == 172 && v12 == 1 || v11 == 171 && !v12)
        {
          v56 = (_QWORD *)(v54[5] + 16 * v55);
          *a4 = sub_1C6365158(*a4, *v56, v56[1]);
          v12 ^= 1uLL;
        }
        *(_QWORD *)a3 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 65537 * v12, (const llvm::APInt *)&v62, (llvm *)5, 0, 0, 0);
        a3[2] = v57;
        if (v62)
          llvm::MetadataTracking::untrack((uint64_t)&v62, v62);
        result = 1;
      }
      for (j = 0; j != 0x3FFFFFFFFFFFFFF0; j -= 8)
      {
        v35 = &(&v66)[j / 2];
        if (v73[j] >= 0x41u && v35[6])
        {
          v36 = result;
          MEMORY[0x1CAA32F9C](v35[6], 0x1000C8000313F17);
          result = v36;
        }
        if (*((_DWORD *)v35 + 10) >= 0x41u)
        {
          v37 = v35[4];
          if (v37)
          {
            v38 = result;
            MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
            result = v38;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C47DFE44(llvm *a1, uint64_t a2, uint64_t a3, int a4, const llvm::APInt *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[3];
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18[0] = (uint64_t)sub_1C6366AB4(a6, 1847, a5, (llvm *)5, 0, 1, 0);
  v18[1] = v12;
  v18[2] = a3;
  v19 = a4;
  v13 = sub_1C5D404C4(a6, a5, (_BOOL8)a1, a2, 1, 0.0);
  v14 = 0;
  v20 = v13;
  v21 = v15;
  v16 = *(_QWORD *)(a6 + 832);
  if (v16)
    v14 = *(unsigned __int16 *)(v16 + 8);
  return sub_1C636D0C8(a6, (const char *)0x2E, a5, a1, a2, v18, 3, v14);
}

void sub_1C47DFF34(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  llvm::detail::DoubleAPFloat *v55;
  void *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _BOOL4 v66;
  BOOL v67;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  __int128 *v83;
  uint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  __int128 *v92;
  __int128 *v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  __int128 v97;
  __int128 *v98;
  __int128 v99;
  __int128 *v100;
  __int128 *v101;
  char v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  _BOOL8 v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int v132;
  unint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  _BOOL8 v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  unsigned int v142;
  unint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  _BOOL8 v148;
  unsigned int v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  unsigned int v153;
  unint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  _BOOL8 v159;
  unsigned int v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  unsigned int *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  _BOOL8 v169;
  unsigned int v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  unsigned int v177;
  unint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  int v195;
  int v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  _QWORD *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222[4];
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  _BOOL4 v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  int v235;
  int v236;
  int v237;
  uint64_t v238;
  uint64_t v239[2];
  int v240;
  unsigned __int8 *v241;
  int v242;
  char v243[4];
  unsigned int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  int v260;
  void *v261;
  uint64_t v262;
  _QWORD v263[6];
  void *__src;
  uint64_t v265;
  _BYTE v266[64];
  __int128 *v267;
  uint64_t v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;

  v272 = *MEMORY[0x1E0C80C00];
  v6 = **(_QWORD **)(a1 + 280);
  v7 = *(_QWORD *)(a1 + 480);
  v8 = *(unsigned __int8 *)(v7 + 280);
  v237 = *(unsigned __int8 *)(v7 + 281);
  sub_1C615A6B4((uint64_t)v243, a3);
  v9 = *(unsigned __int8 **)(a2 + 64);
  v241 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v241, v9, 2);
  v242 = *(_DWORD *)(a2 + 60);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = (uint64_t *)(v10 + 40 * v248);
  v12 = *(_QWORD **)(*v11 + 32);
  v13 = v12[5];
  v14 = v12[15];
  v15 = *(unsigned __int16 *)(v13 + 24);
  v16 = v15 == 35 || v15 == 11;
  v211 = v12[5];
  if (!v16)
    goto LABEL_19;
  v17 = *(_QWORD *)(v13 + 80);
  v18 = (_QWORD *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u)
    v18 = (_QWORD *)*v18;
  if (*v18)
  {
LABEL_19:
    v23 = 1;
  }
  else
  {
    v19 = *(unsigned __int16 *)(v14 + 24);
    if (v19 == 35 || v19 == 11)
    {
      v21 = *(_QWORD *)(v14 + 80);
      v22 = (_QWORD *)(v21 + 24);
      if (*(_DWORD *)(v21 + 32) >= 0x41u)
        v22 = (_QWORD *)*v22;
      v24 = *v22 == 0;
    }
    else
    {
      v24 = 0;
    }
    v23 = !v24;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v10 + 40 * v249) + 80);
  v26 = (unsigned int *)(v25 + 24);
  if (*(_DWORD *)(v25 + 32) >= 0x41u)
    v26 = *(unsigned int **)v26;
  v27 = v12[6];
  v28 = v12[16];
  v29 = *v26;
  v30 = (uint64_t *)(v10 + 40 * v250);
  v32 = *v30;
  v31 = v30[1];
  v33 = (uint64_t *)(v10 + 40 * v258);
  v217 = v33[1];
  v218 = *v33;
  v238 = a2;
  v235 = v23;
  v234 = v31;
  v236 = v8;
  v216 = v29;
  v215 = a3;
  v220 = *(_QWORD *)(v10 + 40 * v256);
  v221 = v6;
  v209 = v27;
  v210 = v28;
  v219 = *(_QWORD *)(v10 + 40 * v257);
  if (v243[0])
  {
    v42 = 0;
    v43 = 0;
    v229 = 0;
    v227 = 0;
    goto LABEL_76;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v10 + 40 * v251) + 80);
  v35 = (_QWORD *)(v34 + 24);
  if (*(_DWORD *)(v34 + 32) >= 0x41u)
    v35 = (_QWORD *)*v35;
  v36 = (_QWORD *)*v35;
  v37 = (unsigned int *)(v10 + 40 * v252);
  v38 = *(_QWORD *)v37;
  v39 = *(unsigned __int16 *)(*(_QWORD *)v37 + 24);
  v206 = v14;
  v229 = v36 != 0;
  if (v39 == 36 || v39 == 12)
  {
    v40 = *(_QWORD *)(v38 + 80);
    if (*(_UNKNOWN **)(v40 + 32) == &unk_1C866F1C0)
      v41 = *(_QWORD *)(v40 + 40);
    else
      v41 = v40 + 24;
    v44 = 0;
    if ((*(_BYTE *)(v41 + 28) & 7) == 3 && v36 == 0)
      v46 = v23;
    else
      v46 = 1;
    v47 = *(_QWORD *)v37;
  }
  else
  {
    v47 = 0;
    v44 = 1;
    v46 = 1;
  }
  v48 = v37[2];
  if (v23)
    v49 = sub_1C47E2DDC(*v11, v11[1], 0);
  else
    v49 = 1;
  if ((v46 & v49) == 1)
  {
    if ((v44 & 1) != 0)
    {
      v50 = 0;
      v8 = v236;
      v14 = v206;
      if (!v237 && v39 == 395)
      {
        v51 = *(_QWORD *)(**(_QWORD **)(v38 + 32) + 80);
        v52 = (_QWORD *)(v51 + 24);
        if (*(_DWORD *)(v51 + 32) >= 0x41u)
          v52 = (_QWORD *)*v52;
        v50 = sub_1C5D410E8(*(_QWORD *)(a1 + 296), 64, (llvm *)0xA, 0, *v52 >> 1, 4);
      }
      goto LABEL_69;
    }
    v53 = *(_QWORD *)(a1 + 296);
    v54 = *(_QWORD *)(v47 + 80);
    v56 = *(void **)(v54 + 32);
    v55 = (llvm::detail::DoubleAPFloat *)(v54 + 32);
    if (v56 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v55, (unsigned int *)&v261);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v55, (unsigned int *)&v261);
    if (v262 >= 0x41)
      v57 = (uint64_t *)v261;
    else
      v57 = (uint64_t *)&v261;
    v58 = *v57;
    v59 = *v57;
    if (v262 >= 0x41 && v261)
      MEMORY[0x1CAA32F9C]();
    if (v237)
      v60 = 2;
    else
      v60 = 4;
    v228 = v60;
    v61 = *(_QWORD *)(*(_QWORD *)(v53 + 40) + 344);
    v62 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 224))(v61, v59);
    if ((v62 & 0xFF00000000) != 0)
    {
      v64 = (2 * v62);
    }
    else
    {
      v63 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 376))(v61, 1);
      if ((_DWORD)v63 == -1)
      {
        v50 = 0;
        v29 = v216;
        goto LABEL_68;
      }
      v65 = v63;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 232))(v61, v59, v63);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 328))(v61, v58);
      v64 = (2 * v65);
      a2 = v238;
    }
    v29 = v216;
    v50 = sub_1C5D410E8(v53, 64, (llvm *)0xA, 0, v64, v228);
    goto LABEL_68;
  }
  v50 = 0;
LABEL_68:
  v8 = v236;
  v14 = v206;
LABEL_69:
  v227 = v50;
  v66 = v50 == 0;
  if ((v46 & v66) != 0)
    v42 = v38;
  else
    v42 = 0;
  if ((v46 & v66) != 0)
    v43 = v48;
  else
    v43 = 0;
  v31 = v234;
LABEL_76:
  v267 = &v269;
  v268 = 0x400000000;
  __src = v266;
  v265 = 0x400000000;
  if (v237)
    v67 = 0;
  else
    v67 = v29 == 0;
  v69 = v67 && *(_BYTE *)(*(_QWORD *)(a1 + 480) + 306) == 0;
  v70 = *(unsigned __int16 *)(v32 + 24);
  if (v70 != 65517)
  {
    if (!v69)
      goto LABEL_97;
    if (v70 == 99)
    {
      v98 = *(__int128 **)(v32 + 32);
      v99 = *(__int128 *)((char *)v98 + 40);
      v269 = *v98;
      v270 = v99;
      v85 = 2;
      goto LABEL_131;
    }
    if (v70 == 98 && (v83 = *(__int128 **)(v32 + 32), v84 = *((_QWORD *)v83 + 5), *(_WORD *)(v84 + 24) == 423))
    {
      v269 = *v83;
      LODWORD(v268) = 1;
      v270 = *(_OWORD *)*(_QWORD *)(v84 + 32);
      v85 = 2;
    }
    else
    {
LABEL_97:
      *(_QWORD *)&v269 = v32;
      *((_QWORD *)&v269 + 1) = v31;
      v85 = 1;
    }
LABEL_131:
    LODWORD(v268) = v85;
LABEL_132:
    v103 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * v246);
    v104 = *(_QWORD *)(*(_QWORD *)(*v103 + 32) + 40);
    if (*(_WORD *)(v104 + 24) == 11)
    {
      v105 = *(_QWORD *)(v104 + 80);
      v106 = (unint64_t *)(v105 + 24);
      if (*(_DWORD *)(v105 + 32) >= 0x41u)
        v106 = (unint64_t *)*v106;
      v107 = *v106;
    }
    else
    {
      v107 = *(int *)(v104 + 80);
    }
    v108 = v103[1];
    if (v8)
    {
      v109 = 97;
      v110 = 16;
    }
    else
    {
      v109 = 174;
      v110 = 24;
    }
    v226 = sub_1C5D410E8(*(_QWORD *)(a1 + 296), 64, (llvm *)v109, 0, v107 >> 1, v110);
    v112 = v111;
    v113 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * v247);
    v115 = *v113;
    v114 = v113[1];
    v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v115 + 32) + 40) + 80);
    v117 = (_QWORD *)(v116 + 24);
    if (*(_DWORD *)(v116 + 32) >= 0x41u)
      v117 = (_QWORD *)*v117;
    v118 = *(_QWORD *)(a1 + 296);
    v119 = *v117 >> 1;
    v120 = v114 & 0xFFFFFFFF00000000;
    if (v8)
    {
      v121 = sub_1C5D410E8(v118, 64, (llvm *)0x61, 0, v119, 16);
      v224 = v122 | v120;
      v225 = v121;
      v123 = v243[0];
      v124 = v243[0] == 0;
      v125 = v229;
      if (v243[0])
      {
        v125 = 1;
        v126 = 3;
      }
      else
      {
        v126 = 2;
      }
      if ((v125 & 1) == 0)
      {
        v123 = 0;
        v124 = 0;
        v126 = (v42 | v227) != 0;
      }
      v129 = v235;
      if (!v42)
        goto LABEL_157;
    }
    else
    {
      v127 = sub_1C5D410E8(v118, 64, (llvm *)0x5F, 0, v119, 8);
      v224 = v128 | v120;
      v225 = v127;
      if (v243[0])
      {
        v124 = 0;
        v126 = 7;
        v129 = v235;
        if (!v42)
        {
LABEL_160:
          v130 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * v253);
          v131 = *(unsigned __int16 *)(v130 + 56);
          if (v131 >= 2)
          {
            v132 = v265;
            v133 = 1;
            v134 = 40;
            do
            {
              v135 = *(_OWORD *)(*(_QWORD *)(v130 + 32) + v134);
              if (v132 >= HIDWORD(v265))
              {
                v230 = v126;
                v207 = v14;
                v136 = v112;
                v137 = v108;
                v138 = v124;
                v212 = *(_OWORD *)(*(_QWORD *)(v130 + 32) + v134);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v266, v132 + 1, 16);
                v135 = v212;
                v124 = v138;
                v108 = v137;
                v112 = v136;
                v14 = v207;
                v126 = v230;
                v129 = v235;
                v132 = v265;
              }
              *((_OWORD *)__src + v132) = v135;
              v132 = v265 + 1;
              LODWORD(v265) = v265 + 1;
              v133 += 2;
              v134 += 80;
            }
            while (v133 < v131);
          }
          v139 = v244;
          if (v244 <= 1)
            goto LABEL_186;
          v140 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * v254);
          v141 = *(unsigned __int16 *)(v140 + 56);
          if (v141 >= 2)
          {
            v142 = v265;
            v143 = 1;
            v144 = 40;
            do
            {
              v145 = *(_OWORD *)(*(_QWORD *)(v140 + 32) + v144);
              if (v142 >= HIDWORD(v265))
              {
                v231 = v126;
                v208 = v14;
                v146 = v112;
                v147 = v108;
                v148 = v124;
                v213 = *(_OWORD *)(*(_QWORD *)(v140 + 32) + v144);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v266, v142 + 1, 16);
                v145 = v213;
                v124 = v148;
                v108 = v147;
                v112 = v146;
                v14 = v208;
                v126 = v231;
                v129 = v235;
                v142 = v265;
              }
              *((_OWORD *)__src + v142) = v145;
              v142 = v265 + 1;
              LODWORD(v265) = v265 + 1;
              v143 += 2;
              v144 += 80;
            }
            while (v143 < v141);
            v139 = v244;
          }
          v8 = v236;
          if (v139 >= 3)
          {
            v151 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * v255);
            v152 = *(unsigned __int16 *)(v151 + 56);
            if (v152 >= 2)
            {
              v153 = v265;
              v154 = 1;
              v155 = 40;
              do
              {
                v156 = *(_OWORD *)(*(_QWORD *)(v151 + 32) + v155);
                if (v153 >= HIDWORD(v265))
                {
                  v232 = v112;
                  v157 = v126;
                  v158 = v108;
                  v159 = v124;
                  v214 = *(_OWORD *)(*(_QWORD *)(v151 + 32) + v155);
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v266, v153 + 1, 16);
                  v156 = v214;
                  v124 = v159;
                  v108 = v158;
                  v126 = v157;
                  v112 = v232;
                  v129 = v235;
                  v153 = v265;
                }
                *((_OWORD *)__src + v153) = v156;
                v153 = v265 + 1;
                LODWORD(v265) = v265 + 1;
                v154 += 2;
                v155 += 80;
              }
              while (v154 < v152);
LABEL_186:
              v8 = v236;
            }
          }
LABEL_188:
          v233 = v126;
          if (v129)
          {
            v160 = v265;
            if (v265 >= HIDWORD(v265))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v266, v265 + 1, 16);
              v160 = v265;
            }
            v161 = (char *)__src + 16 * v160;
            *v161 = v211;
            v161[1] = v209;
            v162 = (v265 + 1);
            LODWORD(v265) = v162;
            if (v162 >= HIDWORD(v265))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v266, v162 + 1, 16);
              LODWORD(v162) = v265;
            }
            v163 = (char *)__src + 16 * v162;
            *v163 = v14;
            v163[1] = v210;
            LODWORD(v265) = v265 + 1;
          }
          v164 = *(_QWORD *)(v219 + 80);
          v165 = (unsigned int *)(v164 + 24);
          if (*(_DWORD *)(v164 + 32) >= 0x41u)
            v165 = *(unsigned int **)v165;
          v166 = *v165;
          v167 = *(_QWORD *)(v220 + 80);
          v168 = (unsigned int *)(v167 + 24);
          if (*(_DWORD *)(v167 + 32) >= 0x41u)
            v168 = *(unsigned int **)v168;
          v169 = (v166 | *v168) != 0;
          if (v8 && v166 | *v168)
          {
            v170 = v265;
            if (v265 >= HIDWORD(v265))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v266, v265 + 1, 16);
              v170 = v265;
            }
            v171 = (char *)__src + 16 * v170;
            *v171 = v218;
            v171[1] = v217;
            LODWORD(v265) = v265 + 1;
          }
          v172 = *(_QWORD *)(a1 + 480);
          if (v245)
          {
            LODWORD(v261) = 0;
            sub_1C4785D88(v172, v221, "SMPCMode", &v261);
            v181 = *(_QWORD *)(a1 + 480);
            if (*(_BYTE *)(v181 + 287))
            {
              LODWORD(v261) = 0;
              sub_1C4785D88(v181, v221, "SMPSLCMode", &v261);
            }
          }
          else
          {
            LODWORD(v261) = 0;
            sub_1C4785D88(v172, v221, "SMPWriteCMode", &v261);
            v173 = *(_QWORD *)(a1 + 480);
            if (*(_BYTE *)(v173 + 287))
            {
              LODWORD(v261) = 0;
              sub_1C4785D88(v173, v221, "SMPWriteSLCMode", &v261);
            }
            v174 = *(_QWORD *)(*(_QWORD *)(v238 + 32) + 40 * v259);
            v175 = *(unsigned __int16 *)(v174 + 56);
            if (v175 >= 2)
            {
              v176 = v112;
              v177 = v265;
              v178 = 1;
              v179 = 40;
              do
              {
                v180 = *(_OWORD *)(*(_QWORD *)(v174 + 32) + v179);
                if (v177 >= HIDWORD(v265))
                {
                  *(_OWORD *)v222 = *(_OWORD *)(*(_QWORD *)(v174 + 32) + v179);
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v266, v177 + 1, 16);
                  v180 = *(_OWORD *)v222;
                  v177 = v265;
                }
                *((_OWORD *)__src + v177) = v180;
                v177 = v265 + 1;
                LODWORD(v265) = v265 + 1;
                v178 += 2;
                v179 += 80;
              }
              while (v178 < v175);
              LODWORD(v112) = v176;
            }
          }
          if (!v237)
          {
            sub_1C612E234((unsigned int *)&v267, __src, (_BYTE *)__src + 16 * v265);
            LODWORD(v265) = 0;
          }
          sub_1C47E2F04(*(_QWORD *)(a1 + 296), (uint64_t)&v241, (uint64_t)&v267);
          v223 = v182;
          v184 = v183;
          if (v260 != 1)
            sub_1C636A8B4(*(_QWORD *)(a1 + 296), 174, 0, 1, 0);
          v185 = v108 & 0xFFFFFFFF00000000;
          v186 = v112;
          v187 = v244;
          v239[0] = 0;
          v239[1] = 0;
          v240 = 0;
          v188 = *(_QWORD *)(v238 + 48);
          if (!v188)
          {
LABEL_219:
            v189 = 1;
            if (v237 && v245 == 1)
              sub_1C636A8B4(*(_QWORD *)(a1 + 296), 9, 0, 1, 0);
LABEL_238:
            v198 = v186 | v185;
            if (v236)
              __asm { BR              X10 }
            sub_1C47E31DC(v233, v187, v245, -1, v169, v189, 0);
            v261 = v263;
            v263[0] = v226;
            v263[1] = v198;
            v263[2] = v225;
            v263[3] = v224;
            v199 = *(_QWORD *)(a1 + 296);
            v263[4] = v223;
            v263[5] = v234 & 0xFFFFFFFF00000000 | v184;
            v262 = 0x800000003;
            v200 = sub_1C6366AB4(v199, 0, (const llvm::APInt *)&v241, (llvm *)5, 0, 1, 0);
            v202 = v201;
            v203 = v262;
            if (v262 >= HIDWORD(v262))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v261, (uint64_t)v263, v262 + 1, 16);
              v203 = v262;
            }
            v204 = (char *)v261 + 16 * v203;
            *v204 = v200;
            v204[1] = v202;
            LODWORD(v262) = v262 + 1;
            __asm { BR              X10 }
          }
          while (1)
          {
            if (!*(_DWORD *)(v188 + 8))
            {
              v261 = 0;
              v190 = *(_QWORD *)(v188 + 16);
              v191 = *(unsigned __int16 *)(v190 + 24);
              if ((v191 & 0x8000) != 0)
              {
                if (v191 != 65527)
                  goto LABEL_237;
                v192 = *(_QWORD *)(v190 + 48);
                if (!v192 || *(_QWORD *)(v192 + 32))
                  goto LABEL_237;
                v193 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v190 + 32) + 40) + 80);
                v194 = (_QWORD *)(v193 + 24);
                if (*(_DWORD *)(v193 + 32) >= 0x41u)
                  v194 = (_QWORD *)*v194;
                v195 = *(_DWORD *)v194;
                v190 = *(_QWORD *)(v192 + 16);
                v196 = *(unsigned __int16 *)(v190 + 24);
                v261 = (void *)v190;
                if (v196 != 212)
                {
LABEL_237:
                  v189 = 0;
                  goto LABEL_238;
                }
                v197 = v195 - 33;
              }
              else
              {
                if (v191 != 212)
                  goto LABEL_237;
                v197 = 0;
                v261 = *(void **)(v188 + 16);
              }
              if (**(_BYTE **)(v190 + 40) != 9)
                goto LABEL_237;
              *((_DWORD *)sub_1C6128C08(v239, &v261) + 2) = v197;
            }
            v188 = *(_QWORD *)(v188 + 32);
            if (!v188)
              goto LABEL_219;
          }
        }
      }
      else
      {
        v129 = v235;
        if (v229)
        {
          v123 = 0;
          v124 = v42 == 0;
          if (v42)
            v126 = 6;
          else
            v126 = 2;
          if (!v42)
            goto LABEL_157;
        }
        else
        {
          if (!(v42 | v227))
          {
            LODWORD(v126) = 0;
            goto LABEL_188;
          }
          v123 = 0;
          v124 = 0;
          if (v42)
            v126 = 5;
          else
            v126 = 1;
          if (!v42)
          {
LABEL_157:
            if (!v123)
              goto LABEL_188;
            goto LABEL_160;
          }
        }
      }
    }
    v149 = v265;
    if (v265 >= HIDWORD(v265))
    {
      v205 = v126;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v266, v265 + 1, 16);
      LODWORD(v126) = v205;
      v129 = v235;
      v149 = v265;
    }
    v150 = (char *)__src + 16 * v149;
    *v150 = v42;
    v150[1] = v43;
    LODWORD(v265) = v265 + 1;
    goto LABEL_188;
  }
  v71 = *(unsigned __int16 *)(v32 + 56);
  v72 = *(_QWORD *)(v32 + 32);
  v73 = *(_QWORD *)(v72 + 40);
  v74 = *(_QWORD *)(v72 + 120);
  if (v71 == 7)
  {
    v75 = *(_QWORD *)(v72 + 200);
    v76 = *(_DWORD *)(v72 + 208);
    v77 = *(unsigned __int16 *)(v73 + 24);
    v78 = *(unsigned __int16 *)(v75 + 24);
    if (v77 == 98)
    {
      if (v78 == 98)
      {
        v79 = *(_QWORD *)(v73 + 32);
        v80 = *(_QWORD *)(v75 + 32);
        v81 = *(_QWORD *)(v79 + 40);
        if (v81 == *(_QWORD *)(v80 + 40) && *(_DWORD *)(v79 + 48) == *(_DWORD *)(v80 + 48))
        {
          v82 = *(unsigned __int16 *)(v81 + 24) == 423;
          goto LABEL_103;
        }
      }
    }
    else
    {
      v86 = 0;
      if (v77 != 99 || v78 != 99)
        goto LABEL_107;
      v87 = *(_QWORD *)(v73 + 32);
      v88 = *(_QWORD *)(v75 + 32);
      if (*(_QWORD *)(v87 + 40) == *(_QWORD *)(v88 + 40))
      {
        v82 = *(_DWORD *)(v87 + 48) == *(_DWORD *)(v88 + 48);
LABEL_103:
        v86 = v82;
        goto LABEL_107;
      }
    }
    v86 = 0;
  }
  else
  {
    v75 = 0;
    v76 = 0;
    v86 = 1;
  }
LABEL_107:
  v89 = *(_QWORD *)(v72 + 48);
  v90 = *(_QWORD *)(v72 + 128);
  if (v69)
  {
    v91 = *(unsigned __int16 *)(v73 + 24);
    if (v91 == 99)
    {
      if (*(_WORD *)(v74 + 24) == 99)
      {
        v100 = *(__int128 **)(v73 + 32);
        v101 = *(__int128 **)(v74 + 32);
        if (*((_QWORD *)v100 + 5) == *((_QWORD *)v101 + 5))
        {
          v102 = v86 ^ 1;
          if (*((_DWORD *)v100 + 12) != *((_DWORD *)v101 + 12))
            v102 = 1;
          if ((v102 & 1) == 0)
          {
            v269 = *v100;
            LODWORD(v268) = 1;
            v270 = *v101;
            v96 = 2;
            LODWORD(v268) = 2;
            if (v71 == 7)
            {
              v271 = *(_OWORD *)*(_QWORD *)(v75 + 32);
              v96 = 3;
            }
            v97 = *(_OWORD *)(*(_QWORD *)(v73 + 32) + 40);
            goto LABEL_128;
          }
        }
      }
    }
    else if (v91 == 98 && *(_WORD *)(v74 + 24) == 98)
    {
      v92 = *(__int128 **)(v73 + 32);
      v93 = *(__int128 **)(v74 + 32);
      v94 = *((_QWORD *)v92 + 5);
      if (v94 == *((_QWORD *)v93 + 5) && *((_DWORD *)v92 + 12) == *((_DWORD *)v93 + 12))
      {
        v95 = v86 ^ 1;
        if (*(_WORD *)(v94 + 24) != 423)
          v95 = 1;
        if ((v95 & 1) == 0)
        {
          v269 = *v92;
          LODWORD(v268) = 1;
          v270 = *v93;
          v96 = 2;
          LODWORD(v268) = 2;
          if (v71 == 7)
          {
            v271 = *(_OWORD *)*(_QWORD *)(v75 + 32);
            v96 = 3;
            LODWORD(v268) = 3;
          }
          v97 = *(_OWORD *)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 32) + 40) + 32);
LABEL_128:
          *(&v269 + v96) = v97;
          v85 = v96 + 1;
          goto LABEL_131;
        }
      }
    }
  }
  *(_QWORD *)&v269 = v73;
  *((_QWORD *)&v269 + 1) = v89;
  *(_QWORD *)&v270 = v74;
  *((_QWORD *)&v270 + 1) = v90;
  LODWORD(v268) = 2;
  if (v71 != 7)
    goto LABEL_132;
  *(_QWORD *)&v271 = v75;
  *((_QWORD *)&v271 + 1) = v76;
  v85 = 3;
  goto LABEL_131;
}

unsigned int *sub_1C47E2804@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X8>)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, a2);
  else
    return (unsigned int *)llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2, a2);
}

void *sub_1C47E2820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11[2];

  v4 = *(_QWORD *)a3;
  v11[0] = 0;
  v11[1] = 0;
  result = sub_1C6366AB4(a1, v4, (const llvm::APInt *)v11, (llvm *)*(unsigned __int8 *)(a3 + 8), 0, 1, 0);
  v6 = result;
  v8 = v7;
  v9 = *(unsigned int *)(a2 + 8);
  if (v9 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 16);
    LODWORD(v9) = *(_DWORD *)(a2 + 8);
  }
  v10 = (_QWORD *)(*(_QWORD *)a2 + 16 * v9);
  *v10 = v6;
  v10[1] = v8;
  ++*(_DWORD *)(a2 + 8);
  if (v11[0])
    return (void *)llvm::MetadataTracking::untrack((uint64_t)v11, v11[0]);
  return result;
}

void *sub_1C47E28C4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  uint64_t v5;
  void *result;
  __int128 v7;

  v4 = *a3;
  v5 = *(unsigned int *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    v7 = *a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v5 + 1, 16);
    v4 = v7;
    LODWORD(v5) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v5) = v4;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1C47E2930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 *v18[2];

  v6 = *(unsigned int *)(a3 + 4);
  v18[0] = 0;
  v18[1] = 0;
  v7 = sub_1C6366AB4(a1, v6, (const llvm::APInt *)v18, (llvm *)5, 0, 1, 0);
  v9 = v8;
  v10 = *(unsigned int *)(a2 + 8);
  if (v10 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a2 + 8);
  }
  v11 = (_QWORD *)(*(_QWORD *)a2 + 16 * v10);
  *v11 = v7;
  v11[1] = v9;
  ++*(_DWORD *)(a2 + 8);
  if (v18[0])
    llvm::MetadataTracking::untrack((uint64_t)v18, v18[0]);
  result = sub_1C5D428B0(a1, *(_DWORD *)a3, (llvm *)5, 0);
  v13 = result;
  v15 = v14;
  v16 = *(unsigned int *)(a2 + 8);
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    LODWORD(v16) = *(_DWORD *)(a2 + 8);
  }
  v17 = (uint64_t *)(*(_QWORD *)a2 + 16 * v16);
  *v17 = v13;
  v17[1] = v15;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1C47E2A40(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (!v2)
    return 1;
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 16);
    result = sub_1C47E2AD4(v4);
    if (!(_DWORD)result)
      break;
    if ((*(_WORD *)(v4 + 24) & 0xFFFE) == 0xDE)
    {
      if ((sub_1C47E2A40(v4, a2) & 1) == 0)
        return 0;
    }
    else
    {
      sub_1C4774094(a2, v4);
      if ((*((_DWORD *)a2 + 5) - *((_DWORD *)a2 + 6)) > 2)
        return 0;
    }
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return 1;
  }
  return result;
}

uint64_t sub_1C47E2AD4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _BOOL4 v5;

  v1 = *(unsigned __int16 *)(a1 + 24);
  if (v1 == 46)
  {
    v2 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 80);
    v3 = (_QWORD *)(v2 + 24);
    if (*(_DWORD *)(v2 + 32) >= 0x41u)
      v3 = (_QWORD *)*v3;
    return (unint64_t)(*v3 - 2091) < 6;
  }
  else if (sub_1C47DF7BC(*(unsigned __int16 *)(a1 + 24)))
  {
    return 1;
  }
  else
  {
    v5 = v1 == 443;
    if (v1 == 423)
      v5 = 1;
    return (v1 - 202) <= 0x15 && ((1 << (v1 + 54)) & 0x300003) != 0 || v5;
  }
}

uint64_t *sub_1C47E2B70(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int16 v32;
  unsigned int v33;
  uint64_t v34;
  __int16 v35;
  unsigned __int8 *v37;
  int v38;

  v12 = *(unsigned __int8 **)(a1 + 64);
  v37 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v37, v12, 2);
  v38 = *(_DWORD *)(a1 + 60);
  v13 = *(unsigned __int16 *)(a1 + 24);
  if (v13 == 222)
  {
    v14 = **(_QWORD **)(a1 + 32);
    v15 = a2 & 0xFFFFFFFF00000000;
    v16 = *(unsigned __int16 *)(v14 + 24);
  }
  else
  {
    v16 = *(unsigned __int16 *)(a1 + 24);
    v14 = a1;
    v15 = a2;
  }
  if (v16 == 223)
  {
    v14 = **(_QWORD **)(v14 + 32);
    v15 &= 0xFFFFFFFF00000000;
    v17 = *(unsigned __int16 *)(v14 + 24);
  }
  else
  {
    v17 = v16;
  }
  if (v17 != 212 || (a4 & 1) != 0)
    goto LABEL_27;
  v18 = *(_DWORD **)(v14 + 32);
  v19 = *(unsigned __int16 *)(*(_QWORD *)v18 + 24);
  v20 = *(_QWORD *)(*(_QWORD *)v18 + 48);
  if (!v20)
  {
    v22 = 1;
    goto LABEL_20;
  }
  v21 = v18[2];
  v22 = 1;
  while (*(_DWORD *)(v20 + 8) != v21)
  {
LABEL_16:
    v20 = *(_QWORD *)(v20 + 32);
    if (!v20)
      goto LABEL_20;
  }
  if (v22)
  {
    --v22;
    goto LABEL_16;
  }
  LODWORD(v20) = 1;
LABEL_20:
  if (v22)
    v23 = 1;
  else
    v23 = v20;
  if (v19 == 395)
    a4 = 1;
  else
    a4 = v23;
  v17 = *(unsigned __int16 *)(v14 + 24);
LABEL_27:
  if (v17 != 212 || a4 == 0)
  {
    v25 = *(_QWORD *)(a3 + 832);
    if (v25)
      v26 = *(_WORD *)(v25 + 8);
    else
      v26 = 0;
    v28 = sub_1C5D52060(a3, 215, (const llvm::APInt *)&v37, (llvm *)0xA, 0, a1, a2, v26);
    if (!a5)
      goto LABEL_48;
    goto LABEL_51;
  }
  v27 = *(_QWORD *)(v14 + 32);
  v28 = *(uint64_t **)v27;
  v29 = v15 & 0xFFFFFFFF00000000;
  v30 = v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v27 + 8);
  if (v16 == 223)
  {
    v31 = *(_QWORD *)(a3 + 832);
    v32 = v31 ? *(_WORD *)(v31 + 8) : 0;
    v28 = sub_1C5D52060(a3, 223, (const llvm::APInt *)&v37, (llvm *)0xA, 0, *(_QWORD *)v27, v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v27 + 8), v32);
    v30 = v33 | v29;
    if (a5)
      sub_1C612E190(a3, a5, a6, (uint64_t)v28);
  }
  if (v13 == 222)
  {
    v34 = *(_QWORD *)(a3 + 832);
    v35 = v34 ? *(_WORD *)(v34 + 8) : 0;
    v28 = sub_1C5D52060(a3, 222, (const llvm::APInt *)&v37, (llvm *)0xA, 0, (uint64_t)v28, v30, v35);
    if (a5)
LABEL_51:
      sub_1C612E190(a3, a5, a6, (uint64_t)v28);
  }
LABEL_48:
  if (v37)
    llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
  return v28;
}

uint64_t sub_1C47E2DDC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  if (a3 > 3)
    return 0;
  v4 = *(unsigned __int16 *)(a1 + 24);
  if ((*(__int16 *)(a1 + 24) & 0x80000000) == 0)
  {
    if (v4 <= 0x3A)
    {
      if (((1 << v4) & 0x800001802) != 0)
        return 1;
      if (((1 << v4) & 0x504000000000000) != 0)
        goto LABEL_32;
    }
    v5 = v4 - 175;
    v6 = v5 > 0x29;
    v7 = (1 << v5) & 0x20001800007;
    if (!v6 && v7 != 0)
    {
LABEL_32:
      if (*(_WORD *)(a1 + 56))
      {
        v9 = a3 + 1;
        v10 = *(unsigned __int16 *)(a1 + 56) - 1;
        v11 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        do
        {
          result = sub_1C47E2DDC(*(v11 - 1), *v11, v9);
          v12 = v10-- != 0;
          v13 = v12;
          if (!(_DWORD)result)
            break;
          v11 += 5;
        }
        while ((v13 & 1) != 0);
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (v4 != 65517)
    return 0;
  if (!*(_WORD *)(a1 + 56))
    return 1;
  v14 = a3 + 1;
  v15 = *(unsigned __int16 *)(a1 + 56) - 1;
  v16 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  do
  {
    result = sub_1C47E2DDC(*(v16 - 1), *v16, v14);
    v12 = v15-- != 0;
    v17 = v12;
    if (!(_DWORD)result)
      break;
    v16 += 5;
  }
  while ((v17 & 1) != 0);
  return result;
}

void sub_1C47E2F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1C47E2F64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,__int128 a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,int a50)
{
  uint64_t v50;

  return **(_QWORD **)v50;
}

uint64_t sub_1C47E31DC(int a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;

  if (a3 != -1)
    __asm { BR              X11 }
  v7 = (unsigned int *)&unk_1C64179C8;
  if (a6)
    v7 = (unsigned int *)&unk_1C64179A8;
  v8 = (unsigned int *)&unk_1C6417A08;
  if (a6)
    v8 = (unsigned int *)&unk_1C64179E8;
  v9 = (unsigned int *)&unk_1C6417988;
  if (a6)
    v9 = (unsigned int *)&unk_1C6417968;
  if ((a1 - 5) >= 2)
    v8 = v9;
  if ((a1 - 1) >= 2)
    v10 = v8;
  else
    v10 = v7;
  return v10[4 * a7 + a4 - 1];
}

void sub_1C47E3844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C636595C(*(_QWORD *)(a1 + 296), a2, a3);
  sub_1C63725DC(a3);
  sub_1C6365540(*(_QWORD **)(a1 + 296), a2);
}

uint64_t sub_1C47E3888(uint64_t a1, uint64_t a2)
{
  void *v5[2];
  uint64_t v6;
  __int128 __p;
  uint64_t v8;
  __int128 v9;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C47EBC30(v5, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1C47EBC30(&__p, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 40);
  }
  v9 = *(_OWORD *)(a2 + 48);
  sub_1C53B18D0(a1 + 80, (__int128 *)v5);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
  return a1;
}

_QWORD *sub_1C47E3940(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, unsigned int *a6, __int128 *a7, unsigned int *a8, int *a9, int *a10, uint64_t a11)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 v41;
  __int128 v42;
  unsigned __int8 *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[20];

  v47[18] = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v45 = v47;
  v46 = 0x900000000;
  v43 = 0;
  v18 = sub_1C6366AB4(a1, a4, (const llvm::APInt *)&v43, (llvm *)6, 0, 1, 0);
  v20 = v19;
  v21 = v46;
  if (v46 >= HIDWORD(v46))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 16);
    v21 = v46;
  }
  v22 = (char *)v45 + 16 * v21;
  *v22 = v18;
  v22[1] = v20;
  v23 = v46 + 1;
  LODWORD(v46) = v46 + 1;
  if (v43)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v43, v43);
    v23 = v46;
  }
  v24 = *a5;
  if (v23 >= HIDWORD(v46))
  {
    v41 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v23 + 1, 16);
    v24 = v41;
    v23 = v46;
  }
  *((_OWORD *)v45 + v23) = v24;
  LODWORD(v46) = v46 + 1;
  v25 = *a6;
  v43 = 0;
  v44 = 0;
  v26 = sub_1C6366AB4(a1, v25, (const llvm::APInt *)&v43, (llvm *)6, 0, 1, 0);
  v28 = v27;
  v29 = v46;
  if (v46 >= HIDWORD(v46))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 16);
    v29 = v46;
  }
  v30 = (char *)v45 + 16 * v29;
  *v30 = v26;
  v30[1] = v28;
  v31 = v46 + 1;
  LODWORD(v46) = v46 + 1;
  if (v43)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v43, v43);
    v31 = v46;
  }
  v32 = *a7;
  if (v31 >= HIDWORD(v46))
  {
    v42 = *a7;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v31 + 1, 16);
    v32 = v42;
    v31 = v46;
  }
  *((_OWORD *)v45 + v31) = v32;
  LODWORD(v46) = v46 + 1;
  v33 = *a8;
  v43 = 0;
  v44 = 0;
  v34 = sub_1C6366AB4(a1, v33, (const llvm::APInt *)&v43, (llvm *)6, 0, 1, 0);
  v36 = v35;
  v37 = v46;
  if (v46 >= HIDWORD(v46))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 16);
    v37 = v46;
  }
  v38 = (char *)v45 + 16 * v37;
  *v38 = v34;
  v38[1] = v36;
  LODWORD(v46) = v46 + 1;
  if (v43)
    llvm::MetadataTracking::untrack((uint64_t)&v43, v43);
  sub_1C47EBCB8(a1, (uint64_t)&v45, *a9, a10, a11);
  v39 = sub_1C636E56C(a1, a2, a3, (llvm *)4, 0, (uint64_t *)v45, v46);
  if (v45 != v47)
    free(v45);
  return v39;
}

_QWORD *sub_1C47E3C48(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v6;
  uint64_t ExtendedSizeInBits;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  __int128 v16;

  v6 = *(unsigned __int16 *)(a2 + 24);
  if (v6 != 11 && v6 != 35)
    return sub_1C612E5C8(a1, a2, a3, a4);
  v16 = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  if ((_BYTE)v16)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v16);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v16);
  v9 = ExtendedSizeInBits;
  if ((_DWORD)v8 == 1)
  v10 = *(_QWORD *)(a2 + 80);
  v11 = (_QWORD *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v11 = (_QWORD *)*v11;
  v12 = *v11 | ((unint64_t)(v9 == 16) << 32);
  v13 = *(unsigned __int8 **)(a2 + 64);
  *(_QWORD *)&v16 = v13;
  if (v13)
    llvm::MetadataTracking::track((uint64_t)&v16, v13, 2);
  DWORD2(v16) = *(_DWORD *)(a2 + 60);
  v14 = sub_1C6366AB4(a1, v12, (const llvm::APInt *)&v16, (llvm *)6, 0, 1, 0);
  if ((_QWORD)v16)
    llvm::MetadataTracking::untrack((uint64_t)&v16, (unsigned __int8 *)v16);
  return v14;
}

_QWORD *sub_1C47E3D78(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4, unsigned int a5, __int128 *a6, __int128 *a7, __int128 *a8, __int128 *a9, __int128 *a10, __int128 *a11, __int128 *a12, __int128 *a13, __int128 *a14, uint64_t a15)
{
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  _QWORD *v45;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unsigned __int8 *v56[2];
  void *v57;
  uint64_t v58;
  _QWORD v59[26];

  v59[24] = *MEMORY[0x1E0C80C00];
  v56[1] = 0;
  v57 = v59;
  v58 = 0xC00000000;
  v56[0] = 0;
  v22 = sub_1C6366AB4(a1, a5, (const llvm::APInt *)v56, (llvm *)6, 0, 1, 0);
  v24 = v23;
  v25 = v58;
  if (v58 >= HIDWORD(v58))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 16);
    v25 = v58;
  }
  v26 = (char *)v57 + 16 * v25;
  *v26 = v22;
  v26[1] = v24;
  v27 = v58 + 1;
  LODWORD(v58) = v58 + 1;
  if (v56[0])
  {
    llvm::MetadataTracking::untrack((uint64_t)v56, v56[0]);
    v27 = v58;
  }
  v28 = *a6;
  if (v27 >= HIDWORD(v58))
  {
    v47 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v27 + 1, 16);
    v28 = v47;
    v27 = v58;
  }
  *((_OWORD *)v57 + v27) = v28;
  v29 = (v58 + 1);
  LODWORD(v58) = v29;
  v30 = *a7;
  if (v29 >= HIDWORD(v58))
  {
    v48 = *a7;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v29 + 1, 16);
    v30 = v48;
    LODWORD(v29) = v58;
  }
  *((_OWORD *)v57 + v29) = v30;
  v31 = (v58 + 1);
  LODWORD(v58) = v31;
  v32 = *a8;
  if (v31 >= HIDWORD(v58))
  {
    v49 = *a8;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v31 + 1, 16);
    v32 = v49;
    LODWORD(v31) = v58;
  }
  *((_OWORD *)v57 + v31) = v32;
  v33 = (v58 + 1);
  LODWORD(v58) = v33;
  v34 = *a9;
  if (v33 >= HIDWORD(v58))
  {
    v50 = *a9;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v33 + 1, 16);
    v34 = v50;
    LODWORD(v33) = v58;
  }
  *((_OWORD *)v57 + v33) = v34;
  v35 = (v58 + 1);
  LODWORD(v58) = v35;
  v36 = *a10;
  if (v35 >= HIDWORD(v58))
  {
    v51 = *a10;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v35 + 1, 16);
    v36 = v51;
    LODWORD(v35) = v58;
  }
  *((_OWORD *)v57 + v35) = v36;
  v37 = (v58 + 1);
  LODWORD(v58) = v37;
  v38 = *a11;
  if (v37 >= HIDWORD(v58))
  {
    v52 = *a11;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v37 + 1, 16);
    v38 = v52;
    LODWORD(v37) = v58;
  }
  *((_OWORD *)v57 + v37) = v38;
  v39 = (v58 + 1);
  LODWORD(v58) = v39;
  v40 = *a12;
  if (v39 >= HIDWORD(v58))
  {
    v53 = *a12;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v39 + 1, 16);
    v40 = v53;
    LODWORD(v39) = v58;
  }
  *((_OWORD *)v57 + v39) = v40;
  v41 = (v58 + 1);
  LODWORD(v58) = v41;
  v42 = *a13;
  if (v41 >= HIDWORD(v58))
  {
    v54 = *a13;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v41 + 1, 16);
    v42 = v54;
    LODWORD(v41) = v58;
  }
  *((_OWORD *)v57 + v41) = v42;
  v43 = (v58 + 1);
  LODWORD(v58) = v43;
  v44 = *a14;
  if (v43 >= HIDWORD(v58))
  {
    v55 = *a14;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v43 + 1, 16);
    v44 = v55;
    LODWORD(v43) = v58;
  }
  *((_OWORD *)v57 + v43) = v44;
  LODWORD(v58) = v58 + 1;
  sub_1C47E2930(a1, (uint64_t)&v57, a15);
  v45 = sub_1C636E56C(a1, 1003, a2, a3, a4, (uint64_t *)v57, v58);
  if (v57 != v59)
    free(v57);
  return v45;
}

_QWORD *sub_1C47E4164(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _BOOL4 v15;
  int v16;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int v48;
  _QWORD *v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  unsigned __int8 **v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  int v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  _QWORD *v86;
  unsigned int v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  unsigned int v106;
  _QWORD *v107;
  unsigned int v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  _QWORD *v114;
  unsigned int v115;
  uint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unsigned __int8 *v136;
  int v137;
  unsigned __int8 *v138;
  int v139;
  uint64_t v140;
  unsigned __int8 *v141;
  int v142;
  unsigned __int8 *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  _QWORD v147[19];

  v10 = a2;
  v11 = a1;
  v147[18] = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned __int16 *)(a2 + 24);
  if (v12 > 0x1B5)
  {
    if (v12 - 438 < 2)
    {
      v15 = 1;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v12 != 11 && v12 != 35)
  {
    if (v12 == 46)
    {
      v13 = *(_QWORD *)(**(_QWORD **)(a2 + 32) + 80);
      v14 = (_QWORD *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u)
        v14 = (_QWORD *)*v14;
      v15 = ((*v14 - 1986) & 0xFFFFFFFFFFFFFFFDLL) == 0;
LABEL_15:
      v18 = *(unsigned __int16 *)(a4 + 24);
      if ((v18 - 438) < 2)
      {
LABEL_20:
        a2 = a4;
        v21 = (_QWORD *)v10;
        v22 = a3;
        v23 = 1;
        return sub_1C47E5694(a1, a2, (llvm *)0x1B, 0, (uint64_t)v21, v22, v23);
      }
      if (v18 == 46)
      {
        v19 = *(_QWORD *)(**(_QWORD **)(a4 + 32) + 80);
        v20 = (_QWORD *)(v19 + 24);
        if (*(_DWORD *)(v19 + 32) >= 0x41u)
          v20 = (_QWORD *)*v20;
        if (((*v20 - 1986) & 0xFFFFFFFFFFFFFFFDLL) == 0)
          goto LABEL_20;
LABEL_80:
        v75 = *(_QWORD *)(a1 + 296);
        v76 = *(unsigned __int8 **)a6;
        if (v12 == 51)
        {
          v138 = *(unsigned __int8 **)a6;
          if (v76)
            llvm::MetadataTracking::track((uint64_t)&v138, v76, 2);
          v139 = *((_DWORD *)a6 + 2);
          v140 = 0;
          v144 = 0;
          v145 = v147;
          v146 = 0x800000000;
          v143 = 0;
          v77 = sub_1C6366AB4(v75, 0, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
          v79 = v78;
          v80 = v146;
          if (v146 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
            v80 = v146;
          }
          v81 = (char *)v145 + 16 * v80;
          *v81 = v77;
          v81[1] = v79;
          LODWORD(v146) = v146 + 1;
          if (v143)
            llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
          v143 = 0;
          v144 = 0;
          v82 = sub_1C6366AB4(v75, 0x100000000, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
          v84 = v83;
          v85 = v146;
          if (v146 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
            v85 = v146;
          }
          v86 = (char *)v145 + 16 * v85;
          *v86 = v82;
          v86[1] = v84;
          v87 = v146 + 1;
          LODWORD(v146) = v146 + 1;
          if (v143)
          {
            llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
            v87 = v146;
          }
          if (v87 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v87 + 1, 16);
            v87 = v146;
          }
          v88 = (uint64_t *)((char *)v145 + 16 * v87);
          *v88 = a4;
          v88[1] = a5;
          LODWORD(v146) = v146 + 1;
          v143 = 0;
          v144 = 0;
          v89 = sub_1C6366AB4(v75, 0, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
          v91 = v90;
          v92 = v146;
          if (v146 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
            v92 = v146;
          }
          v93 = (char *)v145 + 16 * v92;
          *v93 = v89;
          v93[1] = v91;
          LODWORD(v146) = v146 + 1;
          if (v143)
            llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
          v143 = 0;
          v144 = 0;
          v94 = sub_1C6366AB4(v75, 0x100000008, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
          v96 = v95;
          v97 = v146;
          if (v146 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
            v97 = v146;
          }
          v98 = (char *)v145 + 16 * v97;
          *v98 = v94;
          v98[1] = v96;
          LODWORD(v146) = v146 + 1;
          if (v143)
            llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
          v143 = 0;
          v144 = 0;
          v99 = sub_1C6366AB4(v75, 8, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
          v101 = v100;
          v102 = v146;
          if (v146 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
            v102 = v146;
          }
          v103 = (char *)v145 + 16 * v102;
          *v103 = v99;
          v103[1] = v101;
          LODWORD(v146) = v146 + 1;
          if (v143)
            llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
          sub_1C47E2930(v75, (uint64_t)&v145, (uint64_t)&v140);
          v60 = sub_1C636E56C(v75, 12435, (uint64_t)&v138, (llvm *)0x1B, 0, (uint64_t *)v145, v146);
          if (v145 != v147)
            free(v145);
          v61 = v138;
          if (!v138)
            return v60;
          v62 = &v138;
        }
        else
        {
          v136 = *(unsigned __int8 **)a6;
          if (v76)
            llvm::MetadataTracking::track((uint64_t)&v136, v76, 2);
          v137 = *((_DWORD *)a6 + 2);
          v140 = 0;
          v144 = 0;
          v145 = v147;
          v146 = 0x900000000;
          v143 = 0;
          v104 = sub_1C6366AB4(v75, 0, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
          v106 = v146;
          if (v146 >= HIDWORD(v146))
          {
            v133 = v105;
            v135 = v104;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
            v105 = v133;
            v104 = v135;
            v106 = v146;
          }
          v107 = (char *)v145 + 16 * v106;
          *v107 = v104;
          v107[1] = v105;
          v108 = v146 + 1;
          LODWORD(v146) = v146 + 1;
          if (v143)
          {
            llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
            v108 = v146;
          }
          if (v108 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v108 + 1, 16);
            v108 = v146;
          }
          v109 = (uint64_t *)((char *)v145 + 16 * v108);
          *v109 = v10;
          v109[1] = a3;
          LODWORD(v146) = v146 + 1;
          v143 = 0;
          v144 = 0;
          v110 = sub_1C6366AB4(v75, 0, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
          v112 = v111;
          v113 = v146;
          if (v146 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
            v113 = v146;
          }
          v114 = (char *)v145 + 16 * v113;
          *v114 = v110;
          v114[1] = v112;
          v115 = v146 + 1;
          LODWORD(v146) = v146 + 1;
          if (v143)
          {
            llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
            v115 = v146;
          }
          if (v115 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v115 + 1, 16);
            v115 = v146;
          }
          v116 = (uint64_t *)((char *)v145 + 16 * v115);
          *v116 = a4;
          v116[1] = a5;
          LODWORD(v146) = v146 + 1;
          v143 = 0;
          v144 = 0;
          v117 = sub_1C6366AB4(v75, 0, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
          v119 = v118;
          v120 = v146;
          if (v146 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
            v120 = v146;
          }
          v121 = (char *)v145 + 16 * v120;
          *v121 = v117;
          v121[1] = v119;
          LODWORD(v146) = v146 + 1;
          if (v143)
            llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
          v143 = 0;
          v144 = 0;
          v122 = sub_1C6366AB4(v75, 0x100000008, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
          v124 = v123;
          v125 = v146;
          if (v146 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
            v125 = v146;
          }
          v126 = (char *)v145 + 16 * v125;
          *v126 = v122;
          v126[1] = v124;
          LODWORD(v146) = v146 + 1;
          if (v143)
            llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
          v143 = 0;
          v144 = 0;
          v127 = sub_1C6366AB4(v75, 8, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
          v129 = v128;
          v130 = v146;
          if (v146 >= HIDWORD(v146))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
            v130 = v146;
          }
          v131 = (char *)v145 + 16 * v130;
          *v131 = v127;
          v131[1] = v129;
          LODWORD(v146) = v146 + 1;
          if (v143)
            llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
          sub_1C47E2930(v75, (uint64_t)&v145, (uint64_t)&v140);
          v60 = sub_1C636E56C(v75, 12407, (uint64_t)&v136, (llvm *)0x1B, 0, (uint64_t *)v145, v146);
          if (v145 != v147)
            free(v145);
          v61 = v136;
          if (!v136)
            return v60;
          v62 = &v136;
        }
        goto LABEL_139;
      }
      if (!v15)
      {
        if (v18 == 51)
        {
          v63 = *(_QWORD *)(a1 + 296);
          v64 = *(_QWORD *)(v63 + 832);
          if (v64)
            v65 = *(_WORD *)(v64 + 8);
          else
            v65 = 0;
          v60 = sub_1C5D52060(v63, 216, a6, (llvm *)0x1B, 0, a2, a3, v65);
          sub_1C612E190(*(_QWORD *)(v11 + 296), v10, a3, (uint64_t)v60);
          return v60;
        }
        goto LABEL_80;
      }
      if (v18 == 437)
      {
        v24 = *(uint64_t **)(a4 + 32);
        v25 = *(unsigned __int8 *)(*(_QWORD *)(*v24 + 40) + 16 * *((unsigned int *)v24 + 2));
        if (v25 == 27)
        {
          v26 = v24[5];
          v27 = *(unsigned __int16 *)(v26 + 24);
          if (v27 != 35 && v27 != 11)
            goto LABEL_80;
          v29 = *(_QWORD *)(v26 + 80);
          v30 = (_QWORD *)(v29 + 24);
          if (*(_DWORD *)(v29 + 32) >= 0x41u)
            v30 = (_QWORD *)*v30;
          if (*v30 != 1)
            goto LABEL_80;
          v22 = v24[1];
          v21 = (_QWORD *)*v24;
        }
        else
        {
          if (v25 != 28)
            goto LABEL_80;
          v66 = v24[5];
          v67 = *(unsigned __int16 *)(v66 + 24);
          if (v67 != 35 && v67 != 11)
            goto LABEL_80;
          v69 = *(_QWORD *)(v66 + 80);
          if (*(_DWORD *)(v69 + 32) > 0x40u)
            v70 = **(_QWORD **)(v69 + 24);
          else
            v70 = *(_QWORD *)(v69 + 24);
          if (v70 == 1)
          {
            v71 = *(_QWORD *)(a1 + 296);
            v72 = v24[1];
            v73 = 1;
          }
          else
          {
            if (v70 != 3)
              goto LABEL_80;
            v71 = *(_QWORD *)(a1 + 296);
            v72 = v24[1];
            v73 = 2;
          }
          v21 = sub_1C636E638(v71, v73, a6, (llvm *)0x1B, 0, *v24, v72);
          v22 = v74;
          a1 = v11;
          a2 = v10;
        }
      }
      else
      {
        if (v18 != 51)
          goto LABEL_80;
        v21 = 0;
        v22 = 0;
      }
      v23 = 0;
      return sub_1C47E5694(a1, a2, (llvm *)0x1B, 0, (uint64_t)v21, v22, v23);
    }
LABEL_14:
    v15 = 0;
    goto LABEL_15;
  }
  v16 = *(unsigned __int16 *)(a4 + 24);
  if (v16 != 35 && v16 != 11)
    goto LABEL_14;
  v32 = *(_QWORD *)(a2 + 80);
  v33 = (unsigned __int8 *)(v32 + 24);
  if (*(_DWORD *)(v32 + 32) >= 0x41u)
    v33 = *(unsigned __int8 **)v33;
  v34 = *v33;
  v35 = *(_QWORD *)(a4 + 80);
  v36 = (_QWORD *)(v35 + 24);
  if (*(_DWORD *)(v35 + 32) >= 0x41u)
    v36 = (_QWORD *)*v36;
  v37 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), v34 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)*(_DWORD *)v36 << 8), a6, (llvm *)4, 0, 1, 0);
  v39 = v38;
  v40 = *(_QWORD *)(v11 + 296);
  v41 = *(unsigned __int8 **)a6;
  v141 = v41;
  v42 = v40;
  if (v41)
  {
    llvm::MetadataTracking::track((uint64_t)&v141, v41, 2);
    v42 = *(_QWORD *)(v11 + 296);
  }
  v142 = *((_DWORD *)a6 + 2);
  v43 = sub_1C5D428B0(v42, 0, (llvm *)5, 0);
  v45 = v44;
  v140 = 0;
  v144 = 0;
  v145 = v147;
  v146 = 0x800000000;
  v143 = 0;
  v46 = sub_1C6366AB4(v40, 0, (const llvm::APInt *)&v143, (llvm *)6, 0, 1, 0);
  v48 = v146;
  if (v146 >= HIDWORD(v146))
  {
    v132 = v47;
    v134 = v46;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v146 + 1, 16);
    v47 = v132;
    v46 = v134;
    v48 = v146;
  }
  v49 = (char *)v145 + 16 * v48;
  *v49 = v46;
  v49[1] = v47;
  v50 = v146 + 1;
  LODWORD(v146) = v146 + 1;
  if (v143)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v143, v143);
    v50 = v146;
  }
  if (v50 >= HIDWORD(v146))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v50 + 1, 16);
    v50 = v146;
  }
  v51 = (char *)v145 + 16 * v50;
  *v51 = v37;
  v51[1] = v39;
  v52 = (v146 + 1);
  LODWORD(v146) = v52;
  if (v52 >= HIDWORD(v146))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v52 + 1, 16);
    LODWORD(v52) = v146;
  }
  v53 = (char *)v145 + 16 * v52;
  *v53 = v37;
  v53[1] = v39;
  v54 = (v146 + 1);
  LODWORD(v146) = v54;
  if (v54 >= HIDWORD(v146))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v54 + 1, 16);
    LODWORD(v54) = v146;
  }
  v55 = (char *)v145 + 16 * v54;
  *v55 = v37;
  v55[1] = v39;
  v56 = (v146 + 1);
  LODWORD(v146) = v56;
  if (v56 >= HIDWORD(v146))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v56 + 1, 16);
    LODWORD(v56) = v146;
  }
  v57 = (char *)v145 + 16 * v56;
  *v57 = v37;
  v57[1] = v39;
  v58 = (v146 + 1);
  LODWORD(v146) = v58;
  if (v58 >= HIDWORD(v146))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v147, v58 + 1, 16);
    LODWORD(v58) = v146;
  }
  v59 = (uint64_t *)((char *)v145 + 16 * v58);
  *v59 = v43;
  v59[1] = v45;
  LODWORD(v146) = v146 + 1;
  sub_1C47E2930(v40, (uint64_t)&v145, (uint64_t)&v140);
  v60 = sub_1C636E56C(v40, 1015, (uint64_t)&v141, (llvm *)0x1B, 0, (uint64_t *)v145, v146);
  if (v145 != v147)
    free(v145);
  v61 = v141;
  if (!v141)
    return v60;
  v62 = &v141;
LABEL_139:
  llvm::MetadataTracking::untrack((uint64_t)v62, v61);
  return v60;
}

_QWORD *sub_1C47E4E88(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  unsigned __int8 *v31;
  int v32;
  __int128 v33;
  unsigned __int8 *v34;
  int v35;

  v6 = *(_QWORD **)(a2 + 32);
  v7 = *(_QWORD *)(*v6 + 80);
  v8 = (_QWORD *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v8 = (_QWORD *)*v8;
  if (*v8 == 2094)
    v9 = 3;
  else
    v9 = 2;
  v10 = v6[5];
  v11 = *(_QWORD *)(v6[10] + 80);
  v12 = (_QWORD *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u)
    v12 = (_QWORD *)*v12;
  v13 = v6[6];
  v14 = (_QWORD *)*v12;
  v15 = *(unsigned __int8 **)(a2 + 64);
  v34 = v15;
  if (v15)
    llvm::MetadataTracking::track((uint64_t)&v34, v15, 2);
  v35 = *(_DWORD *)(a2 + 60);
  if (*(_WORD *)(v10 + 24) == 395)
  {
    v16 = *(_QWORD *)(**(_QWORD **)(v10 + 32) + 80);
    v17 = (_QWORD *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    v18 = sub_1C5D410E8(*(_QWORD *)(a1 + 296), 64, (llvm *)0x1B, 0, (v14 >> 1) + (*v17 >> 1), 2);
  }
  else
  {
    if (v14 <= 1)
      v26 = 1;
    else
      v26 = 2;
    v18 = (uint64_t)sub_1C636E638(*(_QWORD *)(a1 + 296), v26, (const llvm::APInt *)&v34, (llvm *)0x1B, 0, v10, v13);
  }
  *(_QWORD *)&v33 = v18;
  DWORD2(v33) = v19;
  if (a3)
    v20 = 9;
  else
    v20 = 10;
  if (a3)
    v21 = 13420;
  else
    v21 = 13412;
  v22 = v21 & 0xFFFFFFFE | v14 & 1;
  v23 = *(_QWORD *)(a1 + 296);
  v31 = v34;
  if (v34)
    llvm::MetadataTracking::track((uint64_t)&v31, v34, 2);
  v32 = v35;
  v29 = v9;
  v30 = 4;
  v28 = 0;
  v27 = 0;
  v24 = sub_1C47EC350(v23, v22, (uint64_t)&v31, v20, 0, (uint64_t)&v29, &v33, &v28, (uint64_t)&v27);
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  return v24;
}

_QWORD *sub_1C47E5070(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  unsigned __int8 *v30;
  int v31;
  __int128 v32;
  unsigned __int8 *v33;
  int v34;

  v6 = *(_QWORD **)(a2 + 32);
  v7 = *(_QWORD *)(*v6 + 80);
  v8 = (_QWORD *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v8 = (_QWORD *)*v8;
  if (*v8 == 2093)
    v9 = 7;
  else
    v9 = 6;
  v10 = v6[5];
  v11 = *(_QWORD *)(v6[10] + 80);
  v12 = (unsigned int *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u)
    v12 = *(unsigned int **)v12;
  v13 = v6[6];
  v14 = *v12;
  v15 = *(unsigned __int8 **)(a2 + 64);
  v33 = v15;
  if (v15)
    llvm::MetadataTracking::track((uint64_t)&v33, v15, 2);
  v34 = *(_DWORD *)(a2 + 60);
  if (*(_WORD *)(v10 + 24) == 395)
  {
    v16 = *(_QWORD *)(**(_QWORD **)(v10 + 32) + 80);
    v17 = (_QWORD *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    v18 = sub_1C5D410E8(*(_QWORD *)(a1 + 296), 64, (llvm *)4, 0, v14 + (*v17 >> 1), 2);
  }
  else
  {
    if (v14 == 1)
      v25 = 2;
    else
      v25 = 1;
    v18 = (uint64_t)sub_1C636E638(*(_QWORD *)(a1 + 296), v25, (const llvm::APInt *)&v33, (llvm *)4, 0, v10, v13);
  }
  *(_QWORD *)&v32 = v18;
  DWORD2(v32) = v19;
  if (a3)
    v20 = 13423;
  else
    v20 = 13415;
  v21 = *(_QWORD *)(a1 + 296);
  v30 = v33;
  if (v33)
    llvm::MetadataTracking::track((uint64_t)&v30, v33, 2);
  v31 = v34;
  v28 = v9;
  v29 = 4;
  v27 = 0;
  v26 = 0;
  if (a3)
    v22 = 9;
  else
    v22 = 10;
  v23 = sub_1C47EC350(v21, v20, (uint64_t)&v30, v22, 0, (uint64_t)&v28, &v32, &v27, (uint64_t)&v26);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  return v23;
}

uint64_t sub_1C47E5250(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned __int8 *v32;
  int v33;

  if (**(_BYTE **)(a1 + 40) != 9)
    return 0;
  v4 = *(unsigned __int8 **)(a1 + 64);
  v32 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v32, v4, 2);
  v33 = *(_DWORD *)(a1 + 60);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = *(_QWORD *)(v5 + 48);
  if (*(_WORD *)(v6 + 24) != 222)
    goto LABEL_11;
  v8 = **(_QWORD **)(v6 + 32);
  if (*(_WORD *)(v8 + 24) != 46)
    goto LABEL_11;
  v9 = *(_QWORD *)(**(_QWORD **)(v8 + 32) + 80);
  v10 = (_QWORD *)(v9 + 24);
  if (*(_DWORD *)(v9 + 32) >= 0x41u)
    v10 = (_QWORD *)*v10;
  if (*v10 == 1830)
  {
    v7 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v5 + 8);
    v11 = *(_QWORD *)v5;
  }
  else
  {
LABEL_11:
    v11 = *(_QWORD *)(v5 + 40);
    v6 = *(_QWORD *)v5;
  }
  if (*(_WORD *)(v6 + 24) != 222)
    goto LABEL_33;
  v13 = *(uint64_t **)(v6 + 32);
  v14 = *v13;
  if (*(_WORD *)(*v13 + 24) != 46)
    goto LABEL_33;
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 80);
  v17 = (_QWORD *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u)
    v17 = (_QWORD *)*v17;
  if (*v17 == 1830)
  {
    v18 = *(_QWORD *)(v15 + 40);
    v19 = *(_QWORD *)(v18 + 48);
    if (!v19)
      goto LABEL_30;
    v20 = *(_DWORD *)(v15 + 48);
    v21 = 1;
    do
    {
      if (*(_DWORD *)(v19 + 8) == v20)
      {
        if (!v21)
          goto LABEL_30;
        --v21;
      }
      v19 = *(_QWORD *)(v19 + 32);
    }
    while (v19);
    if (v21
      || ((v12 = 0, v22 = *(unsigned __int16 *)(v18 + 24), (v22 - 96) <= 0x2D)
        ? (v23 = ((1 << (v22 - 96)) & 0x200000000005) == 0)
        : (v23 = 1),
          v23 && v22 != 443))
    {
LABEL_30:
      v24 = v13[1];
      v25 = sub_1C5D404C4((uint64_t)a2, (const llvm::APInt *)&v32, 9, 0, 0, -1.0);
      v28 = 0;
      v29 = a2[104];
      if (v29)
        v28 = *(_WORD *)(v29 + 8);
      v30 = sub_1C5D58E08((uint64_t)a2, (const char *)0x8D, (const llvm::APInt *)&v32, (llvm *)9, 0, v14, v24, v27, (uint64_t)v25, v26, v11, v7, SHIDWORD(v7), v28);
      sub_1C612E190((uint64_t)a2, a1, 0, (uint64_t)v30);
      sub_1C636595C((uint64_t)a2, a1, (uint64_t)v30);
      sub_1C6365540(a2, a1);
      v12 = 1;
    }
  }
  else
  {
LABEL_33:
    v12 = 0;
  }
  if (v32)
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  return v12;
}

_QWORD *sub_1C47E549C(uint64_t *a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 *v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  unsigned __int8 **v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  int v35;

  v15 = *(unsigned __int8 **)a9;
  if (a3 == 9)
  {
    if (a2)
    {
      v34 = *(unsigned __int8 **)a9;
      if (v15)
        llvm::MetadataTracking::track((uint64_t)&v34, v15, 2);
      v35 = *(_DWORD *)(a9 + 8);
      *((_QWORD *)&v24 + 1) = a6;
      *((_QWORD *)&v20 + 1) = a8;
      *(_QWORD *)&v24 = a5;
      *(_QWORD *)&v20 = a7;
      v16 = sub_1C47F1144(a1, 4u, a7, a8, 1, a5, a6, 0, v20, v24, (const llvm::APInt *)&v34);
      v17 = v34;
      if (v34)
      {
        v18 = &v34;
LABEL_20:
        llvm::MetadataTracking::untrack((uint64_t)v18, v17);
      }
    }
    else
    {
      v32 = *(unsigned __int8 **)a9;
      if (v15)
        llvm::MetadataTracking::track((uint64_t)&v32, v15, 2);
      v33 = *(_DWORD *)(a9 + 8);
      *((_QWORD *)&v26 + 1) = a6;
      *((_QWORD *)&v22 + 1) = a8;
      *(_QWORD *)&v26 = a5;
      *(_QWORD *)&v22 = a7;
      v16 = sub_1C47F1144(a1, 4u, a7, a8, 0, a5, a6, 1, v22, v26, (const llvm::APInt *)&v32);
      v17 = v32;
      if (v32)
      {
        v18 = &v32;
        goto LABEL_20;
      }
    }
  }
  else if (a2)
  {
    v30 = *(unsigned __int8 **)a9;
    if (v15)
      llvm::MetadataTracking::track((uint64_t)&v30, v15, 2);
    v31 = *(_DWORD *)(a9 + 8);
    *((_QWORD *)&v25 + 1) = a6;
    *((_QWORD *)&v21 + 1) = a8;
    *(_QWORD *)&v25 = a5;
    *(_QWORD *)&v21 = a7;
    v16 = sub_1C47F238C(a1, 4, a7, a8, 1, a5, a6, 0, v21, v25, (const llvm::APInt *)&v30);
    v17 = v30;
    if (v30)
    {
      v18 = &v30;
      goto LABEL_20;
    }
  }
  else
  {
    v28 = *(unsigned __int8 **)a9;
    if (v15)
      llvm::MetadataTracking::track((uint64_t)&v28, v15, 2);
    v29 = *(_DWORD *)(a9 + 8);
    *((_QWORD *)&v27 + 1) = a6;
    *((_QWORD *)&v23 + 1) = a8;
    *(_QWORD *)&v27 = a5;
    *(_QWORD *)&v23 = a7;
    v16 = sub_1C47F238C(a1, 4, a7, a8, 0, a5, a6, 1, v23, v27, (const llvm::APInt *)&v28);
    v17 = v28;
    if (v28)
    {
      v18 = &v28;
      goto LABEL_20;
    }
  }
  return v16;
}

_QWORD *sub_1C47E5694(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 v51;
  uint64_t v52;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  unsigned __int8 *v60;
  int v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[18];

  v65[16] = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 **)(a2 + 64);
  v60 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v60, v10, 2);
  v61 = *(_DWORD *)(a2 + 60);
  v11 = sub_1C47EC5FC(a2);
  v12 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * (*(_WORD *)(a2 + 24) == 46));
  v13 = *v12;
  v14 = v12[1];
  v15 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
  v17 = v15;
  v18 = v16;
  v19 = 0;
  if (a5)
    v19 = *(unsigned __int16 *)(a5 + 24) != 51;
  v52 = a5;
  v20 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 40) + 16 * v14) == 9;
  if (*(_WORD *)(v13 + 24) == 215)
  {
    v21 = *(_QWORD *)(v13 + 32);
    v13 = *(_QWORD *)v21;
    v14 = v14 & 0xFFFFFFFF00000000 | *(unsigned int *)(v21 + 8);
    v20 = 1;
  }
  v63 = v65;
  v65[0] = v15;
  v65[1] = v16;
  v64 = 0x800000001;
  v22 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), v11 | 0x100000000, (const llvm::APInt *)&v60, (llvm *)6, 0, 1, 0);
  v24 = v23;
  v25 = v64;
  if (v64 >= HIDWORD(v64))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 16);
    v25 = v64;
  }
  v26 = (char *)v63 + 16 * v25;
  *v26 = v22;
  v26[1] = v24;
  LODWORD(v64) = v64 + 1;
  *(_QWORD *)&v59 = 0;
  DWORD2(v59) = 0;
  v57 = 0;
  LODWORD(v58) = 0;
  if (v20)
  {
    if ((sub_1C47C1164(a1, v13, v14, (uint64_t)&v59, (uint64_t)&v57, 0, 1, 0, 0, 0, 0) & 1) == 0)
    {
LABEL_11:
      v27 = v64;
      if (v64 >= HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 16);
        v27 = v64;
      }
      v28 = (uint64_t *)((char *)v63 + 16 * v27);
      *v28 = v13;
      v28[1] = v14;
      v29 = (v64 + 1);
      LODWORD(v64) = v29;
      if (v29 >= HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v29 + 1, 16);
        LODWORD(v29) = v64;
      }
      v30 = (char *)v63 + 16 * v29;
      *(_QWORD *)v30 = v17;
      v31 = v18;
      goto LABEL_22;
    }
  }
  else if (!sub_1C47C1164(a1, v13, v14, (uint64_t)&v59, (uint64_t)&v57, 0, 0, 0, 0, 0, 0))
  {
    goto LABEL_11;
  }
  v32 = v59;
  v33 = v64;
  if (v64 >= HIDWORD(v64))
  {
    v51 = v59;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 16);
    v32 = v51;
    v33 = v64;
  }
  *((_OWORD *)v63 + v33) = v32;
  v34 = (v64 + 1);
  LODWORD(v64) = v34;
  v35 = v57;
  v31 = v58;
  if (v34 >= HIDWORD(v64))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v34 + 1, 16);
    LODWORD(v34) = v64;
  }
  v30 = (char *)v63 + 16 * v34;
  *(_QWORD *)v30 = v35;
LABEL_22:
  *((_QWORD *)v30 + 1) = v31;
  v36 = (v64 + 1);
  LODWORD(v64) = v64 + 1;
  if (v19)
  {
    if (v36 >= HIDWORD(v64))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v36 + 1, 16);
      LODWORD(v36) = v64;
    }
    v37 = (char *)v63 + 16 * v36;
    *v37 = v52;
    v37[1] = a6;
    v38 = (v64 + 1);
    LODWORD(v64) = v38;
    if (v38 >= HIDWORD(v64))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v38 + 1, 16);
      LODWORD(v38) = v64;
    }
    v39 = (char *)v63 + 16 * v38;
    *v39 = v17;
    v39[1] = v18;
    LODWORD(v64) = v64 + 1;
    if (v20)
      v40 = 12123;
    else
      v40 = 12121;
    if (v20)
      v41 = 12129;
    else
      v41 = 12127;
    if (a7)
      v42 = v41;
    else
      v42 = v40;
  }
  else if (a7)
  {
    v43 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v45 = v44;
    v46 = v64;
    if (v64 >= HIDWORD(v64))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 16);
      v46 = v64;
    }
    v47 = (char *)v63 + 16 * v46;
    *v47 = v43;
    v47[1] = v45;
    LODWORD(v64) = v64 + 1;
    if (v20)
      v42 = 12130;
    else
      v42 = 12128;
  }
  else if (v20)
  {
    v42 = 12143;
  }
  else
  {
    v42 = 12142;
  }
  v48 = *(_QWORD *)(a1 + 296);
  v62 = 0;
  sub_1C47E2930(v48, (uint64_t)&v63, (uint64_t)&v62);
  v49 = sub_1C636E56C(*(_QWORD *)(a1 + 296), v42, (uint64_t)&v60, a3, a4, (uint64_t *)v63, v64);
  if (v63 != v65)
    free(v63);
  if (v60)
    llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
  return v49;
}

_QWORD *sub_1C47E5B78(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  unsigned __int8 **v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;
  BOOL v62;
  int v63;
  int v64;
  int v65;
  unsigned __int8 *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  _QWORD *v71;
  unsigned int v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  _QWORD *v80;
  BOOL v81;
  int v82;
  int v83;
  int v84;
  unsigned __int8 *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  _QWORD *v90;
  unsigned int v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  _QWORD *v97;
  unsigned int v98;
  unint64_t *v99;
  BOOL v100;
  int v101;
  int v102;
  int v103;
  unsigned __int8 *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  _QWORD *v109;
  unsigned int v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  _QWORD *v116;
  unsigned int v117;
  uint64_t *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  _QWORD *v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  llvm *v130;
  unsigned __int8 *v131;
  int v132;
  unsigned __int8 *v133;
  int v134;
  unsigned __int8 *v135;
  int v136;
  unsigned __int8 *v137;
  int v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  char v142;
  unsigned __int8 *v143;
  int v144;
  unsigned __int8 *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  _QWORD v149[18];

  v149[16] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD **)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v130 = *(llvm **)v10;
  v13 = v11[10];
  v12 = v11[11];
  v127 = v11[5];
  v128 = *(_QWORD *)(v10 + 8);
  v125 = v11[6];
  v14 = (unint64_t)sub_1C47E3C48(a1, v127, v125, 0);
  v16 = v15;
  v17 = a1;
  v129 = v13;
  v19 = (unint64_t)sub_1C47E3C48(a1, v13, v12, 0);
  v20 = v18;
  v21 = v14 | v16;
  v22 = v21 != 0;
  if (!v21)
  {
    if (a3 != 58 || (v19 | v18) == 0)
    {
      if (a4)
        v49 = 8;
      else
        v49 = 0;
      v126 = v49;
      if (!(v19 | v18))
      {
        if (a5)
        {
          if (v130 == 4)
          {
            if (a3 == 57)
              v101 = 10145;
            else
              v101 = 4624;
            v100 = a3 == 56;
            v102 = 2640;
          }
          else
          {
            v100 = a3 == 56;
            v101 = 10131;
            v102 = 2626;
          }
        }
        else if (v130 == 4)
        {
          if (a3 == 57)
            v101 = 10249;
          else
            v101 = 4664;
          v100 = a3 == 56;
          v102 = 2744;
        }
        else
        {
          if (a3 == 57)
            v101 = 10199;
          else
            v101 = 4643;
          v100 = a3 == 56;
          v102 = 2694;
        }
        if (v100)
          v103 = v102;
        else
          v103 = v101;
        v104 = *(unsigned __int8 **)(a2 + 64);
        v135 = v104;
        if (v104)
          llvm::MetadataTracking::track((uint64_t)&v135, v104, 2);
        v136 = *(_DWORD *)(a2 + 60);
        v141 = 0;
        v146 = 0;
        v147 = v149;
        v148 = 0x700000000;
        v145 = 0;
        v105 = sub_1C6366AB4(v17, 0, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
        v107 = v106;
        v108 = v148;
        if (v148 >= HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
          v108 = v148;
        }
        v109 = (char *)v147 + 16 * v108;
        *v109 = v105;
        v109[1] = v107;
        v110 = v148 + 1;
        LODWORD(v148) = v148 + 1;
        if (v145)
        {
          llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
          v110 = v148;
        }
        if (v110 >= HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v110 + 1, 16);
          v110 = v148;
        }
        v111 = (uint64_t *)((char *)v147 + 16 * v110);
        *v111 = v127;
        v111[1] = v125;
        LODWORD(v148) = v148 + 1;
        v145 = 0;
        v146 = 0;
        v112 = sub_1C6366AB4(v17, v126, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
        v114 = v113;
        v115 = v148;
        if (v148 >= HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
          v115 = v148;
        }
        v116 = (char *)v147 + 16 * v115;
        *v116 = v112;
        v116[1] = v114;
        v117 = v148 + 1;
        LODWORD(v148) = v148 + 1;
        if (v145)
        {
          llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
          v117 = v148;
        }
        if (v117 >= HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v117 + 1, 16);
          v117 = v148;
        }
        v118 = (uint64_t *)((char *)v147 + 16 * v117);
        *v118 = v129;
        v118[1] = v12;
        LODWORD(v148) = v148 + 1;
        v145 = 0;
        v146 = 0;
        v119 = sub_1C6366AB4(v17, v126, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
        v121 = v120;
        v122 = v148;
        if (v148 >= HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
          v122 = v148;
        }
        v123 = (char *)v147 + 16 * v122;
        *v123 = v119;
        v123[1] = v121;
        LODWORD(v148) = v148 + 1;
        if (v145)
          llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
        sub_1C47E2930(v17, (uint64_t)&v147, (uint64_t)&v141);
        v46 = sub_1C636E56C(v17, v103, (uint64_t)&v135, v130, v128, (uint64_t *)v147, v148);
        if (v147 != v149)
          free(v147);
        v47 = v135;
        if (v135)
        {
          v48 = &v135;
          goto LABEL_174;
        }
        return v46;
      }
      goto LABEL_64;
    }
LABEL_22:
    v27 = *(_QWORD *)(v129 + 80);
    v28 = (_QWORD *)(v27 + 24);
    if (*(_DWORD *)(v27 + 32) >= 0x41u)
      v28 = (_QWORD *)*v28;
    if (!*v28)
      goto LABEL_25;
    if (a4)
      v50 = 8;
    else
      v50 = 0;
    LODWORD(v126) = v50;
    if (v22)
      goto LABEL_11;
LABEL_64:
    if (a5)
    {
      if (v130 == 4)
      {
        if (a3 == 57)
          v82 = 10146;
        else
          v82 = 4625;
        v81 = a3 == 56;
        v83 = 2641;
      }
      else
      {
        v81 = a3 == 56;
        v82 = 10133;
        v83 = 2628;
      }
    }
    else if (v130 == 4)
    {
      if (a3 == 57)
        v82 = 10252;
      else
        v82 = 4666;
      v81 = a3 == 56;
      v83 = 2747;
    }
    else
    {
      if (a3 == 57)
        v82 = 10203;
      else
        v82 = 4645;
      v81 = a3 == 56;
      v83 = 2698;
    }
    if (v81)
      v84 = v83;
    else
      v84 = v82;
    v85 = *(unsigned __int8 **)(a2 + 64);
    v131 = v85;
    if (v85)
      llvm::MetadataTracking::track((uint64_t)&v131, v85, 2);
    v132 = *(_DWORD *)(a2 + 60);
    v141 = 0;
    v146 = 0;
    v147 = v149;
    v148 = 0x600000000;
    v145 = 0;
    v86 = sub_1C6366AB4(v17, 0, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
    v88 = v87;
    v89 = v148;
    if (v148 >= HIDWORD(v148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
      v89 = v148;
    }
    v90 = (char *)v147 + 16 * v89;
    *v90 = v86;
    v90[1] = v88;
    v91 = v148 + 1;
    LODWORD(v148) = v148 + 1;
    if (v145)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
      v91 = v148;
    }
    if (v91 >= HIDWORD(v148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v91 + 1, 16);
      v91 = v148;
    }
    v92 = (uint64_t *)((char *)v147 + 16 * v91);
    *v92 = v127;
    v92[1] = v125;
    LODWORD(v148) = v148 + 1;
    v145 = 0;
    v146 = 0;
    v93 = sub_1C6366AB4(v17, v126, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
    v95 = v94;
    v96 = v148;
    if (v148 >= HIDWORD(v148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
      v96 = v148;
    }
    v97 = (char *)v147 + 16 * v96;
    *v97 = v93;
    v97[1] = v95;
    v98 = v148 + 1;
    LODWORD(v148) = v148 + 1;
    if (v145)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
      v98 = v148;
    }
    if (v98 >= HIDWORD(v148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v98 + 1, 16);
      v98 = v148;
    }
    v99 = (unint64_t *)((char *)v147 + 16 * v98);
    *v99 = v19;
    v99[1] = v20;
    LODWORD(v148) = v148 + 1;
    sub_1C47E2930(v17, (uint64_t)&v147, (uint64_t)&v141);
    v46 = sub_1C636E56C(v17, v84, (uint64_t)&v131, v130, v128, (uint64_t *)v147, v148);
    if (v147 != v149)
      free(v147);
    v47 = v131;
    if (v131)
    {
      v48 = &v131;
      goto LABEL_174;
    }
    return v46;
  }
  if (a3 == 58)
  {
    v23 = *(_QWORD *)(v127 + 80);
    v24 = (_QWORD *)(v23 + 24);
    if (*(_DWORD *)(v23 + 32) >= 0x41u)
      v24 = (_QWORD *)*v24;
    if (!*v24)
    {
LABEL_25:
      v29 = *(unsigned __int8 **)(a2 + 64);
      if (v130 == 4)
      {
        v143 = *(unsigned __int8 **)(a2 + 64);
        if (v29)
          llvm::MetadataTracking::track((uint64_t)&v143, v29, 2);
        v144 = *(_DWORD *)(a2 + 60);
        v141 = 0x100000000;
        v142 = 6;
        *(_QWORD *)&v140 = sub_1C5D428B0(v17, 0, (llvm *)5, 0);
        *((_QWORD *)&v140 + 1) = v30;
        v139 = 0;
        v146 = 0;
        v147 = v149;
        v148 = 0x800000000;
        v145 = 0;
        v31 = sub_1C6366AB4(v17, 0, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
        v33 = v32;
        v34 = v148;
        if (v148 >= HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
          v34 = v148;
        }
        v35 = (char *)v147 + 16 * v34;
        *v35 = v31;
        v35[1] = v33;
        LODWORD(v148) = v148 + 1;
        if (v145)
          llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
        v145 = 0;
        v146 = 0;
        v36 = sub_1C6366AB4(v17, 0x100000000, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
        v38 = v37;
        v39 = v148;
        if (v148 >= HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
          v39 = v148;
        }
        v40 = (char *)v147 + 16 * v39;
        *v40 = v36;
        v40[1] = v38;
        LODWORD(v148) = v148 + 1;
        if (v145)
          llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
        v145 = 0;
        v146 = 0;
        v41 = sub_1C6366AB4(v17, 0x100000000, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
        v43 = v42;
        v44 = v148;
        if (v148 >= HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
          v44 = v148;
        }
        v45 = (char *)v147 + 16 * v44;
        *v45 = v41;
        v45[1] = v43;
        LODWORD(v148) = v148 + 1;
        if (v145)
          llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
        sub_1C47EC01C(v17, (uint64_t)&v147, 0x100000000, 6u, (uint64_t)&v141, &v140, (uint64_t)&v139);
        v46 = sub_1C636E56C(v17, 1015, (uint64_t)&v143, (llvm *)4, 0, (uint64_t *)v147, v148);
        if (v147 != v149)
          free(v147);
        v47 = v143;
        if (!v143)
          return v46;
        v48 = &v143;
      }
      else
      {
        v137 = *(unsigned __int8 **)(a2 + 64);
        if (v29)
          llvm::MetadataTracking::track((uint64_t)&v137, v29, 2);
        v138 = *(_DWORD *)(a2 + 60);
        v141 = 0x100000000;
        v142 = 6;
        *(_QWORD *)&v140 = sub_1C5D428B0(v17, 0, (llvm *)5, 0);
        *((_QWORD *)&v140 + 1) = v51;
        v139 = 0;
        v146 = 0;
        v147 = v149;
        v148 = 0x700000000;
        v145 = 0;
        v52 = sub_1C6366AB4(v17, 0, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
        v54 = v53;
        v55 = v148;
        if (v148 >= HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
          v55 = v148;
        }
        v56 = (char *)v147 + 16 * v55;
        *v56 = v52;
        v56[1] = v54;
        LODWORD(v148) = v148 + 1;
        if (v145)
          llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
        v145 = 0;
        v146 = 0;
        v57 = sub_1C6366AB4(v17, 0x100000000, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
        v59 = v58;
        v60 = v148;
        if (v148 >= HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
          v60 = v148;
        }
        v61 = (char *)v147 + 16 * v60;
        *v61 = v57;
        v61[1] = v59;
        LODWORD(v148) = v148 + 1;
        if (v145)
          llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
        sub_1C47EC01C(v17, (uint64_t)&v147, 0x100000000, 6u, (uint64_t)&v141, &v140, (uint64_t)&v139);
        v46 = sub_1C636E56C(v17, 1445, (uint64_t)&v137, (llvm *)5, 0, (uint64_t *)v147, v148);
        if (v147 != v149)
          free(v147);
        v47 = v137;
        if (!v137)
          return v46;
        v48 = &v137;
      }
LABEL_174:
      llvm::MetadataTracking::untrack((uint64_t)v48, v47);
      return v46;
    }
    if (!(v19 | v18))
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_7:
  if (a4)
    v25 = 8;
  else
    v25 = 0;
  LODWORD(v126) = v25;
LABEL_11:
  if (a5)
  {
    if (v130 == 4)
    {
      if (a3 == 57)
        v63 = 10148;
      else
        v63 = 4626;
      v62 = a3 == 56;
      v64 = 2643;
    }
    else
    {
      v62 = a3 == 56;
      v63 = 10138;
      v64 = 2633;
    }
  }
  else if (v130 == 4)
  {
    if (a3 == 57)
      v63 = 10265;
    else
      v63 = 4672;
    v62 = a3 == 56;
    v64 = 2760;
  }
  else
  {
    if (a3 == 57)
      v63 = 10215;
    else
      v63 = 4651;
    v62 = a3 == 56;
    v64 = 2710;
  }
  if (v62)
    v65 = v64;
  else
    v65 = v63;
  v66 = *(unsigned __int8 **)(a2 + 64);
  v133 = v66;
  if (v66)
    llvm::MetadataTracking::track((uint64_t)&v133, v66, 2);
  v134 = *(_DWORD *)(a2 + 60);
  v141 = 0;
  v146 = 0;
  v147 = v149;
  v148 = 0x600000000;
  v145 = 0;
  v67 = sub_1C6366AB4(v17, 0, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
  v69 = v68;
  v70 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v70 = v148;
  }
  v71 = (char *)v147 + 16 * v70;
  *v71 = v67;
  v71[1] = v69;
  v72 = v148 + 1;
  LODWORD(v148) = v148 + 1;
  if (v145)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
    v72 = v148;
  }
  if (v72 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v72 + 1, 16);
    v72 = v148;
  }
  v73 = (unint64_t *)((char *)v147 + 16 * v72);
  *v73 = v14;
  v73[1] = v16;
  v74 = (v148 + 1);
  LODWORD(v148) = v74;
  if (v74 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v74 + 1, 16);
    LODWORD(v74) = v148;
  }
  v75 = (uint64_t *)((char *)v147 + 16 * v74);
  *v75 = v129;
  v75[1] = v12;
  LODWORD(v148) = v148 + 1;
  v145 = 0;
  v146 = 0;
  v76 = sub_1C6366AB4(v17, v126, (const llvm::APInt *)&v145, (llvm *)6, 0, 1, 0);
  v78 = v77;
  v79 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v79 = v148;
  }
  v80 = (char *)v147 + 16 * v79;
  *v80 = v76;
  v80[1] = v78;
  LODWORD(v148) = v148 + 1;
  if (v145)
    llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
  sub_1C47E2930(v17, (uint64_t)&v147, (uint64_t)&v141);
  v46 = sub_1C636E56C(v17, v65, (uint64_t)&v133, v130, v128, (uint64_t *)v147, v148);
  if (v147 != v149)
    free(v147);
  v47 = v133;
  if (v133)
  {
    v48 = &v133;
    goto LABEL_174;
  }
  return v46;
}

void sub_1C47E6968(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  int v14;
  char v15;
  char v16;
  char v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  _OWORD *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  BOOL v70;
  BOOL v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  _QWORD v85[2];
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  uint64_t v106;
  char v107;
  char v108;
  _BYTE v109[2];
  unsigned __int8 v110;
  unsigned int v111;
  unsigned __int8 v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  void *v131;
  uint64_t v132;
  _BYTE v133[32];
  void *v134;
  uint64_t v135;
  _BYTE v136[32];
  void *v137[10];
  char *v138;
  uint64_t v139;
  _BYTE v140[64];
  __int128 v141;
  _OWORD v142[2];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  llvm::SampleInfo::SampleInfo((uint64_t)v109, a3, 0);
  v108 = 0;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))(*a1 + 48))(&v98, a1, a4, a2, v116, v117, v118, &v108);
  if (!v108 && v107)
  {
    v97 = v104;
    v95 = v98;
    v96 = v99;
    v93 = v100;
    v94 = v101;
    v91 = v102;
    v92 = v103;
    v89 = v105;
    v90 = v106;
    v138 = v140;
    v139 = 0x400000000;
    v7 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, v119);
    v9 = v8;
    v10 = v111 + v122;
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 200))(a1[1]);
    if (v110)
      v12 = v11;
    else
      v12 = 0;
    v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 168))(a1[1]);
    if (v121 == -1)
      v14 = 0;
    else
      v14 = v13;
    v15 = v14 & v12;
    if ((v128 & v120) == 0xFFFFFFFF)
      v15 = v12;
    if ((_DWORD)v10 == 2)
      v16 = ((v126 == -1) | ~(_BYTE)v14) & v15;
    else
      v16 = v15;
    if ((_DWORD)v10 != 1)
    {
      memset(v137, 0, 48);
      if (!(_DWORD)v10)
      {
        v137[0] = v7;
        LODWORD(v137[1]) = v9;
        if ((v16 & 1) == 0)
        {
LABEL_62:
          v10 = 0;
          goto LABEL_63;
        }
        v23 = 0;
        v22 = 0;
        goto LABEL_58;
      }
      (*(void (**)(_QWORD *, void *, uint64_t, void **, uint64_t))(*a1 + 120))(a1, v7, v9, v137, v10);
      v18 = &v137[1];
      v19 = v10;
      do
      {
        if (!*(v18 - 1) && !*(_DWORD *)v18)
        {
          (*(void (**)(_QWORD *, void *, uint64_t, char **, uint64_t))(*a1 + 80))(a1, v7, v9, &v138, v10);
          goto LABEL_62;
        }
        v18 += 2;
        --v19;
      }
      while (v19);
      if ((v16 & 1) == 0)
        goto LABEL_48;
      v73 = a4;
      v75 = a2;
      v20 = v10;
LABEL_34:
      v21 = 0;
      v22 = 0;
      v23 = 0;
      memset(v142, 0, sizeof(v142));
      v141 = 0u;
      v24 = v10;
      while (1)
      {
        v135 = 0;
        v134 = 0;
        v132 = 0;
        v131 = 0;
        if (!(*(unsigned int (**)(_QWORD *, void *, void *, void **, void **))(*a1 + 128))(a1, v137[v21 / 8], v137[v21 / 8 + 1], &v134, &v131))
        {
          v135 = 0;
          v134 = 0;
          v132 = 0;
          v131 = 0;
          if (!(*(unsigned int (**)(_QWORD *, void *, void *, void **, void **))(*a1 + 136))(a1, v137[v21 / 8], v137[v21 / 8 + 1], &v134, &v131))break;
        }
        v25 = &v142[v21 / 0x10 - 1];
        *(_QWORD *)v25 = v134;
        *((_DWORD *)v25 + 2) = v135;
        if (v22 || (_DWORD)v23)
        {
          if (v22 != v131 || (_DWORD)v132 != (_DWORD)v23)
            break;
        }
        else
        {
          v23 = v132;
          v22 = v131;
        }
        --v24;
        v21 += 16;
        if (16 * v20 == v21)
          goto LABEL_53;
      }
      if (v24)
      {
        a2 = v75;
        a4 = v73;
        goto LABEL_48;
      }
LABEL_53:
      v32 = (_QWORD *)&v141 + 1;
      a4 = v73;
      do
      {
        v33 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 168))(a1, *(v32 - 1), *v32);
        v35 = v34;
        v108 |= (v33 | v34) == 0;
        v36 = v139;
        if (v139 >= (unint64_t)HIDWORD(v139))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v139 + 1, 16);
          v36 = v139;
        }
        v32 += 2;
        v37 = (uint64_t *)&v138[16 * v36];
        *v37 = v33;
        v37[1] = v35;
        LODWORD(v139) = v139 + 1;
        --v20;
      }
      while (v20);
      a2 = v75;
LABEL_58:
      v38 = (*(uint64_t (**)(_QWORD *, void *, uint64_t))(*a1 + 168))(a1, v22, v23);
      v40 = v39;
      v108 |= (v38 | v39) == 0;
      v41 = v139;
      if (v139 >= HIDWORD(v139))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v139 + 1, 16);
        v41 = v139;
      }
      v42 = (uint64_t *)&v138[16 * v41];
      *v42 = v38;
      v42[1] = v40;
      LODWORD(v139) = v139 + 1;
      v10 = 1;
LABEL_63:
      if (v108)
      {
LABEL_93:
        if (v138 != v140)
          free(v138);
        return;
      }
      v88 = -1;
      v137[0] = &v137[2];
      v137[1] = (void *)0x400000000;
      (*(void (**)(_QWORD *, _BYTE *, uint64_t, uint64_t, unsigned int *, void **, char *))(*a1 + 256))(a1, v109, a4, a2, &v88, v137, &v108);
      if (v108)
      {
LABEL_91:
        if (v137[0] != &v137[2])
          free(v137[0]);
        goto LABEL_93;
      }
      *(_QWORD *)&v141 = v142;
      *((_QWORD *)&v141 + 1) = 0x200000000;
      if (v121 != -1 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[1] + 168))(a1[1]))
      {
        v43 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, v121);
        (*(void (**)(_QWORD *, uint64_t, uint64_t, __int128 *, uint64_t))(*a1 + 80))(a1, v43, v44, &v141, 0xFFFFFFFFLL);
      }
      if (v108)
      {
LABEL_89:
        if ((_OWORD *)v141 != v142)
          free((void *)v141);
        goto LABEL_91;
      }
      v45 = (v128 & v124) != -1;
      v134 = v136;
      v135 = 0x200000000;
      (*(void (**)(_QWORD *, _BYTE *, uint64_t, void **))(*a1 + 264))(a1, v109, a2, &v134);
      v46 = v112;
      v87 = -1;
      v47 = v123;
      v74 = v111;
      if (!v123 || v129 == -1)
      {
        if (!v123)
        {
LABEL_76:
          if (v123)
            v47 = 1;
          v72 = v47;
          v131 = v133;
          v132 = 0x200000000;
          if (v114 != -1)
          {
            v50 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, v130);
            (*(void (**)(_QWORD *, uint64_t, uint64_t, void **, uint64_t))(*a1 + 80))(a1, v50, v51, &v131, 0xFFFFFFFFLL);
          }
          if (!v108)
          {
            v71 = v45;
            (*(void (**)(_QWORD *, _BYTE *, uint64_t, char **, void **, _QWORD, void **, __int128 *, void **))(*a1 + 272))(a1, v109, a2, &v138, v137, v88, &v134, &v141, &v131);
            v86 = -1;
            if (v115 != -1)
            {
              v52 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
              (*(void (**)(_QWORD *, uint64_t, uint64_t, unsigned int *, _QWORD))(*a1 + 144))(a1, v52, v53, &v86, 0);
            }
            v70 = v46 == 0;
            v54 = (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(*a1 + 200))(a1, v109, a2);
            v55 = (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(*a1 + 208))(a1, v109, a2);
            v76 = a2;
            v56 = a1[1];
            v57 = v88;
            v67 = v114;
            v68 = v113;
            v66 = v110;
            v69 = v87;
            v58 = v124 != -1;
            v59 = v109[1];
            v60 = (*(uint64_t (**)(uint64_t, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)v56 + 104))(v56, v88, v109, v10);
            HIDWORD(v64) = v86;
            BYTE1(v64) = v55;
            LOBYTE(v64) = v54;
            HIBYTE(v63) = v59;
            BYTE2(v63) = v70;
            BYTE1(v63) = v58;
            LOBYTE(v63) = v71;
            v61 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int, int *, char, uint64_t))(*(_QWORD *)v56 + 112))(v56, v57, v74, v68, v67, v66, v72, v69, v63, &v97, v60, v64);
            v83 = v95;
            v84 = v96;
            v81 = v93;
            v82 = v94;
            v79 = v91;
            v80 = v92;
            v78 = v90;
            v77 = v89;
            HIDWORD(v65) = v88;
            BYTE2(v65) = v55;
            BYTE1(v65) = v54;
            LOBYTE(v65) = v10;
            v85[0] = (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t, uint64_t, __int128 *, __int128 *, __int128 *, __int128 *, char *, _QWORD, void *, _QWORD, void *, _QWORD, void *, _QWORD, uint64_t, unsigned int))(*a1 + 88))(a1, v109, v76, v61, &v83, &v81, &v79, &v77, v138, v139, v137[0], LODWORD(v137[1]), v134, v135, v131, v132, v65, v87);
            v85[1] = v62;
            if ((_BYTE)v62)
            {
              (*(void (**)(_QWORD *, _BYTE *, uint64_t, _QWORD *))(*a1 + 104))(a1, v109, v76, v85);
              (*(void (**)(_QWORD *, _BYTE *, uint64_t, _QWORD, _QWORD, _QWORD))(*a1 + 112))(a1, v109, v76, v85[0], v87, v86);
            }
          }
          if (v131 != v133)
            free(v131);
          if (v134 != v136)
            free(v134);
          goto LABEL_89;
        }
      }
      else
      {
        v48 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
        (*(void (**)(_QWORD *, uint64_t, uint64_t, unsigned int *, _QWORD))(*a1 + 144))(a1, v48, v49, &v87, 0);
        if (v87 < 4)
          goto LABEL_75;
      }
      v87 = 0;
LABEL_75:
      v47 = -1;
      goto LABEL_76;
    }
    if (v128 == -1)
    {
      if (v120 == -1)
        LOBYTE(v14) = 0;
      if ((v14 & 1) != 0)
      {
LABEL_17:
        if ((v125 & v127) == 0xFFFFFFFF)
          v17 = v16;
        else
          v17 = 0;
        memset(&v137[1], 0, 40);
        v137[0] = v7;
        LODWORD(v137[1]) = v9;
        if ((v17 & 1) == 0)
        {
LABEL_48:
          v26 = &v137[1];
          do
          {
            v27 = (*(uint64_t (**)(_QWORD *, _QWORD, void *))(*a1 + 168))(a1, *(v26 - 1), *v26);
            v29 = v28;
            v108 |= (v27 | v28) == 0;
            v30 = v139;
            if (v139 >= (unint64_t)HIDWORD(v139))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v139 + 1, 16);
              v30 = v139;
            }
            v26 += 2;
            v31 = (uint64_t *)&v138[16 * v30];
            *v31 = v27;
            v31[1] = v29;
            LODWORD(v139) = v139 + 1;
            --v10;
          }
          while (v10);
          goto LABEL_63;
        }
        goto LABEL_33;
      }
    }
    else if (v14)
    {
      goto LABEL_17;
    }
    memset(&v137[1], 0, 40);
    v137[0] = v7;
    LODWORD(v137[1]) = v9;
    if ((v16 & 1) == 0)
      goto LABEL_48;
LABEL_33:
    v73 = a4;
    v75 = a2;
    v20 = 1;
    goto LABEL_34;
  }
}

_QWORD *sub_1C47E73E8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, __int128 *a6, unsigned int *a7, __int128 *a8, unsigned int *a9, int *a10, uint64_t a11)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  unsigned int v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned __int8 *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[20];

  v56[18] = *MEMORY[0x1E0C80C00];
  v53 = 0;
  v54 = v56;
  v55 = 0x900000000;
  v52 = 0;
  v18 = sub_1C6366AB4(a1, a4, (const llvm::APInt *)&v52, (llvm *)6, 0, 1, 0);
  v20 = v19;
  v21 = v55;
  if (v55 >= HIDWORD(v55))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 16);
    v21 = v55;
  }
  v22 = (char *)v54 + 16 * v21;
  *v22 = v18;
  v22[1] = v20;
  v23 = v55 + 1;
  LODWORD(v55) = v55 + 1;
  if (v52)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
    v23 = v55;
  }
  v24 = *a5;
  if (v23 >= HIDWORD(v55))
  {
    v49 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v23 + 1, 16);
    v24 = v49;
    v23 = v55;
  }
  *((_OWORD *)v54 + v23) = v24;
  v25 = (v55 + 1);
  LODWORD(v55) = v25;
  v26 = *a6;
  if (v25 >= HIDWORD(v55))
  {
    v50 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v25 + 1, 16);
    v26 = v50;
    LODWORD(v25) = v55;
  }
  *((_OWORD *)v54 + v25) = v26;
  LODWORD(v55) = v55 + 1;
  v27 = *a7;
  v52 = 0;
  v53 = 0;
  v28 = sub_1C6366AB4(a1, v27, (const llvm::APInt *)&v52, (llvm *)6, 0, 1, 0);
  v30 = v29;
  v31 = v55;
  if (v55 >= HIDWORD(v55))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 16);
    v31 = v55;
  }
  v32 = (char *)v54 + 16 * v31;
  *v32 = v28;
  v32[1] = v30;
  v33 = v55 + 1;
  LODWORD(v55) = v55 + 1;
  if (v52)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
    v33 = v55;
  }
  v34 = *a8;
  if (v33 >= HIDWORD(v55))
  {
    v51 = *a8;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v33 + 1, 16);
    v34 = v51;
    v33 = v55;
  }
  *((_OWORD *)v54 + v33) = v34;
  LODWORD(v55) = v55 + 1;
  v35 = *a9;
  v52 = 0;
  v53 = 0;
  v36 = sub_1C6366AB4(a1, v35, (const llvm::APInt *)&v52, (llvm *)6, 0, 1, 0);
  v38 = v37;
  v39 = v55;
  if (v55 >= HIDWORD(v55))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 16);
    v39 = v55;
  }
  v40 = (char *)v54 + 16 * v39;
  *v40 = v36;
  v40[1] = v38;
  LODWORD(v55) = v55 + 1;
  if (v52)
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
  v41 = *a10;
  v52 = 0;
  v53 = 0;
  v42 = sub_1C6366AB4(a1, v41, (const llvm::APInt *)&v52, (llvm *)6, 0, 1, 0);
  v44 = v43;
  v45 = v55;
  if (v55 >= HIDWORD(v55))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 16);
    v45 = v55;
  }
  v46 = (char *)v54 + 16 * v45;
  *v46 = v42;
  v46[1] = v44;
  LODWORD(v55) = v55 + 1;
  if (v52)
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
  sub_1C47E2930(a1, (uint64_t)&v54, a11);
  v47 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v54, v55);
  if (v54 != v56)
    free(v54);
  return v47;
}

_QWORD *sub_1C47E77AC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, unsigned int *a6, __int128 *a7, unsigned int *a8, __int128 *a9, unsigned int *a10, int *a11, uint64_t a12)
{
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  unsigned int v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD *v54;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unsigned __int8 *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[22];

  v63[20] = *MEMORY[0x1E0C80C00];
  v60 = 0;
  v61 = v63;
  v62 = 0xA00000000;
  v59 = 0;
  v19 = sub_1C6366AB4(a1, a4, (const llvm::APInt *)&v59, (llvm *)6, 0, 1, 0);
  v21 = v20;
  v22 = v62;
  if (v62 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v62 + 1, 16);
    v22 = v62;
  }
  v23 = (char *)v61 + 16 * v22;
  *v23 = v19;
  v23[1] = v21;
  v24 = v62 + 1;
  LODWORD(v62) = v62 + 1;
  if (v59)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
    v24 = v62;
  }
  v25 = *a5;
  if (v24 >= HIDWORD(v62))
  {
    v56 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v24 + 1, 16);
    v25 = v56;
    v24 = v62;
  }
  *((_OWORD *)v61 + v24) = v25;
  LODWORD(v62) = v62 + 1;
  v26 = *a6;
  v59 = 0;
  v60 = 0;
  v27 = sub_1C6366AB4(a1, v26, (const llvm::APInt *)&v59, (llvm *)6, 0, 1, 0);
  v29 = v28;
  v30 = v62;
  if (v62 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v62 + 1, 16);
    v30 = v62;
  }
  v31 = (char *)v61 + 16 * v30;
  *v31 = v27;
  v31[1] = v29;
  v32 = v62 + 1;
  LODWORD(v62) = v62 + 1;
  if (v59)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
    v32 = v62;
  }
  v33 = *a7;
  if (v32 >= HIDWORD(v62))
  {
    v57 = *a7;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v32 + 1, 16);
    v33 = v57;
    v32 = v62;
  }
  *((_OWORD *)v61 + v32) = v33;
  LODWORD(v62) = v62 + 1;
  v34 = *a8;
  v59 = 0;
  v60 = 0;
  v35 = sub_1C6366AB4(a1, v34, (const llvm::APInt *)&v59, (llvm *)6, 0, 1, 0);
  v37 = v36;
  v38 = v62;
  if (v62 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v62 + 1, 16);
    v38 = v62;
  }
  v39 = (char *)v61 + 16 * v38;
  *v39 = v35;
  v39[1] = v37;
  v40 = v62 + 1;
  LODWORD(v62) = v62 + 1;
  if (v59)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
    v40 = v62;
  }
  v41 = *a9;
  if (v40 >= HIDWORD(v62))
  {
    v58 = *a9;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v40 + 1, 16);
    v41 = v58;
    v40 = v62;
  }
  *((_OWORD *)v61 + v40) = v41;
  LODWORD(v62) = v62 + 1;
  v42 = *a10;
  v59 = 0;
  v60 = 0;
  v43 = sub_1C6366AB4(a1, v42, (const llvm::APInt *)&v59, (llvm *)6, 0, 1, 0);
  v45 = v44;
  v46 = v62;
  if (v62 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v62 + 1, 16);
    v46 = v62;
  }
  v47 = (char *)v61 + 16 * v46;
  *v47 = v43;
  v47[1] = v45;
  LODWORD(v62) = v62 + 1;
  if (v59)
    llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
  v48 = *a11;
  v59 = 0;
  v60 = 0;
  v49 = sub_1C6366AB4(a1, v48, (const llvm::APInt *)&v59, (llvm *)6, 0, 1, 0);
  v51 = v50;
  v52 = v62;
  if (v62 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v62 + 1, 16);
    v52 = v62;
  }
  v53 = (char *)v61 + 16 * v52;
  *v53 = v49;
  v53[1] = v51;
  LODWORD(v62) = v62 + 1;
  if (v59)
    llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
  sub_1C47E2930(a1, (uint64_t)&v61, a12);
  v54 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v61, v62);
  if (v61 != v63)
    free(v61);
  return v54;
}

_QWORD *sub_1C47E7BFC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, unsigned int *a6, __int128 *a7, __int128 *a8, unsigned int *a9, int *a10, uint64_t a11)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned __int8 *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[20];

  v56[18] = *MEMORY[0x1E0C80C00];
  v53 = 0;
  v54 = v56;
  v55 = 0x900000000;
  v52 = 0;
  v18 = sub_1C6366AB4(a1, a4, (const llvm::APInt *)&v52, (llvm *)6, 0, 1, 0);
  v20 = v19;
  v21 = v55;
  if (v55 >= HIDWORD(v55))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 16);
    v21 = v55;
  }
  v22 = (char *)v54 + 16 * v21;
  *v22 = v18;
  v22[1] = v20;
  v23 = v55 + 1;
  LODWORD(v55) = v55 + 1;
  if (v52)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
    v23 = v55;
  }
  v24 = *a5;
  if (v23 >= HIDWORD(v55))
  {
    v49 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v23 + 1, 16);
    v24 = v49;
    v23 = v55;
  }
  *((_OWORD *)v54 + v23) = v24;
  LODWORD(v55) = v55 + 1;
  v25 = *a6;
  v52 = 0;
  v53 = 0;
  v26 = sub_1C6366AB4(a1, v25, (const llvm::APInt *)&v52, (llvm *)6, 0, 1, 0);
  v28 = v27;
  v29 = v55;
  if (v55 >= HIDWORD(v55))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 16);
    v29 = v55;
  }
  v30 = (char *)v54 + 16 * v29;
  *v30 = v26;
  v30[1] = v28;
  v31 = v55 + 1;
  LODWORD(v55) = v55 + 1;
  if (v52)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
    v31 = v55;
  }
  v32 = *a7;
  if (v31 >= HIDWORD(v55))
  {
    v50 = *a7;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v31 + 1, 16);
    v32 = v50;
    v31 = v55;
  }
  *((_OWORD *)v54 + v31) = v32;
  v33 = (v55 + 1);
  LODWORD(v55) = v33;
  v34 = *a8;
  if (v33 >= HIDWORD(v55))
  {
    v51 = *a8;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v33 + 1, 16);
    v34 = v51;
    LODWORD(v33) = v55;
  }
  *((_OWORD *)v54 + v33) = v34;
  LODWORD(v55) = v55 + 1;
  v35 = *a9;
  v52 = 0;
  v53 = 0;
  v36 = sub_1C6366AB4(a1, v35, (const llvm::APInt *)&v52, (llvm *)6, 0, 1, 0);
  v38 = v37;
  v39 = v55;
  if (v55 >= HIDWORD(v55))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 16);
    v39 = v55;
  }
  v40 = (char *)v54 + 16 * v39;
  *v40 = v36;
  v40[1] = v38;
  LODWORD(v55) = v55 + 1;
  if (v52)
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
  v41 = *a10;
  v52 = 0;
  v53 = 0;
  v42 = sub_1C6366AB4(a1, v41, (const llvm::APInt *)&v52, (llvm *)6, 0, 1, 0);
  v44 = v43;
  v45 = v55;
  if (v55 >= HIDWORD(v55))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 16);
    v45 = v55;
  }
  v46 = (char *)v54 + 16 * v45;
  *v46 = v42;
  v46[1] = v44;
  LODWORD(v55) = v55 + 1;
  if (v52)
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
  sub_1C47E2930(a1, (uint64_t)&v54, a11);
  v47 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v54, v55);
  if (v54 != v56)
    free(v54);
  return v47;
}

_QWORD *sub_1C47E7FC0(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, unsigned int *a6, __int128 *a7, unsigned int *a8, uint64_t a9)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 v39;
  __int128 v40;
  unsigned __int8 *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[16];

  v45[14] = *MEMORY[0x1E0C80C00];
  v42 = 0;
  v43 = v45;
  v44 = 0x700000000;
  v41 = 0;
  v16 = sub_1C6366AB4(a1, a4, (const llvm::APInt *)&v41, (llvm *)6, 0, 1, 0);
  v18 = v17;
  v19 = v44;
  if (v44 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v44 + 1, 16);
    v19 = v44;
  }
  v20 = (char *)v43 + 16 * v19;
  *v20 = v16;
  v20[1] = v18;
  v21 = v44 + 1;
  LODWORD(v44) = v44 + 1;
  if (v41)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
    v21 = v44;
  }
  v22 = *a5;
  if (v21 >= HIDWORD(v44))
  {
    v39 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v21 + 1, 16);
    v22 = v39;
    v21 = v44;
  }
  *((_OWORD *)v43 + v21) = v22;
  LODWORD(v44) = v44 + 1;
  v23 = *a6;
  v41 = 0;
  v42 = 0;
  v24 = sub_1C6366AB4(a1, v23, (const llvm::APInt *)&v41, (llvm *)6, 0, 1, 0);
  v26 = v25;
  v27 = v44;
  if (v44 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v44 + 1, 16);
    v27 = v44;
  }
  v28 = (char *)v43 + 16 * v27;
  *v28 = v24;
  v28[1] = v26;
  v29 = v44 + 1;
  LODWORD(v44) = v44 + 1;
  if (v41)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
    v29 = v44;
  }
  v30 = *a7;
  if (v29 >= HIDWORD(v44))
  {
    v40 = *a7;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v29 + 1, 16);
    v30 = v40;
    v29 = v44;
  }
  *((_OWORD *)v43 + v29) = v30;
  LODWORD(v44) = v44 + 1;
  v31 = *a8;
  v41 = 0;
  v42 = 0;
  v32 = sub_1C6366AB4(a1, v31, (const llvm::APInt *)&v41, (llvm *)6, 0, 1, 0);
  v34 = v33;
  v35 = v44;
  if (v44 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v44 + 1, 16);
    v35 = v44;
  }
  v36 = (char *)v43 + 16 * v35;
  *v36 = v32;
  v36[1] = v34;
  LODWORD(v44) = v44 + 1;
  if (v41)
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  sub_1C47E2930(a1, (uint64_t)&v43, a9);
  v37 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v43, v44);
  if (v43 != v45)
    free(v43);
  return v37;
}

uint64_t sub_1C47E82BC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 != 35 && v4 != 11)
    return 0;
  v6 = *(_QWORD *)(a2 + 80);
  v7 = (_QWORD *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u)
    v7 = (_QWORD *)*v7;
  *a4 = *v7;
  return 1;
}

_QWORD *sub_1C47E82FC(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, __n128 a5)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  char *v59;
  int v60;
  __n128 v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned int v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  BOOL v79;
  __int128 **v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  __int128 *v84;
  __int128 *v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  BOOL v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  char *v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  _DWORD *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 *v104;
  uint64_t v105;
  __int128 *v106;
  int v107;
  _QWORD *v108;
  char v109;
  __int128 *v110;
  __int128 *v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int32 v118;
  _OWORD *v119;
  int32x4_t v120;
  uint32x4_t v121;
  int32x4_t v122;
  _OWORD *v123;
  _OWORD *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  uint32x4_t v130;
  int8x16_t v131;
  int32x4_t v132;
  uint32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  unsigned int v136;
  unsigned int v137;
  uint32x4_t v138;
  int8x16_t v139;
  int32x4_t v140;
  uint32x4_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x8_t v144;
  int v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  uint32x4_t v149;
  int8x16_t v150;
  int32x4_t v151;
  int8x16_t v152;
  unsigned int v153;
  int v154;
  uint32x4_t v155;
  int8x16_t v156;
  int32x4_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x8_t v160;
  unsigned int v161;
  unsigned int v162;
  int32x4_t v163;
  int8x16_t v164;
  int8x8_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  BOOL v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  unsigned int v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  unsigned __int8 *v194;
  unsigned __int8 **v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  unsigned int v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  _QWORD *v209;
  unsigned int v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  _QWORD *v220;
  unsigned int v221;
  __int128 v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  _QWORD *v227;
  unsigned int v228;
  __int128 v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int *v238;
  int v239;
  int v240;
  int v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  _QWORD *v247;
  unsigned int v248;
  _QWORD *v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  _QWORD *v259;
  int v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  _DWORD *v268;
  llvm *v269;
  unsigned __int8 *v271;
  int v272;
  unsigned __int8 *v273;
  int v274;
  uint64_t v275;
  unsigned __int8 *v276;
  int v277;
  __int128 v278;
  int v279;
  unsigned __int8 *v280;
  int v281;
  unsigned __int8 *v282;
  int v283;
  __int128 v284;
  unsigned __int8 *v285;
  uint64_t v286;
  void *v287[2];
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  uint64_t v292;

  v292 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 **)(a2 + 64);
  v282 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v282, v8, 2);
  v283 = *(_DWORD *)(a2 + 60);
  v9 = *(_QWORD *)(a2 + 40);
  v268 = a4;
  v269 = *(llvm **)v9;
  v267 = *(_QWORD *)(v9 + 8);
  *(_DWORD *)(a1 + 1096) = 0;
  LODWORD(v10) = **(_DWORD **)(a1 + 800);
  LODWORD(v11) = **(_DWORD **)(a1 + 944);
  v12 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v12 + 20) == 1)
  {
    v14 = *(void **)v12;
    v13 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v15 = *(_DWORD *)(a1 + 16);
  if (v15 < 2)
  {
    v18 = 0;
    if (v14)
    {
LABEL_33:
      v287[0] = v14;
      v287[1] = (void *)v13;
      v288 = v10;
      v289 = v11;
      v290 = v18;
      v291 = v15 - 1;
      a5 = sub_1C47E9C18(a1 + 1088, (unint64_t)v287);
    }
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v20 = **(unsigned int **)(a1 + 800);
    v21 = **(unsigned int **)(a1 + 944);
    v22 = v14;
    do
    {
      v23 = *(_QWORD *)(a1 + 8) + v16;
      if (*(_DWORD *)(v23 + 44) == 1)
      {
        v14 = *(void **)(v23 + 24);
        v24 = *(unsigned int *)(v23 + 32);
      }
      else
      {
        v14 = 0;
        v24 = 0;
      }
      v10 = *(unsigned int *)(*(_QWORD *)(a1 + 800) + 4 * v17 + 4);
      v11 = *(unsigned int *)(*(_QWORD *)(a1 + 944) + 4 * v17 + 4);
      if (a3 && !v14)
      {
        v24 = v13;
        if (!*(_DWORD *)(a1 + 1096))
          v18 = 0;
        v14 = v22;
        v10 = v20;
        v11 = v21;
      }
      if ((_DWORD)v10 == (_DWORD)v20 && (_DWORD)v11 == (_DWORD)v21 && v14 == v22 && (_DWORD)v24 == (_DWORD)v13)
      {
        v14 = v22;
        LODWORD(v11) = v21;
        LODWORD(v10) = v20;
      }
      else
      {
        if (v22)
        {
          v287[0] = v22;
          v287[1] = (void *)v13;
          v288 = v20;
          v289 = v21;
          v290 = v18;
          v291 = v17;
          a5 = sub_1C47E9C18(a1 + 1088, (unint64_t)v287);
          v15 = *(_DWORD *)(a1 + 16);
          v18 = v19;
        }
        else
        {
          v18 = v17 + 1;
        }
        v13 = v24 | v13 & 0xFFFFFFFF00000000;
        v20 = v10;
        v21 = v11;
        v22 = v14;
      }
      ++v19;
      v28 = v17 + 2;
      ++v17;
      v16 += 24;
    }
    while (v28 < v15);
    if (v14)
      goto LABEL_33;
  }
  if (!*(_DWORD *)(a1 + 1096))
    goto LABEL_286;
  v29 = *(_DWORD *)(a1 + 1624);
  if (v29 || *(_DWORD *)(a1 + 1628))
  {
    v30 = *(_DWORD *)(a1 + 1632);
    v31 = *(_QWORD *)(a1 + 1616);
    v32 = v31 + 56 * v30;
    if (v30 <= 4 * v29 || v30 < 0x41)
    {
      if (v30)
      {
        do
        {
          *(_QWORD *)v31 = 0;
          *(_DWORD *)(v31 + 8) = -1;
          *(_DWORD *)(v31 + 16) = -1;
          v31 += 56;
        }
        while (v31 != v32);
      }
      *(_QWORD *)(a1 + 1624) = 0;
    }
    else if (v29)
    {
      v33 = 1 << (33 - __clz(v29 - 1));
      if (v33 <= 64)
        v34 = 64;
      else
        v34 = v33;
      if (v34 == v30)
      {
        *(_QWORD *)(a1 + 1624) = 0;
        do
        {
          *(_OWORD *)v31 = xmmword_1C6429E90;
          *(_DWORD *)(v31 + 16) = -1;
          v31 += 56;
        }
        while (v31 != v32);
      }
      else
      {
        MEMORY[0x1CAA32FB4](a5);
        v35 = (4 * v34 / 3u + 1) | ((unint64_t)(4 * v34 / 3u + 1) >> 1);
        v36 = v35 | (v35 >> 2) | ((v35 | (v35 >> 2)) >> 4);
        LODWORD(v36) = (((v36 | (v36 >> 8)) >> 16) | v36 | (v36 >> 8)) + 1;
        *(_DWORD *)(a1 + 1632) = v36;
        v37 = (char *)operator new(56 * v36, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 1616) = v37;
        *(_QWORD *)(a1 + 1624) = 0;
        v38 = *(_DWORD *)(a1 + 1632);
        if (v38)
        {
          v39 = &v37[56 * v38];
          do
          {
            *(_OWORD *)v37 = xmmword_1C6429E90;
            *((_DWORD *)v37 + 4) = -1;
            v37 += 56;
          }
          while (v37 != v39);
        }
      }
    }
    else
    {
      MEMORY[0x1CAA32FB4](a5);
      *(_QWORD *)(a1 + 1616) = 0;
      *(_QWORD *)(a1 + 1624) = 0;
      *(_DWORD *)(a1 + 1632) = 0;
    }
  }
  v40 = *(unsigned int *)(a1 + 1096);
  if ((_DWORD)v40)
  {
    v41 = *(uint64_t **)(a1 + 1088);
    v42 = &v41[4 * v40];
    while (1)
    {
      v43 = *((_DWORD *)v41 + 4) + ((*((_DWORD *)v41 + 5) == 0) << 6);
      *(_OWORD *)v287 = *(_OWORD *)v41;
      v288 = v43;
      *(_QWORD *)&v278 = 0;
      v44 = sub_1C47E9CB0(*(_QWORD *)(a1 + 1616), *(_DWORD *)(a1 + 1632), (uint64_t)v287, &v278);
      v45 = v278;
      if (!v44)
        break;
      v46 = *(_DWORD *)(v278 + 48);
      v47 = *(_DWORD *)(v278 + 52);
LABEL_70:
      v52 = *v41;
      *(_DWORD *)(v45 + 32) = *((_DWORD *)v41 + 2);
      *(_QWORD *)(v45 + 24) = v52;
      *(_QWORD *)(v45 + 40) = v41[2];
      *(_DWORD *)(v45 + 48) = v46 + 1;
      v53 = *((_DWORD *)v41 + 6);
      if (v53 >= v47)
        v53 = v47;
      *(_DWORD *)(v45 + 52) = v53;
      v41 += 4;
      if (v41 == v42)
        goto LABEL_103;
    }
    *(_QWORD *)&v284 = v278;
    v48 = *(_DWORD *)(a1 + 1624);
    v49 = *(unsigned int *)(a1 + 1632);
    if (4 * v48 + 4 >= (3 * v49))
    {
      v50 = 2 * v49;
    }
    else
    {
      v50 = *(_DWORD *)(a1 + 1632);
      if ((int)v49 + ~v48 - *(_DWORD *)(a1 + 1628) > v49 >> 3)
      {
LABEL_62:
        *(_DWORD *)(a1 + 1624) = v48 + 1;
        if (*(_QWORD *)v45)
          v51 = 0;
        else
          v51 = *(_DWORD *)(v45 + 8) == -1;
        if (!v51 || *(_DWORD *)(v45 + 16) != -1)
          --*(_DWORD *)(a1 + 1628);
        v46 = 0;
        *(void **)v45 = v287[0];
        *(_DWORD *)(v45 + 8) = v287[1];
        *(_DWORD *)(v45 + 16) = v43;
        *(_QWORD *)(v45 + 24) = 0;
        *(_DWORD *)(v45 + 32) = 0;
        *(_OWORD *)(v45 + 40) = xmmword_1C6429EA0;
        v47 = -1;
        goto LABEL_70;
      }
    }
    v54 = *(_QWORD *)(a1 + 1616);
    v55 = (v50 - 1) | ((unint64_t)(v50 - 1) >> 1);
    v56 = v55 | (v55 >> 2) | ((v55 | (v55 >> 2)) >> 4);
    v57 = ((v56 | (v56 >> 8)) >> 16) | v56 | (v56 >> 8);
    if ((v57 + 1) > 0x40)
      v58 = v57 + 1;
    else
      v58 = 64;
    *(_DWORD *)(a1 + 1632) = v58;
    v59 = (char *)operator new(56 * v58, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 1616) = v59;
    if (v54)
    {
      *(_QWORD *)(a1 + 1624) = 0;
      v60 = *(_DWORD *)(a1 + 1632);
      v61 = (__n128)xmmword_1C6429E90;
      if (v60)
      {
        v62 = &v59[56 * v60];
        do
        {
          *(_OWORD *)v59 = xmmword_1C6429E90;
          *((_DWORD *)v59 + 4) = -1;
          v59 += 56;
        }
        while (v59 != v62);
      }
      if ((_DWORD)v49)
      {
        v63 = 56 * v49;
        v64 = v54;
        while (1)
        {
          v65 = *(_DWORD *)(v64 + 8);
          if (*(_QWORD *)v64 || v65 != -1)
            break;
          if (*(_DWORD *)(v64 + 16) != -1)
            goto LABEL_96;
LABEL_97:
          v64 += 56;
          v63 -= 56;
          if (!v63)
            goto LABEL_98;
        }
        if (*(_QWORD *)v64)
          v67 = 0;
        else
          v67 = v65 == -2;
        if (v67 && *(_DWORD *)(v64 + 16) == -2)
          goto LABEL_97;
LABEL_96:
        v285 = 0;
        sub_1C47E9CB0(*(_QWORD *)(a1 + 1616), *(_DWORD *)(a1 + 1632), v64, &v285);
        v68 = v285;
        v69 = *(_QWORD *)v64;
        *((_DWORD *)v285 + 2) = *(_DWORD *)(v64 + 8);
        *(_QWORD *)v68 = v69;
        *((_DWORD *)v68 + 4) = *(_DWORD *)(v64 + 16);
        v61 = *(__n128 *)(v64 + 40);
        *(_OWORD *)(v68 + 24) = *(_OWORD *)(v64 + 24);
        *(__n128 *)(v68 + 40) = v61;
        ++*(_DWORD *)(a1 + 1624);
        goto LABEL_97;
      }
LABEL_98:
      MEMORY[0x1CAA32FB4](v54, 8, v61);
      v59 = *(char **)(a1 + 1616);
      v70 = *(_DWORD *)(a1 + 1632);
    }
    else
    {
      *(_QWORD *)(a1 + 1624) = 0;
      v70 = *(_DWORD *)(a1 + 1632);
      if (v70)
      {
        v71 = v59;
        do
        {
          *(_OWORD *)v71 = xmmword_1C6429E90;
          *((_DWORD *)v71 + 4) = -1;
          v71 += 56;
        }
        while (v71 != &v59[56 * v70]);
      }
    }
    sub_1C47E9CB0((uint64_t)v59, v70, (uint64_t)v287, &v284);
    v48 = *(_DWORD *)(a1 + 1624);
    v45 = v284;
    goto LABEL_62;
  }
LABEL_103:
  *(_DWORD *)(a1 + 1648) = 0;
  v72 = *(_QWORD *)(a1 + 1616);
  v73 = *(unsigned int *)(a1 + 1632);
  v74 = v72 + 56 * v73;
  if (*(_DWORD *)(a1 + 1624))
  {
    if ((_DWORD)v73)
    {
      v75 = 56 * v73;
      v76 = *(_QWORD *)(a1 + 1616);
      while (1)
      {
        v77 = *(_DWORD *)(v76 + 8);
        if (*(_QWORD *)v76)
          v78 = 0;
        else
          v78 = v77 == -1;
        if (v78)
        {
          if (*(_DWORD *)(v76 + 16) != -1)
            goto LABEL_121;
        }
        else
        {
          if (*(_QWORD *)v76)
            v79 = 0;
          else
            v79 = v77 == -2;
          if (!v79 || *(_DWORD *)(v76 + 16) != -2)
            goto LABEL_121;
        }
        v76 += 56;
        v75 -= 56;
        if (!v75)
          goto LABEL_119;
      }
    }
    v76 = *(_QWORD *)(a1 + 1616);
  }
  else
  {
LABEL_119:
    v76 = v72 + 56 * v73;
  }
LABEL_121:
  v80 = (__int128 **)(a1 + 1640);
  v81 = v72 + 56 * v73;
  if (v76 == v81)
  {
    v96 = *v80;
    v95 = (uint64_t)*v80;
LABEL_151:
    v98 = v268;
    v97 = 0;
    goto LABEL_152;
  }
  LODWORD(v82) = 0;
  do
  {
    v83 = (char *)(v76 + 24);
    v84 = *(__int128 **)(a1 + 1640);
    if (v82 >= *(_DWORD *)(a1 + 1652))
    {
      v91 = v82 + 1;
      v92 = (unint64_t)&v84[2 * v82];
      if (v84 <= (__int128 *)v83 && v92 > (unint64_t)v83)
      {
        v94 = (char *)(v83 - (char *)v84);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1640, a1 + 1656, v91, 32);
        v84 = *v80;
        v83 = &v94[(_QWORD)*v80];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1640, a1 + 1656, v91, 32);
        v84 = *v80;
      }
    }
    v85 = &v84[2 * *(unsigned int *)(a1 + 1648)];
    v86 = *((_OWORD *)v83 + 1);
    *v85 = *(_OWORD *)v83;
    v85[1] = v86;
    v82 = (*(_DWORD *)(a1 + 1648) + 1);
    *(_DWORD *)(a1 + 1648) = v82;
    v87 = v76 + 56;
    v76 = v74;
    if (v87 != v74)
    {
      v76 = v87;
      do
      {
        v88 = *(_DWORD *)(v76 + 8);
        if (*(_QWORD *)v76)
          v89 = 0;
        else
          v89 = v88 == -1;
        if (v89)
        {
          if (*(_DWORD *)(v76 + 16) != -1)
            goto LABEL_140;
        }
        else
        {
          if (*(_QWORD *)v76)
            v90 = 0;
          else
            v90 = v88 == -2;
          if (!v90 || *(_DWORD *)(v76 + 16) != -2)
            goto LABEL_140;
        }
        v76 += 56;
      }
      while (v76 != v74);
      v76 = v74;
    }
LABEL_140:
    ;
  }
  while (v76 != v81);
  v95 = (uint64_t)*v80;
  v96 = &(*v80)[2 * v82];
  if (!(_DWORD)v82)
    goto LABEL_151;
  v97 = 126 - 2 * __clz(v82);
  v98 = v268;
LABEL_152:
  sub_1C47E9DD0(v95, v96, v97, 1);
  if (v98)
    *v98 = 0;
  if (v269 == 5)
  {
    v280 = v282;
    if (v282)
      llvm::MetadataTracking::track((uint64_t)&v280, v282, 2);
    v99 = v283;
    v281 = v283;
    v100 = *(unsigned int *)(a1 + 1648);
    if ((_DWORD)v100)
    {
      v101 = *(_QWORD *)(a1 + 1640) + 32 * v100;
      v102 = *(unsigned int *)(a1 + 16);
      v103 = 32 * v100;
      v104 = *(__int128 **)(a1 + 1640);
      while (2)
      {
        v105 = v103;
        v106 = *(__int128 **)(a1 + 1640);
        do
        {
          if ((_DWORD)v102 == *((_DWORD *)v106 + 4) + *((_DWORD *)v104 + 4))
          {
            v107 = *((_DWORD *)v106 + 5);
            if (*((_DWORD *)v104 + 5) != v107)
            {
              if (v107)
                v110 = v106;
              else
                v110 = v104;
              if (v107)
                v111 = v104;
              else
                v111 = v106;
              if (!(_DWORD)v102)
                goto LABEL_292;
              v112 = 0;
              v113 = 0;
              v114 = *(_QWORD *)(a1 + 8);
              v115 = 4 * v102;
              do
              {
                if (*(_DWORD *)(v114 + 20) != 1
                  || (*(_QWORD *)v111 != *(_QWORD *)v114
                   || *((_DWORD *)v111 + 2) != *(_DWORD *)(v114 + 8)
                   || *(_DWORD *)(*(_QWORD *)(a1 + 944) + v112) != *((_DWORD *)v111 + 5)
                   || *(_DWORD *)(*(_QWORD *)(a1 + 800) + v112) != *((_DWORD *)v111 + 4))
                  && (*(_QWORD *)v110 != *(_QWORD *)v114
                   || *((_DWORD *)v110 + 2) != *(_DWORD *)(v114 + 8)
                   || *(_DWORD *)(*(_QWORD *)(a1 + 944) + v112) != *((_DWORD *)v110 + 5)
                   || *(_DWORD *)(*(_QWORD *)(a1 + 800) + v112) != *((_DWORD *)v110 + 4)))
                {
                  v113 = 1;
                }
                v112 += 4;
                v114 += 24;
              }
              while (v115 != v112);
              if ((v113 & 1) != 0)
              {
                v108 = 0;
                v109 = 0;
                v98 = v268;
              }
              else
              {
LABEL_292:
                if (v268)
                  ++*v268;
                v215 = *(_QWORD *)(a1 + 2168);
                *(_QWORD *)&v284 = v280;
                if (v280)
                {
                  llvm::MetadataTracking::track((uint64_t)&v284, v280, 2);
                  v99 = v281;
                }
                DWORD2(v284) = v99;
                LODWORD(v275) = 0;
                *(_QWORD *)&v278 = 0;
                v286 = 0;
                v287[0] = &v288;
                v287[1] = (void *)0x900000000;
                v285 = 0;
                v216 = sub_1C6366AB4(v215, 0, (const llvm::APInt *)&v285, (llvm *)6, 0, 1, 0);
                v218 = v217;
                v219 = v287[1];
                if (LODWORD(v287[1]) >= HIDWORD(v287[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, LODWORD(v287[1]) + 1, 16);
                  v219 = v287[1];
                }
                v220 = (char *)v287[0] + 16 * v219;
                *v220 = v216;
                v220[1] = v218;
                v221 = ++LODWORD(v287[1]);
                if (v285)
                {
                  llvm::MetadataTracking::untrack((uint64_t)&v285, v285);
                  v221 = v287[1];
                }
                v222 = *v111;
                if (v221 >= HIDWORD(v287[1]))
                {
                  v265 = *v111;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, v221 + 1, 16);
                  v222 = v265;
                  v221 = v287[1];
                }
                *((_OWORD *)v287[0] + v221) = v222;
                ++LODWORD(v287[1]);
                v285 = 0;
                v286 = 0;
                v223 = sub_1C6366AB4(v215, 0, (const llvm::APInt *)&v285, (llvm *)6, 0, 1, 0);
                v225 = v224;
                v226 = v287[1];
                if (LODWORD(v287[1]) >= HIDWORD(v287[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, LODWORD(v287[1]) + 1, 16);
                  v226 = v287[1];
                }
                v227 = (char *)v287[0] + 16 * v226;
                *v227 = v223;
                v227[1] = v225;
                v228 = ++LODWORD(v287[1]);
                if (v285)
                {
                  llvm::MetadataTracking::untrack((uint64_t)&v285, v285);
                  v228 = v287[1];
                }
                v229 = *v110;
                if (v228 >= HIDWORD(v287[1]))
                {
                  v266 = *v110;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, v228 + 1, 16);
                  v229 = v266;
                  v228 = v287[1];
                }
                v98 = v268;
                *((_OWORD *)v287[0] + v228) = v229;
                ++LODWORD(v287[1]);
                v285 = 0;
                v286 = 0;
                v230 = sub_1C6366AB4(v215, 0, (const llvm::APInt *)&v285, (llvm *)6, 0, 1, 0);
                v232 = v231;
                v233 = v287[1];
                if (LODWORD(v287[1]) >= HIDWORD(v287[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, LODWORD(v287[1]) + 1, 16);
                  v233 = v287[1];
                }
                v234 = (char *)v287[0] + 16 * v233;
                *v234 = v230;
                v234[1] = v232;
                ++LODWORD(v287[1]);
                if (v285)
                  llvm::MetadataTracking::untrack((uint64_t)&v285, v285);
                sub_1C47EADDC(v215, (uint64_t)v287, *((_DWORD *)v111 + 4), (int *)&v275, (uint64_t)&v278);
                v108 = sub_1C636E56C(v215, 835, (uint64_t)&v284, v269, v267, (uint64_t *)v287[0], LODWORD(v287[1]));
                if (v287[0] != &v288)
                  free(v287[0]);
                if ((_QWORD)v284)
                  llvm::MetadataTracking::untrack((uint64_t)&v284, (unsigned __int8 *)v284);
                v109 = 1;
              }
              goto LABEL_187;
            }
          }
          v106 += 2;
          v105 -= 32;
        }
        while (v105);
        v104 += 2;
        if (v104 != (__int128 *)v101)
          continue;
        break;
      }
    }
    v108 = 0;
    v109 = 0;
LABEL_187:
    if (v280)
      llvm::MetadataTracking::untrack((uint64_t)&v280, v280);
    if ((v109 & 1) != 0)
      goto LABEL_289;
  }
  else
  {
    v108 = 0;
  }
  v116 = *(unsigned int *)(a1 + 1096);
  if (!(_DWORD)v116)
  {
    v117 = 0;
    goto LABEL_288;
  }
  v117 = 0;
  v118 = 0;
  v119 = *(_OWORD **)(a1 + 1088);
  v120 = (int32x4_t)xmmword_1C6429EB0;
  v121.i64[0] = 0x100000001;
  v121.i64[1] = 0x100000001;
  v122.i64[0] = 0x400000004;
  v122.i64[1] = 0x400000004;
  v123 = &v119[2 * v116];
  do
  {
    v124 = v123;
    v123 -= 2;
    v125 = *((_DWORD *)v124 - 4);
    v126 = *((_DWORD *)v124 - 1);
    v127 = v126 + 1;
    if (!v108 && !v125 && *(_DWORD *)(a1 + 16) == v127)
    {
      v108 = (_QWORD *)*((_QWORD *)v124 - 4);
      v117 = *((unsigned int *)v124 - 6);
      v128 = *((_DWORD *)v124 - 2);
      if (v128)
      {
        v129 = (v128 + 3) & 0xFFFFFFFC;
        v130 = (uint32x4_t)vdupq_n_s32(v128 - 1);
        v131 = (int8x16_t)v118;
        v132 = v120;
        do
        {
          v133 = (uint32x4_t)v132;
          v134 = v131;
          v131 = vorrq_s8((int8x16_t)vshlq_u32(v121, (uint32x4_t)v132), v131);
          v132 = vaddq_s32(v132, v122);
          v129 -= 4;
        }
        while (v129);
        v135 = vbslq_s8((int8x16_t)vcgtq_u32(v133, v130), v134, v131);
        *(int8x8_t *)v135.i8 = vorr_s8(*(int8x8_t *)v135.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL));
        v118 = v135.i32[0] | v135.i32[1];
      }
      continue;
    }
    v136 = *((_DWORD *)v124 - 2);
    if (*((_DWORD *)v124 - 3))
    {
      v153 = v136 - v125;
      if (v136 > v125)
      {
        v154 = 0;
        v155 = (uint32x4_t)vdupq_n_s32(v153 - 1);
        v156 = (int8x16_t)v118;
        v157 = vaddq_s32(vdupq_n_s32(v125), v120);
        do
        {
          v158 = v156;
          v156 = vorrq_s8((int8x16_t)vshlq_u32(v121, (uint32x4_t)v157), v156);
          v154 += 4;
          v157 = vaddq_s32(v157, v122);
        }
        while (((v153 + 3) & 0xFFFFFFFC) != v154);
        v159 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v154 - 4), (int8x16_t)v120), v155), v158, v156);
        v160 = vorr_s8(*(int8x8_t *)v159.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v159, v159, 8uLL));
        v118 = v160.i32[0] | v160.i32[1];
      }
      v145 = v127 - v125;
      if (v136 <= v126)
      {
        v146 = 0;
        if (v136 + 1 > v127)
          v127 = v136 + 1;
        v161 = v127 - v136;
        v162 = (v127 - v136 + 3) & 0xFFFFFFFC;
        v149 = (uint32x4_t)vdupq_n_s32(v161 - 1);
        v150.i64[1] = -1;
        v150.i64[0] = v118 | 0xFFFFFFFF00000000;
        v163 = vaddq_s32(vdupq_n_s32(v136), v120);
        do
        {
          v152 = v150;
          v150 = vbicq_s8(v150, (int8x16_t)vshlq_u32(v121, (uint32x4_t)v163));
          v146 += 4;
          v163 = vaddq_s32(v163, v122);
        }
        while (v162 != v146);
        goto LABEL_221;
      }
    }
    else
    {
      if (v136)
      {
        v137 = (v136 + 3) & 0xFFFFFFFC;
        v138 = (uint32x4_t)vdupq_n_s32(v136 - 1);
        v139 = (int8x16_t)v118;
        v140 = v120;
        do
        {
          v141 = (uint32x4_t)v140;
          v142 = v139;
          v139 = vorrq_s8((int8x16_t)vshlq_u32(v121, (uint32x4_t)v140), v139);
          v140 = vaddq_s32(v140, v122);
          v137 -= 4;
        }
        while (v137);
        v143 = vbslq_s8((int8x16_t)vcgtq_u32(v141, v138), v142, v139);
        v144 = vorr_s8(*(int8x8_t *)v143.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL));
        v118 = v144.i32[0] | v144.i32[1];
      }
      v145 = v127 + v125;
      if (v136 <= v126)
      {
        v146 = 0;
        if (v136 + 1 > v127)
          v127 = v136 + 1;
        v147 = v127 - v136;
        v148 = (v127 - v136 + 3) & 0xFFFFFFFC;
        v149 = (uint32x4_t)vdupq_n_s32(v147 - 1);
        v150.i64[1] = -1;
        v150.i64[0] = v118 | 0xFFFFFFFF00000000;
        v151 = vaddq_s32(vdupq_n_s32(v136), v120);
        do
        {
          v152 = v150;
          v150 = vbicq_s8(v150, (int8x16_t)vshlq_u32(v121, (uint32x4_t)v151));
          v146 += 4;
          v151 = vaddq_s32(v151, v122);
        }
        while (v148 != v146);
LABEL_221:
        v164 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v146 - 4), (int8x16_t)v120), v149), v152, v150);
        v165 = vand_s8(*(int8x8_t *)v164.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v164, v164, 8uLL));
        v118 = v165.i32[0] & v165.i32[1];
      }
    }
    v166 = *(_DWORD *)(a1 + 16);
    if (v166 >= (v145 & ~(v145 >> 31)))
      v166 = v145 & ~(v145 >> 31);
    if (v166 == 32)
      v166 = 0;
    v279 = v166;
    v284 = *v123;
    *(_QWORD *)&v278 = sub_1C6366AB4(*(_QWORD *)(a1 + 2168), 0, (const llvm::APInt *)&v282, (llvm *)5, 0, 1, 0);
    *((_QWORD *)&v278 + 1) = v167;
    if (v108)
    {
      if (v269 == 5)
      {
        if (*(_WORD *)(v284 + 24) == 199)
        {
          v173 = *(_QWORD *)(v284 + 32);
          v174 = *(_QWORD *)v173;
          DWORD2(v284) = *(_DWORD *)(v173 + 8);
          *(_QWORD *)&v284 = v174;
          sub_1C47C1164(*(_QWORD *)(a1 + 2176), v174, DWORD2(v284), (uint64_t)&v284, (uint64_t)&v278, 0, 1, 0, 0, 0, 0);
          v175 = *((_DWORD *)v124 - 3) == 0;
          v176 = 12335;
          v177 = 13101;
        }
        else
        {
          sub_1C47C1164(*(_QWORD *)(a1 + 2176), v284, DWORD2(v284), (uint64_t)&v284, (uint64_t)&v278, 0, 0, 0, 0, 0, 0);
          v175 = *((_DWORD *)v124 - 3) == 0;
          v176 = 12331;
          v177 = 13097;
        }
      }
      else
      {
        sub_1C47C1164(*(_QWORD *)(a1 + 2176), v284, DWORD2(v284), (uint64_t)&v284, (uint64_t)&v278, 0, 1, 0, 0, 0, 0);
        v175 = *((_DWORD *)v124 - 3) == 0;
        v176 = 12407;
        v177 = 13173;
      }
      if (v175)
        v176 = v177;
      v260 = v176;
      v196 = *(_QWORD *)(a1 + 2168);
      v273 = v282;
      if (v282)
        llvm::MetadataTracking::track((uint64_t)&v273, v282, 2);
      v274 = v283;
      v275 = 0;
      v286 = 0;
      v287[0] = &v288;
      v287[1] = (void *)0x900000000;
      v285 = 0;
      v197 = sub_1C6366AB4(v196, 0, (const llvm::APInt *)&v285, (llvm *)6, 0, 1, 0);
      v199 = v198;
      v200 = LODWORD(v287[1]);
      if (LODWORD(v287[1]) >= (unint64_t)HIDWORD(v287[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, LODWORD(v287[1]) + 1, 16);
        v200 = LODWORD(v287[1]);
      }
      v201 = (char *)v287[0] + 16 * v200;
      *v201 = v197;
      v201[1] = v199;
      v202 = ++LODWORD(v287[1]);
      if (v285)
      {
        llvm::MetadataTracking::untrack((uint64_t)&v285, v285);
        v202 = v287[1];
      }
      if (v202 >= HIDWORD(v287[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, v202 + 1, 16);
        v202 = v287[1];
      }
      v203 = (char *)v287[0] + 16 * v202;
      *v203 = v108;
      v203[1] = v117;
      ++LODWORD(v287[1]);
      v285 = 0;
      v286 = 0;
      v204 = sub_1C6366AB4(v196, 0, (const llvm::APInt *)&v285, (llvm *)6, 0, 1, 0);
      v206 = v205;
      v207 = LODWORD(v287[1]);
      if (LODWORD(v287[1]) >= (unint64_t)HIDWORD(v287[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, LODWORD(v287[1]) + 1, 16);
        v207 = LODWORD(v287[1]);
      }
      v208 = v260;
      v209 = (char *)v287[0] + 16 * v207;
      *v209 = v204;
      v209[1] = v206;
      v210 = ++LODWORD(v287[1]);
      if (v285)
      {
        llvm::MetadataTracking::untrack((uint64_t)&v285, v285);
        v210 = v287[1];
      }
      v211 = v284;
      v98 = v268;
      if (v210 >= HIDWORD(v287[1]))
      {
        v263 = v284;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, v210 + 1, 16);
        v211 = v263;
        v210 = v287[1];
      }
      *((_OWORD *)v287[0] + v210) = v211;
      v212 = (LODWORD(v287[1]) + 1);
      LODWORD(v287[1]) = v212;
      v213 = v278;
      if (v212 >= HIDWORD(v287[1]))
      {
        v264 = v278;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, v212 + 1, 16);
        v213 = v264;
        LODWORD(v212) = v287[1];
      }
      *((_OWORD *)v287[0] + v212) = v213;
      ++LODWORD(v287[1]);
      sub_1C47EADDC(v196, (uint64_t)v287, *((_DWORD *)v124 - 4), &v279, (uint64_t)&v275);
      v108 = sub_1C636E56C(v196, v208, (uint64_t)&v273, v269, v267, (uint64_t *)v287[0], LODWORD(v287[1]));
      if (v287[0] != &v288)
        free(v287[0]);
      v194 = v273;
      if (!v273)
        goto LABEL_281;
      v195 = &v273;
    }
    else
    {
      if (v269 == 5)
      {
        if (*(_WORD *)(v284 + 24) == 199)
        {
          v168 = *(_QWORD *)(v284 + 32);
          v169 = *(_QWORD *)v168;
          DWORD2(v284) = *(_DWORD *)(v168 + 8);
          *(_QWORD *)&v284 = v169;
          sub_1C47C1164(*(_QWORD *)(a1 + 2176), v169, DWORD2(v284), (uint64_t)&v284, (uint64_t)&v278, 0, 1, 0, 0, 0, 0);
          v170 = *((_DWORD *)v124 - 3) == 0;
          v171 = 12379;
          v172 = 13145;
        }
        else
        {
          sub_1C47C1164(*(_QWORD *)(a1 + 2176), v284, DWORD2(v284), (uint64_t)&v284, (uint64_t)&v278, 0, 0, 0, 0, 0, 0);
          v170 = *((_DWORD *)v124 - 3) == 0;
          v171 = 12375;
          v172 = 13141;
        }
      }
      else
      {
        sub_1C47C1164(*(_QWORD *)(a1 + 2176), v284, DWORD2(v284), (uint64_t)&v284, (uint64_t)&v278, 0, 1, 0, 0, 0, 0);
        v170 = *((_DWORD *)v124 - 3) == 0;
        v171 = 12435;
        v172 = 13201;
      }
      if (v170)
        v178 = v172;
      else
        v178 = v171;
      v179 = *(_QWORD *)(a1 + 2168);
      v276 = v282;
      if (v282)
        llvm::MetadataTracking::track((uint64_t)&v276, v282, 2);
      v277 = v283;
      v275 = 0;
      v286 = 0;
      v287[0] = &v288;
      v287[1] = (void *)0x800000000;
      v285 = 0;
      v180 = sub_1C6366AB4(v179, 0, (const llvm::APInt *)&v285, (llvm *)6, 0, 1, 0);
      v182 = v181;
      v183 = LODWORD(v287[1]);
      if (LODWORD(v287[1]) >= (unint64_t)HIDWORD(v287[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, LODWORD(v287[1]) + 1, 16);
        v183 = LODWORD(v287[1]);
      }
      v184 = (char *)v287[0] + 16 * v183;
      *v184 = v180;
      v184[1] = v182;
      ++LODWORD(v287[1]);
      if (v285)
        llvm::MetadataTracking::untrack((uint64_t)&v285, v285);
      v285 = 0;
      v286 = 0;
      v185 = sub_1C6366AB4(v179, 0, (const llvm::APInt *)&v285, (llvm *)6, 0, 1, 0);
      v187 = v186;
      v188 = LODWORD(v287[1]);
      if (LODWORD(v287[1]) >= (unint64_t)HIDWORD(v287[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, LODWORD(v287[1]) + 1, 16);
        v188 = LODWORD(v287[1]);
      }
      v189 = (char *)v287[0] + 16 * v188;
      *v189 = v185;
      v189[1] = v187;
      v190 = ++LODWORD(v287[1]);
      if (v285)
      {
        llvm::MetadataTracking::untrack((uint64_t)&v285, v285);
        v190 = v287[1];
      }
      v191 = v284;
      if (v190 >= HIDWORD(v287[1]))
      {
        v261 = v284;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, v190 + 1, 16);
        v191 = v261;
        v190 = v287[1];
      }
      *((_OWORD *)v287[0] + v190) = v191;
      v192 = (LODWORD(v287[1]) + 1);
      LODWORD(v287[1]) = v192;
      v193 = v278;
      if (v192 >= HIDWORD(v287[1]))
      {
        v262 = v278;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, v192 + 1, 16);
        v193 = v262;
        LODWORD(v192) = v287[1];
      }
      *((_OWORD *)v287[0] + v192) = v193;
      ++LODWORD(v287[1]);
      sub_1C47EADDC(v179, (uint64_t)v287, *((_DWORD *)v124 - 4), &v279, (uint64_t)&v275);
      v108 = sub_1C636E56C(v179, v178, (uint64_t)&v276, v269, v267, (uint64_t *)v287[0], LODWORD(v287[1]));
      if (v287[0] != &v288)
        free(v287[0]);
      v194 = v276;
      if (!v276)
        goto LABEL_281;
      v195 = &v276;
    }
    llvm::MetadataTracking::untrack((uint64_t)v195, v194);
LABEL_281:
    v120 = (int32x4_t)xmmword_1C6429EB0;
    v121.i64[0] = 0x100000001;
    v121.i64[1] = 0x100000001;
    v122.i64[0] = 0x400000004;
    v122.i64[1] = 0x400000004;
    if (v98)
      ++*v98;
    v117 = 0;
  }
  while (v123 != v119);
  if ((a3 & 1) == 0 && v118)
  {
LABEL_286:
    v108 = 0;
    goto LABEL_289;
  }
LABEL_288:
  if (a3)
  {
    v235 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v235)
    {
      v237 = 0;
      LODWORD(v236) = 0;
      v238 = (int *)(*(_QWORD *)(a1 + 8) + 20);
      do
      {
        v239 = *v238;
        v238 += 6;
        if (v239 == 1)
          v240 = 1 << v237;
        else
          v240 = 0;
        v236 = v240 | v236;
        ++v237;
      }
      while (v235 != v237);
    }
    else
    {
      v236 = 0;
    }
    if (v98)
      ++*v98;
    if (v269 == 5)
      v241 = 356;
    else
      v241 = 373;
    v242 = *(_QWORD *)(a1 + 2168);
    v271 = v282;
    if (v282)
      llvm::MetadataTracking::track((uint64_t)&v271, v282, 2);
    v272 = v283;
    *(_QWORD *)&v284 = 0;
    v286 = 0;
    v287[0] = &v288;
    v287[1] = (void *)0x600000000;
    v285 = 0;
    v243 = sub_1C6366AB4(v242, 0, (const llvm::APInt *)&v285, (llvm *)6, 0, 1, 0);
    v245 = v244;
    v246 = v287[1];
    if (LODWORD(v287[1]) >= HIDWORD(v287[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, LODWORD(v287[1]) + 1, 16);
      v246 = v287[1];
    }
    v247 = (char *)v287[0] + 16 * v246;
    *v247 = v243;
    v247[1] = v245;
    v248 = ++LODWORD(v287[1]);
    if (v285)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v285, v285);
      v248 = v287[1];
    }
    if (v248 >= HIDWORD(v287[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, v248 + 1, 16);
      v248 = v287[1];
    }
    v249 = (char *)v287[0] + 16 * v248;
    *v249 = v108;
    v249[1] = v117;
    ++LODWORD(v287[1]);
    v285 = 0;
    v286 = 0;
    v250 = sub_1C6366AB4(v242, 0, (const llvm::APInt *)&v285, (llvm *)6, 0, 1, 0);
    v252 = v251;
    v253 = v287[1];
    if (LODWORD(v287[1]) >= HIDWORD(v287[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, LODWORD(v287[1]) + 1, 16);
      v253 = v287[1];
    }
    v254 = (char *)v287[0] + 16 * v253;
    *v254 = v250;
    v254[1] = v252;
    ++LODWORD(v287[1]);
    if (v285)
      llvm::MetadataTracking::untrack((uint64_t)&v285, v285);
    v285 = 0;
    v286 = 0;
    v255 = sub_1C6366AB4(v242, v236, (const llvm::APInt *)&v285, (llvm *)6, 0, 1, 0);
    v257 = v256;
    v258 = v287[1];
    if (LODWORD(v287[1]) >= HIDWORD(v287[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, (uint64_t)&v288, LODWORD(v287[1]) + 1, 16);
      v258 = v287[1];
    }
    v259 = (char *)v287[0] + 16 * v258;
    *v259 = v255;
    v259[1] = v257;
    ++LODWORD(v287[1]);
    if (v285)
      llvm::MetadataTracking::untrack((uint64_t)&v285, v285);
    sub_1C47E2930(v242, (uint64_t)v287, (uint64_t)&v284);
    v108 = sub_1C636E56C(v242, v241, (uint64_t)&v271, v269, v267, (uint64_t *)v287[0], LODWORD(v287[1]));
    if (v287[0] != &v288)
      free(v287[0]);
    if (v271)
      llvm::MetadataTracking::untrack((uint64_t)&v271, v271);
  }
LABEL_289:
  if (v282)
    llvm::MetadataTracking::untrack((uint64_t)&v282, v282);
  return v108;
}

uint64_t sub_1C47E9C08()
{
  return 1;
}

__n128 sub_1C47E9C18(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  __n128 result;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v4 + 1;
    v10 = v5 + 32 * v4;
    if (v5 <= a2 && v10 > a2)
    {
      v12 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 32);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v12;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 32);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = (_OWORD *)(v5 + 32 * *(unsigned int *)(a1 + 8));
  result = *(__n128 *)v2;
  v8 = *(_OWORD *)(v2 + 16);
  *v6 = *(_OWORD *)v2;
  v6[1] = v8;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C47E9CB0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int i;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v19;
  BOOL v20;
  unsigned int v21;
  uint64_t result;

  if (!a2)
  {
    v14 = 0;
    result = 0;
    goto LABEL_28;
  }
  v4 = 0;
  v5 = *(_DWORD *)(a3 + 16);
  v6 = *(_DWORD *)(a3 + 8);
  v7 = ~((unint64_t)(37 * v5) << 32)
     + (37 * v5)
     + ((unint64_t)(v6 + ((*(_QWORD *)a3 >> 4) ^ (*(_QWORD *)a3 >> 9))) << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = (v9 >> 31) ^ v9;
  v11 = a2 - 1;
  v12 = (a2 - 1) & v10;
  for (i = 1; ; ++i)
  {
    v14 = (uint64_t *)(a1 + 56 * v12);
    v15 = *v14;
    v16 = *((_DWORD *)v14 + 2);
    v17 = *(_QWORD *)a3 == *v14 && v6 == v16;
    if (v17 && v5 == *((_DWORD *)v14 + 4))
    {
      result = 1;
      goto LABEL_28;
    }
    if (!v15 && v16 == -1)
      break;
    if (v15)
      v19 = 0;
    else
      v19 = v16 == -2;
    if (!v19)
      goto LABEL_15;
    v20 = *((_DWORD *)v14 + 4) == -2;
LABEL_21:
    if (v20 && v4 == 0)
      v4 = (uint64_t *)(a1 + 56 * v12);
    v21 = v12 + i;
    v12 = v21 & v11;
  }
  if (*((_DWORD *)v14 + 4) != -1)
  {
LABEL_15:
    v20 = 0;
    goto LABEL_21;
  }
  result = 0;
  if (v4)
    v14 = v4;
LABEL_28:
  *a4 = v14;
  return result;
}

void sub_1C47E9DD0(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  __int128 *v23;
  unsigned int v24;
  unsigned int v25;
  __int128 *v26;
  __int128 v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  unsigned int v31;
  __int128 *v32;
  __int128 v33;
  BOOL v34;
  _DWORD *v35;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  __int128 *v44;
  unsigned int *j;
  __int128 v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  __int128 *v51;
  __int128 v52;
  unsigned int v53;
  unsigned int v54;
  __int128 v55;
  __int128 *v56;
  __int128 *v57;
  __int128 *v58;
  unsigned int v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  unsigned int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unsigned int v68;
  unsigned int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unsigned int v73;
  unsigned int v74;
  __int128 v75;
  __int128 *v76;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  __int128 v85;
  unint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  unsigned int v89;
  __int128 v90;
  int64_t v91;
  int64_t v92;
  int64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  BOOL v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  BOOL v109;
  unsigned int v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  _OWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  BOOL v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  __int128 v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int v134;
  __int128 v135;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  __int128 v142;
  unsigned int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;

LABEL_1:
  v8 = a2 - 2;
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = (uint64_t)a2 - i;
    v11 = (uint64_t)((uint64_t)a2 - i) >> 5;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v53 = *((_DWORD *)a2 - 2);
        v54 = *(_DWORD *)(i + 24);
        if (v53 > v54 || v53 >= v54 && *((_DWORD *)a2 - 1) < *(_DWORD *)(i + 28))
        {
          v153 = *(_OWORD *)i;
          v162 = *(_OWORD *)(i + 16);
          v55 = *(a2 - 1);
          *(_OWORD *)i = *v8;
          *(_OWORD *)(i + 16) = v55;
          *v8 = v153;
          *(a2 - 1) = v162;
        }
        return;
      case 3:
        sub_1C47EA8F8((__int128 *)i, (__int128 *)(i + 32), a2 - 2);
        return;
      case 4:
        sub_1C47EACFC(i, i + 32, i + 64, (uint64_t)(a2 - 2));
        return;
      case 5:
        v56 = (__int128 *)(i + 32);
        v57 = (__int128 *)(i + 64);
        v58 = (__int128 *)(i + 96);
        sub_1C47EACFC(i, i + 32, i + 64, i + 96);
        v59 = *((_DWORD *)a2 - 2);
        v60 = *(_DWORD *)(i + 120);
        if (v59 > v60 || v59 >= v60 && *((_DWORD *)a2 - 1) < *(_DWORD *)(i + 124))
        {
          v61 = *v58;
          v163 = *(_OWORD *)(i + 112);
          v62 = *(a2 - 1);
          *v58 = *v8;
          *(_OWORD *)(i + 112) = v62;
          *v8 = v61;
          *(a2 - 1) = v163;
          v63 = *(_DWORD *)(i + 120);
          v64 = *(_DWORD *)(i + 88);
          if (v63 > v64 || v63 >= v64 && *(_DWORD *)(i + 124) < *(_DWORD *)(i + 92))
          {
            v66 = *v57;
            v65 = *(_OWORD *)(i + 80);
            v67 = *(_OWORD *)(i + 112);
            *v57 = *v58;
            *(_OWORD *)(i + 80) = v67;
            *v58 = v66;
            *(_OWORD *)(i + 112) = v65;
            v68 = *(_DWORD *)(i + 88);
            v69 = *(_DWORD *)(i + 56);
            if (v68 > v69 || v68 >= v69 && *(_DWORD *)(i + 92) < *(_DWORD *)(i + 60))
            {
              v71 = *v56;
              v70 = *(_OWORD *)(i + 48);
              v72 = *(_OWORD *)(i + 80);
              *v56 = *v57;
              *(_OWORD *)(i + 48) = v72;
              *v57 = v71;
              *(_OWORD *)(i + 80) = v70;
              v73 = *(_DWORD *)(i + 56);
              v74 = *(_DWORD *)(i + 24);
              if (v73 > v74 || v73 >= v74 && *(_DWORD *)(i + 60) < *(_DWORD *)(i + 28))
              {
                v154 = *(_OWORD *)i;
                v164 = *(_OWORD *)(i + 16);
                v75 = *(_OWORD *)(i + 48);
                *(_OWORD *)i = *v56;
                *(_OWORD *)(i + 16) = v75;
                *v56 = v154;
                *(_OWORD *)(i + 48) = v164;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 767)
        {
          v76 = (__int128 *)(i + 32);
          v78 = (__int128 *)i == a2 || v76 == a2;
          if ((a4 & 1) != 0)
          {
            if (v78)
              return;
            v79 = 0;
            v80 = i;
            while (1)
            {
              v81 = v80;
              v80 = (unint64_t)v76;
              v82 = *(_DWORD *)(v81 + 56);
              v83 = *(_DWORD *)(v81 + 24);
              if (v82 > v83)
                break;
              if (v82 >= v83)
              {
                v84 = *(_DWORD *)(v81 + 60);
                if (v84 < *(_DWORD *)(v81 + 28))
                  goto LABEL_119;
              }
LABEL_131:
              v76 = (__int128 *)(v80 + 32);
              v79 += 32;
              if ((__int128 *)(v80 + 32) == a2)
                return;
            }
            v84 = *(_DWORD *)(v81 + 60);
LABEL_119:
            v165 = *(_QWORD *)(v80 + 16);
            v155 = *(_OWORD *)v80;
            v85 = *(_OWORD *)(v81 + 16);
            *(_OWORD *)v80 = *(_OWORD *)v81;
            *(_OWORD *)(v80 + 16) = v85;
            v86 = i;
            if (v81 != i)
            {
              v87 = v79;
              do
              {
                v88 = (_OWORD *)(i + v87);
                v89 = *(_DWORD *)(i + v87 - 8);
                if (v82 <= v89)
                {
                  if (v82 < v89)
                  {
                    v86 = v81;
                    goto LABEL_130;
                  }
                  v86 = i + v87;
                  if (v84 >= *(_DWORD *)(i + v87 - 4))
                    goto LABEL_130;
                }
                v81 -= 32;
                v90 = *(v88 - 1);
                *v88 = *(v88 - 2);
                v88[1] = v90;
                v87 -= 32;
              }
              while (v87);
              v86 = i;
            }
LABEL_130:
            *(_QWORD *)(v86 + 16) = v165;
            *(_OWORD *)v86 = v155;
            *(_DWORD *)(v86 + 24) = v82;
            *(_DWORD *)(v86 + 28) = v84;
            goto LABEL_131;
          }
          if (v78)
            return;
          while (1)
          {
            v137 = a1;
            a1 = (uint64_t)v76;
            v138 = *(_DWORD *)(v137 + 56);
            v139 = *(_DWORD *)(v137 + 24);
            if (v138 > v139)
              break;
            if (v138 >= v139)
            {
              v140 = *(_DWORD *)(v137 + 60);
              if (v140 < *(_DWORD *)(v137 + 28))
                goto LABEL_195;
            }
LABEL_202:
            v76 = (__int128 *)(a1 + 32);
            if ((__int128 *)(a1 + 32) == a2)
              return;
          }
          v140 = *(_DWORD *)(v137 + 60);
LABEL_195:
          v168 = *(_QWORD *)(a1 + 16);
          v158 = *(_OWORD *)a1;
          do
          {
            do
            {
              v141 = v137;
              v142 = *(_OWORD *)(v137 + 16);
              *(_OWORD *)(v137 + 32) = *(_OWORD *)v137;
              *(_OWORD *)(v137 + 48) = v142;
              v137 -= 32;
              v143 = *(_DWORD *)(v141 - 8);
            }
            while (v138 > v143);
          }
          while (v138 >= v143 && v140 < *(_DWORD *)(v141 - 4));
          *(_QWORD *)(v141 + 16) = v168;
          *(_OWORD *)v141 = v158;
          *(_DWORD *)(v141 + 24) = v138;
          *(_DWORD *)(v141 + 28) = v140;
          goto LABEL_202;
        }
        if (!a3)
        {
          if ((__int128 *)i == a2)
            return;
          v91 = (unint64_t)(v11 - 2) >> 1;
          v92 = v91;
          while (1)
          {
            v93 = v92;
            if (v91 < v92)
              goto LABEL_149;
            v94 = (2 * v92) | 1;
            v95 = i + 32 * v94;
            if (2 * v93 + 2 < v11)
            {
              v96 = *(_DWORD *)(v95 + 24);
              v97 = *(_DWORD *)(v95 + 56);
              if (v96 > v97)
              {
                v95 += 32;
LABEL_139:
                v94 = 2 * v93 + 2;
                goto LABEL_142;
              }
              if (v96 >= v97)
              {
                v98 = *(_DWORD *)(i + 32 * v94 + 28) < *(_DWORD *)(v95 + 60);
                v95 += 32 * v98;
                if (v98)
                  goto LABEL_139;
              }
            }
LABEL_142:
            v99 = *(_DWORD *)(v95 + 24);
            v100 = *(_DWORD *)(i + 32 * v93 + 24);
            if (v99 <= v100)
            {
              v101 = i + 32 * v93;
              if (v99 < v100)
              {
                v102 = *(_DWORD *)(v101 + 28);
LABEL_146:
                v166 = *(_QWORD *)(v101 + 16);
                v156 = *(_OWORD *)v101;
                v103 = *(_OWORD *)(v95 + 16);
                *(_OWORD *)v101 = *(_OWORD *)v95;
                *(_OWORD *)(v101 + 16) = v103;
                if (v91 < v94)
                {
LABEL_147:
                  v104 = v95;
LABEL_148:
                  *(_QWORD *)(v104 + 16) = v166;
                  *(_OWORD *)v104 = v156;
                  *(_DWORD *)(v104 + 24) = v100;
                  *(_DWORD *)(v104 + 28) = v102;
                  goto LABEL_149;
                }
                while (2)
                {
                  v105 = 2 * v94;
                  v94 = (2 * v94) | 1;
                  v104 = i + 32 * v94;
                  v106 = v105 + 2;
                  if (v106 < v11)
                  {
                    v107 = *(_DWORD *)(v104 + 24);
                    v108 = *(_DWORD *)(v104 + 56);
                    if (v107 > v108)
                    {
                      v104 += 32;
                      goto LABEL_156;
                    }
                    if (v107 >= v108)
                    {
                      v109 = *(_DWORD *)(i + 32 * v94 + 28) < *(_DWORD *)(v104 + 60);
                      v104 += 32 * v109;
                      if (v109)
LABEL_156:
                        v94 = v106;
                    }
                  }
                  v110 = *(_DWORD *)(v104 + 24);
                  if (v110 > v100 || v110 >= v100 && *(_DWORD *)(v104 + 28) < v102)
                    goto LABEL_147;
                  v111 = *(_OWORD *)(v104 + 16);
                  *(_OWORD *)v95 = *(_OWORD *)v104;
                  *(_OWORD *)(v95 + 16) = v111;
                  v95 = v104;
                  if (v91 < v94)
                    goto LABEL_148;
                  continue;
                }
              }
              v102 = *(_DWORD *)(i + 32 * v93 + 28);
              if (*(_DWORD *)(v95 + 28) >= v102)
                goto LABEL_146;
            }
LABEL_149:
            v92 = v93 - 1;
            if (!v93)
            {
              while (1)
              {
                v112 = 0;
                v157 = *(_OWORD *)i;
                v167 = *(_OWORD *)(i + 16);
                v113 = i;
                do
                {
                  v114 = (_OWORD *)v113;
                  v115 = v112 + 1;
                  v113 += 32 * (v112 + 1);
                  v116 = 2 * v112;
                  v112 = (2 * v112) | 1;
                  v117 = v116 + 2;
                  if (v117 >= v11)
                    goto LABEL_169;
                  v118 = *(_DWORD *)(v113 + 24);
                  v119 = *(_DWORD *)(v113 + 56);
                  if (v118 > v119)
                  {
                    v113 += 32;
LABEL_166:
                    v112 = v117;
                    goto LABEL_169;
                  }
                  if (v118 >= v119)
                  {
                    v120 = HIDWORD(v114[2 * v115 + 1]) < *(_DWORD *)(v113 + 60);
                    v113 += 32 * v120;
                    if (v120)
                      goto LABEL_166;
                  }
LABEL_169:
                  v121 = *(_OWORD *)(v113 + 16);
                  *v114 = *(_OWORD *)v113;
                  v114[1] = v121;
                }
                while (v112 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
                a2 -= 2;
                if ((__int128 *)v113 == a2)
                {
                  *(_OWORD *)v113 = v157;
                  *(_OWORD *)(v113 + 16) = v167;
                }
                else
                {
                  v122 = a2[1];
                  *(_OWORD *)v113 = *a2;
                  *(_OWORD *)(v113 + 16) = v122;
                  *a2 = v157;
                  a2[1] = v167;
                  v123 = v113 - i + 32;
                  if (v123 >= 33)
                  {
                    v124 = ((unint64_t)v123 >> 5) - 2;
                    v125 = v124 >> 1;
                    v126 = i + 32 * (v124 >> 1);
                    v127 = *(_DWORD *)(v126 + 24);
                    v128 = *(_DWORD *)(v113 + 24);
                    if (v127 > v128 || v127 >= v128 && *(_DWORD *)(i + 32 * v125 + 28) < *(_DWORD *)(v113 + 28))
                    {
                      v149 = *(_QWORD *)(v113 + 16);
                      v146 = *(_OWORD *)v113;
                      v129 = *(_DWORD *)(v113 + 24);
                      v130 = *(_DWORD *)(v113 + 28);
                      v131 = *(_OWORD *)(v126 + 16);
                      *(_OWORD *)v113 = *(_OWORD *)v126;
                      *(_OWORD *)(v113 + 16) = v131;
                      if (v124 >= 2)
                      {
                        while (1)
                        {
                          v133 = v125 - 1;
                          v125 = (v125 - 1) >> 1;
                          v132 = i + 32 * v125;
                          v134 = *(_DWORD *)(v132 + 24);
                          if (v134 <= v129 && (v134 < v129 || *(_DWORD *)(i + 32 * v125 + 28) >= v130))
                            break;
                          v135 = *(_OWORD *)(v132 + 16);
                          *(_OWORD *)v126 = *(_OWORD *)v132;
                          *(_OWORD *)(v126 + 16) = v135;
                          v126 = i + 32 * v125;
                          if (v133 < 2)
                            goto LABEL_181;
                        }
                      }
                      v132 = v126;
LABEL_181:
                      *(_QWORD *)(v132 + 16) = v149;
                      *(_OWORD *)v132 = v146;
                      *(_DWORD *)(v132 + 24) = v129;
                      *(_DWORD *)(v132 + 28) = v130;
                    }
                  }
                }
                if (v11-- <= 2)
                  return;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (__int128 *)(i + 32 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 <= 0x1000)
        {
          sub_1C47EA8F8((__int128 *)(a1 + 32 * ((unint64_t)v11 >> 1)), (__int128 *)a1, a2 - 2);
        }
        else
        {
          sub_1C47EA8F8((__int128 *)a1, (__int128 *)(a1 + 32 * ((unint64_t)v11 >> 1)), a2 - 2);
          sub_1C47EA8F8((__int128 *)(a1 + 32), v13 - 2, a2 - 4);
          sub_1C47EA8F8((__int128 *)(a1 + 64), (__int128 *)(a1 + 32 + 32 * v12), a2 - 6);
          sub_1C47EA8F8(v13 - 2, v13, (__int128 *)(a1 + 32 + 32 * v12));
          v150 = *(_OWORD *)a1;
          v159 = *(_OWORD *)(a1 + 16);
          v14 = v13[1];
          *(_OWORD *)a1 = *v13;
          *(_OWORD *)(a1 + 16) = v14;
          *v13 = v150;
          v13[1] = v159;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = *(_DWORD *)(a1 - 8);
          v15 = *(_DWORD *)(a1 + 24);
          if (v16 > v15)
            goto LABEL_14;
          if (v16 >= v15)
          {
            v38 = *(_DWORD *)(a1 + 28);
            if (*(_DWORD *)(a1 - 4) < v38)
              goto LABEL_14;
          }
          else
          {
            v38 = *(_DWORD *)(a1 + 28);
          }
          v148 = *(_QWORD *)(a1 + 16);
          v145 = *(_OWORD *)a1;
          v39 = *((_DWORD *)a2 - 2);
          if (v15 <= v39 && (v15 < v39 || v38 >= *((_DWORD *)a2 - 1)))
          {
            for (i = a1 + 32; i < (unint64_t)a2; i += 32)
            {
              v41 = *(_DWORD *)(i + 24);
              if (v15 > v41 || v15 >= v41 && v38 < *(_DWORD *)(i + 28))
                break;
            }
          }
          else
          {
            v40 = *(_DWORD *)(a1 + 56);
            if (v15 <= v40)
            {
              v42 = (unsigned int *)(a1 + 88);
              do
              {
                if (v15 >= v40 && v38 < *(v42 - 7))
                  break;
                v43 = *v42;
                v42 += 8;
                v40 = v43;
              }
              while (v15 <= v43);
              i = (unint64_t)(v42 - 14);
            }
            else
            {
              i = a1 + 32;
            }
          }
          v44 = a2;
          if (i < (unint64_t)a2)
          {
            for (j = (unsigned int *)a2 - 1; v15 > v39 || v15 >= v39 && v38 < *j; j -= 8)
              v39 = *(j - 9);
            v44 = (__int128 *)(j - 7);
          }
          while (i < (unint64_t)v44)
          {
            v152 = *(_OWORD *)i;
            v161 = *(_OWORD *)(i + 16);
            v46 = v44[1];
            *(_OWORD *)i = *v44;
            *(_OWORD *)(i + 16) = v46;
            *v44 = v152;
            v44[1] = v161;
            v47 = *(_DWORD *)(i + 56);
            if (v15 <= v47)
            {
              v48 = (unsigned int *)(i + 88);
              do
              {
                if (v15 >= v47 && v38 < *(v48 - 7))
                  break;
                v49 = *v48;
                v48 += 8;
                v47 = v49;
              }
              while (v15 <= v49);
              i = (unint64_t)(v48 - 14);
            }
            else
            {
              i += 32;
            }
            do
            {
              do
              {
                v44 -= 2;
                v50 = *((_DWORD *)v44 + 6);
              }
              while (v15 > v50);
            }
            while (v15 >= v50 && v38 < *((_DWORD *)v44 + 7));
          }
          v51 = (__int128 *)(i - 32);
          if (i - 32 != a1)
          {
            v52 = *(_OWORD *)(i - 16);
            *(_OWORD *)a1 = *v51;
            *(_OWORD *)(a1 + 16) = v52;
          }
          a4 = 0;
          *(_QWORD *)(i - 16) = v148;
          *v51 = v145;
          *(_DWORD *)(i - 8) = v15;
          *(_DWORD *)(i - 4) = v38;
          continue;
        }
        v15 = *(_DWORD *)(a1 + 24);
LABEL_14:
        v17 = 0;
        v147 = *(_QWORD *)(a1 + 16);
        v144 = *(_OWORD *)a1;
        v18 = *(_DWORD *)(a1 + 28);
        while (1)
        {
          v19 = *(_DWORD *)(a1 + v17 + 56);
          if (v19 <= v15 && (v19 < v15 || *(_DWORD *)(a1 + v17 + 60) >= v18))
            break;
          v17 += 32;
        }
        v20 = a1 + v17 + 32;
        if (v17)
        {
          v21 = *((_DWORD *)a2 - 2);
          v22 = (_DWORD *)a2 - 10;
          v23 = a2 - 2;
          if (v21 <= v15)
          {
            do
            {
              if (v21 >= v15 && v22[9] < v18)
                break;
              v24 = *v22;
              v22 -= 8;
              v21 = v24;
            }
            while (v24 <= v15);
LABEL_24:
            v23 = (__int128 *)(v22 + 2);
          }
        }
        else
        {
          v23 = a2;
          if (v20 < (unint64_t)a2)
          {
            v25 = *((_DWORD *)a2 - 2);
            v23 = a2 - 2;
            if (v25 <= v15)
            {
              v22 = (_DWORD *)a2 - 10;
              v23 = a2 - 2;
              while (1)
              {
                v35 = v22 + 2;
                if (v25 >= v15)
                {
                  if (v22[9] < v18 || v20 >= (unint64_t)v35)
                    goto LABEL_24;
                }
                else if (v20 >= (unint64_t)v35)
                {
                  break;
                }
                v23 -= 2;
                v37 = *v22;
                v22 -= 8;
                v25 = v37;
                if (v37 > v15)
                  goto LABEL_24;
              }
            }
          }
        }
        i = v20;
        if (v20 < (unint64_t)v23)
        {
          v26 = v23;
          do
          {
            v151 = *(_OWORD *)i;
            v160 = *(_OWORD *)(i + 16);
            v27 = v26[1];
            *(_OWORD *)i = *v26;
            *(_OWORD *)(i + 16) = v27;
            *v26 = v151;
            v26[1] = v160;
            do
            {
              do
              {
                i += 32;
                v28 = *(_DWORD *)(i + 24);
              }
              while (v28 > v15);
            }
            while (v28 >= v15 && *(_DWORD *)(i + 28) < v18);
            v29 = *((_DWORD *)v26 - 2);
            if (v29 <= v15)
            {
              v30 = (_DWORD *)v26 - 10;
              do
              {
                if (v29 >= v15 && v30[9] < v18)
                  break;
                v31 = *v30;
                v30 -= 8;
                v29 = v31;
              }
              while (v31 <= v15);
              v26 = (__int128 *)(v30 + 2);
            }
            else
            {
              v26 -= 2;
            }
          }
          while (i < (unint64_t)v26);
        }
        v32 = (__int128 *)(i - 32);
        if (i - 32 != a1)
        {
          v33 = *(_OWORD *)(i - 16);
          *(_OWORD *)a1 = *v32;
          *(_OWORD *)(a1 + 16) = v33;
        }
        *(_QWORD *)(i - 16) = v147;
        *v32 = v144;
        *(_DWORD *)(i - 8) = v15;
        *(_DWORD *)(i - 4) = v18;
        if (v20 < (unint64_t)v23)
        {
LABEL_46:
          sub_1C47E9DD0(a1, i - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = sub_1C47EAA08(a1, i - 32);
        if (!sub_1C47EAA08(i, (uint64_t)a2))
        {
          if (v34)
            continue;
          goto LABEL_46;
        }
        a2 = (__int128 *)(i - 32);
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a2 - 2;
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = (uint64_t)a2 - i;
    v11 = (uint64_t)((uint64_t)a2 - i) >> 5;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v53 = *((_DWORD *)a2 - 2);
        v54 = *(_DWORD *)(i + 24);
        if (v53 > v54 || v53 >= v54 && *((_DWORD *)a2 - 1) < *(_DWORD *)(i + 28))
        {
          v153 = *(_OWORD *)i;
          v162 = *(_OWORD *)(i + 16);
          v55 = *(a2 - 1);
          *(_OWORD *)i = *v8;
          *(_OWORD *)(i + 16) = v55;
          *v8 = v153;
          *(a2 - 1) = v162;
        }
        return;
      case 3:
        sub_1C47EA8F8((__int128 *)i, (__int128 *)(i + 32), a2 - 2);
        return;
      case 4:
        sub_1C47EACFC(i, i + 32, i + 64, (uint64_t)(a2 - 2));
        return;
      case 5:
        v56 = (__int128 *)(i + 32);
        v57 = (__int128 *)(i + 64);
        v58 = (__int128 *)(i + 96);
        sub_1C47EACFC(i, i + 32, i + 64, i + 96);
        v59 = *((_DWORD *)a2 - 2);
        v60 = *(_DWORD *)(i + 120);
        if (v59 > v60 || v59 >= v60 && *((_DWORD *)a2 - 1) < *(_DWORD *)(i + 124))
        {
          v61 = *v58;
          v163 = *(_OWORD *)(i + 112);
          v62 = *(a2 - 1);
          *v58 = *v8;
          *(_OWORD *)(i + 112) = v62;
          *v8 = v61;
          *(a2 - 1) = v163;
          v63 = *(_DWORD *)(i + 120);
          v64 = *(_DWORD *)(i + 88);
          if (v63 > v64 || v63 >= v64 && *(_DWORD *)(i + 124) < *(_DWORD *)(i + 92))
          {
            v66 = *v57;
            v65 = *(_OWORD *)(i + 80);
            v67 = *(_OWORD *)(i + 112);
            *v57 = *v58;
            *(_OWORD *)(i + 80) = v67;
            *v58 = v66;
            *(_OWORD *)(i + 112) = v65;
            v68 = *(_DWORD *)(i + 88);
            v69 = *(_DWORD *)(i + 56);
            if (v68 > v69 || v68 >= v69 && *(_DWORD *)(i + 92) < *(_DWORD *)(i + 60))
            {
              v71 = *v56;
              v70 = *(_OWORD *)(i + 48);
              v72 = *(_OWORD *)(i + 80);
              *v56 = *v57;
              *(_OWORD *)(i + 48) = v72;
              *v57 = v71;
              *(_OWORD *)(i + 80) = v70;
              v73 = *(_DWORD *)(i + 56);
              v74 = *(_DWORD *)(i + 24);
              if (v73 > v74 || v73 >= v74 && *(_DWORD *)(i + 60) < *(_DWORD *)(i + 28))
              {
                v154 = *(_OWORD *)i;
                v164 = *(_OWORD *)(i + 16);
                v75 = *(_OWORD *)(i + 48);
                *(_OWORD *)i = *v56;
                *(_OWORD *)(i + 16) = v75;
                *v56 = v154;
                *(_OWORD *)(i + 48) = v164;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 767)
        {
          v76 = (__int128 *)(i + 32);
          v78 = (__int128 *)i == a2 || v76 == a2;
          if ((a4 & 1) != 0)
          {
            if (v78)
              return;
            v79 = 0;
            v80 = i;
            while (1)
            {
              v81 = v80;
              v80 = (unint64_t)v76;
              v82 = *(_DWORD *)(v81 + 56);
              v83 = *(_DWORD *)(v81 + 24);
              if (v82 > v83)
                break;
              if (v82 >= v83)
              {
                v84 = *(_DWORD *)(v81 + 60);
                if (v84 < *(_DWORD *)(v81 + 28))
                  goto LABEL_119;
              }
LABEL_131:
              v76 = (__int128 *)(v80 + 32);
              v79 += 32;
              if ((__int128 *)(v80 + 32) == a2)
                return;
            }
            v84 = *(_DWORD *)(v81 + 60);
LABEL_119:
            v165 = *(_QWORD *)(v80 + 16);
            v155 = *(_OWORD *)v80;
            v85 = *(_OWORD *)(v81 + 16);
            *(_OWORD *)v80 = *(_OWORD *)v81;
            *(_OWORD *)(v80 + 16) = v85;
            v86 = i;
            if (v81 != i)
            {
              v87 = v79;
              do
              {
                v88 = (_OWORD *)(i + v87);
                v89 = *(_DWORD *)(i + v87 - 8);
                if (v82 <= v89)
                {
                  if (v82 < v89)
                  {
                    v86 = v81;
                    goto LABEL_130;
                  }
                  v86 = i + v87;
                  if (v84 >= *(_DWORD *)(i + v87 - 4))
                    goto LABEL_130;
                }
                v81 -= 32;
                v90 = *(v88 - 1);
                *v88 = *(v88 - 2);
                v88[1] = v90;
                v87 -= 32;
              }
              while (v87);
              v86 = i;
            }
LABEL_130:
            *(_QWORD *)(v86 + 16) = v165;
            *(_OWORD *)v86 = v155;
            *(_DWORD *)(v86 + 24) = v82;
            *(_DWORD *)(v86 + 28) = v84;
            goto LABEL_131;
          }
          if (v78)
            return;
          while (1)
          {
            v137 = a1;
            a1 = (uint64_t)v76;
            v138 = *(_DWORD *)(v137 + 56);
            v139 = *(_DWORD *)(v137 + 24);
            if (v138 > v139)
              break;
            if (v138 >= v139)
            {
              v140 = *(_DWORD *)(v137 + 60);
              if (v140 < *(_DWORD *)(v137 + 28))
                goto LABEL_195;
            }
LABEL_202:
            v76 = (__int128 *)(a1 + 32);
            if ((__int128 *)(a1 + 32) == a2)
              return;
          }
          v140 = *(_DWORD *)(v137 + 60);
LABEL_195:
          v168 = *(_QWORD *)(a1 + 16);
          v158 = *(_OWORD *)a1;
          do
          {
            do
            {
              v141 = v137;
              v142 = *(_OWORD *)(v137 + 16);
              *(_OWORD *)(v137 + 32) = *(_OWORD *)v137;
              *(_OWORD *)(v137 + 48) = v142;
              v137 -= 32;
              v143 = *(_DWORD *)(v141 - 8);
            }
            while (v138 > v143);
          }
          while (v138 >= v143 && v140 < *(_DWORD *)(v141 - 4));
          *(_QWORD *)(v141 + 16) = v168;
          *(_OWORD *)v141 = v158;
          *(_DWORD *)(v141 + 24) = v138;
          *(_DWORD *)(v141 + 28) = v140;
          goto LABEL_202;
        }
        if (!a3)
        {
          if ((__int128 *)i == a2)
            return;
          v91 = (unint64_t)(v11 - 2) >> 1;
          v92 = v91;
          while (1)
          {
            v93 = v92;
            if (v91 < v92)
              goto LABEL_149;
            v94 = (2 * v92) | 1;
            v95 = i + 32 * v94;
            if (2 * v93 + 2 < v11)
            {
              v96 = *(_DWORD *)(v95 + 24);
              v97 = *(_DWORD *)(v95 + 56);
              if (v96 > v97)
              {
                v95 += 32;
LABEL_139:
                v94 = 2 * v93 + 2;
                goto LABEL_142;
              }
              if (v96 >= v97)
              {
                v98 = *(_DWORD *)(i + 32 * v94 + 28) < *(_DWORD *)(v95 + 60);
                v95 += 32 * v98;
                if (v98)
                  goto LABEL_139;
              }
            }
LABEL_142:
            v99 = *(_DWORD *)(v95 + 24);
            v100 = *(_DWORD *)(i + 32 * v93 + 24);
            if (v99 <= v100)
            {
              v101 = i + 32 * v93;
              if (v99 < v100)
              {
                v102 = *(_DWORD *)(v101 + 28);
LABEL_146:
                v166 = *(_QWORD *)(v101 + 16);
                v156 = *(_OWORD *)v101;
                v103 = *(_OWORD *)(v95 + 16);
                *(_OWORD *)v101 = *(_OWORD *)v95;
                *(_OWORD *)(v101 + 16) = v103;
                if (v91 < v94)
                {
LABEL_147:
                  v104 = v95;
LABEL_148:
                  *(_QWORD *)(v104 + 16) = v166;
                  *(_OWORD *)v104 = v156;
                  *(_DWORD *)(v104 + 24) = v100;
                  *(_DWORD *)(v104 + 28) = v102;
                  goto LABEL_149;
                }
                while (2)
                {
                  v105 = 2 * v94;
                  v94 = (2 * v94) | 1;
                  v104 = i + 32 * v94;
                  v106 = v105 + 2;
                  if (v106 < v11)
                  {
                    v107 = *(_DWORD *)(v104 + 24);
                    v108 = *(_DWORD *)(v104 + 56);
                    if (v107 > v108)
                    {
                      v104 += 32;
                      goto LABEL_156;
                    }
                    if (v107 >= v108)
                    {
                      v109 = *(_DWORD *)(i + 32 * v94 + 28) < *(_DWORD *)(v104 + 60);
                      v104 += 32 * v109;
                      if (v109)
LABEL_156:
                        v94 = v106;
                    }
                  }
                  v110 = *(_DWORD *)(v104 + 24);
                  if (v110 > v100 || v110 >= v100 && *(_DWORD *)(v104 + 28) < v102)
                    goto LABEL_147;
                  v111 = *(_OWORD *)(v104 + 16);
                  *(_OWORD *)v95 = *(_OWORD *)v104;
                  *(_OWORD *)(v95 + 16) = v111;
                  v95 = v104;
                  if (v91 < v94)
                    goto LABEL_148;
                  continue;
                }
              }
              v102 = *(_DWORD *)(i + 32 * v93 + 28);
              if (*(_DWORD *)(v95 + 28) >= v102)
                goto LABEL_146;
            }
LABEL_149:
            v92 = v93 - 1;
            if (!v93)
            {
              while (1)
              {
                v112 = 0;
                v157 = *(_OWORD *)i;
                v167 = *(_OWORD *)(i + 16);
                v113 = i;
                do
                {
                  v114 = (_OWORD *)v113;
                  v115 = v112 + 1;
                  v113 += 32 * (v112 + 1);
                  v116 = 2 * v112;
                  v112 = (2 * v112) | 1;
                  v117 = v116 + 2;
                  if (v117 >= v11)
                    goto LABEL_169;
                  v118 = *(_DWORD *)(v113 + 24);
                  v119 = *(_DWORD *)(v113 + 56);
                  if (v118 > v119)
                  {
                    v113 += 32;
LABEL_166:
                    v112 = v117;
                    goto LABEL_169;
                  }
                  if (v118 >= v119)
                  {
                    v120 = HIDWORD(v114[2 * v115 + 1]) < *(_DWORD *)(v113 + 60);
                    v113 += 32 * v120;
                    if (v120)
                      goto LABEL_166;
                  }
LABEL_169:
                  v121 = *(_OWORD *)(v113 + 16);
                  *v114 = *(_OWORD *)v113;
                  v114[1] = v121;
                }
                while (v112 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
                a2 -= 2;
                if ((__int128 *)v113 == a2)
                {
                  *(_OWORD *)v113 = v157;
                  *(_OWORD *)(v113 + 16) = v167;
                }
                else
                {
                  v122 = a2[1];
                  *(_OWORD *)v113 = *a2;
                  *(_OWORD *)(v113 + 16) = v122;
                  *a2 = v157;
                  a2[1] = v167;
                  v123 = v113 - i + 32;
                  if (v123 >= 33)
                  {
                    v124 = ((unint64_t)v123 >> 5) - 2;
                    v125 = v124 >> 1;
                    v126 = i + 32 * (v124 >> 1);
                    v127 = *(_DWORD *)(v126 + 24);
                    v128 = *(_DWORD *)(v113 + 24);
                    if (v127 > v128 || v127 >= v128 && *(_DWORD *)(i + 32 * v125 + 28) < *(_DWORD *)(v113 + 28))
                    {
                      v149 = *(_QWORD *)(v113 + 16);
                      v146 = *(_OWORD *)v113;
                      v129 = *(_DWORD *)(v113 + 24);
                      v130 = *(_DWORD *)(v113 + 28);
                      v131 = *(_OWORD *)(v126 + 16);
                      *(_OWORD *)v113 = *(_OWORD *)v126;
                      *(_OWORD *)(v113 + 16) = v131;
                      if (v124 >= 2)
                      {
                        while (1)
                        {
                          v133 = v125 - 1;
                          v125 = (v125 - 1) >> 1;
                          v132 = i + 32 * v125;
                          v134 = *(_DWORD *)(v132 + 24);
                          if (v134 <= v129 && (v134 < v129 || *(_DWORD *)(i + 32 * v125 + 28) >= v130))
                            break;
                          v135 = *(_OWORD *)(v132 + 16);
                          *(_OWORD *)v126 = *(_OWORD *)v132;
                          *(_OWORD *)(v126 + 16) = v135;
                          v126 = i + 32 * v125;
                          if (v133 < 2)
                            goto LABEL_181;
                        }
                      }
                      v132 = v126;
LABEL_181:
                      *(_QWORD *)(v132 + 16) = v149;
                      *(_OWORD *)v132 = v146;
                      *(_DWORD *)(v132 + 24) = v129;
                      *(_DWORD *)(v132 + 28) = v130;
                    }
                  }
                }
                if (v11-- <= 2)
                  return;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (__int128 *)(i + 32 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 <= 0x1000)
        {
          sub_1C47EA8F8((__int128 *)(a1 + 32 * ((unint64_t)v11 >> 1)), (__int128 *)a1, a2 - 2);
        }
        else
        {
          sub_1C47EA8F8((__int128 *)a1, (__int128 *)(a1 + 32 * ((unint64_t)v11 >> 1)), a2 - 2);
          sub_1C47EA8F8((__int128 *)(a1 + 32), v13 - 2, a2 - 4);
          sub_1C47EA8F8((__int128 *)(a1 + 64), (__int128 *)(a1 + 32 + 32 * v12), a2 - 6);
          sub_1C47EA8F8(v13 - 2, v13, (__int128 *)(a1 + 32 + 32 * v12));
          v150 = *(_OWORD *)a1;
          v159 = *(_OWORD *)(a1 + 16);
          v14 = v13[1];
          *(_OWORD *)a1 = *v13;
          *(_OWORD *)(a1 + 16) = v14;
          *v13 = v150;
          v13[1] = v159;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = *(_DWORD *)(a1 - 8);
          v15 = *(_DWORD *)(a1 + 24);
          if (v16 > v15)
            goto LABEL_14;
          if (v16 >= v15)
          {
            v38 = *(_DWORD *)(a1 + 28);
            if (*(_DWORD *)(a1 - 4) < v38)
              goto LABEL_14;
          }
          else
          {
            v38 = *(_DWORD *)(a1 + 28);
          }
          v148 = *(_QWORD *)(a1 + 16);
          v145 = *(_OWORD *)a1;
          v39 = *((_DWORD *)a2 - 2);
          if (v15 <= v39 && (v15 < v39 || v38 >= *((_DWORD *)a2 - 1)))
          {
            for (i = a1 + 32; i < (unint64_t)a2; i += 32)
            {
              v41 = *(_DWORD *)(i + 24);
              if (v15 > v41 || v15 >= v41 && v38 < *(_DWORD *)(i + 28))
                break;
            }
          }
          else
          {
            v40 = *(_DWORD *)(a1 + 56);
            if (v15 <= v40)
            {
              v42 = (unsigned int *)(a1 + 88);
              do
              {
                if (v15 >= v40 && v38 < *(v42 - 7))
                  break;
                v43 = *v42;
                v42 += 8;
                v40 = v43;
              }
              while (v15 <= v43);
              i = (unint64_t)(v42 - 14);
            }
            else
            {
              i = a1 + 32;
            }
          }
          v44 = a2;
          if (i < (unint64_t)a2)
          {
            for (j = (unsigned int *)a2 - 1; v15 > v39 || v15 >= v39 && v38 < *j; j -= 8)
              v39 = *(j - 9);
            v44 = (__int128 *)(j - 7);
          }
          while (i < (unint64_t)v44)
          {
            v152 = *(_OWORD *)i;
            v161 = *(_OWORD *)(i + 16);
            v46 = v44[1];
            *(_OWORD *)i = *v44;
            *(_OWORD *)(i + 16) = v46;
            *v44 = v152;
            v44[1] = v161;
            v47 = *(_DWORD *)(i + 56);
            if (v15 <= v47)
            {
              v48 = (unsigned int *)(i + 88);
              do
              {
                if (v15 >= v47 && v38 < *(v48 - 7))
                  break;
                v49 = *v48;
                v48 += 8;
                v47 = v49;
              }
              while (v15 <= v49);
              i = (unint64_t)(v48 - 14);
            }
            else
            {
              i += 32;
            }
            do
            {
              do
              {
                v44 -= 2;
                v50 = *((_DWORD *)v44 + 6);
              }
              while (v15 > v50);
            }
            while (v15 >= v50 && v38 < *((_DWORD *)v44 + 7));
          }
          v51 = (__int128 *)(i - 32);
          if (i - 32 != a1)
          {
            v52 = *(_OWORD *)(i - 16);
            *(_OWORD *)a1 = *v51;
            *(_OWORD *)(a1 + 16) = v52;
          }
          a4 = 0;
          *(_QWORD *)(i - 16) = v148;
          *v51 = v145;
          *(_DWORD *)(i - 8) = v15;
          *(_DWORD *)(i - 4) = v38;
          continue;
        }
        v15 = *(_DWORD *)(a1 + 24);
LABEL_14:
        v17 = 0;
        v147 = *(_QWORD *)(a1 + 16);
        v144 = *(_OWORD *)a1;
        v18 = *(_DWORD *)(a1 + 28);
        while (1)
        {
          v19 = *(_DWORD *)(a1 + v17 + 56);
          if (v19 <= v15 && (v19 < v15 || *(_DWORD *)(a1 + v17 + 60) >= v18))
            break;
          v17 += 32;
        }
        v20 = a1 + v17 + 32;
        if (v17)
        {
          v21 = *((_DWORD *)a2 - 2);
          v22 = (_DWORD *)a2 - 10;
          v23 = a2 - 2;
          if (v21 <= v15)
          {
            do
            {
              if (v21 >= v15 && v22[9] < v18)
                break;
              v24 = *v22;
              v22 -= 8;
              v21 = v24;
            }
            while (v24 <= v15);
LABEL_24:
            v23 = (__int128 *)(v22 + 2);
          }
        }
        else
        {
          v23 = a2;
          if (v20 < (unint64_t)a2)
          {
            v25 = *((_DWORD *)a2 - 2);
            v23 = a2 - 2;
            if (v25 <= v15)
            {
              v22 = (_DWORD *)a2 - 10;
              v23 = a2 - 2;
              while (1)
              {
                v35 = v22 + 2;
                if (v25 >= v15)
                {
                  if (v22[9] < v18 || v20 >= (unint64_t)v35)
                    goto LABEL_24;
                }
                else if (v20 >= (unint64_t)v35)
                {
                  break;
                }
                v23 -= 2;
                v37 = *v22;
                v22 -= 8;
                v25 = v37;
                if (v37 > v15)
                  goto LABEL_24;
              }
            }
          }
        }
        i = v20;
        if (v20 < (unint64_t)v23)
        {
          v26 = v23;
          do
          {
            v151 = *(_OWORD *)i;
            v160 = *(_OWORD *)(i + 16);
            v27 = v26[1];
            *(_OWORD *)i = *v26;
            *(_OWORD *)(i + 16) = v27;
            *v26 = v151;
            v26[1] = v160;
            do
            {
              do
              {
                i += 32;
                v28 = *(_DWORD *)(i + 24);
              }
              while (v28 > v15);
            }
            while (v28 >= v15 && *(_DWORD *)(i + 28) < v18);
            v29 = *((_DWORD *)v26 - 2);
            if (v29 <= v15)
            {
              v30 = (_DWORD *)v26 - 10;
              do
              {
                if (v29 >= v15 && v30[9] < v18)
                  break;
                v31 = *v30;
                v30 -= 8;
                v29 = v31;
              }
              while (v31 <= v15);
              v26 = (__int128 *)(v30 + 2);
            }
            else
            {
              v26 -= 2;
            }
          }
          while (i < (unint64_t)v26);
        }
        v32 = (__int128 *)(i - 32);
        if (i - 32 != a1)
        {
          v33 = *(_OWORD *)(i - 16);
          *(_OWORD *)a1 = *v32;
          *(_OWORD *)(a1 + 16) = v33;
        }
        *(_QWORD *)(i - 16) = v147;
        *v32 = v144;
        *(_DWORD *)(i - 8) = v15;
        *(_DWORD *)(i - 4) = v18;
        if (v20 < (unint64_t)v23)
        {
LABEL_46:
          sub_1C48E3304(a1, i - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = sub_1C48E3E2C(a1, i - 32);
        if (!sub_1C48E3E2C(i, (uint64_t)a2))
        {
          if (v34)
            continue;
          goto LABEL_46;
        }
        a2 = (__int128 *)(i - 32);
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((_DWORD *)a2 - 3) < *(_DWORD *)(v8 + 4))
        {
          v96 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(a2 - 1);
          *(a2 - 1) = v96;
        }
        return;
      case 3:
        sub_1C4DB9C00((__int128 *)v8, (__int128 *)(v8 + 16), a2 - 1);
        return;
      case 4:
        sub_1C4DB9EB4(v8, v8 + 16, v8 + 32, (uint64_t)(a2 - 1));
        return;
      case 5:
        v39 = (__int128 *)(v8 + 16);
        v40 = (__int128 *)(v8 + 32);
        v41 = (__int128 *)(v8 + 48);
        sub_1C4DB9EB4(v8, v8 + 16, v8 + 32, v8 + 48);
        if (*((_DWORD *)a2 - 3) < *(_DWORD *)(v8 + 52))
        {
          v42 = *v41;
          *v41 = *(a2 - 1);
          *(a2 - 1) = v42;
          if (*(_DWORD *)(v8 + 52) < *(_DWORD *)(v8 + 36))
          {
            v43 = *v40;
            *v40 = *v41;
            *v41 = v43;
            if (*(_DWORD *)(v8 + 36) < *(_DWORD *)(v8 + 20))
            {
              v44 = *v39;
              *v39 = *v40;
              *v40 = v44;
              if (*(_DWORD *)(v8 + 20) < *(_DWORD *)(v8 + 4))
              {
                v97 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v39;
                *v39 = v97;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v45 = (__int128 *)(v8 + 16);
          v47 = (__int128 *)v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = (_DWORD *)v8;
              do
              {
                v50 = v45;
                v51 = v49[5];
                if (v51 < v49[1])
                {
                  v52 = *(_DWORD *)v50;
                  v53 = *((_QWORD *)v49 + 3);
                  v54 = v48;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v54 + 16) = *(_OWORD *)(v8 + v54);
                    if (!v54)
                      break;
                    v55 = *(_DWORD *)(v8 + v54 - 12);
                    v54 -= 16;
                    if (v51 >= v55)
                    {
                      v56 = v8 + v54 + 16;
                      goto LABEL_79;
                    }
                  }
                  v56 = v8;
LABEL_79:
                  *(_DWORD *)v56 = v52;
                  *(_DWORD *)(v56 + 4) = v51;
                  *(_QWORD *)(v56 + 8) = v53;
                }
                v45 = v50 + 1;
                v48 += 16;
                v49 = v50;
              }
              while (v50 + 1 != a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v87 = v45;
              v88 = *(_DWORD *)(a1 + 20);
              if (v88 < *(_DWORD *)(a1 + 4))
              {
                v89 = *(_DWORD *)v45;
                v90 = *(_QWORD *)(a1 + 24);
                v91 = v87;
                do
                {
                  *v91 = *(v91 - 1);
                  v92 = *((_DWORD *)v91-- - 7);
                }
                while (v88 < v92);
                *(_DWORD *)v91 = v89;
                *((_DWORD *)v91 + 1) = v88;
                *((_QWORD *)v91 + 1) = v90;
              }
              v45 = v87 + 1;
              a1 = (uint64_t)v87;
            }
            while (v87 + 1 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 != a2)
          {
            v57 = (unint64_t)(v10 - 2) >> 1;
            v58 = v57;
            do
            {
              v59 = v58;
              if (v57 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = v8 + 16 * v60;
                if (2 * v59 + 2 < v10)
                {
                  v62 = *(_DWORD *)(v61 + 4);
                  v63 = *(_DWORD *)(v61 + 20);
                  v61 += 16 * (v62 < v63);
                  if (v62 < v63)
                    v60 = 2 * v59 + 2;
                }
                v64 = *(_DWORD *)(v8 + 16 * v59 + 4);
                if (*(_DWORD *)(v61 + 4) >= v64)
                {
                  v65 = v8 + 16 * v59;
                  v66 = *(_DWORD *)v65;
                  v67 = *(_QWORD *)(v65 + 8);
                  do
                  {
                    v68 = (_OWORD *)v65;
                    v65 = v61;
                    *v68 = *(_OWORD *)v61;
                    if (v57 < v60)
                      break;
                    v69 = (2 * v60) | 1;
                    v61 = v8 + 16 * v69;
                    v70 = 2 * v60 + 2;
                    if (v70 < v10)
                    {
                      v71 = *(_DWORD *)(v61 + 4);
                      v72 = *(_DWORD *)(v61 + 20);
                      v61 += 16 * (v71 < v72);
                      if (v71 < v72)
                        v69 = v70;
                    }
                    v60 = v69;
                  }
                  while (*(_DWORD *)(v61 + 4) >= v64);
                  *(_DWORD *)v65 = v66;
                  *(_DWORD *)(v65 + 4) = v64;
                  *(_QWORD *)(v65 + 8) = v67;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            do
            {
              v73 = 0;
              v98 = *(_OWORD *)v8;
              v74 = (_OWORD *)v8;
              do
              {
                v75 = &v74[v73 + 1];
                v76 = (2 * v73) | 1;
                v77 = 2 * v73 + 2;
                if (v77 < v10)
                {
                  v78 = *((_DWORD *)v75 + 1);
                  v79 = *((_DWORD *)v75 + 5);
                  v75 += v78 < v79;
                  if (v78 < v79)
                    v76 = v77;
                }
                *v74 = *v75;
                v74 = v75;
                v73 = v76;
              }
              while (v76 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v98;
              }
              else
              {
                *v75 = *a2;
                *a2 = v98;
                v80 = (uint64_t)v75 - v8 + 16;
                if (v80 >= 17)
                {
                  v81 = (((unint64_t)v80 >> 4) - 2) >> 1;
                  v82 = *((_DWORD *)v75 + 1);
                  if (*(_DWORD *)(v8 + 16 * v81 + 4) < v82)
                  {
                    v83 = *(_DWORD *)v75;
                    v84 = *((_QWORD *)v75 + 1);
                    do
                    {
                      v85 = v75;
                      v75 = (__int128 *)(v8 + 16 * v81);
                      *v85 = *v75;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                    }
                    while (*(_DWORD *)(v8 + 16 * v81 + 4) < v82);
                    *(_DWORD *)v75 = v83;
                    *((_DWORD *)v75 + 1) = v82;
                    *((_QWORD *)v75 + 1) = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(v8 + 16 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          sub_1C4DB9C00((__int128 *)(a1 + 16 * ((unint64_t)v10 >> 1)), (__int128 *)a1, a2 - 1);
        }
        else
        {
          sub_1C4DB9C00((__int128 *)a1, (__int128 *)(a1 + 16 * ((unint64_t)v10 >> 1)), a2 - 1);
          sub_1C4DB9C00((__int128 *)(a1 + 16), v12 - 1, a2 - 2);
          sub_1C4DB9C00((__int128 *)(a1 + 32), (__int128 *)(a1 + 16 + 16 * v11), a2 - 3);
          sub_1C4DB9C00(v12 - 1, v12, (__int128 *)(a1 + 16 + 16 * v11));
          v93 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v93;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v13 = *(_DWORD *)(a1 + 4);
          if (*(_DWORD *)(a1 - 12) < v13)
            goto LABEL_11;
          if (v13 >= *((_DWORD *)a2 - 3))
          {
            v30 = a1 + 16;
            do
            {
              v8 = v30;
              if (v30 >= (unint64_t)a2)
                break;
              v31 = *(_DWORD *)(v30 + 4);
              v30 += 16;
            }
            while (v13 >= v31);
          }
          else
          {
            v28 = a1;
            do
            {
              v8 = v28 + 16;
              v29 = *(_DWORD *)(v28 + 20);
              v28 += 16;
            }
            while (v13 >= v29);
          }
          v32 = a2;
          if (v8 < (unint64_t)a2)
          {
            v33 = a2;
            do
            {
              v32 = v33 - 1;
              v34 = *((_DWORD *)v33-- - 3);
            }
            while (v13 < v34);
          }
          v35 = *(_DWORD *)a1;
          v36 = *(_QWORD *)(a1 + 8);
          while (v8 < (unint64_t)v32)
          {
            v95 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v32;
            *v32 = v95;
            do
            {
              v37 = *(_DWORD *)(v8 + 20);
              v8 += 16;
            }
            while (v13 >= v37);
            do
              v38 = *((_DWORD *)v32-- - 3);
            while (v13 < v38);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v35;
          *(_DWORD *)(v8 - 12) = v13;
          *(_QWORD *)(v8 - 8) = v36;
          continue;
        }
        v13 = *(_DWORD *)(a1 + 4);
LABEL_11:
        v14 = 0;
        v15 = *(_DWORD *)a1;
        v16 = *(_QWORD *)(a1 + 8);
        do
        {
          v17 = *(_DWORD *)(a1 + v14 + 20);
          v14 += 16;
        }
        while (v17 < v13);
        v18 = a1 + v14;
        v19 = a2;
        if (v14 == 16)
        {
          v22 = a2;
          while (v18 < (unint64_t)v22)
          {
            v20 = v22 - 1;
            v23 = *((_DWORD *)v22-- - 3);
            if (v23 < v13)
              goto LABEL_21;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 1;
            v21 = *((_DWORD *)v19-- - 3);
          }
          while (v21 >= v13);
        }
LABEL_21:
        v8 = v18;
        if (v18 < (unint64_t)v20)
        {
          v24 = v20;
          do
          {
            v94 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v24;
            *v24 = v94;
            do
            {
              v25 = *(_DWORD *)(v8 + 20);
              v8 += 16;
            }
            while (v25 < v13);
            do
              v26 = *((_DWORD *)v24-- - 3);
            while (v26 >= v13);
          }
          while (v8 < (unint64_t)v24);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_DWORD *)(v8 - 16) = v15;
        *(_DWORD *)(v8 - 12) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (unint64_t)v20)
        {
LABEL_32:
          sub_1C4DB94A4(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C4DB9CA4(a1, v8 - 16);
        if (!sub_1C4DB9CA4(v8, (uint64_t)a2))
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = (__int128 *)(v8 - 16);
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t *)(a2 - 1);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v58 = a2 - 1;
        v59 = *((_QWORD *)a2 - 2);
        if (v59 < *(_QWORD *)v9
          || (v59 == *(_QWORD *)v9 ? (v60 = *((_QWORD *)a2 - 1) < *(_QWORD *)(v9 + 8)) : (v60 = 0), v60))
        {
          v131 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v58;
          *v58 = v131;
        }
        return;
      case 3:
        sub_1C4DCEAB4((__int128 *)v9, (unint64_t *)(v9 + 16), a2 - 1);
        return;
      case 4:
        sub_1C4DCEE94(v9, (unint64_t *)(v9 + 16), v9 + 32, (uint64_t)(a2 - 1));
        return;
      case 5:
        v61 = (__int128 *)(v9 + 16);
        v62 = (__int128 *)(v9 + 32);
        v63 = (__int128 *)(v9 + 48);
        sub_1C4DCEE94(v9, (unint64_t *)(v9 + 16), v9 + 32, v9 + 48);
        v64 = a2 - 1;
        v65 = *((_QWORD *)a2 - 2);
        v66 = *(_QWORD *)(v9 + 48);
        if (v65 < v66 || v65 == v66 && *((_QWORD *)a2 - 1) < *(_QWORD *)(v9 + 56))
        {
          v67 = *v63;
          *v63 = *v64;
          *v64 = v67;
          if (*(_QWORD *)v63 < *(_QWORD *)v62
            || (*(_QWORD *)v63 == *(_QWORD *)v62 ? (v68 = *(_QWORD *)(v9 + 56) < *(_QWORD *)(v9 + 40)) : (v68 = 0), v68))
          {
            v69 = *v62;
            *v62 = *v63;
            *v63 = v69;
            if (*(_QWORD *)v62 < *(_QWORD *)v61
              || *(_QWORD *)v62 == *(_QWORD *)v61 && *(_QWORD *)(v9 + 40) < *(_QWORD *)(v9 + 24))
            {
              v70 = *v61;
              *v61 = *v62;
              *v62 = v70;
              v71 = *(_QWORD *)(v9 + 16);
              if (v71 < *(_QWORD *)v9 || v71 == *(_QWORD *)v9 && *(_QWORD *)(v9 + 24) < *(_QWORD *)(v9 + 8))
              {
                v132 = *(_OWORD *)v9;
                *(_OWORD *)v9 = *v61;
                *v61 = v132;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 383)
        {
          v72 = (__int128 *)(v9 + 16);
          v74 = (__int128 *)v9 == a2 || v72 == a2;
          if ((a4 & 1) != 0)
          {
            if (v74)
              return;
            v75 = 0;
            v76 = (unint64_t *)v9;
            while (1)
            {
              v77 = v72;
              v78 = v76[2];
              if (v78 < *v76)
                break;
              v79 = v76[3];
              if (v78 == *v76 && v79 < (uint64_t)v76[1])
                goto LABEL_147;
LABEL_158:
              v72 = v77 + 1;
              v75 += 16;
              v76 = (unint64_t *)v77;
              if (v77 + 1 == a2)
                return;
            }
            v79 = v76[3];
LABEL_147:
            *v77 = *(_OWORD *)v76;
            v81 = (_QWORD *)v9;
            if (v76 != (unint64_t *)v9)
            {
              v82 = v75;
              do
              {
                v83 = (_OWORD *)(v9 + v82);
                v84 = *(_QWORD *)(v9 + v82 - 16);
                if (v78 >= v84 && (v78 != v84 || v79 >= *((_QWORD *)v83 - 1)))
                {
                  v81 = (_QWORD *)(v9 + v82);
                  goto LABEL_157;
                }
                *v83 = *(_OWORD *)(v9 + v82 - 16);
                v82 -= 16;
              }
              while (v82);
              v81 = (_QWORD *)v9;
            }
LABEL_157:
            *v81 = v78;
            v81[1] = v79;
            goto LABEL_158;
          }
          if (v74)
            return;
          while (1)
          {
            v120 = (uint64_t)v72;
            v121 = *(_QWORD *)(a1 + 16);
            if (v121 < *(_QWORD *)a1)
              break;
            v122 = *(_QWORD *)(a1 + 24);
            if (v121 == *(_QWORD *)a1 && v122 < *(_QWORD *)(a1 + 8))
              goto LABEL_235;
LABEL_241:
            v72 = (__int128 *)(v120 + 16);
            a1 = v120;
            if ((__int128 *)(v120 + 16) == a2)
              return;
          }
          v122 = *(_QWORD *)(a1 + 24);
          do
          {
            do
            {
LABEL_235:
              v124 = (_QWORD *)a1;
              *(_OWORD *)(a1 + 16) = *(_OWORD *)a1;
              v125 = *(_QWORD *)(a1 - 16);
              a1 -= 16;
              v126 = v121 == v125;
            }
            while (v121 < v125);
          }
          while (v126 && v122 < *(v124 - 1));
          *v124 = v121;
          v124[1] = v122;
          goto LABEL_241;
        }
        if (!a3)
        {
          if ((__int128 *)v9 != a2)
          {
            v86 = (unint64_t)(v11 - 2) >> 1;
            v87 = v86;
            do
            {
              v88 = v87;
              if (v86 >= v87)
              {
                v89 = (2 * v87) | 1;
                v90 = (unint64_t *)(v9 + 16 * v89);
                if (2 * v88 + 2 >= v11)
                {
                  v91 = *v90;
                }
                else
                {
                  v91 = v90[2];
                  if (*v90 < v91 || ((uint64_t)v90[1] < (uint64_t)v90[3] ? (v92 = *v90 == v91) : (v92 = 0), v92))
                  {
                    v90 += 2;
                    v89 = 2 * v88 + 2;
                  }
                  else
                  {
                    v91 = *v90;
                  }
                }
                v93 = (unint64_t *)(v9 + 16 * v88);
                v94 = *v93;
                if (v91 >= *v93)
                {
                  v95 = v93[1];
                  if (v91 != v94 || (uint64_t)v90[1] >= v95)
                  {
                    do
                    {
                      v97 = v93;
                      v93 = v90;
                      *(_OWORD *)v97 = *(_OWORD *)v90;
                      if (v86 < v89)
                        break;
                      v98 = 2 * v89;
                      v89 = (2 * v89) | 1;
                      v90 = (unint64_t *)(v9 + 16 * v89);
                      v99 = v98 + 2;
                      if (v98 + 2 >= v11)
                      {
                        v100 = *v90;
                      }
                      else
                      {
                        v100 = v90[2];
                        if (*v90 < v100
                          || ((uint64_t)v90[1] < (uint64_t)v90[3] ? (v101 = *v90 == v100) : (v101 = 0), v101))
                        {
                          v90 += 2;
                          v89 = v99;
                        }
                        else
                        {
                          v100 = *v90;
                        }
                      }
                      if (v100 < v94)
                        break;
                    }
                    while (v100 != v94 || (uint64_t)v90[1] >= v95);
                    *v93 = v94;
                    v93[1] = v95;
                  }
                }
              }
              v87 = v88 - 1;
            }
            while (v88);
            do
            {
              v103 = 0;
              v133 = *(_OWORD *)v9;
              v104 = (__int128 *)v9;
              do
              {
                v105 = v104;
                v104 += v103 + 1;
                v106 = 2 * v103;
                v103 = (2 * v103) | 1;
                v107 = v106 + 2;
                if (v107 < v11)
                {
                  v108 = *((_QWORD *)v104 + 2);
                  if (*(_QWORD *)v104 < v108
                    || (*((_QWORD *)v104 + 1) < *((_QWORD *)v104 + 3) ? (v109 = *(_QWORD *)v104 == v108) : (v109 = 0),
                        v109))
                  {
                    ++v104;
                    v103 = v107;
                  }
                }
                *v105 = *v104;
              }
              while (v103 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
              if (v104 == --a2)
              {
                *v104 = v133;
              }
              else
              {
                *v104 = *a2;
                *a2 = v133;
                v110 = (uint64_t)v104 - v9 + 16;
                if (v110 >= 17)
                {
                  v111 = ((unint64_t)v110 >> 4) - 2;
                  v112 = v111 >> 1;
                  v113 = (unint64_t *)(v9 + 16 * (v111 >> 1));
                  v114 = *(_QWORD *)v104;
                  v115 = *((_QWORD *)v104 + 1);
                  if (*v113 < *(_QWORD *)v104
                    || (*v113 == *(_QWORD *)v104 ? (v116 = (uint64_t)v113[1] < v115) : (v116 = 0), v116))
                  {
                    *v104 = *(_OWORD *)v113;
                    if (v111 >= 2)
                    {
                      while (1)
                      {
                        v118 = v112 - 1;
                        v112 = (v112 - 1) >> 1;
                        v117 = (unint64_t *)(v9 + 16 * v112);
                        if (*v117 >= v114 && (*v117 != v114 || (uint64_t)v117[1] >= v115))
                          break;
                        *(_OWORD *)v113 = *(_OWORD *)v117;
                        v113 = (unint64_t *)(v9 + 16 * v112);
                        if (v118 < 2)
                          goto LABEL_222;
                      }
                    }
                    v117 = v113;
LABEL_222:
                    *v117 = v114;
                    v117[1] = v115;
                  }
                }
              }
              v21 = v11-- <= 2;
            }
            while (!v21);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (unint64_t *)(v9 + 16 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0x801)
        {
          sub_1C4DCEAB4((__int128 *)(a1 + 16 * ((unint64_t)v11 >> 1)), (unint64_t *)a1, a2 - 1);
        }
        else
        {
          sub_1C4DCEAB4((__int128 *)a1, (unint64_t *)(a1 + 16 * ((unint64_t)v11 >> 1)), a2 - 1);
          sub_1C4DCEAB4((__int128 *)(a1 + 16), v13 - 2, a2 - 2);
          sub_1C4DCEAB4((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v12), a2 - 3);
          sub_1C4DCEAB4((__int128 *)v13 - 1, v13, (__int128 *)(a1 + 16 + 16 * v12));
          v128 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v128;
        }
        --a3;
        v14 = *(_QWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v16 = *(_QWORD *)(a1 - 16);
          v15 = *(_QWORD *)a1;
          if (v16 < v14)
            goto LABEL_14;
          v17 = *(_QWORD *)(a1 + 8);
          if (v16 == v14 && *(_QWORD *)(a1 - 8) < v17)
          {
            v15 = *(_QWORD *)(a1 - 16);
            goto LABEL_14;
          }
          v40 = *v8;
          if (v14 < *v8 || v14 == *v8 && v17 < *((_QWORD *)a2 - 1))
          {
            v41 = (unint64_t *)(a1 + 16);
            do
            {
              v9 = (unint64_t)v41;
              v42 = *v41;
              if (v14 < *v41)
                break;
              v43 = v41[1];
              v41 += 2;
            }
            while (v14 != v42 || v17 >= v43);
          }
          else
          {
            v54 = (__int128 *)(a1 + 16);
            do
            {
              v9 = (unint64_t)v54;
              if (v54 >= a2)
                break;
              v55 = *(_QWORD *)v54;
              if (v14 < *(_QWORD *)v54)
                break;
              v56 = *((_QWORD *)v54++ + 1);
            }
            while (v14 != v55 || v17 >= v56);
          }
          i = a2;
          if (v9 < (unint64_t)a2)
          {
            for (i = a2 - 1; v14 < v40 || v14 == v40 && v17 < *((_QWORD *)i + 1); --i)
            {
              v46 = *((_QWORD *)i - 2);
              v40 = v46;
            }
          }
          while (v9 < (unint64_t)i)
          {
            v130 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *i;
            *i = v130;
            v47 = (unint64_t *)(v9 + 16);
            do
            {
              v9 = (unint64_t)v47;
              v48 = *v47;
              if (v14 < *v47)
                break;
              v49 = v47[1];
              v47 += 2;
            }
            while (v14 != v48 || v17 >= v49);
            do
            {
              do
              {
                v51 = *((_QWORD *)i-- - 2);
                v52 = v14 == v51;
              }
              while (v14 < v51);
            }
            while (v52 && v17 < *((_QWORD *)i + 1));
          }
          if (v9 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v9 - 16);
          a4 = 0;
          *(_QWORD *)(v9 - 16) = v14;
          *(_QWORD *)(v9 - 8) = v17;
          continue;
        }
        v15 = *(_QWORD *)a1;
LABEL_14:
        v18 = 0;
        v19 = *(_QWORD *)(a1 + 8);
        while (1)
        {
          v20 = *(_QWORD *)(a1 + v18 + 16);
          if (v15 <= v20)
          {
            v21 = v15 == v20 && *(_QWORD *)(a1 + v18 + 24) < v19;
            if (!v21)
              break;
          }
          v18 += 16;
        }
        v22 = a1 + v18 + 16;
        v23 = (unint64_t *)(a2 - 1);
        if (v18)
        {
          do
          {
            v24 = v23;
            v25 = *v23;
            if (v15 > *v23)
              break;
            v26 = v23[1];
            v23 -= 2;
          }
          while (v15 != v25 || v26 >= v19);
        }
        else
        {
          v28 = a2 - 1;
          while (1)
          {
            v24 = (unint64_t *)v28;
            v29 = (unint64_t *)(v28 + 1);
            if (v22 >= (unint64_t)v29)
              break;
            if (v15 <= *v24)
            {
              v28 = (__int128 *)(v24 - 2);
              if (v15 != *v24 || (uint64_t)v24[1] >= v19)
                continue;
            }
            goto LABEL_40;
          }
          v24 = v29;
        }
LABEL_40:
        v9 = v22;
        if (v22 < (unint64_t)v24)
        {
          v31 = (__int128 *)v24;
          do
          {
            v129 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v31;
            *v31 = v129;
            do
            {
              do
              {
                v32 = *(_QWORD *)(v9 + 16);
                v9 += 16;
                v33 = v15 == v32;
              }
              while (v15 > v32);
            }
            while (v33 && *(_QWORD *)(v9 + 8) < v19);
            v35 = (unint64_t *)(v31 - 1);
            do
            {
              v31 = (__int128 *)v35;
              v36 = *v35;
              if (v15 > *v35)
                break;
              v37 = v35[1];
              v35 -= 2;
            }
            while (v15 != v36 || v37 >= v19);
          }
          while (v9 < (unint64_t)v31);
        }
        if (v9 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v9 - 16);
        *(_QWORD *)(v9 - 16) = v14;
        *(_QWORD *)(v9 - 8) = v19;
        if (v22 < (unint64_t)v24)
        {
LABEL_61:
          sub_1C4DCE144(a1, v9 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v39 = sub_1C4DCEBC0(a1, (__int128 *)(v9 - 16));
        if (!sub_1C4DCEBC0(v9, a2))
        {
          if (v39)
            continue;
          goto LABEL_61;
        }
        a2 = (__int128 *)(v9 - 16);
        if (!v39)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v27 = *(_QWORD *)a3;
        v28 = *(a2 - 2);
        v29 = *(a2 - 1);
        v30 = a2 - 2;
        *(_QWORD *)&v37 = v28;
        *((_QWORD *)&v37 + 1) = v29 & 0xFFFFFFFFFFFFFFF8;
        v31 = sub_1C4E2683C(v27, (uint64_t *)&v37);
        v32 = *(_QWORD *)a3;
        v33 = v9[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v37 = *v9;
        *((_QWORD *)&v37 + 1) = v33;
        v34 = sub_1C4E2683C(v32, (uint64_t *)&v37);
        v35 = *((_DWORD *)v31 + 4);
        v36 = *((_DWORD *)v34 + 4);
        if (!**(_BYTE **)(a3 + 8))
        {
          if (v35 <= v36)
            return;
          goto LABEL_25;
        }
        if (v35 < v36)
        {
LABEL_25:
          v37 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v30;
          *(_OWORD *)v30 = v37;
          return;
        }
        return;
      case 3uLL:
        sub_1C4E27160(v9, v9 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        sub_1C4E27BC4(v9, v9 + 2, v9 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        sub_1C4E27D48(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2, a3);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              sub_1C4E27F40(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_1C4E27160(&v9[2 * (v13 >> 1)], v9, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1C4E27160(v9, &v9[2 * (v13 >> 1)], a2 - 2, a3);
            sub_1C4E27160(v9 + 2, v15 - 2, a2 - 4, a3);
            sub_1C4E27160(v9 + 4, &v9[2 * v14 + 2], a2 - 6, a3);
            sub_1C4E27160(v15 - 2, v15, &v9[2 * v14 + 2], a3);
            v37 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v37;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          v16 = *(_QWORD *)a3;
          v17 = *(v9 - 1) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v37 = *(v9 - 2);
          *((_QWORD *)&v37 + 1) = v17;
          v18 = sub_1C4E2683C(v16, (uint64_t *)&v37);
          v19 = *(_QWORD *)a3;
          v20 = v9[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v37 = *v9;
          *((_QWORD *)&v37 + 1) = v20;
          v21 = sub_1C4E2683C(v19, (uint64_t *)&v37);
          v22 = *((_DWORD *)v18 + 4);
          v23 = *((_DWORD *)v21 + 4);
          if (**(_BYTE **)(a3 + 8))
          {
            if (v22 >= v23)
            {
LABEL_17:
              v9 = sub_1C4E273B4(v9, a2, a3);
              goto LABEL_19;
            }
          }
          else if (v22 <= v23)
          {
            goto LABEL_17;
          }
LABEL_12:
          v24 = sub_1C4E27668(v9, a2, a3);
          if ((v25 & 1) == 0)
            goto LABEL_18;
          v26 = sub_1C4E27910(v9, v24, a3);
          v9 = v24 + 2;
          if (!sub_1C4E27910(v24 + 2, a2, a3))
          {
            v10 = v11 + 1;
            if (v26)
              continue;
LABEL_18:
            sub_1C4E26B48(a1, v24, a3, -v11, a5 & 1);
            v9 = v24 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v24;
          if (v26)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
          sub_1C4E26E90(v9, a2, a3);
        else
          sub_1C4E27024(v9, a2, a3);
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_1C4E4FA7C(a3, (uint64_t)(a2 - 1), (uint64_t)v10))
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return;
      case 3uLL:
        sub_1C4E4FCDC(v10, v10 + 1, a2 - 1, a3);
        return;
      case 4uLL:
        sub_1C4E50450(v10, v10 + 1, v10 + 2, a2 - 1, a3);
        return;
      case 5uLL:
        sub_1C4E50508(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
        return;
      default:
        if (v13 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_1C4E4FAE4((uint64_t)v10, a2, a3);
          else
            sub_1C4E4FC0C((uint64_t)v10, (const void **)a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x801)
          {
            sub_1C4E4FCDC(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1C4E4FCDC(v10, &v10[v14 >> 1], a2 - 1, a3);
            sub_1C4E4FCDC(v10 + 1, v16 - 1, a2 - 2, a3);
            sub_1C4E4FCDC(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            sub_1C4E4FCDC(v16 - 1, v16, &v10[v15 + 1], a3);
            v20 = *v10;
            *v10 = *v16;
            *v16 = v20;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!sub_1C4E4FA7C(a3, (uint64_t)(v10 - 1), (uint64_t)v10))
          {
            v10 = (__int128 *)sub_1C4E4FDD4((uint64_t)v10, (const void **)a2);
            goto LABEL_16;
          }
LABEL_11:
          v17 = (__int128 *)sub_1C4E5000C((uint64_t)v10, (const void **)a2);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = sub_1C4E50238(v10, v17, a3);
          v10 = v17 + 1;
          if (!sub_1C4E50238(v17 + 1, a2, a3))
          {
            v11 = v12 + 1;
            if (v19)
              continue;
LABEL_14:
            sub_1C4E4F728(a1, v17, a3, -v12, a5 & 1);
            v10 = v17 + 1;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          sub_1C4E505E8((void **)v10, (void **)a2, (void **)a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v33 = *(a2 - 2);
        v32 = (__int128 *)(a2 - 2);
        if (v33 < *(_QWORD *)v8)
        {
          v78 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v32;
          *v32 = v78;
        }
        return;
      case 3:
        sub_1C4ECC138((__int128 *)v8, (unint64_t *)(v8 + 16), a2 - 2);
        return;
      case 4:
        sub_1C4ECC354((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5:
        sub_1C4ECC3F0((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(v8 + 32), (__n128 *)(v8 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v34 = (unint64_t *)(v8 + 16);
          v36 = (unint64_t *)v8 == a2 || v34 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v36)
            {
              v37 = 0;
              v38 = (unint64_t *)v8;
              do
              {
                v39 = v34;
                v40 = v38[2];
                if (v40 < *v38)
                {
                  v41 = v38[3];
                  v42 = v37;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v42 + 16) = *(_OWORD *)(v8 + v42);
                    if (!v42)
                      break;
                    v43 = *(_QWORD *)(v8 + v42 - 16);
                    v42 -= 16;
                    if (v40 >= v43)
                    {
                      v44 = (_QWORD *)(v8 + v42 + 16);
                      goto LABEL_72;
                    }
                  }
                  v44 = (_QWORD *)v8;
LABEL_72:
                  *v44 = v40;
                  v44[1] = v41;
                }
                v34 = v39 + 2;
                v37 += 16;
                v38 = v39;
              }
              while (v39 + 2 != a2);
            }
          }
          else if (!v36)
          {
            do
            {
              v70 = (uint64_t)v34;
              v71 = *(_QWORD *)(a1 + 16);
              if (v71 < *(_QWORD *)a1)
              {
                v72 = *(_QWORD *)(a1 + 24);
                v73 = v70;
                do
                {
                  *(_OWORD *)v73 = *(_OWORD *)(v73 - 16);
                  v74 = *(_QWORD *)(v73 - 32);
                  v73 -= 16;
                }
                while (v71 < v74);
                *(_QWORD *)v73 = v71;
                *(_QWORD *)(v73 + 8) = v72;
              }
              v34 = (unint64_t *)(v70 + 16);
              a1 = v70;
            }
            while ((unint64_t *)(v70 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unint64_t *)v8 != a2)
          {
            v45 = (unint64_t)(v10 - 2) >> 1;
            v46 = v45;
            do
            {
              v47 = v46;
              if (v45 >= v46)
              {
                v48 = (2 * v46) | 1;
                v49 = (unint64_t *)(v8 + 16 * v48);
                if (2 * v47 + 2 >= v10)
                {
                  v50 = *v49;
                }
                else
                {
                  v50 = v49[2];
                  v51 = *v49 >= v50;
                  if (*v49 < v50)
                    v49 += 2;
                  else
                    v50 = *v49;
                  if (!v51)
                    v48 = 2 * v47 + 2;
                }
                v52 = (unint64_t *)(v8 + 16 * v47);
                v53 = *v52;
                if (v50 >= *v52)
                {
                  v54 = v52[1];
                  do
                  {
                    v55 = v52;
                    v52 = v49;
                    *(_OWORD *)v55 = *(_OWORD *)v49;
                    if (v45 < v48)
                      break;
                    v56 = (2 * v48) | 1;
                    v49 = (unint64_t *)(v8 + 16 * v56);
                    v48 = 2 * v48 + 2;
                    if (v48 >= v10)
                    {
                      v57 = *v49;
                      v48 = v56;
                    }
                    else
                    {
                      v57 = *v49;
                      if (*v49 >= v49[2])
                      {
                        v48 = v56;
                      }
                      else
                      {
                        v57 = v49[2];
                        v49 += 2;
                      }
                    }
                  }
                  while (v57 >= v53);
                  *v52 = v53;
                  v52[1] = v54;
                }
              }
              v46 = v47 - 1;
            }
            while (v47);
            do
            {
              v58 = 0;
              v79 = *(_OWORD *)v8;
              v59 = (_OWORD *)v8;
              do
              {
                v60 = (unint64_t *)&v59[v58 + 1];
                v61 = (2 * v58) | 1;
                v62 = 2 * v58 + 2;
                if (v62 < v10 && *v60 < v60[2])
                {
                  v60 += 2;
                  v61 = v62;
                }
                *v59 = *(_OWORD *)v60;
                v59 = v60;
                v58 = v61;
              }
              while (v61 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 2;
              if (v60 == a2)
              {
                *(_OWORD *)v60 = v79;
              }
              else
              {
                *(_OWORD *)v60 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v79;
                v63 = (uint64_t)v60 - v8 + 16;
                if (v63 >= 17)
                {
                  v64 = (((unint64_t)v63 >> 4) - 2) >> 1;
                  v65 = (unint64_t *)(v8 + 16 * v64);
                  v66 = *v60;
                  if (*v65 < *v60)
                  {
                    v67 = v60[1];
                    do
                    {
                      v68 = v60;
                      v60 = v65;
                      *(_OWORD *)v68 = *(_OWORD *)v65;
                      if (!v64)
                        break;
                      v64 = (v64 - 1) >> 1;
                      v65 = (unint64_t *)(v8 + 16 * v64);
                    }
                    while (*v65 < v66);
                    *v60 = v66;
                    v60[1] = v67;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (unint64_t *)(v8 + 16 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          sub_1C4ECC138((__int128 *)(a1 + 16 * ((unint64_t)v10 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          sub_1C4ECC138((__int128 *)a1, (unint64_t *)(a1 + 16 * ((unint64_t)v10 >> 1)), a2 - 2);
          sub_1C4ECC138((__int128 *)(a1 + 16), v12 - 2, a2 - 4);
          sub_1C4ECC138((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v11), a2 - 6);
          sub_1C4ECC138((__int128 *)v12 - 1, v12, (unint64_t *)(a1 + 16 + 16 * v11));
          v75 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v75;
        }
        --a3;
        v13 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= v13)
        {
          if (v13 >= *(a2 - 2))
          {
            v26 = a1 + 16;
            do
            {
              v8 = v26;
              if (v26 >= (unint64_t)a2)
                break;
              v26 += 16;
            }
            while (v13 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v25 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v13 >= v25);
          }
          v27 = a2;
          if (v8 < (unint64_t)a2)
          {
            v27 = a2;
            do
              v28 = *((_QWORD *)v27-- - 2);
            while (v13 < v28);
          }
          v29 = *(_QWORD *)(a1 + 8);
          while (v8 < (unint64_t)v27)
          {
            v77 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v27;
            *v27 = v77;
            do
            {
              v30 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v13 >= v30);
            do
              v31 = *((_QWORD *)v27-- - 2);
            while (v13 < v31);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v29;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 8);
        do
        {
          v16 = *(_QWORD *)(a1 + v14 + 16);
          v14 += 16;
        }
        while (v16 < v13);
        v17 = a1 + v14;
        v18 = a2;
        if (v14 == 16)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = *(v18 - 2);
            v18 -= 2;
          }
          while (v20 >= v13);
        }
        else
        {
          do
          {
            v19 = *(v18 - 2);
            v18 -= 2;
          }
          while (v19 >= v13);
        }
        v8 = a1 + v14;
        if (v17 < (unint64_t)v18)
        {
          v21 = (__int128 *)v18;
          do
          {
            v76 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v21;
            *v21 = v76;
            do
            {
              v22 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v22 < v13);
            do
              v23 = *((_QWORD *)v21-- - 2);
            while (v23 >= v13);
          }
          while (v8 < (unint64_t)v21);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v15;
        if (v17 < (unint64_t)v18)
        {
LABEL_29:
          sub_1C4ECBABC(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v24 = sub_1C4ECC1DC(a1, (unint64_t *)(v8 - 16));
        if (!sub_1C4ECC1DC(v8, a2))
        {
          if (v24)
            continue;
          goto LABEL_29;
        }
        a2 = (unint64_t *)(v8 - 16);
        if (!v24)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a2 - 40;
  v130 = (__int128 *)(a2 - 120);
  v131 = (__int128 *)(a2 - 80);
  v11 = a1;
  v132 = a2;
  while (2)
  {
    a1 = v11;
    v12 = a2 - v11;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v11) >> 3);
    switch(v13)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)((__int128 *)v10, (__int128 *)a1))
        {
          v59 = *(_OWORD *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v139 = *(_QWORD *)(a1 + 32);
          v137 = v59;
          v138 = v60;
          v61 = *(_OWORD *)v10;
          v62 = *(_OWORD *)(v10 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 + 32);
          *(_OWORD *)a1 = v61;
          *(_OWORD *)(a1 + 16) = v62;
          v63 = v137;
          v64 = v138;
          *(_QWORD *)(v10 + 32) = v139;
          *(_OWORD *)v10 = v63;
          *(_OWORD *)(v10 + 16) = v64;
        }
        return;
      case 3:
        sub_1C4F7BBC0((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)v10, a3);
        return;
      case 4:
        sub_1C4F7BEEC(a1, a1 + 40, a1 + 80, v10, a3);
        return;
      case 5:
        sub_1C4F7BFD4(a1, a1 + 40, a1 + 80, a1 + 120, v10, a3);
        return;
      default:
        if (v12 <= 959)
        {
          v65 = (__int128 *)(a1 + 40);
          v67 = a1 == a2 || v65 == (__int128 *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = a1;
              do
              {
                v70 = (__int128 *)v69;
                v69 = (uint64_t)v65;
                if ((*a3)(v65, v70))
                {
                  v71 = *(_OWORD *)v69;
                  v72 = *(_OWORD *)(v69 + 16);
                  v139 = *(_QWORD *)(v69 + 32);
                  v137 = v71;
                  v138 = v72;
                  v73 = v68;
                  while (1)
                  {
                    v74 = a1 + v73;
                    v75 = *(_OWORD *)(a1 + v73 + 16);
                    *(_OWORD *)(v74 + 40) = *(_OWORD *)(a1 + v73);
                    *(_OWORD *)(v74 + 56) = v75;
                    *(_QWORD *)(v74 + 72) = *(_QWORD *)(a1 + v73 + 32);
                    if (!v73)
                      break;
                    v73 -= 40;
                    if (((*a3)(&v137, (__int128 *)(v73 + a1)) & 1) == 0)
                    {
                      v76 = a1 + v73 + 40;
                      goto LABEL_74;
                    }
                  }
                  v76 = a1;
LABEL_74:
                  v77 = v137;
                  v78 = v138;
                  *(_QWORD *)(v76 + 32) = v139;
                  *(_OWORD *)v76 = v77;
                  *(_OWORD *)(v76 + 16) = v78;
                }
                v65 = (__int128 *)(v69 + 40);
                v68 += 40;
              }
              while (v69 + 40 != a2);
            }
          }
          else if (!v67)
          {
            v121 = a1 - 40;
            do
            {
              v122 = (__int128 *)a1;
              a1 = (uint64_t)v65;
              if ((*a3)(v65, v122))
              {
                v123 = *(_OWORD *)a1;
                v124 = *(_OWORD *)(a1 + 16);
                v139 = *(_QWORD *)(a1 + 32);
                v137 = v123;
                v138 = v124;
                v125 = v121;
                do
                {
                  v126 = *(_OWORD *)(v125 + 56);
                  *(_OWORD *)(v125 + 80) = *(_OWORD *)(v125 + 40);
                  *(_OWORD *)(v125 + 96) = v126;
                  *(_QWORD *)(v125 + 112) = *(_QWORD *)(v125 + 72);
                  v127 = (*a3)(&v137, (__int128 *)v125);
                  v125 -= 40;
                }
                while ((v127 & 1) != 0);
                v128 = v137;
                v129 = v138;
                *(_QWORD *)(v125 + 112) = v139;
                *(_OWORD *)(v125 + 80) = v128;
                *(_OWORD *)(v125 + 96) = v129;
              }
              v65 = (__int128 *)(a1 + 40);
              v121 += 40;
            }
            while (a1 + 40 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v79 = (unint64_t)(v13 - 2) >> 1;
            v80 = v79;
            do
            {
              v81 = v80;
              if (v79 >= v80)
              {
                v82 = (2 * v80) | 1;
                v83 = a1 + 40 * v82;
                if (2 * v80 + 2 < v13 && (*a3)((__int128 *)(a1 + 40 * v82), (__int128 *)(v83 + 40)))
                {
                  v83 += 40;
                  v82 = 2 * v81 + 2;
                }
                v84 = a1 + 40 * v81;
                if (((*a3)((__int128 *)v83, (__int128 *)v84) & 1) == 0)
                {
                  v85 = *(_OWORD *)v84;
                  v86 = *(_OWORD *)(v84 + 16);
                  v139 = *(_QWORD *)(v84 + 32);
                  v137 = v85;
                  v138 = v86;
                  do
                  {
                    v87 = v83;
                    v88 = *(_OWORD *)v83;
                    v89 = *(_OWORD *)(v83 + 16);
                    *(_QWORD *)(v84 + 32) = *(_QWORD *)(v83 + 32);
                    *(_OWORD *)v84 = v88;
                    *(_OWORD *)(v84 + 16) = v89;
                    if (v79 < v82)
                      break;
                    v90 = (2 * v82) | 1;
                    v83 = a1 + 40 * v90;
                    v91 = 2 * v82 + 2;
                    if (v91 < v13 && (*a3)((__int128 *)(a1 + 40 * v90), (__int128 *)(v83 + 40)))
                    {
                      v83 += 40;
                      v90 = v91;
                    }
                    v84 = v87;
                    v82 = v90;
                  }
                  while (!(*a3)((__int128 *)v83, &v137));
                  v92 = v137;
                  v93 = v138;
                  *(_QWORD *)(v87 + 32) = v139;
                  *(_OWORD *)v87 = v92;
                  *(_OWORD *)(v87 + 16) = v93;
                }
              }
              v80 = v81 - 1;
            }
            while (v81);
            v94 = (_OWORD *)v132;
            do
            {
              v133 = v94;
              v95 = 0;
              v96 = *(_OWORD *)a1;
              v97 = *(_OWORD *)(a1 + 16);
              v136 = *(_QWORD *)(a1 + 32);
              v134 = v96;
              v135 = v97;
              v98 = a1;
              do
              {
                v99 = v98 + 40 * v95 + 40;
                v100 = (2 * v95) | 1;
                v101 = 2 * v95 + 2;
                if (v101 < v13
                  && (*a3)((__int128 *)(v98 + 40 * v95 + 40), (__int128 *)(v98 + 40 * v95 + 80)))
                {
                  v99 += 40;
                  v100 = v101;
                }
                v102 = *(_OWORD *)v99;
                v103 = *(_OWORD *)(v99 + 16);
                *(_QWORD *)(v98 + 32) = *(_QWORD *)(v99 + 32);
                *(_OWORD *)v98 = v102;
                *(_OWORD *)(v98 + 16) = v103;
                v98 = v99;
                v95 = v100;
              }
              while (v100 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
              v94 = (_OWORD *)((char *)v133 - 40);
              if ((_OWORD *)v99 == (_OWORD *)((char *)v133 - 40))
              {
                v118 = v134;
                v119 = v135;
                *(_QWORD *)(v99 + 32) = v136;
                *(_OWORD *)v99 = v118;
                *(_OWORD *)(v99 + 16) = v119;
              }
              else
              {
                v104 = *v94;
                v105 = *(_OWORD *)((char *)v133 - 24);
                *(_QWORD *)(v99 + 32) = *((_QWORD *)v133 - 1);
                *(_OWORD *)v99 = v104;
                *(_OWORD *)(v99 + 16) = v105;
                v106 = v134;
                v107 = v135;
                *((_QWORD *)v133 - 1) = v136;
                *v94 = v106;
                *(_OWORD *)((char *)v133 - 24) = v107;
                v108 = v99 - a1 + 40;
                if (v108 >= 41)
                {
                  v109 = (v108 / 0x28uLL - 2) >> 1;
                  v110 = a1 + 40 * v109;
                  if ((*a3)((__int128 *)v110, (__int128 *)v99))
                  {
                    v111 = *(_OWORD *)v99;
                    v112 = *(_OWORD *)(v99 + 16);
                    v139 = *(_QWORD *)(v99 + 32);
                    v137 = v111;
                    v138 = v112;
                    do
                    {
                      v113 = v110;
                      v114 = *(_OWORD *)v110;
                      v115 = *(_OWORD *)(v110 + 16);
                      *(_QWORD *)(v99 + 32) = *(_QWORD *)(v110 + 32);
                      *(_OWORD *)v99 = v114;
                      *(_OWORD *)(v99 + 16) = v115;
                      if (!v109)
                        break;
                      v109 = (v109 - 1) >> 1;
                      v110 = a1 + 40 * v109;
                      v99 = v113;
                    }
                    while (((*a3)((__int128 *)v110, &v137) & 1) != 0);
                    v116 = v137;
                    v117 = v138;
                    *(_QWORD *)(v113 + 32) = v139;
                    *(_OWORD *)v113 = v116;
                    *(_OWORD *)(v113 + 16) = v117;
                  }
                }
              }
            }
            while (v13-- > 2);
          }
          return;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = a1 + 40 * ((unint64_t)v13 >> 1);
        if ((unint64_t)v12 < 0x1401)
        {
          sub_1C4F7BBC0((__int128 *)v15, (__int128 *)a1, (__int128 *)v10, a3);
        }
        else
        {
          sub_1C4F7BBC0((__int128 *)a1, (__int128 *)v15, (__int128 *)v10, a3);
          v16 = 5 * v14;
          sub_1C4F7BBC0((__int128 *)(a1 + 40), (__int128 *)(a1 + 8 * v16 - 40), v131, a3);
          sub_1C4F7BBC0((__int128 *)(a1 + 80), (__int128 *)(a1 + 40 + 8 * v16), v130, a3);
          sub_1C4F7BBC0((__int128 *)(a1 + 8 * v16 - 40), (__int128 *)v15, (__int128 *)(a1 + 40 + 8 * v16), a3);
          v17 = *(_OWORD *)a1;
          v18 = *(_OWORD *)(a1 + 16);
          v139 = *(_QWORD *)(a1 + 32);
          v137 = v17;
          v138 = v18;
          v19 = *(_OWORD *)v15;
          v20 = *(_OWORD *)(v15 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v15 + 32);
          *(_OWORD *)a1 = v19;
          *(_OWORD *)(a1 + 16) = v20;
          v21 = v137;
          v22 = v138;
          *(_QWORD *)(v15 + 32) = v139;
          *(_OWORD *)v15 = v21;
          *(_OWORD *)(v15 + 16) = v22;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 40), (__int128 *)a1) & 1) == 0)
        {
          v43 = *(_OWORD *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v136 = *(_QWORD *)(a1 + 32);
          v134 = v43;
          v135 = v44;
          if (((*a3)(&v134, (__int128 *)v10) & 1) != 0)
          {
            v11 = a1;
            do
              v11 += 40;
            while (((*a3)(&v134, (__int128 *)v11) & 1) == 0);
          }
          else
          {
            v45 = (__int128 *)(a1 + 40);
            do
            {
              v11 = (unint64_t)v45;
              if ((unint64_t)v45 >= a2)
                break;
              v46 = (*a3)(&v134, v45);
              v45 = (__int128 *)(v11 + 40);
            }
            while (!v46);
          }
          v47 = a2;
          if (v11 < a2)
          {
            v47 = a2;
            do
              v47 -= 40;
            while (((*a3)(&v134, (__int128 *)v47) & 1) != 0);
          }
          while (v11 < v47)
          {
            v48 = *(_OWORD *)v11;
            v49 = *(_OWORD *)(v11 + 16);
            v139 = *(_QWORD *)(v11 + 32);
            v137 = v48;
            v138 = v49;
            v50 = *(_OWORD *)v47;
            v51 = *(_OWORD *)(v47 + 16);
            *(_QWORD *)(v11 + 32) = *(_QWORD *)(v47 + 32);
            *(_OWORD *)v11 = v50;
            *(_OWORD *)(v11 + 16) = v51;
            v52 = v137;
            v53 = v138;
            *(_QWORD *)(v47 + 32) = v139;
            *(_OWORD *)v47 = v52;
            *(_OWORD *)(v47 + 16) = v53;
            do
              v11 += 40;
            while (!(*a3)(&v134, (__int128 *)v11));
            do
              v47 -= 40;
            while (((*a3)(&v134, (__int128 *)v47) & 1) != 0);
          }
          v54 = (__int128 *)(v11 - 40);
          if (v11 - 40 != a1)
          {
            v55 = *v54;
            v56 = *(_OWORD *)(v11 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v11 - 8);
            *(_OWORD *)a1 = v55;
            *(_OWORD *)(a1 + 16) = v56;
          }
          a5 = 0;
          v57 = v134;
          v58 = v135;
          *(_QWORD *)(v11 - 8) = v136;
          *v54 = v57;
          *(_OWORD *)(v11 - 24) = v58;
          continue;
        }
        v23 = 0;
        v24 = *(_OWORD *)a1;
        v25 = *(_OWORD *)(a1 + 16);
        v136 = *(_QWORD *)(a1 + 32);
        v134 = v24;
        v135 = v25;
        do
          v23 += 40;
        while (((*a3)((__int128 *)(v23 + a1), &v134) & 1) != 0);
        v26 = a1 + v23;
        v27 = (__int128 *)v132;
        if (v23 == 40)
        {
          v27 = (__int128 *)v132;
          do
          {
            if (v26 >= (unint64_t)v27)
              break;
            v27 = (__int128 *)((char *)v27 - 40);
          }
          while (((*a3)(v27, &v134) & 1) == 0);
        }
        else
        {
          do
            v27 = (__int128 *)((char *)v27 - 40);
          while (!(*a3)(v27, &v134));
        }
        if (v26 >= (unint64_t)v27)
        {
          v36 = v26 - 40;
        }
        else
        {
          v28 = a1 + v23;
          v29 = v27;
          do
          {
            v30 = *(_OWORD *)v28;
            v31 = *(_OWORD *)(v28 + 16);
            v139 = *(_QWORD *)(v28 + 32);
            v137 = v30;
            v138 = v31;
            v32 = *v29;
            v33 = v29[1];
            *(_QWORD *)(v28 + 32) = *((_QWORD *)v29 + 4);
            *(_OWORD *)v28 = v32;
            *(_OWORD *)(v28 + 16) = v33;
            v34 = v137;
            v35 = v138;
            *((_QWORD *)v29 + 4) = v139;
            *v29 = v34;
            v29[1] = v35;
            do
              v28 += 40;
            while (((*a3)((__int128 *)v28, &v134) & 1) != 0);
            do
              v29 = (__int128 *)((char *)v29 - 40);
            while (!(*a3)(v29, &v134));
          }
          while (v28 < (unint64_t)v29);
          v36 = v28 - 40;
        }
        if (v36 != a1)
        {
          v37 = *(_OWORD *)v36;
          v38 = *(_OWORD *)(v36 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v36 + 32);
          *(_OWORD *)a1 = v37;
          *(_OWORD *)(a1 + 16) = v38;
        }
        v39 = v134;
        v40 = v135;
        *(_QWORD *)(v36 + 32) = v136;
        *(_OWORD *)v36 = v39;
        *(_OWORD *)(v36 + 16) = v40;
        v41 = v26 >= (unint64_t)v27;
        a2 = v132;
        if (!v41)
        {
LABEL_32:
          sub_1C4F7B2B4(a1, v36, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v36 + 40;
          continue;
        }
        v42 = sub_1C4F7BCF8(a1, v36, a3);
        v11 = v36 + 40;
        if (!sub_1C4F7BCF8(v36 + 40, v132, a3))
        {
          if (v42)
            continue;
          goto LABEL_32;
        }
        a2 = v36;
        if (!v42)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v40 = *(_DWORD *)(a2 - 24);
        v39 = a2 - 24;
        if ((v40 & 6u) < (*(_DWORD *)v8 & 6u))
        {
          v112 = *(_QWORD *)(v8 + 16);
          v103 = *(_OWORD *)v8;
          v41 = *(_OWORD *)v39;
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v39 + 16);
          *(_OWORD *)v8 = v41;
          *(_QWORD *)(v39 + 16) = v112;
          *(_OWORD *)v39 = v103;
        }
        return;
      case 3:
        sub_1C4FD1438((__int128 *)v8, (__int128 *)(v8 + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        sub_1C4FD17F0(v8, v8 + 24, v8 + 48, a2 - 24);
        return;
      case 5:
        v42 = (__int128 *)(v8 + 24);
        v43 = (__int128 *)(v8 + 48);
        v44 = (__int128 *)(v8 + 72);
        sub_1C4FD17F0(v8, v8 + 24, v8 + 48, v8 + 72);
        v46 = *(_DWORD *)(a2 - 24);
        v45 = a2 - 24;
        if ((v46 & 6u) < (*(_DWORD *)(v8 + 72) & 6u))
        {
          v47 = *v44;
          v48 = *(_QWORD *)(v8 + 88);
          v49 = *(_QWORD *)(v45 + 16);
          *v44 = *(_OWORD *)v45;
          *(_QWORD *)(v8 + 88) = v49;
          *(_QWORD *)(v45 + 16) = v48;
          *(_OWORD *)v45 = v47;
          if ((*(_DWORD *)v44 & 6u) < (*(_DWORD *)v43 & 6u))
          {
            v50 = *(_QWORD *)(v8 + 64);
            v51 = *v43;
            *v43 = *v44;
            *(_QWORD *)(v8 + 64) = *(_QWORD *)(v8 + 88);
            *v44 = v51;
            *(_QWORD *)(v8 + 88) = v50;
            if ((*(_DWORD *)v43 & 6u) < (*(_DWORD *)v42 & 6u))
            {
              v52 = *(_QWORD *)(v8 + 40);
              v53 = *v42;
              *v42 = *v43;
              *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 64);
              *v43 = v53;
              *(_QWORD *)(v8 + 64) = v52;
              if ((*(_DWORD *)(v8 + 24) & 6u) < (*(_DWORD *)v8 & 6u))
              {
                v113 = *(_QWORD *)(v8 + 16);
                v104 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v42;
                *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 40);
                *v42 = v104;
                *(_QWORD *)(v8 + 40) = v113;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 575)
        {
          v54 = v8 + 24;
          v56 = v8 == a2 || v54 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = 0;
              v58 = v8;
              do
              {
                v59 = v54;
                v60 = *(_QWORD *)(v58 + 24);
                if ((v60 & 6u) < (*(_DWORD *)v58 & 6u))
                {
                  v105 = *(_OWORD *)(v58 + 32);
                  v61 = v57;
                  while (1)
                  {
                    v62 = v8 + v61;
                    *(_OWORD *)(v62 + 24) = *(_OWORD *)(v8 + v61);
                    *(_QWORD *)(v62 + 40) = *(_QWORD *)(v8 + v61 + 16);
                    if (!v61)
                      break;
                    v61 -= 24;
                    if ((v60 & 6u) >= (*(_DWORD *)(v62 - 24) & 6u))
                    {
                      v63 = v8 + v61 + 24;
                      goto LABEL_76;
                    }
                  }
                  v63 = v8;
LABEL_76:
                  *(_QWORD *)v63 = v60;
                  *(_OWORD *)(v63 + 8) = v105;
                }
                v54 = v59 + 24;
                v57 += 24;
                v58 = v59;
              }
              while (v59 + 24 != a2);
            }
          }
          else if (!v56)
          {
            do
            {
              v93 = v54;
              v94 = *(_QWORD *)(a1 + 24);
              if ((v94 & 6u) < (*(_DWORD *)a1 & 6u))
              {
                v108 = *(_OWORD *)(a1 + 32);
                v95 = v54;
                do
                {
                  *(_OWORD *)v95 = *(_OWORD *)(v95 - 24);
                  *(_QWORD *)(v95 + 16) = *(_QWORD *)(v95 - 8);
                  v96 = *(_DWORD *)(v95 - 48);
                  v95 -= 24;
                }
                while ((v94 & 6u) < (v96 & 6u));
                *(_QWORD *)v95 = v94;
                *(_OWORD *)(v95 + 8) = v108;
              }
              v54 += 24;
              a1 = v93;
            }
            while (v93 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v64 = (unint64_t)(v10 - 2) >> 1;
            v65 = v64;
            do
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = (_QWORD *)(v8 + 24 * v67);
                if (2 * v66 + 2 >= v10)
                {
                  v69 = *v68;
                }
                else
                {
                  v69 = *v68;
                  if ((*(_DWORD *)v68 & 6u) < ((_DWORD)v68[3] & 6u))
                  {
                    v69 = v68[3];
                    v68 += 3;
                    v67 = 2 * v66 + 2;
                  }
                }
                v70 = (_QWORD *)(v8 + 24 * v66);
                v71 = v69 & 6;
                v72 = *v70;
                v73 = *v70 & 6;
                if (v71 >= v73)
                {
                  v106 = *(_OWORD *)(v70 + 1);
                  do
                  {
                    v74 = v70;
                    v70 = v68;
                    v75 = *(_OWORD *)v68;
                    v74[2] = v68[2];
                    *(_OWORD *)v74 = v75;
                    if (v64 < v67)
                      break;
                    v76 = (2 * v67) | 1;
                    v68 = (_QWORD *)(v8 + 24 * v76);
                    v67 = 2 * v67 + 2;
                    if (v67 >= v10)
                    {
                      v77 = *v68;
                      v67 = v76;
                    }
                    else
                    {
                      v77 = *v68;
                      if ((*(_DWORD *)v68 & 6u) >= ((_DWORD)v68[3] & 6u))
                      {
                        v67 = v76;
                      }
                      else
                      {
                        v77 = v68[3];
                        v68 += 3;
                      }
                    }
                  }
                  while ((v77 & 6u) >= v73);
                  *v70 = v72;
                  *(_OWORD *)(v70 + 1) = v106;
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            do
            {
              v78 = 0;
              v114 = *(_QWORD *)(v8 + 16);
              v107 = *(_OWORD *)v8;
              v79 = v8;
              do
              {
                v80 = v79 + 24 * v78 + 24;
                v81 = (2 * v78) | 1;
                v82 = 2 * v78 + 2;
                if (v82 < v10 && (*(_DWORD *)v80 & 6u) < (*(_DWORD *)(v80 + 24) & 6u))
                {
                  v80 += 24;
                  v81 = v82;
                }
                v83 = *(_OWORD *)v80;
                *(_QWORD *)(v79 + 16) = *(_QWORD *)(v80 + 16);
                *(_OWORD *)v79 = v83;
                v79 = v80;
                v78 = v81;
              }
              while (v81 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 24;
              if (v80 == a2)
              {
                *(_QWORD *)(v80 + 16) = v114;
                *(_OWORD *)v80 = v107;
              }
              else
              {
                v84 = *(_OWORD *)a2;
                *(_QWORD *)(v80 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v80 = v84;
                *(_QWORD *)(a2 + 16) = v114;
                *(_OWORD *)a2 = v107;
                v85 = v80 - v8 + 24;
                if (v85 >= 25)
                {
                  v86 = (v85 / 0x18uLL - 2) >> 1;
                  v87 = v8 + 24 * v86;
                  v88 = *(_QWORD *)v80;
                  v89 = *(_QWORD *)v80 & 6;
                  if ((*(_DWORD *)v87 & 6u) < v89)
                  {
                    v99 = *(_OWORD *)(v80 + 8);
                    do
                    {
                      v90 = v80;
                      v80 = v87;
                      v91 = *(_OWORD *)v87;
                      *(_QWORD *)(v90 + 16) = *(_QWORD *)(v87 + 16);
                      *(_OWORD *)v90 = v91;
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = v8 + 24 * v86;
                    }
                    while ((*(_DWORD *)v87 & 6u) < v89);
                    *(_QWORD *)v80 = v88;
                    *(_OWORD *)(v80 + 8) = v99;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_1C4FD1438((__int128 *)(a1 + 24 * v11), (__int128 *)a1, (__int128 *)(a2 - 24));
        }
        else
        {
          sub_1C4FD1438((__int128 *)a1, (__int128 *)(a1 + 24 * v11), (__int128 *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (__int128 *)(a1 + 24 * v11 - 24);
          sub_1C4FD1438((__int128 *)(a1 + 24), v14, (__int128 *)(a2 - 48));
          v15 = (__int128 *)(a1 + 24 + 8 * v13);
          sub_1C4FD1438((__int128 *)(a1 + 48), v15, (__int128 *)(a2 - 72));
          sub_1C4FD1438(v14, (__int128 *)v12, v15);
          v109 = *(_QWORD *)(a1 + 16);
          v100 = *(_OWORD *)a1;
          v16 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v16;
          *(_QWORD *)(v12 + 16) = v109;
          *(_OWORD *)v12 = v100;
        }
        --a3;
        v17 = *(_QWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v18 = v17 & 6;
          if ((*(_DWORD *)(a1 - 24) & 6u) < v18)
            goto LABEL_11;
          v98 = *(_OWORD *)(a1 + 8);
          if (v18 >= (*(_DWORD *)(a2 - 24) & 6u))
          {
            v32 = a1 + 24;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v32 += 24;
            }
            while (v18 >= (*(_DWORD *)v8 & 6u));
          }
          else
          {
            v8 = a1;
            do
            {
              v31 = *(_DWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v18 >= (v31 & 6u));
          }
          v33 = a2;
          if (v8 < a2)
          {
            v33 = a2;
            do
            {
              v34 = *(_DWORD *)(v33 - 24);
              v33 -= 24;
            }
            while (v18 < (v34 & 6u));
          }
          while (v8 < v33)
          {
            v111 = *(_QWORD *)(v8 + 16);
            v102 = *(_OWORD *)v8;
            v35 = *(_OWORD *)v33;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v33 + 16);
            *(_OWORD *)v8 = v35;
            *(_QWORD *)(v33 + 16) = v111;
            *(_OWORD *)v33 = v102;
            do
            {
              v36 = *(_DWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v18 >= (v36 & 6u));
            do
            {
              v37 = *(_DWORD *)(v33 - 24);
              v33 -= 24;
            }
            while (v18 < (v37 & 6u));
          }
          if (v8 - 24 != a1)
          {
            v38 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v38;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 24) = v17;
          *(_OWORD *)(v8 - 16) = v98;
          continue;
        }
        v18 = v17 & 6;
LABEL_11:
        v19 = 0;
        v97 = *(_OWORD *)(a1 + 8);
        do
        {
          v20 = *(_DWORD *)(a1 + v19 + 24) & 6;
          v19 += 24;
        }
        while (v20 < v18);
        v21 = a1 + v19;
        v22 = a2;
        if (v19 == 24)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *(_DWORD *)(v22 - 24);
            v22 -= 24;
          }
          while ((v24 & 6u) >= v18);
        }
        else
        {
          do
          {
            v23 = *(_DWORD *)(v22 - 24);
            v22 -= 24;
          }
          while ((v23 & 6u) >= v18);
        }
        v8 = a1 + v19;
        if (v21 < v22)
        {
          v25 = v22;
          do
          {
            v110 = *(_QWORD *)(v8 + 16);
            v101 = *(_OWORD *)v8;
            v26 = *(_OWORD *)v25;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v25 + 16);
            *(_OWORD *)v8 = v26;
            *(_QWORD *)(v25 + 16) = v110;
            *(_OWORD *)v25 = v101;
            do
            {
              v27 = *(_DWORD *)(v8 + 24);
              v8 += 24;
            }
            while ((v27 & 6u) < v18);
            do
            {
              v28 = *(_DWORD *)(v25 - 24);
              v25 -= 24;
            }
            while ((v28 & 6u) >= v18);
          }
          while (v8 < v25);
        }
        if (v8 - 24 != a1)
        {
          v29 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v29;
        }
        *(_QWORD *)(v8 - 24) = v17;
        *(_OWORD *)(v8 - 16) = v97;
        if (v21 < v22)
        {
LABEL_30:
          sub_1C4FD0B14(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = sub_1C4FD1544(a1, v8 - 24);
        if (!sub_1C4FD1544(v8, a2))
        {
          if (v30)
            continue;
          goto LABEL_30;
        }
        a2 = v8 - 24;
        if (!v30)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v31 = *(a2 - 8);
        v30 = a2 - 8;
        if (v31 < *v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v30;
          *(_OWORD *)v30 = v85;
        }
        return;
      case 3:
        sub_1C512E91C(v8, v8 + 8, a2 - 8);
        return;
      case 4:
        sub_1C512EC10(v8, v8 + 8, v8 + 16, a2 - 8);
        return;
      case 5:
        v32 = v8 + 8;
        v33 = v8 + 16;
        v34 = v8 + 24;
        sub_1C512EC10(v8, v8 + 8, v8 + 16, v8 + 24);
        v36 = *(a2 - 8);
        v35 = a2 - 8;
        if (v36 < v8[24])
        {
          v37 = *(_OWORD *)v34;
          *(_OWORD *)v34 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v37;
          if (*v34 < *v33)
          {
            v38 = *(_OWORD *)v33;
            *(_OWORD *)v33 = *(_OWORD *)v34;
            *(_OWORD *)v34 = v38;
            if (*v33 < *v32)
            {
              v39 = *(_OWORD *)v32;
              *(_OWORD *)v32 = *(_OWORD *)v33;
              *(_OWORD *)v33 = v39;
              if (v8[8] < *v8)
              {
                v86 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v32;
                *(_OWORD *)v32 = v86;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v40 = v8 + 8;
          v42 = v8 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 0;
              v44 = v8;
              do
              {
                v45 = v40;
                v46 = v44[8];
                if (v46 < *v44)
                {
                  *(_QWORD *)v87 = *(_QWORD *)(v44 + 9);
                  *(_QWORD *)&v87[6] = *((_QWORD *)v44 + 3);
                  v47 = v43;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v47 + 16) = *(_OWORD *)((char *)v8 + v47);
                    if (!v47)
                      break;
                    v48 = *(unsigned __int16 *)((char *)v8 + v47 - 16);
                    v47 -= 16;
                    if (v46 >= v48)
                    {
                      v49 = (uint64_t)v8 + v47 + 16;
                      goto LABEL_75;
                    }
                  }
                  v49 = (uint64_t)v8;
LABEL_75:
                  *(_WORD *)v49 = v46;
                  *(_QWORD *)(v49 + 8) = *(_QWORD *)&v87[6];
                  *(_QWORD *)(v49 + 2) = *(_QWORD *)v87;
                }
                v40 = v45 + 8;
                v43 += 16;
                v44 = v45;
              }
              while (v45 + 8 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v76 = v40;
              v77 = a1[8];
              if (v77 < *a1)
              {
                *(_QWORD *)v90 = *(_QWORD *)(a1 + 9);
                *(_QWORD *)&v90[6] = *((_QWORD *)a1 + 3);
                do
                {
                  *(_OWORD *)v40 = *((_OWORD *)v40 - 1);
                  v78 = *(v40 - 16);
                  v40 -= 8;
                }
                while (v77 < v78);
                *v40 = v77;
                *((_QWORD *)v40 + 1) = *(_QWORD *)&v90[6];
                *(_QWORD *)(v40 + 1) = *(_QWORD *)v90;
              }
              v40 = v76 + 8;
              a1 = v76;
            }
            while (v76 + 8 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v50 = (unint64_t)(v10 - 2) >> 1;
            v51 = v50;
            do
            {
              v52 = v51;
              if (v50 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[8 * v53];
                if (2 * v52 + 2 >= v10)
                {
                  v56 = *v54;
                }
                else
                {
                  v55 = *v54;
                  v56 = v54[8];
                  v57 = v55 >= v56;
                  if (v55 > v56)
                    v56 = *v54;
                  if (!v57)
                  {
                    v54 += 8;
                    v53 = 2 * v52 + 2;
                  }
                }
                v58 = &v8[8 * v52];
                v59 = *v58;
                if (v56 >= v59)
                {
                  *(_QWORD *)&v88[6] = *((_QWORD *)v58 + 1);
                  *(_QWORD *)v88 = *(_QWORD *)(v58 + 1);
                  do
                  {
                    v60 = v58;
                    v58 = v54;
                    *(_OWORD *)v60 = *(_OWORD *)v54;
                    if (v50 < v53)
                      break;
                    v61 = (2 * v53) | 1;
                    v54 = &v8[8 * v61];
                    v53 = 2 * v53 + 2;
                    if (v53 >= v10)
                    {
                      v62 = *v54;
                      v53 = v61;
                    }
                    else
                    {
                      v62 = *v54;
                      v63 = v54[8];
                      v64 = v62 >= v63;
                      if (v62 <= v63)
                        v62 = v54[8];
                      if (v64)
                        v53 = v61;
                      else
                        v54 += 8;
                    }
                  }
                  while (v62 >= v59);
                  *v58 = v59;
                  *((_QWORD *)v58 + 1) = *(_QWORD *)&v88[6];
                  *(_QWORD *)(v58 + 1) = *(_QWORD *)v88;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            do
            {
              v65 = 0;
              v89 = *(_OWORD *)v8;
              v66 = v8;
              do
              {
                v67 = &v66[8 * v65 + 8];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v10 && *v67 < v67[8])
                {
                  v67 += 8;
                  v68 = v69;
                }
                *(_OWORD *)v66 = *(_OWORD *)v67;
                v66 = v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 8;
              if (v67 == a2)
              {
                *(_OWORD *)v67 = v89;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v89;
                v70 = (char *)v67 - (char *)v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = &v8[8 * v71];
                  v73 = *v67;
                  if (*v72 < v73)
                  {
                    *(_QWORD *)&v81[6] = *((_QWORD *)v67 + 1);
                    *(_QWORD *)v81 = *(_QWORD *)(v67 + 1);
                    do
                    {
                      v74 = v67;
                      v67 = v72;
                      *(_OWORD *)v74 = *(_OWORD *)v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = &v8[8 * v71];
                    }
                    while (*v72 < v73);
                    *v67 = v73;
                    *((_QWORD *)v67 + 1) = *(_QWORD *)&v81[6];
                    *(_QWORD *)(v67 + 1) = *(_QWORD *)v81;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          sub_1C512E91C(&a1[8 * ((unint64_t)v10 >> 1)], a1, a2 - 8);
        }
        else
        {
          sub_1C512E91C(a1, &a1[8 * ((unint64_t)v10 >> 1)], a2 - 8);
          sub_1C512E91C(a1 + 8, v12 - 8, a2 - 16);
          sub_1C512E91C(a1 + 16, &a1[8 * v11 + 8], a2 - 24);
          sub_1C512E91C(v12 - 8, v12, &a1[8 * v11 + 8]);
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *a1;
        if ((a4 & 1) == 0 && *(a1 - 8) >= v13)
        {
          *(_QWORD *)&v80[6] = *((_QWORD *)a1 + 1);
          *(_QWORD *)v80 = *(_QWORD *)(a1 + 1);
          if (v13 >= *(a2 - 8))
          {
            v25 = a1 + 8;
            do
            {
              v8 = v25;
              if (v25 >= a2)
                break;
              v25 += 8;
            }
            while (v13 >= *v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v24 = v8[8];
              v8 += 8;
            }
            while (v13 >= v24);
          }
          v26 = a2;
          if (v8 < a2)
          {
            v26 = a2;
            do
            {
              v27 = *(v26 - 8);
              v26 -= 8;
            }
            while (v13 < v27);
          }
          while (v8 < v26)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v26;
            *(_OWORD *)v26 = v84;
            do
            {
              v28 = v8[8];
              v8 += 8;
            }
            while (v13 >= v28);
            do
            {
              v29 = *(v26 - 8);
              v26 -= 8;
            }
            while (v13 < v29);
          }
          if (v8 - 8 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 8) = v13;
          *((_QWORD *)v8 - 1) = *(_QWORD *)&v80[6];
          *(_QWORD *)(v8 - 7) = *(_QWORD *)v80;
          continue;
        }
        v14 = 0;
        *(_QWORD *)&v79[6] = *((_QWORD *)a1 + 1);
        *(_QWORD *)v79 = *(_QWORD *)(a1 + 1);
        do
        {
          v15 = a1[v14 + 8];
          v14 += 8;
        }
        while (v15 < v13);
        v16 = &a1[v14];
        v17 = a2;
        if (v14 == 8)
        {
          v17 = a2;
          do
          {
            if (v16 >= v17)
              break;
            v19 = *(v17 - 8);
            v17 -= 8;
          }
          while (v19 >= v13);
        }
        else
        {
          do
          {
            v18 = *(v17 - 8);
            v17 -= 8;
          }
          while (v18 >= v13);
        }
        v8 = &a1[v14];
        if (v16 < v17)
        {
          v20 = v17;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v20;
            *(_OWORD *)v20 = v83;
            do
            {
              v21 = v8[8];
              v8 += 8;
            }
            while (v21 < v13);
            do
            {
              v22 = *(v20 - 8);
              v20 -= 8;
            }
            while (v22 >= v13);
          }
          while (v8 < v20);
        }
        if (v8 - 8 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 8) = v13;
        *((_QWORD *)v8 - 1) = *(_QWORD *)&v79[6];
        *(_QWORD *)(v8 - 7) = *(_QWORD *)v79;
        if (v16 < v17)
        {
LABEL_29:
          sub_1C512E120(a1, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v23 = sub_1C512E9C0(a1, v8 - 8);
        if (!sub_1C512E9C0(v8, a2))
        {
          if (v23)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 8;
        if (!v23)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v31 = *(_DWORD **)a3;
        v32 = *(a2 - 2);
        v33 = *(a2 - 1);
        v34 = a2 - 2;
        *(_QWORD *)&v44 = v32;
        *((_QWORD *)&v44 + 1) = v33 & 0xFFFFFFFFFFFFFFF8;
        v35 = sub_1C51526A0(v31, (uint64_t *)&v44);
        v36 = *(_DWORD **)a3;
        v37 = v9[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v44 = *v9;
        *((_QWORD *)&v44 + 1) = v37;
        v38 = sub_1C51526A0(v36, (uint64_t *)&v44);
        v39 = *((_DWORD *)v35 + 4);
        v40 = *((_DWORD *)v38 + 4);
        v24 = v39 <= v40;
        v41 = v39 < v40;
        v42 = !v24;
        if (**(_BYTE **)(a3 + 8))
          v43 = v41;
        else
          v43 = v42;
        if (v43 == 1)
        {
          v44 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v34;
          *(_OWORD *)v34 = v44;
        }
        return;
      case 3uLL:
        sub_1C5152DE4(v9, v9 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        sub_1C5153824(v9, v9 + 2, v9 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        sub_1C51539C0(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2, a3);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_1C5152B24(v9, a2, a3);
          else
            sub_1C5152C98(v9, a2, a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_1C5152DE4(&v9[2 * (v13 >> 1)], v9, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_17;
          }
          else
          {
            sub_1C5152DE4(v9, &v9[2 * (v13 >> 1)], a2 - 2, a3);
            sub_1C5152DE4(v9 + 2, v15 - 2, a2 - 4, a3);
            sub_1C5152DE4(v9 + 4, &v9[2 * v14 + 2], a2 - 6, a3);
            sub_1C5152DE4(v15 - 2, v15, &v9[2 * v14 + 2], a3);
            v44 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v44;
            if ((a5 & 1) != 0)
              goto LABEL_17;
          }
          v16 = *(_DWORD **)a3;
          v17 = *(v9 - 1) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v44 = *(v9 - 2);
          *((_QWORD *)&v44 + 1) = v17;
          v18 = sub_1C51526A0(v16, (uint64_t *)&v44);
          v19 = *(_DWORD **)a3;
          v20 = v9[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v44 = *v9;
          *((_QWORD *)&v44 + 1) = v20;
          v21 = sub_1C51526A0(v19, (uint64_t *)&v44);
          v22 = *((_DWORD *)v18 + 4);
          v23 = *((_DWORD *)v21 + 4);
          v24 = v22 <= v23;
          v25 = v22 < v23;
          v26 = !v24;
          if (**(_BYTE **)(a3 + 8))
            v27 = v25;
          else
            v27 = v26;
          if ((v27 & 1) == 0)
          {
            v9 = sub_1C5153068(v9, a2, a3);
            goto LABEL_22;
          }
LABEL_17:
          v28 = sub_1C5153318(v9, a2, a3);
          if ((v29 & 1) == 0)
            goto LABEL_20;
          v30 = sub_1C5153588(v9, v28, a3);
          v9 = v28 + 2;
          if (!sub_1C5153588(v28 + 2, a2, a3))
          {
            v10 = v11 + 1;
            if (v30)
              continue;
LABEL_20:
            sub_1C51527D0(a1, v28, a3, -v11, a5 & 1);
            v9 = v28 + 2;
LABEL_22:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v28;
          if (v30)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          sub_1C5153BD8(v9, a2, a2, a3);
        return;
    }
  }
}

  v113 = (void ***)(a2 - 4);
  v111 = (void ***)(a2 - 12);
  v112 = (void ***)(a2 - 8);
  v120 = a2;
  while (2)
  {
    v5 = a1;
    v6 = (uint64_t)a2 - a1;
    v129 = (uint64_t)((uint64_t)a2 - a1) >> 5;
    switch((uint64_t)((uint64_t)a2 - a1) >> 5)
    {
      case 0:
      case 1:
        return;
      case 2:
        v141 = (uint64_t)*(a2 - 4);
        memset(v142, 0, sizeof(v142));
        v44 = a2;
        v45 = a2 - 3;
        sub_1C51F0A80(v142, (uint64_t)*(a2 - 3), (uint64_t)*(a2 - 2), 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)*(a2 - 2) - (_BYTE *)*(a2 - 3)) >> 4));
        v139 = *(void ***)a1;
        memset(v140, 0, sizeof(v140));
        sub_1C51F0A80(v140, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4));
        if ((_DWORD)v141 == (_DWORD)v139)
          v46 = HIDWORD(v141) < HIDWORD(v139);
        else
          v46 = v141 < v139;
        v188 = (void **)v140;
        sub_1C51EA488(&v188);
        v188 = (void **)v142;
        sub_1C51EA488(&v188);
        if (v46)
        {
          v188 = *(void ***)a1;
          v47 = v188;
          v48 = *(void **)(v5 + 24);
          v134 = *(_OWORD *)(v5 + 8);
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)(v5 + 24) = 0;
          *(_QWORD *)(v5 + 8) = 0;
          *(_QWORD *)v5 = *(v44 - 4);
          sub_1C51F0864((void **)(v5 + 8));
          *(_OWORD *)(v5 + 8) = *(_OWORD *)(v44 - 3);
          *(_QWORD *)(v5 + 24) = *(v44 - 1);
          *v45 = 0;
          v45[1] = 0;
          v45[2] = 0;
          *(v44 - 4) = v47;
          sub_1C51F0864(v45);
          *(_OWORD *)(v44 - 3) = v134;
          *(v44 - 1) = v48;
          v189 = 0;
          v190 = 0;
          v191 = 0;
          v185 = (void **)&v189;
          sub_1C51EA488(&v185);
        }
        return;
      case 3:
        sub_1C51F37F0(a1, (void ***)(a1 + 32), v113);
        return;
      case 4:
        sub_1C51F41E4(a1, a1 + 32, a1 + 64, (void **)v113);
        return;
      case 5:
        sub_1C51F3328((_QWORD *)a1, a1 + 32, a1 + 64, a1 + 96, (void **)v113);
        return;
      default:
        v124 = a1;
        if (v6 <= 767)
        {
          if ((a4 & 1) != 0)
          {
            if ((void **)a1 != a2)
            {
              v49 = (void ***)(a1 + 32);
              if ((void **)(a1 + 32) != v120)
              {
                v50 = 0;
                v51 = a1;
                do
                {
                  v52 = v49;
                  v188 = *(void ***)(v51 + 32);
                  v53 = *(_QWORD *)(v51 + 40);
                  v190 = 0;
                  v191 = 0;
                  v189 = 0;
                  sub_1C51F0A80(&v189, v53, *(_QWORD *)(v51 + 48), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v51 + 48) - v53) >> 4));
                  v185 = *(void ***)v51;
                  v187 = 0;
                  v186 = 0uLL;
                  sub_1C51F0A80(&v186, *(_QWORD *)(v51 + 8), *(_QWORD *)(v51 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v51 + 16) - *(_QWORD *)(v51 + 8)) >> 4));
                  if ((_DWORD)v188 == (_DWORD)v185)
                    v54 = HIDWORD(v188) < HIDWORD(v185);
                  else
                    v54 = v188 < v185;
                  v182 = (void **)&v186;
                  sub_1C51EA488(&v182);
                  v182 = (void **)&v189;
                  sub_1C51EA488(&v182);
                  if (v54)
                  {
                    v55 = *v52;
                    v183 = *(_OWORD *)(v51 + 40);
                    v56 = *(_QWORD *)(v51 + 56);
                    v182 = v55;
                    v184 = v56;
                    *(_QWORD *)(v51 + 48) = 0;
                    *(_QWORD *)(v51 + 56) = 0;
                    *(_QWORD *)(v51 + 40) = 0;
                    v57 = v50;
                    while (1)
                    {
                      v58 = a1 + v57;
                      *(_QWORD *)(a1 + v57 + 32) = *(_QWORD *)(a1 + v57);
                      sub_1C51F0864((void **)(a1 + v57 + 40));
                      *(_OWORD *)(v58 + 40) = *(_OWORD *)(v58 + 8);
                      *(_QWORD *)(v58 + 56) = *(_QWORD *)(v58 + 24);
                      *(_QWORD *)(v58 + 16) = 0;
                      *(_QWORD *)(v58 + 24) = 0;
                      *(_QWORD *)(v58 + 8) = 0;
                      if (!v57)
                        break;
                      v178 = v182;
                      v180 = 0;
                      v181 = 0;
                      v179 = 0;
                      sub_1C51F0A80(&v179, v183, *((uint64_t *)&v183 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v183 + 1) - v183) >> 4));
                      v175 = *(void ***)(v58 - 32);
                      v177 = 0;
                      v176 = 0uLL;
                      sub_1C51F0A80(&v176, *(_QWORD *)(v58 - 24), *(_QWORD *)(v58 - 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v58 - 16) - *(_QWORD *)(v58 - 24)) >> 4));
                      if ((_DWORD)v178 == (_DWORD)v175)
                        v59 = HIDWORD(v178) < HIDWORD(v175);
                      else
                        v59 = v178 < v175;
                      v172 = (void **)&v176;
                      sub_1C51EA488(&v172);
                      v172 = (void **)&v179;
                      sub_1C51EA488(&v172);
                      v57 -= 32;
                      if (!v59)
                      {
                        v60 = a1 + v57 + 32;
                        goto LABEL_111;
                      }
                    }
                    v60 = a1;
LABEL_111:
                    *(_QWORD *)v60 = v182;
                    sub_1C51F0864((void **)(v60 + 8));
                    *(_OWORD *)(v60 + 8) = v183;
                    *(_QWORD *)(v60 + 24) = v184;
                    v183 = 0uLL;
                    v184 = 0;
                    v172 = (void **)&v183;
                    sub_1C51EA488(&v172);
                  }
                  v49 = v52 + 4;
                  v50 += 32;
                  v51 = (unint64_t)v52;
                }
                while (v52 + 4 != (void ***)v120);
              }
            }
          }
          else if ((void **)a1 != a2)
          {
            v100 = a1 + 32;
            if ((void **)(a1 + 32) != v120)
            {
              v101 = (_QWORD *)(a1 + 56);
              do
              {
                v102 = v5;
                v5 = v100;
                v188 = *(void ***)(v102 + 32);
                v103 = *(_QWORD *)(v102 + 40);
                v190 = 0;
                v191 = 0;
                v189 = 0;
                sub_1C51F0A80(&v189, v103, *(_QWORD *)(v102 + 48), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v102 + 48) - v103) >> 4));
                v185 = *(void ***)v102;
                v187 = 0;
                v186 = 0uLL;
                sub_1C51F0A80(&v186, *(_QWORD *)(v102 + 8), *(_QWORD *)(v102 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v102 + 16) - *(_QWORD *)(v102 + 8)) >> 4));
                if ((_DWORD)v188 == (_DWORD)v185)
                  v104 = HIDWORD(v188) < HIDWORD(v185);
                else
                  v104 = v188 < v185;
                v182 = (void **)&v186;
                sub_1C51EA488(&v182);
                v182 = (void **)&v189;
                sub_1C51EA488(&v182);
                if (v104)
                {
                  v105 = *(void ***)v5;
                  v183 = *(_OWORD *)(v102 + 40);
                  v106 = *(_QWORD *)(v102 + 56);
                  v182 = v105;
                  v184 = v106;
                  *(_QWORD *)(v102 + 48) = 0;
                  *(_QWORD *)(v102 + 56) = 0;
                  *(_QWORD *)(v102 + 40) = 0;
                  v107 = v101;
                  do
                  {
                    v108 = v107;
                    *(v107 - 3) = *(v107 - 7);
                    sub_1C51F0864((void **)v107 - 2);
                    *((_OWORD *)v107 - 1) = *((_OWORD *)v107 - 3);
                    v109 = *(v107 - 4);
                    v107 -= 4;
                    *v108 = v109;
                    *v107 = 0;
                    *(v108 - 6) = 0;
                    *(v108 - 5) = 0;
                    v178 = v182;
                    v180 = 0;
                    v181 = 0;
                    v179 = 0;
                    sub_1C51F0A80(&v179, v183, *((uint64_t *)&v183 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v183 + 1) - v183) >> 4));
                    v175 = (void **)*(v108 - 11);
                    v177 = 0;
                    v176 = 0uLL;
                    sub_1C51F0A80(&v176, *(v108 - 10), *(v108 - 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(v108 - 9) - *(v108 - 10)) >> 4));
                    if ((_DWORD)v178 == (_DWORD)v175)
                      v110 = HIDWORD(v178) < HIDWORD(v175);
                    else
                      v110 = v178 < v175;
                    v172 = (void **)&v176;
                    sub_1C51EA488(&v172);
                    v172 = (void **)&v179;
                    sub_1C51EA488(&v172);
                  }
                  while (v110);
                  *(v107 - 3) = v182;
                  sub_1C51F0864((void **)v107 - 2);
                  *((_OWORD *)v107 - 1) = v183;
                  *v107 = v184;
                  v183 = 0uLL;
                  v184 = 0;
                  v172 = (void **)&v183;
                  sub_1C51EA488(&v172);
                }
                v100 = v5 + 32;
                v101 += 4;
              }
              while ((void **)(v5 + 32) != v120);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((void **)a1 != a2)
          {
            v128 = (unint64_t)(v129 - 2) >> 1;
            v61 = v128;
            do
            {
              v62 = v61;
              if (v128 >= v61)
              {
                v63 = a1 + 32 * ((2 * v61) | 1);
                if (2 * v61 + 2 >= v129)
                {
                  v64 = 0;
                }
                else
                {
                  v188 = *(void ***)v63;
                  v190 = 0;
                  v191 = 0;
                  v189 = 0;
                  sub_1C51F0A80(&v189, *(_QWORD *)(v63 + 8), *(_QWORD *)(v63 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v63 + 16) - *(_QWORD *)(v63 + 8)) >> 4));
                  v185 = *(void ***)(v63 + 32);
                  v187 = 0;
                  v186 = 0uLL;
                  sub_1C51F0A80(&v186, *(_QWORD *)(v63 + 40), *(_QWORD *)(v63 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v63 + 48) - *(_QWORD *)(v63 + 40)) >> 4));
                  v64 = (_DWORD)v188 == (_DWORD)v185
                      ? HIDWORD(v188) < HIDWORD(v185)
                      : v188 < v185;
                  v175 = (void **)&v186;
                  sub_1C51EA488(&v175);
                  v175 = (void **)&v189;
                  sub_1C51EA488(&v175);
                }
                v65 = (_QWORD *)(a1 + 32 * v62);
                v116 = v64;
                v66 = v63 + 32 * v64;
                v182 = *(void ***)v66;
                v184 = 0;
                v183 = 0uLL;
                sub_1C51F0A80(&v183, *(_QWORD *)(v66 + 8), *(_QWORD *)(v66 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v66 + 16) - *(_QWORD *)(v66 + 8)) >> 4));
                v178 = (void **)*v65;
                v118 = v62;
                v180 = 0;
                v181 = 0;
                v179 = 0;
                v67 = (__int128 *)(v65 + 1);
                sub_1C51F0A80(&v179, v65[1], v65[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65[2] - v65[1]) >> 4));
                v68 = (_DWORD)v182 == (_DWORD)v178
                    ? HIDWORD(v182) < HIDWORD(v178)
                    : v182 < v178;
                v175 = (void **)&v179;
                sub_1C51EA488(&v175);
                v175 = (void **)&v183;
                sub_1C51EA488(&v175);
                if (!v68)
                {
                  if (v116)
                    v69 = 2 * v62 + 2;
                  else
                    v69 = (2 * v62) | 1;
                  v175 = (void **)*v65;
                  v176 = *v67;
                  v177 = v65[3];
                  *(_QWORD *)v67 = 0;
                  v65[2] = 0;
                  v65[3] = 0;
                  while (1)
                  {
                    v70 = v66;
                    *v65 = *(_QWORD *)v66;
                    sub_1C51F0864((void **)v65 + 1);
                    v71 = (void **)(v66 + 8);
                    *(_OWORD *)(v65 + 1) = *(_OWORD *)(v66 + 8);
                    v65[3] = *(_QWORD *)(v66 + 24);
                    *(_QWORD *)(v66 + 8) = 0;
                    *(_QWORD *)(v66 + 16) = 0;
                    *(_QWORD *)(v66 + 24) = 0;
                    if (v128 < v69)
                      break;
                    v72 = (2 * v69) | 1;
                    v73 = a1 + 32 * v72;
                    v69 = 2 * v69 + 2;
                    if (v69 >= v129)
                    {
                      v75 = 0;
                      v66 = a1 + 32 * v72;
                      v69 = v72;
                    }
                    else
                    {
                      v172 = *(void ***)v73;
                      v174 = 0;
                      v173 = 0uLL;
                      sub_1C51F0A80(&v173, *(_QWORD *)(v73 + 8), *(_QWORD *)(v73 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v73 + 16) - *(_QWORD *)(v73 + 8)) >> 4));
                      v168 = *(void ***)(v73 + 32);
                      v170 = 0;
                      v171 = 0;
                      v169 = 0;
                      sub_1C51F0A80(&v169, *(_QWORD *)(v73 + 40), *(_QWORD *)(v73 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v73 + 48) - *(_QWORD *)(v73 + 40)) >> 4));
                      if ((_DWORD)v172 == (_DWORD)v168)
                        v74 = HIDWORD(v172) < HIDWORD(v168);
                      else
                        v74 = v172 < v168;
                      v155 = (void **)&v169;
                      sub_1C51EA488(&v155);
                      v155 = (void **)&v173;
                      sub_1C51EA488(&v155);
                      v75 = v74;
                      v66 = v73 + 32 * v75;
                      if (!v74)
                        v69 = v72;
                    }
                    v164 = *(void ***)v66;
                    v166 = 0;
                    v167 = 0;
                    v165 = 0;
                    sub_1C51F0A80(&v165, *(_QWORD *)(v73 + 32 * v75 + 8), *(_QWORD *)(v73 + 32 * v75 + 16), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v73 + 32 * v75 + 16) - *(_QWORD *)(v73 + 32 * v75 + 8)) >> 4));
                    v76 = v175;
                    v160 = v175;
                    v162 = 0;
                    v163 = 0;
                    v161 = 0;
                    sub_1C51F0A80(&v161, v176, *((uint64_t *)&v176 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v176 + 1) - v176) >> 4));
                    if ((_DWORD)v164 == (_DWORD)v160)
                      v77 = HIDWORD(v164) < HIDWORD(v160);
                    else
                      v77 = v164 < v160;
                    v155 = (void **)&v161;
                    sub_1C51EA488(&v155);
                    v155 = (void **)&v165;
                    sub_1C51EA488(&v155);
                    v65 = (_QWORD *)v70;
                    if (v77)
                      goto LABEL_146;
                  }
                  v76 = v175;
LABEL_146:
                  *(_QWORD *)v70 = v76;
                  sub_1C51F0864(v71);
                  *(_OWORD *)(v70 + 8) = v176;
                  *(_QWORD *)(v70 + 24) = v177;
                  v176 = 0uLL;
                  v177 = 0;
                  v155 = (void **)&v176;
                  sub_1C51EA488(&v155);
                  v62 = v118;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v78 = a1;
            v123 = (_QWORD *)(a1 + 8);
            v79 = v120;
            do
            {
              v121 = v79;
              v80 = 0;
              v81 = *(void ***)v78;
              v174 = 0;
              v173 = 0uLL;
              v173 = *(_OWORD *)(v78 + 8);
              v82 = *(void **)(v78 + 24);
              v172 = v81;
              v174 = v82;
              *v123 = 0;
              v123[1] = 0;
              v123[2] = 0;
              do
              {
                v83 = v78 + 32 * (v80 + 1);
                v84 = (2 * v80) | 1;
                v80 = 2 * v80 + 2;
                if (v80 >= v129)
                {
                  v86 = 0;
                  v87 = v83;
                  v80 = v84;
                }
                else
                {
                  v188 = *(void ***)v83;
                  v190 = 0;
                  v191 = 0;
                  v189 = 0;
                  sub_1C51F0A80(&v189, *(_QWORD *)(v83 + 8), *(_QWORD *)(v83 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v83 + 16) - *(_QWORD *)(v83 + 8)) >> 4));
                  v185 = *(void ***)(v83 + 32);
                  v187 = 0;
                  v186 = 0uLL;
                  sub_1C51F0A80(&v186, *(_QWORD *)(v83 + 40), *(_QWORD *)(v83 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v83 + 48) - *(_QWORD *)(v83 + 40)) >> 4));
                  if ((_DWORD)v188 == (_DWORD)v185)
                    v85 = HIDWORD(v188) < HIDWORD(v185);
                  else
                    v85 = v188 < v185;
                  v182 = (void **)&v186;
                  sub_1C51EA488(&v182);
                  v182 = (void **)&v189;
                  sub_1C51EA488(&v182);
                  v86 = v85;
                  v87 = v83 + 32 * v86;
                  if (!v85)
                    v80 = v84;
                }
                *(_QWORD *)v78 = *(_QWORD *)v87;
                v88 = (uint64_t *)(v83 + 32 * v86);
                sub_1C51F0864((void **)(v78 + 8));
                v89 = v88 + 1;
                *(_OWORD *)(v78 + 8) = *(_OWORD *)(v88 + 1);
                v90 = v88 + 3;
                *(_QWORD *)(v78 + 24) = v88[3];
                v88[1] = 0;
                v88[2] = 0;
                v88[3] = 0;
                v78 = v87;
              }
              while (v80 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
              v79 -= 4;
              if ((void **)v87 == v121 - 4)
              {
                *(_QWORD *)v87 = v172;
                sub_1C51F0864((void **)v88 + 1);
                *(_OWORD *)v89 = v173;
                *v90 = (uint64_t)v174;
                v78 = v124;
                v173 = 0uLL;
                v174 = 0;
              }
              else
              {
                *(_QWORD *)v87 = *(v121 - 4);
                sub_1C51F0864((void **)v88 + 1);
                v91 = v121 - 3;
                *(_OWORD *)v89 = *(_OWORD *)(v121 - 3);
                *v90 = (uint64_t)*(v121 - 1);
                *v91 = 0;
                v91[1] = 0;
                v91[2] = 0;
                *(v121 - 4) = v172;
                sub_1C51F0864(v121 - 3);
                *(_OWORD *)v91 = v173;
                *(v121 - 1) = v174;
                v92 = v87 - v124 + 32;
                v173 = 0uLL;
                v174 = 0;
                if (v92 >= 33)
                {
                  v93 = (((unint64_t)v92 >> 5) - 2) >> 1;
                  v94 = v124 + 32 * v93;
                  v188 = *(void ***)v94;
                  v190 = 0;
                  v191 = 0;
                  v189 = 0;
                  sub_1C51F0A80(&v189, *(_QWORD *)(v94 + 8), *(_QWORD *)(v94 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v94 + 16) - *(_QWORD *)(v94 + 8)) >> 4));
                  v185 = *(void ***)v87;
                  v187 = 0;
                  v186 = 0uLL;
                  sub_1C51F0A80(&v186, *v89, v88[2], 0xAAAAAAAAAAAAAAABLL * ((v88[2] - *v89) >> 4));
                  v95 = (_DWORD)v188 == (_DWORD)v185
                      ? HIDWORD(v188) < HIDWORD(v185)
                      : v188 < v185;
                  v182 = (void **)&v186;
                  sub_1C51EA488(&v182);
                  v182 = (void **)&v189;
                  sub_1C51EA488(&v182);
                  if (v95)
                  {
                    v182 = *(void ***)v87;
                    v184 = 0;
                    v183 = 0uLL;
                    v183 = *(_OWORD *)v89;
                    v184 = *v90;
                    *v89 = 0;
                    v88[2] = 0;
                    v88[3] = 0;
                    do
                    {
                      v96 = v94;
                      *(_QWORD *)v87 = *(_QWORD *)v94;
                      sub_1C51F0864((void **)(v87 + 8));
                      v97 = (void **)(v94 + 8);
                      *(_OWORD *)(v87 + 8) = *(_OWORD *)(v94 + 8);
                      *(_QWORD *)(v87 + 24) = *(_QWORD *)(v94 + 24);
                      *(_QWORD *)(v94 + 8) = 0;
                      *(_QWORD *)(v94 + 16) = 0;
                      *(_QWORD *)(v94 + 24) = 0;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = v124 + 32 * v93;
                      v178 = *(void ***)v94;
                      v180 = 0;
                      v181 = 0;
                      v179 = 0;
                      sub_1C51F0A80(&v179, *(_QWORD *)(v94 + 8), *(_QWORD *)(v94 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v94 + 16) - *(_QWORD *)(v94 + 8)) >> 4));
                      v175 = v182;
                      v177 = 0;
                      v176 = 0uLL;
                      sub_1C51F0A80(&v176, v183, *((uint64_t *)&v183 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v183 + 1) - v183) >> 4));
                      v98 = (_DWORD)v178 == (_DWORD)v175
                          ? HIDWORD(v178) < HIDWORD(v175)
                          : v178 < v175;
                      v168 = (void **)&v176;
                      sub_1C51EA488(&v168);
                      v168 = (void **)&v179;
                      sub_1C51EA488(&v168);
                      v87 = v96;
                    }
                    while (v98);
                    *(_QWORD *)v96 = v182;
                    sub_1C51F0864(v97);
                    *(_OWORD *)(v96 + 8) = v183;
                    *(_QWORD *)(v96 + 24) = v184;
                    v183 = 0uLL;
                    v184 = 0;
                    v168 = (void **)&v183;
                    sub_1C51EA488(&v168);
                  }
                }
                v78 = v124;
              }
              v188 = (void **)&v173;
              sub_1C51EA488(&v188);
            }
            while (v129-- > 2);
          }
          return;
        }
        v7 = (unint64_t)v129 >> 1;
        v8 = v5 + 32 * ((unint64_t)v129 >> 1);
        if ((unint64_t)v6 <= 0x1000)
        {
          sub_1C51F37F0(v5 + 32 * ((unint64_t)v129 >> 1), (void ***)v5, v113);
        }
        else
        {
          sub_1C51F37F0(v5, (void ***)(v5 + 32 * ((unint64_t)v129 >> 1)), v113);
          sub_1C51F37F0(v5 + 32, (void ***)(v8 - 32), v112);
          sub_1C51F37F0(v5 + 64, (void ***)(v5 + 32 + 32 * v7), v111);
          sub_1C51F37F0(v8 - 32, (void ***)v8, (void ***)(v5 + 32 + 32 * v7));
          v188 = *(void ***)v5;
          v9 = v188;
          v125 = *(_OWORD *)(v5 + 8);
          v130 = *(_QWORD *)(v5 + 24);
          *(_QWORD *)(v5 + 8) = 0;
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)(v5 + 24) = 0;
          *(_QWORD *)v5 = *(_QWORD *)v8;
          sub_1C51F0864((void **)(v5 + 8));
          *(_OWORD *)(v5 + 8) = *(_OWORD *)(v8 + 8);
          *(_QWORD *)(v5 + 24) = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = 0;
          *(_QWORD *)v8 = v9;
          sub_1C51F0864((void **)(v8 + 8));
          *(_OWORD *)(v8 + 8) = v125;
          *(_QWORD *)(v8 + 24) = v130;
          v189 = 0;
          v190 = 0;
          v191 = 0;
          v185 = (void **)&v189;
          sub_1C51EA488(&v185);
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v137 = *(_QWORD *)(v5 - 32);
          memset(v138, 0, sizeof(v138));
          sub_1C51F0A80(v138, *(_QWORD *)(v5 - 24), *(_QWORD *)(v5 - 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 - 16) - *(_QWORD *)(v5 - 24)) >> 4));
          v135 = *(void ***)v5;
          memset(v136, 0, sizeof(v136));
          sub_1C51F0A80(v136, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 4));
          v10 = (_DWORD)v137 == (_DWORD)v135 ? HIDWORD(v137) >= HIDWORD(v135) : v137 >= v135;
          v188 = (void **)v136;
          sub_1C51EA488(&v188);
          v188 = (void **)v138;
          sub_1C51EA488(&v188);
          if (v10)
          {
            v29 = *(void ***)v5;
            v187 = 0;
            v186 = 0uLL;
            v186 = *(_OWORD *)(v5 + 8);
            v30 = *(_QWORD *)(v5 + 24);
            v185 = v29;
            v187 = v30;
            *(_QWORD *)(v5 + 8) = 0;
            *(_QWORD *)(v5 + 16) = 0;
            *(_QWORD *)(v5 + 24) = 0;
            v182 = v29;
            v184 = 0;
            v183 = 0uLL;
            sub_1C51F0A80(&v183, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
            v178 = (void **)*(v120 - 4);
            v180 = 0;
            v181 = 0;
            v179 = 0;
            sub_1C51F0A80(&v179, (uint64_t)*(v120 - 3), (uint64_t)*(v120 - 2), 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)*(v120 - 2) - (_BYTE *)*(v120 - 3)) >> 4));
            if ((_DWORD)v182 == (_DWORD)v178)
              v31 = HIDWORD(v182) < HIDWORD(v178);
            else
              v31 = v182 < v178;
            v188 = (void **)&v179;
            sub_1C51EA488(&v188);
            v188 = (void **)&v183;
            sub_1C51EA488(&v188);
            if (v31)
            {
              a1 = v5;
              do
              {
                v175 = v185;
                v177 = 0;
                v176 = 0uLL;
                sub_1C51F0A80(&v176, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
                v32 = *(void ***)(a1 + 32);
                a1 += 32;
                v172 = v32;
                v174 = 0;
                v173 = 0uLL;
                sub_1C51F0A80(&v173, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4));
                if ((_DWORD)v175 == (_DWORD)v172)
                  v33 = HIDWORD(v175) < HIDWORD(v172);
                else
                  v33 = v175 < v172;
                v188 = (void **)&v173;
                sub_1C51EA488(&v188);
                v188 = (void **)&v176;
                sub_1C51EA488(&v188);
              }
              while (!v33);
            }
            else
            {
              v34 = v5 + 32;
              do
              {
                a1 = v34;
                if (v34 >= (unint64_t)v120)
                  break;
                v168 = v185;
                v170 = 0;
                v171 = 0;
                v169 = 0;
                sub_1C51F0A80(&v169, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
                v164 = *(void ***)a1;
                v166 = 0;
                v167 = 0;
                v165 = 0;
                sub_1C51F0A80(&v165, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4));
                v35 = (_DWORD)v168 == (_DWORD)v164
                    ? HIDWORD(v168) >= HIDWORD(v164)
                    : v168 >= v164;
                v188 = (void **)&v165;
                sub_1C51EA488(&v188);
                v188 = (void **)&v169;
                sub_1C51EA488(&v188);
                v34 = a1 + 32;
              }
              while (v35);
            }
            v36 = v120;
            if (a1 < (unint64_t)v120)
            {
              v36 = v120;
              do
              {
                v160 = v185;
                v162 = 0;
                v163 = 0;
                v161 = 0;
                sub_1C51F0A80(&v161, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
                v37 = (void **)*(v36 - 4);
                v36 -= 4;
                v155 = v37;
                v157 = 0;
                v158 = 0;
                v156 = 0;
                sub_1C51F0A80(&v156, (uint64_t)v36[1], (uint64_t)v36[2], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v36[2] - (_BYTE *)v36[1]) >> 4));
                if ((_DWORD)v160 == (_DWORD)v155)
                  v38 = HIDWORD(v160) < HIDWORD(v155);
                else
                  v38 = v160 < v155;
                v188 = (void **)&v156;
                sub_1C51EA488(&v188);
                v188 = (void **)&v161;
                sub_1C51EA488(&v188);
              }
              while (v38);
            }
            while (a1 < (unint64_t)v36)
            {
              v188 = *(void ***)a1;
              v39 = v188;
              v133 = *(_OWORD *)(a1 + 8);
              v127 = *(void **)(a1 + 24);
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)a1 = *v36;
              sub_1C51F0864((void **)(a1 + 8));
              *(_OWORD *)(a1 + 8) = *(_OWORD *)(v36 + 1);
              *(_QWORD *)(a1 + 24) = v36[3];
              v36[1] = 0;
              v36[2] = 0;
              v36[3] = 0;
              *v36 = v39;
              sub_1C51F0864(v36 + 1);
              *(_OWORD *)(v36 + 1) = v133;
              v36[3] = v127;
              v189 = 0;
              v190 = 0;
              v191 = 0;
              v159 = (void **)&v189;
              sub_1C51EA488(&v159);
              do
              {
                v151 = v185;
                v153 = 0;
                v154 = 0;
                v152 = 0;
                sub_1C51F0A80(&v152, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
                v40 = *(void ***)(a1 + 32);
                a1 += 32;
                v147 = v40;
                v149 = 0;
                v150 = 0;
                v148 = 0;
                sub_1C51F0A80(&v148, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4));
                if ((_DWORD)v151 == (_DWORD)v147)
                  v41 = HIDWORD(v151) < HIDWORD(v147);
                else
                  v41 = v151 < v147;
                v188 = (void **)&v148;
                sub_1C51EA488(&v188);
                v188 = (void **)&v152;
                sub_1C51EA488(&v188);
              }
              while (!v41);
              do
              {
                v145 = v185;
                memset(v146, 0, sizeof(v146));
                sub_1C51F0A80(v146, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
                v42 = (uint64_t)*(v36 - 4);
                v36 -= 4;
                v143 = v42;
                memset(v144, 0, sizeof(v144));
                sub_1C51F0A80(v144, (uint64_t)v36[1], (uint64_t)v36[2], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v36[2] - (_BYTE *)v36[1]) >> 4));
                if ((_DWORD)v145 == (_DWORD)v143)
                  v43 = HIDWORD(v145) < HIDWORD(v143);
                else
                  v43 = v145 < v143;
                v188 = (void **)v144;
                sub_1C51EA488(&v188);
                v188 = (void **)v146;
                sub_1C51EA488(&v188);
              }
              while (v43);
            }
            if (a1 - 32 != v124)
            {
              *(_QWORD *)v124 = *(_QWORD *)(a1 - 32);
              sub_1C51F0864((void **)(v5 + 8));
              *(_OWORD *)(v124 + 8) = *(_OWORD *)(a1 - 24);
              *(_QWORD *)(v124 + 24) = *(_QWORD *)(a1 - 8);
              *(_QWORD *)(a1 - 24) = 0;
              *(_QWORD *)(a1 - 16) = 0;
              *(_QWORD *)(a1 - 8) = 0;
            }
            *(_QWORD *)(a1 - 32) = v185;
            sub_1C51F0864((void **)(a1 - 24));
            *(_OWORD *)(a1 - 24) = v186;
            *(_QWORD *)(a1 - 8) = v187;
            v186 = 0uLL;
            v187 = 0;
            v188 = (void **)&v186;
            sub_1C51EA488(&v188);
            a4 = 0;
            a2 = v120;
            continue;
          }
        }
        v11 = 0;
        v12 = *(void ***)v5;
        v187 = 0;
        v186 = 0uLL;
        v186 = *(_OWORD *)(v5 + 8);
        v13 = *(_QWORD *)(v5 + 24);
        v185 = v12;
        v187 = v13;
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        v115 = (void **)(v5 + 8);
        *(_QWORD *)(v5 + 24) = 0;
        do
        {
          v182 = *(void ***)(v5 + v11 + 32);
          v184 = 0;
          v183 = 0uLL;
          sub_1C51F0A80(&v183, *(_QWORD *)(v5 + v11 + 40), *(_QWORD *)(v5 + v11 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + v11 + 48) - *(_QWORD *)(v5 + v11 + 40)) >> 4));
          v178 = v185;
          v180 = 0;
          v181 = 0;
          v179 = 0;
          sub_1C51F0A80(&v179, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
          if ((_DWORD)v182 == (_DWORD)v178)
            v14 = HIDWORD(v182) < HIDWORD(v178);
          else
            v14 = v182 < v178;
          v188 = (void **)&v179;
          sub_1C51EA488(&v188);
          v188 = (void **)&v183;
          sub_1C51EA488(&v188);
          v11 += 32;
        }
        while (v14);
        v122 = v5 + v11;
        v15 = v120;
        if (v11 == 32)
        {
          v15 = v120;
          do
          {
            if (v122 >= (unint64_t)v15)
              break;
            v175 = (void **)*(v15 - 4);
            v177 = 0;
            v176 = 0uLL;
            v18 = v15 - 4;
            sub_1C51F0A80(&v176, (uint64_t)*(v15 - 3), (uint64_t)*(v15 - 2), 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)*(v15 - 2) - (_BYTE *)*(v15 - 3)) >> 4));
            v172 = v185;
            v174 = 0;
            v173 = 0uLL;
            sub_1C51F0A80(&v173, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
            v19 = (_DWORD)v175 == (_DWORD)v172
                ? HIDWORD(v175) >= HIDWORD(v172)
                : v175 >= v172;
            v188 = (void **)&v173;
            sub_1C51EA488(&v188);
            v188 = (void **)&v176;
            sub_1C51EA488(&v188);
            v15 = v18;
          }
          while (v19);
        }
        else
        {
          do
          {
            v168 = (void **)*(v15 - 4);
            v170 = 0;
            v171 = 0;
            v169 = 0;
            v16 = v15 - 4;
            sub_1C51F0A80(&v169, (uint64_t)*(v15 - 3), (uint64_t)*(v15 - 2), 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)*(v15 - 2) - (_BYTE *)*(v15 - 3)) >> 4));
            v164 = v185;
            v166 = 0;
            v167 = 0;
            v165 = 0;
            sub_1C51F0A80(&v165, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
            if ((_DWORD)v168 == (_DWORD)v164)
              v17 = HIDWORD(v168) < HIDWORD(v164);
            else
              v17 = v168 < v164;
            v188 = (void **)&v165;
            sub_1C51EA488(&v188);
            v188 = (void **)&v169;
            sub_1C51EA488(&v188);
            v15 = v16;
          }
          while (!v17);
        }
        a1 = v122;
        v117 = v15;
        if (v122 < (unint64_t)v15)
        {
          v20 = (unint64_t)v15;
          do
          {
            v188 = *(void ***)a1;
            v21 = v188;
            v126 = *(_OWORD *)(a1 + 8);
            v131 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)a1 = *(_QWORD *)v20;
            sub_1C51F0864((void **)(a1 + 8));
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v20 + 8);
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v20 + 24);
            *(_QWORD *)(v20 + 8) = 0;
            *(_QWORD *)(v20 + 16) = 0;
            *(_QWORD *)(v20 + 24) = 0;
            *(_QWORD *)v20 = v21;
            sub_1C51F0864((void **)(v20 + 8));
            *(_OWORD *)(v20 + 8) = v126;
            *(_QWORD *)(v20 + 24) = v131;
            v189 = 0;
            v190 = 0;
            v191 = 0;
            v145 = (void **)&v189;
            sub_1C51EA488(&v145);
            do
            {
              v22 = *(void ***)(a1 + 32);
              a1 += 32;
              v160 = v22;
              v162 = 0;
              v163 = 0;
              v161 = 0;
              sub_1C51F0A80(&v161, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4));
              v155 = v185;
              v157 = 0;
              v158 = 0;
              v156 = 0;
              sub_1C51F0A80(&v156, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
              if ((_DWORD)v160 == (_DWORD)v155)
                v23 = HIDWORD(v160) < HIDWORD(v155);
              else
                v23 = v160 < v155;
              v188 = (void **)&v156;
              sub_1C51EA488(&v188);
              v188 = (void **)&v161;
              sub_1C51EA488(&v188);
            }
            while (v23);
            do
            {
              v24 = *(void ***)(v20 - 32);
              v20 -= 32;
              v151 = v24;
              v153 = 0;
              v154 = 0;
              v152 = 0;
              sub_1C51F0A80(&v152, *(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 4));
              v147 = v185;
              v149 = 0;
              v150 = 0;
              v148 = 0;
              sub_1C51F0A80(&v148, v186, *((uint64_t *)&v186 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 4));
              if ((_DWORD)v151 == (_DWORD)v147)
                v25 = HIDWORD(v151) < HIDWORD(v147);
              else
                v25 = v151 < v147;
              v188 = (void **)&v148;
              sub_1C51EA488(&v188);
              v188 = (void **)&v152;
              sub_1C51EA488(&v188);
            }
            while (!v25);
          }
          while (a1 < v20);
        }
        v26 = v124;
        v132 = (void **)(a1 - 32);
        if (a1 - 32 != v124)
        {
          *(_QWORD *)v124 = *(_QWORD *)(a1 - 32);
          sub_1C51F0864(v115);
          *(_OWORD *)(v124 + 8) = *(_OWORD *)(a1 - 24);
          *(_QWORD *)(v124 + 24) = *(_QWORD *)(a1 - 8);
          *(_QWORD *)(a1 - 24) = 0;
          *(_QWORD *)(a1 - 16) = 0;
          *(_QWORD *)(a1 - 8) = 0;
        }
        *(_QWORD *)(a1 - 32) = v185;
        sub_1C51F0864((void **)(a1 - 24));
        *(_OWORD *)(a1 - 24) = v186;
        *(_QWORD *)(a1 - 8) = v187;
        v186 = 0uLL;
        v187 = 0;
        v188 = (void **)&v186;
        sub_1C51EA488(&v188);
        a2 = v120;
        if (v122 < (unint64_t)v117)
        {
LABEL_47:
          v28 = a2;
          sub_1C51F17BC(v26, v132, a3, a4 & 1);
          a2 = v28;
          a4 = 0;
          continue;
        }
        v27 = sub_1C51F3D90(v124, v132);
        if (!sub_1C51F3D90(a1, v120))
        {
          a2 = v120;
          v26 = v124;
          if (v27)
            continue;
          goto LABEL_47;
        }
        a2 = (void **)(a1 - 32);
        a1 = v124;
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = (__int128 *)&a2[-1];
        v21 = a2[-1].n128_u32[0];
        if (v21 < v9->n128_u32[0] || v21 == v9->n128_u32[0] && a2[-1].n128_u64[1] < v9->n128_u64[1])
        {
          v23 = (__int128)*v9;
          *v9 = (__n128)*v20;
          *v20 = v23;
        }
        return;
      case 3uLL:
        sub_1C5215BB4((__int128 *)v9, (unsigned int *)&v9[1], (__int128 *)&a2[-1]);
        return;
      case 4uLL:
        sub_1C5216144((uint64_t)v9, (uint64_t)&v9[1], (uint64_t)&v9[2], (uint64_t)&a2[-1]);
        return;
      case 5uLL:
        sub_1C5216228(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_1C5215A58(v9, a2);
          else
            sub_1C5215B30((uint64_t)v9, (uint64_t)a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (unsigned int *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x801)
          {
            sub_1C5215BB4((__int128 *)&v9[v13 >> 1], (unsigned int *)v9, (__int128 *)&a2[-1]);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            sub_1C5215BB4((__int128 *)v9, (unsigned int *)&v9[v13 >> 1], (__int128 *)&a2[-1]);
            sub_1C5215BB4((__int128 *)&v9[1], v15 - 4, (__int128 *)&a2[-2]);
            sub_1C5215BB4((__int128 *)&v9[2], (unsigned int *)&v9[v14 + 1], (__int128 *)&a2[-3]);
            sub_1C5215BB4((__int128 *)v15 - 1, v15, (__int128 *)&v9[v14 + 1]);
            v22 = (__int128)*v9;
            *v9 = *(__n128 *)v15;
            *(_OWORD *)v15 = v22;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v16 = v9[-1].n128_u32[0];
          if (v16 >= v9->n128_u32[0] && (v16 != v9->n128_u32[0] || v9[-1].n128_u64[1] >= v9->n128_u64[1]))
          {
            v9 = (__n128 *)sub_1C5215CDC(v9, (unint64_t)a2);
            goto LABEL_18;
          }
LABEL_13:
          v17 = sub_1C5215E0C((uint64_t *)v9, (unint64_t)a2);
          if ((v18 & 1) == 0)
            goto LABEL_16;
          v19 = sub_1C5215F4C((uint64_t)v9, v17);
          v9 = (__n128 *)(v17 + 16);
          if (!sub_1C5215F4C(v17 + 16, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_16:
            sub_1C52156E0(a1, v17, a3, -v11, a5 & 1);
            v9 = (__n128 *)(v17 + 16);
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__n128 *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          sub_1C5216354((uint64_t)v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = (unint64_t *)(a2 - 24);
  j = a1;
  while (2)
  {
    a1 = j;
    v11 = a2 - j;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - j) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v77 = *(_DWORD *)(j + 20);
        v78 = *(_DWORD *)(a2 - 4);
        v79 = v78 > v77;
        if (v78 == v77 && (v80 = *(_DWORD *)(a2 - 8), v81 = *(_DWORD *)(j + 16), v79 = v80 > v81, v80 == v81))
        {
          if (*v9 >= *(_QWORD *)j)
            return;
        }
        else if (!v79)
        {
          return;
        }
        v183 = *(_QWORD *)(j + 16);
        v178 = *(__n128 *)j;
        v162 = *(_OWORD *)v9;
        *(_QWORD *)(j + 16) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)j = v162;
        *(_QWORD *)(a2 - 8) = v183;
        *(__n128 *)v9 = v178;
        return;
      case 3:
        sub_1C52AB288(j, j + 24, a2 - 24, a5);
        return;
      case 4:
        sub_1C52AB690(j, j + 24, j + 48, a2 - 24, a5);
        return;
      case 5:
        sub_1C52AB0E0(j, j + 24, j + 48, j + 72, a2 - 24, a5);
        return;
      default:
        if (v11 <= 575)
        {
          v82 = (_QWORD *)(j + 24);
          v84 = j == a2 || v82 == (_QWORD *)a2;
          if ((a4 & 1) == 0)
          {
            if (v84)
              return;
            while (1)
            {
              v163 = a1;
              a1 = (uint64_t)v82;
              v164 = *(_DWORD *)(v163 + 20);
              v165 = *(_DWORD *)(v163 + 44);
              if (v165 == v164)
              {
                v166 = *(_DWORD *)(v163 + 40);
                v167 = *(_DWORD *)(v163 + 16);
                if (v166 == v167)
                {
                  if (*(_QWORD *)a1 >= *(_QWORD *)v163)
                    goto LABEL_250;
                  goto LABEL_241;
                }
                if (v166 > v167)
                  goto LABEL_241;
              }
              else if (v165 > v164)
              {
                v166 = *(_DWORD *)(v163 + 40);
LABEL_241:
                v168 = *(_QWORD *)a1;
                v169 = *(_QWORD *)(v163 + 32);
                for (i = a1; ; i -= 24)
                {
                  *(_OWORD *)i = *(_OWORD *)(i - 24);
                  *(_QWORD *)(i + 16) = *(_QWORD *)(i - 8);
                  v171 = *(_DWORD *)(i - 28);
                  v172 = v165 > v171;
                  if (v165 == v171 && (v173 = *(_DWORD *)(i - 32), v172 = v166 > v173, v166 == v173))
                  {
                    if (v168 >= *(_QWORD *)(i - 48))
                      goto LABEL_249;
                  }
                  else if (!v172)
                  {
LABEL_249:
                    *(_QWORD *)(i - 24) = v168;
                    *(_QWORD *)(i - 16) = v169;
                    *(_DWORD *)(i - 8) = v166;
                    *(_DWORD *)(i - 4) = v165;
                    break;
                  }
                }
              }
LABEL_250:
              v82 = (_QWORD *)(a1 + 24);
              if (a1 + 24 == a2)
                return;
            }
          }
          if (v84)
            return;
          v85 = 0;
          v86 = (_QWORD *)j;
LABEL_133:
          v87 = v86;
          v86 = v82;
          v88 = *((_DWORD *)v87 + 5);
          v89 = *((_DWORD *)v87 + 11);
          if (v89 == v88)
          {
            v90 = *((_DWORD *)v87 + 10);
            v91 = *((_DWORD *)v87 + 4);
            if (v90 == v91)
            {
              if (*v86 >= *v87)
                goto LABEL_154;
            }
            else if (v90 <= v91)
            {
              goto LABEL_154;
            }
          }
          else
          {
            if (v89 <= v88)
              goto LABEL_154;
            v90 = *((_DWORD *)v87 + 10);
          }
          v93 = v87[3];
          v92 = v87[4];
          v94 = v87[2];
          *(_OWORD *)v86 = *(_OWORD *)v87;
          v86[2] = v94;
          v95 = j;
          if (v87 == (_QWORD *)j)
            goto LABEL_153;
          v96 = v85;
          while (1)
          {
            v97 = j + v96;
            v98 = (unint64_t *)(j + v96 - 24);
            v99 = *(_DWORD *)(j + v96 - 4);
            if (v89 == v99)
            {
              v100 = *(_DWORD *)(v97 - 8);
              if (v90 == v100)
              {
                if (v93 >= *v98)
                  goto LABEL_152;
              }
              else if (v90 <= v100)
              {
                v95 = j + v96;
                goto LABEL_153;
              }
            }
            else if (v89 <= v99)
            {
LABEL_152:
              v95 = (unint64_t)v87;
LABEL_153:
              *(_QWORD *)v95 = v93;
              *(_QWORD *)(v95 + 8) = v92;
              *(_DWORD *)(v95 + 16) = v90;
              *(_DWORD *)(v95 + 20) = v89;
LABEL_154:
              v82 = v86 + 3;
              v85 += 24;
              if (v86 + 3 == (_QWORD *)a2)
                return;
              goto LABEL_133;
            }
            v87 -= 3;
            *(_OWORD *)v97 = *(_OWORD *)v98;
            *(_QWORD *)(v97 + 16) = *(_QWORD *)(j + v96 - 8);
            v96 -= 24;
            if (!v96)
            {
              v95 = j;
              goto LABEL_153;
            }
          }
        }
        if (!a3)
        {
          if (j == a2)
            return;
          v101 = (unint64_t)(v12 - 2) >> 1;
          v102 = v101;
          while (1)
          {
            v103 = v102;
            if (v101 >= v102)
            {
              v104 = (2 * v102) | 1;
              v105 = j + 24 * v104;
              if (2 * v103 + 2 < v12)
              {
                v106 = *(_DWORD *)(v105 + 44);
                v107 = *(_DWORD *)(j + 24 * v104 + 20);
                v108 = v107 > v106;
                if (v107 == v106
                  && (v109 = *(_DWORD *)(j + 24 * v104 + 16),
                      v110 = *(_DWORD *)(v105 + 40),
                      v108 = v109 > v110,
                      v109 == v110))
                {
                  v111 = *(_QWORD *)v105 < *(_QWORD *)(v105 + 24);
                }
                else
                {
                  v111 = v108;
                }
                if (v111)
                {
                  v105 += 24;
                  v104 = 2 * v103 + 2;
                }
              }
              v112 = j + 24 * v103;
              v113 = *(_DWORD *)(v112 + 20);
              v114 = *(_DWORD *)(v105 + 20);
              if (v114 == v113)
              {
                v115 = *(_DWORD *)(v105 + 16);
                v116 = *(_DWORD *)(j + 24 * v103 + 16);
                if (v115 == v116)
                {
                  v116 = *(_DWORD *)(v105 + 16);
                  if (*(_QWORD *)v105 < *(_QWORD *)v112)
                    goto LABEL_194;
                }
                else if (v115 > v116)
                {
                  goto LABEL_194;
                }
              }
              else
              {
                if (v114 > v113)
                  goto LABEL_194;
                v116 = *(_DWORD *)(v112 + 16);
              }
              v117 = *(_QWORD *)v112;
              v118 = *(_QWORD *)(v112 + 8);
              do
              {
                while (1)
                {
                  v119 = *(_OWORD *)v105;
                  *(_QWORD *)(v112 + 16) = *(_QWORD *)(v105 + 16);
                  *(_OWORD *)v112 = v119;
                  if (v101 < v104)
                    goto LABEL_193;
                  v112 = v105;
                  v120 = 2 * v104;
                  v104 = (2 * v104) | 1;
                  v105 = j + 24 * v104;
                  v121 = v120 + 2;
                  if (v121 < v12)
                  {
                    v122 = *(_DWORD *)(v105 + 44);
                    v123 = *(_DWORD *)(j + 24 * v104 + 20);
                    v124 = v123 > v122;
                    if (v123 == v122
                      && (v125 = *(_DWORD *)(j + 24 * v104 + 16),
                          v126 = *(_DWORD *)(v105 + 40),
                          v124 = v125 > v126,
                          v125 == v126))
                    {
                      v127 = *(_QWORD *)v105 < *(_QWORD *)(v105 + 24);
                    }
                    else
                    {
                      v127 = v124;
                    }
                    if (v127)
                    {
                      v105 += 24;
                      v104 = v121;
                    }
                  }
                  v128 = *(_DWORD *)(v105 + 20);
                  v129 = v128 > v113;
                  if (v128 != v113)
                    break;
                  v130 = *(_DWORD *)(v105 + 16);
                  v129 = v130 > v116;
                  if (v130 != v116)
                    break;
                  if (*(_QWORD *)v105 < v117)
                    goto LABEL_192;
                }
              }
              while (!v129);
LABEL_192:
              v105 = v112;
LABEL_193:
              *(_QWORD *)v105 = v117;
              *(_QWORD *)(v105 + 8) = v118;
              *(_DWORD *)(v105 + 16) = v116;
              *(_DWORD *)(v105 + 20) = v113;
            }
LABEL_194:
            v102 = v103 - 1;
            if (!v103)
            {
              while (1)
              {
                v131 = 0;
                v182 = *(_QWORD *)(j + 16);
                v177 = *(__n128 *)j;
                v132 = j;
                do
                {
                  v133 = v131 + 1;
                  v134 = v132 + 24 * (v131 + 1);
                  v135 = (2 * v131) | 1;
                  v136 = 2 * v131 + 2;
                  if (v136 < v12)
                  {
                    v137 = *(_DWORD *)(v134 + 44);
                    v138 = *(_DWORD *)(v132 + 24 * v133 + 20);
                    v139 = v138 > v137;
                    if (v138 == v137
                      && (v140 = *(_DWORD *)(v132 + 24 * v133 + 16),
                          v141 = *(_DWORD *)(v134 + 40),
                          v139 = v140 > v141,
                          v140 == v141))
                    {
                      v142 = *(_QWORD *)v134 < *(_QWORD *)(v134 + 24);
                    }
                    else
                    {
                      v142 = v139;
                    }
                    if (v142)
                    {
                      v134 += 24;
                      v135 = v136;
                    }
                  }
                  v143 = *(_OWORD *)v134;
                  *(_QWORD *)(v132 + 16) = *(_QWORD *)(v134 + 16);
                  *(_OWORD *)v132 = v143;
                  v132 = v134;
                  v131 = v135;
                }
                while (v135 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                a2 -= 24;
                if (v134 == a2)
                {
                  *(_QWORD *)(v134 + 16) = v182;
                  *(__n128 *)v134 = v177;
                  goto LABEL_227;
                }
                v144 = *(_OWORD *)a2;
                *(_QWORD *)(v134 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v134 = v144;
                *(_QWORD *)(a2 + 16) = v182;
                *(__n128 *)a2 = v177;
                v145 = v134 - j + 24;
                if (v145 >= 25)
                  break;
LABEL_227:
                v32 = v12-- <= 2;
                if (v32)
                  return;
              }
              v146 = v145 / 0x18uLL - 2;
              v147 = v146 >> 1;
              v148 = j + 24 * (v146 >> 1);
              v149 = *(_DWORD *)(v134 + 20);
              v150 = *(_DWORD *)(v148 + 20);
              if (v150 == v149)
              {
                v151 = *(_DWORD *)(j + 24 * v147 + 16);
                v152 = *(_DWORD *)(v134 + 16);
                if (v151 == v152)
                {
                  v152 = *(_DWORD *)(j + 24 * v147 + 16);
                  if (*(_QWORD *)v148 >= *(_QWORD *)v134)
                    goto LABEL_227;
                }
                else if (v151 <= v152)
                {
                  goto LABEL_227;
                }
              }
              else
              {
                if (v150 <= v149)
                  goto LABEL_227;
                v152 = *(_DWORD *)(v134 + 16);
              }
              v153 = *(_QWORD *)v134;
              v154 = *(_QWORD *)(v134 + 8);
              v155 = *(_OWORD *)v148;
              *(_QWORD *)(v134 + 16) = *(_QWORD *)(v148 + 16);
              *(_OWORD *)v134 = v155;
              if (v146 < 2)
                goto LABEL_226;
              while (1)
              {
                v156 = v148;
                v157 = v147 - 1;
                v147 = (v147 - 1) >> 1;
                v148 = j + 24 * v147;
                v158 = *(_DWORD *)(v148 + 20);
                v159 = v158 > v149;
                if (v158 == v149 && (v160 = *(_DWORD *)(j + 24 * v147 + 16), v159 = v160 > v152, v160 == v152))
                {
                  if (*(_QWORD *)v148 >= v153)
                    goto LABEL_225;
                }
                else if (!v159)
                {
LABEL_225:
                  v148 = v156;
LABEL_226:
                  *(_QWORD *)v148 = v153;
                  *(_QWORD *)(v148 + 8) = v154;
                  *(_DWORD *)(v148 + 16) = v152;
                  *(_DWORD *)(v148 + 20) = v149;
                  goto LABEL_227;
                }
                v161 = *(_OWORD *)v148;
                *(_QWORD *)(v156 + 16) = *(_QWORD *)(v148 + 16);
                *(_OWORD *)v156 = v161;
                if (v157 <= 1)
                  goto LABEL_226;
              }
            }
          }
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = j + 24 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          a5 = sub_1C52AB288(a1 + 24 * v13, a1, a2 - 24, a5);
        }
        else
        {
          v15 = sub_1C52AB288(a1, a1 + 24 * v13, a2 - 24, a5);
          v16 = 3 * v13;
          v17 = a1 + 24 * v13 - 24;
          v18 = sub_1C52AB288(a1 + 24, v17, a2 - 48, v15);
          v19 = a1 + 24 + 8 * v16;
          v20 = sub_1C52AB288(a1 + 48, v19, a2 - 72, v18);
          sub_1C52AB288(v17, v14, v19, v20);
          v179 = *(_QWORD *)(a1 + 16);
          v174 = *(__n128 *)a1;
          v21 = *(_QWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_QWORD *)(a1 + 16) = v21;
          a5 = v174;
          *(_QWORD *)(v14 + 16) = v179;
          *(__n128 *)v14 = v174;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v22 = *(_DWORD *)(a1 + 20);
          v23 = *(_DWORD *)(a1 - 4);
          if (v23 == v22)
          {
            v24 = *(_DWORD *)(a1 - 8);
            v25 = *(_DWORD *)(a1 + 16);
            if (v24 == v25)
            {
              if (*(_QWORD *)(a1 - 24) < *(_QWORD *)a1)
                goto LABEL_17;
              v25 = *(_DWORD *)(a1 - 8);
            }
            else if (v24 > v25)
            {
              goto LABEL_17;
            }
          }
          else
          {
            if (v23 > v22)
              goto LABEL_17;
            v25 = *(_DWORD *)(a1 + 16);
          }
          v54 = *(_QWORD *)a1;
          v55 = *(_DWORD *)(a2 - 4);
          v56 = v22 > v55;
          if (v22 == v55 && (v57 = *(_DWORD *)(a2 - 8), v56 = v25 > v57, v25 == v57))
          {
            if (v54 < *v9)
              goto LABEL_80;
          }
          else if (v56)
          {
LABEL_80:
            for (j = a1 + 24; ; j += 24)
            {
              v61 = *(_DWORD *)(j + 20);
              v62 = v22 > v61;
              if (v22 == v61 && (v63 = *(_DWORD *)(j + 16), v62 = v25 > v63, v25 == v63))
              {
                if (v54 < *(_QWORD *)j)
                  goto LABEL_87;
              }
              else if (v62)
              {
                goto LABEL_87;
              }
            }
          }
          for (j = a1 + 24; j < a2; j += 24)
          {
            v58 = *(_DWORD *)(j + 20);
            v59 = v22 > v58;
            if (v22 == v58 && (v60 = *(_DWORD *)(j + 16), v59 = v25 > v60, v25 == v60))
            {
              if (v54 < *(_QWORD *)j)
                break;
            }
            else if (v59)
            {
              break;
            }
          }
LABEL_87:
          v64 = *(_QWORD *)(a1 + 8);
          v65 = a2;
          if (j >= a2)
            goto LABEL_110;
          for (k = a2 - 28; ; k -= 24)
          {
            v67 = v22 > v55;
            if (v22 != v55)
              break;
            v68 = *(_DWORD *)(k + 20);
            v67 = v25 > v68;
            if (v25 != v68)
              break;
            if (v54 >= *(_QWORD *)(k + 4))
              goto LABEL_96;
LABEL_95:
            v69 = *(_DWORD *)k;
            v55 = v69;
          }
          if (v67)
            goto LABEL_95;
LABEL_96:
          v65 = k + 4;
LABEL_110:
          while (j < v65)
          {
            v181 = *(_QWORD *)(j + 16);
            v176 = *(__n128 *)j;
            v70 = *(__n128 *)v65;
            *(_QWORD *)(j + 16) = *(_QWORD *)(v65 + 16);
            *(__n128 *)j = v70;
            a5 = v176;
            *(_QWORD *)(v65 + 16) = v181;
            *(__n128 *)v65 = v176;
            do
            {
              while (1)
              {
                j += 24;
                v71 = *(_DWORD *)(j + 20);
                v72 = v22 > v71;
                if (v22 == v71)
                {
                  v73 = *(_DWORD *)(j + 16);
                  v72 = v25 > v73;
                  if (v25 == v73)
                    break;
                }
                if (v72)
                  goto LABEL_107;
              }
            }
            while (v54 >= *(_QWORD *)j);
            do
            {
LABEL_107:
              while (1)
              {
                v65 -= 24;
                v74 = *(_DWORD *)(v65 + 20);
                v75 = v22 > v74;
                if (v22 == v74)
                {
                  v76 = *(_DWORD *)(v65 + 16);
                  v75 = v25 > v76;
                  if (v25 == v76)
                    break;
                }
                if (!v75)
                  goto LABEL_110;
              }
            }
            while (v54 < *(_QWORD *)v65);
          }
          if (j - 24 != a1)
          {
            a5 = *(__n128 *)(j - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(__n128 *)a1 = a5;
          }
          a4 = 0;
          *(_QWORD *)(j - 24) = v54;
          *(_QWORD *)(j - 16) = v64;
          *(_DWORD *)(j - 8) = v25;
          *(_DWORD *)(j - 4) = v22;
          continue;
        }
        v22 = *(_DWORD *)(a1 + 20);
LABEL_17:
        v26 = 0;
        v27 = *(_QWORD *)a1;
        v28 = *(_QWORD *)(a1 + 8);
        v29 = *(_DWORD *)(a1 + 16);
        while (1)
        {
          v30 = a1 + v26;
          v31 = *(_DWORD *)(a1 + v26 + 44);
          v32 = v31 > v22;
          if (v31 != v22)
            break;
          v33 = *(_DWORD *)(v30 + 40);
          v32 = v33 > v29;
          if (v33 != v29)
            break;
          if (*(_QWORD *)(v30 + 24) >= v27)
            goto LABEL_25;
LABEL_24:
          v26 += 24;
        }
        if (v32)
          goto LABEL_24;
LABEL_25:
        v34 = a1 + v26 + 24;
        m = a2 - 24;
        if (v26)
        {
          while (1)
          {
            v36 = *(_DWORD *)(m + 20);
            v37 = v36 > v22;
            if (v36 == v22 && (v38 = *(_DWORD *)(m + 16), v37 = v38 > v29, v38 == v29))
            {
              if (*(_QWORD *)m < v27)
                goto LABEL_47;
            }
            else if (v37)
            {
              goto LABEL_47;
            }
            m -= 24;
          }
        }
        m = a2;
        if (v34 < a2)
        {
          for (m = a2 - 24; ; m -= 24)
          {
            v39 = *(_DWORD *)(m + 20);
            v40 = v39 > v22;
            if (v39 == v22 && (v41 = *(_DWORD *)(m + 16), v40 = v41 > v29, v41 == v29))
            {
              if (*(_QWORD *)m < v27 || v34 >= m)
                break;
            }
            else if (v40 || v34 >= m)
            {
              break;
            }
          }
        }
LABEL_47:
        j = v34;
        if (v34 < m)
        {
          v44 = m;
          do
          {
            v180 = *(_QWORD *)(j + 16);
            v175 = *(__n128 *)j;
            v45 = *(__n128 *)v44;
            *(_QWORD *)(j + 16) = *(_QWORD *)(v44 + 16);
            *(__n128 *)j = v45;
            a5 = v175;
            *(_QWORD *)(v44 + 16) = v180;
            *(__n128 *)v44 = v175;
            do
            {
              while (1)
              {
                j += 24;
                v46 = *(_DWORD *)(j + 20);
                v47 = v46 > v22;
                if (v46 == v22)
                {
                  v48 = *(_DWORD *)(j + 16);
                  v47 = v48 > v29;
                  if (v48 == v29)
                    break;
                }
                if (!v47)
                  goto LABEL_57;
              }
            }
            while (*(_QWORD *)j < v27);
            do
            {
LABEL_57:
              while (1)
              {
                v44 -= 24;
                v49 = *(_DWORD *)(v44 + 20);
                v50 = v49 > v22;
                if (v49 == v22)
                {
                  v51 = *(_DWORD *)(v44 + 16);
                  v50 = v51 > v29;
                  if (v51 == v29)
                    break;
                }
                if (v50)
                  goto LABEL_60;
              }
            }
            while (*(_QWORD *)v44 >= v27);
LABEL_60:
            ;
          }
          while (j < v44);
        }
        if (j - 24 != a1)
        {
          a5 = *(__n128 *)(j - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
          *(__n128 *)a1 = a5;
        }
        *(_QWORD *)(j - 24) = v27;
        *(_QWORD *)(j - 16) = v28;
        *(_DWORD *)(j - 8) = v29;
        *(_DWORD *)(j - 4) = v22;
        if (v34 < m)
        {
LABEL_66:
          sub_1C52AA500(a1, j - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v52 = sub_1C52AB43C(a1, j - 24, a5);
        if (!sub_1C52AB43C(j, a2, v53))
        {
          if (v52)
            continue;
          goto LABEL_66;
        }
        a2 = j - 24;
        if (!v52)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a2;
  v253 = &a2[-1].i64[1];
  v9 = a1;
  while (2)
  {
    v10 = (uint64_t *)v9;
    v11 = (char *)v8 - (char *)v9;
    v12 = ((char *)v8 - (char *)v9) >> 3;
    v259 = v9;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v212 = v9->i64[0];
        v213 = *a3;
        v214 = (uint64_t *)(*a3 + 576);
        v261 = a2[-1].i64[1];
        v262 = 0;
        if ((sub_1C61252B8(v214, &v261, &v262) & 1) != 0)
          v215 = v262;
        else
          v215 = *(_QWORD *)(v213 + 576) + 16 * *(unsigned int *)(v213 + 592);
        v222 = *(_DWORD *)(v215 + 8);
        v261 = v212;
        v262 = 0;
        if ((sub_1C61252B8(v214, &v261, &v262) & 1) != 0)
          v223 = v262;
        else
          v223 = *(_QWORD *)(v213 + 576) + 16 * *(unsigned int *)(v213 + 592);
        if (v222 < *(_DWORD *)(v223 + 8))
        {
          v226 = v9->i64[0];
          v9->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v226;
        }
        return result;
      case 3uLL:
        sub_1C5300CB0(v9->i64, &v9->i64[1], v253, a3);
        return result;
      case 4uLL:
        sub_1C53014AC(v9->i64, &v9->i64[1], v9[1].i64, v253, a3);
        return result;
      case 5uLL:
        v216 = v9 + 1;
        v217 = &v9[1].i64[1];
        sub_1C53014AC(v9->i64, &v9->i64[1], v9[1].i64, &v9[1].i64[1], a3);
        v218 = v9[1].i64[1];
        v219 = *a3;
        v220 = (uint64_t *)(*a3 + 576);
        v261 = a2[-1].i64[1];
        v262 = 0;
        if ((sub_1C61252B8(v220, &v261, &v262) & 1) != 0)
          v221 = v262;
        else
          v221 = *(_QWORD *)(v219 + 576) + 16 * *(unsigned int *)(v219 + 592);
        v224 = *(_DWORD *)(v221 + 8);
        v261 = v218;
        v262 = 0;
        if ((sub_1C61252B8(v220, &v261, &v262) & 1) != 0)
          v225 = v262;
        else
          v225 = *(_QWORD *)(v219 + 576) + 16 * *(unsigned int *)(v219 + 592);
        if (v224 < *(_DWORD *)(v225 + 8))
        {
          v227 = *v217;
          *v217 = a2[-1].i64[1];
          a2[-1].i64[1] = v227;
          v228 = v216->i64[0];
          v229 = *a3;
          v230 = (uint64_t *)(*a3 + 576);
          v261 = *v217;
          v262 = 0;
          v231 = (sub_1C61252B8(v230, &v261, &v262) & 1) != 0
               ? v262
               : *(_QWORD *)(v229 + 576) + 16 * *(unsigned int *)(v229 + 592);
          v232 = *(_DWORD *)(v231 + 8);
          v261 = v228;
          v262 = 0;
          v233 = (sub_1C61252B8(v230, &v261, &v262) & 1) != 0
               ? v262
               : *(_QWORD *)(v229 + 576) + 16 * *(unsigned int *)(v229 + 592);
          if (v232 < *(_DWORD *)(v233 + 8))
          {
            v234 = v216->i64[0];
            v235 = *v217;
            v216->i64[0] = *v217;
            *v217 = v234;
            v236 = v9->i64[1];
            v237 = *a3;
            v238 = (uint64_t *)(*a3 + 576);
            v261 = v235;
            v262 = 0;
            v239 = (sub_1C61252B8(v238, &v261, &v262) & 1) != 0
                 ? v262
                 : *(_QWORD *)(v237 + 576) + 16 * *(unsigned int *)(v237 + 592);
            v240 = *(_DWORD *)(v239 + 8);
            v261 = v236;
            v262 = 0;
            v241 = (sub_1C61252B8(v238, &v261, &v262) & 1) != 0
                 ? v262
                 : *(_QWORD *)(v237 + 576) + 16 * *(unsigned int *)(v237 + 592);
            if (v240 < *(_DWORD *)(v241 + 8))
            {
              v243 = v9->i64[1];
              v242 = v9[1].i64[0];
              v244 = v9->i64[0];
              v9->i64[1] = v242;
              v9[1].i64[0] = v243;
              v245 = *a3;
              v246 = (uint64_t *)(*a3 + 576);
              v261 = v242;
              v262 = 0;
              v247 = (sub_1C61252B8(v246, &v261, &v262) & 1) != 0
                   ? v262
                   : *(_QWORD *)(v245 + 576) + 16 * *(unsigned int *)(v245 + 592);
              v248 = *(_DWORD *)(v247 + 8);
              v261 = v244;
              v262 = 0;
              v249 = (sub_1C61252B8(v246, &v261, &v262) & 1) != 0
                   ? v262
                   : *(_QWORD *)(v245 + 576) + 16 * *(unsigned int *)(v245 + 592);
              if (v248 < *(_DWORD *)(v249 + 8))
              {
                result = vextq_s8(*v9, *v9, 8uLL);
                *v9 = result;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v108 = &v9->i64[1];
          v109 = v9 == v8 || v108 == (uint64_t *)v8;
          v110 = v109;
          if ((a5 & 1) != 0)
          {
            if ((v110 & 1) == 0)
            {
              v111 = 0;
              v112 = (uint64_t *)v9;
              do
              {
                v114 = *v112;
                v113 = v112[1];
                v112 = v108;
                v115 = *a3;
                v116 = (uint64_t *)(*a3 + 576);
                v261 = v113;
                v262 = 0;
                if ((sub_1C61252B8(v116, &v261, &v262) & 1) != 0)
                  v117 = v262;
                else
                  v117 = *(_QWORD *)(v115 + 576) + 16 * *(unsigned int *)(v115 + 592);
                v118 = *(_DWORD *)(v117 + 8);
                v261 = v114;
                v262 = 0;
                if ((sub_1C61252B8(v116, &v261, &v262) & 1) != 0)
                  v119 = v262;
                else
                  v119 = *(_QWORD *)(v115 + 576) + 16 * *(unsigned int *)(v115 + 592);
                if (v118 < *(_DWORD *)(v119 + 8))
                {
                  v120 = *v112;
                  v121 = v111;
                  while (1)
                  {
                    *(uint64_t *)((char *)&v259->i64[1] + v121) = *(uint64_t *)((char *)v259->i64 + v121);
                    if (!v121)
                      break;
                    v122 = *(uint64_t *)((char *)&v259->i64[-1] + v121);
                    v123 = *a3;
                    v124 = (uint64_t *)(*a3 + 576);
                    v261 = v120;
                    v262 = 0;
                    if ((sub_1C61252B8(v124, &v261, &v262) & 1) != 0)
                      v125 = v262;
                    else
                      v125 = *(_QWORD *)(v123 + 576) + 16 * *(unsigned int *)(v123 + 592);
                    v126 = *(_DWORD *)(v125 + 8);
                    v261 = v122;
                    v262 = 0;
                    if ((sub_1C61252B8(v124, &v261, &v262) & 1) != 0)
                      v127 = v262;
                    else
                      v127 = *(_QWORD *)(v123 + 576) + 16 * *(unsigned int *)(v123 + 592);
                    v121 -= 8;
                    if (v126 >= *(_DWORD *)(v127 + 8))
                    {
                      v128 = (uint64_t *)((char *)&v259->i64[1] + v121);
                      goto LABEL_152;
                    }
                  }
                  v128 = (uint64_t *)v259;
LABEL_152:
                  *v128 = v120;
                }
                v108 = v112 + 1;
                v111 += 8;
              }
              while (v112 + 1 != (uint64_t *)a2);
            }
          }
          else if ((v110 & 1) == 0)
          {
            do
            {
              v196 = *v10;
              v195 = v10[1];
              v10 = v108;
              v197 = *a3;
              v198 = (uint64_t *)(*a3 + 576);
              v261 = v195;
              v262 = 0;
              if ((sub_1C61252B8(v198, &v261, &v262) & 1) != 0)
                v199 = v262;
              else
                v199 = *(_QWORD *)(v197 + 576) + 16 * *(unsigned int *)(v197 + 592);
              v200 = *(_DWORD *)(v199 + 8);
              v261 = v196;
              v262 = 0;
              if ((sub_1C61252B8(v198, &v261, &v262) & 1) != 0)
                v201 = v262;
              else
                v201 = *(_QWORD *)(v197 + 576) + 16 * *(unsigned int *)(v197 + 592);
              v202 = a2;
              if (v200 < *(_DWORD *)(v201 + 8))
              {
                v203 = *v10;
                v204 = v10;
                v205 = v10;
                do
                {
                  v206 = *(v204 - 2);
                  *v204 = *(v204 - 1);
                  v207 = *a3;
                  v208 = (uint64_t *)(*a3 + 576);
                  v261 = v203;
                  v262 = 0;
                  if ((sub_1C61252B8(v208, &v261, &v262) & 1) != 0)
                    v209 = v262;
                  else
                    v209 = *(_QWORD *)(v207 + 576) + 16 * *(unsigned int *)(v207 + 592);
                  v210 = *(_DWORD *)(v209 + 8);
                  v261 = v206;
                  v262 = 0;
                  if ((sub_1C61252B8(v208, &v261, &v262) & 1) != 0)
                    v211 = v262;
                  else
                    v211 = *(_QWORD *)(v207 + 576) + 16 * *(unsigned int *)(v207 + 592);
                  --v204;
                }
                while (v210 < *(_DWORD *)(v211 + 8));
                v10 = v205;
                *v204 = v203;
                v202 = a2;
              }
              v108 = v10 + 1;
            }
            while (v10 + 1 != (uint64_t *)v202);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != v8)
          {
            v129 = (v12 - 2) >> 1;
            v130 = v129;
            do
            {
              v131 = v130;
              if (v129 >= v130)
              {
                v132 = (2 * v130) | 1;
                v133 = &v259->i64[v132];
                if (2 * v130 + 2 < (uint64_t)v12)
                {
                  v134 = v133 + 1;
                  v135 = v133[1];
                  v136 = *a3;
                  v137 = (uint64_t *)(*a3 + 576);
                  v261 = *v133;
                  v262 = 0;
                  v138 = sub_1C61252B8(v137, &v261, &v262);
                  v139 = v135;
                  v140 = (v138 & 1) != 0 ? v262 : *(_QWORD *)(v136 + 576) + 16 * *(unsigned int *)(v136 + 592);
                  v141 = *(_DWORD *)(v140 + 8);
                  v261 = v139;
                  v262 = 0;
                  v142 = (sub_1C61252B8(v137, &v261, &v262) & 1) != 0
                       ? v262
                       : *(_QWORD *)(v136 + 576) + 16 * *(unsigned int *)(v136 + 592);
                  v133 = &v259->i64[v132];
                  if (v141 < *(_DWORD *)(v142 + 8))
                  {
                    v133 = v134;
                    v132 = 2 * v131 + 2;
                  }
                }
                v143 = &v259->i64[v131];
                v257 = v133;
                v144 = *v143;
                v145 = *a3;
                v146 = (uint64_t *)(*a3 + 576);
                v261 = *v133;
                v262 = 0;
                if ((sub_1C61252B8(v146, &v261, &v262) & 1) != 0)
                  v147 = v262;
                else
                  v147 = *(_QWORD *)(v145 + 576) + 16 * *(unsigned int *)(v145 + 592);
                v148 = *(_DWORD *)(v147 + 8);
                v261 = v144;
                v262 = 0;
                if ((sub_1C61252B8(v146, &v261, &v262) & 1) != 0)
                  v149 = v262;
                else
                  v149 = *(_QWORD *)(v145 + 576) + 16 * *(unsigned int *)(v145 + 592);
                v150 = v257;
                if (v148 >= *(_DWORD *)(v149 + 8))
                {
                  v254 = *v143;
                  do
                  {
                    v151 = v150;
                    *v143 = *v150;
                    if (v129 < v132)
                      break;
                    v152 = (2 * v132) | 1;
                    v153 = &v259->i64[v152];
                    v132 = 2 * v132 + 2;
                    if (v132 >= (uint64_t)v12)
                    {
                      v132 = v152;
                    }
                    else
                    {
                      v154 = v153 + 1;
                      v251 = v153[1];
                      v155 = *a3;
                      v156 = (uint64_t *)(*a3 + 576);
                      v261 = *v153;
                      v262 = 0;
                      v157 = (sub_1C61252B8(v156, &v261, &v262) & 1) != 0
                           ? v262
                           : *(_QWORD *)(v155 + 576) + 16 * *(unsigned int *)(v155 + 592);
                      v250 = *(_DWORD *)(v157 + 8);
                      v261 = v251;
                      v262 = 0;
                      v158 = (sub_1C61252B8(v156, &v261, &v262) & 1) != 0
                           ? v262
                           : *(_QWORD *)(v155 + 576) + 16 * *(unsigned int *)(v155 + 592);
                      v153 = &v259->i64[v152];
                      if (v250 >= *(_DWORD *)(v158 + 8))
                        v132 = v152;
                      else
                        v153 = v154;
                    }
                    v159 = v153;
                    v160 = *a3;
                    v161 = (uint64_t *)(*a3 + 576);
                    v261 = *v153;
                    v262 = 0;
                    v162 = (sub_1C61252B8(v161, &v261, &v262) & 1) != 0
                         ? v262
                         : *(_QWORD *)(v160 + 576) + 16 * *(unsigned int *)(v160 + 592);
                    v163 = *(_DWORD *)(v162 + 8);
                    v261 = v254;
                    v262 = 0;
                    v164 = (sub_1C61252B8(v161, &v261, &v262) & 1) != 0
                         ? v262
                         : *(_QWORD *)(v160 + 576) + 16 * *(unsigned int *)(v160 + 592);
                    v150 = v159;
                    v143 = v151;
                  }
                  while (v163 >= *(_DWORD *)(v164 + 8));
                  *v151 = v254;
                }
              }
              v130 = v131 - 1;
            }
            while (v131);
            v165 = (uint64_t *)v259;
            do
            {
              v166 = 0;
              v252 = *v165;
              v255 = v12;
              v167 = (v12 - 2) >> 1;
              do
              {
                v168 = &v165[v166 + 1];
                v169 = (2 * v166) | 1;
                v170 = 2 * v166 + 2;
                if (v170 < (uint64_t)v12)
                {
                  v258 = v165[v166 + 2];
                  v171 = *a3;
                  v172 = (uint64_t *)(*a3 + 576);
                  v261 = *v168;
                  v262 = 0;
                  if ((sub_1C61252B8(v172, &v261, &v262) & 1) != 0)
                    v173 = v262;
                  else
                    v173 = *(_QWORD *)(v171 + 576) + 16 * *(unsigned int *)(v171 + 592);
                  v174 = *(_DWORD *)(v173 + 8);
                  v261 = v258;
                  v262 = 0;
                  if ((sub_1C61252B8(v172, &v261, &v262) & 1) != 0)
                    v175 = v262;
                  else
                    v175 = *(_QWORD *)(v171 + 576) + 16 * *(unsigned int *)(v171 + 592);
                  if (v174 < *(_DWORD *)(v175 + 8))
                  {
                    ++v168;
                    v169 = v170;
                  }
                  v12 = v255;
                }
                *v165 = *v168;
                v165 = v168;
                v166 = v169;
              }
              while (v169 <= v167);
              v176 = &a2[-1].i64[1];
              v109 = v168 == (uint64_t *)&a2[-1].u64[1];
              a2 = (int8x16_t *)((char *)a2 - 8);
              if (v109)
              {
                *v168 = v252;
              }
              else
              {
                *v168 = *v176;
                *v176 = v252;
                v177 = (char *)v168 - (char *)v259 + 8;
                if (v177 >= 9)
                {
                  v178 = (((unint64_t)v177 >> 3) - 2) >> 1;
                  v179 = &v259->i64[v178];
                  v180 = *v168;
                  v181 = *a3;
                  v182 = (uint64_t *)(*a3 + 576);
                  v261 = *v179;
                  v262 = 0;
                  v183 = (sub_1C61252B8(v182, &v261, &v262) & 1) != 0
                       ? v262
                       : *(_QWORD *)(v181 + 576) + 16 * *(unsigned int *)(v181 + 592);
                  v185 = *(_DWORD *)(v183 + 8);
                  v261 = v180;
                  v262 = 0;
                  v186 = (sub_1C61252B8(v182, &v261, &v262) & 1) != 0
                       ? v262
                       : *(_QWORD *)(v181 + 576) + 16 * *(unsigned int *)(v181 + 592);
                  v187 = v185 >= *(_DWORD *)(v186 + 8);
                  v12 = v255;
                  if (!v187)
                  {
                    v188 = *v168;
                    do
                    {
                      v189 = v179;
                      *v168 = *v179;
                      if (!v178)
                        break;
                      v178 = (v178 - 1) >> 1;
                      v179 = &v259->i64[v178];
                      v190 = *a3;
                      v191 = (uint64_t *)(*a3 + 576);
                      v261 = *v179;
                      v262 = 0;
                      v192 = (sub_1C61252B8(v191, &v261, &v262) & 1) != 0
                           ? v262
                           : *(_QWORD *)(v190 + 576) + 16 * *(unsigned int *)(v190 + 592);
                      v193 = *(_DWORD *)(v192 + 8);
                      v261 = v188;
                      v262 = 0;
                      v194 = (sub_1C61252B8(v191, &v261, &v262) & 1) != 0
                           ? v262
                           : *(_QWORD *)(v190 + 576) + 16 * *(unsigned int *)(v190 + 592);
                      v168 = v189;
                    }
                    while (v193 < *(_DWORD *)(v194 + 8));
                    *v189 = v188;
                  }
                }
              }
              v184 = (uint64_t)v12-- <= 2;
              v165 = (uint64_t *)v259;
            }
            while (!v184);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v9->i64[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C5300CB0(&v10[v12 >> 1], v10, v253, a3);
        }
        else
        {
          sub_1C5300CB0(v10, &v10[v12 >> 1], v253, a3);
          sub_1C5300CB0(v10 + 1, v14 - 1, a2[-1].i64, a3);
          sub_1C5300CB0(v10 + 2, &v10[v13 + 1], &a2[-2].i64[1], a3);
          sub_1C5300CB0(v14 - 1, &v10[v12 >> 1], &v10[v13 + 1], a3);
          v15 = *v10;
          *v10 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v54 = *v10;
          v55 = *a3;
          v56 = (uint64_t *)(*a3 + 576);
          v261 = *(v10 - 1);
          v262 = 0;
          v57 = (sub_1C61252B8(v56, &v261, &v262) & 1) != 0
              ? v262
              : *(_QWORD *)(v55 + 576) + 16 * *(unsigned int *)(v55 + 592);
          v58 = *(_DWORD *)(v57 + 8);
          v261 = v54;
          v262 = 0;
          v59 = (sub_1C61252B8(v56, &v261, &v262) & 1) != 0
              ? v262
              : *(_QWORD *)(v55 + 576) + 16 * *(unsigned int *)(v55 + 592);
          if (v58 >= *(_DWORD *)(v59 + 8))
          {
            v60 = *v10;
            v61 = *v253;
            v62 = *a3;
            v63 = (uint64_t *)(*a3 + 576);
            v261 = *v10;
            v262 = 0;
            if ((sub_1C61252B8(v63, &v261, &v262) & 1) != 0)
              v64 = v262;
            else
              v64 = *(_QWORD *)(v62 + 576) + 16 * *(unsigned int *)(v62 + 592);
            v65 = *(_DWORD *)(v64 + 8);
            v261 = v61;
            v262 = 0;
            if ((sub_1C61252B8(v63, &v261, &v262) & 1) != 0)
              v66 = v262;
            else
              v66 = *(_QWORD *)(v62 + 576) + 16 * *(unsigned int *)(v62 + 592);
            v67 = a2;
            if (v65 >= *(_DWORD *)(v66 + 8))
            {
              v75 = (uint64_t *)v259;
              v100 = (int8x16_t *)&v259->u64[1];
              do
              {
                v9 = v100;
                if (v100 >= v67)
                  break;
                v101 = v100->i64[0];
                v102 = *a3;
                v103 = (uint64_t *)(*a3 + 576);
                v261 = v60;
                v262 = 0;
                v104 = (sub_1C61252B8(v103, &v261, &v262) & 1) != 0
                     ? v262
                     : *(_QWORD *)(v102 + 576) + 16 * *(unsigned int *)(v102 + 592);
                v105 = *(_DWORD *)(v104 + 8);
                v261 = v101;
                v262 = 0;
                v106 = (sub_1C61252B8(v103, &v261, &v262) & 1) != 0
                     ? v262
                     : *(_QWORD *)(v102 + 576) + 16 * *(unsigned int *)(v102 + 592);
                v75 = (uint64_t *)v259;
                v67 = a2;
                v107 = *(_DWORD *)(v106 + 8);
                v100 = (int8x16_t *)&v9->u64[1];
              }
              while (v105 >= v107);
            }
            else
            {
              v9 = v259;
              do
              {
                v69 = v9->i64[1];
                v9 = (int8x16_t *)((char *)v9 + 8);
                v68 = v69;
                v70 = *a3;
                v71 = (uint64_t *)(*a3 + 576);
                v261 = v60;
                v262 = 0;
                if ((sub_1C61252B8(v71, &v261, &v262) & 1) != 0)
                  v72 = v262;
                else
                  v72 = *(_QWORD *)(v70 + 576) + 16 * *(unsigned int *)(v70 + 592);
                v73 = *(_DWORD *)(v72 + 8);
                v261 = v68;
                v262 = 0;
                if ((sub_1C61252B8(v71, &v261, &v262) & 1) != 0)
                  v74 = v262;
                else
                  v74 = *(_QWORD *)(v70 + 576) + 16 * *(unsigned int *)(v70 + 592);
                v75 = (uint64_t *)v259;
                v67 = a2;
              }
              while (v73 >= *(_DWORD *)(v74 + 8));
            }
            v76 = v67;
            if (v9 < v67)
            {
              v76 = a2;
              do
              {
                v78 = v76[-1].i64[1];
                v76 = (int8x16_t *)((char *)v76 - 8);
                v77 = v78;
                v79 = *a3;
                v80 = (uint64_t *)(*a3 + 576);
                v261 = v60;
                v262 = 0;
                if ((sub_1C61252B8(v80, &v261, &v262) & 1) != 0)
                  v81 = v262;
                else
                  v81 = *(_QWORD *)(v79 + 576) + 16 * *(unsigned int *)(v79 + 592);
                v82 = *(_DWORD *)(v81 + 8);
                v261 = v77;
                v262 = 0;
                if ((sub_1C61252B8(v80, &v261, &v262) & 1) != 0)
                  v83 = v262;
                else
                  v83 = *(_QWORD *)(v79 + 576) + 16 * *(unsigned int *)(v79 + 592);
                v75 = (uint64_t *)v259;
              }
              while (v82 < *(_DWORD *)(v83 + 8));
            }
            while (v9 < v76)
            {
              v84 = v9->i64[0];
              v9->i64[0] = v76->i64[0];
              v76->i64[0] = v84;
              do
              {
                v86 = v9->i64[1];
                v9 = (int8x16_t *)((char *)v9 + 8);
                v85 = v86;
                v87 = *a3;
                v88 = (uint64_t *)(*a3 + 576);
                v261 = v60;
                v262 = 0;
                if ((sub_1C61252B8(v88, &v261, &v262) & 1) != 0)
                  v89 = v262;
                else
                  v89 = *(_QWORD *)(v87 + 576) + 16 * *(unsigned int *)(v87 + 592);
                v90 = *(_DWORD *)(v89 + 8);
                v261 = v85;
                v262 = 0;
                if ((sub_1C61252B8(v88, &v261, &v262) & 1) != 0)
                  v91 = v262;
                else
                  v91 = *(_QWORD *)(v87 + 576) + 16 * *(unsigned int *)(v87 + 592);
              }
              while (v90 >= *(_DWORD *)(v91 + 8));
              do
              {
                v93 = v76[-1].i64[1];
                v76 = (int8x16_t *)((char *)v76 - 8);
                v92 = v93;
                v94 = *a3;
                v95 = (uint64_t *)(*a3 + 576);
                v261 = v60;
                v262 = 0;
                if ((sub_1C61252B8(v95, &v261, &v262) & 1) != 0)
                  v96 = v262;
                else
                  v96 = *(_QWORD *)(v94 + 576) + 16 * *(unsigned int *)(v94 + 592);
                v97 = *(_DWORD *)(v96 + 8);
                v261 = v92;
                v262 = 0;
                if ((sub_1C61252B8(v95, &v261, &v262) & 1) != 0)
                  v98 = v262;
                else
                  v98 = *(_QWORD *)(v94 + 576) + 16 * *(unsigned int *)(v94 + 592);
                v75 = (uint64_t *)v259;
              }
              while (v97 < *(_DWORD *)(v98 + 8));
            }
            v99 = &v9[-1].i64[1];
            if (&v9[-1].u64[1] != (unint64_t *)v75)
              *v75 = *v99;
            a5 = 0;
            *v99 = v60;
            v8 = a2;
            continue;
          }
        }
        v16 = 0;
        v17 = *v10;
        do
        {
          v18 = *a3;
          v19 = (uint64_t *)(*a3 + 576);
          v261 = v10[v16 + 1];
          v262 = 0;
          if ((sub_1C61252B8(v19, &v261, &v262) & 1) != 0)
            v20 = v262;
          else
            v20 = *(_QWORD *)(v18 + 576) + 16 * *(unsigned int *)(v18 + 592);
          v21 = *(_DWORD *)(v20 + 8);
          v261 = v17;
          v262 = 0;
          if ((sub_1C61252B8(v19, &v261, &v262) & 1) != 0)
            v22 = v262;
          else
            v22 = *(_QWORD *)(v18 + 576) + 16 * *(unsigned int *)(v18 + 592);
          ++v16;
        }
        while (v21 < *(_DWORD *)(v22 + 8));
        v23 = (int8x16_t *)&v10[v16];
        v24 = a2;
        if (v16 == 1)
        {
          v24 = a2;
          do
          {
            if (v23 >= v24)
              break;
            v48 = v24[-1].i64[1];
            v24 = (int8x16_t *)((char *)v24 - 8);
            v49 = *a3;
            v50 = (uint64_t *)(*a3 + 576);
            v261 = v48;
            v262 = 0;
            v51 = (sub_1C61252B8(v50, &v261, &v262) & 1) != 0
                ? v262
                : *(_QWORD *)(v49 + 576) + 16 * *(unsigned int *)(v49 + 592);
            v52 = *(_DWORD *)(v51 + 8);
            v261 = v17;
            v262 = 0;
            v53 = (sub_1C61252B8(v50, &v261, &v262) & 1) != 0
                ? v262
                : *(_QWORD *)(v49 + 576) + 16 * *(unsigned int *)(v49 + 592);
          }
          while (v52 >= *(_DWORD *)(v53 + 8));
        }
        else
        {
          do
          {
            v25 = v24[-1].i64[1];
            v24 = (int8x16_t *)((char *)v24 - 8);
            v26 = *a3;
            v27 = (uint64_t *)(*a3 + 576);
            v261 = v25;
            v262 = 0;
            if ((sub_1C61252B8(v27, &v261, &v262) & 1) != 0)
              v28 = v262;
            else
              v28 = *(_QWORD *)(v26 + 576) + 16 * *(unsigned int *)(v26 + 592);
            v29 = *(_DWORD *)(v28 + 8);
            v261 = v17;
            v262 = 0;
            if ((sub_1C61252B8(v27, &v261, &v262) & 1) != 0)
              v30 = v262;
            else
              v30 = *(_QWORD *)(v26 + 576) + 16 * *(unsigned int *)(v26 + 592);
          }
          while (v29 >= *(_DWORD *)(v30 + 8));
        }
        v9 = v23;
        if (v23 < v24)
        {
          v31 = v24;
          do
          {
            v32 = v9->i64[0];
            v9->i64[0] = v31->i64[0];
            v31->i64[0] = v32;
            do
            {
              v33 = v9->i64[1];
              v9 = (int8x16_t *)((char *)v9 + 8);
              v34 = *a3;
              v35 = (uint64_t *)(*a3 + 576);
              v261 = v33;
              v262 = 0;
              if ((sub_1C61252B8(v35, &v261, &v262) & 1) != 0)
                v36 = v262;
              else
                v36 = *(_QWORD *)(v34 + 576) + 16 * *(unsigned int *)(v34 + 592);
              v37 = *(_DWORD *)(v36 + 8);
              v261 = v17;
              v262 = 0;
              if ((sub_1C61252B8(v35, &v261, &v262) & 1) != 0)
                v38 = v262;
              else
                v38 = *(_QWORD *)(v34 + 576) + 16 * *(unsigned int *)(v34 + 592);
            }
            while (v37 < *(_DWORD *)(v38 + 8));
            do
            {
              v39 = v31[-1].i64[1];
              v31 = (int8x16_t *)((char *)v31 - 8);
              v40 = *a3;
              v41 = (uint64_t *)(*a3 + 576);
              v261 = v39;
              v262 = 0;
              if ((sub_1C61252B8(v41, &v261, &v262) & 1) != 0)
                v42 = v262;
              else
                v42 = *(_QWORD *)(v40 + 576) + 16 * *(unsigned int *)(v40 + 592);
              v43 = *(_DWORD *)(v42 + 8);
              v261 = v17;
              v262 = 0;
              if ((sub_1C61252B8(v41, &v261, &v262) & 1) != 0)
                v44 = v262;
              else
                v44 = *(_QWORD *)(v40 + 576) + 16 * *(unsigned int *)(v40 + 592);
            }
            while (v43 >= *(_DWORD *)(v44 + 8));
          }
          while (v9 < v31);
        }
        v45 = &v9[-1].i64[1];
        a1 = v259;
        if (&v9[-1].u64[1] != (unint64_t *)v259)
          v259->i64[0] = *v45;
        *v45 = v17;
        v8 = a2;
        if (v23 < v24)
        {
LABEL_48:
          sub_1C52FF9C0(v259, &v9[-1].u64[1], a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v46 = sub_1C5300F94(v259, (int8x16_t *)((char *)v9 - 8), a3);
        if (!sub_1C5300F94(v9, a2, a3))
        {
          if (v46)
            continue;
          goto LABEL_48;
        }
        a2 = (int8x16_t *)((char *)v9 - 8);
        if (!v46)
          goto LABEL_1;
        return result;
    }
  }
}

  v8 = (unsigned int *)(a2 - 20);
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = a2 - i;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - i) >> 2);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v47 = *(_DWORD *)(a2 - 20);
        v48 = *(_DWORD *)i;
        if (v47 >= *(_DWORD *)i)
        {
          if (v48 < v47)
            return;
          v49 = *(_DWORD *)(i + 4);
          if (*(_DWORD *)(a2 - 16) >= v49)
            return;
        }
        else
        {
          v49 = *(_DWORD *)(i + 4);
        }
        v50 = *(_DWORD *)(i + 16);
        *(_DWORD *)i = v47;
        *(_DWORD *)(i + 4) = *(_DWORD *)(a2 - 16);
        v51 = *(_QWORD *)(i + 8);
        *(_DWORD *)(i + 8) = *(_DWORD *)(a2 - 12);
        *(_QWORD *)(i + 12) = *(_QWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 20) = v48;
        *(_DWORD *)(a2 - 16) = v49;
        *(_QWORD *)(a2 - 12) = v51;
        *(_DWORD *)(a2 - 4) = v50;
        return;
      case 3:
        sub_1C53041C0((unsigned int *)i, (unsigned int *)(i + 20), (unsigned int *)(a2 - 20));
        return;
      case 4:
        sub_1C53045C4(i, i + 20, i + 40, a2 - 20);
        return;
      case 5:
        sub_1C5304718(i, i + 20, i + 40, i + 60, (unsigned int *)(a2 - 20));
        return;
      default:
        if (v10 > 479)
        {
          if (!a3)
          {
            if (i == a2)
              return;
            v68 = (unint64_t)(v11 - 2) >> 1;
            v69 = v68;
            while (1)
            {
              v70 = v69;
              if (v68 >= v69)
              {
                v71 = (2 * v69) | 1;
                v72 = i + 20 * v71;
                if (2 * v70 + 2 < v11)
                {
                  v73 = *(_DWORD *)(v72 + 20);
                  if (*(_DWORD *)v72 < v73 || v73 >= *(_DWORD *)v72 && *(_DWORD *)(v72 + 4) < *(_DWORD *)(v72 + 24))
                  {
                    v72 += 20;
                    v71 = 2 * v70 + 2;
                  }
                }
                v74 = i + 20 * v70;
                v75 = *(_DWORD *)v72;
                v76 = *(_DWORD *)v74;
                if (*(_DWORD *)v72 >= *(_DWORD *)v74)
                {
                  if (v76 < v75)
                  {
                    v77 = *(_DWORD *)(v74 + 4);
LABEL_129:
                    v78 = *(_QWORD *)(v74 + 8);
                    v79 = *(_DWORD *)(v74 + 16);
                    *(_DWORD *)v74 = v75;
                    *(_DWORD *)(v74 + 4) = *(_DWORD *)(v72 + 4);
                    *(_DWORD *)(v74 + 8) = *(_DWORD *)(v72 + 8);
                    *(_QWORD *)(v74 + 12) = *(_QWORD *)(v72 + 12);
                    if (v68 >= v71)
                    {
                      while (1)
                      {
                        v81 = 2 * v71;
                        v71 = (2 * v71) | 1;
                        v80 = i + 20 * v71;
                        v82 = v81 + 2;
                        if (v82 < v11)
                        {
                          v83 = *(_DWORD *)(v80 + 20);
                          if (*(_DWORD *)v80 < v83
                            || v83 >= *(_DWORD *)v80 && *(_DWORD *)(v80 + 4) < *(_DWORD *)(v80 + 24))
                          {
                            v80 += 20;
                            v71 = v82;
                          }
                        }
                        v84 = *(_DWORD *)v80;
                        if (*(_DWORD *)v80 < v76 || v76 >= v84 && *(_DWORD *)(v80 + 4) < v77)
                          break;
                        *(_DWORD *)v72 = v84;
                        *(_DWORD *)(v72 + 4) = *(_DWORD *)(v80 + 4);
                        *(_DWORD *)(v72 + 8) = *(_DWORD *)(v80 + 8);
                        *(_QWORD *)(v72 + 12) = *(_QWORD *)(v80 + 12);
                        v72 = v80;
                        if (v68 < v71)
                          goto LABEL_131;
                      }
                    }
                    v80 = v72;
LABEL_131:
                    *(_DWORD *)v80 = v76;
                    *(_DWORD *)(v80 + 4) = v77;
                    *(_QWORD *)(v80 + 8) = v78;
                    *(_DWORD *)(v80 + 16) = v79;
                    goto LABEL_132;
                  }
                  v77 = *(_DWORD *)(v74 + 4);
                  if (*(_DWORD *)(v72 + 4) >= v77)
                    goto LABEL_129;
                }
              }
LABEL_132:
              v69 = v70 - 1;
              if (!v70)
              {
                while (1)
                {
                  v85 = 0;
                  v86 = *(_DWORD *)i;
                  v87 = *(_DWORD *)(i + 4);
                  v88 = *(_DWORD *)(i + 8);
                  v89 = *(_DWORD *)(i + 12);
                  v90 = *(_DWORD *)(i + 16);
                  v91 = v11 - 2;
                  if (v11 < 2)
                    v91 = v11 - 1;
                  v92 = v91 >> 1;
                  v93 = i;
                  do
                  {
                    v94 = v93;
                    v93 += 20 * v85 + 20;
                    v95 = 2 * v85;
                    v85 = (2 * v85) | 1;
                    v96 = v95 + 2;
                    if (v96 < v11)
                    {
                      v97 = *(_DWORD *)(v93 + 20);
                      if (*(_DWORD *)v93 < v97 || v97 >= *(_DWORD *)v93 && *(_DWORD *)(v93 + 4) < *(_DWORD *)(v93 + 24))
                      {
                        v93 += 20;
                        v85 = v96;
                      }
                    }
                    *(_DWORD *)v94 = *(_DWORD *)v93;
                    *(_DWORD *)(v94 + 4) = *(_DWORD *)(v93 + 4);
                    *(_DWORD *)(v94 + 8) = *(_DWORD *)(v93 + 8);
                    *(_QWORD *)(v94 + 12) = *(_QWORD *)(v93 + 12);
                  }
                  while (v85 <= v92);
                  if (v93 == a2 - 20)
                    break;
                  *(_DWORD *)v93 = *(_DWORD *)(a2 - 20);
                  *(_DWORD *)(v93 + 4) = *(_DWORD *)(a2 - 16);
                  *(_DWORD *)(v93 + 8) = *(_DWORD *)(a2 - 12);
                  *(_QWORD *)(v93 + 12) = *(_QWORD *)(a2 - 8);
                  *(_DWORD *)(a2 - 20) = v86;
                  *(_DWORD *)(a2 - 16) = v87;
                  *(_DWORD *)(a2 - 12) = v88;
                  *(_DWORD *)(a2 - 8) = v89;
                  *(_DWORD *)(a2 - 4) = v90;
                  v98 = v93 - i + 20;
                  if (v98 >= 21)
                  {
                    v99 = v98 / 0x14uLL - 2;
                    v100 = v99 >> 1;
                    v101 = i + 20 * (v99 >> 1);
                    v102 = *(_DWORD *)v101;
                    v103 = *(_DWORD *)v93;
                    if (*(_DWORD *)v101 >= *(_DWORD *)v93)
                    {
                      if (v103 < v102)
                        goto LABEL_169;
                      v104 = *(_DWORD *)(v93 + 4);
                      if (*(_DWORD *)(v101 + 4) >= v104)
                        goto LABEL_169;
                    }
                    else
                    {
                      v104 = *(_DWORD *)(v93 + 4);
                    }
                    v105 = *(_QWORD *)(v93 + 8);
                    v90 = *(_DWORD *)(v93 + 16);
                    *(_DWORD *)v93 = v102;
                    *(_DWORD *)(v93 + 4) = *(_DWORD *)(v101 + 4);
                    v106 = i + 20 * v100;
                    *(_DWORD *)(v93 + 8) = *(_DWORD *)(v106 + 8);
                    *(_QWORD *)(v93 + 12) = *(_QWORD *)(v106 + 12);
                    if (v99 >= 2)
                    {
                      while (1)
                      {
                        v107 = v100 - 1;
                        v100 = (v100 - 1) >> 1;
                        v93 = i + 20 * v100;
                        v108 = *(_DWORD *)v93;
                        if (*(_DWORD *)v93 >= v103)
                        {
                          if (v103 < v108)
                            break;
                          v109 = *(_DWORD *)(v93 + 4);
                          if (v109 >= v104)
                            break;
                        }
                        else
                        {
                          v109 = *(_DWORD *)(v93 + 4);
                        }
                        *(_DWORD *)v101 = v108;
                        *(_DWORD *)(v101 + 4) = v109;
                        v110 = i + 20 * v100;
                        *(_DWORD *)(v101 + 8) = *(_DWORD *)(v110 + 8);
                        *(_QWORD *)(v101 + 12) = *(_QWORD *)(v110 + 12);
                        v101 = v110;
                        if (v107 <= 1)
                          goto LABEL_167;
                      }
                    }
                    v93 = v101;
LABEL_167:
                    *(_DWORD *)v93 = v103;
                    *(_DWORD *)(v93 + 4) = v104;
                    *(_QWORD *)(v93 + 8) = v105;
                    goto LABEL_168;
                  }
LABEL_169:
                  a2 -= 20;
                  if (v11-- <= 2)
                    return;
                }
                *(_DWORD *)v93 = v86;
                *(_DWORD *)(v93 + 4) = v87;
                *(_DWORD *)(v93 + 8) = v88;
                *(_DWORD *)(v93 + 12) = v89;
LABEL_168:
                *(_DWORD *)(v93 + 16) = v90;
                goto LABEL_169;
              }
            }
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = (unsigned int *)(i + 20 * ((unint64_t)v11 >> 1));
          if ((unint64_t)v10 < 0xA01)
          {
            sub_1C53041C0((unsigned int *)(a1 + 20 * ((unint64_t)v11 >> 1)), (unsigned int *)a1, (unsigned int *)(a2 - 20));
          }
          else
          {
            sub_1C53041C0((unsigned int *)a1, (unsigned int *)(a1 + 20 * ((unint64_t)v11 >> 1)), (unsigned int *)(a2 - 20));
            v14 = a1 + 20 * v12;
            sub_1C53041C0((unsigned int *)(a1 + 20), (unsigned int *)(v14 - 20), (unsigned int *)(a2 - 40));
            sub_1C53041C0((unsigned int *)(a1 + 40), (unsigned int *)(a1 + 20 + 20 * v12), (unsigned int *)(a2 - 60));
            sub_1C53041C0((unsigned int *)(v14 - 20), v13, (unsigned int *)(a1 + 20 + 20 * v12));
            v15 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v14 + 16);
            v16 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v16;
            *(_DWORD *)(v14 + 16) = v15;
          }
          --a3;
          v17 = *(_DWORD *)a1;
          if ((a4 & 1) == 0)
          {
            v18 = *(_DWORD *)(a1 - 20);
            if (v18 >= v17)
            {
              if (v17 < v18)
              {
                v19 = *(_DWORD *)(a1 + 4);
              }
              else
              {
                v19 = *(_DWORD *)(a1 + 4);
                if (*(_DWORD *)(a1 - 16) < v19)
                  goto LABEL_12;
              }
              v35 = *v8;
              if (v17 >= *v8 && (v35 < v17 || v19 >= *(_DWORD *)(a2 - 16)))
              {
                for (i = a1 + 20;
                      i < a2 && v17 >= *(_DWORD *)i && (*(_DWORD *)i < v17 || v19 >= *(_DWORD *)(i + 4));
              }
              else
              {
                i = a1;
                do
                {
                  v37 = *(_DWORD *)(i + 20);
                  i += 20;
                  v36 = v37;
                }
                while (v17 >= v37 && (v36 < v17 || v19 >= *(_DWORD *)(i + 4)));
              }
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 20; v17 < v35 || v35 >= v17 && v19 < *(_DWORD *)(j + 4); j -= 20)
                {
                  v39 = *(_DWORD *)(j - 20);
                  v35 = v39;
                }
              }
              v40 = *(_QWORD *)(a1 + 8);
              v41 = *(_DWORD *)(a1 + 16);
              if (i < j)
              {
                v42 = *(_DWORD *)i;
                v43 = *(_DWORD *)j;
                do
                {
                  *(_DWORD *)i = v43;
                  v44 = *(_OWORD *)(i + 4);
                  *(_DWORD *)(i + 4) = *(_DWORD *)(j + 4);
                  *(_DWORD *)(i + 8) = *(_DWORD *)(j + 8);
                  *(_QWORD *)(i + 12) = *(_QWORD *)(j + 12);
                  *(_DWORD *)j = v42;
                  *(_OWORD *)(j + 4) = v44;
                  do
                  {
                    v45 = *(_DWORD *)(i + 20);
                    i += 20;
                    v42 = v45;
                  }
                  while (v17 >= v45 && (v42 < v17 || v19 >= *(_DWORD *)(i + 4)));
                  do
                  {
                    do
                    {
                      v46 = *(_DWORD *)(j - 20);
                      j -= 20;
                      v43 = v46;
                    }
                    while (v17 < v46);
                  }
                  while (v43 >= v17 && v19 < *(_DWORD *)(j + 4));
                }
                while (i < j);
              }
              if (i - 20 != a1)
              {
                *(_DWORD *)a1 = *(_DWORD *)(i - 20);
                *(_DWORD *)(a1 + 4) = *(_DWORD *)(i - 16);
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 12);
                *(_QWORD *)(a1 + 12) = *(_QWORD *)(i - 8);
              }
              a4 = 0;
              *(_DWORD *)(i - 20) = v17;
              *(_DWORD *)(i - 16) = v19;
              *(_QWORD *)(i - 12) = v40;
              *(_DWORD *)(i - 4) = v41;
              continue;
            }
          }
LABEL_12:
          v20 = 0;
          v21 = *(_OWORD *)(a1 + 4);
          while (1)
          {
            v22 = *(_DWORD *)(a1 + v20 + 20);
            if (v22 >= v17 && (v17 < v22 || *(_DWORD *)(a1 + v20 + 24) >= v21))
              break;
            v20 += 20;
          }
          v23 = a1 + v20 + 20;
          if (v20)
          {
            v24 = *v8;
            for (k = (unsigned int *)(a2 - 20); v24 >= v17 && (v17 < v24 || k[1] >= v21); k -= 5)
            {
              v26 = *(k - 5);
              v24 = v26;
            }
          }
          else
          {
            k = (unsigned int *)a2;
            if (v23 < a2)
            {
              v27 = *v8;
              k = (unsigned int *)(a2 - 20);
              if (*v8 >= v17)
              {
                k = (unsigned int *)(a2 - 20);
                do
                {
                  if (v17 >= v27)
                  {
                    if (v23 >= (unint64_t)k || k[1] < v21)
                      break;
                  }
                  else if (v23 >= (unint64_t)k)
                  {
                    break;
                  }
                  v28 = *(k - 5);
                  k -= 5;
                  v27 = v28;
                }
                while (v28 >= v17);
              }
            }
          }
          if (v23 >= (unint64_t)k)
          {
            i = v23;
          }
          else
          {
            v29 = *k;
            i = v23;
            v30 = k;
            do
            {
              *(_DWORD *)i = v29;
              v31 = *(_OWORD *)(i + 4);
              *(_DWORD *)(i + 4) = v30[1];
              *(_DWORD *)(i + 8) = v30[2];
              *(_QWORD *)(i + 12) = *(_QWORD *)(v30 + 3);
              *v30 = v22;
              *(_OWORD *)(v30 + 1) = v31;
              do
              {
                do
                {
                  v32 = *(_DWORD *)(i + 20);
                  i += 20;
                  v22 = v32;
                }
                while (v32 < v17);
              }
              while (v17 >= v22 && *(_DWORD *)(i + 4) < v21);
              do
              {
                v33 = *(v30 - 5);
                v30 -= 5;
                v29 = v33;
              }
              while (v33 >= v17 && (v17 < v29 || v30[1] >= v21));
            }
            while (i < (unint64_t)v30);
          }
          if (i - 20 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(i - 20);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(i - 16);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 12);
            *(_QWORD *)(a1 + 12) = *(_QWORD *)(i - 8);
          }
          *(_DWORD *)(i - 20) = v17;
          *(_OWORD *)(i - 16) = v21;
          if (v23 < (unint64_t)k)
          {
LABEL_49:
            sub_1C53036B4(a1, i - 20, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v34 = sub_1C5304374(a1, i - 20);
          if (!sub_1C5304374(i, a2))
          {
            if (v34)
              continue;
            goto LABEL_49;
          }
          a2 = i - 20;
          if (v34)
            return;
          goto LABEL_1;
        }
        v52 = i + 20;
        v54 = i == a2 || v52 == a2;
        if ((a4 & 1) == 0)
        {
          if (v54)
            return;
          for (m = i + 8; ; m += 20)
          {
            v113 = a1;
            a1 = v52;
            v114 = *(_DWORD *)(v113 + 20);
            v115 = *(_DWORD *)v113;
            if (v114 < *(_DWORD *)v113)
              break;
            if (v115 >= v114)
            {
              v116 = *(_DWORD *)(v113 + 24);
              if (v116 < *(_DWORD *)(v113 + 4))
                goto LABEL_181;
            }
LABEL_187:
            v52 = a1 + 20;
            if (a1 + 20 == a2)
              return;
          }
          v116 = *(_DWORD *)(v113 + 24);
LABEL_181:
          v117 = *(_QWORD *)(v113 + 28);
          v118 = *(_DWORD *)(v113 + 36);
          for (n = m; ; n -= 20)
          {
            v120 = *(_DWORD *)(n - 4);
            *(_DWORD *)(n + 12) = v115;
            *(_DWORD *)(n + 16) = v120;
            *(_DWORD *)(n + 20) = *(_DWORD *)n;
            *(_QWORD *)(n + 24) = *(_QWORD *)(n + 4);
            v115 = *(_DWORD *)(n - 28);
            if (v114 >= v115 && (v115 < v114 || v116 >= *(_DWORD *)(n - 24)))
              break;
          }
          *(_DWORD *)(n - 8) = v114;
          *(_DWORD *)(n - 4) = v116;
          *(_QWORD *)n = v117;
          *(_DWORD *)(n + 8) = v118;
          goto LABEL_187;
        }
        if (v54)
          return;
        v55 = 0;
        v56 = i;
        do
        {
          v57 = v56;
          v56 = v52;
          v58 = *(_DWORD *)(v57 + 20);
          v59 = *(_DWORD *)v57;
          if (v58 >= *(_DWORD *)v57)
          {
            if (v59 < v58)
              goto LABEL_115;
            v60 = *(_DWORD *)(v57 + 24);
            if (v60 >= *(_DWORD *)(v57 + 4))
              goto LABEL_115;
          }
          else
          {
            v60 = *(_DWORD *)(v57 + 24);
          }
          v61 = *(_QWORD *)(v57 + 28);
          v62 = *(_DWORD *)(v57 + 36);
          *(_DWORD *)(v57 + 20) = v59;
          *(_DWORD *)(v56 + 4) = *(_DWORD *)(v57 + 4);
          *(_DWORD *)(v56 + 8) = *(_DWORD *)(v57 + 8);
          *(_QWORD *)(v56 + 12) = *(_QWORD *)(v57 + 12);
          v63 = i;
          if (v57 == i)
            goto LABEL_114;
          v64 = v55;
          while (1)
          {
            v65 = *(_DWORD *)(i + v64 - 20);
            if (v58 >= v65)
              break;
            v66 = *(_DWORD *)(i + v64 - 16);
LABEL_111:
            v57 -= 20;
            v67 = i + v64;
            *(_DWORD *)v67 = v65;
            *(_DWORD *)(v67 + 4) = v66;
            *(_QWORD *)(v67 + 8) = *(_QWORD *)(i + v64 - 12);
            *(_DWORD *)(v67 + 16) = *(_DWORD *)(i + v64 - 4);
            v64 -= 20;
            if (!v64)
            {
              v63 = i;
              goto LABEL_114;
            }
          }
          if (v65 >= v58)
          {
            v63 = i + v64;
            v66 = *(_DWORD *)(i + v64 - 16);
            if (v60 >= v66)
              goto LABEL_114;
            goto LABEL_111;
          }
          v63 = v57;
LABEL_114:
          *(_DWORD *)v63 = v58;
          *(_DWORD *)(v63 + 4) = v60;
          *(_QWORD *)(v63 + 8) = v61;
          *(_DWORD *)(v63 + 16) = v62;
LABEL_115:
          v52 = v56 + 20;
          v55 += 20;
        }
        while (v56 + 20 != a2);
        return;
    }
  }
}

  v9 = (__n128 *)(a2 - 72);
  i = a1;
  while (2)
  {
    a1 = i;
    v11 = a2 - i;
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - i) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v136 = *(_DWORD *)(a2 - 48);
        v135 = *(_DWORD *)(a2 - 44);
        v138 = *(_DWORD *)(i + 24);
        v137 = *(_DWORD *)(i + 28);
        if (v136 == v138 && v135 == v137)
        {
          v298 = *(_DWORD *)(a2 - 40);
          v297 = *(_DWORD *)(a2 - 36);
          v300 = *(_DWORD *)(i + 32);
          v299 = *(_DWORD *)(i + 36);
          if (v298 == v300 && v297 == v299)
          {
            if (*(_DWORD *)(a2 - 32) >= *(_DWORD *)(i + 40))
              return result;
          }
          else if (v300 >= v298 && (v298 < v300 || v299 >= v297))
          {
            return result;
          }
        }
        else if (v136 >= v138 && (v138 < v136 || v135 >= v137))
        {
          return result;
        }
        v384 = *(__n128 *)i;
        v420 = *(_QWORD *)(i + 64);
        v402 = *(_OWORD *)(i + 32);
        v411 = *(_OWORD *)(i + 48);
        v393 = *(_OWORD *)(i + 16);
        v327 = *(_OWORD *)(a2 - 40);
        v326 = *(_OWORD *)(a2 - 24);
        v328 = *(_OWORD *)(a2 - 56);
        *(_BYTE *)(i + 64) = *(_BYTE *)(a2 - 8);
        *(_OWORD *)(i + 32) = v327;
        *(_OWORD *)(i + 48) = v326;
        *(_OWORD *)(i + 16) = v328;
        *(__n128 *)i = *v9;
        *(_BYTE *)(a2 - 8) = v420;
        *(_OWORD *)(a2 - 40) = v402;
        *(_OWORD *)(a2 - 24) = v411;
        *(_OWORD *)(a2 - 56) = v393;
        result = v384;
        *v9 = v384;
        return result;
      case 3:
        result.n128_u64[0] = sub_1C5462F3C(i, i + 72, a2 - 72).n128_u64[0];
        return result;
      case 4:
        result.n128_u64[0] = sub_1C54639B8(i, i + 72, i + 144, a2 - 72).n128_u64[0];
        return result;
      case 5:
        v140 = (__n128 *)(i + 72);
        v141 = (__n128 *)(i + 144);
        v142 = (__n128 *)(i + 216);
        result.n128_u64[0] = sub_1C54639B8(i, i + 72, i + 144, i + 216).n128_u64[0];
        v144 = *(_DWORD *)(a2 - 48);
        v143 = *(_DWORD *)(a2 - 44);
        v146 = *(_DWORD *)(i + 240);
        v145 = *(_DWORD *)(i + 244);
        if (v144 == v146 && v143 == v145)
        {
          v303 = *(_DWORD *)(a2 - 40);
          v302 = *(_DWORD *)(a2 - 36);
          v305 = *(_DWORD *)(i + 248);
          v304 = *(_DWORD *)(i + 252);
          if (v303 == v305 && v302 == v304)
          {
            if (*(_DWORD *)(a2 - 32) >= *(_DWORD *)(i + 256))
              return result;
          }
          else if (v305 >= v303 && (v303 < v305 || v304 >= v302))
          {
            return result;
          }
        }
        else if (v144 >= v146 && (v146 < v144 || v143 >= v145))
        {
          return result;
        }
        v403 = *(_OWORD *)(i + 248);
        v412 = *(_OWORD *)(i + 264);
        v421 = *(_QWORD *)(i + 280);
        v385 = *v142;
        v394 = *(__n128 *)(i + 232);
        v330 = *(_OWORD *)(a2 - 40);
        v329 = *(_OWORD *)(a2 - 24);
        v331 = *(_OWORD *)(a2 - 56);
        *(_BYTE *)(i + 280) = *(_BYTE *)(a2 - 8);
        *(_OWORD *)(i + 248) = v330;
        *(_OWORD *)(i + 264) = v329;
        *(_OWORD *)(i + 232) = v331;
        *v142 = *v9;
        *v9 = v385;
        result = v394;
        *(_BYTE *)(a2 - 8) = v421;
        *(_OWORD *)(a2 - 40) = v403;
        *(_OWORD *)(a2 - 24) = v412;
        *(__n128 *)(a2 - 56) = v394;
        v333 = *(_DWORD *)(i + 240);
        v332 = *(_DWORD *)(i + 244);
        v335 = *(_DWORD *)(i + 168);
        v334 = *(_DWORD *)(i + 172);
        if (v333 == v335 && v332 == v334)
        {
          v337 = *(_DWORD *)(i + 248);
          v336 = *(_DWORD *)(i + 252);
          v339 = *(_DWORD *)(i + 176);
          v338 = *(_DWORD *)(i + 180);
          if (v337 == v339 && v336 == v338)
          {
            if (*(_DWORD *)(i + 256) >= *(_DWORD *)(i + 184))
              return result;
          }
          else if (v339 >= v337 && (v337 < v339 || v338 >= v336))
          {
            return result;
          }
        }
        else if (v333 >= v335 && (v335 < v333 || v332 >= v334))
        {
          return result;
        }
        v404 = *(_OWORD *)(i + 176);
        v413 = *(_OWORD *)(i + 192);
        v422 = *(_QWORD *)(i + 208);
        v386 = *v141;
        v395 = *(_OWORD *)(i + 160);
        v340 = *(_OWORD *)(i + 264);
        *(_OWORD *)(i + 176) = *(_OWORD *)(i + 248);
        *(_OWORD *)(i + 192) = v340;
        *(_BYTE *)(i + 208) = *(_BYTE *)(i + 280);
        v341 = *(_OWORD *)(i + 232);
        *v141 = *v142;
        *(_OWORD *)(i + 160) = v341;
        result = v386;
        *(_BYTE *)(i + 280) = v422;
        *(_OWORD *)(i + 248) = v404;
        *(_OWORD *)(i + 264) = v413;
        *v142 = v386;
        *(_OWORD *)(i + 232) = v395;
        v343 = *(_DWORD *)(i + 168);
        v342 = *(_DWORD *)(i + 172);
        v345 = *(_DWORD *)(i + 96);
        v344 = *(_DWORD *)(i + 100);
        if (v343 == v345 && v342 == v344)
        {
          v347 = *(_DWORD *)(i + 176);
          v346 = *(_DWORD *)(i + 180);
          v349 = *(_DWORD *)(i + 104);
          v348 = *(_DWORD *)(i + 108);
          if (v347 == v349 && v346 == v348)
          {
            if (*(_DWORD *)(i + 184) >= *(_DWORD *)(i + 112))
              return result;
          }
          else if (v349 >= v347 && (v347 < v349 || v348 >= v346))
          {
            return result;
          }
        }
        else if (v343 >= v345 && (v345 < v343 || v342 >= v344))
        {
          return result;
        }
        v405 = *(_OWORD *)(i + 104);
        v414 = *(_OWORD *)(i + 120);
        v423 = *(_QWORD *)(i + 136);
        v387 = *v140;
        v396 = *(_OWORD *)(i + 88);
        v350 = *(_OWORD *)(i + 192);
        *(_OWORD *)(i + 104) = *(_OWORD *)(i + 176);
        *(_OWORD *)(i + 120) = v350;
        *(_BYTE *)(i + 136) = *(_BYTE *)(i + 208);
        v351 = *(_OWORD *)(i + 160);
        *v140 = *v141;
        *(_OWORD *)(i + 88) = v351;
        result = v387;
        *(_BYTE *)(i + 208) = v423;
        *(_OWORD *)(i + 176) = v405;
        *(_OWORD *)(i + 192) = v414;
        *v141 = v387;
        *(_OWORD *)(i + 160) = v396;
        v353 = *(_DWORD *)(i + 96);
        v352 = *(_DWORD *)(i + 100);
        v355 = *(_DWORD *)(i + 24);
        v354 = *(_DWORD *)(i + 28);
        if (v353 == v355 && v352 == v354)
        {
          v357 = *(_DWORD *)(i + 104);
          v356 = *(_DWORD *)(i + 108);
          v359 = *(_DWORD *)(i + 32);
          v358 = *(_DWORD *)(i + 36);
          if (v357 == v359 && v356 == v358)
          {
            if (*(_DWORD *)(i + 112) >= *(_DWORD *)(i + 40))
              return result;
          }
          else if (v359 >= v357 && (v357 < v359 || v358 >= v356))
          {
            return result;
          }
        }
        else if (v353 >= v355 && (v355 < v353 || v352 >= v354))
        {
          return result;
        }
        v388 = *(__n128 *)i;
        v424 = *(_QWORD *)(i + 64);
        v406 = *(_OWORD *)(i + 32);
        v415 = *(_OWORD *)(i + 48);
        v397 = *(_OWORD *)(i + 16);
        *(_BYTE *)(i + 64) = *(_BYTE *)(i + 136);
        v360 = *(_OWORD *)(i + 120);
        *(_OWORD *)(i + 32) = *(_OWORD *)(i + 104);
        *(_OWORD *)(i + 48) = v360;
        v361 = *(_OWORD *)(i + 88);
        *(__n128 *)i = *v140;
        *(_OWORD *)(i + 16) = v361;
        result = v388;
        *(_BYTE *)(i + 136) = v424;
        *(_OWORD *)(i + 104) = v406;
        *(_OWORD *)(i + 120) = v415;
        *v140 = v388;
        *(_OWORD *)(i + 88) = v397;
        return result;
      default:
        if (v11 > 1727)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v181 = (unint64_t)(v12 - 2) >> 1;
            v182 = v181;
            while (1)
            {
              v183 = v182;
              if (v181 < v182)
                goto LABEL_465;
              v184 = (2 * v182) | 1;
              v185 = i + 72 * v184;
              if (2 * v183 + 2 >= v12)
                goto LABEL_393;
              v186 = *(_DWORD *)(v185 + 24);
              v187 = *(_DWORD *)(v185 + 28);
              v189 = *(_DWORD *)(v185 + 96);
              v188 = *(_DWORD *)(v185 + 100);
              if (v186 != v189 || v187 != v188)
                break;
              v192 = *(_DWORD *)(v185 + 32);
              v193 = *(_DWORD *)(v185 + 36);
              v195 = *(_DWORD *)(v185 + 104);
              v194 = *(_DWORD *)(v185 + 108);
              if (v192 != v195 || v193 != v194)
              {
                if (v195 >= v192 && (v194 >= v193 || v192 < v195))
                  goto LABEL_393;
LABEL_392:
                v185 += 72;
                v184 = 2 * v183 + 2;
                goto LABEL_393;
              }
              if (*(_DWORD *)(v185 + 40) < *(_DWORD *)(v185 + 112))
                goto LABEL_392;
LABEL_393:
              v198 = i + 72 * v183;
              v199 = *(_DWORD *)(v185 + 24);
              v200 = *(_DWORD *)(v185 + 28);
              v201 = *(_DWORD *)(v198 + 24);
              v202 = *(_DWORD *)(v198 + 28);
              if (v199 == v201 && v200 == v202)
              {
                v206 = *(_DWORD *)(v185 + 32);
                v205 = *(_DWORD *)(v185 + 36);
                v207 = *(_DWORD *)(v198 + 32);
                v208 = *(_DWORD *)(v198 + 36);
                if (v206 == v207 && v205 == v208)
                {
                  if (*(_DWORD *)(v185 + 40) < *(_DWORD *)(v198 + 40))
                    goto LABEL_465;
                }
                else
                {
                  if (v207 < v206)
                    goto LABEL_465;
                  if (v206 >= v207 && v208 < v205)
                    goto LABEL_465;
                  v205 = *(_DWORD *)(v198 + 36);
                  v206 = *(_DWORD *)(v198 + 32);
                }
              }
              else
              {
                if (v199 < v201)
                  goto LABEL_465;
                if (v201 >= v199 && v200 < v202)
                  goto LABEL_465;
                v206 = *(_DWORD *)(v198 + 32);
                v205 = *(_DWORD *)(v198 + 36);
              }
              v369 = *(_QWORD *)(v198 + 16);
              v365 = *(_OWORD *)v198;
              v211 = *(_DWORD *)(v198 + 40);
              *(_OWORD *)&v381[12] = *(_OWORD *)(v198 + 56);
              *(_OWORD *)v381 = *(_OWORD *)(v198 + 44);
              v213 = *(_OWORD *)(v185 + 32);
              v212 = *(_OWORD *)(v185 + 48);
              v214 = *(_OWORD *)(v185 + 16);
              *(_BYTE *)(v198 + 64) = *(_BYTE *)(v185 + 64);
              *(_OWORD *)(v198 + 32) = v213;
              *(_OWORD *)(v198 + 48) = v212;
              *(_OWORD *)(v198 + 16) = v214;
              *(_OWORD *)v198 = *(_OWORD *)v185;
              while (1)
              {
                if (v181 < v184)
                  goto LABEL_464;
                v215 = v185;
                v216 = 2 * v184;
                v184 = (2 * v184) | 1;
                v185 = i + 72 * v184;
                v217 = v216 + 2;
                if (v217 < v12)
                {
                  v218 = *(_DWORD *)(v185 + 24);
                  v219 = *(_DWORD *)(v185 + 28);
                  v220 = *(_DWORD *)(v185 + 96);
                  v221 = *(_DWORD *)(v185 + 100);
                  if (v218 == v220 && v219 == v221)
                  {
                    v224 = *(_DWORD *)(v185 + 32);
                    v225 = *(_DWORD *)(v185 + 36);
                    v226 = *(_DWORD *)(v185 + 104);
                    v227 = *(_DWORD *)(v185 + 108);
                    if (v224 == v226 && v225 == v227)
                    {
                      if (*(_DWORD *)(v185 + 40) >= *(_DWORD *)(v185 + 112))
                        goto LABEL_441;
LABEL_440:
                      v185 += 72;
                      v184 = v217;
                      goto LABEL_441;
                    }
                    if (v226 < v224)
                      goto LABEL_440;
                    if (v227 < v225 && v224 >= v226)
                      goto LABEL_440;
                  }
                  else
                  {
                    if (v218 < v220)
                      goto LABEL_440;
                    if (v219 < v221 && v220 >= v218)
                      goto LABEL_440;
                  }
                }
LABEL_441:
                v230 = *(_DWORD *)(v185 + 24);
                v231 = *(_DWORD *)(v185 + 28);
                if (v230 == v201 && v231 == v202)
                  break;
                if (v230 < v201)
                  goto LABEL_463;
                if (v201 >= v230 && v231 < v202)
                  goto LABEL_463;
LABEL_462:
                *(_OWORD *)v215 = *(_OWORD *)v185;
                v238 = *(_OWORD *)(v185 + 16);
                v239 = *(_OWORD *)(v185 + 32);
                v240 = *(_OWORD *)(v185 + 48);
                *(_BYTE *)(v215 + 64) = *(_BYTE *)(v185 + 64);
                *(_OWORD *)(v215 + 32) = v239;
                *(_OWORD *)(v215 + 48) = v240;
                *(_OWORD *)(v215 + 16) = v238;
              }
              v234 = *(_DWORD *)(v185 + 32);
              v235 = *(_DWORD *)(v185 + 36);
              if (v234 == v206 && v235 == v205)
              {
                if (*(_DWORD *)(v185 + 40) < v211)
                  goto LABEL_463;
                goto LABEL_462;
              }
              if (v206 >= v234 && (v234 < v206 || v205 >= v235))
                goto LABEL_462;
LABEL_463:
              v185 = v215;
LABEL_464:
              *(_QWORD *)(v185 + 16) = v369;
              *(_OWORD *)v185 = v365;
              *(_DWORD *)(v185 + 24) = v201;
              *(_DWORD *)(v185 + 28) = v202;
              *(_DWORD *)(v185 + 32) = v206;
              *(_DWORD *)(v185 + 36) = v205;
              *(_DWORD *)(v185 + 40) = v211;
              *(_OWORD *)(v185 + 44) = *(_OWORD *)v381;
              *(_QWORD *)(v185 + 57) = *(_QWORD *)&v381[13];
LABEL_465:
              v182 = v183 - 1;
              if (!v183)
              {
LABEL_466:
                v241 = 0;
                v382 = *(__n128 *)i;
                v419 = *(_QWORD *)(i + 64);
                v401 = *(_OWORD *)(i + 32);
                v410 = *(_OWORD *)(i + 48);
                v392 = *(__n128 *)(i + 16);
                v242 = i;
                while (1)
                {
                  v243 = v242;
                  v242 += 72 * v241 + 72;
                  v244 = 2 * v241;
                  v241 = (2 * v241) | 1;
                  v245 = v244 + 2;
                  if (v245 < v12)
                  {
                    v246 = *(_DWORD *)(v242 + 24);
                    v247 = *(_DWORD *)(v242 + 28);
                    v248 = *(_DWORD *)(v242 + 96);
                    v249 = *(_DWORD *)(v242 + 100);
                    if (v246 != v248 || v247 != v249)
                    {
                      if (v246 >= v248 && (v247 >= v249 || v248 < v246))
                        goto LABEL_490;
                      goto LABEL_489;
                    }
                    v252 = *(_DWORD *)(v242 + 32);
                    v253 = *(_DWORD *)(v242 + 36);
                    v254 = *(_DWORD *)(v242 + 104);
                    v255 = *(_DWORD *)(v242 + 108);
                    if (v252 != v254 || v253 != v255)
                    {
                      if (v254 >= v252 && (v255 >= v253 || v252 < v254))
                        goto LABEL_490;
LABEL_489:
                      v242 += 72;
                      v241 = v245;
                      goto LABEL_490;
                    }
                    if (*(_DWORD *)(v242 + 40) < *(_DWORD *)(v242 + 112))
                      goto LABEL_489;
                  }
LABEL_490:
                  *(_OWORD *)v243 = *(_OWORD *)v242;
                  v258 = *(_OWORD *)(v242 + 16);
                  v259 = *(_OWORD *)(v242 + 32);
                  v260 = *(_OWORD *)(v242 + 48);
                  *(_BYTE *)(v243 + 64) = *(_BYTE *)(v242 + 64);
                  *(_OWORD *)(v243 + 32) = v259;
                  *(_OWORD *)(v243 + 48) = v260;
                  *(_OWORD *)(v243 + 16) = v258;
                  if (v241 > (uint64_t)((unint64_t)(v12 - 2) >> 1))
                  {
                    a2 -= 72;
                    if (v242 == a2)
                    {
                      *(__n128 *)v242 = v382;
                      result = v392;
                      *(_BYTE *)(v242 + 64) = v419;
                      *(_OWORD *)(v242 + 32) = v401;
                      *(_OWORD *)(v242 + 48) = v410;
                      *(__n128 *)(v242 + 16) = v392;
                      goto LABEL_545;
                    }
                    *(_OWORD *)v242 = *(_OWORD *)a2;
                    v261 = *(_OWORD *)(a2 + 16);
                    v262 = *(_OWORD *)(a2 + 32);
                    v263 = *(_OWORD *)(a2 + 48);
                    *(_BYTE *)(v242 + 64) = *(_BYTE *)(a2 + 64);
                    *(_OWORD *)(v242 + 32) = v262;
                    *(_OWORD *)(v242 + 48) = v263;
                    *(_OWORD *)(v242 + 16) = v261;
                    *(_BYTE *)(a2 + 64) = v419;
                    *(_OWORD *)(a2 + 32) = v401;
                    *(_OWORD *)(a2 + 48) = v410;
                    *(__n128 *)(a2 + 16) = v392;
                    result = v382;
                    *(__n128 *)a2 = v382;
                    v264 = v242 - i + 72;
                    if (v264 < 73)
                      goto LABEL_545;
                    v265 = v264 / 0x48uLL - 2;
                    v266 = v265 >> 1;
                    v267 = i + 72 * (v265 >> 1);
                    v269 = *(_DWORD *)(v267 + 24);
                    v268 = *(_DWORD *)(v267 + 28);
                    result.n128_u64[0] = *(_QWORD *)(v242 + 24);
                    if (v269 == result.n128_u32[0] && v268 == result.n128_u32[1])
                    {
                      v273 = *(_DWORD *)(v267 + 32);
                      v272 = *(_DWORD *)(v267 + 36);
                      v274 = *(_DWORD *)(v242 + 32);
                      v275 = *(_DWORD *)(v242 + 36);
                      if (v273 == v274 && v272 == v275)
                      {
                        if (*(_DWORD *)(v267 + 40) >= *(_DWORD *)(v242 + 40))
                          goto LABEL_545;
                      }
                      else if (v274 >= v273 && (v273 < v274 || v275 >= v272))
                      {
                        goto LABEL_545;
                      }
                    }
                    else if (v269 >= result.n128_u32[0] && (result.n128_u32[0] < v269 || v268 >= result.n128_u32[1]))
                    {
                      goto LABEL_545;
                    }
                    v376 = *(_QWORD *)(v242 + 16);
                    v373 = *(_OWORD *)v242;
                    v278 = *(_QWORD *)(v242 + 32);
                    v279 = *(_DWORD *)(v242 + 40);
                    *(_OWORD *)&v366[12] = *(_OWORD *)(v242 + 56);
                    *(_OWORD *)v366 = *(_OWORD *)(v242 + 44);
                    v281 = *(_OWORD *)(v267 + 32);
                    v280 = *(_OWORD *)(v267 + 48);
                    v282 = *(_OWORD *)(v267 + 16);
                    *(_BYTE *)(v242 + 64) = *(_BYTE *)(v267 + 64);
                    *(_OWORD *)(v242 + 32) = v281;
                    *(_OWORD *)(v242 + 48) = v280;
                    *(_OWORD *)v242 = *(_OWORD *)v267;
                    *(_OWORD *)(v242 + 16) = v282;
                    if (v265 < 2)
                      goto LABEL_544;
                    while (2)
                    {
                      v283 = v267;
                      v284 = v266 - 1;
                      v266 = (v266 - 1) >> 1;
                      v267 = i + 72 * v266;
                      v285 = *(_DWORD *)(v267 + 24);
                      v286 = *(_DWORD *)(v267 + 28);
                      if (v285 != result.n128_u32[0] || v286 != result.n128_u32[1])
                      {
                        if (v285 >= result.n128_u32[0] && (result.n128_u32[0] < v285 || v286 >= result.n128_u32[1]))
                          break;
                        goto LABEL_541;
                      }
                      v289 = *(_DWORD *)(v267 + 32);
                      v290 = *(_DWORD *)(v267 + 36);
                      if (v289 == (_DWORD)v278 && v290 == HIDWORD(v278))
                      {
                        if (*(_DWORD *)(v267 + 40) >= v279)
                          break;
                        goto LABEL_541;
                      }
                      if (v278 < v289
                        || (v289 >= v278 ? (v292 = HIDWORD(v278) >= v290) : (v292 = 1), !v292))
                      {
LABEL_541:
                        *(_OWORD *)v283 = *(_OWORD *)v267;
                        v293 = *(_OWORD *)(v267 + 16);
                        v294 = *(_OWORD *)(v267 + 32);
                        v295 = *(_OWORD *)(v267 + 48);
                        *(_BYTE *)(v283 + 64) = *(_BYTE *)(v267 + 64);
                        *(_OWORD *)(v283 + 32) = v294;
                        *(_OWORD *)(v283 + 48) = v295;
                        *(_OWORD *)(v283 + 16) = v293;
                        if (v284 <= 1)
                          goto LABEL_544;
                        continue;
                      }
                      break;
                    }
                    v267 = v283;
LABEL_544:
                    *(_QWORD *)(v267 + 16) = v376;
                    *(_OWORD *)v267 = v373;
                    result.n128_u64[1] = v278;
                    *(__n128 *)(v267 + 24) = result;
                    *(_DWORD *)(v267 + 40) = v279;
                    result = *(__n128 *)v366;
                    *(_OWORD *)(v267 + 44) = *(_OWORD *)v366;
                    *(_QWORD *)(v267 + 57) = *(_QWORD *)&v366[13];
LABEL_545:
                    if (v12-- <= 2)
                      return result;
                    goto LABEL_466;
                  }
                }
              }
            }
            if (v186 >= v189 && (v187 >= v188 || v189 < v186))
              goto LABEL_393;
            goto LABEL_392;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = i + 72 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 < 0x2401)
          {
            sub_1C5462F3C(v14, a1, a2 - 72);
          }
          else
          {
            sub_1C5462F3C(a1, v14, a2 - 72);
            v15 = 9 * v13;
            v16 = a1 + 72 * v13 - 72;
            sub_1C5462F3C(a1 + 72, v16, a2 - 144);
            v17 = a1 + 72 + 8 * v15;
            sub_1C5462F3C(a1 + 144, v17, a2 - 216);
            sub_1C5462F3C(v16, v14, v17);
            v377 = *(_OWORD *)a1;
            v416 = *(_QWORD *)(a1 + 64);
            v398 = *(_OWORD *)(a1 + 32);
            v407 = *(_OWORD *)(a1 + 48);
            v389 = *(_OWORD *)(a1 + 16);
            v19 = *(_OWORD *)(v14 + 32);
            v18 = *(_OWORD *)(v14 + 48);
            v20 = *(_OWORD *)(v14 + 16);
            *(_BYTE *)(a1 + 64) = *(_BYTE *)(v14 + 64);
            *(_OWORD *)(a1 + 32) = v19;
            *(_OWORD *)(a1 + 48) = v18;
            *(_OWORD *)(a1 + 16) = v20;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_BYTE *)(v14 + 64) = v416;
            *(_OWORD *)(v14 + 32) = v398;
            *(_OWORD *)(v14 + 48) = v407;
            *(_OWORD *)(v14 + 16) = v389;
            *(_OWORD *)v14 = v377;
          }
          --a3;
          if ((a4 & 1) != 0)
          {
            v22 = *(_DWORD *)(a1 + 24);
            v21 = *(_DWORD *)(a1 + 28);
            goto LABEL_23;
          }
          v22 = *(_DWORD *)(a1 - 48);
          v21 = *(_DWORD *)(a1 - 44);
          v23 = *(_DWORD *)(a1 + 24);
          v24 = *(_DWORD *)(a1 + 28);
          if (v22 == v23 && v21 == v24)
          {
            v26 = *(_DWORD *)(a1 - 40);
            v25 = *(_DWORD *)(a1 - 36);
            v27 = *(_DWORD *)(a1 + 32);
            v28 = *(_DWORD *)(a1 + 36);
            if (v26 == v27 && v25 == v28)
            {
              if (*(_DWORD *)(a1 - 32) < *(_DWORD *)(a1 + 40))
                goto LABEL_23;
              v28 = *(_DWORD *)(a1 - 36);
              v27 = *(_DWORD *)(a1 - 40);
            }
            else if (v27 < v26 || v26 >= v27 && v28 < v25)
            {
              goto LABEL_23;
            }
            goto LABEL_155;
          }
          if (v22 >= v23 && (v23 < v22 || v21 >= v24))
          {
            v27 = *(_DWORD *)(a1 + 32);
            v28 = *(_DWORD *)(a1 + 36);
LABEL_155:
            v375 = *(_QWORD *)(a1 + 16);
            v372 = *(_OWORD *)a1;
            v86 = *(_DWORD *)(a1 + 40);
            *(_OWORD *)v363 = *(_OWORD *)(a1 + 44);
            *(_OWORD *)&v363[12] = *(_OWORD *)(a1 + 56);
            v88 = *(_DWORD *)(a2 - 48);
            v87 = *(_DWORD *)(a2 - 44);
            if (v23 == v88 && v24 == v87)
            {
              v90 = *(_DWORD *)(a2 - 40);
              v89 = *(_DWORD *)(a2 - 36);
              if (v27 == v90 && v28 == v89)
              {
                if (v86 < *(_DWORD *)(a2 - 32))
                  goto LABEL_168;
              }
              else if (v90 < v27 || v27 >= v90 && v89 < v28)
              {
                goto LABEL_168;
              }
            }
            else if (v23 < v88 || v88 >= v23 && v24 < v87)
            {
LABEL_168:
              for (i = a1 + 72; ; i += 72)
              {
                v91 = *(_DWORD *)(i + 24);
                v92 = *(_DWORD *)(i + 28);
                if (v23 == v91 && v24 == v92)
                {
                  v95 = *(_DWORD *)(i + 32);
                  v96 = *(_DWORD *)(i + 36);
                  if (v27 == v95 && v28 == v96)
                  {
                    if (v86 < *(_DWORD *)(i + 40))
                      goto LABEL_215;
                  }
                  else
                  {
                    if (v95 < v27)
                      goto LABEL_215;
                    if (v27 >= v95 && v96 < v28)
                      goto LABEL_215;
                  }
                }
                else
                {
                  if (v23 < v91)
                    goto LABEL_215;
                  if (v91 >= v23 && v24 < v92)
                    goto LABEL_215;
                }
              }
            }
            for (i = a1 + 72; i < a2; i += 72)
            {
              v99 = *(_DWORD *)(i + 24);
              v100 = *(_DWORD *)(i + 28);
              if (v23 == v99 && v24 == v100)
              {
                v103 = *(_DWORD *)(i + 32);
                v104 = *(_DWORD *)(i + 36);
                if (v27 == v103 && v28 == v104)
                {
                  if (v86 < *(_DWORD *)(i + 40))
                    break;
                }
                else
                {
                  if (v103 < v27)
                    break;
                  if (v27 >= v103 && v104 < v28)
                    break;
                }
              }
              else
              {
                if (v23 < v99)
                  break;
                if (v99 >= v23 && v24 < v100)
                  break;
              }
            }
LABEL_215:
            v107 = (unsigned int *)a2;
            if (i >= a2)
              goto LABEL_279;
            v108 = (unsigned int *)(a2 - 40);
            while (v23 == v88 && v24 == v87)
            {
              v110 = *v108;
              v109 = v108[1];
              if (v27 == *v108 && v28 == v109)
              {
                if (v86 >= (int)v108[2])
                  goto LABEL_233;
              }
              else if (v110 >= v27 && (v27 < v110 || v109 >= v28))
              {
                goto LABEL_233;
              }
LABEL_232:
              v88 = *(v108 - 20);
              v87 = *(v108 - 19);
              v108 -= 18;
            }
            if (v23 < v88 || v88 >= v23 && v24 < v87)
              goto LABEL_232;
LABEL_233:
            v107 = v108 - 8;
LABEL_279:
            while (i < (unint64_t)v107)
            {
              v379 = *(__n128 *)i;
              v418 = *(_QWORD *)(i + 64);
              v400 = *(_OWORD *)(i + 32);
              v409 = *(_OWORD *)(i + 48);
              v391 = *(_OWORD *)(i + 16);
              v113 = *((_OWORD *)v107 + 2);
              v112 = *((_OWORD *)v107 + 3);
              v114 = *((_OWORD *)v107 + 1);
              *(_BYTE *)(i + 64) = *((_BYTE *)v107 + 64);
              *(_OWORD *)(i + 32) = v113;
              *(_OWORD *)(i + 48) = v112;
              *(_OWORD *)(i + 16) = v114;
              *(_OWORD *)i = *(_OWORD *)v107;
              *((_BYTE *)v107 + 64) = v418;
              *((_OWORD *)v107 + 2) = v400;
              *((_OWORD *)v107 + 3) = v409;
              *((_OWORD *)v107 + 1) = v391;
              *(__n128 *)v107 = v379;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    i += 72;
                    v115 = *(_DWORD *)(i + 24);
                    v116 = *(_DWORD *)(i + 28);
                    if (v23 == v115 && v24 == v116)
                      break;
                    if (v23 >= v115 && (v115 < v23 || v24 >= v116))
                      continue;
                    goto LABEL_269;
                  }
                  v119 = *(_DWORD *)(i + 32);
                  v120 = *(_DWORD *)(i + 36);
                  if (v27 != v119 || v28 != v120)
                    break;
                  if (v86 < *(_DWORD *)(i + 40))
                    goto LABEL_269;
                }
                if (v119 < v27)
                  break;
              }
              while (v27 < v119 || v120 >= v28);
              do
              {
                while (1)
                {
LABEL_269:
                  while (1)
                  {
                    v107 -= 18;
                    v127 = v107[6];
                    v128 = v107[7];
                    if (v23 == v127 && v24 == v128)
                      break;
                    if (v23 >= v127 && (v127 < v23 || v24 >= v128))
                      goto LABEL_279;
                  }
                  v123 = v107[8];
                  v124 = v107[9];
                  if (v27 != v123 || v28 != v124)
                    break;
                  if (v86 >= (int)v107[10])
                    goto LABEL_279;
                }
              }
              while (v123 < v27 || v27 >= v123 && v124 < v28);
            }
            v131 = (_OWORD *)(i - 72);
            if (i - 72 != a1)
            {
              *(_OWORD *)a1 = *v131;
              v132 = *(_OWORD *)(i - 56);
              v133 = *(_OWORD *)(i - 40);
              v134 = *(_OWORD *)(i - 24);
              *(_BYTE *)(a1 + 64) = *(_BYTE *)(i - 8);
              *(_OWORD *)(a1 + 32) = v133;
              *(_OWORD *)(a1 + 48) = v134;
              *(_OWORD *)(a1 + 16) = v132;
            }
            a4 = 0;
            *(_QWORD *)(i - 56) = v375;
            *v131 = v372;
            *(_DWORD *)(i - 48) = v23;
            *(_DWORD *)(i - 44) = v24;
            *(_DWORD *)(i - 40) = v27;
            *(_DWORD *)(i - 36) = v28;
            *(_DWORD *)(i - 32) = v86;
            result = *(__n128 *)v363;
            *(_QWORD *)(i - 15) = *(_QWORD *)&v363[13];
            *(_OWORD *)(i - 28) = *(_OWORD *)v363;
            continue;
          }
          v21 = *(_DWORD *)(a1 + 28);
          v22 = *(_DWORD *)(a1 + 24);
LABEL_23:
          v29 = 0;
          v374 = *(_QWORD *)(a1 + 16);
          v371 = *(_OWORD *)a1;
          v30 = *(_DWORD *)(a1 + 32);
          v31 = *(_DWORD *)(a1 + 36);
          v32 = *(_DWORD *)(a1 + 40);
          *(_OWORD *)v362 = *(_OWORD *)(a1 + 44);
          *(_OWORD *)&v362[12] = *(_OWORD *)(a1 + 56);
          while (2)
          {
            v33 = a1 + v29;
            v34 = *(_DWORD *)(a1 + v29 + 96);
            v35 = *(_DWORD *)(a1 + v29 + 100);
            if (v34 != v22 || v35 != v21)
            {
              if (v34 >= v22 && (v22 < v34 || v35 >= v21))
                break;
              goto LABEL_47;
            }
            v38 = *(_DWORD *)(v33 + 104);
            v39 = *(_DWORD *)(v33 + 108);
            if (v38 == v30 && v39 == v31)
            {
              if (*(_DWORD *)(a1 + v29 + 112) >= v32)
                break;
              goto LABEL_47;
            }
            if (v30 < v38 || (v38 >= v30 ? (v41 = v31 >= v39) : (v41 = 1), !v41))
            {
LABEL_47:
              v29 += 72;
              continue;
            }
            break;
          }
          v42 = a1 + v29 + 72;
          j = (_DWORD *)(a2 - 72);
          if (v29)
          {
            while (1)
            {
              v44 = j[6];
              v45 = j[7];
              if (v44 == v22 && v45 == v21)
              {
                v48 = j[8];
                v49 = j[9];
                if (v48 == v30 && v49 == v31)
                {
                  if (j[10] < v32)
                    goto LABEL_100;
                }
                else
                {
                  if (v30 < v48)
                    goto LABEL_100;
                  if (v48 >= v30 && v31 < v49)
                    goto LABEL_100;
                }
              }
              else
              {
                if (v44 < v22)
                  goto LABEL_100;
                if (v22 >= v44 && v45 < v21)
                  goto LABEL_100;
              }
              j -= 18;
            }
          }
          j = (_DWORD *)a2;
          if (v42 < a2)
          {
            for (j = (_DWORD *)(a2 - 72); ; j -= 18)
            {
              v52 = j[6];
              v53 = j[7];
              if (v52 != v22 || v53 != v21)
                break;
              v56 = j[8];
              v57 = j[9];
              if (v56 != v30 || v57 != v31)
              {
                if (v30 < v56)
                  goto LABEL_100;
                v55 = v31 < v57 && v56 >= v30;
LABEL_89:
                if (v55 || v42 >= (unint64_t)j)
                  goto LABEL_100;
                continue;
              }
              if (j[10] < v32 || v42 >= (unint64_t)j)
                goto LABEL_100;
            }
            if (v52 < v22)
              goto LABEL_100;
            v55 = v53 < v21 && v22 >= v52;
            goto LABEL_89;
          }
LABEL_100:
          i = v42;
          if (v42 < (unint64_t)j)
          {
            v61 = j;
            do
            {
              v378 = *(__n128 *)i;
              v417 = *(_QWORD *)(i + 64);
              v399 = *(_OWORD *)(i + 32);
              v408 = *(_OWORD *)(i + 48);
              v390 = *(_OWORD *)(i + 16);
              v63 = *((_OWORD *)v61 + 2);
              v62 = *((_OWORD *)v61 + 3);
              v64 = *((_OWORD *)v61 + 1);
              *(_BYTE *)(i + 64) = *((_BYTE *)v61 + 64);
              *(_OWORD *)(i + 32) = v63;
              *(_OWORD *)(i + 48) = v62;
              *(_OWORD *)(i + 16) = v64;
              *(_OWORD *)i = *(_OWORD *)v61;
              *((_BYTE *)v61 + 64) = v417;
              *((_OWORD *)v61 + 2) = v399;
              *((_OWORD *)v61 + 3) = v408;
              *((_OWORD *)v61 + 1) = v390;
              *(__n128 *)v61 = v378;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    i += 72;
                    v65 = *(_DWORD *)(i + 24);
                    v66 = *(_DWORD *)(i + 28);
                    if (v65 == v22 && v66 == v21)
                      break;
                    if (v65 >= v22 && (v22 < v65 || v66 >= v21))
                      goto LABEL_138;
                  }
                  v69 = *(_DWORD *)(i + 32);
                  v70 = *(_DWORD *)(i + 36);
                  if (v69 != v30 || v70 != v31)
                    break;
                  if (*(_DWORD *)(i + 40) >= v32)
                    goto LABEL_138;
                }
              }
              while (v30 < v69 || v69 >= v30 && v31 < v70);
              do
              {
                while (1)
                {
LABEL_138:
                  while (1)
                  {
                    v61 -= 18;
                    v77 = v61[6];
                    v78 = v61[7];
                    if (v77 == v22 && v78 == v21)
                      break;
                    if (v77 >= v22 && (v22 < v77 || v78 >= v21))
                      continue;
                    goto LABEL_147;
                  }
                  v73 = v61[8];
                  v74 = v61[9];
                  if (v73 != v30 || v74 != v31)
                    break;
                  if (v61[10] < v32)
                    goto LABEL_147;
                }
                if (v30 < v73)
                  break;
              }
              while (v73 < v30 || v31 >= v74);
LABEL_147:
              ;
            }
            while (i < (unint64_t)v61);
          }
          v81 = (_OWORD *)(i - 72);
          if (i - 72 != a1)
          {
            *(_OWORD *)a1 = *v81;
            v82 = *(_OWORD *)(i - 56);
            v83 = *(_OWORD *)(i - 40);
            v84 = *(_OWORD *)(i - 24);
            *(_BYTE *)(a1 + 64) = *(_BYTE *)(i - 8);
            *(_OWORD *)(a1 + 32) = v83;
            *(_OWORD *)(a1 + 48) = v84;
            *(_OWORD *)(a1 + 16) = v82;
          }
          *(_QWORD *)(i - 56) = v374;
          *v81 = v371;
          *(_DWORD *)(i - 48) = v22;
          *(_DWORD *)(i - 44) = v21;
          *(_DWORD *)(i - 40) = v30;
          *(_DWORD *)(i - 36) = v31;
          *(_DWORD *)(i - 32) = v32;
          *(_QWORD *)(i - 15) = *(_QWORD *)&v362[13];
          *(_OWORD *)(i - 28) = *(_OWORD *)v362;
          if (v42 < (unint64_t)j)
            goto LABEL_153;
          v85 = sub_1C54632F4(a1, i - 72);
          if (!sub_1C54632F4(i, a2))
          {
            if (v85)
              continue;
LABEL_153:
            sub_1C5461874(a1, i - 72, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = i - 72;
          if (v85)
            return result;
          goto LABEL_1;
        }
        v148 = i + 72;
        v150 = i == a2 || v148 == a2;
        if ((a4 & 1) == 0)
        {
          if (v150)
            return result;
          while (1)
          {
            v306 = a1;
            a1 = v148;
            result.n128_u64[0] = *(_QWORD *)(v306 + 96);
            v307 = *(_DWORD *)(v306 + 24);
            v308 = *(_DWORD *)(v306 + 28);
            if (result.n128_u32[0] == v307 && result.n128_u32[1] == v308)
            {
              v311 = *(_DWORD *)(v306 + 104);
              v312 = *(_DWORD *)(v306 + 108);
              v313 = *(_DWORD *)(v306 + 32);
              v314 = *(_DWORD *)(v306 + 36);
              if (v311 == v313 && v312 == v314)
              {
                if (*(_DWORD *)(v306 + 112) >= *(_DWORD *)(v306 + 40))
                  goto LABEL_597;
              }
              else if (v313 >= v311 && (v311 < v313 || v314 >= v312))
              {
                goto LABEL_597;
              }
            }
            else if (result.n128_u32[0] >= v307 && (v307 < result.n128_u32[0] || result.n128_u32[1] >= v308))
            {
              goto LABEL_597;
            }
            v370 = *(_QWORD *)(a1 + 16);
            v367 = *(_OWORD *)a1;
            v317 = *(_QWORD *)(v306 + 104);
            v318 = *(_DWORD *)(v306 + 112);
            *(_OWORD *)v383 = *(_OWORD *)(v306 + 116);
            *(_OWORD *)&v383[12] = *(_OWORD *)(v306 + 128);
            do
            {
              while (1)
              {
                v319 = v306;
                v320 = *(_OWORD *)v306;
                *(_OWORD *)(v306 + 88) = *(_OWORD *)(v306 + 16);
                v321 = *(_OWORD *)(v306 + 48);
                *(_OWORD *)(v306 + 104) = *(_OWORD *)(v306 + 32);
                *(_OWORD *)(v306 + 120) = v321;
                *(_BYTE *)(v306 + 136) = *(_BYTE *)(v306 + 64);
                *(_OWORD *)(v306 + 72) = v320;
                v306 -= 72;
                v323 = *(_DWORD *)(v319 - 48);
                v322 = *(_DWORD *)(v319 - 44);
                if (result.n128_u64[0] != __PAIR64__(v322, v323))
                  break;
                v325 = *(_DWORD *)(v319 - 40);
                v324 = *(_DWORD *)(v319 - 36);
                if (v317 == __PAIR64__(v324, v325))
                {
                  if (v318 >= *(_DWORD *)(v319 - 32))
                    goto LABEL_596;
                }
                else if (v325 >= v317 && (v317 < v325 || v324 >= HIDWORD(v317)))
                {
                  goto LABEL_596;
                }
              }
            }
            while (result.n128_u32[0] < v323 || v323 >= result.n128_u32[0] && result.n128_u32[1] < v322);
LABEL_596:
            *(_QWORD *)(v319 + 16) = v370;
            *(_OWORD *)v319 = v367;
            result.n128_u64[1] = v317;
            *(__n128 *)(v319 + 24) = result;
            *(_DWORD *)(v319 + 40) = v318;
            result = *(__n128 *)v383;
            *(_OWORD *)(v319 + 44) = *(_OWORD *)v383;
            *(_QWORD *)(v319 + 57) = *(_QWORD *)&v383[13];
LABEL_597:
            v148 = a1 + 72;
            if (a1 + 72 == a2)
              return result;
          }
        }
        if (v150)
          return result;
        v151 = 0;
        v152 = i;
        do
        {
          v153 = v152;
          v152 = v148;
          result.n128_u64[0] = *(_QWORD *)(v153 + 96);
          v154 = *(_DWORD *)(v153 + 24);
          v155 = *(_DWORD *)(v153 + 28);
          if (result.n128_u32[0] == v154 && result.n128_u32[1] == v155)
          {
            v158 = *(_DWORD *)(v153 + 104);
            v159 = *(_DWORD *)(v153 + 108);
            v160 = *(_DWORD *)(v153 + 32);
            v161 = *(_DWORD *)(v153 + 36);
            if (v158 == v160 && v159 == v161)
            {
              if (*(_DWORD *)(v153 + 112) >= *(_DWORD *)(v153 + 40))
                goto LABEL_365;
            }
            else if (v160 >= v158 && (v158 < v160 || v161 >= v159))
            {
              goto LABEL_365;
            }
          }
          else if (result.n128_u32[0] >= v154 && (v154 < result.n128_u32[0] || result.n128_u32[1] >= v155))
          {
            goto LABEL_365;
          }
          v368 = *(_QWORD *)(v148 + 16);
          v364 = *(_OWORD *)v148;
          v164 = *(_QWORD *)(v153 + 104);
          v165 = *(_DWORD *)(v153 + 112);
          *(_OWORD *)&v380[12] = *(_OWORD *)(v153 + 128);
          *(_OWORD *)v380 = *(_OWORD *)(v153 + 116);
          v166 = *(_OWORD *)(v153 + 48);
          *(_OWORD *)(v148 + 32) = *(_OWORD *)(v153 + 32);
          *(_OWORD *)(v148 + 48) = v166;
          *(_BYTE *)(v148 + 64) = *(_BYTE *)(v153 + 64);
          v167 = *(_OWORD *)(v153 + 16);
          *(_OWORD *)v148 = *(_OWORD *)v153;
          *(_OWORD *)(v148 + 16) = v167;
          v168 = i;
          if (v153 == i)
            goto LABEL_364;
          v169 = v151;
          while (1)
          {
            v170 = i + v169;
            v171 = *(_DWORD *)(i + v169 - 48);
            v172 = *(_DWORD *)(i + v169 - 44);
            if (result.n128_u32[0] != v171 || result.n128_u32[1] != v172)
              break;
            v175 = *(_DWORD *)(v170 - 40);
            v176 = *(_DWORD *)(v170 - 36);
            if ((_DWORD)v164 == v175 && HIDWORD(v164) == v176)
            {
              if (v165 >= *(_DWORD *)(i + v169 - 32))
                goto LABEL_363;
            }
            else if (v175 >= v164 && (v164 < v175 || v176 >= HIDWORD(v164)))
            {
              v168 = i + v169;
              goto LABEL_364;
            }
LABEL_361:
            v153 -= 72;
            v179 = *(_OWORD *)(v170 - 24);
            *(_OWORD *)(v170 + 32) = *(_OWORD *)(v170 - 40);
            *(_OWORD *)(v170 + 48) = v179;
            *(_BYTE *)(v170 + 64) = *(_BYTE *)(v170 - 8);
            v180 = *(_OWORD *)(v170 - 56);
            *(_OWORD *)v170 = *(_OWORD *)(v170 - 72);
            *(_OWORD *)(v170 + 16) = v180;
            v169 -= 72;
            if (!v169)
            {
              v168 = i;
              goto LABEL_364;
            }
          }
          if (result.n128_u32[0] < v171)
            goto LABEL_361;
          if (v171 >= result.n128_u32[0] && result.n128_u32[1] < v172)
            goto LABEL_361;
LABEL_363:
          v168 = v153;
LABEL_364:
          *(_QWORD *)(v168 + 16) = v368;
          *(_OWORD *)v168 = v364;
          result.n128_u64[1] = v164;
          *(__n128 *)(v168 + 24) = result;
          *(_DWORD *)(v168 + 40) = v165;
          result = *(__n128 *)v380;
          *(_OWORD *)(v168 + 44) = *(_OWORD *)v380;
          *(_QWORD *)(v168 + 57) = *(_QWORD *)&v380[13];
LABEL_365:
          v148 += 72;
          v151 += 72;
        }
        while (v152 + 72 != a2);
        return result;
    }
  }
}

  v8 = (unint64_t *)(a2 - 3);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = *(a2 - 3);
        v23 = *v9;
        if (v22 < *v9)
        {
          *v9 = v22;
          *(a2 - 3) = v23;
          v42 = *(_OWORD *)(v9 + 1);
          *(_OWORD *)(v9 + 1) = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v42;
        }
        return;
      case 3uLL:
        sub_1C546D0A0(v9, v9 + 3, v8);
        return;
      case 4uLL:
        sub_1C546D518((uint64_t)v9, (uint64_t)(v9 + 3), (uint64_t)(v9 + 6), (uint64_t)v8);
        return;
      case 5uLL:
        sub_1C546D5D8((uint64_t)v9, (uint64_t)(v9 + 3), (uint64_t)(v9 + 6), (uint64_t)(v9 + 9), (uint64_t)v8);
        return;
      default:
        if (v12 > 575)
        {
          if (v11 == 1)
          {
            if (v9 != (unint64_t *)a2)
              sub_1C546D6D0((uint64_t)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            sub_1C546D0A0(&v9[3 * (v13 >> 1)], v9, v8);
          }
          else
          {
            sub_1C546D0A0(v9, &v9[3 * (v13 >> 1)], v8);
            v16 = v8;
            v17 = &v9[3 * v14];
            sub_1C546D0A0(v9 + 3, v17 - 3, (unint64_t *)a2 - 6);
            sub_1C546D0A0(v9 + 6, &v9[3 * v14 + 3], (unint64_t *)a2 - 9);
            sub_1C546D0A0(v17 - 3, v15, &v9[3 * v14 + 3]);
            v18 = *v9;
            *v9 = *v15;
            *v15 = v18;
            v41 = *(_OWORD *)(v9 + 1);
            *(_OWORD *)(v9 + 1) = *(_OWORD *)(v17 + 1);
            *(_OWORD *)(v17 + 1) = v41;
            v8 = v16;
          }
          if ((a5 & 1) == 0 && *(v9 - 3) >= *v9)
          {
            v9 = sub_1C546D190((uint64_t *)v9, (unint64_t *)a2);
            goto LABEL_16;
          }
          v19 = sub_1C546D278((uint64_t *)v9, (unint64_t *)a2);
          if ((v20 & 1) == 0)
            goto LABEL_14;
          v21 = sub_1C546D368((uint64_t)v9, v19);
          v9 = (unint64_t *)(v19 + 24);
          if (!sub_1C546D368(v19 + 24, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_14:
            sub_1C546CC50(a1, v19, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v19 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (uint64_t *)v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        v24 = (uint64_t *)(v9 + 3);
        v26 = v9 == (unint64_t *)a2 || v24 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v26)
          {
            v27 = 0;
            v28 = v9;
            do
            {
              v29 = v24;
              v30 = v28[3];
              if (v30 < *v28)
              {
                v43 = *((_OWORD *)v28 + 2);
                v31 = *v28;
                v32 = v27;
                while (1)
                {
                  v33 = (char *)v9 + v32;
                  *((_QWORD *)v33 + 3) = v31;
                  *((_OWORD *)v33 + 2) = *(_OWORD *)((char *)v9 + v32 + 8);
                  if (!v32)
                    break;
                  v31 = *((_QWORD *)v33 - 3);
                  v32 -= 24;
                  if (v30 >= v31)
                  {
                    v34 = (unint64_t *)((char *)v9 + v32 + 24);
                    goto LABEL_41;
                  }
                }
                v34 = v9;
LABEL_41:
                *v34 = v30;
                *(_OWORD *)(v33 + 8) = v43;
              }
              v24 = v29 + 3;
              v27 += 24;
              v28 = (unint64_t *)v29;
            }
            while (v29 + 3 != a2);
          }
        }
        else if (!v26)
        {
          v35 = v9 + 4;
          do
          {
            v36 = v24;
            v37 = a1[3];
            if (v37 < *a1)
            {
              v44 = *((_OWORD *)a1 + 2);
              v38 = *a1;
              v39 = v35;
              do
              {
                *(v39 - 1) = v38;
                *(_OWORD *)v39 = *(_OWORD *)(v39 - 3);
                v38 = *(v39 - 7);
                v39 -= 3;
              }
              while (v37 < v38);
              *(v39 - 1) = v37;
              *(_OWORD *)v39 = v44;
            }
            v24 = v36 + 3;
            v35 += 3;
            a1 = (unint64_t *)v36;
          }
          while (v36 + 3 != a2);
        }
        return;
    }
  }
}

  v9 = a2 - 2;
  i = a1;
  while (2)
  {
    a1 = i;
    v11 = (uint64_t)a2 - i;
    v12 = (uint64_t)((uint64_t)a2 - i) >> 5;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (a2[-1].n128_u8[8])
          v55 = *(_BYTE *)(i + 24) == 0;
        else
          v55 = 1;
        if (v55)
        {
          if (!*(_BYTE *)(i + 24))
            return result;
        }
        else if (v9->n128_u64[0] >= *(_QWORD *)i)
        {
          return result;
        }
        v144 = *(__n128 *)i;
        v151 = *(__n128 *)(i + 16);
        v116 = a2[-1];
        *(__n128 *)i = *v9;
        *(__n128 *)(i + 16) = v116;
        result = v144;
        *v9 = v144;
        a2[-1] = v151;
        return result;
      case 3:
        result.n128_u64[0] = sub_1C548CE94((__int128 *)i, (__int128 *)(i + 32), (__int128 *)&a2[-2], result).n128_u64[0];
        return result;
      case 4:
        result.n128_u64[0] = sub_1C548D2D4(i, i + 32, i + 64, (uint64_t)&a2[-2], result).n128_u64[0];
        return result;
      case 5:
        v56 = (__n128 *)(i + 32);
        v57 = (__n128 *)(i + 64);
        v58 = (__n128 *)(i + 96);
        result.n128_u64[0] = sub_1C548D2D4(i, i + 32, i + 64, i + 96, result).n128_u64[0];
        if (a2[-1].n128_u8[8])
          v59 = *(_BYTE *)(i + 120) == 0;
        else
          v59 = 1;
        if (v59)
        {
          if (!*(_BYTE *)(i + 120))
            return result;
        }
        else if (v9->n128_u64[0] >= v58->n128_u64[0])
        {
          return result;
        }
        result = *v58;
        v152 = *(__n128 *)(i + 112);
        v117 = a2[-1];
        *v58 = *v9;
        *(__n128 *)(i + 112) = v117;
        *v9 = result;
        a2[-1] = v152;
        if (*(_BYTE *)(i + 120) && *(_BYTE *)(i + 88))
        {
          if (v58->n128_u64[0] >= v57->n128_u64[0])
            return result;
        }
        else if (!*(_BYTE *)(i + 88))
        {
          return result;
        }
        v124 = *v57;
        result = *(__n128 *)(i + 80);
        v125 = *(_OWORD *)(i + 112);
        *v57 = *v58;
        *(_OWORD *)(i + 80) = v125;
        *v58 = v124;
        *(__n128 *)(i + 112) = result;
        if (*(_BYTE *)(i + 88) && *(_BYTE *)(i + 56))
        {
          if (v57->n128_u64[0] >= v56->n128_u64[0])
            return result;
        }
        else if (!*(_BYTE *)(i + 56))
        {
          return result;
        }
        v126 = *v56;
        result = *(__n128 *)(i + 48);
        v127 = *(_OWORD *)(i + 80);
        *v56 = *v57;
        *(_OWORD *)(i + 48) = v127;
        *v57 = v126;
        *(__n128 *)(i + 80) = result;
        if (*(_BYTE *)(i + 56) && *(_BYTE *)(i + 24))
        {
          if (*(_QWORD *)(i + 32) >= *(_QWORD *)i)
            return result;
        }
        else if (!*(_BYTE *)(i + 24))
        {
          return result;
        }
        v146 = *(__n128 *)i;
        v153 = *(_OWORD *)(i + 16);
        v128 = *(_OWORD *)(i + 48);
        *(__n128 *)i = *v56;
        *(_OWORD *)(i + 16) = v128;
        result = v146;
        *v56 = v146;
        *(_OWORD *)(i + 48) = v153;
        return result;
      default:
        if (v11 <= 767)
        {
          v60 = (__n128 *)(i + 32);
          v62 = (__n128 *)i == a2 || v60 == a2;
          if ((a4 & 1) != 0)
          {
            if (v62)
              return result;
            v63 = 0;
            v64 = (__n128 *)i;
            while (1)
            {
              v65 = v64;
              v64 = v60;
              v66 = v65[3].n128_u8[8];
              if (v65[3].n128_u8[8])
                v67 = v65[1].n128_u8[8] == 0;
              else
                v67 = 1;
              if (v67)
              {
                if (!v65[1].n128_u8[8])
                  goto LABEL_166;
                v68 = v64->n128_u64[0];
              }
              else
              {
                v68 = v64->n128_u64[0];
                if (v64->n128_u64[0] >= v65->n128_u64[0])
                  goto LABEL_166;
              }
              v141 = *(__n128 *)((char *)v65 + 40);
              *(_DWORD *)v134 = *(unsigned __int32 *)((char *)&v65[3].n128_u32[2] + 1);
              *(_DWORD *)&v134[3] = v65[3].n128_u32[3];
              v69 = v65[1];
              *v64 = *v65;
              v64[1] = v69;
              v70 = i;
              if (v65 == (__n128 *)i)
                goto LABEL_165;
              v71 = v63;
              while (1)
              {
                v72 = (_OWORD *)(i + v71);
                v73 = (unint64_t *)(i + v71 - 32);
                if (v66 && *(_BYTE *)(i + v71 - 8))
                {
                  if (v68 >= *v73)
                  {
                    v70 = i + v71;
                    goto LABEL_165;
                  }
                  goto LABEL_162;
                }
                if (!*(_BYTE *)(i + v71 - 8))
                  break;
LABEL_162:
                v65 -= 2;
                v74 = *(_OWORD *)(i + v71 - 16);
                *v72 = *(_OWORD *)v73;
                v72[1] = v74;
                v71 -= 32;
                if (!v71)
                {
                  v70 = i;
                  goto LABEL_165;
                }
              }
              v70 = (unint64_t)v65;
LABEL_165:
              *(_QWORD *)v70 = v68;
              result = v141;
              *(__n128 *)(v70 + 8) = v141;
              *(_BYTE *)(v70 + 24) = v66;
              *(_DWORD *)(v70 + 25) = *(_DWORD *)v134;
              *(_DWORD *)(v70 + 28) = *(_DWORD *)&v134[3];
LABEL_166:
              v60 = v64 + 2;
              v63 += 32;
              if (&v64[2] == a2)
                return result;
            }
          }
          if (v62)
            return result;
          while (1)
          {
            v118 = a1;
            a1 = (uint64_t)v60;
            v119 = *(unsigned __int8 *)(v118 + 56);
            if (*(_BYTE *)(v118 + 56))
              v120 = *(_BYTE *)(v118 + 24) == 0;
            else
              v120 = 1;
            if (v120)
            {
              if (!*(_BYTE *)(v118 + 24))
                goto LABEL_267;
              v121 = v60->n128_u64[0];
            }
            else
            {
              v121 = v60->n128_u64[0];
              if (*(_QWORD *)a1 >= *(_QWORD *)v118)
                goto LABEL_267;
            }
            v145 = *(__n128 *)(v118 + 40);
            *(_DWORD *)v137 = *(_DWORD *)(v118 + 57);
            *(_DWORD *)&v137[3] = *(_DWORD *)(v118 + 60);
            do
            {
              while (1)
              {
                v122 = v118;
                v123 = *(_OWORD *)(v118 + 16);
                *(_OWORD *)(v118 + 32) = *(_OWORD *)v118;
                *(_OWORD *)(v118 + 48) = v123;
                v118 -= 32;
                if (!v119 || !*(_BYTE *)(v122 - 8))
                  break;
                if (v121 >= *(_QWORD *)(v122 - 32))
                  goto LABEL_266;
              }
            }
            while (*(_BYTE *)(v122 - 8));
LABEL_266:
            *(_QWORD *)v122 = v121;
            result = v145;
            *(__n128 *)(v122 + 8) = v145;
            *(_BYTE *)(v122 + 24) = v119;
            *(_DWORD *)(v122 + 25) = *(_DWORD *)v137;
            *(_DWORD *)(v122 + 28) = *(_DWORD *)&v137[3];
LABEL_267:
            v60 = (__n128 *)(a1 + 32);
            if ((__n128 *)(a1 + 32) == a2)
              return result;
          }
        }
        if (!a3)
        {
          if ((__n128 *)i == a2)
            return result;
          v75 = (unint64_t)(v12 - 2) >> 1;
          v76 = v75;
          while (1)
          {
            v77 = v76;
            if (v75 >= v76)
            {
              v78 = (2 * v76) | 1;
              v79 = i + 32 * v78;
              if (2 * v77 + 2 < v12)
              {
                v80 = *(_BYTE *)(v79 + 56) != 0;
                if (*(_BYTE *)(v79 + 24))
                  v81 = *(_BYTE *)(v79 + 56) == 0;
                else
                  v81 = 1;
                if (!v81)
                  v80 = *(_QWORD *)v79 < *(_QWORD *)(v79 + 32);
                if (v80)
                {
                  v79 += 32;
                  v78 = 2 * v77 + 2;
                }
              }
              v82 = i + 32 * v77;
              v83 = *(unsigned __int8 *)(v82 + 24);
              if (*(_BYTE *)(v79 + 24))
                v84 = v83 == 0;
              else
                v84 = 1;
              if (v84)
              {
                if (!*(_BYTE *)(v82 + 24))
                {
                  v85 = *(_QWORD *)v82;
LABEL_187:
                  v142 = *(_OWORD *)(v82 + 8);
                  *(_DWORD *)v135 = *(_DWORD *)(v82 + 25);
                  *(_DWORD *)&v135[3] = *(_DWORD *)(v82 + 28);
                  v86 = *(_OWORD *)(v79 + 16);
                  *(_OWORD *)v82 = *(_OWORD *)v79;
                  *(_OWORD *)(v82 + 16) = v86;
                  if (v75 >= v78)
                  {
                    do
                    {
                      v88 = 2 * v78;
                      v78 = (2 * v78) | 1;
                      v87 = i + 32 * v78;
                      v89 = v88 + 2;
                      if (v89 < v12)
                      {
                        v90 = *(_BYTE *)(v87 + 56) != 0;
                        if (*(_BYTE *)(v87 + 24))
                          v91 = *(_BYTE *)(v87 + 56) == 0;
                        else
                          v91 = 1;
                        if (!v91)
                          v90 = *(_QWORD *)v87 < *(_QWORD *)(v87 + 32);
                        if (v90)
                        {
                          v87 += 32;
                          v78 = v89;
                        }
                      }
                      if (*(_BYTE *)(v87 + 24))
                        v92 = v83 == 0;
                      else
                        v92 = 1;
                      if (v92)
                      {
                        if (v83)
                          goto LABEL_188;
                      }
                      else if (*(_QWORD *)v87 < v85)
                      {
                        goto LABEL_188;
                      }
                      v93 = *(_OWORD *)(v87 + 16);
                      *(_OWORD *)v79 = *(_OWORD *)v87;
                      *(_OWORD *)(v79 + 16) = v93;
                      v79 = v87;
                    }
                    while (v75 >= v78);
                  }
                  else
                  {
LABEL_188:
                    v87 = v79;
                  }
                  *(_QWORD *)v87 = v85;
                  *(_OWORD *)(v87 + 8) = v142;
                  *(_BYTE *)(v87 + 24) = v83;
                  *(_DWORD *)(v87 + 25) = *(_DWORD *)v135;
                  *(_DWORD *)(v87 + 28) = *(_DWORD *)&v135[3];
                }
              }
              else
              {
                v85 = *(_QWORD *)v82;
                if (*(_QWORD *)v79 >= *(_QWORD *)v82)
                  goto LABEL_187;
              }
            }
            v76 = v77 - 1;
            if (!v77)
            {
              while (1)
              {
                v94 = 0;
                v143 = *(__n128 *)i;
                v150 = *(__n128 *)(i + 16);
                v95 = (_OWORD *)i;
                do
                {
                  v96 = (uint64_t)&v95[2 * v94 + 2];
                  v97 = (2 * v94) | 1;
                  v98 = 2 * v94 + 2;
                  if (v98 < v12)
                  {
                    v99 = *(_BYTE *)(v96 + 56) != 0;
                    if (*(_BYTE *)(v96 + 24))
                      v100 = *(_BYTE *)(v96 + 56) == 0;
                    else
                      v100 = 1;
                    if (!v100)
                      v99 = *(_QWORD *)v96 < *(_QWORD *)(v96 + 32);
                    if (v99)
                    {
                      v96 += 32;
                      v97 = v98;
                    }
                  }
                  v101 = *(_OWORD *)(v96 + 16);
                  *v95 = *(_OWORD *)v96;
                  v95[1] = v101;
                  v95 = (_OWORD *)v96;
                  v94 = v97;
                }
                while (v97 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                a2 -= 2;
                if ((__n128 *)v96 == a2)
                {
                  result = v143;
                  *(__n128 *)v96 = v143;
                  *(__n128 *)(v96 + 16) = v150;
                  goto LABEL_241;
                }
                v102 = a2[1];
                *(__n128 *)v96 = *a2;
                *(__n128 *)(v96 + 16) = v102;
                result = v143;
                *a2 = v143;
                a2[1] = v150;
                v103 = v96 - i + 32;
                if (v103 >= 33)
                {
                  v104 = ((unint64_t)v103 >> 5) - 2;
                  v105 = v104 >> 1;
                  v106 = i + 32 * (v104 >> 1);
                  if (*(_BYTE *)(v106 + 24))
                    v107 = *(_BYTE *)(v96 + 24) == 0;
                  else
                    v107 = 1;
                  if (v107)
                  {
                    if (!*(_BYTE *)(v96 + 24))
                      goto LABEL_241;
                    v108 = *(_QWORD *)v96;
                  }
                  else
                  {
                    v108 = *(_QWORD *)v96;
                    if (*(_QWORD *)v106 >= *(_QWORD *)v96)
                      goto LABEL_241;
                  }
                  v136 = *(__n128 *)(v96 + 8);
                  v109 = *(unsigned __int8 *)(v96 + 24);
                  *(_DWORD *)&v131[3] = *(_DWORD *)(v96 + 28);
                  *(_DWORD *)v131 = *(_DWORD *)(v96 + 25);
                  v110 = *(_OWORD *)(v106 + 16);
                  *(_OWORD *)v96 = *(_OWORD *)v106;
                  *(_OWORD *)(v96 + 16) = v110;
                  if (v104 >= 2)
                  {
                    do
                    {
                      v112 = v105 - 1;
                      v105 = (v105 - 1) >> 1;
                      v111 = i + 32 * v105;
                      if (*(_BYTE *)(v111 + 24))
                        v113 = v109 == 0;
                      else
                        v113 = 1;
                      if (v113)
                      {
                        if (!v109)
                          goto LABEL_230;
                      }
                      else if (*(_QWORD *)v111 >= v108)
                      {
                        goto LABEL_230;
                      }
                      v114 = *(_OWORD *)(v111 + 16);
                      *(_OWORD *)v106 = *(_OWORD *)v111;
                      *(_OWORD *)(v106 + 16) = v114;
                      v106 = i + 32 * v105;
                    }
                    while (v112 > 1);
                  }
                  else
                  {
LABEL_230:
                    v111 = v106;
                  }
                  *(_QWORD *)v111 = v108;
                  result = v136;
                  *(__n128 *)(v111 + 8) = v136;
                  *(_BYTE *)(v111 + 24) = v109;
                  *(_DWORD *)(v111 + 25) = *(_DWORD *)v131;
                  *(_DWORD *)(v111 + 28) = *(_DWORD *)&v131[3];
                }
LABEL_241:
                if (v12-- <= 2)
                  return result;
              }
            }
          }
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (__int128 *)(i + 32 * ((unint64_t)v12 >> 1));
        if ((unint64_t)v11 <= 0x1000)
        {
          sub_1C548CE94((__int128 *)(a1 + 32 * ((unint64_t)v12 >> 1)), (__int128 *)a1, (__int128 *)&a2[-2], result);
        }
        else
        {
          v15 = sub_1C548CE94((__int128 *)a1, (__int128 *)(a1 + 32 * ((unint64_t)v12 >> 1)), (__int128 *)&a2[-2], result);
          v16 = sub_1C548CE94((__int128 *)(a1 + 32), v14 - 2, (__int128 *)&a2[-4], v15);
          v17 = sub_1C548CE94((__int128 *)(a1 + 64), (__int128 *)(a1 + 32 + 32 * v13), (__int128 *)&a2[-6], v16);
          sub_1C548CE94(v14 - 2, v14, (__int128 *)(a1 + 32 + 32 * v13), v17);
          v138 = *(_OWORD *)a1;
          v147 = *(_OWORD *)(a1 + 16);
          v18 = v14[1];
          *(_OWORD *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v18;
          *v14 = v138;
          v14[1] = v147;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v20 = *(unsigned __int8 *)(a1 + 24);
          if (*(_BYTE *)(a1 - 8) && *(_BYTE *)(a1 + 24))
          {
            v19 = *(_QWORD *)a1;
            if (*(_QWORD *)(a1 - 32) < *(_QWORD *)a1)
              goto LABEL_13;
          }
          else
          {
            v19 = *(_QWORD *)a1;
            if (*(_BYTE *)(a1 + 24))
              goto LABEL_13;
          }
          v133 = *(__n128 *)(a1 + 8);
          *(_DWORD *)v130 = *(_DWORD *)(a1 + 25);
          *(_DWORD *)&v130[3] = *(_DWORD *)(a1 + 28);
          v43 = a2[-1].n128_u8[8];
          if (*(_BYTE *)(a1 + 24) && a2[-1].n128_u8[8])
          {
            if (v19 >= v9->n128_u64[0])
              goto LABEL_79;
          }
          else if (!a2[-1].n128_u8[8])
          {
LABEL_79:
            for (i = a1 + 32; i < (unint64_t)a2; i += 32)
            {
              if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(i + 24))
              {
                if (v19 < *(_QWORD *)i)
                  goto LABEL_94;
              }
              else if (*(_BYTE *)(i + 24))
              {
                goto LABEL_94;
              }
            }
            goto LABEL_94;
          }
          v44 = a1 + 32;
          do
          {
            while (1)
            {
              i = v44;
              v45 = *(unsigned __int8 *)(v44 + 24);
              v44 += 32;
              if (!*(_BYTE *)(a1 + 24) || !v45)
                break;
              if (v19 < *(_QWORD *)i)
                goto LABEL_94;
            }
          }
          while (!v45);
LABEL_94:
          v46 = (__int128 *)a2;
          if (i >= (unint64_t)a2)
            goto LABEL_115;
          v47 = &a2[-3].n128_u8[8];
          if (!*(_BYTE *)(a1 + 24))
            goto LABEL_99;
LABEL_96:
          if (v43)
          {
            if (v19 >= *((_QWORD *)v47 + 1))
              goto LABEL_102;
            goto LABEL_100;
          }
LABEL_99:
          while (v43)
          {
LABEL_100:
            v48 = *v47;
            v47 -= 32;
            v43 = v48;
            if (*(_BYTE *)(a1 + 24))
              goto LABEL_96;
          }
LABEL_102:
          v46 = (__int128 *)(v47 + 8);
LABEL_115:
          while (i < (unint64_t)v46)
          {
            v140 = *(_OWORD *)i;
            v149 = *(_OWORD *)(i + 16);
            v49 = v46[1];
            *(_OWORD *)i = *v46;
            *(_OWORD *)(i + 16) = v49;
            *v46 = v140;
            v46[1] = v149;
            v50 = i + 32;
            do
            {
              while (1)
              {
                i = v50;
                v51 = *(unsigned __int8 *)(v50 + 24);
                v50 += 32;
                if (!v20 || !v51)
                  break;
                if (v19 < *(_QWORD *)i)
                  goto LABEL_109;
              }
            }
            while (!v51);
LABEL_109:
            v52 = v46 - 2;
            do
            {
              while (1)
              {
                v46 = v52;
                v53 = *((unsigned __int8 *)v52 + 24);
                v52 -= 2;
                if (!v20 || !v53)
                  break;
                if (v19 >= *(_QWORD *)v46)
                  goto LABEL_115;
              }
            }
            while (v53);
          }
          if (i - 32 != a1)
          {
            v54 = *(_OWORD *)(i - 16);
            *(_OWORD *)a1 = *(_OWORD *)(i - 32);
            *(_OWORD *)(a1 + 16) = v54;
          }
          a4 = 0;
          *(_QWORD *)(i - 32) = v19;
          result = v133;
          *(__n128 *)(i - 24) = v133;
          *(_BYTE *)(i - 8) = v20;
          *(_DWORD *)(i - 4) = *(_DWORD *)&v130[3];
          *(_DWORD *)(i - 7) = *(_DWORD *)v130;
          continue;
        }
        v19 = *(_QWORD *)a1;
        v20 = *(unsigned __int8 *)(a1 + 24);
LABEL_13:
        v21 = 0;
        v132 = *(__n128 *)(a1 + 8);
        *(_DWORD *)v129 = *(_DWORD *)(a1 + 25);
        *(_DWORD *)&v129[3] = *(_DWORD *)(a1 + 28);
        while (2)
        {
          if (*(_BYTE *)(a1 + v21 + 56))
            v22 = v20 == 0;
          else
            v22 = 1;
          if (v22)
          {
            if (!v20)
              goto LABEL_23;
LABEL_22:
            v21 += 32;
            continue;
          }
          break;
        }
        if (*(_QWORD *)(a1 + v21 + 32) < v19)
          goto LABEL_22;
LABEL_23:
        v23 = a1 + v21 + 32;
        v24 = a2 - 2;
        if (v21)
        {
          do
          {
            while (1)
            {
              v25 = v24;
              v26 = v24[1].n128_u8[8];
              v24 -= 2;
              if (v26 && v20 != 0)
                break;
              if (v20)
                goto LABEL_48;
            }
          }
          while (v25->n128_u64[0] >= v19);
        }
        else
        {
          v25 = a2;
          if (v23 < (unint64_t)a2)
          {
            v28 = a2 - 2;
            do
            {
              while (1)
              {
                v25 = v28;
                v29 = v28[1].n128_u8[8];
                v28 -= 2;
                if (v29 && v20 != 0)
                  break;
                if (v20 || v23 >= (unint64_t)v25)
                  goto LABEL_48;
              }
            }
            while (v25->n128_u64[0] >= v19 && v23 < (unint64_t)v25);
          }
        }
LABEL_48:
        i = v23;
        if (v23 < (unint64_t)v25)
        {
          v32 = (__int128 *)v25;
          do
          {
            v139 = *(_OWORD *)i;
            v148 = *(_OWORD *)(i + 16);
            v33 = v32[1];
            *(_OWORD *)i = *v32;
            *(_OWORD *)(i + 16) = v33;
            *v32 = v139;
            v32[1] = v148;
            v34 = i + 32;
            do
            {
              while (1)
              {
                i = v34;
                v35 = *(unsigned __int8 *)(v34 + 24);
                v34 += 32;
                if (v35 && v20 != 0)
                  break;
                if (!v20)
                  goto LABEL_59;
              }
            }
            while (*(_QWORD *)i < v19);
LABEL_59:
            v37 = v32 - 2;
            do
            {
              while (1)
              {
                v32 = v37;
                v38 = *((unsigned __int8 *)v37 + 24);
                v37 -= 2;
                if (v38 && v20 != 0)
                  break;
                if (v20)
                  goto LABEL_68;
              }
            }
            while (*(_QWORD *)v32 >= v19);
LABEL_68:
            ;
          }
          while (i < (unint64_t)v32);
        }
        if (i - 32 != a1)
        {
          v40 = *(_OWORD *)(i - 16);
          *(_OWORD *)a1 = *(_OWORD *)(i - 32);
          *(_OWORD *)(a1 + 16) = v40;
        }
        *(_QWORD *)(i - 32) = v19;
        *(__n128 *)(i - 24) = v132;
        *(_BYTE *)(i - 8) = v20;
        *(_DWORD *)(i - 4) = *(_DWORD *)&v129[3];
        *(_DWORD *)(i - 7) = *(_DWORD *)v129;
        if (v23 < (unint64_t)v25)
        {
LABEL_74:
          sub_1C548C300(a1, i - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v41 = sub_1C548CFB8(a1, i - 32, v132);
        if (!sub_1C548CFB8(i, (uint64_t)a2, v42))
        {
          if (v41)
            continue;
          goto LABEL_74;
        }
        a2 = (__n128 *)(i - 32);
        if (!v41)
          goto LABEL_1;
        return result;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v39 = *(_QWORD *)(a2 - 24);
        v38 = a2 - 24;
        if (v39 < *(_QWORD *)v8)
        {
          v96 = *(_QWORD *)(v8 + 16);
          v88 = *(_OWORD *)v8;
          v40 = *(_OWORD *)v38;
          *(_BYTE *)(v8 + 16) = *(_BYTE *)(v38 + 16);
          *(_OWORD *)v8 = v40;
          *(_BYTE *)(v38 + 16) = v96;
          *(_OWORD *)v38 = v88;
        }
        return;
      case 3:
        sub_1C5493600((__int128 *)v8, (unint64_t *)(v8 + 24), (unint64_t *)(a2 - 24));
        return;
      case 4:
        sub_1C549389C(v8, (unint64_t *)(v8 + 24), (unint64_t *)(v8 + 48), a2 - 24);
        return;
      case 5:
        sub_1C5493968((__n128 *)v8, (unint64_t *)(v8 + 24), (unint64_t *)(v8 + 48), (__n128 *)(v8 + 72), (__n128 *)(a2 - 24));
        return;
      default:
        if (v9 <= 575)
        {
          v41 = v8 + 24;
          v43 = v8 == a2 || v41 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v46 = v41;
                v47 = *(_QWORD *)(v45 + 24);
                if (v47 < *(_QWORD *)v45)
                {
                  v89 = *(_OWORD *)(v45 + 32);
                  v48 = v44;
                  while (1)
                  {
                    v49 = v8 + v48;
                    *(_OWORD *)(v49 + 24) = *(_OWORD *)(v8 + v48);
                    *(_BYTE *)(v49 + 40) = *(_BYTE *)(v8 + v48 + 16);
                    if (!v48)
                      break;
                    v48 -= 24;
                    if (v47 >= *(_QWORD *)(v49 - 24))
                    {
                      v50 = v8 + v48 + 24;
                      goto LABEL_71;
                    }
                  }
                  v50 = v8;
LABEL_71:
                  *(_QWORD *)v50 = v47;
                  *(_QWORD *)(v50 + 8) = v89;
                  *(_BYTE *)(v50 + 16) = BYTE8(v89);
                }
                v41 = v46 + 24;
                v44 += 24;
                v45 = v46;
              }
              while (v46 + 24 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v79 = v41;
              v80 = *(_QWORD *)(a1 + 24);
              if (v80 < *(_QWORD *)a1)
              {
                v92 = *(_OWORD *)(a1 + 32);
                do
                {
                  *(_OWORD *)v41 = *(_OWORD *)(v41 - 24);
                  *(_BYTE *)(v41 + 16) = *(_BYTE *)(v41 - 8);
                  v81 = *(_QWORD *)(v41 - 48);
                  v41 -= 24;
                }
                while (v80 < v81);
                *(_QWORD *)v41 = v80;
                *(_BYTE *)(v41 + 16) = BYTE8(v92);
                *(_QWORD *)(v41 + 8) = v92;
              }
              v41 = v79 + 24;
              a1 = v79;
            }
            while (v79 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            do
            {
              v53 = v52;
              if (v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = v8 + 24 * v54;
                if (2 * v53 + 2 >= v10)
                {
                  v56 = *(_QWORD *)v55;
                }
                else
                {
                  v56 = *(_QWORD *)(v55 + 24);
                  v57 = *(_QWORD *)v55 >= v56;
                  if (*(_QWORD *)v55 > v56)
                    v56 = *(_QWORD *)v55;
                  if (!v57)
                  {
                    v55 += 24;
                    v54 = 2 * v53 + 2;
                  }
                }
                v58 = v8 + 24 * v53;
                v59 = *(_QWORD *)v58;
                if (v56 >= *(_QWORD *)v58)
                {
                  v90 = *(_OWORD *)(v58 + 8);
                  do
                  {
                    v60 = v58;
                    v58 = v55;
                    v61 = *(_OWORD *)v55;
                    *(_BYTE *)(v60 + 16) = *(_BYTE *)(v55 + 16);
                    *(_OWORD *)v60 = v61;
                    if (v51 < v54)
                      break;
                    v62 = (2 * v54) | 1;
                    v55 = v8 + 24 * v62;
                    v54 = 2 * v54 + 2;
                    if (v54 >= v10)
                    {
                      v63 = *(_QWORD *)v55;
                      v54 = v62;
                    }
                    else
                    {
                      v63 = *(_QWORD *)v55;
                      v64 = *(_QWORD *)(v55 + 24);
                      if (*(_QWORD *)v55 <= v64)
                        v63 = *(_QWORD *)(v55 + 24);
                      if (*(_QWORD *)v55 >= v64)
                        v54 = v62;
                      else
                        v55 += 24;
                    }
                  }
                  while (v63 >= v59);
                  *(_QWORD *)v58 = v59;
                  *(_QWORD *)(v58 + 8) = v90;
                  *(_BYTE *)(v58 + 16) = BYTE8(v90);
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            do
            {
              v65 = 0;
              v97 = *(_QWORD *)(v8 + 16);
              v91 = *(_OWORD *)v8;
              v66 = v8;
              do
              {
                v67 = v66 + 24 * v65 + 24;
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v10 && *(_QWORD *)v67 < *(_QWORD *)(v67 + 24))
                {
                  v67 += 24;
                  v68 = v69;
                }
                v70 = *(_OWORD *)v67;
                *(_BYTE *)(v66 + 16) = *(_BYTE *)(v67 + 16);
                *(_OWORD *)v66 = v70;
                v66 = v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 24;
              if (v67 == a2)
              {
                *(_BYTE *)(v67 + 16) = v97;
                *(_OWORD *)v67 = v91;
              }
              else
              {
                v71 = *(_OWORD *)a2;
                *(_BYTE *)(v67 + 16) = *(_BYTE *)(a2 + 16);
                *(_OWORD *)v67 = v71;
                *(_BYTE *)(a2 + 16) = v97;
                *(_OWORD *)a2 = v91;
                v72 = v67 - v8 + 24;
                if (v72 >= 25)
                {
                  v73 = (v72 / 0x18uLL - 2) >> 1;
                  v74 = v8 + 24 * v73;
                  v75 = *(_QWORD *)v67;
                  if (*(_QWORD *)v74 < *(_QWORD *)v67)
                  {
                    v84 = *(_OWORD *)(v67 + 8);
                    do
                    {
                      v76 = v67;
                      v67 = v74;
                      v77 = *(_OWORD *)v74;
                      *(_BYTE *)(v76 + 16) = *(_BYTE *)(v74 + 16);
                      *(_OWORD *)v76 = v77;
                      if (!v73)
                        break;
                      v73 = (v73 - 1) >> 1;
                      v74 = v8 + 24 * v73;
                    }
                    while (*(_QWORD *)v74 < v75);
                    *(_QWORD *)v67 = v75;
                    *(_QWORD *)(v67 + 8) = v84;
                    *(_BYTE *)(v67 + 16) = BYTE8(v84);
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_1C5493600((__int128 *)(a1 + 24 * v11), (unint64_t *)a1, (unint64_t *)(a2 - 24));
        }
        else
        {
          sub_1C5493600((__int128 *)a1, (unint64_t *)(a1 + 24 * v11), (unint64_t *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (unint64_t *)(a1 + 24 * v11 - 24);
          sub_1C5493600((__int128 *)(a1 + 24), v14, (unint64_t *)(a2 - 48));
          v15 = (unint64_t *)(a1 + 24 + 8 * v13);
          sub_1C5493600((__int128 *)(a1 + 48), v15, (unint64_t *)(a2 - 72));
          sub_1C5493600((__int128 *)v14, (unint64_t *)v12, v15);
          v93 = *(_QWORD *)(a1 + 16);
          v85 = *(_OWORD *)a1;
          v16 = *(_BYTE *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_BYTE *)(a1 + 16) = v16;
          *(_BYTE *)(v12 + 16) = v93;
          *(_OWORD *)v12 = v85;
        }
        --a3;
        v17 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 24) >= v17)
        {
          v83 = *(_OWORD *)(a1 + 8);
          if (v17 >= *(_QWORD *)(a2 - 24))
          {
            v31 = a1 + 24;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              v31 += 24;
            }
            while (v17 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v30 = *(_QWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v30);
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(_QWORD *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v33);
          }
          while (v8 < v32)
          {
            v95 = *(_QWORD *)(v8 + 16);
            v87 = *(_OWORD *)v8;
            v34 = *(_OWORD *)v32;
            *(_BYTE *)(v8 + 16) = *(_BYTE *)(v32 + 16);
            *(_OWORD *)v8 = v34;
            *(_BYTE *)(v32 + 16) = v95;
            *(_OWORD *)v32 = v87;
            do
            {
              v35 = *(_QWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v35);
            do
            {
              v36 = *(_QWORD *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v36);
          }
          if (v8 - 24 != a1)
          {
            v37 = *(_OWORD *)(v8 - 24);
            *(_BYTE *)(a1 + 16) = *(_BYTE *)(v8 - 8);
            *(_OWORD *)a1 = v37;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 24) = v17;
          *(_BYTE *)(v8 - 8) = BYTE8(v83);
          *(_QWORD *)(v8 - 16) = v83;
          continue;
        }
        v18 = 0;
        v82 = *(_OWORD *)(a1 + 8);
        do
        {
          v19 = *(_QWORD *)(a1 + v18 + 24);
          v18 += 24;
        }
        while (v19 < v17);
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 24)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *(_QWORD *)(v21 - 24);
            v21 -= 24;
          }
          while (v23 >= v17);
        }
        else
        {
          do
          {
            v22 = *(_QWORD *)(v21 - 24);
            v21 -= 24;
          }
          while (v22 >= v17);
        }
        v8 = a1 + v18;
        if (v20 < v21)
        {
          v24 = v21;
          do
          {
            v94 = *(_QWORD *)(v8 + 16);
            v86 = *(_OWORD *)v8;
            v25 = *(_OWORD *)v24;
            *(_BYTE *)(v8 + 16) = *(_BYTE *)(v24 + 16);
            *(_OWORD *)v8 = v25;
            *(_BYTE *)(v24 + 16) = v94;
            *(_OWORD *)v24 = v86;
            do
            {
              v26 = *(_QWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v26 < v17);
            do
            {
              v27 = *(_QWORD *)(v24 - 24);
              v24 -= 24;
            }
            while (v27 >= v17);
          }
          while (v8 < v24);
        }
        if (v8 - 24 != a1)
        {
          v28 = *(_OWORD *)(v8 - 24);
          *(_BYTE *)(a1 + 16) = *(_BYTE *)(v8 - 8);
          *(_OWORD *)a1 = v28;
        }
        *(_QWORD *)(v8 - 24) = v17;
        *(_BYTE *)(v8 - 8) = BYTE8(v82);
        *(_QWORD *)(v8 - 16) = v82;
        if (v20 < v21)
        {
LABEL_29:
          sub_1C5492E20(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_1C54936F0(a1, v8 - 24);
        if (!sub_1C54936F0(v8, a2))
        {
          if (v29)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 24;
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a2 - 40;
  v130 = (__int128 *)(a2 - 120);
  v131 = (__int128 *)(a2 - 80);
  v11 = a1;
  v132 = a2;
  while (2)
  {
    a1 = v11;
    v12 = a2 - v11;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v11) >> 3);
    switch(v13)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)((__int128 *)v10, (__int128 *)a1))
        {
          v59 = *(_OWORD *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v139 = *(_QWORD *)(a1 + 32);
          v137 = v59;
          v138 = v60;
          v61 = *(_OWORD *)v10;
          v62 = *(_OWORD *)(v10 + 16);
          *(_BYTE *)(a1 + 32) = *(_BYTE *)(v10 + 32);
          *(_OWORD *)a1 = v61;
          *(_OWORD *)(a1 + 16) = v62;
          v63 = v137;
          v64 = v138;
          *(_BYTE *)(v10 + 32) = v139;
          *(_OWORD *)v10 = v63;
          *(_OWORD *)(v10 + 16) = v64;
        }
        return;
      case 3:
        sub_1C54A113C((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)v10, a3);
        return;
      case 4:
        sub_1C54A1468(a1, a1 + 40, a1 + 80, v10, a3);
        return;
      case 5:
        sub_1C54A1550(a1, a1 + 40, a1 + 80, a1 + 120, v10, a3);
        return;
      default:
        if (v12 <= 959)
        {
          v65 = (__int128 *)(a1 + 40);
          v67 = a1 == a2 || v65 == (__int128 *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = a1;
              do
              {
                v70 = (__int128 *)v69;
                v69 = (uint64_t)v65;
                if ((*a3)(v65, v70))
                {
                  v71 = *(_OWORD *)v69;
                  v72 = *(_OWORD *)(v69 + 16);
                  v139 = *(_QWORD *)(v69 + 32);
                  v137 = v71;
                  v138 = v72;
                  v73 = v68;
                  while (1)
                  {
                    v74 = a1 + v73;
                    v75 = *(_OWORD *)(a1 + v73 + 16);
                    *(_OWORD *)(v74 + 40) = *(_OWORD *)(a1 + v73);
                    *(_OWORD *)(v74 + 56) = v75;
                    *(_BYTE *)(v74 + 72) = *(_BYTE *)(a1 + v73 + 32);
                    if (!v73)
                      break;
                    v73 -= 40;
                    if (((*a3)(&v137, (__int128 *)(v73 + a1)) & 1) == 0)
                    {
                      v76 = a1 + v73 + 40;
                      goto LABEL_74;
                    }
                  }
                  v76 = a1;
LABEL_74:
                  v77 = v137;
                  v78 = v138;
                  *(_BYTE *)(v76 + 32) = v139;
                  *(_OWORD *)v76 = v77;
                  *(_OWORD *)(v76 + 16) = v78;
                }
                v65 = (__int128 *)(v69 + 40);
                v68 += 40;
              }
              while (v69 + 40 != a2);
            }
          }
          else if (!v67)
          {
            v121 = a1 - 40;
            do
            {
              v122 = (__int128 *)a1;
              a1 = (uint64_t)v65;
              if ((*a3)(v65, v122))
              {
                v123 = *(_OWORD *)a1;
                v124 = *(_OWORD *)(a1 + 16);
                v139 = *(_QWORD *)(a1 + 32);
                v137 = v123;
                v138 = v124;
                v125 = v121;
                do
                {
                  v126 = *(_OWORD *)(v125 + 56);
                  *(_OWORD *)(v125 + 80) = *(_OWORD *)(v125 + 40);
                  *(_OWORD *)(v125 + 96) = v126;
                  *(_BYTE *)(v125 + 112) = *(_BYTE *)(v125 + 72);
                  v127 = (*a3)(&v137, (__int128 *)v125);
                  v125 -= 40;
                }
                while ((v127 & 1) != 0);
                v128 = v137;
                v129 = v138;
                *(_BYTE *)(v125 + 112) = v139;
                *(_OWORD *)(v125 + 80) = v128;
                *(_OWORD *)(v125 + 96) = v129;
              }
              v65 = (__int128 *)(a1 + 40);
              v121 += 40;
            }
            while (a1 + 40 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v79 = (unint64_t)(v13 - 2) >> 1;
            v80 = v79;
            do
            {
              v81 = v80;
              if (v79 >= v80)
              {
                v82 = (2 * v80) | 1;
                v83 = a1 + 40 * v82;
                if (2 * v80 + 2 < v13 && (*a3)((__int128 *)(a1 + 40 * v82), (__int128 *)(v83 + 40)))
                {
                  v83 += 40;
                  v82 = 2 * v81 + 2;
                }
                v84 = a1 + 40 * v81;
                if (((*a3)((__int128 *)v83, (__int128 *)v84) & 1) == 0)
                {
                  v85 = *(_OWORD *)v84;
                  v86 = *(_OWORD *)(v84 + 16);
                  v139 = *(_QWORD *)(v84 + 32);
                  v137 = v85;
                  v138 = v86;
                  do
                  {
                    v87 = v83;
                    v88 = *(_OWORD *)v83;
                    v89 = *(_OWORD *)(v83 + 16);
                    *(_BYTE *)(v84 + 32) = *(_BYTE *)(v83 + 32);
                    *(_OWORD *)v84 = v88;
                    *(_OWORD *)(v84 + 16) = v89;
                    if (v79 < v82)
                      break;
                    v90 = (2 * v82) | 1;
                    v83 = a1 + 40 * v90;
                    v91 = 2 * v82 + 2;
                    if (v91 < v13 && (*a3)((__int128 *)(a1 + 40 * v90), (__int128 *)(v83 + 40)))
                    {
                      v83 += 40;
                      v90 = v91;
                    }
                    v84 = v87;
                    v82 = v90;
                  }
                  while (!(*a3)((__int128 *)v83, &v137));
                  v92 = v137;
                  v93 = v138;
                  *(_BYTE *)(v87 + 32) = v139;
                  *(_OWORD *)v87 = v92;
                  *(_OWORD *)(v87 + 16) = v93;
                }
              }
              v80 = v81 - 1;
            }
            while (v81);
            v94 = (_OWORD *)v132;
            do
            {
              v133 = v94;
              v95 = 0;
              v96 = *(_OWORD *)a1;
              v97 = *(_OWORD *)(a1 + 16);
              v136 = *(_QWORD *)(a1 + 32);
              v134 = v96;
              v135 = v97;
              v98 = a1;
              do
              {
                v99 = v98 + 40 * v95 + 40;
                v100 = (2 * v95) | 1;
                v101 = 2 * v95 + 2;
                if (v101 < v13
                  && (*a3)((__int128 *)(v98 + 40 * v95 + 40), (__int128 *)(v98 + 40 * v95 + 80)))
                {
                  v99 += 40;
                  v100 = v101;
                }
                v102 = *(_OWORD *)v99;
                v103 = *(_OWORD *)(v99 + 16);
                *(_BYTE *)(v98 + 32) = *(_BYTE *)(v99 + 32);
                *(_OWORD *)v98 = v102;
                *(_OWORD *)(v98 + 16) = v103;
                v98 = v99;
                v95 = v100;
              }
              while (v100 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
              v94 = (_OWORD *)((char *)v133 - 40);
              if ((_OWORD *)v99 == (_OWORD *)((char *)v133 - 40))
              {
                v118 = v134;
                v119 = v135;
                *(_BYTE *)(v99 + 32) = v136;
                *(_OWORD *)v99 = v118;
                *(_OWORD *)(v99 + 16) = v119;
              }
              else
              {
                v104 = *v94;
                v105 = *(_OWORD *)((char *)v133 - 24);
                *(_BYTE *)(v99 + 32) = *((_BYTE *)v133 - 8);
                *(_OWORD *)v99 = v104;
                *(_OWORD *)(v99 + 16) = v105;
                v106 = v134;
                v107 = v135;
                *((_BYTE *)v133 - 8) = v136;
                *v94 = v106;
                *(_OWORD *)((char *)v133 - 24) = v107;
                v108 = v99 - a1 + 40;
                if (v108 >= 41)
                {
                  v109 = (v108 / 0x28uLL - 2) >> 1;
                  v110 = a1 + 40 * v109;
                  if ((*a3)((__int128 *)v110, (__int128 *)v99))
                  {
                    v111 = *(_OWORD *)v99;
                    v112 = *(_OWORD *)(v99 + 16);
                    v139 = *(_QWORD *)(v99 + 32);
                    v137 = v111;
                    v138 = v112;
                    do
                    {
                      v113 = v110;
                      v114 = *(_OWORD *)v110;
                      v115 = *(_OWORD *)(v110 + 16);
                      *(_BYTE *)(v99 + 32) = *(_BYTE *)(v110 + 32);
                      *(_OWORD *)v99 = v114;
                      *(_OWORD *)(v99 + 16) = v115;
                      if (!v109)
                        break;
                      v109 = (v109 - 1) >> 1;
                      v110 = a1 + 40 * v109;
                      v99 = v113;
                    }
                    while (((*a3)((__int128 *)v110, &v137) & 1) != 0);
                    v116 = v137;
                    v117 = v138;
                    *(_BYTE *)(v113 + 32) = v139;
                    *(_OWORD *)v113 = v116;
                    *(_OWORD *)(v113 + 16) = v117;
                  }
                }
              }
            }
            while (v13-- > 2);
          }
          return;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = a1 + 40 * ((unint64_t)v13 >> 1);
        if ((unint64_t)v12 < 0x1401)
        {
          sub_1C54A113C((__int128 *)v15, (__int128 *)a1, (__int128 *)v10, a3);
        }
        else
        {
          sub_1C54A113C((__int128 *)a1, (__int128 *)v15, (__int128 *)v10, a3);
          v16 = 5 * v14;
          sub_1C54A113C((__int128 *)(a1 + 40), (__int128 *)(a1 + 8 * v16 - 40), v131, a3);
          sub_1C54A113C((__int128 *)(a1 + 80), (__int128 *)(a1 + 40 + 8 * v16), v130, a3);
          sub_1C54A113C((__int128 *)(a1 + 8 * v16 - 40), (__int128 *)v15, (__int128 *)(a1 + 40 + 8 * v16), a3);
          v17 = *(_OWORD *)a1;
          v18 = *(_OWORD *)(a1 + 16);
          v139 = *(_QWORD *)(a1 + 32);
          v137 = v17;
          v138 = v18;
          v19 = *(_OWORD *)v15;
          v20 = *(_OWORD *)(v15 + 16);
          *(_BYTE *)(a1 + 32) = *(_BYTE *)(v15 + 32);
          *(_OWORD *)a1 = v19;
          *(_OWORD *)(a1 + 16) = v20;
          v21 = v137;
          v22 = v138;
          *(_BYTE *)(v15 + 32) = v139;
          *(_OWORD *)v15 = v21;
          *(_OWORD *)(v15 + 16) = v22;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 40), (__int128 *)a1) & 1) == 0)
        {
          v43 = *(_OWORD *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v136 = *(_QWORD *)(a1 + 32);
          v134 = v43;
          v135 = v44;
          if (((*a3)(&v134, (__int128 *)v10) & 1) != 0)
          {
            v11 = a1;
            do
              v11 += 40;
            while (((*a3)(&v134, (__int128 *)v11) & 1) == 0);
          }
          else
          {
            v45 = (__int128 *)(a1 + 40);
            do
            {
              v11 = (unint64_t)v45;
              if ((unint64_t)v45 >= a2)
                break;
              v46 = (*a3)(&v134, v45);
              v45 = (__int128 *)(v11 + 40);
            }
            while (!v46);
          }
          v47 = a2;
          if (v11 < a2)
          {
            v47 = a2;
            do
              v47 -= 40;
            while (((*a3)(&v134, (__int128 *)v47) & 1) != 0);
          }
          while (v11 < v47)
          {
            v48 = *(_OWORD *)v11;
            v49 = *(_OWORD *)(v11 + 16);
            v139 = *(_QWORD *)(v11 + 32);
            v137 = v48;
            v138 = v49;
            v50 = *(_OWORD *)v47;
            v51 = *(_OWORD *)(v47 + 16);
            *(_BYTE *)(v11 + 32) = *(_BYTE *)(v47 + 32);
            *(_OWORD *)v11 = v50;
            *(_OWORD *)(v11 + 16) = v51;
            v52 = v137;
            v53 = v138;
            *(_BYTE *)(v47 + 32) = v139;
            *(_OWORD *)v47 = v52;
            *(_OWORD *)(v47 + 16) = v53;
            do
              v11 += 40;
            while (!(*a3)(&v134, (__int128 *)v11));
            do
              v47 -= 40;
            while (((*a3)(&v134, (__int128 *)v47) & 1) != 0);
          }
          v54 = (__int128 *)(v11 - 40);
          if (v11 - 40 != a1)
          {
            v55 = *v54;
            v56 = *(_OWORD *)(v11 - 24);
            *(_BYTE *)(a1 + 32) = *(_BYTE *)(v11 - 8);
            *(_OWORD *)a1 = v55;
            *(_OWORD *)(a1 + 16) = v56;
          }
          a5 = 0;
          v57 = v134;
          v58 = v135;
          *(_BYTE *)(v11 - 8) = v136;
          *v54 = v57;
          *(_OWORD *)(v11 - 24) = v58;
          continue;
        }
        v23 = 0;
        v24 = *(_OWORD *)a1;
        v25 = *(_OWORD *)(a1 + 16);
        v136 = *(_QWORD *)(a1 + 32);
        v134 = v24;
        v135 = v25;
        do
          v23 += 40;
        while (((*a3)((__int128 *)(v23 + a1), &v134) & 1) != 0);
        v26 = a1 + v23;
        v27 = (__int128 *)v132;
        if (v23 == 40)
        {
          v27 = (__int128 *)v132;
          do
          {
            if (v26 >= (unint64_t)v27)
              break;
            v27 = (__int128 *)((char *)v27 - 40);
          }
          while (((*a3)(v27, &v134) & 1) == 0);
        }
        else
        {
          do
            v27 = (__int128 *)((char *)v27 - 40);
          while (!(*a3)(v27, &v134));
        }
        if (v26 >= (unint64_t)v27)
        {
          v36 = v26 - 40;
        }
        else
        {
          v28 = a1 + v23;
          v29 = v27;
          do
          {
            v30 = *(_OWORD *)v28;
            v31 = *(_OWORD *)(v28 + 16);
            v139 = *(_QWORD *)(v28 + 32);
            v137 = v30;
            v138 = v31;
            v32 = *v29;
            v33 = v29[1];
            *(_BYTE *)(v28 + 32) = *((_BYTE *)v29 + 32);
            *(_OWORD *)v28 = v32;
            *(_OWORD *)(v28 + 16) = v33;
            v34 = v137;
            v35 = v138;
            *((_BYTE *)v29 + 32) = v139;
            *v29 = v34;
            v29[1] = v35;
            do
              v28 += 40;
            while (((*a3)((__int128 *)v28, &v134) & 1) != 0);
            do
              v29 = (__int128 *)((char *)v29 - 40);
            while (!(*a3)(v29, &v134));
          }
          while (v28 < (unint64_t)v29);
          v36 = v28 - 40;
        }
        if (v36 != a1)
        {
          v37 = *(_OWORD *)v36;
          v38 = *(_OWORD *)(v36 + 16);
          *(_BYTE *)(a1 + 32) = *(_BYTE *)(v36 + 32);
          *(_OWORD *)a1 = v37;
          *(_OWORD *)(a1 + 16) = v38;
        }
        v39 = v134;
        v40 = v135;
        *(_BYTE *)(v36 + 32) = v136;
        *(_OWORD *)v36 = v39;
        *(_OWORD *)(v36 + 16) = v40;
        v41 = v26 >= (unint64_t)v27;
        a2 = v132;
        if (!v41)
        {
LABEL_32:
          sub_1C54A0830(a1, v36, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v36 + 40;
          continue;
        }
        v42 = sub_1C54A1274(a1, v36, a3);
        v11 = v36 + 40;
        if (!sub_1C54A1274(v36 + 40, v132, a3))
        {
          if (v42)
            continue;
          goto LABEL_32;
        }
        a2 = v36;
        if (!v42)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v71 = *((_QWORD *)a2 - 2);
        v72 = *(_QWORD *)(v8 + 16);
        v100 = v71 == v72;
        v73 = v71 < v72;
        if (v100)
          v73 = *((_QWORD *)a2 - 1) < *(_QWORD *)(v8 + 24);
        if (v73)
        {
          v182 = *(_OWORD *)v8;
          v191 = *(_OWORD *)(v8 + 16);
          v74 = *(a2 - 1);
          *(_OWORD *)v8 = *(a2 - 2);
          *(_OWORD *)(v8 + 16) = v74;
          *(a2 - 2) = v182;
          *(a2 - 1) = v191;
        }
        return;
      case 3:
        sub_1C55DCCD0((__int128 *)v8, (__int128 *)(v8 + 32), a2 - 2);
        return;
      case 4:
        sub_1C55DD054(v8, v8 + 32, v8 + 64, (uint64_t)(a2 - 2));
        return;
      case 5:
        v75 = (__int128 *)(v8 + 32);
        v76 = (__int128 *)(v8 + 64);
        v77 = (__int128 *)(v8 + 96);
        sub_1C55DD054(v8, v8 + 32, v8 + 64, v8 + 96);
        v78 = *((_QWORD *)a2 - 2);
        v79 = *(_QWORD *)(v8 + 112);
        v100 = v78 == v79;
        v80 = v78 < v79;
        if (v100)
          v80 = *((_QWORD *)a2 - 1) < *(_QWORD *)(v8 + 120);
        if (v80)
        {
          v81 = *v77;
          v192 = *(_OWORD *)(v8 + 112);
          v82 = *(a2 - 1);
          *v77 = *(a2 - 2);
          *(_OWORD *)(v8 + 112) = v82;
          *(a2 - 2) = v81;
          *(a2 - 1) = v192;
          v83 = *(_QWORD *)(v8 + 112);
          v84 = *(_QWORD *)(v8 + 80);
          v100 = v83 == v84;
          v85 = v83 < v84;
          if (v100)
            v85 = *(_QWORD *)(v8 + 120) < *(_QWORD *)(v8 + 88);
          if (v85)
          {
            v87 = *v76;
            v86 = *(_OWORD *)(v8 + 80);
            v88 = *(_OWORD *)(v8 + 112);
            *v76 = *v77;
            *(_OWORD *)(v8 + 80) = v88;
            *v77 = v87;
            *(_OWORD *)(v8 + 112) = v86;
            v89 = *(_QWORD *)(v8 + 80);
            v90 = *(_QWORD *)(v8 + 48);
            v100 = v89 == v90;
            v91 = v89 < v90;
            if (v100)
              v91 = *(_QWORD *)(v8 + 88) < *(_QWORD *)(v8 + 56);
            if (v91)
            {
              v93 = *v75;
              v92 = *(_OWORD *)(v8 + 48);
              v94 = *(_OWORD *)(v8 + 80);
              *v75 = *v76;
              *(_OWORD *)(v8 + 48) = v94;
              *v76 = v93;
              *(_OWORD *)(v8 + 80) = v92;
              v95 = *(_QWORD *)(v8 + 48);
              v96 = *(_QWORD *)(v8 + 16);
              v100 = v95 == v96;
              v97 = v95 < v96;
              if (v100)
                v97 = *(_QWORD *)(v8 + 56) < *(_QWORD *)(v8 + 24);
              if (v97)
              {
                v183 = *(_OWORD *)v8;
                v193 = *(_OWORD *)(v8 + 16);
                v98 = *(_OWORD *)(v8 + 48);
                *(_OWORD *)v8 = *v75;
                *(_OWORD *)(v8 + 16) = v98;
                *v75 = v183;
                *(_OWORD *)(v8 + 48) = v193;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v99 = (__int128 *)(v8 + 32);
          v100 = (__int128 *)v8 == a2 || v99 == a2;
          v101 = v100;
          if ((a4 & 1) != 0)
          {
            if ((v101 & 1) == 0)
            {
              v102 = 0;
              v103 = v8;
              do
              {
                v104 = *(_QWORD *)(v103 + 48);
                v105 = *(_QWORD *)(v103 + 56);
                v106 = *(_QWORD *)(v103 + 16);
                v107 = *(_QWORD *)(v103 + 24);
                v103 = (unint64_t)v99;
                v108 = v105 < v107;
                v100 = v104 == v106;
                v109 = v104 < v106;
                if (!v100)
                  v108 = v109;
                if (v108)
                {
                  v184 = *(_OWORD *)v103;
                  v110 = v102;
                  while (1)
                  {
                    v111 = v8 + v110;
                    v112 = *(_OWORD *)(v8 + v110 + 16);
                    *(_OWORD *)(v111 + 32) = *(_OWORD *)(v8 + v110);
                    *(_OWORD *)(v111 + 48) = v112;
                    if (!v110)
                      break;
                    v113 = *(_QWORD *)(v111 - 16);
                    v114 = v105 < *(_QWORD *)(v111 - 8);
                    v100 = v104 == v113;
                    v115 = v104 < v113;
                    if (!v100)
                      v114 = v115;
                    v110 -= 32;
                    if (!v114)
                    {
                      v116 = v8 + v110 + 32;
                      goto LABEL_116;
                    }
                  }
                  v116 = v8;
LABEL_116:
                  *(_OWORD *)v116 = v184;
                  *(_QWORD *)(v116 + 16) = v104;
                  *(_QWORD *)(v116 + 24) = v105;
                }
                v99 = (__int128 *)(v103 + 32);
                v102 += 32;
              }
              while ((__int128 *)(v103 + 32) != a2);
            }
          }
          else if ((v101 & 1) == 0)
          {
            do
            {
              v164 = *(_QWORD *)(a1 + 48);
              v165 = *(_QWORD *)(a1 + 56);
              v166 = *(_QWORD *)(a1 + 16);
              v167 = *(_QWORD *)(a1 + 24);
              a1 = (uint64_t)v99;
              v168 = v165 < v167;
              v100 = v164 == v166;
              v169 = v164 < v166;
              if (!v100)
                v168 = v169;
              if (v168)
              {
                v187 = *(_OWORD *)a1;
                v170 = a1;
                do
                {
                  v171 = *(_OWORD *)(v170 - 16);
                  *(_OWORD *)v170 = *(_OWORD *)(v170 - 32);
                  *(_OWORD *)(v170 + 16) = v171;
                  v172 = *(_QWORD *)(v170 - 48);
                  v173 = *(_QWORD *)(v170 - 40);
                  v170 -= 32;
                  v174 = v165 < v173;
                  v100 = v164 == v172;
                  v175 = v164 < v172;
                  if (v100)
                    v175 = v174;
                }
                while (v175);
                *(_OWORD *)v170 = v187;
                *(_QWORD *)(v170 + 16) = v164;
                *(_QWORD *)(v170 + 24) = v165;
              }
              v99 = (__int128 *)(a1 + 32);
            }
            while ((__int128 *)(a1 + 32) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 != a2)
          {
            v117 = (unint64_t)(v10 - 2) >> 1;
            v118 = v117;
            do
            {
              v119 = v118;
              if (v117 >= v118)
              {
                v120 = (2 * v118) | 1;
                v121 = v8 + 32 * v120;
                if (2 * v119 + 2 < v10)
                {
                  v123 = *(_QWORD *)(v121 + 16);
                  v122 = *(_QWORD *)(v121 + 48);
                  v100 = v123 == v122;
                  LODWORD(v123) = v123 < v122;
                  v123 = v100 ? *(_QWORD *)(v121 + 24) < *(_QWORD *)(v121 + 56) : v123;
                  v121 += 32 * v123;
                  if ((_DWORD)v123)
                    v120 = 2 * v119 + 2;
                }
                v124 = v8 + 32 * v119;
                v125 = *(_QWORD *)(v121 + 16);
                v127 = *(_QWORD *)(v124 + 16);
                v126 = *(_QWORD *)(v124 + 24);
                v100 = v125 == v127;
                v128 = v125 < v127;
                if (v100)
                  v128 = *(_QWORD *)(v121 + 24) < v126;
                if (!v128)
                {
                  v129 = v8 + 32 * v119;
                  v185 = *(_OWORD *)v129;
                  do
                  {
                    v130 = (_OWORD *)v129;
                    v129 = v121;
                    v131 = *(_OWORD *)(v121 + 16);
                    *v130 = *(_OWORD *)v121;
                    v130[1] = v131;
                    if (v117 < v120)
                      break;
                    v132 = (2 * v120) | 1;
                    v121 = v8 + 32 * v132;
                    v133 = 2 * v120 + 2;
                    if (v133 < v10)
                    {
                      v135 = *(_QWORD *)(v121 + 16);
                      v134 = *(_QWORD *)(v121 + 48);
                      v100 = v135 == v134;
                      LODWORD(v135) = v135 < v134;
                      v135 = v100 ? *(_QWORD *)(v121 + 24) < *(_QWORD *)(v121 + 56) : v135;
                      v121 += 32 * v135;
                      if ((_DWORD)v135)
                        v132 = v133;
                    }
                    v136 = *(_QWORD *)(v121 + 16);
                    v137 = *(_QWORD *)(v121 + 24) < v126;
                    v100 = v136 == v127;
                    v138 = v136 < v127;
                    if (!v100)
                      v137 = v138;
                    v120 = v132;
                  }
                  while (!v137);
                  *(_OWORD *)v129 = v185;
                  *(_QWORD *)(v129 + 16) = v127;
                  *(_QWORD *)(v129 + 24) = v126;
                }
              }
              v118 = v119 - 1;
            }
            while (v119);
            do
            {
              v139 = 0;
              v186 = *(_OWORD *)v8;
              v194 = *(_OWORD *)(v8 + 16);
              v140 = (_OWORD *)v8;
              do
              {
                v141 = &v140[2 * v139 + 2];
                v142 = (2 * v139) | 1;
                v143 = 2 * v139 + 2;
                if (v143 < v10)
                {
                  v145 = *((_QWORD *)v141 + 2);
                  v144 = *((_QWORD *)v141 + 6);
                  v100 = v145 == v144;
                  LODWORD(v145) = v145 < v144;
                  v145 = v100 ? *((_QWORD *)v141 + 3) < *((_QWORD *)v141 + 7) : v145;
                  v141 += 2 * v145;
                  if ((_DWORD)v145)
                    v142 = v143;
                }
                v146 = v141[1];
                *v140 = *v141;
                v140[1] = v146;
                v140 = v141;
                v139 = v142;
              }
              while (v142 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 2;
              if (v141 == a2)
              {
                *v141 = v186;
                v141[1] = v194;
              }
              else
              {
                v147 = a2[1];
                *v141 = *a2;
                v141[1] = v147;
                *a2 = v186;
                a2[1] = v194;
                v148 = (uint64_t)v141 - v8 + 32;
                if (v148 >= 33)
                {
                  v149 = (((unint64_t)v148 >> 5) - 2) >> 1;
                  v150 = v8 + 32 * v149;
                  v151 = *(_QWORD *)(v150 + 16);
                  v152 = *((_QWORD *)v141 + 2);
                  v153 = *(_QWORD *)(v150 + 24) < *((_QWORD *)v141 + 3);
                  v100 = v151 == v152;
                  v154 = v151 < v152;
                  if (!v100)
                    v153 = v154;
                  if (v153)
                  {
                    v178 = *v141;
                    v155 = *((_QWORD *)v141 + 2);
                    v156 = *((_QWORD *)v141 + 3);
                    do
                    {
                      v157 = v141;
                      v141 = (__int128 *)(v8 + 32 * v149);
                      v158 = v141[1];
                      *v157 = *v141;
                      v157[1] = v158;
                      if (!v149)
                        break;
                      v149 = (v149 - 1) >> 1;
                      v159 = v8 + 32 * v149;
                      v160 = *(_QWORD *)(v159 + 16);
                      v161 = *(_QWORD *)(v159 + 24) < v156;
                      v100 = v160 == v155;
                      v162 = v160 < v155;
                      if (!v100)
                        v161 = v162;
                    }
                    while (v161);
                    *v141 = v178;
                    *((_QWORD *)v141 + 2) = v155;
                    *((_QWORD *)v141 + 3) = v156;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(v8 + 32 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x1000)
        {
          sub_1C55DCCD0((__int128 *)(a1 + 32 * ((unint64_t)v10 >> 1)), (__int128 *)a1, a2 - 2);
        }
        else
        {
          sub_1C55DCCD0((__int128 *)a1, (__int128 *)(a1 + 32 * ((unint64_t)v10 >> 1)), a2 - 2);
          sub_1C55DCCD0((__int128 *)(a1 + 32), v12 - 2, a2 - 4);
          sub_1C55DCCD0((__int128 *)(a1 + 64), (__int128 *)(a1 + 32 + 32 * v11), a2 - 6);
          sub_1C55DCCD0(v12 - 2, v12, (__int128 *)(a1 + 32 + 32 * v11));
          v179 = *(_OWORD *)a1;
          v188 = *(_OWORD *)(a1 + 16);
          v13 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v13;
          *v12 = v179;
          v12[1] = v188;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = *(_QWORD *)(a1 - 16);
          v14 = *(_QWORD *)(a1 + 16);
          v15 = *(_QWORD *)(a1 + 24);
          v100 = v16 == v14;
          v17 = v16 < v14;
          if (v100)
            v17 = *(_QWORD *)(a1 - 8) < v15;
          if (v17)
            goto LABEL_13;
          v177 = *(_OWORD *)a1;
          v45 = *((_QWORD *)a2 - 2);
          v100 = v14 == v45;
          v46 = v14 < v45;
          if (v100)
            v46 = v15 < *((_QWORD *)a2 - 1);
          if (v46)
          {
            v47 = a1;
            do
            {
              v8 = v47 + 32;
              v48 = *(_QWORD *)(v47 + 48);
              v49 = v15 < *(_QWORD *)(v47 + 56);
              v100 = v14 == v48;
              v50 = v14 < v48;
              if (v100)
                v50 = v49;
              v47 = v8;
            }
            while (!v50);
          }
          else
          {
            v51 = a1 + 32;
            do
            {
              v8 = v51;
              if (v51 >= (unint64_t)a2)
                break;
              v52 = *(_QWORD *)(v51 + 16);
              v53 = v15 < *(_QWORD *)(v8 + 24);
              v100 = v14 == v52;
              v54 = v14 < v52;
              if (!v100)
                v53 = v54;
              v51 = v8 + 32;
            }
            while (!v53);
          }
          v55 = a2;
          if (v8 < (unint64_t)a2)
          {
            v56 = a2;
            do
            {
              v55 = v56 - 2;
              v57 = *((_QWORD *)v56 - 2);
              v58 = v15 < *((_QWORD *)v56 - 1);
              v100 = v14 == v57;
              v59 = v14 < v57;
              if (v100)
                v59 = v58;
              v56 = v55;
            }
            while (v59);
          }
          while (v8 < (unint64_t)v55)
          {
            v181 = *(_OWORD *)v8;
            v190 = *(_OWORD *)(v8 + 16);
            v60 = v55[1];
            *(_OWORD *)v8 = *v55;
            *(_OWORD *)(v8 + 16) = v60;
            *v55 = v181;
            v55[1] = v190;
            do
            {
              v61 = *(_QWORD *)(v8 + 48);
              v62 = *(_QWORD *)(v8 + 56);
              v8 += 32;
              v63 = v15 < v62;
              v100 = v14 == v61;
              v64 = v14 < v61;
              if (v100)
                v64 = v63;
            }
            while (!v64);
            do
            {
              v65 = *((_QWORD *)v55 - 2);
              v66 = *((_QWORD *)v55 - 1);
              v55 -= 2;
              v67 = v15 < v66;
              v100 = v14 == v65;
              v68 = v14 < v65;
              if (v100)
                v68 = v67;
            }
            while (v68);
          }
          v69 = (__int128 *)(v8 - 32);
          if (v8 - 32 != a1)
          {
            v70 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)a1 = *v69;
            *(_OWORD *)(a1 + 16) = v70;
          }
          a4 = 0;
          *v69 = v177;
          *(_QWORD *)(v8 - 16) = v14;
          *(_QWORD *)(v8 - 8) = v15;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 16);
        v15 = *(_QWORD *)(a1 + 24);
LABEL_13:
        v18 = 0;
        v176 = *(_OWORD *)a1;
        do
        {
          v19 = *(_QWORD *)(a1 + v18 + 48);
          v20 = *(_QWORD *)(a1 + v18 + 56) < v15;
          v100 = v19 == v14;
          v21 = v19 < v14;
          if (!v100)
            v20 = v21;
          v18 += 32;
        }
        while (v20);
        v22 = a1 + v18;
        v23 = a2;
        if (v18 == 32)
        {
          v28 = a2;
          while (v22 < (unint64_t)v28)
          {
            v24 = v28 - 2;
            v29 = *((_QWORD *)v28 - 2);
            v30 = *((_QWORD *)v28 - 1) < v15;
            v100 = v29 == v14;
            v31 = v29 < v14;
            if (v100)
              v31 = v30;
            v28 = v24;
            if (v31)
              goto LABEL_29;
          }
          v24 = v28;
        }
        else
        {
          do
          {
            v24 = v23 - 2;
            v25 = *((_QWORD *)v23 - 2);
            v26 = *((_QWORD *)v23 - 1) < v15;
            v100 = v25 == v14;
            v27 = v25 < v14;
            if (v100)
              v27 = v26;
            v23 = v24;
          }
          while (!v27);
        }
LABEL_29:
        v8 = v22;
        if (v22 < (unint64_t)v24)
        {
          v32 = v24;
          do
          {
            v180 = *(_OWORD *)v8;
            v189 = *(_OWORD *)(v8 + 16);
            v33 = v32[1];
            *(_OWORD *)v8 = *v32;
            *(_OWORD *)(v8 + 16) = v33;
            *v32 = v180;
            v32[1] = v189;
            do
            {
              v34 = *(_QWORD *)(v8 + 48);
              v35 = *(_QWORD *)(v8 + 56);
              v8 += 32;
              v36 = v35 < v15;
              v100 = v34 == v14;
              v37 = v34 < v14;
              if (v100)
                v37 = v36;
            }
            while (v37);
            do
            {
              v38 = *((_QWORD *)v32 - 2);
              v39 = *((_QWORD *)v32 - 1);
              v32 -= 2;
              v40 = v39 < v15;
              v100 = v38 == v14;
              v41 = v38 < v14;
              if (v100)
                v41 = v40;
            }
            while (!v41);
          }
          while (v8 < (unint64_t)v32);
        }
        v42 = (__int128 *)(v8 - 32);
        if (v8 - 32 != a1)
        {
          v43 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)a1 = *v42;
          *(_OWORD *)(a1 + 16) = v43;
        }
        *v42 = v176;
        *(_QWORD *)(v8 - 16) = v14;
        *(_QWORD *)(v8 - 8) = v15;
        if (v22 < (unint64_t)v24)
        {
LABEL_44:
          sub_1C55DC36C(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v44 = sub_1C55DCDB8(a1, v8 - 32);
        if (!sub_1C55DCDB8(v8, (uint64_t)a2))
        {
          if (v44)
            continue;
          goto LABEL_44;
        }
        a2 = (__int128 *)(v8 - 32);
        if (!v44)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = (unint64_t)a2;
LABEL_2:
  v97 = a1;
  v11 = a1;
  a2 = (char *)v10;
  while (2)
  {
    v12 = (uint64_t)&a2[-a4];
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-a4] >> 3);
    switch(v13)
    {
      case 0:
      case 1:
        return;
      case 2:
        v45 = *((_QWORD *)a2 - 3);
        v44 = a2 - 24;
        if (*(_QWORD *)a4 < v45)
        {
          v116 = *((_QWORD *)v44 + 2);
          v104 = *(_OWORD *)v44;
          v46 = *(_OWORD *)a4;
          *((_DWORD *)v44 + 4) = *(_DWORD *)(a4 + 16);
          *(_OWORD *)v44 = v46;
          *(_OWORD *)a4 = v104;
          *(_DWORD *)(a4 + 16) = v116;
        }
        return;
      case 3:
        sub_1C55DDB10(v97, (uint64_t)a2, (uint64_t)(a2 - 24), (uint64_t)(a2 - 24), a3, a4 + 24);
        return;
      case 4:
        sub_1C55DDEB8(v97, (uint64_t)a2, (uint64_t)(a2 - 24), (uint64_t)(a2 - 24), (uint64_t)(a2 - 48), (uint64_t)(a2 - 48), a3, a4 + 24);
        return;
      case 5:
        v47 = a2 - 24;
        v48 = a2 - 48;
        v49 = a2 - 72;
        sub_1C55DDEB8(v97, (uint64_t)a2, (uint64_t)(a2 - 24), (uint64_t)(a2 - 24), (uint64_t)(a2 - 48), (uint64_t)(a2 - 48), (uint64_t)(a2 - 72), (uint64_t)(a2 - 72));
        v51 = *((_QWORD *)a2 - 12);
        v50 = a2 - 96;
        if (*(_QWORD *)a4 < v51)
        {
          v117 = *((_QWORD *)v50 + 2);
          v105 = *(_OWORD *)v50;
          v52 = *(_OWORD *)a4;
          *((_DWORD *)v50 + 4) = *(_DWORD *)(a4 + 16);
          *(_OWORD *)v50 = v52;
          *(_OWORD *)a4 = v105;
          *(_DWORD *)(a4 + 16) = v117;
          if (*(_QWORD *)v50 < *(_QWORD *)v49)
          {
            v118 = *((_QWORD *)v49 + 2);
            v106 = *(_OWORD *)v49;
            *(_OWORD *)v49 = *(_OWORD *)v50;
            *((_DWORD *)v49 + 4) = *((_DWORD *)v50 + 4);
            *((_DWORD *)v50 + 4) = v118;
            *(_OWORD *)v50 = v106;
            if (*(_QWORD *)v49 < *(_QWORD *)v48)
            {
              v119 = *((_QWORD *)v48 + 2);
              v107 = *(_OWORD *)v48;
              *(_OWORD *)v48 = *(_OWORD *)v49;
              *((_DWORD *)v48 + 4) = *((_DWORD *)v49 + 4);
              *((_DWORD *)v49 + 4) = v119;
              *(_OWORD *)v49 = v107;
              if (*(_QWORD *)v48 < *(_QWORD *)v47)
              {
                v120 = *((_QWORD *)v47 + 2);
                v108 = *(_OWORD *)v47;
                *(_OWORD *)v47 = *(_OWORD *)v48;
                *((_DWORD *)v47 + 4) = *((_DWORD *)v48 + 4);
                *((_DWORD *)v48 + 4) = v120;
                *(_OWORD *)v48 = v108;
              }
            }
          }
        }
        return;
      default:
        if (v12 <= 575)
        {
          v53 = a2 - 24;
          v55 = a2 == (char *)a4 || v53 == (char *)a4;
          if ((a6 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              v57 = a2 - 24;
              do
              {
                v59 = *((_QWORD *)v57 - 3);
                v57 -= 24;
                v58 = v59;
                if (v59 < *(_QWORD *)v53)
                {
                  v109 = *((_OWORD *)v53 - 1);
                  v60 = v56;
                  do
                  {
                    v61 = &a2[v60];
                    *((_OWORD *)v61 - 3) = *(_OWORD *)&a2[v60 - 24];
                    *((_DWORD *)v61 - 8) = *(_DWORD *)&a2[v60 - 8];
                    if (!v60)
                      break;
                    v60 += 24;
                  }
                  while (v58 < *(_QWORD *)v61);
                  *((_QWORD *)v61 - 3) = v58;
                  *((_DWORD *)v61 - 2) = DWORD2(v109);
                  *((_QWORD *)v61 - 2) = v109;
                }
                v56 -= 24;
                v53 = v57;
              }
              while (v57 != (char *)a4);
            }
          }
          else if (!v55)
          {
            v90 = a2 - 48;
            v91 = a2 - 24;
            do
            {
              v93 = *((_QWORD *)v91 - 3);
              v91 -= 24;
              v92 = v93;
              if (v93 < *(_QWORD *)v53)
              {
                v112 = *((_OWORD *)v53 - 1);
                v94 = v90;
                do
                {
                  *(_OWORD *)v94 = *(_OWORD *)(v94 + 24);
                  *((_DWORD *)v94 + 4) = *((_DWORD *)v94 + 10);
                  v95 = *((_QWORD *)v94 + 6);
                  v94 += 24;
                }
                while (v92 < v95);
                *(_QWORD *)v94 = v92;
                *((_DWORD *)v94 + 4) = DWORD2(v112);
                *((_QWORD *)v94 + 1) = v112;
              }
              v90 -= 24;
              v53 = v91;
            }
            while (v91 != (char *)a4);
          }
          return;
        }
        if (!a5)
        {
          if (a2 != (char *)a4)
          {
            v62 = (unint64_t)(v13 - 2) >> 1;
            v63 = v62;
            do
            {
              v64 = v63;
              v65 = 0xAAAAAAAAAAAAAAABLL * ((24 * v63) >> 3);
              if (v62 >= v65)
              {
                v66 = 2 * v65;
                v67 = (2 * v65) | 1;
                v68 = &a2[-24 * v67];
                v69 = v66 + 2;
                if (v69 < v13 && *((_QWORD *)v68 - 3) < *((_QWORD *)v68 - 6))
                {
                  v68 -= 24;
                  v67 = v69;
                }
                v70 = &a2[-24 * v64];
                v71 = *((_QWORD *)v70 - 3);
                if (*((_QWORD *)v68 - 3) >= v71)
                {
                  v110 = *((_OWORD *)v70 - 1);
                  do
                  {
                    v72 = v70;
                    v70 = v68;
                    v73 = *(_OWORD *)(v68 - 24);
                    *((_DWORD *)v72 - 2) = *((_DWORD *)v68 - 2);
                    *(_OWORD *)(v72 - 24) = v73;
                    if (v62 < v67)
                      break;
                    v74 = (2 * v67) | 1;
                    v68 = &a2[-24 * v74];
                    v75 = 2 * v67 + 2;
                    if (v75 < v13 && *((_QWORD *)v68 - 3) < *((_QWORD *)v68 - 6))
                    {
                      v68 -= 24;
                      v74 = v75;
                    }
                    v67 = v74;
                  }
                  while (*((_QWORD *)v68 - 3) >= v71);
                  *((_QWORD *)v70 - 3) = v71;
                  *((_DWORD *)v70 - 2) = DWORD2(v110);
                  *((_QWORD *)v70 - 2) = v110;
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            do
            {
              v76 = 0;
              v121 = *((_QWORD *)a2 - 1);
              v111 = *(_OWORD *)(a2 - 24);
              v77 = a2;
              do
              {
                v78 = &v77[24 * ~v76];
                v79 = (2 * v76) | 1;
                v80 = 2 * v76 + 2;
                if (v80 < v13 && *((_QWORD *)v78 - 3) < *((_QWORD *)v78 - 6))
                {
                  v78 -= 24;
                  v79 = v80;
                }
                v81 = *(_OWORD *)(v78 - 24);
                *((_DWORD *)v77 - 2) = *((_DWORD *)v78 - 2);
                *(_OWORD *)(v77 - 24) = v81;
                v77 = v78;
                v76 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
              v82 = v78 - 24;
              if (v78 == (char *)(a4 + 24))
              {
                *((_DWORD *)v78 - 2) = v121;
                *(_OWORD *)v82 = v111;
              }
              else
              {
                v83 = *(_OWORD *)a4;
                *((_DWORD *)v78 - 2) = *(_DWORD *)(a4 + 16);
                *(_OWORD *)v82 = v83;
                *(_DWORD *)(a4 + 16) = v121;
                *(_OWORD *)a4 = v111;
                if (a2 - v82 >= 25)
                {
                  v84 = ((a2 - v82) / 0x18uLL - 2) >> 1;
                  v85 = &a2[-24 * v84];
                  v86 = *(_QWORD *)v82;
                  if (*((_QWORD *)v85 - 3) < v86)
                  {
                    v100 = *((_OWORD *)v78 - 1);
                    do
                    {
                      v87 = v78;
                      v78 = v85;
                      v88 = *(_OWORD *)(v85 - 24);
                      *((_DWORD *)v87 - 2) = *((_DWORD *)v85 - 2);
                      *(_OWORD *)(v87 - 24) = v88;
                      if (!v84)
                        break;
                      v84 = (v84 - 1) >> 1;
                      v85 = &a2[-24 * v84];
                    }
                    while (*((_QWORD *)v85 - 3) < v86);
                    *((_QWORD *)v78 - 3) = v86;
                    *((_DWORD *)v78 - 2) = DWORD2(v100);
                    *((_QWORD *)v78 - 2) = v100;
                  }
                }
              }
              a4 += 24;
            }
            while (v13-- > 2);
          }
          return;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = -24 * ((unint64_t)v13 >> 1);
        v16 = (uint64_t)&a2[v15];
        if ((unint64_t)v12 < 0xC01)
        {
          sub_1C55DDB10((uint64_t)&a2[v15], (uint64_t)&a2[v15], v11, (uint64_t)a2, a4 + 24, a4 + 24);
        }
        else
        {
          sub_1C55DDB10(v11, (uint64_t)a2, (uint64_t)&a2[v15], (uint64_t)&a2[v15], a4 + 24, a4 + 24);
          v17 = (uint64_t)&a2[-24 * v14 + 24];
          sub_1C55DDB10((uint64_t)(a2 - 24), (uint64_t)(a2 - 24), v17, v17, a4 + 48, a4 + 48);
          v18 = (uint64_t)&a2[24 * ~v14];
          sub_1C55DDB10((uint64_t)(a2 - 48), (uint64_t)(a2 - 48), v18, v18, a4 + 72, a4 + 72);
          sub_1C55DDB10(v17, v17, v16, v16, v18, v18);
          v113 = *((_QWORD *)a2 - 1);
          v101 = *(_OWORD *)(a2 - 24);
          v19 = *(_DWORD *)(v16 - 8);
          *(_OWORD *)(a2 - 24) = *(_OWORD *)(v16 - 24);
          *((_DWORD *)a2 - 2) = v19;
          *(_DWORD *)(v16 - 8) = v113;
          *(_OWORD *)(v16 - 24) = v101;
        }
        --a5;
        v20 = a2 - 24;
        if ((a6 & 1) == 0)
        {
          v21 = *((_QWORD *)a2 - 3);
          if (*(_QWORD *)a2 < v21)
            goto LABEL_29;
          v98 = *((_OWORD *)a2 - 1);
          v22 = a2 - 24;
          if (v21 >= *(_QWORD *)a4)
          {
            do
            {
              v24 = (unint64_t)v22;
              if ((unint64_t)v22 <= a4)
                break;
              v22 -= 24;
            }
            while (v21 >= *(_QWORD *)(v24 - 24));
          }
          else
          {
            v23 = a2;
            do
            {
              v24 = (unint64_t)(v23 - 24);
              v25 = *((_QWORD *)v23 - 6);
              v23 -= 24;
            }
            while (v21 >= v25);
          }
          v26 = (unint64_t *)a4;
          if (v24 > a4)
          {
            v26 = (unint64_t *)a4;
            do
            {
              v27 = *v26;
              v26 += 3;
            }
            while (v21 < v27);
          }
          while (v24 > (unint64_t)v26)
          {
            v114 = *(_QWORD *)(v24 - 8);
            v102 = *(_OWORD *)(v24 - 24);
            v28 = *(_OWORD *)(v26 - 3);
            *(_DWORD *)(v24 - 8) = *((_DWORD *)v26 - 2);
            *(_OWORD *)(v24 - 24) = v28;
            *((_DWORD *)v26 - 2) = v114;
            *(_OWORD *)(v26 - 3) = v102;
            do
            {
              v29 = *(_QWORD *)(v24 - 48);
              v24 -= 24;
            }
            while (v21 >= v29);
            do
            {
              v30 = *v26;
              v26 += 3;
            }
            while (v21 < v30);
          }
          if ((char *)(v24 + 24) != a2)
          {
            v31 = *(_OWORD *)v24;
            *((_DWORD *)a2 - 2) = *(_DWORD *)(v24 + 16);
            *(_OWORD *)v20 = v31;
          }
          a6 = 0;
          *(_QWORD *)v24 = v21;
          *(_QWORD *)(v24 + 8) = v98;
          *(_DWORD *)(v24 + 16) = DWORD2(v98);
          a2 = (char *)v24;
          continue;
        }
        v21 = *(_QWORD *)v20;
LABEL_29:
        v32 = 0;
        v99 = *((_OWORD *)a2 - 1);
        do
        {
          v33 = *(_QWORD *)&a2[v32 - 48];
          v32 -= 24;
        }
        while (v33 < v21);
        v34 = &a2[v32];
        v35 = (char *)a4;
        if (v32 == -24)
        {
          v35 = (char *)a4;
          do
          {
            if (v34 <= v35)
              break;
            v37 = *(_QWORD *)v35;
            v35 += 24;
          }
          while (v37 >= v21);
        }
        else
        {
          do
          {
            v36 = *(_QWORD *)v35;
            v35 += 24;
          }
          while (v36 >= v21);
        }
        v10 = (unint64_t)&a2[v32];
        if (v34 > v35)
        {
          v38 = v35;
          do
          {
            v115 = *(_QWORD *)(v10 - 8);
            v103 = *(_OWORD *)(v10 - 24);
            v39 = *(_OWORD *)(v38 - 24);
            *(_DWORD *)(v10 - 8) = *((_DWORD *)v38 - 2);
            *(_OWORD *)(v10 - 24) = v39;
            *((_DWORD *)v38 - 2) = v115;
            *(_OWORD *)(v38 - 24) = v103;
            do
            {
              v40 = *(_QWORD *)(v10 - 48);
              v10 -= 24;
            }
            while (v40 < v21);
            do
            {
              v41 = *(_QWORD *)v38;
              v38 += 24;
            }
            while (v41 >= v21);
          }
          while (v10 > (unint64_t)v38);
        }
        if ((char *)(v10 + 24) != a2)
        {
          v42 = *(_OWORD *)v10;
          *((_DWORD *)a2 - 2) = *(_DWORD *)(v10 + 16);
          *(_OWORD *)v20 = v42;
        }
        *(_QWORD *)v10 = v21;
        *(_QWORD *)(v10 + 8) = v99;
        *(_DWORD *)(v10 + 16) = DWORD2(v99);
        if (v34 > v35)
        {
LABEL_48:
          sub_1C55DD188(v11, a2, v10 + 24, v10 + 24, a5, a6 & 1);
          a6 = 0;
          a1 = v10 + 24;
          goto LABEL_2;
        }
        v43 = sub_1C55DDC00(v11, (uint64_t)a2, v10 + 24, v10 + 24);
        if (!sub_1C55DDC00(v10, v10, a3, a4))
        {
          a1 = v10 + 24;
          if (v43)
            goto LABEL_2;
          goto LABEL_48;
        }
        a3 = v10 + 24;
        a4 = v10 + 24;
        a1 = v97;
        if (!v43)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0x70913F8BCD29C245 * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v25 = *((_DWORD *)a2 - 2);
        v26 = *(_DWORD *)(v9 + 1120);
        if ((*(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
        {
          if (v25 <= v26)
            return;
        }
        else if (v25 >= v26)
        {
          return;
        }
        sub_1C55DFB24((uint64_t *)v9, a2 - 141);
        return;
      case 3uLL:
        sub_1C55DEFE0(v9, v9 + 1128, (uint64_t)(a2 - 141), a3);
        return;
      case 4uLL:
        sub_1C55DFCEC(v9, v9 + 1128, v9 + 2256, (uint64_t)(a2 - 141), a3);
        return;
      case 5uLL:
        sub_1C55DE348(v9, v9 + 1128, v9 + 2256, v9 + 3384, (uint64_t)(a2 - 141), a3);
        return;
      default:
        if (v12 > 27071)
        {
          if (v11 == 1)
          {
            sub_1C55DE9A8(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 1128 * (v13 >> 1));
          if ((unint64_t)v12 < 0x23401)
          {
            sub_1C55DEFE0((uint64_t)v15, v9, (uint64_t)(a2 - 141), a3);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_1C55DEFE0(v9, (uint64_t)v15, (uint64_t)(a2 - 141), a3);
            v16 = 1128 * v14;
            v17 = 1128 * v14 + v9 - 1128;
            sub_1C55DEFE0(v9 + 1128, v17, (uint64_t)(a2 - 282), a3);
            v18 = v9 + 2256;
            v19 = v9 + 1128 + v16;
            sub_1C55DEFE0(v18, v19, (uint64_t)(a2 - 423), a3);
            sub_1C55DEFE0(v17, (uint64_t)v15, v19, a3);
            sub_1C55DFB24((uint64_t *)a1, v15);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v20 = *(_DWORD *)(a1 - 8);
          v21 = *(_DWORD *)(a1 + 1120);
          if ((*(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
          {
            if (v20 <= v21)
              goto LABEL_18;
          }
          else if (v20 >= v21)
          {
LABEL_18:
            v9 = sub_1C55DF108((uint64_t *)a1, a2, a3);
            goto LABEL_19;
          }
LABEL_14:
          v22 = sub_1C55DF420(a1, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_17;
          v24 = sub_1C55DF748(a1, (uint64_t)v22, a3);
          v9 = (unint64_t)(v22 + 141);
          if (!sub_1C55DF748((uint64_t)(v22 + 141), (uint64_t)a2, a3))
          {
            v10 = v11 + 1;
            if (v24)
              continue;
LABEL_17:
            sub_1C55DDF84(a1, v22, a3, -v11, a5 & 1);
            v9 = (unint64_t)(v22 + 141);
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
          sub_1C55DE48C((_QWORD *)v9, a2, a3);
        else
          sub_1C55DE720((_QWORD *)v9, a2, a3);
        return;
    }
  }
}

  v8 = (unint64_t *)(a2 - 24);
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = a2 - i;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - i) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v52 = (__int128 *)(a2 - 24);
        v53 = *(_QWORD *)(a2 - 24);
        if (v53 < *(_QWORD *)i || v53 == *(_QWORD *)i && *(_DWORD *)(a2 - 8) < *(_DWORD *)(i + 16))
        {
          v141 = *(_QWORD *)(i + 16);
          v135 = *(_OWORD *)i;
          v54 = *v52;
          *(_QWORD *)(i + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)i = v54;
          *(_QWORD *)(a2 - 8) = v141;
          *v52 = v135;
        }
        return;
      case 3:
        sub_1C5648018((__int128 *)i, (unint64_t *)(i + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        sub_1C56484CC(i, (unint64_t *)(i + 24), i + 48, a2 - 24);
        return;
      case 5:
        v55 = (__int128 *)(i + 24);
        v56 = (__int128 *)(i + 48);
        v57 = (__int128 *)(i + 72);
        sub_1C56484CC(i, (unint64_t *)(i + 24), i + 48, i + 72);
        v58 = (__int128 *)(a2 - 24);
        v59 = *(_QWORD *)(a2 - 24);
        v60 = *(_QWORD *)(i + 72);
        if (v59 < v60 || v59 == v60 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(i + 88))
        {
          v61 = *v57;
          v62 = *(_QWORD *)(i + 88);
          v63 = *(_QWORD *)(a2 - 8);
          *v57 = *v58;
          *(_QWORD *)(i + 88) = v63;
          *(_QWORD *)(a2 - 8) = v62;
          *v58 = v61;
          if (*(_QWORD *)v57 < *(_QWORD *)v56
            || *(_QWORD *)v57 == *(_QWORD *)v56 && *(_DWORD *)(i + 88) < *(_DWORD *)(i + 64))
          {
            v64 = *(_QWORD *)(i + 64);
            v65 = *v56;
            *v56 = *v57;
            *(_QWORD *)(i + 64) = *(_QWORD *)(i + 88);
            *v57 = v65;
            *(_QWORD *)(i + 88) = v64;
            if (*(_QWORD *)v56 < *(_QWORD *)v55
              || *(_QWORD *)v56 == *(_QWORD *)v55 && *(_DWORD *)(i + 64) < *(_DWORD *)(i + 40))
            {
              v66 = *(_QWORD *)(i + 40);
              v67 = *v55;
              *v55 = *v56;
              *(_QWORD *)(i + 40) = *(_QWORD *)(i + 64);
              *v56 = v67;
              *(_QWORD *)(i + 64) = v66;
              v68 = *(_QWORD *)(i + 24);
              if (v68 < *(_QWORD *)i || v68 == *(_QWORD *)i && *(_DWORD *)(i + 40) < *(_DWORD *)(i + 16))
              {
                v142 = *(_QWORD *)(i + 16);
                v136 = *(_OWORD *)i;
                *(_OWORD *)i = *v55;
                *(_QWORD *)(i + 16) = *(_QWORD *)(i + 40);
                *v55 = v136;
                *(_QWORD *)(i + 40) = v142;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 575)
        {
          v69 = i + 24;
          v71 = i == a2 || v69 == a2;
          if ((a4 & 1) != 0)
          {
            if (v71)
              return;
            v72 = 0;
            v73 = i;
            while (1)
            {
              v74 = v73;
              v73 = v69;
              v75 = *(_QWORD *)(v74 + 24);
              if (v75 < *(_QWORD *)v74)
                break;
              if (v75 == *(_QWORD *)v74)
              {
                v76 = *(_DWORD *)(v74 + 40);
                if (v76 < *(_DWORD *)(v74 + 16))
                  goto LABEL_106;
              }
LABEL_118:
              v69 = v73 + 24;
              v72 += 24;
              if (v73 + 24 == a2)
                return;
            }
            v76 = *(_DWORD *)(v74 + 40);
LABEL_106:
            v77 = *(_QWORD *)(v74 + 32);
            v78 = *(_DWORD *)(v74 + 44);
            *(_OWORD *)v73 = *(_OWORD *)v74;
            *(_QWORD *)(v73 + 16) = *(_QWORD *)(v74 + 16);
            v79 = i;
            if (v74 != i)
            {
              v80 = v72;
              do
              {
                v81 = i + v80;
                v82 = *(_QWORD *)(i + v80 - 24);
                if (v75 >= v82)
                {
                  if (v75 != v82)
                  {
                    v79 = v74;
                    goto LABEL_117;
                  }
                  v79 = i + v80;
                  if (v76 >= *(_DWORD *)(i + v80 - 8))
                    goto LABEL_117;
                }
                v74 -= 24;
                *(_OWORD *)v81 = *(_OWORD *)(i + v80 - 24);
                *(_QWORD *)(v81 + 16) = *(_QWORD *)(i + v80 - 8);
                v80 -= 24;
              }
              while (v80);
              v79 = i;
            }
LABEL_117:
            *(_QWORD *)v79 = v75;
            *(_QWORD *)(v79 + 8) = v77;
            *(_DWORD *)(v79 + 16) = v76;
            *(_DWORD *)(v79 + 20) = v78;
            goto LABEL_118;
          }
          if (v71)
            return;
          while (1)
          {
            v124 = a1;
            a1 = v69;
            v125 = *(_QWORD *)(v124 + 24);
            if (v125 < *(_QWORD *)v124)
              break;
            if (v125 == *(_QWORD *)v124)
            {
              v126 = *(_DWORD *)(v124 + 40);
              if (v126 < *(_DWORD *)(v124 + 16))
                goto LABEL_178;
            }
LABEL_186:
            v69 = a1 + 24;
            if (a1 + 24 == a2)
              return;
          }
          v126 = *(_DWORD *)(v124 + 40);
LABEL_178:
          v127 = *(_QWORD *)(v124 + 32);
          v128 = *(_DWORD *)(v124 + 44);
          do
          {
            do
            {
              v129 = v124;
              *(_OWORD *)(v124 + 24) = *(_OWORD *)v124;
              *(_QWORD *)(v124 + 40) = *(_QWORD *)(v124 + 16);
              v130 = *(_QWORD *)(v124 - 24);
              v124 -= 24;
              v131 = v125 == v130;
            }
            while (v125 < v130);
          }
          while (v131 && v126 < *(_DWORD *)(v129 - 8));
          *(_QWORD *)v129 = v125;
          *(_QWORD *)(v129 + 8) = v127;
          *(_DWORD *)(v129 + 16) = v126;
          *(_DWORD *)(v129 + 20) = v128;
          goto LABEL_186;
        }
        if (!a3)
        {
          if (i == a2)
            return;
          v83 = (unint64_t)(v11 - 2) >> 1;
          v84 = v83;
          while (1)
          {
            v85 = v84;
            if (v83 >= v84)
            {
              v86 = (2 * v84) | 1;
              v87 = i + 24 * v86;
              v88 = 2 * v84 + 2;
              if (v88 >= v11
                || (v89 = v87 + 24, v90 = *(_QWORD *)(v87 + 24), *(_QWORD *)v87 >= v90)
                && (*(_QWORD *)v87 != v90 || *(_DWORD *)(i + 24 * v86 + 16) >= *(_DWORD *)(v87 + 40)))
              {
                v89 = i + 24 * v86;
                v88 = (2 * v85) | 1;
              }
              v91 = i + 24 * v85;
              v92 = *(_QWORD *)v91;
              if (*(_QWORD *)v89 >= *(_QWORD *)v91)
              {
                if (*(_QWORD *)v89 != *(_QWORD *)v91)
                {
                  v93 = *(_DWORD *)(v91 + 16);
LABEL_132:
                  v94 = *(_QWORD *)(v91 + 8);
                  v95 = *(_DWORD *)(v91 + 20);
                  v96 = *(_QWORD *)(v89 + 16);
                  *(_OWORD *)v91 = *(_OWORD *)v89;
                  *(_QWORD *)(v91 + 16) = v96;
                  if (v83 >= v88)
                  {
                    while (1)
                    {
                      v98 = (2 * v88) | 1;
                      v99 = i + 24 * v98;
                      v88 = 2 * v88 + 2;
                      if (v88 >= v11
                        || (v97 = v99 + 24, v100 = *(_QWORD *)(v99 + 24), *(_QWORD *)v99 >= v100)
                        && (*(_QWORD *)v99 != v100 || *(_DWORD *)(i + 24 * v98 + 16) >= *(_DWORD *)(v99 + 40)))
                      {
                        v97 = i + 24 * v98;
                        v88 = v98;
                      }
                      if (*(_QWORD *)v97 < v92 || *(_QWORD *)v97 == v92 && *(_DWORD *)(v97 + 16) < v93)
                        break;
                      v101 = *(_OWORD *)v97;
                      *(_QWORD *)(v89 + 16) = *(_QWORD *)(v97 + 16);
                      *(_OWORD *)v89 = v101;
                      v89 = v97;
                      if (v83 < v88)
                        goto LABEL_143;
                    }
                  }
                  v97 = v89;
LABEL_143:
                  *(_QWORD *)v97 = v92;
                  *(_QWORD *)(v97 + 8) = v94;
                  *(_DWORD *)(v97 + 16) = v93;
                  *(_DWORD *)(v97 + 20) = v95;
                  goto LABEL_144;
                }
                v93 = *(_DWORD *)(i + 24 * v85 + 16);
                if (*(_DWORD *)(v89 + 16) >= v93)
                  goto LABEL_132;
              }
            }
LABEL_144:
            v84 = v85 - 1;
            if (!v85)
            {
              while (1)
              {
                v102 = 0;
                v143 = *(_QWORD *)(i + 16);
                v137 = *(_OWORD *)i;
                v103 = i;
                do
                {
                  v104 = v103;
                  v105 = v102 + 1;
                  v106 = v103 + 24 * (v102 + 1);
                  v107 = (2 * v102) | 1;
                  v102 = 2 * v102 + 2;
                  if (v102 >= v11
                    || (v103 = v106 + 24, v108 = *(_QWORD *)(v106 + 24), *(_QWORD *)v106 >= v108)
                    && (*(_QWORD *)v106 != v108 || *(_DWORD *)(v104 + 24 * v105 + 16) >= *(_DWORD *)(v106 + 40)))
                  {
                    v103 = v106;
                    v102 = v107;
                  }
                  v109 = *(_OWORD *)v103;
                  *(_QWORD *)(v104 + 16) = *(_QWORD *)(v103 + 16);
                  *(_OWORD *)v104 = v109;
                }
                while (v102 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
                a2 -= 24;
                if (v103 == a2)
                {
                  *(_QWORD *)(v103 + 16) = v143;
                  *(_OWORD *)v103 = v137;
                }
                else
                {
                  v110 = *(_OWORD *)a2;
                  *(_QWORD *)(v103 + 16) = *(_QWORD *)(a2 + 16);
                  *(_OWORD *)v103 = v110;
                  *(_QWORD *)(a2 + 16) = v143;
                  *(_OWORD *)a2 = v137;
                  v111 = v103 - i + 24;
                  if (v111 >= 25)
                  {
                    v112 = v111 / 0x18uLL - 2;
                    v113 = v112 >> 1;
                    v114 = i + 24 * (v112 >> 1);
                    v115 = *(_QWORD *)v103;
                    if (*(_QWORD *)v114 < *(_QWORD *)v103)
                    {
                      v116 = *(_DWORD *)(v103 + 16);
LABEL_156:
                      v117 = *(_QWORD *)(v103 + 8);
                      v118 = *(_DWORD *)(v103 + 20);
                      v119 = *(_QWORD *)(v114 + 16);
                      *(_OWORD *)v103 = *(_OWORD *)v114;
                      *(_QWORD *)(v103 + 16) = v119;
                      if (v112 >= 2)
                      {
                        while (1)
                        {
                          v121 = v113 - 1;
                          v113 = (v113 - 1) >> 1;
                          v120 = i + 24 * v113;
                          if (*(_QWORD *)v120 >= v115
                            && (*(_QWORD *)v120 != v115 || *(_DWORD *)(i + 24 * v113 + 16) >= v116))
                          {
                            break;
                          }
                          v122 = *(_OWORD *)v120;
                          *(_QWORD *)(v114 + 16) = *(_QWORD *)(v120 + 16);
                          *(_OWORD *)v114 = v122;
                          v114 = i + 24 * v113;
                          if (v121 <= 1)
                            goto LABEL_162;
                        }
                      }
                      v120 = v114;
LABEL_162:
                      *(_QWORD *)v120 = v115;
                      *(_QWORD *)(v120 + 8) = v117;
                      *(_DWORD *)(v120 + 16) = v116;
                      *(_DWORD *)(v120 + 20) = v118;
                      goto LABEL_166;
                    }
                    if (*(_QWORD *)v114 == *(_QWORD *)v103)
                    {
                      v116 = *(_DWORD *)(v103 + 16);
                      if (*(_DWORD *)(i + 24 * v113 + 16) < v116)
                        goto LABEL_156;
                    }
                  }
                }
LABEL_166:
                if (v11-- <= 2)
                  return;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (unint64_t *)(i + 24 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0xC01)
        {
          sub_1C5648018((__int128 *)(a1 + 24 * v12), (unint64_t *)a1, (__int128 *)(a2 - 24));
        }
        else
        {
          sub_1C5648018((__int128 *)a1, (unint64_t *)(a1 + 24 * v12), (__int128 *)(a2 - 24));
          v14 = 3 * v12;
          v15 = (unint64_t *)(a1 + 24 * v12 - 24);
          sub_1C5648018((__int128 *)(a1 + 24), v15, (__int128 *)(a2 - 48));
          v16 = (unint64_t *)(a1 + 24 + 8 * v14);
          sub_1C5648018((__int128 *)(a1 + 48), v16, (__int128 *)(a2 - 72));
          sub_1C5648018((__int128 *)v15, v13, (__int128 *)v16);
          v138 = *(_QWORD *)(a1 + 16);
          v132 = *(_OWORD *)a1;
          v17 = v13[2];
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v17;
          v13[2] = v138;
          *(_OWORD *)v13 = v132;
        }
        --a3;
        v18 = *(_QWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v19 = *(_QWORD *)(a1 - 24);
          if (v19 >= v18)
          {
            if (v19 == v18)
            {
              v38 = *(_DWORD *)(a1 + 16);
              if (*(_DWORD *)(a1 - 8) < v38)
                goto LABEL_13;
            }
            else
            {
              v38 = *(_DWORD *)(a1 + 16);
            }
            v39 = *v8;
            if (v18 < *v8 || v18 == *v8 && v38 < *(_DWORD *)(a2 - 8))
            {
              i = a1;
              do
              {
                v41 = *(_QWORD *)(i + 24);
                i += 24;
                v40 = v41;
              }
              while (v18 >= v41 && (v18 != v40 || v38 >= *(_DWORD *)(i + 16)));
            }
            else
            {
              for (i = a1 + 24;
                    i < a2 && v18 >= *(_QWORD *)i && (v18 != *(_QWORD *)i || v38 >= *(_DWORD *)(i + 16));
            }
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 24; v18 < v39 || v18 == v39 && v38 < *(_DWORD *)(j + 16); j -= 24)
              {
                v43 = *(_QWORD *)(j - 24);
                v39 = v43;
              }
            }
            v44 = *(_QWORD *)(a1 + 8);
            v45 = *(_DWORD *)(a1 + 20);
            while (i < j)
            {
              v140 = *(_QWORD *)(i + 16);
              v134 = *(_OWORD *)i;
              v46 = *(_OWORD *)j;
              *(_QWORD *)(i + 16) = *(_QWORD *)(j + 16);
              *(_OWORD *)i = v46;
              *(_QWORD *)(j + 16) = v140;
              *(_OWORD *)j = v134;
              do
              {
                v48 = *(_QWORD *)(i + 24);
                i += 24;
                v47 = v48;
              }
              while (v18 >= v48 && (v18 != v47 || v38 >= *(_DWORD *)(i + 16)));
              do
              {
                do
                {
                  v49 = *(_QWORD *)(j - 24);
                  j -= 24;
                  v50 = v18 == v49;
                }
                while (v18 < v49);
              }
              while (v50 && v38 < *(_DWORD *)(j + 16));
            }
            if (i - 24 != a1)
            {
              v51 = *(_OWORD *)(i - 24);
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 8);
              *(_OWORD *)a1 = v51;
            }
            a4 = 0;
            *(_QWORD *)(i - 24) = v18;
            *(_QWORD *)(i - 16) = v44;
            *(_DWORD *)(i - 8) = v38;
            *(_DWORD *)(i - 4) = v45;
            continue;
          }
        }
LABEL_13:
        v20 = 0;
        v21 = *(_QWORD *)(a1 + 8);
        v22 = *(_QWORD *)(a1 + 16);
        while (1)
        {
          v23 = *(_QWORD *)(a1 + v20 + 24);
          if (v23 >= v18 && (v23 != v18 || *(_DWORD *)(a1 + v20 + 40) >= v22))
            break;
          v20 += 24;
        }
        v24 = a1 + v20 + 24;
        if (v20)
        {
          v25 = *v8;
          for (k = a2 - 24; v25 >= v18 && (v25 != v18 || *(_DWORD *)(k + 16) >= v22); k -= 24)
          {
            v27 = *(_QWORD *)(k - 24);
            v25 = v27;
          }
        }
        else
        {
          k = a2;
          if (v24 < a2)
          {
            v28 = *v8;
            k = a2 - 24;
            if (*v8 >= v18)
            {
              k = a2 - 24;
              do
              {
                if (v28 == v18)
                {
                  if (v24 >= k || *(_DWORD *)(k + 16) < v22)
                    break;
                }
                else if (v24 >= k)
                {
                  break;
                }
                v29 = *(_QWORD *)(k - 24);
                k -= 24;
                v28 = v29;
              }
              while (v29 >= v18);
            }
          }
        }
        i = v24;
        if (v24 < k)
        {
          v30 = k;
          do
          {
            v139 = *(_QWORD *)(i + 16);
            v133 = *(_OWORD *)i;
            v31 = *(_OWORD *)v30;
            *(_QWORD *)(i + 16) = *(_QWORD *)(v30 + 16);
            *(_OWORD *)i = v31;
            *(_QWORD *)(v30 + 16) = v139;
            *(_OWORD *)v30 = v133;
            do
            {
              do
              {
                v32 = *(_QWORD *)(i + 24);
                i += 24;
                v33 = v32 == v18;
              }
              while (v32 < v18);
            }
            while (v33 && *(_DWORD *)(i + 16) < v22);
            do
            {
              v35 = *(_QWORD *)(v30 - 24);
              v30 -= 24;
              v34 = v35;
            }
            while (v35 >= v18 && (v34 != v18 || *(_DWORD *)(v30 + 16) >= v22));
          }
          while (i < v30);
        }
        if (i - 24 != a1)
        {
          v36 = *(_OWORD *)(i - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 8);
          *(_OWORD *)a1 = v36;
        }
        *(_QWORD *)(i - 24) = v18;
        *(_QWORD *)(i - 16) = v21;
        *(_QWORD *)(i - 8) = v22;
        if (v24 < k)
        {
LABEL_49:
          sub_1C56474D0(a1, i - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v37 = sub_1C564817C(a1, i - 24);
        if (!sub_1C564817C(i, a2))
        {
          if (v37)
            continue;
          goto LABEL_49;
        }
        a2 = i - 24;
        if (!v37)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v39 = *(_QWORD *)(a2 - 32);
        v40 = *(_QWORD *)v8;
        if (v39 < *(_QWORD *)v8)
        {
          *(_QWORD *)v8 = v39;
          *(_QWORD *)(a2 - 32) = v40;
          v119 = *(_QWORD *)(v8 + 24);
          v110 = *(_OWORD *)(v8 + 8);
          v41 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v8 + 8) = v41;
          *(_QWORD *)(a2 - 8) = v119;
          *(_OWORD *)(a2 - 24) = v110;
        }
        return;
      case 3:
        sub_1C56731D4((uint64_t *)v8, (uint64_t *)(v8 + 32), (uint64_t *)(a2 - 32));
        return;
      case 4:
        sub_1C5673588(v8, v8 + 32, v8 + 64, a2 - 32);
        return;
      case 5:
        sub_1C5673588(v8, v8 + 32, v8 + 64, v8 + 96);
        v42 = *(_QWORD *)(a2 - 32);
        v43 = *(_QWORD *)(v8 + 96);
        if (v42 < v43)
        {
          *(_QWORD *)(v8 + 96) = v42;
          *(_QWORD *)(a2 - 32) = v43;
          v44 = *(_OWORD *)(v8 + 104);
          v45 = *(_QWORD *)(v8 + 120);
          v46 = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v8 + 104) = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 120) = v46;
          *(_QWORD *)(a2 - 8) = v45;
          *(_OWORD *)(a2 - 24) = v44;
          v47 = *(_QWORD *)(v8 + 96);
          v48 = *(_QWORD *)(v8 + 64);
          if (v47 < v48)
          {
            *(_QWORD *)(v8 + 64) = v47;
            v49 = *(_QWORD *)(v8 + 88);
            v50 = *(_OWORD *)(v8 + 72);
            *(_OWORD *)(v8 + 72) = *(_OWORD *)(v8 + 104);
            *(_QWORD *)(v8 + 88) = *(_QWORD *)(v8 + 120);
            *(_QWORD *)(v8 + 96) = v48;
            *(_OWORD *)(v8 + 104) = v50;
            *(_QWORD *)(v8 + 120) = v49;
            v51 = *(_QWORD *)(v8 + 32);
            if (v47 < v51)
            {
              *(_QWORD *)(v8 + 32) = v47;
              v52 = *(_QWORD *)(v8 + 56);
              v53 = *(_OWORD *)(v8 + 40);
              *(_OWORD *)(v8 + 40) = *(_OWORD *)(v8 + 72);
              *(_QWORD *)(v8 + 56) = *(_QWORD *)(v8 + 88);
              *(_QWORD *)(v8 + 64) = v51;
              *(_OWORD *)(v8 + 72) = v53;
              *(_QWORD *)(v8 + 88) = v52;
              v54 = *(_QWORD *)v8;
              if (v47 < *(_QWORD *)v8)
              {
                *(_QWORD *)v8 = v47;
                v111 = *(_OWORD *)(v8 + 8);
                v120 = *(_QWORD *)(v8 + 24);
                *(_QWORD *)(v8 + 24) = *(_QWORD *)(v8 + 56);
                *(_QWORD *)(v8 + 32) = v54;
                *(_OWORD *)(v8 + 8) = *(_OWORD *)(v8 + 40);
                *(_OWORD *)(v8 + 40) = v111;
                *(_QWORD *)(v8 + 56) = v120;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v55 = v8 + 32;
          v57 = v8 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = v8;
              do
              {
                v60 = v55;
                v61 = *(_QWORD *)(v59 + 32);
                if (v61 < *(_QWORD *)v59)
                {
                  v112 = *(_OWORD *)(v59 + 40);
                  v121 = *(_QWORD *)(v59 + 56);
                  v62 = *(_QWORD *)v59;
                  v63 = v58;
                  while (1)
                  {
                    v64 = v8 + v63;
                    *(_QWORD *)(v64 + 32) = v62;
                    *(_OWORD *)(v64 + 40) = *(_OWORD *)(v8 + v63 + 8);
                    *(_QWORD *)(v64 + 56) = *(_QWORD *)(v8 + v63 + 24);
                    if (!v63)
                      break;
                    v62 = *(_QWORD *)(v64 - 32);
                    v63 -= 32;
                    if (v61 >= v62)
                    {
                      v65 = (_QWORD *)(v8 + v63 + 32);
                      goto LABEL_78;
                    }
                  }
                  v65 = (_QWORD *)v8;
LABEL_78:
                  *v65 = v61;
                  *(_QWORD *)(v64 + 24) = v121;
                  *(_OWORD *)(v64 + 8) = v112;
                }
                v55 = v60 + 32;
                v58 += 32;
                v59 = v60;
              }
              while (v60 + 32 != a2);
            }
          }
          else if (!v57)
          {
            v96 = v8 + 40;
            do
            {
              v97 = v55;
              v98 = *(_QWORD *)(a1 + 32);
              if (v98 < *(_QWORD *)a1)
              {
                v115 = *(_OWORD *)(a1 + 40);
                v124 = *(_QWORD *)(a1 + 56);
                v99 = *(_QWORD *)a1;
                v100 = v96;
                do
                {
                  *(_QWORD *)(v100 - 8) = v99;
                  *(_OWORD *)v100 = *(_OWORD *)(v100 - 32);
                  *(_QWORD *)(v100 + 16) = *(_QWORD *)(v100 - 16);
                  v99 = *(_QWORD *)(v100 - 72);
                  v100 -= 32;
                }
                while (v98 < v99);
                *(_QWORD *)(v100 - 8) = v98;
                *(_QWORD *)(v100 + 16) = v124;
                *(_OWORD *)v100 = v115;
              }
              v55 = v97 + 32;
              v96 += 32;
              a1 = v97;
            }
            while (v97 + 32 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v66 = (unint64_t)(v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = v8 + 32 * v69;
                if (2 * v68 + 2 >= v10)
                {
                  v71 = *(_QWORD *)v70;
                }
                else
                {
                  v71 = *(_QWORD *)(v70 + 32);
                  v72 = *(_QWORD *)v70 < v71;
                  if (*(_QWORD *)v70 > v71)
                    v71 = *(_QWORD *)v70;
                  if (v72)
                  {
                    v70 += 32;
                    v69 = 2 * v68 + 2;
                  }
                }
                v73 = v8 + 32 * v68;
                v74 = *(_QWORD *)v73;
                if (v71 >= *(_QWORD *)v73)
                {
                  v122 = *(_QWORD *)(v73 + 24);
                  v113 = *(_OWORD *)(v73 + 8);
                  do
                  {
                    v75 = v73;
                    v73 = v70;
                    *(_QWORD *)v75 = v71;
                    v76 = *(_OWORD *)(v70 + 8);
                    *(_QWORD *)(v75 + 24) = *(_QWORD *)(v70 + 24);
                    *(_OWORD *)(v75 + 8) = v76;
                    if (v66 < v69)
                      break;
                    v77 = (2 * v69) | 1;
                    v70 = v8 + 32 * v77;
                    v69 = 2 * v69 + 2;
                    if (v69 >= v10)
                    {
                      v71 = *(_QWORD *)v70;
                      v69 = v77;
                    }
                    else
                    {
                      v71 = *(_QWORD *)v70;
                      v78 = *(_QWORD *)(v70 + 32);
                      if (*(_QWORD *)v70 <= v78)
                        v71 = *(_QWORD *)(v70 + 32);
                      if (*(_QWORD *)v70 >= v78)
                        v69 = v77;
                      else
                        v70 += 32;
                    }
                  }
                  while (v71 >= v74);
                  *(_QWORD *)v73 = v74;
                  *(_QWORD *)(v73 + 24) = v122;
                  *(_OWORD *)(v73 + 8) = v113;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            do
            {
              v79 = 0;
              v80 = *(_QWORD *)v8;
              v103 = *(_OWORD *)(v8 + 8);
              v106 = *(_QWORD *)(v8 + 24);
              v81 = v8;
              do
              {
                v82 = v81 + 32 * v79 + 32;
                v83 = (2 * v79) | 1;
                v79 = 2 * v79 + 2;
                if (v79 >= v10)
                {
                  v84 = *(_QWORD *)v82;
                  v79 = v83;
                }
                else
                {
                  v84 = *(_QWORD *)v82;
                  v85 = *(_QWORD *)(v82 + 32);
                  if (*(_QWORD *)v82 <= v85)
                    v84 = *(_QWORD *)(v82 + 32);
                  if (*(_QWORD *)v82 >= v85)
                    v79 = v83;
                  else
                    v82 += 32;
                }
                *(_QWORD *)v81 = v84;
                v86 = *(_OWORD *)(v82 + 8);
                *(_QWORD *)(v81 + 24) = *(_QWORD *)(v82 + 24);
                *(_OWORD *)(v81 + 8) = v86;
                v81 = v82;
              }
              while (v79 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              v87 = (__int128 *)(v82 + 8);
              if (v82 == a2 - 32)
              {
                *(_QWORD *)v82 = v80;
                *(_QWORD *)(v82 + 24) = v106;
                *v87 = v103;
              }
              else
              {
                *(_QWORD *)v82 = *(_QWORD *)(a2 - 32);
                v88 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v82 + 24) = *(_QWORD *)(a2 - 8);
                *v87 = v88;
                *(_QWORD *)(a2 - 32) = v80;
                *(_QWORD *)(a2 - 8) = v106;
                *(_OWORD *)(a2 - 24) = v103;
                v89 = v82 - v8 + 32;
                if (v89 >= 33)
                {
                  v90 = (((unint64_t)v89 >> 5) - 2) >> 1;
                  v91 = v8 + 32 * v90;
                  v92 = *(_QWORD *)v82;
                  if (*(_QWORD *)v91 < *(_QWORD *)v82)
                  {
                    v123 = *(_QWORD *)(v82 + 24);
                    v114 = *v87;
                    v93 = *(_QWORD *)v91;
                    do
                    {
                      v94 = v82;
                      v82 = v91;
                      *(_QWORD *)v94 = v93;
                      v95 = *(_OWORD *)(v91 + 8);
                      *(_QWORD *)(v94 + 24) = *(_QWORD *)(v91 + 24);
                      *(_OWORD *)(v94 + 8) = v95;
                      if (!v90)
                        break;
                      v90 = (v90 - 1) >> 1;
                      v91 = v8 + 32 * v90;
                      v93 = *(_QWORD *)v91;
                    }
                    while (*(_QWORD *)v91 < v92);
                    *(_QWORD *)v82 = v92;
                    *(_QWORD *)(v82 + 24) = v123;
                    *(_OWORD *)(v82 + 8) = v114;
                  }
                }
              }
              a2 -= 32;
              v72 = v10-- <= 2;
            }
            while (!v72);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 32 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          sub_1C56731D4((uint64_t *)(a1 + 32 * ((unint64_t)v10 >> 1)), (uint64_t *)a1, (uint64_t *)(a2 - 32));
        }
        else
        {
          sub_1C56731D4((uint64_t *)a1, (uint64_t *)(a1 + 32 * ((unint64_t)v10 >> 1)), (uint64_t *)(a2 - 32));
          sub_1C56731D4((uint64_t *)(a1 + 32), (uint64_t *)(v12 - 32), (uint64_t *)(a2 - 64));
          sub_1C56731D4((uint64_t *)(a1 + 64), (uint64_t *)(a1 + 32 + 32 * v11), (uint64_t *)(a2 - 96));
          sub_1C56731D4((uint64_t *)(v12 - 32), (uint64_t *)v12, (uint64_t *)(a1 + 32 + 32 * v11));
          v13 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
          v116 = *(_QWORD *)(a1 + 24);
          v107 = *(_OWORD *)(a1 + 8);
          v14 = *(_OWORD *)(v12 + 8);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(v12 + 24);
          *(_OWORD *)(a1 + 8) = v14;
          *(_QWORD *)(v12 + 24) = v116;
          *(_OWORD *)(v12 + 8) = v107;
        }
        --a3;
        v15 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 32) >= v15)
        {
          v105 = *(_QWORD *)(a1 + 24);
          v102 = *(_OWORD *)(a1 + 8);
          if (v15 >= *(_QWORD *)(a2 - 32))
          {
            v30 = a1 + 32;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              v30 += 32;
            }
            while (v15 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v29 = *(_QWORD *)(v8 + 32);
              v8 += 32;
            }
            while (v15 >= v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *(_QWORD *)(v31 - 32);
              v31 -= 32;
            }
            while (v15 < v32);
          }
          if (v8 < v31)
          {
            v33 = *(_QWORD *)v8;
            v34 = *(_QWORD *)v31;
            do
            {
              *(_QWORD *)v8 = v34;
              *(_QWORD *)v31 = v33;
              v118 = *(_QWORD *)(v8 + 24);
              v109 = *(_OWORD *)(v8 + 8);
              v35 = *(_OWORD *)(v31 + 8);
              *(_QWORD *)(v8 + 24) = *(_QWORD *)(v31 + 24);
              *(_OWORD *)(v8 + 8) = v35;
              *(_QWORD *)(v31 + 24) = v118;
              *(_OWORD *)(v31 + 8) = v109;
              do
              {
                v36 = *(_QWORD *)(v8 + 32);
                v8 += 32;
                v33 = v36;
              }
              while (v15 >= v36);
              do
              {
                v37 = *(_QWORD *)(v31 - 32);
                v31 -= 32;
                v34 = v37;
              }
              while (v15 < v37);
            }
            while (v8 < v31);
          }
          if (v8 - 32 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v8 - 32);
            v38 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)(a1 + 8) = v38;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 32) = v15;
          *(_QWORD *)(v8 - 8) = v105;
          *(_OWORD *)(v8 - 24) = v102;
          continue;
        }
        v16 = 0;
        v104 = *(_QWORD *)(a1 + 24);
        v101 = *(_OWORD *)(a1 + 8);
        do
        {
          v17 = *(_QWORD *)(a1 + v16 + 32);
          v16 += 32;
        }
        while (v17 < v15);
        v18 = a1 + v16;
        v19 = (uint64_t *)a2;
        if (v16 == 32)
        {
          v19 = (uint64_t *)a2;
          do
          {
            if (v18 >= (unint64_t)v19)
              break;
            v21 = *(v19 - 4);
            v19 -= 4;
          }
          while (v21 >= v15);
        }
        else
        {
          do
          {
            v20 = *(v19 - 4);
            v19 -= 4;
          }
          while (v20 >= v15);
        }
        if (v18 >= (unint64_t)v19)
        {
          v8 = a1 + v16;
        }
        else
        {
          v22 = *v19;
          v8 = a1 + v16;
          v23 = v19;
          do
          {
            *(_QWORD *)v8 = v22;
            *v23 = v17;
            v117 = *(_QWORD *)(v8 + 24);
            v108 = *(_OWORD *)(v8 + 8);
            v24 = *(_OWORD *)(v23 + 1);
            *(_QWORD *)(v8 + 24) = v23[3];
            *(_OWORD *)(v8 + 8) = v24;
            v23[3] = v117;
            *(_OWORD *)(v23 + 1) = v108;
            do
            {
              v25 = *(_QWORD *)(v8 + 32);
              v8 += 32;
              v17 = v25;
            }
            while (v25 < v15);
            do
            {
              v26 = *(v23 - 4);
              v23 -= 4;
              v22 = v26;
            }
            while (v26 >= v15);
          }
          while (v8 < (unint64_t)v23);
        }
        if (v8 - 32 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v8 - 32);
          v27 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)(a1 + 8) = v27;
        }
        *(_QWORD *)(v8 - 32) = v15;
        *(_QWORD *)(v8 - 8) = v104;
        *(_OWORD *)(v8 - 24) = v101;
        if (v18 < (unint64_t)v19)
        {
LABEL_31:
          sub_1C5672870(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = sub_1C56732F8(a1, v8 - 32);
        if (!sub_1C56732F8(v8, a2))
        {
          if (v28)
            continue;
          goto LABEL_31;
        }
        a2 = v8 - 32;
        if (!v28)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v64 = a2[-1].n128_u64[0];
        v65 = a2[-1].n128_u64[1];
        v66 = a2 - 1;
        v67 = v8->n128_u64[1];
        v68 = v64 > v8->n128_u64[0];
        v92 = v65 == v67;
        v69 = v65 > v67;
        if (!v92)
          v68 = v69;
        if (v68)
        {
          v167 = *v8;
          *v8 = *v66;
          *v66 = v167;
        }
        return;
      case 3:
        sub_1C5760CDC(v8, (__n128 *)v8[1].n128_u64, (__n128 *)a2[-1].n128_u64);
        return;
      case 4:
        sub_1C5761050(v8, v8 + 1, v8 + 2, a2 - 1);
        return;
      case 5:
        v70 = v8 + 1;
        v71 = v8 + 2;
        v72 = v8 + 3;
        sub_1C5761050(v8, v8 + 1, v8 + 2, v8 + 3);
        v73 = a2[-1].n128_u64[0];
        v74 = a2[-1].n128_u64[1];
        v75 = a2 - 1;
        v76 = v8[3].n128_u64[1];
        v77 = v73 > v8[3].n128_u64[0];
        v92 = v74 == v76;
        v78 = v74 > v76;
        if (!v92)
          v77 = v78;
        if (v77)
        {
          v79 = *v72;
          *v72 = *v75;
          *v75 = v79;
          v80 = v8[3].n128_u64[1];
          v81 = v8[2].n128_u64[1];
          v92 = v80 == v81;
          v82 = v80 > v81;
          if (v92)
            v82 = v8[3].n128_u64[0] > v8[2].n128_u64[0];
          if (v82)
          {
            v83 = *v71;
            *v71 = *v72;
            *v72 = v83;
            v84 = v8[2].n128_u64[1];
            v85 = v8[1].n128_u64[1];
            v92 = v84 == v85;
            v86 = v84 > v85;
            if (v92)
              v86 = v8[2].n128_u64[0] > v8[1].n128_u64[0];
            if (v86)
            {
              v87 = *v70;
              *v70 = *v71;
              *v71 = v87;
              v88 = v8[1].n128_u64[1];
              v89 = v8->n128_u64[1];
              v92 = v88 == v89;
              v90 = v88 > v89;
              if (v92)
                v90 = v8[1].n128_u64[0] > v8->n128_u64[0];
              if (v90)
              {
                v168 = *v8;
                *v8 = *v70;
                *v70 = v168;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v91 = v8 + 1;
          v92 = v8 == a2 || v91 == a2;
          v93 = v92;
          if ((a4 & 1) != 0)
          {
            if ((v93 & 1) == 0)
            {
              v94 = 0;
              v95 = v8;
              do
              {
                v97 = v95[1].n128_u64[0];
                v96 = v95[1].n128_u64[1];
                v99 = v95->n128_u64[0];
                v98 = v95->n128_u64[1];
                v95 = v91;
                v100 = v97 > v99;
                v92 = v96 == v98;
                v101 = v96 > v98;
                if (!v92)
                  v100 = v101;
                if (v100)
                {
                  v102 = v94;
                  while (1)
                  {
                    v103 = (char *)v8 + v102;
                    *(__n128 *)((char *)v8 + v102 + 16) = *(__n128 *)((char *)v8 + v102);
                    if (!v102)
                      break;
                    v104 = *((_QWORD *)v103 - 1);
                    v105 = v97 > *((_QWORD *)v103 - 2);
                    v92 = v96 == v104;
                    v106 = v96 > v104;
                    if (!v92)
                      v105 = v106;
                    v102 -= 16;
                    if (!v105)
                    {
                      v107 = (__n128 *)((char *)v8 + v102 + 16);
                      goto LABEL_114;
                    }
                  }
                  v107 = v8;
LABEL_114:
                  v107->n128_u64[0] = v97;
                  v107->n128_u64[1] = v96;
                }
                v91 = v95 + 1;
                v94 += 16;
              }
              while (&v95[1] != a2);
            }
          }
          else if ((v93 & 1) == 0)
          {
            do
            {
              v154 = a1[1].n128_u64[0];
              v153 = a1[1].n128_u64[1];
              v156 = a1->n128_u64[0];
              v155 = a1->n128_u64[1];
              a1 = v91;
              v157 = v154 > v156;
              v92 = v153 == v155;
              v158 = v153 > v155;
              if (!v92)
                v157 = v158;
              if (v157)
              {
                v159 = a1;
                do
                {
                  *v159 = v159[-1];
                  v161 = v159[-2].n128_u64[0];
                  v160 = v159[-2].n128_u64[1];
                  --v159;
                  v162 = v154 > v161;
                  v92 = v153 == v160;
                  v163 = v153 > v160;
                  if (v92)
                    v163 = v162;
                }
                while (v163);
                v159->n128_u64[0] = v154;
                v159->n128_u64[1] = v153;
              }
              v91 = a1 + 1;
            }
            while (&a1[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v108 = (unint64_t)(v10 - 2) >> 1;
            v109 = v108;
            do
            {
              v110 = v109;
              if (v108 >= v109)
              {
                v111 = (2 * v109) | 1;
                v112 = &v8[v111];
                if (2 * v110 + 2 >= v10)
                {
                  v115 = v112->n128_u64[0];
                }
                else
                {
                  v113 = v112[1].n128_u64[1];
                  v115 = v112->n128_u64[0];
                  v114 = v112->n128_u64[1];
                  v92 = v114 == v113;
                  v116 = v114 > v113;
                  if (v92)
                    v116 = v112->n128_u64[0] > v112[1].n128_u64[0];
                  if (v116)
                  {
                    v115 = v112[1].n128_u64[0];
                    ++v112;
                    v111 = 2 * v110 + 2;
                  }
                }
                v117 = &v8[v110];
                v118 = v112->n128_u64[1];
                v119 = *v117;
                v120 = v117->n128_u64[1];
                v121 = v117->n128_u64[0];
                v122 = v115 > v117->n128_u64[0];
                v92 = v118 == v120;
                v123 = v118 > v120;
                if (!v92)
                  v122 = v123;
                if (!v122)
                {
                  do
                  {
                    v124 = v117;
                    v117 = v112;
                    *v124 = *v112;
                    if (v108 < v111)
                      break;
                    v125 = (2 * v111) | 1;
                    v112 = &v8[v125];
                    v111 = 2 * v111 + 2;
                    if (v111 >= v10)
                    {
                      v130 = v112->n128_u64[0];
                      v111 = v125;
                    }
                    else
                    {
                      v126 = v112[1].n128_u64[1];
                      v127 = v112->n128_u64[1];
                      v92 = v127 == v126;
                      v128 = v127 > v126;
                      if (v92)
                        v128 = v112->n128_u64[0] > v112[1].n128_u64[0];
                      v129 = !v128;
                      v130 = v128 ? v112[1].n128_u64[0] : v112->n128_u64[0];
                      if (v129)
                        v111 = v125;
                      else
                        ++v112;
                    }
                    v131 = v112->n128_u64[1];
                    v132 = v130 > v121;
                    v92 = v131 == v120;
                    v133 = v131 > v120;
                    if (v92)
                      v133 = v132;
                  }
                  while (!v133);
                  *v117 = v119;
                }
              }
              v109 = v110 - 1;
            }
            while (v110);
            do
            {
              v134 = 0;
              v169 = *v8;
              v135 = v8;
              do
              {
                v136 = &v135[v134 + 1];
                v137 = (2 * v134) | 1;
                v138 = 2 * v134 + 2;
                if (v138 < v10)
                {
                  v139 = v136[1].n128_u64[1];
                  v140 = v136->n128_u64[1];
                  v92 = v140 == v139;
                  v141 = v140 > v139;
                  if (v92)
                    v141 = v136->n128_u64[0] > v136[1].n128_u64[0];
                  if (v141)
                  {
                    ++v136;
                    v137 = v138;
                  }
                }
                *v135 = *v136;
                v135 = v136;
                v134 = v137;
              }
              while (v137 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v136 == --a2)
              {
                *v136 = v169;
              }
              else
              {
                *v136 = *a2;
                *a2 = v169;
                v142 = (char *)v136 - (char *)v8 + 16;
                if (v142 >= 17)
                {
                  v143 = (((unint64_t)v142 >> 4) - 2) >> 1;
                  v144 = &v8[v143];
                  v145 = v144->n128_u64[1];
                  v147 = v136->n128_u64[0];
                  v146 = v136->n128_u64[1];
                  v92 = v145 == v146;
                  v148 = v145 > v146;
                  if (v92)
                    v148 = v144->n128_u64[0] > v136->n128_u64[0];
                  if (v148)
                  {
                    do
                    {
                      v149 = v136;
                      v136 = v144;
                      *v149 = *v144;
                      if (!v143)
                        break;
                      v143 = (v143 - 1) >> 1;
                      v144 = &v8[v143];
                      v150 = v144->n128_u64[1];
                      v92 = v150 == v146;
                      v151 = v150 > v146;
                      if (v92)
                        v151 = v144->n128_u64[0] > v147;
                    }
                    while (v151);
                    v136->n128_u64[0] = v147;
                    v136->n128_u64[1] = v146;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x801)
        {
          sub_1C5760CDC((__n128 *)a1[(unint64_t)v10 >> 1].n128_u64, a1, (__n128 *)a2[-1].n128_u64);
        }
        else
        {
          sub_1C5760CDC(a1, (__n128 *)a1[(unint64_t)v10 >> 1].n128_u64, (__n128 *)a2[-1].n128_u64);
          sub_1C5760CDC((__n128 *)a1[1].n128_u64, (__n128 *)v12[-1].n128_u64, (__n128 *)a2[-2].n128_u64);
          sub_1C5760CDC((__n128 *)a1[2].n128_u64, (__n128 *)a1[v11 + 1].n128_u64, (__n128 *)a2[-3].n128_u64);
          sub_1C5760CDC((__n128 *)v12[-1].n128_u64, v12, (__n128 *)a1[v11 + 1].n128_u64);
          v164 = *a1;
          *a1 = *v12;
          *v12 = v164;
        }
        --a3;
        v13 = a1->n128_u64[0];
        if ((a4 & 1) == 0)
        {
          v14 = a1->n128_u64[1];
          v15 = a1[-1].n128_u64[1];
          v92 = v15 == v14;
          v16 = v15 > v14;
          if (v92)
            v16 = a1[-1].n128_u64[0] > v13;
          if (v16)
            goto LABEL_13;
          v41 = a2[-1].n128_u64[1];
          v92 = v14 == v41;
          v42 = v14 > v41;
          if (v92)
            v42 = v13 > a2[-1].n128_u64[0];
          if (v42)
          {
            v8 = a1;
            do
            {
              v43 = v8[1].n128_u64[0];
              v44 = v8[1].n128_u64[1];
              ++v8;
              v45 = v13 > v43;
              v92 = v14 == v44;
              v46 = v14 > v44;
              if (!v92)
                v45 = v46;
            }
            while (!v45);
          }
          else
          {
            v47 = a1 + 1;
            do
            {
              v8 = v47;
              if (v47 >= a2)
                break;
              v48 = v47->n128_u64[1];
              v49 = v13 > v8->n128_u64[0];
              v92 = v14 == v48;
              v50 = v14 > v48;
              if (!v92)
                v49 = v50;
              v47 = v8 + 1;
            }
            while (!v49);
          }
          v51 = a2;
          if (v8 < a2)
          {
            v51 = a2;
            do
            {
              v52 = v51[-1].n128_u64[0];
              v53 = v51[-1].n128_u64[1];
              --v51;
              v54 = v13 > v52;
              v92 = v14 == v53;
              v55 = v14 > v53;
              if (!v92)
                v54 = v55;
            }
            while (v54);
          }
          while (v8 < v51)
          {
            v166 = *v8;
            *v8 = *v51;
            *v51 = v166;
            do
            {
              v56 = v8[1].n128_u64[0];
              v57 = v8[1].n128_u64[1];
              ++v8;
              v58 = v13 > v56;
              v92 = v14 == v57;
              v59 = v14 > v57;
              if (!v92)
                v58 = v59;
            }
            while (!v58);
            do
            {
              v60 = v51[-1].n128_u64[0];
              v61 = v51[-1].n128_u64[1];
              --v51;
              v62 = v13 > v60;
              v92 = v14 == v61;
              v63 = v14 > v61;
              if (!v92)
                v62 = v63;
            }
            while (v62);
          }
          if (&v8[-1] != a1)
            *a1 = v8[-1];
          a4 = 0;
          v8[-1].n128_u64[0] = v13;
          v8[-1].n128_u64[1] = v14;
          continue;
        }
        v14 = a1->n128_u64[1];
LABEL_13:
        v17 = 0;
        do
        {
          v18 = a1[v17 + 1].n128_u64[1];
          v19 = a1[v17 + 1].n128_u64[0] > v13;
          v92 = v18 == v14;
          v20 = v18 > v14;
          if (!v92)
            v19 = v20;
          ++v17;
        }
        while (v19);
        v21 = &a1[v17];
        v22 = a2;
        if (v17 == 1)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v27 = v22[-1].n128_u64[0];
            v28 = v22[-1].n128_u64[1];
            --v22;
            v29 = v27 > v13;
            v92 = v28 == v14;
            v30 = v28 > v14;
            if (!v92)
              v29 = v30;
          }
          while (!v29);
        }
        else
        {
          do
          {
            v23 = v22[-1].n128_u64[0];
            v24 = v22[-1].n128_u64[1];
            --v22;
            v25 = v23 > v13;
            v92 = v24 == v14;
            v26 = v24 > v14;
            if (!v92)
              v25 = v26;
          }
          while (!v25);
        }
        v8 = v21;
        if (v21 < v22)
        {
          v31 = v22;
          do
          {
            v165 = *v8;
            *v8 = *v31;
            *v31 = v165;
            do
            {
              v32 = v8[1].n128_u64[0];
              v33 = v8[1].n128_u64[1];
              ++v8;
              v34 = v32 > v13;
              v92 = v33 == v14;
              v35 = v33 > v14;
              if (!v92)
                v34 = v35;
            }
            while (v34);
            do
            {
              v36 = v31[-1].n128_u64[0];
              v37 = v31[-1].n128_u64[1];
              --v31;
              v38 = v36 > v13;
              v92 = v37 == v14;
              v39 = v37 > v14;
              if (!v92)
                v38 = v39;
            }
            while (!v38);
          }
          while (v8 < v31);
        }
        if (&v8[-1] != a1)
          *a1 = v8[-1];
        v8[-1].n128_u64[0] = v13;
        v8[-1].n128_u64[1] = v14;
        if (v21 < v22)
        {
LABEL_42:
          sub_1C57603DC(a1, &v8[-1], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v40 = sub_1C5760DC4(a1, v8 - 1);
        if (!sub_1C5760DC4(v8, a2))
        {
          if (v40)
            continue;
          goto LABEL_42;
        }
        a2 = v8 - 1;
        if (!v40)
          goto LABEL_1;
        return;
    }
  }
}

  v161 = a2 - 112;
  v165 = a2;
  v159 = a2 - 336;
  v160 = a2 - 224;
  v6 = a1;
  while (2)
  {
    a1 = v6;
    v7 = v165 - v6;
    v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v165 - v6) >> 4);
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v60 = (uint64_t *)(v165 - 16);
        v61 = (uint64_t *)(a1 + 96);
        if (*(_DWORD *)(v165 - 16) < *(_DWORD *)(a1 + 96))
        {
          v62 = (_QWORD *)(v165 - 112);
          v173 = v177;
          v63 = *(double *)a1;
          if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
          {
            v174 = v177;
            v64 = *(unsigned int *)(a1 + 20);
            if ((_DWORD)v64)
              memmove(v177, *(const void **)(a1 + 8), 8 * v64);
          }
          else
          {
            v174 = *(_BYTE **)(a1 + 8);
            *(double *)(a1 + 8) = v63;
          }
          v175 = *(_QWORD *)(a1 + 16);
          v176 = *(_DWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = 8;
          *(_DWORD *)(a1 + 24) = 0;
          v65 = *v61;
          v179 = *(_BYTE *)(a1 + 104);
          v178 = v65;
          if (v62 != (_QWORD *)a1)
            llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(v165 - 112));
          v66 = *v60;
          *(_BYTE *)(a1 + 104) = *(_BYTE *)(v165 - 8);
          *v61 = v66;
          if (&v173 != v62)
            llvm::SmallPtrSetImplBase::MoveFrom(v165 - 112, 8, (double *)&v173);
          v67 = v178;
          *(_BYTE *)(v165 - 8) = v179;
          *v60 = v67;
          goto LABEL_104;
        }
        return;
      case 3uLL:
        sub_1C57DB870(v6, v6 + 112, v161);
        return;
      case 4uLL:
        sub_1C57DC3B4(v6, v6 + 112, v6 + 224, v161);
        return;
      case 5uLL:
        v68 = (_QWORD *)(v6 + 336);
        sub_1C57DC3B4(v6, v6 + 112, v6 + 224, v6 + 336);
        v69 = (uint64_t *)(v165 - 16);
        if (*(_DWORD *)(v165 - 16) < *(_DWORD *)(a1 + 432))
        {
          v70 = (_QWORD *)(v165 - 112);
          v71 = (uint64_t *)(a1 + 432);
          v173 = v177;
          v73 = *(const void **)(a1 + 336);
          v72 = *(const void **)(a1 + 344);
          if (v72 == v73)
          {
            v174 = v177;
            v74 = *(unsigned int *)(a1 + 356);
            if ((_DWORD)v74)
              memmove(v177, v72, 8 * v74);
          }
          else
          {
            v174 = *(_BYTE **)(a1 + 344);
            *(_QWORD *)(a1 + 344) = v73;
          }
          v175 = *(_QWORD *)(a1 + 352);
          v176 = *(_DWORD *)(a1 + 360);
          *(_QWORD *)(a1 + 352) = 8;
          *(_DWORD *)(a1 + 360) = 0;
          v178 = *v71;
          v179 = *(_BYTE *)(a1 + 440);
          if (v70 != v68)
            llvm::SmallPtrSetImplBase::MoveFrom(a1 + 336, 8, (double *)(v165 - 112));
          v75 = *v69;
          *(_BYTE *)(a1 + 440) = *(_BYTE *)(v165 - 8);
          *v71 = v75;
          if (&v173 != v70)
            llvm::SmallPtrSetImplBase::MoveFrom(v165 - 112, 8, (double *)&v173);
          v76 = v178;
          *(_BYTE *)(v165 - 8) = v179;
          *v69 = v76;
          if (v174 != v173)
            free(v174);
          if (*(_DWORD *)(a1 + 432) < *(_DWORD *)(a1 + 320))
          {
            v77 = (uint64_t *)(a1 + 320);
            v173 = v177;
            v79 = *(const void **)(a1 + 224);
            v78 = *(const void **)(a1 + 232);
            if (v78 == v79)
            {
              v174 = v177;
              v80 = *(unsigned int *)(a1 + 244);
              if ((_DWORD)v80)
                memmove(v177, v78, 8 * v80);
            }
            else
            {
              v174 = *(_BYTE **)(a1 + 232);
              *(_QWORD *)(a1 + 232) = v79;
            }
            v175 = *(_QWORD *)(a1 + 240);
            v176 = *(_DWORD *)(a1 + 248);
            *(_QWORD *)(a1 + 240) = 8;
            *(_DWORD *)(a1 + 248) = 0;
            v178 = *v77;
            v179 = *(_BYTE *)(a1 + 328);
            llvm::SmallPtrSetImplBase::MoveFrom(a1 + 224, 8, (double *)(a1 + 336));
            *v77 = *v71;
            *(_BYTE *)(a1 + 328) = *(_BYTE *)(a1 + 440);
            if (&v173 != v68)
              llvm::SmallPtrSetImplBase::MoveFrom(a1 + 336, 8, (double *)&v173);
            *v71 = v178;
            *(_BYTE *)(a1 + 440) = v179;
            if (v174 != v173)
              free(v174);
            v81 = (uint64_t *)(a1 + 208);
            if (*(_DWORD *)(a1 + 320) < *(_DWORD *)(a1 + 208))
            {
              v173 = v177;
              v83 = *(const void **)(a1 + 112);
              v82 = *(const void **)(a1 + 120);
              if (v82 == v83)
              {
                v174 = v177;
                v84 = *(unsigned int *)(a1 + 132);
                if ((_DWORD)v84)
                  memmove(v177, v82, 8 * v84);
              }
              else
              {
                v174 = *(_BYTE **)(a1 + 120);
                *(_QWORD *)(a1 + 120) = v83;
              }
              v175 = *(_QWORD *)(a1 + 128);
              v176 = *(_DWORD *)(a1 + 136);
              *(_QWORD *)(a1 + 128) = 8;
              *(_DWORD *)(a1 + 136) = 0;
              v178 = *v81;
              v179 = *(_BYTE *)(a1 + 216);
              llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112, 8, (double *)(a1 + 224));
              *v81 = *v77;
              *(_BYTE *)(a1 + 216) = *(_BYTE *)(a1 + 328);
              if (&v173 != (_BYTE **)(a1 + 224))
                llvm::SmallPtrSetImplBase::MoveFrom(a1 + 224, 8, (double *)&v173);
              *v77 = v178;
              *(_BYTE *)(a1 + 328) = v179;
              if (v174 != v173)
                free(v174);
              v85 = (uint64_t *)(a1 + 96);
              if (*(_DWORD *)(a1 + 208) < *(_DWORD *)(a1 + 96))
              {
                v173 = v177;
                v86 = *(double *)a1;
                if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
                {
                  v174 = v177;
                  v87 = *(unsigned int *)(a1 + 20);
                  if ((_DWORD)v87)
                    memmove(v177, *(const void **)(a1 + 8), 8 * v87);
                }
                else
                {
                  v174 = *(_BYTE **)(a1 + 8);
                  *(double *)(a1 + 8) = v86;
                }
                v175 = *(_QWORD *)(a1 + 16);
                v176 = *(_DWORD *)(a1 + 24);
                *(_QWORD *)(a1 + 16) = 8;
                *(_DWORD *)(a1 + 24) = 0;
                v88 = *v85;
                v179 = *(_BYTE *)(a1 + 104);
                v178 = v88;
                llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(a1 + 112));
                *v85 = *v81;
                *(_BYTE *)(a1 + 104) = *(_BYTE *)(a1 + 216);
                if (&v173 != (_BYTE **)(a1 + 112))
                  llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112, 8, (double *)&v173);
                *v81 = v178;
                *(_BYTE *)(a1 + 216) = v179;
LABEL_104:
                if (v174 != v173)
                  free(v174);
              }
            }
          }
        }
        return;
      default:
        if (v7 > 2687)
        {
          if (!a3)
          {
            if (v6 != v165)
            {
              v101 = (v8 - 2) >> 1;
              v102 = v101;
              do
              {
                v103 = v102;
                if (v101 >= v102)
                {
                  v104 = (2 * v102) | 1;
                  v105 = v6 + 112 * v104;
                  if (2 * v102 + 2 < (uint64_t)v8)
                  {
                    v106 = *(_DWORD *)(v6 + 112 * v104 + 96);
                    v107 = *(_DWORD *)(v105 + 208);
                    v105 += 112 * (v106 < v107);
                    if (v106 < v107)
                      v104 = 2 * v102 + 2;
                  }
                  v108 = v6 + 112 * v102;
                  v110 = *(_DWORD *)(v108 + 96);
                  v109 = v108 + 96;
                  if (*(_DWORD *)(v105 + 96) >= v110)
                  {
                    v111 = v6 + 112 * v102;
                    v173 = v177;
                    v113 = *(_QWORD *)v111;
                    v112 = *(const void **)(v111 + 8);
                    if (v112 == *(const void **)v111)
                    {
                      v174 = v177;
                      v114 = *(unsigned int *)(v111 + 20);
                      if ((_DWORD)v114)
                        memmove(v177, v112, 8 * v114);
                    }
                    else
                    {
                      v174 = *(_BYTE **)(v111 + 8);
                      *(_QWORD *)(v111 + 8) = v113;
                      LODWORD(v114) = *(_DWORD *)(v111 + 20);
                    }
                    LODWORD(v175) = *(_DWORD *)(v111 + 16);
                    HIDWORD(v175) = v114;
                    v176 = *(_DWORD *)(v111 + 24);
                    *(_QWORD *)(v111 + 16) = 8;
                    *(_DWORD *)(v111 + 24) = 0;
                    v115 = *(_QWORD *)v109;
                    v179 = *(_BYTE *)(v109 + 8);
                    v178 = v115;
                    do
                    {
                      v116 = v105;
                      if (v105 != v111)
                        llvm::SmallPtrSetImplBase::MoveFrom(v111, 8, (double *)v105);
                      v117 = *(_QWORD *)(v105 + 96);
                      *(_BYTE *)(v111 + 104) = *(_BYTE *)(v105 + 104);
                      *(_QWORD *)(v111 + 96) = v117;
                      if (v101 < v104)
                        break;
                      v118 = (2 * v104) | 1;
                      v105 = v6 + 112 * v118;
                      if (2 * v104 + 2 < (uint64_t)v8)
                      {
                        v119 = *(_DWORD *)(v6 + 112 * v118 + 96);
                        v120 = *(_DWORD *)(v105 + 208);
                        v105 += 112 * (v119 < v120);
                        if (v119 < v120)
                          v118 = 2 * v104 + 2;
                      }
                      v111 = v116;
                      v104 = v118;
                    }
                    while (*(_DWORD *)(v105 + 96) >= v178);
                    if (&v173 != (_BYTE **)v116)
                      llvm::SmallPtrSetImplBase::MoveFrom(v116, 8, (double *)&v173);
                    v121 = v178;
                    *(_BYTE *)(v116 + 104) = v179;
                    *(_QWORD *)(v116 + 96) = v121;
                    if (v174 != v173)
                      free(v174);
                  }
                }
                v102 = v103 - 1;
              }
              while (v103);
              v163 = (uint64_t *)(v6 + 96);
              v122 = (double *)v165;
              do
              {
                v166 = v170;
                v123 = *(double *)a1;
                v124 = v122;
                if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
                {
                  v167 = v170;
                  v125 = *(unsigned int *)(a1 + 20);
                  if ((_DWORD)v125)
                    memmove(v170, *(const void **)(a1 + 8), 8 * v125);
                }
                else
                {
                  v167 = *(_BYTE **)(a1 + 8);
                  *(double *)(a1 + 8) = v123;
                }
                v126 = 0;
                v168 = *(_QWORD *)(a1 + 16);
                v169 = *(_DWORD *)(a1 + 24);
                *(_QWORD *)(a1 + 16) = 8;
                *(_DWORD *)(a1 + 24) = 0;
                v127 = *v163;
                v172 = *(_BYTE *)(a1 + 104);
                v171 = v127;
                v128 = a1;
                do
                {
                  v129 = v126 + 1;
                  v130 = v128 + 112 * (v126 + 1);
                  v131 = 2 * v126;
                  v126 = (2 * v126) | 1;
                  v132 = v131 + 2;
                  if (v131 + 2 < (uint64_t)v8)
                  {
                    v133 = *(_DWORD *)(v128 + 112 * v129 + 96);
                    v134 = *(_DWORD *)(v130 + 208);
                    v130 += 112 * (v133 < v134);
                    if (v133 < v134)
                      v126 = v132;
                  }
                  if (v130 != v128)
                    llvm::SmallPtrSetImplBase::MoveFrom(v128, 8, (double *)v130);
                  v136 = (uint64_t *)(v130 + 96);
                  v135 = *(_QWORD *)(v130 + 96);
                  *(_BYTE *)(v128 + 104) = *(_BYTE *)(v130 + 104);
                  *(_QWORD *)(v128 + 96) = v135;
                  v128 = v130;
                }
                while (v126 <= (uint64_t)((v8 - 2) >> 1));
                v122 = v124 - 14;
                if ((double *)v130 == v124 - 14)
                {
                  if (&v166 != (_BYTE **)v130)
                    llvm::SmallPtrSetImplBase::MoveFrom(v130, 8, (double *)&v166);
                  v150 = v171;
                  *(_BYTE *)(v130 + 104) = v172;
                  *v136 = v150;
                }
                else
                {
                  llvm::SmallPtrSetImplBase::MoveFrom(v130, 8, v124 - 14);
                  v138 = *((_QWORD *)v124 - 2);
                  v137 = v124 - 2;
                  *(_BYTE *)(v130 + 104) = *((_BYTE *)v137 + 8);
                  *v136 = v138;
                  if (&v166 != (_BYTE **)v122)
                    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v122, 8, (double *)&v166);
                  v139 = v171;
                  *((_BYTE *)v137 + 8) = v172;
                  *(_QWORD *)v137 = v139;
                  v140 = v130 + 112 - a1;
                  if (v140 >= 113)
                  {
                    v141 = (unint64_t)(((((unint64_t)v140 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                            - 2) >> 1;
                    if (*(_DWORD *)(a1 + 112 * v141 + 96) < *(_DWORD *)v136)
                    {
                      v173 = v177;
                      v142 = *(double *)v130;
                      if (*(_QWORD *)(v130 + 8) == *(_QWORD *)v130)
                      {
                        v174 = v177;
                        v143 = *(unsigned int *)(v130 + 20);
                        if ((_DWORD)v143)
                          memmove(v177, *(const void **)(v130 + 8), 8 * v143);
                      }
                      else
                      {
                        v174 = *(_BYTE **)(v130 + 8);
                        *(double *)(v130 + 8) = v142;
                      }
                      v175 = *(_QWORD *)(v130 + 16);
                      v176 = *(_DWORD *)(v130 + 24);
                      *(_QWORD *)(v130 + 16) = 8;
                      *(_DWORD *)(v130 + 24) = 0;
                      v144 = *v136;
                      v179 = *(_BYTE *)(v130 + 104);
                      v178 = v144;
                      do
                      {
                        v145 = (_QWORD *)(a1 + 112 * v141);
                        if (v145 != (_QWORD *)v130)
                          llvm::SmallPtrSetImplBase::MoveFrom(v130, 8, (double *)(a1 + 112 * v141));
                        v146 = a1 + 112 * v141;
                        v148 = *(_QWORD *)(v146 + 96);
                        v147 = v146 + 96;
                        *(_BYTE *)(v130 + 104) = *(_BYTE *)(v147 + 8);
                        *(_QWORD *)(v130 + 96) = v148;
                        if (!v141)
                          break;
                        v141 = (v141 - 1) >> 1;
                        v130 = (uint64_t)v145;
                      }
                      while (*(_DWORD *)(a1 + 112 * v141 + 96) < v178);
                      if (&v173 != v145)
                        llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v145, 8, (double *)&v173);
                      v149 = v178;
                      *(_BYTE *)(v147 + 8) = v179;
                      *(_QWORD *)v147 = v149;
                      if (v174 != v173)
                        free(v174);
                    }
                  }
                }
                if (v167 != v166)
                  free(v167);
              }
              while ((uint64_t)v8-- > 2);
            }
            return;
          }
          v9 = v8 >> 1;
          if ((unint64_t)v7 < 0x3801)
          {
            sub_1C57DB870(v6 + 112 * (v8 >> 1), v6, v161);
            v17 = v165;
          }
          else
          {
            sub_1C57DB870(v6, v6 + 112 * (v8 >> 1), v161);
            sub_1C57DB870(v6 + 112, 112 * v9 + v6 - 112, v160);
            sub_1C57DB870(v6 + 224, v6 + 112 + 112 * v9, v159);
            sub_1C57DB870(112 * v9 + v6 - 112, v6 + 112 * (v8 >> 1), v6 + 112 + 112 * v9);
            v173 = v177;
            v10 = *(_QWORD *)v6;
            if (*(_QWORD *)(v6 + 8) == *(_QWORD *)v6)
            {
              v174 = v177;
              v11 = *(unsigned int *)(v6 + 20);
              if ((_DWORD)v11)
                memmove(v177, *(const void **)(v6 + 8), 8 * v11);
            }
            else
            {
              v174 = *(_BYTE **)(v6 + 8);
              *(_QWORD *)(v6 + 8) = v10;
            }
            v12 = *(_QWORD *)(v6 + 96);
            v175 = *(_QWORD *)(v6 + 16);
            v176 = *(_DWORD *)(v6 + 24);
            *(_QWORD *)(v6 + 16) = 8;
            *(_DWORD *)(v6 + 24) = 0;
            v179 = *(_BYTE *)(v6 + 104);
            v178 = v12;
            if (v8 >= 2)
              llvm::SmallPtrSetImplBase::MoveFrom(v6, 8, (double *)(v6 + 112 * (v8 >> 1)));
            v13 = v6 + 112 * v9;
            v15 = *(_QWORD *)(v13 + 96);
            v14 = v13 + 96;
            *(_BYTE *)(v6 + 104) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)(v6 + 96) = v15;
            if (&v173 != (_BYTE **)(v6 + 112 * (v8 >> 1)))
              llvm::SmallPtrSetImplBase::MoveFrom(v6 + 112 * (v8 >> 1), 8, (double *)&v173);
            v16 = v178;
            *(_BYTE *)(v14 + 8) = v179;
            *(_QWORD *)v14 = v16;
            if (v174 != v173)
              free(v174);
            v17 = v165;
          }
          --a3;
          if ((a4 & 1) == 0 && *(_DWORD *)(v6 - 16) >= *(_DWORD *)(v6 + 96))
          {
            v166 = v170;
            v42 = *(_QWORD *)v6;
            if (*(_QWORD *)(v6 + 8) == *(_QWORD *)v6)
            {
              v167 = v170;
              v43 = *(unsigned int *)(v6 + 20);
              if ((_DWORD)v43)
                memmove(v170, *(const void **)(v6 + 8), 8 * v43);
            }
            else
            {
              v167 = *(_BYTE **)(v6 + 8);
              *(_QWORD *)(v6 + 8) = v42;
            }
            v168 = *(_QWORD *)(v6 + 16);
            v169 = *(_DWORD *)(v6 + 24);
            *(_QWORD *)(v6 + 16) = 8;
            *(_DWORD *)(v6 + 24) = 0;
            v44 = *(_QWORD *)(v6 + 96);
            v172 = *(_BYTE *)(v6 + 104);
            v171 = v44;
            if (v44 >= *(_DWORD *)(v17 - 16))
            {
              v47 = v6 + 112;
              do
              {
                v6 = v47;
                if (v47 >= v165)
                  break;
                v47 += 112;
              }
              while (v171 >= *(_DWORD *)(v6 + 96));
            }
            else
            {
              v45 = v6;
              do
              {
                v6 = v45 + 112;
                v46 = *(_DWORD *)(v45 + 208);
                v45 += 112;
              }
              while (v171 >= v46);
            }
            v48 = v165;
            if (v6 < v165)
            {
              v49 = v165;
              do
              {
                v48 = v49 - 112;
                v50 = *(_DWORD *)(v49 - 16);
                v49 -= 112;
              }
              while (v171 < v50);
            }
            while (v6 < v48)
            {
              v173 = v177;
              v51 = *(_QWORD *)v6;
              if (*(_QWORD *)(v6 + 8) == *(_QWORD *)v6)
              {
                v174 = v177;
                v52 = *(unsigned int *)(v6 + 20);
                if ((_DWORD)v52)
                  memmove(v177, *(const void **)(v6 + 8), 8 * v52);
              }
              else
              {
                v174 = *(_BYTE **)(v6 + 8);
                *(_QWORD *)(v6 + 8) = v51;
              }
              v175 = *(_QWORD *)(v6 + 16);
              v176 = *(_DWORD *)(v6 + 24);
              *(_QWORD *)(v6 + 16) = 8;
              *(_DWORD *)(v6 + 24) = 0;
              v53 = *(_QWORD *)(v6 + 96);
              v179 = *(_BYTE *)(v6 + 104);
              v178 = v53;
              llvm::SmallPtrSetImplBase::MoveFrom(v6, 8, (double *)v48);
              v54 = *(_QWORD *)(v48 + 96);
              *(_BYTE *)(v6 + 104) = *(_BYTE *)(v48 + 104);
              *(_QWORD *)(v6 + 96) = v54;
              if (&v173 != (_BYTE **)v48)
                llvm::SmallPtrSetImplBase::MoveFrom(v48, 8, (double *)&v173);
              v55 = v178;
              *(_BYTE *)(v48 + 104) = v179;
              *(_QWORD *)(v48 + 96) = v55;
              if (v174 != v173)
                free(v174);
              do
              {
                v56 = *(_DWORD *)(v6 + 208);
                v6 += 112;
              }
              while (v171 >= v56);
              do
              {
                v57 = *(_DWORD *)(v48 - 16);
                v48 -= 112;
              }
              while (v171 < v57);
            }
            if (v6 - 112 != a1)
            {
              llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(v6 - 112));
              v58 = *(_QWORD *)(v6 - 16);
              *(_BYTE *)(a1 + 104) = *(_BYTE *)(v6 - 8);
              *(_QWORD *)(a1 + 96) = v58;
            }
            if (&v166 != (_BYTE **)(v6 - 112))
              llvm::SmallPtrSetImplBase::MoveFrom(v6 - 112, 8, (double *)&v166);
            v59 = v171;
            *(_BYTE *)(v6 - 8) = v172;
            *(_QWORD *)(v6 - 16) = v59;
            if (v167 != v166)
              free(v167);
            goto LABEL_57;
          }
          v166 = v170;
          v18 = *(_QWORD *)v6;
          if (*(_QWORD *)(v6 + 8) == *(_QWORD *)v6)
          {
            v167 = v170;
            v19 = *(unsigned int *)(v6 + 20);
            if ((_DWORD)v19)
              memmove(v170, *(const void **)(v6 + 8), 8 * v19);
          }
          else
          {
            v167 = *(_BYTE **)(v6 + 8);
            *(_QWORD *)(v6 + 8) = v18;
          }
          v164 = a3;
          v20 = 0;
          v21 = *(_QWORD *)(v6 + 96);
          v168 = *(_QWORD *)(v6 + 16);
          v169 = *(_DWORD *)(v6 + 24);
          *(_QWORD *)(v6 + 16) = 8;
          *(_DWORD *)(v6 + 24) = 0;
          v172 = *(_BYTE *)(v6 + 104);
          v171 = v21;
          do
          {
            v22 = *(_DWORD *)(v6 + v20 + 208);
            v20 += 112;
          }
          while (v22 < v171);
          v23 = v6 + v20;
          v24 = v17;
          if (v20 == 112)
          {
            v27 = v17;
            while (v23 < v27)
            {
              v25 = v27 - 112;
              v28 = *(_DWORD *)(v27 - 16);
              v27 -= 112;
              if (v28 < v171)
                goto LABEL_32;
            }
            v25 = v27;
          }
          else
          {
            do
            {
              v25 = v24 - 112;
              v26 = *(_DWORD *)(v24 - 16);
              v24 -= 112;
            }
            while (v26 >= v171);
          }
LABEL_32:
          v6 = v23;
          if (v23 < v25)
          {
            v29 = v25;
            do
            {
              v173 = v177;
              v31 = *(_QWORD *)v6;
              v30 = *(const void **)(v6 + 8);
              if (v30 == *(const void **)v6)
              {
                v174 = v177;
                v32 = *(unsigned int *)(v6 + 20);
                if ((_DWORD)v32)
                  memmove(v177, v30, 8 * v32);
              }
              else
              {
                v174 = *(_BYTE **)(v6 + 8);
                *(_QWORD *)(v6 + 8) = v31;
              }
              v175 = *(_QWORD *)(v6 + 16);
              v176 = *(_DWORD *)(v6 + 24);
              *(_QWORD *)(v6 + 16) = 8;
              *(_DWORD *)(v6 + 24) = 0;
              v33 = *(_QWORD *)(v6 + 96);
              v179 = *(_BYTE *)(v6 + 104);
              v178 = v33;
              llvm::SmallPtrSetImplBase::MoveFrom(v6, 8, (double *)v29);
              v34 = *(_QWORD *)(v29 + 96);
              *(_BYTE *)(v6 + 104) = *(_BYTE *)(v29 + 104);
              *(_QWORD *)(v6 + 96) = v34;
              if (&v173 != (_BYTE **)v29)
                llvm::SmallPtrSetImplBase::MoveFrom(v29, 8, (double *)&v173);
              v35 = v178;
              *(_BYTE *)(v29 + 104) = v179;
              *(_QWORD *)(v29 + 96) = v35;
              if (v174 != v173)
                free(v174);
              do
              {
                v36 = *(_DWORD *)(v6 + 208);
                v6 += 112;
              }
              while (v36 < v171);
              do
              {
                v37 = *(_DWORD *)(v29 - 16);
                v29 -= 112;
              }
              while (v37 >= v171);
            }
            while (v6 < v29);
          }
          if (v6 - 112 != a1)
          {
            llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(v6 - 112));
            v38 = *(_QWORD *)(v6 - 16);
            *(_BYTE *)(a1 + 104) = *(_BYTE *)(v6 - 8);
            *(_QWORD *)(a1 + 96) = v38;
          }
          if (&v166 != (_BYTE **)(v6 - 112))
            llvm::SmallPtrSetImplBase::MoveFrom(v6 - 112, 8, (double *)&v166);
          v39 = v171;
          *(_BYTE *)(v6 - 8) = v172;
          *(_QWORD *)(v6 - 16) = v39;
          if (v167 != v166)
            free(v167);
          v40 = v23 >= v25;
          a3 = v164;
          if (!v40)
            goto LABEL_56;
          v41 = sub_1C57DBD04(a1, v6 - 112);
          if (!sub_1C57DBD04(v6, v165))
          {
            if (v41)
              continue;
LABEL_56:
            sub_1C57DA57C(a1, v6 - 112, v164, a4 & 1);
LABEL_57:
            a4 = 0;
            continue;
          }
          a2 = v6 - 112;
          if (v41)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (v6 != v165)
          {
            v89 = v6 + 112;
            if (v6 + 112 != v165)
            {
              v90 = 0;
              v91 = v6;
              do
              {
                v92 = v91;
                v91 = v89;
                v94 = *(_DWORD *)(v92 + 208);
                v93 = (uint64_t *)(v92 + 208);
                if (v94 < *((_DWORD *)v93 - 28))
                {
                  v173 = v177;
                  v95 = *(_QWORD *)v89;
                  if (*(_QWORD *)(v89 + 8) == *(_QWORD *)v89)
                  {
                    v174 = v177;
                    v96 = *(unsigned int *)(v89 + 20);
                    if ((_DWORD)v96)
                      memmove(v177, *(const void **)(v91 + 8), 8 * v96);
                  }
                  else
                  {
                    v174 = *(_BYTE **)(v89 + 8);
                    *(_QWORD *)(v89 + 8) = v95;
                  }
                  v175 = *(_QWORD *)(v91 + 16);
                  v176 = *(_DWORD *)(v91 + 24);
                  *(_QWORD *)(v91 + 16) = 8;
                  *(_DWORD *)(v91 + 24) = 0;
                  v178 = *v93;
                  v179 = *((_BYTE *)v93 + 8);
                  v97 = v90;
                  while (1)
                  {
                    v98 = v6 + v97;
                    llvm::SmallPtrSetImplBase::MoveFrom(v6 + v97 + 112, 8, (double *)(v6 + v97));
                    *(_QWORD *)(v98 + 208) = *(_QWORD *)(v98 + 96);
                    *(_BYTE *)(v98 + 216) = *(_BYTE *)(v98 + 104);
                    if (!v97)
                      break;
                    v97 -= 112;
                    if (v178 >= *(_DWORD *)(v98 - 16))
                    {
                      v99 = (_QWORD *)(v6 + v97 + 112);
                      goto LABEL_154;
                    }
                  }
                  v99 = (_QWORD *)v6;
LABEL_154:
                  if (&v173 != v99)
                    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v99, 8, (double *)&v173);
                  v100 = v178;
                  *(_BYTE *)(v98 + 104) = v179;
                  *(_QWORD *)(v98 + 96) = v100;
                  if (v174 != v173)
                    free(v174);
                }
                v89 = v91 + 112;
                v90 += 112;
              }
              while (v91 + 112 != v165);
            }
          }
        }
        else if (v6 != v165)
        {
          v152 = v6 + 112;
          if (v6 + 112 != v165)
          {
            do
            {
              v153 = v152;
              if (*(_DWORD *)(a1 + 208) < *(_DWORD *)(a1 + 96))
              {
                v173 = v177;
                v154 = *(_QWORD *)v152;
                if (*(_QWORD *)(v152 + 8) == *(_QWORD *)v152)
                {
                  v174 = v177;
                  v155 = *(unsigned int *)(v152 + 20);
                  if ((_DWORD)v155)
                    memmove(v177, *(const void **)(v153 + 8), 8 * v155);
                }
                else
                {
                  v174 = *(_BYTE **)(v152 + 8);
                  *(_QWORD *)(v152 + 8) = v154;
                }
                v175 = *(_QWORD *)(v153 + 16);
                v176 = *(_DWORD *)(v153 + 24);
                *(_QWORD *)(v153 + 16) = 8;
                *(_DWORD *)(v153 + 24) = 0;
                v178 = *(_QWORD *)(a1 + 208);
                v179 = *(_BYTE *)(a1 + 216);
                do
                {
                  llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112, 8, (double *)a1);
                  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a1 + 104);
                  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 96);
                  v156 = a1 - 112;
                  v157 = *(_DWORD *)(a1 - 16);
                  a1 -= 112;
                }
                while (v178 < v157);
                if ((_BYTE **)(v156 + 112) != &v173)
                  llvm::SmallPtrSetImplBase::MoveFrom(v156 + 112, 8, (double *)&v173);
                v158 = v178;
                *(_BYTE *)(v156 + 216) = v179;
                *(_QWORD *)(v156 + 208) = v158;
                if (v174 != v173)
                  free(v174);
              }
              v152 = v153 + 112;
              a1 = v153;
            }
            while (v153 + 112 != v165);
          }
        }
        return;
    }
  }
}

  v8 = (__n128 *)((char *)a2 - 24);
  v93 = a2 - 3;
  v94 = a2;
  v9 = &a2[-5].n128_u64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (llvm::MachObjectWriter::MachSymbolData::operator<(v8, a1))
        {
          v42 = *a1;
          v98 = a1[1].n128_u64[0];
          v97 = v42;
          v43 = *v8;
          a1[1].n128_u64[0] = v8[1].n128_u64[0];
          *a1 = v43;
          v44 = v97;
          v8[1].n128_u64[0] = v98;
          *v8 = v44;
        }
        return;
      case 3:
        sub_1C5960D78(a1, &a1[1].n128_u64[1], v8);
        return;
      case 4:
        sub_1C5961058(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, v8);
        return;
      case 5:
        sub_1C5961124(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], v8);
        return;
      default:
        if (v11 <= 575)
        {
          v45 = (__n128 *)((char *)a1 + 24);
          v46 = a1 == a2 || v45 == a2;
          v47 = v46;
          if ((a4 & 1) != 0)
          {
            if ((v47 & 1) == 0)
            {
              v48 = 0;
              v49 = a1;
              do
              {
                v50 = v49;
                v49 = v45;
                if (llvm::MachObjectWriter::MachSymbolData::operator<(v45, v50))
                {
                  v51 = *v49;
                  v98 = v49[1].n128_u64[0];
                  v97 = v51;
                  v52 = v48;
                  while (1)
                  {
                    v53 = (char *)a1 + v52;
                    *(__n128 *)(v53 + 24) = *(__n128 *)((char *)a1 + v52);
                    *((_QWORD *)v53 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v52);
                    if (!v52)
                      break;
                    v52 -= 24;
                    if (!llvm::MachObjectWriter::MachSymbolData::operator<(&v97, (unint64_t *)((char *)a1->n128_u64 + v52)))
                    {
                      v54 = (uint64_t)&a1[1].n128_i64[1] + v52;
                      goto LABEL_73;
                    }
                  }
                  v54 = (uint64_t)a1;
LABEL_73:
                  v55 = v97;
                  *(_QWORD *)(v54 + 16) = v98;
                  *(__n128 *)v54 = v55;
                  a2 = v94;
                }
                v45 = (__n128 *)((char *)v49 + 24);
                v48 += 24;
              }
              while (&v49[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if ((v47 & 1) == 0)
          {
            v87 = &a1[-2].n128_i8[8];
            do
            {
              v88 = a1;
              a1 = v45;
              if (llvm::MachObjectWriter::MachSymbolData::operator<(v45, v88))
              {
                v89 = *a1;
                v98 = a1[1].n128_u64[0];
                v97 = v89;
                v90 = v87;
                do
                {
                  *((_OWORD *)v90 + 3) = *(_OWORD *)(v90 + 24);
                  *((_QWORD *)v90 + 8) = *((_QWORD *)v90 + 5);
                  v91 = llvm::MachObjectWriter::MachSymbolData::operator<(&v97, v90);
                  v90 -= 24;
                }
                while (v91);
                v92 = v97;
                *((_QWORD *)v90 + 8) = v98;
                *((__n128 *)v90 + 3) = v92;
              }
              v45 = (__n128 *)((char *)a1 + 24);
              v87 += 24;
            }
            while (&a1[1].n128_i8[8] != (__int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v56 = (unint64_t)(v12 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = &a1->n128_u64[3 * v59];
                if (2 * v57 + 2 < v12
                  && llvm::MachObjectWriter::MachSymbolData::operator<(&a1->n128_u64[3 * v59], v60 + 3))
                {
                  v60 += 3;
                  v59 = 2 * v58 + 2;
                }
                v61 = &a1->n128_u64[3 * v58];
                if (!llvm::MachObjectWriter::MachSymbolData::operator<(v60, v61))
                {
                  v62 = *(__n128 *)v61;
                  v98 = v61[2];
                  v97 = v62;
                  do
                  {
                    v63 = v60;
                    v64 = *(_OWORD *)v60;
                    v61[2] = v60[2];
                    *(_OWORD *)v61 = v64;
                    if (v56 < v59)
                      break;
                    v65 = (2 * v59) | 1;
                    v60 = &a1->n128_u64[3 * v65];
                    v66 = 2 * v59 + 2;
                    if (v66 < v12 && llvm::MachObjectWriter::MachSymbolData::operator<(&a1->n128_u64[3 * v65], v60 + 3))
                    {
                      v60 += 3;
                      v65 = v66;
                    }
                    v61 = v63;
                    v59 = v65;
                  }
                  while (!llvm::MachObjectWriter::MachSymbolData::operator<(v60, &v97));
                  v67 = v97;
                  v63[2] = v98;
                  *(__n128 *)v63 = v67;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v68 = v94;
            do
            {
              v69 = 0;
              v70 = *a1;
              v96 = a1[1].n128_u64[0];
              v95 = v70;
              v71 = a1;
              do
              {
                v72 = &v71[1].n128_i8[24 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 < v12
                  && llvm::MachObjectWriter::MachSymbolData::operator<(&v71[1].n128_u64[3 * v69 + 1], &v71[3].n128_u64[3 * v69]))
                {
                  v72 += 24;
                  v73 = v74;
                }
                v75 = *(__n128 *)v72;
                v71[1].n128_u64[0] = *((_QWORD *)v72 + 2);
                *v71 = v75;
                v71 = (__n128 *)v72;
                v69 = v73;
              }
              while (v73 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              v68 = (__n128 *)((char *)v68 - 24);
              if (v72 == (char *)v68)
              {
                v85 = v95;
                *((_QWORD *)v72 + 2) = v96;
                *(__n128 *)v72 = v85;
              }
              else
              {
                v76 = *v68;
                *((_QWORD *)v72 + 2) = v68[1].n128_u64[0];
                *(__n128 *)v72 = v76;
                v77 = v95;
                v68[1].n128_u64[0] = v96;
                *v68 = v77;
                v78 = v72 - (char *)a1 + 24;
                if (v78 >= 25)
                {
                  v79 = (v78 / 0x18uLL - 2) >> 1;
                  v80 = &a1->n128_u64[3 * v79];
                  if (llvm::MachObjectWriter::MachSymbolData::operator<(v80, v72))
                  {
                    v81 = *(__n128 *)v72;
                    v98 = *((_QWORD *)v72 + 2);
                    v97 = v81;
                    do
                    {
                      v82 = v80;
                      v83 = *(_OWORD *)v80;
                      *((_QWORD *)v72 + 2) = v80[2];
                      *(_OWORD *)v72 = v83;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &a1->n128_u64[3 * v79];
                      v72 = (char *)v82;
                    }
                    while (llvm::MachObjectWriter::MachSymbolData::operator<(v80, &v97));
                    v84 = v97;
                    v82[2] = v98;
                    *(__n128 *)v82 = v84;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (__n128 *)((char *)a1 + 24 * ((unint64_t)v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          sub_1C5960D78(v14, a1, v8);
        }
        else
        {
          sub_1C5960D78(a1, v14, v8);
          v15 = 3 * v13;
          sub_1C5960D78(&a1[1].n128_u64[1], (_QWORD *)&a1[-1] + v15 - 1, v93);
          sub_1C5960D78((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[v15 + 1], v9);
          sub_1C5960D78((_QWORD *)&a1[-1] + v15 - 1, v14, &a1[1].n128_u64[v15 + 1]);
          v16 = *a1;
          v98 = a1[1].n128_u64[0];
          v97 = v16;
          v17 = v14[1].n128_u64[0];
          *a1 = *v14;
          a1[1].n128_u64[0] = v17;
          v18 = v97;
          v14[1].n128_u64[0] = v98;
          *v14 = v18;
        }
        --a3;
        if ((a4 & 1) == 0 && !llvm::MachObjectWriter::MachSymbolData::operator<(&a1[-2].n128_u64[1], a1))
        {
          v32 = *a1;
          v96 = a1[1].n128_u64[0];
          v95 = v32;
          if (llvm::MachObjectWriter::MachSymbolData::operator<(&v95, v8))
          {
            v10 = a1;
            a2 = v94;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!llvm::MachObjectWriter::MachSymbolData::operator<(&v95, v10));
          }
          else
          {
            v33 = (__n128 *)((char *)a1 + 24);
            a2 = v94;
            do
            {
              v10 = v33;
              if (v33 >= v94)
                break;
              v34 = llvm::MachObjectWriter::MachSymbolData::operator<(&v95, v33);
              v33 = (__n128 *)((char *)v10 + 24);
            }
            while (!v34);
          }
          v35 = a2;
          if (v10 < a2)
          {
            v35 = a2;
            do
              v35 = (__n128 *)((char *)v35 - 24);
            while (llvm::MachObjectWriter::MachSymbolData::operator<(&v95, v35));
          }
          while (v10 < v35)
          {
            v36 = *v10;
            v98 = v10[1].n128_u64[0];
            v97 = v36;
            v37 = *v35;
            v10[1].n128_u64[0] = v35[1].n128_u64[0];
            *v10 = v37;
            v38 = v97;
            v35[1].n128_u64[0] = v98;
            *v35 = v38;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!llvm::MachObjectWriter::MachSymbolData::operator<(&v95, v10));
            do
              v35 = (__n128 *)((char *)v35 - 24);
            while (llvm::MachObjectWriter::MachSymbolData::operator<(&v95, v35));
          }
          v39 = (__n128 *)((char *)v10 - 24);
          if (&v10[-2].n128_i8[8] != (__int8 *)a1)
          {
            v40 = *v39;
            a1[1].n128_u64[0] = v10[-1].n128_u64[1];
            *a1 = v40;
          }
          a4 = 0;
          v41 = v95;
          v10[-1].n128_u64[1] = v96;
          *v39 = v41;
          continue;
        }
        v19 = 0;
        v20 = *a1;
        v96 = a1[1].n128_u64[0];
        v95 = v20;
        do
          v19 += 3;
        while (llvm::MachObjectWriter::MachSymbolData::operator<(&a1->n128_u64[v19], &v95));
        v21 = (__n128 *)((char *)a1 + v19 * 8);
        v22 = v94;
        v46 = v19 == 3;
        a2 = v94;
        if (v46)
        {
          v22 = v94;
          do
          {
            if (v21 >= v22)
              break;
            v22 = (__n128 *)((char *)v22 - 24);
          }
          while (!llvm::MachObjectWriter::MachSymbolData::operator<(v22, &v95));
        }
        else
        {
          do
            v22 = (__n128 *)((char *)v22 - 24);
          while (!llvm::MachObjectWriter::MachSymbolData::operator<(v22, &v95));
        }
        if (v21 >= v22)
        {
          v28 = (__n128 *)((char *)v21 - 24);
        }
        else
        {
          v23 = v21;
          v24 = v22;
          do
          {
            v25 = *v23;
            v98 = v23[1].n128_u64[0];
            v97 = v25;
            v26 = *v24;
            v23[1].n128_u64[0] = v24[1].n128_u64[0];
            *v23 = v26;
            v27 = v97;
            v24[1].n128_u64[0] = v98;
            *v24 = v27;
            do
              v23 = (__n128 *)((char *)v23 + 24);
            while (llvm::MachObjectWriter::MachSymbolData::operator<(v23, &v95));
            do
              v24 = (__n128 *)((char *)v24 - 24);
            while (!llvm::MachObjectWriter::MachSymbolData::operator<(v24, &v95));
          }
          while (v23 < v24);
          v28 = (__n128 *)((char *)v23 - 24);
        }
        if (v28 != a1)
        {
          v29 = *v28;
          a1[1].n128_u64[0] = v28[1].n128_u64[0];
          *a1 = v29;
        }
        v30 = v95;
        v28[1].n128_u64[0] = v96;
        *v28 = v30;
        if (v21 < v22)
        {
LABEL_31:
          sub_1C596050C(a1, v28, a3, a4 & 1);
          a4 = 0;
          v10 = (__n128 *)((char *)v28 + 24);
          continue;
        }
        v31 = sub_1C5960E94(a1, v28);
        v10 = (__n128 *)((char *)v28 + 24);
        if (!sub_1C5960E94((__n128 *)((char *)v28 + 24), v94))
        {
          if (v31)
            continue;
          goto LABEL_31;
        }
        a2 = v28;
        if (!v31)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(v8 + 16))
        {
          v116 = *(_QWORD *)(v8 + 16);
          v107 = *(_OWORD *)v8;
          v45 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v8 = v45;
          *(_QWORD *)(a2 - 8) = v116;
          *(_OWORD *)(a2 - 24) = v107;
        }
        return;
      case 3:
        sub_1C5976CB8((__int128 *)v8, (__int128 *)(v8 + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        sub_1C5977018(v8, v8 + 24, v8 + 48, a2 - 24);
        return;
      case 5:
        v46 = (__int128 *)(v8 + 24);
        v47 = (__int128 *)(v8 + 48);
        v48 = (__int128 *)(v8 + 72);
        sub_1C5977018(v8, v8 + 24, v8 + 48, v8 + 72);
        if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(v8 + 88))
        {
          v49 = *v48;
          v50 = *(_QWORD *)(v8 + 88);
          v51 = *(_QWORD *)(a2 - 8);
          *v48 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 88) = v51;
          *(_QWORD *)(a2 - 8) = v50;
          *(_OWORD *)(a2 - 24) = v49;
          if (*(_QWORD *)(v8 + 88) < *(_QWORD *)(v8 + 64))
          {
            v52 = *(_QWORD *)(v8 + 64);
            v53 = *v47;
            *v47 = *v48;
            *(_QWORD *)(v8 + 64) = *(_QWORD *)(v8 + 88);
            *v48 = v53;
            *(_QWORD *)(v8 + 88) = v52;
            if (*(_QWORD *)(v8 + 64) < *(_QWORD *)(v8 + 40))
            {
              v54 = *(_QWORD *)(v8 + 40);
              v55 = *v46;
              *v46 = *v47;
              *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 64);
              *v47 = v55;
              *(_QWORD *)(v8 + 64) = v54;
              if (*(_QWORD *)(v8 + 40) < *(_QWORD *)(v8 + 16))
              {
                v117 = *(_QWORD *)(v8 + 16);
                v108 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v46;
                *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 40);
                *v46 = v108;
                *(_QWORD *)(v8 + 40) = v117;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 575)
        {
          v56 = (_OWORD *)(v8 + 24);
          v58 = v8 == a2 || v56 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = (_OWORD *)v8;
              do
              {
                v61 = *((_QWORD *)v60 + 5);
                v62 = *((_QWORD *)v60 + 2);
                v60 = v56;
                if (v61 < v62)
                {
                  v109 = *v56;
                  v63 = v59;
                  while (1)
                  {
                    v64 = v8 + v63;
                    *(_OWORD *)(v64 + 24) = *(_OWORD *)(v8 + v63);
                    *(_QWORD *)(v64 + 40) = *(_QWORD *)(v8 + v63 + 16);
                    if (!v63)
                      break;
                    v63 -= 24;
                    if (v61 >= *(_QWORD *)(v64 - 8))
                    {
                      v65 = v8 + v63 + 24;
                      goto LABEL_78;
                    }
                  }
                  v65 = v8;
LABEL_78:
                  *(_OWORD *)v65 = v109;
                  *(_QWORD *)(v65 + 16) = v61;
                }
                v56 = (_OWORD *)((char *)v60 + 24);
                v59 += 24;
              }
              while ((_OWORD *)((char *)v60 + 24) != (_OWORD *)a2);
            }
          }
          else if (!v58)
          {
            do
            {
              v97 = *(_QWORD *)(a1 + 40);
              v98 = *(_QWORD *)(a1 + 16);
              a1 = (uint64_t)v56;
              if (v97 < v98)
              {
                v112 = *v56;
                v99 = v56;
                do
                {
                  *v99 = *(_OWORD *)((char *)v99 - 24);
                  *((_QWORD *)v99 + 2) = *((_QWORD *)v99 - 1);
                  v100 = *((_QWORD *)v99 - 4);
                  v99 = (_OWORD *)((char *)v99 - 24);
                }
                while (v97 < v100);
                *v99 = v112;
                *((_QWORD *)v99 + 2) = v97;
              }
              v56 = (_OWORD *)(a1 + 24);
            }
            while (a1 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v66 = (unint64_t)(v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = v8 + 24 * v69;
                if (2 * v68 + 2 < v10)
                {
                  v71 = *(_QWORD *)(v8 + 24 * v69 + 16);
                  v72 = *(_QWORD *)(v70 + 40);
                  v70 += 24 * (v71 < v72);
                  if (v71 < v72)
                    v69 = 2 * v68 + 2;
                }
                v73 = *(_QWORD *)(v8 + 24 * v68 + 16);
                if (*(_QWORD *)(v70 + 16) >= v73)
                {
                  v74 = v8 + 24 * v68;
                  v110 = *(_OWORD *)v74;
                  do
                  {
                    v75 = v74;
                    v74 = v70;
                    v76 = *(_OWORD *)v70;
                    *(_QWORD *)(v75 + 16) = *(_QWORD *)(v70 + 16);
                    *(_OWORD *)v75 = v76;
                    if (v66 < v69)
                      break;
                    v77 = (2 * v69) | 1;
                    v70 = v8 + 24 * v77;
                    v78 = 2 * v69 + 2;
                    if (v78 < v10)
                    {
                      v79 = *(_QWORD *)(v8 + 24 * v77 + 16);
                      v80 = *(_QWORD *)(v70 + 40);
                      v70 += 24 * (v79 < v80);
                      if (v79 < v80)
                        v77 = v78;
                    }
                    v69 = v77;
                  }
                  while (*(_QWORD *)(v70 + 16) >= v73);
                  *(_OWORD *)v74 = v110;
                  *(_QWORD *)(v74 + 16) = v73;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            do
            {
              v81 = 0;
              v118 = *(_QWORD *)(v8 + 16);
              v111 = *(_OWORD *)v8;
              v82 = v8;
              do
              {
                v83 = v81 + 1;
                v84 = v82 + 24 * (v81 + 1);
                v85 = (2 * v81) | 1;
                v86 = 2 * v81 + 2;
                if (v86 < v10)
                {
                  v87 = *(_QWORD *)(v82 + 24 * v83 + 16);
                  v88 = *(_QWORD *)(v84 + 40);
                  v84 += 24 * (v87 < v88);
                  if (v87 < v88)
                    v85 = v86;
                }
                v89 = *(_OWORD *)v84;
                *(_QWORD *)(v82 + 16) = *(_QWORD *)(v84 + 16);
                *(_OWORD *)v82 = v89;
                v82 = v84;
                v81 = v85;
              }
              while (v85 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 24;
              if (v84 == a2)
              {
                *(_QWORD *)(v84 + 16) = v118;
                *(_OWORD *)v84 = v111;
              }
              else
              {
                v90 = *(_OWORD *)a2;
                *(_QWORD *)(v84 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v84 = v90;
                *(_QWORD *)(a2 + 16) = v118;
                *(_OWORD *)a2 = v111;
                v91 = v84 - v8 + 24;
                if (v91 >= 25)
                {
                  v92 = (v91 / 0x18uLL - 2) >> 1;
                  if (*(_QWORD *)(v8 + 24 * v92 + 16) < *(_QWORD *)(v84 + 16))
                  {
                    v103 = *(_OWORD *)v84;
                    v93 = *(_QWORD *)(v84 + 16);
                    do
                    {
                      v94 = v84;
                      v84 = v8 + 24 * v92;
                      v95 = *(_OWORD *)v84;
                      *(_QWORD *)(v94 + 16) = *(_QWORD *)(v84 + 16);
                      *(_OWORD *)v94 = v95;
                      if (!v92)
                        break;
                      v92 = (v92 - 1) >> 1;
                    }
                    while (*(_QWORD *)(v8 + 24 * v92 + 16) < v93);
                    *(_OWORD *)v84 = v103;
                    *(_QWORD *)(v84 + 16) = v93;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_1C5976CB8((__int128 *)(a1 + 24 * v11), (__int128 *)a1, (__int128 *)(a2 - 24));
        }
        else
        {
          sub_1C5976CB8((__int128 *)a1, (__int128 *)(a1 + 24 * v11), (__int128 *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (__int128 *)(a1 + 24 * v11 - 24);
          sub_1C5976CB8((__int128 *)(a1 + 24), v14, (__int128 *)(a2 - 48));
          v15 = (__int128 *)(a1 + 24 + 8 * v13);
          sub_1C5976CB8((__int128 *)(a1 + 48), v15, (__int128 *)(a2 - 72));
          sub_1C5976CB8(v14, (__int128 *)v12, v15);
          v113 = *(_QWORD *)(a1 + 16);
          v104 = *(_OWORD *)a1;
          v16 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v16;
          *(_QWORD *)(v12 + 16) = v113;
          *(_OWORD *)v12 = v104;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(_QWORD *)(a1 + 16);
          if (*(_QWORD *)(a1 - 8) < v17)
            goto LABEL_11;
          v102 = *(_OWORD *)a1;
          if (v17 >= *(_QWORD *)(a2 - 8))
          {
            v35 = a1 + 24;
            do
            {
              v8 = v35;
              if (v35 >= a2)
                break;
              v36 = *(_QWORD *)(v35 + 16);
              v35 += 24;
            }
            while (v17 >= v36);
          }
          else
          {
            v33 = a1;
            do
            {
              v8 = v33 + 24;
              v34 = *(_QWORD *)(v33 + 40);
              v33 += 24;
            }
            while (v17 >= v34);
          }
          v37 = a2;
          if (v8 < a2)
          {
            v38 = a2;
            do
            {
              v37 = v38 - 24;
              v39 = *(_QWORD *)(v38 - 8);
              v38 -= 24;
            }
            while (v17 < v39);
          }
          while (v8 < v37)
          {
            v115 = *(_QWORD *)(v8 + 16);
            v106 = *(_OWORD *)v8;
            v40 = *(_OWORD *)v37;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v37 + 16);
            *(_OWORD *)v8 = v40;
            *(_QWORD *)(v37 + 16) = v115;
            *(_OWORD *)v37 = v106;
            do
            {
              v41 = *(_QWORD *)(v8 + 40);
              v8 += 24;
            }
            while (v17 >= v41);
            do
            {
              v42 = *(_QWORD *)(v37 - 8);
              v37 -= 24;
            }
            while (v17 < v42);
          }
          v43 = (__int128 *)(v8 - 24);
          if (v8 - 24 != a1)
          {
            v44 = *v43;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v44;
          }
          a4 = 0;
          *v43 = v102;
          *(_QWORD *)(v8 - 8) = v17;
          continue;
        }
        v17 = *(_QWORD *)(a1 + 16);
LABEL_11:
        v18 = 0;
        v101 = *(_OWORD *)a1;
        do
        {
          v19 = *(_QWORD *)(a1 + v18 + 40);
          v18 += 24;
        }
        while (v19 < v17);
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 24)
        {
          v24 = a2;
          while (v20 < v24)
          {
            v22 = v24 - 24;
            v25 = *(_QWORD *)(v24 - 8);
            v24 -= 24;
            if (v25 < v17)
              goto LABEL_21;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = v21 - 24;
            v23 = *(_QWORD *)(v21 - 8);
            v21 -= 24;
          }
          while (v23 >= v17);
        }
LABEL_21:
        v8 = v20;
        if (v20 < v22)
        {
          v26 = v22;
          do
          {
            v114 = *(_QWORD *)(v8 + 16);
            v105 = *(_OWORD *)v8;
            v27 = *(_OWORD *)v26;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v26 + 16);
            *(_OWORD *)v8 = v27;
            *(_QWORD *)(v26 + 16) = v114;
            *(_OWORD *)v26 = v105;
            do
            {
              v28 = *(_QWORD *)(v8 + 40);
              v8 += 24;
            }
            while (v28 < v17);
            do
            {
              v29 = *(_QWORD *)(v26 - 8);
              v26 -= 24;
            }
            while (v29 >= v17);
          }
          while (v8 < v26);
        }
        v30 = (__int128 *)(v8 - 24);
        if (v8 - 24 != a1)
        {
          v31 = *v30;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v31;
        }
        *v30 = v101;
        *(_QWORD *)(v8 - 8) = v17;
        if (v20 < v22)
        {
LABEL_32:
          sub_1C5976404(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = sub_1C5976DA8(a1, v8 - 24);
        if (!sub_1C5976DA8(v8, a2))
        {
          if (v32)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 24;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (int8x8_t *)(a2 - 24);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v66 = *(int8x8_t *)(a2 - 24);
        v67 = (uint8x8_t)vcnt_s8(v66);
        v67.i16[0] = vaddlv_u8(v67);
        v68 = v67.i32[0];
        v69 = *(int8x8_t *)v9;
        v70 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v9);
        v70.i16[0] = vaddlv_u8(v70);
        if (v68 < v70.i32[0] || (*(_QWORD *)&v66 < *(_QWORD *)&v69 ? (v71 = v68 > v70.i32[0]) : (v71 = 1), !v71))
        {
          *(int8x8_t *)v9 = v66;
          *(int8x8_t *)(a2 - 24) = v69;
          v177 = *(_OWORD *)(v9 + 8);
          *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(a2 - 16) = v177;
        }
        return;
      case 3:
        sub_1C597D1A0(v9, v9 + 24, a2 - 24);
        return;
      case 4:
        sub_1C597D6C8(v9, v9 + 24, v9 + 48, a2 - 24);
        return;
      case 5:
        sub_1C597D6C8(v9, v9 + 24, v9 + 48, v9 + 72);
        v72 = *(int8x8_t *)(a2 - 24);
        v73 = (uint8x8_t)vcnt_s8(v72);
        v73.i16[0] = vaddlv_u8(v73);
        v74 = v73.i32[0];
        v75 = *(int8x8_t *)(v9 + 72);
        v76 = (uint8x8_t)vcnt_s8(v75);
        v76.i16[0] = vaddlv_u8(v76);
        if (v74 < v76.i32[0] || *(_QWORD *)&v72 < *(_QWORD *)&v75 && v74 <= v76.i32[0])
        {
          *(int8x8_t *)(v9 + 72) = v72;
          *(int8x8_t *)(a2 - 24) = v75;
          v77 = *(_OWORD *)(v9 + 80);
          *(_OWORD *)(v9 + 80) = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(a2 - 16) = v77;
          v78 = *(int8x8_t *)(v9 + 72);
          *(int8x8_t *)&v77 = vcnt_s8(v78);
          LOWORD(v77) = vaddlv_u8(*(uint8x8_t *)&v77);
          v79 = v77;
          v80 = *(int8x8_t *)(v9 + 48);
          v81 = (uint8x8_t)vcnt_s8(v80);
          v81.i16[0] = vaddlv_u8(v81);
          if (v79 < v81.i32[0] || *(_QWORD *)&v78 < *(_QWORD *)&v80 && v79 <= v81.i32[0])
          {
            *(int8x8_t *)(v9 + 48) = v78;
            *(int8x8_t *)(v9 + 72) = v80;
            v82 = *(_OWORD *)(v9 + 56);
            *(_OWORD *)(v9 + 56) = *(_OWORD *)(v9 + 80);
            *(_OWORD *)(v9 + 80) = v82;
            v83 = *(int8x8_t *)(v9 + 24);
            v84 = (uint8x8_t)vcnt_s8(v83);
            v84.i16[0] = vaddlv_u8(v84);
            if (v79 < v84.i32[0] || *(_QWORD *)&v78 < *(_QWORD *)&v83 && v79 <= v84.i32[0])
            {
              *(int8x8_t *)(v9 + 24) = v78;
              *(int8x8_t *)(v9 + 48) = v83;
              v85 = *(_OWORD *)(v9 + 32);
              *(_OWORD *)(v9 + 32) = *(_OWORD *)(v9 + 56);
              *(_OWORD *)(v9 + 56) = v85;
              v86 = *(int8x8_t *)v9;
              v87 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v9);
              v87.i16[0] = vaddlv_u8(v87);
              if (v79 < v87.i32[0] || *(_QWORD *)&v78 < *(_QWORD *)&v86 && v79 <= v87.i32[0])
              {
                *(int8x8_t *)v9 = v78;
                *(int8x8_t *)(v9 + 24) = v86;
                v178 = *(_OWORD *)(v9 + 8);
                *(_OWORD *)(v9 + 8) = *(_OWORD *)(v9 + 32);
                *(_OWORD *)(v9 + 32) = v178;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 575)
        {
          v88 = v9 + 24;
          v90 = v9 == a2 || v88 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v90)
            {
              v91 = 0;
              v92 = v9;
              do
              {
                v93 = v88;
                v94 = *(int8x8_t *)(v92 + 24);
                v95 = (uint8x8_t)vcnt_s8(v94);
                v95.i16[0] = vaddlv_u8(v95);
                v96 = v95.i32[0];
                v97 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v92);
                v97.i16[0] = vaddlv_u8(v97);
                if (v96 < v97.i32[0] || (*(_QWORD *)&v94 < *(_QWORD *)v92 ? (v98 = v96 > v97.i32[0]) : (v98 = 1), !v98))
                {
                  v179 = *(_OWORD *)(v92 + 32);
                  *(_QWORD *)(v92 + 24) = *(_QWORD *)v92;
                  *(_OWORD *)(v93 + 8) = *(_OWORD *)(v92 + 8);
                  if (v92 == v9)
                  {
                    v104 = (_OWORD *)(v92 + 8);
LABEL_152:
                    v105 = (_QWORD *)v9;
                  }
                  else
                  {
                    v99 = v91;
                    while (1)
                    {
                      v100 = v9 + v99;
                      v101 = *(int8x8_t *)(v9 + v99 - 24);
                      v102 = (uint8x8_t)vcnt_s8(v101);
                      v102.i16[0] = vaddlv_u8(v102);
                      if (v96 >= v102.i32[0] && (*(_QWORD *)&v94 >= *(_QWORD *)&v101 || v96 > v102.i32[0]))
                        break;
                      *(int8x8_t *)v100 = v101;
                      *(_OWORD *)(v100 + 8) = *(_OWORD *)(v100 - 16);
                      v99 -= 24;
                      if (!v99)
                      {
                        v104 = (_OWORD *)(v9 + 8);
                        goto LABEL_152;
                      }
                    }
                    v105 = (_QWORD *)(v9 + v99);
                    v104 = v105 + 1;
                  }
                  *v105 = v94;
                  *v104 = v179;
                }
                v88 = v93 + 24;
                v91 += 24;
                v92 = v93;
              }
              while (v93 + 24 != a2);
            }
          }
          else if (!v90)
          {
            v160 = v9 + 8;
            do
            {
              v161 = v88;
              v162 = *(int8x8_t *)(a1 + 24);
              v163 = (uint8x8_t)vcnt_s8(v162);
              v163.i16[0] = vaddlv_u8(v163);
              v164 = v163.i32[0];
              v165 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a1);
              v165.i16[0] = vaddlv_u8(v165);
              if (v164 < v165.i32[0]
                || (*(_QWORD *)&v162 < *(_QWORD *)a1 ? (v166 = v164 > v165.i32[0]) : (v166 = 1), !v166))
              {
                v182 = *(_OWORD *)(a1 + 32);
                v167 = *(int8x8_t *)a1;
                for (i = v160; ; i -= 24)
                {
                  *(int8x8_t *)(i + 16) = v167;
                  *(_OWORD *)(i + 24) = *(_OWORD *)i;
                  v167 = *(int8x8_t *)(i - 32);
                  v169 = (uint8x8_t)vcnt_s8(v167);
                  v169.i16[0] = vaddlv_u8(v169);
                  if (v164 >= v169.i32[0] && (*(_QWORD *)&v162 >= *(_QWORD *)&v167 || v164 > v169.i32[0]))
                    break;
                }
                *(int8x8_t *)(i - 8) = v162;
                *(_OWORD *)i = v182;
              }
              v88 = v161 + 24;
              v160 += 24;
              a1 = v161;
            }
            while (v161 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v106 = (unint64_t)(v11 - 2) >> 1;
            v107 = v106;
            do
            {
              v108 = v107;
              if (v106 >= v107)
              {
                v109 = (2 * v107) | 1;
                v110 = v9 + 24 * v109;
                if (2 * v108 + 2 >= v11)
                {
                  v111 = *(int8x8_t *)v110;
                  v116 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v110);
                  v116.i16[0] = vaddlv_u8(v116);
                  v113 = v116.i32[0];
                }
                else
                {
                  v111 = *(int8x8_t *)v110;
                  v112 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v110);
                  v112.i16[0] = vaddlv_u8(v112);
                  v113 = v112.i32[0];
                  v114 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v110 + 24));
                  v114.i16[0] = vaddlv_u8(v114);
                  if (v113 < v114.i32[0]
                    || (v113 <= v114.i32[0] ? (v115 = *(_QWORD *)&v111 >= *(_QWORD *)(v110 + 24)) : (v115 = 1), !v115))
                  {
                    v113 = v114.i32[0];
                    v111 = *(int8x8_t *)(v110 + 24);
                    v110 += 24;
                    v109 = 2 * v108 + 2;
                  }
                }
                v117 = v9 + 24 * v108;
                v118 = *(int8x8_t *)v117;
                v119 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v117);
                v119.i16[0] = vaddlv_u8(v119);
                v120 = v119.i32[0];
                if (v113 >= v119.i32[0] && (*(_QWORD *)&v111 >= *(_QWORD *)&v118 || v113 > v119.i32[0]))
                {
                  v180 = *(_OWORD *)(v117 + 8);
                  v122 = *(int8x8_t *)v110;
                  do
                  {
                    v123 = v117;
                    v117 = v110;
                    *(int8x8_t *)v123 = v122;
                    *(_OWORD *)(v123 + 8) = *(_OWORD *)(v110 + 8);
                    if (v106 < v109)
                      break;
                    v124 = 2 * v109;
                    v109 = (2 * v109) | 1;
                    v110 = v9 + 24 * v109;
                    v125 = v124 + 2;
                    if (v124 + 2 >= v11)
                    {
                      v122 = *(int8x8_t *)v110;
                      v130 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v110);
                      v130.i16[0] = vaddlv_u8(v130);
                      v127 = v130.i32[0];
                    }
                    else
                    {
                      v122 = *(int8x8_t *)v110;
                      v126 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v110);
                      v126.i16[0] = vaddlv_u8(v126);
                      v127 = v126.i32[0];
                      v128 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v110 + 24));
                      v128.i16[0] = vaddlv_u8(v128);
                      if (v127 < v128.i32[0]
                        || (v127 <= v128.i32[0] ? (v129 = *(_QWORD *)&v122 >= *(_QWORD *)(v110 + 24)) : (v129 = 1), !v129))
                      {
                        v127 = v128.i32[0];
                        v122 = *(int8x8_t *)(v110 + 24);
                        v110 += 24;
                        v109 = v125;
                      }
                    }
                    if (v127 < v120)
                      break;
                  }
                  while (v127 > v120 || *(_QWORD *)&v122 >= *(_QWORD *)&v118);
                  *(int8x8_t *)v117 = v118;
                  *(_OWORD *)(v117 + 8) = v180;
                }
              }
              v107 = v108 - 1;
            }
            while (v108);
            do
            {
              v132 = 0;
              v133 = *(int8x8_t *)v9;
              v173 = *(_OWORD *)(v9 + 8);
              v134 = v9;
              do
              {
                v135 = v134;
                v134 += 24 * v132 + 24;
                v136 = 2 * v132;
                v132 = (2 * v132) | 1;
                v137 = v136 + 2;
                if (v137 >= v11)
                {
                  v138 = *(int8x8_t *)v134;
                }
                else
                {
                  v138 = *(int8x8_t *)v134;
                  v139 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v134);
                  v139.i16[0] = vaddlv_u8(v139);
                  v140 = v139.i32[0];
                  v141 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v134 + 24));
                  v141.i16[0] = vaddlv_u8(v141);
                  if (v140 < v141.i32[0]
                    || (v140 <= v141.i32[0] ? (v142 = *(_QWORD *)&v138 >= *(_QWORD *)(v134 + 24)) : (v142 = 1), !v142))
                  {
                    v138 = *(int8x8_t *)(v134 + 24);
                    v134 += 24;
                    v132 = v137;
                  }
                }
                *(int8x8_t *)v135 = v138;
                *(_OWORD *)(v135 + 8) = *(_OWORD *)(v134 + 8);
              }
              while (v132 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
              v143 = (__int128 *)(v134 + 8);
              if (v134 == a2 - 24)
              {
                *(int8x8_t *)v134 = v133;
                *v143 = v173;
              }
              else
              {
                *(_QWORD *)v134 = *(_QWORD *)(a2 - 24);
                *v143 = *(_OWORD *)(a2 - 16);
                *(int8x8_t *)(a2 - 24) = v133;
                *(_OWORD *)(a2 - 16) = v173;
                v144 = v134 - v9 + 24;
                if (v144 >= 25)
                {
                  v145 = v144 / 0x18uLL - 2;
                  v146 = v145 >> 1;
                  v147 = v9 + 24 * (v145 >> 1);
                  v148 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v147);
                  v148.i16[0] = vaddlv_u8(v148);
                  v149 = v148.i32[0];
                  v150 = *(int8x8_t *)v134;
                  v151 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v134);
                  v151.i16[0] = vaddlv_u8(v151);
                  v152 = v151.i32[0];
                  if (v149 < v151.i32[0]
                    || (*(_QWORD *)v147 < *(_QWORD *)&v150 ? (v153 = v149 > v151.i32[0]) : (v153 = 1), !v153))
                  {
                    v181 = *v143;
                    *(_QWORD *)v134 = *(_QWORD *)v147;
                    v154 = (__int128 *)(v9 + 24 * v146 + 8);
                    *v143 = *v154;
                    if (v145 >= 2)
                    {
                      while (1)
                      {
                        v156 = v146 - 1;
                        v146 = (v146 - 1) >> 1;
                        v155 = (int8x8_t *)(v9 + 24 * v146);
                        v157 = *v155;
                        v158 = (uint8x8_t)vcnt_s8(*v155);
                        v158.i16[0] = vaddlv_u8(v158);
                        if (v158.i32[0] >= v152 && (*(_QWORD *)&v157 >= *(_QWORD *)&v150 || v158.i32[0] > v152))
                          break;
                        *(int8x8_t *)v147 = v157;
                        v154 = (__int128 *)(v9 + 24 * v146 + 8);
                        *(_OWORD *)(v147 + 8) = *v154;
                        v147 = v9 + 24 * v146;
                        if (v156 < 2)
                          goto LABEL_216;
                      }
                    }
                    v155 = (int8x8_t *)v147;
LABEL_216:
                    *v155 = v150;
                    *v154 = v181;
                  }
                }
              }
              a2 -= 24;
              v50 = v11-- <= 2;
            }
            while (!v50);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (int8x8_t *)(v9 + 24 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0xC01)
        {
          sub_1C597D1A0(a1 + 24 * ((unint64_t)v11 >> 1), a1, a2 - 24);
        }
        else
        {
          sub_1C597D1A0(a1, a1 + 24 * ((unint64_t)v11 >> 1), a2 - 24);
          v14 = a1 + 24 * v12;
          sub_1C597D1A0(a1 + 24, v14 - 24, a2 - 48);
          sub_1C597D1A0(a1 + 48, a1 + 24 + 24 * v12, a2 - 72);
          sub_1C597D1A0(v14 - 24, (uint64_t)v13, a1 + 24 + 24 * v12);
          v15 = *(int8x8_t *)a1;
          *(int8x8_t *)a1 = *v13;
          *v13 = v15;
          v174 = *(_OWORD *)(a1 + 8);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v14 + 8);
          *(_OWORD *)(v14 + 8) = v174;
        }
        --a3;
        v16 = *(int8x8_t *)a1;
        if ((a4 & 1) == 0)
        {
          v19 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(a1 - 24));
          v19.i16[0] = vaddlv_u8(v19);
          v20 = v19.i32[0];
          v21 = (uint8x8_t)vcnt_s8(v16);
          v21.i16[0] = vaddlv_u8(v21);
          v18 = v21.i32[0];
          if (v20 < v21.i32[0] || *(_QWORD *)(a1 - 24) < *(_QWORD *)&v16 && v20 <= v21.i32[0])
            goto LABEL_13;
          v172 = *(_OWORD *)(a1 + 8);
          v45 = *v8;
          v46 = (uint8x8_t)vcnt_s8(*v8);
          v46.i16[0] = vaddlv_u8(v46);
          if (v18 >= v46.i32[0] && (*(_QWORD *)&v16 >= *(_QWORD *)&v45 || v18 > v46.i32[0]))
          {
            v62 = (int8x8_t *)(a1 + 24);
            do
            {
              v9 = (unint64_t)v62;
              if ((unint64_t)v62 >= a2)
                break;
              v63 = *v62;
              v64 = (uint8x8_t)vcnt_s8(*v62);
              v64.i16[0] = vaddlv_u8(v64);
              if (v18 < v64.i32[0])
                break;
              v62 += 3;
            }
            while (*(_QWORD *)&v16 >= *(_QWORD *)&v63 || v18 > v64.i32[0]);
          }
          else
          {
            v47 = (int8x8_t *)(a1 + 24);
            do
            {
              v9 = (unint64_t)v47;
              v48 = *v47;
              v49 = (uint8x8_t)vcnt_s8(*v47);
              v49.i16[0] = vaddlv_u8(v49);
              if (v18 < v49.i32[0])
                break;
              v47 += 3;
              v50 = *(_QWORD *)&v16 >= *(_QWORD *)&v48 || v18 > v49.i32[0];
            }
            while (v50);
          }
          j = a2;
          if (v9 < a2)
          {
            for (j = a2 - 24; ; j -= 24)
            {
              v52 = (uint8x8_t)vcnt_s8(v45);
              v52.i16[0] = vaddlv_u8(v52);
              if (v18 >= v52.i32[0] && (*(_QWORD *)&v16 >= *(_QWORD *)&v45 || v18 > v52.i32[0]))
                break;
              v53 = *(int8x8_t *)(j - 24);
              v45 = v53;
            }
          }
          if (v9 < j)
          {
            v54 = *(int8x8_t *)v9;
            v55 = *(int8x8_t *)j;
            do
            {
              *(int8x8_t *)v9 = v55;
              *(int8x8_t *)j = v54;
              v176 = *(_OWORD *)(v9 + 8);
              *(_OWORD *)(v9 + 8) = *(_OWORD *)(j + 8);
              *(_OWORD *)(j + 8) = v176;
              v56 = (int8x8_t *)(v9 + 24);
              do
              {
                v9 = (unint64_t)v56;
                v54 = *v56;
                v57 = (uint8x8_t)vcnt_s8(*v56);
                v57.i16[0] = vaddlv_u8(v57);
                if (v18 < v57.i32[0])
                  break;
                v56 += 3;
              }
              while (*(_QWORD *)&v16 >= *(_QWORD *)&v54 || v18 > v57.i32[0]);
              do
              {
                do
                {
                  v59 = *(int8x8_t *)(j - 24);
                  j -= 24;
                  v55 = v59;
                  v60 = (uint8x8_t)vcnt_s8(v59);
                  v60.i16[0] = vaddlv_u8(v60);
                }
                while (v18 < v60.i32[0]);
              }
              while (*(_QWORD *)&v16 < *(_QWORD *)&v55 && v18 <= v60.i32[0]);
            }
            while (v9 < j);
          }
          if (v9 - 24 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v9 - 24);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 16);
          }
          a4 = 0;
          *(int8x8_t *)(v9 - 24) = v16;
          *(_OWORD *)(v9 - 16) = v172;
          continue;
        }
        v17 = (uint8x8_t)vcnt_s8(v16);
        v17.i16[0] = vaddlv_u8(v17);
        v18 = v17.i32[0];
LABEL_13:
        v171 = *(_OWORD *)(a1 + 8);
        for (k = 24; ; k += 24)
        {
          v23 = *(int8x8_t *)(a1 + k);
          v24 = (uint8x8_t)vcnt_s8(v23);
          v24.i16[0] = vaddlv_u8(v24);
          if (v18 <= v24.i32[0] && (*(_QWORD *)&v23 >= *(_QWORD *)&v16 || v18 < v24.i32[0]))
            break;
        }
        v26 = a1 + k;
        v27 = (int8x8_t *)(a2 - 24);
        if (k == 24)
        {
          v32 = (int8x8_t *)(a2 - 24);
          while (v26 < (unint64_t)&v32[3])
          {
            v28 = v32;
            v33 = *v32;
            v34 = (uint8x8_t)vcnt_s8(*v32);
            v34.i16[0] = vaddlv_u8(v34);
            if (v18 <= v34.i32[0])
            {
              v32 -= 3;
              if (*(_QWORD *)&v33 >= *(_QWORD *)&v16 || v18 < v34.i32[0])
                continue;
            }
            goto LABEL_39;
          }
          v28 = v32 + 3;
        }
        else
        {
          do
          {
            v28 = v27;
            v29 = *v27;
            v30 = (uint8x8_t)vcnt_s8(*v27);
            v30.i16[0] = vaddlv_u8(v30);
            if (v18 > v30.i32[0])
              break;
            v27 -= 3;
          }
          while (*(_QWORD *)&v29 >= *(_QWORD *)&v16 || v18 < v30.i32[0]);
        }
LABEL_39:
        if (v26 >= (unint64_t)v28)
        {
          v9 = v26;
        }
        else
        {
          v36 = *v28;
          v9 = v26;
          v37 = v28;
          do
          {
            *(int8x8_t *)v9 = v36;
            *v37 = v23;
            v175 = *(_OWORD *)(v9 + 8);
            *(_OWORD *)(v9 + 8) = *(_OWORD *)v37[1].i8;
            *(_OWORD *)v37[1].i8 = v175;
            do
            {
              do
              {
                v38 = *(int8x8_t *)(v9 + 24);
                v9 += 24;
                v23 = v38;
                v39 = (uint8x8_t)vcnt_s8(v38);
                v39.i16[0] = vaddlv_u8(v39);
              }
              while (v18 > v39.i32[0]);
            }
            while (*(_QWORD *)&v23 < *(_QWORD *)&v16 && v18 >= v39.i32[0]);
            v41 = v37 - 3;
            do
            {
              v37 = v41;
              v36 = *v41;
              v42 = (uint8x8_t)vcnt_s8(*v41);
              v42.i16[0] = vaddlv_u8(v42);
              if (v18 > v42.i32[0])
                break;
              v41 -= 3;
            }
            while (*(_QWORD *)&v36 >= *(_QWORD *)&v16 || v18 < v42.i32[0]);
          }
          while (v9 < (unint64_t)v37);
        }
        if (v9 - 24 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v9 - 24);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 16);
        }
        *(int8x8_t *)(v9 - 24) = v16;
        *(_OWORD *)(v9 - 16) = v171;
        if (v26 < (unint64_t)v28)
        {
LABEL_62:
          sub_1C597C4D4(a1, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v44 = sub_1C597D33C(a1, v9 - 24);
        if (!sub_1C597D33C(v9, a2))
        {
          if (v44)
            continue;
          goto LABEL_62;
        }
        a2 = v9 - 24;
        if (!v44)
          goto LABEL_1;
        return;
    }
  }
}

  i64 = a2[-1].i64;
  v345 = &a2[-1].i64[1];
  v342 = &a2[-2].i64[1];
  v10 = a1;
  v350 = a2;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 3;
    v349 = v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v286 = a2[-1].i64[1];
        v287 = v10->i64[0];
        v288 = *a3;
        v352 = 0;
        v289 = sub_1C6184BF0(v288, v286, &v352);
        v290 = 0;
        if (v289)
          v290 = *(_QWORD **)(v352 + 8);
        v291 = 0;
        do
        {
          v290 = (_QWORD *)*v290;
          ++v291;
        }
        while (v290);
        v292 = *a3;
        v352 = 0;
        v293 = sub_1C6184BF0(v292, v287, &v352);
        v294 = 0;
        if (v293)
          v294 = *(_QWORD **)(v352 + 8);
        v295 = 0;
        do
        {
          v294 = (_QWORD *)*v294;
          ++v295;
        }
        while (v294);
        if (v291 < v295)
        {
          v296 = v10->i64[0];
          v10->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v296;
        }
        return result;
      case 3uLL:
        sub_1C5C45BB4(v10->i64, &v10->i64[1], v345, a3);
        return result;
      case 4uLL:
        sub_1C5C4634C(v10->i64, &v10->i64[1], v10[1].i64, v345, a3);
        return result;
      case 5uLL:
        v297 = v10[1].i64;
        v298 = &v10[1].i64[1];
        sub_1C5C4634C(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], a3);
        v299 = a2[-1].i64[1];
        v300 = a1[1].i64[1];
        v301 = *a3;
        v352 = 0;
        v302 = sub_1C6184BF0(v301, v299, &v352);
        v303 = 0;
        if (v302)
          v303 = *(_QWORD **)(v352 + 8);
        v304 = 0;
        do
        {
          v303 = (_QWORD *)*v303;
          ++v304;
        }
        while (v303);
        v305 = *a3;
        v352 = 0;
        v306 = sub_1C6184BF0(v305, v300, &v352);
        v307 = 0;
        if (v306)
          v307 = *(_QWORD **)(v352 + 8);
        v308 = 0;
        do
        {
          v307 = (_QWORD *)*v307;
          ++v308;
        }
        while (v307);
        if (v304 < v308)
        {
          v309 = *v298;
          *v298 = a2[-1].i64[1];
          a2[-1].i64[1] = v309;
          v310 = *v298;
          v311 = *v297;
          v312 = *a3;
          v352 = 0;
          v313 = sub_1C6184BF0(v312, v310, &v352);
          v314 = 0;
          if (v313)
            v314 = *(_QWORD **)(v352 + 8);
          v315 = 0;
          do
          {
            v314 = (_QWORD *)*v314;
            ++v315;
          }
          while (v314);
          v316 = *a3;
          v352 = 0;
          v317 = sub_1C6184BF0(v316, v311, &v352);
          v318 = 0;
          if (v317)
            v318 = *(_QWORD **)(v352 + 8);
          v319 = 0;
          do
          {
            v318 = (_QWORD *)*v318;
            ++v319;
          }
          while (v318);
          if (v315 < v319)
          {
            v320 = *v297;
            v321 = *v298;
            *v297 = *v298;
            *v298 = v320;
            v322 = a1->i64[1];
            v323 = *a3;
            v352 = 0;
            v324 = sub_1C6184BF0(v323, v321, &v352);
            v325 = 0;
            if (v324)
              v325 = *(_QWORD **)(v352 + 8);
            v326 = 0;
            do
            {
              v325 = (_QWORD *)*v325;
              ++v326;
            }
            while (v325);
            v327 = *a3;
            v352 = 0;
            v328 = sub_1C6184BF0(v327, v322, &v352);
            v329 = 0;
            if (v328)
              v329 = *(_QWORD **)(v352 + 8);
            v330 = 0;
            do
            {
              v329 = (_QWORD *)*v329;
              ++v330;
            }
            while (v329);
            if (v326 < v330)
            {
              v332 = v349->i64[1];
              v331 = v349[1].i64[0];
              v333 = v349->i64[0];
              v349->i64[1] = v331;
              v349[1].i64[0] = v332;
              v334 = *a3;
              v352 = 0;
              v335 = sub_1C6184BF0(v334, v331, &v352);
              v336 = 0;
              if (v335)
                v336 = *(_QWORD **)(v352 + 8);
              v337 = 0;
              do
              {
                v336 = (_QWORD *)*v336;
                ++v337;
              }
              while (v336);
              v338 = *a3;
              v352 = 0;
              v339 = sub_1C6184BF0(v338, v333, &v352);
              v340 = 0;
              if (v339)
                v340 = *(_QWORD **)(v352 + 8);
              v341 = 0;
              do
              {
                v340 = (_QWORD *)*v340;
                ++v341;
              }
              while (v340);
              if (v337 < v341)
              {
                result = vextq_s8(*v349, *v349, 8uLL);
                *v349 = result;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v142 = (int8x16_t *)&v10->u64[1];
          v144 = v10 == a2 || v142 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v144)
            {
              v145 = (uint64_t *)v10;
              do
              {
                v146 = (uint64_t *)v142;
                v148 = *v145;
                v147 = v145[1];
                v149 = *a3;
                v352 = 0;
                v150 = sub_1C6184BF0(v149, v147, &v352);
                v151 = 0;
                if (v150)
                  v151 = *(_QWORD **)(v352 + 8);
                v152 = 0;
                do
                {
                  v151 = (_QWORD *)*v151;
                  ++v152;
                }
                while (v151);
                v153 = *a3;
                v352 = 0;
                v154 = sub_1C6184BF0(v153, v148, &v352);
                v155 = 0;
                if (v154)
                  v155 = *(_QWORD **)(v352 + 8);
                v156 = 0;
                do
                {
                  v155 = (_QWORD *)*v155;
                  ++v156;
                }
                while (v155);
                if (v152 < v156)
                {
                  v157 = *v146;
                  v158 = v146;
                  while (1)
                  {
                    *v158 = *v145;
                    if (v145 == (uint64_t *)a1)
                      break;
                    v158 = v145;
                    v160 = *--v145;
                    v159 = v160;
                    v161 = *a3;
                    v352 = 0;
                    v162 = sub_1C6184BF0(v161, v157, &v352);
                    v163 = 0;
                    if (v162)
                      v163 = *(_QWORD **)(v352 + 8);
                    v164 = 0;
                    do
                    {
                      v163 = (_QWORD *)*v163;
                      ++v164;
                    }
                    while (v163);
                    v165 = *a3;
                    v352 = 0;
                    v166 = sub_1C6184BF0(v165, v159, &v352);
                    v167 = 0;
                    if (v166)
                      v167 = *(_QWORD **)(v352 + 8);
                    v168 = 0;
                    do
                    {
                      v167 = (_QWORD *)*v167;
                      ++v168;
                    }
                    while (v167);
                    v186 = v164 >= v168;
                    a2 = v350;
                    if (v186)
                      goto LABEL_180;
                  }
                  v158 = (uint64_t *)a1;
LABEL_180:
                  *v158 = v157;
                }
                v142 = (int8x16_t *)(v146 + 1);
                v145 = v146;
              }
              while (v146 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v144)
          {
            do
            {
              v262 = (uint64_t *)v142;
              v264 = a1->i64[0];
              v263 = a1->i64[1];
              v265 = *a3;
              v352 = 0;
              v266 = sub_1C6184BF0(v265, v263, &v352);
              v267 = 0;
              if (v266)
                v267 = *(_QWORD **)(v352 + 8);
              v268 = 0;
              do
              {
                v267 = (_QWORD *)*v267;
                ++v268;
              }
              while (v267);
              v269 = *a3;
              v352 = 0;
              v270 = sub_1C6184BF0(v269, v264, &v352);
              v271 = 0;
              if (v270)
                v271 = *(_QWORD **)(v352 + 8);
              v272 = 0;
              do
              {
                v271 = (_QWORD *)*v271;
                ++v272;
              }
              while (v271);
              if (v268 < v272)
              {
                v273 = *v262;
                v274 = v262;
                do
                {
                  v275 = v274;
                  v274 = (uint64_t *)a1;
                  *v275 = a1->i64[0];
                  v277 = a1[-1].i64[1];
                  a1 = (int8x16_t *)((char *)a1 - 8);
                  v276 = v277;
                  v278 = *a3;
                  v352 = 0;
                  v279 = sub_1C6184BF0(v278, v273, &v352);
                  v280 = 0;
                  if (v279)
                    v280 = *(_QWORD **)(v352 + 8);
                  v281 = 0;
                  do
                  {
                    v280 = (_QWORD *)*v280;
                    ++v281;
                  }
                  while (v280);
                  v282 = *a3;
                  v352 = 0;
                  v283 = sub_1C6184BF0(v282, v276, &v352);
                  v284 = 0;
                  if (v283)
                    v284 = *(_QWORD **)(v352 + 8);
                  v285 = 0;
                  do
                  {
                    v284 = (_QWORD *)*v284;
                    ++v285;
                  }
                  while (v284);
                }
                while (v281 < v285);
                *v274 = v273;
                a2 = v350;
              }
              v142 = (int8x16_t *)(v262 + 1);
              a1 = (int8x16_t *)v262;
            }
            while (v262 + 1 != (uint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v169 = (v12 - 2) >> 1;
            v170 = v169;
            do
            {
              v171 = v170;
              if (v169 >= v170)
              {
                v172 = (2 * v170) | 1;
                v173 = &a1->i64[v172];
                if (2 * v170 + 2 < (uint64_t)v12)
                {
                  v174 = *v173;
                  v175 = &a1->i64[v172];
                  v177 = v173 + 1;
                  v176 = v173[1];
                  v178 = *a3;
                  v352 = 0;
                  v179 = sub_1C6184BF0(v178, v174, &v352);
                  v180 = 0;
                  if (v179)
                    v180 = *(_QWORD **)(v352 + 8);
                  v181 = 0;
                  do
                  {
                    v180 = (_QWORD *)*v180;
                    ++v181;
                  }
                  while (v180);
                  v182 = *a3;
                  v352 = 0;
                  v183 = sub_1C6184BF0(v182, v176, &v352);
                  v184 = 0;
                  if (v183)
                    v184 = *(_QWORD **)(v352 + 8);
                  v185 = 0;
                  do
                  {
                    v184 = (_QWORD *)*v184;
                    ++v185;
                  }
                  while (v184);
                  v186 = v181 >= v185;
                  if (v181 >= v185)
                    v173 = v175;
                  else
                    v173 = v177;
                  if (!v186)
                    v172 = 2 * v171 + 2;
                  a1 = v349;
                }
                v187 = &a1->i64[v171];
                v346 = v173;
                v188 = *v173;
                v189 = *v187;
                v190 = *a3;
                v352 = 0;
                v191 = sub_1C6184BF0(v190, v188, &v352);
                v192 = 0;
                if (v191)
                  v192 = *(_QWORD **)(v352 + 8);
                v193 = 0;
                do
                {
                  v192 = (_QWORD *)*v192;
                  ++v193;
                }
                while (v192);
                v194 = *a3;
                v352 = 0;
                v195 = sub_1C6184BF0(v194, v189, &v352);
                v196 = 0;
                if (v195)
                  v196 = *(_QWORD **)(v352 + 8);
                v197 = 0;
                do
                {
                  v196 = (_QWORD *)*v196;
                  ++v197;
                }
                while (v196);
                v186 = v193 >= v197;
                a2 = v350;
                if (v186)
                {
                  v344 = *v187;
                  do
                  {
                    v198 = v346;
                    *v187 = *v346;
                    if (v169 < v172)
                      break;
                    v199 = (2 * v172) | 1;
                    v200 = &a1->i64[v199];
                    v201 = 2 * v172 + 2;
                    if (v201 >= (uint64_t)v12)
                    {
                      v172 = (2 * v172) | 1;
                    }
                    else
                    {
                      v202 = *v200;
                      v347 = &a1->i64[v199];
                      v203 = v200 + 1;
                      v204 = v200[1];
                      v205 = *a3;
                      v352 = 0;
                      v206 = sub_1C6184BF0(v205, v202, &v352);
                      v207 = 0;
                      if (v206)
                        v207 = *(_QWORD **)(v352 + 8);
                      v208 = 0;
                      do
                      {
                        v207 = (_QWORD *)*v207;
                        ++v208;
                      }
                      while (v207);
                      v209 = *a3;
                      v352 = 0;
                      v210 = sub_1C6184BF0(v209, v204, &v352);
                      v211 = 0;
                      if (v210)
                        v211 = *(_QWORD **)(v352 + 8);
                      v212 = 0;
                      do
                      {
                        v211 = (_QWORD *)*v211;
                        ++v212;
                      }
                      while (v211);
                      v186 = v208 >= v212;
                      v200 = v347;
                      a1 = v349;
                      if (v186)
                      {
                        v172 = v199;
                      }
                      else
                      {
                        v200 = v203;
                        v172 = v201;
                      }
                      a2 = v350;
                    }
                    v346 = v200;
                    v213 = *v200;
                    v214 = *a3;
                    v352 = 0;
                    v215 = sub_1C6184BF0(v214, v213, &v352);
                    v216 = 0;
                    if (v215)
                      v216 = *(_QWORD **)(v352 + 8);
                    v217 = 0;
                    do
                    {
                      v216 = (_QWORD *)*v216;
                      ++v217;
                    }
                    while (v216);
                    v218 = *a3;
                    v352 = 0;
                    v219 = sub_1C6184BF0(v218, v344, &v352);
                    v220 = 0;
                    if (v219)
                      v220 = *(_QWORD **)(v352 + 8);
                    v221 = 0;
                    do
                    {
                      v220 = (_QWORD *)*v220;
                      ++v221;
                    }
                    while (v220);
                    v187 = v198;
                  }
                  while (v217 >= v221);
                  *v198 = v344;
                }
              }
              v170 = v171 - 1;
            }
            while (v171);
            do
            {
              v351 = a2;
              v222 = 0;
              v348 = a1->i64[0];
              v223 = (uint64_t *)a1;
              do
              {
                v224 = &v223[v222 + 1];
                v225 = (2 * v222) | 1;
                v226 = 2 * v222 + 2;
                if (v226 < (uint64_t)v12)
                {
                  v227 = *v224;
                  v228 = v223[v222 + 2];
                  v229 = *a3;
                  v352 = 0;
                  v230 = sub_1C6184BF0(v229, v227, &v352);
                  v231 = 0;
                  if (v230)
                    v231 = *(_QWORD **)(v352 + 8);
                  v232 = 0;
                  do
                  {
                    v231 = (_QWORD *)*v231;
                    ++v232;
                  }
                  while (v231);
                  v233 = *a3;
                  v352 = 0;
                  v234 = sub_1C6184BF0(v233, v228, &v352);
                  v235 = 0;
                  if (v234)
                    v235 = *(_QWORD **)(v352 + 8);
                  v236 = 0;
                  do
                  {
                    v235 = (_QWORD *)*v235;
                    ++v236;
                  }
                  while (v235);
                  if (v232 < v236)
                  {
                    ++v224;
                    v225 = v226;
                  }
                  a1 = v349;
                }
                *v223 = *v224;
                v223 = v224;
                v222 = v225;
              }
              while (v225 <= (uint64_t)((v12 - 2) >> 1));
              a2 = (int8x16_t *)((char *)v351 - 8);
              if (v224 == (uint64_t *)&v351[-1].u64[1])
              {
                *v224 = v348;
              }
              else
              {
                *v224 = a2->i64[0];
                a2->i64[0] = v348;
                v237 = (char *)v224 - (char *)a1 + 8;
                if (v237 >= 9)
                {
                  v238 = (((unint64_t)v237 >> 3) - 2) >> 1;
                  v239 = &a1->i64[v238];
                  v240 = *v239;
                  v241 = *v224;
                  v242 = *a3;
                  v352 = 0;
                  v243 = sub_1C6184BF0(v242, v240, &v352);
                  v244 = 0;
                  if (v243)
                    v244 = *(_QWORD **)(v352 + 8);
                  v245 = 0;
                  do
                  {
                    v244 = (_QWORD *)*v244;
                    ++v245;
                  }
                  while (v244);
                  v246 = *a3;
                  v352 = 0;
                  v247 = sub_1C6184BF0(v246, v241, &v352);
                  v248 = 0;
                  if (v247)
                    v248 = *(_QWORD **)(v352 + 8);
                  v249 = 0;
                  do
                  {
                    v248 = (_QWORD *)*v248;
                    ++v249;
                  }
                  while (v248);
                  v186 = v245 >= v249;
                  a2 = (int8x16_t *)((char *)v351 - 8);
                  if (!v186)
                  {
                    v250 = *v224;
                    do
                    {
                      v251 = v239;
                      *v224 = *v239;
                      if (!v238)
                        break;
                      v238 = (v238 - 1) >> 1;
                      v239 = &a1->i64[v238];
                      v252 = *v239;
                      v253 = *a3;
                      v352 = 0;
                      v254 = sub_1C6184BF0(v253, v252, &v352);
                      v255 = 0;
                      if (v254)
                        v255 = *(_QWORD **)(v352 + 8);
                      v256 = 0;
                      do
                      {
                        v255 = (_QWORD *)*v255;
                        ++v256;
                      }
                      while (v255);
                      v257 = *a3;
                      v352 = 0;
                      v258 = sub_1C6184BF0(v257, v250, &v352);
                      v259 = 0;
                      if (v258)
                        v259 = *(_QWORD **)(v352 + 8);
                      v260 = 0;
                      do
                      {
                        v259 = (_QWORD *)*v259;
                        ++v260;
                      }
                      while (v259);
                      v224 = v251;
                      v186 = v256 >= v260;
                      a2 = (int8x16_t *)((char *)v351 - 8);
                    }
                    while (!v186);
                    *v251 = v250;
                  }
                }
              }
            }
            while ((uint64_t)v12-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10->i64[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C5C45BB4(&a1->i64[v12 >> 1], a1->i64, v345, a3);
        }
        else
        {
          sub_1C5C45BB4(a1->i64, &a1->i64[v12 >> 1], v345, a3);
          sub_1C5C45BB4(&a1->i64[1], v14 - 1, i64, a3);
          sub_1C5C45BB4(a1[1].i64, &a1->i64[v13 + 1], v342, a3);
          sub_1C5C45BB4(v14 - 1, &a1->i64[v12 >> 1], &a1->i64[v13 + 1], a3);
          v15 = a1->i64[0];
          a1->i64[0] = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v70 = a1[-1].i64[1];
          v71 = a1->i64[0];
          v72 = *a3;
          v352 = 0;
          v73 = sub_1C6184BF0(v72, v70, &v352);
          v74 = 0;
          if (v73)
            v74 = *(_QWORD **)(v352 + 8);
          v75 = 0;
          do
          {
            v74 = (_QWORD *)*v74;
            ++v75;
          }
          while (v74);
          v76 = *a3;
          v352 = 0;
          v77 = sub_1C6184BF0(v76, v71, &v352);
          v78 = 0;
          if (v77)
            v78 = *(_QWORD **)(v352 + 8);
          v79 = 0;
          do
          {
            v78 = (_QWORD *)*v78;
            ++v79;
          }
          while (v78);
          if (v75 >= v79)
          {
            v80 = a1->i64[0];
            v81 = *v345;
            v82 = *a3;
            v352 = 0;
            v83 = sub_1C6184BF0(v82, v80, &v352);
            v84 = 0;
            if (v83)
              v84 = *(_QWORD **)(v352 + 8);
            v85 = 0;
            do
            {
              v84 = (_QWORD *)*v84;
              ++v85;
            }
            while (v84);
            v86 = *a3;
            v352 = 0;
            v87 = sub_1C6184BF0(v86, v81, &v352);
            v88 = 0;
            a2 = v350;
            if (v87)
              v88 = *(_QWORD **)(v352 + 8);
            v89 = 0;
            do
            {
              v88 = (_QWORD *)*v88;
              ++v89;
            }
            while (v88);
            v10 = a1;
            if (v85 >= v89)
            {
              do
              {
                v10 = (int8x16_t *)((char *)v10 + 8);
                if (v10 >= v350)
                  break;
                v133 = v10->i64[0];
                v134 = *a3;
                v352 = 0;
                v135 = sub_1C6184BF0(v134, v80, &v352);
                v136 = 0;
                if (v135)
                  v136 = *(_QWORD **)(v352 + 8);
                v137 = 0;
                do
                {
                  v136 = (_QWORD *)*v136;
                  ++v137;
                }
                while (v136);
                v138 = *a3;
                v352 = 0;
                v139 = sub_1C6184BF0(v138, v133, &v352);
                v140 = 0;
                if (v139)
                  v140 = *(_QWORD **)(v352 + 8);
                v141 = 0;
                do
                {
                  v140 = (_QWORD *)*v140;
                  ++v141;
                }
                while (v140);
              }
              while (v137 >= v141);
            }
            else
            {
              v10 = a1;
              do
              {
                v91 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
                v90 = v91;
                v92 = *a3;
                v352 = 0;
                v93 = sub_1C6184BF0(v92, v80, &v352);
                v94 = 0;
                if (v93)
                  v94 = *(_QWORD **)(v352 + 8);
                v95 = 0;
                do
                {
                  v94 = (_QWORD *)*v94;
                  ++v95;
                }
                while (v94);
                v96 = *a3;
                v352 = 0;
                v97 = sub_1C6184BF0(v96, v90, &v352);
                v98 = 0;
                if (v97)
                  v98 = *(_QWORD **)(v352 + 8);
                v99 = 0;
                do
                {
                  v98 = (_QWORD *)*v98;
                  ++v99;
                }
                while (v98);
              }
              while (v95 >= v99);
            }
            v100 = v350;
            if (v10 < v350)
            {
              v100 = v350;
              do
              {
                v102 = v100[-1].i64[1];
                v100 = (int8x16_t *)((char *)v100 - 8);
                v101 = v102;
                v103 = *a3;
                v352 = 0;
                v104 = sub_1C6184BF0(v103, v80, &v352);
                v105 = 0;
                if (v104)
                  v105 = *(_QWORD **)(v352 + 8);
                v106 = 0;
                do
                {
                  v105 = (_QWORD *)*v105;
                  ++v106;
                }
                while (v105);
                v107 = *a3;
                v352 = 0;
                v108 = sub_1C6184BF0(v107, v101, &v352);
                v109 = 0;
                if (v108)
                  v109 = *(_QWORD **)(v352 + 8);
                v110 = 0;
                do
                {
                  v109 = (_QWORD *)*v109;
                  ++v110;
                }
                while (v109);
              }
              while (v106 < v110);
            }
            while (v10 < v100)
            {
              v111 = v10->i64[0];
              v10->i64[0] = v100->i64[0];
              v100->i64[0] = v111;
              do
              {
                v113 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
                v112 = v113;
                v114 = *a3;
                v352 = 0;
                v115 = sub_1C6184BF0(v114, v80, &v352);
                v116 = 0;
                if (v115)
                  v116 = *(_QWORD **)(v352 + 8);
                v117 = 0;
                do
                {
                  v116 = (_QWORD *)*v116;
                  ++v117;
                }
                while (v116);
                v118 = *a3;
                v352 = 0;
                v119 = sub_1C6184BF0(v118, v112, &v352);
                v120 = 0;
                if (v119)
                  v120 = *(_QWORD **)(v352 + 8);
                v121 = 0;
                do
                {
                  v120 = (_QWORD *)*v120;
                  ++v121;
                }
                while (v120);
              }
              while (v117 >= v121);
              do
              {
                v123 = v100[-1].i64[1];
                v100 = (int8x16_t *)((char *)v100 - 8);
                v122 = v123;
                v124 = *a3;
                v352 = 0;
                v125 = sub_1C6184BF0(v124, v80, &v352);
                v126 = 0;
                if (v125)
                  v126 = *(_QWORD **)(v352 + 8);
                v127 = 0;
                do
                {
                  v126 = (_QWORD *)*v126;
                  ++v127;
                }
                while (v126);
                v128 = *a3;
                v352 = 0;
                v129 = sub_1C6184BF0(v128, v122, &v352);
                v130 = 0;
                if (v129)
                  v130 = *(_QWORD **)(v352 + 8);
                v131 = 0;
                do
                {
                  v130 = (_QWORD *)*v130;
                  ++v131;
                }
                while (v130);
              }
              while (v127 < v131);
            }
            v132 = &v10[-1].i64[1];
            if (&v10[-1].u64[1] != (unint64_t *)a1)
              a1->i64[0] = *v132;
            a5 = 0;
            *v132 = v80;
            continue;
          }
        }
        v16 = a1->i64[0];
        v17 = a1;
        do
        {
          v18 = v17;
          v19 = v17->i64[1];
          v17 = (int8x16_t *)((char *)v17 + 8);
          v20 = *a3;
          v352 = 0;
          v21 = sub_1C6184BF0(v20, v19, &v352);
          v22 = 0;
          if (v21)
            v22 = *(_QWORD **)(v352 + 8);
          v23 = 0;
          do
          {
            v22 = (_QWORD *)*v22;
            ++v23;
          }
          while (v22);
          v24 = *a3;
          v352 = 0;
          v25 = sub_1C6184BF0(v24, v16, &v352);
          v26 = 0;
          if (v25)
            v26 = *(_QWORD **)(v352 + 8);
          v27 = 0;
          do
          {
            v26 = (_QWORD *)*v26;
            ++v27;
          }
          while (v26);
        }
        while (v23 < v27);
        v28 = v350;
        if (v18 == a1)
        {
          v28 = v350;
          do
          {
            if (v17 >= v28)
              break;
            v61 = v28[-1].i64[1];
            v28 = (int8x16_t *)((char *)v28 - 8);
            v62 = *a3;
            v352 = 0;
            v63 = sub_1C6184BF0(v62, v61, &v352);
            v64 = 0;
            if (v63)
              v64 = *(_QWORD **)(v352 + 8);
            v65 = 0;
            do
            {
              v64 = (_QWORD *)*v64;
              ++v65;
            }
            while (v64);
            v66 = *a3;
            v352 = 0;
            v67 = sub_1C6184BF0(v66, v16, &v352);
            v68 = 0;
            if (v67)
              v68 = *(_QWORD **)(v352 + 8);
            v69 = 0;
            do
            {
              v68 = (_QWORD *)*v68;
              ++v69;
            }
            while (v68);
          }
          while (v65 >= v69);
        }
        else
        {
          do
          {
            v29 = v28[-1].i64[1];
            v28 = (int8x16_t *)((char *)v28 - 8);
            v30 = *a3;
            v352 = 0;
            v31 = sub_1C6184BF0(v30, v29, &v352);
            v32 = 0;
            if (v31)
              v32 = *(_QWORD **)(v352 + 8);
            v33 = 0;
            do
            {
              v32 = (_QWORD *)*v32;
              ++v33;
            }
            while (v32);
            v34 = *a3;
            v352 = 0;
            v35 = sub_1C6184BF0(v34, v16, &v352);
            v36 = 0;
            if (v35)
              v36 = *(_QWORD **)(v352 + 8);
            v37 = 0;
            do
            {
              v36 = (_QWORD *)*v36;
              ++v37;
            }
            while (v36);
          }
          while (v33 >= v37);
        }
        v10 = v17;
        if (v17 < v28)
        {
          v38 = v28;
          do
          {
            v39 = v10->i64[0];
            v10->i64[0] = v38->i64[0];
            v38->i64[0] = v39;
            do
            {
              v40 = v10->i64[1];
              v10 = (int8x16_t *)((char *)v10 + 8);
              v41 = *a3;
              v352 = 0;
              v42 = sub_1C6184BF0(v41, v40, &v352);
              v43 = 0;
              if (v42)
                v43 = *(_QWORD **)(v352 + 8);
              v44 = 0;
              do
              {
                v43 = (_QWORD *)*v43;
                ++v44;
              }
              while (v43);
              v45 = *a3;
              v352 = 0;
              v46 = sub_1C6184BF0(v45, v16, &v352);
              v47 = 0;
              if (v46)
                v47 = *(_QWORD **)(v352 + 8);
              v48 = 0;
              do
              {
                v47 = (_QWORD *)*v47;
                ++v48;
              }
              while (v47);
            }
            while (v44 < v48);
            do
            {
              v49 = v38[-1].i64[1];
              v38 = (int8x16_t *)((char *)v38 - 8);
              v50 = *a3;
              v352 = 0;
              v51 = sub_1C6184BF0(v50, v49, &v352);
              v52 = 0;
              if (v51)
                v52 = *(_QWORD **)(v352 + 8);
              v53 = 0;
              do
              {
                v52 = (_QWORD *)*v52;
                ++v53;
              }
              while (v52);
              v54 = *a3;
              v352 = 0;
              v55 = sub_1C6184BF0(v54, v16, &v352);
              v56 = 0;
              if (v55)
                v56 = *(_QWORD **)(v352 + 8);
              v57 = 0;
              do
              {
                v56 = (_QWORD *)*v56;
                ++v57;
              }
              while (v56);
            }
            while (v53 >= v57);
          }
          while (v10 < v38);
        }
        v58 = &v10[-1].i64[1];
        if (&v10[-1].u64[1] != (unint64_t *)a1)
          a1->i64[0] = *v58;
        *v58 = v16;
        a2 = v350;
        if (v17 < v28)
        {
LABEL_56:
          sub_1C5C44968(a1, &v10[-1].u64[1], a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v59 = sub_1C5C45E80(a1, (int8x16_t *)((char *)v10 - 8), a3);
        if (!sub_1C5C45E80(v10, v350, a3))
        {
          if (v59)
            continue;
          goto LABEL_56;
        }
        a2 = (int8x16_t *)((char *)v10 - 8);
        if (!v59)
          goto LABEL_1;
        return result;
    }
  }
}

  v7 = a2 - 2;
  v116 = a2 - 4;
  v117 = a2;
  v115 = a2 - 6;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = v117;
    v10 = (char *)v117 - (char *)v8;
    v11 = ((char *)v117 - (char *)v8) >> 5;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v51 = sub_1C5CB93C0((uint64_t)v7);
        if (v51 < sub_1C5CB93C0((uint64_t)a1))
        {
          v52 = a1[1];
          v120 = *a1;
          v121 = v52;
          v53 = v7[1];
          *a1 = *v7;
          a1[1] = v53;
          v54 = v121;
          *v7 = v120;
          v7[1] = v54;
        }
        return;
      case 3:
        sub_1C5CBA094(a1, a1 + 2, v7);
        return;
      case 4:
        sub_1C5CBA360((uint64_t)a1, a1 + 2, a1 + 4, v7);
        return;
      case 5:
        sub_1C5CB9F9C((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, v7);
        return;
      default:
        if (v10 <= 767)
        {
          v55 = (uint64_t)(a1 + 2);
          v57 = a1 == v117 || v55 == (_QWORD)v117;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = a1;
              do
              {
                v60 = (uint64_t)v59;
                v59 = (__int128 *)v55;
                v61 = sub_1C5CB93C0(v55);
                if (v61 < sub_1C5CB93C0(v60))
                {
                  v62 = v59[1];
                  v120 = *v59;
                  v121 = v62;
                  v63 = v58;
                  while (1)
                  {
                    v64 = (char *)a1 + v63;
                    v65 = *(__int128 *)((char *)a1 + v63 + 16);
                    *((_OWORD *)v64 + 2) = *(__int128 *)((char *)a1 + v63);
                    *((_OWORD *)v64 + 3) = v65;
                    if (!v63)
                      break;
                    v63 -= 32;
                    v66 = sub_1C5CB93C0((uint64_t)&v120);
                    if (v66 >= sub_1C5CB93C0((uint64_t)a1 + v63))
                    {
                      v67 = (__int128 *)((char *)a1 + v63 + 32);
                      goto LABEL_71;
                    }
                  }
                  v67 = a1;
LABEL_71:
                  v68 = v121;
                  *v67 = v120;
                  v67[1] = v68;
                }
                v55 = (uint64_t)(v59 + 2);
                v58 += 32;
              }
              while (v59 + 2 != v117);
            }
          }
          else if (!v57)
          {
            v106 = a1 - 2;
            do
            {
              v107 = (uint64_t)a1;
              a1 = (__int128 *)v55;
              v108 = sub_1C5CB93C0(v55);
              if (v108 < sub_1C5CB93C0(v107))
              {
                v109 = a1[1];
                v120 = *a1;
                v121 = v109;
                v110 = v106;
                do
                {
                  v111 = v110[3];
                  v110[4] = v110[2];
                  v110[5] = v111;
                  v112 = sub_1C5CB93C0((uint64_t)&v120);
                  v113 = sub_1C5CB93C0((uint64_t)v110);
                  v110 -= 2;
                }
                while (v112 < v113);
                v114 = v121;
                v110[4] = v120;
                v110[5] = v114;
              }
              v55 = (uint64_t)(a1 + 2);
              v106 += 2;
            }
            while (a1 + 2 != v117);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != v117)
          {
            v69 = (unint64_t)(v11 - 2) >> 1;
            v70 = v69;
            do
            {
              v71 = v70;
              if (v69 >= v70)
              {
                v72 = (2 * v70) | 1;
                v73 = &a1[2 * v72];
                if (2 * v70 + 2 < v11)
                {
                  v74 = sub_1C5CB93C0((uint64_t)&a1[2 * v72]);
                  if (v74 < sub_1C5CB93C0((uint64_t)(v73 + 2)))
                  {
                    v73 += 2;
                    v72 = 2 * v71 + 2;
                  }
                }
                v75 = &a1[2 * v71];
                v76 = sub_1C5CB93C0((uint64_t)v73);
                if (v76 >= sub_1C5CB93C0((uint64_t)v75))
                {
                  v77 = v75[1];
                  v120 = *v75;
                  v121 = v77;
                  do
                  {
                    v78 = v73;
                    v79 = v73[1];
                    *v75 = *v73;
                    v75[1] = v79;
                    if (v69 < v72)
                      break;
                    v80 = (2 * v72) | 1;
                    v73 = &a1[2 * v80];
                    v81 = 2 * v72 + 2;
                    if (v81 < v11)
                    {
                      v82 = sub_1C5CB93C0((uint64_t)&a1[2 * v80]);
                      if (v82 < sub_1C5CB93C0((uint64_t)(v73 + 2)))
                      {
                        v73 += 2;
                        v80 = v81;
                      }
                    }
                    v83 = sub_1C5CB93C0((uint64_t)v73);
                    v75 = v78;
                    v72 = v80;
                  }
                  while (v83 >= sub_1C5CB93C0((uint64_t)&v120));
                  v84 = v121;
                  *v78 = v120;
                  v78[1] = v84;
                  v9 = v117;
                }
              }
              v70 = v71 - 1;
            }
            while (v71);
            do
            {
              v85 = 0;
              v86 = a1[1];
              v118 = *a1;
              v119 = v86;
              v87 = a1;
              do
              {
                v88 = &v87[2 * v85 + 2];
                v89 = (2 * v85) | 1;
                v90 = 2 * v85 + 2;
                if (v90 < v11)
                {
                  v91 = sub_1C5CB93C0((uint64_t)&v87[2 * v85 + 2]);
                  if (v91 < sub_1C5CB93C0((uint64_t)(v88 + 2)))
                  {
                    v88 += 2;
                    v89 = v90;
                  }
                }
                v92 = v88[1];
                *v87 = *v88;
                v87[1] = v92;
                v87 = v88;
                v85 = v89;
              }
              while (v89 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
              v9 -= 2;
              if (v88 == v9)
              {
                v104 = v119;
                *v88 = v118;
                v88[1] = v104;
              }
              else
              {
                v93 = v9[1];
                *v88 = *v9;
                v88[1] = v93;
                v94 = v119;
                *v9 = v118;
                v9[1] = v94;
                v95 = (char *)v88 - (char *)a1 + 32;
                if (v95 >= 33)
                {
                  v96 = (((unint64_t)v95 >> 5) - 2) >> 1;
                  v97 = &a1[2 * v96];
                  v98 = sub_1C5CB93C0((uint64_t)v97);
                  if (v98 < sub_1C5CB93C0((uint64_t)v88))
                  {
                    v99 = v88[1];
                    v120 = *v88;
                    v121 = v99;
                    do
                    {
                      v100 = v97;
                      v101 = v97[1];
                      *v88 = *v97;
                      v88[1] = v101;
                      if (!v96)
                        break;
                      v96 = (v96 - 1) >> 1;
                      v97 = &a1[2 * v96];
                      v102 = sub_1C5CB93C0((uint64_t)v97);
                      v88 = v100;
                    }
                    while (v102 < sub_1C5CB93C0((uint64_t)&v120));
                    v103 = v121;
                    *v100 = v120;
                    v100[1] = v103;
                  }
                }
              }
            }
            while (v11-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 <= 0x1000)
        {
          sub_1C5CBA094(v13, a1, v7);
        }
        else
        {
          sub_1C5CBA094(a1, v13, v7);
          sub_1C5CBA094(a1 + 2, v13 - 2, v116);
          sub_1C5CBA094(a1 + 4, &a1[2 * v12 + 2], v115);
          v9 = v117;
          sub_1C5CBA094(v13 - 2, v13, &a1[2 * v12 + 2]);
          v14 = a1[1];
          v120 = *a1;
          v121 = v14;
          v15 = v13[1];
          *a1 = *v13;
          a1[1] = v15;
          v16 = v121;
          *v13 = v120;
          v13[1] = v16;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = sub_1C5CB93C0((uint64_t)(a1 - 2));
          if (v17 >= sub_1C5CB93C0((uint64_t)a1))
          {
            v35 = a1[1];
            v118 = *a1;
            v119 = v35;
            v36 = sub_1C5CB93C0((uint64_t)&v118);
            if (v36 >= sub_1C5CB93C0((uint64_t)v7))
            {
              v38 = a1 + 2;
              do
              {
                v8 = v38;
                if (v38 >= v9)
                  break;
                v39 = sub_1C5CB93C0((uint64_t)&v118);
                v40 = sub_1C5CB93C0((uint64_t)v8);
                v38 = v8 + 2;
              }
              while (v39 >= v40);
            }
            else
            {
              v8 = a1;
              do
              {
                v8 += 2;
                v37 = sub_1C5CB93C0((uint64_t)&v118);
              }
              while (v37 >= sub_1C5CB93C0((uint64_t)v8));
            }
            v41 = v9;
            if (v8 < v9)
            {
              v41 = v9;
              do
              {
                v41 -= 2;
                v42 = sub_1C5CB93C0((uint64_t)&v118);
              }
              while (v42 < sub_1C5CB93C0((uint64_t)v41));
            }
            while (v8 < v41)
            {
              v43 = v8[1];
              v120 = *v8;
              v121 = v43;
              v44 = v41[1];
              *v8 = *v41;
              v8[1] = v44;
              v45 = v121;
              *v41 = v120;
              v41[1] = v45;
              do
              {
                v8 += 2;
                v46 = sub_1C5CB93C0((uint64_t)&v118);
              }
              while (v46 >= sub_1C5CB93C0((uint64_t)v8));
              do
              {
                v41 -= 2;
                v47 = sub_1C5CB93C0((uint64_t)&v118);
              }
              while (v47 < sub_1C5CB93C0((uint64_t)v41));
            }
            v48 = v8 - 2;
            if (v8 - 2 != a1)
            {
              v49 = *(v8 - 1);
              *a1 = *v48;
              a1[1] = v49;
            }
            a4 = 0;
            v50 = v119;
            *v48 = v118;
            *(v8 - 1) = v50;
            continue;
          }
        }
        v18 = 0;
        v19 = a1[1];
        v118 = *a1;
        v119 = v19;
        do
        {
          v18 += 2;
          v20 = sub_1C5CB93C0((uint64_t)&a1[v18]);
        }
        while (v20 < sub_1C5CB93C0((uint64_t)&v118));
        v21 = &a1[v18];
        v22 = (unint64_t)v9;
        if (v18 == 2)
        {
          v22 = (unint64_t)v9;
          do
          {
            if ((unint64_t)v21 >= v22)
              break;
            v22 -= 32;
            v24 = sub_1C5CB93C0(v22);
          }
          while (v24 >= sub_1C5CB93C0((uint64_t)&v118));
        }
        else
        {
          do
          {
            v22 -= 32;
            v23 = sub_1C5CB93C0(v22);
          }
          while (v23 >= sub_1C5CB93C0((uint64_t)&v118));
        }
        v8 = &a1[v18];
        if ((unint64_t)v21 < v22)
        {
          v25 = (__int128 *)v22;
          do
          {
            v26 = v8[1];
            v120 = *v8;
            v121 = v26;
            v27 = v25[1];
            *v8 = *v25;
            v8[1] = v27;
            v28 = v121;
            *v25 = v120;
            v25[1] = v28;
            do
            {
              v8 += 2;
              v29 = sub_1C5CB93C0((uint64_t)v8);
            }
            while (v29 < sub_1C5CB93C0((uint64_t)&v118));
            do
            {
              v25 -= 2;
              v30 = sub_1C5CB93C0((uint64_t)v25);
            }
            while (v30 >= sub_1C5CB93C0((uint64_t)&v118));
          }
          while (v8 < v25);
        }
        v31 = v8 - 2;
        if (v8 - 2 != a1)
        {
          v32 = *(v8 - 1);
          *a1 = *v31;
          a1[1] = v32;
        }
        v33 = v119;
        *v31 = v118;
        *(v8 - 1) = v33;
        if ((unint64_t)v21 < v22)
        {
LABEL_29:
          sub_1C5CB9770(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = sub_1C5CBA1A0(a1, v8 - 2);
        if (!sub_1C5CBA1A0(v8, v117))
        {
          if (v34)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(a2 - 1) < *(_QWORD *)(v8 + 8))
        {
          v90 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v90;
        }
        return;
      case 3:
        sub_1C5CBCB0C((__int128 *)v8, (__int128 *)(v8 + 16), (__int128 *)a2 - 1);
        return;
      case 4:
        sub_1C5CBCDB8(v8, v8 + 16, v8 + 32, (uint64_t)(a2 - 2));
        return;
      case 5:
        v36 = (__int128 *)(v8 + 16);
        v37 = (__int128 *)(v8 + 32);
        v38 = (__int128 *)(v8 + 48);
        sub_1C5CBCDB8(v8, v8 + 16, v8 + 32, v8 + 48);
        if (*(a2 - 1) < *(_QWORD *)(v8 + 56))
        {
          v39 = *v38;
          *v38 = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v39;
          if (*(_QWORD *)(v8 + 56) < *(_QWORD *)(v8 + 40))
          {
            v40 = *v37;
            *v37 = *v38;
            *v38 = v40;
            if (*(_QWORD *)(v8 + 40) < *(_QWORD *)(v8 + 24))
            {
              v41 = *v36;
              *v36 = *v37;
              *v37 = v41;
              if (*(_QWORD *)(v8 + 24) < *(_QWORD *)(v8 + 8))
              {
                v91 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v36;
                *v36 = v91;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v42 = (_QWORD *)(v8 + 16);
          v44 = (_QWORD *)v8 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = (_QWORD *)v8;
              do
              {
                v47 = v42;
                v48 = v46[3];
                if (v48 < v46[1])
                {
                  v49 = v46[2];
                  v50 = v45;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v50 + 16) = *(_OWORD *)(v8 + v50);
                    if (!v50)
                      break;
                    v51 = *(_QWORD *)(v8 + v50 - 8);
                    v50 -= 16;
                    if (v48 >= v51)
                    {
                      v52 = (_QWORD *)(v8 + v50 + 16);
                      goto LABEL_78;
                    }
                  }
                  v52 = (_QWORD *)v8;
LABEL_78:
                  *v52 = v49;
                  v52[1] = v48;
                }
                v42 = v47 + 2;
                v45 += 16;
                v46 = v47;
              }
              while (v47 + 2 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v82 = (uint64_t)v42;
              v83 = *(_QWORD *)(a1 + 24);
              if (v83 < *(_QWORD *)(a1 + 8))
              {
                v84 = *(_QWORD *)(a1 + 16);
                v85 = v82;
                do
                {
                  *(_OWORD *)v85 = *(_OWORD *)(v85 - 16);
                  v86 = *(_QWORD *)(v85 - 24);
                  v85 -= 16;
                }
                while (v83 < v86);
                *(_QWORD *)v85 = v84;
                *(_QWORD *)(v85 + 8) = v83;
              }
              v42 = (_QWORD *)(v82 + 16);
              a1 = v82;
            }
            while ((_QWORD *)(v82 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((_QWORD *)v8 != a2)
          {
            v53 = (unint64_t)(v10 - 2) >> 1;
            v54 = v53;
            do
            {
              v55 = v54;
              if (v53 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = (uint64_t *)(v8 + 16 * v56);
                if (2 * v55 + 2 < v10)
                {
                  v58 = v57[1];
                  v59 = v57[3];
                  v57 += 2 * (v58 < v59);
                  if (v58 < v59)
                    v56 = 2 * v55 + 2;
                }
                v60 = (uint64_t *)(v8 + 16 * v55);
                v61 = v60[1];
                if (v57[1] >= v61)
                {
                  v62 = *v60;
                  do
                  {
                    v63 = v57;
                    *(_OWORD *)v60 = *(_OWORD *)v57;
                    if (v53 < v56)
                      break;
                    v64 = (2 * v56) | 1;
                    v57 = (uint64_t *)(v8 + 16 * v64);
                    v65 = 2 * v56 + 2;
                    if (v65 < v10)
                    {
                      v66 = v57[1];
                      v67 = v57[3];
                      v57 += 2 * (v66 < v67);
                      if (v66 < v67)
                        v64 = v65;
                    }
                    v60 = v63;
                    v56 = v64;
                  }
                  while (v57[1] >= v61);
                  *v63 = v62;
                  v63[1] = v61;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            do
            {
              v68 = 0;
              v92 = *(_OWORD *)v8;
              v69 = (_OWORD *)v8;
              do
              {
                v70 = (uint64_t)&v69[v68 + 1];
                v71 = (2 * v68) | 1;
                v72 = 2 * v68 + 2;
                if (v72 < v10)
                {
                  v73 = *(_QWORD *)(v70 + 8);
                  v74 = *(_QWORD *)(v70 + 24);
                  v70 += 16 * (v73 < v74);
                  if (v73 < v74)
                    v71 = v72;
                }
                *v69 = *(_OWORD *)v70;
                v69 = (_OWORD *)v70;
                v68 = v71;
              }
              while (v71 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 2;
              if ((_QWORD *)v70 == a2)
              {
                *(_OWORD *)v70 = v92;
              }
              else
              {
                *(_OWORD *)v70 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v92;
                v75 = v70 - v8 + 16;
                if (v75 >= 17)
                {
                  v76 = (((unint64_t)v75 >> 4) - 2) >> 1;
                  v77 = (_QWORD *)(v8 + 16 * v76);
                  v78 = *(_QWORD *)(v70 + 8);
                  if (v77[1] < v78)
                  {
                    v79 = *(_QWORD *)v70;
                    do
                    {
                      v80 = v77;
                      *(_OWORD *)v70 = *(_OWORD *)v77;
                      if (!v76)
                        break;
                      v76 = (v76 - 1) >> 1;
                      v77 = (_QWORD *)(v8 + 16 * v76);
                      v70 = (uint64_t)v80;
                    }
                    while (v77[1] < v78);
                    *v80 = v79;
                    v80[1] = v78;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(v8 + 16 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          sub_1C5CBCB0C((__int128 *)(a1 + 16 * ((unint64_t)v10 >> 1)), (__int128 *)a1, (__int128 *)a2 - 1);
        }
        else
        {
          sub_1C5CBCB0C((__int128 *)a1, (__int128 *)(a1 + 16 * ((unint64_t)v10 >> 1)), (__int128 *)a2 - 1);
          sub_1C5CBCB0C((__int128 *)(a1 + 16), v12 - 1, (__int128 *)a2 - 2);
          sub_1C5CBCB0C((__int128 *)(a1 + 32), (__int128 *)(a1 + 16 + 16 * v11), (__int128 *)a2 - 3);
          sub_1C5CBCB0C(v12 - 1, v12, (__int128 *)(a1 + 16 + 16 * v11));
          v87 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v87;
        }
        --a3;
        v13 = *(_QWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v14 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(a1 - 8) < v14)
            goto LABEL_11;
          if (v14 >= *(a2 - 1))
          {
            v29 = a1 + 16;
            do
            {
              v8 = v29;
              if (v29 >= (unint64_t)a2)
                break;
              v30 = *(_QWORD *)(v29 + 8);
              v29 += 16;
            }
            while (v14 >= v30);
          }
          else
          {
            v27 = a1;
            do
            {
              v8 = v27 + 16;
              v28 = *(_QWORD *)(v27 + 24);
              v27 += 16;
            }
            while (v14 >= v28);
          }
          v31 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v32 = a2;
            do
            {
              v31 = (__int128 *)(v32 - 2);
              v33 = *(v32 - 1);
              v32 -= 2;
            }
            while (v14 < v33);
          }
          while (v8 < (unint64_t)v31)
          {
            v89 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v31;
            *v31 = v89;
            do
            {
              v34 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v14 >= v34);
            do
              v35 = *((_QWORD *)v31-- - 1);
            while (v14 < v35);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v14;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(a1 + v15 + 24);
          v15 += 16;
        }
        while (v16 < v14);
        v17 = a1 + v15;
        v18 = a2;
        if (v15 == 16)
        {
          v21 = (__int128 *)a2;
          while (v17 < (unint64_t)v21)
          {
            v19 = v21 - 1;
            v22 = *((_QWORD *)v21-- - 1);
            if (v22 < v14)
              goto LABEL_21;
          }
          v19 = v21;
        }
        else
        {
          do
          {
            v19 = (__int128 *)(v18 - 2);
            v20 = *(v18 - 1);
            v18 -= 2;
          }
          while (v20 >= v14);
        }
LABEL_21:
        v8 = v17;
        if (v17 < (unint64_t)v19)
        {
          v23 = v19;
          do
          {
            v88 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v23;
            *v23 = v88;
            do
            {
              v24 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v24 < v14);
            do
              v25 = *((_QWORD *)v23-- - 1);
            while (v25 >= v14);
          }
          while (v8 < (unint64_t)v23);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v14;
        if (v17 < (unint64_t)v19)
        {
LABEL_32:
          sub_1C5CBC3E8(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = sub_1C5CBCBB0(a1, (_QWORD *)(v8 - 16));
        if (!sub_1C5CBCBB0(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = (_QWORD *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v39 = *(_QWORD *)(a2 - 24);
        v38 = a2 - 24;
        if (v39 < *(_QWORD *)v8)
        {
          v108 = *(_QWORD *)(v8 + 16);
          v99 = *(_OWORD *)v8;
          v40 = *(_OWORD *)v38;
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v38 + 16);
          *(_OWORD *)v8 = v40;
          *(_QWORD *)(v38 + 16) = v108;
          *(_OWORD *)v38 = v99;
        }
        return;
      case 3:
        sub_1C5D3A6E8((__int128 *)v8, (uint64_t *)(v8 + 24), (uint64_t *)(a2 - 24));
        return;
      case 4:
        sub_1C5D3AA50(v8, (uint64_t *)(v8 + 24), (uint64_t *)(v8 + 48), a2 - 24);
        return;
      case 5:
        v41 = (__int128 *)(v8 + 24);
        v42 = (__int128 *)(v8 + 48);
        v43 = (__int128 *)(v8 + 72);
        sub_1C5D3AA50(v8, (uint64_t *)(v8 + 24), (uint64_t *)(v8 + 48), v8 + 72);
        v45 = *(_QWORD *)(a2 - 24);
        v44 = a2 - 24;
        if (v45 < *(_QWORD *)(v8 + 72))
        {
          v46 = *v43;
          v47 = *(_QWORD *)(v8 + 88);
          v48 = *(_QWORD *)(v44 + 16);
          *v43 = *(_OWORD *)v44;
          *(_QWORD *)(v8 + 88) = v48;
          *(_QWORD *)(v44 + 16) = v47;
          *(_OWORD *)v44 = v46;
          if (*(_QWORD *)v43 < *(_QWORD *)v42)
          {
            v49 = *(_QWORD *)(v8 + 64);
            v50 = *v42;
            *v42 = *v43;
            *(_QWORD *)(v8 + 64) = *(_QWORD *)(v8 + 88);
            *v43 = v50;
            *(_QWORD *)(v8 + 88) = v49;
            if (*(_QWORD *)v42 < *(_QWORD *)v41)
            {
              v51 = *(_QWORD *)(v8 + 40);
              v52 = *v41;
              *v41 = *v42;
              *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 64);
              *v42 = v52;
              *(_QWORD *)(v8 + 64) = v51;
              if (*(_QWORD *)(v8 + 24) < *(_QWORD *)v8)
              {
                v109 = *(_QWORD *)(v8 + 16);
                v100 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v41;
                *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 40);
                *v41 = v100;
                *(_QWORD *)(v8 + 40) = v109;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 575)
        {
          v53 = v8 + 24;
          v55 = v8 == a2 || v53 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              v57 = v8;
              do
              {
                v58 = v53;
                v59 = *(_QWORD *)(v57 + 24);
                if (v59 < *(_QWORD *)v57)
                {
                  v101 = *(_OWORD *)(v57 + 32);
                  v60 = v56;
                  while (1)
                  {
                    v61 = v8 + v60;
                    *(_OWORD *)(v61 + 24) = *(_OWORD *)(v8 + v60);
                    *(_QWORD *)(v61 + 40) = *(_QWORD *)(v8 + v60 + 16);
                    if (!v60)
                      break;
                    v60 -= 24;
                    if (v59 >= *(_QWORD *)(v61 - 24))
                    {
                      v62 = v8 + v60 + 24;
                      goto LABEL_75;
                    }
                  }
                  v62 = v8;
LABEL_75:
                  *(_QWORD *)v62 = v59;
                  *(_OWORD *)(v62 + 8) = v101;
                }
                v53 = v58 + 24;
                v56 += 24;
                v57 = v58;
              }
              while (v58 + 24 != a2);
            }
          }
          else if (!v55)
          {
            do
            {
              v90 = v53;
              v91 = *(_QWORD *)(a1 + 24);
              if (v91 < *(_QWORD *)a1)
              {
                v104 = *(_OWORD *)(a1 + 32);
                do
                {
                  *(_OWORD *)v53 = *(_OWORD *)(v53 - 24);
                  *(_QWORD *)(v53 + 16) = *(_QWORD *)(v53 - 8);
                  v92 = *(_QWORD *)(v53 - 48);
                  v53 -= 24;
                }
                while (v91 < v92);
                *(_QWORD *)v53 = v91;
                *(_OWORD *)(v53 + 8) = v104;
              }
              v53 = v90 + 24;
              a1 = v90;
            }
            while (v90 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v63 = (unint64_t)(v10 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = (_QWORD *)(v8 + 24 * v66);
                if (2 * v65 + 2 >= v10)
                {
                  v68 = *v67;
                }
                else
                {
                  v68 = v67[3];
                  v69 = *v67 < v68;
                  if (*v67 > v68)
                    v68 = *v67;
                  if (v69)
                  {
                    v67 += 3;
                    v66 = 2 * v65 + 2;
                  }
                }
                v70 = (_QWORD *)(v8 + 24 * v65);
                v71 = *v70;
                if (v68 >= *v70)
                {
                  v102 = *(_OWORD *)(v70 + 1);
                  do
                  {
                    v72 = v70;
                    v70 = v67;
                    v73 = *(_OWORD *)v67;
                    v72[2] = v67[2];
                    *(_OWORD *)v72 = v73;
                    if (v63 < v66)
                      break;
                    v74 = (2 * v66) | 1;
                    v67 = (_QWORD *)(v8 + 24 * v74);
                    v66 = 2 * v66 + 2;
                    if (v66 >= v10)
                    {
                      v75 = *v67;
                      v66 = v74;
                    }
                    else
                    {
                      v75 = *v67;
                      v76 = v67[3];
                      if (*v67 <= v76)
                        v75 = v67[3];
                      if (*v67 >= v76)
                        v66 = v74;
                      else
                        v67 += 3;
                    }
                  }
                  while (v75 >= v71);
                  *v70 = v71;
                  *(_OWORD *)(v70 + 1) = v102;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            do
            {
              v77 = 0;
              v110 = *(_QWORD *)(v8 + 16);
              v103 = *(_OWORD *)v8;
              v78 = v8;
              do
              {
                v79 = v78 + 24 * v77 + 24;
                v80 = (2 * v77) | 1;
                v81 = 2 * v77 + 2;
                if (v81 < v10 && *(_QWORD *)v79 < *(_QWORD *)(v79 + 24))
                {
                  v79 += 24;
                  v80 = v81;
                }
                v82 = *(_OWORD *)v79;
                *(_QWORD *)(v78 + 16) = *(_QWORD *)(v79 + 16);
                *(_OWORD *)v78 = v82;
                v78 = v79;
                v77 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 24;
              if (v79 == a2)
              {
                *(_QWORD *)(v79 + 16) = v110;
                *(_OWORD *)v79 = v103;
              }
              else
              {
                v83 = *(_OWORD *)a2;
                *(_QWORD *)(v79 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v79 = v83;
                *(_QWORD *)(a2 + 16) = v110;
                *(_OWORD *)a2 = v103;
                v84 = v79 - v8 + 24;
                if (v84 >= 25)
                {
                  v85 = (v84 / 0x18uLL - 2) >> 1;
                  v86 = v8 + 24 * v85;
                  v87 = *(_QWORD *)v79;
                  if (*(_QWORD *)v86 < *(_QWORD *)v79)
                  {
                    v95 = *(_OWORD *)(v79 + 8);
                    do
                    {
                      v88 = v79;
                      v79 = v86;
                      v89 = *(_OWORD *)v86;
                      *(_QWORD *)(v88 + 16) = *(_QWORD *)(v86 + 16);
                      *(_OWORD *)v88 = v89;
                      if (!v85)
                        break;
                      v85 = (v85 - 1) >> 1;
                      v86 = v8 + 24 * v85;
                    }
                    while (*(_QWORD *)v86 < v87);
                    *(_QWORD *)v79 = v87;
                    *(_OWORD *)(v79 + 8) = v95;
                  }
                }
              }
              v69 = v10-- <= 2;
            }
            while (!v69);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (uint64_t *)(v8 + 24 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0xC01)
        {
          sub_1C5D3A6E8((__int128 *)(a1 + 24 * v11), (uint64_t *)a1, (uint64_t *)(a2 - 24));
        }
        else
        {
          sub_1C5D3A6E8((__int128 *)a1, (uint64_t *)(a1 + 24 * v11), (uint64_t *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (uint64_t *)(a1 + 24 * v11 - 24);
          sub_1C5D3A6E8((__int128 *)(a1 + 24), v14, (uint64_t *)(a2 - 48));
          v15 = (uint64_t *)(a1 + 24 + 8 * v13);
          sub_1C5D3A6E8((__int128 *)(a1 + 48), v15, (uint64_t *)(a2 - 72));
          sub_1C5D3A6E8((__int128 *)v14, v12, v15);
          v105 = *(_QWORD *)(a1 + 16);
          v96 = *(_OWORD *)a1;
          v16 = v12[2];
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v16;
          v12[2] = v105;
          *(_OWORD *)v12 = v96;
        }
        --a3;
        v17 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 24) >= v17)
        {
          v94 = *(_OWORD *)(a1 + 8);
          if (v17 >= *(_QWORD *)(a2 - 24))
          {
            v31 = a1 + 24;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              v31 += 24;
            }
            while (v17 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v30 = *(_QWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v30);
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(_QWORD *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v33);
          }
          while (v8 < v32)
          {
            v107 = *(_QWORD *)(v8 + 16);
            v98 = *(_OWORD *)v8;
            v34 = *(_OWORD *)v32;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v32 + 16);
            *(_OWORD *)v8 = v34;
            *(_QWORD *)(v32 + 16) = v107;
            *(_OWORD *)v32 = v98;
            do
            {
              v35 = *(_QWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v35);
            do
            {
              v36 = *(_QWORD *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v36);
          }
          if (v8 - 24 != a1)
          {
            v37 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v37;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 24) = v17;
          *(_OWORD *)(v8 - 16) = v94;
          continue;
        }
        v18 = 0;
        v93 = *(_OWORD *)(a1 + 8);
        do
        {
          v19 = *(_QWORD *)(a1 + v18 + 24);
          v18 += 24;
        }
        while (v19 < v17);
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 24)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *(_QWORD *)(v21 - 24);
            v21 -= 24;
          }
          while (v23 >= v17);
        }
        else
        {
          do
          {
            v22 = *(_QWORD *)(v21 - 24);
            v21 -= 24;
          }
          while (v22 >= v17);
        }
        v8 = a1 + v18;
        if (v20 < v21)
        {
          v24 = v21;
          do
          {
            v106 = *(_QWORD *)(v8 + 16);
            v97 = *(_OWORD *)v8;
            v25 = *(_OWORD *)v24;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v24 + 16);
            *(_OWORD *)v8 = v25;
            *(_QWORD *)(v24 + 16) = v106;
            *(_OWORD *)v24 = v97;
            do
            {
              v26 = *(_QWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v26 < v17);
            do
            {
              v27 = *(_QWORD *)(v24 - 24);
              v24 -= 24;
            }
            while (v27 >= v17);
          }
          while (v8 < v24);
        }
        if (v8 - 24 != a1)
        {
          v28 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v28;
        }
        *(_QWORD *)(v8 - 24) = v17;
        *(_OWORD *)(v8 - 16) = v93;
        if (v20 < v21)
        {
LABEL_29:
          sub_1C5D39E70(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_1C5D3A7D8(a1, v8 - 24);
        if (!sub_1C5D3A7D8(v8, a2))
        {
          if (v29)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 24;
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

  v114 = (__int128 *)(a2 - 10);
  v115 = (__int128 *)(a2 - 5);
  v113 = (__int128 *)(a2 - 15);
  v7 = a1;
  v121 = (unint64_t)a2;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_QWORD *)(a1 + 32) < (uint64_t)*(a2 - 1))
        {
          v140 = *(void **)(a1 + 16);
          v132 = *(_OWORD *)a1;
          v53 = *(_OWORD *)(a2 - 5);
          *(_QWORD *)(a1 + 16) = *(a2 - 3);
          *(_OWORD *)a1 = v53;
          *(a2 - 3) = v140;
          *(_OWORD *)(a2 - 5) = v132;
          v54 = *(_OWORD *)(a1 + 24);
          *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v54;
        }
        return;
      case 3:
        sub_1C5E439B0((__int128 *)a1, (__int128 *)(a1 + 40), v115);
        return;
      case 4:
        sub_1C5E43D80(a1, a1 + 40, a1 + 80, (uint64_t)v115);
        return;
      case 5:
        sub_1C5E43E7C(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)v115);
        return;
      default:
        if (v8 <= 959)
        {
          v55 = (void **)(a1 + 40);
          v57 = (void **)a1 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = a1;
              do
              {
                v60 = v55;
                v61 = *(_QWORD *)(v59 + 72);
                if (*(_QWORD *)(v59 + 32) < v61)
                {
                  v62 = *v55;
                  *(_QWORD *)v133 = *(_QWORD *)(v59 + 48);
                  *(_QWORD *)&v133[7] = *(_QWORD *)(v59 + 55);
                  v63 = *(_BYTE *)(v59 + 63);
                  v55[1] = 0;
                  v55[2] = 0;
                  *v55 = 0;
                  v122 = *(_QWORD *)(v59 + 64);
                  v64 = v58;
                  while (1)
                  {
                    v65 = a1 + v64;
                    v66 = (void **)(a1 + v64 + 40);
                    if (*(char *)(a1 + v64 + 63) < 0)
                      operator delete(*v66);
                    *(_OWORD *)v66 = *(_OWORD *)v65;
                    *(_QWORD *)(a1 + v64 + 56) = *(_QWORD *)(v65 + 16);
                    *(_BYTE *)(v65 + 23) = 0;
                    *(_BYTE *)v65 = 0;
                    *(_OWORD *)(v65 + 64) = *(_OWORD *)(v65 + 24);
                    if (!v64)
                      break;
                    v67 = *(_QWORD *)(a1 + v64 - 8);
                    v64 -= 40;
                    if (v67 >= v61)
                    {
                      v68 = a1 + v64 + 40;
                      goto LABEL_86;
                    }
                  }
                  v68 = a1;
LABEL_86:
                  if (*(char *)(v68 + 23) < 0)
                    operator delete(*(void **)v68);
                  *(_QWORD *)v68 = v62;
                  *(_QWORD *)(v68 + 8) = *(_QWORD *)v133;
                  *(_QWORD *)(v68 + 15) = *(_QWORD *)&v133[7];
                  *(_BYTE *)(v68 + 23) = v63;
                  *(_QWORD *)(v68 + 24) = v122;
                  *(_QWORD *)(v68 + 32) = v61;
                }
                v55 = v60 + 5;
                v58 += 40;
                v59 = (uint64_t)v60;
              }
              while (v60 + 5 != a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v105 = v55;
              v106 = *(void **)(a1 + 72);
              if (*(_QWORD *)(a1 + 32) < (uint64_t)v106)
              {
                v107 = *v55;
                *(_QWORD *)v136 = *(_QWORD *)(a1 + 48);
                *(_QWORD *)&v136[7] = *(_QWORD *)(a1 + 55);
                v108 = *(_BYTE *)(a1 + 63);
                v55[1] = 0;
                v55[2] = 0;
                *v55 = 0;
                v109 = *(void **)(a1 + 64);
                v110 = v55;
                do
                {
                  if (*((char *)v110 + 23) < 0)
                    operator delete(*v110);
                  *(_OWORD *)v110 = *(_OWORD *)(v110 - 5);
                  v110[2] = *(v110 - 3);
                  *((_BYTE *)v110 - 40) = 0;
                  v111 = v110 - 5;
                  *((_BYTE *)v110 - 17) = 0;
                  *(_OWORD *)(v110 + 3) = *((_OWORD *)v110 - 1);
                  v112 = *(v110 - 6);
                  v110 -= 5;
                }
                while ((uint64_t)v112 < (uint64_t)v106);
                if (*((char *)v111 + 23) < 0)
                  operator delete(*v111);
                *v111 = v107;
                *(void **)((char *)v111 + 15) = *(void **)&v136[7];
                v111[1] = *(void **)v136;
                *((_BYTE *)v111 + 23) = v108;
                v111[3] = v109;
                v111[4] = v106;
              }
              v55 = v105 + 5;
              a1 = (uint64_t)v105;
            }
            while (v105 + 5 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((void **)a1 != a2)
          {
            v69 = (unint64_t)(v9 - 2) >> 1;
            v70 = v69;
            do
            {
              v71 = v70;
              if (v69 >= v70)
              {
                v72 = (2 * v70) | 1;
                v73 = a1 + 40 * v72;
                if (2 * v71 + 2 < v9)
                {
                  v74 = *(_QWORD *)(v73 + 72);
                  v75 = *(_QWORD *)(a1 + 40 * v72 + 32);
                  v73 += 40 * (v74 < v75);
                  if (v74 < v75)
                    v72 = 2 * v71 + 2;
                }
                v76 = *(_QWORD *)(a1 + 40 * v71 + 32);
                if (v76 >= *(_QWORD *)(v73 + 32))
                {
                  v77 = a1 + 40 * v71;
                  v123 = *(void **)v77;
                  *(_QWORD *)&v134[7] = *(_QWORD *)(v77 + 15);
                  *(_QWORD *)v134 = *(_QWORD *)(v77 + 8);
                  v118 = *(_BYTE *)(v77 + 23);
                  *(_QWORD *)v77 = 0;
                  *(_QWORD *)(v77 + 8) = 0;
                  *(_QWORD *)(v77 + 16) = 0;
                  v116 = *(_QWORD *)(v77 + 24);
                  do
                  {
                    v78 = v73;
                    if (*(char *)(v77 + 23) < 0)
                      operator delete(*(void **)v77);
                    v79 = *(_OWORD *)v78;
                    *(_QWORD *)(v77 + 16) = *(_QWORD *)(v78 + 16);
                    *(_OWORD *)v77 = v79;
                    *(_BYTE *)(v78 + 23) = 0;
                    *(_BYTE *)v78 = 0;
                    *(_OWORD *)(v77 + 24) = *(_OWORD *)(v78 + 24);
                    if (v69 < v72)
                      break;
                    v80 = (2 * v72) | 1;
                    v73 = a1 + 40 * v80;
                    if (2 * v72 + 2 < v9)
                    {
                      v81 = *(_QWORD *)(v73 + 72);
                      v82 = *(_QWORD *)(a1 + 40 * v80 + 32);
                      v73 += 40 * (v81 < v82);
                      if (v81 < v82)
                        v80 = 2 * v72 + 2;
                    }
                    v77 = v78;
                    v72 = v80;
                  }
                  while (v76 >= *(_QWORD *)(v73 + 32));
                  if (*(char *)(v78 + 23) < 0)
                    operator delete(*(void **)v78);
                  *(_QWORD *)v78 = v123;
                  *(_QWORD *)(v78 + 8) = *(_QWORD *)v134;
                  *(_QWORD *)(v78 + 15) = *(_QWORD *)&v134[7];
                  *(_BYTE *)(v78 + 23) = v118;
                  *(_QWORD *)(v78 + 24) = v116;
                  *(_QWORD *)(v78 + 32) = v76;
                }
              }
              v70 = v71 - 1;
            }
            while (v71);
            do
            {
              if (v9 < 2)
                break;
              v83 = a2;
              v84 = 0;
              v119 = *(void **)a1;
              *(_QWORD *)v128 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v128[7] = *(_QWORD *)(a1 + 15);
              v124 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v85 = a1;
              v86 = *(void **)(a1 + 24);
              v87 = *(void **)(a1 + 32);
              do
              {
                v88 = v84 + 1;
                v89 = v85 + 40 * (v84 + 1);
                v90 = 2 * v84;
                v84 = (2 * v84) | 1;
                v91 = v90 + 2;
                if (v90 + 2 < v9)
                {
                  v92 = *(_QWORD *)(v89 + 72);
                  v93 = *(_QWORD *)(v85 + 40 * v88 + 32);
                  v89 += 40 * (v92 < v93);
                  if (v92 < v93)
                    v84 = v91;
                }
                if (*(char *)(v85 + 23) < 0)
                  operator delete(*(void **)v85);
                v94 = *(_OWORD *)v89;
                *(_QWORD *)(v85 + 16) = *(_QWORD *)(v89 + 16);
                *(_OWORD *)v85 = v94;
                *(_BYTE *)(v89 + 23) = 0;
                *(_BYTE *)v89 = 0;
                *(_OWORD *)(v85 + 24) = *(_OWORD *)(v89 + 24);
                v85 = v89;
              }
              while (v84 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
              a2 = v83 - 5;
              v95 = *(char *)(v89 + 23);
              if ((void **)v89 == v83 - 5)
              {
                if (v95 < 0)
                  operator delete(*(void **)v89);
                *(_QWORD *)v89 = v119;
                *(_QWORD *)(v89 + 8) = *(_QWORD *)v128;
                *(_QWORD *)(v89 + 15) = *(_QWORD *)&v128[7];
                *(_BYTE *)(v89 + 23) = v124;
                *(_QWORD *)(v89 + 24) = v86;
                *(_QWORD *)(v89 + 32) = v87;
              }
              else
              {
                if (v95 < 0)
                  operator delete(*(void **)v89);
                v96 = *(_OWORD *)a2;
                *(_QWORD *)(v89 + 16) = *(v83 - 3);
                *(_OWORD *)v89 = v96;
                *((_BYTE *)v83 - 17) = 0;
                *((_BYTE *)v83 - 40) = 0;
                *(_OWORD *)(v89 + 24) = *((_OWORD *)v83 - 1);
                if (*((char *)v83 - 17) < 0)
                  operator delete(*a2);
                *(v83 - 5) = v119;
                *(void **)((char *)v83 - 25) = *(void **)&v128[7];
                *(v83 - 4) = *(void **)v128;
                *((_BYTE *)v83 - 17) = v124;
                *(v83 - 2) = v86;
                *(v83 - 1) = v87;
                v97 = v89 + 40 - a1;
                if (v97 >= 41)
                {
                  v98 = (v97 / 0x28uLL - 2) >> 1;
                  v99 = *(_QWORD *)(v89 + 32);
                  if (v99 < *(_QWORD *)(a1 + 40 * v98 + 32))
                  {
                    v120 = *(void **)v89;
                    *(_QWORD *)v135 = *(_QWORD *)(v89 + 8);
                    *(_QWORD *)&v135[7] = *(_QWORD *)(v89 + 15);
                    v125 = *(_BYTE *)(v89 + 23);
                    *(_QWORD *)(v89 + 8) = 0;
                    *(_QWORD *)(v89 + 16) = 0;
                    *(_QWORD *)v89 = 0;
                    v100 = *(_QWORD *)(v89 + 24);
                    do
                    {
                      v101 = v98;
                      if (*(char *)(v89 + 23) < 0)
                        operator delete(*(void **)v89);
                      v102 = a1 + 40 * v101;
                      v103 = *(_OWORD *)v102;
                      *(_QWORD *)(v89 + 16) = *(_QWORD *)(v102 + 16);
                      *(_OWORD *)v89 = v103;
                      *(_BYTE *)(v102 + 23) = 0;
                      *(_BYTE *)v102 = 0;
                      *(_OWORD *)(v89 + 24) = *(_OWORD *)(v102 + 24);
                      if (!v101)
                        break;
                      v98 = (v101 - 1) >> 1;
                      v89 = a1 + 40 * v101;
                    }
                    while (v99 < *(_QWORD *)(a1 + 40 * v98 + 32));
                    if (*(char *)(v102 + 23) < 0)
                      operator delete(*(void **)v102);
                    *(_QWORD *)v102 = v120;
                    *(_QWORD *)(v102 + 15) = *(_QWORD *)&v135[7];
                    *(_QWORD *)(v102 + 8) = *(_QWORD *)v135;
                    *(_BYTE *)(v102 + 23) = v125;
                    *(_QWORD *)(v102 + 24) = v100;
                    *(_QWORD *)(a1 + 40 * v101 + 32) = v99;
                  }
                }
              }
            }
            while (v9-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = a1 + 40 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0x1401)
        {
          sub_1C5E439B0((__int128 *)v11, (__int128 *)a1, v115);
        }
        else
        {
          sub_1C5E439B0((__int128 *)a1, (__int128 *)v11, v115);
          v12 = 5 * v10;
          v13 = a1 + 8 * v12;
          sub_1C5E439B0((__int128 *)(a1 + 40), (__int128 *)(v13 - 40), v114);
          sub_1C5E439B0((__int128 *)(a1 + 80), (__int128 *)(a1 + 40 + 8 * v12), v113);
          sub_1C5E439B0((__int128 *)(v13 - 40), (__int128 *)v11, (__int128 *)(a1 + 40 + 8 * v12));
          v137 = *(_QWORD *)(a1 + 16);
          v129 = *(_OWORD *)a1;
          v14 = *(_QWORD *)(v11 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v11;
          *(_QWORD *)(a1 + 16) = v14;
          *(_QWORD *)(v11 + 16) = v137;
          *(_OWORD *)v11 = v129;
          v15 = *(_OWORD *)(a1 + 24);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v13 + 24) = v15;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(_QWORD *)(a1 + 32);
          if (v17 < *(_QWORD *)(a1 - 8))
          {
            v16 = a3;
            goto LABEL_12;
          }
          v37 = *(_QWORD *)a1;
          *(_QWORD *)v127 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v127[7] = *(_QWORD *)(a1 + 15);
          v38 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          a2 = (void **)v121;
          if (*(_QWORD *)(v121 - 8) >= v17)
          {
            v41 = a1 + 40;
            do
            {
              v7 = v41;
              if (v41 >= v121)
                break;
              v42 = *(_QWORD *)(v41 + 32);
              v41 += 40;
            }
            while (v42 >= v17);
          }
          else
          {
            v39 = a1;
            do
            {
              v7 = v39 + 40;
              v40 = *(_QWORD *)(v39 + 72);
              v39 += 40;
            }
            while (v40 >= v17);
          }
          v43 = v121;
          if (v7 < v121)
          {
            v44 = v121;
            do
            {
              v43 = v44 - 40;
              v45 = *(_QWORD *)(v44 - 8);
              v44 -= 40;
            }
            while (v45 < v17);
          }
          v46 = *(_QWORD *)(a1 + 24);
          while (v7 < v43)
          {
            v139 = *(_QWORD *)(v7 + 16);
            v131 = *(_OWORD *)v7;
            v47 = *(_OWORD *)v43;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v43 + 16);
            *(_OWORD *)v7 = v47;
            *(_QWORD *)(v43 + 16) = v139;
            *(_OWORD *)v43 = v131;
            v48 = *(_OWORD *)(v7 + 24);
            *(_OWORD *)(v7 + 24) = *(_OWORD *)(v43 + 24);
            *(_OWORD *)(v43 + 24) = v48;
            do
            {
              v49 = *(_QWORD *)(v7 + 72);
              v7 += 40;
            }
            while (v49 >= v17);
            do
            {
              v50 = *(_QWORD *)(v43 - 8);
              v43 -= 40;
            }
            while (v50 < v17);
          }
          v51 = (void **)(v7 - 40);
          if (v7 - 40 != a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v52 = *(_OWORD *)v51;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 24);
            *(_OWORD *)a1 = v52;
            *(_BYTE *)(v7 - 17) = 0;
            *(_BYTE *)(v7 - 40) = 0;
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 - 16);
          }
          if (*(char *)(v7 - 17) < 0)
            operator delete(*v51);
          a4 = 0;
          *(_QWORD *)(v7 - 40) = v37;
          *(_QWORD *)(v7 - 25) = *(_QWORD *)&v127[7];
          *(_QWORD *)(v7 - 32) = *(_QWORD *)v127;
          *(_BYTE *)(v7 - 17) = v38;
          *(_QWORD *)(v7 - 16) = v46;
          *(_QWORD *)(v7 - 8) = v17;
          continue;
        }
        v16 = a3;
        v17 = *(_QWORD *)(a1 + 32);
LABEL_12:
        v18 = 0;
        v19 = *(_QWORD *)a1;
        *(_QWORD *)v126 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v126[7] = *(_QWORD *)(a1 + 15);
        v20 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v21 = *(_QWORD *)(a1 + 24);
        do
        {
          v22 = *(_QWORD *)(a1 + v18 + 72);
          v18 += 40;
        }
        while (v17 < v22);
        v23 = a1 + v18;
        v24 = v121;
        if (v18 == 40)
        {
          v27 = v121;
          while (v23 < v27)
          {
            v25 = v27 - 40;
            v28 = *(_QWORD *)(v27 - 8);
            v27 -= 40;
            if (v17 < v28)
              goto LABEL_22;
          }
          v25 = v27;
        }
        else
        {
          do
          {
            v25 = v24 - 40;
            v26 = *(_QWORD *)(v24 - 8);
            v24 -= 40;
          }
          while (v17 >= v26);
        }
LABEL_22:
        v7 = v23;
        if (v23 < v25)
        {
          v29 = v25;
          do
          {
            v138 = *(_QWORD *)(v7 + 16);
            v130 = *(_OWORD *)v7;
            v30 = *(_OWORD *)v29;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v29 + 16);
            *(_OWORD *)v7 = v30;
            *(_QWORD *)(v29 + 16) = v138;
            *(_OWORD *)v29 = v130;
            v31 = *(_OWORD *)(v7 + 24);
            *(_OWORD *)(v7 + 24) = *(_OWORD *)(v29 + 24);
            *(_OWORD *)(v29 + 24) = v31;
            do
            {
              v32 = *(_QWORD *)(v7 + 72);
              v7 += 40;
            }
            while (v17 < v32);
            do
            {
              v33 = *(_QWORD *)(v29 - 8);
              v29 -= 40;
            }
            while (v17 >= v33);
          }
          while (v7 < v29);
        }
        v34 = (void **)(v7 - 40);
        if (v7 - 40 != a1)
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v35 = *(_OWORD *)v34;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 24);
          *(_OWORD *)a1 = v35;
          *(_BYTE *)(v7 - 17) = 0;
          *(_BYTE *)(v7 - 40) = 0;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 - 16);
        }
        if (*(char *)(v7 - 17) < 0)
          operator delete(*v34);
        *(_QWORD *)(v7 - 40) = v19;
        *(_QWORD *)(v7 - 25) = *(_QWORD *)&v126[7];
        *(_QWORD *)(v7 - 32) = *(_QWORD *)v126;
        *(_BYTE *)(v7 - 17) = v20;
        *(_QWORD *)(v7 - 16) = v21;
        *(_QWORD *)(v7 - 8) = v17;
        a3 = v16;
        a2 = (void **)v121;
        if (v23 < v25)
        {
LABEL_37:
          sub_1C5E42DC0(a1, v7 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = sub_1C5E43B10(a1, v7 - 40);
        if (!sub_1C5E43B10(v7, v121))
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = (void **)(v7 - 40);
        if (!v36)
          goto LABEL_1;
        return;
    }
  }
}

  v123 = (__int128 *)((char *)a2 - 88);
  v121 = (__int128 *)((char *)a2 - 264);
  v122 = a2 - 11;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v52 = (__int128 *)((char *)a2 - 88);
        if (*((double *)a2 - 11) < *(double *)a1)
        {
          sub_1C5E45E5C((uint64_t)&v131, (__int128 *)a1);
          v53 = *v52;
          v54 = *(__int128 *)((char *)a2 - 72);
          *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 - 7);
          *(_OWORD *)a1 = v53;
          *(_OWORD *)(a1 + 16) = v54;
          std::string::operator=((std::string *)(a1 + 40), (const std::string *)a2 - 2);
          std::string::operator=((std::string *)(a1 + 64), (const std::string *)a2 - 1);
          v55 = v133;
          v56 = v132;
          *v52 = v131;
          *(__int128 *)((char *)a2 - 72) = v56;
          *((_QWORD *)a2 - 7) = v55;
          std::string::operator=((std::string *)a2 - 2, &v134);
          std::string::operator=((std::string *)a2 - 1, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v134.__r_.__value_.__l.__data_);
        }
        return;
      case 3:
        sub_1C5E46D4C(a1, a1 + 88, v123);
        return;
      case 4:
        sub_1C5E472FC(a1, a1 + 88, a1 + 176, v123);
        return;
      case 5:
        sub_1C5E47524(a1, a1 + 88, a1 + 176, a1 + 264, v123);
        return;
      default:
        if (v8 > 2111)
        {
          if (!a3)
          {
            if ((__int128 *)a1 != a2)
            {
              v70 = (unint64_t)(v9 - 2) >> 1;
              v71 = v70;
              v120 = a2;
              do
              {
                v72 = v71;
                if (v70 >= v71)
                {
                  v73 = (2 * v71) | 1;
                  v74 = a1 + 88 * v73;
                  if (2 * v71 + 2 < v9 && *(double *)v74 < *(double *)(v74 + 88))
                  {
                    v74 += 88;
                    v73 = 2 * v71 + 2;
                  }
                  v75 = a1 + 88 * v71;
                  if (*(double *)v74 >= *(double *)v75)
                  {
                    sub_1C5E45E5C((uint64_t)&v131, (__int128 *)(a1 + 88 * v71));
                    do
                    {
                      v76 = v74;
                      v77 = *(_OWORD *)v74;
                      v78 = *(_OWORD *)(v74 + 16);
                      *(_QWORD *)(v75 + 32) = *(_QWORD *)(v74 + 32);
                      *(_OWORD *)v75 = v77;
                      *(_OWORD *)(v75 + 16) = v78;
                      v79 = (std::string *)(v74 + 40);
                      std::string::operator=((std::string *)(v75 + 40), (const std::string *)(v74 + 40));
                      v80 = (std::string *)(v74 + 64);
                      std::string::operator=((std::string *)(v75 + 64), (const std::string *)(v74 + 64));
                      if (v70 < v73)
                        break;
                      v81 = 2 * v73;
                      v73 = (2 * v73) | 1;
                      v74 = a1 + 88 * v73;
                      v82 = v81 + 2;
                      if (v82 < v9 && *(double *)v74 < *(double *)(v74 + 88))
                      {
                        v74 += 88;
                        v73 = v82;
                      }
                      v75 = v76;
                    }
                    while (*(double *)v74 >= *(double *)&v131);
                    v83 = v131;
                    v84 = v132;
                    *(_QWORD *)(v76 + 32) = v133;
                    *(_OWORD *)v76 = v83;
                    *(_OWORD *)(v76 + 16) = v84;
                    std::string::operator=(v79, &v134);
                    std::string::operator=(v80, &__p);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    a2 = v120;
                    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v134.__r_.__value_.__l.__data_);
                  }
                }
                v71 = v72 - 1;
              }
              while (v72);
              do
              {
                if (v9 < 2)
                  break;
                v85 = a2;
                sub_1C5E45E5C((uint64_t)&v126, (__int128 *)a1);
                v86 = 0;
                v87 = a1;
                do
                {
                  v88 = v87;
                  v87 += 88 * v86 + 88;
                  v89 = 2 * v86;
                  v86 = (2 * v86) | 1;
                  v90 = v89 + 2;
                  if (v90 < v9 && *(double *)v87 < *(double *)(v87 + 88))
                  {
                    v87 += 88;
                    v86 = v90;
                  }
                  v91 = *(_OWORD *)v87;
                  v92 = *(_OWORD *)(v87 + 16);
                  *(_QWORD *)(v88 + 32) = *(_QWORD *)(v87 + 32);
                  *(_OWORD *)v88 = v91;
                  *(_OWORD *)(v88 + 16) = v92;
                  std::string::operator=((std::string *)(v88 + 40), (const std::string *)(v87 + 40));
                  std::string::operator=((std::string *)(v88 + 64), (const std::string *)(v87 + 64));
                }
                while (v86 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                v93 = (__int128 *)((char *)v85 - 88);
                if ((__int128 *)v87 == (__int128 *)((char *)v85 - 88))
                {
                  v108 = v126;
                  v109 = v127;
                  *(_QWORD *)(v87 + 32) = v128;
                  *(_OWORD *)v87 = v108;
                  *(_OWORD *)(v87 + 16) = v109;
                  std::string::operator=((std::string *)(v87 + 40), &v129);
                  std::string::operator=((std::string *)(v87 + 64), &v130);
                }
                else
                {
                  v94 = *v93;
                  v95 = *(__int128 *)((char *)v85 - 72);
                  *(_QWORD *)(v87 + 32) = *((_QWORD *)v85 - 7);
                  *(_OWORD *)v87 = v94;
                  *(_OWORD *)(v87 + 16) = v95;
                  std::string::operator=((std::string *)(v87 + 40), (const std::string *)v85 - 2);
                  std::string::operator=((std::string *)(v87 + 64), (const std::string *)v85 - 1);
                  v96 = v128;
                  v97 = v127;
                  *v93 = v126;
                  *(__int128 *)((char *)v85 - 72) = v97;
                  *((_QWORD *)v85 - 7) = v96;
                  std::string::operator=((std::string *)v85 - 2, &v129);
                  std::string::operator=((std::string *)v85 - 1, &v130);
                  v98 = v87 - a1 + 88;
                  if (v98 >= 89)
                  {
                    v99 = (v98 / 0x58uLL - 2) >> 1;
                    v100 = a1 + 88 * v99;
                    if (*(double *)v100 < *(double *)v87)
                    {
                      sub_1C5E45E5C((uint64_t)&v131, (__int128 *)v87);
                      do
                      {
                        v101 = v100;
                        v102 = *(_OWORD *)v100;
                        v103 = *(_OWORD *)(v100 + 16);
                        *(_QWORD *)(v87 + 32) = *(_QWORD *)(v100 + 32);
                        *(_OWORD *)v87 = v102;
                        *(_OWORD *)(v87 + 16) = v103;
                        v104 = (std::string *)(v100 + 40);
                        std::string::operator=((std::string *)(v87 + 40), (const std::string *)(v100 + 40));
                        v105 = (std::string *)(v100 + 64);
                        std::string::operator=((std::string *)(v87 + 64), (const std::string *)(v100 + 64));
                        if (!v99)
                          break;
                        v99 = (v99 - 1) >> 1;
                        v100 = a1 + 88 * v99;
                        v87 = v101;
                      }
                      while (*(double *)v100 < *(double *)&v131);
                      v106 = v131;
                      v107 = v132;
                      *(_QWORD *)(v101 + 32) = v133;
                      *(_OWORD *)v101 = v106;
                      *(_OWORD *)(v101 + 16) = v107;
                      std::string::operator=(v104, &v134);
                      std::string::operator=(v105, &__p);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v134.__r_.__value_.__l.__data_);
                    }
                  }
                }
                if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v130.__r_.__value_.__l.__data_);
                if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v129.__r_.__value_.__l.__data_);
                a2 = v93;
              }
              while (v9-- > 2);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = a1 + 88 * ((unint64_t)v9 >> 1);
          if ((unint64_t)v8 < 0x2C01)
          {
            sub_1C5E46D4C(v11, a1, v123);
          }
          else
          {
            sub_1C5E46D4C(a1, v11, v123);
            v12 = 88 * v10;
            sub_1C5E46D4C(a1 + 88, a1 + v12 - 88, v122);
            sub_1C5E46D4C(a1 + 176, a1 + 88 + v12, v121);
            sub_1C5E46D4C(a1 + v12 - 88, v11, (__int128 *)(a1 + 88 + v12));
            sub_1C5E45E5C((uint64_t)&v131, (__int128 *)a1);
            v13 = *(_OWORD *)v11;
            v14 = *(_OWORD *)(v11 + 16);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v11 + 32);
            *(_OWORD *)a1 = v13;
            *(_OWORD *)(a1 + 16) = v14;
            std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a1 + v12 + 40));
            std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a1 + v12 + 64));
            v15 = v133;
            v16 = v132;
            *(_OWORD *)v11 = v131;
            *(_OWORD *)(v11 + 16) = v16;
            *(_QWORD *)(v11 + 32) = v15;
            std::string::operator=((std::string *)(a1 + v12 + 40), &v134);
            std::string::operator=((std::string *)(a1 + v12 + 64), &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
          }
          a3 = (std::string *)((char *)a3 - 1);
          if ((a4 & 1) == 0 && *(double *)(a1 - 88) >= *(double *)a1)
          {
            sub_1C5E45E5C((uint64_t)&v126, (__int128 *)a1);
            if (*(double *)&v126 >= *(double *)v123)
            {
              v38 = a1 + 88;
              do
              {
                v7 = v38;
                if (v38 >= (unint64_t)a2)
                  break;
                v38 += 88;
              }
              while (*(double *)&v126 >= *(double *)v7);
            }
            else
            {
              v7 = a1;
              do
              {
                v37 = *(double *)(v7 + 88);
                v7 += 88;
              }
              while (*(double *)&v126 >= v37);
            }
            v39 = a2;
            if (v7 < (unint64_t)a2)
            {
              v39 = a2;
              do
              {
                v40 = *((double *)v39 - 11);
                v39 = (__int128 *)((char *)v39 - 88);
              }
              while (*(double *)&v126 < v40);
            }
            while (v7 < (unint64_t)v39)
            {
              sub_1C5E45E5C((uint64_t)&v131, (__int128 *)v7);
              v41 = *v39;
              v42 = v39[1];
              *(_QWORD *)(v7 + 32) = *((_QWORD *)v39 + 4);
              *(_OWORD *)v7 = v41;
              *(_OWORD *)(v7 + 16) = v42;
              std::string::operator=((std::string *)(v7 + 40), (const std::string *)((char *)v39 + 40));
              std::string::operator=((std::string *)(v7 + 64), (const std::string *)(v39 + 4));
              v43 = v133;
              v44 = v132;
              *v39 = v131;
              v39[1] = v44;
              *((_QWORD *)v39 + 4) = v43;
              std::string::operator=((std::string *)((char *)v39 + 40), &v134);
              std::string::operator=((std::string *)(v39 + 4), &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v134.__r_.__value_.__l.__data_);
              do
              {
                v45 = *(double *)(v7 + 88);
                v7 += 88;
              }
              while (*(double *)&v126 >= v45);
              do
              {
                v46 = *((double *)v39 - 11);
                v39 = (__int128 *)((char *)v39 - 88);
              }
              while (*(double *)&v126 < v46);
            }
            v47 = (__int128 *)(v7 - 88);
            if (v7 - 88 != a1)
            {
              v48 = *v47;
              v49 = *(_OWORD *)(v7 - 72);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 56);
              *(_OWORD *)a1 = v48;
              *(_OWORD *)(a1 + 16) = v49;
              std::string::operator=((std::string *)(a1 + 40), (const std::string *)(v7 - 48));
              std::string::operator=((std::string *)(a1 + 64), (const std::string *)(v7 - 24));
            }
            v50 = v126;
            v51 = v127;
            *(_QWORD *)(v7 - 56) = v128;
            *v47 = v50;
            *(_OWORD *)(v7 - 72) = v51;
            std::string::operator=((std::string *)(v7 - 48), &v129);
            std::string::operator=((std::string *)(v7 - 24), &v130);
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v130.__r_.__value_.__l.__data_);
            if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v129.__r_.__value_.__l.__data_);
            goto LABEL_41;
          }
          v125 = a3;
          sub_1C5E45E5C((uint64_t)&v126, (__int128 *)a1);
          v17 = 0;
          do
          {
            v18 = *(double *)(a1 + v17 + 88);
            v17 += 88;
          }
          while (v18 < *(double *)&v126);
          v19 = a1 + v17;
          v20 = a2;
          if (v17 == 88)
          {
            do
            {
              if (v19 >= (unint64_t)a2)
                break;
              v22 = *((double *)a2 - 11);
              a2 = (__int128 *)((char *)a2 - 88);
            }
            while (v22 >= *(double *)&v126);
          }
          else
          {
            do
            {
              v21 = *((double *)a2 - 11);
              a2 = (__int128 *)((char *)a2 - 88);
            }
            while (v21 >= *(double *)&v126);
          }
          v7 = a1 + v17;
          if (v19 < (unint64_t)a2)
          {
            v23 = a2;
            do
            {
              sub_1C5E45E5C((uint64_t)&v131, (__int128 *)v7);
              v24 = *v23;
              v25 = v23[1];
              *(_QWORD *)(v7 + 32) = *((_QWORD *)v23 + 4);
              *(_OWORD *)v7 = v24;
              *(_OWORD *)(v7 + 16) = v25;
              std::string::operator=((std::string *)(v7 + 40), (const std::string *)((char *)v23 + 40));
              std::string::operator=((std::string *)(v7 + 64), (const std::string *)(v23 + 4));
              v26 = v133;
              v27 = v132;
              *v23 = v131;
              v23[1] = v27;
              *((_QWORD *)v23 + 4) = v26;
              std::string::operator=((std::string *)((char *)v23 + 40), &v134);
              std::string::operator=((std::string *)(v23 + 4), &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v134.__r_.__value_.__l.__data_);
              do
              {
                v28 = *(double *)(v7 + 88);
                v7 += 88;
              }
              while (v28 < *(double *)&v126);
              do
              {
                v29 = *((double *)v23 - 11);
                v23 = (__int128 *)((char *)v23 - 88);
              }
              while (v29 >= *(double *)&v126);
            }
            while (v7 < (unint64_t)v23);
          }
          v30 = (__int128 *)(v7 - 88);
          if (v7 - 88 != a1)
          {
            v31 = *v30;
            v32 = *(_OWORD *)(v7 - 72);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 56);
            *(_OWORD *)a1 = v31;
            *(_OWORD *)(a1 + 16) = v32;
            std::string::operator=((std::string *)(a1 + 40), (const std::string *)(v7 - 48));
            std::string::operator=((std::string *)(a1 + 64), (const std::string *)(v7 - 24));
          }
          v33 = v126;
          v34 = v127;
          *(_QWORD *)(v7 - 56) = v128;
          *v30 = v33;
          *(_OWORD *)(v7 - 72) = v34;
          std::string::operator=((std::string *)(v7 - 48), &v129);
          std::string::operator=((std::string *)(v7 - 24), &v130);
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v130.__r_.__value_.__l.__data_);
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v129.__r_.__value_.__l.__data_);
          v35 = v19 >= (unint64_t)a2;
          a2 = v20;
          a3 = v125;
          if (!v35)
            goto LABEL_40;
          v36 = sub_1C5E47048(a1, (__int128 *)(v7 - 88));
          if (!sub_1C5E47048(v7, a2))
          {
            if (v36)
              continue;
LABEL_40:
            sub_1C5E460D8(a1, v7 - 88, v125, a4 & 1);
LABEL_41:
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v7 - 88);
          if (v36)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((__int128 *)a1 != a2)
          {
            v57 = (__int128 *)(a1 + 88);
            if ((__int128 *)(a1 + 88) != a2)
            {
              v58 = 0;
              v59 = (double *)a1;
              do
              {
                v60 = v59[11];
                v61 = *v59;
                v59 = (double *)v57;
                if (v60 < v61)
                {
                  v62 = a2;
                  sub_1C5E45E5C((uint64_t)&v131, v57);
                  v63 = v58;
                  while (1)
                  {
                    v64 = a1 + v63;
                    v65 = *(_OWORD *)(a1 + v63 + 16);
                    *(_OWORD *)(v64 + 88) = *(_OWORD *)(a1 + v63);
                    *(_OWORD *)(v64 + 104) = v65;
                    *(_QWORD *)(v64 + 120) = *(_QWORD *)(a1 + v63 + 32);
                    v66 = (std::string *)(a1 + v63 + 40);
                    std::string::operator=((std::string *)(a1 + v63 + 128), v66);
                    std::string::operator=((std::string *)(v64 + 152), (const std::string *)(v64 + 64));
                    if (!v63)
                      break;
                    v63 -= 88;
                    if (*(double *)&v131 >= *(double *)(v64 - 88))
                    {
                      v67 = a1 + v63 + 88;
                      goto LABEL_87;
                    }
                  }
                  v67 = a1;
LABEL_87:
                  v68 = v131;
                  v69 = v132;
                  *(_QWORD *)(v67 + 32) = v133;
                  *(_OWORD *)v67 = v68;
                  *(_OWORD *)(v67 + 16) = v69;
                  std::string::operator=(v66, &v134);
                  std::string::operator=((std::string *)(v64 + 64), &__p);
                  a2 = v62;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v134.__r_.__value_.__l.__data_);
                }
                v57 = (__int128 *)(v59 + 11);
                v58 += 88;
              }
              while (v59 + 11 != (double *)a2);
            }
          }
        }
        else if ((__int128 *)a1 != a2)
        {
          v111 = (__int128 *)(a1 + 88);
          if ((__int128 *)(a1 + 88) != a2)
          {
            v112 = (std::string *)(a1 + 152);
            do
            {
              v113 = *(double *)(a1 + 88);
              v114 = *(double *)a1;
              a1 = (uint64_t)v111;
              if (v113 < v114)
              {
                sub_1C5E45E5C((uint64_t)&v131, v111);
                v115 = v112;
                do
                {
                  v116 = v115;
                  v117 = *(_OWORD *)&v115[-6].__r_.__value_.__r.__words[1];
                  *(_OWORD *)&v115[-3].__r_.__value_.__r.__words[1] = *(_OWORD *)&v115[-7].__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v115[-2].__r_.__value_.__l.__data_ = v117;
                  v115[-2].__r_.__value_.__r.__words[2] = v115[-5].__r_.__value_.__r.__words[0];
                  std::string::operator=(v115 - 1, (std::string *)((char *)v115 - 112));
                  v115 = (std::string *)((char *)v115 - 88);
                  std::string::operator=(v116, v115);
                }
                while (*(double *)&v131 < *(double *)&v116[-10].__r_.__value_.__l.__data_);
                v118 = v131;
                v119 = v132;
                v115[-2].__r_.__value_.__r.__words[2] = v133;
                *(_OWORD *)&v115[-3].__r_.__value_.__r.__words[1] = v118;
                *(_OWORD *)&v115[-2].__r_.__value_.__l.__data_ = v119;
                std::string::operator=(v115 - 1, &v134);
                std::string::operator=(v115, &__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v134.__r_.__value_.__l.__data_);
              }
              v111 = (__int128 *)(a1 + 88);
              v112 = (std::string *)((char *)v112 + 88);
            }
            while ((__int128 *)(a1 + 88) != a2);
          }
        }
        return;
    }
  }
}

  v74 = a2;
  v75 = (__int128 *)(a2 - 2);
  v72 = (__int128 *)(a2 - 6);
  v73 = (__int128 *)(a2 - 4);
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_1C4F79CE0((uint64_t)v75, *(const void **)v8, *(_QWORD *)(v8 + 8)))
        {
          v78 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v75;
          *v75 = v78;
        }
        return;
      case 3uLL:
        sub_1C5E97848((__int128 *)v8, v8 + 16, v75);
        return;
      case 4uLL:
        sub_1C5E97AA8(v8, v8 + 16, v8 + 32, v75);
        return;
      case 5uLL:
        sub_1C5E97B44(v8, v8 + 16, v8 + 32, v8 + 48, v75);
        return;
      default:
        if (v9 <= 383)
        {
          v34 = v8 + 16;
          v36 = (const void **)v8 == a2 || v34 == (_QWORD)a2;
          if ((a4 & 1) != 0)
          {
            if (!v36)
            {
              v37 = 0;
              v38 = v8;
              do
              {
                v39 = *(const void **)v38;
                v40 = *(_QWORD *)(v38 + 8);
                v38 = v34;
                if (sub_1C4F79CE0(v34, v39, v40))
                {
                  v78 = *(_OWORD *)v38;
                  v41 = v37;
                  while (1)
                  {
                    v42 = v8 + v41;
                    *(_OWORD *)(v8 + v41 + 16) = *(_OWORD *)(v8 + v41);
                    if (!v41)
                      break;
                    v41 -= 16;
                    if (!sub_1C4F79CE0((uint64_t)&v78, *(const void **)(v42 - 16), *(_QWORD *)(v42 - 8)))
                    {
                      v43 = (_OWORD *)(v8 + v41 + 16);
                      goto LABEL_74;
                    }
                  }
                  v43 = (_OWORD *)v8;
LABEL_74:
                  *v43 = v78;
                }
                v34 = v38 + 16;
                v37 += 16;
              }
              while ((const void **)(v38 + 16) != a2);
            }
          }
          else if (!v36)
          {
            do
            {
              v67 = *(const void **)a1;
              v68 = *(_QWORD *)(a1 + 8);
              a1 = v34;
              if (sub_1C4F79CE0(v34, v67, v68))
              {
                v78 = *(_OWORD *)a1;
                v69 = (const void **)a1;
                do
                {
                  v70 = v69 - 2;
                  *(_OWORD *)v69 = *((_OWORD *)v69 - 1);
                  v71 = sub_1C4F79CE0((uint64_t)&v78, *(v69 - 4), (size_t)*(v69 - 3));
                  v69 = v70;
                }
                while (v71);
                *(_OWORD *)v70 = v78;
              }
              v34 = a1 + 16;
            }
            while ((const void **)(a1 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((const void **)v8 != a2)
          {
            v44 = (v10 - 2) >> 1;
            v76 = v44;
            do
            {
              v45 = v44;
              if (v76 >= v44)
              {
                v46 = (2 * v44) | 1;
                v47 = a1 + 16 * v46;
                if (2 * v44 + 2 < (uint64_t)v10
                  && sub_1C4F79CE0(a1 + 16 * v46, *(const void **)(v47 + 16), *(_QWORD *)(v47 + 24)))
                {
                  v47 += 16;
                  v46 = 2 * v45 + 2;
                }
                v48 = (const void **)(a1 + 16 * v45);
                v49 = *v48;
                v50 = (size_t)v48[1];
                if (!sub_1C4F79CE0(v47, *v48, v50))
                {
                  do
                  {
                    v51 = (const void **)v47;
                    *(_OWORD *)v48 = *(_OWORD *)v47;
                    if (v76 < v46)
                      break;
                    v52 = (2 * v46) | 1;
                    v47 = a1 + 16 * v52;
                    v53 = 2 * v46 + 2;
                    if (v53 < (uint64_t)v10
                      && sub_1C4F79CE0(a1 + 16 * v52, *(const void **)(v47 + 16), *(_QWORD *)(v47 + 24)))
                    {
                      v47 += 16;
                      v52 = v53;
                    }
                    v48 = v51;
                    v46 = v52;
                  }
                  while (!sub_1C4F79CE0(v47, v49, v50));
                  *v51 = v49;
                  v51[1] = (const void *)v50;
                }
              }
              v44 = v45 - 1;
            }
            while (v45);
            v54 = v74;
            do
            {
              v55 = 0;
              v78 = *(_OWORD *)a1;
              v56 = (_OWORD *)a1;
              do
              {
                v57 = (uint64_t)&v56[v55 + 1];
                v58 = (2 * v55) | 1;
                v59 = 2 * v55 + 2;
                if (v59 < (uint64_t)v10
                  && sub_1C4F79CE0((uint64_t)&v56[v55 + 1], *(const void **)&v56[v55 + 2], *((_QWORD *)&v56[v55 + 2] + 1)))
                {
                  v57 += 16;
                  v58 = v59;
                }
                *v56 = *(_OWORD *)v57;
                v56 = (_OWORD *)v57;
                v55 = v58;
              }
              while (v58 <= (uint64_t)((v10 - 2) >> 1));
              if ((_OWORD *)v57 == --v54)
              {
                *(_OWORD *)v57 = v78;
              }
              else
              {
                *(_OWORD *)v57 = *v54;
                *v54 = v78;
                v60 = v57 - a1 + 16;
                if (v60 >= 17)
                {
                  v61 = (((unint64_t)v60 >> 4) - 2) >> 1;
                  v62 = (_OWORD *)(a1 + 16 * v61);
                  v63 = *(const void **)v57;
                  v64 = *(_QWORD *)(v57 + 8);
                  if (sub_1C4F79CE0((uint64_t)v62, *(const void **)v57, v64))
                  {
                    do
                    {
                      v65 = v62;
                      *(_OWORD *)v57 = *v62;
                      if (!v61)
                        break;
                      v61 = (v61 - 1) >> 1;
                      v62 = (_OWORD *)(a1 + 16 * v61);
                      v57 = (uint64_t)v65;
                    }
                    while (sub_1C4F79CE0((uint64_t)v62, v63, v64));
                    *v65 = v63;
                    v65[1] = v64;
                  }
                }
              }
            }
            while ((uint64_t)v10-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (__int128 *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          sub_1C5E97848((__int128 *)(v8 + 16 * (v10 >> 1)), v8, v75);
        }
        else
        {
          sub_1C5E97848((__int128 *)v8, v8 + 16 * (v10 >> 1), v75);
          sub_1C5E97848((__int128 *)(v8 + 16), (uint64_t)(v12 - 1), v73);
          sub_1C5E97848((__int128 *)(v8 + 32), v8 + 16 + 16 * v11, v72);
          sub_1C5E97848(v12 - 1, v8 + 16 * (v10 >> 1), (__int128 *)(v8 + 16 + 16 * v11));
          v78 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v12;
          *v12 = v78;
        }
        --a3;
        v13 = *(const void **)v8;
        if ((a4 & 1) == 0)
        {
          v14 = *(_QWORD *)(a1 + 8);
          if (sub_1C4F79CE0(a1 - 16, *(const void **)a1, v14))
            goto LABEL_11;
          v77 = *(_OWORD *)a1;
          if (sub_1C4F79CE0((uint64_t)&v77, *(a2 - 2), (size_t)*(a2 - 1)))
          {
            v8 = a1;
            do
            {
              v22 = *(const void **)(v8 + 16);
              v23 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (!sub_1C4F79CE0((uint64_t)&v77, v22, v23));
          }
          else
          {
            v24 = a1 + 16;
            do
            {
              v8 = v24;
              if (v24 >= (unint64_t)a2)
                break;
              v25 = sub_1C4F79CE0((uint64_t)&v77, *(const void **)v24, *(_QWORD *)(v24 + 8));
              v24 = v8 + 16;
            }
            while (!v25);
          }
          v26 = a2;
          if (v8 < (unint64_t)a2)
          {
            v26 = a2;
            do
            {
              v27 = (const void *)*((_QWORD *)v26 - 2);
              v28 = *((_QWORD *)v26-- - 1);
            }
            while (sub_1C4F79CE0((uint64_t)&v77, v27, v28));
          }
          while (v8 < (unint64_t)v26)
          {
            v78 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v26;
            *v26 = v78;
            do
            {
              v29 = *(const void **)(v8 + 16);
              v30 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (!sub_1C4F79CE0((uint64_t)&v77, v29, v30));
            do
            {
              v31 = (const void *)*((_QWORD *)v26 - 2);
              v32 = *((_QWORD *)v26-- - 1);
            }
            while (sub_1C4F79CE0((uint64_t)&v77, v31, v32));
          }
          v33 = (__int128 *)(v8 - 16);
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *v33;
          a4 = 0;
          *v33 = v77;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v15 = 0;
        do
          v15 += 16;
        while (sub_1C4F79CE0(v15 + a1, v13, v14));
        v16 = a1 + v15;
        v17 = (unint64_t)a2;
        if (v15 == 16)
        {
          v17 = (unint64_t)a2;
          do
          {
            if (v16 >= v17)
              break;
            v17 -= 16;
          }
          while (!sub_1C4F79CE0(v17, v13, v14));
        }
        else
        {
          do
            v17 -= 16;
          while (!sub_1C4F79CE0(v17, v13, v14));
        }
        if (v16 >= v17)
        {
          v20 = (__int128 *)(v16 - 16);
        }
        else
        {
          v18 = (__int128 *)(a1 + v15);
          v19 = (__int128 *)v17;
          do
          {
            v78 = *v18;
            *v18 = *v19;
            *v19 = v78;
            do
              ++v18;
            while (sub_1C4F79CE0((uint64_t)v18, v13, v14));
            do
              --v19;
            while (!sub_1C4F79CE0((uint64_t)v19, v13, v14));
          }
          while (v18 < v19);
          v20 = v18 - 1;
          a2 = v74;
        }
        if (v20 != (__int128 *)a1)
          *(_OWORD *)a1 = *v20;
        *(_QWORD *)v20 = v13;
        *((_QWORD *)v20 + 1) = v14;
        if (v16 < v17)
        {
LABEL_32:
          sub_1C5E9710C(a1, v20, a3, a4 & 1);
          a4 = 0;
          v8 = (unint64_t)(v20 + 1);
          continue;
        }
        v21 = sub_1C5E97918(a1, v20);
        v8 = (unint64_t)(v20 + 1);
        if (!sub_1C5E97918((uint64_t)(v20 + 1), a2))
        {
          if (v21)
            continue;
          goto LABEL_32;
        }
        a2 = (const void **)v20;
        if (!v21)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (__n128 *)(a2 - 16);
  v138 = (__n128 *)(a2 - 48);
  v139 = (__n128 *)(a2 - 32);
  v9 = a1;
  v142 = (__n128 *)a2;
  while (2)
  {
    a1 = v9;
    v10 = a2 - (_QWORD)v9;
    v11 = (uint64_t)(a2 - (_QWORD)v9) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return FragmentInfo.n128_f64[0];
      case 2:
        v63 = *(_QWORD *)(a2 - 8);
        v64 = v9->n128_u64[1];
        if (v63)
          v65 = v64 == 0;
        else
          v65 = 1;
        if (v65)
        {
          if (!v64)
            return FragmentInfo.n128_f64[0];
        }
        else
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v63 + 24), *(uint64_t **)(v63 + 32), (int8x16_t *)&v146);
          FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v64 + 24), (uint64_t *)*(_QWORD *)(v64 + 32), &v144).u64[0];
          if (v147 && v145)
          {
            if (v146.n128_u64[1] >= v144.i64[1])
              return FragmentInfo.n128_f64[0];
          }
          else if (!v145)
          {
            return FragmentInfo.n128_f64[0];
          }
        }
        v146 = *a1;
        *a1 = *v8;
        FragmentInfo.n128_u64[0] = v146.n128_u64[0];
        *v8 = v146;
        return FragmentInfo.n128_f64[0];
      case 3:
        FragmentInfo.n128_u64[0] = sub_1C6015C88(v9, v9 + 1, v8, FragmentInfo).n128_u64[0];
        return FragmentInfo.n128_f64[0];
      case 4:
        FragmentInfo.n128_u64[0] = sub_1C6016178(v9, v9 + 1, v9 + 2, v8, FragmentInfo).n128_u64[0];
        return FragmentInfo.n128_f64[0];
      case 5:
        FragmentInfo.n128_u64[0] = sub_1C6015A9C(v9, v9 + 1, v9 + 2, v9 + 3, v8, FragmentInfo).n128_u64[0];
        return FragmentInfo.n128_f64[0];
      default:
        if (v10 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (v9 == (__n128 *)a2)
              return FragmentInfo.n128_f64[0];
            v66 = v9 + 1;
            if (&v9[1] == (__n128 *)a2)
              return FragmentInfo.n128_f64[0];
            v67 = 0;
            v68 = v9;
            while (1)
            {
              v69 = v68;
              v68 = v66;
              v70 = v69[1].n128_u64[1];
              v71 = v69->n128_u64[1];
              if (v70)
                v72 = v71 == 0;
              else
                v72 = 1;
              if (v72)
              {
                if (!v71)
                  goto LABEL_227;
              }
              else
              {
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v70 + 24), *(uint64_t **)(v70 + 32), (int8x16_t *)&v146);
                FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v71 + 24), (uint64_t *)*(_QWORD *)(v71 + 32), &v144).u64[0];
                if (v147)
                  v73 = v145 == 0;
                else
                  v73 = 1;
                if (v73)
                {
                  if (!v145)
                    goto LABEL_227;
                }
                else if (v146.n128_u64[1] >= v144.i64[1])
                {
                  goto LABEL_227;
                }
              }
              v75 = v69[1].n128_u64[0];
              v74 = v69[1].n128_u64[1];
              FragmentInfo = *v69;
              *v68 = *v69;
              v76 = a1;
              if (v69 == a1)
                goto LABEL_226;
              v77 = v67;
              while (1)
              {
                v78 = (__n128 *)((char *)a1 + v77);
                v79 = *(uint64_t *)((char *)&a1->n128_i64[-1] + v77);
                if (!v74 || !v79)
                {
                  if (!v79)
                    break;
                  goto LABEL_223;
                }
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v74 + 24), *(uint64_t **)(v74 + 32), (int8x16_t *)&v146);
                FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v79 + 24), (uint64_t *)*(_QWORD *)(v79 + 32), &v144).u64[0];
                if (v147 && v145)
                {
                  if (v146.n128_u64[1] >= v144.i64[1])
                  {
                    v76 = (__n128 *)((char *)a1 + v77);
                    goto LABEL_226;
                  }
                  goto LABEL_223;
                }
                if (!v145)
                  break;
LABEL_223:
                --v69;
                FragmentInfo = v78[-1];
                *v78 = FragmentInfo;
                v77 -= 16;
                if (!v77)
                {
                  v76 = a1;
                  goto LABEL_226;
                }
              }
              v76 = v69;
LABEL_226:
              v76->n128_u64[0] = v75;
              v76->n128_u64[1] = v74;
              a2 = (unint64_t)v142;
LABEL_227:
              v66 = v68 + 1;
              v67 += 16;
              if (&v68[1] == (__n128 *)a2)
                return FragmentInfo.n128_f64[0];
            }
          }
          if (v9 == (__n128 *)a2)
            return FragmentInfo.n128_f64[0];
          while (1)
          {
            while (1)
            {
              if (&a1[1] == (__n128 *)a2)
                return FragmentInfo.n128_f64[0];
              v128 = a1++;
              v129 = v128[1].n128_u64[1];
              v130 = v128->n128_u64[1];
              if (!v129 || v130 == 0)
                break;
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v129 + 24), *(uint64_t **)(v129 + 32), (int8x16_t *)&v146);
              FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v130 + 24), (uint64_t *)*(_QWORD *)(v130 + 32), &v144).u64[0];
              if (v147)
                v132 = v145 == 0;
              else
                v132 = 1;
              if (v132)
              {
                if (v145)
                  goto LABEL_354;
              }
              else if (v146.n128_u64[1] < v144.i64[1])
              {
                goto LABEL_354;
              }
            }
            if (v130)
            {
LABEL_354:
              v133 = a1->n128_u64[0];
              v134 = v128[1].n128_u64[1];
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v135 = v128;
                    FragmentInfo = *v128;
                    v128[1] = *v128;
                    --v128;
                    v136 = v135[-1].n128_i64[1];
                    if (v134)
                    {
                      if (v136)
                        break;
                    }
                    if (!v136)
                      goto LABEL_364;
                  }
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v134 + 24), *(uint64_t **)(v134 + 32), (int8x16_t *)&v146);
                  FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v136 + 24), (uint64_t *)*(_QWORD *)(v136 + 32), &v144).u64[0];
                  if (!v147 || !v145)
                    break;
                  if (v146.n128_u64[1] >= v144.i64[1])
                    goto LABEL_364;
                }
              }
              while (v145);
LABEL_364:
              v135->n128_u64[0] = v133;
              v135->n128_u64[1] = v134;
              a2 = (unint64_t)v142;
            }
          }
        }
        if (!a3)
        {
          if (v9 == (__n128 *)a2)
            return FragmentInfo.n128_f64[0];
          v80 = (unint64_t)(v11 - 2) >> 1;
          v81 = v80;
          do
          {
            v82 = v81;
            if (v80 < v81)
              goto LABEL_281;
            v83 = (2 * v81) | 1;
            v84 = &a1[v83];
            if (2 * v81 + 2 < v11)
            {
              v85 = v84->n128_u64[1];
              v86 = v84[1].n128_u64[1];
              v87 = v86 != 0;
              if (v85)
                v88 = v86 == 0;
              else
                v88 = 1;
              if (!v88)
              {
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v85 + 24), *(uint64_t **)(v85 + 32), (int8x16_t *)&v146);
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v86 + 24), *(uint64_t **)(v86 + 32), &v144);
                v87 = v145 != 0;
                if (v147)
                {
                  if (v145)
                    v87 = v146.n128_u64[1] < v144.i64[1];
                }
              }
              v84 += v87;
              if (v87)
                v83 = 2 * v82 + 2;
            }
            v89 = &a1[v82];
            v90 = v84->n128_u64[1];
            v91 = v89->n128_u64[1];
            if (v90)
              v92 = v91 == 0;
            else
              v92 = 1;
            if (v92)
            {
              if (v91)
                goto LABEL_281;
            }
            else
            {
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v90 + 24), *(uint64_t **)(v90 + 32), (int8x16_t *)&v146);
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v91 + 24), *(uint64_t **)(v91 + 32), &v144);
              if (v147 && v145)
              {
                if (v146.n128_u64[1] < v144.i64[1])
                  goto LABEL_281;
              }
              else if (v145)
              {
                goto LABEL_281;
              }
            }
            v93 = v89->n128_u64[0];
            *v89 = *v84;
            v141 = v93;
            if (v80 < v83)
              goto LABEL_280;
            while (1)
            {
              v94 = v84;
              v95 = 2 * v83;
              v83 = (2 * v83) | 1;
              v84 = &a1[v83];
              v96 = v95 + 2;
              if (v95 + 2 < v11)
              {
                v97 = v84->n128_u64[1];
                v98 = v84[1].n128_u64[1];
                v99 = v98 != 0;
                if (v97)
                  v100 = v98 == 0;
                else
                  v100 = 1;
                if (!v100)
                {
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v97 + 24), *(uint64_t **)(v97 + 32), (int8x16_t *)&v146);
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v98 + 24), *(uint64_t **)(v98 + 32), &v144);
                  v99 = v145 != 0;
                  if (v147)
                  {
                    if (v145)
                      v99 = v146.n128_u64[1] < v144.i64[1];
                  }
                }
                v84 += v99;
                if (v99)
                  v83 = v96;
              }
              v101 = v84->n128_u64[1];
              if (v101)
                v102 = v91 == 0;
              else
                v102 = 1;
              if (v102)
              {
                if (v91)
                  break;
                goto LABEL_277;
              }
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v101 + 24), *(uint64_t **)(v101 + 32), (int8x16_t *)&v146);
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v91 + 24), *(uint64_t **)(v91 + 32), &v144);
              if (v147 && v145)
              {
                if (v146.n128_u64[1] < v144.i64[1])
                  break;
                goto LABEL_277;
              }
              if (v145)
                break;
LABEL_277:
              *v94 = *v84;
              if (v80 < v83)
                goto LABEL_280;
            }
            v84 = v94;
LABEL_280:
            v84->n128_u64[0] = v141;
            v84->n128_u64[1] = v91;
LABEL_281:
            v81 = v82 - 1;
          }
          while (v82);
          v103 = v142;
          while (1)
          {
            v104 = 0;
            v143 = *a1;
            v105 = a1;
            do
            {
              v106 = (uint64_t)&v105[v104 + 1];
              v107 = (2 * v104) | 1;
              v108 = 2 * v104 + 2;
              if (v108 < v11)
              {
                v109 = *((_QWORD *)&v105[v104 + 1] + 1);
                v110 = *((_QWORD *)&v105[v104 + 2] + 1);
                v111 = v110 != 0;
                if (v109)
                  v112 = v110 == 0;
                else
                  v112 = 1;
                if (!v112)
                {
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v109 + 24), *(uint64_t **)(v109 + 32), (int8x16_t *)&v146);
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v110 + 24), *(uint64_t **)(v110 + 32), &v144);
                  v111 = v145 != 0;
                  if (v147)
                  {
                    if (v145)
                      v111 = v146.n128_u64[1] < v144.i64[1];
                  }
                }
                v106 += 16 * v111;
                if (v111)
                  v107 = v108;
              }
              *v105 = *(_OWORD *)v106;
              v105 = (_OWORD *)v106;
              v104 = v107;
            }
            while (v107 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
            v113 = v103 - 1;
            if ((__n128 *)v106 == &v103[-1])
            {
              --v103;
              FragmentInfo.n128_u64[0] = v143.n128_u64[0];
              *(__n128 *)v106 = v143;
            }
            else
            {
              *(__n128 *)v106 = *v113;
              FragmentInfo.n128_u64[0] = v143.n128_u64[0];
              --v103;
              *v113 = v143;
              v114 = v106 - (_QWORD)a1 + 16;
              if (v114 >= 17)
              {
                v115 = ((unint64_t)v114 >> 4) - 2;
                v116 = v115 >> 1;
                v117 = &a1[v115 >> 1];
                v118 = v117->n128_u64[1];
                v119 = *(_QWORD *)(v106 + 8);
                if (v118)
                  v120 = v119 == 0;
                else
                  v120 = 1;
                if (v120)
                {
                  if (!v119)
                    goto LABEL_330;
                }
                else
                {
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v118 + 24), *(uint64_t **)(v118 + 32), (int8x16_t *)&v146);
                  FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v119 + 24), (uint64_t *)*(_QWORD *)(v119 + 32), &v144).u64[0];
                  if (v147 && v145)
                  {
                    if (v146.n128_u64[1] >= v144.i64[1])
                      goto LABEL_330;
                  }
                  else if (!v145)
                  {
                    goto LABEL_330;
                  }
                  v119 = *(_QWORD *)(v106 + 8);
                }
                v121 = *(_QWORD *)v106;
                FragmentInfo = *v117;
                *(__n128 *)v106 = *v117;
                if (v115 >= 2)
                {
                  do
                  {
                    v123 = v116 - 1;
                    v116 = (v116 - 1) >> 1;
                    v122 = &a1[v116];
                    v124 = v122->n128_u64[1];
                    if (v124)
                      v125 = v119 == 0;
                    else
                      v125 = 1;
                    if (v125)
                    {
                      if (!v119)
                        goto LABEL_312;
                    }
                    else
                    {
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v124 + 24), *(uint64_t **)(v124 + 32), (int8x16_t *)&v146);
                      FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v119 + 24), (uint64_t *)*(_QWORD *)(v119 + 32), &v144).u64[0];
                      if (v147)
                        v126 = v145 == 0;
                      else
                        v126 = 1;
                      if (v126)
                      {
                        if (!v145)
                          goto LABEL_312;
                      }
                      else if (v146.n128_u64[1] >= v144.i64[1])
                      {
                        goto LABEL_312;
                      }
                    }
                    FragmentInfo = *v122;
                    *v117 = *v122;
                    v117 = &a1[v116];
                  }
                  while (v123 > 1);
                }
                else
                {
LABEL_312:
                  v122 = v117;
                }
                v122->n128_u64[0] = v121;
                v122->n128_u64[1] = v119;
              }
            }
LABEL_330:
            if (v11-- <= 2)
              return FragmentInfo.n128_f64[0];
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x801)
        {
          FragmentInfo = sub_1C6015C88(v13, a1, v8, FragmentInfo);
        }
        else
        {
          v14 = sub_1C6015C88(a1, v13, v8, FragmentInfo);
          v15 = sub_1C6015C88(a1 + 1, v13 - 1, v139, v14);
          v16 = sub_1C6015C88(a1 + 2, &a1[v12 + 1], v138, v15);
          sub_1C6015C88(v13 - 1, v13, &a1[v12 + 1], v16);
          v146 = *a1;
          *a1 = *v13;
          FragmentInfo = v146;
          *v13 = v146;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = a1[-1].n128_u64[1];
          v18 = a1->n128_u64[1];
          if (v17 && v18)
          {
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v17 + 24), *(uint64_t **)(v17 + 32), (int8x16_t *)&v146);
            FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v18 + 24), (uint64_t *)*(_QWORD *)(v18 + 32), &v144);
            if (v147 && v145)
            {
              if (v146.n128_u64[1] < v144.i64[1])
                goto LABEL_16;
            }
            else if (v145)
            {
              goto LABEL_16;
            }
          }
          else if (v18)
          {
            goto LABEL_16;
          }
          v49 = a1->n128_u64[0];
          v48 = a1->n128_u64[1];
          v50 = *(_QWORD *)(a2 - 8);
          if (v48 && v50)
          {
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v48 + 24), *(uint64_t **)(v48 + 32), (int8x16_t *)&v146);
            FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v50 + 24), (uint64_t *)*(_QWORD *)(v50 + 32), &v144);
            if (v147 && v145)
            {
              if (v146.n128_u64[1] >= v144.i64[1])
                goto LABEL_119;
            }
            else if (!v145)
            {
LABEL_119:
              v9 = a1 + 1;
              if ((unint64_t)a1[1].n128_u64 < a2)
              {
                do
                {
                  v51 = v9->n128_u64[1];
                  if (v48 && v51)
                  {
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v48 + 24), *(uint64_t **)(v48 + 32), (int8x16_t *)&v146);
                    FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v51 + 24), (uint64_t *)*(_QWORD *)(v51 + 32), &v144);
                    if (v147 && v145)
                    {
                      v52 = v142;
                      if (v146.n128_u64[1] < v144.i64[1])
                        goto LABEL_142;
                    }
                    else
                    {
                      v52 = v142;
                      if (v145)
                        goto LABEL_142;
                    }
                  }
                  else
                  {
                    v52 = v142;
                    if (v51)
                      goto LABEL_142;
                  }
                  ++v9;
                }
                while (v9 < v52);
              }
              goto LABEL_142;
            }
          }
          else if (!v50)
          {
            goto LABEL_119;
          }
          v53 = a1 + 1;
          do
          {
            while (1)
            {
              while (1)
              {
                v9 = v53;
                v54 = v53->n128_u64[1];
                ++v53;
                if (v48)
                {
                  if (v54)
                    break;
                }
                if (v54)
                  goto LABEL_142;
              }
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v48 + 24), *(uint64_t **)(v48 + 32), (int8x16_t *)&v146);
              FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v54 + 24), (uint64_t *)*(_QWORD *)(v54 + 32), &v144);
              if (!v147 || !v145)
                break;
              if (v146.n128_u64[1] < v144.i64[1])
                goto LABEL_142;
            }
          }
          while (!v145);
LABEL_142:
          v55 = v142;
          if (v9 < v142)
          {
            v56 = v8;
            do
            {
              while (1)
              {
                while (1)
                {
                  v55 = v56;
                  v57 = v56->n128_u64[1];
                  --v56;
                  if (v48)
                  {
                    if (v57)
                      break;
                  }
                  if (!v57)
                    goto LABEL_174;
                }
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v48 + 24), *(uint64_t **)(v48 + 32), (int8x16_t *)&v146);
                FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v57 + 24), (uint64_t *)*(_QWORD *)(v57 + 32), &v144);
                if (!v147 || !v145)
                  break;
                if (v146.n128_u64[1] >= v144.i64[1])
                  goto LABEL_174;
              }
            }
            while (v145);
          }
LABEL_174:
          while (v9 < v55)
          {
            v146 = *v9;
            *v9 = *v55;
            FragmentInfo = v146;
            *v55 = v146;
            v58 = v9 + 1;
            do
            {
              while (1)
              {
                while (1)
                {
                  v9 = v58;
                  v59 = v58->n128_u64[1];
                  ++v58;
                  if (v48)
                  {
                    if (v59)
                      break;
                  }
                  if (v59)
                    goto LABEL_164;
                }
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v48 + 24), *(uint64_t **)(v48 + 32), (int8x16_t *)&v146);
                FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v59 + 24), (uint64_t *)*(_QWORD *)(v59 + 32), &v144);
                if (!v147 || !v145)
                  break;
                if (v146.n128_u64[1] < v144.i64[1])
                  goto LABEL_164;
              }
            }
            while (!v145);
LABEL_164:
            v60 = v55 - 1;
            do
            {
              while (1)
              {
                while (1)
                {
                  v55 = v60;
                  v61 = v60->n128_i64[1];
                  --v60;
                  if (v48)
                  {
                    if (v61)
                      break;
                  }
                  if (!v61)
                    goto LABEL_174;
                }
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v48 + 24), *(uint64_t **)(v48 + 32), (int8x16_t *)&v146);
                FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v61 + 24), (uint64_t *)*(_QWORD *)(v61 + 32), &v144);
                if (!v147 || !v145)
                  break;
                if (v146.n128_u64[1] >= v144.i64[1])
                  goto LABEL_174;
              }
            }
            while (v145);
          }
          v62 = v9 - 1;
          a2 = (unint64_t)v142;
          if (&v9[-1] != a1)
          {
            FragmentInfo = *v62;
            *a1 = *v62;
          }
          a4 = 0;
          v9[-1].n128_u64[0] = v49;
          v9[-1].n128_u64[1] = v48;
          continue;
        }
LABEL_16:
        v19 = 0;
        v21 = a1->n128_u64[0];
        v20 = a1->n128_u64[1];
        while (1)
        {
          v22 = a1[v19 + 1].n128_u64[1];
          if (v22)
            v23 = v20 == 0;
          else
            v23 = 1;
          if (v23)
          {
            if (!v20)
              goto LABEL_33;
            goto LABEL_32;
          }
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v22 + 24), *(uint64_t **)(v22 + 32), (int8x16_t *)&v146);
          FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v20 + 24), (uint64_t *)*(_QWORD *)(v20 + 32), &v144);
          if (v147 && v145 != 0)
            break;
          if (!v145)
            goto LABEL_33;
LABEL_32:
          ++v19;
        }
        if (v146.n128_u64[1] < v144.i64[1])
          goto LABEL_32;
LABEL_33:
        n128_u64 = (unint64_t)a1[v19 + 1].n128_u64;
        v26 = v8;
        if (!(v19 * 16))
        {
          v27 = v142;
          if (n128_u64 >= (unint64_t)v142)
            goto LABEL_72;
          v31 = v8;
          while (1)
          {
            v27 = v31;
            v32 = v31->n128_u64[1];
            --v31;
            if (!v32 || v20 == 0)
              break;
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v32 + 24), *(uint64_t **)(v32 + 32), (int8x16_t *)&v146);
            FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v20 + 24), (uint64_t *)*(_QWORD *)(v20 + 32), &v144);
            if (v147)
              v34 = v145 == 0;
            else
              v34 = 1;
            if (v34)
            {
              if (v145)
                goto LABEL_72;
LABEL_65:
              if (n128_u64 >= (unint64_t)v27)
                goto LABEL_72;
              continue;
            }
            if (v146.n128_u64[1] < v144.i64[1] || n128_u64 >= (unint64_t)v27)
              goto LABEL_72;
          }
          if (v20)
            goto LABEL_72;
          goto LABEL_65;
        }
        do
        {
          while (1)
          {
            while (1)
            {
              v27 = v26;
              v28 = v26->n128_u64[1];
              --v26;
              if (v28 && v20 != 0)
                break;
              if (v20)
                goto LABEL_72;
            }
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v28 + 24), *(uint64_t **)(v28 + 32), (int8x16_t *)&v146);
            FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v20 + 24), (uint64_t *)*(_QWORD *)(v20 + 32), &v144);
            if (v147 && v145 != 0)
              break;
            if (v145)
              goto LABEL_72;
          }
        }
        while (v146.n128_u64[1] >= v144.i64[1]);
LABEL_72:
        v9 = (__n128 *)n128_u64;
        if (n128_u64 < (unint64_t)v27)
        {
          v36 = v27;
          do
          {
            v146 = *v9;
            *v9 = *v36;
            FragmentInfo = v146;
            *v36 = v146;
            v37 = v9 + 1;
            do
            {
              while (1)
              {
                while (1)
                {
                  v9 = v37;
                  v38 = v37->n128_u64[1];
                  ++v37;
                  if (v38 && v20 != 0)
                    break;
                  if (!v20)
                    goto LABEL_90;
                }
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v38 + 24), *(uint64_t **)(v38 + 32), (int8x16_t *)&v146);
                FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v20 + 24), (uint64_t *)*(_QWORD *)(v20 + 32), &v144);
                if (v147 && v145 != 0)
                  break;
                if (!v145)
                  goto LABEL_90;
              }
            }
            while (v146.n128_u64[1] < v144.i64[1]);
LABEL_90:
            v41 = v36 - 1;
            do
            {
              while (1)
              {
                while (1)
                {
                  v36 = v41;
                  v42 = v41->n128_i64[1];
                  --v41;
                  if (v42 && v20 != 0)
                    break;
                  if (v20)
                    goto LABEL_106;
                }
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v42 + 24), *(uint64_t **)(v42 + 32), (int8x16_t *)&v146);
                FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v20 + 24), (uint64_t *)*(_QWORD *)(v20 + 32), &v144);
                if (v147 && v145 != 0)
                  break;
                if (v145)
                  goto LABEL_106;
              }
            }
            while (v146.n128_u64[1] >= v144.i64[1]);
LABEL_106:
            ;
          }
          while (v9 < v36);
        }
        v45 = v9 - 1;
        if (&v9[-1] != a1)
        {
          FragmentInfo = *v45;
          *a1 = *v45;
        }
        v9[-1].n128_u64[0] = v21;
        v9[-1].n128_u64[1] = v20;
        a2 = (unint64_t)v142;
        if (n128_u64 < (unint64_t)v27)
        {
LABEL_112:
          sub_1C6014C04(a1, &v9[-1], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v46 = sub_1C6015ED0(a1, v9 - 1, FragmentInfo);
        if (!sub_1C6015ED0(v9, v142, v47))
        {
          if (v46)
            continue;
          goto LABEL_112;
        }
        a2 = (unint64_t)v9[-1].n128_u64;
        if (!v46)
          goto LABEL_1;
        return FragmentInfo.n128_f64[0];
    }
  }
}

  v6 = a2;
  i8 = (__int128 *)a2[-1].i8;
  v7 = (int8x16_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v7;
    v8 = (char *)v6 - (char *)v7;
    v9 = v6 - v7;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(a2[-1].i64[1] + 24), *(uint64_t **)(a2[-1].i64[1] + 32), &v117);
        v50 = v117.u64[1];
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 8) + 32), &v116);
        if (v50 < v116.i64[1])
        {
          v117 = *(int8x16_t *)a1;
          *(int8x16_t *)a1 = a2[-1];
          a2[-1] = v117;
        }
        return;
      case 3:
        sub_1C6017B68((__int128 *)a1, (__int128 *)(a1 + 16), i8);
        return;
      case 4:
        sub_1C6017FE0(a1, a1 + 16, a1 + 32, (uint64_t)i8);
        return;
      case 5:
        v51 = (int8x16_t *)(a1 + 16);
        v52 = (int8x16_t *)(a1 + 32);
        v53 = (int8x16_t *)(a1 + 48);
        sub_1C6017FE0(a1, a1 + 16, a1 + 32, a1 + 48);
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(a2[-1].i64[1] + 24), *(uint64_t **)(a2[-1].i64[1] + 32), &v117);
        v54 = v117.u64[1];
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 56) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 56) + 32), &v116);
        if (v54 < v116.i64[1])
        {
          v117 = *v53;
          v55 = v117;
          *v53 = a2[-1];
          a2[-1] = v55;
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 56) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 56) + 32), &v117);
          v56 = v117.u64[1];
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 40) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 40) + 32), &v116);
          if (v56 < v116.i64[1])
          {
            v57 = *v52;
            *v52 = *v53;
            *v53 = v57;
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 40) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 40) + 32), &v117);
            v58 = v117.u64[1];
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 24) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 24) + 32), &v116);
            if (v58 < v116.i64[1])
            {
              v59 = *v51;
              *v51 = *v52;
              *v52 = v59;
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 24) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 24) + 32), &v117);
              v60 = v117.u64[1];
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 8) + 32), &v116);
              if (v60 < v116.i64[1])
              {
                v117 = *(int8x16_t *)a1;
                *(int8x16_t *)a1 = *v51;
                *v51 = v117;
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if ((int8x16_t *)a1 != v6)
            {
              v61 = (_QWORD *)(a1 + 16);
              if ((int8x16_t *)(a1 + 16) != a2)
              {
                v62 = 0;
                v63 = (_QWORD *)a1;
                do
                {
                  v64 = v61;
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v63[3] + 24), *(uint64_t **)(v63[3] + 32), &v117);
                  v65 = v117.u64[1];
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v63[1] + 24), *(uint64_t **)(v63[1] + 32), &v116);
                  if (v65 < v116.i64[1])
                  {
                    v66 = *v64;
                    v67 = v63[3];
                    v68 = v62;
                    while (1)
                    {
                      *(_OWORD *)(a1 + v68 + 16) = *(_OWORD *)(a1 + v68);
                      if (!v68)
                        break;
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v67 + 24), *(uint64_t **)(v67 + 32), &v117);
                      v69 = v117.u64[1];
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + v68 - 8) + 24), *(uint64_t **)(*(_QWORD *)(a1 + v68 - 8) + 32), &v116);
                      v68 -= 16;
                      if (v69 >= v116.i64[1])
                      {
                        v70 = (_QWORD *)(a1 + v68 + 16);
                        goto LABEL_72;
                      }
                    }
                    v70 = (_QWORD *)a1;
LABEL_72:
                    *v70 = v66;
                    v70[1] = v67;
                  }
                  v61 = v64 + 2;
                  v62 += 16;
                  v63 = v64;
                }
                while (v64 + 2 != (_QWORD *)a2);
              }
            }
          }
          else if ((int8x16_t *)a1 != v6)
          {
            v101 = (int8x16_t *)(a1 + 16);
            while (v101 != a2)
            {
              v102 = (uint64_t *)v101;
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 24) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 24) + 32), &v117);
              v103 = v117.u64[1];
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 8) + 32), &v116);
              if (v103 < v116.i64[1])
              {
                v104 = *v102;
                v105 = *(_QWORD *)(a1 + 24);
                v106 = v102;
                do
                {
                  *(_OWORD *)v106 = *((_OWORD *)v106 - 1);
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v105 + 24), *(uint64_t **)(v105 + 32), &v117);
                  v108 = v117.u64[1];
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(v106 - 3) + 24), *(uint64_t **)(*(v106 - 3) + 32), &v116);
                  v107 = v106 - 2;
                  v106 -= 2;
                }
                while (v108 < v116.i64[1]);
                *v107 = v104;
                v107[1] = v105;
              }
              v101 = (int8x16_t *)(v102 + 2);
              a1 = (uint64_t)v102;
            }
          }
          return;
        }
        if (!a3)
        {
          if ((int8x16_t *)a1 != v6)
          {
            v71 = (unint64_t)(v9 - 2) >> 1;
            v72 = v71;
            do
            {
              v73 = v72;
              if (v71 >= v72)
              {
                v74 = (2 * v72) | 1;
                v75 = (uint64_t *)(a1 + 16 * v74);
                if (2 * v72 + 2 < v9)
                {
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v75[1] + 24), *(uint64_t **)(v75[1] + 32), &v117);
                  v76 = v117.u64[1];
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v75[3] + 24), *(uint64_t **)(v75[3] + 32), &v116);
                  v75 += 2 * (v76 < v116.i64[1]);
                  if (v76 < v116.i64[1])
                    v74 = 2 * v73 + 2;
                }
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v75[1] + 24), *(uint64_t **)(v75[1] + 32), &v117);
                v77 = v117.u64[1];
                v78 = *(_QWORD *)(a1 + 16 * v73 + 8);
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v78 + 24), *(uint64_t **)(v78 + 32), &v116);
                if (v77 >= v116.i64[1])
                {
                  v79 = (uint64_t *)(a1 + 16 * v73);
                  v113 = *v79;
                  do
                  {
                    v80 = v75;
                    *(_OWORD *)v79 = *(_OWORD *)v75;
                    if (v71 < v74)
                      break;
                    v81 = (2 * v74) | 1;
                    v75 = (uint64_t *)(a1 + 16 * v81);
                    v82 = 2 * v74 + 2;
                    if (v82 < v9)
                    {
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v75[1] + 24), *(uint64_t **)(v75[1] + 32), &v117);
                      v83 = v117.u64[1];
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v75[3] + 24), *(uint64_t **)(v75[3] + 32), &v116);
                      v75 += 2 * (v83 < v116.i64[1]);
                      if (v83 < v116.i64[1])
                        v81 = v82;
                    }
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v75[1] + 24), *(uint64_t **)(v75[1] + 32), &v117);
                    v84 = v117.u64[1];
                    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v78 + 24), *(uint64_t **)(v78 + 32), &v116);
                    v79 = v80;
                    v74 = v81;
                  }
                  while (v84 >= v116.i64[1]);
                  *v80 = v113;
                  v80[1] = v78;
                }
              }
              v72 = v73 - 1;
            }
            while (v73);
            do
            {
              v85 = 0;
              v115 = *(_OWORD *)a1;
              v86 = (_OWORD *)a1;
              do
              {
                v87 = (int8x16_t *)&v86[v85 + 1];
                v88 = (2 * v85) | 1;
                v89 = 2 * v85 + 2;
                if (v89 < v9)
                {
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v87->i64[1] + 24), *(uint64_t **)(v87->i64[1] + 32), &v117);
                  v90 = v117.u64[1];
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v87[1].i64[1] + 24), *(uint64_t **)(v87[1].i64[1] + 32), &v116);
                  v87 += v90 < v116.i64[1];
                  if (v90 < v116.i64[1])
                    v88 = v89;
                }
                *v86 = *v87;
                v86 = v87;
                v85 = v88;
              }
              while (v88 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
              v91 = (__int128 *)a2[-1].i8;
              v92 = v87 == &a2[-1];
              --a2;
              if (v92)
              {
                *v87 = (int8x16_t)v115;
              }
              else
              {
                *v87 = (int8x16_t)*v91;
                *v91 = v115;
                v93 = (uint64_t)v87[1].i64 - a1;
                if (v93 >= 17)
                {
                  v94 = (((unint64_t)v93 >> 4) - 2) >> 1;
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 16 * v94 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 16 * v94 + 8) + 32), &v117);
                  v95 = v117.u64[1];
                  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v87->i64[1] + 24), *(uint64_t **)(v87->i64[1] + 32), &v116);
                  if (v95 < v116.i64[1])
                  {
                    v96 = v87->i64[0];
                    v97 = v87->i64[1];
                    do
                    {
                      v98 = v87;
                      v87 = (int8x16_t *)(a1 + 16 * v94);
                      *v98 = *v87;
                      if (!v94)
                        break;
                      v94 = (v94 - 1) >> 1;
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 16 * v94 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 16 * v94 + 8) + 32), &v117);
                      v99 = v117.u64[1];
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v97 + 24), *(uint64_t **)(v97 + 32), &v116);
                    }
                    while (v99 < v116.i64[1]);
                    v87->i64[0] = v96;
                    v87->i64[1] = v97;
                  }
                }
              }
            }
            while (v9-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (__int128 *)(a1 + 16 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x801)
        {
          sub_1C6017B68(v11, (__int128 *)a1, i8);
        }
        else
        {
          sub_1C6017B68((__int128 *)a1, v11, i8);
          sub_1C6017B68((__int128 *)(a1 + 16), v11 - 1, (__int128 *)a2[-2].i8);
          sub_1C6017B68((__int128 *)(a1 + 32), (__int128 *)(a1 + 16 + 16 * v10), (__int128 *)a2[-3].i8);
          sub_1C6017B68(v11 - 1, v11, (__int128 *)(a1 + 16 + 16 * v10));
          v117 = *(int8x16_t *)a1;
          *(_OWORD *)a1 = *v11;
          *v11 = (__int128)v117;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 - 8) + 24), *(uint64_t **)(*(_QWORD *)(a1 - 8) + 32), &v117);
          v12 = v117.u64[1];
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 24), *(uint64_t **)(*(_QWORD *)(a1 + 8) + 32), &v116);
          if (v12 >= v116.i64[1])
          {
            v33 = *(_QWORD *)(a1 + 8);
            v112 = *(_QWORD *)a1;
            v34 = *(uint64_t **)(v33 + 24);
            v35 = *(uint64_t **)(v33 + 32);
            llvm::DIExpression::getFragmentInfo(v34, v35, &v117);
            v36 = v117.u64[1];
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v6[-1].i64[1] + 24), *(uint64_t **)(v6[-1].i64[1] + 32), &v116);
            if (v36 >= v116.i64[1])
            {
              v39 = (int8x16_t *)(a1 + 16);
              do
              {
                v7 = v39;
                if (v39 >= v6)
                  break;
                llvm::DIExpression::getFragmentInfo(v34, v35, &v117);
                v40 = v117.u64[1];
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v7->i64[1] + 24), *(uint64_t **)(v7->i64[1] + 32), &v116);
                v39 = v7 + 1;
              }
              while (v40 >= v116.i64[1]);
            }
            else
            {
              v37 = (int8x16_t *)a1;
              do
              {
                v7 = v37 + 1;
                llvm::DIExpression::getFragmentInfo(v34, v35, &v117);
                v38 = v117.u64[1];
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v37[1].i64[1] + 24), *(uint64_t **)(v37[1].i64[1] + 32), &v116);
                ++v37;
              }
              while (v38 >= v116.i64[1]);
            }
            v41 = v6;
            if (v7 < v6)
            {
              v42 = v6;
              do
              {
                v41 = v42 - 1;
                llvm::DIExpression::getFragmentInfo(v34, v35, &v117);
                v43 = v117.u64[1];
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v42[-1].i64[1] + 24), *(uint64_t **)(v42[-1].i64[1] + 32), &v116);
                --v42;
              }
              while (v43 < v116.i64[1]);
            }
            while (v7 < v41)
            {
              v117 = *v7;
              *v7 = *v41;
              *v41 = v117;
              v44 = *(uint64_t **)(v33 + 24);
              v45 = *(uint64_t **)(v33 + 32);
              do
              {
                v46 = v7++;
                llvm::DIExpression::getFragmentInfo(v44, v45, &v117);
                v47 = v117.u64[1];
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v46[1].i64[1] + 24), *(uint64_t **)(v46[1].i64[1] + 32), &v116);
              }
              while (v47 >= v116.i64[1]);
              do
              {
                v48 = v41--;
                llvm::DIExpression::getFragmentInfo(v44, v45, &v117);
                v49 = v117.u64[1];
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v48[-1].i64[1] + 24), *(uint64_t **)(v48[-1].i64[1] + 32), &v116);
              }
              while (v49 < v116.i64[1]);
            }
            if (&v7[-1] != (int8x16_t *)a1)
              *(int8x16_t *)a1 = v7[-1];
            a4 = 0;
            v7[-1].i64[0] = v112;
            v7[-1].i64[1] = v33;
            continue;
          }
        }
        v111 = a3;
        v13 = 0;
        v14 = *(_QWORD *)a1;
        v15 = *(_QWORD *)(a1 + 8);
        do
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(a1 + v13 + 24) + 24), *(uint64_t **)(*(_QWORD *)(a1 + v13 + 24) + 32), &v117);
          v16 = v117.u64[1];
          v17 = *(uint64_t **)(v15 + 24);
          v18 = *(uint64_t **)(v15 + 32);
          llvm::DIExpression::getFragmentInfo(v17, v18, &v116);
          v13 += 16;
        }
        while (v16 < v116.i64[1]);
        v19 = (int8x16_t *)(a1 + v13);
        v20 = a2;
        if (v13 == 16)
        {
          v23 = a2;
          while (v19 < v23)
          {
            v21 = v23 - 1;
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v23[-1].i64[1] + 24), *(uint64_t **)(v23[-1].i64[1] + 32), &v117);
            v24 = v117.u64[1];
            llvm::DIExpression::getFragmentInfo(v17, v18, &v116);
            v23 = v21;
            if (v24 < v116.i64[1])
              goto LABEL_20;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 1;
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v20[-1].i64[1] + 24), *(uint64_t **)(v20[-1].i64[1] + 32), &v117);
            v22 = v117.u64[1];
            llvm::DIExpression::getFragmentInfo(v17, v18, &v116);
            v20 = v21;
          }
          while (v22 >= v116.i64[1]);
        }
LABEL_20:
        v7 = v19;
        if (v19 < v21)
        {
          v25 = v21;
          do
          {
            v117 = *v7;
            *v7 = *v25;
            *v25 = v117;
            do
            {
              v26 = v7[1].i64[1];
              ++v7;
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v26 + 24), *(uint64_t **)(v26 + 32), &v117);
              v27 = v117.u64[1];
              v28 = *(uint64_t **)(v15 + 24);
              v29 = *(uint64_t **)(v15 + 32);
              llvm::DIExpression::getFragmentInfo(v28, v29, &v116);
            }
            while (v27 < v116.i64[1]);
            do
            {
              v30 = v25[-1].i64[1];
              --v25;
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v30 + 24), *(uint64_t **)(v30 + 32), &v117);
              v31 = v117.u64[1];
              llvm::DIExpression::getFragmentInfo(v28, v29, &v116);
            }
            while (v31 >= v116.i64[1]);
          }
          while (v7 < v25);
        }
        if (&v7[-1] != (int8x16_t *)a1)
          *(int8x16_t *)a1 = v7[-1];
        v7[-1].i64[0] = v14;
        v7[-1].i64[1] = v15;
        a3 = v111;
        v6 = a2;
        if (v19 < v21)
        {
LABEL_31:
          sub_1C6017018(a1, &v7[-1], v111, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = sub_1C6017CF0(a1, (int8x16_t *)v7[-1].i64);
        if (!sub_1C6017CF0((uint64_t)v7, a2))
        {
          if (v32)
            continue;
          goto LABEL_31;
        }
        a2 = v7 - 1;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a2 - 40;
  v130 = (__int128 *)(a2 - 120);
  v131 = (__int128 *)(a2 - 80);
  v11 = a1;
  v132 = a2;
  while (2)
  {
    a1 = v11;
    v12 = a2 - v11;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v11) >> 3);
    switch(v13)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)((__int128 *)v10, (__int128 *)a1))
        {
          v59 = *(_OWORD *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v139 = *(_QWORD *)(a1 + 32);
          v137 = v59;
          v138 = v60;
          v61 = *(_OWORD *)v10;
          v62 = *(_OWORD *)(v10 + 16);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 + 32);
          *(_OWORD *)a1 = v61;
          *(_OWORD *)(a1 + 16) = v62;
          v63 = v137;
          v64 = v138;
          *(_WORD *)(v10 + 32) = v139;
          *(_OWORD *)v10 = v63;
          *(_OWORD *)(v10 + 16) = v64;
        }
        return;
      case 3:
        sub_1C6123248((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)v10, a3);
        return;
      case 4:
        sub_1C6123574(a1, a1 + 40, a1 + 80, v10, a3);
        return;
      case 5:
        sub_1C612365C(a1, a1 + 40, a1 + 80, a1 + 120, v10, a3);
        return;
      default:
        if (v12 <= 959)
        {
          v65 = (__int128 *)(a1 + 40);
          v67 = a1 == a2 || v65 == (__int128 *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = a1;
              do
              {
                v70 = (__int128 *)v69;
                v69 = (uint64_t)v65;
                if ((*a3)(v65, v70))
                {
                  v71 = *(_OWORD *)v69;
                  v72 = *(_OWORD *)(v69 + 16);
                  v139 = *(_QWORD *)(v69 + 32);
                  v137 = v71;
                  v138 = v72;
                  v73 = v68;
                  while (1)
                  {
                    v74 = a1 + v73;
                    v75 = *(_OWORD *)(a1 + v73 + 16);
                    *(_OWORD *)(v74 + 40) = *(_OWORD *)(a1 + v73);
                    *(_OWORD *)(v74 + 56) = v75;
                    *(_WORD *)(v74 + 72) = *(_WORD *)(a1 + v73 + 32);
                    if (!v73)
                      break;
                    v73 -= 40;
                    if (((*a3)(&v137, (__int128 *)(v73 + a1)) & 1) == 0)
                    {
                      v76 = a1 + v73 + 40;
                      goto LABEL_74;
                    }
                  }
                  v76 = a1;
LABEL_74:
                  v77 = v137;
                  v78 = v138;
                  *(_WORD *)(v76 + 32) = v139;
                  *(_OWORD *)v76 = v77;
                  *(_OWORD *)(v76 + 16) = v78;
                }
                v65 = (__int128 *)(v69 + 40);
                v68 += 40;
              }
              while (v69 + 40 != a2);
            }
          }
          else if (!v67)
          {
            v121 = a1 - 40;
            do
            {
              v122 = (__int128 *)a1;
              a1 = (uint64_t)v65;
              if ((*a3)(v65, v122))
              {
                v123 = *(_OWORD *)a1;
                v124 = *(_OWORD *)(a1 + 16);
                v139 = *(_QWORD *)(a1 + 32);
                v137 = v123;
                v138 = v124;
                v125 = v121;
                do
                {
                  v126 = *(_OWORD *)(v125 + 56);
                  *(_OWORD *)(v125 + 80) = *(_OWORD *)(v125 + 40);
                  *(_OWORD *)(v125 + 96) = v126;
                  *(_WORD *)(v125 + 112) = *(_WORD *)(v125 + 72);
                  v127 = (*a3)(&v137, (__int128 *)v125);
                  v125 -= 40;
                }
                while ((v127 & 1) != 0);
                v128 = v137;
                v129 = v138;
                *(_WORD *)(v125 + 112) = v139;
                *(_OWORD *)(v125 + 80) = v128;
                *(_OWORD *)(v125 + 96) = v129;
              }
              v65 = (__int128 *)(a1 + 40);
              v121 += 40;
            }
            while (a1 + 40 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v79 = (unint64_t)(v13 - 2) >> 1;
            v80 = v79;
            do
            {
              v81 = v80;
              if (v79 >= v80)
              {
                v82 = (2 * v80) | 1;
                v83 = a1 + 40 * v82;
                if (2 * v80 + 2 < v13 && (*a3)((__int128 *)(a1 + 40 * v82), (__int128 *)(v83 + 40)))
                {
                  v83 += 40;
                  v82 = 2 * v81 + 2;
                }
                v84 = a1 + 40 * v81;
                if (((*a3)((__int128 *)v83, (__int128 *)v84) & 1) == 0)
                {
                  v85 = *(_OWORD *)v84;
                  v86 = *(_OWORD *)(v84 + 16);
                  v139 = *(_QWORD *)(v84 + 32);
                  v137 = v85;
                  v138 = v86;
                  do
                  {
                    v87 = v83;
                    v88 = *(_OWORD *)v83;
                    v89 = *(_OWORD *)(v83 + 16);
                    *(_WORD *)(v84 + 32) = *(_WORD *)(v83 + 32);
                    *(_OWORD *)v84 = v88;
                    *(_OWORD *)(v84 + 16) = v89;
                    if (v79 < v82)
                      break;
                    v90 = (2 * v82) | 1;
                    v83 = a1 + 40 * v90;
                    v91 = 2 * v82 + 2;
                    if (v91 < v13 && (*a3)((__int128 *)(a1 + 40 * v90), (__int128 *)(v83 + 40)))
                    {
                      v83 += 40;
                      v90 = v91;
                    }
                    v84 = v87;
                    v82 = v90;
                  }
                  while (!(*a3)((__int128 *)v83, &v137));
                  v92 = v137;
                  v93 = v138;
                  *(_WORD *)(v87 + 32) = v139;
                  *(_OWORD *)v87 = v92;
                  *(_OWORD *)(v87 + 16) = v93;
                }
              }
              v80 = v81 - 1;
            }
            while (v81);
            v94 = (_OWORD *)v132;
            do
            {
              v133 = v94;
              v95 = 0;
              v96 = *(_OWORD *)a1;
              v97 = *(_OWORD *)(a1 + 16);
              v136 = *(_QWORD *)(a1 + 32);
              v134 = v96;
              v135 = v97;
              v98 = a1;
              do
              {
                v99 = v98 + 40 * v95 + 40;
                v100 = (2 * v95) | 1;
                v101 = 2 * v95 + 2;
                if (v101 < v13
                  && (*a3)((__int128 *)(v98 + 40 * v95 + 40), (__int128 *)(v98 + 40 * v95 + 80)))
                {
                  v99 += 40;
                  v100 = v101;
                }
                v102 = *(_OWORD *)v99;
                v103 = *(_OWORD *)(v99 + 16);
                *(_WORD *)(v98 + 32) = *(_WORD *)(v99 + 32);
                *(_OWORD *)v98 = v102;
                *(_OWORD *)(v98 + 16) = v103;
                v98 = v99;
                v95 = v100;
              }
              while (v100 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
              v94 = (_OWORD *)((char *)v133 - 40);
              if ((_OWORD *)v99 == (_OWORD *)((char *)v133 - 40))
              {
                v118 = v134;
                v119 = v135;
                *(_WORD *)(v99 + 32) = v136;
                *(_OWORD *)v99 = v118;
                *(_OWORD *)(v99 + 16) = v119;
              }
              else
              {
                v104 = *v94;
                v105 = *(_OWORD *)((char *)v133 - 24);
                *(_WORD *)(v99 + 32) = *((_WORD *)v133 - 4);
                *(_OWORD *)v99 = v104;
                *(_OWORD *)(v99 + 16) = v105;
                v106 = v134;
                v107 = v135;
                *((_WORD *)v133 - 4) = v136;
                *v94 = v106;
                *(_OWORD *)((char *)v133 - 24) = v107;
                v108 = v99 - a1 + 40;
                if (v108 >= 41)
                {
                  v109 = (v108 / 0x28uLL - 2) >> 1;
                  v110 = a1 + 40 * v109;
                  if ((*a3)((__int128 *)v110, (__int128 *)v99))
                  {
                    v111 = *(_OWORD *)v99;
                    v112 = *(_OWORD *)(v99 + 16);
                    v139 = *(_QWORD *)(v99 + 32);
                    v137 = v111;
                    v138 = v112;
                    do
                    {
                      v113 = v110;
                      v114 = *(_OWORD *)v110;
                      v115 = *(_OWORD *)(v110 + 16);
                      *(_WORD *)(v99 + 32) = *(_WORD *)(v110 + 32);
                      *(_OWORD *)v99 = v114;
                      *(_OWORD *)(v99 + 16) = v115;
                      if (!v109)
                        break;
                      v109 = (v109 - 1) >> 1;
                      v110 = a1 + 40 * v109;
                      v99 = v113;
                    }
                    while (((*a3)((__int128 *)v110, &v137) & 1) != 0);
                    v116 = v137;
                    v117 = v138;
                    *(_WORD *)(v113 + 32) = v139;
                    *(_OWORD *)v113 = v116;
                    *(_OWORD *)(v113 + 16) = v117;
                  }
                }
              }
            }
            while (v13-- > 2);
          }
          return;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = a1 + 40 * ((unint64_t)v13 >> 1);
        if ((unint64_t)v12 < 0x1401)
        {
          sub_1C6123248((__int128 *)v15, (__int128 *)a1, (__int128 *)v10, a3);
        }
        else
        {
          sub_1C6123248((__int128 *)a1, (__int128 *)v15, (__int128 *)v10, a3);
          v16 = 5 * v14;
          sub_1C6123248((__int128 *)(a1 + 40), (__int128 *)(a1 + 8 * v16 - 40), v131, a3);
          sub_1C6123248((__int128 *)(a1 + 80), (__int128 *)(a1 + 40 + 8 * v16), v130, a3);
          sub_1C6123248((__int128 *)(a1 + 8 * v16 - 40), (__int128 *)v15, (__int128 *)(a1 + 40 + 8 * v16), a3);
          v17 = *(_OWORD *)a1;
          v18 = *(_OWORD *)(a1 + 16);
          v139 = *(_QWORD *)(a1 + 32);
          v137 = v17;
          v138 = v18;
          v19 = *(_OWORD *)v15;
          v20 = *(_OWORD *)(v15 + 16);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v15 + 32);
          *(_OWORD *)a1 = v19;
          *(_OWORD *)(a1 + 16) = v20;
          v21 = v137;
          v22 = v138;
          *(_WORD *)(v15 + 32) = v139;
          *(_OWORD *)v15 = v21;
          *(_OWORD *)(v15 + 16) = v22;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 40), (__int128 *)a1) & 1) == 0)
        {
          v43 = *(_OWORD *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v136 = *(_QWORD *)(a1 + 32);
          v134 = v43;
          v135 = v44;
          if (((*a3)(&v134, (__int128 *)v10) & 1) != 0)
          {
            v11 = a1;
            do
              v11 += 40;
            while (((*a3)(&v134, (__int128 *)v11) & 1) == 0);
          }
          else
          {
            v45 = (__int128 *)(a1 + 40);
            do
            {
              v11 = (unint64_t)v45;
              if ((unint64_t)v45 >= a2)
                break;
              v46 = (*a3)(&v134, v45);
              v45 = (__int128 *)(v11 + 40);
            }
            while (!v46);
          }
          v47 = a2;
          if (v11 < a2)
          {
            v47 = a2;
            do
              v47 -= 40;
            while (((*a3)(&v134, (__int128 *)v47) & 1) != 0);
          }
          while (v11 < v47)
          {
            v48 = *(_OWORD *)v11;
            v49 = *(_OWORD *)(v11 + 16);
            v139 = *(_QWORD *)(v11 + 32);
            v137 = v48;
            v138 = v49;
            v50 = *(_OWORD *)v47;
            v51 = *(_OWORD *)(v47 + 16);
            *(_WORD *)(v11 + 32) = *(_WORD *)(v47 + 32);
            *(_OWORD *)v11 = v50;
            *(_OWORD *)(v11 + 16) = v51;
            v52 = v137;
            v53 = v138;
            *(_WORD *)(v47 + 32) = v139;
            *(_OWORD *)v47 = v52;
            *(_OWORD *)(v47 + 16) = v53;
            do
              v11 += 40;
            while (!(*a3)(&v134, (__int128 *)v11));
            do
              v47 -= 40;
            while (((*a3)(&v134, (__int128 *)v47) & 1) != 0);
          }
          v54 = (__int128 *)(v11 - 40);
          if (v11 - 40 != a1)
          {
            v55 = *v54;
            v56 = *(_OWORD *)(v11 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v11 - 8);
            *(_OWORD *)a1 = v55;
            *(_OWORD *)(a1 + 16) = v56;
          }
          a5 = 0;
          v57 = v134;
          v58 = v135;
          *(_WORD *)(v11 - 8) = v136;
          *v54 = v57;
          *(_OWORD *)(v11 - 24) = v58;
          continue;
        }
        v23 = 0;
        v24 = *(_OWORD *)a1;
        v25 = *(_OWORD *)(a1 + 16);
        v136 = *(_QWORD *)(a1 + 32);
        v134 = v24;
        v135 = v25;
        do
          v23 += 40;
        while (((*a3)((__int128 *)(v23 + a1), &v134) & 1) != 0);
        v26 = a1 + v23;
        v27 = (__int128 *)v132;
        if (v23 == 40)
        {
          v27 = (__int128 *)v132;
          do
          {
            if (v26 >= (unint64_t)v27)
              break;
            v27 = (__int128 *)((char *)v27 - 40);
          }
          while (((*a3)(v27, &v134) & 1) == 0);
        }
        else
        {
          do
            v27 = (__int128 *)((char *)v27 - 40);
          while (!(*a3)(v27, &v134));
        }
        if (v26 >= (unint64_t)v27)
        {
          v36 = v26 - 40;
        }
        else
        {
          v28 = a1 + v23;
          v29 = v27;
          do
          {
            v30 = *(_OWORD *)v28;
            v31 = *(_OWORD *)(v28 + 16);
            v139 = *(_QWORD *)(v28 + 32);
            v137 = v30;
            v138 = v31;
            v32 = *v29;
            v33 = v29[1];
            *(_WORD *)(v28 + 32) = *((_WORD *)v29 + 16);
            *(_OWORD *)v28 = v32;
            *(_OWORD *)(v28 + 16) = v33;
            v34 = v137;
            v35 = v138;
            *((_WORD *)v29 + 16) = v139;
            *v29 = v34;
            v29[1] = v35;
            do
              v28 += 40;
            while (((*a3)((__int128 *)v28, &v134) & 1) != 0);
            do
              v29 = (__int128 *)((char *)v29 - 40);
            while (!(*a3)(v29, &v134));
          }
          while (v28 < (unint64_t)v29);
          v36 = v28 - 40;
        }
        if (v36 != a1)
        {
          v37 = *(_OWORD *)v36;
          v38 = *(_OWORD *)(v36 + 16);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v36 + 32);
          *(_OWORD *)a1 = v37;
          *(_OWORD *)(a1 + 16) = v38;
        }
        v39 = v134;
        v40 = v135;
        *(_WORD *)(v36 + 32) = v136;
        *(_OWORD *)v36 = v39;
        *(_OWORD *)(v36 + 16) = v40;
        v41 = v26 >= (unint64_t)v27;
        a2 = v132;
        if (!v41)
        {
LABEL_32:
          sub_1C612293C(a1, v36, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v36 + 40;
          continue;
        }
        v42 = sub_1C6123380(a1, v36, a3);
        v11 = v36 + 40;
        if (!sub_1C6123380(v36 + 40, v132, a3))
        {
          if (v42)
            continue;
          goto LABEL_32;
        }
        a2 = v36;
        if (!v42)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a2 - 40;
  v130 = (__int128 *)(a2 - 120);
  v131 = (__int128 *)(a2 - 80);
  v11 = a1;
  v132 = a2;
  while (2)
  {
    a1 = v11;
    v12 = a2 - v11;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v11) >> 3);
    switch(v13)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)((__int128 *)v10, (__int128 *)a1))
        {
          v59 = *(_OWORD *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v139 = *(_QWORD *)(a1 + 32);
          v137 = v59;
          v138 = v60;
          v61 = *(_OWORD *)v10;
          v62 = *(_OWORD *)(v10 + 16);
          *(_BYTE *)(a1 + 32) = *(_BYTE *)(v10 + 32);
          *(_OWORD *)a1 = v61;
          *(_OWORD *)(a1 + 16) = v62;
          v63 = v137;
          v64 = v138;
          *(_BYTE *)(v10 + 32) = v139;
          *(_OWORD *)v10 = v63;
          *(_OWORD *)(v10 + 16) = v64;
        }
        return;
      case 3:
        sub_1C54A113C((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)v10, a3);
        return;
      case 4:
        sub_1C54A1468(a1, a1 + 40, a1 + 80, v10, a3);
        return;
      case 5:
        sub_1C54A1550(a1, a1 + 40, a1 + 80, a1 + 120, v10, a3);
        return;
      default:
        if (v12 <= 959)
        {
          v65 = (__int128 *)(a1 + 40);
          v67 = a1 == a2 || v65 == (__int128 *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = a1;
              do
              {
                v70 = (__int128 *)v69;
                v69 = (uint64_t)v65;
                if ((*a3)(v65, v70))
                {
                  v71 = *(_OWORD *)v69;
                  v72 = *(_OWORD *)(v69 + 16);
                  v139 = *(_QWORD *)(v69 + 32);
                  v137 = v71;
                  v138 = v72;
                  v73 = v68;
                  while (1)
                  {
                    v74 = a1 + v73;
                    v75 = *(_OWORD *)(a1 + v73 + 16);
                    *(_OWORD *)(v74 + 40) = *(_OWORD *)(a1 + v73);
                    *(_OWORD *)(v74 + 56) = v75;
                    *(_BYTE *)(v74 + 72) = *(_BYTE *)(a1 + v73 + 32);
                    if (!v73)
                      break;
                    v73 -= 40;
                    if (((*a3)(&v137, (__int128 *)(v73 + a1)) & 1) == 0)
                    {
                      v76 = a1 + v73 + 40;
                      goto LABEL_74;
                    }
                  }
                  v76 = a1;
LABEL_74:
                  v77 = v137;
                  v78 = v138;
                  *(_BYTE *)(v76 + 32) = v139;
                  *(_OWORD *)v76 = v77;
                  *(_OWORD *)(v76 + 16) = v78;
                }
                v65 = (__int128 *)(v69 + 40);
                v68 += 40;
              }
              while (v69 + 40 != a2);
            }
          }
          else if (!v67)
          {
            v121 = a1 - 40;
            do
            {
              v122 = (__int128 *)a1;
              a1 = (uint64_t)v65;
              if ((*a3)(v65, v122))
              {
                v123 = *(_OWORD *)a1;
                v124 = *(_OWORD *)(a1 + 16);
                v139 = *(_QWORD *)(a1 + 32);
                v137 = v123;
                v138 = v124;
                v125 = v121;
                do
                {
                  v126 = *(_OWORD *)(v125 + 56);
                  *(_OWORD *)(v125 + 80) = *(_OWORD *)(v125 + 40);
                  *(_OWORD *)(v125 + 96) = v126;
                  *(_BYTE *)(v125 + 112) = *(_BYTE *)(v125 + 72);
                  v127 = (*a3)(&v137, (__int128 *)v125);
                  v125 -= 40;
                }
                while ((v127 & 1) != 0);
                v128 = v137;
                v129 = v138;
                *(_BYTE *)(v125 + 112) = v139;
                *(_OWORD *)(v125 + 80) = v128;
                *(_OWORD *)(v125 + 96) = v129;
              }
              v65 = (__int128 *)(a1 + 40);
              v121 += 40;
            }
            while (a1 + 40 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v79 = (unint64_t)(v13 - 2) >> 1;
            v80 = v79;
            do
            {
              v81 = v80;
              if (v79 >= v80)
              {
                v82 = (2 * v80) | 1;
                v83 = a1 + 40 * v82;
                if (2 * v80 + 2 < v13 && (*a3)((__int128 *)(a1 + 40 * v82), (__int128 *)(v83 + 40)))
                {
                  v83 += 40;
                  v82 = 2 * v81 + 2;
                }
                v84 = a1 + 40 * v81;
                if (((*a3)((__int128 *)v83, (__int128 *)v84) & 1) == 0)
                {
                  v85 = *(_OWORD *)v84;
                  v86 = *(_OWORD *)(v84 + 16);
                  v139 = *(_QWORD *)(v84 + 32);
                  v137 = v85;
                  v138 = v86;
                  do
                  {
                    v87 = v83;
                    v88 = *(_OWORD *)v83;
                    v89 = *(_OWORD *)(v83 + 16);
                    *(_BYTE *)(v84 + 32) = *(_BYTE *)(v83 + 32);
                    *(_OWORD *)v84 = v88;
                    *(_OWORD *)(v84 + 16) = v89;
                    if (v79 < v82)
                      break;
                    v90 = (2 * v82) | 1;
                    v83 = a1 + 40 * v90;
                    v91 = 2 * v82 + 2;
                    if (v91 < v13 && (*a3)((__int128 *)(a1 + 40 * v90), (__int128 *)(v83 + 40)))
                    {
                      v83 += 40;
                      v90 = v91;
                    }
                    v84 = v87;
                    v82 = v90;
                  }
                  while (!(*a3)((__int128 *)v83, &v137));
                  v92 = v137;
                  v93 = v138;
                  *(_BYTE *)(v87 + 32) = v139;
                  *(_OWORD *)v87 = v92;
                  *(_OWORD *)(v87 + 16) = v93;
                }
              }
              v80 = v81 - 1;
            }
            while (v81);
            v94 = (_OWORD *)v132;
            do
            {
              v133 = v94;
              v95 = 0;
              v96 = *(_OWORD *)a1;
              v97 = *(_OWORD *)(a1 + 16);
              v136 = *(_QWORD *)(a1 + 32);
              v134 = v96;
              v135 = v97;
              v98 = a1;
              do
              {
                v99 = v98 + 40 * v95 + 40;
                v100 = (2 * v95) | 1;
                v101 = 2 * v95 + 2;
                if (v101 < v13
                  && (*a3)((__int128 *)(v98 + 40 * v95 + 40), (__int128 *)(v98 + 40 * v95 + 80)))
                {
                  v99 += 40;
                  v100 = v101;
                }
                v102 = *(_OWORD *)v99;
                v103 = *(_OWORD *)(v99 + 16);
                *(_BYTE *)(v98 + 32) = *(_BYTE *)(v99 + 32);
                *(_OWORD *)v98 = v102;
                *(_OWORD *)(v98 + 16) = v103;
                v98 = v99;
                v95 = v100;
              }
              while (v100 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
              v94 = (_OWORD *)((char *)v133 - 40);
              if ((_OWORD *)v99 == (_OWORD *)((char *)v133 - 40))
              {
                v118 = v134;
                v119 = v135;
                *(_BYTE *)(v99 + 32) = v136;
                *(_OWORD *)v99 = v118;
                *(_OWORD *)(v99 + 16) = v119;
              }
              else
              {
                v104 = *v94;
                v105 = *(_OWORD *)((char *)v133 - 24);
                *(_BYTE *)(v99 + 32) = *((_BYTE *)v133 - 8);
                *(_OWORD *)v99 = v104;
                *(_OWORD *)(v99 + 16) = v105;
                v106 = v134;
                v107 = v135;
                *((_BYTE *)v133 - 8) = v136;
                *v94 = v106;
                *(_OWORD *)((char *)v133 - 24) = v107;
                v108 = v99 - a1 + 40;
                if (v108 >= 41)
                {
                  v109 = (v108 / 0x28uLL - 2) >> 1;
                  v110 = a1 + 40 * v109;
                  if ((*a3)((__int128 *)v110, (__int128 *)v99))
                  {
                    v111 = *(_OWORD *)v99;
                    v112 = *(_OWORD *)(v99 + 16);
                    v139 = *(_QWORD *)(v99 + 32);
                    v137 = v111;
                    v138 = v112;
                    do
                    {
                      v113 = v110;
                      v114 = *(_OWORD *)v110;
                      v115 = *(_OWORD *)(v110 + 16);
                      *(_BYTE *)(v99 + 32) = *(_BYTE *)(v110 + 32);
                      *(_OWORD *)v99 = v114;
                      *(_OWORD *)(v99 + 16) = v115;
                      if (!v109)
                        break;
                      v109 = (v109 - 1) >> 1;
                      v110 = a1 + 40 * v109;
                      v99 = v113;
                    }
                    while (((*a3)((__int128 *)v110, &v137) & 1) != 0);
                    v116 = v137;
                    v117 = v138;
                    *(_BYTE *)(v113 + 32) = v139;
                    *(_OWORD *)v113 = v116;
                    *(_OWORD *)(v113 + 16) = v117;
                  }
                }
              }
            }
            while (v13-- > 2);
          }
          return;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = a1 + 40 * ((unint64_t)v13 >> 1);
        if ((unint64_t)v12 < 0x1401)
        {
          sub_1C54A113C((__int128 *)v15, (__int128 *)a1, (__int128 *)v10, a3);
        }
        else
        {
          sub_1C54A113C((__int128 *)a1, (__int128 *)v15, (__int128 *)v10, a3);
          v16 = 5 * v14;
          sub_1C54A113C((__int128 *)(a1 + 40), (__int128 *)(a1 + 8 * v16 - 40), v131, a3);
          sub_1C54A113C((__int128 *)(a1 + 80), (__int128 *)(a1 + 40 + 8 * v16), v130, a3);
          sub_1C54A113C((__int128 *)(a1 + 8 * v16 - 40), (__int128 *)v15, (__int128 *)(a1 + 40 + 8 * v16), a3);
          v17 = *(_OWORD *)a1;
          v18 = *(_OWORD *)(a1 + 16);
          v139 = *(_QWORD *)(a1 + 32);
          v137 = v17;
          v138 = v18;
          v19 = *(_OWORD *)v15;
          v20 = *(_OWORD *)(v15 + 16);
          *(_BYTE *)(a1 + 32) = *(_BYTE *)(v15 + 32);
          *(_OWORD *)a1 = v19;
          *(_OWORD *)(a1 + 16) = v20;
          v21 = v137;
          v22 = v138;
          *(_BYTE *)(v15 + 32) = v139;
          *(_OWORD *)v15 = v21;
          *(_OWORD *)(v15 + 16) = v22;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 40), (__int128 *)a1) & 1) == 0)
        {
          v43 = *(_OWORD *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v136 = *(_QWORD *)(a1 + 32);
          v134 = v43;
          v135 = v44;
          if (((*a3)(&v134, (__int128 *)v10) & 1) != 0)
          {
            v11 = a1;
            do
              v11 += 40;
            while (((*a3)(&v134, (__int128 *)v11) & 1) == 0);
          }
          else
          {
            v45 = (__int128 *)(a1 + 40);
            do
            {
              v11 = (unint64_t)v45;
              if ((unint64_t)v45 >= a2)
                break;
              v46 = (*a3)(&v134, v45);
              v45 = (__int128 *)(v11 + 40);
            }
            while (!v46);
          }
          v47 = a2;
          if (v11 < a2)
          {
            v47 = a2;
            do
              v47 -= 40;
            while (((*a3)(&v134, (__int128 *)v47) & 1) != 0);
          }
          while (v11 < v47)
          {
            v48 = *(_OWORD *)v11;
            v49 = *(_OWORD *)(v11 + 16);
            v139 = *(_QWORD *)(v11 + 32);
            v137 = v48;
            v138 = v49;
            v50 = *(_OWORD *)v47;
            v51 = *(_OWORD *)(v47 + 16);
            *(_BYTE *)(v11 + 32) = *(_BYTE *)(v47 + 32);
            *(_OWORD *)v11 = v50;
            *(_OWORD *)(v11 + 16) = v51;
            v52 = v137;
            v53 = v138;
            *(_BYTE *)(v47 + 32) = v139;
            *(_OWORD *)v47 = v52;
            *(_OWORD *)(v47 + 16) = v53;
            do
              v11 += 40;
            while (!(*a3)(&v134, (__int128 *)v11));
            do
              v47 -= 40;
            while (((*a3)(&v134, (__int128 *)v47) & 1) != 0);
          }
          v54 = (__int128 *)(v11 - 40);
          if (v11 - 40 != a1)
          {
            v55 = *v54;
            v56 = *(_OWORD *)(v11 - 24);
            *(_BYTE *)(a1 + 32) = *(_BYTE *)(v11 - 8);
            *(_OWORD *)a1 = v55;
            *(_OWORD *)(a1 + 16) = v56;
          }
          a5 = 0;
          v57 = v134;
          v58 = v135;
          *(_BYTE *)(v11 - 8) = v136;
          *v54 = v57;
          *(_OWORD *)(v11 - 24) = v58;
          continue;
        }
        v23 = 0;
        v24 = *(_OWORD *)a1;
        v25 = *(_OWORD *)(a1 + 16);
        v136 = *(_QWORD *)(a1 + 32);
        v134 = v24;
        v135 = v25;
        do
          v23 += 40;
        while (((*a3)((__int128 *)(v23 + a1), &v134) & 1) != 0);
        v26 = a1 + v23;
        v27 = (__int128 *)v132;
        if (v23 == 40)
        {
          v27 = (__int128 *)v132;
          do
          {
            if (v26 >= (unint64_t)v27)
              break;
            v27 = (__int128 *)((char *)v27 - 40);
          }
          while (((*a3)(v27, &v134) & 1) == 0);
        }
        else
        {
          do
            v27 = (__int128 *)((char *)v27 - 40);
          while (!(*a3)(v27, &v134));
        }
        if (v26 >= (unint64_t)v27)
        {
          v36 = v26 - 40;
        }
        else
        {
          v28 = a1 + v23;
          v29 = v27;
          do
          {
            v30 = *(_OWORD *)v28;
            v31 = *(_OWORD *)(v28 + 16);
            v139 = *(_QWORD *)(v28 + 32);
            v137 = v30;
            v138 = v31;
            v32 = *v29;
            v33 = v29[1];
            *(_BYTE *)(v28 + 32) = *((_BYTE *)v29 + 32);
            *(_OWORD *)v28 = v32;
            *(_OWORD *)(v28 + 16) = v33;
            v34 = v137;
            v35 = v138;
            *((_BYTE *)v29 + 32) = v139;
            *v29 = v34;
            v29[1] = v35;
            do
              v28 += 40;
            while (((*a3)((__int128 *)v28, &v134) & 1) != 0);
            do
              v29 = (__int128 *)((char *)v29 - 40);
            while (!(*a3)(v29, &v134));
          }
          while (v28 < (unint64_t)v29);
          v36 = v28 - 40;
        }
        if (v36 != a1)
        {
          v37 = *(_OWORD *)v36;
          v38 = *(_OWORD *)(v36 + 16);
          *(_BYTE *)(a1 + 32) = *(_BYTE *)(v36 + 32);
          *(_OWORD *)a1 = v37;
          *(_OWORD *)(a1 + 16) = v38;
        }
        v39 = v134;
        v40 = v135;
        *(_BYTE *)(v36 + 32) = v136;
        *(_OWORD *)v36 = v39;
        *(_OWORD *)(v36 + 16) = v40;
        v41 = v26 >= (unint64_t)v27;
        a2 = v132;
        if (!v41)
        {
LABEL_32:
          sub_1C61237E4(a1, v36, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v36 + 40;
          continue;
        }
        v42 = sub_1C61240F0(a1, v36, a3);
        v11 = v36 + 40;
        if (!sub_1C61240F0(v36 + 40, v132, a3))
        {
          if (v42)
            continue;
          goto LABEL_32;
        }
        a2 = v36;
        if (!v42)
          goto LABEL_1;
        return;
    }
  }
}

__int128 *sub_1C47EA8F8(__int128 *result, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;

  v3 = *((_DWORD *)a2 + 6);
  v4 = *((_DWORD *)result + 6);
  if (v3 <= v4 && (v3 < v4 || *((_DWORD *)a2 + 7) >= *((_DWORD *)result + 7)))
  {
    v9 = *((_DWORD *)a3 + 6);
    if (v9 > v3 || v9 >= v3 && *((_DWORD *)a3 + 7) < *((_DWORD *)a2 + 7))
    {
      v11 = *a2;
      v10 = a2[1];
      v12 = a3[1];
      *a2 = *a3;
      a2[1] = v12;
      *a3 = v11;
      a3[1] = v10;
      v13 = *((_DWORD *)a2 + 6);
      v14 = *((_DWORD *)result + 6);
      if (v13 > v14 || v13 >= v14 && *((_DWORD *)a2 + 7) < *((_DWORD *)result + 7))
      {
        v16 = *result;
        v15 = result[1];
        v17 = a2[1];
        *result = *a2;
        result[1] = v17;
        *a2 = v16;
        a2[1] = v15;
      }
    }
  }
  else
  {
    v5 = *((_DWORD *)a3 + 6);
    if (v5 > v3 || v5 >= v3 && *((_DWORD *)a3 + 7) < *((_DWORD *)a2 + 7))
    {
      v7 = *result;
      v6 = result[1];
      v8 = a3[1];
      *result = *a3;
      result[1] = v8;
LABEL_17:
      *a3 = v7;
      a3[1] = v6;
      return result;
    }
    v19 = *result;
    v18 = result[1];
    v20 = a2[1];
    *result = *a2;
    result[1] = v20;
    *a2 = v19;
    a2[1] = v18;
    v21 = *((_DWORD *)a3 + 6);
    v22 = *((_DWORD *)a2 + 6);
    if (v21 > v22 || v21 >= v22 && *((_DWORD *)a3 + 7) < *((_DWORD *)a2 + 7))
    {
      v7 = *a2;
      v6 = a2[1];
      v23 = a3[1];
      *a2 = *a3;
      a2[1] = v23;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL sub_1C47EAA08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unsigned int v23;
  __int128 v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  unsigned int v28;
  unsigned int v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unsigned int v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 8);
      v7 = *(_DWORD *)(a1 + 24);
      if (v6 > v7 || v6 >= v7 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 28))
      {
        v8 = (__int128 *)(a2 - 32);
        v10 = *(_OWORD *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v11 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v11;
        *v8 = v10;
        v8[1] = v9;
      }
      return result;
    case 3:
      sub_1C47EA8F8((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      sub_1C47EACFC(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      v25 = (__int128 *)(a1 + 32);
      v26 = (__int128 *)(a1 + 64);
      v27 = (__int128 *)(a1 + 96);
      sub_1C47EACFC(a1, a1 + 32, a1 + 64, a1 + 96);
      v28 = *(_DWORD *)(a2 - 8);
      v29 = *(_DWORD *)(a1 + 120);
      if (v28 > v29 || v28 >= v29 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 124))
      {
        v30 = (_OWORD *)(a2 - 32);
        v32 = *v27;
        v31 = *(_OWORD *)(a1 + 112);
        v33 = *(_OWORD *)(a2 - 16);
        *v27 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v33;
        *v30 = v32;
        v30[1] = v31;
        v34 = *(_DWORD *)(a1 + 120);
        v35 = *(_DWORD *)(a1 + 88);
        if (v34 > v35 || v34 >= v35 && *(_DWORD *)(a1 + 124) < *(_DWORD *)(a1 + 92))
        {
          v37 = *v26;
          v36 = *(_OWORD *)(a1 + 80);
          v38 = *(_OWORD *)(a1 + 112);
          *v26 = *v27;
          *(_OWORD *)(a1 + 80) = v38;
          *v27 = v37;
          *(_OWORD *)(a1 + 112) = v36;
          v39 = *(_DWORD *)(a1 + 88);
          v40 = *(_DWORD *)(a1 + 56);
          if (v39 > v40 || v39 >= v40 && *(_DWORD *)(a1 + 92) < *(_DWORD *)(a1 + 60))
          {
            v42 = *v25;
            v41 = *(_OWORD *)(a1 + 48);
            v43 = *(_OWORD *)(a1 + 80);
            *v25 = *v26;
            *(_OWORD *)(a1 + 48) = v43;
            *v26 = v42;
            *(_OWORD *)(a1 + 80) = v41;
            v44 = *(_DWORD *)(a1 + 56);
            v45 = *(_DWORD *)(a1 + 24);
            if (v44 > v45 || v44 >= v45 && *(_DWORD *)(a1 + 60) < *(_DWORD *)(a1 + 28))
            {
              v47 = *(_OWORD *)a1;
              v46 = *(_OWORD *)(a1 + 16);
              v48 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v25;
              *(_OWORD *)(a1 + 16) = v48;
              *v25 = v47;
              *(_OWORD *)(a1 + 48) = v46;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 64;
      sub_1C47EA8F8((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64));
      v13 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(_DWORD *)(v13 + 24);
    v17 = *(_DWORD *)(v12 + 24);
    if (v16 > v17)
      break;
    if (v16 >= v17)
    {
      v18 = *(_DWORD *)(v13 + 28);
      if (v18 < *(_DWORD *)(v12 + 28))
        goto LABEL_10;
    }
LABEL_20:
    v12 = v13;
    v14 += 32;
    v13 += 32;
    if (v13 == a2)
      return 1;
  }
  v18 = *(_DWORD *)(v13 + 28);
LABEL_10:
  v50 = *(_QWORD *)(v13 + 16);
  v49 = *(_OWORD *)v13;
  v19 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v19;
  v20 = a1;
  if (v12 != a1)
  {
    v21 = v14;
    while (1)
    {
      v22 = (_OWORD *)(a1 + v21);
      v23 = *(_DWORD *)(a1 + v21 + 56);
      if (v16 <= v23)
      {
        if (v16 < v23)
        {
          v20 = a1 + v21 + 64;
          goto LABEL_19;
        }
        if (v18 >= *(_DWORD *)(a1 + v21 + 60))
          break;
      }
      v12 -= 32;
      v24 = v22[3];
      v22[4] = v22[2];
      v22[5] = v24;
      v21 -= 32;
      if (v21 == -64)
      {
        v20 = a1;
        goto LABEL_19;
      }
    }
    v20 = v12;
  }
LABEL_19:
  *(_QWORD *)(v20 + 16) = v50;
  *(_OWORD *)v20 = v49;
  *(_DWORD *)(v20 + 24) = v16;
  *(_DWORD *)(v20 + 28) = v18;
  if (++v15 != 8)
    goto LABEL_20;
  return v13 + 32 == a2;
}

__n128 sub_1C47EACFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;

  sub_1C47EA8F8((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(_DWORD *)(a4 + 24);
  v10 = *(_DWORD *)(a3 + 24);
  if (v9 > v10 || v9 >= v10 && *(_DWORD *)(a4 + 28) < *(_DWORD *)(a3 + 28))
  {
    v11 = *(_OWORD *)a3;
    result = *(__n128 *)(a3 + 16);
    v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_OWORD *)a4 = v11;
    *(__n128 *)(a4 + 16) = result;
    v13 = *(_DWORD *)(a3 + 24);
    v14 = *(_DWORD *)(a2 + 24);
    if (v13 > v14 || v13 >= v14 && *(_DWORD *)(a3 + 28) < *(_DWORD *)(a2 + 28))
    {
      v15 = *(_OWORD *)a2;
      result = *(__n128 *)(a2 + 16);
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(__n128 *)(a3 + 16) = result;
      v17 = *(_DWORD *)(a2 + 24);
      v18 = *(_DWORD *)(a1 + 24);
      if (v17 > v18 || v17 >= v18 && *(_DWORD *)(a2 + 28) < *(_DWORD *)(a1 + 28))
      {
        v19 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 16);
        v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_OWORD *)a2 = v19;
        *(__n128 *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

uint64_t sub_1C47EADDC(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v9 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v21, (llvm *)6, 0, 1, 0);
  v11 = v10;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = v9;
  v13[1] = v11;
  ++*(_DWORD *)(a2 + 8);
  if (v21)
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  v14 = *a4;
  v21 = 0;
  v22 = 0;
  v15 = sub_1C6366AB4(a1, v14, (const llvm::APInt *)&v21, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v21)
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  return sub_1C47E2930(a1, a2, a5);
}

unint64_t sub_1C47EAF20(uint64_t *a1, uint64_t a2, _BOOL8 a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint8x8_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  char *v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  size_t v75;
  unsigned int v76;
  BOOL v77;
  uint64_t j;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t *p_src;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  int64_t v108;
  int v109;
  unint64_t v110;
  unsigned int v111;
  __int128 v112;
  uint64_t v113;
  void *v114;
  unsigned int v115;
  void *v116;
  unsigned int v117;
  __int128 v118;
  uint64_t v119;
  unsigned int v120;
  void *__src;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  void *v125;
  unsigned int v126;
  uint64_t v127;
  _DWORD v128[182];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a2 + 48);
  if (v10)
  {
    v11 = 1;
    while (1)
    {
      if (*(_DWORD *)(v10 + 8) == a3)
      {
        if (!v11)
        {
          v12 = 0;
          goto LABEL_11;
        }
        --v11;
      }
      v10 = *(_QWORD *)(v10 + 32);
      if (!v10)
        goto LABEL_9;
    }
  }
  v11 = 1;
LABEL_9:
  v12 = 1;
LABEL_11:
  if (v11)
    v13 = 0;
  else
    v13 = v12;
  if (a5 && !v13)
    goto LABEL_133;
  v14 = *(unsigned __int16 *)(a2 + 24);
  switch(*(_WORD *)(a2 + 24))
  {
    case 0xAB:
      LODWORD(v112) = 0;
      if (((*(uint64_t (**)(uint64_t *, _QWORD, _QWORD, __int128 *))*a1)(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), &v112) & 1) == 0)goto LABEL_133;
      v15 = *(unsigned int *)(a4 + 8);
      *(_QWORD *)&v118 = 0;
      DWORD2(v118) = 0;
      v119 = 0x1FFFFFFFFLL;
      sub_1C47EBB78(&__src, v15, &v118);
      v16 = sub_1C47EAF20(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &__src, (a5 + 1));
      if (*(_DWORD *)(a4 + 8))
      {
        v17 = 0;
        v18 = 0;
        do
        {
          if (((v112 >> v18) & 1) != 0)
          {
            v19 = *(_QWORD *)a4 + v17;
            v20 = *(_OWORD *)((char *)__src + v17);
            *(_QWORD *)(v19 + 16) = *(_QWORD *)((char *)__src + v17 + 16);
            *(_OWORD *)v19 = v20;
          }
          else
          {
            v21 = *(_QWORD *)a4 + v17;
            *(_QWORD *)v21 = 0;
            *(_DWORD *)(v21 + 8) = 0;
            *(_QWORD *)(v21 + 16) = 0xFFFFFFFFLL;
          }
          ++v18;
          v17 += 24;
        }
        while (v18 < *(unsigned int *)(a4 + 8));
      }
      LODWORD(v22) = v16 + 1;
      v23 = (HIDWORD(v16) + 1);
      v24 = (uint64_t *)__src;
      goto LABEL_71;
    case 0xAC:
      goto LABEL_108;
    case 0xAD:
    case 0xAE:
    case 0xB0:
      goto LABEL_133;
    case 0xAF:
      LODWORD(v112) = 0;
      if (((*(uint64_t (**)(uint64_t *, _QWORD, _QWORD, __int128 *))*a1)(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), &v112) & 1) == 0)goto LABEL_133;
      v36 = *(unsigned int *)(a4 + 8);
      *(_QWORD *)&v118 = 0;
      DWORD2(v118) = 0;
      v119 = 0x1FFFFFFFFLL;
      sub_1C47EBB78(&__src, v36, &v118);
      v37 = sub_1C47EAF20(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &__src, (a5 + 1));
      v30 = HIDWORD(v37);
      v38 = v112;
      if (*(_DWORD *)(a4 + 8) > v112)
      {
        v39 = 0;
        v40 = 24 * v112;
        v41 = v112;
        do
        {
          v42 = *(_QWORD *)a4 + v40 + v39;
          v43 = *(_OWORD *)((char *)__src + v39);
          *(_QWORD *)(v42 + 16) = *(_QWORD *)((char *)__src + v39 + 16);
          *(_OWORD *)v42 = v43;
          ++v41;
          v39 += 24;
        }
        while (v41 < *(unsigned int *)(a4 + 8));
      }
      if (v38)
      {
        v44 = 0;
        v45 = 0;
        do
        {
          v46 = *(_QWORD *)a4 + v44;
          *(_QWORD *)v46 = 0;
          *(_DWORD *)(v46 + 8) = 0;
          *(_QWORD *)(v46 + 16) = 0xFFFFFFFFLL;
          ++v45;
          v44 += 24;
        }
        while (v45 < v112);
        if (v112 <= 4)
          v47 = 1;
        else
          v47 = 2;
        if (v112 <= 8)
          v48 = v47;
        else
          v48 = 4;
        if ((_DWORD)v112 == 16)
          v35 = 1;
        else
          v35 = v48;
      }
      else
      {
        v35 = 1;
      }
      LODWORD(v22) = v37 + 1;
      goto LABEL_69;
    case 0xB1:
      LODWORD(v112) = 0;
      if (((*(uint64_t (**)(uint64_t *, _QWORD, _QWORD, __int128 *))*a1)(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), &v112) & 1) == 0)goto LABEL_133;
      v49 = *(unsigned int *)(a4 + 8);
      *(_QWORD *)&v118 = 0;
      DWORD2(v118) = 0;
      v119 = 0x1FFFFFFFFLL;
      sub_1C47EBB78(&__src, v49, &v118);
      v50 = sub_1C47EAF20(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &__src, (a5 + 1));
      v51 = v112;
      LODWORD(v52) = v112;
      if (*(_DWORD *)(a4 + 8) != (_DWORD)v112)
      {
        v53 = 0;
        v54 = 1;
        do
        {
          v55 = (char *)__src + 24 * v51 + 24 * v54 - 24;
          v56 = *(_QWORD *)a4 + 24 * v53;
          v57 = *(_OWORD *)v55;
          *(_QWORD *)(v56 + 16) = *((_QWORD *)v55 + 2);
          *(_OWORD *)v56 = v57;
          v53 = v54;
          v52 = *(unsigned int *)(a4 + 8);
          v58 = v52 - v51 > (unint64_t)v54++;
        }
        while (v58);
      }
      v59 = (v52 - v51);
      if (v52 > v59)
      {
        v60 = 24 * v59;
        do
        {
          v61 = *(_QWORD *)a4 + v60;
          *(_QWORD *)v61 = 0;
          *(_DWORD *)(v61 + 8) = 0;
          *(_QWORD *)(v61 + 16) = 0xFFFFFFFFLL;
          ++v59;
          v60 += 24;
        }
        while (v59 < *(unsigned int *)(a4 + 8));
      }
      LODWORD(v22) = v50 + 1;
      v23 = (HIDWORD(v50) + 4);
      goto LABEL_70;
    default:
      if (v14 == 58)
      {
        LODWORD(v112) = 0;
        if (!(*(unsigned int (**)(uint64_t *, _QWORD, _QWORD, __int128 *))*a1)(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), &v112))goto LABEL_133;
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v112);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.i32[0] != 1)
          goto LABEL_133;
        v26 = __clz(v112);
        v27 = 31 - v26;
        v28 = *(unsigned int *)(a4 + 8);
        *(_QWORD *)&v118 = 0;
        DWORD2(v118) = 0;
        v119 = 0x1FFFFFFFFLL;
        sub_1C47EBB78(&__src, v28, &v118);
        v29 = sub_1C47EAF20(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &__src, (a5 + 1));
        v30 = HIDWORD(v29);
        if (*(_DWORD *)(a4 + 8) > 31 - v26)
        {
          v31 = 0;
          v32 = 31 - v26;
          do
          {
            v33 = *(_QWORD *)a4 + 24 * (31 - v26) + v31;
            v34 = *(_OWORD *)((char *)__src + v31);
            *(_QWORD *)(v33 + 16) = *(_QWORD *)((char *)__src + v31 + 16);
            *(_OWORD *)v33 = v34;
            ++v32;
            v31 += 24;
          }
          while (v32 < *(unsigned int *)(a4 + 8));
        }
        if (v26 == 31)
        {
          LODWORD(v22) = v29 + 1;
        }
        else
        {
          v62 = 0;
          if (v27 <= 1)
            v63 = 1;
          else
            v63 = 31 - v26;
          v64 = 24 * v63;
          do
          {
            v65 = *(_QWORD *)a4 + v62;
            *(_QWORD *)v65 = 0;
            *(_DWORD *)(v65 + 8) = 0;
            *(_QWORD *)(v65 + 16) = 0xFFFFFFFFLL;
            v62 += 24;
          }
          while (v64 != v62);
          LODWORD(v22) = v29 + 1;
          if (v26 == 15)
          {
            v35 = 1;
            goto LABEL_69;
          }
          if (v27 > 8)
          {
            v35 = 4;
            goto LABEL_69;
          }
        }
        if (v27 <= 4)
          v35 = 1;
        else
          v35 = 2;
LABEL_69:
        v23 = (v35 + v30);
LABEL_70:
        v24 = (uint64_t *)__src;
LABEL_71:
        if (v24 != &v123)
          free(v24);
        return v22 | (unint64_t)(v23 << 32);
      }
      if (v14 != 56)
        goto LABEL_133;
      for (i = 0; i != 64; i += 32)
      {
        v67 = (char *)&__src + i;
        *((_DWORD *)v67 + 2) = 1;
        *(_QWORD *)v67 = 0;
        *((_DWORD *)v67 + 6) = 1;
        *((_QWORD *)v67 + 2) = 0;
      }
      sub_1C6368768(a1[271], **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0, (uint64_t)&v118);
      if (v122 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      __src = (void *)v118;
      v122 = DWORD2(v118);
      DWORD2(v118) = 0;
      if (v124 >= 0x41 && v123)
      {
        MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
        v123 = v119;
        v124 = v120;
        v120 = 0;
        if (DWORD2(v118) >= 0x41 && (_QWORD)v118)
          MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
      }
      else
      {
        v123 = v119;
        v124 = v120;
      }
      sub_1C6368768(a1[271], *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), 0, (uint64_t)&v118);
      if (v126 >= 0x41 && v125)
        MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
      v125 = (void *)v118;
      v126 = DWORD2(v118);
      DWORD2(v118) = 0;
      if (v128[0] >= 0x41u && v127)
      {
        MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
        v127 = v119;
        v128[0] = v120;
        v120 = 0;
        if (DWORD2(v118) >= 0x41 && (_QWORD)v118)
          MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
      }
      else
      {
        v127 = v119;
        v128[0] = v120;
      }
      v68 = v122;
      v117 = v122;
      if (v122 > 0x40)
      {
        v72 = (((unint64_t)v122 + 63) >> 3) & 0x3FFFFFF8;
        v116 = (void *)operator new[]();
        memcpy(v116, __src, v72);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v116);
        v68 = v117;
        v71 = (unint64_t)v116;
      }
      else
      {
        v69 = ~(unint64_t)__src;
        if (v122)
          v70 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v122;
        else
          v70 = 0;
        v71 = v70 & v69;
        v116 = (void *)(v70 & v69);
      }
      v115 = v126;
      if (v126 <= 0x40)
      {
        if (v126)
          v73 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v126;
        else
          v73 = 0;
        v74 = v73 & ~(unint64_t)v125;
        goto LABEL_94;
      }
      v75 = (((unint64_t)v126 + 63) >> 3) & 0x3FFFFFF8;
      v114 = (void *)operator new[]();
      memcpy(v114, v125, v75);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v114);
      v76 = v115;
      v74 = (unint64_t)v114;
      if (v115 < 0x41)
      {
LABEL_94:
        v77 = (v74 & v71) != 0;
        goto LABEL_95;
      }
      v107 = 0;
      v108 = ((unint64_t)v115 + 63) >> 6;
      do
      {
        *(_QWORD *)(v74 + v107) &= *(_QWORD *)(v71 + v107);
        v107 += 8;
      }
      while (8 * v108 != v107);
      v109 = 0;
      do
      {
        v58 = v108-- < 1;
        if (v58)
          break;
        v110 = *(_QWORD *)(v74 + 8 * v108);
        v109 += __clz(v110);
      }
      while (!v110);
      v111 = v76 | 0xFFFFFFC0;
      if ((v76 & 0x3F) == 0)
        v111 = 0;
      v77 = v76 - v109 - v111 > 0x40 || *(_QWORD *)v74 != 0;
      if (v74)
        MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
LABEL_95:
      if (v68 >= 0x41 && v71)
        MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
      for (j = 0; j != -16; j -= 8)
      {
        v79 = (char *)&__src + j * 4;
        if (v128[j] >= 0x41u)
        {
          v80 = *((_QWORD *)v79 + 6);
          if (v80)
          {
            MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
            v79 = (char *)&__src + j * 4;
          }
        }
        if (*((_DWORD *)v79 + 10) >= 0x41u)
        {
          v81 = *((_QWORD *)v79 + 4);
          if (v81)
            MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
        }
      }
      if (v77)
        goto LABEL_133;
LABEL_108:
      v82 = *(unsigned int *)(a4 + 8);
      *(_QWORD *)&v118 = 0;
      DWORD2(v118) = 0;
      v119 = 0x1FFFFFFFFLL;
      sub_1C47EBB78(&__src, v82, &v118);
      v83 = *(unsigned int *)(a4 + 8);
      *(_QWORD *)&v112 = 0;
      DWORD2(v112) = 0;
      v113 = 0x1FFFFFFFFLL;
      sub_1C47EBB78(&v118, v83, &v112);
      v23 = (a5 + 1);
      v22 = sub_1C47EAF20(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &__src, v23);
      v84 = sub_1C47EAF20(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), &v118, v23);
      if (!*(_DWORD *)(a4 + 8))
      {
LABEL_115:
        v91 = HIDWORD(v22);
        LODWORD(v22) = v84 + v22;
        v23 = (HIDWORD(v84) + v91);
        if (!(*(unsigned int (**)(uint64_t *))(*a1 + 8))(a1))
          goto LABEL_127;
        if (*(_WORD *)(a2 + 24) != 56)
          goto LABEL_127;
        v92 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40);
        if (*(_WORD *)(v92 + 24) != 175)
          goto LABEL_127;
        v93 = *(_QWORD *)(*(_QWORD *)(v92 + 32) + 40);
        v94 = *(unsigned __int16 *)(v93 + 24);
        if (v94 != 35 && v94 != 11)
          goto LABEL_127;
        v96 = *(_QWORD *)(v93 + 80);
        v97 = (_QWORD *)(v96 + 24);
        if (*(_DWORD *)(v96 + 32) >= 0x41u)
          v97 = (_QWORD *)*v97;
        if (*v97 < 5uLL)
        {
          v98 = 0;
        }
        else
        {
LABEL_127:
          v98 = 0;
          LODWORD(v22) = v22 + 1;
          v23 = (v23 + 1);
        }
        goto LABEL_128;
      }
      v85 = 0;
      v86 = 0;
      break;
  }
  while (1)
  {
    v87 = (uint64_t)__src;
    if (!*(_DWORD *)((char *)__src + v85 + 20))
    {
      v87 = v118;
      goto LABEL_114;
    }
    if (*(_DWORD *)(v118 + v85 + 20))
      break;
LABEL_114:
    v88 = (__int128 *)(v87 + v85);
    v89 = *(_QWORD *)a4 + v85;
    v90 = *v88;
    *(_QWORD *)(v89 + 16) = *((_QWORD *)v88 + 2);
    *(_OWORD *)v89 = v90;
    ++v86;
    v85 += 24;
    if (v86 >= *(unsigned int *)(a4 + 8))
      goto LABEL_115;
  }
  v98 = 1;
LABEL_128:
  if ((uint64_t *)v118 != &v119)
    free((void *)v118);
  if (__src != &v123)
    free(__src);
  if (!v98)
    return v22 | (unint64_t)(v23 << 32);
LABEL_133:
  sub_1C6368768(a1[271], a2, a3, 0, (uint64_t)&__src);
  if (*(_DWORD *)(a4 + 8))
  {
    v99 = 0;
    v100 = 0;
    do
    {
      if (v122 >= 0x41)
        p_src = (unint64_t *)__src;
      else
        p_src = (unint64_t *)&__src;
      v102 = *p_src;
      v103 = *(_QWORD *)a4 + v99;
      if (((v102 >> v100) & 1) != 0)
      {
        v104 = 0;
        *(_DWORD *)(v103 + 8) = 0;
        v105 = 0xFFFFFFFFLL;
      }
      else
      {
        *(_QWORD *)(v103 + 8) = a3;
        v105 = v100 | 0x100000000;
        v104 = a2;
      }
      *(_QWORD *)v103 = v104;
      *(_QWORD *)(v103 + 16) = v105;
      ++v100;
      v99 += 24;
    }
    while (v100 < *(unsigned int *)(a4 + 8));
  }
  if (v124 >= 0x41 && v123)
    MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
  if (v122 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  LODWORD(v22) = 0;
  v23 = 0;
  return v22 | (unint64_t)(v23 << 32);
}

_QWORD *sub_1C47EBB78(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v11;
  uint64_t v12;

  v5 = (uint64_t)(a1 + 2);
  *a1 = a1 + 2;
  a1[1] = 0x2000000000;
  if (a2 < 0x21)
  {
    if (a2)
    {
      v8 = a2;
      do
      {
        v9 = *a3;
        *(_QWORD *)(v5 + 16) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v5 = v9;
        v5 += 24;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v11 = *a3;
    v12 = *((_QWORD *)a3 + 2);
    *((_DWORD *)a1 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, v5, a2, 24);
    v6 = *a1;
    v7 = a2;
    do
    {
      *(_OWORD *)v6 = v11;
      *(_QWORD *)(v6 + 16) = v12;
      v6 += 24;
      --v7;
    }
    while (v7);
  }
  *((_DWORD *)a1 + 2) = a2;
  return a1;
}

void *sub_1C47EBC30(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_1C47EBCB8(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v9 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v21, (llvm *)6, 0, 1, 0);
  v11 = v10;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = v9;
  v13[1] = v11;
  ++*(_DWORD *)(a2 + 8);
  if (v21)
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  v14 = *a4;
  v21 = 0;
  v22 = 0;
  v15 = sub_1C6366AB4(a1, v14, (const llvm::APInt *)&v21, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v21)
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  return sub_1C47E2930(a1, a2, a5);
}

uint64_t sub_1C47EBDFC(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v33;
  unsigned __int8 *v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  v13 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v34, (llvm *)6, 0, 1, 0);
  v15 = v14;
  v16 = *(unsigned int *)(a2 + 8);
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    LODWORD(v16) = *(_DWORD *)(a2 + 8);
  }
  v17 = (_QWORD *)(*(_QWORD *)a2 + 16 * v16);
  *v17 = v13;
  v17[1] = v15;
  v18 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v18;
  if (v34)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
    v18 = *(_DWORD *)(a2 + 8);
  }
  v19 = *a4;
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    v33 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    v19 = v33;
    v18 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v18) = v19;
  ++*(_DWORD *)(a2 + 8);
  v20 = *a5;
  v34 = 0;
  v35 = 0;
  v21 = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v34, (llvm *)6, 0, 1, 0);
  v23 = v22;
  v24 = *(unsigned int *)(a2 + 8);
  if (v24 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v24 + 1, 16);
    LODWORD(v24) = *(_DWORD *)(a2 + 8);
  }
  v25 = (_QWORD *)(*(_QWORD *)a2 + 16 * v24);
  *v25 = v21;
  v25[1] = v23;
  ++*(_DWORD *)(a2 + 8);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  v26 = *(_QWORD *)a6;
  v34 = 0;
  v35 = 0;
  v27 = sub_1C6366AB4(a1, v26, (const llvm::APInt *)&v34, (llvm *)*(unsigned __int8 *)(a6 + 8), 0, 1, 0);
  v29 = v28;
  v30 = *(unsigned int *)(a2 + 8);
  if (v30 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v30 + 1, 16);
    LODWORD(v30) = *(_DWORD *)(a2 + 8);
  }
  v31 = (_QWORD *)(*(_QWORD *)a2 + 16 * v30);
  *v31 = v27;
  v31[1] = v29;
  ++*(_DWORD *)(a2 + 8);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  return sub_1C47E2930(a1, a2, a7);
}

uint64_t sub_1C47EC01C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v26;
  unsigned __int8 *v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v12 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v27, (llvm *)a4, 0, 1, 0);
  v14 = v13;
  v15 = *(unsigned int *)(a2 + 8);
  if (v15 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v15 + 1, 16);
    LODWORD(v15) = *(_DWORD *)(a2 + 8);
  }
  v16 = (_QWORD *)(*(_QWORD *)a2 + 16 * v15);
  *v16 = v12;
  v16[1] = v14;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v17 = *(_QWORD *)a5;
  v27 = 0;
  v28 = 0;
  v18 = sub_1C6366AB4(a1, v17, (const llvm::APInt *)&v27, (llvm *)*(unsigned __int8 *)(a5 + 8), 0, 1, 0);
  v20 = v19;
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  v22 = (_QWORD *)(*(_QWORD *)a2 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  v23 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v23;
  if (v27)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
    v23 = *(_DWORD *)(a2 + 8);
  }
  v24 = *a6;
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    v26 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    v24 = v26;
    v23 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v23) = v24;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C47E2930(a1, a2, a7);
}

uint64_t sub_1C47EC1C0(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned __int8 *v27[2];

  v27[0] = 0;
  v27[1] = 0;
  result = (uint64_t)sub_1C6366AB4(a1, a3, (const llvm::APInt *)v27, (llvm *)6, 0, 1, 0);
  v11 = result;
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (uint64_t *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  v16 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v16;
  if (v27[0])
  {
    result = llvm::MetadataTracking::untrack((uint64_t)v27, v27[0]);
    v16 = *(_DWORD *)(a2 + 8);
  }
  v17 = *a4;
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    v24 = *a4;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    v17 = v24;
    v16 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v16) = v17;
  v18 = *(_DWORD *)(a2 + 12);
  v19 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v19;
  v20 = *a5;
  if (v19 >= v18)
  {
    v25 = *a5;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 16);
    v20 = v25;
    LODWORD(v19) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v19) = v20;
  v21 = *(_DWORD *)(a2 + 12);
  v22 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v22;
  v23 = *a6;
  if (v22 >= v21)
  {
    v26 = *a6;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
    v23 = v26;
    LODWORD(v22) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v22) = v23;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

_QWORD *sub_1C47EC350(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, __int128 *a7, unsigned int *a8, uint64_t a9)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 v37;
  unsigned __int8 *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[14];

  v42[12] = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v40 = v42;
  v41 = 0x600000000;
  v38 = 0;
  v16 = sub_1C6366AB4(a1, a5, (const llvm::APInt *)&v38, (llvm *)6, 0, 1, 0);
  v18 = v17;
  v19 = v41;
  if (v41 >= HIDWORD(v41))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v41 + 1, 16);
    v19 = v41;
  }
  v20 = (char *)v40 + 16 * v19;
  *v20 = v16;
  v20[1] = v18;
  LODWORD(v41) = v41 + 1;
  if (v38)
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  v21 = *(_QWORD *)a6;
  v38 = 0;
  v39 = 0;
  v22 = sub_1C6366AB4(a1, v21, (const llvm::APInt *)&v38, (llvm *)*(unsigned __int8 *)(a6 + 8), 0, 1, 0);
  v24 = v23;
  v25 = v41;
  if (v41 >= HIDWORD(v41))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v41 + 1, 16);
    v25 = v41;
  }
  v26 = (char *)v40 + 16 * v25;
  *v26 = v22;
  v26[1] = v24;
  v27 = v41 + 1;
  LODWORD(v41) = v41 + 1;
  if (v38)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
    v27 = v41;
  }
  v28 = *a7;
  if (v27 >= HIDWORD(v41))
  {
    v37 = *a7;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v27 + 1, 16);
    v28 = v37;
    v27 = v41;
  }
  *((_OWORD *)v40 + v27) = v28;
  LODWORD(v41) = v41 + 1;
  v29 = *a8;
  v38 = 0;
  v39 = 0;
  v30 = sub_1C6366AB4(a1, v29, (const llvm::APInt *)&v38, (llvm *)6, 0, 1, 0);
  v32 = v31;
  v33 = v41;
  if (v41 >= HIDWORD(v41))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v41 + 1, 16);
    v33 = v41;
  }
  v34 = (char *)v40 + 16 * v33;
  *v34 = v30;
  v34[1] = v32;
  LODWORD(v41) = v41 + 1;
  if (v38)
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  sub_1C47E2930(a1, (uint64_t)&v40, a9);
  v35 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v40, v41);
  if (v40 != v42)
    free(v40);
  return v35;
}

uint64_t sub_1C47EC5FC(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;

  v1 = *(unsigned __int16 *)(a1 + 24);
  if (v1 == 438)
    return 0;
  if (v1 == 439)
    return 1;
  v3 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 80);
  v4 = (_QWORD *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = (_QWORD *)*v4;
  v5 = *v4 - 1983;
  if (v5 >= 6)
    llvm::report_fatal_error((llvm *)"Unimplemented pack opcode!", (const char *)1);
  return dword_1C6429DE8[v5];
}

uint64_t sub_1C47EC67C(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, unsigned int *a5, __int128 *a6, unsigned int *a7, __int128 *a8, unsigned int *a9, __int128 *a10, uint64_t a11)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  __int128 v32;
  __int128 v34;
  __int128 v35;
  unsigned __int8 *v36;
  uint64_t v37;

  v36 = 0;
  v37 = 0;
  v18 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v36, (llvm *)6, 0, 1, 0);
  v20 = v19;
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  v22 = (_QWORD *)(*(_QWORD *)a2 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  v23 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v23;
  if (v36)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
    v23 = *(_DWORD *)(a2 + 8);
  }
  v24 = *a4;
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    v34 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    v24 = v34;
    v23 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v23) = v24;
  ++*(_DWORD *)(a2 + 8);
  v25 = *a5;
  v36 = 0;
  v37 = 0;
  v26 = sub_1C6366AB4(a1, v25, (const llvm::APInt *)&v36, (llvm *)6, 0, 1, 0);
  v28 = v27;
  v29 = *(unsigned int *)(a2 + 8);
  if (v29 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v29 + 1, 16);
    LODWORD(v29) = *(_DWORD *)(a2 + 8);
  }
  v30 = (_QWORD *)(*(_QWORD *)a2 + 16 * v29);
  *v30 = v26;
  v30[1] = v28;
  v31 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v31;
  if (v36)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
    v31 = *(_DWORD *)(a2 + 8);
  }
  v32 = *a6;
  if (v31 >= *(_DWORD *)(a2 + 12))
  {
    v35 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 16);
    v32 = v35;
    v31 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v31) = v32;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C47EC894(a1, a2, *a7, a8, a9, a10, a11);
}

uint64_t sub_1C47EC894(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, unsigned int *a5, __int128 *a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v29;
  __int128 v30;
  unsigned __int8 *v31;
  uint64_t v32;

  v31 = 0;
  v32 = 0;
  v13 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v31, (llvm *)6, 0, 1, 0);
  v15 = v14;
  v16 = *(unsigned int *)(a2 + 8);
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    LODWORD(v16) = *(_DWORD *)(a2 + 8);
  }
  v17 = (_QWORD *)(*(_QWORD *)a2 + 16 * v16);
  *v17 = v13;
  v17[1] = v15;
  v18 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v18;
  if (v31)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
    v18 = *(_DWORD *)(a2 + 8);
  }
  v19 = *a4;
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    v29 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    v19 = v29;
    v18 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v18) = v19;
  ++*(_DWORD *)(a2 + 8);
  v20 = *a5;
  v31 = 0;
  v32 = 0;
  v21 = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v31, (llvm *)6, 0, 1, 0);
  v23 = v22;
  v24 = *(unsigned int *)(a2 + 8);
  if (v24 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v24 + 1, 16);
    LODWORD(v24) = *(_DWORD *)(a2 + 8);
  }
  v25 = (_QWORD *)(*(_QWORD *)a2 + 16 * v24);
  *v25 = v21;
  v25[1] = v23;
  v26 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v26;
  if (v31)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
    v26 = *(_DWORD *)(a2 + 8);
  }
  v27 = *a6;
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    v30 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    v27 = v30;
    v26 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v26) = v27;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C47E2930(a1, a2, a7);
}

uint64_t sub_1C47ECA88(uint64_t a1, double a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];
  int v6;
  char v7;
  const llvm::APInt *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  LODWORD(v9) = 64;
  v8 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v5, &v8);
  v9 = v5[0];
  v10 = v5[1];
  v11 = v6;
  v12 = v7 & 0xF;
  llvm::APFloat::convert((uint64_t)&v8, *(void **)(a1 + 8), 1, v5);
  result = sub_1C47ECB98(a1, (uint64_t)&v8);
  if ((_UNKNOWN *)v9 == &unk_1C866F1C0)
  {
    v4 = result;
    sub_1C4773C74(&v10);
    return v4;
  }
  if ((*(_DWORD *)(v9 + 8) - 64) <= 0xFFFFFF7F && v10)
  {
    v4 = result;
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
    return v4;
  }
  return result;
}

uint64_t sub_1C47ECB98(uint64_t a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;
  const llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v4 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v3 = v4;
  v6 = *(void **)(a2 + 8);
  v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v3 != v6)
    return 0;
  if (v3 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v2, v5);
  return llvm::detail::IEEEFloat::bitwiseIsEqual(v2, v5);
}

void sub_1C47ECBC8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C47ECBDC()
{
  return 0;
}

uint64_t sub_1C47ECBE4()
{
  return 1;
}

uint64_t sub_1C47ECBEC()
{
  return 0;
}

uint64_t sub_1C47ECBF4()
{
  return 16;
}

uint64_t sub_1C47ECBFC()
{
  return 16;
}

uint64_t sub_1C47ECC04(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

uint64_t sub_1C47ECC0C()
{
  return 0;
}

uint64_t sub_1C47ECC14()
{
  return 0;
}

uint64_t sub_1C47ECC1C(uint64_t a1, _DWORD *a2)
{
  *a2 = 4;
  return 0;
}

uint64_t sub_1C47ECC2C()
{
  return 0;
}

uint64_t sub_1C47ECC34()
{
  return 0;
}

uint64_t sub_1C47ECC3C()
{
  return 0;
}

uint64_t sub_1C47ECC44(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, __int16 a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  char *v15;
  char *v16;
  char *v17;

  if (a14 == -1 && a4 == -1)
  {
    v17 = (char *)*(&off_1E7F963B0 + (int)a2);
    return *(unsigned int *)v17;
  }
  if (a7 == 1)
  {
    v15 = (char *)&unk_1C6417E28;
    if (a10)
    {
      v15 = (char *)&unk_1C6417E18;
      v16 = (char *)&unk_1C6417E38;
    }
    else
    {
      v16 = (char *)&unk_1C6417E48;
    }
    if (a2 - 1 < 2)
      v16 = v15;
    v17 = &v16[4 * a8];
    return *(unsigned int *)v17;
  }
  if (a7)
    return 0xFFFFFFFFLL;
  else
    return ((uint64_t (*)(void))((char *)&loc_1C47ECCAC + 4 * byte_1C64176DC[a2]))();
}

uint64_t sub_1C47ECD54()
{
  return 0;
}

uint64_t sub_1C47ECD5C()
{
  return 0;
}

uint64_t sub_1C47ECD64(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C47ECD78(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C47ECD8C(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C47ECDA0()
{
  return 423;
}

uint64_t sub_1C47ECDA8()
{
  return 1;
}

uint64_t sub_1C47ECDB0()
{
  return 2;
}

uint64_t sub_1C47ECDB8()
{
  return 0;
}

uint64_t sub_1C47ECDC0()
{
  return 1;
}

BOOL sub_1C47ECDC8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) == 0;
}

uint64_t sub_1C47ECDD8()
{
  return 3;
}

uint64_t sub_1C47ECDE0()
{
  return 1;
}

uint64_t sub_1C47ECDE8()
{
  return 6;
}

uint64_t sub_1C47ECDF0()
{
  return 1;
}

uint64_t sub_1C47ECDF8()
{
  return 0;
}

uint64_t sub_1C47ECE00(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return *(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2, 1)+ 24);
  else
    return dword_1C6429E00[(int)a2 - 2];
}

uint64_t sub_1C47ECE40(uint64_t a1, int a2, int a3)
{
  _UNKNOWN ****v3;

  v3 = &off_1E7F963E8[a2 - 1];
  if (!a3)
    v3 = &off_1E7F961B8[a2 - 1];
  return (uint64_t)*v3;
}

uint64_t sub_1C47ECE70()
{
  return 0x2100000001;
}

uint64_t sub_1C47ECE7C()
{
  return 0;
}

uint64_t sub_1C47ECE84(uint64_t a1, int a2)
{
  return dword_1C6429E3C[a2];
}

uint64_t sub_1C47ECE94(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;

  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3[1] + 16))(a3[1], *a3);
  v17 = *(_DWORD *)(a2 + 4);
  v18 = *(unsigned __int8 *)(a2 + 61);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, a4);
  v20 = *(_DWORD *)(a2 + 56);
  v51 = *(_DWORD *)(a2 + 80);
  v52 = *(_DWORD *)(a2 + 52);
  v53 = *(unsigned __int8 *)(a2 + 2);
  v21 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    v56 = 0;
    result = sub_1C4785D88(v16, v21, "SMPWriteCMode", &v56);
    if ((_DWORD)result)
      v23 = v56;
    else
      v23 = 2;
  }
  else
  {
    v55 = 0;
    result = sub_1C4785D88(v16, v21, "SMPCMode", &v55);
    if ((_DWORD)result)
      v23 = v55;
    else
      v23 = 0;
  }
  v24 = (v17 + v18);
  if (*(_BYTE *)(v16 + 287))
  {
    v25 = *a3;
    v57 = 0;
    result = sub_1C4785D88(v16, v25, "SMPSLCMode", &v57);
    if ((_DWORD)result)
      v26 = v57;
    else
      v26 = 1;
  }
  else
  {
    v26 = 0;
  }
  v27 = *(unsigned int *)(a10 + 8);
  if (v27 >= *(_DWORD *)(a10 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a10 + 8);
  }
  v28 = a4 - 5;
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v27) = v24;
  v29 = *(_DWORD *)(a10 + 12);
  v30 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v30;
  if (v30 >= v29)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v30 + 1, 8);
    LODWORD(v30) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v30) = v19;
  v31 = *(_DWORD *)(a10 + 12);
  v32 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v32;
  if (v32 >= v31)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v32) = v28 < 2;
  v33 = *(_DWORD *)(a10 + 12);
  v34 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v34;
  if (v34 >= v33)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v34 + 1, 8);
    LODWORD(v34) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v34) = a7;
  v35 = *(_DWORD *)(a10 + 12);
  v36 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v36;
  if (v36 >= v35)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v36) = v20 != -1;
  v37 = *(_DWORD *)(a10 + 12);
  v38 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v38;
  if (v38 >= v37)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v38 + 1, 8);
    LODWORD(v38) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v38) = v51 != -1;
  v39 = *(_DWORD *)(a10 + 12);
  v40 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v40;
  if (v40 >= v39)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v40 + 1, 8);
    LODWORD(v40) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v40) = v52 != -1;
  v41 = *(_DWORD *)(a10 + 12);
  v42 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v42;
  if (v42 >= v41)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v42 + 1, 8);
    LODWORD(v42) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v42) = a11 ^ 1u;
  v43 = *(_DWORD *)(a10 + 12);
  v44 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v44;
  if (v44 >= v43)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v44 + 1, 8);
    LODWORD(v44) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v44) = v53 == 0;
  v45 = *(_DWORD *)(a10 + 12);
  v46 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v46;
  if (v46 >= v45)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v46 + 1, 8);
    LODWORD(v46) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v46) = v23;
  v47 = *(_DWORD *)(a10 + 12);
  v48 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v48;
  if (v48 >= v47)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v48 + 1, 8);
    LODWORD(v48) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v48) = v26;
  v49 = *(_DWORD *)(a10 + 12);
  v50 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v50;
  if (v50 >= v49)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v50 + 1, 8);
    LODWORD(v50) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v50) = a5 != -1;
  ++*(_DWORD *)(a10 + 8);
  return result;
}

void *sub_1C47ED2D0(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *a3 = 1445;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  v9 = xmmword_1C640F7B0;
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v10 = *(_DWORD *)(a5 + 12);
  v11 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v11;
  v12 = a2 | 0x100000000;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v11 + 1, 16);
    v9 = xmmword_1C640F7B0;
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  v13 = (uint64_t *)(*(_QWORD *)a5 + 16 * v11);
  *v13 = v12;
  v13[1] = -1;
  v14 = *(_DWORD *)(a5 + 12);
  v15 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v15;
  if (v15 >= v14)
  {
    v29 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v15 + 1, 16);
    v9 = v29;
    LODWORD(v15) = *(_DWORD *)(a5 + 8);
  }
  v16 = (uint64_t *)(*(_QWORD *)a5 + 16 * v15);
  *v16 = v12;
  v16[1] = -1;
  v17 = *(_DWORD *)(a5 + 12);
  v18 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v18;
  if (v18 >= v17)
  {
    v30 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v18 + 1, 16);
    v9 = v30;
    LODWORD(v18) = *(_DWORD *)(a5 + 8);
  }
  v19 = (uint64_t *)(*(_QWORD *)a5 + 16 * v18);
  *v19 = v12;
  v19[1] = -1;
  v20 = *(_DWORD *)(a5 + 12);
  v21 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v21;
  if (v21 >= v20)
  {
    v31 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v21 + 1, 16);
    v9 = v31;
    LODWORD(v21) = *(_DWORD *)(a5 + 8);
  }
  v22 = xmmword_1C640F7C0;
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v21) = xmmword_1C640F7C0;
  v23 = *(_DWORD *)(a5 + 12);
  v24 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v24;
  if (v24 >= v23)
  {
    v32 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v24 + 1, 16);
    v22 = xmmword_1C640F7C0;
    v9 = v32;
    LODWORD(v24) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v24) = v9;
  v25 = *(_DWORD *)(a5 + 12);
  v26 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v26;
  if (v26 >= v25)
  {
    v28 = v22;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v26 + 1, 16);
    v22 = v28;
    LODWORD(v26) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v26) = v22;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7F982A8;
  return result;
}

void *sub_1C47ED500(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *a3 = 1445;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  v9 = xmmword_1C640F7B0;
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v10 = *(_DWORD *)(a5 + 12);
  v11 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v11;
  v12 = a2 | 0x100000000;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v11 + 1, 16);
    v9 = xmmword_1C640F7B0;
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  v13 = (uint64_t *)(*(_QWORD *)a5 + 16 * v11);
  *v13 = v12;
  v13[1] = -1;
  v14 = *(_DWORD *)(a5 + 12);
  v15 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v15;
  if (v15 >= v14)
  {
    v29 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v15 + 1, 16);
    v9 = v29;
    LODWORD(v15) = *(_DWORD *)(a5 + 8);
  }
  v16 = (uint64_t *)(*(_QWORD *)a5 + 16 * v15);
  *v16 = v12;
  v16[1] = -1;
  v17 = *(_DWORD *)(a5 + 12);
  v18 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v18;
  if (v18 >= v17)
  {
    v30 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v18 + 1, 16);
    v9 = v30;
    LODWORD(v18) = *(_DWORD *)(a5 + 8);
  }
  v19 = (uint64_t *)(*(_QWORD *)a5 + 16 * v18);
  *v19 = v12;
  v19[1] = -1;
  v20 = *(_DWORD *)(a5 + 12);
  v21 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v21;
  if (v21 >= v20)
  {
    v31 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v21 + 1, 16);
    v9 = v31;
    LODWORD(v21) = *(_DWORD *)(a5 + 8);
  }
  v22 = xmmword_1C640F7C0;
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v21) = xmmword_1C640F7C0;
  v23 = *(_DWORD *)(a5 + 12);
  v24 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v24;
  if (v24 >= v23)
  {
    v32 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v24 + 1, 16);
    v22 = xmmword_1C640F7C0;
    v9 = v32;
    LODWORD(v24) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v24) = v9;
  v25 = *(_DWORD *)(a5 + 12);
  v26 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v26;
  if (v26 >= v25)
  {
    v28 = v22;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v26 + 1, 16);
    v22 = v28;
    LODWORD(v26) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v26) = v22;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7F98468;
  return result;
}

uint64_t sub_1C47ED730(uint64_t a1, llvm::GlobalValue *a2, uint64_t a3)
{
  uint64_t NamedMetadata;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::GlobalValue *Section;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  llvm::GlobalValue *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD v41[4];
  __int16 v42;

  v41[0] = "agx.driver_bindings";
  v42 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a3, (uint64_t)v41);
  if (NamedMetadata)
  {
    v6 = NamedMetadata;
    v7 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v7)
    {
      v8 = 0;
      while (1)
      {
        v9 = *(_QWORD *)(**(_QWORD **)(v6 + 48) + 8 * v8);
        v10 = *(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8));
        if (v10)
        {
          if (*(llvm::GlobalValue **)(v10 + 128) == a2)
          {
            Section = llvm::GlobalValue::getSection(a2);
            if (v12 == 11
              && *(_QWORD *)Section == 0x74735F6567616D69
              && *(_QWORD *)((char *)Section + 3) == 0x65746174735F6567)
            {
              v14 = *(unsigned int *)(v9 + 8);
              if (v14 >= 5)
                break;
            }
          }
        }
LABEL_21:
        if (++v8 == v7)
          return 0;
      }
      v15 = -8 * v14;
      while (1)
      {
        v16 = *(_QWORD *)(v9 + v15 + 24);
        if (!*(_BYTE *)v16)
        {
          v17 = *(_QWORD *)(v16 + 8);
          if (*(_QWORD *)v17 == 7)
          {
            v18 = *(_DWORD *)(v17 + 24);
            v19 = *(_DWORD *)(v17 + 27);
            if (v18 == 1601069926 && v19 == 1953063519)
              break;
          }
        }
        v15 += 8;
        if (v15 == -24)
          goto LABEL_21;
      }
      v37 = (unsigned __int8 *)(v9 + v15);
      goto LABEL_50;
    }
    return 0;
  }
  v41[0] = "agx.compute_driver_bindings";
  v42 = 259;
  result = llvm::Module::getNamedMetadata(a3, (uint64_t)v41);
  if (!result)
    return result;
  v22 = ***(_QWORD ***)(result + 48);
  v23 = *(unsigned int *)(v22 + 8);
  if (!(_DWORD)v23)
    return 0;
  v24 = 0;
  while (1)
  {
    v25 = *(unsigned __int8 **)(v22 - 8 * v23 + 8 * v24);
    if (!v25 || *v25 - 4 > 0x1E)
      goto LABEL_46;
    v26 = *(_QWORD *)&v25[-8 * *((unsigned int *)v25 + 2)];
    if (v26)
    {
      if (*(llvm::GlobalValue **)(v26 + 128) == a2)
      {
        v27 = llvm::GlobalValue::getSection(a2);
        if (v28 == 11 && *(_QWORD *)v27 == 0x74735F6567616D69 && *(_QWORD *)((char *)v27 + 3) == 0x65746174735F6567)
        {
          v30 = *((unsigned int *)v25 + 2);
          if (v30 >= 5)
            break;
        }
      }
    }
LABEL_45:
    v23 = *(unsigned int *)(v22 + 8);
LABEL_46:
    if (++v24 >= v23)
      return 0;
  }
  v31 = -8 * v30;
  while (1)
  {
    v32 = *(_QWORD *)&v25[v31 + 24];
    if (!*(_BYTE *)v32)
    {
      v33 = *(_QWORD *)(v32 + 8);
      if (*(_QWORD *)v33 == 7)
      {
        v34 = *(_DWORD *)(v33 + 24);
        v35 = *(_DWORD *)(v33 + 27);
        if (v34 == 1601069926 && v35 == 1953063519)
          break;
      }
    }
    v31 += 8;
    if (v31 == -24)
      goto LABEL_45;
  }
  v37 = &v25[v31];
LABEL_50:
  v38 = *(_QWORD *)(*((_QWORD *)v37 + 4) + 128);
  if (*(_BYTE *)(v38 + 16) == 16)
    v39 = v38;
  else
    v39 = 0;
  v40 = (_QWORD *)(v39 + 24);
  if (*(_DWORD *)(v39 + 32) >= 0x41u)
    v40 = (_QWORD *)*v40;
  return *v40 == 0;
}

uint64_t sub_1C47ED9F8()
{
  return 1;
}

uint64_t sub_1C47EDA00()
{
  return 0;
}

uint64_t sub_1C47EDA08()
{
  return 1;
}

uint64_t sub_1C47EDA10()
{
  return 0;
}

uint64_t sub_1C47EDA18()
{
  return 1;
}

uint64_t sub_1C47EDA20()
{
  return 395;
}

uint64_t sub_1C47EDA28()
{
  return 0;
}

uint64_t sub_1C47EDA30()
{
  return 1;
}

uint64_t sub_1C47EDA38()
{
  return 1;
}

void sub_1C47EDA40()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C47EDA54()
{
  return 24;
}

uint64_t sub_1C47EDA5C()
{
  return 8;
}

uint64_t sub_1C47EDA64()
{
  return 1;
}

uint64_t sub_1C47EDA6C()
{
  return 0;
}

uint64_t sub_1C47EDA74(uint64_t a1, _DWORD *a2)
{
  *a2 = 2;
  return 1;
}

uint64_t sub_1C47EDA84(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, char a10, unsigned __int8 a11, _DWORD *a12)
{
  return sub_1C47E31DC(a2, a3, a4, a5, a9, a11, (*a12 & 0xFFFFFFFE) == 2);
}

uint64_t sub_1C47EDAC4()
{
  return 1;
}

uint64_t sub_1C47EDACC()
{
  return 13201;
}

uint64_t sub_1C47EDAD4(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C47EDAE8(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C47EDAFC()
{
  return 0;
}

uint64_t sub_1C47EDB04()
{
  return 0;
}

uint64_t sub_1C47EDB0C()
{
  return 1;
}

uint64_t sub_1C47EDB14()
{
  return 0;
}

uint64_t sub_1C47EDB1C()
{
  return 0;
}

uint64_t sub_1C47EDB24()
{
  return 3;
}

uint64_t sub_1C47EDB2C()
{
  return 0;
}

uint64_t sub_1C47EDB34()
{
  return 4;
}

uint64_t sub_1C47EDB3C()
{
  return 0;
}

uint64_t sub_1C47EDB44()
{
  return 1;
}

_UNKNOWN ***sub_1C47EDB4C(uint64_t a1, int a2, int a3)
{
  return (&off_1E7F96370[2 * (a2 - 1)])[a3];
}

uint64_t sub_1C47EDB64(uint64_t a1, int a2)
{
  return dword_1C6429E60[a2];
}

uint64_t sub_1C47EDB74(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BYTE *v16;
  _BOOL8 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;

  v16 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3[1] + 16))(a3[1], *a3);
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    v17 = *(_BYTE *)(a2 + 2) == 0;
    v18 = *(unsigned int *)(a10 + 8);
    if (v18 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v18 + 1, 8);
      LODWORD(v18) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v18) = v17;
    ++*(_DWORD *)(a10 + 8);
  }
  v19 = *(_DWORD *)(a2 + 4);
  if (v19 == 1)
  {
    v20 = *(_DWORD *)(a2 + 56) != -1;
  }
  else if (v19 == 2)
  {
    if (*(_DWORD *)(a2 + 48) != -1 || *(unsigned __int8 *)(a2 + 61) | *(unsigned __int8 *)(a2 + 60))
    {
      v20 = 6;
    }
    else if (*(_DWORD *)(a2 + 52) == -1)
    {
      if (*(_DWORD *)(a2 + 56) == -1)
        v20 = 2;
      else
        v20 = 3;
    }
    else
    {
      v20 = 4;
    }
  }
  else
  {
    v20 = 5;
  }
  v21 = *(unsigned int *)(a10 + 8);
  if (v21 >= *(_DWORD *)(a10 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v21) = v20;
  ++*(_DWORD *)(a10 + 8);
  v22 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, a4);
  v23 = *(unsigned int *)(a10 + 8);
  if (v23 >= *(_DWORD *)(a10 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v23) = v22;
  v24 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v24;
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    v25 = *(_DWORD *)(a2 + 64);
    v26 = v25 == -1;
    v27 = 2 * (v25 != -1);
    v28 = 3;
    if (v26)
      v28 = 1;
    if (*(_DWORD *)(a2 + 80) == -1)
      v29 = v27;
    else
      v29 = v28;
    if (v24 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v24) = v29;
    v24 = (*(_DWORD *)(a10 + 8) + 1);
    *(_DWORD *)(a10 + 8) = v24;
    if (*(_BYTE *)(a2 + 62))
    {
      if (*(_DWORD *)(a2 + 84) == -1)
      {
        v31 = *(_DWORD *)(a10 + 12);
        v30 = 4;
LABEL_37:
        if (v24 >= v31)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v24 + 1, 8);
          LODWORD(v24) = *(_DWORD *)(a10 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a10 + 8 * v24) = v30;
        LODWORD(v24) = *(_DWORD *)(a10 + 8) + 1;
        *(_DWORD *)(a10 + 8) = v24;
        goto LABEL_40;
      }
      if (a5 >= 4)
        v30 = 0xFFFFFFFFLL;
      else
        v30 = a5 + 4;
    }
    else
    {
      v30 = 0;
    }
    v31 = *(_DWORD *)(a10 + 12);
    goto LABEL_37;
  }
LABEL_40:
  if (*(_DWORD *)(a2 + 24) != -1)
  {
    if (v24 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v24) = a6;
    ++*(_DWORD *)(a10 + 8);
  }
  v32 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    v33 = sub_1C61292A4(v16, v32, "ImageWritePersist");
    v34 = *(unsigned int *)(a10 + 8);
    if (v34 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v34 + 1, 8);
      LODWORD(v34) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v34) = v33;
    ++*(_DWORD *)(a10 + 8);
    v35 = *a3;
    v56 = 0;
    if (sub_1C4785D88((int)v16, v35, "ImageWriteTPUCohMode", &v56))
      v36 = v56;
    else
      v36 = 0;
    v37 = *(unsigned int *)(a10 + 8);
    if (v37 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v37 + 1, 8);
      LODWORD(v37) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v37) = v36;
    ++*(_DWORD *)(a10 + 8);
    v38 = *a3;
    v56 = 0;
    if (sub_1C4785D88((int)v16, v38, "ImageWriteMCUCohMode", &v56))
      v39 = v56;
    else
      v39 = 0;
    v40 = *(unsigned int *)(a10 + 8);
    if (v40 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v40 + 1, 8);
      LODWORD(v40) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v40) = v39;
    ++*(_DWORD *)(a10 + 8);
    v41 = *a3;
    v56 = 0;
    result = sub_1C4785D88((int)v16, v41, "ImageWriteSLCCohMode", &v56);
    if ((_DWORD)result)
      v43 = v56;
    else
      v43 = 1;
  }
  else
  {
    v44 = sub_1C61292A4(v16, v32, "ImageReadPersist");
    v45 = *(unsigned int *)(a10 + 8);
    if (v45 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v45 + 1, 8);
      LODWORD(v45) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v45) = v44;
    ++*(_DWORD *)(a10 + 8);
    v46 = *a3;
    v56 = 0;
    if (sub_1C4785D88((int)v16, v46, "ImageReadTPUCohMode", &v56))
      v47 = v56;
    else
      v47 = 0;
    v48 = *(unsigned int *)(a10 + 8);
    if (v48 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v48 + 1, 8);
      LODWORD(v48) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v48) = v47;
    ++*(_DWORD *)(a10 + 8);
    v49 = *a3;
    v56 = 0;
    if (sub_1C4785D88((int)v16, v49, "ImageReadMCUCohMode", &v56))
      v50 = v56;
    else
      v50 = 0;
    v51 = *(unsigned int *)(a10 + 8);
    if (v51 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v51 + 1, 8);
      LODWORD(v51) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v51) = v50;
    ++*(_DWORD *)(a10 + 8);
    v52 = *a3;
    v56 = 0;
    result = sub_1C4785D88((int)v16, v52, "ImageReadSLCCohMode", &v56);
    if ((_DWORD)result)
      v43 = v56;
    else
      v43 = 0;
  }
  v53 = *(unsigned int *)(a10 + 8);
  if (v53 >= *(_DWORD *)(a10 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v53 + 1, 8);
    LODWORD(v53) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v53) = v43;
  v54 = *(_DWORD *)(a10 + 12);
  v55 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v55;
  if (v55 >= v54)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v55 + 1, 8);
    v55 = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v55) = 0;
  ++*(_DWORD *)(a10 + 8);
  return result;
}

uint64_t sub_1C47EE17C()
{
  return 1;
}

uint64_t sub_1C47EE184()
{
  return 0;
}

uint64_t sub_1C47EE18C()
{
  return 1;
}

uint64_t sub_1C47EE194()
{
  return 0;
}

uint64_t sub_1C47EE19C()
{
  return 0;
}

uint64_t sub_1C47EE1A4()
{
  return 0;
}

uint64_t sub_1C47EE1AC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5, uint64_t a6, __int128 *a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t result;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  unsigned __int8 *v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  v13 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v34, (llvm *)6, 0, 1, 0);
  v15 = v14;
  v16 = *(unsigned int *)(a2 + 8);
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    LODWORD(v16) = *(_DWORD *)(a2 + 8);
  }
  v17 = (_QWORD *)(*(_QWORD *)a2 + 16 * v16);
  *v17 = v13;
  v17[1] = v15;
  ++*(_DWORD *)(a2 + 8);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  v18 = *a4;
  v34 = 0;
  v35 = 0;
  v19 = sub_1C6366AB4(a1, v18, (const llvm::APInt *)&v34, (llvm *)6, 0, 1, 0);
  v21 = v20;
  v22 = *(unsigned int *)(a2 + 8);
  if (v22 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
    LODWORD(v22) = *(_DWORD *)(a2 + 8);
  }
  v23 = (_QWORD *)(*(_QWORD *)a2 + 16 * v22);
  *v23 = v19;
  v23[1] = v21;
  ++*(_DWORD *)(a2 + 8);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  v24 = *a5;
  v34 = 0;
  v35 = 0;
  v25 = sub_1C6366AB4(a1, v24, (const llvm::APInt *)&v34, (llvm *)6, 0, 1, 0);
  v27 = v26;
  v28 = *(unsigned int *)(a2 + 8);
  if (v28 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v28 + 1, 16);
    LODWORD(v28) = *(_DWORD *)(a2 + 8);
  }
  v29 = (_QWORD *)(*(_QWORD *)a2 + 16 * v28);
  *v29 = v25;
  v29[1] = v27;
  ++*(_DWORD *)(a2 + 8);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  result = sub_1C47E2930(a1, a2, a6);
  v31 = *a7;
  v32 = *(unsigned int *)(a2 + 8);
  if (v32 >= *(_DWORD *)(a2 + 12))
  {
    v33 = *a7;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v32 + 1, 16);
    v31 = v33;
    LODWORD(v32) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v32) = v31;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1C47EE3C4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, uint64_t a10, __int128 *a11)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  v17 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v35, (llvm *)a4, 0, 1, 0);
  v19 = v18;
  v20 = *(unsigned int *)(a2 + 8);
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 16);
    LODWORD(v20) = *(_DWORD *)(a2 + 8);
  }
  v21 = (_QWORD *)(*(_QWORD *)a2 + 16 * v20);
  *v21 = v17;
  v21[1] = v19;
  ++*(_DWORD *)(a2 + 8);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  v22 = *(_QWORD *)a5;
  v35 = 0;
  v36 = 0;
  v23 = sub_1C6366AB4(a1, v22, (const llvm::APInt *)&v35, (llvm *)*(unsigned __int8 *)(a5 + 8), 0, 1, 0);
  v25 = v24;
  v26 = *(unsigned int *)(a2 + 8);
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  v27 = (_QWORD *)(*(_QWORD *)a2 + 16 * v26);
  *v27 = v23;
  v27[1] = v25;
  ++*(_DWORD *)(a2 + 8);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  v28 = *a6;
  v35 = 0;
  v36 = 0;
  v29 = sub_1C6366AB4(a1, v28, (const llvm::APInt *)&v35, (llvm *)6, 0, 1, 0);
  v31 = v30;
  v32 = *(unsigned int *)(a2 + 8);
  if (v32 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v32 + 1, 16);
    LODWORD(v32) = *(_DWORD *)(a2 + 8);
  }
  v33 = (_QWORD *)(*(_QWORD *)a2 + 16 * v32);
  *v33 = v29;
  v33[1] = v31;
  ++*(_DWORD *)(a2 + 8);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  return sub_1C47EE1AC(a1, a2, *a7, a8, a9, a10, a11);
}

uint64_t *sub_1C47EE5B8(uint64_t ***this, unint64_t a2)
{
  unsigned int v4;
  uint64_t *v5;

  v4 = *((_DWORD *)this + 2);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) > 0x40)
      return (uint64_t *)a2;
    v5 = **this;
  }
  else
  {
    v5 = (uint64_t *)*this;
  }
  if ((unint64_t)v5 <= a2)
    return v5;
  return (uint64_t *)a2;
}

_QWORD *sub_1C47EE620(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = **(unsigned __int8 **)(a2 + 40);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 40)
                          + 16 * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8));
  if ((v2 == 4 || v2 == 9) && v3 == 9)
    return sub_1C47EE664(a1, a2);
  if ((v3 - 9) <= 1)
    return sub_1C612E8D8(a1, a2);
  return sub_1C47EE9C8(a1, a2);
}

_QWORD *sub_1C47EE664(uint64_t *a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 *v8;
  _BOOL4 v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  __int128 *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  __int128 v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  __int16 v43;
  unsigned __int8 *v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v4 = *(__int128 **)(a2 + 32);
  v5 = *v4;
  v48 = *(__int128 *)((char *)v4 + 40);
  v49 = v5;
  v6 = v4[5];
  v46 = *(__int128 *)((char *)v4 + 120);
  v47 = v6;
  v7 = *(unsigned int *)(*((_QWORD *)v4 + 20) + 76);
  v8 = *(unsigned __int8 **)(a2 + 64);
  v44 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v44, v8, 2);
  v45 = *(_DWORD *)(a2 + 60);
  v43 = 0;
  if ((v7 - 7) > 1)
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)(*a1 + 480) + 281);
    v12 = sub_1C47EFC5C((_QWORD **)a1, v7, (unsigned int *)&v49, (uint64_t)&v48, &v47, (uint64_t)&v46, (_BYTE *)&v43 + 1, &v43, 0);
    v13 = HIBYTE(v43);
    if (v11)
      v14 = HIBYTE(v43) == 0;
    else
      v14 = 1;
    if (!v14)
    {
      v10 = sub_1C612E8D8(a1, a2);
      goto LABEL_43;
    }
    v15 = v12;
    v16 = v49;
    v17 = v48;
    v18 = v47;
    v19 = v46;
    v41 = v44;
    if (v44)
    {
      v20 = v12;
      llvm::MetadataTracking::track((uint64_t)&v41, v44, 2);
      v15 = v20;
    }
    v42 = v45;
    v10 = sub_1C47F1144(a1, v15, v16, *((uint64_t *)&v16 + 1), 0, v17, *((uint64_t *)&v17 + 1), 1, v18, v19, (const llvm::APInt *)&v41);
    if (v41)
      llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
    if (!v13)
      goto LABEL_43;
  }
  else
  {
    v9 = (*(_WORD *)(*(_QWORD *)a1[1] + 1020) & 1) == 0;
    if ((_DWORD)v7 == 7)
    {
      v10 = (_QWORD *)v47;
      if ((*(_WORD *)(*(_QWORD *)a1[1] + 1020) & 1) != 0)
        goto LABEL_43;
    }
    else
    {
      v10 = (_QWORD *)v46;
      LOBYTE(v43) = 1;
      if (!v9)
        goto LABEL_43;
    }
  }
  v21 = &v47;
  if (!(_BYTE)v43)
    v21 = &v46;
  v22 = *(_QWORD **)v21;
  v23 = *((_QWORD *)v21 + 1);
  v24 = v49;
  v25 = *(unsigned __int16 *)(v49 + 24);
  if (v25 == 36 || v25 == 12)
  {
    v26 = *(_QWORD *)(v49 + 80);
    if (*(_UNKNOWN **)(v26 + 32) == &unk_1C866F1C0)
      v27 = *(_QWORD *)(v26 + 40);
    else
      v27 = v26 + 24;
    if ((*(_BYTE *)(v27 + 28) & 7) == 1)
    {
      v10 = v22;
      goto LABEL_43;
    }
  }
  else
  {
    v28 = *((_QWORD *)&v49 + 1);
    v39 = v44;
    if (v44)
      llvm::MetadataTracking::track((uint64_t)&v39, v44, 2);
    v40 = v45;
    *((_QWORD *)&v35 + 1) = v23;
    *(_QWORD *)&v35 = v22;
    v10 = sub_1C47F1144(a1, 1u, v24, v28, 0, v24, v28, 1, (unint64_t)v10, v35, (const llvm::APInt *)&v39);
    if (v39)
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
  }
  v29 = v48;
  v30 = *(unsigned __int16 *)(v48 + 24);
  if (v30 == 36 || v30 == 12)
  {
    v31 = *(_QWORD *)(v48 + 80);
    if (*(_UNKNOWN **)(v31 + 32) == &unk_1C866F1C0)
      v32 = *(_QWORD *)(v31 + 40);
    else
      v32 = v31 + 24;
    if ((*(_BYTE *)(v32 + 28) & 7) == 1)
      v10 = v22;
  }
  else
  {
    v33 = *((_QWORD *)&v48 + 1);
    v37 = v44;
    if (v44)
      llvm::MetadataTracking::track((uint64_t)&v37, v44, 2);
    v38 = v45;
    *((_QWORD *)&v36 + 1) = v23;
    *(_QWORD *)&v36 = v22;
    v10 = sub_1C47F1144(a1, 1u, v29, v33, 0, v29, v33, 1, (unint64_t)v10, v36, (const llvm::APInt *)&v37);
    if (v37)
      llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
  }
LABEL_43:
  if (v44)
    llvm::MetadataTracking::untrack((uint64_t)&v44, v44);
  return v10;
}

_QWORD *sub_1C47EE9C8(uint64_t *a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  signed int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  _QWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t ExtendedSizeInBits;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  _BOOL4 v46;
  int v47;
  _BOOL4 v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t *v63;
  unsigned int v64;
  __int128 v65;
  unsigned int v66;
  uint64_t v67;
  __int128 v68;
  unint64_t *v69;
  __int128 v70;
  unsigned int v71;
  uint64_t v72;
  __int128 v73;
  unsigned int v74;
  uint64_t v75;
  const char *v76;
  unint64_t *v77;
  uint64_t v78;
  __int128 v79;
  unsigned int v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  const char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  void *v114;
  void *v115;
  int v116;
  _BOOL4 v117;
  _BOOL4 v118;
  uint64_t v119;
  _BOOL4 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  unint64_t v129;
  __int128 v130;
  _BOOL4 v131;
  int v132;
  _QWORD *v133;
  int v134;
  __int128 v135;
  __int128 v136;
  unsigned int v137;
  unsigned __int8 *v138;
  int v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  void *v144[2];
  _QWORD v145[10];
  void *v146[2];
  _QWORD v147[26];

  v147[24] = *MEMORY[0x1E0C80C00];
  v4 = *(__int128 **)(a2 + 32);
  v5 = *v4;
  v142 = *(__int128 *)((char *)v4 + 40);
  v143 = v5;
  v6 = v4[5];
  v140 = *(__int128 *)((char *)v4 + 120);
  v141 = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(*a1 + 480) + 280);
  v8 = *(unsigned __int8 **)(a2 + 64);
  v138 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)&v138, v8, 2);
    v4 = *(__int128 **)(a2 + 32);
  }
  v139 = *(_DWORD *)(a2 + 60);
  v9 = *(_DWORD *)(*((_QWORD *)v4 + 20) + 76);
  v10 = v9 - 11;
  if (v9 - 11 <= 0xB && ((0xD05u >> v10) & 1) != 0)
  {
    v9 = dword_1C642A010[v10];
    *(_OWORD *)v146 = v141;
    DWORD2(v141) = DWORD2(v140);
    *(_QWORD *)&v141 = v140;
    *(void **)&v140 = v146[0];
    DWORD2(v140) = v146[1];
  }
  v137 = v9;
  sub_1C47F0474((uint64_t)a1, &v137, (unsigned int *)&v143, (unsigned int *)&v142, (uint64_t *)&v141, (uint64_t *)&v140, 1);
  v11 = v137 - 18;
  v12 = *(unsigned __int16 *)(v143 + 24);
  v125 = v7;
  if (v12 == 200)
  {
LABEL_19:
    v15 = *(_QWORD *)(v143 + 32);
    v16 = *(_DWORD *)(v15 + 8);
    *(_QWORD *)&v143 = *(_QWORD *)v15;
    DWORD2(v143) = v16;
LABEL_20:
    v13 = v142;
    v14 = *(unsigned __int16 *)(v142 + 24);
    if (v14 == 198)
    {
      if (v11 >= 4 && v137 != 17 && v137 != 22)
        goto LABEL_32;
      goto LABEL_31;
    }
    if (v14 == 199)
    {
      if (v11 < 4 || v137 == 17 || v137 == 22)
        goto LABEL_32;
      goto LABEL_31;
    }
    goto LABEL_26;
  }
  if (v12 != 199)
  {
    if (v12 != 198 || v11 >= 4 && v137 != 17 && v137 != 22)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (v11 >= 4)
  {
    if (v137 == 17 || v137 == 22)
      goto LABEL_20;
    goto LABEL_19;
  }
  v13 = v142;
  v14 = *(unsigned __int16 *)(v142 + 24);
  if (v14 == 198)
  {
LABEL_31:
    v17 = *(_QWORD *)(v13 + 32);
    v18 = *(_DWORD *)(v17 + 8);
    *(_QWORD *)&v142 = *(_QWORD *)v17;
    DWORD2(v142) = v18;
    goto LABEL_32;
  }
  if (v14 == 199)
    goto LABEL_32;
LABEL_26:
  if (v14 == 200)
    goto LABEL_31;
LABEL_32:
  v124 = v137;
  v19 = v141;
  v20 = sub_1C47E3C48(a1[1], v141, DWORD2(v141), 0);
  v127 = v21;
  v129 = (unint64_t)v20;
  v22 = v140;
  v23 = (unint64_t)sub_1C47E3C48(a1[1], v140, DWORD2(v140), 0);
  v25 = v24;
  v26 = (unint64_t)sub_1C47E3C48(a1[1], v143, DWORD2(v143), 0);
  v28 = v27;
  v133 = sub_1C47E3C48(a1[1], v142, DWORD2(v142), 0);
  v30 = v29;
  v136 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  *(_OWORD *)v146 = *(_OWORD *)(*(_QWORD *)(v143 + 40) + 16 * DWORD2(v143));
  if (LOBYTE(v146[0]))
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v146);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v146);
  v123 = ExtendedSizeInBits;
  if ((_DWORD)v32 == 1)
  *(_OWORD *)v146 = *(_OWORD *)(*(_QWORD *)(v142 + 40) + 16 * DWORD2(v142));
  if (LOBYTE(v146[0]))
    v33 = sub_1C47A8C74((unsigned __int8 *)v146);
  else
    v33 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v146);
  v122 = v33;
  if ((_DWORD)v34 == 1)
  *(_OWORD *)v146 = *(_OWORD *)(*(_QWORD *)(v19 + 40) + 16 * DWORD2(v19));
  if (LOBYTE(v146[0]))
    v35 = sub_1C47A8C74((unsigned __int8 *)v146);
  else
    v35 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v146);
  v121 = v35;
  if ((_DWORD)v36 == 1)
  if ((_BYTE)v136)
    v37 = sub_1C47A8C74((unsigned __int8 *)&v136);
  else
    v37 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v136);
  v126 = v37;
  if ((_DWORD)v38 == 1)
  v39 = v129 | v127;
  v117 = v39 == 0;
  if (v39)
  {
    v41 = *(_QWORD *)(v129 + 80);
    v42 = (unsigned int *)(v41 + 24);
    if (*(_DWORD *)(v41 + 32) >= 0x41u)
      v42 = *(unsigned int **)v42;
    v43 = *v42;
    if (v43 == 1)
      v44 = 1;
    else
      v44 = 2;
    if (v43)
      v40 = v44;
    else
      v40 = 0;
  }
  else
  {
    v40 = 3;
  }
  v45 = v23 | v25;
  v118 = v45 == 0;
  v119 = v25;
  v132 = v40;
  if (v45)
  {
    v49 = *(_QWORD *)(v23 + 80);
    v50 = (unsigned int *)(v49 + 24);
    if (*(_DWORD *)(v49 + 32) >= 0x41u)
      v50 = *(unsigned int **)v50;
    v51 = *v50;
    if (v51 == 1)
      v47 = 1;
    else
      v47 = 2;
    if (!v51)
      v47 = 0;
    v46 = v40 == 0;
    if (!v40 && v51 == 1)
    {
      v120 = 0;
      v48 = 0;
      v116 = 1;
      v131 = 1;
      goto LABEL_77;
    }
  }
  else
  {
    v46 = v40 == 0;
    v47 = 3;
  }
  v116 = v46;
  v131 = v47;
  v120 = v47 != 0;
  if (v47)
    v48 = 1;
  else
    v48 = v40 != 1;
LABEL_77:
  v52 = sub_1C6366AB4(a1[1], 0, (const llvm::APInt *)&v138, (llvm *)5, 0, 1, 0);
  v114 = v53;
  v115 = v52;
  v146[0] = v147;
  v146[1] = (void *)0xC00000000;
  v54 = sub_1C6366AB4(a1[1], 0, (const llvm::APInt *)&v138, (llvm *)5, 0, 1, 0);
  v56 = v55;
  v57 = v146[1];
  if (LODWORD(v146[1]) >= HIDWORD(v146[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, LODWORD(v146[1]) + 1, 16);
    v57 = v146[1];
  }
  v58 = (char *)v146[0] + 16 * v57;
  *v58 = v54;
  v58[1] = v56;
  v59 = ++LODWORD(v146[1]);
  v60 = v28;
  if (v26 | v28)
  {
    if (v59 >= HIDWORD(v146[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, v59 + 1, 16);
      LODWORD(v59) = v146[1];
    }
    v63 = (unint64_t *)((char *)v146[0] + 16 * v59);
    *v63 = v26;
    v63[1] = v28;
    v64 = ++LODWORD(v146[1]);
    v61 = (unint64_t)v133;
  }
  else
  {
    v144[0] = 0;
    LODWORD(v144[1]) = 0;
    if (*(_BYTE *)(*(_QWORD *)(v143 + 40) + 16 * DWORD2(v143)) == 4)
    {
      v62 = 1;
      v61 = (unint64_t)v133;
    }
    else
    {
      v61 = (unint64_t)v133;
      v62 = 0;
    }
    sub_1C47C1164(*a1, v143, DWORD2(v143), (uint64_t)&v143, (uint64_t)v144, 0, v62, 0, 0, 0, 0);
    v65 = v143;
    v66 = v146[1];
    if (LODWORD(v146[1]) >= HIDWORD(v146[1]))
    {
      v110 = v143;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, LODWORD(v146[1]) + 1, 16);
      v65 = v110;
      v66 = v146[1];
    }
    *((_OWORD *)v146[0] + v66) = v65;
    v67 = (LODWORD(v146[1]) + 1);
    LODWORD(v146[1]) = v67;
    v68 = *(_OWORD *)v144;
    if (v67 >= HIDWORD(v146[1]))
    {
      v111 = *(_OWORD *)v144;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, v67 + 1, 16);
      v68 = v111;
      LODWORD(v67) = v146[1];
    }
    *((_OWORD *)v146[0] + v67) = v68;
    v64 = ++LODWORD(v146[1]);
  }
  if (v61 | v30)
  {
    if (v64 >= HIDWORD(v146[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, v64 + 1, 16);
      v64 = v146[1];
    }
    v69 = (unint64_t *)((char *)v146[0] + 16 * v64);
    *v69 = v61;
    v69[1] = v30;
  }
  else
  {
    v144[0] = 0;
    LODWORD(v144[1]) = 0;
    sub_1C47C1164(*a1, v142, DWORD2(v142), (uint64_t)&v142, (uint64_t)v144, 0, *(unsigned __int8 *)(*(_QWORD *)(v142 + 40) + 16 * DWORD2(v142)) == 4, 0, 0, 0, 0);
    v70 = v142;
    v71 = v146[1];
    if (LODWORD(v146[1]) >= HIDWORD(v146[1]))
    {
      v112 = v142;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, LODWORD(v146[1]) + 1, 16);
      v70 = v112;
      v71 = v146[1];
    }
    *((_OWORD *)v146[0] + v71) = v70;
    v72 = (LODWORD(v146[1]) + 1);
    LODWORD(v146[1]) = v72;
    v73 = *(_OWORD *)v144;
    if (v72 >= HIDWORD(v146[1]))
    {
      v113 = *(_OWORD *)v144;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, v72 + 1, 16);
      v73 = v113;
      LODWORD(v72) = v146[1];
    }
    *((_OWORD *)v146[0] + v72) = v73;
  }
  v74 = ++LODWORD(v146[1]);
  if (v48)
  {
    if (v117)
    {
      v144[0] = v115;
      v144[1] = v114;
      v135 = *(_OWORD *)(*(_QWORD *)(v19 + 40) + 16 * DWORD2(v19));
      if ((_BYTE)v135)
        v75 = sub_1C47A8C74((unsigned __int8 *)&v135);
      else
        v75 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v135);
      v78 = v75;
      if ((_DWORD)v76 == 1)
      sub_1C47C1164(*a1, v19, DWORD2(v19), (uint64_t)&v141, (uint64_t)v144, 0, v78 != 32, 0, 0, 0, 0);
      v79 = v141;
      v80 = v146[1];
      if (LODWORD(v146[1]) >= HIDWORD(v146[1]))
      {
        v130 = v141;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, LODWORD(v146[1]) + 1, 16);
        v79 = v130;
        v80 = v146[1];
      }
      *((_OWORD *)v146[0] + v80) = v79;
      v81 = (LODWORD(v146[1]) + 1);
      LODWORD(v146[1]) = v81;
      v61 = (unint64_t)v133;
      if (v81 >= HIDWORD(v146[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, v81 + 1, 16);
        LODWORD(v81) = v146[1];
      }
      v82 = (char *)v146[0] + 16 * v81;
      *v82 = v115;
      v82[1] = v114;
    }
    else
    {
      if (v74 >= HIDWORD(v146[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, v74 + 1, 16);
        v74 = v146[1];
      }
      v77 = (unint64_t *)((char *)v146[0] + 16 * v74);
      *v77 = v129;
      v77[1] = v127;
    }
    ++LODWORD(v146[1]);
  }
  if (!v120)
    goto LABEL_132;
  if (v118)
  {
    v144[0] = 0;
    LODWORD(v144[1]) = 0;
    v135 = *(_OWORD *)(*(_QWORD *)(v22 + 40) + 16 * DWORD2(v22));
    if ((_BYTE)v135)
      v83 = sub_1C47A8C74((unsigned __int8 *)&v135);
    else
      v83 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v135);
    v87 = v83;
    if ((_DWORD)v84 == 1)
    sub_1C47C1164(*a1, v22, DWORD2(v22), (uint64_t)&v140, (uint64_t)v144, 0, v87 != 32, 0, 0, 0, 0);
    v86 = v140;
    v85 = DWORD2(v140);
    v61 = (unint64_t)v133;
  }
  else
  {
    v86 = v22;
    v85 = DWORD2(v22);
    if (v23 && v61)
    {
      if (v61 == v23 && (_DWORD)v30 == (_DWORD)v119)
        goto LABEL_132;
      goto LABEL_133;
    }
  }
  if ((_QWORD)v142 == v86 && DWORD2(v142) == v85)
  {
LABEL_132:
    v134 = 0;
    v88 = 0;
    goto LABEL_139;
  }
LABEL_133:
  v89 = v116;
  if (v132 == 1)
    v89 = 1;
  if (v89 == 1)
  {
    v131 = v132 != 1;
    --LODWORD(v146[1]);
  }
  else
  {
    v131 = 0;
  }
  v88 = 2;
  v134 = 1;
LABEL_139:
  v128 = v88;
  v90 = sub_1C5D428B0(a1[1], v88, (llvm *)5, 0);
  v92 = v91;
  v93 = v146[1];
  if (LODWORD(v146[1]) >= HIDWORD(v146[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v146, (uint64_t)v147, LODWORD(v146[1]) + 1, 16);
    v93 = v146[1];
  }
  v94 = (uint64_t *)((char *)v146[0] + 16 * v93);
  *v94 = v90;
  v94[1] = v92;
  ++LODWORD(v146[1]);
  sub_1C47F3690(a1[1], (uint64_t)v146, 0);
  v95 = sub_1C47C01E0(v124, v125 != 0, v126 == 16, (v26 | v60) != 0, v123 == 16, (v61 | v30) != 0, v122 == 16, v132, v121 == 16, v131);
  v96 = a1[1];
  v97 = (uint64_t *)v146[0];
  v98 = LODWORD(v146[1]);
  v99 = sub_1C636A8B4(v96, v136, *((uint64_t *)&v136 + 1), 172, 0);
  v101 = sub_1C5D61678(v96, v95, (uint64_t)&v138, v99, v100, v97, v98);
  v102 = v101;
  if (v134)
  {
    v144[0] = v145;
    v145[0] = v101;
    v145[1] = 0;
    v105 = *((_QWORD *)&v140 + 1);
    v104 = v140;
    if (!v118)
    {
      v104 = v23;
      v105 = v119;
    }
    v145[2] = v104;
    v145[3] = v105;
    v144[1] = (void *)0x500000002;
    sub_1C47F3690(a1[1], (uint64_t)v144, v128);
    v106 = v144[1];
    if (LODWORD(v144[1]) >= HIDWORD(v144[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v144, (uint64_t)v145, LODWORD(v144[1]) + 1, 16);
      v106 = v144[1];
    }
    v107 = (char *)v144[0] + 16 * v106;
    *v107 = v102;
    v107[1] = 1;
    v108 = ++LODWORD(v144[1]);
    v109 = 2;
    if (v118)
      v109 = 0;
    v102 = sub_1C636E56C(a1[1], dword_1C6416958[v109 | (v126 == 16)], (uint64_t)&v138, (llvm *)v136, *((uint64_t *)&v136 + 1), (uint64_t *)v144[0], v108);
    if (v144[0] != v145)
      free(v144[0]);
  }
  if (v146[0] != v147)
    free(v146[0]);
  if (v138)
    llvm::MetadataTracking::untrack((uint64_t)&v138, v138);
  return v102;
}

uint64_t sub_1C47EF694(uint64_t a1, int *a2, unsigned int *a3, unsigned int a4)
{
  int v4;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::detail::DoubleAPFloat *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  _BOOL4 v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t **v30;
  uint64_t v31;
  _BOOL4 v33;
  int v34;
  unsigned int v35;
  int v36;
  int64_t v37;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t *v55;
  unsigned int v56;
  unsigned __int8 *v57;
  int v58;
  unint64_t *v59;
  uint64_t v60;
  unint64_t **v61;
  int v62;
  char v63;
  uint64_t v64;

  v9 = 0;
  v64 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)a3;
  v11 = *(unsigned __int16 *)(*(_QWORD *)a3 + 24);
  if (v11 <= 0x22)
  {
    if (v11 != 11)
    {
      if (v11 != 12)
        return v9 & v4;
LABEL_9:
      v15 = *(_QWORD *)(v10 + 80);
      v16 = (llvm::detail::DoubleAPFloat *)&v60;
      v17 = *(_QWORD *)(v15 + 32);
      if ((_UNKNOWN *)v17 == &unk_1C866F1C0)
      {
        v16 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v60, (const llvm::detail::DoubleAPFloat *)(v15 + 32));
      }
      else
      {
        v60 = *(_QWORD *)(v15 + 32);
        v18 = *(unsigned int *)(v17 + 8);
        if ((v18 + 64) >= 0x80)
        {
          v18 = operator new[]();
          v16 = (llvm::detail::DoubleAPFloat *)&v60;
          v61 = (unint64_t **)v18;
        }
        v19 = *(_BYTE *)(v15 + 52);
        v20 = v19 & 7;
        v63 = v19 & 0xF;
        v62 = *(_DWORD *)(v15 + 48);
        v22 = (v19 & 6) != 0 && v20 != 3;
        if (v20 == 1 || v22)
        {
          v24 = *(unsigned int *)(v17 + 8);
          if ((v24 - 64) > 0xFFFFFF7F)
            v18 = (uint64_t)&v61;
          v27 = *(uint64_t **)(v15 + 40);
          v26 = (uint64_t *)(v15 + 40);
          v25 = v27;
          if ((*(_DWORD *)(*(v26 - 1) + 8) - 64) >= 0xFFFFFF80)
            v25 = v26;
          if (v24 <= 0xFFFFFFBF)
          {
            v28 = (unint64_t)(v24 + 64) >> 6;
            do
            {
              v29 = *v25++;
              *(_QWORD *)v18 = v29;
              v18 += 8;
              --v28;
            }
            while (v28);
          }
        }
      }
      v30 = v61;
      if ((_UNKNOWN *)v60 != &unk_1C866F1C0)
        v30 = &v59;
      if ((*((_BYTE *)v30 + 28) & 6) == 0)
        goto LABEL_46;
      v31 = (*a2 == 5) ^ a4;
      if ((_DWORD)v31 == 1)
      {
        if (sub_1C612A0C8((uint64_t)&v59))
          goto LABEL_46;
      }
      else if ((_UNKNOWN *)v60 == &unk_1C866F1C0)
      {
        if (llvm::detail::DoubleAPFloat::isLargest(v16))
          goto LABEL_46;
      }
      else
      {
        v33 = (v63 & 6) != 0 && (v63 & 7) != 3;
        if (*(_DWORD *)(v60 + 16) == 1)
        {
          if (v33 && v62 == *(_DWORD *)v60 && llvm::detail::IEEEFloat::isSignificandAllOnesExceptLSB(v16))
            goto LABEL_46;
        }
        else if (v33 && v62 == *(_DWORD *)v60 && llvm::detail::IEEEFloat::isSignificandAllOnes(v16))
        {
          goto LABEL_46;
        }
      }
      sub_1C612A0E4((uint64_t)&v59, v31);
      if (!sub_1C4773C58((uint64_t)&v59))
      {
        if (*a2 == 3)
        {
          v44 = 2;
        }
        else
        {
          if (*a2 != 5)
            goto LABEL_46;
          v44 = 4;
        }
        *a2 = v44;
        v45 = *(_QWORD *)(a1 + 8);
        v46 = *(_QWORD *)a3;
        v47 = *(unsigned __int8 **)(*(_QWORD *)a3 + 64);
        v57 = v47;
        v48 = v46;
        if (v47)
        {
          llvm::MetadataTracking::track((uint64_t)&v57, v47, 2);
          v48 = *(_QWORD *)a3;
        }
        v58 = *(_DWORD *)(v46 + 60);
        v49 = *(_QWORD *)(v48 + 40) + 16 * a3[2];
        *(_QWORD *)a3 = sub_1C6366D08(v45, (llvm::LLVMContext *)&v59, (const llvm::APFloat *)&v57, *(llvm **)v49, *(_QWORD *)(v49 + 8), 0);
        a3[2] = v50;
        if (v57)
          llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
        v4 = 1;
        goto LABEL_47;
      }
LABEL_46:
      v4 = 0;
LABEL_47:
      if ((_UNKNOWN *)v60 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v61);
        goto LABEL_88;
      }
      if ((*(_DWORD *)(v60 + 8) - 64) > 0xFFFFFF7F || !v61)
        goto LABEL_88;
      goto LABEL_87;
    }
    goto LABEL_7;
  }
  if (v11 == 36)
    goto LABEL_9;
  if (v11 == 35)
  {
LABEL_7:
    v12 = *(_QWORD *)(v10 + 80);
    v13 = *(unsigned int *)(v12 + 32);
    LODWORD(v60) = v13;
    if (v13 > 0x40)
    {
      v14 = operator new[]();
      memcpy((void *)v14, *(const void **)(v12 + 24), ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v14 = *(_QWORD *)(v12 + 24);
    }
    v59 = (unint64_t *)v14;
    v34 = *a2;
    if (*a2 == 21 || v34 == 13)
      a4 ^= 1u;
    if ((v34 - 18) <= 3)
    {
      v35 = v13 - 1;
      if (a4)
      {
        if (v13 > 0x40)
        {
          if (((*(_QWORD *)(v14 + 8 * (v35 >> 6)) >> v35) & 1) != 0
            && llvm::APInt::countTrailingZerosSlowCase(&v59) == v35)
          {
            goto LABEL_83;
          }
        }
        else if (1 << v35 == v14)
        {
          goto LABEL_83;
        }
        goto LABEL_78;
      }
      if (v13 > 0x40)
      {
        if (((*(_QWORD *)(v14 + 8 * (v35 >> 6)) >> v35) & 1) == 0
          && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v59) == v35)
        {
          goto LABEL_83;
        }
      }
      else if (v14 == ~(-1 << v35))
      {
        goto LABEL_83;
      }
LABEL_80:
      llvm::APInt::operator++((uint64_t)&v59);
      goto LABEL_81;
    }
    if (a4)
    {
      if (v13 > 0x40)
      {
        v36 = 0;
        v37 = (unint64_t)(v13 + 63) >> 6;
        do
        {
          if (v37-- < 1)
            break;
          v39 = *(_QWORD *)(v14 + 8 * v37);
          v36 += __clz(v39);
        }
        while (!v39);
        v4 = 0;
        v40 = v13 | 0xFFFFFFC0;
        if ((v13 & 0x3F) == 0)
          v40 = 0;
        if (v36 + v40 == (_DWORD)v13)
        {
LABEL_86:
          if (v14)
LABEL_87:
            MEMORY[0x1CAA32F9C]();
LABEL_88:
          v9 = 1;
          return v9 & v4;
        }
      }
      else if (!v14)
      {
        goto LABEL_71;
      }
LABEL_78:
      llvm::APInt::operator--((uint64_t)&v59);
LABEL_81:
      HIDWORD(v42) = *a2 - 11;
      LODWORD(v42) = HIDWORD(v42);
      v41 = v42 >> 1;
      if (v41 <= 5 && ((0x33u >> v41) & 1) != 0)
      {
        *a2 = dword_1C642A040[v41];
        v51 = *(_QWORD *)(a1 + 8);
        v52 = *(_QWORD *)a3;
        v53 = *(unsigned __int8 **)(*(_QWORD *)a3 + 64);
        v57 = v53;
        v54 = v52;
        if (v53)
        {
          llvm::MetadataTracking::track((uint64_t)&v57, v53, 2);
          v54 = *(_QWORD *)a3;
        }
        v58 = *(_DWORD *)(v52 + 60);
        v55 = (uint64_t *)(*(_QWORD *)(v54 + 40) + 16 * a3[2]);
        *(_QWORD *)a3 = sub_1C63666FC(v51, (llvm::LLVMContext *)&v59, (const llvm::APInt *)&v57, *v55, v55[1], 0, 0);
        a3[2] = v56;
        if (v57)
          llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
        v4 = 1;
        goto LABEL_84;
      }
LABEL_83:
      v4 = 0;
LABEL_84:
      if (v60 < 0x41)
        goto LABEL_88;
      v14 = (uint64_t)v59;
      goto LABEL_86;
    }
    if ((_DWORD)v13)
    {
      if (v13 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v59) == (_DWORD)v13)
          goto LABEL_83;
      }
      else if (0xFFFFFFFFFFFFFFFFLL >> -(char)v13 == v14)
      {
        goto LABEL_83;
      }
      goto LABEL_80;
    }
LABEL_71:
    v4 = 0;
    goto LABEL_88;
  }
  return v9 & v4;
}

uint64_t sub_1C47EFC5C(_QWORD **a1, uint64_t a2, unsigned int *a3, uint64_t a4, __int128 *a5, uint64_t a6, _BYTE *a7, _BYTE *a8, char a9)
{
  __int16 v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  unsigned int v23;
  __int128 v24;

  v23 = a2;
  v16 = *(_WORD *)(*a1[1] + 1020);
  *a7 = 0;
  *a8 = 0;
  v17 = *(unsigned __int8 *)((*a1)[60] + 281);
  switch((int)a2)
  {
    case 17:
      v18 = 1;
      goto LABEL_11;
    case 18:
      v18 = 2;
      goto LABEL_11;
    case 19:
      v18 = 3;
      goto LABEL_11;
    case 20:
      v18 = 4;
      goto LABEL_11;
    case 21:
      v18 = 5;
      goto LABEL_11;
    case 22:
      v18 = 6;
LABEL_11:
      v23 = v18;
      if ((v16 & 1) == 0)
        goto LABEL_12;
      goto LABEL_4;
    default:
      v18 = a2;
      *a7 = 1;
      if ((v16 & 1) != 0)
      {
LABEL_4:
        *a7 = 0;
        switch((int)v18)
        {
          case 9:
            v18 = 1;
            goto LABEL_19;
          case 10:
            v18 = 2;
            goto LABEL_19;
          case 11:
            v18 = 3;
            goto LABEL_19;
          case 12:
            v18 = 4;
            goto LABEL_19;
          case 13:
            v18 = 5;
            goto LABEL_19;
          case 14:
            v18 = 6;
LABEL_19:
            v23 = v18;
            break;
          default:
            break;
        }
      }
      else
      {
LABEL_12:
        if ((v18 - 9) <= 5)
        {
          v19 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2]);
          v18 = sub_1C6365158(v18, *v19, v19[1]);
          v23 = v18;
          v24 = *a5;
          v20 = *(_DWORD *)(a6 + 8);
          *(_QWORD *)a5 = *(_QWORD *)a6;
          *((_DWORD *)a5 + 2) = v20;
          *(_QWORD *)a6 = v24;
          *(_DWORD *)(a6 + 8) = DWORD2(v24);
        }
      }
      if (v17 && (a9 & 1) != 0)
        goto LABEL_28;
      if (*a7)
      {
        sub_1C612EC20((uint64_t)a1, (int *)&v23, (uint64_t)a3, a4, *(_QWORD *)a5, *((_QWORD *)a5 + 1), *(_QWORD *)a6, *(_QWORD *)(a6 + 8), 0);
        v18 = v23;
      }
      switch((_DWORD)v18)
      {
        case 3:
          v18 = 4;
          break;
        case 6:
          v18 = 1;
          break;
        case 5:
          v18 = 2;
          break;
        default:
LABEL_28:
          *a7 = 0;
          return v18;
      }
      v24 = *a5;
      v21 = *(_DWORD *)(a6 + 8);
      *(_QWORD *)a5 = *(_QWORD *)a6;
      *((_DWORD *)a5 + 2) = v21;
      *(_QWORD *)a6 = v24;
      *(_DWORD *)(a6 + 8) = DWORD2(v24);
      *a8 = 1;
      return v18;
  }
}

BOOL sub_1C47EFE94(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int16 *)(a1 + 24);
  v2 = 1;
  if (v1 > 0x22)
  {
    if (v1 != 35)
    {
      if (v1 != 36)
        return 0;
LABEL_7:
      v3 = *(_QWORD *)(a1 + 80);
      v4 = v3 + 24;
      if (*(_UNKNOWN **)(v3 + 32) == &unk_1C866F1C0)
        v4 = *(_QWORD *)(v3 + 40);
      if ((*(_BYTE *)(v4 + 28) & 7) != 3)
        return !sub_1C4773C58(v3 + 24);
      return 0;
    }
  }
  else if (v1 != 11)
  {
    if (v1 != 12)
      return 0;
    goto LABEL_7;
  }
  return v2;
}

uint64_t sub_1C47EFF20(uint64_t *a1, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  int v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t result;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t i;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int64_t v48;
  BOOL v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  int64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t j;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v65;
  _QWORD *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  __int128 v71;
  uint64_t v72;
  unsigned int v73;
  _QWORD *v74;
  unsigned int v75;
  uint64_t v76;
  _DWORD v77[2];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v16 = *(unsigned __int8 *)(*(_QWORD *)(*a1 + 480) + 281);
  v17 = *a2;
  v71 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2]);
  v18 = sub_1C612ED80((llvm::EVT *)&v71, (uint64_t)a2, (BOOL)a3);
  v19 = v17;
  v20 = a9;
  v22 = sub_1C6365158(v19, v18, v21);
  if (a9)
    v23 = (v22 >> 1) & 2 | v22 & 0xFFFFFFF9 | (4 * ((v22 >> 1) & 1));
  else
    v23 = v22;
  v70 = v23;
  if (v16)
    goto LABEL_5;
  v25 = *(unsigned __int16 *)(*(_QWORD *)a4 + 24);
  v26 = v25 == 35 || v25 == 11;
  v27 = a8;
  v28 = (uint64_t)a1;
  if (!v26)
    goto LABEL_63;
  v29 = *(_QWORD *)(*(_QWORD *)a4 + 80);
  v30 = (_QWORD *)(v29 + 24);
  if (*(_DWORD *)(v29 + 32) >= 0x41u)
    v30 = (_QWORD *)*v30;
  if (*v30 != 65537 || *a2 != 17)
    goto LABEL_63;
  v32 = *(_QWORD *)a3;
  if (*(_WORD *)(*(_QWORD *)a3 + 24) != 216)
    goto LABEL_63;
  if (*(_BYTE *)(*(_QWORD *)(v32 + 40) + 16 * a3[2]) != 5)
    goto LABEL_63;
  v33 = *(unsigned int **)(v32 + 32);
  v34 = *(_QWORD *)v33;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v33 + 40) + 16 * v33[2]) != 38 || *(_WORD *)(v34 + 24) != 146)
    goto LABEL_63;
  for (i = 0; i != 64; i += 32)
  {
    v36 = (char *)&v71 + i;
    *((_DWORD *)v36 + 2) = 1;
    *(_QWORD *)v36 = 0;
    *((_DWORD *)v36 + 6) = 1;
    *((_QWORD *)v36 + 2) = 0;
  }
  sub_1C6368768(a1[1], **(_QWORD **)(v34 + 32), *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8), 0, (uint64_t)&v66);
  if (DWORD2(v71) >= 0x41 && (_QWORD)v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
  v37 = v66;
  *(_QWORD *)&v71 = v66;
  v38 = v67;
  DWORD2(v71) = v67;
  v67 = 0;
  if (v73 >= 0x41 && v72)
  {
    MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
    v72 = v68;
    v73 = v69;
    v69 = 0;
    if (v67 >= 0x41 && v66)
      MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
  }
  else
  {
    v72 = v68;
    v73 = v69;
  }
  v39 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 32) + 32);
  sub_1C6368768(*(_QWORD *)(v28 + 8), *(_QWORD *)(v39 + 40), *(_QWORD *)(v39 + 48), 0, (uint64_t)&v66);
  if (v75 >= 0x41 && v74)
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
  v40 = v66;
  v74 = v66;
  v41 = v67;
  v75 = v67;
  v67 = 0;
  if (v77[0] >= 0x41u && v76)
  {
    v62 = v41;
    v63 = v66;
    MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    v41 = v62;
    v40 = v63;
    v76 = v68;
    v77[0] = v69;
    v69 = 0;
    if (v67 >= 0x41 && v66)
    {
      MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
      v41 = v62;
      v40 = v63;
    }
  }
  else
  {
    v76 = v68;
    v77[0] = v69;
  }
  if (v38 >= 0x41)
  {
    v46 = 0;
    v47 = v38;
    v48 = (unint64_t)(v38 + 63) >> 6;
    do
    {
      v49 = v48-- < 1;
      if (v49)
        break;
      v50 = v37[v48];
      v46 += __clz(v50);
    }
    while (!v50);
    v42 = a5;
    v43 = a6;
    v44 = a7;
    v51 = v47 | 0xFFFFFFC0;
    if ((v47 & 0x3F) == 0)
      v51 = 0;
    v45 = a8;
    if (v47 - v46 - v51 > 0x40)
      goto LABEL_52;
    v37 = (_QWORD *)*v37;
  }
  else
  {
    v42 = a5;
    v43 = a6;
    v44 = a7;
    v45 = a8;
  }
  if (v37 != (_QWORD *)65534)
    goto LABEL_52;
  if (v41 >= 0x41)
  {
    v52 = 0;
    v53 = (unint64_t)(v41 + 63) >> 6;
    do
    {
      v49 = v53-- < 1;
      if (v49)
        break;
      v54 = v40[v53];
      v52 += __clz(v54);
    }
    while (!v54);
    v55 = v41 | 0xFFFFFFC0;
    if ((v41 & 0x3F) == 0)
      v55 = 0;
    if ((v41 - v52 - v55) > 0x40)
      goto LABEL_52;
    v40 = (_QWORD *)*v40;
  }
  if (v40 != (_QWORD *)65534)
  {
LABEL_52:
    v56 = 1;
    goto LABEL_53;
  }
  v56 = 0;
  *a2 = 12;
LABEL_53:
  for (j = 0; j != -16; j -= 8)
  {
    v58 = (char *)&v71 + j * 4;
    if (v77[j] >= 0x41u)
    {
      v59 = *((_QWORD *)v58 + 6);
      if (v59)
      {
        v65 = v56;
        MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
        v56 = v65;
      }
    }
    if (*((_DWORD *)v58 + 10) >= 0x41u)
    {
      v60 = *((_QWORD *)v58 + 4);
      if (v60)
      {
        v61 = v56;
        MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
        v56 = v61;
      }
    }
  }
  v27 = v45;
  a7 = v44;
  a6 = v43;
  a5 = v42;
  v20 = a9;
  if (!(_DWORD)v56)
    return 1;
LABEL_63:
  result = sub_1C612EC20(v28, (int *)&v70, (uint64_t)a3, a4, a5, a6, a7, v27, v20);
  if ((_DWORD)result)
  {
    v23 = v70;
LABEL_5:
    *a2 = v23;
    return 1;
  }
  return result;
}

uint64_t sub_1C47F0474(uint64_t result, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t *a5, uint64_t *a6, int a7)
{
  int v7;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int *v39;
  uint64_t *v40;
  uint64_t v41;
  llvm::detail::DoubleAPFloat *v42;
  void *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  const llvm::detail::DoubleAPFloat *v49;
  uint64_t v50;
  char v51;
  int v52;
  _BOOL4 v54;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  const llvm::detail::DoubleAPFloat *v73;
  uint64_t v74;
  char v75;
  int v76;
  _BOOL4 v78;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t *v96;
  unsigned int *v97;
  uint64_t *v98;
  uint64_t v99;
  llvm::detail::DoubleAPFloat *v100;
  void *v101;
  uint64_t *v102;
  _BOOL4 v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  unsigned int *v112;
  unsigned int *v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  unsigned int *v124;
  uint64_t *v125;
  int v126;
  unsigned int *v127;
  uint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  _QWORD *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  unsigned int *v142;
  uint64_t *v143;
  uint64_t *v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  unsigned int *v150;
  uint64_t *v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int *v155;
  int v156;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  int v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  unsigned int *v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t *v181;
  int v183;
  int v185;
  unsigned int v186;
  unsigned __int8 *v187;
  int v188;
  __int128 v189;
  uint64_t *v190;
  int v191;
  char v192;
  uint64_t v193;

  v7 = a7;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = (uint64_t *)result;
  v193 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)a3;
  v14 = *(_QWORD *)a4;
  v15 = a4[2];
  v16 = *(unsigned __int16 *)(*(_QWORD *)a3 + 24);
  if (v16 == 36 || v16 == 12)
  {
    v175 = a2;
    v48 = *(_QWORD *)(v13 + 80);
    v49 = (const llvm::detail::DoubleAPFloat *)(v48 + 32);
    v50 = *(_QWORD *)(v48 + 32);
    if ((_UNKNOWN *)v50 == &unk_1C866F1C0)
    {
      v158 = (uint64_t *)result;
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v189 + 8), v49);
      v12 = v158;
      v9 = a5;
    }
    else
    {
      *((_QWORD *)&v189 + 1) = *(_QWORD *)(v48 + 32);
      if ((*(_DWORD *)(v50 + 8) + 64) >= 0x80)
      {
        v159 = (uint64_t *)result;
        result = operator new[]();
        v12 = v159;
        v9 = a5;
        v190 = (uint64_t *)result;
      }
      v51 = *(_BYTE *)(v48 + 52);
      v52 = v51 & 7;
      v192 = v51 & 0xF;
      v191 = *(_DWORD *)(v48 + 48);
      v54 = (v51 & 6) != 0 && v52 != 3;
      if (v52 == 1 || v54)
      {
        v56 = *(unsigned int *)(v50 + 8);
        if ((v56 - 64) <= 0xFFFFFF7F)
          v57 = (uint64_t *)result;
        else
          v57 = (uint64_t *)&v190;
        v60 = *(uint64_t **)(v48 + 40);
        v59 = (uint64_t *)(v48 + 40);
        v58 = v60;
        if ((*(_DWORD *)(*(v59 - 1) + 8) - 64) >= 0xFFFFFF80)
          v58 = v59;
        if (v56 <= 0xFFFFFFBF)
        {
          v61 = (unint64_t)(v56 + 64) >> 6;
          do
          {
            v62 = *v58++;
            *v57++ = v62;
            --v61;
          }
          while (v61);
        }
      }
    }
    if (*((_UNKNOWN **)&v189 + 1) == &unk_1C866F1C0)
    {
      v160 = v9;
      v161 = v12;
      llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)((char *)&v189 + 8));
      v12 = v161;
      v9 = v160;
    }
    else
    {
      v192 ^= 8u;
    }
    v63 = v9;
    v64 = v12;
    v65 = v12[1];
    v66 = *(_QWORD *)v11;
    v67 = *(unsigned __int8 **)(*(_QWORD *)v11 + 64);
    v187 = v67;
    v68 = v66;
    if (v67)
    {
      llvm::MetadataTracking::track((uint64_t)&v187, v67, 2);
      v68 = *(_QWORD *)v11;
    }
    v188 = *(_DWORD *)(v66 + 60);
    v69 = *(_QWORD *)(v68 + 40) + 16 * v11[2];
    result = (uint64_t)sub_1C6366D08(v65, (llvm::LLVMContext *)&v189, (const llvm::APFloat *)&v187, *(llvm **)v69, *(_QWORD *)(v69 + 8), 0);
    v13 = result;
    v18 = v70;
    if (v187)
    {
      v71 = v70;
      result = llvm::MetadataTracking::untrack((uint64_t)&v187, v187);
      v18 = v71;
    }
    if (*((_UNKNOWN **)&v189 + 1) == &unk_1C866F1C0)
    {
      v162 = v18;
      result = (uint64_t)sub_1C4773C74((uint64_t *)&v190);
      v18 = v162;
      v9 = v63;
      a2 = v175;
      v12 = v64;
    }
    else
    {
      v9 = v63;
      a2 = v175;
      v12 = v64;
      if ((*(_DWORD *)(*((_QWORD *)&v189 + 1) + 8) - 64) <= 0xFFFFFF7F)
      {
        result = (uint64_t)v190;
        if (v190)
        {
          v163 = v18;
          result = MEMORY[0x1CAA32F9C](v190, 0x1000C8000313F17);
          v18 = v163;
          v12 = v64;
          a2 = v175;
          v9 = v63;
        }
      }
    }
    v19 = *(_QWORD *)v10;
    v7 = a7;
  }
  else
  {
    v18 = a3[2];
    v19 = *(_QWORD *)a4;
  }
  v20 = *(unsigned __int16 *)(v19 + 24);
  if (v20 == 36 || v20 == 12)
  {
    v176 = a2;
    v179 = v18;
    v72 = *(_QWORD *)(v19 + 80);
    v73 = (const llvm::detail::DoubleAPFloat *)(v72 + 32);
    v74 = *(_QWORD *)(v72 + 32);
    if ((_UNKNOWN *)v74 == &unk_1C866F1C0)
    {
      v164 = v9;
      v165 = v12;
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v189 + 8), v73);
      v12 = v165;
      v9 = v164;
    }
    else
    {
      *((_QWORD *)&v189 + 1) = *(_QWORD *)(v72 + 32);
      if ((*(_DWORD *)(v74 + 8) + 64) >= 0x80)
      {
        v166 = v9;
        v167 = v7;
        v168 = v12;
        v169 = operator new[]();
        v12 = v168;
        v7 = v167;
        v9 = v166;
        v190 = (uint64_t *)v169;
      }
      v75 = *(_BYTE *)(v72 + 52);
      v76 = v75 & 7;
      v192 = v192 & 0xF0 | v75 & 0xF;
      v191 = *(_DWORD *)(v72 + 48);
      v78 = (v75 & 6) != 0 && v76 != 3;
      if (v76 == 1 || v78)
      {
        v80 = *(unsigned int *)(*((_QWORD *)&v189 + 1) + 8);
        if ((v80 - 64) <= 0xFFFFFF7F)
          v81 = v190;
        else
          v81 = (uint64_t *)&v190;
        v84 = *(uint64_t **)(v72 + 40);
        v83 = (uint64_t *)(v72 + 40);
        v82 = v84;
        if ((*(_DWORD *)(*(v83 - 1) + 8) - 64) >= 0xFFFFFF80)
          v82 = v83;
        if (v80 <= 0xFFFFFFBF)
        {
          v85 = (unint64_t)(v80 + 64) >> 6;
          do
          {
            v86 = *v82++;
            *v81++ = v86;
            --v85;
          }
          while (v85);
        }
      }
    }
    v87 = v7;
    if (*((_UNKNOWN **)&v189 + 1) == &unk_1C866F1C0)
    {
      v170 = v9;
      v171 = v12;
      llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)((char *)&v189 + 8));
      v12 = v171;
      v9 = v170;
    }
    else
    {
      v192 ^= 8u;
    }
    v88 = v9;
    v89 = v12;
    v90 = v12[1];
    v91 = *(_QWORD *)v10;
    v92 = *(unsigned __int8 **)(*(_QWORD *)v10 + 64);
    v187 = v92;
    v93 = v91;
    if (v92)
    {
      llvm::MetadataTracking::track((uint64_t)&v187, v92, 2);
      v93 = *(_QWORD *)v10;
    }
    v188 = *(_DWORD *)(v91 + 60);
    v94 = *(_QWORD *)(v93 + 40) + 16 * v10[2];
    result = (uint64_t)sub_1C6366D08(v90, (llvm::LLVMContext *)&v189, (const llvm::APFloat *)&v187, *(llvm **)v94, *(_QWORD *)(v94 + 8), 0);
    v14 = result;
    v15 = v95;
    if (v187)
      result = llvm::MetadataTracking::untrack((uint64_t)&v187, v187);
    if (*((_UNKNOWN **)&v189 + 1) == &unk_1C866F1C0)
    {
      result = (uint64_t)sub_1C4773C74((uint64_t *)&v190);
      v9 = v88;
      a2 = v176;
      v18 = v179;
      v12 = v89;
    }
    else
    {
      v9 = v88;
      a2 = v176;
      v18 = v179;
      v12 = v89;
      if ((*(_DWORD *)(*((_QWORD *)&v189 + 1) + 8) - 64) <= 0xFFFFFF7F)
      {
        result = (uint64_t)v190;
        if (v190)
        {
          result = MEMORY[0x1CAA32F9C](v190, 0x1000C8000313F17);
          a2 = v176;
          v18 = v179;
          v12 = v89;
          v9 = v88;
        }
      }
    }
    v7 = v87;
  }
  v22 = *(unsigned __int16 *)(v13 + 24);
  if (v22 == 222)
  {
    v23 = *(_DWORD **)(v13 + 32);
    v13 = *(_QWORD *)v23;
    v18 = v23[2];
    v22 = *(unsigned __int16 *)(*(_QWORD *)v23 + 24);
  }
  if (v22 == 223)
  {
    v24 = *(_QWORD *)(v13 + 32);
    v13 = *(_QWORD *)v24;
    v18 = *(_DWORD *)(v24 + 8);
  }
  v25 = *(unsigned __int16 *)(v14 + 24);
  if (v25 == 222)
  {
    v26 = *(_DWORD **)(v14 + 32);
    v14 = *(_QWORD *)v26;
    v15 = v26[2];
    v25 = *(unsigned __int16 *)(*(_QWORD *)v26 + 24);
  }
  if (v25 == 223)
  {
    v27 = *(_QWORD *)(v14 + 32);
    v14 = *(_QWORD *)v27;
    v15 = *(_DWORD *)(v27 + 8);
  }
  v28 = *a6;
  if (v14 == *a6 && v15 == *((_DWORD *)a6 + 2))
    return result;
  v29 = *v9;
  v30 = *(unsigned __int16 *)(*v9 + 24);
  if (v30 == 35 || v30 == 11)
    v32 = *v9;
  else
    v32 = 0;
  if (v30 != 36 && v30 != 12)
    v29 = 0;
  v33 = *(unsigned __int16 *)(v28 + 24);
  if (v33 == 35 || v33 == 11)
    v34 = *a6;
  else
    v34 = 0;
  if (v33 != 36 && v33 != 12)
    v28 = 0;
  if (v32)
  {
    v35 = *(_QWORD *)(v32 + 80);
    v36 = (uint64_t *)(v35 + 24);
    if (*(_DWORD *)(v35 + 32) >= 0x41u)
      v36 = (uint64_t *)*v36;
    v37 = *v36;
    if (!v34)
      goto LABEL_115;
LABEL_51:
    v45 = *(_QWORD *)(v34 + 80);
    v46 = (uint64_t *)(v45 + 24);
    if (*(_DWORD *)(v45 + 32) >= 0x41u)
      v46 = (uint64_t *)*v46;
    v47 = *v46;
    if (!*v46)
      return result;
    goto LABEL_125;
  }
  if (!v29)
  {
    v37 = -1;
    if (!v34)
      goto LABEL_115;
    goto LABEL_51;
  }
  v174 = v11;
  v178 = v18;
  v183 = v7;
  v172 = v12;
  v38 = a6;
  v39 = a2;
  v40 = v9;
  v41 = *(_QWORD *)(v29 + 80);
  v43 = *(void **)(v41 + 32);
  v42 = (llvm::detail::DoubleAPFloat *)(v41 + 32);
  if (v43 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v42, (unsigned int *)&v189);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v42, (unsigned int *)&v189);
  result = v189;
  if (DWORD2(v189) >= 0x41)
    v44 = (uint64_t *)v189;
  else
    v44 = (uint64_t *)&v189;
  v37 = *v44;
  if (DWORD2(v189) >= 0x41 && (_QWORD)v189)
    result = MEMORY[0x1CAA32F9C]();
  v9 = v40;
  a2 = v39;
  a6 = v38;
  v12 = v172;
  v11 = v174;
  v7 = v183;
  v18 = v178;
  if (v34)
    goto LABEL_51;
LABEL_115:
  if (v28)
  {
    v177 = v11;
    v180 = v18;
    v185 = v7;
    v173 = v12;
    v96 = a6;
    v97 = a2;
    v98 = v9;
    v99 = *(_QWORD *)(v28 + 80);
    v101 = *(void **)(v99 + 32);
    v100 = (llvm::detail::DoubleAPFloat *)(v99 + 32);
    if (v101 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v100, (unsigned int *)&v189);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v100, (unsigned int *)&v189);
    result = v189;
    if (DWORD2(v189) >= 0x41)
      v102 = (uint64_t *)v189;
    else
      v102 = (uint64_t *)&v189;
    v47 = *v102;
    if (DWORD2(v189) >= 0x41 && (_QWORD)v189)
      result = MEMORY[0x1CAA32F9C]();
    v9 = v98;
    a2 = v97;
    a6 = v96;
    v12 = v173;
    v11 = v177;
    v7 = v185;
    v18 = v180;
    if (!v47)
      return result;
LABEL_125:
    v103 = v37 == 0;
    if (!v37 && v47 == 1)
      return result;
    goto LABEL_129;
  }
  v103 = v37 == 0;
  v47 = -1;
LABEL_129:
  if (v103 && v47 != 1)
  {
    if (v7)
    {
      v104 = *a6;
      v105 = a6[1];
      v106 = a2;
      v107 = v11;
      v108 = (uint64_t)v10;
      v109 = v9;
      v110 = v12;
      v186 = v15;
      v111 = a6;
      v112 = v11;
      v113 = v10;
      v114 = v7;
      v115 = v18;
      result = sub_1C47EFF20(v12, a2, v107, v108, *v9, v9[1], v104, v105, 0);
      v18 = v115;
      v7 = v114;
      v10 = v113;
      v11 = v112;
      a6 = v111;
      v15 = v186;
      v12 = v110;
      a2 = v106;
      v9 = v109;
      if ((_DWORD)result)
        goto LABEL_171;
    }
  }
  v116 = *a6;
  if (v13 == *a6 && v18 == *((_DWORD *)a6 + 2))
  {
    v189 = *(_OWORD *)v11;
    v117 = v10[2];
    *(_QWORD *)v11 = *(_QWORD *)v10;
    v11[2] = v117;
    *(_QWORD *)v10 = v189;
    v10[2] = DWORD2(v189);
    *a2 = (*a2 >> 1) & 2 | *a2 & 0xFFFFFFF9 | (4 * ((*a2 >> 1) & 1));
    return result;
  }
  if (v7)
  {
    v118 = *v9;
    v119 = *((_DWORD *)v9 + 2);
    if (v14 == *v9 && v15 == v119)
    {
      v120 = v18;
      v121 = a6[1];
      v122 = v12;
      v123 = a6;
      v124 = a2;
      v125 = v9;
      result = sub_1C47EFF20(v12, a2, v11, (uint64_t)v10, v118, v9[1], v116, v121, 0);
      if ((result & 1) != 0)
      {
        v189 = *(_OWORD *)v125;
        v126 = *((_DWORD *)v123 + 2);
        *v125 = *v123;
        *((_DWORD *)v125 + 2) = v126;
        *v123 = v189;
        *((_DWORD *)v123 + 2) = DWORD2(v189);
        return result;
      }
      v118 = *v125;
      v119 = *((_DWORD *)v125 + 2);
      v9 = v125;
      a2 = v124;
      a6 = v123;
      v12 = v122;
      v18 = v120;
    }
    if (v13 == v118 && v18 == v119)
    {
      v127 = a2;
      v128 = v9;
      v129 = v12;
      result = sub_1C47EFF20(v12, a2, v11, (uint64_t)v10, v118, v9[1], *a6, a6[1], 1u);
      v12 = v129;
      a2 = v127;
      v9 = v128;
      if ((_DWORD)result)
      {
        v189 = *(_OWORD *)v11;
        v130 = v10[2];
        *(_QWORD *)v11 = *(_QWORD *)v10;
        v11[2] = v130;
        *(_QWORD *)v10 = v189;
        v10[2] = DWORD2(v189);
LABEL_171:
        v189 = *(_OWORD *)v9;
        v146 = *((_DWORD *)a6 + 2);
        *v9 = *a6;
        *((_DWORD *)v9 + 2) = v146;
LABEL_172:
        *a6 = v189;
        *((_DWORD *)a6 + 2) = DWORD2(v189);
        return result;
      }
    }
  }
  v131 = *(unsigned __int16 *)(*(_QWORD *)v10 + 24);
  if (v131 == 35 || v131 == 11)
  {
    v132 = *(_QWORD *)(*(_QWORD *)v10 + 80);
    v133 = (_QWORD *)(v132 + 24);
    if (*(_DWORD *)(v132 + 32) >= 0x41u)
      v133 = (_QWORD *)*v133;
    if (*a2 == 17 && !*v133)
    {
      result = *v9;
      v134 = *(unsigned __int16 *)(*v9 + 24);
      if (v134 == 35 || v134 == 11)
        v135 = *v9;
      else
        v135 = 0;
      v136 = v134 == 36 || v134 == 12 ? *v9 : 0;
      if (v135)
      {
        v137 = *(_QWORD *)(v135 + 80);
        v138 = (_QWORD *)(v137 + 24);
        if (*(_DWORD *)(v137 + 32) >= 0x41u)
          v138 = (_QWORD *)*v138;
        if (!*v138)
          goto LABEL_170;
      }
      if (v136)
      {
        v139 = *(_QWORD *)(v136 + 80);
        v140 = *(_UNKNOWN **)(v139 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v139 + 40) : v139 + 24;
        if ((*(_BYTE *)(v140 + 28) & 7) == 3)
          goto LABEL_170;
      }
      v141 = a6;
      v142 = a2;
      v143 = v9;
      v144 = v12;
      v145 = sub_1C47F101C(result, v9[1]);
      result = sub_1C47F101C(*v141, v141[1]);
      v12 = v144;
      a2 = v142;
      a6 = v141;
      v9 = v143;
      if (v145 > result)
      {
LABEL_170:
        *a2 = 10;
        goto LABEL_171;
      }
    }
  }
  if (v7)
  {
    v147 = v9[1];
    v148 = *v9;
    v149 = a6;
    v150 = a2;
    v181 = v9;
    v151 = v12;
    v152 = sub_1C47F101C(*v9, v147);
    v153 = *v149;
    v154 = v149[1];
    result = sub_1C47F101C(*v149, v154);
    if (v152 > result)
    {
      v155 = v150;
      a6 = v149;
      result = sub_1C47EFF20(v151, v155, v11, (uint64_t)v10, v148, v147, v153, v154, 0);
      if ((_DWORD)result)
      {
        v189 = *(_OWORD *)v181;
        v156 = *((_DWORD *)v149 + 2);
        *v181 = *v149;
        *((_DWORD *)v181 + 2) = v156;
        goto LABEL_172;
      }
    }
  }
  return result;
}

uint64_t sub_1C47F101C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v8;
  int v9;
  unsigned int v10;

  while (1)
  {
    v2 = *(unsigned __int16 *)(a1 + 24);
    if (v2 <= 0x24 && ((1 << v2) & 0x1800001800) != 0)
      return 0;
    if ((v2 & 0x8000) != 0)
    {
      if (v2 == 65527 || v2 == 65517)
        return 0;
      else
        return 2;
    }
    v4 = 0;
    if (*(unsigned __int16 *)(a1 + 24) > 0x91u)
    {
      if (*(unsigned __int16 *)(a1 + 24) > 0x18Au)
      {
        if (v2 == 395 || v2 == 437)
          return v4;
      }
      else if (v2 == 146 || v2 == 201)
      {
        return v4;
      }
    }
    else if (v2 <= 0x36 && ((1 << v2) & 0x44000000040100) != 0)
    {
      return v4;
    }
    if (v2 - 397 < 0x1A)
      return 0;
    if (v2 - 3 >= 2 && v2 != 216)
      break;
    v5 = *(uint64_t **)(a1 + 32);
    a1 = *v5;
    a2 = v5[1];
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (!v8)
    return 1;
  v9 = 1;
  do
  {
    if (*(_DWORD *)(v8 + 8) == (_DWORD)a2)
    {
      if (!v9)
        return 1;
      --v9;
    }
    v8 = *(_QWORD *)(v8 + 32);
  }
  while (v8);
  if (v2 == 192)
    v10 = 3;
  else
    v10 = 4;
  if (v9)
    return 1;
  else
    return v10;
}

_QWORD *sub_1C47F1144(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, __int128 a9, __int128 a10, const llvm::APInt *a11)
{
  unsigned int v12;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  BOOL v56;
  char v57;
  _BOOL4 v58;
  uint64_t v59;
  llvm::APInt *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  char v67;
  int v68;
  _BOOL4 v69;
  uint64_t v70;
  llvm::APInt *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  char v78;
  int v79;
  uint64_t v80;
  llvm::APInt *v81;
  unsigned int v82;
  BOOL v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unsigned __int8 *v89;
  _QWORD *v90;
  _BOOL4 v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  unsigned int v115;
  __int128 v116;
  unsigned int v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t *v121;
  unsigned int v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  unsigned int v130;
  __int128 v131;
  unsigned int v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  _BOOL4 v136;
  uint64_t *v137;
  __int128 v138;
  unsigned int v139;
  uint64_t v140;
  _QWORD *v141;
  unsigned int v142;
  uint64_t v143;
  _BOOL8 v144;
  _BOOL4 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  unsigned int v149;
  __int128 v150;
  unsigned int v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t *v154;
  uint64_t v155;
  llvm *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  _BOOL4 v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v203;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int16 v210;
  _BOOL8 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  unsigned __int8 *v215;
  int v216;
  unsigned int v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  void *v222;
  uint64_t v223;
  _QWORD v224[26];

  v12 = a7;
  v224[24] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v221 = a3;
  *((_QWORD *)&v221 + 1) = a4;
  *(_QWORD *)&v220 = a6;
  *((_QWORD *)&v220 + 1) = a7;
  v219 = a9;
  v218 = a10;
  v217 = a2;
  v188 = a4;
  v205 = (uint64_t)sub_1C612E5C8(a1[1], a3, a4, a5);
  v16 = v15;
  v203 = a6;
  v187 = v12;
  v200 = a8;
  v17 = sub_1C612E5C8(a1[1], a6, v12, a8);
  v19 = v18;
  v20 = sub_1C47E3C48(a1[1], a9, DWORD2(a9), 0);
  v22 = v21;
  v23 = sub_1C47E3C48(a1[1], a10, DWORD2(a10), 0);
  v25 = v24;
  v189 = a1[1];
  v210 = *(_WORD *)(*(_QWORD *)v189 + 1020);
  v191 = v19;
  v193 = v16;
  v198 = (uint64_t)v23;
  v199 = (uint64_t)v17;
  v194 = v22;
  v195 = (uint64_t)v20;
  v26 = sub_1C612EE00(v205, v16, (uint64_t)v17, v19, (uint64_t)v20, v22, (uint64_t)v23, v24);
  v27 = a3;
  v28 = v26;
  v29 = *(unsigned __int16 *)(a3 + 24);
  v30 = v29;
  v31 = v29;
  v32 = a3;
  if (v29 == 215)
  {
    v32 = **(_QWORD **)(a3 + 32);
    v31 = *(unsigned __int16 *)(v32 + 24);
  }
  if (v31 == 222)
  {
    v32 = **(_QWORD **)(v32 + 32);
    v31 = *(unsigned __int16 *)(v32 + 24);
  }
  v33 = a1;
  v34 = a6;
  if (v31 == 223)
    v31 = *(unsigned __int16 *)(**(_QWORD **)(v32 + 32) + 24);
  v35 = v31 == 395;
  v36 = *(unsigned __int16 *)(a6 + 24);
  v37 = v36;
  v38 = a6;
  if (v36 == 215)
  {
    v38 = **(_QWORD **)(a6 + 32);
    v37 = *(unsigned __int16 *)(v38 + 24);
  }
  if (v37 == 222)
  {
    v38 = **(_QWORD **)(v38 + 32);
    v37 = *(unsigned __int16 *)(v38 + 24);
  }
  v196 = v25;
  if (v37 == 223)
    v37 = *(unsigned __int16 *)(**(_QWORD **)(v38 + 32) + 24);
  if (v37 == 395)
    ++v35;
  v39 = *(unsigned __int16 *)(a9 + 24);
  v40 = v39;
  v41 = a9;
  if (v39 == 215)
  {
    v41 = **(_QWORD **)(a9 + 32);
    v40 = *(unsigned __int16 *)(v41 + 24);
  }
  if (v40 == 222)
  {
    v41 = **(_QWORD **)(v41 + 32);
    v40 = *(unsigned __int16 *)(v41 + 24);
  }
  if (v40 == 223)
    v40 = *(unsigned __int16 *)(**(_QWORD **)(v41 + 32) + 24);
  if (v40 == 395)
    ++v35;
  v42 = *(unsigned __int16 *)(a10 + 24);
  v43 = v42;
  v44 = a10;
  if (v42 == 215)
  {
    v44 = **(_QWORD **)(a10 + 32);
    v43 = *(unsigned __int16 *)(v44 + 24);
  }
  if (v43 == 222)
  {
    v44 = **(_QWORD **)(v44 + 32);
    v43 = *(unsigned __int16 *)(v44 + 24);
  }
  if (v43 == 223)
    v43 = *(unsigned __int16 *)(**(_QWORD **)(v44 + 32) + 24);
  if (v43 == 395)
    v45 = v35 + 1;
  else
    v45 = v35;
  v46 = a3;
  if (v29 == 212)
  {
    v46 = **(_QWORD **)(a3 + 32);
    v30 = *(unsigned __int16 *)(v46 + 24);
  }
  if (v30 == 222)
  {
    v46 = **(_QWORD **)(v46 + 32);
    v30 = *(unsigned __int16 *)(v46 + 24);
  }
  if (v30 == 223)
    v30 = *(unsigned __int16 *)(**(_QWORD **)(v46 + 32) + 24);
  v47 = v30 == 395;
  v48 = *(unsigned __int16 *)(a6 + 24);
  v49 = a6;
  if (v36 == 212)
  {
    v49 = **(_QWORD **)(a6 + 32);
    v48 = *(unsigned __int16 *)(v49 + 24);
  }
  if (v48 == 222)
  {
    v49 = **(_QWORD **)(v49 + 32);
    v48 = *(unsigned __int16 *)(v49 + 24);
  }
  if (v48 == 223)
    v48 = *(unsigned __int16 *)(**(_QWORD **)(v49 + 32) + 24);
  if (v48 == 395)
    ++v47;
  v50 = *(unsigned __int16 *)(a9 + 24);
  v51 = a9;
  if (v39 == 212)
  {
    v51 = **(_QWORD **)(a9 + 32);
    v50 = *(unsigned __int16 *)(v51 + 24);
  }
  if (v50 == 222)
  {
    v51 = **(_QWORD **)(v51 + 32);
    v50 = *(unsigned __int16 *)(v51 + 24);
  }
  if (v50 == 223)
    v50 = *(unsigned __int16 *)(**(_QWORD **)(v51 + 32) + 24);
  if (v50 == 395)
    ++v47;
  v52 = *(unsigned __int16 *)(a10 + 24);
  v53 = a10;
  if (v42 == 212)
  {
    v53 = **(_QWORD **)(a10 + 32);
    v52 = *(unsigned __int16 *)(v53 + 24);
  }
  if (v52 == 222)
  {
    v53 = **(_QWORD **)(v53 + 32);
    v52 = *(unsigned __int16 *)(v53 + 24);
  }
  if (v52 == 223)
    v52 = *(unsigned __int16 *)(**(_QWORD **)(v53 + 32) + 24);
  if (v52 == 395)
    v54 = v47 + 1;
  else
    v54 = v47;
  if ((v54 + v26) < 3)
  {
    v55 = a2;
    goto LABEL_65;
  }
  v100 = v205;
  if (v205
    && v195
    && (v29 == 36 || v29 == 12)
    && ((v101 = *(_QWORD *)(a3 + 80), *(_UNKNOWN **)(v101 + 32) != &unk_1C866F1C0)
      ? (v102 = v101 + 24)
      : (v102 = *(_QWORD *)(v101 + 40)),
        (*(_BYTE *)(v102 + 28) & 7) == 3
     && (v39 == 36 || v39 == 12)
     && ((v103 = *(_QWORD *)(a9 + 80), *(_UNKNOWN **)(v103 + 32) != &unk_1C866F1C0)
       ? (v104 = v103 + 24)
       : (v104 = *(_QWORD *)(v103 + 40)),
         (*(_BYTE *)(v104 + 28) & 7) == 3)))
  {
    v162 = a3;
    v163 = v193 & 0xFFFFFFFF00000000 | v194;
    v100 = v195;
  }
  else
  {
    v163 = v193;
    if (!v205
      || !v198
      || v29 != 36 && v29 != 12
      || ((v164 = *(_QWORD *)(a3 + 80), *(_UNKNOWN **)(v164 + 32) != &unk_1C866F1C0)
        ? (v165 = v164 + 24)
        : (v165 = *(_QWORD *)(v164 + 40)),
          (*(_BYTE *)(v165 + 28) & 7) != 3
       || v42 != 36 && v42 != 12
       || ((v166 = *(_QWORD *)(a10 + 80), *(_UNKNOWN **)(v166 + 32) != &unk_1C866F1C0)
         ? (v167 = v166 + 24)
         : (v167 = *(_QWORD *)(v166 + 40)),
           (*(_BYTE *)(v167 + 28) & 7) != 3)))
    {
      if (v199
        && v195
        && (v36 == 36 || v36 == 12)
        && ((v168 = *(_QWORD *)(a6 + 80), *(_UNKNOWN **)(v168 + 32) != &unk_1C866F1C0)
          ? (v169 = v168 + 24)
          : (v169 = *(_QWORD *)(v168 + 40)),
            (*(_BYTE *)(v169 + 28) & 7) == 3
         && (v39 == 36 || v39 == 12)
         && ((v170 = *(_QWORD *)(a9 + 80), *(_UNKNOWN **)(v170 + 32) != &unk_1C866F1C0)
           ? (v171 = v170 + 24)
           : (v171 = *(_QWORD *)(v170 + 40)),
             (*(_BYTE *)(v171 + 28) & 7) == 3)))
      {
        v162 = a3;
        v191 = v191 & 0xFFFFFFFF00000000 | v194;
        v172 = v195;
      }
      else
      {
        if (!v199
          || !v198
          || v36 != 36 && v36 != 12
          || ((v173 = *(_QWORD *)(a6 + 80), *(_UNKNOWN **)(v173 + 32) != &unk_1C866F1C0)
            ? (v174 = v173 + 24)
            : (v174 = *(_QWORD *)(v173 + 40)),
              (*(_BYTE *)(v174 + 28) & 7) != 3 || v42 != 36 && v42 != 12))
        {
          v162 = a3;
          goto LABEL_271;
        }
        v175 = *(_QWORD *)(a10 + 80);
        if (*(_UNKNOWN **)(v175 + 32) == &unk_1C866F1C0)
          v176 = *(_QWORD *)(v175 + 40);
        else
          v176 = v175 + 24;
        v162 = a3;
        if ((*(_BYTE *)(v176 + 28) & 7) != 3)
          goto LABEL_271;
        v191 = v191 & 0xFFFFFFFF00000000 | v196;
        v172 = v198;
      }
      v199 = v172;
      goto LABEL_271;
    }
    v162 = a3;
    v100 = v198;
    v163 = v193 & 0xFFFFFFFF00000000 | v196;
  }
LABEL_271:
  v205 = v100;
  v193 = v163;
  v177 = sub_1C612EE00(v100, v163, v199, v191, v195, v194, v198, v196);
  if ((v177 + v54) >= 3)
  {
    if (v199)
    {
      v179 = v193;
      v180 = v205;
      if (v36 == 36 || v36 == 12)
      {
        v181 = *(_QWORD *)(v203 + 80);
        if (*(_UNKNOWN **)(v181 + 32) == &unk_1C866F1C0)
          v182 = *(_QWORD *)(v181 + 40);
        else
          v182 = v181 + 24;
        v183 = v191;
        v179 = v193;
        v178 = v199;
        if ((*(_BYTE *)(v182 + 28) & 7) == 3)
        {
          v178 = 0;
          v183 = v191 & 0xFFFFFFFF00000000;
        }
        v191 = v183;
      }
      else
      {
        v178 = v199;
      }
    }
    else
    {
      v178 = 0;
      v179 = v193;
      v180 = v205;
    }
    v199 = v178;
    v177 = sub_1C612EE00(v180, v179, v178, v191, v195, v194, v198, v196);
  }
  v28 = v177;
  v55 = a2;
  v27 = v162;
LABEL_65:
  v56 = v55 != 1 && (v205 | v199) != 0;
  if ((v210 & 1) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(*a1 + 480) + 281))
      v57 = 1;
    else
      v57 = v56;
  }
  else
  {
    v57 = 0;
  }
  v58 = 0;
  if (v39 <= 34)
  {
    if (v39 != 11)
    {
      if (v39 != 12)
        goto LABEL_88;
      goto LABEL_82;
    }
LABEL_79:
    v59 = *(_QWORD *)(a9 + 80);
    v60 = (llvm::APInt *)(v59 + 24);
    v61 = *(_DWORD *)(v59 + 32);
    if (v61 >= 0x41)
    {
      v184 = v45;
      v64 = v27;
      v65 = v42;
      v66 = v28;
      v67 = v57;
      v68 = llvm::APInt::countLeadingZerosSlowCase(v60);
      v57 = v67;
      v28 = v66;
      v42 = v65;
      v27 = v64;
      v45 = v184;
      if (v68 != v61)
        goto LABEL_81;
    }
    else if (*(_QWORD *)v60)
    {
LABEL_81:
      v58 = 0;
      goto LABEL_88;
    }
    v58 = 1;
    goto LABEL_88;
  }
  if (v39 != 36)
  {
    if (v39 != 35)
      goto LABEL_88;
    goto LABEL_79;
  }
LABEL_82:
  v62 = *(_QWORD *)(a9 + 80);
  if (*(_UNKNOWN **)(v62 + 32) == &unk_1C866F1C0)
    v63 = *(_QWORD *)(v62 + 40);
  else
    v63 = v62 + 24;
  v58 = (*(_BYTE *)(v63 + 28) & 7) == 3;
LABEL_88:
  v69 = 0;
  if (v42 <= 34)
  {
    if (v42 != 11)
    {
      if (v42 != 12)
        goto LABEL_103;
      goto LABEL_97;
    }
LABEL_94:
    v70 = *(_QWORD *)(a10 + 80);
    v71 = (llvm::APInt *)(v70 + 24);
    v72 = *(_DWORD *)(v70 + 32);
    if (v72 >= 0x41)
    {
      v185 = v45;
      v75 = v27;
      v76 = v42;
      v77 = v28;
      v78 = v57;
      v79 = llvm::APInt::countLeadingZerosSlowCase(v71);
      v57 = v78;
      v28 = v77;
      v42 = v76;
      v27 = v75;
      v34 = v203;
      v45 = v185;
      if (v79 != v72)
        goto LABEL_96;
    }
    else if (*(_QWORD *)v71)
    {
LABEL_96:
      v69 = 0;
      goto LABEL_103;
    }
    v69 = 1;
    goto LABEL_103;
  }
  if (v42 != 36)
  {
    if (v42 != 35)
      goto LABEL_103;
    goto LABEL_94;
  }
LABEL_97:
  v73 = *(_QWORD *)(a10 + 80);
  if (*(_UNKNOWN **)(v73 + 32) == &unk_1C866F1C0)
    v74 = *(_QWORD *)(v73 + 40);
  else
    v74 = v73 + 24;
  v69 = (*(_BYTE *)(v74 + 28) & 7) == 3;
LABEL_103:
  if ((v45 + v28) < 3)
    goto LABEL_122;
  if (!v58)
  {
    if (v69)
      goto LABEL_111;
LABEL_122:
    if (v28 == 3)
    {
      v96 = v196;
      v97 = v191;
      if (v198)
      {
        v98 = v27;
        v198 = 0;
        v96 = v196 & 0xFFFFFFFF00000000;
      }
      else if (v195)
      {
        v98 = v27;
        v194 &= 0xFFFFFFFF00000000;
        v195 = 0;
      }
      else if (v199)
      {
        v98 = v27;
        v199 = 0;
        v97 = v191 & 0xFFFFFFFF00000000;
      }
      else
      {
        v98 = v27;
        v199 = 0;
        v99 = v193;
        if (v205)
          v99 = v193 & 0xFFFFFFFF00000000;
        v193 = v99;
        v205 = 0;
      }
    }
    else
    {
      v98 = v27;
      v96 = v196;
      v97 = v191;
    }
    v197 = v96;
    v105 = sub_1C6366AB4(v189, 0, a11, (llvm *)5, 0, 1, 0);
    v107 = v106;
    v190 = sub_1C5D428B0(a1[1], 0, (llvm *)5, 0);
    v186 = v108;
    v222 = v224;
    v224[0] = v105;
    v224[1] = v107;
    v223 = 0xC00000001;
    v109 = v205 | v193;
    v192 = v109 != 0;
    if (v109)
    {
      v110 = v107;
      v224[2] = v205;
      v224[3] = v193;
      v111 = 2;
      LODWORD(v223) = 2;
      v112 = v199;
    }
    else
    {
      *(_QWORD *)&v214 = v105;
      *((_QWORD *)&v214 + 1) = v107;
      v110 = v107;
      v113 = ((_QWORD)a9 != v98 || v188 != DWORD2(a9)) && (v98 != (_QWORD)a10 || v188 != DWORD2(a10));
      if (a5)
        v115 = 2;
      else
        v115 = 0;
      sub_1C47C1164(*a1, v98, v188, (uint64_t)&v221, (uint64_t)&v214, 0, v113, 1, 1, 1, v115);
      v116 = v221;
      v117 = v223;
      if (v223 >= HIDWORD(v223))
      {
        v212 = v221;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v223 + 1, 16);
        v116 = v212;
        v117 = v223;
      }
      *((_OWORD *)v222 + v117) = v116;
      v118 = (v223 + 1);
      LODWORD(v223) = v118;
      v119 = v214;
      v112 = v199;
      if (v118 >= HIDWORD(v223))
      {
        v213 = v214;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v118 + 1, 16);
        v119 = v213;
        LODWORD(v118) = v223;
      }
      *((_OWORD *)v222 + v118) = v119;
      v111 = v223 + 1;
      LODWORD(v223) = v223 + 1;
    }
    v120 = v112 | v97;
    v211 = v120 != 0;
    if (v120)
    {
      if (v111 >= HIDWORD(v223))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v111 + 1, 16);
        v111 = v223;
      }
      v121 = (uint64_t *)((char *)v222 + 16 * v111);
      *v121 = v112;
      v121[1] = v97;
      v122 = v223 + 1;
      LODWORD(v223) = v223 + 1;
      v123 = v197;
    }
    else
    {
      *(_QWORD *)&v214 = v105;
      *((_QWORD *)&v214 + 1) = v110;
      v124 = *(unsigned __int16 *)(v34 + 24);
      if ((v124 == 36 || v124 == 12)
        && ((v125 = *(_QWORD *)(v34 + 80), *(_UNKNOWN **)(v125 + 32) != &unk_1C866F1C0)
          ? (v126 = v125 + 24)
          : (v126 = *(_QWORD *)(v125 + 40)),
            (*(_BYTE *)(v126 + 28) & 7) == 3))
      {
        *(_QWORD *)&v220 = v221;
        DWORD2(v220) = DWORD2(v221);
        *(_QWORD *)&v214 = sub_1C6366AB4(a1[1], 7, a11, (llvm *)5, 0, 1, 0);
        DWORD2(v214) = v127;
      }
      else
      {
        v128 = ((_QWORD)a9 != v34 || v187 != DWORD2(a9)) && (v34 != (_QWORD)a10 || v187 != DWORD2(a10));
        if (v200)
          v130 = 2;
        else
          v130 = 0;
        sub_1C47C1164(*a1, v34, v187, (uint64_t)&v220, (uint64_t)&v214, 0, v128, 1, 1, 1, v130);
      }
      v131 = v220;
      v132 = v223;
      if (v223 >= HIDWORD(v223))
      {
        v206 = v220;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v223 + 1, 16);
        v131 = v206;
        v132 = v223;
      }
      *((_OWORD *)v222 + v132) = v131;
      v133 = (v223 + 1);
      LODWORD(v223) = v133;
      v134 = v214;
      v123 = v197;
      if (v133 >= HIDWORD(v223))
      {
        v207 = v214;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v133 + 1, 16);
        v134 = v207;
        LODWORD(v133) = v223;
      }
      *((_OWORD *)v222 + v133) = v134;
      v122 = v223 + 1;
      LODWORD(v223) = v223 + 1;
    }
    v135 = v195 | v194;
    v136 = v135 != 0;
    if (v135)
    {
      if (v122 >= HIDWORD(v223))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v122 + 1, 16);
        v122 = v223;
      }
      v137 = (uint64_t *)((char *)v222 + 16 * v122);
      *v137 = v195;
      v137[1] = v194;
    }
    else
    {
      *(_QWORD *)&v214 = v105;
      *((_QWORD *)&v214 + 1) = v110;
      sub_1C47C1164(*a1, a9, DWORD2(a9), (uint64_t)&v219, (uint64_t)&v214, 0, 1, 0, 0, 1, 0);
      v138 = v219;
      v139 = v223;
      if (v223 >= HIDWORD(v223))
      {
        v208 = v219;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v223 + 1, 16);
        v138 = v208;
        v139 = v223;
      }
      *((_OWORD *)v222 + v139) = v138;
      v140 = (v223 + 1);
      LODWORD(v223) = v140;
      if (v140 >= HIDWORD(v223))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v140 + 1, 16);
        LODWORD(v140) = v223;
      }
      v141 = (char *)v222 + 16 * v140;
      *v141 = v105;
      v141[1] = v110;
    }
    v142 = v223 + 1;
    LODWORD(v223) = v223 + 1;
    v143 = v198 | v123;
    v144 = v143 != 0;
    if (v143)
    {
      if (v142 >= HIDWORD(v223))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v142 + 1, 16);
        v142 = v223;
      }
      v145 = v192;
      v146 = v190;
      v147 = v186;
      v148 = (uint64_t *)((char *)v222 + 16 * v142);
      *v148 = v198;
      v148[1] = v123;
      v149 = v223 + 1;
      LODWORD(v223) = v223 + 1;
    }
    else
    {
      *(_QWORD *)&v214 = v105;
      *((_QWORD *)&v214 + 1) = v110;
      sub_1C47C1164(*a1, a10, DWORD2(a10), (uint64_t)&v218, (uint64_t)&v214, 0, 1, 0, 0, 1, 0);
      v150 = v218;
      v151 = v223;
      if (v223 >= HIDWORD(v223))
      {
        v209 = v218;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v223 + 1, 16);
        v150 = v209;
        v151 = v223;
      }
      *((_OWORD *)v222 + v151) = v150;
      v152 = (v223 + 1);
      LODWORD(v223) = v152;
      if (v152 >= HIDWORD(v223))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v152 + 1, 16);
        LODWORD(v152) = v223;
      }
      v153 = (char *)v222 + 16 * v152;
      *v153 = v105;
      v153[1] = v110;
      v149 = v223 + 1;
      LODWORD(v223) = v223 + 1;
      v145 = v192;
      v146 = v190;
      v147 = v186;
    }
    if (v149 >= HIDWORD(v223))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v149 + 1, 16);
      v149 = v223;
    }
    v154 = (uint64_t *)((char *)v222 + 16 * v149);
    *v154 = v146;
    v154[1] = v147;
    LODWORD(v223) = v223 + 1;
    sub_1C47F3690(v33[1], (uint64_t)&v222, 0);
    v155 = *(_QWORD *)(v219 + 40) + 16 * DWORD2(v219);
    v156 = *(llvm **)v155;
    v157 = *(_QWORD *)(v155 + 8);
    if (a2 == 1)
    {
      v158 = (char *)&unk_1C6416574;
    }
    else if (a2 == 2)
    {
      v158 = (char *)&unk_1C64165F4;
    }
    else
    {
      v158 = (char *)&unk_1C64165B4;
    }
    v159 = 2;
    if (v145)
      v160 = 2;
    else
      v160 = 0;
    v161 = v160 | v211;
    if (!v136)
      v159 = 0;
    v90 = sub_1C636E56C(v33[1], *(_DWORD *)&v158[(4 * (v159 | v144)) | (16 * v161)], (uint64_t)a11, v156, v157, (uint64_t *)v222, v223);
    if (v222 != v224)
      free(v222);
    return v90;
  }
  if ((v57 & 1) == 0)
  {
    if (v42 == 35 || v42 == 11)
    {
      v80 = *(_QWORD *)(a10 + 80);
      v81 = (llvm::APInt *)(v80 + 24);
      v82 = *(_DWORD *)(v80 + 32);
      if (v82 > 0x40)
      {
        v93 = v27;
        v94 = v28;
        v95 = llvm::APInt::countLeadingZerosSlowCase(v81);
        v28 = v94;
        v27 = v93;
        v83 = v95 == v82 - 1;
      }
      else
      {
        v83 = *(_QWORD *)v81 == 1;
      }
      v92 = v83;
    }
    else
    {
      v92 = 0;
    }
    if (!v92 && !v69)
      goto LABEL_122;
  }
LABEL_111:
  sub_1C47F0474((uint64_t)a1, &v217, (unsigned int *)&v221, (unsigned int *)&v220, (uint64_t *)&v219, (uint64_t *)&v218, v210 & 1);
  v84 = v217;
  v85 = v221;
  v86 = v220;
  v87 = v219;
  v88 = v218;
  v89 = *(unsigned __int8 **)a11;
  v215 = v89;
  if (v89)
    llvm::MetadataTracking::track((uint64_t)&v215, v89, 2);
  v216 = *((_DWORD *)a11 + 2);
  v90 = sub_1C47F238C(a1, v84, v85, *((uint64_t *)&v85 + 1), a5, v86, *((uint64_t *)&v86 + 1), v200, v87, v88, (const llvm::APInt *)&v215);
  if (v215)
    llvm::MetadataTracking::untrack((uint64_t)&v215, v215);
  return v90;
}

_QWORD *sub_1C47F238C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, __int128 a9, __int128 a10, const llvm::APInt *a11)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t ExtendedSizeInBits;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  const llvm::APInt *v35;
  _BOOL4 v36;
  unint64_t v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  _BOOL4 v46;
  __int128 v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  void *v58;
  void *v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  unint64_t v74;
  _BOOL4 v75;
  unsigned int v76;
  unint64_t v77;
  _BOOL4 v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  _BOOL4 v82;
  _BOOL4 v83;
  __int128 v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unsigned int v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  char *v102;
  unint64_t *v103;
  uint64_t v104;
  const char *v105;
  unsigned int v106;
  uint64_t v107;
  __int128 v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t *v123;
  const char *v124;
  int v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  __int128 v133;
  unsigned int v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _BOOL4 v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t *v147;
  int v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  unint64_t v156;
  uint64_t v157;
  unsigned int v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _BOOL4 v162;
  _BOOL4 v163;
  _BOOL4 v164;
  _BOOL4 v165;
  _BOOL4 v166;
  _BOOL4 v167;
  unsigned int v168;
  _BOOL4 v169;
  uint64_t v170;
  _BOOL4 v171;
  _BOOL4 v172;
  _BOOL4 v173;
  int v174;
  int v175;
  unint64_t v176;
  __int128 v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  __int128 v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v185;
  int v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;
  uint64_t v191;
  __int128 v192;
  int v193;
  __int128 v194;
  unint64_t v195;
  unsigned __int8 *v196;
  int v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  _QWORD v205[2];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  void *v209[2];
  _QWORD v210[10];
  void *v211[2];
  _QWORD v212[26];

  v212[24] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v202 = a3;
  *((_QWORD *)&v202 + 1) = a4;
  *(_QWORD *)&v201 = a6;
  *((_QWORD *)&v201 + 1) = a7;
  v200 = a9;
  v199 = a10;
  if (*(_WORD *)(a3 + 24) == 215)
  {
    v14 = *(_QWORD *)(a3 + 32);
    v15 = *(_DWORD *)(v14 + 8);
    *(_QWORD *)&v202 = *(_QWORD *)v14;
    DWORD2(v202) = v15;
  }
  if (*(_WORD *)(a6 + 24) == 215)
  {
    v16 = *(_QWORD *)(a6 + 32);
    v17 = *(_DWORD *)(v16 + 8);
    *(_QWORD *)&v201 = *(_QWORD *)v16;
    DWORD2(v201) = v17;
  }
  v198 = *(_OWORD *)(*(_QWORD *)(a9 + 40) + 16 * DWORD2(a9));
  *(_OWORD *)v211 = *(_OWORD *)(*(_QWORD *)(v202 + 40) + 16 * DWORD2(v202));
  if (LOBYTE(v211[0]))
    sub_1C47A8C74((unsigned __int8 *)v211);
  else
    llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v211);
  if ((_DWORD)v18 == 1)
  *(_OWORD *)v211 = *(_OWORD *)(*(_QWORD *)(v201 + 40) + 16 * DWORD2(v201));
  if (LOBYTE(v211[0]))
    sub_1C47A8C74((unsigned __int8 *)v211);
  else
    llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v211);
  if ((_DWORD)v19 == 1)
  *(_OWORD *)v211 = *(_OWORD *)(*(_QWORD *)(a9 + 40) + 16 * DWORD2(a9));
  if (LOBYTE(v211[0]))
    sub_1C47A8C74((unsigned __int8 *)v211);
  else
    llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v211);
  if ((_DWORD)v20 == 1)
  if ((_BYTE)v198)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v198);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v198);
  v23 = ExtendedSizeInBits;
  if ((_DWORD)v22 == 1)
  v175 = a5;
  v190 = (unint64_t)sub_1C612E5C8(a1[1], v202, DWORD2(v202), a5);
  v25 = v24;
  v183 = (unint64_t)sub_1C612E5C8(a1[1], v201, DWORD2(v201), a8);
  v178 = v26;
  v27 = (unint64_t)sub_1C47E3C48(a1[1], a9, DWORD2(a9), 0);
  v182 = v28;
  v29 = (unint64_t)sub_1C47E3C48(a1[1], a10, DWORD2(a10), 0);
  v180 = v30;
  v31 = *(unsigned __int16 *)(v201 + 24);
  if (v31 == 36 || (v32 = 0, v31 == 12))
  {
    v33 = *(_QWORD *)(v201 + 80);
    if (*(_UNKNOWN **)(v33 + 32) == &unk_1C866F1C0)
      v34 = *(_QWORD *)(v33 + 40);
    else
      v34 = v33 + 24;
    v32 = (*(_BYTE *)(v34 + 28) & 7) == 3;
  }
  v35 = a11;
  if (*(_BYTE *)(*(_QWORD *)(*a1 + 480) + 281))
    v36 = v32;
  else
    v36 = 0;
  v37 = v27 | v182;
  v38 = v37 == 0;
  if (v37)
  {
    v40 = *(_QWORD *)(v27 + 80);
    v41 = (unsigned int *)(v40 + 24);
    if (*(_DWORD *)(v40 + 32) >= 0x41u)
      v41 = *(unsigned int **)v41;
    v42 = *v41;
    if (v42 == 1)
      v43 = 1;
    else
      v43 = 2;
    if (v42)
      v39 = v43;
    else
      v39 = 0;
  }
  else
  {
    v39 = 3;
  }
  v44 = v29 | v30;
  v171 = v44 == 0;
  v176 = v29;
  v193 = v39;
  v179 = a2;
  if (v44)
  {
    v67 = *(_QWORD *)(v29 + 80);
    v68 = (unsigned int *)(v67 + 24);
    if (*(_DWORD *)(v67 + 32) >= 0x41u)
      v68 = *(unsigned int **)v68;
    v69 = *v68;
    if (v69 == 1)
      v45 = 1;
    else
      v45 = 2;
    if (!v69)
      v45 = 0;
    v172 = v39 == 0;
    if (!v39 && v69 == 1)
    {
      v170 = v23;
      v168 = DWORD2(a10);
      v70 = a10;
      v169 = 0;
      v174 = 1;
      v172 = 1;
      v173 = 0;
      goto LABEL_75;
    }
  }
  else
  {
    v172 = v39 == 0;
    v45 = 3;
  }
  v46 = v39 != 1;
  if (v45)
    v46 = 1;
  else
    v36 = 0;
  if (v36)
  {
    v47 = v202;
    v48 = *(unsigned __int8 **)a11;
    v196 = v48;
    if (v48)
    {
      v194 = v202;
      llvm::MetadataTracking::track((uint64_t)&v196, v48, 2);
      v47 = v194;
      v35 = a11;
    }
    v197 = *((_DWORD *)v35 + 2);
    *(_OWORD *)v209 = v47;
    v208 = a9;
    v207 = a10;
    v211[0] = v212;
    v211[1] = (void *)0xC00000000;
    v49 = sub_1C6366AB4(a1[1], 0, (const llvm::APInt *)&v196, (llvm *)5, 0, 1, 0);
    v51 = v50;
    v52 = v211[1];
    if (LODWORD(v211[1]) >= HIDWORD(v211[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, LODWORD(v211[1]) + 1, 16);
      v52 = v211[1];
    }
    v53 = (char *)v211[0] + 16 * v52;
    *v53 = v49;
    v53[1] = v51;
    ++LODWORD(v211[1]);
    v185 = (unint64_t)sub_1C47E3C48(a1[1], a9, DWORD2(a9), 0);
    v191 = v54;
    v195 = (unint64_t)sub_1C47E3C48(a1[1], a10, DWORD2(a10), 0);
    v56 = v55;
    *(_QWORD *)&v206 = v49;
    *((_QWORD *)&v206 + 1) = v51;
    if (v175)
      v57 = 2;
    else
      v57 = 0;
    sub_1C47C1164(*a1, (uint64_t)v209[0], v209[1], (uint64_t)v209, (uint64_t)&v206, 0, 0, 1, 1, 0, v57);
    v58 = v209[0];
    v59 = v209[1];
    v60 = v211[1];
    if (LODWORD(v211[1]) >= HIDWORD(v211[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, LODWORD(v211[1]) + 1, 16);
      v60 = v211[1];
    }
    v61 = (char *)v211[0] + 16 * v60;
    *v61 = v58;
    v61[1] = v59;
    v62 = (LODWORD(v211[1]) + 1);
    LODWORD(v211[1]) = v62;
    v63 = v206;
    if (v62 >= HIDWORD(v211[1]))
    {
      v181 = v206;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v62 + 1, 16);
      v63 = v181;
      LODWORD(v62) = v211[1];
    }
    *((_OWORD *)v211[0] + v62) = v63;
    v64 = ++LODWORD(v211[1]);
    v205[0] = v49;
    v205[1] = v51;
    if (v195 | v56)
    {
      if (v64 >= HIDWORD(v211[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v64 + 1, 16);
        LODWORD(v64) = v211[1];
      }
      v102 = (char *)v211[0] + 16 * v64;
      *(_QWORD *)v102 = v195;
    }
    else
    {
      v204 = *(_OWORD *)(*(_QWORD *)(a10 + 40) + 16 * DWORD2(a10));
      if ((_BYTE)v204)
        v65 = sub_1C47A8C74((unsigned __int8 *)&v204);
      else
        v65 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v204);
      v107 = v65;
      if ((_DWORD)v66 == 1)
      sub_1C47C1164(*a1, a10, DWORD2(a10), (uint64_t)&v207, (uint64_t)v205, 0, v107 != 32, 0, 0, 0, 0);
      v108 = v207;
      v109 = v211[1];
      if (LODWORD(v211[1]) >= HIDWORD(v211[1]))
      {
        v177 = v207;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, LODWORD(v211[1]) + 1, 16);
        v108 = v177;
        v109 = v211[1];
      }
      *((_OWORD *)v211[0] + v109) = v108;
      v110 = (LODWORD(v211[1]) + 1);
      LODWORD(v211[1]) = v110;
      if (v110 >= HIDWORD(v211[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v110 + 1, 16);
        LODWORD(v110) = v211[1];
      }
      v102 = (char *)v211[0] + 16 * v110;
      *(_QWORD *)v102 = v49;
      v56 = v51;
    }
    *((_QWORD *)v102 + 1) = v56;
    v111 = ++LODWORD(v211[1]);
    *(_QWORD *)&v204 = v49;
    *((_QWORD *)&v204 + 1) = v51;
    if (v185 | v191)
    {
      if (v111 >= HIDWORD(v211[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v111 + 1, 16);
        LODWORD(v111) = v211[1];
      }
      v114 = (char *)v211[0] + 16 * v111;
      *(_QWORD *)v114 = v185;
      v51 = v191;
    }
    else
    {
      v203 = *(_OWORD *)(*(_QWORD *)(a9 + 40) + 16 * DWORD2(a9));
      if ((_BYTE)v203)
        v112 = sub_1C47A8C74((unsigned __int8 *)&v203);
      else
        v112 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v203);
      v115 = v112;
      if ((_DWORD)v113 == 1)
      sub_1C47C1164(*a1, a9, DWORD2(a9), (uint64_t)&v208, (uint64_t)&v204, 0, v115 != 32, 0, 0, 0, 0);
      v116 = v208;
      v117 = v211[1];
      if (LODWORD(v211[1]) >= HIDWORD(v211[1]))
      {
        v192 = v208;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, LODWORD(v211[1]) + 1, 16);
        v116 = v192;
        v117 = v211[1];
      }
      *((_OWORD *)v211[0] + v117) = v116;
      v118 = (LODWORD(v211[1]) + 1);
      LODWORD(v211[1]) = v118;
      if (v118 >= HIDWORD(v211[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v118 + 1, 16);
        LODWORD(v118) = v211[1];
      }
      v114 = (char *)v211[0] + 16 * v118;
      *(_QWORD *)v114 = v49;
    }
    *((_QWORD *)v114 + 1) = v51;
    ++LODWORD(v211[1]);
    v119 = sub_1C5D428B0(a1[1], 0, (llvm *)5, 0);
    v121 = v120;
    v122 = v211[1];
    if (LODWORD(v211[1]) >= HIDWORD(v211[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, LODWORD(v211[1]) + 1, 16);
      v122 = v211[1];
    }
    v123 = (uint64_t *)((char *)v211[0] + 16 * v122);
    *v123 = v119;
    v123[1] = v121;
    ++LODWORD(v211[1]);
    sub_1C47F3690(a1[1], (uint64_t)v211, 0);
    v203 = *(_OWORD *)(*(_QWORD *)(v208 + 40) + 16 * DWORD2(v208));
    if ((_BYTE)v203)
      sub_1C47A8C74((unsigned __int8 *)&v203);
    else
      llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v203);
    if ((_DWORD)v124 == 1)
    v125 = sub_1C47C0074(v179);
    v126 = a1[1];
    v127 = (uint64_t *)v211[0];
    v128 = LODWORD(v211[1]);
    v129 = sub_1C636A8B4(v126, v203, *((uint64_t *)&v203 + 1), 172, 0);
    v131 = sub_1C5D61678(v126, v125, (uint64_t)&v196, v129, v130, v127, v128);
    if (v211[0] != v212)
      free(v211[0]);
    if (v196)
      llvm::MetadataTracking::untrack((uint64_t)&v196, v196);
    return v131;
  }
  v169 = v46;
  v173 = v45 != 0;
  v174 = v45;
  v170 = v23;
  v168 = DWORD2(a10);
  v70 = a10;
LABEL_75:
  v71 = sub_1C6366AB4(a1[1], 0, a11, (llvm *)5, 0, 1, 0);
  v73 = v72;
  v211[0] = v212;
  v212[0] = v71;
  v212[1] = v72;
  v211[1] = (void *)0xC00000001;
  *(_QWORD *)&v208 = v71;
  *((_QWORD *)&v208 + 1) = v72;
  v74 = v190 | v25;
  v75 = v74 == 0;
  if (!v74)
  {
    if (v175)
      v76 = 2;
    else
      v76 = 0;
    sub_1C47C1164(*a1, v202, DWORD2(v202), (uint64_t)&v202, (uint64_t)&v208, 0, 0, 1, 1, 0, v76);
  }
  *(_QWORD *)&v207 = v71;
  *((_QWORD *)&v207 + 1) = v73;
  v77 = v183 | v178;
  v78 = v77 == 0;
  if (!v77)
  {
    if (a8)
      v79 = 2;
    else
      v79 = 0;
    sub_1C47C1164(*a1, v201, DWORD2(v201), (uint64_t)&v201, (uint64_t)&v207, 0, 0, 1, 1, 0, v79);
  }
  v80 = v176;
  v81 = v193;
  v82 = v173;
  v83 = v38;
  if (v75)
  {
    v84 = v202;
    v85 = v211[1];
    v86 = DWORD2(a9);
    if (LODWORD(v211[1]) >= HIDWORD(v211[1]))
    {
      v162 = v83;
      v187 = v202;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, LODWORD(v211[1]) + 1, 16);
      v84 = v187;
      v83 = v162;
      v86 = DWORD2(a9);
      v82 = v173;
      v81 = v193;
      v80 = v176;
      v85 = v211[1];
    }
    *((_OWORD *)v211[0] + v85) = v84;
    v87 = (LODWORD(v211[1]) + 1);
    LODWORD(v211[1]) = v87;
    v25 = *((_QWORD *)&v208 + 1);
    v88 = v208;
    if (v87 >= HIDWORD(v211[1]))
    {
      v163 = v83;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v87 + 1, 16);
      v83 = v163;
      v86 = DWORD2(a9);
      v82 = v173;
      v81 = v193;
      v80 = v176;
      LODWORD(v87) = v211[1];
    }
    v89 = (char *)v211[0] + 16 * v87;
    *(_QWORD *)v89 = v88;
  }
  else
  {
    v90 = v211[1];
    v86 = DWORD2(a9);
    if (LODWORD(v211[1]) >= HIDWORD(v211[1]))
    {
      v164 = v83;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, LODWORD(v211[1]) + 1, 16);
      v83 = v164;
      v86 = DWORD2(a9);
      v82 = v173;
      v81 = v193;
      v80 = v176;
      v90 = v211[1];
    }
    v89 = (char *)v211[0] + 16 * v90;
    *(_QWORD *)v89 = v190;
  }
  *((_QWORD *)v89 + 1) = v25;
  v91 = ++LODWORD(v211[1]);
  if (v78)
  {
    v92 = v201;
    if (v91 >= HIDWORD(v211[1]))
    {
      v165 = v83;
      v188 = v201;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v91 + 1, 16);
      v92 = v188;
      v83 = v165;
      v86 = DWORD2(a9);
      v82 = v173;
      v81 = v193;
      v80 = v176;
      LODWORD(v91) = v211[1];
    }
    *((_OWORD *)v211[0] + v91) = v92;
    v93 = (LODWORD(v211[1]) + 1);
    LODWORD(v211[1]) = v93;
    v94 = *((_QWORD *)&v207 + 1);
    v95 = v207;
    if (v93 >= HIDWORD(v211[1]))
    {
      v166 = v83;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v93 + 1, 16);
      v83 = v166;
      v86 = DWORD2(a9);
      v82 = v173;
      v81 = v193;
      v80 = v176;
      LODWORD(v93) = v211[1];
    }
    v96 = (char *)v211[0] + 16 * v93;
    *(_QWORD *)v96 = v95;
    v97 = v183;
  }
  else
  {
    v97 = v183;
    if (v91 >= HIDWORD(v211[1]))
    {
      v167 = v83;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v91 + 1, 16);
      v83 = v167;
      v86 = DWORD2(a9);
      v82 = v173;
      v81 = v193;
      v80 = v176;
      LODWORD(v91) = v211[1];
    }
    v96 = (char *)v211[0] + 16 * v91;
    *(_QWORD *)v96 = v183;
    v94 = v178;
  }
  *((_QWORD *)v96 + 1) = v94;
  v98 = ++LODWORD(v211[1]);
  v99 = v70;
  if (!v169)
  {
LABEL_113:
    if (!v82)
      goto LABEL_180;
    goto LABEL_114;
  }
  if (!v83)
  {
    if (v98 >= HIDWORD(v211[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v98 + 1, 16);
      v82 = v173;
      v81 = v193;
      v80 = v176;
      LODWORD(v98) = v211[1];
    }
    v103 = (unint64_t *)((char *)v211[0] + 16 * v98);
    *v103 = v27;
    v103[1] = v182;
    ++LODWORD(v211[1]);
    goto LABEL_113;
  }
  v209[0] = v71;
  v209[1] = v73;
  v206 = *(_OWORD *)(*(_QWORD *)(a9 + 40) + 16 * DWORD2(a9));
  if ((_BYTE)v206)
    v100 = sub_1C47A8C74((unsigned __int8 *)&v206);
  else
    v100 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v206);
  v132 = v100;
  if ((_DWORD)v101 == 1)
  sub_1C47C1164(*a1, a9, v86, (uint64_t)&v200, (uint64_t)v209, 0, v132 != 32, 0, 0, 0, 0);
  v133 = v200;
  v134 = v211[1];
  if (LODWORD(v211[1]) >= HIDWORD(v211[1]))
  {
    v189 = v200;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, LODWORD(v211[1]) + 1, 16);
    v133 = v189;
    v134 = v211[1];
  }
  *((_OWORD *)v211[0] + v134) = v133;
  v135 = (LODWORD(v211[1]) + 1);
  LODWORD(v211[1]) = v135;
  if (v135 >= HIDWORD(v211[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, v135 + 1, 16);
    LODWORD(v135) = v211[1];
  }
  v136 = (char *)v211[0] + 16 * v135;
  *v136 = v71;
  v136[1] = v73;
  ++LODWORD(v211[1]);
  v80 = v176;
  v81 = v193;
  if (!v173)
    goto LABEL_180;
LABEL_114:
  if (v171)
  {
    v209[0] = v71;
    v209[1] = v73;
    v206 = *(_OWORD *)(*(_QWORD *)(v70 + 40) + 16 * v168);
    if ((_BYTE)v206)
      v104 = sub_1C47A8C74((unsigned __int8 *)&v206);
    else
      v104 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v206);
    v137 = v104;
    if ((_DWORD)v105 == 1)
    sub_1C47C1164(*a1, v70, v168, (uint64_t)&v199, (uint64_t)v209, 0, v137 != 32, 0, 0, 0, 0);
    v99 = v199;
    v106 = DWORD2(v199);
    v80 = v176;
    v81 = v193;
  }
  else
  {
    v106 = v168;
  }
  v139 = (_QWORD)v201 != v99 || DWORD2(v201) != v106;
  if (v97 && v80 && v174)
  {
    if (v97 == v80 && (_DWORD)v178 == (_DWORD)v180)
      goto LABEL_180;
LABEL_172:
    v140 = v172;
    if (v81 == 1)
      v140 = 1;
    if (v140 == 1)
      --LODWORD(v211[1]);
    v142 = 2;
    v141 = 1;
    goto LABEL_182;
  }
  if (v139)
    goto LABEL_172;
LABEL_180:
  v141 = 0;
  v142 = 0;
LABEL_182:
  v186 = v142;
  v143 = sub_1C5D428B0(a1[1], v142, (llvm *)5, 0);
  v145 = v144;
  v146 = v211[1];
  if (LODWORD(v211[1]) >= HIDWORD(v211[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v211, (uint64_t)v212, LODWORD(v211[1]) + 1, 16);
    v146 = v211[1];
  }
  v147 = (uint64_t *)((char *)v211[0] + 16 * v146);
  *v147 = v143;
  v147[1] = v145;
  ++LODWORD(v211[1]);
  sub_1C47F3690(a1[1], (uint64_t)v211, 0);
  v148 = sub_1C47C0074(v179);
  v149 = a1[1];
  v150 = (uint64_t *)v211[0];
  v151 = LODWORD(v211[1]);
  v152 = sub_1C636A8B4(v149, v198, *((uint64_t *)&v198 + 1), 172, 0);
  v154 = sub_1C5D61678(v149, v148, (uint64_t)a11, v152, v153, v150, v151);
  v131 = v154;
  if (v141)
  {
    v209[0] = v210;
    v210[0] = v154;
    v210[1] = 0;
    v157 = *((_QWORD *)&v199 + 1);
    v156 = v199;
    if (!v171)
    {
      v156 = v176;
      v157 = v180;
    }
    v210[2] = v156;
    v210[3] = v157;
    v209[1] = (void *)0x500000002;
    sub_1C47F3690(a1[1], (uint64_t)v209, v186);
    v158 = v209[1];
    if (LODWORD(v209[1]) >= HIDWORD(v209[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v209, (uint64_t)v210, LODWORD(v209[1]) + 1, 16);
      v158 = v209[1];
    }
    v159 = (char *)v209[0] + 16 * v158;
    *v159 = v131;
    v159[1] = 1;
    v160 = ++LODWORD(v209[1]);
    v161 = 2;
    if (v171)
      v161 = 0;
    v131 = sub_1C636E56C(a1[1], dword_1C6416958[v161 | (v170 == 16)], (uint64_t)a11, (llvm *)v198, *((uint64_t *)&v198 + 1), (uint64_t *)v209[0], v160);
    if (v209[0] != v210)
      free(v209[0]);
  }
  if (v211[0] != v212)
    free(v211[0]);
  return v131;
}

uint64_t sub_1C47F3690(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int8 *v17[2];

  v17[0] = 0;
  v17[1] = 0;
  v6 = sub_1C6366AB4(a1, 0, (const llvm::APInt *)v17, (llvm *)5, 0, 1, 0);
  v8 = v7;
  v9 = *(unsigned int *)(a2 + 8);
  if (v9 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 16);
    LODWORD(v9) = *(_DWORD *)(a2 + 8);
  }
  v10 = (_QWORD *)(*(_QWORD *)a2 + 16 * v9);
  *v10 = v6;
  v10[1] = v8;
  ++*(_DWORD *)(a2 + 8);
  if (v17[0])
    llvm::MetadataTracking::untrack((uint64_t)v17, v17[0]);
  result = sub_1C5D428B0(a1, a3, (llvm *)5, 0);
  v12 = result;
  v14 = v13;
  v15 = *(unsigned int *)(a2 + 8);
  if (v15 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v15 + 1, 16);
    LODWORD(v15) = *(_DWORD *)(a2 + 8);
  }
  v16 = (uint64_t *)(*(_QWORD *)a2 + 16 * v15);
  *v16 = v12;
  v16[1] = v14;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1C47F37A0(unsigned __int8 *a1)
{
  int v1;

  v1 = *a1;
  if ((v1 - 94) >= 0x10)
    return ((uint64_t (*)(uint64_t))((char *)&loc_1C47F37B0 + 4 * byte_1C6429ED6[v1 - 15]))(2);
  else
    return 10;
}

uint64_t sub_1C47F37D8()
{
  return 9;
}

uint64_t sub_1C47F37E0()
{
  return 5;
}

uint64_t sub_1C47F37E8()
{
  return 3;
}

uint64_t sub_1C47F37F0()
{
  return 4;
}

uint64_t sub_1C47F37F8()
{
  return 6;
}

uint64_t sub_1C47F3800()
{
  return 11;
}

uint64_t sub_1C47F3808()
{
  return 8;
}

uint64_t sub_1C47F3810()
{
  return 7;
}

uint64_t sub_1C47F381C(unsigned __int8 *a1)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C47F3840 + 4 * byte_1C6429F72[*a1 - 15]))(2048);
}

uint64_t sub_1C47F3840()
{
  return 8;
}

uint64_t sub_1C47F3848()
{
  return 4;
}

uint64_t sub_1C47F3850()
{
  return 2;
}

uint64_t sub_1C47F3858()
{
  return 16;
}

uint64_t sub_1C47F3860()
{
  return 32;
}

uint64_t sub_1C47F3868()
{
  return 64;
}

uint64_t sub_1C47F3870()
{
  return 128;
}

uint64_t sub_1C47F3878()
{
  return 1;
}

uint64_t sub_1C47F3880()
{
  return 256;
}

uint64_t sub_1C47F3888()
{
  return 3;
}

uint64_t sub_1C47F3890()
{
  return 512;
}

uint64_t sub_1C47F3898()
{
  return 1024;
}

uint64_t sub_1C47F38A0()
{
  return 5;
}

uint64_t sub_1C47F38A8()
{
  return 6;
}

uint64_t sub_1C47F38B0()
{
  return 7;
}

uint64_t *sub_1C47F38B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  llvm *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t **v11;
  uint64_t *v12;
  int v13;
  uint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t ExtendedSizeInBits;
  const char *v19;
  char v20;
  unint64_t v21;
  uint64_t *v22;
  _BOOL4 v25;
  int8x8_t *v26;
  int8x8_t *v27;
  unint64_t v28;
  uint8x8_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  int v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  const char *v44;
  unint64_t v45;
  uint8x8_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  uint8x8_t v74;
  unint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t *v89;
  int v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  BOOL v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  __int128 v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  __int128 v139;
  char v140;
  llvm *v141;
  llvm *v142;
  uint64_t *v143;
  _BOOL4 v144;
  _BOOL4 v145;
  __int128 v146;
  unsigned __int8 *v147;
  int v148;
  unsigned __int8 *v149;
  int v150;
  __int128 v151;
  _QWORD v152[4];

  v152[2] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(llvm **)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(unsigned __int8 **)(a2 + 64);
  v147 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v147, v10, 2);
  v148 = *(_DWORD *)(a2 + 60);
  if ((v8 == 6) != (v8 != 5))
    goto LABEL_17;
  v11 = *(uint64_t ***)(a2 + 32);
  v12 = v11[5];
  v13 = *((unsigned __int16 *)v12 + 12);
  if (v13 != 35 && v13 != 11)
    goto LABEL_17;
  v15 = *v11;
  v16 = (unint64_t)v11[1];
  v17 = *(_OWORD *)((*v11)[5] + 16 * v16);
  v146 = v17;
  if ((v15[3] & 0xFFFE) == 0xC6)
  {
    v146 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v15[4] + 40) + 16 * *(unsigned int *)(v15[4] + 8));
    if ((_BYTE)v146)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v146);
    else
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v146);
    v21 = ExtendedSizeInBits;
    if ((_DWORD)v19 == 1)
    if (v21 < 0x11)
    {
LABEL_17:
      v22 = 0;
      goto LABEL_18;
    }
    v20 = v146;
  }
  else
  {
    v20 = v17;
  }
  v25 = v8 == 6 && v20 == 5;
  v26 = (int8x8_t *)v12[10];
  v27 = v26 + 3;
  if (v26[4].i32[0] >= 0x41u)
    v27 = (int8x8_t *)*v27;
  v28 = (unint64_t)*v27;
  v29 = (uint8x8_t)vcnt_s8(*v27);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] == 1)
  {
    v80 = sub_1C6366AB4(a3, 63 - __clz(v28), (const llvm::APInt *)&v147, (llvm *)5, 0, 0, 0);
    v83 = *(_QWORD *)(a3 + 832);
    if (v83)
      LOWORD(v83) = *(_WORD *)(v83 + 8);
    v22 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v147, v8, v9, (uint64_t)v15, v16, v82, (uint64_t)v80, v81, v83);
  }
  else
  {
    v151 = *(_OWORD *)*(_QWORD *)(a2 + 40);
    v30 = *(unsigned __int8 **)(a2 + 64);
    v149 = v30;
    if (v30)
      llvm::MetadataTracking::track((uint64_t)&v149, v30, 2);
    v150 = *(_DWORD *)(a2 + 60);
    if (a4)
    {
      v31 = 0;
      while (1)
      {
        v32 = byte_1C642A058[v31];
        v33 = v28 / v32;
        if (!(v28 % v32))
          break;
        if (++v31 == 4)
          goto LABEL_37;
      }
      LODWORD(v34) = 0;
      v152[0] = byte_1C642A058[v31];
      v152[1] = v28 / v32;
      v37 = v33 != 1 && v25;
      v22 = 0;
      if (v28 < v32 || v37)
        goto LABEL_38;
      if ((v33 & (v33 - 1)) != 0)
      {
        v79 = 0;
        while (v33 != byte_1C642A058[v79])
        {
          if (++v79 == 4)
            goto LABEL_37;
        }
      }
      v38 = 0;
      v39 = 0;
      v34 = v16;
      v22 = v15;
      v144 = v25;
      while (1)
      {
        v40 = v16;
        v41 = v38;
        v42 = v152[v39];
        if (!v42)
          goto LABEL_59;
        if (v42 != 1)
          break;
        v16 = v40;
        v25 = v144;
LABEL_79:
        v38 = 1;
        v39 = 1;
        if ((v41 & 1) != 0)
          goto LABEL_38;
      }
      if ((v42 & (v42 - 1)) != 0)
      {
LABEL_59:
        v45 = v42 - 1;
        v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
        v46.i16[0] = vaddlv_u8(v46);
        if (v46.u32[0] != 1)
          llvm::llvm_unreachable_internal((llvm *)"Invalid multiply factor", 0, 0);
        v140 = v38;
        if ((_BYTE)v151)
          v47 = sub_1C47A8C74((unsigned __int8 *)&v151);
        else
          v47 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v151);
        v49 = v47;
        if ((_DWORD)v48 == 1)
        v50 = 63 - __clz(v45);
        if (v49 <= v50)
        {
LABEL_94:
          LODWORD(v34) = 0;
          v22 = 0;
          v16 = v40;
          v25 = v144;
          goto LABEL_38;
        }
        v51 = v151;
        v52 = sub_1C6366AB4(a3, v50, (const llvm::APInt *)&v149, (llvm *)5, 0, 0, 0);
        v55 = *(_QWORD *)(a3 + 832);
        if (v55)
          LOWORD(v55) = *(_WORD *)(v55 + 8);
        v56 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v149, (llvm *)v51, *((uint64_t *)&v51 + 1), (uint64_t)v22, v34, v54, (uint64_t)v52, v53, v55);
        v59 = *(_QWORD *)(a3 + 832);
        if (v59)
          LOWORD(v59) = *(_WORD *)(v59 + 8);
        v16 = v40;
        v22 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v149, (llvm *)v151, *((uint64_t *)&v151 + 1), (uint64_t)v22, v34, v58, (uint64_t)v56, v57, v59);
        v34 = v34 & 0xFFFFFFFF00000000 | v60;
      }
      else
      {
        v140 = v38;
        if ((_BYTE)v151)
          v43 = sub_1C47A8C74((unsigned __int8 *)&v151);
        else
          v43 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v151);
        v61 = v43;
        if ((_DWORD)v44 == 1)
        v62 = 63 - __clz(v42);
        if (v61 <= v62)
          goto LABEL_94;
        v63 = v151;
        v64 = sub_1C6366AB4(a3, v62, (const llvm::APInt *)&v149, (llvm *)5, 0, 0, 0);
        v67 = *(_QWORD *)(a3 + 832);
        if (v67)
          LOWORD(v67) = *(_WORD *)(v67 + 8);
        v22 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v149, (llvm *)v63, *((uint64_t *)&v63 + 1), (uint64_t)v22, v34, v66, (uint64_t)v64, v65, v67);
        v34 = v34 & 0xFFFFFFFF00000000 | v68;
        v16 = v40;
      }
      v25 = v144;
      v41 = v140;
      goto LABEL_79;
    }
LABEL_37:
    LODWORD(v34) = 0;
    v22 = 0;
LABEL_38:
    if (v149)
      llvm::MetadataTracking::untrack((uint64_t)&v149, v149);
    if (!v22 && !(_DWORD)v34)
    {
      v139 = *(_OWORD *)*(_QWORD *)(a2 + 40);
      v151 = v139;
      v35 = *(unsigned __int8 **)(a2 + 64);
      v149 = v35;
      if (v35)
        llvm::MetadataTracking::track((uint64_t)&v149, v35, 2);
      v150 = *(_DWORD *)(a2 + 60);
      if (v25)
      {
        v36 = 0;
        v22 = 0;
      }
      else
      {
        v145 = v25;
        v69 = v16;
        v70 = 0;
        while (1)
        {
          v71 = byte_1C642A060[v70];
          if ((int)v71 >= 0)
            LOBYTE(v72) = byte_1C642A060[v70];
          else
            v72 = -(int)v71;
          if ((a4 & 1) == 0 && v72 != 1)
            goto LABEL_108;
          v73 = v28 - v71;
          v74 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
          v74.i16[0] = vaddlv_u8(v74);
          if (v73 && v74.u32[0] <= 1uLL)
            break;
          if (++v70 == 10)
            goto LABEL_108;
        }
        v76 = 63 - __clz(v73);
        if ((_BYTE)v139)
          v77 = sub_1C47A8C74((unsigned __int8 *)&v151);
        else
          v77 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v151);
        v84 = v77;
        if ((_DWORD)v78 == 1)
        if (v84 <= v76)
        {
LABEL_108:
          v36 = 0;
          v22 = 0;
          v16 = v69;
          goto LABEL_109;
        }
        v114 = *((_QWORD *)&v151 + 1);
        v142 = (llvm *)v151;
        v115 = sub_1C6366AB4(a3, v76, (const llvm::APInt *)&v149, (llvm *)5, 0, 0, 0);
        v118 = *(_QWORD *)(a3 + 832);
        if (v118)
          LOWORD(v118) = *(_WORD *)(v118 + 8);
        v119 = v69;
        v120 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v149, v142, v114, (uint64_t)v15, v69, v117, (uint64_t)v115, v116, v118);
        v123 = v122;
        v124 = v15;
        if (v72 >= 2u)
        {
          v143 = v120;
          v133 = v151;
          v134 = sub_1C6366AB4(a3, __clz(v72) ^ 0x1F, (const llvm::APInt *)&v149, (llvm *)5, 0, 0, 0);
          v137 = *(_QWORD *)(a3 + 832);
          if (v137)
            LOWORD(v137) = *(_WORD *)(v137 + 8);
          v124 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v149, (llvm *)v133, *((uint64_t *)&v133 + 1), (uint64_t)v15, v69, v136, (uint64_t)v134, v135, v137);
          v119 = v69 & 0xFFFFFFFF00000000 | v138;
          v120 = v143;
        }
        if (((0x155uLL >> v70) & 1) != 0)
          v125 = 56;
        else
          v125 = 57;
        v126 = *(_QWORD *)(a3 + 832);
        if (v126)
          LOWORD(v126) = *(_WORD *)(v126 + 8);
        v16 = v69;
        v22 = sub_1C5D56C70(a3, v125, (const llvm::APInt *)&v149, (llvm *)v151, *((uint64_t *)&v151 + 1), (uint64_t)v120, v123, v121, (uint64_t)v124, v119, v126);
        v36 = v127;
LABEL_109:
        v25 = v145;
      }
      if (v149)
        llvm::MetadataTracking::untrack((uint64_t)&v149, v149);
      if (!v22 && !v36)
      {
        v85 = v25;
        v86 = *(_QWORD *)(a2 + 40);
        v87 = *(_QWORD *)(v86 + 8);
        v141 = *(llvm **)v86;
        v88 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v151 = v88;
        if (v88)
          llvm::MetadataTracking::track((uint64_t)&v151, v88, 2);
        v89 = 0;
        v90 = 0;
        DWORD2(v151) = *(_DWORD *)(a2 + 60);
        if (v28 <= 0x21 && !v85 && a4)
        {
          v91 = 0;
          v92 = 0;
          do
          {
            v93 = 0;
            while (1)
            {
              v94 = byte_1C642A05C[v93];
              v95 = (v94 + byte_1C642A060[v91]);
              if ((int)v95 >= 1 && v28 == v95)
                break;
              if (++v93 == 4)
              {
                v94 = 0;
                goto LABEL_128;
              }
            }
            v92 = byte_1C642A060[v91];
LABEL_128:
            if (v91 > 8)
              break;
            ++v91;
          }
          while (!v94);
          if (v94)
          {
            v98 = sub_1C6366AB4(a3, 63 - __clz(v94 - 1), (const llvm::APInt *)&v151, (llvm *)5, 0, 0, 0);
            v101 = *(_QWORD *)(a3 + 832);
            if (v101)
              LOWORD(v101) = *(_WORD *)(v101 + 8);
            v102 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v151, v141, v87, (uint64_t)v15, v16, v100, (uint64_t)v98, v99, v101);
            v105 = *(_QWORD *)(a3 + 832);
            if (v105)
              LOWORD(v105) = *(_WORD *)(v105 + 8);
            v107 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v151, v141, v87, (uint64_t)v15, v16, v104, (uint64_t)v102, v103, v105);
            v109 = v108;
            if (v92 >= 0)
              v110 = v92;
            else
              v110 = -v92;
            if (v110 >= 2)
            {
              v128 = sub_1C6366AB4(a3, __clz(v110) ^ 0x1F, (const llvm::APInt *)&v151, (llvm *)5, 0, 0, 0);
              v131 = *(_QWORD *)(a3 + 832);
              if (v131)
                LOWORD(v131) = *(_WORD *)(v131 + 8);
              v15 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v151, v141, v87, (uint64_t)v15, v16, v130, (uint64_t)v128, v129, v131);
              v16 = v16 & 0xFFFFFFFF00000000 | v132;
            }
            if (v92 > 0)
              v111 = 56;
            else
              v111 = 57;
            v112 = *(_QWORD *)(a3 + 832);
            if (v112)
              LOWORD(v112) = *(_WORD *)(v112 + 8);
            v89 = sub_1C5D56C70(a3, v111, (const llvm::APInt *)&v151, v141, v87, (uint64_t)v107, v109, v106, (uint64_t)v15, v16, v112);
            v90 = v113;
          }
          else
          {
            v90 = 0;
            v89 = 0;
          }
        }
        if ((_QWORD)v151)
          llvm::MetadataTracking::untrack((uint64_t)&v151, (unsigned __int8 *)v151);
        if (v89)
          v97 = 0;
        else
          v97 = v90 == 0;
        if (v97)
          v22 = 0;
        else
          v22 = v89;
      }
    }
  }
LABEL_18:
  if (v147)
    llvm::MetadataTracking::untrack((uint64_t)&v147, v147);
  return v22;
}

_QWORD *sub_1C47F4260(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  __int128 *v21;
  _QWORD *v22;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[10];

  v30[8] = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 **)(a1 + 64);
  v26 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v26, v10, 2);
  v27 = *(_DWORD *)(a1 + 60);
  v28 = v30;
  v29 = 0x400000000;
  if (a4)
  {
    v11 = 0;
    do
    {
      v12 = sub_1C6366AB4(a3, v11, (const llvm::APInt *)&v26, (llvm *)5, 0, 0, 0);
      v15 = *(_QWORD *)(a3 + 832);
      if (v15)
        LOWORD(v15) = *(_WORD *)(v15 + 8);
      v16 = sub_1C5D56C70(a3, 148, (const llvm::APInt *)&v26, (llvm *)a5, 0, a1, a2, v14, (uint64_t)v12, v13, v15);
      v18 = v17;
      v19 = v29;
      if (v29 >= (unint64_t)HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v29 + 1, 16);
        v19 = v29;
      }
      v20 = (uint64_t **)((char *)v28 + 16 * v19);
      *v20 = v16;
      v20[1] = v18;
      LODWORD(v29) = v29 + 1;
      ++v11;
    }
    while (a4 != v11);
    v21 = (__int128 *)v28;
  }
  else
  {
    v21 = (__int128 *)v30;
  }
  v24 = v26;
  if (v26)
    llvm::MetadataTracking::track((uint64_t)&v24, v26, 2);
  v25 = v27;
  v22 = sub_1C4852770(v21, a4, a5, a3, (const llvm::APInt *)&v24);
  if (v24)
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  if (v28 != v30)
    free(v28);
  if (v26)
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
  return v22;
}

uint64_t sub_1C47F4460(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7, unint64_t a8, uint64_t *a9, char a10, unsigned __int8 a11, char a12)
{
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t *v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm *v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unsigned int v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  unsigned int v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  unsigned int v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t **v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  int v108;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  unsigned __int8 *v127;
  int v128;

  v20 = a11;
  v21 = *(unsigned __int8 **)(a2 + 64);
  v127 = v21;
  if (v21)
    llvm::MetadataTracking::track((uint64_t)&v127, v21, 2);
  v128 = *(_DWORD *)(a2 + 60);
  if (a10)
  {
    v22 = *(_QWORD *)(a5 + 48);
    if (!v22)
      goto LABEL_147;
    v23 = 1;
    do
    {
      if (*(_DWORD *)(v22 + 8) == a6)
      {
        if (!v23)
          goto LABEL_147;
        --v23;
      }
      v22 = *(_QWORD *)(v22 + 32);
    }
    while (v22);
    if (v23)
      goto LABEL_147;
    if (*(_WORD *)(a5 + 24) == 222)
    {
      v24 = *(_DWORD **)(a5 + 32);
      a5 = *(_QWORD *)v24;
      v25 = *(_QWORD *)(*(_QWORD *)v24 + 48);
      if (!v25)
        goto LABEL_147;
      v20 = a11 ^ 1;
      a6 = v24[2];
      v26 = 1;
      do
      {
        if (*(_DWORD *)(v25 + 8) == a6)
        {
          if (!v26)
            goto LABEL_147;
          --v26;
        }
        v25 = *(_QWORD *)(v25 + 32);
      }
      while (v25);
      if (v26)
        goto LABEL_147;
    }
  }
  else if (*(_WORD *)(a5 + 24) == 222)
  {
    v27 = *(uint64_t **)(a5 + 32);
    a5 = *v27;
    a6 = *((_DWORD *)v27 + 2);
    v20 = a11 ^ 1;
  }
  v28 = a9[2];
  if ((*(_WORD *)(*(_QWORD *)v28 + 1020) & 1) != 0)
  {
    while (1)
    {
      v48 = *(unsigned __int16 *)(a5 + 24);
      if (v48 != 215 && v48 != 212)
        break;
      v49 = *(uint64_t **)(a5 + 32);
      a5 = *v49;
      a6 = *((_DWORD *)v49 + 2);
      if (a10)
      {
        v50 = *(_QWORD *)(a5 + 48);
        if (!v50)
          goto LABEL_147;
        v51 = 1;
        do
        {
          if (*(_DWORD *)(v50 + 8) == a6)
          {
            if (!v51)
              goto LABEL_147;
            --v51;
          }
          v50 = *(_QWORD *)(v50 + 32);
        }
        while (v50);
        if (v51)
          goto LABEL_147;
      }
    }
  }
  v123 = a4;
  if (*(_BYTE *)(*(_QWORD *)(a5 + 40) + 16 * a6) == 10
    || (v29 = a4, v30 = (uint64_t)a3, *(_BYTE *)(a7[5] + 16 * a8) == 10))
  {
    v29 = 0;
    v30 = 10;
  }
  v31 = *(unsigned __int16 *)(a5 + 24);
  if (v31 == 96)
  {
    if (*((_WORD *)a7 + 12) == 98)
      goto LABEL_147;
    v52 = *(_QWORD *)(a5 + 32);
    v33 = *(uint64_t **)v52;
    if (*(_QWORD *)v52 != *(_QWORD *)(v52 + 40))
      goto LABEL_147;
    v117 = a1;
    v34 = *(_DWORD *)(v52 + 8);
    if (v34 != *(_DWORD *)(v52 + 48))
      goto LABEL_147;
    v35 = sub_1C5D404C4(v28, (const llvm::APInt *)&v127, v30, v29, 0, 2.0);
    v36 = v53;
  }
  else
  {
    v117 = a1;
    if (v31 != 98)
    {
      v54 = 0;
      if (v31 != 192 || !a12 || !a10)
        goto LABEL_148;
      v55 = *(uint64_t **)(a5 + 32);
      v56 = *v55;
      v57 = v55[1];
      v59 = v55[5];
      v58 = v55[6];
      v60 = v55[10];
      v61 = v55[15];
      v62 = v55[16];
      v63 = *(_DWORD *)(v55[20] + 76);
      v64 = *(unsigned __int16 *)(v61 + 24);
      v65 = v64 == 36 || v64 == 12;
      if (v65
        && ((v66 = *(_QWORD *)(v61 + 80), *(_UNKNOWN **)(v66 + 32) == &unk_1C866F1C0)
          ? (v67 = *(_QWORD *)(v66 + 40))
          : (v67 = v66 + 24),
            (*(_BYTE *)(v67 + 28) & 7) == 3))
      {
        v121 = v55[6];
        v105 = v55[11];
        v124 = 0;
        v125 = 0;
        *(_WORD *)((char *)&v115 + 1) = v20;
        LOBYTE(v115) = 1;
        v54 = sub_1C47F4460(&v124, a2, a3, v123, v60, v105, a7, a8, a9, v115);
        if (!(_DWORD)v54)
          goto LABEL_148;
        v106 = sub_1C47DF81C((_QWORD *)a9[2], (const llvm::APInt *)&v127, v56, v57, v59, v121, v124, v125, (uint64_t)a7, a8, SHIDWORD(a8), v63);
      }
      else
      {
        v108 = *(unsigned __int16 *)(v60 + 24);
        if (v108 != 36 && v108 != 12)
          goto LABEL_147;
        v110 = *(_QWORD *)(v60 + 80);
        v111 = *(_UNKNOWN **)(v110 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v110 + 40) : v110 + 24;
        if ((*(_BYTE *)(v111 + 28) & 7) != 3)
          goto LABEL_147;
        v122 = v58;
        v124 = 0;
        v125 = 0;
        *(_WORD *)((char *)&v115 + 1) = v20;
        LOBYTE(v115) = 1;
        v54 = sub_1C47F4460(&v124, a2, a3, v123, v61, v62, a7, a8, a9, v115);
        if (!(_DWORD)v54)
          goto LABEL_148;
        v106 = sub_1C47DF81C((_QWORD *)a9[2], (const llvm::APInt *)&v127, v56, v57, v59, v122, (uint64_t)a7, a8, v124, v125, v126, v63);
      }
      *(_QWORD *)v117 = v106;
      *(_DWORD *)(v117 + 8) = v107;
      goto LABEL_148;
    }
    v32 = *(_QWORD *)(a5 + 32);
    v33 = *(uint64_t **)v32;
    v34 = *(_DWORD *)(v32 + 8);
    v35 = *(uint64_t **)(v32 + 40);
    v36 = *(unsigned int *)(v32 + 48);
  }
  v118 = v34;
  v116 = v35;
  v37 = v33 == v35 && v34 == (_DWORD)v36;
  if (v37 || v33 == a7 && v34 == (_DWORD)a8 || v35 == a7 && (_DWORD)v36 == (_DWORD)a8)
    goto LABEL_37;
  v104 = *((unsigned __int16 *)v33 + 12);
  if (v104 > 0xD3)
  {
    if (v104 != 395 && (v104 != 212 || *(_WORD *)(*(_QWORD *)v33[4] + 24) != 395))
      goto LABEL_37;
  }
  else if (v104 != 12 && v104 != 36)
  {
    goto LABEL_37;
  }
  v112 = *((unsigned __int16 *)v35 + 12);
  if (v112 > 0xD3)
  {
    if (v112 != 395 && (v112 != 212 || *(_WORD *)(*(_QWORD *)v35[4] + 24) != 395))
      goto LABEL_37;
  }
  else if (v112 != 12 && v112 != 36)
  {
    goto LABEL_37;
  }
  v54 = 0;
  v113 = *((unsigned __int16 *)a7 + 12);
  if (v113 <= 0xD3)
  {
    if (v113 == 12 || v113 == 36)
      goto LABEL_148;
    goto LABEL_37;
  }
  if (v113 == 395)
    goto LABEL_148;
  if (v113 == 212 && *(_WORD *)(*(_QWORD *)a7[4] + 24) == 395)
  {
LABEL_147:
    v54 = 0;
    goto LABEL_148;
  }
LABEL_37:
  v120 = v36;
  v38 = *(_QWORD *)(a5 + 48);
  if (v38)
  {
    v39 = 2;
    v40 = v38;
    do
    {
      if (!*(_DWORD *)(v40 + 8))
      {
        if (!v39)
          goto LABEL_47;
        --v39;
      }
      v40 = *(_QWORD *)(v40 + 32);
    }
    while (v40);
    if (!v39)
    {
      do
      {
        v41 = *(_QWORD *)(v38 + 16);
        if (v41 != a2)
          sub_1C5C5B004(*a9, v41);
        v38 = *(_QWORD *)(v38 + 32);
      }
      while (v38);
    }
  }
LABEL_47:
  if (v20)
  {
    v42 = a9[2];
    v43 = v33[5] + 16 * v118;
    v44 = *(llvm **)v43;
    v45 = *(_QWORD *)(v43 + 8);
    v46 = *(_QWORD *)(v42 + 832);
    if (v46)
      v47 = *(_WORD *)(v46 + 8);
    else
      v47 = 0;
    v69 = v116;
    v68 = v117;
    v33 = sub_1C5D52060(v42, 222, (const llvm::APInt *)&v127, v44, v45, (uint64_t)v33, v118, v47);
    v70 = v71;
  }
  else
  {
    v69 = v116;
    v68 = v117;
    v70 = v118;
  }
  v72 = (unsigned __int8 *)(v33[5] + 16 * v70);
  v73 = *v72;
  if (v73 != v30 || ((v74 = *((_QWORD *)v72 + 1), !v73) ? (v75 = v29 == v74) : (v75 = 1), !v75))
  {
    v76 = a9[2];
    v77 = *(_QWORD *)(v76 + 832);
    if (v77)
      v78 = *(_WORD *)(v77 + 8);
    else
      v78 = 0;
    v33 = sub_1C5D52060(v76, 215, (const llvm::APInt *)&v127, (llvm *)v30, v29, (uint64_t)v33, v70, v78);
    v70 = v79;
  }
  v80 = (unsigned __int8 *)(v69[5] + 16 * v120);
  v119 = v70;
  if (*v80 != v30 || !(_BYTE)v30 && v29 != *((_QWORD *)v80 + 1))
  {
    v81 = a9[2];
    v82 = *(_QWORD *)(v81 + 832);
    if (v82)
      v83 = *(_WORD *)(v82 + 8);
    else
      v83 = 0;
    v69 = sub_1C5D52060(v81, 215, (const llvm::APInt *)&v127, (llvm *)v30, v29, (uint64_t)v69, v120, v83);
    v120 = v84;
  }
  v85 = (unsigned __int8 *)(a7[5] + 16 * a8);
  if (*v85 == v30 && ((_BYTE)v30 || v29 == *((_QWORD *)v85 + 1)))
  {
    v90 = a8;
  }
  else
  {
    v86 = a9[2];
    v87 = *(_QWORD *)(v86 + 832);
    if (v87)
      v88 = *(_WORD *)(v87 + 8);
    else
      v88 = 0;
    a7 = sub_1C5D52060(v86, 215, (const llvm::APInt *)&v127, (llvm *)v30, v29, (uint64_t)a7, a8, v88);
    v90 = v89;
  }
  v91 = a9[2];
  v92 = v90 | a8 & 0xFFFFFFFF00000000;
  v93 = *(_QWORD *)(v91 + 832);
  if (v93)
    LOWORD(v93) = *(_WORD *)(v93 + 8);
  v94 = sub_1C5D58E08(v91, (const char *)0x8D, (const llvm::APInt *)&v127, (llvm *)v30, v29, (uint64_t)v33, v119, a8, (uint64_t)v69, v120, (uint64_t)a7, v92, SHIDWORD(v92), v93);
  *(_QWORD *)v68 = v94;
  v95 = (uint64_t **)v68;
  *(_DWORD *)(v68 + 8) = v96;
  if (v30 != a3 || (v54 = 1, !(_BYTE)v30) && v29 != v123)
  {
    v97 = a9[2];
    v98 = (unint64_t)v95[1];
    v99 = sub_1C6366AB4(v97, 0, (const llvm::APInt *)&v127, (llvm *)5, 0, 0, 0);
    v102 = *(_QWORD *)(v97 + 832);
    if (v102)
      LOWORD(v102) = *(_WORD *)(v102 + 8);
    *v95 = sub_1C5D56C70(v97, 212, (const llvm::APInt *)&v127, a3, v123, (uint64_t)v94, v98, v101, (uint64_t)v99, v100, v102);
    *((_DWORD *)v95 + 2) = v103;
    v54 = 1;
  }
LABEL_148:
  if (v127)
    llvm::MetadataTracking::untrack((uint64_t)&v127, v127);
  return v54;
}

_QWORD *sub_1C47F4C2C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;

  if (!*(_BYTE *)(a1 + 2))
    return *(_QWORD **)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
  v6 = *(_QWORD *)(v4 + 80);
  v7 = (uint64_t *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u)
    v7 = (uint64_t *)*v7;
  v8 = *v7;
  v9 = *(unsigned __int8 **)(v4 + 64);
  v10 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v10, v9, 2);
  v11 = *(_DWORD *)(v4 + 60);
  v2 = sub_1C6366AB4(v5, v8, (const llvm::APInt *)&v10, *(llvm **)(a1 + 48), *(_QWORD *)(a1 + 56), 1, 0);
  if (v10)
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  return v2;
}

uint64_t *sub_1C47F4CEC(_QWORD *a1, const llvm::APInt *a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];
  char v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a10)
  {
    if (a13)
      v26 = 139;
    else
      v26 = 138;
    v36[0] = (uint64_t)a3;
    v36[1] = a4;
    v37 = 1;
    v38 = 0;
    v28 = a10;
    v29 = a11;
    v30 = a5;
    v31 = a6;
    v32 = a7;
    v33 = a8;
    v34 = sub_1C6367818(a1, a9);
    v35 = v27;
    return sub_1C6366344((uint64_t)a1, (const char *)v26, a2, v36, 2, &v28, 4);
  }
  else
  {
    v21 = sub_1C6367818(a1, a9);
    v24 = a1[104];
    if (v24)
      LOWORD(v24) = *(_WORD *)(v24 + 8);
    return sub_1C5D58E08((uint64_t)a1, (const char *)0xC1, a2, a3, a4, a5, a6, v23, a7, a8, v21, v22, SHIDWORD(v22), v24);
  }
}

uint64_t sub_1C47F4E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  llvm::GlobalValue *v20;
  uint64_t v21;
  uint64_t NamedMetadata;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::GlobalValue *Section;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t *v38;
  uint64_t *v39;
  int v40;
  int v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  __int16 v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  llvm::GlobalValue *v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  __int16 v102;
  unsigned int v103;
  unint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unsigned int v113;
  uint64_t v114;
  unsigned __int8 *v115;
  int v116;
  _QWORD v117[4];
  __int16 v118;

  v6 = *(unsigned __int8 **)(a2 + 64);
  v115 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v115, v6, 2);
  v116 = *(_DWORD *)(a2 + 60);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_DWORD *)(*(_QWORD *)v7 + 8) >> 8;
  if (v8 != 64 && v8 != 3)
  {
    if (*(_BYTE *)(v7 + 16) == 3 && (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 0)
    {
      v49 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 344);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 176))(v49, 24))
      {
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v49 + 128))(v117, v49, 24);
        v50 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v117[0] + 32))(v117[0]);
        v114 = v117[0];
        v117[0] = 0;
        if (v114)
          (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
      }
      else
      {
        v50 = 0;
      }
      v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 400))(v49, v50);
      v53 = v52;
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 336))(v49);
      v55 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 24))(v54, v53) * v51;
      v57 = sub_1C6366AB4(a3, v55, (const llvm::APInt *)&v115, (llvm *)5, 0, 0, 0);
      v58 = 0;
      v59 = *(_QWORD *)(a3 + 832);
      if (v59)
        v58 = *(_WORD *)(v59 + 8);
      v60 = sub_1C5D52060(a3, 395, (const llvm::APInt *)&v115, (llvm *)5, 0, (uint64_t)v57, v56, v58);
      v62 = v61;
      v64 = sub_1C6366AB4(a3, (v55 + 4), (const llvm::APInt *)&v115, (llvm *)5, 0, 0, 0);
      v65 = *(_QWORD *)(a3 + 832);
      if (v65)
        v66 = *(_WORD *)(v65 + 8);
      else
        v66 = 0;
      v87 = sub_1C5D52060(a3, 395, (const llvm::APInt *)&v115, (llvm *)5, 0, (uint64_t)v64, v63, v66);
      v89 = v88;
      v90 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 344);
      v91 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 400))(v90, *(_QWORD *)(a2 + 80));
      v93 = v92;
      v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 336))(v90);
      v96 = *(_DWORD *)(a2 + 88)
          + (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 24))(v94, v93) * v91;
      v97 = *(_QWORD *)(a3 + 832);
      if (v97)
        LOWORD(v97) = *(_WORD *)(v97 + 8);
      v99 = sub_1C5D56C70(a3, 146, (const llvm::APInt *)&v115, (llvm *)0x31, 0, (uint64_t)v60, v62, v95, (uint64_t)v87, v89, v97);
      v100 = v98;
      v101 = *(_QWORD *)(a3 + 832);
      if (v101)
        v102 = *(_WORD *)(v101 + 8);
      else
        v102 = 0;
      v10 = (uint64_t)sub_1C5D52060(a3, 216, (const llvm::APInt *)&v115, (llvm *)6, 0, (uint64_t)v99, v98, v102);
      v104 = v100 & 0xFFFFFFFF00000000 | v103;
      if ((_DWORD)v96)
      {
        v105 = sub_1C6366AB4(a3, v96, (const llvm::APInt *)&v115, (llvm *)6, 0, 0, 0);
        v108 = *(_QWORD *)(a3 + 832);
        if (v108)
          LOWORD(v108) = *(_WORD *)(v108 + 8);
        v10 = (uint64_t)sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v115, (llvm *)6, 0, v10, v104, v107, (uint64_t)v105, v106, v108);
      }
    }
    else
    {
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 281))
      {
        v39 = sub_1C6366FFC(a3, v7, (uint64_t)&v115, (llvm *)0xAE, 0, *(_QWORD *)(a2 + 88), 0, 0);
        v41 = v40;
        v42 = sub_1C636E638(a3, 33, (const llvm::APInt *)&v115, (llvm *)5, 0, (uint64_t)v39, v40);
        v44 = v43;
        v45 = sub_1C636E638(a3, 34, (const llvm::APInt *)&v115, (llvm *)5, 0, (uint64_t)v39, v41);
        v48 = *(_QWORD *)(a3 + 832);
        if (v48)
          LOWORD(v48) = *(_WORD *)(v48 + 8);
        v38 = sub_1C5D56C70(a3, 54, (const llvm::APInt *)&v115, (llvm *)6, 0, (uint64_t)v42, v44, v47, (uint64_t)v45, v46, v48);
        goto LABEL_41;
      }
      v10 = 0;
    }
    goto LABEL_11;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 344);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 400))(v12);
  v15 = v14;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 336))(v12);
  v17 = *(_DWORD *)(a2 + 88)
      + (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v15) * v13;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 281))
  {
    v38 = sub_1C6366AB4(a3, v17, (const llvm::APInt *)&v115, **(llvm ***)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), 0, 0);
    goto LABEL_41;
  }
  v10 = (uint64_t)sub_1C6366AB4(a3, v17, (const llvm::APInt *)&v115, (llvm *)5, 0, 0, 0);
  v19 = v18;
  v20 = *(llvm::GlobalValue **)(a2 + 80);
  v21 = *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40);
  v117[0] = "agx.driver_bindings";
  v118 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v21, (uint64_t)v117);
  if (NamedMetadata)
  {
    v23 = NamedMetadata;
    v24 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v24)
    {
      v25 = 0;
      while (1)
      {
        v26 = *(_QWORD *)(**(_QWORD **)(v23 + 48) + 8 * v25);
        v27 = *(_QWORD *)(v26 - 8 * *(unsigned int *)(v26 + 8));
        if (v27)
        {
          if (*(llvm::GlobalValue **)(v27 + 128) == v20)
          {
            Section = llvm::GlobalValue::getSection(v20);
            if (v29 == 11
              && *(_QWORD *)Section == 0x74735F6567616D69
              && *(_QWORD *)((char *)Section + 3) == 0x65746174735F6567)
            {
              v31 = *(unsigned int *)(v26 + 8);
              if (v31 >= 5)
                break;
            }
          }
        }
LABEL_35:
        if (++v25 == v24)
          goto LABEL_72;
      }
      v32 = -8 * v31;
      while (1)
      {
        v33 = *(_QWORD *)(v26 + v32 + 24);
        if (!*(_BYTE *)v33)
        {
          v34 = *(_QWORD *)(v33 + 8);
          if (*(_QWORD *)v34 == 7)
          {
            v35 = *(_DWORD *)(v34 + 24);
            v36 = *(_DWORD *)(v34 + 27);
            if (v35 == 1601069926 && v36 == 1953063519)
              break;
          }
        }
        v32 += 8;
        if (v32 == -24)
          goto LABEL_35;
      }
      v109 = (unsigned __int8 *)(v26 + v32);
      goto LABEL_87;
    }
    goto LABEL_72;
  }
  v117[0] = "agx.compute_driver_bindings";
  v118 = 259;
  v67 = llvm::Module::getNamedMetadata(v21, (uint64_t)v117);
  if (!v67)
    goto LABEL_72;
  v68 = ***(_QWORD ***)(v67 + 48);
  v69 = *(unsigned int *)(v68 + 8);
  if (!(_DWORD)v69)
    goto LABEL_72;
  v70 = 0;
  while (1)
  {
    v71 = *(unsigned __int8 **)(v68 - 8 * v69 + 8 * v70);
    if (!v71 || *v71 - 4 > 0x1E)
      goto LABEL_71;
    v72 = *(_QWORD *)&v71[-8 * *((unsigned int *)v71 + 2)];
    if (v72)
    {
      if (*(llvm::GlobalValue **)(v72 + 128) == v20)
      {
        v73 = llvm::GlobalValue::getSection(v20);
        if (v74 == 11 && *(_QWORD *)v73 == 0x74735F6567616D69 && *(_QWORD *)((char *)v73 + 3) == 0x65746174735F6567)
        {
          v76 = *((unsigned int *)v71 + 2);
          if (v76 >= 5)
            break;
        }
      }
    }
LABEL_70:
    v69 = *(unsigned int *)(v68 + 8);
LABEL_71:
    if (++v70 >= v69)
      goto LABEL_72;
  }
  v77 = -8 * v76;
  while (1)
  {
    v78 = *(_QWORD *)&v71[v77 + 24];
    if (!*(_BYTE *)v78)
    {
      v79 = *(_QWORD *)(v78 + 8);
      if (*(_QWORD *)v79 == 7)
      {
        v80 = *(_DWORD *)(v79 + 24);
        v81 = *(_DWORD *)(v79 + 27);
        if (v80 == 1601069926 && v81 == 1953063519)
          break;
      }
    }
    v77 += 8;
    if (v77 == -24)
      goto LABEL_70;
  }
  v109 = &v71[v77];
LABEL_87:
  v110 = *(_QWORD *)(*((_QWORD *)v109 + 4) + 128);
  if (*(_BYTE *)(v110 + 16) == 16)
    v111 = v110;
  else
    v111 = 0;
  v112 = (_QWORD *)(v111 + 24);
  if (*(_DWORD *)(v111 + 32) >= 0x41u)
    v112 = (_QWORD *)*v112;
  if (!*v112)
  {
    v10 = sub_1C5D410E8(a3, v17, (llvm *)5, 0, 1, 0);
    v19 = v19 & 0xFFFFFFFF00000000 | v113;
  }
LABEL_72:
  if (**(_BYTE **)(a2 + 40) == 6)
  {
    v83 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)&v115, (llvm *)5, 0, 0, 0);
    v86 = *(_QWORD *)(a3 + 832);
    if (v86)
      LOWORD(v86) = *(_WORD *)(v86 + 8);
    v38 = sub_1C5D56C70(a3, 54, (const llvm::APInt *)&v115, (llvm *)6, 0, v10, v19, v85, (uint64_t)v83, v84, v86);
LABEL_41:
    v10 = (uint64_t)v38;
  }
LABEL_11:
  if (v115)
    llvm::MetadataTracking::untrack((uint64_t)&v115, v115);
  return v10;
}

uint64_t sub_1C47F55FC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, unsigned int a11, uint64_t *a12, char a13)
{
  unint64_t v18;
  uint64_t *v19;
  unsigned __int8 *v20;
  llvm **v21;
  uint64_t v22;
  llvm *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::APInt *v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  llvm *v41;
  int v42;
  uint64_t v43;
  llvm::APInt *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  llvm *v52;
  int v53;
  int v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  int v67;
  _BOOL4 v69;
  uint64_t v71;
  uint64_t **v72;
  uint64_t **v73;
  uint64_t **v74;
  uint64_t **v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t *v101;
  int v102;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  _QWORD *v135;
  uint64_t v136;
  llvm *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  unsigned int v147;
  unsigned int v148;
  __int16 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  _QWORD *v158;
  uint64_t v159;
  llvm *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  __int16 v169;
  int v170;
  int v171;
  uint64_t *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  __int16 v183;
  int v184;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int16 v190;
  int v191;
  uint64_t *v192;
  unsigned int v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  __int16 v211;
  uint64_t *v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  unsigned int v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  __int16 v228;
  int v229;
  int v230;
  uint64_t *v231;
  unint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unsigned int v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  llvm *v249;
  unint64_t v250;
  uint64_t v251;
  llvm *v253;
  llvm *v254;
  llvm *v255;
  char v258;
  unsigned __int8 *v259;
  int v260;
  char v261[8];
  uint64_t v262;
  uint64_t *v263;
  int v264;
  char v265;
  char v266;
  uint64_t v267;
  uint64_t *v268;
  int v269;
  char v270;
  uint64_t v271;

  v19 = (uint64_t *)a9;
  v18 = a10;
  v271 = *MEMORY[0x1E0C80C00];
  v20 = *(unsigned __int8 **)(a2 + 64);
  v259 = v20;
  if (v20)
    llvm::MetadataTracking::track((uint64_t)&v259, v20, 2);
  v260 = *(_DWORD *)(a2 + 60);
  v21 = (llvm **)(*(_QWORD *)(a7 + 40) + 16 * a8);
  v23 = *v21;
  v22 = (uint64_t)v21[1];
  v24 = *v21;
  if (v24 != 4 || *(_BYTE *)(*(_QWORD *)(a3 + 40) + 16 * a4) != 5)
    goto LABEL_41;
  v25 = *(unsigned __int16 *)(a5 + 24);
  if (v25 == 35 || v25 == 11)
    v26 = a5;
  else
    v26 = 0;
  v27 = *(unsigned __int16 *)(a7 + 24);
  if (v27 == 35 || v27 == 11)
    v28 = a7;
  else
    v28 = 0;
  v29 = *(unsigned __int16 *)(a9 + 24);
  if (v29 == 35 || v29 == 11)
    v31 = a9;
  else
    v31 = 0;
  if (v27 == 201)
  {
    v32 = *(_QWORD *)(a7 + 32);
    if (*(_QWORD *)v32 == a3 && *(_DWORD *)(v32 + 8) == a4)
      goto LABEL_38;
    if (*(_QWORD *)v32 == a5 && *(_DWORD *)(v32 + 8) == a6)
      goto LABEL_38;
  }
  if (!v28 || !v26)
    goto LABEL_41;
  v33 = *(_QWORD *)(v28 + 80);
  v34 = (llvm::APInt *)(v33 + 24);
  v35 = *(_DWORD *)(v33 + 32);
  v36 = (uint64_t *)(v33 + 24);
  if (v35 >= 0x41)
    v36 = *(uint64_t **)v34;
  v37 = *v36;
  v38 = *(_QWORD *)(v26 + 80);
  v39 = (_QWORD *)(v38 + 24);
  if (*(_DWORD *)(v38 + 32) >= 0x41u)
    v39 = (_QWORD *)*v39;
  if (v37 != *v39)
    goto LABEL_41;
  if (v35 > 0x40)
  {
    v248 = a5;
    v40 = v22;
    v41 = v23;
    v42 = llvm::APInt::countLeadingZerosSlowCase(v34);
    v23 = v41;
    v22 = v40;
    a5 = v248;
    v18 = a10;
    if (v42 == v35)
      goto LABEL_41;
  }
  else if (!*(_QWORD *)v34)
  {
    goto LABEL_41;
  }
  if (!v31)
  {
LABEL_38:
    v46 = a12[2];
    v47 = *(_QWORD *)(v46 + 832);
    v48 = v18;
    if (v47)
      v49 = *(_WORD *)(v47 + 8);
    else
      v49 = 0;
    v146 = sub_1C5D52060(v46, 200, (const llvm::APInt *)&v259, (llvm *)5, 0, a7, a8, v49);
    v148 = v147;
    v149 = 0;
    v150 = a12[2];
    v151 = *(_QWORD *)(v150 + 832);
    if (v151)
      v149 = *(_WORD *)(v151 + 8);
    v152 = sub_1C5D52060(v150, 200, (const llvm::APInt *)&v259, (llvm *)5, 0, a9, v48, v149);
    if (a13)
      v154 = (uint64_t)v146;
    else
      v154 = (uint64_t)v152;
    if (a13)
      v155 = v148;
    else
      v155 = v153;
    if (a13)
      v156 = (uint64_t)v152;
    else
      v156 = (uint64_t)v146;
    if (a13)
      v157 = v153;
    else
      v157 = v148;
    v158 = (_QWORD *)a12[2];
    v159 = *(_QWORD *)(v156 + 40) + 16 * v157;
    v160 = *(llvm **)v159;
    v161 = *(_QWORD *)(v159 + 8);
    v162 = sub_1C6367818(v158, a11);
    v166 = sub_1C63698B8((uint64_t)v158, (const char *)0xC0, (const llvm::APInt *)&v259, v160, v161, a3, a4, v164, a5, a6, v156, v157, v154, v155, v162, v163);
    v167 = a12[2];
    v168 = *(_QWORD *)(v167 + 832);
    if (v168)
      v169 = *(_WORD *)(v168 + 8);
    else
      v169 = 0;
    *(_QWORD *)a1 = sub_1C5D52060(v167, 201, (const llvm::APInt *)&v259, (llvm *)4, 0, (uint64_t)v166, v165, v169);
    *(_DWORD *)(a1 + 8) = v191;
    goto LABEL_284;
  }
  v43 = *(_QWORD *)(v31 + 80);
  v44 = (llvm::APInt *)(v43 + 24);
  v45 = *(_DWORD *)(v43 + 32);
  if (v45 > 0x40)
  {
    v50 = a5;
    v51 = v22;
    v250 = v18;
    v52 = v23;
    v53 = llvm::APInt::countLeadingZerosSlowCase(v44);
    v23 = v52;
    v18 = v250;
    v22 = v51;
    a5 = v50;
    if (v53 != v45)
      goto LABEL_38;
  }
  else if (*(_QWORD *)v44)
  {
    goto LABEL_38;
  }
LABEL_41:
  v54 = *(unsigned __int16 *)(a9 + 24);
  if (v54 == 35 || v54 == 11)
    v56 = a9;
  else
    v56 = 0;
  v57 = *(unsigned __int16 *)(a7 + 24);
  if ((v57 & 0xFFFE) == 0xC6)
  {
    v58 = *(_QWORD *)(a7 + 48);
    if (v58)
    {
      v59 = 1;
      do
      {
        if (*(_DWORD *)(v58 + 8) == (_DWORD)a8)
        {
          if (!v59)
            goto LABEL_64;
          --v59;
        }
        v58 = *(_QWORD *)(v58 + 32);
      }
      while (v58);
      if (!v59)
      {
        if (v56)
        {
          if (v24 == 5)
          {
            v60 = *(uint64_t **)(a7 + 32);
            v61 = *v60;
            if (*(_BYTE *)(*(_QWORD *)(*v60 + 40) + 16 * *((unsigned int *)v60 + 2)) == 4)
            {
              if (v57 == 198)
              {
                v110 = *(_QWORD *)(v56 + 80);
                v111 = *(_DWORD *)(v110 + 32);
                if (v111 > 0x40)
                  v112 = **(_QWORD **)(v110 + 24);
                else
                  v112 = (uint64_t)(*(_QWORD *)(v110 + 24) << -(char)v111) >> -(char)v111;
                if (v112 < 0x8000 && v112 >= -32768)
                {
LABEL_249:
                  v186 = v18;
                  v187 = v60[1];
                  v188 = a12[2];
                  v189 = *(_QWORD *)(v188 + 832);
                  if (v189)
                    v190 = *(_WORD *)(v189 + 8);
                  else
                    v190 = 0;
                  v212 = sub_1C5D52060(v188, 201, (const llvm::APInt *)&v259, (llvm *)4, 0, a9, v186, v190);
                  if (a13)
                    v214 = v61;
                  else
                    v214 = (uint64_t)v212;
                  if (a13)
                    v215 = v187;
                  else
                    v215 = v213;
                  if (a13)
                    v216 = (uint64_t)v212;
                  else
                    v216 = v61;
                  if (a13)
                    v217 = v213;
                  else
                    v217 = v187;
                  v218 = (_QWORD *)a12[2];
                  v219 = *(_QWORD *)(v216 + 40) + 16 * v217;
                  v220 = *(_QWORD *)(v219 + 8);
                  v255 = *(llvm **)v219;
                  v221 = sub_1C6367818(v218, a11);
                  v225 = sub_1C63698B8((uint64_t)v218, (const char *)0xC0, (const llvm::APInt *)&v259, v255, v220, a3, a4, v223, a5, a6, v216, v217, v214, v215, v221, v222);
                  v226 = a12[2];
                  v227 = *(_QWORD *)(v226 + 832);
                  if (v227)
                    v228 = *(_WORD *)(v227 + 8);
                  else
                    v228 = 0;
                  *(_QWORD *)a1 = sub_1C5D52060(v226, *(unsigned __int16 *)(a7 + 24), (const llvm::APInt *)&v259, (llvm *)5, 0, (uint64_t)v225, v224, v228);
                  *(_DWORD *)(a1 + 8) = v229;
                  sub_1C5C5B004(*a12, (uint64_t)v225);
LABEL_284:
                  v121 = 1;
                  goto LABEL_246;
                }
              }
              else
              {
                if (v57 != 199)
                  goto LABEL_249;
                v62 = *(_QWORD *)(v56 + 80);
                v63 = (_QWORD *)(v62 + 24);
                if (*(_DWORD *)(v62 + 32) >= 0x41u)
                  v63 = (_QWORD *)*v63;
                if (!(*v63 >> 16))
                  goto LABEL_249;
              }
LABEL_188:
              v121 = 0;
              goto LABEL_246;
            }
          }
        }
      }
    }
  }
LABEL_64:
  if (v54 != 36 && v54 != 12)
    goto LABEL_188;
  v249 = v23;
  v251 = v22;
  v64 = *(_QWORD *)(a9 + 80);
  v65 = *(_QWORD *)(v64 + 32);
  if ((_UNKNOWN *)v65 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v267, (const llvm::detail::DoubleAPFloat *)(v64 + 32));
  }
  else
  {
    v267 = *(_QWORD *)(v64 + 32);
    if ((*(_DWORD *)(v65 + 8) + 64) >= 0x80)
      v268 = (uint64_t *)operator new[]();
    v66 = *(_BYTE *)(v64 + 52);
    v67 = v66 & 7;
    v270 = v270 & 0xF0 | v66 & 0xF;
    v269 = *(_DWORD *)(v64 + 48);
    v69 = (v66 & 6) != 0 && v67 != 3;
    if (v67 == 1 || v69)
    {
      v71 = *(unsigned int *)(v267 + 8);
      if ((v71 - 64) <= 0xFFFFFF7F)
        v72 = (uint64_t **)v268;
      else
        v72 = &v268;
      v75 = *(uint64_t ***)(v64 + 40);
      v74 = (uint64_t **)(v64 + 40);
      v73 = v75;
      if ((*((_DWORD *)*(v74 - 1) + 2) - 64) >= 0xFFFFFF80)
        v73 = v74;
      if (v71 <= 0xFFFFFFBF)
      {
        v76 = (unint64_t)(v71 + 64) >> 6;
        do
        {
          v77 = *v73++;
          *v72++ = v77;
          --v76;
        }
        while (v76);
      }
    }
  }
  v78 = *(_QWORD *)(a7 + 48);
  if (v78)
  {
    v79 = 1;
    v80 = *(_QWORD *)(a7 + 48);
    do
    {
      if (*(_DWORD *)(v80 + 8) == (_DWORD)a8)
      {
        if (!v79)
          goto LABEL_117;
        --v79;
      }
      v80 = *(_QWORD *)(v80 + 32);
    }
    while (v80);
    if (!v79 && *(_WORD *)(a7 + 24) == 215)
    {
      if ((_UNKNOWN *)v267 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v262, (const llvm::detail::DoubleAPFloat *)&v267);
      }
      else
      {
        v262 = v267;
        if ((*(_DWORD *)(v267 + 8) + 64) >= 0x80)
          v263 = (uint64_t *)operator new[]();
        v81 = v270 & 7;
        v265 = v265 & 0xF0 | v270 & 0xF;
        v264 = v269;
        v83 = (v270 & 6) != 0 && v81 != 3;
        if (v81 == 1 || v83)
        {
          v84 = *(unsigned int *)(v262 + 8);
          v85 = (v84 - 64) <= 0xFFFFFF7F ? v263 : (uint64_t *)&v263;
          v86 = (*(_DWORD *)(v267 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v268 : v268;
          if (v84 <= 0xFFFFFFBF)
          {
            v87 = (unint64_t)(v84 + 64) >> 6;
            do
            {
              v88 = *v86++;
              *v85++ = v88;
              --v87;
            }
            while (v87);
          }
        }
      }
      v258 = 0;
      llvm::APFloat::convert((uint64_t)v261, &unk_1C866F15C, 1, &v258);
      if (!v258)
      {
        v192 = sub_1C6366D08(a12[2], (llvm::LLVMContext *)v261, (const llvm::APFloat *)&v259, (llvm *)9, 0, 0);
        v194 = *(uint64_t **)(a7 + 32);
        v196 = *v194;
        v195 = v194[1];
        if (a13)
          v197 = v196;
        else
          v197 = (uint64_t)v192;
        if (a13)
          v198 = v195;
        else
          v198 = v193;
        if (a13)
          v199 = (uint64_t)v192;
        else
          v199 = v196;
        if (a13)
          v200 = v193;
        else
          v200 = v195;
        v201 = (_QWORD *)a12[2];
        v202 = *(_QWORD *)(v199 + 40) + 16 * v200;
        v203 = *(_QWORD *)(v202 + 8);
        v254 = *(llvm **)v202;
        v204 = sub_1C6367818(v201, a11);
        v208 = sub_1C63698B8((uint64_t)v201, (const char *)0xC0, (const llvm::APInt *)&v259, v254, v203, a3, a4, v206, a5, a6, v199, v200, v197, v198, v204, v205);
        v209 = a12[2];
        v210 = *(_QWORD *)(v209 + 832);
        if (v210)
          v211 = *(_WORD *)(v210 + 8);
        else
          v211 = 0;
        *(_QWORD *)a1 = sub_1C5D52060(v209, 215, (const llvm::APInt *)&v259, (llvm *)0xA, 0, (uint64_t)v208, v207, v211);
        *(_DWORD *)(a1 + 8) = v230;
        sub_1C5C5B004(*a12, (uint64_t)v208);
        if ((_UNKNOWN *)v262 != &unk_1C866F1C0)
        {
          if ((*(_DWORD *)(v262 + 8) - 64) > 0xFFFFFF7F || !v263)
            goto LABEL_288;
LABEL_316:
          MEMORY[0x1CAA32F9C](v263, 0x1000C8000313F17);
LABEL_288:
          v121 = 1;
          goto LABEL_244;
        }
LABEL_317:
        sub_1C4773C74((uint64_t *)&v263);
        goto LABEL_288;
      }
      if ((_UNKNOWN *)v262 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v263);
      }
      else if ((*(_DWORD *)(v262 + 8) - 64) <= 0xFFFFFF7F && v263)
      {
        MEMORY[0x1CAA32F9C](v263, 0x1000C8000313F17);
      }
      v78 = *(_QWORD *)(a7 + 48);
    }
LABEL_117:
    if (v78)
    {
      v89 = 1;
      do
      {
        if (*(_DWORD *)(v78 + 8) == (_DWORD)a8)
        {
          if (!v89)
            goto LABEL_124;
          --v89;
        }
        v78 = *(_QWORD *)(v78 + 32);
      }
      while (v78);
      if (!v89)
      {
        v90 = *(unsigned __int16 *)(a7 + 24);
        if (v90 != 212)
          goto LABEL_125;
        v97 = *(uint64_t **)(a7 + 32);
        v98 = *v97;
        v99 = v97[1];
        if (!sub_1C47F671C(*v97, v99, 1, 0))
        {
          if (sub_1C47F692C(a2))
          {
            v100 = v98 == a3 && (_DWORD)v99 == a4;
            if (v100 || v98 == a5 && (_DWORD)v99 == a6)
              goto LABEL_151;
            v101 = (uint64_t *)&v266;
            if ((_UNKNOWN *)v267 == &unk_1C866F1C0)
              v101 = v268;
            if ((*((_BYTE *)v101 + 28) & 0xF) == 3)
            {
LABEL_151:
              if ((_UNKNOWN *)v267 == &unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v262, (const llvm::detail::DoubleAPFloat *)&v267);
              }
              else
              {
                v262 = v267;
                if ((*(_DWORD *)(v267 + 8) + 64) >= 0x80)
                  v263 = (uint64_t *)operator new[]();
                v102 = v270 & 7;
                v265 = v265 & 0xF0 | v270 & 0xF;
                v264 = v269;
                v104 = (v270 & 6) != 0 && v102 != 3;
                if (v102 == 1 || v104)
                {
                  v105 = *(unsigned int *)(v262 + 8);
                  v106 = (v105 - 64) <= 0xFFFFFF7F ? v263 : (uint64_t *)&v263;
                  v107 = (*(_DWORD *)(v267 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v268 : v268;
                  if (v105 <= 0xFFFFFFBF)
                  {
                    v108 = (unint64_t)(v105 + 64) >> 6;
                    do
                    {
                      v109 = *v107++;
                      *v106++ = v109;
                      --v108;
                    }
                    while (v108);
                  }
                }
              }
              v258 = 0;
              llvm::APFloat::convert((uint64_t)v261, &unk_1C866F184, 1, &v258);
              if (v258)
              {
                if ((_UNKNOWN *)v262 == &unk_1C866F1C0)
                {
                  sub_1C4773C74((uint64_t *)&v263);
                }
                else if ((*(_DWORD *)(v262 + 8) - 64) <= 0xFFFFFF7F && v263)
                {
                  MEMORY[0x1CAA32F9C](v263, 0x1000C8000313F17);
                }
                goto LABEL_124;
              }
              v231 = sub_1C6366D08(a12[2], (llvm::LLVMContext *)v261, (const llvm::APFloat *)&v259, (llvm *)0xA, 0, 0);
              v233 = *(uint64_t **)(a7 + 32);
              v235 = *v233;
              v234 = v233[1];
              v236 = v232 & 0xFFFFFFFF00000000 | v234;
              if (a13)
                v237 = (uint64_t)v231;
              else
                v237 = v235;
              if (a13)
              {
                v238 = v232;
              }
              else
              {
                v236 = v232;
                v235 = (uint64_t)v231;
                v238 = v234;
              }
              v241 = sub_1C47DF81C((_QWORD *)a12[2], (const llvm::APInt *)&v259, a3, a4, a5, a6, v237, v238, v235, v236, SHIDWORD(v236), a11);
              v242 = a12[2];
              v243 = *(_QWORD *)(a7 + 32);
              v244 = *(_QWORD *)(v243 + 40);
              v245 = *(_QWORD *)(v243 + 48);
              v246 = *(_QWORD *)(v242 + 832);
              if (v246)
                LOWORD(v246) = *(_WORD *)(v246 + 8);
              *(_QWORD *)a1 = sub_1C5D56C70(v242, 212, (const llvm::APInt *)&v259, (llvm *)9, 0, (uint64_t)v241, v239, v240, v244, v245, v246);
              *(_DWORD *)(a1 + 8) = v247;
              sub_1C5C5B004(*a12, (uint64_t)v241);
              if ((_UNKNOWN *)v262 != &unk_1C866F1C0)
              {
                if ((*(_DWORD *)(v262 + 8) - 64) > 0xFFFFFF7F || !v263)
                  goto LABEL_288;
                goto LABEL_316;
              }
              goto LABEL_317;
            }
          }
        }
      }
    }
  }
LABEL_124:
  v90 = *(unsigned __int16 *)(a7 + 24);
LABEL_125:
  if ((v90 & 0xFFFE) != 0xDE || !sub_1C47F69DC(a2))
    goto LABEL_191;
  v91 = *(uint64_t **)(a7 + 32);
  v93 = *v91;
  v92 = v91[1];
  v94 = *(_QWORD *)(*v91 + 48);
  if (v94)
  {
    v95 = 1;
    do
    {
      if (*(_DWORD *)(v94 + 8) == (_DWORD)v92)
      {
        if (!v95)
          goto LABEL_134;
        --v95;
      }
      v94 = *(_QWORD *)(v94 + 32);
    }
    while (v94);
    if (!v95)
    {
      v113 = *(unsigned __int16 *)(v93 + 24);
      if (v90 == 222)
      {
        v114 = v113 - 96;
        v115 = v114 > 0x2D;
        v116 = (1 << v114) & 0x200000000005;
        if (v115 || v116 == 0)
          goto LABEL_183;
      }
      else if (v90 != 223 || v113 != 98)
      {
LABEL_135:
        v96 = (uint64_t *)&v266;
        if ((_UNKNOWN *)v267 == &unk_1C866F1C0)
          v96 = v268;
        if ((*((_BYTE *)v96 + 28) & 8) == 0)
          goto LABEL_237;
LABEL_216:
        v121 = 0;
        goto LABEL_244;
      }
LABEL_191:
      v122 = a12[2];
      if ((*(_WORD *)(*(_QWORD *)v122 + 1020) & 1) != 0)
      {
        v123 = (uint64_t *)&v266;
        if ((_UNKNOWN *)v267 == &unk_1C866F1C0)
          v123 = v268;
        if ((*((_BYTE *)v123 + 28) & 0xF) == 0xB)
        {
          v124 = *(_QWORD *)(a2 + 48);
          if (v124)
          {
            while (1)
            {
              v125 = *(_QWORD *)(v124 + 16);
              v126 = *(unsigned __int16 *)(v125 + 24);
              if ((sub_1C47F6A6C(v126) & 1) == 0)
              {
                if (v126 != 46)
                  break;
                v127 = *(_QWORD *)(**(_QWORD **)(v125 + 32) + 80);
                v128 = *(_DWORD *)(v127 + 32) > 0x40u ? **(_QWORD **)(v127 + 24) : *(_QWORD *)(v127 + 24);
                if (v128 != 1830 && v128 != 1851)
                  break;
              }
              v124 = *(_QWORD *)(v124 + 32);
              if (!v124)
                goto LABEL_204;
            }
            v121 = 0;
            goto LABEL_244;
          }
LABEL_204:
          v129 = sub_1C5D404C4(v122, (const llvm::APInt *)&v259, (_BOOL8)v249, v251, 0, 0.0);
          v131 = v130;
          if (a13)
            v132 = (uint64_t)v129;
          else
            v132 = a7;
          if (a13)
          {
            v133 = v130;
          }
          else
          {
            v131 = a8;
            v133 = a8;
          }
          if (a13)
            v134 = a8;
          else
            v134 = v130;
          if (!a13)
            a7 = (uint64_t)v129;
          v135 = (_QWORD *)a12[2];
          v136 = *(_QWORD *)(v132 + 40) + 16 * v131;
          v137 = *(llvm **)v136;
          v138 = *(_QWORD *)(v136 + 8);
          v139 = sub_1C6367818(v135, a11);
          v142 = sub_1C63698B8((uint64_t)v135, (const char *)0xC0, (const llvm::APInt *)&v259, v137, v138, a3, a4, v141, a5, a6, v132, v133, a7, v134, v139, v140);
          *(_QWORD *)a1 = v142;
          *(_DWORD *)(a1 + 8) = v143;
          v144 = *a12;
          v145 = (uint64_t)v142;
          goto LABEL_243;
        }
      }
      goto LABEL_216;
    }
  }
LABEL_134:
  if (v90 != 222)
    goto LABEL_135;
LABEL_183:
  v118 = a12[2];
  v119 = *(_QWORD *)(v118 + 832);
  if (v119)
    v120 = *(_WORD *)(v119 + 8);
  else
    v120 = 0;
  v19 = sub_1C5D52060(v118, 222, (const llvm::APInt *)&v259, v249, v251, a9, v18, v120);
  LODWORD(v18) = v170;
LABEL_237:
  if (a13)
  {
    v171 = v18;
    v172 = (uint64_t *)v93;
    LODWORD(v18) = v92;
    LODWORD(v92) = v171;
    v93 = (uint64_t)v19;
    v19 = v172;
  }
  v173 = (_QWORD *)a12[2];
  v174 = *(_QWORD *)(v93 + 40) + 16 * v92;
  v175 = *(_QWORD *)(v174 + 8);
  v253 = *(llvm **)v174;
  v176 = sub_1C6367818(v173, a11);
  v180 = sub_1C63698B8((uint64_t)v173, (const char *)0xC0, (const llvm::APInt *)&v259, v253, v175, a3, a4, v178, a5, a6, v93, v92, (uint64_t)v19, v18, v176, v177);
  v181 = a12[2];
  v182 = *(_QWORD *)(v181 + 832);
  if (v182)
    v183 = *(_WORD *)(v182 + 8);
  else
    v183 = 0;
  *(_QWORD *)a1 = sub_1C5D52060(v181, *(unsigned __int16 *)(a7 + 24), (const llvm::APInt *)&v259, v249, v251, (uint64_t)v180, v179, v183);
  *(_DWORD *)(a1 + 8) = v184;
  v144 = *a12;
  v145 = (uint64_t)v180;
LABEL_243:
  sub_1C5C5B004(v144, v145);
  v121 = 1;
LABEL_244:
  if ((_UNKNOWN *)v267 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v268);
  }
  else if ((*(_DWORD *)(v267 + 8) - 64) <= 0xFFFFFF7F && v268)
  {
    MEMORY[0x1CAA32F9C](v268, 0x1000C8000313F17);
  }
LABEL_246:
  if (v259)
    llvm::MetadataTracking::untrack((uint64_t)&v259, v259);
  return v121;
}

BOOL sub_1C47F671C(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v5;
  _BOOL8 result;
  BOOL v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v5 = *(unsigned __int16 *)(a1 + 24);
  result = 1;
  v7 = v5 > 0x24 || ((1 << v5) & 0x1800001800) == 0;
  if (v7 && v5 != 395)
  {
    v8 = *(_QWORD *)(a1 + 48);
    if (!v8)
      return 0;
    v10 = 1;
    v11 = *(_QWORD *)(a1 + 48);
    do
    {
      if (*(_DWORD *)(v11 + 8) == a2)
      {
        if (!v10)
          goto LABEL_14;
        --v10;
      }
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10)
    {
LABEL_14:
      if (!a4)
        return 0;
      v12 = 2;
      do
      {
        if (!*(_DWORD *)(v8 + 8))
        {
          if (!v12)
            return 0;
          --v12;
        }
        v8 = *(_QWORD *)(v8 + 32);
      }
      while (v8);
      if (v12)
        return 0;
    }
    if (v5 == 47 && (_DWORD)a3)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) + 80);
      v14 = (_QWORD *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u)
        v14 = (_QWORD *)*v14;
      if ((*(_DWORD *)v14 - 2022) < 0x40)
        return 1;
      v15 = 47;
LABEL_28:
      if ((sub_1C47F6A6C(v15) & 1) != 0)
        return 1;
LABEL_36:
      if (v5 > 211)
      {
        if (v5 != 212)
          return v5 == 215 && (a3 & 1) != 0;
        if ((a3 & 1) != 0)
          return 1;
        v22 = *(uint64_t **)(a1 + 32);
        v17 = *v22;
        v18 = v22[1];
        v19 = 0;
      }
      else
      {
        if (v5 == 46)
        {
          v20 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 80);
          if (*(_DWORD *)(v20 + 32) > 0x40u)
            v21 = **(_QWORD **)(v20 + 24);
          else
            v21 = *(_QWORD *)(v20 + 24);
          return v21 == 1830 || v21 == 1851;
        }
        if (v5 != 192)
          return 0;
        v16 = *(_QWORD **)(a1 + 32);
        if (!sub_1C47F671C(v16[10], v16[11], a3, 0))
          return 0;
        v17 = v16[15];
        v18 = v16[16];
        v19 = a3;
      }
      return (sub_1C47F671C(v17, v18, v19, 0) & 1) != 0;
    }
    result = 1;
    if (((v5 - 397) > 0x2E || ((1 << (v5 + 115)) & 0x40000000001BLL) == 0)
      && ((v5 - 96) > 0x2D || ((1 << (v5 - 96)) & 0x200000000005) == 0)
      && (v5 & 0xFFFE) != 0xDE)
    {
      v15 = v5;
      if (!(_DWORD)a3)
        goto LABEL_36;
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t sub_1C47F692C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    return 1;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    v3 = *(unsigned __int16 *)(v2 + 24);
    if (v3 != 215 && v3 != 212)
      break;
    if ((sub_1C47F692C(*(_QWORD *)(v1 + 16)) & 1) == 0)
      return 0;
LABEL_13:
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return 1;
  }
  if ((sub_1C47F6A6C(*(unsigned __int16 *)(v2 + 24)) & 1) != 0)
    goto LABEL_13;
  if (v3 == 46)
  {
    v4 = *(_QWORD *)(**(_QWORD **)(v2 + 32) + 80);
    v5 = *(_DWORD *)(v4 + 32) > 0x40u ? **(_QWORD **)(v4 + 24) : *(_QWORD *)(v4 + 24);
    if (v5 == 1830 || v5 == 1851)
      goto LABEL_13;
  }
  return 0;
}

uint64_t sub_1C47F69DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    return 1;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = *(unsigned __int16 *)(v3 + 24);
    if (v4 == 192)
      break;
    if (v4 == 215 || v4 == 212)
    {
      if ((sub_1C47F69DC() & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_1C47F6A6C(*(unsigned __int16 *)(v3 + 24));
      if (!(_DWORD)result)
        return result;
    }
LABEL_11:
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return 1;
  }
  v5 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v5 + 80) != a1 && *(_QWORD *)(v5 + 120) != a1)
    goto LABEL_11;
  return 0;
}

uint64_t sub_1C47F6A6C(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (((a1 - 222) > 0x13 || ((1 << (a1 + 34)) & 0x81203) == 0)
    && ((a1 - 423) > 0x14 || ((1 << (a1 + 89)) & 0x10000B) == 0))
  {
    v3 = a1 - 96;
    if (v3 > 0x2D || ((1 << v3) & 0x200000000005) == 0)
      return 0;
  }
  return result;
}

#error "1C47F6AE8: too big function (funcsize=0)"

uint64_t sub_1C48081E0(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;

  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    return 1;
  while (1)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v5 = *(unsigned __int16 *)(v4 + 24);
    v12 = *(_OWORD *)*(_QWORD *)(v4 + 40);
    if (v5 != 201)
      break;
    if ((unint64_t)sub_1C6131328((unsigned __int8 *)&v12, a2, a3) <= 0xF)
    {
      v5 = *(unsigned __int16 *)(v4 + 24);
      break;
    }
LABEL_12:
    v3 = *(_QWORD *)(v3 + 32);
    if (!v3)
      return 1;
  }
  if (v5 == 171)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 40);
    v7 = *(unsigned __int16 *)(v6 + 24);
    if (v7 == 35 || v7 == 11)
    {
      v9 = *(_QWORD *)(v6 + 80);
      v10 = (_QWORD *)(v9 + 24);
      if (*(_DWORD *)(v9 + 32) >= 0x41u)
        v10 = (_QWORD *)*v10;
      if (*v10 == 0xFFFFLL)
        goto LABEL_12;
    }
  }
  return 0;
}

unsigned int *sub_1C48082A4(unsigned int *result, unsigned int **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;

  v2 = *(_QWORD **)result;
  if (*(_WORD *)(*(_QWORD *)result + 24) == 58)
  {
    v3 = result[2];
    if (*(_BYTE *)(v2[5] + 16 * v3) == 6)
    {
      v4 = v2[6];
      if (v4)
      {
        v5 = 1;
        do
        {
          if (*(_DWORD *)(v4 + 8) == (_DWORD)v3)
          {
            if (!v5)
              return result;
            --v5;
          }
          v4 = *(_QWORD *)(v4 + 32);
        }
        while (v4);
        if (!v5)
        {
          v6 = (_QWORD *)v2[4];
          if (*(_WORD *)(*v6 + 24) == 199)
          {
            v7 = v6[5];
            if (*(_WORD *)(v7 + 24) == 199)
            {
              v8 = (unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(*v6 + 32) + 40)
                                     + 16 * *(unsigned int *)(*(_QWORD *)(*v6 + 32) + 8));
              v9 = *v8;
              v10 = (unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(v7 + 32) + 40)
                                      + 16 * *(unsigned int *)(*(_QWORD *)(v7 + 32) + 8));
              if ((_DWORD)v9 == *v10)
              {
                v11 = *((_QWORD *)v10 + 1);
                v12 = *((_QWORD *)v8 + 1);
                if ((_DWORD)v9)
                  v13 = 1;
                else
                  v13 = v12 == v11;
                v14 = v13;
                if (v9 == 5 && v14 != 0)
                  *a2 = result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C4808380(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t *v24;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  int v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  int v75;

  v5 = a2;
  v6 = *(unsigned __int8 **)(a1 + 64);
  v74 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v74, v6, 2);
  v75 = *(_DWORD *)(a1 + 60);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 16 * v5);
  if (v7 == 5)
  {
    v16 = *(uint64_t **)(a1 + 32);
    v17 = *v16;
    if (*(_BYTE *)(*(_QWORD *)(*v16 + 40) + 16 * *((unsigned int *)v16 + 2)) == 5)
    {
      v18 = v16[5];
      if (*(_BYTE *)(*(_QWORD *)(v18 + 40) + 16 * *((unsigned int *)v16 + 12)) == 6)
      {
        v19 = *(unsigned __int16 *)(a1 + 24);
        v20 = v16[1];
        v21 = v16[6];
        v22 = a3[104];
        if (v22)
          v23 = *(_WORD *)(v22 + 8);
        else
          v23 = 0;
        v26 = sub_1C5D52060((uint64_t)a3, 201, (const llvm::APInt *)&v74, (llvm *)5, 0, v18, v21, v23);
        v29 = a3[104];
        if (v29)
          LOWORD(v29) = *(_WORD *)(v29 + 8);
        v30 = sub_1C5D56C70((uint64_t)a3, v19, (const llvm::APInt *)&v74, (llvm *)5, 0, v17, v20, v28, (uint64_t)v26, v27, v29);
        goto LABEL_25;
      }
    }
LABEL_17:
    v24 = 0;
    goto LABEL_18;
  }
  if (v7 != 6)
    goto LABEL_17;
  v8 = *(uint64_t **)(a1 + 32);
  v9 = *(unsigned __int16 *)(v8[5] + 24);
  if (v9 == 35 || v9 == 11)
    v11 = v8[5];
  else
    v11 = 0;
  v12 = *v8;
  v13 = v8[1];
  v14 = a3[104];
  if (v14)
    v15 = *(_WORD *)(v14 + 8);
  else
    v15 = 0;
  v31 = sub_1C5D52060((uint64_t)a3, 216, (const llvm::APInt *)&v74, (llvm *)0x31, 0, v12, v13, v15);
  v33 = v32;
  v34 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v74, (llvm *)5, 0, 0, 0);
  v37 = 0;
  v38 = a3[104];
  if (v38)
    v37 = *(_WORD *)(v38 + 8);
  v39 = sub_1C5D56C70((uint64_t)a3, 437, (const llvm::APInt *)&v74, (llvm *)5, 0, (uint64_t)v31, v33, v36, (uint64_t)v34, v35, v37);
  v41 = v40;
  v42 = sub_1C6366AB4((uint64_t)a3, 1, (const llvm::APInt *)&v74, (llvm *)5, 0, 0, 0);
  v45 = a3[104];
  if (v45)
    LOWORD(v45) = *(_WORD *)(v45 + 8);
  v46 = sub_1C5D56C70((uint64_t)a3, 437, (const llvm::APInt *)&v74, (llvm *)5, 0, (uint64_t)v31, v33, v44, (uint64_t)v42, v43, v45);
  v48 = v47;
  if (!v11)
    goto LABEL_43;
  v49 = *(_QWORD *)(v11 + 80);
  v50 = (_QWORD *)(v49 + 24);
  if (*(_DWORD *)(v49 + 32) >= 0x41u)
    v50 = (_QWORD *)*v50;
  if (*v50 == 32)
  {
    if (*(_WORD *)(a1 + 24) == 177)
      v51 = 199;
    else
      v51 = 198;
    v52 = a3[104];
    if (v52)
      v53 = *(_WORD *)(v52 + 8);
    else
      v53 = 0;
    v54 = (uint64_t)a3;
    v55 = v46;
    v56 = v48;
  }
  else
  {
LABEL_43:
    v57 = *(unsigned __int16 *)(a1 + 24);
    if (v57 == 177)
      v58 = 197;
    else
      v58 = 0;
    if (v57 == 176)
      v59 = 196;
    else
      v59 = v58;
    v60 = sub_1C636A8B4((uint64_t)a3, 5, 0, 5, 0);
    v63 = sub_1C636D72C((uint64_t)a3, (const char *)v59, (const llvm::APInt *)&v74, v60, v61, (uint64_t)v39, v41, v62, (uint64_t)v46, v48, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
    v66 = (uint64_t *)sub_1C4815BD4((uint64_t)v63, v64, a3)[4];
    v67 = *v66;
    v68 = v66[1];
    v69 = v66[5];
    v70 = v66[6];
    v71 = a3[104];
    if (v71)
      LOWORD(v71) = *(_WORD *)(v71 + 8);
    v55 = sub_1C5D56C70((uint64_t)a3, 146, (const llvm::APInt *)&v74, (llvm *)0x31, 0, v67, v68, v65, v69, v70, v71);
    v56 = v72;
    v73 = a3[104];
    if (v73)
      v53 = *(_WORD *)(v73 + 8);
    else
      v53 = 0;
    v54 = (uint64_t)a3;
    v51 = 216;
  }
  v30 = sub_1C5D52060(v54, v51, (const llvm::APInt *)&v74, (llvm *)6, 0, (uint64_t)v55, v56, v53);
LABEL_25:
  v24 = v30;
LABEL_18:
  if (v74)
    llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
  return v24;
}

uint64_t *sub_1C4808724(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t *v24;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  unsigned __int8 *v72;
  int v73;

  v5 = a2;
  v6 = *(unsigned __int8 **)(a1 + 64);
  v72 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v72, v6, 2);
  v73 = *(_DWORD *)(a1 + 60);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 16 * v5);
  if (v7 == 5)
  {
    v16 = *(uint64_t **)(a1 + 32);
    v17 = *v16;
    if (*(_BYTE *)(*(_QWORD *)(*v16 + 40) + 16 * *((unsigned int *)v16 + 2)) == 5)
    {
      v18 = v16[5];
      if (*(_BYTE *)(*(_QWORD *)(v18 + 40) + 16 * *((unsigned int *)v16 + 12)) == 6)
      {
        v19 = *(unsigned __int16 *)(a1 + 24);
        v20 = v16[1];
        v21 = v16[6];
        v22 = a3[104];
        if (v22)
          v23 = *(_WORD *)(v22 + 8);
        else
          v23 = 0;
        v26 = sub_1C5D52060((uint64_t)a3, 201, (const llvm::APInt *)&v72, (llvm *)5, 0, v18, v21, v23);
        v29 = a3[104];
        if (v29)
          LOWORD(v29) = *(_WORD *)(v29 + 8);
        v30 = sub_1C5D56C70((uint64_t)a3, v19, (const llvm::APInt *)&v72, (llvm *)5, 0, v17, v20, v28, (uint64_t)v26, v27, v29);
        goto LABEL_44;
      }
    }
LABEL_17:
    v24 = 0;
    goto LABEL_18;
  }
  if (v7 != 6)
    goto LABEL_17;
  v8 = *(uint64_t **)(a1 + 32);
  v9 = *(unsigned __int16 *)(v8[5] + 24);
  if (v9 == 35 || v9 == 11)
    v11 = v8[5];
  else
    v11 = 0;
  v12 = *v8;
  v13 = v8[1];
  v14 = a3[104];
  if (v14)
    v15 = *(_WORD *)(v14 + 8);
  else
    v15 = 0;
  v31 = sub_1C5D52060((uint64_t)a3, 216, (const llvm::APInt *)&v72, (llvm *)0x31, 0, v12, v13, v15);
  v33 = v32;
  v34 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v72, (llvm *)5, 0, 0, 0);
  v37 = 0;
  v38 = a3[104];
  if (v38)
    v37 = *(_WORD *)(v38 + 8);
  v39 = sub_1C5D56C70((uint64_t)a3, 437, (const llvm::APInt *)&v72, (llvm *)5, 0, (uint64_t)v31, v33, v36, (uint64_t)v34, v35, v37);
  v41 = v40;
  v42 = sub_1C6366AB4((uint64_t)a3, 1, (const llvm::APInt *)&v72, (llvm *)5, 0, 0, 0);
  v45 = 0;
  v46 = a3[104];
  if (v46)
    v45 = *(_WORD *)(v46 + 8);
  v47 = sub_1C5D56C70((uint64_t)a3, 437, (const llvm::APInt *)&v72, (llvm *)5, 0, (uint64_t)v31, v33, v44, (uint64_t)v42, v43, v45);
  v49 = v48;
  if (!v11)
    goto LABEL_37;
  v50 = *(_QWORD *)(v11 + 80);
  v51 = (_QWORD *)(v50 + 24);
  if (*(_DWORD *)(v50 + 32) >= 0x41u)
    v51 = (_QWORD *)*v51;
  if (*v51 == 32)
  {
    v53 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v72, (llvm *)5, 0, 0, 0);
    v55 = a3[104];
    if (v55)
      LOWORD(v55) = *(_WORD *)(v55 + 8);
    v56 = sub_1C5D56C70((uint64_t)a3, 146, (const llvm::APInt *)&v72, (llvm *)0x31, 0, (uint64_t)v53, v52, v54, (uint64_t)v39, v41, v55);
  }
  else
  {
LABEL_37:
    v58 = sub_1C636A8B4((uint64_t)a3, 5, 0, 5, 0);
    v61 = sub_1C636D72C((uint64_t)a3, (const char *)0xC3, (const llvm::APInt *)&v72, v58, v59, (uint64_t)v39, v41, v60, (uint64_t)v47, v49, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
    v64 = (uint64_t *)sub_1C48162AC((uint64_t)v61, v62, a3)[4];
    v65 = *v64;
    v66 = v64[1];
    v67 = v64[5];
    v68 = v64[6];
    v69 = a3[104];
    if (v69)
      LOWORD(v69) = *(_WORD *)(v69 + 8);
    v56 = sub_1C5D56C70((uint64_t)a3, 146, (const llvm::APInt *)&v72, (llvm *)0x31, 0, v65, v66, v63, v67, v68, v69);
  }
  v70 = a3[104];
  if (v70)
    v71 = *(_WORD *)(v70 + 8);
  else
    v71 = 0;
  v30 = sub_1C5D52060((uint64_t)a3, 216, (const llvm::APInt *)&v72, (llvm *)6, 0, (uint64_t)v56, v57, v71);
LABEL_44:
  v24 = v30;
LABEL_18:
  if (v72)
    llvm::MetadataTracking::untrack((uint64_t)&v72, v72);
  return v24;
}

uint64_t sub_1C4808AB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    return 1;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = *(unsigned __int16 *)(v3 + 24);
    if (v4 != 192)
    {
      result = sub_1C47F6A6C(v4);
      if (!(_DWORD)result)
        return result;
      goto LABEL_7;
    }
    v5 = *(_QWORD *)(v3 + 32);
    if (*(_QWORD *)(v5 + 80) == a1 || *(_QWORD *)(v5 + 120) == a1)
      return 0;
LABEL_7:
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return 1;
  }
}

void sub_1C4808B24(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v9;
  char *v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t *v47;
  char *v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t *v55;
  char *v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int16 v62;
  uint64_t *v63;
  char *v64;
  int v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t *v71;
  char *v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t *v79;
  char *v80;
  int v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  int v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  int v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  __int16 v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  char *v123;
  int v124;
  BOOL v125;
  unsigned __int8 **v126;
  unsigned int v127;
  unsigned int v128;
  unsigned __int8 ***v129;
  unsigned int i;
  unint64_t EVT;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int v135;
  int v136;
  llvm *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  _QWORD *v153;
  unsigned __int8 *v154;
  int v155;
  __int128 v156;
  _BYTE v157[4];
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  void *v176[2];
  _OWORD v177[8];
  void *v178;
  uint64_t v179;
  _QWORD v180[34];

  v180[32] = *MEMORY[0x1E0C80C00];
  sub_1C615A6B4((uint64_t)v157, a3);
  v156 = *(_OWORD *)*(_QWORD *)(a1 + 40);
  if (v156 == 174)
    return;
  v9 = *(char **)(a1 + 32);
  v10 = &v9[40 * *(unsigned __int16 *)(a1 + 56)];
  v178 = v180;
  v179 = 0x1000000000;
  sub_1C6132D88((unsigned int *)&v178, v9, v10);
  v11 = *(unsigned __int8 **)(a1 + 64);
  v154 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v154, v11, 2);
  v155 = *(_DWORD *)(a1 + 60);
  v12 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v160);
  v13 = *v12;
  if (*(unsigned __int8 *)(*(_QWORD *)(*v12 + 40) + 16 * *((unsigned int *)v12 + 2)) != 174)
  {
    v14 = v12[1];
    v15 = *(_QWORD *)(a2 + 832);
    v16 = v15 ? *(_WORD *)(v15 + 8) : 0;
    v17 = sub_1C5D52060(a2, 216, (const llvm::APInt *)&v154, (llvm *)0x31, 0, v13, v14, v16);
    v19 = sub_1C48529A8((uint64_t)v17, v18, a2, 2u, 5u);
    v20 = (char *)v178 + 16 * v160;
    *(_QWORD *)v20 = v19;
    *((_DWORD *)v20 + 2) = v21;
    v22 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v161);
    v23 = *v22;
    if (*(unsigned __int8 *)(*(_QWORD *)(*v22 + 40) + 16 * *((unsigned int *)v22 + 2)) != 174)
    {
      v24 = v22[1];
      v25 = *(_QWORD *)(a2 + 832);
      v26 = v25 ? *(_WORD *)(v25 + 8) : 0;
      v27 = sub_1C5D52060(a2, 216, (const llvm::APInt *)&v154, (llvm *)0x31, 0, v23, v24, v26);
      v29 = sub_1C48529A8((uint64_t)v27, v28, a2, 2u, 5u);
      v30 = (char *)v178 + 16 * v161;
      *(_QWORD *)v30 = v29;
      *((_DWORD *)v30 + 2) = v31;
      v32 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v162);
      v33 = *v32;
      if (*(unsigned __int8 *)(*(_QWORD *)(*v32 + 40) + 16 * *((unsigned int *)v32 + 2)) != 174)
      {
        v34 = v32[1];
        v35 = *(_QWORD *)(a2 + 832);
        if (v35)
          v36 = *(_WORD *)(v35 + 8);
        else
          v36 = 0;
        v37 = sub_1C5D52060(a2, 216, (const llvm::APInt *)&v154, (llvm *)0x31, 0, v33, v34, v36);
        v39 = sub_1C48529A8((uint64_t)v37, v38, a2, 2u, 5u);
        v40 = (char *)v178 + 16 * v162;
        *(_QWORD *)v40 = v39;
        *((_DWORD *)v40 + 2) = v41;
        v42 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v163);
        v43 = *v42;
        v44 = v42[1];
        v45 = *(_QWORD *)(a2 + 832);
        if (v45)
          v46 = *(_WORD *)(v45 + 8);
        else
          v46 = 0;
        v47 = sub_1C5D52060(a2, 199, (const llvm::APInt *)&v154, (llvm *)5, 0, v43, v44, v46);
        v48 = (char *)v178 + 16 * v163;
        *(_QWORD *)v48 = v47;
        *((_DWORD *)v48 + 2) = v49;
        v50 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v170);
        v51 = *v50;
        v52 = v50[1];
        v53 = *(_QWORD *)(a2 + 832);
        if (v53)
          v54 = *(_WORD *)(v53 + 8);
        else
          v54 = 0;
        v55 = sub_1C5D52060(a2, 199, (const llvm::APInt *)&v154, (llvm *)5, 0, v51, v52, v54);
        v56 = (char *)v178 + 16 * v170;
        *(_QWORD *)v56 = v55;
        *((_DWORD *)v56 + 2) = v57;
        v58 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v171);
        v59 = *v58;
        v60 = v58[1];
        v61 = *(_QWORD *)(a2 + 832);
        if (v61)
          v62 = *(_WORD *)(v61 + 8);
        else
          v62 = 0;
        v63 = sub_1C5D52060(a2, 199, (const llvm::APInt *)&v154, (llvm *)5, 0, v59, v60, v62);
        v64 = (char *)v178 + 16 * v171;
        *(_QWORD *)v64 = v63;
        *((_DWORD *)v64 + 2) = v65;
        v66 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v172);
        v67 = *v66;
        v68 = v66[1];
        v69 = *(_QWORD *)(a2 + 832);
        if (v69)
          v70 = *(_WORD *)(v69 + 8);
        else
          v70 = 0;
        v71 = sub_1C5D52060(a2, 199, (const llvm::APInt *)&v154, (llvm *)5, 0, v67, v68, v70);
        v72 = (char *)v178 + 16 * v172;
        *(_QWORD *)v72 = v71;
        *((_DWORD *)v72 + 2) = v73;
        if (*(_BYTE *)(a5 + 281))
        {
          v74 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v173);
          v75 = *v74;
          v76 = v74[1];
          v77 = *(_QWORD *)(a2 + 832);
          v78 = v77 ? *(_WORD *)(v77 + 8) : 0;
          v79 = sub_1C5D52060(a2, 201, (const llvm::APInt *)&v154, (llvm *)4, 0, v75, v76, v78);
          v80 = (char *)v178 + 16 * v173;
          *(_QWORD *)v80 = v79;
          *((_DWORD *)v80 + 2) = v81;
          if (v166 != -1)
          {
            v115 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v166);
            v116 = *v115;
            v117 = v115[1];
            v118 = sub_1C6366AB4(a2, 1, (const llvm::APInt *)&v154, (llvm *)5, 0, 0, 0);
            v121 = *(_QWORD *)(a2 + 832);
            if (v121)
              LOWORD(v121) = *(_WORD *)(v121 + 8);
            v122 = sub_1C5D56C70(a2, 212, (const llvm::APInt *)&v154, (llvm *)9, 0, v116, v117, v120, (uint64_t)v118, v119, v121);
            v123 = (char *)v178 + 16 * v166;
            *(_QWORD *)v123 = v122;
            *((_DWORD *)v123 + 2) = v124;
          }
        }
        if (v158 != 1)
        {
          v82 = *(_QWORD *)(a1 + 32) + 40 * v164;
          v83 = sub_1C48529A8(*(_QWORD *)v82, *(_QWORD *)(v82 + 8), a2, v158, 0xAu);
          v84 = (char *)v178 + 16 * v164;
          *(_QWORD *)v84 = v83;
          *((_DWORD *)v84 + 2) = v85;
        }
        v86 = *(_QWORD *)(a1 + 32);
        if (v157[0])
        {
          v87 = sub_1C48529A8(*(_QWORD *)(v86 + 40 * v167), *(_QWORD *)(v86 + 40 * v167 + 8), a2, 2u, 0xAu);
          v89 = (char *)v178 + 16 * v167;
          *(_QWORD *)v89 = v87;
          *((_DWORD *)v89 + 2) = v90;
          if (v158 < 2
            || (v91 = *(_QWORD *)(a1 + 32) + 40 * v168,
                v92 = sub_1C48529A8(*(_QWORD *)v91, *(_QWORD *)(v91 + 8), a2, 2u, 0xAu),
                v93 = (char *)v178 + 16 * v168,
                *(_QWORD *)v93 = v92,
                *((_DWORD *)v93 + 2) = v94,
                v158 < 3))
          {
LABEL_49:
            if (v174 != -1)
            {
              v105 = *(_QWORD *)(a1 + 32) + 40 * v174;
              v106 = sub_1C48529A8(*(_QWORD *)v105, *(_QWORD *)(v105 + 8), a2, 4u, 0xAu);
              v107 = (char *)v178 + 16 * v174;
              *(_QWORD *)v107 = v106;
              *((_DWORD *)v107 + 2) = v108;
            }
            v109 = *(uint64_t **)(a1 + 40);
            if (v175 == 1)
            {
              if (v159 == 1)
              {
                v113 = *v109;
                v114 = v109[1];
              }
              else
              {
                v114 = 0;
                v113 = 174;
              }
              v111 = sub_1C636A8B4(a2, v113, v114, v109[2], v109[3]);
            }
            else
            {
              v110 = *(unsigned __int16 *)(a1 + 58);
              if (v159 != 4)
                goto LABEL_65;
              if (v175 == 4)
              {
                v177[1] = xmmword_1C642B1B8;
                v177[2] = unk_1C642B1C8;
                v177[3] = xmmword_1C642B1D8;
                *(_OWORD *)v176 = xmmword_1C642B198;
                v177[0] = unk_1C642B1A8;
                v111 = sub_1C636AB20(a2, (uint64_t *)v176, 5);
              }
              else
              {
                if (v175 != 2)
                  goto LABEL_65;
                v111 = sub_1C636B134(a2, 174, 0, 174, 0, 1, 0);
              }
            }
            v109 = (uint64_t *)v111;
            v110 = v112;
LABEL_65:
            v126 = sub_1C5D5C710(a2, 47, (uint64_t)&v154, (uint64_t)v109, v110, (uint64_t *)v178, v179, v88, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
            v127 = 0;
            v128 = *(_DWORD *)(a4 + 8);
            do
            {
              if (v128 >= *(_DWORD *)(a4 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v128 + 1, 16);
                v128 = *(_DWORD *)(a4 + 8);
              }
              v129 = (unsigned __int8 ***)(*(_QWORD *)a4 + 16 * v128);
              *v129 = v126;
              v129[1] = (unsigned __int8 **)v127;
              v128 = *(_DWORD *)(a4 + 8) + 1;
              *(_DWORD *)(a4 + 8) = v128;
              ++v127;
            }
            while (v127 <= v175);
            if (v175 && v159 >= 2)
            {
              for (i = 0; i != v175; ++i)
              {
                v176[0] = v177;
                v176[1] = (void *)0x800000000;
                if ((_BYTE)v156)
                {
                  LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v156);
                  v134 = 0;
                  v133 = 0;
                }
                else
                {
                  EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v156 + 1) + 24), 0, v125);
                  v133 = v132;
                  v134 = EVT & 0xFFFFFFFFFFFFFF00;
                }
                if (v159)
                {
                  v136 = 0;
                  v137 = (llvm *)(v134 | EVT);
                  do
                  {
                    v138 = sub_1C636E638(a2, v136 + 33, (const llvm::APInt *)&v154, v137, v133, (uint64_t)v126, i);
                    v140 = LODWORD(v176[1]);
                    if (LODWORD(v176[1]) >= (unint64_t)HIDWORD(v176[1]))
                    {
                      v152 = v139;
                      v153 = v138;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v176, (uint64_t)v177, LODWORD(v176[1]) + 1, 16);
                      v139 = v152;
                      v138 = v153;
                      v140 = LODWORD(v176[1]);
                    }
                    v141 = (char *)v176[0] + 16 * v140;
                    *v141 = v138;
                    v141[1] = v139;
                    v135 = ++LODWORD(v176[1]);
                    ++v136;
                  }
                  while (v136 != v159);
                  if (v136 == 3)
                  {
                    v142 = sub_1C5D51E4C(a2, 51, (uint64_t)&v154, v137, v133);
                    v144 = v143;
                    v145 = LODWORD(v176[1]);
                    if (LODWORD(v176[1]) >= (unint64_t)HIDWORD(v176[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v176, (uint64_t)v177, LODWORD(v176[1]) + 1, 16);
                      v145 = LODWORD(v176[1]);
                    }
                    v146 = (char *)v176[0] + 16 * v145;
                    *v146 = v142;
                    v146[1] = v144;
                    v135 = ++LODWORD(v176[1]);
                  }
                }
                else
                {
                  v135 = v176[1];
                }
                v147 = *(_QWORD *)(a2 + 832);
                if (v147)
                  v148 = *(unsigned __int16 *)(v147 + 8);
                else
                  v148 = 0;
                v149 = sub_1C636D0C8(a2, (const char *)0x92, (const llvm::APInt *)&v154, (llvm *)v156, *((uint64_t *)&v156 + 1), (uint64_t *)v176[0], v135, v148);
                v150 = *(_QWORD *)a4 + 16 * i;
                *(_QWORD *)v150 = v149;
                *(_DWORD *)(v150 + 8) = v151;
                if (v176[0] != v177)
                  free(v176[0]);
              }
            }
            goto LABEL_14;
          }
          v95 = *(_QWORD *)(a1 + 32) + 40 * v169;
          v96 = sub_1C48529A8(*(_QWORD *)v95, *(_QWORD *)(v95 + 8), a2, 2u, 0xAu);
          v98 = v169;
        }
        else
        {
          v99 = (uint64_t *)(v86 + 40 * v165);
          v100 = *v99;
          v101 = v99[1];
          v102 = *(_QWORD *)(a2 + 832);
          if (v102)
            v103 = *(_WORD *)(v102 + 8);
          else
            v103 = 0;
          v96 = sub_1C5D52060(a2, 199, (const llvm::APInt *)&v154, (llvm *)5, 0, v100, v101, v103);
          v98 = v165;
        }
        v104 = (char *)v178 + 16 * v98;
        *(_QWORD *)v104 = v96;
        *((_DWORD *)v104 + 2) = v97;
        goto LABEL_49;
      }
    }
  }
LABEL_14:
  if (v154)
    llvm::MetadataTracking::untrack((uint64_t)&v154, v154);
  if (v178 != v180)
    free(v178);
}

void sub_1C480949C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t **v54;
  __int128 *v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  unsigned __int8 *v66;
  int v67;
  unsigned __int8 *v68;
  int v69;
  unsigned __int8 *v70;
  int v71;
  unsigned __int8 *v72;
  int v73;
  unsigned __int8 *v74;
  int v75;
  void *v76;
  uint64_t v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v11 = *(unsigned __int8 **)(a2 + 64);
  v74 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v74, v11, 2);
  v12 = *(_DWORD *)(a2 + 60);
  v75 = v12;
  v13 = *(_DWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = (uint64_t *)(v14 + 40 * *(unsigned int *)(a1 + 44));
  v16 = *v15;
  v17 = v15[1];
  if (v13 == -1)
  {
    v66 = v74;
    if (v74)
    {
      llvm::MetadataTracking::track((uint64_t)&v66, v74, 2);
      v12 = v75;
    }
    v67 = v12;
    v18 = sub_1C480C460(1924, (const llvm::APInt *)&v66, v16, v17, a3);
    v20 = v19;
    if (v66)
      llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
    if (*(_BYTE *)(a1 + 2))
      v21 = 10;
    else
      v21 = 5;
    v22 = a5(v18, v20, a3, 3, v21);
    v23 = *a4 + 16 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v23 = v22;
    *(_DWORD *)(v23 + 8) = v24;
  }
  else
  {
    v25 = (uint64_t *)(v14 + 40 * v13);
    v26 = *v25;
    v27 = v25[1];
    v28 = (uint64_t *)(v14 + 40 * (v13 + 1));
    v29 = *v28;
    v30 = v28[1];
    v31 = v14 + 40 * (v13 + 2);
    v32 = *(void **)v31;
    v33 = *(_QWORD *)(v31 + 8);
    v72 = v74;
    if (v74)
    {
      llvm::MetadataTracking::track((uint64_t)&v72, v74, 2);
      v12 = v75;
    }
    v73 = v12;
    v34 = sub_1C480CCB4((const llvm::APInt *)&v72, v16, v17, v32, v33, v26, v27, a8, v29, v30, a3);
    v36 = v35;
    if (v72)
      llvm::MetadataTracking::untrack((uint64_t)&v72, v72);
    v37 = a5(v34, v36, a3, 3, 10);
    v38 = 0;
    v39 = 0;
    v40 = *a4 + 16 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v40 = v37;
    *(_DWORD *)(v40 + 8) = v41;
    do
    {
      v42 = 0;
      v43 = 0;
      v44 = v38;
      v76 = &v78;
      v77 = 0x400000000;
      do
      {
        v45 = v42;
        v46 = sub_1C6366AB4(a3, 2 * v39 + 3 + v43, (const llvm::APInt *)&v74, (llvm *)5, 0, 0, 0);
        v49 = *(_QWORD *)(a3 + 832);
        if (v49)
          LOWORD(v49) = *(_WORD *)(v49 + 8);
        v50 = sub_1C5D56C70(a3, 148, (const llvm::APInt *)&v74, (llvm *)0xA, 0, (uint64_t)v34, v36, v48, (uint64_t)v46, v47, v49);
        v52 = v51;
        v53 = v77;
        if (v77 >= (unint64_t)HIDWORD(v77))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)&v78, v77 + 1, 16);
          v53 = v77;
        }
        v54 = (uint64_t **)((char *)v76 + 16 * v53);
        *v54 = v50;
        v54[1] = v52;
        LODWORD(v77) = v77 + 1;
        v42 = 1;
        v43 = 1;
      }
      while ((v45 & 1) == 0);
      v55 = (__int128 *)v76;
      v70 = v74;
      if (v74)
        llvm::MetadataTracking::track((uint64_t)&v70, v74, 2);
      v71 = v75;
      v56 = sub_1C4852770(v55, 2u, 10, a3, (const llvm::APInt *)&v70);
      v57 = *a4 + 16 * (*(_DWORD *)(a1 + 72) + v39);
      *(_QWORD *)v57 = v56;
      *(_DWORD *)(v57 + 8) = v58;
      if (v70)
        llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
      if (v76 != &v78)
        free(v76);
      v38 = 1;
      v39 = 1;
    }
    while ((v44 & 1) == 0);
    v59 = sub_1C61312D0(a3, (llvm *)0xA, 0);
    v76 = &v78;
    *(_QWORD *)&v78 = v59;
    *((_QWORD *)&v78 + 1) = v60;
    v79 = v59;
    v80 = v60;
    v77 = 0x400000002;
    v68 = v74;
    if (v74)
      llvm::MetadataTracking::track((uint64_t)&v68, v74, 2);
    v69 = v75;
    v61 = sub_1C4852770(&v78, 2u, 10, a3, (const llvm::APInt *)&v68);
    v62 = *a4 + 16 * (*(_DWORD *)(a1 + 72) + 2);
    *(_QWORD *)v62 = v61;
    *(_DWORD *)(v62 + 8) = v63;
    if (v68)
      llvm::MetadataTracking::untrack((uint64_t)&v68, v68);
    if (v76 != &v78)
      free(v76);
  }
  if (v74)
    llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
}

_QWORD *sub_1C48098C8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  int v46;
  _QWORD *v47;
  int v48;
  int v49;
  _QWORD *v50;
  int v51;
  int v52;
  _QWORD *v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  unsigned __int8 *v79;
  int v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[112];
  _QWORD *v84;
  int v85;
  uint64_t *v86;
  int v87;
  _QWORD *v88;
  int v89;
  uint64_t *v90;
  int v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 **)(a2 + 64);
  v77 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v77, v8, 2);
  v78 = *(_DWORD *)(a2 + 60);
  v9 = *(uint64_t **)(a2 + 32);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[10];
  v13 = v9[11];
  v14 = v9[15];
  v15 = v9[16];
  v16 = v9[20];
  v17 = v9[21];
  v81 = v83;
  v82 = 0x700000000;
  sub_1C4825360((uint64_t)&v81, v12, v13, v14, v15, v16, v17, a1);
  v18 = sub_1C636B134(a1, 5, 0, 4, 0, 1, 0);
  v20 = v18;
  v22 = v21;
  if (a3)
  {
    if (a4)
    {
      v76 = v18;
      v23 = *(_QWORD *)(a2 + 32);
      v25 = *(_QWORD **)(v23 + 200);
      v24 = *(_QWORD *)(v23 + 208);
      v26 = v24;
      v27 = 263;
    }
    else
    {
      v28 = sub_1C636D8DC(a1, 5, 0, 4, 0, 174, 0, v19, 1, 0);
      v22 = v29;
      v30 = *(_QWORD *)(a2 + 32);
      v31 = *(_QWORD *)(v30 + 200);
      v24 = *(_QWORD *)(v30 + 208);
      v32 = *(unsigned __int8 **)(v31 + 64);
      v79 = v32;
      if (v32)
        llvm::MetadataTracking::track((uint64_t)&v79, v32, 2);
      v80 = *(_DWORD *)(v31 + 60);
      v33 = sub_1C6366AB4(a1, 0, (const llvm::APInt *)&v79, (llvm *)5, 0, 0, 0);
      v36 = 0;
      v37 = *(_QWORD *)(a1 + 832);
      if (v37)
        v36 = *(_WORD *)(v37 + 8);
      v75 = v10;
      v76 = v28;
      v74 = v11;
      v72 = sub_1C5D56C70(a1, 53, (const llvm::APInt *)&v79, (llvm *)5, 0, v31, v24, v35, (uint64_t)v33, v34, v36);
      v73 = v38;
      v39 = sub_1C6366AB4(a1, 1, (const llvm::APInt *)&v79, (llvm *)5, 0, 0, 0);
      v42 = 0;
      v43 = *(_QWORD *)(a1 + 832);
      if (v43)
        v42 = *(_WORD *)(v43 + 8);
      v44 = sub_1C5D56C70(a1, 53, (const llvm::APInt *)&v79, (llvm *)5, 0, v31, v24, v41, (uint64_t)v39, v40, v42);
      v46 = v45;
      v47 = sub_1C6366AB4(a1, 27, (const llvm::APInt *)&v79, (llvm *)5, 0, 1, 0);
      v49 = v48;
      v50 = sub_1C6366AB4(a1, 33, (const llvm::APInt *)&v79, (llvm *)5, 0, 1, 0);
      v52 = v51;
      v53 = sub_1C6366AB4(a1, 34, (const llvm::APInt *)&v79, (llvm *)5, 0, 1, 0);
      v84 = v47;
      v85 = v49;
      v86 = v72;
      v87 = v73;
      v88 = v50;
      v89 = v52;
      v90 = v44;
      v91 = v46;
      v92 = v53;
      v93 = v54;
      v25 = sub_1C636E56C(a1, 18, (uint64_t)&v79, (llvm *)0xAE, 0, (uint64_t *)&v84, 5);
      if (v79)
        llvm::MetadataTracking::untrack((uint64_t)&v79, v79);
      v26 = 0;
      v27 = 262;
      v11 = v74;
      v10 = v75;
    }
    v55 = v26 | v24 & 0xFFFFFFFF00000000;
    v56 = v82;
    if (v82 >= HIDWORD(v82))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)v83, v82 + 1, 16);
      v56 = v82;
    }
    v57 = (char *)v81 + 16 * v56;
    *v57 = v25;
    v57[1] = v55;
    LODWORD(v82) = v82 + 1;
    v20 = v76;
  }
  else
  {
    v27 = 264;
  }
  v58 = sub_1C6366AB4(a1, 0, (const llvm::APInt *)&v77, (llvm *)5, 0, 1, 0);
  v60 = v59;
  v61 = v82;
  if (v82 >= HIDWORD(v82))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)v83, v82 + 1, 16);
    v61 = v82;
  }
  v62 = (char *)v81 + 16 * v61;
  *v62 = v58;
  v62[1] = v60;
  LODWORD(v82) = v82 + 1;
  v63 = sub_1C5D428B0(a1, 0, (llvm *)5, 0);
  v65 = v64;
  v66 = v82;
  if (v82 >= HIDWORD(v82))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)v83, v82 + 1, 16);
    v66 = v82;
  }
  v67 = (uint64_t *)((char *)v81 + 16 * v66);
  *v67 = v63;
  v67[1] = v65;
  v68 = (v82 + 1);
  LODWORD(v82) = v68;
  if (v68 >= HIDWORD(v82))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)v83, v68 + 1, 16);
    LODWORD(v68) = v82;
  }
  v69 = (char *)v81 + 16 * v68;
  *v69 = v10;
  v69[1] = v11;
  LODWORD(v82) = v82 + 1;
  v70 = sub_1C5D61678(a1, v27, (uint64_t)&v77, v20, v22, (uint64_t *)v81, v82);
  if (v81 != v83)
    free(v81);
  if (v77)
    llvm::MetadataTracking::untrack((uint64_t)&v77, v77);
  return v70;
}

uint64_t *sub_1C4809D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm **v6;
  llvm *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v22;
  llvm *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  __int16 v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  uint64_t v83;
  uint64_t (**v84)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v85;
  uint64_t v86;
  uint64_t (**v87)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  unint64_t v88;
  void **v89;
  int v90;
  uint64_t v91;
  llvm *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  llvm *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  _OWORD v102[2];
  __int16 v103;
  void *v104[2];
  char v105;
  void *__p;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  int v111;
  __int128 v112;
  uint64_t v113;
  unsigned __int8 *v114;
  int v115;
  __int128 v116;
  uint64_t v117;
  uint64_t (**v118)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v119;
  _QWORD v120[2];
  int v121;
  int v122;
  const char *v123;
  const char *v124;
  uint64_t v125;
  char v126;
  char v127;
  void *v128;
  uint64_t v129;
  _BYTE v130[260];
  int v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  _WORD v135[64];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v6 = *(llvm ***)(a2 + 40);
  v7 = *v6;
  v8 = (uint64_t)v6[1];
  v9 = *(unsigned __int16 *)(a2 + 26);
  v10 = *(_QWORD *)(a2 + 96);
  if ((*(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v12 = (unint64_t)(sub_1C4825F50((unint64_t *)(v10 + 24)) + 7) >> 3;
    if ((_DWORD)v11 == 1)
  }
  else
  {
    v12 = -1;
  }
  v13 = 63
      - __clz(((1 << *(_BYTE *)(v10 + 34)) | *(_QWORD *)(v10 + 8)) & -((1 << *(_BYTE *)(v10 + 34)) | *(_QWORD *)(v10 + 8)));
  v14 = *(unsigned __int8 **)(a2 + 64);
  v114 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v114, v14, 2);
  v115 = *(_DWORD *)(a2 + 60);
  if (v13 <= 1u && (1 << v13) % v12)
  {
    v91 = v8;
    v92 = v7;
    v90 = (v9 >> 10) & 3;
    v22 = *(uint64_t **)(a2 + 32);
    v97 = v22[1];
    v98 = *v22;
    v23 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56), 3, 0, v12, 0);
    v95 = v24;
    v96 = v23;
    v25 = sub_1C61312D0(*(_QWORD *)(a3 + 16), v23, v24);
    v27 = v26;
    v28 = *(_QWORD *)(a2 + 32);
    v29 = *(_QWORD *)(v28 + 48);
    v101 = *(uint64_t **)(v28 + 40);
    v118 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v120;
    v119 = 0x800000000;
    v133 = (uint64_t *)v135;
    v134 = 0x800000000;
    if (v12)
    {
      v93 = v12;
      v94 = a1;
      v41 = 0;
      v42 = 1;
      do
      {
        v100 = (uint64_t)v25;
        v43 = *(_QWORD *)(a3 + 16);
        sub_1C4824250(*(uint64_t **)(a2 + 96), v41, (uint64_t)&v112);
        v44 = *(_WORD *)(*(_QWORD *)(a2 + 96) + 32);
        memset(v102, 0, sizeof(v102));
        v116 = v112;
        v117 = v113;
        v45 = sub_1C63681B0(v43, 3, 0, (uint64_t)&v114, v98, v97, (uint64_t)v101, v29, &v116, 256, 0, v44, (uint64_t)v102, 0);
        v47 = v46;
        v48 = sub_1C4809D88(a1, v45, a3);
        v50 = v47 & 0xFFFFFFFF00000000 | v49;
        if (v48)
          v51 = v48;
        else
          v51 = (uint64_t)v45;
        if (!v48)
          v50 = v47;
        v99 = v50;
        v52 = v101[5] + 16 * v29;
        v53 = *(llvm **)v52;
        v54 = *(_QWORD *)(v52 + 8);
        v55 = a3;
        v56 = *(_QWORD *)(a3 + 16);
        v57 = sub_1C6366AB4(v56, 1, (const llvm::APInt *)&v114, *(llvm **)v52, v54, 0, 0);
        v60 = 0;
        v61 = *(_QWORD *)(v56 + 832);
        if (v61)
          v60 = *(_WORD *)(v61 + 8);
        v101 = sub_1C5D56C70(v56, 56, (const llvm::APInt *)&v114, v53, v54, (uint64_t)v101, v29, v59, (uint64_t)v57, v58, v60);
        v63 = v62;
        a3 = v55;
        v64 = *(_QWORD *)(v55 + 16);
        v65 = sub_1C6366AB4(v64, v41, (const llvm::APInt *)&v114, (llvm *)5, 0, 0, 0);
        v68 = 0;
        v69 = *(_QWORD *)(v64 + 832);
        if (v69)
          v68 = *(_WORD *)(v69 + 8);
        v25 = sub_1C5D58E08(v64, (const char *)0x93, (const llvm::APInt *)&v114, v96, v95, v100, v27, v67, v51, v99, (uint64_t)v65, v66, SHIDWORD(v66), v68);
        v71 = v70;
        v72 = v119;
        if (v119 >= (unint64_t)HIDWORD(v119))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)v120, v119 + 1, 16);
          v72 = v119;
        }
        a1 = v94;
        v73 = (uint64_t *)&v118[2 * v72];
        *v73 = v51;
        v73[1] = 0;
        LODWORD(v119) = v119 + 1;
        v74 = v134;
        if (v134 >= (unint64_t)HIDWORD(v134))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, (uint64_t)v135, v134 + 1, 16);
          v74 = v134;
        }
        v29 = v29 & 0xFFFFFFFF00000000 | v63;
        v27 = v27 & 0xFFFFFFFF00000000 | v71;
        v75 = &v133[2 * v74];
        *v75 = v51;
        v75[1] = 1;
        LODWORD(v134) = v134 + 1;
        v41 = v42;
      }
      while (v93 > v42++);
    }
    v110 = v114;
    if (v114)
      llvm::MetadataTracking::track((uint64_t)&v110, v114, 2);
    v111 = v115;
    v30 = sub_1C6131488(a1, (uint64_t)v25, v27, v92, v91, v90, (const llvm::APInt *)&v110, a3);
    v32 = v31;
    v33 = v27 & 0xFFFFFFFF00000000 | v31;
    if (v110)
      llvm::MetadataTracking::untrack((uint64_t)&v110, v110);
    v34 = (unsigned __int8 *)(v30[5] + 16 * v32);
    v35 = *v34;
    if (v35 != v92 || ((v36 = *((_QWORD *)v34 + 1), !v35) ? (v37 = v36 == v91) : (v37 = 1), !v37))
    {
      v38 = *(_QWORD *)(a3 + 16);
      v39 = *(_QWORD *)(v38 + 832);
      if (v39)
        v40 = *(_WORD *)(v39 + 8);
      else
        v40 = 0;
      v30 = sub_1C5D52060(v38, 216, (const llvm::APInt *)&v114, v92, v91, (uint64_t)v30, v33, v40);
      LODWORD(v33) = v77;
    }
    v78 = *(_QWORD *)(a3 + 16);
    v79 = *(_QWORD *)(v78 + 832);
    if (v79)
      v80 = *(unsigned __int16 *)(v79 + 8);
    else
      v80 = 0;
    v81 = sub_1C636D0C8(v78, (const char *)2, (const llvm::APInt *)&v114, (llvm *)1, 0, v133, v134, v80);
    v16 = sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v114, *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v30, v33, v83, (uint64_t)v81, v82);
    if (v133 != (uint64_t *)v135)
      free(v133);
    v84 = v118;
    if (v118 != v120)
      goto LABEL_77;
    goto LABEL_20;
  }
  v15 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16);
  if (v15 > 2)
  {
    if (v15 == 3)
    {
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2208))(a1, a2, a3);
      goto LABEL_19;
    }
    if (v15 == 64)
    {
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2216))(a1, a2, a3);
LABEL_19:
      v16 = (uint64_t *)v20;
      goto LABEL_20;
    }
LABEL_79:
    v133 = (uint64_t *)"Load from unsupported address space: ";
    v135[8] = 259;
    v103 = 264;
    LODWORD(v102[0]) = v15;
    sub_1C6131AAC((uint64_t *)&v133, (uint64_t *)v102, (uint64_t)&v118);
    llvm::report_fatal_error((uint64_t)&v118, 1);
  }
  if ((v15 - 1) >= 2)
  {
    if (!v15)
    {
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2192))(a1, a2, a3);
      goto LABEL_19;
    }
    goto LABEL_79;
  }
  LOBYTE(v133) = 0;
  v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a1 + 2200))(a1, a2, a3, &v133);
  if ((_BYTE)v133)
  {
    v17 = (int)v114;
    if (v114)
    {
      v18 = *(_QWORD *)&v114[-8 * *((unsigned int *)v114 + 2)];
      if (*(_BYTE *)v18 != 15)
        v18 = *(_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8));
      v19 = *((_DWORD *)v114 + 1);
      v17 = *((unsigned __int16 *)v114 + 1);
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) + 640) + 16);
    v86 = *(_QWORD *)(v85 + 56);
    LODWORD(v119) = 11;
    BYTE4(v119) = 2;
    v120[0] = v86;
    v120[1] = v18;
    v121 = v19;
    v122 = v17;
    v123 = "agx1-lower";
    v124 = "DeviceLoadAddrMode";
    v125 = 18;
    v126 = 0;
    v127 = 0;
    v128 = v130;
    v129 = 0x400000000;
    v130[256] = 0;
    v131 = -1;
    v132 = v85;
    v118 = &off_1E814E570;
    v105 = 6;
    strcpy((char *)v104, "String");
    __p = operator new(0x38uLL);
    v107 = xmmword_1C642B420;
    strcpy((char *)__p, "Zero-extended device memory load cannot fold addr mode");
    v108 = 0;
    v109 = 0;
    sub_1C47E3888((uint64_t)&v118, (uint64_t)v104);
    if (SHIBYTE(v107) < 0)
      operator delete(__p);
    if (v105 < 0)
      operator delete(v104[0]);
    llvm::OptimizationRemarkEmitter::emit(*(llvm::OptimizationRemarkEmitter **)(*(_QWORD *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)&v118);
    v118 = &off_1E814E790;
    v87 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v128;
    if ((_DWORD)v129)
    {
      v88 = (unint64_t)v129 << 6;
      do
      {
        v89 = (void **)((char *)v87 + v88);
        if (*((char *)v87 + v88 - 17) < 0)
          operator delete(*(v89 - 5));
        if (*((char *)v89 - 41) < 0)
          operator delete(*(v89 - 8));
        v88 -= 64;
      }
      while (v88);
      v87 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v128;
    }
    if (v87 != (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v130)
    {
      v84 = v87;
LABEL_77:
      free(v84);
    }
  }
LABEL_20:
  if (v114)
    llvm::MetadataTracking::untrack((uint64_t)&v114, v114);
  return v16;
}

uint64_t sub_1C480A59C(uint64_t **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  unsigned __int8 *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unsigned int v38;
  llvm **v39;
  uint64_t v40;
  llvm *v41;
  char EVT;
  const char *v43;
  llvm *v44;
  uint64_t *v45;
  int v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned int v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  llvm *v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  llvm *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __int16 v84;
  int v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t result;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  uint64_t *v95;
  unsigned int v96;
  uint64_t v97;
  llvm *v98;
  uint64_t v99;
  int v100;
  BOOL v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  char v123;
  unsigned __int8 *v124;
  int v125;
  llvm *v126;
  uint64_t v127;
  unsigned __int8 *v128;
  int v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unsigned __int8 *v134;
  int v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v14 = *(unsigned __int8 **)(a5 + 64);
  v128 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v128, v14, 2);
  v129 = *(_DWORD *)(a5 + 60);
  v15 = *(_QWORD *)(a1[2][5] + 344);
  v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 400))(v15, *(_QWORD *)(a2 + 80));
  v18 = v17;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 336))(v15);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, v18);
  v24 = sub_1C6366AB4((uint64_t)a1[2], (unsigned __int16)(*(_WORD *)(a2 + 88) + v20 * v16), (const llvm::APInt *)&v128, (llvm *)4, 0, 0, 0);
  v26 = v25;
  if (a3)
  {
    v27 = (uint64_t)a1[2];
    v28 = *(void **)(a5 + 64);
    v130 = v28;
    if (v28)
      llvm::MetadataTracking::track((uint64_t)&v130, (unsigned __int8 *)v28, 2);
    LODWORD(v131) = *(_DWORD *)(a5 + 60);
    v29 = *(_QWORD *)(v27 + 832);
    if (v29)
      v30 = *(_WORD *)(v29 + 8);
    else
      v30 = 0;
    v32 = sub_1C5D52060(v27, 201, (const llvm::APInt *)&v130, (llvm *)4, 0, a3, a4, v30);
    v34 = v33;
    if (v130)
      llvm::MetadataTracking::untrack((uint64_t)&v130, (unsigned __int8 *)v130);
    v35 = (uint64_t)a1[2];
    v36 = *(void **)(a5 + 64);
    v130 = v36;
    if (v36)
      llvm::MetadataTracking::track((uint64_t)&v130, (unsigned __int8 *)v36, 2);
    LODWORD(v131) = *(_DWORD *)(a5 + 60);
    v37 = *(_QWORD *)(v35 + 832);
    if (v37)
      LOWORD(v37) = *(_WORD *)(v37 + 8);
    v24 = sub_1C5D56C70(v35, 56, (const llvm::APInt *)&v130, (llvm *)4, 0, (uint64_t)v24, v26, v31, (uint64_t)v32, v34, v37);
    v26 = v26 & 0xFFFFFFFF00000000 | v38;
    if (v130)
      llvm::MetadataTracking::untrack((uint64_t)&v130, (unsigned __int8 *)v130);
  }
  v39 = *(llvm ***)(a5 + 40);
  v41 = *v39;
  v40 = (uint64_t)v39[1];
  v126 = v41;
  v127 = v40;
  if ((_BYTE)v41)
  {
    if (v41 - 15 < 0x9C)
    {
      EVT = sub_1C47F37A0((unsigned __int8 *)&v126);
      v43 = 0;
      goto LABEL_85;
    }
  }
  else if ((*(_DWORD *)(v40 + 8) & 0xFE) == 0x12)
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v40 + 24), 0, v21);
LABEL_85:
    v123 = EVT;
    sub_1C612FE00((llvm::EVT *)&v126, v43);
    __asm { BR              X10 }
  }
  v44 = *(llvm **)(a5 + 80);
  if (v44 != 3)
  {
    if (v44 == 6)
    {
      v45 = sub_1C4825630((uint64_t)a1, a5, (uint64_t)v24, v26, a6, a7, v22, v23);
LABEL_80:
      v52 = v45;
      LODWORD(v54) = v46;
      goto LABEL_81;
    }
    v50 = *(_QWORD *)(a5 + 88);
    v51 = (uint64_t)a1[2];
    v124 = v128;
    if (v128)
      llvm::MetadataTracking::track((uint64_t)&v124, v128, 2);
    v125 = v129;
    v52 = sub_1C48258FC(v51, a7, (const llvm::APInt *)&v124, v44, v50, (uint64_t)v24, v26, v23, (uint64_t)v44, v50);
    v54 = v53;
    if (v124)
      llvm::MetadataTracking::untrack((uint64_t)&v124, v124);
    v55 = (*(unsigned __int16 *)(a5 + 26) >> 10) & 3;
    if (v55 != 1)
    {
      if (v55 == 3)
      {
        v56 = (uint64_t)a1[2];
        v57 = v126;
        v58 = v127;
        v70 = *(_QWORD *)(v56 + 832);
        if (v70)
          v60 = *(_WORD *)(v70 + 8);
        else
          v60 = 0;
        v71 = 199;
      }
      else
      {
        if (v55 != 2)
          goto LABEL_81;
        v56 = (uint64_t)a1[2];
        v57 = v126;
        v58 = v127;
        v59 = *(_QWORD *)(v56 + 832);
        if (v59)
          v60 = *(_WORD *)(v59 + 8);
        else
          v60 = 0;
        v71 = 198;
      }
      goto LABEL_79;
    }
    if ((_BYTE)v126)
    {
      if (((_BYTE)v126 + 104) >= 0x13u
        && ((_BYTE)v126 - 8) >= 7u
        && ((_BYTE)v126 - 75) >= 0x2Du)
      {
LABEL_51:
        v71 = 200;
        goto LABEL_74;
      }
    }
    else
    {
      v85 = *(_DWORD *)(v127 + 8);
      if ((v85 & 0xFE) == 0x12)
        v85 = *(_DWORD *)(**(_QWORD **)(v127 + 16) + 8);
      if (v85 > 6u)
        goto LABEL_51;
    }
    v71 = 215;
LABEL_74:
    v56 = (uint64_t)a1[2];
    v57 = v126;
    v58 = v127;
    v86 = *(_QWORD *)(v56 + 832);
    if (v86)
      v60 = *(_WORD *)(v86 + 8);
    else
      v60 = 0;
LABEL_79:
    v45 = sub_1C5D52060(v56, v71, (const llvm::APInt *)&v128, v57, v58, (uint64_t)v52, v54, v60);
    goto LABEL_80;
  }
  v47 = *(void **)(a5 + 64);
  v130 = v47;
  if (v47)
  {
    llvm::MetadataTracking::track((uint64_t)&v130, (unsigned __int8 *)v47, 2);
    v48 = *(_DWORD *)(a5 + 60);
    LODWORD(v131) = v48;
    v49 = (uint64_t)a1[2];
    v134 = (unsigned __int8 *)v130;
    if (v130)
    {
      llvm::MetadataTracking::track((uint64_t)&v134, (unsigned __int8 *)v130, 2);
      v48 = v131;
    }
  }
  else
  {
    v48 = *(_DWORD *)(a5 + 60);
    LODWORD(v131) = v48;
    v49 = (uint64_t)a1[2];
    v134 = 0;
  }
  v135 = v48;
  v52 = sub_1C48258FC(v49, a7, (const llvm::APInt *)&v134, (llvm *)4, 0, (uint64_t)v24, v26, v23, 3, 0);
  v62 = v61;
  if (v134)
    llvm::MetadataTracking::untrack((uint64_t)&v134, v134);
  v63 = (*(unsigned __int16 *)(a5 + 26) >> 10) & 3;
  v64 = *(_QWORD *)(a5 + 40);
  v65 = *(llvm **)v64;
  v66 = *(_QWORD *)(v64 + 8);
  if ((_DWORD)a7 == 395)
  {
    v92 = (uint64_t)a1[2];
    v93 = *(_QWORD *)(v92 + 832);
    if (v93)
      v94 = *(_WORD *)(v93 + 8);
    else
      v94 = 0;
    v95 = sub_1C5D52060(v92, 216, (const llvm::APInt *)&v130, (llvm *)0x1B, 0, (uint64_t)v52, v62, v94);
    v97 = v24[5] + 16 * v26;
    v98 = *(llvm **)v97;
    v99 = *(_QWORD *)(v97 + 8);
    v100 = *((unsigned __int16 *)v24 + 12);
    v101 = v100 == 35 || v100 == 11;
    v122 = (uint64_t)v95;
    v121 = v96;
    if (v101)
    {
      v102 = v24[10];
      v103 = (_QWORD *)(v102 + 24);
      if (*(_DWORD *)(v102 + 32) >= 0x41u)
        v103 = (_QWORD *)*v103;
      v54 = v62 & 0xFFFFFFFF00000000;
      v104 = sub_1C6366AB4((uint64_t)a1[2], *v103 & 1, (const llvm::APInt *)&v130, v98, v99, 0, 0);
    }
    else
    {
      v113 = sub_1C6366AB4((uint64_t)a1[2], 1, (const llvm::APInt *)&v130, v98, v99, 0, 0);
      v116 = (uint64_t)a1[2];
      v117 = *(_QWORD *)(v116 + 832);
      if (v117)
        LOWORD(v117) = *(_WORD *)(v117 + 8);
      v104 = sub_1C5D56C70(v116, 171, (const llvm::APInt *)&v130, v98, v99, (uint64_t)v24, v26, v115, (uint64_t)v113, v114, v117);
      v54 = v62 & 0xFFFFFFFF00000000;
    }
    v118 = (uint64_t)a1[2];
    v119 = *(_QWORD *)(v118 + 832);
    if (v119)
      LOWORD(v119) = *(_WORD *)(v119 + 8);
    v52 = sub_1C5D56C70(v118, 437, (const llvm::APInt *)&v130, (llvm *)4, 0, v122, v121 | v54, v106, (uint64_t)v104, v105, v119);
    LODWORD(v54) = v120;
  }
  else
  {
    LODWORD(v54) = v62;
  }
  if ((v63 - 1) <= 2 && v65 != 4)
  {
    v67 = (uint64_t)a1[2];
    v68 = *(_QWORD *)(v67 + 832);
    if (v68)
      v69 = *(_WORD *)(v68 + 8);
    else
      v69 = 0;
    v52 = sub_1C5D52060(v67, 200, (const llvm::APInt *)&v130, v65, v66, (uint64_t)v52, v62 & 0xFFFFFFFF00000000 | v54, v69);
    LODWORD(v54) = v72;
  }
  if (v63)
  {
    if (v63 == 2)
    {
      v107 = (uint64_t)a1[2];
      v108 = v62 & 0xFFFFFFFF00000000 | v54;
      v109 = sub_1C6367494(v107, 3, 0);
      v112 = *(_QWORD *)(v107 + 832);
      if (v112)
        LOWORD(v112) = *(_WORD *)(v112 + 8);
      v79 = sub_1C5D56C70(v107, 204, (const llvm::APInt *)&v130, v65, v66, (uint64_t)v52, v108, v111, v109, v110, v112);
    }
    else
    {
      if (v63 != 3)
        goto LABEL_65;
      v73 = (uint64_t)a1[2];
      v74 = v62 & 0xFFFFFFFF00000000 | v54;
      v75 = sub_1C6366AB4(v73, 255, (const llvm::APInt *)&v130, v65, v66, 0, 0);
      v78 = *(_QWORD *)(v73 + 832);
      if (v78)
        LOWORD(v78) = *(_WORD *)(v78 + 8);
      v79 = sub_1C5D56C70(v73, 171, (const llvm::APInt *)&v130, v65, v66, (uint64_t)v52, v74, v77, (uint64_t)v75, v76, v78);
    }
  }
  else
  {
    v81 = (uint64_t)a1[2];
    v82 = v62 & 0xFFFFFFFF00000000 | v54;
    v83 = *(_QWORD *)(v81 + 832);
    if (v83)
      v84 = *(_WORD *)(v83 + 8);
    else
      v84 = 0;
    v79 = sub_1C5D52060(v81, 201, (const llvm::APInt *)&v130, (llvm *)3, 0, (uint64_t)v52, v82, v84);
  }
  v52 = v79;
  LODWORD(v54) = v80;
LABEL_65:
  if (v130)
    llvm::MetadataTracking::untrack((uint64_t)&v130, (unsigned __int8 *)v130);
LABEL_81:
  v87 = *(uint64_t **)(a5 + 32);
  v89 = *v87;
  v88 = v87[1];
  v90 = *a1;
  v130 = v52;
  LODWORD(v131) = v54;
  v132 = v89;
  v133 = v88;
  result = sub_1C5C5B0B4(v90, a5, (uint64_t *)&v130, 2, 1);
  if (v128)
    return llvm::MetadataTracking::untrack((uint64_t)&v128, v128);
  return result;
}

uint64_t *sub_1C480B21C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  llvm *v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  uint64_t *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  int v42;
  unint64_t v43;
  uint64_t v44;
  llvm *v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  __int16 v65;
  uint64_t *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t v73;
  llvm *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  unint64_t v94;
  void **v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  __int128 v102;
  uint64_t v103;
  __int16 v104;
  _OWORD v105[2];
  __int16 v106;
  void *v107[2];
  char v108;
  void *__p;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  unsigned __int8 *v115;
  int v116;
  void *v117;
  uint64_t v118;
  _QWORD v119[2];
  int v120;
  int v121;
  const char *v122;
  const char *v123;
  uint64_t v124;
  char v125;
  char v126;
  _BYTE *v127;
  uint64_t v128;
  _BYTE v129[260];
  int v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 **)(a2 + 64);
  v115 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v115, v6, 2);
  v116 = *(_DWORD *)(a2 + 60);
  v7 = *(unsigned __int16 *)(a2 + 24);
  if (v7 == 291)
  {
    v22 = *(_QWORD *)(a2 + 32);
    v100 = *(_QWORD *)v22;
    v9 = *(_DWORD *)(v22 + 8);
    v10 = *(uint64_t **)(v22 + 80);
    v11 = *(unsigned int *)(v22 + 88);
    goto LABEL_24;
  }
  if (v7 != 254)
    llvm::report_fatal_error((llvm *)"Unknown store opcode!", (const char *)1);
  v8 = *(_QWORD *)(a2 + 32);
  v100 = *(_QWORD *)v8;
  v9 = *(_DWORD *)(v8 + 8);
  v10 = *(uint64_t **)(v8 + 40);
  v11 = *(unsigned int *)(v8 + 48);
  if ((*(_WORD *)(a2 + 26) & 0x400) != 0)
  {
    v12 = *(llvm **)(a2 + 80);
    v13 = *(_QWORD *)(a2 + 88);
    if ((_BYTE)v12)
    {
      v14 = v12 - 120 >= 0x20 && v12 - 2 >= 6;
      if (v14 && v12 - 15 >= 0x3C)
      {
LABEL_13:
        v15 = a3;
        v16 = a3[2];
        v17 = sub_1C6366AB4(v16, 0, (const llvm::APInt *)&v115, (llvm *)5, 0, 0, 0);
        v20 = *(_QWORD *)(v16 + 832);
        if (v20)
          LOWORD(v20) = *(_WORD *)(v20 + 8);
        v10 = sub_1C5D56C70(v16, 212, (const llvm::APInt *)&v115, v12, v13, (uint64_t)v10, v11, v19, (uint64_t)v17, v18, v20);
        v11 = v21;
        a3 = v15;
        goto LABEL_24;
      }
    }
    else
    {
      if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
        v23 = *(unsigned __int8 *)(**(_QWORD **)(v13 + 16) + 8);
      else
        v23 = *(_DWORD *)(v13 + 8);
      if (v23 != 13)
        goto LABEL_13;
    }
    v24 = a3[2];
    v25 = *(_QWORD *)(v24 + 832);
    if (v25)
      v26 = *(_WORD *)(v25 + 8);
    else
      v26 = 0;
    v10 = sub_1C5D52060(v24, 201, (const llvm::APInt *)&v115, *(llvm **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)v10, v11, v26);
    v11 = v27;
  }
LABEL_24:
  v28 = *(_QWORD *)(a2 + 96);
  if ((*(_QWORD *)(v28 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v30 = (unint64_t)(sub_1C4825F50((unint64_t *)(v28 + 24)) + 7) >> 3;
    if ((_DWORD)v29 == 1)
  }
  else
  {
    v30 = -1;
  }
  v31 = (1 << *(_BYTE *)(v28 + 34)) | *(_QWORD *)(v28 + 8);
  v32 = (63 - __clz(v31 & -v31));
  if ((1 << v32) % v30)
    v33 = v32 > 1;
  else
    v33 = 1;
  if (!v33)
  {
    v42 = v9;
    v43 = sub_1C4816F98(*(llvm::LLVMContext **)(a3[2] + 56), 3, 0, v30, 0);
    v45 = (llvm *)v43;
    v46 = 0;
    v47 = a3[2];
    v48 = *(_QWORD *)(v47 + 832);
    if (v48)
      v46 = *(_WORD *)(v48 + 8);
    v49 = sub_1C5D52060(v47, 216, (const llvm::APInt *)&v115, v45, v44, (uint64_t)v10, v11, v46);
    v98 = v50;
    v99 = (uint64_t)v49;
    v51 = sub_1C6131AB0(a2);
    v53 = *(uint64_t **)v51;
    v52 = *(_QWORD *)(v51 + 8);
    v117 = v119;
    v118 = 0x800000000;
    v97 = a1;
    v101 = a3;
    v54 = 0;
    v55 = 1;
    v96 = v42;
    do
    {
      v56 = v101[2];
      v57 = sub_1C63662D4(v56, v54, (const llvm::APInt *)&v115, 0);
      v60 = *(_QWORD *)(v56 + 832);
      if (v60)
        LOWORD(v60) = *(_WORD *)(v60 + 8);
      v61 = sub_1C5D56C70(v56, 148, (const llvm::APInt *)&v115, (llvm *)3, 0, v99, v98, v59, (uint64_t)v57, v58, v60);
      v63 = v62;
      v64 = v101[2];
      sub_1C4824250(*(uint64_t **)(a2 + 96), v54, (uint64_t)&v113);
      v65 = *(_WORD *)(*(_QWORD *)(a2 + 96) + 32);
      memset(v105, 0, sizeof(v105));
      v102 = v113;
      v103 = v114;
      v66 = (uint64_t *)(v61[5] + 16 * v63);
      sub_1C6365BD8(v64, *v66, v66[1]);
      v67 = sub_1C636B75C(v64, v100, v96, (uint64_t)&v115, (uint64_t)v61, v63, (uint64_t)v53, v52, (uint64_t)&v102, 0, 0, v65, (uint64_t)v105);
      v69 = v68;
      v70 = sub_1C480B21C(v97, v67, v101);
      if (v70)
        v72 = (_QWORD *)v70;
      else
        v72 = v67;
      if (v70)
        v69 = v69 & 0xFFFFFFFF00000000 | v71;
      v73 = v53[5] + 16 * v52;
      v74 = *(llvm **)v73;
      v75 = *(_QWORD *)(v73 + 8);
      v76 = v101[2];
      v77 = sub_1C6366AB4(v76, 1, (const llvm::APInt *)&v115, *(llvm **)v73, v75, 0, 0);
      v80 = 0;
      v81 = *(_QWORD *)(v76 + 832);
      if (v81)
        v80 = *(_WORD *)(v81 + 8);
      v53 = sub_1C5D56C70(v76, 56, (const llvm::APInt *)&v115, v74, v75, (uint64_t)v53, v52, v79, (uint64_t)v77, v78, v80);
      v83 = v82;
      v84 = v118;
      if (v118 >= (unint64_t)HIDWORD(v118))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 16);
        v84 = v118;
      }
      v52 = v52 & 0xFFFFFFFF00000000 | v83;
      v85 = (char *)v117 + 16 * v84;
      *v85 = v72;
      v85[1] = v69;
      v86 = (v118 + 1);
      LODWORD(v118) = v118 + 1;
      v54 = v55;
      v33 = v30 > v55++;
    }
    while (v33);
    v87 = v101[2];
    v88 = *(_QWORD *)(v87 + 832);
    if (v88)
      v89 = *(unsigned __int16 *)(v88 + 8);
    else
      v89 = 0;
    v35 = sub_1C636D0C8(v87, (const char *)2, (const llvm::APInt *)&v115, (llvm *)1, 0, (uint64_t *)v117, v86, v89);
    v90 = v117;
    if (v117 != v119)
      goto LABEL_67;
    goto LABEL_45;
  }
  v34 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16);
  if (v34 > 2)
  {
    if (v34 == 3)
    {
      if (*(_WORD *)(a2 + 24) == 291)
        v40 = sub_1C612FE80(a1, a2, a3);
      else
        v40 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 2240))(a1, a2, a3);
    }
    else
    {
      if (v34 != 64)
      {
LABEL_88:
        *(_QWORD *)&v105[0] = "Store from unsupported address space: ";
        v106 = 259;
        v104 = 264;
        LODWORD(v102) = v34;
        sub_1C6131AAC((uint64_t *)v105, (uint64_t *)&v102, (uint64_t)&v117);
        llvm::report_fatal_error((uint64_t)&v117, 1);
      }
      v40 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 2248))(a1, a2, a3);
    }
LABEL_44:
    v35 = v40;
    goto LABEL_45;
  }
  if (!v34)
  {
    v40 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 2224))(a1, a2, a3);
    goto LABEL_44;
  }
  if (v34 != 1)
    goto LABEL_88;
  LOBYTE(v105[0]) = 0;
  v35 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _OWORD *))(*(_QWORD *)a1 + 2232))(a1, a2, a3, v105);
  if (LOBYTE(v105[0]))
  {
    v36 = (int)v115;
    if (v115)
    {
      v38 = *(_QWORD *)&v115[-8 * *((unsigned int *)v115 + 2)];
      v37 = a3;
      if (*(_BYTE *)v38 != 15)
        v38 = *(_QWORD *)(v38 - 8 * *(unsigned int *)(v38 + 8));
      v39 = *((_DWORD *)v115 + 1);
      v36 = *((unsigned __int16 *)v115 + 1);
    }
    else
    {
      v37 = a3;
      v38 = 0;
      v39 = 0;
    }
    v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3[2] + 16) + 640) + 16);
    v92 = *(_QWORD *)(v91 + 56);
    LODWORD(v118) = 11;
    BYTE4(v118) = 2;
    v119[0] = v92;
    v119[1] = v38;
    v120 = v39;
    v121 = v36;
    v122 = "agx1-lower";
    v123 = "DeviceStoreAddrMode";
    v124 = 19;
    v125 = 0;
    v126 = 0;
    v127 = v129;
    v128 = 0x400000000;
    v129[256] = 0;
    v130 = -1;
    v131 = v91;
    v117 = &off_1E814E570;
    v108 = 6;
    strcpy((char *)v107, "String");
    __p = operator new(0x38uLL);
    v110 = xmmword_1C642B430;
    strcpy((char *)__p, "Zero-extended device memory store cannot fold addr mode");
    v111 = 0;
    v112 = 0;
    sub_1C47E3888((uint64_t)&v117, (uint64_t)v107);
    if (SHIBYTE(v110) < 0)
      operator delete(__p);
    if (v108 < 0)
      operator delete(v107[0]);
    llvm::OptimizationRemarkEmitter::emit(*(llvm::OptimizationRemarkEmitter **)(v37[2] + 88), (llvm::DiagnosticInfoOptimizationBase *)&v117);
    v117 = &off_1E814E790;
    v93 = v127;
    if ((_DWORD)v128)
    {
      v94 = (unint64_t)v128 << 6;
      do
      {
        v95 = (void **)&v93[v94];
        if ((char)v93[v94 - 17] < 0)
          operator delete(*(v95 - 5));
        if (*((char *)v95 - 41) < 0)
          operator delete(*(v95 - 8));
        v94 -= 64;
      }
      while (v94);
      v93 = v127;
    }
    if (v93 != v129)
    {
      v90 = v93;
LABEL_67:
      free(v90);
    }
  }
LABEL_45:
  if (v115)
    llvm::MetadataTracking::untrack((uint64_t)&v115, v115);
  return v35;
}

void sub_1C480BA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::detail::DoubleAPFloat *v4;
  void *v5;
  llvm::detail::DoubleAPFloat *v6;
  llvm::detail::DoubleAPFloat *v7;

  v5 = *(void **)(a1 + 8);
  v4 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v6 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v7 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
  if (v5 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::fusedMultiplyAdd(v4, v6, v7, a4);
  else
    llvm::detail::IEEEFloat::fusedMultiplyAdd((llvm::detail::IEEEFloat **)v4, v6, v7, a4);
}

BOOL sub_1C480BA60(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _BOOL8 v3;
  uint64_t v5;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::detail::DoubleAPFloat *v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  llvm::detail::DoubleAPFloat *v21;
  void *v22;
  unsigned int v23;
  unsigned int v25;
  BOOL v26;
  int v27;
  const llvm::APInt *v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  const llvm::APInt *v36;
  uint64_t v37;
  int v38;
  char v39;
  _BYTE v40[8];
  uint64_t v41;
  const llvm::APInt *v42;
  int v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a3 > 6)
    return 0;
  LODWORD(v5) = a3;
  while (1)
  {
    v7 = *(unsigned __int16 *)(a1 + 24);
    if (v7 > 0xD6)
    {
      if (v7 != 215 && v7 != 223)
      {
        v25 = v7 - 400;
        v26 = v25 > 0xA;
        v27 = (1 << v25) & 0x787;
        return !v26 && v27 != 0;
      }
      goto LABEL_13;
    }
    if (*(unsigned __int16 *)(a1 + 24) <= 0x61u)
      break;
    switch(v7)
    {
      case 0x62u:
        v5 = (v5 + 1);
        if (!sub_1C480BA60(**(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v5))
          return 0;
        v8 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40);
        break;
      case 0xC0u:
        v5 = (v5 + 1);
        if (!sub_1C480BA60(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88), v5))return 0;
        v8 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 120);
        break;
      case 0xD4u:
LABEL_13:
        v8 = *(uint64_t **)(a1 + 32);
        LODWORD(v5) = v5 + 1;
        break;
      default:
        return 0;
    }
    a1 = *v8;
    if (v5 > 6)
      return 0;
  }
  if (v7 == 12 || v7 == 36)
  {
    v13 = *(_QWORD *)(a1 + 80);
    if (*(_UNKNOWN **)(v13 + 32) == &unk_1C866F1C0)
      v14 = *(_QWORD *)(v13 + 40);
    else
      v14 = v13 + 24;
    if ((*(_BYTE *)(v14 + 28) & 8) != 0)
      return 0;
    LODWORD(v30) = 32;
    v29 = 0;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v35, &v29);
    v41 = v35;
    v42 = v36;
    v43 = v37;
    v44 = BYTE4(v37) & 0xF;
    v34 = 32;
    v33 = 1065353216;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v29, (const llvm::APInt **)&v33);
    v36 = v29;
    v37 = v30;
    v38 = v31;
    v39 = v32 & 0xF;
    llvm::APFloat::convert((uint64_t)v40, *(void **)(*(_QWORD *)(a1 + 80) + 32), 1, &v29);
    llvm::APFloat::convert((uint64_t)&v35, *(void **)(*(_QWORD *)(a1 + 80) + 32), 1, &v29);
    v15 = *(_QWORD *)(a1 + 80);
    v17 = *(void **)(v15 + 32);
    v16 = (llvm::detail::DoubleAPFloat *)(v15 + 32);
    if (v17 == &unk_1C866F1C0)
      v18 = llvm::detail::DoubleAPFloat::compare(v16, (const llvm::detail::DoubleAPFloat *)&v41);
    else
      llvm::detail::IEEEFloat::compare(v16, (const llvm::detail::IEEEFloat *)&v41);
    v19 = v18;
    v20 = *(_QWORD *)(a1 + 80);
    v22 = *(void **)(v20 + 32);
    v21 = (llvm::detail::DoubleAPFloat *)(v20 + 32);
    if (v22 == &unk_1C866F1C0)
      v23 = llvm::detail::DoubleAPFloat::compare(v21, (const llvm::detail::DoubleAPFloat *)&v36);
    else
      llvm::detail::IEEEFloat::compare(v21, (const llvm::detail::IEEEFloat *)&v36);
    v3 = (v19 - 1) < 2 && v23 < 2;
    if (v36 == (const llvm::APInt *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v37);
    }
    else if ((*((_DWORD *)v36 + 2) - 64) <= 0xFFFFFF7F && v37)
    {
      MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    }
    if ((_UNKNOWN *)v41 == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v42);
    }
    else if ((*(_DWORD *)(v41 + 8) - 64) <= 0xFFFFFF7F && v42)
    {
      MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
    }
  }
  else
  {
    if (v7 != 46)
      return 0;
    v9 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 80);
    v10 = (_QWORD *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u)
      v10 = (_QWORD *)*v10;
    v11 = *(_DWORD *)v10;
    v3 = 1;
    v12 = (v11 - 2095) > 0x24 || ((1 << (v11 - 47)) & 0x1000000003) == 0;
    if (v12 && v11 != 1830 && v11 != 1851)
      return 0;
  }
  return v3;
}

uint64_t *sub_1C480BDD8(uint64_t a1, uint64_t a2, double (*a3)(double))
{
  uint64_t v3;
  int v4;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::detail::DoubleAPFloat *v13;
  void *v14;
  double v15;
  double v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  unsigned __int8 *v20;
  int v21;
  char v22;
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40);
  v4 = *(unsigned __int16 *)(v3 + 24);
  if (v4 != 36 && v4 != 12)
    return 0;
  v9 = *(uint64_t **)(a2 + 40);
  v10 = *v9;
  v11 = v9[1];
  v12 = *(_QWORD *)(v3 + 80);
  v14 = *(void **)(v12 + 32);
  v13 = (const llvm::detail::DoubleAPFloat *)(v12 + 32);
  if (v14 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v24, v13);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v24, (uint64_t **)v13);
  llvm::APFloat::convert((uint64_t)v23, &unk_1C866F198, 1, &v22);
  v15 = llvm::APFloat::convertToDouble((llvm::APFloat *)v23);
  v16 = a3(v15);
  v17 = *(unsigned __int8 **)(a2 + 64);
  v20 = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&v20, v17, 2);
  v21 = *(_DWORD *)(a2 + 60);
  v18 = sub_1C5D404C4(a1, (const llvm::APInt *)&v20, v10, v11, 0, v16);
  if (v20)
    llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
  if ((_UNKNOWN *)v24 == &unk_1C866F1C0)
  {
    sub_1C4773C74(v25);
  }
  else if ((*(_DWORD *)(v24 + 8) - 64) <= 0xFFFFFF7F && v25[0])
  {
    MEMORY[0x1CAA32F9C](v25[0], 0x1000C8000313F17);
  }
  return v18;
}

double sub_1C480BF70(double a1)
{
  return sin(a1 * 1.57079633);
}

long double sub_1C480BF80(long double a1)
{
  return atan(a1) * a1;
}

uint64_t sub_1C480BFA4(unsigned int *a1, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  __int128 v16;
  _BYTE *v18;
  uint64_t v19;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 4;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 16 * v9 == a2)
  {
    sub_1C6132D88(a1, a3, a4);
    return *(_QWORD *)a1 + 16 * v8;
  }
  else
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((a4 - a3) >> 3);
    if (v10 + v9 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v10 + v9, 16);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v11 = (_BYTE *)(v7 + 16 * v8);
    v12 = (char *)(v7 + 16 * v9);
    v13 = (v12 - v11) >> 4;
    if (v13 >= v10)
    {
      sub_1C6132E18(a1, &v12[0x3333333333333330 * ((a4 - v5) >> 3)], (char *)(v7 + 16 * v9));
      if (&v12[0x3333333333333330 * ((a4 - v5) >> 3)] != v11)
        memmove(&v11[0xCCCCCCCCCCCCCCD0 * ((a4 - v5) >> 3)], v11, &v12[0x3333333333333330 * ((a4 - v5) >> 3)] - v11 - 4);
      if (v5 != a4)
      {
        v18 = v11;
        do
        {
          v19 = *(_QWORD *)v5;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v5 + 2);
          *(_QWORD *)v18 = v19;
          v18 += 16;
          v5 += 40;
        }
        while (v5 != a4);
      }
    }
    else
    {
      a1[2] = v9 + v10;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 16 * (v9 + v10) - 16 * v13), v11, v12 - v11);
        v14 = v11;
        do
        {
          v15 = *(_QWORD *)v5;
          *((_DWORD *)v14 + 2) = *((_DWORD *)v5 + 2);
          *(_QWORD *)v14 = v15;
          v14 += 16;
          v5 += 40;
          --v13;
        }
        while (v13);
      }
      while (v5 != a4)
      {
        v16 = *(_OWORD *)v5;
        v5 += 40;
        *(_OWORD *)v12 = v16;
        v12 += 16;
      }
    }
  }
  return (uint64_t)v11;
}

_QWORD *sub_1C480C11C(unsigned int a1, const llvm::APInt *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[9];

  v10[8] = *MEMORY[0x1E0C80C00];
  v10[0] = (uint64_t)sub_1C6366AB4(a3, a1, a2, (llvm *)4, 0, 1, 0);
  v10[1] = v5;
  v10[2] = (uint64_t)sub_1C6366AB4(a3, 0, a2, (llvm *)5, 0, 1, 0);
  v10[3] = v6;
  v10[4] = (uint64_t)sub_1C6366AB4(a3, 0, a2, (llvm *)5, 0, 1, 0);
  v10[5] = v7;
  v10[6] = sub_1C5D428B0(a3, 0, (llvm *)5, 0);
  v10[7] = v8;
  return sub_1C636E56C(a3, 12152, (uint64_t)a2, (llvm *)5, 0, v10, 4);
}

uint64_t sub_1C480C218(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C480C244 + 4 * byte_1C642A6EE[a1 - 1839]))();
}

void sub_1C480C244(_DWORD *a1@<X1>, _DWORD *a2@<X2>, _DWORD *a3@<X3>, _DWORD *a4@<X4>, int a5@<W8>)
{
  int v5;

  *a1 = v5;
  *a2 = 2;
  *a3 = 0;
  *a4 = a5;
}

void sub_1C480C448()
{
  JUMPOUT(0x1C480C434);
}

uint64_t *sub_1C480C460(int a1, const llvm::APInt *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t **v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  __int16 v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  unsigned int v61;
  uint64_t **v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  __int16 v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t **v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v90;
  uint64_t v91;
  _BYTE v92[32];
  void *v93;
  uint64_t v94;
  _BYTE v95[64];
  void *v96;
  uint64_t v97;
  uint64_t v98[16];
  uint64_t *v99;
  uint64_t v100;
  _QWORD v101[6];

  v101[4] = *MEMORY[0x1E0C80C00];
  sub_1C480C218(a1);
  v99 = v101;
  v101[0] = sub_1C6366AB4(a5, 0, a2, (llvm *)5, 0, 0, 0);
  v101[1] = v10;
  v101[2] = a3;
  v101[3] = a4;
  v100 = 0x200000002;
  v96 = v98;
  v97 = 0x800000001;
  v98[0] = (uint64_t)sub_1C6366AB4(a5, 45, a2, (llvm *)5, 0, 1, 0);
  v98[1] = v11;
  v12 = sub_1C636E56C(a5, 18, (uint64_t)a2, (llvm *)0xAE, 0, v98, 1);
  v13 = 0;
  v14 = v99;
  v99[2] = (uint64_t)v12;
  *((_DWORD *)v14 + 6) = 0;
  v15 = *(_QWORD *)(a5 + 832);
  if (v15)
    v13 = *(unsigned __int16 *)(v15 + 8);
  v17 = sub_1C636D0C8(a5, 0, a2, (llvm *)0xAE, 0, v14, v100, v13);
  v18 = v16;
  v93 = v95;
  v94 = 0x400000000;
  if (a1 == 1925)
  {
    v19 = sub_1C636E638(a5, 1, a2, (llvm *)9, 0, (uint64_t)v17, v16);
    v20 = (char *)v93 + 16 * v94;
    *v20 = v19;
    v20[1] = v21;
    LODWORD(v94) = v94 + 1;
    v22 = sub_1C636E638(a5, 2, a2, (llvm *)9, 0, (uint64_t)v17, v18);
    v24 = v23;
    v25 = v94;
    if (v94 >= HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v94 + 1, 16);
      v25 = v94;
    }
    v26 = (char *)v93 + 16 * v25;
    *v26 = v22;
    v26[1] = v24;
    LODWORD(v94) = v94 + 1;
    v28 = sub_1C636E638(a5, 3, a2, (llvm *)4, 0, (uint64_t)v17, v18);
    v29 = 0;
    v30 = *(_QWORD *)(a5 + 832);
    if (v30)
      v29 = *(_WORD *)(v30 + 8);
    v31 = sub_1C5D52060(a5, 216, a2, (llvm *)9, 0, (uint64_t)v28, v27, v29);
    v33 = v32;
    v34 = v94;
    if (v94 >= HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v94 + 1, 16);
      v34 = v94;
    }
    v35 = (uint64_t **)((char *)v93 + 16 * v34);
    *v35 = v31;
    v35[1] = v33;
    LODWORD(v94) = v94 + 1;
    v36 = sub_1C61312D0(a5, (llvm *)9, 0);
    v38 = v37;
    v39 = v94;
    if (v94 >= HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v94 + 1, 16);
      v39 = v94;
    }
    v40 = (char *)v93 + 16 * v39;
    *v40 = v36;
    v40[1] = v38;
    v41 = (v94 + 1);
    LODWORD(v94) = v94 + 1;
    v42 = *(_QWORD *)(a5 + 832);
    if (v42)
      v43 = *(unsigned __int16 *)(v42 + 8);
    else
      v43 = 0;
    v71 = sub_1C636D0C8(a5, (const char *)0x92, a2, (llvm *)0x4E, 0, (uint64_t *)v93, v41, v43);
  }
  else
  {
    v90 = v92;
    v91 = 0x200000000;
    v44 = sub_1C636E638(a5, 33, a2, (llvm *)0xA, 0, (uint64_t)v17, v16);
    v46 = v45;
    v47 = v94;
    if (v94 >= HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v94 + 1, 16);
      v47 = v94;
    }
    v48 = (char *)v93 + 16 * v47;
    *v48 = v44;
    v48[1] = v46;
    LODWORD(v94) = v94 + 1;
    v49 = sub_1C636E638(a5, 34, a2, (llvm *)0xA, 0, (uint64_t)v17, v18);
    v51 = v50;
    v52 = v94;
    if (v94 >= HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v94 + 1, 16);
      v52 = v94;
    }
    v53 = (char *)v93 + 16 * v52;
    *v53 = v49;
    v53[1] = v51;
    LODWORD(v94) = v94 + 1;
    v55 = sub_1C636E638(a5, 5, a2, (llvm *)4, 0, (uint64_t)v17, v18);
    v56 = 0;
    v57 = *(_QWORD *)(a5 + 832);
    if (v57)
      v56 = *(_WORD *)(v57 + 8);
    v58 = sub_1C5D52060(a5, 216, a2, (llvm *)9, 0, (uint64_t)v55, v54, v56);
    v60 = v59;
    v61 = v91;
    if (v91 >= HIDWORD(v91))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, v91 + 1, 16);
      v61 = v91;
    }
    v62 = (uint64_t **)((char *)v90 + 16 * v61);
    *v62 = v58;
    v62[1] = v60;
    LODWORD(v91) = v91 + 1;
    v63 = sub_1C61312D0(a5, (llvm *)9, 0);
    v65 = v64;
    v66 = v91;
    if (v91 >= HIDWORD(v91))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, v91 + 1, 16);
      v66 = v91;
    }
    v67 = (char *)v90 + 16 * v66;
    *v67 = v63;
    v67[1] = v65;
    v68 = (v91 + 1);
    LODWORD(v91) = v91 + 1;
    v69 = *(_QWORD *)(a5 + 832);
    if (v69)
      v70 = *(unsigned __int16 *)(v69 + 8);
    else
      v70 = 0;
    v73 = sub_1C636D0C8(a5, (const char *)0x92, a2, (llvm *)0x4C, 0, (uint64_t *)v90, v68, v70);
    v74 = 0;
    v75 = *(_QWORD *)(a5 + 832);
    if (v75)
      v74 = *(_WORD *)(v75 + 8);
    v76 = sub_1C5D52060(a5, 216, a2, (llvm *)0xA, 0, (uint64_t)v73, v72, v74);
    v78 = v77;
    v79 = v94;
    if (v94 >= HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v94 + 1, 16);
      v79 = v94;
    }
    v80 = (uint64_t **)((char *)v93 + 16 * v79);
    *v80 = v76;
    v80[1] = v78;
    LODWORD(v94) = v94 + 1;
    v81 = sub_1C61312D0(a5, (llvm *)0xA, 0);
    v83 = v82;
    v84 = v94;
    if (v94 >= HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v94 + 1, 16);
      v84 = v94;
    }
    v85 = (char *)v93 + 16 * v84;
    *v85 = v81;
    v85[1] = v83;
    v86 = (v94 + 1);
    LODWORD(v94) = v94 + 1;
    v87 = *(_QWORD *)(a5 + 832);
    if (v87)
      v88 = *(unsigned __int16 *)(v87 + 8);
    else
      v88 = 0;
    v71 = sub_1C636D0C8(a5, (const char *)0x92, a2, (llvm *)0x61, 0, (uint64_t *)v93, v86, v88);
    if (v90 != v92)
      free(v90);
  }
  if (v93 != v95)
    free(v93);
  if (v96 != v98)
    free(v96);
  if (v99 != v101)
    free(v99);
  return v71;
}

uint64_t *sub_1C480CCB4(const llvm::APInt *a1, uint64_t a2, unint64_t a3, void *a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t **v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  __int16 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  unsigned int v89;
  uint64_t **v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  __int16 v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  unsigned int v106;
  uint64_t **v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  void *v147;
  uint64_t v148;
  _QWORD v149[16];
  _QWORD *v150;
  uint64_t v151;
  _QWORD v152[10];

  v152[8] = *MEMORY[0x1E0C80C00];
  v150 = v152;
  v152[0] = sub_1C6366AB4(a11, 3, a1, (llvm *)5, 0, 0, 0);
  v152[1] = v15;
  v152[2] = a2;
  v152[3] = a3;
  v152[4] = 0;
  v152[5] = 0;
  v151 = 0x400000003;
  v147 = v149;
  v148 = 0x800000001;
  v16 = 0;
  v149[0] = sub_1C6366AB4(a11, 45, a1, (llvm *)5, 0, 1, 0);
  v149[1] = v17;
  do
  {
    v18 = sub_1C6366AB4(a11, v16, a1, (llvm *)5, 0, 0, 0);
    v21 = 0;
    v22 = *(_QWORD *)(a11 + 832);
    if (v22)
      v21 = *(_WORD *)(v22 + 8);
    v23 = sub_1C5D56C70(a11, 148, a1, (llvm *)0xA, 0, a2, a3, v20, (uint64_t)v18, v19, v21);
    v25 = v24;
    v26 = v148;
    if (v148 >= (unint64_t)HIDWORD(v148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
      v26 = v148;
    }
    v27 = (uint64_t **)((char *)v147 + 16 * v26);
    *v27 = v23;
    v27[1] = v25;
    LODWORD(v148) = v148 + 1;
    v28 = v16 + 33;
    v29 = sub_1C6366AB4(a11, v28, a1, (llvm *)5, 0, 1, 0);
    v31 = v30;
    v32 = v148;
    if (v148 >= (unint64_t)HIDWORD(v148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
      v32 = v148;
    }
    v33 = (char *)v147 + 16 * v32;
    *v33 = v29;
    v33[1] = v31;
    v34 = (v148 + 1);
    LODWORD(v148) = v148 + 1;
    v16 = v28 - 32;
  }
  while (v16 != 3);
  v35 = sub_1C636E56C(a11, 18, (uint64_t)a1, (llvm *)0xAE, 0, (uint64_t *)v147, v34);
  v36 = v150;
  v150[2] = v35;
  v36[6] = 0;
  if (v147 != v149)
    free(v147);
  v147 = v149;
  v148 = 0x800000000;
  v37 = sub_1C6366AB4(a11, 99, a1, (llvm *)5, 0, 1, 0);
  v39 = v38;
  v40 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v40 = v148;
  }
  v41 = 0;
  v42 = (char *)v147 + 16 * v40;
  *v42 = v37;
  v42[1] = v39;
  LODWORD(v148) = v148 + 1;
  v141 = a4;
  LODWORD(v142) = a5;
  v143 = a6;
  v144 = a7;
  v145 = a9;
  v146 = a10;
  do
  {
    v43 = 0;
    v44 = 0;
    v45 = (uint64_t *)(&v141 + 2 * v41);
    v46 = *v45;
    v47 = v45[1];
    do
    {
      v48 = v43;
      v49 = sub_1C6366AB4(a11, v44, a1, (llvm *)5, 0, 0, 0);
      v52 = 0;
      v53 = *(_QWORD *)(a11 + 832);
      if (v53)
        v52 = *(_WORD *)(v53 + 8);
      v54 = sub_1C5D56C70(a11, 148, a1, (llvm *)0xA, 0, v46, v47, v51, (uint64_t)v49, v50, v52);
      v56 = v55;
      v57 = v148;
      if (v148 >= (unint64_t)HIDWORD(v148))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
        v57 = v148;
      }
      v58 = (uint64_t **)((char *)v147 + 16 * v57);
      *v58 = v54;
      v58[1] = v56;
      LODWORD(v148) = v148 + 1;
      v59 = sub_1C6366AB4(a11, 2 * v41 + 33 + v44, a1, (llvm *)5, 0, 1, 0);
      v61 = v60;
      v62 = v148;
      if (v148 >= (unint64_t)HIDWORD(v148))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
        v62 = v148;
      }
      v63 = (char *)v147 + 16 * v62;
      *v63 = v59;
      v63[1] = v61;
      v64 = (v148 + 1);
      LODWORD(v148) = v148 + 1;
      v43 = 1;
      v44 = 1;
    }
    while ((v48 & 1) == 0);
    ++v41;
  }
  while (v41 != 3);
  v65 = sub_1C636E56C(a11, 18, (uint64_t)a1, (llvm *)0xAE, 0, (uint64_t *)v147, v64);
  v66 = v150;
  v150[4] = v65;
  *((_DWORD *)v66 + 10) = 0;
  if (v147 != v149)
  {
    free(v147);
    v66 = v150;
  }
  v67 = *(_QWORD *)(a11 + 832);
  if (v67)
    v68 = *(unsigned __int16 *)(v67 + 8);
  else
    v68 = 0;
  v69 = sub_1C636D0C8(a11, (const char *)0x196, a1, (llvm *)0xAE, 0, v66, v151, v68);
  v71 = v70;
  v147 = v149;
  v148 = 0x400000000;
  v141 = &v143;
  v142 = 0x200000000;
  v72 = sub_1C636E638(a11, 33, a1, (llvm *)0xA, 0, (uint64_t)v69, v70);
  v74 = v73;
  v75 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v75 = v148;
  }
  v76 = (char *)v147 + 16 * v75;
  *v76 = v72;
  v76[1] = v74;
  LODWORD(v148) = v148 + 1;
  v77 = sub_1C636E638(a11, 34, a1, (llvm *)0xA, 0, (uint64_t)v69, v71);
  v79 = v78;
  v80 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v80 = v148;
  }
  v81 = (char *)v147 + 16 * v80;
  *v81 = v77;
  v81[1] = v79;
  LODWORD(v148) = v148 + 1;
  v83 = sub_1C636E638(a11, 5, a1, (llvm *)4, 0, (uint64_t)v69, v71);
  v84 = 0;
  v85 = *(_QWORD *)(a11 + 832);
  if (v85)
    v84 = *(_WORD *)(v85 + 8);
  v86 = sub_1C5D52060(a11, 216, a1, (llvm *)9, 0, (uint64_t)v83, v82, v84);
  v88 = v87;
  v89 = v142;
  if (v142 >= HIDWORD(v142))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)&v143, v142 + 1, 16);
    v89 = v142;
  }
  v90 = (uint64_t **)((char *)v141 + 16 * v89);
  *v90 = v86;
  v90[1] = v88;
  LODWORD(v142) = v142 + 1;
  v91 = sub_1C61312D0(a11, (llvm *)9, 0);
  v93 = v92;
  v94 = v142;
  if (v142 >= HIDWORD(v142))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)&v143, v142 + 1, 16);
    v94 = v142;
  }
  v95 = (char *)v141 + 16 * v94;
  *v95 = v91;
  v95[1] = v93;
  v96 = (v142 + 1);
  LODWORD(v142) = v142 + 1;
  v97 = *(_QWORD *)(a11 + 832);
  if (v97)
    v98 = *(unsigned __int16 *)(v97 + 8);
  else
    v98 = 0;
  v100 = sub_1C636D0C8(a11, (const char *)0x92, a1, (llvm *)0x4C, 0, (uint64_t *)v141, v96, v98);
  v101 = 0;
  v102 = *(_QWORD *)(a11 + 832);
  if (v102)
    v101 = *(_WORD *)(v102 + 8);
  v103 = sub_1C5D52060(a11, 216, a1, (llvm *)0xA, 0, (uint64_t)v100, v99, v101);
  v105 = v104;
  v106 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v106 = v148;
  }
  v107 = (uint64_t **)((char *)v147 + 16 * v106);
  *v107 = v103;
  v107[1] = v105;
  LODWORD(v148) = v148 + 1;
  v108 = sub_1C636E638(a11, 36, a1, (llvm *)0xA, 0, (uint64_t)v69, v71);
  v110 = v109;
  v111 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v111 = v148;
  }
  v112 = (char *)v147 + 16 * v111;
  *v112 = v108;
  v112[1] = v110;
  LODWORD(v148) = v148 + 1;
  v113 = sub_1C636E638(a11, 37, a1, (llvm *)0xA, 0, (uint64_t)v69, v71);
  v115 = v114;
  v116 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v116 = v148;
  }
  v117 = (char *)v147 + 16 * v116;
  *v117 = v113;
  v117[1] = v115;
  LODWORD(v148) = v148 + 1;
  v118 = sub_1C636E638(a11, 38, a1, (llvm *)0xA, 0, (uint64_t)v69, v71);
  v120 = v119;
  v121 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v121 = v148;
  }
  v122 = (char *)v147 + 16 * v121;
  *v122 = v118;
  v122[1] = v120;
  LODWORD(v148) = v148 + 1;
  v123 = sub_1C636E638(a11, 39, a1, (llvm *)0xA, 0, (uint64_t)v69, v71);
  v125 = v124;
  v126 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v126 = v148;
  }
  v127 = (char *)v147 + 16 * v126;
  *v127 = v123;
  v127[1] = v125;
  LODWORD(v148) = v148 + 1;
  v128 = sub_1C61312D0(a11, (llvm *)0xA, 0);
  v130 = v129;
  v131 = v148;
  if (v148 >= HIDWORD(v148))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
    v131 = v148;
  }
  v132 = (char *)v147 + 16 * v131;
  *v132 = v128;
  v132[1] = v130;
  v133 = (v148 + 1);
  LODWORD(v148) = v148 + 1;
  v134 = *(_QWORD *)(a11 + 832);
  if (v134)
    v135 = *(unsigned __int16 *)(v134 + 8);
  else
    v135 = 0;
  v136 = sub_1C636D0C8(a11, (const char *)0x92, a1, (llvm *)0x65, 0, (uint64_t *)v147, v133, v135);
  if (v141 != &v143)
    free(v141);
  if (v147 != v149)
    free(v147);
  if (v150 != v152)
    free(v150);
  return v136;
}

void sub_1C480D6D4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  __int16 v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned __int8 *v39;
  int v40;
  unsigned __int8 *v41;
  int v42;

  v8 = *(unsigned __int8 **)(a2 + 64);
  v41 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v41, v8, 2);
  v9 = *(_DWORD *)(a2 + 60);
  v42 = v9;
  v10 = *(unsigned __int16 *)(a2 + 24);
  if (v10 > 0xCF)
  {
    if (v10 == 208)
    {
      if (**(_BYTE **)(a2 + 40) != 3)
        goto LABEL_46;
      v25 = *(unsigned __int8 **)(a2 + 64);
      v39 = v25;
      if (v25)
      {
        llvm::MetadataTracking::track((uint64_t)&v39, v25, 2);
        v9 = *(_DWORD *)(a2 + 60);
      }
      v40 = v9;
      v26 = *(uint64_t **)(a2 + 32);
      v18 = *v26;
      v19 = v26[1];
      v27 = *(_QWORD *)(a4 + 832);
      if (v27)
        v21 = *(_WORD *)(v27 + 8);
      else
        v21 = 0;
      v28 = a4;
      v29 = 439;
    }
    else
    {
      if (v10 != 209 || **(_BYTE **)(a2 + 40) != 3)
        goto LABEL_46;
      v16 = *(unsigned __int8 **)(a2 + 64);
      v39 = v16;
      if (v16)
      {
        llvm::MetadataTracking::track((uint64_t)&v39, v16, 2);
        v9 = *(_DWORD *)(a2 + 60);
      }
      v40 = v9;
      v17 = *(uint64_t **)(a2 + 32);
      v18 = *v17;
      v19 = v17[1];
      v20 = *(_QWORD *)(a4 + 832);
      if (v20)
        v21 = *(_WORD *)(v20 + 8);
      else
        v21 = 0;
      v28 = a4;
      v29 = 438;
    }
    v30 = sub_1C5D52060(v28, v29, (const llvm::APInt *)&v39, (llvm *)4, 0, v18, v19, v21);
    v32 = v31;
    if (v39)
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    v33 = *(unsigned __int8 **)(a2 + 64);
    v39 = v33;
    if (v33)
      llvm::MetadataTracking::track((uint64_t)&v39, v33, 2);
    v40 = *(_DWORD *)(a2 + 60);
    v34 = *(_QWORD *)(a4 + 832);
    if (v34)
      v35 = *(_WORD *)(v34 + 8);
    else
      v35 = 0;
    v22 = (uint64_t)sub_1C5D52060(a4, 201, (const llvm::APInt *)&v39, (llvm *)3, 0, (uint64_t)v30, v32, v35);
    v24 = v36;
    if (v39)
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
  }
  else
  {
    if (v10 != 13)
    {
      if (v10 == 47)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40) + 80);
        v12 = (_QWORD *)(v11 + 24);
        if (*(_DWORD *)(v11 + 32) >= 0x41u)
          v12 = (_QWORD *)*v12;
        v13 = *(_DWORD *)v12;
        if ((*(_DWORD *)v12 - 1282) < 0x190)
        {
LABEL_10:
          v14 = *(_QWORD *)(a1 + 184296);
          if (*(_BYTE *)(v14 + 281))
          {
            v15 = 2;
          }
          else if (*(_BYTE *)(v14 + 282))
          {
            v15 = 3;
          }
          else
          {
            v15 = 1;
          }
          llvm::GPUSDISel::ExpandIntrinsicSample(a2, a4, v13, a3, v15, (uint64_t (*)(uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1C47F4260, (void (*)(_OWORD *, uint64_t, uint64_t, void **, uint64_t (*)(_QWORD)))sub_1C480949C, 1, 33);
        }
        else
        {
          switch(v13)
          {
            case 1682:
            case 1683:
            case 1684:
            case 1685:
            case 1686:
            case 1687:
            case 1688:
            case 1689:
            case 1690:
            case 1691:
            case 1692:
            case 1693:
            case 1694:
            case 1695:
            case 1696:
            case 1697:
            case 1698:
            case 1699:
            case 1700:
            case 1701:
            case 1702:
            case 1703:
            case 1704:
            case 1705:
            case 1706:
            case 1707:
            case 1708:
            case 1709:
            case 1710:
            case 1711:
            case 1712:
            case 1713:
            case 1714:
            case 1715:
            case 1716:
            case 1717:
            case 1718:
            case 1719:
            case 1720:
            case 1721:
            case 1722:
            case 1723:
            case 1724:
            case 1725:
            case 1726:
            case 1727:
            case 1728:
            case 1729:
            case 1730:
            case 1731:
            case 1732:
            case 1733:
            case 1734:
            case 1735:
            case 1736:
            case 1737:
            case 1738:
            case 1739:
            case 1740:
            case 1741:
            case 1742:
            case 1743:
            case 1744:
            case 1745:
            case 1746:
            case 1747:
            case 1748:
            case 1749:
            case 1750:
            case 1751:
            case 1752:
            case 1753:
            case 1754:
            case 1755:
            case 1756:
            case 1757:
            case 1758:
            case 1759:
            case 1760:
            case 1761:
            case 1762:
            case 1763:
            case 1764:
            case 1765:
            case 1766:
            case 1767:
            case 1768:
            case 1769:
            case 1770:
            case 1771:
            case 1772:
            case 1773:
            case 1774:
            case 1775:
            case 1776:
            case 1777:
            case 1778:
            case 1779:
            case 1780:
            case 1781:
            case 1782:
            case 1783:
            case 1784:
            case 1785:
            case 1786:
            case 1787:
            case 1788:
            case 1789:
            case 1790:
            case 1791:
            case 1792:
            case 1793:
            case 1794:
            case 1795:
            case 1796:
            case 1797:
            case 1798:
            case 1799:
            case 1800:
            case 1801:
            case 1802:
            case 1803:
            case 1804:
            case 1805:
            case 1806:
            case 1807:
            case 1808:
            case 1809:
            case 1810:
            case 1811:
            case 1812:
            case 1813:
            case 1814:
            case 1815:
            case 1816:
            case 1817:
            case 1818:
            case 1819:
            case 1820:
            case 1821:
              goto LABEL_10;
            case 2022:
            case 2023:
            case 2024:
            case 2025:
            case 2026:
            case 2027:
            case 2030:
            case 2031:
            case 2032:
            case 2035:
            case 2036:
            case 2037:
            case 2038:
            case 2039:
            case 2040:
            case 2041:
            case 2042:
            case 2043:
            case 2046:
            case 2047:
            case 2048:
            case 2051:
            case 2052:
            case 2053:
            case 2054:
            case 2055:
            case 2056:
            case 2057:
            case 2058:
            case 2059:
            case 2062:
            case 2063:
            case 2064:
            case 2067:
            case 2068:
            case 2069:
            case 2070:
            case 2071:
            case 2072:
            case 2073:
            case 2074:
            case 2075:
            case 2078:
            case 2079:
            case 2080:
            case 2083:
            case 2084:
            case 2085:
              sub_1C4808B24(a2, a4, v13, (uint64_t)a3, *(_QWORD *)(a1 + 184296));
              break;
            default:
              goto LABEL_46;
          }
        }
      }
      goto LABEL_46;
    }
    v22 = sub_1C47F4E30(a1, a2, a4);
    v24 = v23;
  }
  if (v22)
  {
    v37 = a3[2];
    if (v37 >= a3[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v37 + 1, 16);
      LODWORD(v37) = a3[2];
    }
    v38 = (uint64_t *)(*(_QWORD *)a3 + 16 * v37);
    *v38 = v22;
    v38[1] = v24;
    ++a3[2];
  }
LABEL_46:
  if (v41)
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
}

_QWORD *sub_1C480D9E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _UNKNOWN ***v21;
  llvm *v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[14];

  v29[12] = *MEMORY[0x1E0C80C00];
  if (((1 << (a4 - 101)) & 0x2E) != 0)
  {
    v15 = *(unsigned __int8 **)a7;
    v25 = v15;
    if (v15)
      llvm::MetadataTracking::track((uint64_t)&v25, v15, 2);
    v26 = *(_DWORD *)(a7 + 8);
    if (*(_DWORD *)(a6 + 8))
    {
      v17 = *(_QWORD *)(a8 + 40);
      v18 = *(_QWORD *)(a8 + 56);
      v27 = v29;
      v28 = 0x800000000;
      result = sub_1C6125554(v17, v18, a4, a6, (uint64_t)&v27);
      if ((_DWORD)v28)
      {
        v19 = (char *)v27 + 10;
        v20 = *((unsigned __int8 *)v27 + 10);
        v21 = &off_1E7F98468;
        switch(*((_BYTE *)v27 + 10))
        {
          case 4:
          case 9:
            v21 = &off_1E7F982A8;
            goto LABEL_13;
          case 5:
          case 0xA:
            goto LABEL_13;
          case 6:
            goto LABEL_12;
          case 7:
          case 8:
            __break(1u);
            return result;
          default:
            if (((1 << (v20 - 28)) & 0x1000000000401) == 0)
LABEL_12:
              v21 = &off_1E7F98AB8;
LABEL_13:
            v22 = (llvm *)(v8 & 0xFFFFFFFFFFFFFF00 | v20);
            v23 = llvm::MachineFunction::addLiveIn(v17, *((_DWORD *)v27 + 1), (uint64_t)v21);
            sub_1C612E4E4(a8, a2, a3, (const llvm::APInt *)&v25, v23, v22, 0);
            __asm { BR              X9 }
            return result;
        }
      }
      if ((a4 - 102) <= 5 && ((1 << (a4 - 102)) & 0x31) != 0)
      {
        v24 = *(_QWORD *)(v17 + 48);
        if (!v24)
        {
          v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 8) + 216))(*(_QWORD *)(v17 + 8), v17 + 128, v17);
          *(_QWORD *)(v17 + 48) = v24;
        }
        *(_DWORD *)(v24 + 16) = (4 * sub_1C476C6C0((unsigned int *)&v27) + 4) & 0xFFFFFFF8;
      }
      if (v27 != v29)
        free(v27);
    }
    if (v25)
      llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  }
  return (_QWORD *)a2;
}

void sub_1C480DDC0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __asm { BR              X10 }
}

uint64_t *sub_1C480DE28()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  __int16 v5;

  v4 = *(_QWORD *)(v0 + 832);
  if (v4)
    v5 = *(_WORD *)(v4 + 8);
  else
    v5 = 0;
  return sub_1C5D52060(v0, 392, v3, (llvm *)1, 0, v2, v1, v5);
}

BOOL sub_1C480E388(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return a3 == 76 || a3 - 9 < 2;
}

unsigned __int16 *sub_1C480E3A0(unsigned int *a1, uint64_t a2, unint64_t *a3, unsigned int *a4, const llvm::APInt *a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t v11;
  __int16 v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  llvm::APInt *v59;
  uint64_t v60;
  llvm *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  llvm *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int16 *result;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  llvm *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  unsigned int *v95;
  llvm *v96;
  uint64_t v97;
  uint64_t *v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  llvm *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  unsigned __int16 *v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  llvm::APInt *v115;
  unsigned int v116;
  llvm::APInt *v117;
  unsigned int v118;
  unint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unint64_t v122;
  llvm *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  llvm *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  llvm *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  llvm *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  llvm *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  unsigned int *v160;
  uint64_t v161;
  uint64_t *v162;
  unint64_t *v163;
  uint64_t v165;
  int v166;
  char v167;
  uint64_t v168;

  v9 = (uint64_t *)a2;
  v11 = *(_QWORD *)(a6 + 832);
  if (v11)
    v12 = *(_WORD *)(v11 + 8);
  else
    v12 = 0;
  v13 = sub_1C5D52060(a6, 216, a5, (llvm *)0x31, 0, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), v12);
  v15 = v14;
  v16 = 0;
  v17 = *(_QWORD *)(a6 + 832);
  if (v17)
    v16 = *(_WORD *)(v17 + 8);
  v163 = a3;
  v18 = sub_1C5D52060(a6, 216, a5, (llvm *)0x31, 0, *a3, a3[1], v16);
  v20 = v19;
  v21 = sub_1C6366AB4(a6, 0, a5, (llvm *)5, 0, 0, 0);
  v24 = 0;
  v25 = *(_QWORD *)(a6 + 832);
  if (v25)
    v24 = *(_WORD *)(v25 + 8);
  v160 = a1;
  v26 = sub_1C5D56C70(a6, 437, a5, (llvm *)5, 0, (uint64_t)v13, v15, v23, (uint64_t)v21, v22, v24);
  v28 = v27;
  v29 = sub_1C6366AB4(a6, 1, a5, (llvm *)5, 0, 0, 0);
  v32 = 0;
  v33 = *(_QWORD *)(a6 + 832);
  if (v33)
    v32 = *(_WORD *)(v33 + 8);
  v162 = sub_1C5D56C70(a6, 437, a5, (llvm *)5, 0, (uint64_t)v13, v15, v31, (uint64_t)v29, v30, v32);
  v35 = v34;
  v36 = sub_1C6366AB4(a6, 0, a5, (llvm *)5, 0, 0, 0);
  v39 = 0;
  v40 = *(_QWORD *)(a6 + 832);
  if (v40)
    v39 = *(_WORD *)(v40 + 8);
  v41 = v28;
  v161 = v35;
  v42 = sub_1C5D56C70(a6, 437, a5, (llvm *)5, 0, (uint64_t)v18, v20, v38, (uint64_t)v36, v37, v39);
  v44 = v43;
  v158 = v43;
  v45 = sub_1C6366AB4(a6, 1, a5, (llvm *)5, 0, 0, 0);
  v48 = *(_QWORD *)(a6 + 832);
  if (v48)
    LOWORD(v48) = *(_WORD *)(v48 + 8);
  v49 = sub_1C5D56C70(a6, 437, a5, (llvm *)5, 0, (uint64_t)v18, v20, v47, (uint64_t)v45, v46, v48);
  v52 = v49;
  v53 = v50;
  v54 = *a4;
  if (*a4 != 22 && v54 != 17)
  {
    v66 = *(unsigned __int16 *)(*v163 + 24);
    v157 = v50;
    if (v66 == 35 || v66 == 11)
      __asm { BR              X11 }
    v79 = dword_1C642B3D0[v54 - 10];
    v156 = (uint64_t)v49;
    v165 = 0;
    v166 = 1;
    v167 = 1;
    v168 = a6;
    v95 = v160;
    v96 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v160 + 400))(v160, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v26[5] + 16 * v41), *(_QWORD *)(v26[5] + 16 * v41 + 8));
    v98 = sub_1C5D8C994(v160, v96, v97, (uint64_t)v26, v41, (uint64_t)v42, v158, v79, 0, (uint64_t)&v165, a5);
    if (v98)
    {
      v100 = v98;
      v159 = v99;
      v101 = v161;
    }
    else
    {
      v133 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v160 + 400))(v160, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v26[5] + 16 * v41), *(_QWORD *)(v26[5] + 16 * v41 + 8));
      v135 = v134;
      v136 = sub_1C6367818((_QWORD *)a6, v79);
      v139 = *(_QWORD *)(a6 + 832);
      if (v139)
        LOWORD(v139) = *(_WORD *)(v139 + 8);
      v101 = v161;
      v100 = sub_1C5D58E08(a6, (const char *)0xC1, a5, v133, v135, (uint64_t)v26, v41, v138, (uint64_t)v42, v158, v136, v137, SHIDWORD(v137), v139);
      v159 = v140;
      v95 = v160;
    }
    v102 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v95 + 400))(v95, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v162[5] + 16 * v101), *(_QWORD *)(v162[5] + 16 * v101 + 8));
    result = (unsigned __int16 *)sub_1C5D8C994(v95, v102, v103, (uint64_t)v162, v101, v156, v157, *a4, 0, (uint64_t)&v165, a5);
    if (!result)
    {
      v141 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v95 + 400))(v95, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v162[5] + 16 * v101), *(_QWORD *)(v162[5] + 16 * v101 + 8));
      v143 = v142;
      v144 = sub_1C6367818((_QWORD *)a6, *a4);
      v147 = *(_QWORD *)(a6 + 832);
      if (v147)
        LOWORD(v147) = *(_WORD *)(v147 + 8);
      result = (unsigned __int16 *)sub_1C5D58E08(a6, (const char *)0xC1, a5, v141, v143, (uint64_t)v162, v101, v146, v156, v157, v144, v145, SHIDWORD(v145), v147);
    }
    v105 = (uint64_t)result;
    v106 = *((unsigned __int16 *)v100 + 12);
    if (v106 == 35 || v106 == 11)
      v107 = v100;
    else
      v107 = 0;
    v108 = v104;
    v109 = result[12];
    if (v109 == 35 || v109 == 11)
    {
      v110 = result;
      if (!v107)
        goto LABEL_55;
    }
    else
    {
      v110 = 0;
      if (!v107)
        goto LABEL_55;
    }
    v111 = v107[10];
    result = (unsigned __int16 *)(v111 + 24);
    v112 = *(_DWORD *)(v111 + 32);
    if (v112 > 0x40)
    {
      result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
      v113 = (_DWORD)result == v112;
      v95 = v160;
      if (v113)
        goto LABEL_73;
    }
    else
    {
      v95 = v160;
      if (!*(_QWORD *)result)
        goto LABEL_73;
    }
LABEL_55:
    if (!v110)
      goto LABEL_69;
    v114 = *((_QWORD *)v110 + 10);
    v115 = (llvm::APInt *)(v114 + 24);
    v116 = *(_DWORD *)(v114 + 32);
    if (v116 > 0x40)
    {
      result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v114 + 24));
      if ((_DWORD)result != v116)
        goto LABEL_63;
    }
    else
    {
      v117 = *(llvm::APInt **)v115;
      if (*(_QWORD *)v115)
      {
LABEL_66:
        v95 = v160;
        if (v117 != (llvm::APInt *)1)
          goto LABEL_69;
        HIDWORD(v122) = *a4;
        LODWORD(v122) = *a4 - 10;
        v121 = v122 >> 1;
        if (v121 > 5 || ((1 << v121) & 0x33) == 0)
          goto LABEL_69;
LABEL_73:
        *v9 = v105;
        *((_DWORD *)v9 + 2) = v108;
        *v163 = 0;
        *((_DWORD *)v163 + 2) = 0;
        return result;
      }
    }
    HIDWORD(v119) = *a4 - 11;
    LODWORD(v119) = HIDWORD(v119);
    v118 = v119 >> 1;
    if (v118 <= 5 && ((1 << v118) & 0x33) != 0)
      goto LABEL_73;
    if (v116 < 0x41)
      goto LABEL_65;
LABEL_63:
    result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase(v115);
    v120 = v116 - (_DWORD)result;
    v95 = v160;
    if (v120 <= 0x40)
    {
      v115 = *(llvm::APInt **)v115;
LABEL_65:
      v117 = *(llvm::APInt **)v115;
      goto LABEL_66;
    }
LABEL_69:
    v123 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v95 + 400))(v95, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v162[5] + 16 * v101), *(_QWORD *)(v162[5] + 16 * v101 + 8));
    v125 = sub_1C5D8C994(v95, v123, v124, (uint64_t)v162, v101, v156, v157, 0x11u, 0, (uint64_t)&v165, a5);
    *v9 = (uint64_t)v125;
    *((_DWORD *)v9 + 2) = v127;
    if (!v125)
    {
      v148 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v95 + 400))(v95, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v162[5] + 16 * v101), *(_QWORD *)(v162[5] + 16 * v101 + 8));
      v150 = v149;
      v151 = sub_1C6367818((_QWORD *)a6, 0x11u);
      v154 = *(_QWORD *)(a6 + 832);
      if (v154)
        LOWORD(v154) = *(_WORD *)(v154 + 8);
      v125 = sub_1C5D58E08(a6, (const char *)0xC1, a5, v148, v150, (uint64_t)v162, v161, v153, v156, v157, v151, v152, SHIDWORD(v152), v154);
      *v9 = (uint64_t)v125;
      *((_DWORD *)v9 + 2) = v155;
    }
    v128 = v100[5] + 16 * v159;
    v129 = *(llvm **)v128;
    v130 = *(_QWORD *)(v128 + 8);
    v131 = *(_QWORD *)(a6 + 832);
    if (v131)
      LOWORD(v131) = *(_WORD *)(v131 + 8);
    result = (unsigned __int16 *)sub_1C5D58E08(a6, (const char *)0xBE, a5, v129, v130, (uint64_t)v125, v9[1], v126, (uint64_t)v100, v159, v105, v108, SHIDWORD(v108), v131);
    v105 = (uint64_t)result;
    LODWORD(v108) = v132;
    goto LABEL_73;
  }
  v55 = v35;
  if (v42 != v49)
    goto LABEL_23;
  if (v44 != v50)
    goto LABEL_23;
  v56 = *((unsigned __int16 *)v42 + 12);
  if (v56 != 35 && v56 != 11)
    goto LABEL_23;
  v57 = v42[10];
  v58 = *(_DWORD *)(v57 + 32);
  if (v58)
  {
    v59 = (llvm::APInt *)(v57 + 24);
    if (v58 > 0x40)
    {
      v67 = v52;
      v68 = v41;
      v69 = v26;
      v70 = v9;
      v71 = v50;
      v72 = llvm::APInt::countTrailingOnesSlowCase(v59);
      v53 = v71;
      v9 = v70;
      v26 = v69;
      v41 = v68;
      v55 = v161;
      v52 = v67;
      if (v72 != v58)
        goto LABEL_23;
    }
    else if (*(_QWORD *)v59 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v58)
    {
LABEL_23:
      v60 = v26[5] + 16 * v41;
      v61 = *(llvm **)v60;
      v62 = *(_QWORD *)(v60 + 8);
      v63 = *(_QWORD *)(a6 + 832);
      v64 = v53;
      v65 = (uint64_t)v52;
      if (v63)
        LOWORD(v63) = *(_WORD *)(v63 + 8);
      *v9 = (uint64_t)sub_1C5D56C70(a6, 173, a5, v61, v62, (uint64_t)v26, v41, v51, (uint64_t)v42, v158, v63);
      *((_DWORD *)v9 + 2) = v81;
      v82 = v26[5] + 16 * v41;
      v83 = *(llvm **)v82;
      v84 = *(_QWORD *)(v82 + 8);
      v85 = *(_QWORD *)(a6 + 832);
      if (v85)
        LOWORD(v85) = *(_WORD *)(v85 + 8);
      v86 = sub_1C5D56C70(a6, 173, a5, v83, v84, (uint64_t)v162, v55, v80, v65, v64, v85);
      *v163 = (unint64_t)v86;
      *((_DWORD *)v163 + 2) = v88;
      v90 = *(_QWORD *)(a6 + 832);
      if (v90)
        LOWORD(v90) = *(_WORD *)(v90 + 8);
      v89 = *(_QWORD *)(*v9 + 40) + 16 * *((unsigned int *)v9 + 2);
      v91 = sub_1C5D56C70(a6, 172, a5, *(llvm **)v89, *(_QWORD *)(v89 + 8), *v9, v9[1], v87, (uint64_t)v86, v163[1], v90);
      *v9 = (uint64_t)v91;
      *((_DWORD *)v9 + 2) = v92;
      v93 = v91[5] + 16 * v92;
      result = (unsigned __int16 *)sub_1C6366AB4(a6, 0, a5, *(llvm **)v93, *(_QWORD *)(v93 + 8), 0, 0);
      *v163 = (unint64_t)result;
      *((_DWORD *)v163 + 2) = v94;
      return result;
    }
  }
  v73 = v26[5] + 16 * v41;
  v74 = *(llvm **)v73;
  v75 = *(_QWORD *)(v73 + 8);
  v76 = *(_QWORD *)(a6 + 832);
  if (v76)
    LOWORD(v76) = *(_WORD *)(v76 + 8);
  result = (unsigned __int16 *)sub_1C5D56C70(a6, 171, a5, v74, v75, (uint64_t)v26, v41, v51, (uint64_t)v162, v55, v76);
  *v9 = (uint64_t)result;
  *((_DWORD *)v9 + 2) = v78;
  *v163 = (unint64_t)v42;
  *((_DWORD *)v163 + 2) = v44;
  return result;
}

uint64_t *sub_1C480EDFC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v4;
  void **v5;
  uint64_t *v8;
  unsigned int v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int16 v18;
  unsigned int v19;
  int v20;
  void *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  __int128 v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  int v38;
  __int16 v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint64_t *v68;
  int v69;
  int v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  uint64_t *v92;
  unsigned int v93;
  unint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t *v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  llvm *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  __int16 v113;
  int v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  unsigned int *v124;
  uint64_t v125;
  void *v126;
  unint64_t v127;
  uint64_t v128;
  __int16 v129;
  int v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  _QWORD *v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  llvm *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  __int16 v153;
  unsigned __int8 *v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  llvm **v158;
  llvm *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  __int16 v169;
  void *v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  __int16 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 *v179;
  void *v180;
  uint64_t v181;
  llvm *v182;
  unsigned int v183;
  BOOL v184;
  uint64_t v185;
  uint64_t *v187;
  uint64_t v188;
  int v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int8 *v203;
  uint64_t *v204;
  uint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  uint64_t v209;
  __int16 v210;
  uint64_t v211;
  void *v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  __int16 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  __int16 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  _QWORD *v234;
  unint64_t v235;
  uint64_t v236;
  __int16 v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t **v247;
  unint64_t v248;
  uint64_t v249;
  llvm *v250;
  uint64_t v251;
  int v252;
  BOOL v253;
  uint64_t *v254;
  int v255;
  BOOL v256;
  uint64_t v257;
  unsigned int *v258;
  uint64_t **v259;
  uint64_t v260;
  unsigned __int8 *v261;
  int v262;
  uint64_t v263;
  BOOL v264;
  char v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  char EVT;
  int v270;
  void *v271;
  uint64_t *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  __int16 v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t *v285;
  unint64_t v286;
  __int16 v287;
  uint64_t v288;
  uint64_t *v289;
  unsigned int v290;
  unint64_t v291;
  _QWORD *v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  __int16 v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  unint64_t v309;
  unint64_t v310;
  __int16 v311;
  uint64_t v312;
  uint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  unint64_t v317;
  uint64_t v318;
  __int16 v319;
  uint64_t v320;
  uint64_t *v321;
  unint64_t v322;
  unint64_t v323;
  _QWORD *v324;
  unint64_t v325;
  uint64_t v326;
  __int16 v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  unint64_t v333;
  uint64_t v334;
  __int16 v335;
  uint64_t v336;
  uint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  _QWORD *v340;
  unint64_t v341;
  uint64_t v342;
  __int16 v343;
  uint64_t v344;
  uint64_t *v345;
  unint64_t v346;
  unint64_t v347;
  __int16 v348;
  uint64_t v349;
  uint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  __int16 v353;
  uint64_t v354;
  uint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int16 v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  _QWORD *v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  uint64_t *v384;
  int v385;
  int v386;
  uint64_t *v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unsigned int v392;
  unint64_t v393;
  uint64_t v394;
  int v395;
  void *v396;
  uint64_t *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  __int16 v401;
  void *v402;
  uint64_t v403;
  uint64_t v404;
  llvm *v405;
  unint64_t v406;
  uint64_t *v407;
  uint64_t v408;
  unint64_t v409;
  int v410;
  uint64_t *v412;
  unint64_t v413;
  unint64_t v414;
  float v415;
  uint64_t *v416;
  unsigned int v417;
  uint64_t v418;
  void *v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  unsigned int v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  __int16 v428;
  unint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t *v433;
  unsigned int v434;
  _QWORD **v435;
  uint64_t v436;
  unsigned __int8 *v437;
  int v438;
  uint64_t v439;
  llvm *v440;
  uint64_t v441;
  uint64_t v442;
  const char *v443;
  unsigned __int8 *v444;
  uint64_t v445;
  uint64_t v446;
  _BOOL4 v447;
  void *v448;
  uint64_t v449;
  __int16 v450;
  void *v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  int v456;
  uint64_t v458;
  uint64_t v460;
  unsigned int v461;
  unint64_t v462;
  uint64_t *v463;
  unsigned int v464;
  unint64_t v465;
  unsigned int v466;
  uint64_t *v467;
  unint64_t v468;
  unint64_t v469;
  uint64_t v470;
  __int16 v471;
  unint64_t v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unsigned int v478;
  uint64_t *v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t *v484;
  uint64_t v485;
  __int16 v486;
  unint64_t v487;
  _QWORD *v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t *v492;
  unsigned __int8 *v493;
  uint64_t ExtendedSizeInBits;
  uint64_t v495;
  void *v496;
  uint64_t v497;
  __int16 v498;
  uint64_t *v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unsigned __int8 *v506;
  void **v507;
  uint64_t *v508;
  __int16 v509;
  unsigned int v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t *v514;
  __int16 v515;
  unsigned int v516;
  unint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t *v520;
  __int16 v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t *v525;
  unsigned int v526;
  unint64_t v527;
  _QWORD *v528;
  unint64_t v529;
  uint64_t v530;
  __int16 v531;
  uint64_t v532;
  uint64_t *v533;
  unint64_t v534;
  unint64_t v535;
  _QWORD *v536;
  unint64_t v537;
  uint64_t v538;
  __int16 v539;
  uint64_t v540;
  uint64_t *v541;
  unint64_t v542;
  unint64_t v543;
  _QWORD *v544;
  unint64_t v545;
  uint64_t v546;
  __int16 v547;
  uint64_t v548;
  uint64_t *v549;
  unint64_t v550;
  unint64_t v551;
  _QWORD *v552;
  unint64_t v553;
  uint64_t v554;
  __int16 v555;
  uint64_t v556;
  uint64_t *v557;
  unint64_t v558;
  __int16 v559;
  uint64_t v560;
  uint64_t *v561;
  unint64_t v562;
  unint64_t v563;
  __int16 v564;
  uint64_t v565;
  uint64_t *v566;
  unint64_t v567;
  unint64_t v568;
  __int16 v569;
  uint64_t v570;
  uint64_t *v571;
  unint64_t v572;
  __int16 v573;
  uint64_t v574;
  uint64_t *v575;
  uint64_t v576;
  unint64_t v577;
  __int16 v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t *v581;
  __int16 v582;
  uint64_t v583;
  uint64_t *v584;
  unint64_t v585;
  unint64_t v586;
  _QWORD *v587;
  unint64_t v588;
  uint64_t v589;
  __int16 v590;
  uint64_t v591;
  uint64_t *v592;
  unint64_t v593;
  _QWORD *v594;
  unint64_t v595;
  uint64_t v596;
  __int16 v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t *v600;
  unint64_t v601;
  unint64_t v602;
  __int16 v603;
  uint64_t v604;
  uint64_t *v605;
  unint64_t v606;
  unint64_t v607;
  __int16 v608;
  uint64_t v609;
  uint64_t *v610;
  unint64_t v611;
  uint64_t v612;
  __int16 v613;
  uint64_t v614;
  uint64_t *v615;
  __int16 v616;
  unsigned int v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t *v620;
  unsigned int v621;
  unint64_t v622;
  _QWORD *v623;
  unint64_t v624;
  uint64_t v625;
  __int16 v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t *v629;
  unint64_t v630;
  unint64_t v631;
  __int16 v632;
  uint64_t v633;
  uint64_t *v634;
  uint64_t v635;
  __int16 v636;
  unint64_t v637;
  unsigned int v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t *v641;
  unsigned int v642;
  uint64_t v643;
  __int16 v644;
  uint64_t v645;
  unsigned int v646;
  uint64_t *v647;
  __int16 v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t *v652;
  int v653;
  int v654;
  __int16 v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t *v659;
  __int16 v660;
  unsigned int v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t *v664;
  unsigned int v665;
  uint64_t v666;
  int v667;
  uint64_t *v668;
  __int16 v669;
  unsigned int v670;
  unint64_t v671;
  uint64_t v672;
  uint64_t *v673;
  unsigned int v674;
  unint64_t v675;
  _QWORD *v676;
  unint64_t v677;
  uint64_t v678;
  __int16 v679;
  uint64_t v680;
  uint64_t *v681;
  unint64_t v682;
  _QWORD *v683;
  unint64_t v684;
  uint64_t v685;
  __int16 v686;
  uint64_t v687;
  uint64_t *v688;
  unint64_t v689;
  unint64_t v690;
  _QWORD *v691;
  unint64_t v692;
  uint64_t v693;
  __int16 v694;
  uint64_t v695;
  uint64_t *v696;
  unint64_t v697;
  unint64_t v698;
  _QWORD *v699;
  unint64_t v700;
  uint64_t v701;
  __int16 v702;
  uint64_t v703;
  unint64_t v704;
  unsigned int v705;
  unsigned int v706;
  uint64_t v707;
  __int16 v708;
  uint64_t *v709;
  unint64_t v710;
  __int16 v711;
  uint64_t v712;
  uint64_t *v713;
  unint64_t v714;
  unint64_t v715;
  __int16 v716;
  uint64_t v717;
  uint64_t *v718;
  unint64_t v719;
  unint64_t v720;
  __int16 v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t *v724;
  uint64_t v725;
  __int16 v726;
  uint64_t v727;
  unint64_t v728;
  uint64_t *v729;
  unint64_t v730;
  __int16 v731;
  uint64_t v732;
  uint64_t *v733;
  unint64_t v734;
  _QWORD *v735;
  unint64_t v736;
  uint64_t v737;
  __int16 v738;
  uint64_t v739;
  uint64_t *v740;
  unint64_t v741;
  _QWORD *v742;
  unint64_t v743;
  uint64_t v744;
  __int16 v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t *v748;
  unint64_t v749;
  unint64_t v750;
  __int16 v751;
  uint64_t v752;
  uint64_t *v753;
  unint64_t v754;
  unint64_t v755;
  __int16 v756;
  uint64_t v757;
  uint64_t *v758;
  unint64_t v759;
  uint64_t v760;
  __int16 v761;
  uint64_t v762;
  uint64_t *v763;
  __int16 v764;
  unsigned int v765;
  unint64_t v766;
  uint64_t v767;
  uint64_t *v768;
  unsigned int v769;
  unint64_t v770;
  _QWORD *v771;
  unint64_t v772;
  uint64_t v773;
  __int16 v774;
  uint64_t v775;
  uint64_t *v776;
  unint64_t v777;
  unint64_t v778;
  _QWORD *v779;
  unint64_t v780;
  uint64_t v781;
  __int16 v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t *v785;
  unint64_t v786;
  __int16 v787;
  uint64_t v788;
  uint64_t *v789;
  uint64_t v790;
  __int16 v791;
  unint64_t v792;
  unsigned int v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t *v796;
  unsigned int v797;
  uint64_t v798;
  __int16 v799;
  uint64_t v800;
  uint64_t *v801;
  __int16 v802;
  unsigned int v803;
  unint64_t v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  int v808;
  uint64_t v809;
  unint64_t v810;
  __int16 v811;
  unint64_t v812;
  unsigned int v813;
  uint64_t v814;
  uint64_t v815;
  __int16 v816;
  unint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  uint64_t *v823;
  unint64_t v824;
  uint64_t *v825;
  void *v826;
  uint64_t v827;
  __int16 v828;
  uint64_t *v829;
  uint64_t v830;
  _DWORD *v831;
  int v832;
  int v833;
  uint64_t v834;
  __int16 v835;
  uint64_t v836;
  _BOOL4 v837;
  unsigned __int8 *v838;
  uint64_t v839;
  uint64_t v840;
  __int16 v841;
  unsigned int v842;
  uint64_t *v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  unint64_t v847;
  uint64_t v848;
  llvm *v849;
  uint64_t v850;
  unsigned __int8 *v851;
  _QWORD *v852;
  unint64_t v853;
  uint64_t v854;
  uint64_t v855;
  llvm *v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t *v859;
  uint64_t *v860;
  int v861;
  _BOOL4 v863;
  int v864;
  _BOOL4 v866;
  _QWORD *v867;
  uint64_t v868;
  uint64_t v869;
  unsigned int v870;
  _QWORD *v871;
  uint64_t v872;
  _QWORD *v873;
  uint64_t v874;
  uint64_t v875;
  unsigned int v876;
  _QWORD *v877;
  uint64_t v878;
  char *v879;
  uint64_t v880;
  _QWORD *v881;
  unsigned int v882;
  uint64_t *v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  uint64_t v887;
  uint64_t v888;
  unint64_t v889;
  unsigned __int8 v890;
  unsigned __int8 *v891;
  uint64_t *v892;
  uint64_t v893;
  uint64_t v894;
  unint64_t v895;
  const char *v896;
  unsigned __int8 v897;
  uint64_t v898;
  unint64_t v899;
  uint64_t *v900;
  unint64_t v901;
  uint64_t v902;
  unint64_t v903;
  uint64_t v904;
  void *v905;
  uint64_t v906;
  __int16 v907;
  uint64_t *v908;
  uint64_t v909;
  unint64_t v910;
  unint64_t v911;
  uint64_t v912;
  void *v913;
  uint64_t v914;
  __int16 v915;
  _QWORD *v916;
  unint64_t v917;
  uint64_t v918;
  uint64_t v919;
  unint64_t v920;
  uint64_t *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  unint64_t v925;
  uint64_t v926;
  uint64_t v927;
  __int16 v928;
  uint64_t v929;
  uint64_t *v930;
  __int16 v931;
  uint64_t v932;
  uint64_t v933;
  int v934;
  uint64_t v935;
  void **v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  _QWORD *v941;
  unint64_t v942;
  uint64_t *v943;
  unint64_t v944;
  uint64_t *v945;
  uint64_t v946;
  __int16 v947;
  uint64_t v948;
  unsigned int v949;
  unint64_t v950;
  int v951;
  int v952;
  int v953;
  uint64_t *v955;
  int v956;
  uint64_t *v957;
  int v958;
  uint64_t *v959;
  unsigned int v960;
  unsigned int v961;
  uint64_t *v962;
  int v963;
  int v964;
  uint64_t *v965;
  unint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  unsigned int v970;
  uint64_t v972;
  char v973;
  uint64_t v974;
  __int16 v975;
  uint64_t *v976;
  int v977;
  uint64_t *v978;
  uint64_t v979;
  unint64_t v980;
  unsigned int v981;
  unsigned int v982;
  double v983;
  uint64_t *v984;
  unsigned int v985;
  int v986;
  int v987;
  uint64_t *v988;
  unsigned int v989;
  uint64_t v990;
  unint64_t v991;
  uint64_t *v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  __int16 v996;
  uint64_t v997;
  uint64_t *v998;
  _QWORD *v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  unsigned __int8 *v1004;
  __int128 *v1005;
  unint64_t v1006;
  uint64_t v1007;
  unsigned __int8 *v1008;
  int v1009;
  unsigned __int8 *v1010;
  uint64_t v1011;
  uint64_t v1012;
  int v1013;
  uint64_t *v1014;
  uint64_t v1015;
  unint64_t v1016;
  _QWORD *v1017;
  unint64_t v1018;
  uint64_t v1019;
  __int16 v1020;
  uint64_t v1021;
  uint64_t *v1022;
  uint64_t *v1023;
  uint64_t *v1024;
  uint64_t v1025;
  uint64_t **v1026;
  unsigned int v1027;
  const char *v1028;
  unsigned int v1029;
  unsigned int v1030;
  uint64_t v1031;
  BOOL v1032;
  uint64_t v1033;
  uint64_t v1034;
  unsigned int v1035;
  uint64_t *v1036;
  uint64_t v1037;
  unint64_t v1038;
  _QWORD *v1039;
  unint64_t v1040;
  uint64_t v1041;
  __int16 v1042;
  uint64_t v1043;
  uint64_t *v1044;
  uint64_t *v1045;
  uint64_t *v1046;
  uint64_t v1047;
  uint64_t **v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t *v1052;
  __int16 v1053;
  unsigned int v1054;
  unint64_t v1055;
  uint64_t v1056;
  unint64_t v1057;
  uint64_t *v1058;
  __int16 v1059;
  unsigned int v1060;
  unint64_t v1061;
  uint64_t v1062;
  unint64_t v1063;
  uint64_t *v1064;
  __int16 v1065;
  unsigned int v1066;
  unint64_t v1067;
  uint64_t v1068;
  uint64_t *v1069;
  unsigned int v1070;
  unint64_t v1071;
  _QWORD *v1072;
  unint64_t v1073;
  uint64_t v1074;
  __int16 v1075;
  uint64_t v1076;
  uint64_t *v1077;
  unint64_t v1078;
  unint64_t v1079;
  _QWORD *v1080;
  unint64_t v1081;
  uint64_t v1082;
  __int16 v1083;
  uint64_t v1084;
  uint64_t *v1085;
  unint64_t v1086;
  unint64_t v1087;
  _QWORD *v1088;
  unint64_t v1089;
  uint64_t v1090;
  __int16 v1091;
  uint64_t v1092;
  uint64_t *v1093;
  unint64_t v1094;
  unint64_t v1095;
  _QWORD *v1096;
  unint64_t v1097;
  uint64_t v1098;
  __int16 v1099;
  uint64_t v1100;
  uint64_t *v1101;
  unint64_t v1102;
  unint64_t v1103;
  __int16 v1104;
  uint64_t v1105;
  uint64_t *v1106;
  unint64_t v1107;
  __int16 v1108;
  uint64_t v1109;
  uint64_t *v1110;
  unint64_t v1111;
  unint64_t v1112;
  __int16 v1113;
  uint64_t v1114;
  uint64_t *v1115;
  unint64_t v1116;
  __int16 v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t *v1120;
  unint64_t v1121;
  unint64_t v1122;
  __int16 v1123;
  uint64_t v1124;
  unint64_t v1125;
  uint64_t *v1126;
  __int16 v1127;
  uint64_t v1128;
  uint64_t *v1129;
  unint64_t v1130;
  unint64_t v1131;
  _QWORD *v1132;
  unint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  int v1137;
  uint64_t *v1138;
  __int16 v1139;
  unsigned int v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t *v1143;
  unsigned int v1144;
  unint64_t v1145;
  _QWORD *v1146;
  unint64_t v1147;
  uint64_t v1148;
  __int16 v1149;
  uint64_t v1150;
  uint64_t *v1151;
  unint64_t v1152;
  unint64_t v1153;
  _QWORD *v1154;
  unint64_t v1155;
  uint64_t v1156;
  __int16 v1157;
  uint64_t v1158;
  uint64_t *v1159;
  unint64_t v1160;
  unint64_t v1161;
  _QWORD *v1162;
  unint64_t v1163;
  uint64_t v1164;
  __int16 v1165;
  uint64_t v1166;
  uint64_t *v1167;
  unint64_t v1168;
  unint64_t v1169;
  _QWORD *v1170;
  unint64_t v1171;
  uint64_t v1172;
  __int16 v1173;
  uint64_t v1174;
  uint64_t *v1175;
  unint64_t v1176;
  unint64_t v1177;
  unsigned int v1178;
  unsigned int v1179;
  uint64_t v1180;
  __int16 v1181;
  uint64_t *v1182;
  unint64_t v1183;
  __int16 v1184;
  uint64_t v1185;
  uint64_t *v1186;
  unint64_t v1187;
  unint64_t v1188;
  __int16 v1189;
  uint64_t v1190;
  uint64_t *v1191;
  unint64_t v1192;
  unint64_t v1193;
  __int16 v1194;
  uint64_t v1195;
  uint64_t v1196;
  unint64_t v1197;
  unint64_t v1198;
  __int16 v1199;
  uint64_t v1200;
  unint64_t v1201;
  uint64_t *v1202;
  __int16 v1203;
  uint64_t v1204;
  uint64_t *v1205;
  unint64_t v1206;
  unint64_t v1207;
  _QWORD *v1208;
  unint64_t v1209;
  uint64_t v1210;
  __int16 v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t *v1214;
  unint64_t v1215;
  unint64_t v1216;
  __int16 v1217;
  uint64_t v1218;
  unint64_t v1219;
  uint64_t *v1220;
  unint64_t v1221;
  __int16 v1222;
  uint64_t v1223;
  unint64_t v1224;
  uint64_t *v1225;
  unint64_t v1226;
  uint64_t v1227;
  __int16 v1228;
  uint64_t v1229;
  uint64_t *v1230;
  __int16 v1231;
  unsigned int v1232;
  unint64_t v1233;
  uint64_t v1234;
  uint64_t *v1235;
  unsigned int v1236;
  unint64_t v1237;
  _QWORD *v1238;
  unint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t *v1242;
  unint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  __int16 v1246;
  uint64_t v1247;
  uint64_t *v1248;
  unsigned int v1249;
  uint64_t v1250;
  uint64_t *v1251;
  unint64_t v1252;
  unint64_t v1253;
  uint64_t v1254;
  const char *v1255;
  unint64_t v1256;
  uint64_t v1257;
  const char *v1258;
  uint64_t *v1259;
  unsigned int v1260;
  uint64_t *v1261;
  unint64_t v1262;
  unint64_t v1263;
  __int16 v1264;
  uint64_t v1265;
  unint64_t v1266;
  uint64_t *v1267;
  __int16 v1268;
  uint64_t v1269;
  uint64_t *v1270;
  unsigned int v1271;
  uint64_t v1272;
  uint64_t *v1273;
  unint64_t v1274;
  _QWORD *v1275;
  uint64_t v1276;
  uint64_t v1277;
  unsigned int v1278;
  _QWORD *v1279;
  unsigned int v1280;
  unsigned __int8 *v1281;
  __int128 *v1282;
  unsigned int v1283;
  __int128 v1284;
  _QWORD *v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  _QWORD *v1289;
  int v1290;
  uint64_t *v1291;
  uint64_t *v1292;
  unsigned int v1293;
  uint64_t v1294;
  uint64_t *v1295;
  unint64_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  unint64_t v1299;
  uint64_t *v1300;
  unint64_t v1301;
  uint64_t v1302;
  __int16 v1303;
  unint64_t v1304;
  uint64_t *v1305;
  unint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t *v1309;
  int v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t *v1314;
  unsigned int v1315;
  unsigned int v1316;
  uint64_t v1317;
  uint64_t *v1318;
  uint64_t v1319;
  unsigned int v1320;
  unint64_t v1321;
  uint64_t v1322;
  uint64_t *v1323;
  uint64_t *v1324;
  uint64_t v1325;
  _QWORD *v1326;
  uint64_t v1327;
  uint64_t *v1328;
  uint64_t v1329;
  uint64_t v1330;
  _QWORD *v1331;
  uint64_t v1332;
  unsigned int v1333;
  char *v1334;
  int v1335;
  uint64_t **v1336;
  uint64_t v1337;
  _QWORD *v1338;
  uint64_t v1339;
  uint64_t v1340;
  unsigned int v1341;
  _QWORD *v1342;
  _QWORD *v1343;
  uint64_t v1344;
  uint64_t v1345;
  unsigned int v1346;
  _QWORD *v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  unsigned int v1351;
  uint64_t *v1352;
  uint64_t *v1353;
  uint64_t v1354;
  llvm *v1355;
  uint64_t v1356;
  __int128 v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  __int16 v1363;
  unsigned int v1364;
  uint64_t v1365;
  unsigned int v1366;
  uint64_t v1367;
  __int16 v1368;
  uint64_t *v1369;
  unint64_t v1370;
  uint64_t v1371;
  __int16 v1372;
  uint64_t v1373;
  unint64_t v1374;
  uint64_t *v1375;
  __int16 v1376;
  uint64_t v1377;
  uint64_t *v1378;
  unint64_t v1379;
  unint64_t v1380;
  unint64_t v1381;
  uint64_t *v1382;
  int v1383;
  int v1384;
  uint64_t *v1385;
  unsigned int v1386;
  uint64_t *v1387;
  int v1388;
  int v1389;
  uint64_t *v1390;
  unsigned int v1391;
  int v1392;
  uint64_t v1393;
  uint64_t v1394;
  llvm *v1395;
  uint64_t v1396;
  int v1397;
  uint64_t v1398;
  unsigned int v1399;
  unint64_t v1400;
  _QWORD *v1401;
  unint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  unint64_t v1405;
  uint64_t v1406;
  __int16 v1407;
  uint64_t v1408;
  _QWORD *v1409;
  unint64_t v1410;
  uint64_t v1411;
  __int16 v1412;
  uint64_t v1413;
  unsigned int v1414;
  uint64_t v1415;
  const char *v1416;
  uint64_t v1417;
  _QWORD *v1418;
  unint64_t v1419;
  uint64_t v1420;
  __int16 v1421;
  uint64_t v1422;
  unsigned int v1423;
  _QWORD *v1424;
  unint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t *v1428;
  unsigned int v1429;
  uint64_t v1430;
  uint64_t v1431;
  unint64_t v1432;
  uint64_t *v1433;
  uint64_t v1434;
  __int16 v1435;
  uint64_t v1436;
  unint64_t v1437;
  _QWORD *v1438;
  unint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  _QWORD *v1442;
  int v1443;
  int v1444;
  uint64_t *v1445;
  uint64_t v1446;
  unint64_t v1447;
  _QWORD *v1448;
  unint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t *v1452;
  unint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  unint64_t v1456;
  uint64_t *v1457;
  uint64_t v1458;
  unint64_t v1459;
  uint64_t v1460;
  unint64_t v1461;
  uint64_t *v1462;
  uint64_t v1463;
  unint64_t v1464;
  uint64_t v1465;
  uint64_t *v1466;
  unsigned int v1467;
  unint64_t v1468;
  uint64_t v1469;
  __int16 v1470;
  unint64_t v1471;
  uint64_t *v1472;
  uint64_t v1473;
  __int16 v1474;
  uint64_t v1475;
  uint64_t *v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t *v1479;
  uint64_t v1480;
  uint64_t v1481;
  __int16 v1482;
  uint64_t v1483;
  uint64_t *v1484;
  uint64_t v1485;
  uint64_t v1486;
  __int16 v1487;
  uint64_t v1488;
  unsigned int v1489;
  _QWORD *v1490;
  unint64_t v1491;
  uint64_t v1492;
  __int16 v1493;
  uint64_t v1494;
  unsigned int v1495;
  unsigned int v1496;
  uint64_t *v1497;
  int v1498;
  int v1499;
  int v1500;
  uint64_t *v1501;
  unsigned int v1502;
  unsigned int v1503;
  uint64_t v1504;
  unsigned int v1505;
  uint64_t v1506;
  uint64_t *v1507;
  unsigned int v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t *v1511;
  unint64_t v1512;
  unint64_t v1513;
  __int16 v1514;
  uint64_t v1515;
  uint64_t v1516;
  unint64_t v1517;
  uint64_t v1518;
  uint64_t *v1519;
  unint64_t v1520;
  unint64_t v1521;
  _QWORD *v1522;
  unint64_t v1523;
  uint64_t v1524;
  __int16 v1525;
  uint64_t v1526;
  uint64_t *v1527;
  unint64_t v1528;
  unint64_t v1529;
  _QWORD *v1530;
  unint64_t v1531;
  uint64_t v1532;
  __int16 v1533;
  uint64_t v1534;
  unint64_t v1535;
  unint64_t v1536;
  _QWORD *v1537;
  unint64_t v1538;
  uint64_t v1539;
  __int16 v1540;
  uint64_t v1541;
  uint64_t *v1542;
  unint64_t v1543;
  unint64_t v1544;
  _QWORD *v1545;
  unint64_t v1546;
  uint64_t v1547;
  __int16 v1548;
  uint64_t v1549;
  uint64_t *v1550;
  unint64_t v1551;
  unint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t *v1557;
  unint64_t v1558;
  unint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t *v1562;
  unsigned int v1563;
  unint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t *v1567;
  unsigned int v1568;
  unint64_t v1569;
  uint64_t v1570;
  unsigned int v1571;
  uint64_t *v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t *v1575;
  unsigned int v1576;
  uint64_t v1577;
  uint64_t v1578;
  unint64_t v1579;
  uint64_t *v1580;
  uint64_t v1581;
  __int16 v1582;
  __int128 v1583;
  unsigned int v1584;
  uint64_t v1585;
  int v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  llvm *v1591;
  uint64_t *v1592;
  uint64_t v1593;
  unint64_t v1594;
  uint64_t v1595;
  __int16 v1596;
  unint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  unint64_t v1600;
  uint64_t v1601;
  __int16 v1602;
  uint64_t *v1603;
  unint64_t v1604;
  unint64_t v1605;
  int v1606;
  unint64_t v1607;
  _QWORD *v1608;
  unint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  unint64_t v1612;
  uint64_t v1613;
  uint64_t *v1614;
  unint64_t v1615;
  unint64_t v1616;
  uint64_t *v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  __int16 v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t *v1624;
  unint64_t v1625;
  unint64_t v1626;
  uint64_t v1627;
  uint64_t *v1628;
  uint64_t v1629;
  uint64_t v1630;
  unint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t *v1634;
  unint64_t v1635;
  unint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t *v1639;
  unint64_t v1640;
  unint64_t v1641;
  uint64_t v1642;
  llvm *v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t *v1647;
  unint64_t v1648;
  unint64_t v1649;
  uint64_t v1650;
  llvm *v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t *v1654;
  unint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  unint64_t v1658;
  uint64_t v1659;
  unint64_t v1660;
  uint64_t *v1661;
  unsigned int v1662;
  uint64_t v1663;
  __int16 v1664;
  uint64_t *v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  __int16 v1669;
  uint64_t *v1670;
  int v1671;
  uint64_t i;
  void **v1673;
  unsigned int v1674;
  unint64_t v1675;
  uint64_t v1676;
  size_t v1677;
  unint64_t v1678;
  unint64_t v1679;
  size_t v1680;
  unsigned int v1681;
  uint64_t v1682;
  void **v1683;
  void *v1684;
  void *v1685;
  __int16 v1686;
  unsigned int v1687;
  uint64_t v1688;
  unsigned int v1689;
  _QWORD *v1690;
  unint64_t v1691;
  uint64_t v1692;
  __int16 v1693;
  uint64_t v1694;
  uint64_t *v1695;
  int v1696;
  _QWORD *v1697;
  unint64_t v1698;
  uint64_t v1699;
  __int16 v1700;
  uint64_t v1701;
  uint64_t *v1702;
  int v1703;
  int v1704;
  _QWORD *v1705;
  unint64_t v1706;
  uint64_t v1707;
  __int16 v1708;
  uint64_t v1709;
  uint64_t *v1710;
  int v1711;
  int v1712;
  _QWORD *v1713;
  unint64_t v1714;
  uint64_t v1715;
  __int16 v1716;
  uint64_t v1717;
  uint64_t *v1718;
  int v1719;
  int v1720;
  uint64_t *v1721;
  uint64_t v1722;
  uint64_t *v1723;
  unint64_t v1724;
  unint64_t v1725;
  uint64_t *v1726;
  uint64_t v1727;
  uint64_t *v1728;
  unint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  unint64_t v1732;
  uint64_t v1733;
  __int16 v1734;
  uint64_t v1735;
  int64_t v1736;
  int v1737;
  unint64_t v1738;
  unsigned int v1739;
  uint64_t ExtendedIntegerVT;
  uint64_t v1741;
  _QWORD *v1742;
  _QWORD *v1743;
  unint64_t v1744;
  unint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  unint64_t v1748;
  unint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  unint64_t v1752;
  uint64_t v1753;
  uint64_t *v1754;
  unint64_t v1755;
  uint64_t v1756;
  int v1757;
  uint64_t v1758;
  unint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  void *v1764;
  uint64_t v1765;
  uint64_t v1766;
  _QWORD *v1767;
  uint64_t v1768;
  uint64_t v1769;
  unint64_t v1770;
  int v1771;
  uint64_t *v1772;
  llvm *v1773;
  unint64_t v1774;
  unint64_t v1775;
  uint64_t v1776;
  unint64_t v1777;
  unint64_t v1778;
  _DWORD *v1779;
  uint64_t v1780;
  int v1781;
  int v1782;
  int v1783;
  uint64_t v1784;
  _QWORD *v1785;
  uint64_t v1786;
  uint64_t v1787;
  unint64_t v1788;
  uint64_t *v1789;
  uint64_t v1790;
  uint64_t v1791;
  unint64_t v1792;
  uint64_t *v1793;
  uint64_t v1794;
  unint64_t v1795;
  int v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  unint64_t v1801;
  uint64_t *v1802;
  unint64_t v1803;
  uint64_t v1804;
  unint64_t v1805;
  int v1806;
  uint64_t *v1807;
  unint64_t v1808;
  int v1809;
  uint64_t v1810;
  char v1811;
  llvm *v1812;
  uint64_t v1813;
  _BOOL4 v1814;
  unint64_t v1815;
  unint64_t v1816;
  int v1817;
  unint64_t v1818;
  int v1819;
  __int128 v1820;
  uint64_t v1821;
  uint64_t *v1822;
  unint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  void *v1826;
  unsigned int v1827;
  void *v1828;
  unsigned int v1829;
  unsigned __int8 *v1830;
  int v1831;
  unsigned __int8 *v1832;
  int v1833;
  unsigned __int8 *v1834;
  int v1835;
  unsigned int v1836;
  __int128 v1837;
  __int128 v1838;
  __int128 v1839;
  void *__src[2];
  _QWORD *v1841;
  uint64_t v1842;
  void *v1843;
  uint64_t v1844;
  uint64_t *v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  __int128 v1849;
  _QWORD *v1850;
  int v1851;
  char v1852;
  uint64_t v1853;

  v8 = (uint64_t *)a2;
  v1853 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int16 *)(a2 + 24);
  if (v10 > 0xDF)
  {
    if (*(unsigned __int16 *)(a2 + 24) > 0xF5u)
    {
      v4 = (uint64_t *)a2;
      if (v10 - 246 >= 2)
      {
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 281))
          return 0;
        v23 = *(_QWORD *)(a2 + 32);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 40) + 16 * *(unsigned int *)(v23 + 88)) != 6)
          return 0;
        v24 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v1849 = v24;
        if (v24)
        {
          llvm::MetadataTracking::track((uint64_t)&v1849, v24, 2);
          v23 = v8[4];
          v24 = (unsigned __int8 *)v1849;
        }
        v25 = *((_DWORD *)v8 + 15);
        DWORD2(v1849) = v25;
        v26 = *(_OWORD *)(v23 + 80);
        v1838 = *(_OWORD *)(v23 + 120);
        v1839 = v26;
        v27 = *(_DWORD *)(*(_QWORD *)(v23 + 40) + 76);
        LODWORD(v1837) = v27;
        v1830 = v24;
        if (v24)
        {
          llvm::MetadataTracking::track((uint64_t)&v1830, v24, 2);
          v25 = DWORD2(v1849);
        }
        v1831 = v25;
        sub_1C480E3A0((unsigned int *)a1, (uint64_t)&v1839, (unint64_t *)&v1838, (unsigned int *)&v1837, (const llvm::APInt *)&v1830, a4);
        if (v1830)
          llvm::MetadataTracking::untrack((uint64_t)&v1830, v1830);
        if (!(_QWORD)v1838)
        {
          v28 = *(_QWORD *)(v1839 + 40) + 16 * DWORD2(v1839);
          *(_QWORD *)&v1838 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, *(llvm **)v28, *(_QWORD *)(v28 + 8), 0, 0);
          DWORD2(v1838) = v29;
          v27 = 22;
        }
        v30 = v8[4];
        v31 = *(_DWORD *)(v30 + 8);
        __src[0] = *(void **)v30;
        LODWORD(__src[1]) = v31;
        v1841 = (_QWORD *)sub_1C6367818((_QWORD *)a4, v27);
        v1842 = v32;
        v1843 = (void *)v1839;
        LODWORD(v1844) = DWORD2(v1839);
        v1845 = (uint64_t *)v1838;
        LODWORD(v1846) = DWORD2(v1838);
        v33 = v8[4];
        LODWORD(v1848) = *(_DWORD *)(v33 + 168);
        v1847 = *(_QWORD *)(v33 + 160);
        v34 = *(_QWORD *)(a4 + 832);
        v35 = v34 ? *(unsigned __int16 *)(v34 + 8) : 0;
        v242 = a4;
        v243 = 260;
        v244 = 1;
        v245 = 5;
LABEL_835:
        v1353 = sub_1C636D0C8(v242, (const char *)v243, (const llvm::APInt *)&v1849, (llvm *)v244, 0, (uint64_t *)__src, v245, v35);
LABEL_836:
        v4 = v1353;
LABEL_837:
        v506 = (unsigned __int8 *)v1849;
        if ((_QWORD)v1849)
        {
          v507 = (void **)&v1849;
          goto LABEL_607;
        }
      }
      return v4;
    }
    switch(*(_WORD *)(a2 + 24))
    {
      case 0xE5:
        v820 = *(_QWORD *)(a2 + 32);
        v821 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 16 * a3);
        v823 = *(uint64_t **)v820;
        v822 = *(_QWORD *)(v820 + 8);
        v825 = *(uint64_t **)(v820 + 40);
        v824 = *(_QWORD *)(v820 + 48);
        v826 = *(void **)(a2 + 64);
        __src[0] = v826;
        if (v826)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v826, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        if (v821 == 9)
        {
          v827 = *(_QWORD *)(a4 + 832);
          if (v827)
            v828 = *(_WORD *)(v827 + 8);
          else
            v828 = 0;
          v823 = sub_1C5D52060(a4, 215, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v823, v822, v828);
          v1363 = 0;
          v822 = v822 & 0xFFFFFFFF00000000 | v1364;
          v1365 = *(_QWORD *)(a4 + 832);
          if (v1365)
            v1363 = *(_WORD *)(v1365 + 8);
          v825 = sub_1C5D52060(a4, 215, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v825, v824, v1363);
          v824 = v824 & 0xFFFFFFFF00000000 | v1366;
        }
        v1367 = *(_QWORD *)(a4 + 832);
        if (v1367)
          v1368 = *(_WORD *)(v1367 + 8);
        else
          v1368 = 0;
        v1369 = sub_1C5D52060(a4, 231, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v823, v822, v1368);
        v1372 = 0;
        v1373 = *(_QWORD *)(a4 + 832);
        if (v1373)
          v1372 = *(_WORD *)(v1373 + 8);
        v1821 = v821;
        v1794 = (uint64_t)v825;
        v1375 = sub_1C5D56C70(a4, 98, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v825, v824, v1371, (uint64_t)v1369, v1370, v1372);
        v1376 = 0;
        v1377 = *(_QWORD *)(a4 + 832);
        if (v1377)
          v1376 = *(_WORD *)(v1377 + 8);
        v1806 = v824;
        v1378 = sub_1C5D52060(a4, 234, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v1375, v1374, v1376);
        v1380 = v1379;
        v1381 = v1379;
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 280))
        {
          v1382 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, 10, 0, 0, 0.0);
          v1384 = v1383;
          v1385 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, 10, 0, 0, 0.0);
          sub_1C47DF81C((_QWORD *)a4, (const llvm::APInt *)__src, (uint64_t)v823, v822, (uint64_t)v1382, v1384, (uint64_t)v1385, v1386, (uint64_t)v1378, v1380, SHIDWORD(v1380), 1u);
          v1381 = v1380 & 0xFFFFFFFF00000000;
        }
        v1387 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, 10, 0, 0, 0.0);
        v1389 = v1388;
        v1390 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, 10, 0, 0, 1.0);
        v1392 = v1391;
        v1393 = v1390[5] + 16 * v1391;
        v1395 = *(llvm **)v1393;
        v1394 = *(_QWORD *)(v1393 + 8);
        v1396 = sub_1C6367818((_QWORD *)a4, 1u);
        v4 = sub_1C63698B8(a4, (const char *)0xC0, (const llvm::APInt *)__src, v1395, v1394, v1794, v1806, v1398, (uint64_t)v1387, v1389, (uint64_t)v1390, v1392, (uint64_t)v1378, v1380, v1396, v1397);
        v1400 = v1381 & 0xFFFFFFFF00000000 | v1399;
        if (v1821 == 9)
        {
          v1401 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
          v1404 = *(_QWORD *)(a4 + 832);
          if (v1404)
            LOWORD(v1404) = *(_WORD *)(v1404 + 8);
          v4 = sub_1C5D56C70(a4, 212, (const llvm::APInt *)__src, (llvm *)9, 0, (uint64_t)v4, v1400, v1403, (uint64_t)v1401, v1402, v1404);
        }
        goto LABEL_605;
      case 0xE6:
        v12 = *(void **)(a2 + 64);
        __src[0] = v12;
        if (v12)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v12, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v13 = v8[4];
        v14 = *(unsigned __int8 *)(v8[5] + 16 * a3);
        v16 = *(uint64_t **)v13;
        v15 = *(_QWORD *)(v13 + 8);
        if (v14 == 9)
        {
          v17 = *(_QWORD *)(a4 + 832);
          if (v17)
            v18 = *(_WORD *)(v17 + 8);
          else
            v18 = 0;
          v16 = sub_1C5D52060(a4, 215, (const llvm::APInt *)__src, (llvm *)0xA, 0, *(_QWORD *)v13, *(_QWORD *)(v13 + 8), v18);
          v15 = v15 & 0xFFFFFFFF00000000 | v466;
        }
        v467 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, 10, 0, 0, 0.693147181);
        v469 = v468;
        v470 = *(_QWORD *)(a4 + 832);
        if (v470)
          v471 = *(_WORD *)(v470 + 8);
        else
          v471 = 0;
        v473 = sub_1C5D52060(a4, 231, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v16, v15, v471);
        v475 = *(_QWORD *)(a4 + 832);
        if (v475)
          LOWORD(v475) = *(_WORD *)(v475 + 8);
        v4 = sub_1C5D56C70(a4, 98, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v473, v472, v474, (uint64_t)v467, v469, v475);
        v477 = v476;
        if (v14 != 9)
          goto LABEL_605;
        goto LABEL_311;
      case 0xE7:
      case 0xE8:
      case 0xEA:
      case 0xEB:
LABEL_1092:
        __break(1u);
LABEL_1093:
LABEL_448:
        if ((int)v5 <= 31)
        {
          switch((_DWORD)v5)
          {
            case 1:
              v817 = 0;
              v818 = 0;
              v819 = 2;
              goto LABEL_961;
            case 0x10:
              v817 = 0;
              v818 = 0;
              v819 = 4;
              goto LABEL_961;
            case 8:
              v817 = 0;
              v818 = 0;
              v819 = 3;
              goto LABEL_961;
          }
        }
        else
        {
          switch((_DWORD)v5)
          {
            case 0x20:
              v817 = 0;
              v818 = 0;
              v819 = 5;
              goto LABEL_961;
            case 0x40:
              v817 = 0;
              v818 = 0;
              v819 = 6;
              goto LABEL_961;
            case 0x80:
              v817 = 0;
              v818 = 0;
              v819 = 7;
              goto LABEL_961;
          }
        }
        ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT((llvm::EVT *)v4, (llvm::LLVMContext *)v5);
        v818 = v1741;
        v817 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
        v819 = ExtendedIntegerVT;
LABEL_961:
        v1591 = (llvm *)(v819 | v817);
        v1592 = (uint64_t *)v8[4];
        v1593 = *v1592;
        v1594 = v1592[1];
        v1595 = *(_QWORD *)(a4 + 832);
        if (v1595)
          v1596 = *(_WORD *)(v1595 + 8);
        else
          v1596 = 0;
        v1807 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1839, v1591, v818, v1593, v1594, v1596);
        v1823 = v1597;
        v1598 = v8[4];
        v1599 = *(_QWORD *)(v1598 + 40);
        v1600 = *(_QWORD *)(v1598 + 48);
        v1601 = *(_QWORD *)(a4 + 832);
        if (v1601)
          v1602 = *(_WORD *)(v1601 + 8);
        else
          v1602 = 0;
        v1603 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1839, v1591, v818, v1599, v1600, v1602);
        v1605 = v1604;
        v1606 = *((unsigned __int16 *)v8 + 12);
        v1785 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1839, (llvm *)5, 0, 0, 0);
        v1795 = v1607;
        v1608 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1839, (llvm *)5, 0, 0, 0);
        if (v819 != 6)
        {
          v1611 = *(_QWORD *)(a4 + 832);
          goto LABEL_974;
        }
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 281) || v1606 != 172)
          goto LABEL_970;
        v1778 = v1609;
        v1767 = v1608;
        for (i = 0; i != 8; i += 4)
        {
          v1673 = &__src[i];
          *((_DWORD *)v1673 + 2) = 1;
          *v1673 = 0;
          *((_DWORD *)v1673 + 6) = 1;
          v1673[2] = 0;
        }
        sub_1C6368768(a4, *(_QWORD *)v8[4], *(_QWORD *)(v8[4] + 8), 0, (uint64_t)&v1849);
        if (LODWORD(__src[1]) >= 0x41 && __src[0])
          MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
        __src[0] = (void *)v1849;
        LODWORD(__src[1]) = DWORD2(v1849);
        DWORD2(v1849) = 0;
        if (v1842 >= 0x41 && v1841)
        {
          MEMORY[0x1CAA32F9C](v1841, 0x1000C8000313F17);
          v1841 = v1850;
          LODWORD(v1842) = v1851;
          v1851 = 0;
          if (DWORD2(v1849) >= 0x41 && (_QWORD)v1849)
            MEMORY[0x1CAA32F9C](v1849, 0x1000C8000313F17);
        }
        else
        {
          v1841 = v1850;
          LODWORD(v1842) = v1851;
        }
        sub_1C6368768(a4, *(_QWORD *)(v8[4] + 40), *(_QWORD *)(v8[4] + 48), 0, (uint64_t)&v1849);
        if (v1844 >= 0x41 && v1843)
          MEMORY[0x1CAA32F9C](v1843, 0x1000C8000313F17);
        v1843 = (void *)v1849;
        LODWORD(v1844) = DWORD2(v1849);
        DWORD2(v1849) = 0;
        if (v1846 >= 0x41 && v1845)
        {
          MEMORY[0x1CAA32F9C](v1845, 0x1000C8000313F17);
          v1845 = v1850;
          LODWORD(v1846) = v1851;
          v1851 = 0;
          if (DWORD2(v1849) >= 0x41 && (_QWORD)v1849)
            MEMORY[0x1CAA32F9C](v1849, 0x1000C8000313F17);
        }
        else
        {
          v1845 = v1850;
          LODWORD(v1846) = v1851;
        }
        v1674 = __src[1];
        v1829 = __src[1];
        v1772 = v1603;
        if (LODWORD(__src[1]) > 0x40)
        {
          v1677 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
          v1828 = (void *)operator new[]();
          memcpy(v1828, __src[0], v1677);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1828);
          v1674 = v1829;
          v1676 = (uint64_t)v1828;
        }
        else
        {
          if (LODWORD(__src[1]))
            v1675 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
          else
            v1675 = 0;
          v1676 = v1675 & ~(uint64_t)__src[0];
        }
        v1827 = v1844;
        if (v1844 <= 0x40)
        {
          if ((_DWORD)v1844)
            v1678 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1844;
          else
            v1678 = 0;
          v1679 = v1678 & ~(unint64_t)v1843;
          goto LABEL_1029;
        }
        v1680 = (((unint64_t)v1844 + 63) >> 3) & 0x3FFFFFF8;
        v1826 = (void *)operator new[]();
        memcpy(v1826, v1843, v1680);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1826);
        v1681 = v1827;
        v1679 = (unint64_t)v1826;
        if (v1827 < 0x41)
        {
LABEL_1029:
          if ((v1679 & v1676) != 0)
            v1606 = 172;
          else
            v1606 = 56;
          goto LABEL_1032;
        }
        v1735 = 0;
        v1736 = ((unint64_t)v1827 + 63) >> 6;
        do
        {
          *(_QWORD *)(v1679 + v1735) &= *(_QWORD *)(v1676 + v1735);
          v1735 += 8;
        }
        while (8 * v1736 != v1735);
        v1737 = 0;
        do
        {
          v184 = v1736-- < 1;
          if (v184)
            break;
          v1738 = *(_QWORD *)(v1679 + 8 * v1736);
          v1737 += __clz(v1738);
        }
        while (!v1738);
        v1739 = v1681 | 0xFFFFFFC0;
        if ((v1681 & 0x3F) == 0)
          v1739 = 0;
        v1606 = 172;
        if (v1681 - v1737 - v1739 <= 0x40)
        {
          if (*(_QWORD *)v1679)
            v1606 = 172;
          else
            v1606 = 56;
        }
        if (v1679)
          MEMORY[0x1CAA32F9C](v1679, 0x1000C8000313F17);
LABEL_1032:
        if (v1674 >= 0x41 && v1676)
          MEMORY[0x1CAA32F9C](v1676, 0x1000C8000313F17);
        v1682 = 0;
        v1609 = v1778;
        do
        {
          v1683 = &__src[v1682];
          if (*(_DWORD *)((char *)&v1846 + v1682 * 8) >= 0x41u)
          {
            v1684 = v1683[6];
            if (v1684)
            {
              MEMORY[0x1CAA32F9C](v1684, 0x1000C8000313F17);
              v1609 = v1778;
            }
          }
          if (*((_DWORD *)v1683 + 10) >= 0x41u)
          {
            v1685 = v1683[4];
            if (v1685)
            {
              MEMORY[0x1CAA32F9C](v1685, 0x1000C8000313F17);
              v1609 = v1778;
            }
          }
          v1682 -= 4;
        }
        while (v1682 != -8);
        v1608 = v1767;
        v1603 = v1772;
LABEL_970:
        v1611 = *(_QWORD *)(a4 + 832);
        if (v1606 != 56)
        {
          v1777 = v1605;
          v1612 = v1609;
          v1613 = (uint64_t)v1608;
          if (v1611)
            LOWORD(v1611) = *(_WORD *)(v1611 + 8);
          v1624 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1839, (llvm *)5, 0, (uint64_t)v1807, v1823, v1610, (uint64_t)v1785, v1795, v1611);
          v1626 = v1625;
          v1627 = *(_QWORD *)(a4 + 832);
          if (v1627)
            LOWORD(v1627) = *(_WORD *)(v1627 + 8);
          v1628 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1839, (llvm *)5, 0, (uint64_t)v1807, v1823, v1623, v1613, v1612, v1627);
          v1630 = *(_QWORD *)(a4 + 832);
          v1808 = v1631;
          v1824 = (uint64_t)v1628;
          if (v1630)
            LOWORD(v1630) = *(_WORD *)(v1630 + 8);
          v1632 = (uint64_t)v1603;
          v1634 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1839, (llvm *)5, 0, (uint64_t)v1603, v1605, v1629, (uint64_t)v1785, v1795, v1630);
          v1636 = v1635;
          v1637 = *(_QWORD *)(a4 + 832);
          if (v1637)
            LOWORD(v1637) = *(_WORD *)(v1637 + 8);
          v1639 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1839, (llvm *)5, 0, v1632, v1777, v1633, v1613, v1612, v1637);
          v1641 = v1640;
          v1642 = v1624[5] + 16 * v1626;
          v1643 = *(llvm **)v1642;
          v1644 = *(_QWORD *)(v1642 + 8);
          v1645 = *(_QWORD *)(a4 + 832);
          if (v1645)
            LOWORD(v1645) = *(_WORD *)(v1645 + 8);
          v1647 = sub_1C5D56C70(a4, *((unsigned __int16 *)v8 + 12), (const llvm::APInt *)&v1839, v1643, v1644, (uint64_t)v1624, v1626, v1638, (uint64_t)v1634, v1636, v1645);
          v1649 = v1648;
          v1650 = v1624[5] + 16 * v1626;
          v1651 = *(llvm **)v1650;
          v1652 = *(_QWORD *)(v1650 + 8);
          v1653 = *(_QWORD *)(a4 + 832);
          if (v1653)
            LOWORD(v1653) = *(_WORD *)(v1653 + 8);
          v1654 = sub_1C5D56C70(a4, *((unsigned __int16 *)v8 + 12), (const llvm::APInt *)&v1839, v1651, v1652, v1824, v1808, v1646, (uint64_t)v1639, v1641, v1653);
          v1657 = *(_QWORD *)(a4 + 832);
          if (v1657)
            LOWORD(v1657) = *(_WORD *)(v1657 + 8);
          v1614 = sub_1C5D56C70(a4, 146, (const llvm::APInt *)&v1839, (llvm *)0x31, 0, (uint64_t)v1647, v1649, v1656, (uint64_t)v1654, v1655, v1657);
          v1616 = v1658;
          v1659 = *(_QWORD *)(a4 + 832);
          if (v1659)
            v1621 = *(_WORD *)(v1659 + 8);
          else
            v1621 = 0;
          v1622 = a4;
          v1618 = 6;
          v1619 = 0;
          goto LABEL_996;
        }
LABEL_974:
        if (v1611)
          LOWORD(v1611) = *(_WORD *)(v1611 + 8);
        v1614 = sub_1C5D56C70(a4, *((unsigned __int16 *)v8 + 12), (const llvm::APInt *)&v1839, v1591, v818, (uint64_t)v1807, v1823, v1610, (uint64_t)v1603, v1605, v1611);
        v1616 = v1615;
        v1617 = (uint64_t *)(v8[5] + 16 * a3);
        v1618 = *v1617;
        v1619 = v1617[1];
        v1620 = *(_QWORD *)(a4 + 832);
        if (v1620)
          v1621 = *(_WORD *)(v1620 + 8);
        else
          v1621 = 0;
        v1622 = a4;
LABEL_996:
        v4 = sub_1C5D52060(v1622, 216, (const llvm::APInt *)&v1839, (llvm *)v1618, v1619, (uint64_t)v1614, v1616, v1621);
        goto LABEL_330;
      case 0xE9:
        v163 = *(void **)(a2 + 64);
        __src[0] = v163;
        if (v163)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v163, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v164 = v8[4];
        v165 = *(unsigned __int8 *)(v8[5] + 16 * a3);
        v167 = *(uint64_t **)v164;
        v166 = *(_QWORD *)(v164 + 8);
        if (v165 == 9)
        {
          v168 = *(_QWORD *)(a4 + 832);
          if (v168)
            v169 = *(_WORD *)(v168 + 8);
          else
            v169 = 0;
          v167 = sub_1C5D52060(a4, 215, (const llvm::APInt *)__src, (llvm *)0xA, 0, *(_QWORD *)v164, *(_QWORD *)(v164 + 8), v169);
          v166 = v166 & 0xFFFFFFFF00000000 | v478;
        }
        v479 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, 10, 0, 0, 1.44269504);
        v482 = *(_QWORD *)(a4 + 832);
        if (v482)
          LOWORD(v482) = *(_WORD *)(v482 + 8);
        v484 = sub_1C5D56C70(a4, 98, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v167, v166, v481, (uint64_t)v479, v480, v482);
        v485 = *(_QWORD *)(a4 + 832);
        if (v485)
          v486 = *(_WORD *)(v485 + 8);
        else
          v486 = 0;
        v4 = sub_1C5D52060(a4, 234, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v484, v483, v486);
        v477 = v487;
        if (v165 != 9)
          goto LABEL_605;
LABEL_311:
        v488 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v491 = *(_QWORD *)(a4 + 832);
        if (v491)
          LOWORD(v491) = *(_WORD *)(v491 + 8);
        v492 = sub_1C5D56C70(a4, 212, (const llvm::APInt *)__src, (llvm *)9, 0, (uint64_t)v4, v477, v490, (uint64_t)v488, v489, v491);
LABEL_882:
        v4 = v492;
        goto LABEL_605;
      case 0xEC:
        v145 = *(uint64_t **)(a2 + 32);
        v146 = *v145;
        v147 = v145[1];
        v148 = *(_QWORD *)(*v145 + 40) + 16 * v147;
        v149 = *(llvm **)v148;
        v150 = *(_QWORD *)(v148 + 8);
        v151 = *(void **)(a2 + 64);
        __src[0] = v151;
        if (v151)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v151, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v152 = *(_QWORD *)(a4 + 832);
        if (v152)
          v153 = *(_WORD *)(v152 + 8);
        else
          v153 = 0;
        v426 = sub_1C5D52060(a4, 223, (const llvm::APInt *)__src, v149, v150, v146, v147, v153);
        v427 = *(_QWORD *)(a4 + 832);
        if (v427)
          v428 = *(_WORD *)(v427 + 8);
        else
          v428 = 0;
        v430 = sub_1C5D52060(a4, 241, (const llvm::APInt *)__src, v149, v150, (uint64_t)v426, v425, v428);
        v432 = *(_QWORD *)(a4 + 832);
        if (v432)
          LOWORD(v432) = *(_WORD *)(v432 + 8);
        v433 = sub_1C5D56C70(a4, 143, (const llvm::APInt *)__src, v149, v150, (uint64_t)v430, v429, v431, v146, v147, v432);
        goto LABEL_604;
      default:
        v154 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v1839 = v154;
        if (v154)
          llvm::MetadataTracking::track((uint64_t)&v1839, v154, 2);
        DWORD2(v1839) = *((_DWORD *)v8 + 15);
        v155 = (uint64_t *)v8[4];
        v157 = *v155;
        v156 = v155[1];
        v158 = (llvm **)(v8[5] + 16 * a3);
        v159 = *v158;
        v160 = (uint64_t)v158[1];
        v161 = *(unsigned __int16 *)(v157 + 24);
        v1768 = v160;
        v1773 = v159;
        if (v161 == 212)
        {
          if ((*(_WORD *)(*(_QWORD *)a4 + 1020) & 1) != 0)
          {
            v495 = *(_QWORD *)(v157 + 32);
            v157 = *(_QWORD *)v495;
            v156 = v156 & 0xFFFFFFFF00000000 | *(unsigned int *)(v495 + 8);
            v1786 = 10;
            v1797 = 0;
            goto LABEL_319;
          }
        }
        else if (v161 == 215)
        {
          v162 = *(_QWORD *)(v157 + 32);
          v157 = *(_QWORD *)v162;
          v156 = v156 & 0xFFFFFFFF00000000 | *(unsigned int *)(v162 + 8);
          v1786 = 9;
          v1797 = 0;
LABEL_266:
          v447 = v159 == 9;
          v448 = &unk_1C866F15C;
          if (v159 != 9)
            v448 = &unk_1C866F184;
          v449 = *(_QWORD *)(a4 + 832);
          v1764 = v448;
          if (v449)
            v450 = *(_WORD *)(v449 + 8);
          else
            v450 = 0;
          v463 = sub_1C5D52060(a4, 215, (const llvm::APInt *)&v1839, (llvm *)0xA, 0, v157, v156, v450);
          v465 = v156 & 0xFFFFFFFF00000000 | v464;
          v1779 = &unk_1C866F15C;
          goto LABEL_322;
        }
        v1786 = (uint64_t)v159;
        v1797 = v160;
        if (v159 == 9)
          goto LABEL_266;
LABEL_319:
        v447 = v159 == 9;
        v496 = &unk_1C866F15C;
        v1779 = &unk_1C866F184;
        if (v159 != 9)
          v496 = &unk_1C866F184;
        v1764 = v496;
        v463 = (uint64_t *)v157;
        v465 = v156;
LABEL_322:
        v497 = *(_QWORD *)(a4 + 832);
        v1814 = v447;
        if (v497)
          v498 = *(_WORD *)(v497 + 8);
        else
          v498 = 0;
        v499 = sub_1C5D52060(a4, 426, (const llvm::APInt *)&v1839, (llvm *)0xA, 0, (uint64_t)v463, v465, v498);
        v501 = v500;
        if ((sub_1C48168D4(v157, v156, 0) & 1) == 0)
        {
          v829 = sub_1C5D404C4(a4, (const llvm::APInt *)&v1839, 10, 0, 0, 0.0);
          v1760 = v830;
          v1763 = (uint64_t)v829;
          __src[1] = v1779;
          v831 = v1779;
          if ((v1779[2] + 64) >= 0x80)
          {
            v1841 = (_QWORD *)operator new[]();
            v831 = __src[1];
          }
          BYTE4(v1842) = BYTE4(v1842) & 0xF0 | 3;
          LODWORD(v1842) = v831[1] - 1;
          v832 = v831[2];
          if ((v832 - 64) < 0xFFFFFF80)
          {
            v1742 = v1841;
            *v1841 = 0;
            bzero(v1742 + 1, 8 * (((v832 + 64) >> 6) - 2) + 8);
          }
          else
          {
            v1841 = 0;
          }
          sub_1C47A8E18((uint64_t)__src, 0);
          v1754 = sub_1C6366D08(a4, (llvm::LLVMContext *)__src, (const llvm::APFloat *)&v1839, (llvm *)v1786, v1797, 0);
          v1757 = v833;
          v834 = *(_QWORD *)(a4 + 832);
          if (v834)
            v835 = *(_WORD *)(v834 + 8);
          else
            v835 = 0;
          v1291 = sub_1C5D52060(a4, 223, (const llvm::APInt *)&v1839, (llvm *)v1786, v1797, v157, v156, v835);
          if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 281))
            v1292 = sub_1C47DF81C((_QWORD *)a4, (const llvm::APInt *)&v1839, (uint64_t)v1291, v1290, (uint64_t)v1754, v1757, (uint64_t)v499, v501, v1763, v1760, SHIDWORD(v1760), 3u);
          else
            v1292 = sub_1C47DF81C((_QWORD *)a4, (const llvm::APInt *)&v1839, (uint64_t)v1291, v1290, (uint64_t)v1754, v1757, v1763, v1760, (uint64_t)v499, v501, SHIDWORD(v501), 4u);
          v499 = v1292;
          v501 = v1293 | v501 & 0xFFFFFFFF00000000;
          if (__src[1] == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v1841);
          }
          else if ((*((_DWORD *)__src[1] + 2) - 64) <= 0xFFFFFF7F && v1841)
          {
            MEMORY[0x1CAA32F9C](v1841, 0x1000C8000313F17);
          }
        }
        v503 = *(_QWORD *)(a4 + 832);
        if (v503)
          LOWORD(v503) = *(_WORD *)(v503 + 8);
        v4 = sub_1C5D56C70(a4, 98, (const llvm::APInt *)&v1839, (llvm *)0xA, 0, (uint64_t)v499, v501, v502, (uint64_t)v463, v465, v503);
        v505 = v504;
        if ((*(_WORD *)(*(_QWORD *)a4 + 1020) & 1) != 0)
        {
          if (v1814)
          {
            v916 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1839, (llvm *)5, 0, 0, 0);
            v919 = *(_QWORD *)(a4 + 832);
            if (v919)
              LOWORD(v919) = *(_WORD *)(v919 + 8);
            v4 = sub_1C5D56C70(a4, 212, (const llvm::APInt *)&v1839, (llvm *)9, 0, (uint64_t)v4, v505, v918, (uint64_t)v916, v917, v919);
          }
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 300)
            && *(_BYTE *)(v8[5] + 16 * a3) == 10
            && ((v836 = v8[6]) == 0 || *(_QWORD *)(v836 + 32) || *(_WORD *)(*(_QWORD *)(v836 + 16) + 24) != 212))
          {
            v1472 = sub_1C5D404C4(a4, (const llvm::APInt *)&v1839, 10, 0, 0, -0.5);
            v1474 = 0;
            v1475 = *(_QWORD *)(a4 + 832);
            if (v1475)
              v1474 = *(_WORD *)(v1475 + 8);
            v1476 = sub_1C5D56C70(a4, 98, (const llvm::APInt *)&v1839, (llvm *)0xA, 0, (uint64_t)v1472, v1471, v1473, (uint64_t)v499, v501, v1474);
            v1478 = v1477;
            v1479 = sub_1C5D404C4(a4, (const llvm::APInt *)&v1839, 10, 0, 0, 0.5);
            v1482 = 0;
            v1483 = *(_QWORD *)(a4 + 832);
            if (v1483)
              v1482 = *(_WORD *)(v1483 + 8);
            v1484 = sub_1C5D58E08(a4, (const char *)0x8D, (const llvm::APInt *)&v1839, (llvm *)0xA, 0, (uint64_t)v1476, v1478, v1481, (uint64_t)v4, v505, (uint64_t)v1479, v1480, SHIDWORD(v1480), v1482);
            v1487 = 0;
            v1488 = *(_QWORD *)(a4 + 832);
            v837 = v1814;
            if (v1488)
              v1487 = *(_WORD *)(v1488 + 8);
            v4 = sub_1C5D58E08(a4, (const char *)0x8D, (const llvm::APInt *)&v1839, (llvm *)0xA, 0, (uint64_t)v4, v505, v1486, (uint64_t)v1484, v1485, (uint64_t)v4, v505, SHIDWORD(v505), v1487);
            v505 = v505 & 0xFFFFFFFF00000000 | v1489;
          }
          else
          {
            v837 = v1814;
          }
          if (v837)
          {
            v1490 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1839, (llvm *)5, 0, 0, 0);
            v1493 = 0;
            v1494 = *(_QWORD *)(a4 + 832);
            if (v1494)
              v1493 = *(_WORD *)(v1494 + 8);
            v4 = sub_1C5D56C70(a4, 212, (const llvm::APInt *)&v1839, (llvm *)9, 0, (uint64_t)v4, v505, v1492, (uint64_t)v1490, v1491, v1493);
            v505 = v505 & 0xFFFFFFFF00000000 | v1495;
          }
          __src[1] = v1779;
          v1496 = v1779[2] + 64;
          if (v1496 > 0x7F)
          {
            v1743 = (_QWORD *)operator new[]();
            v1841 = v1743;
            BYTE4(v1842) = 3;
            LODWORD(v1842) = v1779[1] - 1;
            *v1743 = 0;
            bzero(v1743 + 1, 8 * ((v1496 >> 6) - 2) + 8);
          }
          else
          {
            BYTE4(v1842) = 3;
            LODWORD(v1842) = v1779[1] - 1;
            v1841 = 0;
          }
          sub_1C47A8F18((uint64_t)__src, 0);
          v1497 = sub_1C6366D08(a4, (llvm::LLVMContext *)__src, (const llvm::APFloat *)&v1839, (llvm *)v1786, v1797, 0);
          v1499 = v1498;
          v1852 = 3;
          if (v837)
            v1500 = -15;
          else
            v1500 = -127;
          v1851 = v1500;
          *((_QWORD *)&v1849 + 1) = v1764;
          v1850 = 0;
          sub_1C47A8F34((uint64_t)&v1849, 0);
          v1501 = sub_1C6366D08(a4, (llvm::LLVMContext *)&v1849, (const llvm::APFloat *)&v1839, v1773, v1768, 0);
          v1503 = v1502;
          if (*((_UNKNOWN **)&v1849 + 1) == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v1850);
          }
          else if ((*(_DWORD *)(*((_QWORD *)&v1849 + 1) + 8) - 64) <= 0xFFFFFF7F && v1850)
          {
            MEMORY[0x1CAA32F9C](v1850, 0x1000C8000313F17);
          }
          v4 = sub_1C47DF81C((_QWORD *)a4, (const llvm::APInt *)&v1839, v157, v156, (uint64_t)v1497, v1499, (uint64_t)v1501, v1503, (uint64_t)v4, v505, SHIDWORD(v505), 2u);
          if (__src[1] == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v1841);
          }
          else if ((*((_DWORD *)__src[1] + 2) - 64) <= 0xFFFFFF7F && v1841)
          {
            MEMORY[0x1CAA32F9C](v1841, 0x1000C8000313F17);
          }
        }
LABEL_330:
        v506 = (unsigned __int8 *)v1839;
        if (!(_QWORD)v1839)
          return v4;
        v507 = (void **)&v1839;
LABEL_607:
        llvm::MetadataTracking::untrack((uint64_t)v507, v506);
        return v4;
    }
  }
  if (*(unsigned __int16 *)(a2 + 24) > 0x3Fu)
  {
    v5 = __src;
    switch(*(_WORD *)(a2 + 24))
    {
      case 0x92:
        v266 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 16 * a3);
        v268 = *v266;
        v267 = v266[1];
        *(_QWORD *)&v1849 = v268;
        *((_QWORD *)&v1849 + 1) = v267;
        if ((_BYTE)v268)
          EVT = sub_1C47F37A0((unsigned __int8 *)&v1849);
        else
          EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v267 + 24), 0, a3);
        if (EVT != 10)
          return 0;
        v444 = (unsigned __int8 *)v8[8];
        *(_QWORD *)&v1839 = v444;
        if (v444)
          llvm::MetadataTracking::track((uint64_t)&v1839, v444, 2);
        DWORD2(v1839) = *((_DWORD *)v8 + 15);
        __src[0] = &v1841;
        __src[1] = (void *)0x800000000;
        if (v1849 == 97)
        {
          v445 = a4;
          v446 = 63;
        }
        else
        {
          if (v1849 != 95)
            llvm::report_fatal_error((llvm *)"Unsupported vector width!", (const char *)1);
          v445 = a4;
          v446 = 27;
        }
        v1275 = sub_1C6366AB4(v445, v446, (const llvm::APInt *)&v1839, (llvm *)5, 0, 1, 0);
        v1277 = v1276;
        v1278 = __src[1];
        if (LODWORD(__src[1]) >= HIDWORD(__src[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, LODWORD(__src[1]) + 1, 16);
          v1278 = __src[1];
        }
        v1279 = (char *)__src[0] + 16 * v1278;
        *v1279 = v1275;
        v1279[1] = v1277;
        v1280 = ++LODWORD(__src[1]);
        if (*((_WORD *)v8 + 28))
        {
          v1283 = 0;
          do
          {
            v1284 = *(_OWORD *)(v8[4] + 40 * v1283);
            if (v1280 >= HIDWORD(__src[1]))
            {
              v1820 = *(_OWORD *)(v8[4] + 40 * v1283);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, v1280 + 1, 16);
              v1284 = v1820;
              v1280 = __src[1];
            }
            *((_OWORD *)__src[0] + v1280) = v1284;
            ++LODWORD(__src[1]);
            v1285 = sub_1C6366AB4(a4, v1283 + 33, (const llvm::APInt *)&v1839, (llvm *)5, 0, 1, 0);
            v1287 = v1286;
            v1288 = LODWORD(__src[1]);
            if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, LODWORD(__src[1]) + 1, 16);
              v1288 = LODWORD(__src[1]);
            }
            v1289 = (char *)__src[0] + 16 * v1288;
            *v1289 = v1285;
            v1289[1] = v1287;
            v1280 = ++LODWORD(__src[1]);
            ++v1283;
          }
          while (v1283 != *((unsigned __int16 *)v8 + 28));
        }
        v4 = sub_1C636E56C(a4, 18, (uint64_t)&v1839, (llvm *)0xAE, 0, (uint64_t *)__src[0], v1280);
        if (__src[0] != &v1841)
          free(__src[0]);
        v1281 = (unsigned __int8 *)v1839;
        if (!(_QWORD)v1839)
          return v4;
        v1282 = &v1839;
        goto LABEL_831;
      case 0x93:
        v180 = *(void **)(a2 + 64);
        __src[0] = v180;
        if (v180)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v180, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v181 = v8[5] + 16 * a3;
        v182 = *(llvm **)v181;
        v183 = *(_QWORD *)v181 - 27;
        v184 = v183 > 0x31;
        v185 = (1 << v183) & 0x2000000400803;
        if (v184 || v185 == 0)
          goto LABEL_162;
        v187 = (uint64_t *)v8[4];
        v188 = v187[10];
        v189 = *(unsigned __int16 *)(v188 + 24);
        if (v189 != 35 && v189 != 11)
          goto LABEL_162;
        v191 = *(_QWORD *)(v181 + 8);
        v192 = *v187;
        v193 = v187[1];
        v194 = v187[5];
        v195 = v187[6];
        v196 = *(_QWORD *)(v188 + 80);
        v197 = (uint64_t *)(v196 + 24);
        if (*(_DWORD *)(v196 + 32) >= 0x41u)
          v197 = (uint64_t *)*v197;
        v198 = sub_1C6366AB4(a4, *v197, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v201 = *(_QWORD *)(a4 + 832);
        if (v201)
          LOWORD(v201) = *(_WORD *)(v201 + 8);
        v202 = (uint64_t)sub_1C5D58E08(a4, (const char *)0x1B4, (const llvm::APInt *)__src, v182, v191, v192, v193, v200, v194, v195, (uint64_t)v198, v199, SHIDWORD(v199), v201);
        goto LABEL_615;
      case 0x94:
        v246 = *(void **)(a2 + 64);
        __src[0] = v246;
        if (v246)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v246, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v247 = (uint64_t **)v8[4];
        v4 = *v247;
        v248 = (unint64_t)v247[1];
        v249 = v8[5] + 16 * a3;
        v250 = *(llvm **)v249;
        v251 = *(_QWORD *)(v249 + 8);
        v252 = *(unsigned __int8 *)((*v247)[5] + 16 * v248);
        v253 = (v252 - 38) > 0x39 || ((1 << (v252 - 38)) & 0x200004000000801) == 0;
        if (v253 && (v252 - 27) >= 2
          || ((v254 = v247[5], v255 = *((unsigned __int16 *)v254 + 12), v255 != 35) ? (v256 = v255 == 11) : (v256 = 1),
              !v256))
        {
LABEL_162:
          v265 = 1;
          goto LABEL_617;
        }
        if (*((_WORD *)v4 + 12) != 146)
        {
          v997 = v254[10];
          v998 = (uint64_t *)(v997 + 24);
          if (*(_DWORD *)(v997 + 32) >= 0x41u)
            v998 = (uint64_t *)*v998;
          v999 = sub_1C6366AB4(a4, *v998, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
          v1002 = *(_QWORD *)(a4 + 832);
          if (v1002)
            LOWORD(v1002) = *(_WORD *)(v1002 + 8);
          v202 = (uint64_t)sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, v250, v251, (uint64_t)v4, v248, v1001, (uint64_t)v999, v1000, v1002);
          goto LABEL_615;
        }
        v257 = v254[10];
        v258 = (unsigned int *)(v257 + 24);
        if (*(_DWORD *)(v257 + 32) >= 0x41u)
          v258 = *(unsigned int **)v258;
        v259 = (uint64_t **)(v4[4] + 40 * *v258);
        v4 = *v259;
        v260 = (uint64_t)v259[1];
        v261 = (unsigned __int8 *)((*v259)[5] + 16 * v260);
        v262 = *v261;
        if (v262 != v250
          || ((v263 = *((_QWORD *)v261 + 1), !v262) ? (v264 = v263 == v251) : (v264 = 1), !v264))
        {
          v202 = sub_1C63663BC(a4, (uint64_t)v4, v260, (uint64_t)__src, (uint64_t)v250, v251);
LABEL_615:
          v4 = (uint64_t *)v202;
        }
        v265 = 0;
LABEL_617:
        if (__src[0])
          llvm::MetadataTracking::untrack((uint64_t)__src, (unsigned __int8 *)__src[0]);
        if ((v265 & 1) != 0)
          return 0;
        return v4;
      case 0x95:
        if (*(_BYTE *)(*(_QWORD *)(a2 + 40) + 16 * a3) != 28)
          return 0;
        v203 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v1849 = v203;
        if (v203)
          llvm::MetadataTracking::track((uint64_t)&v1849, v203, 2);
        DWORD2(v1849) = *((_DWORD *)v8 + 15);
        v204 = (uint64_t *)v8[4];
        v205 = *v204;
        v206 = v204[1];
        v207 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
        v210 = 0;
        v211 = *(_QWORD *)(a4 + 832);
        if (v211)
          v210 = *(_WORD *)(v211 + 8);
        __src[0] = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, v205, v206, v209, (uint64_t)v207, v208, v210);
        __src[1] = v212;
        v213 = (uint64_t *)v8[4];
        v214 = *v213;
        v215 = v213[1];
        v216 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
        v219 = 0;
        v220 = *(_QWORD *)(a4 + 832);
        if (v220)
          v219 = *(_WORD *)(v220 + 8);
        v1841 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, v214, v215, v218, (uint64_t)v216, v217, v219);
        v1842 = v221;
        v222 = v8[4];
        v223 = *(_QWORD *)(v222 + 40);
        v224 = *(_QWORD *)(v222 + 48);
        v225 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
        v228 = 0;
        v229 = *(_QWORD *)(a4 + 832);
        if (v229)
          v228 = *(_WORD *)(v229 + 8);
        v1843 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, v223, v224, v227, (uint64_t)v225, v226, v228);
        v1844 = v230;
        v231 = v8[4];
        v232 = *(_QWORD *)(v231 + 40);
        v233 = *(_QWORD *)(v231 + 48);
        v234 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
        v237 = 0;
        v238 = *(_QWORD *)(a4 + 832);
        if (v238)
          v237 = *(_WORD *)(v238 + 8);
        v239 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, v232, v233, v236, (uint64_t)v234, v235, v237);
        v35 = 0;
        v1845 = v239;
        v1846 = v240;
        v241 = *(_QWORD *)(a4 + 832);
        if (v241)
          v35 = *(unsigned __int16 *)(v241 + 8);
        v242 = a4;
        v243 = 146;
        v244 = 28;
        v245 = 4;
        goto LABEL_835;
      case 0x96:
      case 0x98:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xB2:
      case 0xB4:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBE:
      case 0xBF:
      case 0xC2:
      case 0xC6:
      case 0xC7:
      case 0xC8:
        goto LABEL_1092;
      case 0x97:
        __src[0] = &v1841;
        __src[1] = (void *)0x800000000;
        v880 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40) + 80);
        v881 = (_QWORD *)(v880 + 24);
        if (*(_DWORD *)(v880 + 32) >= 0x41u)
          v881 = (_QWORD *)*v881;
        v882 = *(_DWORD *)v881;
        v883 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 16 * a3);
        v885 = *v883;
        v884 = v883[1];
        *(_QWORD *)&v1849 = v885;
        *((_QWORD *)&v1849 + 1) = v884;
        if ((_BYTE)v885)
        {
          v890 = sub_1C47F37A0((unsigned __int8 *)&v1849);
          v889 = 0;
          v888 = 0;
        }
        else
        {
          v886 = llvm::EVT::getEVT(*(llvm::EVT **)(v884 + 24), 0, a3);
          v888 = v887;
          v889 = v886 & 0xFFFFFFFFFFFFFF00;
          v890 = v886;
        }
        v1006 = v889 | v890;
        if (v890 == 3)
          v1007 = 4;
        else
          v1007 = v1006;
        v1008 = (unsigned __int8 *)v8[8];
        *(_QWORD *)&v1839 = v1008;
        if (v1008)
          llvm::MetadataTracking::track((uint64_t)&v1839, v1008, 2);
        DWORD2(v1839) = *((_DWORD *)v8 + 15);
        v1009 = sub_1C612FE00((llvm::EVT *)&v1849, (const char *)v1008);
        if (v1009)
        {
          v1013 = v1009;
          if (v890 == 3)
            v888 = 0;
          do
          {
            v1014 = (uint64_t *)v8[4];
            v1015 = *v1014;
            v1016 = v1014[1];
            v1017 = sub_1C6366AB4(a4, v882, (const llvm::APInt *)&v1839, (llvm *)5, 0, 0, 0);
            v1020 = 0;
            v1021 = *(_QWORD *)(a4 + 832);
            if (v1021)
              v1020 = *(_WORD *)(v1021 + 8);
            v1022 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1839, (llvm *)v1007, v888, v1015, v1016, v1019, (uint64_t)v1017, v1018, v1020);
            v1024 = v1023;
            v1025 = LODWORD(__src[1]);
            if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, LODWORD(__src[1]) + 1, 16);
              v1025 = LODWORD(__src[1]);
            }
            v1026 = (uint64_t **)((char *)__src[0] + 16 * v1025);
            *v1026 = v1022;
            v1026[1] = v1024;
            ++LODWORD(__src[1]);
            ++v882;
            --v1013;
          }
          while (v1013);
        }
        v1010 = (unsigned __int8 *)v8[8];
        *(_QWORD *)&v1838 = v1010;
        if (v1010)
          llvm::MetadataTracking::track((uint64_t)&v1838, v1010, 2);
        DWORD2(v1838) = *((_DWORD *)v8 + 15);
        v1011 = *(_QWORD *)(a4 + 832);
        if (v1011)
          v1012 = *(unsigned __int16 *)(v1011 + 8);
        else
          v1012 = 0;
        v4 = sub_1C636D0C8(a4, (const char *)0x92, (const llvm::APInt *)&v1838, (llvm *)v1849, *((uint64_t *)&v1849 + 1), (uint64_t *)__src[0], LODWORD(__src[1]), v1012);
        if ((_QWORD)v1838)
          llvm::MetadataTracking::untrack((uint64_t)&v1838, (unsigned __int8 *)v1838);
        v1004 = (unsigned __int8 *)v1839;
        if (!(_QWORD)v1839)
          goto LABEL_650;
        v1005 = &v1839;
        goto LABEL_649;
      case 0x99:
        v1849 = *(_OWORD *)*(_QWORD *)(a2 + 40);
        v891 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v1839 = v891;
        if (v891)
          llvm::MetadataTracking::track((uint64_t)&v1839, v891, 2);
        DWORD2(v1839) = *((_DWORD *)v8 + 15);
        __src[0] = &v1841;
        __src[1] = (void *)0x800000000;
        v892 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v8[4] + 40) + 16 * *(unsigned int *)(v8[4] + 8));
        v894 = *v892;
        v893 = v892[1];
        *(_QWORD *)&v1838 = v894;
        *((_QWORD *)&v1838 + 1) = v893;
        if ((_BYTE)v894)
        {
          v897 = sub_1C47F37A0((unsigned __int8 *)&v1838);
          v899 = 0;
          v898 = 0;
        }
        else
        {
          v895 = llvm::EVT::getEVT(*(llvm::EVT **)(v893 + 24), 0, a3);
          v897 = v895;
          v898 = (uint64_t)v896;
          v899 = v895 & 0xFFFFFFFFFFFFFF00;
        }
        v1027 = sub_1C612FE00((llvm::EVT *)&v1838, v896);
        v1029 = sub_1C612FE00((llvm::EVT *)&v1849, v1028);
        if (v1029)
        {
          v1031 = 0;
          v1032 = v897 == 3;
          if (v897 == 3)
            v1033 = 4;
          else
            v1033 = v899 | v897;
          if (v1032)
            v898 = 0;
          v1034 = 4 * v1029;
          do
          {
            v1035 = *(_DWORD *)(v8[10] + v1031);
            v1036 = (uint64_t *)(v8[4] + 40 * (v1035 >= v1027));
            v1037 = *v1036;
            v1038 = v1036[1];
            v1039 = sub_1C6366AB4(a4, v1035 % v1027, (const llvm::APInt *)&v1839, (llvm *)5, 0, 0, 0);
            v1042 = 0;
            v1043 = *(_QWORD *)(a4 + 832);
            if (v1043)
              v1042 = *(_WORD *)(v1043 + 8);
            v1044 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1839, (llvm *)v1033, v898, v1037, v1038, v1041, (uint64_t)v1039, v1040, v1042);
            v1046 = v1045;
            v1047 = LODWORD(__src[1]);
            if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, LODWORD(__src[1]) + 1, 16);
              v1047 = LODWORD(__src[1]);
            }
            v1048 = (uint64_t **)((char *)__src[0] + 16 * v1047);
            *v1048 = v1044;
            v1048[1] = v1046;
            v1030 = ++LODWORD(__src[1]);
            v1031 += 4;
          }
          while (v1034 != v1031);
        }
        else
        {
          v1030 = __src[1];
        }
        v1049 = v1030;
        v1050 = *(_QWORD *)(a4 + 832);
        if (v1050)
          v1051 = *(unsigned __int16 *)(v1050 + 8);
        else
          v1051 = 0;
        v4 = sub_1C636D0C8(a4, (const char *)0x92, (const llvm::APInt *)&v1839, (llvm *)v1849, *((uint64_t *)&v1849 + 1), (uint64_t *)__src[0], v1049, v1051);
        if (__src[0] != &v1841)
          free(__src[0]);
        goto LABEL_330;
      case 0x9F:
        v908 = *(uint64_t **)(a2 + 32);
        v909 = *v908;
        v910 = v908[1];
        v912 = v908[5];
        v911 = v908[6];
        v913 = *(void **)(a2 + 64);
        __src[0] = v913;
        if (v913)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v913, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v914 = *(_QWORD *)(a4 + 832);
        if (v914)
          v915 = *(_WORD *)(v914 + 8);
        else
          v915 = 0;
        v1137 = *(unsigned __int16 *)(v909 + 24);
        v1819 = *(unsigned __int16 *)(v912 + 24);
        v1138 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x26, 0, v909, v910, v915);
        v1139 = 0;
        v1141 = v910 & 0xFFFFFFFF00000000 | v1140;
        v1142 = *(_QWORD *)(a4 + 832);
        if (v1142)
          v1139 = *(_WORD *)(v1142 + 8);
        v1143 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x26, 0, v912, v911, v1139);
        v1145 = v911 & 0xFFFFFFFF00000000 | v1144;
        v1146 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1149 = 0;
        v1150 = *(_QWORD *)(a4 + 832);
        if (v1150)
          v1149 = *(_WORD *)(v1150 + 8);
        v1151 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1138, v1141, v1148, (uint64_t)v1146, v1147, v1149);
        v1153 = v1152;
        v1154 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1157 = 0;
        v1158 = *(_QWORD *)(a4 + 832);
        if (v1158)
          v1157 = *(_WORD *)(v1158 + 8);
        v1159 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1138, v1141, v1156, (uint64_t)v1154, v1155, v1157);
        v1161 = v1160;
        v1162 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1165 = 0;
        v1166 = *(_QWORD *)(a4 + 832);
        if (v1166)
          v1165 = *(_WORD *)(v1166 + 8);
        v1167 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1143, v1145, v1164, (uint64_t)v1162, v1163, v1165);
        v1169 = v1168;
        v1170 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1173 = 0;
        v1174 = *(_QWORD *)(a4 + 832);
        if (v1174)
          v1173 = *(_WORD *)(v1174 + 8);
        v1175 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1143, v1145, v1172, (uint64_t)v1170, v1171, v1173);
        v1177 = v1176;
        if (v1137 == 199)
        {
          v1159 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)4, 0, 0, 0);
          v1161 = v1161 & 0xFFFFFFFF00000000 | v1178;
        }
        if (v1819 == 199)
        {
          v1175 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)4, 0, 0, 0);
          v1177 = v1177 & 0xFFFFFFFF00000000 | v1179;
        }
        v1180 = *(_QWORD *)(a4 + 832);
        if (v1180)
          v1181 = *(_WORD *)(v1180 + 8);
        else
          v1181 = 0;
        v1182 = sub_1C5D52060(a4, 199, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1151, v1153, v1181);
        v1805 = v1183;
        v1184 = 0;
        v1185 = *(_QWORD *)(a4 + 832);
        if (v1185)
          v1184 = *(_WORD *)(v1185 + 8);
        v1186 = sub_1C5D52060(a4, 199, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1167, v1169, v1184);
        v1188 = v1187;
        v1189 = 0;
        v1190 = *(_QWORD *)(a4 + 832);
        if (v1190)
          v1189 = *(_WORD *)(v1190 + 8);
        v1191 = sub_1C5D52060(a4, 199, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1159, v1161, v1189);
        v1193 = v1192;
        v1194 = 0;
        v1195 = *(_QWORD *)(a4 + 832);
        if (v1195)
          v1194 = *(_WORD *)(v1195 + 8);
        v1793 = sub_1C5D52060(a4, 199, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1175, v1177, v1194);
        v1198 = v1197;
        v1199 = 0;
        v1200 = *(_QWORD *)(a4 + 832);
        if (v1200)
          v1199 = *(_WORD *)(v1200 + 8);
        v1202 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1182, v1805, v1196, (uint64_t)v1186, v1188, v1199);
        v1203 = 0;
        v1204 = *(_QWORD *)(a4 + 832);
        if (v1204)
          v1203 = *(_WORD *)(v1204 + 8);
        v1784 = (uint64_t)v1182;
        v1205 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x26, 0, (uint64_t)v1202, v1201, v1203);
        v1207 = v1206;
        v1208 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1211 = 0;
        v1212 = *(_QWORD *)(a4 + 832);
        if (v1212)
          v1211 = *(_WORD *)(v1212 + 8);
        v1214 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1205, v1207, v1210, (uint64_t)v1208, v1209, v1211);
        v1216 = v1215;
        v1217 = 0;
        v1218 = *(_QWORD *)(a4 + 832);
        if (v1218)
          v1217 = *(_WORD *)(v1218 + 8);
        v1220 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1191, v1193, v1213, (uint64_t)v1186, v1188, v1217);
        v1221 = v1219;
        v1222 = 0;
        v1223 = *(_QWORD *)(a4 + 832);
        if (v1223)
          v1222 = *(_WORD *)(v1223 + 8);
        v1224 = v1219 & 0xFFFFFFFF00000000;
        v1225 = sub_1C5D52060(a4, 199, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1214, v1216, v1222);
        v1228 = 0;
        v1229 = *(_QWORD *)(a4 + 832);
        if (v1229)
          v1228 = *(_WORD *)(v1229 + 8);
        v1230 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1220, v1221, v1227, (uint64_t)v1225, v1226, v1228);
        v1231 = 0;
        v1233 = v1232 | v1224;
        v1234 = *(_QWORD *)(a4 + 832);
        if (v1234)
          v1231 = *(_WORD *)(v1234 + 8);
        v1235 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x26, 0, (uint64_t)v1230, v1233, v1231);
        v1237 = v1207 & 0xFFFFFFFF00000000 | v1236;
        v1238 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1241 = *(_QWORD *)(a4 + 832);
        if (v1241)
          LOWORD(v1241) = *(_WORD *)(v1241 + 8);
        v1242 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1235, v1237, v1240, (uint64_t)v1238, v1239, v1241);
        v1245 = *(_QWORD *)(a4 + 832);
        if (v1819 == 199)
        {
          if (v1245)
            v1246 = *(_WORD *)(v1245 + 8);
          else
            v1246 = 0;
          v1247 = (uint64_t)v1793;
          v1248 = sub_1C5D52060(a4, 199, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1242, v1243, v1246);
        }
        else
        {
          if (v1245)
            LOWORD(v1245) = *(_WORD *)(v1245 + 8);
          v1744 = v1233;
          v1247 = (uint64_t)v1793;
          v1248 = sub_1C5D58E08(a4, (const char *)0x1B0, (const llvm::APInt *)__src, (llvm *)5, 0, v1784, v1805, v1244, (uint64_t)v1793, v1198, (uint64_t)v1230, v1744, SHIDWORD(v1744), v1245);
        }
        v1504 = (uint64_t)v1248;
        v1505 = v1249;
        v1506 = *(_QWORD *)(a4 + 832);
        if (v1506)
          LOWORD(v1506) = *(_WORD *)(v1506 + 8);
        v1507 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1191, v1193, v1250, v1247, v1198, v1506);
        v1510 = *(_QWORD *)(a4 + 832);
        if (v1510)
          LOWORD(v1510) = *(_WORD *)(v1510 + 8);
        v1323 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, v1504, v1505 | v1224, v1509, (uint64_t)v1507, v1508 | v1207 & 0xFFFFFFFF00000000, v1510);
        goto LABEL_925;
      case 0xA0:
        v900 = *(uint64_t **)(a2 + 32);
        v902 = *v900;
        v901 = v900[1];
        v904 = v900[5];
        v903 = v900[6];
        v905 = *(void **)(a2 + 64);
        __src[0] = v905;
        if (v905)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v905, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v906 = *(_QWORD *)(a4 + 832);
        if (v906)
          v907 = *(_WORD *)(v906 + 8);
        else
          v907 = 0;
        v1052 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x26, 0, v902, v901, v907);
        v1053 = 0;
        v1055 = v901 & 0xFFFFFFFF00000000 | v1054;
        v1056 = *(_QWORD *)(a4 + 832);
        if (v1056)
          v1053 = *(_WORD *)(v1056 + 8);
        v1057 = v901 & 0xFFFFFFFF00000000;
        v1058 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x26, 0, v904, v903, v1053);
        v1059 = 0;
        v1061 = v903 & 0xFFFFFFFF00000000 | v1060;
        v1062 = *(_QWORD *)(a4 + 832);
        if (v1062)
          v1059 = *(_WORD *)(v1062 + 8);
        v1063 = v903 & 0xFFFFFFFF00000000;
        v1064 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x26, 0, (uint64_t)v1052, v1055, v1059);
        v1065 = 0;
        v1067 = v1066 | v1057;
        v1068 = *(_QWORD *)(a4 + 832);
        if (v1068)
          v1065 = *(_WORD *)(v1068 + 8);
        v1069 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x26, 0, (uint64_t)v1058, v1061, v1065);
        v1071 = v1070 | v1063;
        v1072 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1075 = 0;
        v1076 = *(_QWORD *)(a4 + 832);
        if (v1076)
          v1075 = *(_WORD *)(v1076 + 8);
        v1077 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1064, v1067, v1074, (uint64_t)v1072, v1073, v1075);
        v1079 = v1078;
        v1080 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1083 = 0;
        v1084 = *(_QWORD *)(a4 + 832);
        if (v1084)
          v1083 = *(_WORD *)(v1084 + 8);
        v1085 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1064, v1067, v1082, (uint64_t)v1080, v1081, v1083);
        v1087 = v1086;
        v1088 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1091 = 0;
        v1092 = *(_QWORD *)(a4 + 832);
        if (v1092)
          v1091 = *(_WORD *)(v1092 + 8);
        v1093 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1069, v1071, v1090, (uint64_t)v1088, v1089, v1091);
        v1095 = v1094;
        v1096 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1099 = 0;
        v1100 = *(_QWORD *)(a4 + 832);
        if (v1100)
          v1099 = *(_WORD *)(v1100 + 8);
        v1101 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1069, v1071, v1098, (uint64_t)v1096, v1097, v1099);
        v1103 = v1102;
        v1104 = 0;
        v1105 = *(_QWORD *)(a4 + 832);
        if (v1105)
          v1104 = *(_WORD *)(v1105 + 8);
        v1106 = sub_1C5D52060(a4, 199, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1077, v1079, v1104);
        v1818 = v1107;
        v1108 = 0;
        v1109 = *(_QWORD *)(a4 + 832);
        if (v1109)
          v1108 = *(_WORD *)(v1109 + 8);
        v1110 = sub_1C5D52060(a4, 199, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1093, v1095, v1108);
        v1112 = v1111;
        v1113 = 0;
        v1114 = *(_QWORD *)(a4 + 832);
        if (v1114)
          v1113 = *(_WORD *)(v1114 + 8);
        v1115 = sub_1C5D52060(a4, 198, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1085, v1087, v1113);
        v1792 = v1116;
        v1804 = (uint64_t)v1115;
        v1117 = 0;
        v1118 = *(_QWORD *)(a4 + 832);
        if (v1118)
          v1117 = *(_WORD *)(v1118 + 8);
        v1120 = sub_1C5D52060(a4, 198, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1101, v1103, v1117);
        v1122 = v1121;
        v1123 = 0;
        v1124 = *(_QWORD *)(a4 + 832);
        if (v1124)
          v1123 = *(_WORD *)(v1124 + 8);
        v1126 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1106, v1818, v1119, (uint64_t)v1110, v1112, v1123);
        v1127 = 0;
        v1128 = *(_QWORD *)(a4 + 832);
        if (v1128)
          v1127 = *(_WORD *)(v1128 + 8);
        v1129 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x26, 0, (uint64_t)v1126, v1125, v1127);
        v1131 = v1130;
        v1132 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1135 = *(_QWORD *)(a4 + 832);
        v1136 = (uint64_t)v1106;
        if (v1135)
          LOWORD(v1135) = *(_WORD *)(v1135 + 8);
        v1295 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1129, v1131, v1134, (uint64_t)v1132, v1133, v1135);
        v1297 = v1296;
        v1298 = *(_QWORD *)(a4 + 832);
        if (v1298)
          LOWORD(v1298) = *(_WORD *)(v1298 + 8);
        v1300 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, v1804, v1792, v1294, (uint64_t)v1110, v1112, v1298);
        v1301 = v1299;
        v1302 = *(_QWORD *)(a4 + 832);
        if (v1302)
          v1303 = *(_WORD *)(v1302 + 8);
        else
          v1303 = 0;
        v1304 = v1299 & 0xFFFFFFFF00000000;
        v1305 = sub_1C5D52060(a4, 199, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1295, v1297, v1303);
        v1308 = *(_QWORD *)(a4 + 832);
        if (v1308)
          LOWORD(v1308) = *(_WORD *)(v1308 + 8);
        v1309 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1300, v1301, v1307, (uint64_t)v1305, v1306, v1308);
        v1312 = *(_QWORD *)(a4 + 832);
        if (v1312)
          LOWORD(v1312) = *(_WORD *)(v1312 + 8);
        v1314 = sub_1C5D58E08(a4, (const char *)0x1B2, (const llvm::APInt *)__src, (llvm *)5, 0, v1136, v1818, v1311, (uint64_t)v1120, v1122, (uint64_t)v1309, v1310 | v1304, SHIDWORD(v1304), v1312);
        v1316 = v1315;
        v1317 = *(_QWORD *)(a4 + 832);
        if (v1317)
          LOWORD(v1317) = *(_WORD *)(v1317 + 8);
        v1318 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, v1804, v1792, v1313, (uint64_t)v1120, v1122, v1317);
        v1321 = v1131 & 0xFFFFFFFF00000000 | v1320;
        v1322 = *(_QWORD *)(a4 + 832);
        if (v1322)
          LOWORD(v1322) = *(_WORD *)(v1322 + 8);
        v1323 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1314, v1316 | v1304, v1319, (uint64_t)v1318, v1321, v1322);
LABEL_925:
        v4 = v1323;
        if (__src[0])
          llvm::MetadataTracking::untrack((uint64_t)__src, (unsigned __int8 *)__src[0]);
        return v4;
      case 0xAB:
      case 0xAC:
      case 0xAD:
        v493 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v1839 = v493;
        if (v493)
          llvm::MetadataTracking::track((uint64_t)&v1839, v493, 2);
        DWORD2(v1839) = *((_DWORD *)v8 + 15);
        v4 = *(uint64_t **)(a4 + 56);
        *(_OWORD *)__src = *(_OWORD *)(v8[5] + 16 * a3);
        if (LOBYTE(__src[0]))
          ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)__src);
        else
          ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
        v5 = (void **)ExtendedSizeInBits;
        if ((_DWORD)a2 != 1)
          goto LABEL_448;
        goto LABEL_1093;
      case 0xAF:
        return sub_1C4808724(a2, a3, (_QWORD *)a4);
      case 0xB0:
      case 0xB1:
        return sub_1C4808380(a2, a3, (_QWORD *)a4);
      case 0xB3:
        v1839 = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3);
        v842 = sub_1C6131328((unsigned __int8 *)&v1839, a2, a3);
        v843 = (uint64_t *)v8[4];
        v845 = *v843;
        v844 = v843[1];
        v846 = v843[5];
        v847 = v843[6];
        v848 = *(_QWORD *)(v846 + 40) + 16 * v847;
        v849 = *(llvm **)v848;
        v850 = *(_QWORD *)(v848 + 8);
        v851 = (unsigned __int8 *)v8[8];
        *(_QWORD *)&v1838 = v851;
        if (v851)
          llvm::MetadataTracking::track((uint64_t)&v1838, v851, 2);
        DWORD2(v1838) = *((_DWORD *)v8 + 15);
        v852 = sub_1C6366AB4(a4, v842 - 1, (const llvm::APInt *)&v1838, v849, v850, 0, 0);
        v855 = *(_QWORD *)(v846 + 40) + 16 * v847;
        v856 = *(llvm **)v855;
        v857 = *(_QWORD *)(v855 + 8);
        v858 = *(_QWORD *)(a4 + 832);
        if (v858)
          LOWORD(v858) = *(_WORD *)(v858 + 8);
        v859 = sub_1C5D56C70(a4, 171, (const llvm::APInt *)&v1838, v856, v857, v846, v847, v854, (uint64_t)v852, v853, v858);
        v1802 = v860;
        v861 = *(unsigned __int16 *)(v845 + 24);
        v863 = v861 == 11 || v861 == 35;
        v864 = *(unsigned __int16 *)(v846 + 24);
        v866 = v864 == 11 || v864 == 35;
        v1817 = dword_1C642B4E0[2 * v863 + v866];
        __src[0] = &v1841;
        __src[1] = (void *)0x800000000;
        v867 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1838, (llvm *)5, 0, 1, 0);
        v869 = v868;
        v870 = __src[1];
        if (LODWORD(__src[1]) >= HIDWORD(__src[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, LODWORD(__src[1]) + 1, 16);
          v870 = __src[1];
        }
        v871 = (char *)__src[0] + 16 * v870;
        *v871 = v867;
        v871[1] = v869;
        v872 = ++LODWORD(__src[1]);
        if (v861 == 35 || v861 == 11)
        {
          v873 = sub_1C47E3C48(a4, v845, v844, 0);
          v875 = v874;
          v876 = __src[1];
          if (LODWORD(__src[1]) >= HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, LODWORD(__src[1]) + 1, 16);
            v876 = __src[1];
          }
          v877 = (char *)__src[0] + 16 * v876;
          *v877 = v873;
          v877[1] = v875;
          v878 = (LODWORD(__src[1]) + 1);
          LODWORD(__src[1]) = v878;
          if (v878 >= HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, v878 + 1, 16);
            LODWORD(v878) = __src[1];
          }
          v879 = (char *)__src[0] + 16 * v878;
          *(_QWORD *)v879 = v873;
        }
        else
        {
          if (v872 >= HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, v872 + 1, 16);
            LODWORD(v872) = __src[1];
          }
          v1324 = (uint64_t *)((char *)__src[0] + 16 * v872);
          *v1324 = v845;
          v1324[1] = v844;
          v1325 = (LODWORD(__src[1]) + 1);
          LODWORD(__src[1]) = v1325;
          if (v1325 >= HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, v1325 + 1, 16);
            LODWORD(v1325) = __src[1];
          }
          v1326 = (char *)__src[0] + 16 * v1325;
          *v1326 = v867;
          v1326[1] = v869;
          v1327 = (LODWORD(__src[1]) + 1);
          LODWORD(__src[1]) = v1327;
          if (v1327 >= HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, v1327 + 1, 16);
            LODWORD(v1327) = __src[1];
          }
          v1328 = (uint64_t *)((char *)__src[0] + 16 * v1327);
          *v1328 = v845;
          v1328[1] = v844;
          v1329 = (LODWORD(__src[1]) + 1);
          LODWORD(__src[1]) = v1329;
          if (v1329 >= HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, v1329 + 1, 16);
            LODWORD(v1329) = __src[1];
          }
          v879 = (char *)__src[0] + 16 * v1329;
          *(_QWORD *)v879 = v867;
          v875 = v869;
        }
        *((_QWORD *)v879 + 1) = v875;
        v1330 = ++LODWORD(__src[1]);
        if (v864 == 35 || v864 == 11)
        {
          v1331 = sub_1C47E3C48(a4, (uint64_t)v859, v1802, 0);
          v869 = v1332;
          v1333 = __src[1];
          if (LODWORD(__src[1]) >= HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, LODWORD(__src[1]) + 1, 16);
            v1333 = __src[1];
          }
          v1334 = (char *)__src[0] + 16 * v1333;
          *(_QWORD *)v1334 = v1331;
          v1335 = v1817;
        }
        else
        {
          if (v1330 >= HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, v1330 + 1, 16);
            LODWORD(v1330) = __src[1];
          }
          v1336 = (uint64_t **)((char *)__src[0] + 16 * v1330);
          *v1336 = v859;
          v1336[1] = v1802;
          v1337 = (LODWORD(__src[1]) + 1);
          LODWORD(__src[1]) = v1337;
          v1335 = v1817;
          if (v1337 >= HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, v1337 + 1, 16);
            LODWORD(v1337) = __src[1];
          }
          v1334 = (char *)__src[0] + 16 * v1337;
          *(_QWORD *)v1334 = v867;
        }
        *((_QWORD *)v1334 + 1) = v869;
        ++LODWORD(__src[1]);
        v1338 = sub_1C6366AB4(a4, v842, (const llvm::APInt *)&v1838, (llvm *)5, 0, 1, 0);
        v1340 = v1339;
        v1341 = __src[1];
        if (LODWORD(__src[1]) >= HIDWORD(__src[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, LODWORD(__src[1]) + 1, 16);
          v1341 = __src[1];
        }
        v1342 = (char *)__src[0] + 16 * v1341;
        *v1342 = v1338;
        v1342[1] = v1340;
        ++LODWORD(__src[1]);
        v1849 = 0uLL;
        v1343 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 1, 0);
        v1345 = v1344;
        v1346 = __src[1];
        if (LODWORD(__src[1]) >= HIDWORD(__src[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, LODWORD(__src[1]) + 1, 16);
          v1346 = __src[1];
        }
        v1347 = (char *)__src[0] + 16 * v1346;
        *v1347 = v1343;
        v1347[1] = v1345;
        ++LODWORD(__src[1]);
        if ((_QWORD)v1849)
          llvm::MetadataTracking::untrack((uint64_t)&v1849, (unsigned __int8 *)v1849);
        v1348 = sub_1C5D428B0(a4, 0, (llvm *)5, 0);
        v1350 = v1349;
        v1351 = __src[1];
        if (LODWORD(__src[1]) >= HIDWORD(__src[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1841, LODWORD(__src[1]) + 1, 16);
          v1351 = __src[1];
        }
        v1352 = (uint64_t *)((char *)__src[0] + 16 * v1351);
        *v1352 = v1348;
        v1352[1] = v1350;
        ++LODWORD(__src[1]);
        v4 = sub_1C636E56C(a4, v1335, (uint64_t)&v1838, (llvm *)v1839, *((uint64_t *)&v1839 + 1), (uint64_t *)__src[0], LODWORD(__src[1]));
        if (__src[0] != &v1841)
          free(__src[0]);
        v1281 = (unsigned __int8 *)v1838;
        if ((_QWORD)v1838)
        {
          v1282 = &v1838;
LABEL_831:
          llvm::MetadataTracking::untrack((uint64_t)v1282, v1281);
        }
        return v4;
      case 0xB8:
      case 0xBD:
        v4 = (uint64_t *)a2;
        if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 40) + 16
                                                                   * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8)) != 6)
          return v4;
        v36 = *(void **)(a2 + 64);
        __src[0] = v36;
        if (v36)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v36, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v37 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1796 = v38;
        v1810 = (uint64_t)v37;
        v39 = 0;
        v40 = (uint64_t *)v8[4];
        v41 = *v40;
        v42 = v40[1];
        v43 = *(_QWORD *)(a4 + 832);
        if (v43)
          v39 = *(_WORD *)(v43 + 8);
        v44 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x31, 0, v41, v42, v39);
        v46 = v45;
        v47 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v50 = 0;
        v51 = *(_QWORD *)(a4 + 832);
        if (v51)
          v50 = *(_WORD *)(v51 + 8);
        v52 = sub_1C5D56C70(a4, 148, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v44, v46, v49, (uint64_t)v47, v48, v50);
        v54 = v53;
        v56 = sub_1C6366AB4(a4, 1850, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v58 = 0;
        v59 = *(_QWORD *)(a4 + 832);
        if (v59)
          v58 = *(_WORD *)(v59 + 8);
        v60 = sub_1C5D56C70(a4, 46, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v56, v55, v57, (uint64_t)v52, v54, v58);
        v62 = v61;
        v64 = sub_1C6366AB4(a4, 31, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v66 = 0;
        v67 = *(_QWORD *)(a4 + 832);
        if (v67)
          v66 = *(_WORD *)(v67 + 8);
        v68 = sub_1C5D56C70(a4, 57, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v64, v63, v65, (uint64_t)v60, v62, v66);
        v70 = v69;
        v71 = sub_1C6366AB4(a4, 1850, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v73 = v72;
        v74 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v77 = 0;
        v78 = *(_QWORD *)(a4 + 832);
        if (v78)
          v77 = *(_WORD *)(v78 + 8);
        v79 = sub_1C5D56C70(a4, 148, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v44, v46, v76, (uint64_t)v74, v75, v77);
        v82 = 0;
        v83 = *(_QWORD *)(a4 + 832);
        if (v83)
          v82 = *(_WORD *)(v83 + 8);
        v84 = sub_1C5D56C70(a4, 46, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v71, v73, v81, (uint64_t)v79, v80, v82);
        v86 = v85;
        v88 = sub_1C6366AB4(a4, 31, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v90 = 0;
        v91 = *(_QWORD *)(a4 + 832);
        if (v91)
          v90 = *(_WORD *)(v91 + 8);
        v92 = sub_1C5D56C70(a4, 57, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v88, v87, v89, (uint64_t)v84, v86, v90);
        v94 = v86 & 0xFFFFFFFF00000000 | v93;
        v95 = sub_1C6366AB4(a4, 32, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v98 = 0;
        v99 = *(_QWORD *)(a4 + 832);
        if (v99)
          v98 = *(_WORD *)(v99 + 8);
        v100 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v92, v94, v97, (uint64_t)v95, v96, v98);
        v102 = v101;
        v103 = v100[5] + 16 * v101;
        v104 = *(llvm **)v103;
        v105 = *(_QWORD *)(v103 + 8);
        v106 = sub_1C6367818((_QWORD *)a4, 0x11u);
        v109 = sub_1C63698B8(a4, (const char *)0xC0, (const llvm::APInt *)__src, v104, v105, (uint64_t)v52, v54, v108, v1810, v1796, (uint64_t)v100, v102, (uint64_t)v68, v70, v106, v107);
        v111 = v110;
        v112 = *(_QWORD *)(a4 + 832);
        if (v112)
          v113 = *(_WORD *)(v112 + 8);
        else
          v113 = 0;
        v937 = a4;
        v938 = 199;
        v939 = 6;
        goto LABEL_540;
      case 0xC0:
        v176 = *(_QWORD *)(a2 + 32);
        v177 = *(unsigned int *)(v176 + 8);
        v178 = *(_QWORD *)(*(_QWORD *)v176 + 40);
        v179 = (unsigned __int8 *)(v178 + 16 * v177);
        if (*v179)
        {
          if (*v179 - 15 < 0x9C)
            return sub_1C5D625F4(a4, a2, 0);
        }
        else if ((*(_DWORD *)(*((_QWORD *)v179 + 1) + 8) & 0xFE) == 0x12)
        {
          return sub_1C5D625F4(a4, a2, 0);
        }
        v436 = *(_QWORD *)(a1 + 184296);
        if (*(_BYTE *)(v436 + 280))
          return v8;
        if (!*(_BYTE *)(v436 + 281))
          return 0;
        v437 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v1849 = v437;
        if (v437)
        {
          llvm::MetadataTracking::track((uint64_t)&v1849, v437, 2);
          v176 = v8[4];
          v177 = *(unsigned int *)(v176 + 8);
          v178 = *(_QWORD *)(*(_QWORD *)v176 + 40);
        }
        v438 = *((_DWORD *)v8 + 15);
        DWORD2(v1849) = v438;
        v439 = v8[5] + 16 * a3;
        v440 = *(llvm **)v439;
        v441 = *(_QWORD *)(v439 + 8);
        *(_QWORD *)&v1839 = *(_QWORD *)v439;
        *((_QWORD *)&v1839 + 1) = v441;
        v4 = v8;
        if (*(_BYTE *)(v178 + 16 * v177) == 6)
        {
          v1583 = *(_OWORD *)v176;
          v1837 = *(_OWORD *)(v176 + 40);
          v1838 = v1583;
          v1584 = *(_DWORD *)(*(_QWORD *)(v176 + 160) + 76);
          v1836 = v1584;
          v1834 = (unsigned __int8 *)v1849;
          if ((_QWORD)v1849)
          {
            llvm::MetadataTracking::track((uint64_t)&v1834, (unsigned __int8 *)v1849, 2);
            v438 = DWORD2(v1849);
          }
          v1835 = v438;
          sub_1C480E3A0((unsigned int *)a1, (uint64_t)&v1838, (unint64_t *)&v1837, &v1836, (const llvm::APInt *)&v1834, a4);
          if (v1834)
            llvm::MetadataTracking::untrack((uint64_t)&v1834, v1834);
          if (!(_QWORD)v1837)
          {
            v1585 = *(_QWORD *)(v1838 + 40) + 16 * DWORD2(v1838);
            *(_QWORD *)&v1837 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, *(llvm **)v1585, *(_QWORD *)(v1585 + 8), 0, 0);
            DWORD2(v1837) = v1586;
            v1584 = 22;
          }
          __src[0] = (void *)v1838;
          LODWORD(__src[1]) = DWORD2(v1838);
          v1841 = (_QWORD *)v1837;
          LODWORD(v1842) = DWORD2(v1837);
          v1587 = v8[4];
          LODWORD(v1844) = *(_DWORD *)(v1587 + 88);
          v1843 = *(void **)(v1587 + 80);
          LODWORD(v1846) = *(_DWORD *)(v1587 + 128);
          v1845 = *(uint64_t **)(v1587 + 120);
          v1847 = sub_1C6367818((_QWORD *)a4, v1584);
          v1848 = v1588;
          v1589 = *(_QWORD *)(a4 + 832);
          if (v1589)
            v1590 = *(unsigned __int16 *)(v1589 + 8);
          else
            v1590 = 0;
          v4 = sub_1C636D0C8(a4, (const char *)0xC0, (const llvm::APInt *)&v1849, v440, v441, (uint64_t *)__src, 5, v1590);
        }
        if ((_BYTE)v440)
          v442 = sub_1C47A8C74((unsigned __int8 *)&v1839);
        else
          v442 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1839);
        v940 = v442;
        if ((_DWORD)v443 == 1)
        if (v940 != 64)
          goto LABEL_837;
        v941 = (_QWORD *)v4[4];
        v943 = (uint64_t *)v941[10];
        v942 = v941[11];
        v945 = (uint64_t *)v941[15];
        v944 = v941[16];
        if (v1839 != 49)
        {
          v946 = *(_QWORD *)(a4 + 832);
          if (v946)
            v947 = *(_WORD *)(v946 + 8);
          else
            v947 = 0;
          v943 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x31, 0, (uint64_t)v943, v942, v947);
          v1686 = 0;
          v942 = v942 & 0xFFFFFFFF00000000 | v1687;
          v1688 = *(_QWORD *)(a4 + 832);
          if (v1688)
            v1686 = *(_WORD *)(v1688 + 8);
          v945 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x31, 0, (uint64_t)v945, v944, v1686);
          v944 = v944 & 0xFFFFFFFF00000000 | v1689;
        }
        v1690 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
        v1693 = 0;
        v1694 = *(_QWORD *)(a4 + 832);
        if (v1694)
          v1693 = *(_WORD *)(v1694 + 8);
        v1695 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v943, v942, v1692, (uint64_t)v1690, v1691, v1693);
        v1809 = v1696;
        v1825 = (uint64_t)v1695;
        v1697 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
        v1700 = 0;
        v1701 = *(_QWORD *)(a4 + 832);
        if (v1701)
          v1700 = *(_WORD *)(v1701 + 8);
        v1702 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v943, v942, v1699, (uint64_t)v1697, v1698, v1700);
        v1704 = v1703;
        v1705 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
        v1708 = 0;
        v1709 = *(_QWORD *)(a4 + 832);
        if (v1709)
          v1708 = *(_WORD *)(v1709 + 8);
        v1710 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v945, v944, v1707, (uint64_t)v1705, v1706, v1708);
        v1712 = v1711;
        v1713 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
        v1716 = 0;
        v1717 = *(_QWORD *)(a4 + 832);
        if (v1717)
          v1716 = *(_WORD *)(v1717 + 8);
        v1718 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v945, v944, v1715, (uint64_t)v1713, v1714, v1716);
        v1720 = v1719;
        v1721 = (uint64_t *)v4[4];
        v1723 = sub_1C63698B8(a4, (const char *)0xC0, (const llvm::APInt *)&v1849, (llvm *)5, 0, *v1721, v1721[1], v1722, v1721[5], v1721[6], v1825, v1809, (uint64_t)v1710, v1712, v1721[20], v1721[21]);
        v1725 = v1724;
        v1726 = (uint64_t *)v4[4];
        v1728 = sub_1C63698B8(a4, (const char *)0xC0, (const llvm::APInt *)&v1849, (llvm *)5, 0, *v1726, v1726[1], v1727, v1726[5], v1726[6], (uint64_t)v1702, v1704, (uint64_t)v1718, v1720, v1726[20], v1726[21]);
        v1731 = *(_QWORD *)(a4 + 832);
        if (v1731)
          LOWORD(v1731) = *(_WORD *)(v1731 + 8);
        v4 = sub_1C5D56C70(a4, 146, (const llvm::APInt *)&v1849, (llvm *)0x31, 0, (uint64_t)v1723, v1725, v1730, (uint64_t)v1728, v1729, v1731);
        if (v1839 == 49)
          goto LABEL_837;
        v1733 = *(_QWORD *)(a4 + 832);
        if (v1733)
          v1734 = *(_WORD *)(v1733 + 8);
        else
          v1734 = 0;
        v1353 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)v1839, *((uint64_t *)&v1839 + 1), (uint64_t)v4, v1732, v1734);
        goto LABEL_836;
      case 0xC1:
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 281))
          return 0;
        v419 = *(void **)(a2 + 64);
        __src[0] = v419;
        if (v419)
        {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v419, 2);
          v419 = __src[0];
        }
        v420 = *((_DWORD *)v8 + 15);
        LODWORD(__src[1]) = v420;
        v421 = v8[4];
        v1849 = *(_OWORD *)v421;
        v1839 = *(_OWORD *)(v421 + 40);
        v422 = *(unsigned __int8 *)(*(_QWORD *)(v1849 + 40) + 16 * DWORD2(v1849));
        if (v422 == 6)
        {
          v423 = *(_DWORD *)(*(_QWORD *)(v421 + 80) + 76);
          LODWORD(v1838) = v423;
          v1832 = (unsigned __int8 *)v419;
          if (v419)
          {
            llvm::MetadataTracking::track((uint64_t)&v1832, (unsigned __int8 *)v419, 2);
            v420 = (int)__src[1];
          }
          v1833 = v420;
          sub_1C480E3A0((unsigned int *)a1, (uint64_t)&v1849, (unint64_t *)&v1839, (unsigned int *)&v1838, (const llvm::APInt *)&v1832, a4);
          if (v1832)
            llvm::MetadataTracking::untrack((uint64_t)&v1832, v1832);
          v424 = v1839;
          if ((_QWORD)v1839)
          {
            v1354 = v8[5] + 16 * a3;
            v1355 = *(llvm **)v1354;
            v1356 = *(_QWORD *)(v1354 + 8);
            v1357 = v1849;
            v1358 = *((_QWORD *)&v1839 + 1);
            v1359 = sub_1C6367818((_QWORD *)a4, v423);
            v1362 = *(_QWORD *)(a4 + 832);
            if (v1362)
              LOWORD(v1362) = *(_WORD *)(v1362 + 8);
            v4 = sub_1C5D58E08(a4, (const char *)0xC1, (const llvm::APInt *)__src, v1355, v1356, v1357, *((uint64_t *)&v1357 + 1), v1361, v424, v1358, v1359, v1360, SHIDWORD(v1360), v1362);
          }
          else
          {
            v4 = (uint64_t *)v1849;
          }
          v419 = __src[0];
        }
        if (v419)
          llvm::MetadataTracking::untrack((uint64_t)__src, (unsigned __int8 *)v419);
        if (v422 != 6)
          return 0;
        return v4;
      case 0xC3:
        return sub_1C48162AC(a2, a3, (_QWORD *)a4);
      case 0xC4:
      case 0xC5:
        return sub_1C4815BD4(a2, a3, (_QWORD *)a4);
      case 0xC9:
        return 0;
      case 0xCA:
        v4 = (uint64_t *)a2;
        if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 40) + 16
                                                                   * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8)) != 6)
          return v4;
        v395 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 16 * a3);
        if ((v395 - 11) < 0xFFFFFFFE)
          return 0;
        v396 = *(void **)(a2 + 64);
        __src[0] = v396;
        if (v396)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v396, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        if (v395 == 9)
          goto LABEL_207;
        v1442 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1444 = v1443;
        v1445 = (uint64_t *)v8[4];
        v1446 = *v1445;
        v1447 = v1445[1];
        v1448 = sub_1C6366AB4(a4, 63, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1451 = *(_QWORD *)(a4 + 832);
        if (v1451)
          LOWORD(v1451) = *(_WORD *)(v1451 + 8);
        v1452 = sub_1C5D56C70(a4, 176, (const llvm::APInt *)__src, (llvm *)6, 0, v1446, v1447, v1450, (uint64_t)v1448, v1449, v1451);
        v1455 = (uint64_t)v1452;
        v1456 = v1453;
        v1457 = (uint64_t *)v8[4];
        v1458 = *v1457;
        v1459 = v1457[1];
        v1460 = *(_QWORD *)(a4 + 832);
        if (v1460)
          LOWORD(v1460) = *(_WORD *)(v1460 + 8);
        v1462 = sub_1C5D56C70(a4, 173, (const llvm::APInt *)__src, (llvm *)6, 0, v1458, v1459, v1454, (uint64_t)v1452, v1453, v1460);
        v1464 = v1461;
        v1465 = *(_QWORD *)(a4 + 832);
        if (v1465)
          LOWORD(v1465) = *(_WORD *)(v1465 + 8);
        v1466 = sub_1C5D56C70(a4, 57, (const llvm::APInt *)__src, (llvm *)6, 0, (uint64_t)v1462, v1461, v1463, v1455, v1456, v1465);
        v1468 = v1464 & 0xFFFFFFFF00000000 | v1467;
        v1469 = *(_QWORD *)(a4 + 832);
        if (v1469)
          v1470 = *(_WORD *)(v1469 + 8);
        else
          v1470 = 0;
        v1661 = sub_1C5D52060(a4, 203, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v1466, v1468, v1470);
        v1662 = v1660;
        v1663 = *(_QWORD *)(a4 + 832);
        if (v1663)
          v1664 = *(_WORD *)(v1663 + 8);
        else
          v1664 = 0;
        v1665 = sub_1C5D52060(a4, 222, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v1661, v1660, v1664);
        v1667 = v1666;
        v1668 = *(_QWORD *)(a4 + 832);
        if (v1668)
          v1669 = *(_WORD *)(v1668 + 8);
        else
          v1669 = 0;
        v1670 = sub_1C5D52060(a4, 201, (const llvm::APInt *)__src, (llvm *)5, 0, v1455, v1456, v1669);
        v433 = sub_1C47DF81C((_QWORD *)a4, (const llvm::APInt *)__src, (uint64_t)v1670, v1671, (uint64_t)v1442, v1444, (uint64_t)v1661, v1662, (uint64_t)v1665, v1667, SHIDWORD(v1667), 0x11u);
        goto LABEL_604;
      case 0xCB:
        v4 = (uint64_t *)a2;
        if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 40) + 16
                                                                   * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8)) != 6)
          return v4;
        v270 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 16 * a3);
        if ((v270 - 11) < 0xFFFFFFFE)
          return 0;
        v271 = *(void **)(a2 + 64);
        __src[0] = v271;
        if (v271)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v271, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        if (v270 == 9)
        {
LABEL_207:
          v397 = (uint64_t *)v8[4];
          v398 = *v397;
          v399 = v397[1];
          v400 = *(_QWORD *)(a4 + 832);
          if (v400)
            v401 = *(_WORD *)(v400 + 8);
          else
            v401 = 0;
          v1273 = sub_1C5D52060(a4, *((unsigned __int16 *)v8 + 12), (const llvm::APInt *)__src, (llvm *)0xA, 0, v398, v399, v401);
          goto LABEL_885;
        }
        v272 = (uint64_t *)v8[4];
        v273 = *v272;
        v274 = v272[1];
        v1812 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a4 + 40) + 40) + 272, *(_QWORD *)(a4 + 56), 10, 0);
        v276 = v275;
        v277 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1787 = v278;
        v1798 = (uint64_t)v277;
        v279 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)6, 0, 0, 0);
        v281 = v280;
        v282 = 0;
        v283 = *(_QWORD *)(a4 + 832);
        if (v283)
          v282 = *(_WORD *)(v283 + 8);
        v285 = sub_1C5D52060(a4, 189, (const llvm::APInt *)__src, (llvm *)6, 0, v273, v274, v282);
        v286 = v284;
        v287 = 0;
        v288 = *(_QWORD *)(a4 + 832);
        if (v288)
          v287 = *(_WORD *)(v288 + 8);
        v289 = sub_1C5D52060(a4, 201, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v285, v284, v287);
        v291 = v286 & 0xFFFFFFFF00000000 | v290;
        v292 = sub_1C6366AB4(a4, 190, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v294 = v293;
        v295 = sub_1C6367818((_QWORD *)a4, 0x16u);
        v298 = 0;
        v299 = *(_QWORD *)(a4 + 832);
        if (v299)
          v298 = *(_WORD *)(v299 + 8);
        v301 = sub_1C5D58E08(a4, (const char *)0xC1, (const llvm::APInt *)__src, v1812, v276, v273, v274, v297, (uint64_t)v279, v281, v295, v296, SHIDWORD(v296), v298);
        v303 = v302;
        v304 = *(_QWORD *)(a4 + 832);
        if (v304)
          LOWORD(v304) = *(_WORD *)(v304 + 8);
        v305 = sub_1C5D56C70(a4, 57, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v292, v294, v300, (uint64_t)v289, v291, v304);
        v308 = sub_1C4815A8C(a4, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v301, v303, (uint64_t)v305, v306, v1798, v1787, SHIDWORD(v1787));
        v310 = v309;
        v311 = 0;
        v312 = *(_QWORD *)(a4 + 832);
        if (v312)
          v311 = *(_WORD *)(v312 + 8);
        v313 = sub_1C5D56C70(a4, 175, (const llvm::APInt *)__src, (llvm *)6, 0, v273, v274, v307, (uint64_t)v289, v291, v311);
        v315 = v314;
        v316 = sub_1C6366AB4(a4, 0x7FFFFFFFFFFFFFFFLL, (const llvm::APInt *)__src, (llvm *)6, 0, 0, 0);
        v319 = 0;
        v320 = *(_QWORD *)(a4 + 832);
        if (v320)
          v319 = *(_WORD *)(v320 + 8);
        v321 = sub_1C5D56C70(a4, 171, (const llvm::APInt *)__src, (llvm *)6, 0, (uint64_t)v313, v315, v318, (uint64_t)v316, v317, v319);
        v323 = v322;
        v324 = sub_1C6366AB4(a4, 0xFFFFFFFFFFLL, (const llvm::APInt *)__src, (llvm *)6, 0, 0, 0);
        v327 = 0;
        v328 = *(_QWORD *)(a4 + 832);
        if (v328)
          v327 = *(_WORD *)(v328 + 8);
        v329 = sub_1C5D56C70(a4, 171, (const llvm::APInt *)__src, (llvm *)6, 0, (uint64_t)v321, v323, v326, (uint64_t)v324, v325, v327);
        v331 = v330;
        v332 = sub_1C6366AB4(a4, 40, (const llvm::APInt *)__src, (llvm *)6, 0, 0, 0);
        v335 = 0;
        v336 = *(_QWORD *)(a4 + 832);
        if (v336)
          v335 = *(_WORD *)(v336 + 8);
        v337 = sub_1C5D56C70(a4, 177, (const llvm::APInt *)__src, (llvm *)6, 0, (uint64_t)v321, v323, v334, (uint64_t)v332, v333, v335);
        v339 = v338;
        v340 = sub_1C6366AB4(a4, 23, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v343 = 0;
        v344 = *(_QWORD *)(a4 + 832);
        if (v344)
          v343 = *(_WORD *)(v344 + 8);
        v345 = sub_1C5D56C70(a4, 175, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v308, v310, v342, (uint64_t)v340, v341, v343);
        v347 = v346;
        v348 = 0;
        v349 = *(_QWORD *)(a4 + 832);
        if (v349)
          v348 = *(_WORD *)(v349 + 8);
        v350 = sub_1C5D52060(a4, 201, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v337, v339, v348);
        v353 = 0;
        v354 = *(_QWORD *)(a4 + 832);
        if (v354)
          v353 = *(_WORD *)(v354 + 8);
        v355 = sub_1C5D56C70(a4, 172, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v345, v347, v352, (uint64_t)v350, v351, v353);
        v357 = v356;
        v358 = sub_1C6366AB4(a4, 0x8000000000, (const llvm::APInt *)__src, (llvm *)6, 0, 0, 0);
        v360 = v359;
        v361 = sub_1C6367818((_QWORD *)a4, 0xAu);
        v364 = 0;
        v365 = *(_QWORD *)(a4 + 832);
        if (v365)
          v364 = *(_WORD *)(v365 + 8);
        v366 = sub_1C5D58E08(a4, (const char *)0xC1, (const llvm::APInt *)__src, v1812, v276, (uint64_t)v329, v331, v363, (uint64_t)v358, v360, v361, v362, SHIDWORD(v362), v364);
        v368 = v367;
        v369 = sub_1C6367818((_QWORD *)a4, 0x11u);
        v372 = *(_QWORD *)(a4 + 832);
        if (v372)
          LOWORD(v372) = *(_WORD *)(v372 + 8);
        v373 = sub_1C5D58E08(a4, (const char *)0xC1, (const llvm::APInt *)__src, v1812, v276, (uint64_t)v329, v331, v371, (uint64_t)v358, v360, v369, v370, SHIDWORD(v370), v372);
        v375 = v374;
        v376 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v379 = (uint64_t)v376;
        v380 = v377;
        v381 = *(_QWORD *)(a4 + 832);
        if (v381)
          LOWORD(v381) = *(_WORD *)(v381 + 8);
        v382 = sub_1C5D56C70(a4, 171, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v355, v357, v378, (uint64_t)v376, v377, v381);
        v384 = sub_1C4815A8C(a4, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v373, v375, (uint64_t)v382, v383, v1798, v1787, SHIDWORD(v1787));
        v387 = sub_1C4815A8C(a4, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v366, v368, v379, v380, (uint64_t)v384, v385, v386);
        v390 = v388;
        v391 = *(_QWORD *)(a4 + 832);
        if (v391)
          LOWORD(v391) = *(_WORD *)(v391 + 8);
        v109 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v355, v357, v389, (uint64_t)v387, v388, v391);
        v393 = v390 & 0xFFFFFFFF00000000 | v392;
        v394 = *(_QWORD *)(a4 + 832);
        if (v394)
          v113 = *(_WORD *)(v394 + 8);
        else
          v113 = 0;
        v937 = a4;
        v938 = 216;
        v939 = 10;
        v111 = v393;
LABEL_540:
        v433 = sub_1C5D52060(v937, v938, (const llvm::APInt *)__src, (llvm *)v939, 0, (uint64_t)v109, v111, v113);
        goto LABEL_604;
      case 0xCC:
        v4 = (uint64_t *)a2;
        if (*(_BYTE *)(*(_QWORD *)(a2 + 40) + 16 * a3) != 6)
          return v4;
        v170 = *(void **)(a2 + 64);
        __src[0] = v170;
        if (v170)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v170, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v171 = (uint64_t *)v8[4];
        v172 = *v171;
        v173 = v171[1];
        v1849 = *(_OWORD *)(v171[5] + 80);
        v174 = *(_QWORD *)(a4 + 832);
        v1811 = v1849;
        if (v174)
          v175 = *(_WORD *)(v174 + 8);
        else
          v175 = 0;
        v1251 = sub_1C5D52060(a4, 201, (const llvm::APInt *)__src, (llvm *)5, 0, v172, v173, v175);
        v1253 = v1252;
        if (v1811)
          v1254 = sub_1C47A8C74((unsigned __int8 *)&v1849);
        else
          v1254 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1849);
        v1256 = v1254;
        if ((_DWORD)v1255 == 1)
        if (v1256 > 0x1F)
        {
          v1259 = v1251;
          v1260 = v1253;
        }
        else
        {
          if ((_BYTE)v1849)
            v1257 = sub_1C47A8C74((unsigned __int8 *)&v1849);
          else
            v1257 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1849);
          v1408 = v1257;
          if ((_DWORD)v1258 == 1)
          v1409 = sub_1C6366AB4(a4, 32 - v1408, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
          v1412 = 0;
          v1413 = *(_QWORD *)(a4 + 832);
          if (v1413)
            v1412 = *(_WORD *)(v1413 + 8);
          v1251 = sub_1C5D56C70(a4, 175, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1251, v1253, v1411, (uint64_t)v1409, v1410, v1412);
          v1253 = v1253 & 0xFFFFFFFF00000000 | v1414;
          if ((_BYTE)v1849)
            v1415 = sub_1C47A8C74((unsigned __int8 *)&v1849);
          else
            v1415 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1849);
          v1417 = v1415;
          if ((_DWORD)v1416 == 1)
          v1418 = sub_1C6366AB4(a4, 32 - v1417, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
          v1421 = 0;
          v1422 = *(_QWORD *)(a4 + 832);
          if (v1422)
            v1421 = *(_WORD *)(v1422 + 8);
          v1259 = sub_1C5D56C70(a4, 176, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1251, v1253, v1420, (uint64_t)v1418, v1419, v1421);
          v1260 = v1423;
        }
        v1424 = sub_1C6366AB4(a4, 31, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        v1427 = *(_QWORD *)(a4 + 832);
        if (v1427)
          LOWORD(v1427) = *(_WORD *)(v1427 + 8);
        v1428 = sub_1C5D56C70(a4, 176, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1251, v1253, v1426, (uint64_t)v1424, v1425, v1427);
        v1431 = *(_QWORD *)(a4 + 832);
        if (v1431)
          LOWORD(v1431) = *(_WORD *)(v1431 + 8);
        v1433 = sub_1C5D56C70(a4, 146, (const llvm::APInt *)__src, (llvm *)0x31, 0, (uint64_t)v1259, v1260, v1430, (uint64_t)v1428, v1429, v1431);
        v1434 = *(_QWORD *)(a4 + 832);
        if (v1434)
          v1435 = *(_WORD *)(v1434 + 8);
        else
          v1435 = 0;
        v492 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)6, 0, (uint64_t)v1433, v1432, v1435);
        goto LABEL_882;
      default:
        if (v10 == 64)
        {
          v114 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 184296) + 280);
          v115 = *(uint64_t **)(a2 + 32);
          v117 = *v115;
          v116 = v115[1];
          v119 = v115[5];
          v118 = v115[6];
          v120 = *(unsigned __int8 **)(a2 + 64);
          *(_QWORD *)&v1849 = v120;
          if (v120)
            llvm::MetadataTracking::track((uint64_t)&v1849, v120, 2);
          DWORD2(v1849) = *((_DWORD *)v8 + 15);
          if (v114
            || *(_BYTE *)(v8[5] + 16 * a3) != 5
            || (v121 = v8[4], *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v121 + 40) + 16 * *(unsigned int *)(v121 + 8)) != 5)
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v121 + 40) + 40) + 16 * *(unsigned int *)(v121 + 48)) != 5)
          {
            v122 = *(_QWORD *)(a4 + 832);
            if (v122)
              v123 = *(_WORD *)(v122 + 8);
            else
              v123 = 0;
            v667 = *(unsigned __int16 *)(v117 + 24);
            v1781 = *(unsigned __int16 *)(v119 + 24);
            v668 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, v117, v116, v123);
            v669 = 0;
            v671 = v116 & 0xFFFFFFFF00000000 | v670;
            v672 = *(_QWORD *)(a4 + 832);
            if (v672)
              v669 = *(_WORD *)(v672 + 8);
            v673 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, v119, v118, v669);
            v675 = v118 & 0xFFFFFFFF00000000 | v674;
            v676 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
            v679 = 0;
            v680 = *(_QWORD *)(a4 + 832);
            if (v680)
              v679 = *(_WORD *)(v680 + 8);
            v681 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v668, v671, v678, (uint64_t)v676, v677, v679);
            v1775 = v682;
            v683 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
            v686 = 0;
            v687 = *(_QWORD *)(a4 + 832);
            if (v687)
              v686 = *(_WORD *)(v687 + 8);
            v688 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v668, v671, v685, (uint64_t)v683, v684, v686);
            v690 = v689;
            v691 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
            v694 = 0;
            v695 = *(_QWORD *)(a4 + 832);
            if (v695)
              v694 = *(_WORD *)(v695 + 8);
            v696 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v673, v675, v693, (uint64_t)v691, v692, v694);
            v698 = v697;
            v699 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
            v702 = 0;
            v703 = *(_QWORD *)(a4 + 832);
            if (v703)
              v702 = *(_WORD *)(v703 + 8);
            v1789 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v673, v675, v701, (uint64_t)v699, v700, v702);
            v1801 = v704;
            if (v667 == 199)
            {
              v688 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)4, 0, 0, 0);
              v690 = v690 & 0xFFFFFFFF00000000 | v705;
            }
            if (v1781 == 199)
            {
              v1789 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)4, 0, 0, 0);
              v1801 = v1801 & 0xFFFFFFFF00000000 | v706;
            }
            v707 = *(_QWORD *)(a4 + 832);
            if (v707)
              v708 = *(_WORD *)(v707 + 8);
            else
              v708 = 0;
            v709 = sub_1C5D52060(a4, 199, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v681, v1775, v708);
            v1770 = v710;
            v711 = 0;
            v712 = *(_QWORD *)(a4 + 832);
            if (v712)
              v711 = *(_WORD *)(v712 + 8);
            v713 = sub_1C5D52060(a4, 199, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v696, v698, v711);
            v715 = v714;
            v716 = 0;
            v717 = *(_QWORD *)(a4 + 832);
            if (v717)
              v716 = *(_WORD *)(v717 + 8);
            v718 = sub_1C5D52060(a4, 199, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v688, v690, v716);
            v720 = v719;
            v721 = 0;
            v722 = *(_QWORD *)(a4 + 832);
            if (v722)
              v721 = *(_WORD *)(v722 + 8);
            v724 = sub_1C5D52060(a4, 199, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v1789, v1801, v721);
            v1753 = v725;
            v726 = 0;
            v727 = *(_QWORD *)(a4 + 832);
            if (v727)
              v726 = *(_WORD *)(v727 + 8);
            v1747 = (uint64_t)v709;
            v729 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v709, v1770, v723, (uint64_t)v713, v715, v726);
            v730 = v728;
            v731 = 0;
            v732 = *(_QWORD *)(a4 + 832);
            if (v732)
              v731 = *(_WORD *)(v732 + 8);
            v733 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, (uint64_t)v729, v728, v731);
            v1816 = v734;
            v735 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
            v738 = 0;
            v739 = *(_QWORD *)(a4 + 832);
            if (v739)
              v738 = *(_WORD *)(v739 + 8);
            v1766 = (uint64_t)v681;
            v740 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v733, v1816, v737, (uint64_t)v735, v736, v738);
            v1749 = v741;
            v1751 = (uint64_t)v740;
            v742 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
            v745 = 0;
            v746 = *(_QWORD *)(a4 + 832);
            if (v746)
              v745 = *(_WORD *)(v746 + 8);
            v748 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v733, v1816, v744, (uint64_t)v742, v743, v745);
            v750 = v749;
            v751 = 0;
            v752 = *(_QWORD *)(a4 + 832);
            if (v752)
              v751 = *(_WORD *)(v752 + 8);
            v1762 = (uint64_t)v718;
            v753 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v718, v720, v747, (uint64_t)v713, v715, v751);
            v755 = v754;
            v756 = 0;
            v757 = *(_QWORD *)(a4 + 832);
            if (v757)
              v756 = *(_WORD *)(v757 + 8);
            v758 = sub_1C5D52060(a4, 199, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v748, v750, v756);
            v761 = 0;
            v762 = *(_QWORD *)(a4 + 832);
            if (v762)
              v761 = *(_WORD *)(v762 + 8);
            v1756 = (uint64_t)v724;
            v1759 = v720;
            v763 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v753, v755, v760, (uint64_t)v758, v759, v761);
            v764 = 0;
            v766 = v755 & 0xFFFFFFFF00000000 | v765;
            v767 = *(_QWORD *)(a4 + 832);
            if (v767)
              v764 = *(_WORD *)(v767 + 8);
            v1746 = (uint64_t)v763;
            v768 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, (uint64_t)v763, v766, v764);
            v770 = v1816 & 0xFFFFFFFF00000000 | v769;
            v771 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
            v774 = 0;
            v775 = *(_QWORD *)(a4 + 832);
            if (v775)
              v774 = *(_WORD *)(v775 + 8);
            v776 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v768, v770, v773, (uint64_t)v771, v772, v774);
            v778 = v777;
            v779 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
            v782 = 0;
            v783 = *(_QWORD *)(a4 + 832);
            if (v783)
              v782 = *(_WORD *)(v783 + 8);
            v785 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v768, v770, v781, (uint64_t)v779, v780, v782);
            v1745 = v786;
            v787 = 0;
            v788 = *(_QWORD *)(a4 + 832);
            if (v788)
              v787 = *(_WORD *)(v788 + 8);
            v789 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)&v1849, (llvm *)4, 0, v1766, v1775, v784, (uint64_t)v1789, v1801, v787);
            v791 = 0;
            v792 = v750 & 0xFFFFFFFF00000000;
            v794 = v750 & 0xFFFFFFFF00000000 | v793;
            v795 = *(_QWORD *)(a4 + 832);
            if (v795)
              v791 = *(_WORD *)(v795 + 8);
            v796 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v789, v794, v790, (uint64_t)v776, v778, v791);
            v799 = 0;
            v800 = *(_QWORD *)(a4 + 832);
            if (v800)
              v799 = *(_WORD *)(v800 + 8);
            v801 = sub_1C5D56C70(a4, 146, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, v1751, v1749, v798, (uint64_t)v796, v797 | v792, v799);
            v802 = 0;
            v804 = v730 & 0xFFFFFFFF00000000 | v803;
            v805 = *(_QWORD *)(a4 + 832);
            if (v805)
              v802 = *(_WORD *)(v805 + 8);
            v806 = v755 & 0xFFFFFFFF00000000;
            v652 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v801, v804, v802);
            v654 = v808;
            v809 = *(_QWORD *)(a4 + 832);
            if (v1781 == 199)
            {
              v810 = v1753;
              if (v809)
                v811 = *(_WORD *)(v809 + 8);
              else
                v811 = 0;
              v659 = sub_1C5D52060(a4, 199, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v785, v1745, v811);
              v812 = v1759;
            }
            else
            {
              v810 = v1753;
              if (v809)
                LOWORD(v809) = *(_WORD *)(v809 + 8);
              v812 = v1759;
              v659 = sub_1C5D58E08(a4, (const char *)0x1B0, (const llvm::APInt *)&v1849, (llvm *)5, 0, v1747, v1770, v807, v1756, v1753, v1746, v766, SHIDWORD(v766), v809);
            }
            v657 = v1816 & 0xFFFFFFFF00000000;
            v662 = v813 | v806;
            v927 = *(_QWORD *)(a4 + 832);
            if (v927)
              LOWORD(v927) = *(_WORD *)(v927 + 8);
            v664 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)&v1849, (llvm *)5, 0, v1762, v812, v814, v1756, v810, v927);
            goto LABEL_527;
          }
LABEL_532:
          v22 = (unsigned __int8 *)v1849;
          if (!(_QWORD)v1849)
            return v8;
          v936 = (void **)&v1849;
LABEL_534:
          llvm::MetadataTracking::untrack((uint64_t)v936, v22);
          return v8;
        }
        v402 = *(void **)(a2 + 64);
        __src[0] = v402;
        if (v402)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v402, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v403 = v8[4];
        v404 = v8[5] + 16 * a3;
        v405 = *(llvm **)v404;
        v1813 = *(_QWORD *)(v404 + 8);
        v407 = *(uint64_t **)v403;
        v406 = *(_QWORD *)(v403 + 8);
        v408 = *(_QWORD *)(v403 + 40);
        v409 = *(_QWORD *)(v403 + 48);
        v410 = *(unsigned __int16 *)(v408 + 24);
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 293)
          || (*(_WORD *)(*(_QWORD *)a4 + 1020) & 1) != 0
          || *(_QWORD *)v404 != 10)
        {
          goto LABEL_583;
        }
        if (v410 == 36 || v410 == 12)
        {
          if (fabsf(llvm::APFloat::convertToFloat((llvm::APFloat *)(*(_QWORD *)(v408 + 80) + 24))) <= 8.5071e37)
            goto LABEL_583;
          v1799 = (uint64_t)v407;
          v412 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, (_BOOL8)v405, v1813, 0, 0.25);
          v414 = v413;
          v415 = llvm::APFloat::convertToFloat((llvm::APFloat *)(*(_QWORD *)(v408 + 80) + 24));
          v416 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, (_BOOL8)v405, v1813, 0, v415 * 0.25);
        }
        else
        {
          v815 = *(_QWORD *)(a4 + 832);
          v1799 = *(_QWORD *)v403;
          if (v815)
            v816 = *(_WORD *)(v815 + 8);
          else
            v816 = 0;
          v955 = sub_1C5D52060(a4, 223, (const llvm::APInt *)__src, v405, v1813, v408, v409, v816);
          v1782 = v956;
          v1790 = (uint64_t)v955;
          v957 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, (_BOOL8)v405, v1813, 0, 8.50705917e37);
          v1771 = v958;
          v1776 = (uint64_t)v957;
          v959 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, (_BOOL8)v405, v1813, 0, 0.25);
          v961 = v960;
          v962 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, (_BOOL8)v405, v1813, 0, 1.0);
          v965 = sub_1C47DF81C((_QWORD *)a4, (const llvm::APInt *)__src, v1790, v1782, v1776, v1771, (uint64_t)v959, v961, (uint64_t)v962, v963, v964, 0x12u);
          v412 = v965;
          v414 = v966;
          v968 = *(_QWORD *)(a4 + 832);
          if (v968)
            LOWORD(v968) = *(_WORD *)(v968 + 8);
          v416 = sub_1C5D56C70(a4, 98, (const llvm::APInt *)__src, v405, v1813, v408, v409, v967, (uint64_t)v965, v966, v968);
        }
        v408 = (uint64_t)v416;
        v409 = v409 & 0xFFFFFFFF00000000 | v417;
        v969 = *(_QWORD *)(a4 + 832);
        if (v969)
          LOWORD(v969) = *(_WORD *)(v969 + 8);
        v407 = sub_1C5D56C70(a4, 98, (const llvm::APInt *)__src, v405, v1813, v1799, v406, v418, (uint64_t)v412, v414, v969);
        v406 = v406 & 0xFFFFFFFF00000000 | v970;
LABEL_583:
        if (v410 == 36 || v410 == 12)
        {
          v1803 = v406;
          v972 = *(_QWORD *)(v408 + 80);
          if (*(_UNKNOWN **)(v972 + 32) == &unk_1C866F1C0)
            v973 = *(_BYTE *)(*(_QWORD *)(v972 + 40) + 28);
          else
            v973 = *(_BYTE *)(v972 + 52);
          if ((v973 & 7) == 3)
          {
            v976 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, (_BOOL8)v405, v1813, 0, 0.0);
            v1783 = v977;
            v1791 = (uint64_t)v976;
            v978 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, (_BOOL8)v405, v1813, 0, NAN);
            v979 = v408;
            v980 = v409;
            v982 = v981;
            v983 = -INFINITY;
            if ((v973 & 8) == 0)
              v983 = INFINITY;
            v984 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, (_BOOL8)v405, v1813, 0, v983);
            v406 = v1803;
            v985 = v982;
            v409 = v980;
            v408 = v979;
            v988 = sub_1C47DF81C((_QWORD *)a4, (const llvm::APInt *)__src, (uint64_t)v407, v1803, v1791, v1783, (uint64_t)v978, v985, (uint64_t)v984, v986, v987, 9u);
          }
          else
          {
            v992 = sub_1C5D404C4(a4, (const llvm::APInt *)__src, (_BOOL8)v405, v1813, 0, 1.0);
            v994 = *(_QWORD *)(a4 + 832);
            if (v994)
              LOWORD(v994) = *(_WORD *)(v994 + 8);
            v406 = v1803;
            v988 = sub_1C5D56C70(a4, 99, (const llvm::APInt *)__src, v405, v1813, (uint64_t)v992, v991, v993, v408, v409, v994);
          }
        }
        else
        {
          v974 = *(_QWORD *)(a4 + 832);
          if (v974)
            v975 = *(_WORD *)(v974 + 8);
          else
            v975 = 0;
          v988 = sub_1C5D52060(a4, 423, (const llvm::APInt *)__src, v405, v1813, v408, v409, v975);
        }
        if (v405 == 9)
        {
          v995 = *(_QWORD *)(a4 + 832);
          if (v995)
            v996 = *(_WORD *)(v995 + 8);
          else
            v996 = 0;
          v1261 = sub_1C5D52060(a4, 215, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v407, v406, v996);
          v1263 = v1262;
          v1264 = 0;
          v1265 = *(_QWORD *)(a4 + 832);
          if (v1265)
            v1264 = *(_WORD *)(v1265 + 8);
          v1267 = sub_1C5D52060(a4, 215, (const llvm::APInt *)__src, (llvm *)0xA, 0, v408, v409, v1264);
          v1268 = 0;
          v1269 = *(_QWORD *)(a4 + 832);
          if (v1269)
            v1268 = *(_WORD *)(v1269 + 8);
          v1270 = sub_1C5D52060(a4, 423, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v1267, v1266, v1268);
          v1273 = sub_1C5D56C70(a4, 98, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v1261, v1263, v1272, (uint64_t)v1270, v1271, *((_WORD *)v8 + 36));
LABEL_885:
          v1436 = (uint64_t)v1273;
          v1437 = v1274;
          v1438 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
          v1441 = *(_QWORD *)(a4 + 832);
          if (v1441)
            LOWORD(v1441) = *(_WORD *)(v1441 + 8);
          v433 = sub_1C5D56C70(a4, 212, (const llvm::APInt *)__src, (llvm *)9, 0, v1436, v1437, v1440, (uint64_t)v1438, v1439, v1441);
        }
        else
        {
          v433 = sub_1C5D56C70(a4, 98, (const llvm::APInt *)__src, v405, v1813, (uint64_t)v407, v406, v990, (uint64_t)v988, v989, *((_WORD *)v8 + 36));
        }
        goto LABEL_604;
    }
  }
  if (*(unsigned __int16 *)(a2 + 24) <= 0x34u)
  {
    if (v10 == 13)
      return (uint64_t *)sub_1C47F4E30(a1, a2, a4);
    v140 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40) + 80);
    v141 = (_QWORD *)(v140 + 24);
    if (*(_DWORD *)(v140 + 32) >= 0x41u)
      v141 = (_QWORD *)*v141;
    v142 = *(_DWORD *)v141;
    if ((*(_DWORD *)v141 - 1282) >= 0x190)
      __asm { BR              X10 }
    v143 = *(_QWORD *)(a1 + 184296);
    if (*(_BYTE *)(v143 + 281))
    {
      v144 = 2;
    }
    else if (*(_BYTE *)(v143 + 282))
    {
      v144 = 3;
    }
    else
    {
      v144 = 1;
    }
    __src[0] = &v1841;
    __src[1] = (void *)0x200000000;
    llvm::GPUSDISel::ExpandIntrinsicSample(a2, a4, v142, (unsigned int *)__src, v144, (uint64_t (*)(uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1C47F4260, (void (*)(_OWORD *, uint64_t, uint64_t, void **, uint64_t (*)(_QWORD)))sub_1C480949C, 1, 33);
    v434 = __src[1];
    if (LODWORD(__src[1]) == 1)
    {
      v435 = (_QWORD **)__src[0];
      v4 = *(uint64_t **)__src[0];
    }
    else
    {
      v838 = (unsigned __int8 *)v8[8];
      *(_QWORD *)&v1849 = v838;
      if (v838)
      {
        llvm::MetadataTracking::track((uint64_t)&v1849, v838, 2);
        v434 = __src[1];
      }
      DWORD2(v1849) = *((_DWORD *)v8 + 15);
      v839 = v434;
      v840 = *(_QWORD *)(a4 + 832);
      if (v840)
        v841 = *(_WORD *)(v840 + 8);
      else
        v841 = 0;
      v4 = sub_1C636D410(a4, (const char *)0x37, (const llvm::APInt *)&v1849, v8[5], *((unsigned __int16 *)v8 + 29), (uint64_t *)__src[0], v839, v841);
      v1004 = (unsigned __int8 *)v1849;
      if ((_QWORD)v1849)
      {
        v1005 = &v1849;
LABEL_649:
        llvm::MetadataTracking::untrack((uint64_t)v1005, v1004);
      }
LABEL_650:
      v435 = (_QWORD **)__src[0];
    }
    if (v435 != &v1841)
      free(v435);
  }
  else
  {
    if (v10 != 53)
    {
      if (v10 != 58)
      {
        v130 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 184296) + 280);
        v131 = *(uint64_t **)(a2 + 32);
        v133 = *v131;
        v132 = v131[1];
        v135 = v131[5];
        v134 = v131[6];
        v136 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v1849 = v136;
        if (v136)
          llvm::MetadataTracking::track((uint64_t)&v1849, v136, 2);
        DWORD2(v1849) = *((_DWORD *)v8 + 15);
        if (v130
          || *(_BYTE *)(v8[5] + 16 * a3) != 5
          || (v137 = v8[4], *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v137 + 40) + 16 * *(unsigned int *)(v137 + 8)) != 5)
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v137 + 40) + 40) + 16 * *(unsigned int *)(v137 + 48)) != 5)
        {
          v138 = *(_QWORD *)(a4 + 832);
          if (v138)
            v139 = *(_WORD *)(v138 + 8);
          else
            v139 = 0;
          v508 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, v133, v132, v139);
          v509 = 0;
          v511 = v132 & 0xFFFFFFFF00000000 | v510;
          v512 = *(_QWORD *)(a4 + 832);
          if (v512)
            v509 = *(_WORD *)(v512 + 8);
          v513 = v132 & 0xFFFFFFFF00000000;
          v514 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, v135, v134, v509);
          v515 = 0;
          v517 = v134 & 0xFFFFFFFF00000000 | v516;
          v518 = *(_QWORD *)(a4 + 832);
          if (v518)
            v515 = *(_WORD *)(v518 + 8);
          v519 = v134 & 0xFFFFFFFF00000000;
          v520 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, (uint64_t)v508, v511, v515);
          v521 = 0;
          v523 = v522 | v513;
          v524 = *(_QWORD *)(a4 + 832);
          if (v524)
            v521 = *(_WORD *)(v524 + 8);
          v525 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, (uint64_t)v514, v517, v521);
          v527 = v526 | v519;
          v528 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
          v531 = 0;
          v532 = *(_QWORD *)(a4 + 832);
          if (v532)
            v531 = *(_WORD *)(v532 + 8);
          v533 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v520, v523, v530, (uint64_t)v528, v529, v531);
          v535 = v534;
          v536 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
          v539 = 0;
          v540 = *(_QWORD *)(a4 + 832);
          if (v540)
            v539 = *(_WORD *)(v540 + 8);
          v541 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v520, v523, v538, (uint64_t)v536, v537, v539);
          v543 = v542;
          v544 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
          v547 = 0;
          v548 = *(_QWORD *)(a4 + 832);
          if (v548)
            v547 = *(_WORD *)(v548 + 8);
          v549 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v525, v527, v546, (uint64_t)v544, v545, v547);
          v551 = v550;
          v552 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
          v555 = 0;
          v556 = *(_QWORD *)(a4 + 832);
          if (v556)
            v555 = *(_WORD *)(v556 + 8);
          v557 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v525, v527, v554, (uint64_t)v552, v553, v555);
          v1788 = v558;
          v1800 = (uint64_t)v557;
          v559 = 0;
          v560 = *(_QWORD *)(a4 + 832);
          if (v560)
            v559 = *(_WORD *)(v560 + 8);
          v1774 = v535;
          v1780 = (uint64_t)v533;
          v561 = sub_1C5D52060(a4, 199, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v533, v535, v559);
          v563 = v562;
          v564 = 0;
          v565 = *(_QWORD *)(a4 + 832);
          if (v565)
            v564 = *(_WORD *)(v565 + 8);
          v566 = sub_1C5D52060(a4, 199, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v549, v551, v564);
          v568 = v567;
          v569 = 0;
          v570 = *(_QWORD *)(a4 + 832);
          if (v570)
            v569 = *(_WORD *)(v570 + 8);
          v571 = sub_1C5D52060(a4, 198, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v541, v543, v569);
          v1815 = v572;
          v573 = 0;
          v574 = *(_QWORD *)(a4 + 832);
          if (v574)
            v573 = *(_WORD *)(v574 + 8);
          v575 = sub_1C5D52060(a4, 198, (const llvm::APInt *)&v1849, (llvm *)5, 0, v1800, v1788, v573);
          v1755 = v577;
          v1758 = (uint64_t)v575;
          v578 = 0;
          v579 = *(_QWORD *)(a4 + 832);
          if (v579)
            v578 = *(_WORD *)(v579 + 8);
          v581 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v561, v563, v576, (uint64_t)v566, v568, v578);
          v582 = 0;
          v583 = *(_QWORD *)(a4 + 832);
          if (v583)
            v582 = *(_WORD *)(v583 + 8);
          v1752 = v580;
          v584 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, (uint64_t)v581, v580, v582);
          v586 = v585;
          v587 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
          v590 = 0;
          v591 = *(_QWORD *)(a4 + 832);
          if (v591)
            v590 = *(_WORD *)(v591 + 8);
          v1765 = v563;
          v592 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v584, v586, v589, (uint64_t)v587, v588, v590);
          v1748 = v593;
          v1750 = (uint64_t)v592;
          v594 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
          v597 = 0;
          v598 = *(_QWORD *)(a4 + 832);
          if (v598)
            v597 = *(_WORD *)(v598 + 8);
          v1769 = (uint64_t)v561;
          v600 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v584, v586, v596, (uint64_t)v594, v595, v597);
          v602 = v601;
          v603 = 0;
          v604 = *(_QWORD *)(a4 + 832);
          if (v604)
            v603 = *(_WORD *)(v604 + 8);
          v605 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v571, v1815, v599, (uint64_t)v566, v568, v603);
          v607 = v606;
          v608 = 0;
          v609 = *(_QWORD *)(a4 + 832);
          if (v609)
            v608 = *(_WORD *)(v609 + 8);
          v610 = sub_1C5D52060(a4, 199, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v600, v602, v608);
          v613 = 0;
          v614 = *(_QWORD *)(a4 + 832);
          if (v614)
            v613 = *(_WORD *)(v614 + 8);
          v615 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v605, v607, v612, (uint64_t)v610, v611, v613);
          v616 = 0;
          v618 = v607 & 0xFFFFFFFF00000000 | v617;
          v619 = *(_QWORD *)(a4 + 832);
          if (v619)
            v616 = *(_WORD *)(v619 + 8);
          v620 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, (uint64_t)v615, v618, v616);
          v622 = v586 & 0xFFFFFFFF00000000 | v621;
          v623 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v1849, (llvm *)5, 0, 0, 0);
          v626 = 0;
          v627 = *(_QWORD *)(a4 + 832);
          if (v627)
            v626 = *(_WORD *)(v627 + 8);
          v1761 = (uint64_t)v571;
          v629 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v620, v622, v625, (uint64_t)v623, v624, v626);
          v631 = v630;
          v632 = 0;
          v633 = *(_QWORD *)(a4 + 832);
          if (v633)
            v632 = *(_WORD *)(v633 + 8);
          v634 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)&v1849, (llvm *)4, 0, v1780, v1774, v628, v1800, v1788, v632);
          v636 = 0;
          v637 = v602 & 0xFFFFFFFF00000000;
          v639 = v602 & 0xFFFFFFFF00000000 | v638;
          v640 = *(_QWORD *)(a4 + 832);
          if (v640)
            v636 = *(_WORD *)(v640 + 8);
          v641 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)&v1849, (llvm *)4, 0, (uint64_t)v634, v639, v635, (uint64_t)v629, v631, v636);
          v644 = 0;
          v645 = *(_QWORD *)(a4 + 832);
          if (v645)
            v644 = *(_WORD *)(v645 + 8);
          v647 = sub_1C5D56C70(a4, 146, (const llvm::APInt *)&v1849, (llvm *)0x26, 0, v1750, v1748, v643, (uint64_t)v641, v642 | v637, v644);
          v648 = 0;
          v649 = *(_QWORD *)(a4 + 832);
          if (v649)
            v648 = *(_WORD *)(v649 + 8);
          v650 = v607 & 0xFFFFFFFF00000000;
          v652 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v647, v1752 & 0xFFFFFFFF00000000 | v646, v648);
          v654 = v653;
          v655 = 0;
          v656 = *(_QWORD *)(a4 + 832);
          if (v656)
            v655 = *(_WORD *)(v656 + 8);
          v657 = v586 & 0xFFFFFFFF00000000;
          v659 = sub_1C5D58E08(a4, (const char *)0x1B2, (const llvm::APInt *)&v1849, (llvm *)5, 0, v1769, v1765, v651, v1758, v1755, (uint64_t)v615, v618, SHIDWORD(v618), v655);
          v660 = 0;
          v662 = v661 | v650;
          v663 = *(_QWORD *)(a4 + 832);
          if (v663)
            v660 = *(_WORD *)(v663 + 8);
          v664 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)&v1849, (llvm *)5, 0, v1761, v1815, v658, v1758, v1755, v660);
LABEL_527:
          v928 = 0;
          v929 = *(_QWORD *)(a4 + 832);
          if (v929)
            v928 = *(_WORD *)(v929 + 8);
          v930 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)&v1849, (llvm *)5, 0, (uint64_t)v659, v662, v666, (uint64_t)v664, v665 | v657, v928);
          v931 = 0;
          v932 = v8[5];
          v933 = *((unsigned __int16 *)v8 + 29);
          __src[0] = v652;
          LODWORD(__src[1]) = v654;
          v1841 = v930;
          LODWORD(v1842) = v934;
          v935 = *(_QWORD *)(a4 + 832);
          if (v935)
            v931 = *(_WORD *)(v935 + 8);
          v8 = sub_1C636D410(a4, (const char *)0x37, (const llvm::APInt *)&v1849, v932, v933, (uint64_t *)__src, 2, v931);
        }
        goto LABEL_532;
      }
      v11 = sub_1C47F38B8(a1, a2, a4, *(unsigned __int8 *)(*(_QWORD *)(a1 + 184296) + 281));
      if (!((unint64_t)v11 | v19))
      {
        v20 = *(unsigned __int8 *)(v8[5] + 16 * a3);
        if (v20 != 6)
        {
          if (v20 == 5)
          {
            v21 = (void *)v8[8];
            __src[0] = v21;
            if (!v21)
              return v8;
            llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v21, 2);
            v22 = (unsigned __int8 *)__src[0];
            LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
            if (!__src[0])
              return v8;
            goto LABEL_575;
          }
          return 0;
        }
        v451 = (void *)v8[8];
        __src[0] = v451;
        if (v451)
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v451, 2);
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        v452 = (uint64_t *)v8[4];
        v453 = *v452;
        v454 = v452[5];
        v455 = *(unsigned __int16 *)(*v452 + 24);
        v456 = *(unsigned __int16 *)(v454 + 24);
        if (v455 == 35 || v455 == 11)
          v458 = *v452;
        else
          v458 = 0;
        if (v456 != 35 && v456 != 11)
          v454 = 0;
        if (!v458)
        {
LABEL_552:
          if (!v454)
            goto LABEL_561;
          v948 = *(_QWORD *)(v454 + 80);
          v949 = *(_DWORD *)(v948 + 32);
          if (v949 > 0x40)
          {
            v454 = **(_QWORD **)(v948 + 24);
            if (HIDWORD(v454))
            {
              if (v454 > 0x7FFFFFFF)
                goto LABEL_556;
LABEL_560:
              LODWORD(v454) = v454 > (uint64_t)0xFFFFFFFF7FFFFFFFLL;
LABEL_561:
              if ((v455 & 0xFFFE) == 0xC6)
                v951 = 1;
              else
                v951 = v458;
              v952 = v454 ^ 1;
              if (v456 == 198)
                v952 = 0;
              if (v456 == 199)
                v953 = 0;
              else
                v953 = v952;
              if (v951 != 1 || v953 != 0)
              {
                v1405 = v452[1];
                v1406 = *(_QWORD *)(a4 + 832);
                if (v1406)
                  v1407 = *(_WORD *)(v1406 + 8);
                else
                  v1407 = 0;
                v1511 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x31, 0, v453, v1405, v1407);
                v1513 = v1512;
                v1514 = 0;
                v1515 = v8[4];
                v1516 = *(_QWORD *)(v1515 + 40);
                v1517 = *(_QWORD *)(v1515 + 48);
                v1518 = *(_QWORD *)(a4 + 832);
                if (v1518)
                  v1514 = *(_WORD *)(v1518 + 8);
                v1519 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x31, 0, v1516, v1517, v1514);
                v1521 = v1520;
                v1522 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
                v1525 = 0;
                v1526 = *(_QWORD *)(a4 + 832);
                if (v1526)
                  v1525 = *(_WORD *)(v1526 + 8);
                v1527 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1511, v1513, v1524, (uint64_t)v1522, v1523, v1525);
                v1529 = v1528;
                v1530 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
                v1533 = 0;
                v1534 = *(_QWORD *)(a4 + 832);
                if (v1534)
                  v1533 = *(_WORD *)(v1534 + 8);
                v1822 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1511, v1513, v1532, (uint64_t)v1530, v1531, v1533);
                v1536 = v1535;
                v1537 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
                v1540 = 0;
                v1541 = *(_QWORD *)(a4 + 832);
                if (v1541)
                  v1540 = *(_WORD *)(v1541 + 8);
                v1542 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1519, v1521, v1539, (uint64_t)v1537, v1538, v1540);
                v1544 = v1543;
                v1545 = sub_1C6366AB4(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
                v1548 = 0;
                v1549 = *(_QWORD *)(a4 + 832);
                if (v1549)
                  v1548 = *(_WORD *)(v1549 + 8);
                v1550 = sub_1C5D56C70(a4, 437, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1519, v1521, v1547, (uint64_t)v1545, v1546, v1548);
                v1552 = v1551;
                v1553 = sub_1C636A8B4(a4, 5, 0, 5, 0);
                v1557 = sub_1C636D6B4(a4, (const char *)0x40, (const llvm::APInt *)__src, v1553, v1554, (uint64_t)v1527, v1529, v1555, (uint64_t)v1542, v1544);
                v1559 = v1558;
                v1560 = *(_QWORD *)(a4 + 832);
                if (v1560)
                  LOWORD(v1560) = *(_WORD *)(v1560 + 8);
                v1562 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1527, v1529, v1556, (uint64_t)v1550, v1552, v1560);
                v1564 = v1552 & 0xFFFFFFFF00000000 | v1563;
                v1565 = *(_QWORD *)(a4 + 832);
                if (v1565)
                  LOWORD(v1565) = *(_WORD *)(v1565 + 8);
                v1567 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1822, v1536, v1561, (uint64_t)v1542, v1544, v1565);
                v1569 = v1536 & 0xFFFFFFFF00000000 | v1568;
                v1570 = *(_QWORD *)(a4 + 832);
                if (v1570)
                  LOWORD(v1570) = *(_WORD *)(v1570 + 8);
                v1572 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1557, 1uLL, v1566, (uint64_t)v1562, v1564, v1570);
                v1574 = *(_QWORD *)(a4 + 832);
                if (v1574)
                  LOWORD(v1574) = *(_WORD *)(v1574 + 8);
                v1575 = sub_1C5D56C70(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1572, v1571, v1573, (uint64_t)v1567, v1569, v1574);
                v1578 = *(_QWORD *)(a4 + 832);
                if (v1578)
                  LOWORD(v1578) = *(_WORD *)(v1578 + 8);
                v1580 = sub_1C5D56C70(a4, 146, (const llvm::APInt *)__src, (llvm *)0x31, 0, (uint64_t)v1557, v1559, v1577, (uint64_t)v1575, v1576, v1578);
                v1581 = *(_QWORD *)(a4 + 832);
                if (v1581)
                  v1582 = *(_WORD *)(v1581 + 8);
                else
                  v1582 = 0;
                v8 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)6, 0, (uint64_t)v1580, v1579, v1582);
              }
              v22 = (unsigned __int8 *)__src[0];
              if (!__src[0])
                return v8;
LABEL_575:
              v936 = __src;
              goto LABEL_534;
            }
          }
          else
          {
            v950 = *(_QWORD *)(v948 + 24);
            if (HIDWORD(v950))
            {
              v454 = (uint64_t)(v950 << -(char)v949) >> -(char)v949;
              if (v454 >= 0x80000000)
              {
LABEL_556:
                LODWORD(v454) = 0;
                goto LABEL_561;
              }
              goto LABEL_560;
            }
          }
          LODWORD(v454) = 1;
          goto LABEL_561;
        }
        v460 = *(_QWORD *)(v458 + 80);
        v461 = *(_DWORD *)(v460 + 32);
        if (v461 > 0x40)
        {
          v458 = **(_QWORD **)(v460 + 24);
          if (HIDWORD(v458))
          {
            if (v458 > 0x7FFFFFFF)
              goto LABEL_291;
LABEL_551:
            LODWORD(v458) = v458 > (uint64_t)0xFFFFFFFF7FFFFFFFLL;
            goto LABEL_552;
          }
        }
        else
        {
          v462 = *(_QWORD *)(v460 + 24);
          if (HIDWORD(v462))
          {
            v458 = (uint64_t)(v462 << -(char)v461) >> -(char)v461;
            if (v458 >= 0x80000000)
            {
LABEL_291:
              LODWORD(v458) = 0;
              goto LABEL_552;
            }
            goto LABEL_551;
          }
        }
        LODWORD(v458) = 1;
        goto LABEL_552;
      }
      return v11;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 280))
      return 0;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 40) + 16 * a3) != 5)
      return 0;
    v124 = *(unsigned int **)(a2 + 32);
    v125 = *(_QWORD *)v124;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v124 + 40) + 16 * v124[2]) != 6)
      return 0;
    v126 = *(void **)(a2 + 64);
    __src[0] = v126;
    if (v126)
    {
      llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v126, 2);
      v124 = (unsigned int *)v8[4];
      v125 = *(_QWORD *)v124;
    }
    LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
    v127 = *((_QWORD *)v124 + 1);
    v128 = *(_QWORD *)(a4 + 832);
    if (v128)
      v129 = *(_WORD *)(v128 + 8);
    else
      v129 = 0;
    v921 = sub_1C5D52060(a4, 216, (const llvm::APInt *)__src, (llvm *)0x31, 0, v125, v127, v129);
    v923 = v8[4];
    v924 = *(_QWORD *)(v923 + 40);
    v925 = *(_QWORD *)(v923 + 48);
    v926 = *(_QWORD *)(a4 + 832);
    if (v926)
      LOWORD(v926) = *(_WORD *)(v926 + 8);
    v433 = sub_1C5D56C70(a4, 148, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v921, v920, v922, v924, v925, v926);
LABEL_604:
    v4 = v433;
LABEL_605:
    v506 = (unsigned __int8 *)__src[0];
    if (__src[0])
    {
      v507 = __src;
      goto LABEL_607;
    }
  }
  return v4;
}

uint64_t *sub_1C4815A8C(uint64_t a1, const llvm::APInt *a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  unsigned __int8 *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;

  v16 = (unsigned __int8 *)(*(_QWORD *)(a5 + 40) + 16 * a6);
  if (*v16)
    v17 = *v16 - 15 < 0x9C;
  else
    v17 = (*(_DWORD *)(*((_QWORD *)v16 + 1) + 8) & 0xFE) == 18;
  v18 = *(_QWORD *)(a1 + 832);
  if (v18)
    LOWORD(v18) = *(_WORD *)(v18 + 8);
  if (v17)
    v19 = 191;
  else
    v19 = 190;
  return sub_1C5D58E08(a1, (const char *)v19, a2, a3, a4, a5, a6, a8, a7, a8, a9, a10, a11, v18);
}

unint64_t sub_1C4815B1C(llvm::EVT *a1, llvm::LLVMContext *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t ExtendedIntegerVT;

  if ((int)a2 <= 31)
  {
    switch((_DWORD)a2)
    {
      case 1:
        v2 = 0;
        v3 = 2;
        return v3 | v2;
      case 0x10:
        v2 = 0;
        v3 = 4;
        return v3 | v2;
      case 8:
        v2 = 0;
        v3 = 3;
        return v3 | v2;
    }
LABEL_15:
    ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(a1, a2);
    v2 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
    v3 = ExtendedIntegerVT;
    return v3 | v2;
  }
  if ((_DWORD)a2 != 32)
  {
    if ((_DWORD)a2 == 64)
    {
      v2 = 0;
      v3 = 6;
      return v3 | v2;
    }
    if ((_DWORD)a2 == 128)
    {
      v2 = 0;
      v3 = 7;
      return v3 | v2;
    }
    goto LABEL_15;
  }
  v2 = 0;
  v3 = 5;
  return v3 | v2;
}

uint64_t *sub_1C4815BD4(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unsigned int ExtendedSizeInBits;
  const char *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int16 v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  int v30;
  int v31;
  __int128 v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  int v69;
  int v70;
  __int128 v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  _QWORD *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  llvm *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  llvm *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  _QWORD *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  llvm *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t *v110;
  int v111;
  _QWORD *v112;
  int v113;
  uint64_t v114;
  llvm *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  unsigned int v123;
  uint64_t *v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t *v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  unsigned __int8 *v140;
  int v141;
  __int128 v142;
  __int128 v143;
  uint64_t *v144;
  int v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v142 = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * a2);
  if ((_BYTE)v142)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v142);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v142);
  v7 = ExtendedSizeInBits;
  if ((_DWORD)v6 == 1)
  v8 = *(unsigned __int8 **)(a1 + 64);
  v140 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v140, v8, 2);
  v141 = *(_DWORD *)(a1 + 60);
  v9 = *(uint64_t **)(a1 + 32);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[6];
  v139 = v9[10];
  v136 = v9[5];
  v138 = v9[11];
  v143 = *(_OWORD *)(*(_QWORD *)(v139 + 40) + 16 * v138);
  if ((_BYTE)v143)
    v13 = sub_1C47A8C74((unsigned __int8 *)&v143);
  else
    v13 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v143);
  v15 = v13;
  if ((_DWORD)v14 == 1)
  v16 = v7;
  v123 = v7;
  if (v15 >= v7)
  {
    v143 = *(_OWORD *)(*(_QWORD *)(v139 + 40) + 16 * v138);
    if ((_BYTE)v143)
      v22 = sub_1C47A8C74((unsigned __int8 *)&v143);
    else
      v22 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v143);
    v26 = v22;
    if ((_DWORD)v23 == 1)
    if (v26 <= v7)
    {
      v20 = v12;
      goto LABEL_30;
    }
    v18 = *((_QWORD *)&v142 + 1);
    v17 = (llvm *)v142;
    v27 = a3[104];
    v20 = v12;
    if (v27)
      v21 = *(_WORD *)(v27 + 8);
    else
      v21 = 0;
    v24 = (uint64_t)a3;
    v25 = 201;
  }
  else
  {
    v18 = *((_QWORD *)&v142 + 1);
    v17 = (llvm *)v142;
    v19 = a3[104];
    v20 = v12;
    if (v19)
      v21 = *(_WORD *)(v19 + 8);
    else
      v21 = 0;
    v24 = (uint64_t)a3;
    v25 = 199;
  }
  v28 = sub_1C5D52060(v24, v25, (const llvm::APInt *)&v140, v17, v18, v139, v138, v21);
  v138 = v138 & 0xFFFFFFFF00000000 | v29;
  v139 = (uint64_t)v28;
LABEL_30:
  v30 = *(unsigned __int16 *)(a1 + 24);
  if (v30 == 196)
    v31 = 176;
  else
    v31 = 177;
  v128 = v31;
  v32 = v142;
  v34 = sub_1C6366AB4((uint64_t)a3, v16, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), 0, 0);
  v36 = a3[104];
  if (v36)
    LOWORD(v36) = *(_WORD *)(v36 + 8);
  v37 = v20;
  v39 = sub_1C5D56C70((uint64_t)a3, 57, (const llvm::APInt *)&v140, (llvm *)v32, *((uint64_t *)&v32 + 1), (uint64_t)v34, v33, v35, v139, v138, v36);
  v41 = v40;
  v42 = a3[104];
  if (v42)
    LOWORD(v42) = *(_WORD *)(v42 + 8);
  v134 = v11;
  v135 = v10;
  v43 = sub_1C5D56C70((uint64_t)a3, 177, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), v10, v11, v38, v139, v138, v42);
  v45 = v44;
  v46 = v142;
  v47 = sub_1C6366AB4((uint64_t)a3, v16, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), 0, 0);
  v50 = a3[104];
  if (v50)
    LOWORD(v50) = *(_WORD *)(v50 + 8);
  v52 = sub_1C5D56C70((uint64_t)a3, 57, (const llvm::APInt *)&v140, (llvm *)v46, *((uint64_t *)&v46 + 1), v139, v138, v49, (uint64_t)v47, v48, v50);
  v54 = v53;
  v55 = a3[104];
  if (v55)
    LOWORD(v55) = *(_WORD *)(v55 + 8);
  v56 = sub_1C5D56C70((uint64_t)a3, 175, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), v136, v37, v51, (uint64_t)v39, v41, v55);
  v59 = a3[104];
  if (v59)
    LOWORD(v59) = *(_WORD *)(v59 + 8);
  v60 = sub_1C5D56C70((uint64_t)a3, 172, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), (uint64_t)v43, v45, v58, (uint64_t)v56, v57, v59);
  v126 = v62;
  v127 = (uint64_t)v60;
  v63 = a3[104];
  if (v63)
    LOWORD(v63) = *(_WORD *)(v63 + 8);
  v64 = v128;
  v129 = sub_1C5D56C70((uint64_t)a3, v128, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), v136, v37, v61, (uint64_t)v52, v54, v63);
  v130 = v54;
  v125 = v66;
  v67 = a3[104];
  v132 = (uint64_t)v52;
  if (v67)
    LOWORD(v67) = *(_WORD *)(v67 + 8);
  v68 = sub_1C5D56C70((uint64_t)a3, v64, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), v136, v37, v65, v139, v138, v67);
  v70 = v69;
  v71 = v142;
  if (v30 == 196)
  {
    v72 = sub_1C6366AB4((uint64_t)a3, v123 - 1, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), 0, 0);
    v75 = a3[104];
    if (v75)
      LOWORD(v75) = *(_WORD *)(v75 + 8);
    v76 = sub_1C5D56C70((uint64_t)a3, 176, (const llvm::APInt *)&v140, (llvm *)v71, *((uint64_t *)&v71 + 1), v136, v37, v74, (uint64_t)v72, v73, v75);
  }
  else
  {
    v76 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), 0, 0);
  }
  v78 = (uint64_t)v76;
  v79 = v77;
  v80 = v77;
  v81 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), 0, 0);
  v83 = v82;
  v84 = *(_QWORD *)(v78 + 40) + 16 * v79;
  v86 = *(llvm **)v84;
  v85 = *(_QWORD *)(v84 + 8);
  v87 = sub_1C6367818(a3, 0x13u);
  v124 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v140, v86, v85, v132, v130, v89, (uint64_t)v81, v83, v78, v80, (uint64_t)v68, v70, v87, v88);
  v91 = v90;
  v92 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), 0, 0);
  LODWORD(v78) = v93;
  v94 = v129[5] + 16 * v125;
  v95 = *(llvm **)v94;
  v96 = *(_QWORD *)(v94 + 8);
  v97 = sub_1C6367818(a3, 0x13u);
  v100 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v140, v95, v96, v132, v130, v99, (uint64_t)v92, v78, (uint64_t)v129, v125, v127, v126, v97, v98);
  v131 = v101;
  v133 = (uint64_t)v100;
  v102 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), 0, 0);
  LODWORD(v96) = v103;
  v104 = *(_QWORD *)(v136 + 40) + 16 * v37;
  v106 = *(llvm **)v104;
  v105 = *(_QWORD *)(v104 + 8);
  v107 = sub_1C6367818(a3, 0x11u);
  v110 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v140, v106, v105, v139, v138, v109, (uint64_t)v102, v96, v136, v37, (uint64_t)v124, v91, v107, v108);
  v137 = v111;
  v112 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v140, (llvm *)v142, *((uint64_t *)&v142 + 1), 0, 0);
  LODWORD(v102) = v113;
  v114 = *(_QWORD *)(v135 + 40) + 16 * v134;
  v115 = *(llvm **)v114;
  v116 = *(_QWORD *)(v114 + 8);
  v117 = sub_1C6367818(a3, 0x11u);
  *(_QWORD *)&v143 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v140, v115, v116, v139, v138, v119, (uint64_t)v112, (int)v102, v135, v134, v133, v131, v117, v118);
  DWORD2(v143) = v120;
  v144 = v110;
  v145 = v137;
  v121 = sub_1C5D5C56C((uint64_t)a3, (uint64_t *)&v143, 2uLL, (const llvm::APInt *)&v140);
  if (v140)
    llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
  return v121;
}

uint64_t *sub_1C48162AC(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unsigned int ExtendedSizeInBits;
  const char *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  unint64_t v18;
  llvm *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  __int128 v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  int v65;
  _QWORD *v66;
  unsigned int v67;
  unsigned int v68;
  _QWORD *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  llvm *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  llvm *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  _QWORD *v89;
  int v90;
  uint64_t v91;
  llvm *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  int v98;
  _QWORD *v99;
  int v100;
  uint64_t v101;
  llvm *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t *v108;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t *v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  unsigned __int8 *v125;
  int v126;
  __int128 v127;
  __int128 v128;
  uint64_t *v129;
  int v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v127 = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * a2);
  if ((_BYTE)v127)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v127);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v127);
  v7 = ExtendedSizeInBits;
  if ((_DWORD)v6 == 1)
  v8 = *(unsigned __int8 **)(a1 + 64);
  v125 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v125, v8, 2);
  v126 = *(_DWORD *)(a1 + 60);
  v9 = *(uint64_t **)(a1 + 32);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[5];
  v123 = v9[6];
  v13 = (uint64_t *)v9[10];
  v14 = v9[11];
  v128 = *(_OWORD *)(v13[5] + 16 * v14);
  if ((_BYTE)v128)
    v15 = sub_1C47A8C74((unsigned __int8 *)&v128);
  else
    v15 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v128);
  v17 = v15;
  if ((_DWORD)v16 == 1)
  v18 = v7;
  if (v17 < v7)
  {
    v20 = *((_QWORD *)&v127 + 1);
    v19 = (llvm *)v127;
    v21 = a3[104];
    if (v21)
      v22 = *(_WORD *)(v21 + 8);
    else
      v22 = 0;
    v25 = (uint64_t)a3;
    v26 = 199;
LABEL_28:
    v13 = sub_1C5D52060(v25, v26, (const llvm::APInt *)&v125, v19, v20, (uint64_t)v13, v14, v22);
    v14 = v14 & 0xFFFFFFFF00000000 | v29;
    goto LABEL_29;
  }
  v128 = *(_OWORD *)(v13[5] + 16 * v14);
  if ((_BYTE)v128)
    v23 = sub_1C47A8C74((unsigned __int8 *)&v128);
  else
    v23 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v128);
  v27 = v23;
  if ((_DWORD)v24 == 1)
  if (v27 > v18)
  {
    v20 = *((_QWORD *)&v127 + 1);
    v19 = (llvm *)v127;
    v28 = a3[104];
    if (v28)
      v22 = *(_WORD *)(v28 + 8);
    else
      v22 = 0;
    v25 = (uint64_t)a3;
    v26 = 201;
    goto LABEL_28;
  }
LABEL_29:
  v30 = v127;
  v32 = sub_1C6366AB4((uint64_t)a3, v18, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), 0, 0);
  v34 = a3[104];
  if (v34)
    LOWORD(v34) = *(_WORD *)(v34 + 8);
  v35 = sub_1C5D56C70((uint64_t)a3, 57, (const llvm::APInt *)&v125, (llvm *)v30, *((uint64_t *)&v30 + 1), (uint64_t)v32, v31, v33, (uint64_t)v13, v14, v34);
  v38 = a3[104];
  if (v38)
    LOWORD(v38) = *(_WORD *)(v38 + 8);
  v39 = sub_1C5D56C70((uint64_t)a3, 177, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), v10, v11, v37, (uint64_t)v35, v36, v38);
  v117 = v40;
  v41 = v127;
  v42 = sub_1C6366AB4((uint64_t)a3, v18, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), 0, 0);
  v45 = a3[104];
  if (v45)
    LOWORD(v45) = *(_WORD *)(v45 + 8);
  v47 = sub_1C5D56C70((uint64_t)a3, 57, (const llvm::APInt *)&v125, (llvm *)v41, *((uint64_t *)&v41 + 1), (uint64_t)v13, v14, v44, (uint64_t)v42, v43, v45);
  v122 = v48;
  v49 = a3[104];
  if (v49)
    LOWORD(v49) = *(_WORD *)(v49 + 8);
  v51 = sub_1C5D56C70((uint64_t)a3, 175, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), v12, v123, v46, (uint64_t)v13, v14, v49);
  v53 = v52;
  v54 = a3[104];
  if (v54)
    LOWORD(v54) = *(_WORD *)(v54 + 8);
  v55 = sub_1C5D56C70((uint64_t)a3, 175, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), v10, v11, v50, (uint64_t)v47, v122, v54);
  v119 = v57;
  v120 = (uint64_t)v55;
  v58 = a3[104];
  if (v58)
    LOWORD(v58) = *(_WORD *)(v58 + 8);
  v59 = sub_1C5D56C70((uint64_t)a3, 172, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), (uint64_t)v39, v117, v56, (uint64_t)v51, v53, v58);
  v114 = v61;
  v115 = (uint64_t)v59;
  v62 = a3[104];
  v121 = (uint64_t)v47;
  if (v62)
    LOWORD(v62) = *(_WORD *)(v62 + 8);
  v63 = sub_1C5D56C70((uint64_t)a3, 175, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), v10, v11, v60, (uint64_t)v13, v14, v62);
  v65 = v64;
  v66 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), 0, 0);
  v68 = v67;
  v112 = (uint64_t)v13;
  v69 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), 0, 0);
  v110 = v14;
  v116 = v11;
  v118 = v10;
  v71 = v70;
  v72 = v66[5] + 16 * v68;
  v74 = *(llvm **)v72;
  v73 = *(_QWORD *)(v72 + 8);
  v75 = sub_1C6367818(a3, 0x13u);
  v113 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v125, v74, v73, v121, v122, v77, (uint64_t)v69, v71, (uint64_t)v66, v68, (uint64_t)v63, v65, v75, v76);
  v111 = v78;
  v79 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), 0, 0);
  LODWORD(v73) = v80;
  v81 = *(_QWORD *)(v120 + 40) + 16 * v119;
  v82 = *(llvm **)v81;
  v83 = *(_QWORD *)(v81 + 8);
  v84 = sub_1C6367818(a3, 0x13u);
  v87 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v125, v82, v83, v121, v122, v86, (uint64_t)v79, v73, v120, v119, v115, v114, v84, v85);
  LODWORD(v73) = v88;
  v89 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), 0, 0);
  LODWORD(v83) = v90;
  v91 = *(_QWORD *)(v12 + 40) + 16 * v123;
  v92 = *(llvm **)v91;
  v93 = *(_QWORD *)(v91 + 8);
  v94 = sub_1C6367818(a3, 0x11u);
  v97 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v125, v92, v93, v112, v110, v96, (uint64_t)v89, v83, v12, v123, (uint64_t)v87, v73, v94, v95);
  v124 = v98;
  v99 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v125, (llvm *)v127, *((uint64_t *)&v127 + 1), 0, 0);
  LODWORD(v83) = v100;
  v101 = *(_QWORD *)(v118 + 40) + 16 * v116;
  v102 = *(llvm **)v101;
  v103 = *(_QWORD *)(v101 + 8);
  v104 = sub_1C6367818(a3, 0x11u);
  *(_QWORD *)&v128 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v125, v102, v103, v112, v110, v106, (uint64_t)v99, v83, v118, v116, (uint64_t)v113, v111, v104, v105);
  DWORD2(v128) = v107;
  v129 = v97;
  v130 = v124;
  v108 = sub_1C5D5C56C((uint64_t)a3, (uint64_t *)&v128, 2uLL, (const llvm::APInt *)&v125);
  if (v125)
    llvm::MetadataTracking::untrack((uint64_t)&v125, v125);
  return v108;
}

uint64_t sub_1C48168D4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  int v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  if (a3 <= 3)
  {
    LODWORD(v4) = a3;
    while (1)
    {
      if (!(_DWORD)v4)
      {
        result = sub_1C4825D40(a1, a2, 0);
        if (!(_DWORD)result)
          return result;
      }
      v6 = *(unsigned __int16 *)(a1 + 24);
      if (v6 == 36 || v6 == 12)
      {
        v8 = *(_QWORD *)(a1 + 80);
        if (*(_UNKNOWN **)(v8 + 32) == &unk_1C866F1C0)
        {
          v9 = *(_BYTE *)(*(_QWORD *)(v8 + 40) + 28);
          if ((v9 & 8) != 0)
            goto LABEL_18;
        }
        else
        {
          v9 = *(_BYTE *)(v8 + 52);
          if ((v9 & 8) != 0)
            goto LABEL_18;
        }
        if ((v9 & 7) != 3)
        {
          if (!sub_1C4773C58(v8 + 24))
            return 1;
          v6 = *(unsigned __int16 *)(a1 + 24);
        }
      }
LABEL_18:
      if (v6 == 141)
      {
        v13 = *(_QWORD *)(a1 + 32);
        v11 = (uint64_t *)(v13 + 80);
        v12 = (uint64_t *)(v13 + 88);
        LODWORD(v4) = v4 + 1;
      }
      else
      {
        if (v6 != 96)
          return 0;
        v4 = (v4 + 1);
        if ((sub_1C48168D4(**(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v4) & 1) != 0)
          return 1;
        v10 = *(_QWORD *)(a1 + 32);
        v11 = (uint64_t *)(v10 + 40);
        v12 = (uint64_t *)(v10 + 48);
      }
      a2 = *v12;
      a1 = *v11;
      if (v4 > 3)
        return 0;
    }
  }
  return 0;
}

_WORD *sub_1C48169E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _WORD *result;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;

  result = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 1968))(a1, a2, 0);
  if (result)
  {
    v6 = result;
    v7 = (unsigned __int16)result[29];
    if (result[29])
    {
      if ((_DWORD)v7 == 1)
      {
        v8 = v5;
        v9 = *(unsigned int *)(a3 + 8);
        if (v9 >= *(_DWORD *)(a3 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 16);
          LODWORD(v9) = *(_DWORD *)(a3 + 8);
        }
        v10 = (_QWORD *)(*(_QWORD *)a3 + 16 * v9);
        *v10 = v6;
        v10[1] = v8;
        ++*(_DWORD *)(a3 + 8);
      }
      else
      {
        v11 = 0;
        v12 = *(_DWORD *)(a3 + 8);
        do
        {
          if (v12 >= *(_DWORD *)(a3 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 16);
            v12 = *(_DWORD *)(a3 + 8);
          }
          v13 = (_QWORD *)(*(_QWORD *)a3 + 16 * v12);
          *v13 = v6;
          v13[1] = v11;
          v12 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v12;
          ++v11;
        }
        while (v7 != v11);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C4816AD8(llvm::raw_ostream *a1, char *__s)
{
  size_t v4;
  void *v5;

  if (__s)
  {
    v4 = strlen(__s);
    v5 = (void *)*((_QWORD *)a1 + 4);
    if (v4 <= *((_QWORD *)a1 + 3) - (_QWORD)v5)
    {
      if (v4)
      {
        memcpy(v5, __s, v4);
        *((_QWORD *)a1 + 4) += v4;
      }
    }
    else
    {
      llvm::raw_ostream::write(a1, __s, v4);
    }
  }
  return a1;
}

uint64_t sub_1C4816B54(uint64_t a1, uint64_t a2, llvm::LLVMContext ***a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  const char *v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  llvm::LLVMContext *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  const char *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  const char *v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  llvm::LLVMContext *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  const char *v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  const char *v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE v64[32];
  unsigned int v65;

  v5 = 0;
  switch(a5)
  {
    case 1282:
    case 1285:
    case 1286:
    case 1289:
    case 1290:
    case 1293:
    case 1294:
    case 1297:
    case 1298:
    case 1301:
    case 1302:
    case 1305:
    case 1306:
    case 1309:
    case 1310:
    case 1313:
    case 1314:
    case 1317:
    case 1318:
    case 1321:
    case 1322:
    case 1325:
    case 1326:
    case 1329:
    case 1330:
    case 1333:
    case 1334:
    case 1337:
    case 1338:
    case 1341:
    case 1342:
    case 1345:
    case 1346:
    case 1349:
    case 1350:
    case 1353:
    case 1354:
    case 1357:
    case 1358:
    case 1361:
    case 1362:
    case 1365:
    case 1366:
    case 1369:
    case 1370:
    case 1373:
    case 1374:
    case 1376:
    case 1378:
    case 1380:
    case 1382:
    case 1384:
    case 1386:
    case 1388:
    case 1390:
    case 1393:
    case 1394:
    case 1397:
    case 1398:
    case 1401:
    case 1402:
    case 1405:
    case 1406:
    case 1409:
    case 1410:
    case 1413:
    case 1414:
    case 1417:
    case 1418:
    case 1421:
    case 1422:
    case 1425:
    case 1426:
    case 1429:
    case 1430:
    case 1433:
    case 1434:
    case 1437:
    case 1438:
    case 1441:
    case 1442:
    case 1445:
    case 1446:
    case 1449:
    case 1450:
    case 1453:
    case 1454:
    case 1457:
    case 1458:
    case 1461:
    case 1462:
    case 1465:
    case 1466:
    case 1469:
    case 1470:
    case 1473:
    case 1474:
    case 1476:
    case 1478:
    case 1480:
    case 1482:
    case 1484:
    case 1486:
    case 1488:
    case 1490:
    case 1493:
    case 1494:
    case 1497:
    case 1498:
    case 1501:
    case 1502:
    case 1505:
    case 1506:
    case 1509:
    case 1510:
    case 1513:
    case 1514:
    case 1517:
    case 1518:
    case 1521:
    case 1522:
    case 1525:
    case 1526:
    case 1529:
    case 1530:
    case 1532:
    case 1534:
    case 1536:
    case 1538:
    case 1540:
    case 1542:
    case 1544:
    case 1546:
    case 1548:
    case 1550:
    case 1552:
    case 1554:
    case 1557:
    case 1558:
    case 1561:
    case 1562:
    case 1565:
    case 1566:
    case 1569:
    case 1570:
    case 1573:
    case 1574:
    case 1576:
    case 1578:
    case 1580:
    case 1582:
    case 1585:
    case 1586:
    case 1589:
    case 1590:
    case 1593:
    case 1594:
    case 1596:
    case 1598:
    case 1600:
    case 1602:
    case 1605:
    case 1606:
    case 1609:
    case 1610:
    case 1613:
    case 1614:
    case 1617:
    case 1618:
    case 1621:
    case 1622:
    case 1625:
    case 1626:
    case 1629:
    case 1630:
    case 1633:
    case 1634:
    case 1637:
    case 1638:
    case 1640:
    case 1642:
    case 1644:
    case 1646:
    case 1649:
    case 1650:
    case 1653:
    case 1654:
    case 1657:
    case 1658:
    case 1661:
    case 1662:
    case 1665:
    case 1666:
    case 1669:
    case 1670:
    case 1673:
    case 1674:
    case 1676:
    case 1678:
    case 1680:
      v9 = *((_QWORD *)a3[5][7] + 5) + 272;
      *(_DWORD *)a2 = 47;
      v10 = (uint64_t)*a3;
      sub_1C4768AD0(v9, (uint64_t)*a3);
      v12 = (unint64_t)(v11 + 7) >> 3;
      v14 = v13 == 1;
      llvm::DataLayout::getAlignment(v9, v10);
      v17 = ((1 << v16) + 0x3FFFFFFFFLL + v12) & -(1 << v16);
      if (v14)
      v18 = v17 >> 2;
      v19 = **a3;
      v20 = 10;
      goto LABEL_8;
    case 1283:
    case 1284:
    case 1287:
    case 1288:
    case 1291:
    case 1292:
    case 1295:
    case 1296:
    case 1299:
    case 1300:
    case 1303:
    case 1304:
    case 1307:
    case 1308:
    case 1311:
    case 1312:
    case 1315:
    case 1316:
    case 1319:
    case 1320:
    case 1323:
    case 1324:
    case 1327:
    case 1328:
    case 1331:
    case 1332:
    case 1335:
    case 1336:
    case 1339:
    case 1340:
    case 1343:
    case 1344:
    case 1347:
    case 1348:
    case 1351:
    case 1352:
    case 1355:
    case 1356:
    case 1359:
    case 1360:
    case 1363:
    case 1364:
    case 1367:
    case 1368:
    case 1371:
    case 1372:
    case 1375:
    case 1377:
    case 1379:
    case 1381:
    case 1383:
    case 1385:
    case 1387:
    case 1389:
    case 1391:
    case 1392:
    case 1395:
    case 1396:
    case 1399:
    case 1400:
    case 1403:
    case 1404:
    case 1407:
    case 1408:
    case 1411:
    case 1412:
    case 1415:
    case 1416:
    case 1419:
    case 1420:
    case 1423:
    case 1424:
    case 1427:
    case 1428:
    case 1431:
    case 1432:
    case 1435:
    case 1436:
    case 1439:
    case 1440:
    case 1443:
    case 1444:
    case 1447:
    case 1448:
    case 1451:
    case 1452:
    case 1455:
    case 1456:
    case 1459:
    case 1460:
    case 1463:
    case 1464:
    case 1467:
    case 1468:
    case 1471:
    case 1472:
    case 1475:
    case 1477:
    case 1479:
    case 1481:
    case 1483:
    case 1485:
    case 1487:
    case 1489:
    case 1491:
    case 1492:
    case 1495:
    case 1496:
    case 1499:
    case 1500:
    case 1503:
    case 1504:
    case 1507:
    case 1508:
    case 1511:
    case 1512:
    case 1515:
    case 1516:
    case 1519:
    case 1520:
    case 1523:
    case 1524:
    case 1527:
    case 1528:
    case 1531:
    case 1533:
    case 1535:
    case 1537:
    case 1539:
    case 1541:
    case 1543:
    case 1545:
    case 1547:
    case 1549:
    case 1551:
    case 1553:
    case 1555:
    case 1556:
    case 1559:
    case 1560:
    case 1563:
    case 1564:
    case 1567:
    case 1568:
    case 1571:
    case 1572:
    case 1575:
    case 1577:
    case 1579:
    case 1581:
    case 1583:
    case 1584:
    case 1587:
    case 1588:
    case 1591:
    case 1592:
    case 1595:
    case 1597:
    case 1599:
    case 1601:
    case 1603:
    case 1604:
    case 1607:
    case 1608:
    case 1611:
    case 1612:
    case 1615:
    case 1616:
    case 1619:
    case 1620:
    case 1623:
    case 1624:
    case 1627:
    case 1628:
    case 1631:
    case 1632:
    case 1635:
    case 1636:
    case 1639:
    case 1641:
    case 1643:
    case 1645:
    case 1647:
    case 1648:
    case 1651:
    case 1652:
    case 1655:
    case 1656:
    case 1659:
    case 1660:
    case 1663:
    case 1664:
    case 1667:
    case 1668:
    case 1671:
    case 1672:
    case 1675:
    case 1677:
    case 1679:
    case 1681:
      v21 = *((_QWORD *)a3[5][7] + 5) + 272;
      *(_DWORD *)a2 = 47;
      v22 = (uint64_t)*a3;
      sub_1C4768AD0(v21, (uint64_t)*a3);
      v24 = (unint64_t)(v23 + 7) >> 3;
      v26 = v25 == 1;
      llvm::DataLayout::getAlignment(v21, v22);
      v29 = ((1 << v28) + 0x1FFFFFFFFLL + v24) & -(1 << v28);
      if (v26)
      v18 = v29 >> 1;
      v19 = **a3;
      v20 = 9;
LABEL_8:
      *(_QWORD *)(a2 + 8) = sub_1C4816F98(v19, v20, 0, v18, 0);
      *(_QWORD *)(a2 + 16) = v30;
      llvm::SampleInfo::SampleInfo((uint64_t)v64, a5, 1);
      *(_QWORD *)(a2 + 24) = (unint64_t)(&a3[4 * v65])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      *(_WORD *)(a2 + 50) = 1;
      return 1;
    case 1682:
    case 1683:
    case 1686:
    case 1687:
    case 1691:
    case 1692:
    case 1693:
    case 1696:
    case 1697:
    case 1701:
    case 1702:
    case 1703:
    case 1706:
    case 1707:
    case 1711:
    case 1712:
    case 1713:
    case 1716:
    case 1717:
    case 1721:
    case 1722:
    case 1723:
    case 1726:
    case 1727:
    case 1731:
    case 1732:
    case 1733:
    case 1736:
    case 1737:
    case 1741:
    case 1742:
    case 1743:
    case 1746:
    case 1747:
    case 1751:
    case 1752:
    case 1753:
    case 1756:
    case 1757:
    case 1761:
    case 1762:
    case 1763:
    case 1766:
    case 1767:
    case 1771:
    case 1772:
    case 1773:
    case 1776:
    case 1777:
    case 1781:
    case 1782:
    case 1783:
    case 1786:
    case 1787:
    case 1791:
    case 1792:
    case 1793:
    case 1796:
    case 1797:
    case 1801:
    case 1802:
    case 1803:
    case 1806:
    case 1807:
    case 1811:
    case 1812:
    case 1813:
    case 1816:
    case 1817:
    case 1821:
      v31 = *((_QWORD *)a3[5][7] + 5) + 272;
      *(_DWORD *)a2 = 47;
      v32 = (uint64_t)*(&a3[4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFFu) - 4])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      sub_1C4768AD0(v31, v32);
      v34 = (unint64_t)(v33 + 7) >> 3;
      v36 = v35 == 1;
      llvm::DataLayout::getAlignment(v31, v32);
      v39 = ((1 << v38) + 0x3FFFFFFFFLL + v34) & -(1 << v38);
      if (v36)
      v40 = v39 >> 2;
      v41 = **a3;
      v42 = 10;
      goto LABEL_15;
    case 1684:
    case 1685:
    case 1688:
    case 1689:
    case 1690:
    case 1694:
    case 1695:
    case 1698:
    case 1699:
    case 1700:
    case 1704:
    case 1705:
    case 1708:
    case 1709:
    case 1710:
    case 1714:
    case 1715:
    case 1718:
    case 1719:
    case 1720:
    case 1724:
    case 1725:
    case 1728:
    case 1729:
    case 1730:
    case 1734:
    case 1735:
    case 1738:
    case 1739:
    case 1740:
    case 1744:
    case 1745:
    case 1748:
    case 1749:
    case 1750:
    case 1754:
    case 1755:
    case 1758:
    case 1759:
    case 1760:
    case 1764:
    case 1765:
    case 1768:
    case 1769:
    case 1770:
    case 1774:
    case 1775:
    case 1778:
    case 1779:
    case 1780:
    case 1784:
    case 1785:
    case 1788:
    case 1789:
    case 1790:
    case 1794:
    case 1795:
    case 1798:
    case 1799:
    case 1800:
    case 1804:
    case 1805:
    case 1808:
    case 1809:
    case 1810:
    case 1814:
    case 1815:
    case 1818:
    case 1819:
    case 1820:
      v43 = *((_QWORD *)a3[5][7] + 5) + 272;
      *(_DWORD *)a2 = 47;
      v44 = (uint64_t)*(&a3[4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFFu) - 4])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      sub_1C4768AD0(v43, v44);
      v46 = (unint64_t)(v45 + 7) >> 3;
      v48 = v47 == 1;
      llvm::DataLayout::getAlignment(v43, v44);
      v51 = ((1 << v50) + 0x1FFFFFFFFLL + v46) & -(1 << v50);
      if (v48)
      v40 = v51 >> 1;
      v41 = **a3;
      v42 = 9;
      goto LABEL_15;
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2030:
    case 2031:
    case 2032:
    case 2033:
    case 2035:
    case 2036:
    case 2037:
    case 2038:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2044:
    case 2046:
    case 2047:
    case 2048:
    case 2049:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 2067:
    case 2068:
    case 2069:
    case 2070:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2075:
    case 2076:
    case 2078:
    case 2079:
    case 2080:
    case 2081:
    case 2083:
    case 2084:
    case 2085:
      v53 = *((_QWORD *)a3[5][7] + 5) + 272;
      *(_DWORD *)a2 = 47;
      v54 = (uint64_t)*a3;
      sub_1C4768AD0(v53, (uint64_t)*a3);
      v56 = (unint64_t)(v55 + 7) >> 3;
      v58 = v57 == 1;
      v5 = 1;
      llvm::DataLayout::getAlignment(v53, v54);
      v61 = ((1 << v60) + 0x3FFFFFFFFLL + v56) & -(1 << v60);
      if (v58)
      *(_QWORD *)(a2 + 8) = sub_1C4816F98(**a3, 10, 0, v61 >> 2, 0);
      *(_QWORD *)(a2 + 16) = v62;
      *(_QWORD *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      *(_WORD *)(a2 + 50) = 1;
      return v5;
    case 2029:
    case 2034:
    case 2045:
    case 2050:
    case 2061:
    case 2066:
    case 2077:
    case 2082:
      *(_DWORD *)a2 = 47;
      v41 = **a3;
      v42 = 10;
      LODWORD(v40) = 4;
LABEL_15:
      *(_QWORD *)(a2 + 8) = sub_1C4816F98(v41, v42, 0, v40, 0);
      *(_QWORD *)(a2 + 16) = v52;
      *(_QWORD *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      *(_WORD *)(a2 + 50) = 2;
      v5 = 1;
      break;
    default:
      return v5;
  }
  return v5;
}

unint64_t sub_1C4816F98(llvm::LLVMContext *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t ExtendedVectorVT;
  unint64_t v11;

  if (a5)
    LOBYTE(ExtendedVectorVT) = sub_1C47AC5FC(a2, a4);
  else
    LOBYTE(ExtendedVectorVT) = sub_1C47AC934(a2, a4);
  if ((_BYTE)ExtendedVectorVT)
  {
    v11 = 0;
  }
  else
  {
    ExtendedVectorVT = llvm::EVT::getExtendedVectorVT(a1, a2, a3, a4, a5);
    v11 = ExtendedVectorVT & 0xFFFFFFFFFFFFFF00;
  }
  return v11 | ExtendedVectorVT;
}

uint64_t *sub_1C4817024(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int16 *v14;
  llvm::MachineFunction *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  _UNKNOWN ***v29;
  unsigned int v32;
  __int16 v33;
  unsigned __int8 *v34;
  llvm::BasicBlock *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  llvm::MachineFunction *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  llvm::MachineFunction *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  llvm::MachineFunction *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  llvm::MachineFunction *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  llvm::MachineFunction *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  llvm::MachineFunction *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  llvm::MachineFunction *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  llvm::MachineFunction *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  llvm::MachineFunction *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  llvm::MachineFunction *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  llvm::MachineFunction *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unsigned __int8 *v191;
  int v192;
  int v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  llvm::MachineFunction *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unsigned __int8 *v205;
  unsigned __int8 **v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  llvm::MachineFunction *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  llvm::MachineFunction *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  llvm::MachineFunction *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  llvm::MachineFunction *v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  llvm::MachineFunction *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  llvm::MachineFunction *v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  llvm::MachineFunction *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  llvm::MachineFunction *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  llvm::MachineFunction *v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  llvm::MachineFunction *v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t *v372;
  uint64_t v373;
  llvm::MachineFunction *v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  unsigned int v491;
  BOOL v492;
  int v493;
  unint64_t *v494;
  unint64_t *v495;
  unint64_t v496;
  uint64_t *v497;
  int v498;
  unint64_t *v499;
  unint64_t v500;
  int v501;
  unint64_t *v502;
  int v503;
  int v504;
  uint64_t v505;
  int v506;
  int IncompleteVirtualRegister;
  int v508;
  int v509;
  _QWORD *v510;
  uint64_t v511;
  unint64_t *v512;
  _BYTE *v513;
  _QWORD *v514;
  _QWORD *v515;
  uint64_t *v516;
  _OWORD v517[2];
  _OWORD v518[2];
  unsigned __int8 *v519;
  unsigned __int8 *v520;
  __int128 v521;
  __int128 v522;

  v5 = a3;
  v7 = a3[4];
  v8 = *(unint64_t **)(v7 + 40);
  v9 = a1 + 184296;
  v10 = *(unsigned __int8 **)(a1 + 184296);
  v11 = v10[280];
  v12 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 104))(v10);
  v14 = *(unsigned __int16 **)(a2 + 16);
  v15 = (llvm::MachineFunction *)*v14;
  if ((v14[8] & 0x20) != 0)
  {
    v23 = sub_1C612B500((int)v15, 9);
    v24 = sub_1C612B500((int)v15, 7);
    v25 = *(_QWORD *)(a2 + 32);
    v26 = v25 + 32 * v23;
    v27 = (unsigned int *)(v25 + 32 * v24);
    v28 = *(_DWORD *)(v26 + 16);
    v29 = (_UNKNOWN ***)(*(_QWORD *)(v8[3] + 16 * (v27[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
    if (v28 == 1 && v29 == &off_1E7F98AB8)
    {
      v32 = *v27;
      v33 = 49;
    }
    else
    {
      if ((v28 - 3) > 1 || v29 != &off_1E7F99028)
        return v5;
      v32 = *v27;
      v33 = 51;
    }
    *v27 = v32 & 0xFFF000FF | ((v33 & 0xFFF) << 8);
  }
  else
  {
    v16 = v12;
    if (*v14 > 0x51Eu)
      __asm { BR              X10 }
    switch(*v14)
    {
      case 0x100u:
      case 0x101u:
        v504 = v11;
        v513 = *(_BYTE **)v9;
        v34 = *(unsigned __int8 **)(a2 + 56);
        v519 = v34;
        if (v34)
          llvm::MetadataTracking::track((uint64_t)&v519, v34, 2);
        v35 = (llvm::BasicBlock *)v5[2];
        v36 = (uint64_t *)v5[4];
        v11 = v36[5];
        v491 = ((*(unsigned __int16 *)(*v36 + 18) >> 4) & 0x3FF) - 102;
        v492 = v491 > 5;
        v37 = v36[39];
        if (v37)
          v36[39] = *(_QWORD *)v37;
        else
          v37 = sub_1C484358C((uint64_t)(v36 + 16), 232, 3);
        *(_QWORD *)v37 = 0;
        *(_QWORD *)(v37 + 8) = 0;
        *(_QWORD *)(v37 + 16) = v35;
        *(_DWORD *)(v37 + 24) = -1;
        *(_QWORD *)(v37 + 48) = (v37 + 48) | 4;
        *(_QWORD *)(v37 + 56) = v37 + 48;
        v502 = (unint64_t *)(v37 + 48);
        *(_BYTE *)(v37 + 144) = 0;
        *(_OWORD *)(v37 + 64) = 0u;
        *(_OWORD *)(v37 + 80) = 0u;
        *(_OWORD *)(v37 + 96) = 0u;
        *(_OWORD *)(v37 + 112) = 0u;
        *(_OWORD *)(v37 + 121) = 0u;
        *(_QWORD *)(v37 + 160) = 0;
        *(_QWORD *)(v37 + 168) = 0;
        *(_QWORD *)(v37 + 152) = 0;
        *(_BYTE *)(v37 + 176) = 0;
        *(_DWORD *)(v37 + 187) = 0;
        *(_QWORD *)(v37 + 180) = 0;
        *(_QWORD *)(v37 + 192) = 0;
        *(_DWORD *)(v37 + 199) = 0;
        *(_QWORD *)(v37 + 216) = 0;
        *(_QWORD *)(v37 + 224) = 0;
        *(_QWORD *)(v37 + 208) = 0;
        v516 = v36;
        *(_QWORD *)(v37 + 32) = v36;
        *(_QWORD *)(v37 + 40) = v37;
        if (v35)
        {
          *(_QWORD *)(v37 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v35);
          *(_QWORD *)(v37 + 144) = v38;
        }
        v510 = (_QWORD *)v37;
        v3 = v36[39];
        if (v3)
          v36[39] = *(_QWORD *)v3;
        else
          v3 = sub_1C484358C((uint64_t)(v36 + 16), 232, 3);
        *(_QWORD *)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        *(_QWORD *)(v3 + 16) = v35;
        *(_DWORD *)(v3 + 24) = -1;
        *(_QWORD *)(v3 + 48) = (v3 + 48) | 4;
        *(_QWORD *)(v3 + 56) = v3 + 48;
        v512 = (unint64_t *)(v3 + 48);
        *(_BYTE *)(v3 + 144) = 0;
        *(_OWORD *)(v3 + 64) = 0u;
        *(_OWORD *)(v3 + 80) = 0u;
        *(_OWORD *)(v3 + 96) = 0u;
        *(_OWORD *)(v3 + 112) = 0u;
        *(_OWORD *)(v3 + 121) = 0u;
        *(_QWORD *)(v3 + 160) = 0;
        *(_QWORD *)(v3 + 168) = 0;
        *(_QWORD *)(v3 + 152) = 0;
        *(_BYTE *)(v3 + 176) = 0;
        *(_DWORD *)(v3 + 187) = 0;
        *(_QWORD *)(v3 + 180) = 0;
        *(_QWORD *)(v3 + 192) = 0;
        *(_DWORD *)(v3 + 199) = 0;
        *(_QWORD *)(v3 + 216) = 0;
        *(_QWORD *)(v3 + 224) = 0;
        *(_QWORD *)(v3 + 208) = 0;
        *(_QWORD *)(v3 + 32) = v36;
        *(_QWORD *)(v3 + 40) = v3;
        if (v35)
        {
          *(_QWORD *)(v3 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v35);
          *(_QWORD *)(v3 + 144) = v39;
        }
        v4 = v36[39];
        if (v4)
          v36[39] = *(_QWORD *)v4;
        else
          v4 = sub_1C484358C((uint64_t)(v36 + 16), 232, 3);
        *(_QWORD *)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        *(_QWORD *)(v4 + 16) = v35;
        *(_DWORD *)(v4 + 24) = -1;
        *(_QWORD *)(v4 + 48) = (v4 + 48) | 4;
        *(_QWORD *)(v4 + 56) = v4 + 48;
        v499 = (unint64_t *)(v4 + 48);
        *(_BYTE *)(v4 + 144) = 0;
        *(_OWORD *)(v4 + 64) = 0u;
        *(_OWORD *)(v4 + 80) = 0u;
        *(_OWORD *)(v4 + 96) = 0u;
        *(_OWORD *)(v4 + 112) = 0u;
        *(_OWORD *)(v4 + 121) = 0u;
        *(_QWORD *)(v4 + 160) = 0;
        *(_QWORD *)(v4 + 168) = 0;
        *(_QWORD *)(v4 + 152) = 0;
        *(_BYTE *)(v4 + 176) = 0;
        *(_DWORD *)(v4 + 187) = 0;
        *(_QWORD *)(v4 + 180) = 0;
        *(_QWORD *)(v4 + 192) = 0;
        *(_DWORD *)(v4 + 199) = 0;
        *(_QWORD *)(v4 + 216) = 0;
        *(_QWORD *)(v4 + 224) = 0;
        *(_QWORD *)(v4 + 208) = 0;
        *(_QWORD *)(v4 + 32) = v36;
        *(_QWORD *)(v4 + 40) = v4;
        if (v35)
        {
          *(_QWORD *)(v4 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v35);
          *(_QWORD *)(v4 + 144) = v40;
        }
        v41 = v36[39];
        if (v41)
          v516[39] = *(_QWORD *)v41;
        else
          v41 = sub_1C484358C((uint64_t)(v516 + 16), 232, 3);
        *(_QWORD *)v41 = 0;
        *(_QWORD *)(v41 + 8) = 0;
        *(_QWORD *)(v41 + 16) = v35;
        *(_DWORD *)(v41 + 24) = -1;
        *(_QWORD *)(v41 + 48) = (v41 + 48) | 4;
        *(_QWORD *)(v41 + 56) = v41 + 48;
        v494 = (unint64_t *)(v41 + 48);
        *(_BYTE *)(v41 + 144) = 0;
        *(_OWORD *)(v41 + 64) = 0u;
        *(_OWORD *)(v41 + 80) = 0u;
        *(_OWORD *)(v41 + 96) = 0u;
        *(_OWORD *)(v41 + 112) = 0u;
        *(_OWORD *)(v41 + 121) = 0u;
        *(_QWORD *)(v41 + 160) = 0;
        *(_QWORD *)(v41 + 168) = 0;
        *(_QWORD *)(v41 + 152) = 0;
        *(_BYTE *)(v41 + 176) = 0;
        *(_DWORD *)(v41 + 187) = 0;
        *(_QWORD *)(v41 + 180) = 0;
        *(_QWORD *)(v41 + 192) = 0;
        *(_DWORD *)(v41 + 199) = 0;
        *(_QWORD *)(v41 + 216) = 0;
        *(_QWORD *)(v41 + 224) = 0;
        *(_QWORD *)(v41 + 208) = 0;
        *(_QWORD *)(v41 + 32) = v516;
        *(_QWORD *)(v41 + 40) = v41;
        if (v35)
        {
          *(_QWORD *)(v41 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v35);
          *(_QWORD *)(v41 + 144) = v42;
        }
        v7 = v516[39];
        if (v7)
          v516[39] = *(_QWORD *)v7;
        else
          v7 = sub_1C484358C((uint64_t)(v516 + 16), 232, 3);
        v500 = v4;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = v35;
        *(_DWORD *)(v7 + 24) = -1;
        *(_QWORD *)(v7 + 48) = (v7 + 48) | 4;
        *(_QWORD *)(v7 + 56) = v7 + 48;
        v495 = (unint64_t *)(v7 + 48);
        *(_BYTE *)(v7 + 144) = 0;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 121) = 0u;
        *(_QWORD *)(v7 + 160) = 0;
        *(_QWORD *)(v7 + 168) = 0;
        *(_QWORD *)(v7 + 152) = 0;
        *(_BYTE *)(v7 + 176) = 0;
        *(_DWORD *)(v7 + 187) = 0;
        *(_QWORD *)(v7 + 180) = 0;
        *(_QWORD *)(v7 + 192) = 0;
        *(_DWORD *)(v7 + 199) = 0;
        *(_QWORD *)(v7 + 216) = 0;
        *(_QWORD *)(v7 + 224) = 0;
        *(_QWORD *)(v7 + 208) = 0;
        *(_QWORD *)(v7 + 32) = v516;
        *(_QWORD *)(v7 + 40) = v7;
        if (v35)
        {
          *(_QWORD *)(v7 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v35);
          *(_QWORD *)(v7 + 144) = v43;
        }
        v44 = v516[39];
        if (v44)
          v516[39] = *(_QWORD *)v44;
        else
          v44 = sub_1C484358C((uint64_t)(v516 + 16), 232, 3);
        v514 = (_QWORD *)v41;
        *(_QWORD *)v44 = 0;
        *(_QWORD *)(v44 + 8) = 0;
        *(_QWORD *)(v44 + 16) = v35;
        *(_DWORD *)(v44 + 24) = -1;
        *(_QWORD *)(v44 + 48) = (v44 + 48) | 4;
        *(_QWORD *)(v44 + 56) = v44 + 48;
        v496 = v44 + 48;
        *(_BYTE *)(v44 + 144) = 0;
        *(_OWORD *)(v44 + 64) = 0u;
        *(_OWORD *)(v44 + 80) = 0u;
        *(_OWORD *)(v44 + 96) = 0u;
        *(_OWORD *)(v44 + 112) = 0u;
        *(_OWORD *)(v44 + 121) = 0u;
        *(_QWORD *)(v44 + 160) = 0;
        *(_QWORD *)(v44 + 168) = 0;
        *(_QWORD *)(v44 + 152) = 0;
        *(_BYTE *)(v44 + 176) = 0;
        *(_DWORD *)(v44 + 187) = 0;
        *(_QWORD *)(v44 + 180) = 0;
        *(_QWORD *)(v44 + 192) = 0;
        *(_DWORD *)(v44 + 199) = 0;
        *(_QWORD *)(v44 + 216) = 0;
        *(_QWORD *)(v44 + 224) = 0;
        *(_QWORD *)(v44 + 208) = 0;
        *(_QWORD *)(v44 + 32) = v516;
        *(_QWORD *)(v44 + 40) = v44;
        if (v35)
        {
          *(_QWORD *)(v44 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v35);
          *(_QWORD *)(v44 + 144) = v45;
        }
        v515 = (_QWORD *)v44;
        v46 = v516[39];
        if (v46)
          v516[39] = *(_QWORD *)v46;
        else
          v46 = sub_1C484358C((uint64_t)(v516 + 16), 232, 3);
        v511 = a2;
        *(_QWORD *)v46 = 0;
        *(_QWORD *)(v46 + 8) = 0;
        *(_QWORD *)(v46 + 16) = v35;
        *(_DWORD *)(v46 + 24) = -1;
        *(_QWORD *)(v46 + 48) = (v46 + 48) | 4;
        *(_QWORD *)(v46 + 56) = v46 + 48;
        *(_BYTE *)(v46 + 144) = 0;
        *(_OWORD *)(v46 + 64) = 0u;
        *(_OWORD *)(v46 + 80) = 0u;
        *(_OWORD *)(v46 + 96) = 0u;
        *(_OWORD *)(v46 + 112) = 0u;
        *(_OWORD *)(v46 + 121) = 0u;
        *(_QWORD *)(v46 + 160) = 0;
        *(_QWORD *)(v46 + 168) = 0;
        *(_QWORD *)(v46 + 152) = 0;
        *(_BYTE *)(v46 + 176) = 0;
        *(_DWORD *)(v46 + 187) = 0;
        *(_QWORD *)(v46 + 180) = 0;
        *(_QWORD *)(v46 + 192) = 0;
        *(_DWORD *)(v46 + 199) = 0;
        *(_QWORD *)(v46 + 216) = 0;
        *(_QWORD *)(v46 + 224) = 0;
        *(_QWORD *)(v46 + 208) = 0;
        *(_QWORD *)(v46 + 32) = v516;
        *(_QWORD *)(v46 + 40) = v46;
        if (v35)
        {
          *(_QWORD *)(v46 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v35);
          *(_QWORD *)(v46 + 144) = v47;
        }
        v48 = (unint64_t *)v5[1];
        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v516 + 40), (uint64_t)v510);
        v49 = *v48;
        *v510 = *v48;
        v510[1] = v48;
        *(_QWORD *)(v49 + 8) = v510;
        *v48 = (unint64_t)v510;
        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v516 + 40), v3);
        v50 = *v48;
        *(_QWORD *)v3 = *v48;
        *(_QWORD *)(v3 + 8) = v48;
        *(_QWORD *)(v50 + 8) = v3;
        *v48 = v3;
        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v516 + 40), v4);
        v51 = *v48;
        *(_QWORD *)v4 = *v48;
        *(_QWORD *)(v4 + 8) = v48;
        *(_QWORD *)(v51 + 8) = v4;
        *v48 = v4;
        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v516 + 40), (uint64_t)v514);
        v52 = *v48;
        *v514 = *v48;
        v514[1] = v48;
        *(_QWORD *)(v52 + 8) = v514;
        *v48 = (unint64_t)v514;
        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v516 + 40), v7);
        v53 = *v48;
        *(_QWORD *)v7 = *v48;
        *(_QWORD *)(v7 + 8) = v48;
        *(_QWORD *)(v53 + 8) = v7;
        *v48 = v7;
        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v516 + 40), (uint64_t)v515);
        v54 = *v48;
        *v515 = *v48;
        v515[1] = v48;
        *(_QWORD *)(v54 + 8) = v515;
        *v48 = (unint64_t)v515;
        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v516 + 40), v46);
        v55 = *v48;
        *(_QWORD *)v46 = *v48;
        *(_QWORD *)(v46 + 8) = v48;
        *(_QWORD *)(v55 + 8) = v46;
        *v48 = v46;
        v56 = *(unint64_t **)(v46 + 56);
        v57 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v57 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v57 = a2;
            do
              v57 = *(_QWORD *)(v57 + 8);
            while ((*(_WORD *)(v57 + 44) & 8) != 0);
          }
        }
        v58 = *(unint64_t **)(v57 + 8);
        v8 = (unint64_t *)(v5 + 6);
        if (v58 != (unint64_t *)(v5 + 6) && v56 != v8)
        {
          if ((uint64_t *)v46 != v5)
          {
            v432 = *(_QWORD *)(v46 + 40);
            v433 = v58;
            do
            {
              v433[3] = v432;
              v433 = (unint64_t *)v433[1];
            }
            while (v433 != v8);
          }
          sub_1C4785D30(v56, v58, (unint64_t *)v5 + 6);
        }
        llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v46, (llvm::MachineBasicBlock *)v5);
        llvm::MachineBasicBlock::addSuccessor(v5, v510, -1);
        llvm::MachineBasicBlock::addSuccessor(v510, (_QWORD *)v3, -1);
        llvm::MachineBasicBlock::addSuccessor((_QWORD *)v3, (_QWORD *)v4, -1);
        llvm::MachineBasicBlock::addSuccessor((_QWORD *)v3, v514, -1);
        llvm::MachineBasicBlock::addSuccessor((_QWORD *)v4, v514, -1);
        llvm::MachineBasicBlock::addSuccessor(v514, (_QWORD *)v7, -1);
        llvm::MachineBasicBlock::addSuccessor((_QWORD *)v7, v510, -1);
        llvm::MachineBasicBlock::addSuccessor((_QWORD *)v7, v515, -1);
        llvm::MachineBasicBlock::addSuccessor(v515, (_QWORD *)v46, -1);
        v60 = *(_QWORD *)(a2 + 32);
        v498 = *(_DWORD *)(v60 + 36);
        v61 = *(_OWORD *)(v60 + 48);
        v518[0] = *(_OWORD *)(v60 + 32);
        v518[1] = v61;
        v62 = *(_OWORD *)(v60 + 80);
        v517[0] = *(_OWORD *)(v60 + 64);
        v517[1] = v62;
        v63 = 96;
        v64 = 64;
        if (!v504)
          v64 = 96;
        v490 = *(_DWORD *)(v60 + v64 + 4);
        if (!v504)
          v63 = 128;
        v493 = *(_DWORD *)(v60 + v63 + 4);
        if (!LOBYTE(v518[0]))
          LODWORD(v518[0]) &= ~0x4000000u;
        v497 = (uint64_t *)v46;
        if (!LOBYTE(v517[0]))
          LODWORD(v517[0]) &= ~0x4000000u;
        v505 = v16;
        v65 = *(_QWORD *)(v16 + 8);
        v15 = (llvm::MachineFunction *)v5[4];
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v66 = v65 + 570000;
        v9 = *((_QWORD *)v15 + 28);
        if (v9)
          *((_QWORD *)v15 + 28) = *(_QWORD *)v9;
        else
          v9 = sub_1C484358C((uint64_t)v15 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v9, v15, v66, (unsigned __int8 **)&v521, 0);
        v13 = (unsigned __int8 *)v521;
        if ((_QWORD)v521)
          goto LABEL_854;
        goto LABEL_97;
      case 0x102u:
      case 0x103u:
      case 0x104u:
      case 0x105u:
        return sub_1C481E174(a2, (unint64_t *)v5, v12, *(_QWORD *)v9, v11 != 0);
      case 0x106u:
      case 0x107u:
      case 0x108u:
        __break(1u);
LABEL_854:
        llvm::MetadataTracking::untrack((uint64_t)&v521, v13);
LABEL_97:
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v77 = v5[5];
        *(_QWORD *)(v9 + 24) = v77;
        v78 = *(_QWORD *)(v77 + 32);
        v79 = *(unsigned int *)(v9 + 40);
        if ((_DWORD)v79)
        {
          v207 = *(_QWORD *)(v9 + 32);
          v208 = *(_QWORD *)(v78 + 40);
          v209 = 32 * v79;
          do
          {
            if (!*(_BYTE *)v207)
            {
              v210 = *(unsigned int *)(v207 + 4);
              if ((int)v210 >= 0)
                v211 = (uint64_t *)(*(_QWORD *)(v208 + 272) + 8 * v210);
              else
                v211 = (uint64_t *)(*(_QWORD *)(v208 + 24) + 16 * (v210 & 0x7FFFFFFF) + 8);
              v212 = *v211;
              if (*v211)
              {
                v213 = *(_QWORD *)(v212 + 16);
                *(_QWORD *)(v212 + 16) = v207;
                *(_QWORD *)(v207 + 16) = v213;
                if ((*(_BYTE *)(v207 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v207 + 24) = v212;
                }
                else
                {
                  *(_QWORD *)(v207 + 24) = 0;
                  v211 = (uint64_t *)(v213 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v207 + 16) = v207;
                *(_QWORD *)(v207 + 24) = 0;
              }
              *v211 = v207;
            }
            v207 += 32;
            v209 -= 32;
          }
          while (v209);
        }
        v80 = *(_QWORD *)(v78 + 728);
        if (v80)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v80 + 24))(v80, v9);
        v81 = *v8 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v9 = v81 | *(_QWORD *)v9 & 7;
        *(_QWORD *)(v9 + 8) = v8;
        *(_QWORD *)(v81 + 8) = v9;
        *v8 = *v8 & 7 | v9;
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v9, v15, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v9, v15, (const llvm::MachineOperand *)&v521);
        v521 = 0u;
        v522 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v9, v15, (const llvm::MachineOperand *)&v521);
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v11, "", 0);
        *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
        v82 = *(_QWORD *)(v11 + 8);
        if (v82)
          (*(void (**)(uint64_t))(*(_QWORD *)v82 + 24))(v82);
        v501 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v11, "", 0);
        *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (v501 & 0x7FFFFFFF)) = &off_1E7F98468;
        v83 = *(_QWORD *)(v11 + 8);
        if (v83)
          (*(void (**)(uint64_t))(*(_QWORD *)v83 + 24))(v83);
        v508 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v11, "", 0);
        *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (v508 & 0x7FFFFFFF)) = &off_1E7F98468;
        v84 = *(_QWORD *)(v11 + 8);
        if (v84)
          (*(void (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84);
        v85 = *(_QWORD *)(v505 + 8);
        v86 = (llvm::MachineFunction *)v5[4];
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v87 = v85 + 245040;
        v88 = *((_QWORD *)v86 + 28);
        if (v88)
          *((_QWORD *)v86 + 28) = *(_QWORD *)v88;
        else
          v88 = sub_1C484358C((uint64_t)v86 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v88, v86, v87, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v89 = v5[5];
        *(_QWORD *)(v88 + 24) = v89;
        v90 = *(_QWORD *)(v89 + 32);
        v91 = *(unsigned int *)(v88 + 40);
        if ((_DWORD)v91)
        {
          v214 = *(_QWORD *)(v88 + 32);
          v215 = *(_QWORD *)(v90 + 40);
          v216 = 32 * v91;
          do
          {
            if (!*(_BYTE *)v214)
            {
              v217 = *(unsigned int *)(v214 + 4);
              if ((int)v217 >= 0)
                v218 = (uint64_t *)(*(_QWORD *)(v215 + 272) + 8 * v217);
              else
                v218 = (uint64_t *)(*(_QWORD *)(v215 + 24) + 16 * (v217 & 0x7FFFFFFF) + 8);
              v219 = *v218;
              if (*v218)
              {
                v220 = *(_QWORD *)(v219 + 16);
                *(_QWORD *)(v219 + 16) = v214;
                *(_QWORD *)(v214 + 16) = v220;
                if ((*(_BYTE *)(v214 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v214 + 24) = v219;
                }
                else
                {
                  *(_QWORD *)(v214 + 24) = 0;
                  v218 = (uint64_t *)(v220 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v214 + 16) = v214;
                *(_QWORD *)(v214 + 24) = 0;
              }
              *v218 = v214;
            }
            v214 += 32;
            v216 -= 32;
          }
          while (v216);
        }
        v92 = *(_QWORD *)(v90 + 728);
        if (v92)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v92 + 24))(v92, v88);
        v93 = *v8 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v88 = v93 | *(_QWORD *)v88 & 7;
        *(_QWORD *)(v88 + 8) = v8;
        *(_QWORD *)(v93 + 8) = v88;
        *v8 = *v8 & 7 | v88;
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0x1000000;
        DWORD1(v521) = v501;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v521);
        v521 = 0u;
        v522 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v521);
        v521 = 0u;
        v522 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v521);
        v94 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v11, "", 0);
        *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (v94 & 0x7FFFFFFF)) = &off_1E7F984F0;
        v95 = *(_QWORD *)(v11 + 8);
        if (v95)
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 24))(v95);
        v506 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v11, "", 0);
        *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (v506 & 0x7FFFFFFF)) = &off_1E7F984F0;
        v96 = *(_QWORD *)(v11 + 8);
        if (v96)
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96);
        v503 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v11, "", 0);
        *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (v503 & 0x7FFFFFFF)) = &off_1E7F984F0;
        v97 = *(_QWORD *)(v11 + 8);
        if (v97)
          (*(void (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97);
        v509 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v11, "", 0);
        *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (v509 & 0x7FFFFFFF)) = &off_1E7F984F0;
        v98 = *(_QWORD *)(v11 + 8);
        if (v98)
          (*(void (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98);
        v99 = *(_QWORD *)(v505 + 8);
        v100 = (llvm::MachineFunction *)v5[4];
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v101 = v99 + 480;
        v102 = *((_QWORD *)v100 + 28);
        if (v102)
          *((_QWORD *)v100 + 28) = *(_QWORD *)v102;
        else
          v102 = sub_1C484358C((uint64_t)v100 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v102, v100, v101, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v103 = v5[5];
        *(_QWORD *)(v102 + 24) = v103;
        v104 = *(_QWORD *)(v103 + 32);
        v105 = *(unsigned int *)(v102 + 40);
        if ((_DWORD)v105)
        {
          v221 = *(_QWORD *)(v102 + 32);
          v222 = *(_QWORD *)(v104 + 40);
          v223 = 32 * v105;
          do
          {
            if (!*(_BYTE *)v221)
            {
              v224 = *(unsigned int *)(v221 + 4);
              if ((int)v224 >= 0)
                v225 = (uint64_t *)(*(_QWORD *)(v222 + 272) + 8 * v224);
              else
                v225 = (uint64_t *)(*(_QWORD *)(v222 + 24) + 16 * (v224 & 0x7FFFFFFF) + 8);
              v226 = *v225;
              if (*v225)
              {
                v227 = *(_QWORD *)(v226 + 16);
                *(_QWORD *)(v226 + 16) = v221;
                *(_QWORD *)(v221 + 16) = v227;
                if ((*(_BYTE *)(v221 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v221 + 24) = v226;
                }
                else
                {
                  *(_QWORD *)(v221 + 24) = 0;
                  v225 = (uint64_t *)(v227 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v221 + 16) = v221;
                *(_QWORD *)(v221 + 24) = 0;
              }
              *v225 = v221;
            }
            v221 += 32;
            v223 -= 32;
          }
          while (v223);
        }
        v106 = *(_QWORD *)(v104 + 728);
        if (v106)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v106 + 24))(v106, v102);
        v107 = *v8 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v102 = v107 | *(_QWORD *)v102 & 7;
        *(_QWORD *)(v102 + 8) = v8;
        *(_QWORD *)(v107 + 8) = v102;
        *v8 = *v8 & 7 | v102;
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0x1000000;
        DWORD1(v521) = v94;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v100, (const llvm::MachineOperand *)&v521);
        v108 = *(_QWORD *)(v505 + 8);
        v109 = (llvm::MachineFunction *)v510[4];
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v110 = *((_QWORD *)v109 + 28);
        if (v110)
          *((_QWORD *)v109 + 28) = *(_QWORD *)v110;
        else
          v110 = sub_1C484358C((uint64_t)v109 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v110, v109, v108, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v111 = v510[5];
        *(_QWORD *)(v110 + 24) = v111;
        v112 = *(_QWORD *)(v111 + 32);
        v113 = *(unsigned int *)(v110 + 40);
        if ((_DWORD)v113)
        {
          v228 = *(_QWORD *)(v110 + 32);
          v229 = *(_QWORD *)(v112 + 40);
          v230 = 32 * v113;
          do
          {
            if (!*(_BYTE *)v228)
            {
              v231 = *(unsigned int *)(v228 + 4);
              if ((int)v231 >= 0)
                v232 = (uint64_t *)(*(_QWORD *)(v229 + 272) + 8 * v231);
              else
                v232 = (uint64_t *)(*(_QWORD *)(v229 + 24) + 16 * (v231 & 0x7FFFFFFF) + 8);
              v233 = *v232;
              if (*v232)
              {
                v234 = *(_QWORD *)(v233 + 16);
                *(_QWORD *)(v233 + 16) = v228;
                *(_QWORD *)(v228 + 16) = v234;
                if ((*(_BYTE *)(v228 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v228 + 24) = v233;
                }
                else
                {
                  *(_QWORD *)(v228 + 24) = 0;
                  v232 = (uint64_t *)(v234 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v228 + 16) = v228;
                *(_QWORD *)(v228 + 24) = 0;
              }
              *v232 = v228;
            }
            v228 += 32;
            v230 -= 32;
          }
          while (v230);
        }
        v114 = *(_QWORD *)(v112 + 728);
        if (v114)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v114 + 24))(v114, v110);
        v115 = v510[6] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v110 = v115 | *(_QWORD *)v110 & 7;
        *(_QWORD *)(v110 + 8) = v502;
        *(_QWORD *)(v115 + 8) = v110;
        v510[6] = v510[6] & 7 | v110;
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0x1000000;
        DWORD1(v521) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v110, v109, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = v501;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v110, v109, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = v5;
        LODWORD(v521) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v110, v109, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = v508;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v110, v109, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = v7;
        LODWORD(v521) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v110, v109, (const llvm::MachineOperand *)&v521);
        v116 = *(_QWORD *)(v505 + 8);
        v117 = (llvm::MachineFunction *)v510[4];
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v118 = *((_QWORD *)v117 + 28);
        if (v118)
          *((_QWORD *)v117 + 28) = *(_QWORD *)v118;
        else
          v118 = sub_1C484358C((uint64_t)v117 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v118, v117, v116, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v119 = v510[5];
        *(_QWORD *)(v118 + 24) = v119;
        v120 = *(_QWORD *)(v119 + 32);
        v121 = *(unsigned int *)(v118 + 40);
        if ((_DWORD)v121)
        {
          v235 = *(_QWORD *)(v118 + 32);
          v236 = *(_QWORD *)(v120 + 40);
          v237 = 32 * v121;
          do
          {
            if (!*(_BYTE *)v235)
            {
              v238 = *(unsigned int *)(v235 + 4);
              if ((int)v238 >= 0)
                v239 = (uint64_t *)(*(_QWORD *)(v236 + 272) + 8 * v238);
              else
                v239 = (uint64_t *)(*(_QWORD *)(v236 + 24) + 16 * (v238 & 0x7FFFFFFF) + 8);
              v240 = *v239;
              if (*v239)
              {
                v241 = *(_QWORD *)(v240 + 16);
                *(_QWORD *)(v240 + 16) = v235;
                *(_QWORD *)(v235 + 16) = v241;
                if ((*(_BYTE *)(v235 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v235 + 24) = v240;
                }
                else
                {
                  *(_QWORD *)(v235 + 24) = 0;
                  v239 = (uint64_t *)(v241 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v235 + 16) = v235;
                *(_QWORD *)(v235 + 24) = 0;
              }
              *v239 = v235;
            }
            v235 += 32;
            v237 -= 32;
          }
          while (v237);
        }
        v122 = *(_QWORD *)(v120 + 728);
        if (v122)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v122 + 24))(v122, v118);
        v123 = *v502 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v118 = v123 | *(_QWORD *)v118 & 7;
        *(_QWORD *)(v118 + 8) = v502;
        *(_QWORD *)(v123 + 8) = v118;
        *v502 = *v502 & 7 | v118;
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0x1000000;
        DWORD1(v521) = v503;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v118, v117, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = v94;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v118, v117, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = v5;
        LODWORD(v521) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v118, v117, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = v509;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v118, v117, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = v7;
        LODWORD(v521) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v118, v117, (const llvm::MachineOperand *)&v521);
        v124 = *(_QWORD *)(v505 + 8);
        v125 = *(llvm::MachineFunction **)(v3 + 32);
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v126 = v124 + 239568;
        v127 = *((_QWORD *)v125 + 28);
        if (v127)
          *((_QWORD *)v125 + 28) = *(_QWORD *)v127;
        else
          v127 = sub_1C484358C((uint64_t)v125 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v127, v125, v126, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v128 = *(_QWORD *)(v3 + 40);
        *(_QWORD *)(v127 + 24) = v128;
        v129 = *(_QWORD *)(v128 + 32);
        v130 = *(unsigned int *)(v127 + 40);
        if ((_DWORD)v130)
        {
          v242 = *(_QWORD *)(v127 + 32);
          v243 = *(_QWORD *)(v129 + 40);
          v244 = 32 * v130;
          do
          {
            if (!*(_BYTE *)v242)
            {
              v245 = *(unsigned int *)(v242 + 4);
              if ((int)v245 >= 0)
                v246 = (uint64_t *)(*(_QWORD *)(v243 + 272) + 8 * v245);
              else
                v246 = (uint64_t *)(*(_QWORD *)(v243 + 24) + 16 * (v245 & 0x7FFFFFFF) + 8);
              v247 = *v246;
              if (*v246)
              {
                v248 = *(_QWORD *)(v247 + 16);
                *(_QWORD *)(v247 + 16) = v242;
                *(_QWORD *)(v242 + 16) = v248;
                if ((*(_BYTE *)(v242 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v242 + 24) = v247;
                }
                else
                {
                  *(_QWORD *)(v242 + 24) = 0;
                  v246 = (uint64_t *)(v248 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v242 + 16) = v242;
                *(_QWORD *)(v242 + 24) = 0;
              }
              *v246 = v242;
            }
            v242 += 32;
            v244 -= 32;
          }
          while (v244);
        }
        v131 = *(_QWORD *)(v129 + 728);
        if (v131)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v131 + 24))(v131, v127);
        v132 = *v512 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v127 = v132 | *(_QWORD *)v127 & 7;
        *(_QWORD *)(v127 + 8) = v512;
        *(_QWORD *)(v132 + 8) = v127;
        *v512 = *v512 & 7 | v127;
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v127, v125, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v127, v125, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v127, v125, (const llvm::MachineOperand *)&v521);
        v522 = 0uLL;
        v521 = 0x11300000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v127, v125, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v127, v125, (const llvm::MachineOperand *)&v521);
        v522 = 0uLL;
        v521 = 0x201000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v127, v125, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v127, v125, (const llvm::MachineOperand *)&v521);
        v521 = 0u;
        v522 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v127, v125, (const llvm::MachineOperand *)&v521);
        if (((v492 | (0xEu >> v491)) & 1) != 0)
        {
          v133 = *(_QWORD *)(v505 + 8);
          v134 = *(llvm::MachineFunction **)(v3 + 32);
          v520 = v519;
          if (v519)
            llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
          v135 = v133 + 239664;
          v136 = *((_QWORD *)v134 + 28);
          if (v136)
            *((_QWORD *)v134 + 28) = *(_QWORD *)v136;
          else
            v136 = sub_1C484358C((uint64_t)v134 + 128, 72, 3);
          *(_QWORD *)&v521 = v520;
          if (v520)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
            v520 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v136, v134, v135, (unsigned __int8 **)&v521, 0);
          if ((_QWORD)v521)
            llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
          if (v520)
            llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
          v137 = *(_QWORD *)(v3 + 40);
          *(_QWORD *)(v136 + 24) = v137;
          v138 = *(_QWORD *)(v137 + 32);
          v139 = *(unsigned int *)(v136 + 40);
          if ((_DWORD)v139)
          {
            v448 = *(_QWORD *)(v136 + 32);
            v449 = *(_QWORD *)(v138 + 40);
            v450 = 32 * v139;
            do
            {
              if (!*(_BYTE *)v448)
              {
                v451 = *(unsigned int *)(v448 + 4);
                if ((int)v451 >= 0)
                  v452 = (uint64_t *)(*(_QWORD *)(v449 + 272) + 8 * v451);
                else
                  v452 = (uint64_t *)(*(_QWORD *)(v449 + 24) + 16 * (v451 & 0x7FFFFFFF) + 8);
                v453 = *v452;
                if (*v452)
                {
                  v454 = *(_QWORD *)(v453 + 16);
                  *(_QWORD *)(v453 + 16) = v448;
                  *(_QWORD *)(v448 + 16) = v454;
                  if ((*(_BYTE *)(v448 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v448 + 24) = v453;
                  }
                  else
                  {
                    *(_QWORD *)(v448 + 24) = 0;
                    v452 = (uint64_t *)(v454 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v448 + 16) = v448;
                  *(_QWORD *)(v448 + 24) = 0;
                }
                *v452 = v448;
              }
              v448 += 32;
              v450 -= 32;
            }
            while (v450);
          }
          v140 = *(_QWORD *)(v138 + 728);
          if (v140)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v140 + 24))(v140, v136);
          v141 = *v512 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v136 = v141 | *(_QWORD *)v136 & 7;
          *(_QWORD *)(v136 + 8) = v512;
          *(_QWORD *)(v141 + 8) = v136;
          *v512 = *v512 & 7 | v136;
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v134, (const llvm::MachineOperand *)&v521);
          v522 = 0uLL;
          v521 = 0x11700000000uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v134, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v134, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v134, (const llvm::MachineOperand *)&v521);
          v522 = 0uLL;
          v521 = 0x201000000uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v134, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v134, (const llvm::MachineOperand *)&v521);
          v522 = 0uLL;
          v521 = 0x200000000uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v134, (const llvm::MachineOperand *)&v521);
        }
        v142 = *(_QWORD *)(v505 + 8);
        v143 = *(llvm::MachineFunction **)(v3 + 32);
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v144 = v142 + 555648;
        v145 = *((_QWORD *)v143 + 28);
        if (v145)
          *((_QWORD *)v143 + 28) = *(_QWORD *)v145;
        else
          v145 = sub_1C484358C((uint64_t)v143 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v145, v143, v144, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v146 = *(_QWORD *)(v3 + 40);
        *(_QWORD *)(v145 + 24) = v146;
        v147 = *(_QWORD *)(v146 + 32);
        v148 = *(unsigned int *)(v145 + 40);
        if ((_DWORD)v148)
        {
          v249 = *(_QWORD *)(v145 + 32);
          v250 = *(_QWORD *)(v147 + 40);
          v251 = 32 * v148;
          do
          {
            if (!*(_BYTE *)v249)
            {
              v252 = *(unsigned int *)(v249 + 4);
              if ((int)v252 >= 0)
                v253 = (uint64_t *)(*(_QWORD *)(v250 + 272) + 8 * v252);
              else
                v253 = (uint64_t *)(*(_QWORD *)(v250 + 24) + 16 * (v252 & 0x7FFFFFFF) + 8);
              v254 = *v253;
              if (*v253)
              {
                v255 = *(_QWORD *)(v254 + 16);
                *(_QWORD *)(v254 + 16) = v249;
                *(_QWORD *)(v249 + 16) = v255;
                if ((*(_BYTE *)(v249 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v249 + 24) = v254;
                }
                else
                {
                  *(_QWORD *)(v249 + 24) = 0;
                  v253 = (uint64_t *)(v255 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v249 + 16) = v249;
                *(_QWORD *)(v249 + 24) = 0;
              }
              *v253 = v249;
            }
            v249 += 32;
            v251 -= 32;
          }
          while (v251);
        }
        v149 = *(_QWORD *)(v147 + 728);
        if (v149)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v149 + 24))(v149, v145);
        v150 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v145 = v150 | *(_QWORD *)v145 & 7;
        *(_QWORD *)(v145 + 8) = v512;
        *(_QWORD *)(v150 + 8) = v145;
        *(_QWORD *)(v3 + 48) = *(_QWORD *)(v3 + 48) & 7 | v145;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = v514;
        LODWORD(v521) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v145, v143, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v145, v143, (const llvm::MachineOperand *)&v521);
        v151 = *(_QWORD *)(v505 + 8);
        v152 = *(llvm::MachineFunction **)(v3 + 32);
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v153 = v151 + 555600;
        v154 = *((_QWORD *)v152 + 28);
        if (v154)
          *((_QWORD *)v152 + 28) = *(_QWORD *)v154;
        else
          v154 = sub_1C484358C((uint64_t)v152 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v154, v152, v153, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v155 = *(_QWORD *)(v3 + 40);
        *(_QWORD *)(v154 + 24) = v155;
        v156 = *(_QWORD *)(v155 + 32);
        v157 = *(unsigned int *)(v154 + 40);
        if ((_DWORD)v157)
        {
          v256 = *(_QWORD *)(v154 + 32);
          v257 = *(_QWORD *)(v156 + 40);
          v258 = 32 * v157;
          do
          {
            if (!*(_BYTE *)v256)
            {
              v259 = *(unsigned int *)(v256 + 4);
              if ((int)v259 >= 0)
                v260 = (uint64_t *)(*(_QWORD *)(v257 + 272) + 8 * v259);
              else
                v260 = (uint64_t *)(*(_QWORD *)(v257 + 24) + 16 * (v259 & 0x7FFFFFFF) + 8);
              v261 = *v260;
              if (*v260)
              {
                v262 = *(_QWORD *)(v261 + 16);
                *(_QWORD *)(v261 + 16) = v256;
                *(_QWORD *)(v256 + 16) = v262;
                if ((*(_BYTE *)(v256 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v256 + 24) = v261;
                }
                else
                {
                  *(_QWORD *)(v256 + 24) = 0;
                  v260 = (uint64_t *)(v262 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v256 + 16) = v256;
                *(_QWORD *)(v256 + 24) = 0;
              }
              *v260 = v256;
            }
            v256 += 32;
            v258 -= 32;
          }
          while (v258);
        }
        v158 = *(_QWORD *)(v156 + 728);
        if (v158)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v158 + 24))(v158, v154);
        v159 = *v512 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v154 = v159 | *(_QWORD *)v154 & 7;
        *(_QWORD *)(v154 + 8) = v512;
        *(_QWORD *)(v159 + 8) = v154;
        *v512 = *v512 & 7 | v154;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = v4;
        LODWORD(v521) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v154, v152, (const llvm::MachineOperand *)&v521);
        if (v513[280])
        {
          v160 = *(_QWORD *)(v505 + 8);
          v161 = *(llvm::MachineFunction **)(v4 + 32);
          v520 = v519;
          if (v519)
            llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
          v162 = v160 + 558960;
          v163 = *((_QWORD *)v161 + 28);
          if (v163)
            *((_QWORD *)v161 + 28) = *(_QWORD *)v163;
          else
            v163 = sub_1C484358C((uint64_t)v161 + 128, 72, 3);
          *(_QWORD *)&v521 = v520;
          if (v520)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
            v520 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v163, v161, v162, (unsigned __int8 **)&v521, 0);
          if ((_QWORD)v521)
            llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
          if (v520)
            llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
          v169 = *(_QWORD *)(v4 + 40);
          *(_QWORD *)(v163 + 24) = v169;
          v170 = *(_QWORD *)(v169 + 32);
          v171 = *(unsigned int *)(v163 + 40);
          if ((_DWORD)v171)
          {
            v434 = *(_QWORD *)(v163 + 32);
            v435 = *(_QWORD *)(v170 + 40);
            v436 = 32 * v171;
            do
            {
              if (!*(_BYTE *)v434)
              {
                v437 = *(unsigned int *)(v434 + 4);
                if ((int)v437 >= 0)
                  v438 = (uint64_t *)(*(_QWORD *)(v435 + 272) + 8 * v437);
                else
                  v438 = (uint64_t *)(*(_QWORD *)(v435 + 24) + 16 * (v437 & 0x7FFFFFFF) + 8);
                v439 = *v438;
                if (*v438)
                {
                  v440 = *(_QWORD *)(v439 + 16);
                  *(_QWORD *)(v439 + 16) = v434;
                  *(_QWORD *)(v434 + 16) = v440;
                  if ((*(_BYTE *)(v434 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v434 + 24) = v439;
                  }
                  else
                  {
                    *(_QWORD *)(v434 + 24) = 0;
                    v438 = (uint64_t *)(v440 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v434 + 16) = v434;
                  *(_QWORD *)(v434 + 24) = 0;
                }
                *v438 = v434;
              }
              v434 += 32;
              v436 -= 32;
            }
            while (v436);
          }
          v172 = *(_QWORD *)(v170 + 728);
          if (v172)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v172 + 24))(v172, v163);
          v173 = *v499 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v163 = v173 | *(_QWORD *)v163 & 7;
          *(_QWORD *)(v163 + 8) = v499;
          *(_QWORD *)(v173 + 8) = v163;
          *v499 = *v499 & 7 | v163;
          *((_QWORD *)&v521 + 1) = 0;
          v522 = 0uLL;
          LODWORD(v521) = 0x1000000;
          DWORD1(v521) = v506;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v521);
          *((_QWORD *)&v521 + 1) = 0;
          v522 = 0uLL;
          LODWORD(v521) = 0;
          DWORD1(v521) = v498;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v521);
          v174 = *v516;
          LODWORD(v521) = 0;
          v175 = sub_1C4785D88((int)v513, v174, "LoadCMode", &v521);
          v176 = v521;
          LODWORD(v521) = 1;
          if (!v175)
            v176 = 0;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = v176;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v521);
          v177 = *v516;
          LODWORD(v521) = 0;
          v178 = sub_1C4785D88((int)v513, v177, "LoadSLCMode", &v521);
          v179 = v521;
          if (!v178)
            v179 = 1;
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = v179;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v521);
          v521 = 0u;
          v522 = 0u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v521);
          v4 = v500;
        }
        else
        {
          if (LOBYTE(v517[0]))
            v164 = 559296;
          else
            v164 = 559344;
          v165 = *(_QWORD *)(v505 + 8);
          v166 = *(llvm::MachineFunction **)(v4 + 32);
          v520 = v519;
          if (v519)
            llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
          v167 = v165 + v164;
          v168 = *((_QWORD *)v166 + 28);
          if (v168)
            *((_QWORD *)v166 + 28) = *(_QWORD *)v168;
          else
            v168 = sub_1C484358C((uint64_t)v166 + 128, 72, 3);
          *(_QWORD *)&v521 = v520;
          if (v520)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
            v520 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v168, v166, v167, (unsigned __int8 **)&v521, 0);
          if ((_QWORD)v521)
            llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
          if (v520)
            llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
          v180 = *(_QWORD *)(v4 + 40);
          *(_QWORD *)(v168 + 24) = v180;
          v181 = *(_QWORD *)(v180 + 32);
          v182 = *(unsigned int *)(v168 + 40);
          if ((_DWORD)v182)
          {
            v455 = *(_QWORD *)(v168 + 32);
            v456 = *(_QWORD *)(v181 + 40);
            v457 = 32 * v182;
            do
            {
              if (!*(_BYTE *)v455)
              {
                v458 = *(unsigned int *)(v455 + 4);
                if ((int)v458 >= 0)
                  v459 = (uint64_t *)(*(_QWORD *)(v456 + 272) + 8 * v458);
                else
                  v459 = (uint64_t *)(*(_QWORD *)(v456 + 24) + 16 * (v458 & 0x7FFFFFFF) + 8);
                v460 = *v459;
                if (*v459)
                {
                  v461 = *(_QWORD *)(v460 + 16);
                  *(_QWORD *)(v460 + 16) = v455;
                  *(_QWORD *)(v455 + 16) = v461;
                  if ((*(_BYTE *)(v455 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v455 + 24) = v460;
                  }
                  else
                  {
                    *(_QWORD *)(v455 + 24) = 0;
                    v459 = (uint64_t *)(v461 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v455 + 16) = v455;
                  *(_QWORD *)(v455 + 24) = 0;
                }
                *v459 = v455;
              }
              v455 += 32;
              v457 -= 32;
            }
            while (v457);
          }
          v183 = *(_QWORD *)(v181 + 728);
          if (v183)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v183 + 24))(v183, v168);
          v184 = *v499 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v168 = v184 | *(_QWORD *)v168 & 7;
          *(_QWORD *)(v168 + 8) = v499;
          *(_QWORD *)(v184 + 8) = v168;
          *v499 = *v499 & 7 | v168;
          *((_QWORD *)&v521 + 1) = 0;
          v522 = 0uLL;
          LODWORD(v521) = 0x1000000;
          DWORD1(v521) = v506;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v166, (const llvm::MachineOperand *)&v521);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v166, (const llvm::MachineOperand *)v518);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v166, (const llvm::MachineOperand *)v517);
          if (v513[310])
          {
            v185 = 1;
          }
          else if (v513[311])
          {
            v185 = 2;
          }
          else
          {
            v185 = 3;
            if (!v513[312])
              v185 = 0;
          }
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = v185;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v166, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v166, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v166, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v166, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v166, (const llvm::MachineOperand *)&v521);
          v521 = 0u;
          v522 = 0u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v166, (const llvm::MachineOperand *)&v521);
        }
        v263 = *(_QWORD *)(v505 + 8);
        v264 = *(llvm::MachineFunction **)(v4 + 32);
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v265 = v263 + 239568;
        v266 = *((_QWORD *)v264 + 28);
        if (v266)
          *((_QWORD *)v264 + 28) = *(_QWORD *)v266;
        else
          v266 = sub_1C484358C((uint64_t)v264 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v266, v264, v265, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v267 = *(_QWORD *)(v4 + 40);
        *(_QWORD *)(v266 + 24) = v267;
        v268 = *(_QWORD *)(v267 + 32);
        v269 = *(unsigned int *)(v266 + 40);
        if ((_DWORD)v269)
        {
          v300 = *(_QWORD *)(v266 + 32);
          v301 = *(_QWORD *)(v268 + 40);
          v302 = 32 * v269;
          do
          {
            if (!*(_BYTE *)v300)
            {
              v303 = *(unsigned int *)(v300 + 4);
              if ((int)v303 >= 0)
                v304 = (uint64_t *)(*(_QWORD *)(v301 + 272) + 8 * v303);
              else
                v304 = (uint64_t *)(*(_QWORD *)(v301 + 24) + 16 * (v303 & 0x7FFFFFFF) + 8);
              v305 = *v304;
              if (*v304)
              {
                v306 = *(_QWORD *)(v305 + 16);
                *(_QWORD *)(v305 + 16) = v300;
                *(_QWORD *)(v300 + 16) = v306;
                if ((*(_BYTE *)(v300 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v300 + 24) = v305;
                }
                else
                {
                  *(_QWORD *)(v300 + 24) = 0;
                  v304 = (uint64_t *)(v306 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v300 + 16) = v300;
                *(_QWORD *)(v300 + 24) = 0;
              }
              *v304 = v300;
            }
            v300 += 32;
            v302 -= 32;
          }
          while (v302);
        }
        v270 = *(_QWORD *)(v268 + 728);
        if (v270)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v270 + 24))(v270, v266);
        v271 = *v499 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v266 = v271 | *(_QWORD *)v266 & 7;
        *(_QWORD *)(v266 + 8) = v499;
        *(_QWORD *)(v271 + 8) = v266;
        *v499 = *v499 & 7 | v266;
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v264, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = v506;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v264, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v264, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = v493;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v264, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v264, (const llvm::MachineOperand *)&v521);
        v522 = 0uLL;
        v521 = 0x201000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v264, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v264, (const llvm::MachineOperand *)&v521);
        v521 = 0u;
        v522 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v264, (const llvm::MachineOperand *)&v521);
        if (v513[280])
        {
          v272 = *(_QWORD *)(v505 + 8);
          v273 = *(llvm::MachineFunction **)(v4 + 32);
          v520 = v519;
          if (v519)
            llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
          v274 = v272 + 636960;
          v275 = *((_QWORD *)v273 + 28);
          if (v275)
            *((_QWORD *)v273 + 28) = *(_QWORD *)v275;
          else
            v275 = sub_1C484358C((uint64_t)v273 + 128, 72, 3);
          *(_QWORD *)&v521 = v520;
          if (v520)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
            v520 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v275, v273, v274, (unsigned __int8 **)&v521, 0);
          if ((_QWORD)v521)
            llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
          if (v520)
            llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
          v281 = *(_QWORD *)(v4 + 40);
          *(_QWORD *)(v275 + 24) = v281;
          v282 = *(_QWORD *)(v281 + 32);
          v283 = *(unsigned int *)(v275 + 40);
          if ((_DWORD)v283)
          {
            v441 = *(_QWORD *)(v275 + 32);
            v442 = *(_QWORD *)(v282 + 40);
            v443 = 32 * v283;
            do
            {
              if (!*(_BYTE *)v441)
              {
                v444 = *(unsigned int *)(v441 + 4);
                if ((int)v444 >= 0)
                  v445 = (uint64_t *)(*(_QWORD *)(v442 + 272) + 8 * v444);
                else
                  v445 = (uint64_t *)(*(_QWORD *)(v442 + 24) + 16 * (v444 & 0x7FFFFFFF) + 8);
                v446 = *v445;
                if (*v445)
                {
                  v447 = *(_QWORD *)(v446 + 16);
                  *(_QWORD *)(v446 + 16) = v441;
                  *(_QWORD *)(v441 + 16) = v447;
                  if ((*(_BYTE *)(v441 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v441 + 24) = v446;
                  }
                  else
                  {
                    *(_QWORD *)(v441 + 24) = 0;
                    v445 = (uint64_t *)(v447 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v441 + 16) = v441;
                  *(_QWORD *)(v441 + 24) = 0;
                }
                *v445 = v441;
              }
              v441 += 32;
              v443 -= 32;
            }
            while (v443);
          }
          v284 = *(_QWORD *)(v282 + 728);
          if (v284)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v284 + 24))(v284, v275);
          v285 = *v499 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v275 = v285 | *(_QWORD *)v275 & 7;
          *(_QWORD *)(v275 + 8) = v499;
          *(_QWORD *)(v285 + 8) = v275;
          *v499 = *v499 & 7 | v275;
          *((_QWORD *)&v521 + 1) = 0;
          v522 = 0uLL;
          LODWORD(v521) = 0;
          DWORD1(v521) = v490;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v275, v273, (const llvm::MachineOperand *)&v521);
          *((_QWORD *)&v521 + 1) = 0;
          v522 = 0uLL;
          LODWORD(v521) = 0;
          DWORD1(v521) = v498;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v275, v273, (const llvm::MachineOperand *)&v521);
          v286 = *v516;
          LODWORD(v521) = 0;
          v287 = sub_1C4785D88((int)v513, v286, "LoadCMode", &v521);
          v288 = v521;
          LODWORD(v521) = 1;
          if (!v287)
            v288 = 0;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = v288;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v275, v273, (const llvm::MachineOperand *)&v521);
          v289 = *v516;
          LODWORD(v521) = 0;
          v290 = sub_1C4785D88((int)v513, v289, "LoadSLCMode", &v521);
          v291 = v521;
          if (!v290)
            v291 = 1;
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = v291;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v275, v273, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v275, v273, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v275, v273, (const llvm::MachineOperand *)&v521);
          v522 = 0uLL;
          v521 = 0x200000000uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v275, v273, (const llvm::MachineOperand *)&v521);
          v293 = v514;
          v292 = v515;
        }
        else
        {
          if (LOBYTE(v517[0]))
            v276 = 637296;
          else
            v276 = 637344;
          v277 = *(_QWORD *)(v505 + 8);
          v278 = *(llvm::MachineFunction **)(v4 + 32);
          v520 = v519;
          if (v519)
            llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
          v279 = v277 + v276;
          v280 = *((_QWORD *)v278 + 28);
          if (v280)
            *((_QWORD *)v278 + 28) = *(_QWORD *)v280;
          else
            v280 = sub_1C484358C((uint64_t)v278 + 128, 72, 3);
          *(_QWORD *)&v521 = v520;
          if (v520)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
            v520 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v280, v278, v279, (unsigned __int8 **)&v521, 0);
          if ((_QWORD)v521)
            llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
          if (v520)
            llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
          v294 = *(_QWORD *)(v4 + 40);
          *(_QWORD *)(v280 + 24) = v294;
          v295 = *(_QWORD *)(v294 + 32);
          v296 = *(unsigned int *)(v280 + 40);
          if ((_DWORD)v296)
          {
            v462 = *(_QWORD *)(v280 + 32);
            v463 = *(_QWORD *)(v295 + 40);
            v464 = 32 * v296;
            do
            {
              if (!*(_BYTE *)v462)
              {
                v465 = *(unsigned int *)(v462 + 4);
                if ((int)v465 >= 0)
                  v466 = (uint64_t *)(*(_QWORD *)(v463 + 272) + 8 * v465);
                else
                  v466 = (uint64_t *)(*(_QWORD *)(v463 + 24) + 16 * (v465 & 0x7FFFFFFF) + 8);
                v467 = *v466;
                if (*v466)
                {
                  v468 = *(_QWORD *)(v467 + 16);
                  *(_QWORD *)(v467 + 16) = v462;
                  *(_QWORD *)(v462 + 16) = v468;
                  if ((*(_BYTE *)(v462 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v462 + 24) = v467;
                  }
                  else
                  {
                    *(_QWORD *)(v462 + 24) = 0;
                    v466 = (uint64_t *)(v468 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v462 + 16) = v462;
                  *(_QWORD *)(v462 + 24) = 0;
                }
                *v466 = v462;
              }
              v462 += 32;
              v464 -= 32;
            }
            while (v464);
          }
          v297 = *(_QWORD *)(v295 + 728);
          if (v297)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v297 + 24))(v297, v280);
          v298 = *v499 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v280 = v298 | *(_QWORD *)v280 & 7;
          *(_QWORD *)(v280 + 8) = v499;
          *(_QWORD *)(v298 + 8) = v280;
          *v499 = *v499 & 7 | v280;
          *((_QWORD *)&v521 + 1) = 0;
          v522 = 0uLL;
          LODWORD(v521) = 0;
          DWORD1(v521) = v490;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v280, v278, (const llvm::MachineOperand *)&v521);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v280, v278, (const llvm::MachineOperand *)v518);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v280, v278, (const llvm::MachineOperand *)v517);
          if (v513[310])
          {
            v299 = 1;
          }
          else if (v513[311])
          {
            v299 = 2;
          }
          else
          {
            v299 = 3;
            if (!v513[312])
              v299 = 0;
          }
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = v299;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v280, v278, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v280, v278, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v280, v278, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v280, v278, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v280, v278, (const llvm::MachineOperand *)&v521);
          v522 = 0uLL;
          v521 = 0x200000000uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v280, v278, (const llvm::MachineOperand *)&v521);
          *(_DWORD *)(*(_QWORD *)(v280 + 32) + 32) &= ~0x4000000u;
          v307 = *(_QWORD *)(v280 + 32);
          if (!*(_DWORD *)(v307 + 64))
            *(_DWORD *)(v307 + 64) &= ~0x4000000u;
          if (LOBYTE(v517[0]))
            v308 = 139344;
          else
            v308 = 139392;
          v309 = *(_QWORD *)(v505 + 8);
          v310 = *(llvm::MachineFunction **)(v4 + 32);
          v520 = v519;
          v293 = v514;
          v292 = v515;
          if (v519)
            llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
          v311 = v309 + v308;
          v312 = *((_QWORD *)v310 + 28);
          if (v312)
            *((_QWORD *)v310 + 28) = *(_QWORD *)v312;
          else
            v312 = sub_1C484358C((uint64_t)v310 + 128, 72, 3);
          *(_QWORD *)&v521 = v520;
          if (v520)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
            v520 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v312, v310, v311, (unsigned __int8 **)&v521, 0);
          if ((_QWORD)v521)
            llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
          if (v520)
            llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
          v313 = *(_QWORD *)(v4 + 40);
          *(_QWORD *)(v312 + 24) = v313;
          v314 = *(_QWORD *)(v313 + 32);
          v315 = *(unsigned int *)(v312 + 40);
          if ((_DWORD)v315)
          {
            v469 = *(_QWORD *)(v312 + 32);
            v470 = *(_QWORD *)(v314 + 40);
            v471 = 32 * v315;
            do
            {
              if (!*(_BYTE *)v469)
              {
                v472 = *(unsigned int *)(v469 + 4);
                if ((int)v472 >= 0)
                  v473 = (uint64_t *)(*(_QWORD *)(v470 + 272) + 8 * v472);
                else
                  v473 = (uint64_t *)(*(_QWORD *)(v470 + 24) + 16 * (v472 & 0x7FFFFFFF) + 8);
                v474 = *v473;
                if (*v473)
                {
                  v475 = *(_QWORD *)(v474 + 16);
                  *(_QWORD *)(v474 + 16) = v469;
                  *(_QWORD *)(v469 + 16) = v475;
                  if ((*(_BYTE *)(v469 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v469 + 24) = v474;
                  }
                  else
                  {
                    *(_QWORD *)(v469 + 24) = 0;
                    v473 = (uint64_t *)(v475 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v469 + 16) = v469;
                  *(_QWORD *)(v469 + 24) = 0;
                }
                *v473 = v469;
              }
              v469 += 32;
              v471 -= 32;
            }
            while (v471);
          }
          v316 = *(_QWORD *)(v314 + 728);
          if (v316)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v316 + 24))(v316, v312);
          v317 = *v499 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v312 = v317 | *(_QWORD *)v312 & 7;
          *(_QWORD *)(v312 + 8) = v499;
          *(_QWORD *)(v317 + 8) = v312;
          *v499 = *v499 & 7 | v312;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v312, v310, (const llvm::MachineOperand *)v518);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v312, v310, (const llvm::MachineOperand *)v517);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v312, v310, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v312, v310, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v312, v310, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v312, v310, (const llvm::MachineOperand *)&v521);
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v312, v310, (const llvm::MachineOperand *)&v521);
          v522 = 0uLL;
          v521 = 0x200000000uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v312, v310, (const llvm::MachineOperand *)&v521);
        }
        v318 = *(_QWORD *)(v505 + 8);
        v319 = (llvm::MachineFunction *)v293[4];
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v320 = *((_QWORD *)v319 + 28);
        if (v320)
          *((_QWORD *)v319 + 28) = *(_QWORD *)v320;
        else
          v320 = sub_1C484358C((uint64_t)v319 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v320, v319, v318, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v321 = v293[5];
        *(_QWORD *)(v320 + 24) = v321;
        v322 = *(_QWORD *)(v321 + 32);
        v323 = *(unsigned int *)(v320 + 40);
        if ((_DWORD)v323)
        {
          v383 = *(_QWORD *)(v320 + 32);
          v384 = *(_QWORD *)(v322 + 40);
          v385 = 32 * v323;
          do
          {
            if (!*(_BYTE *)v383)
            {
              v386 = *(unsigned int *)(v383 + 4);
              if ((int)v386 >= 0)
                v387 = (uint64_t *)(*(_QWORD *)(v384 + 272) + 8 * v386);
              else
                v387 = (uint64_t *)(*(_QWORD *)(v384 + 24) + 16 * (v386 & 0x7FFFFFFF) + 8);
              v388 = *v387;
              if (*v387)
              {
                v389 = *(_QWORD *)(v388 + 16);
                *(_QWORD *)(v388 + 16) = v383;
                *(_QWORD *)(v383 + 16) = v389;
                if ((*(_BYTE *)(v383 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v383 + 24) = v388;
                }
                else
                {
                  *(_QWORD *)(v383 + 24) = 0;
                  v387 = (uint64_t *)(v389 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v383 + 16) = v383;
                *(_QWORD *)(v383 + 24) = 0;
              }
              *v387 = v383;
            }
            v383 += 32;
            v385 -= 32;
          }
          while (v385);
        }
        v324 = *(_QWORD *)(v322 + 728);
        if (v324)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v324 + 24))(v324, v320);
        v325 = *v494 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v320 = v325 | *(_QWORD *)v320 & 7;
        *(_QWORD *)(v320 + 8) = v494;
        *(_QWORD *)(v325 + 8) = v320;
        *v494 = *v494 & 7 | v320;
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0x1000000;
        DWORD1(v521) = v509;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v320, v319, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = v503;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v320, v319, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = v3;
        LODWORD(v521) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v320, v319, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = v506;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v320, v319, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = v4;
        LODWORD(v521) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v320, v319, (const llvm::MachineOperand *)&v521);
        v326 = *(_QWORD *)(v505 + 8);
        if (v504)
          v327 = 132768;
        else
          v327 = 136128;
        v328 = *(llvm::MachineFunction **)(v7 + 32);
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v329 = v326 + v327;
        v330 = *((_QWORD *)v328 + 28);
        if (v330)
          *((_QWORD *)v328 + 28) = *(_QWORD *)v330;
        else
          v330 = sub_1C484358C((uint64_t)v328 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v330, v328, v329, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v331 = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(v330 + 24) = v331;
        v332 = *(_QWORD *)(v331 + 32);
        v333 = *(unsigned int *)(v330 + 40);
        if ((_DWORD)v333)
        {
          v390 = *(_QWORD *)(v330 + 32);
          v391 = *(_QWORD *)(v332 + 40);
          v392 = 32 * v333;
          do
          {
            if (!*(_BYTE *)v390)
            {
              v393 = *(unsigned int *)(v390 + 4);
              if ((int)v393 >= 0)
                v394 = (uint64_t *)(*(_QWORD *)(v391 + 272) + 8 * v393);
              else
                v394 = (uint64_t *)(*(_QWORD *)(v391 + 24) + 16 * (v393 & 0x7FFFFFFF) + 8);
              v395 = *v394;
              if (*v394)
              {
                v396 = *(_QWORD *)(v395 + 16);
                *(_QWORD *)(v395 + 16) = v390;
                *(_QWORD *)(v390 + 16) = v396;
                if ((*(_BYTE *)(v390 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v390 + 24) = v395;
                }
                else
                {
                  *(_QWORD *)(v390 + 24) = 0;
                  v394 = (uint64_t *)(v396 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v390 + 16) = v390;
                *(_QWORD *)(v390 + 24) = 0;
              }
              *v394 = v390;
            }
            v390 += 32;
            v392 -= 32;
          }
          while (v392);
        }
        v334 = *(_QWORD *)(v332 + 728);
        if (v334)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v334 + 24))(v334, v330);
        v335 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v330 = v335 | *(_QWORD *)v330 & 7;
        *(_QWORD *)(v330 + 8) = v495;
        *(_QWORD *)(v335 + 8) = v330;
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v7 + 48) & 7 | v330;
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0x1000000;
        DWORD1(v521) = v508;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v330, v328, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v330, v328, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v330, v328, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v330, v328, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v330, v328, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v330, v328, (const llvm::MachineOperand *)&v521);
        v521 = 0u;
        v522 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v330, v328, (const llvm::MachineOperand *)&v521);
        v336 = *(_QWORD *)(v505 + 8);
        v337 = *(llvm::MachineFunction **)(v7 + 32);
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v338 = v336 + 239664;
        v339 = *((_QWORD *)v337 + 28);
        if (v339)
          *((_QWORD *)v337 + 28) = *(_QWORD *)v339;
        else
          v339 = sub_1C484358C((uint64_t)v337 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v339, v337, v338, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v340 = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(v339 + 24) = v340;
        v341 = *(_QWORD *)(v340 + 32);
        v342 = *(unsigned int *)(v339 + 40);
        if ((_DWORD)v342)
        {
          v397 = *(_QWORD *)(v339 + 32);
          v398 = *(_QWORD *)(v341 + 40);
          v399 = 32 * v342;
          do
          {
            if (!*(_BYTE *)v397)
            {
              v400 = *(unsigned int *)(v397 + 4);
              if ((int)v400 >= 0)
                v401 = (uint64_t *)(*(_QWORD *)(v398 + 272) + 8 * v400);
              else
                v401 = (uint64_t *)(*(_QWORD *)(v398 + 24) + 16 * (v400 & 0x7FFFFFFF) + 8);
              v402 = *v401;
              if (*v401)
              {
                v403 = *(_QWORD *)(v402 + 16);
                *(_QWORD *)(v402 + 16) = v397;
                *(_QWORD *)(v397 + 16) = v403;
                if ((*(_BYTE *)(v397 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v397 + 24) = v402;
                }
                else
                {
                  *(_QWORD *)(v397 + 24) = 0;
                  v401 = (uint64_t *)(v403 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v397 + 16) = v397;
                *(_QWORD *)(v397 + 24) = 0;
              }
              *v401 = v397;
            }
            v397 += 32;
            v399 -= 32;
          }
          while (v399);
        }
        v343 = *(_QWORD *)(v341 + 728);
        if (v343)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v343 + 24))(v343, v339);
        v344 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v339 = v344 | *(_QWORD *)v339 & 7;
        *(_QWORD *)(v339 + 8) = v495;
        *(_QWORD *)(v344 + 8) = v339;
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v7 + 48) & 7 | v339;
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v339, v337, (const llvm::MachineOperand *)&v521);
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = v508;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v339, v337, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v339, v337, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 32;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v339, v337, (const llvm::MachineOperand *)&v521);
        v522 = 0uLL;
        v521 = 0x201000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v339, v337, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v339, v337, (const llvm::MachineOperand *)&v521);
        v521 = 0u;
        v522 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v339, v337, (const llvm::MachineOperand *)&v521);
        v345 = *(_QWORD *)(v505 + 8);
        v346 = *(llvm::MachineFunction **)(v7 + 32);
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v347 = v345 + 555648;
        v348 = *((_QWORD *)v346 + 28);
        if (v348)
          *((_QWORD *)v346 + 28) = *(_QWORD *)v348;
        else
          v348 = sub_1C484358C((uint64_t)v346 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v348, v346, v347, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v349 = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(v348 + 24) = v349;
        v350 = *(_QWORD *)(v349 + 32);
        v351 = *(unsigned int *)(v348 + 40);
        if ((_DWORD)v351)
        {
          v404 = *(_QWORD *)(v348 + 32);
          v405 = *(_QWORD *)(v350 + 40);
          v406 = 32 * v351;
          do
          {
            if (!*(_BYTE *)v404)
            {
              v407 = *(unsigned int *)(v404 + 4);
              if ((int)v407 >= 0)
                v408 = (uint64_t *)(*(_QWORD *)(v405 + 272) + 8 * v407);
              else
                v408 = (uint64_t *)(*(_QWORD *)(v405 + 24) + 16 * (v407 & 0x7FFFFFFF) + 8);
              v409 = *v408;
              if (*v408)
              {
                v410 = *(_QWORD *)(v409 + 16);
                *(_QWORD *)(v409 + 16) = v404;
                *(_QWORD *)(v404 + 16) = v410;
                if ((*(_BYTE *)(v404 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v404 + 24) = v409;
                }
                else
                {
                  *(_QWORD *)(v404 + 24) = 0;
                  v408 = (uint64_t *)(v410 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v404 + 16) = v404;
                *(_QWORD *)(v404 + 24) = 0;
              }
              *v408 = v404;
            }
            v404 += 32;
            v406 -= 32;
          }
          while (v406);
        }
        v352 = *(_QWORD *)(v350 + 728);
        if (v352)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v352 + 24))(v352, v348);
        v353 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v348 = v353 | *(_QWORD *)v348 & 7;
        *(_QWORD *)(v348 + 8) = v495;
        *(_QWORD *)(v353 + 8) = v348;
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v7 + 48) & 7 | v348;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = v510;
        LODWORD(v521) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v348, v346, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v348, v346, (const llvm::MachineOperand *)&v521);
        v354 = *(_QWORD *)(v505 + 8);
        v355 = *(llvm::MachineFunction **)(v7 + 32);
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v356 = v354 + 555600;
        v357 = *((_QWORD *)v355 + 28);
        if (v357)
          *((_QWORD *)v355 + 28) = *(_QWORD *)v357;
        else
          v357 = sub_1C484358C((uint64_t)v355 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v357, v355, v356, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v358 = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(v357 + 24) = v358;
        v359 = *(_QWORD *)(v358 + 32);
        v360 = *(unsigned int *)(v357 + 40);
        if ((_DWORD)v360)
        {
          v411 = *(_QWORD *)(v357 + 32);
          v412 = *(_QWORD *)(v359 + 40);
          v413 = 32 * v360;
          do
          {
            if (!*(_BYTE *)v411)
            {
              v414 = *(unsigned int *)(v411 + 4);
              if ((int)v414 >= 0)
                v415 = (uint64_t *)(*(_QWORD *)(v412 + 272) + 8 * v414);
              else
                v415 = (uint64_t *)(*(_QWORD *)(v412 + 24) + 16 * (v414 & 0x7FFFFFFF) + 8);
              v416 = *v415;
              if (*v415)
              {
                v417 = *(_QWORD *)(v416 + 16);
                *(_QWORD *)(v416 + 16) = v411;
                *(_QWORD *)(v411 + 16) = v417;
                if ((*(_BYTE *)(v411 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v411 + 24) = v416;
                }
                else
                {
                  *(_QWORD *)(v411 + 24) = 0;
                  v415 = (uint64_t *)(v417 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v411 + 16) = v411;
                *(_QWORD *)(v411 + 24) = 0;
              }
              *v415 = v411;
            }
            v411 += 32;
            v413 -= 32;
          }
          while (v413);
        }
        v361 = *(_QWORD *)(v359 + 728);
        if (v361)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v361 + 24))(v361, v357);
        v362 = *v495 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v357 = v362 | *(_QWORD *)v357 & 7;
        *(_QWORD *)(v357 + 8) = v495;
        *(_QWORD *)(v362 + 8) = v357;
        *v495 = *v495 & 7 | v357;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = v292;
        LODWORD(v521) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v357, v355, (const llvm::MachineOperand *)&v521);
        v363 = *(_QWORD *)(v505 + 8);
        v364 = (llvm::MachineFunction *)v292[4];
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v365 = v363 + 583488;
        v366 = *((_QWORD *)v364 + 28);
        if (v366)
          *((_QWORD *)v364 + 28) = *(_QWORD *)v366;
        else
          v366 = sub_1C484358C((uint64_t)v364 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v366, v364, v365, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v367 = v292[5];
        *(_QWORD *)(v366 + 24) = v367;
        v368 = *(_QWORD *)(v367 + 32);
        v369 = *(unsigned int *)(v366 + 40);
        if ((_DWORD)v369)
        {
          v418 = *(_QWORD *)(v366 + 32);
          v419 = *(_QWORD *)(v368 + 40);
          v420 = 32 * v369;
          do
          {
            if (!*(_BYTE *)v418)
            {
              v421 = *(unsigned int *)(v418 + 4);
              if ((int)v421 >= 0)
                v422 = (uint64_t *)(*(_QWORD *)(v419 + 272) + 8 * v421);
              else
                v422 = (uint64_t *)(*(_QWORD *)(v419 + 24) + 16 * (v421 & 0x7FFFFFFF) + 8);
              v423 = *v422;
              if (*v422)
              {
                v424 = *(_QWORD *)(v423 + 16);
                *(_QWORD *)(v423 + 16) = v418;
                *(_QWORD *)(v418 + 16) = v424;
                if ((*(_BYTE *)(v418 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v418 + 24) = v423;
                }
                else
                {
                  *(_QWORD *)(v418 + 24) = 0;
                  v422 = (uint64_t *)(v424 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v418 + 16) = v418;
                *(_QWORD *)(v418 + 24) = 0;
              }
              *v422 = v418;
            }
            v418 += 32;
            v420 -= 32;
          }
          while (v420);
        }
        v370 = *(_QWORD *)(v368 + 728);
        if (v370)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v370 + 24))(v370, v366);
        v371 = v292[6] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v366 = v371 | *(_QWORD *)v366 & 7;
        *(_QWORD *)(v366 + 8) = v496;
        *(_QWORD *)(v371 + 8) = v366;
        v292[6] = v292[6] & 7 | v366;
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v366, v364, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v366, v364, (const llvm::MachineOperand *)&v521);
        v521 = 0u;
        v522 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v366, v364, (const llvm::MachineOperand *)&v521);
        v372 = (unint64_t *)v292[7];
        v373 = *(_QWORD *)(v505 + 8);
        v374 = (llvm::MachineFunction *)v292[4];
        v520 = v519;
        if (v519)
          llvm::MetadataTracking::track((uint64_t)&v520, v519, 2);
        v375 = v373 + 912;
        v376 = *((_QWORD *)v374 + 28);
        if (v376)
          *((_QWORD *)v374 + 28) = *(_QWORD *)v376;
        else
          v376 = sub_1C484358C((uint64_t)v374 + 128, 72, 3);
        *(_QWORD *)&v521 = v520;
        if (v520)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v520, v520, (uint64_t)&v521);
          v520 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v376, v374, v375, (unsigned __int8 **)&v521, 0);
        if ((_QWORD)v521)
          llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
        if (v520)
          llvm::MetadataTracking::untrack((uint64_t)&v520, v520);
        v377 = v515[5];
        *(_QWORD *)(v376 + 24) = v377;
        v378 = *(_QWORD *)(v377 + 32);
        v379 = *(unsigned int *)(v376 + 40);
        if ((_DWORD)v379)
        {
          v425 = *(_QWORD *)(v376 + 32);
          v426 = *(_QWORD *)(v378 + 40);
          v427 = 32 * v379;
          do
          {
            if (!*(_BYTE *)v425)
            {
              v428 = *(unsigned int *)(v425 + 4);
              if ((int)v428 >= 0)
                v429 = (uint64_t *)(*(_QWORD *)(v426 + 272) + 8 * v428);
              else
                v429 = (uint64_t *)(*(_QWORD *)(v426 + 24) + 16 * (v428 & 0x7FFFFFFF) + 8);
              v430 = *v429;
              if (*v429)
              {
                v431 = *(_QWORD *)(v430 + 16);
                *(_QWORD *)(v430 + 16) = v425;
                *(_QWORD *)(v425 + 16) = v431;
                if ((*(_BYTE *)(v425 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v425 + 24) = v430;
                }
                else
                {
                  *(_QWORD *)(v425 + 24) = 0;
                  v429 = (uint64_t *)(v431 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v425 + 16) = v425;
                *(_QWORD *)(v425 + 24) = 0;
              }
              *v429 = v425;
            }
            v425 += 32;
            v427 -= 32;
          }
          while (v427);
        }
        v380 = *(_QWORD *)(v378 + 728);
        if (v380)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v380 + 24))(v380, v376);
        v381 = *v372 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v376 = v381 | *(_QWORD *)v376 & 7;
        *(_QWORD *)(v376 + 8) = v372;
        *(_QWORD *)(v381 + 8) = v376;
        *v372 = *v372 & 7 | v376;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v376, v374, *(const llvm::MachineOperand **)(v511 + 32));
        *((_QWORD *)&v521 + 1) = 0;
        v522 = 0uLL;
        LODWORD(v521) = 0;
        DWORD1(v521) = v509;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v376, v374, (const llvm::MachineOperand *)&v521);
        v382 = v511;
        if ((*(_BYTE *)v511 & 4) == 0)
        {
          v382 = v511;
          if ((*(_WORD *)(v511 + 44) & 8) != 0)
          {
            v382 = v511;
            do
              v382 = *(_QWORD *)(v382 + 8);
            while ((*(_WORD *)(v382 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v511 + 24) + 40, v511, *(_QWORD *)(v382 + 8));
        v205 = v519;
        v5 = v497;
        if (!v519)
          return v5;
        v206 = &v519;
        goto LABEL_640;
      case 0x109u:
        v71 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v8, "", 0);
        *(_QWORD *)(v8[3] + 16 * (v71 & 0x7FFFFFFF)) = &off_1E7F98468;
        v76 = v8[1];
        if (v76)
          (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v76 + 24))(v76, v71);
        v73 = *(_QWORD *)(v16 + 8);
        v74 = v73 + 119664;
        v75 = 61776;
        goto LABEL_92;
      case 0x10Au:
        v71 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v8, "", 0);
        *(_QWORD *)(v8[3] + 16 * (v71 & 0x7FFFFFFF)) = &off_1E7F982A8;
        v72 = v8[1];
        if (v72)
          (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v72 + 24))(v72, v71);
        v73 = *(_QWORD *)(v16 + 8);
        v74 = v73 + 119856;
        v75 = 48000;
LABEL_92:
        sub_1C481C67C(a2, v74, v73 + v75, v71);
        return v5;
      default:
        if (((_DWORD)v15 - 1125) > 0xB)
          goto LABEL_79;
        v17 = 1 << ((_BYTE)v15 - 101);
        if ((v17 & 0x303) != 0)
        {
          if (!*(_BYTE *)(*(_QWORD *)v9 + 301))
            return v5;
          v18 = a2;
          v19 = v16;
          v20 = (uint64_t)v8;
          v21 = 0;
LABEL_14:
          sub_1C481BB68(v18, v19, v20, v21);
          return v5;
        }
        if ((v17 & 0xC0C) != 0)
        {
          if (!*(_BYTE *)(*(_QWORD *)v9 + 301))
            return v5;
          v18 = a2;
          v19 = v16;
          v20 = (uint64_t)v8;
          v21 = 1;
          goto LABEL_14;
        }
LABEL_79:
        v67 = *(unsigned __int8 **)(a2 + 56);
        *(_QWORD *)&v517[0] = v67;
        if (v67)
          llvm::MetadataTracking::track((uint64_t)v517, v67, 2);
        v5 = *(uint64_t **)(a2 + 24);
        v68 = *(_QWORD *)(v16 + 8) + 239904;
        if ((*(_WORD *)(a2 + 44) & 4) != 0)
        {
          v69 = (llvm::MachineFunction *)v5[4];
          *(_QWORD *)&v518[0] = *(_QWORD *)&v517[0];
          if (*(_QWORD *)&v517[0])
            llvm::MetadataTracking::track((uint64_t)v518, *(unsigned __int8 **)&v517[0], 2);
          v70 = *((_QWORD *)v69 + 28);
          if (v70)
            *((_QWORD *)v69 + 28) = *(_QWORD *)v70;
          else
            v70 = sub_1C484358C((uint64_t)v69 + 128, 72, 3);
          *(_QWORD *)&v521 = *(_QWORD *)&v518[0];
          if (*(_QWORD *)&v518[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v518, *(unsigned __int8 **)&v518[0], (uint64_t)&v521);
            *(_QWORD *)&v518[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v70, v69, v68, (unsigned __int8 **)&v521, 0);
          if ((_QWORD)v521)
            llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
          if (*(_QWORD *)&v518[0])
            llvm::MetadataTracking::untrack((uint64_t)v518, *(unsigned __int8 **)&v518[0]);
          if (v5 + 6 != (uint64_t *)a2 && (*(_WORD *)(a2 + 44) & 4) != 0)
            *(_WORD *)(v70 + 44) |= 0xCu;
          sub_1C512CA10(v5 + 5, (uint64_t *)a2, v70);
        }
        else
        {
          v69 = (llvm::MachineFunction *)v5[4];
          *(_QWORD *)&v518[0] = *(_QWORD *)&v517[0];
          if (*(_QWORD *)&v517[0])
            llvm::MetadataTracking::track((uint64_t)v518, *(unsigned __int8 **)&v517[0], 2);
          v70 = *((_QWORD *)v69 + 28);
          if (v70)
            *((_QWORD *)v69 + 28) = *(_QWORD *)v70;
          else
            v70 = sub_1C484358C((uint64_t)v69 + 128, 72, 3);
          *(_QWORD *)&v521 = *(_QWORD *)&v518[0];
          if (*(_QWORD *)&v518[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v518, *(unsigned __int8 **)&v518[0], (uint64_t)&v521);
            *(_QWORD *)&v518[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v70, v69, v68, (unsigned __int8 **)&v521, 0);
          if ((_QWORD)v521)
            llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
          if (*(_QWORD *)&v518[0])
            llvm::MetadataTracking::untrack((uint64_t)v518, *(unsigned __int8 **)&v518[0]);
          v186 = v5[5];
          *(_QWORD *)(v70 + 24) = v186;
          v187 = *(_QWORD *)(v186 + 32);
          v188 = *(unsigned int *)(v70 + 40);
          if ((_DWORD)v188)
          {
            v476 = *(_QWORD *)(v70 + 32);
            v477 = *(_QWORD *)(v187 + 40);
            v478 = 32 * v188;
            do
            {
              if (!*(_BYTE *)v476)
              {
                v479 = *(unsigned int *)(v476 + 4);
                if ((int)v479 >= 0)
                  v480 = (uint64_t *)(*(_QWORD *)(v477 + 272) + 8 * v479);
                else
                  v480 = (uint64_t *)(*(_QWORD *)(v477 + 24) + 16 * (v479 & 0x7FFFFFFF) + 8);
                v481 = *v480;
                if (*v480)
                {
                  v482 = *(_QWORD *)(v481 + 16);
                  *(_QWORD *)(v481 + 16) = v476;
                  *(_QWORD *)(v476 + 16) = v482;
                  if ((*(_BYTE *)(v476 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v476 + 24) = v481;
                  }
                  else
                  {
                    *(_QWORD *)(v476 + 24) = 0;
                    v480 = (uint64_t *)(v482 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v476 + 16) = v476;
                  *(_QWORD *)(v476 + 24) = 0;
                }
                *v480 = v476;
              }
              v476 += 32;
              v478 -= 32;
            }
            while (v478);
          }
          v189 = *(_QWORD *)(v187 + 728);
          if (v189)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v189 + 24))(v189, v70);
          v190 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v70 = v190 | *(_QWORD *)v70 & 7;
          *(_QWORD *)(v70 + 8) = a2;
          *(_QWORD *)(v190 + 8) = v70;
          *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v70;
        }
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v521);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + 32));
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0x100000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v521);
        v522 = 0uLL;
        v521 = 0x201000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v521);
        v521 = 0u;
        v522 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v521);
        v191 = *(unsigned __int8 **)(a2 + 32);
        v192 = *v191;
        if (v192 == 1)
        {
          v193 = 0;
          v194 = *((_QWORD *)v191 + 2);
          v195 = 11972;
        }
        else
        {
          v194 = 0;
          v193 = *((_DWORD *)v191 + 1);
          v195 = 11973;
        }
        v196 = *(_QWORD *)(v16 + 8) + 48 * v195;
        if ((*(_WORD *)(a2 + 44) & 4) != 0)
        {
          v197 = (llvm::MachineFunction *)v5[4];
          *(_QWORD *)&v518[0] = *(_QWORD *)&v517[0];
          if (*(_QWORD *)&v517[0])
            llvm::MetadataTracking::track((uint64_t)v518, *(unsigned __int8 **)&v517[0], 2);
          v198 = *((_QWORD *)v197 + 28);
          if (v198)
            *((_QWORD *)v197 + 28) = *(_QWORD *)v198;
          else
            v198 = sub_1C484358C((uint64_t)v197 + 128, 72, 3);
          *(_QWORD *)&v521 = *(_QWORD *)&v518[0];
          if (*(_QWORD *)&v518[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v518, *(unsigned __int8 **)&v518[0], (uint64_t)&v521);
            *(_QWORD *)&v518[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v198, v197, v196, (unsigned __int8 **)&v521, 0);
          if ((_QWORD)v521)
            llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
          if (*(_QWORD *)&v518[0])
            llvm::MetadataTracking::untrack((uint64_t)v518, *(unsigned __int8 **)&v518[0]);
          if (v5 + 6 != (uint64_t *)a2 && (*(_WORD *)(a2 + 44) & 4) != 0)
            *(_WORD *)(v198 + 44) |= 0xCu;
          sub_1C512CA10(v5 + 5, (uint64_t *)a2, v198);
        }
        else
        {
          v197 = (llvm::MachineFunction *)v5[4];
          *(_QWORD *)&v518[0] = *(_QWORD *)&v517[0];
          if (*(_QWORD *)&v517[0])
            llvm::MetadataTracking::track((uint64_t)v518, *(unsigned __int8 **)&v517[0], 2);
          v198 = *((_QWORD *)v197 + 28);
          if (v198)
            *((_QWORD *)v197 + 28) = *(_QWORD *)v198;
          else
            v198 = sub_1C484358C((uint64_t)v197 + 128, 72, 3);
          *(_QWORD *)&v521 = *(_QWORD *)&v518[0];
          if (*(_QWORD *)&v518[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v518, *(unsigned __int8 **)&v518[0], (uint64_t)&v521);
            *(_QWORD *)&v518[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v198, v197, v196, (unsigned __int8 **)&v521, 0);
          if ((_QWORD)v521)
            llvm::MetadataTracking::untrack((uint64_t)&v521, (unsigned __int8 *)v521);
          if (*(_QWORD *)&v518[0])
            llvm::MetadataTracking::untrack((uint64_t)v518, *(unsigned __int8 **)&v518[0]);
          v199 = v5[5];
          *(_QWORD *)(v198 + 24) = v199;
          v200 = *(_QWORD *)(v199 + 32);
          v201 = *(unsigned int *)(v198 + 40);
          if ((_DWORD)v201)
          {
            v483 = *(_QWORD *)(v198 + 32);
            v484 = *(_QWORD *)(v200 + 40);
            v485 = 32 * v201;
            do
            {
              if (!*(_BYTE *)v483)
              {
                v486 = *(unsigned int *)(v483 + 4);
                if ((int)v486 >= 0)
                  v487 = (uint64_t *)(*(_QWORD *)(v484 + 272) + 8 * v486);
                else
                  v487 = (uint64_t *)(*(_QWORD *)(v484 + 24) + 16 * (v486 & 0x7FFFFFFF) + 8);
                v488 = *v487;
                if (*v487)
                {
                  v489 = *(_QWORD *)(v488 + 16);
                  *(_QWORD *)(v488 + 16) = v483;
                  *(_QWORD *)(v483 + 16) = v489;
                  if ((*(_BYTE *)(v483 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v483 + 24) = v488;
                  }
                  else
                  {
                    *(_QWORD *)(v483 + 24) = 0;
                    v487 = (uint64_t *)(v489 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v483 + 16) = v483;
                  *(_QWORD *)(v483 + 24) = 0;
                }
                *v487 = v483;
              }
              v483 += 32;
              v485 -= 32;
            }
            while (v485);
          }
          v202 = *(_QWORD *)(v200 + 728);
          if (v202)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v202 + 24))(v202, v198);
          v203 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v198 = v203 | *(_QWORD *)v198 & 7;
          *(_QWORD *)(v198 + 8) = a2;
          *(_QWORD *)(v203 + 8) = v198;
          *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v198;
        }
        if (v192 == 1)
        {
          LODWORD(v521) = 1;
          *((_QWORD *)&v521 + 1) = 0;
          *(_QWORD *)&v522 = v194;
        }
        else
        {
          *((_QWORD *)&v521 + 1) = 0;
          v522 = 0uLL;
          LODWORD(v521) = 0;
          DWORD1(v521) = v193;
        }
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v197, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v197, (const llvm::MachineOperand *)&v521);
        LODWORD(v521) = 1;
        *((_QWORD *)&v521 + 1) = 0;
        *(_QWORD *)&v522 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v197, (const llvm::MachineOperand *)&v521);
        v522 = 0uLL;
        v521 = 0x200000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v197, (const llvm::MachineOperand *)&v521);
        v204 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v204 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v204 = a2;
            do
              v204 = *(_QWORD *)(v204 + 8);
            while ((*(_WORD *)(v204 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v204 + 8));
        v205 = *(unsigned __int8 **)&v517[0];
        if (*(_QWORD *)&v517[0])
        {
          v206 = (unsigned __int8 **)v517;
LABEL_640:
          llvm::MetadataTracking::untrack((uint64_t)v206, v205);
        }
        break;
    }
  }
  return v5;
}

uint64_t sub_1C481BB68(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  int IncompleteVirtualRegister;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MachineFunction *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::MachineFunction *v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68[4];
  unsigned __int8 *v69;
  __int128 v70;
  __int128 v71;

  v8 = *(_QWORD *)(a1 + 32);
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a3, "", 0);
  v10 = (_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF));
  if (a4)
  {
    *v10 = &off_1E7F982A8;
    v11 = *(_QWORD *)(a3 + 8);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(a2 + 8) + 48192;
    if ((*(_WORD *)(a1 + 44) & 4) != 0)
    {
      v14 = *(llvm::MachineFunction **)(v12 + 32);
      v21 = *(unsigned __int8 **)(a1 + 56);
      v68[0] = v21;
      if (v21)
        llvm::MetadataTracking::track((uint64_t)v68, v21, 2);
      v16 = *((_QWORD *)v14 + 28);
      if (v16)
        *((_QWORD *)v14 + 28) = *(_QWORD *)v16;
      else
        v16 = sub_1C484358C((uint64_t)v14 + 128, 72, 3);
      *(unsigned __int8 **)&v70 = v68[0];
      if (v68[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v68, v68[0], (uint64_t)&v70);
        v68[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v14, v13, (unsigned __int8 **)&v70, 0);
      if ((_QWORD)v70)
        llvm::MetadataTracking::untrack((uint64_t)&v70, (unsigned __int8 *)v70);
      if (v68[0])
        llvm::MetadataTracking::untrack((uint64_t)v68, v68[0]);
      if (v12 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0)
        *(_WORD *)(v16 + 44) |= 0xCu;
      sub_1C512CA10((uint64_t *)(v12 + 40), (uint64_t *)a1, v16);
    }
    else
    {
      v14 = *(llvm::MachineFunction **)(v12 + 32);
      v15 = *(unsigned __int8 **)(a1 + 56);
      v68[0] = v15;
      if (v15)
        llvm::MetadataTracking::track((uint64_t)v68, v15, 2);
      v16 = *((_QWORD *)v14 + 28);
      if (v16)
        *((_QWORD *)v14 + 28) = *(_QWORD *)v16;
      else
        v16 = sub_1C484358C((uint64_t)v14 + 128, 72, 3);
      *(unsigned __int8 **)&v70 = v68[0];
      if (v68[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v68, v68[0], (uint64_t)&v70);
        v68[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v14, v13, (unsigned __int8 **)&v70, 0);
      if ((_QWORD)v70)
        llvm::MetadataTracking::untrack((uint64_t)&v70, (unsigned __int8 *)v70);
      if (v68[0])
        llvm::MetadataTracking::untrack((uint64_t)v68, v68[0]);
      v23 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v16 + 24) = v23;
      v24 = *(_QWORD *)(v23 + 32);
      v25 = *(unsigned int *)(v16 + 40);
      if ((_DWORD)v25)
      {
        v54 = *(_QWORD *)(v16 + 32);
        v55 = *(_QWORD *)(v24 + 40);
        v56 = 32 * v25;
        do
        {
          if (!*(_BYTE *)v54)
          {
            v57 = *(unsigned int *)(v54 + 4);
            if ((int)v57 >= 0)
              v58 = (uint64_t *)(*(_QWORD *)(v55 + 272) + 8 * v57);
            else
              v58 = (uint64_t *)(*(_QWORD *)(v55 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8);
            v59 = *v58;
            if (*v58)
            {
              v60 = *(_QWORD *)(v59 + 16);
              *(_QWORD *)(v59 + 16) = v54;
              *(_QWORD *)(v54 + 16) = v60;
              if ((*(_BYTE *)(v54 + 3) & 1) != 0)
              {
                *(_QWORD *)(v54 + 24) = v59;
              }
              else
              {
                *(_QWORD *)(v54 + 24) = 0;
                v58 = (uint64_t *)(v60 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v54 + 16) = v54;
              *(_QWORD *)(v54 + 24) = 0;
            }
            *v58 = v54;
          }
          v54 += 32;
          v56 -= 32;
        }
        while (v56);
      }
      v26 = *(_QWORD *)(v24 + 728);
      if (v26)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 24))(v26, v16);
      v27 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v16 = v27 | *(_QWORD *)v16 & 7;
      *(_QWORD *)(v16 + 8) = a1;
      *(_QWORD *)(v27 + 8) = v16;
      *(_QWORD *)a1 = *(_QWORD *)a1 & 7 | v16;
    }
    *((_QWORD *)&v70 + 1) = 0;
    v71 = 0uLL;
    LODWORD(v70) = 0x1000000;
    DWORD1(v70) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
    LODWORD(v70) = 1;
    *((_QWORD *)&v70 + 1) = 0;
    *(_QWORD *)&v71 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)(v8 + 64));
    LODWORD(v70) = 1;
    *((_QWORD *)&v70 + 1) = 0;
    *(_QWORD *)&v71 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)(v8 + 64));
    LODWORD(v70) = 1;
    *((_QWORD *)&v70 + 1) = 0;
    *(_QWORD *)&v71 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)(v8 + 64));
    LODWORD(v70) = 1;
    *((_QWORD *)&v70 + 1) = 0;
    *(_QWORD *)&v71 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
    LODWORD(v70) = 1;
    *((_QWORD *)&v70 + 1) = 0;
    *(_QWORD *)&v71 = 0x100000000;
  }
  else
  {
    *v10 = &off_1E7F98468;
    v17 = *(_QWORD *)(a3 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a2 + 8) + 66336;
    if ((*(_WORD *)(a1 + 44) & 4) != 0)
    {
      v14 = *(llvm::MachineFunction **)(v18 + 32);
      v22 = *(unsigned __int8 **)(a1 + 56);
      v68[0] = v22;
      if (v22)
        llvm::MetadataTracking::track((uint64_t)v68, v22, 2);
      v16 = *((_QWORD *)v14 + 28);
      if (v16)
        *((_QWORD *)v14 + 28) = *(_QWORD *)v16;
      else
        v16 = sub_1C484358C((uint64_t)v14 + 128, 72, 3);
      *(unsigned __int8 **)&v70 = v68[0];
      if (v68[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v68, v68[0], (uint64_t)&v70);
        v68[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v14, v19, (unsigned __int8 **)&v70, 0);
      if ((_QWORD)v70)
        llvm::MetadataTracking::untrack((uint64_t)&v70, (unsigned __int8 *)v70);
      if (v68[0])
        llvm::MetadataTracking::untrack((uint64_t)v68, v68[0]);
      if (v18 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0)
        *(_WORD *)(v16 + 44) |= 0xCu;
      sub_1C512CA10((uint64_t *)(v18 + 40), (uint64_t *)a1, v16);
    }
    else
    {
      v14 = *(llvm::MachineFunction **)(v18 + 32);
      v20 = *(unsigned __int8 **)(a1 + 56);
      v68[0] = v20;
      if (v20)
        llvm::MetadataTracking::track((uint64_t)v68, v20, 2);
      v16 = *((_QWORD *)v14 + 28);
      if (v16)
        *((_QWORD *)v14 + 28) = *(_QWORD *)v16;
      else
        v16 = sub_1C484358C((uint64_t)v14 + 128, 72, 3);
      *(unsigned __int8 **)&v70 = v68[0];
      if (v68[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v68, v68[0], (uint64_t)&v70);
        v68[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v14, v19, (unsigned __int8 **)&v70, 0);
      if ((_QWORD)v70)
        llvm::MetadataTracking::untrack((uint64_t)&v70, (unsigned __int8 *)v70);
      if (v68[0])
        llvm::MetadataTracking::untrack((uint64_t)v68, v68[0]);
      v28 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v16 + 24) = v28;
      v29 = *(_QWORD *)(v28 + 32);
      v30 = *(unsigned int *)(v16 + 40);
      if ((_DWORD)v30)
      {
        v61 = *(_QWORD *)(v16 + 32);
        v62 = *(_QWORD *)(v29 + 40);
        v63 = 32 * v30;
        do
        {
          if (!*(_BYTE *)v61)
          {
            v64 = *(unsigned int *)(v61 + 4);
            if ((int)v64 >= 0)
              v65 = (uint64_t *)(*(_QWORD *)(v62 + 272) + 8 * v64);
            else
              v65 = (uint64_t *)(*(_QWORD *)(v62 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8);
            v66 = *v65;
            if (*v65)
            {
              v67 = *(_QWORD *)(v66 + 16);
              *(_QWORD *)(v66 + 16) = v61;
              *(_QWORD *)(v61 + 16) = v67;
              if ((*(_BYTE *)(v61 + 3) & 1) != 0)
              {
                *(_QWORD *)(v61 + 24) = v66;
              }
              else
              {
                *(_QWORD *)(v61 + 24) = 0;
                v65 = (uint64_t *)(v67 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v61 + 16) = v61;
              *(_QWORD *)(v61 + 24) = 0;
            }
            *v65 = v61;
          }
          v61 += 32;
          v63 -= 32;
        }
        while (v63);
      }
      v31 = *(_QWORD *)(v29 + 728);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 24))(v31, v16);
      v32 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v16 = v32 | *(_QWORD *)v16 & 7;
      *(_QWORD *)(v16 + 8) = a1;
      *(_QWORD *)(v32 + 8) = v16;
      *(_QWORD *)a1 = *(_QWORD *)a1 & 7 | v16;
    }
    *((_QWORD *)&v70 + 1) = 0;
    v71 = 0uLL;
    LODWORD(v70) = 0x1000000;
    DWORD1(v70) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
    LODWORD(v70) = 1;
    *((_QWORD *)&v70 + 1) = 0;
    *(_QWORD *)&v71 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)(v8 + 64));
    LODWORD(v70) = 1;
    *((_QWORD *)&v70 + 1) = 0;
    *(_QWORD *)&v71 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)(v8 + 64));
    LODWORD(v70) = 1;
    *((_QWORD *)&v70 + 1) = 0;
    *(_QWORD *)&v71 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)(v8 + 64));
    LODWORD(v70) = 1;
    *((_QWORD *)&v70 + 1) = 0;
    *(_QWORD *)&v71 = 0;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
  v70 = 0u;
  v71 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
  LODWORD(v70) = 1;
  *((_QWORD *)&v70 + 1) = 0;
  *(_QWORD *)&v71 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
  v70 = 0u;
  v71 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v14, (const llvm::MachineOperand *)&v70);
  memset(&v68[1], 0, 24);
  LODWORD(v68[0]) = 0x4000000;
  HIDWORD(v68[0]) = IncompleteVirtualRegister;
  v33 = *(_QWORD *)(a1 + 24);
  v34 = *(_QWORD *)(a2 + 8) + 48 * **(unsigned __int16 **)(a1 + 16);
  if ((*(_WORD *)(a1 + 44) & 4) != 0)
  {
    v35 = *(llvm::MachineFunction **)(v33 + 32);
    v38 = *(unsigned __int8 **)(a1 + 56);
    v69 = v38;
    if (v38)
      llvm::MetadataTracking::track((uint64_t)&v69, v38, 2);
    v37 = *((_QWORD *)v35 + 28);
    if (v37)
      *((_QWORD *)v35 + 28) = *(_QWORD *)v37;
    else
      v37 = sub_1C484358C((uint64_t)v35 + 128, 72, 3);
    *(_QWORD *)&v70 = v69;
    if (v69)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v69, v69, (uint64_t)&v70);
      v69 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v37, v35, v34, (unsigned __int8 **)&v70, 0);
    if ((_QWORD)v70)
      llvm::MetadataTracking::untrack((uint64_t)&v70, (unsigned __int8 *)v70);
    if (v69)
      llvm::MetadataTracking::untrack((uint64_t)&v69, v69);
    if (v33 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0)
      *(_WORD *)(v37 + 44) |= 0xCu;
    sub_1C512CA10((uint64_t *)(v33 + 40), (uint64_t *)a1, v37);
  }
  else
  {
    v35 = *(llvm::MachineFunction **)(v33 + 32);
    v36 = *(unsigned __int8 **)(a1 + 56);
    v69 = v36;
    if (v36)
      llvm::MetadataTracking::track((uint64_t)&v69, v36, 2);
    v37 = *((_QWORD *)v35 + 28);
    if (v37)
      *((_QWORD *)v35 + 28) = *(_QWORD *)v37;
    else
      v37 = sub_1C484358C((uint64_t)v35 + 128, 72, 3);
    *(_QWORD *)&v70 = v69;
    if (v69)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v69, v69, (uint64_t)&v70);
      v69 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v37, v35, v34, (unsigned __int8 **)&v70, 0);
    if ((_QWORD)v70)
      llvm::MetadataTracking::untrack((uint64_t)&v70, (unsigned __int8 *)v70);
    if (v69)
      llvm::MetadataTracking::untrack((uint64_t)&v69, v69);
    v39 = *(_QWORD *)(v33 + 40);
    *(_QWORD *)(v37 + 24) = v39;
    v40 = *(_QWORD *)(v39 + 32);
    v41 = *(unsigned int *)(v37 + 40);
    if ((_DWORD)v41)
    {
      v47 = *(_QWORD *)(v37 + 32);
      v48 = *(_QWORD *)(v40 + 40);
      v49 = 32 * v41;
      do
      {
        if (!*(_BYTE *)v47)
        {
          v50 = *(unsigned int *)(v47 + 4);
          if ((int)v50 >= 0)
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 272) + 8 * v50);
          else
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
          v52 = *v51;
          if (*v51)
          {
            v53 = *(_QWORD *)(v52 + 16);
            *(_QWORD *)(v52 + 16) = v47;
            *(_QWORD *)(v47 + 16) = v53;
            if ((*(_BYTE *)(v47 + 3) & 1) != 0)
            {
              *(_QWORD *)(v47 + 24) = v52;
            }
            else
            {
              *(_QWORD *)(v47 + 24) = 0;
              v51 = (uint64_t *)(v53 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v47 + 16) = v47;
            *(_QWORD *)(v47 + 24) = 0;
          }
          *v51 = v47;
        }
        v47 += 32;
        v49 -= 32;
      }
      while (v49);
    }
    v42 = *(_QWORD *)(v40 + 728);
    if (v42)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 24))(v42, v37);
    v43 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v37 = v43 | *(_QWORD *)v37 & 7;
    *(_QWORD *)(v37 + 8) = a1;
    *(_QWORD *)(v43 + 8) = v37;
    *(_QWORD *)a1 = *(_QWORD *)a1 & 7 | v37;
  }
  v44 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
  *((_QWORD *)&v70 + 1) = 0;
  v71 = 0uLL;
  LODWORD(v70) = 0x1000000;
  DWORD1(v70) = v44;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v70);
  LODWORD(v70) = 1;
  *((_QWORD *)&v70 + 1) = 0;
  *(_QWORD *)&v71 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v70);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)v68);
  LODWORD(v70) = 1;
  *((_QWORD *)&v70 + 1) = 0;
  *(_QWORD *)&v71 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v70);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)(v8 + 128));
  if (!*(_BYTE *)(v8 + 128))
  {
    LODWORD(v70) = 1;
    *((_QWORD *)&v70 + 1) = 0;
    *(_QWORD *)&v71 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v70);
  }
  LODWORD(v70) = 1;
  *((_QWORD *)&v70 + 1) = 0;
  *(_QWORD *)&v71 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v70);
  v70 = 0u;
  v71 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v70);
  v45 = a1;
  if ((*(_BYTE *)a1 & 4) == 0)
  {
    v45 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      v45 = a1;
      do
        v45 = *(_QWORD *)(v45 + 8);
      while ((*(_WORD *)(v45 + 44) & 8) != 0);
    }
  }
  return sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v45 + 8));
}

uint64_t sub_1C481C67C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  int v9;
  llvm::MachineFunction *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  llvm::MachineFunction *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unsigned __int8 *v51;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
  if ((*(_WORD *)(a1 + 44) & 4) != 0)
  {
    v10 = *(llvm::MachineFunction **)(v8 + 32);
    v13 = *(unsigned __int8 **)(a1 + 56);
    v51 = v13;
    if (v13)
      llvm::MetadataTracking::track((uint64_t)&v51, v13, 2);
    v12 = *((_QWORD *)v10 + 28);
    if (v12)
      *((_QWORD *)v10 + 28) = *(_QWORD *)v12;
    else
      v12 = sub_1C484358C((uint64_t)v10 + 128, 72, 3);
    *(_QWORD *)&v49 = v51;
    if (v51)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v51, v51, (uint64_t)&v49);
      v51 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v12, v10, a2, (unsigned __int8 **)&v49, 0);
    if ((_QWORD)v49)
      llvm::MetadataTracking::untrack((uint64_t)&v49, (unsigned __int8 *)v49);
    if (v51)
      llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
    if (v8 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0)
      *(_WORD *)(v12 + 44) |= 0xCu;
    sub_1C512CA10((uint64_t *)(v8 + 40), (uint64_t *)a1, v12);
  }
  else
  {
    v10 = *(llvm::MachineFunction **)(v8 + 32);
    v11 = *(unsigned __int8 **)(a1 + 56);
    v51 = v11;
    if (v11)
      llvm::MetadataTracking::track((uint64_t)&v51, v11, 2);
    v12 = *((_QWORD *)v10 + 28);
    if (v12)
      *((_QWORD *)v10 + 28) = *(_QWORD *)v12;
    else
      v12 = sub_1C484358C((uint64_t)v10 + 128, 72, 3);
    *(_QWORD *)&v49 = v51;
    if (v51)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v51, v51, (uint64_t)&v49);
      v51 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v12, v10, a2, (unsigned __int8 **)&v49, 0);
    if ((_QWORD)v49)
      llvm::MetadataTracking::untrack((uint64_t)&v49, (unsigned __int8 *)v49);
    if (v51)
      llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
    v14 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v12 + 24) = v14;
    v15 = *(_QWORD *)(v14 + 32);
    v16 = *(unsigned int *)(v12 + 40);
    if ((_DWORD)v16)
    {
      v35 = *(_QWORD *)(v12 + 32);
      v36 = *(_QWORD *)(v15 + 40);
      v37 = 32 * v16;
      do
      {
        if (!*(_BYTE *)v35)
        {
          v38 = *(unsigned int *)(v35 + 4);
          if ((int)v38 >= 0)
            v39 = (uint64_t *)(*(_QWORD *)(v36 + 272) + 8 * v38);
          else
            v39 = (uint64_t *)(*(_QWORD *)(v36 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
          v40 = *v39;
          if (*v39)
          {
            v41 = *(_QWORD *)(v40 + 16);
            *(_QWORD *)(v40 + 16) = v35;
            *(_QWORD *)(v35 + 16) = v41;
            if ((*(_BYTE *)(v35 + 3) & 1) != 0)
            {
              *(_QWORD *)(v35 + 24) = v40;
            }
            else
            {
              *(_QWORD *)(v35 + 24) = 0;
              v39 = (uint64_t *)(v41 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v35 + 16) = v35;
            *(_QWORD *)(v35 + 24) = 0;
          }
          *v39 = v35;
        }
        v35 += 32;
        v37 -= 32;
      }
      while (v37);
    }
    v17 = *(_QWORD *)(v15 + 728);
    if (v17)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 24))(v17, v12);
    v18 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v12 = v18 | *(_QWORD *)v12 & 7;
    *(_QWORD *)(v12 + 8) = a1;
    *(_QWORD *)(v18 + 8) = v12;
    *(_QWORD *)a1 = *(_QWORD *)a1 & 7 | v12;
  }
  *((_QWORD *)&v49 + 1) = 0;
  v50 = 0uLL;
  LODWORD(v49) = 0x1000000;
  DWORD1(v49) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v49);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 32) + 32));
  v19 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 68);
  *((_QWORD *)&v49 + 1) = 0;
  v50 = 0uLL;
  LODWORD(v49) = 0;
  DWORD1(v49) = v19;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v49);
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
  LODWORD(v49) = 1;
  *((_QWORD *)&v49 + 1) = 0;
  *(_QWORD *)&v50 = v20;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v49);
  LODWORD(v49) = 1;
  *((_QWORD *)&v49 + 1) = 0;
  *(_QWORD *)&v50 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v49);
  v49 = 0u;
  v50 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v49);
  v50 = 0uLL;
  v49 = 0x203000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v49);
  v21 = *(_QWORD *)(a1 + 24);
  if ((*(_WORD *)(a1 + 44) & 4) != 0)
  {
    v22 = *(llvm::MachineFunction **)(v21 + 32);
    v25 = *(unsigned __int8 **)(a1 + 56);
    v51 = v25;
    if (v25)
      llvm::MetadataTracking::track((uint64_t)&v51, v25, 2);
    v24 = *((_QWORD *)v22 + 28);
    if (v24)
      *((_QWORD *)v22 + 28) = *(_QWORD *)v24;
    else
      v24 = sub_1C484358C((uint64_t)v22 + 128, 72, 3);
    *(_QWORD *)&v49 = v51;
    if (v51)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v51, v51, (uint64_t)&v49);
      v51 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v24, v22, a3, (unsigned __int8 **)&v49, 0);
    if ((_QWORD)v49)
      llvm::MetadataTracking::untrack((uint64_t)&v49, (unsigned __int8 *)v49);
    if (v51)
      llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
    if (v21 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0)
      *(_WORD *)(v24 + 44) |= 0xCu;
    sub_1C512CA10((uint64_t *)(v21 + 40), (uint64_t *)a1, v24);
  }
  else
  {
    v22 = *(llvm::MachineFunction **)(v21 + 32);
    v23 = *(unsigned __int8 **)(a1 + 56);
    v51 = v23;
    if (v23)
      llvm::MetadataTracking::track((uint64_t)&v51, v23, 2);
    v24 = *((_QWORD *)v22 + 28);
    if (v24)
      *((_QWORD *)v22 + 28) = *(_QWORD *)v24;
    else
      v24 = sub_1C484358C((uint64_t)v22 + 128, 72, 3);
    *(_QWORD *)&v49 = v51;
    if (v51)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v51, v51, (uint64_t)&v49);
      v51 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v24, v22, a3, (unsigned __int8 **)&v49, 0);
    if ((_QWORD)v49)
      llvm::MetadataTracking::untrack((uint64_t)&v49, (unsigned __int8 *)v49);
    if (v51)
      llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
    v26 = *(_QWORD *)(v21 + 40);
    *(_QWORD *)(v24 + 24) = v26;
    v27 = *(_QWORD *)(v26 + 32);
    v28 = *(unsigned int *)(v24 + 40);
    if ((_DWORD)v28)
    {
      v42 = *(_QWORD *)(v24 + 32);
      v43 = *(_QWORD *)(v27 + 40);
      v44 = 32 * v28;
      do
      {
        if (!*(_BYTE *)v42)
        {
          v45 = *(unsigned int *)(v42 + 4);
          if ((int)v45 >= 0)
            v46 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v45);
          else
            v46 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8);
          v47 = *v46;
          if (*v46)
          {
            v48 = *(_QWORD *)(v47 + 16);
            *(_QWORD *)(v47 + 16) = v42;
            *(_QWORD *)(v42 + 16) = v48;
            if ((*(_BYTE *)(v42 + 3) & 1) != 0)
            {
              *(_QWORD *)(v42 + 24) = v47;
            }
            else
            {
              *(_QWORD *)(v42 + 24) = 0;
              v46 = (uint64_t *)(v48 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v42 + 16) = v42;
            *(_QWORD *)(v42 + 24) = 0;
          }
          *v46 = v42;
        }
        v42 += 32;
        v44 -= 32;
      }
      while (v44);
    }
    v29 = *(_QWORD *)(v27 + 728);
    if (v29)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 24))(v29, v24);
    v30 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v24 = v30 | *(_QWORD *)v24 & 7;
    *(_QWORD *)(v24 + 8) = a1;
    *(_QWORD *)(v30 + 8) = v24;
    *(_QWORD *)a1 = *(_QWORD *)a1 & 7 | v24;
  }
  *((_QWORD *)&v49 + 1) = 0;
  v50 = 0uLL;
  LODWORD(v49) = 0x1000000;
  DWORD1(v49) = v9;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v49);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 32) + 32));
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 32) + 64));
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
  LODWORD(v49) = 1;
  *((_QWORD *)&v49 + 1) = 0;
  *(_QWORD *)&v50 = v31;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v49);
  *((_QWORD *)&v49 + 1) = 0;
  v50 = 0uLL;
  LODWORD(v49) = 0x4000000;
  DWORD1(v49) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v49);
  LODWORD(v49) = 1;
  *((_QWORD *)&v49 + 1) = 0;
  *(_QWORD *)&v50 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v49);
  LODWORD(v49) = 1;
  *((_QWORD *)&v49 + 1) = 0;
  *(_QWORD *)&v50 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v49);
  v50 = 0uLL;
  v49 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v49);
  *((_QWORD *)&v49 + 1) = 0;
  v50 = 0uLL;
  LODWORD(v49) = 0x2000000;
  DWORD1(v49) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v49);
  v32 = *(unsigned int **)(v24 + 32);
  v32[64] = v32[64] & 0xFF0FFFFF | 0x100000;
  *v32 = *v32 & 0xFF0FFFFF | 0x900000;
  v33 = a1;
  if ((*(_BYTE *)a1 & 4) == 0)
  {
    v33 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      v33 = a1;
      do
        v33 = *(_QWORD *)(v33 + 8);
      while ((*(_WORD *)(v33 + 44) & 8) != 0);
    }
  }
  return sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v33 + 8));
}

uint64_t sub_1C481CDCC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_DWORD *)(v4 + 112);
  if (*(unsigned __int8 *)(v4 + 64) | v5 & 2
    || ((v6 = *(unsigned int *)(v4 + 68), (int)v6 >= 0)
      ? (v7 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * v6))
      : (v7 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8)),
        (v8 = *v7) == 0
     || (*(_BYTE *)(v8 + 3) & 1) == 0 && ((v8 = *(_QWORD *)(v8 + 24)) == 0 || (*(_BYTE *)(v8 + 3) & 1) == 0)
     || (v9 = *(_QWORD *)(v8 + 8)) == 0))
  {
LABEL_6:
    __asm { BR              X10 }
  }
  v10 = **(unsigned __int16 **)(v9 + 16);
  if ((v10 - 945) >= 0x3A)
  {
    switch(**(_WORD **)(v9 + 16))
    {
      case 0x4BF:
      case 0x4C0:
      case 0x4C1:
      case 0x4CB:
      case 0x4CC:
      case 0x4CD:
        if (llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(_QWORD *)(v9 + 32) + 64), (const llvm::MachineOperand *)(*(_QWORD *)(v9 + 32) + 128)))
        {
          result = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(_QWORD *)(v9 + 32) + 96), (const llvm::MachineOperand *)(*(_QWORD *)(v9 + 32) + 160));
          if ((result & 1) != 0)
            return result;
        }
        goto LABEL_6;
      case 0x4C2:
      case 0x4C3:
      case 0x4C4:
      case 0x4C5:
      case 0x4C6:
      case 0x4C7:
      case 0x4C8:
      case 0x4C9:
      case 0x4CA:
      case 0x4CE:
      case 0x4CF:
      case 0x4D0:
      case 0x4D1:
      case 0x4D2:
      case 0x4D3:
      case 0x4D4:
      case 0x4D5:
      case 0x4D6:
      case 0x4D7:
      case 0x4D8:
      case 0x4D9:
      case 0x4F5:
      case 0x4F6:
      case 0x4F7:
      case 0x4F8:
      case 0x4F9:
      case 0x4FA:
      case 0x4FB:
      case 0x4FC:
      case 0x4FD:
      case 0x4FE:
      case 0x4FF:
      case 0x500:
      case 0x501:
      case 0x502:
      case 0x503:
      case 0x504:
      case 0x505:
      case 0x506:
      case 0x507:
      case 0x508:
      case 0x509:
      case 0x50A:
      case 0x50B:
      case 0x50C:
      case 0x50D:
      case 0x50E:
      case 0x50F:
        goto LABEL_6;
      case 0x4DA:
      case 0x4DB:
      case 0x4DC:
      case 0x4DD:
      case 0x4DE:
      case 0x4DF:
      case 0x4E0:
      case 0x4E1:
      case 0x4E2:
      case 0x4E3:
      case 0x4E4:
      case 0x4E5:
      case 0x4E6:
      case 0x4E7:
      case 0x4E8:
      case 0x4E9:
      case 0x4EA:
      case 0x4EB:
      case 0x4EC:
      case 0x4ED:
      case 0x4EE:
      case 0x4EF:
      case 0x4F0:
      case 0x4F1:
      case 0x4F2:
      case 0x4F3:
      case 0x4F4:
      case 0x510:
      case 0x511:
      case 0x512:
      case 0x513:
      case 0x514:
      case 0x515:
      case 0x516:
      case 0x517:
      case 0x518:
        return result;
      default:
        if ((v10 - 1078) >= 9)
          goto LABEL_6;
        return result;
    }
  }
  return result;
}

_QWORD *sub_1C481E174(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned __int8 *v7;
  llvm::BasicBlock *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  BOOL v49;
  llvm::MachineBasicBlock *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  int IncompleteVirtualRegister;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  llvm::MachineBasicBlock *v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::MachineFunction *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  llvm::MachineFunction *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 *v90;
  __int128 v91;
  uint64_t v92;
  llvm::MachineFunction *v93;
  unint64_t v94;
  _OWORD *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  __int128 v102;
  _OWORD *v103;
  __int128 v104;
  uint64_t v105;
  llvm::MachineFunction *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  llvm::MachineFunction *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  llvm::MachineFunction *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  const llvm::MachineOperand *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  const llvm::MachineOperand *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  llvm::MachineFunction *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  llvm::MachineFunction *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  const llvm::MachineOperand *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  llvm::MachineFunction *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t *v213;
  llvm::MachineFunction *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  llvm::MachineFunction *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  llvm::MachineFunction *v237;
  unint64_t v238;
  llvm::MachineFunction *v239;
  unint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  llvm::MachineFunction *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  llvm::MachineInstr *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  llvm::MachineFunction *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  llvm::MachineFunction *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  llvm::MachineFunction *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  llvm::MachineFunction *v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  llvm::MachineFunction *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  llvm::MachineFunction *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  llvm::MachineFunction *v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  llvm::MachineFunction *v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  llvm::MachineFunction *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  llvm::MachineFunction *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  llvm::MachineFunction *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  llvm::MachineFunction *v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  llvm::MachineFunction *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t *v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t *v586;
  unint64_t *v587;
  unint64_t *v588;
  unint64_t *v589;
  unint64_t *v590;
  unint64_t *v591;
  int v592;
  int v593;
  int v594;
  unint64_t *v595;
  unint64_t *v596;
  int v597;
  int v598;
  uint64_t v599;
  _QWORD *v600;
  _QWORD *v601;
  _QWORD *v602;
  _QWORD *v603;
  _QWORD *v604;
  unint64_t *v605;
  _QWORD *v606;
  _QWORD *v607;
  _QWORD *v608;
  _QWORD *v611;
  _OWORD v613[2];
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  unsigned __int8 *v622;
  unsigned __int8 *v623;
  __int128 v624;
  __int128 v625;

  v7 = *(unsigned __int8 **)(a1 + 56);
  v622 = v7;
  if (v7)
    llvm::MetadataTracking::track((uint64_t)&v622, v7, 2);
  v8 = (llvm::BasicBlock *)a2[2];
  v9 = a2[4];
  v599 = *(_QWORD *)(v9 + 40);
  v10 = *(_QWORD *)(v9 + 312);
  if (v10)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v10;
  else
    v10 = sub_1C484358C(v9 + 128, 232, 3);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = v8;
  *(_DWORD *)(v10 + 24) = -1;
  *(_QWORD *)(v10 + 48) = (v10 + 48) | 4;
  *(_QWORD *)(v10 + 56) = v10 + 48;
  v596 = (unint64_t *)(v10 + 48);
  *(_BYTE *)(v10 + 144) = 0;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 121) = 0u;
  *(_QWORD *)(v10 + 160) = 0;
  *(_QWORD *)(v10 + 168) = 0;
  *(_QWORD *)(v10 + 152) = 0;
  *(_BYTE *)(v10 + 176) = 0;
  *(_DWORD *)(v10 + 187) = 0;
  *(_QWORD *)(v10 + 180) = 0;
  *(_QWORD *)(v10 + 192) = 0;
  *(_DWORD *)(v10 + 199) = 0;
  *(_QWORD *)(v10 + 216) = 0;
  *(_QWORD *)(v10 + 224) = 0;
  *(_QWORD *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 32) = v9;
  *(_QWORD *)(v10 + 40) = v10;
  if (v8)
  {
    *(_QWORD *)(v10 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v10 + 144) = v11;
  }
  v12 = *(_QWORD *)(v9 + 312);
  if (v12)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v12;
  else
    v12 = sub_1C484358C(v9 + 128, 232, 3);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = v8;
  *(_DWORD *)(v12 + 24) = -1;
  *(_QWORD *)(v12 + 48) = (v12 + 48) | 4;
  *(_QWORD *)(v12 + 56) = v12 + 48;
  v591 = (unint64_t *)(v12 + 48);
  *(_BYTE *)(v12 + 144) = 0;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 121) = 0u;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 152) = 0;
  *(_BYTE *)(v12 + 176) = 0;
  *(_DWORD *)(v12 + 187) = 0;
  *(_QWORD *)(v12 + 180) = 0;
  *(_QWORD *)(v12 + 192) = 0;
  *(_DWORD *)(v12 + 199) = 0;
  *(_QWORD *)(v12 + 216) = 0;
  *(_QWORD *)(v12 + 224) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 32) = v9;
  *(_QWORD *)(v12 + 40) = v12;
  if (v8)
  {
    *(_QWORD *)(v12 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v12 + 144) = v13;
  }
  v14 = *(_QWORD *)(v9 + 312);
  if (v14)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v14;
  else
    v14 = sub_1C484358C(v9 + 128, 232, 3);
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = v8;
  *(_DWORD *)(v14 + 24) = -1;
  *(_QWORD *)(v14 + 48) = (v14 + 48) | 4;
  *(_QWORD *)(v14 + 56) = v14 + 48;
  v605 = (unint64_t *)(v14 + 48);
  *(_BYTE *)(v14 + 144) = 0;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 121) = 0u;
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  *(_QWORD *)(v14 + 152) = 0;
  *(_BYTE *)(v14 + 176) = 0;
  *(_DWORD *)(v14 + 187) = 0;
  *(_QWORD *)(v14 + 180) = 0;
  *(_QWORD *)(v14 + 192) = 0;
  *(_DWORD *)(v14 + 199) = 0;
  *(_QWORD *)(v14 + 216) = 0;
  *(_QWORD *)(v14 + 224) = 0;
  *(_QWORD *)(v14 + 208) = 0;
  *(_QWORD *)(v14 + 32) = v9;
  *(_QWORD *)(v14 + 40) = v14;
  if (v8)
  {
    *(_QWORD *)(v14 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v14 + 144) = v15;
  }
  v16 = *(_QWORD *)(v9 + 312);
  if (v16)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v16;
  else
    v16 = sub_1C484358C(v9 + 128, 232, 3);
  v611 = (_QWORD *)v12;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = v8;
  *(_DWORD *)(v16 + 24) = -1;
  *(_QWORD *)(v16 + 48) = (v16 + 48) | 4;
  *(_QWORD *)(v16 + 56) = v16 + 48;
  *(_BYTE *)(v16 + 144) = 0;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 121) = 0u;
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 168) = 0;
  *(_QWORD *)(v16 + 152) = 0;
  *(_BYTE *)(v16 + 176) = 0;
  *(_DWORD *)(v16 + 187) = 0;
  *(_QWORD *)(v16 + 180) = 0;
  *(_QWORD *)(v16 + 192) = 0;
  *(_DWORD *)(v16 + 199) = 0;
  *(_QWORD *)(v16 + 216) = 0;
  *(_QWORD *)(v16 + 224) = 0;
  *(_QWORD *)(v16 + 208) = 0;
  *(_QWORD *)(v16 + 32) = v9;
  *(_QWORD *)(v16 + 40) = v16;
  if (v8)
  {
    *(_QWORD *)(v16 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v16 + 144) = v17;
  }
  v18 = *(_QWORD *)(v9 + 312);
  if (v18)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v18;
  else
    v18 = sub_1C484358C(v9 + 128, 232, 3);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = v8;
  *(_DWORD *)(v18 + 24) = -1;
  *(_QWORD *)(v18 + 48) = (v18 + 48) | 4;
  *(_QWORD *)(v18 + 56) = v18 + 48;
  *(_BYTE *)(v18 + 144) = 0;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 121) = 0u;
  *(_QWORD *)(v18 + 160) = 0;
  *(_QWORD *)(v18 + 168) = 0;
  *(_QWORD *)(v18 + 152) = 0;
  *(_BYTE *)(v18 + 176) = 0;
  *(_DWORD *)(v18 + 187) = 0;
  *(_QWORD *)(v18 + 180) = 0;
  *(_QWORD *)(v18 + 192) = 0;
  *(_DWORD *)(v18 + 199) = 0;
  *(_QWORD *)(v18 + 216) = 0;
  *(_QWORD *)(v18 + 224) = 0;
  *(_QWORD *)(v18 + 208) = 0;
  *(_QWORD *)(v18 + 32) = v9;
  *(_QWORD *)(v18 + 40) = v18;
  if (v8)
  {
    *(_QWORD *)(v18 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v18 + 144) = v19;
  }
  v20 = *(_QWORD *)(v9 + 312);
  if (v20)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v20;
  else
    v20 = sub_1C484358C(v9 + 128, 232, 3);
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = v8;
  *(_DWORD *)(v20 + 24) = -1;
  *(_QWORD *)(v20 + 48) = (v20 + 48) | 4;
  *(_QWORD *)(v20 + 56) = v20 + 48;
  v586 = (unint64_t *)(v20 + 48);
  *(_BYTE *)(v20 + 144) = 0;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 121) = 0u;
  *(_QWORD *)(v20 + 160) = 0;
  *(_QWORD *)(v20 + 168) = 0;
  *(_QWORD *)(v20 + 152) = 0;
  *(_BYTE *)(v20 + 176) = 0;
  *(_DWORD *)(v20 + 187) = 0;
  *(_QWORD *)(v20 + 180) = 0;
  *(_QWORD *)(v20 + 192) = 0;
  *(_DWORD *)(v20 + 199) = 0;
  *(_QWORD *)(v20 + 216) = 0;
  *(_QWORD *)(v20 + 224) = 0;
  *(_QWORD *)(v20 + 208) = 0;
  *(_QWORD *)(v20 + 32) = v9;
  *(_QWORD *)(v20 + 40) = v20;
  if (v8)
  {
    *(_QWORD *)(v20 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v20 + 144) = v21;
  }
  v607 = (_QWORD *)v20;
  v22 = *(_QWORD *)(v9 + 312);
  if (v22)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v22;
  else
    v22 = sub_1C484358C(v9 + 128, 232, 3);
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = v8;
  *(_DWORD *)(v22 + 24) = -1;
  *(_QWORD *)(v22 + 48) = (v22 + 48) | 4;
  *(_QWORD *)(v22 + 56) = v22 + 48;
  v595 = (unint64_t *)(v22 + 48);
  *(_BYTE *)(v22 + 144) = 0;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 121) = 0u;
  *(_QWORD *)(v22 + 160) = 0;
  *(_QWORD *)(v22 + 168) = 0;
  *(_QWORD *)(v22 + 152) = 0;
  *(_BYTE *)(v22 + 176) = 0;
  *(_DWORD *)(v22 + 187) = 0;
  *(_QWORD *)(v22 + 180) = 0;
  *(_QWORD *)(v22 + 192) = 0;
  *(_DWORD *)(v22 + 199) = 0;
  *(_QWORD *)(v22 + 216) = 0;
  *(_QWORD *)(v22 + 224) = 0;
  *(_QWORD *)(v22 + 208) = 0;
  *(_QWORD *)(v22 + 32) = v9;
  *(_QWORD *)(v22 + 40) = v22;
  if (v8)
  {
    *(_QWORD *)(v22 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v22 + 144) = v23;
  }
  v601 = (_QWORD *)v22;
  v24 = *(_QWORD *)(v9 + 312);
  if (v24)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v24;
  else
    v24 = sub_1C484358C(v9 + 128, 232, 3);
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = v8;
  *(_DWORD *)(v24 + 24) = -1;
  *(_QWORD *)(v24 + 48) = (v24 + 48) | 4;
  *(_QWORD *)(v24 + 56) = v24 + 48;
  v587 = (unint64_t *)(v24 + 48);
  *(_BYTE *)(v24 + 144) = 0;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 112) = 0u;
  *(_OWORD *)(v24 + 121) = 0u;
  *(_QWORD *)(v24 + 160) = 0;
  *(_QWORD *)(v24 + 168) = 0;
  *(_QWORD *)(v24 + 152) = 0;
  *(_BYTE *)(v24 + 176) = 0;
  *(_DWORD *)(v24 + 187) = 0;
  *(_QWORD *)(v24 + 180) = 0;
  *(_QWORD *)(v24 + 192) = 0;
  *(_DWORD *)(v24 + 199) = 0;
  *(_QWORD *)(v24 + 216) = 0;
  *(_QWORD *)(v24 + 224) = 0;
  *(_QWORD *)(v24 + 208) = 0;
  *(_QWORD *)(v24 + 32) = v9;
  *(_QWORD *)(v24 + 40) = v24;
  if (v8)
  {
    *(_QWORD *)(v24 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v24 + 144) = v25;
  }
  v602 = (_QWORD *)v24;
  v26 = *(_QWORD *)(v9 + 312);
  if (v26)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v26;
  else
    v26 = sub_1C484358C(v9 + 128, 232, 3);
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = v8;
  *(_DWORD *)(v26 + 24) = -1;
  *(_QWORD *)(v26 + 48) = (v26 + 48) | 4;
  *(_QWORD *)(v26 + 56) = v26 + 48;
  v588 = (unint64_t *)(v26 + 48);
  *(_BYTE *)(v26 + 144) = 0;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_OWORD *)(v26 + 112) = 0u;
  *(_OWORD *)(v26 + 121) = 0u;
  *(_QWORD *)(v26 + 160) = 0;
  *(_QWORD *)(v26 + 168) = 0;
  *(_QWORD *)(v26 + 152) = 0;
  *(_BYTE *)(v26 + 176) = 0;
  *(_DWORD *)(v26 + 187) = 0;
  *(_QWORD *)(v26 + 180) = 0;
  *(_QWORD *)(v26 + 192) = 0;
  *(_DWORD *)(v26 + 199) = 0;
  *(_QWORD *)(v26 + 216) = 0;
  *(_QWORD *)(v26 + 224) = 0;
  *(_QWORD *)(v26 + 208) = 0;
  *(_QWORD *)(v26 + 32) = v9;
  *(_QWORD *)(v26 + 40) = v26;
  if (v8)
  {
    *(_QWORD *)(v26 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v26 + 144) = v27;
  }
  v603 = (_QWORD *)v26;
  v28 = *(_QWORD *)(v9 + 312);
  if (v28)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v28;
  else
    v28 = sub_1C484358C(v9 + 128, 232, 3);
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = v8;
  *(_DWORD *)(v28 + 24) = -1;
  *(_QWORD *)(v28 + 48) = (v28 + 48) | 4;
  *(_QWORD *)(v28 + 56) = v28 + 48;
  v589 = (unint64_t *)(v28 + 48);
  *(_BYTE *)(v28 + 144) = 0;
  *(_OWORD *)(v28 + 64) = 0u;
  *(_OWORD *)(v28 + 80) = 0u;
  *(_OWORD *)(v28 + 96) = 0u;
  *(_OWORD *)(v28 + 112) = 0u;
  *(_OWORD *)(v28 + 121) = 0u;
  *(_QWORD *)(v28 + 160) = 0;
  *(_QWORD *)(v28 + 168) = 0;
  *(_QWORD *)(v28 + 152) = 0;
  *(_BYTE *)(v28 + 176) = 0;
  *(_DWORD *)(v28 + 187) = 0;
  *(_QWORD *)(v28 + 180) = 0;
  *(_QWORD *)(v28 + 192) = 0;
  *(_DWORD *)(v28 + 199) = 0;
  *(_QWORD *)(v28 + 216) = 0;
  *(_QWORD *)(v28 + 224) = 0;
  *(_QWORD *)(v28 + 208) = 0;
  *(_QWORD *)(v28 + 32) = v9;
  *(_QWORD *)(v28 + 40) = v28;
  if (v8)
  {
    *(_QWORD *)(v28 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v28 + 144) = v29;
  }
  v604 = (_QWORD *)v28;
  v30 = *(_QWORD *)(v9 + 312);
  if (v30)
    *(_QWORD *)(v9 + 312) = *(_QWORD *)v30;
  else
    v30 = sub_1C484358C(v9 + 128, 232, 3);
  v606 = (_QWORD *)v16;
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = v8;
  *(_DWORD *)(v30 + 24) = -1;
  *(_QWORD *)(v30 + 48) = (v30 + 48) | 4;
  *(_QWORD *)(v30 + 56) = v30 + 48;
  v590 = (unint64_t *)(v30 + 48);
  *(_BYTE *)(v30 + 144) = 0;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_OWORD *)(v30 + 80) = 0u;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_OWORD *)(v30 + 112) = 0u;
  *(_OWORD *)(v30 + 121) = 0u;
  *(_QWORD *)(v30 + 160) = 0;
  *(_QWORD *)(v30 + 168) = 0;
  *(_QWORD *)(v30 + 152) = 0;
  *(_BYTE *)(v30 + 176) = 0;
  *(_DWORD *)(v30 + 187) = 0;
  *(_QWORD *)(v30 + 180) = 0;
  *(_QWORD *)(v30 + 192) = 0;
  *(_DWORD *)(v30 + 199) = 0;
  *(_QWORD *)(v30 + 216) = 0;
  *(_QWORD *)(v30 + 224) = 0;
  *(_QWORD *)(v30 + 208) = 0;
  *(_QWORD *)(v30 + 32) = v9;
  *(_QWORD *)(v30 + 40) = v30;
  if (v8)
  {
    *(_QWORD *)(v30 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v8);
    *(_QWORD *)(v30 + 144) = v31;
  }
  v608 = (_QWORD *)v30;
  v32 = (unint64_t *)a2[1];
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, v14);
  v33 = *v32;
  *(_QWORD *)v14 = *v32;
  *(_QWORD *)(v14 + 8) = v32;
  *(_QWORD *)(v33 + 8) = v14;
  v34 = (_QWORD *)v14;
  *v32 = v14;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, v10);
  v35 = *v32;
  *(_QWORD *)v10 = *v32;
  *(_QWORD *)(v10 + 8) = v32;
  *(_QWORD *)(v35 + 8) = v10;
  *v32 = v10;
  if (*(_BYTE *)(a4 + 292))
  {
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, (uint64_t)v611);
    v36 = *v32;
    *v611 = *v32;
    v611[1] = v32;
    *(_QWORD *)(v36 + 8) = v611;
    *v32 = (unint64_t)v611;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, (uint64_t)v607);
    v37 = *v32;
    *v607 = *v32;
    v607[1] = v32;
    *(_QWORD *)(v37 + 8) = v607;
    *v32 = (unint64_t)v607;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, (uint64_t)v601);
    v38 = *v32;
    *v601 = *v32;
    v601[1] = v32;
    *(_QWORD *)(v38 + 8) = v601;
    *v32 = (unint64_t)v601;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, (uint64_t)v602);
    v39 = *v32;
    *v602 = *v32;
    v602[1] = v32;
    *(_QWORD *)(v39 + 8) = v602;
    *v32 = (unint64_t)v602;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, (uint64_t)v603);
    v40 = *v32;
    *v603 = *v32;
    v603[1] = v32;
    *(_QWORD *)(v40 + 8) = v603;
    *v32 = (unint64_t)v603;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, (uint64_t)v604);
    v41 = *v32;
    *v604 = *v32;
    v604[1] = v32;
    *(_QWORD *)(v41 + 8) = v604;
    *v32 = (unint64_t)v604;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, (uint64_t)v608);
    v42 = *v32;
    *v608 = *v32;
    v608[1] = v32;
    *(_QWORD *)(v42 + 8) = v608;
    *v32 = (unint64_t)v608;
  }
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, (uint64_t)v606);
  v43 = *v32;
  *v606 = *v32;
  v606[1] = v32;
  *(_QWORD *)(v43 + 8) = v606;
  *v32 = (unint64_t)v606;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v9 + 320, v18);
  v44 = *v32;
  *(_QWORD *)v18 = *v32;
  *(_QWORD *)(v18 + 8) = v32;
  *(_QWORD *)(v44 + 8) = v18;
  *v32 = v18;
  v45 = *(unint64_t **)(v18 + 56);
  v46 = a1;
  if ((*(_BYTE *)a1 & 4) == 0)
  {
    v46 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      v46 = a1;
      do
        v46 = *(_QWORD *)(v46 + 8);
      while ((*(_WORD *)(v46 + 44) & 8) != 0);
    }
  }
  v47 = *(unint64_t **)(v46 + 8);
  v48 = a2 + 6;
  v49 = v47 == a2 + 6 || v45 == v48;
  v600 = (_QWORD *)v14;
  if (!v49)
  {
    if ((unint64_t *)v18 != a2)
    {
      v193 = *(_QWORD *)(v18 + 40);
      v194 = v47;
      do
      {
        v194[3] = v193;
        v194 = (unint64_t *)v194[1];
      }
      while (v194 != v48);
    }
    sub_1C4785D30(v45, v47, a2 + 6);
  }
  v50 = (llvm::MachineBasicBlock *)a2;
  v51 = a3;
  llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v18, v50);
  v52 = v34;
  llvm::MachineBasicBlock::addSuccessor(v50, v34, -1);
  llvm::MachineBasicBlock::addSuccessor(v34, (_QWORD *)v10, -1);
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 8) + 16))(*(_QWORD *)(v9 + 8), *(_QWORD *)v9)+ 292))
  {
    llvm::MachineBasicBlock::addSuccessor((_QWORD *)v10, v611, -1);
    llvm::MachineBasicBlock::addSuccessor((_QWORD *)v10, v606, -1);
    llvm::MachineBasicBlock::addSuccessor(v611, v607, -1);
    llvm::MachineBasicBlock::addSuccessor(v611, v608, -1);
    llvm::MachineBasicBlock::addSuccessor(v607, v601, -1);
    llvm::MachineBasicBlock::addSuccessor(v601, v602, -1);
    llvm::MachineBasicBlock::addSuccessor(v602, v603, -1);
    v52 = v34;
    llvm::MachineBasicBlock::addSuccessor(v602, v601, -1);
    llvm::MachineBasicBlock::addSuccessor(v603, v604, -1);
    llvm::MachineBasicBlock::addSuccessor(v604, v608, -1);
    v53 = v608;
    v54 = v34;
  }
  else
  {
    llvm::MachineBasicBlock::addSuccessor((_QWORD *)v10, v600, -1);
    v53 = (_QWORD *)v10;
    v54 = v606;
  }
  llvm::MachineBasicBlock::addSuccessor(v53, v54, -1);
  llvm::MachineBasicBlock::addSuccessor(v606, (_QWORD *)v18, -1);
  v598 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v599, "", 0);
  *(_QWORD *)(*(_QWORD *)(v599 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F982A8;
  v56 = *(_QWORD *)(v599 + 8);
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
  v592 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v599, "", 0);
  *(_QWORD *)(*(_QWORD *)(v599 + 24) + 16 * (v592 & 0x7FFFFFFF)) = &off_1E7F982A8;
  v57 = *(_QWORD *)(v599 + 8);
  v58 = v51;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
  v597 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v599, "", 0);
  *(_QWORD *)(*(_QWORD *)(v599 + 24) + 16 * (v597 & 0x7FFFFFFF)) = &off_1E7F982A8;
  v59 = *(_QWORD *)(v599 + 8);
  v60 = v50;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
  v61 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v599, "", 0);
  *(_QWORD *)(*(_QWORD *)(v599 + 24) + 16 * (v61 & 0x7FFFFFFF)) = &off_1E7F982A8;
  v62 = *(_QWORD *)(v599 + 8);
  v63 = IncompleteVirtualRegister;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62);
  v594 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v599, "", 0);
  *(_QWORD *)(*(_QWORD *)(v599 + 24) + 16 * (v594 & 0x7FFFFFFF)) = &off_1E7F982A8;
  v64 = *(_QWORD *)(v599 + 8);
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
  v593 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v599, "", 0);
  *(_QWORD *)(*(_QWORD *)(v599 + 24) + 16 * (v593 & 0x7FFFFFFF)) = &off_1E7F982A8;
  v65 = *(_QWORD *)(v599 + 8);
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65);
  if (*(_BYTE *)(a4 + 292))
  {
    v66 = *(_QWORD *)(v58 + 8);
    v67 = (llvm::MachineFunction *)*((_QWORD *)v60 + 4);
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v68 = v66 + 252336;
    v69 = *((_QWORD *)v67 + 28);
    if (v69)
      *((_QWORD *)v67 + 28) = *(_QWORD *)v69;
    else
      v69 = sub_1C484358C((uint64_t)v67 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v69, v67, v68, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v70 = *((_QWORD *)v60 + 5);
    *(_QWORD *)(v69 + 24) = v70;
    v71 = *(_QWORD *)(v70 + 32);
    v72 = *(unsigned int *)(v69 + 40);
    if ((_DWORD)v72)
    {
      v195 = *(_QWORD *)(v69 + 32);
      v196 = *(_QWORD *)(v71 + 40);
      v197 = 32 * v72;
      do
      {
        if (!*(_BYTE *)v195)
        {
          v198 = *(unsigned int *)(v195 + 4);
          if ((int)v198 >= 0)
            v199 = (uint64_t *)(*(_QWORD *)(v196 + 272) + 8 * v198);
          else
            v199 = (uint64_t *)(*(_QWORD *)(v196 + 24) + 16 * (v198 & 0x7FFFFFFF) + 8);
          v200 = *v199;
          if (*v199)
          {
            v201 = *(_QWORD *)(v200 + 16);
            *(_QWORD *)(v200 + 16) = v195;
            *(_QWORD *)(v195 + 16) = v201;
            if ((*(_BYTE *)(v195 + 3) & 1) != 0)
            {
              *(_QWORD *)(v195 + 24) = v200;
            }
            else
            {
              *(_QWORD *)(v195 + 24) = 0;
              v199 = (uint64_t *)(v201 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v195 + 16) = v195;
            *(_QWORD *)(v195 + 24) = 0;
          }
          *v199 = v195;
        }
        v195 += 32;
        v197 -= 32;
      }
      while (v197);
    }
    v73 = *(_QWORD *)(v71 + 728);
    if (v73)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v73 + 24))(v73, v69);
    v74 = *v48 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v69 = v74 | *(_QWORD *)v69 & 7;
    *(_QWORD *)(v69 + 8) = v48;
    *(_QWORD *)(v74 + 8) = v69;
    *v48 = *v48 & 7 | v69;
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0x1000000;
    DWORD1(v624) = v63;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v624);
    v624 = 0u;
    v625 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v624);
    v624 = 0u;
    v625 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v624);
  }
  v75 = *(_QWORD *)(v58 + 8);
  v76 = (llvm::MachineFunction *)*((_QWORD *)v60 + 4);
  *(_QWORD *)&v620 = v622;
  if (v622)
    llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
  v77 = v75 + 555600;
  v78 = *((_QWORD *)v76 + 28);
  if (v78)
    *((_QWORD *)v76 + 28) = *(_QWORD *)v78;
  else
    v78 = sub_1C484358C((uint64_t)v76 + 128, 72, 3);
  *(_QWORD *)&v624 = v620;
  if ((_QWORD)v620)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
    *(_QWORD *)&v620 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v78, v76, v77, (unsigned __int8 **)&v624, 0);
  if ((_QWORD)v624)
    llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
  if ((_QWORD)v620)
    llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
  v79 = *((_QWORD *)v60 + 5);
  *(_QWORD *)(v78 + 24) = v79;
  v80 = *(_QWORD *)(v79 + 32);
  v81 = *(unsigned int *)(v78 + 40);
  if ((_DWORD)v81)
  {
    v186 = *(_QWORD *)(v78 + 32);
    v187 = *(_QWORD *)(v80 + 40);
    v188 = 32 * v81;
    do
    {
      if (!*(_BYTE *)v186)
      {
        v189 = *(unsigned int *)(v186 + 4);
        if ((int)v189 >= 0)
          v190 = (uint64_t *)(*(_QWORD *)(v187 + 272) + 8 * v189);
        else
          v190 = (uint64_t *)(*(_QWORD *)(v187 + 24) + 16 * (v189 & 0x7FFFFFFF) + 8);
        v191 = *v190;
        if (*v190)
        {
          v192 = *(_QWORD *)(v191 + 16);
          *(_QWORD *)(v191 + 16) = v186;
          *(_QWORD *)(v186 + 16) = v192;
          if ((*(_BYTE *)(v186 + 3) & 1) != 0)
          {
            *(_QWORD *)(v186 + 24) = v191;
          }
          else
          {
            *(_QWORD *)(v186 + 24) = 0;
            v190 = (uint64_t *)(v192 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v186 + 16) = v186;
          *(_QWORD *)(v186 + 24) = 0;
        }
        *v190 = v186;
      }
      v186 += 32;
      v188 -= 32;
    }
    while (v188);
  }
  v82 = *(_QWORD *)(v80 + 728);
  if (v82)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v82 + 24))(v82, v78);
  v83 = *v48 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v78 = v83 | *(_QWORD *)v78 & 7;
  *(_QWORD *)(v78 + 8) = v48;
  *(_QWORD *)(v83 + 8) = v78;
  *v48 = *v48 & 7 | v78;
  *((_QWORD *)&v624 + 1) = 0;
  *(_QWORD *)&v625 = v52;
  LODWORD(v624) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v78, v76, (const llvm::MachineOperand *)&v624);
  v84 = a1;
  if ((**(_WORD **)(a1 + 16) & 0xFFFE) == 0x104)
  {
    v85 = *(_OWORD **)(a1 + 32);
    v86 = v85[5];
    v620 = v85[4];
    v621 = v86;
    v87 = v85[5];
    v618 = v85[4];
    v619 = v87;
    v88 = v85[7];
    v616 = v85[6];
    v617 = v88;
    v89 = 8;
    if (a5)
      v89 = 6;
    v90 = &v85[v89];
    v91 = v90[1];
    v614 = *v90;
    v615 = v91;
    if (!(_BYTE)v620)
      LODWORD(v620) = v620 & 0xFBFFFFFF;
    if (!(_BYTE)v618)
      LODWORD(v618) = v618 & 0xFBFFFFFF;
    if (!(_BYTE)v616)
      LODWORD(v616) = v616 & 0xFBFFFFFF;
    if (!(_BYTE)v614)
      LODWORD(v614) = v614 & 0xFBFFFFFF;
    if (*(_BYTE *)(a4 + 292))
    {
      v92 = *(_QWORD *)(v58 + 8);
      v93 = (llvm::MachineFunction *)v52[4];
      *(_QWORD *)&v613[0] = v622;
      if (v622)
        llvm::MetadataTracking::track((uint64_t)v613, v622, 2);
      v94 = *((_QWORD *)v93 + 28);
      if (v94)
        *((_QWORD *)v93 + 28) = *(_QWORD *)v94;
      else
        v94 = sub_1C484358C((uint64_t)v93 + 128, 72, 3);
      *(_QWORD *)&v624 = *(_QWORD *)&v613[0];
      if (*(_QWORD *)&v613[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v613, *(unsigned __int8 **)&v613[0], (uint64_t)&v624);
        *(_QWORD *)&v613[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v94, v93, v92, (unsigned __int8 **)&v624, 0);
      if ((_QWORD)v624)
        llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
      v84 = a1;
      if (*(_QWORD *)&v613[0])
        llvm::MetadataTracking::untrack((uint64_t)v613, *(unsigned __int8 **)&v613[0]);
      v108 = v52[5];
      *(_QWORD *)(v94 + 24) = v108;
      v109 = *(_QWORD *)(v108 + 32);
      v110 = *(unsigned int *)(v94 + 40);
      if ((_DWORD)v110)
      {
        v530 = *(_QWORD *)(v94 + 32);
        v531 = *(_QWORD *)(v109 + 40);
        v532 = 32 * v110;
        do
        {
          if (!*(_BYTE *)v530)
          {
            v533 = *(unsigned int *)(v530 + 4);
            if ((int)v533 >= 0)
              v534 = (uint64_t *)(*(_QWORD *)(v531 + 272) + 8 * v533);
            else
              v534 = (uint64_t *)(*(_QWORD *)(v531 + 24) + 16 * (v533 & 0x7FFFFFFF) + 8);
            v535 = *v534;
            if (*v534)
            {
              v536 = *(_QWORD *)(v535 + 16);
              *(_QWORD *)(v535 + 16) = v530;
              *(_QWORD *)(v530 + 16) = v536;
              if ((*(_BYTE *)(v530 + 3) & 1) != 0)
              {
                *(_QWORD *)(v530 + 24) = v535;
              }
              else
              {
                *(_QWORD *)(v530 + 24) = 0;
                v534 = (uint64_t *)(v536 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v530 + 16) = v530;
              *(_QWORD *)(v530 + 24) = 0;
            }
            *v534 = v530;
          }
          v530 += 32;
          v532 -= 32;
        }
        while (v532);
      }
      v111 = *(_QWORD *)(v109 + 728);
      if (v111)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v111 + 24))(v111, v94);
      v112 = *v605 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v94 = v112 | *(_QWORD *)v94 & 7;
      *(_QWORD *)(v94 + 8) = v605;
      *(_QWORD *)(v112 + 8) = v94;
      *v605 = *v605 & 7 | v94;
      *((_QWORD *)&v624 + 1) = 0;
      v625 = 0uLL;
      LODWORD(v624) = 0x1000000;
      DWORD1(v624) = v592;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)&v624);
      *((_QWORD *)&v624 + 1) = 0;
      v625 = 0uLL;
      LODWORD(v624) = 0;
      DWORD1(v624) = v63;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)&v624);
      *((_QWORD *)&v624 + 1) = 0;
      *(_QWORD *)&v625 = v60;
      LODWORD(v624) = 4;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)&v624);
      *((_QWORD *)&v624 + 1) = 0;
      v625 = 0uLL;
      LODWORD(v624) = 0;
      DWORD1(v624) = v597;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)&v624);
      *((_QWORD *)&v624 + 1) = 0;
      *(_QWORD *)&v625 = v608;
      LODWORD(v624) = 4;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)&v624);
    }
    if (a5)
    {
      v113 = *(_QWORD *)(v58 + 8);
      v114 = (llvm::MachineFunction *)v52[4];
      *(_QWORD *)&v613[0] = v622;
      if (v622)
        llvm::MetadataTracking::track((uint64_t)v613, v622, 2);
      v115 = v113 + 569760;
      v116 = *((_QWORD *)v114 + 28);
      if (v116)
        *((_QWORD *)v114 + 28) = *(_QWORD *)v116;
      else
        v116 = sub_1C484358C((uint64_t)v114 + 128, 72, 3);
      *(_QWORD *)&v624 = *(_QWORD *)&v613[0];
      if (*(_QWORD *)&v613[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v613, *(unsigned __int8 **)&v613[0], (uint64_t)&v624);
        *(_QWORD *)&v613[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v116, v114, v115, (unsigned __int8 **)&v624, 0);
      if ((_QWORD)v624)
        llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
      if (*(_QWORD *)&v613[0])
        llvm::MetadataTracking::untrack((uint64_t)v613, *(unsigned __int8 **)&v613[0]);
      v135 = v52[5];
      *(_QWORD *)(v116 + 24) = v135;
      v136 = *(_QWORD *)(v135 + 32);
      v137 = *(unsigned int *)(v116 + 40);
      if ((_DWORD)v137)
      {
        v544 = *(_QWORD *)(v116 + 32);
        v545 = *(_QWORD *)(v136 + 40);
        v546 = 32 * v137;
        do
        {
          if (!*(_BYTE *)v544)
          {
            v547 = *(unsigned int *)(v544 + 4);
            if ((int)v547 >= 0)
              v548 = (uint64_t *)(*(_QWORD *)(v545 + 272) + 8 * v547);
            else
              v548 = (uint64_t *)(*(_QWORD *)(v545 + 24) + 16 * (v547 & 0x7FFFFFFF) + 8);
            v549 = *v548;
            if (*v548)
            {
              v550 = *(_QWORD *)(v549 + 16);
              *(_QWORD *)(v549 + 16) = v544;
              *(_QWORD *)(v544 + 16) = v550;
              if ((*(_BYTE *)(v544 + 3) & 1) != 0)
              {
                *(_QWORD *)(v544 + 24) = v549;
              }
              else
              {
                *(_QWORD *)(v544 + 24) = 0;
                v548 = (uint64_t *)(v550 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v544 + 16) = v544;
              *(_QWORD *)(v544 + 24) = 0;
            }
            *v548 = v544;
          }
          v544 += 32;
          v546 -= 32;
        }
        while (v546);
      }
      v138 = *(_QWORD *)(v136 + 728);
      if (v138)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v138 + 24))(v138, v116);
      v139 = *v605 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v116 = v139 | *(_QWORD *)v116 & 7;
      *(_QWORD *)(v116 + 8) = v605;
      *(_QWORD *)(v139 + 8) = v116;
      *v605 = *v605 & 7 | v116;
      *((_QWORD *)&v624 + 1) = 0;
      v625 = 0uLL;
      LODWORD(v624) = 0x1000000;
      DWORD1(v624) = v598;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v116, v114, (const llvm::MachineOperand *)&v624);
      v140 = (const llvm::MachineOperand *)&v620;
    }
    else
    {
      if ((_BYTE)v616)
        v117 = 569904;
      else
        v117 = 569952;
      v118 = *(_QWORD *)(v58 + 8);
      v114 = (llvm::MachineFunction *)v52[4];
      *(_QWORD *)&v613[0] = v622;
      if (v622)
        llvm::MetadataTracking::track((uint64_t)v613, v622, 2);
      v119 = v118 + v117;
      v116 = *((_QWORD *)v114 + 28);
      if (v116)
        *((_QWORD *)v114 + 28) = *(_QWORD *)v116;
      else
        v116 = sub_1C484358C((uint64_t)v114 + 128, 72, 3);
      *(_QWORD *)&v624 = *(_QWORD *)&v613[0];
      if (*(_QWORD *)&v613[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v613, *(unsigned __int8 **)&v613[0], (uint64_t)&v624);
        *(_QWORD *)&v613[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v116, v114, v119, (unsigned __int8 **)&v624, 0);
      if ((_QWORD)v624)
        llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
      if (*(_QWORD *)&v613[0])
        llvm::MetadataTracking::untrack((uint64_t)v613, *(unsigned __int8 **)&v613[0]);
      v141 = v52[5];
      *(_QWORD *)(v116 + 24) = v141;
      v142 = *(_QWORD *)(v141 + 32);
      v143 = *(unsigned int *)(v116 + 40);
      if ((_DWORD)v143)
      {
        v551 = *(_QWORD *)(v116 + 32);
        v552 = *(_QWORD *)(v142 + 40);
        v553 = 32 * v143;
        do
        {
          if (!*(_BYTE *)v551)
          {
            v554 = *(unsigned int *)(v551 + 4);
            if ((int)v554 >= 0)
              v555 = (uint64_t *)(*(_QWORD *)(v552 + 272) + 8 * v554);
            else
              v555 = (uint64_t *)(*(_QWORD *)(v552 + 24) + 16 * (v554 & 0x7FFFFFFF) + 8);
            v556 = *v555;
            if (*v555)
            {
              v557 = *(_QWORD *)(v556 + 16);
              *(_QWORD *)(v556 + 16) = v551;
              *(_QWORD *)(v551 + 16) = v557;
              if ((*(_BYTE *)(v551 + 3) & 1) != 0)
              {
                *(_QWORD *)(v551 + 24) = v556;
              }
              else
              {
                *(_QWORD *)(v551 + 24) = 0;
                v555 = (uint64_t *)(v557 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v551 + 16) = v551;
              *(_QWORD *)(v551 + 24) = 0;
            }
            *v555 = v551;
          }
          v551 += 32;
          v553 -= 32;
        }
        while (v553);
      }
      v144 = *(_QWORD *)(v142 + 728);
      if (v144)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v144 + 24))(v144, v116);
      v145 = *v605 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v116 = v145 | *(_QWORD *)v116 & 7;
      *(_QWORD *)(v116 + 8) = v605;
      *(_QWORD *)(v145 + 8) = v116;
      *v605 = *v605 & 7 | v116;
      *((_QWORD *)&v624 + 1) = 0;
      v625 = 0uLL;
      LODWORD(v624) = 0x1000000;
      DWORD1(v624) = v598;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v116, v114, (const llvm::MachineOperand *)&v624);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v116, v114, (const llvm::MachineOperand *)&v618);
      v140 = (const llvm::MachineOperand *)&v616;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v116, v114, v140);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v116, v114, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v116, v114, (const llvm::MachineOperand *)&v624);
    v624 = 0u;
    v625 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v116, v114, (const llvm::MachineOperand *)&v624);
    *(_QWORD *)(*(_QWORD *)(v599 + 24)
              + 16 * (llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v599, "", 0) & 0x7FFFFFFF)) = &off_1E7F98468;
    v146 = *(_QWORD *)(v599 + 8);
    if (v146)
      (*(void (**)(uint64_t))(*(_QWORD *)v146 + 24))(v146);
    __asm { BR              X10 }
  }
  v95 = *(_OWORD **)(a1 + 32);
  v96 = v95[3];
  v620 = v95[2];
  v621 = v96;
  v97 = v95[3];
  v618 = v95[2];
  v619 = v97;
  v98 = v95[5];
  v616 = v95[4];
  v617 = v98;
  v99 = 6;
  v100 = 4;
  if (!a5)
    v100 = 6;
  v101 = &v95[v100];
  v102 = v101[1];
  v614 = *v101;
  v615 = v102;
  if (!a5)
    v99 = 8;
  v103 = &v95[v99];
  v104 = v103[1];
  v613[0] = *v103;
  v613[1] = v104;
  if (!(_BYTE)v620)
    LODWORD(v620) = v620 & 0xFBFFFFFF;
  if (!(_BYTE)v618)
    LODWORD(v618) = v618 & 0xFBFFFFFF;
  if (!(_BYTE)v616)
    LODWORD(v616) = v616 & 0xFBFFFFFF;
  if (!(_BYTE)v614)
    LODWORD(v614) = v614 & 0xFBFFFFFF;
  if (!LOBYTE(v613[0]))
    LODWORD(v613[0]) &= ~0x4000000u;
  if (*(_BYTE *)(a4 + 292))
  {
    v105 = *(_QWORD *)(v58 + 8);
    v106 = (llvm::MachineFunction *)v52[4];
    v623 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v623, v622, 2);
    v107 = *((_QWORD *)v106 + 28);
    if (v107)
      *((_QWORD *)v106 + 28) = *(_QWORD *)v107;
    else
      v107 = sub_1C484358C((uint64_t)v106 + 128, 72, 3);
    *(_QWORD *)&v624 = v623;
    if (v623)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v623, v623, (uint64_t)&v624);
      v623 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v107, v106, v105, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    v84 = a1;
    if (v623)
      llvm::MetadataTracking::untrack((uint64_t)&v623, v623);
    v120 = v52[5];
    *(_QWORD *)(v107 + 24) = v120;
    v121 = *(_QWORD *)(v120 + 32);
    v122 = *(unsigned int *)(v107 + 40);
    if ((_DWORD)v122)
    {
      v537 = *(_QWORD *)(v107 + 32);
      v538 = *(_QWORD *)(v121 + 40);
      v539 = 32 * v122;
      do
      {
        if (!*(_BYTE *)v537)
        {
          v540 = *(unsigned int *)(v537 + 4);
          if ((int)v540 >= 0)
            v541 = (uint64_t *)(*(_QWORD *)(v538 + 272) + 8 * v540);
          else
            v541 = (uint64_t *)(*(_QWORD *)(v538 + 24) + 16 * (v540 & 0x7FFFFFFF) + 8);
          v542 = *v541;
          if (*v541)
          {
            v543 = *(_QWORD *)(v542 + 16);
            *(_QWORD *)(v542 + 16) = v537;
            *(_QWORD *)(v537 + 16) = v543;
            if ((*(_BYTE *)(v537 + 3) & 1) != 0)
            {
              *(_QWORD *)(v537 + 24) = v542;
            }
            else
            {
              *(_QWORD *)(v537 + 24) = 0;
              v541 = (uint64_t *)(v543 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v537 + 16) = v537;
            *(_QWORD *)(v537 + 24) = 0;
          }
          *v541 = v537;
        }
        v537 += 32;
        v539 -= 32;
      }
      while (v539);
    }
    v123 = *(_QWORD *)(v121 + 728);
    if (v123)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v123 + 24))(v123, v107);
    v124 = *v605 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v107 = v124 | *(_QWORD *)v107 & 7;
    *(_QWORD *)(v107 + 8) = v605;
    *(_QWORD *)(v124 + 8) = v107;
    *v605 = *v605 & 7 | v107;
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0x1000000;
    DWORD1(v624) = v592;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v106, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v63;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v106, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v60;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v106, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v597;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v106, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v608;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v106, (const llvm::MachineOperand *)&v624);
  }
  v125 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v599, "", 0);
  *(_QWORD *)(*(_QWORD *)(v599 + 24) + 16 * (v125 & 0x7FFFFFFF)) = &off_1E7F98468;
  v126 = *(_QWORD *)(v599 + 8);
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 24))(v126);
  v127 = v606;
  if (a5)
  {
    v128 = *(_QWORD *)(v58 + 8);
    v129 = (llvm::MachineFunction *)v52[4];
    v623 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v623, v622, 2);
    v130 = v128 + 569760;
    v131 = *((_QWORD *)v129 + 28);
    if (v131)
      *((_QWORD *)v129 + 28) = *(_QWORD *)v131;
    else
      v131 = sub_1C484358C((uint64_t)v129 + 128, 72, 3);
    *(_QWORD *)&v624 = v623;
    if (v623)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v623, v623, (uint64_t)&v624);
      v623 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v131, v129, v130, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if (v623)
      llvm::MetadataTracking::untrack((uint64_t)&v623, v623);
    v147 = v52[5];
    *(_QWORD *)(v131 + 24) = v147;
    v148 = *(_QWORD *)(v147 + 32);
    v149 = *(unsigned int *)(v131 + 40);
    if ((_DWORD)v149)
    {
      v558 = *(_QWORD *)(v131 + 32);
      v559 = *(_QWORD *)(v148 + 40);
      v560 = 32 * v149;
      do
      {
        if (!*(_BYTE *)v558)
        {
          v561 = *(unsigned int *)(v558 + 4);
          if ((int)v561 >= 0)
            v562 = (uint64_t *)(*(_QWORD *)(v559 + 272) + 8 * v561);
          else
            v562 = (uint64_t *)(*(_QWORD *)(v559 + 24) + 16 * (v561 & 0x7FFFFFFF) + 8);
          v563 = *v562;
          if (*v562)
          {
            v564 = *(_QWORD *)(v563 + 16);
            *(_QWORD *)(v563 + 16) = v558;
            *(_QWORD *)(v558 + 16) = v564;
            if ((*(_BYTE *)(v558 + 3) & 1) != 0)
            {
              *(_QWORD *)(v558 + 24) = v563;
            }
            else
            {
              *(_QWORD *)(v558 + 24) = 0;
              v562 = (uint64_t *)(v564 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v558 + 16) = v558;
            *(_QWORD *)(v558 + 24) = 0;
          }
          *v562 = v558;
        }
        v558 += 32;
        v560 -= 32;
      }
      while (v560);
    }
    v150 = *(_QWORD *)(v148 + 728);
    if (v150)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v150 + 24))(v150, v131);
    v151 = *v605 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v131 = v151 | *(_QWORD *)v131 & 7;
    *(_QWORD *)(v131 + 8) = v605;
    *(_QWORD *)(v151 + 8) = v131;
    *v605 = *v605 & 7 | v131;
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0x1000000;
    DWORD1(v624) = v598;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v131, v129, (const llvm::MachineOperand *)&v624);
    v152 = (const llvm::MachineOperand *)&v620;
  }
  else
  {
    if ((_BYTE)v616)
      v132 = 569904;
    else
      v132 = 569952;
    v133 = *(_QWORD *)(v58 + 8);
    v129 = (llvm::MachineFunction *)v52[4];
    v623 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v623, v622, 2);
    v134 = v133 + v132;
    v131 = *((_QWORD *)v129 + 28);
    if (v131)
      *((_QWORD *)v129 + 28) = *(_QWORD *)v131;
    else
      v131 = sub_1C484358C((uint64_t)v129 + 128, 72, 3);
    *(_QWORD *)&v624 = v623;
    if (v623)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v623, v623, (uint64_t)&v624);
      v623 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v131, v129, v134, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if (v623)
      llvm::MetadataTracking::untrack((uint64_t)&v623, v623);
    v153 = v52[5];
    *(_QWORD *)(v131 + 24) = v153;
    v154 = *(_QWORD *)(v153 + 32);
    v155 = *(unsigned int *)(v131 + 40);
    if ((_DWORD)v155)
    {
      v565 = *(_QWORD *)(v131 + 32);
      v566 = *(_QWORD *)(v154 + 40);
      v567 = 32 * v155;
      do
      {
        if (!*(_BYTE *)v565)
        {
          v568 = *(unsigned int *)(v565 + 4);
          if ((int)v568 >= 0)
            v569 = (uint64_t *)(*(_QWORD *)(v566 + 272) + 8 * v568);
          else
            v569 = (uint64_t *)(*(_QWORD *)(v566 + 24) + 16 * (v568 & 0x7FFFFFFF) + 8);
          v570 = *v569;
          if (*v569)
          {
            v571 = *(_QWORD *)(v570 + 16);
            *(_QWORD *)(v570 + 16) = v565;
            *(_QWORD *)(v565 + 16) = v571;
            if ((*(_BYTE *)(v565 + 3) & 1) != 0)
            {
              *(_QWORD *)(v565 + 24) = v570;
            }
            else
            {
              *(_QWORD *)(v565 + 24) = 0;
              v569 = (uint64_t *)(v571 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v565 + 16) = v565;
            *(_QWORD *)(v565 + 24) = 0;
          }
          *v569 = v565;
        }
        v565 += 32;
        v567 -= 32;
      }
      while (v567);
    }
    v156 = *(_QWORD *)(v154 + 728);
    if (v156)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v156 + 24))(v156, v131);
    v157 = *v605 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v131 = v157 | *(_QWORD *)v131 & 7;
    *(_QWORD *)(v131 + 8) = v605;
    *(_QWORD *)(v157 + 8) = v131;
    *v605 = *v605 & 7 | v131;
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0x1000000;
    DWORD1(v624) = v598;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v131, v129, (const llvm::MachineOperand *)&v624);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v131, v129, (const llvm::MachineOperand *)&v618);
    v152 = (const llvm::MachineOperand *)&v616;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v131, v129, v152);
  LODWORD(v624) = 1;
  *((_QWORD *)&v624 + 1) = 0;
  *(_QWORD *)&v625 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v131, v129, (const llvm::MachineOperand *)&v624);
  LODWORD(v624) = 1;
  *((_QWORD *)&v624 + 1) = 0;
  *(_QWORD *)&v625 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v131, v129, (const llvm::MachineOperand *)&v624);
  v624 = 0u;
  v625 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v131, v129, (const llvm::MachineOperand *)&v624);
  v158 = *(_QWORD *)(v58 + 8);
  v159 = (llvm::MachineFunction *)v52[4];
  v623 = v622;
  if (v622)
    llvm::MetadataTracking::track((uint64_t)&v623, v622, 2);
  v160 = v158 + 227376;
  v161 = *((_QWORD *)v159 + 28);
  if (v161)
    *((_QWORD *)v159 + 28) = *(_QWORD *)v161;
  else
    v161 = sub_1C484358C((uint64_t)v159 + 128, 72, 3);
  *(_QWORD *)&v624 = v623;
  if (v623)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v623, v623, (uint64_t)&v624);
    v623 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v161, v159, v160, (unsigned __int8 **)&v624, 0);
  if ((_QWORD)v624)
    llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
  if (v623)
    llvm::MetadataTracking::untrack((uint64_t)&v623, v623);
  v162 = v52[5];
  *(_QWORD *)(v161 + 24) = v162;
  v163 = *(_QWORD *)(v162 + 32);
  v164 = *(unsigned int *)(v161 + 40);
  if ((_DWORD)v164)
  {
    v202 = *(_QWORD *)(v161 + 32);
    v203 = *(_QWORD *)(v163 + 40);
    v204 = 32 * v164;
    do
    {
      if (!*(_BYTE *)v202)
      {
        v205 = *(unsigned int *)(v202 + 4);
        if ((int)v205 >= 0)
          v206 = (uint64_t *)(*(_QWORD *)(v203 + 272) + 8 * v205);
        else
          v206 = (uint64_t *)(*(_QWORD *)(v203 + 24) + 16 * (v205 & 0x7FFFFFFF) + 8);
        v207 = *v206;
        if (*v206)
        {
          v208 = *(_QWORD *)(v207 + 16);
          *(_QWORD *)(v207 + 16) = v202;
          *(_QWORD *)(v202 + 16) = v208;
          if ((*(_BYTE *)(v202 + 3) & 1) != 0)
          {
            *(_QWORD *)(v202 + 24) = v207;
          }
          else
          {
            *(_QWORD *)(v202 + 24) = 0;
            v206 = (uint64_t *)(v208 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v202 + 16) = v202;
          *(_QWORD *)(v202 + 24) = 0;
        }
        *v206 = v202;
      }
      v202 += 32;
      v204 -= 32;
    }
    while (v204);
  }
  v165 = *(_QWORD *)(v163 + 728);
  if (v165)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v165 + 24))(v165, v161);
  v166 = *v605 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v161 = v166 | *(_QWORD *)v161 & 7;
  *(_QWORD *)(v161 + 8) = v605;
  *(_QWORD *)(v166 + 8) = v161;
  *v605 = *v605 & 7 | v161;
  *((_QWORD *)&v624 + 1) = 0;
  v625 = 0uLL;
  LODWORD(v624) = 0x1000000;
  DWORD1(v624) = v125;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v624);
  LODWORD(v624) = 1;
  *((_QWORD *)&v624 + 1) = 0;
  *(_QWORD *)&v625 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v624);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)v613);
  LODWORD(v624) = 1;
  *((_QWORD *)&v624 + 1) = 0;
  *(_QWORD *)&v625 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v624);
  *((_QWORD *)&v624 + 1) = 0;
  v625 = 0uLL;
  LODWORD(v624) = 0;
  DWORD1(v624) = v598;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v624);
  LODWORD(v624) = 1;
  *((_QWORD *)&v624 + 1) = 0;
  *(_QWORD *)&v625 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v624);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v614);
  LODWORD(v624) = 1;
  *((_QWORD *)&v624 + 1) = 0;
  *(_QWORD *)&v625 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v624);
  v625 = 0uLL;
  v624 = 0x201000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v624);
  LODWORD(v624) = 1;
  *((_QWORD *)&v624 + 1) = 0;
  *(_QWORD *)&v625 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v624);
  v624 = 0u;
  v625 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v624);
  if (a5)
  {
    v167 = *(_QWORD *)(v58 + 8);
    v168 = *(llvm::MachineFunction **)(v10 + 32);
    v623 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v623, v622, 2);
    v169 = v167 + 573648;
    v170 = *((_QWORD *)v168 + 28);
    if (v170)
      *((_QWORD *)v168 + 28) = *(_QWORD *)v170;
    else
      v170 = sub_1C484358C((uint64_t)v168 + 128, 72, 3);
    *(_QWORD *)&v624 = v623;
    if (v623)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v623, v623, (uint64_t)&v624);
      v623 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v170, v168, v169, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    v174 = (unint64_t *)(v10 + 48);
    if (v623)
      llvm::MetadataTracking::untrack((uint64_t)&v623, v623);
    v175 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v170 + 24) = v175;
    v176 = *(_QWORD *)(v175 + 32);
    v177 = *(unsigned int *)(v170 + 40);
    if ((_DWORD)v177)
    {
      v572 = *(_QWORD *)(v170 + 32);
      v573 = *(_QWORD *)(v176 + 40);
      v574 = 32 * v177;
      do
      {
        if (!*(_BYTE *)v572)
        {
          v575 = *(unsigned int *)(v572 + 4);
          if ((int)v575 >= 0)
            v576 = (uint64_t *)(*(_QWORD *)(v573 + 272) + 8 * v575);
          else
            v576 = (uint64_t *)(*(_QWORD *)(v573 + 24) + 16 * (v575 & 0x7FFFFFFF) + 8);
          v577 = *v576;
          if (*v576)
          {
            v578 = *(_QWORD *)(v577 + 16);
            *(_QWORD *)(v577 + 16) = v572;
            *(_QWORD *)(v572 + 16) = v578;
            if ((*(_BYTE *)(v572 + 3) & 1) != 0)
            {
              *(_QWORD *)(v572 + 24) = v577;
            }
            else
            {
              *(_QWORD *)(v572 + 24) = 0;
              v576 = (uint64_t *)(v578 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v572 + 16) = v572;
            *(_QWORD *)(v572 + 24) = 0;
          }
          *v576 = v572;
        }
        v572 += 32;
        v574 -= 32;
      }
      while (v574);
    }
    v178 = *(_QWORD *)(v176 + 728);
    if (v178)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v178 + 24))(v178, v170);
    v179 = *v596 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v170 = v179 | *(_QWORD *)v170 & 7;
    *(_QWORD *)(v170 + 8) = v596;
    *(_QWORD *)(v179 + 8) = v170;
    *v596 = *v596 & 7 | v170;
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v125;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v170, v168, (const llvm::MachineOperand *)&v624);
    v180 = (const llvm::MachineOperand *)&v620;
  }
  else
  {
    if ((_BYTE)v616)
      v171 = 573792;
    else
      v171 = 573840;
    v172 = *(_QWORD *)(v58 + 8);
    v168 = *(llvm::MachineFunction **)(v10 + 32);
    v623 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v623, v622, 2);
    v173 = v172 + v171;
    v170 = *((_QWORD *)v168 + 28);
    if (v170)
      *((_QWORD *)v168 + 28) = *(_QWORD *)v170;
    else
      v170 = sub_1C484358C((uint64_t)v168 + 128, 72, 3);
    *(_QWORD *)&v624 = v623;
    if (v623)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v623, v623, (uint64_t)&v624);
      v623 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v170, v168, v173, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    v174 = (unint64_t *)(v10 + 48);
    if (v623)
      llvm::MetadataTracking::untrack((uint64_t)&v623, v623);
    v181 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v170 + 24) = v181;
    v182 = *(_QWORD *)(v181 + 32);
    v183 = *(unsigned int *)(v170 + 40);
    if ((_DWORD)v183)
    {
      v579 = *(_QWORD *)(v170 + 32);
      v580 = *(_QWORD *)(v182 + 40);
      v581 = 32 * v183;
      do
      {
        if (!*(_BYTE *)v579)
        {
          v582 = *(unsigned int *)(v579 + 4);
          if ((int)v582 >= 0)
            v583 = (uint64_t *)(*(_QWORD *)(v580 + 272) + 8 * v582);
          else
            v583 = (uint64_t *)(*(_QWORD *)(v580 + 24) + 16 * (v582 & 0x7FFFFFFF) + 8);
          v584 = *v583;
          if (*v583)
          {
            v585 = *(_QWORD *)(v584 + 16);
            *(_QWORD *)(v584 + 16) = v579;
            *(_QWORD *)(v579 + 16) = v585;
            if ((*(_BYTE *)(v579 + 3) & 1) != 0)
            {
              *(_QWORD *)(v579 + 24) = v584;
            }
            else
            {
              *(_QWORD *)(v579 + 24) = 0;
              v583 = (uint64_t *)(v585 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v579 + 16) = v579;
            *(_QWORD *)(v579 + 24) = 0;
          }
          *v583 = v579;
        }
        v579 += 32;
        v581 -= 32;
      }
      while (v581);
    }
    v184 = *(_QWORD *)(v182 + 728);
    if (v184)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v184 + 24))(v184, v170);
    v185 = *v596 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v170 = v185 | *(_QWORD *)v170 & 7;
    *(_QWORD *)(v170 + 8) = v596;
    *(_QWORD *)(v185 + 8) = v170;
    *v596 = *v596 & 7 | v170;
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v125;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v170, v168, (const llvm::MachineOperand *)&v624);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v170, v168, (const llvm::MachineOperand *)&v618);
    v180 = (const llvm::MachineOperand *)&v616;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v170, v168, v180);
  LODWORD(v624) = 1;
  *((_QWORD *)&v624 + 1) = 0;
  *(_QWORD *)&v625 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v170, v168, (const llvm::MachineOperand *)&v624);
  LODWORD(v624) = 1;
  *((_QWORD *)&v624 + 1) = 0;
  *(_QWORD *)&v625 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v170, v168, (const llvm::MachineOperand *)&v624);
  v624 = 0u;
  v625 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v170, v168, (const llvm::MachineOperand *)&v624);
  v209 = *(_QWORD *)(v58 + 8);
  if (*(_BYTE *)(a4 + 292))
  {
    v210 = *(llvm::MachineFunction **)(v10 + 32);
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v211 = v209 + 644592;
    v212 = *((_QWORD *)v210 + 28);
    v213 = v591;
    if (v212)
      *((_QWORD *)v210 + 28) = *(_QWORD *)v212;
    else
      v212 = sub_1C484358C((uint64_t)v210 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v212, v210, v211, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v217 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v212 + 24) = v217;
    v218 = *(_QWORD *)(v217 + 32);
    v219 = *(unsigned int *)(v212 + 40);
    if ((_DWORD)v219)
    {
      v390 = *(_QWORD *)(v212 + 32);
      v391 = *(_QWORD *)(v218 + 40);
      v392 = 32 * v219;
      do
      {
        if (!*(_BYTE *)v390)
        {
          v393 = *(unsigned int *)(v390 + 4);
          if ((int)v393 >= 0)
            v394 = (uint64_t *)(*(_QWORD *)(v391 + 272) + 8 * v393);
          else
            v394 = (uint64_t *)(*(_QWORD *)(v391 + 24) + 16 * (v393 & 0x7FFFFFFF) + 8);
          v395 = *v394;
          if (*v394)
          {
            v396 = *(_QWORD *)(v395 + 16);
            *(_QWORD *)(v395 + 16) = v390;
            *(_QWORD *)(v390 + 16) = v396;
            if ((*(_BYTE *)(v390 + 3) & 1) != 0)
            {
              *(_QWORD *)(v390 + 24) = v395;
            }
            else
            {
              *(_QWORD *)(v390 + 24) = 0;
              v394 = (uint64_t *)(v396 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v390 + 16) = v390;
            *(_QWORD *)(v390 + 24) = 0;
          }
          *v394 = v390;
        }
        v390 += 32;
        v392 -= 32;
      }
      while (v392);
    }
    v220 = *(_QWORD *)(v218 + 728);
    if (v220)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v220 + 24))(v220, v212);
    v221 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v212 = v221 | *(_QWORD *)v212 & 7;
    *(_QWORD *)(v212 + 8) = v174;
    *(_QWORD *)(v221 + 8) = v212;
    *(_QWORD *)(v10 + 48) = *(_QWORD *)(v10 + 48) & 7 | v212;
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v212, v210, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v212, v210, (const llvm::MachineOperand *)&v624);
    v625 = 0uLL;
    v624 = 0x200000000uLL;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v212, v210, (const llvm::MachineOperand *)&v624);
    v222 = *(_QWORD *)(v58 + 8);
    v223 = *(llvm::MachineFunction **)(v10 + 32);
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v224 = v222 + 555648;
    v225 = *((_QWORD *)v223 + 28);
    if (v225)
      *((_QWORD *)v223 + 28) = *(_QWORD *)v225;
    else
      v225 = sub_1C484358C((uint64_t)v223 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v225, v223, v224, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v226 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v225 + 24) = v226;
    v227 = *(_QWORD *)(v226 + 32);
    v228 = *(unsigned int *)(v225 + 40);
    if ((_DWORD)v228)
    {
      v397 = *(_QWORD *)(v225 + 32);
      v398 = *(_QWORD *)(v227 + 40);
      v399 = 32 * v228;
      do
      {
        if (!*(_BYTE *)v397)
        {
          v400 = *(unsigned int *)(v397 + 4);
          if ((int)v400 >= 0)
            v401 = (uint64_t *)(*(_QWORD *)(v398 + 272) + 8 * v400);
          else
            v401 = (uint64_t *)(*(_QWORD *)(v398 + 24) + 16 * (v400 & 0x7FFFFFFF) + 8);
          v402 = *v401;
          if (*v401)
          {
            v403 = *(_QWORD *)(v402 + 16);
            *(_QWORD *)(v402 + 16) = v397;
            *(_QWORD *)(v397 + 16) = v403;
            if ((*(_BYTE *)(v397 + 3) & 1) != 0)
            {
              *(_QWORD *)(v397 + 24) = v402;
            }
            else
            {
              *(_QWORD *)(v397 + 24) = 0;
              v401 = (uint64_t *)(v403 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v397 + 16) = v397;
            *(_QWORD *)(v397 + 24) = 0;
          }
          *v401 = v397;
        }
        v397 += 32;
        v399 -= 32;
      }
      while (v399);
    }
    v229 = *(_QWORD *)(v227 + 728);
    if (v229)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v229 + 24))(v229, v225);
    v230 = *v174 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v225 = v230 | *(_QWORD *)v225 & 7;
    *(_QWORD *)(v225 + 8) = v174;
    *(_QWORD *)(v230 + 8) = v225;
    *v174 = *v174 & 7 | v225;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v606;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v225, v223, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v225, v223, (const llvm::MachineOperand *)&v624);
  }
  else
  {
    v214 = *(llvm::MachineFunction **)(v10 + 32);
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v215 = v209 + 555648;
    v216 = *((_QWORD *)v214 + 28);
    if (v216)
      *((_QWORD *)v214 + 28) = *(_QWORD *)v216;
    else
      v216 = sub_1C484358C((uint64_t)v214 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v216, v214, v215, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v231 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v216 + 24) = v231;
    v232 = *(_QWORD *)(v231 + 32);
    v233 = *(unsigned int *)(v216 + 40);
    if ((_DWORD)v233)
    {
      v516 = *(_QWORD *)(v216 + 32);
      v517 = *(_QWORD *)(v232 + 40);
      v518 = 32 * v233;
      do
      {
        if (!*(_BYTE *)v516)
        {
          v519 = *(unsigned int *)(v516 + 4);
          if ((int)v519 >= 0)
            v520 = (uint64_t *)(*(_QWORD *)(v517 + 272) + 8 * v519);
          else
            v520 = (uint64_t *)(*(_QWORD *)(v517 + 24) + 16 * (v519 & 0x7FFFFFFF) + 8);
          v521 = *v520;
          if (*v520)
          {
            v522 = *(_QWORD *)(v521 + 16);
            *(_QWORD *)(v521 + 16) = v516;
            *(_QWORD *)(v516 + 16) = v522;
            if ((*(_BYTE *)(v516 + 3) & 1) != 0)
            {
              *(_QWORD *)(v516 + 24) = v521;
            }
            else
            {
              *(_QWORD *)(v516 + 24) = 0;
              v520 = (uint64_t *)(v522 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v516 + 16) = v516;
            *(_QWORD *)(v516 + 24) = 0;
          }
          *v520 = v516;
        }
        v516 += 32;
        v518 -= 32;
      }
      while (v518);
    }
    v234 = *(_QWORD *)(v232 + 728);
    if (v234)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v234 + 24))(v234, v216);
    v235 = *v174 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v216 = v235 | *(_QWORD *)v216 & 7;
    *(_QWORD *)(v216 + 8) = v174;
    *(_QWORD *)(v235 + 8) = v216;
    *v174 = *v174 & 7 | v216;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v52;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v216, v214, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v216, v214, (const llvm::MachineOperand *)&v624);
    v213 = v591;
  }
  v236 = *(_QWORD *)(v58 + 8) + 555600;
  if (*(_BYTE *)(a4 + 292))
  {
    v237 = *(llvm::MachineFunction **)(v10 + 32);
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v238 = *((_QWORD *)v237 + 28);
    if (v238)
      *((_QWORD *)v237 + 28) = *(_QWORD *)v238;
    else
      v238 = sub_1C484358C((uint64_t)v237 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v238, v237, v236, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    v241 = v602;
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v242 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v238 + 24) = v242;
    v243 = *(_QWORD *)(v242 + 32);
    v244 = *(unsigned int *)(v238 + 40);
    if ((_DWORD)v244)
    {
      v404 = *(_QWORD *)(v238 + 32);
      v405 = *(_QWORD *)(v243 + 40);
      v406 = 32 * v244;
      do
      {
        if (!*(_BYTE *)v404)
        {
          v407 = *(unsigned int *)(v404 + 4);
          if ((int)v407 >= 0)
            v408 = (uint64_t *)(*(_QWORD *)(v405 + 272) + 8 * v407);
          else
            v408 = (uint64_t *)(*(_QWORD *)(v405 + 24) + 16 * (v407 & 0x7FFFFFFF) + 8);
          v409 = *v408;
          if (*v408)
          {
            v410 = *(_QWORD *)(v409 + 16);
            *(_QWORD *)(v409 + 16) = v404;
            *(_QWORD *)(v404 + 16) = v410;
            if ((*(_BYTE *)(v404 + 3) & 1) != 0)
            {
              *(_QWORD *)(v404 + 24) = v409;
            }
            else
            {
              *(_QWORD *)(v404 + 24) = 0;
              v408 = (uint64_t *)(v410 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v404 + 16) = v404;
            *(_QWORD *)(v404 + 24) = 0;
          }
          *v408 = v404;
        }
        v404 += 32;
        v406 -= 32;
      }
      while (v406);
    }
    v245 = *(_QWORD *)(v243 + 728);
    if (v245)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v245 + 24))(v245, v238);
    v246 = *v596 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v238 = v246 | *(_QWORD *)v238 & 7;
    *(_QWORD *)(v238 + 8) = v596;
    *(_QWORD *)(v246 + 8) = v238;
    *v596 = *v596 & 7 | v238;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v611;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v238, v237, (const llvm::MachineOperand *)&v624);
    v247 = *(_QWORD *)(v58 + 8);
    if (a5)
      v248 = 133392;
    else
      v248 = 138480;
    v249 = (llvm::MachineFunction *)v611[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v250 = v247 + v248;
    v251 = *((_QWORD *)v249 + 28);
    if (v251)
      *((_QWORD *)v249 + 28) = *(_QWORD *)v251;
    else
      v251 = sub_1C484358C((uint64_t)v249 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v251, v249, v250, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v252 = v611[5];
    *(_QWORD *)(v251 + 24) = v252;
    v253 = *(_QWORD *)(v252 + 32);
    v254 = *(unsigned int *)(v251 + 40);
    if ((_DWORD)v254)
    {
      v411 = *(_QWORD *)(v251 + 32);
      v412 = *(_QWORD *)(v253 + 40);
      v413 = 32 * v254;
      do
      {
        if (!*(_BYTE *)v411)
        {
          v414 = *(unsigned int *)(v411 + 4);
          if ((int)v414 >= 0)
            v415 = (uint64_t *)(*(_QWORD *)(v412 + 272) + 8 * v414);
          else
            v415 = (uint64_t *)(*(_QWORD *)(v412 + 24) + 16 * (v414 & 0x7FFFFFFF) + 8);
          v416 = *v415;
          if (*v415)
          {
            v417 = *(_QWORD *)(v416 + 16);
            *(_QWORD *)(v416 + 16) = v411;
            *(_QWORD *)(v411 + 16) = v417;
            if ((*(_BYTE *)(v411 + 3) & 1) != 0)
            {
              *(_QWORD *)(v411 + 24) = v416;
            }
            else
            {
              *(_QWORD *)(v411 + 24) = 0;
              v415 = (uint64_t *)(v417 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v411 + 16) = v411;
            *(_QWORD *)(v411 + 24) = 0;
          }
          *v415 = v411;
        }
        v411 += 32;
        v413 -= 32;
      }
      while (v413);
    }
    v255 = *(_QWORD *)(v253 + 728);
    if (v255)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v255 + 24))(v255, v251);
    v256 = v611[6] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v251 = v256 | *(_QWORD *)v251 & 7;
    *(_QWORD *)(v251 + 8) = v213;
    *(_QWORD *)(v256 + 8) = v251;
    v611[6] = v611[6] & 7 | v251;
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0x1000000;
    DWORD1(v624) = v597;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v251, v249, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v251, v249, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v592;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v251, v249, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v251, v249, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v251, v249, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v251, v249, (const llvm::MachineOperand *)&v624);
    v624 = 0u;
    v625 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v251, v249, (const llvm::MachineOperand *)&v624);
    v257 = *(_QWORD *)(v58 + 8);
    v239 = (llvm::MachineFunction *)v611[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v258 = v257 + 470640;
    v259 = *((_QWORD *)v239 + 28);
    v127 = v606;
    if (v259)
      *((_QWORD *)v239 + 28) = *(_QWORD *)v259;
    else
      v259 = sub_1C484358C((uint64_t)v239 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v259, v239, v258, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v260 = v611[5];
    *(_QWORD *)(v259 + 24) = v260;
    v261 = *(_QWORD *)(v260 + 32);
    v262 = *(unsigned int *)(v259 + 40);
    if ((_DWORD)v262)
    {
      v418 = *(_QWORD *)(v259 + 32);
      v419 = *(_QWORD *)(v261 + 40);
      v420 = 32 * v262;
      do
      {
        if (!*(_BYTE *)v418)
        {
          v421 = *(unsigned int *)(v418 + 4);
          if ((int)v421 >= 0)
            v422 = (uint64_t *)(*(_QWORD *)(v419 + 272) + 8 * v421);
          else
            v422 = (uint64_t *)(*(_QWORD *)(v419 + 24) + 16 * (v421 & 0x7FFFFFFF) + 8);
          v423 = *v422;
          if (*v422)
          {
            v424 = *(_QWORD *)(v423 + 16);
            *(_QWORD *)(v423 + 16) = v418;
            *(_QWORD *)(v418 + 16) = v424;
            if ((*(_BYTE *)(v418 + 3) & 1) != 0)
            {
              *(_QWORD *)(v418 + 24) = v423;
            }
            else
            {
              *(_QWORD *)(v418 + 24) = 0;
              v422 = (uint64_t *)(v424 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v418 + 16) = v418;
            *(_QWORD *)(v418 + 24) = 0;
          }
          *v422 = v418;
        }
        v418 += 32;
        v420 -= 32;
      }
      while (v420);
    }
    v263 = *(_QWORD *)(v261 + 728);
    if (v263)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v263 + 24))(v263, v259);
    v264 = *v213 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v259 = v264 | *(_QWORD *)v259 & 7;
    *(_QWORD *)(v259 + 8) = v213;
    *(_QWORD *)(v264 + 8) = v259;
    *v213 = *v213 & 7 | v259;
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0x1000000;
    DWORD1(v624) = v593;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v259, v239, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v259, v239, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 64;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v259, v239, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v597;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v259, v239, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v259, v239, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v597;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v259, v239, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v259, v239, (const llvm::MachineOperand *)&v624);
    v625 = 0uLL;
    v624 = 0x201000000uLL;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v259, v239, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v259, v239, (const llvm::MachineOperand *)&v624);
    v624 = 0u;
    v625 = 0u;
    v265 = (llvm::MachineInstr *)v259;
  }
  else
  {
    v239 = *(llvm::MachineFunction **)(v10 + 32);
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v240 = *((_QWORD *)v239 + 28);
    if (v240)
      *((_QWORD *)v239 + 28) = *(_QWORD *)v240;
    else
      v240 = sub_1C484358C((uint64_t)v239 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v240, v239, v236, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    v241 = v602;
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v266 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v240 + 24) = v266;
    v267 = *(_QWORD *)(v266 + 32);
    v268 = *(unsigned int *)(v240 + 40);
    if ((_DWORD)v268)
    {
      v523 = *(_QWORD *)(v240 + 32);
      v524 = *(_QWORD *)(v267 + 40);
      v525 = 32 * v268;
      do
      {
        if (!*(_BYTE *)v523)
        {
          v526 = *(unsigned int *)(v523 + 4);
          if ((int)v526 >= 0)
            v527 = (uint64_t *)(*(_QWORD *)(v524 + 272) + 8 * v526);
          else
            v527 = (uint64_t *)(*(_QWORD *)(v524 + 24) + 16 * (v526 & 0x7FFFFFFF) + 8);
          v528 = *v527;
          if (*v527)
          {
            v529 = *(_QWORD *)(v528 + 16);
            *(_QWORD *)(v528 + 16) = v523;
            *(_QWORD *)(v523 + 16) = v529;
            if ((*(_BYTE *)(v523 + 3) & 1) != 0)
            {
              *(_QWORD *)(v523 + 24) = v528;
            }
            else
            {
              *(_QWORD *)(v523 + 24) = 0;
              v527 = (uint64_t *)(v529 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v523 + 16) = v523;
            *(_QWORD *)(v523 + 24) = 0;
          }
          *v527 = v523;
        }
        v523 += 32;
        v525 -= 32;
      }
      while (v525);
    }
    v269 = *(_QWORD *)(v267 + 728);
    if (v269)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v269 + 24))(v269, v240);
    v270 = *v174 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v240 = v270 | *(_QWORD *)v240 & 7;
    *(_QWORD *)(v240 + 8) = v174;
    *(_QWORD *)(v270 + 8) = v240;
    *v174 = *v174 & 7 | v240;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v606;
    LODWORD(v624) = 4;
    v265 = (llvm::MachineInstr *)v240;
  }
  llvm::MachineInstr::addOperand(v265, v239, (const llvm::MachineOperand *)&v624);
  if (*(_BYTE *)(a4 + 292))
  {
    v271 = *(_QWORD *)(v58 + 8);
    v272 = (llvm::MachineFunction *)v611[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v273 = v271 + 555648;
    v274 = *((_QWORD *)v272 + 28);
    if (v274)
      *((_QWORD *)v272 + 28) = *(_QWORD *)v274;
    else
      v274 = sub_1C484358C((uint64_t)v272 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v274, v272, v273, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v275 = v611[5];
    *(_QWORD *)(v274 + 24) = v275;
    v276 = *(_QWORD *)(v275 + 32);
    v277 = *(unsigned int *)(v274 + 40);
    if ((_DWORD)v277)
    {
      v425 = *(_QWORD *)(v274 + 32);
      v426 = *(_QWORD *)(v276 + 40);
      v427 = 32 * v277;
      do
      {
        if (!*(_BYTE *)v425)
        {
          v428 = *(unsigned int *)(v425 + 4);
          if ((int)v428 >= 0)
            v429 = (uint64_t *)(*(_QWORD *)(v426 + 272) + 8 * v428);
          else
            v429 = (uint64_t *)(*(_QWORD *)(v426 + 24) + 16 * (v428 & 0x7FFFFFFF) + 8);
          v430 = *v429;
          if (*v429)
          {
            v431 = *(_QWORD *)(v430 + 16);
            *(_QWORD *)(v430 + 16) = v425;
            *(_QWORD *)(v425 + 16) = v431;
            if ((*(_BYTE *)(v425 + 3) & 1) != 0)
            {
              *(_QWORD *)(v425 + 24) = v430;
            }
            else
            {
              *(_QWORD *)(v425 + 24) = 0;
              v429 = (uint64_t *)(v431 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v425 + 16) = v425;
            *(_QWORD *)(v425 + 24) = 0;
          }
          *v429 = v425;
        }
        v425 += 32;
        v427 -= 32;
      }
      while (v427);
    }
    v278 = *(_QWORD *)(v276 + 728);
    if (v278)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v278 + 24))(v278, v274);
    v279 = v611[6] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v274 = v279 | *(_QWORD *)v274 & 7;
    *(_QWORD *)(v274 + 8) = v213;
    *(_QWORD *)(v279 + 8) = v274;
    v611[6] = v611[6] & 7 | v274;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v608;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v274, v272, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v274, v272, (const llvm::MachineOperand *)&v624);
    v280 = *(_QWORD *)(v58 + 8);
    v281 = (llvm::MachineFunction *)v611[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v282 = v280 + 555600;
    v283 = *((_QWORD *)v281 + 28);
    if (v283)
      *((_QWORD *)v281 + 28) = *(_QWORD *)v283;
    else
      v283 = sub_1C484358C((uint64_t)v281 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v283, v281, v282, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v284 = v611[5];
    *(_QWORD *)(v283 + 24) = v284;
    v285 = *(_QWORD *)(v284 + 32);
    v286 = *(unsigned int *)(v283 + 40);
    if ((_DWORD)v286)
    {
      v432 = *(_QWORD *)(v283 + 32);
      v433 = *(_QWORD *)(v285 + 40);
      v434 = 32 * v286;
      do
      {
        if (!*(_BYTE *)v432)
        {
          v435 = *(unsigned int *)(v432 + 4);
          if ((int)v435 >= 0)
            v436 = (uint64_t *)(*(_QWORD *)(v433 + 272) + 8 * v435);
          else
            v436 = (uint64_t *)(*(_QWORD *)(v433 + 24) + 16 * (v435 & 0x7FFFFFFF) + 8);
          v437 = *v436;
          if (*v436)
          {
            v438 = *(_QWORD *)(v437 + 16);
            *(_QWORD *)(v437 + 16) = v432;
            *(_QWORD *)(v432 + 16) = v438;
            if ((*(_BYTE *)(v432 + 3) & 1) != 0)
            {
              *(_QWORD *)(v432 + 24) = v437;
            }
            else
            {
              *(_QWORD *)(v432 + 24) = 0;
              v436 = (uint64_t *)(v438 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v432 + 16) = v432;
            *(_QWORD *)(v432 + 24) = 0;
          }
          *v436 = v432;
        }
        v432 += 32;
        v434 -= 32;
      }
      while (v434);
    }
    v287 = *(_QWORD *)(v285 + 728);
    if (v287)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v287 + 24))(v287, v283);
    v288 = *v213 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v283 = v288 | *(_QWORD *)v283 & 7;
    *(_QWORD *)(v283 + 8) = v213;
    *(_QWORD *)(v288 + 8) = v283;
    *v213 = *v213 & 7 | v283;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v607;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v283, v281, (const llvm::MachineOperand *)&v624);
    v289 = *(_QWORD *)(v58 + 8);
    v290 = (llvm::MachineFunction *)v607[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v291 = v289 + 555600;
    v292 = *((_QWORD *)v290 + 28);
    if (v292)
      *((_QWORD *)v290 + 28) = *(_QWORD *)v292;
    else
      v292 = sub_1C484358C((uint64_t)v290 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v292, v290, v291, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v293 = v607[5];
    *(_QWORD *)(v292 + 24) = v293;
    v294 = *(_QWORD *)(v293 + 32);
    v295 = *(unsigned int *)(v292 + 40);
    if ((_DWORD)v295)
    {
      v439 = *(_QWORD *)(v292 + 32);
      v440 = *(_QWORD *)(v294 + 40);
      v441 = 32 * v295;
      do
      {
        if (!*(_BYTE *)v439)
        {
          v442 = *(unsigned int *)(v439 + 4);
          if ((int)v442 >= 0)
            v443 = (uint64_t *)(*(_QWORD *)(v440 + 272) + 8 * v442);
          else
            v443 = (uint64_t *)(*(_QWORD *)(v440 + 24) + 16 * (v442 & 0x7FFFFFFF) + 8);
          v444 = *v443;
          if (*v443)
          {
            v445 = *(_QWORD *)(v444 + 16);
            *(_QWORD *)(v444 + 16) = v439;
            *(_QWORD *)(v439 + 16) = v445;
            if ((*(_BYTE *)(v439 + 3) & 1) != 0)
            {
              *(_QWORD *)(v439 + 24) = v444;
            }
            else
            {
              *(_QWORD *)(v439 + 24) = 0;
              v443 = (uint64_t *)(v445 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v439 + 16) = v439;
            *(_QWORD *)(v439 + 24) = 0;
          }
          *v443 = v439;
        }
        v439 += 32;
        v441 -= 32;
      }
      while (v441);
    }
    v296 = *(_QWORD *)(v294 + 728);
    if (v296)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v296 + 24))(v296, v292);
    v297 = *v586 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v292 = v297 | *(_QWORD *)v292 & 7;
    *(_QWORD *)(v292 + 8) = v586;
    *(_QWORD *)(v297 + 8) = v292;
    *v586 = *v586 & 7 | v292;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v601;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v292, v290, (const llvm::MachineOperand *)&v624);
    v298 = *(_QWORD *)(v58 + 8);
    v299 = (llvm::MachineFunction *)v601[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v300 = *((_QWORD *)v299 + 28);
    if (v300)
      *((_QWORD *)v299 + 28) = *(_QWORD *)v300;
    else
      v300 = sub_1C484358C((uint64_t)v299 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v300, v299, v298, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v301 = v601[5];
    *(_QWORD *)(v300 + 24) = v301;
    v302 = *(_QWORD *)(v301 + 32);
    v303 = *(unsigned int *)(v300 + 40);
    if ((_DWORD)v303)
    {
      v446 = *(_QWORD *)(v300 + 32);
      v447 = *(_QWORD *)(v302 + 40);
      v448 = 32 * v303;
      do
      {
        if (!*(_BYTE *)v446)
        {
          v449 = *(unsigned int *)(v446 + 4);
          if ((int)v449 >= 0)
            v450 = (uint64_t *)(*(_QWORD *)(v447 + 272) + 8 * v449);
          else
            v450 = (uint64_t *)(*(_QWORD *)(v447 + 24) + 16 * (v449 & 0x7FFFFFFF) + 8);
          v451 = *v450;
          if (*v450)
          {
            v452 = *(_QWORD *)(v451 + 16);
            *(_QWORD *)(v451 + 16) = v446;
            *(_QWORD *)(v446 + 16) = v452;
            if ((*(_BYTE *)(v446 + 3) & 1) != 0)
            {
              *(_QWORD *)(v446 + 24) = v451;
            }
            else
            {
              *(_QWORD *)(v446 + 24) = 0;
              v450 = (uint64_t *)(v452 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v446 + 16) = v446;
            *(_QWORD *)(v446 + 24) = 0;
          }
          *v450 = v446;
        }
        v446 += 32;
        v448 -= 32;
      }
      while (v448);
    }
    v304 = *(_QWORD *)(v302 + 728);
    if (v304)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v304 + 24))(v304, v300);
    v305 = v601[6] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v300 = v305 | *(_QWORD *)v300 & 7;
    *(_QWORD *)(v300 + 8) = v595;
    *(_QWORD *)(v305 + 8) = v300;
    v601[6] = v601[6] & 7 | v300;
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0x1000000;
    DWORD1(v624) = v594;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v300, v299, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v593;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v300, v299, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v607;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v300, v299, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v61;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v300, v299, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v241;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v300, v299, (const llvm::MachineOperand *)&v624);
    v306 = *(_QWORD *)(v58 + 8);
    v307 = (llvm::MachineFunction *)v601[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v308 = v306 + 555600;
    v309 = *((_QWORD *)v307 + 28);
    if (v309)
      *((_QWORD *)v307 + 28) = *(_QWORD *)v309;
    else
      v309 = sub_1C484358C((uint64_t)v307 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v309, v307, v308, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v310 = v601[5];
    *(_QWORD *)(v309 + 24) = v310;
    v311 = *(_QWORD *)(v310 + 32);
    v312 = *(unsigned int *)(v309 + 40);
    if ((_DWORD)v312)
    {
      v453 = *(_QWORD *)(v309 + 32);
      v454 = *(_QWORD *)(v311 + 40);
      v455 = 32 * v312;
      do
      {
        if (!*(_BYTE *)v453)
        {
          v456 = *(unsigned int *)(v453 + 4);
          if ((int)v456 >= 0)
            v457 = (uint64_t *)(*(_QWORD *)(v454 + 272) + 8 * v456);
          else
            v457 = (uint64_t *)(*(_QWORD *)(v454 + 24) + 16 * (v456 & 0x7FFFFFFF) + 8);
          v458 = *v457;
          if (*v457)
          {
            v459 = *(_QWORD *)(v458 + 16);
            *(_QWORD *)(v458 + 16) = v453;
            *(_QWORD *)(v453 + 16) = v459;
            if ((*(_BYTE *)(v453 + 3) & 1) != 0)
            {
              *(_QWORD *)(v453 + 24) = v458;
            }
            else
            {
              *(_QWORD *)(v453 + 24) = 0;
              v457 = (uint64_t *)(v459 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v453 + 16) = v453;
            *(_QWORD *)(v453 + 24) = 0;
          }
          *v457 = v453;
        }
        v453 += 32;
        v455 -= 32;
      }
      while (v455);
    }
    v313 = *(_QWORD *)(v311 + 728);
    if (v313)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v313 + 24))(v313, v309);
    v314 = *v595 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v309 = v314 | *(_QWORD *)v309 & 7;
    *(_QWORD *)(v309 + 8) = v595;
    *(_QWORD *)(v314 + 8) = v309;
    *v595 = *v595 & 7 | v309;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v241;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v309, v307, (const llvm::MachineOperand *)&v624);
    v315 = *(_QWORD *)(v58 + 8);
    v316 = (llvm::MachineFunction *)v241[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v317 = v315 + 586320;
    v318 = *((_QWORD *)v316 + 28);
    if (v318)
      *((_QWORD *)v316 + 28) = *(_QWORD *)v318;
    else
      v318 = sub_1C484358C((uint64_t)v316 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v318, v316, v317, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v319 = v241[5];
    *(_QWORD *)(v318 + 24) = v319;
    v320 = *(_QWORD *)(v319 + 32);
    v321 = *(unsigned int *)(v318 + 40);
    if ((_DWORD)v321)
    {
      v460 = *(_QWORD *)(v318 + 32);
      v461 = *(_QWORD *)(v320 + 40);
      v462 = 32 * v321;
      do
      {
        if (!*(_BYTE *)v460)
        {
          v463 = *(unsigned int *)(v460 + 4);
          if ((int)v463 >= 0)
            v464 = (uint64_t *)(*(_QWORD *)(v461 + 272) + 8 * v463);
          else
            v464 = (uint64_t *)(*(_QWORD *)(v461 + 24) + 16 * (v463 & 0x7FFFFFFF) + 8);
          v465 = *v464;
          if (*v464)
          {
            v466 = *(_QWORD *)(v465 + 16);
            *(_QWORD *)(v465 + 16) = v460;
            *(_QWORD *)(v460 + 16) = v466;
            if ((*(_BYTE *)(v460 + 3) & 1) != 0)
            {
              *(_QWORD *)(v460 + 24) = v465;
            }
            else
            {
              *(_QWORD *)(v460 + 24) = 0;
              v464 = (uint64_t *)(v466 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v460 + 16) = v460;
            *(_QWORD *)(v460 + 24) = 0;
          }
          *v464 = v460;
        }
        v460 += 32;
        v462 -= 32;
      }
      while (v462);
    }
    v322 = *(_QWORD *)(v320 + 728);
    if (v322)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v322 + 24))(v322, v318);
    v323 = v241[6] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v318 = v323 | *(_QWORD *)v318 & 7;
    *(_QWORD *)(v318 + 8) = v587;
    *(_QWORD *)(v323 + 8) = v318;
    v241[6] = v241[6] & 7 | v318;
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v318, v316, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v318, v316, (const llvm::MachineOperand *)&v624);
    v624 = 0u;
    v625 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v318, v316, (const llvm::MachineOperand *)&v624);
    v324 = *(_QWORD *)(v58 + 8);
    if (a5)
      v325 = 493632;
    else
      v325 = 498720;
    v326 = (llvm::MachineFunction *)v241[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v327 = v324 + v325;
    v328 = *((_QWORD *)v326 + 28);
    if (v328)
      *((_QWORD *)v326 + 28) = *(_QWORD *)v328;
    else
      v328 = sub_1C484358C((uint64_t)v326 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v328, v326, v327, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v329 = v241[5];
    *(_QWORD *)(v328 + 24) = v329;
    v330 = *(_QWORD *)(v329 + 32);
    v331 = *(unsigned int *)(v328 + 40);
    if ((_DWORD)v331)
    {
      v467 = *(_QWORD *)(v328 + 32);
      v468 = *(_QWORD *)(v330 + 40);
      v469 = 32 * v331;
      do
      {
        if (!*(_BYTE *)v467)
        {
          v470 = *(unsigned int *)(v467 + 4);
          if ((int)v470 >= 0)
            v471 = (uint64_t *)(*(_QWORD *)(v468 + 272) + 8 * v470);
          else
            v471 = (uint64_t *)(*(_QWORD *)(v468 + 24) + 16 * (v470 & 0x7FFFFFFF) + 8);
          v472 = *v471;
          if (*v471)
          {
            v473 = *(_QWORD *)(v472 + 16);
            *(_QWORD *)(v472 + 16) = v467;
            *(_QWORD *)(v467 + 16) = v473;
            if ((*(_BYTE *)(v467 + 3) & 1) != 0)
            {
              *(_QWORD *)(v467 + 24) = v472;
            }
            else
            {
              *(_QWORD *)(v467 + 24) = 0;
              v471 = (uint64_t *)(v473 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v467 + 16) = v467;
            *(_QWORD *)(v467 + 24) = 0;
          }
          *v471 = v467;
        }
        v467 += 32;
        v469 -= 32;
      }
      while (v469);
    }
    v332 = *(_QWORD *)(v330 + 728);
    if (v332)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v332 + 24))(v332, v328);
    v333 = v241[6] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v328 = v333 | *(_QWORD *)v328 & 7;
    *(_QWORD *)(v328 + 8) = v587;
    *(_QWORD *)(v333 + 8) = v328;
    v241[6] = v241[6] & 7 | v328;
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0x1000000;
    DWORD1(v624) = v61;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v326, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v326, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v594;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v326, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v326, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v326, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v326, (const llvm::MachineOperand *)&v624);
    v624 = 0u;
    v625 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v326, (const llvm::MachineOperand *)&v624);
    v334 = *(_QWORD *)(v58 + 8);
    v335 = (llvm::MachineFunction *)v241[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v336 = v334 + 420000;
    v337 = *((_QWORD *)v335 + 28);
    if (v337)
      *((_QWORD *)v335 + 28) = *(_QWORD *)v337;
    else
      v337 = sub_1C484358C((uint64_t)v335 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v337, v335, v336, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v338 = v241[5];
    *(_QWORD *)(v337 + 24) = v338;
    v339 = *(_QWORD *)(v338 + 32);
    v340 = *(unsigned int *)(v337 + 40);
    if ((_DWORD)v340)
    {
      v474 = *(_QWORD *)(v337 + 32);
      v475 = *(_QWORD *)(v339 + 40);
      v476 = 32 * v340;
      do
      {
        if (!*(_BYTE *)v474)
        {
          v477 = *(unsigned int *)(v474 + 4);
          if ((int)v477 >= 0)
            v478 = (uint64_t *)(*(_QWORD *)(v475 + 272) + 8 * v477);
          else
            v478 = (uint64_t *)(*(_QWORD *)(v475 + 24) + 16 * (v477 & 0x7FFFFFFF) + 8);
          v479 = *v478;
          if (*v478)
          {
            v480 = *(_QWORD *)(v479 + 16);
            *(_QWORD *)(v479 + 16) = v474;
            *(_QWORD *)(v474 + 16) = v480;
            if ((*(_BYTE *)(v474 + 3) & 1) != 0)
            {
              *(_QWORD *)(v474 + 24) = v479;
            }
            else
            {
              *(_QWORD *)(v474 + 24) = 0;
              v478 = (uint64_t *)(v480 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v474 + 16) = v474;
            *(_QWORD *)(v474 + 24) = 0;
          }
          *v478 = v474;
        }
        v474 += 32;
        v476 -= 32;
      }
      while (v476);
    }
    v341 = *(_QWORD *)(v339 + 728);
    if (v341)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v341 + 24))(v341, v337);
    v342 = v241[6] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v337 = v342 | *(_QWORD *)v337 & 7;
    *(_QWORD *)(v337 + 8) = v587;
    *(_QWORD *)(v342 + 8) = v337;
    v241[6] = v241[6] & 7 | v337;
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v337, v335, (const llvm::MachineOperand *)&v624);
    *((_QWORD *)&v624 + 1) = 0;
    v625 = 0uLL;
    LODWORD(v624) = 0;
    DWORD1(v624) = v61;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v337, v335, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v337, v335, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 64;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v337, v335, (const llvm::MachineOperand *)&v624);
    v625 = 0uLL;
    v624 = 0x201000000uLL;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v337, v335, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v337, v335, (const llvm::MachineOperand *)&v624);
    v624 = 0u;
    v625 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v337, v335, (const llvm::MachineOperand *)&v624);
    v343 = *(_QWORD *)(v58 + 8);
    v344 = (llvm::MachineFunction *)v241[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v345 = v343 + 555648;
    v346 = *((_QWORD *)v344 + 28);
    if (v346)
      *((_QWORD *)v344 + 28) = *(_QWORD *)v346;
    else
      v346 = sub_1C484358C((uint64_t)v344 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v346, v344, v345, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v347 = v241[5];
    *(_QWORD *)(v346 + 24) = v347;
    v348 = *(_QWORD *)(v347 + 32);
    v349 = *(unsigned int *)(v346 + 40);
    if ((_DWORD)v349)
    {
      v481 = *(_QWORD *)(v346 + 32);
      v482 = *(_QWORD *)(v348 + 40);
      v483 = 32 * v349;
      do
      {
        if (!*(_BYTE *)v481)
        {
          v484 = *(unsigned int *)(v481 + 4);
          if ((int)v484 >= 0)
            v485 = (uint64_t *)(*(_QWORD *)(v482 + 272) + 8 * v484);
          else
            v485 = (uint64_t *)(*(_QWORD *)(v482 + 24) + 16 * (v484 & 0x7FFFFFFF) + 8);
          v486 = *v485;
          if (*v485)
          {
            v487 = *(_QWORD *)(v486 + 16);
            *(_QWORD *)(v486 + 16) = v481;
            *(_QWORD *)(v481 + 16) = v487;
            if ((*(_BYTE *)(v481 + 3) & 1) != 0)
            {
              *(_QWORD *)(v481 + 24) = v486;
            }
            else
            {
              *(_QWORD *)(v481 + 24) = 0;
              v485 = (uint64_t *)(v487 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v481 + 16) = v481;
            *(_QWORD *)(v481 + 24) = 0;
          }
          *v485 = v481;
        }
        v481 += 32;
        v483 -= 32;
      }
      while (v483);
    }
    v350 = *(_QWORD *)(v348 + 728);
    if (v350)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v350 + 24))(v350, v346);
    v351 = v241[6] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v346 = v351 | *(_QWORD *)v346 & 7;
    *(_QWORD *)(v346 + 8) = v587;
    *(_QWORD *)(v351 + 8) = v346;
    v241[6] = v241[6] & 7 | v346;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v601;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v346, v344, (const llvm::MachineOperand *)&v624);
    LODWORD(v624) = 1;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v346, v344, (const llvm::MachineOperand *)&v624);
    v352 = *(_QWORD *)(v58 + 8);
    v353 = (llvm::MachineFunction *)v241[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v354 = v352 + 555600;
    v355 = *((_QWORD *)v353 + 28);
    if (v355)
      *((_QWORD *)v353 + 28) = *(_QWORD *)v355;
    else
      v355 = sub_1C484358C((uint64_t)v353 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v355, v353, v354, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v356 = v241[5];
    *(_QWORD *)(v355 + 24) = v356;
    v357 = *(_QWORD *)(v356 + 32);
    v358 = *(unsigned int *)(v355 + 40);
    if ((_DWORD)v358)
    {
      v488 = *(_QWORD *)(v355 + 32);
      v489 = *(_QWORD *)(v357 + 40);
      v490 = 32 * v358;
      do
      {
        if (!*(_BYTE *)v488)
        {
          v491 = *(unsigned int *)(v488 + 4);
          if ((int)v491 >= 0)
            v492 = (uint64_t *)(*(_QWORD *)(v489 + 272) + 8 * v491);
          else
            v492 = (uint64_t *)(*(_QWORD *)(v489 + 24) + 16 * (v491 & 0x7FFFFFFF) + 8);
          v493 = *v492;
          if (*v492)
          {
            v494 = *(_QWORD *)(v493 + 16);
            *(_QWORD *)(v493 + 16) = v488;
            *(_QWORD *)(v488 + 16) = v494;
            if ((*(_BYTE *)(v488 + 3) & 1) != 0)
            {
              *(_QWORD *)(v488 + 24) = v493;
            }
            else
            {
              *(_QWORD *)(v488 + 24) = 0;
              v492 = (uint64_t *)(v494 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v488 + 16) = v488;
            *(_QWORD *)(v488 + 24) = 0;
          }
          *v492 = v488;
        }
        v488 += 32;
        v490 -= 32;
      }
      while (v490);
    }
    v359 = *(_QWORD *)(v357 + 728);
    if (v359)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v359 + 24))(v359, v355);
    v360 = *v587 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v355 = v360 | *(_QWORD *)v355 & 7;
    *(_QWORD *)(v355 + 8) = v587;
    *(_QWORD *)(v360 + 8) = v355;
    *v587 = *v587 & 7 | v355;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v603;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v355, v353, (const llvm::MachineOperand *)&v624);
    v361 = *(_QWORD *)(v58 + 8);
    v362 = (llvm::MachineFunction *)v603[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v363 = v361 + 555600;
    v364 = *((_QWORD *)v362 + 28);
    if (v364)
      *((_QWORD *)v362 + 28) = *(_QWORD *)v364;
    else
      v364 = sub_1C484358C((uint64_t)v362 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v364, v362, v363, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v365 = v603[5];
    *(_QWORD *)(v364 + 24) = v365;
    v366 = *(_QWORD *)(v365 + 32);
    v367 = *(unsigned int *)(v364 + 40);
    if ((_DWORD)v367)
    {
      v495 = *(_QWORD *)(v364 + 32);
      v496 = *(_QWORD *)(v366 + 40);
      v497 = 32 * v367;
      do
      {
        if (!*(_BYTE *)v495)
        {
          v498 = *(unsigned int *)(v495 + 4);
          if ((int)v498 >= 0)
            v499 = (uint64_t *)(*(_QWORD *)(v496 + 272) + 8 * v498);
          else
            v499 = (uint64_t *)(*(_QWORD *)(v496 + 24) + 16 * (v498 & 0x7FFFFFFF) + 8);
          v500 = *v499;
          if (*v499)
          {
            v501 = *(_QWORD *)(v500 + 16);
            *(_QWORD *)(v500 + 16) = v495;
            *(_QWORD *)(v495 + 16) = v501;
            if ((*(_BYTE *)(v495 + 3) & 1) != 0)
            {
              *(_QWORD *)(v495 + 24) = v500;
            }
            else
            {
              *(_QWORD *)(v495 + 24) = 0;
              v499 = (uint64_t *)(v501 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v495 + 16) = v495;
            *(_QWORD *)(v495 + 24) = 0;
          }
          *v499 = v495;
        }
        v495 += 32;
        v497 -= 32;
      }
      while (v497);
    }
    v368 = *(_QWORD *)(v366 + 728);
    if (v368)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v368 + 24))(v368, v364);
    v369 = *v588 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v364 = v369 | *(_QWORD *)v364 & 7;
    *(_QWORD *)(v364 + 8) = v588;
    *(_QWORD *)(v369 + 8) = v364;
    *v588 = *v588 & 7 | v364;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v604;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v364, v362, (const llvm::MachineOperand *)&v624);
    v370 = *(_QWORD *)(v58 + 8);
    v371 = (llvm::MachineFunction *)v604[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v372 = v370 + 555600;
    v373 = *((_QWORD *)v371 + 28);
    if (v373)
      *((_QWORD *)v371 + 28) = *(_QWORD *)v373;
    else
      v373 = sub_1C484358C((uint64_t)v371 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v373, v371, v372, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v374 = v604[5];
    *(_QWORD *)(v373 + 24) = v374;
    v375 = *(_QWORD *)(v374 + 32);
    v376 = *(unsigned int *)(v373 + 40);
    if ((_DWORD)v376)
    {
      v502 = *(_QWORD *)(v373 + 32);
      v503 = *(_QWORD *)(v375 + 40);
      v504 = 32 * v376;
      do
      {
        if (!*(_BYTE *)v502)
        {
          v505 = *(unsigned int *)(v502 + 4);
          if ((int)v505 >= 0)
            v506 = (uint64_t *)(*(_QWORD *)(v503 + 272) + 8 * v505);
          else
            v506 = (uint64_t *)(*(_QWORD *)(v503 + 24) + 16 * (v505 & 0x7FFFFFFF) + 8);
          v507 = *v506;
          if (*v506)
          {
            v508 = *(_QWORD *)(v507 + 16);
            *(_QWORD *)(v507 + 16) = v502;
            *(_QWORD *)(v502 + 16) = v508;
            if ((*(_BYTE *)(v502 + 3) & 1) != 0)
            {
              *(_QWORD *)(v502 + 24) = v507;
            }
            else
            {
              *(_QWORD *)(v502 + 24) = 0;
              v506 = (uint64_t *)(v508 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v502 + 16) = v502;
            *(_QWORD *)(v502 + 24) = 0;
          }
          *v506 = v502;
        }
        v502 += 32;
        v504 -= 32;
      }
      while (v504);
    }
    v377 = *(_QWORD *)(v375 + 728);
    if (v377)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v377 + 24))(v377, v373);
    v378 = *v589 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v373 = v378 | *(_QWORD *)v373 & 7;
    *(_QWORD *)(v373 + 8) = v589;
    *(_QWORD *)(v378 + 8) = v373;
    *v589 = *v589 & 7 | v373;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v608;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v373, v371, (const llvm::MachineOperand *)&v624);
    v379 = *(_QWORD *)(v58 + 8);
    v380 = (llvm::MachineFunction *)v608[4];
    *(_QWORD *)&v620 = v622;
    if (v622)
      llvm::MetadataTracking::track((uint64_t)&v620, v622, 2);
    v381 = v379 + 555600;
    v382 = *((_QWORD *)v380 + 28);
    if (v382)
      *((_QWORD *)v380 + 28) = *(_QWORD *)v382;
    else
      v382 = sub_1C484358C((uint64_t)v380 + 128, 72, 3);
    *(_QWORD *)&v624 = v620;
    if ((_QWORD)v620)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v620, (unsigned __int8 *)v620, (uint64_t)&v624);
      *(_QWORD *)&v620 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v382, v380, v381, (unsigned __int8 **)&v624, 0);
    if ((_QWORD)v624)
      llvm::MetadataTracking::untrack((uint64_t)&v624, (unsigned __int8 *)v624);
    if ((_QWORD)v620)
      llvm::MetadataTracking::untrack((uint64_t)&v620, (unsigned __int8 *)v620);
    v383 = v608[5];
    *(_QWORD *)(v382 + 24) = v383;
    v384 = *(_QWORD *)(v383 + 32);
    v385 = *(unsigned int *)(v382 + 40);
    if ((_DWORD)v385)
    {
      v509 = *(_QWORD *)(v382 + 32);
      v510 = *(_QWORD *)(v384 + 40);
      v511 = 32 * v385;
      do
      {
        if (!*(_BYTE *)v509)
        {
          v512 = *(unsigned int *)(v509 + 4);
          if ((int)v512 >= 0)
            v513 = (uint64_t *)(*(_QWORD *)(v510 + 272) + 8 * v512);
          else
            v513 = (uint64_t *)(*(_QWORD *)(v510 + 24) + 16 * (v512 & 0x7FFFFFFF) + 8);
          v514 = *v513;
          if (*v513)
          {
            v515 = *(_QWORD *)(v514 + 16);
            *(_QWORD *)(v514 + 16) = v509;
            *(_QWORD *)(v509 + 16) = v515;
            if ((*(_BYTE *)(v509 + 3) & 1) != 0)
            {
              *(_QWORD *)(v509 + 24) = v514;
            }
            else
            {
              *(_QWORD *)(v509 + 24) = 0;
              v513 = (uint64_t *)(v515 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v509 + 16) = v509;
            *(_QWORD *)(v509 + 24) = 0;
          }
          *v513 = v509;
        }
        v509 += 32;
        v511 -= 32;
      }
      while (v511);
    }
    v386 = *(_QWORD *)(v384 + 728);
    if (v386)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v386 + 24))(v386, v382);
    v387 = *v590 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v382 = v387 | *(_QWORD *)v382 & 7;
    *(_QWORD *)(v382 + 8) = v590;
    *(_QWORD *)(v387 + 8) = v382;
    *v590 = *v590 & 7 | v382;
    *((_QWORD *)&v624 + 1) = 0;
    *(_QWORD *)&v625 = v600;
    LODWORD(v624) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v382, v380, (const llvm::MachineOperand *)&v624);
  }
  v388 = v84;
  if ((*(_BYTE *)v84 & 4) == 0)
  {
    v388 = v84;
    if ((*(_WORD *)(v84 + 44) & 8) != 0)
    {
      v388 = v84;
      do
        v388 = *(_QWORD *)(v388 + 8);
      while ((*(_WORD *)(v388 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(v84 + 24) + 40, v84, *(_QWORD *)(v388 + 8));
  if (v622)
    llvm::MetadataTracking::untrack((uint64_t)&v622, v622);
  return v127;
}

uint64_t *sub_1C4824250@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;

  v3 = *result;
  if ((unint64_t)*result <= 7)
  {
    v9 = *((_DWORD *)result + 4);
    v10 = result[1] + a2;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v10;
    *(_DWORD *)(a3 + 16) = v9;
    *(_BYTE *)(a3 + 20) = 0;
  }
  else
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    v5 = result[1] + a2;
    v6 = *((_BYTE *)result + 20);
    if ((v3 & 4) != 0)
    {
      *(_QWORD *)a3 = v4 | 4;
      *(_QWORD *)(a3 + 8) = v5;
      *(_BYTE *)(a3 + 20) = v6;
      if (v4)
        LODWORD(v4) = *(_DWORD *)(v4 + 12);
    }
    else
    {
      *(_QWORD *)a3 = v4;
      *(_QWORD *)(a3 + 8) = v5;
      *(_BYTE *)(a3 + 20) = v6;
      if (v4)
      {
        v7 = *(_QWORD *)v4;
        v8 = *(_DWORD *)(*(_QWORD *)v4 + 8);
        if ((v8 & 0xFE) == 0x12)
          v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
        LODWORD(v4) = v8 >> 8;
      }
    }
    *(_DWORD *)(a3 + 16) = v4;
  }
  return result;
}

void sub_1C48242E0(int a1, uint64_t a2, _BOOL4 a3, llvm::APInt *this, uint64_t a5, uint64_t a6, int a7)
{
  int v12;
  _QWORD *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  char EVT;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int ExtendedSizeInBits;
  const char *v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  size_t v42;
  uint64_t v43;
  int v44;
  void *__src[2];
  void *v46;
  unsigned int v47;
  __int128 v48;

  v12 = *(unsigned __int16 *)(a2 + 24);
  LODWORD(__src[1]) = *((_DWORD *)this + 2);
  if (LODWORD(__src[1]) > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
  else
    __src[0] = 0;
  v13 = (_QWORD *)((char *)this + 16);
  if (*((_DWORD *)this + 6) >= 0x41u && *v13)
    MEMORY[0x1CAA32F9C](*v13, 0x1000C8000313F17);
  v14 = __src[0];
  *((void **)this + 2) = __src[0];
  v15 = __src[1];
  *((_DWORD *)this + 6) = __src[1];
  if (*((_DWORD *)this + 2) > 0x40u || v15 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)this, v15);
    v16 = *((unsigned int *)this + 2);
    if (v16 <= 0x40)
      *(_QWORD *)this = *((_QWORD *)this + 2);
    else
      memcpy(*(void **)this, *((const void **)this + 2), ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)this = v14;
    *((_DWORD *)this + 2) = v15;
  }
  if (v12 == 437)
  {
    v17 = *(uint64_t **)(a2 + 32);
    v18 = v17[5];
    v19 = *(unsigned __int16 *)(v18 + 24);
    if (v19 == 35 || v19 == 11)
    {
      v21 = *v17;
      v22 = v17[1];
      v23 = (_QWORD *)(*(_QWORD *)(*v17 + 40) + 16 * v22);
      v24 = v23[1];
      *(_QWORD *)&v48 = *v23;
      *((_QWORD *)&v48 + 1) = v24;
      v25 = v48;
      if ((_BYTE)v48)
      {
        if (v48 - 15 >= 0x9C)
        {
LABEL_26:
          if (v25)
          {
            if ((v25 - 15) < 0x9C)
              return;
LABEL_32:
            *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3);
            if (LOBYTE(__src[0]))
              ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)__src);
            else
              ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
            v32 = ExtendedSizeInBits;
            if ((_DWORD)v31 == 1)
            v33 = *(_QWORD *)(v18 + 80);
            v34 = (_QWORD *)(v33 + 24);
            if (*(_DWORD *)(v33 + 32) >= 0x41u)
              v34 = (_QWORD *)*v34;
            v35 = *(_DWORD *)v34;
            sub_1C6368768(a6, v21, v22, (a7 + 1), (uint64_t)__src);
            v36 = v35 * v32;
            v37 = LODWORD(__src[1]);
            if (LODWORD(__src[1]) > 0x40)
            {
              v41 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
              v38 = operator new[]();
              memcpy((void *)v38, __src[0], v41);
              llvm::APInt::tcShiftRight((llvm::APInt *)v38, (unint64_t *)((unint64_t)(v37 + 63) >> 6), v36);
            }
            else if (LODWORD(__src[1]) == v36)
            {
              v38 = 0;
            }
            else
            {
              v38 = (unint64_t)__src[0] >> v36;
            }
            if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
              MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
            *(_QWORD *)this = v38;
            *((_DWORD *)this + 2) = v37;
            v39 = v47;
            if (v47 > 0x40)
            {
              v42 = (((unint64_t)v47 + 63) >> 3) & 0x3FFFFFF8;
              v40 = operator new[]();
              memcpy((void *)v40, v46, v42);
              llvm::APInt::tcShiftRight((llvm::APInt *)v40, (unint64_t *)((unint64_t)(v39 + 63) >> 6), v36);
            }
            else if (v47 == v36)
            {
              v40 = 0;
            }
            else
            {
              v40 = (unint64_t)v46 >> v36;
            }
            if (*((_DWORD *)this + 6) >= 0x41u && *v13)
              MEMORY[0x1CAA32F9C](*v13, 0x1000C8000313F17);
            *((_QWORD *)this + 2) = v40;
            *((_DWORD *)this + 6) = v39;
            llvm::APInt::trunc(this, v32, (llvm::APInt *)&v43);
            if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
              MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
            *(_QWORD *)this = v43;
            *((_DWORD *)this + 2) = v44;
            llvm::APInt::trunc((llvm::APInt *)((char *)this + 16), v32, (llvm::APInt *)&v43);
            if (*((_DWORD *)this + 6) >= 0x41u && *v13)
              MEMORY[0x1CAA32F9C](*v13, 0x1000C8000313F17);
            *((_QWORD *)this + 2) = v43;
            *((_DWORD *)this + 6) = v44;
            if (v47 >= 0x41 && v46)
              MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
            if (LODWORD(__src[1]) >= 0x41)
            {
              if (__src[0])
                MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
            }
            return;
          }
          v27 = *(_DWORD *)(*((_QWORD *)&v48 + 1) + 8) & 0xFE;
LABEL_30:
          if (v27 == 18)
            return;
          goto LABEL_32;
        }
        EVT = sub_1C47F37A0((unsigned __int8 *)&v48);
      }
      else
      {
        v27 = *(_DWORD *)(v24 + 8) & 0xFE;
        if (v27 != 18)
          goto LABEL_30;
        EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v24 + 24), 0, a3);
      }
      if (EVT != 3 && *(_WORD *)(v21 + 24) == 216)
      {
        v28 = *(_QWORD *)(v21 + 32);
        v21 = *(_QWORD *)v28;
        v29 = *(unsigned int *)(v28 + 8);
        v22 = v22 & 0xFFFFFFFF00000000 | v29;
        v48 = *(_OWORD *)(*(_QWORD *)(v21 + 40) + 16 * v29);
      }
      v25 = v48;
      goto LABEL_26;
    }
  }
}

BOOL sub_1C4824764(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;

  v3 = *a3;
  if (!*a3)
    goto LABEL_20;
  v4 = *(_DWORD *)(*(_QWORD *)v3 + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v3 + 16) + 8);
  v5 = 1;
  if ((v4 & 0xFFFFBF00) != 0 && (v4 & 0xFFFFFF00) != 0x300)
  {
LABEL_20:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 281))
    {
      if (v3)
        v6 = *((_BYTE *)a3 + 16) == 0;
      else
        v6 = 1;
      return v6 || a3[3] == 0;
    }
    else
    {
      return a3[3] == 0;
    }
  }
  return v5;
}

uint64_t sub_1C48247E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;

  v2 = a2;
  v22 = &v23;
  v23 = 0;
  if (sub_1C4E7B6EC(&v22, a2) && v23)
    return 0;
  v4 = *(unsigned __int8 *)(v2 + 16);
  if (v4 == 62)
  {
    v6 = **(_QWORD **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    v7 = *(_DWORD *)(v6 + 8);
    if ((v7 & 0xFE) == 0x12)
      v7 = *(_DWORD *)(**(_QWORD **)(v6 + 16) + 8);
    if ((v7 & 0xFFFFFF00) != 0x4000)
    {
      v4 = 62;
      goto LABEL_17;
    }
    v8 = sub_1C5E9DE14(v2, 0);
    result = 0;
    if (!v8)
    {
      v4 = *(unsigned __int8 *)(v2 + 16);
      goto LABEL_17;
    }
    return result;
  }
  if (v4 != 84)
    goto LABEL_17;
  v5 = *(_QWORD *)(v2 - 32);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *(_QWORD *)(v2 + 72) || (*(_BYTE *)(v5 + 33) & 0x20) == 0)
  {
    v4 = 84;
    goto LABEL_17;
  }
  result = 0;
  v21 = *(_DWORD *)(v5 + 36);
  v4 = 84;
  if (v21 <= 2002)
  {
    if (v21 != 139 && v21 != 1884)
      goto LABEL_17;
    return result;
  }
  if (v21 == 2003 || v21 == 2007)
    return result;
  while (1)
  {
LABEL_17:
    v9 = v4 - 54;
    if (v9 > 0x23)
      return 1;
    if (((1 << v9) & 0x800987000) == 0)
      break;
LABEL_19:
    v10 = *(_DWORD *)(v2 + 20);
    if ((v10 & 0x40000000) != 0)
      v11 = *(uint64_t **)(v2 - 8);
    else
      v11 = (uint64_t *)(v2 - 32 * (v10 & 0x7FFFFFF));
    v2 = *v11;
    v4 = *(unsigned __int8 *)(*v11 + 16);
    if (v2)
      v12 = v4 >= 0x1C;
    else
      v12 = 0;
    if (!v12)
      return 1;
  }
  if (!v9)
  {
    v13 = *(_DWORD *)(v2 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(_QWORD *)(v2 - 8);
    else
      v14 = v2 - 32 * (v13 & 0x7FFFFFF);
    v15 = *(_QWORD *)(v14 + 32);
    if (v15)
      v16 = *(_BYTE *)(v15 + 16) == 16;
    else
      v16 = 0;
    if (!v16)
      return 1;
    v17 = (_QWORD *)(v15 + 24);
    if (*(_DWORD *)(v15 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    if (*v17 != 16)
      return 1;
    goto LABEL_19;
  }
  if (v9 != 6)
    return 1;
  v18 = *(_QWORD *)(v2 - 32);
  v19 = *(_DWORD *)(*(_QWORD *)v18 + 8);
  if ((v19 & 0xFE) == 0x12)
    v19 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v18 + 16) + 8);
  if ((v19 & 0xFFFFFF00) != 0x4000)
    return 1;
  v20 = sub_1C5E9DE14(v18, 0);
  result = 0;
  if (!v20)
    return 1;
  return result;
}

BOOL sub_1C4824A0C(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  return (a2 & 0xFE) == 4 && a4 - 5 < 2;
}

uint64_t sub_1C4824A28()
{
  return 0;
}

uint64_t sub_1C4824A30(int a1, llvm::DataLayout *this, unsigned int a3)
{
  int v3;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  int v8;

  v3 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(this, a3) + 4);
  if (v3 == 64)
    return 6;
  if (v3 <= 31)
  {
    v5 = 2;
    if (v3 == 16)
      v8 = 4;
    else
      v8 = 0;
    if (v3 == 8)
      v6 = 3;
    else
      v6 = v8;
    v7 = v3 == 1;
  }
  else
  {
    v5 = 5;
    if (v3 == 128)
      v6 = 7;
    else
      v6 = 0;
    v7 = v3 == 32;
  }
  if (v7)
    return v5;
  else
    return v6;
}

uint64_t sub_1C4824AA4()
{
  return 0;
}

uint64_t sub_1C4824AAC()
{
  return 1;
}

uint64_t sub_1C4824AB4(uint64_t a1, unsigned __int8 a2)
{
  int v2;
  int v4;
  unsigned __int8 v6;

  v6 = a2;
  v2 = sub_1C47F381C(&v6);
  if ((v6 + 85) <= 0xCCu && v2 == 1)
    return 5;
  v4 = sub_1C47F381C(&v6);
  if ((v4 & (v4 - 1)) != 0)
    return 7;
  else
    return 1;
}

uint64_t sub_1C4824B10()
{
  return 0;
}

uint64_t sub_1C4824B18(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  char v13;

  result = 1;
  if (a2 && (_BYTE)a4)
  {
    if (*(_BYTE *)(a1 + 390 * a2 + 4115) == 1 && sub_1C6132CB4(a1, 0xFDu, a2) == a4)
    {
      return 0;
    }
    else
    {
      v13 = 0;
      LODWORD(result) = llvm::TargetLoweringBase::allowsMemoryAccess(a1, *(_QWORD *)(a6 + 56), *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, a4, a5, a7, (uint64_t)&v13);
      if (v13)
        return result;
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_1C4824BE8()
{
  return 0;
}

uint64_t sub_1C4824BF0()
{
  return 0;
}

uint64_t sub_1C4824BF8()
{
  return 1;
}

uint64_t sub_1C4824C00()
{
  return 0;
}

uint64_t sub_1C4824C08()
{
  return 0;
}

uint64_t sub_1C4824C10()
{
  return 0;
}

BOOL sub_1C4824C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9)
{
  uint64_t v12;
  llvm::APInt *v13;
  unsigned int v14;
  uint64_t v16;
  llvm::APInt *v17;
  unsigned int v18;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 320))(a1, a2, a3, a6, a7))
  {
    if (a8 == 175)
    {
      v12 = *(_QWORD *)(a5 + 80);
      v13 = (llvm::APInt *)(v12 + 24);
      v14 = *(_DWORD *)(v12 + 32);
      if (v14 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v13) == v14 - 1)
          return 0;
      }
      else if (*(_QWORD *)v13 == 1)
      {
        return 0;
      }
    }
    if (a4 && a9 == 175)
    {
      v16 = *(_QWORD *)(a4 + 80);
      v17 = (llvm::APInt *)(v16 + 24);
      v18 = *(_DWORD *)(v16 + 32);
      if (v18 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v17) == v18 - 1)
          return 1;
      }
      else if (*(_QWORD *)v17 == 1)
      {
        return 1;
      }
    }
  }
  return a4 == 0;
}

uint64_t sub_1C4824CEC()
{
  return 0;
}

uint64_t sub_1C4824CF4(uint64_t a1, unsigned __int8 a2)
{
  return *(_QWORD *)(a1 + 8 * a2 + 96);
}

BOOL sub_1C4824D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a2 + 112);
  if (!v2)
    return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(_BYTE *)(a1 + 4509) & 0xFB) == 0;
  if (!*(_DWORD *)(v2 + 8))
    return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(_BYTE *)(a1 + 4509) & 0xFB) == 0;
  v3 = *(_QWORD *)(v2 + 40);
  if (!v3)
    return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(_BYTE *)(a1 + 4509) & 0xFB) == 0;
  v4 = *(_DWORD *)(v3 + 40);
  if (!v4)
    return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(_BYTE *)(a1 + 4509) & 0xFB) == 0;
  v5 = *(_QWORD *)(v3 + 24);
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v7 = &unk_1ED7EA000;
  if ((v6 & 1) == 0)
  {
    v23 = a1;
    v22 = v5;
    v21 = v4;
    v18 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v7 = &unk_1ED7EA000;
    v4 = v21;
    v5 = v22;
    v19 = v18;
    a1 = v23;
    if (v19)
    {
      v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v20 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v20;
      __cxa_guard_release(&qword_1ED7EAC88);
      v7 = (_QWORD *)&unk_1ED7EA000;
      v4 = v21;
      v5 = v22;
      a1 = v23;
    }
  }
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7[400] ^ 0x9889A0E0DBA4EABELL)) ^ ((0x9DDFEA08EB382D69
                                                                    * (v7[400] ^ 0x9889A0E0DBA4EABELL)) >> 47) ^ 0xB5F9CD95B18985D0);
  v9 = (-348639895 * ((v8 >> 47) ^ v8)) ^ 0x61742D70;
  v10 = v4 - 1;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v10;
    v13 = v5 + 24 * v12;
    v14 = *(_QWORD **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      if ("no-jump-tables" == (char *)-1)
        goto LABEL_19;
      goto LABEL_9;
    }
    if (v14 != (_QWORD *)-2)
      break;
    if ("no-jump-tables" == (char *)-2)
      goto LABEL_19;
LABEL_9:
    if (v14 == (_QWORD *)-1)
      return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(_BYTE *)(a1 + 4509) & 0xFB) == 0;
    v9 = i + v12;
  }
  if (*(_QWORD *)(v13 + 8) != 14)
    goto LABEL_9;
  if (*v14 != 0x2D706D756A2D6F6ELL || *(_QWORD *)((char *)v14 + 6) != 0x73656C6261742D70)
    goto LABEL_9;
LABEL_19:
  v17 = *(_QWORD *)(v13 + 16);
  if (v17 && *(_DWORD *)(v17 + 16) == 4 && *(_DWORD *)(v17 + *(unsigned int *)(v17 + 12) + 25) == *(_DWORD *)"true")
    return 0;
  return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(_BYTE *)(a1 + 4509) & 0xFB) == 0;
}

BOOL sub_1C4824F38(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  if (a6)
  {
    if (a2 && *(_QWORD *)(a1 + 8 * a2 + 96) && a4)
      return *(_BYTE *)(a1 + 179 * a2 + a4 + 137754) == 0;
    return 0;
  }
  if (!a2 || !*(_QWORD *)(a1 + 8 * a2 + 96) || !a4)
    return 0;
  return (*(_BYTE *)(a1 + 179 * a2 + a4 + 137754) & 0xFB) == 0;
}

uint64_t sub_1C4824FC0(unint64_t a1, llvm::EVT *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  unsigned int ExtendedSizeInBits;
  const char *v7;
  unsigned int v8;
  unsigned int v13;
  unsigned __int8 v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v16[0] = a3;
  v16[1] = a4;
  if ((_BYTE)a3)
    return *(unsigned __int16 *)(a1 + 2 * a3 + 1528);
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
  {
    LOBYTE(v15[0]) = 0;
    v15[1] = 0;
    v14 = 0;
    v13 = 0;
    return llvm::TargetLoweringBase::getVectorTypeBreakdown(a1, a2, a3, a4, v15, &v13, &v14);
  }
  else
  {
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
    if ((_DWORD)v5 == 1)
    LOBYTE(v15[0]) = sub_1C47A8BD8(a1, a2, a3, a4);
    v8 = sub_1C47A8C74((unsigned __int8 *)v15);
    if ((_DWORD)v7 == 1)
    return (ExtendedSizeInBits + v8 - 1) / v8;
  }
}

uint64_t sub_1C48250A0(unint64_t a1, llvm::EVT *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1C47A8BD8(a1, a2, a4, a5);
}

uint64_t sub_1C48250AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 584))(a1, a2, a4, a5, 0);
}

BOOL sub_1C48250C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, _BYTE *a7)
{
  if ((a5 & 0xFE) != 0 && a7)
    *a7 = 1;
  return (a5 & 0xFE) != 0;
}

uint64_t sub_1C48250E4()
{
  return 0;
}

uint64_t sub_1C48250EC()
{
  return 0;
}

uint64_t sub_1C48250F4()
{
  return 0;
}

uint64_t sub_1C48250FC()
{
  return 0;
}

uint64_t sub_1C4825104()
{
  return 0;
}

uint64_t sub_1C482510C()
{
  return 0;
}

uint64_t sub_1C4825114()
{
  return 0;
}

BOOL sub_1C482511C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  v3 = **(_QWORD **)(a3 + 40);
  return (_BYTE)v3
      && (v3 == 1 || !(v4 = *(_QWORD *)(a1 + 8 * v3 + 96) == 0))
      && *(_BYTE *)(a1 + 390 * v3 + 4004) == 0;
}

uint64_t sub_1C482516C(uint64_t a1, int a2, unsigned __int8 a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;

  if (a2 != 77)
    return 0;
  if (a3)
  {
    if ((a3 + 85) < 0x64u)
      return a5;
    else
      return 0;
  }
  v5 = 0;
  if ((*(_DWORD *)(a4 + 8) & 0xFE) != 0x12 && (a5 & 1) != 0)
  {
    v5 = a3;
    if (a3)
    {
      if (*(_QWORD *)(a1 + 8 * a3 + 96))
        return *(unsigned __int8 *)(a1 + 390 * a3 + 3939) != 2;
      return 0;
    }
  }
  return v5;
}

BOOL sub_1C48251E0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (!a5 || a5 != 1 && !*(_QWORD *)(a1 + 8 * a5 + 96))
    return 0;
  if (a2 > 0x185)
    return 1;
  return (*(_BYTE *)(a1 + 390 * a5 + a2 + 3862) & 0xFB) == 0;
}

uint64_t sub_1C4825238()
{
  return 0;
}

uint64_t sub_1C4825240()
{
  return 0;
}

uint64_t sub_1C4825248()
{
  return 0;
}

uint64_t sub_1C4825250()
{
  return 0;
}

uint64_t sub_1C4825258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned __int8 *v16[2];

  v16[0] = 0;
  v16[1] = 0;
  v5 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)v16, (llvm *)5, 0, 1, 0);
  v7 = v6;
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a2 + 8);
  }
  v9 = (_QWORD *)(*(_QWORD *)a2 + 16 * v8);
  *v9 = v5;
  v9[1] = v7;
  ++*(_DWORD *)(a2 + 8);
  if (v16[0])
    llvm::MetadataTracking::untrack((uint64_t)v16, v16[0]);
  result = sub_1C5D428B0(a3, 0, (llvm *)5, 0);
  v11 = result;
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (uint64_t *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1C4825360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned __int8 *v50;
  int v51;

  v13 = *(_QWORD *)(*(_QWORD *)(a8 + 40) + 344);
  v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 400))(v13, *(_QWORD *)(a2 + 80));
  v16 = v15;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 336))(v13);
  v18 = *(_DWORD *)(a2 + 88) + (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v16) * v14;
  v19 = *(_QWORD *)(*(_QWORD *)(a8 + 40) + 344);
  v20 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 400))(v19, *(_QWORD *)(a4 + 80));
  v22 = v21;
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 336))(v19);
  v24 = *(_DWORD *)(a4 + 88) + (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, v22) * v20;
  v25 = *(unsigned __int8 **)(a2 + 64);
  v50 = v25;
  if (v25)
    llvm::MetadataTracking::track((uint64_t)&v50, v25, 2);
  v26 = v24 >> 1;
  v51 = *(_DWORD *)(a2 + 60);
  v27 = sub_1C6366AB4(a8, v18 >> 1, (const llvm::APInt *)&v50, (llvm *)4, 0, 1, 0);
  v29 = v28;
  if (v50)
    llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
  v30 = *(unsigned __int8 **)(a4 + 64);
  v50 = v30;
  if (v30)
    llvm::MetadataTracking::track((uint64_t)&v50, v30, 2);
  v51 = *(_DWORD *)(a4 + 60);
  v31 = sub_1C6366AB4(a8, v26, (const llvm::APInt *)&v50, (llvm *)4, 0, 1, 0);
  v33 = v32;
  if (v50)
    llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
  v34 = *(_QWORD *)(a6 + 80);
  v35 = (uint64_t *)(v34 + 24);
  if (*(_DWORD *)(v34 + 32) >= 0x41u)
    v35 = (uint64_t *)*v35;
  v36 = *v35;
  v37 = *(unsigned __int8 **)(a6 + 64);
  v50 = v37;
  if (v37)
    llvm::MetadataTracking::track((uint64_t)&v50, v37, 2);
  v51 = *(_DWORD *)(a6 + 60);
  result = (uint64_t)sub_1C6366AB4(a8, v36, (const llvm::APInt *)&v50, (llvm *)5, 0, 1, 0);
  v39 = result;
  v41 = v40;
  if (v50)
    result = llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
  v42 = *(unsigned int *)(a1 + 8);
  if (v42 >= *(_DWORD *)(a1 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v42 + 1, 16);
    LODWORD(v42) = *(_DWORD *)(a1 + 8);
  }
  v43 = (_QWORD *)(*(_QWORD *)a1 + 16 * v42);
  *v43 = v27;
  v43[1] = v29;
  v44 = *(_DWORD *)(a1 + 12);
  v45 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v45;
  if (v45 >= v44)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v45 + 1, 16);
    LODWORD(v45) = *(_DWORD *)(a1 + 8);
  }
  v46 = (_QWORD *)(*(_QWORD *)a1 + 16 * v45);
  *v46 = v31;
  v46[1] = v33;
  v47 = *(_DWORD *)(a1 + 12);
  v48 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v48;
  if (v48 >= v47)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v48 + 1, 16);
    LODWORD(v48) = *(_DWORD *)(a1 + 8);
  }
  v49 = (uint64_t *)(*(_QWORD *)a1 + 16 * v48);
  *v49 = v39;
  v49[1] = v41;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t *sub_1C4825630(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v14;
  int v15;
  int *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t *v48;
  uint64_t *v49;
  unsigned __int8 *v51;
  int v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  int v56;

  v14 = *(unsigned __int8 **)(a2 + 64);
  v55 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v55, v14, 2);
    v16 = (int *)(a2 + 60);
    v15 = *(_DWORD *)(a2 + 60);
    v19 = *(unsigned __int8 **)(a2 + 64);
    v56 = v15;
    v20 = *(_QWORD *)(a1 + 16);
    v17 = (uint64_t *)(a1 + 16);
    v18 = v20;
    v53 = v19;
    if (v19)
    {
      llvm::MetadataTracking::track((uint64_t)&v53, v19, 2);
      v15 = *v16;
    }
  }
  else
  {
    v16 = (int *)(a2 + 60);
    v15 = *(_DWORD *)(a2 + 60);
    v56 = v15;
    v17 = (uint64_t *)(a1 + 16);
    v18 = *(_QWORD *)(a1 + 16);
    v53 = 0;
  }
  v54 = v15;
  v21 = sub_1C48258FC(v18, a6, (const llvm::APInt *)&v53, (llvm *)5, 0, a3, a4, a8, 5, 0);
  v23 = v22;
  if (v53)
    llvm::MetadataTracking::untrack((uint64_t)&v53, v53);
  v24 = *(unsigned __int16 *)(a3 + 24);
  if (v24 == 35 || v24 == 11)
  {
    v25 = *(_QWORD *)(a3 + 80);
    v26 = (_QWORD *)(v25 + 24);
    if (*(_DWORD *)(v25 + 32) >= 0x41u)
      v26 = (_QWORD *)*v26;
    v27 = sub_1C6366AB4(*v17, *v26 + 4, (const llvm::APInt *)&v55, (llvm *)4, 0, 0, 0);
  }
  else
  {
    v30 = sub_1C6366AB4(*v17, 4, (const llvm::APInt *)&v55, (llvm *)4, 0, 0, 0);
    v33 = *(_QWORD *)(*v17 + 832);
    if (v33)
      LOWORD(v33) = *(_WORD *)(v33 + 8);
    v27 = sub_1C5D56C70(*v17, 56, (const llvm::APInt *)&v55, (llvm *)4, 0, a3, a4, v32, (uint64_t)v30, v31, v33);
  }
  v34 = (uint64_t)v27;
  v35 = v28;
  v36 = *v17;
  v37 = *(unsigned __int8 **)(a2 + 64);
  v51 = v37;
  if (v37)
    llvm::MetadataTracking::track((uint64_t)&v51, v37, 2);
  v52 = *v16;
  v39 = sub_1C48258FC(v36, 395, (const llvm::APInt *)&v51, (llvm *)5, 0, v34, v35, v29, 5, 0);
  v41 = v40;
  if (v51)
    llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
  v42 = *v17;
  v43 = *(_QWORD *)(*v17 + 832);
  if ((a5 & 1) != 0)
  {
    if (v43)
      LOWORD(v43) = *(_WORD *)(v43 + 8);
    v45 = sub_1C5D56C70(v42, 146, (const llvm::APInt *)&v55, (llvm *)0x31, 0, (uint64_t)v21, v23, v38, (uint64_t)v39, v41, v43);
    v46 = *(_QWORD *)(*v17 + 832);
    if (v46)
      v47 = *(_WORD *)(v46 + 8);
    else
      v47 = 0;
    v48 = sub_1C5D52060(*v17, 216, (const llvm::APInt *)&v55, (llvm *)6, 0, (uint64_t)v45, v44, v47);
  }
  else
  {
    if (v43)
      LOWORD(v43) = *(_WORD *)(v43 + 8);
    v48 = sub_1C5D56C70(v42, 54, (const llvm::APInt *)&v55, (llvm *)6, 0, (uint64_t)v21, v23, v38, (uint64_t)v39, v41, v43);
  }
  v49 = v48;
  if (v55)
    llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
  return v49;
}

uint64_t *sub_1C48258FC(uint64_t a1, uint64_t a2, const llvm::APInt *a3, llvm *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t ExtendedSizeInBits;
  const char *v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v25;
  _QWORD v26[2];

  v26[0] = a9;
  v26[1] = a10;
  v17 = *(_QWORD *)(a6 + 80);
  v18 = (unint64_t *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u)
    v18 = (unint64_t *)*v18;
  v19 = *v18;
  if ((_BYTE)a9)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v26);
  else
    ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v26);
  if ((_DWORD)v21 == 1)
  {
    v25 = ExtendedSizeInBits;
    ExtendedSizeInBits = v25;
  }
  if (v19 % (ExtendedSizeInBits >> 3))
    llvm::report_fatal_error((llvm *)"Unaligned shared/coeff register accesses are not supported", (const char *)1);
  v22 = *(_QWORD *)(a1 + 832);
  if (v22)
    v23 = *(_WORD *)(v22 + 8);
  else
    v23 = 0;
  return sub_1C5D52060(a1, a2, a3, a4, a5, a6, a7, v23);
}

uint64_t *sub_1C4825A04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, const llvm::APInt *a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 832);
  if (v8)
    LOWORD(v8) = *(_WORD *)(v8 + 8);
  return sub_1C5D56C70(a1, 56, a8, (llvm *)4, 0, a2, a3, (uint64_t)a8, a4, a5, v8);
}

_QWORD *sub_1C4825A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, const llvm::APInt *a8)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = *(_QWORD *)(a2 + 80);
  v9 = (_QWORD *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = (_QWORD *)*v9;
  return sub_1C6366AB4(a1, *v9 + a6, a8, (llvm *)4, 0, 0, 0);
}

uint64_t sub_1C4825A84(uint64_t result, int a2, const llvm::APInt *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const llvm::APInt *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  llvm *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t **v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v40;

  if (*(int *)(a6 + 8) >= 1)
  {
    v9 = a3;
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v40 = a4;
    v36 = a7 + 16;
    v37 = a6;
    do
    {
      v16 = *(_QWORD *)a6 + v12;
      v17 = (llvm *)*(unsigned __int8 *)(v16 + 10);
      v18 = *(_DWORD *)(v16 + 4);
      v19 = *a5 + v11;
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      if ((*(_BYTE *)(v16 + 8) & 0xFC) == 0x1C)
      {
        v22 = *(_QWORD *)(a4 + 832);
        if (v22)
          v23 = *(_WORD *)(v22 + 8);
        else
          v23 = 0;
        v24 = sub_1C5D52060(a4, 216, v9, v17, 0, v20, *(_QWORD *)(v19 + 8), v23);
        v9 = a3;
        a4 = v40;
        v20 = (uint64_t)v24;
        LODWORD(v21) = v25;
      }
      v35 = v14;
      v26 = a4;
      v15 = sub_1C6132BA0(a4, v10, a2, v9, v18, v20, v21, a8, (uint64_t)v15, v35);
      a2 = v27;
      result = sub_1C5D428B0(v26, v18, v17, 0);
      v28 = result;
      v30 = v29;
      v31 = *(unsigned int *)(a7 + 8);
      if (v31 >= *(unsigned int *)(a7 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a7, v36, v31 + 1, 16);
        v31 = *(unsigned int *)(a7 + 8);
      }
      v32 = (uint64_t *)(*(_QWORD *)a7 + 16 * v31);
      *v32 = v28;
      v32[1] = v30;
      v33 = (*(_DWORD *)(a7 + 8) + 1);
      *(_DWORD *)(a7 + 8) = v33;
      ++v13;
      v11 += 16;
      a6 = v37;
      v12 += 12;
      v10 = (uint64_t)v15;
      v14 = 1;
      v9 = a3;
      a4 = v40;
    }
    while (v13 < *(int *)(v37 + 8));
    if (v15)
    {
      if (v33 >= *(_DWORD *)(a7 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a7, v36, v33 + 1, 16);
        LODWORD(v33) = *(_DWORD *)(a7 + 8);
      }
      v34 = (uint64_t **)(*(_QWORD *)a7 + 16 * v33);
      *v34 = v15;
      v34[1] = (uint64_t *)1;
      ++*(_DWORD *)(a7 + 8);
    }
  }
  return result;
}

unsigned int *sub_1C4825C80(unsigned int *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v7 = result;
  if (result[3] >= a2)
  {
    v10 = result[2];
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = result[2];
    if (v11)
    {
      v12 = *(_QWORD *)result;
      do
      {
        *(_QWORD *)v12 = a3;
        *(_DWORD *)(v12 + 8) = a4;
        v12 += 16;
        --v11;
      }
      while (v11);
      v10 = result[2];
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = (_QWORD *)(*(_QWORD *)result + 16 * v10);
      do
      {
        *v14 = a3;
        v14[1] = a4;
        v14 += 2;
      }
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    result[2] = 0;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), a2, 16);
    v8 = *(_QWORD **)v7;
    v9 = a2;
    do
    {
      *v8 = a3;
      v8[1] = a4;
      v8 += 2;
      --v9;
    }
    while (v9);
  }
  v7[2] = a2;
  return result;
}

uint64_t sub_1C4825D40(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 > 3)
    return 0;
  LODWORD(v4) = a3;
  while (1)
  {
    v5 = *(unsigned __int16 *)(a1 + 24);
    if (v5 <= 0xBF)
      break;
    if (*(unsigned __int16 *)(a1 + 24) > 0xD6u)
    {
      if (v5 != 215)
        return v5 == 223;
    }
    else
    {
      if (v5 == 192)
      {
        v9 = *(_QWORD **)(a1 + 32);
        v4 = (v4 + 1);
        result = sub_1C4825D40(v9[10], v9[11], v4);
        if (!(_DWORD)result)
          return result;
        v8 = v9 + 15;
        goto LABEL_29;
      }
      if (v5 != 212)
        return 0;
    }
    v8 = *(uint64_t **)(a1 + 32);
    LODWORD(v4) = v4 + 1;
LABEL_29:
    a1 = *v8;
    if (v4 > 3)
      return 0;
  }
  if (*(unsigned __int16 *)(a1 + 24) > 0x5Fu)
  {
    switch(v5)
    {
      case 0x60u:
        v10 = *(_QWORD **)(a1 + 32);
        v4 = (v4 + 1);
        result = sub_1C4825D40(*v10, v10[1], v4);
        if (!(_DWORD)result)
          return result;
        v8 = v10 + 5;
        break;
      case 0x62u:
        v11 = *(_QWORD *)(a1 + 32);
        v8 = (uint64_t *)(v11 + 40);
        if (*(_QWORD *)v11 == *(_QWORD *)(v11 + 40) && *(_DWORD *)(v11 + 8) == *(_DWORD *)(v11 + 48))
          return 1;
        v4 = (v4 + 1);
        if ((sub_1C4825D40(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), v4) & 1) == 0)
          return 0;
        break;
      case 0x8Du:
        v6 = *(_QWORD **)(a1 + 32);
        v7 = v6[5];
        if (*v6 == v7 && *((_DWORD *)v6 + 2) == *((_DWORD *)v6 + 12))
        {
          LODWORD(v4) = v4 + 1;
        }
        else
        {
          v4 = (v4 + 1);
          result = sub_1C4825D40(*v6, v6[1], v4);
          if (!(_DWORD)result)
            return result;
          result = sub_1C4825D40(v7, v6[6], v4);
          if (!(_DWORD)result)
            return result;
        }
        v8 = v6 + 10;
        break;
      default:
        return 0;
    }
    goto LABEL_29;
  }
  if (v5 == 12 || v5 == 36)
  {
    v14 = *(_QWORD *)(a1 + 80);
    if (*(_UNKNOWN **)(v14 + 32) == &unk_1C866F1C0)
      v15 = *(_QWORD *)(v14 + 40);
    else
      v15 = v14 + 24;
    return (*(_BYTE *)(v15 + 28) & 8) == 0;
  }
  else
  {
    if (v5 != 46)
      return 0;
    v12 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 80);
    if (*(_DWORD *)(v12 + 32) > 0x40u)
      v13 = **(_QWORD **)(v12 + 24);
    else
      v13 = *(_QWORD *)(v12 + 24);
    if (v13 == 1830)
      return 1;
    return v13 == 1851;
  }
}

uint64_t sub_1C4825F50(unint64_t *a1)
{
  unint64_t v1;
  BOOL v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *a1;
  v3 = (*a1 & 0xFFFFFFFFFFFFFFF9) == 0 || (*a1 & 6) != 2;
  if ((v1 & 1) != 0 || !v3)
  {
    v8 = (unsigned __int16)(v1 >> 3);
    v9 = (unsigned __int16)(v1 >> 19);
    if ((v1 & 2) == 0)
      v9 = (v1 >> 19);
    if ((v1 & 4) != 0)
      v8 = v9;
    if ((v1 & 1) != 0)
      return (v1 >> 3);
    else
      return v8;
  }
  else
  {
    v4 = (unsigned __int16)(v1 >> 3);
    v5 = (unsigned __int16)(v1 >> 19);
    if ((v1 & 2) == 0)
      v5 = v1 >> 19;
    if ((v1 & 4) != 0)
      v6 = v5;
    else
      v6 = (unsigned __int16)(v1 >> 3);
    return (v6 * v4);
  }
}

uint64_t *sub_1C4825FE4@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = *((unsigned __int8 *)result + 32);
  if (!*((_BYTE *)result + 32) || (v4 = *((unsigned __int8 *)a2 + 32), !*((_BYTE *)a2 + 32)))
  {
    *(_WORD *)(a3 + 32) = 256;
    return result;
  }
  if (v3 == 1)
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v5;
    v6 = a2[4];
LABEL_8:
    *(_QWORD *)(a3 + 32) = v6;
    return result;
  }
  if (v4 == 1)
  {
    v7 = *((_OWORD *)result + 1);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v7;
    v6 = result[4];
    goto LABEL_8;
  }
  v8 = *((unsigned __int8 *)result + 33);
  if ((_DWORD)v8 == 1)
  {
    v9 = result;
    result = (uint64_t *)*result;
    v8 = v9[1];
  }
  else
  {
    LOBYTE(v3) = 2;
  }
  v10 = a2[1];
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v11 = (uint64_t *)*a2;
  }
  else
  {
    LOBYTE(v4) = 2;
    v11 = a2;
  }
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v10;
  *(_BYTE *)(a3 + 32) = v3;
  *(_BYTE *)(a3 + 33) = v4;
  return result;
}

BOOL sub_1C4826078(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t ExtendedSizeInBits;
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  _QWORD v11[2];

  v3 = a2;
  v11[0] = a2;
  v11[1] = a3;
  if (*a1)
    ExtendedSizeInBits = sub_1C47A8C74(a1);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a1);
  v6 = ExtendedSizeInBits;
  v7 = v5;
  if (v3)
    v8 = sub_1C47A8C74((unsigned __int8 *)v11);
  else
    v8 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v11);
  return (v7 != 1 || v9 == 1) && v6 < v8;
}

uint64_t *sub_1C4826100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::LLVMContext *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int16 v19;
  uint64_t *v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 **v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int i;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  int v49;
  uint64_t *v50;
  __int128 v52;
  llvm *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  llvm *v60;
  uint64_t v61;
  unsigned int v62;
  llvm *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[256];
  uint64_t *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v6 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 80);
  v53 = *(llvm **)v6;
  v54 = *(_QWORD *)(v6 + 8);
  if ((*(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v11 = (unint64_t)(sub_1C4825F50((unint64_t *)(v7 + 24)) + 7) >> 3;
    if ((_DWORD)v10 == 1)
  }
  else
  {
    v11 = -1;
  }
  v12 = *(__int128 **)(a2 + 32);
  v14 = *((_QWORD *)v12 + 5);
  v13 = *((_QWORD *)v12 + 6);
  v52 = *v12;
  v15 = *(unsigned __int8 **)(a2 + 64);
  v66 = v15;
  if (v15)
    llvm::MetadataTracking::track((uint64_t)&v66, v15, 2);
  v67 = *(_DWORD *)(a2 + 60);
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(void **)(v14 + 64);
  v68 = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&v68, (unsigned __int8 *)v17, 2);
  LODWORD(v69) = *(_DWORD *)(v14 + 60);
  v18 = *(_QWORD *)(v16 + 832);
  if (v18)
    v19 = *(_WORD *)(v18 + 8);
  else
    v19 = 0;
  v20 = sub_1C5D52060(v16, 201, (const llvm::APInt *)&v68, (llvm *)5, 0, v14, v13, v19);
  v22 = v13 & 0xFFFFFFFF00000000 | v21;
  if (v68)
    llvm::MetadataTracking::untrack((uint64_t)&v68, (unsigned __int8 *)v68);
  v71 = (uint64_t *)&v73;
  v73 = v52;
  v74 = v20;
  v75 = v22;
  v72 = 0x800000002;
  LOBYTE(v55) = 0;
  v56 = 0;
  LOBYTE(v57) = 0;
  v58 = 0;
  v59 = -1;
  LOBYTE(v60) = 0;
  v61 = 0;
  v62 = -1;
  LOBYTE(v63) = 0;
  v64 = 0;
  v65 = -1;
  if (v11 <= 23)
    __asm { BR              X10 }
  if (v11 <= 31)
  {
    if (v11 == 24)
      v23 = 4;
    else
      v23 = 3;
  }
  else if (v11 == 32)
  {
    v23 = 2;
  }
  else
  {
    v23 = v11 == 48;
  }
  sub_1C4826644(v5, (uint64_t)&v55, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), v23, v9, v8, (uint64_t)&unk_1ED7E9C10);
  v24 = sub_1C636A8B4(*(_QWORD *)(a3 + 16), v55, v56, v57, v58);
  v27 = sub_1C5D5C710(*(_QWORD *)(a3 + 16), v59, (uint64_t)&v66, v24, v25, v71, v72, v26, v9, v8, v7);
  v29 = v28;
  v68 = v70;
  v69 = 0x1000000000;
  if (v62)
  {
    for (i = 0; i < v62; ++i)
    {
      v33 = sub_1C636E638(*(_QWORD *)(a3 + 16), i + HIDWORD(v65), (const llvm::APInt *)&v66, v60, v61, (uint64_t)v27, v29);
      v35 = v34;
      v36 = v69;
      if (v69 >= (unint64_t)HIDWORD(v69))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, (uint64_t)v70, v69 + 1, 16);
        v36 = v69;
      }
      v37 = (char *)v68 + 16 * v36;
      *v37 = v33;
      v37[1] = v35;
      v30 = (v69 + 1);
      LODWORD(v69) = v69 + 1;
    }
    v31 = (uint64_t *)v68;
  }
  else
  {
    v30 = 0;
    v31 = (uint64_t *)v70;
  }
  v38 = *(_QWORD *)(a3 + 16);
  v39 = *(_QWORD *)(v38 + 832);
  if (v39)
    v40 = *(unsigned __int16 *)(v39 + 8);
  else
    v40 = 0;
  v42 = sub_1C636D0C8(v38, (const char *)0x92, (const llvm::APInt *)&v66, v63, v64, v31, v30, v40);
  v43 = *(_QWORD *)(a3 + 16);
  v44 = *(_QWORD *)(v43 + 832);
  if (v44)
    v45 = *(_WORD *)(v44 + 8);
  else
    v45 = 0;
  v47 = sub_1C5D52060(v43, 216, (const llvm::APInt *)&v66, v53, v54, (uint64_t)v42, v41, v45);
  v49 = v48;
  if (v68 != v70)
    free(v68);
  v50 = sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v66, *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v47, v49, v46, (uint64_t)v27, 1);
  if (v71 != (uint64_t *)&v73)
    free(v71);
  if (v66)
    llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
  return v50;
}

llvm::LLVMContext *sub_1C4826644(llvm::LLVMContext *result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;

  if (a3 == 64)
    v7 = 4;
  else
    v7 = a3;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a7 + 52 * v7 + 4 * a4);
  switch(a4)
  {
    case 0u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 16;
      *(_BYTE *)(a2 + 64) = 102;
      v10 = 164;
      goto LABEL_15;
    case 1u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 12;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 0xCu, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v11;
      v12 = 152;
      goto LABEL_13;
    case 2u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 8;
      *(_BYTE *)(a2 + 64) = 101;
      v10 = 135;
      goto LABEL_15;
    case 3u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 7;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 7u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v13;
      v12 = 117;
      goto LABEL_13;
    case 4u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 6;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 6u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v14;
      v12 = 99;
      goto LABEL_13;
    case 5u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 5;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 5u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v15;
      v12 = 81;
      goto LABEL_13;
    case 6u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 4;
      *(_BYTE *)(a2 + 64) = 97;
      v10 = 63;
      goto LABEL_15;
    case 7u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 3;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 3u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v16;
      v12 = 45;
LABEL_13:
      *(_DWORD *)(a2 + 80) = v12;
      goto LABEL_45;
    case 8u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 2;
      *(_BYTE *)(a2 + 64) = 95;
      v10 = 27;
LABEL_15:
      *(_DWORD *)(a2 + 80) = v10;
      v17 = 33;
      *(_QWORD *)(a2 + 72) = 0;
      goto LABEL_46;
    case 9u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      v17 = 1;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 9;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 3;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 3u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v18;
      if (a3)
        v19 = 26;
      else
        v19 = 27;
      *(_DWORD *)(a2 + 80) = v19;
      goto LABEL_46;
    case 0xAu:
      if (a3 == 64)
        v20 = a6;
      else
        v20 = 0;
      if (a3 == 64)
        v21 = a5;
      else
        v21 = 5;
      *(_QWORD *)a2 = v21;
      *(_QWORD *)(a2 + 8) = v20;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 5;
      goto LABEL_44;
    case 0xBu:
      v22 = a5 & 0xFFFFFFFFFFFFFF00;
      if (a3 == 3)
        v23 = 4;
      else
        v23 = 5;
      if (a3 == 64)
        v24 = a6;
      else
        v24 = 0;
      if (a3 == 64)
        v23 = a5;
      else
        v22 = 0;
      *(_QWORD *)a2 = v22 & 0xFFFFFFFFFFFFFF00 | v23;
      *(_QWORD *)(a2 + 8) = v24;
      v17 = 1;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 4;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 1;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 1u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v25;
      goto LABEL_46;
    case 0xCu:
      if (a3 == 3 || a3 == 64)
        v27 = 4;
      else
        v27 = 5;
      *(_BYTE *)a2 = v27;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 3;
LABEL_44:
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 1;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 1u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v28;
LABEL_45:
      v17 = 33;
LABEL_46:
      *(_DWORD *)(a2 + 84) = v17;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1C4826A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  const char *v11;
  __int128 *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  llvm::LLVMContext *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  void *v72;
  uint64_t *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  unsigned int i;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  uint64_t *v93;
  int v94;
  int v95;
  uint64_t *v96;
  __int128 v98;
  int64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  llvm::LLVMContext *v103;
  uint64_t v104;
  llvm *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  llvm *v114;
  uint64_t v115;
  unsigned int v116;
  llvm *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  unsigned __int8 *v122;
  int v123;
  void *v124;
  uint64_t v125;
  _BYTE v126[256];
  uint64_t *v127;
  uint64_t v128;
  _QWORD v129[18];

  v129[16] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(v6 + 8);
  v105 = *(llvm **)v6;
  v100 = *(unsigned __int16 *)(a2 + 26);
  v102 = *(_QWORD *)(a2 + 80);
  v103 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v8 = *(_QWORD *)(a2 + 96);
  v101 = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(v8 + 24);
  v9 = (unint64_t *)(v8 + 24);
  if ((v10 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v99 = (unint64_t)(sub_1C4825F50(v9) + 7) >> 3;
    if ((_DWORD)v11 == 1)
  }
  else
  {
    v99 = -1;
  }
  v12 = *(__int128 **)(a2 + 32);
  v13 = *((_QWORD *)v12 + 5);
  v14 = *((_QWORD *)v12 + 6);
  v98 = *v12;
  v15 = *(unsigned __int8 **)(a2 + 64);
  v122 = v15;
  if (v15)
    llvm::MetadataTracking::track((uint64_t)&v122, v15, 2);
  v123 = *(_DWORD *)(a2 + 60);
  v16 = *(_QWORD *)(a3 + 16);
  v17 = sub_1C6366AB4(v16, 0, (const llvm::APInt *)&v122, (llvm *)5, 0, 0, 0);
  v20 = 0;
  v21 = *(_QWORD *)(v16 + 832);
  if (v21)
    v20 = *(_WORD *)(v21 + 8);
  v22 = sub_1C5D56C70(v16, 53, (const llvm::APInt *)&v122, (llvm *)5, 0, v13, v14, v19, (uint64_t)v17, v18, v20);
  v24 = v23;
  v25 = *(_QWORD *)(a3 + 16);
  v26 = sub_1C6366AB4(v25, 1, (const llvm::APInt *)&v122, (llvm *)5, 0, 0, 0);
  v29 = 0;
  v30 = *(_QWORD *)(v25 + 832);
  if (v30)
    v29 = *(_WORD *)(v30 + 8);
  v31 = sub_1C5D56C70(v25, 53, (const llvm::APInt *)&v122, (llvm *)5, 0, v13, v14, v28, (uint64_t)v26, v27, v29);
  v33 = v32;
  v34 = *(_QWORD *)(a3 + 16);
  v120 = v122;
  if (v122)
    llvm::MetadataTracking::track((uint64_t)&v120, v122, 2);
  v104 = v7;
  v121 = v123;
  v35 = sub_1C612FAAC(a1, (uint64_t)v22, v24, (uint64_t)v31, v33, v34, (uint64_t)&v120);
  v37 = v36;
  if (v120)
    llvm::MetadataTracking::untrack((uint64_t)&v120, v120);
  v38 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v122, (llvm *)5, 0, 1, 0);
  v40 = v39;
  v41 = *(_QWORD *)(a3 + 16);
  v42 = *(uint64_t **)(v41 + 40);
  v43 = *(_QWORD *)(a1 + 184296);
  v44 = *v42;
  LODWORD(v124) = 0;
  if (sub_1C4785D88(v43, v44, "LoadCMode", &v124))
    v45 = v124;
  else
    v45 = 0;
  v106 = a1;
  v46 = sub_1C6366AB4(v41, v45, (const llvm::APInt *)&v122, (llvm *)5, 0, 1, 0);
  v48 = v47;
  v49 = *(_QWORD *)(a3 + 16);
  v50 = *(_QWORD *)(v106 + 184296);
  v51 = *v42;
  LODWORD(v124) = 0;
  if (sub_1C4785D88(v50, v51, "LoadSLCMode", &v124))
    v52 = v124;
  else
    v52 = 1;
  v53 = sub_1C6366AB4(v49, v52, (const llvm::APInt *)&v122, (llvm *)5, 0, 1, 0);
  v127 = v129;
  v129[0] = v35;
  v129[1] = v37;
  v129[2] = v46;
  v129[3] = v48;
  v129[4] = v53;
  v129[5] = v54;
  v55 = *(_QWORD *)(a3 + 16);
  v129[6] = v38;
  v129[7] = v40;
  v128 = 0x800000004;
  sub_1C4825258(v106, (uint64_t)&v127, v55);
  v56 = v128;
  if (v128 >= HIDWORD(v128))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, (uint64_t)v129, v128 + 1, 16);
    v56 = v128;
  }
  *(_OWORD *)&v127[2 * v56] = v98;
  LODWORD(v128) = v128 + 1;
  LOBYTE(v109) = 0;
  v110 = 0;
  LOBYTE(v111) = 0;
  v112 = 0;
  v113 = -1;
  LOBYTE(v114) = 0;
  v115 = 0;
  v116 = -1;
  LOBYTE(v117) = 0;
  v118 = 0;
  v119 = -1;
  v57 = v104;
  if (v99 <= 23)
    __asm { BR              X10 }
  if (v99 <= 31)
  {
    v59 = v102;
    v58 = v103;
    v60 = v101;
    v61 = v100;
    if (v99 == 24)
      v62 = 4;
    else
      v62 = 3;
  }
  else
  {
    v59 = v102;
    v58 = v103;
    v60 = v101;
    v61 = v100;
    if (v99 == 32)
      v62 = 2;
    else
      v62 = v99 == 48;
  }
  v63 = (v61 >> 10) & 3;
  sub_1C4826644(v58, (uint64_t)&v109, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), v62, v59, v60, (uint64_t)&unk_1ED7E9C10);
  v64 = *(_QWORD *)(a3 + 16);
  v65 = v113;
  v66 = v127;
  v67 = v128;
  v68 = sub_1C636A8B4(v64, v109, v110, v111, v112);
  v70 = sub_1C5D61678(v64, v65, (uint64_t)&v122, v68, v69, v66, v67);
  v71 = *(_QWORD *)(a2 + 96);
  if (*(_DWORD *)(v71 + 16) == 2)
    *(_WORD *)(v71 + 32) |= 0x20u;
  v72 = *(void **)(a3 + 16);
  v124 = (void *)v71;
  sub_1C636E10C(v72, (uint64_t)v70, &v124, 1);
  v107 = v122;
  if (v122)
    llvm::MetadataTracking::track((uint64_t)&v107, v122, 2);
  v108 = v123;
  v73 = sub_1C6131488(v106, (uint64_t)v70, 0, v105, v104, v63, (const llvm::APInt *)&v107, a3);
  v75 = v74;
  if (v107)
    llvm::MetadataTracking::untrack((uint64_t)&v107, v107);
  v124 = v126;
  v125 = 0x1000000000;
  if (v116)
  {
    for (i = 0; i < v116; ++i)
    {
      v79 = sub_1C636E638(*(_QWORD *)(a3 + 16), i + HIDWORD(v119), (const llvm::APInt *)&v122, v114, v115, (uint64_t)v73, v75);
      v81 = v80;
      v82 = v125;
      if (v125 >= (unint64_t)HIDWORD(v125))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)v126, v125 + 1, 16);
        v82 = v125;
      }
      v83 = (char *)v124 + 16 * v82;
      *v83 = v79;
      v83[1] = v81;
      v76 = (v125 + 1);
      LODWORD(v125) = v125 + 1;
    }
    v77 = (uint64_t *)v124;
    v57 = v104;
  }
  else
  {
    v76 = 0;
    v77 = (uint64_t *)v126;
  }
  v84 = *(_QWORD *)(a3 + 16);
  v85 = *(_QWORD *)(v84 + 832);
  if (v85)
    v86 = *(unsigned __int16 *)(v85 + 8);
  else
    v86 = 0;
  v88 = sub_1C636D0C8(v84, (const char *)0x92, (const llvm::APInt *)&v122, v117, v118, v77, v76, v86);
  v89 = *(_QWORD *)(a3 + 16);
  v90 = *(_QWORD *)(v89 + 832);
  if (v90)
    v91 = *(_WORD *)(v90 + 8);
  else
    v91 = 0;
  v93 = sub_1C5D52060(v89, 216, (const llvm::APInt *)&v122, v105, v57, (uint64_t)v88, v87, v91);
  v95 = v94;
  if (v124 != v126)
    free(v124);
  v96 = sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v122, *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v93, v95, v92, (uint64_t)v70, 1);
  if (v127 != v129)
    free(v127);
  if (v122)
    llvm::MetadataTracking::untrack((uint64_t)&v122, v122);
  return v96;
}

uint64_t *sub_1C4827244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::LLVMContext *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  const char *v13;
  int64_t v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  llvm::LLVMContext *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  int v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  llvm *v57;
  uint64_t *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  unsigned int i;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  int v80;
  uint64_t *v81;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  llvm *v86;
  unsigned __int8 *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  llvm *v95;
  uint64_t v96;
  unsigned int v97;
  llvm *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  void *v105;
  uint64_t v106;
  _BYTE v107[256];
  uint64_t *v108;
  uint64_t v109;
  _QWORD v110[18];

  v110[16] = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v6 = *(_QWORD *)(a2 + 40);
  v86 = *(llvm **)v6;
  v85 = *(_QWORD *)(v6 + 8);
  v7 = *(unsigned __int16 *)(a2 + 26);
  v9 = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(v8 + 24);
  v11 = (unint64_t *)(v8 + 24);
  if ((v12 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v14 = (unint64_t)(sub_1C4825F50(v11) + 7) >> 3;
    if ((_DWORD)v13 == 1)
  }
  else
  {
    v14 = -1;
  }
  v15 = *(__int128 **)(a2 + 32);
  v17 = *((_QWORD *)v15 + 5);
  v16 = *((_QWORD *)v15 + 6);
  v84 = *v15;
  v18 = *(unsigned __int8 **)(a2 + 64);
  v103 = v18;
  if (v18)
    llvm::MetadataTracking::track((uint64_t)&v103, v18, 2);
  v104 = *(_DWORD *)(a2 + 60);
  v24 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v103, (llvm *)5, 0, 1, 0);
  v83 = v25;
  v26 = *(unsigned __int8 **)(v17 + 64);
  v101 = v26;
  if (v26)
    llvm::MetadataTracking::track((uint64_t)&v101, v26, 2);
  v102 = *(_DWORD *)(v17 + 60);
  v27 = sub_1C4827A90(v17, v16, *(_QWORD *)(a3 + 16), v19, v20, v21, v22, v23);
  v29 = *((unsigned __int16 *)v27 + 12);
  if (v29 == 35 || v29 == 11)
  {
    v31 = v9;
    v32 = v10;
    v108 = v110;
    v109 = 0x800000000;
    v33 = v27[10];
    v34 = (unsigned int *)(v33 + 24);
    v35 = v5;
    if (*(_DWORD *)(v33 + 32) >= 0x41u)
      v34 = *(unsigned int **)v34;
    v36 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), *v34, (const llvm::APInt *)&v103, (llvm *)5, 0, 1, 0);
    v38 = v37;
    v39 = v109;
    if (v109 >= HIDWORD(v109))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v110, v109 + 1, 16);
      v39 = v109;
    }
    v40 = &v108[2 * v39];
    *v40 = (uint64_t)v36;
    v40[1] = v38;
    v43 = &unk_1ED7E9D14;
    v41 = v109;
    v42 = HIDWORD(v109);
    v5 = v35;
    v10 = v32;
    v9 = v31;
  }
  else
  {
    v41 = 0;
    v108 = v110;
    v42 = 8;
    HIDWORD(v109) = 8;
    v110[0] = v27;
    v110[1] = v28;
    v43 = &unk_1ED7E9C10;
  }
  v44 = (v41 + 1);
  LODWORD(v109) = v44;
  if (v44 >= v42)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v110, v44 + 1, 16);
    LODWORD(v44) = v109;
  }
  v45 = &v108[2 * v44];
  *v45 = (uint64_t)v24;
  v45[1] = v83;
  LODWORD(v109) = v109 + 1;
  sub_1C4825258(a1, (uint64_t)&v108, *(_QWORD *)(a3 + 16));
  v46 = v109;
  if (v109 >= HIDWORD(v109))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v110, v109 + 1, 16);
    v46 = v109;
  }
  *(_OWORD *)&v108[2 * v46] = v84;
  LODWORD(v109) = v109 + 1;
  LOBYTE(v90) = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  v93 = 0;
  v94 = -1;
  LOBYTE(v95) = 0;
  v96 = 0;
  v97 = -1;
  LOBYTE(v98) = 0;
  v99 = 0;
  v100 = -1;
  if (v14 <= 23)
    __asm { BR              X10 }
  if (v14 <= 31)
  {
    if (v14 == 24)
      v47 = 4;
    else
      v47 = 3;
  }
  else if (v14 == 32)
  {
    v47 = 2;
  }
  else
  {
    v47 = v14 == 48;
  }
  v48 = (v7 >> 10) & 3;
  sub_1C4826644(v5, (uint64_t)&v90, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), v47, v10, v9, (uint64_t)v43);
  v49 = *(_QWORD *)(a3 + 16);
  v50 = v94;
  v51 = v108;
  v52 = v109;
  v53 = sub_1C636A8B4(v49, v90, v91, v92, v93);
  v55 = sub_1C5D61678(v49, v50, (uint64_t)&v103, v53, v54, v51, v52);
  v56 = *(void **)(a3 + 16);
  v105 = *(void **)(a2 + 96);
  sub_1C636E10C(v56, (uint64_t)v55, &v105, 1);
  v88 = v103;
  if (v103)
    llvm::MetadataTracking::track((uint64_t)&v88, v103, 2);
  v89 = v104;
  v57 = v86;
  v58 = sub_1C6131488(a1, (uint64_t)v55, 0, v86, v85, v48, (const llvm::APInt *)&v88, a3);
  v60 = v59;
  if (v88)
    llvm::MetadataTracking::untrack((uint64_t)&v88, v88);
  v105 = v107;
  v106 = 0x1000000000;
  if (v97)
  {
    for (i = 0; i < v97; ++i)
    {
      v64 = sub_1C636E638(*(_QWORD *)(a3 + 16), i + HIDWORD(v100), (const llvm::APInt *)&v103, v95, v96, (uint64_t)v58, v60);
      v66 = v65;
      v67 = v106;
      if (v106 >= (unint64_t)HIDWORD(v106))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v107, v106 + 1, 16);
        v67 = v106;
      }
      v68 = (char *)v105 + 16 * v67;
      *v68 = v64;
      v68[1] = v66;
      v61 = (v106 + 1);
      LODWORD(v106) = v106 + 1;
    }
    v62 = (uint64_t *)v105;
    v57 = v86;
  }
  else
  {
    v61 = 0;
    v62 = (uint64_t *)v107;
  }
  v69 = *(_QWORD *)(a3 + 16);
  v70 = *(_QWORD *)(v69 + 832);
  if (v70)
    v71 = *(unsigned __int16 *)(v70 + 8);
  else
    v71 = 0;
  v73 = sub_1C636D0C8(v69, (const char *)0x92, (const llvm::APInt *)&v103, v98, v99, v62, v61, v71);
  v74 = *(_QWORD *)(a3 + 16);
  v75 = *(_QWORD *)(v74 + 832);
  if (v75)
    v76 = *(_WORD *)(v75 + 8);
  else
    v76 = 0;
  v78 = sub_1C5D52060(v74, 216, (const llvm::APInt *)&v103, v57, v85, (uint64_t)v73, v72, v76);
  v80 = v79;
  if (v105 != v107)
    free(v105);
  v81 = sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v103, *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v78, v80, v77, (uint64_t)v55, 1);
  if (v108 != v110)
    free(v108);
  if (v101)
    llvm::MetadataTracking::untrack((uint64_t)&v101, v101);
  if (v103)
    llvm::MetadataTracking::untrack((uint64_t)&v103, v103);
  return v81;
}

_QWORD *sub_1C4827A90(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t ExtendedSizeInBits;
  const char *v19;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  _BOOL4 v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  int v61;
  uint64_t v63;
  unint64_t *v64;
  uint64_t *v65;
  uint64_t i;
  void **v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  uint64_t v82;
  _QWORD *v83;
  size_t v84;
  unint64_t v85;
  unint64_t v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t j;
  void **v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  _QWORD *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  unint64_t v113;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unsigned int v120;
  uint64_t v121;
  __int16 v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int16 v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  unsigned int v146;
  unint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  unsigned __int8 *v159;
  int v160;
  void *v161;
  unsigned int v162;
  void *v163;
  unsigned int v164;
  void *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  void *__src[2];
  uint64_t v170;
  unsigned int v171;
  void *v172;
  unsigned int v173;
  uint64_t v174;
  _DWORD v175[2];
  uint64_t v176;

  v9 = (_QWORD *)a1;
  v176 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 **)(a1 + 64);
  v159 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v159, v10, 2);
  v160 = *((_DWORD *)v9 + 15);
  v11 = *((unsigned __int16 *)v9 + 12);
  v12 = v11 > 0x26;
  v13 = (1 << v11) & 0x6000006000;
  if (!v12 && v13 != 0)
  {
    v105 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 344);
    v106 = v9;
    v107 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v105 + 400))(v105, v9[10]);
    v109 = v108;
    v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 336))(v105);
    v111 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 24))(v110, v109);
    v9 = sub_1C6366AB4(a3, (*((_DWORD *)v106 + 22) + v111 * v107) >> 1, (const llvm::APInt *)&v159, (llvm *)4, 0, 0, 0);
    goto LABEL_156;
  }
  v156 = 0;
  v157 = 0;
  v15 = 0;
  v16 = 1;
  v152 = a2;
  v153 = (uint64_t)v9;
  while (1)
  {
    while (1)
    {
      v17 = *((unsigned __int16 *)v9 + 12);
      if ((v17 - 198) <= 2)
      {
        while (1)
        {
          *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v9[4] + 40) + 16 * *(unsigned int *)(v9[4] + 8));
          if (LOBYTE(__src[0]))
            ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)__src);
          else
            ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
          v20 = ExtendedSizeInBits;
          if ((_DWORD)v19 == 1)
          if (v20 < 0x10)
            break;
          v21 = (unsigned int *)v9[4];
          v9 = *(_QWORD **)v21;
          a2 = a2 & 0xFFFFFFFF00000000 | v21[2];
          v17 = *(unsigned __int16 *)(*(_QWORD *)v21 + 24);
          if ((v17 - 198) >= 3)
            goto LABEL_19;
        }
        v17 = *((unsigned __int16 *)v9 + 12);
      }
LABEL_19:
      if (v17 == 56)
      {
        v22 = v16;
        v23 = v15;
        v24 = (uint64_t *)v9[4];
        v25 = *v24;
        v26 = *(unsigned __int16 *)(*v24 + 24);
        v12 = v26 > 0x26;
        v27 = (1 << v26) & 0x6000006000;
        if (!v12 && v27 != 0)
        {
          v29 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 344);
          v30 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 400))(v29, *(_QWORD *)(v25 + 80));
          v32 = v31;
          v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 336))(v29);
          v34 = *(_DWORD *)(v25 + 88)
              + (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 24))(v33, v32) * v30;
          v35 = v9[4];
          v9 = *(_QWORD **)(v35 + 40);
          v36 = *(unsigned int *)(v35 + 48);
          v37 = a2 & 0xFFFFFFFF00000000;
          v15 = v23;
          v16 = v22;
          goto LABEL_57;
        }
        v38 = v9 + 3;
        v15 = v23;
        v16 = v22;
        goto LABEL_47;
      }
      v38 = v9 + 3;
      if (v17 != 172)
        break;
      for (i = 0; i != 8; i += 4)
      {
        v67 = &__src[i];
        *((_DWORD *)v67 + 2) = 1;
        *v67 = 0;
        *((_DWORD *)v67 + 6) = 1;
        v67[2] = 0;
      }
      sub_1C6368768(a3, *(_QWORD *)v9[4], *(_QWORD *)(v9[4] + 8), 0, (uint64_t)&v165);
      if (LODWORD(__src[1]) >= 0x41 && __src[0])
        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
      __src[0] = v165;
      LODWORD(__src[1]) = v166;
      v166 = 0;
      if (v171 >= 0x41 && v170)
      {
        MEMORY[0x1CAA32F9C](v170, 0x1000C8000313F17);
        v170 = v167;
        v171 = v168;
        v168 = 0;
        if (v166 >= 0x41 && v165)
          MEMORY[0x1CAA32F9C](v165, 0x1000C8000313F17);
      }
      else
      {
        v170 = v167;
        v171 = v168;
      }
      sub_1C6368768(a3, *(_QWORD *)(v9[4] + 40), *(_QWORD *)(v9[4] + 48), 0, (uint64_t)&v165);
      if (v173 >= 0x41 && v172)
        MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
      v172 = v165;
      v173 = v166;
      v166 = 0;
      if (v175[0] >= 0x41u && v174)
      {
        MEMORY[0x1CAA32F9C](v174, 0x1000C8000313F17);
        v174 = v167;
        v175[0] = v168;
        v168 = 0;
        if (v166 >= 0x41 && v165)
          MEMORY[0x1CAA32F9C](v165, 0x1000C8000313F17);
      }
      else
      {
        v174 = v167;
        v175[0] = v168;
      }
      v68 = __src[1];
      v164 = __src[1];
      if (LODWORD(__src[1]) > 0x40)
      {
        v84 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
        v163 = (void *)operator new[]();
        memcpy(v163, __src[0], v84);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v163);
        v68 = v164;
        v70 = (uint64_t)v163;
      }
      else
      {
        if (LODWORD(__src[1]))
          v69 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
        else
          v69 = 0;
        v70 = v69 & ~(uint64_t)__src[0];
        v163 = (void *)v70;
      }
      v164 = 0;
      v162 = v173;
      if (v173 <= 0x40)
      {
        if (v173)
          v85 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v173;
        else
          v85 = 0;
        v86 = v85 & ~(unint64_t)v172;
        v161 = (void *)v86;
        v162 = 0;
        goto LABEL_102;
      }
      v154 = v70;
      v87 = (((unint64_t)v173 + 63) >> 3) & 0x3FFFFFF8;
      v161 = (void *)operator new[]();
      memcpy(v161, v172, v87);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v161);
      v88 = v162;
      v86 = (unint64_t)v161;
      v162 = 0;
      if (v88 < 0x41)
      {
        v70 = v154;
LABEL_102:
        v89 = (v86 & v70) == 0;
        goto LABEL_103;
      }
      v97 = 0;
      v98 = (unint64_t)(v88 + 63) >> 6;
      v70 = v154;
      do
      {
        *(_QWORD *)(v86 + v97) &= *(_QWORD *)(v154 + v97);
        v97 += 8;
      }
      while (8 * v98 != v97);
      v99 = 0;
      do
      {
        v12 = v98-- < 1;
        if (v12)
          break;
        v100 = *(_QWORD *)(v86 + 8 * v98);
        v99 += __clz(v100);
      }
      while (!v100);
      v89 = 0;
      v101 = v88 | 0xFFFFFFC0;
      if ((v88 & 0x3F) == 0)
        v101 = 0;
      if ((v88 - v99 - v101) <= 0x40)
        v89 = *(_QWORD *)v86 == 0;
      if (v86)
      {
        v102 = v89;
        MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
        v89 = v102;
        v70 = v154;
      }
LABEL_103:
      v90 = v15;
      if (v68 >= 0x41 && v70)
      {
        v91 = v89;
        MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
        v89 = v91;
      }
      for (j = 0; j != 0x3FFFFFFFFFFFFFF0; j -= 8)
      {
        v93 = &__src[j / 2];
        if (v175[j] >= 0x41u)
        {
          v94 = v93[6];
          if (v94)
          {
            v155 = v89;
            MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
            v89 = v155;
          }
        }
        if (*((_DWORD *)v93 + 10) >= 0x41u)
        {
          v95 = v93[4];
          if (v95)
          {
            v96 = v89;
            MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
            v89 = v96;
          }
        }
      }
      if (!(_DWORD)v89)
      {
        v15 = v90;
        break;
      }
      v24 = (uint64_t *)v9[4];
      v15 = v90;
LABEL_47:
      v57 = 0;
      v58 = 1;
      while (1)
      {
        v59 = v58;
        v60 = v24[5 * v57];
        v61 = *(unsigned __int16 *)(v60 + 24);
        if (v61 == 35 || v61 == 11)
          break;
        v58 = 0;
        v57 = 1;
        if ((v59 & 1) == 0)
          goto LABEL_26;
      }
      v63 = *(_QWORD *)(v60 + 80);
      v64 = (unint64_t *)(v63 + 24);
      if (*(_DWORD *)(v63 + 32) >= 0x41u)
        v64 = (unint64_t *)*v64;
      v34 = *v64;
      v65 = &v24[5 * (v57 ^ 1)];
      v9 = (_QWORD *)*v65;
      v36 = *((unsigned int *)v65 + 2);
      v37 = a2 & 0xFFFFFFFF00000000;
LABEL_57:
      a2 = v37 | v36;
      v15 += v34 * v16;
    }
LABEL_26:
    if (*v38 == 56)
    {
      v39 = 0;
      v40 = v9[4];
      v41 = 1;
      while (1)
      {
        v42 = v41;
        v43 = (unsigned int *)(v40 + 40 * v39);
        v44 = *(_QWORD *)v43;
        if (*(_WORD *)(*(_QWORD *)v43 + 24) == 56)
        {
          v45 = *(uint64_t **)(v44 + 32);
          v46 = v45[5];
          v47 = *(unsigned __int16 *)(v46 + 24);
          if (v47 == 35 || v47 == 11)
            break;
        }
        v41 = 0;
        v39 = 1;
        if ((v42 & 1) == 0)
        {
          if (v16 == 1)
          {
            v49 = 1;
            if (!v157 && !(_DWORD)v156)
            {
              v50 = *(_QWORD **)v40;
              v51 = *(unsigned __int16 *)(*(_QWORD *)v40 + 24);
              if (v51 == 175 || v51 == 58)
              {
                v156 = *(unsigned int *)(v40 + 48);
                v157 = *(_QWORD *)(v40 + 40);
                a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v40 + 8);
                v40 = v50[4];
                v9 = v50;
              }
              else
              {
                v157 = 0;
              }
              v71 = *(unsigned __int16 *)(*(_QWORD *)(v40 + 40) + 24);
              if (v71 == 175 || v71 == 58)
              {
                v156 = *(unsigned int *)(v40 + 8);
                v157 = *(_QWORD *)v40;
                a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v40 + 48);
                v9 = *(_QWORD **)(v40 + 40);
              }
            }
          }
          else
          {
            v49 = 0;
          }
          goto LABEL_75;
        }
      }
      v52 = *(_QWORD *)(v46 + 80);
      v53 = (unint64_t *)(v52 + 24);
      if (*(_DWORD *)(v52 + 32) >= 0x41u)
        v53 = (unint64_t *)*v53;
      v54 = *(_QWORD *)(a3 + 832);
      if (v54)
        LOWORD(v54) = *(_WORD *)(v54 + 8);
      v34 = *v53;
      v55 = *(_QWORD *)(v44 + 40) + 16 * v43[2];
      v9 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v159, *(llvm **)v55, *(_QWORD *)(v55 + 8), *v45, v45[1], a8, *(_QWORD *)(v40 + 40 * (v39 ^ 1)), *(_QWORD *)(v40 + 40 * (v39 ^ 1) + 8), v54);
      v37 = v56;
      v36 = a2 & 0xFFFFFFFF00000000;
      goto LABEL_57;
    }
    v49 = v16 == 1;
LABEL_75:
    v72 = *((unsigned __int16 *)v9 + 12);
    if (v72 <= 0xAE)
      break;
    if (v72 != 175)
      goto LABEL_145;
    v73 = v9[4];
    v79 = *(_QWORD *)(v73 + 40);
    v80 = *(unsigned __int16 *)(v79 + 24);
    if (v80 != 35 && v80 != 11)
      goto LABEL_145;
    v82 = *(_QWORD *)(v79 + 80);
    v83 = (_QWORD *)(v82 + 24);
    if (*(_DWORD *)(v82 + 32) >= 0x41u)
      v83 = (_QWORD *)*v83;
    v16 <<= *v83;
LABEL_94:
    a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v73 + 8);
    v9 = *(_QWORD **)v73;
  }
  if (v72 == 58)
  {
    v73 = v9[4];
    v74 = *(_QWORD *)(v73 + 40);
    v75 = *(unsigned __int16 *)(v74 + 24);
    if (v75 != 35 && v75 != 11)
      goto LABEL_145;
    v77 = *(_QWORD *)(v74 + 80);
    v78 = (_QWORD *)(v77 + 24);
    if (*(_DWORD *)(v77 + 32) >= 0x41u)
      v78 = (_QWORD *)*v78;
    v16 *= *v78;
    goto LABEL_94;
  }
  if (v72 == 11 || v72 == 35)
  {
LABEL_146:
    if (*(_BYTE *)(v9[5] + 16 * a2) != 4)
    {
      v103 = *(_QWORD *)(a3 + 832);
      if (v103)
        v104 = *(_WORD *)(v103 + 8);
      else
        v104 = 0;
      v9 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v159, (llvm *)4, 0, (uint64_t)v9, a2, v104);
      a2 = a2 & 0xFFFFFFFF00000000 | v112;
    }
    if (v49)
    {
      v115 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v159, (llvm *)5, 0, 0, 0);
      v118 = *(_QWORD *)(a3 + 832);
      if (v118)
        LOWORD(v118) = *(_WORD *)(v118 + 8);
      v119 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v159, (llvm *)4, 0, (uint64_t)v9, a2, v117, (uint64_t)v115, v116, v118);
    }
    else
    {
      v113 = (unsigned __int16)(v16 >> 1);
      if (v113 < 2)
      {
LABEL_153:
        if (v157 || (_DWORD)v156)
        {
          v121 = *(_QWORD *)(a3 + 832);
          if (v121)
            v122 = *(_WORD *)(v121 + 8);
          else
            v122 = 0;
          v129 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v159, (llvm *)4, 0, v157, v156, v122);
          v131 = v130;
          v132 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v159, (llvm *)5, 0, 0, 0);
          v135 = *(_QWORD *)(a3 + 832);
          if (v135)
            LOWORD(v135) = *(_WORD *)(v135 + 8);
          v136 = sub_1C5D56C70(a3, 176, (const llvm::APInt *)&v159, (llvm *)4, 0, (uint64_t)v129, v131, v134, (uint64_t)v132, v133, v135);
          v139 = *(_QWORD *)(a3 + 832);
          if (v139)
            LOWORD(v139) = *(_WORD *)(v139 + 8);
          v9 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v159, (llvm *)4, 0, (uint64_t)v9, a2, v138, (uint64_t)v136, v137, v139);
          a2 = a2 & 0xFFFFFFFF00000000 | v140;
          if (!(unsigned __int16)(v15 >> 1))
            goto LABEL_156;
        }
        else if (!(unsigned __int16)(v15 >> 1))
        {
          goto LABEL_156;
        }
        v141 = sub_1C6366AB4(a3, (unsigned __int16)(v15 >> 1), (const llvm::APInt *)&v159, (llvm *)4, 0, 0, 0);
        v144 = *(_QWORD *)(a3 + 832);
        if (v144)
          LOWORD(v144) = *(_WORD *)(v144 + 8);
        v9 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v159, (llvm *)4, 0, (uint64_t)v9, a2, v143, (uint64_t)v141, v142, v144);
        goto LABEL_156;
      }
      v123 = sub_1C6366AB4(a3, v113, (const llvm::APInt *)&v159, (llvm *)4, 0, 0, 0);
      v126 = *(_QWORD *)(a3 + 832);
      if (v126)
        LOWORD(v126) = *(_WORD *)(v126 + 8);
      v119 = sub_1C5D56C70(a3, 58, (const llvm::APInt *)&v159, (llvm *)4, 0, (uint64_t)v9, a2, v125, (uint64_t)v123, v124, v126);
    }
    v9 = v119;
    a2 = a2 & 0xFFFFFFFF00000000 | v120;
    goto LABEL_153;
  }
LABEL_145:
  if (((v15 | v16) & 1) == 0)
    goto LABEL_146;
  v127 = *(_QWORD *)(a3 + 832);
  if (v127)
    v128 = *(_WORD *)(v127 + 8);
  else
    v128 = 0;
  v145 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v159, (llvm *)4, 0, v153, v152, v128);
  v147 = a2 & 0xFFFFFFFF00000000 | v146;
  v148 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v159, (llvm *)5, 0, 0, 0);
  v151 = *(_QWORD *)(a3 + 832);
  if (v151)
    LOWORD(v151) = *(_WORD *)(v151 + 8);
  v9 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v159, (llvm *)4, 0, (uint64_t)v145, v147, v150, (uint64_t)v148, v149, v151);
LABEL_156:
  if (v159)
    llvm::MetadataTracking::untrack((uint64_t)&v159, v159);
  return v9;
}

uint64_t *sub_1C4828754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::LLVMContext *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  const char *v13;
  int64_t v14;
  __int128 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _WORD *v38;
  void *v39;
  uint64_t v40;
  llvm *v41;
  uint64_t *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int i;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  int v64;
  uint64_t *v65;
  __int128 v67;
  unint64_t v68;
  llvm *v69;
  uint64_t v70;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  llvm *v79;
  uint64_t v80;
  unsigned int v81;
  llvm *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  int v86;
  unsigned __int8 *v87;
  int v88;
  void *v89;
  uint64_t v90;
  _BYTE v91[256];
  uint64_t *v92;
  uint64_t v93;
  _QWORD v94[18];

  v94[16] = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v6 = *(_QWORD *)(a2 + 40);
  v69 = *(llvm **)v6;
  v70 = *(_QWORD *)(v6 + 8);
  v7 = *(unsigned __int16 *)(a2 + 26);
  v9 = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(v8 + 24);
  v11 = (unint64_t *)(v8 + 24);
  if ((v12 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v14 = (unint64_t)(sub_1C4825F50(v11) + 7) >> 3;
    if ((_DWORD)v13 == 1)
  }
  else
  {
    v14 = -1;
  }
  v15 = *(__int128 **)(a2 + 32);
  v16 = *((_QWORD *)v15 + 5);
  v68 = *((_QWORD *)v15 + 6);
  v67 = *v15;
  v17 = *(unsigned __int8 **)(a2 + 64);
  v87 = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&v87, v17, 2);
  v88 = *(_DWORD *)(a2 + 60);
  v23 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v87, (llvm *)5, 0, 1, 0);
  v25 = v24;
  v26 = *(unsigned __int8 **)(v16 + 64);
  v85 = v26;
  if (v26)
    llvm::MetadataTracking::track((uint64_t)&v85, v26, 2);
  v86 = *(_DWORD *)(v16 + 60);
  v27 = sub_1C4827A90(v16, v68, *(_QWORD *)(a3 + 16), v18, v19, v20, v21, v22);
  v92 = v94;
  v94[0] = v27;
  v94[1] = v28;
  v94[2] = v23;
  v94[3] = v25;
  v93 = 0x800000002;
  sub_1C4825258(a1, (uint64_t)&v92, *(_QWORD *)(a3 + 16));
  v29 = v93;
  if (v93 >= HIDWORD(v93))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v93 + 1, 16);
    v29 = v93;
  }
  *(_OWORD *)&v92[2 * v29] = v67;
  LODWORD(v93) = v93 + 1;
  LOBYTE(v74) = 0;
  v75 = 0;
  LOBYTE(v76) = 0;
  v77 = 0;
  v78 = -1;
  LOBYTE(v79) = 0;
  v80 = 0;
  v81 = -1;
  LOBYTE(v82) = 0;
  v83 = 0;
  v84 = -1;
  if (v14 <= 23)
    __asm { BR              X10 }
  if (v14 <= 31)
  {
    if (v14 == 24)
      v30 = 4;
    else
      v30 = 3;
  }
  else if (v14 == 32)
  {
    v30 = 2;
  }
  else
  {
    v30 = v14 == 48;
  }
  sub_1C4826644(v5, (uint64_t)&v74, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), v30, v10, v9, (uint64_t)&unk_1ED7E9C10);
  v31 = *(_QWORD *)(a3 + 16);
  v32 = v78;
  v33 = v92;
  v34 = v93;
  v35 = sub_1C636A8B4(v31, v74, v75, v76, v77);
  v37 = sub_1C5D61678(v31, v32, (uint64_t)&v87, v35, v36, v33, v34);
  v38 = *(_WORD **)(a2 + 96);
  v38[16] |= 0x20u;
  v39 = *(void **)(a3 + 16);
  v89 = v38;
  sub_1C636E10C(v39, (uint64_t)v37, &v89, 1);
  v72 = v87;
  if (v87)
    llvm::MetadataTracking::track((uint64_t)&v72, v87, 2);
  v73 = v88;
  v40 = v70;
  v41 = v69;
  v42 = sub_1C6131488(a1, (uint64_t)v37, 0, v69, v70, (v7 >> 10) & 3, (const llvm::APInt *)&v72, a3);
  v44 = v43;
  if (v72)
    llvm::MetadataTracking::untrack((uint64_t)&v72, v72);
  v89 = v91;
  v90 = 0x1000000000;
  if (v81)
  {
    for (i = 0; i < v81; ++i)
    {
      v48 = sub_1C636E638(*(_QWORD *)(a3 + 16), i + HIDWORD(v84), (const llvm::APInt *)&v87, v79, v80, (uint64_t)v42, v44);
      v50 = v49;
      v51 = v90;
      if (v90 >= (unint64_t)HIDWORD(v90))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, (uint64_t)v91, v90 + 1, 16);
        v51 = v90;
      }
      v52 = (char *)v89 + 16 * v51;
      *v52 = v48;
      v52[1] = v50;
      v45 = (v90 + 1);
      LODWORD(v90) = v90 + 1;
    }
    v46 = (uint64_t *)v89;
    v41 = v69;
    v40 = v70;
  }
  else
  {
    v45 = 0;
    v46 = (uint64_t *)v91;
  }
  v53 = *(_QWORD *)(a3 + 16);
  v54 = *(_QWORD *)(v53 + 832);
  if (v54)
    v55 = *(unsigned __int16 *)(v54 + 8);
  else
    v55 = 0;
  v57 = sub_1C636D0C8(v53, (const char *)0x92, (const llvm::APInt *)&v87, v82, v83, v46, v45, v55);
  v58 = *(_QWORD *)(a3 + 16);
  v59 = *(_QWORD *)(v58 + 832);
  if (v59)
    v60 = *(_WORD *)(v59 + 8);
  else
    v60 = 0;
  v62 = sub_1C5D52060(v58, 216, (const llvm::APInt *)&v87, v41, v40, (uint64_t)v57, v56, v60);
  v64 = v63;
  if (v89 != v91)
    free(v89);
  v65 = sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v87, *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v62, v64, v61, (uint64_t)v37, 1);
  if (v92 != v94)
    free(v92);
  if (v85)
    llvm::MetadataTracking::untrack((uint64_t)&v85, v85);
  if (v87)
    llvm::MetadataTracking::untrack((uint64_t)&v87, v87);
  return v65;
}

unsigned __int8 **sub_1C4828EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  llvm *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  llvm *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  const char *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  llvm::LLVMContext *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int8 **v40;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t *v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  unint64_t v57;
  unint64_t v58;
  llvm *v59;
  uint64_t v60;
  uint64_t v61;
  llvm *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t **v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  llvm::LLVMContext *v80;
  uint64_t v81;
  char v82[8];
  uint64_t v83;
  char v84;
  uint64_t v85;
  int v86;
  llvm *v87;
  uint64_t v88;
  unsigned int v89;
  llvm *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  int v94;
  void *v95;
  uint64_t v96;
  _BYTE v97[528];
  _QWORD *v98;
  uint64_t v99;
  _QWORD v100[18];

  v100[16] = *MEMORY[0x1E0C80C00];
  v80 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v5 = *(unsigned __int8 **)(a2 + 64);
  v93 = v5;
  if (v5)
    llvm::MetadataTracking::track((uint64_t)&v93, v5, 2);
  v94 = *(_DWORD *)(a2 + 60);
  v6 = *(llvm **)(a2 + 80);
  v81 = *(_QWORD *)(a2 + 88);
  v7 = *(uint64_t **)(a2 + 32);
  v8 = *v7;
  v9 = v7[1];
  v11 = v7[5];
  v10 = v7[6];
  v13 = v7[10];
  v12 = v7[11];
  if (*(_WORD *)(a2 + 24) == 254 && (*(_WORD *)(a2 + 26) & 0x400) != 0)
  {
    v14 = *(_QWORD *)(a2 + 80);
    if (*(_QWORD *)(a2 + 80))
    {
      if ((v14 - 120) < 0x20 || (v14 - 2) < 6 || (v14 - 15) < 0x3C)
      {
LABEL_16:
        v26 = *(_QWORD *)(a3 + 16);
        v27 = *(_QWORD *)(v26 + 832);
        if (v27)
          v28 = *(_WORD *)(v27 + 8);
        else
          v28 = 0;
        v24 = sub_1C5D52060(v26, 201, (const llvm::APInt *)&v93, v6, v81, v11, v10, v28);
LABEL_20:
        v11 = (uint64_t)v24;
        v10 = v10 & 0xFFFFFFFF00000000 | v25;
        goto LABEL_21;
      }
    }
    else
    {
      if ((*(_DWORD *)(v81 + 8) & 0xFE) == 0x12)
        v15 = *(unsigned __int8 *)(**(_QWORD **)(v81 + 16) + 8);
      else
        v15 = *(_DWORD *)(v81 + 8);
      if (v15 == 13)
        goto LABEL_16;
    }
    v16 = *(llvm **)(a2 + 80);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = sub_1C6366AB4(v17, 0, (const llvm::APInt *)&v93, (llvm *)5, 0, 0, 0);
    v21 = 0;
    v22 = *(_QWORD *)(v17 + 832);
    if (v22)
      v21 = *(_WORD *)(v22 + 8);
    v78 = (uint64_t)v18;
    v23 = v17;
    v6 = v16;
    v24 = sub_1C5D56C70(v23, 212, (const llvm::APInt *)&v93, v16, v81, v11, v10, v20, v78, v19, v21);
    goto LABEL_20;
  }
LABEL_21:
  v79 = *(_QWORD *)(a2 + 96);
  if ((*(_QWORD *)(v79 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v30 = (unint64_t)(sub_1C4825F50((unint64_t *)(v79 + 24)) + 7) >> 3;
    if ((_DWORD)v29 == 1)
  }
  else
  {
    v30 = -1;
  }
  v31 = *(_QWORD *)(a3 + 16);
  v32 = *(_QWORD *)(v31 + 832);
  if (v32)
    v33 = *(_WORD *)(v32 + 8);
  else
    v33 = 0;
  v34 = sub_1C5D52060(v31, 201, (const llvm::APInt *)&v93, (llvm *)5, 0, v13, v12, v33);
  v98 = v100;
  v100[0] = v8;
  v100[1] = v9;
  v100[2] = v11;
  v100[3] = v10;
  v36 = *(_QWORD *)(a2 + 96);
  v100[4] = v34;
  v100[5] = v12 & 0xFFFFFFFF00000000 | v35;
  v99 = 0x800000003;
  v82[0] = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = -1;
  LOBYTE(v87) = 0;
  v88 = 0;
  v89 = -1;
  LOBYTE(v90) = 0;
  v91 = 0;
  v92 = -1;
  if (v30 <= 23)
    __asm { BR              X10 }
  if (v30 <= 31)
  {
    v37 = v80;
    if (v30 == 24)
      v38 = 4;
    else
      v38 = 3;
  }
  else
  {
    v37 = v80;
    if (v30 == 32)
      v38 = 2;
    else
      v38 = v30 == 48;
  }
  sub_1C4826644(v37, (uint64_t)v82, *(_DWORD *)(v36 + 16), v38, (uint64_t)v6, v81, (uint64_t)&unk_1ED7E9E18);
  v39 = sub_1C636D7B0((llvm *)1, 0);
  v42 = *(_QWORD *)(a3 + 16);
  v43 = *(_QWORD *)(v42 + 832);
  if (v43)
    v44 = *(_WORD *)(v43 + 8);
  else
    v44 = 0;
  v45 = sub_1C5D52060(v42, 216, (const llvm::APInt *)&v93, v90, v91, v11, v10, v44);
  v47 = v46;
  v95 = v97;
  v96 = 0x2100000000;
  v48 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v92, (const llvm::APInt *)&v93, (llvm *)5, 0, 1, 0);
  v50 = v49;
  v51 = v96;
  if (v96 >= HIDWORD(v96))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)v97, v96 + 1, 16);
    v51 = v96;
  }
  v52 = (char *)v95 + 16 * v51;
  *v52 = v48;
  v52[1] = v50;
  v53 = v96 + 1;
  LODWORD(v96) = v96 + 1;
  if (v89)
  {
    v57 = 0;
    v58 = v10 & 0xFFFFFFFF00000000 | v47;
    do
    {
      v59 = v6;
      v60 = *(_QWORD *)(a3 + 16);
      v62 = v87;
      v61 = v88;
      v63 = sub_1C6366AB4(v60, v57, (const llvm::APInt *)&v93, (llvm *)5, 0, 0, 0);
      v66 = 0;
      v67 = *(_QWORD *)(v60 + 832);
      if (v67)
        v66 = *(_WORD *)(v67 + 8);
      v68 = sub_1C5D56C70(v60, 148, (const llvm::APInt *)&v93, v62, v61, (uint64_t)v45, v58, v65, (uint64_t)v63, v64, v66);
      v70 = v69;
      v71 = v96;
      if (v96 >= (unint64_t)HIDWORD(v96))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)v97, v96 + 1, 16);
        v71 = v96;
      }
      v6 = v59;
      v72 = (uint64_t **)((char *)v95 + 16 * v71);
      *v72 = v68;
      v72[1] = v70;
      LODWORD(v96) = v96 + 1;
      v73 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), (v57 + HIDWORD(v92)), (const llvm::APInt *)&v93, (llvm *)5, 0, 1, 0);
      v75 = v74;
      v76 = v96;
      if (v96 >= (unint64_t)HIDWORD(v96))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)v97, v96 + 1, 16);
        v76 = v96;
      }
      v77 = (char *)v95 + 16 * v76;
      *v77 = v73;
      v77[1] = v75;
      v53 = v96 + 1;
      LODWORD(v96) = v96 + 1;
      ++v57;
    }
    while (v57 < v89);
  }
  v54 = sub_1C636E56C(*(_QWORD *)(a3 + 16), 18, (uint64_t)&v93, (llvm *)0xAE, 0, (uint64_t *)v95, v53);
  v56 = v98;
  v98[2] = v54;
  v56[6] = 0;
  if (v95 != v97)
    free(v95);
  v40 = sub_1C5D5C710(*(_QWORD *)(a3 + 16), v86, (uint64_t)&v93, v39, 1, v98, v99, v55, (uint64_t)v6, v81, v79);
  if (v98 != v100)
    free(v98);
  if (v93)
    llvm::MetadataTracking::untrack((uint64_t)&v93, v93);
  return v40;
}

_QWORD *sub_1C48295F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  llvm *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  char *v78;
  uint64_t v79;
  llvm::LLVMContext *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t *v86;
  unsigned int v87;
  unsigned int v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  _QWORD *v93;
  unsigned int v94;
  unint64_t i;
  uint64_t v96;
  uint64_t v97;
  llvm *v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t **v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  __int16 v128;
  uint64_t *v129;
  unint64_t *v130;
  int v131;
  _QWORD *v132;
  void *v133;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  llvm::LLVMContext *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v144[8];
  uint64_t v145;
  char v146;
  uint64_t v147;
  int v148;
  llvm *v149;
  uint64_t v150;
  unsigned int v151;
  llvm *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 *v155;
  int v156;
  unsigned __int8 *v157;
  int v158;
  void *v159;
  uint64_t v160;
  _BYTE v161[528];
  unint64_t *v162;
  uint64_t v163;
  _QWORD v164[18];

  v164[16] = *MEMORY[0x1E0C80C00];
  v139 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v5 = *(unsigned __int16 *)(a2 + 24);
  v6 = *(unsigned __int8 **)(a2 + 64);
  v157 = v6;
  v7 = v5;
  if (v6)
  {
    llvm::MetadataTracking::track((uint64_t)&v157, v6, 2);
    v7 = *(unsigned __int16 *)(a2 + 24);
  }
  v158 = *(_DWORD *)(a2 + 60);
  v9 = *(llvm **)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  v135 = v5;
  if (v7 == 254)
  {
    v10 = *(uint64_t **)(a2 + 32);
    v11 = *((_DWORD *)v10 + 2);
    v141 = *((unsigned int *)v10 + 12);
    v142 = v10[5];
    v12 = v10[10];
    v13 = *((_DWORD *)v10 + 22);
    v136 = *v10;
    if ((*(_WORD *)(a2 + 26) & 0x400) == 0)
      goto LABEL_24;
    v14 = *(_QWORD *)(a2 + 80);
    if (*(_QWORD *)(a2 + 80))
    {
      if ((v14 - 120) < 0x20 || (v14 - 2) < 6 || (v14 - 15) < 0x3C)
      {
LABEL_19:
        v25 = *(_QWORD *)(a3 + 16);
        v26 = *(_QWORD *)(v25 + 832);
        if (v26)
          v27 = *(_WORD *)(v26 + 8);
        else
          v27 = 0;
        v23 = sub_1C5D52060(v25, 201, (const llvm::APInt *)&v157, v9, v8, v142, v141, v27);
LABEL_23:
        v141 = v24;
        v142 = (uint64_t)v23;
        goto LABEL_24;
      }
    }
    else
    {
      if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
        v15 = *(unsigned __int8 *)(**(_QWORD **)(v8 + 16) + 8);
      else
        v15 = *(_DWORD *)(v8 + 8);
      if (v15 == 13)
        goto LABEL_19;
    }
    v17 = *(_QWORD *)(a3 + 16);
    v18 = sub_1C6366AB4(v17, 0, (const llvm::APInt *)&v157, (llvm *)5, 0, 0, 0);
    v21 = 0;
    v22 = *(_QWORD *)(v17 + 832);
    if (v22)
      v21 = *(_WORD *)(v22 + 8);
    v23 = sub_1C5D56C70(v17, 212, (const llvm::APInt *)&v157, v9, v8, v142, v141, v20, (uint64_t)v18, v19, v21);
    goto LABEL_23;
  }
  if (v5 == 291)
  {
    v16 = *(uint64_t **)(a2 + 32);
    v136 = *v16;
    v11 = *((_DWORD *)v16 + 2);
    v141 = *((unsigned int *)v16 + 22);
    v142 = v16[10];
    v12 = v16[5];
    v13 = *((_DWORD *)v16 + 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v141 = 0;
    v142 = 0;
    v136 = 0;
    v11 = 0;
  }
LABEL_24:
  v137 = v8;
  v28 = v13;
  v29 = *(_QWORD *)(a2 + 96);
  v31 = *(_QWORD *)(v29 + 24);
  v30 = (unint64_t *)(v29 + 24);
  if ((v31 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v33 = (unint64_t)(sub_1C4825F50(v30) + 7) >> 3;
    if ((_DWORD)v32 == 1)
  }
  else
  {
    v33 = -1;
  }
  v34 = *(_QWORD *)(a3 + 16);
  v35 = sub_1C6366AB4(v34, 0, (const llvm::APInt *)&v157, (llvm *)5, 0, 0, 0);
  v38 = 0;
  v39 = *(_QWORD *)(v34 + 832);
  if (v39)
    v38 = *(_WORD *)(v39 + 8);
  v40 = sub_1C5D56C70(v34, 53, (const llvm::APInt *)&v157, (llvm *)5, 0, v12, v28, v37, (uint64_t)v35, v36, v38);
  v42 = v41;
  v43 = *(_QWORD *)(a3 + 16);
  v44 = sub_1C6366AB4(v43, 1, (const llvm::APInt *)&v157, (llvm *)5, 0, 0, 0);
  v47 = 0;
  v48 = *(_QWORD *)(v43 + 832);
  if (v48)
    v47 = *(_WORD *)(v48 + 8);
  v49 = sub_1C5D56C70(v43, 53, (const llvm::APInt *)&v157, (llvm *)5, 0, v12, v28, v46, (uint64_t)v44, v45, v47);
  v51 = v50;
  v52 = *(_QWORD *)(a3 + 16);
  v155 = v157;
  if (v157)
    llvm::MetadataTracking::track((uint64_t)&v155, v157, 2);
  v138 = (uint64_t)v9;
  v140 = v33;
  v156 = v158;
  v53 = sub_1C612FAAC(a1, (uint64_t)v40, v42, (uint64_t)v49, v51, v52, (uint64_t)&v155);
  v55 = v54;
  if (v155)
    llvm::MetadataTracking::untrack((uint64_t)&v155, v155);
  v56 = v11;
  v57 = *(_QWORD *)(a3 + 16);
  v58 = *(uint64_t **)(v57 + 40);
  v59 = *(_QWORD *)(a1 + 184296);
  v60 = *v58;
  LODWORD(v159) = 0;
  if (sub_1C4785D88(v59, v60, "StoreCMode", &v159))
    v61 = v159;
  else
    v61 = 2;
  v62 = sub_1C6366AB4(v57, v61, (const llvm::APInt *)&v157, (llvm *)5, 0, 1, 0);
  v64 = v63;
  if (v135 == 291)
  {
    v65 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v157, (llvm *)5, 0, 1, 0);
    v64 = v64 & 0xFFFFFFFF00000000 | v66;
  }
  else
  {
    v65 = v62;
  }
  v67 = *(_QWORD *)(a3 + 16);
  v68 = *(_QWORD *)(a1 + 184296);
  v69 = *v58;
  LODWORD(v159) = 0;
  if (sub_1C4785D88(v68, v69, "StoreSLCMode", &v159))
    v70 = v159;
  else
    v70 = 1;
  v71 = sub_1C6366AB4(v67, v70, (const llvm::APInt *)&v157, (llvm *)5, 0, 1, 0);
  v73 = v72;
  v74 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v157, (llvm *)5, 0, 1, 0);
  v162 = v164;
  v164[0] = v142;
  v164[1] = v141;
  v164[2] = v53;
  v164[3] = v55;
  v164[4] = v65;
  v164[5] = v64;
  v164[6] = v71;
  v164[7] = v73;
  v75 = *(_QWORD *)(a3 + 16);
  v164[8] = v74;
  v164[9] = v76;
  v163 = 0x800000005;
  sub_1C4825258(a1, (uint64_t)&v162, v75);
  v77 = v163;
  if (v163 >= HIDWORD(v163))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, (uint64_t)v164, v163 + 1, 16);
    v77 = v163;
  }
  v78 = (char *)&v162[2 * v77];
  *(_QWORD *)v78 = v136;
  *((_QWORD *)v78 + 1) = v56;
  LODWORD(v163) = v163 + 1;
  v144[0] = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v148 = -1;
  LOBYTE(v149) = 0;
  v150 = 0;
  v151 = -1;
  LOBYTE(v152) = 0;
  v153 = 0;
  v154 = -1;
  v79 = v140;
  if (v140 <= 23)
    __asm { BR              X10 }
  if (v140 <= 31)
  {
    v80 = v139;
    if (v140 == 24)
      v81 = 4;
    else
      v81 = 3;
  }
  else
  {
    v80 = v139;
    if (v140 == 32)
      v81 = 2;
    else
      v81 = v140 == 48;
  }
  sub_1C4826644(v80, (uint64_t)v144, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), v81, v138, v137, (uint64_t)&unk_1ED7E9E18);
  v82 = sub_1C636D7B0((llvm *)1, 0);
  v83 = *(_QWORD *)(a3 + 16);
  v84 = *(_QWORD *)(v83 + 832);
  if (v84)
    v85 = *(_WORD *)(v84 + 8);
  else
    v85 = 0;
  v86 = sub_1C5D52060(v83, 216, (const llvm::APInt *)&v157, v152, v153, v142, v141, v85);
  v88 = v87;
  v159 = v161;
  v160 = 0x2100000000;
  v89 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v154, (const llvm::APInt *)&v157, (llvm *)5, 0, 1, 0);
  v91 = v90;
  v92 = v160;
  if (v160 >= HIDWORD(v160))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, (uint64_t)v161, v160 + 1, 16);
    v92 = v160;
  }
  v93 = (char *)v159 + 16 * v92;
  *v93 = v89;
  v93[1] = v91;
  v94 = v160 + 1;
  LODWORD(v160) = v160 + 1;
  if (v151)
  {
    for (i = 0; i < v151; ++i)
    {
      v96 = *(_QWORD *)(a3 + 16);
      v98 = v149;
      v97 = v150;
      v99 = sub_1C6366AB4(v96, i, (const llvm::APInt *)&v157, (llvm *)5, 0, 0, 0);
      v102 = 0;
      v103 = *(_QWORD *)(v96 + 832);
      if (v103)
        v102 = *(_WORD *)(v103 + 8);
      v104 = sub_1C5D56C70(v96, 148, (const llvm::APInt *)&v157, v98, v97, (uint64_t)v86, v88, v101, (uint64_t)v99, v100, v102);
      v106 = v105;
      v107 = v160;
      if (v160 >= (unint64_t)HIDWORD(v160))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, (uint64_t)v161, v160 + 1, 16);
        v107 = v160;
      }
      v108 = (uint64_t **)((char *)v159 + 16 * v107);
      *v108 = v104;
      v108[1] = v106;
      LODWORD(v160) = v160 + 1;
      v109 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), (i + HIDWORD(v154)), (const llvm::APInt *)&v157, (llvm *)5, 0, 1, 0);
      v111 = v110;
      v112 = v160;
      if (v160 >= (unint64_t)HIDWORD(v160))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, (uint64_t)v161, v160 + 1, 16);
        v112 = v160;
      }
      v113 = (char *)v159 + 16 * v112;
      *v113 = v109;
      v113[1] = v111;
      v94 = v160 + 1;
      LODWORD(v160) = v160 + 1;
    }
    v79 = v140;
  }
  if (v79 == 6)
  {
    v114 = sub_1C61312D0(*(_QWORD *)(a3 + 16), (llvm *)9, 0);
    v116 = v115;
    v117 = v160;
    if (v160 >= HIDWORD(v160))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, (uint64_t)v161, v160 + 1, 16);
      v117 = v160;
    }
    v118 = (char *)v159 + 16 * v117;
    *v118 = v114;
    v118[1] = v116;
    LODWORD(v160) = v160 + 1;
    v119 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 4, (const llvm::APInt *)&v157, (llvm *)5, 0, 1, 0);
    v121 = v120;
    v122 = v160;
    if (v160 >= HIDWORD(v160))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, (uint64_t)v161, v160 + 1, 16);
      v122 = v160;
    }
    v123 = (char *)v159 + 16 * v122;
    *v123 = v119;
    v123[1] = v121;
    v94 = v160 + 1;
    LODWORD(v160) = v160 + 1;
  }
  v124 = sub_1C636E56C(*(_QWORD *)(a3 + 16), 18, (uint64_t)&v157, (llvm *)0xAE, 0, (uint64_t *)v159, v94);
  v125 = v162;
  *v162 = (unint64_t)v124;
  *((_DWORD *)v125 + 2) = 0;
  if (v159 != v161)
    free(v159);
  if (v79 == 1)
  {
    v126 = *(_QWORD *)(a3 + 16);
    v127 = *(_QWORD *)(v126 + 832);
    if (v127)
      v128 = *(_WORD *)(v127 + 8);
    else
      v128 = 0;
    v129 = sub_1C5D52060(v126, 200, (const llvm::APInt *)&v157, (llvm *)4, 0, *v162, v162[1], v128);
    v130 = v162;
    *v162 = (unint64_t)v129;
    *((_DWORD *)v130 + 2) = v131;
  }
  v132 = sub_1C5D61678(*(_QWORD *)(a3 + 16), v148, (uint64_t)&v157, v82, 1, (uint64_t *)v162, v163);
  v133 = *(void **)(a3 + 16);
  v159 = *(void **)(a2 + 96);
  sub_1C636E10C(v133, (uint64_t)v132, &v159, 1);
  if (v162 != v164)
    free(v162);
  if (v157)
    llvm::MetadataTracking::untrack((uint64_t)&v157, v157);
  return v132;
}

_QWORD *sub_1C4829FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::LLVMContext *v5;
  unsigned __int8 *v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  llvm *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  const char *v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD *v46;
  void *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int v59;
  uint64_t *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  uint64_t *v66;
  unsigned int v67;
  unsigned int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  _QWORD *v73;
  unsigned int v74;
  unint64_t i;
  uint64_t v76;
  uint64_t v77;
  llvm *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t **v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t *v95;
  _QWORD *v96;
  void *v97;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v103;
  uint64_t v104;
  char v105[8];
  uint64_t v106;
  char v107;
  uint64_t v108;
  int v109;
  llvm *v110;
  uint64_t v111;
  unsigned int v112;
  llvm *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  int v117;
  unsigned __int8 *v118;
  int v119;
  void *v120;
  uint64_t v121;
  _BYTE v122[528];
  uint64_t *v123;
  uint64_t v124;
  _QWORD v125[18];

  v125[16] = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v6 = *(unsigned __int8 **)(a2 + 64);
  v118 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v118, v6, 2);
  v119 = *(_DWORD *)(a2 + 60);
  v7 = *(llvm **)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 32);
  v103 = *(_QWORD *)v9;
  v104 = *(unsigned int *)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 40);
  v11 = *(unsigned int *)(v9 + 48);
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(unsigned int *)(v9 + 88);
  if (*(_WORD *)(a2 + 24) == 254 && (*(_WORD *)(a2 + 26) & 0x400) != 0)
  {
    v14 = *(_QWORD *)(a2 + 80);
    if (*(_QWORD *)(a2 + 80))
    {
      if ((v14 - 120) < 0x20 || (v14 - 2) < 6 || (v14 - 15) < 0x3C)
      {
LABEL_16:
        v26 = *(_QWORD *)(a3 + 16);
        v27 = *(_QWORD *)(v26 + 832);
        if (v27)
          v28 = *(_WORD *)(v27 + 8);
        else
          v28 = 0;
        v24 = sub_1C5D52060(v26, 201, (const llvm::APInt *)&v118, v7, v8, v10, v11, v28);
LABEL_20:
        v10 = (uint64_t)v24;
        v11 = v25;
        goto LABEL_21;
      }
    }
    else
    {
      if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
        v15 = *(unsigned __int8 *)(**(_QWORD **)(v8 + 16) + 8);
      else
        v15 = *(_DWORD *)(v8 + 8);
      if (v15 == 13)
        goto LABEL_16;
    }
    v16 = *(llvm **)(a2 + 80);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = sub_1C6366AB4(v17, 0, (const llvm::APInt *)&v118, (llvm *)5, 0, 0, 0);
    v21 = 0;
    v22 = *(_QWORD *)(v17 + 832);
    if (v22)
      v21 = *(_WORD *)(v22 + 8);
    v99 = (uint64_t)v18;
    v23 = v17;
    v7 = v16;
    v24 = sub_1C5D56C70(v23, 212, (const llvm::APInt *)&v118, v16, v8, v10, v11, v20, v99, v19, v21);
    goto LABEL_20;
  }
LABEL_21:
  v29 = *(_QWORD *)(a2 + 96);
  v31 = *(_QWORD *)(v29 + 24);
  v30 = (unint64_t *)(v29 + 24);
  if ((v31 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v33 = (unint64_t)(sub_1C4825F50(v30) + 7) >> 3;
    if ((_DWORD)v32 == 1)
  }
  else
  {
    v33 = -1;
  }
  v34 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v118, (llvm *)5, 0, 1, 0);
  v100 = v40;
  v101 = v34;
  v41 = *(unsigned __int8 **)(v12 + 64);
  v116 = v41;
  if (v41)
    llvm::MetadataTracking::track((uint64_t)&v116, v41, 2);
  v117 = *(_DWORD *)(v12 + 60);
  v42 = sub_1C4827A90(v12, v13, *(_QWORD *)(a3 + 16), v35, v36, v37, v38, v39);
  v44 = *((unsigned __int16 *)v42 + 12);
  if (v44 == 35 || v44 == 11)
    v46 = v42;
  else
    v46 = 0;
  v123 = v125;
  v125[0] = v10;
  v125[1] = v11;
  v124 = 0x800000001;
  if (v46)
  {
    v50 = v46[10];
    v51 = (unsigned int *)(v50 + 24);
    if (*(_DWORD *)(v50 + 32) >= 0x41u)
      v51 = *(unsigned int **)v51;
    v52 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), *v51, (const llvm::APInt *)&v118, (llvm *)5, 0, 1, 0);
    v54 = v53;
    v55 = v124;
    if (v124 >= HIDWORD(v124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123, (uint64_t)v125, v124 + 1, 16);
      v55 = v124;
    }
    v56 = &v123[2 * v55];
    *v56 = (uint64_t)v52;
    v56[1] = v54;
    v47 = &unk_1ED7E9F1C;
    v48 = v124;
    v49 = HIDWORD(v124);
  }
  else
  {
    v125[2] = v42;
    v125[3] = v43;
    v47 = &unk_1ED7E9E18;
    v48 = 1;
    v49 = 8;
  }
  v57 = (v48 + 1);
  LODWORD(v124) = v57;
  if (v57 >= v49)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123, (uint64_t)v125, v57 + 1, 16);
    LODWORD(v57) = v124;
  }
  v58 = &v123[2 * v57];
  *v58 = (uint64_t)v101;
  v58[1] = v100;
  LODWORD(v124) = v124 + 1;
  sub_1C4825258(a1, (uint64_t)&v123, *(_QWORD *)(a3 + 16));
  v59 = v124;
  if (v124 >= HIDWORD(v124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123, (uint64_t)v125, v124 + 1, 16);
    v59 = v124;
  }
  v60 = &v123[2 * v59];
  *v60 = v103;
  v60[1] = v104;
  LODWORD(v124) = v124 + 1;
  v105[0] = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = -1;
  LOBYTE(v110) = 0;
  v111 = 0;
  v112 = -1;
  LOBYTE(v113) = 0;
  v114 = 0;
  v115 = -1;
  if (v33 <= 23)
    __asm { BR              X10 }
  if (v33 <= 31)
  {
    if (v33 == 24)
      v61 = 4;
    else
      v61 = 3;
  }
  else if (v33 == 32)
  {
    v61 = 2;
  }
  else
  {
    v61 = v33 == 48;
  }
  sub_1C4826644(v5, (uint64_t)v105, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), v61, (uint64_t)v7, v8, (uint64_t)v47);
  v62 = sub_1C636D7B0((llvm *)1, 0);
  v63 = *(_QWORD *)(a3 + 16);
  v64 = *(_QWORD *)(v63 + 832);
  if (v64)
    v65 = *(_WORD *)(v64 + 8);
  else
    v65 = 0;
  v66 = sub_1C5D52060(v63, 216, (const llvm::APInt *)&v118, v113, v114, v10, v11, v65);
  v68 = v67;
  v120 = v122;
  v121 = 0x2100000000;
  v69 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v115, (const llvm::APInt *)&v118, (llvm *)5, 0, 1, 0);
  v71 = v70;
  v72 = v121;
  if (v121 >= HIDWORD(v121))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v121 + 1, 16);
    v72 = v121;
  }
  v73 = (char *)v120 + 16 * v72;
  *v73 = v69;
  v73[1] = v71;
  v74 = v121 + 1;
  LODWORD(v121) = v121 + 1;
  if (v112)
  {
    for (i = 0; i < v112; ++i)
    {
      v76 = *(_QWORD *)(a3 + 16);
      v78 = v110;
      v77 = v111;
      v79 = sub_1C6366AB4(v76, i, (const llvm::APInt *)&v118, (llvm *)5, 0, 0, 0);
      v82 = 0;
      v83 = *(_QWORD *)(v76 + 832);
      if (v83)
        v82 = *(_WORD *)(v83 + 8);
      v84 = sub_1C5D56C70(v76, 148, (const llvm::APInt *)&v118, v78, v77, (uint64_t)v66, v68, v81, (uint64_t)v79, v80, v82);
      v86 = v85;
      v87 = v121;
      if (v121 >= (unint64_t)HIDWORD(v121))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v121 + 1, 16);
        v87 = v121;
      }
      v88 = (uint64_t **)((char *)v120 + 16 * v87);
      *v88 = v84;
      v88[1] = v86;
      LODWORD(v121) = v121 + 1;
      v89 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), (i + HIDWORD(v115)), (const llvm::APInt *)&v118, (llvm *)5, 0, 1, 0);
      v91 = v90;
      v92 = v121;
      if (v121 >= (unint64_t)HIDWORD(v121))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v121 + 1, 16);
        v92 = v121;
      }
      v93 = (char *)v120 + 16 * v92;
      *v93 = v89;
      v93[1] = v91;
      v74 = v121 + 1;
      LODWORD(v121) = v121 + 1;
    }
  }
  v94 = sub_1C636E56C(*(_QWORD *)(a3 + 16), 18, (uint64_t)&v118, (llvm *)0xAE, 0, (uint64_t *)v120, v74);
  v95 = v123;
  *v123 = (uint64_t)v94;
  *((_DWORD *)v95 + 2) = 0;
  if (v120 != v122)
    free(v120);
  v96 = sub_1C5D61678(*(_QWORD *)(a3 + 16), v109, (uint64_t)&v118, v62, 1, v123, v124);
  v97 = *(void **)(a3 + 16);
  v120 = *(void **)(a2 + 96);
  sub_1C636E10C(v97, (uint64_t)v96, &v120, 1);
  if (v123 != v125)
    free(v123);
  if (v116)
    llvm::MetadataTracking::untrack((uint64_t)&v116, v116);
  if (v118)
    llvm::MetadataTracking::untrack((uint64_t)&v118, v118);
  return v96;
}

_QWORD *sub_1C482A7E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  int64_t v51;
  llvm::LLVMContext *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t *v58;
  unsigned int v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  _QWORD *v65;
  unsigned int v66;
  unint64_t i;
  uint64_t v68;
  uint64_t v69;
  llvm *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t **v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t *v87;
  _QWORD *v88;
  void *v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  llvm::LLVMContext *v94;
  int64_t v95;
  char v96[8];
  uint64_t v97;
  char v98;
  uint64_t v99;
  int v100;
  llvm *v101;
  uint64_t v102;
  unsigned int v103;
  llvm *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  int v108;
  unsigned __int8 *v109;
  int v110;
  void *v111;
  uint64_t v112;
  _BYTE v113[528];
  uint64_t *v114;
  uint64_t v115;
  _QWORD v116[18];

  v116[16] = *MEMORY[0x1E0C80C00];
  v94 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v6 = *(unsigned __int8 **)(a2 + 64);
  v109 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v109, v6, 2);
  v110 = *(_DWORD *)(a2 + 60);
  v7 = *(llvm **)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  v92 = a1;
  if (*(_WORD *)(a2 + 24) != 254)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v12 = 0;
    v91 = 0;
    v10 = 0;
    goto LABEL_23;
  }
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_DWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 40);
  v12 = *(unsigned int *)(v9 + 48);
  v13 = *(_QWORD *)(v9 + 80);
  v14 = *(_DWORD *)(v9 + 88);
  v91 = *(_QWORD *)v9;
  if ((*(_WORD *)(a2 + 26) & 0x400) == 0)
  {
    v15 = *(_QWORD *)(v9 + 40);
    goto LABEL_23;
  }
  v16 = *(_QWORD *)(a2 + 80);
  if (!*(_QWORD *)(a2 + 80))
  {
    if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
      v17 = *(unsigned __int8 *)(**(_QWORD **)(v8 + 16) + 8);
    else
      v17 = *(_DWORD *)(v8 + 8);
    if (v17 == 13)
      goto LABEL_18;
LABEL_15:
    v18 = v12;
    v19 = v11;
    v20 = *(_QWORD *)(a3 + 16);
    v21 = sub_1C6366AB4(v20, 0, (const llvm::APInt *)&v109, (llvm *)5, 0, 0, 0);
    v24 = 0;
    v25 = *(_QWORD *)(v20 + 832);
    if (v25)
      v24 = *(_WORD *)(v25 + 8);
    v26 = sub_1C5D56C70(v20, 212, (const llvm::APInt *)&v109, v7, v8, v19, v18, v23, (uint64_t)v21, v22, v24);
    goto LABEL_22;
  }
  if ((v16 - 120) >= 0x20 && (v16 - 2) >= 6 && (v16 - 15) >= 0x3C)
    goto LABEL_15;
LABEL_18:
  v28 = *(_QWORD *)(a3 + 16);
  v29 = *(_QWORD *)(v28 + 832);
  if (v29)
    v30 = *(_WORD *)(v29 + 8);
  else
    v30 = 0;
  v26 = sub_1C5D52060(v28, 201, (const llvm::APInt *)&v109, v7, v8, v11, v12, v30);
LABEL_22:
  v15 = (uint64_t)v26;
  v12 = v27;
LABEL_23:
  v31 = v14;
  v32 = *(_QWORD *)(a2 + 96);
  v34 = *(_QWORD *)(v32 + 24);
  v33 = (unint64_t *)(v32 + 24);
  v93 = v8;
  if ((v34 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v95 = (unint64_t)(sub_1C4825F50(v33) + 7) >> 3;
    if ((_DWORD)v35 == 1)
  }
  else
  {
    v95 = -1;
  }
  v36 = v10;
  v42 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v109, (llvm *)5, 0, 1, 0);
  v44 = v43;
  v45 = *(unsigned __int8 **)(v13 + 64);
  v107 = v45;
  if (v45)
    llvm::MetadataTracking::track((uint64_t)&v107, v45, 2);
  v108 = *(_DWORD *)(v13 + 60);
  v46 = sub_1C4827A90(v13, v31, *(_QWORD *)(a3 + 16), v37, v38, v39, v40, v41);
  v114 = v116;
  v116[0] = v15;
  v116[1] = v12;
  v116[2] = v46;
  v116[3] = v47;
  v48 = *(_QWORD *)(a3 + 16);
  v116[4] = v42;
  v116[5] = v44;
  v115 = 0x800000003;
  sub_1C4825258(v92, (uint64_t)&v114, v48);
  v49 = v115;
  if (v115 >= HIDWORD(v115))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v116, v115 + 1, 16);
    v49 = v115;
  }
  v50 = &v114[2 * v49];
  *v50 = v91;
  v50[1] = v36;
  LODWORD(v115) = v115 + 1;
  v96[0] = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = -1;
  LOBYTE(v101) = 0;
  v102 = 0;
  v103 = -1;
  LOBYTE(v104) = 0;
  v105 = 0;
  v106 = -1;
  v51 = v95;
  if (v95 <= 23)
    __asm { BR              X10 }
  if (v95 <= 31)
  {
    v52 = v94;
    if (v95 == 24)
      v53 = 4;
    else
      v53 = 3;
  }
  else
  {
    v52 = v94;
    if (v95 == 32)
      v53 = 2;
    else
      v53 = v95 == 48;
  }
  sub_1C4826644(v52, (uint64_t)v96, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), v53, (uint64_t)v7, v93, (uint64_t)&unk_1ED7E9E18);
  v54 = sub_1C636D7B0((llvm *)1, 0);
  v55 = *(_QWORD *)(a3 + 16);
  v56 = *(_QWORD *)(v55 + 832);
  if (v56)
    v57 = *(_WORD *)(v56 + 8);
  else
    v57 = 0;
  v58 = sub_1C5D52060(v55, 216, (const llvm::APInt *)&v109, v104, v105, v15, v12, v57);
  v60 = v59;
  v111 = v113;
  v112 = 0x2100000000;
  v61 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v106, (const llvm::APInt *)&v109, (llvm *)5, 0, 1, 0);
  v63 = v62;
  v64 = v112;
  if (v112 >= HIDWORD(v112))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (uint64_t)v113, v112 + 1, 16);
    v64 = v112;
  }
  v65 = (char *)v111 + 16 * v64;
  *v65 = v61;
  v65[1] = v63;
  v66 = v112 + 1;
  LODWORD(v112) = v112 + 1;
  if (v103)
  {
    for (i = 0; i < v103; ++i)
    {
      v68 = *(_QWORD *)(a3 + 16);
      v70 = v101;
      v69 = v102;
      v71 = sub_1C6366AB4(v68, i, (const llvm::APInt *)&v109, (llvm *)5, 0, 0, 0);
      v74 = 0;
      v75 = *(_QWORD *)(v68 + 832);
      if (v75)
        v74 = *(_WORD *)(v75 + 8);
      v76 = sub_1C5D56C70(v68, 148, (const llvm::APInt *)&v109, v70, v69, (uint64_t)v58, v60, v73, (uint64_t)v71, v72, v74);
      v78 = v77;
      v79 = v112;
      if (v112 >= (unint64_t)HIDWORD(v112))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (uint64_t)v113, v112 + 1, 16);
        v79 = v112;
      }
      v80 = (uint64_t **)((char *)v111 + 16 * v79);
      *v80 = v76;
      v80[1] = v78;
      LODWORD(v112) = v112 + 1;
      v81 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), (i + HIDWORD(v106)), (const llvm::APInt *)&v109, (llvm *)5, 0, 1, 0);
      v83 = v82;
      v84 = v112;
      if (v112 >= (unint64_t)HIDWORD(v112))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (uint64_t)v113, v112 + 1, 16);
        v84 = v112;
      }
      v85 = (char *)v111 + 16 * v84;
      *v85 = v81;
      v85[1] = v83;
      v66 = v112 + 1;
      LODWORD(v112) = v112 + 1;
    }
    v51 = v95;
  }
  v86 = sub_1C636E56C(*(_QWORD *)(a3 + 16), 18, (uint64_t)&v109, (llvm *)0xAE, 0, (uint64_t *)v111, v66);
  v87 = v114;
  *v114 = (uint64_t)v86;
  *((_DWORD *)v87 + 2) = 0;
  if (v111 != v113)
    free(v111);
  if (v51 == 1)
    llvm::report_fatal_error((llvm *)"Store of byte to shared memory is unsupported", (const char *)1);
  v88 = sub_1C5D61678(*(_QWORD *)(a3 + 16), v100, (uint64_t)&v109, v54, 1, v114, v115);
  v89 = *(void **)(a3 + 16);
  v111 = *(void **)(a2 + 96);
  sub_1C636E10C(v89, (uint64_t)v88, &v111, 1);
  if (v114 != v116)
    free(v114);
  if (v107)
    llvm::MetadataTracking::untrack((uint64_t)&v107, v107);
  if (v109)
    llvm::MetadataTracking::untrack((uint64_t)&v109, v109);
  return v88;
}

uint64_t *sub_1C482AEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::LLVMContext *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm *v10;
  const char *v11;
  unint64_t v12;
  __int128 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __int16 v20;
  uint64_t *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 **v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  unsigned int i;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  uint64_t *v64;
  unsigned int v66;
  __int128 v68;
  llvm *v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  llvm *v78;
  uint64_t v79;
  unsigned int v80;
  llvm *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v85;
  void *v86;
  uint64_t v87;
  _BYTE v88[256];
  uint64_t *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(v6 + 8);
  v69 = *(llvm **)v6;
  v9 = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  v10 = *(llvm **)(a2 + 80);
  v66 = *(unsigned __int16 *)(a2 + 26);
  if ((*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v12 = (unint64_t)(sub_1C4825F50((unint64_t *)(v8 + 24)) + 7) >> 3;
    if ((_DWORD)v11 == 1)
  }
  else
  {
    v12 = -1;
  }
  v70 = v7;
  v13 = *(__int128 **)(a2 + 32);
  v15 = *((_QWORD *)v13 + 5);
  v14 = *((_QWORD *)v13 + 6);
  v68 = *v13;
  v16 = *(unsigned __int8 **)(a2 + 64);
  v84 = v16;
  if (v16)
    llvm::MetadataTracking::track((uint64_t)&v84, v16, 2);
  v85 = *(_DWORD *)(a2 + 60);
  v17 = *(_QWORD *)(a3 + 16);
  v18 = *(void **)(v15 + 64);
  v86 = v18;
  if (v18)
    llvm::MetadataTracking::track((uint64_t)&v86, (unsigned __int8 *)v18, 2);
  LODWORD(v87) = *(_DWORD *)(v15 + 60);
  v19 = *(_QWORD *)(v17 + 832);
  if (v19)
    v20 = *(_WORD *)(v19 + 8);
  else
    v20 = 0;
  v21 = sub_1C5D52060(v17, 201, (const llvm::APInt *)&v86, (llvm *)5, 0, v15, v14, v20);
  v23 = v14 & 0xFFFFFFFF00000000 | v22;
  if (v86)
    llvm::MetadataTracking::untrack((uint64_t)&v86, (unsigned __int8 *)v86);
  v89 = (uint64_t *)&v91;
  v91 = v68;
  v92 = v21;
  v93 = v23;
  v90 = 0x800000002;
  LOBYTE(v73) = 0;
  v74 = 0;
  LOBYTE(v75) = 0;
  v76 = 0;
  v77 = -1;
  LOBYTE(v78) = 0;
  v79 = 0;
  v80 = -1;
  LOBYTE(v81) = 0;
  v82 = 0;
  v83 = -1;
  sub_1C482B3A4(v5, (uint64_t)&v73, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), dword_1C642B670[v12 - 1], (uint64_t)v10, v9, (uint64_t)&unk_1ED7EA020);
  v24 = sub_1C636A8B4(*(_QWORD *)(a3 + 16), v73, v74, v75, v76);
  v28 = sub_1C5D5C710(*(_QWORD *)(a3 + 16), v77, (uint64_t)&v84, v24, v25, v89, v90, v26, (uint64_t)v10, v9, v8);
  v29 = v27;
  if (v12 < 5)
  {
    v32 = 0;
    v33 = *(_QWORD *)(a3 + 16);
    if (v10 == 2)
      v34 = 2;
    else
      v34 = (uint64_t)v78;
    if (v10 == 2)
      v35 = 0;
    else
      v35 = v79;
    v36 = *(_QWORD *)(v33 + 832);
    if (v36)
      v32 = *(_WORD *)(v36 + 8);
    v38 = sub_1C5D52060(v33, 201, (const llvm::APInt *)&v84, (llvm *)v34, v35, (uint64_t)v28, v27, v32);
    v39 = *(_QWORD *)(a3 + 16);
    v40 = *(_QWORD *)(v39 + 832);
    if (v40)
      v41 = *(_WORD *)(v40 + 8);
    else
      v41 = 0;
    v48 = sub_1C5D52060(v39, 216, (const llvm::APInt *)&v84, v10, v9, (uint64_t)v38, v37, v41);
    v50 = v49;
    v71 = v84;
    if (v84)
      llvm::MetadataTracking::track((uint64_t)&v71, v84, 2);
    v72 = v85;
    v52 = sub_1C6131488(a1, (uint64_t)v48, v50, v69, v70, (v66 >> 10) & 3, (const llvm::APInt *)&v71, a3);
    v54 = v53;
    if (v71)
      llvm::MetadataTracking::untrack((uint64_t)&v71, v71);
  }
  else
  {
    v86 = v88;
    v87 = 0x1000000000;
    if (v80)
    {
      for (i = 0; i < v80; ++i)
      {
        v43 = sub_1C636E638(*(_QWORD *)(a3 + 16), i + HIDWORD(v83), (const llvm::APInt *)&v84, v78, v79, (uint64_t)v28, v29);
        v45 = v44;
        v46 = v87;
        if (v87 >= (unint64_t)HIDWORD(v87))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v87 + 1, 16);
          v46 = v87;
        }
        v47 = (char *)v86 + 16 * v46;
        *v47 = v43;
        v47[1] = v45;
        v30 = (v87 + 1);
        LODWORD(v87) = v87 + 1;
      }
      v31 = (uint64_t *)v86;
    }
    else
    {
      v30 = 0;
      v31 = (uint64_t *)v88;
    }
    v55 = *(_QWORD *)(a3 + 16);
    v56 = *(_QWORD *)(v55 + 832);
    if (v56)
      v57 = *(unsigned __int16 *)(v56 + 8);
    else
      v57 = 0;
    v59 = sub_1C636D0C8(v55, (const char *)0x92, (const llvm::APInt *)&v84, v81, v82, v31, v30, v57);
    v60 = *(_QWORD *)(a3 + 16);
    v61 = *(_QWORD *)(v60 + 832);
    if (v61)
      v62 = *(_WORD *)(v61 + 8);
    else
      v62 = 0;
    v52 = sub_1C5D52060(v60, 216, (const llvm::APInt *)&v84, v69, v70, (uint64_t)v59, v58, v62);
    v54 = v63;
    if (v86 != v88)
      free(v86);
  }
  v64 = sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v84, *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v52, v54, v51, (uint64_t)v28, 1);
  if (v89 != (uint64_t *)&v91)
    free(v89);
  if (v84)
    llvm::MetadataTracking::untrack((uint64_t)&v84, v84);
  return v64;
}

llvm::LLVMContext *sub_1C482B3A4(llvm::LLVMContext *result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;

  if (a3 == 64)
    v7 = 4;
  else
    v7 = a3;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a7 + 28 * v7 + 4 * a4);
  switch(a4)
  {
    case 0u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 4;
      *(_BYTE *)(a2 + 64) = 97;
      v9 = 63;
      goto LABEL_8;
    case 1u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 3;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 3u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v10;
      *(_DWORD *)(a2 + 80) = 45;
      goto LABEL_35;
    case 2u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 10;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 2;
      *(_BYTE *)(a2 + 64) = 95;
      v9 = 27;
LABEL_8:
      *(_DWORD *)(a2 + 80) = v9;
      v11 = 33;
      *(_QWORD *)(a2 + 72) = 0;
      goto LABEL_36;
    case 3u:
      *(_BYTE *)a2 = -82;
      *(_QWORD *)(a2 + 8) = 0;
      v11 = 1;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 9;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 3;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 3u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v12;
      *(_DWORD *)(a2 + 80) = 27;
      goto LABEL_36;
    case 4u:
      if (a3 == 64)
        v13 = a6;
      else
        v13 = 0;
      if (a3 == 64)
        v14 = a5;
      else
        v14 = 5;
      *(_QWORD *)a2 = v14;
      *(_QWORD *)(a2 + 8) = v13;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 5;
      goto LABEL_34;
    case 5u:
      v15 = a5 & 0xFFFFFFFFFFFFFF00;
      if (a3 == 3)
        v16 = 4;
      else
        v16 = 5;
      if (a3 == 64)
        v17 = a6;
      else
        v17 = 0;
      if (a3 == 64)
        v16 = a5;
      else
        v15 = 0;
      *(_QWORD *)a2 = v15 & 0xFFFFFFFFFFFFFF00 | v16;
      *(_QWORD *)(a2 + 8) = v17;
      v11 = 1;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 4;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 1;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 1u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v18;
      goto LABEL_36;
    case 6u:
      if (a3 == 3 || a3 == 64)
        v20 = 4;
      else
        v20 = 5;
      *(_BYTE *)a2 = v20;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 40) = 3;
LABEL_34:
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 1;
      result = (llvm::LLVMContext *)sub_1C4816F98(result, *(_QWORD *)(a2 + 40), 0, 1u, 0);
      *(_QWORD *)(a2 + 64) = result;
      *(_QWORD *)(a2 + 72) = v21;
LABEL_35:
      v11 = 33;
LABEL_36:
      *(_DWORD *)(a2 + 84) = v11;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1C482B600(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  llvm **v8;
  uint64_t v9;
  llvm *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  const char *v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  llvm *v52;
  uint64_t *v53;
  unsigned int v54;
  int v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  unsigned int i;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t *v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  int v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  int v104;
  uint64_t *v105;
  uint64_t v107;
  _QWORD *v108;
  __int128 v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  llvm::LLVMContext *v113;
  uint64_t v114;
  uint64_t v115;
  llvm *v116;
  unint64_t v117;
  unsigned __int8 *v118;
  int v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  llvm *v127;
  uint64_t v128;
  unsigned int v129;
  llvm *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE v133[2];
  char v134;
  unsigned __int8 *v135;
  int v136;
  char v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unsigned __int8 *v145;
  int v146;
  void *v147;
  uint64_t v148;
  _BYTE v149[256];
  uint64_t *v150;
  uint64_t v151;
  _OWORD v152[8];
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v8 = *(llvm ***)(a2 + 40);
  v10 = *v8;
  v9 = (uint64_t)v8[1];
  v110 = *(unsigned __int16 *)(a2 + 26);
  v112 = *(_QWORD *)(a2 + 80);
  v113 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v11 = *(_QWORD *)(a2 + 96);
  v111 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(v11 + 24);
  v12 = (unint64_t *)(v11 + 24);
  if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v117 = (unint64_t)(sub_1C4825F50(v12) + 7) >> 3;
    if ((_DWORD)v14 == 1)
  }
  else
  {
    v117 = -1;
  }
  v109 = *(_OWORD *)*(_QWORD *)(a2 + 32);
  v15 = *(unsigned __int8 **)(a2 + 64);
  v145 = v15;
  if (v15)
    llvm::MetadataTracking::track((uint64_t)&v145, v15, 2);
  v146 = *(_DWORD *)(a2 + 60);
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v142 = 0;
  v143 = 0;
  v140 = 0;
  *(_QWORD *)&v141 = 0;
  DWORD2(v141) = 0;
  v144 = a3;
  sub_1C6133170((uint64_t)v133, a2, 6, 0, 5, 0, a4);
  v16 = *(uint64_t **)(*(_QWORD *)(a3 + 16) + 40);
  v17 = *(_QWORD *)(a1 + 184296);
  v18 = *v16;
  LODWORD(v147) = 0;
  v19 = sub_1C4785D88(v17, v18, "LoadMCUCohMode", &v147);
  v20 = v147;
  v21 = *(_QWORD *)(a1 + 184296);
  v22 = *v16;
  LODWORD(v147) = 0;
  v23 = sub_1C4785D88(v21, v22, "LoadSLCCohMode", &v147);
  v24 = v147;
  v25 = *(_BYTE **)(a1 + 184296);
  v114 = a1;
  v115 = v9;
  v116 = v10;
  if (v25[310])
  {
    v26 = 1;
  }
  else if (v25[311])
  {
    v26 = 2;
  }
  else if (v25[312])
  {
    v26 = 3;
  }
  else
  {
    v26 = 0;
  }
  v27 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v26, (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
  v29 = v28;
  if (v19)
    v30 = v20;
  else
    v30 = 0;
  v31 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v30, (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
  v33 = v32;
  if (v23)
    v34 = v24;
  else
    v34 = 0;
  v35 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v34, (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
  v37 = v36;
  v38 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v145, (llvm *)5, 0, 1, 0);
  v107 = v39;
  v108 = v38;
  v150 = (uint64_t *)v152;
  v152[0] = v141;
  v151 = 0x800000001;
  v40 = sub_1C47F4C2C((uint64_t)v133);
  v42 = v41;
  v43 = v151;
  if (v151 >= HIDWORD(v151))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v151 + 1, 16);
    v43 = v151;
  }
  v44 = &v150[2 * v43];
  *v44 = (uint64_t)v40;
  v44[1] = v42;
  v45 = (v151 + 1);
  LODWORD(v151) = v45;
  if (v45 >= HIDWORD(v151))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v45 + 1, 16);
    LODWORD(v45) = v151;
  }
  v46 = &v150[2 * v45];
  *v46 = (uint64_t)v27;
  v46[1] = v29;
  v47 = (v151 + 1);
  LODWORD(v151) = v47;
  if (v47 >= HIDWORD(v151))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v47 + 1, 16);
    LODWORD(v47) = v151;
  }
  v48 = &v150[2 * v47];
  *v48 = (uint64_t)v31;
  v48[1] = v33;
  v49 = (v151 + 1);
  LODWORD(v151) = v49;
  if (v49 >= HIDWORD(v151))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v49 + 1, 16);
    LODWORD(v49) = v151;
  }
  v50 = &v150[2 * v49];
  *v50 = (uint64_t)v35;
  v50[1] = v37;
  v51 = (v151 + 1);
  LODWORD(v151) = v51;
  v52 = v116;
  if (v51 >= HIDWORD(v151))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v51 + 1, 16);
    LODWORD(v51) = v151;
  }
  v53 = &v150[2 * v51];
  *v53 = (uint64_t)v108;
  v53[1] = v107;
  LODWORD(v151) = v151 + 1;
  sub_1C4825258(v114, (uint64_t)&v150, *(_QWORD *)(a3 + 16));
  v54 = v151;
  if (v151 >= HIDWORD(v151))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v151 + 1, 16);
    v54 = v151;
  }
  *(_OWORD *)&v150[2 * v54] = v109;
  v55 = (v110 >> 10) & 3;
  LODWORD(v151) = v151 + 1;
  v56 = &unk_1ED7EA020;
  if (v134)
    v57 = &unk_1ED7EA0AC;
  else
    v57 = &unk_1ED7EA138;
  if (v134)
    v56 = &unk_1ED7EA1C4;
  if (v133[1])
    v58 = (uint64_t)v57;
  else
    v58 = (uint64_t)v56;
  LOBYTE(v122) = 0;
  v123 = 0;
  LOBYTE(v124) = 0;
  v125 = 0;
  v126 = -1;
  LOBYTE(v127) = 0;
  v128 = 0;
  v129 = -1;
  LOBYTE(v130) = 0;
  v131 = 0;
  v132 = -1;
  sub_1C482B3A4(v113, (uint64_t)&v122, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), dword_1C642B670[v117 - 1], v112, v111, v58);
  v59 = *(_QWORD *)(a3 + 16);
  v60 = v126;
  v61 = v150;
  v62 = v151;
  v63 = sub_1C636A8B4(v59, v122, v123, v124, v125);
  v65 = sub_1C5D61678(v59, v60, (uint64_t)&v145, v63, v64, v61, v62);
  v66 = *(_QWORD *)(a2 + 96);
  if (*(_DWORD *)(v66 + 16) == 2)
    *(_WORD *)(v66 + 32) |= 0x20u;
  v67 = *(void **)(a3 + 16);
  v147 = (void *)v66;
  sub_1C636E10C(v67, (uint64_t)v65, &v147, 1);
  v68 = v115;
  if (v117 < 5)
  {
    v74 = *(_QWORD *)(a3 + 16);
    v75 = *(_QWORD *)(v74 + 832);
    if (v75)
      v76 = *(_WORD *)(v75 + 8);
    else
      v76 = 0;
    v83 = sub_1C5D52060(v74, 201, (const llvm::APInt *)&v145, v127, v128, (uint64_t)v65, 0, v76);
    v85 = v84;
    v118 = v145;
    if (v145)
      llvm::MetadataTracking::track((uint64_t)&v118, v145, 2);
    v119 = v146;
    v86 = sub_1C6131488(v114, (uint64_t)v83, v85, v116, v115, v55, (const llvm::APInt *)&v118, a3);
    v88 = v87;
    if (v118)
      llvm::MetadataTracking::untrack((uint64_t)&v118, v118);
    v89 = *(_QWORD *)(a3 + 16);
    v90 = *(_QWORD *)(v89 + 832);
    if (v90)
      v91 = *(_WORD *)(v90 + 8);
    else
      v91 = 0;
    v96 = sub_1C5D52060(v89, 216, (const llvm::APInt *)&v145, v116, v115, (uint64_t)v86, v88, v91);
    v98 = v97;
  }
  else
  {
    v120 = v145;
    if (v145)
      llvm::MetadataTracking::track((uint64_t)&v120, v145, 2);
    v121 = v146;
    v69 = sub_1C6131488(v114, (uint64_t)v65, 0, v116, v115, v55, (const llvm::APInt *)&v120, a3);
    v71 = v70;
    if (v120)
      llvm::MetadataTracking::untrack((uint64_t)&v120, v120);
    v147 = v149;
    v148 = 0x1000000000;
    if (v129)
    {
      for (i = 0; i < v129; ++i)
      {
        v78 = sub_1C636E638(*(_QWORD *)(a3 + 16), i + HIDWORD(v132), (const llvm::APInt *)&v145, v127, v128, (uint64_t)v69, v71);
        v80 = v79;
        v81 = v148;
        if (v148 >= (unint64_t)HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
          v81 = v148;
        }
        v82 = (char *)v147 + 16 * v81;
        *v82 = v78;
        v82[1] = v80;
        v72 = (v148 + 1);
        LODWORD(v148) = v148 + 1;
      }
      v73 = (uint64_t *)v147;
      v68 = v115;
      v52 = v116;
    }
    else
    {
      v72 = 0;
      v73 = (uint64_t *)v149;
    }
    v92 = *(_QWORD *)(a3 + 16);
    v93 = *(_QWORD *)(v92 + 832);
    if (v93)
      v94 = *(unsigned __int16 *)(v93 + 8);
    else
      v94 = 0;
    v100 = sub_1C636D0C8(v92, (const char *)0x92, (const llvm::APInt *)&v145, v130, v131, v73, v72, v94);
    v101 = *(_QWORD *)(a3 + 16);
    v102 = *(_QWORD *)(v101 + 832);
    if (v102)
      v103 = *(_WORD *)(v102 + 8);
    else
      v103 = 0;
    v96 = sub_1C5D52060(v101, 216, (const llvm::APInt *)&v145, v52, v68, (uint64_t)v100, v99, v103);
    v98 = v104;
    if (v147 != v149)
      free(v147);
  }
  v105 = sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v145, *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v96, v98, v95, (uint64_t)v65, 1);
  if (v150 != (uint64_t *)v152)
    free(v150);
  if (v135)
    llvm::MetadataTracking::untrack((uint64_t)&v135, v135);
  if (v145)
    llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
  return v105;
}

uint64_t *sub_1C482BE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  __int128 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  int v36;
  void *v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  llvm *v48;
  uint64_t *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  unsigned int i;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  llvm *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  int v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  llvm *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  llvm *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  __int16 v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  uint64_t *v111;
  __int128 v113;
  llvm::LLVMContext *v114;
  llvm *v115;
  uint64_t v116;
  unsigned __int8 *v118;
  int v119;
  unsigned __int8 *v120;
  int v121;
  llvm *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  llvm *v127;
  uint64_t v128;
  unsigned int v129;
  llvm *v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  char v134;
  char v135;
  unsigned __int8 *v136;
  int v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  unsigned __int8 *v146;
  int v147;
  unsigned __int8 *v148;
  int v149;
  __int128 v150;
  void *v151;
  uint64_t v152;
  _BYTE v153[256];
  uint64_t *v154;
  uint64_t v155;
  _OWORD v156[8];
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v114 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v10 = *(_QWORD *)(a2 + 40);
  v115 = *(llvm **)v10;
  v116 = *(_QWORD *)(v10 + 8);
  v11 = *(unsigned __int16 *)(a2 + 26);
  v13 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(v12 + 24);
  v15 = (unint64_t *)(v12 + 24);
  if ((v16 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v18 = (unint64_t)(sub_1C4825F50(v15) + 7) >> 3;
    if ((_DWORD)v17 == 1)
  }
  else
  {
    v18 = -1;
  }
  v19 = *(__int128 **)(a2 + 32);
  v113 = *v19;
  v150 = *(__int128 *)((char *)v19 + 40);
  v20 = *(unsigned __int8 **)(a2 + 64);
  v148 = v20;
  if (v20)
    llvm::MetadataTracking::track((uint64_t)&v148, v20, 2);
  v149 = *(_DWORD *)(a2 + 60);
  v21 = v150;
  v22 = *(unsigned __int8 **)(v150 + 64);
  v146 = v22;
  v23 = v150;
  if (v22)
  {
    llvm::MetadataTracking::track((uint64_t)&v146, v22, 2);
    v23 = v150;
  }
  v147 = *(_DWORD *)(v21 + 60);
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v143 = 0;
  v144 = 0;
  v141 = 0;
  *(_QWORD *)&v142 = 0;
  DWORD2(v142) = 0;
  v145 = a3;
  *(_QWORD *)&v150 = sub_1C482C624(v23, *((unint64_t *)&v150 + 1), *(_QWORD *)(a3 + 16), a4, a5, a6, a7, a8);
  DWORD2(v150) = v24;
  sub_1C4831E60((uint64_t)&v133, (uint64_t *)&v150, v18, 1, 4, 0, 4, 0, 0);
  v25 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v148, (llvm *)5, 0, 1, 0);
  v27 = v26;
  v154 = (uint64_t *)v156;
  v155 = 0x800000000;
  if (!v133)
  {
    v156[0] = v142;
    LODWORD(v155) = 1;
  }
  v28 = sub_1C47F4C2C((uint64_t)&v133);
  v30 = v29;
  v31 = v155;
  if (v155 >= HIDWORD(v155))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, (uint64_t)v156, v155 + 1, 16);
    v31 = v155;
  }
  v32 = &v154[2 * v31];
  *v32 = (uint64_t)v28;
  v32[1] = v30;
  v33 = (v155 + 1);
  LODWORD(v155) = v33;
  if (v33 >= HIDWORD(v155))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, (uint64_t)v156, v33 + 1, 16);
    LODWORD(v33) = v155;
  }
  v34 = &v154[2 * v33];
  *v34 = (uint64_t)v25;
  v34[1] = v27;
  LODWORD(v155) = v155 + 1;
  sub_1C4825258(a1, (uint64_t)&v154, *(_QWORD *)(a3 + 16));
  v35 = v155;
  if (v155 >= HIDWORD(v155))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, (uint64_t)v156, v155 + 1, 16);
    v35 = v155;
  }
  v36 = (v11 >> 10) & 3;
  *(_OWORD *)&v154[2 * v35] = v113;
  LODWORD(v155) = v155 + 1;
  if (v133)
  {
    if (v134)
      v38 = (char *)&unk_1ED7EA250;
    else
      v38 = (char *)&unk_1ED7EA368;
  }
  else
  {
    if (!v134)
    {
      if (v135)
        v37 = &unk_1ED7EA1C4;
      else
        v37 = &unk_1ED7EA020;
      goto LABEL_28;
    }
    v38 = (char *)&unk_1ED7EA0AC;
  }
  if (v135)
    v37 = v38;
  else
    v37 = v38 + 140;
LABEL_28:
  LOBYTE(v122) = 0;
  v123 = 0;
  LOBYTE(v124) = 0;
  v125 = 0;
  v126 = -1;
  LOBYTE(v127) = 0;
  v128 = 0;
  v129 = -1;
  LOBYTE(v130) = 0;
  v131 = 0;
  v132 = -1;
  sub_1C482B3A4(v114, (uint64_t)&v122, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), dword_1C642B670[v18 - 1], v14, v13, (uint64_t)v37);
  v39 = *(_QWORD *)(a3 + 16);
  v40 = v126;
  v41 = v154;
  v42 = v155;
  v43 = sub_1C636A8B4(v39, (uint64_t)v122, v123, v124, v125);
  v45 = sub_1C5D61678(v39, v40, (uint64_t)&v148, v43, v44, v41, v42);
  v46 = *(void **)(a3 + 16);
  v151 = *(void **)(a2 + 96);
  sub_1C636E10C(v46, (uint64_t)v45, &v151, 1);
  if (v18 < 5)
  {
    if (v18 == 1)
    {
      v54 = *(_QWORD *)(a3 + 16);
      v55 = *(_QWORD *)(v54 + 832);
      if (v55)
        v56 = *(_WORD *)(v55 + 8);
      else
        v56 = 0;
      v79 = sub_1C5D52060(v54, 201, (const llvm::APInt *)&v148, v122, v123, v150, *((unint64_t *)&v150 + 1), v56);
      v81 = v80;
      v82 = *(_QWORD *)(a3 + 16);
      v84 = v122;
      v83 = v123;
      v85 = sub_1C6366AB4(v82, 1, (const llvm::APInt *)&v148, v122, v123, 0, 0);
      v88 = *(_QWORD *)(v82 + 832);
      if (v88)
        LOWORD(v88) = *(_WORD *)(v88 + 8);
      v89 = sub_1C5D56C70(v82, 171, (const llvm::APInt *)&v148, v84, v83, (uint64_t)v79, v81, v87, (uint64_t)v85, v86, v88);
      v91 = v90;
      v92 = *(_QWORD *)(a3 + 16);
      v94 = v122;
      v93 = v123;
      v95 = sub_1C6366AB4(v92, 3, (const llvm::APInt *)&v148, v122, v123, 0, 0);
      v98 = *(_QWORD *)(v92 + 832);
      if (v98)
        LOWORD(v98) = *(_WORD *)(v98 + 8);
      v99 = sub_1C5D56C70(v92, 175, (const llvm::APInt *)&v148, v94, v93, (uint64_t)v89, v91, v97, (uint64_t)v95, v96, v98);
      v102 = *(_QWORD *)(a3 + 16);
      v103 = *(_QWORD *)(v102 + 832);
      if (v103)
        LOWORD(v103) = *(_WORD *)(v103 + 8);
      v66 = v115;
      v65 = v116;
      v105 = sub_1C5D56C70(v102, 177, (const llvm::APInt *)&v148, v122, v123, (uint64_t)v45, 0, v101, (uint64_t)v99, v100, v103);
      v106 = 0;
      v107 = *(_QWORD *)(a3 + 16);
      v108 = *(_QWORD *)(v107 + 832);
      if (v108)
        v106 = *(_WORD *)(v108 + 8);
      v64 = sub_1C5D52060(v107, 201, (const llvm::APInt *)&v148, v127, v128, (uint64_t)v105, v104, v106);
      v63 = v109;
    }
    else
    {
      v63 = 0;
      v64 = v45;
      v66 = v115;
      v65 = v116;
    }
    v118 = v148;
    if (v148)
      llvm::MetadataTracking::track((uint64_t)&v118, v148, 2);
    v119 = v149;
    v76 = sub_1C6131488(a1, (uint64_t)v64, v63, v66, v65, v36, (const llvm::APInt *)&v118, a3);
    v78 = v110;
    if (v118)
      llvm::MetadataTracking::untrack((uint64_t)&v118, v118);
  }
  else
  {
    v120 = v148;
    if (v148)
      llvm::MetadataTracking::track((uint64_t)&v120, v148, 2);
    v121 = v149;
    v47 = v116;
    v48 = v115;
    v49 = sub_1C6131488(a1, (uint64_t)v45, 0, v115, v116, v36, (const llvm::APInt *)&v120, a3);
    v51 = v50;
    if (v120)
      llvm::MetadataTracking::untrack((uint64_t)&v120, v120);
    v151 = v153;
    v152 = 0x1000000000;
    if (v129)
    {
      for (i = 0; i < v129; ++i)
      {
        v58 = sub_1C636E638(*(_QWORD *)(a3 + 16), i + HIDWORD(v132), (const llvm::APInt *)&v148, v127, v128, (uint64_t)v49, v51);
        v60 = v59;
        v61 = v152;
        if (v152 >= (unint64_t)HIDWORD(v152))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v151, (uint64_t)v153, v152 + 1, 16);
          v61 = v152;
        }
        v62 = (char *)v151 + 16 * v61;
        *v62 = v58;
        v62[1] = v60;
        v52 = (v152 + 1);
        LODWORD(v152) = v152 + 1;
      }
      v53 = (uint64_t *)v151;
      v48 = v115;
      v47 = v116;
    }
    else
    {
      v52 = 0;
      v53 = (uint64_t *)v153;
    }
    v67 = *(_QWORD *)(a3 + 16);
    v68 = *(_QWORD *)(v67 + 832);
    if (v68)
      v69 = *(unsigned __int16 *)(v68 + 8);
    else
      v69 = 0;
    v71 = sub_1C636D0C8(v67, (const char *)0x92, (const llvm::APInt *)&v148, v130, v131, v53, v52, v69);
    v72 = *(_QWORD *)(a3 + 16);
    v73 = *(_QWORD *)(v72 + 832);
    if (v73)
      v74 = *(_WORD *)(v73 + 8);
    else
      v74 = 0;
    v76 = sub_1C5D52060(v72, 216, (const llvm::APInt *)&v148, v48, v47, (uint64_t)v71, v70, v74);
    v78 = v77;
    if (v151 != v153)
      free(v151);
  }
  v111 = sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v148, *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v76, v78, v75, (uint64_t)v45, 1);
  if (v154 != (uint64_t *)v156)
    free(v154);
  if (v136)
    llvm::MetadataTracking::untrack((uint64_t)&v136, v136);
  if (v146)
    llvm::MetadataTracking::untrack((uint64_t)&v146, v146);
  if (v148)
    llvm::MetadataTracking::untrack((uint64_t)&v148, v148);
  return v111;
}

_QWORD *sub_1C482C624(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t ExtendedSizeInBits;
  const char *v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  int v61;
  uint64_t v63;
  unint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v70;
  _QWORD *v71;
  uint64_t i;
  void **v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v80;
  _QWORD *v81;
  size_t v82;
  unint64_t v83;
  unint64_t v84;
  size_t v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v88;
  unint64_t j;
  void **v90;
  void *v91;
  void *v92;
  uint64_t v93;
  int64_t v94;
  int v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int *v104;
  unint64_t v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  __int16 v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  unsigned __int8 *v138;
  int v139;
  void *v140;
  unsigned int v141;
  void *v142;
  unsigned int v143;
  void *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  void *__src[2];
  uint64_t v149;
  unsigned int v150;
  void *v151;
  unsigned int v152;
  uint64_t v153;
  _DWORD v154[2];
  uint64_t v155;

  v10 = (_QWORD *)a1;
  v155 = *MEMORY[0x1E0C80C00];
  v11 = *(unsigned __int8 **)(a1 + 64);
  v138 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v138, v11, 2);
  v139 = *((_DWORD *)v10 + 15);
  v12 = *((unsigned __int16 *)v10 + 12);
  v13 = v12 > 0x26;
  v14 = (1 << v12) & 0x6000006000;
  if (!v13 && v14 != 0)
  {
    v108 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 344);
    v109 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v108 + 400))(v108, v10[10]);
    v111 = v110;
    v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 336))(v108);
    v113 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v112 + 24))(v112, v111);
    v10 = sub_1C6366AB4(a3, (*((_DWORD *)v10 + 22) + v113 * v109), (const llvm::APInt *)&v138, (llvm *)4, 0, 0, 0);
    goto LABEL_160;
  }
  v136 = 0;
  v137 = 0;
  v16 = 0;
LABEL_9:
  v17 = 1;
  while (1)
  {
    while (1)
    {
      v18 = *((unsigned __int16 *)v10 + 12);
      if ((v18 - 198) <= 2)
      {
        while (1)
        {
          *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v10[4] + 40) + 16 * *(unsigned int *)(v10[4] + 8));
          if (LOBYTE(__src[0]))
            ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)__src);
          else
            ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
          v21 = ExtendedSizeInBits;
          if ((_DWORD)v20 == 1)
          if (v21 < 0x10)
            break;
          v22 = (unsigned int *)v10[4];
          v10 = *(_QWORD **)v22;
          a2 = a2 & 0xFFFFFFFF00000000 | v22[2];
          v18 = *(unsigned __int16 *)(*(_QWORD *)v22 + 24);
          if ((v18 - 198) >= 3)
            goto LABEL_20;
        }
        v18 = *((unsigned __int16 *)v10 + 12);
      }
LABEL_20:
      if (v18 != 56)
        break;
      v23 = v16;
      v24 = (uint64_t *)v10[4];
      v25 = *v24;
      v26 = *(unsigned __int16 *)(*v24 + 24);
      v13 = v26 > 0x26;
      v27 = (1 << v26) & 0x6000006000;
      if (!v13 && v27 != 0)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 344);
        v30 = v17;
        v31 = a3;
        v32 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 400))(v29, *(_QWORD *)(v25 + 80));
        v34 = v33;
        v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 336))(v29);
        v36 = *(_DWORD *)(v25 + 88)
            + (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 24))(v35, v34) * v32;
        a3 = v31;
        v17 = v30;
        v37 = v10[4];
        v10 = *(_QWORD **)(v37 + 40);
        v38 = *(unsigned int *)(v37 + 48);
        v39 = a2 & 0xFFFFFFFF00000000;
        v16 = v23;
        goto LABEL_52;
      }
      v40 = (unsigned __int16 *)(v10 + 3);
      v16 = v23;
LABEL_42:
      v57 = 0;
      v58 = 1;
      while (1)
      {
        v59 = v58;
        v60 = v24[5 * v57];
        v61 = *(unsigned __int16 *)(v60 + 24);
        if (v61 == 35 || v61 == 11)
          break;
        v58 = 0;
        v57 = 1;
        if ((v59 & 1) == 0)
          goto LABEL_27;
      }
      v63 = *(_QWORD *)(v60 + 80);
      v64 = (unint64_t *)(v63 + 24);
      if (*(_DWORD *)(v63 + 32) >= 0x41u)
        v64 = (unint64_t *)*v64;
      v36 = *v64;
      v65 = &v24[5 * (v57 ^ 1)];
      v10 = (_QWORD *)*v65;
      v38 = *((unsigned int *)v65 + 2);
      v39 = a2 & 0xFFFFFFFF00000000;
LABEL_52:
      a2 = v39 | v38;
      v16 += v36 * v17;
    }
    v40 = (unsigned __int16 *)(v10 + 3);
    if (v18 != 172)
      goto LABEL_27;
    for (i = 0; i != 8; i += 4)
    {
      v73 = &__src[i];
      *((_DWORD *)v73 + 2) = 1;
      *v73 = 0;
      *((_DWORD *)v73 + 6) = 1;
      v73[2] = 0;
    }
    sub_1C6368768(a3, *(_QWORD *)v10[4], *(_QWORD *)(v10[4] + 8), 0, (uint64_t)&v144);
    if (LODWORD(__src[1]) >= 0x41 && __src[0])
      MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
    __src[0] = v144;
    LODWORD(__src[1]) = v145;
    v145 = 0;
    if (v150 >= 0x41 && v149)
    {
      MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
      v149 = v146;
      v150 = v147;
      v147 = 0;
      if (v145 >= 0x41 && v144)
        MEMORY[0x1CAA32F9C](v144, 0x1000C8000313F17);
    }
    else
    {
      v149 = v146;
      v150 = v147;
    }
    sub_1C6368768(a3, *(_QWORD *)(v10[4] + 40), *(_QWORD *)(v10[4] + 48), 0, (uint64_t)&v144);
    if (v152 >= 0x41 && v151)
      MEMORY[0x1CAA32F9C](v151, 0x1000C8000313F17);
    v151 = v144;
    v152 = v145;
    v145 = 0;
    if (v154[0] >= 0x41u && v153)
    {
      MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
      v153 = v146;
      v154[0] = v147;
      v147 = 0;
      if (v145 >= 0x41 && v144)
        MEMORY[0x1CAA32F9C](v144, 0x1000C8000313F17);
    }
    else
    {
      v153 = v146;
      v154[0] = v147;
    }
    v74 = __src[1];
    v143 = __src[1];
    if (LODWORD(__src[1]) > 0x40)
    {
      v82 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
      v142 = (void *)operator new[]();
      memcpy(v142, __src[0], v82);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v142);
      v74 = v143;
      v76 = (uint64_t)v142;
    }
    else
    {
      v75 = LODWORD(__src[1]) ? 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]) : 0;
      v76 = v75 & ~(uint64_t)__src[0];
      v142 = (void *)v76;
    }
    v143 = 0;
    v141 = v152;
    v134 = v17;
    v135 = a3;
    if (v152 > 0x40)
    {
      v133 = v76;
      v85 = (((unint64_t)v152 + 63) >> 3) & 0x3FFFFFF8;
      v140 = (void *)operator new[]();
      memcpy(v140, v151, v85);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v140);
      v86 = v141;
      v84 = (unint64_t)v140;
      v141 = 0;
      if (v86 >= 0x41)
      {
        v93 = 0;
        v94 = (unint64_t)(v86 + 63) >> 6;
        v76 = v133;
        do
        {
          *(_QWORD *)(v84 + v93) &= *(_QWORD *)(v133 + v93);
          v93 += 8;
        }
        while (8 * v94 != v93);
        v95 = 0;
        do
        {
          v13 = v94-- < 1;
          if (v13)
            break;
          v96 = *(_QWORD *)(v84 + 8 * v94);
          v95 += __clz(v96);
        }
        while (!v96);
        v87 = 0;
        v97 = v86 | 0xFFFFFFC0;
        if ((v86 & 0x3F) == 0)
          v97 = 0;
        if ((v86 - v95 - v97) <= 0x40)
          v87 = *(_QWORD *)v84 == 0;
        if (v84)
        {
          MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
          v76 = v133;
        }
        goto LABEL_92;
      }
      v76 = v133;
    }
    else
    {
      v83 = v152 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v152 : 0;
      v84 = v83 & ~(unint64_t)v151;
      v140 = (void *)v84;
      v141 = 0;
    }
    v87 = (v84 & v76) == 0;
LABEL_92:
    v88 = v16;
    if (v74 >= 0x41 && v76)
      MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    for (j = 0; j != 0x3FFFFFFFFFFFFFF0; j -= 8)
    {
      v90 = &__src[j / 2];
      if (v154[j] >= 0x41u)
      {
        v91 = v90[6];
        if (v91)
          MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
      }
      if (*((_DWORD *)v90 + 10) >= 0x41u)
      {
        v92 = v90[4];
        if (v92)
          MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
      }
    }
    if (v87)
    {
      v24 = (uint64_t *)v10[4];
      v16 = v88;
      v17 = v134;
      a3 = v135;
      goto LABEL_42;
    }
    v16 = v88;
    v17 = v134;
    a3 = v135;
LABEL_27:
    v41 = *v40;
    if (v41 == 56)
    {
      v42 = 0;
      v43 = v10[4];
      v44 = 1;
      do
      {
        v45 = v44;
        v46 = (unsigned int *)(v43 + 40 * v42);
        v47 = *(_QWORD *)v46;
        if (*(_WORD *)(*(_QWORD *)v46 + 24) == 56)
        {
          v48 = *(uint64_t **)(v47 + 32);
          v49 = v48[5];
          v50 = *(unsigned __int16 *)(v49 + 24);
          if (v50 == 35 || v50 == 11)
          {
            v52 = *(_QWORD *)(v49 + 80);
            v53 = (unint64_t *)(v52 + 24);
            if (*(_DWORD *)(v52 + 32) >= 0x41u)
              v53 = (unint64_t *)*v53;
            v54 = *(_QWORD *)(a3 + 832);
            if (v54)
              LOWORD(v54) = *(_WORD *)(v54 + 8);
            v36 = *v53;
            v55 = *(_QWORD *)(v47 + 40) + 16 * v46[2];
            v10 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v138, *(llvm **)v55, *(_QWORD *)(v55 + 8), *v48, v48[1], a8, *(_QWORD *)(v43 + 40 * (v42 ^ 1)), *(_QWORD *)(v43 + 40 * (v42 ^ 1) + 8), v54);
            v39 = v56;
            v38 = a2 & 0xFFFFFFFF00000000;
            goto LABEL_52;
          }
        }
        v44 = 0;
        v42 = 1;
      }
      while ((v45 & 1) != 0);
      v98 = v17;
      v99 = (uint64_t)v137;
      if (v137 || v98 != 1)
        goto LABEL_146;
      v100 = v10[6];
      if (!v100)
        goto LABEL_145;
      v101 = 1;
      do
      {
        if (*(_DWORD *)(v100 + 8) == (_DWORD)a2)
        {
          if (!v101)
            goto LABEL_145;
          --v101;
        }
        v100 = *(_QWORD *)(v100 + 32);
      }
      while (v100);
      if (v101)
      {
LABEL_145:
        v99 = 0;
        LOWORD(v98) = 1;
        goto LABEL_146;
      }
      v102 = (unsigned int *)v10[4];
      v10 = *(_QWORD **)v102;
      if (*(_WORD *)(*(_QWORD *)v102 + 24) == 175)
      {
        v137 = (_QWORD *)*((_QWORD *)v102 + 5);
        v103 = v102 + 12;
        v104 = v102 + 2;
      }
      else
      {
        v103 = v102 + 2;
        v137 = *(_QWORD **)v102;
        v10 = (_QWORD *)*((_QWORD *)v102 + 5);
        v104 = v102 + 12;
      }
      a2 = a2 & 0xFFFFFFFF00000000 | *v104;
      v136 = *v103;
      goto LABEL_9;
    }
    if (v41 == 58)
      break;
    if (v41 != 175)
      goto LABEL_163;
    v66 = v10[4];
    v67 = *(_QWORD *)(v66 + 40);
    v68 = *(unsigned __int16 *)(v67 + 24);
    if (v68 != 35 && v68 != 11)
      goto LABEL_163;
    v70 = *(_QWORD *)(v67 + 80);
    v71 = (_QWORD *)(v70 + 24);
    if (*(_DWORD *)(v70 + 32) >= 0x41u)
      v71 = (_QWORD *)*v71;
    v17 <<= *v71;
LABEL_83:
    a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v66 + 8);
    v10 = *(_QWORD **)v66;
  }
  v66 = v10[4];
  v77 = *(_QWORD *)(v66 + 40);
  v78 = *(unsigned __int16 *)(v77 + 24);
  if (v78 == 35 || v78 == 11)
  {
    v80 = *(_QWORD *)(v77 + 80);
    v81 = (_QWORD *)(v80 + 24);
    if (*(_DWORD *)(v80 + 32) >= 0x41u)
      v81 = (_QWORD *)*v81;
    v17 *= *v81;
    goto LABEL_83;
  }
LABEL_163:
  LOWORD(v98) = v17;
  v99 = (uint64_t)v137;
LABEL_146:
  v105 = (unsigned __int16)v98;
  if (*(_BYTE *)(v10[5] + 16 * a2) != 4)
  {
    v106 = *(_QWORD *)(a3 + 832);
    if (v106)
      v107 = *(_WORD *)(v106 + 8);
    else
      v107 = 0;
    v10 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v138, (llvm *)4, 0, (uint64_t)v10, a2, v107);
    a2 = a2 & 0xFFFFFFFF00000000 | v114;
  }
  if (v105 >= 2)
  {
    v123 = sub_1C6366AB4(a3, v105, (const llvm::APInt *)&v138, (llvm *)4, 0, 0, 0);
    v126 = *(_QWORD *)(a3 + 832);
    if (v126)
      LOWORD(v126) = *(_WORD *)(v126 + 8);
    v10 = sub_1C5D56C70(a3, 58, (const llvm::APInt *)&v138, (llvm *)4, 0, (uint64_t)v10, a2, v125, (uint64_t)v123, v124, v126);
    a2 = a2 & 0xFFFFFFFF00000000 | v127;
  }
  v115 = v99;
  if ((_WORD)v16)
  {
    v128 = sub_1C6366AB4(a3, (unsigned __int16)v16, (const llvm::APInt *)&v138, (llvm *)4, 0, 0, 0);
    v131 = *(_QWORD *)(a3 + 832);
    if (v131)
      LOWORD(v131) = *(_WORD *)(v131 + 8);
    v10 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v138, (llvm *)4, 0, (uint64_t)v10, a2, v130, (uint64_t)v128, v129, v131);
    a2 = a2 & 0xFFFFFFFF00000000 | v132;
    v115 = v99;
    if (v99)
    {
LABEL_154:
      v116 = *(_QWORD *)(a3 + 832);
      if (v116)
        v117 = *(_WORD *)(v116 + 8);
      else
        v117 = 0;
      v119 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v138, (llvm *)4, 0, v115, v136, v117);
      v121 = *(_QWORD *)(a3 + 832);
      if (v121)
        LOWORD(v121) = *(_WORD *)(v121 + 8);
      v10 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v138, (llvm *)4, 0, (uint64_t)v119, v118, v120, (uint64_t)v10, a2, v121);
    }
  }
  else if (v99)
  {
    goto LABEL_154;
  }
LABEL_160:
  if (v138)
    llvm::MetadataTracking::untrack((uint64_t)&v138, v138);
  return v10;
}

uint64_t *sub_1C482D130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  __int128 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned int v35;
  int v36;
  void *v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _WORD *v46;
  void *v47;
  llvm *v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  BOOL v55;
  llvm *v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  unsigned int i;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  int v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  llvm *v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  llvm *v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t *v107;
  __int16 v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t *v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int16 v117;
  int v118;
  uint64_t *v119;
  __int128 v121;
  uint64_t v122;
  llvm::LLVMContext *v123;
  uint64_t v124;
  llvm *v125;
  unsigned __int8 *v127;
  int v128;
  unsigned __int8 *v129;
  int v130;
  llvm *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  llvm *v136;
  uint64_t v137;
  unsigned int v138;
  llvm *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 *v142;
  int v143;
  char v144;
  char v145;
  char v146;
  unsigned __int8 *v147;
  int v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  unsigned __int8 *v157;
  int v158;
  unsigned __int8 *v159;
  int v160;
  __int128 v161;
  void *v162;
  uint64_t v163;
  _BYTE v164[256];
  uint64_t *v165;
  unsigned int v166;
  unsigned int v167;
  _OWORD v168[8];
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a2 + 40);
  v125 = *(llvm **)v10;
  v123 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v124 = *(_QWORD *)(v10 + 8);
  v11 = *(unsigned __int16 *)(a2 + 26);
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 80);
  v122 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(v12 + 24);
  v14 = (unint64_t *)(v12 + 24);
  if ((v15 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v17 = (unint64_t)(sub_1C4825F50(v14) + 7) >> 3;
    if ((_DWORD)v16 == 1)
  }
  else
  {
    v17 = -1;
  }
  v18 = *(__int128 **)(a2 + 32);
  v161 = *(__int128 *)((char *)v18 + 40);
  v121 = *v18;
  v19 = *(unsigned __int8 **)(a2 + 64);
  v159 = v19;
  if (v19)
    llvm::MetadataTracking::track((uint64_t)&v159, v19, 2);
  v160 = *(_DWORD *)(a2 + 60);
  v20 = v161;
  v21 = *(unsigned __int8 **)(v161 + 64);
  v157 = v21;
  v22 = v161;
  if (v21)
  {
    llvm::MetadataTracking::track((uint64_t)&v157, v21, 2);
    v22 = v161;
  }
  v158 = *(_DWORD *)(v20 + 60);
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v154 = 0;
  v155 = 0;
  v152 = 0;
  *(_QWORD *)&v153 = 0;
  DWORD2(v153) = 0;
  v156 = a3;
  *(_QWORD *)&v161 = sub_1C482C624(v22, *((unint64_t *)&v161 + 1), *(_QWORD *)(a3 + 16), a4, a5, a6, a7, a8);
  DWORD2(v161) = v23;
  sub_1C4831E60((uint64_t)&v144, (uint64_t *)&v161, v17, 1, 4, 0, 4, 0, 0);
  v24 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v159, (llvm *)5, 0, 1, 0);
  v26 = v25;
  v27 = sub_1C47F4C2C((uint64_t)&v144);
  v29 = v28;
  if (v17 == 1)
  {
    v30 = *(_QWORD *)(a3 + 16);
    v142 = v159;
    if (v159)
      llvm::MetadataTracking::track((uint64_t)&v142, v159, 2);
    v143 = v160;
    v27 = sub_1C6132F18(v30, (const llvm::APInt *)&v142, (uint64_t)v27, v29);
    v29 = v29 & 0xFFFFFFFF00000000 | v31;
    if (v142)
      llvm::MetadataTracking::untrack((uint64_t)&v142, v142);
  }
  v165 = (uint64_t *)v168;
  v167 = 8;
  if (v144)
  {
    v32 = 0;
  }
  else
  {
    v168[0] = v153;
    v32 = 1;
  }
  v33 = &v168[v32];
  *v33 = v27;
  v33[1] = v29;
  v34 = &v168[v32 + 1];
  *v34 = v24;
  v34[1] = v26;
  v166 = v32 | 2;
  sub_1C4825258(a1, (uint64_t)&v165, *(_QWORD *)(a3 + 16));
  v35 = v166;
  if (v166 >= v167)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v165, (uint64_t)v168, v166 + 1, 16);
    v35 = v166;
  }
  v36 = (v11 >> 10) & 3;
  *(_OWORD *)&v165[2 * v35] = v121;
  ++v166;
  if (v144)
  {
    if (v145)
      v38 = (char *)&unk_1ED7EA250;
    else
      v38 = (char *)&unk_1ED7EA368;
  }
  else
  {
    if (!v145)
    {
      if (v146)
        v37 = &unk_1ED7EA1C4;
      else
        v37 = &unk_1ED7EA020;
      goto LABEL_30;
    }
    v38 = (char *)&unk_1ED7EA0AC;
  }
  if (v146)
    v37 = v38;
  else
    v37 = v38 + 140;
LABEL_30:
  LOBYTE(v131) = 0;
  v132 = 0;
  LOBYTE(v133) = 0;
  v134 = 0;
  v135 = -1;
  LOBYTE(v136) = 0;
  v137 = 0;
  v138 = -1;
  LOBYTE(v139) = 0;
  v140 = 0;
  v141 = -1;
  sub_1C482B3A4(v123, (uint64_t)&v131, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), dword_1C642B670[v17 - 1], v13, v122, (uint64_t)v37);
  v39 = *(_QWORD *)(a3 + 16);
  v40 = v135;
  v41 = v165;
  v42 = v166;
  v43 = sub_1C636A8B4(v39, (uint64_t)v131, v132, v133, v134);
  v45 = sub_1C5D61678(v39, v40, (uint64_t)&v159, v43, v44, v41, v42);
  v46 = *(_WORD **)(a2 + 96);
  v46[16] |= 0x20u;
  v47 = *(void **)(a3 + 16);
  v162 = v46;
  sub_1C636E10C(v47, (uint64_t)v45, &v162, 1);
  if (v17 < 5)
  {
    v55 = v17 == 1;
    v56 = v125;
    if (v55)
    {
      v57 = *(_QWORD *)(a3 + 16);
      v58 = *(_QWORD *)(v57 + 832);
      if (v58)
        v59 = *(_WORD *)(v58 + 8);
      else
        v59 = 0;
      v81 = sub_1C5D52060(v57, 201, (const llvm::APInt *)&v159, v131, v132, v161, *((unint64_t *)&v161 + 1), v59);
      v83 = v82;
      v84 = *(_QWORD *)(a3 + 16);
      v85 = v131;
      v86 = v132;
      v87 = sub_1C6366AB4(v84, 1, (const llvm::APInt *)&v159, v131, v132, 0, 0);
      v90 = *(_QWORD *)(v84 + 832);
      if (v90)
        LOWORD(v90) = *(_WORD *)(v90 + 8);
      v91 = sub_1C5D56C70(v84, 171, (const llvm::APInt *)&v159, v85, v86, (uint64_t)v81, v83, v89, (uint64_t)v87, v88, v90);
      v93 = v92;
      v94 = *(_QWORD *)(a3 + 16);
      v95 = v131;
      v96 = v132;
      v97 = sub_1C6366AB4(v94, 3, (const llvm::APInt *)&v159, v131, v132, 0, 0);
      v100 = *(_QWORD *)(v94 + 832);
      if (v100)
        LOWORD(v100) = *(_WORD *)(v100 + 8);
      v101 = sub_1C5D56C70(v94, 175, (const llvm::APInt *)&v159, v95, v96, (uint64_t)v91, v93, v99, (uint64_t)v97, v98, v100);
      v104 = *(_QWORD *)(a3 + 16);
      v105 = *(_QWORD *)(v104 + 832);
      if (v105)
        LOWORD(v105) = *(_WORD *)(v105 + 8);
      v68 = v124;
      v56 = v125;
      v107 = sub_1C5D56C70(v104, 177, (const llvm::APInt *)&v159, v131, v132, (uint64_t)v45, 0, v103, (uint64_t)v101, v102, v105);
      v108 = 0;
      v109 = *(_QWORD *)(a3 + 16);
      v110 = *(_QWORD *)(v109 + 832);
      if (v110)
        v108 = *(_WORD *)(v110 + 8);
      v67 = sub_1C5D52060(v109, 201, (const llvm::APInt *)&v159, v136, v137, (uint64_t)v107, v106, v108);
      v66 = v111;
    }
    else
    {
      v66 = 0;
      v67 = v45;
      v68 = v124;
    }
    v127 = v159;
    if (v159)
      llvm::MetadataTracking::track((uint64_t)&v127, v159, 2);
    v128 = v160;
    v112 = sub_1C6131488(a1, (uint64_t)v67, v66, v56, v68, v36, (const llvm::APInt *)&v127, a3);
    v114 = v113;
    if (v127)
      llvm::MetadataTracking::untrack((uint64_t)&v127, v127);
    v115 = *(_QWORD *)(a3 + 16);
    v116 = *(_QWORD *)(v115 + 832);
    if (v116)
      v117 = *(_WORD *)(v116 + 8);
    else
      v117 = 0;
    v78 = sub_1C5D52060(v115, 216, (const llvm::APInt *)&v159, v56, v68, (uint64_t)v112, v114, v117);
    v80 = v118;
  }
  else
  {
    v129 = v159;
    v48 = v125;
    if (v159)
      llvm::MetadataTracking::track((uint64_t)&v129, v159, 2);
    v130 = v160;
    v49 = v124;
    v50 = sub_1C6131488(a1, (uint64_t)v45, 0, v125, v124, v36, (const llvm::APInt *)&v129, a3);
    v52 = v51;
    if (v129)
      llvm::MetadataTracking::untrack((uint64_t)&v129, v129);
    v162 = v164;
    v163 = 0x1000000000;
    if (v138)
    {
      for (i = 0; i < v138; ++i)
      {
        v61 = sub_1C636E638(*(_QWORD *)(a3 + 16), i + HIDWORD(v141), (const llvm::APInt *)&v159, v136, v137, (uint64_t)v50, v52);
        v63 = v62;
        v64 = v163;
        if (v163 >= (unint64_t)HIDWORD(v163))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, (uint64_t)v164, v163 + 1, 16);
          v64 = v163;
        }
        v65 = (char *)v162 + 16 * v64;
        *v65 = v61;
        v65[1] = v63;
        v53 = (v163 + 1);
        LODWORD(v163) = v163 + 1;
      }
      v54 = (uint64_t *)v162;
      v49 = v124;
      v48 = v125;
    }
    else
    {
      v53 = 0;
      v54 = (uint64_t *)v164;
    }
    v69 = *(_QWORD *)(a3 + 16);
    v70 = *(_QWORD *)(v69 + 832);
    if (v70)
      v71 = *(unsigned __int16 *)(v70 + 8);
    else
      v71 = 0;
    v73 = sub_1C636D0C8(v69, (const char *)0x92, (const llvm::APInt *)&v159, v139, v140, v54, v53, v71);
    v74 = *(_QWORD *)(a3 + 16);
    v75 = *(_QWORD *)(v74 + 832);
    if (v75)
      v76 = *(_WORD *)(v75 + 8);
    else
      v76 = 0;
    v78 = sub_1C5D52060(v74, 216, (const llvm::APInt *)&v159, v48, v49, (uint64_t)v73, v72, v76);
    v80 = v79;
    if (v162 != v164)
      free(v162);
  }
  v119 = sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v159, *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v78, v80, v77, (uint64_t)v45, 1);
  if (v165 != (uint64_t *)v168)
    free(v165);
  if (v147)
    llvm::MetadataTracking::untrack((uint64_t)&v147, v147);
  if (v157)
    llvm::MetadataTracking::untrack((uint64_t)&v157, v157);
  if (v159)
    llvm::MetadataTracking::untrack((uint64_t)&v159, v159);
  return v119;
}

unsigned __int8 **sub_1C482D954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  const char *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  llvm *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t *v46;
  int v47;
  unsigned __int8 **v48;
  uint64_t v50;
  uint64_t v51;
  llvm *v52;
  __int16 v53;
  uint64_t *v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t **v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  llvm::LLVMContext *v96;
  llvm *v97;
  uint64_t v98;
  char v99[8];
  uint64_t v100;
  char v101;
  uint64_t v102;
  int v103;
  llvm *v104;
  uint64_t v105;
  unsigned int v106;
  llvm *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  int v111;
  void *v112;
  uint64_t v113;
  _BYTE v114[528];
  uint64_t *v115;
  uint64_t v116;
  _QWORD v117[18];

  v117[16] = *MEMORY[0x1E0C80C00];
  v96 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v5 = *(_QWORD *)(a2 + 96);
  v7 = *(_QWORD *)(v5 + 24);
  v6 = (unint64_t *)(v5 + 24);
  if ((v7 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v9 = (unint64_t)(sub_1C4825F50(v6) + 7) >> 3;
    if ((_DWORD)v8 == 1)
  }
  else
  {
    v9 = -1;
  }
  v10 = *(unsigned __int8 **)(a2 + 64);
  v110 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v110, v10, 2);
  v111 = *(_DWORD *)(a2 + 60);
  v11 = *(llvm **)(a2 + 80);
  v98 = *(_QWORD *)(a2 + 88);
  v12 = *(uint64_t **)(a2 + 32);
  v13 = *v12;
  v14 = v12[1];
  v16 = v12[5];
  v15 = v12[6];
  v18 = v12[10];
  v17 = v12[11];
  if (*(_WORD *)(a2 + 24) == 254 && (*(_WORD *)(a2 + 26) & 0x400) != 0)
  {
    v19 = *(_QWORD *)(a2 + 80);
    if (*(_QWORD *)(a2 + 80))
    {
      if ((v19 - 120) < 0x20 || (v19 - 2) < 6 || (v19 - 15) < 0x3C)
      {
LABEL_19:
        v30 = *(_QWORD *)(a3 + 16);
        v31 = *(_QWORD *)(v30 + 832);
        if (v31)
          v32 = *(_WORD *)(v31 + 8);
        else
          v32 = 0;
        v28 = sub_1C5D52060(v30, 201, (const llvm::APInt *)&v110, v11, v98, v16, v15, v32);
LABEL_23:
        v16 = (uint64_t)v28;
        v15 = v15 & 0xFFFFFFFF00000000 | v29;
        goto LABEL_24;
      }
    }
    else
    {
      if ((*(_DWORD *)(v98 + 8) & 0xFE) == 0x12)
        v20 = *(unsigned __int8 *)(**(_QWORD **)(v98 + 16) + 8);
      else
        v20 = *(_DWORD *)(v98 + 8);
      if (v20 == 13)
        goto LABEL_19;
    }
    v97 = *(llvm **)(a2 + 80);
    v21 = *(_QWORD *)(a3 + 16);
    v22 = sub_1C6366AB4(v21, 0, (const llvm::APInt *)&v110, (llvm *)5, 0, 0, 0);
    v25 = 0;
    v26 = *(_QWORD *)(v21 + 832);
    if (v26)
      v25 = *(_WORD *)(v26 + 8);
    v94 = (uint64_t)v22;
    v27 = v21;
    v11 = v97;
    v28 = sub_1C5D56C70(v27, 212, (const llvm::APInt *)&v110, v97, v98, v16, v15, v24, v94, v23, v25);
    goto LABEL_23;
  }
LABEL_24:
  v33 = *(_QWORD *)(a3 + 16);
  v34 = *(_QWORD *)(v33 + 832);
  if (v34)
    v35 = *(_WORD *)(v34 + 8);
  else
    v35 = 0;
  v36 = sub_1C5D52060(v33, 201, (const llvm::APInt *)&v110, (llvm *)5, 0, v18, v17, v35);
  v115 = v117;
  v117[0] = v13;
  v117[1] = v14;
  v117[2] = v16;
  v117[3] = v15;
  v38 = *(_QWORD *)(a2 + 96);
  v117[4] = v36;
  v117[5] = v17 & 0xFFFFFFFF00000000 | v37;
  v116 = 0x800000003;
  v99[0] = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = -1;
  LOBYTE(v104) = 0;
  v105 = 0;
  v106 = -1;
  LOBYTE(v107) = 0;
  v108 = 0;
  v109 = -1;
  v39 = v98;
  sub_1C482B3A4(v96, (uint64_t)v99, *(_DWORD *)(v38 + 16), dword_1C642B670[v9 - 1], (uint64_t)v11, v98, (uint64_t)&unk_1ED7EA480);
  v41 = sub_1C636D7B0((llvm *)1, 0);
  if (v9 >= 5)
  {
    v50 = *(_QWORD *)(a3 + 16);
    v51 = *(_QWORD *)(v50 + 832);
    v95 = v41;
    v52 = v11;
    if (v51)
      v53 = *(_WORD *)(v51 + 8);
    else
      v53 = 0;
    v54 = sub_1C5D52060(v50, 216, (const llvm::APInt *)&v110, v107, v108, v16, v15, v53);
    v56 = v55;
    v112 = v114;
    v113 = 0x2100000000;
    v57 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v109, (const llvm::APInt *)&v110, (llvm *)5, 0, 1, 0);
    v59 = v58;
    v60 = v113;
    if (v113 >= HIDWORD(v113))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 16);
      v60 = v113;
    }
    v61 = (char *)v112 + 16 * v60;
    *v61 = v57;
    v61[1] = v59;
    v62 = v113 + 1;
    LODWORD(v113) = v113 + 1;
    if (v106)
    {
      v63 = 0;
      v64 = v15 & 0xFFFFFFFF00000000 | v56;
      do
      {
        v65 = *(_QWORD *)(a3 + 16);
        v67 = v104;
        v66 = v105;
        v68 = sub_1C6366AB4(v65, v63, (const llvm::APInt *)&v110, (llvm *)5, 0, 0, 0);
        v71 = 0;
        v72 = *(_QWORD *)(v65 + 832);
        if (v72)
          v71 = *(_WORD *)(v72 + 8);
        v73 = sub_1C5D56C70(v65, 148, (const llvm::APInt *)&v110, v67, v66, (uint64_t)v54, v64, v70, (uint64_t)v68, v69, v71);
        v75 = v74;
        v76 = v113;
        if (v113 >= (unint64_t)HIDWORD(v113))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 16);
          v76 = v113;
        }
        v77 = (uint64_t **)((char *)v112 + 16 * v76);
        *v77 = v73;
        v77[1] = v75;
        LODWORD(v113) = v113 + 1;
        v78 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), (v63 + HIDWORD(v109)), (const llvm::APInt *)&v110, (llvm *)5, 0, 1, 0);
        v80 = v79;
        v81 = v113;
        if (v113 >= (unint64_t)HIDWORD(v113))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 16);
          v81 = v113;
        }
        v82 = (char *)v112 + 16 * v81;
        *v82 = v78;
        v82[1] = v80;
        v62 = v113 + 1;
        LODWORD(v113) = v113 + 1;
        ++v63;
      }
      while (v63 < v106);
      v39 = v98;
    }
    v11 = v52;
    if (v9 == 6)
    {
      v83 = sub_1C61312D0(*(_QWORD *)(a3 + 16), (llvm *)9, 0);
      v85 = v84;
      v86 = v113;
      if (v113 >= HIDWORD(v113))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 16);
        v86 = v113;
      }
      v87 = (char *)v112 + 16 * v86;
      *v87 = v83;
      v87[1] = v85;
      LODWORD(v113) = v113 + 1;
      v88 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 4, (const llvm::APInt *)&v110, (llvm *)5, 0, 1, 0);
      v90 = v89;
      v91 = v113;
      if (v113 >= HIDWORD(v113))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 16);
        v91 = v113;
      }
      v92 = (char *)v112 + 16 * v91;
      *v92 = v88;
      v92[1] = v90;
      v62 = v113 + 1;
      LODWORD(v113) = v113 + 1;
    }
    v93 = sub_1C636E56C(*(_QWORD *)(a3 + 16), 18, (uint64_t)&v110, (llvm *)0xAE, 0, (uint64_t *)v112, v62);
    v42 = v115;
    v115[2] = (uint64_t)v93;
    *((_DWORD *)v42 + 6) = 0;
    if (v112 != v114)
    {
      free(v112);
      v42 = v115;
    }
    v41 = v95;
  }
  else
  {
    v42 = v115;
    if (v9 == 1)
    {
      v43 = *(_QWORD *)(a3 + 16);
      v44 = *(_QWORD *)(v43 + 832);
      if (v44)
        v45 = *(_WORD *)(v44 + 8);
      else
        v45 = 0;
      v46 = sub_1C5D52060(v43, 200, (const llvm::APInt *)&v110, (llvm *)4, 0, v115[2], v115[3], v45);
      v42 = v115;
      v115[2] = (uint64_t)v46;
      *((_DWORD *)v42 + 6) = v47;
    }
  }
  v48 = sub_1C5D5C710(*(_QWORD *)(a3 + 16), v103, (uint64_t)&v110, v41, 1, v42, v116, v40, (uint64_t)v11, v39, *(_QWORD *)(a2 + 96));
  if (v115 != v117)
    free(v115);
  if (v110)
    llvm::MetadataTracking::untrack((uint64_t)&v110, v110);
  return v48;
}

_QWORD *sub_1C482E010(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  llvm::LLVMContext *v8;
  unsigned __int8 *v9;
  llvm *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  int v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  unsigned int v72;
  char *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t *v81;
  unsigned int v82;
  unsigned int v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  _QWORD *v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  llvm *v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t **v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  __int16 v124;
  uint64_t *v125;
  unint64_t *v126;
  int v127;
  _QWORD *v128;
  void *v129;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  llvm::LLVMContext *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char v142[8];
  uint64_t v143;
  char v144;
  uint64_t v145;
  int v146;
  llvm *v147;
  uint64_t v148;
  unsigned int v149;
  llvm *v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE v153[2];
  char v154;
  unsigned __int8 *v155;
  int v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  unsigned __int8 *v165;
  int v166;
  void *v167;
  uint64_t v168;
  _BYTE v169[528];
  unint64_t *v170;
  uint64_t v171;
  _QWORD v172[2];
  __int128 v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v8 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v9 = *(unsigned __int8 **)(a2 + 64);
  v165 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v165, v9, 2);
  v166 = *(_DWORD *)(a2 + 60);
  v10 = *(llvm **)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(v12 + 24);
  v13 = (unint64_t *)(v12 + 24);
  if ((v14 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v16 = (unint64_t)(sub_1C4825F50(v13) + 7) >> 3;
    if ((_DWORD)v15 == 1)
  }
  else
  {
    v16 = -1;
  }
  v17 = *(unsigned __int16 *)(a2 + 24);
  v136 = (uint64_t)v10;
  v137 = v8;
  v135 = v11;
  if (v17 != 291)
  {
    if (v17 != 254)
    {
      v140 = 0;
      v141 = 0;
      v133 = 0;
      v132 = 0;
      goto LABEL_28;
    }
    v18 = *(uint64_t **)(a2 + 32);
    v140 = *((unsigned int *)v18 + 12);
    v141 = v18[5];
    v133 = *v18;
    v132 = *((_DWORD *)v18 + 2);
    if ((*(_WORD *)(a2 + 26) & 0x400) == 0)
      goto LABEL_28;
    if ((_BYTE)v10)
    {
      if (v10 - 120 < 0x20
        || v10 - 2 < 6
        || v10 - 15 < 0x3C)
      {
LABEL_22:
        v30 = *(_QWORD *)(a3 + 16);
        v31 = *(_QWORD *)(v30 + 832);
        if (v31)
          v32 = *(_WORD *)(v31 + 8);
        else
          v32 = 0;
        v28 = sub_1C5D52060(v30, 201, (const llvm::APInt *)&v165, v10, v11, v141, v140, v32);
LABEL_26:
        v141 = (uint64_t)v28;
        v21 = v29;
        goto LABEL_27;
      }
    }
    else
    {
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        v19 = *(unsigned __int8 *)(**(_QWORD **)(v11 + 16) + 8);
      else
        v19 = *(_DWORD *)(v11 + 8);
      if (v19 == 13)
        goto LABEL_22;
    }
    v22 = *(_QWORD *)(a3 + 16);
    v23 = sub_1C6366AB4(v22, 0, (const llvm::APInt *)&v165, (llvm *)5, 0, 0, 0);
    v26 = 0;
    v27 = *(_QWORD *)(v22 + 832);
    if (v27)
      v26 = *(_WORD *)(v27 + 8);
    v28 = sub_1C5D56C70(v22, 212, (const llvm::APInt *)&v165, v10, v11, v141, v140, v25, (uint64_t)v23, v24, v26);
    goto LABEL_26;
  }
  v20 = *(uint64_t **)(a2 + 32);
  v133 = *v20;
  v132 = *((_DWORD *)v20 + 2);
  v141 = v20[10];
  v21 = *((unsigned int *)v20 + 22);
LABEL_27:
  v140 = v21;
LABEL_28:
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v162 = 0;
  v163 = 0;
  v160 = 0;
  *(_QWORD *)&v161 = 0;
  DWORD2(v161) = 0;
  v164 = a3;
  sub_1C6133170((uint64_t)v153, a2, 6, 0, 5, 0, a4);
  v33 = *(uint64_t **)(*(_QWORD *)(a3 + 16) + 40);
  v34 = *(_QWORD *)(a1 + 184296);
  v35 = *v33;
  LODWORD(v167) = 0;
  v36 = sub_1C4785D88(v34, v35, "StoreMCUCohMode", &v167);
  v37 = v167;
  v38 = *(_QWORD *)(a1 + 184296);
  v39 = *v33;
  LODWORD(v167) = 0;
  v40 = sub_1C4785D88(v38, v39, "StoreSLCCohMode", &v167);
  v41 = v167;
  v42 = *(_BYTE **)(a1 + 184296);
  v138 = v16;
  v139 = a2;
  v134 = a1;
  if (v42[310])
  {
    v43 = 1;
  }
  else if (v42[311])
  {
    v43 = 2;
  }
  else if (v42[312])
  {
    v43 = 3;
  }
  else
  {
    v43 = 0;
  }
  v44 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v43, (const llvm::APInt *)&v165, (llvm *)5, 0, 1, 0);
  v46 = v45;
  if (v36)
    v47 = v37;
  else
    v47 = 0;
  v48 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v47, (const llvm::APInt *)&v165, (llvm *)5, 0, 1, 0);
  v50 = v49;
  if (v40)
    v51 = v41;
  else
    v51 = 0;
  v52 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v51, (const llvm::APInt *)&v165, (llvm *)5, 0, 1, 0);
  v54 = v53;
  v55 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v165, (llvm *)5, 0, 1, 0);
  v131 = v56;
  v170 = v172;
  v172[0] = v141;
  v172[1] = v140;
  v173 = v161;
  v171 = 0x800000002;
  v57 = sub_1C47F4C2C((uint64_t)v153);
  v59 = v58;
  v60 = v171;
  if (v171 >= HIDWORD(v171))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 16);
    v60 = v171;
  }
  v61 = (char *)&v170[2 * v60];
  *(_QWORD *)v61 = v57;
  *((_QWORD *)v61 + 1) = v59;
  v62 = (v171 + 1);
  LODWORD(v171) = v62;
  if (v62 >= HIDWORD(v171))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v62 + 1, 16);
    LODWORD(v62) = v171;
  }
  v63 = (char *)&v170[2 * v62];
  *(_QWORD *)v63 = v44;
  *((_QWORD *)v63 + 1) = v46;
  v64 = (v171 + 1);
  LODWORD(v171) = v64;
  if (v64 >= HIDWORD(v171))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v64 + 1, 16);
    LODWORD(v64) = v171;
  }
  v65 = (char *)&v170[2 * v64];
  *(_QWORD *)v65 = v48;
  *((_QWORD *)v65 + 1) = v50;
  v66 = (v171 + 1);
  LODWORD(v171) = v66;
  v68 = v138;
  v67 = v139;
  if (v66 >= HIDWORD(v171))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v66 + 1, 16);
    LODWORD(v66) = v171;
  }
  v69 = (char *)&v170[2 * v66];
  *(_QWORD *)v69 = v52;
  *((_QWORD *)v69 + 1) = v54;
  v70 = (v171 + 1);
  LODWORD(v171) = v70;
  if (v70 >= HIDWORD(v171))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v70 + 1, 16);
    LODWORD(v70) = v171;
  }
  v71 = (char *)&v170[2 * v70];
  *(_QWORD *)v71 = v55;
  *((_QWORD *)v71 + 1) = v131;
  LODWORD(v171) = v171 + 1;
  sub_1C4825258(v134, (uint64_t)&v170, *(_QWORD *)(a3 + 16));
  v72 = v171;
  if (v171 >= HIDWORD(v171))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 16);
    v72 = v171;
  }
  v73 = (char *)&v170[2 * v72];
  *(_QWORD *)v73 = v133;
  *((_QWORD *)v73 + 1) = v132;
  LODWORD(v171) = v171 + 1;
  v74 = &unk_1ED7EA480;
  if (v154)
    v75 = &unk_1ED7EA50C;
  else
    v75 = &unk_1ED7EA598;
  if (v154)
    v74 = &unk_1ED7EA624;
  if (v153[1])
    v76 = (uint64_t)v75;
  else
    v76 = (uint64_t)v74;
  v142[0] = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v146 = -1;
  LOBYTE(v147) = 0;
  v148 = 0;
  v149 = -1;
  LOBYTE(v150) = 0;
  v151 = 0;
  v152 = -1;
  sub_1C482B3A4(v137, (uint64_t)v142, *(_DWORD *)(*(_QWORD *)(v139 + 96) + 16), dword_1C642B670[v138 - 1], v136, v135, v76);
  v77 = sub_1C636D7B0((llvm *)1, 0);
  if (v138 >= 5)
  {
    v78 = *(_QWORD *)(a3 + 16);
    v79 = *(_QWORD *)(v78 + 832);
    if (v79)
      v80 = *(_WORD *)(v79 + 8);
    else
      v80 = 0;
    v81 = sub_1C5D52060(v78, 216, (const llvm::APInt *)&v165, v150, v151, v141, v140, v80);
    v83 = v82;
    v167 = v169;
    v168 = 0x2100000000;
    v84 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v152, (const llvm::APInt *)&v165, (llvm *)5, 0, 1, 0);
    v86 = v85;
    v87 = v168;
    if (v168 >= HIDWORD(v168))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, v168 + 1, 16);
      v87 = v168;
    }
    v88 = (char *)v167 + 16 * v87;
    *v88 = v84;
    v88[1] = v86;
    v89 = v168 + 1;
    LODWORD(v168) = v168 + 1;
    if (v149)
    {
      v90 = 0;
      v91 = v83;
      do
      {
        v92 = *(_QWORD *)(a3 + 16);
        v93 = v147;
        v94 = v148;
        v95 = sub_1C6366AB4(v92, v90, (const llvm::APInt *)&v165, (llvm *)5, 0, 0, 0);
        v98 = 0;
        v99 = *(_QWORD *)(v92 + 832);
        if (v99)
          v98 = *(_WORD *)(v99 + 8);
        v100 = sub_1C5D56C70(v92, 148, (const llvm::APInt *)&v165, v93, v94, (uint64_t)v81, v91, v97, (uint64_t)v95, v96, v98);
        v102 = v101;
        v103 = v168;
        if (v168 >= (unint64_t)HIDWORD(v168))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, v168 + 1, 16);
          v103 = v168;
        }
        v104 = (uint64_t **)((char *)v167 + 16 * v103);
        *v104 = v100;
        v104[1] = v102;
        LODWORD(v168) = v168 + 1;
        v105 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), (v90 + HIDWORD(v152)), (const llvm::APInt *)&v165, (llvm *)5, 0, 1, 0);
        v107 = v106;
        v108 = v168;
        if (v168 >= (unint64_t)HIDWORD(v168))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, v168 + 1, 16);
          v108 = v168;
        }
        v109 = (char *)v167 + 16 * v108;
        *v109 = v105;
        v109[1] = v107;
        v89 = v168 + 1;
        LODWORD(v168) = v168 + 1;
        ++v90;
      }
      while (v90 < v149);
      v68 = v138;
      v67 = v139;
    }
    if (v68 == 6)
    {
      v110 = sub_1C61312D0(*(_QWORD *)(a3 + 16), (llvm *)9, 0);
      v112 = v111;
      v113 = v168;
      if (v168 >= HIDWORD(v168))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, v168 + 1, 16);
        v113 = v168;
      }
      v114 = (char *)v167 + 16 * v113;
      *v114 = v110;
      v114[1] = v112;
      LODWORD(v168) = v168 + 1;
      v115 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 4, (const llvm::APInt *)&v165, (llvm *)5, 0, 1, 0);
      v117 = v116;
      v118 = v168;
      if (v168 >= HIDWORD(v168))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, v168 + 1, 16);
        v118 = v168;
      }
      v119 = (char *)v167 + 16 * v118;
      *v119 = v115;
      v119[1] = v117;
      v89 = v168 + 1;
      LODWORD(v168) = v168 + 1;
    }
    v120 = sub_1C636E56C(*(_QWORD *)(a3 + 16), 18, (uint64_t)&v165, (llvm *)0xAE, 0, (uint64_t *)v167, v89);
    v121 = v170;
    *v170 = (unint64_t)v120;
    *((_DWORD *)v121 + 2) = 0;
    if (v167 != v169)
      free(v167);
  }
  if (v68 == 1)
  {
    v122 = *(_QWORD *)(a3 + 16);
    v123 = *(_QWORD *)(v122 + 832);
    if (v123)
      v124 = *(_WORD *)(v123 + 8);
    else
      v124 = 0;
    v125 = sub_1C5D52060(v122, 200, (const llvm::APInt *)&v165, (llvm *)4, 0, *v170, v170[1], v124);
    v126 = v170;
    *v170 = (unint64_t)v125;
    *((_DWORD *)v126 + 2) = v127;
  }
  v128 = sub_1C5D61678(*(_QWORD *)(a3 + 16), v146, (uint64_t)&v165, v77, 1, (uint64_t *)v170, v171);
  v129 = *(void **)(a3 + 16);
  v167 = *(void **)(v67 + 96);
  sub_1C636E10C(v129, (uint64_t)v128, &v167, 1);
  if (v170 != v172)
    free(v170);
  if (v155)
    llvm::MetadataTracking::untrack((uint64_t)&v155, v155);
  if (v165)
    llvm::MetadataTracking::untrack((uint64_t)&v165, v165);
  return v128;
}

_QWORD *sub_1C482EA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::LLVMContext *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  llvm *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t *v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint64_t *v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t **v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t *v99;
  _QWORD *v100;
  void *v101;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v108[8];
  uint64_t v109;
  char v110;
  uint64_t v111;
  int v112;
  llvm *v113;
  uint64_t v114;
  unsigned int v115;
  llvm *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  char v121;
  unsigned __int8 *v122;
  int v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unsigned __int8 *v132;
  int v133;
  _QWORD *v134;
  unint64_t v135;
  unsigned __int8 *v136;
  int v137;
  void *v138;
  uint64_t v139;
  _BYTE v140[528];
  uint64_t *v141;
  uint64_t v142;
  _QWORD v143[2];
  __int128 v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v11 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v12 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(v12 + 24);
  v13 = (unint64_t *)(v12 + 24);
  if ((v14 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v16 = (unint64_t)(sub_1C4825F50(v13) + 7) >> 3;
    if ((_DWORD)v15 == 1)
  }
  else
  {
    v16 = -1;
  }
  v17 = *(unsigned __int8 **)(a2 + 64);
  v136 = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&v136, v17, 2);
  v137 = *(_DWORD *)(a2 + 60);
  v18 = *(llvm **)(a2 + 80);
  v19 = *(_QWORD *)(a2 + 88);
  v134 = 0;
  LODWORD(v135) = 0;
  v20 = *(uint64_t **)(a2 + 32);
  v21 = *v20;
  v22 = *((unsigned int *)v20 + 2);
  v106 = *((unsigned int *)v20 + 12);
  v107 = v20[5];
  v23 = (_QWORD *)v20[10];
  v134 = v23;
  LODWORD(v135) = *((_DWORD *)v20 + 22);
  v24 = (unsigned __int8 *)v23[8];
  v132 = v24;
  if (v24)
    llvm::MetadataTracking::track((uint64_t)&v132, v24, 2);
  v133 = *((_DWORD *)v23 + 15);
  v103 = v21;
  v104 = v22;
  if (*(_WORD *)(a2 + 24) != 254 || (*(_WORD *)(a2 + 26) & 0x400) == 0)
  {
    v25 = (uint64_t)v18;
    goto LABEL_27;
  }
  if (!(_BYTE)v18)
  {
    if ((*(_DWORD *)(v19 + 8) & 0xFE) == 0x12)
      v26 = *(unsigned __int8 *)(**(_QWORD **)(v19 + 16) + 8);
    else
      v26 = *(_DWORD *)(v19 + 8);
    if (v26 == 13)
      goto LABEL_22;
LABEL_19:
    v27 = *(_QWORD *)(a3 + 16);
    v28 = sub_1C6366AB4(v27, 0, (const llvm::APInt *)&v136, (llvm *)5, 0, 0, 0);
    v31 = 0;
    v32 = *(_QWORD *)(v27 + 832);
    if (v32)
      v31 = *(_WORD *)(v32 + 8);
    v25 = (uint64_t)v18;
    v33 = sub_1C5D56C70(v27, 212, (const llvm::APInt *)&v136, v18, v19, v107, v106, v30, (uint64_t)v28, v29, v31);
    goto LABEL_26;
  }
  if (v18 - 120 >= 0x20
    && v18 - 2 >= 6
    && v18 - 15 >= 0x3C)
  {
    goto LABEL_19;
  }
LABEL_22:
  v35 = *(_QWORD *)(a3 + 16);
  v36 = *(_QWORD *)(v35 + 832);
  if (v36)
    v37 = *(_WORD *)(v36 + 8);
  else
    v37 = 0;
  v25 = (uint64_t)v18;
  v33 = sub_1C5D52060(v35, 201, (const llvm::APInt *)&v136, v18, v19, v107, v106, v37);
LABEL_26:
  v106 = v34;
  v107 = (uint64_t)v33;
LABEL_27:
  v38 = v19;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v129 = 0;
  v130 = 0;
  v127 = 0;
  *(_QWORD *)&v128 = 0;
  DWORD2(v128) = 0;
  v131 = a3;
  v134 = sub_1C482C624((uint64_t)v134, v135, *(_QWORD *)(a3 + 16), a4, a5, a6, a7, a8);
  LODWORD(v135) = v39;
  v105 = v16;
  sub_1C4831E60((uint64_t)&v119, (uint64_t *)&v134, v16, 1, 4, 0, 4, 0, 0);
  v40 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v136, (llvm *)5, 0, 1, 0);
  v42 = v41;
  v141 = v143;
  v143[0] = v107;
  v143[1] = v106;
  v142 = 0x800000001;
  if (!v119)
  {
    v144 = v128;
    LODWORD(v142) = 2;
  }
  v43 = sub_1C47F4C2C((uint64_t)&v119);
  v45 = v44;
  v46 = v142;
  if (v142 >= HIDWORD(v142))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v142 + 1, 16);
    v46 = v142;
  }
  v47 = &v141[2 * v46];
  *v47 = (uint64_t)v43;
  v47[1] = v45;
  v48 = (v142 + 1);
  LODWORD(v142) = v48;
  if (v48 >= HIDWORD(v142))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v48 + 1, 16);
    LODWORD(v48) = v142;
  }
  v49 = &v141[2 * v48];
  *v49 = (uint64_t)v40;
  v49[1] = v42;
  LODWORD(v142) = v142 + 1;
  sub_1C4825258(a1, (uint64_t)&v141, *(_QWORD *)(a3 + 16));
  v50 = v142;
  v51 = v105;
  if (v142 >= HIDWORD(v142))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v142 + 1, 16);
    v50 = v142;
  }
  v52 = &v141[2 * v50];
  *v52 = v103;
  v52[1] = v104;
  LODWORD(v142) = v142 + 1;
  if (v119)
  {
    if (v120)
      v54 = (char *)&unk_1ED7EA6B0;
    else
      v54 = (char *)&unk_1ED7EA7C8;
  }
  else
  {
    if (!v120)
    {
      if (v121)
        v53 = &unk_1ED7EA624;
      else
        v53 = &unk_1ED7EA480;
      goto LABEL_47;
    }
    v54 = (char *)&unk_1ED7EA50C;
  }
  if (v121)
    v53 = v54;
  else
    v53 = v54 + 140;
LABEL_47:
  v108[0] = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = -1;
  LOBYTE(v113) = 0;
  v114 = 0;
  v115 = -1;
  LOBYTE(v116) = 0;
  v117 = 0;
  v118 = -1;
  sub_1C482B3A4(v11, (uint64_t)v108, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), dword_1C642B670[v105 - 1], v25, v38, (uint64_t)v53);
  v55 = sub_1C636D7B0((llvm *)1, 0);
  if (v105 >= 5)
  {
    v56 = *(_QWORD *)(a3 + 16);
    v57 = *(_QWORD *)(v56 + 832);
    if (v57)
      v58 = *(_WORD *)(v57 + 8);
    else
      v58 = 0;
    v59 = sub_1C5D52060(v56, 216, (const llvm::APInt *)&v136, v116, v117, v107, v106, v58);
    v61 = v60;
    v138 = v140;
    v139 = 0x2100000000;
    v62 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v118, (const llvm::APInt *)&v136, (llvm *)5, 0, 1, 0);
    v64 = v63;
    v65 = v139;
    if (v139 >= HIDWORD(v139))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v139 + 1, 16);
      v65 = v139;
    }
    v66 = (char *)v138 + 16 * v65;
    *v66 = v62;
    v66[1] = v64;
    v67 = v139 + 1;
    LODWORD(v139) = v139 + 1;
    if (v115)
    {
      v68 = 0;
      v69 = v61;
      do
      {
        v70 = *(_QWORD *)(a3 + 16);
        v72 = v113;
        v71 = v114;
        v73 = sub_1C6366AB4(v70, v68, (const llvm::APInt *)&v136, (llvm *)5, 0, 0, 0);
        v76 = 0;
        v77 = *(_QWORD *)(v70 + 832);
        if (v77)
          v76 = *(_WORD *)(v77 + 8);
        v78 = sub_1C5D56C70(v70, 148, (const llvm::APInt *)&v136, v72, v71, (uint64_t)v59, v69, v75, (uint64_t)v73, v74, v76);
        v80 = v79;
        v81 = v139;
        if (v139 >= (unint64_t)HIDWORD(v139))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v139 + 1, 16);
          v81 = v139;
        }
        v82 = (uint64_t **)((char *)v138 + 16 * v81);
        *v82 = v78;
        v82[1] = v80;
        LODWORD(v139) = v139 + 1;
        v83 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), (v68 + HIDWORD(v118)), (const llvm::APInt *)&v136, (llvm *)5, 0, 1, 0);
        v85 = v84;
        v86 = v139;
        if (v139 >= (unint64_t)HIDWORD(v139))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v139 + 1, 16);
          v86 = v139;
        }
        v87 = (char *)v138 + 16 * v86;
        *v87 = v83;
        v87[1] = v85;
        v67 = v139 + 1;
        LODWORD(v139) = v139 + 1;
        ++v68;
      }
      while (v68 < v115);
      v51 = v105;
    }
    if (v51 == 6)
    {
      v88 = sub_1C61312D0(*(_QWORD *)(a3 + 16), (llvm *)9, 0);
      v90 = v89;
      v91 = v139;
      if (v139 >= HIDWORD(v139))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v139 + 1, 16);
        v91 = v139;
      }
      v92 = (char *)v138 + 16 * v91;
      *v92 = v88;
      v92[1] = v90;
      LODWORD(v139) = v139 + 1;
      v93 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 4, (const llvm::APInt *)&v136, (llvm *)5, 0, 1, 0);
      v95 = v94;
      v96 = v139;
      if (v139 >= HIDWORD(v139))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v139 + 1, 16);
        v96 = v139;
      }
      v97 = (char *)v138 + 16 * v96;
      *v97 = v93;
      v97[1] = v95;
      v67 = v139 + 1;
      LODWORD(v139) = v139 + 1;
    }
    v98 = sub_1C636E56C(*(_QWORD *)(a3 + 16), 18, (uint64_t)&v136, (llvm *)0xAE, 0, (uint64_t *)v138, v67);
    v99 = v141;
    *v141 = (uint64_t)v98;
    *((_DWORD *)v99 + 2) = 0;
    if (v138 != v140)
      free(v138);
  }
  if (v51 == 1)
    llvm::report_fatal_error((llvm *)"Store of byte to local memory is unsupported", (const char *)1);
  v100 = sub_1C5D61678(*(_QWORD *)(a3 + 16), v112, (uint64_t)&v136, v55, 1, v141, v142);
  v101 = *(void **)(a3 + 16);
  v138 = *(void **)(a2 + 96);
  sub_1C636E10C(v101, (uint64_t)v100, &v138, 1);
  if (v141 != v143)
    free(v141);
  if (v122)
    llvm::MetadataTracking::untrack((uint64_t)&v122, v122);
  if (v132)
    llvm::MetadataTracking::untrack((uint64_t)&v132, v132);
  if (v136)
    llvm::MetadataTracking::untrack((uint64_t)&v136, v136);
  return v100;
}

_QWORD *sub_1C482F2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::LLVMContext *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  llvm *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD *v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint64_t *v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  unsigned int v67;
  unint64_t i;
  uint64_t v69;
  uint64_t v70;
  llvm *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t **v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t *v98;
  _QWORD *v99;
  void *v100;
  uint64_t v102;
  uint64_t v104;
  llvm::LLVMContext *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109[8];
  uint64_t v110;
  char v111;
  uint64_t v112;
  int v113;
  llvm *v114;
  uint64_t v115;
  unsigned int v116;
  llvm *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  char v122;
  char v123;
  char v124;
  unsigned __int8 *v125;
  int v126;
  char v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  int v136;
  _QWORD *v137;
  unint64_t v138;
  unsigned __int8 *v139;
  int v140;
  void *v141;
  uint64_t v142;
  _BYTE v143[528];
  uint64_t *v144;
  unsigned int v145;
  unsigned int v146;
  _QWORD v147[2];
  __int128 v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  v10 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
  v11 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(v11 + 24);
  v12 = (unint64_t *)(v11 + 24);
  if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v15 = (unint64_t)(sub_1C4825F50(v12) + 7) >> 3;
    if ((_DWORD)v14 == 1)
  }
  else
  {
    v15 = -1;
  }
  v16 = *(unsigned __int8 **)(a2 + 64);
  v139 = v16;
  if (v16)
    llvm::MetadataTracking::track((uint64_t)&v139, v16, 2);
  v140 = *(_DWORD *)(a2 + 60);
  v17 = *(llvm **)(a2 + 80);
  v18 = *(_QWORD *)(a2 + 88);
  v137 = 0;
  LODWORD(v138) = 0;
  v104 = v18;
  v105 = v10;
  if (*(_WORD *)(a2 + 24) != 254)
  {
    v106 = 0;
    v108 = 0;
    v102 = 0;
    v21 = 0;
    goto LABEL_25;
  }
  v19 = *(uint64_t **)(a2 + 32);
  v20 = *v19;
  v21 = *((_DWORD *)v19 + 2);
  v106 = *((unsigned int *)v19 + 12);
  v108 = v19[5];
  v137 = (_QWORD *)v19[10];
  LODWORD(v138) = *((_DWORD *)v19 + 22);
  v102 = v20;
  if ((*(_BYTE *)(a2 + 27) & 4) == 0)
    goto LABEL_25;
  if (!(_BYTE)v17)
  {
    if ((*(_DWORD *)(v18 + 8) & 0xFE) == 0x12)
      v22 = *(unsigned __int8 *)(**(_QWORD **)(v18 + 16) + 8);
    else
      v22 = *(_DWORD *)(v18 + 8);
    if (v22 == 13)
      goto LABEL_20;
LABEL_17:
    v23 = *(_QWORD *)(a3 + 16);
    v24 = sub_1C6366AB4(v23, 0, (const llvm::APInt *)&v139, (llvm *)5, 0, 0, 0);
    v27 = 0;
    v28 = *(_QWORD *)(v23 + 832);
    if (v28)
      v27 = *(_WORD *)(v28 + 8);
    v29 = sub_1C5D56C70(v23, 212, (const llvm::APInt *)&v139, v17, v18, v108, v106, v26, (uint64_t)v24, v25, v27);
    goto LABEL_24;
  }
  if (v17 - 120 >= 0x20
    && v17 - 2 >= 6
    && v17 - 15 >= 0x3C)
  {
    goto LABEL_17;
  }
LABEL_20:
  v31 = *(_QWORD *)(a3 + 16);
  v32 = *(_QWORD *)(v31 + 832);
  if (v32)
    v33 = *(_WORD *)(v32 + 8);
  else
    v33 = 0;
  v29 = sub_1C5D52060(v31, 201, (const llvm::APInt *)&v139, v17, v18, v108, v106, v33);
LABEL_24:
  v106 = v30;
  v108 = (uint64_t)v29;
LABEL_25:
  v34 = (uint64_t)v17;
  v35 = (uint64_t)v137;
  v36 = (unsigned __int8 *)v137[8];
  v135 = v36;
  v37 = (uint64_t)v137;
  if (v36)
  {
    llvm::MetadataTracking::track((uint64_t)&v135, v36, 2);
    v37 = (uint64_t)v137;
  }
  v136 = *(_DWORD *)(v35 + 60);
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v132 = 0;
  v133 = 0;
  v130 = 0;
  *(_QWORD *)&v131 = 0;
  DWORD2(v131) = 0;
  v134 = a3;
  v137 = sub_1C482C624(v37, v138, *(_QWORD *)(a3 + 16), a4, a5, a6, a7, a8);
  LODWORD(v138) = v38;
  sub_1C4831E60((uint64_t)&v122, (uint64_t *)&v137, v15, 1, 4, 0, 4, 0, 0);
  v39 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v139, (llvm *)5, 0, 1, 0);
  v41 = v40;
  v42 = sub_1C47F4C2C((uint64_t)&v122);
  v44 = v43;
  if (v15 == 1)
  {
    v45 = *(_QWORD *)(a3 + 16);
    v120 = v139;
    if (v139)
      llvm::MetadataTracking::track((uint64_t)&v120, v139, 2);
    v121 = v140;
    v42 = sub_1C6132F18(v45, (const llvm::APInt *)&v120, (uint64_t)v42, v44);
    v44 = v44 & 0xFFFFFFFF00000000 | v46;
    if (v120)
      llvm::MetadataTracking::untrack((uint64_t)&v120, v120);
  }
  v144 = v147;
  v146 = 8;
  v147[0] = v108;
  v147[1] = v106;
  if (v122)
  {
    v47 = 1;
  }
  else
  {
    v148 = v131;
    v47 = 2;
  }
  v48 = &v147[2 * v47];
  *v48 = v42;
  v48[1] = v44;
  v49 = &v147[2 * v47 + 2];
  *v49 = v39;
  v49[1] = v41;
  v145 = v47 + 2;
  sub_1C4825258(a1, (uint64_t)&v144, *(_QWORD *)(a3 + 16));
  v50 = v145;
  if (v145 >= v146)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, (uint64_t)v147, v145 + 1, 16);
    v50 = v145;
  }
  v51 = &v144[2 * v50];
  *v51 = v102;
  v51[1] = v21;
  ++v145;
  if (v122)
  {
    v52 = v104;
    if (v123)
      v54 = (char *)&unk_1ED7EA6B0;
    else
      v54 = (char *)&unk_1ED7EA7C8;
  }
  else
  {
    v52 = v104;
    if (!v123)
    {
      if (v124)
        v53 = &unk_1ED7EA624;
      else
        v53 = &unk_1ED7EA480;
      goto LABEL_49;
    }
    v54 = (char *)&unk_1ED7EA50C;
  }
  if (v124)
    v53 = v54;
  else
    v53 = v54 + 140;
LABEL_49:
  v109[0] = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v113 = -1;
  LOBYTE(v114) = 0;
  v115 = 0;
  v116 = -1;
  LOBYTE(v117) = 0;
  v118 = 0;
  v119 = -1;
  sub_1C482B3A4(v105, (uint64_t)v109, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16), dword_1C642B670[v15 - 1], v34, v52, (uint64_t)v53);
  v55 = sub_1C636D7B0((llvm *)1, 0);
  if (v15 >= 5)
  {
    v56 = *(_QWORD *)(a3 + 16);
    v57 = *(_QWORD *)(v56 + 832);
    if (v57)
      v58 = *(_WORD *)(v57 + 8);
    else
      v58 = 0;
    v59 = sub_1C5D52060(v56, 216, (const llvm::APInt *)&v139, v117, v118, v108, v106, v58);
    v61 = v60;
    v141 = v143;
    v142 = 0x2100000000;
    v62 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v119, (const llvm::APInt *)&v139, (llvm *)5, 0, 1, 0);
    v64 = v63;
    v65 = v142;
    if (v142 >= HIDWORD(v142))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v142 + 1, 16);
      v65 = v142;
    }
    v66 = (char *)v141 + 16 * v65;
    *v66 = v62;
    v66[1] = v64;
    v67 = v142 + 1;
    LODWORD(v142) = v142 + 1;
    if (v116)
    {
      v107 = v55;
      for (i = 0; i < v116; ++i)
      {
        v69 = *(_QWORD *)(a3 + 16);
        v71 = v114;
        v70 = v115;
        v72 = sub_1C6366AB4(v69, i, (const llvm::APInt *)&v139, (llvm *)5, 0, 0, 0);
        v75 = 0;
        v76 = *(_QWORD *)(v69 + 832);
        if (v76)
          v75 = *(_WORD *)(v76 + 8);
        v77 = sub_1C5D56C70(v69, 148, (const llvm::APInt *)&v139, v71, v70, (uint64_t)v59, v61, v74, (uint64_t)v72, v73, v75);
        v79 = v78;
        v80 = v142;
        if (v142 >= (unint64_t)HIDWORD(v142))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v142 + 1, 16);
          v80 = v142;
        }
        v81 = (uint64_t **)((char *)v141 + 16 * v80);
        *v81 = v77;
        v81[1] = v79;
        LODWORD(v142) = v142 + 1;
        v82 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), (i + HIDWORD(v119)), (const llvm::APInt *)&v139, (llvm *)5, 0, 1, 0);
        v84 = v83;
        v85 = v142;
        if (v142 >= (unint64_t)HIDWORD(v142))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v142 + 1, 16);
          v85 = v142;
        }
        v86 = (char *)v141 + 16 * v85;
        *v86 = v82;
        v86[1] = v84;
        v67 = v142 + 1;
        LODWORD(v142) = v142 + 1;
      }
      v55 = v107;
    }
    if (v15 == 6)
    {
      v87 = sub_1C61312D0(*(_QWORD *)(a3 + 16), (llvm *)9, 0);
      v89 = v88;
      v90 = v142;
      if (v142 >= HIDWORD(v142))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v142 + 1, 16);
        v90 = v142;
      }
      v91 = (char *)v141 + 16 * v90;
      *v91 = v87;
      v91[1] = v89;
      LODWORD(v142) = v142 + 1;
      v92 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 4, (const llvm::APInt *)&v139, (llvm *)5, 0, 1, 0);
      v94 = v93;
      v95 = v142;
      if (v142 >= HIDWORD(v142))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v142 + 1, 16);
        v95 = v142;
      }
      v96 = (char *)v141 + 16 * v95;
      *v96 = v92;
      v96[1] = v94;
      v67 = v142 + 1;
      LODWORD(v142) = v142 + 1;
    }
    v97 = sub_1C636E56C(*(_QWORD *)(a3 + 16), 18, (uint64_t)&v139, (llvm *)0xAE, 0, (uint64_t *)v141, v67);
    v98 = v144;
    *v144 = (uint64_t)v97;
    *((_DWORD *)v98 + 2) = 0;
    if (v141 != v143)
      free(v141);
  }
  if (v15 == 1)
    llvm::report_fatal_error((llvm *)"Store of byte to shared memory is unsupported", (const char *)1);
  v99 = sub_1C5D61678(*(_QWORD *)(a3 + 16), v113, (uint64_t)&v139, v55, 1, v144, v145);
  v100 = *(void **)(a3 + 16);
  v141 = *(void **)(a2 + 96);
  sub_1C636E10C(v100, (uint64_t)v99, &v141, 1);
  if (v144 != v147)
    free(v144);
  if (v125)
    llvm::MetadataTracking::untrack((uint64_t)&v125, v125);
  if (v135)
    llvm::MetadataTracking::untrack((uint64_t)&v135, v135);
  if (v139)
    llvm::MetadataTracking::untrack((uint64_t)&v139, v139);
  return v99;
}

void sub_1C482FB44(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C482FBD8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C482FC64()
{
  return "AGX1 iterator forwarding pass";
}

void sub_1C482FC74(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C482FC98(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _WORD *v13;
  unsigned __int16 v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  _WORD *v30;
  unsigned __int16 v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned __int16 *v41;
  unint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v73;
  int v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int v81;
  _QWORD v82[2];
  int v83;
  _QWORD v84[2];
  int v85;
  void *v86[2];
  _BYTE v87[64];
  _QWORD **v88;
  _QWORD *v89[4];

  v89[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v73 = a2 + 320;
  v2 = *(_QWORD **)(a2 + 320);
  if (v2 != (_QWORD *)(a2 + 320))
  {
    v3 = 0;
    while (1)
    {
      v77 = v3;
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
      v5 = v4;
      v84[0] = 0;
      v84[1] = 0;
      v85 = 0;
      v76 = v2;
      v6 = v2 + 6;
      v82[0] = 0;
      v82[1] = 0;
      v7 = -1;
      v8 = v2 + 6;
      v83 = 0;
      do
      {
        v8 = (_QWORD *)v8[1];
        ++v7;
      }
      while (v8 != v6);
      v9 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (!v9 || (*(_BYTE *)v9 & 4) == 0)
      {
        while ((*(_WORD *)(v9 + 44) & 4) != 0)
          v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((_QWORD *)v9 != v6)
        break;
      v70 = 0;
      v69 = 0;
      v71 = 0;
LABEL_92:
      MEMORY[0x1CAA32FB4](v69, 8);
      MEMORY[0x1CAA32FB4](v70, 8);
      v3 = v77 | v71;
      v2 = (_QWORD *)*v76;
      if (*v76 == v73)
        return v3 & 1;
    }
    v75 = 0;
    v78 = v4;
    v79 = v2 + 6;
    while ((*(_BYTE *)(*(_QWORD *)(v9 + 16) + 17) & 2) == 0)
    {
LABEL_43:
      v42 = v9;
      if ((*(_WORD *)(v9 + 44) & 4) != 0)
      {
        v42 = v9;
        do
          v42 = *(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v42 + 44) & 4) != 0);
      }
      v43 = *(_QWORD *)(v9 + 24) + 48;
      v44 = *(int **)(v42 + 32);
      v45 = *(unsigned int *)(v42 + 40);
      v46 = &v44[8 * v45];
      if (!(_DWORD)v45)
      {
        v65 = *(_QWORD *)(v42 + 8);
        if (v65 == v43)
        {
          v42 = *(_QWORD *)(v9 + 24) + 48;
          goto LABEL_45;
        }
        v42 = *(_QWORD *)(v9 + 24) + 48;
        if ((*(_WORD *)(v65 + 44) & 4) != 0)
        {
          while (1)
          {
            v67 = v65;
            v68 = *(unsigned int *)(v65 + 40);
            if ((_DWORD)v68)
              break;
            v65 = *(_QWORD *)(v65 + 8);
            if (v65 == v43 || (*(_WORD *)(v65 + 44) & 4) == 0)
            {
              v42 = *(_QWORD *)(v9 + 24) + 48;
LABEL_90:
              v44 = *(int **)(v67 + 32);
              v46 = &v44[8 * v68];
              v5 = v78;
              goto LABEL_45;
            }
          }
          v42 = v65;
          goto LABEL_90;
        }
      }
LABEL_45:
      while (v44 != v46)
      {
        v47 = *v44;
        if (!*v44 && (v47 & 0x2000000) == 0)
        {
          v51 = v44[1];
          if (v51)
          {
            v52 = (unsigned __int16 *)(*(_QWORD *)(v5 + 56)
                                     + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v5 + 8) + 24 * v51 + 16) >> 3) & 0x1FFFFFFE));
            v54 = *v52;
            v53 = v52 + 1;
            v55 = v54 + (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 24 * v51 + 16) & 0xF) * v51;
            if ((v47 & 0x1000000) != 0)
            {
              do
              {
                LODWORD(v86[0]) = (unsigned __int16)v55;
                v58 = sub_1C48304AC((uint64_t)v82, (int *)v86);
                *(_DWORD *)v58 = v7;
                *(_QWORD *)(v58 + 8) = v9;
                v59 = *v53++;
                v55 += v59;
              }
              while (v59);
            }
            else
            {
              do
              {
                LODWORD(v86[0]) = (unsigned __int16)v55;
                v56 = sub_1C48304AC((uint64_t)v84, (int *)v86);
                *(_DWORD *)v56 = v7;
                *(_QWORD *)(v56 + 8) = v9;
                v57 = *v53++;
                v55 += v57;
              }
              while (v57);
            }
          }
        }
        v44 += 8;
        if (v44 == v46)
        {
          v48 = *(_QWORD *)(v42 + 8);
          if (v48 == v43)
            break;
          v44 = v46;
          v42 = v43;
          if ((*(_WORD *)(v48 + 44) & 4) != 0)
          {
            while (1)
            {
              v49 = v48;
              v50 = *(unsigned int *)(v48 + 40);
              if ((_DWORD)v50)
                break;
              v48 = *(_QWORD *)(v48 + 8);
              if (v48 == v43 || (*(_WORD *)(v48 + 44) & 4) == 0)
              {
                v42 = v43;
                goto LABEL_62;
              }
            }
            v42 = v48;
LABEL_62:
            v44 = *(int **)(v49 + 32);
            v46 = &v44[8 * v50];
          }
        }
      }
LABEL_63:
      v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
      {
        v60 = v79;
LABEL_68:
        while ((*(_WORD *)(v9 + 44) & 4) != 0)
          v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_69;
      }
      v60 = v79;
      if ((*(_BYTE *)v9 & 4) == 0)
        goto LABEL_68;
LABEL_69:
      --v7;
      if ((_QWORD *)v9 == v60)
      {
        v69 = v82[0];
        v70 = v84[0];
        v71 = v75;
        goto LABEL_92;
      }
    }
    v80 = 0;
    v10 = v5;
    v11 = *(_DWORD *)(*(_QWORD *)(v9 + 32) + 4);
    v86[0] = v87;
    v86[1] = (void *)0x1000000000;
    v89[0] = 0;
    v89[1] = 0;
    v88 = v89;
    v12 = *(unsigned int *)(*(_QWORD *)(v10 + 8) + 24 * v11 + 16);
    v13 = (_WORD *)(*(_QWORD *)(v10 + 56) + ((v12 >> 3) & 0x1FFFFFFE));
    v14 = *v13 + (v12 & 0xF) * v11;
    v15 = v84[0];
    v16 = v85;
    v17 = v85 - 1;
    v18 = -1;
    do
    {
      v19 = v14;
      v81 = v14;
      sub_1C48302EC((uint64_t)v86, &v81);
      if (v16)
      {
        v20 = (37 * v19) & v17;
        v21 = (int *)(v15 + 24 * v20);
        v22 = *v21;
        if (*v21 == v19)
        {
LABEL_16:
          if (v20 != v16 && v21[2] < v18)
          {
            v80 = *((_QWORD *)v21 + 2);
            v18 = v21[2];
          }
        }
        else
        {
          v24 = 1;
          while (v22 != -1)
          {
            v25 = v20 + v24++;
            v20 = v25 & v17;
            v21 = (int *)(v15 + 24 * v20);
            v22 = *v21;
            if (*v21 == v19)
              goto LABEL_16;
          }
        }
      }
      v23 = (unsigned __int16)v13[1];
      ++v13;
      v14 = v23 + v19;
    }
    while (v23);
    v26 = *(_QWORD *)(v78 + 8);
    v27 = *(unsigned int *)(v26 + 24 * v11 + 16);
    v28 = v27 & 0xF;
    v29 = *(_QWORD *)(v78 + 56);
    v30 = (_WORD *)(v29 + ((v27 >> 3) & 0x1FFFFFFE));
    v31 = *v30 + v28 * v11;
    v32 = v83 - 1;
    v33 = -1;
    do
    {
      if (v83)
      {
        v34 = (37 * v31) & v32;
        v35 = *(_DWORD *)(v82[0] + 24 * v34);
        if (v35 == v31)
        {
LABEL_27:
          if (v34 != v83)
          {
            v36 = *(_DWORD *)(v82[0] + 24 * v34 + 8);
            if (v36 < v33)
              v33 = v36;
          }
        }
        else
        {
          v38 = 1;
          while (v35 != -1)
          {
            v39 = v34 + v38++;
            v34 = v39 & v32;
            v35 = *(_DWORD *)(v82[0] + 24 * v34);
            if (v35 == v31)
              goto LABEL_27;
          }
        }
      }
      v37 = (unsigned __int16)v30[1];
      ++v30;
      v31 += v37;
    }
    while (v37);
    v40 = 1;
    v5 = v78;
    if (v18 != -1 && v18 <= v33)
    {
      v41 = *(unsigned __int16 **)(v80 + 16);
      if ((v41[8] & 0x20) == 0)
      {
LABEL_39:
        v40 = 1;
        goto LABEL_40;
      }
      v61 = *v41;
      v62 = sub_1C612B500(v61, 7);
      v63 = sub_1C612B500(v61, 15);
      v64 = *(_QWORD *)(v80 + 32);
      if ((sub_1C4830400((uint64_t)v86, *(_DWORD *)(v64 + 32 * v62 + 4), v26, v29) & 1) != 0
        || v63 != -1
        && *(_QWORD *)(v64 + 32 * sub_1C612B500(v61, 10) + 16) == 7
        && !*(_BYTE *)(v64 + 32 * v63)
        && sub_1C4830400((uint64_t)v86, *(_DWORD *)(v64 + 32 * v63 + 4), v26, v29))
      {
        v66 = sub_1C612B500(**(unsigned __int16 **)(v9 + 16), 3);
        if (v66 == -1)
          goto LABEL_39;
        v40 = 1;
        *(_QWORD *)(*(_QWORD *)(v9 + 32) + 32 * v66 + 16) = 1;
        v75 = 1;
      }
      else
      {
        v40 = 0;
      }
    }
LABEL_40:
    sub_1C47655E8((uint64_t)&v88, v89[0]);
    if (v86[0] != v87)
      free(v86[0]);
    if (!v40)
      goto LABEL_63;
    goto LABEL_43;
  }
  LOBYTE(v3) = 0;
  return v3 & 1;
}

unint64_t sub_1C48302EC(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;

  if (*(_QWORD *)(a1 + 96))
  {
    sub_1C4778ED8((uint64_t **)(a1 + 80), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 0xF)
    {
      do
      {
        v11 = (unsigned int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_1C4778ED8((uint64_t **)(a1 + 80), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_1C4778ED8((uint64_t **)(a1 + 80), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 4);
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t sub_1C4830400(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  __int16 v5;
  _WORD *v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;

  v4 = *(unsigned int *)(a3 + 24 * a2 + 16);
  v5 = v4 & 0xF;
  v6 = (_WORD *)(a4 + ((v4 >> 3) & 0x1FFFFFFE));
  v7 = *v6 + v5 * a2;
  v8 = *(unsigned int *)(a1 + 8);
  while (*(_QWORD *)(a1 + 96))
  {
    if (*(_QWORD *)(a1 + 88))
    {
      v9 = *(uint64_t **)(a1 + 88);
      do
      {
        v10 = *((_DWORD *)v9 + 7);
        if (v10 <= v7)
        {
          if (v10 >= v7)
            return 1;
          ++v9;
        }
        v9 = (uint64_t *)*v9;
      }
      while (v9);
    }
LABEL_16:
    v13 = (unsigned __int16)v6[1];
    ++v6;
    v7 += v13;
    if (!v13)
      return 0;
  }
  if (!(_DWORD)v8)
    goto LABEL_16;
  v11 = 4 * v8;
  v12 = *(_DWORD **)a1;
  while (*v12 != v7)
  {
    ++v12;
    v11 -= 4;
    if (!v11)
      goto LABEL_16;
  }
  if (!v11)
    goto LABEL_16;
  return 1;
}

uint64_t sub_1C48304AC(uint64_t a1, int *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;

  v24 = 0;
  v4 = sub_1C48306A4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
  v5 = v24;
  if ((v4 & 1) != 0)
    return v5 + 8;
  v25 = v24;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    v8 = 2 * v7;
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    v10 = *(_QWORD *)a1;
    v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40)
      v14 = v13 + 1;
    else
      v14 = 64;
    *(_DWORD *)(a1 + 16) = v14;
    v15 = operator new(24 * v14, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v15;
    if (v10)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v16 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v16)
      {
        v17 = 24 * v16;
        do
        {
          *v15 = -1;
          v15 += 6;
          v17 -= 24;
        }
        while (v17);
      }
      if ((_DWORD)v7)
      {
        v18 = 24 * v7;
        v19 = (_OWORD *)(v10 + 8);
        do
        {
          v20 = *((_DWORD *)v19 - 2);
          if (v20 <= 0xFFFFFFFD)
          {
            v26 = 0;
            sub_1C48306A4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v26);
            v21 = v26;
            *v26 = v20;
            *(_OWORD *)(v21 + 2) = *v19;
            ++*(_DWORD *)(a1 + 8);
          }
          v19 = (_OWORD *)((char *)v19 + 24);
          v18 -= 24;
        }
        while (v18);
      }
      MEMORY[0x1CAA32FB4](v10, 8);
      v15 = *(_DWORD **)a1;
      LODWORD(v22) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v22 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v22)
      {
        v23 = 0;
        do
        {
          v15[v23] = -1;
          v23 += 6;
        }
        while (6 * v22 != v23);
      }
    }
    sub_1C48306A4((uint64_t)v15, v22, *a2, &v25);
    v6 = *(_DWORD *)(a1 + 8);
    v5 = v25;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*(_DWORD *)v5 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)v5 = *a2;
  *(_DWORD *)(v5 + 8) = -1;
  *(_QWORD *)(v5 + 16) = 0;
  return v5 + 8;
}

uint64_t sub_1C48306A4(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

BOOL sub_1C483073C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v6;
  _BOOL8 v7;
  uint64_t i;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t j;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  int v27;
  unint64_t v29;
  unsigned int v30;
  void *v31;
  unsigned int v32;
  void *v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  _DWORD v46[2];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int16 *)(a2 + 24);
  if (v6 == 56)
    return (!a4 || (*(_WORD *)(a2 + 72) & 2) != 0) && (!a5 || (*(_WORD *)(a2 + 72) & 4) != 0);
  if (v6 != 172)
    return 0;
  for (i = 0; i != 64; i += 32)
  {
    v11 = (char *)&v39 + i;
    *((_DWORD *)v11 + 2) = 1;
    *(_QWORD *)v11 = 0;
    *((_DWORD *)v11 + 6) = 1;
    *((_QWORD *)v11 + 2) = 0;
  }
  sub_1C6368768(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0, (uint64_t)&v35);
  if (v40 >= 0x41 && v39)
    MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  v12 = v35;
  v39 = v35;
  v13 = v36;
  v40 = v36;
  v36 = 0;
  if (v42 >= 0x41 && v41)
  {
    MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    v41 = v37;
    v42 = v38;
    v38 = 0;
    if (v36 >= 0x41 && v35)
      MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  }
  else
  {
    v41 = v37;
    v42 = v38;
  }
  sub_1C6368768(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), 0, (uint64_t)&v35);
  if (v44 >= 0x41 && v43)
    MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  v14 = v35;
  v43 = v35;
  v15 = v36;
  v44 = v36;
  v36 = 0;
  if (v46[0] >= 0x41u && v45)
  {
    MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
    v45 = v37;
    v46[0] = v38;
    v38 = 0;
    if (v36 >= 0x41 && v35)
      MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  }
  else
  {
    v45 = v37;
    v46[0] = v38;
  }
  v34 = v13;
  if (v13 > 0x40)
  {
    v33 = (void *)operator new[]();
    memcpy(v33, (const void *)v12, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v33);
    LODWORD(v13) = v34;
    v17 = (unint64_t)v33;
  }
  else
  {
    if ((_DWORD)v13)
      v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
    else
      v16 = 0;
    v17 = v16 & ~v12;
  }
  v32 = v15;
  if (v15 > 0x40)
  {
    v31 = (void *)operator new[]();
    memcpy(v31, (const void *)v14, ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v31);
    v20 = v32;
    v19 = (unint64_t)v31;
    if (v32 >= 0x41)
    {
      v25 = 0;
      v26 = ((unint64_t)v32 + 63) >> 6;
      do
      {
        *(_QWORD *)(v19 + v25) &= *(_QWORD *)(v17 + v25);
        v25 += 8;
      }
      while (8 * v26 != v25);
      v27 = 0;
      do
      {
        if (v26-- < 1)
          break;
        v29 = *(_QWORD *)(v19 + 8 * v26);
        v27 += __clz(v29);
      }
      while (!v29);
      v7 = 0;
      v30 = v20 | 0xFFFFFFC0;
      if ((v20 & 0x3F) == 0)
        v30 = 0;
      if (v20 - v27 - v30 <= 0x40)
        v7 = *(_QWORD *)v19 == 0;
      if (v19)
        MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
      goto LABEL_29;
    }
  }
  else
  {
    if ((_DWORD)v15)
      v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    else
      v18 = 0;
    v19 = v18 & ~v14;
  }
  v7 = (v19 & v17) == 0;
LABEL_29:
  if (v13 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  for (j = 0; j != -16; j -= 8)
  {
    v22 = (char *)&v39 + j * 4;
    if (v46[j] >= 0x41u)
    {
      v23 = *((_QWORD *)v22 + 6);
      if (v23)
        MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
    }
    if (*((_DWORD *)v22 + 10) >= 0x41u)
    {
      v24 = *((_QWORD *)v22 + 4);
      if (v24)
        MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    }
  }
  return v7;
}

BOOL sub_1C4830BD0(uint64_t a1, uint64_t a2, _BOOL8 a3, unsigned int a4)
{
  int v8;
  unint64_t ExtendedSizeInBits;
  const char *v11;
  unint64_t v12;
  const char *v13;
  BOOL v14;
  _BOOL8 result;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  unint64_t v19;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  _BOOL8 v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  unsigned int v37;

  v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 == 198 || (v8 - 199) <= 1)
  {
    v35 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8));
    if ((_BYTE)v35)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v35);
    else
      ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v35);
    if ((_DWORD)v11 == 1)
    {
      v32 = ExtendedSizeInBits;
      ExtendedSizeInBits = v32;
    }
    v8 = *(unsigned __int16 *)(a2 + 24);
    if (ExtendedSizeInBits <= a4)
    {
      if (v8 != 199)
        return 1;
      v14 = sub_1C6368648(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0);
      result = 1;
      if (v14)
        return result;
      *(_BYTE *)(a1 + 104) = 1;
      v8 = *(unsigned __int16 *)(a2 + 24);
    }
  }
  if (v8 == 198
    || v8 == 200
    || v8 == 199
    && sub_1C6368648(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0))
  {
    v35 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8));
    if ((_BYTE)v35)
      v12 = sub_1C47A8C74((unsigned __int8 *)&v35);
    else
      v12 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v35);
    if ((_DWORD)v13 == 1)
    {
      v31 = v12;
      v12 = v31;
    }
    if (v12 <= a4)
      return 1;
  }
  v16 = *(unsigned __int16 *)(a2 + 24);
  if ((v16 - 3) <= 1)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40);
    v18 = v16 != 3;
    v35 = *(_OWORD *)(v17 + 80);
    if ((_BYTE)v35)
      v19 = sub_1C47A8C74((unsigned __int8 *)&v35);
    else
      v19 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v35);
    v21 = a4 - v18;
    if ((_DWORD)v20 == 1)
    {
      v34 = v19;
      v19 = v34;
    }
    if (v19 <= v21)
      return 1;
    v35 = *(_OWORD *)(v17 + 80);
    if ((_BYTE)v35)
      v22 = sub_1C47A8C74((unsigned __int8 *)&v35);
    else
      v22 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v35);
    if ((_DWORD)v23 == 1)
    {
      v33 = v22;
      v22 = v33;
    }
    if (v22 == a4)
      *(_BYTE *)(a1 + 104) = 1;
  }
  sub_1C6368768(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), a2, a3, 0, (uint64_t)&v35);
  v24 = -1 << (a4 - 1);
  v25 = DWORD2(v35);
  v26 = (uint64_t *)v35;
  if (DWORD2(v35) < 0x41)
    v26 = (uint64_t *)&v35;
  v27 = *v26;
  result = (v27 & v24) == v24;
  if ((v27 & v24) != v24 && (unint64_t)~v27 >> a4 == 0)
    *(_BYTE *)(a1 + 104) = 1;
  if (v37 >= 0x41 && v36)
  {
    v30 = (v27 & v24) == v24;
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    result = v30;
    v25 = DWORD2(v35);
  }
  if (v25 >= 0x41)
  {
    if ((_QWORD)v35)
    {
      v29 = result;
      MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
      return v29;
    }
  }
  return result;
}

uint64_t sub_1C4830EF8(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t a4, _BYTE *a5, int a6)
{
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned int ExtendedSizeInBits;
  const char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  const char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  uint64_t v70;
  _QWORD *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v77;
  BOOL v78;
  _BOOL4 v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  uint64_t v84;
  _QWORD *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  const void **v95;
  unsigned int v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD **v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  int v103;
  uint64_t result;
  uint64_t v105;
  _QWORD *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v119;
  uint64_t v120;
  int v121;
  BOOL v122;
  uint64_t v123;
  void **v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  llvm *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  llvm *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  llvm *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  llvm *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  void **v173;
  unsigned int v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  void **v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  llvm *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  llvm *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  __int16 v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  llvm *v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  __int16 v211;
  unsigned int v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  llvm *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  uint64_t *v229;
  int v230;
  uint64_t *v231;
  uint64_t v232;
  void **v233;
  void **v234;
  unint64_t v235;
  int v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  const llvm::APInt *v241;
  unsigned int v243;
  void *v244;
  unsigned int v245;
  void *__src;
  unsigned int v247;
  uint64_t **v248;
  unsigned int v249;

  v12 = *(unsigned __int8 *)(a1 + 32);
  v11 = (unsigned __int8 *)(a1 + 32);
  v13 = __clz(*((_QWORD *)v11 - 1) - 1);
  if (v12)
    ExtendedSizeInBits = sub_1C47A8C74(v11);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v11);
  v243 = ExtendedSizeInBits;
  if ((_DWORD)v15 == 1)
  v16 = (64 - v13);
  v17 = (unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
    v18 = sub_1C47A8C74(v17);
  else
    v18 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v17);
  v21 = v18;
  if ((_DWORD)v19 == 1)
  *a5 = 0;
  v22 = *(_QWORD *)a4;
  v23 = *(unsigned __int16 *)(*(_QWORD *)a4 + 24);
  if (v23 == 35 || v23 == 11)
  {
    v25 = *(uint64_t **)a3;
    do
    {
LABEL_17:
      v26 = *((unsigned __int16 *)v25 + 12);
      if (v26 == 56)
      {
        v27 = v25[4];
        v28 = *(_QWORD *)(v27 + 40);
        v29 = *(unsigned __int16 *)(v28 + 24);
        if (v29 == 35 || v29 == 11)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
          v32 = *(_QWORD *)(v31 + 832);
          if (v32)
            LOWORD(v32) = *(_WORD *)(v32 + 8);
          v33 = v25[5] + 16 * a3[2];
          *(_QWORD *)a4 = sub_1C5D56C70(v31, 56, (const llvm::APInt *)(a1 + 8), *(llvm **)v33, *(_QWORD *)(v33 + 8), *(_QWORD *)a4, *(_QWORD *)(a4 + 8), v20, v28, *(_QWORD *)(v27 + 48), v32);
          *(_DWORD *)(a4 + 8) = v34;
          v35 = *(uint64_t **)(*(_QWORD *)a3 + 32);
          v36 = *((_DWORD *)v35 + 2);
          v37 = *v35;
          *(_QWORD *)a3 = v37;
          a3[2] = v36;
          v25 = (uint64_t *)v37;
          v26 = *(unsigned __int16 *)(v37 + 24);
          v38 = 1;
        }
        else
        {
          v38 = 0;
          v26 = 56;
        }
      }
      else
      {
        v38 = 0;
      }
      v39 = 0;
      v40 = 1;
      do
      {
        v41 = v40;
        if (v26 == 56)
        {
          v42 = *(_QWORD *)(v25[4] + 40 * v39);
          if (*(_WORD *)(v42 + 24) == 56)
          {
            v43 = *(_QWORD *)(v42 + 32);
            v44 = *(_QWORD *)(v43 + 40);
            v45 = *(unsigned __int16 *)(v44 + 24);
            if (v45 == 35 || v45 == 11)
            {
              v47 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
              v48 = *(_QWORD *)(v47 + 832);
              if (v48)
                LOWORD(v48) = *(_WORD *)(v48 + 8);
              v49 = v25[5] + 16 * a3[2];
              *(_QWORD *)a4 = sub_1C5D56C70(v47, 56, (const llvm::APInt *)(a1 + 8), *(llvm **)v49, *(_QWORD *)(v49 + 8), *(_QWORD *)a4, *(_QWORD *)(a4 + 8), v20, v44, *(_QWORD *)(v43 + 48), v48);
              *(_DWORD *)(a4 + 8) = v51;
              v52 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
              v53 = *(_QWORD *)(v52 + 832);
              if (v53)
                LOWORD(v53) = *(_WORD *)(v53 + 8);
              v54 = *(_QWORD *)(*(_QWORD *)a3 + 32);
              v55 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
              v56 = *(llvm **)v55;
              v57 = *(_QWORD *)(v55 + 8);
              v58 = v54 + 40 * (v39 ^ 1);
              v59 = *(_QWORD *)(*(_QWORD *)(v54 + 40 * v39) + 32);
              v25 = sub_1C5D56C70(v52, 56, (const llvm::APInt *)(a1 + 8), v56, v57, *(_QWORD *)v58, *(_QWORD *)(v58 + 8), v50, *(_QWORD *)v59, *(_QWORD *)(v59 + 8), v53);
              *(_QWORD *)a3 = v25;
              a3[2] = v60;
              goto LABEL_17;
            }
          }
        }
        v40 = 0;
        v39 = 1;
      }
      while ((v41 & 1) != 0);
    }
    while ((v38 & 1) != 0);
    v22 = *(_QWORD *)a4;
  }
  if (a6)
  {
    v88 = *(_QWORD *)(a4 + 8);
    v241 = (const llvm::APInt *)(a1 + 8);
    v89 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), 0, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
    v91 = v90;
    v249 = 32;
    v248 = 0;
    if (*(_WORD *)(*(_QWORD *)a4 + 24) == 175)
    {
      v92 = *(_QWORD *)(*(_QWORD *)a4 + 32);
      v22 = *(_QWORD *)v92;
      v238 = v88 & 0xFFFFFFFF00000000 | *(unsigned int *)(v92 + 8);
      v93 = *(_QWORD **)(v92 + 40);
      v94 = v93[10];
      v95 = (const void **)(v94 + 24);
      v96 = *(_DWORD *)(v94 + 32);
      if (v96 > 0x40)
      {
        if (&v248 != (uint64_t ***)v95)
        {
          v237 = v91;
          llvm::APInt::reallocate((uint64_t)&v248, v96);
          if (v249 <= 0x40)
            v248 = (uint64_t **)*v95;
          else
            memcpy(v248, *v95, (((unint64_t)v249 + 63) >> 3) & 0x3FFFFFF8);
          v91 = v237;
        }
        v92 = *(_QWORD *)(*(_QWORD *)a4 + 32);
        v93 = *(_QWORD **)(v92 + 40);
      }
      else
      {
        v248 = (uint64_t **)*v95;
        v249 = v96;
      }
      v91 = v91 & 0xFFFFFFFF00000000 | *(unsigned int *)(v92 + 48);
      v88 = v238;
    }
    else
    {
      v93 = v89;
    }
    if (a6 != 2)
    {
      if (a6 == 1)
      {
        v235 = v91;
        v239 = (uint64_t)v93;
        v247 = 1;
        __src = 0;
        if (sub_1C483073C(a1, v22, v88, 0, 0))
        {
          v110 = *(_QWORD *)(v22 + 32);
          v111 = *(_QWORD *)(v110 + 40);
          v112 = *(unsigned __int16 *)(v111 + 24);
          if (v112 == 35 || v112 == 11)
          {
            v172 = *(_QWORD *)(v111 + 80);
            v173 = (void **)(v172 + 24);
            v174 = *(_DWORD *)(v172 + 32);
            if (v174 > 0x40)
            {
              v175 = v235;
              v176 = v239;
              if (&__src != v173)
              {
                v233 = (void **)(v172 + 24);
                llvm::APInt::reallocate((uint64_t)&__src, *(_DWORD *)(v172 + 32));
                if (v247 <= 0x40)
                  __src = *v233;
                else
                  memcpy(__src, *v233, (((unint64_t)v247 + 63) >> 3) & 0x3FFFFFF8);
                v175 = v235;
                v176 = v239;
              }
              v110 = *(_QWORD *)(v22 + 32);
            }
            else
            {
              __src = *v173;
              v247 = v174;
              v175 = v235;
              v176 = v239;
            }
            v177 = *(uint64_t **)v110;
            v178 = v88 & 0xFFFFFFFF00000000 | *(unsigned int *)(v110 + 8);
            goto LABEL_199;
          }
        }
        if (v243 <= v21)
          goto LABEL_209;
        v114 = *(unsigned __int16 *)(v22 + 24);
        if (v114 == 199)
        {
          if (sub_1C483073C(a1, **(_QWORD **)(v22 + 32), *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8), 1, 0))
          {
            v115 = **(_QWORD **)(v22 + 32);
            v116 = *(_QWORD *)(*(_QWORD *)(v115 + 32) + 40);
            v117 = *(unsigned __int16 *)(v116 + 24);
            if (v117 == 35 || v117 == 11)
            {
              v179 = *(_QWORD *)(v116 + 80);
              v180 = (void **)(v179 + 24);
              v232 = v115;
              v181 = *(_DWORD *)(v179 + 32);
              if (v181 > 0x40)
              {
                if (&__src != v180)
                {
                  llvm::APInt::reallocate((uint64_t)&__src, *(_DWORD *)(v179 + 32));
                  if (v247 <= 0x40)
                    __src = *v180;
                  else
                    memcpy(__src, *v180, (((unint64_t)v247 + 63) >> 3) & 0x3FFFFFF8);
                }
              }
              else
              {
                __src = *v180;
                v247 = v181;
              }
              llvm::APInt::zext((llvm::APInt *)&__src, v243, (uint64_t)&v244);
              if (v247 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              __src = v244;
              v247 = v245;
              v193 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
              v194 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
              v195 = *(llvm **)v194;
              v196 = *(_QWORD *)(v194 + 8);
              v197 = *(uint64_t **)(v232 + 32);
              v198 = *v197;
              v199 = v197[1];
              v200 = *(_QWORD *)(v193 + 832);
              if (v200)
                v201 = *(_WORD *)(v200 + 8);
              else
                v201 = 0;
              v177 = sub_1C5D52060(v193, 199, v241, v195, v196, v198, v199, v201);
              v178 = v212 | v88 & 0xFFFFFFFF00000000;
LABEL_198:
              v175 = v235;
              v176 = v239;
LABEL_199:
              v214 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
              v215 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
              v216 = *(llvm **)v215;
              v217 = *(_QWORD *)(v215 + 8);
              v218 = *(_QWORD *)(v214 + 832);
              if (v218)
                LOWORD(v218) = *(_WORD *)(v218 + 8);
              v220 = sub_1C5D56C70(v214, 175, v241, v216, v217, (uint64_t)v177, v178, v109, v176, v175, v218);
              v222 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
              v224 = *(_QWORD *)(v222 + 832);
              if (v224)
                LOWORD(v224) = *(_WORD *)(v224 + 8);
              v223 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
              *(_QWORD *)a3 = sub_1C5D56C70(v222, 56, v241, *(llvm **)v223, *(_QWORD *)(v223 + 8), (uint64_t)v220, v219, v221, *(_QWORD *)a3, *((_QWORD *)a3 + 1), v224);
              a3[2] = v225;
              v226 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
              v227 = v247;
              v245 = v247;
              if (v247 > 0x40)
              {
                v244 = (void *)operator new[]();
                v227 = v245;
                memcpy(v244, __src, (((unint64_t)v245 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v244 = __src;
              }
              v228 = sub_1C47EE5B8(&v248, v227);
              sub_1C4888094((uint64_t)&v244, v228);
              v229 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2]);
              *(_QWORD *)a4 = sub_1C63666FC(v226, (llvm::LLVMContext *)&v244, v241, *v229, v229[1], 0, 0);
              *(_DWORD *)(a4 + 8) = v230;
              if (v245 >= 0x41 && v244)
                MEMORY[0x1CAA32F9C](v244, 0x1000C8000313F17);
              goto LABEL_209;
            }
          }
          v114 = *(unsigned __int16 *)(v22 + 24);
        }
        if (v114 != 198
          || !sub_1C483073C(a1, **(_QWORD **)(v22 + 32), *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8), 0, 1)
          || ((v119 = **(_QWORD **)(v22 + 32),
               v120 = *(_QWORD *)(*(_QWORD *)(v119 + 32) + 40),
               v121 = *(unsigned __int16 *)(v120 + 24),
               v121 != 35)
            ? (v122 = v121 == 11)
            : (v122 = 1),
              !v122))
        {
LABEL_209:
          if (v247 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          goto LABEL_212;
        }
        v123 = *(_QWORD *)(v120 + 80);
        v124 = (void **)(v123 + 24);
        v125 = *(_DWORD *)(v123 + 32);
        if (v125 > 0x40)
        {
          if (&__src != v124)
          {
            v234 = (void **)(v123 + 24);
            llvm::APInt::reallocate((uint64_t)&__src, *(_DWORD *)(v123 + 32));
            if (v247 <= 0x40)
              __src = *v234;
            else
              memcpy(__src, *v234, (((unint64_t)v247 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
        else
        {
          __src = *v124;
          v247 = v125;
        }
        llvm::APInt::sext((llvm::APInt *)&__src, v243, (llvm::APInt *)&v244);
        if (v247 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        v202 = v88 & 0xFFFFFFFF00000000;
        __src = v244;
        v247 = v245;
        v203 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
        v204 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
        v205 = *(llvm **)v204;
        v206 = *(_QWORD *)(v204 + 8);
        v207 = *(uint64_t **)(v119 + 32);
        v208 = *v207;
        v209 = v207[1];
        v210 = *(_QWORD *)(v203 + 832);
        if (v210)
          v211 = *(_WORD *)(v210 + 8);
        else
          v211 = 0;
        v177 = sub_1C5D52060(v203, 198, v241, v205, v206, v208, v209, v211);
        v178 = v213 | v202;
        goto LABEL_198;
      }
LABEL_212:
      if (v249 >= 0x41 && v248)
        MEMORY[0x1CAA32F9C](v248, 0x1000C8000313F17);
      v22 = *(_QWORD *)a4;
      goto LABEL_43;
    }
    if (v243 <= v21)
      goto LABEL_212;
    v126 = v88;
    v127 = v91;
    v240 = (uint64_t)v93;
    if (!sub_1C483073C(a1, v22, v126, 0, 0))
      goto LABEL_212;
    if (sub_1C4830BD0(a1, **(_QWORD **)(v22 + 32), *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8), v21))
    {
      v129 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
      v130 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
      v131 = *(llvm **)v130;
      v132 = *(_QWORD *)(v130 + 8);
      v133 = *(uint64_t **)(v22 + 32);
      v134 = *v133;
      v135 = v133[1];
      v136 = *(_QWORD *)(v129 + 832);
      if (v136)
        LOWORD(v136) = *(_WORD *)(v136 + 8);
      v231 = sub_1C5D56C70(v129, 175, v241, v131, v132, v134, v135, v128, v240, v127, v136);
      v236 = v137;
      v139 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
      v140 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
      v141 = *(llvm **)v140;
      v142 = *(_QWORD *)(v140 + 8);
      v143 = *(_QWORD *)(v22 + 32);
      v144 = *(_QWORD *)(v143 + 40);
      v145 = *(_QWORD *)(v143 + 48);
    }
    else
    {
      if (!sub_1C4830BD0(a1, *(_QWORD *)(*(_QWORD *)(v22 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v22 + 32) + 48), v21))
        goto LABEL_212;
      v151 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
      v152 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
      v153 = *(llvm **)v152;
      v154 = *(_QWORD *)(v152 + 8);
      v155 = *(_QWORD *)(v22 + 32);
      v156 = *(_QWORD *)(v155 + 40);
      v157 = *(_QWORD *)(v155 + 48);
      v158 = *(_QWORD *)(v151 + 832);
      if (v158)
        LOWORD(v158) = *(_WORD *)(v158 + 8);
      v231 = sub_1C5D56C70(v151, 175, v241, v153, v154, v156, v157, v150, v240, v127, v158);
      v236 = v159;
      v139 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
      v160 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
      v141 = *(llvm **)v160;
      v142 = *(_QWORD *)(v160 + 8);
      v161 = *(uint64_t **)(v22 + 32);
      v144 = *v161;
      v145 = v161[1];
    }
    v162 = *(_QWORD *)(v139 + 832);
    if (v162)
      LOWORD(v162) = *(_WORD *)(v162 + 8);
    v163 = sub_1C5D56C70(v139, 175, v241, v141, v142, v144, v145, v138, v240, v127, v162);
    v166 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
    v167 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
    v168 = *(llvm **)v167;
    v169 = *(_QWORD *)(v167 + 8);
    v170 = *(_QWORD *)(v166 + 832);
    if (v170)
      LOWORD(v170) = *(_WORD *)(v170 + 8);
    *(_QWORD *)a3 = sub_1C5D56C70(v166, 56, v241, v168, v169, *(_QWORD *)a3, *((_QWORD *)a3 + 1), v165, (uint64_t)v163, v164, v170);
    a3[2] = v171;
    *(_QWORD *)a4 = v231;
    *(_DWORD *)(a4 + 8) = v236;
    goto LABEL_212;
  }
LABEL_43:
  v61 = (1 << v16);
  v62 = *(unsigned __int16 *)(v22 + 24);
  if (v62 > 0x39)
  {
    if (v62 == 58)
    {
      v80 = *(uint64_t **)(v22 + 32);
      v81 = v80[5];
      v82 = *(unsigned __int16 *)(v81 + 24);
      if (v82 != 35 && v82 != 11)
        goto LABEL_105;
      if (*(_BYTE *)(a1 + 105))
      {
        v84 = *(_QWORD *)(v81 + 80);
        v85 = (_QWORD *)(v84 + 24);
        v86 = *(_DWORD *)(v84 + 32);
        if (v86 >= 0x41)
          v85 = (_QWORD *)*v85;
        if (*v85 == v61)
        {
          v87 = *v80;
          *(_DWORD *)(a4 + 8) = *((_DWORD *)v80 + 2);
          *(_QWORD *)a4 = v87;
          goto LABEL_87;
        }
      }
      else
      {
        v84 = *(_QWORD *)(v81 + 80);
        v86 = *(_DWORD *)(v84 + 32);
      }
      v99 = (_QWORD **)(v84 + 24);
      v100 = v99;
      if (v86 >= 0x41)
        v100 = *v99;
      if (*v100 == 4)
      {
        v79 = 1;
        *a5 = 1;
        v101 = *v80;
        *(_DWORD *)(a4 + 8) = *((_DWORD *)v80 + 2);
        *(_QWORD *)a4 = v101;
        goto LABEL_106;
      }
      if (a6 == 2)
      {
        v102 = v99;
        if (v86 >= 0x41)
          v102 = *v99;
        if ((*v102 & (v61 - 1)) == 0)
        {
          v146 = *(_QWORD *)(*(_QWORD *)a2 + 48);
          if (v146)
          {
            v147 = 1;
            do
            {
              if (*(_DWORD *)(v146 + 8) == a2[2])
              {
                if (!v147)
                  goto LABEL_105;
                --v147;
              }
              v146 = *(_QWORD *)(v146 + 32);
            }
            while (v146);
            if (!v147)
            {
              if (v86 >= 0x41)
                v99 = (_QWORD **)*v99;
              v182 = (unint64_t)*v99 >> v16;
              v183 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
              v184 = *(_QWORD *)(v22 + 40) + 16 * *(unsigned int *)(a4 + 8);
              v185 = *(llvm **)v184;
              v186 = *(_QWORD *)(v184 + 8);
              v187 = *v80;
              v188 = v80[1];
              v189 = sub_1C6366AB4(v183, v182, (const llvm::APInt *)(a1 + 8), *(llvm **)v184, v186, 0, 0);
              v192 = *(_QWORD *)(v183 + 832);
              if (v192)
                LOWORD(v192) = *(_WORD *)(v192 + 8);
              v148 = sub_1C5D56C70(v183, 58, (const llvm::APInt *)(a1 + 8), v185, v186, v187, v188, v191, (uint64_t)v189, v190, v192);
              goto LABEL_157;
            }
          }
        }
      }
    }
    else
    {
      if (v62 != 175)
        goto LABEL_105;
      v66 = *(uint64_t **)(v22 + 32);
      v67 = v66[5];
      v68 = *(unsigned __int16 *)(v67 + 24);
      if (v68 != 35 && v68 != 11)
        goto LABEL_105;
      v70 = *(_QWORD *)(v67 + 80);
      if (*(_BYTE *)(a1 + 105))
      {
        v71 = (_QWORD *)(v70 + 24);
        v72 = *(_DWORD *)(v70 + 32);
        if (v72 >= 0x41)
          v71 = (_QWORD *)*v71;
        if (*v71 == v16)
        {
          v73 = *v66;
          *(_DWORD *)(a4 + 8) = *((_DWORD *)v66 + 2);
          *(_QWORD *)a4 = v73;
LABEL_87:
          v79 = 1;
          goto LABEL_106;
        }
      }
      else
      {
        v72 = *(_DWORD *)(v70 + 32);
      }
      v97 = (_QWORD *)(v70 + 24);
      if (v72 >= 0x41)
        v97 = (_QWORD *)*v97;
      if (*v97 == 2)
      {
        v79 = 1;
        *a5 = 1;
        v98 = *v66;
        *(_DWORD *)(a4 + 8) = *((_DWORD *)v66 + 2);
        *(_QWORD *)a4 = v98;
        goto LABEL_106;
      }
    }
LABEL_105:
    v79 = *(_QWORD *)(a1 + 24) == 1;
    goto LABEL_106;
  }
  if (v62 != 11 && v62 != 35)
    goto LABEL_105;
  v63 = *(_QWORD *)(v22 + 80);
  v64 = *(_DWORD *)(v63 + 32);
  if (v64 > 0x40)
    v65 = **(_QWORD **)(v63 + 24);
  else
    v65 = (uint64_t)(*(_QWORD *)(v63 + 24) << -(char)v64) >> -(char)v64;
  if (*(_BYTE *)(a1 + 105))
  {
    v74 = v65 / (1 << v16);
    v75 = (v65 & (v61 - 1)) != 0 || v74 == 0;
    if (!v75 && (unint64_t)(v74 + 0x80000000) >> 32 == 0)
    {
      v148 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), v74, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
LABEL_157:
      *(_QWORD *)a4 = v148;
      *(_DWORD *)(a4 + 8) = v149;
      goto LABEL_87;
    }
  }
  if ((v65 & 3) != 0)
    v77 = 0;
  else
    v77 = v65 / 4;
  if (v77)
    v78 = (unint64_t)(v77 + 0x80000000) >> 32 == 0;
  else
    v78 = 0;
  if (v78)
  {
    *(_QWORD *)a4 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), v77, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
    *(_DWORD *)(a4 + 8) = v108;
    v79 = 1;
    *a5 = 1;
  }
  else
  {
    v79 = 0;
  }
LABEL_106:
  if (v243 <= v21 || (v103 = *(unsigned __int16 *)(*(_QWORD *)a4 + 24), v103 == 11) || v103 == 35)
  {
    if (v79)
      return 1;
  }
  else if (sub_1C4830BD0(a1, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), v21) && v79)
  {
    return 1;
  }
  v105 = *(_QWORD *)a2;
  a3[2] = a2[2];
  *(_QWORD *)a3 = v105;
  v106 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), 0, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
  result = 0;
  *(_QWORD *)a4 = v106;
  *(_DWORD *)(a4 + 8) = v107;
  return result;
}

unint64_t sub_1C4831E04(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t result;
  const char *v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v1 = (unint64_t *)(a1 + 24);
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0)
    return -1;
  result = (unint64_t)(sub_1C4825F50(v1) + 7) >> 3;
  if ((_DWORD)v4 == 1)
  {
    v5 = result;
    return v5;
  }
  return result;
}

uint64_t *sub_1C4831E60(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  unsigned __int8 v10;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  int v42;
  int v43;
  unsigned int ExtendedSizeInBits;
  const char *v45;
  unsigned int v46;
  unsigned int v47;
  const char *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  uint64_t *result;
  int v70;
  uint64_t v71;
  uint64_t v72;
  llvm *v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  __int128 v80;
  __int128 v81;

  v10 = a5;
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_BYTE *)(a1 + 105) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  v14 = (unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  v15 = (unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a1 + 56) = a8;
  v16 = *a2;
  v17 = *(unsigned __int8 **)(*a2 + 64);
  *(_QWORD *)&v81 = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&v81, v17, 2);
  v18 = *(_DWORD *)(v16 + 60);
  DWORD2(v81) = v18;
  v19 = (unsigned __int8 **)(a1 + 8);
  if (&v81 == (__int128 *)(a1 + 8))
  {
    v79 = (unsigned __int8 *)v81;
    *(_DWORD *)(a1 + 16) = v18;
    if (v79)
      llvm::MetadataTracking::untrack((uint64_t)&v81, v79);
  }
  else
  {
    if (*v19)
      llvm::MetadataTracking::untrack(a1 + 8, *v19);
    v20 = (unsigned __int8 *)v81;
    *v19 = (unsigned __int8 *)v81;
    if (v20)
      llvm::MetadataTracking::retrack((uint64_t)&v81, v20, a1 + 8);
    *(_DWORD *)(a1 + 16) = DWORD2(v81);
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 104) = 0;
  v21 = *a2;
  if (*(_WORD *)(*a2 + 24) == 201)
  {
    v22 = *(unsigned __int8 **)(v21 + 40);
    v23 = *v22;
    if (v23 == v10)
    {
      v24 = *((_QWORD *)v22 + 1);
      if (v23 || v24 == a6)
      {
        v26 = *(_QWORD *)(v21 + 32);
        v21 = *(_QWORD *)v26;
        *((_DWORD *)a2 + 2) = *(_DWORD *)(v26 + 8);
        *a2 = v21;
      }
    }
  }
  v27 = sub_1C483073C(a1, v21, a2[1], 0, 0);
  v28 = *a2;
  if (v27)
  {
    v29 = *(_QWORD *)(v28 + 32);
    *(_QWORD *)&v81 = *(_QWORD *)v29;
    DWORD2(v81) = *(_DWORD *)(v29 + 8);
    *(_QWORD *)&v80 = *(_QWORD *)(v29 + 40);
    DWORD2(v80) = *(_DWORD *)(v29 + 48);
    if ((sub_1C6133078(a1, a2, &v81, &v80, 1, 0) & 1) != 0)
      goto LABEL_30;
    v30 = *(_QWORD *)(*a2 + 32);
    *(_QWORD *)&v81 = *(_QWORD *)v30;
    DWORD2(v81) = *(_DWORD *)(v30 + 8);
    *(_QWORD *)&v80 = *(_QWORD *)(v30 + 40);
    DWORD2(v80) = *(_DWORD *)(v30 + 48);
    if ((sub_1C6133078(a1, a2, &v81, &v80, 1, 1) & 1) != 0)
      goto LABEL_30;
    v31 = *(_QWORD *)(*a2 + 32);
    *(_QWORD *)&v81 = *(_QWORD *)v31;
    DWORD2(v81) = *(_DWORD *)(v31 + 8);
    *(_QWORD *)&v80 = *(_QWORD *)(v31 + 40);
    DWORD2(v80) = *(_DWORD *)(v31 + 48);
    v32 = a1;
    v33 = a2;
    v34 = 2;
    goto LABEL_29;
  }
  if (*(_WORD *)(v28 + 24) != 57)
  {
    *(_QWORD *)&v81 = *a2;
    DWORD2(v81) = *((_DWORD *)a2 + 2);
    *(_QWORD *)&v80 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), 0, (const llvm::APInt *)(a1 + 8), *(llvm **)(a1 + 32), *(_QWORD *)(a1 + 40), 0, 0);
    DWORD2(v80) = v43;
    v32 = a1;
    v33 = a2;
    v34 = 0;
LABEL_29:
    sub_1C6133078(v32, v33, &v81, &v80, 1, v34);
    goto LABEL_30;
  }
  v35 = *(_QWORD *)(v28 + 32);
  *(_QWORD *)&v81 = *(_QWORD *)v35;
  DWORD2(v81) = *(_DWORD *)(v35 + 8);
  *(_QWORD *)&v80 = *(_QWORD *)(v35 + 40);
  DWORD2(v80) = *(_DWORD *)(v35 + 48);
  sub_1C6133078(a1, a2, &v81, &v80, 0, 0);
  v36 = *(_QWORD *)(a1 + 80);
  v37 = *(unsigned __int16 *)(v36 + 24);
  if (v37 != 35 && v37 != 11)
  {
    v71 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
    v72 = *(_QWORD *)(v36 + 40) + 16 * *(unsigned int *)(a1 + 88);
    v73 = *(llvm **)v72;
    v74 = *(_QWORD *)(v72 + 8);
    v76 = sub_1C6366AB4(v71, 0, (const llvm::APInt *)(a1 + 8), *(llvm **)v72, v74, 0, 0);
    v78 = *(_QWORD *)(v71 + 832);
    if (v78)
      LOWORD(v78) = *(_WORD *)(v78 + 8);
    v41 = sub_1C5D56C70(v71, 57, (const llvm::APInt *)(a1 + 8), v73, v74, (uint64_t)v76, v75, v77, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v78);
    goto LABEL_75;
  }
  v38 = *(_QWORD *)(v36 + 80);
  v39 = (_QWORD *)(v38 + 24);
  if (*(_DWORD *)(v38 + 32) >= 0x41u)
    v39 = (_QWORD *)*v39;
  v40 = (_QWORD *)*v39;
  if ((_DWORD)v40)
  {
    v41 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), -(int)v40, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
LABEL_75:
    *(_QWORD *)(a1 + 80) = v41;
    *(_DWORD *)(a1 + 88) = v42;
  }
LABEL_30:
  if (*v14)
    ExtendedSizeInBits = sub_1C47A8C74(v14);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v14);
  v46 = ExtendedSizeInBits;
  if ((_DWORD)v45 == 1)
  if (*v15)
    v47 = sub_1C47A8C74(v15);
  else
    v47 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v15);
  v49 = v47;
  if ((_DWORD)v48 == 1)
  v50 = *(_QWORD *)(a1 + 80);
  v51 = *(unsigned __int16 *)(v50 + 24);
  if (v51 == 35 || v51 == 11)
  {
    v52 = *(_QWORD *)(v50 + 80);
    v53 = *(_DWORD *)(v52 + 32);
    v54 = v53 > 0x40 ? **(_QWORD **)(v52 + 24) : (uint64_t)(*(_QWORD *)(v52 + 24) << -(char)v53) >> -(char)v53;
    if (v54 == (__int16)v54)
      *(_BYTE *)(a1 + 2) = 1;
  }
  v55 = *(_QWORD *)(a1 + 64);
  v56 = *(unsigned __int16 *)(v55 + 24);
  if (v56 == 35 || v56 == 11)
  {
    v57 = *(_QWORD *)(v55 + 80);
    v58 = (_QWORD *)(v57 + 24);
    if (*(_DWORD *)(v57 + 32) >= 0x41u)
      v58 = (_QWORD *)*v58;
    if (!*v58)
      *(_BYTE *)a1 = 1;
  }
  v59 = *a2;
  v60 = *(unsigned __int8 **)(*a2 + 64);
  *(_QWORD *)&v81 = v60;
  if (v60)
    llvm::MetadataTracking::track((uint64_t)&v81, v60, 2);
  DWORD2(v81) = *(_DWORD *)(v59 + 60);
  if (v46 != 64)
  {
    v61 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
    v62 = *(_QWORD *)(v61 + 832);
    if (v62)
      v63 = *(_WORD *)(v62 + 8);
    else
      v63 = 0;
    *(_QWORD *)(a1 + 64) = sub_1C5D52060(v61, 201, (const llvm::APInt *)&v81, (llvm *)4, 0, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v63);
    *(_DWORD *)(a1 + 72) = v64;
  }
  v65 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
  if (v49 == 32)
    v66 = 5;
  else
    v66 = 4;
  v67 = *(_QWORD *)(v65 + 832);
  if (v67)
    v68 = *(_WORD *)(v67 + 8);
  else
    v68 = 0;
  result = sub_1C5D52060(v65, 201, (const llvm::APInt *)&v81, (llvm *)v66, 0, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v68);
  *(_QWORD *)(a1 + 80) = result;
  *(_DWORD *)(a1 + 88) = v70;
  if (a9 && *(_BYTE *)(a1 + 104))
    *a9 = 1;
  if ((_QWORD)v81)
    return (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)&v81, (unsigned __int8 *)v81);
  return result;
}

uint64_t sub_1C48323DC()
{
  return 0;
}

uint64_t sub_1C48323E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v16;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;

  v6 = *(unsigned __int16 **)(a2 + 16);
  v7 = *v6;
  if ((*((_BYTE *)v6 + 17) & 2) != 0)
  {
    result = 0;
    if (*v6 > 0x2B20u)
    {
      switch(*v6)
      {
        case 0x2B93u:
        case 0x2B94u:
        case 0x2B99u:
        case 0x2B9Au:
        case 0x2BA7u:
        case 0x2BA8u:
        case 0x2BB1u:
        case 0x2BB2u:
        case 0x2BB7u:
        case 0x2BB8u:
        case 0x2BC5u:
        case 0x2BC6u:
        case 0x2BCFu:
        case 0x2BD0u:
        case 0x2BD5u:
        case 0x2BD6u:
        case 0x2BE3u:
        case 0x2BE4u:
        case 0x2BEDu:
        case 0x2BEEu:
        case 0x2BF3u:
        case 0x2BF4u:
        case 0x2C01u:
        case 0x2C02u:
        case 0x2C0Bu:
        case 0x2C0Cu:
        case 0x2C11u:
        case 0x2C12u:
        case 0x2C1Fu:
        case 0x2C20u:
        case 0x2C29u:
        case 0x2C2Au:
        case 0x2C2Fu:
        case 0x2C30u:
        case 0x2C3Du:
        case 0x2C3Eu:
        case 0x2C47u:
        case 0x2C48u:
        case 0x2C4Du:
        case 0x2C4Eu:
        case 0x2C57u:
        case 0x2C58u:
        case 0x2C5Bu:
        case 0x2C5Cu:
        case 0x2C5Fu:
        case 0x2C60u:
        case 0x2C63u:
        case 0x2C64u:
        case 0x2C65u:
        case 0x2C66u:
        case 0x2C69u:
        case 0x2C6Au:
        case 0x2C6Du:
        case 0x2C6Eu:
        case 0x2C71u:
        case 0x2C72u:
        case 0x2C73u:
        case 0x2C74u:
        case 0x2C77u:
        case 0x2C78u:
        case 0x2C7Bu:
        case 0x2C7Cu:
        case 0x2C7Fu:
        case 0x2C80u:
        case 0x2C81u:
        case 0x2C82u:
        case 0x2C85u:
        case 0x2C86u:
        case 0x2C89u:
        case 0x2C8Au:
        case 0x2C8Du:
        case 0x2C8Eu:
        case 0x2C8Fu:
        case 0x2C90u:
        case 0x2C93u:
        case 0x2C94u:
        case 0x2C97u:
        case 0x2C98u:
        case 0x2C9Bu:
        case 0x2C9Cu:
        case 0x2C9Du:
        case 0x2C9Eu:
        case 0x2CA1u:
        case 0x2CA2u:
        case 0x2CA5u:
        case 0x2CA6u:
        case 0x2CA9u:
        case 0x2CAAu:
        case 0x2CABu:
        case 0x2CACu:
        case 0x2CAFu:
        case 0x2CB0u:
        case 0x2CB3u:
        case 0x2CB4u:
        case 0x2CB7u:
        case 0x2CB8u:
        case 0x2CB9u:
        case 0x2CBAu:
        case 0x2CBDu:
        case 0x2CBEu:
        case 0x2CC1u:
        case 0x2CC2u:
        case 0x2CC5u:
        case 0x2CC6u:
        case 0x2CC7u:
        case 0x2CC8u:
        case 0x2CCBu:
        case 0x2CCCu:
        case 0x2CCFu:
        case 0x2CD0u:
        case 0x2CD3u:
        case 0x2CD4u:
        case 0x2CD5u:
        case 0x2CD6u:
        case 0x2CD9u:
        case 0x2CDAu:
        case 0x2CDDu:
        case 0x2CDEu:
        case 0x2CE1u:
        case 0x2CE2u:
        case 0x2CE3u:
        case 0x2CE4u:
        case 0x2CE7u:
        case 0x2CE8u:
        case 0x2CEBu:
        case 0x2CECu:
        case 0x2CEFu:
        case 0x2CF0u:
        case 0x2CF1u:
        case 0x2CF2u:
        case 0x2CF5u:
        case 0x2CF6u:
        case 0x2CF9u:
        case 0x2CFAu:
        case 0x2CFDu:
        case 0x2CFEu:
        case 0x2CFFu:
        case 0x2D00u:
        case 0x2D03u:
        case 0x2D04u:
        case 0x2D07u:
        case 0x2D08u:
        case 0x2D0Bu:
        case 0x2D0Cu:
        case 0x2D0Du:
        case 0x2D0Eu:
        case 0x2D11u:
        case 0x2D12u:
        case 0x2D15u:
        case 0x2D16u:
        case 0x2D19u:
        case 0x2D1Au:
        case 0x2D1Bu:
        case 0x2D1Cu:
        case 0x2D1Fu:
        case 0x2D20u:
        case 0x2D23u:
        case 0x2D24u:
        case 0x2D27u:
        case 0x2D28u:
        case 0x2D29u:
        case 0x2D2Au:
        case 0x2D2Du:
        case 0x2D2Eu:
        case 0x2D31u:
        case 0x2D32u:
        case 0x2D35u:
        case 0x2D36u:
          return result;
        case 0x2B95u:
        case 0x2B96u:
        case 0x2B97u:
        case 0x2B98u:
        case 0x2B9Bu:
        case 0x2B9Cu:
        case 0x2B9Du:
        case 0x2B9Eu:
        case 0x2B9Fu:
        case 0x2BA0u:
        case 0x2BA1u:
        case 0x2BA2u:
        case 0x2BA3u:
        case 0x2BA4u:
        case 0x2BA5u:
        case 0x2BA6u:
        case 0x2BA9u:
        case 0x2BAAu:
        case 0x2BABu:
        case 0x2BACu:
        case 0x2BADu:
        case 0x2BAEu:
        case 0x2BAFu:
        case 0x2BB0u:
        case 0x2BB3u:
        case 0x2BB4u:
        case 0x2BB5u:
        case 0x2BB6u:
        case 0x2BB9u:
        case 0x2BBAu:
        case 0x2BBBu:
        case 0x2BBCu:
        case 0x2BBDu:
        case 0x2BBEu:
        case 0x2BBFu:
        case 0x2BC0u:
        case 0x2BC1u:
        case 0x2BC2u:
        case 0x2BC3u:
        case 0x2BC4u:
        case 0x2BC7u:
        case 0x2BC8u:
        case 0x2BC9u:
        case 0x2BCAu:
        case 0x2BCBu:
        case 0x2BCCu:
        case 0x2BCDu:
        case 0x2BCEu:
        case 0x2BD1u:
        case 0x2BD2u:
        case 0x2BD3u:
        case 0x2BD4u:
        case 0x2BD7u:
        case 0x2BD8u:
        case 0x2BD9u:
        case 0x2BDAu:
        case 0x2BDBu:
        case 0x2BDCu:
        case 0x2BDDu:
        case 0x2BDEu:
        case 0x2BDFu:
        case 0x2BE0u:
        case 0x2BE1u:
        case 0x2BE2u:
        case 0x2BE5u:
        case 0x2BE6u:
        case 0x2BE7u:
        case 0x2BE8u:
        case 0x2BE9u:
        case 0x2BEAu:
        case 0x2BEBu:
        case 0x2BECu:
        case 0x2BEFu:
        case 0x2BF0u:
        case 0x2BF1u:
        case 0x2BF2u:
        case 0x2BF5u:
        case 0x2BF6u:
        case 0x2BF7u:
        case 0x2BF8u:
        case 0x2BF9u:
        case 0x2BFAu:
        case 0x2BFBu:
        case 0x2BFCu:
        case 0x2BFDu:
        case 0x2BFEu:
        case 0x2BFFu:
        case 0x2C00u:
        case 0x2C03u:
        case 0x2C04u:
        case 0x2C05u:
        case 0x2C06u:
        case 0x2C07u:
        case 0x2C08u:
        case 0x2C09u:
        case 0x2C0Au:
        case 0x2C0Du:
        case 0x2C0Eu:
        case 0x2C0Fu:
        case 0x2C10u:
        case 0x2C13u:
        case 0x2C14u:
        case 0x2C15u:
        case 0x2C16u:
        case 0x2C17u:
        case 0x2C18u:
        case 0x2C19u:
        case 0x2C1Au:
        case 0x2C1Bu:
        case 0x2C1Cu:
        case 0x2C1Du:
        case 0x2C1Eu:
        case 0x2C21u:
        case 0x2C22u:
        case 0x2C23u:
        case 0x2C24u:
        case 0x2C25u:
        case 0x2C26u:
        case 0x2C27u:
        case 0x2C28u:
        case 0x2C2Bu:
        case 0x2C2Cu:
        case 0x2C2Du:
        case 0x2C2Eu:
        case 0x2C31u:
        case 0x2C32u:
        case 0x2C33u:
        case 0x2C34u:
        case 0x2C35u:
        case 0x2C36u:
        case 0x2C37u:
        case 0x2C38u:
        case 0x2C39u:
        case 0x2C3Au:
        case 0x2C3Bu:
        case 0x2C3Cu:
        case 0x2C3Fu:
        case 0x2C40u:
        case 0x2C41u:
        case 0x2C42u:
        case 0x2C43u:
        case 0x2C44u:
        case 0x2C45u:
        case 0x2C46u:
        case 0x2C49u:
        case 0x2C4Au:
        case 0x2C4Bu:
        case 0x2C4Cu:
        case 0x2C4Fu:
        case 0x2C50u:
        case 0x2C51u:
        case 0x2C52u:
        case 0x2C53u:
        case 0x2C54u:
        case 0x2C55u:
        case 0x2C56u:
        case 0x2C59u:
        case 0x2C5Au:
        case 0x2C5Du:
        case 0x2C5Eu:
        case 0x2C61u:
        case 0x2C62u:
        case 0x2C67u:
        case 0x2C68u:
        case 0x2C6Bu:
        case 0x2C6Cu:
        case 0x2C6Fu:
        case 0x2C70u:
        case 0x2C75u:
        case 0x2C76u:
        case 0x2C79u:
        case 0x2C7Au:
        case 0x2C7Du:
        case 0x2C7Eu:
        case 0x2C83u:
        case 0x2C84u:
        case 0x2C87u:
        case 0x2C88u:
        case 0x2C8Bu:
        case 0x2C8Cu:
        case 0x2C91u:
        case 0x2C92u:
        case 0x2C95u:
        case 0x2C96u:
        case 0x2C99u:
        case 0x2C9Au:
        case 0x2C9Fu:
        case 0x2CA0u:
        case 0x2CA3u:
        case 0x2CA4u:
        case 0x2CA7u:
        case 0x2CA8u:
        case 0x2CADu:
        case 0x2CAEu:
        case 0x2CB1u:
        case 0x2CB2u:
        case 0x2CB5u:
        case 0x2CB6u:
        case 0x2CBBu:
        case 0x2CBCu:
        case 0x2CBFu:
        case 0x2CC0u:
        case 0x2CC3u:
        case 0x2CC4u:
        case 0x2CC9u:
        case 0x2CCAu:
        case 0x2CCDu:
        case 0x2CCEu:
        case 0x2CD1u:
        case 0x2CD2u:
        case 0x2CD7u:
        case 0x2CD8u:
        case 0x2CDBu:
        case 0x2CDCu:
        case 0x2CDFu:
        case 0x2CE0u:
        case 0x2CE5u:
        case 0x2CE6u:
        case 0x2CE9u:
        case 0x2CEAu:
        case 0x2CEDu:
        case 0x2CEEu:
        case 0x2CF3u:
        case 0x2CF4u:
        case 0x2CF7u:
        case 0x2CF8u:
        case 0x2CFBu:
        case 0x2CFCu:
        case 0x2D01u:
        case 0x2D02u:
        case 0x2D05u:
        case 0x2D06u:
        case 0x2D09u:
        case 0x2D0Au:
        case 0x2D0Fu:
        case 0x2D10u:
        case 0x2D13u:
        case 0x2D14u:
        case 0x2D17u:
        case 0x2D18u:
        case 0x2D1Du:
        case 0x2D1Eu:
        case 0x2D21u:
        case 0x2D22u:
        case 0x2D25u:
        case 0x2D26u:
        case 0x2D2Bu:
        case 0x2D2Cu:
        case 0x2D2Fu:
        case 0x2D30u:
        case 0x2D33u:
        case 0x2D34u:
          goto LABEL_69;
        default:
          v4 = -1023361021;
          if ((v7 - 11041) <= 0x3D && ((1 << (v7 - 33)) & 0x30C03000C300C003) != 0)
            return result;
          v3 = 3221425155;
          if ((v7 - 11115) <= 0x1F && ((1 << (v7 - 107)) & 0xC0030C03) != 0)
            return result;
          goto LABEL_69;
      }
    }
    if (*v6 <= 0x29C4u)
    {
      if (*v6 > 0x28F2u)
      {
        if ((v7 - 10483) <= 0x39 && ((1 << (v7 + 13)) & 0x3000C003000C003) != 0)
          return result;
        v4 = 1;
        v3 = 1 << (v7 - 57);
        if ((v7 - 10553) <= 0x39 && (v3 & 0x3000C003000C003) != 0)
          return result;
        v16 = -10623;
        goto LABEL_36;
      }
      v25 = (v7 - 10407) > 0x3F;
      v26 = 1 << (v7 + 89);
      v3 = 0xC003000C0030FFFFLL;
    }
    else
    {
      if (*v6 <= 0x2A98u)
      {
        if ((v7 - 10833) <= 0x3B && ((1 << (v7 - 81)) & 0xC300C003000C003) != 0)
          return result;
        v3 = 0x3000C003000C003;
        if ((v7 - 10693) <= 0x39 && ((1 << (v7 + 59)) & 0x3000C003000C003) != 0)
          return result;
        v16 = -10763;
LABEL_36:
        v19 = v7 + v16;
        if (v19 <= 0x39)
        {
          v3 = 0x3000C003000C003;
          if (((1 << v19) & 0x3000C003000C003) != 0)
            return result;
        }
LABEL_69:
        result = 0;
        v31 = v7 - 11081;
        switch(v7)
        {
          case 11081:
          case 11082:
          case 11083:
          case 11084:
          case 11085:
          case 11086:
          case 11087:
          case 11088:
          case 11089:
          case 11090:
          case 11091:
          case 11092:
          case 11093:
          case 11094:
          case 11095:
          case 11096:
          case 11351:
          case 11352:
          case 11353:
          case 11354:
          case 11355:
          case 11356:
          case 11357:
          case 11358:
          case 11359:
          case 11360:
          case 11361:
          case 11362:
          case 11363:
          case 11364:
          case 11407:
          case 11408:
          case 11409:
          case 11410:
          case 11411:
          case 11412:
          case 11413:
          case 11414:
          case 11415:
          case 11416:
          case 11417:
          case 11418:
          case 11419:
          case 11420:
          case 11463:
          case 11464:
          case 11465:
          case 11466:
          case 11467:
          case 11468:
          case 11469:
          case 11470:
          case 11471:
          case 11472:
          case 11473:
          case 11474:
          case 11475:
          case 11476:
          case 11519:
          case 11520:
          case 11521:
          case 11522:
          case 11523:
          case 11524:
          case 11525:
          case 11526:
          case 11527:
          case 11528:
          case 11529:
          case 11530:
          case 11531:
          case 11532:
            goto LABEL_70;
          case 11097:
          case 11098:
          case 11099:
          case 11100:
          case 11101:
          case 11102:
          case 11103:
          case 11104:
          case 11105:
          case 11106:
          case 11107:
          case 11108:
          case 11109:
          case 11110:
          case 11127:
          case 11128:
          case 11129:
          case 11130:
          case 11131:
          case 11132:
          case 11133:
          case 11134:
          case 11135:
          case 11136:
          case 11137:
          case 11138:
          case 11139:
          case 11140:
          case 11141:
          case 11142:
          case 11143:
          case 11144:
          case 11145:
          case 11146:
          case 11147:
          case 11148:
          case 11149:
          case 11150:
          case 11151:
          case 11152:
          case 11153:
          case 11154:
          case 11155:
          case 11156:
          case 11157:
          case 11158:
          case 11159:
          case 11160:
          case 11161:
          case 11162:
          case 11163:
          case 11164:
          case 11165:
          case 11166:
          case 11167:
          case 11168:
          case 11169:
          case 11170:
          case 11171:
          case 11172:
          case 11173:
          case 11174:
          case 11175:
          case 11176:
          case 11177:
          case 11178:
          case 11179:
          case 11180:
          case 11181:
          case 11182:
          case 11183:
          case 11184:
          case 11185:
          case 11186:
          case 11187:
          case 11188:
          case 11189:
          case 11190:
          case 11191:
          case 11192:
          case 11193:
          case 11194:
          case 11195:
          case 11196:
          case 11197:
          case 11198:
          case 11199:
          case 11200:
          case 11201:
          case 11202:
          case 11203:
          case 11204:
          case 11205:
          case 11206:
          case 11207:
          case 11208:
          case 11209:
          case 11210:
          case 11211:
          case 11212:
          case 11213:
          case 11214:
          case 11215:
          case 11216:
          case 11217:
          case 11218:
          case 11219:
          case 11220:
          case 11221:
          case 11222:
          case 11223:
          case 11224:
          case 11225:
          case 11226:
          case 11227:
          case 11228:
          case 11229:
          case 11230:
          case 11231:
          case 11232:
          case 11233:
          case 11234:
          case 11235:
          case 11236:
          case 11237:
          case 11238:
          case 11239:
          case 11240:
          case 11241:
          case 11242:
          case 11243:
          case 11244:
          case 11245:
          case 11246:
          case 11247:
          case 11248:
          case 11249:
          case 11250:
          case 11251:
          case 11252:
          case 11253:
          case 11254:
          case 11255:
          case 11256:
          case 11257:
          case 11258:
          case 11259:
          case 11260:
          case 11261:
          case 11262:
          case 11263:
          case 11264:
          case 11265:
          case 11266:
          case 11267:
          case 11268:
          case 11269:
          case 11270:
          case 11271:
          case 11272:
          case 11273:
          case 11274:
          case 11275:
          case 11276:
          case 11277:
          case 11278:
          case 11279:
          case 11280:
          case 11281:
          case 11282:
          case 11283:
          case 11284:
          case 11285:
          case 11286:
          case 11287:
          case 11288:
          case 11289:
          case 11290:
          case 11291:
          case 11292:
          case 11293:
          case 11294:
          case 11295:
          case 11296:
          case 11297:
          case 11298:
          case 11299:
          case 11300:
          case 11301:
          case 11302:
          case 11303:
          case 11304:
          case 11305:
          case 11306:
          case 11307:
          case 11308:
          case 11309:
          case 11310:
          case 11311:
          case 11312:
          case 11313:
          case 11314:
          case 11315:
          case 11316:
          case 11317:
          case 11318:
          case 11319:
          case 11320:
          case 11321:
          case 11322:
          case 11323:
          case 11324:
          case 11325:
          case 11326:
          case 11327:
          case 11328:
          case 11329:
          case 11330:
          case 11331:
          case 11332:
          case 11333:
          case 11334:
          case 11335:
          case 11336:
          case 11337:
          case 11338:
          case 11339:
          case 11340:
          case 11341:
          case 11342:
          case 11343:
          case 11344:
          case 11345:
          case 11346:
          case 11347:
          case 11348:
          case 11349:
          case 11350:
LABEL_108:
            __break(1u);
LABEL_109:
            switch(v5)
            {
              case 0u:
              case 1u:
              case 2u:
              case 3u:
                goto LABEL_110;
              case 4u:
              case 5u:
                goto LABEL_112;
              case 6u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_113;
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0xDu:
                goto LABEL_111;
              default:
                result = ((uint64_t (*)(void))((char *)&loc_1C4832A24 + 4 * byte_1C642BADC[v4 - 11081]))();
                break;
            }
            return result;
          case 11111:
          case 11112:
          case 11113:
          case 11114:
          case 11115:
          case 11116:
          case 11117:
          case 11118:
          case 11119:
          case 11120:
          case 11121:
          case 11122:
          case 11123:
          case 11124:
          case 11125:
          case 11126:
          case 11365:
          case 11366:
          case 11367:
          case 11368:
          case 11369:
          case 11370:
          case 11371:
          case 11372:
          case 11373:
          case 11374:
          case 11375:
          case 11376:
          case 11377:
          case 11378:
          case 11379:
          case 11380:
          case 11381:
          case 11382:
          case 11383:
          case 11384:
          case 11385:
          case 11386:
          case 11387:
          case 11388:
          case 11389:
          case 11390:
          case 11391:
          case 11392:
          case 11393:
          case 11394:
          case 11395:
          case 11396:
          case 11397:
          case 11398:
          case 11399:
          case 11400:
          case 11401:
          case 11402:
          case 11403:
          case 11404:
          case 11405:
          case 11406:
          case 11421:
          case 11422:
          case 11423:
          case 11424:
          case 11425:
          case 11426:
          case 11427:
          case 11428:
          case 11429:
          case 11430:
          case 11431:
          case 11432:
          case 11433:
          case 11434:
          case 11435:
          case 11436:
          case 11437:
          case 11438:
          case 11439:
          case 11440:
          case 11441:
          case 11442:
          case 11443:
          case 11444:
          case 11445:
          case 11446:
          case 11447:
          case 11448:
          case 11449:
          case 11450:
          case 11451:
          case 11452:
          case 11453:
          case 11454:
          case 11455:
          case 11456:
          case 11457:
          case 11458:
          case 11459:
          case 11460:
          case 11461:
          case 11462:
          case 11477:
          case 11478:
          case 11479:
          case 11480:
          case 11481:
          case 11482:
          case 11483:
          case 11484:
          case 11485:
          case 11486:
          case 11487:
          case 11488:
          case 11489:
          case 11490:
          case 11491:
          case 11492:
          case 11493:
          case 11494:
          case 11495:
          case 11496:
          case 11497:
          case 11498:
          case 11499:
          case 11500:
          case 11501:
          case 11502:
          case 11503:
          case 11504:
          case 11505:
          case 11506:
          case 11507:
          case 11508:
          case 11509:
          case 11510:
          case 11511:
          case 11512:
          case 11513:
          case 11514:
          case 11515:
          case 11516:
          case 11517:
          case 11518:
          case 11533:
          case 11534:
          case 11535:
          case 11536:
          case 11537:
          case 11538:
          case 11539:
          case 11540:
          case 11541:
          case 11542:
          case 11543:
          case 11544:
          case 11545:
          case 11546:
          case 11547:
          case 11548:
          case 11549:
          case 11550:
          case 11551:
          case 11552:
          case 11553:
          case 11554:
          case 11555:
          case 11556:
          case 11557:
          case 11558:
          case 11559:
          case 11560:
          case 11561:
          case 11562:
          case 11563:
          case 11564:
          case 11565:
          case 11566:
          case 11567:
          case 11568:
          case 11569:
          case 11570:
          case 11571:
          case 11572:
          case 11573:
          case 11574:
            return result;
          default:
            if (((1 << (v7 - 123)) & 0x3FFF0000000) != 0)
              return result;
LABEL_70:
            v31 = 1;
            if (v7 > 11406)
            {
              if ((v7 - 11407) < 0xE)
                goto LABEL_76;
              goto LABEL_75;
            }
            if ((v7 - 11081) <= 0xF)
            {
              v32 = 1 << (v7 - 73);
              v33 = 54645;
            }
            else
            {
              if ((v7 - 10619) > 0xD)
                goto LABEL_76;
              v32 = 1 << (v7 - 123);
              v33 = 5493;
            }
            if ((v32 & v33) == 0)
LABEL_75:
              v31 = 0;
LABEL_76:
            v3 = 0;
            if (v7 > 11350)
            {
              v4 = v7 - 11351;
              switch(v7)
              {
                case 11351:
                case 11353:
                case 11355:
                case 11357:
                case 11359:
                case 11361:
                case 11363:
                case 11407:
                case 11409:
                case 11411:
                case 11413:
                case 11415:
                case 11417:
                case 11419:
                  goto LABEL_90;
                case 11352:
                case 11354:
                case 11356:
                case 11358:
                case 11360:
                case 11362:
                case 11364:
                case 11408:
                case 11410:
                case 11412:
                case 11414:
                case 11416:
                case 11418:
                case 11420:
                  goto LABEL_89;
                case 11365:
                case 11366:
                case 11367:
                case 11368:
                case 11369:
                case 11370:
                case 11371:
                case 11372:
                case 11373:
                case 11374:
                case 11375:
                case 11376:
                case 11377:
                case 11378:
                case 11379:
                case 11380:
                case 11381:
                case 11382:
                case 11383:
                case 11384:
                case 11385:
                case 11386:
                case 11387:
                case 11388:
                case 11389:
                case 11390:
                case 11391:
                case 11392:
                case 11393:
                case 11394:
                case 11395:
                case 11396:
                case 11397:
                case 11398:
                case 11399:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                  goto LABEL_108;
                default:
                  result = ((uint64_t (*)(void))((char *)&loc_1C48328CC + 4 * byte_1C642BA88[v7 - 11463]))();
                  break;
              }
              return result;
            }
            if ((v7 - 11081) > 0xF)
            {
              v34 = 1 << (v7 - 123);
              v35 = 3283;
            }
            else
            {
              v34 = 1 << (v7 - 73);
              v35 = 19667;
            }
            if ((v34 & v35) == 0)
LABEL_89:
              LODWORD(v3) = 1;
LABEL_90:
            if (v31)
            {
              v7 = 0;
            }
            else
            {
              if ((_DWORD)v3)
                LODWORD(v3) = 3;
              else
                LODWORD(v3) = 2;
              *(_QWORD *)(a3 + 32) = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 80);
              v7 = 1;
            }
            *(_QWORD *)a3 = a2;
            v36 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | v3;
            *(_DWORD *)(a3 + 24) = v36;
            *(_DWORD *)(a3 + 20) = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
            *(_DWORD *)(a3 + 28) = 0;
            v37 = **(unsigned __int16 **)(a2 + 16);
            v38 = 0x2000;
            if (v37 > 0x2C8E)
            {
              if (v37 - 11407 < 0xE || v37 - 11463 >= 0xE)
                goto LABEL_102;
            }
            else if (v37 - 11081 < 0x10)
            {
              goto LABEL_102;
            }
            v38 = 4096;
LABEL_102:
            v3 = 0;
            v31 = v38 | v36 & 0xFFFF0003;
            *(_DWORD *)(a3 + 24) = v31;
            v4 = **(unsigned __int16 **)(a2 + 16);
            if (v4 <= 0x2CC6)
            {
              v5 = v4 - 11351;
              switch(**(_WORD **)(a2 + 16))
              {
                case 0x2C57:
                case 0x2C58:
                case 0x2C59:
                case 0x2C5A:
                case 0x2C8F:
                case 0x2C90:
                case 0x2C91:
                case 0x2C92:
LABEL_110:
                  v3 = 2;
                  break;
                case 0x2C5B:
                case 0x2C5C:
                case 0x2C5D:
                case 0x2C5E:
                case 0x2C93:
                case 0x2C94:
                case 0x2C95:
                case 0x2C96:
                  break;
                case 0x2C5F:
                case 0x2C60:
                case 0x2C61:
                case 0x2C62:
                case 0x2C97:
                case 0x2C98:
                case 0x2C99:
                case 0x2C9A:
LABEL_111:
                  v3 = 1;
                  break;
                case 0x2C63:
                case 0x2C64:
                case 0x2C9B:
                case 0x2C9C:
LABEL_112:
                  v3 = 3;
                  break;
                case 0x2C65:
                case 0x2C66:
                case 0x2C67:
                case 0x2C68:
                case 0x2C69:
                case 0x2C6A:
                case 0x2C6B:
                case 0x2C6C:
                case 0x2C6D:
                case 0x2C6E:
                case 0x2C6F:
                case 0x2C70:
                case 0x2C71:
                case 0x2C72:
                case 0x2C73:
                case 0x2C74:
                case 0x2C75:
                case 0x2C76:
                case 0x2C77:
                case 0x2C78:
                case 0x2C79:
                case 0x2C7A:
                case 0x2C7B:
                case 0x2C7C:
                case 0x2C7D:
                case 0x2C7E:
                case 0x2C7F:
                case 0x2C80:
                case 0x2C81:
                case 0x2C82:
                case 0x2C83:
                case 0x2C84:
                case 0x2C85:
                case 0x2C86:
                case 0x2C87:
                case 0x2C88:
                case 0x2C89:
                case 0x2C8A:
                case 0x2C8B:
                case 0x2C8C:
                case 0x2C8D:
                case 0x2C8E:
                  goto LABEL_108;
                default:
                  v5 = v4 - 10619;
                  goto LABEL_109;
              }
LABEL_113:
              *(_QWORD *)(a3 + 8 * v7 + 32) = v3;
              *(_DWORD *)(a3 + 24) = (v31 & 0xFF003003 | (v7 << 16)) + 0x10000;
              return 1;
            }
            return ((uint64_t (*)(_QWORD))((char *)&loc_1C4832A08 + 4 * byte_1C642BB30[v4 - 11463]))(0);
        }
      }
      if ((v7 - 10905) <= 0x3D && ((1 << (v7 + 103)) & 0x3000C300C0030C03) != 0)
        return result;
      v25 = (v7 - 10975) > 0x3D;
      v26 = 1 << (v7 + 33);
      v3 = 0x300C0030C03000C3;
    }
    v27 = v26 & v3;
    if (!v25 && v27 != 0)
      return result;
    goto LABEL_69;
  }
  result = 0;
  if (*v6 <= 0x2DF2u)
  {
    if ((v7 - 291) < 2)
    {
      *(_QWORD *)a3 = a2;
      v20 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | 4;
      *(_DWORD *)(a3 + 24) = v20;
      v13 = v20 & 0xFF0000FF;
    }
    else
    {
      if ((v7 - 314) >= 2)
        return result;
      *(_QWORD *)a3 = a2;
      v12 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | 5;
      *(_DWORD *)(a3 + 24) = v12;
      v13 = v12 & 0xFF000005;
    }
    v21 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
    *(_DWORD *)(a3 + 24) = v13 | 0x12000;
    *(_DWORD *)(a3 + 28) = 0;
    *(_DWORD *)(a3 + 20) = v21;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48) / *(uint64_t *)(*(_QWORD *)(a2 + 32) + 80);
    *(_QWORD *)(a3 + 40) = 0;
    return 1;
  }
  if ((v7 - 11763) < 2)
  {
    *(_QWORD *)a3 = a2;
    v22 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | 4;
    *(_DWORD *)(a3 + 24) = v22;
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
    *(_DWORD *)(a3 + 28) = 0;
    v11 = v22 & 0xFF0000FF;
    goto LABEL_44;
  }
  if ((v7 - 13390) < 2)
  {
    *(_QWORD *)a3 = a2;
    v9 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | 5;
    *(_DWORD *)(a3 + 24) = v9;
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
    *(_DWORD *)(a3 + 28) = 0;
    v11 = v9 & 0xFF000005;
LABEL_44:
    *(_DWORD *)(a3 + 20) = v10;
    *(_DWORD *)(a3 + 24) = v11 | 0x2000;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    return 1;
  }
  if (v7 == 12152)
  {
    v23 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | 6;
    *(_DWORD *)(a3 + 24) = v23;
    v11 = v23 & 0xFF000006;
    *(_QWORD *)a3 = a2;
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
    *(_DWORD *)(a3 + 28) = 0;
    goto LABEL_44;
  }
  return result;
}

uint64_t sub_1C4832A5C()
{
  return __cxa_atexit((void (*)(void *))llvm::GPUIterateCombiner::~GPUIterateCombiner, &off_1EF8EB070, &dword_1C475E000);
}

void sub_1C4832A78(uint64_t *a1, _DWORD *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  _QWORD v10[2];
  void (**v11)(llvm::raw_ostream *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    LODWORD(v12) = 0;
    v16 = 0;
    v17 = 0;
    v11 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v19 = &v20;
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v11, *a2);
    v4 = v19;
    v5 = *((_BYTE *)v19 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v19;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v19[1];
    v10[0] = v4;
    v10[1] = v7;
    (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 216))(a1, v10, 0);
    v11 = off_1E81A6E70;
    if (v18 == 1 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    (*(void (**)(uint64_t *, void **, _QWORD))(*a1 + 216))(a1, &v20, 0);
    v8 = llvm::yaml::ScalarTraits<unsigned int,void>::input((unsigned __int8 *)v20, v21, a1[1], a2);
    if (v9)
    {
      LOWORD(v15) = 261;
      v11 = (void (**)(llvm::raw_ostream *__hidden))v8;
      v12 = v9;
      (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden)))(*a1 + 248))(a1, &v11);
    }
  }
}

BOOL sub_1C4832BD0(uint64_t a1, unsigned int a2, char a3, int a4)
{
  if ((a2 & 3) != 0 || ((1 << a3) & 3) != 0 && (1 << a3) % a2)
    return 0;
  return a2 < 4 || a4 != 1 || ((1 << a3) & 3) == 0;
}

uint64_t sub_1C4832C10(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v4;
  int v5;
  unsigned int v6;

  if (a4 >= 0x11
    && !*(_BYTE *)(*(_QWORD *)(a1 + 24) + 281)
    && (a4 - 32 > 0x20 || ((1 << (a4 - 32)) & 0x100010001) == 0))
  {
    if (a4 <= 0x20)
      v4 = 128;
    else
      v4 = 256;
    if (a4 <= 0x30)
      v5 = v4;
    else
      v5 = 384;
    if (a4 <= 0x40)
      v6 = v5;
    else
      v6 = 512;
    return v6 / a3;
  }
  return a2;
}

unint64_t sub_1C4832C7C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  unint64_t PrimitiveSizeInBits;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  unsigned __int8 v17;
  BOOL v18;
  int v19;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23[8];

  if (sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), a3, (llvm::Type *)1) == 1)
    return 4;
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)a3, (uint64_t)&v22);
  v10 = v22;
  if (!a6 && (*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3);
    v13 = v12;
    v14 = sub_1C47A8C74(v23);
    v16 = v15 != 1 && v13 == 1;
    if (!v16 && PrimitiveSizeInBits < v14)
    {
      v17 = sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), a3, 0);
      v18 = v23[0] == 0;
      if (!v17)
        v18 = 1;
      if (a2 == 33)
      {
        if (!v18)
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 179 * v23[0] + v17 + 137754);
          goto LABEL_17;
        }
      }
      else if (!v18)
      {
        v19 = *(_WORD *)(*(_QWORD *)(a1 + 32) + 358 * v23[0] + 2 * v17 + 73672) >> 4;
LABEL_17:
        if ((v19 & 0xFFFFFFFB) == 0)
          return v10;
      }
      v21 = sub_1C6133E14(a1, a3, a2 != 33, a2 == 33);
      if (__OFADD__(v10, v21))
        return ((uint64_t)(v10 + v21) >> 63) ^ 0x8000000000000000;
      else
        v10 += v21;
    }
  }
  return v10;
}

BOOL sub_1C4832E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;

  result = 1;
  if (a2 && *(_BYTE *)(a2 + 16) == 84)
  {
    v6 = *(_QWORD *)(a2 + 64);
    return (!v6 || (*(_BYTE *)(v6 + 12) & 0x40) == 0) && !llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6)
        || (v7 = *(_QWORD *)(a2 - 32)) == 0
        || *(_BYTE *)(v7 + 16)
        || *(_QWORD *)(v7 + 24) != *(_QWORD *)(a2 + 72)
        || *(_DWORD *)(v7 + 36) != 1884
        || *(_QWORD *)(a2 + 40) == *(_QWORD *)(a3 + 40);
  }
  return result;
}

llvm::APInt *sub_1C4832EA4(llvm::APInt *this, unsigned int a2, uint64_t a3, int a4)
{
  unint64_t v5;

  *((_DWORD *)this + 2) = a2;
  if (a2 > 0x40)
  {
    llvm::APInt::initSlowCase(this, a3, a4);
  }
  else
  {
    v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2)
      v5 = 0;
    *(_QWORD *)this = v5 & a3;
  }
  return this;
}

void sub_1C4832F00(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t Symbol;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  *(_DWORD *)a3 = **(unsigned __int16 **)(a2 + 16);
  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3)
  {
    v23 = a3 + 32;
    v24 = a3 + 16;
    v6 = 32 * v3;
    v7 = *(_QWORD *)(a2 + 32) + 16;
    while (2)
    {
      switch(*(_DWORD *)(v7 - 16))
      {
        case 0u:
          if ((*(_DWORD *)(v7 - 16) & 0x2000000) != 0)
            goto LABEL_19;
          v8 = *(unsigned int *)(v7 - 12);
          v9 = 1;
          goto LABEL_16;
        case 1u:
          v8 = *(_QWORD *)v7;
          v9 = 2;
          goto LABEL_16;
        case 4u:
          Symbol = llvm::MachineBasicBlock::getSymbol(*(llvm::MachineBasicBlock **)v7);
          goto LABEL_14;
        case 7u:
          v10 = *(unsigned int *)(v7 - 12) | ((unint64_t)*(unsigned int *)(v7 + 8) << 32);
          v11 = sub_1C484358C(*a1 + 192, 24, 3);
          *(_BYTE *)v11 = 1;
          *(_DWORD *)(v11 + 1) = *(unsigned __int8 *)(v11 + 4) << 24;
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = v10;
          if (*(_DWORD *)v7 != 64)
            llvm::report_fatal_error((llvm *)"Unhandled target index type!", (const char *)1);
          v12 = v11;
          if (*(_DWORD *)(v7 - 16))
            v13 = (*(_DWORD *)(v7 - 16) >> 8) & 0xFFF;
          else
            v13 = 0;
          HIDWORD(v14) = v13;
          LODWORD(v14) = v13 - 2;
          v15 = dword_1C642C760[(int)(v14 >> 1)];
          v16 = sub_1C484358C(*a1 + 192, 40, 3);
          *(_DWORD *)(v16 + 9) = *(unsigned __int8 *)(v16 + 12) << 24;
          *(_QWORD *)(v16 + 16) = 0;
          *(_QWORD *)v16 = &unk_1E7FB40F8;
          *(_DWORD *)(v16 + 24) = v15;
          *(_QWORD *)(v16 + 32) = v12;
          *(_BYTE *)(v16 + 8) = 4;
          v8 = v16 + 8;
          goto LABEL_15;
        case 0xAu:
          Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1[1] + 248), *(const llvm::GlobalValue **)v7);
LABEL_14:
          v18 = Symbol;
          v19 = *a1;
          v8 = sub_1C484358C(*a1 + 192, 24, 3);
          v20 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 152) + 18) << 16;
          *(_BYTE *)v8 = 2;
          *(_DWORD *)(v8 + 1) = v20 | (*(unsigned __int8 *)(v8 + 4) << 24);
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = v18;
LABEL_15:
          v9 = 5;
LABEL_16:
          v21 = *(unsigned int *)(a3 + 24);
          if (v21 >= *(unsigned int *)(a3 + 28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v24, v23, v21 + 1, 16);
            v21 = *(unsigned int *)(a3 + 24);
          }
          v22 = (uint64_t *)(*(_QWORD *)(a3 + 16) + 16 * v21);
          *v22 = v9;
          v22[1] = v8;
          ++*(_DWORD *)(a3 + 24);
LABEL_19:
          v7 += 32;
          v6 -= 32;
          if (!v6)
            return;
          continue;
        default:
          llvm::MachineInstr::dump((llvm::MachineInstr *)a2);
          __break(1u);
          return;
      }
    }
  }
}

void sub_1C4833144(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C48331D8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4833264()
{
  return "AGX1 post-RA peephole pass";
}

void sub_1C4833274(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C4833298(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int NumExplicitOperands;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  a1[31] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v5 = *(_QWORD *)(a2 + 40);
  a1[32] = v4;
  a1[33] = v5;
  v6 = (_QWORD *)(a2 + 320);
  v7 = *(_QWORD **)(a2 + 328);
  if (v7 == (_QWORD *)(a2 + 320))
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if (((v7[12] - v7[11]) & 0x7FFFFFFF8) == 0)
      {
        v10 = 0;
        v11 = (unint64_t)(v7 + 6);
        while (1)
        {
          v12 = v10;
          v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
          if (v7 + 6 == (_QWORD *)v11)
            break;
          v13 = **(unsigned __int16 **)(v11 + 16);
          v10 = v11;
          if (v13 != 13424)
          {
            if ((v13 - 13427) > 1)
              break;
            if (!v12)
              break;
            NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v11);
            v15 = (NumExplicitOperands - 2);
            if (*(_QWORD *)(*(_QWORD *)(v11 + 32) + 32 * v15 + 16))
              break;
            v16 = 644448;
            if (v13 == 13427)
              v16 = 644400;
            *(_QWORD *)(v11 + 16) = *(_QWORD *)(a1[31] + 8) + v16;
            llvm::MachineInstr::removeOperand(v11, NumExplicitOperands - 1);
            llvm::MachineInstr::removeOperand(v11, v15);
            v17 = v12;
            if ((*(_BYTE *)v12 & 4) == 0)
            {
              v17 = v12;
              if ((*(_WORD *)(v12 + 44) & 8) != 0)
              {
                v17 = v12;
                do
                  v17 = *(_QWORD *)(v17 + 8);
                while ((*(_WORD *)(v17 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v12 + 24) + 40, v12, *(_QWORD *)(v17 + 8));
            v9 = 1;
            goto LABEL_5;
          }
        }
      }
      v9 = 0;
LABEL_5:
      v8 |= v9;
      v7 = (_QWORD *)v7[1];
    }
    while (v7 != v6);
  }
  return v8 & 1;
}

void sub_1C483343C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C48334D0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C483355C()
{
  return "AGX1 pseudo wait placement pass";
}

BOOL sub_1C483356C(uint64_t a1, int a2)
{
  return (*(_QWORD *)&a2 & 0x10120) != 0;
}

_DWORD *sub_1C4833580(_DWORD *result, int a2, uint64_t a3)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = result;
  if ((result[16] & 0x3F) != 0)
  {
    v14 = -1 << (result[16] & 0x3F);
    v5 = result[2];
    v15 = *(_QWORD *)result + 8 * v5;
    if ((_DWORD)a3)
      v16 = *(_QWORD *)(v15 - 8) | v14;
    else
      v16 = *(_QWORD *)(v15 - 8) & ~v14;
    *(_QWORD *)(v15 - 8) = v16;
  }
  else
  {
    v5 = result[2];
  }
  v6 = v5;
  result[16] = a2;
  v7 = a2 + 63;
  if ((_DWORD)v5 != (a2 + 63) >> 6)
  {
    v8 = v7 >> 6;
    if (v5 <= v8)
    {
      v9 = v8 - v5;
      v10 = v5;
      if (v8 > result[3])
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 8);
        v10 = v4[2];
        v6 = v4[2];
        if (v9)
        {
LABEL_7:
          v11 = (uint64_t *)(*(_QWORD *)v4 + 8 * v10);
          v12 = v5 - v8;
          do
            *v11++ = a3 << 63 >> 63;
          while (!__CFADD__(v12++, 1));
        }
      }
      else if (v9)
      {
        goto LABEL_7;
      }
      v6 += v9;
      v4[2] = v6;
      a2 = v4[16];
      goto LABEL_11;
    }
    result[2] = v8;
    v6 = v7 >> 6;
  }
LABEL_11:
  if ((a2 & 0x3F) != 0)
    *(_QWORD *)(*(_QWORD *)v4 + 8 * v6 - 8) &= ~(-1 << (a2 & 0x3F));
  return result;
}

uint64_t sub_1C48336B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  unint64_t v7;
  const void **v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t NamedMetadata;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v28;
  uint64_t *v29;
  char v30;
  char v31;
  uint64_t i;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  char v44;
  uint64_t **v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned __int16 v53;
  unsigned __int16 *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  char v59;
  uint64_t **v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t result;
  int v70;
  uint64_t v71;
  unsigned __int16 v72;
  unsigned __int16 *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  char v79;
  uint64_t **v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned __int16 v89;
  unsigned __int16 *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  char v95;
  uint64_t **v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  int *v105;
  int *v106;
  int8x8_t v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  int v115;
  uint32x2_t v116;
  int8x16_t v117;
  int32x2_t v118;
  uint64x2_t v119;
  int8x16_t v120;
  uint32x2_t v121;
  uint32x2_t v122;
  uint64x2_t v123;
  uint32x2_t v124;
  int8x16_t v125;
  int8x16_t v126;
  uint64_t j;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int16 *v133;
  int v134;
  int v135;
  unsigned __int16 *v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  const char *v148;
  char v149;
  __int16 v150;

  v6 = (void *)(a3 + 16);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0x600000000;
  v7 = *(unsigned int *)(a1 + 288);
  v8 = (const void **)(a1 + 280);
  if ((_DWORD)v7)
    v9 = v8 == (const void **)a3;
  else
    v9 = 1;
  if (!v9)
  {
    if (v7 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (uint64_t)v6, v7, 8);
      v10 = *(_DWORD *)(a1 + 288);
      if (!v10)
      {
LABEL_10:
        *(_DWORD *)(a3 + 8) = v7;
        goto LABEL_11;
      }
      v6 = *(void **)a3;
    }
    else
    {
      v10 = *(_DWORD *)(a1 + 288);
    }
    memcpy(v6, *v8, 8 * v10);
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a1 + 344);
  v11 = a2[5];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[2] + 176))(a2[2]);
  v13 = *(_QWORD *)(*a2 + 40);
  sub_1C5EAE59C(v13, 0, (uint64_t)&v148);
  v14 = (int)v148;
  if (v148 >= 0xF8)
    v14 = 248;
  if (v149)
    v15 = v14;
  else
    v15 = 248;
  v148 = "agx.sample_rate";
  v150 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v13, (uint64_t)&v148);
  v17 = *a2;
  v145 = v11;
  if (NamedMetadata)
  {
    if (((*(unsigned __int16 *)(v17 + 18) >> 4) & 0x3FFu) - 103 <= 1)
    {
      v18 = ***(_QWORD ***)(NamedMetadata + 48);
      if (v18)
      {
        v19 = *(unsigned int *)(v18 + 8);
        if ((_DWORD)v19)
        {
          v20 = *(_QWORD *)(v18 - 8 * v19);
          if (*(_BYTE *)v20 == 1)
          {
            v21 = *(_QWORD *)(v20 + 128);
            if (*(_BYTE *)(v21 + 16) == 16)
            {
              v22 = (_QWORD *)(v21 + 24);
              if (*(_DWORD *)(v21 + 32) >= 0x41u)
                v22 = (_QWORD *)*v22;
              v23 = *(_DWORD *)v22;
              v24 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))a2[43])(a2[43], 0, 0, 1, 1);
              v15 = (v15 - v24) / v23 + v24;
              v17 = *a2;
            }
          }
        }
      }
    }
  }
  v146 = a2;
  v147 = (uint64_t *)a3;
  v25 = v15 - 1;
  v144 = (*(unsigned __int16 *)(v17 + 18) >> 4) & 0x3FF;
  v26 = (1 << ((*(unsigned __int16 *)(v17 + 18) >> 4) - 102)) & 0x31;
  if ((v144 - 102) > 5 || v26 == 0)
  {
    v138 = v15;
    v141 = v15 - 1;
    v28 = a2 + 40;
    v29 = (uint64_t *)v146[41];
    if (v29 == v146 + 40)
    {
      v31 = 0;
      v30 = 0;
    }
    else
    {
      v30 = 0;
      v31 = 0;
      while (1)
      {
        for (i = v29[7]; (uint64_t *)i != v29 + 6; i = *(_QWORD *)(i + 8))
        {
          v33 = *(unsigned __int16 **)(i + 16);
          v34 = *v33;
          if ((*((_BYTE *)v33 + 17) & 0x20) != 0 || sub_1C477C96C(v34))
            v30 = 1;
          v31 |= (v34 & 0xFFFE) == 11972;
          if ((v31 & 1) != 0 && (v30 & 1) != 0)
          {
            v31 = 1;
            v30 = 1;
            break;
          }
          if ((*(_BYTE *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              i = *(_QWORD *)(i + 8);
          }
        }
        if ((v31 & 1) != 0 && (v30 & 1) != 0)
          break;
        v29 = (uint64_t *)v29[1];
        if (v29 == v28)
          goto LABEL_50;
      }
      v31 = 1;
      v30 = 1;
    }
LABEL_50:
    v25 = v141;
    if ((v31 & v30 & 1) != 0)
      v25 = v138 - 3;
  }
  v35 = *(_QWORD *)(a1 + 56);
  if (v35)
  {
    v36 = *(_QWORD *)(a1 + 8);
    v142 = v25;
    v37 = v25 + 1283;
    v38 = (unsigned __int16 *)(v35 + 2 * *(unsigned int *)(v36 + 24 * v37 + 8));
    v39 = *v147;
    while (1)
    {
      v40 = (unsigned __int16)v37;
      v41 = (unsigned __int16)v37 >> 6;
      v42 = *(_QWORD *)(v39 + 8 * v41);
      if (((v42 >> v37) & 1) != 0)
        goto LABEL_69;
      v43 = 0;
      v44 = v37 & 0x3F;
      v45 = *(uint64_t ***)(v12 + 240);
      v46 = v40 >> 3;
      do
      {
        if ((_DWORD)v40)
        {
          v47 = **v45;
          if (v46 < *(unsigned __int16 *)(v47 + 22)
            && ((1 << (v40 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v47 + 8) + v46)) != 0
            && (!v43
             || *v45 != v43
             && ((*(_DWORD *)(v43[1] + ((*(unsigned __int16 *)(v47 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v47 + 24)) & 1) != 0))
          {
            v43 = *v45;
          }
        }
        ++v45;
      }
      while (v45 != *(uint64_t ***)(v12 + 248));
      v48 = *(unsigned __int16 *)(*(_QWORD *)*v43 + 2 * *(unsigned __int16 *)(*v43 + 20) - 2);
      v49 = v48 + 1;
      if (v48 + 1 == (_DWORD)v40)
        goto LABEL_69;
      if ((_DWORD)v41 == v49 >> 6)
      {
        v50 = (1 << v49) + (-1 << v44);
      }
      else
      {
        *(_QWORD *)(v39 + 8 * v41) = v42 | (-1 << v44);
        v52 = (v40 + 63) & 0x1FFC0;
        if (v52 + 64 <= v49)
        {
          v139 = v36;
          memset((void *)(v39 + (((v40 + 63) >> 3) & 0x3FF8)), 255, (((v48 - v52 - 63) >> 3) & 0x1FFFFFF8) + 8);
          v36 = v139;
          v52 = ((v48 - 63 - ((v40 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v40 + 63) & 0x1FFC0) + 64;
        }
        if (v52 > v48)
          goto LABEL_69;
        v50 = ~(-1 << v49);
        v41 = v52 >> 6;
        v42 = *(_QWORD *)(v39 + 8 * v41);
      }
      *(_QWORD *)(v39 + 8 * v41) = v42 | v50;
LABEL_69:
      v51 = *v38++;
      LOWORD(v37) = v51 + v40;
      if (!v51)
      {
        v53 = v142 + 1027;
        v54 = (unsigned __int16 *)(v35 + 2 * *(unsigned int *)(v36 + 24 * (v142 + 1027) + 8));
        while (1)
        {
          v55 = v53;
          v56 = v53 >> 6;
          v57 = *(_QWORD *)(v39 + 8 * v56);
          if (((v57 >> v53) & 1) != 0)
            goto LABEL_90;
          v58 = 0;
          v59 = v53 & 0x3F;
          v60 = *(uint64_t ***)(v12 + 240);
          v61 = v55 >> 3;
          do
          {
            if ((_DWORD)v55)
            {
              v62 = **v60;
              if (v61 < *(unsigned __int16 *)(v62 + 22)
                && ((1 << (v55 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v62 + 8) + v61)) != 0
                && (!v58
                 || *v60 != v58
                 && ((*(_DWORD *)(v58[1] + ((*(unsigned __int16 *)(v62 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v62 + 24)) & 1) != 0))
              {
                v58 = *v60;
              }
            }
            ++v60;
          }
          while (v60 != *(uint64_t ***)(v12 + 248));
          v63 = *(unsigned __int16 *)(*(_QWORD *)*v58 + 2 * *(unsigned __int16 *)(*v58 + 20) - 2);
          v64 = v63 + 1;
          if (v63 + 1 == (_DWORD)v55)
            goto LABEL_90;
          if ((_DWORD)v56 == v64 >> 6)
          {
            v65 = (1 << v64) + (-1 << v59);
          }
          else
          {
            *(_QWORD *)(v39 + 8 * v56) = v57 | (-1 << v59);
            v67 = (v55 + 63) & 0x1FFC0;
            if (v67 + 64 <= v64)
            {
              memset((void *)(v39 + (((v55 + 63) >> 3) & 0x3FF8)), 255, (((v63 - v67 - 63) >> 3) & 0x1FFFFFF8) + 8);
              v67 = ((v63 - 63 - ((v55 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v55 + 63) & 0x1FFC0) + 64;
            }
            if (v67 > v63)
              goto LABEL_90;
            v65 = ~(-1 << v64);
            v56 = v67 >> 6;
            v57 = *(_QWORD *)(v39 + 8 * v56);
          }
          *(_QWORD *)(v39 + 8 * v56) = v57 | v65;
LABEL_90:
          v66 = *v54++;
          v53 = v66 + v55;
          if (!v66)
            goto LABEL_96;
        }
      }
    }
  }
LABEL_96:
  v68 = v146;
  result = v146[6];
  if (!result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v146[1] + 216))(v146[1], v146 + 16, v146);
    v146[6] = result;
    v35 = *(_QWORD *)(a1 + 56);
  }
  if (v35)
  {
    v70 = (*(_DWORD *)(result + 16) + 7) & 0x7FFFFFF8;
    v71 = *(_QWORD *)(a1 + 8);
    v72 = v70 + 1795;
    v73 = (unsigned __int16 *)(v35 + 2 * *(unsigned int *)(v71 + 24 * (v70 + 1795) + 8));
    v74 = *v147;
    while (1)
    {
      v75 = v72;
      v76 = v72 >> 6;
      v77 = *(_QWORD *)(v74 + 8 * v76);
      if (((v77 >> v72) & 1) != 0)
        goto LABEL_115;
      v78 = 0;
      v79 = v72 & 0x3F;
      v80 = *(uint64_t ***)(v12 + 240);
      v81 = v75 >> 3;
      do
      {
        if ((_DWORD)v75)
        {
          v82 = **v80;
          result = *(unsigned __int16 *)(v82 + 22);
          if (v81 < result)
          {
            result = *(unsigned __int8 *)(*(_QWORD *)(v82 + 8) + v81);
            if (((1 << (v75 & 7)) & result) != 0)
            {
              if (!v78
                || *v80 != v78
                && (v83 = *(unsigned __int16 *)(v82 + 24),
                    result = *(unsigned int *)(v78[1] + ((v83 >> 3) & 0x1FFCLL)),
                    ((result >> v83) & 1) != 0))
              {
                v78 = *v80;
              }
            }
          }
        }
        ++v80;
      }
      while (v80 != *(uint64_t ***)(v12 + 248));
      v84 = *(unsigned __int16 *)(*(_QWORD *)*v78 + 2 * *(unsigned __int16 *)(*v78 + 20) - 2);
      v85 = v84 + 1;
      if (v84 + 1 == (_DWORD)v75)
        goto LABEL_115;
      if ((_DWORD)v76 == v85 >> 6)
      {
        v86 = (1 << v85) + (-1 << v79);
      }
      else
      {
        *(_QWORD *)(v74 + 8 * v76) = v77 | (-1 << v79);
        v88 = (v75 + 63) & 0x1FFC0;
        if (v88 + 64 <= v85)
        {
          v143 = v71;
          v140 = v70;
          result = (uint64_t)memset((void *)(v74 + (((v75 + 63) >> 3) & 0x3FF8)), 255, (((v84 - v88 - 63) >> 3) & 0x1FFFFFF8) + 8);
          v70 = v140;
          v71 = v143;
          v88 = ((v84 - 63 - ((v75 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v75 + 63) & 0x1FFC0) + 64;
        }
        if (v88 > v84)
          goto LABEL_115;
        v86 = ~(-1 << v85);
        v76 = v88 >> 6;
        v77 = *(_QWORD *)(v74 + 8 * v76);
      }
      *(_QWORD *)(v74 + 8 * v76) = v77 | v86;
LABEL_115:
      v87 = *v73++;
      v72 = v87 + v75;
      if (!v87)
      {
        v89 = v70 + 1539;
        v90 = (unsigned __int16 *)(v35 + 2 * *(unsigned int *)(v71 + 24 * (v70 + 1539) + 8));
        v68 = v146;
        while (1)
        {
          v91 = v89;
          v92 = v89 >> 6;
          v93 = *(_QWORD *)(v74 + 8 * v92);
          if (((v93 >> v89) & 1) != 0)
            goto LABEL_136;
          v94 = 0;
          v95 = v89 & 0x3F;
          v96 = *(uint64_t ***)(v12 + 240);
          v97 = v91 >> 3;
          do
          {
            if ((_DWORD)v91)
            {
              v98 = **v96;
              result = *(unsigned __int16 *)(v98 + 22);
              if (v97 < result)
              {
                result = *(unsigned __int8 *)(*(_QWORD *)(v98 + 8) + v97);
                if (((1 << (v91 & 7)) & result) != 0)
                {
                  if (!v94
                    || *v96 != v94
                    && (v99 = *(unsigned __int16 *)(v98 + 24),
                        result = *(unsigned int *)(v94[1] + ((v99 >> 3) & 0x1FFCLL)),
                        ((result >> v99) & 1) != 0))
                  {
                    v94 = *v96;
                  }
                }
              }
            }
            ++v96;
          }
          while (v96 != *(uint64_t ***)(v12 + 248));
          v100 = *(unsigned __int16 *)(*(_QWORD *)*v94 + 2 * *(unsigned __int16 *)(*v94 + 20) - 2);
          v101 = v100 + 1;
          if (v100 + 1 == (_DWORD)v91)
            goto LABEL_136;
          if ((_DWORD)v92 == v101 >> 6)
          {
            v102 = (1 << v101) + (-1 << v95);
          }
          else
          {
            *(_QWORD *)(v74 + 8 * v92) = v93 | (-1 << v95);
            v104 = (v91 + 63) & 0x1FFC0;
            if (v104 + 64 <= v101)
            {
              result = (uint64_t)memset((void *)(v74 + (((v91 + 63) >> 3) & 0x3FF8)), 255, (((v100 - v104 - 63) >> 3) & 0x1FFFFFF8) + 8);
              v68 = v146;
              v104 = ((v100 - 63 - ((v91 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v91 + 63) & 0x1FFC0) + 64;
            }
            if (v104 > v100)
              goto LABEL_136;
            v102 = ~(-1 << v101);
            v92 = v104 >> 6;
            v93 = *(_QWORD *)(v74 + 8 * v92);
          }
          *(_QWORD *)(v74 + 8 * v92) = v93 | v102;
LABEL_136:
          v103 = *v90++;
          v89 = v103 + v91;
          if (!v103)
            goto LABEL_142;
        }
      }
    }
  }
LABEL_142:
  v105 = *(int **)(v145 + 456);
  v106 = *(int **)(v145 + 464);
  if (v105 == v106)
  {
    v107 = 0;
  }
  else
  {
    v107 = 0;
    do
    {
      v108 = *v105;
      v109 = *v105 - 1283;
      if (v109 > 0xFF && (v109 = v108 - 1027, (v108 - 1027) > 0xFF))
      {
        v110 = v108 - 3;
        v111 = v108 - 9299;
        v112 = (v108 - 9299) >> 2;
        v113 = v108 - 9298;
        result = v113 >> 2;
        v9 = v112 == v113 >> 2;
        v114 = (1 << v112) | *(_QWORD *)&v107 | (1 << result);
        if (v9)
          v114 = (1 << v112) | *(_QWORD *)&v107;
        if (v111 > 0xFE)
          v114 = (uint64_t)v107;
        if (v110 <= 0xFF)
          *(_QWORD *)&v107 |= 1 << (v110 >> 2);
        else
          v107 = (int8x8_t)v114;
      }
      else
      {
        *(_QWORD *)&v107 |= 1 << (v109 >> 2);
      }
      v105 += 2;
    }
    while (v105 != v106);
  }
  if ((v144 - 103) < 2)
  {
    result = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))v68[43])(v68[43], 0, 0, 1, 1);
    if ((_DWORD)result)
    {
      if ((result - 257) < 0xFFFFFF00)
        abort();
      v115 = (result + 1) & 0xFFFFFFFE;
      v116 = (uint32x2_t)vdup_n_s32((int)result - 1);
      v117 = (int8x16_t)(unint64_t)v107;
      v118 = (int32x2_t)0x100000000;
      v119 = (uint64x2_t)vdupq_n_s64(1uLL);
      do
      {
        v120 = v117;
        v121 = (uint32x2_t)v118;
        v122 = vshr_n_u32((uint32x2_t)v118, 2uLL);
        v123.i64[0] = v122.u32[0];
        v123.i64[1] = v122.u32[1];
        v117 = vorrq_s8((int8x16_t)vshlq_u64(v119, v123), v120);
        v118 = vadd_s32(v118, (int32x2_t)0x200000002);
        v115 -= 2;
      }
      while (v115);
      v124 = vcgt_u32(v121, v116);
      v125.i64[0] = v124.i32[0];
      v125.i64[1] = v124.i32[1];
      v126 = vbslq_s8(v125, v120, v117);
      v107 = vorr_s8(*(int8x8_t *)v126.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
    }
  }
  for (j = 0; j != 64; ++j)
  {
    if (((*(_QWORD *)&v107 >> j) & 1) != 0)
    {
      v128 = 0;
      v129 = 4 * j;
      v130 = *(_QWORD *)(a1 + 56);
      v131 = *(_QWORD *)(a1 + 8);
      v132 = *v147;
      do
      {
        if (v130)
        {
          v133 = (unsigned __int16 *)(v130 + 2 * *(unsigned int *)(v131 + 24 * (v128 + v129) + 30800));
          v134 = v128 + v129 + 1283;
          do
          {
            *(_QWORD *)(v132 + 8 * ((unsigned __int16)v134 >> 6)) |= 1 << v134;
            v135 = *v133++;
            v134 += v135;
          }
          while (v135);
          v136 = (unsigned __int16 *)(v130 + 2 * *(unsigned int *)(v131 + 24 * (v128 + v129) + 24656));
          LODWORD(result) = v128 + v129 + 1027;
          do
          {
            *(_QWORD *)(v132 + 8 * ((unsigned __int16)result >> 6)) |= 1 << result;
            v137 = *v136++;
            result = (v137 + result);
          }
          while (v137);
        }
        ++v128;
      }
      while (v128 != 4);
    }
  }
  return result;
}

void sub_1C4834244(_QWORD *a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, int a7, int a8, char a9, _QWORD *a10)
{
  int v10;
  int v13;
  uint64_t v17;
  unsigned int v18;
  llvm::MachineInstr *v20;
  unsigned int v21;
  int v22;
  char v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int IncompleteVirtualRegister;
  _UNKNOWN ***v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  llvm::MachineInstr *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  llvm::MachineFunction *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  llvm::MachineInstr *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  int v53;
  unsigned int v54;
  llvm::MachineFunction *v55;
  llvm::MachineInstr *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int16 v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  uint64_t v68;
  int v69;
  int v70;
  llvm::MachineFunction *v71;
  llvm::MachineInstr *v72;
  llvm::MachineInstr *v73;
  uint64_t *v74;
  uint64_t v77;
  unsigned int v78;
  char v80;
  uint64_t v81;
  __int128 v83;
  __int128 v84;
  unsigned __int8 *v85;

  v10 = a8;
  v13 = a4;
  v17 = *(_QWORD *)(a2 + 24);
  if (a7)
    v18 = 0x10000;
  else
    v18 = 1024;
  v78 = v18;
  v77 = *(_QWORD *)(v17 + 32);
  v81 = *(_QWORD *)(a2 + 24);
  if (v18 <= a5)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 40);
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v27, "", 0);
    v29 = &off_1E7F98800;
    v30 = a7;
    if (a7)
      v29 = &off_1E7F98468;
    *(_QWORD *)(*(_QWORD *)(v27 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v29;
    v31 = *(_QWORD *)(v27 + 8);
    if (v31)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 24))(v31, IncompleteVirtualRegister);
    v32 = a10[1];
    v33 = *(llvm::MachineFunction **)(v17 + 32);
    v34 = *(unsigned __int8 **)(a2 + 56);
    v85 = v34;
    if (v34)
      llvm::MetadataTracking::track((uint64_t)&v85, v34, 2);
    v35 = v32 + 69360;
    v36 = (llvm::MachineInstr *)*((_QWORD *)v33 + 28);
    if (v36)
      *((_QWORD *)v33 + 28) = *(_QWORD *)v36;
    else
      v36 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v33 + 128, 72, 3);
    *(_QWORD *)&v83 = v85;
    if (v85)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v85, v85, (uint64_t)&v83);
      v85 = 0;
    }
    llvm::MachineInstr::MachineInstr(v36, v33, v35, (unsigned __int8 **)&v83, 0);
    if ((_QWORD)v83)
      llvm::MetadataTracking::untrack((uint64_t)&v83, (unsigned __int8 *)v83);
    v13 = a4;
    if (v85)
      llvm::MetadataTracking::untrack((uint64_t)&v85, v85);
    v37 = v17;
    v38 = v17 + 48;
    if (v38 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0)
      *((_WORD *)v36 + 22) |= 0xCu;
    sub_1C512CA10((uint64_t *)(v37 + 40), (uint64_t *)a2, (uint64_t)v36);
    v74 = (uint64_t *)(v37 + 40);
    *((_QWORD *)&v83 + 1) = 0;
    v84 = 0uLL;
    if (v30)
      v39 = 0x1000000;
    else
      v39 = 285221120;
    *(_QWORD *)&v83 = __PAIR64__(IncompleteVirtualRegister, v39);
    llvm::MachineInstr::addOperand(v36, v33, (const llvm::MachineOperand *)&v83);
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = 0;
    llvm::MachineInstr::addOperand(v36, v33, (const llvm::MachineOperand *)&v83);
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = a5;
    llvm::MachineInstr::addOperand(v36, v33, (const llvm::MachineOperand *)&v83);
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = a5;
    llvm::MachineInstr::addOperand(v36, v33, (const llvm::MachineOperand *)&v83);
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = a5;
    llvm::MachineInstr::addOperand(v36, v33, (const llvm::MachineOperand *)&v83);
    v83 = 0u;
    v84 = 0u;
    llvm::MachineInstr::addOperand(v36, v33, (const llvm::MachineOperand *)&v83);
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = 0;
    llvm::MachineInstr::addOperand(v36, v33, (const llvm::MachineOperand *)&v83);
    v83 = 0u;
    v84 = 0u;
    llvm::MachineInstr::addOperand(v36, v33, (const llvm::MachineOperand *)&v83);
    *((_QWORD *)&v83 + 1) = 0;
    v84 = 0uLL;
    LODWORD(v83) = 50331648;
    DWORD1(v83) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v36, v33, (const llvm::MachineOperand *)&v83);
    v40 = v37;
    v25 = a10;
    v26 = a3;
    if ((v30 & 1) == 0)
    {
      v41 = a10[1];
      v42 = *(llvm::MachineFunction **)(v40 + 32);
      v43 = *(unsigned __int8 **)(a2 + 56);
      v85 = v43;
      if (v43)
        llvm::MetadataTracking::track((uint64_t)&v85, v43, 2);
      v44 = v41 + 48720;
      v45 = (llvm::MachineInstr *)*((_QWORD *)v42 + 28);
      if (v45)
        *((_QWORD *)v42 + 28) = *(_QWORD *)v45;
      else
        v45 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v42 + 128, 72, 3);
      *(_QWORD *)&v83 = v85;
      if (v85)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v85, v85, (uint64_t)&v83);
        v85 = 0;
      }
      llvm::MachineInstr::MachineInstr(v45, v42, v44, (unsigned __int8 **)&v83, 0);
      if ((_QWORD)v83)
        llvm::MetadataTracking::untrack((uint64_t)&v83, (unsigned __int8 *)v83);
      if (v85)
        llvm::MetadataTracking::untrack((uint64_t)&v85, v85);
      if (v38 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0)
        *((_WORD *)v45 + 22) |= 0xCu;
      sub_1C512CA10(v74, (uint64_t *)a2, (uint64_t)v45);
      *((_QWORD *)&v83 + 1) = 0;
      v84 = 0uLL;
      LODWORD(v83) = 16777984;
      DWORD1(v83) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      LODWORD(v83) = 1;
      *((_QWORD *)&v83 + 1) = 0;
      *(_QWORD *)&v84 = 0;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      LODWORD(v83) = 1;
      *((_QWORD *)&v83 + 1) = 0;
      *(_QWORD *)&v84 = 0;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      LODWORD(v83) = 1;
      *((_QWORD *)&v83 + 1) = 0;
      *(_QWORD *)&v84 = 0;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      LODWORD(v83) = 1;
      *((_QWORD *)&v83 + 1) = 0;
      *(_QWORD *)&v84 = 0;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      LODWORD(v83) = 1;
      *((_QWORD *)&v83 + 1) = 0;
      *(_QWORD *)&v84 = 0;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      v83 = 0u;
      v84 = 0u;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      LODWORD(v83) = 1;
      *((_QWORD *)&v83 + 1) = 0;
      *(_QWORD *)&v84 = 0;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      v83 = 0u;
      v84 = 0u;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      *((_QWORD *)&v83 + 1) = 0;
      v84 = 0uLL;
      LODWORD(v83) = 50331648;
      DWORD1(v83) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      *((_QWORD *)&v83 + 1) = 0;
      v84 = 0uLL;
      LODWORD(v83) = 100663296;
      DWORD1(v83) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(v45, v42, (const llvm::MachineOperand *)&v83);
      v13 = a4;
      v40 = v81;
      v25 = a10;
    }
    v24 = IncompleteVirtualRegister;
    v20 = (llvm::MachineInstr *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v25 + 184))(v25, v40, a2, a2);
    llvm::MachineOperand::ChangeToRegister(*((_QWORD *)v20 + 4) + 32 * a6, IncompleteVirtualRegister, 0, 0, 1, 0, 0, 0);
    llvm::MachineInstr::removeOperand((uint64_t)v20, a6 + 1);
    v23 = v30;
    v10 = a8;
    if ((v30 & 1) != 0)
    {
      v21 = 2549;
      v46 = 2573;
    }
    else
    {
      v21 = 11604;
      v46 = 13229;
    }
    if (a8)
      v21 = v46;
  }
  else
  {
    v20 = (llvm::MachineInstr *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a10 + 184))(a10, v17, a2, a2);
    llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*((_QWORD *)v20 + 4) + 32 * a6), a5, 0);
    llvm::MachineInstr::removeOperand((uint64_t)v20, a6 + 1);
    v21 = 2548;
    if (v10)
      v21 = 2572;
    v22 = 11603;
    if (v10)
      v22 = 13228;
    v23 = a7;
    v24 = -1;
    if ((a7 & 1) == 0)
      v21 = v22;
    v25 = a10;
    v26 = a3;
  }
  *((_QWORD *)v20 + 2) = v25[1] + 48 * v21;
  if (!v10)
  {
    if (v24 == -1)
    {
      v80 = v23;
      v57 = v13;
      v58 = *(_QWORD *)(v77 + 40);
      v59 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v58, "", 0);
      v24 = v59;
      *(_QWORD *)(*(_QWORD *)(v58 + 24) + 16 * (v59 & 0x7FFFFFFF)) = &off_1E7F98468;
      v60 = *(_QWORD *)(v58 + 8);
      if (v60)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 24))(v60, v59);
      v13 = v57;
      v61 = v80;
    }
    else
    {
      v59 = v24;
      v61 = v23;
    }
    llvm::MachineOperand::setReg(*((_QWORD *)v20 + 4), v24);
    if (v78 <= a5 && (v61 & 1) == 0)
      **((_DWORD **)v20 + 4) = **((_DWORD **)v20 + 4) & 0xFFF000FF | 0x2100;
    *((_QWORD *)&v83 + 1) = 0;
    v84 = 0uLL;
    LODWORD(v83) = 50331648;
    DWORD1(v83) = v59;
    llvm::MachineInstr::addOperand(v20, *(llvm::MachineFunction **)(*((_QWORD *)v20 + 3) + 32), (const llvm::MachineOperand *)&v83);
    v62 = a1[1];
    v63 = a1[7];
    v64 = *(unsigned int *)(v62 + 24 * v26 + 4);
    if (*(_WORD *)(v63 + 2 * v64))
    {
      v65 = *(_WORD *)(v63 + 2 * v64) + v26;
      v66 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v62 + 24 * v26 + 12));
      v67 = (unsigned __int16 *)(v63 + 2 * v64 + 2);
      v68 = v81;
      while (*v66 != v13)
      {
        v69 = *v67++;
        v65 += v69;
        ++v66;
        if (!v69)
        {
          v70 = 0;
          goto LABEL_79;
        }
      }
      v70 = v65;
    }
    else
    {
      v70 = 0;
      v68 = v81;
    }
LABEL_79:
    v71 = sub_1C612596C(v68, a2, (unsigned __int8 **)(a2 + 56), v25[1] + 48144, v70);
    v73 = v72;
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = 0;
    llvm::MachineInstr::addOperand(v72, v71, (const llvm::MachineOperand *)&v83);
    *((_QWORD *)&v83 + 1) = 0;
    v84 = 0uLL;
    LODWORD(v83) = 256;
    DWORD1(v83) = v59;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = 0;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    *((_QWORD *)&v83 + 1) = 0;
    v84 = 0uLL;
    LODWORD(v83) = 256;
    DWORD1(v83) = v59;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = 0;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    *((_QWORD *)&v83 + 1) = 0;
    v84 = 0uLL;
    LODWORD(v83) = 256;
    DWORD1(v83) = v59;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = 0;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    *((_QWORD *)&v83 + 1) = 0;
    v84 = 0uLL;
    LODWORD(v83) = 256;
    DWORD1(v83) = v59;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = 0;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    v83 = 0u;
    v84 = 0u;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    LODWORD(v83) = 1;
    *((_QWORD *)&v83 + 1) = 0;
    *(_QWORD *)&v84 = 0;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    v83 = 0u;
    v84 = 0u;
    llvm::MachineInstr::addOperand(v73, v71, (const llvm::MachineOperand *)&v83);
    *((_QWORD *)&v83 + 1) = 0;
    v84 = 0uLL;
    LODWORD(v83) = 100663296;
    DWORD1(v83) = v59;
    v55 = *(llvm::MachineFunction **)(*((_QWORD *)v73 + 3) + 32);
    v56 = v73;
    goto LABEL_63;
  }
  v47 = a1[1];
  v48 = a1[7];
  v49 = *(unsigned int *)(v47 + 24 * v26 + 4);
  if (*(_WORD *)(v48 + 2 * v49))
  {
    v50 = *(_WORD *)(v48 + 2 * v49) + v26;
    v51 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v47 + 24 * v26 + 12));
    v52 = (unsigned __int16 *)(v48 + 2 * v49 + 2);
    while (*v51 != v13)
    {
      v53 = *v52++;
      v50 += v53;
      ++v51;
      if (!v53)
        goto LABEL_59;
    }
    v54 = v50;
  }
  else
  {
LABEL_59:
    v54 = 0;
  }
  llvm::MachineOperand::setReg(*((_QWORD *)v20 + 4), v54);
  *((_QWORD *)&v83 + 1) = 0;
  v84 = 0uLL;
  LODWORD(v83) = 50331648;
  DWORD1(v83) = v26;
  llvm::MachineInstr::addOperand(v20, *(llvm::MachineFunction **)(*((_QWORD *)v20 + 3) + 32), (const llvm::MachineOperand *)&v83);
  if ((a9 & 1) == 0)
  {
    *((_QWORD *)&v83 + 1) = 0;
    v84 = 0uLL;
    LODWORD(v83) = 100663296;
    DWORD1(v83) = v26;
    v55 = *(llvm::MachineFunction **)(*((_QWORD *)v20 + 3) + 32);
    v56 = v20;
LABEL_63:
    llvm::MachineInstr::addOperand(v56, v55, (const llvm::MachineOperand *)&v83);
  }
}

unsigned int *sub_1C4834C60(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  llvm::MachineFunction *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int16 *v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int IncompleteVirtualRegister;
  uint64_t v29;
  uint64_t v30;
  llvm::MachineFunction *v31;
  unsigned __int8 *v32;
  llvm::MachineInstr *v33;
  llvm::MachineInstr *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  int v75;
  unsigned int v76;
  BOOL v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  llvm::MachineFunction *v84;
  unsigned __int8 *v85;
  llvm::MachineInstr *v86;
  const llvm::MachineInstr *v87;
  uint64_t v88;
  llvm::MachineFunction *v89;
  unsigned __int8 *v90;
  llvm::MachineInstr *v91;
  llvm::MachineInstr *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned __int16 *v100;
  unsigned __int16 *v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unsigned __int16 *v108;
  unsigned __int16 *v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned __int16 *v116;
  unsigned __int16 *v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned __int16 *v124;
  unsigned __int16 *v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unsigned __int16 *v132;
  unsigned __int16 *v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unsigned __int16 *v140;
  unsigned __int16 *v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  unsigned __int16 *v148;
  unsigned __int16 *v149;
  int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  unsigned __int16 *v156;
  unsigned __int16 *v157;
  int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unsigned __int16 *v164;
  unsigned __int16 *v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned __int16 *v172;
  unsigned __int16 *v173;
  int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unsigned __int16 *v180;
  unsigned __int16 *v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  unsigned __int16 *v188;
  unsigned __int16 *v189;
  int v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unsigned __int16 *v196;
  unsigned __int16 *v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  unsigned __int16 *v204;
  unsigned __int16 *v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  int v213;
  unsigned __int16 *v214;
  unsigned __int16 *v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  unsigned __int16 *v221;
  unsigned __int16 *v222;
  int v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  unsigned int *result;
  uint64_t v228;
  unsigned int v229;
  char *v230;
  unsigned int v231;
  char *v232;
  int v233;
  int v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  unsigned int v239;
  int v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int v244[2];
  uint64_t v245;
  int v246;
  llvm::MachineFunction *v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  _QWORD *v251;
  int v252;
  __int128 v253;
  __int128 v254;
  unsigned __int8 *v255[2];

  v6 = *(llvm::MachineFunction **)(*(_QWORD *)(a2 + 24) + 32);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v6 + 2) + 112))(*((_QWORD *)v6 + 2));
  v251 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v6 + 2) + 104))(*((_QWORD *)v6 + 2));
  v245 = a4;
  v8 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * a4 + 16);
  v252 = 0;
  v9 = (*(uint64_t (**)(uint64_t, llvm::MachineFunction *, uint64_t, int *))(*(_QWORD *)v7 + 232))(v7, v6, v8, &v252);
  v247 = v6;
  v10 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v6 + 1) + 16))(*((_QWORD *)v6 + 1), *(_QWORD *)v6)+ 281);
  v248 = *(_QWORD *)(a2 + 24);
  v249 = a2;
  v11 = *(unsigned __int16 **)(a2 + 16);
  v12 = *v11;
  v241 = v10;
  if ((v12 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 48) & 0x10) != 0)
  {
    v15 = 1;
  }
  else
  {
    v13 = *(_WORD *)(a2 + 44);
    v14 = *((_QWORD *)v11 + 1);
    if ((v13 & 0xC) != 0 && (v13 & 4) == 0)
    {
      if ((v14 & 0x100000) != 0)
      {
        v15 = 1;
      }
      else
      {
        v228 = a2;
        while (1)
        {
          v229 = *(unsigned __int16 *)(v228 + 44);
          if ((v229 & 8) == 0)
            break;
          v228 = *(_QWORD *)(v228 + 8);
          v15 = (v229 >> 3) & 1;
          if ((*(_BYTE *)(*(_QWORD *)(v228 + 16) + 10) & 0x10) != 0)
            goto LABEL_5;
        }
        v15 = (v229 >> 3) & 1;
      }
    }
    else
    {
      v15 = (v14 >> 20) & 1;
    }
  }
LABEL_5:
  v16 = 0;
  v17 = 8;
  v18 = 1;
  switch(v12)
  {
    case 12157:
    case 12158:
LABEL_8:
      v18 = 0;
      v17 = 112;
      goto LABEL_32;
    case 12159:
    case 12160:
LABEL_16:
      v18 = 0;
      v17 = 128;
      goto LABEL_32;
    case 12161:
    case 12162:
LABEL_18:
      v18 = 0;
      v17 = 144;
      goto LABEL_32;
    case 12163:
    case 12164:
LABEL_12:
      v18 = 0;
      v17 = 160;
      goto LABEL_32;
    case 12165:
    case 12166:
LABEL_22:
      v17 = 16;
      goto LABEL_32;
    case 12167:
    case 12168:
LABEL_25:
      v18 = 0;
      v17 = 176;
      goto LABEL_32;
    case 12169:
    case 12170:
LABEL_19:
      v18 = 0;
      v17 = 192;
      goto LABEL_32;
    case 12171:
    case 12172:
LABEL_28:
      v18 = 0;
      v17 = 208;
      goto LABEL_32;
    case 12173:
    case 12174:
LABEL_14:
      v18 = 0;
      v17 = 224;
      goto LABEL_32;
    case 12175:
    case 12176:
LABEL_27:
      v18 = 0;
      v17 = 240;
      goto LABEL_32;
    case 12177:
    case 12178:
LABEL_11:
      v18 = 0;
      v17 = 256;
      goto LABEL_32;
    case 12179:
    case 12180:
LABEL_13:
      v18 = 0;
      v17 = 288;
      goto LABEL_32;
    case 12181:
    case 12182:
LABEL_24:
      v18 = 0;
      v17 = 320;
      goto LABEL_32;
    case 12183:
    case 12184:
LABEL_10:
      v17 = 32;
      goto LABEL_32;
    case 12185:
    case 12186:
LABEL_17:
      v18 = 0;
      v17 = 352;
      goto LABEL_32;
    case 12187:
    case 12188:
LABEL_9:
      v18 = 0;
      v17 = 384;
      goto LABEL_32;
    case 12189:
    case 12190:
LABEL_20:
      v18 = 0;
      v17 = 416;
      goto LABEL_32;
    case 12191:
    case 12192:
LABEL_26:
      v18 = 0;
      v17 = 448;
      goto LABEL_32;
    case 12193:
    case 12194:
LABEL_30:
      v18 = 0;
      v17 = 480;
      goto LABEL_32;
    case 12195:
    case 12196:
LABEL_21:
      v18 = 0;
      v17 = 48;
      goto LABEL_32;
    case 12197:
    case 12198:
LABEL_23:
      v18 = 0;
      v17 = 512;
      goto LABEL_32;
    case 12199:
    case 12200:
LABEL_29:
      v18 = 0;
      v17 = 64;
      goto LABEL_32;
    case 12201:
    case 12202:
LABEL_31:
      v18 = 0;
      v17 = 80;
      goto LABEL_32;
    case 12203:
    case 12204:
      goto LABEL_33;
    case 12205:
    case 12206:
LABEL_15:
      v18 = 0;
      v17 = 96;
LABEL_32:
      v16 = 1;
LABEL_33:
      v19 = 0;
      v20 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)v244 = a4 + 1;
      v246 = *(_DWORD *)(v20 + 32 * *(_QWORD *)v244 + 16) + v9;
      v250 = *(unsigned int *)(v20 + 4);
      v21 = 1;
      if ((v18 & 1) != 0 || (v17 & 0x18) == 0)
        goto LABEL_43;
      if ((*(_WORD *)(a1[14] + 2 * v250) & 1) == 0)
      {
        if ((v15 & 1) == 0)
        {
          v22 = v15;
          sub_1C4834244(a1, v249, v250, (((((v17 + 15) >> 3) & 0xFE) - 2) >> 1) + 1, (((v17 + 15) >> 3) & 0xFE) - 2 + v246, a4, v10 != 0, 0, 1, v251);
          LODWORD(v15) = v22;
          v10 = v241;
          v21 = 0;
          v19 = 0;
          v17 -= 16;
          goto LABEL_43;
        }
        goto LABEL_42;
      }
      if (!v16)
      {
LABEL_42:
        v19 = 0;
        goto LABEL_43;
      }
      v19 = 0;
      v23 = 1;
      v24 = 1;
      do
      {
        v25 = v15;
        sub_1C4834244(a1, a2, v250, v23, v246 + v19, a4, v10 != 0, v15, v24 & 1, v251);
        v15 = v25;
        v10 = v241;
        v24 = 0;
        v21 = 0;
        v19 += 2;
        v17 -= 16;
        ++v23;
      }
      while (v17 > 0xF);
LABEL_43:
      v231 = v15;
      if (v10)
      {
        if (!v17)
          goto LABEL_364;
        v242 = v15;
        v232 = (char *)&dword_1C6458978[12 * v15];
        v233 = 1 << (v250 & 7);
        v235 = v250 >> 3;
        v239 = v250 - 1;
        while (1)
        {
          v26 = v19 + v246;
          if (v26 < 0x10000)
          {
            IncompleteVirtualRegister = -1;
          }
          else
          {
            v27 = *((_QWORD *)v247 + 5);
            IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v27, "", 0);
            *(_QWORD *)(*(_QWORD *)(v27 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
            v29 = *(_QWORD *)(v27 + 8);
            if (v29)
              (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
            v30 = v251[1];
            v31 = *(llvm::MachineFunction **)(v248 + 32);
            v32 = *(unsigned __int8 **)(v249 + 56);
            v255[0] = v32;
            if (v32)
              llvm::MetadataTracking::track((uint64_t)v255, v32, 2);
            v33 = (llvm::MachineInstr *)*((_QWORD *)v31 + 28);
            if (v33)
              *((_QWORD *)v31 + 28) = *(_QWORD *)v33;
            else
              v33 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v31 + 128, 72, 3);
            *(unsigned __int8 **)&v253 = v255[0];
            if (v255[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v255, v255[0], (uint64_t)&v253);
              v255[0] = 0;
            }
            llvm::MachineInstr::MachineInstr(v33, v31, v30 + 69360, (unsigned __int8 **)&v253, 0);
            if ((_QWORD)v253)
              llvm::MetadataTracking::untrack((uint64_t)&v253, (unsigned __int8 *)v253);
            if (v255[0])
              llvm::MetadataTracking::untrack((uint64_t)v255, v255[0]);
            if (v248 + 48 != v249 && (*(_WORD *)(v249 + 44) & 4) != 0)
              *((_WORD *)v33 + 22) |= 0xCu;
            sub_1C512CA10((uint64_t *)(v248 + 40), (uint64_t *)v249, (uint64_t)v33);
            *((_QWORD *)&v253 + 1) = 0;
            v254 = 0uLL;
            LODWORD(v253) = 285221120;
            DWORD1(v253) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v253);
            LODWORD(v253) = 1;
            *((_QWORD *)&v253 + 1) = 0;
            *(_QWORD *)&v254 = 0;
            llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v253);
            LODWORD(v253) = 1;
            *((_QWORD *)&v253 + 1) = 0;
            *(_QWORD *)&v254 = v19 + v246;
            llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v253);
            LODWORD(v253) = 1;
            *((_QWORD *)&v253 + 1) = 0;
            *(_QWORD *)&v254 = v19 + v246;
            llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v253);
            LODWORD(v253) = 1;
            *((_QWORD *)&v253 + 1) = 0;
            *(_QWORD *)&v254 = v19 + v246;
            llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v253);
            v253 = 0u;
            v254 = 0u;
            llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v253);
            LODWORD(v253) = 1;
            *((_QWORD *)&v253 + 1) = 0;
            *(_QWORD *)&v254 = 0;
            llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v253);
            v253 = 0u;
            v254 = 0u;
            llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v253);
            *((_QWORD *)&v253 + 1) = 0;
            v254 = 0uLL;
            LODWORD(v253) = 50331648;
            DWORD1(v253) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v253);
          }
          v34 = (llvm::MachineInstr *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v251 + 184))(v251, v248, v249, v249);
          llvm::MachineInstr::copyImplicitOps(v34, v247, (const llvm::MachineInstr *)v249);
          v35 = (unsigned int *)(*((_QWORD *)v34 + 4) + 32 * a4);
          if (v26 < 0x10000)
            llvm::MachineOperand::ChangeToImmediate(v35, v26, 0);
          else
            llvm::MachineOperand::ChangeToRegister((uint64_t)v35, IncompleteVirtualRegister, 0, 0, 1, 0, 0, 0);
          llvm::MachineInstr::removeOperand((uint64_t)v34, v244[0]);
          *((_QWORD *)&v253 + 1) = 0;
          v254 = 0uLL;
          LODWORD(v253) = 50331648;
          DWORD1(v253) = v250;
          llvm::MachineInstr::addOperand(v34, *(llvm::MachineFunction **)(*((_QWORD *)v34 + 3) + 32), (const llvm::MachineOperand *)&v253);
          if ((v21 & 1) == 0)
          {
            *((_QWORD *)&v253 + 1) = 0;
            v254 = 0uLL;
            LODWORD(v253) = 100663296;
            DWORD1(v253) = v250;
            llvm::MachineInstr::addOperand(v34, *(llvm::MachineFunction **)(*((_QWORD *)v34 + 3) + 32), (const llvm::MachineOperand *)&v253);
          }
          v36 = v17 - 128;
          if (v17 >= 0x80)
            break;
          v36 = v17 - 96;
          if (v17 >= 0x60)
          {
            if (v239 > 0x4A7E || (v233 & byte_1C6888426[v235]) == 0)
            {
              v45 = a1[1];
              v46 = a1[7];
              v47 = *(unsigned int *)(v45 + 24 * v250 + 4);
              if (*(_WORD *)(v46 + 2 * v47))
              {
                v48 = *(unsigned __int16 *)(v46 + 2 * v47) + (_DWORD)v250;
                v49 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v45 + 24 * v250 + 12));
                v50 = (unsigned __int16 *)(v46 + 2 * v47 + 2);
                while (dword_1C6462FA0[v19 >> 1] != *v49)
                {
                  v51 = *v50++;
                  v48 += v51;
                  ++v49;
                  if (!v51)
                    goto LABEL_85;
                }
                v52 = (unsigned __int16)v48;
              }
              else
              {
LABEL_85:
                v52 = 0;
              }
              llvm::MachineOperand::setReg(*((_QWORD *)v34 + 4), v52);
            }
            *((_QWORD *)v34 + 2) = v251[1] + 48 * dword_1C6458978[12 * v242 + 8 + ((v26 & 0xFFFF0000) != 0)];
            v19 += 12;
            goto LABEL_130;
          }
          v36 = v17 - 64;
          if (v17 >= 0x40)
          {
            if (v239 > 0x497E || (v233 & byte_1C687CFBA[v235]) == 0)
            {
              v53 = a1[1];
              v54 = a1[7];
              v55 = *(unsigned int *)(v53 + 24 * v250 + 4);
              if (*(_WORD *)(v54 + 2 * v55))
              {
                v56 = *(unsigned __int16 *)(v54 + 2 * v55) + (_DWORD)v250;
                v57 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v53 + 24 * v250 + 12));
                v58 = (unsigned __int16 *)(v54 + 2 * v55 + 2);
                while (dword_1C6462F28[v19 >> 1] != *v57)
                {
                  v59 = *v58++;
                  v56 += v59;
                  ++v57;
                  if (!v59)
                    goto LABEL_96;
                }
                v60 = (unsigned __int16)v56;
              }
              else
              {
LABEL_96:
                v60 = 0;
              }
              llvm::MachineOperand::setReg(*((_QWORD *)v34 + 4), v60);
            }
            *((_QWORD *)v34 + 2) = v251[1] + 48 * dword_1C6458978[12 * v242 + 6 + ((v26 & 0xFFFF0000) != 0)];
            v19 += 8;
            goto LABEL_130;
          }
          v36 = v17 - 32;
          if (v17 >= 0x20)
          {
            if (v239 > 0x406 || (v233 & byte_1C6872272[v235]) == 0)
            {
              v61 = a1[1];
              v62 = a1[7];
              v63 = *(unsigned int *)(v61 + 24 * v250 + 4);
              if (*(_WORD *)(v62 + 2 * v63))
              {
                v64 = *(unsigned __int16 *)(v62 + 2 * v63) + (_DWORD)v250;
                v65 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v61 + 24 * v250 + 12));
                v66 = (unsigned __int16 *)(v62 + 2 * v63 + 2);
                while (dword_1C6462EA8[v19 >> 1] != *v65)
                {
                  v67 = *v66++;
                  v64 += v67;
                  ++v65;
                  if (!v67)
                    goto LABEL_107;
                }
                v68 = (unsigned __int16)v64;
              }
              else
              {
LABEL_107:
                v68 = 0;
              }
              llvm::MachineOperand::setReg(*((_QWORD *)v34 + 4), v68);
            }
            *((_QWORD *)v34 + 2) = v251[1] + 48 * dword_1C6458978[12 * v242 + 4 + ((v26 & 0xFFFF0000) != 0)];
            v19 += 4;
            goto LABEL_130;
          }
          v36 = v17 - 16;
          if (v17 >= 0x10)
          {
            if (v231 && (v239 > 0x806 || (v233 & byte_1C68704E6[v235]) == 0))
            {
              v69 = a1[1];
              v70 = a1[7];
              v71 = *(unsigned int *)(v69 + 24 * v250 + 4);
              if (*(_WORD *)(v70 + 2 * v71))
              {
                v72 = *(unsigned __int16 *)(v70 + 2 * v71) + (_DWORD)v250;
                v73 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v69 + 24 * v250 + 12));
                v74 = (unsigned __int16 *)(v70 + 2 * v71 + 2);
                while ((v19 >> 1) + 1 != *v73)
                {
                  v75 = *v74++;
                  v72 += v75;
                  ++v73;
                  if (!v75)
                    goto LABEL_119;
                }
                v76 = (unsigned __int16)v72;
              }
              else
              {
LABEL_119:
                v76 = 0;
              }
              llvm::MachineOperand::setReg(*((_QWORD *)v34 + 4), v76);
            }
            *((_QWORD *)v34 + 2) = v251[1] + 48 * dword_1C6458978[12 * v242 + 2 + ((v26 & 0xFFFF0000) != 0)];
            v19 += 2;
            goto LABEL_130;
          }
          v77 = v17 >= 8;
          v17 -= 8;
          if (!v77 || v19)
            goto LABEL_373;
          *((_QWORD *)v34 + 2) = v251[1] + 48 * *(unsigned int *)&v232[4 * ((v26 & 0xFFFF0000) != 0)];
          v19 = 1;
LABEL_131:
          v21 = 0;
          if (!v17)
            goto LABEL_364;
        }
        if (v239 > 0x4B7E || (v233 & byte_1C6893D86[v235]) == 0)
        {
          v37 = a1[1];
          v38 = a1[7];
          v39 = *(unsigned int *)(v37 + 24 * v250 + 4);
          if (*(_WORD *)(v38 + 2 * v39))
          {
            v40 = *(unsigned __int16 *)(v38 + 2 * v39) + (_DWORD)v250;
            v41 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v37 + 24 * v250 + 12));
            v42 = (unsigned __int16 *)(v38 + 2 * v39 + 2);
            while (dword_1C6463010[v19 >> 1] != *v41)
            {
              v43 = *v42++;
              v40 += v43;
              ++v41;
              if (!v43)
                goto LABEL_77;
            }
            v44 = (unsigned __int16)v40;
          }
          else
          {
LABEL_77:
            v44 = 0;
          }
          llvm::MachineOperand::setReg(*((_QWORD *)v34 + 4), v44);
        }
        *((_QWORD *)v34 + 2) = v251[1] + 48 * dword_1C6458978[12 * v242 + 10 + ((v26 & 0xFFFF0000) != 0)];
        v19 += 16;
LABEL_130:
        v17 = v36;
        goto LABEL_131;
      }
      if (!v17)
        goto LABEL_364;
      v78 = v15;
      v230 = (char *)&dword_1C6458858[36 * v15];
      v236 = v250 >> 3;
      v234 = 1 << (v250 & 7);
      v237 = (uint64_t *)(v248 + 40);
      v238 = v248 + 48;
      v79 = v250 - 1;
      break;
    default:
      switch(v12)
      {
        case 12884:
        case 12885:
          goto LABEL_8;
        case 12886:
        case 12887:
          goto LABEL_16;
        case 12888:
        case 12889:
          goto LABEL_18;
        case 12890:
        case 12891:
          goto LABEL_12;
        case 12892:
        case 12893:
          goto LABEL_22;
        case 12894:
        case 12895:
          goto LABEL_25;
        case 12896:
        case 12897:
          goto LABEL_19;
        case 12898:
        case 12899:
          goto LABEL_28;
        case 12900:
        case 12901:
          goto LABEL_14;
        case 12902:
        case 12903:
          goto LABEL_27;
        case 12904:
        case 12905:
          goto LABEL_11;
        case 12906:
        case 12907:
          goto LABEL_13;
        case 12908:
        case 12909:
          goto LABEL_24;
        case 12910:
        case 12911:
          goto LABEL_10;
        case 12912:
        case 12913:
          goto LABEL_17;
        case 12914:
        case 12915:
          goto LABEL_9;
        case 12916:
        case 12917:
          goto LABEL_20;
        case 12918:
        case 12919:
          goto LABEL_26;
        case 12920:
        case 12921:
          goto LABEL_30;
        case 12922:
        case 12923:
          goto LABEL_21;
        case 12924:
        case 12925:
          goto LABEL_23;
        case 12926:
        case 12927:
          goto LABEL_29;
        case 12928:
        case 12929:
          goto LABEL_31;
        case 12930:
        case 12931:
          goto LABEL_33;
        case 12932:
        case 12933:
          goto LABEL_15;
        default:
          if (v12 != 13356)
            return llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * a4), v9, 0);
          llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * a4), (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * (a4 + 1) + 16) + v9), 0);
          result = (unsigned int *)llvm::MachineInstr::removeOperand(a2, a4 + 1);
          *(_QWORD *)(a2 + 16) = v251[1] + 555792;
          return result;
      }
  }
  while (1)
  {
    v243 = v19 + v246;
    if (v243 < 0x400)
    {
      v81 = -1;
      v87 = (const llvm::MachineInstr *)v249;
    }
    else
    {
      v80 = *((_QWORD *)v247 + 5);
      v81 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v80, "", 0);
      *(_QWORD *)(*(_QWORD *)(v80 + 24) + 16 * (v81 & 0x7FFFFFFF)) = &off_1E7F98800;
      v82 = *(_QWORD *)(v80 + 8);
      if (v82)
        (*(void (**)(uint64_t))(*(_QWORD *)v82 + 24))(v82);
      v83 = v251[1];
      v84 = *(llvm::MachineFunction **)(v248 + 32);
      v85 = *(unsigned __int8 **)(v249 + 56);
      v255[0] = v85;
      if (v85)
        llvm::MetadataTracking::track((uint64_t)v255, v85, 2);
      v86 = (llvm::MachineInstr *)*((_QWORD *)v84 + 28);
      if (v86)
        *((_QWORD *)v84 + 28) = *(_QWORD *)v86;
      else
        v86 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v84 + 128, 72, 3);
      *(unsigned __int8 **)&v253 = v255[0];
      if (v255[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v255, v255[0], (uint64_t)&v253);
        v255[0] = 0;
      }
      llvm::MachineInstr::MachineInstr(v86, v84, v83 + 69360, (unsigned __int8 **)&v253, 0);
      if ((_QWORD)v253)
        llvm::MetadataTracking::untrack((uint64_t)&v253, (unsigned __int8 *)v253);
      if (v255[0])
        llvm::MetadataTracking::untrack((uint64_t)v255, v255[0]);
      if (v238 != v249 && (*(_WORD *)(v249 + 44) & 4) != 0)
        *((_WORD *)v86 + 22) |= 0xCu;
      sub_1C512CA10(v237, (uint64_t *)v249, (uint64_t)v86);
      *((_QWORD *)&v253 + 1) = 0;
      v254 = 0uLL;
      LODWORD(v253) = 285221120;
      DWORD1(v253) = v81;
      llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = 0;
      llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = v19 + v246;
      llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = v19 + v246;
      llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = v19 + v246;
      llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v253);
      v253 = 0u;
      v254 = 0u;
      llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = 0;
      llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v253);
      v253 = 0u;
      v254 = 0u;
      llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v253);
      *((_QWORD *)&v253 + 1) = 0;
      v254 = 0uLL;
      LODWORD(v253) = 50331648;
      DWORD1(v253) = v81;
      llvm::MachineInstr::addOperand(v86, v84, (const llvm::MachineOperand *)&v253);
      v88 = v251[1];
      v89 = *(llvm::MachineFunction **)(v248 + 32);
      v90 = *(unsigned __int8 **)(v249 + 56);
      v255[0] = v90;
      if (v90)
        llvm::MetadataTracking::track((uint64_t)v255, v90, 2);
      v91 = (llvm::MachineInstr *)*((_QWORD *)v89 + 28);
      if (v91)
        *((_QWORD *)v89 + 28) = *(_QWORD *)v91;
      else
        v91 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v89 + 128, 72, 3);
      *(unsigned __int8 **)&v253 = v255[0];
      if (v255[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v255, v255[0], (uint64_t)&v253);
        v255[0] = 0;
      }
      llvm::MachineInstr::MachineInstr(v91, v89, v88 + 48720, (unsigned __int8 **)&v253, 0);
      if ((_QWORD)v253)
        llvm::MetadataTracking::untrack((uint64_t)&v253, (unsigned __int8 *)v253);
      if (v255[0])
        llvm::MetadataTracking::untrack((uint64_t)v255, v255[0]);
      v87 = (const llvm::MachineInstr *)v249;
      if (v238 != v249 && (*(_WORD *)(v249 + 44) & 4) != 0)
        *((_WORD *)v91 + 22) |= 0xCu;
      sub_1C512CA10(v237, (uint64_t *)v249, (uint64_t)v91);
      *((_QWORD *)&v253 + 1) = 0;
      v254 = 0uLL;
      LODWORD(v253) = 16777984;
      DWORD1(v253) = v81;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = 0;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = 0;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = 0;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = 0;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = 0;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      v253 = 0u;
      v254 = 0u;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      LODWORD(v253) = 1;
      *((_QWORD *)&v253 + 1) = 0;
      *(_QWORD *)&v254 = 0;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      v253 = 0u;
      v254 = 0u;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      *((_QWORD *)&v253 + 1) = 0;
      v254 = 0uLL;
      LODWORD(v253) = 50331648;
      DWORD1(v253) = v81;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      *((_QWORD *)&v253 + 1) = 0;
      v254 = 0uLL;
      LODWORD(v253) = 100663296;
      DWORD1(v253) = v81;
      llvm::MachineInstr::addOperand(v91, v89, (const llvm::MachineOperand *)&v253);
      v78 = v231;
      v79 = v250 - 1;
    }
    v92 = (llvm::MachineInstr *)(*(uint64_t (**)(_QWORD *, uint64_t, const llvm::MachineInstr *, const llvm::MachineInstr *))(*v251 + 184))(v251, v248, v87, v87);
    llvm::MachineInstr::copyImplicitOps(v92, v247, v87);
    v93 = (unsigned int *)(*((_QWORD *)v92 + 4) + 32 * v245);
    v94 = v19 + v246;
    if (v243 < 0x400)
      llvm::MachineOperand::ChangeToImmediate(v93, v243, 0);
    else
      llvm::MachineOperand::ChangeToRegister((uint64_t)v93, v81, 0, 0, 1, 0, 0, 0);
    llvm::MachineInstr::removeOperand((uint64_t)v92, v244[0]);
    *((_QWORD *)&v253 + 1) = 0;
    v254 = 0uLL;
    LODWORD(v253) = 50331648;
    DWORD1(v253) = v250;
    llvm::MachineInstr::addOperand(v92, *(llvm::MachineFunction **)(*((_QWORD *)v92 + 3) + 32), (const llvm::MachineOperand *)&v253);
    if ((v21 & 1) == 0)
    {
      *((_QWORD *)&v253 + 1) = 0;
      v254 = 0uLL;
      LODWORD(v253) = 100663296;
      DWORD1(v253) = v250;
      llvm::MachineInstr::addOperand(v92, *(llvm::MachineFunction **)(*((_QWORD *)v92 + 3) + 32), (const llvm::MachineOperand *)&v253);
    }
    if (v17 >= 0x200)
      break;
    v95 = v17 - 480;
    if (v17 >= 0x1E0)
    {
      if (v79 > 0x478E || (v234 & byte_1C68CF41A[v236]) == 0)
      {
        v96 = a1[1];
        v97 = a1[7];
        v98 = *(unsigned int *)(v96 + 24 * v250 + 4);
        if (*(_WORD *)(v97 + 2 * v98))
        {
          v99 = *(unsigned __int16 *)(v97 + 2 * v98) + (_DWORD)v250;
          v100 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v96 + 24 * v250 + 12));
          v101 = (unsigned __int16 *)(v97 + 2 * v98 + 2);
          while (*(_DWORD *)((char *)&unk_1C6463228 + (v19 & 0xFFFFFFFC)) != *v100)
          {
            v102 = *v101++;
            v99 += v102;
            ++v100;
            if (!v102)
              goto LABEL_181;
          }
          v103 = (unsigned __int16)v99;
        }
        else
        {
LABEL_181:
          v103 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v103);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 32 + (v243 > 0x3FF)];
      v19 += 60;
LABEL_336:
      v17 = v95;
      goto LABEL_337;
    }
    v95 = v17 - 448;
    if (v17 >= 0x1C0)
    {
      if (v79 > 0x469E || (v234 & byte_1C68CD690[v236]) == 0)
      {
        v104 = a1[1];
        v105 = a1[7];
        v106 = *(unsigned int *)(v104 + 24 * v250 + 4);
        if (*(_WORD *)(v105 + 2 * v106))
        {
          v107 = *(unsigned __int16 *)(v105 + 2 * v106) + (_DWORD)v250;
          v108 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v104 + 24 * v250 + 12));
          v109 = (unsigned __int16 *)(v105 + 2 * v106 + 2);
          while (*(_DWORD *)((char *)&unk_1C646321C + (v19 & 0xFFFFFFFC)) != *v108)
          {
            v110 = *v109++;
            v107 += v110;
            ++v108;
            if (!v110)
              goto LABEL_189;
          }
          v111 = (unsigned __int16)v107;
        }
        else
        {
LABEL_189:
          v111 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v111);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 30 + (v243 > 0x3FF)];
      v19 += 56;
      goto LABEL_336;
    }
    v95 = v17 - 416;
    if (v17 >= 0x1A0)
    {
      if (v79 > 0x45AE || (v234 & byte_1C68CB958[v236]) == 0)
      {
        v112 = a1[1];
        v113 = a1[7];
        v114 = *(unsigned int *)(v112 + 24 * v250 + 4);
        if (*(_WORD *)(v113 + 2 * v114))
        {
          v115 = *(unsigned __int16 *)(v113 + 2 * v114) + (_DWORD)v250;
          v116 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v112 + 24 * v250 + 12));
          v117 = (unsigned __int16 *)(v113 + 2 * v114 + 2);
          while (*(_DWORD *)((char *)&unk_1C646320C + (v19 & 0xFFFFFFFC)) != *v116)
          {
            v118 = *v117++;
            v115 += v118;
            ++v116;
            if (!v118)
              goto LABEL_200;
          }
          v119 = (unsigned __int16)v115;
        }
        else
        {
LABEL_200:
          v119 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v119);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 28 + (v243 > 0x3FF)];
      v19 += 52;
      goto LABEL_336;
    }
    v95 = v17 - 384;
    if (v17 >= 0x180)
    {
      if (v79 > 0x44B6 || (v234 & byte_1C68C9C72[v236]) == 0)
      {
        v120 = a1[1];
        v121 = a1[7];
        v122 = *(unsigned int *)(v120 + 24 * v250 + 4);
        if (*(_WORD *)(v121 + 2 * v122))
        {
          v123 = *(unsigned __int16 *)(v121 + 2 * v122) + (_DWORD)v250;
          v124 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v120 + 24 * v250 + 12));
          v125 = (unsigned __int16 *)(v121 + 2 * v122 + 2);
          while (*(_DWORD *)((char *)&unk_1C64631F8 + (v19 & 0xFFFFFFFC)) != *v124)
          {
            v126 = *v125++;
            v123 += v126;
            ++v124;
            if (!v126)
              goto LABEL_211;
          }
          v127 = (unsigned __int16)v123;
        }
        else
        {
LABEL_211:
          v127 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v127);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 26 + (v243 > 0x3FF)];
      v19 += 48;
      goto LABEL_336;
    }
    v95 = v17 - 352;
    if (v17 >= 0x160)
    {
      if (v79 > 0x43BE || (v234 & byte_1C68C7FE2[v236]) == 0)
      {
        v128 = a1[1];
        v129 = a1[7];
        v130 = *(unsigned int *)(v128 + 24 * v250 + 4);
        if (*(_WORD *)(v129 + 2 * v130))
        {
          v131 = *(unsigned __int16 *)(v129 + 2 * v130) + (_DWORD)v250;
          v132 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v128 + 24 * v250 + 12));
          v133 = (unsigned __int16 *)(v129 + 2 * v130 + 2);
          while (*(_DWORD *)((char *)&unk_1C64631E0 + (v19 & 0xFFFFFFFC)) != *v132)
          {
            v134 = *v133++;
            v131 += v134;
            ++v132;
            if (!v134)
              goto LABEL_222;
          }
          v135 = (unsigned __int16)v131;
        }
        else
        {
LABEL_222:
          v135 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v135);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 24 + (v243 > 0x3FF)];
      v19 += 44;
      goto LABEL_336;
    }
    v95 = v17 - 320;
    if (v17 >= 0x140)
    {
      if (v79 > 0x42CE || (v234 & byte_1C68C63A6[v236]) == 0)
      {
        v136 = a1[1];
        v137 = a1[7];
        v138 = *(unsigned int *)(v136 + 24 * v250 + 4);
        if (*(_WORD *)(v137 + 2 * v138))
        {
          v139 = *(unsigned __int16 *)(v137 + 2 * v138) + (_DWORD)v250;
          v140 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v136 + 24 * v250 + 12));
          v141 = (unsigned __int16 *)(v137 + 2 * v138 + 2);
          while (*(_DWORD *)((char *)&unk_1C64631C4 + (v19 & 0xFFFFFFFC)) != *v140)
          {
            v142 = *v141++;
            v139 += v142;
            ++v140;
            if (!v142)
              goto LABEL_233;
          }
          v143 = (unsigned __int16)v139;
        }
        else
        {
LABEL_233:
          v143 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v143);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 22 + (v243 > 0x3FF)];
      v19 += 40;
      goto LABEL_336;
    }
    v95 = v17 - 288;
    if (v17 >= 0x120)
    {
      if (v79 > 0x505E || (v234 & byte_1C68C424C[v236]) == 0)
      {
        v144 = a1[1];
        v145 = a1[7];
        v146 = *(unsigned int *)(v144 + 24 * v250 + 4);
        if (*(_WORD *)(v145 + 2 * v146))
        {
          v147 = *(unsigned __int16 *)(v145 + 2 * v146) + (_DWORD)v250;
          v148 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v144 + 24 * v250 + 12));
          v149 = (unsigned __int16 *)(v145 + 2 * v146 + 2);
          while (*(_DWORD *)((char *)&unk_1C64631A4 + (v19 & 0xFFFFFFFC)) != *v148)
          {
            v150 = *v149++;
            v147 += v150;
            ++v148;
            if (!v150)
              goto LABEL_244;
          }
          v151 = (unsigned __int16)v147;
        }
        else
        {
LABEL_244:
          v151 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v151);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 20 + (v243 > 0x3FF)];
      v19 += 36;
      goto LABEL_336;
    }
    v95 = v17 - 256;
    if (v17 >= 0x100)
    {
      if (v79 > 0x4F66 || (v234 & byte_1C68BF2B0[v236]) == 0)
      {
        v152 = a1[1];
        v153 = a1[7];
        v154 = *(unsigned int *)(v152 + 24 * v250 + 4);
        if (*(_WORD *)(v153 + 2 * v154))
        {
          v155 = *(unsigned __int16 *)(v153 + 2 * v154) + (_DWORD)v250;
          v156 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v152 + 24 * v250 + 12));
          v157 = (unsigned __int16 *)(v153 + 2 * v154 + 2);
          while (*(_DWORD *)((char *)&unk_1C6463180 + (v19 & 0xFFFFFFFC)) != *v156)
          {
            v158 = *v157++;
            v155 += v158;
            ++v156;
            if (!v158)
              goto LABEL_255;
          }
          v159 = (unsigned __int16)v155;
        }
        else
        {
LABEL_255:
          v159 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v159);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 18 + (v243 > 0x3FF)];
      v19 += 32;
      goto LABEL_336;
    }
    v95 = v17 - 224;
    if (v17 >= 0xE0)
    {
      if (v79 > 0x4E6E || (v234 & byte_1C68B4634[v236]) == 0)
      {
        v160 = a1[1];
        v161 = a1[7];
        v162 = *(unsigned int *)(v160 + 24 * v250 + 4);
        if (*(_WORD *)(v161 + 2 * v162))
        {
          v163 = *(unsigned __int16 *)(v161 + 2 * v162) + (_DWORD)v250;
          v164 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v160 + 24 * v250 + 12));
          v165 = (unsigned __int16 *)(v161 + 2 * v162 + 2);
          while (dword_1C6463130[v19 >> 1] != *v164)
          {
            v166 = *v165++;
            v163 += v166;
            ++v164;
            if (!v166)
              goto LABEL_266;
          }
          v167 = (unsigned __int16)v163;
        }
        else
        {
LABEL_266:
          v167 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v167);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 16 + (v243 > 0x3FF)];
      v19 += 28;
      goto LABEL_336;
    }
    v95 = v17 - 192;
    if (v17 >= 0xC0)
    {
      if (v79 > 0x4D6E || (v234 & byte_1C68A9E94[v236]) == 0)
      {
        v168 = a1[1];
        v169 = a1[7];
        v170 = *(unsigned int *)(v168 + 24 * v250 + 4);
        if (*(_WORD *)(v169 + 2 * v170))
        {
          v171 = *(unsigned __int16 *)(v169 + 2 * v170) + (_DWORD)v250;
          v172 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v168 + 24 * v250 + 12));
          v173 = (unsigned __int16 *)(v169 + 2 * v170 + 2);
          while (dword_1C64630D8[v19 >> 1] != *v172)
          {
            v174 = *v173++;
            v171 += v174;
            ++v172;
            if (!v174)
              goto LABEL_277;
          }
          v175 = (unsigned __int16)v171;
        }
        else
        {
LABEL_277:
          v175 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v175);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 14 + (v243 > 0x3FF)];
      v19 += 24;
      goto LABEL_336;
    }
    v95 = v17 - 160;
    if (v17 >= 0xA0)
    {
      if (v79 > 0x4C76 || (v234 & byte_1C689FBD6[v236]) == 0)
      {
        v176 = a1[1];
        v177 = a1[7];
        v178 = *(unsigned int *)(v176 + 24 * v250 + 4);
        if (*(_WORD *)(v177 + 2 * v178))
        {
          v179 = *(unsigned __int16 *)(v177 + 2 * v178) + (_DWORD)v250;
          v180 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v176 + 24 * v250 + 12));
          v181 = (unsigned __int16 *)(v177 + 2 * v178 + 2);
          while (dword_1C6463078[v19 >> 1] != *v180)
          {
            v182 = *v181++;
            v179 += v182;
            ++v180;
            if (!v182)
              goto LABEL_288;
          }
          v183 = (unsigned __int16)v179;
        }
        else
        {
LABEL_288:
          v183 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v183);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 12 + (v243 > 0x3FF)];
      v19 += 20;
      goto LABEL_336;
    }
    v95 = v17 - 128;
    if (v17 >= 0x80)
    {
      if (v79 > 0x4B7E || (v234 & byte_1C6893D86[v236]) == 0)
      {
        v184 = a1[1];
        v185 = a1[7];
        v186 = *(unsigned int *)(v184 + 24 * v250 + 4);
        if (*(_WORD *)(v185 + 2 * v186))
        {
          v187 = *(unsigned __int16 *)(v185 + 2 * v186) + (_DWORD)v250;
          v188 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v184 + 24 * v250 + 12));
          v189 = (unsigned __int16 *)(v185 + 2 * v186 + 2);
          while (dword_1C6463010[v19 >> 1] != *v188)
          {
            v190 = *v189++;
            v187 += v190;
            ++v188;
            if (!v190)
              goto LABEL_299;
          }
          v191 = (unsigned __int16)v187;
        }
        else
        {
LABEL_299:
          v191 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v191);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 10 + (v243 > 0x3FF)];
      v19 += 16;
      goto LABEL_336;
    }
    v95 = v17 - 96;
    if (v17 >= 0x60)
    {
      if (v79 > 0x4A7E || (v234 & byte_1C6888426[v236]) == 0)
      {
        v192 = a1[1];
        v193 = a1[7];
        v194 = *(unsigned int *)(v192 + 24 * v250 + 4);
        if (*(_WORD *)(v193 + 2 * v194))
        {
          v195 = *(unsigned __int16 *)(v193 + 2 * v194) + (_DWORD)v250;
          v196 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v192 + 24 * v250 + 12));
          v197 = (unsigned __int16 *)(v193 + 2 * v194 + 2);
          while (dword_1C6462FA0[v19 >> 1] != *v196)
          {
            v198 = *v197++;
            v195 += v198;
            ++v196;
            if (!v198)
              goto LABEL_310;
          }
          v199 = (unsigned __int16)v195;
        }
        else
        {
LABEL_310:
          v199 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v199);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 8 + (v243 > 0x3FF)];
      v19 += 12;
      goto LABEL_336;
    }
    v95 = v17 - 64;
    if (v17 >= 0x40)
    {
      if (v79 > 0x497E || (v234 & byte_1C687CFBA[v236]) == 0)
      {
        v200 = a1[1];
        v201 = a1[7];
        v202 = *(unsigned int *)(v200 + 24 * v250 + 4);
        if (*(_WORD *)(v201 + 2 * v202))
        {
          v203 = *(unsigned __int16 *)(v201 + 2 * v202) + (_DWORD)v250;
          v204 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v200 + 24 * v250 + 12));
          v205 = (unsigned __int16 *)(v201 + 2 * v202 + 2);
          while (dword_1C6462F28[v19 >> 1] != *v204)
          {
            v206 = *v205++;
            v203 += v206;
            ++v204;
            if (!v206)
              goto LABEL_321;
          }
          v207 = (unsigned __int16)v203;
        }
        else
        {
LABEL_321:
          v207 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v207);
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 6 + (v243 > 0x3FF)];
      v19 += 8;
      goto LABEL_336;
    }
    v208 = v17 - 32;
    if (v17 < 0x20)
    {
      if (v17 < 0x10)
      {
        v77 = v17 >= 8;
        v17 -= 8;
        if (!v77 || v19)
          goto LABEL_373;
        *((_QWORD *)v92 + 2) = v251[1] + 48 * *(unsigned int *)&v230[4 * (v243 > 0x3FF)];
        v19 = 1;
      }
      else
      {
        if (v231 && ((v250 - 1) > 0x806 || (v234 & byte_1C68704E6[v236]) == 0))
        {
          v217 = a1[1];
          v218 = a1[7];
          v219 = *(unsigned int *)(v217 + 24 * v250 + 4);
          if (*(_WORD *)(v218 + 2 * v219))
          {
            v220 = *(unsigned __int16 *)(v218 + 2 * v219) + (_DWORD)v250;
            v221 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v217 + 24 * v250 + 12));
            v222 = (unsigned __int16 *)(v218 + 2 * v219 + 2);
            while ((v19 >> 1) + 1 != *v221)
            {
              v223 = *v222++;
              v220 += v223;
              ++v221;
              if (!v223)
                goto LABEL_347;
            }
            v224 = (unsigned __int16)v220;
          }
          else
          {
LABEL_347:
            v224 = 0;
          }
          llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v224);
        }
        *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 2 + (v243 > 0x3FF)];
        v19 += 2;
        v17 -= 16;
      }
    }
    else
    {
      if (v79 > 0x406 || (v234 & byte_1C6872272[v236]) == 0)
      {
        v209 = a1[1];
        v210 = a1[7];
        v211 = *(unsigned int *)(v209 + 24 * v250 + 4);
        if (*(_WORD *)(v210 + 2 * v211))
        {
          v212 = v19;
          v213 = *(unsigned __int16 *)(v210 + 2 * v211) + (_DWORD)v250;
          v214 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v209 + 24 * v250 + 12));
          v215 = (unsigned __int16 *)(v210 + 2 * v211 + 2);
          while (dword_1C6462EA8[v19 >> 1] != *v214)
          {
            v216 = *v215++;
            v213 += v216;
            ++v214;
            if (!v216)
              goto LABEL_360;
          }
          v225 = (unsigned __int16)v213;
        }
        else
        {
          v212 = v19;
LABEL_360:
          v225 = 0;
        }
        llvm::MachineOperand::setReg(*((_QWORD *)v92 + 4), v225);
        v94 = v19 + v246;
        v19 = v212;
      }
      *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 4 + (v94 > 0x3FF)];
      v19 += 4;
      v17 = v208;
    }
    v79 = v250 - 1;
LABEL_337:
    v21 = 0;
    if (!v17)
      goto LABEL_364;
  }
  if (v79 > 0x487E || (v234 & byte_1C68D11F8[v236]) == 0)
LABEL_373:
    llvm::report_fatal_error((llvm *)"Unable to materialize spill/reload!", (const char *)1);
  *((_QWORD *)v92 + 2) = v251[1] + 48 * dword_1C6458858[36 * v78 + 34 + (v243 > 0x3FF)];
LABEL_364:
  if ((*(_BYTE *)v249 & 4) != 0)
  {
    v226 = v249;
  }
  else
  {
    v226 = v249;
    if ((*(_WORD *)(v249 + 44) & 8) != 0)
    {
      v226 = v249;
      do
        v226 = *(_QWORD *)(v226 + 8);
      while ((*(_WORD *)(v226 + 44) & 8) != 0);
    }
  }
  return (unsigned int *)sub_1C487FE80(*(_QWORD *)(v249 + 24) + 40, v249, *(_QWORD *)(v226 + 8));
}

uint64_t sub_1C4836F2C(uint64_t a1, unsigned int a2, unsigned __int16 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t i;
  unsigned __int16 *v27;
  int v28;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned __int16 *v36;
  int v37;
  BOOL v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  _DWORD *v43;
  unsigned __int32 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  int **v53;
  int *v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  _BOOL4 v66;
  unsigned int v67;
  unsigned __int32 v68;
  unsigned __int16 *v69;
  int v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _WORD *v80;
  unsigned __int16 *v81;
  __int16 v82;
  unsigned __int16 v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  __int16 v90;
  uint64_t v91;
  unsigned __int16 v92;
  unsigned __int16 *v93;
  int v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 *v98;
  unsigned __int16 *v99;
  int v100;
  int v101;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  int v104;
  int v105;
  int v106;
  unsigned __int16 *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v116;
  __int16 v117;
  __int16 v118;
  unint64_t j;
  __int16 v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  uint64_t v126;
  _QWORD *v127;
  unsigned int v128;
  uint64_t v129;
  int **v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  _DWORD *v139;
  int v140;
  unsigned int v141;
  char v142;
  char v143;
  unint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  unint64_t v149;
  int v150;
  __int16 v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int16 v156;
  unsigned __int16 *v157;
  unsigned __int16 *v158;
  int v159;
  __int16 v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int16 v165;
  _WORD *v166;
  unsigned __int16 *v167;
  unsigned __int16 *v168;
  _WORD *v169;
  unsigned __int16 v170;
  int v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  int v175;
  _BOOL4 v177;
  _BOOL4 v179;
  int v180;
  _BOOL4 v182;
  _BOOL4 v183;
  BOOL v184;
  _BOOL4 v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int16 v196;
  unsigned __int16 *v197;
  unsigned __int16 *v198;
  int v199;
  int *v200;
  int v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v205;
  int v206;
  __int16 v207;
  int v208;
  __int16 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  _WORD *v214;
  unsigned __int16 *v215;
  unsigned __int16 *v216;
  _WORD *v217;
  unsigned __int16 v218;
  int v219;
  unsigned int v220;
  int v221;
  int v222;
  _BOOL4 v224;
  _BOOL4 v226;
  int v227;
  _BOOL4 v229;
  _BOOL4 v230;
  BOOL v231;
  _BOOL4 v232;
  char v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  _QWORD *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint32x4_t v245;
  uint32x4_t v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  void *v252;
  uint64_t v253;
  _QWORD v254[10];

  v12 = a4;
  v13 = a3;
  v254[8] = *MEMORY[0x1E0C80C00];
  v15 = a2;
  llvm::TargetRegisterInfo::getRegAllocationHints(a1, a2, a3, a4, a5, a6, (uint64_t)a7);
  if (!a7 || !a8)
    return 0;
  v16 = a7[31];
  v242 = a7[33];
  v17 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a6 + 8) + 16))(*(_QWORD *)(a6 + 8), *(_QWORD *)a6);
  v247 = 1;
  *(_QWORD *)&v18 = -1;
  *((_QWORD *)&v18 + 1) = -1;
  v248 = v18;
  v249 = v18;
  v250 = v18;
  v251 = v18;
  v19 = v254;
  v252 = v254;
  v253 = 0x1000000000;
  v20 = a7[31];
  v237 = v16;
  v239 = (_QWORD *)a7[33];
  v243 = a8;
  if (!*(_BYTE *)(v17 + 281))
  {
    v21 = a1;
    v23 = v242;
LABEL_11:
    v25 = (_QWORD *)a7[33];
    goto LABEL_71;
  }
  v21 = a1;
  if ((a2 & 0x80000000) != 0)
    v22 = (uint64_t *)(*(_QWORD *)(v20 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v22 = (uint64_t *)(*(_QWORD *)(v20 + 272) + 8 * v15);
  v23 = v242;
  v24 = *v22;
  if (!*v22)
    goto LABEL_11;
  while ((*(_DWORD *)v24 & 0x80000000) != 0)
  {
    v24 = *(_QWORD *)(v24 + 24);
    if (!v24)
      goto LABEL_11;
  }
  v234 = v12;
LABEL_13:
  for (i = *(_QWORD *)(v24 + 8); (*(_WORD *)(i + 44) & 4) != 0; i = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8)
    ;
  v27 = *(unsigned __int16 **)(i + 16);
  v28 = *v27;
  if (((v28 - 9) > 0x3C || ((1 << (v28 - 9)) & 0x1000000000000605) == 0) && v28 != 0)
  {
    v31 = *((_QWORD *)v27 + 2);
    if (!(*((_QWORD *)v27 + 1) & 0x10 | v31 & 0x21))
    {
      v235 = v19;
      v236 = *(_QWORD *)(i + 24);
      v32 = sub_1C48387B0(i);
      v23 = v242;
      v21 = a1;
      v33 = v32;
      if ((v32 & 1) != 0 || (v31 & 0x200) == 0)
      {
        v34 = 0;
        v35 = v236 + 48;
        while (1)
        {
          if (v33)
          {
            if ((*(_BYTE *)i & 4) == 0)
            {
              while ((*(_WORD *)(i + 44) & 8) != 0)
                i = *(_QWORD *)(i + 8);
            }
            i = *(_QWORD *)(i + 8);
            if (i == v35)
              goto LABEL_26;
          }
          else
          {
            if (i == *(_QWORD *)(v236 + 56))
              goto LABEL_26;
            i = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8;
            if (!i || (*(_BYTE *)i & 4) == 0)
            {
              while ((*(_WORD *)(i + 44) & 4) != 0)
                i = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8;
            }
          }
          v36 = *(unsigned __int16 **)(i + 16);
          v37 = *v36;
          v39 = (v37 - 9) <= 0x3C && ((1 << (v37 - 9)) & 0x1000000000000605) != 0
             || v37 == 0;
          if (v39 || (v36[4] & 0x10) != 0 || (v36[8] & 1) != 0)
            goto LABEL_26;
          if (*(_DWORD *)(i + 40))
          {
            if ((**(_DWORD **)(i + 32) & 0x10000FF) == 0x1000000)
            {
              v40 = v35;
              v41 = sub_1C48387B0(i);
              v35 = v40;
              v19 = v235;
              v23 = v242;
              v21 = a1;
              v42 = *(_QWORD *)(*(_QWORD *)(i + 16) + 16);
              if ((v42 & 0x20) == 0 && v33 != v41 && ((v42 >> 9) & 1 & ~v41) == 0)
              {
                v43 = *(_DWORD **)(i + 32);
                v44 = v43[1];
                if ((v44 & 0x80000000) == 0)
                  goto LABEL_58;
                v44 = *(_DWORD *)(a7[35] + 4 * (v44 & 0x7FFFFFFF));
                if (v44)
                {
                  v45 = (*v43 >> 8) & 0xFFF;
                  if (!v45)
                    goto LABEL_58;
                  v46 = v239[1];
                  v47 = v239[7];
                  v48 = *(unsigned int *)(v46 + 24 * v44 + 4);
                  if (*(_WORD *)(v47 + 2 * v48))
                    break;
                }
              }
            }
          }
LABEL_66:
          if (++v34 == 16)
            goto LABEL_26;
        }
        v49 = *(_WORD *)(v47 + 2 * v48) + v44;
        v50 = (unsigned __int16 *)(v239[11] + 2 * *(unsigned int *)(v46 + 24 * v44 + 12));
        v51 = (unsigned __int16 *)(v47 + 2 * v48 + 2);
        while (v45 != *v50)
        {
          v52 = *v51++;
          v49 += v52;
          ++v50;
          if (!v52)
            goto LABEL_66;
        }
        v44 = v49;
LABEL_58:
        if (v44 - 1 <= 0x3FFFFFFE)
        {
          v245.i32[0] = v44;
          sub_1C4838834((uint64_t)&v247, &v245);
          v35 = v40;
          v19 = v235;
          v23 = v242;
          v21 = a1;
        }
        goto LABEL_66;
      }
    }
  }
LABEL_26:
  v12 = v234;
  while (1)
  {
    v24 = *(_QWORD *)(v24 + 24);
    if (!v24)
      break;
    if ((*(_DWORD *)v24 & 0x80000000) == 0)
      goto LABEL_13;
  }
  v20 = a7[31];
  v25 = (_QWORD *)a7[33];
LABEL_71:
  v245 = 0u;
  v246 = 0u;
  if ((a2 & 0x80000000) != 0)
    v53 = (int **)(*(_QWORD *)(v20 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v53 = (int **)(*(_QWORD *)(v20 + 272) + 8 * v15);
  v54 = *v53;
  if (*v53)
  {
    while (1)
    {
      v55 = *v54;
      if ((*v54 & 0x80000000) == 0)
        break;
      v54 = (int *)*((_QWORD *)v54 + 3);
      if (!v54)
        goto LABEL_77;
    }
    v241 = v20;
LABEL_154:
    v116 = (v55 >> 8) & 0xFFF;
    if (v116)
    {
      if (v116 - 33 > 0xF)
      {
        if (v116 > 0x10)
        {
          v118 = (*(uint64_t (**)(_QWORD *))(*v25 + 208))(v25);
          v23 = v242;
          v21 = a1;
          v117 = v118 - 1;
        }
        else
        {
          v117 = v116 - 1;
        }
      }
      else
      {
        v117 = 2 * v116 - 66;
      }
    }
    else
    {
      v117 = 0;
    }
    for (j = *((_QWORD *)v54 + 1); ; j = *(_QWORD *)j & 0xFFFFFFFFFFFFFFF8)
    {
      v120 = *(_WORD *)(j + 44);
      if ((v120 & 4) == 0)
        break;
    }
    if ((*(_BYTE *)(*(_QWORD *)(j + 16) + 16) & 1) == 0)
      goto LABEL_165;
    if ((*((_BYTE *)v54 + 3) & 1) == 0)
    {
      v121 = *(_QWORD *)(*(_QWORD *)(j + 24) + 56);
      if (v121 == j)
        goto LABEL_205;
      v122 = *(_QWORD *)j & 0xFFFFFFFFFFFFFFF8;
      if (!v122 || (*(_BYTE *)v122 & 4) == 0)
      {
        while ((*(_WORD *)(v122 + 44) & 4) != 0)
          v122 = *(_QWORD *)v122 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v122 == v121 || (*(_BYTE *)(*(_QWORD *)(v122 + 16) + 16) & 1) == 0)
        goto LABEL_205;
      v123 = *(_QWORD *)v122 & 0xFFFFFFFFFFFFFFF8;
      if (!v123 || (*(_BYTE *)v123 & 4) == 0)
      {
        while ((*(_WORD *)(v123 + 44) & 4) != 0)
          v123 = *(_QWORD *)v123 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((*(_BYTE *)(*(_QWORD *)(v123 + 16) + 16) & 1) == 0)
        goto LABEL_205;
      v124 = *(unsigned int **)(v123 + 32);
      v125 = *v124;
      if ((*v124 & 0x10000FF) != 0x1000000)
        goto LABEL_205;
      v126 = v124[1];
      if ((_DWORD)v126 == a2)
        goto LABEL_205;
      v127 = (_QWORD *)a7[33];
      v128 = v126;
      if ((v126 & 0x80000000) != 0)
      {
        v128 = *(_DWORD *)(a7[35] + 4 * (v126 & 0x7FFFFFFF));
        if (!v128)
          goto LABEL_205;
        v192 = (v125 >> 8) & 0xFFF;
        if (v192)
        {
          v193 = v127[1];
          v194 = v127[7];
          v195 = *(unsigned int *)(v193 + 24 * v128 + 4);
          if (!*(_WORD *)(v194 + 2 * v195))
            goto LABEL_205;
          v196 = *(_WORD *)(v194 + 2 * v195) + v128;
          v197 = (unsigned __int16 *)(v127[11] + 2 * *(unsigned int *)(v193 + 24 * v128 + 12));
          v198 = (unsigned __int16 *)(v194 + 2 * v195 + 2);
          while (v192 != *v197)
          {
            v199 = *v198++;
            v196 += v199;
            ++v197;
            if (!v199)
              goto LABEL_205;
          }
          v128 = v196;
        }
      }
      if (v128 - 0x40000000 < 0xC0000001
        || v128 - 259 < 0x200
        || ((v129 = a7[31], (v126 & 0x80000000) != 0)
          ? (v130 = (int **)(*(_QWORD *)(v129 + 24) + 16 * (v126 & 0x7FFFFFFF) + 8))
          : (v130 = (int **)(*(_QWORD *)(v129 + 272) + 8 * v126)),
            (v200 = *v130) == 0))
      {
LABEL_205:
        v134 = j;
        if ((*(_WORD *)(j + 44) & 4) != 0)
        {
          v134 = j;
          do
            v134 = *(_QWORD *)v134 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v134 + 44) & 4) != 0);
        }
        v135 = *(_QWORD *)(j + 24);
        v136 = v135 + 48;
        v137 = *(_DWORD **)(v134 + 32);
        v138 = *(unsigned int *)(v134 + 40);
        v139 = &v137[8 * v138];
        if (!(_DWORD)v138)
        {
          v189 = *(_QWORD *)(v134 + 8);
          if (v189 == v136)
          {
            v134 = v135 + 48;
            goto LABEL_207;
          }
          v134 = v135 + 48;
          if ((*(_WORD *)(v189 + 44) & 4) == 0)
            goto LABEL_207;
          while (1)
          {
            v190 = v189;
            v191 = *(unsigned int *)(v189 + 40);
            if ((_DWORD)v191)
              break;
            v189 = *(_QWORD *)(v189 + 8);
            if (v189 == v136 || (*(_WORD *)(v189 + 44) & 4) == 0)
            {
              v134 = v135 + 48;
LABEL_399:
              v137 = *(_DWORD **)(v190 + 32);
              v139 = &v137[8 * v191];
              v21 = a1;
              v23 = v242;
              goto LABEL_207;
            }
          }
          v134 = v189;
          goto LABEL_399;
        }
        while (1)
        {
LABEL_207:
          if (v137 == v139)
            goto LABEL_165;
          if ((*v137 & 0x10000FF) == 0)
          {
            v140 = v137[1];
            if (v140 != a2)
            {
              v141 = v137[1];
              if (v140 < 0)
              {
                v141 = *(_DWORD *)(a7[35] + 4 * (v140 & 0x7FFFFFFF));
                if (!v141)
                  goto LABEL_293;
                v152 = (*v137 >> 8) & 0xFFF;
                if (v152)
                {
                  v153 = v25[1];
                  v154 = v25[7];
                  v155 = *(unsigned int *)(v153 + 24 * v141 + 4);
                  if (!*(_WORD *)(v154 + 2 * v155))
                    goto LABEL_293;
                  v156 = *(_WORD *)(v154 + 2 * v155) + v141;
                  v157 = (unsigned __int16 *)(v25[11] + 2 * *(unsigned int *)(v153 + 24 * v141 + 12));
                  v158 = (unsigned __int16 *)(v154 + 2 * v155 + 2);
                  while (v152 != *v157)
                  {
                    v159 = *v158++;
                    v156 += v159;
                    ++v157;
                    if (!v159)
                      goto LABEL_293;
                  }
                  v141 = v156;
                }
              }
              if (v141 - 1 > 0x3FFFFFFE)
                goto LABEL_293;
              v142 = 0;
              v143 = 0;
              v144 = j;
              do
              {
                if (v144 == *(_QWORD *)(v135 + 56))
                  break;
                v145 = v143;
                v144 = *(_QWORD *)v144 & 0xFFFFFFFFFFFFFFF8;
                if (!v144 || (*(_BYTE *)v144 & 4) == 0)
                {
                  while ((*(_WORD *)(v144 + 44) & 4) != 0)
                    v144 = *(_QWORD *)v144 & 0xFFFFFFFFFFFFFFF8;
                }
                v146 = *(_QWORD *)(v144 + 16);
                if ((*(_BYTE *)(v146 + 16) & 1) == 0)
                  break;
                v147 = *(unsigned __int8 *)(v146 + 4);
                if (v147)
                {
                  v148 = (_DWORD *)(*(_QWORD *)(v144 + 32) + 4);
                  while ((*(v148 - 1) & 0x30000FF) != 0x1000000 || *v148 != v140)
                  {
                    v148 += 8;
                    if (!--v147)
                      goto LABEL_227;
                  }
                  v142 = 1;
                }
LABEL_227:
                v143 = 1;
              }
              while ((v145 & 1) == 0);
              if (v141 - 259 < 0x200 || (v142 & 1) != 0)
                goto LABEL_293;
              v149 = (unint64_t)v141 >> 3;
              if (v141 <= 0x807)
              {
                v150 = 1 << (v141 & 7);
                if ((v150 & byte_1C68704E6[v149]) != 0)
                {
                  v151 = *(_WORD *)(v25[14] + 2 * v141);
                  goto LABEL_291;
                }
                if (v141 <= 0x407 && (v150 & byte_1C6872272[v149]) != 0)
                {
                  v160 = *(_WORD *)(v25[14] + 2 * v141) - v117;
                  if ((*v54 & 0xFFF00) != 0x200)
                  {
                    ++v245.i32[v160 & 7];
                    if ((*v54 & 0xFFF00) == 0x100)
                      goto LABEL_293;
                  }
                  v161 = v160 + 1;
                  goto LABEL_292;
                }
LABEL_248:
                if ((v150 & byte_1C687CFBA[v149]) == 0)
                  goto LABEL_293;
                v162 = v25[1];
                v163 = v25[7];
                v164 = *(unsigned int *)(v162 + 24 * v141 + 4);
                if (*(_WORD *)(v163 + 2 * v164))
                {
                  v165 = *(_WORD *)(v163 + 2 * v164) + v141;
                  v166 = (_WORD *)(v25[11] + 2 * *(unsigned int *)(v162 + 24 * v141 + 12));
                  v167 = (unsigned __int16 *)(v163 + 2 * v164 + 2);
                  v168 = v167;
                  v169 = v166;
                  v170 = v165;
                  while (*v169 != 34)
                  {
                    v171 = *v168++;
                    v170 += v171;
                    ++v169;
                    if (!v171)
                    {
                      v172 = 0;
                      goto LABEL_255;
                    }
                  }
                  v172 = v170;
LABEL_255:
                  while (*v166 != 33)
                  {
                    v173 = *v167++;
                    v165 += v173;
                    ++v166;
                    if (!v173)
                      goto LABEL_303;
                  }
                  v174 = v165;
                }
                else
                {
                  v172 = 0;
LABEL_303:
                  v174 = 0;
                }
                v175 = (*v54 >> 8) & 0xFFF;
                v177 = v175 == 1 || v175 == 33;
                if ((((((*v54 >> 8) & 0xFFF) != 0) ^ v177) & 1) == 0)
                  ++v245.i32[(*(_WORD *)(v25[14] + 2 * v174) - (_BYTE)v117 + 1) & 7];
                v179 = v175 == 2 || v175 == 33;
                if ((((v175 != 0) ^ v179) & 1) == 0)
                {
                  v180 = (*(_WORD *)(v25[14] + 2 * v174) - (_BYTE)v117) & 7;
                  ++v245.i32[v180];
                }
                v182 = v175 == 3 || v175 == 34;
                if ((((v175 != 0) ^ v182) & 1) == 0)
                  ++v245.i32[(*(_WORD *)(v25[14] + 2 * v172) - (_BYTE)v117 + 1) & 7];
                v183 = v175 != 0;
                v184 = v175 == 4 || v175 == 34;
                v185 = v184;
                if (((v183 ^ v185) & 1) != 0)
                  goto LABEL_293;
                v151 = *(_WORD *)(v25[14] + 2 * v172);
LABEL_291:
                v161 = v151 - v117;
LABEL_292:
                ++v245.i32[v161 & 7];
                goto LABEL_293;
              }
              if (v141 >> 7 <= 0x92)
              {
                v149 = v149;
                v150 = 1 << (v141 & 7);
                goto LABEL_248;
              }
            }
          }
LABEL_293:
          v137 += 8;
          if (v137 == v139)
          {
            v186 = *(_QWORD *)(v134 + 8);
            if (v186 == v136)
              goto LABEL_165;
            v137 = v139;
            v134 = v135 + 48;
            if ((*(_WORD *)(v186 + 44) & 4) != 0)
            {
              while (1)
              {
                v187 = v186;
                v188 = *(unsigned int *)(v186 + 40);
                if ((_DWORD)v188)
                  break;
                v186 = *(_QWORD *)(v186 + 8);
                if (v186 == v136 || (*(_WORD *)(v186 + 44) & 4) == 0)
                {
                  v134 = v135 + 48;
                  goto LABEL_301;
                }
              }
              v134 = v186;
LABEL_301:
              v137 = *(_DWORD **)(v187 + 32);
              v139 = &v137[8 * v188];
            }
          }
        }
      }
      while (1)
      {
        v201 = *v200;
        if ((*v200 & 0x80000000) == 0)
          break;
        v200 = (int *)*((_QWORD *)v200 + 3);
        if (!v200)
          goto LABEL_205;
      }
LABEL_327:
      v202 = *((_QWORD *)v200 + 1);
      if ((*(_WORD *)(v202 + 44) & 4) != 0)
      {
        v203 = *((_QWORD *)v200 + 1);
        do
          v203 = *(_QWORD *)v203 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v203 + 44) & 4) != 0);
      }
      else
      {
        v203 = *((_QWORD *)v200 + 1);
      }
      if ((*(_BYTE *)(*(_QWORD *)(v203 + 16) + 16) & 1) == 0)
      {
LABEL_325:
        while (1)
        {
          v200 = (int *)*((_QWORD *)v200 + 3);
          if (!v200)
            goto LABEL_205;
          v201 = *v200;
          if ((*v200 & 0x80000000) == 0)
            goto LABEL_327;
        }
      }
      if ((v201 & 0x1000000) != 0)
      {
        if (v123 == v203)
          goto LABEL_325;
      }
      else if (v202 == v122 || v202 == j)
      {
        goto LABEL_325;
      }
      v205 = (unint64_t)v128 >> 3;
      if (v128 > 0x807)
      {
        if (v128 >> 7 > 0x92)
        {
LABEL_391:
          v21 = a1;
          v23 = v242;
          goto LABEL_205;
        }
        v205 = v205;
        v206 = 1 << (v128 & 7);
      }
      else
      {
        v206 = 1 << (v128 & 7);
        if ((v206 & byte_1C68704E6[v205]) != 0)
        {
          v207 = *(_WORD *)(v127[14] + 2 * v128);
LABEL_389:
          v233 = v207 - v117;
LABEL_390:
          ++v245.i32[v233 & 7];
          goto LABEL_391;
        }
        if (v128 <= 0x407 && (v206 & byte_1C6872272[v205]) != 0)
        {
          v208 = v125 & 0xFFF00;
          if (v208 == 512)
          {
            v209 = *(_WORD *)(v127[14] + 2 * v128) - v117;
          }
          else
          {
            v209 = *(_WORD *)(v127[14] + 2 * v128) - v117;
            ++v245.i32[v209 & 7];
            if (v208 == 256)
              goto LABEL_391;
          }
          v233 = v209 + 1;
          goto LABEL_390;
        }
      }
      if ((v206 & byte_1C687CFBA[v205]) == 0)
        goto LABEL_391;
      v210 = v127[1];
      v211 = v127[7];
      v212 = *(unsigned int *)(v210 + 24 * v128 + 4);
      v213 = *(unsigned __int16 *)(v211 + 2 * v212);
      if (*(_WORD *)(v211 + 2 * v212))
      {
        LOWORD(v213) = v213 + v128;
        v214 = (_WORD *)(v127[11] + 2 * *(unsigned int *)(v210 + 24 * v128 + 12));
        v215 = (unsigned __int16 *)(v211 + 2 * v212 + 2);
        v216 = v215;
        v217 = v214;
        v218 = v213;
        while (*v217 != 34)
        {
          v219 = *v216++;
          v218 += v219;
          ++v217;
          if (!v219)
          {
            v220 = 0;
            goto LABEL_353;
          }
        }
        v220 = v218;
LABEL_353:
        while (*v214 != 33)
        {
          v221 = *v215++;
          LOWORD(v213) = v221 + v213;
          ++v214;
          if (!v221)
          {
            v213 = 0;
            goto LABEL_357;
          }
        }
        v213 = (unsigned __int16)v213;
      }
      else
      {
        v220 = 0;
      }
LABEL_357:
      v222 = (v125 >> 8) & 0xFFF;
      v224 = v222 == 1 || v222 == 33;
      if ((((v222 != 0) ^ v224) & 1) == 0)
        ++v245.i32[(*(_WORD *)(v127[14] + 2 * v213) - (_BYTE)v117 + 1) & 7];
      v226 = v222 == 2 || v222 == 33;
      if ((((v222 != 0) ^ v226) & 1) == 0)
      {
        v227 = (*(_WORD *)(v127[14] + 2 * v213) - (_BYTE)v117) & 7;
        ++v245.i32[v227];
      }
      v229 = v222 == 3 || v222 == 34;
      if ((((v222 != 0) ^ v229) & 1) == 0)
        ++v245.i32[(*(_WORD *)(v127[14] + 2 * v220) - (_BYTE)v117 + 1) & 7];
      v230 = v222 != 0;
      v231 = v222 == 4 || v222 == 34;
      v232 = v231;
      if (((v230 ^ v232) & 1) != 0)
        goto LABEL_391;
      v207 = *(_WORD *)(v127[14] + 2 * v220);
      goto LABEL_389;
    }
    v131 = j;
    if (j)
    {
      if ((v120 & 8) == 0)
        goto LABEL_198;
      v131 = j;
      if ((*(_QWORD *)j & 4) != 0)
        goto LABEL_198;
    }
    else if ((v120 & 8) == 0)
    {
LABEL_198:
      v132 = *(_QWORD *)(j + 24) + 48;
      v133 = *(_QWORD *)(v131 + 8);
      if (v133 == v132 || (*(_BYTE *)(*(_QWORD *)(v133 + 16) + 16) & 1) == 0)
        goto LABEL_165;
      if ((*(_BYTE *)v133 & 4) == 0)
      {
        while ((*(_WORD *)(v133 + 44) & 8) != 0)
          v133 = *(_QWORD *)(v133 + 8);
      }
      j = *(_QWORD *)(v133 + 8);
      if (j == v132 || (*(_BYTE *)(*(_QWORD *)(j + 16) + 16) & 1) == 0)
      {
LABEL_165:
        v20 = v241;
        while (1)
        {
          v54 = (int *)*((_QWORD *)v54 + 3);
          if (!v54)
            goto LABEL_77;
          v55 = *v54;
          if ((*v54 & 0x80000000) == 0)
            goto LABEL_154;
        }
      }
      goto LABEL_205;
    }
    v131 = j;
    do
      v131 = *(_QWORD *)(v131 + 8);
    while ((*(_WORD *)(v131 + 44) & 8) != 0);
    goto LABEL_198;
  }
LABEL_77:
  v56 = 16 * (a2 & 0x7FFFFFFF);
  v57 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 24) + v56) & 0xFFFFFFFFFFFFFFF8) + 24);
  v58 = v57 >> 5;
  v59 = dword_1C642E020[v57 >> 5];
  v60 = 1 << v57;
  if ((v60 & v59) != 0
    || (dword_1C6431170[v58] & v60) != 0
    || (dword_1C6433A08[v58] & v60) != 0
    || (dword_1C6435F40[v58] & v60) != 0
    || (dword_1C6438118[v58] & v60) != 0
    || (dword_1C6439F90[v58] & v60) != 0
    || (dword_1C643BAA8[v58] & v60) != 0
    || (dword_1C643D260[v58] & v60) != 0
    || (dword_1C643DB18[v58] & v60) != 0
    || (dword_1C643DDA0[v58] & v60) != 0
    || (dword_1C643DFE0[v58] & v60) != 0
    || (dword_1C643E1D8[v58] & v60) != 0
    || (dword_1C643E388[v58] & v60) != 0
    || (dword_1C643E4F0[v58] & v60) != 0
    || (dword_1C643E610[v58] & v60) != 0)
  {
    v245.i32[0] += v245.i32[1];
    v245.i32[1] = v245.i32[0];
    v245.i32[2] += v245.i32[3];
    v245.i32[3] = v245.i32[2];
    v246.i32[0] += v246.i32[1];
    v246.i32[1] = v246.i32[0];
    v246.i32[2] += v246.i32[3];
    v246.i32[3] = v246.i32[2];
  }
  v61 = vminvq_u32(vminq_u32(v245, v246));
  v62 = vmaxvq_u32(vmaxq_u32(v246, v245));
  v63 = v62 - v61;
  v66 = (v61 < 2 || v63 > v61 >> 1) && v62 != v61;
  v67 = v63 >> 1;
  if (v63 <= 0xF)
    v67 = 0;
  if ((v66 || (_DWORD)v253) && v12)
  {
    v68 = v67 + v61;
    v69 = &v13[v12];
    v70 = (*(_DWORD *)(*(_QWORD *)(v23 + 264)
                     + 24
                     * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v237 + 24) + v56) & 0xFFFFFFFFFFFFFFF8)
                                            + 24)
                      + *(_DWORD *)(v23 + 272) * ((*(_QWORD *)(v23 + 248) - *(_QWORD *)(v23 + 240)) >> 3))
                     + 4) >> 3)
        - 1;
    v71 = a5 + 3;
    v72 = 0xFFFFFFFFLL;
    do
    {
      v73 = *v13;
      if (!v66)
        goto LABEL_130;
      v74 = *(unsigned __int16 *)(*(_QWORD *)(v21 + 112) + 2 * v73);
      if ((v74 - 64) <= 0x1BF)
      {
        v75 = *(_QWORD *)(v243 + 248);
        v76 = (uint64_t *)(v75 + 8);
        if (!v75)
          v76 = 0;
        v77 = *v76;
        v78 = *(unsigned int *)(*v76 + 24 * *v13 + 16);
        v79 = v76[6];
        v80 = (_WORD *)(v79 + ((v78 >> 3) & 0x1FFFFFFE));
        v82 = *v80;
        v81 = v80 + 1;
        v83 = v82 + (v78 & 0xF) * v73;
        v84 = *(_QWORD *)(v243 + 392);
        while (!*(_DWORD *)(v84 + 216 * v83 + 204))
        {
          v85 = *v81++;
          v83 += v85;
          if (!v85)
          {
            v86 = ((v70 + v74) >> 1) & 0x7FFFFFF8;
            if (v86 >= v72)
              v87 = v72;
            else
              v87 = ((v70 + v74) >> 1) & 0x7FFFFFF8;
            if (v63 <= 3 && v86 < v72)
            {
              v88 = 0;
LABEL_121:
              v89 = *(unsigned int *)(v77 + 24 * (v88 + (v86 | 3)) + 16);
              v90 = v89 & 0xF;
              v91 = (v89 >> 3) & 0x1FFFFFFE;
              v92 = *(_WORD *)(v79 + v91) + v90 * (v88 + (((v70 + v74) >> 1) & 0xFFF8 | 3));
              v93 = (unsigned __int16 *)(v79 + 2 + v91);
              while (!*(_DWORD *)(v84 + 216 * v92 + 204))
              {
                v94 = *v93++;
                v92 += v94;
                if (!v94)
                {
                  if (++v88 != 8)
                    goto LABEL_121;
                  v87 = v72;
                  goto LABEL_126;
                }
              }
              goto LABEL_129;
            }
LABEL_126:
            if ((_DWORD)v86 == v87)
              goto LABEL_129;
            goto LABEL_148;
          }
        }
      }
      v86 = v72;
LABEL_129:
      v72 = v86;
      if (v245.i32[v74 & 7] <= v68)
      {
LABEL_130:
        if ((_DWORD)v253)
        {
          v95 = v252;
          v96 = *(_QWORD *)(v23 + 8);
          v97 = *(_QWORD *)(v23 + 56);
          v98 = (unsigned __int16 *)(v97
                                   + (((unint64_t)*(unsigned int *)(v96 + 24 * *v13 + 16) >> 3) & 0x1FFFFFFE));
          v100 = *v98;
          v99 = v98 + 1;
          v101 = v100 + (*(_DWORD *)(v96 + 24 * *v13 + 16) & 0xF) * v73;
          while (1)
          {
            v102 = (unsigned __int16 *)(v97
                                      + (((unint64_t)*(unsigned int *)(v96 + 24 * *v95 + 16) >> 3) & 0x1FFFFFFE));
            v104 = *v102;
            v103 = v102 + 1;
            v105 = v104 + (*(_DWORD *)(v96 + 24 * *v95 + 16) & 0xF) * *v95;
            do
            {
              v106 = v105;
              v107 = v99;
              v108 = v101;
              do
              {
                v109 = v108;
                v111 = *v107++;
                v110 = v111;
                if (!v111)
                  v107 = 0;
                if (!v110)
                  break;
                v108 = v110 + v109;
              }
              while ((unsigned __int16)v106 != (unsigned __int16)v109);
              v113 = *v103++;
              v112 = v113;
              if (!v113)
                v103 = 0;
              if (!v112)
                break;
              v105 = v112 + v106;
            }
            while ((unsigned __int16)v106 != (unsigned __int16)v109);
            if ((unsigned __int16)v106 == (unsigned __int16)v109)
              break;
            if (++v95 == (_DWORD *)((char *)v252 + 4 * v253))
              goto LABEL_144;
          }
        }
        else
        {
LABEL_144:
          v114 = a5[1];
          if ((unint64_t)(v114 + 1) > a5[2])
          {
            v240 = v70;
            v238 = v71;
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v71, v114 + 1, 2);
            v71 = v238;
            v70 = v240;
            v23 = v242;
            v21 = a1;
            v114 = a5[1];
          }
          *(_WORD *)(*a5 + 2 * v114) = v73;
          ++a5[1];
        }
      }
      ++v13;
    }
    while (v13 != v69);
  }
LABEL_148:
  if (v252 != v19)
    free(v252);
  if ((v247 & 1) == 0)
    MEMORY[0x1CAA32FB4](v248, 4);
  return 0;
}

uint64_t sub_1C48382E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  _BOOL4 v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  _BYTE v49[64];

  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 176))(*(_QWORD *)(v8 + 16));
  v11 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
  v12 = v49;
  v45 = v49;
  v46 = v49;
  v47 = 8;
  v48 = 0;
  if ((v11 & 0x80000000) != 0)
    v13 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
  else
    v13 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v11);
  v14 = *v13;
  if (!*v13)
    return 1;
  while ((*(_BYTE *)(v14 + 3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v14 + 24);
    if (!v14)
      return 1;
  }
  v44 = v10;
  v16 = 0;
  v17 = *(_QWORD *)(v14 + 8);
  v18 = v49;
LABEL_9:
  v19 = *(unsigned __int16 **)(v17 + 16);
  v20 = *((_QWORD *)v19 + 2);
  if ((v20 & 1) == 0)
  {
    v21 = sub_1C477C96C(*v19);
    if ((v20 & 0x320) != 0 || v21)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v45, *(_QWORD *)(v17 + 24));
      v12 = v45;
      v18 = v46;
      v16 = HIDWORD(v47);
      v17 = *(_QWORD *)(v14 + 8);
    }
  }
  while (1)
  {
    v14 = *(_QWORD *)(v14 + 24);
    if (!v14)
      break;
    if ((*(_BYTE *)(v14 + 3) & 1) == 0 && *(_QWORD *)(v14 + 8) != v17)
    {
      v17 = *(_QWORD *)(v14 + 8);
      goto LABEL_9;
    }
  }
  if (v16 == v48)
    goto LABEL_36;
  if (*(_QWORD *)(a3 + 24) <= 1uLL)
    v23 = 1;
  else
    v23 = *(_QWORD *)(a3 + 24);
  v24 = *(_QWORD *)(a5 + 24);
  if (v24 <= 1)
    v25 = 1;
  else
    v25 = *(_QWORD *)(a5 + 24);
  v26 = *(unsigned int **)(a2 + 32);
  v27 = ((unint64_t)v26[8] >> 8) & 0xFFF;
  if ((_DWORD)v27)
    v23 = *(_QWORD *)(*(_QWORD *)(v44 + 232) + 8 * v27);
  v28 = ((unint64_t)*v26 >> 8) & 0xFFF;
  if ((_DWORD)v28)
    v25 = *(_QWORD *)(*(_QWORD *)(v44 + 232) + 8 * v28);
  v29 = v26[9];
  v30 = (unsigned int **)((v29 & 0x80000000) != 0
                        ? *(_QWORD *)(v9 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(v9 + 272) + 8 * v29);
  v31 = *v30;
  if (!*v30)
    goto LABEL_36;
  while (1)
  {
    v32 = *v31;
    if ((*v31 & 0x1000000) == 0)
      break;
    v31 = (unsigned int *)*((_QWORD *)v31 + 3);
    if (!v31)
      goto LABEL_36;
  }
  v34 = (v24 << __clz(__rbit64(v23)) >> __clz(__rbit64(v25)));
LABEL_41:
  v35 = *((_QWORD *)v31 + 1);
  v36 = *(unsigned __int16 **)(v35 + 16);
  v37 = *((_QWORD *)v36 + 2);
  if ((v37 & 1) != 0)
    goto LABEL_58;
  v38 = sub_1C477C96C(*v36);
  if ((v37 & 0x320) == 0 && !v38)
    goto LABEL_58;
  v40 = *(_QWORD *)(*(_QWORD *)(v44 + 232) + 8 * ((v32 >> 8) & 0xFFF));
  v41 = sub_1C477672C((uint64_t)&v45, *(_QWORD *)(v35 + 24));
  v12 = v45;
  v18 = v46;
  v42 = (uint64_t *)((char *)&v47 + 4);
  if (v46 != v45)
    v42 = &v47;
  if (v41 == (_QWORD *)&v46[8 * *(unsigned int *)v42] || (v34 & v40) == 0)
  {
LABEL_58:
    while (1)
    {
      v31 = (unsigned int *)*((_QWORD *)v31 + 3);
      if (!v31)
        break;
      v32 = *v31;
      if ((*v31 & 0x1000000) == 0)
        goto LABEL_41;
    }
LABEL_36:
    v15 = 1;
    goto LABEL_37;
  }
  v15 = 0;
LABEL_37:
  if (v18 != v12)
    free(v18);
  return v15;
}

uint64_t sub_1C4838584()
{
  return 0;
}

uint64_t sub_1C4838590()
{
  return 0;
}

uint64_t sub_1C4838598()
{
  return 0;
}

uint64_t sub_1C48385A0()
{
  return 0;
}

uint64_t sub_1C48385A8()
{
  return 0;
}

uint64_t sub_1C48385B0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C48385B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

float sub_1C48385C0()
{
  return 1.0;
}

uint64_t sub_1C48385CC()
{
  return 0;
}

uint64_t sub_1C48385D4()
{
  return 0;
}

uint64_t sub_1C48385DC()
{
  return 0;
}

uint64_t sub_1C48385E4()
{
  return 0;
}

uint64_t sub_1C48385F4(uint64_t result, unsigned int a2, _QWORD *a3, char a4)
{
  unint64_t v4;
  __int16 v5;
  _WORD *v6;
  unsigned __int16 *v7;
  __int16 v8;
  unsigned __int16 v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;

  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = a4;
  *(_WORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_WORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  v4 = *(unsigned int *)(*a3 + 24 * a2 + 16);
  v5 = v4 & 0xF;
  v6 = (_WORD *)(a3[6] + ((v4 >> 3) & 0x1FFFFFFE));
  v8 = *v6;
  v7 = v6 + 1;
  v9 = v8 + v5 * a2;
  *(_WORD *)(result + 24) = v9;
  *(_QWORD *)(result + 32) = v7;
  while (1)
  {
    v10 = (unsigned __int16 *)(a3[5] + 4 * v9);
    v11 = *v10;
    v12 = v10[1];
    *(_DWORD *)(result + 40) = v11 | (v12 << 16);
    if (v11)
      break;
LABEL_12:
    v18 = *v7++;
    *(_QWORD *)(result + 32) = v7;
    v9 += v18;
    *(_WORD *)(result + 24) = v9;
    if (!v18)
    {
      *(_QWORD *)(result + 32) = 0;
      return result;
    }
  }
  while (1)
  {
    v13 = a3[6];
    v14 = *(unsigned int *)(*a3 + 24 * (unsigned __int16)v11 + 8);
    *(_WORD *)(result + 48) = v11;
    *(_QWORD *)(result + 56) = v13 + 2 * v14;
    if (v13)
      break;
LABEL_10:
    *(_WORD *)(result + 40) = v12;
    *(_WORD *)(result + 42) = 0;
    LOWORD(v11) = v12;
    v17 = (unsigned __int16)v12 == 0;
    LOWORD(v12) = 0;
    if (v17)
      goto LABEL_12;
  }
  if ((a4 & 1) == 0)
  {
    v15 = v13 + 2 * v14 + 2;
    while (a2 == (unsigned __int16)v11)
    {
      *(_QWORD *)(result + 56) = v15;
      v16 = *(unsigned __int16 *)(v15 - 2);
      LOWORD(v11) = v16 + v11;
      *(_WORD *)(result + 48) = v11;
      v15 += 2;
      if (!v16)
      {
        *(_QWORD *)(result + 56) = 0;
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t sub_1C48386F0(uint64_t result)
{
  unsigned __int16 *v1;
  int v2;
  uint64_t v3;
  unsigned __int16 *v4;
  int v5;
  unsigned __int16 v6;
  _QWORD *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(unsigned __int16 **)(result + 56);
  v2 = *v1;
  *(_QWORD *)(result + 56) = v1 + 1;
  *(_WORD *)(result + 48) += v2;
  if (!v2)
  {
    *(_QWORD *)(result + 56) = 0;
    v3 = *(unsigned __int16 *)(result + 42);
    *(_DWORD *)(result + 40) = (unsigned __int16)v3;
    if (v3)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(result + 8) + 48)
          + 2 * *(unsigned int *)(**(_QWORD **)(result + 8) + 24 * v3 + 8);
      *(_WORD *)(result + 48) = v3;
      *(_QWORD *)(result + 56) = v11;
    }
    else
    {
      v4 = *(unsigned __int16 **)(result + 32);
      v5 = *v4;
      *(_QWORD *)(result + 32) = v4 + 1;
      v6 = *(_WORD *)(result + 24) + v5;
      *(_WORD *)(result + 24) = v6;
      if (v5)
      {
        v7 = *(_QWORD **)(result + 8);
        v8 = (unsigned __int16 *)(v7[5] + 4 * v6);
        v9 = *v8;
        *(_DWORD *)(result + 40) = v9 | (v8[1] << 16);
        v10 = v7[6] + 2 * *(unsigned int *)(*v7 + 24 * v9 + 8);
        *(_WORD *)(result + 48) = v9;
        *(_QWORD *)(result + 56) = v10;
      }
      else
      {
        *(_QWORD *)(result + 32) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C48387B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 17) & 2) == 0)
    return 0;
  v1 = a1;
  if ((*(_BYTE *)a1 & 4) == 0)
  {
    v1 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      v1 = a1;
      do
        v1 = *(_QWORD *)(v1 + 8);
      while ((*(_WORD *)(v1 + 44) & 8) != 0);
    }
  }
  v2 = *(_QWORD *)(v1 + 8);
  if (v2 != *(_QWORD *)(a1 + 24) + 48 && (*(_BYTE *)(*(_QWORD *)(v2 + 16) + 16) & 0x20) != 0)
    return llvm::MachineInstr::readsWritesVirtualRegister(v2, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4), 0) & 1;
  else
    return 0;
}

uint64_t sub_1C4838834(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  BOOL v16;
  unsigned int v17;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 16;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      goto LABEL_9;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = v5 - 1;
  v7 = (37 * *a2) & v6;
  v8 = (_DWORD *)(v4 + 4 * v7);
  v9 = *v8;
  if (*a2 == *v8)
    return 0;
  v10 = 0;
  v11 = 1;
  while (v9 != -1)
  {
    if (v10)
      v16 = 0;
    else
      v16 = v9 == -2;
    if (v16)
      v10 = v8;
    v17 = v7 + v11++;
    v7 = v17 & v6;
    v8 = (_DWORD *)(v4 + 4 * v7);
    v9 = *v8;
    if (*a2 == *v8)
      return 0;
  }
  if (v10)
    v12 = v10;
  else
    v12 = v8;
LABEL_9:
  *sub_1C4838948(a1, (uint64_t)a2, a2, v12) = *a2;
  v13 = *a2;
  v14 = *(unsigned int *)(a1 + 80);
  if (v14 >= *(_DWORD *)(a1 + 84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v14 + 1, 4);
    LODWORD(v14) = *(_DWORD *)(a1 + 80);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v14) = v13;
  ++*(_DWORD *)(a1 + 80);
  return 1;
}

_DWORD *sub_1C4838948(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 < 3 * v8)
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
    {
      v9 = *(_DWORD *)a1 & 1;
      goto LABEL_6;
    }
    sub_1C4838B1C(a1, v8);
    v18 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v19 = 16;
LABEL_20:
      v9 = *(_DWORD *)a1 & 1;
      v20 = v19 - 1;
      v21 = (37 * *a3) & v20;
      a4 = (_DWORD *)(v18 + 4 * v21);
      v22 = *a4;
      if (*a3 == *a4)
        goto LABEL_6;
      v16 = 0;
      v23 = 1;
      while (v22 != -1)
      {
        if (v16)
          v24 = 0;
        else
          v24 = v22 == -2;
        if (v24)
          v16 = a4;
        v25 = v21 + v23++;
        v21 = v25 & v20;
        a4 = (_DWORD *)(v18 + 4 * v21);
        v22 = *a4;
        if (*a3 == *a4)
          goto LABEL_6;
      }
      goto LABEL_15;
    }
    v19 = *(_DWORD *)(a1 + 16);
    if (v19)
    {
      v18 = *(_QWORD *)(a1 + 8);
      goto LABEL_20;
    }
LABEL_41:
    v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  sub_1C4838B1C(a1, 2 * v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 16;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
      goto LABEL_41;
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = (37 * *a3) & v13;
  a4 = (_DWORD *)(v11 + 4 * v14);
  v15 = *a4;
  if (*a3 == *a4)
    goto LABEL_6;
  v16 = 0;
  v17 = 1;
  while (v15 != -1)
  {
    if (v16)
      v26 = 0;
    else
      v26 = v15 == -2;
    if (v26)
      v16 = a4;
    v27 = v14 + v17++;
    v14 = v27 & v13;
    a4 = (_DWORD *)(v11 + 4 * v14);
    v15 = *a4;
    if (*a3 == *a4)
      goto LABEL_6;
  }
LABEL_15:
  if (v16)
    a4 = v16;
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

_QWORD *sub_1C4838B1C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14[16];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4838C80((_QWORD *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 4)
  {
    v10 = *(_DWORD *)(a1 + i);
    if (v10 <= 0xFFFFFFFD)
      *v8++ = v10;
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4838C80((_QWORD *)a1, v14, v8);
}

_QWORD *sub_1C4838C80(_QWORD *result, int *a2, int *a3)
{
  _QWORD *v5;
  int v6;
  char *v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  int v11;
  int v12;
  char *v13;
  int v14;
  unsigned int v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = result;
  v6 = *(_DWORD *)result;
  *result = *(_DWORD *)result & 1;
  v7 = (char *)(result + 1);
  if ((v6 & 1) != 0)
  {
    v10 = 64;
    v9 = result + 1;
  }
  else
  {
    v8 = *((unsigned int *)result + 4);
    if (!(_DWORD)v8)
      goto LABEL_5;
    v9 = (void *)result[1];
    v10 = 4 * v8;
  }
  result = memset(v9, 255, v10);
LABEL_5:
  while (a2 != a3)
  {
    v11 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if ((*(_BYTE *)v5 & 1) != 0)
      {
        v12 = 16;
        v13 = v7;
      }
      else
      {
        v13 = (char *)v5[1];
        v12 = *((_DWORD *)v5 + 4);
      }
      v14 = v12 - 1;
      v15 = (v12 - 1) & (37 * v11);
      v16 = &v13[4 * v15];
      v17 = *(_DWORD *)v16;
      if (v11 != *(_DWORD *)v16)
      {
        v18 = 0;
        v19 = 1;
        while (v17 != -1)
        {
          if (v18)
            v20 = 0;
          else
            v20 = v17 == -2;
          if (v20)
            v18 = v16;
          v21 = v15 + v19++;
          v15 = v21 & v14;
          v16 = &v13[4 * (v21 & v14)];
          v17 = *(_DWORD *)v16;
          if (v11 == *(_DWORD *)v16)
            goto LABEL_14;
        }
        if (v18)
          v16 = v18;
      }
LABEL_14:
      *(_DWORD *)v16 = v11;
      *(_DWORD *)v5 += 2;
    }
    ++a2;
  }
  return result;
}

double sub_1C4838D9C(llvm::ScheduleDAGInstrs *a1, uint64_t a2, uint64_t *a3)
{
  char *v4;
  uint64_t v5;
  llvm::ScheduleDAGInstrs *v6;
  double result;

  v4 = (char *)a1 + 2632;
  v5 = *a3;
  *a3 = 0;
  v6 = llvm::ScheduleDAGInstrs::ScheduleDAGInstrs(a1, *(const llvm::TargetSubtargetInfo ***)(a2 + 8), *(const llvm::MachineLoopInfo **)(a2 + 16), 0);
  *(_OWORD *)v4 = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v6 + 331) = v5;
  result = 0.0;
  *((_OWORD *)v6 + 166) = 0u;
  *((_OWORD *)v6 + 167) = 0u;
  *((_OWORD *)v6 + 168) = 0u;
  *((_QWORD *)v6 + 338) = 0;
  *(_QWORD *)v6 = &off_1E8146738;
  *((_QWORD *)v6 + 339) = *(_QWORD *)(a2 + 56);
  *((_QWORD *)v6 + 340) = 0;
  *((_QWORD *)v6 + 341) = (char *)v6 + 2744;
  *((_QWORD *)v6 + 342) = 0x600000000;
  *((_DWORD *)v6 + 698) = 0;
  *((_QWORD *)v6 + 350) = 0;
  *((_QWORD *)v6 + 351) = (char *)v6 + 2824;
  *((_QWORD *)v6 + 352) = 0x800000000;
  *((_QWORD *)v6 + 385) = 0;
  *((_DWORD *)v6 + 772) = 0;
  *((_DWORD *)v6 + 774) = -1;
  *(_QWORD *)((char *)v6 + 3108) = 0;
  *(_QWORD *)((char *)v6 + 3100) = 0;
  *(_QWORD *)((char *)v6 + 3114) = 0;
  *((_QWORD *)v6 + 391) = 0;
  *((_QWORD *)v6 + 393) = 0;
  *((_QWORD *)v6 + 392) = 0;
  *((_QWORD *)v6 + 394) = (char *)v6 + 3168;
  *((_QWORD *)v6 + 395) = 0x800000000;
  *((_QWORD *)v6 + 412) = (char *)v6 + 3312;
  *((_QWORD *)v6 + 413) = 0x800000000;
  *((_OWORD *)v6 + 215) = 0u;
  *((_OWORD *)v6 + 216) = 0u;
  *((_QWORD *)v6 + 434) = 0;
  *((_QWORD *)v6 + 436) = 0;
  *((_QWORD *)v6 + 437) = 0;
  *((_QWORD *)v6 + 438) = (char *)v6 + 3128;
  *((_WORD *)v6 + 1756) = 1;
  *((_BYTE *)v6 + 3514) = 0;
  *((_OWORD *)v6 + 220) = 0u;
  *((_OWORD *)v6 + 221) = 0u;
  *((_QWORD *)v6 + 444) = (char *)v6 + 3568;
  *((_QWORD *)v6 + 445) = 0x800000000;
  *((_QWORD *)v6 + 462) = 0;
  *((_DWORD *)v6 + 926) = 0;
  *((_QWORD *)v6 + 465) = (char *)v6 + 3736;
  *((_QWORD *)v6 + 466) = 0x800000000;
  *((_QWORD *)v6 + 471) = 0;
  *((_DWORD *)v6 + 944) = 0;
  *((_QWORD *)v6 + 481) = 0;
  *(_OWORD *)((char *)v6 + 3816) = 0u;
  *(_OWORD *)((char *)v6 + 3832) = 0u;
  *(_OWORD *)((char *)v6 + 3784) = 0u;
  *(_OWORD *)((char *)v6 + 3800) = 0u;
  *((_QWORD *)v6 + 482) = (char *)v6 + 3872;
  *((_QWORD *)v6 + 483) = 0x800000000;
  *((_QWORD *)v6 + 500) = (char *)v6 + 4016;
  *((_QWORD *)v6 + 501) = 0x800000000;
  *((_OWORD *)v6 + 259) = 0u;
  *((_OWORD *)v6 + 260) = 0u;
  *((_QWORD *)v6 + 522) = 0;
  *((_QWORD *)v6 + 525) = 0;
  *((_QWORD *)v6 + 524) = 0;
  *((_QWORD *)v6 + 526) = (char *)v6 + 3832;
  *((_WORD *)v6 + 2108) = 1;
  v4[1586] = 0;
  *((_OWORD *)v6 + 265) = 0u;
  *((_OWORD *)v6 + 264) = 0u;
  *((_QWORD *)v6 + 532) = (char *)v6 + 4272;
  *((_QWORD *)v6 + 533) = 0x800000000;
  *((_QWORD *)v6 + 550) = 0;
  *((_DWORD *)v6 + 1102) = 0;
  *((_QWORD *)v6 + 553) = (char *)v6 + 4440;
  *((_QWORD *)v6 + 554) = 0x800000000;
  *((_QWORD *)v6 + 559) = 0;
  *((_DWORD *)v6 + 1120) = 0;
  *(_OWORD *)((char *)v6 + 4504) = 0u;
  *(_OWORD *)((char *)v6 + 4520) = 0u;
  *(_OWORD *)((char *)v6 + 4488) = 0u;
  *((_QWORD *)v6 + 567) = (char *)v6 + 4552;
  *((_QWORD *)v6 + 568) = 0x800000000;
  *((_QWORD *)v6 + 585) = (char *)v6 + 4696;
  *((_QWORD *)v6 + 586) = 0x800000000;
  *((_QWORD *)v6 + 607) = 0;
  *(_OWORD *)((char *)v6 + 4824) = 0u;
  *(_OWORD *)((char *)v6 + 4840) = 0u;
  *((_QWORD *)v6 + 610) = 0;
  *((_QWORD *)v6 + 609) = 0;
  *((_QWORD *)v6 + 611) = (char *)v6 + 4512;
  *((_WORD *)v6 + 2448) = 1;
  v4[2266] = 0;
  *(_OWORD *)((char *)v6 + 4904) = 0u;
  *(_OWORD *)((char *)v6 + 4920) = 0u;
  *((_QWORD *)v6 + 617) = (char *)v6 + 4952;
  *((_QWORD *)v6 + 618) = 0x800000000;
  *((_QWORD *)v6 + 635) = 0;
  *((_DWORD *)v6 + 1272) = 0;
  *((_QWORD *)v6 + 638) = (char *)v6 + 5120;
  *((_QWORD *)v6 + 639) = 0x800000000;
  *((_QWORD *)v6 + 644) = 0;
  *((_DWORD *)v6 + 1290) = 0;
  *((_QWORD *)v6 + 647) = 0;
  *((_QWORD *)v6 + 646) = 0;
  *((_QWORD *)v6 + 648) = 0;
  return result;
}

void sub_1C4839014(llvm::ScheduleDAGMILive *a1)
{
  llvm::ScheduleDAGMILive::~ScheduleDAGMILive(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4839038(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2648) + 56))(*(_QWORD *)(a1 + 2648));
}

char *sub_1C483904C(char **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (a1[1] - *a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v10 = &v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v11;
  v12 = v9 + 8;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      v17 = v18;
      *(_QWORD *)v16 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t sub_1C4839154(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void **v23;

  *(_QWORD *)a1 = &off_1E7F9DC20;
  v2 = *(void **)(a1 + 2408);
  if (v2)
  {
    *(_QWORD *)(a1 + 2416) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2384), 4);
  v23 = (void **)(a1 + 2360);
  sub_1C476B22C(&v23);
  v23 = (void **)(a1 + 2336);
  sub_1C476B22C(&v23);
  v3 = *(void **)(a1 + 2312);
  if (v3)
  {
    *(_QWORD *)(a1 + 2320) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 2240);
  if (v4 != (void *)(a1 + 2256))
    free(v4);
  v5 = *(void **)(a1 + 2216);
  if (v5)
  {
    *(_QWORD *)(a1 + 2224) = v5;
    operator delete(v5);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2192), 8);
  v6 = *(void **)(a1 + 2120);
  if (v6 != (void *)(a1 + 2136))
    free(v6);
  v7 = *(void **)(a1 + 2088);
  if (v7)
  {
    *(_QWORD *)(a1 + 2096) = v7;
    operator delete(v7);
  }
  v23 = (void **)(a1 + 2064);
  sub_1C476B22C(&v23);
  v8 = *(void **)(a1 + 1960);
  if (v8 != (void *)(a1 + 1976))
    free(v8);
  if ((*(_BYTE *)(a1 + 1152) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1160), 8);
  sub_1C483D61C(a1 + 1112);
  sub_1C483D668(a1 + 1072);
  v9 = *(void **)(a1 + 976);
  if (v9 != (void *)(a1 + 992))
    free(v9);
  v10 = *(void **)(a1 + 880);
  if (v10 != (void *)(a1 + 896))
    free(v10);
  v11 = *(void **)(a1 + 800);
  if (v11 != (void *)(a1 + 816))
    free(v11);
  v12 = *(void **)(a1 + 776);
  if (v12)
  {
    *(_QWORD *)(a1 + 784) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 752);
  if (v13)
  {
    *(_QWORD *)(a1 + 760) = v13;
    operator delete(v13);
  }
  for (i = 0; i != -96; i -= 48)
  {
    v15 = *(void **)(a1 + i + 696);
    if ((void *)(a1 + i + 712) != v15)
      free(v15);
  }
  v16 = *(void **)(a1 + 560);
  if (v16 != *(void **)(a1 + 552))
    free(v16);
  v17 = *(void **)(a1 + 464);
  if (v17 != *(void **)(a1 + 456))
    free(v17);
  v18 = *(void **)(a1 + 424);
  if (v18)
  {
    *(_QWORD *)(a1 + 432) = v18;
    operator delete(v18);
  }
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  v19 = *(void **)(a1 + 368);
  if (v19)
  {
    *(_QWORD *)(a1 + 376) = v19;
    operator delete(v19);
  }
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  v20 = *(void **)(a1 + 312);
  if (v20)
  {
    *(_QWORD *)(a1 + 320) = v20;
    operator delete(v20);
  }
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  v21 = *(void **)(a1 + 256);
  if (v21)
  {
    *(_QWORD *)(a1 + 264) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if ((*(_BYTE *)(a1 + 88) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 96), 8);
  return a1;
}

void sub_1C48393AC(uint64_t a1)
{
  sub_1C4839154(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C48393D0()
{
  return 1;
}

void sub_1C48393D8(uint64_t a1, int8x16_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  unsigned int v14;
  int v15;
  int *v16;
  int v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  llvm::ScheduleDAGMILive *v50;
  unsigned __int16 *v51;
  int v52;
  BOOL v54;
  _BOOL8 v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  unsigned __int16 *v59;
  uint64_t v60;
  int v61;
  _BOOL8 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint8x8_t v69;
  uint64_t **v70;
  uint64_t *j;
  unint64_t v72;
  _QWORD *v73;
  float v74;
  float v75;
  _BOOL8 v76;
  unint64_t v77;
  unint64_t v78;
  int8x8_t prime;
  void *v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint8x8_t v85;
  unint64_t v86;
  uint8x8_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  llvm *UnderlyingObject;
  int v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int16 *v151;
  int v152;
  uint64_t v153;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  _QWORD *v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  void *v187;
  uint64_t *v188;
  unsigned int v189;
  unsigned int v190;
  unint64_t v191;
  void *v192;
  int v193;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unsigned int *v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t *v217;
  _QWORD *v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  int v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unsigned int *v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t *v244;
  _QWORD *v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int *v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t *v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  int v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  unint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  void **v282;
  unint64_t v283;
  uint64_t v284;
  char *v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  void *v295;
  int v296;
  int v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int v302;
  _BYTE *v304;
  unsigned int v305;
  int v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t *v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  void *v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  unsigned int v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  int v330;
  uint64_t v331;
  _DWORD *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t *v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  signed int v344;
  signed int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int *v349;
  int v350;
  unsigned int v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  unsigned int v355;
  _BYTE *v357;
  unint64_t v358;
  uint64_t v359;
  unsigned int v360;
  int v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t *v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t *v371;
  _QWORD *v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  int v376;
  float v377;
  float *v378;
  float *v379;
  unint64_t v380;
  float *v381;
  float *v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  char *v387;
  float *v388;
  char *v389;
  char *v390;
  uint64_t v391;
  unsigned int v392;
  _QWORD *v393;
  _QWORD *v394;
  float v395;
  float *v396;
  float *v397;
  unint64_t v398;
  float *v399;
  float *v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  char *v405;
  float *v406;
  char *v407;
  char *v408;
  int v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  float v413;
  float *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  float v419;
  float v420;
  uint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  float v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t v430;
  _DWORD *v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  _QWORD *v435;
  int v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t *v441;
  void **v442;
  int v443;
  void **v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  void *v448;
  uint64_t v449;
  _BYTE v450[64];
  void *v451;
  uint64_t v452;
  _BYTE v453[48];
  unsigned int k;
  __int128 v455;
  _BYTE v456[48];
  unsigned int v457;
  uint64_t v458;

  v458 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = (char *)a2 + 632;
  *(int8x16_t *)(a1 + 24) = vextq_s8(a2[1], a2[1], 8uLL);
  v5 = a2->i64[1];
  *(_QWORD *)(a1 + 40) = v5;
  v6 = (_QWORD *)a2[2].i64[0];
  *(_QWORD *)(a1 + 48) = v6[5];
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*v6 + 40) + 272;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(v7 + 281);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(v7 + 305) ^ 1;
  v8 = *(_QWORD **)(a1 + 24);
  v9 = *(_QWORD *)(v8[30] + 48);
  v10 = (_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v8 + 320))(v8, v9);
  *(_DWORD *)(a1 + 64) = *v10;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 312))(*(_QWORD *)(a1 + 24), a2[2].i64[0]);
  if (v10[1] != -1)
  {
    v12 = v11;
    v13 = v10 + 2;
    do
    {
      v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 312))(*(_QWORD *)(a1 + 24), a2[2].i64[0]);
      if (v14 > v12)
      {
        *(_DWORD *)(a1 + 64) = *(v13 - 1);
        v12 = v14;
      }
      v15 = *v13++;
    }
    while (v15 != -1);
  }
  v16 = (int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 280))(*(_QWORD *)(a1 + 24), v9);
  v17 = *v16;
  *(_DWORD *)(a1 + 68) = *v16;
  *(_BYTE *)(a1 + 1952) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 3128) + 4 * *(unsigned int *)(a1 + 64)) >= (24 * v17);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 424);
  *(_DWORD *)(a1 + 448) = 0;
  for (i = 656; i != 752; i += 48)
    *(_DWORD *)(a1 + i) = 0;
  *(_DWORD *)(a1 + 744) = 0;
  v19 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v19 + 40)
                       + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 58326);
  *(_DWORD *)(a1 + 888) = 0;
  v20 = *(unsigned int *)(v19 + 48);
  if ((_DWORD)v20)
  {
    if (*(_DWORD *)(a1 + 892) < v20)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 880, a1 + 896, *(unsigned int *)(v19 + 48), 4);
      v21 = *(unsigned int *)(a1 + 888);
    }
    else
    {
      v21 = 0;
    }
    if (v20 != v21)
      bzero((void *)(*(_QWORD *)(a1 + 880) + 4 * v21), 4 * (v20 - v21));
    *(_DWORD *)(a1 + 888) = v20;
    LODWORD(v20) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48);
  }
  *(_DWORD *)(a1 + 960) = 0;
  v448 = v450;
  v449 = 0x1000000000;
  *(_DWORD *)(a1 + 808) = 0;
  if ((_DWORD)v20)
  {
    if (*(_DWORD *)(a1 + 812) < v20)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 800, a1 + 816, v20, 4);
      v22 = *(unsigned int *)(a1 + 808);
    }
    else
    {
      v22 = 0;
    }
    if (v20 != v22)
      bzero((void *)(*(_QWORD *)(a1 + 800) + 4 * v22), 4 * (v20 - v22));
    *(_DWORD *)(a1 + 808) = v20;
    v23 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 48);
    LODWORD(v449) = 0;
    if ((_DWORD)v23)
    {
      if (HIDWORD(v449) < v23)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v448, (uint64_t)v450, v23, 4);
        v24 = v449;
      }
      else
      {
        v24 = 0;
      }
      if (v23 != v24)
        bzero((char *)v448 + 4 * v24, 4 * (v23 - v24));
      LODWORD(v449) = v23;
    }
  }
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *(_QWORD *)(v25 + 48);
  v27 = *(_QWORD *)(v25 + 56);
  if (v26 == v27)
  {
    v30 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v2 = 24;
    do
    {
      v28 = *(_WORD **)(v26 + 24);
      if (!v28)
      {
        if (byte_1ED8303C8)
        {
          v29 = *(_QWORD *)(a1 + 8);
          v28 = *(_WORD **)(v29 + 672);
          if (v28)
          {
            v28 += 12 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) + 16) + 6);
            if ((v28[4] & 0x1FFF) == 0x1FFE)
            {
              do
              {
                v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + 808) + 200))(*(_QWORD *)(v29 + 808));
                v41 = *(_QWORD *)(v29 + 672);
              }
              while ((*(_WORD *)(v41 + 24 * v40 + 8) & 0x1FFF) == 0x1FFE);
              v28 = (_WORD *)(v41 + 24 * v40);
            }
            *(_QWORD *)(v26 + 24) = v28;
          }
        }
        else
        {
          v28 = 0;
        }
      }
      v30 = *(_QWORD *)(a1 + 16);
      if (v28[6])
      {
        v31 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v30 + 176) + 136) + 4 * (unsigned __int16)v28[5]);
        v32 = &v31[2 * (unsigned __int16)v28[6]];
        v33 = *(_QWORD *)(v30 + 192);
        v34 = *(_QWORD *)(a1 + 800);
        v35 = *(_WORD **)(a1 + 80);
        v36 = v448;
        do
        {
          v37 = *v31;
          v38 = *(_DWORD *)(v33 + 4 * v37);
          v39 = v31[1];
          *(_DWORD *)(v34 + 4 * v37) += v38 * v39;
          if (v35 == v28)
            v39 = (43691 * v39) >> 17;
          v36[v37] += v39 * v38;
          v31 += 2;
        }
        while (v31 != v32);
      }
      v26 += 272;
    }
    while (v26 != v27);
  }
  v42 = *(unsigned int *)(v30 + 48);
  v43 = v448;
  if ((_DWORD)v42)
  {
    v44 = 0;
    v45 = 0;
    v46 = *(_QWORD *)(a1 + 800);
    v47 = *(_DWORD *)(v30 + 276);
    v48 = *(unsigned int *)(a1 + 960);
    do
    {
      if (*(_DWORD *)(v46 + 4 * v44) - *(_DWORD *)(v46 + 4 * v48) >= v47)
      {
        *(_DWORD *)(a1 + 960) = v44;
        v48 = v44;
      }
      if (v43[v44] - v43[v45] >= v47)
        v45 = v44;
      ++v44;
    }
    while (v42 != v44);
  }
  else
  {
    v45 = 0;
  }
  *(float *)(a1 + 1944) = (float)v43[v45] * 0.03125;
  v49 = a1 + 88;
  sub_1C483D6B8((_QWORD *)(a1 + 88));
  v50 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
  v51 = *(unsigned __int16 **)(*((_QWORD *)v50 + 116) + 16);
  v52 = *v51;
  v54 = (v52 - 9) <= 0x3C && ((1 << (v52 - 9)) & 0x1000000000000605) != 0 || v52 == 0;
  v55 = !v54 && (v51[4] & 0x10) == 0 && (v51[8] & 1) == 0;
  *(_DWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1050) = 0;
  v56 = *((_QWORD *)v50 + 6);
  v445 = *((_QWORD *)v50 + 7);
  if (v56 != v445)
  {
    v57 = 0;
    v435 = (_QWORD *)(a1 + 1088);
    while (1)
    {
      v58 = *(_QWORD **)(v56 + 8);
      if (v58)
        break;
      v64 = v55;
LABEL_181:
      v56 += 272;
      v55 = v64;
      if (v56 == v445)
      {
        v50 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
        goto LABEL_194;
      }
    }
    v59 = (unsigned __int16 *)v58[2];
    v60 = *((_QWORD *)v59 + 2);
    v61 = *v59;
    if ((v61 - 9) <= 0x3C && ((1 << (v61 - 9)) & 0x1000000000000605) != 0
      || v61 == 0)
    {
      v64 = 0;
    }
    else
    {
      v64 = (v59[4] & 0x10) == 0 && (*((_QWORD *)v59 + 2) & 1) == 0;
    }
    if ((v60 & 0x10120) != 0)
      ++*(_DWORD *)(a1 + 1064);
    if ((v60 & 0x20) == 0 || (v65 = *((unsigned __int8 *)v59 + 4), v66 = v58[4], *(_BYTE *)(v66 + 32 * v65) != 7))
    {
LABEL_153:
      if ((v60 & 0x100) != 0)
      {
        v95 = v58[6];
        if (v95 >= 8)
        {
          if ((v95 & 7) != 0)
          {
            if ((v58[6] & 7) != 3 || (v95 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_DWORD *)(v95 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_168;
          }
          else
          {
            v95 &= 0xFFFFFFFFFFFFFFF8;
            v58[6] = v95;
          }
          if ((v95 & 7) != 0)
          {
            v96 = *(uint64_t **)((v95 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            v96 = (uint64_t *)(v95 & 0xFFFFFFFFFFFFFFF8);
            v58[6] = v96;
          }
          v97 = *v96;
          if ((v97 & 4) == 0 && (v97 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v98 = v57;
            UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v97 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
            v57 = v98;
            if (UnderlyingObject)
            {
              *(_QWORD *)&v455 = UnderlyingObject;
              *((_QWORD *)&v455 + 1) = v56;
              sub_1C483D7F8((_QWORD *)(a1 + 1112), &v455);
              v57 = v98;
            }
          }
        }
      }
LABEL_168:
      v57 += v55 && !v64;
      if ((*(_BYTE *)(v58[2] + 17) & 2) != 0)
      {
        v100 = v57;
        v451 = (void *)v56;
        v452 = 0;
        sub_1C483DD7C(v49, &v451, &v452, (uint64_t)&v455);
        v101 = *(unsigned int *)(v56 + 120);
        if ((_DWORD)v101)
        {
          v102 = v455;
          v103 = *(_QWORD **)(v56 + 112);
          v104 = 16 * v101;
          v57 = v100;
          while (1)
          {
            v105 = *v103 & 0xFFFFFFFFFFFFFFF8;
            if ((*v103 & 6) != 0 || v105 == 0)
              break;
            v107 = *(_QWORD *)(v105 + 8);
            if (!v107 || (*(_BYTE *)(*(_QWORD *)(v107 + 16) + 16) & 0x20) == 0)
              break;
            ++*(_DWORD *)(v102 + 8);
            v103 += 2;
            v104 -= 16;
            if (!v104)
              goto LABEL_181;
          }
          *(_DWORD *)(v102 + 8) = -1;
        }
        else
        {
          v57 = v100;
        }
      }
      goto LABEL_181;
    }
    v67 = *(unsigned int *)(v66 + 32 * v65 + 4);
    v68 = *(_QWORD *)(a1 + 1080);
    if (v68)
    {
      v69 = (uint8x8_t)vcnt_s8((int8x8_t)v68);
      v69.i16[0] = vaddlv_u8(v69);
      if (v69.u32[0] > 1uLL)
      {
        v2 = *(unsigned int *)(v66 + 32 * v65 + 4);
        if (v68 <= v67)
          v2 = v67 % v68;
      }
      else
      {
        v2 = ((_DWORD)v68 - 1) & v67;
      }
      v70 = *(uint64_t ***)(*(_QWORD *)(a1 + 1072) + 8 * v2);
      if (v70)
      {
        for (j = *v70; j; j = (uint64_t *)*j)
        {
          v72 = j[1];
          if (v72 == v67)
          {
            if (*((_DWORD *)j + 4) == (_DWORD)v67)
              goto LABEL_153;
          }
          else
          {
            if (v69.u32[0] > 1uLL)
            {
              if (v72 >= v68)
                v72 %= v68;
            }
            else
            {
              v72 &= v68 - 1;
            }
            if (v72 != v2)
              break;
          }
        }
      }
    }
    v443 = v57;
    v73 = operator new(0x20uLL);
    *v73 = 0;
    v73[1] = v67;
    *((_DWORD *)v73 + 4) = v67;
    v73[3] = v56;
    v74 = (float)(unint64_t)(*(_QWORD *)(a1 + 1096) + 1);
    v75 = *(float *)(a1 + 1104);
    if (v68 && (float)(v75 * (float)v68) >= v74)
    {
      v57 = v443;
      goto LABEL_143;
    }
    v76 = (v68 & (v68 - 1)) != 0;
    if (v68 < 3)
      v76 = 1;
    v77 = v76 | (2 * v68);
    v78 = vcvtps_u32_f32(v74 / v75);
    if (v77 <= v78)
      prime = (int8x8_t)v78;
    else
      prime = (int8x8_t)v77;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v68 = *(_QWORD *)(a1 + 1080);
    }
    v57 = v443;
    if (*(_QWORD *)&prime <= v68)
    {
      if (*(_QWORD *)&prime >= v68)
        goto LABEL_138;
      v86 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1096) / *(float *)(a1 + 1104));
      if (v68 < 3 || (v87 = (uint8x8_t)vcnt_s8((int8x8_t)v68), v87.i16[0] = vaddlv_u8(v87), v87.u32[0] > 1uLL))
      {
        v86 = std::__next_prime(v86);
        v57 = v443;
      }
      else
      {
        v88 = 1 << -(char)__clz(v86 - 1);
        if (v86 >= 2)
          v86 = v88;
      }
      if (*(_QWORD *)&prime <= v86)
        prime = (int8x8_t)v86;
      if (*(_QWORD *)&prime >= v68)
      {
        v68 = *(_QWORD *)(a1 + 1080);
        goto LABEL_138;
      }
      if (!*(_QWORD *)&prime)
      {
        v108 = *(void **)(a1 + 1072);
        *(_QWORD *)(a1 + 1072) = 0;
        if (v108)
        {
          operator delete(v108);
          v57 = v443;
        }
        v68 = 0;
        *(_QWORD *)(a1 + 1080) = 0;
        goto LABEL_138;
      }
    }
    if (*(_QWORD *)&prime >> 61)
LABEL_624:
      sub_1C4764EE4();
    v80 = operator new(8 * *(_QWORD *)&prime);
    v81 = *(void **)(a1 + 1072);
    *(_QWORD *)(a1 + 1072) = v80;
    if (v81)
      operator delete(v81);
    v82 = 0;
    *(int8x8_t *)(a1 + 1080) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 1072) + 8 * v82++) = 0;
    while (*(_QWORD *)&prime != v82);
    v83 = (_QWORD *)*v435;
    v57 = v443;
    if (*v435)
    {
      v84 = v83[1];
      v85 = (uint8x8_t)vcnt_s8(prime);
      v85.i16[0] = vaddlv_u8(v85);
      if (v85.u32[0] > 1uLL)
      {
        if (v84 >= *(_QWORD *)&prime)
          v84 %= *(_QWORD *)&prime;
      }
      else
      {
        v84 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 1072) + 8 * v84) = v435;
      v89 = (_QWORD *)*v83;
      if (*v83)
      {
        do
        {
          v90 = v89[1];
          if (v85.u32[0] > 1uLL)
          {
            if (v90 >= *(_QWORD *)&prime)
              v90 %= *(_QWORD *)&prime;
          }
          else
          {
            v90 &= *(_QWORD *)&prime - 1;
          }
          if (v90 != v84)
          {
            v91 = *(_QWORD *)(a1 + 1072);
            if (!*(_QWORD *)(v91 + 8 * v90))
            {
              *(_QWORD *)(v91 + 8 * v90) = v83;
              goto LABEL_134;
            }
            *v83 = *v89;
            *v89 = **(_QWORD **)(*(_QWORD *)(a1 + 1072) + 8 * v90);
            **(_QWORD **)(*(_QWORD *)(a1 + 1072) + 8 * v90) = v89;
            v89 = v83;
          }
          v90 = v84;
LABEL_134:
          v83 = v89;
          v89 = (_QWORD *)*v89;
          v84 = v90;
        }
        while (v89);
      }
    }
    v68 = (unint64_t)prime;
LABEL_138:
    if ((v68 & (v68 - 1)) != 0)
    {
      if (v68 <= v67)
        v2 = v67 % v68;
      else
        v2 = v67;
    }
    else
    {
      v2 = ((_DWORD)v68 - 1) & v67;
    }
LABEL_143:
    v92 = *(_QWORD *)(a1 + 1072);
    v93 = *(_QWORD **)(v92 + 8 * v2);
    if (v93)
    {
      *v73 = *v93;
    }
    else
    {
      *v73 = *v435;
      *v435 = v73;
      *(_QWORD *)(v92 + 8 * v2) = v435;
      if (!*v73)
      {
LABEL_152:
        ++*(_QWORD *)(a1 + 1096);
        v49 = a1 + 88;
        goto LABEL_153;
      }
      v94 = *(_QWORD *)(*v73 + 8);
      if ((v68 & (v68 - 1)) != 0)
      {
        if (v94 >= v68)
          v94 %= v68;
      }
      else
      {
        v94 &= v68 - 1;
      }
      v93 = (_QWORD *)(*(_QWORD *)(a1 + 1072) + 8 * v94);
    }
    *v93 = v73;
    goto LABEL_152;
  }
  v57 = 0;
LABEL_194:
  *(_DWORD *)(a1 + 1948) = v57;
  v109 = *((_QWORD *)v50 + 77);
  v110 = *(_DWORD *)(v109 + 264);
  if (!v110)
  {
LABEL_203:
    *(_BYTE *)(a1 + 964) = 1;
    goto LABEL_204;
  }
  v111 = *(_QWORD *)(*((_QWORD *)v50 + 116) + 24);
  v112 = *(_QWORD *)(v109 + 248);
  v113 = v110 - 1;
  v114 = ((v111 >> 4) ^ (v111 >> 9)) & (v110 - 1);
  v115 = *(_QWORD *)(v112 + 16 * v114);
  if (v111 != v115)
  {
    v116 = 1;
    while (v115 != -4096)
    {
      v117 = v114 + v116++;
      v114 = v117 & v113;
      v115 = *(_QWORD *)(v112 + 16 * v114);
      if (v111 == v115)
        goto LABEL_199;
    }
    goto LABEL_203;
  }
LABEL_199:
  v118 = *(_QWORD *)(v112 + 16 * v114 + 8);
  *(_BYTE *)(a1 + 964) = 1;
  if (v118)
  {
    v120 = v111 + 88;
    v119 = *(_QWORD **)(v111 + 88);
    if (((*(_QWORD *)(v120 + 8) - (_QWORD)v119) & 0x7FFFFFFF8) == 8 && *v119 == **(_QWORD **)(v118 + 32))
      *(_BYTE *)(a1 + 964) = 0;
  }
LABEL_204:
  llvm::ScheduleDAGMILive::computeDFSResult(v50);
  *(_DWORD *)(a1 + 984) = 0;
  v121 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2720) + 208)
        - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2720) + 200)) >> 2;
  *(_DWORD *)(a1 + 1040) = v121;
  if ((v121 + 63) < 0x40)
  {
    v125 = 0;
  }
  else
  {
    v122 = (v121 + 63) >> 6;
    if (v122 > *(_DWORD *)(a1 + 988))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 976, a1 + 992, v122, 8);
      v123 = *(unsigned int *)(a1 + 984);
      LODWORD(v121) = *(_DWORD *)(a1 + 1040);
      v124 = *(_DWORD *)(a1 + 984);
    }
    else
    {
      v123 = 0;
      v124 = 0;
    }
    bzero((void *)(*(_QWORD *)(a1 + 976) + 8 * v123), 8 * v122);
    v125 = v124 + v122;
    *(_DWORD *)(a1 + 984) = v124 + v122;
  }
  if ((v121 & 0x3F) != 0)
  {
    v126 = *(_QWORD *)(a1 + 976) + 8 * v125;
    *(_QWORD *)(v126 - 8) &= ~(-1 << (v121 & 0x3F));
  }
  if (!*(_BYTE *)(a1 + 2048))
    goto LABEL_211;
  *(_DWORD *)(a1 + 2052) = -252645135
                         * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48)) >> 4);
  v127 = (void **)(a1 + 1960);
  v128 = *(unsigned int *)(a1 + 1968);
  if ((_DWORD)v128)
    bzero(*v127, 8 * v128);
  v441 = (uint64_t *)(a1 + 2192);
  sub_1C6125098((_DWORD *)(a1 + 2192));
  v444 = (void **)(a1 + 2240);
  v129 = *(unsigned int *)(a1 + 2248);
  if ((_DWORD)v129)
    bzero(*v444, 8 * v129);
  *(_QWORD *)(a1 + 2224) = *(_QWORD *)(a1 + 2216);
  sub_1C6134C04((_OWORD *)(a1 + 1152));
  v130 = *(_DWORD *)(a1 + 2052);
  v131 = *(unsigned int *)(a1 + 1968);
  if ((*(_DWORD *)(a1 + 2024) & 0x3F) != 0)
  {
    v427 = *(_QWORD *)(a1 + 1960) + 8 * v131;
    *(_QWORD *)(v427 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 2024) & 0x3F));
  }
  v132 = v131;
  *(_DWORD *)(a1 + 2024) = v130;
  v133 = v130 + 63;
  if ((_DWORD)v131 != (v130 + 63) >> 6)
  {
    v134 = v133 >> 6;
    if (v131 > v134)
    {
      *(_DWORD *)(a1 + 1968) = v134;
      v132 = v133 >> 6;
    }
    else
    {
      v135 = v131;
      if (v134 > *(_DWORD *)(a1 + 1972))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1960, a1 + 1976, v134, 8);
        v135 = *(unsigned int *)(a1 + 1968);
        v132 = *(_DWORD *)(a1 + 1968);
      }
      if (v134 != v131)
        bzero((char *)*v127 + 8 * v135, 8 * (v134 - v131));
      v132 += v134 - v131;
      *(_DWORD *)(a1 + 1968) = v132;
      v130 = *(_DWORD *)(a1 + 2024);
    }
  }
  v136 = v130 & 0x3F;
  if (v136)
    *((_QWORD *)*v127 + v132 - 1) &= ~(-1 << v136);
  sub_1C61250E8((uint64_t *)(a1 + 2064), *(unsigned int *)(a1 + 2052));
  v137 = *(_DWORD *)(a1 + 2052);
  v138 = *(unsigned int *)(a1 + 2248);
  if ((*(_DWORD *)(a1 + 2304) & 0x3F) != 0)
  {
    v428 = *(_QWORD *)(a1 + 2240) + 8 * v138;
    *(_QWORD *)(v428 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 2304) & 0x3F));
  }
  v139 = v138;
  *(_DWORD *)(a1 + 2304) = v137;
  v140 = v137 + 63;
  if ((_DWORD)v138 != (v137 + 63) >> 6)
  {
    v141 = v140 >> 6;
    if (v138 > v141)
    {
      *(_DWORD *)(a1 + 2248) = v141;
      v139 = v140 >> 6;
    }
    else
    {
      v142 = v138;
      if (v141 > *(_DWORD *)(a1 + 2252))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v444, a1 + 2256, v141, 8);
        v142 = *(unsigned int *)(a1 + 2248);
        v139 = *(_DWORD *)(a1 + 2248);
      }
      if (v141 != v138)
        bzero((char *)*v444 + 8 * v142, 8 * (v141 - v138));
      v139 += v141 - v138;
      *(_DWORD *)(a1 + 2248) = v139;
      v137 = *(_DWORD *)(a1 + 2304);
    }
  }
  v143 = v137 & 0x3F;
  if (v143)
    *((_QWORD *)*v444 + v139 - 1) &= ~(-1 << v143);
  v144 = *(unsigned int *)(a1 + 2052);
  v145 = *(_QWORD *)(a1 + 2216);
  v146 = (*(_QWORD *)(a1 + 2224) - v145) >> 2;
  if (v144 <= v146)
  {
    if (v144 < v146)
      *(_QWORD *)(a1 + 2224) = v145 + 4 * v144;
  }
  else
  {
    sub_1C476B618((char **)(a1 + 2216), v144 - v146);
  }
  v147 = *(_QWORD *)(a1 + 8);
  v148 = *(_QWORD *)(v147 + 48);
  v149 = *(_QWORD *)(v147 + 56);
  if (v148 != v149)
  {
    while (1)
    {
      v150 = *(_QWORD *)(v148 + 8);
      v151 = *(unsigned __int16 **)(v150 + 16);
      v152 = *v151;
      if ((v152 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(v150 + 32) + 48) & 8) != 0)
        goto LABEL_251;
      v153 = *((_QWORD *)v151 + 1);
      if ((*(_WORD *)(v150 + 44) & 0xC) != 0 && (*(_WORD *)(v150 + 44) & 4) == 0)
        break;
      if ((v153 & 0x80000) != 0)
        goto LABEL_251;
LABEL_254:
      v148 += 272;
      if (v148 == v149)
        goto LABEL_262;
    }
    if ((v153 & 0x80000) == 0)
    {
      while ((*(_WORD *)(v150 + 44) & 8) != 0)
      {
        v150 = *(_QWORD *)(v150 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v150 + 16) + 10) & 8) != 0)
          goto LABEL_251;
      }
      goto LABEL_254;
    }
LABEL_251:
    if ((v152 & 0xFFFE) != 0x2EC4 && (*((_QWORD *)v151 + 2) & 0xC0) != 0)
    {
      *(_QWORD *)&v455 = v148;
      *((_DWORD *)sub_1C6125254(v441, &v455) + 2) = 1065353216;
      *(_QWORD *)((char *)*v444 + (((unint64_t)*(unsigned int *)(v148 + 192) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v148 + 192);
    }
    goto LABEL_254;
  }
LABEL_262:
  v155 = *(unsigned int *)(a1 + 2248);
  if (!(_DWORD)v155)
  {
LABEL_266:
    *(_BYTE *)(a1 + 2048) = 0;
    goto LABEL_211;
  }
  v156 = *(_QWORD **)(a1 + 2240);
  v157 = 8 * v155;
  while (!*v156)
  {
    ++v156;
    v157 -= 8;
    if (!v157)
      goto LABEL_266;
  }
  *(_QWORD *)(a1 + 2112) = 0;
  if (*(_DWORD *)(a1 + 2200))
  {
    *(_QWORD *)(a1 + 2096) = *(_QWORD *)(a1 + 2088);
    v158 = *(_DWORD *)(a1 + 2052);
    v451 = v453;
    v452 = 0x600000000;
    sub_1C4765AA4((char *)&v451, (v158 + 63) >> 6, 0);
    for (k = v158; ; v158 = k)
    {
      v159 = v158 >> 6;
      if (v158 < 0x40)
        break;
      v160 = 0;
      v161 = v451;
      if (v159 <= 1)
        v162 = 1;
      else
        v162 = v158 >> 6;
      v163 = 8 * v162;
      while (*(_QWORD *)((char *)v451 + v160) == -1)
      {
        v160 += 8;
        if (v163 == v160)
          goto LABEL_276;
      }
LABEL_278:
      v164 = *(_QWORD *)(a1 + 8);
      v165 = v452;
      v166 = 8 * v452;
      if ((_DWORD)v452)
      {
        v167 = 8 * v452;
        v168 = v161;
        do
        {
          *v168 = ~*v168;
          ++v168;
          v167 -= 8;
        }
        while (v167);
      }
      v169 = &v161[v165];
      v170 = v158 & 0x3F;
      if ((v158 & 0x3F) != 0)
      {
        *(v169 - 1) &= ~(-1 << v170);
      }
      else if (!v158)
      {
LABEL_290:
        v178 = -1;
        goto LABEL_292;
      }
      v171 = 0;
      v172 = (v158 - 1) & 0xFFFFFFC0;
      v173 = v161;
      while (1)
      {
        v175 = *v173++;
        v174 = v175;
        v176 = v172 == v171 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v158 : -1;
        v177 = v176 & v174;
        if (v177)
          break;
        v171 += 64;
        if (v172 + 64 == v171)
          goto LABEL_290;
      }
      v178 = __clz(__rbit64(v177)) + v171;
LABEL_292:
      v179 = *(_QWORD *)(v164 + 48);
      if ((_DWORD)v165)
      {
        do
        {
          *v161 = ~*v161;
          ++v161;
          v166 -= 8;
        }
        while (v166);
      }
      if ((v158 & 0x3F) != 0)
        *(v169 - 1) &= ~(-1 << v170);
      sub_1C483E1E4((_QWORD *)a1, (uint64_t *)&v451, v179 + 272 * v178);
    }
LABEL_276:
    if ((v158 & 0x3F) != 0)
    {
      v161 = v451;
      if (*((_QWORD *)v451 + v159) != ~(-1 << (v158 & 0x3F)))
        goto LABEL_278;
    }
    v180 = *(_QWORD *)(a1 + 2072);
    v181 = *(_QWORD *)(a1 + 2064);
    while (v180 != v181)
    {
      v183 = *(void **)(v180 - 72);
      v180 -= 72;
      v182 = v183;
      if ((void *)(v180 + 16) != v183)
        free(v182);
    }
    *(_QWORD *)(a1 + 2072) = v181;
    v184 = *(_QWORD *)(a1 + 2344);
    v185 = *(_QWORD *)(a1 + 2336);
    while (v184 != v185)
    {
      v187 = *(void **)(v184 - 72);
      v184 -= 72;
      v186 = v187;
      if ((void *)(v184 + 16) != v187)
        free(v186);
    }
    v429 = (_QWORD *)(a1 + 2216);
    v188 = (uint64_t *)(a1 + 2336);
    *(_QWORD *)(a1 + 2344) = v185;
    v189 = *(_DWORD *)(a1 + 2052);
    v446 = (uint64_t *)(a1 + 2336);
    if (v189)
    {
      v190 = 0;
      while (1)
      {
        *(_QWORD *)&v455 = v456;
        *((_QWORD *)&v455 + 1) = 0x600000000;
        sub_1C4765AA4((char *)&v455, (v189 + 63) >> 6, 0);
        v457 = v189;
        v191 = *(_QWORD *)(a1 + 2072);
        if (v191 >= *(_QWORD *)(a1 + 2080))
        {
          v196 = sub_1C476BAB0((uint64_t *)(a1 + 2064), (uint64_t)&v455);
          goto LABEL_324;
        }
        v192 = (void *)(v191 + 16);
        *(_QWORD *)v191 = v191 + 16;
        *(_QWORD *)(v191 + 8) = 0x600000000;
        v193 = DWORD2(v455);
        if ((__int128 *)v191 != &v455 && DWORD2(v455) != 0)
          break;
LABEL_323:
        *(_DWORD *)(v191 + 64) = v189;
        v196 = v191 + 72;
        v188 = (uint64_t *)(a1 + 2336);
LABEL_324:
        *(_QWORD *)(a1 + 2072) = v196;
        v197 = *(_QWORD *)(a1 + 2344);
        if (v197 < *(_QWORD *)(a1 + 2352))
        {
          v198 = (void *)(v197 + 16);
          *(_QWORD *)v197 = v197 + 16;
          *(_QWORD *)(v197 + 8) = 0x600000000;
          if ((__int128 *)v197 != &v455)
          {
            v199 = DWORD2(v455);
            if (DWORD2(v455))
            {
              if (DWORD2(v455) < 7uLL)
              {
                v200 = DWORD2(v455);
                goto LABEL_332;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod(v197, v197 + 16, DWORD2(v455), 8);
              v200 = DWORD2(v455);
              if (DWORD2(v455))
              {
                v198 = *(void **)v197;
LABEL_332:
                memcpy(v198, (const void *)v455, 8 * v200);
              }
              *(_DWORD *)(v197 + 8) = v199;
            }
          }
          *(_DWORD *)(v197 + 64) = v457;
          v201 = v197 + 72;
          v188 = (uint64_t *)(a1 + 2336);
          goto LABEL_335;
        }
        v201 = sub_1C476BAB0(v188, (uint64_t)&v455);
LABEL_335:
        *(_QWORD *)(a1 + 2344) = v201;
        if ((_BYTE *)v455 != v456)
          free((void *)v455);
        ++v190;
        v189 = *(_DWORD *)(a1 + 2052);
        if (v190 >= v189)
          goto LABEL_338;
      }
      if (DWORD2(v455) >= 7uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v191, v191 + 16, DWORD2(v455), 8);
        v195 = DWORD2(v455);
        if (!DWORD2(v455))
        {
LABEL_322:
          *(_DWORD *)(v191 + 8) = v193;
          v189 = v457;
          goto LABEL_323;
        }
        v192 = *(void **)v191;
      }
      else
      {
        v195 = DWORD2(v455);
      }
      memcpy(v192, (const void *)v455, 8 * v195);
      goto LABEL_322;
    }
LABEL_338:
    v202 = *(uint64_t **)(a1 + 2088);
    v432 = *(uint64_t **)(a1 + 2096);
    v203 = (uint64_t *)(a1 + 2064);
    if (v202 != v432)
    {
      do
      {
        v204 = *v202;
        v205 = *(unsigned int *)(*v202 + 120);
        if ((_DWORD)v205)
        {
          v206 = *(_QWORD **)(v204 + 112);
          v207 = &v206[2 * v205];
          do
          {
            v208 = *(_DWORD *)((*v206 & 0xFFFFFFFFFFFFFFF8) + 192);
            if (v208 != -1)
            {
              v209 = *v203;
              v210 = *v203 + 72 * v208;
              v211 = *(unsigned int *)(v204 + 192);
              v212 = *(_QWORD **)v210;
              *(_QWORD *)(*(_QWORD *)v210 + ((v211 >> 3) & 0x1FFFFFF8)) |= 1 << v211;
              v213 = v209 + 72 * v211;
              v214 = (unsigned int *)(v210 + 64);
              v215 = *(_DWORD *)(v213 + 64);
              if (*(_DWORD *)(v210 + 64) < v215)
              {
                v220 = *(_DWORD *)(v210 + 64) & 0x3F;
                v221 = *(unsigned int *)(v210 + 8);
                if (v220)
                  v212[v221 - 1] &= ~(-1 << v220);
                v222 = v221;
                *v214 = v215;
                v223 = v215 + 63;
                if ((_DWORD)v221 != (v215 + 63) >> 6)
                {
                  v224 = v223 >> 6;
                  if (v221 > v224)
                  {
                    *(_DWORD *)(v210 + 8) = v224;
                    v222 = v223 >> 6;
                    v188 = (uint64_t *)(a1 + 2336);
                  }
                  else
                  {
                    v225 = v221;
                    if (v224 > *(_DWORD *)(v210 + 12))
                    {
                      v228 = v202;
                      v437 = v221;
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v210, v210 + 16, v224, 8);
                      v221 = v437;
                      v202 = v228;
                      v225 = *(unsigned int *)(v210 + 8);
                      v222 = *(_DWORD *)(v210 + 8);
                    }
                    if (v224 != v221)
                    {
                      v226 = v202;
                      v436 = v221;
                      bzero((void *)(*(_QWORD *)v210 + 8 * v225), 8 * (v224 - v221));
                      LODWORD(v221) = v436;
                      v202 = v226;
                    }
                    v222 += v224 - v221;
                    *(_DWORD *)(v210 + 8) = v222;
                    v215 = *v214;
                    v188 = (uint64_t *)(a1 + 2336);
                    v203 = (uint64_t *)(a1 + 2064);
                  }
                }
                v227 = v215 & 0x3F;
                if (v227)
                  *(_QWORD *)(*(_QWORD *)v210 + 8 * v222 - 8) &= ~(-1 << v227);
              }
              v216 = *(unsigned int *)(v213 + 8);
              if ((_DWORD)v216)
              {
                v217 = *(uint64_t **)v213;
                v218 = *(_QWORD **)v210;
                do
                {
                  v219 = *v217++;
                  *v218++ |= v219;
                  --v216;
                }
                while (v216);
              }
            }
            v206 += 2;
          }
          while (v206 != v207);
        }
        ++v202;
      }
      while (v202 != v432);
      v229 = *(_QWORD *)(a1 + 2096);
      v433 = *(_QWORD *)(a1 + 2088);
      while (v229 != v433)
      {
        v231 = *(_QWORD *)(v229 - 8);
        v229 -= 8;
        v230 = v231;
        v232 = *(unsigned int *)(v231 + 40);
        if ((_DWORD)v232)
        {
          v233 = *(_QWORD **)(v230 + 32);
          v234 = &v233[2 * v232];
          do
          {
            v235 = *(_DWORD *)((*v233 & 0xFFFFFFFFFFFFFFF8) + 192);
            if (v235 != -1)
            {
              v236 = *v188;
              v237 = *v188 + 72 * v235;
              v238 = *(unsigned int *)(v230 + 192);
              v239 = *(_QWORD **)v237;
              *(_QWORD *)(*(_QWORD *)v237 + ((v238 >> 3) & 0x1FFFFFF8)) |= 1 << v238;
              v240 = v236 + 72 * v238;
              v241 = (unsigned int *)(v237 + 64);
              v242 = *(_DWORD *)(v240 + 64);
              if (*(_DWORD *)(v237 + 64) < v242)
              {
                v247 = *(_DWORD *)(v237 + 64) & 0x3F;
                v248 = *(unsigned int *)(v237 + 8);
                if (v247)
                  v239[v248 - 1] &= ~(-1 << v247);
                v249 = v248;
                *v241 = v242;
                v250 = v242 + 63;
                if ((_DWORD)v248 != (v242 + 63) >> 6)
                {
                  v251 = v250 >> 6;
                  if (v248 > v251)
                  {
                    *(_DWORD *)(v237 + 8) = v251;
                    v249 = v250 >> 6;
                  }
                  else
                  {
                    v252 = v248;
                    if (v251 > *(_DWORD *)(v237 + 12))
                    {
                      v255 = v229;
                      v439 = v248;
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v237, v237 + 16, v251, 8);
                      v248 = v439;
                      v229 = v255;
                      v203 = (uint64_t *)(a1 + 2064);
                      v252 = *(unsigned int *)(v237 + 8);
                      v249 = *(_DWORD *)(v237 + 8);
                    }
                    if (v251 != v248)
                    {
                      v253 = v229;
                      v438 = v248;
                      bzero((void *)(*(_QWORD *)v237 + 8 * v252), 8 * (v251 - v248));
                      LODWORD(v248) = v438;
                      v229 = v253;
                      v203 = (uint64_t *)(a1 + 2064);
                    }
                    v249 += v251 - v248;
                    *(_DWORD *)(v237 + 8) = v249;
                    v242 = *v241;
                  }
                  v188 = (uint64_t *)(a1 + 2336);
                }
                v254 = v242 & 0x3F;
                if (v254)
                  *(_QWORD *)(*(_QWORD *)v237 + 8 * v249 - 8) &= ~(-1 << v254);
              }
              v243 = *(unsigned int *)(v240 + 8);
              if ((_DWORD)v243)
              {
                v244 = *(uint64_t **)v240;
                v245 = *(_QWORD **)v237;
                do
                {
                  v246 = *v244++;
                  *v245++ |= v246;
                  --v243;
                }
                while (v243);
              }
            }
            v233 += 2;
          }
          while (v233 != v234);
        }
      }
    }
    if (*(_DWORD *)(a1 + 2052))
    {
      v256 = 0;
      v257 = *v203;
      do
      {
        v258 = *v188 + 72 * v256;
        v259 = v257 + 72 * v256;
        v260 = (unsigned int *)(v259 + 64);
        v261 = *(_DWORD *)(v258 + 64);
        if (*(_DWORD *)(v259 + 64) < v261)
        {
          v271 = *(_DWORD *)(v259 + 64) & 0x3F;
          v272 = *(unsigned int *)(v259 + 8);
          if (v271)
            *(_QWORD *)(*(_QWORD *)v259 + 8 * v272 - 8) &= ~(-1 << v271);
          v273 = v272;
          *v260 = v261;
          v274 = v261 + 63;
          if ((_DWORD)v272 != (v261 + 63) >> 6)
          {
            v275 = v274 >> 6;
            if (v272 > v275)
            {
              *(_DWORD *)(v259 + 8) = v275;
              v273 = v274 >> 6;
              v188 = (uint64_t *)(a1 + 2336);
            }
            else
            {
              v276 = v272;
              if (v275 > *(_DWORD *)(v259 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v259, v259 + 16, v275, 8);
                v276 = *(unsigned int *)(v259 + 8);
                v273 = *(_DWORD *)(v259 + 8);
              }
              if (v275 != v272)
                bzero((void *)(*(_QWORD *)v259 + 8 * v276), 8 * (v275 - v272));
              v273 += v275 - v272;
              *(_DWORD *)(v259 + 8) = v273;
              v261 = *v260;
              v188 = (uint64_t *)(a1 + 2336);
              v203 = (uint64_t *)(a1 + 2064);
            }
          }
          v277 = v261 & 0x3F;
          if (v277)
            *(_QWORD *)(*(_QWORD *)v259 + 8 * v273 - 8) &= ~(-1 << v277);
        }
        v262 = *(unsigned int *)(v258 + 8);
        if ((_DWORD)v262)
        {
          v263 = *(uint64_t **)v258;
          v264 = *(_QWORD **)v259;
          do
          {
            v265 = *v263++;
            *v264++ |= v265;
            --v262;
          }
          while (v262);
        }
        v257 = *v203;
        v266 = *v203 + 72 * v256;
        v267 = *(_QWORD **)v266;
        v268 = *(unsigned int *)(v266 + 8);
        if ((_DWORD)v268)
        {
          v269 = 8 * v268;
          v270 = v267;
          do
          {
            *v270 = ~*v270;
            ++v270;
            v269 -= 8;
          }
          while (v269);
        }
        if ((*(_DWORD *)(v257 + 72 * v256 + 64) & 0x3F) != 0)
          v267[v268 - 1] &= ~(-1 << (*(_DWORD *)(v257 + 72 * v256 + 64) & 0x3F));
        v267[v256 >> 6] &= ~(1 << v256);
        ++v256;
      }
      while (v256 < *(unsigned int *)(a1 + 2052));
    }
    v278 = *(_QWORD *)(a1 + 2088);
    v434 = *(_QWORD *)(a1 + 2096);
    if (v278 == v434)
    {
LABEL_606:
      if (v451 != v453)
        free(v451);
      if (*(_DWORD *)(a1 + 2200))
      {
        v415 = *(_QWORD *)(a1 + 2096);
        v416 = *(_QWORD *)(a1 + 2088);
        while (v415 != v416)
        {
          v418 = *(_QWORD *)(v415 - 8);
          v415 -= 8;
          v417 = v418;
          *(_QWORD *)&v455 = v418;
          v419 = 0.0;
          v420 = 0.0;
          if (((*(_QWORD *)((char *)*v444 + (((unint64_t)*(unsigned int *)(v418 + 192) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v418 + 192)) & 1) != 0)
          {
            v420 = *((float *)sub_1C6125254(v441, &v455) + 2);
            v417 = v455;
          }
          v421 = *(unsigned int *)(v417 + 120);
          if ((_DWORD)v421)
          {
            v422 = *(_QWORD **)(v417 + 112);
            v423 = 16 * v421;
            do
            {
              v424 = *(unsigned int *)((*v422 & 0xFFFFFFFFFFFFFFF8) + 192);
              if ((_DWORD)v424 != -1 && *(float *)(*v429 + 4 * v424) > v419)
                v419 = *(float *)(*v429 + 4 * v424);
              v422 += 2;
              v423 -= 16;
            }
            while (v423);
          }
          v425 = v420 + v419;
          v426 = *(unsigned int *)(v417 + 192);
          if (*(float *)(*v429 + 4 * v426) < v425)
            *(float *)(*v429 + 4 * v426) = v425;
        }
      }
      goto LABEL_211;
    }
    v442 = (void **)(a1 + 2120);
    v430 = a1 + 2136;
    v431 = (_DWORD *)(a1 + 2384);
    while (1)
    {
      v279 = *(_QWORD *)(a1 + 2112);
      v280 = *(_DWORD *)(*(_QWORD *)v278 + 192);
      v281 = *(_QWORD *)(a1 + 2064);
      v282 = (void **)(v281 + 72 * v280);
      *(_QWORD *)(a1 + 2112) = v282;
      v283 = *((unsigned int *)v282 + 2);
      if ((_DWORD)v283)
      {
        v284 = 0;
        v285 = (char *)*v282;
        while (!*(_QWORD *)&v285[v284])
        {
          v284 += 8;
          if (8 * v283 == v284)
            goto LABEL_424;
        }
        v286 = *(_DWORD *)(a1 + 2248) >= v283 ? *((_DWORD *)v282 + 2) : *(_DWORD *)(a1 + 2248);
        if (v286)
        {
          v287 = 0;
          v288 = 8 * v286;
          while ((*(_QWORD *)((_BYTE *)*v444 + v287) & *(_QWORD *)&v285[v287]) == 0)
          {
            v287 += 8;
            if (v288 == v287)
              goto LABEL_424;
          }
          if (!v279
            || *(_DWORD *)(v281 + 72 * v280 + 64) != *(_DWORD *)(v279 + 64)
            || memcmp(*v282, *(const void **)v279, 8 * v283))
          {
            if (v442 == v282)
              goto LABEL_440;
            v289 = *(unsigned int *)(a1 + 2128);
            if (v289 >= v283)
            {
              memmove(*v442, v285, 8 * v283);
              goto LABEL_439;
            }
            if (*(_DWORD *)(a1 + 2132) < v283)
            {
              *(_DWORD *)(a1 + 2128) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v442, v430, v283, 8);
            }
            else if ((_DWORD)v289)
            {
              memmove(*v442, v285, 8 * v289);
LABEL_437:
              v290 = *((unsigned int *)v282 + 2);
              if (v289 != v290)
                memcpy((char *)*v442 + 8 * v289, (char *)*v282 + 8 * v289, (_BYTE *)*v282 + 8 * v290 - ((_BYTE *)*v282 + 8 * v289));
LABEL_439:
              *(_DWORD *)(a1 + 2128) = v283;
LABEL_440:
              v291 = *(_DWORD *)(v281 + 72 * v280 + 64);
              *(_DWORD *)(a1 + 2184) = v291;
              v292 = *(_QWORD *)(a1 + 2368);
              v293 = *(_QWORD *)(a1 + 2360);
              if (v292 != v293)
              {
                do
                {
                  v295 = *(void **)(v292 - 72);
                  v292 -= 72;
                  v294 = v295;
                  if ((void *)(v292 + 16) != v295)
                    free(v294);
                }
                while (v292 != v293);
                v291 = *(_DWORD *)(a1 + 2184);
              }
              *(_QWORD *)(a1 + 2368) = v293;
              v296 = sub_1C476BA0C(v442, 0, v291, 1u);
              if (v296 != -1)
              {
                v297 = v296;
                while (1)
                {
                  v298 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
                  if (!v298)
                    goto LABEL_494;
                  v299 = *(_DWORD *)(v298 + 272 * v297 + 192);
                  v300 = *v446;
                  v301 = *v446 + 72 * v299;
                  *(_QWORD *)&v455 = v456;
                  *((_QWORD *)&v455 + 1) = 0x600000000;
                  v302 = *(_DWORD *)(v301 + 8);
                  if (&v455 == (__int128 *)v301 || v302 == 0)
                  {
                    v302 = 0;
                    v304 = v456;
                  }
                  else
                  {
                    v305 = *(_DWORD *)(v301 + 8);
                    v304 = v456;
                    if (v302 < 7
                      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v455, (uint64_t)v456, *(unsigned int *)(v301 + 8), 8), v305 = *(_DWORD *)(v301 + 8), v304 = (_BYTE *)v455, v305))
                    {
                      memcpy(v304, *(const void **)v301, 8 * v305);
                      v304 = (_BYTE *)v455;
                    }
                    DWORD2(v455) = v302;
                  }
                  v306 = *(_DWORD *)(v300 + 72 * v299 + 64);
                  v457 = v306;
                  v307 = *(_QWORD *)(a1 + 2112);
                  v308 = *(_DWORD *)(v307 + 8);
                  if (v308 >= v302)
                    v309 = v302;
                  else
                    v309 = v308;
                  if ((_DWORD)v309)
                  {
                    v310 = *(uint64_t **)v307;
                    v311 = v304;
                    v312 = v309;
                    do
                    {
                      v313 = *v310++;
                      *v311++ &= v313;
                      --v312;
                    }
                    while (v312);
                  }
                  if (v302 > v308)
                  {
                    do
                    {
                      *(_QWORD *)&v304[8 * v309] = 0;
                      LODWORD(v309) = v309 + 1;
                    }
                    while (v302 != (_DWORD)v309);
                  }
                  *(_QWORD *)&v304[8 * (v299 >> 6)] |= 1 << v299;
                  v314 = *(_QWORD *)(a1 + 2368);
                  if (v314 < *(_QWORD *)(a1 + 2376))
                    break;
                  v318 = sub_1C476BAB0((uint64_t *)(a1 + 2360), (uint64_t)&v455);
LABEL_477:
                  *(_QWORD *)(a1 + 2368) = v318;
                  v319 = (uint64_t *)v455;
                  v320 = DWORD2(v455);
                  if (DWORD2(v455))
                  {
                    v321 = 8 * DWORD2(v455);
                    v322 = (_QWORD *)v455;
                    do
                    {
                      *v322 = ~*v322;
                      ++v322;
                      v321 -= 8;
                    }
                    while (v321);
                  }
                  if ((v457 & 0x3F) != 0)
                    v319[v320 - 1] &= ~(-1 << (v457 & 0x3F));
                  v323 = *(_DWORD *)(a1 + 2128);
                  if (v320 >= v323)
                    v324 = v323;
                  else
                    v324 = v320;
                  if ((_DWORD)v324)
                  {
                    v325 = *v442;
                    v326 = v319;
                    v327 = v324;
                    do
                    {
                      v328 = *v326++;
                      *v325++ &= v328;
                      --v327;
                    }
                    while (v327);
                  }
                  if (v323 > v320)
                  {
                    v329 = *v442;
                    do
                    {
                      v329[v324] = 0;
                      LODWORD(v324) = v324 + 1;
                    }
                    while (v323 != (_DWORD)v324);
                  }
                  if (v319 != (uint64_t *)v456)
                    free(v319);
                  v297 = sub_1C476BA0C(v442, v297 + 1, *(_DWORD *)(a1 + 2184), 1u);
                  if (v297 == -1)
                    goto LABEL_494;
                }
                v315 = (void *)(v314 + 16);
                *(_QWORD *)v314 = v314 + 16;
                *(_QWORD *)(v314 + 8) = 0x600000000;
                if ((__int128 *)v314 != &v455)
                {
                  v316 = DWORD2(v455);
                  if (DWORD2(v455))
                  {
                    if (DWORD2(v455) < 7uLL)
                    {
                      v317 = DWORD2(v455);
                      goto LABEL_474;
                    }
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v314, v314 + 16, DWORD2(v455), 8);
                    v317 = DWORD2(v455);
                    if (DWORD2(v455))
                    {
                      v315 = *(void **)v314;
LABEL_474:
                      memcpy(v315, (const void *)v455, 8 * v317);
                    }
                    *(_DWORD *)(v314 + 8) = v316;
                    v306 = v457;
                  }
                }
                *(_DWORD *)(v314 + 64) = v306;
                v318 = v314 + 72;
                goto LABEL_477;
              }
LABEL_494:
              v330 = *(_DWORD *)(a1 + 2392);
              if (v330 || *(_DWORD *)(a1 + 2396))
              {
                v331 = *(unsigned int *)(a1 + 2400);
                if (v331 <= 4 * v330 || v331 < 0x41)
                {
                  if ((_DWORD)v331)
                  {
                    v332 = *(_DWORD **)v431;
                    v333 = 8 * v331;
                    do
                    {
                      *v332 = -1;
                      v332 += 2;
                      v333 -= 8;
                    }
                    while (v333);
                  }
                  *(_QWORD *)(a1 + 2392) = 0;
                }
                else
                {
                  sub_1C476BF54(v431);
                }
              }
              *(_QWORD *)(a1 + 2320) = *(_QWORD *)(a1 + 2312);
              v334 = *(_QWORD *)(a1 + 2360);
              v335 = *(_QWORD *)(a1 + 2368);
              v440 = v335;
              while (2)
              {
                if (v334 == v335)
                  goto LABEL_424;
                v336 = *(_DWORD *)(v334 + 8);
                v337 = *(_DWORD *)(a1 + 2248);
                if (v337 >= v336)
                  v338 = v336;
                else
                  v338 = v337;
                if ((_DWORD)v338)
                {
                  v339 = (uint64_t *)*v444;
                  v340 = *(_QWORD **)v334;
                  v341 = v338;
                  do
                  {
                    v342 = *v339++;
                    *v340++ &= v342;
                    --v341;
                  }
                  while (v341);
                }
                if (v336 > v337)
                {
                  v343 = *(_QWORD **)v334;
                  do
                  {
                    v343[v338] = 0;
                    LODWORD(v338) = v338 + 1;
                  }
                  while (v336 != (_DWORD)v338);
                }
                v344 = sub_1C476B7EC(v334);
                if (v344 == -1)
                {
LABEL_595:
                  v334 += 72;
                  v335 = v440;
                  continue;
                }
                break;
              }
              v345 = v344;
              *(_QWORD *)(a1 + 2416) = *(_QWORD *)(a1 + 2408);
              v346 = *(_QWORD *)(a1 + 2384);
              v347 = *(unsigned int *)(a1 + 2400);
              if ((_DWORD)v347)
              {
                LODWORD(v348) = (v347 - 1) & (37 * v344);
                v349 = (int *)(v346 + 8 * v348);
                v350 = *v349;
                if (v344 == *v349)
                  goto LABEL_516;
                v409 = 1;
                while (v350 != -1)
                {
                  v410 = v348 + v409++;
                  v348 = v410 & (v347 - 1);
                  v350 = *(_DWORD *)(v346 + 8 * v348);
                  if (v344 == v350)
                  {
                    v349 = (int *)(v346 + 8 * v348);
                    goto LABEL_516;
                  }
                }
              }
              v349 = (int *)(v346 + 8 * v347);
LABEL_516:
              v351 = v344 >> 6;
              if ((int *)(v346 + 8 * v347) != v349)
              {
                v352 = v349[1];
                v353 = *v446;
                v354 = *v446 + 72 * v344;
                *(_QWORD *)&v455 = v456;
                *((_QWORD *)&v455 + 1) = 0x600000000;
                v355 = *(_DWORD *)(v354 + 8);
                if (&v455 == (__int128 *)v354 || v355 == 0)
                {
                  v355 = 0;
                  v357 = v456;
                }
                else
                {
                  v360 = *(_DWORD *)(v354 + 8);
                  v357 = v456;
                  if (v355 < 7
                    || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v455, (uint64_t)v456, *(unsigned int *)(v354 + 8), 8), v360 = *(_DWORD *)(v354 + 8), v357 = (_BYTE *)v455, v360))
                  {
                    memcpy(v357, *(const void **)v354, 8 * v360);
                    v357 = (_BYTE *)v455;
                  }
                  DWORD2(v455) = v355;
                }
                v361 = *(_DWORD *)(v353 + 72 * v345 + 64);
                v457 = v361;
                v362 = *(_QWORD *)(a1 + 2112);
                v363 = *(_DWORD *)(v362 + 8);
                if (v363 >= v355)
                  v364 = v355;
                else
                  v364 = v363;
                if ((_DWORD)v364)
                {
                  v365 = *(uint64_t **)v362;
                  v366 = v357;
                  v367 = v364;
                  do
                  {
                    v368 = *v365++;
                    *v366++ &= v368;
                    --v367;
                  }
                  while (v367);
                }
                if (v355 > v363)
                {
                  do
                  {
                    *(_QWORD *)&v357[8 * v364] = 0;
                    LODWORD(v364) = v364 + 1;
                  }
                  while (v355 != (_DWORD)v364);
                }
                v369 = *(_DWORD *)(a1 + 2248);
                if (v369 >= v355)
                  v370 = v355;
                else
                  v370 = v369;
                if ((_DWORD)v370)
                {
                  v371 = (uint64_t *)*v444;
                  v372 = v357;
                  v373 = v370;
                  do
                  {
                    v374 = *v371++;
                    *v372++ &= v374;
                    --v373;
                  }
                  while (v373);
                }
                if (v355 > v369)
                {
                  do
                  {
                    *(_QWORD *)&v357[8 * v370] = 0;
                    LODWORD(v370) = v370 + 1;
                  }
                  while (v355 != (_DWORD)v370);
                }
                *(_QWORD *)&v357[8 * v351] |= 1 << v345;
                v375 = sub_1C476BA0C(&v455, 0, v361, 1u);
                if ((v375 + 1) >= 2)
                {
                  v376 = v375;
                  v377 = 1.0 / (double)v352;
                  do
                  {
                    v447 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + 272 * v376;
                    v378 = (float *)sub_1C6125254(v441, &v447);
                    v378[2] = v378[2] + v377;
                    v379 = *(float **)(a1 + 2320);
                    v380 = *(_QWORD *)(a1 + 2328);
                    if ((unint64_t)v379 >= v380)
                    {
                      v382 = *(float **)(a1 + 2312);
                      v383 = ((char *)v379 - (char *)v382) >> 4;
                      v384 = v383 + 1;
                      if ((unint64_t)(v383 + 1) >> 60)
                        goto LABEL_625;
                      v385 = v380 - (_QWORD)v382;
                      if (v385 >> 3 > v384)
                        v384 = v385 >> 3;
                      if ((unint64_t)v385 >= 0x7FFFFFFFFFFFFFF0)
                        v386 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v386 = v384;
                      if (v386 >> 60)
                        goto LABEL_624;
                      v387 = (char *)operator new(16 * v386);
                      v388 = (float *)&v387[16 * v383];
                      *(_QWORD *)v388 = v447;
                      v388[2] = v377;
                      if (v379 == v382)
                      {
                        v390 = &v387[16 * v383];
                      }
                      else
                      {
                        v389 = &v387[16 * v383];
                        do
                        {
                          v390 = v389 - 16;
                          *((_OWORD *)v389 - 1) = *((_OWORD *)v379 - 1);
                          v379 -= 4;
                          v389 -= 16;
                        }
                        while (v379 != v382);
                      }
                      *(_QWORD *)(a1 + 2312) = v390;
                      v381 = v388 + 4;
                      *(_QWORD *)(a1 + 2320) = v388 + 4;
                      *(_QWORD *)(a1 + 2328) = &v387[16 * v386];
                      if (v382)
                        operator delete(v382);
                    }
                    else
                    {
                      *(_QWORD *)v379 = v447;
                      v379[2] = v377;
                      v381 = v379 + 4;
                    }
                    *(_QWORD *)(a1 + 2320) = v381;
                    v376 = sub_1C476BA0C(&v455, v376 + 1, v457, 1u);
                  }
                  while ((v376 + 1) > 1);
                }
                if ((_BYTE *)v455 != v456)
                  free((void *)v455);
                goto LABEL_595;
              }
              if (v442 == (void **)v334)
                goto LABEL_576;
              v358 = *(unsigned int *)(v334 + 8);
              v359 = *(unsigned int *)(a1 + 2128);
              if (v359 >= v358)
              {
                if ((_DWORD)v358)
                  memmove(*v442, *(const void **)v334, 8 * v358);
                goto LABEL_575;
              }
              if (*(_DWORD *)(a1 + 2132) < v358)
              {
                *(_DWORD *)(a1 + 2128) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v442, v430, v358, 8);
              }
              else if ((_DWORD)v359)
              {
                memmove(*v442, *(const void **)v334, 8 * v359);
LABEL_573:
                v391 = *(unsigned int *)(v334 + 8);
                if (v359 != v391)
                  memcpy((char *)*v442 + 8 * v359, (const void *)(*(_QWORD *)v334 + 8 * v359), *(_QWORD *)v334 + 8 * v391 - (*(_QWORD *)v334 + 8 * v359));
LABEL_575:
                *(_DWORD *)(a1 + 2128) = v358;
LABEL_576:
                *(_DWORD *)(a1 + 2184) = *(_DWORD *)(v334 + 64);
                *(_QWORD *)(*(_QWORD *)(a1 + 2120) + 8 * v351) &= ~(1 << v345);
                v392 = sub_1C483E3AC((_QWORD *)a1, v345, v334);
                v393 = *(_QWORD **)(a1 + 2408);
                v394 = *(_QWORD **)(a1 + 2416);
                if (v393 != v394)
                {
                  v395 = 1.0 / (double)v392;
                  while (1)
                  {
                    *(_QWORD *)&v455 = 0;
                    *(_QWORD *)&v455 = *v393;
                    v396 = (float *)sub_1C6125254(v441, &v455);
                    v396[2] = v396[2] + v395;
                    v397 = *(float **)(a1 + 2320);
                    v398 = *(_QWORD *)(a1 + 2328);
                    if ((unint64_t)v397 >= v398)
                    {
                      v400 = *(float **)(a1 + 2312);
                      v401 = ((char *)v397 - (char *)v400) >> 4;
                      v402 = v401 + 1;
                      if ((unint64_t)(v401 + 1) >> 60)
LABEL_625:
                        abort();
                      v403 = v398 - (_QWORD)v400;
                      if (v403 >> 3 > v402)
                        v402 = v403 >> 3;
                      if ((unint64_t)v403 >= 0x7FFFFFFFFFFFFFF0)
                        v404 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v404 = v402;
                      if (v404 >> 60)
                        goto LABEL_624;
                      v405 = (char *)operator new(16 * v404);
                      v406 = (float *)&v405[16 * v401];
                      *(_QWORD *)v406 = v455;
                      v406[2] = v395;
                      if (v397 == v400)
                      {
                        v408 = &v405[16 * v401];
                      }
                      else
                      {
                        v407 = &v405[16 * v401];
                        do
                        {
                          v408 = v407 - 16;
                          *((_OWORD *)v407 - 1) = *((_OWORD *)v397 - 1);
                          v397 -= 4;
                          v407 -= 16;
                        }
                        while (v397 != v400);
                      }
                      *(_QWORD *)(a1 + 2312) = v408;
                      v399 = v406 + 4;
                      *(_QWORD *)(a1 + 2320) = v406 + 4;
                      *(_QWORD *)(a1 + 2328) = &v405[16 * v404];
                      if (v400)
                        operator delete(v400);
                    }
                    else
                    {
                      *(_QWORD *)v397 = v455;
                      v397[2] = v395;
                      v399 = v397 + 4;
                    }
                    *(_QWORD *)(a1 + 2320) = v399;
                    if (++v393 == v394)
                      goto LABEL_595;
                  }
                }
                goto LABEL_595;
              }
              v359 = 0;
              goto LABEL_573;
            }
            v289 = 0;
            goto LABEL_437;
          }
          v411 = *(_QWORD *)(a1 + 2312);
          v412 = *(_QWORD *)(a1 + 2320);
          while (v411 != v412)
          {
            v413 = *(float *)(v411 + 8);
            v414 = (float *)sub_1C6125254(v441, (_QWORD *)v411);
            v414[2] = v413 + v414[2];
            v411 += 16;
          }
        }
      }
LABEL_424:
      v278 += 8;
      if (v278 == v434)
        goto LABEL_606;
    }
  }
LABEL_211:
  if (v448 != v450)
    free(v448);
}

double sub_1C483B8B8(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  llvm::SUnit **v4;
  llvm::SUnit **v5;
  llvm::SUnit *v6;
  llvm::SUnit **v7;
  llvm::SUnit **v8;
  llvm::SUnit *v9;
  llvm::SUnit **v10;
  llvm::SUnit **v11;
  llvm::SUnit *v12;
  llvm::SUnit **v13;
  llvm::SUnit **v14;
  llvm::SUnit *v15;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  double result;

  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v2 + 580) & 1) == 0)
    llvm::SUnit::ComputeDepth((llvm::SUnit *)(v2 + 344));
  v3 = *(_DWORD *)(v2 + 584);
  v4 = *(llvm::SUnit ***)(a1 + 256);
  v5 = *(llvm::SUnit ***)(a1 + 264);
  while (v4 != v5)
  {
    v6 = *v4;
    if ((*((_BYTE *)*v4 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(*v4);
    if (*((_DWORD *)v6 + 60) > v3)
    {
      v3 = *((_DWORD *)v6 + 60);
      if ((*((_BYTE *)v6 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(v6);
        v3 = *((_DWORD *)v6 + 60);
      }
    }
    ++v4;
  }
  v7 = *(llvm::SUnit ***)(a1 + 312);
  v8 = *(llvm::SUnit ***)(a1 + 320);
  while (v7 != v8)
  {
    v9 = *v7;
    if ((*((_BYTE *)*v7 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(*v7);
    if (*((_DWORD *)v9 + 60) > v3)
    {
      v3 = *((_DWORD *)v9 + 60);
      if ((*((_BYTE *)v9 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(v9);
        v3 = *((_DWORD *)v9 + 60);
      }
    }
    ++v7;
  }
  v10 = *(llvm::SUnit ***)(a1 + 368);
  v11 = *(llvm::SUnit ***)(a1 + 376);
  while (v10 != v11)
  {
    v12 = *v10;
    if ((*((_BYTE *)*v10 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(*v10);
    if (*((_DWORD *)v12 + 60) > v3)
    {
      v3 = *((_DWORD *)v12 + 60);
      if ((*((_BYTE *)v12 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(v12);
        v3 = *((_DWORD *)v12 + 60);
      }
    }
    ++v10;
  }
  v13 = *(llvm::SUnit ***)(a1 + 424);
  v14 = *(llvm::SUnit ***)(a1 + 432);
  while (v13 != v14)
  {
    v15 = *v13;
    if ((*((_BYTE *)*v13 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(*v13);
    if (*((_DWORD *)v15 + 60) > v3)
    {
      v3 = *((_DWORD *)v15 + 60);
      if ((*((_BYTE *)v15 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(v15);
        v3 = *((_DWORD *)v15 + 60);
      }
    }
    ++v13;
  }
  v16 = *(float *)(a1 + 1944);
  v17 = 0.0;
  v18 = 0.0;
  if (v16 > 0.0)
    v18 = (float)(v3 + 30 * *(_DWORD *)(a1 + 1948)) / (float)(v16 * 32.0);
  if ((float)(v18 - (float)(int)v18) != 0.0)
    v17 = 1.0;
  v19 = (float)(v18 + v17);
  if (v19 <= 1)
    v19 = 1;
  if (v19 >= 0x20)
    v19 = 32;
  v20 = 8 * (0x70 / v19);
  if (v20 >= 0xF8)
    v20 = 248;
  v21 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 1936) = v20 * v21;
  *(_DWORD *)(a1 + 1940) = 32 * v21;
  result = 0.0;
  *(_OWORD *)(a1 + 2032) = 0u;
  return result;
}

uint64_t sub_1C483BAC4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  unsigned int v3;
  float v4;
  unsigned int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  llvm::SmallPtrSetImplBase *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  llvm *UnderlyingObject;
  int8x8_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  int i;
  uint64_t v62;
  unsigned __int16 *v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int16 *v73;
  int v74;
  BOOL v76;
  uint64_t *v77;
  char v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  char v84;
  uint64_t v85;
  unsigned __int16 *v86;
  int v87;
  char v88;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  unsigned __int16 *v103;
  int v104;
  BOOL v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  _BOOL4 v119;
  uint64_t v120;
  uint64_t v121;
  _BOOL4 v122;
  unsigned int v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  uint64_t v130;
  unint64_t *v131;
  _QWORD *v132;
  _BYTE *v133;
  const llvm::SUnit *v134;
  _QWORD *v135;
  const llvm::SUnit *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  _BOOL4 IsReachable;
  _QWORD *v141;
  const llvm::SUnit *v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  int v146;
  unint64_t *v147;
  unint64_t v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  __n128 v152;
  unsigned __int16 *v153;
  uint64_t v154;
  unsigned int v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t result;
  uint64_t v162;
  _QWORD *v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  void *v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  int v176;
  char v177;
  __int16 v178;
  char v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int16 v188;
  int v189;
  char v190;
  __int16 v191;
  char v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int16 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int16 v201;
  int v202;
  char v203;
  __int16 v204;
  char v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int16 v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  __int16 v214;
  int v215;
  char v216;
  char v217;
  char v218;
  __int16 v219;
  char v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int16 v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t v228;
  int v229;
  _BYTE v230[128];
  const llvm::SUnit *v231;
  void *v232;
  uint64_t v233;
  int v234;
  _BYTE v235[128];
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  _QWORD v241[18];

  v2 = a1;
  v241[16] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 256) == *(_QWORD *)(a1 + 264)
    && *(_QWORD *)(a1 + 312) == *(_QWORD *)(a1 + 320)
    && *(_QWORD *)(a1 + 368) == *(_QWORD *)(a1 + 376)
    && *(_QWORD *)(a1 + 424) == *(_QWORD *)(a1 + 432))
  {
    return 0;
  }
  *a2 = 0;
  v211 = 0;
  v212 = 0;
  v213 = -4294967271;
  v214 = 0;
  v215 = 0;
  v218 = 0;
  v219 = 0;
  v220 = 0;
  v221 = 0x7FFFFFFF;
  v222 = -1;
  v223 = -1;
  v224 = -1;
  v225 = 0;
  v198 = 0;
  v199 = 0;
  v200 = -4294967271;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0x7FFFFFFF;
  v207 = -1;
  v208 = -1;
  v209 = -1;
  v210 = 0;
  v185 = 0;
  v186 = 0;
  v187 = -4294967271;
  v188 = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0;
  v193 = 0x7FFFFFFF;
  v194 = -1;
  v195 = -1;
  v196 = -1;
  v197 = 0;
  v172 = 0;
  v173 = 0;
  v174 = -4294967271;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0x7FFFFFFF;
  v181 = -1;
  v182 = -1;
  v183 = -1;
  v184 = 0;
  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 4912) + 4 * *(unsigned int *)(a1 + 64));
  v4 = (float)v3;
  v5 = *(_DWORD *)(a1 + 1936);
  *(_BYTE *)(a1 + 1048) = (float)(*(float *)(a1 + 2432) * (float)v5) <= (float)v3;
  v168 = v3;
  if (v3 > v5)
    v5 = v3;
  *(_DWORD *)(a1 + 1936) = v5;
  v7 = *(void **)(a1 + 456);
  v6 = *(void **)(a1 + 464);
  if (v6 != v7)
  {
    v130 = *(unsigned int *)(v2 + 472);
    if (v130 >= 0x21 && 4 * (*(_DWORD *)(v2 + 476) - *(_DWORD *)(v2 + 480)) < v130)
    {
      v162 = v2;
      v163 = (_QWORD *)(v2 + 476);
      free(v6);
      v164 = *(_DWORD *)(v162 + 476) - *(_DWORD *)(v162 + 480);
      v165 = 1 << (33 - __clz(v164 - 1));
      if (v164 <= 0x10)
        v166 = 32;
      else
        v166 = v165;
      *(_DWORD *)(v162 + 472) = v166;
      *v163 = 0;
      v167 = malloc_type_malloc(8 * v166, 0x4065EBACuLL);
      if (!v167)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *(_QWORD *)(v162 + 464) = v167;
      memset(v167, 255, 8 * *(unsigned int *)(v162 + 472));
      v2 = v162;
      goto LABEL_9;
    }
    memset(v6, 255, 8 * v130);
  }
  *(_QWORD *)(v2 + 476) = 0;
LABEL_9:
  v8 = *(_QWORD *)(v2 + 560);
  v9 = 568;
  if (v8 == *(_QWORD *)(v2 + 552))
    v9 = 572;
  v10 = *(unsigned int *)(v2 + v9);
  v171 = v2;
  v169 = *(_DWORD *)(v2 + 572) - *(_DWORD *)(v2 + 576);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = *(uint64_t **)(v2 + 560);
    while ((unint64_t)*v12 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v12;
      v11 -= 8;
      if (!v11)
        goto LABEL_111;
    }
  }
  else
  {
    v12 = *(uint64_t **)(v2 + 560);
  }
  v13 = (_QWORD *)(v8 + 8 * v10);
  if (v12 != v13)
  {
    v14 = (llvm::SmallPtrSetImplBase *)(v2 + 456);
    v15 = v2 + 88;
    v16 = *v12;
    if (*v12)
      goto LABEL_19;
    while (1)
    {
LABEL_33:
      v2 = v171;
      if ((sub_1C484059C(v16, *(_QWORD *)(v171 + 2040)) & 1) != 0)
        goto LABEL_103;
      v23 = *(_QWORD **)(v16 + 8);
      v24 = *(_QWORD *)(v23[2] + 16);
      if ((*(_BYTE *)(v16 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v16);
      v25 = *(_DWORD *)(v16 + 240);
      if ((v24 & 0x20) == 0
        || (v26 = *(unsigned __int8 *)(v23[2] + 4), v27 = v23[4], *(_BYTE *)(v27 + 32 * v26) != 7))
      {
        if ((v24 & 0x100) == 0)
          goto LABEL_102;
        v35 = v23[6];
        if (v35 < 8)
          goto LABEL_102;
        if ((v35 & 7) != 0)
        {
          v36 = (_DWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
          v37 = (v23[6] & 7) != 3 || v36 == 0;
          if (v37 || !*v36)
            goto LABEL_102;
        }
        else
        {
          v35 &= 0xFFFFFFFFFFFFFFF8;
          v23[6] = v35;
        }
        if ((v35 & 7) != 0)
        {
          v41 = *(uint64_t **)((v35 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v41 = (uint64_t *)(v35 & 0xFFFFFFFFFFFFFFF8);
          v23[6] = v41;
        }
        v42 = *v41;
        if ((v42 & 4) != 0)
          goto LABEL_102;
        if ((v42 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_102;
        UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v42 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
        if (!UnderlyingObject)
          goto LABEL_102;
        v44 = *(int8x8_t *)(v171 + 1120);
        if (!*(_QWORD *)&v44)
          goto LABEL_102;
        v45 = 0x9DDFEA08EB382D69
            * (((8 * (_DWORD)UnderlyingObject) + 8) ^ ((unint64_t)UnderlyingObject >> 32));
        v46 = 0x9DDFEA08EB382D69 * (((unint64_t)UnderlyingObject >> 32) ^ (v45 >> 47) ^ v45);
        v47 = 0x9DDFEA08EB382D69 * (v46 ^ (v46 >> 47));
        v48 = (uint8x8_t)vcnt_s8(v44);
        v48.i16[0] = vaddlv_u8(v48);
        if (v48.u32[0] <= 1uLL)
          v49 = (*(_QWORD *)&v44 - 1) & v47;
        else
          v49 = v47 < *(_QWORD *)&v44 ? v47 : v47 % *(_QWORD *)&v44;
        v50 = *(uint64_t ***)(*(_QWORD *)(v171 + 1112) + 8 * v49);
        if (!v50)
          goto LABEL_102;
        v51 = *v50;
        if (!*v50)
          goto LABEL_102;
        while (1)
        {
          v52 = v51[1];
          if (v52 == v47)
          {
            if ((llvm *)v51[2] == UnderlyingObject)
            {
              v53 = v51;
              do
                v53 = (uint64_t *)*v53;
              while (v53 && (llvm *)v53[2] == UnderlyingObject);
              while (1)
              {
                if (v51 == v53)
                  goto LABEL_102;
                v54 = v51[3];
                v55 = v54;
                if ((*(_BYTE *)(v54 + 236) & 1) == 0)
                {
                  llvm::SUnit::ComputeDepth((llvm::SUnit *)v51[3]);
                  v55 = v51[3];
                }
                if (*(_DWORD *)(v54 + 240) + *(unsigned __int16 *)(v55 + 226) >= v25)
                  goto LABEL_101;
                v51 = (uint64_t *)*v51;
              }
            }
          }
          else
          {
            if (v48.u32[0] <= 1uLL)
            {
              v52 &= *(_QWORD *)&v44 - 1;
            }
            else if (v52 >= *(_QWORD *)&v44)
            {
              v52 %= *(_QWORD *)&v44;
            }
            if (v52 != v49)
              goto LABEL_102;
          }
          v51 = (uint64_t *)*v51;
          if (!v51)
            goto LABEL_102;
        }
      }
      v28 = *(int8x8_t *)(v171 + 1080);
      if (!*(_QWORD *)&v28)
        goto LABEL_102;
      v29 = *(unsigned int *)(v27 + 32 * v26 + 4);
      v30 = (uint8x8_t)vcnt_s8(v28);
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.u32[0] <= 1uLL)
      {
        v31 = (v28.i32[0] - 1) & v29;
      }
      else
      {
        v31 = v29;
        if (*(_QWORD *)&v28 <= v29)
          v31 = v29 % *(_QWORD *)&v28;
      }
      v32 = *(uint64_t ***)(*(_QWORD *)(v171 + 1072) + 8 * v31);
      if (!v32)
        goto LABEL_102;
      v33 = *v32;
      if (!*v32)
        goto LABEL_102;
      while (1)
      {
        v34 = v33[1];
        if (v34 == v29)
          break;
        if (v30.u32[0] > 1uLL)
        {
          if (v34 >= *(_QWORD *)&v28)
            v34 %= *(_QWORD *)&v28;
        }
        else
        {
          v34 &= *(_QWORD *)&v28 - 1;
        }
        if (v34 != v31)
          goto LABEL_102;
LABEL_52:
        v33 = (uint64_t *)*v33;
        if (!v33)
          goto LABEL_102;
      }
      if (*((_DWORD *)v33 + 4) != (_DWORD)v29)
        goto LABEL_52;
      v38 = (uint64_t *)*v33;
      while (v33 != v38)
      {
        v39 = v33[3];
        v40 = v39;
        if ((*(_BYTE *)(v39 + 236) & 1) == 0)
        {
          llvm::SUnit::ComputeDepth((llvm::SUnit *)v33[3]);
          v40 = v33[3];
        }
        if (*(_DWORD *)(v39 + 240) + *(unsigned __int16 *)(v40 + 226) >= v25)
          goto LABEL_101;
        v33 = (uint64_t *)*v33;
      }
LABEL_102:
      v2 = v171;
LABEL_103:
      v56 = (unint64_t *)(v12 + 1);
      do
      {
        if (v56 == v13)
          goto LABEL_111;
        v57 = *v56++;
        v16 = v57;
      }
      while (v57 > 0xFFFFFFFFFFFFFFFDLL);
      v12 = (uint64_t *)(v56 - 1);
      if (!v16)
        continue;
LABEL_19:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 16) + 16) & 0x20) != 0)
      {
        v17 = *(unsigned int *)(v16 + 40);
        if ((_DWORD)v17)
        {
          v18 = *(_QWORD **)(v16 + 32);
          v19 = 16 * v17;
          while (1)
          {
            v20 = *v18 & 0xFFFFFFFFFFFFFFF8;
            if ((*v18 & 6) == 0 && v20 != 0)
            {
              v22 = *(_QWORD *)(v20 + 8);
              if (v22)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v22 + 16) + 17) & 2) != 0
                  && (*(_DWORD *)(sub_1C4840470(v15, v20) + 8) + 1) > 1)
                {
                  break;
                }
              }
            }
            v18 += 2;
            v19 -= 16;
            if (!v19)
              goto LABEL_33;
          }
LABEL_101:
          sub_1C4774094(v14, v16);
          --v169;
          goto LABEL_102;
        }
      }
    }
  }
LABEL_111:
  *(_BYTE *)(v2 + 1052) = 0;
  v231 = (const llvm::SUnit *)v235;
  v232 = v235;
  v233 = 16;
  v234 = 0;
  v226 = (uint64_t *)v230;
  v227 = (uint64_t *)v230;
  v228 = 16;
  v229 = 0;
  v58 = v2;
  v59 = *(uint64_t **)(v2 + 256);
  v60 = *(uint64_t **)(v58 + 264);
  for (i = -1; v59 != v60; ++v59)
  {
    v62 = *v59;
    v63 = *(unsigned __int16 **)(*(_QWORD *)(*v59 + 8) + 16);
    v64 = *v63;
    v65 = v64 - 9;
    if (v64 - 9 > 0x3C)
      goto LABEL_334;
    if (((1 << v65) & 0x404) != 0)
      goto LABEL_131;
    if (((1 << v65) & 0x1000000000000201) == 0)
    {
LABEL_334:
      if (*v63)
      {
        v66 = *((_QWORD *)v63 + 1);
        if ((v66 & 0x10) != 0 || (v63[8] & 1) != 0)
        {
          if (v64 > 0x13)
            goto LABEL_129;
          if (((1 << v64) & 0x80800) != 0)
            goto LABEL_131;
          if (((1 << v64) & 0x40201) == 0)
          {
LABEL_129:
            if ((v66 & 0x10) == 0 || (v64 != 19 ? (v67 = v64 == 11) : (v67 = 1), v67))
            {
LABEL_131:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v231, *v59);
              if ((*(_BYTE *)(v62 + 236) & 1) == 0)
                llvm::SUnit::ComputeDepth((llvm::SUnit *)v62);
              v68 = HIDWORD(v233) - v234;
              if ((HIDWORD(v233) - v234) > 7)
                goto LABEL_235;
              v69 = *(unsigned int *)(v62 + 40);
              if ((_DWORD)v69)
              {
                v70 = *(_QWORD **)(v62 + 32);
                v71 = 16 * v69;
                do
                {
                  v72 = *v70 & 0xFFFFFFFFFFFFFFF8;
                  if ((*(_BYTE *)(v72 + 236) & 1) == 0)
                    llvm::SUnit::ComputeDepth((llvm::SUnit *)(*v70 & 0xFFFFFFFFFFFFFFF8));
                  v73 = *(unsigned __int16 **)(*(_QWORD *)(v72 + 8) + 16);
                  v74 = *v73;
                  v76 = (v74 - 9) <= 0x3C
                     && ((1 << (v74 - 9)) & 0x1000000000000605) != 0
                     || v74 == 0;
                  if (v76 || (v73[4] & 0x10) != 0 || (v73[8] & 1) != 0)
                  {
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v226, v72);
                  }
                  else if (i <= *(_DWORD *)(v72 + 240) + *(unsigned __int16 *)(v72 + 226))
                  {
                    i = *(_DWORD *)(v72 + 240) + *(unsigned __int16 *)(v72 + 226);
                  }
                  v70 += 2;
                  v71 -= 16;
                }
                while (v71);
              }
            }
          }
        }
        else
        {
          if ((*(_BYTE *)(v62 + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth((llvm::SUnit *)*v59);
          if (i <= *(_DWORD *)(v62 + 240) + *(unsigned __int16 *)(v62 + 226))
            i = *(_DWORD *)(v62 + 240) + *(unsigned __int16 *)(v62 + 226);
        }
      }
    }
  }
  v170 = 0;
  v77 = &v238;
  v78 = 1;
  while ((v78 & 1) != 0)
  {
    v239 = v241;
    v240 = 0x1000000000;
    v236 = v77;
    v237 = 0x1000000000;
    if (v227 == v226)
      v79 = (uint64_t *)((char *)&v228 + 4);
    else
      v79 = &v228;
    v80 = *(unsigned int *)v79;
    if ((_DWORD)v80)
    {
      v81 = 8 * v80;
      v82 = v227;
      while ((unint64_t)*v82 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v82;
        v81 -= 8;
        if (!v81)
          goto LABEL_215;
      }
    }
    else
    {
      v82 = v227;
    }
    v83 = (char *)&v227[v80];
    if (v82 == (uint64_t *)v83)
    {
LABEL_215:
      v84 = 0;
      goto LABEL_224;
    }
    v84 = 0;
    v85 = *v82;
LABEL_165:
    v86 = *(unsigned __int16 **)(*(_QWORD *)(v85 + 8) + 16);
    v87 = *v86;
    v88 = v87 - 9;
    if ((v87 - 9) <= 0x3C)
    {
      if (((1 << v88) & 0x404) != 0)
        goto LABEL_175;
      if (((1 << v88) & 0x1000000000000201) != 0)
        goto LABEL_211;
    }
    if (!*v86)
      goto LABEL_211;
    if ((v86[4] & 0x10) != 0 && v87 != 19 && v87 != 11)
      goto LABEL_211;
LABEL_175:
    v90 = (uint64_t)v77;
    v91 = *(unsigned int *)(v85 + 120);
    if ((_DWORD)v91)
    {
      v92 = *(_QWORD **)(v85 + 112);
      v93 = 16 * v91;
      while (1)
      {
        v94 = *v92 & 0xFFFFFFFFFFFFFFF8;
        if ((*v92 & 6) == 0 && (*(_WORD *)(v94 + 228) & 0x400) == 0)
        {
          v96 = sub_1C477672C((uint64_t)&v231, v94);
          v97 = v232 == v231 ? (uint64_t *)((char *)&v233 + 4) : &v233;
          if (v96 == (_QWORD *)((char *)v232 + 8 * *(unsigned int *)v97))
            break;
        }
        v92 += 2;
        v93 -= 16;
        if (!v93)
          goto LABEL_187;
      }
      v77 = (uint64_t *)v90;
LABEL_211:
      v108 = (unint64_t *)(v82 + 1);
      while (v108 != (unint64_t *)v83)
      {
        v109 = *v108++;
        v85 = v109;
        if (v109 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v82 = (uint64_t *)(v108 - 1);
          goto LABEL_165;
        }
      }
      if ((_DWORD)v240)
      {
        v110 = v239;
        v111 = 8 * v240;
        do
        {
          v112 = (char *)sub_1C477672C((uint64_t)&v226, *v110);
          if (v227 == v226)
            v113 = (uint64_t *)((char *)&v228 + 4);
          else
            v113 = &v228;
          if (v112 != (char *)&v227[*(unsigned int *)v113])
          {
            *(_QWORD *)v112 = -2;
            ++v229;
          }
          ++v110;
          v111 -= 8;
        }
        while (v111);
      }
LABEL_224:
      if ((_DWORD)v237)
      {
        v114 = (uint64_t *)v236;
        v115 = 8 * v237;
        do
        {
          v116 = *v114++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v226, v116);
          v115 -= 8;
        }
        while (v115);
      }
      v117 = 1;
      goto LABEL_228;
    }
LABEL_187:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v231, v85);
    v98 = v240;
    if (v240 >= (unint64_t)HIDWORD(v240))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v239, (uint64_t)v241, v240 + 1, 8);
      v98 = v240;
    }
    v77 = (uint64_t *)v90;
    v239[v98] = v85;
    LODWORD(v240) = v240 + 1;
    v99 = *(unsigned int *)(v85 + 40);
    if ((_DWORD)v99)
    {
      v100 = *(_QWORD **)(v85 + 32);
      v101 = 16 * v99;
      do
      {
        v102 = *v100 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_BYTE *)(v102 + 236) & 1) == 0)
          llvm::SUnit::ComputeDepth((llvm::SUnit *)(*v100 & 0xFFFFFFFFFFFFFFF8));
        v103 = *(unsigned __int16 **)(*(_QWORD *)(v102 + 8) + 16);
        v104 = *v103;
        v106 = (v104 - 9) <= 0x3C && ((1 << (v104 - 9)) & 0x1000000000000605) != 0
            || v104 == 0;
        if (v106 || (v103[4] & 0x10) != 0 || (v103[8] & 1) != 0)
        {
          v107 = v237;
          if (v237 >= (unint64_t)HIDWORD(v237))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v236, v90, v237 + 1, 8);
            v107 = v237;
          }
          *((_QWORD *)v236 + v107) = v102;
          LODWORD(v237) = v237 + 1;
        }
        else if (i <= *(_DWORD *)(v102 + 240) + *(unsigned __int16 *)(v102 + 226))
        {
          i = *(_DWORD *)(v102 + 240) + *(unsigned __int16 *)(v102 + 226);
        }
        v100 += 2;
        v101 -= 16;
      }
      while (v101);
    }
    v84 = 1;
    if ((HIDWORD(v233) - v234) <= 7)
      goto LABEL_211;
    v117 = 0;
    v170 = HIDWORD(v233) - v234;
LABEL_228:
    if (v236 != v77)
      free(v236);
    if (v239 != v241)
      free(v239);
    v78 = v84;
    if ((v117 & 1) == 0)
      goto LABEL_236;
  }
  v68 = HIDWORD(v233) - v234;
LABEL_235:
  v170 = v68;
LABEL_236:
  if (v227 != v226)
    free(v227);
  v118 = v171;
  if (v232 != v231)
    free(v232);
  v119 = v170 > 7;
  *(_BYTE *)(v171 + 1052) = v119;
  v120 = *(_QWORD *)(v171 + 2032);
  if (v120
    && i == -1
    && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v120 + 8) + 24) + 72)
       - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v120 + 8) + 24) + 64)) & 0x7FFFFFFF8) != 0)
  {
    v119 = 1;
    *(_BYTE *)(v171 + 1052) = 1;
  }
  v121 = v171 + 224;
  if (!*(_BYTE *)(v171 + 1050))
  {
    v123 = *(_DWORD *)(v171 + 1928);
    if (v169 >= v123)
    {
      v122 = *(_DWORD *)(v171 + 572) - (v169 + *(_DWORD *)(v171 + 576)) + *(_DWORD *)(v171 + 1064) >= v123 && v119;
      goto LABEL_255;
    }
LABEL_248:
    v122 = 0;
LABEL_255:
    *(_BYTE *)(v171 + 1050) = v122;
    goto LABEL_256;
  }
  if (!v169)
    goto LABEL_248;
  v122 = 1;
LABEL_256:
  *(_BYTE *)(v171 + 1051) = v119;
  if (!v122 && !v119 && *(_DWORD *)(v171 + 1064) && v169)
  {
    v125 = *(_QWORD *)(v171 + 560);
    v126 = 568;
    if (v125 == *(_QWORD *)(v171 + 552))
      v126 = 572;
    v127 = *(unsigned int *)(v171 + v126);
    if ((_DWORD)v127)
    {
      v128 = 8 * v127;
      v129 = *(unint64_t **)(v171 + 560);
      while (*v129 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v129;
        v128 -= 8;
        if (!v128)
          goto LABEL_296;
      }
    }
    else
    {
      v129 = *(unint64_t **)(v171 + 560);
    }
    v131 = (unint64_t *)(v125 + 8 * v127);
    if (v129 == v131)
    {
LABEL_296:
      v149 = 1;
LABEL_297:
      v118 = v171;
    }
    else
    {
      v132 = (_QWORD *)(v171 + 1128);
      v133 = (_BYTE *)(v171 + 1152);
      v134 = (const llvm::SUnit *)*v129;
LABEL_272:
      v135 = v132;
      while (1)
      {
        v132 = (_QWORD *)*v132;
        if (!v132)
          break;
        v136 = (const llvm::SUnit *)v132[3];
        v137 = sub_1C6134D3C((uint64_t)v133, (uint64_t)v134, (uint64_t)v136);
        if ((*v133 & 1) != 0)
        {
          v138 = v171 + 1160;
          v139 = 32;
        }
        else
        {
          v138 = *(_QWORD *)(v171 + 1160);
          v139 = *(_DWORD *)(v171 + 1168);
        }
        if (v138 + 24 * v139 == v137)
        {
          IsReachable = llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)(*(_QWORD *)(v171 + 8) + 2120), v134, v136);
          v231 = v134;
          v232 = v136;
          LOBYTE(v233) = IsReachable;
          sub_1C6134EA4((uint64_t)&v226, (uint64_t)v133, (uint64_t *)&v231, &v233);
          if (IsReachable)
          {
LABEL_325:
            v149 = 0;
            goto LABEL_297;
          }
        }
        else if (*(_BYTE *)(v137 + 16))
        {
          goto LABEL_325;
        }
      }
      v141 = (_QWORD *)(v171 + 1088);
      while (1)
      {
        v141 = (_QWORD *)*v141;
        if (!v141)
          break;
        v142 = (const llvm::SUnit *)v141[3];
        v143 = sub_1C6134D3C((uint64_t)v133, (uint64_t)v134, (uint64_t)v142);
        if ((*v133 & 1) != 0)
        {
          v144 = v171 + 1160;
          v145 = 32;
        }
        else
        {
          v144 = *(_QWORD *)(v171 + 1160);
          v145 = *(_DWORD *)(v171 + 1168);
        }
        if (v144 + 24 * v145 == v143)
        {
          v146 = llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)(*(_QWORD *)(v171 + 8) + 2120), v134, v142);
          v231 = v134;
          v232 = v142;
          LOBYTE(v233) = v146;
          sub_1C6134EA4((uint64_t)&v226, (uint64_t)v133, (uint64_t *)&v231, &v233);
        }
        else
        {
          v146 = *(unsigned __int8 *)(v143 + 16);
        }
        if (v146)
          goto LABEL_325;
      }
      v147 = v129 + 1;
      v118 = v171;
      v132 = v135;
      while (v147 != v131)
      {
        v148 = *v147++;
        v134 = (const llvm::SUnit *)v148;
        if (v148 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v129 = v147 - 1;
          goto LABEL_272;
        }
      }
      v149 = 1;
    }
    *(_BYTE *)(v118 + 1051) |= v149;
  }
  v150 = *(_DWORD *)(v118 + 1940);
  *(_BYTE *)(v118 + 1049) = (float)(*(float *)(v118 + 2436) * (float)v150) <= v4;
  if (v168 > v150)
    v150 = v168;
  *(_DWORD *)(v118 + 1940) = v150;
  v151 = v118 + 280;
  sub_1C483E69C(v118, v118 + 280, (uint64_t)&v198);
  sub_1C483E69C(v118, v118 + 336, (uint64_t)&v185);
  sub_1C483E69C(v118, v118 + 392, (uint64_t)&v172);
  sub_1C483E69C(v118, v121, (uint64_t)&v211);
  if (v173)
  {
    LODWORD(v174) = 25;
    LODWORD(v187) = 25;
    v152 = sub_1C483F0CC(v118, (uint64_t)&v185, (uint64_t)&v172, v121, v152);
  }
  if (v186)
  {
    LODWORD(v187) = 25;
    LODWORD(v200) = 25;
    v152 = sub_1C483F0CC(v118, (uint64_t)&v198, (uint64_t)&v185, v121, v152);
  }
  if (v199)
  {
    LODWORD(v200) = 25;
    LODWORD(v213) = 25;
    sub_1C483F0CC(v118, (uint64_t)&v211, (uint64_t)&v198, v121, v152);
  }
  v153 = *(unsigned __int16 **)(*(_QWORD *)(v212 + 8) + 16);
  v154 = *((_QWORD *)v153 + 2);
  if ((v154 & 0x200) == 0)
  {
    v151 = v118 + 336;
    if ((v154 & 0x20) == 0)
    {
      v155 = *v153;
      v151 = v118 + 392;
      if (v155 >> 1 != 5986)
      {
        if (sub_1C4840970(v155))
          v151 = v118 + 392;
        else
          v151 = v171 + 224;
      }
    }
  }
  v156 = v211;
  *(_DWORD *)(*v211 + 196) &= ~*(_DWORD *)v151;
  *v156 = *(_QWORD *)(*(_QWORD *)(v151 + 40) - 8);
  *(_QWORD *)(v151 + 40) -= 8;
  if (v216)
  {
    v157 = sub_1C477672C(v118 + 552, v212);
    v158 = *(_QWORD *)(v118 + 560);
    v159 = 568;
    if (v158 == *(_QWORD *)(v118 + 552))
      v159 = 572;
    if (v157 != (_QWORD *)(v158 + 8 * *(unsigned int *)(v118 + v159)))
    {
      *v157 = -2;
      ++*(_DWORD *)(v118 + 576);
    }
    *(int32x2_t *)(v118 + 1056) = vadd_s32(*(int32x2_t *)(v118 + 1056), (int32x2_t)0x100000001);
  }
  else if (v217)
  {
    ++*(_DWORD *)(v118 + 1060);
  }
  else
  {
    *(_QWORD *)(v118 + 1056) = 0;
  }
  v160 = *(_DWORD *)(v118 + 448) + sub_1C4840244(v118, (uint64_t)&v211);
  *(_DWORD *)(v118 + 448) = v160;
  result = v212;
  *(_DWORD *)(v212 + 252) = v160;
  return result;
}

uint64_t sub_1C483CBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  BOOL v29;
  uint64_t i;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  int v47;
  BOOL v49;
  unsigned __int16 *v50;
  int v51;
  BOOL v52;
  BOOL v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 2720);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6 == *(_QWORD *)(v5 + 16))
    v7 = 0;
  else
    v7 = *(_DWORD *)(v6 + 8 * *(unsigned int *)(a2 + 192) + 4);
  *(_QWORD *)(*(_QWORD *)(a1 + 976) + 8 * (v7 >> 6)) |= 1 << v7;
  v8 = *(_WORD **)(a2 + 24);
  if (!v8)
  {
    v8 = (_WORD *)(*(_QWORD *)(v4 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 6));
    if ((v8[4] & 0x1FFF) == 0x1FFE)
    {
      do
      {
        v59 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 808) + 200))(*(_QWORD *)(v4 + 808));
        v60 = *(_QWORD *)(v4 + 672);
      }
      while ((*(_WORD *)(v60 + 24 * v59 + 8) & 0x1FFF) == 0x1FFE);
      v8 = (_WORD *)(v60 + 24 * v59);
    }
    *(_QWORD *)(a2 + 24) = v8;
  }
  v9 = (unsigned __int16)v8[6];
  if (v8[6])
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v10 + 176) + 136) + 4 * (unsigned __int16)v8[5]);
    v12 = &v11[2 * v9];
    v13 = *(_QWORD *)(a1 + 880);
    v14 = *(_QWORD *)(v10 + 192);
    v15 = *(_QWORD *)(a1 + 800);
    do
    {
      v16 = *v11;
      *(_DWORD *)(v13 + 4 * v16) = *(_DWORD *)(a1 + 448);
      *(_DWORD *)(v15 + 4 * v16) -= *(_DWORD *)(v14 + 4 * v16) * v11[1];
      if (*(_DWORD *)(a1 + 960) == v16)
      {
        v17 = *(unsigned int *)(v10 + 48);
        if ((_DWORD)v17)
        {
          v18 = 0;
          v19 = *(_DWORD *)(v10 + 276);
          do
          {
            if (*(_DWORD *)(v15 + 4 * v18) - *(_DWORD *)(v15 + 4 * v16) >= v19)
            {
              *(_DWORD *)(a1 + 960) = v18;
              v16 = v18;
            }
            ++v18;
          }
          while (v17 != v18);
        }
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  v20 = *(_QWORD *)(a2 + 8);
  v21 = *(unsigned __int16 **)(v20 + 16);
  v22 = *((_QWORD *)v21 + 2);
  result = *v21;
  v24 = result - 9;
  if ((result - 9) <= 0x3C)
  {
    if (((1 << v24) & 0x404) != 0)
    {
LABEL_31:
      v29 = 0;
      goto LABEL_32;
    }
    if (((1 << v24) & 0x1000000000000201) != 0)
      return result;
  }
  if (!*v21)
    return result;
  if ((v21[4] & 0x10) != 0)
  {
    if ((_DWORD)result != 19)
      return result;
    goto LABEL_31;
  }
  v25 = v24 > 0x3C;
  v26 = (1 << v24) & 0x1000000000000601;
  v29 = (v25 || v26 == 0) && (_DWORD)result != 0 && (*((_QWORD *)v21 + 2) & 1) == 0;
LABEL_32:
  *(_BYTE *)(a1 + 964) = !v29;
  result = sub_1C48408F4(result, *(unsigned __int8 *)(a1 + 72));
  *(_BYTE *)(a1 + 965) = result;
  if (!v29 && (result & 1) == 0)
    *(_DWORD *)(a1 + 968) = *(_DWORD *)(a2 + 252);
  if (v29)
  {
    for (i = 0; i != 96; i += 48)
      *(_DWORD *)(a1 + 656 + i) = 0;
  }
  else
  {
    v31 = (*(_DWORD *)(a1 + 744) & 1) == 0;
    *(_DWORD *)(a1 + 744) = v31;
    v32 = a1 + 48 * v31;
    *(_DWORD *)(v32 + 656) = 0;
    v33 = v20;
    if ((*(_BYTE *)(v20 + 44) & 4) != 0)
    {
      v33 = v20;
      do
        v33 = *(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v33 + 44) & 4) != 0);
    }
    v34 = *(_QWORD *)(v20 + 24) + 48;
    v35 = *(_DWORD **)(v33 + 32);
    v36 = *(unsigned int *)(v33 + 40);
    v37 = &v35[8 * v36];
    if (!(_DWORD)v36)
    {
      v58 = *(_QWORD *)(v33 + 8);
      if (v58 == v34)
      {
        v33 = *(_QWORD *)(v20 + 24) + 48;
      }
      else
      {
        v33 = *(_QWORD *)(v20 + 24) + 48;
        if ((*(_WORD *)(v58 + 44) & 4) != 0)
        {
          do
          {
            v61 = v58;
            v62 = *(unsigned int *)(v58 + 40);
            if ((_DWORD)v62)
            {
              v33 = v58;
              goto LABEL_99;
            }
            v58 = *(_QWORD *)(v58 + 8);
          }
          while (v58 != v34 && (*(_WORD *)(v58 + 44) & 4) != 0);
          v33 = *(_QWORD *)(v20 + 24) + 48;
LABEL_99:
          v35 = *(_DWORD **)(v61 + 32);
          v37 = &v35[8 * v62];
        }
      }
    }
    if (v35 != v37)
    {
      v38 = 0;
      v39 = v32 + 648;
      v40 = v32 + 664;
      do
      {
        if (!*v35 && (*v35 & 0x1000000) == 0)
        {
          v41 = v35[1];
          if (v41)
          {
            if (v38 >= *(_DWORD *)(v39 + 12))
            {
              v63 = v40;
              result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v39, v40, v38 + 1, 4);
              v40 = v63;
              v38 = *(_DWORD *)(v39 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v39 + 4 * v38) = v41;
            v38 = *(_DWORD *)(v39 + 8) + 1;
            *(_DWORD *)(v39 + 8) = v38;
          }
        }
        v35 += 8;
        if (v35 == v37)
        {
          v42 = *(_QWORD *)(v33 + 8);
          if (v42 == v34)
            break;
          v35 = v37;
          v33 = v34;
          if ((*(_WORD *)(v42 + 44) & 4) != 0)
          {
            while (1)
            {
              v43 = v42;
              v44 = *(unsigned int *)(v42 + 40);
              if ((_DWORD)v44)
                break;
              v42 = *(_QWORD *)(v42 + 8);
              if (v42 == v34 || (*(_WORD *)(v42 + 44) & 4) == 0)
              {
                v33 = v34;
                goto LABEL_57;
              }
            }
            v33 = v42;
LABEL_57:
            v35 = *(_DWORD **)(v43 + 32);
            v37 = &v35[8 * v44];
          }
        }
      }
      while (v35 != v37);
    }
  }
  ++*(_DWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 2032) = a2;
  v45 = a2;
  if ((v22 & 0x2120) != 0)
    goto LABEL_70;
  v46 = *(unsigned __int16 **)(v20 + 16);
  v47 = *v46;
  v49 = (v47 - 9) <= 0x3C && ((1 << (v47 - 9)) & 0x1000000000000605) != 0 || v47 == 0;
  if (v49 || (v46[4] & 0x10) != 0 || (v46[8] & 1) != 0)
  {
    v45 = 0;
LABEL_70:
    *(_QWORD *)(a1 + 2040) = v45;
  }
  if (*(_BYTE *)(a1 + 2048))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 1960) + (((unint64_t)*(unsigned int *)(a2 + 192) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(a2 + 192);
    v50 = *(unsigned __int16 **)(*(_QWORD *)(a2 + 8) + 16);
    v51 = *v50;
    v52 = (v51 - 9) > 0x3C || ((1 << (v51 - 9)) & 0x1000000000000605) == 0;
    v53 = !v52 || v51 == 0;
    if (v53 || (v50[4] & 0x10) != 0 || (v50[8] & 1) != 0)
    {
      v54 = *(_DWORD *)(a1 + 2056);
      if (v54)
      {
        v55 = *(unsigned __int16 *)(a2 + 226);
        v56 = v54 >= v55;
        v57 = v54 - v55;
        if (!v56)
          v57 = 0;
        *(_DWORD *)(a1 + 2056) = v57;
      }
    }
  }
  return result;
}

void sub_1C483D0E8(int8x8_t *a1, uint64_t a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  int8x8_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  BOOL v22;
  llvm *UnderlyingObject;
  int8x8_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  unint64_t v45;
  int8x8_t *v46;
  uint8x8_t v47;
  unint64_t v48;
  uint64_t **v49;
  uint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  void *v55;
  void *__p[3];

  v4 = *(unsigned __int16 **)(*(_QWORD *)(a2 + 8) + 16);
  v5 = *((_QWORD *)v4 + 2);
  if ((v5 & 0x200) != 0)
  {
    v7 = a1 + 35;
  }
  else if ((v5 & 0x20) != 0)
  {
    v7 = a1 + 42;
  }
  else
  {
    v6 = *v4;
    if (v6 >> 1 == 5986 || sub_1C4840970(v6))
      v7 = a1 + 49;
    else
      v7 = a1 + 28;
  }
  v9 = (uint64_t *)v7[5];
  v8 = (unint64_t)v7[6];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (_QWORD *)v7[4];
    v12 = v9 - v11;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        sub_1C4764EE4();
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (uint64_t *)&v16[8 * v12];
    *v17 = a2;
    v10 = v17 + 1;
    if (v9 != v11)
    {
      do
      {
        v18 = *--v9;
        *--v17 = v18;
      }
      while (v9 != v11);
      v9 = (uint64_t *)v7[4];
    }
    v7[4] = (int8x8_t)v17;
    v7[5] = (int8x8_t)v10;
    v7[6] = (int8x8_t)&v16[8 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = a2;
    v10 = v9 + 1;
  }
  v7[5] = (int8x8_t)v10;
  *(_DWORD *)(a2 + 196) |= v7->i32[0];
  if ((v5 & 0x10120) != 0)
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&a1[69], a2);
    --a1[133].i32[0];
  }
  if ((v5 & 0x20) == 0)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v19 + 16) + 17) & 1) == 0)
      return;
    v20 = *(_QWORD *)(v19 + 48);
    if (v20 < 8)
      goto LABEL_36;
    if ((v20 & 7) != 0)
    {
      v21 = (_DWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
      v22 = (*(_QWORD *)(v19 + 48) & 7) != 3 || v21 == 0;
      if (v22 || !*v21)
      {
LABEL_36:
        UnderlyingObject = 0;
        goto LABEL_37;
      }
    }
    else
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v19 + 48) = v20;
    }
    if ((v20 & 7) != 0)
    {
      v54 = *(_QWORD **)((v20 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v54 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v19 + 48) = v54;
    }
    UnderlyingObject = 0;
    if ((*v54 & 4) == 0 && (*v54 & 0xFFFFFFFFFFFFFFF8) != 0)
      UnderlyingObject = llvm::getUnderlyingObject((llvm *)(*v54 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
LABEL_37:
    v24 = a1[140];
    if (!*(_QWORD *)&v24)
      return;
    v25 = 0x9DDFEA08EB382D69
        * (((8 * (_DWORD)UnderlyingObject) + 8) ^ ((unint64_t)UnderlyingObject >> 32));
    v26 = 0x9DDFEA08EB382D69 * (((unint64_t)UnderlyingObject >> 32) ^ (v25 >> 47) ^ v25);
    v27 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
    v28 = (uint8x8_t)vcnt_s8(v24);
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.u32[0] <= 1uLL)
      v29 = v27 & (*(_QWORD *)&v24 - 1);
    else
      v29 = v27 < *(_QWORD *)&v24 ? v27 : v27 % *(_QWORD *)&v24;
    v30 = *(_QWORD ***)(*(_QWORD *)&a1[139] + 8 * v29);
    if (!v30)
      return;
    v31 = *v30;
    if (!*v30)
      return;
    while (1)
    {
      v32 = v31[1];
      if (v32 == v27)
      {
        if ((llvm *)v31[2] == UnderlyingObject)
        {
          v52 = v31;
          do
            v52 = (_QWORD *)*v52;
          while (v52 && (llvm *)v52[2] == UnderlyingObject);
          while (v31 != v52)
          {
            if (v31[3] == a2)
            {
              sub_1C4841650(&a1[139], v31, (uint64_t)__p);
              goto LABEL_101;
            }
            v31 = (_QWORD *)*v31;
          }
          return;
        }
      }
      else
      {
        if (v28.u32[0] <= 1uLL)
        {
          v32 &= *(_QWORD *)&v24 - 1;
        }
        else if (v32 >= *(_QWORD *)&v24)
        {
          v32 %= *(_QWORD *)&v24;
        }
        if (v32 != v29)
          return;
      }
      v31 = (_QWORD *)*v31;
      if (!v31)
        return;
    }
  }
  v33 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v33)
  {
    v34 = *(_QWORD **)(a2 + 32);
    v35 = 16 * v33;
    do
    {
      v36 = *v34 & 0xFFFFFFFFFFFFFFF8;
      if ((*v34 & 6) == 0 && v36 != 0)
      {
        v38 = *(_QWORD *)(v36 + 8);
        if (v38)
        {
          if ((*(_BYTE *)(*(_QWORD *)(v38 + 16) + 17) & 2) != 0)
          {
            v39 = sub_1C4840470((uint64_t)&a1[11], v36);
            v40 = *(_DWORD *)(v39 + 8);
            if (v40 != -1)
              *(_DWORD *)(v39 + 8) = v40 - 1;
          }
        }
      }
      v34 += 2;
      v35 -= 16;
    }
    while (v35);
  }
  v41 = *(_QWORD *)(a2 + 8);
  v42 = *(unsigned __int8 *)(*(_QWORD *)(v41 + 16) + 4);
  v43 = *(_QWORD *)(v41 + 32);
  if (*(_BYTE *)(v43 + 32 * v42) != 7)
    return;
  v44 = a1[135];
  if (!*(_QWORD *)&v44)
    return;
  v45 = *(unsigned int *)(v43 + 32 * v42 + 4);
  v46 = a1 + 134;
  v47 = (uint8x8_t)vcnt_s8(v44);
  v47.i16[0] = vaddlv_u8(v47);
  if (v47.u32[0] <= 1uLL)
  {
    v48 = (v44.i32[0] - 1) & v45;
  }
  else
  {
    v48 = v45;
    if (*(_QWORD *)&v44 <= v45)
      v48 = v45 % *(_QWORD *)&v44;
  }
  v49 = *(uint64_t ***)(*(_QWORD *)v46 + 8 * v48);
  if (!v49)
    return;
  v50 = *v49;
  if (!*v49)
    return;
  while (1)
  {
    v51 = v50[1];
    if (v51 == v45)
      break;
    if (v47.u32[0] > 1uLL)
    {
      if (v51 >= *(_QWORD *)&v44)
        v51 %= *(_QWORD *)&v44;
    }
    else
    {
      v51 &= *(_QWORD *)&v44 - 1;
    }
    if (v51 != v48)
      return;
LABEL_81:
    v50 = (uint64_t *)*v50;
    if (!v50)
      return;
  }
  if (*((_DWORD *)v50 + 4) != (_DWORD)v45)
    goto LABEL_81;
  v53 = (uint64_t *)*v50;
  while (1)
  {
    if (v50 == v53)
      return;
    if (v50[3] == a2)
      break;
    v50 = (uint64_t *)*v50;
  }
  sub_1C4841500(v46, v50, (uint64_t)__p);
LABEL_101:
  v55 = __p[0];
  __p[0] = 0;
  if (v55)
    operator delete(v55);
}

_QWORD *sub_1C483D59C(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 8)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 17;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(16 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[2 * v5];
  do
  {
LABEL_4:
    *result = -4096;
    result += 2;
  }
  while (result != v4);
  return result;
}

uint64_t sub_1C483D61C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_1C483D668(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_1C483D6B8(_QWORD *result)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v2 = result + 1;
      v3 = result + 17;
      goto LABEL_5;
    }
    v5 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v5 || v5 < 0x41)
    {
      if (!(_DWORD)v5)
      {
        v4 = 0;
LABEL_7:
        *(_DWORD *)result = v4;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v2 = (_QWORD *)result[1];
      v3 = &v2[2 * v5];
      do
      {
LABEL_5:
        *v2 = -4096;
        v2 += 2;
      }
      while (v2 != v3);
      v4 = *(_DWORD *)result & 1;
      goto LABEL_7;
    }
    return sub_1C483D734(result);
  }
  return result;
}

_QWORD *sub_1C483D734(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  char v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 9)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 17;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_1C483D59C(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C483D59C(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[2 * v5];
  do
  {
LABEL_10:
    *v6 = -4096;
    v6 += 2;
  }
  while (v6 != v7);
  return result;
}

_QWORD *sub_1C483D7F8(_QWORD *a1, _OWORD *a2)
{
  _OWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = operator new(0x20uLL);
  v4[1] = *a2;
  v5 = *((_QWORD *)v4 + 2);
  v6 = HIDWORD(v5);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69
                                                                           * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  return sub_1C483D870(a1, v4);
}

_QWORD *sub_1C483D870(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v4 = a2 + 2;
  v5 = a2[2];
  v6 = HIDWORD(v5);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  v9 = sub_1C483D8EC((uint64_t)a1, v8, v4);
  sub_1C483DA44(a1, a2, v9);
  return a2;
}

_QWORD *sub_1C483D8EC(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *result;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_1C483DB30(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  result = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (result)
  {
    v17 = (_QWORD *)*result;
    if (*result)
    {
      v18 = 0;
      do
      {
        v19 = v17;
        v20 = v17[1];
        if (v14.u32[0] > 1uLL)
        {
          v21 = v20;
          if (v20 >= v6)
            v21 = v20 % v6;
        }
        else
        {
          v21 = v20 & (v6 - 1);
        }
        if (v21 != v15)
          break;
        v22 = v20 == a2 && v19[2] == *a3;
        if ((v18 & !v22) == 1)
          break;
        v18 |= v22;
        v17 = (_QWORD *)*v19;
        result = v19;
      }
      while (*v19);
    }
  }
  return result;
}

_QWORD *sub_1C483DA44(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] <= 1uLL)
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  else if (v4 >= *(_QWORD *)&v3)
  {
    v4 %= *(_QWORD *)&v3;
  }
  if (a3)
  {
    *a2 = *a3;
    *a3 = a2;
    if (*a2)
    {
      v6 = *(_QWORD *)(*a2 + 8);
      if (v5.u32[0] <= 1uLL)
      {
        v6 &= *(_QWORD *)&v3 - 1;
      }
      else if (v6 >= *(_QWORD *)&v3)
      {
        v6 %= *(_QWORD *)&v3;
      }
      if (v6 != v4)
LABEL_16:
        *(_QWORD *)(*result + 8 * v6) = a2;
    }
  }
  else
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (*a2)
    {
      v6 = *(_QWORD *)(*a2 + 8);
      if (v5.u32[0] <= 1uLL)
      {
        v6 &= *(_QWORD *)&v3 - 1;
      }
      else if (v6 >= *(_QWORD *)&v3)
      {
        v6 %= *(_QWORD *)&v3;
      }
      goto LABEL_16;
    }
  }
  ++result[3];
  return result;
}

void sub_1C483DB30(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1C483DC0C(a1, prime);
  }
}

void sub_1C483DC0C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      sub_1C4764EE4();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_1C483DD7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C483DE40(a1, a2, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v14 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v15 = 8;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(unsigned int *)(a1 + 16);
    }
    v13 = 0;
    v12 = v14 + 16 * v15;
  }
  else
  {
    result = (uint64_t)sub_1C483DEE8((_DWORD *)a1, (uint64_t)a2, a2, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 8;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    v12 = v10 + 16 * v11;
    v13 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_1C483DE40(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C483DEE8(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C483DFA8((uint64_t)a1, v7);
  v9 = 0;
  sub_1C483DE40((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C483DFA8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C483E120(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C483E120(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C483E120(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C483DE40((uint64_t)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1C483E1E4(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v6 = *(unsigned int *)(a3 + 40);
  v7 = *a2;
  if ((_DWORD)v6)
  {
    v8 = *(_QWORD **)(a3 + 32);
    v9 = 16 * v6;
    while (1)
    {
      v10 = *(unsigned int *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 192);
      if ((_DWORD)v10 != -1 && ((*(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) == 0)
        break;
      v8 += 2;
      v9 -= 16;
      if (!v9)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v11 = *(unsigned int *)(a3 + 192);
    v12 = v11 >> 6;
    v13 = 1 << v11;
    if (((1 << v11) & *(_QWORD *)(v7 + 8 * (v11 >> 6))) == 0)
    {
      v14 = (_QWORD *)a1[262];
      v15 = a1[263];
      if ((unint64_t)v14 >= v15)
      {
        v17 = (_QWORD *)a1[261];
        v18 = v14 - v17;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          abort();
        v20 = v15 - (_QWORD)v17;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 61)
            sub_1C4764EE4();
          v22 = (char *)operator new(8 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[8 * v18];
        *(_QWORD *)v23 = a3;
        v16 = v23 + 8;
        if (v14 != v17)
        {
          do
          {
            v24 = *--v14;
            *((_QWORD *)v23 - 1) = v24;
            v23 -= 8;
          }
          while (v14 != v17);
          v14 = (_QWORD *)a1[261];
        }
        a1[261] = v23;
        a1[262] = v16;
        a1[263] = &v22[8 * v21];
        if (v14)
        {
          operator delete(v14);
          v25 = *(unsigned int *)(a3 + 192);
          v13 = 1 << v25;
          v12 = v25 >> 6;
        }
      }
      else
      {
        *v14 = a3;
        v16 = v14 + 1;
      }
      a1[262] = v16;
      *(_QWORD *)(*a2 + 8 * v12) |= v13;
      v26 = *(unsigned int *)(a3 + 120);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD **)(a3 + 112);
        v28 = 16 * v26;
        do
        {
          if (*(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
            sub_1C483E1E4(a1, a2);
          v27 += 2;
          v28 -= 16;
        }
        while (v28);
      }
    }
  }
}

uint64_t sub_1C483E3AC(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v42;
  void *__dst;
  uint64_t v44;
  _BYTE v45[48];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v42 = a2;
  v4 = a2 >> 6;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v4);
  if ((v5 & (1 << a2)) == 0)
    return 0;
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v4) = v5 & ~(1 << a2);
  v8 = *(_QWORD *)(a1[1] + 48) + 272 * a2;
  v9 = (uint64_t *)a1[302];
  v10 = a1[303];
  if ((unint64_t)v9 >= v10)
  {
    v13 = (_QWORD *)a1[301];
    v14 = v9 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      abort();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        sub_1C4764EE4();
      v18 = (char *)operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (uint64_t *)&v18[8 * v14];
    *v19 = v8;
    v11 = v19 + 1;
    if (v9 != v13)
    {
      do
      {
        v20 = *--v9;
        *--v19 = v20;
      }
      while (v9 != v13);
      v9 = (uint64_t *)a1[301];
    }
    a1[301] = v19;
    a1[302] = v11;
    a1[303] = &v18[8 * v17];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = v8;
    v11 = v9 + 1;
  }
  v21 = 0;
  a1[302] = v11;
  __dst = v45;
  v44 = 0x600000000;
  if (&__dst != (void **)a3)
  {
    v22 = *(_DWORD *)(a3 + 8);
    if (v22)
    {
      if (v22 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v45, *(unsigned int *)(a3 + 8), 8);
        v24 = *(_DWORD *)(a3 + 8);
        if (!v24)
        {
LABEL_27:
          LODWORD(v44) = v22;
          v21 = v22;
          goto LABEL_28;
        }
        v23 = __dst;
      }
      else
      {
        v23 = v45;
        v24 = *(_DWORD *)(a3 + 8);
      }
      memcpy(v23, *(const void **)a3, 8 * v24);
      goto LABEL_27;
    }
  }
LABEL_28:
  v46 = *(_DWORD *)(a3 + 64);
  v25 = a1[292] + 72 * a2;
  v26 = *(_DWORD *)(v25 + 8);
  if (v26 >= v21)
    v27 = v21;
  else
    v27 = v26;
  if ((_DWORD)v27)
  {
    v28 = *(uint64_t **)v25;
    v29 = __dst;
    v30 = v27;
    do
    {
      v31 = *v28++;
      *v29++ &= v31;
      --v30;
    }
    while (v30);
  }
  if (v21 > v26)
  {
    v32 = __dst;
    do
    {
      v32[v27] = 0;
      LODWORD(v27) = v27 + 1;
    }
    while (v21 != (_DWORD)v27);
  }
  v33 = 0;
  v34 = -1;
  while (1)
  {
    v35 = sub_1C476BA0C(&__dst, v34 + 1, v46, 1u);
    if ((v35 + 1) < 2)
      break;
    v34 = v35;
    v36 = v35 >> 6;
    v37 = a1[265];
    v38 = *(_QWORD *)(v37 + 8 * v36);
    v39 = 1 << v35;
    if ((v38 & (1 << v35)) != 0)
    {
      *(_QWORD *)(v37 + 8 * v36) = v38 & ~v39;
      *((_QWORD *)__dst + v36) &= ~v39;
      v40 = sub_1C483E3AC(a1, v35, a3);
      if (v40 > v33)
        v33 = v40;
    }
  }
  v12 = v33 + 1;
  sub_1C476BFEC((uint64_t)(a1 + 298), &v42)[1] = v12;
  if (__dst != v45)
    free(__dst);
  return v12;
}

void sub_1C483E69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  BOOL v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v16;
  BOOL v18;
  BOOL v19;
  int v21;
  uint64_t i;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _QWORD *v31;
  int v32;
  unsigned int v33;
  _DWORD *v34;
  int v35;
  _DWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  _DWORD *v40;
  unsigned int v41;
  int v42;
  _QWORD *v43;
  int v44;
  unsigned int v45;
  int v46;
  _DWORD *v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  _QWORD *v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  _DWORD *v69;
  int v70;
  int v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  int *v75;
  int v76;
  int v77;
  int v78;
  _QWORD *v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  __n128 v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  char v134;
  int v135;
  BOOL v136;
  BOOL v137;
  BOOL v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  BOOL v142;
  __int16 v143;
  BOOL v144;
  char v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int16 v150;
  int v151;
  uint64_t v152;
  _QWORD *v153;
  unsigned int v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a2 + 32);
  v127 = *(uint64_t **)(a2 + 40);
  if (v3 == v127)
    return;
  v126 = a1 + 456;
  do
  {
    v132 = -4294967271;
    v135 = 0;
    v143 = 0;
    v145 = 0;
    v146 = 0x7FFFFFFF;
    v148 = -1;
    v149 = -1;
    v147 = -1;
    v150 = 0;
    v130 = v3;
    v5 = *v3;
    v131 = v5;
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(unsigned __int16 **)(v6 + 16);
    v8 = *v7;
    v9 = sub_1C48408F4(*v7, *(unsigned __int8 *)(a1 + 72));
    v10 = v8 - 9;
    v12 = v8 - 9 <= 0x3C && ((1 << (v8 - 9)) & 0x1000000000000605) != 0 || v8 == 0;
    v13 = !v12 && (v7[4] & 0x10) == 0 && (v7[8] & 1) == 0;
    v137 = v13;
    v133 = v13 ^ (*(_BYTE *)(a1 + 964) != 0);
    v134 = v9 ^ (*(_BYTE *)(a1 + 965) == 0);
    v138 = v8 >> 1 == 5986;
    v14 = sub_1C4840970(v8);
    v139 = v14;
    v107 = v8 - 740 < 6 || v8 == 19;
    v140 = v107;
    v16 = *((_QWORD *)v7 + 1);
    v142 = (v16 & 0x2000) != 0;
    v136 = (*((_QWORD *)v7 + 2) & 0x10120) != 0;
    v18 = v10 <= 0x3C && ((1 << v10) & 0x1000000000000605) != 0 || v8 == 0;
    v19 = (v18 || (v16 & 0x10) != 0) && v8 != 19 && v8 != 11;
    v141 = v19;
    if (v13)
    {
      v144 = 0;
      if (v14)
        goto LABEL_36;
      goto LABEL_159;
    }
    v152 = 1;
    for (i = 8; i != 72; i += 8)
      *(_DWORD *)((char *)&v152 + i) = -1;
    v23 = *((unsigned __int8 *)v7 + 4);
    v24 = v7[1];
    if (v24 > v23)
    {
      while (1)
      {
        v25 = *(_QWORD *)(v6 + 32);
        v26 = *(_DWORD *)(v25 + 32 * v23);
        if (!(_BYTE)v26)
        {
          v27 = *(_DWORD *)(v25 + 32 * v23 + 4);
          if (v27)
          {
            v28 = v152;
            v29 = v152 & 1;
            if ((v152 & 1) != 0)
            {
              v30 = 8;
              v31 = &v153;
            }
            else
            {
              v30 = v154;
              if (!v154)
              {
                v40 = 0;
                v41 = 0;
                goto LABEL_61;
              }
              v31 = v153;
            }
            v32 = v30 - 1;
            v33 = v32 & (37 * v27);
            v34 = &v31[v33];
            v35 = *v34;
            if (v27 != *v34)
              break;
          }
        }
LABEL_41:
        if (++v23 >= (unint64_t)v24)
        {
          v5 = v131;
          goto LABEL_102;
        }
      }
      v36 = 0;
      v37 = 1;
      while (v35 != -1)
      {
        if (v36)
          v38 = 0;
        else
          v38 = v35 == -2;
        if (v38)
          v36 = v34;
        v39 = v33 + v37++;
        v33 = v39 & v32;
        v34 = &v31[v33];
        v35 = *v34;
        if (v27 == *v34)
          goto LABEL_41;
      }
      if (v36)
        v40 = v36;
      else
        v40 = v34;
      if ((v152 & 1) != 0)
        v41 = 8;
      else
        v41 = v154;
LABEL_61:
      if (4 * (v152 >> 1) + 4 < 3 * v41)
      {
        if (v41 + ~(v152 >> 1) - HIDWORD(v152) > v41 >> 3)
        {
LABEL_63:
          LODWORD(v152) = (v28 & 0xFFFFFFFE | v29) + 2;
          if (*v40 != -1)
            --HIDWORD(v152);
          *v40 = v27;
          v40[1] = (v26 >> 8) & 0xFFF;
          v24 = v7[1];
          goto LABEL_41;
        }
        sub_1C4840AE0((uint64_t)&v152, v41);
        v28 = v152;
        if ((v152 & 1) != 0)
        {
          v51 = 8;
          v52 = &v153;
LABEL_83:
          v29 = v152 & 1;
          v53 = v51 - 1;
          v54 = (v51 - 1) & (37 * v27);
          v40 = &v52[v54];
          v55 = *v40;
          if (v27 == *v40)
            goto LABEL_63;
          v47 = 0;
          v56 = 1;
          while (v55 != -1)
          {
            if (v47)
              v57 = 0;
            else
              v57 = v55 == -2;
            if (v57)
              v47 = v40;
            v58 = v54 + v56++;
            v54 = v58 & v53;
            v40 = &v52[v58 & v53];
            v55 = *v40;
            if (v27 == *v40)
              goto LABEL_63;
          }
          goto LABEL_93;
        }
        v51 = v154;
        if (v154)
        {
          v52 = v153;
          goto LABEL_83;
        }
LABEL_101:
        v29 = 0;
        v40 = 0;
        goto LABEL_63;
      }
      sub_1C4840AE0((uint64_t)&v152, 2 * v41);
      v28 = v152;
      if ((v152 & 1) != 0)
      {
        v42 = 8;
        v43 = &v153;
      }
      else
      {
        v42 = v154;
        if (!v154)
          goto LABEL_101;
        v43 = v153;
      }
      v29 = v152 & 1;
      v44 = v42 - 1;
      v45 = (v42 - 1) & (37 * v27);
      v40 = &v43[v45];
      v46 = *v40;
      if (v27 == *v40)
        goto LABEL_63;
      v47 = 0;
      v48 = 1;
      while (v46 != -1)
      {
        if (v47)
          v49 = 0;
        else
          v49 = v46 == -2;
        if (v49)
          v47 = v40;
        v50 = v45 + v48++;
        v45 = v50 & v44;
        v40 = &v43[v50 & v44];
        v46 = *v40;
        if (v27 == *v40)
          goto LABEL_63;
      }
LABEL_93:
      if (v47)
        v40 = v47;
      goto LABEL_63;
    }
LABEL_102:
    v59 = *(unsigned int *)(v5 + 40);
    if ((_DWORD)v59)
    {
      v60 = *(uint64_t **)(v5 + 32);
      v61 = &v60[2 * v59];
      while (1)
      {
        v62 = *v60;
        if ((*v60 & 6) == 0)
        {
          v63 = v62 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
          {
            v64 = *(_QWORD *)(v63 + 8);
            v65 = *(unsigned __int16 **)(v64 + 16);
            v66 = *v65;
            v67 = (v66 - 9) > 0x3C || ((1 << (v66 - 9)) & 0x1000000000000605) == 0;
            if (v67 && v66 != 0 && (v65[4] & 0x10) == 0 && (v65[8] & 1) == 0)
            {
              v69 = *(_DWORD **)(v64 + 32);
              if ((*v69 & 0x10000FF) == 0x1000000)
                break;
            }
          }
        }
LABEL_105:
        v60 += 2;
        if (v60 == v61)
          goto LABEL_156;
      }
      v70 = v69[1];
      if ((v152 & 1) != 0)
      {
        v71 = 8;
        v72 = &v153;
      }
      else
      {
        v72 = v153;
        v71 = v154;
        if (!v154)
        {
          v74 = 0;
          goto LABEL_127;
        }
      }
      v73 = v71 - 1;
      LODWORD(v74) = (v71 - 1) & (37 * v70);
      v75 = (int *)&v72[v74];
      v76 = *v75;
      if (v70 == *v75)
        goto LABEL_128;
      v77 = 1;
      while (v76 != -1)
      {
        v78 = v74 + v77++;
        v74 = v78 & v73;
        v76 = v72[v74];
        if (v70 == v76)
          goto LABEL_127;
      }
      if ((v152 & 1) != 0)
      {
        v72 = &v153;
        v74 = 8;
      }
      else
      {
        v72 = v153;
        v74 = v154;
      }
LABEL_127:
      v75 = (int *)&v72[v74];
LABEL_128:
      if ((v152 & 1) != 0)
        v79 = &v153;
      else
        v79 = v153;
      v80 = v154;
      if ((v152 & 1) != 0)
        v80 = 8;
      if (&v79[v80] != (_QWORD *)v75)
      {
        v81 = *(unsigned int *)(v63 + 120);
        if ((_DWORD)v81)
        {
          v82 = v75[1];
          v83 = *(_QWORD **)(v63 + 112);
          v84 = &v83[2 * v81];
          while (1)
          {
            if ((*v83 & 6) == 0)
            {
              v85 = *v83 & 0xFFFFFFFFFFFFFFF8;
              if (*(_DWORD *)(v85 + 192) != -1 && v131 != v85 && (*(_WORD *)(v85 + 228) & 0x400) == 0)
              {
                v87 = *(_QWORD *)(v85 + 8);
                v88 = *(_QWORD *)(v87 + 16);
                v89 = *(unsigned __int8 *)(v88 + 4);
                v90 = *(unsigned __int16 *)(v88 + 2);
                if (v90 > v89)
                  break;
              }
            }
LABEL_150:
            v83 += 2;
            if (v83 == v84)
              goto LABEL_151;
          }
          v91 = *(_QWORD *)(v87 + 32);
          v92 = v90 - v89;
          v93 = (_DWORD *)(v91 + 32 * v89 + 4);
          while (*(v93 - 1) || *v93 != v70 || ((*(v93 - 1) >> 8) & 0xFFF) != v82)
          {
            v93 += 8;
            if (!--v92)
              goto LABEL_150;
          }
        }
        else
        {
LABEL_151:
          v151 = v70;
          sub_1C4840998((uint64_t)&v152, &v151);
        }
      }
      goto LABEL_105;
    }
LABEL_156:
    v144 = v152 < 2;
    if ((v152 & 1) == 0)
      MEMORY[0x1CAA32FB4](v153, 4, 0x1000000000000605);
    if (v139)
    {
LABEL_36:
      v21 = 2;
      goto LABEL_164;
    }
LABEL_159:
    if (v138)
    {
      v21 = 3;
    }
    else if (v137)
    {
      v21 = 1;
    }
    else
    {
      v21 = 4;
    }
LABEL_164:
    v135 = v21;
    v95 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2720);
    v96 = *(_QWORD *)(v95 + 8);
    v97 = *(unsigned int *)(v131 + 192);
    if (v96 == *(_QWORD *)(v95 + 16))
      v98 = 0;
    else
      v98 = *(_DWORD *)(v96 + 8 * v97 + 4);
    v145 = !v137 & ((*(_QWORD *)(*(_QWORD *)(a1 + 976) + 8 * (v98 >> 6)) >> v98) | (*(_DWORD *)(v96 + 8 * v97) < *(_DWORD *)(v95 + 4)));
    LOBYTE(v150) = sub_1C484059C(v131, *(_QWORD *)(a1 + 2040));
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_178;
    v100 = 0;
    if (!v131)
      goto LABEL_179;
    v101 = *(_QWORD *)(a1 + 2032);
    if (!v101)
      goto LABEL_179;
    v100 = 0;
    v102 = *(_QWORD *)(v131 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v102 + 16) + 17) & 2) == 0)
      goto LABEL_179;
    v103 = *(_QWORD *)(v101 + 8);
    if ((*(_QWORD *)(*(_QWORD *)(v103 + 16) + 16) & 0x20) == 0)
      goto LABEL_179;
    v104 = *(_QWORD *)(a1 + 48);
    v105 = *(unsigned int *)(*(_QWORD *)(v102 + 32) + 4);
    v106 = (uint64_t *)((v105 & 0x80000000) != 0
                     ? *(_QWORD *)(v104 + 24) + 16 * (v105 & 0x7FFFFFFF) + 8
                     : *(_QWORD *)(v104 + 272) + 8 * v105);
    v108 = *v106;
    if (!v108)
      goto LABEL_178;
    while ((*(_BYTE *)(v108 + 3) & 1) != 0)
    {
      v108 = *(_QWORD *)(v108 + 24);
      if (!v108)
        goto LABEL_178;
    }
    v117 = *(_QWORD *)(v108 + 8);
    if (v117 != v103)
    {
      while (1)
      {
        v108 = *(_QWORD *)(v108 + 24);
        if (!v108)
          break;
        if ((*(_BYTE *)(v108 + 3) & 1) == 0)
        {
          v118 = *(_QWORD *)(v108 + 8);
          if (v118 != v117)
          {
            v100 = 1;
            v117 = *(_QWORD *)(v108 + 8);
            if (v118 == v103)
              goto LABEL_179;
          }
        }
      }
LABEL_178:
      v100 = 0;
      goto LABEL_179;
    }
    v100 = 1;
LABEL_179:
    LOBYTE(v143) = v100;
    if (*(_QWORD *)(a1 + 312) == *(_QWORD *)(a1 + 320) && *(_QWORD *)(a1 + 368) == *(_QWORD *)(a1 + 376))
      goto LABEL_201;
    v109 = *(_QWORD *)(a1 + 2032);
    v110 = !v131 || v109 == 0;
    if (v110
      || (v111 = *(_QWORD *)(v131 + 8), (*(_BYTE *)(*(_QWORD *)(v111 + 16) + 16) & 1) == 0)
      || (v112 = *(_QWORD *)(v109 + 8), (**(_WORD **)(v112 + 16) & 0xFFFE) != 0x2EC4)
      || (v113 = *(_DWORD **)(v111 + 32), (*v113 & 0x10000FF) != 0x1000000)
      || ((v114 = *(_QWORD *)(a1 + 48), v115 = v113[1], (v115 & 0x80000000) != 0)
        ? (v116 = (uint64_t *)(*(_QWORD *)(v114 + 24) + 16 * (v115 & 0x7FFFFFFF) + 8))
        : (v116 = (uint64_t *)(*(_QWORD *)(v114 + 272) + 8 * v115)),
          (v119 = *v116) == 0))
    {
LABEL_201:
      v120 = 0;
      goto LABEL_202;
    }
    while ((*(_BYTE *)(v119 + 3) & 1) != 0)
    {
      v119 = *(_QWORD *)(v119 + 24);
      if (!v119)
        goto LABEL_201;
    }
    v124 = *(_QWORD *)(v119 + 8);
    if (v124 != v112)
    {
      while (1)
      {
        v119 = *(_QWORD *)(v119 + 24);
        if (!v119)
          goto LABEL_201;
        if ((*(_BYTE *)(v119 + 3) & 1) == 0)
        {
          v125 = *(_QWORD *)(v119 + 8);
          if (v125 != v124)
          {
            v120 = 1;
            v124 = *(_QWORD *)(v119 + 8);
            if (v125 == v112)
              goto LABEL_202;
          }
        }
      }
    }
    v120 = 1;
LABEL_202:
    HIBYTE(v143) = v120;
    if (v136)
    {
      v121 = sub_1C477672C(v126, v131);
      v122 = *(_QWORD *)(a1 + 464);
      v123 = 472;
      if (v122 == *(_QWORD *)(a1 + 456))
        v123 = 476;
      HIBYTE(v150) = v121 != (_QWORD *)(v122 + 8 * *(unsigned int *)(a1 + v123));
    }
    sub_1C483F0CC(a1, a3, (uint64_t)&v130, a2, v99);
    ++v3;
  }
  while (v3 != v127);
}

