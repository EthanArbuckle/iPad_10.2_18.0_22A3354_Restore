uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verify(llvm::AMDGPU::HSAMD::V3::MetadataVerifier *this, llvm::msgpack::DocNode *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  llvm::msgpack::DocNode **v16;
  llvm::msgpack::DocNode *v17;
  llvm::msgpack::DocNode *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 8)
    return 0;
  v19 = **(_QWORD **)a2 + 176;
  v20 = "amdhsa.version";
  v21 = 14;
  v4 = sub_1C4FE31DC(*((_QWORD *)a2 + 1), &v19);
  v5 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v5 + 8) == v4)
    return 0;
  if (*(_BYTE *)(v4[7] + 8) != 7)
    return 0;
  v6 = (uint64_t *)v4[8];
  v7 = *v6;
  v8 = v6[1];
  if (v8 - *v6 != 48)
    return 0;
  if (v7 == v8)
  {
LABEL_10:
    v19 = **(_QWORD **)a2 + 176;
    v20 = "amdhsa.printf";
    v21 = 13;
    v10 = sub_1C4FE31DC(v5, &v19);
    v11 = *((_QWORD *)a2 + 1);
    if ((_QWORD *)(v11 + 8) != v10)
    {
      if (*(_BYTE *)(v10[7] + 8) != 7)
        return 0;
      v12 = (uint64_t *)v10[8];
      v13 = *v12;
      v14 = v12[1];
      if (*v12 != v14)
      {
        while ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v13, 5, 0, 0) & 1) != 0)
        {
          v13 += 24;
          if (v13 == v14)
          {
            v11 = *((_QWORD *)a2 + 1);
            goto LABEL_16;
          }
        }
        return 0;
      }
    }
LABEL_16:
    v19 = **(_QWORD **)a2 + 176;
    v20 = "amdhsa.kernels";
    v21 = 14;
    v15 = sub_1C4FE31DC(v11, &v19);
    if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) != v15 && *(_BYTE *)(v15[7] + 8) == 7)
    {
      v16 = (llvm::msgpack::DocNode **)v15[8];
      v17 = *v16;
      v18 = v16[1];
      if (*v16 == v18)
        return 1;
      do
      {
        result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyKernel(this, v17);
        if (!(_DWORD)result)
          break;
        v17 = (llvm::msgpack::DocNode *)((char *)v17 + 24);
      }
      while (v17 != v18);
      return result;
    }
    return 0;
  }
  while (1)
  {
    if ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v7, 1, 0, 0) & 1) == 0)
    {
      result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v7, 0, 0, 0);
      if (!(_DWORD)result)
        return result;
    }
    v7 += 24;
    if (v7 == v8)
    {
      v5 = *((_QWORD *)a2 + 1);
      goto LABEL_10;
    }
  }
}

uint64_t sub_1C4FD42D4(_BYTE **a1, uint64_t a2)
{
  _BYTE *v3;
  int v4;
  uint64_t result;

  v3 = *a1;
  if ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(*a1, a2, 1, 0, 0) & 1) != 0)
    return 1;
  v4 = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(v3, a2, 0, 0, 0);
  result = 0;
  if (v4)
    return 1;
  return result;
}

BOOL sub_1C4FD4334(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  _BOOL4 v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v25;
  BOOL v30;
  char v32;
  BOOL v37;
  char v39;
  BOOL v40;
  char v42;
  char v43;
  BOOL v44;
  BOOL v46;
  char v48;
  BOOL v49;
  _BOOL4 v51;
  BOOL v52;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  BOOL v60;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  char v68;
  BOOL v69;
  char v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  BOOL v77;

  v2 = 0;
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = 0;
  switch(v4)
  {
    case 4:
      v2 = 0;
      v6 = bswap32(*(_DWORD *)v3);
      v7 = v6 >= 0x70697065;
      v8 = v6 > 0x70697065;
      goto LABEL_20;
    case 5:
      v12 = *(_DWORD *)v3 == 1734438249 && *((_BYTE *)v3 + 4) == 101;
      v5 = 257;
      v13 = 0;
      LOBYTE(v14) = 0;
      v2 = 0;
      v15 = 0;
      if (v12)
        goto LABEL_104;
      if (*(_DWORD *)v3 ^ 0x75657571 | *((unsigned __int8 *)v3 + 4) ^ 0x65)
        v5 = 0;
      else
        v5 = 257;
      goto LABEL_114;
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
      goto LABEL_60;
    case 7:
      v16 = 1935764848;
      v17 = bswap32(*(_DWORD *)v3);
      if (v17 == 1935764848)
      {
        v16 = 1886152050;
        v17 = bswap32(*(_DWORD *)((char *)v3 + 3));
        if (v17 == 1886152050)
          goto LABEL_29;
      }
      v2 = 0;
      v18 = v17 >= v16;
      goto LABEL_50;
    case 8:
      v2 = 0;
      v19 = bswap64(*v3);
      v7 = v19 >= 0x62795F76616C7565;
      v8 = v19 > 0x62795F76616C7565;
LABEL_20:
      v20 = v8;
      v21 = !v7;
      v11 = v20 - v21;
      goto LABEL_57;
    case 13:
      v22 = 0x676C6F62616C5F62;
      v23 = bswap64(*v3);
      if (v23 == 0x676C6F62616C5F62
        && (v22 = 0x6C5F627566666572, v23 = bswap64(*(uint64_t *)((char *)v3 + 5)), v23 == 0x6C5F627566666572))
      {
LABEL_29:
        v11 = 0;
        v2 = 0;
      }
      else
      {
        v2 = 0;
        v18 = v23 >= v22;
LABEL_50:
        if (v18)
          v11 = 1;
        else
          v11 = -1;
      }
      goto LABEL_57;
    default:
      if (v4 == 20)
      {
        v25 = *v3 == 0x625F6E6564646968 && v3[1] == 0x756F635F6B636F6CLL && *((_DWORD *)v3 + 4) == 2019521646;
        v2 = !v25;
        if (v25)
        {
          v5 = 257;
        }
        else
        {
          v5 = 0;
          if (*v3 == 0x625F6E6564646968 && v3[1] == 0x756F635F6B636F6CLL && *((_DWORD *)v3 + 4) == 2036298862)
          {
            LOBYTE(v13) = 0;
            LOBYTE(v14) = 0;
            v2 = 0;
            v5 = 257;
LABEL_266:
            v15 = 1;
            goto LABEL_114;
          }
        }
        if (v2)
        {
          v2 = 0;
          LOBYTE(v14) = 0;
          LOBYTE(v13) = 0;
          v52 = 0;
          if (*((_DWORD *)v3 + 4) == 2053076078 && v3[1] == 0x756F635F6B636F6CLL && *v3 == 0x625F6E6564646968)
            v5 = 257;
          v51 = v5 < 0x100;
          v15 = 1;
          goto LABEL_181;
        }
        LOBYTE(v13) = 0;
        LOBYTE(v14) = 0;
        goto LABEL_266;
      }
      v5 = 0;
      if (v4 == 22)
      {
        v9 = 0x64796E616D69635FLL;
        v10 = bswap64(*v3);
        if (v10 == 0x64796E616D69635FLL
          && (v9 = 0x7368617265645F70, v10 = bswap64(v3[1]), v10 == 0x7368617265645F70)
          && (v9 = 0x5F706F696E746572, v10 = bswap64(*(uint64_t *)((char *)v3 + 14)), v10 == 0x5F706F696E746572))
        {
          v11 = 0;
        }
        else if (v10 < v9)
        {
          v11 = -1;
        }
        else
        {
          v11 = 1;
        }
        v2 = 1;
LABEL_57:
        if (v11)
          v5 = 0;
        else
          v5 = 257;
      }
LABEL_60:
      v14 = v4 == 19;
      if (v4 == 19 && v5 <= 0xFF)
      {
        if (*(uint64_t *)((char *)v3 + 11) == 0x785F657A69735F70
          && v3[1] == 0x7A69735F70756F72
          && *v3 == 0x675F6E6564646968)
        {
          v5 = 257;
        }
        v14 = 1;
      }
      if (v14 && v5 <= 0xFF)
      {
        v30 = *(uint64_t *)((char *)v3 + 11) == 0x795F657A69735F70 && v3[1] == 0x7A69735F70756F72;
        if (v30 && *v3 == 0x675F6E6564646968)
          v5 = 257;
      }
      v32 = !v14;
      if (v5 > 0xFF)
        v32 = 1;
      if ((v32 & 1) == 0)
      {
        if (*(uint64_t *)((char *)v3 + 11) == 0x7A5F657A69735F70
          && v3[1] == 0x7A69735F70756F72
          && *v3 == 0x675F6E6564646968)
        {
          v5 = 257;
        }
        LOBYTE(v14) = 1;
      }
      v15 = 0;
      v13 = v4 == 18;
      if (v4 == 18 && v5 <= 0xFF)
      {
        v15 = 0;
        if (*((_WORD *)v3 + 8) == 30815 && v3[1] == 0x7265646E69616D65 && *v3 == 0x725F6E6564646968)
          v5 = 257;
        v13 = 1;
      }
LABEL_104:
      if (v13 && v5 <= 0xFF)
      {
        v37 = *((_WORD *)v3 + 8) == 31071 && v3[1] == 0x7265646E69616D65;
        if (v37 && *v3 == 0x725F6E6564646968)
          v5 = 257;
      }
LABEL_114:
      v39 = !v13;
      if (v5 > 0xFF)
        v39 = 1;
      if ((v39 & 1) == 0)
      {
        v40 = *((_WORD *)v3 + 8) == 31327 && v3[1] == 0x7265646E69616D65;
        if (v40 && *v3 == 0x725F6E6564646968)
          v5 = 257;
      }
      v42 = v2 ^ 1;
      if (v5 > 0xFF)
        v43 = 1;
      else
        v43 = v2 ^ 1;
      if ((v43 & 1) == 0)
      {
        v44 = *(uint64_t *)((char *)v3 + 14) == 0x785F74657366666FLL && v3[1] == 0x666F5F6C61626F6CLL;
        if (v44 && *v3 == 0x675F6E6564646968)
          v5 = 257;
      }
      if (v5 > 0xFF)
        v42 = 1;
      if ((v42 & 1) == 0)
      {
        v46 = *(uint64_t *)((char *)v3 + 14) == 0x795F74657366666FLL && v3[1] == 0x666F5F6C61626F6CLL;
        if (v46 && *v3 == 0x675F6E6564646968)
          v5 = 257;
      }
      v48 = v2 ^ 1;
      if (v5 > 0xFF)
        v48 = 1;
      if ((v48 & 1) == 0)
      {
        v49 = *(uint64_t *)((char *)v3 + 14) == 0x7A5F74657366666FLL && v3[1] == 0x666F5F6C61626F6CLL;
        if (v49 && *v3 == 0x675F6E6564646968)
          v5 = 257;
      }
      v51 = v5 < 0x100;
      v52 = v4 == 16;
      if (v4 == 16 && v5 <= 0xFF)
      {
        if (v3[1] == 0x736D69645F646972 && *v3 == 0x675F6E6564646968)
          v5 = 257;
        v52 = 1;
        goto LABEL_192;
      }
      if (v4 == 11 && v5 <= 0xFF)
      {
        v54 = *v3;
        v55 = *(uint64_t *)((char *)v3 + 3) == 0x656E6F6E5F6E6564;
        v56 = 0x6E5F6E6564646968;
        goto LABEL_187;
      }
LABEL_181:
      if (!v15 || !v51)
        goto LABEL_192;
      v54 = *v3;
      v55 = *((_DWORD *)v3 + 4) == 1919247974 && v3[1] == 0x75625F66746E6972;
      v56 = 0x705F6E6564646968;
LABEL_187:
      if (v55 && v54 == v56)
        v5 = 257;
LABEL_192:
      if (v2 && v5 <= 0xFF)
      {
        v60 = *(uint64_t *)((char *)v3 + 14) == 0x7265666675625F6CLL && v3[1] == 0x5F6C6C616374736FLL;
        if (v60 && *v3 == 0x685F6E6564646968)
          v5 = 257;
      }
      if (v4 == 14 && v5 <= 0xFF)
      {
        v62 = *v3;
        v63 = *(uint64_t *)((char *)v3 + 6) == 0x31765F706165685FLL;
        v64 = 0x685F6E6564646968;
      }
      else
      {
        v65 = v15 ^ 1;
        if (v5 > 0xFF)
          v65 = 1;
        if ((v65 & 1) != 0)
        {
          if (v4 == 24 && v5 <= 0xFF)
          {
            v62 = *v3;
            v63 = v3[2] == 0x6E6F697463615F6ELL && v3[1] == 0x6F6974656C706D6FLL;
            v64 = 0x635F6E6564646968;
          }
          else
          {
            if (v4 != 25 || v5 > 0xFF)
              goto LABEL_232;
            v62 = *v3;
            v63 = *((_BYTE *)v3 + 24) == 103 && v3[2] == 0x72615F636E79735FLL && v3[1] == 0x6469726769746C75;
            v64 = 0x6D5F6E6564646968;
          }
        }
        else
        {
          v62 = *v3;
          v63 = *((_DWORD *)v3 + 4) == 1702192501 && v3[1] == 0x715F746C75616665;
          v64 = 0x645F6E6564646968;
        }
      }
      if (v63 && v62 == v64)
        v5 = 257;
LABEL_232:
      v68 = !v14;
      if (v5 > 0xFF)
        v68 = 1;
      if ((v68 & 1) == 0)
      {
        v69 = *(uint64_t *)((char *)v3 + 11) == 0x657361625F657461 && v3[1] == 0x625F657461766972;
        if (v69 && *v3 == 0x705F6E6564646968)
          v5 = 257;
      }
      v71 = !v13;
      if (v5 > 0xFF)
        v71 = 1;
      if ((v71 & 1) == 0)
      {
        v72 = *v3;
        v73 = *((_WORD *)v3 + 8) == 25971 && v3[1] == 0x61625F6465726168;
        v74 = 0x735F6E6564646968;
LABEL_254:
        if (v73 && v72 == v74)
          v5 = 257;
        goto LABEL_259;
      }
      v75 = !v52;
      if (v5 > 0xFF)
        v75 = 1;
      if ((v75 & 1) == 0)
      {
        v72 = *v3;
        v73 = v3[1] == 0x7274705F65756575;
        v74 = 0x715F6E6564646968;
        goto LABEL_254;
      }
LABEL_259:
      if ((_BYTE)v5)
        v77 = v5 >> 8 == 0;
      else
        v77 = 1;
      return !v77;
  }
}

BOOL sub_1C4FD4BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v7;
  int v8;
  BOOL v9;
  BOOL v11;

  v2 = *(_QWORD *)(a2 + 8);
  switch(*(_QWORD *)(a2 + 16))
  {
    case 5:
      v3 = *(_DWORD *)v2 ^ 0x61636F6C;
      v4 = *(unsigned __int8 *)(v2 + 4);
      v5 = 108;
      goto LABEL_11;
    case 6:
      v8 = *(_DWORD *)v2 ^ 0x626F6C67 | *(unsigned __int16 *)(v2 + 4) ^ 0x6C61;
      v7 = v8 == 0;
      if (v8)
      {
        v7 = (*(_DWORD *)v2 ^ 0x69676572 | *(unsigned __int16 *)(v2 + 4) ^ 0x6E6F) == 0;
        v9 = (*(_DWORD *)v2 ^ 0x69676572 | *(unsigned __int16 *)(v2 + 4) ^ 0x6E6F) == 0;
        goto LABEL_19;
      }
      v6 = 1;
      break;
    case 7:
      if (*(_DWORD *)v2 == 1986622064 && *(_DWORD *)(v2 + 3) == 1702125942)
      {
        v6 = 1;
        v7 = 1;
      }
      else
      {
        v3 = *(_DWORD *)v2 ^ 0x656E6567;
        v4 = *(_DWORD *)(v2 + 3);
        v5 = 1667854949;
LABEL_11:
        v11 = (v3 | v4 ^ v5) == 0;
LABEL_13:
        v7 = v11;
        v9 = v11;
LABEL_19:
        v6 = v9;
      }
      break;
    case 8:
      v11 = *(_QWORD *)v2 == 0x746E6174736E6F63;
      goto LABEL_13;
    default:
      v6 = 0;
      v7 = 0;
      return v7 && v6 != 0;
  }
  return v7 && v6 != 0;
}

BOOL sub_1C4FD4D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  BOOL v5;
  uint64_t v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  if (v2 == 10)
  {
    v6 = *(_QWORD *)v3 ^ 0x6E6F5F6574697277 | *(unsigned __int16 *)(v3 + 8) ^ 0x796CLL;
    v4 = v6 == 0;
    if (v6)
    {
      v4 = (*(_QWORD *)v3 ^ 0x6972775F64616572 | *(unsigned __int16 *)(v3 + 8) ^ 0x6574) == 0;
      v5 = (*(_QWORD *)v3 ^ 0x6972775F64616572 | *(unsigned __int16 *)(v3 + 8) ^ 0x6574) == 0;
      goto LABEL_6;
    }
    v7 = 1;
  }
  else
  {
    if (v2 == 9)
    {
      v4 = (*(_QWORD *)v3 ^ 0x6C6E6F5F64616572 | *(unsigned __int8 *)(v3 + 8) ^ 0x79) == 0;
      v5 = (*(_QWORD *)v3 ^ 0x6C6E6F5F64616572 | *(unsigned __int8 *)(v3 + 8) ^ 0x79) == 0;
LABEL_6:
      v7 = v5;
      return v4 && v7 != 0;
    }
    v7 = 0;
    v4 = 0;
  }
  return v4 && v7 != 0;
}

BOOL sub_1C4FD4E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  BOOL v5;
  uint64_t v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  if (v2 == 10)
  {
    v6 = *(_QWORD *)v3 ^ 0x6E6F5F6574697277 | *(unsigned __int16 *)(v3 + 8) ^ 0x796CLL;
    v4 = v6 == 0;
    if (v6)
    {
      v4 = (*(_QWORD *)v3 ^ 0x6972775F64616572 | *(unsigned __int16 *)(v3 + 8) ^ 0x6574) == 0;
      v5 = (*(_QWORD *)v3 ^ 0x6972775F64616572 | *(unsigned __int16 *)(v3 + 8) ^ 0x6574) == 0;
      goto LABEL_6;
    }
    v7 = 1;
  }
  else
  {
    if (v2 == 9)
    {
      v4 = (*(_QWORD *)v3 ^ 0x6C6E6F5F64616572 | *(unsigned __int8 *)(v3 + 8) ^ 0x79) == 0;
      v5 = (*(_QWORD *)v3 ^ 0x6C6E6F5F64616572 | *(unsigned __int8 *)(v3 + 8) ^ 0x79) == 0;
LABEL_6:
      v7 = v5;
      return v4 && v7 != 0;
    }
    v7 = 0;
    v4 = 0;
  }
  return v4 && v7 != 0;
}

BOOL sub_1C4FD4F00(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned __int16 *v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v20;
  BOOL v21;

  v2 = 0;
  v3 = *(unsigned __int16 **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = 1;
  switch(v4)
  {
    case 3:
      v6 = *v3 ^ 0x4348 | *((unsigned __int8 *)v3 + 2) ^ 0x43;
      v7 = v6 == 0;
      if (v6)
      {
        v8 = *v3 ^ 0x4948 | *((unsigned __int8 *)v3 + 2) ^ 0x50;
        v7 = v8 == 0;
        v9 = v8 == 0;
        goto LABEL_5;
      }
      v10 = 1;
      goto LABEL_33;
    case 6:
      v7 = (*(_DWORD *)v3 ^ 0x6E65704F | v3[2] ^ 0x504D) == 0;
      v9 = (*(_DWORD *)v3 ^ 0x6E65704F | v3[2] ^ 0x504D) == 0;
LABEL_5:
      v10 = v9;
      goto LABEL_33;
    case 8:
      v11 = bswap64(*(_QWORD *)v3);
      v12 = v11 >= 0x4F70656E434C2043;
      v13 = v11 > 0x4F70656E434C2043;
      v14 = !v12;
      v15 = v13 - v14;
      goto LABEL_16;
    case 10:
      v16 = 0x4F70656E434C2043;
      v17 = bswap64(*(_QWORD *)v3);
      if (v17 == 0x4F70656E434C2043 && (v17 = bswap32(v3[4]) >> 16, v16 = 11051, (_DWORD)v17 == 11051))
      {
        v15 = 0;
      }
      else if (v17 < v16)
      {
        v15 = -1;
      }
      else
      {
        v15 = 1;
      }
LABEL_16:
      v5 = v15 != 0;
      if (v15)
        v2 = 0;
      else
        v2 = 257;
      goto LABEL_19;
    default:
LABEL_19:
      if (v4 != 9 || !v5)
      {
        v10 = v2;
        v7 = v2 >> 8;
      }
      else
      {
        if (*((_BYTE *)v3 + 8) == 114 && *(_QWORD *)v3 == 0x656C626D65737341)
          v20 = 257;
        else
          v20 = v2;
        v10 = v20;
        v7 = v20 >> 8;
      }
LABEL_33:
      if (v7)
        v21 = v10 == 0;
      else
        v21 = 1;
      return !v21;
  }
}

const char *llvm::dwarf::TagString(llvm::dwarf *this)
{
  int v1;
  const char *result;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  const char *v10;

  v1 = (int)this;
  result = 0;
  if (v1 > 16512)
  {
    if (v1 > 20752)
    {
      if (v1 > 34661)
      {
        if (v1 >= 40960)
        {
          if (v1 == 40960)
          {
            return "DW_TAG_PGI_kanji_type";
          }
          else if (v1 == 40992)
          {
            return "DW_TAG_PGI_interface_block";
          }
          else
          {
            switch(v1)
            {
              case 45056:
                result = "DW_TAG_BORLAND_property";
                break;
              case 45057:
                result = "DW_TAG_BORLAND_Delphi_string";
                break;
              case 45058:
                result = "DW_TAG_BORLAND_Delphi_dynamic_array";
                break;
              case 45059:
                result = "DW_TAG_BORLAND_Delphi_set";
                break;
              case 45060:
                result = "DW_TAG_BORLAND_Delphi_variant";
                break;
              default:
                return result;
            }
          }
        }
        else
        {
          v8 = "DW_TAG_UPC_relaxed";
          if (v1 != 34663)
            v8 = 0;
          if (v1 == 34662)
            return "DW_TAG_UPC_strict_type";
          else
            return v8;
        }
      }
      else if (v1 > 32771)
      {
        switch(v1)
        {
          case 32772:
            result = "DW_TAG_GHS_namespace";
            break;
          case 32773:
            result = "DW_TAG_GHS_using_namespace";
            break;
          case 32774:
            result = "DW_TAG_GHS_using_declaration";
            break;
          case 32775:
            result = "DW_TAG_GHS_template_templ_param";
            break;
          default:
            v9 = v1 == 34661;
            v10 = "DW_TAG_UPC_shared_type";
LABEL_124:
            if (v9)
              result = v10;
            else
              result = 0;
            break;
        }
      }
      else
      {
        v3 = "DW_TAG_LLVM_annotation";
        if (v1 != 24576)
          v3 = 0;
        if (v1 == 20753)
          return "DW_TAG_ALTIUM_rom";
        else
          return v3;
      }
    }
    else if (v1 > 17151)
    {
      v4 = "DW_TAG_ALTIUM_rev_carry_type";
      if (v1 != 20739)
        v4 = 0;
      if (v1 == 20738)
        v5 = "DW_TAG_ALTIUM_mwa_circ_type";
      else
        v5 = v4;
      v6 = "DW_TAG_ALTIUM_circ_type";
      if (v1 != 20737)
        v6 = 0;
      if (v1 == 17152)
        v7 = "DW_TAG_APPLE_ptrauth_type";
      else
        v7 = v6;
      if (v1 <= 20737)
        return v7;
      else
        return v5;
    }
    else if (v1 > 16895)
    {
      switch(v1)
      {
        case 16896:
          result = "DW_TAG_APPLE_property";
          break;
        case 16897:
          result = "DW_TAG_SUN_function_template";
          break;
        case 16898:
          result = "DW_TAG_SUN_class_template";
          break;
        case 16899:
          result = "DW_TAG_SUN_struct_template";
          break;
        case 16900:
          result = "DW_TAG_SUN_union_template";
          break;
        case 16901:
          result = "DW_TAG_SUN_indirect_inheritance";
          break;
        case 16902:
          result = "DW_TAG_SUN_codeflags";
          break;
        case 16903:
          result = "DW_TAG_SUN_memop_info";
          break;
        case 16904:
          result = "DW_TAG_SUN_omp_child_func";
          break;
        case 16905:
          result = "DW_TAG_SUN_rtti_descriptor";
          break;
        case 16906:
          result = "DW_TAG_SUN_dtor_info";
          break;
        case 16907:
          result = "DW_TAG_SUN_dtor";
          break;
        case 16908:
          result = "DW_TAG_SUN_f90_interface";
          break;
        case 16909:
          result = "DW_TAG_SUN_fortran_vax_structure";
          break;
        default:
          v9 = v1 == 17151;
          v10 = "DW_TAG_SUN_hi";
          goto LABEL_124;
      }
    }
    else if (v1 == 16513)
    {
      return "DW_TAG_MIPS_loop";
    }
    else
    {
      switch(v1)
      {
        case 16641:
          result = "DW_TAG_format_label";
          break;
        case 16642:
          result = "DW_TAG_function_template";
          break;
        case 16643:
          result = "DW_TAG_class_template";
          break;
        case 16644:
          result = "DW_TAG_GNU_BINCL";
          break;
        case 16645:
          result = "DW_TAG_GNU_EINCL";
          break;
        case 16646:
          result = "DW_TAG_GNU_template_template_param";
          break;
        case 16647:
          result = "DW_TAG_GNU_template_parameter_pack";
          break;
        case 16648:
          result = "DW_TAG_GNU_formal_parameter_pack";
          break;
        case 16649:
          result = "DW_TAG_GNU_call_site";
          break;
        case 16650:
          result = "DW_TAG_GNU_call_site_parameter";
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    switch(v1)
    {
      case 0:
        result = "DW_TAG_null";
        break;
      case 1:
        result = "DW_TAG_array_type";
        break;
      case 2:
        result = "DW_TAG_class_type";
        break;
      case 3:
        result = "DW_TAG_entry_point";
        break;
      case 4:
        result = "DW_TAG_enumeration_type";
        break;
      case 5:
        result = "DW_TAG_formal_parameter";
        break;
      case 8:
        result = "DW_TAG_imported_declaration";
        break;
      case 10:
        result = "DW_TAG_label";
        break;
      case 11:
        result = "DW_TAG_lexical_block";
        break;
      case 13:
        result = "DW_TAG_member";
        break;
      case 15:
        result = "DW_TAG_pointer_type";
        break;
      case 16:
        result = "DW_TAG_reference_type";
        break;
      case 17:
        result = "DW_TAG_compile_unit";
        break;
      case 18:
        result = "DW_TAG_string_type";
        break;
      case 19:
        result = "DW_TAG_structure_type";
        break;
      case 21:
        result = "DW_TAG_subroutine_type";
        break;
      case 22:
        result = "DW_TAG_typedef";
        break;
      case 23:
        result = "DW_TAG_union_type";
        break;
      case 24:
        result = "DW_TAG_unspecified_parameters";
        break;
      case 25:
        result = "DW_TAG_variant";
        break;
      case 26:
        result = "DW_TAG_common_block";
        break;
      case 27:
        result = "DW_TAG_common_inclusion";
        break;
      case 28:
        result = "DW_TAG_inheritance";
        break;
      case 29:
        result = "DW_TAG_inlined_subroutine";
        break;
      case 30:
        result = "DW_TAG_module";
        break;
      case 31:
        result = "DW_TAG_ptr_to_member_type";
        break;
      case 32:
        result = "DW_TAG_set_type";
        break;
      case 33:
        result = "DW_TAG_subrange_type";
        break;
      case 34:
        result = "DW_TAG_with_stmt";
        break;
      case 35:
        result = "DW_TAG_access_declaration";
        break;
      case 36:
        result = "DW_TAG_base_type";
        break;
      case 37:
        result = "DW_TAG_catch_block";
        break;
      case 38:
        result = "DW_TAG_const_type";
        break;
      case 39:
        result = "DW_TAG_constant";
        break;
      case 40:
        result = "DW_TAG_enumerator";
        break;
      case 41:
        result = "DW_TAG_file_type";
        break;
      case 42:
        result = "DW_TAG_friend";
        break;
      case 43:
        result = "DW_TAG_namelist";
        break;
      case 44:
        result = "DW_TAG_namelist_item";
        break;
      case 45:
        result = "DW_TAG_packed_type";
        break;
      case 46:
        result = "DW_TAG_subprogram";
        break;
      case 47:
        result = "DW_TAG_template_type_parameter";
        break;
      case 48:
        result = "DW_TAG_template_value_parameter";
        break;
      case 49:
        result = "DW_TAG_thrown_type";
        break;
      case 50:
        result = "DW_TAG_try_block";
        break;
      case 51:
        result = "DW_TAG_variant_part";
        break;
      case 52:
        result = "DW_TAG_variable";
        break;
      case 53:
        result = "DW_TAG_volatile_type";
        break;
      case 54:
        result = "DW_TAG_dwarf_procedure";
        break;
      case 55:
        result = "DW_TAG_restrict_type";
        break;
      case 56:
        result = "DW_TAG_interface_type";
        break;
      case 57:
        result = "DW_TAG_namespace";
        break;
      case 58:
        result = "DW_TAG_imported_module";
        break;
      case 59:
        result = "DW_TAG_unspecified_type";
        break;
      case 60:
        result = "DW_TAG_partial_unit";
        break;
      case 61:
        result = "DW_TAG_imported_unit";
        break;
      case 63:
        result = "DW_TAG_condition";
        break;
      case 64:
        result = "DW_TAG_shared_type";
        break;
      case 65:
        result = "DW_TAG_type_unit";
        break;
      case 66:
        result = "DW_TAG_rvalue_reference_type";
        break;
      case 67:
        result = "DW_TAG_template_alias";
        break;
      case 68:
        result = "DW_TAG_coarray_type";
        break;
      case 69:
        result = "DW_TAG_generic_subrange";
        break;
      case 70:
        result = "DW_TAG_dynamic_type";
        break;
      case 71:
        result = "DW_TAG_atomic_type";
        break;
      case 72:
        result = "DW_TAG_call_site";
        break;
      case 73:
        result = "DW_TAG_call_site_parameter";
        break;
      case 74:
        result = "DW_TAG_skeleton_unit";
        break;
      case 75:
        result = "DW_TAG_immutable_type";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::dwarf::getTag(char *__s1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v39;
  int v40;
  int v61;
  int v62;
  _BOOL4 v90;
  uint64_t v96;
  uint64_t v97;
  int v102;
  int v103;
  char v104;
  char v105;
  char v110;
  char v111;
  int v118;
  int v119;
  int v120;
  char v124;
  char v125;
  uint64_t v142;
  BOOL v143;
  BOOL v150;
  uint64_t v159;
  uint64_t v160;
  char v163;
  char v164;
  char v178;
  BOOL v179;
  char v201;
  char v202;
  char v203;
  BOOL v204;
  int v211;
  BOOL v219;
  char v225;
  BOOL v226;
  char v233;
  char v245;
  char v246;
  char v252;
  char v253;
  uint64_t v254;
  char v255;
  char v256;

  v4 = 0;
  v5 = 0x100000002;
  v6 = 1;
  switch(a2)
  {
    case 11:
      if (*(_QWORD *)__s1 == 0x6E5F4741545F5744 && *(_QWORD *)(__s1 + 3) == 0x6C6C756E5F474154)
        v4 = 0x100000000;
      else
        v4 = 0;
      goto LABEL_1081;
    case 12:
      if (*(_QWORD *)__s1 != 0x6C5F4741545F5744 || *((_DWORD *)__s1 + 2) != 1818583649)
        goto LABEL_104;
      v4 = 0x10000000ALL;
      goto LABEL_1081;
    case 13:
      if (*(_QWORD *)__s1 != 0x6D5F4741545F5744 || *(_QWORD *)(__s1 + 5) != 0x7265626D656D5F47)
        goto LABEL_104;
      v4 = 0x10000000DLL;
      goto LABEL_1081;
    case 14:
      if (*(_QWORD *)__s1 == 0x745F4741545F5744 && *(_QWORD *)(__s1 + 6) == 0x666564657079745FLL)
      {
        v4 = 0x100000016;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x765F4741545F5744 || *(_QWORD *)(__s1 + 6) != 0x746E61697261765FLL)
          goto LABEL_96;
        v4 = 0x100000019;
      }
      goto LABEL_1081;
    case 17:
      if (*(_QWORD *)__s1 == 0x615F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x7079745F79617272 && __s1[16] == 101)
      {
        v6 = 0;
        v4 = 0x100000001;
        goto LABEL_105;
      }
      if (*(_QWORD *)__s1 == 0x635F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x7079745F7373616CLL && __s1[16] == 101)
      {
        v160 = 2;
        goto LABEL_590;
      }
      if (*(_QWORD *)__s1 != 0x755F4741545F5744 || *((_QWORD *)__s1 + 1) != 0x7079745F6E6F696ELL || __s1[16] != 101)
      {
        v4 = 0;
        goto LABEL_505;
      }
      v4 = 0x100000017;
      goto LABEL_1081;
    case 18:
      if (*(_QWORD *)__s1 == 0x655F4741545F5744
        && *((_QWORD *)__s1 + 1) == 0x696F705F7972746ELL
        && *((_WORD *)__s1 + 8) == 29806)
      {
        goto LABEL_587;
      }
      if (*(_QWORD *)__s1 == 0x735F4741545F5744
        && *((_QWORD *)__s1 + 1) == 0x79745F676E697274
        && *((_WORD *)__s1 + 8) == 25968)
      {
        v4 = 0x100000012;
      }
      else
      {
        if (a2 != 18)
          goto LABEL_104;
        if (*(_QWORD *)__s1 != 0x695F4741545F5744
          || *((_QWORD *)__s1 + 1) != 0x6E6174697265686ELL
          || *((_WORD *)__s1 + 8) != 25955)
        {
          goto LABEL_189;
        }
        v4 = 0x10000001CLL;
      }
      goto LABEL_1081;
    case 19:
      if (*(_QWORD *)__s1 == 0x705F4741545F5744
        && *((_QWORD *)__s1 + 1) == 0x745F7265746E696FLL
        && *(_QWORD *)(__s1 + 11) == 0x657079745F726574)
      {
        v4 = 0x10000000FLL;
      }
      else if (*(_QWORD *)__s1 == 0x635F4741545F5744
             && *((_QWORD *)__s1 + 1) == 0x755F656C69706D6FLL
             && *(_QWORD *)(__s1 + 11) == 0x74696E755F656C69)
      {
        v4 = 0x100000011;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x635F4741545F5744
          || *((_QWORD *)__s1 + 1) != 0x6C625F6E6F6D6D6FLL
          || *(_QWORD *)(__s1 + 11) != 0x6B636F6C625F6E6FLL)
        {
LABEL_96:
          v4 = 0;
          goto LABEL_126;
        }
        v4 = 0x10000001ALL;
      }
      goto LABEL_1081;
    case 20:
      if (*(_QWORD *)__s1 != 0x6C5F4741545F5744
        || *((_QWORD *)__s1 + 1) != 0x625F6C6163697865
        || *((_DWORD *)__s1 + 4) != 1801678700)
      {
LABEL_104:
        v4 = 0;
        goto LABEL_105;
      }
      v4 = 0x10000000BLL;
      goto LABEL_1081;
    case 21:
      if (*(_QWORD *)__s1 == 0x725F4741545F5744
        && *((_QWORD *)__s1 + 1) == 0x65636E6572656665
        && *(_QWORD *)(__s1 + 13) == 0x657079745F65636ELL)
      {
        v4 = 0x100000010;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x735F4741545F5744
          || *((_QWORD *)__s1 + 1) != 0x6572757463757274
          || *(_QWORD *)(__s1 + 13) != 0x657079745F657275)
        {
          v39 = 0;
          v4 = 0;
          v40 = 0;
          goto LABEL_360;
        }
        v4 = 0x100000013;
      }
      goto LABEL_1081;
    case 22:
      if (*(_QWORD *)__s1 != 0x735F4741545F5744
        || *((_QWORD *)__s1 + 1) != 0x6E6974756F726275
        || *(_QWORD *)(__s1 + 14) != 0x657079745F656E69)
      {
        v40 = 0;
        v4 = 0;
        v39 = 0;
        goto LABEL_349;
      }
      v4 = 0x100000015;
      goto LABEL_1081;
    case 23:
      if (*(_QWORD *)__s1 == 0x655F4741545F5744
        && *((_QWORD *)__s1 + 1) == 0x69746172656D756ELL
        && *(_QWORD *)(__s1 + 15) == 0x657079745F6E6F69)
      {
        v4 = 0x100000004;
      }
      else if (*(_QWORD *)__s1 == 0x665F4741545F5744
             && *((_QWORD *)__s1 + 1) == 0x61705F6C616D726FLL
             && *(_QWORD *)(__s1 + 15) == 0x726574656D617261)
      {
        v4 = 0x100000005;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x635F4741545F5744
          || *((_QWORD *)__s1 + 1) != 0x6E695F6E6F6D6D6FLL
          || *(_QWORD *)(__s1 + 15) != 0x6E6F6973756C636ELL)
        {
LABEL_189:
          v4 = 0;
          goto LABEL_190;
        }
        v4 = 0x10000001BLL;
      }
      goto LABEL_1081;
    case 25:
      if (*(_QWORD *)__s1 == 0x695F4741545F5744
        && *((_QWORD *)__s1 + 1) == 0x735F64656E696C6ELL
        && *((_QWORD *)__s1 + 2) == 0x6E6974756F726275
        && __s1[24] == 101)
      {
        v4 = 0x10000001DLL;
      }
      else if (*(_QWORD *)__s1 == 0x705F4741545F5744
             && *((_QWORD *)__s1 + 1) == 0x656D5F6F745F7274
             && *((_QWORD *)__s1 + 2) == 0x7079745F7265626DLL
             && __s1[24] == 101)
      {
        v4 = 0x10000001FLL;
      }
      else if (*(_QWORD *)__s1 == 0x615F4741545F5744
             && *((_QWORD *)__s1 + 1) == 0x65645F7373656363
             && *((_QWORD *)__s1 + 2) == 0x6F69746172616C63
             && __s1[24] == 110)
      {
        v4 = 0x100000023;
      }
      else if (*(_QWORD *)__s1 == 0x415F4741545F5744
             && *((_QWORD *)__s1 + 1) == 0x7274705F454C5050
             && *((_QWORD *)__s1 + 2) == 0x7079745F68747561
             && __s1[24] == 101)
      {
        v4 = 0x100004300;
      }
      else if (*(_QWORD *)__s1 == 0x535F4741545F5744
             && *((_QWORD *)__s1 + 1) == 0x7373616C635F4E55
             && *((_QWORD *)__s1 + 2) == 0x74616C706D65745FLL
             && __s1[24] == 101)
      {
        v4 = 0x100004202;
      }
      else if (*(_QWORD *)__s1 == 0x535F4741545F5744
             && *((_QWORD *)__s1 + 1) == 0x6E6F696E755F4E55
             && *((_QWORD *)__s1 + 2) == 0x74616C706D65745FLL
             && __s1[24] == 101)
      {
        v4 = 0x100004204;
      }
      else
      {
        if (*(_QWORD *)__s1 != 0x535F4741545F5744
          || *((_QWORD *)__s1 + 1) != 0x635F706D6F5F4E55
          || *((_QWORD *)__s1 + 2) != 0x6E75665F646C6968
          || __s1[24] != 99)
        {
          v4 = 0;
          goto LABEL_484;
        }
        v4 = 0x100004208;
      }
      goto LABEL_1081;
    case 27:
      if (*(_QWORD *)__s1 != 0x695F4741545F5744
        || *((_QWORD *)__s1 + 1) != 0x5F646574726F706DLL
        || *((_QWORD *)__s1 + 2) != 0x746172616C636564
        || *(_QWORD *)(__s1 + 19) != 0x6E6F69746172616CLL)
      {
        v4 = 0;
        goto LABEL_310;
      }
      v4 = 0x100000008;
      goto LABEL_1081;
    case 29:
      if (*(_QWORD *)__s1 != 0x755F4741545F5744
        || *((_QWORD *)__s1 + 1) != 0x696669636570736ELL
        || *((_QWORD *)__s1 + 2) != 0x6D617261705F6465
        || *(_QWORD *)(__s1 + 21) != 0x73726574656D6172)
      {
        v4 = 0;
        v90 = 1;
        goto LABEL_343;
      }
      v4 = 0x100000018;
      goto LABEL_1081;
    default:
LABEL_105:
      if (a2 == 13 && v6)
      {
        if (*(_QWORD *)__s1 == 0x6D5F4741545F5744 && *(_QWORD *)(__s1 + 5) == 0x656C75646F6D5F47)
        {
          v4 = 0x10000001ELL;
          goto LABEL_1081;
        }
        v6 = 1;
LABEL_112:
        if (a2 == 13 && v6)
        {
          if (*(_QWORD *)__s1 == 0x665F4741545F5744 && *(_QWORD *)(__s1 + 5) == 0x646E656972665F47)
          {
            v4 = 0x10000002ALL;
            goto LABEL_1081;
          }
          goto LABEL_118;
        }
        goto LABEL_200;
      }
LABEL_126:
      if (a2 == 15 && v6)
      {
        if (*(_QWORD *)__s1 == 0x735F4741545F5744 && *(_QWORD *)(__s1 + 7) == 0x657079745F746573)
        {
          v4 = 0x100000020;
          goto LABEL_1081;
        }
        if (*(_QWORD *)__s1 == 0x635F4741545F5744 && *(_QWORD *)(__s1 + 7) == 0x746E6174736E6F63)
        {
          v4 = 0x100000027;
          goto LABEL_1081;
        }
        if (*(_QWORD *)__s1 == 0x6E5F4741545F5744 && *(_QWORD *)(__s1 + 7) == 0x7473696C656D616ELL)
        {
          v4 = 0x10000002BLL;
          goto LABEL_1081;
        }
        if (*(_QWORD *)__s1 == 0x765F4741545F5744 && *(_QWORD *)(__s1 + 7) == 0x656C626169726176)
        {
          v4 = 0x100000034;
          goto LABEL_1081;
        }
        v39 = 0;
        v6 = 1;
        v40 = 1;
        goto LABEL_210;
      }
LABEL_190:
      if (a2 == 20 && v6)
      {
        if (*(_QWORD *)__s1 == 0x735F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x5F65676E61726275
          && *((_DWORD *)__s1 + 4) == 1701869940)
        {
          v4 = 0x100000021;
          goto LABEL_1081;
        }
        v6 = 1;
LABEL_200:
        if (a2 == 20 && v6)
        {
          if (*(_QWORD *)__s1 == 0x6E5F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x5F7473696C656D61
            && *((_DWORD *)__s1 + 4) == 1835365481)
          {
            v4 = 0x10000002CLL;
            goto LABEL_1081;
          }
          v39 = 0;
          v40 = 0;
          goto LABEL_210;
        }
        v110 = v6 ^ 1;
        if (a2 == 30)
          v111 = v6 ^ 1;
        else
          v111 = 1;
        if ((v111 & 1) == 0)
        {
          if (*(_QWORD *)__s1 == 0x745F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x5F6574616C706D65
            && *((_QWORD *)__s1 + 2) == 0x7261705F65707974
            && *(_QWORD *)(__s1 + 22) == 0x726574656D617261)
          {
            v4 = 0x10000002FLL;
            goto LABEL_1081;
          }
          if (*(_QWORD *)__s1 == 0x475F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x5F6C6C61635F554ELL
            && *((_QWORD *)__s1 + 2) == 0x7261705F65746973
            && *(_QWORD *)(__s1 + 22) == 0x726574656D617261)
          {
            v4 = 0x10000410ALL;
            goto LABEL_1081;
          }
          v103 = 0;
          v40 = 0;
          v118 = 0;
          v119 = 0;
          v120 = 0;
          v62 = 0;
          goto LABEL_417;
        }
        if (a2 != 31)
          v110 = 1;
        if ((v110 & 1) == 0)
        {
          if (*(_QWORD *)__s1 == 0x745F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x5F6574616C706D65
            && *((_QWORD *)__s1 + 2) == 0x61705F65756C6176
            && *(_QWORD *)(__s1 + 23) == 0x726574656D617261)
          {
            v4 = 0x100000030;
            goto LABEL_1081;
          }
          v62 = 0;
          v120 = 0;
          v40 = 0;
          LOBYTE(v103) = 0;
          goto LABEL_852;
        }
        goto LABEL_597;
      }
      v104 = v6 ^ 1;
      if (a2 == 16)
        v105 = v6 ^ 1;
      else
        v105 = 1;
      if ((v105 & 1) != 0)
      {
        if (a2 != 18)
          v104 = 1;
        if ((v104 & 1) == 0)
        {
          if (*(_QWORD *)__s1 == 0x635F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x6F6C625F68637461
            && *((_WORD *)__s1 + 8) == 27491)
          {
            v4 = 0x100000025;
            goto LABEL_1081;
          }
          if (*(_QWORD *)__s1 == 0x705F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x79745F64656B6361
            && *((_WORD *)__s1 + 8) == 25968)
          {
            v4 = 0x10000002DLL;
            goto LABEL_1081;
          }
          if (*(_QWORD *)__s1 == 0x745F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x79745F6E776F7268
            && *((_WORD *)__s1 + 8) == 25968)
          {
            v4 = 0x100000031;
            goto LABEL_1081;
          }
          if (*(_QWORD *)__s1 == 0x735F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x79745F6465726168
            && *((_WORD *)__s1 + 8) == 25968)
          {
            v4 = 0x100000040;
            goto LABEL_1081;
          }
          if (*(_QWORD *)__s1 == 0x615F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x79745F63696D6F74
            && *((_WORD *)__s1 + 8) == 25968)
          {
            v4 = 0x100000047;
            goto LABEL_1081;
          }
LABEL_484:
          v90 = (v4 & 0x100000000) == 0;
LABEL_485:
          if (a2 == 22 && v90)
          {
            if (*(_QWORD *)__s1 == 0x4C5F4741545F5744
              && *((_QWORD *)__s1 + 1) == 0x6F6E6E615F4D564CLL
              && *(_QWORD *)(__s1 + 14) == 0x6E6F697461746F6ELL)
            {
              v4 = 0x100006000;
              goto LABEL_1081;
            }
            if (*(_QWORD *)__s1 == 0x555F4741545F5744
              && *((_QWORD *)__s1 + 1) == 0x65726168735F4350
              && *(_QWORD *)(__s1 + 14) == 0x657079745F646572)
            {
              v4 = 0x100008765;
              goto LABEL_1081;
            }
            v142 = 0x100008766;
            v143 = (*(_QWORD *)__s1 ^ 0x555F4741545F5744 | *((_QWORD *)__s1 + 1) ^ 0x63697274735F4350 | *(_QWORD *)(__s1 + 14) ^ 0x657079745F746369) == 0;
            goto LABEL_502;
          }
          v163 = !v90;
          v164 = a2 != 20 || !v90;
          if ((v164 & 1) == 0)
          {
            if (*(_QWORD *)__s1 != 0x475F4741545F5744
              || *((_QWORD *)__s1 + 1) != 0x73656D616E5F5348
              || *((_DWORD *)__s1 + 4) != 1701011824)
            {
              goto LABEL_1081;
            }
            v160 = 32772;
            goto LABEL_590;
          }
          if (a2 != 26)
            v163 = 1;
          if ((v163 & 1) == 0)
          {
            if (*(_QWORD *)__s1 == 0x475F4741545F5744
              && *((_QWORD *)__s1 + 1) == 0x676E6973755F5348
              && *((_QWORD *)__s1 + 2) == 0x617073656D616E5FLL
              && *((_WORD *)__s1 + 12) == 25955)
            {
              v4 = 0x100008005;
            }
            else if (*(_QWORD *)__s1 == 0x505F4741545F5744
                   && *((_QWORD *)__s1 + 1) == 0x7265746E695F4947
                   && *((_QWORD *)__s1 + 2) == 0x6F6C625F65636166
                   && *((_WORD *)__s1 + 12) == 27491)
            {
              v4 = 0x10000A020;
            }
            goto LABEL_1081;
          }
          v201 = !v90;
          v202 = a2 != 31 || !v90;
          if ((v202 & 1) == 0)
          {
            v96 = *(_QWORD *)__s1 ^ 0x475F4741545F5744 | *((_QWORD *)__s1 + 1) ^ 0x6C706D65745F5348 | *((_QWORD *)__s1 + 2) ^ 0x706D65745F657461 | *(_QWORD *)(__s1 + 23) ^ 0x6D617261705F6C70;
            v97 = 0x100008007;
            goto LABEL_346;
          }
          if (a2 != 18)
            v201 = 1;
          if ((v201 & 1) == 0)
          {
            v96 = *(_QWORD *)__s1 ^ 0x555F4741545F5744 | *((_QWORD *)__s1 + 1) ^ 0x78616C65725F4350 | *((unsigned __int16 *)__s1 + 8) ^ 0x6465;
            v97 = 0x100008767;
            goto LABEL_346;
          }
          v252 = !v90;
          v253 = a2 != 21 || !v90;
          if ((v253 & 1) == 0)
          {
            v143 = (*(_QWORD *)__s1 ^ 0x505F4741545F5744 | *((_QWORD *)__s1 + 1) ^ 0x696A6E616B5F4947 | *(_QWORD *)(__s1 + 13) ^ 0x657079745F696A6ELL) == 0;
            v142 = 0x10000A000;
LABEL_502:
            if (v143)
              v4 = v142;
            goto LABEL_1081;
          }
          if (a2 != 23)
            v252 = 1;
          if ((v252 & 1) == 0)
          {
            v96 = *(_QWORD *)__s1 ^ 0x425F4741545F5744 | *((_QWORD *)__s1 + 1) ^ 0x705F444E414C524FLL | *(_QWORD *)(__s1 + 15) ^ 0x79747265706F7270;
            v97 = 0x10000B000;
LABEL_346:
            if (!v96)
              v4 = v97;
            goto LABEL_1081;
          }
          v255 = !v90;
          v256 = a2 != 35 || !v90;
          if ((v256 & 1) == 0)
          {
            if (memcmp(__s1, "DW_TAG_BORLAND_Delphi_dynamic_array", 0x23uLL))
              goto LABEL_1081;
            v159 = 45057;
            goto LABEL_586;
          }
          if (a2 != 25)
            v255 = 1;
          if ((v255 & 1) != 0)
          {
LABEL_343:
            if (a2 != 29 || !v90)
              goto LABEL_1081;
            v96 = *(_QWORD *)__s1 ^ 0x425F4741545F5744 | *((_QWORD *)__s1 + 1) ^ 0x445F444E414C524FLL | *((_QWORD *)__s1 + 2) ^ 0x61765F6968706C65 | *(_QWORD *)(__s1 + 21) ^ 0x746E61697261765FLL;
            v97 = 0x10000B004;
            goto LABEL_346;
          }
          if (*(_QWORD *)__s1 != 0x425F4741545F5744
            || *((_QWORD *)__s1 + 1) != 0x445F444E414C524FLL
            || *((_QWORD *)__s1 + 2) != 0x65735F6968706C65
            || __s1[24] != 116)
          {
            goto LABEL_1081;
          }
          v254 = 45057;
LABEL_1053:
          v4 = v254 & 0xFFFF0000FFFFFFFDLL | 0x100000002;
          goto LABEL_1081;
        }
LABEL_505:
        if (a2 == 17 && v6)
        {
          if (*(_QWORD *)__s1 == 0x635F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x7079745F74736E6FLL
            && __s1[16] == 101)
          {
            v4 = 0x100000026;
            goto LABEL_1081;
          }
          if (*(_QWORD *)__s1 == 0x655F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x6F746172656D756ELL
            && __s1[16] == 114)
          {
            v4 = 0x100000028;
            goto LABEL_1081;
          }
          if (*(_QWORD *)__s1 == 0x735F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x6172676F72706275
            && __s1[16] == 109)
          {
            v4 = 0x10000002ELL;
            goto LABEL_1081;
          }
LABEL_597:
          v39 = 0;
          goto LABEL_598;
        }
        goto LABEL_112;
      }
      if (*(_QWORD *)__s1 == 0x775F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x746D74735F687469)
      {
        v4 = 0x100000022;
        goto LABEL_1081;
      }
      if (*(_QWORD *)__s1 == 0x625F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x657079745F657361)
      {
        v4 = 0x100000024;
        goto LABEL_1081;
      }
      if (*(_QWORD *)__s1 == 0x665F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x657079745F656C69)
      {
        v4 = 0x100000029;
        goto LABEL_1081;
      }
      if (*(_QWORD *)__s1 == 0x745F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x6B636F6C625F7972)
      {
        v4 = 0x100000032;
        goto LABEL_1081;
      }
      v6 = 1;
      v39 = 1;
LABEL_598:
      v40 = 0;
      if (a2 == 19 && v6)
      {
        if (*(_QWORD *)__s1 == 0x765F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x705F746E61697261
          && *(_QWORD *)(__s1 + 11) == 0x747261705F746E61)
        {
          v4 = 0x100000033;
          goto LABEL_1081;
        }
        v40 = 0;
        v62 = 0;
        v6 = 1;
        v61 = 1;
        if (!v39)
          goto LABEL_433;
        goto LABEL_429;
      }
LABEL_210:
      if (a2 == 20 && v6)
      {
        if (*(_QWORD *)__s1 == 0x765F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x5F656C6974616C6FLL
          && *((_DWORD *)__s1 + 4) == 1701869940)
        {
          v4 = 0x100000035;
          goto LABEL_1081;
        }
        if (*(_QWORD *)__s1 == 0x725F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x5F74636972747365
          && *((_DWORD *)__s1 + 4) == 1701869940)
        {
          v4 = 0x100000037;
          goto LABEL_1081;
        }
        v61 = 0;
        v6 = 1;
        v62 = 1;
        if (!v39)
          goto LABEL_433;
        goto LABEL_429;
      }
LABEL_349:
      if (a2 == 22 && v6)
      {
        if (*(_QWORD *)__s1 == 0x645F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x6F72705F66726177
          && *(_QWORD *)(__s1 + 14) == 0x6572756465636F72)
        {
          v4 = 0x100000036;
          goto LABEL_1081;
        }
        v61 = 0;
        v62 = 0;
        v6 = 1;
        if (!v39)
          goto LABEL_433;
        goto LABEL_429;
      }
LABEL_360:
      v61 = 0;
      if (a2 == 21 && v6)
      {
        if (*(_QWORD *)__s1 == 0x695F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x656361667265746ELL
          && *(_QWORD *)(__s1 + 13) == 0x657079745F656361)
        {
          v4 = 0x100000038;
          goto LABEL_1081;
        }
        v102 = 0;
        v62 = 0;
        v6 = 1;
        v103 = 1;
        goto LABEL_632;
      }
      v62 = 0;
      if (v39)
      {
LABEL_429:
        if (*(_QWORD *)__s1 == 0x6E5F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x6563617073656D61)
        {
          v4 = 0x100000039;
          goto LABEL_1081;
        }
      }
LABEL_433:
      v124 = v6 ^ 1;
      if (a2 == 22)
        v125 = v6 ^ 1;
      else
        v125 = 1;
      if ((v125 & 1) != 0)
      {
        if (a2 != 23)
          v124 = 1;
        if ((v124 & 1) == 0)
        {
          v150 = *(_QWORD *)__s1 == 0x755F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x696669636570736ELL;
          if (v150 && *(_QWORD *)(__s1 + 15) == 0x657079745F646569)
          {
            v4 = 0x10000003BLL;
            goto LABEL_1081;
          }
        }
      }
      else if (*(_QWORD *)__s1 == 0x695F4741545F5744
             && *((_QWORD *)__s1 + 1) == 0x5F646574726F706DLL
             && *(_QWORD *)(__s1 + 14) == 0x656C75646F6D5F64)
      {
        v4 = 0x10000003ALL;
        goto LABEL_1081;
      }
      if (v61)
      {
        if (*(_QWORD *)__s1 == 0x705F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x755F6C6169747261
          && *(_QWORD *)(__s1 + 11) == 0x74696E755F6C6169)
        {
          v4 = 0x10000003CLL;
          goto LABEL_1081;
        }
        v103 = 0;
        v102 = 1;
      }
      else if (v62)
      {
        if (*(_QWORD *)__s1 == 0x695F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x5F646574726F706DLL
          && *((_DWORD *)__s1 + 4) == 1953066613)
        {
          v4 = 0x10000003DLL;
          goto LABEL_1081;
        }
        v103 = 0;
        v102 = 0;
        v62 = 1;
      }
      else
      {
        v103 = 0;
        v102 = 0;
      }
LABEL_632:
      if (v39)
      {
        if (*(_QWORD *)__s1 == 0x635F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x6E6F697469646E6FLL)
        {
          v4 = 0x10000003FLL;
          goto LABEL_1081;
        }
        if (*(_QWORD *)__s1 == 0x745F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x74696E755F657079)
        {
          v4 = 0x100000041;
          goto LABEL_1081;
        }
      }
      if (a2 == 28)
        v118 = v6;
      else
        v118 = 0;
      if (v118 == 1)
      {
        if (*(_QWORD *)__s1 == 0x725F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x65725F65756C6176
          && *((_QWORD *)__s1 + 2) == 0x5F65636E65726566
          && *((_DWORD *)__s1 + 6) == 1701869940)
        {
          v4 = 0x100000042;
          goto LABEL_1081;
        }
      }
      else if (v103)
      {
        if (*(_QWORD *)__s1 == 0x745F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x5F6574616C706D65
          && *(_QWORD *)(__s1 + 13) == 0x7361696C615F6574)
        {
          v4 = 0x100000043;
          goto LABEL_1081;
        }
        v103 = 1;
      }
      if (v102)
      {
        if (*(_QWORD *)__s1 == 0x635F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x745F79617272616FLL
          && *(_QWORD *)(__s1 + 11) == 0x657079745F796172)
        {
          v4 = 0x100000044;
          goto LABEL_1081;
        }
        if (*(_QWORD *)__s1 == 0x645F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x745F63696D616E79
          && *(_QWORD *)(__s1 + 11) == 0x657079745F63696DLL)
        {
          v4 = 0x100000046;
          goto LABEL_1081;
        }
      }
      else
      {
        v178 = v6 ^ 1;
        if (a2 != 23)
          v178 = 1;
        if ((v178 & 1) == 0)
        {
          v179 = *(_QWORD *)__s1 == 0x675F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x735F636972656E65;
          if (v179 && *(_QWORD *)(__s1 + 15) == 0x65676E6172627573)
          {
            v4 = 0x100000045;
            goto LABEL_1081;
          }
        }
      }
      if (v39)
      {
        if (*(_QWORD *)__s1 == 0x635F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x657469735F6C6C61)
        {
          v4 = 0x100000048;
          goto LABEL_1081;
        }
      }
      if (a2 == 26)
        v119 = v6;
      else
        v119 = 0;
      if (v119 == 1)
      {
        if (*(_QWORD *)__s1 == 0x635F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x657469735F6C6C61
          && *((_QWORD *)__s1 + 2) == 0x74656D617261705FLL
          && *((_WORD *)__s1 + 12) == 29285)
        {
          v4 = 0x100000049;
          goto LABEL_1081;
        }
      }
      else if (v62)
      {
        if (*(_QWORD *)__s1 == 0x735F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x5F6E6F74656C656BLL
          && *((_DWORD *)__s1 + 4) == 1953066613)
        {
          v4 = 0x10000004ALL;
          goto LABEL_1081;
        }
        v62 = 1;
      }
      if (v103)
      {
        if (*(_QWORD *)__s1 == 0x695F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x656C626174756D6DLL
          && *(_QWORD *)(__s1 + 13) == 0x657079745F656C62)
        {
          v4 = 0x10000004BLL;
          goto LABEL_1081;
        }
      }
      else if (v39)
      {
        if (*(_QWORD *)__s1 == 0x4D5F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x706F6F6C5F535049)
        {
          v160 = 16513;
          goto LABEL_590;
        }
        v39 = 1;
      }
      if (v102)
      {
        if (*(_QWORD *)__s1 == 0x665F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x616C5F74616D726FLL
          && *(_QWORD *)(__s1 + 11) == 0x6C6562616C5F7461)
        {
          v4 = 0x100004101;
          goto LABEL_1081;
        }
      }
      else
      {
        v203 = v6 ^ 1;
        if (a2 != 24)
          v203 = 1;
        if ((v203 & 1) == 0)
        {
          v204 = *(_QWORD *)__s1 == 0x665F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x5F6E6F6974636E75;
          if (v204 && *((_QWORD *)__s1 + 2) == 0x6574616C706D6574)
          {
            v4 = 0x100004102;
            goto LABEL_1081;
          }
        }
      }
      if (v103)
      {
        if (*(_QWORD *)__s1 == 0x635F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x6D65745F7373616CLL
          && *(_QWORD *)(__s1 + 13) == 0x6574616C706D6574)
        {
          v4 = 0x100004103;
          goto LABEL_1081;
        }
        if (!v39)
        {
          v103 = 1;
          goto LABEL_1008;
        }
      }
      else
      {
        if (!v39)
        {
          v103 = 0;
          goto LABEL_1008;
        }
        if (*(_QWORD *)__s1 == 0x475F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x4C434E49425F554ELL)
        {
          v4 = 0x100004104;
          goto LABEL_1081;
        }
      }
      if (*(_QWORD *)__s1 == 0x475F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x4C434E49455F554ELL)
      {
        v4 = 0x100004105;
        goto LABEL_1081;
      }
LABEL_1008:
      v245 = v6 ^ 1;
      if (a2 == 34)
        v246 = v6 ^ 1;
      else
        v246 = 1;
      if ((v246 & 1) != 0)
      {
        if (a2 != 32)
          v245 = 1;
        if ((v245 & 1) == 0)
        {
          if (*(_QWORD *)__s1 == 0x475F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x616D726F665F554ELL
            && *((_QWORD *)__s1 + 2) == 0x656D617261705F6CLL
            && *((_QWORD *)__s1 + 3) == 0x6B6361705F726574)
          {
            v4 = 0x100004108;
            goto LABEL_1081;
          }
          v120 = 1;
          goto LABEL_417;
        }
      }
      else
      {
        if (!memcmp(__s1, "DW_TAG_GNU_template_template_param", 0x22uLL))
        {
          v4 = 0x100004106;
          goto LABEL_1081;
        }
        if (!memcmp(__s1, "DW_TAG_GNU_template_parameter_pack", 0x22uLL))
        {
          v4 = 0x100004107;
          goto LABEL_1081;
        }
      }
      if (v62)
      {
        if (*(_QWORD *)__s1 == 0x475F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x5F6C6C61635F554ELL
          && *((_DWORD *)__s1 + 4) == 1702127987)
        {
          v4 = 0x100004109;
          goto LABEL_1081;
        }
        v120 = 0;
        v62 = 1;
      }
      else
      {
        v120 = 0;
      }
LABEL_417:
      if (v103)
      {
        if (*(_QWORD *)__s1 == 0x415F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x6F72705F454C5050
          && *(_QWORD *)(__s1 + 13) == 0x79747265706F7270)
        {
          v4 = 0x100004200;
          goto LABEL_1081;
        }
        if ((v118 & 1) == 0)
        {
          LOBYTE(v103) = 1;
          goto LABEL_840;
        }
      }
      else if (!v118)
      {
        LOBYTE(v103) = 0;
        goto LABEL_840;
      }
      if (*(_QWORD *)__s1 == 0x535F4741545F5744
        && *((_QWORD *)__s1 + 1) == 0x74636E75665F4E55
        && *((_QWORD *)__s1 + 2) == 0x706D65745F6E6F69
        && *((_DWORD *)__s1 + 6) == 1702125932)
      {
        v4 = 0x100004201;
        goto LABEL_1081;
      }
LABEL_840:
      if (!v119)
      {
LABEL_852:
        v211 = 0;
        goto LABEL_853;
      }
      if (*(_QWORD *)__s1 == 0x535F4741545F5744
        && *((_QWORD *)__s1 + 1) == 0x63757274735F4E55
        && *((_QWORD *)__s1 + 2) == 0x616C706D65745F74
        && *((_WORD *)__s1 + 12) == 25972)
      {
        v4 = 0x100004203;
        goto LABEL_1081;
      }
      v211 = 1;
LABEL_853:
      if (a2 == 31 && v6)
      {
        if (*(_QWORD *)__s1 == 0x535F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x7269646E695F4E55
          && *((_QWORD *)__s1 + 2) == 0x65686E695F746365
          && *(_QWORD *)(__s1 + 23) == 0x65636E6174697265)
        {
          v4 = 0x100004205;
          goto LABEL_1081;
        }
      }
      else if (v62)
      {
        if (*(_QWORD *)__s1 == 0x535F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x6665646F635F4E55
          && *((_DWORD *)__s1 + 4) == 1936154988)
        {
          v4 = 0x100004206;
          goto LABEL_1081;
        }
        v62 = 1;
      }
      if ((v103 & 1) != 0)
      {
        if (*(_QWORD *)__s1 == 0x535F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x706F6D656D5F4E55
          && *(_QWORD *)(__s1 + 13) == 0x6F666E695F706F6DLL)
        {
          v4 = 0x100004207;
          goto LABEL_1081;
        }
        if (!v211)
          goto LABEL_885;
      }
      else if ((v211 & 1) == 0)
      {
LABEL_885:
        if (v62)
        {
          v219 = *(_QWORD *)__s1 == 0x535F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x5F726F74645F4E55;
          if (v219 && *((_DWORD *)__s1 + 4) == 1868983913)
          {
            v4 = 0x10000420ALL;
            goto LABEL_1081;
          }
        }
        goto LABEL_906;
      }
      if (*(_QWORD *)__s1 == 0x535F4741545F5744
        && *((_QWORD *)__s1 + 1) == 0x5F697474725F4E55
        && *((_QWORD *)__s1 + 2) == 0x7470697263736564
        && *((_WORD *)__s1 + 12) == 29295)
      {
        v4 = 0x100004209;
        goto LABEL_1081;
      }
LABEL_906:
      if (v40)
      {
        if (*(_QWORD *)__s1 == 0x535F4741545F5744 && *(_QWORD *)(__s1 + 7) == 0x726F74645F4E5553)
        {
          v4 = 0x10000420BLL;
          goto LABEL_1081;
        }
      }
      else
      {
        v225 = v6 ^ 1;
        if (a2 != 24)
          v225 = 1;
        if ((v225 & 1) == 0)
        {
          v226 = *(_QWORD *)__s1 == 0x535F4741545F5744 && *((_QWORD *)__s1 + 1) == 0x695F3039665F4E55;
          if (v226 && *((_QWORD *)__s1 + 2) == 0x656361667265746ELL)
          {
            v4 = 0x10000420CLL;
            goto LABEL_1081;
          }
        }
      }
      if (v120)
      {
        if (*(_QWORD *)__s1 == 0x535F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x7274726F665F4E55
          && *((_QWORD *)__s1 + 2) == 0x735F7861765F6E61
          && *((_QWORD *)__s1 + 3) == 0x6572757463757274)
        {
          v4 = 0x10000420DLL;
          goto LABEL_1081;
        }
        goto LABEL_934;
      }
LABEL_118:
      if (a2 == 13 && v6)
      {
        if (*(_QWORD *)__s1 == 0x535F4741545F5744 && *(_QWORD *)(__s1 + 5) == 0x69685F4E55535F47)
        {
          v4 = 0x1000042FFLL;
          goto LABEL_1081;
        }
        goto LABEL_320;
      }
LABEL_934:
      if (a2 == 23 && v6)
      {
        if (*(_QWORD *)__s1 == 0x415F4741545F5744
          && *((_QWORD *)__s1 + 1) == 0x69635F4D5549544CLL
          && *(_QWORD *)(__s1 + 15) == 0x657079745F637269)
        {
          v160 = 20737;
          goto LABEL_590;
        }
        goto LABEL_320;
      }
      v233 = v6 ^ 1;
      if (a2 != 27)
        v233 = 1;
      if ((v233 & 1) != 0)
      {
        v90 = (v4 & 0x100000000) == 0;
        if (a2 == 28 && (v4 & 0x100000000) == 0)
        {
          if (*(_QWORD *)__s1 == 0x415F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x65725F4D5549544CLL
            && *((_QWORD *)__s1 + 2) == 0x5F79727261635F76
            && *((_DWORD *)__s1 + 6) == 1701869940)
          {
            v254 = 20737;
          }
          else
          {
            if (*(_QWORD *)__s1 != 0x475F4741545F5744
              || *((_QWORD *)__s1 + 1) != 0x676E6973755F5348
              || *((_QWORD *)__s1 + 2) != 0x6172616C6365645FLL
              || *((_DWORD *)__s1 + 6) != 1852795252)
            {
              if (*(_QWORD *)__s1 != 0x425F4741545F5744
                || *((_QWORD *)__s1 + 1) != 0x445F444E414C524FLL
                || *((_QWORD *)__s1 + 2) != 0x74735F6968706C65
                || *((_DWORD *)__s1 + 6) != 1735289202)
              {
                goto LABEL_1081;
              }
              v160 = 45057;
LABEL_590:
              v4 = v160 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
              goto LABEL_1081;
            }
            v254 = 32772;
          }
          goto LABEL_1053;
        }
        goto LABEL_321;
      }
LABEL_310:
      if (*(_QWORD *)__s1 != 0x415F4741545F5744
        || *((_QWORD *)__s1 + 1) != 0x776D5F4D5549544CLL
        || *((_QWORD *)__s1 + 2) != 0x745F637269635F61
        || *(_QWORD *)(__s1 + 19) != 0x657079745F637269)
      {
LABEL_320:
        v90 = (v4 & 0x100000000) == 0;
LABEL_321:
        if (a2 == 17 && v90)
        {
          if (*(_QWORD *)__s1 == 0x415F4741545F5744
            && *((_QWORD *)__s1 + 1) == 0x6F725F4D5549544CLL
            && __s1[16] == 109)
          {
            v4 = 0x100005111;
          }
          goto LABEL_1081;
        }
        goto LABEL_485;
      }
      v159 = 20737;
LABEL_586:
      v5 = v159 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
LABEL_587:
      v4 = v5 + 1;
LABEL_1081:
      if ((v4 & 0x300000000) != 0)
        return v4;
      else
        return 0xFFFFFFFFLL;
  }
}

uint64_t llvm::dwarf::TagVersion(unsigned int a1)
{
  if (a1 > 0x4B)
    return 0;
  else
    return dword_1C85F7F4C[(__int16)a1];
}

uint64_t llvm::dwarf::TagVendor(int a1)
{
  uint64_t result;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  if (a1 > 17150)
  {
    if (a1 > 34660)
    {
      if (a1 >= 40960)
      {
        switch(a1)
        {
          case 45056:
          case 45057:
          case 45058:
          case 45059:
          case 45060:
            result = 2;
            break;
          default:
            if (a1 == 40992)
              v11 = 15;
            else
              v11 = 0;
            if (a1 == 40960)
              result = 15;
            else
              result = v11;
            break;
        }
      }
      else
      {
        v7 = 34661;
        v8 = 17;
        if (a1 == 34663)
          v9 = 17;
        else
          v9 = 0;
        if (a1 == 34662)
          v10 = 17;
        else
          v10 = v9;
LABEL_40:
        if (a1 == v7)
          return v8;
        else
          return v10;
      }
    }
    else if (a1 > 20752)
    {
      switch(a1)
      {
        case 32772:
        case 32773:
        case 32774:
        case 32775:
          result = 10;
          break;
        default:
          v7 = 20753;
          v8 = 8;
          if (a1 == 24576)
            v10 = 5;
          else
            v10 = 0;
          goto LABEL_40;
      }
    }
    else
    {
      if (a1 == 20739)
        v2 = 8;
      else
        v2 = 0;
      if (a1 == 20738)
        v3 = 8;
      else
        v3 = v2;
      if (a1 == 20737)
        v4 = 8;
      else
        v4 = v3;
      if (a1 == 17152)
        v5 = 5;
      else
        v5 = 0;
      if (a1 == 17151)
        v6 = 16;
      else
        v6 = v5;
      if (a1 <= 20736)
        return v6;
      else
        return v4;
    }
  }
  else
  {
    switch(a1)
    {
      case 16896:
        result = 1;
        break;
      case 16897:
      case 16898:
      case 16899:
      case 16900:
      case 16901:
      case 16902:
      case 16903:
      case 16904:
      case 16905:
      case 16906:
      case 16907:
      case 16908:
      case 16909:
        result = 16;
        break;
      default:
        switch(a1)
        {
          case 16641:
          case 16642:
          case 16643:
          case 16644:
          case 16645:
          case 16646:
          case 16647:
          case 16648:
          case 16649:
          case 16650:
            result = 3;
            break;
          default:
            if (a1 == 16513)
              result = 6;
            else
              result = 0;
            break;
        }
        break;
    }
  }
  return result;
}

const char *llvm::dwarf::ChildrenString(llvm::dwarf *this)
{
  const char *v1;

  v1 = "DW_CHILDREN_yes";
  if ((_DWORD)this != 1)
    v1 = 0;
  if ((_DWORD)this)
    return v1;
  else
    return "DW_CHILDREN_no";
}

const char *llvm::dwarf::AttributeString(llvm::dwarf *this)
{
  int v1;
  const char *result;
  const char *v3;
  const char *v4;
  int v5;
  BOOL v6;
  const char *v7;

  v1 = (int)this;
  result = 0;
  if (v1 > 2055)
  {
    if (v1 <= 15120)
    {
      if (v1 > 8704)
      {
        if (v1 > 14654)
        {
          if (v1 > 14847)
          {
            if (v1 == 14848)
              return "DW_AT_PGI_lbase";
            v4 = "DW_AT_PGI_soffset";
            v5 = 14849;
            v6 = v1 == 14850;
            v7 = "DW_AT_PGI_lstride";
          }
          else
          {
            v4 = "DW_AT_IBM_home_location";
            v5 = 14655;
            v6 = v1 == 14656;
            v7 = "DW_AT_IBM_alt_srcview";
          }
LABEL_208:
          if (!v6)
            v7 = 0;
          if (v1 == v5)
            return v4;
          else
            return v7;
        }
        else if (v1 > 10495)
        {
          switch(v1)
          {
            case 10496:
              result = "DW_AT_GO_kind";
              break;
            case 10497:
              result = "DW_AT_GO_key";
              break;
            case 10498:
              result = "DW_AT_GO_elem";
              break;
            case 10499:
              result = "DW_AT_GO_embedded_field";
              break;
            case 10500:
              result = "DW_AT_GO_runtime_type";
              break;
            default:
              if (v1 == 12816)
              {
                result = "DW_AT_UPC_threads_scaled";
              }
              else if (v1 == 14654)
              {
                result = "DW_AT_IBM_wsa_addr";
              }
              else
              {
                result = 0;
              }
              break;
          }
        }
        else
        {
          switch(v1)
          {
            case 8705:
              result = "DW_AT_SUN_template";
              break;
            case 8706:
              result = "DW_AT_SUN_alignment";
              break;
            case 8707:
              result = "DW_AT_SUN_vtable";
              break;
            case 8708:
              result = "DW_AT_SUN_count_guarantee";
              break;
            case 8709:
              result = "DW_AT_SUN_command_line";
              break;
            case 8710:
              result = "DW_AT_SUN_vbase";
              break;
            case 8711:
              result = "DW_AT_SUN_compile_options";
              break;
            case 8712:
              result = "DW_AT_SUN_language";
              break;
            case 8713:
              result = "DW_AT_SUN_browser_file";
              break;
            case 8714:
            case 8715:
            case 8716:
            case 8717:
            case 8718:
            case 8719:
            case 8730:
            case 8731:
            case 8732:
            case 8733:
            case 8734:
            case 8735:
            case 8751:
              return result;
            case 8720:
              result = "DW_AT_SUN_vtable_abi";
              break;
            case 8721:
              result = "DW_AT_SUN_func_offsets";
              break;
            case 8722:
              result = "DW_AT_SUN_cf_kind";
              break;
            case 8723:
              result = "DW_AT_SUN_vtable_index";
              break;
            case 8724:
              result = "DW_AT_SUN_omp_tpriv_addr";
              break;
            case 8725:
              result = "DW_AT_SUN_omp_child_func";
              break;
            case 8726:
              result = "DW_AT_SUN_func_offset";
              break;
            case 8727:
              result = "DW_AT_SUN_memop_type_ref";
              break;
            case 8728:
              result = "DW_AT_SUN_profile_id";
              break;
            case 8729:
              result = "DW_AT_SUN_memop_signature";
              break;
            case 8736:
              result = "DW_AT_SUN_obj_dir";
              break;
            case 8737:
              result = "DW_AT_SUN_obj_file";
              break;
            case 8738:
              result = "DW_AT_SUN_original_name";
              break;
            case 8739:
              result = "DW_AT_SUN_hwcprof_signature";
              break;
            case 8740:
              result = "DW_AT_SUN_amd64_parmdump";
              break;
            case 8741:
              result = "DW_AT_SUN_part_link_name";
              break;
            case 8742:
              result = "DW_AT_SUN_link_name";
              break;
            case 8743:
              result = "DW_AT_SUN_pass_with_const";
              break;
            case 8744:
              result = "DW_AT_SUN_return_with_const";
              break;
            case 8745:
              result = "DW_AT_SUN_import_by_name";
              break;
            case 8746:
              result = "DW_AT_SUN_90_pointer";
              break;
            case 8747:
              result = "DW_AT_SUN_pass_by_ref";
              break;
            case 8748:
              result = "DW_AT_SUN_f90_allocatable";
              break;
            case 8749:
              result = "DW_AT_SUN_f90_assumed_shape_array";
              break;
            case 8750:
              result = "DW_AT_SUN_c_vla";
              break;
            case 8752:
              result = "DW_AT_SUN_return_value_ptr";
              break;
            case 8753:
              result = "DW_AT_SUN_dtor_start";
              break;
            case 8754:
              result = "DW_AT_SUN_dtor_length";
              break;
            case 8755:
              result = "DW_AT_SUN_dtor_state_initial";
              break;
            case 8756:
              result = "DW_AT_SUN_dtor_state_final";
              break;
            case 8757:
              result = "DW_AT_SUN_dtor_state_deltas";
              break;
            case 8758:
              result = "DW_AT_SUN_import_by_lname";
              break;
            case 8759:
              result = "DW_AT_SUN_f90_use_only";
              break;
            case 8760:
              result = "DW_AT_SUN_namelist_spec";
              break;
            case 8761:
              result = "DW_AT_SUN_is_omp_child_func";
              break;
            case 8762:
              result = "DW_AT_SUN_fortran_main_alias";
              break;
            case 8763:
              result = "DW_AT_SUN_fortran_based";
              break;
            default:
              switch(v1)
              {
                case 8960:
                  result = "DW_AT_ALTIUM_loclist";
                  break;
                case 8961:
                  result = "DW_AT_use_GNAT_descriptive_type";
                  break;
                case 8962:
                  result = "DW_AT_GNAT_descriptive_type";
                  break;
                case 8963:
                  result = "DW_AT_GNU_numerator";
                  break;
                case 8964:
                  result = "DW_AT_GNU_denominator";
                  break;
                case 8965:
                  result = "DW_AT_GNU_bias";
                  break;
                default:
                  return result;
              }
              break;
          }
        }
      }
      else if (v1 <= 8337)
      {
        if (v1 == 2056)
        {
          return "DW_AT_GHS_using_declaration";
        }
        else
        {
          switch(v1)
          {
            case 8193:
              result = "DW_AT_MIPS_fde";
              break;
            case 8194:
              result = "DW_AT_MIPS_loop_begin";
              break;
            case 8195:
              result = "DW_AT_MIPS_tail_loop_begin";
              break;
            case 8196:
              result = "DW_AT_MIPS_epilog_begin";
              break;
            case 8197:
              result = "DW_AT_MIPS_loop_unroll_factor";
              break;
            case 8198:
              result = "DW_AT_MIPS_software_pipeline_depth";
              break;
            case 8199:
              result = "DW_AT_MIPS_linkage_name";
              break;
            case 8200:
              result = "DW_AT_MIPS_stride";
              break;
            case 8201:
              result = "DW_AT_MIPS_abstract_name";
              break;
            case 8202:
              result = "DW_AT_MIPS_clone_origin";
              break;
            case 8203:
              result = "DW_AT_MIPS_has_inlines";
              break;
            case 8204:
              result = "DW_AT_MIPS_stride_byte";
              break;
            case 8205:
              result = "DW_AT_MIPS_stride_elem";
              break;
            case 8206:
              result = "DW_AT_MIPS_ptr_dopetype";
              break;
            case 8207:
              result = "DW_AT_MIPS_allocatable_dopetype";
              break;
            case 8208:
              result = "DW_AT_MIPS_assumed_shape_dopetype";
              break;
            case 8209:
              result = "DW_AT_MIPS_assumed_size";
              break;
            case 8210:
              result = "DW_AT_HP_raw_data_ptr";
              break;
            case 8211:
              result = "DW_AT_HP_pass_by_reference";
              break;
            case 8212:
              result = "DW_AT_HP_opt_level";
              break;
            case 8213:
              result = "DW_AT_HP_prof_version_id";
              break;
            case 8214:
              result = "DW_AT_HP_opt_flags";
              break;
            case 8215:
              result = "DW_AT_HP_cold_region_low_pc";
              break;
            case 8216:
              result = "DW_AT_HP_cold_region_high_pc";
              break;
            case 8217:
              result = "DW_AT_HP_all_variables_modifiable";
              break;
            case 8218:
              result = "DW_AT_HP_linkage_name";
              break;
            case 8219:
              result = "DW_AT_HP_prof_flags";
              break;
            case 8220:
            case 8221:
            case 8222:
            case 8228:
            case 8229:
            case 8231:
            case 8232:
              return result;
            case 8223:
              result = "DW_AT_HP_unit_name";
              break;
            case 8224:
              result = "DW_AT_HP_unit_size";
              break;
            case 8225:
              result = "DW_AT_HP_widened_byte_size";
              break;
            case 8226:
              result = "DW_AT_HP_definition_points";
              break;
            case 8227:
              result = "DW_AT_HP_default_location";
              break;
            case 8230:
              result = "DW_AT_DW_AT_INTEL_other_endian";
              break;
            case 8233:
              result = "DW_AT_HP_is_result_param";
              break;
            default:
              switch(v1)
              {
                case 8323:
                  result = "DW_AT_GHS_rsm";
                  break;
                case 8325:
                  result = "DW_AT_GHS_frsm";
                  break;
                case 8326:
                  result = "DW_AT_GHS_frames";
                  break;
                case 8327:
                  result = "DW_AT_GHS_rso";
                  break;
                default:
                  return result;
              }
              break;
          }
        }
      }
      else
      {
        switch(v1)
        {
          case 8449:
            result = "DW_AT_sf_names";
            break;
          case 8450:
            result = "DW_AT_src_info";
            break;
          case 8451:
            result = "DW_AT_mac_info";
            break;
          case 8452:
            result = "DW_AT_src_coords";
            break;
          case 8453:
            result = "DW_AT_body_begin";
            break;
          case 8454:
            result = "DW_AT_body_end";
            break;
          case 8455:
            result = "DW_AT_GNU_vector";
            break;
          case 8456:
          case 8457:
          case 8458:
          case 8459:
          case 8460:
          case 8461:
          case 8462:
          case 8475:
          case 8476:
          case 8477:
          case 8478:
          case 8479:
          case 8480:
          case 8481:
          case 8482:
          case 8483:
          case 8484:
          case 8485:
          case 8486:
          case 8487:
          case 8488:
          case 8489:
          case 8490:
          case 8491:
          case 8492:
          case 8493:
          case 8494:
          case 8495:
            return result;
          case 8463:
            result = "DW_AT_GNU_odr_signature";
            break;
          case 8464:
            result = "DW_AT_GNU_template_name";
            break;
          case 8465:
            result = "DW_AT_GNU_call_site_value";
            break;
          case 8466:
            result = "DW_AT_GNU_call_site_data_value";
            break;
          case 8467:
            result = "DW_AT_GNU_call_site_target";
            break;
          case 8468:
            result = "DW_AT_GNU_call_site_target_clobbered";
            break;
          case 8469:
            result = "DW_AT_GNU_tail_call";
            break;
          case 8470:
            result = "DW_AT_GNU_all_tail_call_sites";
            break;
          case 8471:
            result = "DW_AT_GNU_all_call_sites";
            break;
          case 8472:
            result = "DW_AT_GNU_all_source_call_sites";
            break;
          case 8473:
            result = "DW_AT_GNU_macros";
            break;
          case 8474:
            result = "DW_AT_GNU_deleted";
            break;
          case 8496:
            result = "DW_AT_GNU_dwo_name";
            break;
          case 8497:
            result = "DW_AT_GNU_dwo_id";
            break;
          case 8498:
            result = "DW_AT_GNU_ranges_base";
            break;
          case 8499:
            result = "DW_AT_GNU_addr_base";
            break;
          case 8500:
            result = "DW_AT_GNU_pubnames";
            break;
          case 8501:
            result = "DW_AT_GNU_pubtypes";
            break;
          case 8502:
            result = "DW_AT_GNU_discriminator";
            break;
          case 8503:
            result = "DW_AT_GNU_locviews";
            break;
          case 8504:
            result = "DW_AT_GNU_entry_view";
            break;
          default:
            v4 = "DW_AT_GHS_subcpu";
            v5 = 8338;
            v6 = v1 == 8339;
            v7 = "DW_AT_GHS_lbrace_line";
            goto LABEL_208;
        }
      }
    }
    else
    {
      switch(v1)
      {
        case 16353:
          result = "DW_AT_APPLE_optimized";
          break;
        case 16354:
          result = "DW_AT_APPLE_flags";
          break;
        case 16355:
          result = "DW_AT_APPLE_isa";
          break;
        case 16356:
          result = "DW_AT_APPLE_block";
          break;
        case 16357:
          result = "DW_AT_APPLE_major_runtime_vers";
          break;
        case 16358:
          result = "DW_AT_APPLE_runtime_class";
          break;
        case 16359:
          result = "DW_AT_APPLE_omit_frame_ptr";
          break;
        case 16360:
          result = "DW_AT_APPLE_property_name";
          break;
        case 16361:
          result = "DW_AT_APPLE_property_getter";
          break;
        case 16362:
          result = "DW_AT_APPLE_property_setter";
          break;
        case 16363:
          result = "DW_AT_APPLE_property_attribute";
          break;
        case 16364:
          result = "DW_AT_APPLE_objc_complete_type";
          break;
        case 16365:
          result = "DW_AT_APPLE_property";
          break;
        case 16366:
          result = "DW_AT_APPLE_objc_direct";
          break;
        case 16367:
          result = "DW_AT_APPLE_sdk";
          break;
        default:
          switch(v1)
          {
            case 15872:
              result = "DW_AT_LLVM_include_path";
              break;
            case 15873:
              result = "DW_AT_LLVM_config_macros";
              break;
            case 15874:
              result = "DW_AT_LLVM_sysroot";
              break;
            case 15875:
              result = "DW_AT_LLVM_tag_offset";
              break;
            case 15876:
              result = "DW_AT_APPLE_ptrauth_key";
              break;
            case 15877:
              result = "DW_AT_APPLE_ptrauth_address_discriminated";
              break;
            case 15878:
              result = "DW_AT_APPLE_ptrauth_extra_discriminator";
              break;
            case 15879:
              result = "DW_AT_LLVM_apinotes";
              break;
            case 15880:
              result = "DW_AT_APPLE_ptrauth_isa_pointer";
              break;
            case 15881:
              result = "DW_AT_APPLE_ptrauth_authenticates_null_values";
              break;
            default:
              switch(v1)
              {
                case 15121:
                  result = "DW_AT_BORLAND_property_read";
                  break;
                case 15122:
                  result = "DW_AT_BORLAND_property_write";
                  break;
                case 15123:
                  result = "DW_AT_BORLAND_property_implements";
                  break;
                case 15124:
                  result = "DW_AT_BORLAND_property_index";
                  break;
                case 15125:
                  result = "DW_AT_BORLAND_property_default";
                  break;
                case 15136:
                  result = "DW_AT_BORLAND_Delphi_unit";
                  break;
                case 15137:
                  result = "DW_AT_BORLAND_Delphi_class";
                  break;
                case 15138:
                  result = "DW_AT_BORLAND_Delphi_record";
                  break;
                case 15139:
                  result = "DW_AT_BORLAND_Delphi_metaclass";
                  break;
                case 15140:
                  result = "DW_AT_BORLAND_Delphi_constructor";
                  break;
                case 15141:
                  result = "DW_AT_BORLAND_Delphi_destructor";
                  break;
                case 15142:
                  result = "DW_AT_BORLAND_Delphi_anonymous_method";
                  break;
                case 15143:
                  result = "DW_AT_BORLAND_Delphi_interface";
                  break;
                case 15144:
                  result = "DW_AT_BORLAND_Delphi_ABI";
                  break;
                case 15145:
                  result = "DW_AT_BORLAND_Delphi_return";
                  break;
                case 15152:
                  result = "DW_AT_BORLAND_Delphi_frameptr";
                  break;
                case 15153:
                  result = "DW_AT_BORLAND_closure";
                  break;
                default:
                  return result;
              }
              break;
          }
          break;
      }
    }
  }
  else
  {
    switch(v1)
    {
      case 1:
        result = "DW_AT_sibling";
        break;
      case 2:
        result = "DW_AT_location";
        break;
      case 3:
        result = "DW_AT_name";
        break;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 14:
      case 15:
      case 20:
      case 31:
      case 35:
      case 36:
      case 38:
      case 40:
      case 41:
      case 43:
      case 45:
      case 48:
        return result;
      case 9:
        result = "DW_AT_ordering";
        break;
      case 11:
        result = "DW_AT_byte_size";
        break;
      case 12:
        result = "DW_AT_bit_offset";
        break;
      case 13:
        result = "DW_AT_bit_size";
        break;
      case 16:
        result = "DW_AT_stmt_list";
        break;
      case 17:
        result = "DW_AT_low_pc";
        break;
      case 18:
        result = "DW_AT_high_pc";
        break;
      case 19:
        result = "DW_AT_language";
        break;
      case 21:
        result = "DW_AT_discr";
        break;
      case 22:
        result = "DW_AT_discr_value";
        break;
      case 23:
        result = "DW_AT_visibility";
        break;
      case 24:
        result = "DW_AT_import";
        break;
      case 25:
        result = "DW_AT_string_length";
        break;
      case 26:
        result = "DW_AT_common_reference";
        break;
      case 27:
        result = "DW_AT_comp_dir";
        break;
      case 28:
        result = "DW_AT_const_value";
        break;
      case 29:
        result = "DW_AT_containing_type";
        break;
      case 30:
        result = "DW_AT_default_value";
        break;
      case 32:
        result = "DW_AT_inline";
        break;
      case 33:
        result = "DW_AT_is_optional";
        break;
      case 34:
        result = "DW_AT_lower_bound";
        break;
      case 37:
        result = "DW_AT_producer";
        break;
      case 39:
        result = "DW_AT_prototyped";
        break;
      case 42:
        result = "DW_AT_return_addr";
        break;
      case 44:
        result = "DW_AT_start_scope";
        break;
      case 46:
        result = "DW_AT_bit_stride";
        break;
      case 47:
        result = "DW_AT_upper_bound";
        break;
      case 49:
        result = "DW_AT_abstract_origin";
        break;
      case 50:
        result = "DW_AT_accessibility";
        break;
      case 51:
        result = "DW_AT_address_class";
        break;
      case 52:
        result = "DW_AT_artificial";
        break;
      case 53:
        result = "DW_AT_base_types";
        break;
      case 54:
        result = "DW_AT_calling_convention";
        break;
      case 55:
        result = "DW_AT_count";
        break;
      case 56:
        result = "DW_AT_data_member_location";
        break;
      case 57:
        result = "DW_AT_decl_column";
        break;
      case 58:
        result = "DW_AT_decl_file";
        break;
      case 59:
        result = "DW_AT_decl_line";
        break;
      case 60:
        result = "DW_AT_declaration";
        break;
      case 61:
        result = "DW_AT_discr_list";
        break;
      case 62:
        result = "DW_AT_encoding";
        break;
      case 63:
        result = "DW_AT_external";
        break;
      case 64:
        result = "DW_AT_frame_base";
        break;
      case 65:
        result = "DW_AT_friend";
        break;
      case 66:
        result = "DW_AT_identifier_case";
        break;
      case 67:
        result = "DW_AT_macro_info";
        break;
      case 68:
        result = "DW_AT_namelist_item";
        break;
      case 69:
        result = "DW_AT_priority";
        break;
      case 70:
        result = "DW_AT_segment";
        break;
      case 71:
        result = "DW_AT_specification";
        break;
      case 72:
        result = "DW_AT_static_link";
        break;
      case 73:
        result = "DW_AT_type";
        break;
      case 74:
        result = "DW_AT_use_location";
        break;
      case 75:
        result = "DW_AT_variable_parameter";
        break;
      case 76:
        result = "DW_AT_virtuality";
        break;
      case 77:
        result = "DW_AT_vtable_elem_location";
        break;
      case 78:
        result = "DW_AT_allocated";
        break;
      case 79:
        result = "DW_AT_associated";
        break;
      case 80:
        result = "DW_AT_data_location";
        break;
      case 81:
        result = "DW_AT_byte_stride";
        break;
      case 82:
        result = "DW_AT_entry_pc";
        break;
      case 83:
        result = "DW_AT_use_UTF8";
        break;
      case 84:
        result = "DW_AT_extension";
        break;
      case 85:
        result = "DW_AT_ranges";
        break;
      case 86:
        result = "DW_AT_trampoline";
        break;
      case 87:
        result = "DW_AT_call_column";
        break;
      case 88:
        result = "DW_AT_call_file";
        break;
      case 89:
        result = "DW_AT_call_line";
        break;
      case 90:
        result = "DW_AT_description";
        break;
      case 91:
        result = "DW_AT_binary_scale";
        break;
      case 92:
        result = "DW_AT_decimal_scale";
        break;
      case 93:
        result = "DW_AT_small";
        break;
      case 94:
        result = "DW_AT_decimal_sign";
        break;
      case 95:
        result = "DW_AT_digit_count";
        break;
      case 96:
        result = "DW_AT_picture_string";
        break;
      case 97:
        result = "DW_AT_mutable";
        break;
      case 98:
        result = "DW_AT_threads_scaled";
        break;
      case 99:
        result = "DW_AT_explicit";
        break;
      case 100:
        result = "DW_AT_object_pointer";
        break;
      case 101:
        result = "DW_AT_endianity";
        break;
      case 102:
        result = "DW_AT_elemental";
        break;
      case 103:
        result = "DW_AT_pure";
        break;
      case 104:
        result = "DW_AT_recursive";
        break;
      case 105:
        result = "DW_AT_signature";
        break;
      case 106:
        result = "DW_AT_main_subprogram";
        break;
      case 107:
        result = "DW_AT_data_bit_offset";
        break;
      case 108:
        result = "DW_AT_const_expr";
        break;
      case 109:
        result = "DW_AT_enum_class";
        break;
      case 110:
        result = "DW_AT_linkage_name";
        break;
      case 111:
        result = "DW_AT_string_length_bit_size";
        break;
      case 112:
        result = "DW_AT_string_length_byte_size";
        break;
      case 113:
        result = "DW_AT_rank";
        break;
      case 114:
        result = "DW_AT_str_offsets_base";
        break;
      case 115:
        result = "DW_AT_addr_base";
        break;
      case 116:
        result = "DW_AT_rnglists_base";
        break;
      case 117:
        result = "DW_AT_dwo_id";
        break;
      case 118:
        result = "DW_AT_dwo_name";
        break;
      case 119:
        result = "DW_AT_reference";
        break;
      case 120:
        result = "DW_AT_rvalue_reference";
        break;
      case 121:
        result = "DW_AT_macros";
        break;
      case 122:
        result = "DW_AT_call_all_calls";
        break;
      case 123:
        result = "DW_AT_call_all_source_calls";
        break;
      case 124:
        result = "DW_AT_call_all_tail_calls";
        break;
      case 125:
        result = "DW_AT_call_return_pc";
        break;
      case 126:
        result = "DW_AT_call_value";
        break;
      case 127:
        result = "DW_AT_call_origin";
        break;
      case 128:
        result = "DW_AT_call_parameter";
        break;
      case 129:
        result = "DW_AT_call_pc";
        break;
      case 130:
        result = "DW_AT_call_tail_call";
        break;
      case 131:
        result = "DW_AT_call_target";
        break;
      case 132:
        result = "DW_AT_call_target_clobbered";
        break;
      case 133:
        result = "DW_AT_call_data_location";
        break;
      case 134:
        result = "DW_AT_call_data_value";
        break;
      case 135:
        result = "DW_AT_noreturn";
        break;
      case 136:
        result = "DW_AT_alignment";
        break;
      case 137:
        result = "DW_AT_export_symbols";
        break;
      case 138:
        result = "DW_AT_deleted";
        break;
      case 139:
        result = "DW_AT_defaulted";
        break;
      case 140:
        result = "DW_AT_loclists_base";
        break;
      default:
        v3 = "DW_AT_GHS_using_namespace";
        if (v1 != 2055)
          v3 = 0;
        if (v1 == 2054)
          result = "DW_AT_GHS_namespace_alias";
        else
          result = v3;
        break;
    }
  }
  return result;
}

uint64_t llvm::dwarf::AttributeVendor(int a1)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;

  result = 0;
  if (a1 <= 8704)
  {
    if (a1 > 8322)
    {
      if (a1 <= 8448)
      {
        switch(a1)
        {
          case 8323:
          case 8325:
          case 8326:
          case 8327:
            result = 10;
            break;
          case 8324:
            return result;
          default:
            if (a1 == 8339)
              v13 = 10;
            else
              v13 = 0;
            if (a1 == 8338)
              result = 10;
            else
              result = v13;
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 8449:
          case 8450:
          case 8451:
          case 8452:
          case 8453:
          case 8454:
          case 8455:
          case 8463:
          case 8464:
          case 8465:
          case 8466:
          case 8467:
          case 8468:
          case 8469:
          case 8470:
          case 8471:
          case 8472:
          case 8473:
          case 8474:
          case 8496:
          case 8497:
          case 8498:
          case 8499:
          case 8500:
          case 8501:
          case 8502:
          case 8503:
          case 8504:
LABEL_15:
            result = 3;
            break;
          default:
            return result;
        }
      }
    }
    else if (a1 <= 0x2000)
    {
      if (a1 == 2056)
        v11 = 10;
      else
        v11 = 0;
      if (a1 == 2055)
        v12 = 10;
      else
        v12 = v11;
      if (a1 == 2054)
        return 10;
      else
        return v12;
    }
    else
    {
      switch(a1)
      {
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8203:
        case 8204:
        case 8205:
        case 8206:
        case 8207:
        case 8208:
        case 8209:
          result = 6;
          break;
        case 8210:
        case 8211:
        case 8212:
        case 8213:
        case 8214:
        case 8215:
        case 8216:
        case 8217:
        case 8218:
        case 8219:
        case 8223:
        case 8224:
        case 8225:
        case 8226:
        case 8227:
        case 8233:
          result = 12;
          break;
        case 8230:
          result = 14;
          break;
        default:
          return result;
      }
    }
  }
  else if (a1 <= 12815)
  {
    switch(a1)
    {
      case 8705:
      case 8706:
      case 8707:
      case 8708:
      case 8709:
      case 8710:
      case 8711:
      case 8712:
      case 8713:
      case 8720:
      case 8721:
      case 8722:
      case 8723:
      case 8724:
      case 8725:
      case 8726:
      case 8727:
      case 8728:
      case 8729:
      case 8736:
      case 8737:
      case 8738:
      case 8739:
      case 8740:
      case 8741:
      case 8742:
      case 8743:
      case 8744:
      case 8745:
      case 8746:
      case 8747:
      case 8748:
      case 8749:
      case 8750:
      case 8752:
      case 8753:
      case 8754:
      case 8755:
      case 8756:
      case 8757:
      case 8758:
      case 8759:
      case 8760:
      case 8761:
      case 8762:
      case 8763:
        result = 16;
        break;
      case 8714:
      case 8715:
      case 8716:
      case 8717:
      case 8718:
      case 8719:
      case 8730:
      case 8731:
      case 8732:
      case 8733:
      case 8734:
      case 8735:
      case 8751:
        return result;
      default:
        switch(a1)
        {
          case 8960:
            result = 8;
            break;
          case 8961:
          case 8962:
          case 8963:
          case 8964:
          case 8965:
            goto LABEL_15;
          default:
            switch(a1)
            {
              case 10496:
              case 10497:
              case 10498:
              case 10499:
              case 10500:
                result = 11;
                break;
              default:
                return result;
            }
            break;
        }
        break;
    }
  }
  else if (a1 <= 15120)
  {
    if (a1 == 14850)
      v3 = 15;
    else
      v3 = 0;
    if (a1 == 14849)
      v4 = 15;
    else
      v4 = v3;
    if (a1 == 14848)
      v5 = 15;
    else
      v5 = 0;
    if (a1 == 14656)
      v6 = 13;
    else
      v6 = v5;
    if (a1 <= 14848)
      v7 = v6;
    else
      v7 = v4;
    if (a1 == 14655)
      v8 = 13;
    else
      v8 = 0;
    if (a1 == 14654)
      v9 = 13;
    else
      v9 = v8;
    if (a1 == 12816)
      v10 = 17;
    else
      v10 = v9;
    if (a1 <= 14655)
      return v10;
    else
      return v7;
  }
  else
  {
    switch(a1)
    {
      case 15121:
      case 15122:
      case 15123:
      case 15124:
      case 15125:
      case 15136:
      case 15137:
      case 15138:
      case 15139:
      case 15140:
      case 15141:
      case 15142:
      case 15143:
      case 15144:
      case 15145:
      case 15152:
      case 15153:
        result = 2;
        break;
      case 15126:
      case 15127:
      case 15128:
      case 15129:
      case 15130:
      case 15131:
      case 15132:
      case 15133:
      case 15134:
      case 15135:
      case 15146:
      case 15147:
      case 15148:
      case 15149:
      case 15150:
      case 15151:
        return result;
      default:
        switch(a1)
        {
          case 16353:
          case 16354:
          case 16355:
          case 16356:
          case 16357:
          case 16358:
          case 16359:
          case 16360:
          case 16361:
          case 16362:
          case 16363:
          case 16364:
          case 16365:
          case 16366:
          case 16367:
            result = 1;
            break;
          default:
            switch(a1)
            {
              case 15872:
              case 15873:
              case 15874:
              case 15875:
              case 15876:
              case 15877:
              case 15878:
              case 15880:
              case 15881:
                result = 5;
                break;
              case 15879:
                result = 1;
                break;
              default:
                return result;
            }
            break;
        }
        break;
    }
  }
  return result;
}

const char *llvm::dwarf::FormEncodingString(llvm::dwarf *this)
{
  int v1;
  const char *result;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v1 = (int)this;
  result = 0;
  if (v1 > 7936)
  {
    v3 = "DW_FORM_GNU_ref_alt";
    v4 = "DW_FORM_LLVM_addrx_offset";
    if (v1 != 8193)
      v4 = 0;
    if (v1 == 7969)
      v5 = "DW_FORM_GNU_strp_alt";
    else
      v5 = v4;
    if (v1 != 7968)
      v3 = v5;
    v6 = "DW_FORM_GNU_str_index";
    if (v1 != 7938)
      v6 = 0;
    if (v1 == 7937)
      v7 = "DW_FORM_GNU_addr_index";
    else
      v7 = v6;
    if (v1 <= 7967)
      return v7;
    else
      return v3;
  }
  else
  {
    switch(v1)
    {
      case 1:
        result = "DW_FORM_addr";
        break;
      case 3:
        result = "DW_FORM_block2";
        break;
      case 4:
        result = "DW_FORM_block4";
        break;
      case 5:
        result = "DW_FORM_data2";
        break;
      case 6:
        result = "DW_FORM_data4";
        break;
      case 7:
        result = "DW_FORM_data8";
        break;
      case 8:
        result = "DW_FORM_string";
        break;
      case 9:
        result = "DW_FORM_block";
        break;
      case 10:
        result = "DW_FORM_block1";
        break;
      case 11:
        result = "DW_FORM_data1";
        break;
      case 12:
        result = "DW_FORM_flag";
        break;
      case 13:
        result = "DW_FORM_sdata";
        break;
      case 14:
        result = "DW_FORM_strp";
        break;
      case 15:
        result = "DW_FORM_udata";
        break;
      case 16:
        result = "DW_FORM_ref_addr";
        break;
      case 17:
        result = "DW_FORM_ref1";
        break;
      case 18:
        result = "DW_FORM_ref2";
        break;
      case 19:
        result = "DW_FORM_ref4";
        break;
      case 20:
        result = "DW_FORM_ref8";
        break;
      case 21:
        result = "DW_FORM_ref_udata";
        break;
      case 22:
        result = "DW_FORM_indirect";
        break;
      case 23:
        result = "DW_FORM_sec_offset";
        break;
      case 24:
        result = "DW_FORM_exprloc";
        break;
      case 25:
        result = "DW_FORM_flag_present";
        break;
      case 26:
        result = "DW_FORM_strx";
        break;
      case 27:
        result = "DW_FORM_addrx";
        break;
      case 28:
        result = "DW_FORM_ref_sup4";
        break;
      case 29:
        result = "DW_FORM_strp_sup";
        break;
      case 30:
        result = "DW_FORM_data16";
        break;
      case 31:
        result = "DW_FORM_line_strp";
        break;
      case 32:
        result = "DW_FORM_ref_sig8";
        break;
      case 33:
        result = "DW_FORM_implicit_const";
        break;
      case 34:
        result = "DW_FORM_loclistx";
        break;
      case 35:
        result = "DW_FORM_rnglistx";
        break;
      case 36:
        result = "DW_FORM_ref_sup8";
        break;
      case 37:
        result = "DW_FORM_strx1";
        break;
      case 38:
        result = "DW_FORM_strx2";
        break;
      case 39:
        result = "DW_FORM_strx3";
        break;
      case 40:
        result = "DW_FORM_strx4";
        break;
      case 41:
        result = "DW_FORM_addrx1";
        break;
      case 42:
        result = "DW_FORM_addrx2";
        break;
      case 43:
        result = "DW_FORM_addrx3";
        break;
      case 44:
        result = "DW_FORM_addrx4";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::dwarf::FormVersion(int a1)
{
  if ((a1 - 1) > 0x2B)
    return 0;
  else
    return dword_1C85F82AC[(__int16)(a1 - 1)];
}

uint64_t llvm::dwarf::FormVendor(int a1)
{
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;

  if (a1 == 8193)
    v1 = 5;
  else
    v1 = 0;
  if (a1 == 7969)
    v2 = 3;
  else
    v2 = v1;
  if (a1 == 7968)
    v3 = 3;
  else
    v3 = v2;
  if (a1 == 7938)
    v4 = 3;
  else
    v4 = 0;
  if (a1 == 7937)
    v5 = 3;
  else
    v5 = v4;
  if (a1 <= 7967)
    return v5;
  else
    return v3;
}

const char *llvm::dwarf::OperationEncodingString(llvm::dwarf *this)
{
  int v1;
  const char *result;

  v1 = (int)this;
  result = 0;
  switch(v1)
  {
    case 3:
      result = "DW_OP_addr";
      break;
    case 4:
    case 5:
    case 7:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 231:
    case 233:
    case 234:
    case 235:
    case 236:
    case 239:
    case 241:
    case 242:
    case 244:
    case 245:
    case 246:
    case 247:
    case 249:
    case 250:
      return result;
    case 6:
      result = "DW_OP_deref";
      break;
    case 8:
      result = "DW_OP_const1u";
      break;
    case 9:
      result = "DW_OP_const1s";
      break;
    case 10:
      result = "DW_OP_const2u";
      break;
    case 11:
      result = "DW_OP_const2s";
      break;
    case 12:
      result = "DW_OP_const4u";
      break;
    case 13:
      result = "DW_OP_const4s";
      break;
    case 14:
      result = "DW_OP_const8u";
      break;
    case 15:
      result = "DW_OP_const8s";
      break;
    case 16:
      result = "DW_OP_constu";
      break;
    case 17:
      result = "DW_OP_consts";
      break;
    case 18:
      result = "DW_OP_dup";
      break;
    case 19:
      result = "DW_OP_drop";
      break;
    case 20:
      result = "DW_OP_over";
      break;
    case 21:
      result = "DW_OP_pick";
      break;
    case 22:
      result = "DW_OP_swap";
      break;
    case 23:
      result = "DW_OP_rot";
      break;
    case 24:
      result = "DW_OP_xderef";
      break;
    case 25:
      result = "DW_OP_abs";
      break;
    case 26:
      result = "DW_OP_and";
      break;
    case 27:
      result = "DW_OP_div";
      break;
    case 28:
      result = "DW_OP_minus";
      break;
    case 29:
      result = "DW_OP_mod";
      break;
    case 30:
      result = "DW_OP_mul";
      break;
    case 31:
      result = "DW_OP_neg";
      break;
    case 32:
      result = "DW_OP_not";
      break;
    case 33:
      result = "DW_OP_or";
      break;
    case 34:
      result = "DW_OP_plus";
      break;
    case 35:
      result = "DW_OP_plus_uconst";
      break;
    case 36:
      result = "DW_OP_shl";
      break;
    case 37:
      result = "DW_OP_shr";
      break;
    case 38:
      result = "DW_OP_shra";
      break;
    case 39:
      result = "DW_OP_xor";
      break;
    case 40:
      result = "DW_OP_bra";
      break;
    case 41:
      result = "DW_OP_eq";
      break;
    case 42:
      result = "DW_OP_ge";
      break;
    case 43:
      result = "DW_OP_gt";
      break;
    case 44:
      result = "DW_OP_le";
      break;
    case 45:
      result = "DW_OP_lt";
      break;
    case 46:
      result = "DW_OP_ne";
      break;
    case 47:
      result = "DW_OP_skip";
      break;
    case 48:
      result = "DW_OP_lit0";
      break;
    case 49:
      result = "DW_OP_lit1";
      break;
    case 50:
      result = "DW_OP_lit2";
      break;
    case 51:
      result = "DW_OP_lit3";
      break;
    case 52:
      result = "DW_OP_lit4";
      break;
    case 53:
      result = "DW_OP_lit5";
      break;
    case 54:
      result = "DW_OP_lit6";
      break;
    case 55:
      result = "DW_OP_lit7";
      break;
    case 56:
      result = "DW_OP_lit8";
      break;
    case 57:
      result = "DW_OP_lit9";
      break;
    case 58:
      result = "DW_OP_lit10";
      break;
    case 59:
      result = "DW_OP_lit11";
      break;
    case 60:
      result = "DW_OP_lit12";
      break;
    case 61:
      result = "DW_OP_lit13";
      break;
    case 62:
      result = "DW_OP_lit14";
      break;
    case 63:
      result = "DW_OP_lit15";
      break;
    case 64:
      result = "DW_OP_lit16";
      break;
    case 65:
      result = "DW_OP_lit17";
      break;
    case 66:
      result = "DW_OP_lit18";
      break;
    case 67:
      result = "DW_OP_lit19";
      break;
    case 68:
      result = "DW_OP_lit20";
      break;
    case 69:
      result = "DW_OP_lit21";
      break;
    case 70:
      result = "DW_OP_lit22";
      break;
    case 71:
      result = "DW_OP_lit23";
      break;
    case 72:
      result = "DW_OP_lit24";
      break;
    case 73:
      result = "DW_OP_lit25";
      break;
    case 74:
      result = "DW_OP_lit26";
      break;
    case 75:
      result = "DW_OP_lit27";
      break;
    case 76:
      result = "DW_OP_lit28";
      break;
    case 77:
      result = "DW_OP_lit29";
      break;
    case 78:
      result = "DW_OP_lit30";
      break;
    case 79:
      result = "DW_OP_lit31";
      break;
    case 80:
      result = "DW_OP_reg0";
      break;
    case 81:
      result = "DW_OP_reg1";
      break;
    case 82:
      result = "DW_OP_reg2";
      break;
    case 83:
      result = "DW_OP_reg3";
      break;
    case 84:
      result = "DW_OP_reg4";
      break;
    case 85:
      result = "DW_OP_reg5";
      break;
    case 86:
      result = "DW_OP_reg6";
      break;
    case 87:
      result = "DW_OP_reg7";
      break;
    case 88:
      result = "DW_OP_reg8";
      break;
    case 89:
      result = "DW_OP_reg9";
      break;
    case 90:
      result = "DW_OP_reg10";
      break;
    case 91:
      result = "DW_OP_reg11";
      break;
    case 92:
      result = "DW_OP_reg12";
      break;
    case 93:
      result = "DW_OP_reg13";
      break;
    case 94:
      result = "DW_OP_reg14";
      break;
    case 95:
      result = "DW_OP_reg15";
      break;
    case 96:
      result = "DW_OP_reg16";
      break;
    case 97:
      result = "DW_OP_reg17";
      break;
    case 98:
      result = "DW_OP_reg18";
      break;
    case 99:
      result = "DW_OP_reg19";
      break;
    case 100:
      result = "DW_OP_reg20";
      break;
    case 101:
      result = "DW_OP_reg21";
      break;
    case 102:
      result = "DW_OP_reg22";
      break;
    case 103:
      result = "DW_OP_reg23";
      break;
    case 104:
      result = "DW_OP_reg24";
      break;
    case 105:
      result = "DW_OP_reg25";
      break;
    case 106:
      result = "DW_OP_reg26";
      break;
    case 107:
      result = "DW_OP_reg27";
      break;
    case 108:
      result = "DW_OP_reg28";
      break;
    case 109:
      result = "DW_OP_reg29";
      break;
    case 110:
      result = "DW_OP_reg30";
      break;
    case 111:
      result = "DW_OP_reg31";
      break;
    case 112:
      result = "DW_OP_breg0";
      break;
    case 113:
      result = "DW_OP_breg1";
      break;
    case 114:
      result = "DW_OP_breg2";
      break;
    case 115:
      result = "DW_OP_breg3";
      break;
    case 116:
      result = "DW_OP_breg4";
      break;
    case 117:
      result = "DW_OP_breg5";
      break;
    case 118:
      result = "DW_OP_breg6";
      break;
    case 119:
      result = "DW_OP_breg7";
      break;
    case 120:
      result = "DW_OP_breg8";
      break;
    case 121:
      result = "DW_OP_breg9";
      break;
    case 122:
      result = "DW_OP_breg10";
      break;
    case 123:
      result = "DW_OP_breg11";
      break;
    case 124:
      result = "DW_OP_breg12";
      break;
    case 125:
      result = "DW_OP_breg13";
      break;
    case 126:
      result = "DW_OP_breg14";
      break;
    case 127:
      result = "DW_OP_breg15";
      break;
    case 128:
      result = "DW_OP_breg16";
      break;
    case 129:
      result = "DW_OP_breg17";
      break;
    case 130:
      result = "DW_OP_breg18";
      break;
    case 131:
      result = "DW_OP_breg19";
      break;
    case 132:
      result = "DW_OP_breg20";
      break;
    case 133:
      result = "DW_OP_breg21";
      break;
    case 134:
      result = "DW_OP_breg22";
      break;
    case 135:
      result = "DW_OP_breg23";
      break;
    case 136:
      result = "DW_OP_breg24";
      break;
    case 137:
      result = "DW_OP_breg25";
      break;
    case 138:
      result = "DW_OP_breg26";
      break;
    case 139:
      result = "DW_OP_breg27";
      break;
    case 140:
      result = "DW_OP_breg28";
      break;
    case 141:
      result = "DW_OP_breg29";
      break;
    case 142:
      result = "DW_OP_breg30";
      break;
    case 143:
      result = "DW_OP_breg31";
      break;
    case 144:
      result = "DW_OP_regx";
      break;
    case 145:
      result = "DW_OP_fbreg";
      break;
    case 146:
      result = "DW_OP_bregx";
      break;
    case 147:
      result = "DW_OP_piece";
      break;
    case 148:
      result = "DW_OP_deref_size";
      break;
    case 149:
      result = "DW_OP_xderef_size";
      break;
    case 150:
      result = "DW_OP_nop";
      break;
    case 151:
      result = "DW_OP_push_object_address";
      break;
    case 152:
      result = "DW_OP_call2";
      break;
    case 153:
      result = "DW_OP_call4";
      break;
    case 154:
      result = "DW_OP_call_ref";
      break;
    case 155:
      result = "DW_OP_form_tls_address";
      break;
    case 156:
      result = "DW_OP_call_frame_cfa";
      break;
    case 157:
      result = "DW_OP_bit_piece";
      break;
    case 158:
      result = "DW_OP_implicit_value";
      break;
    case 159:
      result = "DW_OP_stack_value";
      break;
    case 160:
      result = "DW_OP_implicit_pointer";
      break;
    case 161:
      result = "DW_OP_addrx";
      break;
    case 162:
      result = "DW_OP_constx";
      break;
    case 163:
      result = "DW_OP_entry_value";
      break;
    case 164:
      result = "DW_OP_const_type";
      break;
    case 165:
      result = "DW_OP_regval_type";
      break;
    case 166:
      result = "DW_OP_deref_type";
      break;
    case 167:
      result = "DW_OP_xderef_type";
      break;
    case 168:
      result = "DW_OP_convert";
      break;
    case 169:
      result = "DW_OP_reinterpret";
      break;
    case 224:
      result = "DW_OP_GNU_push_tls_address";
      break;
    case 225:
      result = "DW_OP_HP_is_value";
      break;
    case 226:
      result = "DW_OP_HP_fltconst4";
      break;
    case 227:
      result = "DW_OP_HP_fltconst8";
      break;
    case 228:
      result = "DW_OP_HP_mod_range";
      break;
    case 229:
      result = "DW_OP_HP_unmod_range";
      break;
    case 230:
      result = "DW_OP_HP_tls";
      break;
    case 232:
      result = "DW_OP_INTEL_bit_piece";
      break;
    case 237:
      result = "DW_OP_WASM_location";
      break;
    case 238:
      result = "DW_OP_WASM_location_int";
      break;
    case 240:
      result = "DW_OP_APPLE_uninit";
      break;
    case 243:
      result = "DW_OP_GNU_entry_value";
      break;
    case 248:
      result = "DW_OP_PGI_omp_thread_num";
      break;
    case 251:
      result = "DW_OP_GNU_addr_index";
      break;
    case 252:
      result = "DW_OP_GNU_const_index";
      break;
    default:
      switch(v1)
      {
        case 4096:
          result = "DW_OP_LLVM_fragment";
          break;
        case 4097:
          result = "DW_OP_LLVM_convert";
          break;
        case 4098:
          result = "DW_OP_LLVM_tag_offset";
          break;
        case 4099:
          result = "DW_OP_LLVM_entry_value";
          break;
        case 4100:
          result = "DW_OP_LLVM_implicit_pointer";
          break;
        case 4101:
          result = "DW_OP_LLVM_arg";
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t llvm::dwarf::getOperationEncoding(uint64_t a1, uint64_t a2)
{
  unint64_t v16;
  _BOOL4 v25;
  char v143;
  char v144;
  int v172;
  int v173;
  uint64_t v182;
  uint64_t v183;
  uint64_t v205;
  BOOL v206;
  uint64_t v207;
  uint64_t v210;
  uint64_t v211;

  switch(a2)
  {
    case 9:
      if (*(_QWORD *)a1 == 0x75645F504F5F5744 && *(_BYTE *)(a1 + 8) == 112)
      {
        v16 = 0x100000012;
      }
      else if (*(_QWORD *)a1 == 0x6F725F504F5F5744 && *(_BYTE *)(a1 + 8) == 116)
      {
        v16 = 0x100000017;
      }
      else if (*(_QWORD *)a1 == 0x62615F504F5F5744 && *(_BYTE *)(a1 + 8) == 115)
      {
        v16 = 0x100000019;
      }
      else if (*(_QWORD *)a1 == 0x6E615F504F5F5744 && *(_BYTE *)(a1 + 8) == 100)
      {
        v16 = 0x10000001ALL;
      }
      else if (*(_QWORD *)a1 == 0x69645F504F5F5744 && *(_BYTE *)(a1 + 8) == 118)
      {
        v16 = 0x10000001BLL;
      }
      else if (*(_QWORD *)a1 == 0x6F6D5F504F5F5744 && *(_BYTE *)(a1 + 8) == 100)
      {
        v16 = 0x10000001DLL;
      }
      else if (*(_QWORD *)a1 == 0x756D5F504F5F5744 && *(_BYTE *)(a1 + 8) == 108)
      {
        v16 = 0x10000001ELL;
      }
      else if (*(_QWORD *)a1 == 0x656E5F504F5F5744 && *(_BYTE *)(a1 + 8) == 103)
      {
        v16 = 0x10000001FLL;
      }
      else if (*(_QWORD *)a1 == 0x6F6E5F504F5F5744 && *(_BYTE *)(a1 + 8) == 116)
      {
        v16 = 0x100000020;
      }
      else if (*(_QWORD *)a1 == 0x68735F504F5F5744 && *(_BYTE *)(a1 + 8) == 108)
      {
        v16 = 0x100000024;
      }
      else if (*(_QWORD *)a1 == 0x68735F504F5F5744 && *(_BYTE *)(a1 + 8) == 114)
      {
        v16 = 0x100000025;
      }
      else if (*(_QWORD *)a1 == 0x6F785F504F5F5744 && *(_BYTE *)(a1 + 8) == 114)
      {
        v16 = 0x100000027;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_BYTE *)(a1 + 8) == 97)
      {
        v16 = 0x100000028;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x6F6E5F504F5F5744 || *(_BYTE *)(a1 + 8) != 112)
          goto LABEL_58;
        v16 = 0x100000096;
      }
      goto LABEL_1015;
    case 10:
      if (*(_QWORD *)a1 == 0x64615F504F5F5744 && *(_WORD *)(a1 + 8) == 29284)
      {
        v16 = 0x100000003;
      }
      else if (*(_QWORD *)a1 == 0x72645F504F5F5744 && *(_WORD *)(a1 + 8) == 28783)
      {
        v16 = 0x100000013;
      }
      else if (*(_QWORD *)a1 == 0x766F5F504F5F5744 && *(_WORD *)(a1 + 8) == 29285)
      {
        v16 = 0x100000014;
      }
      else if (*(_QWORD *)a1 == 0x69705F504F5F5744 && *(_WORD *)(a1 + 8) == 27491)
      {
        v16 = 0x100000015;
      }
      else if (*(_QWORD *)a1 == 0x77735F504F5F5744 && *(_WORD *)(a1 + 8) == 28769)
      {
        v16 = 0x100000016;
      }
      else if (*(_QWORD *)a1 == 0x6C705F504F5F5744 && *(_WORD *)(a1 + 8) == 29557)
      {
        v16 = 0x100000022;
      }
      else if (*(_QWORD *)a1 == 0x68735F504F5F5744 && *(_WORD *)(a1 + 8) == 24946)
      {
        v16 = 0x100000026;
      }
      else if (*(_QWORD *)a1 == 0x6B735F504F5F5744 && *(_WORD *)(a1 + 8) == 28777)
      {
        v16 = 0x10000002FLL;
      }
      else if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 12404)
      {
        v16 = 0x100000030;
      }
      else if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 12660)
      {
        v16 = 0x100000031;
      }
      else if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 12916)
      {
        v16 = 0x100000032;
      }
      else if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 13172)
      {
        v16 = 0x100000033;
      }
      else if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 13428)
      {
        v16 = 0x100000034;
      }
      else if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 13684)
      {
        v16 = 0x100000035;
      }
      else if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 13940)
      {
        v16 = 0x100000036;
      }
      else if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 14196)
      {
        v16 = 0x100000037;
      }
      else if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 14452)
      {
        v16 = 0x100000038;
      }
      else if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_WORD *)(a1 + 8) == 14708)
      {
        v16 = 0x100000039;
      }
      else if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 12391)
      {
        v16 = 0x100000050;
      }
      else if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 12647)
      {
        v16 = 0x100000051;
      }
      else if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 12903)
      {
        v16 = 0x100000052;
      }
      else if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 13159)
      {
        v16 = 0x100000053;
      }
      else if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 13415)
      {
        v16 = 0x100000054;
      }
      else if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 13671)
      {
        v16 = 0x100000055;
      }
      else if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 13927)
      {
        v16 = 0x100000056;
      }
      else if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 14183)
      {
        v16 = 0x100000057;
      }
      else if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 14439)
      {
        v16 = 0x100000058;
      }
      else if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_WORD *)(a1 + 8) == 14695)
      {
        v16 = 0x100000059;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x65725F504F5F5744 || *(_WORD *)(a1 + 8) != 30823)
        {
LABEL_58:
          v16 = 0;
          goto LABEL_875;
        }
        v16 = 0x100000090;
      }
      goto LABEL_1015;
    case 11:
      if (*(_QWORD *)a1 ^ 0x65645F504F5F5744 | *(_QWORD *)(a1 + 3) ^ 0x66657265645F504FLL)
        v16 = 0;
      else
        v16 = 0x100000006;
      goto LABEL_95;
    case 12:
      if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_DWORD *)(a1 + 8) == 1970565998)
      {
        v16 = 0x100000010;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_DWORD *)(a1 + 8) == 1937011566)
      {
        v16 = 0x100000011;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x64785F504F5F5744 && *(_DWORD *)(a1 + 8) == 1717924453)
      {
        v16 = 0x100000018;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 808544101)
      {
        v16 = 0x10000007ALL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 825321317)
      {
        v16 = 0x10000007BLL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 842098533)
      {
        v16 = 0x10000007CLL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 858875749)
      {
        v16 = 0x10000007DLL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 875652965)
      {
        v16 = 0x10000007ELL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 892430181)
      {
        v16 = 0x10000007FLL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 909207397)
      {
        v16 = 0x100000080;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 925984613)
      {
        v16 = 0x100000081;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 942761829)
      {
        v16 = 0x100000082;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 959539045)
      {
        v16 = 0x100000083;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 808609637)
      {
        v16 = 0x100000084;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 825386853)
      {
        v16 = 0x100000085;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 842164069)
      {
        v16 = 0x100000086;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 858941285)
      {
        v16 = 0x100000087;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 875718501)
      {
        v16 = 0x100000088;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 892495717)
      {
        v16 = 0x100000089;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 909272933)
      {
        v16 = 0x10000008ALL;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 926050149)
      {
        v16 = 0x10000008BLL;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 942827365)
      {
        v16 = 0x10000008CLL;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 959604581)
      {
        v16 = 0x10000008DLL;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 808675173)
      {
        v16 = 0x10000008ELL;
      }
      else if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_DWORD *)(a1 + 8) == 825452389)
      {
        v16 = 0x10000008FLL;
      }
      else if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_DWORD *)(a1 + 8) == 2020897646)
      {
        v16 = 0x1000000A2;
      }
      else if (*(_QWORD *)a1 == 0x50485F504F5F5744 && *(_DWORD *)(a1 + 8) == 1936487519)
      {
        v16 = 0x1000000E6;
      }
      else
      {
        v16 = 0;
LABEL_840:
        if (a2 == 19)
        {
          if (*(_QWORD *)a1 == 0x41575F504F5F5744
            && *(_QWORD *)(a1 + 8) == 0x7461636F6C5F4D53
            && *(_QWORD *)(a1 + 11) == 0x6E6F697461636F6CLL)
          {
            v16 = 0x1000000EDLL;
          }
          else
          {
            if (*(_QWORD *)a1 != 0x4C4C5F504F5F5744
              || *(_QWORD *)(a1 + 8) != 0x6D676172665F4D56
              || *(_QWORD *)(a1 + 11) != 0x746E656D67617266)
            {
              v172 = 0;
              goto LABEL_915;
            }
            v16 = 0x100001000;
          }
        }
        else
        {
LABEL_856:
          if (a2 != 23)
            goto LABEL_875;
          v182 = *(_QWORD *)a1 ^ 0x41575F504F5F5744 | *(_QWORD *)(a1 + 8) ^ 0x7461636F6C5F4D53 | *(_QWORD *)(a1 + 15) ^ 0x746E695F6E6F6974;
          v183 = 0x1000000EELL;
LABEL_858:
          if (!v182)
            v16 = v183;
        }
      }
      goto LABEL_1015;
    case 13:
      if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_QWORD *)(a1 + 5) == 0x753174736E6F635FLL)
      {
        v16 = 0x100000008;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_QWORD *)(a1 + 5) == 0x733174736E6F635FLL)
      {
        v16 = 0x100000009;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_QWORD *)(a1 + 5) == 0x753274736E6F635FLL)
      {
        v16 = 0x10000000ALL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_QWORD *)(a1 + 5) == 0x733274736E6F635FLL)
      {
        v16 = 0x10000000BLL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_QWORD *)(a1 + 5) == 0x753474736E6F635FLL)
      {
        v16 = 0x10000000CLL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_QWORD *)(a1 + 5) == 0x733474736E6F635FLL)
      {
        v16 = 0x10000000DLL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_QWORD *)(a1 + 5) == 0x753874736E6F635FLL)
      {
        v16 = 0x10000000ELL;
        goto LABEL_1015;
      }
      if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_QWORD *)(a1 + 5) == 0x733874736E6F635FLL)
      {
        v16 = 0x10000000FLL;
        goto LABEL_1015;
      }
      v16 = 0;
LABEL_95:
      v25 = HIDWORD(v16) == 0;
LABEL_324:
      if (a2 == 11 && v25)
      {
        if (*(_QWORD *)a1 == 0x696D5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x73756E696D5F504FLL)
        {
          v16 = 0x10000001CLL;
          goto LABEL_1015;
        }
LABEL_330:
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x303174696C5F504FLL)
        {
          v16 = 0x10000003ALL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x313174696C5F504FLL)
        {
          v16 = 0x10000003BLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x323174696C5F504FLL)
        {
          v16 = 0x10000003CLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x333174696C5F504FLL)
        {
          v16 = 0x10000003DLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x343174696C5F504FLL)
        {
          v16 = 0x10000003ELL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x353174696C5F504FLL)
        {
          v16 = 0x10000003FLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x363174696C5F504FLL)
        {
          v16 = 0x100000040;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x373174696C5F504FLL)
        {
          v16 = 0x100000041;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x383174696C5F504FLL)
        {
          v16 = 0x100000042;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x393174696C5F504FLL)
        {
          v16 = 0x100000043;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x303274696C5F504FLL)
        {
          v16 = 0x100000044;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x313274696C5F504FLL)
        {
          v16 = 0x100000045;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x323274696C5F504FLL)
        {
          v16 = 0x100000046;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x333274696C5F504FLL)
        {
          v16 = 0x100000047;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x343274696C5F504FLL)
        {
          v16 = 0x100000048;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x353274696C5F504FLL)
        {
          v16 = 0x100000049;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x363274696C5F504FLL)
        {
          v16 = 0x10000004ALL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x373274696C5F504FLL)
        {
          v16 = 0x10000004BLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x383274696C5F504FLL)
        {
          v16 = 0x10000004CLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x393274696C5F504FLL)
        {
          v16 = 0x10000004DLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x303374696C5F504FLL)
        {
          v16 = 0x10000004ELL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x696C5F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x313374696C5F504FLL)
        {
          v16 = 0x10000004FLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x30316765725F504FLL)
        {
          v16 = 0x10000005ALL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x31316765725F504FLL)
        {
          v16 = 0x10000005BLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x32316765725F504FLL)
        {
          v16 = 0x10000005CLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x33316765725F504FLL)
        {
          v16 = 0x10000005DLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x34316765725F504FLL)
        {
          v16 = 0x10000005ELL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x35316765725F504FLL)
        {
          v16 = 0x10000005FLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x36316765725F504FLL)
        {
          v16 = 0x100000060;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x37316765725F504FLL)
        {
          v16 = 0x100000061;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x38316765725F504FLL)
        {
          v16 = 0x100000062;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x39316765725F504FLL)
        {
          v16 = 0x100000063;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x30326765725F504FLL)
        {
          v16 = 0x100000064;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x31326765725F504FLL)
        {
          v16 = 0x100000065;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x32326765725F504FLL)
        {
          v16 = 0x100000066;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x33326765725F504FLL)
        {
          v16 = 0x100000067;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x34326765725F504FLL)
        {
          v16 = 0x100000068;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x35326765725F504FLL)
        {
          v16 = 0x100000069;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x36326765725F504FLL)
        {
          v16 = 0x10000006ALL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x37326765725F504FLL)
        {
          v16 = 0x10000006BLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x38326765725F504FLL)
        {
          v16 = 0x10000006CLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x39326765725F504FLL)
        {
          v16 = 0x10000006DLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x30336765725F504FLL)
        {
          v16 = 0x10000006ELL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x65725F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x31336765725F504FLL)
        {
          v16 = 0x10000006FLL;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x30676572625F504FLL)
        {
          v16 = 0x100000070;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x31676572625F504FLL)
        {
          v16 = 0x100000071;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x32676572625F504FLL)
        {
          v16 = 0x100000072;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x33676572625F504FLL)
        {
          v16 = 0x100000073;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x34676572625F504FLL)
        {
          v16 = 0x100000074;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x35676572625F504FLL)
        {
          v16 = 0x100000075;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x36676572625F504FLL)
        {
          v16 = 0x100000076;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x37676572625F504FLL)
        {
          v16 = 0x100000077;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x38676572625F504FLL)
        {
          v16 = 0x100000078;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x39676572625F504FLL)
        {
          v16 = 0x100000079;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x62665F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x67657262665F504FLL)
        {
          v16 = 0x100000091;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x72625F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x78676572625F504FLL)
        {
          v16 = 0x100000092;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x69705F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x65636569705F504FLL)
        {
          v16 = 0x100000093;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x61635F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x326C6C61635F504FLL)
        {
          v16 = 0x100000098;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x61635F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x346C6C61635F504FLL)
        {
          v16 = 0x100000099;
          goto LABEL_1015;
        }
        if (*(_QWORD *)a1 == 0x64615F504F5F5744 && *(_QWORD *)(a1 + 3) == 0x78726464615F504FLL)
        {
          v16 = 0x1000000A1;
          goto LABEL_1015;
        }
LABEL_875:
        v172 = 0;
LABEL_876:
        if (a2 == 21)
        {
          if (*(_QWORD *)a1 == 0x4E475F504F5F5744
            && *(_QWORD *)(a1 + 8) == 0x5F7972746E655F55
            && *(_QWORD *)(a1 + 13) == 0x65756C61765F7972)
          {
            v16 = 0x1000000F3;
            goto LABEL_1015;
          }
          v173 = 0;
        }
        else
        {
          v173 = 0;
LABEL_886:
          if (a2 == 24)
          {
            if (*(_QWORD *)a1 == 0x47505F504F5F5744
              && *(_QWORD *)(a1 + 8) == 0x68745F706D6F5F49
              && *(_QWORD *)(a1 + 16) == 0x6D756E5F64616572)
            {
              v16 = 0x1000000F8;
              goto LABEL_1015;
            }
            if ((v173 & 1) == 0)
              goto LABEL_915;
            goto LABEL_908;
          }
        }
LABEL_896:
        if (a2 == 21)
        {
          if (*(_QWORD *)a1 == 0x4E475F504F5F5744
            && *(_QWORD *)(a1 + 8) == 0x5F74736E6F635F55
            && *(_QWORD *)(a1 + 13) == 0x7865646E695F7473)
          {
            v16 = 0x1000000FCLL;
            goto LABEL_1015;
          }
          v205 = *(_QWORD *)a1 ^ 0x4C4C5F504F5F5744 | *(_QWORD *)(a1 + 8) ^ 0x6F5F6761745F4D56 | *(_QWORD *)(a1 + 13) ^ 0x74657366666F5F67;
          v206 = v205 == 0;
          if (!v205)
            LOBYTE(v172) = 0;
          v207 = 0x100001002;
          goto LABEL_924;
        }
        if (!v173)
        {
LABEL_915:
          if (a2 == 27)
          {
            v211 = *(_QWORD *)a1 ^ 0x4C4C5F504F5F5744 | *(_QWORD *)(a1 + 8) ^ 0x696C706D695F4D56 | *(_QWORD *)(a1 + 16) ^ 0x6E696F705F746963 | *(_QWORD *)(a1 + 19) ^ 0x7265746E696F705FLL;
            v206 = v211 == 0;
            if (!v211)
              LOBYTE(v172) = 0;
            v207 = 0x100001004;
          }
          else
          {
            if (a2 != 22)
            {
              if (!v172)
                goto LABEL_1015;
              goto LABEL_929;
            }
            v210 = *(_QWORD *)a1 ^ 0x4C4C5F504F5F5744 | *(_QWORD *)(a1 + 8) ^ 0x7972746E655F4D56 | *(_QWORD *)(a1 + 14) ^ 0x65756C61765F7972;
            v206 = v210 == 0;
            if (!v210)
              LOBYTE(v172) = 0;
            v207 = 0x100001003;
          }
LABEL_924:
          if (!v206)
            v207 = v16;
          if ((v172 & 1) == 0)
          {
            v16 = v207;
            goto LABEL_1015;
          }
LABEL_929:
          if (!(*(_QWORD *)a1 ^ 0x4C4C5F504F5F5744 | *(_QWORD *)(a1 + 6) ^ 0x6772615F4D564C4CLL))
            v16 = 0x100001005;
          goto LABEL_1015;
        }
LABEL_908:
        if (*(_QWORD *)a1 == 0x4C4C5F504F5F5744
          && *(_QWORD *)(a1 + 8) == 0x65766E6F635F4D56
          && *(_WORD *)(a1 + 16) == 29810)
        {
          v16 = 0x100001001;
          goto LABEL_1015;
        }
        goto LABEL_915;
      }
      v143 = !v25;
      v144 = a2 != 8 || !v25;
      if ((v144 & 1) == 0)
      {
        switch(*(_QWORD *)a1)
        {
          case 0x726F5F504F5F5744:
            v16 = 0x100000021;
            goto LABEL_1015;
          case 0x71655F504F5F5744:
            v16 = 0x100000029;
            goto LABEL_1015;
          case 0x65675F504F5F5744:
            v16 = 0x10000002ALL;
            goto LABEL_1015;
          case 0x74675F504F5F5744:
            v16 = 0x10000002BLL;
            goto LABEL_1015;
          case 0x656C5F504F5F5744:
            v16 = 0x10000002CLL;
            goto LABEL_1015;
          case 0x746C5F504F5F5744:
            v16 = 0x10000002DLL;
            goto LABEL_1015;
          case 0x656E5F504F5F5744:
            v16 = 0x10000002ELL;
            goto LABEL_1015;
        }
        goto LABEL_875;
      }
      if (a2 != 17)
        v143 = 1;
      if ((v143 & 1) != 0)
      {
        if (v25)
        {
          switch(a2)
          {
            case 11:
              goto LABEL_330;
            case 13:
LABEL_652:
              if (*(_QWORD *)a1 != 0x6F635F504F5F5744 || *(_QWORD *)(a1 + 5) != 0x747265766E6F635FLL)
                goto LABEL_856;
              v16 = 0x1000000A8;
              break;
            case 14:
              if (*(_QWORD *)a1 != 0x61635F504F5F5744 || *(_QWORD *)(a1 + 6) != 0x6665725F6C6C6163)
              {
                v172 = 1;
                goto LABEL_876;
              }
              v16 = 0x10000009ALL;
              break;
            case 15:
              v182 = *(_QWORD *)a1 ^ 0x69625F504F5F5744 | *(_QWORD *)(a1 + 7) ^ 0x65636569705F7469;
              v183 = 0x10000009DLL;
              goto LABEL_858;
            case 16:
              if (*(_QWORD *)a1 == 0x65645F504F5F5744 && *(_QWORD *)(a1 + 8) == 0x657A69735F666572)
              {
                v16 = 0x100000094;
              }
              else if (*(_QWORD *)a1 == 0x6F635F504F5F5744 && *(_QWORD *)(a1 + 8) == 0x657079745F74736ELL)
              {
                v16 = 0x1000000A4;
              }
              else if (*(_QWORD *)a1 == 0x65645F504F5F5744 && *(_QWORD *)(a1 + 8) == 0x657079745F666572)
              {
                v16 = 0x1000000A6;
              }
              break;
            case 17:
              goto LABEL_594;
            case 18:
LABEL_712:
              if (*(_QWORD *)a1 == 0x50485F504F5F5744
                && *(_QWORD *)(a1 + 8) == 0x736E6F63746C665FLL
                && *(_WORD *)(a1 + 16) == 13428)
              {
                v16 = 0x1000000E2;
              }
              else if (*(_QWORD *)a1 == 0x50485F504F5F5744
                     && *(_QWORD *)(a1 + 8) == 0x736E6F63746C665FLL
                     && *(_WORD *)(a1 + 16) == 14452)
              {
                v16 = 0x1000000E3;
              }
              else if (*(_QWORD *)a1 == 0x50485F504F5F5744
                     && *(_QWORD *)(a1 + 8) == 0x6E61725F646F6D5FLL
                     && *(_WORD *)(a1 + 16) == 25959)
              {
                v16 = 0x1000000E4;
              }
              else
              {
                if (*(_QWORD *)a1 != 0x50415F504F5F5744
                  || *(_QWORD *)(a1 + 8) != 0x6E696E755F454C50
                  || *(_WORD *)(a1 + 16) != 29801)
                {
                  v172 = 0;
                  v173 = 1;
                  goto LABEL_886;
                }
                v16 = 0x1000000F0;
              }
              break;
            case 20:
              if (*(_QWORD *)a1 == 0x61635F504F5F5744
                && *(_QWORD *)(a1 + 8) == 0x656D6172665F6C6CLL
                && *(_DWORD *)(a1 + 16) == 1634100063)
              {
                v16 = 0x10000009CLL;
              }
              else if (*(_QWORD *)a1 == 0x6D695F504F5F5744
                     && *(_QWORD *)(a1 + 8) == 0x765F746963696C70
                     && *(_DWORD *)(a1 + 16) == 1702194273)
              {
                v16 = 0x10000009ELL;
              }
              else if (*(_QWORD *)a1 == 0x50485F504F5F5744
                     && *(_QWORD *)(a1 + 8) == 0x725F646F6D6E755FLL
                     && *(_DWORD *)(a1 + 16) == 1701277281)
              {
                v16 = 0x1000000E5;
              }
              else
              {
                if (*(_QWORD *)a1 != 0x4E475F504F5F5744
                  || *(_QWORD *)(a1 + 8) != 0x695F726464615F55
                  || *(_DWORD *)(a1 + 16) != 2019910766)
                {
                  v173 = 0;
                  v172 = 0;
                  goto LABEL_896;
                }
                v16 = 0x1000000FBLL;
              }
              break;
            case 21:
LABEL_753:
              if (*(_QWORD *)a1 != 0x4E495F504F5F5744
                || *(_QWORD *)(a1 + 8) != 0x5F7469625F4C4554
                || *(_QWORD *)(a1 + 13) != 0x65636569705F7469)
              {
                goto LABEL_875;
              }
              v16 = 0x1000000E8;
              break;
            case 22:
              if (*(_QWORD *)a1 == 0x6F665F504F5F5744
                && *(_QWORD *)(a1 + 8) == 0x615F736C745F6D72
                && *(_QWORD *)(a1 + 14) == 0x737365726464615FLL)
              {
                v16 = 0x10000009BLL;
              }
              else
              {
                switch(a2)
                {
                  case 18:
                    goto LABEL_712;
                  case 19:
                  case 20:
                  case 23:
                  case 24:
                  case 25:
                    goto LABEL_840;
                  case 21:
                    goto LABEL_753;
                  case 22:
                    if (*(_QWORD *)a1 != 0x6D695F504F5F5744
                      || *(_QWORD *)(a1 + 8) != 0x705F746963696C70
                      || *(_QWORD *)(a1 + 14) != 0x7265746E696F705FLL)
                    {
                      goto LABEL_875;
                    }
                    v16 = 0x1000000A0;
                    break;
                  case 26:
                    goto LABEL_741;
                  default:
                    if (a2 != 13)
                      goto LABEL_840;
                    goto LABEL_652;
                }
              }
              break;
            case 25:
              v182 = *(_QWORD *)a1 ^ 0x75705F504F5F5744 | *(_QWORD *)(a1 + 8) ^ 0x63656A626F5F6873 | *(_QWORD *)(a1 + 16) ^ 0x7365726464615F74 | *(unsigned __int8 *)(a1 + 24) ^ 0x73;
              v183 = 0x100000097;
              goto LABEL_858;
            case 26:
LABEL_741:
              if (*(_QWORD *)a1 != 0x4E475F504F5F5744
                || *(_QWORD *)(a1 + 8) != 0x745F687375705F55
                || *(_QWORD *)(a1 + 16) != 0x65726464615F736CLL
                || *(_WORD *)(a1 + 24) != 29555)
              {
                goto LABEL_856;
              }
              v16 = 0x1000000E0;
              break;
            default:
              goto LABEL_840;
          }
        }
      }
      else if (*(_QWORD *)a1 == 0x6C705F504F5F5744
             && *(_QWORD *)(a1 + 8) == 0x736E6F63755F7375
             && *(_BYTE *)(a1 + 16) == 116)
      {
        v16 = 0x100000023;
      }
      else
      {
LABEL_594:
        if (*(_QWORD *)a1 == 0x64785F504F5F5744
          && *(_QWORD *)(a1 + 8) == 0x7A69735F66657265
          && *(_BYTE *)(a1 + 16) == 101)
        {
          v16 = 0x100000095;
        }
        else if (*(_QWORD *)a1 == 0x74735F504F5F5744
               && *(_QWORD *)(a1 + 8) == 0x756C61765F6B6361
               && *(_BYTE *)(a1 + 16) == 101)
        {
          v16 = 0x10000009FLL;
        }
        else if (*(_QWORD *)a1 == 0x6E655F504F5F5744
               && *(_QWORD *)(a1 + 8) == 0x756C61765F797274
               && *(_BYTE *)(a1 + 16) == 101)
        {
          v16 = 0x1000000A3;
        }
        else if (*(_QWORD *)a1 == 0x65725F504F5F5744
               && *(_QWORD *)(a1 + 8) == 0x7079745F6C617667
               && *(_BYTE *)(a1 + 16) == 101)
        {
          v16 = 0x1000000A5;
        }
        else if (*(_QWORD *)a1 == 0x64785F504F5F5744
               && *(_QWORD *)(a1 + 8) == 0x7079745F66657265
               && *(_BYTE *)(a1 + 16) == 101)
        {
          v16 = 0x1000000A7;
        }
        else if (*(_QWORD *)a1 == 0x65725F504F5F5744
               && *(_QWORD *)(a1 + 8) == 0x6572707265746E69
               && *(_BYTE *)(a1 + 16) == 116)
        {
          v16 = 0x1000000A9;
        }
        else if (*(_QWORD *)a1 == 0x50485F504F5F5744
               && *(_QWORD *)(a1 + 8) == 0x756C61765F73695FLL
               && *(_BYTE *)(a1 + 16) == 101)
        {
          v16 = 0x1000000E1;
        }
      }
LABEL_1015:
      if ((v16 & 0x300000000) != 0)
        return v16;
      else
        return 0;
    default:
      v16 = 0;
      v25 = 1;
      goto LABEL_324;
  }
}

uint64_t llvm::dwarf::OperationVersion(int a1)
{
  if ((a1 - 3) > 0xA6)
    return 0;
  else
    return dword_1C85F835C[a1 - 3];
}

uint64_t llvm::dwarf::OperationVendor(int a1)
{
  if ((a1 - 224) > 0x1C)
    return 0;
  else
    return dword_1C85F85F8[a1 - 224];
}

uint64_t llvm::dwarf::getAttributeEncoding(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BOOL4 v3;
  uint64_t v7;
  uint64_t v8;
  char v25;
  char v26;
  char v31;
  uint64_t v34;
  _BOOL4 v35;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v2 = 0;
  v3 = 1;
  switch(a2)
  {
    case 12:
      if (*(_QWORD *)a1 == 0x665F4554415F5744 && *(_DWORD *)(a1 + 8) == 1952542572)
      {
        v2 = 0x100000004;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x415F4554415F5744 || *(_DWORD *)(a1 + 8) != 1229538131)
        {
          v2 = 0;
          goto LABEL_145;
        }
        v2 = 0x100000012;
      }
      goto LABEL_171;
    case 13:
      if (*(_QWORD *)a1 != 0x735F4554415F5744 || *(_QWORD *)(a1 + 5) != 0x64656E6769735F45)
      {
        v7 = *(_QWORD *)a1 ^ 0x655F4554415F5744 | *(_QWORD *)(a1 + 5) ^ 0x6465746964655F45;
        v8 = 0x10000000CLL;
        goto LABEL_69;
      }
      v2 = 0x100000005;
      goto LABEL_171;
    case 14:
      if (*(_QWORD *)a1 != 0x615F4554415F5744 || *(_QWORD *)(a1 + 6) != 0x737365726464615FLL)
      {
        if (*(_QWORD *)a1 ^ 0x625F4554415F5744 | *(_QWORD *)(a1 + 6) ^ 0x6E61656C6F6F625FLL)
          v2 = 0;
        else
          v2 = 0x100000002;
        goto LABEL_80;
      }
      v2 = 0x100000001;
      goto LABEL_171;
    case 15:
      if (*(_QWORD *)a1 != 0x755F4554415F5744 || *(_QWORD *)(a1 + 7) != 0x64656E6769736E75)
        goto LABEL_79;
      v2 = 0x100000007;
      goto LABEL_171;
    case 18:
      if (*(_QWORD *)a1 != 0x735F4554415F5744
        || *(_QWORD *)(a1 + 8) != 0x68635F64656E6769
        || *(_WORD *)(a1 + 16) != 29281)
      {
        goto LABEL_79;
      }
      v2 = 0x100000006;
      goto LABEL_171;
    case 20:
      if (*(_QWORD *)a1 == 0x635F4554415F5744
        && *(_QWORD *)(a1 + 8) == 0x665F78656C706D6FLL
        && *(_DWORD *)(a1 + 16) == 1952542572)
      {
        v2 = 0x100000003;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x755F4554415F5744
          || *(_QWORD *)(a1 + 8) != 0x5F64656E6769736ELL
          || *(_DWORD *)(a1 + 16) != 1918986339)
        {
          goto LABEL_79;
        }
        v2 = 0x100000008;
      }
      goto LABEL_171;
    case 21:
      if (*(_QWORD *)a1 == 0x705F4554415F5744
        && *(_QWORD *)(a1 + 8) == 0x65645F64656B6361
        && *(_QWORD *)(a1 + 13) == 0x6C616D696365645FLL)
      {
        v2 = 0x10000000ALL;
      }
      else if (*(_QWORD *)a1 == 0x6E5F4554415F5744
             && *(_QWORD *)(a1 + 8) == 0x735F636972656D75
             && *(_QWORD *)(a1 + 13) == 0x676E697274735F63)
      {
        v2 = 0x10000000BLL;
      }
      else
      {
        v7 = *(_QWORD *)a1 ^ 0x755F4554415F5744 | *(_QWORD *)(a1 + 8) ^ 0x5F64656E6769736ELL | *(_QWORD *)(a1 + 13) ^ 0x64657869665F6465;
        v8 = 0x10000000ELL;
LABEL_69:
        if (v7)
          v2 = 0;
        else
          v2 = v8;
      }
      goto LABEL_171;
    case 22:
      if (*(_QWORD *)a1 != 0x695F4554415F5744
        || *(_QWORD *)(a1 + 8) != 0x7972616E6967616DLL
        || *(_QWORD *)(a1 + 14) != 0x74616F6C665F7972)
      {
LABEL_79:
        v2 = 0;
LABEL_80:
        v3 = HIDWORD(v2) == 0;
        goto LABEL_81;
      }
      v2 = 0x100000009;
      goto LABEL_171;
    default:
LABEL_81:
      if (a2 == 19 && v3)
      {
        if (*(_QWORD *)a1 == 0x735F4554415F5744
          && *(_QWORD *)(a1 + 8) == 0x69665F64656E6769
          && *(_QWORD *)(a1 + 11) == 0x64657869665F6465)
        {
          v2 = 0x10000000DLL;
        }
        goto LABEL_171;
      }
      v25 = !v3;
      v26 = a2 != 20 || !v3;
      if ((v26 & 1) == 0)
      {
        if (*(_QWORD *)a1 == 0x645F4554415F5744
          && *(_QWORD *)(a1 + 8) == 0x665F6C616D696365
          && *(_DWORD *)(a1 + 16) == 1952542572)
        {
          v2 = 0x10000000FLL;
        }
        goto LABEL_171;
      }
      if (a2 != 10)
        v25 = 1;
      if ((v25 & 1) == 0)
      {
        if (*(_QWORD *)a1 == 0x555F4554415F5744 && *(_WORD *)(a1 + 8) == 18004)
        {
          v2 = 0x100000010;
        }
        else if (*(_QWORD *)a1 == 0x555F4554415F5744 && *(_WORD *)(a1 + 8) == 21315)
        {
          v2 = 0x100000011;
        }
        goto LABEL_171;
      }
      v31 = !v3;
      if (a2 != 23)
        v31 = 1;
      if ((v31 & 1) == 0)
      {
        if (*(_QWORD *)a1 == 0x485F4554415F5744
          && *(_QWORD *)(a1 + 8) == 0x656C706D6F635F50
          && *(_QWORD *)(a1 + 15) == 0x74616F6C665F7865)
        {
          v2 = 0x100000081;
          goto LABEL_171;
        }
LABEL_145:
        v35 = (v2 & 0x100000000) == 0;
        goto LABEL_146;
      }
      v34 = v2 & 0x100000000;
      v35 = (v2 & 0x100000000) == 0;
      if (a2 == 18 && !v34)
      {
        if (*(_QWORD *)a1 == 0x485F4554415F5744
          && *(_QWORD *)(a1 + 8) == 0x3174616F6C665F50
          && *(_WORD *)(a1 + 16) == 14386)
        {
          v2 = 0x100000082;
          goto LABEL_171;
        }
        goto LABEL_145;
      }
      if (a2 != 26 || v34)
      {
LABEL_146:
        if (a2 == 22 && v35)
        {
          if (*(_QWORD *)a1 == 0x485F4554415F5744
            && *(_QWORD *)(a1 + 8) == 0x6874616F6C665F50
            && *(_QWORD *)(a1 + 14) == 0x6C65746E69706874)
          {
            v2 = 0x100000084;
          }
          goto LABEL_171;
        }
        v40 = !v35;
        if (a2 == 27)
          v41 = v40;
        else
          v41 = 1;
        if ((v41 & 1) != 0)
        {
          if (a2 != 28)
            v40 = 1;
          if ((v40 & 1) != 0)
            goto LABEL_171;
          v42 = *(_QWORD *)a1 ^ 0x485F4554415F5744 | *(_QWORD *)(a1 + 8) ^ 0x6E6967616D695F50 | *(_QWORD *)(a1 + 16) ^ 0x616F6C665F797261 | *(unsigned int *)(a1 + 24) ^ 0x38323174;
          v43 = 0x100000086;
        }
        else
        {
          v42 = *(_QWORD *)a1 ^ 0x485F4554415F5744 | *(_QWORD *)(a1 + 8) ^ 0x6E6967616D695F50 | *(_QWORD *)(a1 + 16) ^ 0x616F6C665F797261 | *(_QWORD *)(a1 + 19) ^ 0x303974616F6C665FLL;
          v43 = 0x100000085;
        }
        if (!v42)
          v2 = v43;
        goto LABEL_171;
      }
      if (*(_QWORD *)a1 == 0x485F4554415F5744
        && *(_QWORD *)(a1 + 8) == 0x656C706D6F635F50
        && *(_QWORD *)(a1 + 16) == 0x3174616F6C665F78
        && *(_WORD *)(a1 + 24) == 14386)
      {
        v2 = 0x100000083;
      }
LABEL_171:
      if ((v2 & 0x300000000) != 0)
        return v2;
      else
        return 0;
  }
}

uint64_t llvm::dwarf::AttributeEncodingVersion(int a1)
{
  uint64_t result;

  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
LABEL_4:
      result = 2;
      break;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      result = 3;
      break;
    case 16:
      result = 4;
      break;
    case 17:
    case 18:
      result = 5;
      break;
    default:
      switch(a1)
      {
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
          goto LABEL_4;
        default:
          result = 0;
          break;
      }
      break;
  }
  return result;
}

uint64_t llvm::dwarf::AttributeEncodingVendor(char a1)
{
  if ((a1 + 127) >= 6u)
    return 0;
  else
    return 12;
}

char *llvm::dwarf::DecimalSignString(llvm::dwarf *this)
{
  if (((_DWORD)this - 1) > 4)
    return 0;
  else
    return off_1E813E050[(int)this - 1];
}

const char *llvm::dwarf::EndianityString(llvm::dwarf *this)
{
  const char *v1;
  const char *v2;
  const char *v3;
  const char *v4;
  const char *v5;

  v1 = "DW_END_little";
  v2 = "DW_END_lo_user";
  v3 = "DW_END_hi_user";
  if ((_DWORD)this != 255)
    v3 = 0;
  if ((_DWORD)this != 64)
    v2 = v3;
  if ((_DWORD)this != 2)
    v1 = v2;
  v4 = "DW_END_default";
  v5 = "DW_END_big";
  if ((_DWORD)this != 1)
    v5 = 0;
  if ((_DWORD)this)
    v4 = v5;
  if ((int)this <= 1)
    return v4;
  else
    return v1;
}

char *llvm::dwarf::DefaultedMemberString(llvm::dwarf *this)
{
  if (this > 2)
    return 0;
  else
    return off_1E813E0D0[(int)this];
}

char *llvm::dwarf::VisibilityString(llvm::dwarf *this)
{
  if (((_DWORD)this - 1) > 2)
    return 0;
  else
    return off_1E813E078[(int)this - 1];
}

char *llvm::dwarf::VirtualityString(llvm::dwarf *this)
{
  if (this > 2)
    return 0;
  else
    return off_1E813E038[(int)this];
}

uint64_t llvm::dwarf::getVirtuality(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (a2 == 26)
  {
    if (*(_QWORD *)a1 == 0x55545249565F5744
      && *(_QWORD *)(a1 + 8) == 0x75705F5954494C41
      && *(_QWORD *)(a1 + 16) == 0x75747269765F6572
      && *(_WORD *)(a1 + 24) == 27745)
    {
      return 2;
    }
    return 0xFFFFFFFFLL;
  }
  if (a2 != 21)
  {
    if (a2 == 18)
    {
      v2 = *(_QWORD *)a1 == 0x55545249565F5744 && *(_QWORD *)(a1 + 8) == 0x6F6E5F5954494C41;
      if (v2 && *(_WORD *)(a1 + 16) == 25966)
        return 0;
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_QWORD *)a1 != 0x55545249565F5744
    || *(_QWORD *)(a1 + 8) != 0x69765F5954494C41
    || *(_QWORD *)(a1 + 13) != 0x6C6175747269765FLL)
  {
    return 0xFFFFFFFFLL;
  }
  return 1;
}

const char *llvm::dwarf::LanguageString(llvm::dwarf *this)
{
  const char *result;
  int v2;
  const char *v3;
  const char *v4;

  if ((_DWORD)this == 4)
    return "DW_LANG_C_plus_plus";
  v2 = (int)this;
  if ((int)this > 0x8000)
  {
    v3 = "DW_LANG_BORLAND_Delphi";
    if ((_DWORD)this != 45056)
      v3 = 0;
    if ((_DWORD)this == 36439)
      v4 = "DW_LANG_GOOGLE_RenderScript";
    else
      v4 = v3;
    if ((_DWORD)this == 32769)
      return "DW_LANG_Mips_Assembler";
    else
      return v4;
  }
  else
  {
    result = 0;
    switch(v2)
    {
      case 1:
        result = "DW_LANG_C89";
        break;
      case 2:
        result = "DW_LANG_C";
        break;
      case 3:
        result = "DW_LANG_Ada83";
        break;
      case 5:
        result = "DW_LANG_Cobol74";
        break;
      case 6:
        result = "DW_LANG_Cobol85";
        break;
      case 7:
        result = "DW_LANG_Fortran77";
        break;
      case 8:
        result = "DW_LANG_Fortran90";
        break;
      case 9:
        result = "DW_LANG_Pascal83";
        break;
      case 10:
        result = "DW_LANG_Modula2";
        break;
      case 11:
        result = "DW_LANG_Java";
        break;
      case 12:
        result = "DW_LANG_C99";
        break;
      case 13:
        result = "DW_LANG_Ada95";
        break;
      case 14:
        result = "DW_LANG_Fortran95";
        break;
      case 15:
        result = "DW_LANG_PLI";
        break;
      case 16:
        result = "DW_LANG_ObjC";
        break;
      case 17:
        result = "DW_LANG_ObjC_plus_plus";
        break;
      case 18:
        result = "DW_LANG_UPC";
        break;
      case 19:
        result = "DW_LANG_D";
        break;
      case 20:
        result = "DW_LANG_Python";
        break;
      case 21:
        result = "DW_LANG_OpenCL";
        break;
      case 22:
        result = "DW_LANG_Go";
        break;
      case 23:
        result = "DW_LANG_Modula3";
        break;
      case 24:
        result = "DW_LANG_Haskell";
        break;
      case 25:
        result = "DW_LANG_C_plus_plus_03";
        break;
      case 26:
        result = "DW_LANG_C_plus_plus_11";
        break;
      case 27:
        result = "DW_LANG_OCaml";
        break;
      case 28:
        result = "DW_LANG_Rust";
        break;
      case 29:
        result = "DW_LANG_C11";
        break;
      case 30:
        result = "DW_LANG_Swift";
        break;
      case 31:
        result = "DW_LANG_Julia";
        break;
      case 32:
        result = "DW_LANG_Dylan";
        break;
      case 33:
        result = "DW_LANG_C_plus_plus_14";
        break;
      case 34:
        result = "DW_LANG_Fortran03";
        break;
      case 35:
        result = "DW_LANG_Fortran08";
        break;
      case 36:
        result = "DW_LANG_RenderScript";
        break;
      case 37:
        result = "DW_LANG_BLISS";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::dwarf::getLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  _BOOL4 v24;
  char v26;
  char v27;
  BOOL v38;
  char v42;
  char v43;
  uint64_t v44;
  char v49;
  char v50;
  char v53;
  char v56;
  char v57;

  if (a2 == 11)
  {
    if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 3) == 0x3938435F474E414CLL)
    {
      v8 = 0x100000001;
      goto LABEL_231;
    }
    if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 3) == 0x3939435F474E414CLL)
    {
      v8 = 0x10000000CLL;
      goto LABEL_231;
    }
    if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 3) == 0x494C505F474E414CLL)
    {
      v8 = 0x10000000FLL;
      goto LABEL_231;
    }
    if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 3) == 0x4350555F474E414CLL)
    {
      v8 = 0x100000012;
      goto LABEL_231;
    }
    if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 3) == 0x3131435F474E414CLL)
    {
      v8 = 0x10000001DLL;
      goto LABEL_231;
    }
    goto LABEL_22;
  }
  v8 = 0x10000000ALL;
  switch(__ROR8__(a2 - 9, 1))
  {
    case 0:
      if (*(_QWORD *)a1 != 0x5F474E414C5F5744 || *(_BYTE *)(a1 + 8) != 67)
        goto LABEL_28;
      v10 = 0;
      v7 = 0x100000002;
      goto LABEL_100;
    case 2:
      if (*(_QWORD *)a1 != 0x5F474E414C5F5744 || *(_QWORD *)(a1 + 5) != 0x33386164415F474ELL)
        goto LABEL_41;
      v8 = 0x100000003;
      goto LABEL_231;
    case 3:
      if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 7) == 0x34376C6F626F435FLL)
      {
        v8 = 0x100000005;
        goto LABEL_231;
      }
      if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 7) == 0x35386C6F626F435FLL)
      {
        v8 = 0x100000006;
        goto LABEL_231;
      }
      if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 7) == 0x32616C75646F4D5FLL)
        goto LABEL_231;
      if (a2 == 17)
        goto LABEL_46;
      if (a2 != 13)
      {
        if (a2 == 12)
        {
LABEL_29:
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_DWORD *)(a1 + 8) == 1635148106)
          {
            v8 = 0x10000000BLL;
            goto LABEL_231;
          }
        }
        goto LABEL_99;
      }
LABEL_41:
      if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 5) == 0x35396164415F474ELL)
      {
        v8 = 0x10000000DLL;
        goto LABEL_231;
      }
LABEL_45:
      if (a2 != 17)
      {
LABEL_99:
        v7 = 0;
        v10 = 1;
LABEL_100:
        v24 = a2 == 12;
        if (a2 == 12 && v10)
        {
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_DWORD *)(a1 + 8) == 1131045455)
          {
            v8 = 0x100000010;
            goto LABEL_231;
          }
          v24 = 1;
LABEL_161:
          v10 = 1;
          goto LABEL_162;
        }
        v26 = v10 ^ 1;
        if (a2 == 22)
          v27 = v10 ^ 1;
        else
          v27 = 1;
        if ((v27 & 1) == 0)
        {
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744
            && *(_QWORD *)(a1 + 8) == 0x756C705F436A624FLL
            && *(_QWORD *)(a1 + 14) == 0x73756C705F73756CLL)
          {
            v8 = 0x100000011;
            goto LABEL_231;
          }
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744
            && *(_QWORD *)(a1 + 8) == 0x705F73756C705F43
            && *(_QWORD *)(a1 + 14) == 0x33305F73756C705FLL)
          {
            v8 = 0x100000019;
            goto LABEL_231;
          }
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744
            && *(_QWORD *)(a1 + 8) == 0x705F73756C705F43
            && *(_QWORD *)(a1 + 14) == 0x31315F73756C705FLL)
          {
            v8 = 0x10000001ALL;
            goto LABEL_231;
          }
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744
            && *(_QWORD *)(a1 + 8) == 0x705F73756C705F43
            && *(_QWORD *)(a1 + 14) == 0x34315F73756C705FLL)
          {
            v8 = 0x100000021;
            goto LABEL_231;
          }
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744
            && *(_QWORD *)(a1 + 8) == 0x7373415F7370694DLL
            && *(_QWORD *)(a1 + 14) == 0x72656C626D657373)
          {
            v8 = 0x100008001;
            goto LABEL_231;
          }
          v38 = (*(_QWORD *)a1 ^ 0x5F474E414C5F5744 | *(_QWORD *)(a1 + 8) ^ 0x5F444E414C524F42 | *(_QWORD *)(a1 + 14) ^ 0x6968706C65445F44) == 0;
          v8 = 0x10000B000;
          goto LABEL_176;
        }
        if (a2 != 9)
          v26 = 1;
        if ((v26 & 1) == 0)
        {
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_BYTE *)(a1 + 8) == 68)
          {
            v8 = 0x100000013;
            goto LABEL_231;
          }
          goto LABEL_230;
        }
        v49 = v10 ^ 1;
        if (a2 == 14)
          v50 = v10 ^ 1;
        else
          v50 = 1;
        if ((v50 & 1) == 0)
        {
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 6) == 0x6E6F687479505F47)
          {
            v8 = 0x100000014;
            goto LABEL_231;
          }
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 6) == 0x4C436E65704F5F47)
          {
            v8 = 0x100000015;
            goto LABEL_231;
          }
          goto LABEL_230;
        }
        if (a2 != 10)
          v49 = 1;
        if ((v49 & 1) == 0)
        {
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_WORD *)(a1 + 8) == 28487)
          {
            v8 = 0x100000016;
            goto LABEL_231;
          }
          goto LABEL_230;
        }
        v56 = v10 ^ 1;
        if (a2 == 15)
          v57 = v10 ^ 1;
        else
          v57 = 1;
        if ((v57 & 1) != 0)
        {
          if (a2 != 13)
            v56 = 1;
          if ((v56 & 1) != 0)
          {
LABEL_162:
            if (v24 && v10)
            {
              if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_DWORD *)(a1 + 8) == 1953723730)
              {
                v8 = 0x10000001CLL;
                goto LABEL_231;
              }
              goto LABEL_230;
            }
            v42 = v10 ^ 1;
            if (a2 == 20)
              v43 = v42;
            else
              v43 = 1;
            if ((v43 & 1) != 0)
            {
              if (a2 == 27)
                v53 = v42;
              else
                v53 = 1;
              if ((v53 & 1) == 0)
              {
                if (*(_QWORD *)a1 ^ 0x5F474E414C5F5744 | *(_QWORD *)(a1 + 8) ^ 0x525F454C474F4F47 | *(_QWORD *)(a1 + 16) ^ 0x7263537265646E65 | *(_QWORD *)(a1 + 19) ^ 0x7470697263537265)
                  v8 = v7;
                else
                  v8 = 0x100008E57;
                goto LABEL_231;
              }
              goto LABEL_230;
            }
            v44 = *(_QWORD *)a1 ^ 0x5F474E414C5F5744 | *(_QWORD *)(a1 + 8) ^ 0x63537265646E6552 | *(unsigned int *)(a1 + 16) ^ 0x74706972;
            v8 = 0x100000024;
            goto LABEL_175;
          }
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 5) == 0x6C6D61434F5F474ELL)
          {
            v8 = 0x10000001BLL;
            goto LABEL_231;
          }
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 5) == 0x74666977535F474ELL)
          {
            v8 = 0x10000001ELL;
            goto LABEL_231;
          }
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 5) == 0x61696C754A5F474ELL)
          {
            v8 = 0x10000001FLL;
            goto LABEL_231;
          }
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 5) == 0x6E616C79445F474ELL)
          {
            v8 = 0x100000020;
            goto LABEL_231;
          }
          v44 = *(_QWORD *)a1 ^ 0x5F474E414C5F5744 | *(_QWORD *)(a1 + 5) ^ 0x5353494C425F474ELL;
          v8 = 0x100000025;
        }
        else
        {
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744 && *(_QWORD *)(a1 + 7) == 0x33616C75646F4D5FLL)
          {
            v8 = 0x100000017;
            goto LABEL_231;
          }
          v44 = *(_QWORD *)a1 ^ 0x5F474E414C5F5744 | *(_QWORD *)(a1 + 7) ^ 0x6C6C656B7361485FLL;
          v8 = 0x100000018;
        }
LABEL_175:
        v38 = v44 == 0;
LABEL_176:
        if (!v38)
          v8 = v7;
        goto LABEL_231;
      }
LABEL_46:
      if (*(_QWORD *)a1 == 0x5F474E414C5F5744
        && *(_QWORD *)(a1 + 8) == 0x396E617274726F46
        && *(_BYTE *)(a1 + 16) == 53)
      {
        v8 = 0x10000000ELL;
        goto LABEL_231;
      }
      if (*(_QWORD *)a1 == 0x5F474E414C5F5744
        && *(_QWORD *)(a1 + 8) == 0x306E617274726F46
        && *(_BYTE *)(a1 + 16) == 51)
      {
        v8 = 0x100000022;
        goto LABEL_231;
      }
      if (*(_QWORD *)a1 == 0x5F474E414C5F5744
        && *(_QWORD *)(a1 + 8) == 0x306E617274726F46
        && *(_BYTE *)(a1 + 16) == 56)
      {
        v8 = 0x100000023;
        goto LABEL_231;
      }
LABEL_22:
      v7 = 0;
LABEL_230:
      v8 = v7;
LABEL_231:
      if ((v8 & 0xFF00000000) != 0)
        return v8;
      else
        return 0;
    case 5:
      v8 = 0x100000004;
      if (*(_QWORD *)a1 ^ 0x5F474E414C5F5744 | *(_QWORD *)(a1 + 8) ^ 0x705F73756C705F43 | *(_QWORD *)(a1 + 11) ^ 0x73756C705F73756CLL)
        v8 = 0;
      goto LABEL_231;
    default:
LABEL_28:
      v7 = 0;
      v10 = 1;
      switch(a2)
      {
        case 12:
          goto LABEL_29;
        case 13:
          goto LABEL_41;
        case 15:
          if (*(_QWORD *)a1 != 0x5F474E414C5F5744 || *(_QWORD *)(a1 + 7) != 0x32616C75646F4D5FLL)
            goto LABEL_99;
          goto LABEL_231;
        case 16:
          if (*(_QWORD *)a1 != 0x5F474E414C5F5744 || *(_QWORD *)(a1 + 8) != 0x33386C6163736150)
          {
            v24 = 0;
            v7 = 0;
            goto LABEL_161;
          }
          v8 = 0x100000009;
          goto LABEL_231;
        case 17:
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744
            && *(_QWORD *)(a1 + 8) == 0x376E617274726F46
            && *(_BYTE *)(a1 + 16) == 55)
          {
            v8 = 0x100000007;
            goto LABEL_231;
          }
          if (*(_QWORD *)a1 == 0x5F474E414C5F5744
            && *(_QWORD *)(a1 + 8) == 0x396E617274726F46
            && *(_BYTE *)(a1 + 16) == 48)
          {
            v8 = 0x100000008;
            goto LABEL_231;
          }
          break;
        default:
          goto LABEL_100;
      }
      goto LABEL_45;
  }
}

uint64_t llvm::dwarf::LanguageVersion(int a1)
{
  if ((a1 - 1) > 0x24)
    return 0;
  else
    return dword_1C85F866C[a1 - 1];
}

uint64_t llvm::dwarf::LanguageVendor(int a1)
{
  int v1;
  unsigned int v2;

  if (a1 == 32769)
    v1 = 6;
  else
    v1 = 0;
  if (a1 == 36439)
    v2 = 4;
  else
    v2 = v1;
  if (a1 == 45056)
    return 2;
  else
    return v2;
}

char *llvm::dwarf::CaseString(llvm::dwarf *this)
{
  if (this > 3)
    return 0;
  else
    return off_1E813E090[(int)this];
}

uint64_t llvm::dwarf::getCallingConvention(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BOOL4 v3;
  uint64_t v5;
  uint64_t v6;
  char v17;
  _BOOL4 v30;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v43;
  BOOL v46;
  char v52;
  char v53;

  v2 = 0;
  v3 = 1;
  switch(a2)
  {
    case 12:
      if (*(_QWORD *)a1 == 0x6F6E5F43435F5744 && *(_DWORD *)(a1 + 8) == 1818324338)
      {
        v2 = 0x100000001;
      }
      else if (*(_QWORD *)a1 ^ 0x6F6E5F43435F5744 | *(unsigned int *)(a1 + 8) ^ 0x6C6C6163)
      {
        v2 = 0;
      }
      else
      {
        v2 = 0x100000003;
      }
      break;
    case 13:
      if (*(_QWORD *)a1 ^ 0x72705F43435F5744 | *(_QWORD *)(a1 + 5) ^ 0x6D6172676F72705FLL)
        v2 = 0;
      else
        v2 = 0x100000002;
      goto LABEL_36;
    case 19:
      v5 = *(_QWORD *)a1 ^ 0x61705F43435F5744 | *(_QWORD *)(a1 + 8) ^ 0x61765F79625F7373 | *(_QWORD *)(a1 + 11) ^ 0x65756C61765F7962;
      v6 = 0x100000005;
      goto LABEL_126;
    case 20:
      if (*(_QWORD *)a1 == 0x4E475F43435F5744
        && *(_QWORD *)(a1 + 8) == 0x6173656E65725F55
        && *(_DWORD *)(a1 + 16) == 1752391539)
      {
        v2 = 0x100000040;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x4F425F43435F5744
          || *(_QWORD *)(a1 + 8) != 0x61705F444E414C52
          || *(_DWORD *)(a1 + 16) != 1818321779)
        {
          v2 = 0;
          v3 = 1;
          goto LABEL_68;
        }
        v2 = 0x1000000B2;
      }
      break;
    case 21:
      if (*(_QWORD *)a1 == 0x4F425F43435F5744
        && *(_QWORD *)(a1 + 8) == 0x74735F444E414C52
        && *(_QWORD *)(a1 + 13) == 0x6C6C61636474735FLL)
      {
        v2 = 0x1000000B1;
        break;
      }
      v2 = 0;
LABEL_36:
      v3 = HIDWORD(v2) == 0;
LABEL_37:
      if (a2 == 21 && v3)
      {
        if (*(_QWORD *)a1 == 0x4C4C5F43435F5744
          && *(_QWORD *)(a1 + 8) == 0x6F746365765F4D56
          && *(_QWORD *)(a1 + 13) == 0x6C6C6163726F7463)
        {
          v2 = 0x1000000C0;
          break;
        }
        if (*(_QWORD *)a1 == 0x4C4C5F43435F5744
          && *(_QWORD *)(a1 + 8) == 0x365F3638585F4D56
          && *(_QWORD *)(a1 + 13) == 0x5673795334365F36)
        {
          v2 = 0x1000000C2;
          break;
        }
        goto LABEL_108;
      }
      v17 = !v3;
      if (a2 != 16)
        v17 = 1;
      if ((v17 & 1) == 0)
      {
        if (*(_QWORD *)a1 == 0x4C4C5F43435F5744 && *(_QWORD *)(a1 + 8) == 0x34366E69575F4D56)
        {
          v2 = 0x1000000C1;
          break;
        }
        if (*(_QWORD *)a1 == 0x4C4C5F43435F5744 && *(_QWORD *)(a1 + 8) == 0x53435041415F4D56)
        {
          v2 = 0x1000000C3;
          break;
        }
        goto LABEL_108;
      }
LABEL_68:
      if (a2 == 20 && v3)
      {
        if (*(_QWORD *)a1 == 0x4C4C5F43435F5744
          && *(_QWORD *)(a1 + 8) == 0x53435041415F4D56
          && *(_DWORD *)(a1 + 16) == 1346786911)
        {
          v2 = 0x1000000C4;
          break;
        }
        goto LABEL_108;
      }
      v43 = !v3;
      if (a2 != 23)
        v43 = 1;
      if ((v43 & 1) != 0)
        goto LABEL_172;
      goto LABEL_157;
    case 22:
      if (*(_QWORD *)a1 == 0x4F425F43435F5744
        && *(_QWORD *)(a1 + 8) == 0x61735F444E414C52
        && *(_QWORD *)(a1 + 14) == 0x6C6C616365666173)
      {
        v2 = 0x1000000B0;
        break;
      }
      if (*(_QWORD *)a1 == 0x4F425F43435F5744
        && *(_QWORD *)(a1 + 8) == 0x736D5F444E414C52
        && *(_QWORD *)(a1 + 14) == 0x6E7275746572736DLL)
      {
        v2 = 0x1000000B4;
        break;
      }
      if (*(_QWORD *)a1 == 0x4F425F43435F5744
        && *(_QWORD *)(a1 + 8) == 0x68745F444E414C52
        && *(_QWORD *)(a1 + 14) == 0x6C6C616373696874)
      {
        v2 = 0x1000000B5;
        break;
      }
      if (*(_QWORD *)a1 == 0x4F425F43435F5744
        && *(_QWORD *)(a1 + 8) == 0x61665F444E414C52
        && *(_QWORD *)(a1 + 14) == 0x6C6C616374736166)
      {
        v2 = 0x1000000B6;
        break;
      }
      v2 = 0;
LABEL_108:
      v30 = (v2 & 0x100000000) == 0;
      goto LABEL_109;
    case 23:
      if (*(_QWORD *)a1 == 0x61705F43435F5744
        && *(_QWORD *)(a1 + 8) == 0x65725F79625F7373
        && *(_QWORD *)(a1 + 15) == 0x65636E6572656665)
      {
        v2 = 0x100000004;
        break;
      }
      v2 = 0;
LABEL_157:
      if (*(_QWORD *)a1 == 0x4C4C5F43435F5744
        && *(_QWORD *)(a1 + 8) == 0x6C65746E495F4D56
        && *(_QWORD *)(a1 + 15) == 0x636369426C634F6CLL)
      {
        v2 = 0x1000000C5;
        break;
      }
      if ((v2 & 0x100000000) == 0)
      {
        v46 = *(_QWORD *)a1 == 0x4C4C5F43435F5744 && *(_QWORD *)(a1 + 8) == 0x46726970535F4D56;
        if (v46 && *(_QWORD *)(a1 + 15) == 0x6E6F6974636E7546)
        {
          v2 = 0x1000000C6;
          break;
        }
      }
LABEL_172:
      v30 = (v2 & 0x100000000) == 0;
      if (a2 != 23 || (v2 & 0x100000000) != 0)
      {
LABEL_109:
        if (a2 == 16 && v30)
        {
          if (*(_QWORD *)a1 == 0x4C4C5F43435F5744 && *(_QWORD *)(a1 + 8) == 0x74666977535F4D56)
            v2 = 0x1000000C8;
          break;
        }
        v39 = !v30;
        v40 = a2 != 22 || !v30;
        if ((v40 & 1) == 0)
        {
          if (*(_QWORD *)a1 == 0x4C4C5F43435F5744
            && *(_QWORD *)(a1 + 8) == 0x65736572505F4D56
            && *(_QWORD *)(a1 + 14) == 0x6C6C416576726573)
          {
            v2 = 0x1000000CALL;
          }
          break;
        }
        if (a2 != 21)
          v39 = 1;
        if ((v39 & 1) == 0)
        {
          if (*(_QWORD *)a1 == 0x4C4C5F43435F5744
            && *(_QWORD *)(a1 + 8) == 0x65523638585F4D56
            && *(_QWORD *)(a1 + 13) == 0x6C6C614367655236)
          {
            v2 = 0x1000000CBLL;
          }
          break;
        }
        v52 = !v30;
        if (a2 == 20)
          v53 = v52;
        else
          v53 = 1;
        if ((v53 & 1) != 0)
        {
          if (a2 != 31)
            v52 = 1;
          if ((v52 & 1) == 0)
            goto LABEL_140;
        }
        else
        {
          if (*(_QWORD *)a1 != 0x4C4C5F43435F5744
            || *(_QWORD *)(a1 + 8) != 0x74666977535F4D56
            || *(_DWORD *)(a1 + 16) != 1818845524)
          {
            v37 = *(_QWORD *)a1 ^ 0x44475F43435F5744 | *(_QWORD *)(a1 + 8) ^ 0x704F5F4D42495F42 | *(unsigned int *)(a1 + 16) ^ 0x4C436E65;
            v38 = 0x1000000FFLL;
            goto LABEL_217;
          }
          v2 = 0x1000000CCLL;
        }
      }
      else
      {
        if (*(_QWORD *)a1 != 0x4C4C5F43435F5744
          || *(_QWORD *)(a1 + 8) != 0x436E65704F5F4D56
          || *(_QWORD *)(a1 + 15) != 0x6C656E72654B4C43)
        {
          v37 = *(_QWORD *)a1 ^ 0x4C4C5F43435F5744 | *(_QWORD *)(a1 + 8) ^ 0x65736572505F4D56 | *(_QWORD *)(a1 + 15) ^ 0x74736F4D65767265;
          v38 = 0x1000000C9;
          goto LABEL_217;
        }
        v2 = 0x1000000C7;
      }
      break;
    case 24:
      v5 = *(_QWORD *)a1 ^ 0x4F425F43435F5744 | *(_QWORD *)(a1 + 8) ^ 0x736D5F444E414C52 | *(_QWORD *)(a1 + 16) ^ 0x6C6C616374736166;
      v6 = 0x1000000B3;
LABEL_126:
      if (v5)
        v2 = 0;
      else
        v2 = v6;
      break;
    case 31:
      if (*(_QWORD *)a1 == 0x4E475F43435F5744
        && *(_QWORD *)(a1 + 8) == 0x6E616C726F625F55
        && *(_QWORD *)(a1 + 16) == 0x6163747361665F64
        && *(_QWORD *)(a1 + 23) == 0x363833695F6C6C61)
      {
        v2 = 0x100000041;
      }
      else
      {
        v2 = 0;
LABEL_140:
        v37 = *(_QWORD *)a1 ^ 0x4C4C5F43435F5744 | *(_QWORD *)(a1 + 8) ^ 0x745F5847415F4D56 | *(_QWORD *)(a1 + 16) ^ 0x6E695F6461657268 | *(_QWORD *)(a1 + 23) ^ 0x746E61697261766ELL;
        v38 = 0x1000000D0;
LABEL_217:
        if (!v37)
          v2 = v38;
      }
      break;
    default:
      goto LABEL_37;
  }
  if ((v2 & 0x300000000) != 0)
    return v2;
  else
    return 0;
}

char *llvm::dwarf::InlineCodeString(llvm::dwarf *this)
{
  if (this > 3)
    return 0;
  else
    return off_1E813E0B0[(int)this];
}

const char *llvm::dwarf::ArrayOrderString(llvm::dwarf *this)
{
  const char *v1;

  v1 = "DW_ORD_row_major";
  if ((_DWORD)this)
    v1 = 0;
  if ((_DWORD)this == 1)
    return "DW_ORD_col_major";
  else
    return v1;
}

uint64_t llvm::dwarf::getMacinfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  switch(a2)
  {
    case 16:
      if (*(_QWORD *)a1 != 0x4E4943414D5F5744 || *(_QWORD *)(a1 + 8) != 0x6665646E755F4F46)
        goto LABEL_40;
      result = 2;
      break;
    case 17:
      if (*(_QWORD *)a1 != 0x4E4943414D5F5744
        || *(_QWORD *)(a1 + 8) != 0x6E696665645F4F46
        || *(_BYTE *)(a1 + 16) != 101)
      {
        goto LABEL_40;
      }
      result = 1;
      break;
    case 19:
      if (*(_QWORD *)a1 != 0x4E4943414D5F5744
        || *(_QWORD *)(a1 + 8) != 0x665F646E655F4F46
        || *(_QWORD *)(a1 + 11) != 0x656C69665F646E65)
      {
        goto LABEL_40;
      }
      result = 4;
      break;
    case 21:
      if (*(_QWORD *)a1 == 0x4E4943414D5F5744
        && *(_QWORD *)(a1 + 8) == 0x74726174735F4F46
        && *(_QWORD *)(a1 + 13) == 0x656C69665F747261)
      {
        result = 3;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x4E4943414D5F5744
          || *(_QWORD *)(a1 + 8) != 0x6F646E65765F4F46
          || *(_QWORD *)(a1 + 13) != 0x7478655F726F646ELL)
        {
          goto LABEL_40;
        }
        result = 255;
      }
      break;
    default:
LABEL_40:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t llvm::dwarf::getMacro(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BOOL4 v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v2 = 0;
  v3 = 1;
  switch(a2)
  {
    case 14:
      if (*(_QWORD *)a1 ^ 0x4F5243414D5F5744 | *(_QWORD *)(a1 + 6) ^ 0x6665646E755F4F52)
        v2 = 0;
      else
        v2 = 0x100000002;
      goto LABEL_42;
    case 15:
      if (*(_QWORD *)a1 == 0x4F5243414D5F5744 && *(_QWORD *)(a1 + 7) == 0x656E696665645F4FLL)
      {
        v2 = 0x100000001;
        break;
      }
      if (*(_QWORD *)a1 == 0x4F5243414D5F5744 && *(_QWORD *)(a1 + 7) == 0x74726F706D695F4FLL)
      {
        v2 = 0x100000007;
        break;
      }
      goto LABEL_41;
    case 17:
      v6 = *(_QWORD *)a1 ^ 0x4F5243414D5F5744 | *(_QWORD *)(a1 + 8) ^ 0x6C69665F646E655FLL | *(unsigned __int8 *)(a1 + 16) ^ 0x65;
      v7 = 0x100000004;
      goto LABEL_17;
    case 18:
      v6 = *(_QWORD *)a1 ^ 0x4F5243414D5F5744 | *(_QWORD *)(a1 + 8) ^ 0x735F6665646E755FLL | *(unsigned __int16 *)(a1 + 16) ^ 0x7075;
      v7 = 0x100000009;
LABEL_17:
      if (v6)
        v2 = 0;
      else
        v2 = v7;
      break;
    case 19:
      if (*(_QWORD *)a1 == 0x4F5243414D5F5744
        && *(_QWORD *)(a1 + 8) == 0x665F74726174735FLL
        && *(_QWORD *)(a1 + 11) == 0x656C69665F747261)
      {
        v2 = 0x100000003;
        break;
      }
      if (*(_QWORD *)a1 == 0x4F5243414D5F5744
        && *(_QWORD *)(a1 + 8) == 0x735F6665646E755FLL
        && *(_QWORD *)(a1 + 11) == 0x707274735F666564)
      {
        v2 = 0x100000006;
        break;
      }
      if (*(_QWORD *)a1 == 0x4F5243414D5F5744
        && *(_QWORD *)(a1 + 8) == 0x5F656E696665645FLL
        && *(_QWORD *)(a1 + 11) == 0x7075735F656E6966)
      {
        v2 = 0x100000008;
        break;
      }
LABEL_41:
      v2 = 0;
LABEL_42:
      v3 = HIDWORD(v2) == 0;
LABEL_43:
      if (a2 == 19 && v3)
      {
        if (*(_QWORD *)a1 != 0x4F5243414D5F5744
          || *(_QWORD *)(a1 + 8) != 0x5F74726F706D695FLL
          || *(_QWORD *)(a1 + 11) != 0x7075735F74726F70)
        {
          v16 = *(_QWORD *)a1 ^ 0x4F5243414D5F5744 | *(_QWORD *)(a1 + 8) ^ 0x735F6665646E755FLL | *(_QWORD *)(a1 + 11) ^ 0x787274735F666564;
          v17 = 0x10000000CLL;
          goto LABEL_66;
        }
        v2 = 0x10000000ALL;
      }
      else
      {
        v18 = !v3;
        if (a2 != 20)
          v18 = 1;
        if ((v18 & 1) == 0)
          goto LABEL_65;
      }
      break;
    case 20:
      if (*(_QWORD *)a1 == 0x4F5243414D5F5744
        && *(_QWORD *)(a1 + 8) == 0x5F656E696665645FLL
        && *(_DWORD *)(a1 + 16) == 1886549107)
      {
        v2 = 0x100000005;
      }
      else
      {
        v2 = 0;
LABEL_65:
        v16 = *(_QWORD *)a1 ^ 0x4F5243414D5F5744 | *(_QWORD *)(a1 + 8) ^ 0x5F656E696665645FLL | *(unsigned int *)(a1 + 16) ^ 0x78727473;
        v17 = 0x10000000BLL;
LABEL_66:
        if (!v16)
          v2 = v17;
      }
      break;
    default:
      goto LABEL_43;
  }
  if ((v2 & 0x300000000) != 0)
    return v2;
  else
    return 0xFFFFFFFFLL;
}

const char *llvm::dwarf::CallFrameString(int a1, int a2)
{
  const char *result;

  if (a1 == 29 && a2 == 18)
    return "DW_CFA_MIPS_advance_loc8";
  if (a1 == 45 && (a2 - 33) < 2)
    return "DW_CFA_GNU_window_save";
  if (a1 == 45 && (a2 - 3) < 2)
    return "DW_CFA_AARCH64_negate_ra_state";
  if (a1 == 46 && (a2 - 41) < 2)
    return "DW_CFA_GNU_args_size";
  result = 0;
  switch(a1)
  {
    case 0:
      result = "DW_CFA_nop";
      break;
    case 1:
      result = "DW_CFA_set_loc";
      break;
    case 2:
      result = "DW_CFA_advance_loc1";
      break;
    case 3:
      result = "DW_CFA_advance_loc2";
      break;
    case 4:
      result = "DW_CFA_advance_loc4";
      break;
    case 5:
      result = "DW_CFA_offset_extended";
      break;
    case 6:
      result = "DW_CFA_restore_extended";
      break;
    case 7:
      result = "DW_CFA_undefined";
      break;
    case 8:
      result = "DW_CFA_same_value";
      break;
    case 9:
      result = "DW_CFA_register";
      break;
    case 10:
      result = "DW_CFA_remember_state";
      break;
    case 11:
      result = "DW_CFA_restore_state";
      break;
    case 12:
      result = "DW_CFA_def_cfa";
      break;
    case 13:
      result = "DW_CFA_def_cfa_register";
      break;
    case 14:
      result = "DW_CFA_def_cfa_offset";
      break;
    case 15:
      result = "DW_CFA_def_cfa_expression";
      break;
    case 16:
      result = "DW_CFA_expression";
      break;
    case 17:
      result = "DW_CFA_offset_extended_sf";
      break;
    case 18:
      result = "DW_CFA_def_cfa_sf";
      break;
    case 19:
      result = "DW_CFA_def_cfa_offset_sf";
      break;
    case 20:
      result = "DW_CFA_val_offset";
      break;
    case 21:
      result = "DW_CFA_val_offset_sf";
      break;
    case 22:
      result = "DW_CFA_val_expression";
      break;
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      return result;
    case 48:
      result = "DW_CFA_LLVM_def_aspace_cfa";
      break;
    case 49:
      result = "DW_CFA_LLVM_def_aspace_cfa_sf";
      break;
    case 64:
      result = "DW_CFA_advance_loc";
      break;
    default:
      if (a1 == 128)
      {
        result = "DW_CFA_offset";
      }
      else if (a1 == 192)
      {
        result = "DW_CFA_restore";
      }
      break;
  }
  return result;
}

char *llvm::dwarf::AtomTypeString(llvm::dwarf *this)
{
  if (this > 7)
    return 0;
  else
    return off_1E813DFA0[(int)this];
}

uint64_t llvm::dwarf::getFixedFormByteSize(int a1, unint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  int v5;
  unint64_t v6;
  char v7;
  BOOL v8;
  char v9;
  int v10;

  v3 = 0;
  v4 = a1 - 1;
  v5 = 0;
  switch(v4)
  {
    case 0:
      v5 = (unsigned __int16)a2 != 0 && BYTE2(a2) != 0;
      if ((unsigned __int16)a2 != 0 && BYTE2(a2) != 0)
        v3 = BYTE2(a2);
      else
        v3 = 0;
      return v3 | (v5 << 8);
    case 1:
    case 2:
    case 3:
    case 7:
    case 8:
    case 9:
    case 12:
    case 14:
    case 20:
    case 21:
    case 23:
    case 25:
    case 26:
    case 33:
    case 34:
    case 42:
      return v3 | (v5 << 8);
    case 4:
    case 17:
    case 37:
    case 41:
      v5 = 1;
      v3 = 2;
      return v3 | (v5 << 8);
    case 5:
    case 18:
    case 27:
    case 39:
    case 43:
      v5 = 1;
      v3 = 4;
      return v3 | (v5 << 8);
    case 6:
    case 19:
    case 31:
    case 35:
      v5 = 1;
      v3 = 8;
      return v3 | (v5 << 8);
    case 10:
    case 11:
    case 16:
    case 36:
    case 40:
      v3 = 1;
      goto LABEL_23;
    case 13:
    case 22:
    case 28:
    case 30:
      v6 = a2 >> 16;
      if (BYTE3(a2))
        v7 = 8;
      else
        v7 = 4;
      goto LABEL_10;
    case 15:
      v6 = a2 >> 16;
      if (BYTE3(a2))
        v7 = 8;
      else
        v7 = 4;
      if ((unsigned __int16)a2 == 2)
        v7 = BYTE2(a2);
LABEL_10:
      v8 = v6 == 0;
      if ((_BYTE)v6)
        v9 = v7;
      else
        v9 = 0;
      v10 = !v8;
      if ((_WORD)a2)
        v3 = v9;
      else
        v3 = 0;
      if ((_WORD)a2)
        v5 = v10;
      else
        v5 = 0;
      break;
    case 24:
    case 32:
      v3 = 0;
LABEL_23:
      v5 = 1;
      break;
    case 29:
      v5 = 1;
      v3 = 16;
      break;
    case 38:
      v5 = 1;
      v3 = 3;
      break;
    default:
      v5 = 0;
      break;
  }
  return v3 | (v5 << 8);
}

BOOL llvm::dwarf::isValidFormForVersion(int a1, unsigned int a2, uint64_t a3)
{
  if (((a1 - 7937) > 0x20 || ((1 << (a1 - 1)) & 0x180000003) == 0) && a1 != 8193)
    return llvm::dwarf::FormVersion(a1) - 1 < a2;
  return a3;
}

const char *llvm::dwarf::FormatString(llvm::dwarf *this)
{
  if ((_DWORD)this)
    return "DWARF64";
  else
    return "DWARF32";
}

uint64_t llvm::ELF::convertArchNameToEMachine(char *a1, unint64_t a2)
{
  int v2;
  void **v3;
  void *v4;
  unsigned int v5;
  int v6;
  _BOOL4 v7;
  int v8;
  int v15;
  BOOL v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v21;
  BOOL v23;
  int v24;
  _BOOL4 v27;
  _BOOL4 v28;
  BOOL v29;
  BOOL v30;
  BOOL v34;
  int v35;
  _BOOL4 v36;
  int v37;
  int v41;
  int v48;
  int v49;
  int v51;
  BOOL v54;
  int v55;
  _BOOL4 v56;
  int v57;
  _BOOL4 v63;
  char v79;
  char v80;
  BOOL v83;
  int v84;
  _BOOL4 v85;
  int v87;
  int v89;
  BOOL v93;
  int v94;
  char v96;
  int v97;
  char v100;
  BOOL v106;
  BOOL v107;
  int v108;
  int v110;
  BOOL v112;
  int v113;
  char v114;
  char v115;
  char v116;
  char v120;
  _BOOL4 v123;
  int v126;
  BOOL v130;
  int v131;
  char v151;
  char v154;
  BOOL v171;
  int v172;
  void *v175[2];
  char v176;

  v2 = 65704;
  sub_1C5E3DEA4(v175, a1, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a1[a2], (uint64_t)sub_1C5E3C6A8, a2);
  if (v176 >= 0)
    v3 = v175;
  else
    v3 = (void **)v175[0];
  if (v176 >= 0)
    v4 = (void *)(v176 & 0x7F);
  else
    v4 = v175[1];
  if (v4 != (void *)4)
  {
    v6 = 0;
    v7 = 1;
    v8 = 0;
    v5 = 0;
    switch((unint64_t)v4)
    {
      case 3uLL:
        if (*(_WORD *)v3 == 13165 && *((_BYTE *)v3 + 2) == 50)
        {
          v21 = 0;
          v24 = 0;
          v8 = 0;
          v7 = 0;
          v5 = 65537;
          v6 = 1;
          goto LABEL_145;
        }
        if (*(_WORD *)v3 == 14387 && *((_BYTE *)v3 + 2) == 54)
        {
          v8 = 0;
          v7 = 0;
          v5 = 65539;
        }
        else if (*(_WORD *)v3 == 14390 && *((_BYTE *)v3 + 2) == 107)
        {
          v8 = 0;
          v7 = 0;
          v5 = 65540;
        }
        else if (*(_WORD *)v3 == 14392 && *((_BYTE *)v3 + 2) == 107)
        {
          v8 = 0;
          v7 = 0;
          v5 = 65541;
        }
        else
        {
          if (*(_WORD *)v3 != 13880 || *((_BYTE *)v3 + 2) != 48)
          {
            if (*(_WORD *)v3 == 13881 && *((_BYTE *)v3 + 2) == 48)
            {
              v24 = 0;
              v7 = 0;
              v5 = 65555;
              v21 = 1;
LABEL_84:
              v27 = 0;
              v8 = 0;
              v28 = 0;
              v29 = v4 == (void *)9;
              v6 = v21;
              v21 = 0;
              goto LABEL_437;
            }
            v15 = 0;
            v16 = *(_WORD *)v3 == 28784 && *((_BYTE *)v3 + 2) == 99;
            v6 = 1;
            if (!v16)
            {
              v8 = 0;
              v5 = 0;
              v17 = 0;
              goto LABEL_103;
            }
            v5 = 65556;
            goto LABEL_136;
          }
          v8 = 0;
          v7 = 0;
          v5 = 65543;
        }
        v6 = 1;
        goto LABEL_89;
      case 4uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
        goto LABEL_89;
      case 5uLL:
        if (*(_DWORD *)v3 == 1918988403 && *((_BYTE *)v3 + 4) == 99)
        {
          v6 = 0;
          v7 = 0;
          v5 = 65538;
        }
        else
        {
          v5 = 0;
          if (*(_DWORD *)v3 != 1668112745 || *((_BYTE *)v3 + 4) != 117)
            goto LABEL_44;
          v6 = 0;
          v7 = 0;
          v5 = 65542;
        }
        v8 = 1;
LABEL_89:
        v18 = v6 & v7;
        goto LABEL_90;
      case 6uLL:
        v21 = 0;
        if (*(_DWORD *)v3 == 1769103728 && *((_WORD *)v3 + 2) == 25459)
        {
          v7 = 0;
          v5 = 65551;
          v24 = 1;
        }
        else
        {
          v23 = *(_DWORD *)v3 == 896561270 && *((_WORD *)v3 + 2) == 12336;
          v24 = 1;
          if (!v23)
          {
            v6 = 0;
            v8 = 0;
            v7 = 0;
            v5 = 0;
            goto LABEL_145;
          }
          v5 = 65553;
          v7 = 0;
        }
        goto LABEL_84;
      case 0xBuLL:
        if (*v3 == (void *)0x3373725F7370696DLL && *(void **)((char *)v3 + 3) == (void *)0x656C5F3373725F73)
        {
          v21 = 0;
          v24 = 0;
          v6 = 0;
          v8 = 0;
          v5 = 65546;
          goto LABEL_145;
        }
        v24 = 0;
        if (*v3 != (void *)0x7032336372617073 || *(void **)((char *)v3 + 3) != (void *)0x73756C7032336372)
        {
          v21 = 0;
          v6 = 0;
          v8 = 0;
          v5 = 0;
          goto LABEL_145;
        }
        v5 = 65554;
        v21 = 0;
        goto LABEL_84;
      default:
        v8 = 0;
        v5 = 0;
        goto LABEL_89;
    }
  }
  if (*(_DWORD *)v3 != 1701736302)
  {
    if (*(_DWORD *)v3 == 1936746861)
    {
      v5 = 65544;
    }
    else if (*(_DWORD *)v3 == 808924019)
    {
      v5 = 65545;
    }
    else
    {
      v5 = 0;
    }
    v15 = 0;
    v6 = 0;
    v8 = 0;
    v18 = 0;
    v7 = v5 < 0x10000;
    goto LABEL_97;
  }
  v5 = 0x10000;
LABEL_44:
  v18 = 0;
  v6 = 0;
  v7 = v4 != (void *)4;
  v8 = v7;
LABEL_90:
  v15 = 0;
  if (v7 && v8)
  {
    v30 = *(_DWORD *)v3 == 912486512 && *((_BYTE *)v3 + 4) == 52;
    v15 = 1;
    if (!v30)
    {
      v8 = 1;
      v7 = 1;
      goto LABEL_97;
    }
    v5 = 65557;
LABEL_136:
    v24 = 0;
    v7 = 0;
    v21 = v4 == (void *)2;
    v8 = v15;
    goto LABEL_145;
  }
LABEL_97:
  v17 = v4 == (void *)4 && v7;
  if (v17 && *(_DWORD *)v3 == 809055091)
  {
    v5 = 65558;
    goto LABEL_144;
  }
  if (v18)
  {
LABEL_103:
    if (*(_WORD *)v3 == 28787 && *((_BYTE *)v3 + 2) == 117)
    {
      v5 = 65559;
      goto LABEL_144;
    }
    v18 = 1;
  }
  if (!v17)
  {
LABEL_112:
    if (v18)
    {
      if (*(_WORD *)v3 == 25458 && *((_BYTE *)v3 + 2) == 101)
      {
        v5 = 65575;
        goto LABEL_144;
      }
      if (*(_WORD *)v3 == 29281 && *((_BYTE *)v3 + 2) == 109)
      {
        v5 = 65576;
        goto LABEL_144;
      }
    }
    if (!v15 || (*(_DWORD *)v3 == 1752198241 ? (v34 = *((_BYTE *)v3 + 4) == 97) : (v34 = 0), !v34))
    {
      v21 = v4 == (void *)2;
      if (v4 != (void *)2)
        v7 = 0;
      if (v7)
      {
        if (*(_WORD *)v3 == 26739)
          v5 = 65578;
        v21 = 1;
        goto LABEL_139;
      }
      v24 = 0;
      v7 = 0;
LABEL_145:
      v37 = v5 & 0x10000;
      v36 = (v5 & 0xFF0000) == 0;
      v27 = v4 == (void *)7;
      if (v4 == (void *)7 && !v37)
      {
        if (*(_DWORD *)v3 == 1918988403 && *(_DWORD *)((char *)v3 + 3) == 964060018)
        {
          v5 = 65579;
          goto LABEL_202;
        }
        v27 = 1;
      }
      v35 = 0;
      if (v37 || !v27)
        goto LABEL_159;
      if (*(_DWORD *)v3 != 1667854964 || *(_DWORD *)((char *)v3 + 3) != 1701998435)
      {
        v35 = 1;
        v36 = 1;
        v27 = 1;
        goto LABEL_159;
      }
      v5 = 65580;
LABEL_202:
      v28 = v4 == (void *)8;
      v27 = 1;
      goto LABEL_209;
    }
    v5 = 65577;
LABEL_144:
    v24 = 0;
    v7 = 0;
    v21 = v4 == (void *)2;
    goto LABEL_145;
  }
  switch(*(_DWORD *)v3)
  {
    case 0x30303876:
      v21 = 0;
      v5 = 65572;
      break;
    case 0x30327266:
      v21 = 0;
      v5 = 65573;
      break;
    case 0x32336872:
      v5 = 65574;
      goto LABEL_144;
    default:
      goto LABEL_112;
  }
LABEL_139:
  v35 = 0;
  v24 = 0;
  v7 = 0;
  v27 = 0;
  v36 = (v5 & 0xFF0000) == 0;
LABEL_159:
  if ((v36 & v6) == 1 && *(_WORD *)v3 == 29281 && *((_BYTE *)v3 + 2) == 99)
  {
    v5 = 65581;
LABEL_208:
    v28 = v4 == (void *)8;
    goto LABEL_209;
  }
  v41 = v36 & v24;
  if ((v36 & v24) == 1 && *(_DWORD *)v3 == 861878376 && *((_WORD *)v3 + 2) == 12336)
  {
    v5 = 65582;
    goto LABEL_208;
  }
  if (v35)
  {
    if (*(_DWORD *)v3 == 861878376 && *(_DWORD *)((char *)v3 + 3) == 1747988531)
    {
      v5 = 65583;
      goto LABEL_208;
    }
  }
  if ((v36 & v6) != 0 && *(_WORD *)v3 == 14440 && *((_BYTE *)v3 + 2) == 115)
  {
    v5 = 65584;
    goto LABEL_208;
  }
  if (v41)
  {
    if (*(_DWORD *)v3 == 895432808 && *((_WORD *)v3 + 2) == 12336)
    {
      v5 = 65585;
      goto LABEL_208;
    }
  }
  if ((v36 & v8) == 1 && *(_DWORD *)v3 == 912220521 && *((_BYTE *)v3 + 4) == 52)
  {
    v5 = 65586;
    goto LABEL_208;
  }
  if (v41)
  {
    if (*(_DWORD *)v3 == 1936746861 && *((_WORD *)v3 + 2) == 30815)
    {
      v28 = v4 == (void *)8;
      v5 = 65587;
      goto LABEL_436;
    }
  }
  v28 = v4 == (void *)8;
  if (v4 != (void *)8)
    v36 = 0;
  if (v36)
  {
    v28 = 1;
    if (*v3 == (void *)0x65726966646C6F63)
    {
      v5 = 65588;
LABEL_436:
      v29 = v4 == (void *)9;
      goto LABEL_437;
    }
  }
LABEL_209:
  v48 = v5 & 0x10000;
  if ((v5 & 0xFF0000) != 0)
    v49 = 0;
  else
    v49 = v24;
  if (v49 == 1 && *(_DWORD *)v3 == 1667774518 && *((_WORD *)v3 + 2) == 12849)
  {
    v5 = 65589;
    goto LABEL_436;
  }
  if (v48)
    v51 = 0;
  else
    v51 = v6;
  if (v51 == 1)
  {
    if (*(_WORD *)v3 == 28013 && *((_BYTE *)v3 + 2) == 97)
    {
      v5 = 65590;
      goto LABEL_436;
    }
    if (*(_WORD *)v3 == 25456 && *((_BYTE *)v3 + 2) == 112)
    {
      v5 = 65591;
      goto LABEL_436;
    }
  }
  v54 = v4 == (void *)4 && v48 == 0;
  v55 = v54;
  if (v54)
  {
    if (*(_DWORD *)v3 == 1970299758)
    {
      v5 = 65592;
      goto LABEL_436;
    }
    if (*(_DWORD *)v3 == 829580398)
    {
      v5 = 65593;
      goto LABEL_436;
    }
  }
  if (v48)
    v56 = 0;
  else
    v56 = v28;
  if (v56 && *v3 == (void *)0x65726F6372617473)
  {
    v5 = 65594;
    goto LABEL_436;
  }
  if (v55 && *(_DWORD *)v3 == 909206893)
  {
    v5 = 65595;
    goto LABEL_436;
  }
  if (v48)
    v57 = 0;
  else
    v57 = v8;
  if (v57 == 1)
  {
    if (*(_DWORD *)v3 == 808547443 && *((_BYTE *)v3 + 4) == 48)
    {
      v5 = 65596;
      goto LABEL_436;
    }
    if (*(_DWORD *)v3 == 2037279092 && *((_BYTE *)v3 + 4) == 106)
    {
      v5 = 65597;
      goto LABEL_436;
    }
  }
  if (v49)
  {
    if (*(_DWORD *)v3 == 1597388920 && *((_WORD *)v3 + 2) == 13366)
    {
      v5 = 65598;
      goto LABEL_436;
    }
  }
  if (v55 && *(_DWORD *)v3 == 1886610544)
  {
    v5 = 65599;
    goto LABEL_436;
  }
  if (v57)
  {
    if (*(_DWORD *)v3 == 829449328 && *((_BYTE *)v3 + 4) == 48)
    {
      v5 = 65600;
      goto LABEL_436;
    }
    if (*(_DWORD *)v3 == 829449328 && *((_BYTE *)v3 + 4) == 49)
    {
      v5 = 65601;
      goto LABEL_436;
    }
  }
  if (v55 && *(_DWORD *)v3 == 909539430)
  {
    v5 = 65602;
    goto LABEL_436;
  }
  if (v48)
    v63 = 0;
  else
    v63 = v27;
  if (v63 && *(_DWORD *)v3 == 1882813555 && *(_DWORD *)((char *)v3 + 3) == 1937075312)
  {
    v5 = 65603;
    goto LABEL_436;
  }
  if (v51)
  {
    if (*(_WORD *)v3 == 29811 && *((_BYTE *)v3 + 2) == 55)
    {
      v5 = 65604;
      goto LABEL_436;
    }
  }
  if (v49)
  {
    if (*(_DWORD *)v3 == 1667774518 && *((_WORD *)v3 + 2) == 13873)
    {
      v5 = 65605;
    }
    else if (*(_DWORD *)v3 == 1667774518 && *((_WORD *)v3 + 2) == 12593)
    {
      v5 = 65606;
    }
    else if (*(_DWORD *)v3 == 1667774518 && *((_WORD *)v3 + 2) == 14384)
    {
      v5 = 65607;
    }
    else
    {
      if (*(_DWORD *)v3 != 1667774518 || *((_WORD *)v3 + 2) != 13616)
        goto LABEL_306;
      v5 = 65608;
    }
    v29 = v4 == (void *)9;
    v24 = 1;
    goto LABEL_437;
  }
LABEL_306:
  if (v51)
  {
    if (*(_WORD *)v3 == 30323 && *((_BYTE *)v3 + 2) == 120)
    {
      v5 = 65609;
      goto LABEL_436;
    }
  }
  if (v55 && *(_DWORD *)v3 == 959542387)
  {
    v5 = 65610;
    goto LABEL_436;
  }
  if (v51)
  {
    if (*(_WORD *)v3 == 24950 && *((_BYTE *)v3 + 2) == 120)
    {
      v5 = 65611;
      goto LABEL_436;
    }
  }
  if (v55 && *(_DWORD *)v3 == 1936290403)
  {
    v5 = 65612;
    goto LABEL_436;
  }
  if (v63 && *(_DWORD *)v3 == 1702257002 && *(_DWORD *)((char *)v3 + 3) == 1852402789)
  {
    v5 = 65613;
    goto LABEL_436;
  }
  if (v56 && *v3 == (void *)0x6874617065726966)
  {
    v5 = 65614;
    goto LABEL_436;
  }
  if (v51)
  {
    if (*(_WORD *)v3 == 29562 && *((_BYTE *)v3 + 2) == 112)
    {
      v5 = 65615;
      goto LABEL_436;
    }
  }
  if (v55 && *(_DWORD *)v3 == 2020175213)
  {
    v5 = 65616;
    goto LABEL_436;
  }
  if (v57)
  {
    if (*(_DWORD *)v3 == 1851880808 && *((_BYTE *)v3 + 4) == 121)
    {
      v5 = 65617;
    }
    else
    {
      if (*(_DWORD *)v3 != 1936290416 || *((_BYTE *)v3 + 4) != 109)
        goto LABEL_343;
      v5 = 65618;
    }
    v29 = v4 == (void *)9;
    v8 = 1;
    goto LABEL_437;
  }
LABEL_343:
  if (v51)
  {
    if (*(_WORD *)v3 == 30305 && *((_BYTE *)v3 + 2) == 114)
    {
      v5 = 65619;
      goto LABEL_436;
    }
  }
  if (v55)
  {
    switch(*(_DWORD *)v3)
    {
      case 0x30337266:
        v5 = 65620;
        goto LABEL_436;
      case 0x76303164:
        v2 = 65621;
        goto LABEL_992;
      case 0x76303364:
        v2 = 65622;
        goto LABEL_992;
      case 0x30353876:
        v2 = 65623;
        goto LABEL_992;
      case 0x7232336D:
        v2 = 65624;
        goto LABEL_992;
    }
  }
  if (!v63)
    goto LABEL_363;
  if (*(_DWORD *)v3 == 808545901 && *(_DWORD *)((char *)v3 + 3) == 808465200)
  {
    v5 = 65625;
LABEL_431:
    v29 = v4 == (void *)9;
    v27 = 1;
    goto LABEL_437;
  }
  if (*(_DWORD *)v3 == 808545901 && *(_DWORD *)((char *)v3 + 3) == 808464944)
  {
    v5 = 65626;
    goto LABEL_431;
  }
LABEL_363:
  v79 = !v21;
  if (v48)
    v79 = 1;
  if ((v79 & 1) == 0 && *(_WORD *)v3 == 27248)
  {
    v5 = 65627;
    goto LABEL_436;
  }
  if (v56 && *v3 == (void *)0x637369726E65706FLL)
  {
    v5 = 65628;
    goto LABEL_436;
  }
  v80 = !v7;
  if (v48)
    v80 = 1;
  if ((v80 & 1) == 0
    && *v3 == (void *)0x706D6F635F637261
    && *(void **)((char *)v3 + 3) == (void *)0x746361706D6F635FLL)
  {
    v5 = 65629;
    goto LABEL_436;
  }
  if (v49)
  {
    if (*(_DWORD *)v3 == 1852142712 && *((_WORD *)v3 + 2) == 24947)
    {
      v5 = 65630;
      goto LABEL_436;
    }
  }
  v29 = v4 == (void *)9;
  if (v4 == (void *)9 && !v48)
  {
    v83 = *v3 == (void *)0x726F636F65646976 && *((_BYTE *)v3 + 8) == 101;
    v29 = 1;
    if (v83)
    {
      v5 = 65631;
LABEL_557:
      v106 = v4 == (void *)12;
      goto LABEL_558;
    }
  }
LABEL_437:
  v84 = v5 & 0x10000;
  v85 = (v5 & 0xFF0000) == 0 && v27;
  if (v85 && *(_DWORD *)v3 == 1601006964 && *(_DWORD *)((char *)v3 + 3) == 1886414687)
  {
    v5 = 65632;
    v27 = 1;
    goto LABEL_557;
  }
  if (v84)
    v87 = 0;
  else
    v87 = v8;
  if (v87 == 1 && *(_DWORD *)v3 == 842232686 && *((_BYTE *)v3 + 4) == 107)
  {
    v5 = 65633;
    goto LABEL_557;
  }
  if (v84)
    v89 = 0;
  else
    v89 = v6;
  if (v89 == 1 && *(_WORD *)v3 == 28788 && *((_BYTE *)v3 + 2) == 99)
  {
    v5 = 65634;
    goto LABEL_557;
  }
  if (!v87)
    goto LABEL_470;
  if (*(_DWORD *)v3 == 829451891 && *((_BYTE *)v3 + 4) == 107)
  {
    v5 = 65635;
LABEL_545:
    v106 = v4 == (void *)12;
    v8 = 1;
    goto LABEL_558;
  }
  if (*(_DWORD *)v3 == 808612979 && *((_BYTE *)v3 + 4) == 48)
  {
    v5 = 65636;
    goto LABEL_545;
  }
LABEL_470:
  v93 = v4 == (void *)4 && v84 == 0;
  v94 = v93;
  if (v93 && *(_DWORD *)v3 == 1798467689)
  {
    v5 = 65637;
    goto LABEL_557;
  }
  if (v89)
  {
    if (*(_WORD *)v3 == 24941 && *((_BYTE *)v3 + 2) == 120)
    {
      v5 = 65638;
      goto LABEL_557;
    }
  }
  v96 = !v21;
  if (v84)
    v96 = 1;
  if ((v96 & 1) == 0 && *(_WORD *)v3 == 29283)
  {
    v5 = 65639;
    goto LABEL_557;
  }
  if (v84)
    v97 = 0;
  else
    v97 = v24;
  if (v97 != 1)
    goto LABEL_500;
  if (*(_DWORD *)v3 == 1668100710 && *((_WORD *)v3 + 2) == 13873)
  {
    v5 = 65640;
    goto LABEL_557;
  }
  if (*(_DWORD *)v3 == 879784813 && *((_WORD *)v3 + 2) == 12339)
  {
    v5 = 65641;
    goto LABEL_557;
  }
LABEL_500:
  v100 = !v28;
  if (v84)
    v100 = 1;
  if ((v100 & 1) == 0 && *v3 == (void *)0x6E69666B63616C62)
  {
    v5 = 65642;
    goto LABEL_557;
  }
  if (v97)
  {
    if (*(_DWORD *)v3 == 1667196275 && *((_WORD *)v3 + 2) == 13107)
    {
      v5 = 65643;
      goto LABEL_557;
    }
  }
  if (v89)
  {
    if (*(_WORD *)v3 == 25971 && *((_BYTE *)v3 + 2) == 112)
    {
      v5 = 65644;
      goto LABEL_557;
    }
  }
  if (v94 && *(_DWORD *)v3 == 1633907297)
  {
    v5 = 65645;
    goto LABEL_557;
  }
  if (v85 && *(_DWORD *)v3 == 1667853941 && *(_DWORD *)((char *)v3 + 3) == 1701998435)
  {
    v5 = 65646;
    goto LABEL_557;
  }
  if (v97)
  {
    if (*(_DWORD *)v3 == 1701017701 && *((_WORD *)v3 + 2) == 29555)
    {
      v5 = 65647;
      goto LABEL_557;
    }
  }
  if (v89)
  {
    if (*(_WORD *)v3 == 30820 && *((_BYTE *)v3 + 2) == 112)
    {
      v5 = 65648;
      goto LABEL_557;
    }
  }
  v106 = v4 == (void *)12;
  if (v4 == (void *)12 && !v84)
  {
    v107 = *v3 == (void *)0x6E5F617265746C61 && *((_DWORD *)v3 + 2) == 846425961;
    v106 = 1;
    if (v107)
    {
      v5 = 65649;
LABEL_643:
      v123 = v4 == (void *)10;
LABEL_644:
      if (v4 == (void *)13
        && (v5 & 0xFF0000) == 0
        && *v3 == (void *)0x6D6563697474616CLL
        && *(void **)((char *)v3 + 5) == (void *)0x32336F63696D6563)
      {
        v2 = 65674;
        goto LABEL_992;
      }
      goto LABEL_650;
    }
  }
LABEL_558:
  v108 = v5 & 0x10000;
  if (v6 && !v108 && *(_WORD *)v3 == 29283 && *((_BYTE *)v3 + 2) == 120)
  {
    v5 = 65650;
    v6 = 1;
    goto LABEL_643;
  }
  if (v108)
    v110 = 0;
  else
    v110 = v8;
  if (v110 == 1 && *(_DWORD *)v3 == 1952540536 && *((_BYTE *)v3 + 4) == 101)
  {
    v5 = 65651;
    goto LABEL_643;
  }
  v112 = v4 == (void *)4 && v108 == 0;
  v113 = v112;
  if (!v112)
    goto LABEL_582;
  if (*(_DWORD *)v3 == 909521251)
  {
    v5 = 65652;
    goto LABEL_643;
  }
  if (*(_DWORD *)v3 == 1664495981)
  {
    v5 = 65653;
    goto LABEL_643;
  }
LABEL_582:
  v114 = !v28;
  if (v108)
    v114 = 1;
  if ((v114 & 1) == 0 && *v3 == (void *)0x6630336369707364)
  {
    v5 = 65654;
    goto LABEL_643;
  }
  v115 = !v21;
  if (v108)
    v115 = 1;
  if ((v115 & 1) == 0 && *(_WORD *)v3 == 25955)
  {
    v5 = 65655;
    goto LABEL_643;
  }
  if (v113 && *(_DWORD *)v3 == 1664234349)
  {
    v5 = 65656;
    goto LABEL_643;
  }
  v116 = !v27;
  if (v108)
    v116 = 1;
  if ((v116 & 1) == 0 && *(_DWORD *)v3 == 862679924 && *(_DWORD *)((char *)v3 + 3) == 808464435)
  {
    v5 = 65667;
    goto LABEL_643;
  }
  if (v113 && *(_DWORD *)v3 == 942699378)
  {
    v5 = 65668;
    goto LABEL_643;
  }
  if (!v110)
    goto LABEL_610;
  if (*(_DWORD *)v3 == 1918986355 && *((_BYTE *)v3 + 4) == 99)
  {
    v5 = 65669;
LABEL_641:
    v123 = v4 == (void *)10;
    v8 = 1;
    goto LABEL_644;
  }
  if (*(_DWORD *)v3 == 1735353189 && *((_BYTE *)v3 + 4) == 50)
  {
    v5 = 65670;
    goto LABEL_641;
  }
LABEL_610:
  v120 = v24 ^ 1;
  if (v108)
    v120 = 1;
  if ((v120 & 1) == 0 && *(_DWORD *)v3 == 1919902579 && *((_WORD *)v3 + 2) == 14181)
  {
    v5 = 65671;
    goto LABEL_643;
  }
  if (v110)
  {
    if (*(_DWORD *)v3 == 846230372 && *((_BYTE *)v3 + 4) == 52)
    {
      v5 = 65672;
      goto LABEL_643;
    }
  }
  v123 = v4 == (void *)10;
  if (v4 != (void *)10 || v108)
    goto LABEL_644;
  if (*v3 == (void *)0x726F636F65646976 && *((_WORD *)v3 + 4) == 13157)
  {
    v2 = 65673;
    goto LABEL_992;
  }
  v123 = 1;
LABEL_650:
  v126 = v5 & 0x10000;
  if ((v5 & 0xFF0000) != 0)
    v24 = 0;
  if (v24 == 1 && *(_DWORD *)v3 == 1667196275 && *((_WORD *)v3 + 2) == 14129)
  {
    v2 = 65675;
    goto LABEL_992;
  }
  if (v126)
    v28 = 0;
  if (v28)
  {
    if (*v3 == (void *)0x30303036635F6974)
    {
      v2 = 65676;
      goto LABEL_992;
    }
    if (*v3 == (void *)0x30303032635F6974)
    {
      v2 = 65677;
      goto LABEL_992;
    }
    if (*v3 == (void *)0x30303535635F6974)
    {
      v2 = 65678;
      goto LABEL_992;
    }
  }
  if (v126)
    v123 = 0;
  if (v123 && *v3 == (void *)0x6C705F7073646D6DLL && *((_WORD *)v3 + 4) == 29557)
  {
    v2 = 65696;
    goto LABEL_992;
  }
  if (v126)
    v7 = 0;
  if (v7 && *v3 == (void *)0x5F73736572707963 && *(void **)((char *)v3 + 3) == (void *)0x63386D5F73736572)
  {
    v2 = 65697;
    goto LABEL_992;
  }
  v130 = v4 == (void *)4 && v126 == 0;
  v131 = v130;
  if (v130 && *(_DWORD *)v3 == 1664234354)
  {
    v2 = 65698;
    goto LABEL_992;
  }
  if (v28 && *v3 == (void *)0x616964656D697274)
  {
    v2 = 65699;
    goto LABEL_992;
  }
  if (v126)
    v27 = 0;
  if (v27 && *(_DWORD *)v3 == 1635280232 && *(_DWORD *)((char *)v3 + 3) == 1852794721)
  {
    v2 = 65700;
    goto LABEL_992;
  }
  if (v131 && *(_DWORD *)v3 == 825569336)
  {
    v2 = 65701;
    goto LABEL_992;
  }
  if (v24)
  {
    if (*(_DWORD *)v3 == 1886942323 && *((_WORD *)v3 + 2) == 30775)
    {
      v2 = 65702;
      goto LABEL_992;
    }
  }
  if (v126)
    v8 = 0;
  if (v8 != 1)
    goto LABEL_713;
  if (*(_DWORD *)v3 == 863200366 && *((_BYTE *)v3 + 4) == 50)
  {
    v2 = 65703;
    goto LABEL_992;
  }
  if (*(_DWORD *)v3 != 1735353189 || *((_BYTE *)v3 + 4) != 49)
  {
LABEL_713:
    if (v24)
    {
      if (*(_DWORD *)v3 == 1735353189 && *((_WORD *)v3 + 2) == 30769)
        goto LABEL_992;
      if (*(_DWORD *)v3 == 1903714669 && *((_WORD *)v3 + 2) == 12339)
      {
        v2 = 65705;
        goto LABEL_992;
      }
      if (*(_DWORD *)v3 == 1869441400 && *((_WORD *)v3 + 2) == 13873)
      {
        v2 = 65706;
        goto LABEL_992;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1768841581 && *((_BYTE *)v3 + 4) == 107)
      {
        v2 = 65707;
        goto LABEL_992;
      }
    }
    if (v27 && *(_DWORD *)v3 == 2036429411 && *(_DWORD *)((char *)v3 + 3) == 846622329)
    {
      v2 = 65708;
      goto LABEL_992;
    }
    if (v126)
      v21 = 0;
    if (v21 && *(_WORD *)v3 == 30834)
    {
      v2 = 65709;
      goto LABEL_992;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1635018093 && *((_BYTE *)v3 + 4) == 103)
      {
        v2 = 65710;
        goto LABEL_992;
      }
    }
    if (v7 && *v3 == (void *)0x626C655F7473636DLL && *(void **)((char *)v3 + 3) == (void *)0x737572626C655F74)
    {
      v2 = 65711;
      goto LABEL_992;
    }
    if (v24)
    {
      if (*(_DWORD *)v3 == 1735353189 && *((_WORD *)v3 + 2) == 13873)
      {
        v2 = 65712;
        goto LABEL_992;
      }
    }
    if (v131)
    {
      if (*(_DWORD *)v3 == 909210211)
      {
        v2 = 65713;
        goto LABEL_992;
      }
      if (*(_DWORD *)v3 == 1970304101)
      {
        v2 = 65714;
        goto LABEL_992;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 962948211 && *((_BYTE *)v3 + 4) == 120)
      {
        v2 = 65715;
        goto LABEL_992;
      }
    }
    if (v131)
    {
      if (*(_DWORD *)v3 == 1831874924)
      {
        v2 = 65716;
        goto LABEL_992;
      }
      if (*(_DWORD *)v3 == 1831874923)
      {
        v2 = 65717;
        goto LABEL_992;
      }
    }
    if (v27 && *(_DWORD *)v3 == 1668440417 && *(_DWORD *)((char *)v3 + 3) == 875980899)
    {
      v2 = 65719;
      goto LABEL_992;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 863139425 && *((_BYTE *)v3 + 4) == 50)
      {
        v2 = 65721;
        goto LABEL_992;
      }
    }
    if (v131 && *(_DWORD *)v3 == 946697331)
    {
      v2 = 65722;
      goto LABEL_992;
    }
    if (v24)
    {
      if (*(_DWORD *)v3 == 1701603700 && *((_WORD *)v3 + 2) == 13366)
      {
        v2 = 65723;
        goto LABEL_992;
      }
    }
    if (v27 && *(_DWORD *)v3 == 1701603700 && *(_DWORD *)((char *)v3 + 3) == 1869770853)
    {
      v2 = 65724;
      goto LABEL_992;
    }
    if (v131 && *(_DWORD *)v3 == 1633973603)
    {
      v2 = 65726;
      goto LABEL_992;
    }
    if (v24)
    {
      if (*(_DWORD *)v3 == 1701603700 && *((_WORD *)v3 + 2) == 30823)
      {
        v2 = 65727;
        goto LABEL_992;
      }
    }
    if (v7 && *v3 == (void *)0x69687364756F6C63 && *(void **)((char *)v3 + 3) == (void *)0x646C656968736475)
    {
      v2 = 65728;
      goto LABEL_992;
    }
    v151 = !v29;
    if (v126)
      v151 = 1;
    if ((v151 & 1) == 0)
    {
      if (*v3 == (void *)0x73315F6165726F63 && *((_BYTE *)v3 + 8) == 116)
      {
        v2 = 65729;
        goto LABEL_992;
      }
      if (*v3 == (void *)0x6E325F6165726F63 && *((_BYTE *)v3 + 8) == 100)
      {
        v2 = 65730;
        goto LABEL_992;
      }
    }
    v154 = !v106;
    if (v126)
      v154 = 1;
    if ((v154 & 1) == 0 && *v3 == (void *)0x706D6F635F637261 && *((_DWORD *)v3 + 2) == 846488417)
    {
      v2 = 65731;
      goto LABEL_992;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1852141679 && *((_BYTE *)v3 + 4) == 56)
      {
        v2 = 65732;
        goto LABEL_992;
      }
    }
    if (v131 && *(_DWORD *)v3 == 943156338)
    {
      v2 = 65733;
      goto LABEL_992;
    }
    if (v123 && *v3 == (void *)0x726F636F65646976 && *((_WORD *)v3 + 4) == 13669)
    {
      v2 = 65734;
      goto LABEL_992;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1869297719 && *((_BYTE *)v3 + 4) == 114)
      {
        v2 = 65735;
        goto LABEL_992;
      }
    }
    if (v27 && *(_DWORD *)v3 == 808990261 && *(_DWORD *)((char *)v3 + 3) == 2019897392)
    {
      v2 = 65736;
      goto LABEL_992;
    }
    if (v126)
      v6 = 0;
    if (v6 == 1)
    {
      if (*(_WORD *)v3 == 24930 && *((_BYTE *)v3 + 2) == 49)
      {
        v2 = 65737;
        goto LABEL_992;
      }
      if (*(_WORD *)v3 == 24930 && *((_BYTE *)v3 + 2) == 50)
      {
        v2 = 65738;
        goto LABEL_992;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1919902584 && *((_BYTE *)v3 + 4) == 101)
      {
        v2 = 65739;
        goto LABEL_992;
      }
    }
    if (v28)
    {
      if (*v3 == (void *)0x6369705F7068636DLL)
      {
        v2 = 65740;
        goto LABEL_992;
      }
      if (*v3 == (void *)0x3530326C65746E69)
      {
        v2 = 65741;
        goto LABEL_992;
      }
      if (*v3 == (void *)0x3630326C65746E69)
      {
        v2 = 65742;
        goto LABEL_992;
      }
      if (*v3 == (void *)0x3730326C65746E69)
      {
        v2 = 65743;
        goto LABEL_992;
      }
      if (*v3 == (void *)0x3830326C65746E69)
      {
        v2 = 65744;
        goto LABEL_992;
      }
      if (*v3 == (void *)0x3930326C65746E69)
      {
        v2 = 65745;
        goto LABEL_992;
      }
    }
    if (v131 && *(_DWORD *)v3 == 842231147)
    {
      v2 = 65746;
      goto LABEL_992;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 863530347 && *((_BYTE *)v3 + 4) == 50)
      {
        v2 = 65747;
        goto LABEL_992;
      }
      if (*(_DWORD *)v3 == 829975915 && *((_BYTE *)v3 + 4) == 54)
      {
        v2 = 65748;
        goto LABEL_992;
      }
    }
    if (v131 && *(_DWORD *)v3 == 947416427)
    {
      v2 = 65749;
      goto LABEL_992;
    }
    if (v8)
    {
      if (*(_DWORD *)v3 == 1918989931 && *((_BYTE *)v3 + 4) == 99)
      {
        v2 = 65750;
        goto LABEL_992;
      }
    }
    if (v6)
    {
      if (*(_WORD *)v3 == 25699 && *((_BYTE *)v3 + 2) == 112)
      {
        v2 = 65751;
        goto LABEL_992;
      }
    }
    if (v131)
    {
      switch(*(_DWORD *)v3)
      {
        case 0x65676F63:
          v2 = 65752;
          goto LABEL_992;
        case 0x6C6F6F63:
          v2 = 65753;
          goto LABEL_992;
        case 0x63726F6E:
          v2 = 65754;
          goto LABEL_992;
      }
    }
    if (v7 && *v3 == (void *)0x696C616B5F727363 && *(void **)((char *)v3 + 3) == (void *)0x61626D696C616B5FLL)
    {
      v2 = 65755;
      goto LABEL_992;
    }
    if (v24)
    {
      if (*(_DWORD *)v3 == 1734634849 && *((_WORD *)v3 + 2) == 30064)
      {
        v2 = 65760;
        goto LABEL_992;
      }
    }
    if (!v8)
      goto LABEL_913;
    if (*(_DWORD *)v3 == 1668508018 && *((_BYTE *)v3 + 4) == 118)
    {
      v2 = 65779;
      goto LABEL_992;
    }
    if (*(_DWORD *)v3 == 1634623852 && *((_BYTE *)v3 + 4) == 105)
    {
      v2 = 65780;
    }
    else
    {
LABEL_913:
      if (v6 && (*(_WORD *)v3 == 28770 ? (v171 = *((_BYTE *)v3 + 2) == 102) : (v171 = 0), v171))
      {
        v2 = 65783;
      }
      else
      {
        if (v21)
        {
          if (*(_WORD *)v3 == 25974)
          {
            LOBYTE(v131) = 0;
            v172 = 65787;
          }
          else
          {
            v172 = v5;
          }
          if ((v131 & 1) == 0)
          {
            v2 = v172;
            goto LABEL_992;
          }
        }
        else if (!v131)
        {
          v2 = v5;
          goto LABEL_992;
        }
        if (*(_DWORD *)v3 == 2037085027)
          v2 = 65788;
        else
          v2 = v5;
      }
    }
  }
LABEL_992:
  if (v176 < 0)
    operator delete(v175[0]);
  if ((v2 & 0xFF0000) != 0)
    return (unsigned __int16)v2;
  else
    return 0;
}

const char *llvm::ELF::convertEMachineToArchName(llvm::ELF *this)
{
  if (((_DWORD)this - 1) > 0xFB)
    return "None";
  else
    return off_1E813E150[(__int16)((_WORD)this - 1)];
}

void llvm::MachO::getCPUType(llvm::MachO *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  int v6;
  int v7;
  llvm::MachO *v8;
  const std::error_category *v9;
  void **v10;
  uint64_t v11;
  void (**v13)(llvm::raw_ostream *__hidden);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *__p[2];
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;

  if (*((_DWORD *)this + 11) == 5)
  {
    v5 = *((_DWORD *)this + 6);
    if ((v5 - 41) > 1)
      goto LABEL_13;
    v6 = sub_1C5E4EA90(*((_DWORD *)this + 6));
    if (v6 == 64)
    {
      *(_BYTE *)(a2 + 8) &= ~1u;
      v7 = 16777223;
      goto LABEL_24;
    }
    if (v6 == 32)
    {
      *(_BYTE *)(a2 + 8) &= ~1u;
      v7 = 7;
    }
    else
    {
LABEL_13:
      if (v5 > 0x28 || ((1 << v5) & 0x18000000006) == 0)
      {
        if ((v5 - 3) <= 2)
        {
          if (sub_1C5E4EA90(v5) == 32)
            v7 = 33554444;
          else
            v7 = 16777228;
          *(_BYTE *)(a2 + 8) &= ~1u;
          goto LABEL_24;
        }
        if (v5 > 47)
        {
          if (v5 == 48)
          {
            *(_BYTE *)(a2 + 8) &= ~1u;
            v7 = 23;
            goto LABEL_24;
          }
          if (v5 == 49)
          {
            *(_BYTE *)(a2 + 8) &= ~1u;
            v7 = 16777239;
            goto LABEL_24;
          }
        }
        else
        {
          if (v5 == 21)
          {
            *(_BYTE *)(a2 + 8) &= ~1u;
            v7 = 18;
            goto LABEL_24;
          }
          if (v5 == 23)
          {
            *(_BYTE *)(a2 + 8) &= ~1u;
            v7 = 16777234;
            goto LABEL_24;
          }
        }
        sub_1C4FE1438((uint64_t *)a2, (uint64_t)"type", (uint64_t *)this);
        *(_BYTE *)(a2 + 8) |= 1u;
        return;
      }
      *(_BYTE *)(a2 + 8) &= ~1u;
      v7 = 12;
    }
LABEL_24:
    *(_DWORD *)a2 = v7;
    return;
  }
  if (*((char *)this + 23) >= 0)
    v8 = this;
  else
    v8 = *(llvm::MachO **)this;
  v9 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  v14 = 0;
  v18 = 0;
  v19 = 0;
  v13 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v21 = __p;
  v20 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v24[0] = &unk_1E813E940;
  v24[1] = "Unsupported triple for mach-o cpu %s: %s";
  v24[2] = "type";
  v24[3] = v8;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v13, (uint64_t)v24);
  v10 = v21;
  v11 = operator new();
  v25 = 260;
  v24[0] = v10;
  *(_QWORD *)v11 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v24, (_QWORD *)(v11 + 8));
  *(_QWORD *)(v11 + 32) = 22;
  *(_QWORD *)(v11 + 40) = v9;
  *(_BYTE *)(v11 + 48) = 1;
  v13 = off_1E81A6E70;
  if (v20 == 1 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8077774924);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v11;
}

void sub_1C4FE1438(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  const std::error_category *v6;
  void **v7;
  uint64_t v8;
  void (**v9)(llvm::raw_ostream *__hidden);
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *__p[2];
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;

  if (*((char *)a3 + 23) >= 0)
    v5 = a3;
  else
    v5 = (uint64_t *)*a3;
  v6 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v19 = 0;
  v10 = 0;
  v14 = 0;
  v15 = 0;
  v9 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v17 = __p;
  v16 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v20[0] = &unk_1E813E940;
  v20[1] = "Unsupported triple for mach-o cpu %s: %s";
  v20[2] = a2;
  v20[3] = v5;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v9, (uint64_t)v20);
  v7 = v17;
  v8 = operator new();
  v21 = 260;
  v20[0] = v7;
  *(_QWORD *)v8 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v20, (_QWORD *)(v8 + 8));
  *(_QWORD *)(v8 + 32) = 22;
  *(_QWORD *)(v8 + 40) = v6;
  *(_BYTE *)(v8 + 48) = 1;
  *a1 = v8;
  v9 = off_1E81A6E70;
  if (v16 == 1 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

void llvm::MachO::getCPUSubType(llvm::MachO *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v5;
  int v6;
  llvm::MachO *v7;
  const std::error_category *v8;
  void **v9;
  uint64_t v10;
  uint64_t AIRVersion;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Triple *ArchName;
  uint64_t v17;
  llvm::Triple *v18;
  unint64_t v19;
  _BYTE *CanonicalArchName;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *ArchSynonym;
  size_t v29;
  size_t v30;
  uint64_t v31;
  int *v32;
  size_t v33;
  int *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void (**v40)(llvm::raw_ostream *__hidden);
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  void **v48;
  void *__p[2];
  uint64_t v50;
  _QWORD v51[4];
  __int16 v52;

  if (*((_DWORD *)this + 11) == 5)
  {
    v5 = *((_DWORD *)this + 6);
    if (v5 - 41 <= 1)
    {
      if (sub_1C5E4EA90(*((_DWORD *)this + 6)) != 32)
      {
        ArchName = llvm::Triple::getArchName(this);
        v6 = 3;
        if (v17 == 7)
        {
          if (*(_DWORD *)ArchName ^ 0x5F363878 | *(_DWORD *)((char *)ArchName + 3) ^ 0x6834365F)
            v6 = 3;
          else
            v6 = 8;
        }
        goto LABEL_56;
      }
      goto LABEL_4;
    }
    if (v5 <= 0x31)
    {
      if (((1 << v5) & 0xA00000) != 0)
      {
        *(_BYTE *)(a2 + 8) &= ~1u;
        *(_DWORD *)a2 = 0;
        return;
      }
      if (((1 << v5) & 0x18000000000) != 0)
        goto LABEL_31;
      if (((1 << v5) & 0x3000000000000) != 0)
      {
        AIRVersion = llvm::Triple::getAIRVersion(this);
        if ((_DWORD)AIRVersion == 2)
        {
          v36 = AIRVersion & 0x7FFFFFFF00000000;
          v37 = v12 & 0x7FFFFFFF00000000;
          if (!(AIRVersion & 0x7FFFFFFF00000000 | v12 & 0x7FFFFFFF00000000 | v12 & 0x7FFFFFFF))
          {
            v6 = 4;
            goto LABEL_56;
          }
          v38 = v12 & 0x7FFFFFFF;
          if (!v37 && !(v36 ^ 0x100000000 | v38))
          {
LABEL_48:
            v6 = 5;
            goto LABEL_56;
          }
          if (!v37 && !(v36 ^ 0x200000000 | v38))
          {
LABEL_52:
            v6 = 6;
            goto LABEL_56;
          }
          if (!v37 && !(v36 ^ 0x300000000 | v38))
          {
LABEL_59:
            v6 = 7;
            goto LABEL_56;
          }
          if (!v37 && !(v36 ^ 0x400000000 | v38))
          {
            v6 = 8;
            goto LABEL_56;
          }
          if (!v37 && !(v36 ^ 0x500000000 | v38))
          {
LABEL_36:
            v6 = 9;
            goto LABEL_56;
          }
          if (!v37 && !(v36 ^ 0x600000000 | v38))
          {
            v6 = 10;
            goto LABEL_56;
          }
          goto LABEL_55;
        }
        if ((_DWORD)AIRVersion != 1)
          goto LABEL_55;
        v13 = AIRVersion & 0x7FFFFFFF00000000;
        v14 = v12 & 0x7FFFFFFF;
        v15 = v12 & 0x7FFFFFFF00000000;
        if ((v12 & 0x7FFFFFFF00000000) != 0 || v13 ^ 0x600000000 | v14)
        {
          if (!v15 && !(v13 ^ 0x800000000 | v14))
          {
            v6 = 2;
            goto LABEL_56;
          }
          if (!v15 && !(v13 ^ 0xB00000000 | v14))
          {
LABEL_4:
            v6 = 3;
LABEL_56:
            *(_BYTE *)(a2 + 8) &= ~1u;
            *(_DWORD *)a2 = v6;
            return;
          }
LABEL_55:
          v6 = 11;
          goto LABEL_56;
        }
LABEL_29:
        v6 = 1;
        goto LABEL_56;
      }
    }
    if (v5 - 3 < 3)
    {
      if (sub_1C5E4EA90(*((_DWORD *)this + 6)) != 32)
      {
        if (*((_DWORD *)this + 7) == 31 && v5 == 3)
          v6 = 2;
        else
          v6 = 0;
        goto LABEL_56;
      }
      goto LABEL_29;
    }
    if (v5 - 1 > 1)
    {
      sub_1C4FE1438((uint64_t *)a2, (uint64_t)"subtype", (uint64_t *)this);
      *(_BYTE *)(a2 + 8) |= 1u;
      return;
    }
LABEL_31:
    v18 = llvm::Triple::getArchName(this);
    CanonicalArchName = llvm::ARM::getCanonicalArchName((uint64_t)v18, v19);
    ArchSynonym = (const void *)llvm::ARM::getArchSynonym((uint64_t)CanonicalArchName, v21, v22, v23, v24, v25, v26, v27);
    v30 = v29;
    v31 = -(uint64_t)v29;
    v32 = &dword_1E819AF68;
    while (1)
    {
      v33 = *((_QWORD *)v32 - 7);
      v34 = v32 - 16;
      if (v33 >= v30 && (!v30 || !memcmp((const void *)(*((_QWORD *)v32 - 8) + v33 + v31), ArchSynonym, v30)))
        break;
      v32 += 18;
      if (v34 + 18 == (int *)off_1E819BAF8)
        goto LABEL_36;
    }
    v39 = *v32;
    v6 = 9;
    switch(*v32)
    {
      case 6:
        goto LABEL_48;
      case 7:
      case 8:
      case 9:
        goto LABEL_59;
      case 10:
      case 11:
        goto LABEL_52;
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
        goto LABEL_56;
      case 14:
        v6 = 14;
        break;
      case 18:
        v6 = 15;
        break;
      case 19:
        v6 = 16;
        break;
      default:
        if (v39 == 41)
          v6 = 12;
        else
          v6 = 9;
        if (v39 == 40)
          v6 = 11;
        break;
    }
    goto LABEL_56;
  }
  if (*((char *)this + 23) >= 0)
    v7 = this;
  else
    v7 = *(llvm::MachO **)this;
  v8 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v50 = 0;
  v41 = 0;
  v45 = 0;
  v46 = 0;
  v40 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v48 = __p;
  v47 = 0;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v51[0] = &unk_1E813E940;
  v51[1] = "Unsupported triple for mach-o cpu %s: %s";
  v51[2] = "subtype";
  v51[3] = v7;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v40, (uint64_t)v51);
  v9 = v48;
  v10 = operator new();
  v52 = 260;
  v51[0] = v9;
  *(_QWORD *)v10 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v51, (_QWORD *)(v10 + 8));
  *(_QWORD *)(v10 + 32) = 22;
  *(_QWORD *)(v10 + 40) = v8;
  *(_BYTE *)(v10 + 48) = 1;
  v40 = off_1E81A6E70;
  if (v47 == 1 && v42)
    MEMORY[0x1CAA32F9C](v42, 0x1000C8077774924);
  if (SHIBYTE(v50) < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v10;
}

void llvm::MachO::getCPUSubType(llvm::MachO *this@<X0>, const llvm::Triple *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const std::error_category *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = a2;
  v16 = *MEMORY[0x1E0C80C00];
  llvm::MachO::getCPUSubType(this, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v7 = v14;
    *(_BYTE *)(a4 + 8) |= 1u;
    goto LABEL_7;
  }
  if ((_DWORD)v14 != 2)
  {
    v12 = 22;
    v13 = std::generic_category();
    v11 = "ptrauth ABI version is only supported on arm64e.";
    sub_1C5DF1730((_BYTE **)&v11, &v12, &v10);
    *(_BYTE *)(a4 + 8) |= 1u;
    v7 = v10;
    goto LABEL_7;
  }
  if (v5 >= 0x40)
  {
    v12 = 22;
    v13 = std::generic_category();
    v11 = "The ptrauth ABI version needs to fit within 6 bits.";
    sub_1C5DF1730((_BYTE **)&v11, &v12, &v9);
    *(_BYTE *)(a4 + 8) |= 1u;
    v7 = v9;
LABEL_7:
    *(_QWORD *)a4 = v7;
    return;
  }
  if (a3)
    v8 = -1073741822;
  else
    v8 = -2147483646;
  *(_BYTE *)(a4 + 8) &= ~1u;
  *(_DWORD *)a4 = v8 | (v5 << 24);
}

uint64_t llvm::identify_magic(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;

  if (a2 < 4)
    return 0;
  v4 = *a1;
  if (v4 <= 0x65)
  {
    if (*a1 <= 0x3Bu)
    {
      if (*a1 <= 2u)
      {
        if (*a1)
        {
          if (v4 == 1)
          {
            if (*(unsigned __int16 *)a1 == 57089)
              return 31;
            if (*(__int16 *)a1 == -2303)
              return 32;
          }
          return 0;
        }
        if (*(_DWORD *)a1 == -65536)
        {
          if (a2 < 0x1C)
            return 28;
          if (*(_QWORD *)(a1 + 12) != 0x4BA9BAEED1BAA1C7 || *(_QWORD *)(a1 + 20) != 0xB8DCA46AF6FA20AFLL)
          {
            if (*(_QWORD *)(a1 + 12) ^ 0x4DABD9A50CB3FE38 | *(_QWORD *)(a1 + 20) ^ 0xC2532622B6D69BACLL)
              return 28;
            else
              return 26;
          }
        }
        else
        {
          if (a2 >= 0x10 && *(_QWORD *)a1 == 0x2000000000 && *((_QWORD *)a1 + 1) == 0xFFFF0000FFFFLL)
            return 30;
          if (a1[1])
          {
            if (*(_DWORD *)a1 == 1836278016)
              return 33;
            return 0;
          }
        }
        return 27;
      }
      if (v4 == 3)
      {
        if (!(*(unsigned __int16 *)a1 ^ 0xF003 | a1[2]))
          return 8;
        return 0;
      }
      if (v4 != 33)
      {
        if (v4 == 45 && a2 >= 9)
        {
          v13 = *(_QWORD *)a1 == 0x70617421202D2D2DLL && a1[8] == 105;
          if (v13)
            return 35;
          if (a2 >= 0xA && *(_QWORD *)a1 == 0x686372610A2D2D2DLL && *((_WORD *)a1 + 4) == 14963)
            return 35;
        }
        return 0;
      }
      if (a2 < 8)
        return 0;
      if (*(_QWORD *)a1 == 0xA3E686372613C21)
        return 2;
      v23 = *(_QWORD *)a1;
      v24 = 0x6E6968743C21;
LABEL_94:
      if (v23 != (v24 & 0xFFFFFFFFFFFFLL | 0xA3E000000000000))
        return 0;
      return 2;
    }
    if (*a1 <= 0x4Cu)
    {
      if (v4 != 60)
      {
        if (v4 != 66)
        {
          if (v4 != 76)
            return 0;
LABEL_69:
          if (a1[1] == 1)
            return 27;
          goto LABEL_70;
        }
        v25 = *(_DWORD *)a1;
        v26 = -557825214;
        return v25 == v26;
      }
      if (a2 < 8)
        return 0;
      v23 = *(_QWORD *)a1;
      v24 = 0x66616769623CLL;
      goto LABEL_94;
    }
    if (v4 != 77)
    {
      if (v4 != 80)
      {
        if (v4 == 100)
        {
          v19 = a1[1];
          if (v19 == 170 || v19 == 134)
            return 27;
          else
            return 0;
        }
        return 0;
      }
      goto LABEL_68;
    }
    if (a2 >= 0x40 && *(_WORD *)a1 == 23117)
    {
      v27 = *((unsigned int *)a1 + 15);
      if (a2 < v27)
        v27 = a2;
      if (a2 - v27 >= 4 && *(_DWORD *)&a1[v27] == 17744)
        return 29;
    }
    else if (a2 < 0x1A)
    {
      goto LABEL_126;
    }
    if (*(_QWORD *)a1 == 0x666F736F7263694DLL
      && *((_QWORD *)a1 + 1) == 0x202B2B432F432074
      && *((_QWORD *)a1 + 2) == 0x30302E372046534DLL
      && *((_WORD *)a1 + 12) == 2573)
    {
      return 34;
    }
LABEL_126:
    if (*(_DWORD *)a1 == 1347241037)
      return 25;
    if (*(_DWORD *)a1 == 1112298573)
      return 37;
    return 0;
  }
  if (*a1 > 0xC3u)
  {
    if (*a1 <= 0xDDu)
    {
      switch(*a1)
      {
        case 0xC4u:
          goto LABEL_69;
        case 0xCAu:
          if (*(_DWORD *)a1 == -1095041334)
          {
            if (a2 < 8)
              return 0;
          }
          else if (a2 < 8 || *(_DWORD *)a1 != -1078264118)
          {
            return 0;
          }
          if ((char)a1[7] >= 43)
            return 0;
          v2 = 23;
          break;
        case 0xCBu:
          if (*(_DWORD *)a1 != -1095041333)
            return 0;
          return 24;
        case 0xCEu:
        case 0xCFu:
          goto LABEL_51;
        default:
          return 0;
      }
      return v2;
    }
    if (v4 != 222)
    {
      if (v4 != 240)
      {
        if (v4 == 254)
        {
LABEL_51:
          if (*(_DWORD *)a1 == -822415874 || *(_DWORD *)a1 == -805638658)
          {
            v21 = 32;
            if (a1[3] == 206)
              v21 = 28;
            if (a2 < v21)
              return 0;
            v16 = 15;
            v17 = 14;
            v18 = 13;
          }
          else
          {
            if (*(_DWORD *)a1 != -17958194 && *(_DWORD *)a1 != -17958193)
              return 0;
            v13 = v4 == 206;
            v15 = 32;
            if (v13)
              v15 = 28;
            if (a2 < v15)
              return 0;
            v16 = 12;
            v17 = 13;
            v18 = 14;
          }
          v22 = (unsigned __int16)(((a1[v17] << 8) | (a1[v18] << 12) | (char)a1[v16]) - 1);
          if (v22 < 0xE)
            return v22 + 9;
          return 0;
        }
        return 0;
      }
      goto LABEL_68;
    }
    v25 = *(_DWORD *)a1;
    v26 = 186106078;
    return v25 == v26;
  }
  v5 = v4 - 102;
  if (v5 > 0x2A)
    return 0;
  if (((1 << v5) & 0x60000001) != 0)
  {
LABEL_68:
    if (*(_DWORD *)a1 == -1168773808)
      return 36;
    goto LABEL_69;
  }
  if (((1 << v5) & 0x40000000004) != 0)
  {
LABEL_70:
    if (a1[1] != 2)
      return 0;
    return 27;
  }
  if (v5 != 25 || a2 < 0x12 || *(_DWORD *)a1 != 1179403647)
    return 0;
  v6 = a1[5];
  v7 = 16;
  if (v6 != 2)
    v7 = 17;
  v8 = a1[v7];
  v2 = 3;
  if (!v8)
  {
    v13 = v6 == 2;
    v9 = 16;
    if (v13)
      v9 = 17;
    v10 = (char)a1[v9];
    v11 = v10 - 1;
    v12 = v10 + 3;
    if (v11 >= 4)
      return 3;
    else
      return v12;
  }
  return v2;
}

uint64_t llvm::identify_magic(unsigned __int8 *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  sub_1C5E1F6CC(a1, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 0, 0, (uint64_t)&v5);
  if ((v6 & 1) != 0)
    return v5;
  v3 = v5;
  *a2 = llvm::identify_magic(*(unsigned __int8 **)(v5 + 8), *(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8));
  std::system_category();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return 0;
}

double llvm::msgpack::DocNode::convertToArray(uint64_t **this)
{
  double result;
  __int128 v3;
  uint64_t *v4;

  sub_1C4FE2284(**this, &v3);
  result = *(double *)&v3;
  *(_OWORD *)this = v3;
  this[2] = v4;
  return result;
}

void sub_1C4FE2284(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[3];

  v4 = (_QWORD *)operator new();
  v6 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  v8 = *(_QWORD **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)(a1 + 24);
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    v5 = 0x7FFFFFFFFFFFFFF8;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v6;
    v9 = v16 + 8;
    if (v8 == v10)
    {
      *(_QWORD *)(a1 + 24) = v16;
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 40) = v17;
    }
    else
    {
      do
      {
        v18 = *--v8;
        v5 = v18;
        *v8 = 0;
        *((_QWORD *)v16 - 1) = v18;
        v16 -= 8;
      }
      while (v8 != v10);
      v8 = *(_QWORD **)(a1 + 24);
      v19 = *(_QWORD **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v16;
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 40) = v17;
      while (v19 != v8)
      {
        v21 = *--v19;
        v20 = v21;
        *v19 = 0;
        if (v21)
          sub_1C4FE303C(v20);
      }
    }
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = v4;
    v9 = v8 + 1;
  }
  v22 = (_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 32) = v9;
  if (*(_BYTE *)(a1 + 216) == 7)
  {
    v23 = *(v9 - 1);
  }
  else
  {
    sub_1C4FE2284(v24, *v22);
    v22 = (_QWORD *)v24[0];
    v23 = v24[1];
    v5 = v24[2];
  }
  *a2 = v22;
  a2[1] = v23;
  a2[2] = v5;
}

double llvm::msgpack::DocNode::convertToMap(uint64_t **this)
{
  double result;
  __int128 v3;
  uint64_t *v4;

  sub_1C4FE2440(**this, &v3);
  result = *(double *)&v3;
  *(_OWORD *)this = v3;
  this[2] = v4;
  return result;
}

char *sub_1C4FE2440@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char *result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11[3];

  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = v4 + 1;
  v11[0] = (uint64_t)v4;
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_1C4FE307C((char **)a1, v11);
    v8 = v11[0];
    *(_QWORD *)(a1 + 8) = result;
    v11[0] = 0;
    if (v8)
    {
      sub_1C4FE319C(v8, *(_QWORD **)(v8 + 8));
      MEMORY[0x1CAA32FC0](v8, 0x1020C4062D53EE8);
      result = *(char **)(a1 + 8);
    }
  }
  else
  {
    *v6 = v4;
    result = (char *)(v6 + 1);
    *(_QWORD *)(a1 + 8) = result;
  }
  v9 = (_QWORD *)(a1 + 224);
  if (*(_BYTE *)(a1 + 232) == 8)
  {
    v10 = *((_QWORD *)result - 1);
  }
  else
  {
    result = (char *)sub_1C4FE2440(v11, *v9);
    v9 = (_QWORD *)v11[0];
    v10 = v11[1];
    v5 = v11[2];
  }
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v5;
  return result;
}

_QWORD *llvm::msgpack::MapDocNode::find(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6[3];

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = *v4 + 176;
  v6[1] = a2;
  v6[2] = a3;
  return sub_1C4FE31DC(v3, v6);
}

_QWORD *llvm::msgpack::MapDocNode::operator[](_QWORD **a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)&v4 = **a1 + 176;
  *((_QWORD *)&v4 + 1) = a2;
  v5 = a3;
  return llvm::msgpack::MapDocNode::operator[]((uint64_t)a1, &v4);
}

_QWORD *llvm::msgpack::MapDocNode::operator[](uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;

  v3 = *(_QWORD *)(a1 + 8);
  v8 = a2;
  v4 = sub_1C4FE3364(v3, (uint64_t *)a2, (uint64_t)&std::piecewise_construct, &v8);
  v7 = *((_QWORD *)v4 + 7);
  result = (_QWORD *)v4 + 7;
  v6 = v7;
  if (!v7 || *(_BYTE *)(v6 + 8) == 10)
    *result = **(_QWORD **)a1 + 256;
  return result;
}

_QWORD *llvm::msgpack::MapDocNode::operator[](_QWORD **a1, int a2)
{
  __int128 v3;

  *(_QWORD *)&v3 = **a1 + 96;
  *((_QWORD *)&v3 + 1) = a2;
  return llvm::msgpack::MapDocNode::operator[]((uint64_t)a1, &v3);
}

_QWORD *llvm::msgpack::MapDocNode::operator[](_QWORD **a1, unsigned int a2)
{
  __int128 v3;

  *(_QWORD *)&v3 = **a1 + 112;
  *((_QWORD *)&v3 + 1) = a2;
  return llvm::msgpack::MapDocNode::operator[]((uint64_t)a1, &v3);
}

_QWORD *llvm::msgpack::MapDocNode::operator[](_QWORD **a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)&v3 = **a1 + 96;
  *((_QWORD *)&v3 + 1) = a2;
  return llvm::msgpack::MapDocNode::operator[]((uint64_t)a1, &v3);
}

{
  __int128 v3;

  *(_QWORD *)&v3 = **a1 + 112;
  *((_QWORD *)&v3 + 1) = a2;
  return llvm::msgpack::MapDocNode::operator[]((uint64_t)a1, &v3);
}

char *llvm::msgpack::ArrayDocNode::operator[](uint64_t a1, unint64_t a2)
{
  void **v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;

  v4 = *(void ***)(a1 + 8);
  v5 = (char *)*v4;
  v6 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v4[1] - (_BYTE *)*v4) >> 3);
  if (v6 <= a2)
  {
    *(_QWORD *)&v9 = **(_QWORD **)a1 + 256;
    v7 = a2 + 1 - v6;
    if (a2 + 1 <= v6)
    {
      if (a2 + 1 < v6)
        v4[1] = &v5[24 * a2 + 24];
    }
    else
    {
      sub_1C4FE34A8(v4, v7, &v9);
    }
    v5 = **(char ***)(a1 + 8);
  }
  return &v5[24 * a2];
}

_QWORD *llvm::msgpack::DocNode::operator=(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = *(_QWORD *)*result + 176;
  result[1] = a2;
  result[2] = a3;
  return result;
}

uint64_t llvm::msgpack::DocNode::operator=(uint64_t result, char a2)
{
  *(_QWORD *)result = **(_QWORD **)result + 144;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

_QWORD *llvm::msgpack::DocNode::operator=(_QWORD *result, int a2)
{
  *result = *(_QWORD *)*result + 96;
  result[1] = a2;
  return result;
}

_QWORD *llvm::msgpack::DocNode::operator=(_QWORD *result, unsigned int a2)
{
  *result = *(_QWORD *)*result + 112;
  result[1] = a2;
  return result;
}

_QWORD *llvm::msgpack::DocNode::operator=(_QWORD *result, uint64_t a2)
{
  *result = *(_QWORD *)*result + 96;
  result[1] = a2;
  return result;
}

{
  *result = *(_QWORD *)*result + 112;
  result[1] = a2;
  return result;
}

uint64_t llvm::msgpack::Document::readFromBlob(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(uint64_t, char *, __int128 *, uint64_t *), uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[6];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[38];

  v63[36] = *MEMORY[0x1E0C80C00];
  v53[0] = a2;
  v53[1] = a3;
  v53[2] = "MsgPack";
  v53[3] = 7;
  v53[4] = a2;
  v53[5] = a2 + a3;
  v61 = v63;
  v62 = 0x400000000;
  if (a4)
  {
    sub_1C4FE2284(a1, &v56);
    *(_OWORD *)(a1 + 72) = v56;
    v8 = v57;
    *(_QWORD *)(a1 + 88) = v57;
    v56 = *(_OWORD *)(a1 + 72);
    v57 = v8;
    v58 = xmmword_1C640F7C0;
    v59 = 0;
    v60 = 0;
    v9 = sub_1C4FE3640((uint64_t)&v61, (unint64_t)&v56);
    v10 = (char *)v61 + 72 * v62;
    *(_OWORD *)v10 = *(_OWORD *)v9;
    v12 = *(_OWORD *)(v9 + 32);
    v11 = *(_OWORD *)(v9 + 48);
    v13 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)v10 + 8) = *(_QWORD *)(v9 + 64);
    *((_OWORD *)v10 + 2) = v12;
    *((_OWORD *)v10 + 3) = v11;
    *((_OWORD *)v10 + 1) = v13;
    LODWORD(v62) = v62 + 1;
  }
  while (2)
  {
    LOBYTE(v50) = 0;
    v51 = 0;
    llvm::msgpack::Reader::read((uint64_t)v53, &v50, &v56);
    if ((BYTE8(v56) & 1) != 0)
    {
      v42 = v56;
      *(_QWORD *)&v56 = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      if ((_DWORD)v62 == 1)
        v40 = a4;
      else
        v40 = 0;
      goto LABEL_41;
    }
    v14 = a1 + 128;
    switch(LOBYTE(v50))
    {
      case 0:
        v49 = v51;
        v14 = a1 + 96;
        goto LABEL_14;
      case 1:
        v49 = v51;
        v14 = a1 + 112;
        goto LABEL_14;
      case 2:
        goto LABEL_14;
      case 3:
        LOBYTE(v49) = v51;
        v14 = a1 + 144;
        goto LABEL_14;
      case 4:
        v49 = v51;
        v14 = a1 + 160;
        goto LABEL_14;
      case 5:
        v6 = v52;
        v49 = v51;
        v14 = a1 + 176;
        goto LABEL_14;
      case 7:
        sub_1C4FE2284(a1, &v56);
        goto LABEL_13;
      case 8:
        sub_1C4FE2440(a1, &v56);
LABEL_13:
        v49 = *((_QWORD *)&v56 + 1);
        v14 = v56;
        v6 = v57;
LABEL_14:
        v15 = v62;
        v16 = (char *)(a1 + 72);
        if (!(_DWORD)v62)
          goto LABEL_21;
        v17 = (char *)v61;
        v18 = (char *)v61 + 72 * v62;
        v20 = (uint64_t)(v18 - 72);
        v19 = *((_QWORD *)v18 - 9);
        v21 = *(unsigned __int8 *)(v19 + 8);
        if (v21 == 8)
          goto LABEL_19;
        if (v21 != 7)
        {
          sub_1C4FE2440(*(_QWORD *)v19, &v56);
          v23 = v56;
          *(_QWORD *)(v20 + 16) = v57;
          *(_OWORD *)v20 = v23;
          v17 = (char *)v61;
          v15 = v62;
LABEL_19:
          v24 = &v17[72 * v15];
          v16 = (char *)*((_QWORD *)v24 - 4);
          if (v16)
          {
            *((_QWORD *)v24 - 4) = 0;
            ++*((_QWORD *)v24 - 6);
            goto LABEL_21;
          }
          v38 = v49;
          *((_QWORD *)v24 - 3) = v14;
          *((_QWORD *)v24 - 2) = v38;
          *((_QWORD *)v24 - 1) = v6;
          *(_QWORD *)&v47 = v14;
          *((_QWORD *)&v47 + 1) = v38;
          v48 = v6;
          v39 = llvm::msgpack::MapDocNode::operator[](v20, &v47);
          v36 = v62;
          *((_QWORD *)v61 + 9 * v62 - 4) = v39;
LABEL_39:
          if (!v36)
            goto LABEL_40;
          continue;
        }
        v22 = *((_QWORD *)v18 - 6);
        *((_QWORD *)v18 - 6) = v22 + 1;
        v16 = llvm::msgpack::ArrayDocNode::operator[](v20, v22);
LABEL_21:
        if (*(_QWORD *)v16 && *(_BYTE *)(*(_QWORD *)v16 + 8) != 10)
        {
          v27 = a1 + 128;
          if ((_DWORD)v62)
          {
            v28 = (char *)v61 + 72 * v62;
            v29 = *((_QWORD *)v28 - 3);
            v27 = a1 + 128;
            if (v29)
            {
              v27 = a1 + 128;
              if (*(_BYTE *)(v29 + 8) != 10)
              {
                v46 = *((_OWORD *)v28 - 1);
                v27 = *((_QWORD *)v28 - 3);
              }
            }
          }
          v55 = v46;
          *(_QWORD *)&v56 = v14;
          *((_QWORD *)&v56 + 1) = v49;
          v57 = v6;
          v54 = v27;
          v25 = a5(a6, v16, &v56, &v54);
          if ((v25 & 0x80000000) != 0)
          {
LABEL_49:
            v40 = 0;
            goto LABEL_41;
          }
          v14 = *(_QWORD *)v16;
        }
        else
        {
          v25 = 0;
          v26 = v49;
          *(_QWORD *)v16 = v14;
          *((_QWORD *)v16 + 1) = v26;
          *((_QWORD *)v16 + 2) = v6;
        }
        if (*(unsigned __int8 *)(v14 + 8) - 7 < 2)
        {
          v30 = *((_QWORD *)v16 + 2);
          v56 = *(_OWORD *)v16;
          v57 = v30;
          *(_QWORD *)&v58 = v25;
          *((_QWORD *)&v58 + 1) = v51 + v25;
          v59 = 0;
          v60 = 0;
          v31 = sub_1C4FE3640((uint64_t)&v61, (unint64_t)&v56);
          v32 = (char *)v61 + 72 * v62;
          *(_OWORD *)v32 = *(_OWORD *)v31;
          v34 = *(_OWORD *)(v31 + 32);
          v33 = *(_OWORD *)(v31 + 48);
          v35 = *(_OWORD *)(v31 + 16);
          *((_QWORD *)v32 + 8) = *(_QWORD *)(v31 + 64);
          *((_OWORD *)v32 + 2) = v34;
          *((_OWORD *)v32 + 3) = v33;
          *((_OWORD *)v32 + 1) = v35;
          v36 = v62 + 1;
          LODWORD(v62) = v36;
          if (!v36)
            goto LABEL_40;
LABEL_34:
          while (1)
          {
            v37 = (char *)v61 + 72 * v36;
            if (*((_QWORD *)v37 - 4) || *((_QWORD *)v37 - 6) != *((_QWORD *)v37 - 5))
              goto LABEL_39;
            LODWORD(v62) = --v36;
            if (!v36)
              goto LABEL_40;
          }
        }
        v36 = v62;
        if ((_DWORD)v62)
          goto LABEL_34;
LABEL_40:
        v40 = 1;
LABEL_41:
        if (v61 != v63)
          free(v61);
        return v40;
      default:
        goto LABEL_49;
    }
  }
}

void llvm::msgpack::Document::writeToBlob(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  __asm { BR              X9 }
}

void sub_1C4FE2D60(__n128 a1)
{
  char *v1;
  unsigned int v2;
  char v3;
  unsigned int v4;
  char *v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  __int128 v13;
  uint64_t v14;
  llvm::raw_ostream *v15[5];
  uint64_t v16;
  int v17;
  char *v18;
  int v19;

  llvm::msgpack::Writer::write(v15, a1.n128_u64[1]);
  v4 = v19;
  if (!v19)
    goto LABEL_21;
  while (1)
  {
    v5 = &v18[v4 * (unint64_t)v2];
    v6 = *((_QWORD *)v5 - 6);
    v7 = *(unsigned __int8 *)(v6 + 8);
    if (v7 == 8)
    {
      if (*((_QWORD *)v5 - 3) != *((_QWORD *)v5 - 5) + 8)
        goto LABEL_12;
      goto LABEL_8;
    }
    if (v7 != 7)
    {
      sub_1C4FE2284(*(_QWORD *)v6, &v13);
      v8 = v13;
      *((_QWORD *)v5 - 4) = v14;
      *((_OWORD *)v5 - 3) = v8;
      v4 = v19;
    }
    if (*((_QWORD *)v5 - 2) != *(_QWORD *)(*((_QWORD *)v5 - 5) + 8))
      break;
LABEL_8:
    v19 = --v4;
    if (!v4)
      goto LABEL_21;
  }
  if (v4)
  {
    v5 = &v18[v4 * (unint64_t)v2];
    if (*(_BYTE *)(*((_QWORD *)v5 - 6) + 8) == 8)
    {
LABEL_12:
      if (*(v5 - 8))
      {
        *(v5 - 8) = 0;
      }
      else
      {
        v9 = *(_QWORD **)(*((_QWORD *)v5 - 3) + 8);
        v10 = (_QWORD *)*((_QWORD *)v5 - 3);
        if (v9)
        {
          do
          {
            v11 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v10[2];
            v12 = *v11 == (_QWORD)v10;
            v10 = v11;
          }
          while (!v12);
        }
        *((_QWORD *)v5 - 3) = v11;
        *(v5 - 8) = v3;
      }
    }
    else
    {
      *((_QWORD *)v5 - 2) += 24;
    }
    JUMPOUT(0x1C4FE2D48);
  }
LABEL_21:
  if (v18 != v1)
    free(v18);
  v15[3] = (llvm::raw_ostream *)off_1E81A6E70;
  if (v17 == 1 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8077774924);
}

void sub_1C4FE303C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C4FE307C(char **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (a1[1] - *a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v10 = &v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v11;
  v12 = v9 + 8;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      v17 = v18;
      *(_QWORD *)v16 = 0;
      if (v18)
      {
        sub_1C4FE319C(v17, *(_QWORD **)(v17 + 8));
        MEMORY[0x1CAA32FC0](v17, 0x1020C4062D53EE8);
      }
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_1C4FE319C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1C4FE319C(a1, *a2);
    sub_1C4FE319C(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_1C4FE31DC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_1C4FE3254(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1C4FE3254(a2, v5 + 4))
    return v2;
  return v5;
}

BOOL sub_1C4FE3254(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(unsigned __int8 *)(v2 + 8);
  if ((_DWORD)v3 == 10)
    return 0;
  v5 = *a1;
  if (*a1 == v2)
    __asm { BR              X11 }
  if (!v5)
    return 1;
  v6 = *(unsigned __int8 *)(v5 + 8);
  return v6 == 10 || v6 < v3;
}

void sub_1C4FE331C()
{
  JUMPOUT(0x1C4FE3278);
}

void sub_1C4FE3330()
{
  JUMPOUT(0x1C4FE32A4);
}

void sub_1C4FE3340()
{
  JUMPOUT(0x1C4FE32A4);
}

void sub_1C4FE3350()
{
  JUMPOUT(0x1C4FE3278);
}

_OWORD *sub_1C4FE3364(uint64_t a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;

  v6 = (void **)sub_1C4FE3418(a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = operator new(0x50uLL);
    v9 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v9;
    *((_QWORD *)v7 + 7) = 0;
    v10 = v14;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v8 = v7;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

_QWORD *sub_1C4FE3418(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!sub_1C4FE3254(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1C4FE3254(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_1C4FE34A8(void **a1, unint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        v15 = *a3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[24 * v8];
    v17 = &v16[24 * a2];
    v18 = 24 * a2;
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_QWORD *)v19 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v19 = v20;
      v19 += 24;
      v18 -= 24;
    }
    while (v18);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = &v12[24 * v11];
    if (v7)
      operator delete(v7);
  }
}

unint64_t sub_1C4FE3640(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 72 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 72);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 72);
    }
  }
  return v2;
}

unint64_t sub_1C4FE36B8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 48);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 48);
    }
  }
  return v2;
}

void llvm::msgpack::DocNode::toString(llvm::msgpack::DocNode *this)
{
  __asm { BR              X11 }
}

void sub_1C4FE379C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  uint64_t v5;
  int v6;
  __int128 *v7;

  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v4, *(_QWORD *)(a1 + 8));
  if (*((char *)v7 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v1, *(void **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v3 = *v7;
    *(_QWORD *)(v1 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v1 = v3;
  }
  v4 = off_1E81A6E70;
  if (v6 == 1 && v5)
    MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924);
  if (*(char *)(v2 - 17) < 0)
    operator delete(*(void **)(v2 - 40));
}

const char *llvm::msgpack::DocNode::fromString(uint64_t a1, void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  char v8;
  const char *v9;
  BOOL v10;
  char v13;
  uint64_t v15;
  _QWORD *v16;
  const void *p_p;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 v38;
  char v39;
  _BOOL4 v40;
  const void *v41;
  void *__p;
  size_t v43;
  uint64_t v44;
  __int16 v45;

  v8 = 0;
  switch(a5)
  {
    case 0:
      goto LABEL_44;
    case 1:
    case 2:
    case 3:
      goto LABEL_25;
    case 4:
      if (*(_DWORD *)a4 != 1953392929)
      {
        if (*(_DWORD *)a4 == 1818848801)
        {
          *(_QWORD *)a1 = **(_QWORD **)a1 + 128;
          return "";
        }
LABEL_25:
        __p = 0;
        v43 = 0;
        v44 = 0;
        v9 = (const char *)llvm::yaml::ScalarTraits<std::string,void>::input(a2, a3, 0, (uint64_t)&__p);
        if (!v15)
        {
          v16 = **(_QWORD ***)a1;
          if (v44 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v44 >= 0)
            v18 = HIBYTE(v44) & 0x7F;
          else
            v18 = v43;
          v19 = operator new[]();
          v20 = v19;
          v22 = (uint64_t *)v16[7];
          v21 = v16[8];
          if ((unint64_t)v22 >= v21)
          {
            v41 = p_p;
            v24 = (_QWORD *)v16[6];
            v25 = v22 - v24;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 61)
              abort();
            v27 = v21 - (_QWORD)v24;
            if (v27 >> 2 > v26)
              v26 = v27 >> 2;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
              v28 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              if (v28 >> 61)
                sub_1C4764EE4();
              v29 = (char *)operator new(8 * v28);
            }
            else
            {
              v29 = 0;
            }
            v30 = (uint64_t *)&v29[8 * v25];
            v31 = &v29[8 * v28];
            *v30 = v20;
            v23 = v30 + 1;
            if (v22 == v24)
            {
              v16[6] = v30;
              v16[7] = v23;
              v16[8] = v31;
              p_p = v41;
            }
            else
            {
              p_p = v41;
              do
              {
                v32 = *--v22;
                *v22 = 0;
                *--v30 = v32;
              }
              while (v22 != v24);
              v22 = (uint64_t *)v16[6];
              v33 = (uint64_t *)v16[7];
              v16[6] = v30;
              v16[7] = v23;
              v16[8] = v31;
              while (v33 != v22)
              {
                v35 = *--v33;
                v34 = v35;
                *v33 = 0;
                if (v35)
                  MEMORY[0x1CAA32F9C](v34, 0x1000C8077774924);
              }
            }
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v22 = v19;
            v23 = v22 + 1;
          }
          v16[7] = v23;
          memcpy((void *)*(v23 - 1), p_p, v18);
          v36 = *(_QWORD *)(v16[7] - 8);
          *(_QWORD *)a1 = v16 + 22;
          *(_QWORD *)(a1 + 8) = v36;
          *(_QWORD *)(a1 + 16) = v18;
        }
        if (SHIBYTE(v44) < 0)
          operator delete(__p);
        return v9;
      }
      v8 = 1;
LABEL_44:
      *(_QWORD *)a1 = **(_QWORD **)a1 + 112;
      *(_QWORD *)(a1 + 8) = 0;
      __p = 0;
      if ((llvm::getAsUnsignedInteger((unsigned __int8 *)a2, a3, 0, (unint64_t *)&__p) & 1) == 0
        || (*(_QWORD *)a1 = **(_QWORD **)a1 + 96,
            *(_QWORD *)(a1 + 8) = 0,
            __p = 0,
            (llvm::getAsSignedInteger((uint64_t)a2, a3, 0, (unint64_t *)&__p) & 1) == 0))
      {
        v9 = 0;
        *(_QWORD *)(a1 + 8) = __p;
        return v9;
      }
      if ((v8 & 1) != 0)
        return "invalid number";
      v13 = 0;
LABEL_65:
      *(_QWORD *)a1 = **(_QWORD **)a1 + 144;
      *(_BYTE *)(a1 + 8) = 0;
      v38 = llvm::yaml::parseBool((char *)a2, a3);
      if (v38 >= 0x100u)
      {
        v9 = 0;
        *(_BYTE *)(a1 + 8) = v38;
        return v9;
      }
      if ((v13 & 1) != 0)
        return "invalid BOOLean";
      v39 = 0;
LABEL_71:
      *(_QWORD *)a1 = **(_QWORD **)a1 + 160;
      *(_QWORD *)(a1 + 8) = 0;
      v45 = 261;
      __p = a2;
      v43 = a3;
      v40 = sub_1C6386234((unsigned __int8 *)&__p, (double *)(a1 + 8));
      if (v40)
        v9 = 0;
      else
        v9 = "invalid floating point number";
      if ((v39 & 1) == 0 && !v40)
        goto LABEL_25;
      return v9;
    case 5:
      if (*(_DWORD *)a4 != 1869570593 || *(_BYTE *)(a4 + 4) != 108)
        goto LABEL_25;
      v13 = 1;
      goto LABEL_65;
    case 6:
      if (*(_DWORD *)a4 != 1869375009 || *(_WORD *)(a4 + 4) != 29793)
        goto LABEL_25;
      v39 = 1;
      goto LABEL_71;
    default:
      if (a5 != 21)
        goto LABEL_25;
      v10 = *(_QWORD *)a4 == 0x6C6D61793A676174 && *(_QWORD *)(a4 + 8) == 0x3030322C67726F2ELL;
      if (!v10 || *(_QWORD *)(a4 + 13) != 0x7274733A32303032)
        goto LABEL_25;
      v8 = 0;
      goto LABEL_44;
  }
}

void llvm::msgpack::Document::toYAML(llvm::msgpack::Document *this, llvm::raw_ostream *a2)
{
  _QWORD v3[3];
  int v4;
  void *v5;
  uint64_t v6;
  _BYTE v7[80];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3[0] = &off_1E81A6C18;
  v3[1] = 0;
  v3[2] = a2;
  v4 = 70;
  v5 = v7;
  v6 = 0x800000000;
  memset(&v7[32], 0, 48);
  llvm::yaml::Output::beginDocuments((llvm::yaml::Output *)v3);
  sub_1C4FE3E88((uint64_t)v3, (uint64_t)this + 72);
  llvm::yaml::Output::output((uint64_t)v3, "\n...\n", 5uLL);
  v3[0] = &off_1E81A6C18;
  if (v5 != v7)
    free(v5);
}

BOOL llvm::msgpack::Document::fromYAML(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL8 v4;
  llvm::yaml::Stream *v6[13];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 72) = a1 + 256;
  v3 = a1 + 72;
  llvm::yaml::Input::Input((uint64_t)v6, a2, a3, 0, 0, 0);
  if (llvm::yaml::Input::setCurrentDocument(v6))
    sub_1C4FE3E88((uint64_t)v6, v3);
  v4 = v7 == 0;
  llvm::yaml::Input::~Input((llvm::yaml::Input *)v6);
  return v4;
}

void sub_1C4FE3E88(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  const char *v6;
  size_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  void **v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  void **v18;
  void **v19;
  size_t v20;
  void *v21;
  unsigned __int8 **v22;
  unsigned __int8 **p_dst;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  unint64_t i;
  char *v29;
  void **v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  void **v35;
  size_t v36;
  int v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t mustQuote;
  void *__p[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int v51;
  void **v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  void *v59[2];
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  void **v63;
  void **v64;
  char v65;
  char *__dst;
  size_t v67;
  int64_t v68;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
    if (v4 == 8)
    {
LABEL_14:
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
      if (v8)
      {
        if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 8)
        {
          sub_1C4FE2440(**(_QWORD **)a2, &v53);
          *(_OWORD *)a2 = v53;
          *(_QWORD *)(a2 + 16) = v54;
        }
        v9 = *(_QWORD **)(a2 + 8);
        v12 = (_QWORD *)*v9;
        v10 = v9 + 1;
        v11 = v12;
        if (v12 != v10)
        {
          do
          {
            v13 = *((_OWORD *)v11 + 3);
            v53 = *((_OWORD *)v11 + 2);
            v54 = v13;
            v55 = *((_OWORD *)v11 + 4);
            llvm::msgpack::DocNode::toString((llvm::msgpack::DocNode *)&v53);
            if (v46 >= 0)
              v14 = __p;
            else
              v14 = (void **)__p[0];
            sub_1C4FE4A18(a1, (uint64_t)v14, (uint64_t)&v54 + 8);
            if (SHIBYTE(v46) < 0)
              operator delete(__p[0]);
            v15 = (_QWORD *)v11[1];
            if (v15)
            {
              do
              {
                v16 = v15;
                v15 = (_QWORD *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v16 = (_QWORD *)v11[2];
                v17 = *v16 == (_QWORD)v11;
                v11 = v16;
              }
              while (!v17);
            }
            v11 = v16;
          }
          while (v16 != v10);
        }
LABEL_29:
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
        return;
      }
      (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 136))(&v63, a1);
      v18 = v63;
      v19 = v64;
      if (v63 == v64)
      {
LABEL_50:
        if (v18)
        {
          v64 = v18;
          operator delete(v18);
        }
        goto LABEL_29;
      }
      while (1)
      {
        v21 = *v18;
        v20 = (size_t)v18[1];
        __p[0] = (void *)(**(_QWORD **)a2 + 128);
        llvm::msgpack::DocNode::fromString((uint64_t)__p, v21, v20, (uint64_t)"", 0);
        if (v21)
          break;
        __dst = 0;
        v67 = 0;
        p_dst = (unsigned __int8 **)&__dst;
        v68 = 0;
LABEL_44:
        if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 8)
        {
          sub_1C4FE2440(**(_QWORD **)a2, &v53);
          *(_OWORD *)a2 = v53;
          *(_QWORD *)(a2 + 16) = v54;
        }
        v53 = *(_OWORD *)__p;
        *(_QWORD *)&v54 = v46;
        v26 = llvm::msgpack::MapDocNode::operator[](a2, &v53);
        sub_1C4FE4A18(a1, (uint64_t)p_dst, (uint64_t)v26);
        if (SHIBYTE(v68) < 0)
          operator delete(__dst);
        v18 += 2;
        if (v18 == v19)
        {
          v18 = v63;
          goto LABEL_50;
        }
      }
      if (v20 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v20 >= 0x17)
      {
        v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v24 = v20 | 7;
        v25 = v24 + 1;
        v22 = (unsigned __int8 **)operator new(v24 + 1);
        v67 = v20;
        v68 = v25 | 0x8000000000000000;
        __dst = (char *)v22;
      }
      else
      {
        HIBYTE(v68) = v20;
        v22 = (unsigned __int8 **)&__dst;
        if (!v20)
        {
LABEL_41:
          *((_BYTE *)v22 + v20) = 0;
          if (v68 >= 0)
            p_dst = (unsigned __int8 **)&__dst;
          else
            p_dst = (unsigned __int8 **)__dst;
          goto LABEL_44;
        }
      }
      memmove(v22, v21, v20);
      goto LABEL_41;
    }
    v5 = 2 * (v4 == 7);
  }
  else
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  }
  if (v5 == 2)
  {
    if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 7)
    {
      sub_1C4FE2284(**(_QWORD **)a2, &v53);
      *(_OWORD *)a2 = v53;
      *(_QWORD *)(a2 + 16) = v54;
    }
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
      v27 = -1431655765 * ((*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - **(_QWORD **)(a2 + 8)) >> 3);
    if (v27)
    {
      for (i = 0; i != v27; ++i)
      {
        *(_QWORD *)&v53 = 0;
        if ((*(unsigned int (**)(uint64_t, unint64_t, __int128 *))(*(_QWORD *)a1 + 32))(a1, i, &v53))
        {
          v29 = llvm::msgpack::ArrayDocNode::operator[](a2, i);
          sub_1C4FE3E88(a1, v29);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, v53);
        }
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    return;
  }
  if (v5 == 1)
  {
    if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 8)
    {
      sub_1C4FE2440(**(_QWORD **)a2, &v53);
      *(_OWORD *)a2 = v53;
      *(_QWORD *)(a2 + 16) = v54;
    }
    goto LABEL_14;
  }
  if (v5)
    return;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v61[0] = 0;
    v61[1] = 0;
    v62 = 0;
    v59[0] = 0;
    v59[1] = 0;
    v60 = 0;
    DWORD2(v53) = 0;
    BYTE8(v55) = 0;
    v56 = 0;
    *(_QWORD *)&v53 = &unk_1E81A7208;
    v58 = v61;
    v57 = 0;
    *(_QWORD *)&v55 = 0;
    v54 = 0uLL;
    LODWORD(__p[1]) = 0;
    v49 = 0;
    v50 = 0;
    __p[0] = &unk_1E81A7208;
    v52 = v59;
    v51 = 0;
    v47 = 0;
    v48 = 0;
    v46 = 0;
    if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 2)
    {
      v6 = "!nil";
      v7 = 4;
    }
    else
    {
      __dst = (char *)(**(_QWORD **)a2 + 128);
      llvm::msgpack::DocNode::toString((llvm::msgpack::DocNode *)a2);
      if (v65 >= 0)
        v35 = (void **)&v63;
      else
        v35 = v63;
      if (v65 >= 0)
        v36 = v65 & 0x7F;
      else
        v36 = (size_t)v64;
      llvm::msgpack::DocNode::fromString((uint64_t)&__dst, v35, v36, (uint64_t)"", 0);
      if (v65 < 0)
        operator delete(v63);
      v37 = __dst[8];
      LODWORD(v38) = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
      if (v37 == (_DWORD)v38 || (v38 = (char)v38, v37 == 1) && !(_DWORD)v38 || !__dst[8] && (_DWORD)v38 == 1)
      {
LABEL_87:
        llvm::msgpack::DocNode::toString((llvm::msgpack::DocNode *)a2);
        if (v68 >= 0)
          v39 = (const char *)&__dst;
        else
          v39 = __dst;
        if (v68 >= 0)
          v40 = HIBYTE(v68) & 0x7F;
        else
          v40 = v67;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v53, v39, v40);
        if (SHIBYTE(v68) < 0)
          operator delete(__dst);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 232))(a1, v52);
        v41 = *((_BYTE *)v58 + 23);
        if (v41 >= 0)
          v42 = (char *)v58;
        else
          v42 = (char *)*v58;
        if (v41 >= 0)
          v43 = v41 & 0x7F;
        else
          v43 = v58[1];
        __dst = v42;
        v67 = v43;
        mustQuote = 0;
        if (((1 << *(_BYTE *)(*(_QWORD *)a2 + 8)) & 0x1B) == 0)
          mustQuote = llvm::yaml::ScalarTraits<FlowStringRef,void>::mustQuote(v42, v43);
        (*(void (**)(uint64_t, char **, uint64_t))(*(_QWORD *)a1 + 216))(a1, &__dst, mustQuote);
        __p[0] = off_1E81A6E70;
        if (v51 == 1 && v46)
          MEMORY[0x1CAA32F9C](v46, 0x1000C8077774924);
        *(_QWORD *)&v53 = off_1E81A6E70;
        if (v57 == 1 && (_QWORD)v54)
          MEMORY[0x1CAA32F9C](v54, 0x1000C8077774924);
        if (SHIBYTE(v60) < 0)
          operator delete(v59[0]);
        if (SHIBYTE(v62) < 0)
        {
          v34 = (void *)v61[0];
          goto LABEL_109;
        }
        return;
      }
      v6 = off_1E813E950[v38];
      v7 = qword_1C85F92A0[v38];
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)__p, v6, v7);
    goto LABEL_87;
  }
  __p[0] = 0;
  __p[1] = 0;
  v46 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 232))(a1, __p);
  __dst = 0;
  v67 = 0;
  (*(void (**)(uint64_t, char **, _QWORD))(*(_QWORD *)a1 + 216))(a1, &__dst, 0);
  if (v46 >= 0)
    v30 = __p;
  else
    v30 = (void **)__p[0];
  if (v46 >= 0)
    v31 = HIBYTE(v46) & 0x7F;
  else
    v31 = (uint64_t)__p[1];
  v32 = llvm::msgpack::DocNode::fromString(a2, __dst, v67, (uint64_t)v30, v31);
  if (v33)
  {
    LOWORD(v55) = 261;
    *(_QWORD *)&v53 = v32;
    *((_QWORD *)&v53 + 1) = v33;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 248))(a1, &v53);
  }
  if (SHIBYTE(v46) < 0)
  {
    v34 = __p[0];
LABEL_109:
    operator delete(v34);
  }
}

uint64_t llvm::yaml::ScalarTraits<FlowStringRef,void>::mustQuote(char *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v3;
  char *v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  int v14;

  if (a2)
  {
    v3 = a2;
    v4 = a1;
    v5 = *a1;
    v6 = 1;
    if ((v5 - 9) >= 5 && v5 != 32)
    {
      v14 = a1[a2 - 1];
      if ((v14 - 9) >= 5)
        v6 = v14 == 32;
    }
    v7 = sub_1C61CFD10(a1, a2);
    v8 = sub_1C61CFD78((uint64_t)v4, v3);
    v9 = sub_1C4FE4760(v4, v3);
    LODWORD(v11) = v9 || v8 || v7 || v6;
    if (v10)
      v11 = 1;
    else
      v11 = v11;
    while (1)
    {
      v12 = *v4;
      if (v12 - 48 < 0xA || (v12 & 0xFFFFFFDF) - 65 < 0x1A)
        goto LABEL_25;
      result = 2;
      if (v12 <= 0x2E)
      {
        if (((1 << v12) & 0x700100000200) != 0)
          goto LABEL_25;
        if (((1 << v12) & 0x2400) != 0)
          return result;
      }
      if (v12 - 94 >= 2)
      {
        if (v12 == 127 || v12 < 0x20)
          return result;
        v11 = (v12 & 0x80u) == 0 ? 1 : v11;
        if ((v12 & 0x80) != 0)
          return result;
      }
LABEL_25:
      ++v4;
      result = v11;
      if (!--v3)
        return result;
    }
  }
  return 1;
}

BOOL sub_1C4FE4760(char *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  char *v4;
  unint64_t v5;
  int v6;
  unint64_t first_not_of;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int v14;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;

  if (!a2)
    return 0;
  if (a2 == 4)
  {
    if (*(_DWORD *)a1 == 1851878958 || *(_DWORD *)a1 == 1314999854 || *(_DWORD *)a1 == 1312902702)
      return 1;
    goto LABEL_11;
  }
  if (a2 != 1)
  {
LABEL_11:
    v3 = *a1;
    goto LABEL_12;
  }
  v2 = 0;
  v3 = *a1;
  if (v3 == 43 || v3 == 45)
    return v2;
LABEL_12:
  if (v3 == 45 || v3 == 43)
  {
    v4 = a1 + 1;
    v5 = a2 - 1;
  }
  else
  {
    v4 = a1;
    v5 = a2;
  }
  if (v5 == 4 && (*(_DWORD *)v4 == 1718511918 || *(_DWORD *)v4 == 1718503726 || *(_DWORD *)v4 == 1179535662))
    return 1;
  if (a2 < 2)
    goto LABEL_23;
  if (*(_WORD *)a1 == 28464)
  {
    if (a2 < 3)
      return 0;
    v18 = a1 + 2;
    v19 = a2 - 2;
    v16 = "01234567";
    v17 = 8;
    return llvm::StringRef::find_first_not_of(&v18, (unsigned __int8 *)v16, v17, 0) == -1;
  }
  if (*(_WORD *)a1 == 30768)
  {
    if (a2 < 3)
      return 0;
    v18 = a1 + 2;
    v19 = a2 - 2;
    v16 = "0123456789abcdefABCDEF";
    v17 = 22;
    return llvm::StringRef::find_first_not_of(&v18, (unsigned __int8 *)v16, v17, 0) == -1;
  }
LABEL_23:
  if (!v5)
    goto LABEL_29;
  v2 = 0;
  v6 = *v4;
  if (v6 != 101 && v6 != 69)
  {
    if (v6 == 46 && (v5 == 1 || !memchr("0123456789", v4[1], 0xBuLL)))
      return 0;
LABEL_29:
    v18 = v4;
    v19 = v5;
    first_not_of = llvm::StringRef::find_first_not_of(&v18, "0123456789", 10, 0);
    v8 = first_not_of;
    if (first_not_of >= v5)
      first_not_of = v5;
    if (v5 > v8)
    {
      v9 = (unsigned __int8 *)&v4[first_not_of];
      v10 = v4[first_not_of];
      if (v10 == 101 || v10 == 69)
      {
LABEL_37:
        v12 = v5 + ~first_not_of;
        if (v12)
        {
          v13 = v9 + 1;
          v14 = v9[1];
          if (v14 != 45 && v14 != 43)
            goto LABEL_42;
          if (--v12)
          {
            v13 = v9 + 2;
LABEL_42:
            v18 = (char *)v13;
            v19 = v12;
            return v12 <= llvm::StringRef::find_first_not_of(&v18, "0123456789", 10, 0);
          }
        }
        return 0;
      }
      if (v10 != 46)
        return 0;
      v5 += ~first_not_of;
      v11 = v9 + 1;
      v18 = (char *)(v9 + 1);
      v19 = v5;
      first_not_of = llvm::StringRef::find_first_not_of(&v18, "0123456789", 10, 0);
      if (v5 > first_not_of)
      {
        v9 = &v11[first_not_of];
        if ((v11[first_not_of] | 0x20) != 0x65)
          return 0;
        goto LABEL_37;
      }
    }
    return 1;
  }
  return v2;
}

uint64_t sub_1C4FE4A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  uint64_t v7;

  v7 = 0;
  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 1, 0, &v6, &v7);
  if ((_DWORD)result)
  {
    sub_1C4FE3E88(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7);
  }
  return result;
}

__n128 llvm::msgpack::Reader::Reader(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  uint64_t v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 40) = v4;
  return result;
}

{
  __n128 result;
  __int128 v3;
  uint64_t v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 40) = v4;
  return result;
}

_QWORD *llvm::msgpack::Reader::Reader(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  result[2] = "MsgPack";
  result[3] = 7;
  result[4] = a2;
  result[5] = a2 + a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  result[2] = "MsgPack";
  result[3] = 7;
  result[4] = a2;
  result[5] = a2 + a3;
  return result;
}

void llvm::msgpack::Reader::read(uint64_t a1@<X0>, double *a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned __int8 *v11;
  const std::error_category *v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const std::error_category *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  _QWORD v25[4];
  __int16 v26;

  v5 = *(unsigned __int8 **)(a1 + 32);
  v4 = *(unsigned __int8 **)(a1 + 40);
  if (v5 == v4)
  {
    a3[8] &= ~1u;
    *a3 = 0;
    return;
  }
  v6 = (unsigned int *)(v5 + 1);
  *(_QWORD *)(a1 + 32) = v5 + 1;
  v7 = *v5;
  switch(*v5)
  {
    case 0xC0u:
      *(_BYTE *)a2 = 2;
      goto LABEL_70;
    case 0xC2u:
      *(_BYTE *)a2 = 3;
      *((_BYTE *)a2 + 8) = 0;
      goto LABEL_70;
    case 0xC3u:
      *(_BYTE *)a2 = 3;
      *((_BYTE *)a2 + 8) = 1;
      goto LABEL_60;
    case 0xC4u:
      v20 = 6;
      goto LABEL_38;
    case 0xC5u:
      v21 = 6;
      goto LABEL_40;
    case 0xC6u:
      v9 = 6;
      goto LABEL_53;
    case 0xC7u:
      *(_BYTE *)a2 = 9;
      if (v4 == (unsigned __int8 *)v6)
        goto LABEL_42;
      v10 = v5[1];
      v11 = v5 + 2;
      goto LABEL_64;
    case 0xC8u:
      *(_BYTE *)a2 = 9;
      if ((unint64_t)(v4 - (unsigned __int8 *)v6) <= 1)
        goto LABEL_42;
      v10 = bswap32(*(unsigned __int16 *)(v5 + 1)) >> 16;
      v11 = v5 + 3;
      goto LABEL_64;
    case 0xC9u:
      *(_BYTE *)a2 = 9;
      if ((unint64_t)(v4 - (unsigned __int8 *)v6) <= 3)
      {
LABEL_42:
        v12 = std::generic_category();
        v13 = (_QWORD *)operator new();
        v14 = (uint64_t)v13;
        v15 = "Invalid Ext with invalid length";
        goto LABEL_49;
      }
      v10 = bswap32(*(_DWORD *)(v5 + 1));
      v11 = v5 + 5;
LABEL_64:
      *(_QWORD *)(a1 + 32) = v11;
      v19 = (uint64_t)a3;
LABEL_65:
      llvm::msgpack::Reader::createExt(a1, (uint64_t)a2, v10, v19);
      return;
    case 0xCAu:
      *(_BYTE *)a2 = 4;
      if ((unint64_t)(v4 - (unsigned __int8 *)v6) <= 3)
      {
        v12 = std::generic_category();
        v13 = (_QWORD *)operator new();
        v14 = (uint64_t)v13;
        v15 = "Invalid Float32 with insufficient payload";
        goto LABEL_49;
      }
      a2[1] = COERCE_FLOAT(bswap32(*v6));
LABEL_68:
      v18 = *(_QWORD *)(a1 + 32) + 4;
      goto LABEL_69;
    case 0xCBu:
      *(_BYTE *)a2 = 4;
      if ((unint64_t)(v4 - (unsigned __int8 *)v6) > 7)
        goto LABEL_28;
      v12 = std::generic_category();
      v13 = (_QWORD *)operator new();
      v14 = (uint64_t)v13;
      v15 = "Invalid Float64 with insufficient payload";
      goto LABEL_49;
    case 0xCCu:
      *(_BYTE *)a2 = 1;
      if (v4 == (unsigned __int8 *)v6)
        goto LABEL_24;
      *((_QWORD *)a2 + 1) = *(unsigned __int8 *)v6;
      v16 = *(_QWORD *)(a1 + 32) + 1;
      goto LABEL_62;
    case 0xCDu:
      *(_BYTE *)a2 = 1;
      if ((unint64_t)(v4 - (unsigned __int8 *)v6) <= 1)
        goto LABEL_24;
      *((_QWORD *)a2 + 1) = bswap32(*(unsigned __int16 *)v6) >> 16;
      v16 = *(_QWORD *)(a1 + 32) + 2;
      goto LABEL_62;
    case 0xCEu:
      *(_BYTE *)a2 = 1;
      if ((unint64_t)(v4 - (unsigned __int8 *)v6) <= 3)
        goto LABEL_24;
      *((_QWORD *)a2 + 1) = bswap32(*v6);
      v16 = *(_QWORD *)(a1 + 32) + 4;
      goto LABEL_62;
    case 0xCFu:
      *(_BYTE *)a2 = 1;
      if ((unint64_t)(v4 - (unsigned __int8 *)v6) <= 7)
      {
LABEL_24:
        v17 = std::generic_category();
        v14 = operator new();
        v25[0] = "Invalid Int with insufficient payload";
        v26 = 259;
        *(_QWORD *)v14 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v25, (_QWORD *)(v14 + 8));
        *(_QWORD *)(v14 + 32) = 22;
        *(_QWORD *)(v14 + 40) = v17;
        *(_BYTE *)(v14 + 48) = 1;
        goto LABEL_50;
      }
      *((_QWORD *)a2 + 1) = bswap64(*(_QWORD *)v6);
      v16 = *(_QWORD *)(a1 + 32) + 8;
LABEL_62:
      *(_QWORD *)(a1 + 32) = v16;
      a3[8] &= ~1u;
      *a3 = 1;
      return;
    case 0xD0u:
      *(_BYTE *)a2 = 0;
      if (v4 == (unsigned __int8 *)v6)
        goto LABEL_48;
      *((_QWORD *)a2 + 1) = *(char *)v6;
      v18 = *(_QWORD *)(a1 + 32) + 1;
      goto LABEL_69;
    case 0xD1u:
      *(_BYTE *)a2 = 0;
      if ((unint64_t)(v4 - (unsigned __int8 *)v6) <= 1)
        goto LABEL_48;
      *((_QWORD *)a2 + 1) = (__int16)(bswap32(*(unsigned __int16 *)v6) >> 16);
      v18 = *(_QWORD *)(a1 + 32) + 2;
      goto LABEL_69;
    case 0xD2u:
      *(_BYTE *)a2 = 0;
      if ((unint64_t)(v4 - (unsigned __int8 *)v6) <= 3)
        goto LABEL_48;
      *((_QWORD *)a2 + 1) = (int)bswap32(*v6);
      goto LABEL_68;
    case 0xD3u:
      *(_BYTE *)a2 = 0;
      if ((unint64_t)(v4 - (unsigned __int8 *)v6) <= 7)
      {
LABEL_48:
        v12 = std::generic_category();
        v13 = (_QWORD *)operator new();
        v14 = (uint64_t)v13;
        v15 = "Invalid Int with insufficient payload";
        goto LABEL_49;
      }
LABEL_28:
      *((_QWORD *)a2 + 1) = bswap64(*(_QWORD *)v6);
      v18 = *(_QWORD *)(a1 + 32) + 8;
LABEL_69:
      *(_QWORD *)(a1 + 32) = v18;
      goto LABEL_70;
    case 0xD4u:
      *(_BYTE *)a2 = 9;
      v19 = (uint64_t)a3;
      v10 = 1;
      goto LABEL_65;
    case 0xD5u:
      *(_BYTE *)a2 = 9;
      v19 = (uint64_t)a3;
      v10 = 2;
      goto LABEL_65;
    case 0xD6u:
      *(_BYTE *)a2 = 9;
      v19 = (uint64_t)a3;
      v10 = 4;
      goto LABEL_65;
    case 0xD7u:
      *(_BYTE *)a2 = 9;
      v19 = (uint64_t)a3;
      v10 = 8;
      goto LABEL_65;
    case 0xD8u:
      *(_BYTE *)a2 = 9;
      v19 = (uint64_t)a3;
      v10 = 16;
      goto LABEL_65;
    case 0xD9u:
      v20 = 5;
LABEL_38:
      *(_BYTE *)a2 = v20;
      sub_1C4FE5190(a3, a1, (uint64_t)a2);
      return;
    case 0xDAu:
      v21 = 5;
LABEL_40:
      *(_BYTE *)a2 = v21;
      sub_1C4FE5268(a3, a1, (uint64_t)a2);
      return;
    case 0xDBu:
      v9 = 5;
LABEL_53:
      *(_BYTE *)a2 = v9;
      sub_1C4FE534C(a3, a1, (uint64_t)a2);
      return;
    case 0xDCu:
      v23 = 7;
      goto LABEL_55;
    case 0xDDu:
      v22 = 7;
      goto LABEL_57;
    case 0xDEu:
      v23 = 8;
LABEL_55:
      *(_BYTE *)a2 = v23;
      sub_1C4FE542C(a3, a1, (uint64_t)a2);
      return;
    case 0xDFu:
      v22 = 8;
LABEL_57:
      *(_BYTE *)a2 = v22;
      sub_1C4FE5510(a3, a1, (uint64_t)a2);
      return;
    default:
      v8 = (char)v7;
      if ((v7 & 0xE0) == 0xE0)
      {
        *(_BYTE *)a2 = 0;
        goto LABEL_7;
      }
      if ((v7 & 0x80) == 0)
      {
        *(_BYTE *)a2 = 1;
        *((_QWORD *)a2 + 1) = v7;
LABEL_60:
        a3[8] &= ~1u;
LABEL_71:
        *a3 = 1;
        return;
      }
      if ((v7 & 0xE0) == 0xA0)
      {
        *(_BYTE *)a2 = 5;
        llvm::msgpack::Reader::createRaw(a1, (uint64_t)a2, v7 & 0x1F, a3);
        return;
      }
      if (((char)v7 & 0xFFFFFFF0) == 0xFFFFFF80)
      {
        v24 = 8;
        goto LABEL_79;
      }
      if ((v7 & 0xF0) == 0x90)
      {
        v24 = 7;
LABEL_79:
        *(_BYTE *)a2 = v24;
        v8 = v7 & 0xF;
LABEL_7:
        *((_QWORD *)a2 + 1) = v8;
LABEL_70:
        a3[8] &= ~1u;
        goto LABEL_71;
      }
      v12 = std::generic_category();
      v13 = (_QWORD *)operator new();
      v14 = (uint64_t)v13;
      v15 = "Invalid first byte";
LABEL_49:
      v25[0] = v15;
      v26 = 259;
      *v13 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v25, v13 + 1);
      *(_QWORD *)(v14 + 32) = 22;
      *(_QWORD *)(v14 + 40) = v12;
      *(_BYTE *)(v14 + 48) = 1;
LABEL_50:
      a3[8] |= 1u;
      *(_QWORD *)a3 = v14;
      return;
  }
}

void sub_1C4FE5190(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  unsigned int v5;
  const std::error_category *v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = *(unsigned __int8 **)(a2 + 32);
  if (*(unsigned __int8 **)(a2 + 40) == v4)
  {
    v6 = std::generic_category();
    v7 = operator new();
    v8 = "Invalid Raw with insufficient payload";
    v9 = 259;
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 22;
    *(_QWORD *)(v7 + 40) = v6;
    *(_BYTE *)(v7 + 48) = 1;
    a1[8] |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    v5 = *v4;
    *(_QWORD *)(a2 + 32) = v4 + 1;
    llvm::msgpack::Reader::createRaw(a2, a3, v5, a1);
  }
}

void sub_1C4FE5268(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v4;
  const std::error_category *v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  __int16 v9;

  v4 = *(unsigned __int16 **)(a2 + 32);
  if (*(_QWORD *)(a2 + 40) - (_QWORD)v4 > 1uLL)
  {
    v7 = bswap32(*v4) >> 16;
    *(_QWORD *)(a2 + 32) = v4 + 1;
    llvm::msgpack::Reader::createRaw(a2, a3, v7, a1);
  }
  else
  {
    v5 = std::generic_category();
    v6 = operator new();
    v8 = "Invalid Raw with insufficient payload";
    v9 = 259;
    *(_QWORD *)v6 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v6 + 8));
    *(_QWORD *)(v6 + 32) = 22;
    *(_QWORD *)(v6 + 40) = v5;
    *(_BYTE *)(v6 + 48) = 1;
    a1[8] |= 1u;
    *(_QWORD *)a1 = v6;
  }
}

void sub_1C4FE534C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  const std::error_category *v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  __int16 v9;

  v4 = *(unsigned int **)(a2 + 32);
  if (*(_QWORD *)(a2 + 40) - (_QWORD)v4 > 3uLL)
  {
    v7 = bswap32(*v4);
    *(_QWORD *)(a2 + 32) = v4 + 1;
    llvm::msgpack::Reader::createRaw(a2, a3, v7, a1);
  }
  else
  {
    v5 = std::generic_category();
    v6 = operator new();
    v8 = "Invalid Raw with insufficient payload";
    v9 = 259;
    *(_QWORD *)v6 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v6 + 8));
    *(_QWORD *)(v6 + 32) = 22;
    *(_QWORD *)(v6 + 40) = v5;
    *(_BYTE *)(v6 + 48) = 1;
    a1[8] |= 1u;
    *(_QWORD *)a1 = v6;
  }
}

void sub_1C4FE542C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v4;
  const std::error_category *v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v4 = *(unsigned __int16 **)(a2 + 32);
  if (*(_QWORD *)(a2 + 40) - (_QWORD)v4 > 1uLL)
  {
    *(_QWORD *)(a3 + 8) = bswap32(*v4) >> 16;
    *(_QWORD *)(a2 + 32) += 2;
    a1[8] &= ~1u;
    *a1 = 1;
  }
  else
  {
    v5 = std::generic_category();
    v6 = operator new();
    v7 = "Invalid Map/Array with invalid length";
    v8 = 259;
    *(_QWORD *)v6 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v7, (_QWORD *)(v6 + 8));
    *(_QWORD *)(v6 + 32) = 22;
    *(_QWORD *)(v6 + 40) = v5;
    *(_BYTE *)(v6 + 48) = 1;
    a1[8] |= 1u;
    *(_QWORD *)a1 = v6;
  }
}

void sub_1C4FE5510(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  const std::error_category *v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v4 = *(unsigned int **)(a2 + 32);
  if (*(_QWORD *)(a2 + 40) - (_QWORD)v4 > 3uLL)
  {
    *(_QWORD *)(a3 + 8) = bswap32(*v4);
    *(_QWORD *)(a2 + 32) += 4;
    a1[8] &= ~1u;
    *a1 = 1;
  }
  else
  {
    v5 = std::generic_category();
    v6 = operator new();
    v7 = "Invalid Map/Array with invalid length";
    v8 = 259;
    *(_QWORD *)v6 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v7, (_QWORD *)(v6 + 8));
    *(_QWORD *)(v6 + 32) = 22;
    *(_QWORD *)(v6 + 40) = v5;
    *(_BYTE *)(v6 + 48) = 1;
    a1[8] |= 1u;
    *(_QWORD *)a1 = v6;
  }
}

void llvm::msgpack::Reader::createExt(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE *v5;
  uint64_t v6;
  const std::error_category *v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  const char *v11;
  __int16 v12;

  v5 = *(_BYTE **)(a1 + 32);
  if (v5 == *(_BYTE **)(a1 + 40))
  {
    v7 = std::generic_category();
    v8 = (_QWORD *)operator new();
    v9 = v8;
    v10 = "Invalid Ext with no type";
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 32) = v5 + 1;
  *(_BYTE *)(a2 + 8) = *v5;
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) - v6 < (unint64_t)a3)
  {
    v7 = std::generic_category();
    v8 = (_QWORD *)operator new();
    v9 = v8;
    v10 = "Invalid Ext with insufficient payload";
LABEL_5:
    v11 = v10;
    v12 = 259;
    *v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v11, v8 + 1);
    v9[4] = 22;
    v9[5] = v7;
    *((_BYTE *)v9 + 48) = 1;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v9;
    return;
  }
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = a3;
  *(_QWORD *)(a1 + 32) += a3;
  *(_BYTE *)(a4 + 8) &= ~1u;
  *(_BYTE *)a4 = 1;
}

void llvm::msgpack::Reader::createRaw(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  const std::error_category *v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) - v5 >= (unint64_t)a3)
  {
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = a3;
    *(_QWORD *)(a1 + 32) += a3;
    a4[8] &= ~1u;
    *a4 = 1;
  }
  else
  {
    v6 = std::generic_category();
    v7 = operator new();
    v8 = "Invalid Raw with insufficient payload";
    v9 = 259;
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 22;
    *(_QWORD *)(v7 + 40) = v6;
    *(_BYTE *)(v7 + 48) = 1;
    a4[8] |= 1u;
    *(_QWORD *)a4 = v7;
  }
}

uint64_t llvm::msgpack::Writer::Writer(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = a3;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = a3;
  return result;
}

llvm::raw_ostream *llvm::msgpack::Writer::writeNil(llvm::raw_ostream **this)
{
  llvm::raw_ostream *v1;
  char v3;

  v1 = *this;
  v3 = -64;
  return llvm::raw_ostream::write(v1, &v3, 1uLL);
}

llvm::raw_ostream *llvm::msgpack::Writer::write(llvm::raw_ostream **this, int a2)
{
  char v2;
  llvm::raw_ostream *v3;
  char v5;

  if (a2)
    v2 = -61;
  else
    v2 = -62;
  v3 = *this;
  v5 = v2;
  return llvm::raw_ostream::write(v3, &v5, 1uLL);
}

llvm::raw_ostream *llvm::msgpack::Writer::write(llvm::raw_ostream **this, unint64_t a2)
{
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  llvm::raw_ostream *v8;
  unsigned int v9;
  __int16 v10;
  llvm::raw_ostream *v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char v16[8];

  if ((a2 & 0x8000000000000000) == 0)
    return llvm::msgpack::Writer::write(this, a2);
  if (a2 < 0xFFFFFFFFFFFFFFE0)
  {
    if (a2 < 0xFFFFFFFFFFFFFF80)
    {
      if (a2 < 0xFFFFFFFFFFFF8000)
      {
        v11 = *this;
        if (a2 < 0xFFFFFFFF80000000)
        {
          v16[0] = -45;
          llvm::raw_ostream::write(v11, v16, 1uLL);
          v6 = *this;
          v14 = bswap64(a2);
          if ((*((_DWORD *)this + 2) - 1) >= 2)
            v15 = v14;
          else
            v15 = a2;
          *(_QWORD *)v16 = v15;
          v7 = 8;
        }
        else
        {
          v16[0] = -46;
          llvm::raw_ostream::write(v11, v16, 1uLL);
          v6 = *this;
          v12 = bswap32(a2);
          if ((*((_DWORD *)this + 2) - 1) >= 2)
            v13 = v12;
          else
            v13 = a2;
          *(_DWORD *)v16 = v13;
          v7 = 4;
        }
      }
      else
      {
        v8 = *this;
        v16[0] = -47;
        llvm::raw_ostream::write(v8, v16, 1uLL);
        v6 = *this;
        v9 = bswap32(a2) >> 16;
        if ((*((_DWORD *)this + 2) - 1) >= 2)
          v10 = v9;
        else
          v10 = a2;
        *(_WORD *)v16 = v10;
        v7 = 2;
      }
      return llvm::raw_ostream::write(v6, v16, v7);
    }
    v5 = *this;
    v16[0] = -48;
    llvm::raw_ostream::write(v5, v16, 1uLL);
  }
  v6 = *this;
  v16[0] = a2;
  v7 = 1;
  return llvm::raw_ostream::write(v6, v16, v7);
}

{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  size_t v6;
  llvm::raw_ostream *v8;
  unsigned int v9;
  __int16 v10;
  llvm::raw_ostream *v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char v16[8];

  if (a2 <= 0x7F)
    goto LABEL_4;
  if (a2 <= 0xFF)
  {
    v4 = *this;
    v16[0] = -52;
    llvm::raw_ostream::write(v4, v16, 1uLL);
LABEL_4:
    v5 = *this;
    v16[0] = a2;
    v6 = 1;
    return llvm::raw_ostream::write(v5, v16, v6);
  }
  if (a2 >> 16)
  {
    v11 = *this;
    if (HIDWORD(a2))
    {
      v16[0] = -49;
      llvm::raw_ostream::write(v11, v16, 1uLL);
      v5 = *this;
      v14 = bswap64(a2);
      if ((*((_DWORD *)this + 2) - 1) >= 2)
        v15 = v14;
      else
        v15 = a2;
      *(_QWORD *)v16 = v15;
      v6 = 8;
    }
    else
    {
      v16[0] = -50;
      llvm::raw_ostream::write(v11, v16, 1uLL);
      v5 = *this;
      v12 = bswap32(a2);
      if ((*((_DWORD *)this + 2) - 1) >= 2)
        v13 = v12;
      else
        v13 = a2;
      *(_DWORD *)v16 = v13;
      v6 = 4;
    }
  }
  else
  {
    v8 = *this;
    v16[0] = -51;
    llvm::raw_ostream::write(v8, v16, 1uLL);
    v5 = *this;
    v9 = bswap32(a2) >> 16;
    if ((*((_DWORD *)this + 2) - 1) >= 2)
      v10 = v9;
    else
      v10 = a2;
    *(_WORD *)v16 = v10;
    v6 = 2;
  }
  return llvm::raw_ostream::write(v5, v16, v6);
}

llvm::raw_ostream *llvm::msgpack::Writer::write(llvm::raw_ostream **this, double a2)
{
  double v4;
  llvm::raw_ostream *v5;
  unsigned int v6;
  llvm::raw_ostream *v7;
  unsigned int v8;
  float v9;
  char *v10;
  size_t v11;
  unint64_t v12;
  double v13;
  char v15;
  float v16;
  char v17;
  char v18[8];

  v4 = fabs(a2);
  v5 = *this;
  if (v4 < 1.17549435e-38 || v4 > 3.40282347e38)
  {
    v17 = -53;
    llvm::raw_ostream::write(v5, &v17, 1uLL);
    v7 = *this;
    *(double *)&v12 = COERCE_DOUBLE(bswap64(*(unint64_t *)&a2));
    if ((*((_DWORD *)this + 2) - 1) >= 2)
      v13 = *(double *)&v12;
    else
      v13 = a2;
    *(double *)v18 = v13;
    v10 = v18;
    v11 = 8;
  }
  else
  {
    v15 = -54;
    llvm::raw_ostream::write(v5, &v15, 1uLL);
    *(float *)&v6 = a2;
    v7 = *this;
    *(float *)&v8 = COERCE_FLOAT(bswap32(v6));
    if ((*((_DWORD *)this + 2) - 1) >= 2)
      v9 = *(float *)&v8;
    else
      v9 = a2;
    v16 = v9;
    v10 = (char *)&v16;
    v11 = 4;
  }
  return llvm::raw_ostream::write(v7, v10, v11);
}

llvm::raw_ostream *llvm::msgpack::Writer::write(uint64_t a1, const char *a2, size_t a3)
{
  llvm::raw_ostream *v6;
  char *v7;
  llvm::raw_ostream *v8;
  size_t v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int16 v21;
  char v22;
  int v23;

  if (a3 <= 0x1F)
  {
    v6 = *(llvm::raw_ostream **)a1;
    v17 = a3 | 0xA0;
    v7 = &v17;
LABEL_6:
    v9 = 1;
    goto LABEL_7;
  }
  if (a3 <= 0xFF && !*(_BYTE *)(a1 + 16))
  {
    v8 = *(llvm::raw_ostream **)a1;
    v18 = -39;
    llvm::raw_ostream::write(v8, &v18, 1uLL);
    v6 = *(llvm::raw_ostream **)a1;
    v19 = a3;
    v7 = &v19;
    goto LABEL_6;
  }
  v12 = *(llvm::raw_ostream **)a1;
  if (a3 >> 16)
  {
    v22 = -37;
    llvm::raw_ostream::write(v12, &v22, 1uLL);
    v6 = *(llvm::raw_ostream **)a1;
    v15 = bswap32(a3);
    if ((*(_DWORD *)(a1 + 8) - 1) >= 2)
      v16 = v15;
    else
      v16 = a3;
    v23 = v16;
    v7 = (char *)&v23;
    v9 = 4;
  }
  else
  {
    v20 = -38;
    llvm::raw_ostream::write(v12, &v20, 1uLL);
    v6 = *(llvm::raw_ostream **)a1;
    v13 = bswap32(a3) >> 16;
    if ((*(_DWORD *)(a1 + 8) - 1) >= 2)
      v14 = v13;
    else
      v14 = a3;
    v21 = v14;
    v7 = (char *)&v21;
    v9 = 2;
  }
LABEL_7:
  llvm::raw_ostream::write(v6, v7, v9);
  v10 = *(llvm::raw_ostream **)a1;
  result = (llvm::raw_ostream *)*((_QWORD *)v10 + 4);
  if (a3 > *((_QWORD *)v10 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(v10, a2, a3);
  if (a3)
  {
    result = (llvm::raw_ostream *)memcpy(result, a2, a3);
    *((_QWORD *)v10 + 4) += a3;
  }
  return result;
}

llvm::raw_ostream *llvm::msgpack::Writer::write(uint64_t a1, uint64_t a2)
{
  size_t v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  char *v7;
  size_t v8;
  llvm::raw_ostream *v9;
  unsigned int v10;
  __int16 v11;
  unsigned int v12;
  int v13;
  char v15;
  char v16;
  char v17;
  __int16 v18;
  char v19;
  char v20[4];

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 > 0xFF)
  {
    v9 = *(llvm::raw_ostream **)a1;
    if (v4 >> 16)
    {
      v19 = -58;
      llvm::raw_ostream::write(v9, &v19, 1uLL);
      v6 = *(llvm::raw_ostream **)a1;
      v12 = bswap32(v4);
      if ((*(_DWORD *)(a1 + 8) - 1) >= 2)
        v13 = v12;
      else
        v13 = v4;
      *(_DWORD *)v20 = v13;
      v7 = v20;
      v8 = 4;
    }
    else
    {
      v17 = -59;
      llvm::raw_ostream::write(v9, &v17, 1uLL);
      v6 = *(llvm::raw_ostream **)a1;
      v10 = bswap32(v4) >> 16;
      if ((*(_DWORD *)(a1 + 8) - 1) >= 2)
        v11 = v10;
      else
        v11 = v4;
      v18 = v11;
      v7 = (char *)&v18;
      v8 = 2;
    }
  }
  else
  {
    v5 = *(llvm::raw_ostream **)a1;
    v15 = -60;
    llvm::raw_ostream::write(v5, &v15, 1uLL);
    v6 = *(llvm::raw_ostream **)a1;
    v16 = v4;
    v7 = &v16;
    v8 = 1;
  }
  llvm::raw_ostream::write(v6, v7, v8);
  return llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, *(const char **)a2, v4);
}

llvm::raw_ostream *llvm::msgpack::Writer::writeArraySize(llvm::raw_ostream **this, unsigned int a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  size_t v6;
  llvm::raw_ostream *v7;
  unsigned int v8;
  __int16 v9;
  unsigned int v10;
  unsigned int v11;
  char v13;
  char v14;
  __int16 v15;
  char v16;
  char v17[4];

  if (a2 > 0xF)
  {
    v7 = *this;
    if (HIWORD(a2))
    {
      v16 = -35;
      llvm::raw_ostream::write(v7, &v16, 1uLL);
      v4 = *this;
      v10 = bswap32(a2);
      if ((*((_DWORD *)this + 2) - 1) >= 2)
        v11 = v10;
      else
        v11 = a2;
      *(_DWORD *)v17 = v11;
      v5 = v17;
      v6 = 4;
    }
    else
    {
      v14 = -36;
      llvm::raw_ostream::write(v7, &v14, 1uLL);
      v4 = *this;
      v8 = bswap32(a2) >> 16;
      if ((*((_DWORD *)this + 2) - 1) >= 2)
        v9 = v8;
      else
        v9 = a2;
      v15 = v9;
      v5 = (char *)&v15;
      v6 = 2;
    }
  }
  else
  {
    v4 = *this;
    v13 = a2 | 0x90;
    v5 = &v13;
    v6 = 1;
  }
  return llvm::raw_ostream::write(v4, v5, v6);
}

llvm::raw_ostream *llvm::msgpack::Writer::writeMapSize(llvm::raw_ostream **this, unsigned int a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  size_t v6;
  llvm::raw_ostream *v7;
  unsigned int v8;
  __int16 v9;
  unsigned int v10;
  unsigned int v11;
  char v13;
  char v14;
  __int16 v15;
  char v16;
  char v17[4];

  if (a2 > 0xF)
  {
    v7 = *this;
    if (HIWORD(a2))
    {
      v16 = -33;
      llvm::raw_ostream::write(v7, &v16, 1uLL);
      v4 = *this;
      v10 = bswap32(a2);
      if ((*((_DWORD *)this + 2) - 1) >= 2)
        v11 = v10;
      else
        v11 = a2;
      *(_DWORD *)v17 = v11;
      v5 = v17;
      v6 = 4;
    }
    else
    {
      v14 = -34;
      llvm::raw_ostream::write(v7, &v14, 1uLL);
      v4 = *this;
      v8 = bswap32(a2) >> 16;
      if ((*((_DWORD *)this + 2) - 1) >= 2)
        v9 = v8;
      else
        v9 = a2;
      v15 = v9;
      v5 = (char *)&v15;
      v6 = 2;
    }
  }
  else
  {
    v4 = *this;
    v13 = a2 | 0x80;
    v5 = &v13;
    v6 = 1;
  }
  return llvm::raw_ostream::write(v4, v5, v6);
}

llvm::raw_ostream *llvm::msgpack::Writer::writeExt(uint64_t a1, char a2, uint64_t a3)
{
  size_t v6;
  llvm::raw_ostream *v7;
  char v8;
  llvm::raw_ostream *v9;
  size_t v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  int v17;
  char v18[4];

  v6 = *(_QWORD *)(a3 + 8);
  switch(v6)
  {
    case 1uLL:
      v7 = *(llvm::raw_ostream **)a1;
      v8 = -44;
      goto LABEL_10;
    case 2uLL:
      v7 = *(llvm::raw_ostream **)a1;
      v8 = -43;
      goto LABEL_10;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      goto LABEL_5;
    case 4uLL:
      v7 = *(llvm::raw_ostream **)a1;
      v8 = -42;
      goto LABEL_10;
    case 8uLL:
      v7 = *(llvm::raw_ostream **)a1;
      v8 = -41;
      goto LABEL_10;
    default:
      if (v6 == 16)
      {
        v7 = *(llvm::raw_ostream **)a1;
        v8 = -40;
LABEL_10:
        v18[0] = v8;
        goto LABEL_11;
      }
LABEL_5:
      if (v6 <= 0xFF)
      {
        v9 = *(llvm::raw_ostream **)a1;
        v18[0] = -57;
        llvm::raw_ostream::write(v9, v18, 1uLL);
        v7 = *(llvm::raw_ostream **)a1;
        v18[0] = v6;
LABEL_11:
        v10 = 1;
        goto LABEL_12;
      }
      v13 = *(llvm::raw_ostream **)a1;
      if (v6 >> 16)
      {
        v18[0] = -55;
        llvm::raw_ostream::write(v13, v18, 1uLL);
        v7 = *(llvm::raw_ostream **)a1;
        v16 = bswap32(v6);
        if ((*(_DWORD *)(a1 + 8) - 1) >= 2)
          v17 = v16;
        else
          v17 = v6;
        *(_DWORD *)v18 = v17;
        v10 = 4;
      }
      else
      {
        v18[0] = -56;
        llvm::raw_ostream::write(v13, v18, 1uLL);
        v7 = *(llvm::raw_ostream **)a1;
        v14 = bswap32(v6) >> 16;
        if ((*(_DWORD *)(a1 + 8) - 1) >= 2)
          v15 = v14;
        else
          v15 = v6;
        *(_WORD *)v18 = v15;
        v10 = 2;
      }
LABEL_12:
      llvm::raw_ostream::write(v7, v18, v10);
      v11 = *(llvm::raw_ostream **)a1;
      v18[0] = a2;
      llvm::raw_ostream::write(v11, v18, 1uLL);
      return llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, *(const char **)a3, v6);
  }
}

const char *llvm::XCOFF::getNameForTracebackTableLanguageId(unsigned int a1)
{
  if (a1 > 0xE)
    return "Unknown";
  else
    return off_1E813EBC8[(char)a1];
}

void llvm::XCOFF::parseParmsType(llvm::XCOFF *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v4;
  int v5;
  __int128 v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35[2];
  void *v36;
  __int128 v37;
  _QWORD v38[5];

  v4 = a3;
  v5 = (int)this;
  v38[4] = *MEMORY[0x1E0C80C00];
  v36 = v38;
  v7 = xmmword_1C677F680;
  v37 = xmmword_1C677F680;
  v8 = a3 + a2;
  if (!(a3 + a2))
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    if (!(_DWORD)this)
      goto LABEL_29;
LABEL_33:
    v35[0] = 22;
    v35[1] = (uint64_t)std::generic_category();
    v34 = "ParmsType encodes can not map to ParmsNum parameters in parseParmsType.";
    sub_1C5DF1730((_BYTE **)&v34, v35, &v33);
    *(_BYTE *)(a4 + 56) |= 1u;
    *(_QWORD *)a4 = v33;
    v33 = 0;
    goto LABEL_34;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v13 != 1)
    {
      if (*((_QWORD *)&v37 + 1) < (unint64_t)(v9 + 2))
      {
        v21 = a2;
        v25 = v4;
        v29 = v7;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v9 + 2, 1);
        a2 = v21;
        v4 = v25;
        v7 = v29;
        v9 = v37;
      }
      *(_WORD *)((char *)v36 + v9) = 8236;
      v9 = v37 + 2;
      *(_QWORD *)&v37 = v37 + 2;
    }
    v15 = v9 + 1;
    if (v5 < 0)
    {
      if ((v5 & 0x40000000) != 0)
      {
        if (*((_QWORD *)&v37 + 1) < v15)
        {
          v23 = a2;
          v27 = v4;
          v31 = v7;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v15, 1);
          a2 = v23;
          v4 = v27;
          v7 = v31;
          v9 = v37;
        }
        *((_BYTE *)v36 + v9) = 100;
      }
      else
      {
        if (*((_QWORD *)&v37 + 1) < v15)
        {
          v22 = a2;
          v26 = v4;
          v30 = v7;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v15, 1);
          a2 = v22;
          v4 = v26;
          v7 = v30;
          v9 = v37;
        }
        *((_BYTE *)v36 + v9) = 102;
      }
      v9 = v37 + 1;
      *(_QWORD *)&v37 = v37 + 1;
      ++v10;
      v16 = 2;
    }
    else
    {
      if (*((_QWORD *)&v37 + 1) < v15)
      {
        v20 = a2;
        v24 = v4;
        v28 = v7;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v15, 1);
        a2 = v20;
        v4 = v24;
        v7 = v28;
        v9 = v37;
      }
      *((_BYTE *)v36 + v9) = 105;
      v9 = v37 + 1;
      *(_QWORD *)&v37 = v37 + 1;
      ++v11;
      v16 = 1;
    }
    v5 <<= v16;
    if (v14 >= v8)
      break;
    v12 += v16;
    v13 = v14 + 1;
  }
  while (v12 < 0x1F);
  if (v14 >= v8)
  {
    if (!v5)
      goto LABEL_29;
    goto LABEL_33;
  }
  if (*((_QWORD *)&v37 + 1) < (unint64_t)(v9 + 5))
  {
    v18 = a2;
    v19 = v4;
    v32 = v7;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v9 + 5, 1);
    a2 = v18;
    v7 = v32;
    v4 = v19;
    v9 = v37;
  }
  v17 = (char *)v36 + v9;
  v17[4] = 46;
  *(_DWORD *)v17 = 774774828;
  v9 = v37 + 5;
  *(_QWORD *)&v37 = v37 + 5;
  if (v5)
    goto LABEL_33;
LABEL_29:
  if (v11 > a2 || v10 > v4)
    goto LABEL_33;
  *(_BYTE *)(a4 + 56) &= ~1u;
  *(_QWORD *)a4 = a4 + 24;
  *(_OWORD *)(a4 + 8) = v7;
  if (v9)
    sub_1C4FE6ED8(a4, (uint64_t)&v36);
LABEL_34:
  if (v36 != v38)
    free(v36);
}

uint64_t llvm::XCOFF::getExtendedTBTableFlagString@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v2;
  _DWORD *v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;

  v2 = this;
  v4 = (_DWORD *)(a2 + 24);
  *(_QWORD *)a2 = a2 + 24;
  *(_OWORD *)(a2 + 8) = xmmword_1C677F680;
  if ((this & 0x80) == 0)
  {
    v5 = 0;
    if ((this & 0x40) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 27) = 540103503;
  *v4 = 1331642964;
  v5 = 7;
  *(_QWORD *)(a2 + 8) = 7;
  if ((this & 0x40) != 0)
  {
LABEL_3:
    v6 = (char *)v4 + v5;
    *(_QWORD *)v6 = *(_QWORD *)"TB_RESERVED ";
    *((_DWORD *)v6 + 2) = 541345110;
    v5 += 12;
    *(_QWORD *)(a2 + 8) = v5;
  }
LABEL_4:
  if ((this & 0x20) != 0)
  {
    if (v5 >= 0x13)
    {
      this = (uint64_t)llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, v4, v5 + 14, 1);
      v7 = *(_DWORD **)a2;
      v5 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v7 = v4;
    }
    qmemcpy((char *)v7 + v5, "TB_SSP_CANARY ", 14);
    v5 = *(_QWORD *)(a2 + 8) + 14;
    *(_QWORD *)(a2 + 8) = v5;
    if ((v2 & 0x10) == 0)
    {
LABEL_6:
      if ((v2 & 8) == 0)
        goto LABEL_7;
      goto LABEL_15;
    }
  }
  else if ((this & 0x10) == 0)
  {
    goto LABEL_6;
  }
  if (*(_QWORD *)(a2 + 16) < v5 + 7)
  {
    this = (uint64_t)llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, v4, v5 + 7, 1);
    v5 = *(_QWORD *)(a2 + 8);
  }
  v8 = (_DWORD *)(*(_QWORD *)a2 + v5);
  *(_DWORD *)((char *)v8 + 3) = 540169039;
  *v8 = 1331642964;
  v5 = *(_QWORD *)(a2 + 8) + 7;
  *(_QWORD *)(a2 + 8) = v5;
  if ((v2 & 8) == 0)
  {
LABEL_7:
    if ((v2 & 1) == 0)
      goto LABEL_21;
    goto LABEL_18;
  }
LABEL_15:
  if (*(_QWORD *)(a2 + 16) < v5 + 11)
  {
    this = (uint64_t)llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, v4, v5 + 11, 1);
    v5 = *(_QWORD *)(a2 + 8);
  }
  v9 = *(_QWORD *)a2 + v5;
  *(_QWORD *)v9 = *(_QWORD *)"TB_EH_INFO ";
  *(_DWORD *)(v9 + 7) = 542066254;
  v5 = *(_QWORD *)(a2 + 8) + 11;
  *(_QWORD *)(a2 + 8) = v5;
  if ((v2 & 1) != 0)
  {
LABEL_18:
    if (*(_QWORD *)(a2 + 16) < v5 + 16)
    {
      this = (uint64_t)llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, v4, v5 + 16, 1);
      v5 = *(_QWORD *)(a2 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a2 + v5) = *(_OWORD *)"TB_LONGTBTABLE2 ";
    v5 = *(_QWORD *)(a2 + 8) + 16;
    *(_QWORD *)(a2 + 8) = v5;
  }
LABEL_21:
  if ((v2 & 6) != 0)
  {
    if (*(_QWORD *)(a2 + 16) < v5 + 8)
    {
      this = (uint64_t)llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, v4, v5 + 8, 1);
      v5 = *(_QWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + v5) = 0x206E776F6E6B6E55;
    v5 = *(_QWORD *)(a2 + 8) + 8;
  }
  *(_QWORD *)(a2 + 8) = v5 - 1;
  return this;
}

void llvm::XCOFF::parseParmsTypeWithVecInfo(llvm::XCOFF *this@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8[2];
  void *v9;
  __int128 v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_1C677F680;
  if (a3 + a2 + a4)
    __asm { BR              X10 }
  if ((_DWORD)this)
  {
    v8[0] = 22;
    v8[1] = (uint64_t)std::generic_category();
    v7 = "ParmsType encodes can not map to ParmsNum parameters in parseParmsTypeWithVecInfo.";
    sub_1C5DF1730((_BYTE **)&v7, v8, &v6);
    *(_BYTE *)(a5 + 56) |= 1u;
    *(_QWORD *)a5 = v6;
    v6 = 0;
  }
  else
  {
    *(_BYTE *)(a5 + 56) &= ~1u;
    *(_QWORD *)a5 = a5 + 24;
    *(_OWORD *)(a5 + 8) = xmmword_1C677F680;
  }
  if (v9 != v11)
    free(v9);
}

void llvm::XCOFF::parseVectorParmsType(llvm::XCOFF *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6[2];
  void *v7;
  __int128 v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  v7 = v9;
  v8 = xmmword_1C677F680;
  if (a2)
    __asm { BR              X10 }
  if ((_DWORD)this)
  {
    v6[0] = 22;
    v6[1] = (uint64_t)std::generic_category();
    v5 = "ParmsType encodes more than ParmsNum parameters in parseVectorParmsType.";
    sub_1C5DF1730((_BYTE **)&v5, v6, &v4);
    *(_BYTE *)(a3 + 56) |= 1u;
    *(_QWORD *)a3 = v4;
    v4 = 0;
  }
  else
  {
    *(_BYTE *)(a3 + 56) &= ~1u;
    *(_QWORD *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = xmmword_1C677F680;
  }
  if (v7 != v9)
    free(v7);
}

uint64_t sub_1C4FE6ED8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v10;
  size_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 24);
    v4 = *(const void **)a2;
    if (v4 == v5)
    {
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a1 + 8);
      if (v7 >= v6)
      {
        if (v6)
          memmove(*(void **)a1, v4, *(_QWORD *)(a2 + 8));
      }
      else
      {
        if (*(_QWORD *)(a1 + 16) < v6)
        {
          *(_QWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v6, 1);
          v7 = 0;
        }
        else if (v7)
        {
          v11 = *(_QWORD *)(a1 + 8);
          memmove(*(void **)a1, v4, v7);
          v7 = v11;
        }
        v8 = *(_QWORD *)(a2 + 8);
        if (v7 != v8)
          memcpy((void *)(*(_QWORD *)a1 + v7), (const void *)(*(_QWORD *)a2 + v7), *(_QWORD *)a2 + v8 - (*(_QWORD *)a2 + v7));
      }
      *(_QWORD *)(a1 + 8) = v6;
    }
    else
    {
      v10 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 24)
      {
        free(v10);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = v5;
    }
    *(_QWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void llvm::checkBitcodeCompatibility(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  char *v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  void **v23;
  void **v24;
  void **v25;
  _BYTE *v26;
  char **v27;
  char *v28;
  char **v29;
  void **v30;
  _BYTE *v31;
  char **v32;
  char *v33;
  char **v34;
  void **v35;
  char v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  unint64_t v46;
  void **v47;
  void **v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t *v57;
  int v58;
  std::locale v59;
  const std::locale::facet *v60;
  const std::locale::facet *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  void *v65[2];
  _OWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  void *__p[2];
  _QWORD v76[4];
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;

  v8 = (char *)operator new(0x58uLL);
  strcpy(v8, "([[:digit:]]+)\\.([[:digit:]]+)\\.([[:digit:]]+)\\.?([[:digit:]]*)\\.?([[:digit:]]*)");
  v73 = 0;
  v74 = 0;
  *(_OWORD *)v65 = 0u;
  memset(v66, 0, 25);
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  MEMORY[0x1CAA32E7C](&v59);
  v60 = std::locale::use_facet(&v59, MEMORY[0x1E0DE4A90]);
  v61 = std::locale::use_facet(&v59, MEMORY[0x1E0DE4C08]);
  v62 = 0u;
  v63 = 0u;
  v64 = 0;
  if (v8 + 80 == sub_1C4FE7F84((uint64_t)&v59, v8, v8 + 80))
  {
    v83 = 0;
    v84 = 0;
    *(_OWORD *)__p = 0u;
    memset(v76, 0, 25);
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v9 = *(_BYTE *)(a2 + 23);
    v10 = v9 < 0;
    if (v9 >= 0)
      v11 = a2;
    else
      v11 = *(_QWORD *)a2;
    v12 = v9 & 0x7F;
    if (v10)
      v12 = *(_QWORD *)(a2 + 8);
    v13 = sub_1C4FEEA4C((uint64_t)&v59, v11, v11 + v12, (uint64_t)__p);
    v14 = *(_BYTE *)(a2 + 23);
    v15 = v14 < 0;
    if (v14 >= 0)
      v16 = a2;
    else
      v16 = *(_QWORD *)a2;
    v17 = v14 & 0x7F;
    if (v15)
      v17 = *(_QWORD *)(a2 + 8);
    sub_1C4FEEC00((char **)v65, v16, (char *)(v16 + v17), (uint64_t *)__p);
    if (__p[0])
      operator delete(__p[0]);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    std::locale::~locale(&v59);
    if ((v13 & 1) != 0)
    {
      v21 = (char *)v65[0];
      v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65[1] - (char *)v65[0]) >> 3);
      v23 = v65;
      if (v22 <= 1)
        v24 = v65;
      else
        v24 = (void **)v65[0];
      if (*((_BYTE *)v24 + 40))
      {
        if (v22 > 1)
          v23 = (void **)v65[0];
        sub_1C4E61270(__p, (char *)v23[3], (char *)v23[4], (_BYTE *)v23[4] - (_BYTE *)v23[3]);
        if (v76[0] >= 0)
          v25 = __p;
        else
          v25 = (void **)__p[0];
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        v25 = __p;
        v76[0] = 0;
      }
      v58 = strtol((const char *)v25, 0, 10);
      if (SHIBYTE(v76[0]) < 0)
        operator delete(__p[0]);
      v26 = v21 + 88;
      if (v22 <= 3)
        v26 = (char *)&v66[1] + 8;
      if (*v26)
      {
        v27 = (char **)(v21 + 72);
        if (v22 <= 3)
          v27 = (char **)v66 + 1;
        v28 = *v27;
        v29 = (char **)(v21 + 80);
        if (v22 <= 3)
          v29 = (char **)&v66[1];
        sub_1C4E61270(__p, v28, *v29, *v29 - v28);
        if (v76[0] >= 0)
          v30 = __p;
        else
          v30 = (void **)__p[0];
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        v30 = __p;
        v76[0] = 0;
      }
      strtol((const char *)v30, 0, 10);
      if (SHIBYTE(v76[0]) < 0)
        operator delete(__p[0]);
      v31 = v21 + 112;
      if (v22 <= 4)
        v31 = (char *)&v66[1] + 8;
      if (*v31)
      {
        v32 = (char **)(v21 + 96);
        if (v22 <= 4)
          v32 = (char **)v66 + 1;
        v33 = *v32;
        v34 = (char **)(v21 + 104);
        if (v22 <= 4)
          v34 = (char **)&v66[1];
        sub_1C4E61270(__p, v33, *v34, *v34 - v33);
        if (v76[0] >= 0)
          v35 = __p;
        else
          v35 = (void **)__p[0];
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        v35 = __p;
        v76[0] = 0;
      }
      strtol((const char *)v35, 0, 10);
      if (SHIBYTE(v76[0]) < 0)
        operator delete(__p[0]);
      sub_1C4FF06BC((uint64_t)&v59, "^APPLE_([[:digit:]]+)_");
      v83 = 0;
      v84 = 0;
      *(_OWORD *)__p = 0u;
      memset(v76, 0, 25);
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v36 = *(_BYTE *)(a1 + 23);
      v37 = v36 < 0;
      if (v36 >= 0)
        v38 = a1;
      else
        v38 = *(_QWORD *)a1;
      v39 = v36 & 0x7F;
      if (v37)
        v39 = *(_QWORD *)(a1 + 8);
      v40 = sub_1C4FEEA4C((uint64_t)&v59, v38, v38 + v39, (uint64_t)__p);
      v41 = *(_BYTE *)(a1 + 23);
      v42 = v41 < 0;
      if (v41 >= 0)
        v43 = a1;
      else
        v43 = *(_QWORD *)a1;
      v44 = v41 & 0x7F;
      if (v42)
        v44 = *(_QWORD *)(a1 + 8);
      sub_1C4FEEC00((char **)v65, v43, (char *)(v43 + v44), (uint64_t *)__p);
      if (__p[0])
        operator delete(__p[0]);
      if ((v40 & 1) == 0)
        goto LABEL_86;
      v45 = (void **)v65[0];
      v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65[1] - (char *)v65[0]) >> 3);
      v47 = v46 <= 1 ? v65 : (void **)v65[0];
      if (*((_BYTE *)v47 + 40))
      {
        if (v46 <= 1)
          v45 = v65;
        sub_1C4E61270(__p, (char *)v45[3], (char *)v45[4], (_BYTE *)v45[4] - (_BYTE *)v45[3]);
        v48 = v76[0] >= 0 ? __p : (void **)__p[0];
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        v48 = __p;
        v76[0] = 0;
      }
      v49 = strtol((const char *)v48, 0, 10);
      if (SHIBYTE(v76[0]) < 0)
        operator delete(__p[0]);
      if (v49 == 1)
        llvm::checkV1(a1, a2, v58, a3, a4);
      else
LABEL_86:
        *a4 = 0;
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      std::locale::~locale(&v59);
    }
    else
    {
      *a4 = 0;
    }
    if (v65[0])
      operator delete(v65[0]);
    operator delete(v8);
  }
  else
  {
    v53 = sub_1C4FE82D8();
    llvm::checkV1(v53, v54, v55, v56, v57);
  }
}

void llvm::checkV1(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W5>, uint64_t *a5@<X8>)
{
  char v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  void **v20;
  void **v21;
  const char *v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  char **v30;
  char *v31;
  char **v32;
  const char *v33;
  int v34;
  _BYTE *v35;
  char **v36;
  char *v37;
  char **v38;
  const char *v39;
  int v40;
  _BYTE *v41;
  char **v42;
  char *v43;
  char **v44;
  const char *v45;
  int v46;
  _BYTE *v47;
  char **v48;
  char *v49;
  char **v50;
  const char *v51;
  int v52;
  _BYTE *v53;
  char **v54;
  char *v55;
  char **v56;
  const char *v57;
  int v58;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71[4];
  __int16 v72;
  std::string v73;
  void *__p[2];
  _OWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  std::locale v84;
  std::__shared_weak_count *v85;
  _QWORD v86[2];
  int v87;
  __int128 v88;
  std::string::size_type v89;
  __int16 v90;
  _BYTE __str[48];
  int *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;

  v87 = a4;
  v86[0] = a2;
  v86[1] = &v87;
  sub_1C4FF06BC((uint64_t)&v84, "^APPLE_1_([[:digit:]]+)\\.([[:digit:]]+)\\.([[:digit:]]+)\\.?([[:digit:]]*)\\.?([[:digit:]]*)_([[:digit:]]+)$");
  v82 = 0;
  v83 = 0;
  *(_OWORD *)__p = 0u;
  memset(v75, 0, 25);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v98 = 0;
  v99 = 0;
  memset(__str, 0, 41);
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v8 = *(_BYTE *)(a1 + 23);
  v9 = v8 < 0;
  v10 = *(_QWORD *)(a1 + 8);
  if (v8 >= 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  v95 = 0;
  v96 = 0;
  v12 = v8 & 0x7F;
  if (v9)
    v12 = v10;
  v97 = 0;
  v13 = sub_1C4FEEA4C((uint64_t)&v84, v11, v11 + v12, (uint64_t)__str);
  v14 = *(_BYTE *)(a1 + 23);
  v15 = v14 < 0;
  if (v14 >= 0)
    v16 = a1;
  else
    v16 = *(_QWORD *)a1;
  v17 = v14 & 0x7F;
  if (v15)
    v17 = *(_QWORD *)(a1 + 8);
  sub_1C4FEEC00((char **)__p, v16, (char *)(v16 + v17), (uint64_t *)__str);
  if (*(_QWORD *)__str)
    operator delete(*(void **)__str);
  if ((v13 & 1) != 0)
  {
    v18 = (char *)__p[0];
    v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
    v20 = __p;
    if (v19 <= 1)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (*((_BYTE *)v21 + 40))
    {
      if (v19 > 1)
        v20 = (void **)__p[0];
      sub_1C4E61270(__str, (char *)v20[3], (char *)v20[4], (_BYTE *)v20[4] - (_BYTE *)v20[3]);
      if (__str[23] >= 0)
        v22 = __str;
      else
        v22 = *(const char **)__str;
    }
    else
    {
      memset(__str, 0, 24);
      v22 = __str;
    }
    v28 = strtol(v22, 0, 10);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v70 = v28;
    v29 = v18 + 64;
    if (v19 <= 2)
      v29 = (char *)&v75[1] + 8;
    if (*v29)
    {
      v30 = (char **)(v18 + 48);
      if (v19 <= 2)
        v30 = (char **)v75 + 1;
      v31 = *v30;
      v32 = (char **)(v18 + 56);
      if (v19 <= 2)
        v32 = (char **)&v75[1];
      sub_1C4E61270(__str, v31, *v32, *v32 - v31);
      if (__str[23] >= 0)
        v33 = __str;
      else
        v33 = *(const char **)__str;
    }
    else
    {
      memset(__str, 0, 24);
      v33 = __str;
    }
    v34 = strtol(v33, 0, 10);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v69 = v34;
    v35 = v18 + 88;
    if (v19 <= 3)
      v35 = (char *)&v75[1] + 8;
    if (*v35)
    {
      v36 = (char **)(v18 + 72);
      if (v19 <= 3)
        v36 = (char **)v75 + 1;
      v37 = *v36;
      v38 = (char **)(v18 + 80);
      if (v19 <= 3)
        v38 = (char **)&v75[1];
      sub_1C4E61270(__str, v37, *v38, *v38 - v37);
      if (__str[23] >= 0)
        v39 = __str;
      else
        v39 = *(const char **)__str;
    }
    else
    {
      memset(__str, 0, 24);
      v39 = __str;
    }
    v40 = strtol(v39, 0, 10);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v68 = v40;
    v41 = v18 + 112;
    if (v19 <= 4)
      v41 = (char *)&v75[1] + 8;
    if (*v41)
    {
      v42 = (char **)(v18 + 96);
      if (v19 <= 4)
        v42 = (char **)v75 + 1;
      v43 = *v42;
      v44 = (char **)(v18 + 104);
      if (v19 <= 4)
        v44 = (char **)&v75[1];
      sub_1C4E61270(__str, v43, *v44, *v44 - v43);
      if (__str[23] >= 0)
        v45 = __str;
      else
        v45 = *(const char **)__str;
    }
    else
    {
      memset(__str, 0, 24);
      v45 = __str;
    }
    v46 = strtol(v45, 0, 10);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v67 = v46;
    v47 = v18 + 136;
    if (v19 <= 5)
      v47 = (char *)&v75[1] + 8;
    if (*v47)
    {
      v48 = (char **)(v18 + 120);
      if (v19 <= 5)
        v48 = (char **)v75 + 1;
      v49 = *v48;
      v50 = (char **)(v18 + 128);
      if (v19 <= 5)
        v50 = (char **)&v75[1];
      sub_1C4E61270(__str, v49, *v50, *v50 - v49);
      if (__str[23] >= 0)
        v51 = __str;
      else
        v51 = *(const char **)__str;
    }
    else
    {
      memset(__str, 0, 24);
      v51 = __str;
    }
    v52 = strtol(v51, 0, 10);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v66 = v52;
    v53 = v18 + 160;
    if (v19 <= 6)
      v53 = (char *)&v75[1] + 8;
    if (*v53)
    {
      v54 = (char **)(v18 + 144);
      if (v19 <= 6)
        v54 = (char **)v75 + 1;
      v55 = *v54;
      v56 = (char **)(v18 + 152);
      if (v19 <= 6)
        v56 = (char **)&v75[1];
      sub_1C4E61270(__str, v55, *v56, *v56 - v55);
      if (__str[23] >= 0)
        v57 = __str;
      else
        v57 = *(const char **)__str;
    }
    else
    {
      memset(__str, 0, 24);
      v57 = __str;
    }
    v58 = strtol(v57, 0, 10);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v65 = v58;
    *(_QWORD *)__str = v86;
    *(_QWORD *)&__str[8] = &v70;
    *(_QWORD *)&__str[16] = &v69;
    *(_QWORD *)&__str[24] = &v68;
    *(_QWORD *)&__str[32] = &v67;
    *(_QWORD *)&__str[40] = &v66;
    v92 = &v65;
    if (v28 <= a3 && (v28 != a3 || v87 >= v58))
    {
      *a5 = 0;
      goto LABEL_104;
    }
    sub_1C4FE7DD4(&v73, (uint64_t)__str);
    if (!atomic_load(qword_1EF8F6CB0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
    v60 = qword_1EF8F6CB0[0];
    v61 = operator new();
    v90 = 260;
    *(_QWORD *)&v88 = &v73;
    *(_QWORD *)v61 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v88, (_QWORD *)(v61 + 8));
    *(_QWORD *)(v61 + 32) = 1;
    *(_QWORD *)(v61 + 40) = v60;
    *(_BYTE *)(v61 + 48) = 1;
    *a5 = v61;
  }
  else
  {
    v72 = 260;
    v71[0] = a1;
    sub_1C4FE7B9C(&v73, (uint64_t)v86, (llvm::Twine *)v71);
    v23 = std::string::insert(&v73, 0, "Invalid bitcode version");
    v24 = v23->__r_.__value_.__r.__words[2];
    v88 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v89 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (!atomic_load(qword_1EF8F6CB0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
    v26 = qword_1EF8F6CB0[0];
    v27 = operator new();
    *(_WORD *)&__str[32] = 260;
    *(_QWORD *)__str = &v88;
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)__str, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 1;
    *(_QWORD *)(v27 + 40) = v26;
    *(_BYTE *)(v27 + 48) = 1;
    *a5 = v27;
    if (SHIBYTE(v89) < 0)
      operator delete((void *)v88);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
LABEL_104:
  if (__p[0])
    operator delete(__p[0]);
  v62 = v85;
  if (v85)
  {
    p_shared_owners = (unint64_t *)&v85->__shared_owners_;
    do
      v64 = __ldaxr(p_shared_owners);
    while (__stlxr(v64 - 1, p_shared_owners));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  std::locale::~locale(&v84);
}

void llvm::checkBitcodeCompatibility(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::checkBitcodeCompatibility(a1, a2, 0, a3);
}

void sub_1C4FE7B9C(std::string *a1, uint64_t a2, llvm::Twine *a3)
{
  void **v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  _DWORD v23[8];
  __int16 v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;

  *((_BYTE *)&v29.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v29, " (Producer: '");
  llvm::Twine::str(a3, v27);
  if (v28 >= 0)
    v5 = v27;
  else
    v5 = (void **)v27[0];
  if (v28 >= 0)
    v6 = v28 & 0x7F;
  else
    v6 = (std::string::size_type)v27[1];
  v7 = std::string::append(&v29, (const std::string::value_type *)v5, v6);
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v30, "' Reader: '");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = *(_BYTE *)(*(_QWORD *)a2 + 23);
  if (v11 >= 0)
    v12 = *(const std::string::value_type **)a2;
  else
    v12 = **(const std::string::value_type ***)a2;
  if (v11 >= 0)
    v13 = v11 & 0x7F;
  else
    v13 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v14 = std::string::append(&v31, v12, v13);
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v32, "_");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v17) = **(_DWORD **)(a2 + 8);
  v24 = 265;
  v23[0] = v17;
  llvm::Twine::str((llvm::Twine *)v23, __p);
  if (v26 >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (v26 >= 0)
    v19 = v26 & 0x7F;
  else
    v19 = (std::string::size_type)__p[1];
  v20 = std::string::append(&v33, (const std::string::value_type *)v18, v19);
  v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v34, "')");
  *a1 = *v22;
  v22->__r_.__value_.__r.__words[0] = 0;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1C4FE7DD4(std::string *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  std::string v35;
  std::string v36;

  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_1C640C6A0;
  strcpy(v36.__r_.__value_.__l.__data_, "Invalid bitcode version");
  v4 = *(_QWORD *)a2;
  v15[0] = **(unsigned int **)(a2 + 8);
  v15[2] = ".";
  v16 = 777;
  v5 = *(unsigned int **)(a2 + 24);
  v6 = **(unsigned int **)(a2 + 16);
  v17[0] = v15;
  v17[2] = v6;
  v18 = 2306;
  v19[0] = v17;
  v19[2] = ".";
  v20 = 770;
  v7 = *v5;
  v21[0] = v19;
  v21[2] = v7;
  v22 = 2306;
  v23[0] = v21;
  v23[2] = ".";
  v24 = 770;
  v8 = *(unsigned int **)(a2 + 40);
  v9 = **(unsigned int **)(a2 + 32);
  v25[0] = v23;
  v25[2] = v9;
  v26 = 2306;
  v27[0] = v25;
  v27[2] = ".";
  v28 = 770;
  v10 = *v8;
  v29[0] = v27;
  v29[2] = v10;
  v30 = 2306;
  v31[0] = v29;
  v31[2] = "_";
  v32 = 770;
  v11 = **(unsigned int **)(a2 + 48);
  v33[0] = v31;
  v33[2] = v11;
  v34 = 2306;
  sub_1C4FE7B9C(&v35, v4, (llvm::Twine *)v33);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v35;
  else
    v12 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v35.__r_.__value_.__l.__size_;
  v14 = std::string::append(&v36, (const std::string::value_type *)v12, size);
  *a1 = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

char *sub_1C4FE7F84(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E813EC50;
  v7 = (_QWORD *)operator new();
  *v7 = &off_1E813ECB8;
  v7[1] = v6;
  sub_1C4FE82EC((_QWORD *)(a1 + 40), (uint64_t)v7);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 <= 0x3F)
  {
    if (!v9)
      return sub_1C4FE8384(a1, a2, a3);
    if (v9 == 16)
      return (char *)sub_1C4FE84C0(a1, a2, a3);
    if (v9 != 32)
      goto LABEL_49;
    return sub_1C4FE8604(a1, a2, a3);
  }
  switch(v9)
  {
    case 0x40u:
      return sub_1C4FE8604(a1, a2, a3);
    case 0x80u:
      v16 = (char *)memchr(a2, 10, a3 - a2);
      if (v16)
        v17 = v16;
      else
        v17 = a3;
      if (v17 == a2)
      {
        v18 = (_QWORD *)operator new();
        v19 = *(_QWORD *)(a1 + 56);
        v20 = *(_QWORD *)(v19 + 8);
        *v18 = &off_1E813ECB8;
        v18[1] = v20;
        *(_QWORD *)(v19 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      else
      {
        sub_1C4FE84C0(a1, a2, v17);
      }
      if (v17 != a3)
        ++v17;
      while (v17 != a3)
      {
        v27 = (char *)memchr(v17, 10, a3 - v17);
        if (v27)
          v28 = v27;
        else
          v28 = a3;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 == v17)
        {
          v30 = (_QWORD *)operator new();
          v31 = *(_QWORD *)(a1 + 56);
          v32 = *(_QWORD *)(v31 + 8);
          *v30 = &off_1E813ECB8;
          v30[1] = v32;
          *(_QWORD *)(v31 + 8) = v30;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          sub_1C4FE84C0(a1, v17, v28);
        }
        sub_1C4FE8848(a1, v8, v29);
        if (v28 == a3)
          v17 = v28;
        else
          v17 = v28 + 1;
      }
      return a3;
    case 0x100u:
      v10 = (char *)memchr(a2, 10, a3 - a2);
      if (v10)
        v11 = v10;
      else
        v11 = a3;
      if (v11 == a2)
      {
        v12 = (_QWORD *)operator new();
        v13 = *(_QWORD *)(a1 + 56);
        v14 = *(_QWORD *)(v13 + 8);
        *v12 = &off_1E813ECB8;
        v12[1] = v14;
        *(_QWORD *)(v13 + 8) = v12;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      else
      {
        sub_1C4FE8604(a1, a2, v11);
      }
      if (v11 != a3)
        ++v11;
      while (v11 != a3)
      {
        v21 = (char *)memchr(v11, 10, a3 - v11);
        if (v21)
          v22 = v21;
        else
          v22 = a3;
        v23 = *(_QWORD *)(a1 + 56);
        if (v22 == v11)
        {
          v24 = (_QWORD *)operator new();
          v25 = *(_QWORD *)(a1 + 56);
          v26 = *(_QWORD *)(v25 + 8);
          *v24 = &off_1E813ECB8;
          v24[1] = v26;
          *(_QWORD *)(v25 + 8) = v24;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          sub_1C4FE8604(a1, v11, v22);
        }
        sub_1C4FE8848(a1, v8, v23);
        if (v22 == a3)
          v11 = v22;
        else
          v11 = v22 + 1;
      }
      return a3;
  }
LABEL_49:
  sub_1C4FE82D8();
  return (char *)sub_1C4FE82D8();
}

uint64_t sub_1C4FE82D8()
{
  std::__libcpp_verbose_abort("regex_error was thrown in -fno-exceptions mode");
  return sub_1C4FE82EC();
}

void sub_1C4FE82EC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E813EC80;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

char *sub_1C4FE8384(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = (char *)sub_1C4FE891C(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
  {
    v9 = (_QWORD *)operator new();
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(v10 + 8);
    *v9 = &off_1E813ECB8;
    v9[1] = v11;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v8 != a3)
  {
    while (*v8 == 124)
    {
      v12 = *(_QWORD *)(a1 + 56);
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = (char *)sub_1C4FE891C(a1, v14, a3);
      }
      while (v8 != v14);
      if (v13 == v8)
      {
        v15 = (_QWORD *)operator new();
        v16 = *(_QWORD *)(a1 + 56);
        v17 = *(_QWORD *)(v16 + 8);
        *v15 = &off_1E813ECB8;
        v15[1] = v17;
        *(_QWORD *)(v16 + 8) = v15;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      sub_1C4FE8848(a1, v6, v12);
      if (v8 == a3)
        return a3;
    }
  }
  return v8;
}

uint64_t sub_1C4FE84C0(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = a2;
  if (a2 == a3)
    return (uint64_t)a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E813ED18;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 == v4)
    return (uint64_t)v4;
  do
  {
    v10 = v3;
    v3 = sub_1C4FEE218(a1, v3, v4);
  }
  while (v10 != v3);
  if (v10 == v4)
    return (uint64_t)v4;
  if (v10 + 1 == v4 && *v10 == 36)
  {
    v11 = operator new();
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v11 = &off_1E813ED48;
    *(_QWORD *)(v11 + 8) = v14;
    *(_BYTE *)(v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return (uint64_t)v4;
  }
  v16 = sub_1C4FE82D8();
  return sub_1C4FE8604(v16);
}

char *sub_1C4FE8604(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  std::locale *v7;
  char *v8;
  uint64_t v9;
  std::locale *v10;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_1C4FEE6CC(a1, a2, a3);
  if (v7 == (std::locale *)a2)
  {
LABEL_9:
    sub_1C4FE82D8();
    JUMPOUT(0x1C4FE86A4);
  }
  v8 = (char *)v7;
  while (v8 != a3)
  {
    if (*v8 != 124)
      return v8;
    v9 = *(_QWORD *)(a1 + 56);
    v10 = sub_1C4FEE6CC(a1, v8 + 1, a3);
    if (v8 + 1 == (char *)v10)
      goto LABEL_9;
    v8 = (char *)v10;
    sub_1C4FE8848(a1, v6, v9);
  }
  return a3;
}

void sub_1C4FE86A8()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4FE86BC(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_1C4FE86D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FE86F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_1C4FE8714(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E813ECE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4FE8754(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E813ECE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FE87A4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_1C4FE87B8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E813ECE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4FE87F8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E813ECE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4FE8848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a3 + 8);
  v6[1] = *(_QWORD *)(a2 + 8);
  v6[2] = v7;
  *v6 = &off_1E813F048;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = (_QWORD *)operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *v8 = &off_1E813ECB8;
  v8[1] = v9;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
  result = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a3 + 8);
  *result = &off_1E813F078;
  result[1] = v11;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 8);
  return result;
}

std::locale *sub_1C4FE891C(uint64_t a1, char *a2, char *a3)
{
  std::__shared_weak_count *v3;
  int v7;
  int v8;
  char *v9;
  BOOL v10;
  char *v11;
  int v13;
  char *v14;
  int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t v25;
  char v26;
  uint64_t v27;
  std::locale *result;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  int v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  char v61;
  int v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  int v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unsigned __int8 *v84;
  std::locale v85[3];
  int v86;
  int v87;
  std::__shared_weak_count *v88;

  if (a2 == a3)
    return (std::locale *)a2;
  v7 = *a2;
  v8 = *a2;
  if (v7 > 91)
  {
    if (v7 == 92)
    {
      if (a2 + 1 == a3)
        goto LABEL_44;
      v29 = a2[1];
      if (v29 == 66)
      {
        v30 = operator new();
        v31 = a1 + 56;
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        *(_QWORD *)v30 = &off_1E813ED78;
        *(_QWORD *)(v30 + 8) = v33;
        std::locale::locale((std::locale *)(v30 + 16), (const std::locale *)a1);
        *(_OWORD *)(v30 + 24) = *(_OWORD *)(a1 + 8);
        *(_BYTE *)(v30 + 40) = 1;
      }
      else
      {
        if (v29 != 98)
          goto LABEL_44;
        v30 = operator new();
        v31 = a1 + 56;
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        *(_QWORD *)v30 = &off_1E813ED78;
        *(_QWORD *)(v30 + 8) = v32;
        std::locale::locale((std::locale *)(v30 + 16), (const std::locale *)a1);
        *(_OWORD *)(v30 + 24) = *(_OWORD *)(a1 + 8);
        *(_BYTE *)(v30 + 40) = 0;
      }
      *(_QWORD *)(*(_QWORD *)v31 + 8) = v30;
      v27 = 2;
      v20 = v31;
LABEL_28:
      *(_QWORD *)v20 = *(_QWORD *)(*(_QWORD *)v20 + 8);
      return (std::locale *)&a2[v27];
    }
    if (v7 != 94)
      goto LABEL_44;
    v18 = operator new();
    v21 = *(_QWORD *)(a1 + 56);
    v20 = a1 + 56;
    v19 = v21;
    v22 = (*(_DWORD *)(v20 - 32) & 0x5F0) == 1024;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = &off_1E813ED18;
LABEL_24:
    v26 = v22;
    *(_QWORD *)v18 = v24;
    *(_QWORD *)(v18 + 8) = v23;
    *(_BYTE *)(v18 + 16) = v26;
    *(_QWORD *)(v19 + 8) = v18;
    v27 = 1;
    goto LABEL_28;
  }
  if (v7 == 36)
  {
    v18 = operator new();
    v25 = *(_QWORD *)(a1 + 56);
    v20 = a1 + 56;
    v19 = v25;
    v22 = (*(_DWORD *)(v20 - 32) & 0x5F0) == 1024;
    v23 = *(_QWORD *)(v25 + 8);
    v24 = &off_1E813ED48;
    goto LABEL_24;
  }
  v10 = v7 == 40;
  v9 = a2 + 1;
  v10 = !v10 || v9 == a3;
  if (v10)
    goto LABEL_44;
  v10 = *v9 == 63;
  v11 = a2 + 2;
  if (!v10 || v11 == a3)
    goto LABEL_44;
  v13 = *v11;
  if (v13 != 33)
  {
    if (v13 != 61)
      goto LABEL_44;
    sub_1C4FE9874((uint64_t)v85);
    v86 = *(_DWORD *)(a1 + 24);
    v14 = (char *)sub_1C4FE7F84(v85, a2 + 3, a3);
    v15 = v87;
    sub_1C4FE941C(a1, (uint64_t)v85, 0, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += v15;
    if (v14 != a3 && *v14 == 41)
    {
      v3 = v88;
      if (v88)
      {
        p_shared_owners = (unint64_t *)&v88->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        goto LABEL_40;
      }
      goto LABEL_42;
    }
LABEL_109:
    sub_1C4FE82D8();
    goto LABEL_110;
  }
  sub_1C4FE9874((uint64_t)v85);
  v86 = *(_DWORD *)(a1 + 24);
  v14 = (char *)sub_1C4FE7F84(v85, a2 + 3, a3);
  v34 = v87;
  sub_1C4FE941C(a1, (uint64_t)v85, 1, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v34;
  if (v14 == a3 || *v14 != 41)
    goto LABEL_109;
  v3 = v88;
  if (v88)
  {
    v35 = (unint64_t *)&v88->__shared_owners_;
    do
      v17 = __ldaxr(v35);
    while (__stlxr(v17 - 1, v35));
LABEL_40:
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_42:
  std::locale::~locale(v85);
  result = (std::locale *)(v14 + 1);
  if (v14 + 1 != a2)
    return result;
  v8 = *a2;
LABEL_44:
  v36 = *(_QWORD *)(a1 + 56);
  v37 = *(_DWORD *)(a1 + 28);
  v38 = (char)v8;
  if ((int)v38 <= 91)
  {
    result = (std::locale *)a2;
    switch((char)v8)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_69;
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_109;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++*(_DWORD *)(a1 + 36);
          v39 = (char *)sub_1C4FE8384(a1, a2 + 3, a3);
          if (v39 != a3 && *v39 == 41)
          {
            --*(_DWORD *)(a1 + 36);
            v40 = v39 + 1;
            goto LABEL_103;
          }
        }
        else
        {
          sub_1C4FEAC90(a1);
          v47 = *(_DWORD *)(a1 + 28);
          ++*(_DWORD *)(a1 + 36);
          v48 = (char *)sub_1C4FE8384(a1, a2 + 1, a3);
          if (v48 != a3)
          {
            v49 = v48;
            if (*v48 == 41)
            {
              sub_1C4FEAD00(a1, v47);
              --*(_DWORD *)(a1 + 36);
              v40 = v49 + 1;
              goto LABEL_103;
            }
          }
        }
        goto LABEL_109;
      case '*':
      case '+':
        goto LABEL_72;
      case '.':
        v44 = (_QWORD *)operator new();
        v45 = *(_QWORD *)(a1 + 56);
        v46 = *(_QWORD *)(v45 + 8);
        *v44 = &off_1E813EDD8;
        v44[1] = v46;
        *(_QWORD *)(v45 + 8) = v44;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        goto LABEL_70;
      default:
        if ((_DWORD)v38 == 91)
        {
          v40 = (char *)sub_1C4FEA5F0(a1, a2, a3);
          goto LABEL_103;
        }
        if ((_DWORD)v38 != 63)
          goto LABEL_69;
        goto LABEL_72;
    }
  }
  v41 = (v38 - 92);
  if (v41 > 0x21)
    goto LABEL_69;
  if (((1 << (v8 - 92)) & 0x300000006) != 0)
    return (std::locale *)a2;
  if ((_DWORD)v38 != 92)
  {
    if (v41 == 31)
    {
LABEL_72:
      sub_1C4FE82D8();
      goto LABEL_73;
    }
LABEL_69:
    sub_1C4FEB0A4(a1, v38);
LABEL_70:
    v40 = a2 + 1;
    goto LABEL_104;
  }
  v40 = a2;
  if (v8 != 92)
    goto LABEL_103;
  v3 = (std::__shared_weak_count *)(a2 + 1);
  if (a2 + 1 == a3)
  {
LABEL_111:
    v80 = sub_1C4FE82D8();
    return sub_1C4FE911C(v80, v81, v82, v83, v78, v79);
  }
  v42 = LOBYTE(v3->__vftable);
  v43 = (v42 - 48);
  if (v42 == 48)
  {
    sub_1C4FEB0A4(a1, v43);
LABEL_102:
    v40 = a2 + 2;
    goto LABEL_103;
  }
LABEL_73:
  if ((v42 - 49) > 8)
    goto LABEL_85;
  v40 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v40 = a3;
  }
  else
  {
    while (1)
    {
      v50 = *v40;
      if ((v50 - 48) > 9)
        break;
      if (v43 >= 0x19999999)
        goto LABEL_110;
      ++v40;
      LODWORD(v43) = v50 + 10 * v43 - 48;
      if (v40 == a3)
      {
        v40 = a3;
        break;
      }
    }
    if (!(_DWORD)v43)
      goto LABEL_110;
  }
  if (v43 > v37)
  {
LABEL_110:
    sub_1C4FE82D8();
    goto LABEL_111;
  }
  sub_1C4FEB1C4(a1, v43);
  if (v3 != (std::__shared_weak_count *)v40)
    goto LABEL_103;
  LOBYTE(v42) = v3->__vftable;
LABEL_85:
  if ((char)v42 > 99)
  {
    if ((char)v42 == 119)
    {
      v51 = operator new();
      v52 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v75 = *(_DWORD *)(a1 + 24);
      v54 = v75 & 1;
      v55 = (v75 >> 3) & 1;
      v56 = a1;
      v57 = 0;
      goto LABEL_98;
    }
    if ((char)v42 == 115)
    {
      v68 = operator new();
      v69 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v77 = *(_DWORD *)(a1 + 24);
      v71 = v77 & 1;
      v72 = (v77 >> 3) & 1;
      v73 = a1;
      v74 = 0;
      goto LABEL_100;
    }
    if ((char)v42 != 100)
      goto LABEL_106;
    v58 = operator new();
    v59 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v60 = *(_DWORD *)(a1 + 24);
    v61 = v60 & 1;
    v62 = (v60 >> 3) & 1;
    v63 = a1;
    v64 = 0;
LABEL_95:
    v66 = sub_1C4FEBBE8(v58, v63, v59, v64, v61, v62);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v66;
    *(_QWORD *)(a1 + 56) = v66;
    v67 = *(_DWORD *)(v66 + 160) | 0x400;
LABEL_101:
    *(_DWORD *)(v66 + 160) = v67;
    goto LABEL_102;
  }
  switch((char)v42)
  {
    case 'D':
      v58 = operator new();
      v59 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v65 = *(_DWORD *)(a1 + 24);
      v61 = v65 & 1;
      v62 = (v65 >> 3) & 1;
      v63 = a1;
      v64 = 1;
      goto LABEL_95;
    case 'S':
      v68 = operator new();
      v69 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v70 = *(_DWORD *)(a1 + 24);
      v71 = v70 & 1;
      v72 = (v70 >> 3) & 1;
      v73 = a1;
      v74 = 1;
LABEL_100:
      v66 = sub_1C4FEBBE8(v68, v73, v69, v74, v71, v72);
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v66;
      *(_QWORD *)(a1 + 56) = v66;
      v67 = *(_DWORD *)(v66 + 160) | 0x4000;
      goto LABEL_101;
    case 'W':
      v51 = operator new();
      v52 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v53 = *(_DWORD *)(a1 + 24);
      v54 = v53 & 1;
      v55 = (v53 >> 3) & 1;
      v56 = a1;
      v57 = 1;
LABEL_98:
      v76 = sub_1C4FEBBE8(v51, v56, v52, v57, v54, v55);
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v76;
      *(_QWORD *)(a1 + 56) = v76;
      *(_DWORD *)(v76 + 160) |= 0x500u;
      sub_1C4FEB9D0(v76, 95);
      goto LABEL_102;
  }
LABEL_106:
  v84 = sub_1C4FEADF8(a1, (unsigned __int8 *)v3, a3, 0);
  if (v3 == (std::__shared_weak_count *)v84)
    v40 = a2;
  else
    v40 = (char *)v84;
LABEL_103:
  result = (std::locale *)a2;
  if (v40 != a2)
  {
LABEL_104:
    v78 = v37 + 1;
    v79 = *(_DWORD *)(a1 + 28) + 1;
    v80 = a1;
    v81 = v40;
    v82 = a3;
    v83 = v36;
    return sub_1C4FE911C(v80, v81, v82, v83, v78, v79);
  }
  return result;
}

std::locale *sub_1C4FE911C(uint64_t a1, char *a2, char *a3, uint64_t a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char *v23;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  int v31;
  int v32;

  if (a2 == a3)
    return (std::locale *)a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = *a2;
  if (v12 <= 62)
  {
    if (v12 == 42)
    {
      v13 = a2 + 1;
      if (v11)
        v19 = 1;
      else
        v19 = v13 == a3;
      if (!v19 && *v13 == 63)
      {
        v13 = a2 + 2;
        v14 = 0;
        goto LABEL_26;
      }
      v14 = 0;
      goto LABEL_36;
    }
    v13 = a2;
    if (v12 == 43)
    {
      v13 = a2 + 1;
      if (!v11 && v13 != a3 && *v13 == 63)
      {
        v13 = a2 + 2;
        v14 = 1;
LABEL_26:
        v18 = -1;
        goto LABEL_33;
      }
      v14 = 1;
      goto LABEL_36;
    }
    return (std::locale *)v13;
  }
  if (v12 == 63)
  {
    v13 = a2 + 1;
    if (v11)
      v20 = 1;
    else
      v20 = v13 == a3;
    if (!v20 && *v13 == 63)
    {
      v13 = a2 + 2;
      v14 = 0;
      v18 = 1;
      goto LABEL_33;
    }
    v14 = 0;
    v18 = 1;
    goto LABEL_45;
  }
  v13 = a2;
  if (v12 != 123)
    return (std::locale *)v13;
  v15 = a2 + 1;
  v16 = (char *)sub_1C4FEDCB4(a2 + 1, a3, &v32);
  if (v15 == v16)
    goto LABEL_58;
  if (v16 != a3)
  {
    v17 = *v16;
    if (v17 != 44)
    {
      if (v17 == 125)
      {
        v13 = v16 + 1;
        if (!v11 && v13 != a3 && *v13 == 63)
        {
          v13 = v16 + 2;
          v14 = v32;
          a5 = v7;
          a6 = v6;
          a1 = v10;
          v18 = v32;
LABEL_33:
          v21 = a4;
          v22 = 0;
LABEL_46:
          sub_1C4FEDBA0(a1, v14, v18, v21, a5, a6, v22);
          return (std::locale *)v13;
        }
        v14 = v32;
        a5 = v7;
        a6 = v6;
        a1 = v10;
        v18 = v32;
LABEL_45:
        v21 = a4;
        v22 = 1;
        goto LABEL_46;
      }
      goto LABEL_58;
    }
    v23 = v16 + 1;
    if (v16 + 1 == a3)
    {
LABEL_58:
      sub_1C4FE82D8();
      goto LABEL_59;
    }
    if (*v23 == 125)
    {
      v13 = v16 + 2;
      if (!v11 && v13 != a3 && *v13 == 63)
      {
        v13 = v16 + 3;
        v14 = v32;
        a5 = v7;
        a6 = v6;
        a1 = v10;
        goto LABEL_26;
      }
      v14 = v32;
      a5 = v7;
      a6 = v6;
      a1 = v10;
LABEL_36:
      v18 = -1;
      goto LABEL_45;
    }
    v31 = -1;
    v25 = (char *)sub_1C4FEDCB4(v16 + 1, a3, &v31);
    if (v23 != v25 && v25 != a3 && *v25 == 125)
    {
      v18 = v31;
      v14 = v32;
      if (v31 >= v32)
      {
        v13 = v25 + 1;
        v22 = 1;
        if (!v11 && v13 != a3)
        {
          v26 = v25[1];
          v22 = v26 != 63;
          if (v26 == 63)
            v13 = v25 + 2;
        }
        a5 = v7;
        a6 = v6;
        a1 = v10;
        v21 = a4;
        goto LABEL_46;
      }
      goto LABEL_58;
    }
  }
LABEL_59:
  v27 = sub_1C4FE82D8();
  return sub_1C4FE941C(v27, v28, v29, v30);
}

std::locale *sub_1C4FE941C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  std::locale *result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v8 = operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v8 = &off_1E813EDA8;
  *(_QWORD *)(v8 + 8) = v9;
  result = std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v8 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

_QWORD *sub_1C4FE94E0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E813ECE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4FE9520(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E813ECE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FE9570(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

_QWORD *sub_1C4FE95D0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E813ECE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4FE9610(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E813ECE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FE9660(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_1C4FE96B0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E813ED78;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1C4FE9700(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E813ED78;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FE9760(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t sub_1C4FE9874(uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1CAA32E7C]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

std::locale *sub_1C4FE98CC(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&off_1E813EDA8;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_1C4FE9964(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&off_1E813EDA8;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4FE9A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  char *v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  char v28;
  char v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v4 = a1 + 16;
  __p = 0;
  v20 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0uLL;
  v28 = 0;
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v21 = 0;
  *(_QWORD *)&v22 = v6;
  *((_QWORD *)&v22 + 1) = v6;
  v23 = 0;
  sub_1C4FE9F54((uint64_t)&__p, v5, &v22);
  v24 = v7;
  v25 = v7;
  v26 = 0;
  v27 = v22;
  v28 = v23;
  v30 = v7;
  v29 = 1;
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v9 = v8 == *(_QWORD *)(a2 + 8);
  else
    v9 = 0;
  v10 = v9;
  if (*(unsigned __int8 *)(a1 + 84) == sub_1C4FE9B84(v4, v8, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v10))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v11 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v11 = (char *)__p;
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)__p) >> 3);
  if (v12 < 2)
  {
LABEL_13:
    if (!v11)
      return;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = *(_DWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = 1;
  do
  {
    v17 = &v11[24 * v16];
    v18 = v15 + 24 * (v14 + v13);
    *(_OWORD *)v18 = *(_OWORD *)v17;
    *(_BYTE *)(v18 + 16) = v17[16];
    v16 = (v13 + 2);
    ++v13;
  }
  while (v12 > v16);
LABEL_14:
  operator delete(v11);
}

_QWORD *sub_1C4FE9B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v40;
  unint64_t v41;
  __int128 *v42;
  _BYTE v45[56];
  void *__p[2];
  _QWORD v47[4];
  __int128 v48;
  char v49;
  char *v50;
  char *v51;
  unint64_t v52;

  v50 = 0;
  v51 = 0;
  v52 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_35:
    *(_QWORD *)v45 = &v50;
    sub_1C4FEA568((void ***)v45);
    return (_QWORD *)v6;
  }
  *(_QWORD *)&v48 = a3;
  *((_QWORD *)&v48 + 1) = a3;
  v49 = 0;
  *(_DWORD *)v45 = 0;
  memset(&v45[8], 0, 48);
  *(_OWORD *)__p = 0u;
  memset(v47, 0, 21);
  v11 = sub_1C4FEA0D8((void **)&v50, (uint64_t)v45);
  v51 = v11;
  if (__p[0])
    operator delete(__p[0]);
  if (*(_QWORD *)&v45[32])
    operator delete(*(void **)&v45[32]);
  v12 = *((_QWORD *)v11 - 8);
  *((_DWORD *)v11 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  v13 = *(unsigned int *)(a1 + 28);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v11 - 7) - v12) >> 3);
  if (v13 <= v14)
  {
    if (v13 < v14)
      *((_QWORD *)v11 - 7) = v12 + 24 * v13;
  }
  else
  {
    sub_1C4FEA2A0((void **)v11 - 8, v13 - v14, &v48);
  }
  v15 = *((_QWORD *)v11 - 5);
  v16 = *(unsigned int *)(a1 + 32);
  v17 = (*((_QWORD *)v11 - 4) - v15) >> 4;
  if (v16 <= v17)
  {
    if (v16 < v17)
      *((_QWORD *)v11 - 4) = v15 + 16 * v16;
  }
  else
  {
    sub_1C4FEA438((char **)v11 - 5, v16 - v17);
  }
  *((_QWORD *)v11 - 2) = v6;
  *((_DWORD *)v11 - 2) = a5;
  *(v11 - 4) = a6;
  v18 = 1;
  while (2)
  {
    if ((v18 & 0xFFF) != 0 || (int)(v18 >> 12) < (int)a3 - (int)a2)
    {
      v19 = *((_QWORD *)v11 - 2);
      v20 = v11 - 96;
      if (v19)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v19 + 16))(v19, v11 - 96);
      switch(*(_DWORD *)v20)
      {
        case 0xFFFFFC18:
          v21 = *((_QWORD *)v11 - 10);
          if ((a5 & 0x20) != 0 && v21 == a2)
            goto LABEL_22;
          v31 = *a4;
          *(_QWORD *)v31 = a2;
          *(_QWORD *)(v31 + 8) = v21;
          *(_BYTE *)(v31 + 16) = 1;
          v32 = *((_QWORD *)v11 - 8);
          v33 = *((_QWORD *)v11 - 7) - v32;
          if (v33)
          {
            v34 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 3);
            v35 = (_BYTE *)(v32 + 16);
            v36 = 1;
            do
            {
              v37 = v31 + 24 * v36;
              *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
              v38 = *v35;
              v35 += 24;
              *(_BYTE *)(v37 + 16) = v38;
            }
            while (v34 > v36++);
          }
          v6 = 1;
          goto LABEL_35;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_33;
        case 0xFFFFFC1F:
LABEL_22:
          v22 = v51;
          v23 = (void *)*((_QWORD *)v51 - 5);
          if (v23)
          {
            *((_QWORD *)v51 - 4) = v23;
            operator delete(v23);
          }
          v24 = (void *)*((_QWORD *)v22 - 8);
          if (v24)
          {
            *((_QWORD *)v22 - 7) = v24;
            operator delete(v24);
          }
          v51 = v22 - 96;
          goto LABEL_33;
        case 0xFFFFFC20:
          v25 = *((_OWORD *)v11 - 5);
          *(_OWORD *)v45 = *(_OWORD *)v20;
          *(_OWORD *)&v45[16] = v25;
          memset(&v45[32], 0, 24);
          sub_1C4D6CDA0(&v45[32], *((_BYTE **)v11 - 8), *((_BYTE **)v11 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v11 - 7) - *((_QWORD *)v11 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v47[0] = 0;
          sub_1C4EECB34(__p, *((_BYTE **)v11 - 5), *((_BYTE **)v11 - 4), (uint64_t)(*((_QWORD *)v11 - 4) - *((_QWORD *)v11 - 5)) >> 4);
          v26 = *((_QWORD *)v11 - 2);
          *(_QWORD *)((char *)&v47[1] + 5) = *(_QWORD *)(v11 - 11);
          v47[1] = v26;
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v11 - 2) + 24))(*((_QWORD *)v11 - 2), 1, v11 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v47[1] + 24))(v47[1], 0, v45);
          v27 = v51;
          if ((unint64_t)v51 >= v52)
          {
            v51 = sub_1C4FEA0D8((void **)&v50, (uint64_t)v45);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v28 = *(_OWORD *)&v45[16];
            *(_OWORD *)v51 = *(_OWORD *)v45;
            *((_OWORD *)v27 + 1) = v28;
            *((_QWORD *)v27 + 4) = 0;
            *((_QWORD *)v27 + 5) = 0;
            *((_QWORD *)v27 + 6) = 0;
            *((_QWORD *)v27 + 7) = 0;
            *((_OWORD *)v27 + 2) = *(_OWORD *)&v45[32];
            *((_QWORD *)v27 + 6) = *(_QWORD *)&v45[48];
            memset(&v45[32], 0, 24);
            *((_QWORD *)v27 + 8) = 0;
            *((_QWORD *)v27 + 9) = 0;
            *(_OWORD *)(v27 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v27 + 9) = v47[0];
            __p[0] = 0;
            __p[1] = 0;
            v47[0] = 0;
            v29 = v47[1];
            *(_QWORD *)(v27 + 85) = *(_QWORD *)((char *)&v47[1] + 5);
            *((_QWORD *)v27 + 10) = v29;
            v51 = v27 + 96;
          }
          if (*(_QWORD *)&v45[32])
          {
            *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
            operator delete(*(void **)&v45[32]);
          }
LABEL_33:
          v11 = v51;
          ++v18;
          if (v50 != v51)
            continue;
          v6 = 0;
          break;
        default:
          goto LABEL_41;
      }
      goto LABEL_35;
    }
    break;
  }
  sub_1C4FE82D8();
LABEL_41:
  v40 = sub_1C4FE82D8();
  return sub_1C4FE9F54(v40, v41, v42);
}

_QWORD *sub_1C4FE9F54(uint64_t a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      abort();
    v11 = 3 * v10;
    result = operator new(24 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = &result[3 * a2];
    v13 = 24 * a2;
    do
    {
      *(_OWORD *)result = *a3;
      result[2] = *((_QWORD *)a3 + 2);
      result += 3;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2)
    v16 = a2;
  else
    v16 = (v14 - (uint64_t)result) / 24;
  if (v16)
  {
    v17 = result;
    do
    {
      *(_OWORD *)v17 = *a3;
      *((_BYTE *)v17 + 16) = *((_BYTE *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    v12 = &result[3 * a2];
LABEL_25:
    *(_QWORD *)(a1 + 8) = v12;
    return result;
  }
  v18 = v14 + 24 * (a2 - v15);
  v19 = 24 * a2 - 24 * v15;
  do
  {
    v20 = *a3;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(_QWORD *)(a1 + 8) = v18;
  return result;
}

char *sub_1C4FEA0D8(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_1C4FEA2A0(void **a1, unint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        v15 = *a3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[24 * v8];
    v17 = &v16[24 * a2];
    v18 = 24 * a2;
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_QWORD *)v19 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v19 = v20;
      v19 += 24;
      v18 -= 24;
    }
    while (v18);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = &v12[24 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_1C4FEA438(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      bzero(a1[1], 16 * a2);
      v5 += 16 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 4);
    if (v8 >> 60)
      abort();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1C4764EE4();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[16 * (v7 >> 4)];
    v13 = &v11[16 * v10];
    bzero(v12, 16 * a2);
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v5 - 1);
        v12 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = &v11[16 * a2 + v7];
    a1[2] = v13;
    if (v5)
      operator delete(v5);
  }
}

void sub_1C4FEA568(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 5);
        if (v6)
        {
          *((_QWORD *)v4 - 4) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v4 - 8);
        if (v7)
        {
          *((_QWORD *)v4 - 7) = v7;
          operator delete(v7);
        }
        v4 -= 96;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C4FEA5F0(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  uint64_t j;
  int v16;
  int v17;
  char *v18;
  unsigned __int8 *v19;
  std::string::size_type size;
  char *v21;
  unint64_t i;
  char *v23;
  std::string::size_type v24;
  std::string *v25;
  void *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  _BOOL4 v30;
  std::string *p_p;
  std::string::size_type v32;
  std::string *v33;
  std::regex_traits<char>::char_class_type classname;
  int v35;
  char *v36;
  int v37;
  std::string::size_type v38;
  std::string *v39;
  _BYTE *v40;
  uint64_t v41;
  std::string *v42;
  char *v43;
  std::string::size_type v44;
  std::string *v45;
  unint64_t v46;
  std::string *v47;
  std::string::size_type v48;
  uint64_t v50;
  std::string v51;
  std::string v52;
  void *__src[2];
  uint64_t v54;
  std::string __p;

  if (a2 == a3 || *a2 != 91)
    return (uint64_t)a2;
  if (a2 + 1 == a3)
    goto LABEL_145;
  v5 = a2[1];
  v6 = v5 == 94;
  v7 = v5 == 94 ? a2 + 2 : a2 + 1;
  v8 = operator new();
  v9 = sub_1C4FEBBE8(v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
  *(_QWORD *)(a1 + 56) = v9;
  if (v7 == a3)
    goto LABEL_145;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
  {
    sub_1C4FEB9D0(v8, 93);
    ++v7;
  }
  if (v7 == a3)
    goto LABEL_145;
  v10 = 4 - (_QWORD)a3;
  do
  {
    v11 = v7;
    if (v7 == a3)
    {
      v13 = a3;
LABEL_124:
      v7 = v13;
      continue;
    }
    v12 = *v7;
    v13 = v7;
    if (v12 == 93)
      goto LABEL_124;
    memset(&v52, 0, sizeof(v52));
    if (v7 + 1 != a3 && v12 == 91)
    {
      v14 = v7[1];
      switch(v14)
      {
        case '.':
          v7 = (char *)sub_1C4FECAB0(a1, v7 + 2, a3, (uint64_t)&v52);
          v16 = *(_DWORD *)(a1 + 24) & 0x1F0;
          size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
          if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v52.__r_.__value_.__l.__size_;
          if (size)
            goto LABEL_72;
          goto LABEL_28;
        case ':':
          v21 = v7 + 2;
          if (a3 - (v7 + 2) < 2)
            goto LABEL_145;
          for (i = 0; v11[i + 2] != 58 || v11[i + 3] != 93; ++i)
          {
            if (!&v11[v10 + i])
              goto LABEL_145;
          }
          v29 = &v11[i + 2];
          if (v29 == a3)
            goto LABEL_145;
          v30 = *(_DWORD *)(a1 + 24) & 1;
          sub_1C4E61270(&__p, v21, v29, i);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v32 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v32 = __p.__r_.__value_.__l.__size_;
          (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), p_p, (char *)p_p + v32);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = &__p;
          else
            v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
          classname = std::__get_classname((const char *)v33, v30);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!classname)
            goto LABEL_147;
          v35 = 0;
          *(_DWORD *)(v8 + 160) |= classname;
          v36 = &v11[i];
          goto LABEL_121;
        case '=':
          if (a3 - (v7 + 2) < 2)
            goto LABEL_145;
          for (j = 0; v7[j + 2] != 61 || v7[j + 3] != 93; ++j)
          {
            if (!&v7[v10 + j])
              goto LABEL_145;
          }
          v23 = &v7[j + 2];
          if (v23 == a3)
            goto LABEL_145;
          sub_1C4FED4C8((uint64_t)&__p, a1, v7 + 2, v23);
          v24 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v24 = __p.__r_.__value_.__l.__size_;
          if (!v24)
            goto LABEL_146;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &__p;
          else
            v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          sub_1C4FEC9C4((uint64_t)__src, a1, (char *)v25, (char *)v25 + v24);
          v26 = (void *)(HIBYTE(v54) & 0x7F);
          if (v54 < 0)
            v26 = __src[1];
          if (v26)
          {
            v27 = *(_QWORD *)(v8 + 144);
            if (v27 >= *(_QWORD *)(v8 + 152))
            {
              v46 = sub_1C4D9AEFC((unint64_t *)(v8 + 136), (uint64_t)__src);
            }
            else
            {
              if (SHIBYTE(v54) < 0)
              {
                sub_1C47EBC30(*(_BYTE **)(v8 + 144), __src[0], (unint64_t)__src[1]);
              }
              else
              {
                v28 = *(_OWORD *)__src;
                *(_QWORD *)(v27 + 16) = v54;
                *(_OWORD *)v27 = v28;
              }
              v46 = v27 + 24;
            }
            *(_QWORD *)(v8 + 144) = v46;
          }
          else
          {
            v44 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v44 = __p.__r_.__value_.__l.__size_;
            if (v44 == 2)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v47 = &__p;
              else
                v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
              sub_1C4FED2A0(v8, v47->__r_.__value_.__s.__data_[0], v47->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v44 != 1)
                goto LABEL_146;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v45 = &__p;
              else
                v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
              sub_1C4FEB9D0(v8, v45->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(v54) < 0)
            operator delete(__src[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v35 = 0;
          v36 = &v11[j];
LABEL_121:
          v7 = v36 + 4;
          v13 = v11;
          goto LABEL_122;
      }
    }
    v16 = *(_DWORD *)(a1 + 24) & 0x1F0;
LABEL_28:
    if ((v16 | 0x40) != 0x40)
    {
      LOBYTE(v17) = *v7;
LABEL_33:
      std::string::operator=(&v52, v17);
      ++v7;
      goto LABEL_72;
    }
    v17 = *v7;
    if (v17 != 92)
      goto LABEL_33;
    v18 = v7 + 1;
    if (v16)
      sub_1C4FECCC0(a1, v18, a3, &v52);
    else
      v19 = sub_1C4FECBA0(a1, (unsigned __int8 *)v18, a3, &v52, v8);
    v7 = (char *)v19;
LABEL_72:
    if (v7 != a3)
    {
      v37 = *v7;
      if (v37 != 93)
      {
        v40 = v7 + 1;
        if (v7 + 1 != a3 && v37 == 45 && *v40 != 93)
        {
          memset(&__p, 0, sizeof(__p));
          v13 = v7 + 2;
          if (v7 + 2 != a3 && *v40 == 91 && *v13 == 46)
          {
            v41 = sub_1C4FECAB0(a1, v7 + 3, a3, (uint64_t)&__p);
LABEL_130:
            v13 = (char *)v41;
            goto LABEL_131;
          }
          if ((v16 | 0x40) == 0x40)
          {
            LODWORD(v40) = *v40;
            if ((_DWORD)v40 == 92)
            {
              v43 = v7 + 2;
              if (v16)
                sub_1C4FECCC0(a1, v43, a3, &__p);
              else
                v41 = (uint64_t)sub_1C4FECBA0(a1, (unsigned __int8 *)v43, a3, &__p, v8);
              goto LABEL_130;
            }
          }
          else
          {
            LOBYTE(v40) = *v40;
          }
          std::string::operator=(&__p, (std::string::value_type)v40);
LABEL_131:
          *(_OWORD *)__src = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
          v48 = v52.__r_.__value_.__r.__words[2];
          v51 = __p;
          memset(&v52, 0, sizeof(v52));
          v54 = v48;
          memset(&__p, 0, sizeof(__p));
          sub_1C4FECE98(v8, (char *)__src, (char *)&v51);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v51.__r_.__value_.__l.__data_);
          if (SHIBYTE(v54) < 0)
            operator delete(__src[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v35 = 1;
          goto LABEL_122;
        }
      }
    }
    v38 = *((_BYTE *)&v52.__r_.__value_.__s + 23) & 0x7F;
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = v52.__r_.__value_.__l.__size_;
    if (v38)
    {
      if (v38 == 1)
      {
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &v52;
        else
          v39 = (std::string *)v52.__r_.__value_.__r.__words[0];
        sub_1C4FEB9D0(v8, v39->__r_.__value_.__s.__data_[0]);
      }
      else
      {
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v52;
        else
          v42 = (std::string *)v52.__r_.__value_.__r.__words[0];
        sub_1C4FED2A0(v8, v42->__r_.__value_.__s.__data_[0], v42->__r_.__value_.__s.__data_[1]);
      }
    }
    v35 = 1;
    v13 = v7;
LABEL_122:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v35)
        continue;
      goto LABEL_124;
    }
    operator delete(v52.__r_.__value_.__l.__data_);
    if (v35)
      goto LABEL_124;
  }
  while (v11 != v7);
  if (v11 != a3)
  {
    if (*v11 == 45)
    {
      sub_1C4FEB9D0(v8, 45);
      ++v11;
    }
    if (v11 != a3 && *v11 == 93)
      return (uint64_t)(v11 + 1);
  }
LABEL_145:
  sub_1C4FE82D8();
LABEL_146:
  sub_1C4FE82D8();
LABEL_147:
  v50 = sub_1C4FE82D8();
  return sub_1C4FEAC90(v50);
}

uint64_t sub_1C4FEAC90(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    v1 = result;
    result = operator new();
    v2 = *(_DWORD *)(v1 + 28) + 1;
    *(_DWORD *)(v1 + 28) = v2;
    v3 = *(_QWORD *)(v1 + 56);
    v4 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)result = &off_1E813EF58;
    *(_QWORD *)(result + 8) = v4;
    *(_DWORD *)(result + 16) = v2;
    *(_QWORD *)(v3 + 8) = result;
    *(_QWORD *)(v1 + 56) = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8);
  }
  return result;
}

uint64_t sub_1C4FEAD00(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    v3 = result;
    result = operator new();
    v4 = *(_QWORD *)(v3 + 56);
    v5 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)result = &off_1E813EF88;
    *(_QWORD *)(result + 8) = v5;
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(v4 + 8) = result;
    *(_QWORD *)(v3 + 56) = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8);
  }
  return result;
}

_QWORD *sub_1C4FEAD68(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E813ECE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4FEADA8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E813ECE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

unsigned __int8 *sub_1C4FEADF8(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this)
{
  unsigned __int8 *v4;
  int v5;
  std::string *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int8 v10;
  char v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = a2;
  if (a2 == (unsigned __int8 *)a3)
    return v4;
  v5 = (char)*a2;
  if (v5 > 109)
  {
    switch(*a2)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v7) = 10;
          goto LABEL_48;
        }
        v7 = 10;
        goto LABEL_57;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v7) = 13;
          goto LABEL_48;
        }
        v7 = 13;
        goto LABEL_57;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v7) = 9;
          goto LABEL_48;
        }
        v7 = 9;
        goto LABEL_57;
      case 'u':
        if (a2 + 1 == (unsigned __int8 *)a3)
          goto LABEL_62;
        v8 = a2[1];
        if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 && (v8 | 0x20u) - 97 >= 6)
          goto LABEL_62;
        v4 = a2 + 2;
        if (a2 + 2 == (unsigned __int8 *)a3)
          goto LABEL_62;
        v9 = *v4;
        if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
          goto LABEL_62;
        goto LABEL_23;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v7) = 11;
          goto LABEL_48;
        }
        v7 = 11;
        break;
      case 'x':
LABEL_23:
        if (v4 + 1 == (unsigned __int8 *)a3)
          goto LABEL_62;
        v10 = v4[1];
        v11 = -48;
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
          goto LABEL_28;
        v10 |= 0x20u;
        if ((v10 - 97) >= 6u)
          goto LABEL_62;
        v11 = -87;
LABEL_28:
        if (v4 + 2 == (unsigned __int8 *)a3)
          goto LABEL_62;
        v12 = v4[2];
        v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
          goto LABEL_33;
        v12 |= 0x20u;
        if ((v12 - 97) >= 6u)
          goto LABEL_62;
        v13 = -87;
LABEL_33:
        if (this)
          std::string::operator=(this, v12 + 16 * (v10 + v11) + v13);
        else
          sub_1C4FEB0A4(a1, (char)(v12 + 16 * (v10 + v11) + v13));
        v4 += 3;
        return v4;
      default:
        goto LABEL_43;
    }
    goto LABEL_57;
  }
  switch(v5)
  {
    case '0':
      if (this)
      {
        v6 = this;
        LOBYTE(v7) = 0;
        goto LABEL_48;
      }
      v7 = 0;
LABEL_57:
      sub_1C4FEB0A4(a1, v7);
      return ++v4;
    case 'c':
      if (a2 + 1 != (unsigned __int8 *)a3 && ((a2[1] & 0xDF) - 65) <= 0x19u)
      {
        v14 = a2[1] & 0x1F;
        if (this)
          std::string::operator=(this, v14);
        else
          sub_1C4FEB0A4(a1, v14);
        v4 += 2;
        return v4;
      }
      break;
    case 'f':
      if (this)
      {
        v6 = this;
        LOBYTE(v7) = 12;
LABEL_48:
        std::string::operator=(v6, v7);
        return ++v4;
      }
      v7 = 12;
      goto LABEL_57;
    default:
LABEL_43:
      v15 = *a2;
      if ((_DWORD)v15 != 95
        && ((v15 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v15) & 0x500) == 0))
      {
        v7 = (char)v15;
        if (this)
        {
          v6 = this;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
      break;
  }
LABEL_62:
  v17 = sub_1C4FE82D8();
  return (unsigned __int8 *)sub_1C4FEB0A4(v17, v18);
}

uint64_t sub_1C4FEB0A4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = operator new();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &off_1E813EE08;
    *(_QWORD *)(v8 + 8) = v9;
    std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
    *(_BYTE *)(v8 + 40) = result;
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = operator new();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &off_1E813EE38;
    *(_QWORD *)(v8 + 8) = v10;
    result = (uint64_t)std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    *(_BYTE *)(v8 + 40) = a2;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &off_1E813EE68;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

uint64_t sub_1C4FEB1C4(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  std::locale::__imp *v10;
  uint64_t (**v11)();

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = &off_1E813EE98;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = v10;
    result = (uint64_t)std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = &off_1E813EEC8;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &off_1E813EEF8;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

std::locale *sub_1C4FEB2B8(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E813EE08;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1C4FEB308(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E813EE08;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEB368(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_1C4FEB3E0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E813EE38;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1C4FEB430(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E813EE38;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEB490(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

_QWORD *sub_1C4FEB4D8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E813ECE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4FEB518(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E813ECE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEB568(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *sub_1C4FEB5B0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E813EE98;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1C4FEB600(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E813EE98;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEB660(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *sub_1C4FEB744(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E813EEC8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1C4FEB794(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E813EEC8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEB7F4(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

_QWORD *sub_1C4FEB884(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E813ECE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4FEB8C4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E813ECE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4FEB914(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
  {
    v11 = sub_1C4FE82D8();
    sub_1C4FEB9D0(v11, v12);
  }
  else
  {
    v5 = v2 - 1;
    if (*(_BYTE *)(v3 + 24 * v5 + 16)
      && (v7 = v3 + 24 * v5,
          v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
          v9 = *(_QWORD *)(a2 + 16),
          *(_QWORD *)(a2 + 24) - v9 >= v8)
      && !memcmp(*(const void **)v7, *(const void **)(a2 + 16), v8))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 16) = v9 + v8;
      v10 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v10 = 0;
      *(_DWORD *)a2 = -993;
    }
    *(_QWORD *)(a2 + 80) = v10;
  }
}

void sub_1C4FEB9D0(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = &v5[-v6];
      v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        v9 = v4 - v6;
        if (2 * v9 > v8)
          v8 = 2 * v9;
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
          v11 = operator new(v10);
        else
          v11 = 0;
        v19 = &v7[(_QWORD)v11];
        v20 = (char *)v11 + v10;
        v7[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v7[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v6)
        {
          v21 = &v5[~v6];
          do
          {
            v22 = *--v5;
            (v21--)[(_QWORD)v11] = v22;
          }
          while (v5 != (_BYTE *)v6);
LABEL_45:
          v5 = *(_BYTE **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      abort();
    }
    goto LABEL_22;
  }
  v5 = *(_BYTE **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = &v5[-v23];
      v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        v26 = v12 - v23;
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v11 = operator new(v27);
        else
          v11 = 0;
        v19 = &v24[(_QWORD)v11];
        v20 = (char *)v11 + v27;
        v24[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v24[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v23)
        {
          v30 = &v5[~v23];
          do
          {
            v31 = *--v5;
            (v30--)[(_QWORD)v11] = v31;
          }
          while (v5 != (_BYTE *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12)
    goto LABEL_22;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = &v5[-v13];
  v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0)
    goto LABEL_50;
  v16 = v12 - v13;
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
    v11 = operator new(v17);
  else
    v11 = 0;
  v19 = &v14[(_QWORD)v11];
  v20 = (char *)v11 + v17;
  v14[(_QWORD)v11] = v2;
  v18 = (uint64_t)&v14[(_QWORD)v11 + 1];
  if (v5 != (_BYTE *)v13)
  {
    v28 = &v5[~v13];
    do
    {
      v29 = *--v5;
      (v28--)[(_QWORD)v11] = v29;
    }
    while (v5 != (_BYTE *)v13);
    goto LABEL_45;
  }
LABEL_46:
  v11 = v19;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v20;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v18;
}

uint64_t sub_1C4FEBBE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  char v12;
  std::string::size_type size;
  std::string::size_type v14;
  std::string *v15;
  int v16;
  BOOL v18;
  std::locale v20;
  std::string v21;

  *(_QWORD *)a1 = off_1E813EF28;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v20, v11);
  std::locale::name(&v21, &v20);
  v12 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v21.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    else
      v14 = v21.__r_.__value_.__l.__size_;
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v21;
    else
      v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
    v16 = memcmp(v15, "C", v14 != 0);
    v18 = v14 != 1 || v16 != 0;
    if (v12 < 0)
      goto LABEL_20;
  }
  else
  {
    v18 = 1;
    if ((*((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_20:
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v20);
  *(_BYTE *)(a1 + 171) = v18;
  return a1;
}

std::locale *sub_1C4FEBD14(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  a1->__locale_ = (std::locale::__imp *)off_1E813EF28;
  v7 = a1 + 17;
  sub_1C4765410((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  sub_1C4FEC8AC((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t sub_1C4FEBDC0(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  a1->__locale_ = (std::locale::__imp *)off_1E813EF28;
  v7 = a1 + 17;
  sub_1C4765410((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  sub_1C4FEC8AC((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E813ECE8;
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x1CAA32FC0](a1, 0x10F1C4061CF1F02);
}

void sub_1C4FEBE80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  char v6;
  char v7;
  int v8;
  std::string::size_type size;
  std::string::size_type v10;
  std::string *p_s;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  std::string::size_type v27;
  std::string *v28;
  uint64_t v29;
  char *v30;
  BOOL v31;
  char v32;
  unsigned __int8 *v33;
  size_t v34;
  size_t v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  char v43;
  unsigned __int8 v44;
  unsigned __int8 *v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  char v49;
  int v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  std::string::size_type v60;
  std::string *v61;
  uint64_t v62;
  char *v63;
  BOOL v64;
  char v65;
  unsigned __int8 *v66;
  size_t v67;
  size_t v68;
  int v69;
  int v70;
  unsigned __int8 *v71;
  size_t v72;
  size_t v73;
  int v74;
  int v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  const void *v82;
  std::string::size_type v83;
  std::string::size_type v84;
  uint64_t v85;
  BOOL j;
  unsigned __int8 **v87;
  char v88;
  int v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  std::string::size_type v94;
  const void *v95;
  std::string::size_type v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  const void *v103;
  std::string::size_type v104;
  std::string::size_type v105;
  uint64_t v106;
  BOOL i;
  uint64_t v108;
  char v109;
  int v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  const void *v114;
  std::string::size_type v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v124;
  int v125;
  BOOL v126;
  char v127;
  char v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  std::string __p;
  __int16 v138;
  std::string v139;
  std::string __s;

  v2 = a2;
  v4 = *(char **)(a2 + 16);
  v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    v13 = 0;
    v14 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_260;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_85;
  v6 = *v4;
  LOBYTE(v138) = *v4;
  v7 = v4[1];
  HIBYTE(v138) = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    LOBYTE(v138) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v6);
    HIBYTE(v138) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v138;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v139, (const char *)&__s);
  __p = v139;
  v8 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
  size = *((_BYTE *)&v139.__r_.__value_.__s + 23) & 0x7F;
  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v139.__r_.__value_.__l.__size_;
  if (!size)
  {
    v10 = *((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x7F;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = __s.__r_.__value_.__l.__size_;
    if (v10 <= 2)
    {
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_s = &__s;
      else
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 32) + 32))(&v139, *(_QWORD *)(a1 + 32), p_s, (char *)p_s + v10);
      if (v8 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v139;
      v12 = *((_BYTE *)&v139.__r_.__value_.__s + 23) & 0x7F;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v139.__r_.__value_.__l.__size_;
      if (v12 == 12 || v12 == 1)
      {
        std::string::operator=(&__p, &__s);
      }
      else if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      }
    }
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_33;
LABEL_85:
    v14 = 0;
    v13 = 1;
    goto LABEL_86;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v15)
    goto LABEL_85;
LABEL_33:
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120) - v16;
  if (v17)
  {
    v18 = v17 >> 1;
    if ((unint64_t)(v17 >> 1) <= 1)
      v18 = 1;
    v19 = (unsigned __int8 *)(v16 + 1);
    do
    {
      if (v138 == *(v19 - 1) && HIBYTE(v138) == *v19)
        goto LABEL_258;
      v19 += 2;
      --v18;
    }
    while (v18);
  }
  v21 = a1 + 16;
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v14 = 0;
LABEL_195:
    if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
      goto LABEL_236;
    sub_1C4FEC9C4((uint64_t)&__s, v21, (char *)&v138, (char *)&v139);
    v97 = *(_QWORD *)(a1 + 136);
    v98 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    v99 = *(_QWORD *)(a1 + 144) - v97;
    if (!v99)
    {
      if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_236;
    }
    v136 = v14;
    v100 = 0;
    v101 = v99 / 24;
    v102 = *((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x7F;
    v104 = __s.__r_.__value_.__l.__size_;
    v103 = (const void *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v105 = *((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x7F;
    else
      v105 = __s.__r_.__value_.__l.__size_;
    if (v101 <= 1)
      v106 = 1;
    else
      v106 = v99 / 24;
    for (i = 1; ; i = v100 < v101)
    {
      v108 = v97 + 24 * v100;
      v109 = *(_BYTE *)(v108 + 23);
      v110 = v109;
      v111 = v109 & 0x7F;
      if (v110 < 0)
        v111 = *(_QWORD *)(v108 + 8);
      if (v105 != v111)
        goto LABEL_216;
      v112 = v110 >= 0 ? (unsigned __int8 *)(v97 + 24 * v100) : *(unsigned __int8 **)v108;
      if ((v98 & 0x80) == 0)
        break;
      v130 = i;
      v133 = v97;
      v114 = v103;
      v115 = v104;
      if (!memcmp(v103, v112, v104))
      {
        operator delete(__s.__r_.__value_.__l.__data_);
        if (v130)
          goto LABEL_258;
LABEL_222:
        v14 = 1;
LABEL_236:
        if ((char)v138 < 0)
        {
          v119 = *(_DWORD *)(a1 + 164);
          v120 = (v119 >> 7) & 1;
LABEL_249:
          if ((SHIBYTE(v138) & 0x80000000) == 0)
          {
            v121 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * HIBYTE(v138)) & v119;
            v122 = HIBYTE(v138) == 95 ? v120 : 0;
            if (v121 || v122 != 0)
            {
LABEL_259:
              v13 = 2;
              goto LABEL_260;
            }
          }
        }
        else
        {
          v116 = *(_DWORD *)(a1 + 160);
          v117 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
          v118 = *(_DWORD *)(v117 + 4 * v138);
          if ((v118 & v116) == 0 && (v138 != 95 || (v116 & 0x80) == 0)
            || SHIBYTE(v138) < 0
            || (*(_DWORD *)(v117 + 4 * HIBYTE(v138)) & v116) == 0 && ((v116 & 0x80) == 0 || HIBYTE(v138) != 95))
          {
            v119 = *(_DWORD *)(a1 + 164);
            if ((v119 & v118) == 0)
            {
              v120 = (v119 >> 7) & 1;
              if (v138 != 95 || (v119 & 0x80) == 0)
                goto LABEL_249;
            }
            goto LABEL_259;
          }
        }
LABEL_258:
        v14 = 1;
        goto LABEL_259;
      }
      ++v100;
      v104 = v115;
      v103 = v114;
      v97 = v133;
      if (v100 == v106)
        goto LABEL_234;
LABEL_220:
      ;
    }
    if (!(_DWORD)v102)
    {
LABEL_221:
      if (i)
        goto LABEL_258;
      goto LABEL_222;
    }
    v113 = 0;
    while (__s.__r_.__value_.__s.__data_[v113] == v112[v113])
    {
      if (v102 == ++v113)
        goto LABEL_221;
    }
LABEL_216:
    if (++v100 == v106)
    {
      if (v98 < 0)
LABEL_234:
        operator delete(__s.__r_.__value_.__l.__data_);
      v14 = v136;
      goto LABEL_236;
    }
    goto LABEL_220;
  }
  sub_1C4FEC934((uint64_t)&__s, a1 + 16, (char *)&v138, (char *)&v139);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v24 = *(_QWORD *)(a1 + 96) - v22;
  if (v24)
  {
    v25 = 0;
    v26 = v24 / 48;
    v127 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = *((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x7F;
    else
      v27 = __s.__r_.__value_.__l.__size_;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &__s;
    else
      v28 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (v26 <= 1)
      v29 = 1;
    else
      v29 = v24 / 48;
    v30 = (char *)(v22 + 47);
    v31 = 1;
    while (1)
    {
      v32 = *(v30 - 24);
      if (v32 >= 0)
        v33 = (unsigned __int8 *)(v30 - 47);
      else
        v33 = *(unsigned __int8 **)(v30 - 47);
      if (v32 >= 0)
        v34 = v32 & 0x7F;
      else
        v34 = *(_QWORD *)(v30 - 39);
      if (v34 >= v27)
        v35 = v27;
      else
        v35 = v34;
      v36 = memcmp(v28, v33, v35);
      if (v27 >= v34)
        v37 = 0;
      else
        v37 = -1;
      if (v36)
        v37 = v36;
      if ((v37 & 0x80000000) == 0)
      {
        v38 = (unsigned __int8 *)(v30 - 23);
        if (*v30 < 0)
        {
          v39 = *(_QWORD *)(v30 - 15);
          v38 = *(unsigned __int8 **)(v30 - 23);
        }
        else
        {
          v39 = *v30;
        }
        if (v27 >= v39)
          v40 = v39;
        else
          v40 = v27;
        v41 = memcmp(v38, v28, v40);
        if (v39 >= v27)
          v42 = 0;
        else
          v42 = -1;
        if (v41)
          v42 = v41;
        if ((v42 & 0x80000000) == 0)
          break;
      }
      v31 = ++v25 < v26;
      v30 += 48;
      if (v29 == v25)
      {
        v14 = 0;
        v43 = 1;
        goto LABEL_189;
      }
    }
    v43 = 0;
    v14 = 1;
LABEL_189:
    v21 = a1 + 16;
    v23 = v127;
  }
  else
  {
    v31 = 0;
    v14 = 0;
    v43 = 1;
  }
  if (v23 < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v31)
    goto LABEL_195;
  if ((v43 & 1) == 0)
    goto LABEL_259;
  v13 = 2;
LABEL_86:
  v44 = **(_BYTE **)(v2 + 16);
  v139.__r_.__value_.__s.__data_[0] = v44;
  if (*(_BYTE *)(a1 + 169))
  {
    v44 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v44);
    v139.__r_.__value_.__s.__data_[0] = v44;
  }
  v45 = *(unsigned __int8 **)(a1 + 40);
  v46 = *(_QWORD *)(a1 + 48) - (_QWORD)v45;
  if (v46)
  {
    if (v46 <= 1)
      v46 = 1;
    while (1)
    {
      v47 = *v45++;
      if (v47 == v44)
        break;
      if (!--v46)
        goto LABEL_93;
    }
LABEL_230:
    v14 = 1;
    goto LABEL_260;
  }
LABEL_93:
  v48 = *(_DWORD *)(a1 + 164);
  if (v48 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v44 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v44) & v48) == 0)
    {
      v50 = (v48 >> 7) & 1;
      v49 = v44 == 95 ? v50 : 0;
    }
    else
    {
      v49 = 1;
    }
    v51 = *(void **)(a1 + 72);
    v52 = memchr(*(void **)(a1 + 64), (char)v44, (size_t)v51 - *(_QWORD *)(a1 + 64));
    v53 = v52 ? v52 : v51;
    if ((v49 & 1) == 0 && v53 == v51)
      goto LABEL_230;
  }
  v54 = *(_QWORD *)(a1 + 88);
  v55 = *(_QWORD *)(a1 + 96);
  if (v54 != v55)
  {
    v134 = v14;
    if (*(_BYTE *)(a1 + 170))
    {
      sub_1C4FEC934((uint64_t)&__s, a1 + 16, (char *)&v139, &v139.__r_.__value_.__s.__data_[1]);
      v54 = *(_QWORD *)(a1 + 88);
      v55 = *(_QWORD *)(a1 + 96);
      v56 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v56 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v44;
    }
    v57 = v55 - v54;
    if (v57)
    {
      v128 = v56;
      v131 = v13;
      v58 = 0;
      v59 = v57 / 48;
      if (v56 >= 0)
        v60 = v56 & 0x7F;
      else
        v60 = __s.__r_.__value_.__l.__size_;
      if (v56 >= 0)
        v61 = &__s;
      else
        v61 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v59 <= 1)
        v62 = 1;
      else
        v62 = v57 / 48;
      v63 = (char *)(v54 + 47);
      v64 = 1;
      while (1)
      {
        v65 = *(v63 - 24);
        if (v65 >= 0)
          v66 = (unsigned __int8 *)(v63 - 47);
        else
          v66 = *(unsigned __int8 **)(v63 - 47);
        if (v65 >= 0)
          v67 = v65 & 0x7F;
        else
          v67 = *(_QWORD *)(v63 - 39);
        if (v67 >= v60)
          v68 = v60;
        else
          v68 = v67;
        v69 = memcmp(v61, v66, v68);
        if (v60 >= v67)
          v70 = 0;
        else
          v70 = -1;
        if (v69)
          v70 = v69;
        if ((v70 & 0x80000000) == 0)
        {
          v71 = (unsigned __int8 *)(v63 - 23);
          if (*v63 < 0)
          {
            v72 = *(_QWORD *)(v63 - 15);
            v71 = *(unsigned __int8 **)(v63 - 23);
          }
          else
          {
            v72 = *v63;
          }
          if (v60 >= v72)
            v73 = v72;
          else
            v73 = v60;
          v74 = memcmp(v71, v61, v73);
          if (v72 >= v60)
            v75 = 0;
          else
            v75 = -1;
          if (v74)
            v75 = v74;
          if ((v75 & 0x80000000) == 0)
            break;
        }
        v64 = ++v58 < v59;
        v63 += 48;
        if (v62 == v58)
        {
          v14 = v134;
          goto LABEL_154;
        }
      }
      v14 = 1;
LABEL_154:
      v13 = v131;
      if ((v128 & 0x80) == 0)
        goto LABEL_156;
    }
    else
    {
      v64 = 0;
      if ((v56 & 0x80) == 0)
        goto LABEL_156;
    }
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_156:
    if (v64)
      goto LABEL_260;
  }
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_228;
  sub_1C4FEC9C4((uint64_t)&__s, a1 + 16, (char *)&v139, &v139.__r_.__value_.__s.__data_[1]);
  v76 = *(_QWORD *)(a1 + 136);
  v77 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v78 = *(_QWORD *)(a1 + 144) - v76;
  if (!v78)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_228:
    if (v139.__r_.__value_.__s.__data_[0] < 0
      || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4
                                                               * v139.__r_.__value_.__s.__data_[0]) & *(_DWORD *)(a1 + 160)) == 0)
    {
      if (((v139.__r_.__value_.__s.__data_[0] == 95) & ((*(_DWORD *)(a1 + 160) & 0x80u) >> 7)) != 0)
        v14 = 1;
      goto LABEL_260;
    }
    goto LABEL_230;
  }
  v132 = v13;
  v135 = v14;
  v79 = 0;
  v80 = v78 / 24;
  v81 = *((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x7F;
  v83 = __s.__r_.__value_.__l.__size_;
  v82 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v84 = *((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x7F;
  else
    v84 = __s.__r_.__value_.__l.__size_;
  if (v80 <= 1)
    v85 = 1;
  else
    v85 = v78 / 24;
  for (j = 1; ; j = v79 < v80)
  {
    v87 = (unsigned __int8 **)(v76 + 24 * v79);
    v88 = *((_BYTE *)v87 + 23);
    v89 = v88;
    v90 = (unsigned __int8 *)(v88 & 0x7F);
    if (v89 < 0)
      v90 = v87[1];
    if ((unsigned __int8 *)v84 == v90)
      break;
LABEL_178:
    if (++v79 == v85)
    {
      if (v77 < 0)
LABEL_226:
        operator delete(__s.__r_.__value_.__l.__data_);
      v14 = v135;
      v13 = v132;
      goto LABEL_228;
    }
LABEL_182:
    ;
  }
  if (v89 >= 0)
    v91 = (unsigned __int8 *)(v76 + 24 * v79);
  else
    v91 = *v87;
  if ((v77 & 0x80) == 0)
  {
    if (!(_DWORD)v81)
    {
LABEL_183:
      v14 = 1;
      v13 = v132;
      if (!j)
        goto LABEL_228;
      goto LABEL_260;
    }
    v92 = 0;
    while (__s.__r_.__value_.__s.__data_[v92] == v91[v92])
    {
      if (v81 == ++v92)
        goto LABEL_183;
    }
    goto LABEL_178;
  }
  v126 = j;
  v129 = v2;
  v93 = v76;
  v94 = v84;
  v95 = v82;
  v96 = v83;
  if (memcmp(v82, v91, v83))
  {
    ++v79;
    v83 = v96;
    v82 = v95;
    v84 = v94;
    v76 = v93;
    v2 = v129;
    if (v79 == v85)
      goto LABEL_226;
    goto LABEL_182;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  v14 = 1;
  v2 = v129;
  v13 = v132;
  if (!v126)
    goto LABEL_228;
LABEL_260:
  if (v14 == *(unsigned __int8 *)(a1 + 168))
  {
    v124 = 0;
    v125 = -993;
  }
  else
  {
    *(_QWORD *)(v2 + 16) += v13;
    v124 = *(_QWORD *)(a1 + 8);
    v125 = -995;
  }
  *(_DWORD *)v2 = v125;
  *(_QWORD *)(v2 + 80) = v124;
}

void sub_1C4FEC8AC(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C4FEC934(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  void **v5;
  char *v6;
  void *__p[2];
  char v8;

  sub_1C4E61270(__p, a3, a4, a4 - a3);
  if (v8 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = (char *)(v8 & 0x7F);
  if (v8 < 0)
    v6 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v5, &v6[(_QWORD)v5]);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1C4FEC9C4(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  void **v6;
  char *v7;
  char v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  void *__p[2];
  char v13;

  sub_1C4E61270(__p, a3, a4, a4 - a3);
  if (v13 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = (char *)(v13 & 0x7F);
  if (v13 < 0)
    v7 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, &v7[(_QWORD)v6]);
  v8 = *(_BYTE *)(a1 + 23);
  v9 = v8;
  v10 = v8 & 0x7F;
  if (v9 < 0)
    v10 = *(_QWORD *)(a1 + 8);
  if (v10 != 1)
  {
    if (v10 == 12)
    {
      if (v9 >= 0)
        v11 = (_BYTE *)a1;
      else
        v11 = *(_BYTE **)a1;
      v11[11] = v11[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if (v13 < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C4FECAB0(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;
  std::string *v17;
  __int128 v18;
  unint64_t v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    ++v6;
    --v5;
  }
  if (v7 == a3)
  {
LABEL_15:
    sub_1C4FE82D8();
  }
  else
  {
    sub_1C4FED4C8((uint64_t)&v18, a1, a2, v6);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = v18;
    v10 = v19;
    *(_QWORD *)(a4 + 16) = v19;
    v10 >>= 56;
    v11 = (char)v10;
    v12 = v10 & 0x7F;
    if (v11 < 0)
      v12 = *(_QWORD *)(a4 + 8);
    if ((unint64_t)(v12 - 1) < 2)
      return (uint64_t)(v6 + 2);
  }
  v14 = sub_1C4FE82D8();
  return sub_1C4FECBA0(v14, v15, v16, v17);
}

unsigned __int8 *sub_1C4FECBA0(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this, uint64_t a5)
{
  int v6;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;
  int v12;
  int v13;
  int v14;
  std::string *v15;

  if (a2 != (unsigned __int8 *)a3)
  {
    v6 = (char)*a2;
    if (v6 <= 97)
    {
      if (v6 <= 82)
      {
        if (*a2)
        {
          if (v6 == 68)
          {
            v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
            *(_DWORD *)(a5 + 164) = v7;
            return a2 + 1;
          }
          return sub_1C4FEADF8(a1, a2, a3, this);
        }
        v9 = 0;
        v10 = this;
        goto LABEL_19;
      }
      if (v6 == 83)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x4000;
        goto LABEL_21;
      }
      if (v6 != 87)
        return sub_1C4FEADF8(a1, a2, a3, this);
      *(_DWORD *)(a5 + 164) |= 0x500u;
      sub_1C4FED640(a5);
      return a2 + 1;
    }
    if (v6 > 114)
    {
      if (v6 == 115)
      {
        v8 = *(_DWORD *)(a5 + 160) | 0x4000;
        goto LABEL_23;
      }
      if (v6 == 119)
      {
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_1C4FEB9D0(a5, 95);
        return a2 + 1;
      }
    }
    else
    {
      if (v6 == 98)
      {
        v10 = this;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return a2 + 1;
      }
      if (v6 == 100)
      {
        v8 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_23:
        *(_DWORD *)(a5 + 160) = v8;
        return a2 + 1;
      }
    }
    return sub_1C4FEADF8(a1, a2, a3, this);
  }
  v12 = sub_1C4FE82D8();
  return (unsigned __int8 *)sub_1C4FECCC0(v12, v13, v14, v15);
}

void sub_1C4FECCC0(uint64_t a1, char *a2, char *a3, std::string *this)
{
  uint64_t v5;
  std::string *v6;
  std::string::value_type v7;
  char v8;
  char v9;
  int v10;
  std::string::value_type v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if (a2 == a3)
    goto LABEL_46;
  v5 = *a2;
  if ((int)v5 > 97)
  {
    switch((int)v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        v5 = 10;
        goto LABEL_45;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        v5 = 13;
        goto LABEL_45;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        v5 = 9;
        goto LABEL_45;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        v5 = 11;
        goto LABEL_45;
      default:
        if ((_DWORD)v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          v5 = 8;
        }
        else
        {
          if ((_DWORD)v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          v5 = 12;
        }
        break;
    }
    goto LABEL_45;
  }
  if ((int)v5 > 91)
  {
    if ((_DWORD)v5 != 92)
    {
      if ((_DWORD)v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return;
      }
      v5 = 7;
LABEL_45:
      sub_1C4FEB0A4(a1, v5);
      return;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_45;
  }
  if ((_DWORD)v5 == 34 || (_DWORD)v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) == 0x30)
  {
    v7 = v5 - 48;
    if (a2 + 1 != a3)
    {
      v8 = a2[1];
      if ((v8 & 0xF8) == 0x30)
      {
        v7 = v8 + 8 * v7 - 48;
        if (a2 + 2 != a3)
        {
          v9 = a2[2];
          v10 = v9 & 0xF8;
          v11 = v9 + 8 * v7 - 48;
          if (v10 == 48)
            v7 = v11;
        }
      }
    }
    v5 = v7;
    if (this)
    {
      std::string::operator=(this, v7);
      return;
    }
    goto LABEL_45;
  }
LABEL_46:
  v12 = sub_1C4FE82D8();
  sub_1C4FECE98(v12, v13, v14);
}

void sub_1C4FECE98(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  int v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char v35;
  _BYTE *v36;
  char *v37;
  char v38;
  _BYTE *v39;
  unint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    sub_1C4FEC934((uint64_t)&v46, a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    sub_1C4FEC934((uint64_t)v44, a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v48 = v46;
    v49 = v47;
    v47 = 0;
    *(_OWORD *)__p = *(_OWORD *)v44;
    v51 = v45;
    v44[0] = 0;
    v44[1] = 0;
    v45 = 0;
    v46 = 0uLL;
    v29 = *(_QWORD *)(a1 + 96);
    if (v29 >= *(_QWORD *)(a1 + 104))
    {
      v30 = sub_1C4FED890((void **)(a1 + 88), (uint64_t)v48);
      v31 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v30;
      if (v31 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v29 = *(_OWORD *)v48;
      *(_QWORD *)(v29 + 16) = v49;
      v48[1] = 0;
      v49 = 0;
      v48[0] = 0;
      *(_OWORD *)(v29 + 24) = *(_OWORD *)__p;
      *(_QWORD *)(v29 + 40) = v51;
      *(_QWORD *)(a1 + 96) = v29 + 48;
    }
    if (SHIBYTE(v49) < 0)
      operator delete(v48[0]);
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v47) < 0)
    {
      v32 = (void *)v46;
LABEL_83:
      operator delete(v32);
    }
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v33 = *((_QWORD *)a3 + 1)) : (v33 = a3[23]), v33 != 1))
    {
      v43 = sub_1C4FE82D8();
      sub_1C4FED2A0(v43);
      return;
    }
    if (*(_BYTE *)(a1 + 169))
    {
      v34 = a2;
      if (a2[23] < 0)
        v34 = *(char **)a2;
      v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
      v36 = v4;
      if (v4[23] < 0)
        v36 = *(_BYTE **)v4;
      *v36 = v35;
      v37 = v3;
      if (v3[23] < 0)
        v37 = *(char **)v3;
      v38 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v37);
      v39 = v3;
      if (v3[23] < 0)
        v39 = *(_BYTE **)v3;
      *v39 = v38;
    }
    *(_OWORD *)v48 = *(_OWORD *)v4;
    v49 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v51 = *((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = 0;
    v40 = *(_QWORD *)(a1 + 96);
    if (v40 >= *(_QWORD *)(a1 + 104))
    {
      v41 = sub_1C4FED890((void **)(a1 + 88), (uint64_t)v48);
      v42 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v41;
      if (v42 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)v48;
      *(_QWORD *)(v40 + 16) = v49;
      v48[1] = 0;
      v49 = 0;
      v48[0] = 0;
      *(_OWORD *)(v40 + 24) = *(_OWORD *)__p;
      *(_QWORD *)(v40 + 40) = v51;
      *(_QWORD *)(a1 + 96) = v40 + 48;
    }
    if (SHIBYTE(v49) < 0)
    {
      v32 = v48[0];
      goto LABEL_83;
    }
  }
}

void sub_1C4FED2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  _WORD *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  __int16 v35;
  __int16 v36;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = *(char **)(a1 + 112);
      v10 = v8 - v9;
      if (v8 - v9 > -3)
      {
        v11 = v10 >> 1;
        v12 = v7 - (_QWORD)v9;
        if (v12 <= (v10 >> 1) + 1)
          v13 = v11 + 1;
        else
          v13 = v12;
        if (v12 >= 0x7FFFFFFFFFFFFFFELL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (!v14)
        {
          v15 = 0;
          goto LABEL_28;
        }
        if ((v14 & 0x8000000000000000) == 0)
        {
          v15 = (char *)operator new(2 * v14);
LABEL_28:
          v25 = &v15[2 * v11];
          v26 = &v15[2 * v14];
          *(_WORD *)v25 = v6;
          v24 = v25 + 2;
          if (v8 == v9)
            goto LABEL_49;
          do
          {
            v27 = *((_WORD *)v8 - 1);
            v8 -= 2;
            *((_WORD *)v25 - 1) = v27;
            v25 -= 2;
          }
          while (v8 != v9);
          goto LABEL_48;
        }
LABEL_53:
        sub_1C4764EE4();
      }
LABEL_52:
      abort();
    }
    goto LABEL_26;
  }
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v16 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 >= v16)
    {
      v17 = *(char **)(a1 + 112);
      v18 = v8 - v17;
      if (v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - (_QWORD)v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
        {
          if (v22 < 0)
            goto LABEL_53;
          v23 = (char *)operator new(2 * v22);
        }
        else
        {
          v23 = 0;
        }
        v25 = &v23[2 * v19];
        v26 = &v23[2 * v22];
        *(_WORD *)v25 = v6;
        v24 = v25 + 2;
        if (v8 == v17)
          goto LABEL_49;
        do
        {
          v35 = *((_WORD *)v8 - 1);
          v8 -= 2;
          *((_WORD *)v25 - 1) = v35;
          v25 -= 2;
        }
        while (v8 != v17);
        goto LABEL_48;
      }
      goto LABEL_52;
    }
LABEL_26:
    *(_WORD *)v8 = v6;
    v24 = v8 + 2;
    goto LABEL_51;
  }
  if ((unint64_t)v8 < v16)
    goto LABEL_26;
  v28 = *(char **)(a1 + 112);
  v29 = v8 - v28;
  if (v8 - v28 <= -3)
    goto LABEL_52;
  v30 = v29 >> 1;
  v31 = v16 - (_QWORD)v28;
  if (v31 <= (v29 >> 1) + 1)
    v32 = v30 + 1;
  else
    v32 = v31;
  if (v31 >= 0x7FFFFFFFFFFFFFFELL)
    v33 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v33 = v32;
  if (v33)
  {
    if (v33 < 0)
      goto LABEL_53;
    v34 = (char *)operator new(2 * v33);
  }
  else
  {
    v34 = 0;
  }
  v25 = &v34[2 * v30];
  v26 = &v34[2 * v33];
  *(_WORD *)v25 = v6;
  v24 = v25 + 2;
  if (v8 == v28)
    goto LABEL_49;
  do
  {
    v36 = *((_WORD *)v8 - 1);
    v8 -= 2;
    *((_WORD *)v25 - 1) = v36;
    v25 -= 2;
  }
  while (v8 != v28);
LABEL_48:
  v8 = *(char **)(a1 + 112);
LABEL_49:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v8)
    operator delete(v8);
LABEL_51:
  *(_QWORD *)(a1 + 120) = v24;
}

void sub_1C4FED4C8(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::size_type size;
  std::string *p_str;
  unint64_t v8;
  int v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  unint64_t v13;
  uint64_t v14;
  std::string v15;
  std::string __str;

  sub_1C4E61270(&__str, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  size = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    std::__get_collation_name(&v15, (const char *)p_str);
    *(_OWORD *)a1 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    v8 = v15.__r_.__value_.__r.__words[2];
    *(_QWORD *)(a1 + 16) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
    v8 >>= 56;
    v9 = (char)v8;
    v10 = v8 & 0x7F;
    if (v9 < 0)
      v10 = *(_QWORD *)(a1 + 8);
    if (!v10)
    {
      v11 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = __str.__r_.__value_.__l.__size_;
      if (v11 <= 2)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &__str;
        else
          v12 = (std::string *)__str.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v15, *(_QWORD *)(a2 + 16), v12, (char *)v12 + v11);
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        *(_OWORD *)a1 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
        v13 = v15.__r_.__value_.__r.__words[2];
        *(_QWORD *)(a1 + 16) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
        v14 = HIBYTE(v13) & 0x7F;
        if ((v13 & 0x8000000000000000) != 0)
          v14 = *(_QWORD *)(a1 + 8);
        if (v14 == 12 || v14 == 1)
        {
          std::string::operator=((std::string *)a1, &__str);
        }
        else if (SHIBYTE(v13) < 0)
        {
          **(_BYTE **)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
        else
        {
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 23) = 0;
        }
      }
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1C4FED640(uint64_t a1)
{
  char v2;
  char v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  char v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  char v33;
  _BYTE *v34;
  char v35;

  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), 95);
    v3 = v2;
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 < v4)
    {
      *v5 = v2;
      v6 = (uint64_t)(v5 + 1);
LABEL_32:
      *(_QWORD *)(a1 + 72) = v6;
      return;
    }
    v15 = *(_QWORD *)(a1 + 64);
    v16 = &v5[-v15];
    v17 = (uint64_t)&v5[-v15 + 1];
    if (v17 >= 0)
    {
      v18 = v4 - v15;
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
        v20 = operator new(v19);
      else
        v20 = 0;
      v22 = &v20[v19];
      v16[(_QWORD)v20] = v3;
      v6 = (uint64_t)&v16[(_QWORD)v20 + 1];
      if (v5 == (_BYTE *)v15)
      {
        v20 = &v16[(_QWORD)v20];
      }
      else
      {
        v23 = &v5[~v15];
        do
        {
          v24 = *--v5;
          (v23--)[(_QWORD)v20] = v24;
        }
        while (v5 != (_BYTE *)v15);
        v5 = *(_BYTE **)(a1 + 64);
      }
      *(_QWORD *)(a1 + 64) = v20;
      *(_QWORD *)(a1 + 72) = v6;
      *(_QWORD *)(a1 + 80) = v22;
      if (v5)
        operator delete(v5);
      goto LABEL_32;
    }
LABEL_55:
    abort();
  }
  v8 = *(_BYTE **)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 >= v7)
    {
      v9 = *(_QWORD *)(a1 + 64);
      v10 = &v8[-v9];
      v11 = (uint64_t)&v8[-v9 + 1];
      if (v11 < 0)
        goto LABEL_55;
      v12 = v7 - v9;
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v14 = operator new(v13);
      else
        v14 = 0;
      v30 = &v10[(_QWORD)v14];
      v31 = (char *)v14 + v13;
      v10[(_QWORD)v14] = 95;
      v21 = (uint64_t)&v10[(_QWORD)v14 + 1];
      if (v8 != (_BYTE *)v9)
      {
        v32 = &v8[~v9];
        do
        {
          v33 = *--v8;
          (v32--)[(_QWORD)v14] = v33;
        }
        while (v8 != (_BYTE *)v9);
LABEL_50:
        v8 = *(_BYTE **)(a1 + 64);
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else if ((unint64_t)v8 >= v7)
  {
    v25 = *(_QWORD *)(a1 + 64);
    v26 = &v8[-v25];
    v27 = (uint64_t)&v8[-v25 + 1];
    if (v27 < 0)
      goto LABEL_55;
    v28 = v7 - v25;
    if (2 * v28 > v27)
      v27 = 2 * v28;
    if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
      v14 = operator new(v29);
    else
      v14 = 0;
    v30 = &v26[(_QWORD)v14];
    v31 = (char *)v14 + v29;
    v26[(_QWORD)v14] = 95;
    v21 = (uint64_t)&v26[(_QWORD)v14 + 1];
    if (v8 != (_BYTE *)v25)
    {
      v34 = &v8[~v25];
      do
      {
        v35 = *--v8;
        (v34--)[(_QWORD)v14] = v35;
      }
      while (v8 != (_BYTE *)v25);
      goto LABEL_50;
    }
LABEL_51:
    v14 = v30;
LABEL_52:
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v21;
    *(_QWORD *)(a1 + 80) = v31;
    if (v8)
      operator delete(v8);
    goto LABEL_54;
  }
  *v8 = 95;
  v21 = (uint64_t)(v8 + 1);
LABEL_54:
  *(_QWORD *)(a1 + 72) = v21;
}

char *sub_1C4FED890(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_1C4764EE4();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v2];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (v16 != v13)
    {
      if (*((char *)v16 - 1) < 0)
        operator delete(*(v16 - 3));
      if (*((char *)v16 - 25) < 0)
        operator delete(*(v16 - 6));
      v16 -= 6;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *sub_1C4FEDA18(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E813ECE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4FEDA58(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E813ECE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEDAA8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_1C4FEDAD8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E813ECE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4FEDB18(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E813ECE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEDB68(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_1C4FEDBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *result;

  v14 = (_QWORD *)operator new();
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 8);
  *v14 = &off_1E813ECB8;
  v14[1] = v16;
  *(_QWORD *)(v15 + 8) = 0;
  v17 = operator new();
  v18 = *(_DWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)v17 = &off_1E813EFB8;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  *(_DWORD *)(v17 + 40) = v18;
  *(_DWORD *)(v17 + 44) = a5;
  *(_DWORD *)(v17 + 48) = a6;
  *(_BYTE *)(v17 + 52) = a7;
  *(_QWORD *)(a4 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &off_1E813F018;
  result[1] = v17;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(a4 + 8) = v17;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

_QWORD *sub_1C4FEDCB4(_QWORD *result, _QWORD *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  _QWORD *v6;

  if (result != a2)
  {
    v3 = *(unsigned __int8 *)result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      result = (_QWORD *)((char *)result + 1);
      if (result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *(unsigned __int8 *)result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
          {
            v6 = (_QWORD *)sub_1C4FE82D8();
            return sub_1C4FEDD4C(v6);
          }
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          result = (_QWORD *)((char *)result + 1);
          if (result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C4FEDD4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E813EFE8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E813ECE8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1C4FEDDAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E813EFE8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E813ECE8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEDE1C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  const double *v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  const double *v22;
  float64x2_t v23;
  uint64_t v24;
  float64x2_t *v25;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *(_QWORD *)(result + 24);
    v7 = *(_QWORD *)(result + 32);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
      v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (v8)
      {
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
        *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
        v12 = *(_DWORD *)(result + 44);
        v13 = *(_DWORD *)(result + 48);
        if (v12 != v13)
        {
          v14 = (v12 - 1);
          v15 = (const double *)(a2 + 24);
          v16 = vld1q_dup_f64(v15);
          v17 = (v13 - 1) - v14;
          v18 = (float64x2_t *)(*(_QWORD *)(a2 + 32) + 24 * v14 + 16);
          do
          {
            v18[-1] = v16;
            LOBYTE(v18->f64[0]) = 0;
            v18 = (float64x2_t *)((char *)v18 + 24);
            --v17;
          }
          while (v17);
        }
        return result;
      }
LABEL_30:
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
      return result;
    }
    goto LABEL_28;
  }
  *v4 = 0;
  if (!*(_QWORD *)(result + 32))
  {
    *(_DWORD *)a2 = -994;
    goto LABEL_30;
  }
  if (!*(_QWORD *)(result + 24))
  {
LABEL_28:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v19 = *(_DWORD *)(result + 44);
  v20 = *(_DWORD *)(result + 48);
  if (v19 != v20)
  {
    v21 = (v19 - 1);
    v22 = (const double *)(a2 + 24);
    v23 = vld1q_dup_f64(v22);
    v24 = (v20 - 1) - v21;
    v25 = (float64x2_t *)(*(_QWORD *)(a2 + 32) + 24 * v21 + 16);
    do
    {
      v25[-1] = v23;
      LOBYTE(v25->f64[0]) = 0;
      v25 = (float64x2_t *)((char *)v25 + 24);
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1C4FEDF70(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  const double *v6;
  float64x2_t v7;
  uint64_t v8;
  float64x2_t *v9;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
  }
  else
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
    v3 = *(_DWORD *)(result + 44);
    *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
    v4 = *(_DWORD *)(result + 48);
    if (v3 != v4)
    {
      v5 = (v3 - 1);
      v6 = (const double *)(a3 + 24);
      v7 = vld1q_dup_f64(v6);
      v8 = (v4 - 1) - v5;
      v9 = (float64x2_t *)(*(_QWORD *)(a3 + 32) + 24 * v5 + 16);
      do
      {
        v9[-1] = v7;
        LOBYTE(v9->f64[0]) = 0;
        v9 = (float64x2_t *)((char *)v9 + 24);
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

_QWORD *sub_1C4FEDFF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E813EFE8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E813ECE8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1C4FEE050(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E813EFE8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E813ECE8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4FEE0C4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEE0D8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_1C4FEE0EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E813EFE8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E813ECE8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1C4FEE14C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E813EFE8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E813ECE8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4FEE1BC(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_1C4FEE1C8(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void sub_1C4FEE1F0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEE204(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

char *sub_1C4FEE218(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v6;
  int v7;
  int v8;
  char *v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v9 = a2 + 1;
  v8 = *a2;
  if (a2 + 1 != a3 || v8 != 36)
  {
    if ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0)
    {
      sub_1C4FEB0A4(a1, (char)v8);
      goto LABEL_28;
    }
    if (v9 == a3 || v8 != 92)
    {
      if (v8 == 46)
      {
        v17 = (_QWORD *)operator new();
        v18 = *(_QWORD *)(a1 + 56);
        v19 = *(_QWORD *)(v18 + 8);
        *v17 = &off_1E813F0A8;
        v17[1] = v19;
        *(_QWORD *)(v18 + 8) = v17;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        goto LABEL_28;
      }
    }
    else
    {
      v12 = *v9;
      if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x580000000000441) != 0)
      {
        sub_1C4FEB0A4(a1, (char)v12);
        v9 = v3 + 2;
        goto LABEL_28;
      }
    }
  }
  v10 = sub_1C4FEA5F0(a1, a2, a3);
  if (v3 != (char *)v10)
  {
    while (1)
    {
LABEL_5:
      v9 = (char *)v10;
      if ((char *)v10 == v3)
        return v3;
LABEL_28:
      if (v9 == a3)
        return a3;
      v3 = (char *)(*(_DWORD *)(a1 + 28) + 1);
      v20 = *v9;
      if (v20 == 42)
      {
        sub_1C4FEDBA0(a1, 0, -1, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1, 1);
        return ++v9;
      }
      if (v9 + 1 == a3 || v20 != 92 || v9[1] != 123)
        return v9;
      v33 = 0;
      v22 = (char *)sub_1C4FEDCB4(v9 + 2, a3, &v33);
      if (v9 + 2 != v22)
      {
        if (v22 == a3)
          goto LABEL_60;
        v23 = v22 + 1;
        v24 = *v22;
        if (v24 != 44)
        {
          if (v23 != a3 && v24 == 92 && *v23 == 125)
          {
            v9 = v22 + 2;
            v26 = v33;
            v30 = a1;
            v27 = v33;
            goto LABEL_59;
          }
LABEL_60:
          sub_1C4FE82D8();
          goto LABEL_61;
        }
        v32 = -1;
        v25 = (char *)sub_1C4FEDCB4(v22 + 1, a3, &v32);
        if (v25 == a3 || v25 + 1 == a3 || *v25 != 92 || v25[1] != 125)
          goto LABEL_60;
        v27 = v32;
        v26 = v33;
        if (v32 == -1)
        {
          v27 = -1;
LABEL_58:
          v9 = &v25[2 * (v25[1] == 125)];
          v30 = a1;
LABEL_59:
          sub_1C4FEDBA0(v30, v26, v27, v6, v7 + 1, (int)v3, 1);
          return v9;
        }
        if (v32 >= v33)
          goto LABEL_58;
      }
      sub_1C4FE82D8();
LABEL_47:
      v28 = sub_1C4FEE670(a1, v13);
      v29 = 2;
      if (!v28)
        v29 = 0;
      v10 = (uint64_t)&v3[v29];
    }
  }
  if (v9 == a3 || *v3 != 92)
    return v3;
  v13 = *v9;
  if (v13 != 40)
    goto LABEL_47;
  v10 = (uint64_t)(v3 + 2);
  sub_1C4FEAC90(a1);
  v14 = *(_DWORD *)(a1 + 28);
  do
  {
    v15 = (char *)v10;
    v10 = sub_1C4FEE218(a1, v10, a3);
  }
  while (v15 != (char *)v10);
  if (v15 == a3)
  {
    v16 = a3;
  }
  else
  {
    if (v15 + 1 == a3 || *v15 != 92)
      goto LABEL_61;
    v16 = &v15[2 * (v15[1] == 41)];
    v10 = (uint64_t)v16;
  }
  if (v16 != v15)
  {
    sub_1C4FEAD00(a1, v14);
    goto LABEL_5;
  }
LABEL_61:
  v31 = (_QWORD *)sub_1C4FE82D8();
  return (char *)sub_1C4FEE5A0(v31);
}

_QWORD *sub_1C4FEE5A0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E813ECE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C4FEE5E0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E813ECE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4FEE630(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_1C4FEE670(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;

  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > *(_DWORD *)(a1 + 28))
  {
    v3 = sub_1C4FE82D8();
    return sub_1C4FEE6CC(v3);
  }
  else
  {
    sub_1C4FEB1C4(a1, a2 - 48);
    return 1;
  }
}

std::locale *sub_1C4FEE6CC(uint64_t a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = (char *)sub_1C4FEE728(a1, a2, a3);
  if (v6 == a2)
  {
    v9 = sub_1C4FE82D8();
    return sub_1C4FEE728(v9, v10, v11);
  }
  else
  {
    do
    {
      v7 = v6;
      v6 = (char *)sub_1C4FEE728(a1, v6, a3);
    }
    while (v7 != v6);
    return (std::locale *)v7;
  }
}

std::locale *sub_1C4FEE728(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  int v12;
  signed __int8 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  int v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    v14 = sub_1C4FEA5F0(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = *a2;
  v10 = (v8 - 36);
  if (v10 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v10 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      sub_1C4FEB0A4(a1, (char)v9);
LABEL_33:
      v11 = a2 + 1;
      return sub_1C4FE911C(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v11 = a2 + 1;
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_1E813F0A8;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return sub_1C4FE911C(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    goto LABEL_24;
  }
  v12 = *v11;
  v13 = *v11;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    sub_1C4FEB0A4(a1, v13);
    v11 = a2 + 2;
    return sub_1C4FE911C(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    sub_1C4FECCC0(a1, a2 + 1, a3, 0);
  }
  else
  {
    v15 = sub_1C4FEE670(a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = (uint64_t)&a2[v16];
  }
  if ((char *)v14 == a2)
  {
    v9 = *a2;
    goto LABEL_22;
  }
LABEL_25:
  if ((char *)v14 != a2 || (char *)v14 == a3)
  {
LABEL_37:
    v11 = (char *)v14;
    if ((char *)v14 != a2)
      return sub_1C4FE911C(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    return (std::locale *)a2;
  }
  v20 = *a2;
  if (v20 == 36)
  {
    v21 = operator new();
    v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v23 = *(_QWORD *)(a1 + 56);
    v24 = *(_QWORD *)(v23 + 8);
    v25 = &off_1E813ED48;
    goto LABEL_32;
  }
  if (v20 != 40)
  {
    if (v20 == 94)
    {
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E813ED18;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_33;
    }
    return (std::locale *)a2;
  }
  sub_1C4FEAC90(a1);
  v26 = *(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 36);
  v27 = (char *)sub_1C4FE8604(a1);
  if (v27 != a3)
  {
    v28 = v27;
    if (*v27 == 41)
    {
      sub_1C4FEAD00(a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = (uint64_t)(v28 + 1);
      goto LABEL_37;
    }
  }
  v30 = sub_1C4FE82D8();
  return (std::locale *)sub_1C4FEEA4C(v30, v31, v32, v33);
}

uint64_t sub_1C4FEEA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unsigned int v17;

  v8 = *(_DWORD *)(a1 + 28);
  *(_QWORD *)(a4 + 24) = a3;
  v9 = (__int128 *)(a4 + 24);
  *(_QWORD *)(a4 + 32) = a3;
  *(_BYTE *)(a4 + 40) = 0;
  sub_1C4FE9F54(a4, (v8 + 1), (__int128 *)(a4 + 24));
  *(_QWORD *)(a4 + 48) = a2;
  *(_QWORD *)(a4 + 56) = a2;
  *(_BYTE *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 72) = *v9;
  *(_BYTE *)(a4 + 88) = *(_BYTE *)(a4 + 40);
  *(_QWORD *)(a4 + 104) = a2;
  *(_BYTE *)(a4 + 96) = 1;
  if (!sub_1C4FEEEE8(a1, a2, a3, (uint64_t *)a4, 0, 1))
  {
    if (a2 == a3)
      goto LABEL_12;
    v16 = a2 + 1;
    if (v16 != a3)
    {
      do
      {
        sub_1C4FE9F54(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v9);
        v17 = sub_1C4FEEEE8(a1, v16, a3, (uint64_t *)a4, 128, 0);
        v11 = *(_QWORD *)a4;
        v10 = *(_QWORD *)(a4 + 8);
        if (v17)
          goto LABEL_3;
        sub_1C4FE9F54(a4, 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3), v9);
      }
      while (++v16 != a3);
    }
    sub_1C4FE9F54(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v9);
    if (!sub_1C4FEEEE8(a1, a3, a3, (uint64_t *)a4, 128, 0))
    {
LABEL_12:
      result = 0;
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
      return result;
    }
  }
  v11 = *(_QWORD *)a4;
  v10 = *(_QWORD *)(a4 + 8);
LABEL_3:
  if (v10 == v11)
    v12 = (uint64_t *)v9;
  else
    v12 = (uint64_t *)v11;
  v13 = *v12;
  *(_QWORD *)(a4 + 56) = *v12;
  *(_BYTE *)(a4 + 64) = *(_QWORD *)(a4 + 48) != v13;
  v14 = v12[1];
  *(_QWORD *)(a4 + 72) = v14;
  *(_BYTE *)(a4 + 88) = v14 != *(_QWORD *)(a4 + 80);
  return 1;
}

void sub_1C4FEEC00(char **a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t *v34;
  char *v35;
  char *v36;

  v8 = a4[6];
  v9 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v10 = *a1;
  v11 = a1[1];
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a1) >> 3);
  v13 = v9 - v12;
  if (v9 <= v12)
  {
    if (v9 < v12)
    {
      v11 = &v10[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v11;
    }
  }
  else
  {
    v14 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - v11) >> 3) >= v13)
    {
      v20 = &v11[24 * v13];
      v25 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((v11 - *a1) >> 3);
      do
      {
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        v11[16] = 0;
        v11 += 24;
        v25 -= 24;
      }
      while (v25);
      a1[1] = v20;
    }
    else
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v10) >> 3);
      v16 = 0x5555555555555556 * ((v14 - v10) >> 3);
      if (v16 <= v9)
        v16 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      if (v15 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v18 = (char *)operator new(24 * v17);
      v19 = &v18[24 * v12];
      v20 = &v18[24 * v9];
      v21 = v19;
      v22 = 24 * v9 - 24 * v12;
      do
      {
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        v21[16] = 0;
        v21 += 24;
        v22 -= 24;
      }
      while (v22);
      if (v11 == v10)
      {
        v23 = &v18[24 * v12];
      }
      else
      {
        do
        {
          v23 = v19 - 24;
          v24 = *(_OWORD *)(v11 - 24);
          *((_QWORD *)v19 - 1) = *((_QWORD *)v11 - 1);
          *(_OWORD *)(v19 - 24) = v24;
          v11 -= 24;
          v19 -= 24;
        }
        while (v11 != v10);
      }
      *a1 = v23;
      a1[1] = v20;
      a1[2] = &v18[24 * v17];
      if (v10)
      {
        operator delete(v10);
        v20 = a1[1];
      }
    }
    v10 = *a1;
    v11 = v20;
  }
  if (v11 != v10)
  {
    v26 = 0;
    v27 = 0;
    v29 = *a4;
    v28 = a4[1];
    do
    {
      v30 = 0xAAAAAAAAAAAAAAABLL * ((v28 - v29) >> 3);
      v31 = (_QWORD *)(v29 + v26);
      if (v30 <= v27)
        v32 = a4 + 3;
      else
        v32 = v31;
      *(_QWORD *)&v10[v26] = a2 + *v32 - v8;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v27)
        v33 = a4 + 3;
      else
        v33 = (uint64_t *)(*a4 + v26);
      *(_QWORD *)&(*a1)[v26 + 8] = a2 + v33[1] - v8;
      v29 = *a4;
      v28 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v28 - *a4) >> 3) <= v27)
        v34 = a4 + 3;
      else
        v34 = (uint64_t *)(*a4 + v26);
      v10 = *a1;
      v35 = a1[1];
      (*a1)[v26 + 16] = *((_BYTE *)v34 + 16);
      ++v27;
      v26 += 24;
    }
    while (v27 < 0xAAAAAAAAAAAAAAABLL * ((v35 - v10) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((_BYTE *)a1 + 40) = 0;
  v36 = (char *)(a2 + a4[6] - v8);
  a1[6] = v36;
  a1[7] = (char *)(a2 + a4[7] - v8);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a4 + 64);
  a1[9] = (char *)(a2 + a4[9] - v8);
  a1[10] = (char *)(a2 + a4[10] - v8);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a4 + 88);
  a1[13] = v36;
  *((_BYTE *)a1 + 96) = *((_BYTE *)a4 + 96);
}

_QWORD *sub_1C4FEEEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  char *v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  BOOL v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  int64_t v65;
  char *v66;
  char *v67;
  _BYTE *v68;
  _BYTE *v69;
  __int128 v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  int64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  char *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  _BYTE *v100;
  unsigned int v101;
  uint64_t v102;
  char v103;
  BOOL v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  __int128 v124;
  _BYTE **v125;
  uint64_t v126;
  char *v127;
  char *v128;
  void **v129;
  _BYTE *v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  void *v134;
  void *v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  __int128 v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  char *v149;
  char *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  size_t v155;
  void *v156;
  char *v157;
  unint64_t v158;
  char *v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  void *v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  void **v183;
  void **v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  void *v188;
  _QWORD *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE *v198;
  char *v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  void *v204[2];
  __int128 v205;
  __int128 v206;
  _BYTE v207[56];
  void *__p[2];
  _QWORD v209[4];
  __int128 v210;
  char v211;

  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return sub_1C4FE9B84(a1, a2, a3, a4, a5, a6);
  if (!*(_DWORD *)(a1 + 28))
  {
    v205 = 0u;
    v206 = 0u;
    *(_OWORD *)v204 = 0u;
    v18 = *(_QWORD *)(a1 + 40);
    if (!v18)
      goto LABEL_235;
    *(_DWORD *)v207 = 0;
    memset(&v207[8], 0, 48);
    *(_OWORD *)__p = 0uLL;
    memset(v209, 0, 21);
    sub_1C4FF00E0((uint64_t)v204, (uint64_t)v207);
    if (__p[0])
      operator delete(__p[0]);
    v190 = a4;
    v194 = (char *)(a3 - a2);
    if (*(_QWORD *)&v207[32])
      operator delete(*(void **)&v207[32]);
    v19 = *((_QWORD *)&v206 + 1);
    v20 = v204[1];
    v21 = *((_QWORD *)&v206 + 1) + v206 - 1;
    v22 = v21 / 0x2A;
    v23 = *((_QWORD *)v204[1] + v21 / 0x2A);
    v24 = v21 % 0x2A;
    v25 = v23 + 96 * v24;
    *(_DWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = a2;
    *(_QWORD *)(v20[v22] + 96 * v24 + 16) = a2;
    *(_QWORD *)(v20[v22] + 96 * v24 + 24) = a3;
    v26 = v20[v22] + 96 * v24;
    v29 = *(_QWORD *)(v26 + 56);
    v27 = v26 + 56;
    v28 = v29;
    v30 = *(unsigned int *)(a1 + 32);
    v31 = (*(_QWORD *)(v27 + 8) - v29) >> 4;
    v201 = a2;
    if (v30 <= v31)
    {
      v104 = v30 >= v31;
      v33 = a5;
      v34 = (char *)(a3 - a2);
      if (!v104)
        *(_QWORD *)(v27 + 8) = v28 + 16 * v30;
    }
    else
    {
      sub_1C4FEA438((char **)v27, v30 - v31);
      v19 = *((_QWORD *)&v206 + 1);
      v20 = v204[1];
      v32 = *((_QWORD *)&v206 + 1) + v206 - 1;
      v22 = v32 / 0x2A;
      v24 = v32 % 0x2A;
      v33 = a5;
      v34 = (char *)(a3 - a2);
    }
    v200 = 0;
    v105 = 0;
    v106 = 3 * v24;
    *(_QWORD *)(v20[v22] + 32 * v106 + 80) = v18;
    v107 = v20[v22] + 32 * v106;
    v199 = 0;
    *(_DWORD *)(v107 + 88) = v33;
    *(_BYTE *)(v107 + 92) = a6;
    while (1)
    {
      if ((++v105 & 0xFFF) == 0 && (int)(v105 >> 12) >= (int)v34)
      {
LABEL_250:
        sub_1C4FE82D8();
LABEL_251:
        sub_1C4FE82D8();
LABEL_252:
        abort();
      }
      v109 = v19 + v206 - 1;
      v110 = *((_QWORD *)v204[1] + v109 / 0x2A);
      v111 = v109 % 0x2A;
      v112 = v110 + 96 * (v109 % 0x2A);
      v114 = (_QWORD *)(v112 + 80);
      v113 = *(_QWORD *)(v112 + 80);
      if (v113)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v113 + 16))(v113, v110 + 96 * v111);
      switch(*(_DWORD *)v112)
      {
        case 0xFFFFFC18:
          v115 = *(_QWORD *)(v110 + 96 * v111 + 16);
          if ((a5 & 0x20) != 0 && v115 == v201)
            goto LABEL_139;
          v127 = (char *)(v115 - *(_QWORD *)(v110 + 96 * v111 + 8));
          v128 = v199;
          if ((v200 & ((uint64_t)v199 >= (uint64_t)v127)) == 0)
            v128 = v127;
          if (v128 == v34)
          {
            v129 = (void **)v204[1];
            v130 = (_BYTE *)v205;
            if ((void *)v205 == v204[1])
            {
              v130 = v204[1];
            }
            else
            {
              v131 = (char *)v204[1] + 8 * ((unint64_t)v206 / 0x2A);
              v132 = (_QWORD *)(*v131 + 96 * ((unint64_t)v206 % 0x2A));
              v133 = *((_QWORD *)v204[1] + (*((_QWORD *)&v206 + 1) + (_QWORD)v206) / 0x2AuLL)
                   + 96 * ((*((_QWORD *)&v206 + 1) + (_QWORD)v206) % 0x2AuLL);
              if (v132 != (_QWORD *)v133)
              {
                do
                {
                  v134 = (void *)v132[7];
                  if (v134)
                  {
                    v132[8] = v134;
                    operator delete(v134);
                  }
                  v135 = (void *)v132[4];
                  if (v135)
                  {
                    v132[5] = v135;
                    operator delete(v135);
                  }
                  v132 += 12;
                  if ((_QWORD *)((char *)v132 - *v131) == (_QWORD *)4032)
                  {
                    v136 = (_QWORD *)v131[1];
                    ++v131;
                    v132 = v136;
                  }
                }
                while (v132 != (_QWORD *)v133);
                v129 = (void **)v204[1];
                v130 = (_BYTE *)v205;
              }
              v34 = v194;
            }
            *((_QWORD *)&v206 + 1) = 0;
            v144 = v130 - (_BYTE *)v129;
            if (v144 >= 0x11)
            {
              do
              {
                operator delete(*v129);
                v129 = (void **)((char *)v204[1] + 8);
                v204[1] = v129;
                v144 = v205 - (_QWORD)v129;
              }
              while ((_QWORD)v205 - (_QWORD)v129 > 0x10uLL);
            }
            if (v144 >> 3 == 1)
            {
              v145 = 21;
LABEL_211:
              *(_QWORD *)&v206 = v145;
            }
            else if (v144 >> 3 == 2)
            {
              v145 = 42;
              goto LABEL_211;
            }
            v200 = 1;
            v199 = v34;
            goto LABEL_232;
          }
          v199 = v128;
          v137 = *((_QWORD *)&v206 + 1) + v206 - 1;
          v138 = *((_QWORD *)v204[1] + v137 / 0x2A);
          v139 = v137 % 0x2A;
          v140 = *(void **)(v138 + 96 * (v137 % 0x2A) + 56);
          if (v140)
          {
            *(_QWORD *)(v138 + 96 * v139 + 64) = v140;
            operator delete(v140);
          }
          v141 = *(void **)(v138 + 96 * v139 + 32);
          if (v141)
          {
            *(_QWORD *)(v138 + 96 * v139 + 40) = v141;
            operator delete(v141);
          }
          v142 = 42 * ((uint64_t)(v205 - (unint64_t)v204[1]) >> 3) - 1;
          v143 = v206;
          --*((_QWORD *)&v206 + 1);
          if ((void *)v205 == v204[1])
            v142 = 0;
          if ((unint64_t)(v142 - (*((_QWORD *)&v143 + 1) + v143) + 1) >= 0x54)
          {
            operator delete(*(void **)(v205 - 8));
            *(_QWORD *)&v205 = v205 - 8;
          }
          v200 = 1;
LABEL_232:
          v19 = *((_QWORD *)&v206 + 1);
          if (!*((_QWORD *)&v206 + 1))
          {
            if ((v200 & 1) != 0)
            {
              v182 = *v190;
              *(_QWORD *)v182 = v201;
              *(_QWORD *)(v182 + 8) = &v199[v201];
              v35 = 1;
              *(_BYTE *)(v182 + 16) = 1;
              goto LABEL_236;
            }
LABEL_235:
            v35 = 0;
LABEL_236:
            v183 = (void **)v204[1];
            v184 = (void **)v205;
            *((_QWORD *)&v206 + 1) = 0;
            v185 = v205 - (unint64_t)v204[1];
            if ((unint64_t)v205 - (unint64_t)v204[1] >= 0x11)
            {
              do
              {
                operator delete(*v183);
                v184 = (void **)v205;
                v183 = (void **)((char *)v204[1] + 8);
                v204[1] = v183;
                v185 = v205 - (_QWORD)v183;
              }
              while ((_QWORD)v205 - (_QWORD)v183 > 0x10uLL);
            }
            v186 = v185 >> 3;
            if (v186 == 1)
            {
              v187 = 21;
LABEL_242:
              *(_QWORD *)&v206 = v187;
            }
            else if (v186 == 2)
            {
              v187 = 42;
              goto LABEL_242;
            }
            if (v183 != v184)
            {
              do
              {
                v188 = *v183++;
                operator delete(v188);
              }
              while (v183 != v184);
              if ((void *)v205 != v204[1])
                *(_QWORD *)&v205 = v205 + (((unint64_t)v204[1] - v205 + 7) & 0xFFFFFFFFFFFFFFF8);
            }
            if (v204[0])
              operator delete(v204[0]);
            return (_QWORD *)(v35 & 1);
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_232;
        case 0xFFFFFC1D:
          v119 = v206;
          v120 = (char *)v204[1];
          v121 = (char *)v205;
          if ((_QWORD)v206)
            goto LABEL_218;
          v122 = (uint64_t)(v205 - (unint64_t)v204[1]) >> 3;
          v123 = 42 * v122 - 1;
          if ((void *)v205 == v204[1])
            v123 = 0;
          if ((unint64_t)(v123 - *((_QWORD *)&v206 + 1)) < 0x2A)
          {
            if (v122 >= (uint64_t)(*((_QWORD *)&v205 + 1) - (unint64_t)v204[0]) >> 3)
            {
              if (*((void **)&v205 + 1) == v204[0])
                v146 = 1;
              else
                v146 = (uint64_t)(*((_QWORD *)&v205 + 1) - (unint64_t)v204[0]) >> 2;
              *(_QWORD *)&v207[32] = (char *)&v205 + 8;
              if (v146 >> 61)
LABEL_253:
                sub_1C4764EE4();
              *(_QWORD *)v207 = operator new(8 * v146);
              *(_QWORD *)&v207[8] = *(_QWORD *)v207;
              *(_QWORD *)&v207[16] = *(_QWORD *)v207;
              *(_QWORD *)&v207[24] = *(_QWORD *)v207 + 8 * v146;
              *(_QWORD *)&v210 = operator new(0xFC0uLL);
              sub_1C4DBA538((uint64_t)v207, &v210);
              v148 = (uint64_t *)v204[1];
              v147 = (uint64_t *)v205;
              v149 = *(char **)&v207[16];
              while (v148 != v147)
              {
                if (v149 == *(char **)&v207[24])
                {
                  v150 = *(char **)&v207[8];
                  v151 = *(void **)v207;
                  if (*(_QWORD *)&v207[8] <= *(_QWORD *)v207)
                  {
                    if (v149 == *(char **)v207)
                      v158 = 1;
                    else
                      v158 = (uint64_t)&v149[-*(_QWORD *)v207] >> 2;
                    if (v158 >> 61)
                      goto LABEL_253;
                    v159 = (char *)operator new(8 * v158);
                    v161 = v149 - v150;
                    v160 = v149 == v150;
                    v149 = &v159[8 * (v158 >> 2)];
                    if (!v160)
                    {
                      v149 = &v159[8 * (v158 >> 2) + (v161 & 0xFFFFFFFFFFFFFFF8)];
                      v162 = 8 * (v161 >> 3);
                      v163 = &v159[8 * (v158 >> 2)];
                      do
                      {
                        v164 = *(_QWORD *)v150;
                        v150 += 8;
                        *(_QWORD *)v163 = v164;
                        v163 += 8;
                        v162 -= 8;
                      }
                      while (v162);
                    }
                    *(_QWORD *)v207 = v159;
                    *(_QWORD *)&v207[8] = &v159[8 * (v158 >> 2)];
                    *(_QWORD *)&v207[16] = v149;
                    *(_QWORD *)&v207[24] = &v159[8 * v158];
                    if (v151)
                      operator delete(v151);
                  }
                  else
                  {
                    v152 = (uint64_t)(*(_QWORD *)&v207[8] - *(_QWORD *)v207) >> 3;
                    if (v152 >= -1)
                      v153 = v152 + 1;
                    else
                      v153 = v152 + 2;
                    v154 = *(_QWORD *)&v207[8] - 8 * (v153 >> 1);
                    v155 = (size_t)&v149[-*(_QWORD *)&v207[8]];
                    if (v149 != *(char **)&v207[8])
                    {
                      v156 = (void *)(*(_QWORD *)&v207[8] - 8 * (v153 >> 1));
                      memmove(v156, *(const void **)&v207[8], v155);
                      v154 = (uint64_t)v156;
                      v149 = v150;
                    }
                    v157 = &v149[-8 * (v153 >> 1)];
                    v149 = (char *)(v154 + v155);
                    *(_QWORD *)&v207[8] = v157;
                    *(_QWORD *)&v207[16] = v154 + v155;
                  }
                }
                v165 = *v148++;
                *(_QWORD *)v149 = v165;
                v149 = (char *)(*(_QWORD *)&v207[16] + 8);
                *(_QWORD *)&v207[16] += 8;
                v147 = (uint64_t *)v205;
              }
              v166 = v204[0];
              *(_OWORD *)v204 = *(_OWORD *)v207;
              *(_QWORD *)&v205 = v149;
              *((_QWORD *)&v205 + 1) = *(_QWORD *)&v207[24];
              v167 = 21;
              if (&v149[-*(_QWORD *)&v207[8]] != (char *)8)
                v167 = v206 + 42;
              *(_QWORD *)&v206 = v167;
              if (v166)
                operator delete(v166);
              v34 = v194;
            }
            else
            {
              if (v204[1] == v204[0])
              {
                *(_QWORD *)v207 = operator new(0xFC0uLL);
                sub_1C4DBA538((uint64_t)v204, v207);
                *(_QWORD *)v207 = *(_QWORD *)(v205 - 8);
                *(_QWORD *)&v205 = v205 - 8;
              }
              else
              {
                *(_QWORD *)v207 = operator new(0xFC0uLL);
              }
              sub_1C4FF0590(v204, v207);
              v168 = 21;
              if ((_QWORD)v205 - (unint64_t)v204[1] != 8)
                v168 = v206 + 42;
              *(_QWORD *)&v206 = v168;
            }
          }
          else
          {
            *(_QWORD *)&v206 = 42;
            *(_QWORD *)v207 = *(_QWORD *)(v205 - 8);
            *(_QWORD *)&v205 = v205 - 8;
            sub_1C4FF0590(v204, v207);
          }
          v119 = v206;
          v120 = (char *)v204[1];
          v121 = (char *)v205;
LABEL_218:
          v169 = &v120[8 * (v119 / 0x2A)];
          v170 = *(_QWORD *)v169 + 96 * (v119 % 0x2A);
          if (v121 == v120)
            v171 = 0;
          else
            v171 = v170;
          if (v171 == *(_QWORD *)v169)
            v171 = *((_QWORD *)v169 - 1) + 4032;
          v172 = *(_OWORD *)(v112 + 16);
          *(_OWORD *)(v171 - 96) = *(_OWORD *)v112;
          *(_OWORD *)(v171 - 80) = v172;
          v173 = v110 + 96 * v111;
          *(_QWORD *)(v171 - 56) = 0;
          *(_QWORD *)(v171 - 48) = 0;
          *(_QWORD *)(v171 - 64) = 0;
          *(_OWORD *)(v171 - 64) = *(_OWORD *)(v173 + 32);
          *(_QWORD *)(v171 - 48) = *(_QWORD *)(v173 + 48);
          *(_QWORD *)(v173 + 32) = 0;
          *(_QWORD *)(v173 + 40) = 0;
          *(_QWORD *)(v173 + 48) = 0;
          *(_QWORD *)(v171 - 40) = 0;
          *(_QWORD *)(v171 - 32) = 0;
          *(_QWORD *)(v171 - 24) = 0;
          *(_OWORD *)(v171 - 40) = *(_OWORD *)(v173 + 56);
          *(_QWORD *)(v171 - 24) = *(_QWORD *)(v173 + 72);
          *(_QWORD *)(v173 + 56) = 0;
          *(_QWORD *)(v173 + 64) = 0;
          *(_QWORD *)(v173 + 72) = 0;
          v174 = *v114;
          *(_QWORD *)(v171 - 11) = *(_QWORD *)(v112 + 85);
          *(_QWORD *)(v171 - 16) = v174;
          v175 = *((_QWORD *)&v206 + 1);
          *(_QWORD *)&v206 = v206 - 1;
          ++*((_QWORD *)&v206 + 1);
          v176 = v175 + v206;
          v177 = (v175 + (uint64_t)v206) / 0x2AuLL;
          v117 = *((_QWORD *)v204[1] + v177);
          v118 = v176 - 42 * v177;
LABEL_224:
          v178 = *(void **)(v117 + 96 * v118 + 56);
          if (v178)
          {
            *(_QWORD *)(v117 + 96 * v118 + 64) = v178;
            operator delete(v178);
          }
          v179 = *(void **)(v117 + 96 * v118 + 32);
          if (v179)
          {
            *(_QWORD *)(v117 + 96 * v118 + 40) = v179;
            operator delete(v179);
          }
          v180 = 42 * ((uint64_t)(v205 - (unint64_t)v204[1]) >> 3) - 1;
          v181 = v206;
          --*((_QWORD *)&v206 + 1);
          if ((void *)v205 == v204[1])
            v180 = 0;
          if ((unint64_t)(v180 - (*((_QWORD *)&v181 + 1) + v181) + 1) >= 0x54)
          {
            operator delete(*(void **)(v205 - 8));
            *(_QWORD *)&v205 = v205 - 8;
          }
          goto LABEL_232;
        case 0xFFFFFC1F:
LABEL_139:
          v116 = *((_QWORD *)&v206 + 1) + v206 - 1;
          v117 = *((_QWORD *)v204[1] + v116 / 0x2A);
          v118 = v116 % 0x2A;
          goto LABEL_224;
        case 0xFFFFFC20:
          v124 = *(_OWORD *)(v112 + 16);
          *(_OWORD *)v207 = *(_OWORD *)v112;
          *(_OWORD *)&v207[16] = v124;
          v125 = (_BYTE **)(v110 + 96 * v111);
          memset(&v207[32], 0, 24);
          sub_1C4D6CDA0(&v207[32], v125[4], v125[5], 0xAAAAAAAAAAAAAAABLL * ((v125[5] - v125[4]) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v209[0] = 0;
          sub_1C4EECB34(__p, v125[7], v125[8], (v125[8] - v125[7]) >> 4);
          v126 = *v114;
          *(_QWORD *)((char *)&v209[1] + 5) = *(_QWORD *)(v112 + 85);
          v209[1] = v126;
          (*(void (**)(_QWORD, uint64_t, _BYTE **))(*(_QWORD *)*v114 + 24))(*v114, 1, v125);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v209[1] + 24))(v209[1], 0, v207);
          sub_1C4FF00E0((uint64_t)v204, (uint64_t)v207);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v207[32])
          {
            *(_QWORD *)&v207[40] = *(_QWORD *)&v207[32];
            operator delete(*(void **)&v207[32]);
          }
          goto LABEL_232;
        default:
          goto LABEL_251;
      }
    }
  }
  v204[0] = 0;
  v204[1] = 0;
  *(_QWORD *)&v205 = 0;
  v11 = *(_QWORD *)(a1 + 40);
  if (!v11)
  {
    v35 = 0;
    goto LABEL_125;
  }
  *(_QWORD *)&v210 = a3;
  *((_QWORD *)&v210 + 1) = a3;
  v211 = 0;
  *(_DWORD *)v207 = 0;
  memset(&v207[8], 0, 48);
  *(_OWORD *)__p = 0u;
  memset(v209, 0, 21);
  v12 = sub_1C4FEA0D8(v204, (uint64_t)v207);
  v204[1] = v12;
  if (__p[0])
    operator delete(__p[0]);
  if (*(_QWORD *)&v207[32])
    operator delete(*(void **)&v207[32]);
  v13 = *((_QWORD *)v12 - 8);
  v14 = a3 - a2;
  *((_DWORD *)v12 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v15 = *(unsigned int *)(a1 + 28);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16)
      *((_QWORD *)v12 - 7) = v13 + 24 * v15;
  }
  else
  {
    sub_1C4FEA2A0((void **)v12 - 8, v15 - v16, &v210);
  }
  v36 = *((_QWORD *)v12 - 5);
  v37 = *(unsigned int *)(a1 + 32);
  v38 = (*((_QWORD *)v12 - 4) - v36) >> 4;
  v202 = a2;
  v191 = a4;
  if (v37 <= v38)
  {
    if (v37 < v38)
      *((_QWORD *)v12 - 4) = v36 + 16 * v37;
  }
  else
  {
    sub_1C4FEA438((char **)v12 - 5, v37 - v38);
  }
  v197 = 0;
  v198 = 0;
  v193 = 0;
  v195 = 0;
  v196 = 0;
  v35 = 0;
  v39 = 0;
  v40 = 0;
  *((_QWORD *)v12 - 2) = v11;
  *((_DWORD *)v12 - 2) = a5;
  *(v12 - 4) = a6;
  v41 = 0;
  v42 = &v207[32];
  while (2)
  {
    v43 = (++v39 & 0xFFF) != 0 || (int)(v39 >> 12) < (int)v14;
    if (!v43)
      goto LABEL_250;
    v44 = *((_QWORD *)v12 - 2);
    v45 = v12 - 96;
    if (v44)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v44 + 16))(v44, v12 - 96);
    switch(*(_DWORD *)v45)
    {
      case 0xFFFFFC18:
        v46 = *((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v46 == v202)
          goto LABEL_36;
        if ((v35 & (v40 >= v46 - *((_QWORD *)v12 - 11))) != 0)
          goto LABEL_100;
        v192 = v46 - *((_QWORD *)v12 - 11);
        v56 = (char *)*((_QWORD *)v12 - 8);
        v55 = (char *)*((_QWORD *)v12 - 7);
        v57 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v197 - (uint64_t)v195) >> 3) >= v57)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v198 - v195) >> 3) >= v57)
          {
            v71 = v195;
            if (v56 != v55)
            {
              v72 = v195;
              do
              {
                *(_OWORD *)v72 = *(_OWORD *)v56;
                v72[16] = v56[16];
                v71 += 24;
                v56 += 24;
                v72 += 24;
              }
              while (v56 != v55);
            }
            v65 = v71 - v195;
            v198 = v195;
          }
          else
          {
            v66 = &v56[8 * ((v198 - v195) >> 3)];
            v67 = v195;
            if (v198 != v195)
            {
              do
              {
                *(_OWORD *)v67 = *(_OWORD *)v56;
                v67[16] = v56[16];
                v56 += 24;
                v67 += 24;
              }
              while (v56 != v66);
            }
            v68 = v198;
            if (v66 != v55)
            {
              v69 = v198;
              do
              {
                v70 = *(_OWORD *)v66;
                *((_QWORD *)v69 + 2) = *((_QWORD *)v66 + 2);
                *(_OWORD *)v69 = v70;
                v69 += 24;
                v66 += 24;
                v68 += 24;
              }
              while (v66 != v55);
            }
            v65 = v68 - v198;
          }
        }
        else
        {
          if (v195)
          {
            operator delete(v195);
            v197 = 0;
          }
          v189 = v42;
          if (v57 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_252;
          v58 = 0x5555555555555556 * (v197 >> 3);
          if (v58 <= v57)
            v58 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 3);
          v59 = 0xAAAAAAAAAAAAAAABLL * (v197 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v58;
          if (v59 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_252;
          v60 = v41;
          v61 = 3 * v59;
          v62 = (char *)operator new(24 * v59);
          v63 = v62;
          v64 = v62;
          if (v56 != v55)
          {
            memcpy(v62, v56, 24 * ((v55 - v56 - 24) / 0x18uLL) + 24);
            v64 = &v63[24 * ((v55 - v56 - 24) / 0x18uLL) + 24];
          }
          v197 = (uint64_t)&v63[8 * v61];
          v198 = v63;
          v65 = v64 - v63;
          v195 = v63;
          v41 = v60;
          v42 = v189;
        }
        v74 = (char *)*((_QWORD *)v12 - 5);
        v73 = (char *)*((_QWORD *)v12 - 4);
        v75 = v73 - v74;
        v76 = (v73 - v74) >> 4;
        if (v76 > (v196 - (uint64_t)v41) >> 4)
        {
          if (v41)
          {
            operator delete(v41);
            v196 = 0;
          }
          if (v75 < 0)
            goto LABEL_252;
          v77 = v196 >> 3;
          if (v196 >> 3 <= v76)
            v77 = (v73 - v74) >> 4;
          v78 = (unint64_t)v196 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v77;
          if (v78 >> 60)
            goto LABEL_252;
          v79 = (char *)operator new(16 * v78);
          v41 = v79;
          v80 = v79;
          if (v74 != v73)
          {
            memcpy(v79, v74, v75 & 0xFFFFFFFFFFFFFFF0);
            v80 = &v41[v75 & 0xFFFFFFFFFFFFFFF0];
          }
          v196 = (uint64_t)&v41[16 * v78];
          v81 = v80 - v41;
          v82 = v41;
          goto LABEL_96;
        }
        v82 = v193;
        v83 = (v193 - v41) >> 4;
        if (v83 >= v76)
        {
          v90 = v41;
          if (v74 != v73)
          {
            v91 = v41;
            do
            {
              *v91 = *(_QWORD *)v74;
              v91[1] = *((_QWORD *)v74 + 1);
              v90 += 16;
              v74 += 16;
              v91 += 2;
            }
            while (v74 != v73);
          }
          v81 = v90 - v41;
          v82 = v41;
LABEL_96:
          v88 = v192;
          goto LABEL_99;
        }
        v84 = &v74[16 * v83];
        v85 = v41;
        if (v193 != v41)
        {
          do
          {
            *v85 = *(_QWORD *)v74;
            v85[1] = *((_QWORD *)v74 + 1);
            v74 += 16;
            v85 += 2;
          }
          while (v74 != v84);
        }
        v86 = v193;
        if (v84 == v73)
        {
          v88 = v192;
        }
        else
        {
          v87 = v193;
          v88 = v192;
          do
          {
            v89 = *(_OWORD *)v84;
            v84 += 16;
            *(_OWORD *)v87 = v89;
            v87 += 16;
            v86 += 16;
          }
          while (v84 != v73);
        }
        v81 = v86 - v193;
LABEL_99:
        v198 += v65;
        v193 = &v82[v81];
        v40 = v88;
LABEL_100:
        v92 = (char *)v204[1];
        if (v40 == v14)
        {
          v93 = (char *)v204[0];
          while (v92 != v93)
          {
            v94 = (void *)*((_QWORD *)v92 - 5);
            if (v94)
            {
              *((_QWORD *)v92 - 4) = v94;
              operator delete(v94);
            }
            v95 = (void *)*((_QWORD *)v92 - 8);
            if (v95)
            {
              *((_QWORD *)v92 - 7) = v95;
              operator delete(v95);
            }
            v92 -= 96;
          }
          v204[1] = v93;
          v35 = 1;
          v40 = v14;
        }
        else
        {
          v96 = (void *)*((_QWORD *)v204[1] - 5);
          if (v96)
          {
            *((_QWORD *)v204[1] - 4) = v96;
            operator delete(v96);
          }
          v97 = (void *)*((_QWORD *)v92 - 8);
          if (v97)
          {
            *((_QWORD *)v92 - 7) = v97;
            operator delete(v97);
          }
          v204[1] = v92 - 96;
          v35 = 1;
        }
LABEL_114:
        v12 = (char *)v204[1];
        if (v204[0] != v204[1])
          continue;
        if ((v35 & 1) != 0)
        {
          v98 = *v191;
          *(_QWORD *)v98 = v202;
          *(_QWORD *)(v98 + 8) = v202 + v40;
          *(_BYTE *)(v98 + 16) = 1;
          v99 = v195;
          if (v198 != v195)
          {
            v100 = v195 + 16;
            v101 = 1;
            do
            {
              v102 = v98 + 24 * v101;
              *(_OWORD *)v102 = *((_OWORD *)v100 - 1);
              v103 = *v100;
              v100 += 24;
              *(_BYTE *)(v102 + 16) = v103;
              v43 = 0xAAAAAAAAAAAAAAABLL * ((v198 - v195) >> 3) > v101++;
            }
            while (v43);
          }
        }
        else
        {
          v99 = v195;
        }
        if (v41)
          operator delete(v41);
        if (v99)
          operator delete(v99);
LABEL_125:
        *(_QWORD *)v207 = v204;
        sub_1C4FEA568((void ***)v207);
        return (_QWORD *)(v35 & 1);
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_114;
      case 0xFFFFFC1F:
LABEL_36:
        v47 = v204[1];
        v48 = (void *)*((_QWORD *)v204[1] - 5);
        if (v48)
        {
          *((_QWORD *)v204[1] - 4) = v48;
          operator delete(v48);
        }
        v49 = (void *)*(v47 - 8);
        if (v49)
        {
          *(v47 - 7) = v49;
          operator delete(v49);
        }
        v204[1] = v47 - 12;
        goto LABEL_114;
      case 0xFFFFFC20:
        v50 = *((_OWORD *)v12 - 5);
        *(_OWORD *)v207 = *(_OWORD *)v45;
        *(_OWORD *)&v207[16] = v50;
        v42[1] = 0;
        v42[2] = 0;
        *v42 = 0;
        sub_1C4D6CDA0(v42, *((_BYTE **)v12 - 8), *((_BYTE **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v209[0] = 0;
        sub_1C4EECB34(__p, *((_BYTE **)v12 - 5), *((_BYTE **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
        v51 = *((_QWORD *)v12 - 2);
        *(_QWORD *)((char *)&v209[1] + 5) = *(_QWORD *)(v12 - 11);
        v209[1] = v51;
        (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v12 - 2) + 24))(*((_QWORD *)v12 - 2), 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v209[1] + 24))(v209[1], 0, v207);
        v52 = (char *)v204[1];
        if (v204[1] >= (void *)v205)
        {
          v204[1] = sub_1C4FEA0D8(v204, (uint64_t)v207);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v53 = *(_OWORD *)&v207[16];
          *(_OWORD *)v204[1] = *(_OWORD *)v207;
          *((_OWORD *)v52 + 1) = v53;
          *((_QWORD *)v52 + 4) = 0;
          *((_QWORD *)v52 + 5) = 0;
          *((_QWORD *)v52 + 6) = 0;
          *((_QWORD *)v52 + 7) = 0;
          *((_OWORD *)v52 + 2) = *(_OWORD *)&v207[32];
          *((_QWORD *)v52 + 6) = *(_QWORD *)&v207[48];
          *v42 = 0;
          v42[1] = 0;
          v42[2] = 0;
          *((_QWORD *)v52 + 8) = 0;
          *((_QWORD *)v52 + 9) = 0;
          *(_OWORD *)(v52 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v52 + 9) = v209[0];
          __p[0] = 0;
          __p[1] = 0;
          v209[0] = 0;
          v54 = v209[1];
          *(_QWORD *)(v52 + 85) = *(_QWORD *)((char *)&v209[1] + 5);
          *((_QWORD *)v52 + 10) = v54;
          v204[1] = v52 + 96;
        }
        if (*(_QWORD *)&v207[32])
        {
          *(_QWORD *)&v207[40] = *(_QWORD *)&v207[32];
          operator delete(*(void **)&v207[32]);
        }
        goto LABEL_114;
      default:
        goto LABEL_251;
    }
  }
}

__n128 sub_1C4FF00E0(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __n128 result;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void *v74;
  char *v75;
  void *__src;
  __int128 v77;
  uint64_t v78;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 42 * v6 - 1;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40) + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      v21 = *(char **)(a1 + 24);
      v22 = (uint64_t)&v21[-*(_QWORD *)a1];
      if (v5 - v4 < (unint64_t)v22)
      {
        if (v21 != v5)
        {
          v75 = (char *)operator new(0xFC0uLL);
          sub_1C4DBA538(a1, &v75);
LABEL_55:
          v4 = *(char **)(a1 + 8);
          v9 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 40);
          goto LABEL_56;
        }
        v75 = (char *)operator new(0xFC0uLL);
        sub_1C4FF0590((void **)a1, &v75);
        v55 = *(_QWORD **)(a1 + 8);
        v56 = *(char **)(a1 + 16);
        v59 = *v55;
        v57 = (char *)(v55 + 1);
        v58 = v59;
        *(_QWORD *)(a1 + 8) = v57;
        if (v56 == *(char **)(a1 + 24))
        {
          v60 = *(char **)a1;
          if ((unint64_t)v57 <= *(_QWORD *)a1)
          {
            if (v56 == v60)
              v67 = 1;
            else
              v67 = (v56 - v60) >> 2;
            if (v67 >> 61)
              goto LABEL_75;
            v68 = (char *)operator new(8 * v67);
            v69 = &v68[8 * (v67 >> 2)];
            v70 = v56 - v57;
            v46 = v56 == v57;
            v56 = v69;
            if (!v46)
            {
              v56 = &v69[v70 & 0xFFFFFFFFFFFFFFF8];
              v71 = 8 * (v70 >> 3);
              v72 = &v68[8 * (v67 >> 2)];
              do
              {
                v73 = *(_QWORD *)v57;
                v57 += 8;
                *(_QWORD *)v72 = v73;
                v72 += 8;
                v71 -= 8;
              }
              while (v71);
            }
            *(_QWORD *)a1 = v68;
            *(_QWORD *)(a1 + 8) = v69;
            *(_QWORD *)(a1 + 16) = v56;
            *(_QWORD *)(a1 + 24) = &v68[8 * v67];
            if (v60)
            {
              operator delete(v60);
              v56 = *(char **)(a1 + 16);
            }
          }
          else
          {
            v61 = (uint64_t)&v57[-*(_QWORD *)a1] >> 3;
            if (v61 >= -1)
              v62 = v61 + 1;
            else
              v62 = v61 + 2;
            v63 = -(v62 >> 1);
            v64 = v62 >> 1;
            v65 = &v57[-8 * v64];
            v66 = v56 - v57;
            if (v66)
            {
              memmove(&v57[-8 * v64], v57, v66);
              v57 = *(char **)(a1 + 8);
            }
            v56 = &v65[v66];
            *(_QWORD *)(a1 + 8) = &v57[8 * v63];
            *(_QWORD *)(a1 + 16) = v56;
          }
        }
        *(_QWORD *)v56 = v58;
        goto LABEL_54;
      }
      if (v21 == *(char **)a1)
        v23 = 1;
      else
        v23 = v22 >> 2;
      v78 = a1 + 24;
      if (!(v23 >> 61))
      {
        v75 = (char *)operator new(8 * v23);
        __src = &v75[8 * v6];
        *(_QWORD *)&v77 = __src;
        *((_QWORD *)&v77 + 1) = &v75[8 * v23];
        v74 = operator new(0xFC0uLL);
        sub_1C4DBA538((uint64_t)&v75, &v74);
        v24 = *(_QWORD *)(a1 + 8);
        v25 = *(_QWORD *)(a1 + 16);
        v26 = (char *)__src;
        while (v25 != v24)
        {
          if (v26 == v75)
          {
            v28 = (char *)v77;
            if ((unint64_t)v77 >= *((_QWORD *)&v77 + 1))
            {
              if (*((char **)&v77 + 1) == v26)
                v33 = 1;
              else
                v33 = (uint64_t)(*((_QWORD *)&v77 + 1) - (_QWORD)v26) >> 2;
              if (v33 >> 61)
                goto LABEL_75;
              v34 = (char *)operator new(8 * v33);
              v27 = &v34[(2 * v33 + 6) & 0xFFFFFFFFFFFFFFF8];
              v35 = v27;
              v36 = v28 - v26;
              if (v28 != v26)
              {
                v35 = &v27[v36 & 0xFFFFFFFFFFFFFFF8];
                v37 = 8 * (v36 >> 3);
                v38 = &v34[(2 * v33 + 6) & 0xFFFFFFFFFFFFFFF8];
                v39 = v26;
                do
                {
                  v40 = *(_QWORD *)v39;
                  v39 += 8;
                  *(_QWORD *)v38 = v40;
                  v38 += 8;
                  v37 -= 8;
                }
                while (v37);
              }
              v75 = v34;
              __src = &v34[(2 * v33 + 6) & 0xFFFFFFFFFFFFFFF8];
              *(_QWORD *)&v77 = v35;
              *((_QWORD *)&v77 + 1) = &v34[8 * v33];
              if (v26)
                operator delete(v26);
            }
            else
            {
              v29 = (uint64_t)(*((_QWORD *)&v77 + 1) - v77) >> 3;
              if (v29 >= -1)
                v30 = v29 + 1;
              else
                v30 = v29 + 2;
              v31 = v30 >> 1;
              v32 = v77 + 8 * (v30 >> 1);
              v27 = (char *)(v32 - (v77 - (_QWORD)v26));
              if ((char *)v77 != v26)
              {
                memmove((void *)(v32 - (v77 - (_QWORD)v26)), v26, v77 - (_QWORD)v26);
                v26 = v28;
              }
              __src = v27;
              *(_QWORD *)&v77 = &v26[8 * v31];
            }
          }
          else
          {
            v27 = v26;
          }
          v41 = *(_QWORD *)(v25 - 8);
          v25 -= 8;
          *((_QWORD *)v27 - 1) = v41;
          v26 = (char *)__src - 8;
          __src = (char *)__src - 8;
          v24 = *(_QWORD *)(a1 + 8);
        }
        v42 = *(char **)a1;
        *(_QWORD *)a1 = v75;
        *(_QWORD *)(a1 + 8) = v26;
        *(_OWORD *)(a1 + 16) = v77;
        if (v42)
          operator delete(v42);
        goto LABEL_55;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v8 - 42;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      *(_QWORD *)(a1 + 8) = v10;
      if (v5 != *(char **)(a1 + 24))
      {
LABEL_53:
        *(_QWORD *)v5 = v11;
LABEL_54:
        *(_QWORD *)(a1 + 16) += 8;
        goto LABEL_55;
      }
      v13 = *(char **)a1;
      if ((unint64_t)v10 > *(_QWORD *)a1)
      {
        v14 = (uint64_t)&v10[-*(_QWORD *)a1] >> 3;
        if (v14 >= -1)
          v15 = v14 + 1;
        else
          v15 = v14 + 2;
        v16 = -(v15 >> 1);
        v17 = v15 >> 1;
        v18 = &v10[-8 * v17];
        v19 = v5 - v10;
        if (v5 != v10)
        {
          memmove(&v10[-8 * v17], v10, v5 - v10);
          v5 = *(char **)(a1 + 8);
        }
        v20 = &v5[8 * v16];
        v5 = &v18[v19];
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = &v18[v19];
        goto LABEL_53;
      }
      if (v5 == v13)
        v43 = 1;
      else
        v43 = (v5 - v13) >> 2;
      if (!(v43 >> 61))
      {
        v44 = (char *)operator new(8 * v43);
        v45 = &v44[8 * (v43 >> 2)];
        v47 = v5 - v10;
        v46 = v5 == v10;
        v5 = v45;
        if (!v46)
        {
          v5 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
          v48 = 8 * (v47 >> 3);
          v49 = &v44[8 * (v43 >> 2)];
          do
          {
            v50 = *(_QWORD *)v10;
            v10 += 8;
            *(_QWORD *)v49 = v50;
            v49 += 8;
            v48 -= 8;
          }
          while (v48);
        }
        *(_QWORD *)a1 = v44;
        *(_QWORD *)(a1 + 8) = v45;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = &v44[8 * v43];
        if (v13)
        {
          operator delete(v13);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_53;
      }
    }
LABEL_75:
    sub_1C4764EE4();
  }
LABEL_56:
  v51 = *(_QWORD *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  v52 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v51 = *(_OWORD *)a2;
  *(_OWORD *)(v51 + 16) = v52;
  *(_QWORD *)(v51 + 40) = 0;
  *(_QWORD *)(v51 + 48) = 0;
  *(_QWORD *)(v51 + 32) = 0;
  *(_OWORD *)(v51 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v51 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v51 + 56) = 0;
  *(_QWORD *)(v51 + 64) = 0;
  *(_QWORD *)(v51 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v51 + 56) = result;
  *(_QWORD *)(v51 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v54 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v51 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v51 + 80) = v54;
  ++*(_QWORD *)(a1 + 40);
  return result;
}

void sub_1C4FF0590(void **a1, _QWORD *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;

  v4 = a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - (_BYTE *)v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v15 = 1;
      else
        v15 = v14;
      if (v15 >> 61)
        sub_1C4764EE4();
      v16 = (char *)operator new(8 * v15);
      v5 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
      v17 = v5;
      v18 = v7 - (_BYTE *)v4;
      if (v7 != (_BYTE *)v4)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
        v21 = v4;
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *a1 = v16;
      a1[1] = v5;
      a1[2] = v17;
      a1[3] = &v16[8 * v15];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - (_BYTE *)v4)];
      if (v7 != (_BYTE *)v4)
      {
        memmove(&v11[-(v7 - (_BYTE *)v4)], v4, v7 - (_BYTE *)v4);
        v4 = a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

char *sub_1C4FF06BC(uint64_t a1, char *a2)
{
  const std::locale *v4;
  size_t v5;
  uint64_t v7;
  char *v8;
  char *v9;

  v4 = (const std::locale *)MEMORY[0x1CAA32E7C]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v4, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = strlen(a2);
  if (sub_1C4FF0748(a1, a2, &a2[v5]) == &a2[v5])
    return (char *)a1;
  v7 = sub_1C4FE82D8();
  return sub_1C4FF0748(v7, v8, v9);
}

char *sub_1C4FF0748(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char *v11;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E813EC50;
  v7 = (_QWORD *)operator new();
  *v7 = &off_1E813ECB8;
  v7[1] = v6;
  sub_1C4FE82EC((_QWORD *)(a1 + 40), (uint64_t)v7);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
        return sub_1C4FF0D1C(a1, a2, a3);
      case 0x80u:
        v16 = (char *)memchr(a2, 10, a3 - a2);
        if (v16)
          v17 = v16;
        else
          v17 = a3;
        if (v17 == a2)
        {
          v27 = (_QWORD *)operator new();
          v28 = *(_QWORD *)(a1 + 56);
          v29 = *(_QWORD *)(v28 + 8);
          *v27 = &off_1E813ECB8;
          v27[1] = v29;
          *(_QWORD *)(v28 + 8) = v27;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          sub_1C4FF0BD8(a1, a2, v17);
        }
        if (v17 != a3)
          ++v17;
        while (v17 != a3)
        {
          v30 = (char *)memchr(v17, 10, a3 - v17);
          if (v30)
            v31 = v30;
          else
            v31 = a3;
          v32 = *(_QWORD *)(a1 + 56);
          if (v31 == v17)
          {
            v33 = (_QWORD *)operator new();
            v34 = *(_QWORD *)(a1 + 56);
            v35 = *(_QWORD *)(v34 + 8);
            *v33 = &off_1E813ECB8;
            v33[1] = v35;
            *(_QWORD *)(v34 + 8) = v33;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            sub_1C4FF0BD8(a1, v17, v31);
          }
          sub_1C4FE8848(a1, v8, v32);
          if (v31 == a3)
            v17 = v31;
          else
            v17 = v31 + 1;
        }
        break;
      case 0x100u:
        v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10)
          v11 = v10;
        else
          v11 = a3;
        if (v11 == a2)
        {
          v18 = (_QWORD *)operator new();
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(_QWORD *)(v19 + 8);
          *v18 = &off_1E813ECB8;
          v18[1] = v20;
          *(_QWORD *)(v19 + 8) = v18;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          sub_1C4FF0D1C(a1, a2, v11);
        }
        if (v11 != a3)
          ++v11;
        while (v11 != a3)
        {
          v21 = (char *)memchr(v11, 10, a3 - v11);
          if (v21)
            v22 = v21;
          else
            v22 = a3;
          v23 = *(_QWORD *)(a1 + 56);
          if (v22 == v11)
          {
            v24 = (_QWORD *)operator new();
            v25 = *(_QWORD *)(a1 + 56);
            v26 = *(_QWORD *)(v25 + 8);
            *v24 = &off_1E813ECB8;
            v24[1] = v26;
            *(_QWORD *)(v25 + 8) = v24;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            sub_1C4FF0D1C(a1, v11, v22);
          }
          sub_1C4FE8848(a1, v8, v23);
          if (v22 == a3)
            v11 = v22;
          else
            v11 = v22 + 1;
        }
        break;
      default:
LABEL_50:
        v13 = sub_1C4FE82D8();
        return sub_1C4FF0A9C(v13, v14, v15);
    }
    return a3;
  }
  else
  {
    if (!v9)
    {
      v13 = a1;
      v14 = a2;
      v15 = a3;
      return sub_1C4FF0A9C(v13, v14, v15);
    }
    if (v9 != 16)
    {
      if (v9 != 32)
        goto LABEL_50;
      return sub_1C4FF0D1C(a1, a2, a3);
    }
    return (char *)sub_1C4FF0BD8(a1, a2, a3);
  }
}

char *sub_1C4FF0A9C(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = sub_1C4FF0DBC(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (_QWORD *)operator new();
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(v10 + 8);
    *v9 = &off_1E813ECB8;
    v9[1] = v11;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  while (v8 != a3)
  {
    if (*v8 != 124)
      return v8;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = sub_1C4FF0DBC(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      v15 = (_QWORD *)operator new();
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v15 = &off_1E813ECB8;
      v15[1] = v17;
      *(_QWORD *)(v16 + 8) = v15;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    sub_1C4FE8848(a1, v6, v12);
  }
  return a3;
}

uint64_t sub_1C4FF0BD8(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = a2;
  if (a2 == a3)
    return (uint64_t)a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E813ED18;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 == v4)
    return (uint64_t)v4;
  do
  {
    v10 = v3;
    v3 = (char *)sub_1C4FF25D8(a1, v3, v4);
  }
  while (v3 != v10);
  if (v10 == v4)
    return (uint64_t)v4;
  if (v10 + 1 == v4 && *v10 == 36)
  {
    v11 = operator new();
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v11 = &off_1E813ED48;
    *(_QWORD *)(v11 + 8) = v14;
    *(_BYTE *)(v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return (uint64_t)v4;
  }
  v16 = sub_1C4FE82D8();
  return sub_1C4FF0D1C(v16);
}

char *sub_1C4FF0D1C(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char *v13;
  char *v14;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_1C4FF2954(a1, a2, a3);
  if (v7 == a2)
  {
LABEL_9:
    v12 = sub_1C4FE82D8();
    return sub_1C4FF0DBC(v12, v13, v14);
  }
  else
  {
    v8 = v7;
    while (v8 != v3)
    {
      if (*v8 != 124)
        return v8;
      v9 = *(_QWORD *)(a1 + 56);
      v10 = sub_1C4FF2954(a1, v8 + 1, v3);
      if (v10 == v8 + 1)
        goto LABEL_9;
      v8 = v10;
      sub_1C4FE8848(a1, v6, v9);
    }
    return v3;
  }
}

char *sub_1C4FF0DBC(uint64_t a1, char *a2, char *a3)
{
  std::__shared_weak_count *v3;
  int v7;
  int v8;
  char *v9;
  BOOL v10;
  char *v11;
  int v13;
  char *v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  char *result;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t *p_shared_owners;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  int v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  char v62;
  int v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  char v72;
  int v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned __int8 *v79;
  std::locale v80[3];
  int v81;
  int v82;
  std::__shared_weak_count *v83;

  if (a2 == a3)
    return a2;
  v7 = *a2;
  v8 = *a2;
  if (v7 > 91)
  {
    if (v7 == 92)
    {
      if (a2 + 1 == a3)
        goto LABEL_40;
      v24 = a2[1];
      if (v24 == 66)
      {
        v25 = operator new();
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        *(_QWORD *)v25 = &off_1E813ED78;
        *(_QWORD *)(v25 + 8) = v27;
        std::locale::locale((std::locale *)(v25 + 16), (const std::locale *)a1);
        *(_OWORD *)(v25 + 24) = *(_OWORD *)(a1 + 8);
        *(_BYTE *)(v25 + 40) = 1;
      }
      else
      {
        if (v24 != 98)
          goto LABEL_40;
        v25 = operator new();
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        *(_QWORD *)v25 = &off_1E813ED78;
        *(_QWORD *)(v25 + 8) = v26;
        std::locale::locale((std::locale *)(v25 + 16), (const std::locale *)a1);
        *(_OWORD *)(v25 + 24) = *(_OWORD *)(a1 + 8);
        *(_BYTE *)(v25 + 40) = 0;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v25;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a2 + 2;
    }
    if (v7 != 94)
      goto LABEL_40;
    v18 = operator new();
    v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(v20 + 8);
    v22 = &off_1E813ED18;
LABEL_24:
    *(_QWORD *)v18 = v22;
    *(_QWORD *)(v18 + 8) = v21;
    *(_BYTE *)(v18 + 16) = v19;
    *(_QWORD *)(v20 + 8) = v18;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v7 == 36)
  {
    v18 = operator new();
    v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(v20 + 8);
    v22 = &off_1E813ED48;
    goto LABEL_24;
  }
  v10 = v7 == 40;
  v9 = a2 + 1;
  v10 = !v10 || v9 == a3;
  if (v10)
    goto LABEL_40;
  v10 = *v9 == 63;
  v11 = a2 + 2;
  if (!v10 || v11 == a3)
    goto LABEL_40;
  v13 = *v11;
  if (v13 == 33)
  {
    sub_1C4FE9874((uint64_t)v80);
    v81 = *(_DWORD *)(a1 + 24);
    v14 = (char *)sub_1C4FF0748(v80, a2 + 3, a3);
    v28 = v82;
    sub_1C4FE941C(a1, (uint64_t)v80, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += v28;
    if (v14 == a3 || *v14 != 41)
      goto LABEL_107;
    v3 = v83;
    if (!v83)
      goto LABEL_38;
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
  }
  else
  {
    if (v13 != 61)
      goto LABEL_40;
    sub_1C4FE9874((uint64_t)v80);
    v81 = *(_DWORD *)(a1 + 24);
    v14 = (char *)sub_1C4FF0748(v80, a2 + 3, a3);
    v15 = v82;
    sub_1C4FE941C(a1, (uint64_t)v80, 0, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += v15;
    if (v14 == a3 || *v14 != 41)
      goto LABEL_107;
    v3 = v83;
    if (!v83)
      goto LABEL_38;
    v16 = (unint64_t *)&v83->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
  }
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_38:
  std::locale::~locale(v80);
  result = v14 + 1;
  if (v14 + 1 != a2)
    return result;
  v8 = *a2;
LABEL_40:
  v30 = *(_QWORD *)(a1 + 56);
  v31 = *(_DWORD *)(a1 + 28);
  v32 = (char)v8;
  if ((int)v32 <= 91)
  {
    result = a2;
    switch((char)v8)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_68;
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_107;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          v33 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          v34 = (char *)sub_1C4FF0A9C(a1, a2 + 3, a3);
          if (v34 == a3 || (v35 = v34, *v34 != 41))
          {
LABEL_107:
            sub_1C4FE82D8();
            goto LABEL_108;
          }
        }
        else
        {
          sub_1C4FEAC90(a1);
          v43 = *(_DWORD *)(a1 + 28);
          v33 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          v44 = (char *)sub_1C4FF0A9C(a1, a2 + 1, a3);
          if (v44 == a3)
            goto LABEL_107;
          v35 = v44;
          if (*v44 != 41)
            goto LABEL_107;
          sub_1C4FEAD00(a1, v43);
        }
        --*v33;
        v37 = (unsigned __int8 *)(v35 + 1);
        goto LABEL_65;
      case '*':
      case '+':
        goto LABEL_73;
      case '.':
        v40 = (_QWORD *)operator new();
        v41 = *(_QWORD *)(a1 + 56);
        v42 = *(_QWORD *)(v41 + 8);
        *v40 = &off_1E813EDD8;
        v40[1] = v42;
        *(_QWORD *)(v41 + 8) = v40;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        goto LABEL_69;
      default:
        if ((_DWORD)v32 == 91)
        {
          v37 = sub_1C4FF18AC(a1, a2, a3);
          goto LABEL_65;
        }
        if ((_DWORD)v32 != 63)
          goto LABEL_68;
        goto LABEL_73;
    }
  }
  v36 = (v32 - 92);
  if (v36 > 0x21)
    goto LABEL_68;
  if (((1 << (v8 - 92)) & 0x300000006) != 0)
    return a2;
  if ((_DWORD)v32 != 92)
  {
    if (v36 == 31)
    {
LABEL_73:
      sub_1C4FE82D8();
      goto LABEL_74;
    }
LABEL_68:
    sub_1C4FEB0A4(a1, v32);
LABEL_69:
    v37 = (unsigned __int8 *)(a2 + 1);
    goto LABEL_70;
  }
  if (v8 != 92)
    return a2;
  v3 = (std::__shared_weak_count *)(a2 + 1);
  if (a2 + 1 == a3)
  {
LABEL_109:
    v47 = sub_1C4FE82D8();
    return (char *)sub_1C4FF15B4(v47, v48, v49, v50, v45, v46);
  }
  v38 = LOBYTE(v3->__vftable);
  v39 = (v38 - 48);
  if (v38 == 48)
  {
    sub_1C4FEB0A4(a1, v39);
LABEL_103:
    v37 = (unsigned __int8 *)(a2 + 2);
    goto LABEL_70;
  }
LABEL_74:
  if ((v38 - 49) > 8)
    goto LABEL_86;
  v37 = (unsigned __int8 *)(a2 + 2);
  if (a2 + 2 == a3)
  {
    v37 = (unsigned __int8 *)a3;
  }
  else
  {
    while (1)
    {
      v51 = *v37;
      if ((v51 - 48) > 9)
        break;
      if (v39 >= 0x19999999)
        goto LABEL_108;
      ++v37;
      LODWORD(v39) = v51 + 10 * v39 - 48;
      if (v37 == (unsigned __int8 *)a3)
      {
        v37 = (unsigned __int8 *)a3;
        break;
      }
    }
    if (!(_DWORD)v39)
      goto LABEL_108;
  }
  if (v39 > v31)
  {
LABEL_108:
    sub_1C4FE82D8();
    goto LABEL_109;
  }
  sub_1C4FEB1C4(a1, v39);
  if (v37 == (unsigned __int8 *)v3)
  {
    LOBYTE(v38) = v3->__vftable;
LABEL_86:
    if ((char)v38 > 99)
    {
      if ((char)v38 == 119)
      {
        v52 = operator new();
        v53 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v76 = *(_DWORD *)(a1 + 24);
        v55 = v76 & 1;
        v56 = (v76 >> 3) & 1;
        v57 = a1;
        v58 = 0;
        goto LABEL_99;
      }
      if ((char)v38 == 115)
      {
        v69 = operator new();
        v70 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v78 = *(_DWORD *)(a1 + 24);
        v72 = v78 & 1;
        v73 = (v78 >> 3) & 1;
        v74 = a1;
        v75 = 0;
LABEL_101:
        v67 = sub_1C4FEBBE8(v69, v74, v70, v75, v72, v73);
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v67;
        *(_QWORD *)(a1 + 56) = v67;
        v68 = *(_DWORD *)(v67 + 160) | 0x4000;
        goto LABEL_102;
      }
      if ((char)v38 != 100)
      {
LABEL_104:
        v79 = sub_1C4FF1F44(a1, (unsigned __int8 *)v3, a3, 0);
        if (v79 == (unsigned __int8 *)v3)
          v37 = (unsigned __int8 *)a2;
        else
          v37 = v79;
        goto LABEL_65;
      }
      v59 = operator new();
      v60 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v61 = *(_DWORD *)(a1 + 24);
      v62 = v61 & 1;
      v63 = (v61 >> 3) & 1;
      v64 = a1;
      v65 = 0;
    }
    else
    {
      if ((char)v38 != 68)
      {
        if ((char)v38 != 83)
        {
          if ((char)v38 == 87)
          {
            v52 = operator new();
            v53 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v54 = *(_DWORD *)(a1 + 24);
            v55 = v54 & 1;
            v56 = (v54 >> 3) & 1;
            v57 = a1;
            v58 = 1;
LABEL_99:
            v77 = sub_1C4FEBBE8(v52, v57, v53, v58, v55, v56);
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v77;
            *(_QWORD *)(a1 + 56) = v77;
            *(_DWORD *)(v77 + 160) |= 0x500u;
            sub_1C4FEB9D0(v77, 95);
            goto LABEL_103;
          }
          goto LABEL_104;
        }
        v69 = operator new();
        v70 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v71 = *(_DWORD *)(a1 + 24);
        v72 = v71 & 1;
        v73 = (v71 >> 3) & 1;
        v74 = a1;
        v75 = 1;
        goto LABEL_101;
      }
      v59 = operator new();
      v60 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v66 = *(_DWORD *)(a1 + 24);
      v62 = v66 & 1;
      v63 = (v66 >> 3) & 1;
      v64 = a1;
      v65 = 1;
    }
    v67 = sub_1C4FEBBE8(v59, v64, v60, v65, v62, v63);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v67;
    *(_QWORD *)(a1 + 56) = v67;
    v68 = *(_DWORD *)(v67 + 160) | 0x400;
LABEL_102:
    *(_DWORD *)(v67 + 160) = v68;
    goto LABEL_103;
  }
LABEL_65:
  result = a2;
  if (v37 != (unsigned __int8 *)a2)
  {
LABEL_70:
    v45 = v31 + 1;
    v46 = *(_DWORD *)(a1 + 28) + 1;
    v47 = a1;
    v48 = (char *)v37;
    v49 = a3;
    v50 = v30;
    return (char *)sub_1C4FF15B4(v47, v48, v49, v50, v45, v46);
  }
  return result;
}

uint64_t sub_1C4FF15B4(uint64_t a1, char *a2, char *a3, uint64_t a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char *v23;
  char *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;

  if (a2 == a3)
    return (uint64_t)a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = *a2;
  if (v12 <= 62)
  {
    if (v12 == 42)
    {
      v13 = a2 + 1;
      if (v11)
        v19 = 1;
      else
        v19 = v13 == a3;
      if (!v19 && *v13 == 63)
      {
        v13 = a2 + 2;
        v14 = 0;
        goto LABEL_26;
      }
      v14 = 0;
      goto LABEL_36;
    }
    if (v12 == 43)
    {
      v13 = a2 + 1;
      if (!v11 && v13 != a3 && *v13 == 63)
      {
        v13 = a2 + 2;
        v14 = 1;
LABEL_26:
        v18 = -1;
        goto LABEL_33;
      }
      v14 = 1;
      goto LABEL_36;
    }
    return (uint64_t)a2;
  }
  if (v12 == 63)
  {
    v13 = a2 + 1;
    if (v11)
      v20 = 1;
    else
      v20 = v13 == a3;
    if (!v20 && *v13 == 63)
    {
      v13 = a2 + 2;
      v14 = 0;
      v18 = 1;
      goto LABEL_33;
    }
    v14 = 0;
    v18 = 1;
    goto LABEL_45;
  }
  if (v12 != 123)
    return (uint64_t)a2;
  v15 = a2 + 1;
  v16 = (char *)sub_1C4FEDCB4(a2 + 1, a3, &v29);
  if (v16 == v15)
    goto LABEL_58;
  if (v16 != a3)
  {
    v17 = *v16;
    if (v17 != 44)
    {
      if (v17 == 125)
      {
        v13 = v16 + 1;
        if (!v11 && v13 != a3 && *v13 == 63)
        {
          v13 = v16 + 2;
          v14 = v29;
          a5 = v7;
          a6 = v6;
          a1 = v10;
          v18 = v29;
LABEL_33:
          v21 = a4;
          v22 = 0;
LABEL_46:
          sub_1C4FEDBA0(a1, v14, v18, v21, a5, a6, v22);
          return (uint64_t)v13;
        }
        v14 = v29;
        a5 = v7;
        a6 = v6;
        a1 = v10;
        v18 = v29;
LABEL_45:
        v21 = a4;
        v22 = 1;
        goto LABEL_46;
      }
      goto LABEL_58;
    }
    v23 = v16 + 1;
    if (v16 + 1 == a3)
    {
LABEL_58:
      sub_1C4FE82D8();
      goto LABEL_59;
    }
    if (*v23 == 125)
    {
      v13 = v16 + 2;
      if (!v11 && v13 != a3 && *v13 == 63)
      {
        v13 = v16 + 3;
        v14 = v29;
        a5 = v7;
        a6 = v6;
        a1 = v10;
        goto LABEL_26;
      }
      v14 = v29;
      a5 = v7;
      a6 = v6;
      a1 = v10;
LABEL_36:
      v18 = -1;
      goto LABEL_45;
    }
    v28 = -1;
    v25 = (char *)sub_1C4FEDCB4(v16 + 1, a3, &v28);
    if (v25 != v23 && v25 != a3 && *v25 == 125)
    {
      v18 = v28;
      v14 = v29;
      if (v28 >= v29)
      {
        v13 = v25 + 1;
        v22 = 1;
        if (!v11 && v13 != a3)
        {
          v26 = v25[1];
          v22 = v26 != 63;
          if (v26 == 63)
            v13 = v25 + 2;
        }
        a5 = v7;
        a6 = v6;
        a1 = v10;
        v21 = a4;
        goto LABEL_46;
      }
      goto LABEL_58;
    }
  }
LABEL_59:
  v27 = sub_1C4FE82D8();
  return sub_1C4FF18AC(v27);
}

unsigned __int8 *sub_1C4FF18AC(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  uint64_t j;
  int v16;
  int v17;
  char *v18;
  char *v19;
  std::string::size_type size;
  char *v21;
  unint64_t i;
  char *v23;
  std::string::size_type v24;
  std::string *v25;
  void *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  _BOOL4 v30;
  std::string *p_p;
  std::string::size_type v32;
  std::string *v33;
  std::regex_traits<char>::char_class_type classname;
  int v35;
  char *v36;
  int v37;
  std::string::size_type v38;
  std::string *v39;
  _BYTE *v40;
  uint64_t v41;
  std::string *v42;
  char *v43;
  std::string::size_type v44;
  std::string *v45;
  unint64_t v46;
  std::string *v47;
  std::string::size_type v48;
  uint64_t v50;
  unsigned __int8 *v51;
  char *v52;
  std::string *v53;
  std::string v54;
  std::string v55;
  void *__src[2];
  uint64_t v57;
  std::string __p;

  if (a2 == a3 || *a2 != 91)
    return (unsigned __int8 *)a2;
  if (a2 + 1 == a3)
    goto LABEL_144;
  v5 = a2[1];
  v6 = v5 == 94;
  v7 = v5 == 94 ? a2 + 2 : a2 + 1;
  v8 = operator new();
  v9 = sub_1C4FEBBE8(v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
  *(_QWORD *)(a1 + 56) = v9;
  if (v7 == a3)
    goto LABEL_144;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
  {
    sub_1C4FEB9D0(v8, 93);
    ++v7;
  }
  if (v7 == a3)
    goto LABEL_144;
  v10 = a3 - 4;
  do
  {
    v11 = v7;
    v12 = a3;
    if (v7 == a3)
      goto LABEL_123;
    v13 = *v7;
    v12 = v7;
    if (v13 == 93)
      goto LABEL_123;
    memset(&v55, 0, sizeof(v55));
    if (v7 + 1 != a3 && v13 == 91)
    {
      v14 = v7[1];
      switch(v14)
      {
        case '.':
          v7 = (char *)sub_1C4FF21F0(a1, v7 + 2, a3, (uint64_t)&v55);
          v16 = *(_DWORD *)(a1 + 24) & 0x1F0;
          size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v55.__r_.__value_.__l.__size_;
          if (size)
            goto LABEL_71;
          goto LABEL_27;
        case ':':
          v21 = v7 + 2;
          if (a3 - (v7 + 2) < 2)
            goto LABEL_144;
          for (i = 0; v11[i + 2] != 58 || v11[i + 3] != 93; ++i)
          {
            if (v10 - v11 == i)
              goto LABEL_144;
          }
          v29 = &v11[i + 2];
          if (v29 == a3)
            goto LABEL_144;
          v30 = *(_DWORD *)(a1 + 24) & 1;
          sub_1C4E61270(&__p, v21, v29, i);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v32 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v32 = __p.__r_.__value_.__l.__size_;
          (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), p_p, (char *)p_p + v32);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = &__p;
          else
            v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
          classname = std::__get_classname((const char *)v33, v30);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!classname)
            goto LABEL_146;
          v35 = 0;
          *(_DWORD *)(v8 + 160) |= classname;
          v36 = &v11[i];
          goto LABEL_120;
        case '=':
          if (a3 - (v7 + 2) < 2)
            goto LABEL_144;
          for (j = 0; v7[j + 2] != 61 || v7[j + 3] != 93; ++j)
          {
            if (v10 - v7 == j)
              goto LABEL_144;
          }
          v23 = &v7[j + 2];
          if (v23 == a3)
            goto LABEL_144;
          sub_1C4FED4C8((uint64_t)&__p, a1, v7 + 2, v23);
          v24 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v24 = __p.__r_.__value_.__l.__size_;
          if (!v24)
            goto LABEL_145;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &__p;
          else
            v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          sub_1C4FEC9C4((uint64_t)__src, a1, (char *)v25, (char *)v25 + v24);
          v26 = (void *)(HIBYTE(v57) & 0x7F);
          if (v57 < 0)
            v26 = __src[1];
          if (v26)
          {
            v27 = *(_QWORD *)(v8 + 144);
            if (v27 >= *(_QWORD *)(v8 + 152))
            {
              v46 = sub_1C4D9AEFC((unint64_t *)(v8 + 136), (uint64_t)__src);
            }
            else
            {
              if (SHIBYTE(v57) < 0)
              {
                sub_1C47EBC30(*(_BYTE **)(v8 + 144), __src[0], (unint64_t)__src[1]);
              }
              else
              {
                v28 = *(_OWORD *)__src;
                *(_QWORD *)(v27 + 16) = v57;
                *(_OWORD *)v27 = v28;
              }
              v46 = v27 + 24;
            }
            *(_QWORD *)(v8 + 144) = v46;
          }
          else
          {
            v44 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v44 = __p.__r_.__value_.__l.__size_;
            if (v44 == 2)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v47 = &__p;
              else
                v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
              sub_1C4FED2A0(v8, v47->__r_.__value_.__s.__data_[0], v47->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v44 != 1)
                goto LABEL_145;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v45 = &__p;
              else
                v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
              sub_1C4FEB9D0(v8, v45->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(v57) < 0)
            operator delete(__src[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v35 = 0;
          v36 = &v11[j];
LABEL_120:
          v7 = v36 + 4;
          v12 = v11;
          goto LABEL_121;
      }
    }
    v16 = *(_DWORD *)(a1 + 24) & 0x1F0;
LABEL_27:
    if ((v16 | 0x40) != 0x40)
    {
      LOBYTE(v17) = *v7;
LABEL_32:
      std::string::operator=(&v55, v17);
      ++v7;
      goto LABEL_71;
    }
    v17 = *v7;
    if (v17 != 92)
      goto LABEL_32;
    v18 = v7 + 1;
    if (v16)
      v19 = sub_1C4FF2400(a1, v18, a3, &v55);
    else
      v19 = (char *)sub_1C4FF22DC(a1, (unsigned __int8 *)v18, a3, &v55, v8);
    v7 = v19;
LABEL_71:
    if (v7 != a3)
    {
      v37 = *v7;
      if (v37 != 93)
      {
        v40 = v7 + 1;
        if (v7 + 1 != a3 && v37 == 45 && *v40 != 93)
        {
          memset(&__p, 0, sizeof(__p));
          v12 = v7 + 2;
          if (v7 + 2 != a3 && *v40 == 91 && *v12 == 46)
          {
            v41 = sub_1C4FF21F0(a1, v7 + 3, a3, (uint64_t)&__p);
LABEL_129:
            v12 = (char *)v41;
            goto LABEL_130;
          }
          if ((v16 | 0x40) == 0x40)
          {
            LODWORD(v40) = *v40;
            if ((_DWORD)v40 == 92)
            {
              v43 = v7 + 2;
              if (v16)
                v41 = (uint64_t)sub_1C4FF2400(a1, v43, a3, &__p);
              else
                v41 = (uint64_t)sub_1C4FF22DC(a1, (unsigned __int8 *)v43, a3, &__p, v8);
              goto LABEL_129;
            }
          }
          else
          {
            LOBYTE(v40) = *v40;
          }
          std::string::operator=(&__p, (std::string::value_type)v40);
LABEL_130:
          *(_OWORD *)__src = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
          v48 = v55.__r_.__value_.__r.__words[2];
          v54 = __p;
          memset(&v55, 0, sizeof(v55));
          v57 = v48;
          memset(&__p, 0, sizeof(__p));
          sub_1C4FECE98(v8, (char *)__src, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (SHIBYTE(v57) < 0)
            operator delete(__src[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v35 = 1;
          goto LABEL_121;
        }
      }
    }
    v38 = *((_BYTE *)&v55.__r_.__value_.__s + 23) & 0x7F;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = v55.__r_.__value_.__l.__size_;
    if (v38)
    {
      if (v38 == 1)
      {
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &v55;
        else
          v39 = (std::string *)v55.__r_.__value_.__r.__words[0];
        sub_1C4FEB9D0(v8, v39->__r_.__value_.__s.__data_[0]);
      }
      else
      {
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v55;
        else
          v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
        sub_1C4FED2A0(v8, v42->__r_.__value_.__s.__data_[0], v42->__r_.__value_.__s.__data_[1]);
      }
    }
    v35 = 1;
    v12 = v7;
LABEL_121:
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v35)
        continue;
LABEL_123:
      v7 = v12;
      continue;
    }
    operator delete(v55.__r_.__value_.__l.__data_);
    if (v35)
      goto LABEL_123;
  }
  while (v7 != v11);
  if (v11 != a3)
  {
    if (*v11 == 45)
    {
      sub_1C4FEB9D0(v8, 45);
      ++v11;
    }
    if (v11 != a3 && *v11 == 93)
      return (unsigned __int8 *)(v11 + 1);
  }
LABEL_144:
  sub_1C4FE82D8();
LABEL_145:
  sub_1C4FE82D8();
LABEL_146:
  v50 = sub_1C4FE82D8();
  return sub_1C4FF1F44(v50, v51, v52, v53);
}

unsigned __int8 *sub_1C4FF1F44(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this)
{
  unsigned __int8 *v4;
  int v5;
  std::string *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int8 v10;
  char v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = a2;
  if (a2 == (unsigned __int8 *)a3)
    return v4;
  v5 = (char)*a2;
  if (v5 > 109)
  {
    switch(*a2)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v7) = 10;
          goto LABEL_48;
        }
        v7 = 10;
        goto LABEL_57;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v7) = 13;
          goto LABEL_48;
        }
        v7 = 13;
        goto LABEL_57;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v7) = 9;
          goto LABEL_48;
        }
        v7 = 9;
        goto LABEL_57;
      case 'u':
        if (a2 + 1 == (unsigned __int8 *)a3)
          goto LABEL_62;
        v8 = a2[1];
        if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 && (v8 | 0x20u) - 97 >= 6)
          goto LABEL_62;
        v4 = a2 + 2;
        if (a2 + 2 == (unsigned __int8 *)a3)
          goto LABEL_62;
        v9 = *v4;
        if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
          goto LABEL_62;
        goto LABEL_23;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v7) = 11;
          goto LABEL_48;
        }
        v7 = 11;
        break;
      case 'x':
LABEL_23:
        if (v4 + 1 == (unsigned __int8 *)a3)
          goto LABEL_62;
        v10 = v4[1];
        v11 = -48;
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
          goto LABEL_28;
        v10 |= 0x20u;
        if ((v10 - 97) >= 6u)
          goto LABEL_62;
        v11 = -87;
LABEL_28:
        if (v4 + 2 == (unsigned __int8 *)a3)
          goto LABEL_62;
        v12 = v4[2];
        v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
          goto LABEL_33;
        v12 |= 0x20u;
        if ((v12 - 97) >= 6u)
          goto LABEL_62;
        v13 = -87;
LABEL_33:
        if (this)
          std::string::operator=(this, v12 + 16 * (v10 + v11) + v13);
        else
          sub_1C4FEB0A4(a1, (char)(v12 + 16 * (v10 + v11) + v13));
        v4 += 3;
        return v4;
      default:
        goto LABEL_43;
    }
    goto LABEL_57;
  }
  switch(v5)
  {
    case '0':
      if (this)
      {
        v6 = this;
        LOBYTE(v7) = 0;
        goto LABEL_48;
      }
      v7 = 0;
LABEL_57:
      sub_1C4FEB0A4(a1, v7);
      return ++v4;
    case 'c':
      if (a2 + 1 != (unsigned __int8 *)a3 && ((a2[1] & 0xDF) - 65) <= 0x19u)
      {
        v14 = a2[1] & 0x1F;
        if (this)
          std::string::operator=(this, v14);
        else
          sub_1C4FEB0A4(a1, v14);
        v4 += 2;
        return v4;
      }
      break;
    case 'f':
      if (this)
      {
        v6 = this;
        LOBYTE(v7) = 12;
LABEL_48:
        std::string::operator=(v6, v7);
        return ++v4;
      }
      v7 = 12;
      goto LABEL_57;
    default:
LABEL_43:
      v15 = *a2;
      if ((_DWORD)v15 != 95
        && ((v15 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v15) & 0x500) == 0))
      {
        v7 = (char)v15;
        if (this)
        {
          v6 = this;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
      break;
  }
LABEL_62:
  v17 = sub_1C4FE82D8();
  return (unsigned __int8 *)sub_1C4FF21F0(v17, v18, v19, v20);
}

uint64_t sub_1C4FF21F0(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  std::string *v14;
  __int128 v15;
  unint64_t v16;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
  {
LABEL_15:
    sub_1C4FE82D8();
  }
  else
  {
    sub_1C4FED4C8((uint64_t)&v15, a1, a2, &a2[i]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = v15;
    v7 = v16;
    *(_QWORD *)(a4 + 16) = v16;
    v7 >>= 56;
    v8 = (char)v7;
    v9 = v7 & 0x7F;
    if (v8 < 0)
      v9 = *(_QWORD *)(a4 + 8);
    if ((unint64_t)(v9 - 1) < 2)
      return (uint64_t)&a2[i + 2];
  }
  v11 = sub_1C4FE82D8();
  return sub_1C4FF22DC(v11, v12, v13, v14);
}

unsigned __int8 *sub_1C4FF22DC(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this, uint64_t a5)
{
  int v6;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;
  int v12;
  int v13;
  int v14;
  std::string *v15;

  if (a2 != (unsigned __int8 *)a3)
  {
    v6 = (char)*a2;
    if (v6 <= 97)
    {
      if (v6 <= 82)
      {
        if (*a2)
        {
          if (v6 == 68)
          {
            v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
            *(_DWORD *)(a5 + 164) = v7;
            return a2 + 1;
          }
          return sub_1C4FF1F44(a1, a2, a3, this);
        }
        v9 = 0;
        v10 = this;
        goto LABEL_19;
      }
      if (v6 == 83)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x4000;
        goto LABEL_21;
      }
      if (v6 != 87)
        return sub_1C4FF1F44(a1, a2, a3, this);
      *(_DWORD *)(a5 + 164) |= 0x500u;
      sub_1C4FED640(a5);
      return a2 + 1;
    }
    if (v6 > 114)
    {
      if (v6 == 115)
      {
        v8 = *(_DWORD *)(a5 + 160) | 0x4000;
        goto LABEL_23;
      }
      if (v6 == 119)
      {
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_1C4FEB9D0(a5, 95);
        return a2 + 1;
      }
    }
    else
    {
      if (v6 == 98)
      {
        v10 = this;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return a2 + 1;
      }
      if (v6 == 100)
      {
        v8 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_23:
        *(_DWORD *)(a5 + 160) = v8;
        return a2 + 1;
      }
    }
    return sub_1C4FF1F44(a1, a2, a3, this);
  }
  v12 = sub_1C4FE82D8();
  return (unsigned __int8 *)sub_1C4FF2400(v12, v13, v14, v15);
}

char *sub_1C4FF2400(uint64_t a1, char *a2, char *a3, std::string *this)
{
  uint64_t v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;
  uint64_t v13;

  if (a2 == a3)
    goto LABEL_52;
  v5 = *a2;
  if ((int)v5 > 97)
  {
    switch((int)v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        v5 = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        v5 = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        v5 = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        v5 = 11;
        goto LABEL_49;
      default:
        if ((_DWORD)v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          v5 = 8;
        }
        else
        {
          if ((_DWORD)v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          v5 = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if ((int)v5 > 91)
  {
    if ((_DWORD)v5 != 92)
    {
      if ((_DWORD)v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      v5 = 7;
LABEL_49:
      sub_1C4FEB0A4(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if ((_DWORD)v5 == 34 || (_DWORD)v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) == 0x30)
  {
    v7 = v5 - 48;
    v8 = a2 + 1;
    if (a2 + 1 != a3)
    {
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_39;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 != a3)
      {
        v9 = a2[2];
        v10 = v9 & 0xF8;
        v11 = v9 + 8 * v7 - 48;
        if (v10 == 48)
          v8 = a2 + 3;
        else
          v8 = a2 + 2;
        if (v10 == 48)
          v7 = v11;
        goto LABEL_39;
      }
    }
    v8 = a3;
LABEL_39:
    if (this)
      std::string::operator=(this, v7);
    else
      sub_1C4FEB0A4(a1, v7);
    return v8;
  }
LABEL_52:
  v13 = sub_1C4FE82D8();
  return (char *)sub_1C4FF25D8(v13);
}

uint64_t sub_1C4FF25D8(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v3;
  uint64_t v6;
  int v7;
  int v8;
  char *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  char *v15;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  int v35;

  v3 = (unsigned __int8 *)a2;
  if (a2 == a3)
    return (uint64_t)v3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v9 = a2 + 1;
  v8 = *a2;
  if (a2 + 1 != a3 || v8 != 36)
  {
    if ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0)
    {
      sub_1C4FEB0A4(a1, (char)v8);
      goto LABEL_32;
    }
    if (v9 == a3 || v8 != 92)
    {
      if (v8 == 46)
      {
        v18 = (_QWORD *)operator new();
        v19 = *(_QWORD *)(a1 + 56);
        v20 = *(_QWORD *)(v19 + 8);
        *v18 = &off_1E813F0A8;
        v18[1] = v20;
        *(_QWORD *)(v19 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        goto LABEL_32;
      }
    }
    else
    {
      v17 = *v9;
      if ((v17 - 36) <= 0x3A && ((1 << (v17 - 36)) & 0x580000000000441) != 0)
      {
        sub_1C4FEB0A4(a1, (char)v17);
        v9 = (char *)(v3 + 2);
        goto LABEL_32;
      }
    }
  }
  v10 = sub_1C4FF18AC(a1, a2, a3);
  v11 = v10;
  if (v10 == v3 && v10 != (unsigned __int8 *)a3)
  {
    if (v9 == a3 || *v3 != 92)
      return (uint64_t)v3;
    v12 = *v9;
    if (v12 == 40)
    {
      v13 = (uint64_t)(v3 + 2);
      sub_1C4FEAC90(a1);
      v14 = *(_DWORD *)(a1 + 28);
      do
      {
        v15 = (char *)v13;
        v13 = sub_1C4FF25D8(a1);
      }
      while ((char *)v13 != v15);
      if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41)
        goto LABEL_59;
      v11 = (unsigned __int8 *)(v15 + 2);
      sub_1C4FEAD00(a1, v14);
    }
    else
    {
      v21 = sub_1C4FEE670(a1, v12);
      v22 = 2;
      if (!v21)
        v22 = 0;
      v11 = &v3[v22];
    }
  }
  v9 = (char *)v11;
  if (v11 == v3)
    return (uint64_t)v3;
LABEL_32:
  if (v9 == a3)
    return (uint64_t)a3;
  v23 = *(_DWORD *)(a1 + 28) + 1;
  v24 = *v9;
  if (v24 == 42)
  {
    sub_1C4FEDBA0(a1, 0, -1, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1, 1);
    return (uint64_t)(v9 + 1);
  }
  if (v9 + 1 == a3 || v24 != 92 || v9[1] != 123)
    return (uint64_t)v9;
  v35 = 0;
  v25 = (char *)sub_1C4FEDCB4(v9 + 2, a3, &v35);
  if (v25 == v9 + 2)
  {
LABEL_48:
    sub_1C4FE82D8();
    return (uint64_t)v9;
  }
  if (v25 != a3)
  {
    v26 = v25 + 1;
    v27 = *v25;
    if (v27 == 44)
    {
      v34 = -1;
      v28 = (char *)sub_1C4FEDCB4(v25 + 1, a3, &v34);
      if (v28 != a3 && v28 + 1 != a3 && *v28 == 92 && v28[1] == 125)
      {
        v30 = v34;
        v29 = v35;
        if (v34 == -1)
        {
          v30 = -1;
        }
        else if (v34 < v35)
        {
          goto LABEL_48;
        }
        v3 = (unsigned __int8 *)&v28[2 * (v28[1] == 125)];
        v31 = a1;
LABEL_56:
        sub_1C4FEDBA0(v31, v29, v30, v6, v7 + 1, v23, 1);
        return (uint64_t)v3;
      }
    }
    else if (v26 != a3 && v27 == 92 && *v26 == 125)
    {
      v3 = (unsigned __int8 *)(v25 + 2);
      v29 = v35;
      v31 = a1;
      v30 = v35;
      goto LABEL_56;
    }
  }
  sub_1C4FE82D8();
LABEL_59:
  v33 = sub_1C4FE82D8();
  return sub_1C4FF2954(v33);
}

char *sub_1C4FF2954(uint64_t a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = sub_1C4FF29B0(a1, a2, a3);
  if (v6 == a2)
  {
    v9 = sub_1C4FE82D8();
    return sub_1C4FF29B0(v9, v10, v11);
  }
  else
  {
    do
    {
      v7 = v6;
      v6 = sub_1C4FF29B0(a1, v6, a3);
    }
    while (v6 != v7);
    return v7;
  }
}

char *sub_1C4FF29B0(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  int v12;
  signed __int8 v13;
  char *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  int v26;
  char *v27;
  char *v28;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  llvm::raw_ostream *v37;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    v14 = (char *)sub_1C4FF18AC(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = *a2;
  v10 = (v8 - 36);
  if (v10 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v10 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      sub_1C4FEB0A4(a1, (char)v9);
LABEL_33:
      v11 = a2 + 1;
      return (char *)sub_1C4FF15B4(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v11 = a2 + 1;
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_1E813F0A8;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return (char *)sub_1C4FF15B4(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    goto LABEL_24;
  }
  v12 = *v11;
  v13 = *v11;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    sub_1C4FEB0A4(a1, v13);
    v11 = a2 + 2;
    return (char *)sub_1C4FF15B4(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    v14 = sub_1C4FF2400(a1, a2 + 1, a3, 0);
  }
  else
  {
    v15 = sub_1C4FEE670(a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = &a2[v16];
  }
  if (v14 == a2)
  {
    v9 = *a2;
    goto LABEL_22;
  }
LABEL_25:
  if (v14 != a2 || v14 == a3)
  {
LABEL_37:
    v11 = v14;
    if (v14 != a2)
      return (char *)sub_1C4FF15B4(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    return a2;
  }
  v20 = *a2;
  if (v20 == 36)
  {
    v21 = operator new();
    v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v23 = *(_QWORD *)(a1 + 56);
    v24 = *(_QWORD *)(v23 + 8);
    v25 = &off_1E813ED48;
    goto LABEL_32;
  }
  if (v20 != 40)
  {
    if (v20 == 94)
    {
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E813ED18;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_33;
    }
    return a2;
  }
  sub_1C4FEAC90(a1);
  v26 = *(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 36);
  v27 = (char *)sub_1C4FF0D1C(a1);
  if (v27 != a3)
  {
    v28 = v27;
    if (*v27 == 41)
    {
      sub_1C4FEAD00(a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = v28 + 1;
      goto LABEL_37;
    }
  }
  v30 = sub_1C4FE82D8();
  return (char *)llvm::BitcodeAnalyzer::decodeMetadataStringsBlob(v30, v31, v32, v33, v34, v35, v36, v37);
}

void llvm::BitcodeAnalyzer::decodeMetadataStringsBlob(llvm::raw_ostream *this@<X7>, const void *a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  llvm::raw_ostream *v9;
  unint64_t v10;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  const std::error_category *v20;
  char *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _WORD *v29;
  unsigned int v30;
  uint64_t v31;
  const std::error_category *v32;
  const char *v33;
  uint64_t *v34;
  uint64_t *v35;
  const std::error_category *v36;
  const char *v37;
  const std::error_category *v38;
  _BYTE *v39;
  uint64_t v40;
  const std::error_category *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const std::error_category *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    if (a5 == 2)
    {
      v9 = this;
      v10 = a7;
      v14 = *a4;
      v15 = *a4;
      v16 = *((unsigned int *)a4 + 2);
      v17 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v17 > 0xEuLL)
      {
        qmemcpy(v17, " num-strings = ", 15);
        *((_QWORD *)this + 4) += 15;
        v18 = this;
      }
      else
      {
        v18 = llvm::raw_ostream::write(this, " num-strings = ", 0xFuLL);
      }
      sub_1C5E21910(v18, v15, 0, 0, 0);
      v19 = *((_QWORD *)v18 + 4);
      if ((unint64_t)(*((_QWORD *)v18 + 3) - v19) > 2)
      {
        *(_BYTE *)(v19 + 2) = 10;
        *(_WORD *)v19 = 31520;
        *((_QWORD *)v18 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v18, " {\n", 3uLL);
      }
      if (v10 >= v16)
        v20 = (const std::error_category *)v16;
      else
        v20 = (const std::error_category *)v10;
      v40 = a6;
      v41 = v20;
      v21 = (char *)v20 + a6;
      v22 = v10 - (_QWORD)v20;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      while (1)
      {
        if (v44)
          v23 = 1;
        else
          v23 = (unint64_t)v41 > v42;
        if (!v23)
        {
          v36 = std::generic_category();
          v47 = 92;
          v48 = v36;
          v37 = "bad length";
LABEL_49:
          v46 = v37;
          v34 = (uint64_t *)&v46;
          v35 = &v47;
          goto LABEL_50;
        }
        sub_1C4FF7E04((uint64_t)&v40, 6u, (uint64_t)&v47);
        if ((v48 & 1) != 0)
        {
LABEL_41:
          v31 = v47;
        }
        else
        {
          if ((v47 & 0x20) == 0)
          {
            v24 = v47;
            v25 = v10 & 0xFFFFFFFF00000000;
LABEL_19:
            v10 = v24 | v25;
            v26 = v24 | v25;
            *a8 = 0;
            goto LABEL_20;
          }
          v30 = 0;
          LODWORD(v25) = v47 & 0x1F;
          while (v30 < 0x1B)
          {
            sub_1C4FF7E04((uint64_t)&v40, 6u, (uint64_t)&v47);
            if ((v48 & 1) != 0)
              goto LABEL_41;
            v25 = ((v47 & 0x1F) << (v30 + 5)) | v25;
            v30 += 5;
            if ((v47 & 0x20) == 0)
            {
              v24 = v10 & 0xFFFFFFFF00000000;
              goto LABEL_19;
            }
          }
          v32 = std::generic_category();
          v47 = 92;
          v48 = v32;
          v46 = "Unterminated VBR";
          sub_1C5DF1730((_BYTE **)&v46, &v47, &v45);
          v31 = v45;
        }
        *a8 = v31;
        if (v31)
          return;
        v26 = 0;
        v10 = 0;
LABEL_20:
        if (v22 < v26)
        {
          v38 = std::generic_category();
          v47 = 92;
          v48 = v38;
          v37 = "truncated chars";
          goto LABEL_49;
        }
        v27 = (_BYTE *)*((_QWORD *)v9 + 4);
        if (a3 <= *((_QWORD *)v9 + 3) - (_QWORD)v27)
        {
          if (a3)
          {
            memcpy(v27, a2, a3);
            v27 = (_BYTE *)(*((_QWORD *)v9 + 4) + a3);
            *((_QWORD *)v9 + 4) = v27;
          }
          v28 = v9;
        }
        else
        {
          v28 = llvm::raw_ostream::write(v9, (const char *)a2, a3);
          v27 = (_BYTE *)*((_QWORD *)v28 + 4);
        }
        if (*((_QWORD *)v28 + 3) - (_QWORD)v27 > 4uLL)
        {
          v27[4] = 39;
          *(_DWORD *)v27 = 538976288;
          *((_QWORD *)v28 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v28, "    '", 5uLL);
        }
        if (v22 < v26)
          v26 = v22;
        llvm::raw_ostream::write_escaped(v9, v21, v26, 1);
        v29 = (_WORD *)*((_QWORD *)v9 + 4);
        if (*((_QWORD *)v9 + 3) - (_QWORD)v29 > 1uLL)
        {
          *v29 = 2599;
          *((_QWORD *)v9 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v9, "'\n", 2uLL);
        }
        v21 += v26;
        v22 -= v26;
        LODWORD(v14) = v14 - 1;
        if (!(_DWORD)v14)
        {
          v39 = (_BYTE *)*((_QWORD *)v9 + 4);
          if (a3 <= *((_QWORD *)v9 + 3) - (_QWORD)v39)
          {
            if (a3)
            {
              memcpy(v39, a2, a3);
              v39 = (_BYTE *)(*((_QWORD *)v9 + 4) + a3);
              *((_QWORD *)v9 + 4) = v39;
            }
          }
          else
          {
            v9 = llvm::raw_ostream::write(v9, (const char *)a2, a3);
            v39 = (_BYTE *)*((_QWORD *)v9 + 4);
          }
          if (*((_QWORD *)v9 + 3) - (_QWORD)v39 > 2uLL)
          {
            v39[2] = 125;
            *(_WORD *)v39 = 8224;
            *((_QWORD *)v9 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v9, "  }", 3uLL);
          }
          *a8 = 0;
          return;
        }
      }
    }
    v40 = 92;
    v41 = std::generic_category();
    v33 = "Decoding metadata strings blob needs two record entries.";
  }
  else
  {
    v40 = 92;
    v41 = std::generic_category();
    v33 = "Cannot decode empty blob.";
  }
  v47 = (uint64_t)v33;
  v34 = &v47;
  v35 = &v40;
LABEL_50:
  sub_1C5DF1730((_BYTE **)v34, v35, a8);
}

uint64_t llvm::BitcodeAnalyzer::BitcodeAnalyzer(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0x200000000;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = result + 80;
  *(_QWORD *)(result + 72) = 0x800000000;
  *(_BYTE *)(result + 376) = 0;
  *(_BYTE *)(result + 720) = 0;
  *(_DWORD *)(result + 728) = 0;
  *(_OWORD *)(result + 336) = 0u;
  *(_OWORD *)(result + 352) = 0u;
  *(_QWORD *)(result + 744) = 0;
  *(_QWORD *)(result + 752) = 0;
  *(_QWORD *)(result + 736) = result + 744;
  if (*(_BYTE *)(a4 + 16))
  {
    *(_OWORD *)(result + 376) = *(_OWORD *)a4;
    *(_QWORD *)(result + 392) = 0;
    *(_QWORD *)(result + 400) = 0;
    *(_QWORD *)(result + 408) = 0x200000000;
    *(_QWORD *)(result + 416) = 0;
    *(_QWORD *)(result + 424) = 0;
    *(_QWORD *)(result + 432) = 0;
    *(_QWORD *)(result + 440) = result + 456;
    *(_QWORD *)(result + 448) = 0x800000000;
    *(_QWORD *)(result + 712) = 0;
    *(_BYTE *)(result + 720) = 1;
  }
  return result;
}

void llvm::BitcodeAnalyzer::analyze(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  llvm::raw_ostream *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  llvm::raw_ostream *v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  const std::error_category *v23;
  int v24;
  const std::error_category *v25;
  unsigned int v26;
  unsigned int v27;
  const std::error_category *v28;
  uint64_t v29;
  const char *v30;
  const std::error_category *v31;
  const std::error_category *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  const char *v40;
  uint64_t v41;
  const std::error_category *v42;
  char v43;
  char v44;
  __int128 v45;
  __int128 v46;
  int v47;
  unsigned int v48;
  void *__p[3];
  char *v50[2];
  _QWORD v51[36];

  v51[34] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 16))
  {
    v8 = *(llvm::raw_ostream **)a2;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  sub_1C4FF3750((uint64_t)&v45, v8, v9, a1);
  if ((BYTE8(v45) & 1) != 0)
  {
    v10 = v45;
    *a4 = v45;
    if (v10)
      return;
  }
  else
  {
    *(_DWORD *)(a1 + 368) = v45;
    *a4 = 0;
  }
  *(_QWORD *)(a1 + 336) = a1 + 344;
  if (*(_BYTE *)(a1 + 720))
  {
    v12 = *(_QWORD *)(a1 + 408);
    v11 = *(_QWORD **)(a1 + 416);
    v13 = *(_OWORD *)(a1 + 392);
    v45 = *(_OWORD *)(a1 + 376);
    v46 = v13;
    v14 = *(_DWORD *)(a1 + 412);
    v47 = v12;
    memset(__p, 0, sizeof(__p));
    v48 = v14;
    sub_1C4FF83E8(__p, v11, *(_QWORD **)(a1 + 424), (uint64_t)(*(_QWORD *)(a1 + 424) - (_QWORD)v11) >> 4);
    v50[0] = (char *)v51;
    v50[1] = (char *)0x800000000;
    if (*(_DWORD *)(a1 + 448))
      sub_1C4FF8474((uint64_t)v50, a1 + 440);
    v51[32] = *(_QWORD *)(a1 + 712);
    if (*(_BYTE *)(a2 + 16))
    {
      v15 = *(llvm::raw_ostream **)a2;
      v16 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    sub_1C4FF3750((uint64_t)&v41, v15, v16, (uint64_t)&v45);
    if ((v42 & 1) == 0)
    {
      *a4 = 0;
      goto LABEL_16;
    }
    v17 = v41;
    *a4 = v41;
    if (!v17)
    {
      while (1)
      {
LABEL_16:
        if (v47)
          v18 = 1;
        else
          v18 = *((_QWORD *)&v45 + 1) > (unint64_t)v46;
        if (!v18)
        {
          v24 = 0;
          goto LABEL_52;
        }
        sub_1C4FF7E04((uint64_t)&v45, v48, (uint64_t)&v41);
        if ((v42 & 1) != 0)
          goto LABEL_78;
        if ((_DWORD)v41 != 1)
        {
          v25 = std::generic_category();
          v41 = 92;
          v42 = v25;
          *(_QWORD *)&v37 = "Invalid record at top-level in block info file";
          sub_1C5DF1730((_BYTE **)&v37, &v41, a4);
          goto LABEL_51;
        }
        sub_1C4FF7E04((uint64_t)&v45, 8u, (uint64_t)&v41);
        if ((v42 & 1) != 0)
        {
LABEL_78:
          v30 = (const char *)v41;
LABEL_79:
          *a4 = (uint64_t)v30;
          goto LABEL_51;
        }
        if ((v41 & 0x80) != 0)
        {
          v21 = 0;
          LODWORD(v19) = v41 & 0x7F;
          while (v21 < 0x19)
          {
            sub_1C4FF7E04((uint64_t)&v45, 8u, (uint64_t)&v41);
            if ((v42 & 1) != 0)
              goto LABEL_78;
            v19 = ((v41 & 0x7F) << (v21 + 7)) | v19;
            v21 += 7;
            if ((v41 & 0x80) == 0)
              goto LABEL_26;
          }
          v32 = std::generic_category();
          v41 = 92;
          v42 = v32;
          *(_QWORD *)&v37 = "Unterminated VBR";
          sub_1C5DF1730((_BYTE **)&v37, &v41, &v40);
          v30 = v40;
          goto LABEL_79;
        }
        v19 = v41;
LABEL_26:
        if (!v19)
          break;
        sub_1C4FF3F30((uint64_t)&v45, a4);
        v20 = *a4 != 0;
LABEL_46:
        if (v20)
        {
          if (v20 == 3)
            v24 = 0;
          else
            v24 = v20;
          goto LABEL_52;
        }
      }
      LOBYTE(v37) = 0;
      v39 = 0;
      llvm::BitstreamCursor::ReadBlockInfoBlock((llvm::BitstreamCursor *)&v45, 1, (uint64_t)&v41);
      if ((v44 & 1) != 0 || (sub_1C61D060C((uint64_t)&v37, (uint64_t)&v41), (v44 & 1) != 0))
      {
        v22 = v41;
        *a4 = v41;
        if (v22)
          goto LABEL_43;
      }
      else
      {
        *a4 = 0;
        if (v43)
        {
          v40 = (const char *)&v41;
          sub_1C4FF8984((void ***)&v40);
          if (*a4)
            goto LABEL_43;
        }
      }
      if (v39)
      {
        sub_1C4FF8834((void **)(a1 + 344));
        *(_OWORD *)(a1 + 344) = v37;
        *(_QWORD *)(a1 + 360) = v38;
        v38 = 0;
        v37 = 0uLL;
        v20 = 3;
        goto LABEL_44;
      }
      v23 = std::generic_category();
      v41 = 92;
      v42 = v23;
      v40 = "Malformed BlockInfoBlock in block info file";
      sub_1C5DF1730((_BYTE **)&v40, &v41, a4);
LABEL_43:
      v20 = 1;
LABEL_44:
      if (v39)
      {
        v41 = (uint64_t)&v37;
        sub_1C4FF8984((void ***)&v41);
      }
      goto LABEL_46;
    }
LABEL_51:
    v24 = 1;
LABEL_52:
    sub_1C4FF8A28(v50);
    if (__p[0])
    {
      sub_1C4FF80DC((uint64_t *)__p);
      operator delete(__p[0]);
      if (!v24)
        goto LABEL_54;
    }
    else if (!v24)
    {
      goto LABEL_54;
    }
  }
  else
  {
    while (1)
    {
LABEL_54:
      if (!*(_DWORD *)(a1 + 32) && *(_QWORD *)(a1 + 8) <= *(_QWORD *)(a1 + 16))
      {
        *a4 = 0;
        return;
      }
      sub_1C4FF7E04(a1, *(_DWORD *)(a1 + 36), (uint64_t)&v45);
      if ((BYTE8(v45) & 1) != 0)
        goto LABEL_76;
      if ((_DWORD)v45 != 1)
      {
        v28 = std::generic_category();
        *(_QWORD *)&v45 = 92;
        *((_QWORD *)&v45 + 1) = v28;
        v41 = (uint64_t)"Invalid record at top-level";
        sub_1C5DF1730((_BYTE **)&v41, (uint64_t *)&v45, a4);
        return;
      }
      sub_1C4FF7E04(a1, 8u, (uint64_t)&v45);
      if ((BYTE8(v45) & 1) != 0)
      {
LABEL_76:
        v29 = v45;
        goto LABEL_77;
      }
      if ((v45 & 0x80) != 0)
        break;
      v26 = v45;
LABEL_61:
      LOBYTE(v35) = 0;
      v36 = 0;
      if (*(_BYTE *)(a2 + 16))
      {
        v35 = *(_OWORD *)a2;
        v36 = 1;
        v33 = *(_OWORD *)a3;
        v34 = *(_QWORD *)(a3 + 16);
        llvm::BitcodeAnalyzer::parseBlock(a1, v26, 0, &v35, &v33, a4);
        v36 = 0;
      }
      else
      {
        v33 = *(_OWORD *)a3;
        v34 = *(_QWORD *)(a3 + 16);
        llvm::BitcodeAnalyzer::parseBlock(a1, v26, 0, &v35, &v33, a4);
      }
      if (*a4)
        return;
      ++*(_DWORD *)(a1 + 728);
    }
    v27 = 0;
    v26 = v45 & 0x7F;
    while (v27 < 0x19)
    {
      sub_1C4FF7E04(a1, 8u, (uint64_t)&v45);
      if ((BYTE8(v45) & 1) != 0)
        goto LABEL_76;
      v26 |= (v45 & 0x7F) << (v27 + 7);
      v27 += 7;
      if ((v45 & 0x80) == 0)
        goto LABEL_61;
    }
    v31 = std::generic_category();
    *(_QWORD *)&v45 = 92;
    *((_QWORD *)&v45 + 1) = v31;
    v41 = (uint64_t)"Unterminated VBR";
    sub_1C5DF1730((_BYTE **)&v41, (uint64_t *)&v45, &v37);
    v29 = v37;
LABEL_77:
    *a4 = v29;
  }
}

void sub_1C4FF3750(uint64_t a1, llvm::raw_ostream *this, char a3, uint64_t a4)
{
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const std::error_category *v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  _QWORD v39[2];
  int v40;
  __int16 v41;
  char v42;
  _QWORD v43[2];
  int v44;
  __int16 v45;
  char v46;
  _QWORD v47[2];
  int v48;
  __int16 v49;
  char v50;
  _BYTE *v51[2];
  int v52;
  __int16 v53;
  char v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void *__p[3];
  char *v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v7 = *(char **)a4;
  v6 = *(_QWORD *)(a4 + 8);
  v8 = (char *)(*(_QWORD *)a4 + v6);
  if (v6 && *v7 == 222 && v7[1] == 192 && v7[2] == 23 && v7[3] == 11)
  {
    if (v6 <= 0x13)
    {
      *(_QWORD *)&v56 = 92;
      *((_QWORD *)&v56 + 1) = std::generic_category();
      v51[0] = "Invalid bitcode wrapper header";
      sub_1C5DF1730(v51, (uint64_t *)&v56, &v55);
      *(_BYTE *)(a1 + 8) |= 1u;
      v9 = v55;
LABEL_93:
      *(_QWORD *)a1 = v9;
      return;
    }
    if (a3)
    {
      v10 = this;
      v12 = *(unsigned int *)v7;
      v11 = (_BYTE *)*((unsigned int *)v7 + 1);
      v14 = *((unsigned int *)v7 + 2);
      v13 = *((unsigned int *)v7 + 3);
      v15 = *((unsigned int *)v7 + 4);
      v16 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v16 > 0x16uLL)
      {
        qmemcpy(v16, "<BITCODE_WRAPPER_HEADER", 23);
        v17 = (_DWORD *)(*((_QWORD *)this + 4) + 23);
        *((_QWORD *)this + 4) = v17;
      }
      else
      {
        v10 = llvm::raw_ostream::write(this, "<BITCODE_WRAPPER_HEADER", 0x17uLL);
        v17 = (_DWORD *)*((_QWORD *)v10 + 4);
      }
      if (*((_QWORD *)v10 + 3) - (_QWORD)v17 > 6uLL)
      {
        *(_DWORD *)((char *)v17 + 3) = 1029925223;
        *v17 = 1734429984;
        *((_QWORD *)v10 + 4) += 7;
      }
      else
      {
        v10 = llvm::raw_ostream::write(v10, " Magic=", 7uLL);
      }
      v56 = v12;
      LODWORD(v57) = 10;
      WORD2(v57) = 1;
      BYTE6(v57) = 1;
      llvm::raw_ostream::operator<<(v10, (uint64_t)&v56);
      v18 = *((_QWORD *)v10 + 4);
      if ((unint64_t)(*((_QWORD *)v10 + 3) - v18) > 8)
      {
        *(_BYTE *)(v18 + 8) = 61;
        *(_QWORD *)v18 = *(_QWORD *)" Version=";
        *((_QWORD *)v10 + 4) += 9;
      }
      else
      {
        v10 = llvm::raw_ostream::write(v10, " Version=", 9uLL);
      }
      v51[0] = v11;
      v51[1] = 0;
      v52 = 10;
      v53 = 1;
      v54 = 1;
      llvm::raw_ostream::operator<<(v10, (uint64_t)v51);
      v19 = (_QWORD *)*((_QWORD *)v10 + 4);
      if (*((_QWORD *)v10 + 3) - (_QWORD)v19 > 7uLL)
      {
        *v19 = 0x3D74657366664F20;
        *((_QWORD *)v10 + 4) += 8;
      }
      else
      {
        v10 = llvm::raw_ostream::write(v10, " Offset=", 8uLL);
      }
      v47[0] = v14;
      v47[1] = 0;
      v48 = 10;
      v49 = 1;
      v50 = 1;
      llvm::raw_ostream::operator<<(v10, (uint64_t)v47);
      v20 = *((_QWORD *)v10 + 4);
      if ((unint64_t)(*((_QWORD *)v10 + 3) - v20) > 5)
      {
        *(_WORD *)(v20 + 4) = 15717;
        *(_DWORD *)v20 = 2053722912;
        *((_QWORD *)v10 + 4) += 6;
      }
      else
      {
        v10 = llvm::raw_ostream::write(v10, " Size=", 6uLL);
      }
      v43[0] = v13;
      v43[1] = 0;
      v44 = 10;
      v45 = 1;
      v46 = 1;
      llvm::raw_ostream::operator<<(v10, (uint64_t)v43);
      v21 = *((_QWORD *)v10 + 4);
      if ((unint64_t)(*((_QWORD *)v10 + 3) - v21) > 8)
      {
        *(_BYTE *)(v21 + 8) = 61;
        *(_QWORD *)v21 = *(_QWORD *)" CPUType=";
        *((_QWORD *)v10 + 4) += 9;
      }
      else
      {
        v10 = llvm::raw_ostream::write(v10, " CPUType=", 9uLL);
      }
      v39[0] = v15;
      v39[1] = 0;
      v40 = 10;
      v41 = 1;
      v42 = 1;
      llvm::raw_ostream::operator<<(v10, (uint64_t)v39);
      v22 = *((_QWORD *)v10 + 4);
      if ((unint64_t)(*((_QWORD *)v10 + 3) - v22) > 2)
      {
        *(_BYTE *)(v22 + 2) = 10;
        *(_WORD *)v22 = 15919;
        *((_QWORD *)v10 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v10, "/>\n", 3uLL);
      }
    }
    if (((v8 - v7) & 0xFFFFFFF0) == 0
      || (v23 = *((unsigned int *)v7 + 2), v24 = *((unsigned int *)v7 + 3), v24 + v23 > (unint64_t)(v8 - v7)))
    {
      v25 = std::generic_category();
      *(_QWORD *)&v56 = 92;
      *((_QWORD *)&v56 + 1) = v25;
      v51[0] = "Invalid bitcode wrapper header";
      sub_1C5DF1730(v51, (uint64_t *)&v56, &v38);
      *(_BYTE *)(a1 + 8) |= 1u;
      v9 = v38;
      goto LABEL_93;
    }
    v7 += v23;
    v8 = &v7[v24];
  }
  *(_QWORD *)&v56 = v7;
  *((_QWORD *)&v56 + 1) = v8 - v7;
  v26 = 0uLL;
  v57 = 0u;
  v58 = 0x200000000;
  memset(__p, 0, sizeof(__p));
  v60[0] = (char *)&v61;
  v60[1] = (char *)0x800000000;
  v62 = 0;
  *(_QWORD *)(a4 + 32) = 0x200000000;
  v27 = v57;
  *(_OWORD *)a4 = v56;
  *(_OWORD *)(a4 + 16) = v27;
  v28 = *(void **)(a4 + 40);
  if (v28)
  {
    sub_1C4FF80DC((uint64_t *)(a4 + 40));
    operator delete(*(void **)(a4 + 40));
    v26 = *(_OWORD *)__p;
    v28 = __p[2];
  }
  *(_OWORD *)(a4 + 40) = v26;
  *(_QWORD *)(a4 + 56) = v28;
  memset(__p, 0, sizeof(__p));
  sub_1C4FF8150(a4 + 64, (uint64_t)v60);
  *(_QWORD *)(a4 + 336) = v62;
  sub_1C4FF8A28(v60);
  if (__p[0])
  {
    sub_1C4FF80DC((uint64_t *)__p);
    operator delete(__p[0]);
  }
  sub_1C4FF7E04(a4, 8u, (uint64_t)&v56);
  if ((BYTE8(v56) & 1) != 0)
  {
    v9 = v56;
    if ((_QWORD)v56)
      goto LABEL_92;
    v29 = 0;
  }
  else
  {
    v29 = v56;
  }
  sub_1C4FF7E04(a4, 8u, (uint64_t)&v56);
  if ((BYTE8(v56) & 1) != 0)
  {
    v9 = v56;
    if ((_QWORD)v56)
      goto LABEL_92;
    v30 = 0;
    goto LABEL_42;
  }
  v30 = v56;
  if (v29 == 67 && v56 == 80)
  {
    sub_1C4FF7E04(a4, 8u, (uint64_t)&v56);
    if ((BYTE8(v56) & 1) != 0)
    {
      v9 = v56;
      if ((_QWORD)v56)
        goto LABEL_92;
      v31 = 0;
    }
    else
    {
      v31 = v56;
    }
    sub_1C4FF7E04(a4, 8u, (uint64_t)&v56);
    if ((BYTE8(v56) & 1) == 0)
    {
      if (v31 == 67 && v56 == 72)
      {
        *(_BYTE *)(a1 + 8) &= ~1u;
        v36 = 2;
LABEL_90:
        *(_DWORD *)a1 = v36;
        return;
      }
      goto LABEL_94;
    }
    goto LABEL_91;
  }
  if (v29 != 68 || v56 != 73)
  {
    if (v29 == 82 && v56 == 77)
    {
      sub_1C4FF7E04(a4, 8u, (uint64_t)&v56);
      if ((BYTE8(v56) & 1) != 0)
      {
        v9 = v56;
        if ((_QWORD)v56)
          goto LABEL_92;
        v35 = 0;
      }
      else
      {
        v35 = v56;
      }
      sub_1C4FF7E04(a4, 8u, (uint64_t)&v56);
      if ((BYTE8(v56) & 1) == 0)
      {
        if (v35 == 82 && v56 == 75)
        {
          *(_BYTE *)(a1 + 8) &= ~1u;
          v36 = 4;
          goto LABEL_90;
        }
        goto LABEL_94;
      }
LABEL_91:
      v9 = v56;
      if (!(_QWORD)v56)
        goto LABEL_94;
LABEL_92:
      *(_BYTE *)(a1 + 8) |= 1u;
      goto LABEL_93;
    }
LABEL_42:
    sub_1C4FF7E04(a4, 4u, (uint64_t)&v56);
    if ((BYTE8(v56) & 1) != 0)
    {
      v9 = v56;
      if ((_QWORD)v56)
        goto LABEL_92;
      v32 = 0;
    }
    else
    {
      v32 = v56;
    }
    sub_1C4FF7E04(a4, 4u, (uint64_t)&v56);
    if ((BYTE8(v56) & 1) != 0)
    {
      v9 = v56;
      if ((_QWORD)v56)
        goto LABEL_92;
      v34 = 0;
    }
    else
    {
      v34 = v56;
    }
    sub_1C4FF7E04(a4, 4u, (uint64_t)&v56);
    if ((BYTE8(v56) & 1) != 0)
    {
      v9 = v56;
      if ((_QWORD)v56)
        goto LABEL_92;
      v37 = 0;
    }
    else
    {
      v37 = v56;
    }
    sub_1C4FF7E04(a4, 4u, (uint64_t)&v56);
    if ((BYTE8(v56) & 1) != 0)
    {
      v9 = v56;
      if ((_QWORD)v56)
        goto LABEL_92;
    }
    else
    {
      LOBYTE(v9) = v56 == 13;
    }
    if (v29 == 66 && v30 == 67 && !v32 && v34 == 12 && v37 == 14 && (v9 & 1) != 0)
    {
      *(_BYTE *)(a1 + 8) &= ~1u;
      v36 = 1;
      goto LABEL_90;
    }
    goto LABEL_94;
  }
  sub_1C4FF7E04(a4, 8u, (uint64_t)&v56);
  if ((BYTE8(v56) & 1) != 0)
  {
    v9 = v56;
    if ((_QWORD)v56)
      goto LABEL_92;
    v33 = 0;
  }
  else
  {
    v33 = v56;
  }
  sub_1C4FF7E04(a4, 8u, (uint64_t)&v56);
  if ((BYTE8(v56) & 1) != 0)
    goto LABEL_91;
  if (v33 == 65 && v56 == 71)
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    v36 = 3;
    goto LABEL_90;
  }
LABEL_94:
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_DWORD *)a1 = 0;
}

void sub_1C4FF3F30(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  BOOL v5;
  char v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const std::error_category *v11;
  _BYTE *v12;
  unint64_t v13;
  const std::error_category *v14;
  void **v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  const std::error_category *v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  _BYTE *v23[4];
  __int16 v24;
  uint64_t v25;
  const std::error_category *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  void **v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  sub_1C4FF7E04(a1, 4u, (uint64_t)&v25);
  if ((v26 & 1) != 0)
    goto LABEL_22;
  if ((v25 & 8) != 0)
  {
    v17 = -3;
    while (1)
    {
      v17 += 3;
      if (v17 >= 0x1D)
        break;
      sub_1C4FF7E04(a1, 4u, (uint64_t)&v25);
      if ((v26 & 1) != 0)
        goto LABEL_22;
      if ((v25 & 8) == 0)
        goto LABEL_3;
    }
    v19 = std::generic_category();
    v25 = 92;
    v26 = v19;
    v23[0] = "Unterminated VBR";
    sub_1C5DF1730(v23, &v25, __p);
    v18 = __p[0];
    goto LABEL_23;
  }
LABEL_3:
  v4 = *(_DWORD *)(a1 + 32);
  v5 = v4 >= 0x20;
  v6 = v4 - 32;
  if (v5)
  {
    *(_QWORD *)(a1 + 24) >>= v6;
    v7 = 32;
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(a1 + 32) = v7;
  sub_1C4FF7E04(a1, 0x20u, (uint64_t)&v25);
  if ((v26 & 1) != 0)
  {
LABEL_22:
    v18 = (void *)v25;
LABEL_23:
    *a2 = (uint64_t)v18;
    return;
  }
  v8 = *(unsigned int *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  if ((_DWORD)v8 || v9 > v10)
  {
    v12 = (_BYTE *)(8 * v10 - v8);
    v13 = (unint64_t)&v12[32 * v25];
    if (v9 >= v13 >> 3)
    {
      *(_QWORD *)(a1 + 16) = (v13 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(_DWORD *)(a1 + 32) = 0;
      if ((v13 & 0x3F) == 0
        || (sub_1C4FF7E04(a1, v13 & 0x3F, (uint64_t)&v25), (v26 & 1) == 0)
        || (v20 = v25, *a2 = v25, !v20))
      {
        *a2 = 0;
      }
    }
    else
    {
      v14 = std::generic_category();
      __p[0] = 0;
      __p[1] = 0;
      v22 = 0;
      LODWORD(v26) = 0;
      v30 = 0;
      v31 = 0;
      v25 = (uint64_t)&unk_1E81A7208;
      v33 = __p;
      v32 = 0;
      v28 = 0;
      v29 = 0;
      v27 = 0;
      v23[0] = &unk_1E813F118;
      v23[1] = "can't skip to bit %zu from %llu";
      v23[2] = (_BYTE *)v13;
      v23[3] = v12;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v25, (uint64_t)v23);
      v15 = v33;
      v16 = operator new();
      v24 = 260;
      v23[0] = v15;
      *(_QWORD *)v16 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v23, (_QWORD *)(v16 + 8));
      *(_QWORD *)(v16 + 32) = 92;
      *(_QWORD *)(v16 + 40) = v14;
      *(_BYTE *)(v16 + 48) = 1;
      *a2 = v16;
      v25 = (uint64_t)off_1E81A6E70;
      if (v32 == 1 && v27)
        MEMORY[0x1CAA32F9C](v27, 0x1000C8077774924);
      if (SHIBYTE(v22) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v11 = std::generic_category();
    v25 = 92;
    v26 = v11;
    v23[0] = "can't skip block: already at end of stream";
    sub_1C5DF1730(v23, &v25, a2);
  }
}

void llvm::BitcodeAnalyzer::parseBlock(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t *a6@<X8>)
{
  size_t v10;
  void **p_b;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int v16;
  uint64_t **v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  const char *v22;
  size_t v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  void *v26;
  const std::error_category *v27;
  int v28;
  const char *v29;
  size_t v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  llvm::raw_ostream *v36;
  char v37;
  size_t v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  llvm::raw_ostream *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _WORD *v47;
  __int128 *v48;
  uint64_t v49;
  unint64_t v50;
  std::string::size_type v51;
  int data;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t data_low;
  std::string::size_type v57;
  char *v58;
  _BYTE *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  size_t v74;
  llvm::raw_ostream *v75;
  uint64_t v76;
  const char *v77;
  char v78;
  const char *v79;
  llvm::raw_ostream *v80;
  size_t v81;
  void *v82;
  llvm::raw_ostream *v83;
  _QWORD *v84;
  const char *v85;
  size_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  llvm::raw_ostream *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  llvm::raw_ostream *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  BOOL v104;
  llvm::raw_ostream *v105;
  _QWORD *v106;
  unint64_t v107;
  const char *v108;
  size_t v109;
  llvm::raw_ostream *v110;
  uint64_t v111;
  llvm::raw_ostream *v112;
  uint64_t v113;
  unint64_t v114;
  llvm::raw_ostream *v115;
  const char *v116;
  size_t v117;
  _OWORD *v118;
  _DWORD *v119;
  _BYTE *v120;
  uint64_t v121;
  llvm::raw_ostream *v122;
  _WORD *v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  llvm::raw_ostream *v128;
  uint64_t v129;
  std::string *v130;
  size_t size;
  llvm::raw_ostream *v132;
  _BYTE *v133;
  void **v134;
  size_t v135;
  llvm::raw_ostream *v136;
  void *v137;
  llvm::raw_ostream *v138;
  _BYTE *v139;
  llvm::raw_ostream *v140;
  _BYTE *v141;
  unint64_t v142;
  unsigned __int8 *v143;
  llvm::raw_ostream *v144;
  _BYTE *v145;
  _BYTE *v146;
  unint64_t v147;
  llvm::raw_ostream *v148;
  const char *v149;
  size_t v150;
  void *v151;
  _DWORD *v152;
  llvm::raw_ostream *v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::string::size_type v159;
  const char *v160;
  size_t v161;
  llvm::raw_ostream *v162;
  _WORD *v163;
  uint64_t *v164;
  llvm::raw_ostream *v165;
  size_t v166;
  void *v167;
  const std::error_category *v168;
  const char *v169;
  const std::error_category *v170;
  std::string::size_type v171;
  uint64_t v172;
  _WORD *v173;
  uint64_t v174;
  const std::error_category *v175;
  void *v176;
  char v177;
  const char *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t *v181;
  void *v182;
  char v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  unsigned int v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v195;
  int v196;
  int v197[2];
  int v198[2];
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  char v202;
  unsigned int v203;
  void **__b;
  size_t v205;
  uint64_t v206;
  _QWORD v207[2];
  unsigned int v208;
  _BYTE *v209[2];
  int v210;
  std::string v211;
  char v212;
  __int128 v213;
  uint64_t v214;
  char v215;
  void *v216;
  int v217[2];
  _BYTE v218[16];
  char v219;
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  v10 = (2 * a3);
  if (v10 >= 0x17)
  {
    if ((v10 | 7) == 0x17)
      v12 = (v10 & 0xFFFFFFF8) + 8;
    else
      v12 = v10 | 7;
    p_b = (void **)operator new(v12 + 1);
    v205 = v10;
    v206 = v12 - 0x7FFFFFFFFFFFFFFFLL;
    __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v206) = 2 * a3;
  p_b = (void **)&__b;
  if ((_DWORD)v10)
LABEL_8:
    memset(p_b, 32, v10);
  *((_BYTE *)p_b + v10) = 0;
  v13 = 8 * *(_QWORD *)(a1 + 16) - *(unsigned int *)(a1 + 32);
  v14 = *(char **)(a1 + 744);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        v15 = v14;
        v16 = *((_DWORD *)v14 + 8);
        if (v16 <= a2)
          break;
        v14 = *(char **)v15;
        v17 = (uint64_t **)v15;
        if (!*(_QWORD *)v15)
          goto LABEL_17;
      }
      if (v16 >= a2)
        break;
      v14 = (char *)*((_QWORD *)v15 + 1);
      if (!v14)
      {
        v17 = (uint64_t **)(v15 + 8);
        goto LABEL_17;
      }
    }
  }
  else
  {
    v17 = (uint64_t **)(a1 + 744);
    v15 = (char *)(a1 + 744);
LABEL_17:
    v18 = v15;
    v15 = (char *)operator new(0x60uLL);
    *((_DWORD *)v15 + 8) = a2;
    *((_DWORD *)v15 + 10) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_OWORD *)v15 + 3) = 0u;
    *((_OWORD *)v15 + 4) = 0u;
    *((_OWORD *)v15 + 5) = 0u;
    *((_QWORD *)v15 + 2) = v18;
    *v17 = (uint64_t *)v15;
    v19 = **(_QWORD **)(a1 + 736);
    v20 = (uint64_t *)v15;
    if (v19)
    {
      *(_QWORD *)(a1 + 736) = v19;
      v20 = *v17;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 744), v20);
    ++*(_QWORD *)(a1 + 752);
  }
  ++*((_DWORD *)v15 + 10);
  LODWORD(v21) = *((_BYTE *)a4 + 16) != 0;
  if (!a2)
  {
    if (*((_BYTE *)a4 + 16) && !*((_BYTE *)a4 + 11))
    {
      if (v206 >= 0)
        v22 = (const char *)&__b;
      else
        v22 = (const char *)__b;
      if (v206 >= 0)
        v23 = HIBYTE(v206) & 0x7F;
      else
        v23 = v205;
      v24 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a4, v22, v23);
      v25 = *((_QWORD *)v24 + 4);
      if ((unint64_t)(*((_QWORD *)v24 + 3) - v25) > 0x12)
      {
        *(_DWORD *)(v25 + 15) = 171847499;
        *(_OWORD *)v25 = *(_OWORD *)"<BLOCKINFO_BLOCK/>\n";
        *((_QWORD *)v24 + 4) += 19;
      }
      else
      {
        llvm::raw_ostream::write(v24, "<BLOCKINFO_BLOCK/>\n", 0x13uLL);
      }
    }
    v211.__r_.__value_.__s.__data_[0] = 0;
    v212 = 0;
    llvm::BitstreamCursor::ReadBlockInfoBlock((llvm::BitstreamCursor *)a1, 1, (uint64_t)&v216);
    if ((v219 & 1) != 0 || (sub_1C61D060C((uint64_t)&v211, (uint64_t)&v216), (v219 & 1) != 0))
    {
      v26 = v216;
      *a6 = (uint64_t)v216;
      if (v26)
        goto LABEL_45;
    }
    else
    {
      *a6 = 0;
      if (v218[8])
      {
        v209[0] = &v216;
        sub_1C4FF8984((void ***)v209);
        if (*a6)
          goto LABEL_45;
      }
    }
    if (v212)
    {
      sub_1C4FF8834((void **)(a1 + 344));
      *(std::string *)(a1 + 344) = v211;
      memset(&v211, 0, sizeof(v211));
      *(_QWORD *)(a1 + 16) = (v13 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(_DWORD *)(a1 + 32) = 0;
      if ((v13 & 0x3F) == 0 || (sub_1C4FF7E04(a1, v13 & 0x3F, (uint64_t)&v216), (v217[0] & 1) == 0))
      {
        *a6 = 0;
LABEL_42:
        if (*((_BYTE *)a4 + 16))
          LODWORD(v21) = *((_BYTE *)a4 + 11) != 0;
        else
          LODWORD(v21) = 0;
        v28 = 1;
LABEL_48:
        if (v212)
        {
          v216 = &v211;
          sub_1C4FF8984((void ***)&v216);
        }
        if (!v28)
          goto LABEL_332;
        goto LABEL_51;
      }
      v176 = v216;
      *a6 = (uint64_t)v216;
      if (!v176)
        goto LABEL_42;
    }
    else
    {
      v27 = std::generic_category();
      v216 = (void *)92;
      *(_QWORD *)v217 = v27;
      v209[0] = "Malformed BlockInfoBlock";
      sub_1C5DF1730(v209, (uint64_t *)&v216, a6);
    }
LABEL_45:
    v28 = 0;
    goto LABEL_48;
  }
LABEL_51:
  v203 = 0;
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)a1, &v203, a2, a6);
  if (*a6)
    goto LABEL_332;
  v179 = (8 * *(_QWORD *)(a1 + 16) - (unint64_t)*(unsigned int *)(a1 + 32)) >> 3;
  v186 = v21;
  if ((_DWORD)v21)
  {
    if (v206 >= 0)
      v29 = (const char *)&__b;
    else
      v29 = (const char *)__b;
    if (v206 >= 0)
      v30 = HIBYTE(v206) & 0x7F;
    else
      v30 = v205;
    v31 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a4, v29, v30);
    v32 = (_BYTE *)*((_QWORD *)v31 + 4);
    v33 = v13;
    if (*((_BYTE **)v31 + 3) == v32)
    {
      llvm::raw_ostream::write(v31, "<", 1uLL);
    }
    else
    {
      *v32 = 60;
      ++*((_QWORD *)v31 + 4);
    }
    v34 = sub_1C4FF6FC4(a2, *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_DWORD *)(a1 + 368));
    v35 = v34;
    v36 = *(llvm::raw_ostream **)a4;
    v177 = v37;
    if (v37)
    {
      if (v34)
      {
        v38 = strlen(v34);
        v39 = (void *)*((_QWORD *)v36 + 4);
        if (v38 <= *((_QWORD *)v36 + 3) - (_QWORD)v39)
        {
          if (v38)
          {
            memcpy(v39, v35, v38);
            *((_QWORD *)v36 + 4) += v38;
          }
        }
        else
        {
          llvm::raw_ostream::write(v36, v35, v38);
        }
      }
      v36 = *(llvm::raw_ostream **)a4;
      if (*((_BYTE *)a4 + 9))
        goto LABEL_73;
      v40 = *((_QWORD *)v36 + 4);
      if ((unint64_t)(*((_QWORD *)v36 + 3) - v40) <= 8)
      {
        v41 = " BlockID=";
        v42 = *(llvm::raw_ostream **)a4;
        v43 = 9;
LABEL_71:
        v36 = llvm::raw_ostream::write(v42, v41, v43);
LABEL_72:
        sub_1C5E21910(v36, a2, 0, 0, 0);
        v36 = *(llvm::raw_ostream **)a4;
LABEL_73:
        v45 = *((_QWORD *)v36 + 4);
        if ((unint64_t)(*((_QWORD *)v36 + 3) - v45) > 9)
        {
          *(_WORD *)(v45 + 8) = 15731;
          *(_QWORD *)v45 = *(_QWORD *)" NumWords=";
          *((_QWORD *)v36 + 4) += 10;
        }
        else
        {
          v36 = llvm::raw_ostream::write(v36, " NumWords=", 0xAuLL);
        }
        sub_1C5E21910(v36, v203, 0, 0, 0);
        v46 = (void *)*((_QWORD *)v36 + 4);
        if (*((_QWORD *)v36 + 3) - (_QWORD)v46 > 0xEuLL)
        {
          qmemcpy(v46, " BlockCodeSize=", 15);
          *((_QWORD *)v36 + 4) += 15;
        }
        else
        {
          v36 = llvm::raw_ostream::write(v36, " BlockCodeSize=", 0xFuLL);
        }
        sub_1C5E21910(v36, *(unsigned int *)(a1 + 36), 0, 0, 0);
        v47 = (_WORD *)*((_QWORD *)v36 + 4);
        v178 = v35;
        if (*((_QWORD *)v36 + 3) - (_QWORD)v47 > 1uLL)
        {
          *v47 = 2622;
          *((_QWORD *)v36 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v36, ">\n", 2uLL);
        }
        v13 = v33;
        goto LABEL_80;
      }
      *(_BYTE *)(v40 + 8) = 61;
      *(_QWORD *)v40 = *(_QWORD *)" BlockID=";
      v174 = *((_QWORD *)v36 + 4) + 9;
    }
    else
    {
      v44 = *((_QWORD *)v36 + 4);
      if ((unint64_t)(*((_QWORD *)v36 + 3) - v44) <= 0xB)
      {
        v41 = "UnknownBlock";
        v42 = *(llvm::raw_ostream **)a4;
        v43 = 12;
        goto LABEL_71;
      }
      *(_DWORD *)(v44 + 8) = 1801678700;
      *(_QWORD *)v44 = *(_QWORD *)"UnknownBlock";
      v174 = *((_QWORD *)v36 + 4) + 12;
    }
    *((_QWORD *)v36 + 4) = v174;
    goto LABEL_72;
  }
  v177 = 0;
  v178 = 0;
LABEL_80:
  v180 = 0;
  v216 = v218;
  v190 = a3 + 1;
  *(_QWORD *)v217 = 0x4000000000;
  v48 = a4;
  v181 = a6;
  v187 = a2;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v49 = *(unsigned int *)(a1 + 32);
        v50 = *(_QWORD *)(a1 + 16);
        if (!(_DWORD)v49 && *(_QWORD *)(a1 + 8) <= v50)
        {
          v170 = std::generic_category();
          v211.__r_.__value_.__r.__words[0] = 92;
          v211.__r_.__value_.__l.__size_ = (std::string::size_type)v170;
          v169 = "Premature end of bitstream";
          goto LABEL_321;
        }
        sub_1C4FF7B90(a1, 2, (uint64_t)&v211);
        v51 = v211.__r_.__value_.__r.__words[0];
        data = v196;
        if ((v211.__r_.__value_.__s.__data_[8] & 1) == 0)
          data = (int)v211.__r_.__value_.__l.__data_;
        v196 = data;
        v21 = (v211.__r_.__value_.__s.__data_[8] & 1) != 0
            ? v21
            : HIDWORD(v211.__r_.__value_.__r.__words[0]);
        v195 = v21;
        if ((v211.__r_.__value_.__s.__data_[8] & 1) != 0)
        {
          *a6 = v211.__r_.__value_.__r.__words[0];
          if (v51)
            goto LABEL_330;
        }
        else
        {
          *a6 = 0;
        }
        if (data != 2)
          break;
        v21 = *(_QWORD *)(a1 + 16);
        v53 = *(unsigned int *)(a1 + 32);
        LOBYTE(v201) = 0;
        v202 = 0;
        if (*((_BYTE *)v48 + 16))
        {
          v201 = *v48;
          v202 = 1;
          v199 = *a5;
          v200 = *((_QWORD *)a5 + 2);
          llvm::BitcodeAnalyzer::parseBlock(a1, v195, v190, &v201, &v199);
          v202 = 0;
        }
        else
        {
          v199 = *a5;
          v200 = *((_QWORD *)a5 + 2);
          llvm::BitcodeAnalyzer::parseBlock(a1, v195, v190, &v201, &v199);
        }
        if (*a6)
          goto LABEL_330;
        ++*((_DWORD *)v15 + 14);
        v13 = v13 - 8 * v21 + v53 + 8 * *(_QWORD *)(a1 + 16) - *(unsigned int *)(a1 + 32);
        LODWORD(v21) = v195;
      }
      if (data == 1)
      {
        *((_QWORD *)v15 + 6) = *((_QWORD *)v15 + 6) - (v13 + *(unsigned int *)(a1 + 32)) + 8 * *(_QWORD *)(a1 + 16);
        if (v186)
        {
          if (v206 >= 0)
            v160 = (const char *)&__b;
          else
            v160 = (const char *)__b;
          if (v206 >= 0)
            v161 = HIBYTE(v206) & 0x7F;
          else
            v161 = v205;
          v162 = llvm::raw_ostream::write(*(llvm::raw_ostream **)v48, v160, v161);
          v163 = (_WORD *)*((_QWORD *)v162 + 4);
          v164 = a6;
          if (*((_QWORD *)v162 + 3) - (_QWORD)v163 > 1uLL)
          {
            *v163 = 12092;
            *((_QWORD *)v162 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v162, "</", 2uLL);
          }
          v165 = *(llvm::raw_ostream **)v48;
          if (v177)
          {
            if (v178)
            {
              v166 = strlen(v178);
              v167 = (void *)*((_QWORD *)v165 + 4);
              if (v166 <= *((_QWORD *)v165 + 3) - (_QWORD)v167)
              {
                if (v166)
                {
                  memcpy(v167, v178, v166);
                  *((_QWORD *)v165 + 4) += v166;
                }
              }
              else
              {
                v165 = llvm::raw_ostream::write(v165, v178, v166);
              }
            }
          }
          else
          {
            v172 = *((_QWORD *)v165 + 4);
            if ((unint64_t)(*((_QWORD *)v165 + 3) - v172) > 0xB)
            {
              *(_DWORD *)(v172 + 8) = 1801678700;
              *(_QWORD *)v172 = *(_QWORD *)"UnknownBlock";
              *((_QWORD *)v165 + 4) += 12;
            }
            else
            {
              v165 = llvm::raw_ostream::write(*(llvm::raw_ostream **)v48, "UnknownBlock", 0xCuLL);
            }
            sub_1C5E21910(v165, a2, 0, 0, 0);
          }
          v173 = (_WORD *)*((_QWORD *)v165 + 4);
          if (*((_QWORD *)v165 + 3) - (_QWORD)v173 > 1uLL)
          {
            *v173 = 2622;
            *((_QWORD *)v165 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v165, ">\n", 2uLL);
          }
          a6 = v164;
        }
        *a6 = 0;
        goto LABEL_330;
      }
      if (!data)
      {
        v168 = std::generic_category();
        v211.__r_.__value_.__r.__words[0] = 92;
        v211.__r_.__value_.__l.__size_ = (std::string::size_type)v168;
        v169 = "malformed bitcode file";
LABEL_321:
        v209[0] = v169;
        sub_1C5DF1730(v209, (uint64_t *)&v211, a6);
        goto LABEL_330;
      }
      if ((_DWORD)v21 != 2)
        break;
      llvm::BitstreamCursor::ReadAbbrevRecord((llvm::BitstreamCursor *)a1, a6);
      if (*a6)
        goto LABEL_330;
      ++*((_DWORD *)v15 + 15);
    }
    v217[0] = 0;
    ++*((_DWORD *)v15 + 16);
    *(_QWORD *)v197 = 0;
    *(_QWORD *)v198 = 0;
    v54 = *(_QWORD *)(a1 + 16);
    v55 = *(unsigned int *)(a1 + 32);
    llvm::BitstreamCursor::readRecord(a1, v195, (uint64_t)&v216, (unsigned __int8 **)v197, (uint64_t)&v211);
    if ((v211.__r_.__value_.__s.__data_[8] & 1) != 0)
      data_low = 0;
    else
      data_low = LODWORD(v211.__r_.__value_.__l.__data_);
    if ((v211.__r_.__value_.__s.__data_[8] & 1) != 0)
    {
      v57 = v211.__r_.__value_.__r.__words[0];
      *a6 = v211.__r_.__value_.__r.__words[0];
      if (v57)
        goto LABEL_330;
    }
    else
    {
      *a6 = 0;
    }
    v188 = v54;
    v191 = v13;
    v192 = data_low;
    v59 = (_BYTE *)*((_QWORD *)v15 + 9);
    v58 = (char *)*((_QWORD *)v15 + 10);
    v60 = (char *)(v58 - v59);
    v61 = (v58 - v59) >> 4;
    if (v61 > data_low)
      goto LABEL_124;
    v62 = (data_low + 1);
    v63 = v62 - v61;
    if (v62 <= v61)
    {
      if (v62 < v61)
        *((_QWORD *)v15 + 10) = &v59[16 * v62];
      a6 = v181;
LABEL_124:
      a2 = v187;
      v13 = v191;
      goto LABEL_127;
    }
    v64 = *((_QWORD *)v15 + 11);
    if (v63 <= (v64 - (uint64_t)v58) >> 4)
    {
      bzero(*((void **)v15 + 10), 16 * v63);
      *((_QWORD *)v15 + 10) = &v58[16 * v63];
    }
    else
    {
      v65 = v64 - (_QWORD)v59;
      if (v65 >> 3 > v62)
        v62 = v65 >> 3;
      v66 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0;
      v67 = 0xFFFFFFFFFFFFFFFLL;
      if (!v66)
        v67 = v62;
      if (v67 >> 60)
        sub_1C4764EE4();
      v184 = v67;
      v182 = operator new(16 * v67);
      v68 = (char *)v182 + 16 * v61;
      bzero(v68, 16 * v63);
      if (v58 != v59)
      {
        do
        {
          *((_OWORD *)v68 - 1) = *((_OWORD *)v58 - 1);
          v68 -= 16;
          v58 -= 16;
        }
        while (v58 != v59);
        v58 = (char *)*((_QWORD *)v15 + 9);
      }
      *((_QWORD *)v15 + 9) = v68;
      *((_QWORD *)v15 + 10) = &v60[16 * v63 + (_QWORD)v182];
      *((_QWORD *)v15 + 11) = (char *)v182 + 16 * v184;
      if (v58)
        operator delete(v58);
    }
    v59 = (_BYTE *)*((_QWORD *)v15 + 9);
    a6 = v181;
    a2 = v187;
    v13 = v191;
    data_low = v192;
LABEL_127:
    LODWORD(v21) = v195;
    v69 = 8 * v50 - v49;
    v70 = &v59[16 * data_low];
    ++*(_DWORD *)v70;
    *((_QWORD *)v70 + 1) = *((_QWORD *)v70 + 1) - (v69 + *(unsigned int *)(a1 + 32)) + 8 * *(_QWORD *)(a1 + 16);
    if ((_DWORD)v195 != 3)
    {
      ++*((_DWORD *)v70 + 1);
      ++*((_DWORD *)v15 + 17);
    }
    v71 = 8 * v188 - v55;
    v72 = v71 >> 3;
    v48 = a4;
    if (!v186)
      goto LABEL_268;
    v189 = v71 >> 3;
    v183 = v71;
    if (v206 >= 0)
      v73 = (const char *)&__b;
    else
      v73 = (const char *)__b;
    if (v206 >= 0)
      v74 = HIBYTE(v206) & 0x7F;
    else
      v74 = v205;
    v75 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a4, v73, v74);
    v76 = *((_QWORD *)v75 + 4);
    if ((unint64_t)(*((_QWORD *)v75 + 3) - v76) > 2)
    {
      *(_BYTE *)(v76 + 2) = 60;
      *(_WORD *)v76 = 8224;
      *((_QWORD *)v75 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v75, "  <", 3uLL);
    }
    v77 = sub_1C4FF7090(v192, a2, *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_DWORD *)(a1 + 368));
    if (!v78)
    {
      v83 = *(llvm::raw_ostream **)a4;
      v87 = *(_QWORD *)(*(_QWORD *)a4 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 24) - v87) <= 0xA)
      {
        v85 = "UnknownCode";
        v86 = 11;
        goto LABEL_147;
      }
      *(_DWORD *)(v87 + 7) = 1701080899;
      *(_QWORD *)v87 = *(_QWORD *)"UnknownCode";
      v155 = *((_QWORD *)v83 + 4) + 11;
LABEL_283:
      *((_QWORD *)v83 + 4) = v155;
      goto LABEL_148;
    }
    v79 = v77;
    if (v77)
    {
      v80 = *(llvm::raw_ostream **)a4;
      v81 = strlen(v77);
      v82 = *(void **)(*(_QWORD *)a4 + 32);
      if (v81 <= *(_QWORD *)(*(_QWORD *)a4 + 24) - (_QWORD)v82)
      {
        if (v81)
        {
          memcpy(v82, v79, v81);
          *((_QWORD *)v80 + 4) += v81;
        }
      }
      else
      {
        llvm::raw_ostream::write(v80, v79, v81);
      }
    }
    if (!*((_BYTE *)a4 + 9))
    {
      v83 = *(llvm::raw_ostream **)a4;
      v84 = *(_QWORD **)(*(_QWORD *)a4 + 32);
      if (*(_QWORD *)(*(_QWORD *)a4 + 24) - (_QWORD)v84 <= 7uLL)
      {
        v85 = " codeid=";
        v86 = 8;
LABEL_147:
        v83 = llvm::raw_ostream::write(v83, v85, v86);
LABEL_148:
        sub_1C5E21910(v83, v192, 0, 0, 0);
        goto LABEL_149;
      }
      *v84 = 0x3D646965646F6320;
      v155 = *((_QWORD *)v83 + 4) + 8;
      goto LABEL_283;
    }
LABEL_149:
    if ((_DWORD)v195 == 3)
    {
      v88 = v69;
      v185 = 0;
      goto LABEL_155;
    }
    v89 = (v195 - 4);
    v90 = *(_QWORD *)(a1 + 40);
    if (v89 >= (*(_QWORD *)(a1 + 48) - v90) >> 4)
      break;
    v91 = *(_QWORD *)(v90 + 16 * v89);
    v92 = *(llvm::raw_ostream **)a4;
    v93 = *(_QWORD *)(*(_QWORD *)a4 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 24) - v93) > 9)
    {
      *(_WORD *)(v93 + 8) = 15716;
      *(_QWORD *)v93 = *(_QWORD *)" abbrevid=";
      *((_QWORD *)v92 + 4) += 10;
    }
    else
    {
      v92 = llvm::raw_ostream::write(v92, " abbrevid=", 0xAuLL);
    }
    v185 = v91;
    v88 = v69;
    sub_1C5E21910(v92, v195, 0, 0, 0);
LABEL_155:
    v94 = v217[0];
    if (v217[0])
    {
      v95 = 0;
      do
      {
        v96 = *(llvm::raw_ostream **)a4;
        v97 = *(_QWORD *)(*(_QWORD *)a4 + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 24) - v97) > 2)
        {
          *(_BYTE *)(v97 + 2) = 112;
          *(_WORD *)v97 = 28448;
          *((_QWORD *)v96 + 4) += 3;
        }
        else
        {
          v96 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a4, " op", 3uLL);
        }
        sub_1C5E21910(v96, v95, 0, 0, 0);
        v98 = (_BYTE *)*((_QWORD *)v96 + 4);
        if (*((_BYTE **)v96 + 3) == v98)
        {
          v96 = llvm::raw_ostream::write(v96, "=", 1uLL);
        }
        else
        {
          *v98 = 61;
          ++*((_QWORD *)v96 + 4);
        }
        llvm::raw_ostream::operator<<(v96, *((_QWORD *)v216 + v95++));
      }
      while (v94 != v95);
    }
    a2 = v187;
    if (v187 == 15)
    {
      if ((_DWORD)v192 == 39)
      {
        v110 = *(llvm::raw_ostream **)a4;
        v111 = *(_QWORD *)(*(_QWORD *)a4 + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 24) - v111) > 8)
        {
          *(_BYTE *)(v111 + 8) = 32;
          *(_QWORD *)v111 = *(_QWORD *)" (offset ";
          *((_QWORD *)v110 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v110, " (offset ", 9uLL);
        }
        v112 = *(llvm::raw_ostream **)a4;
        v113 = *(_QWORD *)(*(_QWORD *)a4 + 32);
        v114 = *(_QWORD *)(*(_QWORD *)a4 + 24) - v113;
        if (v180 == v88)
        {
          if (v114 <= 5)
          {
            v115 = *(llvm::raw_ostream **)a4;
            v116 = "match)";
            v117 = 6;
            goto LABEL_198;
          }
          *(_WORD *)(v113 + 4) = 10600;
          *(_DWORD *)v113 = 1668571501;
          v156 = *((_QWORD *)v112 + 4) + 6;
LABEL_294:
          *((_QWORD *)v112 + 4) = v156;
        }
        else
        {
          if (v114 > 9)
          {
            *(_WORD *)(v113 + 8) = 8250;
            *(_QWORD *)v113 = *(_QWORD *)"mismatch: ";
            *((_QWORD *)v112 + 4) += 10;
          }
          else
          {
            v112 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a4, "mismatch: ", 0xAuLL);
          }
          sub_1C5E21910(v112, v180, 0, 0, 0);
          v119 = (_DWORD *)*((_QWORD *)v112 + 4);
          if (*((_QWORD *)v112 + 3) - (_QWORD)v119 > 3uLL)
          {
            *v119 = 544437792;
            *((_QWORD *)v112 + 4) += 4;
          }
          else
          {
            v112 = llvm::raw_ostream::write(v112, " vs ", 4uLL);
          }
          sub_1C5E21910(v112, v88, 0, 0, 0);
          v120 = (_BYTE *)*((_QWORD *)v112 + 4);
          if (*((_BYTE **)v112 + 3) != v120)
          {
            *v120 = 41;
            v156 = *((_QWORD *)v112 + 4) + 1;
            goto LABEL_294;
          }
          v115 = v112;
          v116 = ")";
          v117 = 1;
LABEL_198:
          llvm::raw_ostream::write(v115, v116, v117);
        }
LABEL_199:
        v99 = v185;
        goto LABEL_205;
      }
      if ((_DWORD)v192 != 38)
        goto LABEL_199;
      v99 = v185;
      if (v217[0] == 2)
      {
        v180 = *(_QWORD *)v216 + (*((_QWORD *)v216 + 1) << 32) + 8 * *(_QWORD *)(a1 + 16) - *(unsigned int *)(a1 + 32);
        goto LABEL_205;
      }
      v105 = *(llvm::raw_ostream **)a4;
      v118 = *(_OWORD **)(*(_QWORD *)a4 + 32);
      if (*(_QWORD *)(*(_QWORD *)a4 + 24) - (_QWORD)v118 <= 0xFuLL)
      {
        v108 = "(Invalid record)";
        v109 = 16;
        goto LABEL_204;
      }
      *v118 = *(_OWORD *)"(Invalid record)";
      v157 = *((_QWORD *)v105 + 4) + 16;
LABEL_303:
      *((_QWORD *)v105 + 4) = v157;
      goto LABEL_205;
    }
    if (v187 != 8)
      goto LABEL_199;
    v99 = v185;
    if ((_DWORD)v192 == 17 && *((_BYTE *)a5 + 16))
    {
      if (v217[0] == 5)
      {
        v213 = xmmword_1C85F4BB0;
        v214 = 3285377520;
        v215 = 0;
        llvm::SHA1::update(&v211, *(_BYTE **)a5, *((_QWORD *)a5 + 1));
        llvm::SHA1::update(&v211, (_BYTE *)(*(_QWORD *)a1 + v179), (int)v189 - (int)v179);
        llvm::SHA1::result((llvm::SHA1 *)&v211, (uint64_t)v209);
        v100 = 0;
        v101 = (unsigned int *)v216;
        do
        {
          v102 = *v101;
          v101 += 2;
          *(_DWORD *)((char *)v207 + v100) = bswap32(v102);
          v100 += 4;
        }
        while (v100 != 20);
        v104 = v209[0] == (_BYTE *)v207[0] && v209[1] == (_BYTE *)v207[1] && v210 == (unint64_t)v208;
        v105 = *(llvm::raw_ostream **)a4;
        v106 = *(_QWORD **)(*(_QWORD *)a4 + 32);
        v107 = *(_QWORD *)(*(_QWORD *)a4 + 24) - (_QWORD)v106;
        if (v104)
        {
          if (v107 <= 7)
          {
            v108 = " (match)";
            v109 = 8;
            goto LABEL_204;
          }
          *v106 = 0x29686374616D2820;
          v157 = *((_QWORD *)v105 + 4) + 8;
        }
        else
        {
          if (v107 <= 0xC)
          {
            v108 = " (!mismatch!)";
            v109 = 13;
LABEL_204:
            llvm::raw_ostream::write(v105, v108, v109);
            goto LABEL_205;
          }
          qmemcpy(v106, " (!mismatch!)", 13);
          v157 = *((_QWORD *)v105 + 4) + 13;
        }
      }
      else
      {
        v105 = *(llvm::raw_ostream **)a4;
        v121 = *(_QWORD *)(*(_QWORD *)a4 + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 24) - v121) <= 9)
        {
          v108 = " (invalid)";
          v109 = 10;
          goto LABEL_204;
        }
        *(_WORD *)(v121 + 8) = 10596;
        *(_QWORD *)v121 = *(_QWORD *)" (invalid)";
        v157 = *((_QWORD *)v105 + 4) + 10;
      }
      goto LABEL_303;
    }
LABEL_205:
    v122 = *(llvm::raw_ostream **)a4;
    v123 = *(_WORD **)(*(_QWORD *)a4 + 32);
    if (*(_QWORD *)(*(_QWORD *)a4 + 24) - (_QWORD)v123 > 1uLL)
    {
      *v123 = 15919;
      *((_QWORD *)v122 + 4) += 2;
      if (!v99)
        goto LABEL_229;
    }
    else
    {
      llvm::raw_ostream::write(v122, "/>", 2uLL);
      if (!v99)
        goto LABEL_229;
    }
    if (*(_DWORD *)(v99 + 8) != 1)
    {
      v124 = 0;
      while (1)
      {
        v125 = v124 + 1;
        if ((*(_BYTE *)(*(_QWORD *)v99 + 16 * (v124 + 1) + 8) & 0xF) == 6)
          break;
        ++v124;
        if (*(_DWORD *)(v99 + 8) - 1 == v125)
          goto LABEL_229;
      }
      memset(&v211, 0, sizeof(v211));
      v126 = v217[0];
      while (v126 != v124)
      {
        v127 = *((_QWORD *)v216 + v124);
        if ((v127 - 32) > 0x5Eu)
          goto LABEL_226;
        std::string::push_back(&v211, v127);
        ++v124;
      }
      v128 = *(llvm::raw_ostream **)a4;
      v129 = *(_QWORD *)(*(_QWORD *)a4 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 24) - v129) > 0x11)
      {
        *(_WORD *)(v129 + 16) = 10016;
        *(_OWORD *)v129 = *(_OWORD *)" record string = '";
        *((_QWORD *)v128 + 4) += 18;
      }
      else
      {
        v128 = llvm::raw_ostream::write(v128, " record string = '", 0x12uLL);
      }
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v130 = &v211;
      else
        v130 = (std::string *)v211.__r_.__value_.__r.__words[0];
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v211.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v211.__r_.__value_.__l.__size_;
      v132 = llvm::raw_ostream::write(v128, (const char *)v130, size);
      v133 = (_BYTE *)*((_QWORD *)v132 + 4);
      if (*((_BYTE **)v132 + 3) == v133)
      {
        llvm::raw_ostream::write(v132, "'", 1uLL);
      }
      else
      {
        *v133 = 39;
        ++*((_QWORD *)v132 + 4);
      }
LABEL_226:
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      LODWORD(v21) = v195;
    }
LABEL_229:
    v13 = v191;
    if (*(_QWORD *)v197)
    {
      if (v187 == 15 && (_DWORD)v192 == 35)
      {
        if (v206 >= 0)
          v134 = (void **)&__b;
        else
          v134 = __b;
        if (v206 >= 0)
          v135 = HIBYTE(v206) & 0x7F;
        else
          v135 = v205;
        llvm::BitcodeAnalyzer::decodeMetadataStringsBlob(*(llvm::raw_ostream **)a4, v134, v135, (uint64_t *)v216, v217[0], *(uint64_t *)v197, *(unint64_t *)v198, a6);
        if (*a6)
          goto LABEL_330;
        goto LABEL_265;
      }
      v136 = *(llvm::raw_ostream **)a4;
      v137 = *(void **)(*(_QWORD *)a4 + 32);
      if (*(_QWORD *)(*(_QWORD *)a4 + 24) - (_QWORD)v137 > 0xCuLL)
      {
        qmemcpy(v137, " blob data = ", 13);
        *((_QWORD *)v136 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v136, " blob data = ", 0xDuLL);
      }
      if (*((_BYTE *)a4 + 10))
      {
        v138 = *(llvm::raw_ostream **)a4;
        v139 = *(_BYTE **)(*(_QWORD *)a4 + 32);
        if (*(_BYTE **)(*(_QWORD *)a4 + 24) == v139)
        {
          llvm::raw_ostream::write(v138, "'", 1uLL);
        }
        else
        {
          *v139 = 39;
          ++*((_QWORD *)v138 + 4);
        }
        v140 = llvm::raw_ostream::write_escaped(*(llvm::raw_ostream **)a4, *(char **)v197, *(uint64_t *)v198, 1);
        v141 = (_BYTE *)*((_QWORD *)v140 + 4);
        if (*((_BYTE **)v140 + 3) == v141)
        {
          llvm::raw_ostream::write(v140, "'", 1uLL);
        }
        else
        {
          *v141 = 39;
          ++*((_QWORD *)v140 + 4);
        }
        goto LABEL_265;
      }
      v142 = *(_QWORD *)v198;
      if (*(_QWORD *)v198)
      {
        v143 = *(unsigned __int8 **)v197;
        while (*v143 - 32 < 0x5F)
        {
          ++v143;
          if (!--v142)
            goto LABEL_251;
        }
        v144 = *(llvm::raw_ostream **)a4;
        v151 = *(void **)(*(_QWORD *)a4 + 32);
        if (*(_QWORD *)(*(_QWORD *)a4 + 24) - (_QWORD)v151 > 0xCuLL)
        {
          qmemcpy(v151, "unprintable, ", 13);
          *((_QWORD *)v144 + 4) += 13;
        }
        else
        {
          v144 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a4, "unprintable, ", 0xDuLL);
        }
        sub_1C5E21910(v144, *(unint64_t *)v198, 0, 0, 0);
        v152 = (_DWORD *)*((_QWORD *)v144 + 4);
        if (*((_QWORD *)v144 + 3) - (_QWORD)v152 <= 6uLL)
        {
          v148 = v144;
          v149 = " bytes.";
          v150 = 7;
LABEL_263:
          llvm::raw_ostream::write(v148, v149, v150);
LABEL_264:
          v13 = v191;
          goto LABEL_265;
        }
        *(_DWORD *)((char *)v152 + 3) = 779314548;
        *v152 = 1954112032;
        v158 = *((_QWORD *)v144 + 4) + 7;
      }
      else
      {
LABEL_251:
        v144 = *(llvm::raw_ostream **)a4;
        v145 = *(_BYTE **)(*(_QWORD *)a4 + 32);
        if (*(_BYTE **)(*(_QWORD *)a4 + 24) == v145)
        {
          v144 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a4, "'", 1uLL);
          v146 = (_BYTE *)*((_QWORD *)v144 + 4);
        }
        else
        {
          *v145 = 39;
          v146 = (_BYTE *)(*((_QWORD *)v144 + 4) + 1);
          *((_QWORD *)v144 + 4) = v146;
        }
        v147 = *(_QWORD *)v198;
        if (*(_QWORD *)v198 <= *((_QWORD *)v144 + 3) - (_QWORD)v146)
        {
          if (*(_QWORD *)v198)
          {
            memcpy(v146, *(const void **)v197, *(size_t *)v198);
            v146 = (_BYTE *)(*((_QWORD *)v144 + 4) + v147);
            *((_QWORD *)v144 + 4) = v146;
          }
        }
        else
        {
          v144 = llvm::raw_ostream::write(v144, *(const char **)v197, *(size_t *)v198);
          v146 = (_BYTE *)*((_QWORD *)v144 + 4);
        }
        if (*((_BYTE **)v144 + 3) == v146)
        {
          v148 = v144;
          v149 = "'";
          v150 = 1;
          goto LABEL_263;
        }
        *v146 = 39;
        v158 = *((_QWORD *)v144 + 4) + 1;
      }
      *((_QWORD *)v144 + 4) = v158;
      goto LABEL_264;
    }
LABEL_265:
    v153 = *(llvm::raw_ostream **)a4;
    v154 = *(_BYTE **)(*(_QWORD *)a4 + 32);
    if (*(_BYTE **)(*(_QWORD *)a4 + 24) == v154)
    {
      llvm::raw_ostream::write(v153, "\n", 1uLL);
    }
    else
    {
      *v154 = 10;
      ++*((_QWORD *)v153 + 4);
    }
    LOBYTE(v71) = v183;
    v72 = v189;
LABEL_268:
    *(_QWORD *)(a1 + 16) = v72 & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(a1 + 32) = 0;
    if ((v71 & 0x3F) != 0
      && (sub_1C4FF7E04(a1, v71 & 0x3F, (uint64_t)&v211), (v211.__r_.__value_.__s.__data_[8] & 1) != 0))
    {
      v159 = v211.__r_.__value_.__r.__words[0];
      *a6 = v211.__r_.__value_.__r.__words[0];
      if (v159)
        goto LABEL_330;
    }
    else
    {
      *a6 = 0;
    }
    llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)a1, v21, (uint64_t)&v211);
    if ((v211.__r_.__value_.__s.__data_[8] & 1) != 0)
    {
      v171 = v211.__r_.__value_.__r.__words[0];
      goto LABEL_322;
    }
  }
  v175 = std::generic_category();
  v211.__r_.__value_.__r.__words[0] = 92;
  v211.__r_.__value_.__l.__size_ = (std::string::size_type)v175;
  v209[0] = "Invalid abbrev number";
  sub_1C5DF1730(v209, (uint64_t *)&v211, v207);
  v171 = v207[0];
LABEL_322:
  *a6 = v171;
LABEL_330:
  if (v216 != v218)
    free(v216);
LABEL_332:
  if (SHIBYTE(v206) < 0)
    operator delete(__b);
}

void llvm::BitcodeAnalyzer::printStats(uint64_t a1, llvm::raw_ostream *this, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  const char *v13;
  size_t v14;
  void *v15;
  _WORD *v16;
  void *v17;
  double v18;
  _BYTE *v19;
  void *v20;
  uint64_t *v21;
  const char *v22;
  llvm::raw_ostream *v23;
  size_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  char *v36;
  char v37;
  const char *v38;
  _WORD *v39;
  llvm::raw_ostream *v40;
  size_t v41;
  void *v42;
  _BYTE *v43;
  _WORD *v44;
  void *v45;
  llvm::raw_ostream *v46;
  _BYTE *v47;
  void *v48;
  unint64_t v49;
  _BYTE *v50;
  void *v51;
  unint64_t v52;
  llvm::raw_ostream *v53;
  llvm::raw_ostream *v54;
  unint64_t v55;
  _BYTE *v56;
  void *v57;
  unint64_t v58;
  double v59;
  _BYTE *v60;
  void *v61;
  llvm::raw_ostream *v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  void *v67;
  llvm::raw_ostream *v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  void *v73;
  llvm::raw_ostream *v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  llvm::raw_ostream *v78;
  _BYTE *v79;
  void *v80;
  llvm::raw_ostream *v81;
  _BYTE *v82;
  void *v83;
  _BYTE *v84;
  unsigned int v85;
  void *v86;
  llvm::raw_ostream *v87;
  llvm::raw_ostream *v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  unsigned int *v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int *v109;
  BOOL v110;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  void *v117;
  unsigned int *i;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  unsigned int v123;
  unint64_t v124;
  double v125;
  void *v126;
  unsigned int v127;
  _QWORD *v128;
  _WORD *v129;
  const char *v130;
  char v131;
  const char *v132;
  size_t v133;
  void *v134;
  llvm::raw_ostream *v135;
  _BYTE *v136;
  uint64_t v137;
  llvm::raw_ostream *v138;
  _BYTE *v139;
  _BYTE *v140;
  _QWORD *v141;
  _QWORD *v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t (**v149)(llvm::format_object_base *__hidden);
  const char *v150;
  double v151;
  double v152;
  unint64_t v153;

  v7 = a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_QWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v9 > 7uLL)
  {
    *v9 = 0x207972616D6D7553;
    *((_QWORD *)this + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(this, "Summary ", 8uLL);
  }
  v10 = 8 * v8;
  if (*(_BYTE *)(a4 + 16))
  {
    v11 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 2)
    {
      *(_BYTE *)(v11 + 2) = 32;
      *(_WORD *)v11 = 26223;
      *((_QWORD *)this + 4) += 3;
      v12 = this;
    }
    else
    {
      v12 = llvm::raw_ostream::write(this, "of ", 3uLL);
    }
    v13 = *(const char **)a4;
    if (v13)
    {
      v14 = strlen(v13);
      v15 = (void *)*((_QWORD *)v12 + 4);
      if (v14 <= *((_QWORD *)v12 + 3) - (_QWORD)v15)
      {
        if (v14)
        {
          memcpy(v15, v13, v14);
          *((_QWORD *)v12 + 4) += v14;
        }
      }
      else
      {
        v12 = llvm::raw_ostream::write(v12, v13, v14);
      }
    }
    v16 = (_WORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v16 > 1uLL)
    {
      *v16 = 2618;
      *((_QWORD *)v12 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v12, ":\n", 2uLL);
    }
  }
  v17 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v17 > 0x14uLL)
  {
    qmemcpy(v17, "         Total size: ", 21);
    *((_QWORD *)this + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(this, "         Total size: ", 0x15uLL);
  }
  v18 = (double)v10;
  v149 = &off_1E813F138;
  v150 = "%lub/%.2fB/%luW";
  *(_QWORD *)&v151 = 8 * v8;
  v152 = (double)v10 * 0.125;
  v153 = v10 >> 5;
  llvm::raw_ostream::operator<<(this, (uint64_t)&v149);
  v19 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v19)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    v20 = (void *)*((_QWORD *)this + 4);
  }
  else
  {
    *v19 = 10;
    v20 = (void *)(*((_QWORD *)this + 4) + 1);
    *((_QWORD *)this + 4) = v20;
  }
  if (*((_QWORD *)this + 3) - (_QWORD)v20 > 0x14uLL)
  {
    qmemcpy(v20, "        Stream type: ", 21);
    *((_QWORD *)this + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(this, "        Stream type: ", 0x15uLL);
  }
  switch(*(_DWORD *)(v7 + 368))
  {
    case 0:
      v21 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v21 <= 7uLL)
      {
        v22 = "unknown\n";
        goto LABEL_22;
      }
      v144 = 0xA6E776F6E6B6E75;
      goto LABEL_239;
    case 1:
      v21 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v21 <= 7uLL)
      {
        v22 = "LLVM IR\n";
LABEL_22:
        v23 = this;
        v24 = 8;
        goto LABEL_29;
      }
      v144 = 0xA5249204D564C4CLL;
LABEL_239:
      *v21 = v144;
      v145 = *((_QWORD *)this + 4) + 8;
      goto LABEL_243;
    case 2:
      v25 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v25 <= 0x14uLL)
      {
        v22 = "Clang Serialized AST\n";
        v23 = this;
        v24 = 21;
        goto LABEL_29;
      }
      qmemcpy(v25, "Clang Serialized AST\n", 21);
      v145 = *((_QWORD *)this + 4) + 21;
      goto LABEL_243;
    case 3:
      v26 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v26 <= 0x1CuLL)
      {
        v22 = "Clang Serialized Diagnostics\n";
        v23 = this;
        v24 = 29;
        goto LABEL_29;
      }
      qmemcpy(v26, "Clang Serialized Diagnostics\n", 29);
      v145 = *((_QWORD *)this + 4) + 29;
      goto LABEL_243;
    case 4:
      v27 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v27 > 0xCuLL)
      {
        qmemcpy(v27, "LLVM Remarks\n", 13);
        v145 = *((_QWORD *)this + 4) + 13;
LABEL_243:
        *((_QWORD *)this + 4) = v145;
      }
      else
      {
        v22 = "LLVM Remarks\n";
        v23 = this;
        v24 = 13;
LABEL_29:
        llvm::raw_ostream::write(v23, v22, v24);
      }
LABEL_30:
      v28 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v28 > 0x14uLL)
      {
        qmemcpy(v28, "  # Toplevel Blocks: ", 21);
        *((_QWORD *)this + 4) += 21;
        v29 = this;
      }
      else
      {
        v29 = llvm::raw_ostream::write(this, "  # Toplevel Blocks: ", 0x15uLL);
      }
      sub_1C5E21910(v29, *(unsigned int *)(v7 + 728), 0, 0, 0);
      v30 = (_BYTE *)*((_QWORD *)v29 + 4);
      if (*((_BYTE **)v29 + 3) == v30)
      {
        llvm::raw_ostream::write(v29, "\n", 1uLL);
      }
      else
      {
        *v30 = 10;
        ++*((_QWORD *)v29 + 4);
      }
      v31 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v31)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
        v32 = *((_QWORD *)this + 4);
      }
      else
      {
        *v31 = 10;
        v32 = *((_QWORD *)this + 4) + 1;
        *((_QWORD *)this + 4) = v32;
      }
      if ((unint64_t)(*((_QWORD *)this + 3) - v32) > 0x12)
      {
        *(_DWORD *)(v32 + 15) = 171604338;
        *(_OWORD *)v32 = *(_OWORD *)"Per-block Summary:\n";
        *((_QWORD *)this + 4) += 19;
      }
      else
      {
        llvm::raw_ostream::write(this, "Per-block Summary:\n", 0x13uLL);
      }
      v33 = *(_QWORD **)(v7 + 736);
      v147 = (_QWORD *)(v7 + 744);
      if (v33 == (_QWORD *)(v7 + 744))
        return;
      v148 = v7;
      v146 = a3;
      break;
    default:
      goto LABEL_30;
  }
  do
  {
    v34 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v34) > 0xB)
    {
      *(_DWORD *)(v34 + 8) = 589317193;
      *(_QWORD *)v34 = *(_QWORD *)"  Block ID #";
      *((_QWORD *)this + 4) += 12;
      v35 = this;
    }
    else
    {
      v35 = llvm::raw_ostream::write(this, "  Block ID #", 0xCuLL);
    }
    sub_1C5E21910(v35, *((unsigned int *)v33 + 8), 0, 0, 0);
    v36 = sub_1C4FF6FC4(*((_DWORD *)v33 + 8), *(_QWORD *)(v7 + 344), *(_QWORD *)(v7 + 352), *(_DWORD *)(v7 + 368));
    if (v37)
    {
      v38 = v36;
      v39 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v39 > 1uLL)
      {
        *v39 = 10272;
        *((_QWORD *)this + 4) += 2;
        v40 = this;
        if (v36)
        {
LABEL_45:
          v41 = strlen(v38);
          v42 = (void *)*((_QWORD *)v40 + 4);
          if (v41 <= *((_QWORD *)v40 + 3) - (_QWORD)v42)
          {
            if (v41)
            {
              memcpy(v42, v38, v41);
              *((_QWORD *)v40 + 4) += v41;
            }
          }
          else
          {
            v40 = llvm::raw_ostream::write(v40, v38, v41);
          }
        }
      }
      else
      {
        v40 = llvm::raw_ostream::write(this, " (", 2uLL);
        if (v38)
          goto LABEL_45;
      }
      v43 = (_BYTE *)*((_QWORD *)v40 + 4);
      if (*((_BYTE **)v40 + 3) == v43)
      {
        llvm::raw_ostream::write(v40, ")", 1uLL);
      }
      else
      {
        *v43 = 41;
        ++*((_QWORD *)v40 + 4);
      }
    }
    v44 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v44 > 1uLL)
    {
      *v44 = 2618;
      v45 = (void *)(*((_QWORD *)this + 4) + 2);
      *((_QWORD *)this + 4) = v45;
    }
    else
    {
      llvm::raw_ostream::write(this, ":\n", 2uLL);
      v45 = (void *)*((_QWORD *)this + 4);
    }
    v7 = v148;
    if (*((_QWORD *)this + 3) - (_QWORD)v45 > 0x14uLL)
    {
      qmemcpy(v45, "      Num Instances: ", 21);
      *((_QWORD *)this + 4) += 21;
      v46 = this;
    }
    else
    {
      v46 = llvm::raw_ostream::write(this, "      Num Instances: ", 0x15uLL);
    }
    sub_1C5E21910(v46, *((unsigned int *)v33 + 10), 0, 0, 0);
    v47 = (_BYTE *)*((_QWORD *)v46 + 4);
    if (*((_BYTE **)v46 + 3) == v47)
    {
      llvm::raw_ostream::write(v46, "\n", 1uLL);
    }
    else
    {
      *v47 = 10;
      ++*((_QWORD *)v46 + 4);
    }
    v48 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v48 > 0x14uLL)
    {
      qmemcpy(v48, "         Total Size: ", 21);
      *((_QWORD *)this + 4) += 21;
    }
    else
    {
      llvm::raw_ostream::write(this, "         Total Size: ", 0x15uLL);
    }
    v49 = v33[6];
    v149 = &off_1E813F138;
    v150 = "%lub/%.2fB/%luW";
    v151 = *(double *)&v49;
    v152 = (double)v49 * 0.125;
    v153 = v49 >> 5;
    llvm::raw_ostream::operator<<(this, (uint64_t)&v149);
    v50 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v50)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
      v51 = (void *)*((_QWORD *)this + 4);
    }
    else
    {
      *v50 = 10;
      v51 = (void *)(*((_QWORD *)this + 4) + 1);
      *((_QWORD *)this + 4) = v51;
    }
    v52 = v33[6];
    if (*((_QWORD *)this + 3) - (_QWORD)v51 > 0x14uLL)
    {
      qmemcpy(v51, "    Percent of file: ", 21);
      *((_QWORD *)this + 4) += 21;
      v53 = this;
    }
    else
    {
      v53 = llvm::raw_ostream::write(this, "    Percent of file: ", 0x15uLL);
    }
    v149 = &off_1E7FA8D00;
    v150 = "%2.4f%%";
    v151 = (double)v52 * 100.0 / v18;
    v54 = llvm::raw_ostream::operator<<(v53, (uint64_t)&v149);
    v56 = (_BYTE *)*((_QWORD *)v54 + 4);
    if (*((_BYTE **)v54 + 3) == v56)
    {
      llvm::raw_ostream::write(v54, "\n", 1uLL);
    }
    else
    {
      *v56 = 10;
      ++*((_QWORD *)v54 + 4);
    }
    v57 = (void *)*((_QWORD *)this + 4);
    v58 = *((_QWORD *)this + 3) - (_QWORD)v57;
    if (*((_DWORD *)v33 + 10) < 2u)
    {
      if (v58 > 0x14)
      {
        qmemcpy(v57, "      Num SubBlocks: ", 21);
        *((_QWORD *)this + 4) += 21;
        v78 = this;
      }
      else
      {
        v78 = llvm::raw_ostream::write(this, "      Num SubBlocks: ", 0x15uLL);
      }
      sub_1C5E21910(v78, *((unsigned int *)v33 + 14), 0, 0, 0);
      v79 = (_BYTE *)*((_QWORD *)v78 + 4);
      if (*((_BYTE **)v78 + 3) == v79)
      {
        llvm::raw_ostream::write(v78, "\n", 1uLL);
      }
      else
      {
        *v79 = 10;
        ++*((_QWORD *)v78 + 4);
      }
      v80 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v80 > 0x14uLL)
      {
        qmemcpy(v80, "        Num Abbrevs: ", 21);
        *((_QWORD *)this + 4) += 21;
        v81 = this;
      }
      else
      {
        v81 = llvm::raw_ostream::write(this, "        Num Abbrevs: ", 0x15uLL);
      }
      sub_1C5E21910(v81, *((unsigned int *)v33 + 15), 0, 0, 0);
      v82 = (_BYTE *)*((_QWORD *)v81 + 4);
      if (*((_BYTE **)v81 + 3) == v82)
      {
        llvm::raw_ostream::write(v81, "\n", 1uLL);
      }
      else
      {
        *v82 = 10;
        ++*((_QWORD *)v81 + 4);
      }
      v83 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v83 > 0x14uLL)
      {
        qmemcpy(v83, "        Num Records: ", 21);
        *((_QWORD *)this + 4) += 21;
        v74 = this;
      }
      else
      {
        v74 = llvm::raw_ostream::write(this, "        Num Records: ", 0x15uLL);
      }
      sub_1C5E21910(v74, *((unsigned int *)v33 + 16), 0, 0, 0);
    }
    else
    {
      if (v58 > 0x14)
      {
        qmemcpy(v57, "       Average Size: ", 21);
        *((_QWORD *)this + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "       Average Size: ", 0x15uLL);
      }
      LODWORD(v55) = *((_DWORD *)v33 + 10);
      v59 = (double)(unint64_t)v33[6] / (double)v55;
      v149 = &off_1E813F158;
      v150 = "%.2f/%.2fB/%luW";
      v151 = v59;
      v152 = v59 * 0.125;
      v153 = (unint64_t)(v59 * 0.03125);
      llvm::raw_ostream::operator<<(this, (uint64_t)&v149);
      v60 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v60)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
        v61 = (void *)*((_QWORD *)this + 4);
      }
      else
      {
        *v60 = 10;
        v61 = (void *)(*((_QWORD *)this + 4) + 1);
        *((_QWORD *)this + 4) = v61;
      }
      if (*((_QWORD *)this + 3) - (_QWORD)v61 > 0x14uLL)
      {
        qmemcpy(v61, "  Tot/Avg SubBlocks: ", 21);
        *((_QWORD *)this + 4) += 21;
        v62 = this;
      }
      else
      {
        v62 = llvm::raw_ostream::write(this, "  Tot/Avg SubBlocks: ", 0x15uLL);
      }
      sub_1C5E21910(v62, *((unsigned int *)v33 + 14), 0, 0, 0);
      v65 = (_BYTE *)*((_QWORD *)v62 + 4);
      if (*((_BYTE **)v62 + 3) == v65)
      {
        v62 = llvm::raw_ostream::write(v62, "/", 1uLL);
      }
      else
      {
        *v65 = 47;
        ++*((_QWORD *)v62 + 4);
      }
      LODWORD(v63) = *((_DWORD *)v33 + 14);
      LODWORD(v64) = *((_DWORD *)v33 + 10);
      llvm::write_double(v62, 0, 0, 0, (double)v63 / (double)v64);
      v66 = (_BYTE *)*((_QWORD *)v62 + 4);
      if (*((_BYTE **)v62 + 3) == v66)
      {
        llvm::raw_ostream::write(v62, "\n", 1uLL);
      }
      else
      {
        *v66 = 10;
        ++*((_QWORD *)v62 + 4);
      }
      v67 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v67 > 0x14uLL)
      {
        qmemcpy(v67, "    Tot/Avg Abbrevs: ", 21);
        *((_QWORD *)this + 4) += 21;
        v68 = this;
      }
      else
      {
        v68 = llvm::raw_ostream::write(this, "    Tot/Avg Abbrevs: ", 0x15uLL);
      }
      sub_1C5E21910(v68, *((unsigned int *)v33 + 15), 0, 0, 0);
      v71 = (_BYTE *)*((_QWORD *)v68 + 4);
      if (*((_BYTE **)v68 + 3) == v71)
      {
        v68 = llvm::raw_ostream::write(v68, "/", 1uLL);
      }
      else
      {
        *v71 = 47;
        ++*((_QWORD *)v68 + 4);
      }
      LODWORD(v69) = *((_DWORD *)v33 + 15);
      LODWORD(v70) = *((_DWORD *)v33 + 10);
      llvm::write_double(v68, 0, 0, 0, (double)v69 / (double)v70);
      v72 = (_BYTE *)*((_QWORD *)v68 + 4);
      if (*((_BYTE **)v68 + 3) == v72)
      {
        llvm::raw_ostream::write(v68, "\n", 1uLL);
      }
      else
      {
        *v72 = 10;
        ++*((_QWORD *)v68 + 4);
      }
      v73 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v73 > 0x14uLL)
      {
        qmemcpy(v73, "    Tot/Avg Records: ", 21);
        *((_QWORD *)this + 4) += 21;
        v74 = this;
      }
      else
      {
        v74 = llvm::raw_ostream::write(this, "    Tot/Avg Records: ", 0x15uLL);
      }
      sub_1C5E21910(v74, *((unsigned int *)v33 + 16), 0, 0, 0);
      v77 = (_BYTE *)*((_QWORD *)v74 + 4);
      if (*((_BYTE **)v74 + 3) == v77)
      {
        v74 = llvm::raw_ostream::write(v74, "/", 1uLL);
      }
      else
      {
        *v77 = 47;
        ++*((_QWORD *)v74 + 4);
      }
      LODWORD(v75) = *((_DWORD *)v33 + 16);
      LODWORD(v76) = *((_DWORD *)v33 + 10);
      llvm::write_double(v74, 0, 0, 0, (double)v75 / (double)v76);
    }
    v84 = (_BYTE *)*((_QWORD *)v74 + 4);
    if (*((_BYTE **)v74 + 3) == v84)
    {
      llvm::raw_ostream::write(v74, "\n", 1uLL);
    }
    else
    {
      *v84 = 10;
      ++*((_QWORD *)v74 + 4);
    }
    v85 = *((_DWORD *)v33 + 16);
    if (v85)
    {
      LODWORD(v52) = *((_DWORD *)v33 + 17);
      v86 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v86 > 0x14uLL)
      {
        qmemcpy(v86, "    Percent Abbrevs: ", 21);
        *((_QWORD *)this + 4) += 21;
        v87 = this;
      }
      else
      {
        v87 = llvm::raw_ostream::write(this, "    Percent Abbrevs: ", 0x15uLL);
      }
      v149 = &off_1E7FA8D00;
      v150 = "%2.4f%%";
      v151 = (double)v52 * 100.0 / (double)v85;
      v88 = llvm::raw_ostream::operator<<(v87, (uint64_t)&v149);
      v89 = (_BYTE *)*((_QWORD *)v88 + 4);
      if (*((_BYTE **)v88 + 3) == v89)
      {
        llvm::raw_ostream::write(v88, "\n", 1uLL);
      }
      else
      {
        *v89 = 10;
        ++*((_QWORD *)v88 + 4);
      }
    }
    v90 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v90)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
      if ((a3 & 1) == 0)
        goto LABEL_181;
    }
    else
    {
      *v90 = 10;
      ++*((_QWORD *)this + 4);
      if ((a3 & 1) == 0)
        goto LABEL_181;
    }
    v91 = v33[9];
    v92 = v33[10];
    if (v91 != v92)
    {
      v93 = v92 - v91;
      if ((v93 & 0xFFFFFFFF0) != 0)
      {
        v94 = 0;
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v98 = (v93 >> 4);
        while (1)
        {
          v99 = *(unsigned int *)(v33[9] + 16 * v94);
          if ((_DWORD)v99)
          {
            v100 = v99 | (v94 << 32);
            if (v97 >= v95)
            {
              v102 = ((char *)v97 - (char *)v96) >> 3;
              v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 61)
                abort();
              if (v95 - v96 > v103)
                v103 = v95 - v96;
              if ((unint64_t)((char *)v95 - (char *)v96) >= 0x7FFFFFFFFFFFFFF8)
                v104 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v104 = v103;
              if (v104)
              {
                if (v104 >> 61)
                  sub_1C4764EE4();
                v105 = (char *)operator new(8 * v104);
              }
              else
              {
                v105 = 0;
              }
              v106 = (unsigned int *)&v105[8 * v102];
              *(_QWORD *)v106 = v100;
              v101 = v106 + 2;
              while (v97 != v96)
              {
                v107 = *((_QWORD *)v97 - 1);
                v97 -= 2;
                *((_QWORD *)v106 - 1) = v107;
                v106 -= 2;
              }
              v95 = (unsigned int *)&v105[8 * v104];
              if (v96)
                operator delete(v96);
              v96 = v106;
              v7 = v148;
              goto LABEL_128;
            }
            *(_QWORD *)v97 = v100;
            v97 += 2;
          }
          v101 = v97;
LABEL_128:
          ++v94;
          v97 = v101;
          if (v94 == v98)
            goto LABEL_131;
        }
      }
      v101 = 0;
      v96 = 0;
LABEL_131:
      if ((char *)v101 - (char *)v96 < 1)
      {
LABEL_135:
        sub_1C4FF8B20(v96, v101, ((char *)v101 - (char *)v96) >> 3, 0, 0);
      }
      else
      {
        v108 = ((char *)v101 - (char *)v96) >> 3;
        while (1)
        {
          v109 = (unsigned int *)operator new(8 * v108, MEMORY[0x1E0DE4E10]);
          if (v109)
            break;
          v110 = v108 > 1;
          v108 >>= 1;
          if (!v110)
            goto LABEL_135;
        }
        v111 = v109;
        sub_1C4FF8B20(v96, v101, ((char *)v101 - (char *)v96) >> 3, v109, v108);
        operator delete(v111);
      }
      if (v96 != v101)
      {
        v112 = v101 - 2;
        if (v96 < v101 - 2)
        {
          v113 = v96;
          do
          {
            v114 = *v113;
            *v113 = *v112;
            *v112 = v114;
            v115 = v113[1];
            v113[1] = v112[1];
            v112[1] = v115;
            v113 += 2;
            v112 -= 2;
          }
          while (v113 < v112);
        }
      }
      v116 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v116) > 0x12)
      {
        *(_DWORD *)(v116 + 15) = 171601249;
        *(_OWORD *)v116 = *(_OWORD *)"\tRecord Histogram:\n";
        v117 = (void *)(*((_QWORD *)this + 4) + 19);
        *((_QWORD *)this + 4) = v117;
      }
      else
      {
        llvm::raw_ostream::write(this, "\tRecord Histogram:\n", 0x13uLL);
        v117 = (void *)*((_QWORD *)this + 4);
      }
      if (*((_QWORD *)this + 3) - (_QWORD)v117 > 0x32uLL)
      {
        qmemcpy(v117, "\t\t  Count    # Bits     b/Rec   % Abv  Record Kind\n", 51);
        *((_QWORD *)this + 4) += 51;
      }
      else
      {
        llvm::raw_ostream::write(this, "\t\t  Count    # Bits     b/Rec   % Abv  Record Kind\n", 0x33uLL);
      }
      for (i = v96; i != v101; i += 2)
      {
        v119 = i[1];
        v120 = v33[9];
        v121 = v120 + 16 * v119;
        v122 = *(double *)(v121 + 8);
        v149 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E813F178;
        v123 = *(_DWORD *)v121;
        v150 = "\t\t%7d %9lu";
        LODWORD(v151) = v123;
        v152 = v122;
        llvm::raw_ostream::operator<<(this, (uint64_t)&v149);
        if (*(_DWORD *)v121 < 2u)
        {
          v126 = (void *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v126 > 9uLL)
          {
            memset(v126, 32, 10);
            *((_QWORD *)this + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(this, "          ", 0xAuLL);
          }
        }
        else
        {
          v125 = (double)*(unint64_t *)(v121 + 8) / (double)*(unsigned int *)v121;
          v149 = &off_1E7FA8D00;
          v150 = " %9.1f";
          v151 = v125;
          llvm::raw_ostream::operator<<(this, (uint64_t)&v149);
        }
        v127 = *(_DWORD *)(v120 + 16 * v119 + 4);
        if (v127)
        {
          LODWORD(v124) = *(_DWORD *)v121;
          v149 = &off_1E7FA8D00;
          v150 = " %7.2f";
          v151 = (double)v127 / (double)v124 * 100.0;
          llvm::raw_ostream::operator<<(this, (uint64_t)&v149);
        }
        else
        {
          v128 = (_QWORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v128 > 7uLL)
          {
            *v128 = 0x2020202020202020;
            *((_QWORD *)this + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(this, "        ", 8uLL);
          }
        }
        v129 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v129 > 1uLL)
        {
          *v129 = 8224;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "  ", 2uLL);
        }
        v130 = sub_1C4FF7090(i[1], *((_DWORD *)v33 + 8), *(_QWORD *)(v7 + 344), *(_QWORD *)(v7 + 352), *(_DWORD *)(v7 + 368));
        if (!v131)
        {
          v137 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v137) > 0xA)
          {
            *(_DWORD *)(v137 + 7) = 1701080899;
            *(_QWORD *)v137 = *(_QWORD *)"UnknownCode";
            *((_QWORD *)this + 4) += 11;
            v138 = this;
          }
          else
          {
            v138 = llvm::raw_ostream::write(this, "UnknownCode", 0xBuLL);
          }
          sub_1C5E21910(v138, i[1], 0, 0, 0);
          v139 = (_BYTE *)*((_QWORD *)v138 + 4);
          if (*((_BYTE **)v138 + 3) != v139)
          {
            *v139 = 10;
            ++*((_QWORD *)v138 + 4);
            continue;
          }
          v135 = v138;
LABEL_166:
          llvm::raw_ostream::write(v135, "\n", 1uLL);
          continue;
        }
        v132 = v130;
        if (v130)
        {
          v133 = strlen(v130);
          v134 = (void *)*((_QWORD *)this + 4);
          if (v133 > *((_QWORD *)this + 3) - (_QWORD)v134)
          {
            v135 = llvm::raw_ostream::write(this, v132, v133);
            goto LABEL_160;
          }
          if (v133)
          {
            memcpy(v134, v132, v133);
            *((_QWORD *)this + 4) += v133;
          }
        }
        v135 = this;
LABEL_160:
        v136 = (_BYTE *)*((_QWORD *)v135 + 4);
        if (*((_BYTE **)v135 + 3) == v136)
          goto LABEL_166;
        *v136 = 10;
        ++*((_QWORD *)v135 + 4);
      }
      v140 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v140)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
      }
      else
      {
        *v140 = 10;
        ++*((_QWORD *)this + 4);
      }
      a3 = v146;
      if (v96)
        operator delete(v96);
    }
LABEL_181:
    v141 = (_QWORD *)v33[1];
    if (v141)
    {
      do
      {
        v142 = v141;
        v141 = (_QWORD *)*v141;
      }
      while (v141);
    }
    else
    {
      do
      {
        v142 = (_QWORD *)v33[2];
        v143 = *v142 == (_QWORD)v33;
        v33 = v142;
      }
      while (!v143);
    }
    v33 = v142;
  }
  while (v142 != v147);
}

char *sub_1C4FF6FC4(unsigned int a1, uint64_t a2, uint64_t a3, int a4)
{
  const char *v4;
  uint64_t v5;

  if (a1 <= 7)
  {
    v4 = "BLOCKINFO_BLOCK";
    if (a1)
      return 0;
    return (char *)v4;
  }
  if (a2 != a3 && *(_DWORD *)(a3 - 80) == a1)
  {
    a2 = a3 - 80;
    goto LABEL_8;
  }
  v5 = -858993459 * ((unint64_t)(a3 - a2) >> 4);
  if ((_DWORD)v5)
  {
    while (*(_DWORD *)a2 != a1)
    {
      a2 += 80;
      if (!--v5)
        goto LABEL_17;
    }
LABEL_8:
    v4 = (const char *)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
    {
      if (*(_QWORD *)(a2 + 40))
        return *(char **)v4;
    }
    else if (*(_BYTE *)(a2 + 55))
    {
      return (char *)v4;
    }
  }
LABEL_17:
  if (a4 == 1 && a1 - 8 <= 0x11)
    return off_1E813F188[a1 - 8];
  else
    return 0;
}

const char *sub_1C4FF7090(int a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  const char *v5;
  const char *v6;
  const char *v7;
  const char *result;
  uint64_t i;
  uint64_t v10;
  int v11;
  BOOL v12;
  const char *v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  BOOL v18;
  const char *v19;
  int v20;
  int v21;
  int v22;

  if (a2 <= 7)
  {
    v5 = "SETRECORDNAME";
    v6 = "BLOCKNAME";
    v7 = "SETBID";
    if (a1 != 1)
      v7 = 0;
    if (a1 != 2)
      v6 = v7;
    if (a1 != 3)
      v5 = v6;
    if (a2)
      return 0;
    else
      return v5;
  }
  if (a3 != a4 && *(_DWORD *)(a4 - 80) == a2)
  {
    a3 = a4 - 80;
LABEL_14:
    for (i = *(_QWORD *)(a3 + 56); i != *(_QWORD *)(a3 + 64); i += 32)
    {
      if (*(_DWORD *)i == a1)
      {
        result = (const char *)(i + 8);
        if (*(char *)(i + 31) < 0)
          return *(const char **)result;
        return result;
      }
    }
    goto LABEL_21;
  }
  v10 = -858993459 * ((unint64_t)(a4 - a3) >> 4);
  if ((_DWORD)v10)
  {
    while (*(_DWORD *)a3 != a2)
    {
      a3 += 80;
      if (!--v10)
        goto LABEL_21;
    }
    goto LABEL_14;
  }
LABEL_21:
  if (a5 != 1)
    return 0;
  switch(a2)
  {
    case 8u:
      v14 = a1 - 1;
      result = "VERSION";
      switch(v14)
      {
        case 0:
          return result;
        case 1:
          result = "TRIPLE";
          break;
        case 2:
          result = "DATALAYOUT";
          break;
        case 3:
          result = "ASM";
          break;
        case 4:
          result = "SECTIONNAME";
          break;
        case 5:
          result = "DEPLIB";
          break;
        case 6:
          result = "GLOBALVAR";
          break;
        case 7:
          result = "FUNCTION";
          break;
        case 10:
          result = "GCNAME";
          break;
        case 11:
          result = "COMDAT";
          break;
        case 12:
          result = "VSTOFFSET";
          break;
        case 13:
          result = "ALIAS";
          break;
        case 14:
          result = "METADATA_VALUES_UNUSED";
          break;
        case 15:
          result = "SOURCE_FILENAME";
          break;
        case 16:
          result = "HASH";
          break;
        default:
          return 0;
      }
      return result;
    case 9u:
      if ((a1 - 1) >= 2)
        return 0;
      else
        return "ENTRY";
    case 0xAu:
      v12 = a1 == 3;
      v13 = "ENTRY";
      goto LABEL_57;
    case 0xBu:
      v15 = a1 - 1;
      result = "SETTYPE";
      switch(v15)
      {
        case 0:
          return result;
        case 1:
          result = "NULL";
          break;
        case 2:
          result = "UNDEF";
          break;
        case 3:
          goto LABEL_65;
        case 4:
          result = "WIDE_INTEGER";
          break;
        case 5:
          goto LABEL_64;
        case 6:
          result = "AGGREGATE";
          break;
        case 7:
          result = "STRING";
          break;
        case 8:
          result = "CSTRING";
          break;
        case 9:
          result = "CE_BINOP";
          break;
        case 10:
          result = "CE_CAST";
          break;
        case 11:
          result = "CE_GEP";
          break;
        case 12:
          result = "CE_SELECT";
          break;
        case 13:
          result = "CE_EXTRACTELT";
          break;
        case 14:
          result = "CE_INSERTELT";
          break;
        case 15:
          result = "CE_SHUFFLEVEC";
          break;
        case 16:
          result = "CE_CMP";
          break;
        case 18:
          result = "CE_SHUFVEC_EX";
          break;
        case 19:
          result = "CE_INBOUNDS_GEP";
          break;
        case 20:
          result = "CST_CODE_BLOCKADDRESS";
          break;
        case 21:
          result = "DATA";
          break;
        case 24:
          result = "CE_UNOP";
          break;
        case 26:
          result = "DSO_LOCAL_EQUIVALENT";
          break;
        case 28:
          result = "NO_CFI_VALUE";
          break;
        case 29:
          result = "INLINEASM";
          break;
        default:
          goto LABEL_61;
      }
      return result;
    case 0xCu:
      v16 = a1 - 1;
      result = "DECLAREBLOCKS";
      switch(v16)
      {
        case 0:
          return result;
        case 1:
          result = "INST_BINOP";
          break;
        case 2:
          result = "INST_CAST";
          break;
        case 3:
          result = "INST_GEP_OLD";
          break;
        case 4:
          result = "INST_SELECT";
          break;
        case 5:
          result = "INST_EXTRACTELT";
          break;
        case 6:
          result = "INST_INSERTELT";
          break;
        case 7:
          result = "INST_SHUFFLEVEC";
          break;
        case 8:
          result = "INST_CMP";
          break;
        case 9:
          result = "INST_RET";
          break;
        case 10:
          result = "INST_BR";
          break;
        case 11:
          result = "INST_SWITCH";
          break;
        case 12:
          result = "INST_INVOKE";
          break;
        case 14:
          result = "INST_UNREACHABLE";
          break;
        case 15:
          result = "INST_PHI";
          break;
        case 18:
          result = "INST_ALLOCA";
          break;
        case 19:
          result = "INST_LOAD";
          break;
        case 22:
          result = "INST_VAARG";
          break;
        case 25:
          result = "INST_EXTRACTVAL";
          break;
        case 26:
          result = "INST_INSERTVAL";
          break;
        case 27:
          result = "INST_CMP2";
          break;
        case 28:
          result = "INST_VSELECT";
          break;
        case 29:
          result = "INST_INBOUNDS_GEP_OLD";
          break;
        case 32:
          result = "DEBUG_LOC_AGAIN";
          break;
        case 33:
          result = "INST_CALL";
          break;
        case 34:
          result = "DEBUG_LOC";
          break;
        case 35:
          result = "INST_FENCE";
          break;
        case 40:
          result = "INST_LOADATOMIC";
          break;
        case 42:
          result = "INST_GEP";
          break;
        case 43:
          result = "INST_STORE";
          break;
        case 44:
          result = "INST_STOREATOMIC";
          break;
        case 45:
          result = "INST_CMPXCHG";
          break;
        case 47:
          result = "INST_CLEANUPRET";
          break;
        case 48:
          result = "INST_CATCHRET";
          break;
        case 49:
          result = "INST_CATCHPAD";
          break;
        case 54:
          result = "OPERAND_BUNDLE";
          break;
        case 55:
          result = "INST_UNOP";
          break;
        case 56:
          result = "INST_CALLBR";
          break;
        case 58:
          result = "INST_ATOMICRMW";
          break;
        case 59:
          result = "BLOCKADDR_USERS";
          break;
        default:
          goto LABEL_61;
      }
      return result;
    case 0xDu:
      v17 = "STRING";
      v18 = a1 == 2;
      v19 = "EPOCH";
      goto LABEL_50;
    case 0xEu:
      v20 = a1 - 1;
      result = "ENTRY";
      switch(v20)
      {
        case 0:
          return result;
        case 1:
          result = "BBENTRY";
          break;
        case 2:
          result = "FNENTRY";
          break;
        case 4:
          result = "COMBINED_ENTRY";
          break;
        default:
          goto LABEL_61;
      }
      return result;
    case 0xFu:
      v21 = a1 - 1;
      result = "STRING_OLD";
      switch(v21)
      {
        case 0:
          return result;
        case 1:
          result = "VALUE";
          break;
        case 2:
          result = "NODE";
          break;
        case 3:
          result = "NAME";
          break;
        case 4:
          result = "DISTINCT_NODE";
          break;
        case 5:
          result = "KIND";
          break;
        case 6:
          result = "LOCATION";
          break;
        case 7:
          result = "OLD_NODE";
          break;
        case 8:
          result = "OLD_FN_NODE";
          break;
        case 9:
          result = "NAMED_NODE";
          break;
        case 11:
          result = "GENERIC_DEBUG";
          break;
        case 12:
          result = "SUBRANGE";
          break;
        case 13:
          result = "ENUMERATOR";
          break;
        case 14:
          result = "BASIC_TYPE";
          break;
        case 15:
          result = "FILE";
          break;
        case 16:
          result = "DERIVED_TYPE";
          break;
        case 17:
          result = "COMPOSITE_TYPE";
          break;
        case 18:
          result = "SUBROUTINE_TYPE";
          break;
        case 19:
          result = "COMPILE_UNIT";
          break;
        case 20:
          result = "SUBPROGRAM";
          break;
        case 21:
          result = "LEXICAL_BLOCK";
          break;
        case 22:
          result = "LEXICAL_BLOCK_FILE";
          break;
        case 23:
          result = "NAMESPACE";
          break;
        case 24:
          result = "TEMPLATE_TYPE";
          break;
        case 25:
          result = "TEMPLATE_VALUE";
          break;
        case 26:
          result = "GLOBAL_VAR";
          break;
        case 27:
          result = "LOCAL_VAR";
          break;
        case 28:
          result = "EXPRESSION";
          break;
        case 29:
          result = "OBJC_PROPERTY";
          break;
        case 30:
          result = "IMPORTED_ENTITY";
          break;
        case 31:
          result = "MODULE";
          break;
        case 32:
          result = "MACRO";
          break;
        case 33:
          result = "MACRO_FILE";
          break;
        case 34:
          result = "STRINGS";
          break;
        case 35:
          result = "GLOBAL_DECL_ATTACHMENT";
          break;
        case 36:
          result = "GLOBAL_VAR_EXPR";
          break;
        case 37:
          result = "INDEX_OFFSET";
          break;
        case 38:
          result = "INDEX";
          break;
        case 45:
          result = "ARG_LIST";
          break;
        default:
          goto LABEL_61;
      }
      return result;
    case 0x10u:
      v12 = a1 == 11;
      v13 = "ATTACHMENT";
      goto LABEL_57;
    case 0x11u:
      v22 = a1 - 1;
      result = "NUMENTRY";
      switch(v22)
      {
        case 0:
          return result;
        case 1:
          result = "VOID";
          break;
        case 2:
LABEL_64:
          result = "FLOAT";
          break;
        case 3:
          result = "DOUBLE";
          break;
        case 4:
          result = "LABEL";
          break;
        case 5:
          result = "OPAQUE";
          break;
        case 6:
LABEL_65:
          result = "INTEGER";
          break;
        case 7:
          result = "POINTER";
          break;
        case 9:
          result = "HALF";
          break;
        case 10:
          result = "ARRAY";
          break;
        case 11:
          result = "VECTOR";
          break;
        case 12:
          result = "X86_FP80";
          break;
        case 13:
          result = "FP128";
          break;
        case 14:
          result = "PPC_FP128";
          break;
        case 15:
          result = "METADATA";
          break;
        case 16:
          result = "X86_MMX";
          break;
        case 17:
          result = "STRUCT_ANON";
          break;
        case 18:
          result = "STRUCT_NAME";
          break;
        case 19:
          result = "STRUCT_NAMED";
          break;
        case 20:
          result = "FUNCTION";
          break;
        case 21:
          result = "TOKEN";
          break;
        case 22:
          result = "BFLOAT";
          break;
        default:
          return 0;
      }
      return result;
    case 0x12u:
      v17 = "USELIST_CODE_DEFAULT";
      v18 = a1 == 2;
      v19 = "USELIST_CODE_BB";
      goto LABEL_50;
    case 0x13u:
      v17 = "ENTRY";
      v18 = a1 == 2;
      v19 = "HASH";
LABEL_50:
      if (!v18)
        v19 = 0;
      if (a1 == 1)
        return v17;
      else
        return v19;
    case 0x14u:
    case 0x18u:
      v11 = a1 - 1;
      result = "PERMODULE";
      switch(v11)
      {
        case 0:
          return result;
        case 1:
          result = "PERMODULE_PROFILE";
          break;
        case 2:
          result = "PERMODULE_GLOBALVAR_INIT_REFS";
          break;
        case 3:
          result = "COMBINED";
          break;
        case 4:
          result = "COMBINED_PROFILE";
          break;
        case 5:
          result = "COMBINED_GLOBALVAR_INIT_REFS";
          break;
        case 6:
          result = "ALIAS";
          break;
        case 7:
          result = "COMBINED_ALIAS";
          break;
        case 8:
          result = "COMBINED_ORIGINAL_NAME";
          break;
        case 9:
          result = "VERSION";
          break;
        case 10:
          result = "TYPE_TESTS";
          break;
        case 11:
          result = "TYPE_TEST_ASSUME_VCALLS";
          break;
        case 12:
          result = "TYPE_CHECKED_LOAD_VCALLS";
          break;
        case 13:
          result = "TYPE_TEST_ASSUME_CONST_VCALL";
          break;
        case 14:
          result = "TYPE_CHECKED_LOAD_CONST_VCALL";
          break;
        case 15:
          result = "VALUE_GUID";
          break;
        case 16:
          result = "CFI_FUNCTION_DEFS";
          break;
        case 17:
          result = "CFI_FUNCTION_DECLS";
          break;
        case 18:
          result = "PERMODULE_RELBF";
          break;
        case 19:
          result = "FLAGS";
          break;
        case 20:
          result = "TYPE_ID";
          break;
        case 21:
          result = "TYPE_ID_METADATA";
          break;
        case 22:
          result = "PERMODULE_VTABLE_GLOBALVAR_INIT_REFS";
          break;
        case 23:
          result = "BLOCK_COUNT";
          break;
        case 24:
          result = "PARAM_ACCESS";
          break;
        default:
LABEL_61:
          result = 0;
          break;
      }
      return result;
    case 0x15u:
      v12 = a1 == 1;
      v13 = "OPERAND_BUNDLE_TAG";
      goto LABEL_57;
    case 0x16u:
      v12 = a1 == 6;
      v13 = "KIND";
      goto LABEL_57;
    case 0x17u:
    case 0x19u:
      v12 = a1 == 1;
      v13 = "BLOB";
LABEL_57:
      if (v12)
        result = v13;
      else
        result = 0;
      break;
    default:
      return 0;
  }
  return result;
}

void sub_1C4FF7B90(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  const std::error_category *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const std::error_category *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    if (!*(_DWORD *)(a1 + 32) && *(_QWORD *)(a1 + 8) <= *(_QWORD *)(a1 + 16))
      goto LABEL_22;
    sub_1C4FF7E04(a1, *(_DWORD *)(a1 + 36), (uint64_t)&v25);
    if ((v26 & 1) != 0)
      goto LABEL_35;
    if ((_DWORD)v25 != 2)
      break;
    if ((a2 & 2) != 0)
      goto LABEL_15;
    llvm::BitstreamCursor::ReadAbbrevRecord((llvm::BitstreamCursor *)a1, &v25);
    v6 = v25;
    if (v25)
      goto LABEL_8;
  }
  if ((_DWORD)v25 == 1)
  {
    sub_1C4FF7E04(a1, 8u, (uint64_t)&v25);
    if ((v26 & 1) != 0)
    {
LABEL_35:
      v6 = v25;
    }
    else
    {
      if ((v25 & 0x80) == 0)
      {
        v13 = v25;
LABEL_19:
        v6 = (v13 << 32) | 2;
        goto LABEL_20;
      }
      v21 = 0;
      LODWORD(v13) = v25 & 0x7F;
      while (v21 < 0x19)
      {
        sub_1C4FF7E04(a1, 8u, (uint64_t)&v25);
        if ((v26 & 1) != 0)
          goto LABEL_35;
        v13 = ((v25 & 0x7F) << (v21 + 7)) | v13;
        v21 += 7;
        if ((v25 & 0x80) == 0)
          goto LABEL_19;
      }
      v22 = std::generic_category();
      v25 = 92;
      v26 = v22;
      v24 = "Unterminated VBR";
      sub_1C5DF1730((_BYTE **)&v24, &v25, &v23);
      v6 = v23;
    }
LABEL_8:
    v7 = *(_BYTE *)(a3 + 8) | 1;
LABEL_21:
    *(_BYTE *)(a3 + 8) = v7;
    goto LABEL_29;
  }
  if ((_DWORD)v25)
  {
LABEL_15:
    v6 = (v25 << 32) | 3;
LABEL_20:
    v7 = *(_BYTE *)(a3 + 8) & 0xFE;
    goto LABEL_21;
  }
  if ((a2 & 1) == 0)
  {
    v8 = *(unsigned int *)(a1 + 72);
    if (!(_DWORD)v8)
    {
LABEL_22:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = 0;
      return;
    }
    v9 = *(_DWORD *)(a1 + 32);
    v10 = v9 >= 0x20;
    v11 = v9 - 32;
    if (v10)
    {
      *(_QWORD *)(a1 + 24) >>= v11;
      v12 = 32;
    }
    else
    {
      v12 = 0;
    }
    v15 = (void **)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 32) = v12;
    v16 = *(_QWORD *)(a1 + 64) + 32 * v8;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v16 - 32);
    if (v14)
    {
      sub_1C4FF80DC((uint64_t *)(a1 + 40));
      operator delete(*v15);
      *v15 = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v16 - 24);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v16 - 8);
    *(_QWORD *)(v16 - 24) = 0;
    *(_QWORD *)(v16 - 16) = 0;
    *(_QWORD *)(v16 - 8) = 0;
    v17 = (*(_DWORD *)(a1 + 72) - 1);
    *(_DWORD *)(a1 + 72) = v17;
    v18 = *(_QWORD *)(a1 + 64) + 32 * v17;
    v20 = *(_QWORD *)(v18 + 8);
    v19 = (uint64_t *)(v18 + 8);
    if (v20)
    {
      sub_1C4FF80DC(v19);
      operator delete((void *)*v19);
    }
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  v6 = 1;
LABEL_29:
  *(_QWORD *)a3 = v6;
}

void sub_1C4FF7E04(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const std::error_category *v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  void (**v22)(llvm::raw_ostream *__hidden);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void **p_p;
  void *__p;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  unint64_t v36;
  uint64_t v37;
  __int16 v38;

  v5 = *(_DWORD *)(a1 + 32);
  if (a2 <= v5)
  {
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v7 >> a2;
    *(_DWORD *)(a1 + 32) = v5 - a2;
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v7 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
    return;
  }
  if (v5)
    v6 = *(_QWORD *)(a1 + 24);
  else
    v6 = 0;
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = v9 - v8;
  if (v9 <= v8)
  {
    v20 = *(_QWORD *)(a1 + 8);
    v14 = std::generic_category();
    __p = 0;
    v32 = 0;
    v33 = 0;
    v23 = 0;
    v27 = 0;
    v28 = 0;
    v22 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v29 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    v21 = *(_QWORD *)(a1 + 16);
    v34 = (void **)&unk_1E813F0D8;
    v35 = "Unexpected end of file reading %u of %u bytes";
    v36 = v21;
    v37 = v20;
  }
  else
  {
    v11 = a2 - v5;
    v12 = (unint64_t *)(*(_QWORD *)a1 + v8);
    if (v9 < v8 + 8)
    {
      *(_QWORD *)(a1 + 24) = 0;
      if (v10)
      {
        v18 = 0;
        v13 = 0;
        do
        {
          v19 = *(unsigned __int8 *)v12;
          v12 = (unint64_t *)((char *)v12 + 1);
          v13 |= (unint64_t)v19 << (v18 & 0xF8);
          *(_QWORD *)(a1 + 24) = v13;
          v18 += 8;
        }
        while (8 * v10 != v18);
      }
      else
      {
        v13 = 0;
      }
    }
    else
    {
      v13 = *v12;
      *(_QWORD *)(a1 + 24) = *v12;
      v10 = 8;
    }
    *(_QWORD *)(a1 + 16) = v8 + v10;
    *(_DWORD *)(a1 + 32) = 8 * v10;
    if (8 * v10 >= v11)
    {
      *(_QWORD *)(a1 + 24) = v13 >> (a2 - v5);
      *(_DWORD *)(a1 + 32) = 8 * v10 - v11;
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = ((v13 & (0xFFFFFFFFFFFFFFFFLL >> (v5 - a2))) << v5) | v6;
      return;
    }
    v14 = std::generic_category();
    __p = 0;
    v32 = 0;
    v33 = 0;
    v23 = 0;
    v27 = 0;
    v28 = 0;
    v22 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v29 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    v15 = *(unsigned int *)(a1 + 32) | (unint64_t)(v11 << 32);
    v34 = (void **)&unk_1E813F0F8;
    v35 = "Unexpected end of file reading %u of %u bits";
    v36 = v15;
  }
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v22, (uint64_t)&v34);
  v16 = p_p;
  v17 = operator new();
  v38 = 260;
  v34 = v16;
  *(_QWORD *)v17 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v34, (_QWORD *)(v17 + 8));
  *(_QWORD *)(v17 + 32) = 5;
  *(_QWORD *)(v17 + 40) = v14;
  *(_BYTE *)(v17 + 48) = 1;
  v22 = off_1E81A6E70;
  if (v29 == 1 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8077774924);
  if (SHIBYTE(v33) < 0)
    operator delete(__p);
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v17;
}

void sub_1C4FF80DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  a1[1] = v2;
}

uint64_t sub_1C4FF8150(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void **v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void **v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v10 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v11 = 0;
          do
          {
            v12 = &v4[v11];
            *(_DWORD *)&v10[v11] = *(_DWORD *)&v4[v11];
            v13 = (void **)&v10[v11 + 8];
            if (*v13)
            {
              sub_1C4FF80DC((uint64_t *)&v10[v11 + 8]);
              operator delete(*v13);
              *v13 = 0;
              *(_QWORD *)&v10[v11 + 16] = 0;
              *(_QWORD *)&v10[v11 + 24] = 0;
            }
            *(_OWORD *)v13 = *(_OWORD *)(v12 + 8);
            *(_QWORD *)&v10[v11 + 24] = *((_QWORD *)v12 + 3);
            *((_QWORD *)v12 + 1) = 0;
            *((_QWORD *)v12 + 2) = 0;
            *((_QWORD *)v12 + 3) = 0;
            v11 += 32;
          }
          while (v12 + 32 != &v4[32 * v5]);
          v6 = *(unsigned int *)(a1 + 8);
          v14 = &v10[v11];
          v10 = *(char **)a1;
        }
        else
        {
          v14 = *(char **)a1;
        }
        v15 = &v10[32 * v6];
        if (v15 != v14)
        {
          v16 = (uint64_t *)(v15 - 24);
          do
          {
            if (*v16)
            {
              sub_1C4FF80DC(v16);
              operator delete((void *)*v16);
            }
            v17 = v16 - 1;
            v16 -= 4;
          }
          while (v17 != (uint64_t *)v14);
        }
        goto LABEL_30;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        sub_1C4FF8374(a1);
        sub_1C61D04D4(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[32 * v6];
        v8 = *(char **)a1;
        do
        {
          *(_DWORD *)v8 = *(_DWORD *)v4;
          v9 = (void **)(v8 + 8);
          if (*((_QWORD *)v8 + 1))
          {
            sub_1C4FF80DC((uint64_t *)v8 + 1);
            operator delete(*v9);
            *v9 = 0;
            *((_QWORD *)v8 + 2) = 0;
            *((_QWORD *)v8 + 3) = 0;
          }
          *(_OWORD *)(v8 + 8) = *(_OWORD *)(v4 + 8);
          *((_QWORD *)v8 + 3) = *((_QWORD *)v4 + 3);
          *((_QWORD *)v4 + 1) = 0;
          *((_QWORD *)v4 + 2) = 0;
          *((_QWORD *)v4 + 3) = 0;
          v8 += 32;
          v4 += 32;
        }
        while (v4 != v7);
        goto LABEL_27;
      }
      v6 = 0;
LABEL_27:
      v18 = *(unsigned int *)(a2 + 8);
      if (v6 != v18)
      {
        v19 = *(_QWORD *)a2 + 32 * v18;
        v20 = *(_QWORD *)a1 + 32 * v6;
        v21 = *(_QWORD *)a2 + 32 * v6;
        do
        {
          *(_DWORD *)v20 = *(_DWORD *)v21;
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)(v20 + 24) = 0;
          *(_QWORD *)(v20 + 8) = 0;
          *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 8);
          *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)(v21 + 24) = 0;
          v21 += 32;
          v20 += 32;
        }
        while (v21 != v19);
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = v5;
      sub_1C4FF8374(a2);
      return a1;
    }
    sub_1C61D0440((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_1C4FF8374(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(result + 8);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)result - 24;
    v3 = 32 * v1;
    do
    {
      if (*(_QWORD *)(v2 + v3))
      {
        v6 = v2;
        v7 = result;
        v4 = (void **)(v2 + v3);
        v5 = v3;
        sub_1C4FF80DC((uint64_t *)(v2 + v3));
        operator delete(*v4);
        v3 = v5;
        v2 = v6;
        result = v7;
      }
      v3 -= 32;
    }
    while (v3);
  }
  *(_DWORD *)(result + 8) = 0;
  return result;
}

_QWORD *sub_1C4FF83E8(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      abort();
    v7 = result;
    result = operator new(16 * a4);
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * a4];
    while (a2 != a3)
    {
      v8 = a2[1];
      *result = *a2;
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v7[1] = result;
  }
  return result;
}

uint64_t sub_1C4FF8474(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        sub_1C4FF85BC(*(_QWORD *)a2, *(_QWORD *)a2 + 32 * v4, *(_QWORD *)a1);
        v7 = v6;
        v8 = *(_QWORD *)a1;
        v5 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v8 = *(_QWORD *)a1;
        v7 = *(_QWORD *)a1;
      }
      v9 = v8 + 32 * v5;
      if (v9 != v7)
      {
        v10 = (uint64_t *)(v9 - 24);
        do
        {
          if (*v10)
          {
            sub_1C4FF80DC(v10);
            operator delete((void *)*v10);
          }
          v11 = v10 - 1;
          v10 -= 4;
        }
        while (v11 != (uint64_t *)v7);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      sub_1C4FF8374(a1);
      sub_1C61D04D4(a1, v4);
    }
    else if ((_DWORD)v5)
    {
      sub_1C4FF85BC(*(_QWORD *)a2, *(_QWORD *)a2 + 32 * v5, *(_QWORD *)a1);
      goto LABEL_17;
    }
    v5 = 0;
LABEL_17:
    v12 = *(unsigned int *)(a2 + 8);
    if (v5 != v12)
    {
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)a2 + 32 * v12;
      v15 = *(_QWORD *)a1 + 32 * v5;
      v16 = v13 + 32 * v5;
      do
      {
        *(_DWORD *)v15 = *(_DWORD *)v16;
        *(_QWORD *)(v15 + 16) = 0;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 8) = 0;
        sub_1C4FF83E8((_QWORD *)(v15 + 8), *(_QWORD **)(v16 + 8), *(_QWORD **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 4);
        v16 += 32;
        v15 += 32;
      }
      while (v16 != v14);
    }
LABEL_20:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1C4FF85BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v4;
      if (v4 != a3)
        sub_1C4FF8630((uint64_t *)(a3 + 8), *(uint64_t **)(v4 + 8), *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 4);
      v4 += 32;
      a3 += 32;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1C4FF8630(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v6 = a2;
  v8 = a1[2];
  v9 = (char *)*a1;
  if (a4 <= (v8 - *a1) >> 4)
  {
    v16 = (char *)a1[1];
    v17 = (v16 - v9) >> 4;
    if (v17 >= a4)
    {
      if (a2 == a3)
      {
        v24 = *a1;
      }
      else
      {
        v24 = *a1;
        do
        {
          sub_1C4D82DC0(v9, v6);
          v6 += 2;
          v9 += 16;
          v24 += 16;
        }
        while (v6 != a3);
        v16 = (char *)a1[1];
      }
      while (v16 != (char *)v24)
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)v16 - 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v16 -= 16;
      }
      a1[1] = v24;
    }
    else
    {
      v18 = &a2[2 * v17];
      if (v16 != v9)
      {
        v19 = 16 * v17;
        do
        {
          sub_1C4D82DC0(v9, v6);
          v6 += 2;
          v9 += 16;
          v19 -= 16;
        }
        while (v19);
        v9 = (char *)a1[1];
      }
      v20 = v9;
      if (v18 != a3)
      {
        v20 = v9;
        do
        {
          v21 = v18[1];
          *v20 = *v18;
          v20[1] = v21;
          if (v21)
          {
            v22 = (unint64_t *)(v21 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v18 += 2;
          v20 += 2;
        }
        while (v18 != a3);
      }
      a1[1] = (uint64_t)v20;
    }
  }
  else
  {
    if (v9)
    {
      sub_1C4FF80DC(a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      goto LABEL_43;
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60)
LABEL_43:
      abort();
    v12 = operator new(16 * v11);
    *a1 = (uint64_t)v12;
    a1[1] = (uint64_t)v12;
    a1[2] = (uint64_t)&v12[2 * v11];
    while (v6 != a3)
    {
      v13 = v6[1];
      *v12 = *v6;
      v12[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v6 += 2;
      v12 += 2;
    }
    a1[1] = (uint64_t)v12;
  }
}

void sub_1C4FF8834(void **a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v5;

  v1 = *a1;
  if (*a1)
  {
    v5 = *a1;
    v2 = (uint64_t)a1[1];
    v3 = v1;
    if ((void *)v2 != v1)
    {
      do
        v2 = sub_1C4FF88A8(v2 - 80);
      while ((void *)v2 != v5);
      v3 = *a1;
    }
    a1[1] = v5;
    operator delete(v3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1C4FF88A8(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  sub_1C4FF890C(&v3);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(_QWORD *)(a1 + 8))
  {
    sub_1C4FF80DC((uint64_t *)(a1 + 8));
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1C4FF890C(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C4FF8984(void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void **v8;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 72;
      do
      {
        v8 = (void **)(v6 + 48);
        sub_1C4FF890C(&v8);
        if (*(char *)(v6 + 47) < 0)
          operator delete(*(void **)(v6 + 24));
        if (*(_QWORD *)v6)
        {
          sub_1C4FF80DC((uint64_t *)v6);
          operator delete(*(void **)v6);
        }
        v7 = (void *)(v6 - 8);
        v6 -= 80;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **sub_1C4FF8A28(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = v2 - 24;
    v6 = 32 * v3;
    do
    {
      if (*(_QWORD *)&v5[v6])
      {
        sub_1C4FF80DC((uint64_t *)&v5[v6]);
        operator delete(*(void **)&v5[v6]);
      }
      v6 -= 32;
    }
    while (v6);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C4FF8AA4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1C4FF8AE4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

unsigned int *sub_1C4FF8B20(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    v7 = *(a2 - 2);
    v8 = *result;
    if (v7 < *result || v8 >= v7 && *(a2 - 1) < result[1])
    {
      *result = v7;
      *(a2 - 2) = v8;
      v9 = result[1];
      result[1] = *(a2 - 1);
      *(a2 - 1) = v9;
    }
    return result;
  }
  if ((uint64_t)a3 > 0)
  {
    v12 = a4;
    v13 = a3 >> 1;
    v14 = &result[2 * (a3 >> 1)];
    v15 = a3 >> 1;
    if ((uint64_t)a3 <= a5)
    {
      sub_1C4FF8DF0(result, v14, v15, a4);
      v28 = &v12[2 * v13];
      result = sub_1C4FF8DF0(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v28);
      v29 = &v12[2 * a3];
      v30 = v28;
      while (v30 != v29)
      {
        v31 = *v30;
        v32 = *v12;
        if (*v30 >= *v12 && (v32 < v31 || v30[1] >= v12[1]))
        {
          *v6 = v32;
          v6[1] = v12[1];
          v12 += 2;
        }
        else
        {
          *v6 = v31;
          v6[1] = v30[1];
          v30 += 2;
        }
        v6 += 2;
        if (v12 == v28)
        {
          if (v30 != v29)
          {
            v33 = 0;
            do
            {
              v34 = &v30[v33];
              v35 = &v6[v33];
              *v35 = v30[v33];
              v35[1] = v30[v33 + 1];
              v33 += 2;
            }
            while (v34 + 2 != v29);
          }
          return result;
        }
      }
      if (v12 != v28)
      {
        v36 = 0;
        do
        {
          v37 = &v12[v36];
          v38 = &v6[v36];
          *v38 = v12[v36];
          v38[1] = v12[v36 + 1];
          v36 += 2;
        }
        while (v37 + 2 != v28);
      }
    }
    else
    {
      sub_1C4FF8B20(result, v14, v15, a4, a5);
      sub_1C4FF8B20(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v12, a5);
      return (unsigned int *)sub_1C4FF9068((char *)v6, (char *)&v6[2 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v12, a5);
    }
    return result;
  }
  if (result == a2)
    return result;
  v16 = result + 2;
  if (result + 2 == a2)
    return result;
  v17 = 0;
  v18 = result;
  do
  {
    v19 = v18;
    v18 = v16;
    v20 = *v16;
    v21 = *v19;
    if (v20 >= *v19 && (v21 < v20 || v19[3] >= v19[1]))
      goto LABEL_26;
    v22 = *v18;
    v23 = v18[1];
    *v18 = v21;
    v18[1] = v19[1];
    if (v19 == result)
    {
LABEL_24:
      v19 = result;
      goto LABEL_25;
    }
    v24 = v17;
    while (1)
    {
      v25 = *(unsigned int *)((char *)result + v24 - 8);
      if (v25 <= v22)
        break;
      v26 = *(unsigned int *)((char *)result + v24 - 4);
LABEL_23:
      v19 -= 2;
      v27 = (unsigned int *)((char *)result + v24);
      *v27 = v25;
      v27[1] = v26;
      v24 -= 8;
      if (!v24)
        goto LABEL_24;
    }
    if (v25 < v22)
      goto LABEL_25;
    v26 = *(unsigned int *)((char *)result + v24 - 4);
    if (v26 > v23)
      goto LABEL_23;
    v19 = (unsigned int *)((char *)result + v24);
LABEL_25:
    *v19 = v22;
    v19[1] = v23;
LABEL_26:
    v16 = v18 + 2;
    v17 += 8;
  }
  while (v18 + 2 != a2);
  return result;
}

unsigned int *sub_1C4FF8DF0(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4)
{
  unsigned int *v4;
  uint64_t *v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  if (!a3)
    return result;
  v4 = a4;
  v6 = (uint64_t *)result;
  if (a3 == 1)
  {
    v8 = result;
LABEL_31:
    *(_QWORD *)v4 = *(_QWORD *)v8;
    return result;
  }
  if (a3 == 2)
  {
    v8 = a2 - 2;
    v9 = *(a2 - 2);
    if (v9 < *result || *result >= v9 && *(a2 - 1) < result[1])
    {
      v10 = a2 - 2;
      v8 = result;
    }
    else
    {
      v10 = result;
    }
    *(_QWORD *)a4 = *(_QWORD *)v10;
    v4 = a4 + 2;
    goto LABEL_31;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (result == a2)
      return result;
    v11 = (uint64_t *)(result + 2);
    *(_QWORD *)a4 = *(_QWORD *)result;
    if (result + 2 == a2)
      return result;
    v12 = 0;
    v13 = a4;
    v14 = a4;
    while (1)
    {
      v15 = v11;
      v17 = *v14;
      v14 += 2;
      v16 = v17;
      if (*(_DWORD *)v15 >= v17 && (v16 < *(_DWORD *)v15 || *((_DWORD *)v6 + 3) >= v13[1]))
      {
        *(_QWORD *)v14 = *v15;
        goto LABEL_25;
      }
      *((_QWORD *)v13 + 1) = *(_QWORD *)v13;
      v18 = a4;
      if (v13 == a4)
        goto LABEL_24;
      v19 = v12;
      while (1)
      {
        v20 = *(unsigned int *)((char *)a4 + v19 - 8);
        if (*(_DWORD *)v15 >= v20)
          break;
        v21 = *(unsigned int *)((char *)a4 + v19 - 4);
LABEL_18:
        v13 -= 2;
        v22 = (unsigned int *)((char *)a4 + v19);
        *v22 = v20;
        v22[1] = v21;
        v19 -= 8;
        if (!v19)
        {
          v18 = a4;
          goto LABEL_24;
        }
      }
      if (v20 >= *(_DWORD *)v15)
        break;
      v18 = v13;
LABEL_24:
      *v18 = *(_DWORD *)v15;
      v18[1] = *((_DWORD *)v6 + 3);
LABEL_25:
      v11 = v15 + 1;
      v12 += 8;
      v13 = v14;
      v6 = v15;
      if (v15 + 1 == (uint64_t *)a2)
        return result;
    }
    v18 = (unsigned int *)((char *)a4 + v19);
    v21 = *(unsigned int *)((char *)a4 + v19 - 4);
    if (*((_DWORD *)v6 + 3) >= v21)
      goto LABEL_24;
    goto LABEL_18;
  }
  v23 = (uint64_t *)&result[2 * (a3 >> 1)];
  sub_1C4FF8B20(result, v23, a3 >> 1, a4, a3 >> 1);
  result = (unsigned int *)sub_1C4FF8B20(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
  v24 = (unsigned int *)&v6[a3 >> 1];
  while (v24 != a2)
  {
    if (*v24 >= *(_DWORD *)v6 && (*(_DWORD *)v6 < *v24 || v24[1] >= *((_DWORD *)v6 + 1)))
    {
      v27 = *v6++;
      v25 = v27;
    }
    else
    {
      v26 = *(_QWORD *)v24;
      v24 += 2;
      v25 = v26;
    }
    *(_QWORD *)v4 = v25;
    v4 += 2;
    if (v6 == v23)
    {
      if (v24 != a2)
      {
        v28 = 0;
        do
        {
          *(_QWORD *)&v4[v28] = *(_QWORD *)&v24[v28];
          v28 += 2;
        }
        while (&v24[v28] != a2);
      }
      return result;
    }
  }
  if (v6 != v23)
  {
    v29 = 0;
    do
    {
      *(_QWORD *)&v4[v29 / 4] = v6[v29 / 8];
      v29 += 8;
    }
    while (&v6[v29 / 8] != v23);
  }
  return result;
}

char *sub_1C4FF9068(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unsigned int v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unsigned int v30;
  int v31;
  char *i;
  int v33;
  int v34;
  char *v35;
  char *v36;
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  unsigned int v45;
  unsigned int v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  int v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v9 = 0;
      v10 = *(_DWORD *)a2;
      v11 = -a4;
      while (1)
      {
        v12 = *(_DWORD *)&result[v9];
        if (v10 < v12 || v12 >= v10 && *((_DWORD *)a2 + 1) < *(_DWORD *)&result[v9 + 4])
          break;
        v9 += 8;
        if (__CFADD__(v11++, 1))
          return result;
      }
      v14 = &result[v9];
      if (-v11 >= a5)
      {
        if (v11 == -1)
        {
          v53 = &result[v9];
          *(_DWORD *)v53 = v10;
          *(_DWORD *)a2 = v12;
          v54 = *((_DWORD *)v53 + 1);
          *((_DWORD *)v53 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v54;
          return result;
        }
        if (v11 <= 0)
          v23 = -v11;
        else
          v23 = 1 - v11;
        v24 = v23 >> 1;
        v20 = &result[8 * (v23 >> 1) + v9];
        v17 = a3;
        if (a3 != a2)
        {
          v25 = (a3 - a2) >> 3;
          v26 = *(_DWORD *)v20;
          v17 = a2;
          do
          {
            v27 = v25 >> 1;
            v28 = &v17[8 * (v25 >> 1)];
            if (*(_DWORD *)v28 < v26 || v26 >= *(_DWORD *)v28 && *(_DWORD *)&v17[8 * v27 + 4] < *((_DWORD *)v20 + 1))
            {
              v17 = v28 + 8;
              v27 = v25 + ~v27;
            }
            v25 = v27;
          }
          while (v27);
        }
        v16 = (v17 - a2) >> 3;
      }
      else
      {
        if (a5 >= 0)
          v15 = a5;
        else
          v15 = a5 + 1;
        v16 = v15 >> 1;
        v17 = &a2[8 * (v15 >> 1)];
        if (v14 == a2)
        {
          v20 = a2;
        }
        else
        {
          v18 = (a2 - result - v9) >> 3;
          v19 = *(_DWORD *)v17;
          v20 = &result[v9];
          do
          {
            v21 = v18 >> 1;
            v22 = &v20[8 * (v18 >> 1)];
            if (v19 >= *(_DWORD *)v22 && (*(_DWORD *)v22 < v19 || *((_DWORD *)v17 + 1) >= *(_DWORD *)&v20[8 * v21 + 4]))
            {
              v20 = v22 + 8;
              v21 = v18 + ~v21;
            }
            v18 = v21;
          }
          while (v21);
        }
        v24 = (v20 - result - v9) >> 3;
      }
      v29 = v17;
      if (v20 != a2)
      {
        v29 = v20;
        if (a2 != v17)
        {
          v30 = *(_DWORD *)v20;
          *(_DWORD *)v20 = v10;
          *(_DWORD *)a2 = v30;
          v31 = *((_DWORD *)v20 + 1);
          *((_DWORD *)v20 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v31;
          v29 = v20 + 8;
          for (i = a2 + 8; i != v17; i += 8)
          {
            if (v29 == a2)
              a2 = i;
            v33 = *(_DWORD *)v29;
            *(_DWORD *)v29 = *(_DWORD *)i;
            *(_DWORD *)i = v33;
            v34 = *((_DWORD *)v29 + 1);
            *((_DWORD *)v29 + 1) = *((_DWORD *)i + 1);
            *((_DWORD *)i + 1) = v34;
            v29 += 8;
          }
          if (v29 != a2)
          {
            v35 = v29;
            v36 = a2;
            do
            {
              while (1)
              {
                v37 = *(_DWORD *)v35;
                *(_DWORD *)v35 = *(_DWORD *)v36;
                *(_DWORD *)v36 = v37;
                v38 = *((_DWORD *)v35 + 1);
                *((_DWORD *)v35 + 1) = *((_DWORD *)v36 + 1);
                *((_DWORD *)v36 + 1) = v38;
                v35 += 8;
                v36 += 8;
                if (v36 == v17)
                  break;
                if (v35 == a2)
                  a2 = v36;
              }
              v36 = a2;
            }
            while (v35 != a2);
          }
        }
      }
      a4 = -v24 - v11;
      v39 = a5 - v16;
      if (v24 + v16 >= a5 - (v24 + v16) - v11)
      {
        v41 = a6;
        sub_1C4FF9068(v29, v17);
        v17 = v20;
        v39 = v16;
        a4 = v24;
        a3 = v29;
      }
      else
      {
        v40 = a3;
        v41 = a6;
        sub_1C4FF9068(&result[v9], v20);
        a3 = v40;
        v14 = v29;
      }
      a5 = v39;
      result = v14;
      a2 = v17;
      a6 = v41;
      if (!v39)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        v48 = 0;
        do
        {
          *(_QWORD *)&a6[v48] = *(_QWORD *)&result[v48];
          v48 += 8;
        }
        while (&result[v48] != a2);
        if (v48)
        {
          v49 = &a6[v48];
          v50 = (uint64_t)&a6[v48 - 8];
          while (a2 != a3)
          {
            v51 = *(_DWORD *)a2;
            v52 = *(_DWORD *)a6;
            if (*(_DWORD *)a2 >= *(_DWORD *)a6 && (v52 < v51 || *((_DWORD *)a2 + 1) >= *((_DWORD *)a6 + 1)))
            {
              *(_DWORD *)result = v52;
              *((_DWORD *)result + 1) = *((_DWORD *)a6 + 1);
              a6 += 8;
            }
            else
            {
              *(_DWORD *)result = v51;
              *((_DWORD *)result + 1) = *((_DWORD *)a2 + 1);
              a2 += 8;
            }
            result += 8;
            if (v49 == a6)
              return result;
          }
          if (v49 != a6)
          {
            v57 = 0;
            do
            {
              v58 = &result[v57];
              v59 = &a6[v57];
              *(_DWORD *)v58 = *(_DWORD *)&a6[v57];
              *((_DWORD *)v58 + 1) = *(_DWORD *)&a6[v57 + 4];
              v57 += 8;
            }
            while ((char *)v50 != v59);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      v42 = 0;
      do
      {
        *(_QWORD *)&a6[v42] = *(_QWORD *)&a2[v42];
        v42 += 8;
      }
      while (&a2[v42] != a3);
      if (v42)
      {
        v43 = &a6[v42];
        v44 = a3 - 4;
        while (a2 != result)
        {
          v45 = *((_DWORD *)a2 - 2);
          v46 = *((_DWORD *)v43 - 2);
          if (v46 >= v45 && (v45 < v46 || *((_DWORD *)v43 - 1) >= *((_DWORD *)a2 - 1)))
          {
            v45 = *((_DWORD *)v43 - 2);
            v47 = v43;
            v43 -= 8;
          }
          else
          {
            v47 = a2;
            a2 -= 8;
          }
          *((_DWORD *)v44 - 1) = v45;
          *(_DWORD *)v44 = *((_DWORD *)v47 - 1);
          v44 -= 8;
          if (v43 == a6)
            return result;
        }
        if (v43 != a6)
        {
          v55 = 0;
          do
          {
            v56 = &v44[v55];
            *((_DWORD *)v56 - 1) = *(_DWORD *)&v43[v55 - 8];
            *(_DWORD *)v56 = *(_DWORD *)&v43[v55 - 4];
            v55 -= 8;
          }
          while (&v43[v55] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t LLVMParseBitcode(_QWORD *a1, char **a2, char **a3)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return LLVMParseBitcodeInContext(qword_1EF8F7038[0], a1, a2, a3);
}

uint64_t LLVMParseBitcodeInContext(uint64_t a1, _QWORD *a2, char **a3, char **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void **v19;
  void **v21;
  void *__p[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v8 = a2[2] - v7;
  v9 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  *(_QWORD *)&v24 = v7;
  *((_QWORD *)&v24 + 1) = v8;
  v25 = v9;
  v26 = v10;
  llvm::parseBitcodeFile(&v24, a1, (uint64_t)sub_1C4FF9C98, (uint64_t)__p, (uint64_t)&v32);
  v11 = v32;
  if ((v33 & 1) == 0 || (v32 = 0, !v11))
  {
    v17 = 0;
    v32 = 0;
    *a3 = v11;
    goto LABEL_28;
  }
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  v21 = __p;
  if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v11 + 48))(v11, &llvm::ErrorList::ID))
  {
    v12 = (uint64_t *)*((_QWORD *)v11 + 1);
    v13 = (uint64_t *)*((_QWORD *)v11 + 2);
    if (v12 == v13)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      do
      {
        v30 = v14;
        v15 = *v12;
        *v12 = 0;
        v28 = v15;
        sub_1C4FF9D28(&v29, &v28, (uint64_t *)&v21);
        sub_1C6174794(&v30, &v29, &v31);
        v14 = v31;
        v31 = 0;
        if (v29)
          (*(void (**)(char *))(*(_QWORD *)v29 + 8))(v29);
        v16 = v28;
        v28 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        if (v30)
          (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
        ++v12;
      }
      while (v12 != v13);
    }
    v27 = v14;
  }
  else
  {
    v31 = v11;
    sub_1C4FF9D28(&v27, &v31, (uint64_t *)&v21);
    v11 = v31;
    if (!v31)
      goto LABEL_20;
  }
  (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
LABEL_20:
  v18 = SHIBYTE(v23);
  if (a4)
  {
    if (v23 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    *a4 = strdup((const char *)v19);
  }
  *a3 = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  v17 = 1;
LABEL_28:
  sub_1C4FF9CA4((uint64_t)&v32);
  return v17;
}

BOOL LLVMParseBitcode2(_QWORD *a1, uint64_t *a2)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return LLVMParseBitcodeInContext2(qword_1EF8F7038[0], a1, a2);
}

BOOL LLVMParseBitcodeInContext2(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v6 = a2[2] - v5;
  v7 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v6;
  v13 = v7;
  v14 = v8;
  llvm::parseBitcodeFile(&v12, a1, (uint64_t)sub_1C4FF9C98, (uint64_t)&v11, (uint64_t)&v16);
  if ((v17 & 1) != 0)
  {
    v15 = v16;
    v16 = 0;
    v9 = llvm::errorToErrorCodeAndEmitErrors(a1, &v15);
    if (v15)
      (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
    sub_1C4FF9CA4((uint64_t)&v16);
    result = v9 != 0;
    if ((_DWORD)v9)
      v9 = 0;
  }
  else
  {
    v9 = (uint64_t)v16;
    v16 = 0;
    sub_1C4FF9CA4((uint64_t)&v16);
    std::system_category();
    result = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t LLVMGetBitcodeModuleInContext(uint64_t a1, const llvm::MemoryBuffer *a2, char **a3, char **a4)
{
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  void **v16;
  void *__p[2];
  uint64_t v18;
  const llvm::MemoryBuffer *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  llvm::getOwningLazyBitcodeModule(&v19, a1, 0, 0, (uint64_t)&v25);
  v6 = v25;
  if ((v26 & 1) == 0 || (v25 = 0, !v6))
  {
    v12 = 0;
    v25 = 0;
    *a3 = v6;
    goto LABEL_28;
  }
  __p[0] = 0;
  __p[1] = 0;
  v18 = 0;
  v16 = __p;
  if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v6 + 48))(v6, &llvm::ErrorList::ID))
  {
    v7 = (uint64_t *)*((_QWORD *)v6 + 1);
    v8 = (uint64_t *)*((_QWORD *)v6 + 2);
    if (v7 == v8)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        v23 = v9;
        v10 = *v7;
        *v7 = 0;
        v21 = v10;
        sub_1C4FF9D28(&v22, &v21, (uint64_t *)&v16);
        sub_1C6174794(&v23, &v22, &v24);
        v9 = v24;
        v24 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
        v11 = v21;
        v21 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        if (v23)
          (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
        ++v7;
      }
      while (v7 != v8);
    }
    v20 = v9;
  }
  else
  {
    v24 = v6;
    sub_1C4FF9D28(&v20, &v24, (uint64_t *)&v16);
    v6 = v24;
    if (!v24)
      goto LABEL_20;
  }
  (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
LABEL_20:
  v13 = SHIBYTE(v18);
  if (a4)
  {
    if (v18 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    *a4 = strdup((const char *)v14);
  }
  *a3 = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  v12 = 1;
LABEL_28:
  sub_1C4FF9CA4((uint64_t)&v25);
  return v12;
}

BOOL LLVMGetBitcodeModuleInContext2(uint64_t a1, const llvm::MemoryBuffer *a2, uint64_t *a3)
{
  uint64_t v5;
  _BOOL8 result;
  const llvm::MemoryBuffer *v7;
  char *v8;
  char *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  llvm::getOwningLazyBitcodeModule(&v7, a1, 0, 0, (uint64_t)&v9);
  if ((v10 & 1) != 0)
  {
    v8 = v9;
    v9 = 0;
    v5 = llvm::errorToErrorCodeAndEmitErrors(a1, &v8);
    if (v8)
      (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
    sub_1C4FF9CA4((uint64_t)&v9);
    result = v5 != 0;
    if ((_DWORD)v5)
      v5 = 0;
  }
  else
  {
    v5 = (uint64_t)v9;
    v9 = 0;
    sub_1C4FF9CA4((uint64_t)&v9);
    std::system_category();
    result = 0;
  }
  *a3 = v5;
  return result;
}

uint64_t LLVMGetBitcodeModule(const llvm::MemoryBuffer *a1, char **a2, char **a3)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return LLVMGetBitcodeModuleInContext(qword_1EF8F7038[0], a1, a2, a3);
}

BOOL LLVMGetBitcodeModule2(const llvm::MemoryBuffer *a1, uint64_t *a2)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return LLVMGetBitcodeModuleInContext2(qword_1EF8F7038[0], a1, a2);
}

void sub_1C4FF9C98(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1C4FF9CA4(uint64_t result)
{
  char v1;
  llvm::Module *v2;
  uint64_t v3;
  llvm::Module *v4;
  uint64_t v5;

  v1 = *(_BYTE *)(result + 8);
  v2 = *(llvm::Module **)result;
  *(_QWORD *)result = 0;
  if ((v1 & 1) != 0)
  {
    if (v2)
    {
      v3 = result;
      (*(void (**)(llvm::Module *))(*(_QWORD *)v2 + 8))(v2);
      return v3;
    }
  }
  else if (v2)
  {
    v5 = result;
    v4 = v2;
    llvm::Module::~Module(v2);
    MEMORY[0x1CAA32FC0](v4, 0x10B2C407FF26C1CLL);
    return v5;
  }
  return result;
}

uint64_t sub_1C4FF9D28(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  result = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  v7 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v7 + 24))(&v10, v7);
    v8 = *a3;
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    v9 = v10;
    *(_QWORD *)(v8 + 16) = v11;
    *(_OWORD *)v8 = v9;
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

uint64_t llvm::errorToErrorCodeAndEmitErrors(uint64_t a1, char **a2)
{
  char *v2;
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;

  v2 = *a2;
  LODWORD(v13[0]) = 0;
  if (v2)
  {
    v13[1] = std::system_category();
    v5 = *a2;
    *a2 = 0;
    v12[0] = v13;
    v12[1] = a1;
    if (v5)
    {
      if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v5 + 48))(v5, &llvm::ErrorList::ID))
      {
        v6 = (uint64_t *)*((_QWORD *)v5 + 1);
        v7 = (uint64_t *)*((_QWORD *)v5 + 2);
        if (v6 == v7)
        {
          v8 = 0;
        }
        else
        {
          v8 = 0;
          do
          {
            v17 = v8;
            v9 = *v6;
            *v6 = 0;
            v15 = v9;
            sub_1C5017CEC(&v16, &v15, (uint64_t)v12);
            sub_1C6174794(&v17, &v16, &v18);
            v8 = v18;
            v18 = 0;
            if (v16)
              (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
            v10 = v15;
            v15 = 0;
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            if (v17)
              (*(void (**)(char *))(*(_QWORD *)v17 + 8))(v17);
            ++v6;
          }
          while (v6 != v7);
        }
        v14 = v8;
        (*(void (**)(char *))(*(_QWORD *)v5 + 8))(v5);
      }
      else
      {
        v18 = v5;
        sub_1C5017CEC(&v14, &v18, (uint64_t)v12);
        if (v18)
          (*(void (**)(char *))(*(_QWORD *)v18 + 8))(v18);
      }
    }
    else
    {
      v14 = 0;
    }
  }
  else
  {
    std::system_category();
  }
  return v13[0];
}

void llvm::readWideAPInt(unint64_t *a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int *a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x800000000;
  sub_1C4765AA4((char *)&v16, a2, 0);
  v8 = (uint64_t *)v16;
  if (a2)
  {
    v9 = 8 * a2;
    v10 = (unint64_t *)v16;
    do
    {
      v12 = *a1++;
      v11 = v12;
      v13 = -(uint64_t)(v12 >> 1);
      if (v12 == 1)
        v13 = 0x8000000000000000;
      if ((v11 & 1) != 0)
        v14 = v13;
      else
        v14 = v11 >> 1;
      *v10++ = v14;
      v9 -= 8;
    }
    while (v9);
  }
  v15 = v17;
  a4[2] = a3;
  llvm::APInt::initFromArray(a4, v8, v15);
  if (v16 != v18)
    free(v16);
}

void llvm::getBitcodeModuleList(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;
  __int128 v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  llvm::getBitcodeFileContents((uint64_t)v5, (uint64_t)&v6);
  if ((v8 & 1) != 0)
  {
    v4 = v6;
    *(_BYTE *)(a2 + 24) |= 1u;
  }
  else
  {
    *(_BYTE *)(a2 + 24) &= ~1u;
    v4 = v6;
    *(_OWORD *)(a2 + 8) = v7;
  }
  *(_QWORD *)a2 = v4;
}

void llvm::getBitcodeFileContents(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *i;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  __int16 v56;
  unsigned int v57[2];
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  void *__p;
  char *v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  sub_1C4FFA6C8((uint64_t)&v59, *(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  if ((v65 & 1) != 0)
  {
    v42 = v59;
    v59 = 0;
    *(_BYTE *)(a2 + 56) |= 1u;
    *(_QWORD *)a2 = v42;
    goto LABEL_80;
  }
  v4 = 8 * v61 - v62;
  v5 = v4 >> 3;
  if ((v4 >> 3) + 8 < v60)
  {
    v6 = 0;
    v49 = 0;
    v51 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      sub_1C4FF7B90((uint64_t)&v59, 0, (uint64_t)v57);
      if ((v58 & 1) != 0)
      {
        v11 = *(_QWORD *)v57;
        *(_QWORD *)v57 = 0;
        goto LABEL_11;
      }
      if (v57[0] < 2)
        break;
      if (v57[0] != 2)
      {
        if (v57[0] != 3)
        {
          v12 = 0;
          goto LABEL_14;
        }
        llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v59, v57[1], (uint64_t)&v54);
        if ((BYTE8(v54) & 1) == 0)
          goto LABEL_45;
        goto LABEL_44;
      }
      if ((int)v57[1] > 22)
      {
        if (v57[1] == 23)
        {
          sub_1C4FFAAF8((uint64_t)&v54, (llvm::BitstreamCursor *)&v59, 23);
          if ((v55 & 1) != 0)
          {
            v25 = v54;
            *(_QWORD *)&v54 = 0;
            *(_BYTE *)(a2 + 56) |= 1u;
            *(_QWORD *)a2 = v25;
            v12 = 1;
          }
          else
          {
            for (i = v9; i != v10; i -= 64)
            {
              if (*((_QWORD *)i - 3))
                break;
              *((_OWORD *)i - 2) = v54;
            }
            v12 = 2;
            if (v7 && !v6)
            {
              v6 = *((_QWORD *)&v54 + 1);
              v51 = v54;
            }
          }
          if ((v55 & 1) != 0 && (_QWORD)v54)
            (*(void (**)(_QWORD))(*(_QWORD *)v54 + 8))(v54);
        }
        else
        {
          if (v57[1] != 25)
          {
LABEL_43:
            sub_1C4FF3F30((uint64_t)&v59, (uint64_t *)&v54);
LABEL_44:
            v11 = v54;
            if (!(_QWORD)v54)
            {
LABEL_45:
              v12 = 2;
              goto LABEL_14;
            }
LABEL_11:
            *(_BYTE *)(a2 + 56) |= 1u;
            *(_QWORD *)a2 = v11;
LABEL_13:
            v12 = 1;
            goto LABEL_14;
          }
          sub_1C4FFAAF8((uint64_t)&v54, (llvm::BitstreamCursor *)&v59, 25);
          if ((v55 & 1) != 0)
          {
            v11 = v54;
            goto LABEL_11;
          }
          v12 = 2;
          if (!v7)
          {
            v7 = *((_QWORD *)&v54 + 1);
            v8 = v54;
          }
        }
      }
      else
      {
        if (v57[1] == 8)
        {
          v14 = v7;
          v47 = v8;
          v48 = v6;
          v19 = v51;
          v20 = -1;
        }
        else
        {
          if (v57[1] != 13)
            goto LABEL_43;
          v14 = v7;
          v48 = v6;
          v15 = v61;
          v16 = v62;
          sub_1C4FF3F30((uint64_t)&v59, (uint64_t *)&v54);
          v17 = v54;
          if ((_QWORD)v54)
            goto LABEL_64;
          sub_1C4FF7B90((uint64_t)&v59, 0, (uint64_t)&v54);
          if ((BYTE8(v54) & 1) != 0)
          {
            v17 = v54;
LABEL_64:
            *(_BYTE *)(a2 + 56) |= 1u;
            *(_QWORD *)a2 = v17;
LABEL_65:
            v12 = 1;
LABEL_66:
            v6 = v48;
            v7 = v14;
            goto LABEL_14;
          }
          if ((_QWORD)v54 != 0x800000002)
          {
            *(_QWORD *)&v54 = "Malformed block";
            v56 = 259;
            sub_1C4FFAA54((llvm::Twine *)&v54, &v52);
            *(_BYTE *)(a2 + 56) |= 1u;
            *(_QWORD *)a2 = v52;
            v52 = 0;
            goto LABEL_65;
          }
          v47 = v8;
          v18 = v16;
          v19 = v51;
          v20 = 8 * v15 - ((v4 & 0xFFFFFFFFFFFFFFF8) + v18);
        }
        v46 = v20;
        v21 = v61;
        v22 = v62;
        sub_1C4FF3F30((uint64_t)&v59, (uint64_t *)&v54);
        v23 = v54;
        v51 = v19;
        if ((_QWORD)v54)
        {
          *(_BYTE *)(a2 + 56) |= 1u;
          *(_QWORD *)a2 = v23;
          v12 = 1;
LABEL_53:
          v8 = v47;
          goto LABEL_66;
        }
        v26 = 8 * v21 - ((v4 & 0xFFFFFFFFFFFFFFF8) + v22);
        v27 = ((8 * v61 - (unint64_t)v62) >> 3) - v5;
        v28 = v59 + v5;
        v29 = *(_QWORD *)(a1 + 16);
        v30 = *(_QWORD *)(a1 + 24);
        if (v9 < v49)
        {
          *(_QWORD *)v9 = v28;
          *((_QWORD *)v9 + 1) = v27;
          *((_QWORD *)v9 + 2) = v29;
          *((_QWORD *)v9 + 3) = v30;
          *((_QWORD *)v9 + 4) = 0;
          *((_QWORD *)v9 + 5) = 0;
          *((_QWORD *)v9 + 6) = v46;
          *((_QWORD *)v9 + 7) = v26;
          v9 += 64;
          v12 = 2;
          goto LABEL_53;
        }
        v31 = (v9 - v10) >> 6;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 58)
          abort();
        v7 = v14;
        if ((v49 - v10) >> 5 > v32)
          v32 = (v49 - v10) >> 5;
        if ((unint64_t)(v49 - v10) >= 0x7FFFFFFFFFFFFFC0)
          v33 = 0x3FFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
        {
          v45 = v28;
          v50 = *(_QWORD *)(a1 + 16);
          if (v33 >> 58)
            sub_1C4764EE4();
          v34 = v26;
          v44 = v33;
          v35 = (char *)operator new(v33 << 6);
          v33 = v44;
          v28 = v45;
          v26 = v34;
          v29 = v50;
        }
        else
        {
          v35 = 0;
        }
        v36 = &v35[64 * v31];
        *(_QWORD *)v36 = v28;
        *((_QWORD *)v36 + 1) = v27;
        *((_QWORD *)v36 + 2) = v29;
        *((_QWORD *)v36 + 3) = v30;
        *((_QWORD *)v36 + 4) = 0;
        *((_QWORD *)v36 + 5) = 0;
        *((_QWORD *)v36 + 6) = v46;
        *((_QWORD *)v36 + 7) = v26;
        if (v9 == v10)
        {
          v41 = v9;
          v10 = &v35[64 * v31];
          v6 = v48;
        }
        else
        {
          v37 = &v35[64 * v31];
          v6 = v48;
          do
          {
            v38 = *((_OWORD *)v9 - 4);
            v39 = *((_OWORD *)v9 - 3);
            v40 = *((_OWORD *)v9 - 1);
            *((_OWORD *)v37 - 2) = *((_OWORD *)v9 - 2);
            *((_OWORD *)v37 - 1) = v40;
            *((_OWORD *)v37 - 4) = v38;
            *((_OWORD *)v37 - 3) = v39;
            v37 -= 64;
            v9 -= 64;
          }
          while (v9 != v10);
          v41 = v10;
          v10 = v37;
        }
        v49 = &v35[64 * v33];
        v9 = v36 + 64;
        if (v41)
          operator delete(v41);
        v12 = 2;
        v8 = v47;
      }
LABEL_14:
      if ((v58 & 1) != 0)
      {
        v13 = *(_QWORD *)v57;
        *(_QWORD *)v57 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      if ((v12 | 2) != 2)
      {
        if (v10)
          operator delete(v10);
        goto LABEL_80;
      }
      v4 = 8 * v61 - v62;
      v5 = v4 >> 3;
      if ((v4 >> 3) + 8 >= v60)
        goto LABEL_79;
    }
    *(_QWORD *)&v54 = "Malformed block";
    v56 = 259;
    sub_1C4FFAA54((llvm::Twine *)&v54, &v53);
    *(_BYTE *)(a2 + 56) |= 1u;
    *(_QWORD *)a2 = v53;
    v53 = 0;
    goto LABEL_13;
  }
  v10 = 0;
  v9 = 0;
  v49 = 0;
  v51 = 0;
  v8 = 0;
  v7 = 0;
  v6 = 0;
LABEL_79:
  *(_BYTE *)(a2 + 56) &= ~1u;
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v49;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v51;
  *(_QWORD *)(a2 + 48) = v6;
LABEL_80:
  if ((v65 & 1) != 0)
  {
    v43 = v59;
    v59 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  else
  {
    sub_1C4FF8A28(&v64);
    if (__p)
    {
      sub_1C4FF80DC((uint64_t *)&__p);
      operator delete(__p);
    }
  }
}

void sub_1C4FFA6C8(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const std::error_category *v15;
  const char *v16;
  const std::error_category *v17;
  const char *v18;
  __int128 v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const std::error_category *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if ((a3 & 3) != 0)
  {
    *(_QWORD *)&v26 = "Invalid bitcode signature";
    LOWORD(v28) = 259;
    sub_1C4FFAA54((llvm::Twine *)&v26, &v22);
    *(_BYTE *)(a1 + 344) |= 1u;
    v4 = v22;
LABEL_3:
    *(_QWORD *)a1 = v4;
    return;
  }
  v5 = &a2[a3];
  if (a3 && *a2 == 222 && a2[1] == 192 && a2[2] == 23 && a2[3] == 11)
  {
    if ((a3 & 0xFFFFFFF0) == 0 || (v6 = *((unsigned int *)a2 + 2), v7 = *((unsigned int *)a2 + 3), v7 + v6 > a3))
    {
      *(_QWORD *)&v26 = "Invalid bitcode wrapper header";
      LOWORD(v28) = 259;
      sub_1C4FFAA54((llvm::Twine *)&v26, &v21);
      *(_BYTE *)(a1 + 344) |= 1u;
      v4 = v21;
      goto LABEL_3;
    }
    a2 += v6;
    v5 = &a2[v7];
  }
  *(_QWORD *)&v26 = a2;
  *((_QWORD *)&v26 + 1) = v5 - a2;
  v27 = 0uLL;
  v28 = 0x200000000;
  __p[0] = 0;
  __p[1] = 0;
  v30 = 0;
  v31 = (char *)&v33;
  v32 = 0x800000000;
  v34 = 0;
  if ((unint64_t)(v5 - a2) <= 3)
  {
    v24 = 92;
    v25 = std::generic_category();
    *(_QWORD *)&v37 = "file too small to contain bitcode header";
    sub_1C5DF1730((_BYTE **)&v37, &v24, &v20);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    LOWORD(v23) = 17218;
    while (1)
    {
      v10 = v8;
      v11 = *((char *)&v23 + v9);
      sub_1C4FF7E04((uint64_t)&v26, 8u, (uint64_t)&v37);
      if ((BYTE8(v37) & 1) != 0)
      {
        v14 = (const char *)v37;
LABEL_29:
        v20 = v14;
        goto LABEL_33;
      }
      if ((_QWORD)v37 != v11)
        break;
      v8 = 1;
      v9 = 1;
      if ((v10 & 1) != 0)
      {
        v12 = 0;
        v37 = xmmword_1C85F9810;
        while (1)
        {
          v13 = (const char *)*(unsigned int *)((char *)&v37 + v12);
          sub_1C4FF7E04((uint64_t)&v26, 4u, (uint64_t)&v35);
          if ((v36 & 1) != 0)
          {
            v14 = v35;
            goto LABEL_29;
          }
          if (v35 != v13)
            break;
          v12 += 4;
          if (v12 == 16)
            goto LABEL_35;
        }
        v17 = std::generic_category();
        v24 = 92;
        v25 = v17;
        v23 = "file doesn't start with bitcode header";
        sub_1C5DF1730((_BYTE **)&v23, &v24, &v20);
        if ((v36 & 1) != 0)
        {
          v16 = v35;
          v35 = 0;
          if (v16)
            goto LABEL_32;
        }
        goto LABEL_33;
      }
    }
    v15 = std::generic_category();
    v24 = 92;
    v25 = v15;
    v35 = "file doesn't start with bitcode header";
    sub_1C5DF1730((_BYTE **)&v35, &v24, &v20);
    if ((BYTE8(v37) & 1) != 0)
    {
      v16 = (const char *)v37;
      *(_QWORD *)&v37 = 0;
      if (v16)
LABEL_32:
        (*(void (**)(const char *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
LABEL_33:
  v18 = v20;
  if (v20)
  {
    *(_BYTE *)(a1 + 344) |= 1u;
    *(_QWORD *)a1 = v18;
  }
  else
  {
LABEL_35:
    *(_BYTE *)(a1 + 344) &= ~1u;
    *(_QWORD *)(a1 + 32) = v28;
    v19 = v27;
    *(_OWORD *)a1 = v26;
    *(_OWORD *)(a1 + 16) = v19;
    *(_DWORD *)(a1 + 36) = HIDWORD(v28);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 56) = v30;
    __p[1] = 0;
    v30 = 0;
    __p[0] = 0;
    *(_QWORD *)(a1 + 64) = a1 + 80;
    *(_QWORD *)(a1 + 72) = 0x800000000;
    if ((_DWORD)v32)
      sub_1C4FF8150(a1 + 64, (uint64_t)&v31);
    *(_QWORD *)(a1 + 336) = v34;
  }
  sub_1C4FF8A28(&v31);
  if (__p[0])
  {
    sub_1C4FF80DC((uint64_t *)__p);
    operator delete(__p[0]);
  }
}

void sub_1C4FFAA54(llvm::Twine *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v5;
  uint64_t v6;

  if (!atomic_load(qword_1EF8F6CB0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
  v5 = qword_1EF8F6CB0[0];
  v6 = operator new();
  *(_QWORD *)v6 = off_1E81A0C88;
  llvm::Twine::str(a1, (_QWORD *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = 1;
  *(_QWORD *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 48) = 1;
  *a2 = v6;
}

void sub_1C4FFAAF8(uint64_t a1, llvm::BitstreamCursor *a2, int a3)
{
  void *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  char v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19[2];
  _WORD v20[12];
  void *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::EnterSubBlock(a2, 0, a3, v19);
  v5 = v19[0];
  if (v19[0])
  {
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = *(unsigned __int8 *)(a1 + 16);
    do
    {
      sub_1C4FF7B90((uint64_t)a2, 0, (uint64_t)&v21);
      if ((v22 & 1) != 0)
      {
        v9 = 0;
        v10 = v21;
        v21 = 0;
LABEL_8:
        v8 |= 1u;
        *(_BYTE *)(a1 + 16) = v8;
        *(_QWORD *)a1 = v10;
      }
      else
      {
        switch((int)v21)
        {
          case 0:
            v19[0] = "Malformed block";
            v20[8] = 259;
            sub_1C4FFAA54((llvm::Twine *)v19, &v16);
            v9 = 0;
            v8 |= 1u;
            *(_BYTE *)(a1 + 16) = v8;
            *(_QWORD *)a1 = v16;
            v16 = 0;
            break;
          case 1:
            v9 = 0;
            v8 &= ~1u;
            *(_BYTE *)(a1 + 16) = v8;
            *(_QWORD *)a1 = v6;
            *(_QWORD *)(a1 + 8) = v7;
            break;
          case 2:
            sub_1C4FF3F30((uint64_t)a2, (uint64_t *)v19);
            v10 = v19[0];
            if (!v19[0])
              goto LABEL_19;
            v9 = 0;
            goto LABEL_8;
          case 3:
            v14 = 0;
            v15 = 0;
            v19[0] = v20;
            v19[1] = (void *)0x100000000;
            llvm::BitstreamCursor::readRecord((uint64_t)a2, SHIDWORD(v21), (uint64_t)v19, &v14, (uint64_t)&v17);
            v11 = v18;
            if ((v18 & 1) != 0)
            {
              v12 = v17;
              v8 |= 1u;
              *(_BYTE *)(a1 + 16) = v8;
              *(_QWORD *)a1 = v12;
            }
            else if ((_DWORD)v17 == 1)
            {
              v6 = v14;
              v7 = v15;
            }
            if (v19[0] != v20)
              free(v19[0]);
            if ((v11 & 1) == 0)
              goto LABEL_19;
            v9 = 0;
            break;
          default:
LABEL_19:
            v9 = 1;
            break;
        }
      }
      if ((v22 & 1) != 0)
      {
        v13 = v21;
        v21 = 0;
        if (v13)
          (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    while ((v9 & 1) != 0);
  }
}

void llvm::BitcodeModule::getModuleImpl(__int128 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  void **v26;
  size_t v27;
  _QWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  __int128 *p_dst;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void (**v39)(void);
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  int v44;
  void **__src;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  void *__p[2];
  uint64_t v52;
  __int128 __dst;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD v83[36];

  v83[33] = *MEMORY[0x1E0C80C00];
  v65 = *a1;
  v66 = 0uLL;
  v67 = 0x200000000;
  v68 = 0;
  v70 = 0;
  v69 = 0;
  v71 = (char *)&v73;
  v72 = 0x800000000;
  v74 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v52 = 0;
  v15 = *((_QWORD *)a1 + 6);
  if (v15 != -1)
  {
    *(_QWORD *)&v66 = (v15 >> 3) & 0x1FFFFFFFFFFFFFF8;
    LODWORD(v67) = 0;
    if ((v15 & 0x3F) != 0)
    {
      sub_1C4FF7E04((uint64_t)&v65, v15 & 0x3F, (uint64_t)&v75);
      if ((BYTE8(v75) & 1) != 0)
      {
        v16 = v75;
        if ((_QWORD)v75)
          goto LABEL_7;
      }
    }
    sub_1C4FFB478((uint64_t)&v75, (llvm::BitstreamCursor *)&v65);
    if ((BYTE8(v76) & 1) != 0)
    {
      v16 = v75;
      if ((_QWORD)v75)
      {
LABEL_7:
        *(_BYTE *)(a8 + 8) |= 1u;
        *(_QWORD *)a8 = v16;
        goto LABEL_53;
      }
    }
    else
    {
      *(_OWORD *)__p = v75;
      v52 = v76;
    }
  }
  v17 = *((_QWORD *)a1 + 7);
  *(_QWORD *)&v66 = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
  LODWORD(v67) = 0;
  if ((v17 & 0x3F) != 0)
  {
    sub_1C4FF7E04((uint64_t)&v65, v17 & 0x3F, (uint64_t)&v75);
    if ((BYTE8(v75) & 1) != 0)
    {
      v16 = v75;
      if ((_QWORD)v75)
        goto LABEL_7;
    }
  }
  v46 = a4;
  v44 = a3;
  v48 = a8;
  v18 = operator new();
  v55 = v65;
  v56 = v66;
  v19 = HIDWORD(v67);
  v20 = v68;
  v21 = v69;
  v57 = v67;
  v58 = v68;
  v22 = v70;
  v59 = v69;
  v60 = v70;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  v61 = (char *)&v63;
  v62 = 0x800000000;
  v47 = a7;
  if ((_DWORD)v72)
  {
    sub_1C4FF8150((uint64_t)&v61, (uint64_t)&v71);
    v19 = HIDWORD(v57);
    v20 = v58;
    v21 = v59;
    v22 = v60;
    v23 = v62;
  }
  else
  {
    v23 = 0;
  }
  v24 = v74;
  v64 = v74;
  v25 = a1[2];
  v26 = __p;
  if (v52 < 0)
    v26 = (void **)__p[0];
  __src = v26;
  if (v52 >= 0)
    v27 = HIBYTE(v52) & 0x7F;
  else
    v27 = (size_t)__p[1];
  v28 = (_QWORD *)(v18 + 8);
  v75 = v55;
  v76 = v56;
  v77 = __PAIR64__(v19, v57);
  v78 = v20;
  v79 = v21;
  v80 = v22;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  v81 = (char *)v83;
  v82 = 0x800000000;
  if (v23)
  {
    v42 = v25;
    sub_1C4FF8150((uint64_t)&v81, (uint64_t)&v61);
    v25 = v42;
    v24 = v64;
    v19 = HIDWORD(v77);
    v20 = v78;
    v21 = v79;
    v22 = v80;
    v23 = v82;
  }
  *(_QWORD *)(v18 + 96) = v18 + 112;
  v83[32] = v24;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *v28 = 0;
  v29 = v77;
  v30 = v76;
  *(_OWORD *)(v18 + 32) = v75;
  *(_OWORD *)(v18 + 48) = v30;
  *(_QWORD *)(v18 + 64) = v29;
  *(_QWORD *)(v18 + 72) = v20;
  *(_DWORD *)(v18 + 68) = v19;
  *(_QWORD *)(v18 + 80) = v21;
  *(_QWORD *)(v18 + 88) = v22;
  v79 = 0;
  v80 = 0;
  v78 = 0;
  *(_QWORD *)(v18 + 104) = 0x800000000;
  if (v23)
  {
    v43 = v25;
    sub_1C4FF8150(v18 + 96, (uint64_t)&v81);
    v25 = v43;
  }
  *(_OWORD *)(v18 + 376) = v25;
  *(_BYTE *)(v18 + 392) = 0;
  *(_QWORD *)(v18 + 408) = 0;
  *(_QWORD *)(v18 + 416) = 0;
  *(_QWORD *)(v18 + 400) = 0;
  *(_QWORD *)(v18 + 368) = v28;
  sub_1C4FF8A28(&v81);
  if (v78)
  {
    sub_1C4FF80DC((uint64_t *)&v78);
    operator delete(v78);
  }
  *(_QWORD *)v18 = &off_1E813F228;
  *(_QWORD *)(v18 + 424) = a2;
  *(_QWORD *)(v18 + 432) = 0;
  *(_BYTE *)(v18 + 456) = 0;
  *(_OWORD *)(v18 + 440) = 0u;
  *(_OWORD *)(v18 + 464) = 0u;
  *(_OWORD *)(v18 + 480) = 0u;
  *(_OWORD *)(v18 + 496) = 0u;
  *(_OWORD *)(v18 + 512) = 0u;
  *(_OWORD *)(v18 + 528) = 0u;
  *(_OWORD *)(v18 + 544) = 0u;
  *(_DWORD *)(v18 + 560) = 0;
  *(_DWORD *)(v18 + 584) = 0;
  *(_OWORD *)(v18 + 568) = 0u;
  *(_DWORD *)(v18 + 608) = 0;
  *(_OWORD *)(v18 + 592) = 0u;
  v31 = *(_QWORD *)(v18 + 40);
  *(_OWORD *)(v18 + 616) = 0u;
  *(_OWORD *)(v18 + 632) = 0u;
  *(_OWORD *)(v18 + 648) = 0u;
  *(_QWORD *)(v18 + 664) = a2;
  if (v31 >= 0xFFFFFFFF)
    LODWORD(v31) = -1;
  *(_DWORD *)(v18 + 672) = v31;
  *(_BYTE *)(v18 + 680) = 0;
  *(_BYTE *)(v18 + 688) = 0;
  *(_OWORD *)(v18 + 696) = 0uLL;
  *(_OWORD *)(v18 + 712) = 0uLL;
  *(_OWORD *)(v18 + 724) = 0uLL;
  *(_QWORD *)(v18 + 744) = v18 + 760;
  *(_QWORD *)(v18 + 752) = 0x4000000000;
  *(_OWORD *)(v18 + 1272) = 0uLL;
  *(_OWORD *)(v18 + 1288) = 0uLL;
  *(_OWORD *)(v18 + 1304) = 0uLL;
  *(_OWORD *)(v18 + 1320) = 0uLL;
  *(_OWORD *)(v18 + 1336) = 0uLL;
  *(_OWORD *)(v18 + 1352) = 0uLL;
  *(_OWORD *)(v18 + 1376) = 0uLL;
  *(_QWORD *)(v18 + 1368) = v18 + 1376;
  *(_BYTE *)(v18 + 1488) = 0;
  *(_DWORD *)(v18 + 1456) = 0;
  *(_OWORD *)(v18 + 1440) = 0uLL;
  *(_OWORD *)(v18 + 1424) = 0uLL;
  *(_OWORD *)(v18 + 1408) = 0uLL;
  *(_OWORD *)(v18 + 1392) = 0uLL;
  *(_OWORD *)(v18 + 1464) = 0uLL;
  *(_DWORD *)(v18 + 1480) = 0;
  *(_DWORD *)(v18 + 1512) = 0;
  *(_OWORD *)(v18 + 1496) = 0uLL;
  *(_OWORD *)(v18 + 1520) = 0uLL;
  *(_OWORD *)(v18 + 1536) = 0uLL;
  *(_OWORD *)(v18 + 1548) = 0uLL;
  *(_OWORD *)(v18 + 1627) = 0uLL;
  *(_OWORD *)(v18 + 1616) = 0uLL;
  *(_OWORD *)(v18 + 1600) = 0uLL;
  *(_OWORD *)(v18 + 1584) = 0uLL;
  *(_OWORD *)(v18 + 1568) = 0uLL;
  *(_OWORD *)(v18 + 1648) = 0uLL;
  *(_DWORD *)(v18 + 1672) = 0;
  *(_QWORD *)(v18 + 1664) = 0;
  *(_DWORD *)(v18 + 1696) = 0;
  *(_OWORD *)(v18 + 1680) = 0uLL;
  *(_QWORD *)(v18 + 1720) = 0;
  *(_OWORD *)(v18 + 1704) = 0uLL;
  *(_QWORD *)(v18 + 1728) = v18 + 1752;
  *(_QWORD *)(v18 + 1736) = 0;
  *(_QWORD *)(v18 + 1744) = 8;
  *(_QWORD *)(v18 + 1776) = 0;
  *(_OWORD *)(v18 + 1760) = 0uLL;
  if (v27 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v27 >= 0x17)
  {
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    p_dst = (__int128 *)operator new(v33 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v54 = v34 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_32;
  }
  HIBYTE(v54) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_32:
    memmove(p_dst, __src, v27);
  v35 = (void **)(v18 + 400);
  *((_BYTE *)p_dst + v27) = 0;
  if (*(char *)(v18 + 423) < 0)
    operator delete(*v35);
  *(_OWORD *)v35 = __dst;
  *(_QWORD *)(v18 + 416) = v54;
  sub_1C4FF8A28(&v61);
  if (v58)
  {
    sub_1C4FF80DC((uint64_t *)&v58);
    operator delete(v58);
  }
  v36 = (uint64_t *)operator new();
  v37 = *(_QWORD *)(llvm::Module::Module((uint64_t)v36, *((const void **)a1 + 2), *((_QWORD *)a1 + 3), a2) + 160);
  v36[20] = v18;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  *(_QWORD *)(v18 + 432) = v36;
  *(_QWORD *)&v75 = &off_1E813F270;
  *((_QWORD *)&v75 + 1) = v18;
  *((_QWORD *)&v76 + 1) = &v75;
  llvm::MetadataLoader::MetadataLoader((uint64_t *)&__dst, v18 + 32, v36, v18 + 616, a5, &v75);
  if (*(_BYTE *)(v18 + 688))
  {
    llvm::MetadataLoader::operator=((char ***)(v18 + 680), (char ***)&__dst);
  }
  else
  {
    v38 = __dst;
    *(_QWORD *)&__dst = 0;
    *(_QWORD *)(v18 + 680) = v38;
    *(_BYTE *)(v18 + 688) = 1;
  }
  llvm::MetadataLoader::~MetadataLoader((char ***)&__dst);
  if (*((__int128 **)&v76 + 1) == &v75)
  {
    v39 = (void (**)(void))(v75 + 32);
  }
  else
  {
    if (!*((_QWORD *)&v76 + 1))
      goto LABEL_46;
    v39 = (void (**)(void))(**((_QWORD **)&v76 + 1) + 40);
  }
  (*v39)();
LABEL_46:
  sub_1C5010F00(&v50, v18, 0, v46, a6, v47);
  v40 = v50;
  if (v50)
  {
LABEL_52:
    *(_BYTE *)(v48 + 8) |= 1u;
    *(_QWORD *)v48 = v40;
    llvm::Module::~Module((llvm::Module *)v36);
    MEMORY[0x1CAA32FC0]();
    goto LABEL_53;
  }
  if (v44)
  {
    v41 = v36[20];
    if (!v41)
      goto LABEL_58;
    v36[20] = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v41 + 24))(&v75, v41);
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  else
  {
    sub_1C4FFB778((uint64_t *)&v75, v18);
  }
  v40 = v75;
  if ((_QWORD)v75)
    goto LABEL_52;
LABEL_58:
  *(_BYTE *)(v48 + 8) &= ~1u;
  *(_QWORD *)v48 = v36;
LABEL_53:
  if (SHIBYTE(v52) < 0)
    operator delete(__p[0]);
  sub_1C4FF8A28(&v71);
  if (v68)
  {
    sub_1C4FF80DC((uint64_t *)&v68);
    operator delete(v68);
  }
}

void sub_1C4FFB478(uint64_t a1, llvm::BitstreamCursor *a2)
{
  uint64_t v2;
  unint64_t v3;
  void **v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string __p;
  uint64_t v24;
  char v25;
  const char *v26;
  char v27;
  const char *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[66];

  v32[64] = *MEMORY[0x1E0C80C00];
  v6 = &v30;
  llvm::BitstreamCursor::EnterSubBlock(a2, 0, 13, &v30);
  v7 = v30;
  if (v30)
  {
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_QWORD *)a1 = v7;
    return;
  }
  v30 = v32;
  v31 = 0x4000000000;
  memset(&__p, 0, sizeof(__p));
  v8 = *(unsigned __int8 *)(a1 + 24);
  while (1)
  {
    sub_1C4FF7B90((uint64_t)a2, 0, (uint64_t)&v26);
    v9 = (uint64_t)v26;
    if ((v27 & 1) != 0)
    {
      if (v26)
      {
        *(_BYTE *)(a1 + 24) = v8 | 1;
        goto LABEL_29;
      }
    }
    else
    {
      LODWORD(v6) = HIDWORD(v26);
    }
    v10 = (v27 & 1) != 0 ? 3 : (int)v26;
    if (v10 != 3)
      break;
    LODWORD(v31) = 0;
    llvm::BitstreamCursor::readRecord((uint64_t)a2, (int)v6, (uint64_t)&v30, 0, (uint64_t)&v24);
    if ((v25 & 1) != 0)
    {
      v11 = 0;
      v12 = v24;
      v24 = 0;
      v8 |= 1u;
      *(_BYTE *)(a1 + 24) = v8;
      *(_QWORD *)a1 = v12;
      goto LABEL_20;
    }
    if ((_DWORD)v24 == 1)
    {
      sub_1C5000624(&__p, (std::string *)v30, (std::string *)((char *)v30 + 8 * v31));
LABEL_18:
      v11 = 1;
      goto LABEL_20;
    }
    if ((_DWORD)v24 == 2)
    {
      if (*(_DWORD *)v30)
      {
        v3 = *(unsigned int *)v30 | v3 & 0xFFFFFFFF00000000;
        v14[0] = "Incompatible epoch: Bitcode '";
        v14[2] = v3;
        v15 = 2051;
        v16[0] = v14;
        v16[2] = "' vs current: '";
        v17 = 770;
        v2 &= 0xFFFFFFFF00000000;
        v18[0] = v16;
        v18[2] = v2;
        v19 = 2306;
        v26 = (const char *)v18;
        v28 = "'";
        v29 = 770;
        sub_1C4FFAA54((llvm::Twine *)&v26, &v20);
        v11 = 0;
        v8 |= 1u;
        *(_BYTE *)(a1 + 24) = v8;
        *(_QWORD *)a1 = v20;
        v20 = 0;
        goto LABEL_20;
      }
      goto LABEL_18;
    }
    v26 = "Invalid value";
    v29 = 259;
    sub_1C4FFAA54((llvm::Twine *)&v26, &v21);
    v11 = 0;
    v8 |= 1u;
    *(_BYTE *)(a1 + 24) = v8;
    *(_QWORD *)a1 = v21;
    v21 = 0;
LABEL_20:
    if ((v25 & 1) != 0)
    {
      v13 = v24;
      v24 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    if ((v11 & 1) == 0)
      goto LABEL_30;
  }
  if (v10 == 1)
  {
    *(_BYTE *)(a1 + 24) = v8 & 0xFE;
    *(std::string *)a1 = __p;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_30;
  }
  v26 = "Malformed block";
  v29 = 259;
  sub_1C4FFAA54((llvm::Twine *)&v26, &v22);
  *(_BYTE *)(a1 + 24) = v8 | 1;
  v9 = v22;
LABEL_29:
  *(_QWORD *)a1 = v9;
LABEL_30:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v30 != v32)
    free(v30);
}

void sub_1C4FFB778(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[4];
  __int16 v11;

  if (*(_BYTE *)(a2 + 1641))
  {
LABEL_15:
    *a1 = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 1641) = 1;
    while (1)
    {
      v4 = *(_QWORD *)(a2 + 1608);
      if (!v4)
        break;
      v5 = *(void ***)(a2 + 1576);
      v6 = *(_QWORD *)(a2 + 1600);
      v7 = (*(_QWORD **)((char *)v5 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)))[v6 & 0x1FF];
      *(_QWORD *)(a2 + 1608) = v4 - 1;
      *(_QWORD *)(a2 + 1600) = v6 + 1;
      if (v6 + 1 >= 0x400)
      {
        operator delete(*v5);
        *(_QWORD *)(a2 + 1576) += 8;
        *(_QWORD *)(a2 + 1600) -= 512;
      }
      if (sub_1C4ECB0EC(*(_QWORD *)(a2 + 1544), *(_DWORD *)(a2 + 1560), v7, v10))
      {
        if ((*(_BYTE *)(v7 + 34) & 0x80) == 0)
        {
          v10[0] = "Never resolved function from blockaddress";
          v11 = 259;
          sub_1C500A780(a1, a2 + 8, (llvm::Twine *)v10);
          return;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v7);
        if (*a1)
          return;
      }
    }
    v8 = *(_QWORD **)(a2 + 1616);
    v9 = *(_QWORD **)(a2 + 1624);
    if (v8 == v9)
    {
LABEL_14:
      *(_QWORD *)(a2 + 1624) = v8;
      *(_BYTE *)(a2 + 1641) = 0;
      goto LABEL_15;
    }
    while (1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *v8);
      if (*a1)
        break;
      if (++v8 == v9)
      {
        v8 = *(_QWORD **)(a2 + 1616);
        goto LABEL_14;
      }
    }
  }
}

void llvm::BitcodeModule::readSummary(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char *v19[2];
  _QWORD v20[33];
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v23 = *(_OWORD *)a1;
  v26 = 0uLL;
  v27 = 0;
  v28 = (char *)&v30;
  v29 = 0x800000000;
  v31 = 0;
  v12 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)&v24 + 1) = 0;
  *(_QWORD *)&v24 = (v12 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v25 = 0x200000000;
  if ((v12 & 0x3F) != 0 && (sub_1C4FF7E04((uint64_t)&v23, v12 & 0x3F, (uint64_t)&v21), (v22 & 1) != 0))
  {
    v14 = v21;
    *a6 = v21;
    if (v14)
      goto LABEL_9;
  }
  else
  {
    *a6 = 0;
  }
  v16 = v25;
  v15[0] = v23;
  v15[1] = v24;
  *(_OWORD *)__p = v26;
  v13 = v27;
  v27 = 0;
  v26 = 0uLL;
  v18 = v13;
  v19[0] = (char *)v20;
  v19[1] = (char *)0x800000000;
  if ((_DWORD)v29)
    sub_1C4FF8150((uint64_t)v19, (uint64_t)&v28);
  v20[32] = v31;
  sub_1C4FFBAC0((uint64_t)&v21, v15, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3, a4, a5);
  sub_1C4FF8A28(v19);
  if (__p[0])
  {
    sub_1C4FF80DC((uint64_t *)__p);
    operator delete(__p[0]);
  }
  sub_1C4FFBC8C(a6, (uint64_t)&v21);
  sub_1C4FFF0A0((uint64_t)&v21);
LABEL_9:
  sub_1C4FF8A28(&v28);
  if ((_QWORD)v26)
  {
    sub_1C4FF80DC((uint64_t *)&v26);
    operator delete((void *)v26);
  }
}

uint64_t sub_1C4FFBAC0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *__p;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[36];

  v31[34] = *MEMORY[0x1E0C80C00];
  v16 = (void *)*((_QWORD *)a2 + 5);
  v23 = *a2;
  v24 = a2[1];
  v17 = *((_DWORD *)a2 + 9);
  v25 = *((_QWORD *)a2 + 4);
  __p = v16;
  v18 = *((_QWORD *)a2 + 6);
  v19 = *((_QWORD *)a2 + 7);
  v27 = v18;
  v28 = v19;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v29 = (char *)v31;
  v30 = 0x800000000;
  if (*((_DWORD *)a2 + 18))
  {
    sub_1C4FF8150((uint64_t)&v29, (uint64_t)(a2 + 4));
    v17 = HIDWORD(v25);
    v16 = __p;
    v18 = v27;
    v19 = v28;
    v20 = (_DWORD)v30 == 0;
  }
  else
  {
    v20 = 1;
  }
  v21 = *((_QWORD *)a2 + 42);
  *(_OWORD *)(a1 + 24) = v23;
  v31[32] = v21;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 56) = v25;
  *(_QWORD *)(a1 + 64) = v16;
  *(_DWORD *)(a1 + 60) = v17;
  *(_QWORD *)(a1 + 72) = v18;
  *(_QWORD *)(a1 + 80) = v19;
  v27 = 0;
  v28 = 0;
  __p = 0;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 0x800000000;
  if (!v20)
    sub_1C4FF8150(a1 + 88, (uint64_t)&v29);
  *(_QWORD *)(a1 + 368) = a3;
  *(_QWORD *)(a1 + 376) = a4;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 360) = a1;
  sub_1C4FF8A28(&v29);
  if (__p)
  {
    sub_1C4FF80DC((uint64_t *)&__p);
    operator delete(__p);
  }
  *(_QWORD *)(a1 + 416) = a5;
  *(_WORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = a6;
  *(_QWORD *)(a1 + 520) = a7;
  *(_DWORD *)(a1 + 528) = a8;
  return a1;
}

void sub_1C4FFBC8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  llvm::BitstreamCursor *v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  int *v14;
  int v15;
  char v16;
  BOOL v17;
  void *v18;
  size_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  std::string::size_type v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  std::string::size_type v51;
  std::string::size_type v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  const void *v65;
  int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  std::string::size_type v77;
  std::string *v78;
  std::string::size_type v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  void *v87;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _DWORD *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  int v113;
  int v114;
  char v115;
  BOOL v116;
  void *v117;
  size_t v118;
  size_t v119;
  size_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  int64x2_t *v135;
  unint64_t v136;
  int32x2_t *v137;
  uint64_t v138;
  std::string::size_type *v139;
  char *v140;
  size_t v141;
  char *v142;
  std::string::size_type v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  void **v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  int32x2_t *v156;
  int64x2_t *v157;
  char *v158;
  int v159;
  uint64_t v160;
  int64_t v161;
  char *v162;
  char *v163;
  __int128 *v164;
  _QWORD *v165;
  unint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  void *v183;
  unsigned int v184;
  uint64_t v185;
  size_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  int v193;
  uint64_t v194;
  int64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  unsigned int v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  unsigned int v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  size_t v243;
  char *v244;
  unint64_t v245;
  int v246;
  int v247;
  unsigned int v248;
  char *v249;
  char *v250;
  uint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  int v255;
  char *v256;
  int v257;
  unsigned int v258;
  int v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  unint64_t v266;
  int v267;
  uint64_t v268;
  BOOL v269;
  int v270;
  int v271;
  int v272;
  void *v273;
  char *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  char *v279;
  std::string::size_type v280;
  __int16 v281;
  int v282;
  unint64_t v283;
  unsigned int v284;
  int v285;
  uint64_t v286;
  _DWORD *v287;
  uint64_t v288;
  size_t v289;
  const void *v290;
  int v291;
  uint64_t v292;
  unsigned __int8 *v293;
  int v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  int v299;
  uint64_t v300;
  _QWORD *v301;
  void *v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  std::string::size_type v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  _DWORD *v311;
  unint64_t v312;
  unsigned int v313;
  int v314;
  uint64_t v315;
  int v316;
  int v317;
  uint64_t v318;
  char *v319;
  char *v320;
  std::string::size_type v321;
  unint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  unsigned int v326;
  int v327;
  int v328;
  int v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  std::string::size_type v361;
  int v362;
  int v363;
  uint64_t v364;
  unsigned int v365;
  int v366;
  int v367;
  int v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t v371;
  size_t v372;
  const void *v373;
  int v374;
  uint64_t v375;
  unsigned __int8 *v376;
  int v377;
  unsigned int v378;
  uint64_t v379;
  int v380;
  int v381;
  uint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int v388;
  int v389;
  int v390;
  uint64_t v391;
  int v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  int v397;
  int v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  char *v410;
  char *v411;
  char *v412;
  char *v413;
  uint64_t v414;
  void *v415;
  __int128 v416;
  uint64_t v417;
  size_t v418;
  const void *v419;
  int v420;
  uint64_t v421;
  unsigned __int8 *v422;
  int v423;
  unsigned int v424;
  uint64_t v425;
  int v426;
  int v427;
  uint64_t v428;
  _QWORD *v429;
  int v430;
  int v431;
  int v432;
  uint64_t v433;
  void *v434;
  __int128 v435;
  uint64_t v436;
  size_t v437;
  const void *v438;
  int v439;
  uint64_t v440;
  unsigned __int8 *v441;
  int v442;
  unsigned int v443;
  uint64_t v444;
  int v445;
  int v446;
  uint64_t v447;
  _QWORD *v448;
  const void *v449;
  int v450;
  int v451;
  uint64_t v452;
  void *v453;
  __int128 v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  void *v464;
  char *v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  char *v470;
  int v471;
  unint64_t v472;
  unsigned int v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  _DWORD *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t v489;
  _DWORD *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t *v495;
  uint64_t v496;
  _DWORD *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  void *v501;
  void *v502;
  uint64_t v503;
  _QWORD *v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  uint64_t v510;
  _QWORD *v511;
  std::string::size_type v512;
  uint64_t *v513;
  uint64_t v514;
  unint64_t *v515;
  std::string::size_type v516;
  std::string::size_type v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  char *v521;
  uint64_t v522;
  int v523;
  int v524;
  _QWORD *v525;
  uint64_t v526;
  unsigned int v527;
  int v528;
  uint64_t **v529;
  unint64_t v530;
  int v531;
  int v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  unint64_t v537;
  _QWORD *v538;
  char *v539;
  int v540;
  unsigned int v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  void *__src;
  unint64_t __srca;
  int __srcb;
  void *__srcc;
  _QWORD *__srcd;
  _DWORD *__srce;
  void *__srch;
  _DWORD *__srcf;
  _DWORD *__srcg;
  uint64_t v555;
  uint64_t v556;
  char *v557;
  void *v558;
  char *v559;
  void *v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int v563;
  unsigned int v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t *v572;
  uint64_t v573;
  _BYTE *v574;
  _BYTE *v575;
  uint64_t *v576;
  uint64_t v577;
  unsigned int v578;
  char *v579;
  uint64_t v580;
  uint64_t v581;
  void *v582;
  _QWORD v583[2];
  unsigned int v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  _QWORD *v589;
  void *v590;
  void *v591;
  uint64_t v592;
  _QWORD *v593;
  _QWORD *v594;
  _QWORD *v595;
  __int128 v596;
  uint64_t v597;
  char *v598;
  void *v599;
  void *v600;
  __int128 v601;
  void *v602;
  __int128 v603;
  uint64_t v604;
  __int128 v605;
  uint64_t v606;
  unint64_t v607;
  __int128 v608;
  void *v609;
  __int128 v610;
  uint64_t v611;
  std::string v612;
  void **v613;
  unsigned int v614[2];
  char v615;
  void *v616;
  uint64_t v617;
  _BYTE v618[512];
  uint64_t v619;
  char v620;
  void *__p[2];
  unint64_t *v622;
  __int16 v623;
  std::string v624;
  __int16 v625;
  void *__dst[3];
  char *v627;
  char *v628;
  void *v629;
  __int128 v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  __int128 v634;
  __int128 v635;
  uint64_t v636;
  int v637;
  __int128 v638;
  uint64_t v639;
  uint64_t v640;

  v2 = a2;
  v640 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::BitstreamCursor *)(a2 + 24);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 24), 0, 8, a1);
  if (!*a1)
  {
    v5 = 0;
    v6 = v618;
    v616 = v618;
    v617 = 0x4000000000;
    v576 = (uint64_t *)(v2 + 464);
    v581 = v2 + 440;
    v582 = (void *)(v2 + 488);
    v583[0] = 0;
    v583[1] = 0;
    v584 = 0;
    while (2)
    {
      sub_1C4FF7B90((uint64_t)v4, 0, (uint64_t)v614);
      if ((v615 & 1) != 0)
      {
        v8 = *(_QWORD *)v614;
        *(_QWORD *)v614 = 0;
        *a1 = v8;
        goto LABEL_7;
      }
      v7 = v614[1];
      switch(v614[0])
      {
        case 0u:
          v629 = "Malformed block";
          LOWORD(v632) = 259;
          sub_1C500A780(a1, v2, (llvm::Twine *)&v629);
          goto LABEL_7;
        case 1u:
          *a1 = 0;
          goto LABEL_7;
        case 2u:
          if ((int)v614[1] <= 18)
          {
            if (!v614[1])
            {
              sub_1C50163F0(a1, v2);
              goto LABEL_81;
            }
LABEL_38:
            sub_1C4FF3F30((uint64_t)v4, a1);
            goto LABEL_81;
          }
          if (v614[1] == 19)
          {
            llvm::BitstreamCursor::EnterSubBlock(v4, 0, 19, a1);
            v22 = *a1;
            if (*a1)
              goto LABEL_82;
            v23 = 0;
            v629 = (char *)&v630 + 8;
            *(_QWORD *)&v630 = 0x4000000000;
            __dst[0] = &v627;
            *(_OWORD *)&__dst[1] = xmmword_1C85F20B0;
            while (1)
            {
LABEL_41:
              sub_1C4FF7B90((uint64_t)v4, 0, (uint64_t)&v634);
              if ((BYTE8(v634) & 1) != 0)
              {
                v45 = v634;
LABEL_726:
                *a1 = v45;
LABEL_165:
                if (__dst[0] != &v627)
                  free(__dst[0]);
                if (v629 != (char *)&v630 + 8)
                  free(v629);
LABEL_81:
                v22 = *a1;
LABEL_82:
                if (v22)
                  v9 = 1;
                else
                  v9 = 2;
                goto LABEL_8;
              }
              if ((_DWORD)v634 != 2)
                break;
              sub_1C4FF3F30((uint64_t)v4, (uint64_t *)&v624);
              v45 = v624.__r_.__value_.__r.__words[0];
              if ((BYTE8(v634) & 1) != 0)
              {
                v46 = v634;
                *(_QWORD *)&v634 = 0;
                if (v46)
                  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
              }
              if (v45)
                goto LABEL_726;
            }
            if ((_DWORD)v634 == 1)
            {
              *a1 = 0;
              goto LABEL_165;
            }
            if (!(_DWORD)v634)
            {
              *(_QWORD *)&v634 = "Malformed block";
              LOWORD(v636) = 259;
              sub_1C500A780(a1, v2, (llvm::Twine *)&v634);
              goto LABEL_165;
            }
            LODWORD(v630) = 0;
            llvm::BitstreamCursor::readRecord((uint64_t)v4, SDWORD1(v634), (uint64_t)&v629, 0, (uint64_t)&v638);
            if ((BYTE8(v638) & 1) != 0)
            {
              LOBYTE(v25) = 0;
              v26 = v638;
              *(_QWORD *)&v638 = 0;
              *a1 = v26;
              goto LABEL_63;
            }
            if ((_DWORD)v638 != 2)
            {
              if ((_DWORD)v638 == 1)
              {
                v624.__r_.__value_.__r.__words[0] = 0;
                v24 = (char *)v629;
                v624.__r_.__value_.__r.__words[0] = *(_QWORD *)v629;
                v25 = v630;
                if ((_DWORD)v630)
                {
                  v34 = (v630 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                  v35 = (char *)__dst[1];
                  if (__dst[2] < (char *)__dst[1] + v34)
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__dst, &v627, (unint64_t)__dst[1] + v34, 1);
                    v35 = (char *)__dst[1];
                  }
                  if ((_DWORD)v25 != 1)
                  {
                    v36 = (uint64_t *)(v24 + 8);
                    v37 = (char *)__dst[0] + (unint64_t)v35;
                    v38 = 8 * v25 - 8;
                    do
                    {
                      v39 = *v36++;
                      *v37++ = v39;
                      v38 -= 8;
                    }
                    while (v38);
                    v35 = (char *)__dst[1];
                  }
                  v40 = (size_t)&v35[v34];
                  __dst[1] = &v35[v34];
                  v41 = *(_QWORD *)(v2 + 416);
                  v636 = 0;
                  v637 = 0;
                  *(void **)&v634 = __dst[0];
                  *((_QWORD *)&v634 + 1) = v40;
                  v635 = v624.__r_.__value_.__r.__words[0];
                  v42 = sub_1C61CDF18(v41 + 24, (unsigned __int8 *)__dst[0], v40, &v635);
                  v23 = (_QWORD *)*v42;
                  v25 = *v42 + 40;
                  v43 = *(_QWORD *)*v42;
                  v44 = sub_1C61D0EF8(v576, &v624);
                  v44[1] = v25;
                  v44[2] = v43;
                  __dst[1] = 0;
                  LOBYTE(v25) = 1;
                }
                else
                {
                  *(_QWORD *)&v634 = "Invalid record";
                  LOWORD(v636) = 259;
                  sub_1C500A780(a1, v2, (llvm::Twine *)&v634);
                }
LABEL_63:
                if ((BYTE8(v638) & 1) != 0)
                {
                  v33 = v638;
                  *(_QWORD *)&v638 = 0;
                  if (v33)
                    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
                }
                if ((v25 & 1) == 0)
                  goto LABEL_165;
                goto LABEL_41;
              }
LABEL_56:
              LOBYTE(v25) = 1;
              goto LABEL_63;
            }
            if ((_DWORD)v630 == 5)
            {
              if (v23)
              {
                v27 = (uint64_t *)v629;
                v28 = v23 + 2;
                v29 = 8 * v630;
                do
                {
                  v30 = *v27++;
                  *v28++ = v30;
                  v29 -= 8;
                }
                while (v29);
                v23 = 0;
                goto LABEL_56;
              }
              *(_QWORD *)&v634 = "Invalid hash that does not follow a module path";
              LOWORD(v636) = 259;
              sub_1C500A780(a1, v2, (llvm::Twine *)&v634);
            }
            else
            {
              *(_QWORD *)&v610 = v630;
              v625 = 266;
              v624.__r_.__value_.__r.__words[0] = (std::string::size_type)&v610;
              llvm::Twine::str((llvm::Twine *)&v624, &v612);
              v31 = std::string::insert(&v612, 0, "Invalid hash length ");
              v32 = (unint64_t *)v31->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
              v622 = v32;
              v31->__r_.__value_.__l.__size_ = 0;
              v31->__r_.__value_.__r.__words[2] = 0;
              v31->__r_.__value_.__r.__words[0] = 0;
              LOWORD(v636) = 260;
              *(_QWORD *)&v634 = __p;
              sub_1C500A780(a1, v2, (llvm::Twine *)&v634);
              if (SHIBYTE(v622) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v612.__r_.__value_.__l.__data_);
            }
            LOBYTE(v25) = 0;
            goto LABEL_63;
          }
          if (v614[1] != 20 && v614[1] != 24)
            goto LABEL_38;
          if (*(char *)(v2 + 511) < 0)
            v11 = *(_QWORD *)(v2 + 496);
          else
            v11 = *(unsigned __int8 *)(v2 + 511);
          if (v11)
          {
            v86 = *(_QWORD *)(v2 + 416);
            v87 = *(void **)(v2 + 512);
            v88 = *(_QWORD *)(v2 + 520);
            v89 = *(unsigned int *)(v2 + 528);
            v631 = 0;
            v632 = 0;
            v633 = 0;
            v629 = v87;
            *(_QWORD *)&v630 = v88;
            *((_QWORD *)&v630 + 1) = v89;
            sub_1C61CDF18(v86 + 24, (unsigned __int8 *)v87, v88, (__int128 *)((char *)&v630 + 8));
          }
          v47 = *(_QWORD *)(v2 + 432);
          if (!v47)
          {
LABEL_92:
            *(_BYTE *)(v2 + 424) = 1;
            llvm::BitstreamCursor::EnterSubBlock(v4, 0, v7, a1);
            v48 = *a1;
            if (!*a1)
            {
              v629 = (char *)&v630 + 8;
              *(_QWORD *)&v630 = 0x4000000000;
              while (1)
              {
                sub_1C4FF7B90((uint64_t)v4, 0, (uint64_t)__dst);
                if (((uint64_t)__dst[1] & 1) != 0)
                {
                  v49 = __dst[0];
LABEL_730:
                  *a1 = (uint64_t)v49;
                  goto LABEL_158;
                }
                if (LODWORD(__dst[0]) != 2)
                  break;
                sub_1C4FF3F30((uint64_t)v4, (uint64_t *)&v634);
                v49 = (void *)v634;
                if (((uint64_t)__dst[1] & 1) != 0)
                {
                  v50 = __dst[0];
                  __dst[0] = 0;
                  if (v50)
                    (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
                }
                if (v49)
                  goto LABEL_730;
              }
              if (LODWORD(__dst[0]) == 3)
              {
                llvm::BitstreamCursor::readRecord((uint64_t)v4, SHIDWORD(__dst[0]), (uint64_t)&v629, 0, (uint64_t)&v634);
                if ((BYTE8(v634) & 1) != 0)
                {
                  *a1 = v634;
                }
                else if ((_DWORD)v634 == 10)
                {
                  v607 = 0;
                  v51 = *(_QWORD *)v629;
                  v607 = v51;
                  if (v51 - 10 <= 0xFFFFFFFFFFFFFFF6)
                  {
                    __p[0] = "Invalid summary version ";
                    v622 = &v607;
                    v623 = 3075;
                    v624.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                    v624.__r_.__value_.__r.__words[2] = (std::string::size_type)". Version should be in the range [1-";
                    v625 = 770;
                    *(_QWORD *)&v634 = &v624;
                    *(_QWORD *)&v635 = &llvm::ModuleSummaryIndex::BitcodeSummaryVersion;
                    LOWORD(v636) = 3074;
                    __dst[0] = &v634;
                    __dst[2] = "].";
                    LOWORD(v628) = 770;
                    sub_1C500A780(a1, v2, (llvm::Twine *)__dst);
                    goto LABEL_158;
                  }
                  v512 = v51;
                  v513 = 0;
                  v515 = 0;
                  v516 = 0;
                  v557 = 0;
                  v559 = 0;
                  v579 = 0;
                  v572 = 0;
                  v575 = v6;
                  v517 = 0;
                  v518 = 0;
                  v520 = 0;
                  v521 = 0;
                  LODWORD(v630) = 0;
                  v605 = 0uLL;
                  v606 = 0;
                  v603 = 0uLL;
                  v604 = 0;
                  v601 = 0uLL;
                  v602 = 0;
                  while (2)
                  {
                    sub_1C4FF7B90((uint64_t)v4, 0, (uint64_t)__dst);
                    if (((uint64_t)__dst[1] & 1) != 0)
                    {
                      v501 = __dst[0];
LABEL_732:
                      *a1 = (uint64_t)v501;
                    }
                    else
                    {
                      if (LODWORD(__dst[0]) == 2)
                      {
                        sub_1C4FF3F30((uint64_t)v4, (uint64_t *)&v634);
                        v501 = (void *)v634;
                        if (((uint64_t)__dst[1] & 1) != 0)
                        {
                          v502 = __dst[0];
                          __dst[0] = 0;
                          if (v502)
                            (*(void (**)(void *))(*(_QWORD *)v502 + 8))(v502);
                        }
                        if (v501)
                          goto LABEL_732;
                        continue;
                      }
                      if (LODWORD(__dst[0]) != 1)
                      {
                        if (!LODWORD(__dst[0]))
                        {
                          __dst[0] = "Malformed block";
                          LOWORD(v628) = 259;
                          sub_1C500A780(a1, v2, (llvm::Twine *)__dst);
                          break;
                        }
                        LODWORD(v630) = 0;
                        llvm::BitstreamCursor::readRecord((uint64_t)v4, SHIDWORD(__dst[0]), (uint64_t)&v629, 0, (uint64_t)&v619);
                        if ((v620 & 1) != 0)
                        {
                          v124 = 0;
                          v126 = v619;
                          v619 = 0;
                          *a1 = v126;
LABEL_318:
                          if ((v620 & 1) != 0)
                          {
                            v198 = v619;
                            v619 = 0;
                            if (v198)
                              (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
                          }
                          v6 = v575;
                          if ((v124 & 1) == 0)
                            break;
                          continue;
                        }
                        v124 = 1;
                        v125 = v619;
                        switch((int)v619)
                        {
                          case 1:
                          case 2:
                          case 19:
                            v245 = *((unsigned int *)v629 + 6);
                            v564 = v5;
                            if (v607 < 4)
                            {
                              v246 = 0;
                              v247 = 0;
                              v248 = 4;
                              LOWORD(__srcb) = 0;
                            }
                            else
                            {
                              __srcb = *((_DWORD *)v629 + 6);
                              v245 = *((unsigned int *)v629 + 8);
                              if (v607 == 4)
                              {
                                v246 = 0;
                                v247 = 0;
                                v248 = 5;
                              }
                              else
                              {
                                v247 = *((_DWORD *)v629 + 10);
                                if (v607 < 7)
                                {
                                  v246 = 0;
                                  v248 = 6;
                                }
                                else
                                {
                                  v246 = *((_DWORD *)v629 + 12);
                                  v248 = 7;
                                }
                              }
                            }
                            v540 = *(_DWORD *)v629;
                            v266 = *((_QWORD *)v629 + 1);
                            v531 = *((_DWORD *)v629 + 4);
                            if (v607 < 3)
                              v267 = 1;
                            else
                              v267 = (v266 >> 4) & 1;
                            v268 = (v266 >> 5) & 1;
                            if (v607 < 3)
                              LODWORD(v268) = 1;
                            v269 = v267 == 0;
                            v270 = 64;
                            if (v269)
                              v270 = 0;
                            v523 = v270;
                            v271 = 128;
                            if (!(_DWORD)v268)
                              v271 = 0;
                            v507 = v271;
                            v272 = v248 + v245;
                            sub_1C50173D4(&v598, v2, (_QWORD *)v629 + v248, v245);
                            sub_1C5017530((void **)&v596, v2, (uint64_t)v629 + 8 * v272, v630 - (uint64_t)v272, v512 == 1, v125 == 2, v125 == 19);
                            v274 = v598;
                            v273 = v599;
                            v275 = (_BYTE *)v599 - v598;
                            v276 = ((unint64_t)((_BYTE *)v599 - v598) >> 3) - v246;
                            v277 = (v276 - v247);
                            if (v277 >= v276)
                            {
                              v282 = v276 - v247;
                              v280 = (std::string::size_type)v520;
                              v281 = __srcb;
                            }
                            else
                            {
                              v278 = v276 - v277;
                              v279 = &v598[8 * v277];
                              v280 = (std::string::size_type)v520;
                              v281 = __srcb;
                              do
                              {
                                *(_QWORD *)v279 |= 2uLL;
                                v279 += 8;
                                --v278;
                              }
                              while (v278);
                              v277 = v276;
                              v282 = v276;
                            }
                            v283 = v275 >> 3;
                            if (v283 > v277)
                            {
                              v284 = v282 + 1;
                              do
                              {
                                *(_QWORD *)&v274[8 * v277] |= 4uLL;
                                v277 = v284;
                                v17 = v283 > v284++;
                              }
                              while (v17);
                            }
                            v285 = v281 & 0x3FF;
                            v286 = operator new();
                            __dst[0] = v274;
                            __dst[1] = v273;
                            __dst[2] = v600;
                            v598 = 0;
                            v599 = 0;
                            v600 = 0;
                            v634 = v596;
                            *(_QWORD *)&v635 = v597;
                            v596 = 0uLL;
                            v597 = 0;
                            v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v521;
                            v624.__r_.__value_.__l.__size_ = v280;
                            v624.__r_.__value_.__r.__words[2] = v517;
                            __p[0] = v557;
                            __p[1] = v572;
                            v622 = v515;
                            v612.__r_.__value_.__r.__words[0] = (std::string::size_type)v559;
                            v612.__r_.__value_.__l.__size_ = (std::string::size_type)v579;
                            v612.__r_.__value_.__r.__words[2] = v516;
                            v638 = v605;
                            v639 = v606;
                            v605 = 0uLL;
                            v606 = 0;
                            v610 = v603;
                            v611 = v604;
                            v603 = 0uLL;
                            v604 = 0;
                            v608 = v601;
                            v609 = v602;
                            v601 = 0uLL;
                            v602 = 0;
                            sub_1C61A8204(v286, v266 & 0xF | (16 * (BYTE1(v266) & 3)) | (v266 >> 6 << 8) | v523 | v507, v531, v285, 0, (__int128 *)__dst, (uint64_t)&v634, (uint64_t *)&v624, (__int128 *)__p, (__int128 *)&v612, &v638, &v610, (uint64_t)&v608);
                            v613 = (void **)&v608;
                            sub_1C4EEB7D8(&v613);
                            v613 = (void **)&v610;
                            sub_1C4EEBCC8(&v613);
                            v613 = (void **)&v638;
                            sub_1C4EEBCC8(&v613);
                            if (v612.__r_.__value_.__r.__words[0])
                            {
                              v612.__r_.__value_.__l.__size_ = v612.__r_.__value_.__r.__words[0];
                              operator delete(v612.__r_.__value_.__l.__data_);
                            }
                            if (__p[0])
                            {
                              __p[1] = __p[0];
                              operator delete(__p[0]);
                            }
                            if (v624.__r_.__value_.__r.__words[0])
                            {
                              v624.__r_.__value_.__l.__size_ = v624.__r_.__value_.__r.__words[0];
                              operator delete(v624.__r_.__value_.__l.__data_);
                            }
                            if ((_QWORD)v634)
                            {
                              *((_QWORD *)&v634 + 1) = v634;
                              operator delete((void *)v634);
                            }
                            if (__dst[0])
                            {
                              __dst[1] = __dst[0];
                              operator delete(__dst[0]);
                            }
                            LODWORD(__dst[0]) = v540;
                            v287 = sub_1C61D0C8C(v581, (int *)__dst);
                            v580 = *(_QWORD *)(v2 + 416);
                            v288 = *(unsigned int *)(v580 + 32);
                            __srcd = (_QWORD *)v286;
                            v556 = v2;
                            v573 = *((_QWORD *)v287 + 1);
                            v560 = (void *)*((_QWORD *)v287 + 2);
                            if ((_DWORD)v288)
                            {
                              v289 = *(_QWORD *)(v2 + 520);
                              v290 = *(const void **)(v2 + 512);
                              v291 = 0;
                              if (v289)
                              {
                                v292 = *(_QWORD *)(v2 + 520);
                                v293 = *(unsigned __int8 **)(v2 + 512);
                                do
                                {
                                  v294 = *v293++;
                                  v291 = 33 * v291 + v294;
                                  --v292;
                                }
                                while (v292);
                              }
                              v295 = v288 - 1;
                              v296 = *(_QWORD *)(v580 + 24);
                              v558 = (void *)*(unsigned int *)(v580 + 32);
                              v297 = v296 + 8 * v288 + 8;
                              v298 = 1;
                              v299 = v291;
                              while (1)
                              {
                                v300 = v299 & v295;
                                v301 = *(_QWORD **)(v296 + 8 * v300);
                                if (v301 != (_QWORD *)-8)
                                {
                                  if (!v301)
                                  {
                                    v302 = v558;
                                    goto LABEL_454;
                                  }
                                  if (*(_DWORD *)(v297 + 4 * v300) == v291
                                    && v289 == *v301
                                    && (!v289 || !memcmp(v290, (char *)v301 + *(unsigned int *)(v580 + 44), v289)))
                                  {
                                    break;
                                  }
                                }
                                v299 = v298 + v300;
                                ++v298;
                              }
                              v302 = v558;
                              if ((_DWORD)v300 != -1)
                                v302 = (void *)(int)v300;
                            }
                            else
                            {
                              v302 = 0;
                              v296 = *(_QWORD *)(v580 + 24);
                            }
LABEL_454:
                            v303 = *(uint64_t **)(v296 + 8 * (_QWORD)v302);
                            v304 = *v303;
                            __srcd[3] = v303 + 5;
                            __srcd[4] = v304;
                            __srcd[2] = v560;
                            v595 = __srcd;
                            sub_1C4EEBD40(v580, v573, (uint64_t *)&v595);
                            v305 = (uint64_t)v595;
                            v595 = 0;
                            v5 = v564;
                            if (v305)
                              (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
                            v515 = 0;
                            v516 = 0;
                            v557 = 0;
                            v559 = 0;
                            v579 = 0;
                            v572 = 0;
                            v517 = 0;
                            v520 = 0;
                            v521 = 0;
                            v124 = 1;
                            v2 = v556;
                            goto LABEL_318;
                          case 3:
                            v385 = *((_QWORD *)v629 + 1);
                            v386 = (v385 >> 4) & 1;
                            if (v607 < 3)
                              LODWORD(v386) = 1;
                            v387 = (v385 >> 5) & 1;
                            if (v607 < 3)
                              LODWORD(v387) = 1;
                            if ((_DWORD)v386)
                              v388 = 64;
                            else
                              v388 = 0;
                            if ((_DWORD)v387)
                              v389 = 128;
                            else
                              v389 = 0;
                            if (v607 < 5)
                            {
                              v390 = 0;
                              v391 = 2;
                            }
                            else
                            {
                              v390 = *((_DWORD *)v629 + 4) & 0x1F;
                              v391 = 3;
                            }
                            v431 = *(_DWORD *)v629;
                            v432 = v385 & 0xF | (16 * ((v385 >> 8) & 3)) & 0xFFFFFCFF | (v385 >> 6 << 8) | v388 | v389;
                            sub_1C50173D4((char **)__dst, v2, (_QWORD *)v629 + v391, v630 - v391);
                            v433 = operator new();
                            v434 = __dst[2];
                            v435 = *(_OWORD *)__dst;
                            memset(__dst, 0, sizeof(__dst));
                            *(_DWORD *)(v433 + 8) = 2;
                            *(_DWORD *)(v433 + 12) = v432;
                            *(_QWORD *)(v433 + 24) = 0;
                            *(_QWORD *)(v433 + 32) = 0;
                            *(_QWORD *)(v433 + 16) = 0;
                            *(_OWORD *)(v433 + 40) = v435;
                            *(_QWORD *)v433 = &unk_1E8139E20;
                            *(_QWORD *)(v433 + 56) = v434;
                            *(_QWORD *)(v433 + 64) = 0;
                            *(_DWORD *)(v433 + 72) = v390;
                            v544 = *(_QWORD *)(v2 + 416);
                            v436 = *(unsigned int *)(v544 + 32);
                            v568 = v5;
                            v528 = v431;
                            v511 = (_QWORD *)v433;
                            if ((_DWORD)v436)
                            {
                              v437 = *(_QWORD *)(v2 + 520);
                              v438 = *(const void **)(v2 + 512);
                              v439 = 0;
                              if (v437)
                              {
                                v440 = *(_QWORD *)(v2 + 520);
                                v441 = *(unsigned __int8 **)(v2 + 512);
                                do
                                {
                                  v442 = *v441++;
                                  v439 = 33 * v439 + v442;
                                  --v440;
                                }
                                while (v440);
                              }
                              v443 = v436 - 1;
                              v444 = *(_QWORD *)(v544 + 24);
                              v535 = *(unsigned int *)(v544 + 32);
                              __srcg = (_DWORD *)(v444 + 8 * v436 + 8);
                              v445 = 1;
                              v446 = v439;
                              while (1)
                              {
                                v447 = v446 & v443;
                                v448 = *(_QWORD **)(v444 + 8 * v447);
                                if (v448 != (_QWORD *)-8)
                                {
                                  if (!v448)
                                    goto LABEL_677;
                                  if (__srcg[v447] == v439 && v437 == *v448)
                                  {
                                    if (!v437)
                                      break;
                                    v449 = v438;
                                    v450 = memcmp(v438, (char *)v448 + *(unsigned int *)(v544 + 44), v437);
                                    v438 = v449;
                                    if (!v450)
                                      break;
                                  }
                                }
                                v446 = v445 + v447;
                                ++v445;
                              }
                              v487 = v535;
                              if ((_DWORD)v447 != -1)
                                v487 = (int)v447;
                              v535 = v487;
                            }
                            else
                            {
                              v535 = 0;
                              v444 = *(_QWORD *)(v544 + 24);
                            }
LABEL_677:
                            v488 = *(uint64_t **)(v444 + 8 * v535);
                            v489 = *v488;
                            v511[3] = v488 + 5;
                            v511[4] = v489;
                            LODWORD(v634) = v528;
                            v490 = sub_1C61D0C8C(v581, (int *)&v634);
                            v491 = *((_QWORD *)v490 + 1);
                            v511[2] = *((_QWORD *)v490 + 2);
                            v492 = *(_QWORD *)(v2 + 416);
                            v593 = v511;
                            sub_1C4EEBD40(v492, v491, (uint64_t *)&v593);
                            v493 = (uint64_t)v593;
                            v593 = 0;
                            v5 = v568;
                            if (v493)
                              (*(void (**)(uint64_t))(*(_QWORD *)v493 + 8))(v493);
LABEL_679:
                            v124 = 1;
                            goto LABEL_318;
                          case 4:
                          case 5:
                            v255 = *(_DWORD *)v629;
                            v588 = *((_QWORD *)v629 + 1);
                            v256 = (char *)v629 + 32;
                            v565 = v5;
                            if (v607 < 4)
                            {
                              __srcc = 0;
                              v257 = 0;
                              LODWORD(v384) = 0;
                              LOWORD(v526) = 0;
                              v258 = 5;
                            }
                            else
                            {
                              v257 = 0;
                              if (v607 == 4)
                              {
                                __srcc = 0;
                                v258 = 6;
                                v260 = 5;
                                LODWORD(v384) = 0;
                              }
                              else
                              {
                                if (v607 == 5)
                                {
                                  __srcc = 0;
                                  v258 = 7;
                                  v259 = -1;
                                  v260 = 5;
                                }
                                else
                                {
                                  __srcc = (void *)*((_QWORD *)v629 + 5);
                                  if (v607 < 7)
                                  {
                                    v257 = 0;
                                    v258 = 8;
                                    v259 = -1;
                                  }
                                  else
                                  {
                                    v257 = *((_DWORD *)v629 + 16);
                                    v258 = 9;
                                    v259 = -2;
                                  }
                                  v260 = 6;
                                }
                                v384 = *((_QWORD *)v629 + v258 + v259);
                              }
                              v526 = *(_QWORD *)v256;
                              v256 = (char *)v629 + 8 * v260;
                            }
                            v457 = *((_QWORD *)v629 + 2);
                            v536 = *((_DWORD *)v629 + 6);
                            v458 = *(_QWORD *)v256;
                            if (v607 < 3)
                              v459 = 1;
                            else
                              v459 = (v457 >> 4) & 1;
                            v460 = (v457 >> 5) & 1;
                            if (v607 < 3)
                              LODWORD(v460) = 1;
                            v269 = v459 == 0;
                            v461 = 64;
                            if (v269)
                              v461 = 0;
                            v519 = v461;
                            v462 = 128;
                            if (!(_DWORD)v460)
                              v462 = 0;
                            v514 = v462;
                            v463 = v258 + v458;
                            sub_1C50173D4(&v598, v2, (_QWORD *)v629 + v258, v458);
                            sub_1C5017530((void **)&v596, v2, (uint64_t)v629 + 8 * v463, v630 - (uint64_t)v463, v512 == 1, v125 == 5, 0);
                            LODWORD(__dst[0]) = v255;
                            v545 = *((_QWORD *)sub_1C61D0C8C(v581, (int *)__dst) + 1);
                            v465 = v598;
                            v464 = v599;
                            v466 = (_BYTE *)v599 - v598;
                            v467 = ((unint64_t)((_BYTE *)v599 - v598) >> 3) - v257;
                            v468 = (v467 - v384);
                            if (v468 >= v467)
                            {
                              v471 = v467 - v384;
                              v5 = v565;
                            }
                            else
                            {
                              v469 = v467 - v468;
                              v470 = &v598[8 * v468];
                              v5 = v565;
                              do
                              {
                                *(_QWORD *)v470 |= 2uLL;
                                v470 += 8;
                                --v469;
                              }
                              while (v469);
                              v468 = v467;
                              v471 = v467;
                            }
                            v472 = v466 >> 3;
                            if (v472 > v468)
                            {
                              v473 = v471 + 1;
                              do
                              {
                                *(_QWORD *)&v465[8 * v468] |= 4uLL;
                                v468 = v473;
                                v17 = v472 > v473++;
                              }
                              while (v17);
                            }
                            v474 = v457 & 0xF | (16 * ((v457 >> 8) & 3)) & 0xFFFFFFFFFFFFFCFFLL | ((unint64_t)(v457 >> 6) << 8) | v519 | v514;
                            v475 = operator new();
                            __dst[0] = v465;
                            __dst[1] = v464;
                            __dst[2] = v600;
                            v598 = 0;
                            v599 = 0;
                            v600 = 0;
                            v634 = v596;
                            *(_QWORD *)&v635 = v597;
                            v596 = 0uLL;
                            v597 = 0;
                            v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v521;
                            v624.__r_.__value_.__l.__size_ = (std::string::size_type)v520;
                            v624.__r_.__value_.__r.__words[2] = v517;
                            __p[0] = v557;
                            __p[1] = v572;
                            v622 = v515;
                            v612.__r_.__value_.__r.__words[0] = (std::string::size_type)v559;
                            v612.__r_.__value_.__l.__size_ = (std::string::size_type)v579;
                            v612.__r_.__value_.__r.__words[2] = v516;
                            v638 = v605;
                            v639 = v606;
                            v605 = 0uLL;
                            v606 = 0;
                            v610 = v603;
                            v611 = v604;
                            v603 = 0uLL;
                            v604 = 0;
                            v608 = v601;
                            v609 = v602;
                            v601 = 0uLL;
                            v602 = 0;
                            v518 = v475;
                            sub_1C61A8204(v475, v474, v536, v526 & 0x3FF, (uint64_t)__srcc, (__int128 *)__dst, (uint64_t)&v634, (uint64_t *)&v624, (__int128 *)__p, (__int128 *)&v612, &v638, &v610, (uint64_t)&v608);
                            v613 = (void **)&v608;
                            sub_1C4EEB7D8(&v613);
                            v613 = (void **)&v610;
                            sub_1C4EEBCC8(&v613);
                            v613 = (void **)&v638;
                            sub_1C4EEBCC8(&v613);
                            if (v612.__r_.__value_.__r.__words[0])
                            {
                              v612.__r_.__value_.__l.__size_ = v612.__r_.__value_.__r.__words[0];
                              operator delete(v612.__r_.__value_.__l.__data_);
                            }
                            if (__p[0])
                            {
                              __p[1] = __p[0];
                              operator delete(__p[0]);
                            }
                            if (v624.__r_.__value_.__r.__words[0])
                            {
                              v624.__r_.__value_.__l.__size_ = v624.__r_.__value_.__r.__words[0];
                              operator delete(v624.__r_.__value_.__l.__data_);
                            }
                            if ((_QWORD)v634)
                            {
                              *((_QWORD *)&v634 + 1) = v634;
                              operator delete((void *)v634);
                            }
                            if (__dst[0])
                            {
                              __dst[1] = __dst[0];
                              operator delete(__dst[0]);
                            }
                            v513 = *(uint64_t **)(v545 & 0xFFFFFFFFFFFFFFF8);
                            *(_OWORD *)(v518 + 24) = *(_OWORD *)(sub_1C61D0EF8(v576, &v588) + 1);
                            v476 = *(_QWORD *)(v2 + 416);
                            v587 = v518;
                            sub_1C4EEBD40(v476, v545, &v587);
                            v477 = v587;
                            v587 = 0;
                            if (v477)
                              (*(void (**)(uint64_t))(*(_QWORD *)v477 + 8))(v477);
                            v515 = 0;
                            v516 = 0;
                            v557 = 0;
                            v559 = 0;
                            v579 = 0;
                            v572 = 0;
                            v517 = 0;
                            v520 = 0;
                            v521 = 0;
                            goto LABEL_679;
                          case 6:
                            v392 = *(_DWORD *)v629;
                            v393 = *((_QWORD *)v629 + 2);
                            *(_QWORD *)&v634 = *((_QWORD *)v629 + 1);
                            v394 = (v393 >> 4) & 1;
                            if (v607 < 3)
                              LODWORD(v394) = 1;
                            v395 = (v393 >> 5) & 1;
                            if (v607 < 3)
                              LODWORD(v395) = 1;
                            if ((_DWORD)v394)
                              v396 = 64;
                            else
                              v396 = 0;
                            if ((_DWORD)v395)
                              v397 = 128;
                            else
                              v397 = 0;
                            if (v607 < 5)
                            {
                              v398 = 0;
                              v399 = 3;
                            }
                            else
                            {
                              v398 = *((_DWORD *)v629 + 6) & 0x1F;
                              v399 = 4;
                            }
                            v451 = v393 & 0xF | (16 * ((v393 >> 8) & 3)) & 0xFFFFFCFF | (v393 >> 6 << 8) | v396 | v397;
                            sub_1C50173D4((char **)__dst, v2, (_QWORD *)v629 + v399, v630 - v399);
                            v452 = operator new();
                            v453 = __dst[2];
                            v454 = *(_OWORD *)__dst;
                            memset(__dst, 0, sizeof(__dst));
                            *(_DWORD *)(v452 + 8) = 2;
                            *(_DWORD *)(v452 + 12) = v451;
                            *(_QWORD *)(v452 + 24) = 0;
                            *(_QWORD *)(v452 + 32) = 0;
                            *(_QWORD *)(v452 + 16) = 0;
                            *(_OWORD *)(v452 + 40) = v454;
                            *(_QWORD *)v452 = &unk_1E8139E20;
                            *(_QWORD *)(v452 + 56) = v453;
                            *(_QWORD *)(v452 + 64) = 0;
                            *(_DWORD *)(v452 + 72) = v398;
                            *(_OWORD *)(v452 + 24) = *(_OWORD *)(sub_1C61D0EF8(v576, &v634) + 1);
                            LODWORD(v624.__r_.__value_.__l.__data_) = v392;
                            v455 = *((_QWORD *)sub_1C61D0C8C(v581, (int *)&v624) + 1);
                            v513 = *(uint64_t **)(v455 & 0xFFFFFFFFFFFFFFF8);
                            v456 = *(_QWORD *)(v2 + 416);
                            v518 = v452;
                            v585 = v452;
                            sub_1C4EEBD40(v456, v455, &v585);
                            v336 = v585;
                            v585 = 0;
                            if (v336)
                              goto LABEL_623;
                            goto LABEL_317;
                          case 7:
                            v361 = *(_QWORD *)v629;
                            v360 = *((_QWORD *)v629 + 1);
                            v362 = *((_DWORD *)v629 + 4);
                            if (v607 < 3)
                              v363 = 1;
                            else
                              v363 = (v360 >> 4) & 1;
                            v364 = (v360 >> 5) & 1;
                            if (v607 < 3)
                              LODWORD(v364) = 1;
                            v365 = v360 >> 6;
                            v366 = v360 & 0xF | (16 * ((v360 >> 8) & 3));
                            if (v363)
                              v367 = 64;
                            else
                              v367 = 0;
                            if ((_DWORD)v364)
                              v368 = 128;
                            else
                              v368 = 0;
                            v369 = v366 & 0xFFFFFCFF | ((v365 & 3) << 8) | v367 | v368;
                            v370 = operator new();
                            *(_DWORD *)(v370 + 8) = 0;
                            *(_DWORD *)(v370 + 12) = v369;
                            *(_OWORD *)(v370 + 32) = 0u;
                            *(_OWORD *)(v370 + 48) = 0u;
                            *(_OWORD *)(v370 + 16) = 0u;
                            *(_QWORD *)v370 = &unk_1E8139E40;
                            *(_QWORD *)(v370 + 64) = 0;
                            *(_QWORD *)(v370 + 72) = 0;
                            v542 = *(_QWORD *)(v2 + 416);
                            v371 = *(unsigned int *)(v542 + 32);
                            v567 = v5;
                            v506 = v361;
                            v525 = (_QWORD *)v370;
                            v509 = v362;
                            if ((_DWORD)v371)
                            {
                              v372 = *(_QWORD *)(v2 + 520);
                              v373 = *(const void **)(v2 + 512);
                              v374 = 0;
                              if (v372)
                              {
                                v375 = *(_QWORD *)(v2 + 520);
                                v376 = *(unsigned __int8 **)(v2 + 512);
                                do
                                {
                                  v377 = *v376++;
                                  v374 = 33 * v374 + v377;
                                  --v375;
                                }
                                while (v375);
                              }
                              v378 = v371 - 1;
                              v379 = *(_QWORD *)(v542 + 24);
                              v533 = *(unsigned int *)(v542 + 32);
                              __srce = (_DWORD *)(v379 + 8 * v371 + 8);
                              v380 = 1;
                              v381 = v374;
                              while (1)
                              {
                                v382 = v381 & v378;
                                v383 = *(_QWORD **)(v379 + 8 * v382);
                                if (v383 != (_QWORD *)-8)
                                {
                                  if (!v383)
                                    goto LABEL_669;
                                  if (__srce[v382] == v374
                                    && v372 == *v383
                                    && (!v372 || !memcmp(v373, (char *)v383 + *(unsigned int *)(v542 + 44), v372)))
                                  {
                                    break;
                                  }
                                }
                                v381 = v380 + v382;
                                ++v380;
                              }
                              v478 = v533;
                              if ((_DWORD)v382 != -1)
                                v478 = (int)v382;
                              v533 = v478;
                            }
                            else
                            {
                              v533 = 0;
                              v379 = *(_QWORD *)(v542 + 24);
                            }
LABEL_669:
                            v479 = *(uint64_t **)(v379 + 8 * v533);
                            v480 = *v479;
                            v525[3] = v479 + 5;
                            v525[4] = v480;
                            LODWORD(__dst[0]) = v509;
                            v481 = *((_QWORD *)sub_1C61D0C8C(v581, (int *)__dst) + 1);
                            v482 = sub_1C61CD658(*(_QWORD *)(v2 + 416), v481, *(void **)(v2 + 512), *(_QWORD *)(v2 + 520));
                            v5 = v567;
                            if (!v482)
                            {
                              __dst[0] = "Alias expects aliasee summary to be parsed";
                              LOWORD(v628) = 259;
                              sub_1C500A780(a1, v2, (llvm::Twine *)__dst);
                              (*(void (**)(_QWORD *))(*v525 + 8))(v525);
                              goto LABEL_227;
                            }
                            v525[8] = v481;
                            v525[9] = v482;
                            LODWORD(__dst[0]) = v506;
                            v483 = sub_1C61D0C8C(v581, (int *)__dst);
                            v484 = *((_QWORD *)v483 + 1);
                            v525[2] = *((_QWORD *)v483 + 2);
                            v485 = *(_QWORD *)(v2 + 416);
                            v594 = v525;
                            sub_1C4EEBD40(v485, v484, (uint64_t *)&v594);
                            v486 = (uint64_t)v594;
                            v594 = 0;
                            if (v486)
                              (*(void (**)(uint64_t))(*(_QWORD *)v486 + 8))(v486);
                            v124 = 1;
                            goto LABEL_318;
                          case 8:
                            v321 = *(_QWORD *)v629;
                            __dst[0] = *((void **)v629 + 1);
                            v322 = *((_QWORD *)v629 + 2);
                            v323 = *((_QWORD *)v629 + 3);
                            if (v607 < 3)
                              v324 = 1;
                            else
                              v324 = (v322 >> 4) & 1;
                            v325 = (v322 >> 5) & 1;
                            if (v607 < 3)
                              LODWORD(v325) = 1;
                            v326 = v322 >> 6;
                            v327 = v322 & 0xF | (16 * ((v322 >> 8) & 3));
                            if (v324)
                              v328 = 64;
                            else
                              v328 = 0;
                            if ((_DWORD)v325)
                              v329 = 128;
                            else
                              v329 = 0;
                            v330 = v327 & 0xFFFFFCFF | ((v326 & 3) << 8) | v328 | v329;
                            v331 = operator new();
                            *(_DWORD *)(v331 + 8) = 0;
                            *(_DWORD *)(v331 + 12) = v330;
                            *(_OWORD *)(v331 + 16) = 0u;
                            *(_OWORD *)(v331 + 32) = 0u;
                            *(_OWORD *)(v331 + 48) = 0u;
                            *(_QWORD *)v331 = &unk_1E8139E40;
                            *(_QWORD *)(v331 + 64) = 0;
                            *(_QWORD *)(v331 + 72) = 0;
                            *(_OWORD *)(v331 + 24) = *(_OWORD *)(sub_1C61D0EF8(v576, __dst) + 1);
                            LODWORD(v634) = v323;
                            v332 = *((_QWORD *)sub_1C61D0C8C(v581, (int *)&v634) + 1);
                            v333 = sub_1C61CD658(*(_QWORD *)(v2 + 416), v332, *(void **)(v331 + 24), *(_QWORD *)(v331 + 32));
                            *(_QWORD *)(v331 + 64) = v332;
                            *(_QWORD *)(v331 + 72) = v333;
                            LODWORD(v634) = v321;
                            v334 = *((_QWORD *)sub_1C61D0C8C(v581, (int *)&v634) + 1);
                            v513 = *(uint64_t **)(v334 & 0xFFFFFFFFFFFFFFF8);
                            v335 = *(_QWORD *)(v2 + 416);
                            v518 = v331;
                            v586 = v331;
                            sub_1C4EEBD40(v335, v334, &v586);
                            v336 = v586;
                            v586 = 0;
                            if (!v336)
                              goto LABEL_317;
LABEL_623:
                            (*(void (**)(uint64_t))(*(_QWORD *)v336 + 8))(v336);
                            goto LABEL_317;
                          case 9:
                            if (v518)
                            {
                              v238 = *(_QWORD *)v629;
                              *(_QWORD *)(v518 + 16) = *(_QWORD *)v629;
                              sub_1C4EEBDCC(*(uint64_t ***)(v2 + 416), v513, v238);
                              v513 = 0;
                              v518 = 0;
                            }
                            else
                            {
                              __dst[0] = "Name attachment that does not follow a combined record";
                              LOWORD(v628) = 259;
                              sub_1C500A780(a1, v2, (llvm::Twine *)__dst);
                              v518 = 0;
LABEL_227:
                              v124 = 0;
                            }
                            goto LABEL_318;
                          case 11:
                            v213 = v630;
                            if (!(_DWORD)v630)
                              goto LABEL_318;
                            v214 = (char *)v629;
                            v215 = v520;
                            v216 = v520 - v521;
                            v217 = &v521[(v520 - v521) & 0xFFFFFFFFFFFFFFF8];
                            if (v630 <= (uint64_t)(v517 - (_QWORD)v520) >> 3)
                            {
                              v239 = (char *)v629 + 8 * v630;
                              v240 = v520 - v217;
                              v241 = (v520 - v217) >> 3;
                              if (v241 >= v630)
                              {
                                v244 = v520;
                              }
                              else
                              {
                                v539 = (char *)v629;
                                v242 = (char *)v629 + 8 * v241;
                                v243 = v239 - v242;
                                memmove(v520, v242, v243);
                                v244 = &v520[v243];
                                if (v240 < 1)
                                {
                                  v124 = 1;
                                  v520 = v244;
                                  goto LABEL_318;
                                }
                                v239 = v242;
                                v215 = v520;
                                v214 = v539;
                                v217 = &v521[(v520 - v521) & 0xFFFFFFFFFFFFFFF8];
                              }
                              v249 = &v244[-8 * v213];
                              v250 = v244;
                              while (v249 < v215)
                              {
                                v251 = *(_QWORD *)v249;
                                v249 += 8;
                                *(_QWORD *)v250 = v251;
                                v250 += 8;
                              }
                              v252 = &v217[8 * v213];
                              if (v244 != v252)
                              {
                                v253 = v217;
                                v254 = v214;
                                memmove(&v244[-8 * ((v244 - v252) >> 3)], v217, v244 - v252);
                                v214 = v254;
                                v217 = v253;
                              }
                              if (v239 != v214)
                                memmove(v217, v214, v239 - v214);
                              v124 = 1;
                              v520 = v250;
                            }
                            else
                            {
                              v218 = v216 >> 3;
                              v219 = (v216 >> 3) + v630;
                              if (v219 >> 61)
LABEL_738:
                                abort();
                              if ((uint64_t)(v517 - (_QWORD)v521) >> 2 > v219)
                                v219 = (uint64_t)(v517 - (_QWORD)v521) >> 2;
                              v220 = 0x1FFFFFFFFFFFFFFFLL;
                              if (v517 - (unint64_t)v521 < 0x7FFFFFFFFFFFFFF8)
                                v220 = v219;
                              __srca = v220;
                              if (v220)
                              {
                                if (v220 >> 61)
LABEL_739:
                                  sub_1C4764EE4();
                                v221 = (char *)v629;
                                v222 = &v521[(v520 - v521) & 0xFFFFFFFFFFFFFFF8];
                                v223 = (char *)operator new(8 * v220);
                                v214 = v221;
                              }
                              else
                              {
                                v222 = &v521[(v520 - v521) & 0xFFFFFFFFFFFFFFF8];
                                v223 = 0;
                              }
                              v261 = &v223[8 * v218];
                              memcpy(v261, v214, 8 * v213);
                              v262 = v521;
                              if (v521 == v520)
                              {
                                v264 = v5;
                              }
                              else
                              {
                                v263 = 8 * v218;
                                do
                                {
                                  *(_QWORD *)&v223[v263 - 8] = *(_QWORD *)&v521[v263 - 8];
                                  v263 -= 8;
                                }
                                while (v263);
                                v264 = v5;
                                v261 = v223;
                                v262 = v521;
                              }
                              v265 = &v223[8 * v213 + (v216 & 0xFFFFFFFFFFFFFFF8)];
                              if (v520 != v222)
                              {
                                memmove(v265, v222, v520 - v222);
                                v262 = v521;
                              }
                              v517 = (std::string::size_type)&v223[8 * __srca];
                              v520 = &v265[v520 - v222];
                              if (v262)
                                operator delete(v262);
                              v124 = 1;
                              v521 = v261;
                              v5 = v264;
                            }
                            goto LABEL_318;
                          case 12:
                            if (!(_DWORD)v630)
                              goto LABEL_318;
                            v199 = 0;
                            v200 = v515;
                            do
                            {
                              v201 = *((_QWORD *)v629 + v199);
                              v202 = *((_QWORD *)v629 + (v199 | 1));
                              if (v572 >= v200)
                              {
                                v203 = v5;
                                v204 = ((char *)v572 - v557) >> 4;
                                v205 = v204 + 1;
                                if ((unint64_t)(v204 + 1) >> 60)
                                  goto LABEL_738;
                                if (((char *)v200 - v557) >> 3 > v205)
                                  v205 = ((char *)v200 - v557) >> 3;
                                if ((unint64_t)((char *)v200 - v557) >= 0x7FFFFFFFFFFFFFF0)
                                  v206 = 0xFFFFFFFFFFFFFFFLL;
                                else
                                  v206 = v205;
                                if (v206)
                                {
                                  if (v206 >> 60)
                                    goto LABEL_739;
                                  v207 = (char *)operator new(16 * v206);
                                }
                                else
                                {
                                  v207 = 0;
                                }
                                v208 = &v207[16 * v204];
                                *(_QWORD *)v208 = v201;
                                *((_QWORD *)v208 + 1) = v202;
                                v209 = (char *)v572;
                                if (v572 == (unint64_t *)v557)
                                {
                                  v211 = &v207[16 * v204];
                                  v5 = v203;
                                }
                                else
                                {
                                  v210 = &v207[16 * v204];
                                  v5 = v203;
                                  do
                                  {
                                    v211 = v210 - 16;
                                    *((_OWORD *)v210 - 1) = *((_OWORD *)v209 - 1);
                                    v209 -= 16;
                                    v210 -= 16;
                                  }
                                  while (v209 != v557);
                                }
                                v200 = (unint64_t *)&v207[16 * v206];
                                v572 = (unint64_t *)(v208 + 16);
                                if (v557)
                                {
                                  v212 = &v207[16 * v206];
                                  operator delete(v557);
                                  v200 = (unint64_t *)v212;
                                }
                                v557 = v211;
                              }
                              else
                              {
                                *v572 = v201;
                                v572[1] = v202;
                                v572 += 2;
                              }
                              v199 += 2;
                              v124 = 1;
                            }
                            while ((_DWORD)v630 != v199);
                            v515 = v200;
                            goto LABEL_318;
                          case 13:
                            if (!(_DWORD)v630)
                              goto LABEL_318;
                            v224 = 0;
                            v225 = (char *)v516;
                            do
                            {
                              v226 = *((_QWORD *)v629 + v224);
                              v227 = *((_QWORD *)v629 + (v224 | 1));
                              if (v579 >= v225)
                              {
                                v228 = v5;
                                v229 = (v579 - v559) >> 4;
                                v230 = v229 + 1;
                                if ((unint64_t)(v229 + 1) >> 60)
                                  goto LABEL_738;
                                if ((v225 - v559) >> 3 > v230)
                                  v230 = (v225 - v559) >> 3;
                                if ((unint64_t)(v225 - v559) >= 0x7FFFFFFFFFFFFFF0)
                                  v231 = 0xFFFFFFFFFFFFFFFLL;
                                else
                                  v231 = v230;
                                if (v231)
                                {
                                  if (v231 >> 60)
                                    goto LABEL_739;
                                  v232 = (char *)operator new(16 * v231);
                                }
                                else
                                {
                                  v232 = 0;
                                }
                                v233 = &v232[16 * v229];
                                *(_QWORD *)v233 = v226;
                                *((_QWORD *)v233 + 1) = v227;
                                v234 = v579;
                                if (v579 == v559)
                                {
                                  v236 = &v232[16 * v229];
                                  v5 = v228;
                                }
                                else
                                {
                                  v235 = &v232[16 * v229];
                                  v5 = v228;
                                  do
                                  {
                                    v236 = v235 - 16;
                                    *((_OWORD *)v235 - 1) = *((_OWORD *)v234 - 1);
                                    v234 -= 16;
                                    v235 -= 16;
                                  }
                                  while (v234 != v559);
                                }
                                v225 = &v232[16 * v231];
                                v579 = v233 + 16;
                                if (v559)
                                {
                                  v237 = &v232[16 * v231];
                                  operator delete(v559);
                                  v225 = v237;
                                }
                                v559 = v236;
                              }
                              else
                              {
                                *(_QWORD *)v579 = v226;
                                *((_QWORD *)v579 + 1) = v227;
                                v579 += 16;
                              }
                              v224 += 2;
                              v124 = 1;
                            }
                            while ((_DWORD)v630 != v224);
                            v516 = (std::string::size_type)v225;
                            goto LABEL_318;
                          case 14:
                            v192 = (char *)v629 + 16;
                            *(_OWORD *)__dst = *(_OWORD *)v629;
                            v193 = v630;
                            v194 = 8 * v630;
                            v627 = 0;
                            v628 = 0;
                            __dst[2] = 0;
                            v195 = v194 - 16;
                            if (v194 == 16)
                              goto LABEL_314;
                            if (v630 <= 1)
                              goto LABEL_738;
                            v196 = (char *)operator new(v194 - 16);
                            v197 = &v196[8 * (v195 >> 3)];
                            __dst[2] = v196;
                            v628 = v197;
                            if (v193 != 2)
                              memmove(v196, v192, v195);
                            v627 = v197;
LABEL_314:
                            v164 = &v605;
                            goto LABEL_315;
                          case 15:
                            v158 = (char *)v629 + 16;
                            *(_OWORD *)__dst = *(_OWORD *)v629;
                            v159 = v630;
                            v160 = 8 * v630;
                            v627 = 0;
                            v628 = 0;
                            __dst[2] = 0;
                            v161 = v160 - 16;
                            if (v160 == 16)
                              goto LABEL_271;
                            if (v630 <= 1)
                              goto LABEL_738;
                            v162 = (char *)operator new(v160 - 16);
                            v163 = &v162[8 * (v161 >> 3)];
                            __dst[2] = v162;
                            v628 = v163;
                            if (v159 != 2)
                              memmove(v162, v158, v161);
                            v627 = v163;
LABEL_271:
                            v164 = &v603;
LABEL_315:
                            sub_1C5017748((uint64_t *)v164, (uint64_t)__dst);
                            if (__dst[2])
                              operator delete(__dst[2]);
LABEL_317:
                            v124 = 1;
                            goto LABEL_318;
                          case 16:
                            v306 = *(_QWORD *)v629;
                            v307 = *((_QWORD *)v629 + 1);
                            v308 = *(_QWORD *)(v2 + 416);
                            v309 = *(unsigned __int8 *)(v308 + 133);
                            v310 = (unint64_t)sub_1C4EEA81C(v308, v307) & 0xFFFFFFFFFFFFFFF8 | v309;
                            LODWORD(__dst[0]) = v306;
                            v311 = sub_1C61D0C8C(v581, (int *)__dst);
                            *((_QWORD *)v311 + 1) = v310;
                            *((_QWORD *)v311 + 2) = v307;
                            goto LABEL_679;
                          case 17:
                            if (!(_DWORD)v630)
                              goto LABEL_318;
                            v562 = v5;
                            v184 = 0;
                            v185 = *(_QWORD *)(v2 + 416) + 144;
                            while (1)
                            {
                              v186 = *((_QWORD *)v629 + v184 + 1);
                              if (v186 > 0x7FFFFFFFFFFFFFF7)
                                goto LABEL_738;
                              v187 = *(_QWORD *)(v2 + 368);
                              v188 = *((_QWORD *)v629 + v184);
                              if (v186 >= 0x17)
                              {
                                v190 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v186 | 7) != 0x17)
                                  v190 = v186 | 7;
                                v191 = v190 + 1;
                                v189 = operator new(v190 + 1);
                                __dst[2] = (void *)(v191 | 0x8000000000000000);
                                __dst[0] = v189;
                                __dst[1] = (void *)v186;
                              }
                              else
                              {
                                HIBYTE(__dst[2]) = *((_QWORD *)v629 + v184 + 1);
                                v189 = __dst;
                                if (!v186)
                                  goto LABEL_305;
                              }
                              memmove(v189, (const void *)(v187 + v188), v186);
LABEL_305:
                              *((_BYTE *)v189 + v186) = 0;
                              sub_1C5017940(v185, (const void **)__dst, (uint64_t)__dst);
                              if (SHIBYTE(__dst[2]) < 0)
                                operator delete(__dst[0]);
                              v184 += 2;
                              v124 = 1;
                              if (v184 == (_DWORD)v630)
                                goto LABEL_308;
                            }
                          case 18:
                            if (!(_DWORD)v630)
                              goto LABEL_318;
                            v562 = v5;
                            v127 = 0;
                            v128 = *(_QWORD *)(v2 + 416) + 168;
                            while (1)
                            {
                              v129 = *((_QWORD *)v629 + v127 + 1);
                              if (v129 > 0x7FFFFFFFFFFFFFF7)
                                goto LABEL_738;
                              v130 = *(_QWORD *)(v2 + 368);
                              v131 = *((_QWORD *)v629 + v127);
                              if (v129 >= 0x17)
                              {
                                v133 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v129 | 7) != 0x17)
                                  v133 = v129 | 7;
                                v134 = v133 + 1;
                                v132 = operator new(v133 + 1);
                                __dst[2] = (void *)(v134 | 0x8000000000000000);
                                __dst[0] = v132;
                                __dst[1] = (void *)v129;
                              }
                              else
                              {
                                HIBYTE(__dst[2]) = *((_QWORD *)v629 + v127 + 1);
                                v132 = __dst;
                                if (!v129)
                                  goto LABEL_240;
                              }
                              memmove(v132, (const void *)(v130 + v131), v129);
LABEL_240:
                              *((_BYTE *)v132 + v129) = 0;
                              sub_1C5017940(v128, (const void **)__dst, (uint64_t)__dst);
                              if (SHIBYTE(__dst[2]) < 0)
                                operator delete(__dst[0]);
                              v127 += 2;
                              v124 = 1;
                              if (v127 == (_DWORD)v630)
                              {
LABEL_308:
                                v5 = v562;
                                goto LABEL_318;
                              }
                            }
                          case 20:
                            llvm::ModuleSummaryIndex::setFlags(*(_BYTE **)(v2 + 416), *(_QWORD *)v629);
                            goto LABEL_318;
                          case 21:
                            v135 = (int64x2_t *)v629;
                            v136 = v630;
                            v522 = *(_QWORD *)(v2 + 368);
                            v137 = (int32x2_t *)sub_1C4FC90EC(*(_QWORD *)(v2 + 416), (int *)(v522 + *(_QWORD *)v629), *((_QWORD *)v629 + 1));
                            *v137 = vmovn_s64(v135[1]);
                            v137[1] = *(int32x2_t *)v135[2].i8;
                            v137[2] = (int32x2_t)v135[2].u64[1];
                            v137[3].i8[0] = v135[3].i64[0];
                            v137[4] = (int32x2_t)v135[3].u64[1];
                            v537 = v136;
                            if (v136 < 9)
                              goto LABEL_679;
                            v563 = v5;
                            v529 = (uint64_t **)&v137[5];
                            v138 = 8;
                            break;
                          case 22:
                            v165 = v629;
                            v166 = v630;
                            v167 = sub_1C4EEC3B4(*(_QWORD *)(v2 + 416), (void *)(*(_QWORD *)(v2 + 368) + *(_QWORD *)v629), *((_QWORD *)v629 + 1));
                            if (v166 < 3)
                              goto LABEL_318;
                            v168 = (_QWORD *)v167;
                            v563 = v5;
                            v169 = 2;
                            v530 = v166;
                            v538 = v165;
                            do
                            {
                              v170 = v165[v169];
                              LODWORD(__dst[0]) = *(_QWORD *)((char *)v165 + ((8 * v169) | 8));
                              v171 = *((_QWORD *)sub_1C61D0C8C(v581, (int *)__dst) + 1);
                              v173 = (_QWORD *)v168[1];
                              v172 = v168[2];
                              if ((unint64_t)v173 >= v172)
                              {
                                v175 = (_QWORD *)*v168;
                                v176 = ((uint64_t)v173 - *v168) >> 4;
                                v177 = v176 + 1;
                                if ((unint64_t)(v176 + 1) >> 60)
                                  goto LABEL_738;
                                v178 = v172 - (_QWORD)v175;
                                if (v178 >> 3 > v177)
                                  v177 = v178 >> 3;
                                if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFF0)
                                  v177 = 0xFFFFFFFFFFFFFFFLL;
                                __src = (void *)v177;
                                if (v177)
                                {
                                  if (v177 >> 60)
                                    goto LABEL_739;
                                  v179 = v171;
                                  v180 = (char *)operator new(16 * v177);
                                  v171 = v179;
                                }
                                else
                                {
                                  v180 = 0;
                                }
                                v181 = &v180[16 * v176];
                                *(_QWORD *)v181 = v170;
                                *((_QWORD *)v181 + 1) = v171;
                                v182 = v181;
                                if (v173 == v175)
                                {
                                  v166 = v530;
                                  v183 = __src;
                                }
                                else
                                {
                                  v166 = v530;
                                  v183 = __src;
                                  do
                                  {
                                    *((_OWORD *)v182 - 1) = *((_OWORD *)v173 - 1);
                                    v182 -= 16;
                                    v173 -= 2;
                                  }
                                  while (v173 != v175);
                                  v173 = (_QWORD *)*v168;
                                }
                                v174 = v181 + 16;
                                *v168 = v182;
                                v168[1] = v181 + 16;
                                v168[2] = &v180[16 * (_QWORD)v183];
                                if (v173)
                                  operator delete(v173);
                                v165 = v538;
                              }
                              else
                              {
                                *v173 = v170;
                                v173[1] = v171;
                                v174 = v173 + 2;
                              }
                              v169 += 2;
                              v168[1] = v174;
                              v124 = 1;
                            }
                            while (v169 < v166);
LABEL_294:
                            v5 = v563;
                            goto LABEL_318;
                          case 23:
                            v505 = *(_DWORD *)v629;
                            v312 = *((_QWORD *)v629 + 1);
                            v532 = *((_DWORD *)v629 + 4);
                            v313 = *((_QWORD *)v629 + 3) + 4;
                            if (v607 < 3)
                              v314 = 1;
                            else
                              v314 = (v312 >> 4) & 1;
                            v541 = *((_QWORD *)v629 + 1);
                            v315 = (v312 >> 5) & 1;
                            if (v607 < 3)
                              LODWORD(v315) = 1;
                            if (v314)
                              v316 = 64;
                            else
                              v316 = 0;
                            v524 = v316;
                            if ((_DWORD)v315)
                              v317 = 128;
                            else
                              v317 = 0;
                            v508 = v317;
                            sub_1C50173D4((char **)__dst, v2, (_QWORD *)v629 + 4, *((_QWORD *)v629 + 3));
                            v318 = v630;
                            v566 = v5;
                            if (v313 == (_DWORD)v630)
                            {
                              v319 = 0;
                              v320 = 0;
                            }
                            else
                            {
                              v400 = 0;
                              v320 = 0;
                              v319 = 0;
                              do
                              {
                                LODWORD(v634) = *((_QWORD *)v629 + v313);
                                v401 = *((_QWORD *)sub_1C61D0C8C(v581, (int *)&v634) + 1);
                                v402 = *((_QWORD *)v629 + v313 + 1);
                                if (v319 >= v400)
                                {
                                  v403 = v400;
                                  v404 = v318;
                                  v405 = (v319 - v320) >> 4;
                                  v406 = v405 + 1;
                                  if ((unint64_t)(v405 + 1) >> 60)
                                    goto LABEL_738;
                                  v407 = v403 - v320;
                                  v408 = (v403 - v320) >> 3;
                                  if (v408 > v406)
                                    v406 = v408;
                                  if (v407 >= 0x7FFFFFFFFFFFFFF0)
                                    v409 = 0xFFFFFFFFFFFFFFFLL;
                                  else
                                    v409 = v406;
                                  if (v409)
                                  {
                                    if (v409 >> 60)
                                      goto LABEL_739;
                                    __srch = (void *)v409;
                                    v410 = (char *)operator new(16 * v409);
                                    v409 = (unint64_t)__srch;
                                  }
                                  else
                                  {
                                    v410 = 0;
                                  }
                                  v411 = &v410[16 * v405];
                                  *(_QWORD *)v411 = v401;
                                  *((_QWORD *)v411 + 1) = v402;
                                  if (v319 == v320)
                                  {
                                    v412 = &v410[16 * v405];
                                    v318 = v404;
                                  }
                                  else
                                  {
                                    v413 = &v410[16 * v405];
                                    v318 = v404;
                                    do
                                    {
                                      v412 = v413 - 16;
                                      *((_OWORD *)v413 - 1) = *((_OWORD *)v319 - 1);
                                      v319 -= 16;
                                      v413 -= 16;
                                    }
                                    while (v319 != v320);
                                  }
                                  v400 = &v410[16 * v409];
                                  v319 = v411 + 16;
                                  if (v320)
                                    operator delete(v320);
                                  v320 = v412;
                                }
                                else
                                {
                                  *(_QWORD *)v319 = v401;
                                  *((_QWORD *)v319 + 1) = v402;
                                  v319 += 16;
                                }
                                v313 += 2;
                              }
                              while (v313 != (_DWORD)v318);
                            }
                            v414 = operator new();
                            v415 = __dst[2];
                            v416 = *(_OWORD *)__dst;
                            memset(__dst, 0, sizeof(__dst));
                            *(_DWORD *)(v414 + 8) = 2;
                            *(_DWORD *)(v414 + 12) = v541 & 0xF | (16 * ((v541 >> 8) & 3)) & 0xFFFFFCFF | (v541 >> 6 << 8) | v524 | v508;
                            *(_QWORD *)(v414 + 24) = 0;
                            *(_QWORD *)(v414 + 32) = 0;
                            *(_QWORD *)(v414 + 16) = 0;
                            *(_OWORD *)(v414 + 40) = v416;
                            *(_QWORD *)v414 = &unk_1E8139E20;
                            *(_QWORD *)(v414 + 56) = v415;
                            *(_QWORD *)(v414 + 64) = 0;
                            *(_DWORD *)(v414 + 72) = v532 & 0x1F;
                            v543 = *(_QWORD *)(v2 + 416);
                            v417 = *(unsigned int *)(v543 + 32);
                            v504 = (_QWORD *)v414;
                            if ((_DWORD)v417)
                            {
                              v418 = *(_QWORD *)(v2 + 520);
                              v419 = *(const void **)(v2 + 512);
                              v420 = 0;
                              if (v418)
                              {
                                v421 = *(_QWORD *)(v2 + 520);
                                v422 = *(unsigned __int8 **)(v2 + 512);
                                do
                                {
                                  v423 = *v422++;
                                  v420 = 33 * v420 + v423;
                                  --v421;
                                }
                                while (v421);
                              }
                              v424 = v417 - 1;
                              v425 = *(_QWORD *)(v543 + 24);
                              v510 = *(unsigned int *)(v543 + 32);
                              __srcf = (_DWORD *)(v425 + 8 * v417 + 8);
                              v426 = 1;
                              v427 = v420;
                              v534 = v425;
                              v527 = v417 - 1;
                              while (1)
                              {
                                v428 = v427 & v424;
                                v429 = *(_QWORD **)(v425 + 8 * v428);
                                if (v429 != (_QWORD *)-8)
                                {
                                  if (!v429)
                                    goto LABEL_683;
                                  if (__srcf[v428] == v420 && v418 == *v429)
                                  {
                                    if (!v418)
                                      break;
                                    v430 = memcmp(v419, (char *)v429 + *(unsigned int *)(v543 + 44), v418);
                                    v424 = v527;
                                    v425 = v534;
                                    if (!v430)
                                      break;
                                  }
                                }
                                v427 = v426 + v428;
                                ++v426;
                              }
                              v494 = v510;
                              if ((_DWORD)v428 != -1)
                                v494 = (int)v428;
                              v510 = v494;
                            }
                            else
                            {
                              v510 = 0;
                              v425 = *(_QWORD *)(v543 + 24);
                            }
LABEL_683:
                            v495 = *(uint64_t **)(v425 + 8 * v510);
                            v496 = *v495;
                            v504[3] = v495 + 5;
                            v504[4] = v496;
                            v591 = 0;
                            v592 = 0;
                            v590 = 0;
                            sub_1C4EEC644(&v590, v320, (uint64_t)v319, (v319 - v320) >> 4);
                            sub_1C4EEBF94((uint64_t)v504, (uint64_t)&v590);
                            v5 = v566;
                            if (v590)
                            {
                              v591 = v590;
                              operator delete(v590);
                            }
                            LODWORD(v634) = v505;
                            v497 = sub_1C61D0C8C(v581, (int *)&v634);
                            v498 = *((_QWORD *)v497 + 1);
                            v504[2] = *((_QWORD *)v497 + 2);
                            v499 = *(_QWORD *)(v2 + 416);
                            v589 = v504;
                            sub_1C4EEBD40(v499, v498, (uint64_t *)&v589);
                            v500 = (uint64_t)v589;
                            v589 = 0;
                            if (v500)
                              (*(void (**)(uint64_t))(*(_QWORD *)v500 + 8))(v500);
                            if (v320)
                              operator delete(v320);
                            if (__dst[0])
                              operator delete(__dst[0]);
                            v124 = 1;
                            goto LABEL_318;
                          case 24:
                            *(_QWORD *)(*(_QWORD *)(v2 + 416) + 296) += *(_QWORD *)v629;
                            goto LABEL_318;
                          case 25:
                            v337 = v5;
                            v338 = v629;
                            v339 = v630;
                            memset(__dst, 0, sizeof(__dst));
                            if ((_DWORD)v630)
                            {
                              do
                              {
                                sub_1C61B72A0((uint64_t *)__dst);
                                v340 = __dst[1];
                                *((_QWORD *)__dst[1] - 8) = *v338;
                                v341 = v338[1];
                                v342 = v338[2];
                                v343 = -(uint64_t)(v341 >> 1);
                                if (v341 == 1)
                                  v343 = 0x8000000000000000;
                                if ((v341 & 1) != 0)
                                  v344 = v343;
                                else
                                  v344 = v341 >> 1;
                                v345 = -(uint64_t)(v342 >> 1);
                                if (v342 == 1)
                                  v345 = 0x8000000000000000;
                                if ((v342 & 1) != 0)
                                  v346 = v345;
                                else
                                  v346 = v342 >> 1;
                                if (*((_DWORD *)v340 - 12) >= 0x41u)
                                {
                                  v358 = *(v340 - 7);
                                  if (v358)
                                    MEMORY[0x1CAA32F9C](v358, 0x1000C8000313F17);
                                }
                                *(v340 - 7) = v344;
                                *((_DWORD *)v340 - 12) = 64;
                                if (*((_DWORD *)v340 - 8) >= 0x41u)
                                {
                                  v359 = *(v340 - 5);
                                  if (v359)
                                    MEMORY[0x1CAA32F9C](v359, 0x1000C8000313F17);
                                }
                                *(v340 - 5) = v346;
                                *((_DWORD *)v340 - 8) = 64;
                                sub_1C61D1224((uint64_t)(v340 - 3), v338[3]);
                                v339 -= 4;
                                v338 += 4;
                                v347 = *(v340 - 3);
                                v348 = *(v340 - 2);
                                if (v347 != v348)
                                {
                                  do
                                  {
                                    v349 = v338;
                                    *(_QWORD *)v347 = *v338;
                                    LODWORD(v634) = v338[1];
                                    *(_QWORD *)(v347 + 8) = *((_QWORD *)sub_1C61D0C8C(v581, (int *)&v634) + 1);
                                    v350 = v338[2];
                                    v351 = v338[3];
                                    v352 = -(uint64_t)(v350 >> 1);
                                    if (v350 == 1)
                                      v352 = 0x8000000000000000;
                                    if ((v350 & 1) != 0)
                                      v353 = v352;
                                    else
                                      v353 = v350 >> 1;
                                    v354 = -(uint64_t)(v351 >> 1);
                                    if (v351 == 1)
                                      v354 = 0x8000000000000000;
                                    if ((v351 & 1) != 0)
                                      v355 = v354;
                                    else
                                      v355 = v351 >> 1;
                                    if (*(_DWORD *)(v347 + 24) >= 0x41u)
                                    {
                                      v356 = *(_QWORD *)(v347 + 16);
                                      if (v356)
                                        MEMORY[0x1CAA32F9C](v356, 0x1000C8000313F17);
                                    }
                                    *(_QWORD *)(v347 + 16) = v353;
                                    *(_DWORD *)(v347 + 24) = 64;
                                    if (*(_DWORD *)(v347 + 40) >= 0x41u)
                                    {
                                      v357 = *(_QWORD *)(v347 + 32);
                                      if (v357)
                                        MEMORY[0x1CAA32F9C](v357, 0x1000C8000313F17);
                                    }
                                    *(_QWORD *)(v347 + 32) = v355;
                                    *(_DWORD *)(v347 + 40) = 64;
                                    v347 += 48;
                                    v339 -= 4;
                                    v338 = v349 + 4;
                                  }
                                  while (v347 != v348);
                                  v338 = v349 + 4;
                                }
                              }
                              while (v339);
                            }
                            sub_1C61A8184((void **)&v601);
                            v601 = *(_OWORD *)__dst;
                            v602 = __dst[2];
                            memset(__dst, 0, sizeof(__dst));
                            *(_QWORD *)&v634 = __dst;
                            sub_1C4EEB7D8((void ***)&v634);
                            v124 = 1;
                            v5 = v337;
                            goto LABEL_318;
                          default:
                            goto LABEL_318;
                        }
                        while (2)
                        {
                          v139 = (std::string::size_type *)v135 + v138;
                          v624.__r_.__value_.__r.__words[0] = *v139;
                          __dst[0] = &v624;
                          v140 = sub_1C4FD092C(v529, (unint64_t *)&v624, (uint64_t)&std::piecewise_construct, (_QWORD **)__dst);
                          *((_DWORD *)v140 + 10) = v139[1];
                          v141 = v139[3];
                          if (v141 > 0x7FFFFFFFFFFFFFF7)
                            goto LABEL_738;
                          v142 = v140;
                          v143 = v139[2];
                          if (v141 >= 0x17)
                          {
                            v145 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v141 | 7) != 0x17)
                              v145 = v141 | 7;
                            v146 = v145 + 1;
                            v144 = operator new(v145 + 1);
                            __dst[2] = (void *)(v146 | 0x8000000000000000);
                            __dst[0] = v144;
                            __dst[1] = (void *)v141;
                          }
                          else
                          {
                            HIBYTE(__dst[2]) = v141;
                            v144 = __dst;
                            if (!v141)
                            {
LABEL_254:
                              *((_BYTE *)v144 + v141) = 0;
                              v147 = (void **)(v142 + 48);
                              if (v142[71] < 0)
                                operator delete(*v147);
                              *(_OWORD *)v147 = *(_OWORD *)__dst;
                              *((void **)v142 + 8) = __dst[2];
                              v148 = v138 + 5;
                              v149 = v135[2].i64[v138];
                              if (v149)
                              {
                                v150 = (uint64_t)(v142 + 72);
                                do
                                {
                                  v151 = v135->u64[v148];
                                  v152 = v148 + 1;
                                  memset(__dst, 0, sizeof(__dst));
                                  if (v151)
                                  {
                                    if (v151 >> 61)
                                      goto LABEL_738;
                                    v153 = v2;
                                    v154 = (char *)operator new(8 * v151);
                                    v155 = &v154[8 * v151];
                                    __dst[0] = v154;
                                    __dst[2] = v155;
                                    memmove(v154, (char *)v135 + 8 * v152, 8 * v151);
                                    __dst[1] = v155;
                                    v2 = v153;
                                  }
                                  *(_QWORD *)&v634 = __dst;
                                  v156 = (int32x2_t *)sub_1C61D1160(v150, (unint64_t **)__dst, (uint64_t *)&v634);
                                  if (__dst[0])
                                  {
                                    __dst[1] = __dst[0];
                                    operator delete(__dst[0]);
                                  }
                                  v157 = (int64x2_t *)((char *)v135 + 8 * v151 + 8 * v152);
                                  v156[7].i32[0] = v157->i64[0];
                                  v156[8] = (int32x2_t)v157->u64[1];
                                  v148 = v151 + v152 + 4;
                                  v156[9] = vmovn_s64(v157[1]);
                                  --v149;
                                }
                                while (v149);
                              }
                              v124 = 1;
                              v138 = v148;
                              if (v148 >= v537)
                                goto LABEL_294;
                              continue;
                            }
                          }
                          break;
                        }
                        memmove(v144, (const void *)(v522 + v143), v141);
                        goto LABEL_254;
                      }
                      *a1 = 0;
                    }
                    break;
                  }
                  __dst[0] = &v601;
                  sub_1C4EEB7D8((void ***)__dst);
                  __dst[0] = &v603;
                  sub_1C4EEBCC8((void ***)__dst);
                  __dst[0] = &v605;
                  sub_1C4EEBCC8((void ***)__dst);
                  if (v559)
                    operator delete(v559);
                  if (v557)
                    operator delete(v557);
                  if (v521)
                    operator delete(v521);
                }
                else
                {
                  __dst[0] = "Invalid Summary Block: version expected";
                  LOWORD(v628) = 259;
                  sub_1C500A780(a1, v2, (llvm::Twine *)__dst);
                  if ((BYTE8(v634) & 1) != 0)
                  {
                    v123 = v634;
                    *(_QWORD *)&v634 = 0;
                    if (v123)
                      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
                  }
                }
              }
              else
              {
                __dst[0] = "Invalid Summary Block: record for version expected";
                LOWORD(v628) = 259;
                sub_1C500A780(a1, v2, (llvm::Twine *)__dst);
              }
LABEL_158:
              if (v629 != (char *)&v630 + 8)
                free(v629);
              v48 = *a1;
            }
            if (v48)
              v9 = 1;
            else
              v9 = 2;
            goto LABEL_8;
          }
          if (*(_BYTE *)(v2 + 384))
          {
            *a1 = 0;
            goto LABEL_91;
          }
          sub_1C500FBEC((uint64_t)&v624, v47, (uint64_t)v4);
          if ((v624.__r_.__value_.__s.__data_[8] & 1) != 0)
          {
            v77 = v624.__r_.__value_.__r.__words[0];
            *a1 = v624.__r_.__value_.__r.__words[0];
            goto LABEL_710;
          }
          v52 = v624.__r_.__value_.__r.__words[0];
          llvm::BitstreamCursor::EnterSubBlock(v4, 0, 14, a1);
          if (*a1)
          {
            v9 = 1;
            goto LABEL_8;
          }
          v629 = (char *)&v630 + 8;
          *(_QWORD *)&v630 = 0x4000000000;
          __dst[0] = &v627;
          *(_OWORD *)&__dst[1] = xmmword_1C85F20B0;
          v90 = v583[0];
          v578 = v584;
          while (1)
          {
            while (1)
            {
              sub_1C4FF7B90((uint64_t)v4, 0, (uint64_t)&v634);
              if ((BYTE8(v634) & 1) != 0)
              {
                v121 = (void *)v634;
LABEL_728:
                *a1 = (uint64_t)v121;
                goto LABEL_705;
              }
              if ((_DWORD)v634 != 2)
                break;
              sub_1C4FF3F30((uint64_t)v4, (uint64_t *)__p);
              v121 = __p[0];
              if ((BYTE8(v634) & 1) != 0)
              {
                v122 = v634;
                *(_QWORD *)&v634 = 0;
                if (v122)
                  (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
              }
              if (v121)
                goto LABEL_728;
            }
            if ((_DWORD)v634 == 1)
              break;
            if (!(_DWORD)v634)
            {
              *(_QWORD *)&v634 = "Malformed block";
              LOWORD(v636) = 259;
              sub_1C500A780(a1, v2, (llvm::Twine *)&v634);
              goto LABEL_705;
            }
            LODWORD(v630) = 0;
            llvm::BitstreamCursor::readRecord((uint64_t)v4, SDWORD1(v634), (uint64_t)&v629, 0, (uint64_t)__p);
            if (((uint64_t)__p[1] & 1) != 0)
            {
              LOBYTE(v91) = 0;
              v92 = __p[0];
              __p[0] = 0;
              *a1 = (uint64_t)v92;
            }
            else if (LODWORD(__p[0]) == 1)
            {
              v91 = v630;
              if ((_DWORD)v630)
              {
                v571 = v90;
                v100 = (char *)v629;
                v101 = (v630 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                v102 = (char *)__dst[1];
                if (__dst[2] < (char *)__dst[1] + v101)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__dst, &v627, (unint64_t)__dst[1] + v101, 1);
                  v102 = (char *)__dst[1];
                }
                if ((_DWORD)v91 != 1)
                {
                  v103 = (uint64_t *)(v100 + 8);
                  v104 = (char *)__dst[0] + (unint64_t)v102;
                  v105 = 8 * v91 - 8;
                  do
                  {
                    v106 = *v103++;
                    *v104++ = v106;
                    v105 -= 8;
                  }
                  while (v105);
LABEL_201:
                  v102 = (char *)__dst[1];
                }
LABEL_202:
                v112 = &v102[v101];
                __dst[1] = v112;
                v113 = *(_QWORD *)v629;
                v114 = sub_1C49796E4(v571, v578, v113)[1];
                v115 = *(_BYTE *)(v2 + 511);
                v116 = v115 < 0;
                if (v115 >= 0)
                  v117 = v582;
                else
                  v117 = *(void **)(v2 + 488);
                v118 = v115 & 0x7F;
                if (v116)
                  v119 = *(_QWORD *)(v2 + 496);
                else
                  v119 = v118;
                v120 = (size_t)v112;
                v90 = v571;
                sub_1C5016FD4(v2, v113, (int *)__dst[0], v120, v114, v117, v119);
                __dst[1] = 0;
                LOBYTE(v91) = 1;
                goto LABEL_185;
              }
              *(_QWORD *)&v634 = "Invalid record";
              LOWORD(v636) = 259;
              sub_1C500A780(a1, v2, (llvm::Twine *)&v634);
            }
            else
            {
              if (LODWORD(__p[0]) != 3)
              {
                if (LODWORD(__p[0]) == 5)
                {
                  v570 = v90;
                  v95 = *((_QWORD *)v629 + 1);
                  LODWORD(v634) = *(_QWORD *)v629;
                  v96 = *(_QWORD *)(v2 + 416);
                  v97 = *(unsigned __int8 *)(v96 + 133);
                  v98 = (unint64_t)sub_1C4EEA81C(v96, v95) & 0xFFFFFFFFFFFFFFF8 | v97;
                  v99 = sub_1C61D0C8C(v581, (int *)&v634);
                  *((_QWORD *)v99 + 1) = v98;
                  *((_QWORD *)v99 + 2) = v95;
                  v90 = v570;
                }
                LOBYTE(v91) = 1;
                goto LABEL_185;
              }
              v93 = v630;
              if (v630 >= 2)
              {
                v571 = v90;
                v107 = (char *)v629;
                v101 = (v630 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
                v102 = (char *)__dst[1];
                if (__dst[2] < (char *)__dst[1] + v101)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__dst, &v627, (unint64_t)__dst[1] + v101, 1);
                  v102 = (char *)__dst[1];
                }
                if ((_DWORD)v93 != 2)
                {
                  v108 = (uint64_t *)(v107 + 16);
                  v109 = (char *)__dst[0] + (unint64_t)v102;
                  v110 = 8 * v93 - 16;
                  do
                  {
                    v111 = *v108++;
                    *v109++ = v111;
                    v110 -= 8;
                  }
                  while (v110);
                  goto LABEL_201;
                }
                goto LABEL_202;
              }
              *(_QWORD *)&v634 = "Invalid record";
              LOWORD(v636) = 259;
              sub_1C500A780(a1, v2, (llvm::Twine *)&v634);
              LOBYTE(v91) = 0;
            }
LABEL_185:
            if (((uint64_t)__p[1] & 1) != 0)
            {
              v94 = __p[0];
              __p[0] = 0;
              if (v94)
                (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
            }
            if ((v91 & 1) == 0)
              goto LABEL_705;
          }
          *(_QWORD *)(v2 + 40) = (v52 >> 3) & 0x1FFFFFFFFFFFFFF8;
          *(_DWORD *)(v2 + 56) = 0;
          if ((v52 & 0x3F) == 0
            || (sub_1C4FF7E04((uint64_t)v4, v52 & 0x3F, (uint64_t)&v634), (BYTE8(v634) & 1) == 0)
            || (v503 = v634, *a1 = v634, !v503))
          {
            *a1 = 0;
          }
LABEL_705:
          if (__dst[0] != &v627)
            free(__dst[0]);
          if (v629 != (char *)&v630 + 8)
            free(v629);
          v77 = *a1;
LABEL_710:
          if (!v77)
          {
LABEL_91:
            *(_BYTE *)(v2 + 425) = 1;
            goto LABEL_92;
          }
LABEL_7:
          v9 = 1;
LABEL_8:
          if ((v615 & 1) != 0)
          {
            v10 = *(_QWORD *)v614;
            *(_QWORD *)v614 = 0;
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          }
          if ((v9 | 2) != 2)
          {
            MEMORY[0x1CAA32FB4](v583[0], 4);
            if (v616 != v6)
              free(v616);
            return;
          }
          continue;
        case 3u:
          LODWORD(v617) = 0;
          llvm::BitstreamCursor::readRecord((uint64_t)v4, v614[1], (uint64_t)&v616, 0, (uint64_t)__p);
          if (((uint64_t)__p[1] & 1) != 0)
          {
            v21 = __p[0];
            __p[0] = 0;
            *a1 = (uint64_t)v21;
          }
          else
          {
            switch(LODWORD(__p[0]))
            {
              case 1:
                sub_1C5016BC8((uint64_t)&v629, v2, (int *)v616, v617);
                if ((v630 & 1) == 0)
                {
                  *a1 = 0;
                  goto LABEL_153;
                }
                v80 = v629;
                *a1 = (uint64_t)v629;
                if (v80)
                  break;
                goto LABEL_153;
              case 7:
              case 8:
              case 0xE:
                if (*(_BYTE *)(v2 + 384))
                {
                  v12 = *((_QWORD *)v616 + 1);
                  if (v12 + *(_QWORD *)v616 <= *(_QWORD *)(v2 + 376)
                    && (unint64_t)v617 - 6 < 0xFFFFFFFFFFFFFFFCLL)
                  {
                    v14 = (int *)(*(_QWORD *)(v2 + 368) + *(_QWORD *)v616);
                    v15 = sub_1C5016F30(*((_DWORD *)v616 + 10));
                    v16 = *(_BYTE *)(v2 + 511);
                    v17 = v16 < 0;
                    if (v16 >= 0)
                      v18 = v582;
                    else
                      v18 = *(void **)(v2 + 488);
                    v19 = v16 & 0x7F;
                    if (v17)
                      v20 = *(_QWORD *)(v2 + 496);
                    else
                      v20 = v19;
                    sub_1C5016FD4(v2, v5, v14, v12, v15, v18, v20);
                    goto LABEL_33;
                  }
                }
                else if (v617 >= 4)
                {
                  v53 = sub_1C5016F30(*((_DWORD *)v616 + 6));
                  LODWORD(v629) = v5;
                  sub_1C61D12B0((uint64_t)v583, &v629)[1] = v53;
LABEL_33:
                  v5 = (v5 + 1);
                  goto LABEL_153;
                }
LABEL_138:
                v629 = "Invalid record";
                LOWORD(v632) = 259;
                sub_1C500A780(a1, v2, (llvm::Twine *)&v629);
                break;
              case 0xD:
                if (!(_DWORD)v617)
                  goto LABEL_138;
                *(_QWORD *)(v2 + 432) = *(_QWORD *)v616 - 1;
                goto LABEL_153;
              case 0x10:
                v629 = &v631;
                v630 = xmmword_1C85F20B0;
                v54 = (uint64_t *)v616;
                v55 = v617;
                if (v617 >= 0x81)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v629, &v631, v617, 1);
                  v56 = v630;
                  v57 = (uint64_t *)v629;
                }
                else
                {
                  v56 = 0;
                  if (!(_DWORD)v617)
                  {
                    v61 = 128;
                    goto LABEL_117;
                  }
                  v57 = &v631;
                }
                v58 = (char *)v57 + v56;
                v59 = 8 * v55;
                do
                {
                  v60 = *v54++;
                  *v58++ = v60;
                  v59 -= 8;
                }
                while (v59);
                v61 = *((_QWORD *)&v630 + 1);
                v56 = v630;
LABEL_117:
                v62 = v56 + v55;
                *(_QWORD *)&v630 = v62;
                if (v62 + 1 > v61)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v629, &v631, v62 + 1, 1);
                  v62 = v630;
                }
                *((_BYTE *)v629 + v62) = 0;
                MEMORY[0x1CAA32ABC](v582, v629);
                if (v629 != &v631)
                  free(v629);
                goto LABEL_153;
              case 0x11:
                if ((_DWORD)v617 != 5)
                {
                  v612.__r_.__value_.__r.__words[0] = v617;
                  LOWORD(v628) = 266;
                  __dst[0] = &v612;
                  llvm::Twine::str((llvm::Twine *)__dst, &v624);
                  v78 = std::string::insert(&v624, 0, "Invalid hash length ");
                  v79 = v78->__r_.__value_.__r.__words[2];
                  v634 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v635 = v79;
                  v78->__r_.__value_.__l.__size_ = 0;
                  v78->__r_.__value_.__r.__words[2] = 0;
                  v78->__r_.__value_.__r.__words[0] = 0;
                  LOWORD(v632) = 260;
                  v629 = &v634;
                  sub_1C500A780(a1, v2, (llvm::Twine *)&v629);
                  if (SBYTE7(v635) < 0)
                    operator delete((void *)v634);
                  if (SHIBYTE(v624.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v624.__r_.__value_.__l.__data_);
                  break;
                }
                v574 = v6;
                v577 = *(_QWORD *)(v2 + 416);
                v63 = *(unsigned int *)(v577 + 32);
                v555 = v2;
                v561 = v5;
                if ((_DWORD)v63)
                {
                  v64 = *(_QWORD *)(v2 + 520);
                  v65 = *(const void **)(v2 + 512);
                  v66 = 0;
                  if (v64)
                  {
                    v67 = *(_QWORD *)(v2 + 520);
                    v68 = *(unsigned __int8 **)(v2 + 512);
                    do
                    {
                      v69 = *v68++;
                      v66 = 33 * v66 + v69;
                      --v67;
                    }
                    while (v67);
                  }
                  v70 = v63 - 1;
                  v71 = *(_QWORD *)(v577 + 24);
                  v569 = *(unsigned int *)(v577 + 32);
                  v72 = v71 + 8 * v63 + 8;
                  v73 = 1;
                  v74 = v66;
                  while (1)
                  {
                    v75 = v74 & v70;
                    v76 = *(_QWORD **)(v71 + 8 * v75);
                    if (v76 != (_QWORD *)-8)
                    {
                      if (!v76)
                      {
                        v81 = v569;
                        goto LABEL_150;
                      }
                      if (*(_DWORD *)(v72 + 4 * v75) == v66
                        && v64 == *v76
                        && (!v64 || !memcmp(v65, (char *)v76 + *(unsigned int *)(v577 + 44), v64)))
                      {
                        break;
                      }
                    }
                    v74 = v73 + v75;
                    ++v73;
                  }
                  v81 = v569;
                  if ((_DWORD)v75 != -1)
                    v81 = (int)v75;
                }
                else
                {
                  v81 = 0;
                  v71 = *(_QWORD *)(v577 + 24);
                }
LABEL_150:
                v82 = 0;
                v83 = *(_QWORD *)(v71 + 8 * v81) + 16;
                v84 = v616;
                v6 = v574;
                v5 = v561;
                do
                {
                  *(_DWORD *)(v83 + 4 * v82) = v84[v82];
                  ++v82;
                }
                while (v82 != 5);
                v2 = v555;
LABEL_153:
                v9 = 2;
                goto LABEL_154;
              default:
                goto LABEL_153;
            }
          }
          v9 = 1;
LABEL_154:
          if (((uint64_t)__p[1] & 1) != 0)
          {
            v85 = __p[0];
            __p[0] = 0;
            if (v85)
              (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
          }
          goto LABEL_8;
        default:
          v9 = 0;
          goto LABEL_8;
      }
    }
  }
}

uint64_t sub_1C4FFF0A0(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 464), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 440), 8);
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  sub_1C4FF8A28((char **)(a1 + 88));
  if (*(_QWORD *)(a1 + 64))
  {
    sub_1C4FF80DC((uint64_t *)(a1 + 64));
    operator delete(*(void **)(a1 + 64));
  }
  v3 = (void **)a1;
  sub_1C4FF8984(&v3);
  return a1;
}

void llvm::BitcodeModule::getSummary(llvm::BitcodeModule *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  char *v15[2];
  _QWORD v16[33];
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v19 = *(_OWORD *)this;
  v22 = 0uLL;
  v23 = 0;
  v24 = (char *)&v26;
  v25 = 0x800000000;
  v27 = 0;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)&v20 + 1) = 0;
  *(_QWORD *)&v20 = (v4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = 0x200000000;
  if ((v4 & 0x3F) != 0 && (sub_1C4FF7E04((uint64_t)&v19, v4 & 0x3F, (uint64_t)&v17), (v18 & 1) != 0) && (v9 = v17) != 0)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v9;
  }
  else
  {
    v5 = operator new();
    sub_1C61A7328(v5, 0, 0);
    v12 = v21;
    v11[0] = v19;
    v11[1] = v20;
    *(_OWORD *)__p = v22;
    v6 = v23;
    v23 = 0;
    v22 = 0uLL;
    v14 = v6;
    v15[0] = (char *)v16;
    v15[1] = (char *)0x800000000;
    if ((_DWORD)v25)
      sub_1C4FF8150((uint64_t)v15, (uint64_t)&v24);
    v16[32] = v27;
    sub_1C4FFBAC0((uint64_t)&v17, v11, *((_QWORD *)this + 4), *((_QWORD *)this + 5), v5, *((_QWORD *)this + 2), *((_QWORD *)this + 3), 0);
    sub_1C4FF8A28(v15);
    if (__p[0])
    {
      sub_1C4FF80DC((uint64_t *)__p);
      operator delete(__p[0]);
    }
    sub_1C4FFBC8C(&v10, (uint64_t)&v17);
    v7 = v10;
    if (v10)
    {
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v7;
      sub_1C4FFF0A0((uint64_t)&v17);
      v8 = sub_1C61A8910(v5);
      MEMORY[0x1CAA32FC0](v8, 0x10B0C4007EAB999);
    }
    else
    {
      *(_BYTE *)(a2 + 8) &= ~1u;
      *(_QWORD *)a2 = v5;
      sub_1C4FFF0A0((uint64_t)&v17);
    }
  }
  sub_1C4FF8A28(&v24);
  if ((_QWORD)v22)
  {
    sub_1C4FF80DC((uint64_t *)&v22);
    operator delete((void *)v22);
  }
}

void llvm::BitcodeModule::getLTOInfo(llvm::BitcodeModule *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  char v11;
  char v12;
  __int16 v13;
  unint64_t v14;
  char v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[3];
  char *v22[2];
  _QWORD v23[34];

  v23[33] = *MEMORY[0x1E0C80C00];
  v17 = *(_OWORD *)this;
  memset(__p, 0, sizeof(__p));
  v22[0] = (char *)v23;
  v22[1] = (char *)0x800000000;
  v23[32] = 0;
  v3 = *((_QWORD *)this + 7);
  v18 = (v3 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v19 = 0;
  v20 = 0x200000000;
  if ((v3 & 0x3F) != 0 && (sub_1C4FF7E04((uint64_t)&v17, v3 & 0x3F, (uint64_t)&v14), (v15 & 1) != 0) && (v4 = v14) != 0
    || (llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)&v17, 0, 8, &v14), (v4 = v14) != 0))
  {
    v5 = *(_BYTE *)(a2 + 8) | 1;
LABEL_22:
    *(_BYTE *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v4;
    goto LABEL_23;
  }
  v6 = *(_BYTE *)(a2 + 8);
  sub_1C4FF7B90((uint64_t)&v17, 0, (uint64_t)&v14);
  v4 = v14;
  if ((v15 & 1) != 0 && v14)
  {
LABEL_21:
    v5 = v6 | 1;
    goto LABEL_22;
  }
  v7 = HIDWORD(v14);
  v8 = v14;
  while (2)
  {
    switch(v8)
    {
      case 0:
        v14 = (unint64_t)"Malformed block";
        v16 = 259;
        sub_1C4FFAA54((llvm::Twine *)&v14, (uint64_t *)a2);
        v11 = v6 | 1;
        goto LABEL_34;
      case 1:
        *(_BYTE *)(a2 + 8) = v6 & 0xFE;
        *(_WORD *)a2 = 0;
        *(_BYTE *)(a2 + 2) = 0;
        goto LABEL_23;
      case 2:
        if ((_DWORD)v7 == 24)
        {
          sub_1C4FFF644((uint64_t)&v14, (llvm::BitstreamCursor *)&v17, 24);
          if ((v15 & 1) == 0)
          {
            v12 = v14;
            v11 = v6 & 0xFE;
            v13 = 256;
            goto LABEL_32;
          }
          goto LABEL_33;
        }
        if ((_DWORD)v7 != 20)
        {
          sub_1C4FF3F30((uint64_t)&v17, (uint64_t *)&v14);
          v9 = v14;
          if (v14)
          {
LABEL_16:
            v6 |= 1u;
            *(_BYTE *)(a2 + 8) = v6;
            *(_QWORD *)a2 = v9;
            v10 = 1;
          }
          else
          {
LABEL_14:
            v10 = 2;
          }
          if (v10 != 2)
            goto LABEL_23;
LABEL_18:
          sub_1C4FF7B90((uint64_t)&v17, 0, (uint64_t)&v14);
          v4 = v14;
          if ((v15 & 1) != 0)
          {
            if (v14)
              goto LABEL_21;
          }
          else
          {
            v8 = v14;
            LODWORD(v7) = HIDWORD(v14);
          }
          continue;
        }
        sub_1C4FFF644((uint64_t)&v14, (llvm::BitstreamCursor *)&v17, 20);
        if ((v15 & 1) != 0)
        {
LABEL_33:
          v11 = v6 | 1;
          *(_QWORD *)a2 = v14;
          goto LABEL_34;
        }
        v12 = v14;
        v11 = v6 & 0xFE;
        v13 = 257;
LABEL_32:
        *(_WORD *)a2 = v13;
        *(_BYTE *)(a2 + 2) = v12;
LABEL_34:
        *(_BYTE *)(a2 + 8) = v11;
LABEL_23:
        sub_1C4FF8A28(v22);
        if (__p[0])
        {
          sub_1C4FF80DC((uint64_t *)__p);
          operator delete(__p[0]);
        }
        return;
      case 3:
        llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v17, v7, (uint64_t)&v14);
        if ((v15 & 1) == 0)
          goto LABEL_14;
        v9 = v14;
        goto LABEL_16;
      default:
        goto LABEL_18;
    }
  }
}

void sub_1C4FFF644(uint64_t a1, llvm::BitstreamCursor *a2, int a3)
{
  int v3;
  void **v6;
  void *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char v17;
  __int16 v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[65];

  v21[64] = *MEMORY[0x1E0C80C00];
  v6 = &v19;
  llvm::BitstreamCursor::EnterSubBlock(a2, 0, a3, &v19);
  v7 = v19;
  if (v19)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
    return;
  }
  v19 = v21;
  v20 = 0x4000000000;
  while (1)
  {
    do
    {
      sub_1C4FF7B90((uint64_t)a2, 0, (uint64_t)&v16);
      if ((v17 & 1) != 0)
      {
        v9 = 1;
        v8 = (uint64_t)v16;
        goto LABEL_7;
      }
      v8 = (uint64_t)v16;
      if ((_DWORD)v16 != 2)
      {
        v9 = 0;
        goto LABEL_7;
      }
      sub_1C4FF3F30((uint64_t)a2, &v15);
      v13 = v15;
      if ((v17 & 1) != 0)
      {
        v10 = v16;
        v16 = 0;
        if (v10)
          (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    while (!v13);
    v9 = 1;
    v8 = v13;
LABEL_7:
    if (v9)
    {
      if (v8)
        goto LABEL_25;
    }
    else
    {
      v3 = v8;
      LODWORD(v6) = HIDWORD(v8);
    }
    if (v3 == 2)
    {
LABEL_22:
      v16 = "Malformed block";
      v18 = 259;
      sub_1C4FFAA54((llvm::Twine *)&v16, &v14);
      *(_BYTE *)(a1 + 8) |= 1u;
      v8 = v14;
      goto LABEL_26;
    }
    if (v3 == 1)
      break;
    if (!v3)
      goto LABEL_22;
    LODWORD(v20) = 0;
    llvm::BitstreamCursor::readRecord((uint64_t)a2, (int)v6, (uint64_t)&v19, 0, (uint64_t)&v16);
    if ((v17 & 1) != 0)
    {
      v8 = (uint64_t)v16;
LABEL_25:
      *(_BYTE *)(a1 + 8) |= 1u;
LABEL_26:
      *(_QWORD *)a1 = v8;
      goto LABEL_28;
    }
    if ((_DWORD)v16 == 20)
    {
      v11 = *(unsigned __int8 *)v19;
      *(_BYTE *)(a1 + 8) &= ~1u;
      v12 = (v11 >> 3) & 1;
      goto LABEL_27;
    }
  }
  *(_BYTE *)(a1 + 8) &= ~1u;
  LOBYTE(v12) = 1;
LABEL_27:
  *(_BYTE *)a1 = v12;
LABEL_28:
  if (v19 != v21)
    free(v19);
}

void sub_1C4FFF85C(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;
  _OWORD v10[2];
  _QWORD v11[3];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v10[0] = *a1;
  v10[1] = v3;
  llvm::getBitcodeModuleList(v10, (uint64_t)v11);
  if ((v12 & 1) != 0)
  {
    v7 = v11[0];
    *(_BYTE *)(a2 + 64) |= 1u;
    *(_QWORD *)a2 = v7;
  }
  else
  {
    v4 = (_OWORD *)v11[0];
    if (v11[1] - v11[0] == 64)
    {
      *(_BYTE *)(a2 + 64) &= ~1u;
      v5 = v4[1];
      *(_OWORD *)a2 = *v4;
      *(_OWORD *)(a2 + 16) = v5;
      v6 = v4[3];
      *(_OWORD *)(a2 + 32) = v4[2];
      *(_OWORD *)(a2 + 48) = v6;
LABEL_7:
      operator delete(v4);
      return;
    }
    v8 = "Expected a single module";
    v9 = 259;
    sub_1C4FFAA54((llvm::Twine *)&v8, (uint64_t *)a2);
    *(_BYTE *)(a2 + 64) |= 1u;
    if (v4)
      goto LABEL_7;
  }
}

void llvm::parseBitcodeFile(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  __int128 v12[4];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = a1[1];
  v11[0] = *a1;
  v11[1] = v9;
  sub_1C4FFF85C(v11, (uint64_t)v12);
  if ((v13 & 1) != 0)
  {
    v10 = *(_QWORD *)&v12[0];
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v10;
  }
  else
  {
    llvm::BitcodeModule::getModuleImpl(v12, a2, 1, 0, 0, a3, a4, a5);
  }
}

void llvm::getBitcodeTargetTriple(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v14;
  _QWORD v15[5];
  void *__p;
  char *v17;
  char v18;
  unsigned int v19[2];
  char v20;
  std::string::size_type v21;
  char v22;
  std::string __str;
  __int16 v24;
  void *v25;
  uint64_t v26;
  _WORD v27[256];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  sub_1C4FFA6C8((uint64_t)v15, *(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  if ((v18 & 1) != 0)
  {
    v12 = v15[0];
    v15[0] = 0;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v12;
LABEL_50:
    v11 = v15[0];
    v15[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
  v3 = *(unsigned __int8 *)(a2 + 24);
  do
  {
    sub_1C4FF7B90((uint64_t)v15, 0, (uint64_t)v19);
    if ((v20 & 1) != 0)
    {
      v4 = *(void **)v19;
      *(_QWORD *)v19 = 0;
LABEL_7:
      v3 |= 1u;
      *(_BYTE *)(a2 + 24) = v3;
      *(_QWORD *)a2 = v4;
LABEL_8:
      v5 = 1;
    }
    else
    {
      switch(v19[0])
      {
        case 0u:
          v25 = "Malformed block";
          v27[8] = 259;
          sub_1C4FFAA54((llvm::Twine *)&v25, &v13);
          v3 |= 1u;
          *(_BYTE *)(a2 + 24) = v3;
          *(_QWORD *)a2 = v13;
          v13 = 0;
          goto LABEL_8;
        case 1u:
          v3 &= ~1u;
          *(_BYTE *)(a2 + 24) = v3;
          *(_BYTE *)(a2 + 23) = 0;
          *(_BYTE *)a2 = 0;
          goto LABEL_8;
        case 2u:
          if (v19[1] == 8)
          {
            llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v15, 0, 8, &v25);
            v4 = v25;
            if (v25)
              goto LABEL_7;
            v25 = v27;
            v26 = 0x4000000000;
            memset(&v14, 0, sizeof(v14));
            while (1)
            {
              sub_1C4FF7B90((uint64_t)v15, 0, (uint64_t)&__str);
              if ((__str.__r_.__value_.__s.__data_[8] & 1) != 0)
                break;
              switch(LODWORD(__str.__r_.__value_.__l.__data_))
              {
                case 2:
                  sub_1C4FF3F30((uint64_t)v15, (uint64_t *)&v21);
                  v8 = v21;
                  if ((__str.__r_.__value_.__s.__data_[8] & 1) != 0)
                  {
                    v9 = __str.__r_.__value_.__r.__words[0];
                    __str.__r_.__value_.__r.__words[0] = 0;
                    if (v9)
                      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
                  }
                  if (v8)
                    goto LABEL_48;
                  break;
                case 1:
                  v3 &= ~1u;
                  *(_BYTE *)(a2 + 24) = v3;
                  *(std::string *)a2 = v14;
                  memset(&v14, 0, sizeof(v14));
                  goto LABEL_43;
                case 0:
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
                  v24 = 259;
                  sub_1C4FFAA54((llvm::Twine *)&__str, (uint64_t *)&v21);
                  v3 |= 1u;
                  *(_BYTE *)(a2 + 24) = v3;
                  *(_QWORD *)a2 = v21;
                  v21 = 0;
                  goto LABEL_43;
                default:
                  llvm::BitstreamCursor::readRecord((uint64_t)v15, SHIDWORD(__str.__r_.__value_.__r.__words[0]), (uint64_t)&v25, 0, (uint64_t)&v21);
                  if ((v22 & 1) != 0)
                  {
                    v10 = v21;
                    v3 |= 1u;
                    *(_BYTE *)(a2 + 24) = v3;
                    *(_QWORD *)a2 = v10;
                    goto LABEL_43;
                  }
                  if ((_DWORD)v21 == 2)
                  {
                    memset(&__str, 0, sizeof(__str));
                    sub_1C5000624(&__str, (std::string *)v25, (std::string *)((char *)v25 + 8 * v26));
                    std::string::operator=(&v14, &__str);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__str.__r_.__value_.__l.__data_);
                    LODWORD(v26) = 0;
                    if ((v22 & 1) != 0)
                    {
                      v7 = v21;
                      v21 = 0;
                      if (v7)
                        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
                    }
                  }
                  else
                  {
                    LODWORD(v26) = 0;
                  }
                  break;
              }
            }
            v8 = __str.__r_.__value_.__r.__words[0];
LABEL_48:
            v3 |= 1u;
            *(_BYTE *)(a2 + 24) = v3;
            *(_QWORD *)a2 = v8;
LABEL_43:
            if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v14.__r_.__value_.__l.__data_);
            if (v25 != v27)
              free(v25);
            goto LABEL_8;
          }
          sub_1C4FF3F30((uint64_t)v15, (uint64_t *)&v25);
          v4 = v25;
          if (v25)
            goto LABEL_7;
LABEL_39:
          v5 = 2;
          break;
        case 3u:
          llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)v15, v19[1], (uint64_t)&v25);
          if ((v26 & 1) == 0)
            goto LABEL_39;
          v4 = v25;
          goto LABEL_7;
        default:
          v5 = 0;
          break;
      }
    }
    if ((v20 & 1) != 0)
    {
      v6 = *(void **)v19;
      *(_QWORD *)v19 = 0;
      if (v6)
        (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  while (v5 != 1);
  if ((v18 & 1) != 0)
    goto LABEL_50;
  sub_1C4FF8A28(&v17);
  if (__p)
  {
    sub_1C4FF80DC((uint64_t *)&__p);
    operator delete(__p);
  }
}

void llvm::isBitcodeContainingObjCCategory(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  int64_t size;
  std::string *v14;
  char *v15;
  int64_t v16;
  std::string *v17;
  char *v18;
  char v21;
  uint64_t v22;
  std::string *v23;
  char *v24;
  int v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  _QWORD v31[5];
  void *__p;
  char *v33;
  char v34;
  std::string::size_type v35;
  char v36;
  std::string v37;
  __int16 v38;
  void *v39;
  uint64_t v40;
  _WORD v41[256];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  sub_1C4FFA6C8((uint64_t)v31, *(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  if ((v34 & 1) != 0)
  {
    v9 = v31[0];
    v31[0] = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v9;
    goto LABEL_17;
  }
  v5 = *(unsigned __int8 *)(a2 + 8);
  while (2)
  {
    sub_1C4FF7B90((uint64_t)v31, 0, (uint64_t)&v39);
    v6 = v39;
    if ((v40 & 1) != 0)
    {
      if (v39)
      {
LABEL_22:
        *(_BYTE *)(a2 + 8) = v5 | 1;
        *(_QWORD *)a2 = v6;
        goto LABEL_23;
      }
    }
    else
    {
      v3 = (int)v39;
      v2 = HIDWORD(v39);
    }
    switch(v3)
    {
      case 0:
        v39 = "Malformed block";
        v41[8] = 259;
        sub_1C4FFAA54((llvm::Twine *)&v39, (uint64_t *)a2);
        *(_BYTE *)(a2 + 8) = v5 | 1;
        goto LABEL_23;
      case 1:
        *(_BYTE *)(a2 + 8) = v5 & 0xFE;
        *(_BYTE *)a2 = 0;
        goto LABEL_23;
      case 2:
        if (v2 != 8)
        {
          sub_1C4FF3F30((uint64_t)v31, (uint64_t *)&v39);
          v7 = v39;
          if (!v39)
            goto LABEL_13;
          v5 |= 1u;
          *(_BYTE *)(a2 + 8) = v5;
          *(_QWORD *)a2 = v7;
          v8 = 1;
          goto LABEL_14;
        }
        llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v31, 0, 8, &v39);
        v6 = v39;
        if (v39)
          goto LABEL_22;
        v39 = v41;
        v40 = 0x4000000000;
        break;
      case 3:
        llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)v31, v2, (uint64_t)&v39);
        if ((v40 & 1) != 0)
        {
          v6 = v39;
          if (v39)
            goto LABEL_22;
        }
LABEL_13:
        v8 = 2;
        goto LABEL_14;
      default:
        v8 = 0;
LABEL_14:
        if (v8 == 1)
          goto LABEL_23;
        continue;
    }
    break;
  }
  while (1)
  {
    sub_1C4FF7B90((uint64_t)v31, 0, (uint64_t)&v37);
    if ((v37.__r_.__value_.__s.__data_[8] & 1) != 0)
      break;
    switch(LODWORD(v37.__r_.__value_.__l.__data_))
    {
      case 2:
        sub_1C4FF3F30((uint64_t)v31, (uint64_t *)&v35);
        v29 = v35;
        if ((v37.__r_.__value_.__s.__data_[8] & 1) != 0)
        {
          v30 = v37.__r_.__value_.__r.__words[0];
          v37.__r_.__value_.__r.__words[0] = 0;
          if (v30)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v30 + 8))(v30);
        }
        if (v29)
          goto LABEL_90;
        break;
      case 1:
        *(_BYTE *)(a2 + 8) = v5 & 0xFE;
        *(_BYTE *)a2 = 0;
        goto LABEL_87;
      case 0:
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
        v38 = 259;
        sub_1C4FFAA54((llvm::Twine *)&v37, (uint64_t *)a2);
        *(_BYTE *)(a2 + 8) = v5 | 1;
        goto LABEL_87;
      default:
        llvm::BitstreamCursor::readRecord((uint64_t)v31, SHIDWORD(v37.__r_.__value_.__r.__words[0]), (uint64_t)&v39, 0, (uint64_t)&v35);
        if ((v36 & 1) != 0)
        {
          v21 = 0;
          v22 = v35;
          v35 = 0;
          v5 |= 1u;
          *(_BYTE *)(a2 + 8) = v5;
          *(_QWORD *)a2 = v22;
        }
        else
        {
          if ((_DWORD)v35 != 5)
            goto LABEL_70;
          memset(&v37, 0, sizeof(v37));
          sub_1C5000624(&v37, (std::string *)v39, (std::string *)((char *)v39 + 8 * v40));
          v11 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
          v12 = (void *)v37.__r_.__value_.__r.__words[0];
          if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
          else
            size = v37.__r_.__value_.__l.__size_;
          if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v14 = &v37;
          else
            v14 = (std::string *)v37.__r_.__value_.__r.__words[0];
          v15 = (char *)v14 + size;
          if (size >= 21)
          {
            v16 = size;
            v17 = v14;
            do
            {
              v18 = (char *)memchr(v17, 95, v16 - 20);
              if (!v18)
                break;
              if (*(_QWORD *)v18 == 0x5F2C415441445F5FLL
                && *((_QWORD *)v18 + 1) == 0x61635F636A626F5FLL
                && *(_QWORD *)(v18 + 13) == 0x7473696C7461635FLL)
              {
                if (v18 != v15 && v18 - (char *)v14 != -1)
                {
LABEL_79:
                  v27 = 0;
                  v5 &= ~1u;
                  *(_BYTE *)(a2 + 8) = v5;
                  *(_BYTE *)a2 = 1;
                  goto LABEL_67;
                }
                break;
              }
              v17 = (std::string *)(v18 + 1);
              v16 = v15 - (char *)v17;
            }
            while (v15 - (char *)v17 >= 21);
          }
          if (size >= 17)
          {
            v23 = v14;
            do
            {
              v24 = (char *)memchr(v23, 95, size - 16);
              if (!v24)
                break;
              if (*(_QWORD *)v24 == 0x5F2C434A424F5F5FLL
                && *((_QWORD *)v24 + 1) == 0x726F67657461635FLL
                && v24[16] == 121)
              {
                v27 = 1;
                if (v24 == v15 || v24 - (char *)v14 == -1)
                  goto LABEL_67;
                goto LABEL_79;
              }
              v23 = (std::string *)(v24 + 1);
              size = v15 - (char *)v23;
            }
            while (v15 - (char *)v23 >= 17);
          }
          v27 = 1;
LABEL_67:
          if (v11 < 0)
            operator delete(v12);
          if (!v27)
          {
            v21 = 0;
          }
          else
          {
LABEL_70:
            LODWORD(v40) = 0;
            v21 = 1;
          }
        }
        if ((v36 & 1) != 0)
        {
          v28 = v35;
          v35 = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        if ((v21 & 1) == 0)
          goto LABEL_87;
        break;
    }
  }
  v29 = v37.__r_.__value_.__r.__words[0];
LABEL_90:
  *(_BYTE *)(a2 + 8) = v5 | 1;
  *(_QWORD *)a2 = v29;
LABEL_87:
  if (v39 != v41)
    free(v39);
LABEL_23:
  if ((v34 & 1) == 0)
  {
    sub_1C4FF8A28(&v33);
    if (__p)
    {
      sub_1C4FF80DC((uint64_t *)&__p);
      operator delete(__p);
    }
    return;
  }
LABEL_17:
  v10 = v31[0];
  v31[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

void llvm::getBitcodeProducerString(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unsigned int v3;
  char v5;
  BOOL v6;
  const char *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  int v13;
  void *__p;
  char *v15;
  char v16;
  const char *v17;
  char v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1C4FFA6C8((uint64_t)v12, *(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  if ((v16 & 1) != 0)
  {
    v10 = v12[0];
    v12[0] = 0;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v10;
    goto LABEL_24;
  }
  v5 = *(_BYTE *)(a2 + 24);
  while (1)
  {
    if (v13)
      v6 = 1;
    else
      v6 = v12[1] > v12[2];
    if (!v6)
    {
      *(_BYTE *)(a2 + 24) = v5 & 0xFE;
      *(_BYTE *)(a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      goto LABEL_29;
    }
    sub_1C4FF7B90((uint64_t)v12, 0, (uint64_t)&v17);
    v7 = v17;
    if ((v18 & 1) != 0)
    {
      if (v17)
        goto LABEL_26;
    }
    else
    {
      v3 = v17;
      v2 = HIDWORD(v17);
    }
    if (v3 == 2)
      break;
    if (v3 == 3)
    {
      llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)v12, v2, (uint64_t)&v17);
      if ((v18 & 1) != 0)
      {
        v7 = v17;
        if (v17)
        {
LABEL_26:
          *(_BYTE *)(a2 + 24) = v5 | 1;
          *(_QWORD *)a2 = v7;
          goto LABEL_29;
        }
      }
LABEL_20:
      v8 = 2;
      goto LABEL_21;
    }
    if (v3 <= 1)
    {
      v17 = "Malformed block";
      v19 = 259;
      sub_1C4FFAA54((llvm::Twine *)&v17, (uint64_t *)a2);
      *(_BYTE *)(a2 + 24) = v5 | 1;
      goto LABEL_29;
    }
    v8 = 0;
LABEL_21:
    if (v8 == 1)
      goto LABEL_29;
  }
  if (v2 != 13)
  {
    sub_1C4FF3F30((uint64_t)v12, (uint64_t *)&v17);
    v9 = v17;
    if (!v17)
      goto LABEL_20;
    v5 |= 1u;
    *(_BYTE *)(a2 + 24) = v5;
    *(_QWORD *)a2 = v9;
    v8 = 1;
    goto LABEL_21;
  }
  sub_1C4FFB478(a2, (llvm::BitstreamCursor *)v12);
LABEL_29:
  if ((v16 & 1) == 0)
  {
    sub_1C4FF8A28(&v15);
    if (__p)
    {
      sub_1C4FF80DC((uint64_t *)&__p);
      operator delete(__p);
    }
    return;
  }
LABEL_24:
  v11 = v12[0];
  v12[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

void llvm::readModuleSummaryIndex(_OWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  __int128 v7;
  _OWORD v8[2];
  _QWORD v9[8];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = a1[1];
  v8[0] = *a1;
  v8[1] = v7;
  sub_1C4FFF85C(v8, (uint64_t)v9);
  if ((v10 & 1) != 0)
    *a4 = v9[0];
  else
    llvm::BitcodeModule::readSummary((uint64_t)v9, a2, v9[2], v9[3], a3, a4);
}

void llvm::getBitcodeLTOInfo(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  _OWORD v5[2];
  _QWORD v6[8];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  sub_1C4FFF85C(v5, (uint64_t)v6);
  if ((v7 & 1) != 0)
  {
    v4 = v6[0];
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v4;
  }
  else
  {
    llvm::BitcodeModule::getLTOInfo((llvm::BitcodeModule *)v6, a2);
  }
}

std::string *sub_1C5000624(std::string *this, std::string *a2, std::string *a3)
{
  std::string *v4;
  unint64_t v6;
  uint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *p_p;
  std::string *v14;
  _BYTE *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  void *__p;
  std::string::size_type v25;
  int64_t v26;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  v12 = v7 >> 3;
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v12)
    {
      std::string::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    v15 = (char *)v14 + size;
    do
    {
      v16 = v4->__r_.__value_.__r.__words[0];
      v4 = (std::string *)((char *)v4 + 8);
      *v15++ = v16;
    }
    while (v4 != a3);
    *v15 = 0;
    v17 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    if (v7 < 0)
      abort();
    if ((unint64_t)v7 > 0xB7)
    {
      v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v18 = v12 | 7;
      v19 = v18 + 1;
      p_p = operator new(v18 + 1);
      v25 = v12;
      v26 = v19 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v26) = (unint64_t)v7 >> 3;
      p_p = &__p;
    }
    do
    {
      v20 = v4->__r_.__value_.__r.__words[0];
      v4 = (std::string *)((char *)v4 + 8);
      *p_p++ = v20;
    }
    while (v4 != a3);
    *p_p = 0;
    if (v26 >= 0)
      v21 = (const std::string::value_type *)&__p;
    else
      v21 = (const std::string::value_type *)__p;
    if (v26 >= 0)
      v22 = HIBYTE(v26) & 0x7F;
    else
      v22 = v25;
    std::string::append(this, v21, v22);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
  }
  return this;
}

uint64_t sub_1C50007CC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  int32x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  void **v53;

  *(_QWORD *)a1 = &off_1E813F228;
  v2 = *(void **)(a1 + 1760);
  if (v2)
  {
    *(_QWORD *)(a1 + 1768) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1728);
  if (v3 != (void *)(a1 + 1752))
    free(v3);
  v53 = (void **)(a1 + 1704);
  sub_1C4765410(&v53);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1680), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1656), 8);
  v4 = *(void **)(a1 + 1616);
  if (v4)
  {
    *(_QWORD *)(a1 + 1624) = v4;
    operator delete(v4);
  }
  v5 = *(void ***)(a1 + 1576);
  v6 = *(void ***)(a1 + 1584);
  *(_QWORD *)(a1 + 1608) = 0;
  v7 = (char *)v6 - (char *)v5;
  if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
  {
    do
    {
      operator delete(*v5);
      v5 = (void **)(*(_QWORD *)(a1 + 1576) + 8);
      *(_QWORD *)(a1 + 1576) = v5;
      v6 = *(void ***)(a1 + 1584);
      v7 = (char *)v6 - (char *)v5;
    }
    while ((unint64_t)((char *)v6 - (char *)v5) > 0x10);
  }
  v8 = v7 >> 3;
  if (v8 == 1)
  {
    v9 = 256;
    goto LABEL_13;
  }
  if (v8 == 2)
  {
    v9 = 512;
LABEL_13:
    *(_QWORD *)(a1 + 1600) = v9;
  }
  if (v5 != v6)
  {
    do
    {
      v10 = *v5++;
      operator delete(v10);
    }
    while (v5 != v6);
    v11 = *(_QWORD *)(a1 + 1576);
    v12 = *(_QWORD *)(a1 + 1584);
    if (v12 != v11)
      *(_QWORD *)(a1 + 1584) = v12 + ((v11 - v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v13 = *(void **)(a1 + 1568);
  if (v13)
    operator delete(v13);
  v14 = *(unsigned int *)(a1 + 1560);
  v15 = *(_QWORD *)(a1 + 1544);
  if ((_DWORD)v14)
  {
    v50 = (_QWORD *)(v15 + 16);
    v51 = 32 * v14;
    do
    {
      if ((*(v50 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v52 = (void *)*(v50 - 1);
        if (v52)
        {
          *v50 = v52;
          operator delete(v52);
        }
      }
      v50 += 4;
      v51 -= 32;
    }
    while (v51);
    v15 = *(_QWORD *)(a1 + 1544);
  }
  MEMORY[0x1CAA32FB4](v15, 8);
  v16 = *(void **)(a1 + 1520);
  if (v16)
  {
    *(_QWORD *)(a1 + 1528) = v16;
    operator delete(v16);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1496), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1464), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1440), 8);
  v17 = *(void **)(a1 + 1416);
  if (v17)
  {
    *(_QWORD *)(a1 + 1424) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 1392);
  if (v18)
  {
    *(_QWORD *)(a1 + 1400) = v18;
    operator delete(v18);
  }
  sub_1C6143384(*(_QWORD **)(a1 + 1376));
  v19 = *(void **)(a1 + 1344);
  if (v19)
  {
    *(_QWORD *)(a1 + 1352) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 1320);
  if (v20)
  {
    *(_QWORD *)(a1 + 1328) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 1296);
  if (v21)
  {
    *(_QWORD *)(a1 + 1304) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 1272);
  if (v22)
  {
    *(_QWORD *)(a1 + 1280) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 744);
  if (v23 != (void *)(a1 + 760))
    free(v23);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 720), 8);
  v24 = *(void **)(a1 + 696);
  if (v24)
  {
    *(_QWORD *)(a1 + 704) = v24;
    operator delete(v24);
  }
  if (*(_BYTE *)(a1 + 688))
  {
    llvm::MetadataLoader::~MetadataLoader((char ***)(a1 + 680));
    *(_BYTE *)(a1 + 688) = 0;
  }
  v25 = *(void **)(a1 + 640);
  if (v25)
  {
    *(_QWORD *)(a1 + 648) = v25;
    operator delete(v25);
  }
  v26 = *(_QWORD *)(a1 + 616);
  if (v26)
  {
    v27 = *(_QWORD *)(a1 + 624);
    v28 = *(void **)(a1 + 616);
    if (v27 != v26)
    {
      do
      {
        v29 = *(_QWORD *)(v27 - 16);
        if (v29 != -8192 && v29 != -4096 && v29 != 0)
        {
          v31 = *(_QWORD *)(v27 - 32) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v31 = *(_QWORD *)(v27 - 24);
          v32 = *(unint64_t **)(v27 - 24);
          if (v32)
          {
            *v32 = *v32 & 7 | v31;
          }
          else
          {
            v33 = *(_QWORD *)(v27 - 16);
            v34 = ***(int32x2_t ****)v33;
            v35 = (unint64_t)v34[303];
            if (v35 <= v31)
            {
              v36 = v34[305].u32[0];
              if (v35 + 16 * v36 > v31)
              {
                v37 = v36 - 1;
                LODWORD(v38) = v37 & ((v33 >> 4) ^ (v33 >> 9));
                v39 = (uint64_t *)(v35 + 16 * v38);
                v40 = *v39;
                if (v33 == *v39)
                {
LABEL_61:
                  *v39 = -8192;
                  v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
                  v33 = *(_QWORD *)(v27 - 16);
                }
                else
                {
                  v41 = 1;
                  while (v40 != -4096)
                  {
                    v42 = v38 + v41++;
                    v38 = v42 & v37;
                    v40 = *(_QWORD *)(v35 + 16 * v38);
                    if (v33 == v40)
                    {
                      v39 = (uint64_t *)(v35 + 16 * v38);
                      goto LABEL_61;
                    }
                  }
                }
                *(_BYTE *)(v33 + 17) &= ~1u;
              }
            }
          }
        }
        v27 -= 32;
      }
      while (v27 != v26);
      v28 = *(void **)(a1 + 616);
    }
    *(_QWORD *)(a1 + 624) = v26;
    operator delete(v28);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 592), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 568), 8);
  v43 = *(unsigned int *)(a1 + 560);
  v44 = *(_QWORD *)(a1 + 544);
  if ((_DWORD)v43)
  {
    v45 = 32 * v43;
    v46 = (_QWORD *)(v44 + 24);
    do
    {
      if (*((_DWORD *)v46 - 6) <= 0xFFFFFFFD)
      {
        v47 = (_QWORD *)*(v46 - 2);
        if (v46 != v47)
          free(v47);
      }
      v46 += 4;
      v45 -= 32;
    }
    while (v45);
    v44 = *(_QWORD *)(a1 + 544);
  }
  MEMORY[0x1CAA32FB4](v44, 8);
  v48 = *(void **)(a1 + 520);
  if (v48)
  {
    *(_QWORD *)(a1 + 528) = v48;
    operator delete(v48);
  }
  v53 = (void **)(a1 + 496);
  sub_1C4765410(&v53);
  v53 = (void **)(a1 + 472);
  sub_1C4765410(&v53);
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_1C4FF8A28((char **)(a1 + 96));
  if (*(_QWORD *)(a1 + 72))
  {
    sub_1C4FF80DC((uint64_t *)(a1 + 72));
    operator delete(*(void **)(a1 + 72));
  }
  v53 = (void **)(a1 + 8);
  sub_1C4FF8984(&v53);
  return a1;
}

void sub_1C5000C44(uint64_t a1)
{
  sub_1C50007CC(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5000C68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  llvm::Function *v18;
  llvm::Function *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::CallBase **v22;
  uint64_t v23;
  llvm::CallBase **v24;
  llvm::CallBase **v25;
  uint64_t v26;
  llvm *v27;
  llvm::CallBase **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  llvm *v39;
  llvm::Function *v40;
  uint64_t *v41;
  _QWORD *m;
  _QWORD *v43;
  uint64_t v44;
  uint64_t ***v45;
  uint64_t ***v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  _QWORD *v52;
  _QWORD ***v53;
  _QWORD *v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t n;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  int v95;
  int v96;
  _QWORD *v97;
  _QWORD *i;
  _QWORD *v99;
  _QWORD *v100;
  int v101;
  int v102;
  _BYTE *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  unsigned int v108;
  _QWORD *v109;
  _BYTE *v110;
  _QWORD *v111;
  int v112;
  BOOL v113;
  unsigned int v114;
  uint64_t v115;
  const llvm::MDNode **v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t j;
  uint64_t v123;
  uint64_t v124;
  uint64_t k;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  void *v132;
  void *v133;
  llvm::MDNode *v134;
  _QWORD *v135;
  uint64_t *v136;
  _QWORD *v137;
  uint64_t v138[4];
  __int16 v139;
  uint64_t v140;
  char v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  __int16 v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  if (!a2 || *(_BYTE *)(a2 + 16) || (*(_BYTE *)(a2 + 34) & 0x80) == 0)
  {
    *a3 = 0;
    return;
  }
  v6 = *(_QWORD *)(a1 + 1496);
  v7 = *(unsigned int *)(a1 + 1512);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (uint64_t *)(v6 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_8;
    v101 = 1;
    while (v10 != -4096)
    {
      v102 = v8 + v101++;
      v8 = v102 & (v7 - 1);
      v10 = *(_QWORD *)(v6 + 16 * v8);
      if (v10 == a2)
      {
        v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_8:
  if (v9[1])
    goto LABEL_39;
  do
  {
    v11 = *(_QWORD *)(a1 + 440);
    v12 = (v11 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 48) = v12;
    *(_DWORD *)(a1 + 64) = 0;
    if ((v11 & 0x3F) != 0)
    {
      sub_1C4FF7E04(a1 + 32, v11 & 0x3F, (uint64_t)&v142);
      if ((v143 & 1) != 0)
      {
        v16 = v142;
        *a3 = (uint64_t)v142;
        if (v16)
          return;
      }
      else
      {
        *a3 = 0;
      }
      if (*(_DWORD *)(a1 + 64))
        goto LABEL_16;
      v12 = *(_QWORD *)(a1 + 48);
    }
    else
    {
      *a3 = 0;
    }
    if (*(_QWORD *)(a1 + 40) <= v12)
    {
      v142 = "Could not find function in stream";
LABEL_24:
      v146 = 259;
      sub_1C500A780(a3, a1 + 8, (llvm::Twine *)&v142);
      goto LABEL_34;
    }
LABEL_16:
    if (!*(_BYTE *)(a1 + 1488))
    {
      v142 = "Trying to materialize functions before seeing function blocks";
      goto LABEL_24;
    }
    v142 = &v144;
    v143 = 0x4000000000;
    sub_1C4FF7B90(a1 + 32, 0, (uint64_t)&v140);
    if ((v141 & 1) != 0)
    {
      v13 = v140;
      v140 = 0;
      *a3 = v13;
    }
    else
    {
      if ((_DWORD)v140 == 2)
      {
        if (HIDWORD(v140) == 12)
        {
          sub_1C500A908(a3, a1);
          if (!*a3)
          {
            *(_QWORD *)(a1 + 440) = 8 * *(_QWORD *)(a1 + 48) - *(unsigned int *)(a1 + 64);
            *a3 = 0;
          }
          goto LABEL_29;
        }
        v14 = "Expect function block";
      }
      else
      {
        v14 = "Expect SubBlock";
      }
      v138[0] = (uint64_t)v14;
      v139 = 259;
      sub_1C500A780(a3, a1 + 8, (llvm::Twine *)v138);
    }
LABEL_29:
    if ((v141 & 1) != 0)
    {
      v15 = v140;
      v140 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    if (v142 != &v144)
      free(v142);
LABEL_34:
    if (*a3)
      return;
  }
  while (!v9[1]);
  *a3 = 0;
LABEL_39:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (*a3)
    return;
  v17 = v9[1];
  *(_QWORD *)(a1 + 48) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a1 + 64) = 0;
  if ((v17 & 0x3F) != 0 && (sub_1C4FF7E04(a1 + 32, v17 & 0x3F, (uint64_t)&v142), (v143 & 1) != 0))
  {
    v133 = v142;
    *a3 = (uint64_t)v142;
    if (v133)
      return;
  }
  else
  {
    *a3 = 0;
  }
  sub_1C5001DC0(a3, a1, (llvm::Value *)a2);
  if (*a3)
    return;
  v136 = a3;
  *(_DWORD *)(a2 + 32) &= ~0x800000u;
  if (*(_BYTE *)(a1 + 1642))
    llvm::stripDebugInfo((llvm *)a2, v18);
  v137 = (_QWORD *)a2;
  v20 = *(_QWORD *)(a1 + 1440);
  v21 = *(unsigned int *)(a1 + 1456);
  v22 = (llvm::CallBase **)(v20 + 16 * v21);
  if (*(_DWORD *)(a1 + 1448))
  {
    if ((_DWORD)v21)
    {
      v23 = 16 * v21;
      v24 = *(llvm::CallBase ***)(a1 + 1440);
      while (((unint64_t)*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v24 += 2;
        v23 -= 16;
        if (!v23)
          goto LABEL_51;
      }
    }
    else
    {
      v24 = *(llvm::CallBase ***)(a1 + 1440);
    }
  }
  else
  {
LABEL_51:
    v24 = (llvm::CallBase **)(v20 + 16 * v21);
  }
  v25 = (llvm::CallBase **)(v20 + 16 * v21);
LABEL_54:
  while (v24 != v25)
  {
    v26 = *((_QWORD *)*v24 + 1);
    while (v26)
    {
      v27 = *(llvm **)(v26 + 24);
      v26 = *(_QWORD *)(v26 + 8);
      if (v27)
      {
        if (*((_BYTE *)v27 + 16) == 84)
          llvm::UpgradeIntrinsicCall(v27, v24[1], v19);
      }
    }
    v28 = v24 + 2;
    v24 = v22;
    if (v28 != v22)
    {
      v24 = v28;
      while (((unint64_t)*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v24 += 2;
        if (v24 == v22)
        {
          v24 = v22;
          goto LABEL_54;
        }
      }
    }
  }
  v29 = *(_QWORD *)(a1 + 1464);
  v30 = *(unsigned int *)(a1 + 1480);
  v31 = (uint64_t *)(v29 + 16 * v30);
  if (*(_DWORD *)(a1 + 1472))
  {
    if ((_DWORD)v30)
    {
      v32 = 16 * v30;
      v33 = *(uint64_t **)(a1 + 1464);
      while ((*v33 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v33 += 2;
        v32 -= 16;
        if (!v32)
          goto LABEL_70;
      }
    }
    else
    {
      v33 = *(uint64_t **)(a1 + 1464);
    }
  }
  else
  {
LABEL_70:
    v33 = (uint64_t *)(v29 + 16 * v30);
  }
  v34 = (uint64_t *)(v29 + 16 * v30);
LABEL_73:
  while (v33 != v34)
  {
    v35 = *(_QWORD *)(*v33 + 8);
    if (v35)
    {
      do
      {
        v36 = *(_QWORD *)(v35 + 8);
        sub_1C500A72C(*(_QWORD *)(v35 + 24), v33[1]);
        v35 = v36;
      }
      while (v36);
    }
    v37 = v33 + 2;
    v33 = v31;
    if (v37 != v31)
    {
      v33 = v37;
      while ((*v33 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v33 += 2;
        if (v33 == v31)
        {
          v33 = v31;
          goto LABEL_73;
        }
      }
    }
  }
  v38 = *(_QWORD *)(a1 + 680) + 680;
  v39 = (llvm *)v137;
  v142 = v137;
  v138[0] = 0;
  if ((sub_1C5021AE0(v38, &v142, v138) & 1) != 0)
  {
    v134 = *(llvm::MDNode **)(v138[0] + 8);
    v41 = v136;
    if (v134)
      llvm::Value::setMetadata((llvm::Value *)v137, 0, v134);
  }
  else
  {
    v41 = v136;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 680) + 968))
    goto LABEL_84;
  v97 = v137 + 9;
  for (i = (_QWORD *)v137[10]; ; i = (_QWORD *)i[1])
  {
    if (i == v97)
      goto LABEL_84;
    v99 = i - 3;
    if (!i)
      v99 = 0;
    v100 = (_QWORD *)v99[6];
    if (v100 != v99 + 5)
      break;
  }
  while (2)
  {
    if (v100)
      v103 = v100 - 3;
    else
      v103 = 0;
    if ((v103[23] & 0x20) != 0)
    {
      v104 = ***(_QWORD ***)v103;
      v142 = v103;
      v105 = *(_DWORD *)(v104 + 2496);
      if (!v105)
      {
        v131 = 0;
        goto LABEL_253;
      }
      v106 = *(_QWORD *)(v104 + 2480);
      v107 = v105 - 1;
      v108 = v107 & ((v103 >> 4) ^ (v103 >> 9));
      v109 = (_QWORD *)(v106 + 40 * v108);
      v110 = (_BYTE *)*v109;
      if ((_BYTE *)*v109 != v103)
      {
        v111 = 0;
        v112 = 1;
        while (v110 != (_BYTE *)-4096)
        {
          if (v111)
            v113 = 0;
          else
            v113 = v110 == (_BYTE *)-8192;
          if (v113)
            v111 = v109;
          v114 = v108 + v112++;
          v108 = v114 & v107;
          v109 = (_QWORD *)(v106 + 40 * v108);
          v110 = (_BYTE *)*v109;
          if ((_BYTE *)*v109 == v103)
            goto LABEL_207;
        }
        if (v111)
          v131 = v111;
        else
          v131 = v109;
LABEL_253:
        v109 = sub_1C541AB24(v104 + 2480, (uint64_t)&v142, (uint64_t *)&v142, v131);
        v132 = v142;
        v109[4] = 0;
        v109[3] = 0;
        *v109 = v132;
        v109[1] = v109 + 3;
        v109[2] = 0x100000000;
      }
LABEL_207:
      v115 = *((unsigned int *)v109 + 4);
      if ((_DWORD)v115)
      {
        v116 = (const llvm::MDNode **)(v109[1] + 8);
        v117 = 16 * v115;
        while (*((_DWORD *)v116 - 2) != 1)
        {
          v116 += 2;
          v117 -= 16;
          if (!v117)
            goto LABEL_211;
        }
        if (*v116
          && !llvm::TBAAVerifier::visitTBAAMetadata((llvm::raw_ostream ***)(a1 + 1648), (llvm::Instruction *)v103, *v116))
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 680) + 968) = 1;
          v120 = v137[5];
          v121 = v120 + 24;
          for (j = *(_QWORD *)(v120 + 32); j != v121; j = *(_QWORD *)(j + 8))
          {
            v123 = j - 56;
            if (!j)
              v123 = 0;
            if ((*(_BYTE *)(v123 + 34) & 0x80) == 0)
            {
              v124 = v123 + 72;
              for (k = *(_QWORD *)(v123 + 80); k != v124; k = *(_QWORD *)(k + 8))
              {
                v126 = k - 24;
                if (!k)
                  v126 = 0;
                v127 = *(_QWORD *)(v126 + 48);
                if (v127 != v126 + 40)
                {
                  while (1)
                  {
                    if (v127)
                      v128 = v127 - 24;
                    else
                      v128 = 0;
                    if (*(_QWORD *)(v128 + 48) || (*(_BYTE *)(v128 + 23) & 0x20) != 0)
                      llvm::Value::setMetadata((llvm::Value *)v128, 1, 0);
                    v127 = *(_QWORD *)(v127 + 8);
                    v129 = k - 24;
                    if (!k)
                      v129 = 0;
                    if (v127 == v129 + 40)
                      break;
LABEL_248:
                    if (k == v124)
                      goto LABEL_249;
                  }
                  while (1)
                  {
                    k = *(_QWORD *)(k + 8);
                    if (k == v124)
                      goto LABEL_249;
                    v130 = k - 24;
                    if (!k)
                      v130 = 0;
                    v127 = *(_QWORD *)(v130 + 48);
                    if (v127 != v130 + 40)
                      goto LABEL_248;
                  }
                }
              }
            }
LABEL_249:
            ;
          }
        }
      }
    }
LABEL_211:
    v100 = (_QWORD *)v100[1];
    v118 = i - 3;
    if (!i)
      v118 = 0;
    if (v100 != v118 + 5)
    {
      v41 = v136;
      v39 = (llvm *)v137;
LABEL_220:
      if (i == v97)
        goto LABEL_84;
      continue;
    }
    break;
  }
  v41 = v136;
  v39 = (llvm *)v137;
  while (1)
  {
    i = (_QWORD *)i[1];
    if (i == v97)
      break;
    v119 = i - 3;
    if (!i)
      v119 = 0;
    v100 = (_QWORD *)v119[6];
    if (v100 != v119 + 5)
      goto LABEL_220;
  }
LABEL_84:
  for (m = (_QWORD *)*((_QWORD *)v39 + 10); ; m = (_QWORD *)m[1])
  {
    if (m == (_QWORD *)((char *)v39 + 72))
      goto LABEL_182;
    v43 = m - 3;
    if (!m)
      v43 = 0;
    v44 = v43[6];
    if ((_QWORD *)v44 != v43 + 5)
      break;
  }
  v135 = (_QWORD *)((char *)v39 + 72);
  while (2)
  {
    v45 = (uint64_t ***)(v44 - 24);
    if (v44)
      v46 = (uint64_t ***)(v44 - 24);
    else
      v46 = 0;
    if ((*((_BYTE *)v46 + 23) & 0x20) != 0)
    {
      v47 = ***v46;
      v142 = v46;
      v48 = *(_DWORD *)(v47 + 2496);
      if (!v48)
      {
        v93 = 0;
        goto LABEL_160;
      }
      v49 = *(_QWORD *)(v47 + 2480);
      v50 = v48 - 1;
      v51 = v50 & ((v46 >> 4) ^ (v46 >> 9));
      v52 = (_QWORD *)(v49 + 40 * v51);
      v53 = (_QWORD ***)*v52;
      if ((uint64_t ***)*v52 != v46)
      {
        v54 = 0;
        v55 = 1;
        while (v53 != (_QWORD ***)-4096)
        {
          if (v54)
            v56 = 0;
          else
            v56 = v53 == (_QWORD ***)-8192;
          if (v56)
            v54 = v52;
          v57 = v51 + v55++;
          v51 = v57 & v50;
          v52 = (_QWORD *)(v49 + 40 * v51);
          v53 = (_QWORD ***)*v52;
          if ((uint64_t ***)*v52 == v46)
            goto LABEL_105;
        }
        if (v54)
          v93 = v54;
        else
          v93 = v52;
LABEL_160:
        v52 = sub_1C541AB24(v47 + 2480, (uint64_t)&v142, (uint64_t *)&v142, v93);
        v94 = v142;
        v52[4] = 0;
        v52[3] = 0;
        *v52 = v94;
        v52[1] = v52 + 3;
        v52[2] = 0x100000000;
      }
LABEL_105:
      v58 = *((unsigned int *)v52 + 4);
      if ((_DWORD)v58)
      {
        v59 = (_QWORD *)(v52[1] + 8);
        v60 = 16 * v58;
        while (*((_DWORD *)v59 - 2) != 2)
        {
          v59 += 2;
          v60 -= 16;
          if (!v60)
            goto LABEL_109;
        }
        v84 = *v59;
        if (*v59)
        {
          v85 = *(unsigned int *)(v84 + 8);
          v86 = *(_QWORD *)(v84 - 8 * v85);
          if (v86)
          {
            if (!*(_BYTE *)v86)
            {
              v87 = *(_QWORD **)(v86 + 8);
              if (*v87 != 14)
                goto LABEL_145;
              v88 = v87[3];
              v89 = *(_QWORD *)((char *)v87 + 30);
              if (v88 != 0x775F68636E617262 || v89 != 0x737468676965775FLL)
                goto LABEL_145;
              v95 = *((unsigned __int8 *)v46 + 16);
              if (v44 && v95 == 30)
              {
                if ((*((_DWORD *)v46 + 5) & 0x7FFFFFF) == 3)
                  v96 = 2;
                else
                  v96 = 1;
              }
              else if (v44 && v95 == 31)
              {
                v96 = (*((_DWORD *)v46 + 5) >> 1) & 0x3FFFFFF;
              }
              else if (v95 == 84)
              {
                v96 = 1;
              }
              else if (v44 && v95 == 32)
              {
                v96 = (*((_DWORD *)v46 + 5) & 0x7FFFFFF) - 1;
              }
              else
              {
                if (v95 != 85)
                  goto LABEL_145;
                v96 = 2;
              }
              if ((_DWORD)v85 != v96 + 1 && (v46[6] || (*((_BYTE *)v46 + 23) & 0x20) != 0))
                llvm::Value::setMetadata((llvm::Value *)v46, 2, 0);
            }
          }
        }
      }
    }
LABEL_109:
    v61 = *((unsigned __int8 *)v46 + 16) - 33;
    v62 = v61 > 0x33;
    v63 = (1 << v61) & 0x8000000000041;
    if (!v62 && v63 != 0)
    {
      llvm::AttributeFuncs::typeIncompatible(**(_QWORD **)(*(_QWORD *)(v44 + 48) + 16), 3, (uint64_t *)&v142);
      v66 = (uint64_t *)(v44 + 40);
      v65 = *(_QWORD *)(v44 + 40);
      if (v65 && *(_DWORD *)(v65 + 8) >= 2u)
        v67 = *(_QWORD *)(v65 + 48);
      else
        v67 = 0;
      v68 = **(uint64_t ***)(v44 - 24);
      v138[0] = v67;
      v69 = llvm::AttributeSet::removeAttributes(v138, v68, (uint64_t)&v142);
      if (v67 == v69)
        v70 = *v66;
      else
        v70 = llvm::AttributeList::setAttributesAtIndex((_QWORD *)(v44 + 40), v68, 0, v69);
      *(_QWORD *)(v44 + 40) = v70;
      sub_1C5010E9C((uint64_t)&v144, v145);
      v71 = 0;
      for (n = v44 - 24; ; n += 32)
      {
        v73 = *(unsigned __int8 *)(v44 - 8);
        if (v73 == 84)
          v74 = 0;
        else
          v74 = v73 == 39 ? (*(_DWORD *)(v44 + 56) + 1) : 2;
        v75 = *(_DWORD *)(v44 - 4);
        if (v75 < 0 && (v83 = v75 & 0x7FFFFFF, (*(_QWORD *)(v44 - 32 - 32 * v83) & 0xFFFFFFFF0) != 0))
        {
          v77 = -v83;
          v76 = *((_DWORD *)&v45[-4 * v83 - 1] - 1) - *(_DWORD *)((char *)&v45[-4 * v83] - (char *)v45[-4 * v83 - 1]);
        }
        else
        {
          v76 = 0;
          v77 = -(uint64_t)(v75 & 0x7FFFFFF);
        }
        if (v71 >= ((-56 - 32 * v74 + 32 * (unint64_t)-v76 - (32 * v77 - 24)) >> 5))
          break;
        llvm::AttributeFuncs::typeIncompatible(**(_QWORD **)(n + 32 * v77), 3, (uint64_t *)&v142);
        v78 = *v66;
        if (*v66 && (v71 + 2) < *(_DWORD *)(v78 + 8))
          v79 = *(_QWORD *)(v78 + 8 * (v71 + 2) + 40);
        else
          v79 = 0;
        v80 = **v45;
        v138[0] = v79;
        v81 = llvm::AttributeSet::removeAttributes(v138, v80, (uint64_t)&v142);
        if (v79 == v81)
          v82 = *v66;
        else
          v82 = llvm::AttributeList::setAttributesAtIndex((_QWORD *)(v44 + 40), v80, (int)v71 + 1, v81);
        *v66 = v82;
        sub_1C5010E9C((uint64_t)&v144, v145);
        ++v71;
      }
    }
LABEL_145:
    v44 = *(_QWORD *)(v44 + 8);
    v91 = m - 3;
    if (!m)
      v91 = 0;
    if ((_QWORD *)v44 != v91 + 5)
    {
      v41 = v136;
      v39 = (llvm *)v137;
LABEL_154:
      if (m == v135)
        goto LABEL_182;
      continue;
    }
    break;
  }
  v41 = v136;
  v39 = (llvm *)v137;
  while (1)
  {
    m = (_QWORD *)m[1];
    if (m == v135)
      break;
    v92 = m - 3;
    if (!m)
      v92 = 0;
    v44 = v92[6];
    if ((_QWORD *)v44 != v92 + 5)
      goto LABEL_154;
  }
LABEL_182:
  llvm::UpgradeFunctionAttributes(v39, v40);
  sub_1C4FFB778(v41, a1);
}

void sub_1C50018DC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  llvm::Function *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::CallBase **v12;
  uint64_t v13;
  llvm::CallBase **v14;
  llvm::CallBase **v15;
  llvm::ValueAsMetadata *v16;
  uint64_t v17;
  llvm *v18;
  llvm::CallBase **v19;
  uint64_t v20;
  uint64_t v21;
  llvm::ValueAsMetadata **v22;
  uint64_t v23;
  llvm::ValueAsMetadata **v24;
  llvm::ValueAsMetadata **v25;
  llvm::ValueAsMetadata **v26;
  llvm::Module *v27;
  llvm::Module *v28;
  llvm::Module *v29;
  _QWORD v30[4];
  __int16 v31;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(a2);
  if (!*a2)
  {
    *(_BYTE *)(a1 + 1641) = 1;
    v5 = *(_QWORD *)(a1 + 432);
    v6 = v5 + 24;
    for (i = *(_QWORD *)(v5 + 32); i != v6; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v8 = i - 56;
      else
        v8 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v8);
      if (*a2)
        return;
    }
    if (*(_OWORD *)(a1 + 440) == 0
      || (*(_QWORD *)(a1 + 448) <= *(_QWORD *)(a1 + 440) ? (v9 = *(_QWORD *)(a1 + 440)) : (v9 = *(_QWORD *)(a1 + 448)),
          sub_1C5010F00(a2, a1, v9, 0, (uint64_t)sub_1C5016F54, (uint64_t)v30),
          !*a2))
    {
      if (*(_DWORD *)(a1 + 1552))
      {
        v30[0] = "Never resolved function from blockaddress";
        v31 = 259;
        sub_1C500A780(a2, a1 + 8, (llvm::Twine *)v30);
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 1440);
        v11 = *(unsigned int *)(a1 + 1456);
        v12 = (llvm::CallBase **)(v10 + 16 * v11);
        if (*(_DWORD *)(a1 + 1448))
        {
          if ((_DWORD)v11)
          {
            v13 = 16 * v11;
            v14 = *(llvm::CallBase ***)(a1 + 1440);
            while (((unint64_t)*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v14 += 2;
              v13 -= 16;
              if (!v13)
                goto LABEL_22;
            }
          }
          else
          {
            v14 = *(llvm::CallBase ***)(a1 + 1440);
          }
        }
        else
        {
LABEL_22:
          v14 = (llvm::CallBase **)(v10 + 16 * v11);
        }
        v15 = (llvm::CallBase **)(v10 + 16 * v11);
LABEL_25:
        while (v14 != v15)
        {
          v16 = *v14;
          v17 = *((_QWORD *)*v14 + 1);
          if (v17)
          {
            do
            {
              v18 = *(llvm **)(v17 + 24);
              if (v18 && *((_BYTE *)v18 + 16) == 84)
                llvm::UpgradeIntrinsicCall(v18, v14[1], v4);
              v17 = *(_QWORD *)(v17 + 8);
            }
            while (v17);
            v16 = *v14;
            if (*((_QWORD *)*v14 + 1))
            {
              llvm::Value::doRAUW(v16, v14[1], (llvm::Value *)1);
              v16 = *v14;
            }
          }
          llvm::Function::eraseFromParent(v16);
          v19 = v14 + 2;
          v14 = v12;
          if (v19 != v12)
          {
            v14 = v19;
            while (((unint64_t)*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v14 += 2;
              if (v14 == v12)
              {
                v14 = v12;
                goto LABEL_25;
              }
            }
          }
        }
        sub_1C5015F50((_DWORD *)(a1 + 1440));
        v20 = *(_QWORD *)(a1 + 1464);
        v21 = *(unsigned int *)(a1 + 1480);
        v22 = (llvm::ValueAsMetadata **)(v20 + 16 * v21);
        if (*(_DWORD *)(a1 + 1472))
        {
          if ((_DWORD)v21)
          {
            v23 = 16 * v21;
            v24 = *(llvm::ValueAsMetadata ***)(a1 + 1464);
            while (((unint64_t)*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v24 += 2;
              v23 -= 16;
              if (!v23)
                goto LABEL_43;
            }
          }
          else
          {
            v24 = *(llvm::ValueAsMetadata ***)(a1 + 1464);
          }
        }
        else
        {
LABEL_43:
          v24 = (llvm::ValueAsMetadata **)(v20 + 16 * v21);
        }
        v25 = (llvm::ValueAsMetadata **)(v20 + 16 * v21);
LABEL_46:
        while (v24 != v25)
        {
          llvm::Value::doRAUW(*v24, v24[1], (llvm::Value *)1);
          llvm::Function::eraseFromParent(*v24);
          v26 = v24 + 2;
          v24 = v22;
          if (v26 != v22)
          {
            v24 = v26;
            while (((unint64_t)*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v24 += 2;
              if (v24 == v22)
              {
                v24 = v22;
                goto LABEL_46;
              }
            }
          }
        }
        sub_1C5015F50((_DWORD *)(a1 + 1464));
        llvm::UpgradeDebugInfo(*(llvm **)(a1 + 432), v27);
        llvm::UpgradeModuleFlags(*(uint64_t ***)(a1 + 432), v28);
        llvm::UpgradeARCRuntime(*(llvm **)(a1 + 432), v29);
        *a2 = 0;
      }
    }
  }
}

void sub_1C5001B9C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t ModuleFlag;
  uint64_t v10;
  uint64_t inserted;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  const char *v19;
  char v20;
  __int16 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 1520);
  for (i = *(uint64_t **)(a1 + 1528); v4 != i; ++v4)
  {
    v6 = *v4;
    *(_QWORD *)(a1 + 48) = ((unint64_t)*v4 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(a1 + 64) = 0;
    if ((v6 & 0x3F) != 0 && (sub_1C4FF7E04(a1 + 32, v6 & 0x3F, (uint64_t)&v19), (v20 & 1) != 0))
    {
      v7 = v19;
      *a2 = (uint64_t)v19;
      if (v7)
        return;
    }
    else
    {
      *a2 = 0;
    }
    llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*(llvm::MetadataLoader::MetadataLoaderImpl **)(a1 + 680), 1, a2);
    if (*a2)
      return;
  }
  v8 = *(_QWORD *)(a1 + 432);
  v19 = "llvm.linker.options";
  v21 = 259;
  if (!llvm::Module::getNamedMetadata(v8, (uint64_t)&v19))
  {
    ModuleFlag = llvm::Module::getModuleFlag(*(_QWORD *)(a1 + 432), "Linker Options", 0xEuLL);
    if (ModuleFlag)
    {
      v10 = ModuleFlag;
      inserted = llvm::Module::getOrInsertNamedMetadata(*(_QWORD *)(a1 + 432), "llvm.linker.options", 0x13uLL);
      v12 = *(unsigned int *)(v10 + 8);
      if ((_DWORD)v12)
      {
        v13 = inserted;
        v14 = -8 * v12;
        do
        {
          v15 = *(unsigned __int8 **)(v10 + v14);
          v19 = (const char *)v15;
          v16 = *(_QWORD *)(v13 + 48);
          v17 = *(unsigned int *)(v16 + 8);
          if (v17 >= *(_DWORD *)(v16 + 12))
          {
            sub_1C5419FD8(*(_QWORD *)(v13 + 48), (unsigned __int8 **)&v19);
          }
          else
          {
            v18 = (unsigned __int8 **)(*(_QWORD *)v16 + 8 * v17);
            *v18 = v15;
            if (v15)
            {
              llvm::MetadataTracking::track((uint64_t)v18, v15, 2);
              LODWORD(v17) = *(_DWORD *)(v16 + 8);
            }
            *(_DWORD *)(v16 + 8) = v17 + 1;
          }
          v14 += 8;
        }
        while (v14);
      }
    }
  }
  *(_QWORD *)(a1 + 1528) = *(_QWORD *)(a1 + 1520);
  *a2 = 0;
}

uint64_t sub_1C5001D48(uint64_t result)
{
  *(_BYTE *)(result + 1642) = 1;
  return result;
}

_QWORD *sub_1C5001D54@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (_BYTE *)result[220];
  v4 = (_BYTE *)result[221];
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v4 - v3);
    *a2 = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a2[2] = v7;
    result = memcpy(v6, v3, v5);
    a2[1] = v7;
  }
  return result;
}

void sub_1C5001DC0(uint64_t *a1, uint64_t a2, llvm::Value *a3)
{
  llvm::Value *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  llvm::Value *v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  void **v23;
  void **v24;
  void **v25;
  unsigned int v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Type *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  _BOOL4 v44;
  unsigned int v45;
  llvm::GetElementPtrInst *TypeAtIndex;
  uint64_t v47;
  uint64_t v48;
  int v49;
  const char *v50;
  uint64_t *v51;
  int v52;
  int v53;
  int v54;
  _DWORD **v55;
  unsigned int v56;
  llvm::Type **v57;
  int v58;
  llvm::Type **v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  void *v64;
  unsigned int v65;
  llvm::Type *v66;
  int v67;
  unsigned int v68;
  llvm::Type **v69;
  uint64_t *v70;
  _DWORD *v71;
  llvm::GetElementPtrInst *v72;
  const char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  unsigned int v79;
  unint64_t v80;
  llvm::Instruction *v81;
  llvm::LandingPadInst *v82;
  const char *v83;
  unsigned int v84;
  uint64_t *v85;
  int v86;
  unsigned int v87;
  uint64_t *v88;
  unsigned int v89;
  llvm::Type **v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  llvm::Type *v94;
  int v95;
  unsigned int v96;
  llvm::Type **v97;
  llvm::Value *v98;
  unint64_t v99;
  uint64_t v100;
  llvm::BasicBlock *v101;
  llvm::Type *v102;
  int v103;
  unsigned int v104;
  llvm::Type **v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t *v122;
  int v123;
  void *v124;
  unint64_t v125;
  int v126;
  int v127;
  uint64_t *v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t *v131;
  unint64_t v132;
  llvm::Type *v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  llvm::Value *v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  int v142;
  int v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  llvm::Type **v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  __int16 v155;
  llvm::Type *v156;
  int v157;
  unsigned int v158;
  llvm::Type **v159;
  unint64_t v160;
  uint64_t v161;
  llvm::BasicBlock *v162;
  llvm::Value *v163;
  _DWORD *v164;
  llvm::Value *v165;
  _DWORD *v166;
  unint64_t v167;
  char *v168;
  unint64_t v169;
  llvm::LLVMContext *v170;
  llvm::Value *v171;
  _BOOL8 v172;
  size_t v173;
  llvm::Value *v174;
  llvm::Value *v175;
  uint64_t v176;
  llvm::Value *v177;
  int v178;
  llvm::Type *v179;
  llvm::Type **v180;
  unsigned int v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  uint64_t *v185;
  unsigned int v186;
  llvm::Type **v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  llvm::Type **v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int *v196;
  unsigned int v197;
  _QWORD *v198;
  llvm::Type *v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  int *v203;
  int v204;
  unsigned int v205;
  uint64_t *v206;
  int v207;
  uint64_t v208;
  unint64_t v209;
  unsigned int v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  int v214;
  unsigned int v215;
  uint64_t *v216;
  unsigned int v217;
  llvm::Type **v218;
  uint64_t v219;
  int v220;
  int v221;
  _QWORD *v222;
  unsigned int v223;
  llvm::Type **v224;
  uint64_t v225;
  _DWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int *v230;
  int v231;
  uint64_t v232;
  int v233;
  llvm::Type *v234;
  llvm::Type *v235;
  unsigned int v236;
  llvm::Type **v237;
  llvm::Value *v238;
  uint64_t v239;
  char *v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  int v245;
  void *v246;
  unint64_t v247;
  uint64_t v248;
  int v249;
  _QWORD *v250;
  llvm::Type **v251;
  _DWORD *v252;
  uint64_t v253;
  uint64_t v254;
  int *v255;
  unsigned int v256;
  unint64_t v257;
  unsigned int v258;
  llvm::Type *v259;
  unsigned int v260;
  llvm::Type **v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _QWORD *v270;
  char *v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t *v277;
  int v278;
  void *v279;
  unint64_t v280;
  int v281;
  unsigned int v282;
  uint64_t *v283;
  unsigned int v284;
  llvm::Type **v285;
  uint64_t v286;
  uint64_t *v287;
  const char *v288;
  void **v289;
  void **v290;
  uint64_t v291;
  BOOL v292;
  _QWORD *v293;
  unint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t *v306;
  const char *v307;
  uint64_t v308;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v313;
  uint64_t v314;
  int *v315;
  int *v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  int *v320;
  int v321;
  unint64_t v322;
  uint64_t v323;
  void *v324;
  int v325;
  unsigned int v326;
  int n;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  int *v335;
  int v336;
  llvm::Type *v337;
  llvm::Type **v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _DWORD *v342;
  llvm::Value *v343;
  unint64_t v344;
  int v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  unsigned __int32 v349;
  uint64_t v350;
  void *v351;
  unint64_t v352;
  uint64_t v353;
  const char *v354;
  _QWORD *v355;
  char *v356;
  unint64_t v357;
  unsigned __int8 **v358;
  int *v359;
  llvm::Type **v360;
  llvm::Type *v361;
  uint64_t v362;
  BOOL v363;
  uint64_t *v364;
  __int128 *v365;
  __int128 *v366;
  llvm::Type *v367;
  int v368;
  llvm::Value *v369;
  int v370;
  _QWORD *v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  int *v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t *v378;
  llvm::Type **v379;
  void *v380;
  const char *v381;
  uint64_t *v382;
  const char *v383;
  const char *v384;
  unsigned int v385;
  unint64_t v386;
  unint64_t v387;
  char *v388;
  llvm::Type *v389;
  _QWORD *v390;
  llvm::Type *v391;
  uint64_t v392;
  unsigned __int8 *v393;
  uint64_t *v394;
  unsigned int v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  _DWORD *v400;
  unint64_t v401;
  unsigned int v402;
  int v403;
  int v404;
  void **v405;
  void *v406;
  int v407;
  int v408;
  void *v409;
  void *v410;
  const llvm::APInt *v411;
  llvm::ValueHandleBase *v412;
  uint64_t v413;
  void *v414;
  const llvm::APInt *v415;
  unint64_t v416;
  BOOL v417;
  llvm::ValueHandleBase *v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v424;
  uint64_t v425;
  llvm::BasicBlock *v426;
  llvm::ConstantInt **v427;
  uint64_t v428;
  llvm::ConstantInt *v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  void *v434;
  unint64_t v435;
  uint64_t v436;
  unsigned int v437;
  unint64_t v438;
  const char *v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  int v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  int *v447;
  unsigned int *v448;
  uint64_t v449;
  uint64_t v450;
  int *v451;
  unsigned int v452;
  uint64_t v453;
  void *v454;
  int v455;
  unint64_t v456;
  unint64_t v457;
  const char *v458;
  _QWORD *v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  uint64_t *v464;
  _QWORD *v465;
  llvm::Value *v466;
  uint64_t v467;
  unsigned int v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  unsigned __int32 v472;
  int m;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  llvm::Type **v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  llvm::Type *v481;
  int v482;
  llvm::Type *v483;
  int v484;
  unsigned int v485;
  llvm::Type **v486;
  uint64_t *v487;
  unsigned int v488;
  llvm::Type **v489;
  void *v490;
  unsigned int v491;
  llvm::Type *v492;
  llvm::Type **v493;
  unint64_t v494;
  uint64_t v495;
  unsigned int v496;
  uint64_t v497;
  llvm::Type *v498;
  int v499;
  unsigned int v500;
  llvm::Type **v501;
  uint64_t v502;
  const char *v503;
  llvm::Type **v504;
  uint64_t v505;
  uint64_t v506;
  unsigned int v507;
  uint64_t v508;
  uint64_t v509;
  llvm::Type **v510;
  uint64_t v511;
  unint64_t v512;
  int v513;
  unint64_t v514;
  unsigned int v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  char *v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  llvm::Type **v524;
  llvm::ConstantInt *v525;
  unint64_t v526;
  uint64_t v527;
  llvm::BasicBlock *v528;
  char *v529;
  uint64_t v530;
  int v531;
  unint64_t v532;
  llvm::BasicBlock *v533;
  int v534;
  int v535;
  unint64_t v536;
  uint64_t v537;
  llvm::BasicBlock *v538;
  unint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  llvm::Value *v544;
  _QWORD *v545;
  uint64_t v546;
  uint64_t v547;
  _QWORD *v548;
  llvm::Value *v549;
  uint64_t v550;
  unsigned int v551;
  uint64_t v552;
  uint64_t v553;
  const char *v554;
  unsigned int v555;
  unsigned int v556;
  int v557;
  int v558;
  unint64_t v559;
  uint64_t v560;
  unint64_t v561;
  unsigned __int8 *v562;
  llvm::Type **v563;
  unsigned int v564;
  unsigned int v565;
  char *v566;
  char *v567;
  uint64_t v568;
  _QWORD *v569;
  uint64_t v570;
  llvm::Type *v571;
  _QWORD *v572;
  llvm::Type *v573;
  unint64_t v574;
  unsigned int v575;
  unint64_t v576;
  void **v577;
  void *v578;
  uint64_t v579;
  const char *v580;
  unint64_t v581;
  char *v582;
  unsigned int v583;
  char v584;
  char *v585;
  llvm::Type *v586;
  _QWORD *v587;
  llvm::Type *v588;
  char *v589;
  unint64_t v590;
  unint64_t v591;
  uint64_t v592;
  unint64_t v593;
  unsigned __int8 *v594;
  unsigned int v595;
  llvm::Value *v596;
  llvm::Type **v597;
  uint64_t v598;
  uint64_t v599;
  _QWORD *v600;
  _QWORD *v601;
  uint64_t v602;
  llvm::Value *v603;
  uint64_t v604;
  int v605;
  llvm::Type **v606;
  uint64_t v607;
  llvm::Type *v608;
  _QWORD *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t **v612;
  uint64_t v613;
  uint64_t ***v614;
  uint64_t v615;
  _QWORD *v616;
  uint64_t *v617;
  llvm::Value *v618;
  int v619;
  uint64_t v620;
  char *v621;
  uint64_t v622;
  int v623;
  uint64_t v624;
  char *v625;
  llvm::APFloatBase **v626;
  uint64_t v627;
  llvm::APFloatBase *SplatValue;
  unsigned int *v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t v632;
  int *v633;
  unsigned int v634;
  uint64_t v635;
  unint64_t v636;
  unsigned int *v637;
  char *v638;
  char *v639;
  uint64_t v640;
  uint64_t v641;
  unsigned int *v642;
  unint64_t v643;
  int v644;
  uint64_t v645;
  uint64_t *v646;
  uint64_t v647;
  uint64_t v648;
  int *v649;
  unsigned int v650;
  uint64_t v651;
  uint64_t v652;
  int *v653;
  unsigned int v654;
  uint64_t v655;
  uint64_t v656;
  int *v657;
  llvm::Type *v658;
  int v659;
  unsigned int v660;
  int v661;
  int v662;
  void *v663;
  void *v664;
  void *v665;
  uint64_t v666;
  uint64_t *v667;
  unsigned __int8 *Impl;
  unsigned __int8 *v669;
  llvm::Type *v670;
  int v671;
  unsigned int v672;
  llvm::Type **v673;
  llvm::Value *v674;
  _DWORD *v675;
  uint64_t v676;
  _QWORD *v677;
  unint64_t v678;
  unsigned __int8 **v679;
  uint64_t v680;
  uint64_t v681;
  size_t v682;
  int v683;
  _QWORD *v684;
  _QWORD *v685;
  llvm::Instruction *v686;
  char v687;
  unsigned int v688;
  _QWORD *v689;
  _DWORD *v690;
  llvm::Type *v691;
  _QWORD *v692;
  llvm::Type *v693;
  uint64_t **v694;
  uint64_t v695;
  llvm::Type **v696;
  _DWORD *v697;
  uint64_t v698;
  _QWORD *v699;
  void *v700;
  char v701;
  unint64_t v702;
  void *v703;
  unint64_t v704;
  void *v705;
  unint64_t v706;
  int v707;
  unsigned int v708;
  int v709;
  int v710;
  int v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  int *v715;
  int v716;
  int v717;
  int v718;
  llvm::Type *v719;
  unint64_t v720;
  uint64_t v721;
  llvm::Type **v722;
  void *v723;
  unsigned int v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  int *v730;
  const char *v731;
  uint64_t *v732;
  const char *v733;
  uint64_t v734;
  _QWORD *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  int v739;
  unint64_t v740;
  unint64_t v741;
  uint64_t v742;
  unsigned int v743;
  _QWORD **v744;
  unsigned int v745;
  char v746;
  char *v747;
  void *v748;
  uint64_t v749;
  _QWORD *v750;
  uint64_t v751;
  llvm::Type *v752;
  _QWORD *v753;
  llvm::Type *v754;
  unint64_t v755;
  unsigned __int8 *v756;
  int v757;
  uint64_t v758;
  uint64_t v759;
  char *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  int *v765;
  unsigned int v766;
  _QWORD *v767;
  unint64_t v768;
  char v769;
  llvm::Type **v770;
  uint64_t v771;
  unsigned int v772;
  char v773;
  int v774;
  char v775;
  llvm::Value *v776;
  __int16 v777;
  __int16 v778;
  llvm::Type *v779;
  llvm::LandingPadInst *v780;
  llvm::Type *v781;
  unint64_t v782;
  unsigned __int8 *v783;
  int v784;
  uint64_t v785;
  _QWORD **v786;
  uint64_t v787;
  uint64_t v788;
  char *v789;
  const char *v790;
  unint64_t v791;
  int v792;
  unsigned int v793;
  int v794;
  unint64_t v795;
  uint64_t v796;
  unint64_t v797;
  uint64_t v798;
  uint64_t v799;
  int *v800;
  unint64_t v801;
  int v802;
  int v803;
  llvm::Type *v804;
  unint64_t v805;
  uint64_t v806;
  llvm::Type **v807;
  void *v808;
  unsigned int v809;
  uint64_t v810;
  unsigned int v811;
  char v812;
  char *v813;
  void *v814;
  uint64_t v815;
  _QWORD *v816;
  uint64_t v817;
  uint64_t v818;
  llvm::Value *v819;
  llvm::Value *v820;
  unint64_t v821;
  _DWORD *v822;
  llvm::CatchSwitchInst *v823;
  llvm::BasicBlock **v824;
  uint64_t v825;
  llvm::BasicBlock *v826;
  unint64_t v827;
  unsigned __int8 *v828;
  int v829;
  uint64_t v830;
  uint64_t v831;
  char *v832;
  uint64_t v833;
  uint64_t v834;
  unint64_t v835;
  int v836;
  unsigned int v837;
  int v838;
  unint64_t v839;
  unint64_t v840;
  uint64_t v841;
  uint64_t v842;
  int *v843;
  int v844;
  int v845;
  int v846;
  llvm::Type **v847;
  void *v848;
  unsigned int v849;
  uint64_t v850;
  void *v851;
  char v852;
  void *v853;
  void *v854;
  unint64_t v855;
  llvm::Type **v856;
  const char *v857;
  uint64_t v858;
  uint64_t v859;
  char *v860;
  llvm::Type *v861;
  __int16 v862;
  llvm::Type **v863;
  uint64_t v864;
  int v865;
  uint64_t v866;
  void *v867;
  llvm::Type **v868;
  uint64_t v869;
  int v870;
  uint64_t v871;
  unint64_t v872;
  void *v873;
  const char *v874;
  const char *v875;
  char v876;
  _DWORD *v877;
  void *v878;
  unint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t v884;
  llvm::ValueSymbolTable *v885;
  char v886;
  llvm::Type **v887;
  uint64_t v888;
  int v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  char v893;
  _DWORD *v894;
  const char *v895;
  void *v896;
  uint64_t v897;
  int v898;
  int v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  char *v903;
  char *v904;
  uint64_t v905;
  int v906;
  int v907;
  unsigned int v908;
  llvm::Type *v909;
  _QWORD *v910;
  uint64_t v911;
  uint64_t v912;
  int *v913;
  unsigned int v914;
  uint64_t v915;
  uint64_t k;
  void *v917;
  unint64_t v918;
  __int16 v919;
  unint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  int *v925;
  unsigned int v926;
  int v927;
  const char *v928;
  uint64_t v929;
  uint64_t v930;
  char v931;
  char *v932;
  uint64_t v933;
  uint64_t v934;
  char *v935;
  char v936;
  void **v937;
  __int16 v938;
  uint64_t v939;
  char *v940;
  llvm::Value *v941;
  uint64_t v942;
  int v943;
  uint64_t v944;
  uint64_t *v945;
  uint64_t v946;
  _QWORD *v947;
  uint64_t v948;
  unsigned int v949;
  uint64_t v950;
  unint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  int *v956;
  unsigned int v957;
  uint64_t v958;
  uint64_t ii;
  void *v960;
  unint64_t v961;
  char *v962;
  uint64_t v963;
  char *v964;
  uint64_t v965;
  unsigned int v966;
  void *v967;
  void *v968;
  uint64_t v969;
  uint64_t i;
  void *v971;
  unint64_t v972;
  unint64_t v973;
  const char *v974;
  uint64_t v975;
  uint64_t v976;
  _DWORD *v977;
  _DWORD *v978;
  uint64_t v979;
  _QWORD *v980;
  unsigned int v981;
  uint64_t v982;
  unint64_t v983;
  char *v984;
  char *v985;
  uint64_t v986;
  uint64_t v987;
  char *v988;
  uint64_t v989;
  char *v990;
  uint64_t v991;
  char *v992;
  uint64_t v993;
  uint64_t v994;
  llvm::ValueSymbolTable *v995;
  llvm::UndefValue *v996;
  llvm::Value *v997;
  llvm::UndefValue *v998;
  llvm::Value *v999;
  llvm::UndefValue *v1000;
  llvm::Value *v1001;
  _QWORD *v1002;
  _QWORD *v1003;
  _QWORD *v1004;
  uint64_t v1005;
  uint64_t v1006;
  unsigned __int8 *OneMDString;
  unsigned __int8 *v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  llvm::Value *v1015;
  unint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  _QWORD *v1020;
  uint64_t v1021;
  _QWORD *v1022;
  uint64_t v1023;
  uint64_t v1024;
  llvm::ValueSymbolTable *v1025;
  const char *v1026;
  uint64_t v1027;
  uint64_t v1028;
  void *v1029;
  unint64_t v1030;
  unsigned int j;
  uint64_t v1032;
  llvm::UndefValue *v1033;
  llvm::Value *v1034;
  uint64_t *v1035;
  uint64_t v1036;
  uint64_t v1037;
  int v1038;
  int v1039;
  uint64_t v1040;
  llvm::Type **v1041;
  llvm::Type **v1042;
  uint64_t v1043;
  void *v1044;
  uint64_t v1045;
  llvm::Type **v1046;
  unint64_t v1047;
  uint64_t v1048;
  __int16 v1049;
  void *v1050;
  int v1051;
  unsigned int v1052;
  unsigned int v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  int v1057;
  unsigned int v1058;
  llvm::Type *v1059;
  unsigned int v1060;
  int v1061;
  llvm::Type *v1062;
  llvm::Type *v1063;
  llvm::Type *v1064;
  llvm::Type *v1065;
  _BOOL4 v1066;
  int v1067;
  uint64_t v1068;
  unint64_t v1069;
  unint64_t v1070;
  unint64_t v1071;
  _DWORD *v1072;
  uint64_t *v1073;
  char **v1074;
  unint64_t v1075;
  uint64_t v1076;
  uint64_t *v1077;
  uint64_t *v1078;
  llvm::Value *v1079;
  llvm::Value *v1080;
  llvm::Value *v1081;
  uint64_t *v1082;
  char v1083;
  unint64_t v1084;
  unsigned int v1085;
  unsigned int v1086;
  uint64_t v1087;
  unsigned int v1088[2];
  uint64_t v1089;
  int v1090;
  llvm::Type **v1091;
  llvm::Type **v1092[4];
  __int16 v1093;
  int v1094;
  llvm::Type **v1095;
  int v1096;
  llvm::Type *v1097;
  llvm::Type *v1098;
  unsigned int v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  unsigned __int8 *v1103;
  llvm::Value *v1104;
  uint64_t v1105;
  uint64_t v1106;
  _BYTE v1107[16];
  __int16 v1108;
  __n128 v1109;
  _QWORD v1110[2];
  __int16 v1111;
  __int128 v1112;
  __int128 v1113;
  _OWORD v1114[7];
  uint64_t v1115;
  char v1116;
  uint64_t v1117;
  char v1118;
  void **v1119;
  uint64_t v1120;
  _WORD v1121[256];
  uint64_t v1122;

  v3 = a3;
  v1122 = *MEMORY[0x1E0C80C00];
  v1104 = a3;
  v6 = a2 + 32;
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 12, a1);
  if (*a1)
    return;
  v7 = *(_QWORD *)(a2 + 680);
  if (*(_DWORD *)(v7 + 24) >= 2u)
  {
    v1119 = (void **)"Invalid function metadata: incoming forward references";
    v1121[8] = 259;
    sub_1C500A780(a1, a2 + 8, (llvm::Twine *)&v1119);
    return;
  }
  *(_DWORD *)(a2 + 752) = 0;
  v8 = *(_QWORD *)(a2 + 624);
  v9 = *(_QWORD *)(a2 + 616);
  v10 = *(_DWORD *)(a2 + 608);
  v1071 = *(unsigned int *)(v7 + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 592);
    v12 = v10 - 1;
    v13 = v12 & ((v3 >> 4) ^ (v3 >> 9));
    v14 = (_QWORD *)(v11 + 16 * v13);
    v15 = (llvm::Value *)*v14;
    if ((llvm::Value *)*v14 == v3)
      goto LABEL_19;
    v16 = 0;
    v17 = 1;
    while (v15 != (llvm::Value *)-4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == (llvm::Value *)-8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (_QWORD *)(v11 + 16 * v13);
      v15 = (llvm::Value *)*v14;
      if ((llvm::Value *)*v14 == v3)
        goto LABEL_19;
    }
    if (v16)
      v20 = v16;
    else
      v20 = v14;
  }
  else
  {
    v20 = 0;
  }
  v14 = sub_1C500F648(a2 + 592, (uint64_t)&v1104, (uint64_t *)&v1104, v20);
  *v14 = v1104;
  *((_DWORD *)v14 + 2) = 0;
  v3 = v1104;
LABEL_19:
  v21 = v8 - v9;
  v22 = *((_DWORD *)v14 + 2);
  v1089 = v6;
  if ((*((_WORD *)v3 + 9) & 1) == 0)
  {
    v23 = (void **)*((_QWORD *)v3 + 11);
LABEL_21:
    v24 = v23;
    goto LABEL_22;
  }
  llvm::Function::BuildLazyArguments(v3);
  v23 = (void **)*((_QWORD *)v3 + 11);
  if ((*((_WORD *)v3 + 9) & 1) == 0)
    goto LABEL_21;
  llvm::Function::BuildLazyArguments(v3);
  v24 = (void **)*((_QWORD *)v3 + 11);
LABEL_22:
  v1087 = a2 + 8;
  v1069 = v21 >> 5;
  v1070 = v21;
  v1077 = a1;
  v1078 = (uint64_t *)(a2 + 616);
  v25 = &v24[5 * *((_QWORD *)v3 + 12)];
  if (v23 == v25)
  {
    v33 = *(_QWORD *)(a2 + 624);
  }
  else
  {
    v26 = 1;
    v27 = v23;
    do
    {
      v28 = *(_QWORD *)(a2 + 544);
      v29 = *(unsigned int *)(a2 + 560);
      v30 = sub_1C4E341F8(v28, *(_DWORD *)(a2 + 560), v22);
      if ((int *)(v28 + 32 * v29) == v30 || v30[4] <= v26)
        v31 = -1;
      else
        v31 = *(_DWORD *)(*((_QWORD *)v30 + 1) + 4 * v26);
      v1119 = v23;
      LODWORD(v1112) = v31;
      v32 = *(_QWORD *)(a2 + 624);
      if (v32 >= *(_QWORD *)(a2 + 632))
      {
        v33 = sub_1C500F778(v1078, (uint64_t *)&v1119, &v1112);
      }
      else
      {
        *(_QWORD *)v32 = 6;
        *(_QWORD *)(v32 + 8) = 0;
        *(_QWORD *)(v32 + 16) = v23;
        if (v27 != (void **)-8192 && v27 != (void **)-4096 && v27)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v32);
          v31 = v1112;
        }
        *(_DWORD *)(v32 + 24) = v31;
        v33 = v32 + 32;
      }
      *(_QWORD *)(a2 + 624) = v33;
      v23 += 5;
      ++v26;
      v27 += 5;
    }
    while (v23 != v25);
  }
  v1076 = 0;
  v1072 = (_DWORD *)(a2 + 752);
  v1073 = (uint64_t *)(a2 + 744);
  v34 = (unint64_t)(v33 - *(_QWORD *)(a2 + 616)) >> 5;
  v1102 = 0;
  v1103 = 0;
  v1100 = 0;
  v1101 = 0;
  v1068 = a2 + 760;
  v1075 = 0;
  v1119 = (void **)v1121;
  v1120 = 0x4000000000;
  v1074 = (char **)(a2 + 1392);
  v35 = v34;
  v36 = v1077;
  v37 = a2 + 8;
  v38 = v1089;
  while (2)
  {
    sub_1C4FF7B90(v38, 0, (uint64_t)&v1117);
    if ((v1118 & 1) != 0)
    {
      v40 = v1117;
      v1117 = 0;
      *v36 = v40;
      goto LABEL_45;
    }
    v39 = (llvm::Type *)HIDWORD(v1117);
    switch((_DWORD)v1117)
    {
      case 2:
        switch(HIDWORD(v1117))
        {
          case 0xB:
            sub_1C500AC84(v36, a2);
            if (*v36)
              goto LABEL_45;
            v35 = (*(_QWORD *)(a2 + 624) - *(_QWORD *)(a2 + 616)) >> 5;
            v41 = 4;
            goto LABEL_46;
          case 0xE:
            sub_1C500DA3C(v36, a2, 0);
            goto LABEL_70;
          case 0xF:
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*(llvm::MetadataLoader::MetadataLoaderImpl **)(a2 + 680), 0, v36);
            goto LABEL_70;
          case 0x10:
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(*(_QWORD *)(a2 + 680), v1104, *(_QWORD *)(a2 + 744), v36);
            goto LABEL_70;
          case 0x12:
            sub_1C500E16C(v36, (_QWORD *)a2);
            goto LABEL_70;
          default:
            sub_1C4FF3F30(v38, v36);
LABEL_70:
            if (*v36)
              v41 = 1;
            else
              v41 = 4;
            break;
        }
        goto LABEL_46;
      case 1:
        v41 = 7;
        goto LABEL_46;
      case 0:
        *(_QWORD *)&v1112 = "Malformed block";
        LOWORD(v1114[0]) = 259;
        sub_1C500A780(v36, v37, (llvm::Twine *)&v1112);
LABEL_45:
        v41 = 1;
        goto LABEL_46;
    }
    LODWORD(v1120) = 0;
    v1099 = -1;
    llvm::BitstreamCursor::readRecord(v38, SHIDWORD(v1117), (uint64_t)&v1119, 0, (uint64_t)&v1115);
    if ((v1116 & 1) != 0)
    {
      v47 = v1115;
      v1115 = 0;
      *v36 = v47;
      goto LABEL_61;
    }
    v43 = v1115;
    *(_QWORD *)v1088 = v35;
    switch((int)v1115)
    {
      case 1:
        if (!(_DWORD)v1120)
          goto LABEL_422;
        v211 = (unint64_t)*v1119;
        if (!*v1119)
          goto LABEL_422;
        v212 = *(_QWORD *)(a2 + 1392);
        v213 = (*(_QWORD *)(a2 + 1400) - v212) >> 3;
        if (v211 <= v213)
        {
          if (v211 < v213)
            *(_QWORD *)(a2 + 1400) = v212 + 8 * v211;
        }
        else
        {
          sub_1C50100A0(v1074, v211 - v213);
        }
        *(_QWORD *)&v1112 = 0;
        if (!sub_1C4ECB0EC(*(_QWORD *)(a2 + 1544), *(_DWORD *)(a2 + 1560), (uint64_t)v1104, &v1112)
          || (v459 = (_QWORD *)v1112, (_QWORD)v1112 == *(_QWORD *)(a2 + 1544) + 32 * *(unsigned int *)(a2 + 1560)))
        {
          v463 = *(uint64_t **)(a2 + 1392);
          v464 = *(uint64_t **)(a2 + 1400);
          while (v463 != v464)
          {
            v465 = *(_QWORD **)(a2 + 424);
            LOWORD(v1114[0]) = 257;
            v466 = v1104;
            v467 = operator new();
            *(_QWORD *)v467 = *v465 + 1600;
            *(_QWORD *)(v467 + 8) = 0;
            v468 = *(_DWORD *)(v467 + 20) & 0xC0000000;
            *(_QWORD *)(v467 + 24) = 0;
            v469 = v467 + 24;
            *(_DWORD *)(v467 + 16) = 22;
            *(_DWORD *)(v467 + 20) = v468;
            *(_QWORD *)(v467 + 32) = 0;
            *(_QWORD *)(v467 + 40) = v467 + 40;
            *(_QWORD *)(v467 + 48) = v467 + 40;
            *(_QWORD *)(v467 + 56) = 0;
            if (v466)
            {
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v466 + 72, (_QWORD *)v467);
              v470 = *((_QWORD *)v466 + 9);
              *(_QWORD *)(v467 + 24) = v470;
              *(_QWORD *)(v467 + 32) = (char *)v466 + 72;
              *(_QWORD *)(v470 + 8) = v469;
              *((_QWORD *)v466 + 9) = v469;
            }
            llvm::Value::setName((uint64_t ***)v467, (uint64_t)&v1112);
            *v463++ = v467;
          }
        }
        else
        {
          v460 = *(void **)(v1112 + 8);
          v461 = *(_QWORD *)(v1112 + 16) - (_QWORD)v460;
          v462 = *(_QWORD *)(a2 + 1400) - *(_QWORD *)(a2 + 1392);
          v38 = v1089;
          if (v461 >> 3 > (unint64_t)(v462 >> 3))
          {
            *(_QWORD *)&v1112 = "Invalid ID";
            goto LABEL_1178;
          }
          if ((v462 & 0x7FFFFFFF8) != 0)
          {
            v539 = 0;
            v540 = ((unint64_t)v461 >> 3);
            v541 = ((unint64_t)v462 >> 3);
            do
            {
              if (v539 < v540 && (v542 = v459[1], (v543 = *(_QWORD *)(v542 + 8 * v539)) != 0))
              {
                v544 = v1104;
                v545 = (_QWORD *)((char *)v1104 + 72);
                llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v1104 + 72, *(_QWORD **)(v542 + 8 * v539));
                v546 = *((_QWORD *)v544 + 9);
                *(_QWORD *)(v543 + 24) = v546;
                *(_QWORD *)(v543 + 32) = v545;
                v547 = v543 + 24;
                *(_QWORD *)(v546 + 8) = v547;
                *((_QWORD *)v544 + 9) = v547;
                *(_QWORD *)&(*v1074)[8 * v539] = *(_QWORD *)(v459[1] + 8 * v539);
              }
              else
              {
                v548 = *(_QWORD **)(a2 + 424);
                LOWORD(v1114[0]) = 257;
                v549 = v1104;
                v550 = operator new();
                *(_QWORD *)v550 = *v548 + 1600;
                *(_QWORD *)(v550 + 8) = 0;
                v551 = *(_DWORD *)(v550 + 20) & 0xC0000000;
                *(_QWORD *)(v550 + 24) = 0;
                v552 = v550 + 24;
                *(_DWORD *)(v550 + 16) = 22;
                *(_DWORD *)(v550 + 20) = v551;
                *(_QWORD *)(v550 + 32) = 0;
                *(_QWORD *)(v550 + 40) = v550 + 40;
                *(_QWORD *)(v550 + 48) = v550 + 40;
                *(_QWORD *)(v550 + 56) = 0;
                if (v549)
                {
                  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v549 + 72, (_QWORD *)v550);
                  v553 = *((_QWORD *)v549 + 9);
                  *(_QWORD *)(v550 + 24) = v553;
                  *(_QWORD *)(v550 + 32) = (char *)v549 + 72;
                  *(_QWORD *)(v553 + 8) = v552;
                  *((_QWORD *)v549 + 9) = v552;
                }
                llvm::Value::setName((uint64_t ***)v550, (uint64_t)&v1112);
                *(_QWORD *)&(*v1074)[8 * v539] = v550;
                v36 = v1077;
              }
              ++v539;
            }
            while (v541 != v539);
            v460 = (void *)v459[1];
          }
          if (v460)
          {
            v459[2] = v460;
            operator delete(v460);
          }
          *v459 = -8192;
          *(int32x2_t *)(a2 + 1552) = vadd_s32(*(int32x2_t *)(a2 + 1552), (int32x2_t)0x1FFFFFFFFLL);
        }
        v1076 = *(_QWORD *)*v1074;
        v41 = 4;
        goto LABEL_848;
      case 2:
        LODWORD(v1105) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1092[0]) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092))
          goto LABEL_312;
        v214 = v1105;
        if ((_DWORD)v1120 == (_DWORD)v1105)
          goto LABEL_312;
        v215 = v1092[0];
        v216 = (uint64_t *)v1109.n128_u64[0];
        v217 = *(_BYTE *)(a2 + 1640)
             ? v1088[0] - v1119[v1105]
             : v1119[v1105];
        v218 = sub_1C500EF80(a2, v217, *(llvm::Type **)v1109.n128_u64[0], (int)v1092[0]);
        if (!v218)
          goto LABEL_312;
        v219 = (v214 + 2);
        if (v1120 < v219)
          goto LABEL_312;
        v563 = v218;
        v564 = sub_1C500E7B8((int)v1119[v214 + 1], *v216);
        if (v564 == -1)
        {
          *(_QWORD *)&v1112 = "Invalid record";
          LOWORD(v1114[0]) = 259;
          v394 = v36;
          v37 = a2 + 8;
          goto LABEL_573;
        }
        v565 = v564;
        LOWORD(v1114[0]) = 257;
        v566 = (char *)operator new(0x80uLL);
        v567 = v566;
        *(_QWORD *)v566 = 0;
        *((_QWORD *)v566 + 2) = 0;
        *((_QWORD *)v566 + 1) = 0;
        *((_QWORD *)v566 + 5) = 0;
        *((_QWORD *)v566 + 6) = 0;
        *((_QWORD *)v566 + 4) = 0;
        *((_QWORD *)v566 + 8) = *v216;
        *((_QWORD *)v566 + 3) = v566 + 64;
        v1079 = (llvm::Value *)(v566 + 64);
        *((_QWORD *)v566 + 7) = v566 + 64;
        *((_QWORD *)v566 + 9) = 0;
        v566[80] = v565 + 28;
        v566[81] = 0;
        *((_WORD *)v566 + 41) = 0;
        *((_DWORD *)v566 + 21) = 2;
        *((_DWORD *)v566 + 30) = 0;
        *(_OWORD *)(v566 + 104) = 0u;
        *(_OWORD *)(v566 + 88) = 0u;
        *(_QWORD *)v566 = v216;
        v570 = v216[1];
        v569 = v216 + 1;
        v568 = v570;
        *((_QWORD *)v566 + 1) = v570;
        v35 = *(_QWORD *)v1088;
        if (v570)
          *(_QWORD *)(v568 + 16) = v566 + 8;
        *((_QWORD *)v566 + 2) = v569;
        *v569 = v566;
        if (*((_QWORD *)v566 + 4))
        {
          **((_QWORD **)v566 + 6) = *((_QWORD *)v566 + 5);
          v1011 = *((_QWORD *)v566 + 5);
          if (v1011)
            *(_QWORD *)(v1011 + 16) = *((_QWORD *)v566 + 6);
        }
        *((_QWORD *)v566 + 4) = v563;
        v573 = v563[1];
        v572 = v563 + 1;
        v571 = v573;
        *((_QWORD *)v566 + 5) = v573;
        if (v573)
          *((_QWORD *)v571 + 2) = v566 + 40;
        *((_QWORD *)v566 + 6) = v572;
        *v572 = v566 + 32;
        llvm::Value::setName((uint64_t ***)v1079, (uint64_t)&v1112);
        v1099 = v215;
        v574 = *(unsigned int *)(a2 + 752);
        if (v574 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v574 + 1, 8);
          v574 = *v1072;
        }
        v37 = a2 + 8;
        *(_QWORD *)(*v1073 + 8 * v574) = v1079;
        ++*v1072;
        if (v1120 <= v219)
        {
          v41 = 9;
          goto LABEL_201;
        }
        HIDWORD(v576) = v565 - 13;
        LODWORD(v576) = v565 - 13;
        v575 = v576 >> 1;
        if (v575 <= 6 && ((1 << v575) & 0x47) != 0)
        {
          v577 = v1119;
          v578 = v1119[v219];
          if ((v578 & 2) != 0)
          {
            v567[81] |= 4u;
            v578 = v577[v219];
          }
          if ((v578 & 1) != 0)
            v567[81] |= 2u;
          v41 = 9;
          goto LABEL_201;
        }
        if (v565 <= 0x1B && ((1 << v565) & 0xC180000) != 0)
        {
          if ((v1119[v219] & 1) == 0)
            goto LABEL_1668;
          v886 = v567[81] | 2;
          goto LABEL_1469;
        }
        if (sub_1C4774A9C((uint64_t)v1079))
        {
          v966 = v1119[v219] & 0x7E | (v1119[v219] >> 7) & 1 | -(v1119[v219] & 1);
          if (v966)
          {
            v886 = v567[81] | (2 * v966);
LABEL_1469:
            v567[81] = v886;
            goto LABEL_1668;
          }
        }
        goto LABEL_1668;
      case 3:
        LODWORD(v1105) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1092[0]) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092))
          goto LABEL_418;
        v245 = v1105;
        if ((_DWORD)v1120 != (_DWORD)v1105 + 2)
          goto LABEL_418;
        v246 = v1119[v1105];
        v1099 = v246;
        v247 = sub_1C500E8C8((_QWORD *)a2, v246);
        v38 = v1089;
        v248 = v247;
        v249 = 38;
        switch(v1119[v245 + 1])
        {
          case 0u:
            goto LABEL_1221;
          case 1u:
            v249 = 39;
            goto LABEL_1221;
          case 2u:
            v249 = 40;
            goto LABEL_1221;
          case 3u:
            v249 = 41;
            goto LABEL_1221;
          case 4u:
            v249 = 42;
            goto LABEL_1221;
          case 5u:
            v249 = 43;
            goto LABEL_1221;
          case 6u:
            v249 = 44;
            goto LABEL_1221;
          case 7u:
            v249 = 45;
            goto LABEL_1221;
          case 8u:
            v249 = 46;
            goto LABEL_1221;
          case 9u:
            v249 = 47;
            goto LABEL_1221;
          case 0xAu:
            v249 = 48;
            goto LABEL_1221;
          case 0xBu:
            if (!v247)
              goto LABEL_1228;
            v770 = (llvm::Type **)v1109.n128_u64[0];
            v771 = *(_QWORD *)v1109.n128_u64[0];
            v772 = *(_DWORD *)(*(_QWORD *)v1109.n128_u64[0] + 8);
            v773 = v772;
            if ((v772 & 0xFE) == 0x12)
              v773 = *(_BYTE *)(**(_QWORD **)(v771 + 16) + 8);
            if (v773 != 15)
              goto LABEL_1210;
            v774 = *(_DWORD *)(v247 + 8);
            v775 = v774;
            if ((v774 & 0xFE) == 0x12)
              v775 = *(_BYTE *)(**(_QWORD **)(v247 + 16) + 8);
            if (v775 != 15)
              goto LABEL_1210;
            if ((v772 & 0xFE) == 0x12)
              v772 = *(_DWORD *)(**(_QWORD **)(v771 + 16) + 8);
            if ((v774 & 0xFE) == 0x12)
              v774 = *(_DWORD *)(**(_QWORD **)(v247 + 16) + 8);
            if ((v774 ^ v772) >= 0x100
              && (LOWORD(v1114[0]) = 257,
                  llvm::CastInst::Create(47),
                  v1014 = v1013,
                  LOWORD(v1114[0]) = 257,
                  llvm::CastInst::Create(48),
                  v1015))
            {
              v343 = v1015;
              if (v1014)
              {
                v1016 = *(unsigned int *)(a2 + 752);
                if (v1016 >= *(unsigned int *)(a2 + 756))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v1016 + 1, 8);
                  v1016 = *v1072;
                }
                *(_QWORD *)(*v1073 + 8 * v1016) = v1014;
                ++*v1072;
                *(_QWORD *)(v1014 + 40) = v1076;
                *(_WORD *)(v1076 + 18) &= ~0x8000u;
                if ((*(_BYTE *)(v1014 + 23) & 0x10) != 0)
                {
                  v1024 = *(_QWORD *)(v1076 + 56);
                  if (v1024)
                  {
                    v1025 = *(llvm::ValueSymbolTable **)(v1024 + 104);
                    if (v1025)
                      llvm::ValueSymbolTable::reinsertValue(v1025, (llvm::Value *)v1014);
                  }
                }
                v1017 = *(_QWORD *)(v1076 + 40);
                *(_QWORD *)(v1014 + 24) = v1017;
                *(_QWORD *)(v1014 + 32) = v1076 + 40;
                v1018 = v1014 + 24;
                *(_QWORD *)(v1017 + 8) = v1018;
                *(_QWORD *)(v1076 + 40) = v1018;
              }
              v36 = v1077;
              v37 = a2 + 8;
              v38 = v1089;
            }
            else
            {
LABEL_1210:
              v249 = 49;
              v36 = v1077;
              v37 = a2 + 8;
              v38 = v1089;
LABEL_1223:
              if (!llvm::CastInst::castIsValid(v249, *v770, v248))
              {
                v580 = "Invalid cast";
                goto LABEL_1232;
              }
              LOWORD(v1114[0]) = 257;
              llvm::CastInst::Create(v249);
              v343 = v776;
            }
            v344 = *(unsigned int *)(a2 + 752);
            if (v344 >= *(unsigned int *)(a2 + 756))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v344 + 1, 8);
              v344 = *v1072;
            }
            break;
          case 0xCu:
            v249 = 50;
LABEL_1221:
            if (!v247)
              goto LABEL_1228;
            v770 = (llvm::Type **)v1109.n128_u64[0];
            goto LABEL_1223;
          default:
            goto LABEL_1228;
        }
        goto LABEL_1387;
      case 4:
      case 30:
      case 43:
        LODWORD(v1095) = 0;
        if ((_DWORD)v1115 == 43)
        {
          v44 = *v1119 != 0;
          LODWORD(v1095) = 2;
          v45 = *((_DWORD *)v1119 + 2);
          TypeAtIndex = (llvm::GetElementPtrInst *)sub_1C500E8C8((_QWORD *)a2, v45);
        }
        else
        {
          TypeAtIndex = 0;
          v44 = v1115 == 30;
          v45 = -1;
        }
        v38 = v1089;
        v1105 = 0;
        LODWORD(v1091) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1095, v35, (llvm::Type ***)&v1105, (int *)&v1091))
          goto LABEL_108;
        if (TypeAtIndex)
        {
          v70 = (uint64_t *)v1105;
          v71 = *(_DWORD **)v1105;
          if ((*(_DWORD *)(*(_QWORD *)v1105 + 8) & 0xFE) == 0x12)
            v71 = (_DWORD *)**((_QWORD **)v71 + 2);
          v72 = (llvm::GetElementPtrInst *)*((_QWORD *)v71 + 3);
          if (v72 && v72 != TypeAtIndex)
          {
            v73 = "Explicit gep type does not match pointee type of pointer operand";
            goto LABEL_115;
          }
        }
        else
        {
          v313 = *(_QWORD *)(a2 + 544);
          v314 = *(unsigned int *)(a2 + 560);
          v315 = sub_1C4E341F8(v313, *(_DWORD *)(a2 + 560), (int)v1091);
          v316 = (int *)(v313 + 32 * v314);
          if (v316 == v315 || !v315[4])
            v317 = -1;
          else
            v317 = **((_DWORD **)v315 + 1);
          v70 = (uint64_t *)v1105;
          if ((*(_DWORD *)(*(_QWORD *)v1105 + 8) & 0xFE) == 0x12)
          {
            v359 = sub_1C4E341F8(v313, v314, v317);
            if (v316 == v359)
            {
              v45 = -1;
            }
            else if (v359[4])
            {
              v45 = **((_DWORD **)v359 + 1);
            }
            else
            {
              v45 = -1;
            }
          }
          else
          {
            v45 = v317;
          }
          TypeAtIndex = (llvm::GetElementPtrInst *)sub_1C500E8C8((_QWORD *)a2, v45);
        }
        *(_QWORD *)&v1112 = &v1113;
        *((_QWORD *)&v1112 + 1) = 0x1000000000;
        if ((_DWORD)v1120 == (_DWORD)v1095)
        {
          v1053 = v45;
          v1066 = v44;
          v595 = 0;
          v596 = (llvm::Value *)&v1113;
        }
        else
        {
          do
          {
            v1092[0] = 0;
            v1096 = 0;
            if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1095, v35, v1092, &v1096))
            {
              v1109.n128_u64[0] = (unint64_t)"Invalid record";
              v1111 = 259;
              v36 = v1077;
              v37 = a2 + 8;
              sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1109);
              v1079 = 0;
              v41 = 1;
              goto LABEL_975;
            }
            v597 = v1092[0];
            v598 = DWORD2(v1112);
            if (DWORD2(v1112) >= (unint64_t)HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1112, (uint64_t)&v1113, DWORD2(v1112) + 1, 8);
              v598 = DWORD2(v1112);
            }
            *(_QWORD *)(v1112 + 8 * v598) = v597;
            v595 = ++DWORD2(v1112);
          }
          while ((_DWORD)v1120 != (_DWORD)v1095);
          v1053 = v45;
          v1066 = v44;
          v596 = (llvm::Value *)v1112;
        }
        v599 = v595 + 1;
        v1111 = 257;
        v600 = operator new(32 * v599 + 80);
        v601 = &v600[4 * v599];
        *((_DWORD *)v601 + 5) = *((_DWORD *)v601 + 5) & 0x38000000 | v599 & 0x7FFFFFF;
        if (v595 != -1)
        {
          do
          {
            *v600 = 0;
            v600[1] = 0;
            v600[2] = 0;
            v600[3] = v601;
            v600 += 4;
          }
          while (v600 != v601);
        }
        v602 = v595;
        sub_1C4774650(TypeAtIndex, v70, v596, v595);
        *v601 = v604;
        v601[1] = 0;
        v605 = *((_DWORD *)v601 + 5) & 0xC0000000 | v599 & 0x7FFFFFF;
        *((_DWORD *)v601 + 4) = 62;
        *((_DWORD *)v601 + 5) = v605;
        *(_OWORD *)(v601 + 3) = 0u;
        *(_OWORD *)(v601 + 5) = 0u;
        *((_DWORD *)v601 + 14) = 0;
        v1079 = (llvm::Value *)v601;
        v601[8] = TypeAtIndex;
        if (v595)
        {
          v606 = (llvm::Type **)((char *)v596 + 8);
          v607 = 8 * v602 - 8;
          do
          {
            if (!v607)
              break;
            v608 = *v606++;
            TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v608, v603);
            v607 -= 8;
          }
          while (TypeAtIndex);
          v609 = v601;
          v605 = *((_DWORD *)v601 + 5);
          v35 = *(_QWORD *)v1088;
        }
        else
        {
          v35 = *(_QWORD *)v1088;
          v609 = v601;
        }
        v609[9] = TypeAtIndex;
        v610 = v605 & 0x7FFFFFF;
        v611 = -v610;
        v612 = (uint64_t **)&v609[-4 * v610];
        if (*v612)
        {
          v1002 = &v609[4 * v611];
          v1004 = (_QWORD *)v1002[2];
          v1003 = v1002 + 2;
          *v1004 = *(v1003 - 1);
          v1005 = *(v1003 - 1);
          if (v1005)
            *(_QWORD *)(v1005 + 16) = *v1003;
        }
        *v612 = v70;
        v615 = v70[1];
        v614 = (uint64_t ***)(v70 + 1);
        v613 = v615;
        v616 = &v609[4 * v611];
        v616[1] = v615;
        if (v615)
          *(_QWORD *)(v613 + 16) = v616 + 1;
        v616[2] = v614;
        *v614 = v612;
        v617 = (uint64_t *)((char *)v596 + 8 * v602);
        v618 = (llvm::Value *)v601;
        sub_1C5382FD4((uint64_t)v1092, (uint64_t *)v596, v617, (uint64_t)&v601[-4 * (*((_DWORD *)v601 + 5) & 0x7FFFFFF) + 4]);
        llvm::Value::setName((uint64_t ***)v601, (uint64_t)&v1109);
        v1099 = v1053;
        v619 = *((_DWORD *)v601 + 5);
        v36 = v1077;
        v37 = a2 + 8;
        if ((v619 & 0x7FFFFFF) != 1)
        {
          v620 = 24;
          if (*((_BYTE *)v1079 + 16) == 62)
            v620 = 64;
          if ((v619 & 0x40000000) != 0)
            v621 = (char *)*((_QWORD *)v1079 - 1);
          else
            v621 = (char *)v1079 - 32 * (v619 & 0x7FFFFFF);
          v622 = *(_QWORD *)((char *)v1079 + v620) | 4;
          v1109.n128_u64[0] = (unint64_t)(v621 + 32);
          v1109.n128_u64[1] = v622;
          sub_1C4774E38((uint64_t)&v1109);
          v623 = *((_DWORD *)v1079 + 5);
          if ((v623 & 0x40000000) != 0)
          {
            v625 = (char *)*((_QWORD *)v1079 - 1);
            v624 = v623 & 0x7FFFFFF;
          }
          else
          {
            v624 = v623 & 0x7FFFFFF;
            v625 = (char *)v1079 - 32 * v624;
          }
          if (v624 != 2)
          {
            v626 = (llvm::APFloatBase **)(v625 + 64);
            v627 = 32 * v624 - 64;
            do
            {
              if ((v1109.n128_u8[8] & 4) != 0)
              {
                v630 = 0;
              }
              else
              {
                SplatValue = *v626;
                if ((*(_DWORD *)(*(_QWORD *)*v626 + 8) & 0xFE) == 0x12)
                  SplatValue = llvm::Constant::getSplatValue(SplatValue, 0);
                v629 = (unsigned int *)((char *)SplatValue + 24);
                if (*((_DWORD *)SplatValue + 8) >= 0x41u)
                  v629 = *(unsigned int **)v629;
                v630 = *v629;
              }
              v631 = *(_QWORD *)(a2 + 544);
              v632 = *(unsigned int *)(a2 + 560);
              v633 = sub_1C4E341F8(v631, *(_DWORD *)(a2 + 560), v1099);
              if ((int *)(v631 + 32 * v632) == v633)
              {
                v634 = -1;
                v618 = v1079;
              }
              else
              {
                v618 = v1079;
                if (v633[4] <= v630)
                  v634 = -1;
                else
                  v634 = *(_DWORD *)(*((_QWORD *)v633 + 1) + 4 * v630);
              }
              v1099 = v634;
              sub_1C4774E38((uint64_t)&v1109);
              v626 += 4;
              v627 -= 32;
            }
            while (v627);
          }
          v35 = *(_QWORD *)v1088;
        }
        v635 = *(_QWORD *)v618;
        if ((*(_DWORD *)(*(_QWORD *)v618 + 8) & 0xFE) == 0x12)
          v635 = **(_QWORD **)(v635 + 16);
        v1099 = sub_1C500EA24(a2, v635, (char *)&v1099, 1);
        v39 = *(llvm::Type **)v618;
        if ((*(_DWORD *)(*(_QWORD *)v618 + 8) & 0xFE) == 0x12)
          v1099 = sub_1C500EA24(a2, (uint64_t)v39, (char *)&v1099, 1);
        v636 = *(unsigned int *)(a2 + 752);
        if (v636 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v636 + 1, 8);
          v636 = *v1072;
        }
        *(_QWORD *)(*v1073 + 8 * v636) = v618;
        ++*v1072;
        if (v1066)
          *((_BYTE *)v618 + 17) |= 2u;
        v41 = 9;
LABEL_975:
        v365 = (__int128 *)v1112;
        v366 = &v1113;
        goto LABEL_1101;
      case 5:
        LODWORD(v1105) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1092[0]) = 0;
        v181 = v35;
        v182 = **(_QWORD **)(a2 + 424);
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v181, (llvm::Type ***)&v1109, (int *)v1092))
          goto LABEL_426;
        v183 = v1105;
        if ((_DWORD)v1120 == (_DWORD)v1105)
          goto LABEL_426;
        v184 = v1092[0];
        v185 = (uint64_t *)v1109.n128_u64[0];
        v186 = *(_BYTE *)(a2 + 1640)
             ? v1088[0] - v1119[v1105]
             : v1119[v1105];
        if ((v187 = sub_1C500EF80(a2, v186, *(llvm::Type **)v1109.n128_u64[0], (int)v1092[0])) == 0
          || (v188 = (uint64_t)v187, v189 = sub_1C500EA24(a2, v182 + 1888, 0, 0), (_DWORD)v1120 == v183 + 1)
          || (*(_BYTE *)(a2 + 1640)
            ? (v190 = v1088[0] - v1119[v183 + 1])
            : (v190 = v1119[v183 + 1]),
              (v191 = sub_1C500EF80(a2, v190, (llvm::Type *)(v182 + 1888), v189)) == 0))
        {
LABEL_426:
          *(_QWORD *)&v1112 = "Invalid record";
          LOWORD(v1114[0]) = 259;
          goto LABEL_427;
        }
        LODWORD(v1105) = v183 + 2;
        LOWORD(v1114[0]) = 257;
        v1079 = sub_1C4FC8748((uint64_t)v191, v185, v188, (uint64_t)&v1112, 0, 0);
        v1099 = v184;
        v167 = *(unsigned int *)(a2 + 752);
        if (v167 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v167 + 1, 8);
          v167 = *v1072;
        }
        v35 = *(_QWORD *)v1088;
        v38 = v1089;
        v176 = *v1073;
        v177 = v1079;
        v37 = a2 + 8;
        goto LABEL_264;
      case 6:
        LODWORD(v1092[0]) = 0;
        v1109.n128_u64[0] = 0;
        v1105 = 0;
        LODWORD(v1095) = 0;
        LODWORD(v1091) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1109, (int *)&v1095)
          || sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1091))
        {
          goto LABEL_418;
        }
        v250 = (_QWORD *)v1109.n128_u64[0];
        v38 = v1089;
        if ((*(_DWORD *)(*(_QWORD *)v1109.n128_u64[0] + 8) & 0xFE) != 0x12)
        {
          v381 = "Invalid type for value";
          goto LABEL_552;
        }
        v251 = (llvm::Type **)v1105;
        LOWORD(v1114[0]) = 257;
        v252 = operator new(0x80uLL);
        v252[21] = v252[21] & 0x38000000 | 2;
        *(_QWORD *)v252 = 0;
        *((_QWORD *)v252 + 1) = 0;
        *((_QWORD *)v252 + 2) = 0;
        *((_QWORD *)v252 + 3) = v252 + 16;
        *((_QWORD *)v252 + 4) = 0;
        *((_QWORD *)v252 + 5) = 0;
        *((_QWORD *)v252 + 6) = 0;
        *((_QWORD *)v252 + 7) = v252 + 16;
        v1079 = (llvm::Value *)(v252 + 16);
        llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v252 + 16), v250, (uint64_t)v251, (uint64_t)&v1112, 0);
        v253 = *(_QWORD *)(a2 + 544);
        v254 = *(unsigned int *)(a2 + 560);
        v255 = sub_1C4E341F8(v253, *(_DWORD *)(a2 + 560), (int)v1095);
        if ((int *)(v253 + 32 * v254) == v255 || !v255[4])
          v256 = -1;
        else
          v256 = **((_DWORD **)v255 + 1);
        v343 = v1079;
        v1099 = v256;
        v344 = *(unsigned int *)(a2 + 752);
        if (v344 >= *(unsigned int *)(a2 + 756))
          goto LABEL_1068;
        goto LABEL_1069;
      case 7:
        LODWORD(v1092[0]) = 0;
        v1109.n128_u64[0] = 0;
        v1105 = 0;
        LODWORD(v1095) = 0;
        LODWORD(v1091) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1109, (int *)&v1095))
          goto LABEL_418;
        v198 = (_QWORD *)v1109.n128_u64[0];
        if ((*(_DWORD *)(*(_QWORD *)v1109.n128_u64[0] + 8) & 0xFE) != 0x12)
        {
          *(_QWORD *)&v1112 = "Invalid type for value";
          LOWORD(v1114[0]) = 259;
          v394 = v36;
LABEL_573:
          sub_1C500A780(v394, v37, (llvm::Twine *)&v1112);
          v1079 = 0;
          v41 = 1;
          goto LABEL_313;
        }
        v199 = *(llvm::Type **)(*(_QWORD *)v1109.n128_u64[0] + 24);
        v200 = v1095;
        v201 = *(_QWORD *)(a2 + 544);
        v202 = *(unsigned int *)(a2 + 560);
        v203 = sub_1C4E341F8(v201, *(_DWORD *)(a2 + 560), (int)v1095);
        if ((int *)(v201 + 32 * v202) == v203 || !v203[4])
          v204 = -1;
        else
          v204 = **((_DWORD **)v203 + 1);
        v37 = a2 + 8;
        v38 = v1089;
        v499 = (int)v1092[0];
        if ((_DWORD)v1120 == LODWORD(v1092[0])
          || (*(_BYTE *)(a2 + 1640)
            ? (v500 = v35 - v1119[LODWORD(v1092[0])])
            : (v500 = v1119[LODWORD(v1092[0])]),
              (v501 = sub_1C500EF80(a2, v500, v199, v204)) == 0
           || (v502 = (uint64_t)v501,
               LODWORD(v1092[0]) = v499 + 1,
               sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1091))))
        {
LABEL_752:
          v503 = "Invalid record";
          goto LABEL_753;
        }
        v696 = (llvm::Type **)v1105;
        LOWORD(v1114[0]) = 257;
        v697 = operator new(0xA0uLL);
        v698 = 0;
        v697[29] = v697[29] & 0x38000000 | 3;
        do
        {
          v699 = &v697[v698];
          *v699 = 0;
          v699[1] = 0;
          v699[2] = 0;
          v699[3] = v697 + 24;
          v698 += 8;
        }
        while (v698 != 24);
        v1079 = (llvm::Value *)(v697 + 24);
        llvm::InsertElementInst::InsertElementInst((uint64_t)(v697 + 24), v198, v502, (uint64_t)v696, (uint64_t)&v1112, 0);
        v1099 = v200;
        v167 = *(unsigned int *)(a2 + 752);
        if (v167 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v167 + 1, 8);
          v167 = *v1072;
        }
        v37 = a2 + 8;
        goto LABEL_263;
      case 8:
        LODWORD(v1092[0]) = 0;
        v1109.n128_u64[0] = 0;
        v1105 = 0;
        LODWORD(v1095) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1109, (int *)&v1095))
          goto LABEL_386;
        v220 = (int)v1092[0];
        if ((_DWORD)v1120 == LODWORD(v1092[0]))
          goto LABEL_386;
        v221 = (int)v1095;
        v222 = (_QWORD *)v1109.n128_u64[0];
        v223 = *(_BYTE *)(a2 + 1640)
             ? v35 - v1119[LODWORD(v1092[0])]
             : v1119[LODWORD(v1092[0])];
        v224 = sub_1C500EF80(a2, v223, *(llvm::Type **)v1109.n128_u64[0], (int)v1095);
        if (!v224)
          goto LABEL_386;
        v225 = (uint64_t)v224;
        LODWORD(v1092[0]) = v220 + 1;
        LODWORD(v1091) = 0;
        v38 = v1089;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1091))
          goto LABEL_752;
        if ((*(_DWORD *)(*v222 + 8) & 0xFE) == 0x12 && (*(_DWORD *)(*(_QWORD *)v225 + 8) & 0xFE) == 0x12)
        {
          v226 = operator new(0xA8uLL);
          v226[21] = v226[21] & 0x38000000 | 2;
          *(_QWORD *)v226 = 0;
          *((_QWORD *)v226 + 1) = 0;
          *((_QWORD *)v226 + 2) = 0;
          *((_QWORD *)v226 + 3) = v226 + 16;
          *((_QWORD *)v226 + 4) = 0;
          *((_QWORD *)v226 + 5) = 0;
          *((_QWORD *)v226 + 6) = 0;
          *((_QWORD *)v226 + 7) = v226 + 16;
          LOWORD(v1114[0]) = 257;
          v1079 = (llvm::Value *)(v226 + 16);
          llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v226 + 8, v222, v225, (llvm::ConstantDataSequential *)v1105, (uint64_t)&v1112, 0);
          v227 = *((_QWORD *)v226 + 8);
          v228 = *(_QWORD *)(a2 + 544);
          v229 = *(unsigned int *)(a2 + 560);
          v230 = sub_1C4E341F8(v228, *(_DWORD *)(a2 + 560), v221);
          if ((int *)(v228 + 32 * v229) == v230 || !v230[4])
            v231 = -1;
          else
            v231 = **((_DWORD **)v230 + 1);
          LODWORD(v1112) = v231;
          v1099 = sub_1C500EA24(a2, v227, (char *)&v1112, 1);
          v344 = *(unsigned int *)(a2 + 752);
          v37 = a2 + 8;
          v343 = v1079;
          if (v344 >= *(unsigned int *)(a2 + 756))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v344 + 1, 8);
            v344 = *v1072;
          }
          goto LABEL_1069;
        }
        v503 = "Invalid type for value";
LABEL_753:
        *(_QWORD *)&v1112 = v503;
        LOWORD(v1114[0]) = 259;
        v128 = v36;
        goto LABEL_712;
      case 9:
      case 28:
        LODWORD(v1105) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1092[0]) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092)
          || (v54 = v1105, (_DWORD)v1120 == (_DWORD)v1105)
          || ((v55 = (_DWORD **)v1109.n128_u64[0], *(_BYTE *)(a2 + 1640))
            ? (v56 = v1088[0] - v1119[v1105])
            : (v56 = v1119[v1105]),
              (v57 = sub_1C500EF80(a2, v56, *(llvm::Type **)v1109.n128_u64[0], (int)v1092[0])) == 0))
        {
LABEL_312:
          *(_QWORD *)&v1112 = "Invalid record";
          LOWORD(v1114[0]) = 259;
          v37 = a2 + 8;
          sub_1C500A780(v36, v1087, (llvm::Twine *)&v1112);
          v1079 = 0;
          v41 = 1;
LABEL_313:
          v38 = v1089;
          goto LABEL_430;
        }
        v58 = v54 + 1;
        v38 = v1089;
        if (v1120 <= v54 + 1)
        {
          *(_QWORD *)&v1112 = "Invalid record: operand number exceeded available operands";
          LOWORD(v1114[0]) = 259;
          v128 = v36;
          v37 = a2 + 8;
          goto LABEL_712;
        }
        v59 = v57;
        v60 = (uint64_t)*v55;
        v61 = (*v55)[2];
        v62 = (*v55)[2] & 0xFE;
        v63 = v61;
        if (v62 == 18)
          v63 = *(unsigned __int8 *)(**(_QWORD **)(v60 + 16) + 8);
        v64 = v1119[v58];
        if (v63 > 6 || v1120 <= v54 + 2)
        {
          v65 = 0;
        }
        else
        {
          LODWORD(v1105) = v54 + 2;
          v65 = v1119[v54 + 2] & 0x7E | (v1119[v54 + 2] >> 7) & 1 | -(v1119[v54 + 2] & 1);
          v58 = v54 + 2;
        }
        v35 = *(_QWORD *)v1088;
        if ((_DWORD)v1120 != v58 + 1)
        {
          *(_QWORD *)&v1112 = "Invalid record";
          LOWORD(v1114[0]) = 259;
          v37 = a2 + 8;
          sub_1C500A780(v36, v1087, (llvm::Twine *)&v1112);
          v1079 = 0;
          v41 = 1;
          goto LABEL_421;
        }
        if (v62 == 18)
          v61 = *(unsigned __int8 *)(**(_QWORD **)(v60 + 16) + 8);
        v529 = (char *)operator new(0x80uLL);
        *((_DWORD *)v529 + 21) = *((_DWORD *)v529 + 21) & 0x38000000 | 2;
        *(_QWORD *)v529 = 0;
        *((_QWORD *)v529 + 1) = 0;
        *((_QWORD *)v529 + 4) = 0;
        *((_QWORD *)v529 + 2) = 0;
        *((_QWORD *)v529 + 3) = v529 + 64;
        *((_QWORD *)v529 + 5) = 0;
        *((_QWORD *)v529 + 6) = 0;
        v1079 = (llvm::Value *)(v529 + 64);
        *((_QWORD *)v529 + 7) = v529 + 64;
        LOWORD(v1114[0]) = 257;
        sub_1C4774CC4(*v55);
        *((_QWORD *)v529 + 8) = v530;
        *((_QWORD *)v529 + 9) = 0;
        if (v61 > 6)
          v531 = 81;
        else
          v531 = 82;
        v688 = *((_DWORD *)v529 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v529 + 20) = v531;
        *((_DWORD *)v529 + 21) = v688;
        *(_OWORD *)(v529 + 88) = 0u;
        *(_OWORD *)(v529 + 104) = 0u;
        *((_DWORD *)v529 + 30) = 0;
        if (*(_QWORD *)v529)
        {
          **((_QWORD **)v529 + 2) = *((_QWORD *)v529 + 1);
          v1009 = *((_QWORD *)v529 + 1);
          if (v1009)
            *(_QWORD *)(v1009 + 16) = *((_QWORD *)v529 + 2);
        }
        *(_QWORD *)v529 = v55;
        v689 = v55 + 1;
        v690 = v55[1];
        *((_QWORD *)v529 + 1) = v690;
        v35 = *(_QWORD *)v1088;
        if (v690)
          *((_QWORD *)v690 + 2) = v529 + 8;
        *((_QWORD *)v529 + 2) = v689;
        *v689 = v529;
        if (*((_QWORD *)v529 + 4))
        {
          **((_QWORD **)v529 + 6) = *((_QWORD *)v529 + 5);
          v1010 = *((_QWORD *)v529 + 5);
          if (v1010)
            *(_QWORD *)(v1010 + 16) = *((_QWORD *)v529 + 6);
        }
        *((_QWORD *)v529 + 4) = v59;
        v693 = v59[1];
        v692 = v59 + 1;
        v691 = v693;
        *((_QWORD *)v529 + 5) = v693;
        if (v693)
          *((_QWORD *)v691 + 2) = v529 + 40;
        *((_QWORD *)v529 + 6) = v692;
        *v692 = v529 + 32;
        *((_WORD *)v529 + 41) = (_WORD)v64;
        llvm::Value::setName((uint64_t ***)v1079, (uint64_t)&v1112);
        v694 = *(uint64_t ***)v1079;
        v36 = v1077;
        v37 = a2 + 8;
        v38 = v1089;
        if ((*(_DWORD *)(*(_QWORD *)v1079 + 8) & 0xFE) == 0x12)
          v694 = (uint64_t **)*v694[2];
        v1099 = sub_1C500EA24(a2, (uint64_t)v694, 0, 0);
        v343 = (llvm::Value *)(v529 + 64);
        if (((*v55)[2] & 0xFE) == 0x12)
          v1099 = sub_1C500EA24(a2, *(_QWORD *)v1079, (char *)&v1099, 1);
        if (v65)
          v529[81] |= 2 * (_BYTE)v65;
        v344 = *(unsigned int *)(a2 + 752);
        if (v344 >= *(unsigned int *)(a2 + 756))
        {
LABEL_1068:
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v344 + 1, 8);
          v344 = *v1072;
        }
LABEL_1069:
        v695 = *v1073;
        goto LABEL_1388;
      case 10:
        if (!(_DWORD)v1120)
        {
          v355 = *(_QWORD **)(a2 + 424);
          v356 = (char *)operator new(0x40uLL);
          *((_DWORD *)v356 + 5) &= 0x38000000u;
          *(_QWORD *)v356 = *v355 + 1576;
          *((_QWORD *)v356 + 1) = 0;
          v356[16] = 29;
          *(_OWORD *)(v356 + 44) = 0u;
          *(_OWORD *)(v356 + 33) = 0u;
          *(_OWORD *)(v356 + 17) = 0u;
          v357 = *(unsigned int *)(a2 + 752);
          v38 = v1089;
          if (v357 >= *(unsigned int *)(a2 + 756))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v357 + 1, 8);
            v357 = *v1072;
          }
          v1079 = (llvm::Value *)v356;
          *(_QWORD *)(*v1073 + 8 * v357) = v356;
          goto LABEL_898;
        }
        LODWORD(v1105) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1092[0]) = 0;
        v38 = v1089;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092)
          || (_DWORD)v1120 != (_DWORD)v1105)
        {
          goto LABEL_551;
        }
        v170 = *(llvm::LLVMContext **)(a2 + 424);
        v171 = (llvm::Value *)v1109.n128_u64[0];
        v172 = v1109.n128_u64[0] != 0;
        if (v1109.n128_u64[0])
          v173 = 96;
        else
          v173 = 64;
        v174 = (llvm::Value *)operator new(v173);
        v175 = (llvm::Value *)((char *)v174 + 32 * v172);
        *((_DWORD *)v175 + 5) = *((_DWORD *)v175 + 5) & 0x38000000 | v172;
        if (v171)
        {
          do
          {
            *(_QWORD *)v174 = 0;
            *((_QWORD *)v174 + 1) = 0;
            *((_QWORD *)v174 + 2) = 0;
            *((_QWORD *)v174 + 3) = v175;
            v174 = (llvm::Value *)((char *)v174 + 32);
          }
          while (v174 != v175);
        }
        v1079 = v175;
        llvm::ReturnInst::ReturnInst(v175, v170, v171, 0);
        v167 = *(unsigned int *)(a2 + 752);
        if (v167 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v167 + 1, 8);
          v167 = *v1072;
        }
LABEL_263:
        v176 = *v1073;
        v177 = v1079;
LABEL_264:
        *(_QWORD *)(v176 + 8 * v167) = v177;
        goto LABEL_1389;
      case 11:
        if ((v1120 | 2) != 3)
          goto LABEL_388;
        v267 = *(unsigned int *)v1119;
        v268 = *(_QWORD *)(a2 + 1392);
        v269 = (*(_QWORD *)(a2 + 1400) - v268) >> 3;
        v38 = v1089;
        if (v269 <= v267)
          goto LABEL_431;
        v270 = *(_QWORD **)(v268 + 8 * v267);
        if (!v270)
          goto LABEL_431;
        if ((_DWORD)v1120 == 1)
        {
          v271 = (char *)operator new(0x60uLL);
          *((_DWORD *)v271 + 13) = *((_DWORD *)v271 + 13) & 0x38000000 | 1;
          *(_QWORD *)v271 = 0;
          *((_QWORD *)v271 + 1) = 0;
          *((_QWORD *)v271 + 2) = 0;
          *((_QWORD *)v271 + 4) = **(_QWORD **)*v270 + 1576;
          v168 = v271 + 32;
          *((_QWORD *)v271 + 3) = v271 + 32;
          *((_QWORD *)v271 + 5) = 0;
          v271[48] = 30;
          v271[49] = 0;
          *((_WORD *)v271 + 25) = 0;
          *((_DWORD *)v271 + 13) = 1;
          *(_OWORD *)(v271 + 56) = 0u;
          *(_OWORD *)(v271 + 72) = 0u;
          *((_DWORD *)v271 + 22) = 0;
          *(_QWORD *)v271 = v270;
          v274 = v270[1];
          v273 = v270 + 1;
          v272 = v274;
          *((_QWORD *)v271 + 1) = v274;
          if (v274)
            *(_QWORD *)(v272 + 16) = v271 + 8;
          *((_QWORD *)v271 + 2) = v273;
          *v273 = v271;
          v169 = *(unsigned int *)(a2 + 752);
          if (v169 >= *(unsigned int *)(a2 + 756))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v169 + 1, 8);
            v169 = *v1072;
          }
LABEL_896:
          v392 = *v1073;
          v1079 = (llvm::Value *)v168;
LABEL_897:
          *(_QWORD *)(v392 + 8 * v169) = v168;
        }
        else
        {
          v532 = *((unsigned int *)v1119 + 2);
          if (v269 <= v532)
            v533 = 0;
          else
            v533 = *(llvm::BasicBlock **)(v268 + 8 * v532);
          v670 = (llvm::Type *)(**(_QWORD **)(a2 + 424) + 1888);
          v671 = sub_1C500EA24(a2, (uint64_t)v670, 0, 0);
          if ((_DWORD)v1120 == 2
            || (*(_BYTE *)(a2 + 1640) ? (v672 = v35 - *((_DWORD *)v1119 + 4)) : (v672 = *((_DWORD *)v1119 + 4)),
                (v673 = sub_1C500EF80(a2, v672, v670, v671), !v533) || (v674 = (llvm::Value *)v673) == 0))
          {
LABEL_1028:
            *(_QWORD *)&v1112 = "Invalid record";
            LOWORD(v1114[0]) = 259;
            sub_1C500A780(v36, v37, (llvm::Twine *)&v1112);
            v41 = 1;
            goto LABEL_62;
          }
          v675 = operator new(0xA0uLL);
          v676 = 0;
          v675[29] = v675[29] & 0x38000000 | 3;
          do
          {
            v677 = &v675[v676];
            *v677 = 0;
            v677[1] = 0;
            v677[2] = 0;
            v677[3] = v675 + 24;
            v676 += 8;
          }
          while (v676 != 24);
          v1079 = (llvm::Value *)(v675 + 24);
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v675 + 24), (llvm::BasicBlock *)v270, v533, v674, 0);
          v678 = *(unsigned int *)(a2 + 752);
          if (v678 >= *(unsigned int *)(a2 + 756))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v678 + 1, 8);
            v678 = *v1072;
          }
          *(_QWORD *)(*v1073 + 8 * v678) = v1079;
        }
LABEL_898:
        ++*v1072;
        goto LABEL_1443;
      case 12:
        v257 = (unint64_t)*v1119;
        if ((unint64_t)*v1119 >> 16 != 1205)
        {
          if (v1120 < 3 || (v1120 & 1) == 0)
          {
            *(_QWORD *)&v1112 = "Invalid record";
            LOWORD(v1114[0]) = 259;
            v305 = v36;
            v37 = a2 + 8;
            goto LABEL_425;
          }
          v337 = (llvm::Type *)sub_1C500E8C8((_QWORD *)a2, *v1119);
          v38 = v1089;
          if ((_DWORD)v1120 == 1)
          {
            v338 = 0;
          }
          else
          {
            if (*(_BYTE *)(a2 + 1640))
              v515 = v35 - *((_DWORD *)v1119 + 2);
            else
              v515 = *((_DWORD *)v1119 + 2);
            v338 = sub_1C500EF80(a2, v515, v337, v257);
          }
          v516 = *((unsigned int *)v1119 + 4);
          v517 = *(_QWORD *)(a2 + 1392);
          if (v516 < (*(_QWORD *)(a2 + 1400) - v517) >> 3 && v337 && v338 && (v518 = *(_QWORD *)(v517 + 8 * v516)) != 0)
          {
            v519 = v1120 + 0x1FFFFFFFDLL;
            v520 = (char *)operator new(0x48uLL);
            *((_DWORD *)v520 + 7) = *((_DWORD *)v520 + 7) & 0x38000000 | 0x40000000;
            *(_QWORD *)v520 = 0;
            *((_QWORD *)v520 + 1) = **(_QWORD **)*v338 + 1576;
            *((_QWORD *)v520 + 2) = 0;
            v520[24] = 31;
            v520[25] = 0;
            *((_WORD *)v520 + 13) = 0;
            *((_DWORD *)v520 + 7) = 0x40000000;
            *((_DWORD *)v520 + 16) = 0;
            *((_OWORD *)v520 + 2) = 0u;
            *((_OWORD *)v520 + 3) = 0u;
            v1079 = (llvm::Value *)(v520 + 8);
            llvm::SwitchInst::init((uint64_t)(v520 + 8), (uint64_t)v338, v518, 2 * (v519 >> 1) + 2);
            v521 = *(unsigned int *)(a2 + 752);
            if (v521 >= *(unsigned int *)(a2 + 756))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v521 + 1, 8);
              v521 = *v1072;
            }
            *(_QWORD *)(*v1073 + 8 * v521) = v1079;
            ++*v1072;
            if (!(v519 >> 1))
            {
LABEL_809:
              v36 = v1077;
              v37 = a2 + 8;
              goto LABEL_810;
            }
            v522 = 0;
            v523 = v519 & 0x1FFFFFFFELL;
            while (1)
            {
              v524 = sub_1C500EF80(a2, v1119[(v522 + 3)], v337, v257);
              if (v524)
                v525 = *((_BYTE *)v524 + 16) == 16 ? (llvm::ConstantInt *)v524 : 0;
              else
                v525 = 0;
              v526 = LODWORD(v1119[(v522 + 4)]);
              v527 = *(_QWORD *)(a2 + 1392);
              if (v526 >= (*(_QWORD *)(a2 + 1400) - v527) >> 3)
                break;
              if (!v525)
                break;
              v528 = *(llvm::BasicBlock **)(v527 + 8 * v526);
              if (!v528)
                break;
              llvm::SwitchInst::addCase(v1079, v525, v528);
              v522 += 2;
              if (v523 == v522)
                goto LABEL_809;
            }
            if ((v520[31] & 8) != 0)
            {
              v996 = llvm::UndefValue::get(*(llvm::UndefValue **)v1079, v525);
              llvm::ValueAsMetadata::handleRAUW((uint64_t *)v1079, v996, v997);
            }
            v756 = (unsigned __int8 *)*((_QWORD *)v520 + 7);
            v36 = v1077;
            v37 = a2 + 8;
            if (v756)
              llvm::MetadataTracking::untrack((uint64_t)(v520 + 56), v756);
            llvm::Value::~Value(v1079, (llvm::Value *)v756);
            v757 = *((_DWORD *)v520 + 7);
            v758 = v757 & 0x7FFFFFF;
            if ((v757 & 0x40000000) != 0)
            {
              v962 = *(char **)v520;
              if ((_DWORD)v758)
              {
                v963 = 32 * v758;
                do
                {
                  v964 = &v962[v963];
                  if (*(_QWORD *)&v962[v963 - 32])
                  {
                    **((_QWORD **)v964 - 2) = *((_QWORD *)v964 - 3);
                    v965 = *((_QWORD *)v964 - 3);
                    if (v965)
                      *(_QWORD *)(v965 + 16) = *((_QWORD *)v964 - 2);
                  }
                  v963 -= 32;
                }
                while (v963);
              }
              operator delete(v962);
              v36 = v1077;
              v37 = a2 + 8;
              v38 = v1089;
            }
            else
            {
              v759 = v758;
              if ((_DWORD)v758)
              {
                v760 = v520 - 8;
                v761 = -32 * v759;
                do
                {
                  if (*((_QWORD *)v760 - 2))
                  {
                    **(_QWORD **)v760 = *((_QWORD *)v760 - 1);
                    v762 = *((_QWORD *)v760 - 1);
                    if (v762)
                      *(_QWORD *)(v762 + 16) = *(_QWORD *)v760;
                  }
                  v760 -= 32;
                  v761 += 32;
                }
                while (v761);
              }
              v520 = (char *)v1079 - 32 * v759;
              if (v757 < 0)
                v520 = &v520[-*((_QWORD *)v520 - 1) - 8];
            }
            operator delete(v520);
            *(_QWORD *)&v1112 = "Invalid record";
LABEL_1178:
            LOWORD(v1114[0]) = 259;
LABEL_1179:
            v306 = v36;
          }
          else
          {
            *(_QWORD *)&v1112 = "Invalid record";
            LOWORD(v1114[0]) = 259;
            v36 = v1077;
            v306 = v1077;
            v37 = a2 + 8;
          }
          goto LABEL_432;
        }
        v258 = *((_DWORD *)v1119 + 2);
        v259 = (llvm::Type *)sub_1C500E8C8((_QWORD *)a2, v258);
        v260 = *((_DWORD *)v259 + 2);
        if ((_DWORD)v1120 == 2)
        {
          v261 = 0;
        }
        else
        {
          if (*(_BYTE *)(a2 + 1640))
            v395 = v35 - *((_DWORD *)v1119 + 4);
          else
            v395 = *((_DWORD *)v1119 + 4);
          v261 = sub_1C500EF80(a2, v395, v259, v258);
        }
        v37 = a2 + 8;
        v38 = v1089;
        v396 = *((unsigned int *)v1119 + 6);
        v397 = *(_QWORD *)(a2 + 1392);
        if (v396 >= (*(_QWORD *)(a2 + 1400) - v397) >> 3)
          goto LABEL_1028;
        if (!v261)
          goto LABEL_1028;
        v398 = *(_QWORD *)(v397 + 8 * v396);
        if (!v398)
          goto LABEL_1028;
        v399 = *((_DWORD *)v1119 + 8);
        v400 = operator new(0x48uLL);
        v400[7] = v400[7] & 0x38000000 | 0x40000000;
        *(_QWORD *)v400 = 0;
        *((_QWORD *)v400 + 1) = **(_QWORD **)*v261 + 1576;
        *((_QWORD *)v400 + 2) = 0;
        v400[7] = 0x40000000;
        *((_BYTE *)v400 + 24) = 31;
        *((_BYTE *)v400 + 25) = 0;
        *((_WORD *)v400 + 13) = 0;
        v400[16] = 0;
        *((_OWORD *)v400 + 3) = 0u;
        *((_OWORD *)v400 + 2) = 0u;
        v1051 = v399;
        v1079 = (llvm::Value *)(v400 + 2);
        llvm::SwitchInst::init((uint64_t)(v400 + 2), (uint64_t)v261, v398, 2 * v399 + 2);
        v401 = *(unsigned int *)(a2 + 752);
        if (v401 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v401 + 1, 8);
          v401 = *v1072;
        }
        *(_QWORD *)(*v1073 + 8 * v401) = v1079;
        ++*v1072;
        if (v399)
        {
          v1061 = 0;
          v402 = v260 >> 8;
          v403 = 5;
          while (1)
          {
            *(_QWORD *)&v1112 = &v1113;
            *((_QWORD *)&v1112 + 1) = 0x100000000;
            v404 = v403 + 1;
            v405 = v1119;
            v406 = v1119[v403];
            if ((_DWORD)v406)
              break;
LABEL_622:
            v424 = LODWORD(v405[v404]);
            v425 = *(_QWORD *)(a2 + 1392);
            v38 = v1089;
            if (v424 >= (*(_QWORD *)(a2 + 1400) - v425) >> 3)
              v426 = 0;
            else
              v426 = *(llvm::BasicBlock **)(v425 + 8 * v424);
            v427 = (llvm::ConstantInt **)v1112;
            if (DWORD2(v1112))
            {
              v428 = 8 * DWORD2(v1112);
              do
              {
                v429 = *v427++;
                llvm::SwitchInst::addCase(v1079, v429, v426);
                v428 -= 8;
              }
              while (v428);
              v427 = (llvm::ConstantInt **)v1112;
            }
            v35 = *(_QWORD *)v1088;
            if (v427 != (llvm::ConstantInt **)&v1113)
              free(v427);
            v403 = v404 + 1;
            if (++v1061 == v1051)
            {
              v37 = a2 + 8;
              goto LABEL_1443;
            }
          }
          v407 = 0;
LABEL_588:
          v408 = v404 + 1;
          v409 = v1119[v404];
          LODWORD(v410) = 1;
          v1109.n128_u32[2] = 1;
          v1109.n128_u64[0] = 0;
          if (v402 >= 0x41)
          {
            v410 = v1119[v408];
            v408 = v404 + 2;
          }
          llvm::readWideAPInt((unint64_t *)&v1119[v408], v410, v402, (unsigned int *)&v1105);
          if (v1109.n128_u32[2] >= 0x41 && v1109.n128_u64[0])
            MEMORY[0x1CAA32F9C](v1109.n128_u64[0], 0x1000C8000313F17);
          v1109.n128_u64[0] = v1105;
          v1109.n128_u32[2] = v1106;
          v404 = (_DWORD)v410 + v408;
          if (v409)
          {
            v412 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a2 + 424), (llvm::LLVMContext *)&v1109, v411);
            v413 = DWORD2(v1112);
            if (DWORD2(v1112) >= (unint64_t)HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1112, (uint64_t)&v1113, DWORD2(v1112) + 1, 8);
              v413 = DWORD2(v1112);
            }
            *(_QWORD *)(v1112 + 8 * v413) = v412;
            ++DWORD2(v1112);
            goto LABEL_617;
          }
          if (v402 < 0x41)
            LODWORD(v414) = 1;
          else
            v414 = v1119[v404++];
          llvm::readWideAPInt((unint64_t *)&v1119[v404], v414, v402, (unsigned int *)&v1105);
          v416 = v1105;
          while (1)
          {
            if (v1109.n128_u32[2] > 0x40)
            {
              v420 = (((unint64_t)v1109.n128_u32[2] + 63) >> 3) & 0x3FFFFFF8;
              while (v420)
              {
                v421 = *(_QWORD *)(v1109.n128_u64[0] - 8 + v420);
                v422 = *(_QWORD *)(v416 - 8 + v420);
                v420 -= 8;
                v417 = v421 > v422;
                if (v421 != v422)
                  goto LABEL_603;
              }
            }
            else
            {
              v417 = v1109.n128_u64[0] > v416;
LABEL_603:
              if (v417)
              {
                if (v1106 >= 0x41 && v416 != 0)
                  MEMORY[0x1CAA32F9C](v416, 0x1000C8000313F17);
                v404 += (int)v414;
LABEL_617:
                if (v1109.n128_u32[2] >= 0x41 && v1109.n128_u64[0])
                  MEMORY[0x1CAA32F9C](v1109.n128_u64[0], 0x1000C8000313F17);
                if (++v407 == (_DWORD)v406)
                {
                  v405 = v1119;
                  v36 = v1077;
                  goto LABEL_622;
                }
                goto LABEL_588;
              }
            }
            v418 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a2 + 424), (llvm::LLVMContext *)&v1109, v415);
            v419 = DWORD2(v1112);
            if (DWORD2(v1112) >= (unint64_t)HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1112, (uint64_t)&v1113, DWORD2(v1112) + 1, 8);
              v419 = DWORD2(v1112);
            }
            *(_QWORD *)(v1112 + 8 * v419) = v418;
            ++DWORD2(v1112);
            llvm::APInt::operator++((uint64_t)&v1109);
          }
        }
        goto LABEL_1443;
      case 13:
        if (v1120 <= 3)
          goto LABEL_388;
        v262 = (*(_DWORD *)v1119 - 1);
        v263 = *(_QWORD *)(a2 + 1344);
        if (v262 >= (*(_QWORD *)(a2 + 1352) - v263) >> 3)
          v264 = 0;
        else
          v264 = *(_QWORD *)(v263 + 8 * v262);
        v430 = *((unsigned int *)v1119 + 4);
        v431 = *(_QWORD *)(a2 + 1392);
        v432 = (*(_QWORD *)(a2 + 1400) - v431) >> 3;
        if (v432 <= v430)
          v433 = 0;
        else
          v433 = *(_QWORD *)(v431 + 8 * v430);
        v434 = v1119[1];
        LODWORD(v1091) = 4;
        v435 = *((unsigned int *)v1119 + 6);
        if (v432 <= v435)
          v1081 = 0;
        else
          v1081 = *(llvm::Value **)(v431 + 8 * v435);
        if (((unsigned __int16)v434 & 0x2000) != 0)
        {
          LODWORD(v1091) = 5;
          v437 = *((_DWORD *)v1119 + 8);
          v438 = sub_1C500E8C8((_QWORD *)a2, v437);
          if (!v438 || (v436 = v438, *(_BYTE *)(v438 + 8) != 14))
          {
            v439 = "Explicit invoke type is not a function type";
            goto LABEL_647;
          }
        }
        else
        {
          v436 = 0;
          v437 = -1;
        }
        v1092[0] = 0;
        v1096 = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1091, v35, v1092, &v1096))
          goto LABEL_646;
        v477 = v1092[0];
        v478 = (uint64_t)*v1092[0];
        if (!*v1092[0] || *(_BYTE *)(v478 + 8) != 15)
        {
          v439 = "Callee is not a pointer";
          goto LABEL_647;
        }
        if (v436)
        {
          v479 = *(_QWORD *)(v478 + 24);
          if (v479 && v479 != v436)
          {
            v439 = "Explicit invoke type does not match pointee type of callee operand";
            goto LABEL_647;
          }
        }
        else
        {
          v1046 = v1092[0];
          v727 = v433;
          v728 = *(_QWORD *)(a2 + 544);
          v729 = *(unsigned int *)(a2 + 560);
          v730 = sub_1C4E341F8(v728, *(_DWORD *)(a2 + 560), v1096);
          if ((int *)(v728 + 32 * v729) == v730)
          {
            v437 = -1;
          }
          else if (v730[4])
          {
            v437 = **((_DWORD **)v730 + 1);
          }
          else
          {
            v437 = -1;
          }
          v433 = v727;
          v835 = sub_1C500E8C8((_QWORD *)a2, v437);
          v477 = v1046;
          if (!v835 || (v436 = v835, *(_BYTE *)(v835 + 8) != 14))
          {
            v439 = "Callee is not of pointer to function type";
            goto LABEL_647;
          }
        }
        v836 = v1120;
        v837 = *(_DWORD *)(v436 + 12) - 1;
        v838 = (int)v1091;
        if (v1120 < v837 + v1091)
        {
          v439 = "Insufficient operands to call";
          goto LABEL_647;
        }
        v1043 = v264;
        *(_QWORD *)&v1112 = &v1113;
        *((_QWORD *)&v1112 + 1) = 0x1000000000;
        v1109.n128_u64[0] = (unint64_t)v1110;
        v1109.n128_u64[1] = 0x1000000000;
        v1040 = v433;
        v1048 = (uint64_t)v477;
        if (!v837)
          goto LABEL_1407;
        v839 = 0;
        v1055 = -(uint64_t)v837;
        v1067 = (int)v1091;
        v840 = 1;
        do
        {
          v841 = *(_QWORD *)(a2 + 544);
          v842 = *(unsigned int *)(a2 + 560);
          v843 = sub_1C4E341F8(v841, *(_DWORD *)(a2 + 560), v437);
          if ((int *)(v841 + 32 * v842) == v843)
          {
            v845 = -1;
            v844 = v1067;
          }
          else
          {
            v844 = v1067;
            if (v840 >= v843[4])
              v845 = -1;
            else
              v845 = *(_DWORD *)(*((_QWORD *)v843 + 1) + 4 * v840);
          }
          v846 = v844 + v840 - 1;
          if (v846 == (_DWORD)v1120)
          {
            v847 = 0;
          }
          else
          {
            v848 = v1119[v846];
            if (*(_BYTE *)(a2 + 1640))
              v849 = v35 - (_DWORD)v848;
            else
              v849 = v848;
            v847 = sub_1C500EF80(a2, v849, *(llvm::Type **)(*(_QWORD *)(v436 + 16) + 8 * v840), v845);
            v839 = DWORD2(v1112);
          }
          if (v839 >= HIDWORD(v1112))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1112, (uint64_t)&v1113, v839 + 1, 8);
            v839 = DWORD2(v1112);
          }
          *(_QWORD *)(v1112 + 8 * v839) = v847;
          ++DWORD2(v1112);
          v850 = v1109.n128_u32[2];
          if (v1109.n128_u32[2] >= (unint64_t)v1109.n128_u32[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1109, (uint64_t)v1110, v1109.n128_u32[2] + 1, 4);
            v850 = v1109.n128_u32[2];
          }
          *(_DWORD *)(v1109.n128_u64[0] + 4 * v850) = v845;
          ++v1109.n128_u32[2];
          v839 = DWORD2(v1112);
          if (!*(_QWORD *)(v1112 + 8 * DWORD2(v1112) - 8))
          {
            LODWORD(v1091) = v1067 + v840 - 1;
            goto LABEL_1417;
          }
          ++v840;
        }
        while (v1055 + v840 != 1);
        v836 = v1120;
        v838 = v1067 + v840 - 1;
LABEL_1407:
        LODWORD(v1091) = v838;
        if (*(_DWORD *)(v436 + 8) < 0x100u)
        {
          if (v836 == v838)
            goto LABEL_1606;
LABEL_1417:
          v1105 = (uint64_t)"Invalid record";
          v1108 = 259;
          v36 = v1077;
          v37 = a2 + 8;
          sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1105);
          v1079 = 0;
          v41 = 1;
          goto LABEL_1418;
        }
        if (v836 != v838)
        {
          do
          {
            v1095 = 0;
            v1094 = 0;
            if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1091, v35, &v1095, &v1094))
              goto LABEL_1417;
            v868 = v1095;
            v869 = DWORD2(v1112);
            if (DWORD2(v1112) >= (unint64_t)HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1112, (uint64_t)&v1113, DWORD2(v1112) + 1, 8);
              v869 = DWORD2(v1112);
            }
            *(_QWORD *)(v1112 + 8 * v869) = v868;
            ++DWORD2(v1112);
            v870 = v1094;
            v871 = v1109.n128_u32[2];
            if (v1109.n128_u32[2] >= (unint64_t)v1109.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1109, (uint64_t)v1110, v1109.n128_u32[2] + 1, 4);
              v871 = v1109.n128_u32[2];
            }
            *(_DWORD *)(v1109.n128_u64[0] + 4 * v871) = v870;
            ++v1109.n128_u32[2];
          }
          while ((_DWORD)v1120 != (_DWORD)v1091);
        }
LABEL_1606:
        v952 = v1100;
        v953 = v1100;
        if (v1100 != v1101)
        {
          llvm::UpgradeOperandBundles(&v1100);
          v953 = v1100;
          v952 = v1101;
        }
        v1108 = 257;
        v1079 = (llvm::Value *)sub_1C61CC1B8(v436, v1048, v1040, (uint64_t)v1081, (uint64_t *)v1112, DWORD2(v1112), v953, 0xAAAAAAAAAAAAAAABLL * ((v952 - v953) >> 4), (uint64_t)&v1105, 0);
        v954 = *(_QWORD *)(a2 + 544);
        v955 = *(unsigned int *)(a2 + 560);
        v956 = sub_1C4E341F8(v954, *(_DWORD *)(a2 + 560), v437);
        if ((int *)(v954 + 32 * v955) == v956 || !v956[4])
          v957 = -1;
        else
          v957 = **((_DWORD **)v956 + 1);
        v1099 = v957;
        v969 = v1100;
        for (i = v1101; i != v969; i -= 48)
        {
          v971 = *(void **)(i - 24);
          if (v971)
          {
            *(_QWORD *)(i - 16) = v971;
            operator delete(v971);
          }
          if (*(char *)(i - 25) < 0)
            operator delete(*(void **)(i - 48));
        }
        v1101 = v969;
        v972 = *(unsigned int *)(a2 + 752);
        if (v972 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v972 + 1, 8);
          v972 = *v1072;
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 744) + 8 * v972) = v1079;
        ++*(_DWORD *)(a2 + 752);
        *((_WORD *)v1079 + 9) = *((_WORD *)v1079 + 9) & 0xF003 | (4 * ((unsigned __int16)v434 & 0x3FF));
        *((_QWORD *)v1079 + 8) = v1043;
        sub_1C500F0B8(v1077, a2, (uint64_t)v1079, v1109.n128_i64[0]);
        if (*v1077)
        {
          llvm::Value::deleteValue(v1079);
          v41 = 1;
        }
        else
        {
          v41 = 9;
        }
        v36 = v1077;
        v37 = a2 + 8;
LABEL_1418:
        v38 = v1089;
        v867 = (void *)v1109.n128_u64[0];
        if ((_QWORD *)v1109.n128_u64[0] != v1110)
LABEL_1419:
          free(v867);
LABEL_1100:
        v365 = (__int128 *)v1112;
        v366 = &v1113;
LABEL_1101:
        if (v365 != v366)
LABEL_1102:
          free(v365);
LABEL_1442:
        if (v41 == 9)
        {
LABEL_1443:
          v880 = v1076;
          if (!v1076)
          {
            llvm::Value::deleteValue(v1079);
            *(_QWORD *)&v1112 = "Invalid instruction with no BB";
            LOWORD(v1114[0]) = 259;
            sub_1C500A780(v36, v37, (llvm::Twine *)&v1112);
            v1076 = 0;
            goto LABEL_61;
          }
          if (v1100 == v1101)
          {
            *((_QWORD *)v1079 + 5) = v1076;
            *(_WORD *)(v1076 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v1079 + 23) & 0x10) != 0)
            {
              v884 = *(_QWORD *)(v1076 + 56);
              if (v884)
              {
                v885 = *(llvm::ValueSymbolTable **)(v884 + 104);
                if (v885)
                  llvm::ValueSymbolTable::reinsertValue(v885, v1079);
              }
            }
            v881 = *(_QWORD *)(v1076 + 40);
            *((_QWORD *)v1079 + 3) = v881;
            *((_QWORD *)v1079 + 4) = v1076 + 40;
            *(_QWORD *)(v881 + 8) = (char *)v1079 + 24;
            *(_QWORD *)(v1076 + 40) = (char *)v1079 + 24;
            if (*((unsigned __int8 *)v1079 + 16) - 29 > 0xA)
            {
              v882 = v1075;
            }
            else
            {
              v882 = (v1075 + 1);
              v883 = *(_QWORD *)(a2 + 1392);
              if (v882 >= (*(_QWORD *)(a2 + 1400) - v883) >> 3)
                v880 = 0;
              else
                v880 = *(_QWORD *)(v883 + 8 * v882);
            }
            v1076 = v880;
            v1075 = v882;
            if (*(_BYTE *)(*(_QWORD *)v1079 + 8) == 7)
            {
              v41 = 0;
            }
            else
            {
              llvm::BitcodeReaderValueList::assignValue((llvm::BitcodeReaderValueList *)v1078, v1079, v35, v1099, v36);
              v41 = *v36 != 0;
              v35 = (v35 + 1);
            }
          }
          else
          {
            llvm::Value::deleteValue(v1079);
            v307 = "Operand bundles found with no consumer";
LABEL_1446:
            *(_QWORD *)&v1112 = v307;
LABEL_1447:
            LOWORD(v1114[0]) = 259;
            v310 = v36;
LABEL_1448:
            sub_1C500A780(v310, v37, (llvm::Twine *)&v1112);
LABEL_61:
            v41 = 1;
          }
        }
LABEL_62:
        if ((v1116 & 1) != 0)
        {
          v48 = v1115;
          v1115 = 0;
          if (v48)
            (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
        }
LABEL_46:
        if ((v1118 & 1) != 0)
        {
          v42 = v1117;
          v1117 = 0;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        }
        if (!v41 || v41 == 4)
          continue;
        if (v41 == 7)
        {
          if (v1100 != v1101)
          {
            v1026 = "Operand bundles found with no consumer";
            goto LABEL_1758;
          }
          v1027 = *(_QWORD *)(a2 + 624);
          v1028 = *(_QWORD *)(v1027 - 16);
          if (v1028 && *(_BYTE *)(v1028 + 16) == 21 && !*(_QWORD *)(v1028 + 24))
          {
            v1030 = (unint64_t)(v1027 - *v1078) >> 5;
            for (j = v1069; (_DWORD)v1030 != j; ++j)
            {
              v1032 = *(_QWORD *)(*v1078 + 32 * j + 16);
              if (v1032 && *(_BYTE *)(v1032 + 16) == 21 && !*(_QWORD *)(v1032 + 24))
              {
                v1033 = llvm::UndefValue::get(*(llvm::UndefValue **)v1032, v39);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1032, v1033, (llvm::Value *)1);
                llvm::Value::~Value((llvm::Value *)v1032, v1034);
                MEMORY[0x1CAA32FC0]();
              }
            }
            v1026 = "Never resolved value found in function";
LABEL_1758:
            *(_QWORD *)&v1112 = v1026;
            LOWORD(v1114[0]) = 259;
            sub_1C500A780(v36, v37, (llvm::Twine *)&v1112);
          }
          else
          {
            if (*(_DWORD *)(*(_QWORD *)(a2 + 680) + 24) >= 2u)
            {
              v1026 = "Invalid function metadata: outgoing forward refs";
              goto LABEL_1758;
            }
            sub_1C5010ABC(v1078, (v1070 >> 5));
            sub_1C50204F4(*(_QWORD *)(a2 + 680), v1071);
            v1029 = *(void **)(a2 + 1392);
            *v1074 = 0;
            *(_QWORD *)(a2 + 1400) = 0;
            *(_QWORD *)(a2 + 1408) = 0;
            if (v1029)
              operator delete(v1029);
            *v36 = 0;
          }
        }
        if (v1119 != (void **)v1121)
          free(v1119);
        v1119 = (void **)&v1100;
        sub_1C5010E14(&v1119);
        if (v1103)
          llvm::MetadataTracking::untrack((uint64_t)&v1103, v1103);
        return;
      case 15:
        v168 = (char *)operator new(0x40uLL);
        *((_DWORD *)v168 + 5) &= 0x38000000u;
        *(_QWORD *)v168 = **(_QWORD **)(a2 + 424) + 1576;
        *((_QWORD *)v168 + 1) = 0;
        v168[16] = 35;
        *(_OWORD *)(v168 + 33) = 0u;
        *(_OWORD *)(v168 + 44) = 0u;
        *(_OWORD *)(v168 + 17) = 0u;
        v169 = *(unsigned int *)(a2 + 752);
        if (v169 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v169 + 1, 8);
          v169 = *v1072;
        }
        v38 = v1089;
        goto LABEL_896;
      case 16:
        if (!(_DWORD)v1120)
        {
          v288 = "Invalid phi record";
          goto LABEL_389;
        }
        v1060 = *(_DWORD *)v1119;
        v132 = sub_1C500E8C8((_QWORD *)a2, *(_DWORD *)v1119);
        v38 = v1089;
        if (!v132)
        {
          *(_QWORD *)&v1112 = "Invalid phi record";
          LOWORD(v1114[0]) = 259;
          v36 = v1077;
          goto LABEL_1179;
        }
        v133 = (llvm::Type *)v132;
        v134 = v1120 - 1;
        v135 = v134 >> 1;
        LOWORD(v1114[0]) = 257;
        v136 = operator new(0x48uLL);
        v136[1] = v133;
        v137 = (llvm::Value *)(v136 + 1);
        *v136 = 0;
        v136[2] = 0;
        v136[3] = 0x4000000000000053;
        *((_OWORD *)v136 + 2) = 0u;
        *((_OWORD *)v136 + 3) = 0u;
        *((_DWORD *)v136 + 16) = 0;
        *((_DWORD *)v136 + 17) = v134 >> 1;
        llvm::Value::setName((uint64_t ***)v136 + 1, (uint64_t)&v1112);
        v138 = *((unsigned int *)v136 + 17);
        v139 = operator new(40 * v138);
        *v136 = v139;
        if ((_DWORD)v138)
        {
          v140 = &v139[4 * v138];
          do
          {
            *v139 = 0;
            v139[1] = 0;
            v139[2] = 0;
            v139[3] = v137;
            v139 += 4;
          }
          while (v139 != v140);
        }
        v1079 = (llvm::Value *)(v136 + 1);
        v35 = *(_QWORD *)v1088;
        if ((v1120 & 1) == 0 && !sub_1C4774A9C((uint64_t)v137))
        {
          llvm::Value::deleteValue(v137);
          *(_QWORD *)&v1112 = "Invalid phi record";
          LOWORD(v1114[0]) = 259;
          v36 = v1077;
          goto LABEL_833;
        }
        v141 = *(unsigned int *)(a2 + 752);
        if (v141 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v141 + 1, 8);
          v141 = *v1072;
        }
        *(_QWORD *)(*v1073 + 8 * v141) = v137;
        ++*v1072;
        if (v134 < 2)
          goto LABEL_230;
        v142 = 1;
        v143 = 2;
        while (1)
        {
          v144 = v143 - 1;
          if (*(_BYTE *)(a2 + 1640))
          {
            if (v144 == (_DWORD)v1120)
              goto LABEL_223;
            v145 = (unint64_t)v1119[v144];
            LODWORD(v146) = 0;
            if (v145 != 1)
              v146 = -(uint64_t)(v145 >> 1);
            if ((v145 & 1) != 0)
              LODWORD(v147) = v146;
            else
              v147 = v145 >> 1;
            LODWORD(v148) = v1088[0] - v147;
          }
          else
          {
            if (v144 == (_DWORD)v1120)
            {
LABEL_223:
              v149 = 0;
              goto LABEL_225;
            }
            v148 = v1119[v144];
          }
          v149 = sub_1C500EF80(a2, v148, v133, v1060);
LABEL_225:
          v150 = LODWORD(v1119[v143]);
          v151 = *(_QWORD *)(a2 + 1392);
          if (v150 >= (*(_QWORD *)(a2 + 1400) - v151) >> 3 || !v149 || (v152 = *(_QWORD *)(v151 + 8 * v150)) == 0)
          {
            llvm::Value::deleteValue(v137);
            *(_QWORD *)&v1112 = "Invalid phi record";
            LOWORD(v1114[0]) = 259;
            v36 = v1077;
            v37 = a2 + 8;
            sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1112);
            v41 = 1;
            goto LABEL_850;
          }
          sub_1C477667C(v137, (uint64_t)v149, v152);
          v18 = v135 == v142++;
          v143 += 2;
          if (v18)
          {
LABEL_230:
            v1099 = v1060;
            if ((v1120 & 1) != 0)
              goto LABEL_809;
            v153 = v1119[v1120 - 1];
            v154 = v153 & 0x7E | (v153 >> 7) & 1 | -(v153 & 1);
            v36 = v1077;
            v35 = *(_QWORD *)v1088;
            if (v154)
              *((_BYTE *)v136 + 25) |= 2 * (_BYTE)v154;
            v37 = a2 + 8;
            goto LABEL_1443;
          }
        }
      case 19:
        if ((v1120 & 0xFFFFFFFE) != 4)
          goto LABEL_388;
        v192 = (unint64_t)v1119[3];
        LODWORD(v1105) = *(_DWORD *)v1119;
        v193 = sub_1C500E8C8((_QWORD *)a2, v1105);
        v38 = v1089;
        if ((v192 & 0x40) != 0)
        {
          v393 = (unsigned __int8 *)v193;
        }
        else
        {
          v194 = *(_QWORD *)(a2 + 544);
          v195 = *(unsigned int *)(a2 + 560);
          v196 = sub_1C4E341F8(v194, *(_DWORD *)(a2 + 560), v1105);
          if ((int *)(v194 + 32 * v195) == v196 || !v196[4])
            v197 = -1;
          else
            v197 = **((_DWORD **)v196 + 1);
          LODWORD(v1105) = v197;
          v393 = (unsigned __int8 *)sub_1C500E8C8((_QWORD *)a2, v197);
          if (!v393)
          {
            v554 = "Missing element type for old-style alloca";
            goto LABEL_1439;
          }
        }
        v491 = *((_DWORD *)v1119 + 2);
        v492 = (llvm::Type *)sub_1C500E8C8((_QWORD *)a2, v491);
        v493 = sub_1C500EF80(a2, *((_DWORD *)v1119 + 4), v492, v491);
        v494 = v192 & 0x1F | (32 * ((v192 >> 8) & 7));
        if (v494 <= 0x21)
        {
          if (v494)
            v496 = (v494 - 1) | 0x100;
          else
            v496 = 0;
          LODWORD(v495) = v496 >> 8;
          *v36 = 0;
        }
        else
        {
          *(_QWORD *)&v1112 = "Invalid alignment value";
          LOWORD(v1114[0]) = 259;
          sub_1C500A780(v36, v1087, (llvm::Twine *)&v1112);
          v495 = *v36;
          if (*v36)
            goto LABEL_1089;
          LOBYTE(v496) = 0;
        }
        if (!v393 || !v493)
          goto LABEL_1438;
        v497 = *(_QWORD *)(a2 + 432);
        if ((_DWORD)v1120 == 5)
          v498 = (llvm::Type *)v1119[4];
        else
          v498 = (llvm::Type *)*(unsigned int *)(v497 + 276);
        v1065 = v498;
        *(_QWORD *)&v1112 = v1114;
        *((_QWORD *)&v1112 + 1) = v1114;
        *(_QWORD *)&v1113 = 4;
        DWORD2(v1113) = 0;
        if ((_DWORD)v495)
          goto LABEL_904;
        v583 = v393[8];
        if (v583 > 0x11)
          goto LABEL_1489;
        if (((1 << v583) & 0xAC7F) != 0)
          goto LABEL_903;
        if (((1 << v583) & 0x30000) != 0)
          goto LABEL_1320;
LABEL_1489:
        if ((v583 & 0xFE) != 0x12 && v583 != 21)
          goto LABEL_1491;
LABEL_1320:
        if ((llvm::Type::isSizedDerivedType((uint64_t)v393, (llvm::SmallPtrSetImplBase *)&v1112) & 1) == 0)
        {
LABEL_1491:
          v895 = "alloca of unsized type";
          goto LABEL_1633;
        }
LABEL_903:
        llvm::DataLayout::getAlignment(v497 + 272, (uint64_t)v393);
        LOBYTE(v496) = v584;
LABEL_904:
        v585 = (char *)operator new(0x68uLL);
        *((_DWORD *)v585 + 13) = *((_DWORD *)v585 + 13) & 0x38000000 | 1;
        *(_QWORD *)v585 = 0;
        *((_QWORD *)v585 + 1) = 0;
        *((_QWORD *)v585 + 2) = 0;
        *((_QWORD *)v585 + 3) = v585 + 32;
        v1079 = (llvm::Value *)(v585 + 32);
        v1111 = 257;
        *((_QWORD *)v585 + 4) = llvm::PointerType::get((llvm::PointerType *)v393, v1065);
        *((_QWORD *)v585 + 5) = 0;
        *((_WORD *)v585 + 24) = 59;
        *((_DWORD *)v585 + 13) = *((_DWORD *)v585 + 13) & 0xC0000000 | 1;
        *(_OWORD *)(v585 + 56) = 0u;
        *(_OWORD *)(v585 + 72) = 0u;
        *((_DWORD *)v585 + 22) = 0;
        if (*(_QWORD *)v585)
        {
          **((_QWORD **)v585 + 2) = *((_QWORD *)v585 + 1);
          v1006 = *((_QWORD *)v585 + 1);
          if (v1006)
            *(_QWORD *)(v1006 + 16) = *((_QWORD *)v585 + 2);
        }
        *(_QWORD *)v585 = v493;
        v588 = v493[1];
        v587 = v493 + 1;
        v586 = v588;
        *((_QWORD *)v585 + 1) = v588;
        if (v588)
          *((_QWORD *)v586 + 2) = v585 + 8;
        *((_QWORD *)v585 + 2) = v587;
        *v587 = v585;
        *((_QWORD *)v585 + 12) = v393;
        *((_WORD *)v585 + 25) = v496;
        v589 = v585 + 32;
        llvm::Value::setName((uint64_t ***)v1079, (uint64_t)&v1109);
        *((_WORD *)v585 + 25) = v192 & 0x80 | (((v192 >> 5) & 1) << 6) | *((_WORD *)v585 + 25) & 0xFF3F;
        v1099 = sub_1C500EA24(a2, *((_QWORD *)v585 + 4), (char *)&v1105, 1);
        v590 = *(unsigned int *)(a2 + 752);
        if (v590 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v590 + 1, 8);
          v590 = *v1072;
        }
        v36 = v1077;
        v37 = a2 + 8;
        goto LABEL_910;
      case 20:
        LODWORD(v1092[0]) = 0;
        v1105 = 0;
        LODWORD(v1095) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1095))
          goto LABEL_418;
        v275 = LODWORD(v1092[0]);
        v276 = LODWORD(v1092[0]) + 3;
        if ((_DWORD)v1120 != LODWORD(v1092[0]) + 2 && (_DWORD)v1120 != v276)
          goto LABEL_418;
        v277 = (uint64_t *)v1105;
        v38 = v1089;
        if (*(_BYTE *)(*(_QWORD *)v1105 + 8) != 15)
          goto LABEL_558;
        if ((_DWORD)v1120 == v276)
        {
          v278 = ++LODWORD(v1092[0]);
          v279 = v1119[v275];
          v1099 = v279;
          v280 = sub_1C500E8C8((_QWORD *)a2, v279);
        }
        else
        {
          v651 = *(_QWORD *)(a2 + 544);
          v652 = *(unsigned int *)(a2 + 560);
          v653 = sub_1C4E341F8(v651, *(_DWORD *)(a2 + 560), (int)v1095);
          if ((int *)(v651 + 32 * v652) == v653 || !v653[4])
            v654 = -1;
          else
            v654 = **((_DWORD **)v653 + 1);
          v1099 = v654;
          v704 = sub_1C500E8C8((_QWORD *)a2, v654);
          if (!v704)
          {
            v580 = "Missing element type for old-style load";
            goto LABEL_1232;
          }
          v280 = v704;
          v278 = v275;
        }
        sub_1C500F5AC(v36, a2, v280, *v277);
        if (*v36)
          goto LABEL_1089;
        v705 = v1119[v278];
        if ((unint64_t)v705 < 0x22)
        {
          *v36 = 0;
          *(_QWORD *)&v1112 = v1114;
          *((_QWORD *)&v1112 + 1) = v1114;
          *(_QWORD *)&v1113 = 4;
          DWORD2(v1113) = 0;
          if (v705)
          {
            v769 = (_BYTE)v705 - 1;
            goto LABEL_1293;
          }
        }
        else
        {
          *(_QWORD *)&v1112 = "Invalid alignment value";
          LOWORD(v1114[0]) = 259;
          sub_1C500A780(v36, v1087, (llvm::Twine *)&v1112);
          if (*v36)
            goto LABEL_1089;
          *(_QWORD *)&v1112 = v1114;
          *((_QWORD *)&v1112 + 1) = v1114;
          *(_QWORD *)&v1113 = 4;
          DWORD2(v1113) = 0;
        }
        v811 = *(unsigned __int8 *)(v280 + 8);
        if (v811 > 0x11)
          goto LABEL_1630;
        if (((1 << v811) & 0xAC7F) != 0)
          goto LABEL_1292;
        if (((1 << v811) & 0x30000) != 0)
          goto LABEL_1512;
LABEL_1630:
        if ((v811 & 0xFE) == 0x12 || v811 == 21)
        {
LABEL_1512:
          if ((llvm::Type::isSizedDerivedType(v280, (llvm::SmallPtrSetImplBase *)&v1112) & 1) != 0)
          {
LABEL_1292:
            llvm::DataLayout::getAlignment(*(_QWORD *)(a2 + 432) + 272, v280);
            v769 = v812;
LABEL_1293:
            v813 = (char *)operator new(0x60uLL);
            *((_DWORD *)v813 + 13) = *((_DWORD *)v813 + 13) & 0x38000000 | 1;
            *((_QWORD *)v813 + 1) = 0;
            *(_QWORD *)v813 = 0;
            *((_QWORD *)v813 + 2) = 0;
            *((_QWORD *)v813 + 3) = v813 + 32;
            v1079 = (llvm::Value *)(v813 + 32);
            v1111 = 257;
            v814 = v1119[v278 + 1];
            *((_QWORD *)v813 + 4) = v280;
            *((_QWORD *)v813 + 5) = 0;
            v813[48] = 60;
            v813[49] = 0;
            *((_DWORD *)v813 + 13) = 1;
            *(_OWORD *)(v813 + 56) = 0u;
            *(_OWORD *)(v813 + 72) = 0u;
            *((_DWORD *)v813 + 22) = 0;
            *(_QWORD *)v813 = v277;
            v817 = v277[1];
            v816 = v277 + 1;
            v815 = v817;
            *((_QWORD *)v813 + 1) = v817;
            if (v817)
              *(_QWORD *)(v815 + 16) = v813 + 8;
            *((_QWORD *)v813 + 2) = v816;
            *v816 = v813;
            *((_WORD *)v813 + 25) = (v814 != 0) | (unsigned __int16)(2 * (v769 & 0x3F));
            v813[92] = 1;
            v589 = v813 + 32;
            llvm::Value::setName((uint64_t ***)v1079, (uint64_t)&v1109);
            v590 = *(unsigned int *)(a2 + 752);
            v37 = a2 + 8;
            if (v590 >= *(unsigned int *)(a2 + 756))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v590 + 1, 8);
              v590 = *v1072;
            }
LABEL_910:
            *(_QWORD *)(*v1073 + 8 * v590) = v589;
            goto LABEL_1162;
          }
        }
        v895 = "load of unsized type";
        goto LABEL_1633;
      case 23:
        if (v1120 <= 2)
          goto LABEL_388;
        v178 = *(_DWORD *)v1119;
        v179 = (llvm::Type *)sub_1C500E8C8((_QWORD *)a2, *(_DWORD *)v1119);
        v38 = v1089;
        if ((_DWORD)v1120 == 1)
        {
          v180 = 0;
        }
        else
        {
          if (*(_BYTE *)(a2 + 1640))
            v385 = v35 - *((_DWORD *)v1119 + 2);
          else
            v385 = *((_DWORD *)v1119 + 2);
          v180 = sub_1C500EF80(a2, v385, v179, v178);
        }
        v1099 = *((_DWORD *)v1119 + 4);
        v386 = sub_1C500E8C8((_QWORD *)a2, v1099);
        if (!v179)
          goto LABEL_1028;
        if (!v180)
          goto LABEL_1028;
        v387 = v386;
        if (!v386)
          goto LABEL_1028;
        v388 = (char *)operator new(0x60uLL);
        *((_QWORD *)v388 + 1) = 0;
        *((_QWORD *)v388 + 2) = 0;
        *((_QWORD *)v388 + 3) = v388 + 32;
        v1079 = (llvm::Value *)(v388 + 32);
        LOWORD(v1114[0]) = 257;
        *((_QWORD *)v388 + 4) = v387;
        *((_QWORD *)v388 + 5) = 0;
        *((_QWORD *)v388 + 6) = 0x100000058;
        *(_OWORD *)(v388 + 56) = 0u;
        *(_OWORD *)(v388 + 72) = 0u;
        *((_DWORD *)v388 + 22) = 0;
        *(_QWORD *)v388 = v180;
        v391 = v180[1];
        v390 = v180 + 1;
        v389 = v391;
        *((_QWORD *)v388 + 1) = v391;
        if (v391)
          *((_QWORD *)v389 + 2) = v388 + 8;
        *((_QWORD *)v388 + 2) = v390;
        *v390 = v388;
        v168 = v388 + 32;
        llvm::Value::setName((uint64_t ***)v1079, (uint64_t)&v1112);
        v169 = *(unsigned int *)(a2 + 752);
        if (v169 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v169 + 1, 8);
          v169 = *v1072;
        }
        v392 = *v1073;
        goto LABEL_897;
      case 24:
      case 44:
        LODWORD(v1095) = 0;
        v1105 = 0;
        v1092[0] = 0;
        LODWORD(v1091) = 0;
        v1096 = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1095, v35, v1092, (int *)&v1091))
          goto LABEL_418;
        if (v43 == 44)
        {
          v38 = v1089;
          if (!sub_1C500E658(a2, (uint64_t *)&v1119, &v1095, v35, (llvm::Type ***)&v1105, &v1096))
          {
            v53 = (int)v1095;
            goto LABEL_546;
          }
        }
        else
        {
          v318 = *(_QWORD *)(a2 + 544);
          v319 = *(unsigned int *)(a2 + 560);
          v320 = sub_1C4E341F8(v318, *(_DWORD *)(a2 + 560), (int)v1091);
          v38 = v1089;
          if ((int *)(v318 + 32 * v319) == v320 || !v320[4])
            v321 = -1;
          else
            v321 = **((_DWORD **)v320 + 1);
          v1096 = v321;
          v367 = (llvm::Type *)sub_1C500E8C8((_QWORD *)a2, v321);
          v368 = (int)v1095;
          if ((_DWORD)v1120 == (_DWORD)v1095)
          {
            v1105 = 0;
          }
          else
          {
            if (*(_BYTE *)(a2 + 1640))
              v377 = v35 - v1119[v1095];
            else
              v377 = v1119[v1095];
            v1105 = (uint64_t)sub_1C500EF80(a2, v377, v367, v321);
            if (v1105)
            {
              v53 = v368 + 1;
              LODWORD(v1095) = v368 + 1;
LABEL_546:
              if ((_DWORD)v1120 != v53 + 2)
                goto LABEL_554;
              v378 = (uint64_t *)v1105;
              v379 = v1092[0];
              sub_1C500F5AC(v36, a2, *(_QWORD *)v1105, (uint64_t)*v1092[0]);
              if (*v36)
              {
LABEL_1089:
                v1079 = 0;
                v41 = 1;
                v37 = a2 + 8;
                goto LABEL_1442;
              }
              v380 = v1119[v53];
              if ((unint64_t)v380 < 0x22)
              {
                *v36 = 0;
                *(_QWORD *)&v1112 = v1114;
                *((_QWORD *)&v1112 + 1) = v1114;
                *(_QWORD *)&v1113 = 4;
                DWORD2(v1113) = 0;
                if (v380)
                {
                  v701 = (_BYTE)v380 - 1;
LABEL_1154:
                  v747 = (char *)operator new(0x80uLL);
                  *((_DWORD *)v747 + 21) = *((_DWORD *)v747 + 21) & 0x38000000 | 2;
                  *((_QWORD *)v747 + 2) = 0;
                  *(_QWORD *)v747 = 0;
                  *((_QWORD *)v747 + 1) = 0;
                  *((_QWORD *)v747 + 5) = 0;
                  *((_QWORD *)v747 + 6) = 0;
                  *((_QWORD *)v747 + 4) = 0;
                  *((_QWORD *)v747 + 8) = **(_QWORD **)*v378 + 1576;
                  *((_QWORD *)v747 + 3) = v747 + 64;
                  v1079 = (llvm::Value *)(v747 + 64);
                  *((_QWORD *)v747 + 7) = v747 + 64;
                  v748 = v1119[v53 + 1];
                  *((_QWORD *)v747 + 9) = 0;
                  v747[80] = 61;
                  v747[81] = 0;
                  *((_WORD *)v747 + 41) = 0;
                  *((_DWORD *)v747 + 21) = 2;
                  *(_OWORD *)(v747 + 104) = 0u;
                  *((_DWORD *)v747 + 30) = 0;
                  *(_OWORD *)(v747 + 88) = 0u;
                  *(_QWORD *)v747 = v378;
                  v751 = v378[1];
                  v750 = v378 + 1;
                  v749 = v751;
                  *((_QWORD *)v747 + 1) = v751;
                  if (v751)
                    *(_QWORD *)(v749 + 16) = v747 + 8;
                  *((_QWORD *)v747 + 2) = v750;
                  *v750 = v747;
                  v37 = a2 + 8;
                  if (*((_QWORD *)v747 + 4))
                  {
                    **((_QWORD **)v747 + 6) = *((_QWORD *)v747 + 5);
                    v1012 = *((_QWORD *)v747 + 5);
                    if (v1012)
                      *(_QWORD *)(v1012 + 16) = *((_QWORD *)v747 + 6);
                  }
                  *((_QWORD *)v747 + 4) = v379;
                  v754 = v379[1];
                  v753 = v379 + 1;
                  v752 = v754;
                  *((_QWORD *)v747 + 5) = v754;
                  if (v754)
                    *((_QWORD *)v752 + 2) = v747 + 40;
                  *((_QWORD *)v747 + 6) = v753;
                  *v753 = v747 + 32;
                  *((_WORD *)v747 + 41) = (v748 != 0) | (unsigned __int16)(2 * (v701 & 0x3F));
                  v747[124] = 1;
                  v755 = *(unsigned int *)(a2 + 752);
                  if (v755 >= *(unsigned int *)(a2 + 756))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v755 + 1, 8);
                    v755 = *v1072;
                  }
                  *(_QWORD *)(*v1073 + 8 * v755) = v1079;
LABEL_1162:
                  ++*v1072;
                  v41 = 9;
LABEL_1163:
                  v365 = (__int128 *)*((_QWORD *)&v1112 + 1);
                  v366 = (__int128 *)v1112;
                  goto LABEL_1101;
                }
              }
              else
              {
                *(_QWORD *)&v1112 = "Invalid alignment value";
                LOWORD(v1114[0]) = 259;
                sub_1C500A780(v36, v1087, (llvm::Twine *)&v1112);
                if (*v36)
                  goto LABEL_1089;
                *(_QWORD *)&v1112 = v1114;
                *((_QWORD *)&v1112 + 1) = v1114;
                *(_QWORD *)&v1113 = 4;
                DWORD2(v1113) = 0;
              }
              v744 = (_QWORD **)*v378;
              v745 = *(unsigned __int8 *)(*v378 + 8);
              if (v745 <= 0x11)
              {
                if (((1 << v745) & 0xAC7F) != 0)
                {
LABEL_1153:
                  llvm::DataLayout::getAlignment(*(_QWORD *)(a2 + 432) + 272, (uint64_t)v744);
                  v701 = v746;
                  goto LABEL_1154;
                }
                if (((1 << v745) & 0x30000) != 0)
                  goto LABEL_1786;
              }
              if ((v745 & 0xFE) == 0x12 || v745 == 21)
              {
LABEL_1786:
                if (llvm::Type::isSizedDerivedType(*v378, (llvm::SmallPtrSetImplBase *)&v1112))
                {
                  v744 = (_QWORD **)*v378;
                  goto LABEL_1153;
                }
              }
              v895 = "store of unsized type";
LABEL_1633:
              v1109.n128_u64[0] = (unint64_t)v895;
              v1111 = 259;
              v37 = a2 + 8;
              sub_1C500A780(v36, v1087, (llvm::Twine *)&v1109);
              v1079 = 0;
              v41 = 1;
              goto LABEL_1163;
            }
          }
        }
LABEL_551:
        v381 = "Invalid record";
        goto LABEL_552;
      case 26:
        LODWORD(v1092[0]) = 0;
        v1105 = 0;
        LODWORD(v1095) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1095))
          goto LABEL_418;
        v265 = v1120;
        v266 = (int)v1092[0];
        if (LODWORD(v1092[0]) == (_DWORD)v1120)
        {
          v50 = "EXTRACTVAL: Invalid instruction with 0 indices";
          goto LABEL_75;
        }
        LODWORD(v440) = 0;
        v1062 = (llvm::Type *)v1105;
        v441 = *(_QWORD *)v1105;
        v1109.n128_u64[0] = (unint64_t)v1110;
        v1109.n128_u64[1] = 0x400000000;
        v1099 = v1095;
        while (1)
        {
          if ((*(_DWORD *)(v441 + 8) & 0xFE) != 0x10)
          {
            LODWORD(v1092[0]) = v266;
            v733 = "EXTRACTVAL: Invalid type";
            goto LABEL_1258;
          }
          v442 = (unint64_t)v1119[v266];
          if (HIDWORD(v442))
          {
            LODWORD(v1092[0]) = v266;
            v733 = "Invalid value";
            goto LABEL_1258;
          }
          v443 = *(_DWORD *)(v441 + 8);
          if (v443 == 16)
          {
            if (v442 >= *(unsigned int *)(v441 + 12))
            {
              LODWORD(v1092[0]) = v266;
              v733 = "EXTRACTVAL: Invalid struct index";
              goto LABEL_1258;
            }
          }
          else if (v443 == 17 && v442 >= *(_QWORD *)(v441 + 32))
          {
            LODWORD(v1092[0]) = v266;
            v733 = "EXTRACTVAL: Invalid array index";
LABEL_1258:
            *(_QWORD *)&v1112 = v733;
            LOWORD(v1114[0]) = 259;
            v36 = v1077;
            v364 = v1077;
            v37 = a2 + 8;
LABEL_524:
            sub_1C500A780(v364, v37, (llvm::Twine *)&v1112);
            v1079 = 0;
            v41 = 1;
            v38 = v1089;
            goto LABEL_525;
          }
          if (v440 >= v1109.n128_u32[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1109, (uint64_t)v1110, v440 + 1, 4);
            LODWORD(v440) = v1109.n128_u32[2];
          }
          *(_DWORD *)(v1109.n128_u64[0] + 4 * v440) = v442;
          v440 = ++v1109.n128_u32[2];
          v444 = *(uint64_t **)(v441 + 16);
          if (v443 == 16)
          {
            v441 = v444[v442];
            v445 = *(_QWORD *)(a2 + 544);
            v446 = *(unsigned int *)(a2 + 560);
            v447 = sub_1C4E341F8(v445, *(_DWORD *)(a2 + 560), v1099);
            if ((int *)(v445 + 32 * v446) == v447)
              goto LABEL_666;
            if (v447[4] <= v442)
              goto LABEL_667;
            v448 = (unsigned int *)(*((_QWORD *)v447 + 1) + 4 * v442);
          }
          else
          {
            v441 = *v444;
            v449 = *(_QWORD *)(a2 + 544);
            v450 = *(unsigned int *)(a2 + 560);
            v451 = sub_1C4E341F8(v449, *(_DWORD *)(a2 + 560), v1099);
            if ((int *)(v449 + 32 * v450) == v451)
            {
LABEL_666:
              v452 = -1;
              goto LABEL_668;
            }
            if (!v451[4])
            {
LABEL_667:
              v452 = -1;
              goto LABEL_668;
            }
            v448 = (unsigned int *)*((_QWORD *)v451 + 1);
          }
          v452 = *v448;
LABEL_668:
          v1099 = v452;
          if (v265 == ++v266)
          {
            v637 = (unsigned int *)v1109.n128_u64[0];
            LODWORD(v1092[0]) = v265;
            LOWORD(v1114[0]) = 257;
            v638 = (char *)operator new(0x80uLL);
            v639 = v638;
            *((_DWORD *)v638 + 13) = *((_DWORD *)v638 + 13) & 0x38000000 | 1;
            *(_QWORD *)v638 = 0;
            *((_QWORD *)v638 + 1) = 0;
            *((_QWORD *)v638 + 2) = 0;
            *((_QWORD *)v638 + 3) = v638 + 32;
            v1079 = (llvm::Value *)(v638 + 32);
            v640 = *(_QWORD *)v1062;
            if (!(_DWORD)v440)
            {
              v645 = *(_QWORD *)v1062;
              v38 = v1089;
              goto LABEL_1135;
            }
            v641 = 4 * v440;
            v642 = v637;
            v38 = v1089;
            while (1)
            {
              v643 = *v642;
              v644 = *(unsigned __int8 *)(v640 + 8);
              if (v640 && v644 == 17)
              {
                if (*(_QWORD *)(v640 + 32) <= v643)
                {
                  v645 = 0;
                  v35 = *(_QWORD *)v1088;
                  v38 = v1089;
LABEL_1135:
                  *((_QWORD *)v638 + 4) = v645;
                  *((_QWORD *)v638 + 5) = 0;
                  *((_QWORD *)v638 + 6) = 0x10000005CLL;
                  *(_OWORD *)(v638 + 56) = 0u;
                  *(_OWORD *)(v638 + 72) = 0u;
                  *((_DWORD *)v638 + 22) = 0;
                  *(_QWORD *)v638 = v1062;
                  v735 = (_QWORD *)((char *)v1062 + 8);
                  v734 = *((_QWORD *)v1062 + 1);
                  *((_QWORD *)v638 + 1) = v734;
                  if (v734)
                    *(_QWORD *)(v734 + 16) = v638 + 8;
                  *((_QWORD *)v638 + 2) = v735;
                  *v735 = v638;
                  v736 = (uint64_t)(v638 + 112);
                  *((_QWORD *)v638 + 12) = v638 + 112;
                  v737 = (uint64_t)(v638 + 96);
                  *((_QWORD *)v639 + 13) = 0x400000000;
                  if (v440 >= 5)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v737, v736, v440, 4);
                    v738 = *((unsigned int *)v639 + 26);
LABEL_1140:
                    memcpy((void *)(*((_QWORD *)v639 + 12) + 4 * v738), v637, 4 * v440);
                    v739 = *((_DWORD *)v639 + 26);
                  }
                  else
                  {
                    if ((_DWORD)v440)
                    {
                      v738 = 0;
                      goto LABEL_1140;
                    }
                    v739 = 0;
                  }
                  *((_DWORD *)v639 + 26) = v739 + v440;
                  llvm::Value::setName((uint64_t ***)v1079, (uint64_t)&v1112);
                  v740 = *(unsigned int *)(a2 + 752);
                  v36 = v1077;
                  if (v740 >= *(unsigned int *)(a2 + 756))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v740 + 1, 8);
                    v740 = *v1072;
                  }
                  v37 = a2 + 8;
                  *(_QWORD *)(*v1073 + 8 * v740) = v1079;
LABEL_1193:
                  ++*v1072;
                  v41 = 9;
LABEL_525:
                  v365 = (__int128 *)v1109.n128_u64[0];
                  v366 = (__int128 *)v1110;
                  goto LABEL_1101;
                }
                v646 = (uint64_t *)(v640 + 24);
                v35 = *(_QWORD *)v1088;
                v38 = v1089;
              }
              else
              {
                v645 = 0;
                if (!v640 || v644 != 16)
                  goto LABEL_1135;
                if (v643 >= *(_DWORD *)(v640 + 12))
                {
                  v645 = 0;
                  goto LABEL_1135;
                }
                v646 = (uint64_t *)(*(_QWORD *)(v640 + 16) + 8 * v643);
              }
              v640 = *v646;
              ++v642;
              v645 = v640;
              v641 -= 4;
              if (!v641)
                goto LABEL_1135;
            }
          }
        }
      case 27:
        LODWORD(v1095) = 0;
        v1105 = 0;
        LODWORD(v1091) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1095, v35, (llvm::Type ***)&v1105, (int *)&v1091))
          goto LABEL_418;
        v1092[0] = 0;
        v1096 = 0;
        v38 = v1089;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1095, v35, v1092, &v1096))
          goto LABEL_551;
        v126 = v1120;
        v127 = (int)v1095;
        if ((_DWORD)v1095 == (_DWORD)v1120)
        {
          *(_QWORD *)&v1112 = "INSERTVAL: Invalid instruction with 0 indices";
          LOWORD(v1114[0]) = 259;
          v128 = v36;
          goto LABEL_712;
        }
        LODWORD(v509) = 0;
        v1109.n128_u64[0] = (unint64_t)v1110;
        v1109.n128_u64[1] = 0x400000000;
        v510 = (llvm::Type **)v1105;
        v511 = *(_QWORD *)v1105;
        while (1)
        {
          if ((*(_DWORD *)(v511 + 8) & 0xFE) != 0x10)
          {
            LODWORD(v1095) = v127;
            v731 = "INSERTVAL: Invalid type";
            goto LABEL_1133;
          }
          v512 = (unint64_t)v1119[v127];
          if (HIDWORD(v512))
            break;
          v513 = *(_DWORD *)(v511 + 8);
          if (v513 == 16)
          {
            if (v512 >= *(unsigned int *)(v511 + 12))
            {
              LODWORD(v1095) = v127;
              v790 = "INSERTVAL: Invalid struct index";
              goto LABEL_1363;
            }
          }
          else if (v513 == 17 && v512 >= *(_QWORD *)(v511 + 32))
          {
            LODWORD(v1095) = v127;
            v790 = "INSERTVAL: Invalid array index";
LABEL_1363:
            *(_QWORD *)&v1112 = v790;
            LOWORD(v1114[0]) = 259;
            v732 = v36;
            v37 = a2 + 8;
LABEL_1364:
            sub_1C500A780(v732, v37, (llvm::Twine *)&v1112);
            v1079 = 0;
            v41 = 1;
            goto LABEL_1365;
          }
          if (v509 >= v1109.n128_u32[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1109, (uint64_t)v1110, v509 + 1, 4);
            LODWORD(v509) = v1109.n128_u32[2];
          }
          *(_DWORD *)(v1109.n128_u64[0] + 4 * v509) = v512;
          v509 = ++v1109.n128_u32[2];
          if (v513 == 16)
            v514 = v512;
          else
            v514 = 0;
          v511 = *(_QWORD *)(*(_QWORD *)(v511 + 16) + 8 * v514);
          ++v127;
          v37 = a2 + 8;
          if (v126 == v127)
          {
            LODWORD(v1095) = v126;
            if ((llvm::Type *)v511 == *v1092[0])
            {
              LOWORD(v1114[0]) = 257;
              v1079 = (llvm::Value *)sub_1C61BD4C4(v510, (uint64_t)v1092[0], (void *)v1109.n128_u64[0], v509, (uint64_t)&v1112, 0);
              v1099 = v1091;
              v920 = *(unsigned int *)(a2 + 752);
              if (v920 >= *(unsigned int *)(a2 + 756))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v920 + 1, 8);
                v920 = *v1072;
              }
              v37 = a2 + 8;
              *(_QWORD *)(*v1073 + 8 * v920) = v1079;
              ++*v1072;
              v41 = 9;
              v36 = v1077;
            }
            else
            {
              v731 = "Inserted value type doesn't match aggregate type";
LABEL_1133:
              *(_QWORD *)&v1112 = v731;
              LOWORD(v1114[0]) = 259;
              sub_1C500A780(v36, v37, (llvm::Twine *)&v1112);
              v1079 = 0;
              v41 = 1;
            }
LABEL_1365:
            v35 = *(_QWORD *)v1088;
            v38 = v1089;
            goto LABEL_525;
          }
        }
        LODWORD(v1095) = v127;
        *(_QWORD *)&v1112 = "Invalid value";
        LOWORD(v1114[0]) = 259;
        v732 = v36;
        goto LABEL_1364;
      case 29:
        LODWORD(v1092[0]) = 0;
        v1109.n128_u64[0] = 0;
        v1105 = 0;
        LODWORD(v1095) = 0;
        LODWORD(v1091) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1109, (int *)&v1095)
          || (v281 = (int)v1092[0], (_DWORD)v1120 == LODWORD(v1092[0]))
          || ((v282 = v1095, v283 = (uint64_t *)v1109.n128_u64[0], *(_BYTE *)(a2 + 1640))
            ? (v284 = v35 - v1119[LODWORD(v1092[0])])
            : (v284 = v1119[LODWORD(v1092[0])]),
              (v285 = sub_1C500EF80(a2, v284, *(llvm::Type **)v1109.n128_u64[0], (int)v1095)) == 0
           || (v286 = (uint64_t)v285,
               LODWORD(v1092[0]) = v281 + 1,
               sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1091))))
        {
LABEL_386:
          *(_QWORD *)&v1112 = "Invalid record";
          LOWORD(v1114[0]) = 259;
          v287 = v36;
          goto LABEL_428;
        }
        v579 = *(_QWORD *)v1105;
        if (*(_QWORD *)v1105 && (*(_DWORD *)(v579 + 8) & 0xFE) == 0x12)
          v579 = *(_QWORD *)(v579 + 24);
        v38 = v1089;
        if (v579 != **(_QWORD **)(a2 + 424) + 1888)
        {
          v580 = "Invalid type for value";
          goto LABEL_1232;
        }
        LOWORD(v1114[0]) = 257;
        v1079 = sub_1C4FC8748(v1105, v283, v286, (uint64_t)&v1112, 0, 0);
        v1099 = v282;
        v741 = *(unsigned int *)(a2 + 752);
        if (v741 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v741 + 1, 8);
          v741 = *v1072;
        }
        *(_QWORD *)(*v1073 + 8 * v741) = v1079;
        ++*v1072;
        v742 = LODWORD(v1092[0]);
        if (v1120 <= LODWORD(v1092[0]) || !sub_1C4774A9C((uint64_t)v1079))
        {
          v41 = 9;
          goto LABEL_1442;
        }
        v743 = v1119[v742] & 0x7E | (v1119[v742] >> 7) & 1 | -(v1119[v742] & 1);
        if (v743)
          *((_BYTE *)v1079 + 17) |= 2 * (_BYTE)v743;
        goto LABEL_1668;
      case 31:
        if (v1120 <= 1)
          goto LABEL_388;
        v233 = *(_DWORD *)v1119;
        v234 = (llvm::Type *)sub_1C500E8C8((_QWORD *)a2, *(_DWORD *)v1119);
        v38 = v1089;
        if ((_DWORD)v1120 == 1)
          goto LABEL_1028;
        v235 = v234;
        v236 = *(_BYTE *)(a2 + 1640) ? v35 - *((_DWORD *)v1119 + 2) : *((_DWORD *)v1119 + 2);
        v237 = sub_1C500EF80(a2, v236, v234, v233);
        if (!v235)
          goto LABEL_1028;
        v238 = (llvm::Value *)v237;
        if (!v237)
          goto LABEL_1028;
        v239 = (v1120 - 2);
        v240 = (char *)operator new(0x48uLL);
        *((_DWORD *)v240 + 7) = *((_DWORD *)v240 + 7) & 0x38000000 | 0x40000000;
        *(_QWORD *)v240 = 0;
        v1079 = (llvm::Value *)(v240 + 8);
        llvm::IndirectBrInst::IndirectBrInst((llvm::IndirectBrInst *)(v240 + 8), v238, v239, 0);
        v241 = *(unsigned int *)(a2 + 752);
        if (v241 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v241 + 1, 8);
          v241 = *v1072;
        }
        *(_QWORD *)(*v1073 + 8 * v241) = v1079;
        ++*v1072;
        if (!(_DWORD)v239)
          goto LABEL_1312;
        v242 = 0;
        while (1)
        {
          v243 = LODWORD(v1119[(v242 + 2)]);
          v244 = *(_QWORD *)(a2 + 1392);
          if (v243 >= (*(_QWORD *)(a2 + 1400) - v244) >> 3)
            break;
          v39 = *(llvm::Type **)(v244 + 8 * v243);
          if (!v39)
            break;
          llvm::IndirectBrInst::addDestination(v1079, v39);
          if (v239 == ++v242)
          {
LABEL_1312:
            v36 = v1077;
            v37 = a2 + 8;
            v38 = v1089;
LABEL_810:
            v35 = *(_QWORD *)v1088;
            goto LABEL_1443;
          }
        }
        if ((v240[31] & 8) != 0)
        {
          v1000 = llvm::UndefValue::get(*(llvm::UndefValue **)v1079, v39);
          llvm::ValueAsMetadata::handleRAUW((uint64_t *)v1079, v1000, v1001);
        }
        v828 = (unsigned __int8 *)*((_QWORD *)v240 + 7);
        if (v828)
          llvm::MetadataTracking::untrack((uint64_t)(v240 + 56), v828);
        llvm::Value::~Value(v1079, (llvm::Value *)v828);
        v829 = *((_DWORD *)v240 + 7);
        v830 = v829 & 0x7FFFFFF;
        if ((v829 & 0x40000000) != 0)
        {
          v990 = *(char **)v240;
          if ((_DWORD)v830)
          {
            v991 = 32 * v830;
            do
            {
              v992 = &v990[v991];
              if (*(_QWORD *)&v990[v991 - 32])
              {
                **((_QWORD **)v992 - 2) = *((_QWORD *)v992 - 3);
                v993 = *((_QWORD *)v992 - 3);
                if (v993)
                  *(_QWORD *)(v993 + 16) = *((_QWORD *)v992 - 2);
              }
              v991 -= 32;
            }
            while (v991);
          }
          operator delete(v990);
        }
        else
        {
          v831 = v830;
          if ((_DWORD)v830)
          {
            v832 = v240 - 8;
            v833 = -32 * v831;
            do
            {
              if (*((_QWORD *)v832 - 2))
              {
                **(_QWORD **)v832 = *((_QWORD *)v832 - 1);
                v834 = *((_QWORD *)v832 - 1);
                if (v834)
                  *(_QWORD *)(v834 + 16) = *(_QWORD *)v832;
              }
              v832 -= 32;
              v833 += 32;
            }
            while (v833);
          }
          v240 = (char *)v1079 - 32 * v831;
          if (v829 < 0)
            v240 = &v240[-*((_QWORD *)v240 - 1) - 8];
        }
        operator delete(v240);
        *(_QWORD *)&v1112 = "Invalid record";
        LOWORD(v1114[0]) = 259;
        v36 = v1077;
        v37 = a2 + 8;
        sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1112);
        v41 = 1;
        goto LABEL_849;
      case 33:
        if (!v1076 || (v232 = *(_QWORD *)(v1076 + 40), v232 == v1076 + 40))
        {
          v38 = v1089;
          if (!(_DWORD)v1075)
            goto LABEL_449;
          v311 = *(_QWORD *)&(*v1074)[8 * (v1075 - 1)];
          if (!v311)
            goto LABEL_449;
          v232 = *(_QWORD *)(v311 + 40);
          if (v232 == v311 + 40 || v232 == 0)
            goto LABEL_449;
        }
        else
        {
          v38 = v1089;
          if (!v232)
          {
LABEL_449:
            *(_QWORD *)&v1112 = "Invalid record";
            goto LABEL_1447;
          }
        }
        v1098 = (llvm::Type *)v1103;
        if (v1103)
          llvm::MetadataTracking::track((uint64_t)&v1098, v1103, 2);
        v358 = (unsigned __int8 **)(v232 + 24);
        if (&v1098 == (llvm::Type **)(v232 + 24))
        {
          v39 = v1098;
          if (v1098)
            llvm::MetadataTracking::untrack((uint64_t)&v1098, (unsigned __int8 *)v1098);
          v41 = 4;
          v36 = v1077;
LABEL_848:
          v37 = a2 + 8;
LABEL_849:
          v38 = v1089;
LABEL_850:
          v35 = *(_QWORD *)v1088;
          goto LABEL_62;
        }
        if (*v358)
          llvm::MetadataTracking::untrack(v232 + 24, *v358);
        v39 = v1098;
        *v358 = (unsigned __int8 *)v1098;
        if (v39)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v1098, (unsigned __int8 *)v39, v232 + 24);
          v1098 = 0;
        }
        goto LABEL_1049;
      case 34:
        if (v1120 <= 2)
          goto LABEL_388;
        v339 = (*(_DWORD *)v1119 - 1);
        v340 = *(_QWORD *)(a2 + 1344);
        v38 = v1089;
        if (v339 >= (*(_QWORD *)(a2 + 1352) - v340) >> 3)
          v341 = 0;
        else
          v341 = *(_QWORD *)(v340 + 8 * v339);
        v453 = 2;
        LODWORD(v1091) = 2;
        v454 = v1119[1];
        if ((v454 & 0x20000) != 0)
        {
          v453 = 3;
          LODWORD(v1091) = 3;
          v455 = (_DWORD)v1119[2] & 0x7E | (*((_DWORD *)v1119 + 4) >> 7) & 1 | -((_DWORD)v1119[2] & 1);
          if (!v455)
          {
            v458 = "Fast math flags indicator set for call with no FMF";
            goto LABEL_1265;
          }
        }
        else
        {
          v455 = 0;
        }
        if (((unsigned __int16)v454 & 0x8000) != 0)
        {
          LODWORD(v1091) = v453 + 1;
          v1063 = (llvm::Type *)v1119[v453];
          v456 = sub_1C500E8C8((_QWORD *)a2, v1063);
          if (!v456 || *(_BYTE *)(v456 + 8) != 14)
          {
            v458 = "Explicit call type is not a function type";
            goto LABEL_1265;
          }
        }
        else
        {
          v456 = 0;
          LODWORD(v1063) = -1;
        }
        v1052 = v454;
        v457 = v456;
        v1092[0] = 0;
        v1096 = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1091, v35, v1092, &v1096))
        {
          v458 = "Invalid record";
LABEL_1265:
          *(_QWORD *)&v1112 = v458;
          LOWORD(v1114[0]) = 259;
          v36 = v1077;
          goto LABEL_553;
        }
        v504 = v1092[0];
        v505 = (uint64_t)*v1092[0];
        if (!*v1092[0] || *(_BYTE *)(v505 + 8) != 15)
        {
          v458 = "Callee is not a pointer type";
          goto LABEL_1265;
        }
        if (v457)
        {
          v506 = *(_QWORD *)(v505 + 24);
          if (v506 && v506 != v457)
          {
            v458 = "Explicit call type does not match pointee type of callee operand";
            goto LABEL_1265;
          }
        }
        else
        {
          v1041 = v1092[0];
          v1038 = v455;
          v763 = *(_QWORD *)(a2 + 544);
          v764 = *(unsigned int *)(a2 + 560);
          v765 = sub_1C4E341F8(v763, *(_DWORD *)(a2 + 560), v1096);
          if ((int *)(v763 + 32 * v764) == v765 || !v765[4])
            v766 = -1;
          else
            v766 = **((_DWORD **)v765 + 1);
          LODWORD(v1063) = v766;
          v791 = sub_1C500E8C8((_QWORD *)a2, v766);
          v455 = v1038;
          v504 = v1041;
          if (!v791 || (v457 = v791, *(_BYTE *)(v791 + 8) != 14))
          {
            v458 = "Callee is not of pointer to function type";
            goto LABEL_1265;
          }
        }
        v1037 = v341;
        v792 = v1120;
        v793 = *(_DWORD *)(v457 + 12) - 1;
        v794 = (int)v1091;
        if (v1120 < v793 + v1091)
        {
          v50 = "Insufficient operands to call";
          goto LABEL_75;
        }
        v1042 = v504;
        v1047 = v457;
        v1039 = v455;
        *(_QWORD *)&v1112 = &v1113;
        *((_QWORD *)&v1112 + 1) = 0x1000000000;
        v1109.n128_u64[0] = (unint64_t)v1110;
        v1109.n128_u64[1] = 0x1000000000;
        if (v793)
        {
          v795 = 0;
          v796 = -(uint64_t)v793;
          v797 = 1;
          while (1)
          {
            v798 = *(_QWORD *)(a2 + 544);
            v799 = *(unsigned int *)(a2 + 560);
            v800 = sub_1C4E341F8(v798, *(_DWORD *)(a2 + 560), (int)v1063);
            if ((int *)(v798 + 32 * v799) == v800)
            {
              v802 = -1;
              v801 = v1047;
            }
            else
            {
              v801 = v1047;
              v802 = v797 >= v800[4] ? -1 : *(_DWORD *)(*((_QWORD *)v800 + 1) + 4 * v797);
            }
            v803 = v794 + v797 - 1;
            v804 = *(llvm::Type **)(*(_QWORD *)(v801 + 16) + 8 * v797);
            if (*((_BYTE *)v804 + 8) != 8)
              break;
            v805 = LODWORD(v1119[(v794 + v797 - 1)]);
            v806 = *(_QWORD *)(a2 + 1392);
            if (v805 >= (*(_QWORD *)(a2 + 1400) - v806) >> 3)
              goto LABEL_1278;
            v807 = *(llvm::Type ***)(v806 + 8 * v805);
LABEL_1283:
            if (v795 >= HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1112, (uint64_t)&v1113, v795 + 1, 8);
              v795 = DWORD2(v1112);
            }
            *(_QWORD *)(v1112 + 8 * v795) = v807;
            ++DWORD2(v1112);
            v810 = v1109.n128_u32[2];
            if (v1109.n128_u32[2] >= (unint64_t)v1109.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1109, (uint64_t)v1110, v1109.n128_u32[2] + 1, 4);
              v810 = v1109.n128_u32[2];
            }
            *(_DWORD *)(v1109.n128_u64[0] + 4 * v810) = v802;
            ++v1109.n128_u32[2];
            v795 = DWORD2(v1112);
            if (!*(_QWORD *)(v1112 + 8 * DWORD2(v1112) - 8))
            {
              LODWORD(v1091) = v794 + v797 - 1;
              goto LABEL_1492;
            }
            ++v797;
            if (v796 + v797 == 1)
            {
              v792 = v1120;
              v794 = v794 + v797 - 1;
              goto LABEL_1471;
            }
          }
          if (v803 != (_DWORD)v1120)
          {
            v808 = v1119[v803];
            if (*(_BYTE *)(a2 + 1640))
              v809 = v35 - (_DWORD)v808;
            else
              v809 = v808;
            v807 = sub_1C500EF80(a2, v809, v804, v802);
            v795 = DWORD2(v1112);
            goto LABEL_1283;
          }
LABEL_1278:
          v807 = 0;
          goto LABEL_1283;
        }
LABEL_1471:
        LODWORD(v1091) = v794;
        if (*(_DWORD *)(v1047 + 8) < 0x100u)
        {
          if (v792 != v794)
          {
LABEL_1492:
            v1105 = (uint64_t)"Invalid record";
            v1108 = 259;
            sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1105);
            v1079 = 0;
LABEL_1493:
            v41 = 1;
LABEL_1551:
            if ((_QWORD *)v1109.n128_u64[0] != v1110)
              free((void *)v1109.n128_u64[0]);
            if ((__int128 *)v1112 != &v1113)
              free((void *)v1112);
LABEL_1669:
            v36 = v1077;
            v37 = a2 + 8;
LABEL_429:
            v38 = v1089;
LABEL_430:
            v35 = *(_QWORD *)v1088;
            goto LABEL_1442;
          }
        }
        else if (v792 != v794)
        {
          do
          {
            v1095 = 0;
            v1094 = 0;
            if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1091, v35, &v1095, &v1094))
              goto LABEL_1492;
            v887 = v1095;
            v888 = DWORD2(v1112);
            if (DWORD2(v1112) >= (unint64_t)HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1112, (uint64_t)&v1113, DWORD2(v1112) + 1, 8);
              v888 = DWORD2(v1112);
            }
            *(_QWORD *)(v1112 + 8 * v888) = v887;
            ++DWORD2(v1112);
            v889 = v1094;
            v890 = v1109.n128_u32[2];
            if (v1109.n128_u32[2] >= (unint64_t)v1109.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1109, (uint64_t)v1110, v1109.n128_u32[2] + 1, 4);
              v890 = v1109.n128_u32[2];
            }
            *(_DWORD *)(v1109.n128_u64[0] + 4 * v890) = v889;
            ++v1109.n128_u32[2];
          }
          while ((_DWORD)v1120 != (_DWORD)v1091);
        }
        v891 = v1100;
        if (v1100 == v1101)
        {
          v892 = v1100;
        }
        else
        {
          llvm::UpgradeOperandBundles(&v1100);
          v892 = v1100;
          v891 = v1101;
        }
        v1035 = (uint64_t *)v1112;
        v1036 = DWORD2(v1112);
        v1108 = 257;
        v897 = (v891 - v892) / 48;
        v898 = 0;
        if (v891 != v892)
        {
          v1019 = 48 * v897;
          v1020 = (_QWORD *)(v892 + 32);
          do
          {
            v898 += (*v1020 - *(v1020 - 1)) >> 3;
            v1020 += 6;
            v1019 -= 48;
          }
          while (v1019);
        }
        v899 = DWORD2(v1112) + 1;
        v900 = (v898 + DWORD2(v1112) + 1);
        v901 = (16 * v897);
        if ((_DWORD)v901)
          v902 = (16 * (_DWORD)v897) | 8u;
        else
          v902 = 0;
        v903 = (char *)operator new(v902 + 32 * v900 + 80);
        v904 = &v903[v902];
        v905 = (uint64_t)&v903[32 * v900 + v902];
        *(_DWORD *)(v905 + 20) = v900 & 0x7FFFFFF | (((_DWORD)v901 != 0) << 31) | *(_DWORD *)(v905 + 20) & 0x38000000;
        if ((_DWORD)v900)
        {
          do
          {
            *(_QWORD *)v904 = 0;
            *((_QWORD *)v904 + 1) = 0;
            *((_QWORD *)v904 + 2) = 0;
            *((_QWORD *)v904 + 3) = v905;
            v904 += 32;
          }
          while (v904 != (char *)v905);
        }
        v1079 = (llvm::Value *)&v903[32 * v900 + v902];
        if ((_DWORD)v901)
          *(_QWORD *)&v903[v901] = v901;
        if (v891 == v892)
        {
          v906 = 0;
        }
        else
        {
          v906 = 0;
          v1021 = 48 * v897;
          v1022 = (_QWORD *)(v892 + 32);
          do
          {
            v906 += (*v1022 - *(v1022 - 1)) >> 3;
            v1022 += 6;
            v1021 -= 48;
          }
          while (v1021);
        }
        v907 = v906 + v899;
        *(_QWORD *)v1079 = **(_QWORD **)(v1047 + 16);
        *((_QWORD *)v1079 + 1) = 0;
        v908 = *((_DWORD *)v1079 + 5) & 0xC0000000 | v907 & 0x7FFFFFF;
        *((_DWORD *)v1079 + 4) = 84;
        *((_DWORD *)v1079 + 5) = v908;
        *(_OWORD *)((char *)v1079 + 24) = 0u;
        *(_OWORD *)((char *)v1079 + 40) = 0u;
        *((_DWORD *)v1079 + 14) = 0;
        *((_QWORD *)v1079 + 8) = 0;
        *((_QWORD *)v1079 + 9) = v1047;
        sub_1C5382FD4((uint64_t)&v1095, v1035, &v1035[v1036], (uint64_t)v1079 - 32 * (v907 & 0x7FFFFFF));
        if (*((_QWORD *)v1079 - 4))
        {
          **((_QWORD **)v1079 - 2) = *((_QWORD *)v1079 - 3);
          v1023 = *((_QWORD *)v1079 - 3);
          if (v1023)
            *(_QWORD *)(v1023 + 16) = *((_QWORD *)v1079 - 2);
        }
        *((_QWORD *)v1079 - 4) = v1042;
        v910 = v1042 + 1;
        v909 = v1042[1];
        *((_QWORD *)v1079 - 3) = v909;
        if (v909)
          *((_QWORD *)v909 + 2) = (char *)v1079 - 24;
        *((_QWORD *)v1079 - 2) = v910;
        *v910 = (char *)v1079 - 32;
        llvm::CallBase::populateBundleOperandInfos((uint64_t)v1079, v892, (v891 - v892) / 48, v1036);
        llvm::Value::setName((uint64_t ***)v1079, (uint64_t)&v1105);
        v911 = *(_QWORD *)(a2 + 544);
        v912 = *(unsigned int *)(a2 + 560);
        v913 = sub_1C4E341F8(v911, *(_DWORD *)(a2 + 560), (int)v1063);
        if ((int *)(v911 + 32 * v912) == v913 || !v913[4])
          v914 = -1;
        else
          v914 = **((_DWORD **)v913 + 1);
        v1099 = v914;
        v915 = v1100;
        for (k = v1101; k != v915; k -= 48)
        {
          v917 = *(void **)(k - 24);
          if (v917)
          {
            *(_QWORD *)(k - 16) = v917;
            operator delete(v917);
          }
          if (*(char *)(k - 25) < 0)
            operator delete(*(void **)(k - 48));
        }
        v1101 = v915;
        v918 = *(unsigned int *)(a2 + 752);
        if (v918 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v918 + 1, 8);
          v918 = *v1072;
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 744) + 8 * v918) = v1079;
        ++*(_DWORD *)(a2 + 752);
        v919 = v1052 & 1;
        if ((v1052 & 0x4000) != 0)
          v919 = 2;
        if ((v1052 & 0x10000) != 0)
          v919 = 3;
        *((_WORD *)v1079 + 9) = v919 & 0xF003 | (4 * ((v1052 >> 1) & 0x3FF)) | *((_WORD *)v1079 + 9) & 0xF000;
        *((_QWORD *)v1079 + 8) = v1037;
        sub_1C500F0B8(v1077, a2, (uint64_t)v1079, v1109.n128_i64[0]);
        if (*v1077)
        {
          llvm::Value::deleteValue(v1079);
          v41 = 1;
          goto LABEL_1551;
        }
        if (v1039)
        {
          if (!sub_1C4774A9C((uint64_t)v1079))
          {
            v1105 = (uint64_t)"Fast-math-flags specified for call without floating-point scalar or vector return type";
            v1108 = 259;
            sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1105);
            goto LABEL_1493;
          }
          *((_BYTE *)v1079 + 17) |= 2 * (_BYTE)v1039;
        }
        v41 = 9;
        goto LABEL_1551;
      case 35:
        if (!v1076 || (v129 = *(_QWORD *)(v1076 + 40), v129 == v1076 + 40))
        {
          v38 = v1089;
          if (!(_DWORD)v1075)
            goto LABEL_441;
          v308 = *(_QWORD *)&(*v1074)[8 * (v1075 - 1)];
          if (!v308)
            goto LABEL_441;
          v129 = *(_QWORD *)(v308 + 40);
          if (v129 == v308 + 40 || v129 == 0)
            goto LABEL_441;
        }
        else
        {
          v38 = v1089;
          if (!v129)
            goto LABEL_441;
        }
        if (v1120 <= 3)
        {
LABEL_441:
          *(_QWORD *)&v1112 = "Invalid record";
          LOWORD(v1114[0]) = 259;
          v310 = v36;
          v37 = a2 + 8;
          goto LABEL_1448;
        }
        v480 = (_DWORD)v1120 == 5 && v1119[4] != 0;
        v555 = *(_DWORD *)v1119;
        v556 = *((_DWORD *)v1119 + 2);
        v557 = *((_DWORD *)v1119 + 4);
        v558 = *((_DWORD *)v1119 + 6);
        if (!v557)
        {
          v562 = 0;
          goto LABEL_913;
        }
        v559 = (v557 - 1);
        v560 = *(_QWORD *)(a2 + 680);
        v561 = (uint64_t)(*(_QWORD *)(v560 + 608) - *(_QWORD *)(v560 + 600)) >> 4;
        if (v561 > v559)
        {
          v1085 = *(_DWORD *)v1119;
          OneMDString = llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString((llvm::MetadataLoader::MetadataLoaderImpl *)v560, v557 - 1);
        }
        else
        {
          if (*(_DWORD *)(v560 + 8) > v559)
          {
            v562 = *(unsigned __int8 **)(*(_QWORD *)v560 + 8 * v559);
            if (v562)
              goto LABEL_860;
          }
          v1085 = *(_DWORD *)v1119;
          if (v561 + ((uint64_t)(*(_QWORD *)(v560 + 632) - *(_QWORD *)(v560 + 624)) >> 3) > v559)
          {
            v1113 = 0u;
            v1114[0] = 0u;
            v1112 = 0u;
            sub_1C501F798(v560, v559, (uint64_t)&v1112);
            sub_1C5019980(v560, (llvm::MDNode *)&v1112);
            if (*(_DWORD *)(v560 + 8) <= v559)
              v562 = 0;
            else
              v562 = *(unsigned __int8 **)(*(_QWORD *)v560 + 8 * v559);
            sub_1C5020964((uint64_t)&v1112);
LABEL_1725:
            v555 = v1085;
            if (!v562)
              goto LABEL_861;
LABEL_860:
            if (*v562 - 4 >= 0x1F)
            {
LABEL_861:
              *(_QWORD *)&v1112 = "Invalid record";
              LOWORD(v1114[0]) = 259;
              v36 = v1077;
              v37 = a2 + 8;
              sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1112);
              v41 = 1;
              goto LABEL_862;
            }
LABEL_913:
            if (!v558)
            {
              v594 = 0;
              v35 = *(_QWORD *)v1088;
              goto LABEL_1017;
            }
            v591 = (v558 - 1);
            v592 = *(_QWORD *)(a2 + 680);
            v593 = (uint64_t)(*(_QWORD *)(v592 + 608) - *(_QWORD *)(v592 + 600)) >> 4;
            if (v593 > v591)
            {
              v1086 = v555;
              v1008 = llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString((llvm::MetadataLoader::MetadataLoaderImpl *)v592, v558 - 1);
            }
            else
            {
              v35 = *(_QWORD *)v1088;
              if (*(_DWORD *)(v592 + 8) > v591)
              {
                v594 = *(unsigned __int8 **)(*(_QWORD *)v592 + 8 * v591);
                if (v594)
                  goto LABEL_917;
              }
              v1086 = v555;
              if (v593 + ((uint64_t)(*(_QWORD *)(v592 + 632) - *(_QWORD *)(v592 + 624)) >> 3) > v591)
              {
                v1113 = 0u;
                v1114[0] = 0u;
                v1112 = 0u;
                sub_1C501F798(v592, v591, (uint64_t)&v1112);
                sub_1C5019980(v592, (llvm::MDNode *)&v1112);
                if (*(_DWORD *)(v592 + 8) <= v591)
                  v594 = 0;
                else
                  v594 = *(unsigned __int8 **)(*(_QWORD *)v592 + 8 * v591);
                sub_1C5020964((uint64_t)&v1112);
LABEL_1733:
                v35 = *(_QWORD *)v1088;
                v555 = v1086;
                if (!v594)
                  goto LABEL_918;
LABEL_917:
                if (*v594 - 4 >= 0x1F)
                {
LABEL_918:
                  *(_QWORD *)&v1112 = "Invalid record";
                  LOWORD(v1114[0]) = 259;
                  v36 = v1077;
                  v37 = a2 + 8;
                  sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1112);
                  v41 = 1;
                  v38 = v1089;
                  goto LABEL_62;
                }
LABEL_1017:
                if (v562)
                {
                  v666 = *((_QWORD *)v562 + 2);
                  v667 = (uint64_t *)(v666 & 0xFFFFFFFFFFFFFFF8);
                  if ((v666 & 4) != 0)
                    v667 = (uint64_t *)*v667;
                  Impl = (unsigned __int8 *)llvm::DILocation::getImpl(v667, v555, v556, (uint64_t)v562, (uint64_t)v594, v480, 0, 1);
                  *(_QWORD *)&v1112 = Impl;
                  if (Impl)
                    llvm::MetadataTracking::track((uint64_t)&v1112, Impl, 2);
                  v36 = v1077;
                  v38 = v1089;
                  if (v1103)
                    llvm::MetadataTracking::untrack((uint64_t)&v1103, v1103);
                  v669 = (unsigned __int8 *)v1112;
                  v1103 = (unsigned __int8 *)v1112;
                  if (!(_QWORD)v1112)
                    goto LABEL_1042;
                }
                else
                {
                  *(_QWORD *)&v1112 = 0;
                  if (!v1103)
                  {
                    v1103 = 0;
                    v36 = v1077;
                    v38 = v1089;
                    goto LABEL_1042;
                  }
                  llvm::MetadataTracking::untrack((uint64_t)&v1103, v1103);
                  v669 = (unsigned __int8 *)v1112;
                  v1103 = (unsigned __int8 *)v1112;
                  v36 = v1077;
                  v38 = v1089;
                  if (!(_QWORD)v1112)
                    goto LABEL_1042;
                }
                llvm::MetadataTracking::retrack((uint64_t)&v1112, v669, (uint64_t)&v1103);
LABEL_1042:
                v1097 = (llvm::Type *)v1103;
                if (v1103)
                  llvm::MetadataTracking::track((uint64_t)&v1097, v1103, 2);
                v679 = (unsigned __int8 **)(v129 + 24);
                if (&v1097 != (llvm::Type **)(v129 + 24))
                {
                  v37 = a2 + 8;
                  if (*v679)
                    llvm::MetadataTracking::untrack((uint64_t)v679, *v679);
                  v39 = v1097;
                  *v679 = (unsigned __int8 *)v1097;
                  if (v39)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v1097, (unsigned __int8 *)v39, (uint64_t)v679);
                    v1097 = 0;
                  }
LABEL_1049:
                  v41 = 4;
                  goto LABEL_62;
                }
                v39 = v1097;
                if (v1097)
                  llvm::MetadataTracking::untrack((uint64_t)&v1097, (unsigned __int8 *)v1097);
                v41 = 4;
                v36 = v1077;
                v37 = a2 + 8;
LABEL_862:
                v35 = *(_QWORD *)v1088;
                v38 = v1089;
                goto LABEL_62;
              }
              v1008 = sub_1C501FA6C(v592, v591);
            }
            v594 = v1008;
            goto LABEL_1733;
          }
          OneMDString = sub_1C501FA6C(v560, v559);
        }
        v562 = OneMDString;
        goto LABEL_1725;
      case 36:
        if ((_DWORD)v1120 != 2)
          goto LABEL_388;
        v155 = 4;
        v38 = v1089;
        switch(*(_DWORD *)v1119)
        {
          case 0:
          case 1:
          case 2:
            goto LABEL_433;
          case 3:
            break;
          case 4:
            v155 = 5;
            break;
          case 5:
            v155 = 6;
            break;
          default:
            v155 = 7;
            v38 = v1089;
            break;
        }
        v581 = v1119[1];
        if (((unint64_t)v1119[1] & 0xFFFFFFFE) != 0)
        {
          if (*(_QWORD *)(a2 + 1736) <= v581)
            LOBYTE(v581) = 1;
          else
            LOBYTE(v581) = *(_BYTE *)(*(_QWORD *)(a2 + 1728) + v581);
        }
        v582 = (char *)operator new(0x40uLL);
        *((_DWORD *)v582 + 5) &= 0x38000000u;
        *(_QWORD *)v582 = **(_QWORD **)(a2 + 424) + 1576;
        *((_QWORD *)v582 + 1) = 0;
        v582[16] = 63;
        *(_OWORD *)(v582 + 17) = 0u;
        *(_OWORD *)(v582 + 33) = 0u;
        *(_OWORD *)(v582 + 44) = 0u;
        *((_WORD *)v582 + 9) = v155;
        v582[60] = v581;
        v168 = v582;
        v169 = *(unsigned int *)(a2 + 752);
        if (v169 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v169 + 1, 8);
          v169 = *v1072;
        }
        goto LABEL_896;
      case 37:
        v130 = v1120;
        LODWORD(v1105) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1092[0]) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092))
          goto LABEL_199;
        v332 = (uint64_t *)v1109.n128_u64[0];
        v38 = v1089;
        if (*(_BYTE *)(*(_QWORD *)v1109.n128_u64[0] + 8) != 15)
        {
          *(_QWORD *)&v1112 = "Cmpxchg operand is not a pointer type";
          LOWORD(v1114[0]) = 259;
          v36 = v1077;
LABEL_1230:
          v74 = v36;
          goto LABEL_1441;
        }
        v333 = *(_QWORD *)(a2 + 544);
        v334 = *(unsigned int *)(a2 + 560);
        v335 = sub_1C4E341F8(v333, *(_DWORD *)(a2 + 560), (int)v1092[0]);
        if ((int *)(v333 + 32 * v334) == v335 || !v335[4])
          v336 = -1;
        else
          v336 = **((_DWORD **)v335 + 1);
        v483 = (llvm::Type *)sub_1C500E8C8((_QWORD *)a2, v336);
        v484 = v1105;
        if ((_DWORD)v1120 != (_DWORD)v1105)
        {
          v485 = *(_BYTE *)(a2 + 1640)
               ? v35 - v1119[v1105]
               : v1119[v1105];
          v486 = sub_1C500EF80(a2, v485, v483, v336);
          if (v486)
          {
            if ((_DWORD)v1120 != v484 + 1)
            {
              v487 = (uint64_t *)v486;
              v488 = *(_BYTE *)(a2 + 1640) ? v35 - v1119[v484 + 1] : v1119[v484 + 1];
              v489 = sub_1C500EF80(a2, v488, *v486, v336);
              if (v489)
              {
                LODWORD(v1105) = v484 + 2;
                if (v130 >= v484 + 5 && v130 <= v484 + 7)
                {
                  v1064 = (llvm::Type *)v489;
                  v490 = v1119[v484 + 3];
                  switch((int)v490)
                  {
                    case 0:
                    case 1:
LABEL_730:
                      *(_QWORD *)&v1112 = "Invalid record";
                      LOWORD(v1114[0]) = 259;
                      v36 = v1077;
                      v37 = a2 + 8;
                      sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1112);
                      v1079 = 0;
                      v41 = 1;
                      goto LABEL_1605;
                    case 2:
                      goto LABEL_1570;
                    case 3:
                      LODWORD(v490) = 4;
                      goto LABEL_1570;
                    case 4:
                      LODWORD(v490) = 5;
                      goto LABEL_1570;
                    case 5:
                      LODWORD(v490) = 6;
                      goto LABEL_1570;
                    default:
                      LODWORD(v490) = 7;
LABEL_1570:
                      v1057 = (int)v490;
                      v1084 = v1119[v484 + 4];
                      if (((unint64_t)v1119[v484 + 4] & 0xFFFFFFFE) != 0)
                      {
                        if (*(_QWORD *)(a2 + 1736) <= v1084)
                          LOBYTE(v1084) = 1;
                        else
                          LOBYTE(v1084) = *(_BYTE *)(*(_QWORD *)(a2 + 1728) + v1084);
                      }
                      sub_1C500F5AC(v1077, a2, *v487, *v332);
                      if (*v1077)
                      {
                        v1079 = 0;
                        v41 = 1;
                        goto LABEL_1604;
                      }
                      if (v130 > 6)
                      {
                        v1050 = v1119[v484 + 5];
                        switch((int)v1050)
                        {
                          case 0:
                          case 1:
                            goto LABEL_730;
                          case 2:
                            goto LABEL_1579;
                          case 3:
                            LOWORD(v927) = 4;
                            goto LABEL_1578;
                          case 4:
                            LOWORD(v927) = 5;
                            goto LABEL_1578;
                          case 5:
                            LOWORD(v927) = 6;
                            goto LABEL_1578;
                          default:
                            LOWORD(v927) = 7;
                            goto LABEL_1578;
                        }
                      }
                      v927 = dword_1C85F9AD8[v1057 - 2];
LABEL_1578:
                      LOWORD(v1050) = v927;
LABEL_1579:
                      sub_1C4768AD0(*(_QWORD *)(a2 + 432) + 272, *v487);
                      v930 = v929;
                      if ((_DWORD)v928 == 1)
                      v931 = __clz((unint64_t)(v930 + 7) >> 3);
                      v932 = (char *)operator new(0xA0uLL);
                      v933 = 0;
                      v934 = (uint64_t)(v932 + 96);
                      *((_DWORD *)v932 + 29) = *((_DWORD *)v932 + 29) & 0x38000000 | 3;
                      do
                      {
                        v935 = &v932[v933];
                        *(_QWORD *)v935 = 0;
                        *((_QWORD *)v935 + 1) = 0;
                        *((_QWORD *)v935 + 2) = 0;
                        *((_QWORD *)v935 + 3) = v934;
                        v933 += 32;
                      }
                      while (v933 != 96);
                      v936 = v1084;
                      v1079 = (llvm::Value *)(v932 + 96);
                      llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(v934, (uint64_t)v332, (uint64_t ***)v487, (uint64_t)v1064, 63 - v931, v1057, (__int16)v1050, v936, 0);
                      v937 = v1119;
                      v938 = *((_WORD *)v932 + 57) & 0xFFFE | (v1119[v484 + 2] != 0);
                      *((_WORD *)v932 + 57) = v938;
                      if (v130 > 7)
                      {
                        *((_WORD *)v932 + 57) = v938 & 0xFFFD | (2 * (v937[v484 + 6] != 0));
                        v949 = sub_1C500EA24(a2, **(_QWORD **)(a2 + 424) + 1888, 0, 0);
                        v950 = *((_QWORD *)v932 + 12);
                        *(_QWORD *)&v1112 = __PAIR64__(v949, v336);
                        v1099 = sub_1C500EA24(a2, v950, (char *)&v1112, 2);
                        goto LABEL_1601;
                      }
                      *((_QWORD *)v932 + 17) = v1076;
                      *(_WORD *)(v1076 + 18) &= ~0x8000u;
                      if ((v932[119] & 0x10) != 0)
                      {
                        v994 = *(_QWORD *)(v1076 + 56);
                        if (v994)
                        {
                          v995 = *(llvm::ValueSymbolTable **)(v994 + 104);
                          if (v995)
                            llvm::ValueSymbolTable::reinsertValue(v995, v1079);
                        }
                      }
                      v939 = *(_QWORD *)(v1076 + 40);
                      *((_QWORD *)v932 + 15) = v939;
                      *((_QWORD *)v932 + 16) = v1076 + 40;
                      *(_QWORD *)(v939 + 8) = v932 + 120;
                      *(_QWORD *)(v1076 + 40) = v932 + 120;
                      LOWORD(v1114[0]) = 257;
                      v940 = (char *)operator new(0x80uLL);
                      v941 = (llvm::Value *)(v940 + 32);
                      *((_DWORD *)v940 + 13) = *((_DWORD *)v940 + 13) & 0x38000000 | 1;
                      *(_QWORD *)v940 = 0;
                      *((_QWORD *)v940 + 1) = 0;
                      *((_QWORD *)v940 + 2) = 0;
                      *((_QWORD *)v940 + 3) = v940 + 32;
                      v942 = *((_QWORD *)v932 + 12);
                      v943 = *(unsigned __int8 *)(v942 + 8);
                      if (v942 && v943 == 17)
                      {
                        v944 = *(_QWORD *)(v942 + 32);
                        if (v944)
                        {
                          v945 = (uint64_t *)(v942 + 24);
                          goto LABEL_1591;
                        }
                      }
                      else
                      {
                        v944 = 0;
                        if (v942 && v943 == 16)
                        {
                          if (*(_DWORD *)(v942 + 12))
                          {
                            v945 = *(uint64_t **)(v942 + 16);
LABEL_1591:
                            v944 = *v945;
                            goto LABEL_1592;
                          }
                          v944 = 0;
                        }
                      }
LABEL_1592:
                      *((_QWORD *)v940 + 4) = v944;
                      *((_QWORD *)v940 + 5) = 0;
                      *((_QWORD *)v940 + 6) = 0x10000005CLL;
                      *(_OWORD *)(v940 + 56) = 0u;
                      *(_OWORD *)(v940 + 72) = 0u;
                      *((_DWORD *)v940 + 22) = 0;
                      v948 = *((_QWORD *)v932 + 13);
                      v947 = v932 + 104;
                      v946 = v948;
                      *(_QWORD *)v940 = v1079;
                      *((_QWORD *)v940 + 1) = v948;
                      if (v948)
                        *(_QWORD *)(v946 + 16) = v940 + 8;
                      *((_QWORD *)v940 + 2) = v947;
                      *v947 = v940;
                      *((_DWORD *)v940 + 28) = 0;
                      *((_QWORD *)v940 + 12) = v940 + 112;
                      *((_QWORD *)v940 + 13) = 0x400000001;
                      llvm::Value::setName((uint64_t ***)v940 + 4, (uint64_t)&v1112);
                      v1099 = v336;
                      v1079 = v941;
LABEL_1601:
                      v951 = *(unsigned int *)(a2 + 752);
                      if (v951 >= *(unsigned int *)(a2 + 756))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v951 + 1, 8);
                        v951 = *v1072;
                      }
                      *(_QWORD *)(*v1073 + 8 * v951) = v1079;
                      ++*v1072;
                      v41 = 9;
LABEL_1604:
                      v36 = v1077;
                      v37 = a2 + 8;
LABEL_1605:
                      v35 = *(_QWORD *)v1088;
                      v38 = v1089;
                      goto LABEL_1442;
                  }
                }
              }
            }
            *(_QWORD *)&v1112 = "Invalid record";
            LOWORD(v1114[0]) = 259;
            v36 = v1077;
            v37 = a2 + 8;
            sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1112);
            v1079 = 0;
            v41 = 1;
LABEL_201:
            v38 = v1089;
            goto LABEL_1442;
          }
        }
        goto LABEL_731;
      case 38:
      case 59:
        v49 = v1120;
        LODWORD(v1092[0]) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1095) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1109, (int *)&v1095))
        {
          v50 = "Invalid record";
LABEL_75:
          *(_QWORD *)&v1112 = v50;
          LOWORD(v1114[0]) = 259;
          v36 = v1077;
LABEL_419:
          v304 = v36;
          goto LABEL_420;
        }
        v75 = v1109.n128_u64[0];
        if (*(_BYTE *)(*(_QWORD *)v1109.n128_u64[0] + 8) != 15)
          goto LABEL_646;
        v1105 = 0;
        LODWORD(v1091) = -1;
        if (v43 == 38)
        {
          v76 = *(_QWORD *)(a2 + 544);
          v77 = *(unsigned int *)(a2 + 560);
          v78 = sub_1C4E341F8(v76, *(_DWORD *)(a2 + 560), (int)v1095);
          if ((int *)(v76 + 32 * v77) == v78)
          {
            v79 = -1;
            v38 = v1089;
          }
          else
          {
            v38 = v1089;
            if (v78[4])
              v79 = **((_DWORD **)v78 + 1);
            else
              v79 = -1;
          }
          LODWORD(v1091) = v79;
          v658 = (llvm::Type *)sub_1C500E8C8((_QWORD *)a2, v79);
          v659 = (int)v1092[0];
          if ((_DWORD)v1120 == LODWORD(v1092[0]))
          {
            v1105 = 0;
LABEL_1008:
            *(_QWORD *)&v1112 = "Invalid record";
            LOWORD(v1114[0]) = 259;
            v36 = v1077;
            goto LABEL_1009;
          }
          if (*(_BYTE *)(a2 + 1640))
            v660 = v35 - v1119[LODWORD(v1092[0])];
          else
            v660 = v1119[LODWORD(v1092[0])];
          v1105 = (uint64_t)sub_1C500EF80(a2, v660, v658, v79);
          if (!v1105)
            goto LABEL_1008;
          v372 = v659 + 1;
          LODWORD(v1092[0]) = v659 + 1;
        }
        else
        {
          if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1091))
          {
LABEL_646:
            v439 = "Invalid record";
LABEL_647:
            *(_QWORD *)&v1112 = v439;
            LOWORD(v1114[0]) = 259;
            v36 = v1077;
            v304 = v1077;
            v37 = a2 + 8;
LABEL_420:
            sub_1C500A780(v304, v37, (llvm::Twine *)&v1112);
            v1079 = 0;
            v41 = 1;
LABEL_421:
            v38 = v1089;
            goto LABEL_1442;
          }
          v372 = (int)v1092[0];
          v38 = v1089;
        }
        v661 = v372 + 4;
        v662 = v372 + 5;
        if (v49 != v372 + 4 && v49 != v662)
          goto LABEL_1008;
        v663 = v1119[v372];
        if (v663 < 0xD)
        {
          v664 = v1119[v372 + 1];
          v665 = v1119[v372 + 2];
          switch((int)v665)
          {
            case 0:
            case 1:
              *(_QWORD *)&v1112 = "Invalid record";
              LOWORD(v1114[0]) = 259;
              v36 = v1077;
              v131 = v1077;
              v37 = a2 + 8;
              goto LABEL_200;
            case 2:
              break;
            case 3:
              LOWORD(v665) = 4;
              break;
            case 4:
              LOWORD(v665) = 5;
              break;
            case 5:
              LOWORD(v665) = 6;
              break;
            default:
              LOWORD(v665) = 7;
              break;
          }
          v851 = v1119[v372 + 3];
          v852 = (char)v851;
          if ((v851 & 0xFFFFFFFE) != 0)
          {
            if (*(_QWORD *)(a2 + 1736) <= (unint64_t)v851)
              v852 = 1;
            else
              v852 = *(_BYTE *)(*(_QWORD *)(a2 + 1728) + v851);
          }
          v18 = v49 == v662;
          v36 = v1077;
          if (v18)
          {
            v853 = v1119[v661];
            if ((unint64_t)v853 < 0x22)
            {
              *v1077 = 0;
              if (v853)
              {
                v854 = v664;
                v1083 = v852;
                LOBYTE(v855) = (_BYTE)v853 - 1;
                v856 = (llvm::Type **)v1105;
LABEL_1384:
                v860 = (char *)operator new(0x80uLL);
                *((_DWORD *)v860 + 21) = *((_DWORD *)v860 + 21) & 0x38000000 | 2;
                *((_QWORD *)v860 + 1) = 0;
                *((_QWORD *)v860 + 2) = 0;
                *(_QWORD *)v860 = 0;
                *((_QWORD *)v860 + 5) = 0;
                *((_QWORD *)v860 + 6) = 0;
                *((_QWORD *)v860 + 4) = 0;
                v861 = *v856;
                *((_DWORD *)v860 + 21) = 2;
                *((_QWORD *)v860 + 8) = v861;
                v860 += 64;
                *((_QWORD *)v860 - 5) = v860;
                *((_QWORD *)v860 - 1) = v860;
                v862 = v855;
                *((_QWORD *)v860 + 1) = 0;
                v860[16] = 65;
                v860[17] = 0;
                *((_WORD *)v860 + 9) = 0;
                *((_DWORD *)v860 + 14) = 0;
                *(_OWORD *)(v860 + 40) = 0u;
                *(_OWORD *)(v860 + 24) = 0u;
                v343 = (llvm::Value *)v860;
                llvm::AtomicRMWInst::Init((uint64_t)v860, (__int16)v663, v75, (uint64_t)v856, v862, (__int16)v665, v1083);
                v1099 = v1091;
                *((_WORD *)v343 + 9) = *((_WORD *)v343 + 9) & 0xFFFE | (v854 != 0);
                v344 = *(unsigned int *)(a2 + 752);
                if (v344 >= *(unsigned int *)(a2 + 756))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v344 + 1, 8);
                  v344 = *v1072;
                }
                v37 = a2 + 8;
                v35 = *(_QWORD *)v1088;
                v38 = v1089;
LABEL_1387:
                v695 = *v1073;
                v1079 = v343;
LABEL_1388:
                *(_QWORD *)(v695 + 8 * v344) = v343;
LABEL_1389:
                ++*v1072;
LABEL_1390:
                v41 = 9;
                goto LABEL_1442;
              }
            }
            else
            {
              *(_QWORD *)&v1112 = "Invalid alignment value";
              LOWORD(v1114[0]) = 259;
              sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1112);
              if (*v1077)
              {
                v1079 = 0;
                v41 = 1;
                v37 = a2 + 8;
                goto LABEL_201;
              }
            }
          }
          v854 = v664;
          v1083 = v852;
          v856 = (llvm::Type **)v1105;
          sub_1C4768AD0(*(_QWORD *)(a2 + 432) + 272, *(_QWORD *)v1105);
          v859 = v858;
          if ((_DWORD)v857 == 1)
          v855 = 63 - __clz((unint64_t)(v859 + 7) >> 3);
          goto LABEL_1384;
        }
        v73 = "Invalid record";
LABEL_115:
        *(_QWORD *)&v1112 = v73;
        LOWORD(v1114[0]) = 259;
        v36 = v1077;
LABEL_116:
        v74 = v36;
        v37 = a2 + 8;
        goto LABEL_1441;
      case 39:
        LODWORD(v1105) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1092[0]) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092))
          goto LABEL_418;
        v165 = (llvm::Value *)v1109.n128_u64[0];
        v166 = operator new(0x60uLL);
        v166[13] = v166[13] & 0x38000000 | 1;
        *(_QWORD *)v166 = 0;
        *((_QWORD *)v166 + 1) = 0;
        *((_QWORD *)v166 + 2) = 0;
        *((_QWORD *)v166 + 3) = v166 + 8;
        v1079 = (llvm::Value *)(v166 + 8);
        llvm::ResumeInst::ResumeInst((llvm::ResumeInst *)(v166 + 8), v165, 0);
        v167 = *(unsigned int *)(a2 + 752);
        if (v167 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v167 + 1, 8);
          v167 = *v1072;
        }
        v38 = v1089;
        goto LABEL_263;
      case 40:
      case 47:
        if ((_DWORD)v1115 == 47)
        {
          if (v1120 <= 2)
            goto LABEL_418;
        }
        else if (v1120 <= 3)
        {
          goto LABEL_418;
        }
        LODWORD(v1105) = 1;
        v1099 = *(_DWORD *)v1119;
        v80 = sub_1C500E8C8((_QWORD *)a2, v1099);
        if (v80)
        {
          v82 = (llvm::LandingPadInst *)v80;
          if (v43 == 40)
          {
            v1109.n128_u64[0] = 0;
            LODWORD(v1092[0]) = 0;
            if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092))
            {
              *(_QWORD *)&v1112 = "Invalid record";
              LOWORD(v1114[0]) = 259;
              sub_1C500A780(v36, v37, (llvm::Twine *)&v1112);
              v38 = v1089;
              goto LABEL_1011;
            }
            v369 = v1104;
            if ((*((_WORD *)v1104 + 9) & 8) != 0)
            {
              v370 = *((_DWORD *)v1104 + 5);
              if ((v370 & 0x40000000) != 0)
                v371 = (_QWORD *)*((_QWORD *)v1104 - 1);
              else
                v371 = (_QWORD *)((char *)v1104 - 32 * (v370 & 0x7FFFFFF));
              v38 = v1089;
              if (*v371 != v1109.n128_u64[0])
              {
                v381 = "Personality function mismatch";
LABEL_552:
                *(_QWORD *)&v1112 = v381;
                LOWORD(v1114[0]) = 259;
LABEL_553:
                v382 = v36;
                goto LABEL_1010;
              }
            }
            else
            {
              v777 = v1109.n128_u64[0] != 0;
              sub_1C53D1F60(v1104, v1109.n128_i64[0]);
              *((_WORD *)v369 + 9) = *((_WORD *)v369 + 9) & 0xFFF7 | (8 * v777);
              v38 = v1089;
            }
            v710 = v1105;
          }
          else
          {
            v710 = 1;
            v38 = v1089;
          }
          v778 = v1119[v710] != 0;
          LODWORD(v1105) = v710 + 2;
          v779 = (llvm::Type *)v1119[v710 + 1];
          LOWORD(v1114[0]) = 257;
          v780 = llvm::LandingPadInst::Create(v82, v779, (const llvm::Twine *)&v1112, 0, v81);
          for (*((_WORD *)v780 + 9) = *((_WORD *)v780 + 9) & 0xFFFE | v778; (_DWORD)v779; LODWORD(v779) = (_DWORD)v779 - 1)
          {
            LODWORD(v1105) = v1105 + 1;
            v1109.n128_u64[0] = 0;
            LODWORD(v1092[0]) = 0;
            if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092))
            {
              if (v780)
              {
                if ((*((_BYTE *)v780 + 23) & 8) != 0)
                {
                  v998 = llvm::UndefValue::get(*(llvm::UndefValue **)v780, v781);
                  llvm::ValueAsMetadata::handleRAUW((uint64_t *)v780, v998, v999);
                }
                v783 = (unsigned __int8 *)*((_QWORD *)v780 + 6);
                if (v783)
                  llvm::MetadataTracking::untrack((uint64_t)v780 + 48, v783);
                llvm::Value::~Value(v780, (llvm::Value *)v783);
                v784 = *((_DWORD *)v780 + 5);
                if ((v784 & 0x40000000) != 0)
                {
                  v985 = (char *)*((_QWORD *)v780 - 1);
                  v789 = (char *)v780 - 8;
                  v984 = v985;
                  v986 = v784 & 0x7FFFFFF;
                  if ((_DWORD)v986)
                  {
                    v987 = 32 * v986;
                    do
                    {
                      v988 = &v984[v987];
                      if (*(_QWORD *)&v984[v987 - 32])
                      {
                        **((_QWORD **)v988 - 2) = *((_QWORD *)v988 - 3);
                        v989 = *((_QWORD *)v988 - 3);
                        if (v989)
                          *(_QWORD *)(v989 + 16) = *((_QWORD *)v988 - 2);
                      }
                      v987 -= 32;
                    }
                    while (v987);
                  }
                  operator delete(v984);
                }
                else
                {
                  v785 = v784 & 0x7FFFFFF;
                  if ((_DWORD)v785)
                  {
                    v786 = (_QWORD **)((char *)v780 - 16);
                    v787 = -32 * v785;
                    do
                    {
                      if (*(v786 - 2))
                      {
                        **v786 = *(v786 - 1);
                        v788 = (uint64_t)*(v786 - 1);
                        if (v788)
                          *(_QWORD *)(v788 + 16) = *v786;
                      }
                      v786 -= 4;
                      v787 += 32;
                    }
                    while (v787);
                  }
                  v789 = (char *)v780 - 32 * v785;
                  if (v784 < 0)
                    v789 = &v789[-*((_QWORD *)v789 - 1) - 8];
                }
                operator delete(v789);
                v36 = v1077;
                v37 = a2 + 8;
                v38 = v1089;
              }
              *(_QWORD *)&v1112 = "Invalid record";
              LOWORD(v1114[0]) = 259;
              sub_1C500A780(v36, v37, (llvm::Twine *)&v1112);
              v1079 = 0;
              v41 = 1;
              goto LABEL_1442;
            }
            llvm::LandingPadInst::addClause(v780, (llvm::Constant *)v1109.n128_u64[0]);
          }
          v782 = *(unsigned int *)(a2 + 752);
          if (v782 >= *(unsigned int *)(a2 + 756))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v782 + 1, 8);
            v782 = *v1072;
          }
          v1079 = v780;
          *(_QWORD *)(*v1073 + 8 * v782) = v780;
          goto LABEL_1389;
        }
LABEL_418:
        *(_QWORD *)&v1112 = "Invalid record";
        LOWORD(v1114[0]) = 259;
        goto LABEL_419;
      case 41:
        LODWORD(v1105) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1092[0]) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092))
          goto LABEL_418;
        v120 = v1105;
        v121 = v1105 + 5;
        if ((_DWORD)v1120 != (_DWORD)v1105 + 4 && (_DWORD)v1120 != v121)
          goto LABEL_418;
        v122 = (uint64_t *)v1109.n128_u64[0];
        v38 = v1089;
        if (*(_BYTE *)(*(_QWORD *)v1109.n128_u64[0] + 8) != 15)
        {
LABEL_558:
          v384 = "Load operand is not a pointer type";
          goto LABEL_1229;
        }
        if ((_DWORD)v1120 == v121)
        {
          v123 = v1105 + 1;
          LODWORD(v1105) = v1105 + 1;
          v124 = v1119[v120];
          v1099 = v124;
          v125 = sub_1C500E8C8((_QWORD *)a2, v124);
        }
        else
        {
          v647 = *(_QWORD *)(a2 + 544);
          v648 = *(unsigned int *)(a2 + 560);
          v649 = sub_1C4E341F8(v647, *(_DWORD *)(a2 + 560), (int)v1092[0]);
          if ((int *)(v647 + 32 * v648) == v649 || !v649[4])
            v650 = -1;
          else
            v650 = **((_DWORD **)v649 + 1);
          v1099 = v650;
          v702 = sub_1C500E8C8((_QWORD *)a2, v650);
          if (!v702)
          {
            v580 = "Missing element type for old style atomic load";
LABEL_1232:
            *(_QWORD *)&v1112 = v580;
            LOWORD(v1114[0]) = 259;
            v74 = v36;
            goto LABEL_1441;
          }
          v125 = v702;
          v123 = v120;
        }
        sub_1C500F5AC(v36, a2, v125, *v122);
        if (*v36)
          goto LABEL_1089;
        v703 = v1119[v123 + 2];
        switch((int)v703)
        {
          case 0:
          case 4:
          case 5:
            goto LABEL_1438;
          case 1:
            break;
          case 2:
            LOWORD(v703) = 2;
            break;
          case 3:
            LOWORD(v703) = 4;
            break;
          default:
            LOWORD(v703) = 7;
            break;
        }
        v878 = v1119[v123];
        if (!v878)
        {
LABEL_1438:
          v554 = "Invalid record";
LABEL_1439:
          *(_QWORD *)&v1112 = v554;
          LOWORD(v1114[0]) = 259;
          goto LABEL_1440;
        }
        v879 = v1119[v123 + 3];
        if (((unint64_t)v1119[v123 + 3] & 0xFFFFFFFE) != 0)
        {
          if (*(_QWORD *)(a2 + 1736) <= v879)
            LOBYTE(v879) = 1;
          else
            LOBYTE(v879) = *(_BYTE *)(*(_QWORD *)(a2 + 1728) + v879);
        }
        if ((unint64_t)v878 < 0x22)
        {
          *v1077 = 0;
          v893 = (_BYTE)v878 - 1;
          v894 = operator new(0x60uLL);
          v894[13] = v894[13] & 0x38000000 | 1;
          *(_QWORD *)v894 = 0;
          *((_QWORD *)v894 + 1) = 0;
          *((_QWORD *)v894 + 2) = 0;
          *((_QWORD *)v894 + 3) = v894 + 8;
          LOWORD(v1114[0]) = 257;
          v1079 = (llvm::Value *)(v894 + 8);
          llvm::LoadInst::LoadInst((uint64_t)(v894 + 8), v125, (uint64_t)v122, (uint64_t)&v1112, v1119[v123 + 1] != 0, v893, (__int16)v703, v879, 0);
          goto LABEL_1665;
        }
        *(_QWORD *)&v1112 = "Invalid alignment value";
        LOWORD(v1114[0]) = 259;
        sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1112);
        if (*v1077)
          goto LABEL_1505;
        v874 = "Alignment missing from atomic load";
        goto LABEL_1487;
      case 42:
      case 45:
        LODWORD(v1092[0]) = 0;
        v1109.n128_u64[0] = 0;
        v1105 = 0;
        LODWORD(v1095) = 0;
        LODWORD(v1091) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1095)
          || (v51 = (uint64_t *)v1105, *(_BYTE *)(*(_QWORD *)v1105 + 8) != 15))
        {
LABEL_199:
          *(_QWORD *)&v1112 = "Invalid record";
          LOWORD(v1114[0]) = 259;
          v131 = v36;
LABEL_200:
          sub_1C500A780(v131, v37, (llvm::Twine *)&v1112);
          v1079 = 0;
          v41 = 1;
          goto LABEL_201;
        }
        if (v43 == 45)
        {
          v38 = v1089;
          if (!sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1109, (int *)&v1091))
          {
            v52 = (int)v1092[0];
LABEL_769:
            if ((_DWORD)v1120 != v52 + 4)
            {
LABEL_108:
              *(_QWORD *)&v1112 = "Invalid record";
              LOWORD(v1114[0]) = 259;
              goto LABEL_116;
            }
            v508 = v1109.n128_u64[0];
            sub_1C500F5AC(v36, a2, *(_QWORD *)v1109.n128_u64[0], *v51);
            if (*v36)
            {
              v1079 = 0;
              v41 = 1;
              v37 = a2 + 8;
              goto LABEL_1442;
            }
            v700 = v1119[v52 + 2];
            switch((int)v700)
            {
              case 0:
              case 3:
              case 5:
                goto LABEL_1438;
              case 1:
                break;
              case 2:
                LOWORD(v700) = 2;
                break;
              case 4:
                LOWORD(v700) = 5;
                break;
              default:
                LOWORD(v700) = 7;
                break;
            }
            v872 = v1119[v52 + 3];
            if (((unint64_t)v1119[v52 + 3] & 0xFFFFFFFE) != 0)
            {
              if (*(_QWORD *)(a2 + 1736) <= v872)
                LOBYTE(v872) = 1;
              else
                LOBYTE(v872) = *(_BYTE *)(*(_QWORD *)(a2 + 1728) + v872);
            }
            v873 = v1119[v52];
            if (!v873)
            {
              v875 = "Invalid record";
              goto LABEL_1509;
            }
            if ((unint64_t)v873 < 0x22)
            {
              *v1077 = 0;
              v876 = (_BYTE)v873 - 1;
              v877 = operator new(0x80uLL);
              v877[21] = v877[21] & 0x38000000 | 2;
              *(_QWORD *)v877 = 0;
              *((_QWORD *)v877 + 1) = 0;
              *((_QWORD *)v877 + 2) = 0;
              *((_QWORD *)v877 + 3) = v877 + 16;
              *((_QWORD *)v877 + 4) = 0;
              *((_QWORD *)v877 + 5) = 0;
              *((_QWORD *)v877 + 6) = 0;
              *((_QWORD *)v877 + 7) = v877 + 16;
              v1079 = (llvm::Value *)(v877 + 16);
              llvm::StoreInst::StoreInst((uint64_t)(v877 + 16), v508, (uint64_t)v51, v1119[v52 + 1] != 0, v876, (__int16)v700, v872, 0);
              goto LABEL_1665;
            }
            *(_QWORD *)&v1112 = "Invalid alignment value";
            LOWORD(v1114[0]) = 259;
            sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1112);
            if (*v1077)
              goto LABEL_1505;
            v874 = "Alignment missing from atomic store";
LABEL_1487:
            *(_QWORD *)&v1112 = v874;
            LOWORD(v1114[0]) = 259;
            goto LABEL_1510;
          }
        }
        else
        {
          v373 = *(_QWORD *)(a2 + 544);
          v374 = *(unsigned int *)(a2 + 560);
          v375 = sub_1C4E341F8(v373, *(_DWORD *)(a2 + 560), (int)v1095);
          v38 = v1089;
          if ((int *)(v373 + 32 * v374) == v375 || !v375[4])
            v376 = -1;
          else
            v376 = **((_DWORD **)v375 + 1);
          LODWORD(v1091) = v376;
          v481 = (llvm::Type *)sub_1C500E8C8((_QWORD *)a2, v376);
          v482 = (int)v1092[0];
          if ((_DWORD)v1120 == LODWORD(v1092[0]))
          {
            v1109.n128_u64[0] = 0;
          }
          else
          {
            if (*(_BYTE *)(a2 + 1640))
              v507 = v35 - v1119[LODWORD(v1092[0])];
            else
              v507 = v1119[LODWORD(v1092[0])];
            v1109.n128_u64[0] = (unint64_t)sub_1C500EF80(a2, v507, v481, v376);
            if (v1109.n128_u64[0])
            {
              v52 = v482 + 1;
              LODWORD(v1092[0]) = v482 + 1;
              goto LABEL_769;
            }
          }
        }
LABEL_1228:
        v384 = "Invalid record";
LABEL_1229:
        *(_QWORD *)&v1112 = v384;
        LOWORD(v1114[0]) = 259;
        goto LABEL_1230;
      case 46:
        v84 = v1120;
        LODWORD(v1092[0]) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1095) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1109, (int *)&v1095))
          goto LABEL_418;
        v85 = (uint64_t *)v1109.n128_u64[0];
        v38 = v1089;
        if (*(_BYTE *)(*(_QWORD *)v1109.n128_u64[0] + 8) == 15)
        {
          v1105 = 0;
          LODWORD(v1091) = 0;
          if (!sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1091))
          {
            v86 = (int)v1092[0];
            if ((_DWORD)v1120 == LODWORD(v1092[0])
              || ((v87 = v1091, v88 = (uint64_t *)v1105, *(_BYTE *)(a2 + 1640))
                ? (v89 = v35 - v1119[LODWORD(v1092[0])])
                : (v89 = v1119[LODWORD(v1092[0])]),
                  (v90 = sub_1C500EF80(a2, v89, *(llvm::Type **)v1105, (int)v1091)) == 0))
            {
LABEL_731:
              *(_QWORD *)&v1112 = "Invalid record";
              LOWORD(v1114[0]) = 259;
              v36 = v1077;
LABEL_1440:
              v74 = v36;
              v37 = a2 + 8;
LABEL_1441:
              sub_1C500A780(v74, v37, (llvm::Twine *)&v1112);
              v1079 = 0;
              v41 = 1;
              goto LABEL_1442;
            }
            v1058 = v87;
            LODWORD(v1092[0]) = v86 + 1;
            if (v84 < v86 + 4 || v84 > v86 + 7)
            {
              v93 = "Invalid record";
LABEL_1195:
              *(_QWORD *)&v1112 = v93;
              LOWORD(v1114[0]) = 259;
              v36 = v1077;
              v128 = v1077;
              v37 = a2 + 8;
LABEL_712:
              sub_1C500A780(v128, v37, (llvm::Twine *)&v1112);
              v1079 = 0;
              v41 = 1;
              goto LABEL_430;
            }
            v91 = (uint64_t)v90;
            v92 = v1119[v86 + 2];
            switch((int)v92)
            {
              case 0:
              case 1:
                v93 = "Invalid cmpxchg success ordering";
                goto LABEL_1195;
              case 2:
                break;
              case 3:
                LOWORD(v92) = 4;
                break;
              case 4:
                LOWORD(v92) = 5;
                break;
              case 5:
                LOWORD(v92) = 6;
                break;
              default:
                LOWORD(v92) = 7;
                break;
            }
            v1044 = v1119[v86 + 1];
            v1049 = (__int16)v92;
            v1056 = v1119[v86 + 3];
            if (((unint64_t)v1119[v86 + 3] & 0xFFFFFFFE) != 0)
            {
              if (*(_QWORD *)(a2 + 1736) <= (unint64_t)v1119[v86 + 3])
                LOBYTE(v1056) = 1;
              else
                LOBYTE(v1056) = *(_BYTE *)(*(_QWORD *)(a2 + 1728) + v1056);
            }
            sub_1C500F5AC(v1077, a2, *v88, *v85);
            if (*v1077)
            {
LABEL_1505:
              v1079 = 0;
              v41 = 1;
              goto LABEL_1669;
            }
            v896 = v1119[v86 + 4];
            if (v896 > 5)
            {
              LOWORD(v896) = 7;
            }
            else
            {
              if (((1 << (char)v896) & 0x33) != 0)
              {
                v875 = "Invalid cmpxchg failure ordering";
LABEL_1509:
                *(_QWORD *)&v1112 = v875;
                LOWORD(v1114[0]) = 259;
LABEL_1510:
                v36 = v1077;
LABEL_427:
                v287 = v36;
                v37 = a2 + 8;
LABEL_428:
                sub_1C500A780(v287, v37, (llvm::Twine *)&v1112);
                v1079 = 0;
                v41 = 1;
                goto LABEL_429;
              }
              if ((_DWORD)v896 != 2)
                LOWORD(v896) = 4;
            }
            v967 = v1119[v86 + 5];
            if (v84 == v86 + 7)
            {
              v968 = v1119[v86 + 6];
              if ((unint64_t)v968 < 0x22)
              {
                *v1077 = 0;
                if (v968)
                {
                  LOBYTE(v973) = (_BYTE)v968 - 1;
LABEL_1662:
                  v977 = operator new(0xA0uLL);
                  v978 = v977;
                  v979 = 0;
                  v1079 = (llvm::Value *)(v977 + 24);
                  v977[29] = v977[29] & 0x38000000 | 3;
                  do
                  {
                    v980 = &v977[v979];
                    *v980 = 0;
                    v980[1] = 0;
                    v980[2] = 0;
                    v980[3] = v1079;
                    v979 += 8;
                  }
                  while (v979 != 24);
                  llvm::AtomicCmpXchgInst::AtomicCmpXchgInst((uint64_t)v1079, (uint64_t)v85, (uint64_t ***)v88, v91, v973, v1049, (__int16)v896, v1056, 0);
                  *((_WORD *)v978 + 57) = (v1044 != 0) | (unsigned __int16)(2 * (v967 != 0)) | *((_WORD *)v978 + 57) & 0xFFFC;
                  v981 = sub_1C500EA24(a2, **(_QWORD **)(a2 + 424) + 1888, 0, 0);
                  v982 = *((_QWORD *)v978 + 12);
                  *(_QWORD *)&v1112 = __PAIR64__(v981, v1058);
                  v1099 = sub_1C500EA24(a2, v982, (char *)&v1112, 2);
LABEL_1665:
                  v983 = *(unsigned int *)(a2 + 752);
                  if (v983 >= *(unsigned int *)(a2 + 756))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v983 + 1, 8);
                    v983 = *v1072;
                  }
                  *(_QWORD *)(*v1073 + 8 * v983) = v1079;
                  ++*v1072;
LABEL_1668:
                  v41 = 9;
                  goto LABEL_1669;
                }
              }
              else
              {
                *(_QWORD *)&v1112 = "Invalid alignment value";
                LOWORD(v1114[0]) = 259;
                sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1112);
                if (*v1077)
                  goto LABEL_1505;
              }
            }
            sub_1C4768AD0(*(_QWORD *)(a2 + 432) + 272, *v88);
            v976 = v975;
            if ((_DWORD)v974 == 1)
            v973 = 63 - __clz((unint64_t)(v976 + 7) >> 3);
            goto LABEL_1662;
          }
LABEL_554:
          v383 = "Invalid record";
        }
        else
        {
          v383 = "Cmpxchg operand is not a pointer type";
        }
        *(_QWORD *)&v1112 = v383;
        LOWORD(v1114[0]) = 259;
LABEL_1009:
        v382 = v36;
        v37 = a2 + 8;
LABEL_1010:
        sub_1C500A780(v382, v37, (llvm::Twine *)&v1112);
LABEL_1011:
        v1079 = 0;
        v41 = 1;
        goto LABEL_1442;
      case 48:
        if ((unint64_t)v1120 - 1 >= 2)
          goto LABEL_388;
        v94 = (llvm::Type *)(**(_QWORD **)(a2 + 424) + 1744);
        v95 = sub_1C500EA24(a2, (uint64_t)v94, 0, 0);
        v38 = v1089;
        if (!(_DWORD)v1120)
          goto LABEL_433;
        v96 = *(_BYTE *)(a2 + 1640) ? v35 - *(_DWORD *)v1119 : *(_DWORD *)v1119;
        v97 = sub_1C500EF80(a2, v96, v94, v95);
        if (!v97)
          goto LABEL_433;
        v98 = (llvm::Value *)v97;
        if ((_DWORD)v1120 == 2)
        {
          v99 = *((unsigned int *)v1119 + 2);
          v100 = *(_QWORD *)(a2 + 1392);
          if (v99 >= (*(_QWORD *)(a2 + 1400) - v100) >> 3)
            goto LABEL_431;
          v101 = *(llvm::BasicBlock **)(v100 + 8 * v99);
          if (!v101)
            goto LABEL_431;
        }
        else
        {
          v101 = 0;
        }
        if (v101)
          v818 = 2;
        else
          v818 = 1;
        v819 = (llvm::Value *)operator new(32 * v818 + 64);
        v820 = (llvm::Value *)((char *)v819 + 32 * v818);
        *((_DWORD *)v820 + 5) = *((_DWORD *)v820 + 5) & 0x38000000 | v818;
        do
        {
          *(_QWORD *)v819 = 0;
          *((_QWORD *)v819 + 1) = 0;
          *((_QWORD *)v819 + 2) = 0;
          *((_QWORD *)v819 + 3) = v820;
          v819 = (llvm::Value *)((char *)v819 + 32);
        }
        while (v819 != v820);
        v1079 = v820;
        llvm::CleanupReturnInst::CleanupReturnInst(v820, v98, v101, v818, 0);
        goto LABEL_1309;
      case 49:
        if ((_DWORD)v1120 != 2)
          goto LABEL_388;
        v156 = (llvm::Type *)(**(_QWORD **)(a2 + 424) + 1744);
        v157 = sub_1C500EA24(a2, (uint64_t)v156, 0, 0);
        v38 = v1089;
        if (!(_DWORD)v1120
          || (*(_BYTE *)(a2 + 1640) ? (v158 = v35 - *(_DWORD *)v1119) : (v158 = *(_DWORD *)v1119),
              (v159 = sub_1C500EF80(a2, v158, v156, v157)) == 0))
        {
LABEL_433:
          v307 = "Invalid record";
          goto LABEL_1446;
        }
        v160 = *((unsigned int *)v1119 + 2);
        v161 = *(_QWORD *)(a2 + 1392);
        if (v160 >= (*(_QWORD *)(a2 + 1400) - v161) >> 3 || (v162 = *(llvm::BasicBlock **)(v161 + 8 * v160)) == 0)
        {
LABEL_431:
          *(_QWORD *)&v1112 = "Invalid record";
          LOWORD(v1114[0]) = 259;
          v306 = v36;
          goto LABEL_432;
        }
        v163 = (llvm::Value *)v159;
        v164 = operator new(0x80uLL);
        v164[21] = v164[21] & 0x38000000 | 2;
        *(_QWORD *)v164 = 0;
        *((_QWORD *)v164 + 1) = 0;
        *((_QWORD *)v164 + 2) = 0;
        *((_QWORD *)v164 + 3) = v164 + 16;
        *((_QWORD *)v164 + 4) = 0;
        *((_QWORD *)v164 + 5) = 0;
        *((_QWORD *)v164 + 6) = 0;
        *((_QWORD *)v164 + 7) = v164 + 16;
        v1079 = (llvm::Value *)(v164 + 16);
        llvm::CatchReturnInst::CatchReturnInst((llvm::CatchReturnInst *)(v164 + 16), v163, v162, 0);
LABEL_1309:
        v821 = *(unsigned int *)(a2 + 752);
        if (v821 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v821 + 1, 8);
          v821 = *v1072;
        }
        *(_QWORD *)(*v1073 + 8 * v821) = v1079;
        ++*v1072;
        goto LABEL_1312;
      case 50:
      case 51:
        if (v1120 <= 1)
          goto LABEL_388;
        v66 = (llvm::Type *)(**(_QWORD **)(a2 + 424) + 1744);
        v67 = sub_1C500EA24(a2, (uint64_t)v66, 0, 0);
        if ((_DWORD)v1120)
        {
          if (*(_BYTE *)(a2 + 1640))
            v68 = v35 - *(_DWORD *)v1119;
          else
            v68 = *(_DWORD *)v1119;
          v69 = sub_1C500EF80(a2, v68, v66, v67);
        }
        else
        {
          v69 = 0;
        }
        v345 = 2;
        LODWORD(v1092[0]) = 2;
        v346 = *((_DWORD *)v1119 + 2);
        v1109.n128_u64[0] = (unint64_t)v1110;
        v1109.n128_u64[1] = 0x200000000;
        if (v346)
        {
          do
          {
            v1105 = 0;
            LODWORD(v1095) = 0;
            if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1095))
              goto LABEL_523;
            v347 = v1105;
            v348 = v1109.n128_u32[2];
            if (v1109.n128_u32[2] >= (unint64_t)v1109.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1109, (uint64_t)v1110, v1109.n128_u32[2] + 1, 8);
              v348 = v1109.n128_u32[2];
            }
            *(_QWORD *)(v1109.n128_u64[0] + 8 * v348) = v347;
            v349 = ++v1109.n128_u32[2];
            --v346;
          }
          while (v346);
          v345 = (int)v1092[0];
        }
        else
        {
          v349 = 0;
        }
        if ((_DWORD)v1120 == v345)
        {
          v1082 = (uint64_t *)v1109.n128_u64[0];
          v680 = v349;
          v681 = v349 + 1;
          v682 = 32 * v681 + 64;
          v683 = v681 & 0x7FFFFFF;
          if (v43 == 51)
          {
            LOWORD(v1114[0]) = 257;
            v684 = operator new(v682);
            v685 = &v684[4 * v681];
            *((_DWORD *)v685 + 5) = *((_DWORD *)v685 + 5) & 0x38000000 | v683;
            if ((_DWORD)v681)
            {
              do
              {
                *v684 = 0;
                v684[1] = 0;
                v684[2] = 0;
                v684[3] = v685;
                v684 += 4;
              }
              while (v684 != v685);
            }
            v686 = (llvm::Instruction *)v685;
            v687 = 51;
          }
          else
          {
            LOWORD(v1114[0]) = 257;
            v767 = operator new(v682);
            v685 = &v767[4 * v681];
            *((_DWORD *)v685 + 5) = *((_DWORD *)v685 + 5) & 0x38000000 | v683;
            if ((_DWORD)v681)
            {
              do
              {
                *v767 = 0;
                v767[1] = 0;
                v767[2] = 0;
                v767[3] = v685;
                v767 += 4;
              }
              while (v767 != v685);
            }
            v686 = (llvm::Instruction *)v685;
            v687 = 52;
          }
          llvm::FuncletPadInst::FuncletPadInst(v686, v687, v69, v1082, v680, v681, (uint64_t)&v1112, 0);
          v38 = v1089;
          v1099 = sub_1C500EA24(a2, *v685, 0, 0);
          v768 = *(unsigned int *)(a2 + 752);
          v37 = a2 + 8;
          if (v768 >= *(unsigned int *)(a2 + 756))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v768 + 1, 8);
            v768 = *v1072;
          }
          v1079 = (llvm::Value *)v685;
          *(_QWORD *)(*v1073 + 8 * v768) = v685;
          goto LABEL_1193;
        }
LABEL_523:
        *(_QWORD *)&v1112 = "Invalid record";
        LOWORD(v1114[0]) = 259;
        v364 = v36;
        goto LABEL_524;
      case 52:
        if (v1120 <= 1)
          goto LABEL_388;
        v102 = (llvm::Type *)(**(_QWORD **)(a2 + 424) + 1744);
        v103 = sub_1C500EA24(a2, (uint64_t)v102, 0, 0);
        v38 = v1089;
        if ((_DWORD)v1120)
        {
          if (*(_BYTE *)(a2 + 1640))
            v104 = v35 - *(_DWORD *)v1119;
          else
            v104 = *(_DWORD *)v1119;
          v105 = sub_1C500EF80(a2, v104, v102, v103);
        }
        else
        {
          v105 = 0;
        }
        v471 = *((_DWORD *)v1119 + 2);
        v1109.n128_u64[0] = (unint64_t)v1110;
        v1109.n128_u64[1] = 0x200000000;
        if (v471)
        {
          v472 = 0;
          for (m = 0; m != v471; ++m)
          {
            v474 = LODWORD(v1119[m + 2]);
            v475 = *(_QWORD *)(a2 + 1392);
            if (v474 >= (*(_QWORD *)(a2 + 1400) - v475) >> 3)
              goto LABEL_828;
            v476 = *(_QWORD *)(v475 + 8 * v474);
            if (!v476)
              goto LABEL_828;
            if (v472 >= v1109.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1109, (uint64_t)v1110, v472 + 1, 8);
              v472 = v1109.n128_u32[2];
            }
            *(_QWORD *)(v1109.n128_u64[0] + 8 * v472) = v476;
            v472 = ++v1109.n128_u32[2];
          }
          v534 = m + 2;
        }
        else
        {
          v534 = 2;
        }
        v535 = v534 + 1;
        if ((_DWORD)v1120 == v534 + 1)
        {
          v536 = LODWORD(v1119[v534]);
          v537 = *(_QWORD *)(a2 + 1392);
          if (v536 >= (*(_QWORD *)(a2 + 1400) - v537) >> 3)
            goto LABEL_828;
          v538 = *(llvm::BasicBlock **)(v537 + 8 * v536);
          if (!v538)
            goto LABEL_828;
          v534 = v535;
        }
        else
        {
          v538 = 0;
        }
        if ((_DWORD)v1120 == v534)
        {
          LOWORD(v1114[0]) = 257;
          v822 = operator new(0x48uLL);
          v823 = (llvm::CatchSwitchInst *)(v822 + 2);
          v822[7] = v822[7] & 0x38000000 | 0x40000000;
          *(_QWORD *)v822 = 0;
          llvm::CatchSwitchInst::CatchSwitchInst((llvm::CatchSwitchInst *)(v822 + 2), v105, v538, v471, (const llvm::Twine *)&v1112, 0);
          if (v1109.n128_u32[2])
          {
            v824 = (llvm::BasicBlock **)v1109.n128_u64[0];
            v825 = 8 * v1109.n128_u32[2];
            do
            {
              v826 = *v824++;
              llvm::CatchSwitchInst::addHandler(v823, v826);
              v825 -= 8;
            }
            while (v825);
          }
          v1079 = v823;
          v1099 = sub_1C500EA24(a2, *(_QWORD *)v823, 0, 0);
          v827 = *(unsigned int *)(a2 + 752);
          if (v827 >= *(unsigned int *)(a2 + 756))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v827 + 1, 8);
            v827 = *v1072;
          }
          v37 = a2 + 8;
          *(_QWORD *)(*v1073 + 8 * v827) = v1079;
          ++*v1072;
          v41 = 9;
          v36 = v1077;
          v38 = v1089;
LABEL_829:
          v365 = (__int128 *)v1109.n128_u64[0];
          if ((_QWORD *)v1109.n128_u64[0] != v1110)
            goto LABEL_1102;
          goto LABEL_1442;
        }
LABEL_828:
        *(_QWORD *)&v1112 = "Invalid record";
        LOWORD(v1114[0]) = 259;
        sub_1C500A780(v36, v37, (llvm::Twine *)&v1112);
        v1079 = 0;
        v41 = 1;
        goto LABEL_829;
      case 55:
        if (!(_DWORD)v1120
          || (v108 = (unint64_t)*v1119,
              v109 = *(_QWORD *)(a2 + 1704),
              (unint64_t)*v1119 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 1712) - v109) >> 3)))
        {
LABEL_388:
          v288 = "Invalid record";
LABEL_389:
          *(_QWORD *)&v1112 = v288;
LABEL_424:
          LOWORD(v1114[0]) = 259;
          v305 = v36;
LABEL_425:
          sub_1C500A780(v305, v37, (llvm::Twine *)&v1112);
          v41 = 1;
          v38 = v1089;
          goto LABEL_62;
        }
        v1109 = 0uLL;
        v1110[0] = 0;
        LODWORD(v1092[0]) = 1;
        v38 = v1089;
        if ((_DWORD)v1120 == 1)
          goto LABEL_183;
        v110 = 0;
        while (1)
        {
          v1105 = 0;
          LODWORD(v1095) = 0;
          if (sub_1C500E658(a2, (uint64_t *)&v1119, v1092, v35, (llvm::Type ***)&v1105, (int *)&v1095))
            break;
          if ((unint64_t)v110 >= v1110[0])
          {
            v112 = v1109.n128_u64[0];
            v113 = (uint64_t)((uint64_t)v110 - v1109.n128_u64[0]) >> 3;
            v114 = v113 + 1;
            if ((unint64_t)(v113 + 1) >> 61)
              goto LABEL_1782;
            v115 = v1110[0] - v1109.n128_u64[0];
            if ((uint64_t)(v1110[0] - v1109.n128_u64[0]) >> 2 > v114)
              v114 = v115 >> 2;
            if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
              v116 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v116 = v114;
            if (v116)
            {
              if (v116 >> 61)
                goto LABEL_1783;
              v117 = (char *)operator new(8 * v116);
            }
            else
            {
              v117 = 0;
            }
            v118 = (uint64_t *)&v117[8 * v113];
            *v118 = v1105;
            v111 = (unint64_t)(v118 + 1);
            if (v110 != (_QWORD *)v112)
            {
              do
              {
                v119 = *--v110;
                *--v118 = v119;
              }
              while (v110 != (_QWORD *)v112);
              v110 = (_QWORD *)v1109.n128_u64[0];
            }
            v1109.n128_u64[0] = (unint64_t)v118;
            v1109.n128_u64[1] = v111;
            v1110[0] = &v117[8 * v116];
            if (v110)
              operator delete(v110);
            v35 = *(_QWORD *)v1088;
          }
          else
          {
            *v110 = v1105;
            v111 = (unint64_t)(v110 + 1);
          }
          v1109.n128_u64[1] = v111;
          v110 = (_QWORD *)v111;
          if ((_DWORD)v1120 == LODWORD(v1092[0]))
          {
            v108 = (unint64_t)*v1119;
            v109 = *(_QWORD *)(a2 + 1704);
LABEL_183:
            sub_1C61D0A64(&v1100, (__int128 *)(v109 + 24 * v108), &v1109);
            v41 = 4;
LABEL_534:
            if (v1109.n128_u64[0])
              operator delete((void *)v1109.n128_u64[0]);
            goto LABEL_62;
          }
        }
        *(_QWORD *)&v1112 = "Invalid record";
        LOWORD(v1114[0]) = 259;
        sub_1C500A780(v36, v37, (llvm::Twine *)&v1112);
        v41 = 1;
        goto LABEL_534;
      case 56:
        LODWORD(v1105) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1092[0]) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092))
          goto LABEL_418;
        v205 = v1105 + 1;
        if (v1120 < (int)v1105 + 1)
          goto LABEL_418;
        v206 = (uint64_t *)v1109.n128_u64[0];
        v207 = sub_1C500E764((int)v1119[v1105], *(_QWORD *)v1109.n128_u64[0]);
        v38 = v1089;
        if (v207 == -1)
          goto LABEL_551;
        LOWORD(v1114[0]) = 257;
        v208 = llvm::UnaryOperator::Create(v207, v206, (uint64_t)&v1112, 0);
        v1099 = v1092[0];
        v209 = *(unsigned int *)(a2 + 752);
        if (v209 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v209 + 1, 8);
          v209 = *v1072;
        }
        *(_QWORD *)(*v1073 + 8 * v209) = v208;
        ++*v1072;
        v1079 = (llvm::Value *)v208;
        if (v1120 > v205 && sub_1C4774A9C(v208))
        {
          v210 = v1119[v205] & 0x7E | (v1119[v205] >> 7) & 1 | -(v1119[v205] & 1);
          if (v210)
            *(_BYTE *)(v208 + 17) |= 2 * (_BYTE)v210;
        }
        goto LABEL_1390;
      case 57:
        v106 = (*(_DWORD *)v1119 - 1);
        v107 = *(_QWORD *)(a2 + 1344);
        if (v106 >= (*(_QWORD *)(a2 + 1352) - v107) >> 3)
          v1059 = 0;
        else
          v1059 = *(llvm::Type **)(v107 + 8 * v106);
        v322 = *((unsigned int *)v1119 + 4);
        v323 = *(_QWORD *)(a2 + 1392);
        if (v322 >= (*(_QWORD *)(a2 + 1400) - v323) >> 3)
          v1080 = 0;
        else
          v1080 = *(llvm::Value **)(v323 + 8 * v322);
        v324 = v1119[1];
        v325 = *((_DWORD *)v1119 + 6);
        *(_QWORD *)&v1112 = &v1113;
        *((_QWORD *)&v1112 + 1) = 0x1000000000;
        if (v325)
        {
          v326 = 0;
          for (n = 0; n != v325; ++n)
          {
            v328 = LODWORD(v1119[n + 4]);
            v329 = *(_QWORD *)(a2 + 1392);
            if (v328 >= (*(_QWORD *)(a2 + 1400) - v329) >> 3)
              v330 = 0;
            else
              v330 = *(_QWORD *)(v329 + 8 * v328);
            if (v326 >= HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1112, (uint64_t)&v1113, v326 + 1, 8);
              v326 = DWORD2(v1112);
            }
            *(_QWORD *)(v1112 + 8 * v326) = v330;
            v326 = ++DWORD2(v1112);
          }
          v331 = n + 4;
          v35 = *(_QWORD *)v1088;
        }
        else
        {
          v331 = 4;
        }
        v1096 = v331;
        if (((unsigned __int16)v324 & 0x8000) != 0)
        {
          v1096 = v331 + 1;
          v351 = v1119[v331];
          v352 = sub_1C500E8C8((_QWORD *)a2, v351);
          if (!v352 || (v350 = v352, *(_BYTE *)(v352 + 8) != 14))
          {
            v354 = "Explicit call type is not a function type";
            goto LABEL_1099;
          }
        }
        else
        {
          v350 = 0;
          LODWORD(v351) = -1;
        }
        v1095 = 0;
        v1094 = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1096, v35, &v1095, &v1094))
        {
          v354 = "Invalid record";
LABEL_1099:
          v1109.n128_u64[0] = (unint64_t)v354;
          v1111 = 259;
          v36 = v1077;
          v37 = a2 + 8;
          sub_1C500A780(v1077, v1087, (llvm::Twine *)&v1109);
          v1079 = 0;
          v41 = 1;
          v38 = v1089;
          goto LABEL_1100;
        }
        v360 = v1095;
        v361 = *v1095;
        if (!*v1095 || *((_BYTE *)v361 + 8) != 15)
        {
          v354 = "Callee is not a pointer type";
          goto LABEL_1099;
        }
        if (v350)
        {
          v362 = *((_QWORD *)v361 + 3);
          if (v362)
            v363 = v362 == v350;
          else
            v363 = 1;
          if (!v363)
          {
            v354 = "Explicit call type does not match pointee type of callee operand";
            goto LABEL_1099;
          }
        }
        else
        {
          v655 = *(_QWORD *)(a2 + 544);
          v656 = *(unsigned int *)(a2 + 560);
          v657 = sub_1C4E341F8(v655, *(_DWORD *)(a2 + 560), v1094);
          if ((int *)(v655 + 32 * v656) == v657 || !v657[4])
            LODWORD(v351) = -1;
          else
            LODWORD(v351) = **((_DWORD **)v657 + 1);
          v706 = sub_1C500E8C8((_QWORD *)a2, v351);
          if (!v706 || (v350 = v706, *(_BYTE *)(v706 + 8) != 14))
          {
            v354 = "Callee is not of pointer to function type";
            goto LABEL_1099;
          }
        }
        v707 = v1120;
        v708 = *(_DWORD *)(v350 + 12) - 1;
        v709 = v1096;
        if (v1120 < v708 + v1096)
        {
          v354 = "Insufficient operands to call";
          goto LABEL_1099;
        }
        v1045 = (uint64_t)v360;
        v1109.n128_u64[0] = (unint64_t)v1110;
        v1109.n128_u64[1] = 0x1000000000;
        v1105 = (uint64_t)v1107;
        v1106 = 0x1000000000;
        if (!v708)
          goto LABEL_1391;
        v711 = v1096;
        v1054 = -(uint64_t)v708;
        v712 = 1;
        do
        {
          v713 = *(_QWORD *)(a2 + 544);
          v714 = *(unsigned int *)(a2 + 560);
          v715 = sub_1C4E341F8(v713, *(_DWORD *)(a2 + 560), (int)v351);
          if ((int *)(v713 + 32 * v714) == v715)
          {
            v717 = -1;
            v716 = v711;
          }
          else
          {
            v716 = v711;
            if (v712 >= v715[4])
              v717 = -1;
            else
              v717 = *(_DWORD *)(*((_QWORD *)v715 + 1) + 4 * v712);
          }
          v718 = v716 + v712 - 1;
          v719 = *(llvm::Type **)(*(_QWORD *)(v350 + 16) + 8 * v712);
          if (*((_BYTE *)v719 + 8) == 8)
          {
            v720 = LODWORD(v1119[(v716 + v712 - 1)]);
            v721 = *(_QWORD *)(a2 + 1392);
            if (v720 >= (*(_QWORD *)(a2 + 1400) - v721) >> 3)
              goto LABEL_1266;
            v722 = *(llvm::Type ***)(v721 + 8 * v720);
          }
          else
          {
            if (v718 == (_DWORD)v1120)
              goto LABEL_1266;
            v723 = v1119[v718];
            if (*(_BYTE *)(a2 + 1640))
              v724 = v35 - (_DWORD)v723;
            else
              v724 = v723;
            v722 = sub_1C500EF80(a2, v724, v719, v717);
          }
          if (!v722)
          {
LABEL_1266:
            v1096 = v711 + v712 - 1;
            v1092[0] = (llvm::Type **)"Invalid record";
            v1093 = 259;
            v36 = v1077;
            v37 = a2 + 8;
            sub_1C500A780(v1077, v1087, (llvm::Twine *)v1092);
            v1079 = 0;
            v41 = 1;
            goto LABEL_1402;
          }
          v725 = v1109.n128_u32[2];
          if (v1109.n128_u32[2] >= (unint64_t)v1109.n128_u32[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1109, (uint64_t)v1110, v1109.n128_u32[2] + 1, 8);
            v725 = v1109.n128_u32[2];
          }
          *(_QWORD *)(v1109.n128_u64[0] + 8 * v725) = v722;
          ++v1109.n128_u32[2];
          v726 = v1106;
          if (v1106 >= (unint64_t)HIDWORD(v1106))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1105, (uint64_t)v1107, v1106 + 1, 4);
            v726 = v1106;
          }
          *(_DWORD *)(v1105 + 4 * v726) = v717;
          LODWORD(v1106) = v1106 + 1;
          ++v712;
        }
        while (v1054 + v712 != 1);
        v707 = v1120;
        v709 = v711 + v712 - 1;
LABEL_1391:
        v1096 = v709;
        if (*(_DWORD *)(v350 + 8) < 0x100u)
        {
          if (v707 != v709)
            goto LABEL_1401;
        }
        else if (v707 != v709)
        {
          while (1)
          {
            v1091 = 0;
            v1090 = 0;
            if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1096, v35, &v1091, &v1090))
              break;
            v863 = v1091;
            v864 = v1109.n128_u32[2];
            if (v1109.n128_u32[2] >= (unint64_t)v1109.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1109, (uint64_t)v1110, v1109.n128_u32[2] + 1, 8);
              v864 = v1109.n128_u32[2];
            }
            *(_QWORD *)(v1109.n128_u64[0] + 8 * v864) = v863;
            ++v1109.n128_u32[2];
            v865 = v1090;
            v866 = v1106;
            if (v1106 >= (unint64_t)HIDWORD(v1106))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1105, (uint64_t)v1107, v1106 + 1, 4);
              v866 = v1106;
            }
            *(_DWORD *)(v1105 + 4 * v866) = v865;
            LODWORD(v1106) = v1106 + 1;
            if ((_DWORD)v1120 == v1096)
              goto LABEL_1561;
          }
LABEL_1401:
          v1092[0] = (llvm::Type **)"Invalid record";
          v1093 = 259;
          v36 = v1077;
          v37 = a2 + 8;
          sub_1C500A780(v1077, v1087, (llvm::Twine *)v1092);
          v1079 = 0;
          v41 = 1;
LABEL_1402:
          v38 = v1089;
          if ((_BYTE *)v1105 != v1107)
            free((void *)v1105);
          v867 = (void *)v1109.n128_u64[0];
          if ((_QWORD *)v1109.n128_u64[0] != v1110)
            goto LABEL_1419;
          goto LABEL_1100;
        }
LABEL_1561:
        v921 = v1100;
        v922 = v1100;
        if (v1100 != v1101)
        {
          llvm::UpgradeOperandBundles(&v1100);
          v922 = v1100;
          v921 = v1101;
        }
        v1093 = 257;
        v1079 = (llvm::Value *)sub_1C61CC41C(v350, v1045, (uint64_t)v1080, v1112, SDWORD2(v1112), (uint64_t *)v1109.n128_u64[0], v1109.n128_u32[2], v353, v922, 0xAAAAAAAAAAAAAAABLL * ((v921 - v922) >> 4), (uint64_t)v1092, 0);
        v923 = *(_QWORD *)(a2 + 544);
        v924 = *(unsigned int *)(a2 + 560);
        v925 = sub_1C4E341F8(v923, *(_DWORD *)(a2 + 560), (int)v351);
        if ((int *)(v923 + 32 * v924) == v925 || !v925[4])
          v926 = -1;
        else
          v926 = **((_DWORD **)v925 + 1);
        v1099 = v926;
        v958 = v1100;
        for (ii = v1101; ii != v958; ii -= 48)
        {
          v960 = *(void **)(ii - 24);
          if (v960)
          {
            *(_QWORD *)(ii - 16) = v960;
            operator delete(v960);
          }
          if (*(char *)(ii - 25) < 0)
            operator delete(*(void **)(ii - 48));
        }
        v1101 = v958;
        v961 = *(unsigned int *)(a2 + 752);
        if (v961 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v961 + 1, 8);
          v961 = *v1072;
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 744) + 8 * v961) = v1079;
        ++*(_DWORD *)(a2 + 752);
        *((_WORD *)v1079 + 9) = *((_WORD *)v1079 + 9) & 0xF003 | (2 * (_WORD)v324) & 0xFFC;
        *((_QWORD *)v1079 + 8) = v1059;
        sub_1C500F0B8(v1077, a2, (uint64_t)v1079, v1105);
        if (*v1077)
        {
          llvm::Value::deleteValue(v1079);
          v41 = 1;
        }
        else
        {
          v41 = 9;
        }
        v36 = v1077;
        v37 = a2 + 8;
        v35 = *(_QWORD *)v1088;
        goto LABEL_1402;
      case 58:
        LODWORD(v1105) = 0;
        v1109.n128_u64[0] = 0;
        LODWORD(v1092[0]) = 0;
        if (sub_1C500E658(a2, (uint64_t *)&v1119, &v1105, v35, (llvm::Type ***)&v1109, (int *)v1092))
          goto LABEL_418;
        v38 = v1089;
        if ((_DWORD)v1120 != (_DWORD)v1105)
          goto LABEL_551;
        v342 = operator new(0x60uLL);
        v343 = (llvm::Value *)(v342 + 8);
        v342[13] = v342[13] & 0x38000000 | 1;
        *(_QWORD *)v342 = 0;
        *((_QWORD *)v342 + 1) = 0;
        *((_QWORD *)v342 + 2) = 0;
        *((_QWORD *)v342 + 3) = v342 + 8;
        LOWORD(v1114[0]) = 257;
        llvm::FreezeInst::FreezeInst((uint64_t)(v342 + 8), v1109.n128_u64[0], (uint64_t)&v1112, 0);
        v1099 = v1092[0];
        v344 = *(unsigned int *)(a2 + 752);
        if (v344 >= *(unsigned int *)(a2 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1073, v1068, v344 + 1, 8);
          v344 = *v1072;
        }
        goto LABEL_1387;
      case 60:
        if ((_DWORD)v1120)
        {
          v289 = v1119;
          v290 = &v1119[v1120];
          v38 = v1089;
          while (1)
          {
            v291 = *(_QWORD *)(*v1078 + 32 * *(unsigned int *)v289 + 16);
            if (v291)
              v292 = *(_BYTE *)(v291 + 16) == 0;
            else
              v292 = 0;
            if (!v292)
            {
              *(_QWORD *)&v1112 = "Invalid record";
              LOWORD(v1114[0]) = 259;
LABEL_833:
              v306 = v36;
              v37 = a2 + 8;
LABEL_432:
              sub_1C500A780(v306, v37, (llvm::Twine *)&v1112);
              v41 = 1;
              goto LABEL_62;
            }
            v293 = *(_QWORD **)(a2 + 1624);
            v294 = *(_QWORD *)(a2 + 1632);
            if ((unint64_t)v293 >= v294)
            {
              v296 = *(_QWORD **)(a2 + 1616);
              v297 = v293 - v296;
              v298 = v297 + 1;
              if ((unint64_t)(v297 + 1) >> 61)
LABEL_1782:
                abort();
              v299 = v294 - (_QWORD)v296;
              if (v299 >> 2 > v298)
                v298 = v299 >> 2;
              if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFF8)
                v300 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v300 = v298;
              if (v300)
              {
                if (v300 >> 61)
LABEL_1783:
                  sub_1C4764EE4();
                v301 = (char *)operator new(8 * v300);
              }
              else
              {
                v301 = 0;
              }
              v302 = &v301[8 * v297];
              *(_QWORD *)v302 = v291;
              v295 = v302 + 8;
              if (v293 != v296)
              {
                do
                {
                  v303 = *--v293;
                  *((_QWORD *)v302 - 1) = v303;
                  v302 -= 8;
                }
                while (v293 != v296);
                v293 = *(_QWORD **)(a2 + 1616);
              }
              *(_QWORD *)(a2 + 1616) = v302;
              *(_QWORD *)(a2 + 1624) = v295;
              *(_QWORD *)(a2 + 1632) = &v301[8 * v300];
              if (v293)
                operator delete(v293);
              v35 = *(_QWORD *)v1088;
            }
            else
            {
              *v293 = v291;
              v295 = v293 + 1;
            }
            *(_QWORD *)(a2 + 1624) = v295;
            ++v289;
            v41 = 4;
            v38 = v1089;
            if (v289 == v290)
            {
              v37 = a2 + 8;
              goto LABEL_62;
            }
          }
        }
LABEL_422:
        v83 = "Invalid record";
LABEL_423:
        *(_QWORD *)&v1112 = v83;
        goto LABEL_424;
      default:
        v83 = "Invalid value";
        goto LABEL_423;
    }
  }
}

uint64_t sub_1C500A72C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result - 32);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 24);
  if (v2)
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v3 = *(_QWORD *)(result - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 16);
  }
  *(_QWORD *)(result - 32) = a2;
  v6 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)(a2 + 8);
  v5 = v6;
  *(_QWORD *)(result - 24) = v6;
  if (v6)
    *(_QWORD *)(v5 + 16) = result - 24;
  *(_QWORD *)(result - 16) = v4;
  *v4 = result - 32;
  return result;
}

void sub_1C500A780(uint64_t *a1, uint64_t a2, llvm::Twine *a3)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  void **v11;
  std::string::size_type v12;
  void *__p[2];
  uint64_t v14;
  __int16 v15;
  std::string::value_type __s[8];
  char v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;

  llvm::Twine::str(a3, &v21);
  if (*(char *)(a2 + 415) < 0)
  {
    if (!*(_QWORD *)(a2 + 400))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(a2 + 415))
  {
    goto LABEL_21;
  }
  std::operator+<char>();
  v5 = std::string::append(&v18, "' Reader: 'LLVM ");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v17 = 0;
  __s[0] = 0;
  v7 = std::string::append(&v19, __s, 0);
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v20, "')");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v14 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v14 >= 0)
    v12 = HIBYTE(v14) & 0x7F;
  else
    v12 = (std::string::size_type)__p[1];
  std::string::append(&v21, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v17 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
LABEL_21:
  v15 = 260;
  __p[0] = &v21;
  sub_1C4FFAA54((llvm::Twine *)__p, a1);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1C500A908(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[4];
  __int16 v7;

  v3 = *(_QWORD *)(a2 + 1424);
  if (*(_QWORD *)(a2 + 1416) == v3)
  {
    v6[0] = (uint64_t)"Insufficient function protos";
    v7 = 259;
    sub_1C500A780(a1, a2 + 8, (llvm::Twine *)v6);
  }
  else
  {
    v6[0] = *(_QWORD *)(v3 - 8);
    *(_QWORD *)(a2 + 1424) = v3 - 8;
    v4 = a2 + 32;
    v5 = 8 * *(_QWORD *)(a2 + 48) - *(unsigned int *)(a2 + 64);
    sub_1C500A9B4(a2 + 1496, v6)[1] = v5;
    sub_1C4FF3F30(v4, a1);
    if (!*a1)
      *a1 = 0;
  }
}

uint64_t *sub_1C500A9B4(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C500AA94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_5;
  }
  else
  {
    v7 *= 2;
  }
  sub_1C500AB28(a1, v7);
  v8 = 0;
  sub_1C500AA94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1C500AA94(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C500AB28(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C500ABE0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C500ABE0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C500AA94(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      v11 = a2[1];
      *v12 = *a2;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C500AC84(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  llvm::ConstantExpr *v7;
  _OWORD *v8;
  uint64_t v9;
  llvm::Type *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _OWORD *v17;
  llvm::ConstantExpr *v18;
  llvm::GetElementPtrInst *v19;
  unsigned int v20;
  uint64_t v21;
  llvm::Type *v22;
  llvm::FixedVectorType *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  _OWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Type *v32;
  uint64_t v33;
  _BYTE *v34;
  llvm::ConstantAggregateZero *v35;
  int v36;
  llvm::Type *v37;
  unsigned __int8 *v38;
  llvm::GlobalValue *v39;
  unint64_t v40;
  llvm::PointerType *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  std::string *v48;
  uint64_t v49;
  std::string *v50;
  uint64_t v51;
  llvm::Value *Impl;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  llvm::ConstantExpr *v57;
  std::string::size_type v58;
  uint64_t v59;
  unsigned int v60;
  std::string *v61;
  uint64_t v62;
  std::string *v63;
  uint64_t v64;
  uint64_t v65;
  llvm::Type *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  std::string::size_type v73;
  uint64_t v74;
  uint64_t v75;
  llvm::Type *v76;
  int v77;
  llvm::ConstantExpr *v78;
  unint64_t v79;
  unsigned int v80;
  llvm::Type *v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  int v85;
  llvm::Type **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t NullValue;
  int v90;
  llvm::Type *v91;
  llvm::Type **v92;
  unsigned int v93;
  llvm::Type *v94;
  llvm::Constant *v95;
  llvm::Type **v96;
  std::string::size_type v97;
  uint64_t v98;
  uint64_t v99;
  llvm::Type *v100;
  unsigned int v101;
  llvm::Type *v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  int v107;
  llvm::Constant *v108;
  unsigned int v109;
  const llvm::APInt *v110;
  std::string::size_type v111;
  llvm::UndefValue *v112;
  llvm::ConstantFP *v113;
  std::string::size_type v114;
  const llvm::APFloat *v115;
  llvm::Type *v116;
  std::string::size_type v117;
  uint64_t v118;
  llvm::ConstantExpr *v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  llvm::Type *v123;
  llvm::Type **v124;
  llvm::BasicBlock *v125;
  llvm::BlockAddress *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  llvm::ConstantExpr *v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  std::string *v134;
  uint64_t size;
  std::string *v136;
  uint64_t v137;
  int v138;
  llvm::Type *v139;
  unsigned __int8 *v140;
  llvm::GlobalValue *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _DWORD *v146;
  llvm::UndefValue *v147;
  uint64_t v148;
  llvm::ConstantExpr *v149;
  unsigned __int8 *v150;
  llvm::Type *v151;
  int v152;
  unsigned int v153;
  llvm::Type *v154;
  llvm::Type **v155;
  llvm::Type *v156;
  _DWORD *v157;
  uint64_t v158;
  llvm *v159;
  llvm::Constant *v160;
  llvm::Type **v161;
  unsigned int v162;
  unint64_t v163;
  llvm::Constant *v164;
  int v165;
  llvm::Type *v166;
  llvm::Type *v167;
  unsigned __int8 *v168;
  llvm::Type **v169;
  unsigned int v170;
  uint64_t v171;
  std::string::size_type v172;
  uint64_t v173;
  llvm::Type *v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  llvm::Type *v184;
  llvm::Type **v185;
  uint64_t v186;
  int v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  llvm::Value **String;
  unint64_t v192;
  llvm::GetElementPtrInst *v193;
  uint64_t v194;
  uint64_t v195;
  int *v196;
  uint64_t v197;
  _BYTE *v198;
  uint64_t v199;
  llvm::ConstantAggregateZero *v200;
  llvm::ConstantAggregateZero *v201;
  llvm::Type *v202;
  _BYTE *v203;
  llvm::Type *v204;
  uint64_t v205;
  uint64_t v206;
  int *v207;
  int v208;
  llvm::Value *v209;
  _OWORD *v210;
  llvm::ConstantExpr *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  llvm::Type **v221;
  unsigned int v222;
  unint64_t v223;
  llvm::Type *v224;
  unsigned int v225;
  llvm::BitcodeReaderValueList *v226;
  unsigned int v227;
  llvm::Type **v228;
  llvm::Type *v229;
  uint64_t *v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  llvm::Type *v236;
  uint64_t v237;
  llvm::ConstantAggregateZero *v238;
  llvm::ConstantAggregateZero *v239;
  llvm::Type *v240;
  void *v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  char *v247;
  llvm::Type *v248;
  uint64_t v249;
  uint64_t v250;
  int *v251;
  llvm::ConstantExpr *v252;
  int v253;
  llvm::ConstantExpr *v254;
  uint64_t ICmp;
  _OWORD *v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  llvm::Type **v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  char *v268;
  char *v269;
  char *i;
  __int128 v271;
  __int128 v272;
  _BYTE *v273;
  uint64_t v274;
  uint64_t v275;
  llvm::ConstantAggregateZero *v276;
  _BYTE *v277;
  _BYTE *v278;
  uint64_t v279;
  llvm::ConstantAggregateZero *v280;
  uint64_t v281;
  llvm::ConstantFP *v282;
  const llvm::APFloat *v283;
  std::string::size_type v284;
  std::string::size_type v285;
  std::string::size_type v286;
  llvm::ConstantFP *v287;
  const llvm::APFloat *v288;
  uint64_t v289;
  llvm::ConstantFP *v290;
  const llvm::APFloat *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  llvm::Type *v295;
  llvm::Function *v296;
  char *v297;
  char *v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  llvm::Type **v303;
  uint64_t v304;
  uint64_t v305;
  llvm::FixedVectorType ***v306;
  _QWORD **v307;
  uint64_t *v308;
  _BYTE *v309;
  uint64_t v310;
  llvm::ConstantAggregateZero *v311;
  llvm::ConstantAggregateZero *v312;
  char v313;
  _QWORD **v314;
  uint64_t v315;
  llvm::GetElementPtrInst *v316;
  const char *v317;
  _BYTE *v318;
  uint64_t v319;
  llvm::ConstantAggregateZero *v320;
  llvm::ConstantExpr *v321;
  std::string::size_type v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  _DWORD *v328;
  uint64_t v329;
  llvm::Type *v330;
  llvm::ConstantAggregateZero *v331;
  _QWORD *v332;
  char *v333;
  char **v334;
  char *v335;
  _QWORD *v336;
  char *v337;
  char *v338;
  char *v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  int64_t v350;
  char *v351;
  _QWORD *v352;
  std::string *v353;
  uint64_t v354;
  std::string *v355;
  uint64_t v356;
  llvm::Value **FP;
  void *v358;
  uint64_t v359;
  _QWORD *v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int64_t v365;
  uint64_t v366;
  unint64_t v367;
  _QWORD *v368;
  void *v369;
  __int128 v370;
  unint64_t v371;
  char *v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  _QWORD *v378;
  char *v379;
  uint64_t v380;
  unint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  unsigned int v384;
  unint64_t v385;
  char *v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  std::string::size_type v392;
  llvm::Type *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  llvm::ConstantExpr *v398;
  llvm::Type *v399;
  int v400;
  uint64_t v401;
  unsigned int v402;
  uint64_t v403;
  llvm::Type **v404;
  llvm::Type **v405;
  uint64_t **v406;
  llvm::Type *v407;
  uint64_t v408;
  llvm::Type *v409;
  int v410;
  llvm::Type **v411;
  const llvm::Value *v412;
  llvm::UndefValue *ShuffleVector;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int *v417;
  int v418;
  int v419;
  uint64_t v420;
  char *v421;
  llvm::Type *v422;
  int v423;
  uint64_t **v424;
  uint64_t v425;
  unsigned int v426;
  unsigned int v427;
  llvm::Type **ConstantFwdRef;
  llvm::Type **v429;
  BOOL v430;
  llvm::Type *v431;
  uint64_t v432;
  llvm::Type **v433;
  llvm::Type *v434;
  llvm::Constant *Select;
  const char *v436;
  char *__dst;
  char *__dsta;
  char v439;
  uint64_t v440;
  _QWORD *v441;
  llvm::ConstantExpr *v442;
  llvm::ConstantExpr *v443;
  llvm::ConstantExpr *v444;
  llvm::Type **v445;
  llvm::ConstantExpr *v446;
  char v447;
  llvm::ConstantExpr *v448;
  llvm::ConstantExpr *v449;
  _OWORD *v450;
  _OWORD *v451;
  _OWORD *v452;
  void **v453;
  void **v454;
  uint64_t v455;
  uint64_t v456;
  llvm::PointerType *v457;
  uint64_t v458;
  char *v459;
  char *v460;
  char *__p;
  char *v462;
  char *v463;
  llvm::ConstantExpr *v464;
  char *v465;
  char *v466;
  uint64_t v467;
  char *v468;
  llvm::Type *v469;
  unsigned int v470;
  unsigned int v471;
  unsigned int v472[2];
  uint64_t *v473;
  llvm::BitcodeReaderValueList *v474;
  std::string v475;
  unsigned int v476;
  std::string v477;
  __int16 v478;
  _BYTE v479[32];
  void **v480;
  uint64_t v481;
  char v482;
  void *v483;
  uint64_t v484;
  _QWORD v485[66];

  v2 = a2;
  v485[64] = *MEMORY[0x1E0C80C00];
  v4 = a2 + 32;
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 11, a1);
  if (!*a1)
  {
    v5 = v2 + 8;
    v483 = v485;
    v484 = 0x4000000000;
    v469 = (llvm::Type *)(**(_QWORD **)(v2 + 424) + 1960);
    v6 = 0;
    v7 = 0;
    v459 = 0;
    v460 = 0;
    v457 = 0;
    v458 = 0;
    __p = 0;
    v468 = 0;
    v470 = sub_1C500EA24(v2, (uint64_t)v469, 0, 0);
    v476 = v470;
    v473 = a1;
    v474 = (llvm::BitcodeReaderValueList *)(v2 + 616);
    *(_QWORD *)v472 = (*(_QWORD *)(v2 + 624) - *(_QWORD *)(v2 + 616)) >> 5;
    v8 = &v479[24];
    v455 = v2 + 1576;
    v456 = v2 + 1544;
    v453 = (void **)(v2 + 1592);
    v454 = (void **)(v2 + 1568);
    v467 = v2 + 8;
    while (1)
    {
      sub_1C4FF7B90(v4, 0, (uint64_t)v479);
      if ((v479[8] & 1) != 0)
        break;
      switch(*(_DWORD *)v479)
      {
        case 2:
          sub_1C4FF3F30(v4, (uint64_t *)&v477);
          v392 = v477.__r_.__value_.__r.__words[0];
          if ((v479[8] & 1) != 0)
          {
            v396 = *(_QWORD *)v479;
            *(_QWORD *)v479 = 0;
            if (v396)
              (*(void (**)(uint64_t))(*(_QWORD *)v396 + 8))(v396);
          }
          v5 = v467;
          if (v392)
            goto LABEL_632;
          break;
        case 0:
          *(_QWORD *)v479 = "Malformed block";
          LOWORD(v480) = 259;
          sub_1C500A780(v473, v5, (llvm::Twine *)v479);
          goto LABEL_622;
        case 1:
          v466 = v6;
          if (v6 == (char *)v7)
          {
LABEL_602:
            if (__p == v468)
            {
LABEL_616:
              if (v472[0] != ((*(_QWORD *)(v2 + 624) - *(_QWORD *)(v2 + 616)) >> 5))
              {
                v436 = "Invalid constant reference";
                goto LABEL_620;
              }
              llvm::BitcodeReaderValueList::resolveConstantForwardRefs(v474);
              *v473 = 0;
            }
            else
            {
              v421 = __p;
              while (1)
              {
                v422 = *(llvm::Type **)v421;
                v423 = *((_DWORD *)v421 + 2);
                v424 = (uint64_t **)(**(_QWORD **)(v2 + 424) + 1888);
                *(_DWORD *)v479 = 0;
                *(_DWORD *)v479 = sub_1C500EA24(v2, (uint64_t)v424, 0, 0);
                v425 = *((unsigned int *)v421 + 4);
                v426 = *((_DWORD *)v421 + 8);
                v427 = *((_DWORD *)v421 + 10);
                ConstantFwdRef = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v421 + 6), v422, v423);
                v429 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, v426, v422, v423);
                v430 = (*((_DWORD *)v422 + 2) & 0xFE) != 0x12 || v422 == 0;
                if (!v430 && v424 != **(uint64_t ****)(*(_QWORD *)v474 + 32 * v425 + 16))
                {
                  v431 = (llvm::Type *)*((unsigned int *)v422 + 8);
                  if (*((_DWORD *)v422 + 2) == 19)
                    llvm::ScalableVectorType::get(v424, v431);
                  else
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v424, v431);
                  v424 = (uint64_t **)v432;
                  *(_DWORD *)v479 = sub_1C500EA24(v2, v432, v479, 1);
                }
                v433 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, v425, (llvm::Type *)v424, *(int *)v479);
                Select = llvm::ConstantExpr::getSelect((llvm::ConstantExpr *)v433, ConstantFwdRef, v429, 0, v434);
                llvm::BitcodeReaderValueList::assignValue(v474, Select, v427, v423, v473);
                if (*v473)
                  break;
                v421 += 48;
                if (v421 == v468)
                  goto LABEL_616;
              }
            }
          }
          else
          {
            v397 = v6;
            while (1)
            {
              v398 = v7;
              v399 = *(llvm::Type **)v397;
              v400 = *((_DWORD *)v397 + 2);
              v401 = *((_QWORD *)v397 + 2);
              v402 = *((_DWORD *)v397 + 8);
              v403 = *((_QWORD *)v397 + 5);
              v471 = *((_DWORD *)v397 + 12);
              v404 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v397 + 6), *(llvm::Type **)v397, v400);
              v405 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, v402, v399, v400);
              v406 = (uint64_t **)(**(_QWORD **)(v2 + 424) + 1960);
              v407 = (llvm::Type *)*(unsigned int *)(v401 + 32);
              if (*(_BYTE *)(v401 + 8) == 19)
                llvm::ScalableVectorType::get(v406, v407);
              else
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v406, v407);
              v409 = (llvm::Type *)v408;
              v410 = sub_1C500EA24(v2, v408, (char *)&v476, 1);
              v411 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, v403, v409, v410);
              if ((llvm::ShuffleVectorInst::isValidOperands((llvm::ShuffleVectorInst *)v404, (const llvm::Value *)v405, (const llvm::Value *)v411, v412) & 1) == 0)break;
              v7 = v398;
              *(_QWORD *)v479 = &v479[16];
              *(_QWORD *)&v479[8] = 0x1000000000;
              llvm::ShuffleVectorInst::getShuffleMask((llvm::ConstantDataSequential *)v411, (uint64_t)v479);
              ShuffleVector = llvm::ConstantExpr::getShuffleVector((llvm *)v404, (llvm *)v405, *(int **)v479, *(unsigned int *)&v479[8], 0);
              v414 = *(_QWORD *)ShuffleVector;
              v415 = *(_QWORD *)(v2 + 544);
              v416 = *(unsigned int *)(v2 + 560);
              v417 = sub_1C4E341F8(v415, *(_DWORD *)(v2 + 560), v400);
              if ((int *)(v415 + 32 * v416) == v417 || !v417[4])
                v418 = -1;
              else
                v418 = **((_DWORD **)v417 + 1);
              v6 = v466;
              LODWORD(v477.__r_.__value_.__l.__data_) = v418;
              v419 = sub_1C500EA24(v2, v414, (char *)&v477, 1);
              llvm::BitcodeReaderValueList::assignValue(v474, ShuffleVector, v471, v419, v473);
              v420 = *v473;
              if (*(_BYTE **)v479 != &v479[16])
                free(*(void **)v479);
              if (v420)
                goto LABEL_622;
              v397 += 56;
              if (v397 == (char *)v398)
                goto LABEL_602;
            }
            v436 = "Invalid shufflevector operands";
LABEL_620:
            *(_QWORD *)v479 = v436;
            LOWORD(v480) = 259;
            sub_1C500A780(v473, v467, (llvm::Twine *)v479);
          }
          v6 = v466;
          goto LABEL_622;
        default:
          LODWORD(v484) = 0;
          v9 = **(_QWORD **)(v2 + 424);
          llvm::BitstreamCursor::readRecord(v4, *(int *)&v479[4], (uint64_t)&v483, 0, (uint64_t)&v481);
          if ((v482 & 1) != 0)
          {
            v13 = v481;
            v481 = 0;
            *v473 = v13;
          }
          else
          {
            v11 = v481;
            switch((int)v481)
            {
              case 1:
                if ((_DWORD)v484
                  && (v97 = *(_QWORD *)v483,
                      v98 = *(_QWORD *)(v2 + 520),
                      *(_QWORD *)v483 < (unint64_t)((*(_QWORD *)(v2 + 528) - v98) >> 3))
                  && (v99 = *(_QWORD *)(v98 + 8 * v97)) != 0)
                {
                  if (v99 != v9 + 1576)
                  {
                    v469 = *(llvm::Type **)(v98 + 8 * v97);
                    v457 = (llvm::PointerType *)sub_1C500FA10(v2, v97);
                    v53 = 2;
                    v470 = v97;
                    goto LABEL_401;
                  }
                  v12 = "Invalid constant type";
                }
                else
                {
                  v12 = "Invalid settype record";
                }
                goto LABEL_399;
              case 2:
                v108 = v469;
                v109 = *((unsigned __int8 *)v469 + 8);
                if (v109 <= 0xE && ((1 << v109) & 0x4180) != 0
                  || v109 == 21
                  && (llvm::TargetExtType::getLayoutType(v469), v108 = v469, (v10 & 1) == 0))
                {
                  v12 = "Invalid type for a constant null value";
                  goto LABEL_399;
                }
                NullValue = (uint64_t)llvm::Constant::getNullValue(v108, v10);
                goto LABEL_332;
              case 4:
                if (*((_BYTE *)v469 + 8) != 13 || !(_DWORD)v484)
                {
                  v12 = "Invalid integer const record";
                  goto LABEL_399;
                }
                v73 = *(_QWORD *)v483;
                if ((*(_QWORD *)v483 & 1) != 0)
                {
                  if (v73 == 1)
                    v74 = 0x8000000000000000;
                  else
                    v74 = -(uint64_t)(v73 >> 1);
                }
                else
                {
                  v74 = v73 >> 1;
                }
                NullValue = (uint64_t)llvm::ConstantInt::get(v469, v74, 0);
                goto LABEL_332;
              case 5:
                if (*((_DWORD *)v469 + 2) != 13 || !(_DWORD)v484)
                {
                  v12 = "Invalid wide integer const record";
                  goto LABEL_399;
                }
                llvm::readWideAPInt((unint64_t *)v483, v484, *((_DWORD *)v469 + 2) >> 8, (unsigned int *)v479);
                Impl = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v2 + 424), (llvm::LLVMContext *)v479, v110);
                if (*(_DWORD *)&v479[8] >= 0x41u)
                {
                  v111 = *(_QWORD *)v479;
                  if (*(_QWORD *)v479)
LABEL_394:
                    MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
                }
                goto LABEL_333;
              case 6:
                if ((_DWORD)v484)
                {
                  v112 = v469;
                  switch(*((_BYTE *)v469 + 8))
                  {
                    case 0:
                      v113 = *(llvm::ConstantFP **)(v2 + 424);
                      v114 = *(unsigned __int16 *)v483;
                      LODWORD(v477.__r_.__value_.__r.__words[1]) = 16;
                      v477.__r_.__value_.__r.__words[0] = v114;
                      llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v479[8], (const llvm::APInt **)&v477);
                      goto LABEL_386;
                    case 1:
                      v113 = *(llvm::ConstantFP **)(v2 + 424);
                      v286 = *(unsigned __int16 *)v483;
                      LODWORD(v477.__r_.__value_.__r.__words[1]) = 16;
                      v477.__r_.__value_.__r.__words[0] = v286;
                      llvm::detail::IEEEFloat::initFromBFloatAPInt((llvm::detail::IEEEFloat *)&v479[8], (const llvm::APInt **)&v477);
                      goto LABEL_386;
                    case 2:
                      v113 = *(llvm::ConstantFP **)(v2 + 424);
                      v284 = *(unsigned int *)v483;
                      LODWORD(v477.__r_.__value_.__r.__words[1]) = 32;
                      v477.__r_.__value_.__r.__words[0] = v284;
                      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v479[8], (const llvm::APInt **)&v477);
                      goto LABEL_386;
                    case 3:
                      v113 = *(llvm::ConstantFP **)(v2 + 424);
                      v285 = *(_QWORD *)v483;
                      LODWORD(v477.__r_.__value_.__r.__words[1]) = 64;
                      v477.__r_.__value_.__r.__words[0] = v285;
                      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v479[8], (const llvm::APInt **)&v477);
LABEL_386:
                      Impl = llvm::ConstantFP::get(v113, (llvm::LLVMContext *)v479, v115);
                      if (*(_UNKNOWN **)&v479[8] == &unk_1C866F1C0)
                      {
                        sub_1C4773C74((uint64_t *)&v479[16]);
                        goto LABEL_333;
                      }
                      if ((*(_DWORD *)(*(_QWORD *)&v479[8] + 8) - 64) > 0xFFFFFF7F)
                        goto LABEL_333;
                      v111 = *(_QWORD *)&v479[16];
                      if (!*(_QWORD *)&v479[16])
                        goto LABEL_333;
                      goto LABEL_394;
                    case 4:
                      v477.__r_.__value_.__r.__words[0] = *((unsigned __int16 *)v483 + 4) | (*(_QWORD *)v483 << 16);
                      v477.__r_.__value_.__l.__size_ = *((unsigned __int16 *)v483 + 3);
                      v282 = *(llvm::ConstantFP **)(v2 + 424);
                      LODWORD(v475.__r_.__value_.__r.__words[1]) = 80;
                      llvm::APInt::initFromArray((unsigned int *)&v475, (uint64_t *)&v477, 2u);
                      llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt((int **)&v479[8], (const llvm::APInt **)&v475);
                      Impl = llvm::ConstantFP::get(v282, (llvm::LLVMContext *)v479, v283);
                      if (*(_UNKNOWN **)&v479[8] == &unk_1C866F1C0)
                      {
                        sub_1C4773C74((uint64_t *)&v479[16]);
                      }
                      else if ((*(_DWORD *)(*(_QWORD *)&v479[8] + 8) - 64) <= 0xFFFFFF7F
                             && *(_QWORD *)&v479[16])
                      {
                        MEMORY[0x1CAA32F9C](*(_QWORD *)&v479[16], 0x1000C8000313F17);
                      }
                      if (LODWORD(v475.__r_.__value_.__r.__words[1]) >= 0x41)
                      {
                        v111 = v475.__r_.__value_.__r.__words[0];
                        if (v475.__r_.__value_.__r.__words[0])
                          goto LABEL_394;
                      }
                      goto LABEL_333;
                    case 5:
                      v287 = *(llvm::ConstantFP **)(v2 + 424);
                      LODWORD(v477.__r_.__value_.__r.__words[1]) = 128;
                      llvm::APInt::initFromArray((unsigned int *)&v477, (uint64_t *)v483, v484);
                      llvm::detail::IEEEFloat::initFromQuadrupleAPInt((int **)&v479[8], (const llvm::APInt **)&v477);
                      Impl = llvm::ConstantFP::get(v287, (llvm::LLVMContext *)v479, v288);
                      v289 = *(_QWORD *)&v479[8];
                      if (*(_UNKNOWN **)&v479[8] != &unk_1C866F1C0)
                        goto LABEL_391;
                      goto LABEL_396;
                    case 6:
                      v290 = *(llvm::ConstantFP **)(v2 + 424);
                      LODWORD(v477.__r_.__value_.__r.__words[1]) = 128;
                      llvm::APInt::initFromArray((unsigned int *)&v477, (uint64_t *)v483, v484);
                      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v479[8], (uint64_t)&unk_1C866F1C0, (uint64_t)&v477);
                      Impl = llvm::ConstantFP::get(v290, (llvm::LLVMContext *)v479, v291);
                      v289 = *(_QWORD *)&v479[8];
                      if (*(_UNKNOWN **)&v479[8] == &unk_1C866F1C0)
                      {
LABEL_396:
                        sub_1C4773C74((uint64_t *)&v479[16]);
                      }
                      else
                      {
LABEL_391:
                        if ((*(_DWORD *)(v289 + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v479[16])
                          MEMORY[0x1CAA32F9C](*(_QWORD *)&v479[16], 0x1000C8000313F17);
                      }
                      if (LODWORD(v477.__r_.__value_.__r.__words[1]) >= 0x41)
                      {
                        v111 = v477.__r_.__value_.__r.__words[0];
                        if (v477.__r_.__value_.__r.__words[0])
                          goto LABEL_394;
                      }
                      goto LABEL_333;
                    default:
                      goto LABEL_229;
                  }
                }
                v12 = "Invalid float const record";
                goto LABEL_399;
              case 7:
                v450 = v8;
                v462 = v6;
                v75 = v484;
                if (!(_DWORD)v484)
                {
                  *(_QWORD *)v479 = "Invalid aggregate record";
                  LOWORD(v480) = 259;
                  sub_1C500A780(v473, v5, (llvm::Twine *)v479);
                  v53 = 1;
                  goto LABEL_231;
                }
                *(_QWORD *)v479 = &v479[16];
                *(_QWORD *)&v479[8] = 0x1000000000;
                v76 = v469;
                v77 = *((unsigned __int8 *)v469 + 8);
                if (v77 == 16 && v469)
                {
                  v78 = v7;
                  v79 = 0;
                  do
                  {
                    v80 = *((_DWORD *)v483 + 2 * v79);
                    v81 = *(llvm::Type **)(*((_QWORD *)v76 + 2) + 8 * v79);
                    v82 = *(_QWORD *)(v2 + 544);
                    v83 = *(unsigned int *)(v2 + 560);
                    v84 = sub_1C4E341F8(v82, *(_DWORD *)(v2 + 560), v470);
                    if ((int *)(v82 + 32 * v83) == v84 || v79 >= v84[4])
                      v85 = -1;
                    else
                      v85 = *(_DWORD *)(*((_QWORD *)v84 + 1) + 4 * v79);
                    v5 = v467;
                    v86 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, v80, v81, v85);
                    v87 = *(unsigned int *)&v479[8];
                    if (*(unsigned int *)&v479[8] >= (unint64_t)*(unsigned int *)&v479[12])
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v479, (uint64_t)&v479[16], *(unsigned int *)&v479[8] + 1, 8);
                      v87 = *(unsigned int *)&v479[8];
                    }
                    *(_QWORD *)(*(_QWORD *)v479 + 8 * v87) = v86;
                    v88 = ++*(_DWORD *)&v479[8];
                    ++v79;
                    v76 = v469;
                  }
                  while (v75 != v79);
                  v209 = llvm::ConstantStruct::get(v469, *(llvm::Type **)v479, v88);
LABEL_344:
                  Impl = v209;
                  v7 = v78;
                  goto LABEL_345;
                }
                if (v77 == 17)
                {
                  v204 = (llvm::Type *)*((_QWORD *)v469 + 3);
                  v205 = *(_QWORD *)(v2 + 544);
                  v206 = *(unsigned int *)(v2 + 560);
                  v207 = sub_1C4E341F8(v205, *(_DWORD *)(v2 + 560), v470);
                  if ((int *)(v205 + 32 * v206) == v207 || !v207[4])
                  {
                    v78 = v7;
                    v208 = -1;
                  }
                  else
                  {
                    v78 = v7;
                    v208 = **((_DWORD **)v207 + 1);
                  }
                  v259 = 0;
                  do
                  {
                    v260 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_QWORD *)v483 + v259), v204, v208);
                    v261 = *(unsigned int *)&v479[8];
                    if (*(unsigned int *)&v479[8] >= (unint64_t)*(unsigned int *)&v479[12])
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v479, (uint64_t)&v479[16], *(unsigned int *)&v479[8] + 1, 8);
                      v261 = *(unsigned int *)&v479[8];
                    }
                    *(_QWORD *)(*(_QWORD *)v479 + 8 * v261) = v260;
                    v262 = ++*(_DWORD *)&v479[8];
                    ++v259;
                  }
                  while ((_DWORD)v75 != (_DWORD)v259);
                  v209 = (llvm::Value *)llvm::ConstantArray::get(v469, *(llvm::Type **)v479, v262);
                  goto LABEL_344;
                }
                if ((v77 & 0xFE) != 0x12)
                {
                  v281 = (uint64_t)llvm::UndefValue::get(v469, v10);
LABEL_432:
                  Impl = (llvm::Value *)v281;
                  goto LABEL_345;
                }
                v248 = (llvm::Type *)*((_QWORD *)v469 + 3);
                v249 = *(_QWORD *)(v2 + 544);
                v250 = *(unsigned int *)(v2 + 560);
                v251 = sub_1C4E341F8(v249, *(_DWORD *)(v2 + 560), v470);
                if ((int *)(v249 + 32 * v250) == v251 || !v251[4])
                {
                  v252 = v7;
                  v253 = -1;
                }
                else
                {
                  v252 = v7;
                  v253 = **((_DWORD **)v251 + 1);
                }
                v302 = 0;
                do
                {
                  v303 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_QWORD *)v483 + v302), v248, v253);
                  v304 = *(unsigned int *)&v479[8];
                  if (*(unsigned int *)&v479[8] >= (unint64_t)*(unsigned int *)&v479[12])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v479, (uint64_t)&v479[16], *(unsigned int *)&v479[8] + 1, 8);
                    v304 = *(unsigned int *)&v479[8];
                  }
                  *(_QWORD *)(*(_QWORD *)v479 + 8 * v304) = v303;
                  v305 = ++*(_DWORD *)&v479[8];
                  ++v302;
                }
                while ((_DWORD)v75 != (_DWORD)v302);
                v306 = *(llvm::FixedVectorType ****)v479;
                Impl = llvm::ConstantVector::getImpl(*(llvm::FixedVectorType ****)v479, (llvm::Type *)v305);
                v7 = v252;
                if (!Impl)
                {
                  llvm::FixedVectorType::get(**v306, (llvm::Type *)v305);
                  v281 = sub_1C537B3A4(**v307 + 1288, (uint64_t)v307, v306, v305);
                  goto LABEL_432;
                }
LABEL_345:
                if (*(_BYTE **)v479 != &v479[16])
                  free(*(void **)v479);
                v6 = v462;
LABEL_348:
                v8 = v450;
                goto LABEL_333;
              case 8:
              case 9:
                v14 = v484;
                if (!(_DWORD)v484)
                {
                  v12 = "Invalid string record";
                  goto LABEL_399;
                }
                v15 = (uint64_t *)v483;
                *(_QWORD *)v479 = v8;
                *(_OWORD *)&v479[8] = xmmword_1C6612EE0;
                if (v484 < 0x11)
                {
                  v16 = 0;
                  v17 = v8;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v479, v8, v484, 1);
                  v17 = *(_OWORD **)v479;
                  v16 = *(_QWORD *)&v479[8];
                }
                v188 = (char *)v17 + v16;
                v189 = 8 * v14;
                do
                {
                  v190 = *v15++;
                  *v188++ = v190;
                  v189 -= 8;
                }
                while (v189);
                *(_QWORD *)&v479[8] += v14;
                String = llvm::ConstantDataArray::getString(*(_QWORD *)(v2 + 424), *(char **)v479, *(llvm::Type **)&v479[8], v11 == 9);
                goto LABEL_309;
              case 10:
                if (v484 <= 2)
                {
                  v12 = "Invalid binary op constexpr record";
                  goto LABEL_399;
                }
                v157 = v483;
                v147 = v469;
                v158 = sub_1C500E7B8(*(_DWORD *)v483, (uint64_t)v469);
                if ((v158 & 0x80000000) != 0)
                  goto LABEL_228;
                v159 = (llvm *)v158;
                v450 = v8;
                v445 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, v157[2], v469, v470);
                v161 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v483 + 4), v469, v470);
                if (v484 < 4)
                {
                  v439 = 0;
                  v164 = (llvm::Constant *)v445;
                }
                else
                {
                  HIDWORD(v163) = (_DWORD)v159 - 13;
                  LODWORD(v163) = (_DWORD)v159 - 13;
                  v162 = v163 >> 1;
                  if (v162 < 7 && ((0x47u >> v162) & 1) != 0)
                  {
                    v313 = 3;
                    v164 = (llvm::Constant *)v445;
                  }
                  else
                  {
                    v164 = (llvm::Constant *)v445;
                    if (((_DWORD)v159 - 19) >= 9 || ((0x183u >> ((_BYTE)v159 - 19)) & 1) == 0)
                    {
                      v439 = 0;
                      goto LABEL_442;
                    }
                    v313 = 1;
                  }
                  v439 = v313 & *((_BYTE *)v483 + 24);
                }
LABEL_442:
                Impl = llvm::ConstantFoldBinaryInstruction(v159, v164, (llvm::Constant *)v161, v160);
                if (Impl)
                  goto LABEL_333;
                v314 = *(_QWORD ***)v164;
                if (*(_QWORD *)v164)
                {
                  v477.__r_.__value_.__r.__words[0] = (std::string::size_type)v445;
                  v477.__r_.__value_.__l.__size_ = (std::string::size_type)v161;
                  v315 = **v314 + 1512;
                  v479[0] = (_BYTE)v159;
                  v479[1] = v439;
                  *(_WORD *)&v479[2] = 0;
                  *(_QWORD *)&v479[8] = &v477;
                  *(_QWORD *)&v479[16] = 2;
                  *v8 = 0u;
                  v8[1] = 0u;
                  *((_QWORD *)v8 + 4) = 0;
                  Impl = (llvm::Value *)sub_1C537D4FC(v315, (uint64_t)v314, v479);
                  v5 = v467;
                  goto LABEL_333;
                }
                Impl = 0;
LABEL_531:
                v5 = v467;
                goto LABEL_348;
              case 11:
                if (v484 <= 2)
                  goto LABEL_110;
                v152 = *(_DWORD *)v483;
                if (*(_DWORD *)v483 >= 0xDu)
                  goto LABEL_205;
                v153 = *((_DWORD *)v483 + 2);
                v154 = (llvm::Type *)sub_1C500E8C8((_QWORD *)v2, v153);
                if (!v154)
                {
LABEL_110:
                  v12 = "Invalid cast constexpr record";
                  goto LABEL_399;
                }
                v155 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v483 + 4), v154, v153);
                NullValue = (uint64_t)llvm::UpgradeBitCastExpr((llvm *)(v152 + 38), (llvm::ConstantExpr *)v155, v469, v156);
                if (!NullValue)
                  NullValue = llvm::ConstantExpr::getCast(v152 + 38);
                goto LABEL_332;
              case 12:
              case 20:
              case 24:
                if (v484 <= 1)
                {
                  v12 = "Constant GEP record must have at least two elements";
                  goto LABEL_399;
                }
                if ((_DWORD)v481 != 24 && (v484 & 1) == 0)
                {
                  v18 = v7;
                  v19 = 0;
                  v20 = 0;
LABEL_196:
                  v142 = 0;
                  LOBYTE(v143) = 0;
                  LOBYTE(v144) = v11 == 20;
                  v145 = v483;
                  goto LABEL_233;
                }
                v18 = v7;
                v19 = (llvm::GetElementPtrInst *)sub_1C500E8C8((_QWORD *)v2, *(_DWORD *)v483);
                if (v11 != 24)
                {
                  v20 = 1;
                  goto LABEL_196;
                }
                v145 = v483;
                v144 = *((_QWORD *)v483 + 1) & 1;
                v143 = *((_QWORD *)v483 + 1) >> 1;
                v458 = v143 >> 8;
                v20 = 2;
                v142 = 0x100000000;
LABEL_233:
                *(_QWORD *)v479 = &v479[16];
                *(_QWORD *)&v479[8] = 0x1000000000;
                if ((_DWORD)v484 == v20)
                  goto LABEL_234;
                v440 = v142;
                v447 = v144;
                v182 = v145[v20];
                do
                {
                  v183 = *((_QWORD *)v483 + v20);
                  v184 = (llvm::Type *)sub_1C500E8C8((_QWORD *)v2, v183);
                  if (!v184)
                  {
                    v477.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid getelementptr constexpr record";
                    v478 = 259;
                    v181 = v473;
                    v5 = v467;
                    goto LABEL_242;
                  }
                  v185 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_QWORD *)v483 + v20 + 1), v184, v183);
                  v186 = *(unsigned int *)&v479[8];
                  if (*(unsigned int *)&v479[8] >= (unint64_t)*(unsigned int *)&v479[12])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v479, (uint64_t)&v479[16], *(unsigned int *)&v479[8] + 1, 8);
                    v186 = *(unsigned int *)&v479[8];
                  }
                  *(_QWORD *)(*(_QWORD *)v479 + 8 * v186) = v185;
                  v20 += 2;
                  v187 = ++*(_DWORD *)&v479[8];
                }
                while (v20 != (_DWORD)v484);
                v5 = v467;
                if (!v187)
                {
LABEL_234:
                  v477.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid gep with no operands";
                  v478 = 259;
                  v181 = v473;
LABEL_242:
                  sub_1C500A780(v181, v5, (llvm::Twine *)&v477);
                  Impl = 0;
                  v53 = 1;
                  v7 = v18;
                }
                else
                {
                  v192 = sub_1C500E8C8((_QWORD *)v2, v182);
                  if ((*(_DWORD *)(v192 + 8) & 0xFE) == 0x12)
                  {
                    v193 = v19;
                    v194 = *(_QWORD *)(v2 + 544);
                    v195 = *(unsigned int *)(v2 + 560);
                    v196 = sub_1C4E341F8(v194, *(_DWORD *)(v2 + 560), v182);
                    if ((int *)(v194 + 32 * v195) == v196)
                    {
                      LODWORD(v182) = -1;
                      v5 = v467;
                      v19 = v193;
                    }
                    else
                    {
                      v19 = v193;
                      if (v196[4])
                        LODWORD(v182) = **((_DWORD **)v196 + 1);
                      else
                        LODWORD(v182) = -1;
                      v5 = v467;
                    }
                    v192 = sub_1C500E8C8((_QWORD *)v2, v182);
                    v7 = v18;
                    if (!v192)
                    {
LABEL_457:
                      v317 = "GEP base operand must be pointer or vector of pointer";
                      goto LABEL_458;
                    }
                    v258 = *(unsigned __int8 *)(v192 + 8);
                  }
                  else
                  {
                    v258 = *(_DWORD *)(v192 + 8);
                    v7 = v18;
                  }
                  if (v258 != 15)
                    goto LABEL_457;
                  if (v19)
                  {
                    v316 = *(llvm::GetElementPtrInst **)(v192 + 24);
                    if (v316 && v316 != v19)
                    {
                      v317 = "Explicit gep operator type does not match pointee type of pointer operand";
LABEL_458:
                      v477.__r_.__value_.__r.__words[0] = (std::string::size_type)v317;
                      v478 = 259;
                      sub_1C500A780(v473, v5, (llvm::Twine *)&v477);
                      Impl = 0;
                      v53 = 1;
                      goto LABEL_243;
                    }
                  }
                  else
                  {
                    v19 = (llvm::GetElementPtrInst *)sub_1C500FA10(v2, v182);
                    if (!v19)
                    {
                      v317 = "Missing element type for old-style constant GEP";
                      goto LABEL_458;
                    }
                  }
                  Impl = (llvm::Value *)llvm::ConstantExpr::getGetElementPtr(v19, **(uint64_t ***)v479, (llvm::Value *)(*(_QWORD *)v479 + 8), (8 * *(unsigned int *)&v479[8] - 8) >> 3, v447, v143 | (unint64_t)(v458 << 8) | v440, 0);
                  v53 = 9;
                }
LABEL_243:
                if (*(_BYTE **)v479 != &v479[16])
                  free(*(void **)v479);
LABEL_245:
                if (v53 != 9)
                  goto LABEL_401;
                goto LABEL_333;
              case 13:
                if (v484 <= 2)
                {
                  v12 = "Invalid select constexpr record";
                  goto LABEL_399;
                }
                v446 = v7;
                v172 = *(_QWORD *)v483;
                v171 = *((_QWORD *)v483 + 1);
                v173 = *((_QWORD *)v483 + 2);
                if (v468 >= v459)
                {
                  v217 = __p;
                  v218 = 0xAAAAAAAAAAAAAAABLL * ((v468 - __p) >> 4) + 1;
                  if (v218 > 0x555555555555555)
                    goto LABEL_629;
                  if (0x5555555555555556 * ((v459 - __p) >> 4) > v218)
                    v218 = 0x5555555555555556 * ((v459 - __p) >> 4);
                  if (0xAAAAAAAAAAAAAAABLL * ((v459 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                    v219 = 0x555555555555555;
                  else
                    v219 = v218;
                  if (v219)
                  {
                    if (v219 > 0x555555555555555)
                      goto LABEL_630;
                    v220 = (char *)operator new(48 * v219);
                    v217 = __p;
                  }
                  else
                  {
                    v220 = 0;
                  }
                  v268 = &v220[16 * ((v468 - __p) >> 4)];
                  v269 = v468;
                  *(_QWORD *)v268 = v469;
                  *((_DWORD *)v268 + 2) = v470;
                  *((_QWORD *)v268 + 2) = v172;
                  *((_QWORD *)v268 + 3) = v171;
                  *((_QWORD *)v268 + 4) = v173;
                  *((_DWORD *)v268 + 10) = v472[0];
                  for (i = v268; v269 != v217; v269 -= 48)
                  {
                    v271 = *((_OWORD *)v269 - 3);
                    v272 = *((_OWORD *)v269 - 1);
                    *((_OWORD *)i - 2) = *((_OWORD *)v269 - 2);
                    *((_OWORD *)i - 1) = v272;
                    *((_OWORD *)i - 3) = v271;
                    i -= 48;
                  }
                  v459 = &v220[48 * v219];
                  v468 = v268 + 48;
                  v5 = v467;
                  v7 = v446;
                  if (v217)
                    operator delete(v217);
                  __p = i;
                  v174 = v469;
                  v175 = v470;
                  v176 = v472[0];
                }
                else
                {
                  v174 = v469;
                  *(_QWORD *)v468 = v469;
                  v175 = v470;
                  *((_DWORD *)v468 + 2) = v470;
                  *((_QWORD *)v468 + 2) = v172;
                  *((_QWORD *)v468 + 3) = v171;
                  *((_QWORD *)v468 + 4) = v173;
                  v176 = v472[0];
                  *((_DWORD *)v468 + 10) = v472[0];
                  v468 += 48;
                  v7 = v446;
                }
                llvm::BitcodeReaderValueList::getConstantFwdRef(v474, v176, v174, v175);
                *(_QWORD *)v472 = v176 + 1;
                goto LABEL_424;
              case 14:
                if (v484 <= 2
                  || (v90 = *(_DWORD *)v483, (v91 = (llvm::Type *)sub_1C500E8C8((_QWORD *)v2, *(_DWORD *)v483)) == 0)
                  || (*((_DWORD *)v91 + 2) & 0xFE) != 0x12)
                {
                  v12 = "Invalid extractelement constexpr record";
                  goto LABEL_399;
                }
                v443 = v7;
                v92 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v483 + 2), v91, v90);
                v93 = *((_DWORD *)v483 + 4);
                if ((_DWORD)v484 == 4)
                {
                  v94 = (llvm::Type *)sub_1C500E8C8((_QWORD *)v2, v93);
                  if (!v94)
                    goto LABEL_397;
                  v96 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v483 + 6), v94, v93);
                }
                else
                {
                  v96 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v483 + 4), (llvm::Type *)(**(_QWORD **)(v2 + 424) + 1960), v476);
                }
                if (!v96)
                {
LABEL_397:
                  *(_QWORD *)v479 = "Invalid extractelement constexpr record";
                  LOWORD(v480) = 259;
                  sub_1C500A780(v473, v5, (llvm::Twine *)v479);
                  v53 = 1;
                  goto LABEL_401;
                }
                Impl = llvm::ConstantFoldExtractElementInstruction((llvm *)v92, (llvm::Constant *)v96, v95);
                if (!Impl)
                {
                  v393 = *v92;
                  v394 = *((_QWORD *)*v92 + 3);
                  if (v394)
                  {
                    v477.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
                    v477.__r_.__value_.__l.__size_ = (std::string::size_type)v96;
                    v395 = **(_QWORD **)v393 + 1512;
                    *(_DWORD *)v479 = 61;
                    *(_QWORD *)&v479[8] = &v477;
                    *(_QWORD *)&v479[16] = 2;
                    *v8 = 0u;
                    v8[1] = 0u;
                    *((_QWORD *)v8 + 4) = 0;
                    Impl = (llvm::Value *)sub_1C537D4FC(v395, v394, v479);
                  }
                  else
                  {
                    Impl = 0;
                  }
                  v5 = v467;
                }
LABEL_382:
                v7 = v443;
                goto LABEL_333;
              case 15:
                if ((*((_DWORD *)v469 + 2) & 0xFE) == 0x12)
                  v100 = v469;
                else
                  v100 = 0;
                if (v484 < 3 || !v100)
                  goto LABEL_296;
                v450 = v8;
                v444 = (llvm::ConstantExpr *)llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *(_DWORD *)v483, v100, v470);
                v101 = *((_DWORD *)v483 + 2);
                v102 = (llvm::Type *)*((_QWORD *)v100 + 3);
                v103 = *(_QWORD *)(v2 + 544);
                v104 = *(unsigned int *)(v2 + 560);
                v105 = sub_1C4E341F8(v103, *(_DWORD *)(v2 + 560), v470);
                if ((int *)(v103 + 32 * v104) == v105)
                {
                  v106 = *(_QWORD *)v472;
                }
                else
                {
                  v106 = *(_QWORD *)v472;
                  if (v105[4])
                  {
                    v107 = **((_DWORD **)v105 + 1);
                    goto LABEL_290;
                  }
                }
                v107 = -1;
LABEL_290:
                v5 = v467;
                v221 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, v101, v102, v107);
                v222 = *((_DWORD *)v483 + 4);
                *(_QWORD *)v472 = v106;
                if ((_DWORD)v484 == 4)
                {
                  v223 = sub_1C500E8C8((_QWORD *)v2, v222);
                  if (!v223)
                  {
                    *(_QWORD *)v479 = "Invalid insertelement constexpr record";
                    LOWORD(v480) = 259;
                    sub_1C500A780(v473, v467, (llvm::Twine *)v479);
                    v53 = 1;
LABEL_231:
                    v8 = v450;
                    goto LABEL_401;
                  }
                  v224 = (llvm::Type *)v223;
                  v225 = *((_DWORD *)v483 + 6);
                  v226 = v474;
                  v227 = v222;
                }
                else
                {
                  v224 = (llvm::Type *)(**(_QWORD **)(v2 + 424) + 1960);
                  v227 = v476;
                  v226 = v474;
                  v225 = *((_DWORD *)v483 + 4);
                }
                v228 = llvm::BitcodeReaderValueList::getConstantFwdRef(v226, v225, v224, v227);
                if (v228)
                {
                  NullValue = (uint64_t)llvm::ConstantExpr::getInsertElement(v444, (llvm::Constant *)v221, (llvm::Constant *)v228, 0, v229);
                  goto LABEL_332;
                }
LABEL_296:
                v12 = "Invalid insertelement constexpr record";
                goto LABEL_399;
              case 16:
                if ((*((_DWORD *)v469 + 2) & 0xFE) == 0x12)
                  v116 = v469;
                else
                  v116 = 0;
                if (v484 < 3 || !v116)
                  goto LABEL_153;
                v117 = *(_QWORD *)v483;
                v118 = *((_QWORD *)v483 + 1);
                v119 = v7;
                v120 = *((_QWORD *)v483 + 2);
                if (v119 >= (llvm::ConstantExpr *)v460)
                {
                  v210 = v8;
                  v211 = v119;
                  v212 = v6;
                  v213 = 0x6DB6DB6DB6DB6DB7 * ((v119 - (llvm::ConstantExpr *)v6) >> 3);
                  v214 = v213 + 1;
                  if ((unint64_t)(v213 + 1) > 0x492492492492492)
                    goto LABEL_629;
                  v463 = v212;
                  if (0xDB6DB6DB6DB6DB6ELL * ((v460 - v212) >> 3) > v214)
                    v214 = 0xDB6DB6DB6DB6DB6ELL * ((v460 - v212) >> 3);
                  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v460 - v212) >> 3)) >= 0x249249249249249)
                    v215 = 0x492492492492492;
                  else
                    v215 = v214;
                  if (v215)
                  {
                    if (v215 > 0x492492492492492)
                      goto LABEL_630;
                    v216 = (char *)operator new(56 * v215);
                  }
                  else
                  {
                    v216 = 0;
                  }
                  v263 = &v216[56 * v213];
                  *(_QWORD *)v263 = v116;
                  *((_DWORD *)v263 + 2) = v470;
                  *((_QWORD *)v263 + 2) = v116;
                  *((_QWORD *)v263 + 3) = v117;
                  *((_QWORD *)v263 + 4) = v118;
                  *((_QWORD *)v263 + 5) = v120;
                  *((_DWORD *)v263 + 12) = v472[0];
                  if (v211 == (llvm::ConstantExpr *)v463)
                  {
                    v6 = &v216[56 * v213];
                    v5 = v467;
                  }
                  else
                  {
                    v264 = &v216[56 * v213];
                    v5 = v467;
                    do
                    {
                      v265 = *(_OWORD *)((char *)v211 - 56);
                      v266 = *(_OWORD *)((char *)v211 - 40);
                      v267 = *(_OWORD *)((char *)v211 - 24);
                      v6 = v264 - 56;
                      *((_QWORD *)v264 - 1) = *((_QWORD *)v211 - 1);
                      *(_OWORD *)(v264 - 24) = v267;
                      *(_OWORD *)(v264 - 40) = v266;
                      *(_OWORD *)(v264 - 56) = v265;
                      v211 = (llvm::ConstantExpr *)((char *)v211 - 56);
                      v264 -= 56;
                    }
                    while (v211 != (llvm::ConstantExpr *)v463);
                  }
                  v460 = &v216[56 * v215];
                  v7 = (llvm::ConstantExpr *)(v263 + 56);
                  if (v463)
                    operator delete(v463);
                  v121 = v472[0];
                  v8 = v210;
                }
                else
                {
                  *(_QWORD *)v119 = v116;
                  *((_DWORD *)v119 + 2) = v470;
                  *((_QWORD *)v119 + 2) = v116;
                  *((_QWORD *)v119 + 3) = v117;
                  *((_QWORD *)v119 + 4) = v118;
                  *((_QWORD *)v119 + 5) = v120;
                  v121 = v472[0];
                  *((_DWORD *)v119 + 12) = v472[0];
                  v7 = (llvm::ConstantExpr *)((char *)v119 + 56);
                  v5 = v467;
                }
                *(_QWORD *)v472 = v121 + 1;
                goto LABEL_424;
              case 17:
                if (v484 <= 3)
                {
                  v12 = "Invalid cmp constexpt record";
                  goto LABEL_399;
                }
                v165 = *(_DWORD *)v483;
                v166 = (llvm::Type *)sub_1C500E8C8((_QWORD *)v2, *(_DWORD *)v483);
                if (!v166)
                {
                  v12 = "Invalid cmp constexpr record";
                  goto LABEL_399;
                }
                v167 = v166;
                v443 = v7;
                v168 = (unsigned __int8 *)llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v483 + 2), v166, v165);
                v169 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v483 + 4), v167, v165);
                if ((*((_DWORD *)v167 + 2) & 0xFE) == 0x12)
                  v170 = *(unsigned __int8 *)(**((_QWORD **)v167 + 2) + 8);
                else
                  v170 = *((_DWORD *)v167 + 2);
                v254 = (llvm::ConstantExpr *)*((unsigned __int16 *)v483 + 12);
                if (v170 > 6)
                  ICmp = (uint64_t)llvm::ConstantExpr::getICmp(v254, v168, (llvm::Constant *)v169, 0);
                else
                  ICmp = llvm::ConstantExpr::getFCmp(v254, (uint64_t ***)v168, (llvm::Constant *)v169, 0);
                Impl = (llvm::Value *)ICmp;
                goto LABEL_382;
              case 18:
                if (v484 <= 1)
                  goto LABEL_190;
                memset(&v477, 0, sizeof(v477));
                memset(&v475, 0, sizeof(v475));
                v127 = *((_QWORD *)v483 + 1);
                v128 = (v127 + 2);
                if (v128 >= v484)
                  goto LABEL_221;
                v129 = *((_QWORD *)v483 + v128);
                if (v484 < (int)v127 + (int)v129 + 3)
                  goto LABEL_221;
                v130 = v7;
                v131 = *(_QWORD *)v483;
                if ((_DWORD)v127)
                {
                  v132 = 0;
                  do
                    std::string::push_back(&v477, *((_QWORD *)v483 + (v132++ + 2)));
                  while (v127 != v132);
                }
                if ((_DWORD)v129)
                {
                  v129 = v129;
                  v133 = v127 + 3;
                  do
                  {
                    std::string::push_back(&v475, *((_QWORD *)v483 + v133++));
                    --v129;
                  }
                  while (v129);
                }
                llvm::UpgradeInlineAsmString(&v477);
                v5 = v467;
                v7 = v130;
                if (!v457)
                  goto LABEL_469;
                if ((v477.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v134 = &v477;
                else
                  v134 = (std::string *)v477.__r_.__value_.__r.__words[0];
                if ((v477.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = *((_BYTE *)&v477.__r_.__value_.__s + 23) & 0x7F;
                else
                  size = v477.__r_.__value_.__l.__size_;
                if ((v475.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v136 = &v475;
                else
                  v136 = (std::string *)v475.__r_.__value_.__r.__words[0];
                if ((v475.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v137 = *((_BYTE *)&v475.__r_.__value_.__s + 23) & 0x7F;
                else
                  v137 = v475.__r_.__value_.__l.__size_;
                v65 = llvm::InlineAsm::get(v457, (uint64_t)v134, size, (uint64_t)v136, v137, v131 & 1, v131 > 1, 0, 0);
                goto LABEL_515;
              case 19:
                if ((*((_DWORD *)v469 + 2) & 0xFE) == 0x12)
                  v66 = v469;
                else
                  v66 = 0;
                v67 = sub_1C500E8C8((_QWORD *)v2, *(_DWORD *)v483);
                if (!v67
                  || ((*(_DWORD *)(v67 + 8) & 0xFE) != 0x12 ? (v68 = 0) : (v68 = v67),
                      v484 < 4 || !v66 || (*(_DWORD *)(v67 + 8) & 0xFE) != 0x12))
                {
LABEL_153:
                  v12 = "Invalid shufflevector constexpr record";
                  goto LABEL_399;
                }
                v70 = *((_QWORD *)v483 + 1);
                v69 = *((_QWORD *)v483 + 2);
                v71 = *((_QWORD *)v483 + 3);
                if (v7 >= (llvm::ConstantExpr *)v460)
                {
                  v451 = v8;
                  v242 = v6;
                  v243 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (llvm::ConstantExpr *)v6) >> 3);
                  v244 = v243 + 1;
                  if ((unint64_t)(v243 + 1) > 0x492492492492492)
LABEL_629:
                    abort();
                  v464 = (llvm::ConstantExpr *)v242;
                  if (0xDB6DB6DB6DB6DB6ELL * ((v460 - v242) >> 3) > v244)
                    v244 = 0xDB6DB6DB6DB6DB6ELL * ((v460 - v242) >> 3);
                  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v460 - v242) >> 3)) >= 0x249249249249249)
                    v245 = 0x492492492492492;
                  else
                    v245 = v244;
                  if (v245)
                  {
                    if (v245 > 0x492492492492492)
                      goto LABEL_630;
                    v246 = *((_QWORD *)v483 + 3);
                    v247 = (char *)operator new(56 * v245);
                    v71 = v246;
                  }
                  else
                  {
                    v247 = 0;
                  }
                  v297 = &v247[56 * v243];
                  *(_QWORD *)v297 = v68;
                  *((_DWORD *)v297 + 2) = v470;
                  *((_QWORD *)v297 + 2) = v66;
                  *((_QWORD *)v297 + 3) = v70;
                  *((_QWORD *)v297 + 4) = v69;
                  *((_QWORD *)v297 + 5) = v71;
                  *((_DWORD *)v297 + 12) = v472[0];
                  if (v7 == v464)
                  {
                    v6 = &v247[56 * v243];
                    v5 = v467;
                  }
                  else
                  {
                    v298 = &v247[56 * v243];
                    v5 = v467;
                    do
                    {
                      v299 = *(_OWORD *)((char *)v7 - 56);
                      v300 = *(_OWORD *)((char *)v7 - 40);
                      v301 = *(_OWORD *)((char *)v7 - 24);
                      v6 = v298 - 56;
                      *((_QWORD *)v298 - 1) = *((_QWORD *)v7 - 1);
                      *(_OWORD *)(v298 - 24) = v301;
                      *(_OWORD *)(v298 - 40) = v300;
                      *(_OWORD *)(v298 - 56) = v299;
                      v7 = (llvm::ConstantExpr *)((char *)v7 - 56);
                      v298 -= 56;
                    }
                    while (v7 != v464);
                  }
                  v460 = &v247[56 * v245];
                  v7 = (llvm::ConstantExpr *)(v297 + 56);
                  v72 = v472[0];
                  if (v464)
                    operator delete(v464);
                  v8 = v451;
                }
                else
                {
                  *(_QWORD *)v7 = v68;
                  *((_DWORD *)v7 + 2) = v470;
                  *((_QWORD *)v7 + 2) = v66;
                  *((_QWORD *)v7 + 3) = v70;
                  *((_QWORD *)v7 + 4) = v69;
                  *((_QWORD *)v7 + 5) = v71;
                  v72 = v472[0];
                  *((_DWORD *)v7 + 12) = v472[0];
                  v7 = (llvm::ConstantExpr *)((char *)v7 + 56);
                  v5 = v467;
                }
                *(_QWORD *)v472 = v72 + 1;
LABEL_424:
                v53 = 2;
                goto LABEL_401;
              case 21:
                if (v484 > 2)
                {
                  v122 = *(_DWORD *)v483;
                  v123 = (llvm::Type *)sub_1C500E8C8((_QWORD *)v2, *(_DWORD *)v483);
                  if (v123)
                  {
                    v124 = llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v483 + 2), v123, v122);
                    if (!v124 || (v126 = (llvm::BlockAddress *)v124, *((_BYTE *)v124 + 16)))
                    {
                      *(_QWORD *)v479 = "Invalid blockaddress record";
                      LOWORD(v480) = 259;
                      sub_1C500A780(v473, v5, (llvm::Twine *)v479);
                      Impl = 0;
                      v53 = 1;
                      goto LABEL_245;
                    }
                    v448 = v7;
                    v452 = v8;
                    v465 = v6;
                    v475.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
                    v293 = *((_QWORD *)v483 + 2);
                    v294 = v293;
                    if (!(_DWORD)v293)
                    {
                      *(_QWORD *)v479 = "Invalid ID";
                      LOWORD(v480) = 259;
                      v308 = v473;
                      v5 = v467;
LABEL_446:
                      sub_1C500A780(v308, v5, (llvm::Twine *)v479);
                      Impl = 0;
                      v53 = 1;
                      goto LABEL_447;
                    }
                    if (v124[9] != (llvm::Type *)(v124 + 9))
                    {
                      v295 = v124[10];
                      v5 = v467;
                      do
                      {
                        if (v295 == (llvm::Type *)(v124 + 9))
                        {
                          *(_QWORD *)v479 = "Invalid ID";
                          LOWORD(v480) = 259;
                          v308 = v473;
                          goto LABEL_446;
                        }
                        v295 = (llvm::Type *)*((_QWORD *)v295 + 1);
                        --v294;
                      }
                      while (v294);
                      if (v295)
                        v296 = (llvm::Type *)((char *)v295 - 24);
                      else
                        v296 = 0;
LABEL_558:
                      Impl = llvm::BlockAddress::get(v126, v296, v125);
                      v53 = 9;
LABEL_447:
                      v6 = v465;
                      v7 = v448;
                      v8 = v452;
                      goto LABEL_245;
                    }
                    v332 = sub_1C61D0AA8(v456, (uint64_t *)&v475);
                    v334 = (char **)(v332 + 1);
                    v333 = (char *)v332[1];
                    v335 = (char *)v332[2];
                    if (v333 == v335)
                    {
                      v336 = v332;
                      v337 = *(char **)(v455 + 8);
                      v338 = *(char **)v455;
                      v339 = &v337[-*(_QWORD *)v455];
                      if (v337 == *(char **)v455)
                        v340 = 0;
                      else
                        v340 = ((_QWORD)&v337[-*(_QWORD *)v455] << 6) - 1;
                      v341 = *(_QWORD *)(v2 + 1600);
                      v441 = (_QWORD *)v2;
                      v342 = *(_QWORD *)(v2 + 1608);
                      v343 = v342 + v341;
                      if (v340 == v342 + v341)
                      {
                        if (v341 >= 0x200)
                        {
                          *(_QWORD *)(v2 + 1600) = v341 - 512;
                          v346 = *(_QWORD *)v338;
                          v344 = v338 + 8;
                          v345 = v346;
                          *(_QWORD *)(v2 + 1576) = v344;
                          if (v337 == *(char **)(v2 + 1592))
                          {
                            v347 = (char *)*v454;
                            if (v344 > *v454)
                            {
                              v348 = (v344 - (_BYTE *)*v454) >> 3;
                              if (v348 >= -1)
                                v349 = v348 + 1;
                              else
                                v349 = v348 + 2;
                              __dst = &v344[-8 * (v349 >> 1)];
                              v350 = v337 - v344;
                              if (v337 != v344)
                              {
                                memmove(__dst, v344, v337 - v344);
                                v337 = *(char **)v455;
                              }
                              v351 = &v337[-8 * (v349 >> 1)];
                              v337 = &__dst[v350];
                              v352 = v441;
                              v441[198] = &__dst[v350];
                              goto LABEL_500;
                            }
                            if (v337 == v347)
                              v371 = 1;
                            else
                              v371 = (v337 - v347) >> 2;
                            if (v371 >> 61)
                              goto LABEL_630;
                            v372 = (char *)operator new(8 * v371);
                            v373 = &v372[8 * (v371 >> 2)];
                            v374 = v337 - v344;
                            v430 = v337 == v344;
                            v337 = v373;
                            if (!v430)
                            {
                              v337 = &v373[v374 & 0xFFFFFFFFFFFFFFF8];
                              v375 = 8 * (v374 >> 3);
                              v376 = &v372[8 * (v371 >> 2)];
                              do
                              {
                                v377 = *(_QWORD *)v344;
                                v344 += 8;
                                *(_QWORD *)v376 = v377;
                                v376 += 8;
                                v375 -= 8;
                              }
                              while (v375);
                            }
                            v378 = v441;
                            v441[196] = v372;
                            v441[197] = v373;
                            v379 = &v372[8 * v371];
LABEL_549:
                            v378[198] = v337;
                            v378[199] = v379;
                            if (v347)
                            {
                              operator delete(v347);
                              v337 = (char *)v441[198];
                            }
                          }
                          goto LABEL_551;
                        }
                        v358 = *v453;
                        v359 = (_BYTE *)*v453 - (_BYTE *)*v454;
                        if ((unint64_t)v339 >= v359)
                        {
                          v366 = v359 >> 2;
                          if (v358 == *v454)
                            v367 = 1;
                          else
                            v367 = v366;
                          v480 = v453;
                          if (v367 >> 61)
LABEL_630:
                            sub_1C4764EE4();
                          *(_QWORD *)v479 = operator new(8 * v367);
                          *(_QWORD *)&v479[8] = &v339[*(_QWORD *)v479];
                          *(_QWORD *)&v479[16] = &v339[*(_QWORD *)v479];
                          *(_QWORD *)&v479[24] = *(_QWORD *)v479 + 8 * v367;
                          v477.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
                          sub_1C61351F0((uint64_t)v479, &v477);
                          v368 = *(_QWORD **)(v2 + 1584);
                          if (v368 != *(_QWORD **)(v2 + 1576))
                          {
                            do
                              sub_1C6135314((void **)v479, --v368);
                            while (v368 != *(_QWORD **)v455);
                          }
                          v369 = *(void **)(v2 + 1568);
                          v370 = *(_OWORD *)&v479[16];
                          *(_OWORD *)(v2 + 1568) = *(_OWORD *)v479;
                          *(_OWORD *)(v2 + 1584) = v370;
                          if (v369)
                            operator delete(v369);
                        }
                        else if (v358 == v337)
                        {
                          *(_QWORD *)v479 = operator new(0x1000uLL);
                          sub_1C6135314(v454, v479);
                          v360 = *(_QWORD **)(v2 + 1576);
                          v362 = *v360;
                          v361 = (char *)(v360 + 1);
                          v345 = v362;
                          *(_QWORD *)(v2 + 1576) = v361;
                          v337 = *(char **)(v2 + 1584);
                          if (v337 == *(char **)(v2 + 1592))
                          {
                            v347 = (char *)*v454;
                            if (v361 <= *v454)
                            {
                              if (v337 == v347)
                                v385 = 1;
                              else
                                v385 = (v337 - v347) >> 2;
                              if (v385 >> 61)
                                goto LABEL_630;
                              v386 = (char *)operator new(8 * v385);
                              v387 = &v386[8 * (v385 >> 2)];
                              v388 = v337 - v361;
                              v430 = v337 == v361;
                              v337 = v387;
                              if (!v430)
                              {
                                v337 = &v387[v388 & 0xFFFFFFFFFFFFFFF8];
                                v389 = 8 * (v388 >> 3);
                                v390 = &v386[8 * (v385 >> 2)];
                                do
                                {
                                  v391 = *(_QWORD *)v361;
                                  v361 += 8;
                                  *(_QWORD *)v390 = v391;
                                  v390 += 8;
                                  v389 -= 8;
                                }
                                while (v389);
                              }
                              v378 = v441;
                              v441[196] = v386;
                              v441[197] = v387;
                              v379 = &v386[8 * v385];
                              goto LABEL_549;
                            }
                            v363 = (v361 - (_BYTE *)*v454) >> 3;
                            if (v363 >= -1)
                              v364 = v363 + 1;
                            else
                              v364 = v363 + 2;
                            __dsta = &v361[-8 * (v364 >> 1)];
                            v365 = v337 - v361;
                            if (v337 != v361)
                            {
                              memmove(__dsta, v361, v337 - v361);
                              v361 = *(char **)v455;
                            }
                            v337 = &__dsta[v365];
                            v352 = v441;
                            v441[198] = &__dsta[v365];
                            v351 = &v361[-8 * (v364 >> 1)];
LABEL_500:
                            v352[197] = v351;
                          }
LABEL_551:
                          *(_QWORD *)v337 = v345;
                          v441[198] += 8;
                        }
                        else
                        {
                          *(_QWORD *)v479 = operator new(0x1000uLL);
                          sub_1C61351F0((uint64_t)v454, v479);
                        }
                        v338 = (char *)v441[197];
                        v342 = v441[201];
                        v343 = v441[200] + v342;
                        v126 = (llvm::BlockAddress *)v475.__r_.__value_.__r.__words[0];
                      }
                      *(_QWORD *)(*(_QWORD *)&v338[(v343 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v343 & 0x1FF)) = v126;
                      v2 = (uint64_t)v441;
                      v441[201] = v342 + 1;
                      v333 = (char *)v336[1];
                      v335 = (char *)v336[2];
                    }
                    v380 = v335 - v333;
                    v381 = (v293 + 1);
                    if (v381 > v380 >> 3)
                    {
                      sub_1C50100A0(v334, v381 - (v380 >> 3));
                      v333 = *v334;
                    }
                    v296 = *(llvm::Function **)&v333[8 * v293];
                    v5 = v467;
                    if (!v296)
                    {
                      v382 = *(_QWORD **)(v2 + 424);
                      LOWORD(v480) = 257;
                      v383 = operator new();
                      *(_QWORD *)v383 = *v382 + 1600;
                      *(_QWORD *)(v383 + 8) = 0;
                      v384 = *(_DWORD *)(v383 + 20) & 0xC0000000;
                      *(_DWORD *)(v383 + 16) = 22;
                      *(_DWORD *)(v383 + 20) = v384;
                      *(_QWORD *)(v383 + 24) = 0;
                      *(_QWORD *)(v383 + 32) = 0;
                      *(_QWORD *)(v383 + 40) = v383 + 40;
                      *(_QWORD *)(v383 + 48) = v383 + 40;
                      *(_QWORD *)(v383 + 56) = 0;
                      llvm::Value::setName((uint64_t ***)v383, (uint64_t)v479);
                      *(_QWORD *)&(*v334)[8 * v294] = v383;
                      v296 = *(llvm::Function **)&(*v334)[8 * v294];
                    }
                    goto LABEL_558;
                  }
                }
                v12 = "Invalid blockaddress record";
LABEL_399:
                *(_QWORD *)v479 = v12;
                LOWORD(v480) = 259;
                sub_1C500A780(v473, v5, (llvm::Twine *)v479);
                break;
              case 22:
                v21 = v484;
                if (!(_DWORD)v484)
                {
                  v12 = "Invalid data record";
                  goto LABEL_399;
                }
                v22 = v469;
                v23 = (llvm::FixedVectorType *)*((_QWORD *)v469 + 3);
                v24 = *((_DWORD *)v23 + 2);
                v25 = v24 >> 8;
                if (v24 == 13 && v25 == 8)
                {
                  v26 = (uint64_t *)v483;
                  *(_QWORD *)v479 = v8;
                  *(_OWORD *)&v479[8] = xmmword_1C6612EE0;
                  if (v484 >= 0x11)
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v479, v8, v484, 1);
                    v22 = v469;
                    v28 = *(_OWORD **)v479;
                    v27 = *(_QWORD *)&v479[8];
                  }
                  else
                  {
                    v27 = 0;
                    v28 = v8;
                  }
                  v29 = (char *)v28 + v27;
                  v30 = 8 * v21;
                  do
                  {
                    v31 = *v26++;
                    *v29++ = v31;
                    v30 -= 8;
                  }
                  while (v30);
                  v32 = (llvm::Type *)(*(_QWORD *)&v479[8] + v21);
                  *(_QWORD *)&v479[8] += v21;
                  v33 = *(_QWORD *)(v2 + 424);
                  v34 = *(_BYTE **)v479;
                  if ((*((_DWORD *)v22 + 2) & 0xFE) == 0x12)
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v33 + 1912), v32);
                  else
                    llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)v33 + 1912), v32);
                  v201 = v35;
                  v203 = v34;
                  v202 = v32;
                }
                else
                {
                  if (v24 != 13 || v25 != 16)
                  {
                    if (v24 == 13 && v25 == 32)
                    {
                      v230 = (uint64_t *)v483;
                      v231 = &v479[16];
                      *(_QWORD *)v479 = &v479[16];
                      *(_QWORD *)&v479[8] = 0x1000000000;
                      if (v484 >= 0x11)
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v479, (uint64_t)&v479[16], v484, 4);
                        v22 = v469;
                        v232 = *(unsigned int *)&v479[8];
                        v231 = *(_BYTE **)v479;
                      }
                      else
                      {
                        v232 = 0;
                      }
                      v233 = 8 * v21;
                      v234 = &v231[4 * v232];
                      do
                      {
                        v235 = *v230++;
                        *v234++ = v235;
                        v233 -= 8;
                      }
                      while (v233);
                      v236 = (llvm::Type *)(*(_DWORD *)&v479[8] + v21);
                      *(_DWORD *)&v479[8] = (_DWORD)v236;
                      v237 = *(_QWORD *)(v2 + 424);
                      if ((*((_DWORD *)v22 + 2) & 0xFE) == 0x12)
                      {
                        llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v237 + 1960), v236);
                        v239 = v238;
                        v240 = (llvm::Type *)(4 * v236);
                        goto LABEL_371;
                      }
                      llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)v237 + 1960), v236);
                      v239 = v312;
                      v277 = v231;
                      v240 = (llvm::Type *)(4 * v236);
                    }
                    else
                    {
                      v273 = &v479[16];
                      if (v24 != 13 || v25 != 64)
                      {
                        switch((char)v24)
                        {
                          case 0:
                          case 1:
                            *(_QWORD *)v479 = v8;
                            *(_OWORD *)&v479[8] = xmmword_1C6612EE0;
                            sub_1C500FAB0(v479, (char *)v483, (char *)v483 + 8 * v484);
                            v309 = *(_BYTE **)v479;
                            v310 = *(_QWORD *)&v479[8];
                            if ((*((_DWORD *)v469 + 2) & 0xFE) == 0x12)
                              llvm::FixedVectorType::get(v23, *(llvm::Type **)&v479[8]);
                            else
                              llvm::ArrayType::get(v23, *(llvm::Type **)&v479[8]);
                            v201 = v311;
                            v202 = (llvm::Type *)(2 * v310);
                            v203 = v309;
                            goto LABEL_308;
                          case 2:
                            v449 = v7;
                            v325 = (uint64_t *)v483;
                            *(_QWORD *)v479 = &v479[16];
                            *(_QWORD *)&v479[8] = 0x1000000000;
                            if (v484 >= 0x11)
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v479, (uint64_t)&v479[16], v484, 4);
                              v22 = v469;
                              v326 = *(unsigned int *)&v479[8];
                              v273 = *(_BYTE **)v479;
                            }
                            else
                            {
                              v326 = 0;
                            }
                            v327 = 8 * v21;
                            v328 = &v273[4 * v326];
                            do
                            {
                              v329 = *v325++;
                              *v328++ = v329;
                              v327 -= 8;
                            }
                            while (v327);
                            v330 = (llvm::Type *)(*(_DWORD *)&v479[8] + v21);
                            *(_DWORD *)&v479[8] = (_DWORD)v330;
                            if ((*((_DWORD *)v22 + 2) & 0xFE) == 0x12)
                              llvm::FixedVectorType::get(v23, v330);
                            else
                              llvm::ArrayType::get(v23, v330);
                            v239 = v331;
                            v7 = v449;
                            v240 = (llvm::Type *)(4 * v330);
                            v277 = v273;
                            goto LABEL_484;
                          case 3:
                            v450 = v8;
                            *(_QWORD *)v479 = &v479[16];
                            *(_QWORD *)&v479[8] = 0x1000000000;
                            sub_1C4DFE610((unsigned int *)v479, v483, (_BYTE *)v483 + 8 * v484);
                            if ((*((_DWORD *)v469 + 2) & 0xFE) == 0x12)
                              FP = llvm::ConstantDataVector::getFP(v23, *(_BYTE **)v479, (llvm::Type *)*(unsigned int *)&v479[8]);
                            else
                              FP = llvm::ConstantDataArray::getFP(v23, *(_BYTE **)v479, (llvm::Type *)*(unsigned int *)&v479[8]);
                            Impl = (llvm::Value *)FP;
                            if (*(_BYTE **)v479 != &v479[16])
                              free(*(void **)v479);
                            goto LABEL_531;
                          default:
                            v12 = "Invalid type for value";
                            goto LABEL_399;
                        }
                      }
                      *(_QWORD *)v479 = &v479[16];
                      *(_QWORD *)&v479[8] = 0x1000000000;
                      sub_1C4DFE610((unsigned int *)v479, v483, (_BYTE *)v483 + 8 * v484);
                      v274 = *(_QWORD *)(v2 + 424);
                      if ((*((_DWORD *)v469 + 2) & 0xFE) == 0x12)
                      {
                        v231 = *(_BYTE **)v479;
                        v275 = *(unsigned int *)&v479[8];
                        llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v274 + 1984), (llvm::Type *)*(unsigned int *)&v479[8]);
                        v239 = v276;
                        v240 = (llvm::Type *)(8 * v275);
LABEL_371:
                        v277 = v231;
                      }
                      else
                      {
                        v318 = *(_BYTE **)v479;
                        v319 = 8 * *(unsigned int *)&v479[8];
                        llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)v274 + 1984), (llvm::Type *)*(unsigned int *)&v479[8]);
                        v239 = v320;
                        v277 = v318;
                        v240 = (llvm::Type *)v319;
                      }
                    }
LABEL_484:
                    Impl = (llvm::Value *)llvm::ConstantDataSequential::getImpl(v277, v240, v239);
                    v241 = *(void **)v479;
                    if (*(_BYTE **)v479 != &v479[16])
                      goto LABEL_310;
                    goto LABEL_333;
                  }
                  *(_QWORD *)v479 = v8;
                  *(_OWORD *)&v479[8] = xmmword_1C6612EE0;
                  sub_1C500FAB0(v479, (char *)v483, (char *)v483 + 8 * v484);
                  v197 = *(_QWORD *)(v2 + 424);
                  if ((*((_DWORD *)v469 + 2) & 0xFE) == 0x12)
                  {
                    v198 = *(_BYTE **)v479;
                    v199 = *(_QWORD *)&v479[8];
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v197 + 1936), *(llvm::Type **)&v479[8]);
                    v201 = v200;
                    v202 = (llvm::Type *)(2 * v199);
                    v203 = v198;
                  }
                  else
                  {
                    v278 = *(_BYTE **)v479;
                    v279 = 2 * *(_QWORD *)&v479[8];
                    llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)v197 + 1936), *(llvm::Type **)&v479[8]);
                    v201 = v280;
                    v203 = v278;
                    v202 = (llvm::Type *)v279;
                  }
                }
LABEL_308:
                String = llvm::ConstantDataSequential::getImpl(v203, v202, v201);
LABEL_309:
                Impl = (llvm::Value *)String;
                v241 = *(void **)v479;
                if (*(_OWORD **)v479 != v8)
LABEL_310:
                  free(v241);
LABEL_333:
                v256 = v8;
                llvm::BitcodeReaderValueList::assignValue(v474, Impl, v472[0], v470, v473);
                v53 = *v473 != 0;
                if (*v473)
                  v257 = v472[0];
                else
                  v257 = v472[0] + 1;
                *(_QWORD *)v472 = v257;
                v8 = v256;
                goto LABEL_401;
              case 23:
                if (v484 <= 1)
                  goto LABEL_190;
                memset(&v477, 0, sizeof(v477));
                memset(&v475, 0, sizeof(v475));
                v54 = *((_QWORD *)v483 + 1);
                v55 = (v54 + 2);
                if (v55 >= v484)
                  goto LABEL_221;
                v56 = *((_QWORD *)v483 + v55);
                if (v484 < (int)v54 + (int)v56 + 3)
                  goto LABEL_221;
                v57 = v7;
                v58 = *(_QWORD *)v483;
                if ((_DWORD)v54)
                {
                  v59 = 0;
                  do
                    std::string::push_back(&v477, *((_QWORD *)v483 + (v59++ + 2)));
                  while (v54 != v59);
                }
                if ((_DWORD)v56)
                {
                  v56 = v56;
                  v60 = v54 + 3;
                  do
                  {
                    std::string::push_back(&v475, *((_QWORD *)v483 + v60++));
                    --v56;
                  }
                  while (v56);
                }
                llvm::UpgradeInlineAsmString(&v477);
                v5 = v467;
                v7 = v57;
                if (!v457)
                  goto LABEL_469;
                if ((v477.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v61 = &v477;
                else
                  v61 = (std::string *)v477.__r_.__value_.__r.__words[0];
                if ((v477.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v62 = *((_BYTE *)&v477.__r_.__value_.__s + 23) & 0x7F;
                else
                  v62 = v477.__r_.__value_.__l.__size_;
                if ((v475.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v63 = &v475;
                else
                  v63 = (std::string *)v475.__r_.__value_.__r.__words[0];
                if ((v475.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v64 = *((_BYTE *)&v475.__r_.__value_.__s + 23) & 0x7F;
                else
                  v64 = v475.__r_.__value_.__l.__size_;
                v65 = llvm::InlineAsm::get(v457, (uint64_t)v61, v62, (uint64_t)v63, v64, v58 & 1, (v58 & 2) != 0, v58 >> 2, 0);
                goto LABEL_515;
              case 25:
                if (v484 <= 1)
                {
                  v12 = "Invalid unary op constexpr record";
                  goto LABEL_399;
                }
                v146 = v483;
                v147 = v469;
                v148 = sub_1C500E764(*(_DWORD *)v483, (uint64_t)v469);
                if ((v148 & 0x80000000) != 0)
                {
LABEL_228:
                  v112 = v147;
LABEL_229:
                  NullValue = (uint64_t)llvm::UndefValue::get(v112, v10);
                }
                else
                {
                  v149 = (llvm::ConstantExpr *)v148;
                  v150 = (unsigned __int8 *)llvm::BitcodeReaderValueList::getConstantFwdRef(v474, v146[2], v469, v470);
                  NullValue = llvm::ConstantExpr::get(v149, v150, 0, 0, v151);
                }
                goto LABEL_332;
              case 26:
                NullValue = (uint64_t)llvm::PoisonValue::get(v469, v10);
                goto LABEL_332;
              case 27:
                if (v484 <= 1
                  || (v36 = *(_DWORD *)v483, (v37 = (llvm::Type *)sub_1C500E8C8((_QWORD *)v2, *(_DWORD *)v483)) == 0)
                  || (v38 = (unsigned __int8 *)llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v483 + 2), v37, v36)) == 0|| v38[16] >= 4u)
                {
                  v12 = "Invalid dso_local record";
                  goto LABEL_399;
                }
                NullValue = llvm::DSOLocalEquivalent::get((llvm::DSOLocalEquivalent *)v38, v39);
                goto LABEL_332;
              case 28:
                if (v484 <= 1)
                  goto LABEL_190;
                memset(&v477, 0, sizeof(v477));
                memset(&v475, 0, sizeof(v475));
                v177 = *((_QWORD *)v483 + 1);
                v178 = (v177 + 2);
                if (v178 >= v484)
                  goto LABEL_221;
                v179 = *((_QWORD *)v483 + v178);
                if (v484 < (int)v177 + (int)v179 + 3)
                  goto LABEL_221;
                v321 = v7;
                v322 = *(_QWORD *)v483;
                if ((_DWORD)v177)
                {
                  v323 = 0;
                  do
                    std::string::push_back(&v477, *((_QWORD *)v483 + (v323++ + 2)));
                  while (v177 != v323);
                }
                if ((_DWORD)v179)
                {
                  v179 = v179;
                  v324 = v177 + 3;
                  do
                  {
                    std::string::push_back(&v475, *((_QWORD *)v483 + v324++));
                    --v179;
                  }
                  while (v179);
                }
                llvm::UpgradeInlineAsmString(&v477);
                v5 = v467;
                v7 = v321;
                if (!v457)
                {
LABEL_469:
                  v180 = "Missing element type for old-style inlineasm";
                  goto LABEL_222;
                }
                if ((v477.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v353 = &v477;
                else
                  v353 = (std::string *)v477.__r_.__value_.__r.__words[0];
                if ((v477.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v354 = *((_BYTE *)&v477.__r_.__value_.__s + 23) & 0x7F;
                else
                  v354 = v477.__r_.__value_.__l.__size_;
                if ((v475.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v355 = &v475;
                else
                  v355 = (std::string *)v475.__r_.__value_.__r.__words[0];
                if ((v475.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v356 = *((_BYTE *)&v475.__r_.__value_.__s + 23) & 0x7F;
                else
                  v356 = v475.__r_.__value_.__l.__size_;
                v65 = llvm::InlineAsm::get(v457, (uint64_t)v353, v354, (uint64_t)v355, v356, v322 & 1, (v322 & 2) != 0, (v322 >> 2) & 1, (v322 & 8) != 0);
LABEL_515:
                Impl = (llvm::Value *)v65;
                v53 = 9;
                goto LABEL_223;
              case 29:
                if (v484 <= 1
                  || (v138 = *(_DWORD *)v483, (v139 = (llvm::Type *)sub_1C500E8C8((_QWORD *)v2, *(_DWORD *)v483)) == 0)
                  || (v140 = (unsigned __int8 *)llvm::BitcodeReaderValueList::getConstantFwdRef(v474, *((_DWORD *)v483 + 2), v139, v138)) == 0|| v140[16] >= 4u)
                {
                  v12 = "Invalid no_cfi record";
                  goto LABEL_399;
                }
                NullValue = llvm::NoCFIValue::get((llvm::NoCFIValue *)v140, v141);
LABEL_332:
                Impl = (llvm::Value *)NullValue;
                goto LABEL_333;
              case 30:
                if (v484 <= 2
                  || (v40 = sub_1C500E8C8((_QWORD *)v2, *(_DWORD *)v483)) == 0
                  || (v41 = (llvm::PointerType *)v40, *(_BYTE *)(v40 + 8) != 14))
                {
LABEL_190:
                  v12 = "Invalid inlineasm record";
                  goto LABEL_399;
                }
                memset(&v477, 0, sizeof(v477));
                memset(&v475, 0, sizeof(v475));
                v42 = *((_QWORD *)v483 + 2);
                v43 = (v42 + 3);
                if (v43 >= v484
                  || (v44 = *((_QWORD *)v483 + v43), v484 < (int)v42 + (int)v44 + 4))
                {
LABEL_221:
                  v180 = "Invalid inlineasm record";
LABEL_222:
                  *(_QWORD *)v479 = v180;
                  LOWORD(v480) = 259;
                  sub_1C500A780(v473, v5, (llvm::Twine *)v479);
                  Impl = 0;
                  v53 = 1;
                }
                else
                {
                  v442 = v7;
                  v45 = *((_QWORD *)v483 + 1);
                  if ((_DWORD)v42)
                  {
                    v46 = 0;
                    do
                      std::string::push_back(&v477, *((_QWORD *)v483 + (v46++ + 3)));
                    while (v42 != v46);
                  }
                  if ((_DWORD)v44)
                  {
                    v44 = v44;
                    v47 = v42 + 4;
                    do
                    {
                      std::string::push_back(&v475, *((_QWORD *)v483 + v47++));
                      --v44;
                    }
                    while (v44);
                  }
                  llvm::UpgradeInlineAsmString(&v477);
                  if ((v477.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v48 = &v477;
                  else
                    v48 = (std::string *)v477.__r_.__value_.__r.__words[0];
                  if ((v477.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v49 = *((_BYTE *)&v477.__r_.__value_.__s + 23) & 0x7F;
                  else
                    v49 = v477.__r_.__value_.__l.__size_;
                  if ((v475.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v50 = &v475;
                  else
                    v50 = (std::string *)v475.__r_.__value_.__r.__words[0];
                  if ((v475.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v51 = *((_BYTE *)&v475.__r_.__value_.__s + 23) & 0x7F;
                  else
                    v51 = v475.__r_.__value_.__l.__size_;
                  Impl = (llvm::Value *)llvm::InlineAsm::get(v41, (uint64_t)v48, v49, (uint64_t)v50, v51, v45 & 1, (v45 & 2) != 0, (v45 >> 2) & 1, (v45 & 8) != 0);
                  v53 = 9;
                  v5 = v467;
                  v7 = v442;
                }
LABEL_223:
                if (SHIBYTE(v475.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v475.__r_.__value_.__l.__data_);
                if (SHIBYTE(v477.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v477.__r_.__value_.__l.__data_);
                goto LABEL_245;
              default:
LABEL_205:
                v112 = v469;
                goto LABEL_229;
            }
          }
          v53 = 1;
LABEL_401:
          if ((v482 & 1) != 0)
          {
            v292 = v481;
            v481 = 0;
            if (v292)
              (*(void (**)(uint64_t))(*(_QWORD *)v292 + 8))(v292);
          }
          if ((v53 | 2) != 2)
            goto LABEL_622;
          break;
      }
    }
    v392 = *(_QWORD *)v479;
LABEL_632:
    *v473 = v392;
LABEL_622:
    if (__p)
      operator delete(__p);
    if (v6)
      operator delete(v6);
    if (v483 != v485)
      free(v483);
  }
}

void sub_1C500DA3C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t ***v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  char v47;
  const char *v48;
  uint64_t v49;
  __int16 v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  __int16 v54;
  void *__p;
  char v56;
  char v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[66];

  v60[64] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    sub_1C500FBEC((uint64_t)&v48, a3, a2 + 32);
    if ((v49 & 1) != 0)
    {
      v41 = (void *)v48;
      goto LABEL_75;
    }
    v6 = v48;
    if (*(_BYTE *)(a2 + 392))
    {
      v7 = *(_DWORD *)(a2 + 68);
      llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 14, a1);
      if (*a1)
        return;
      v58 = v60;
      v59 = 0x4000000000;
      while (1)
      {
        sub_1C4FF7B90(a2 + 32, 0, (uint64_t)&v51);
        if ((v52 & 1) != 0)
          break;
        switch((_DWORD)v51)
        {
          case 2:
            sub_1C4FF3F30(a2 + 32, (uint64_t *)&__p);
            v13 = __p;
            if ((v52 & 1) != 0)
            {
              v14 = v51;
              v51 = 0;
              if (v14)
                (*(void (**)(void *))(*(_QWORD *)v14 + 8))(v14);
            }
            if (v13)
              goto LABEL_99;
            break;
          case 1:
            *a1 = 0;
            goto LABEL_89;
          case 0:
            v51 = "Malformed block";
            v54 = 259;
            sub_1C500A780(a1, a2 + 8, (llvm::Twine *)&v51);
            goto LABEL_89;
          default:
            LODWORD(v59) = 0;
            llvm::BitstreamCursor::readRecord(a2 + 32, SHIDWORD(v51), (uint64_t)&v58, 0, (uint64_t)&__p);
            if ((v56 & 1) != 0)
            {
              v10 = 0;
              v11 = __p;
              __p = 0;
              *a1 = (uint64_t)v11;
            }
            else if ((_DWORD)__p == 3)
            {
              v8 = *(_QWORD *)(a2 + 616);
              if (((unint64_t)(*(_QWORD *)(a2 + 624) - v8) >> 5) > *(_QWORD *)v58
                && *(_QWORD *)(v8 + 32 * *(_QWORD *)v58 + 16))
              {
                v51 = *(void **)(v8 + 32 * *(_QWORD *)v58 + 16);
                v9 = 32 * *((_QWORD *)v58 + 1) - 32;
                sub_1C500A9B4(a2 + 1496, (uint64_t *)&v51)[1] = v9 + (v7 + 8);
                if (v9 > *(_QWORD *)(a2 + 448))
                  *(_QWORD *)(a2 + 448) = v9;
                v10 = 1;
              }
              else
              {
                v51 = "Invalid value reference in symbol table";
                v54 = 259;
                sub_1C500A780(a1, a2 + 8, (llvm::Twine *)&v51);
                v10 = 0;
              }
            }
            else
            {
              v10 = 1;
            }
            if ((v56 & 1) != 0)
            {
              v12 = __p;
              __p = 0;
              if (v12)
                (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
            }
            if ((v10 & 1) == 0)
              goto LABEL_89;
            break;
        }
      }
      v13 = v51;
LABEL_99:
      *a1 = (uint64_t)v13;
LABEL_89:
      if (v58 != v60)
        free(v58);
      if (*a1)
        return;
      *(_QWORD *)(a2 + 48) = ((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(_DWORD *)(a2 + 64) = 0;
      if ((v6 & 0x3F) != 0
        && (sub_1C4FF7E04(a2 + 32, v6 & 0x3F, (uint64_t)&v58), (v59 & 1) != 0))
      {
        v41 = v58;
        *a1 = (uint64_t)v58;
        if (v41)
          return;
      }
      else
      {
        v41 = 0;
      }
LABEL_75:
      *a1 = (uint64_t)v41;
      return;
    }
  }
  else
  {
    v6 = 0;
  }
  v15 = *(_DWORD *)(a2 + 68);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 14, a1);
  if (*a1)
    return;
  v16 = a2 + 8;
  v44 = (v15 + 8);
  v17 = v60;
  v58 = v60;
  v59 = 0x4000000000;
  v18 = (void *)(*(_QWORD *)(a2 + 432) + 216);
  v54 = 260;
  v51 = v18;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v51);
  v19 = &v53;
  v51 = &v53;
  v52 = xmmword_1C85F20B0;
  while (1)
  {
    while (1)
    {
      sub_1C4FF7B90(a2 + 32, 0, (uint64_t)&v48);
      if ((v49 & 1) != 0)
      {
        v39 = (uint64_t)v48;
LABEL_97:
        *a1 = v39;
        goto LABEL_81;
      }
      if ((_DWORD)v48 != 2)
        break;
      sub_1C4FF3F30(a2 + 32, &v46);
      v39 = v46;
      if ((v49 & 1) != 0)
      {
        v40 = v48;
        v48 = 0;
        if (v40)
          (*(void (**)(const char *))(*(_QWORD *)v40 + 8))(v40);
      }
      if (v39)
        goto LABEL_97;
    }
    if ((_DWORD)v48 == 1)
      break;
    if (!(_DWORD)v48)
    {
      v48 = "Malformed block";
      v50 = 259;
      sub_1C500A780(a1, v16, (llvm::Twine *)&v48);
      goto LABEL_81;
    }
    LODWORD(v59) = 0;
    llvm::BitstreamCursor::readRecord(a2 + 32, SHIDWORD(v48), (uint64_t)&v58, 0, (uint64_t)&v46);
    if ((v47 & 1) != 0)
    {
      LOBYTE(v20) = 0;
      v21 = v46;
      v46 = 0;
      *a1 = v21;
      goto LABEL_62;
    }
    if ((_DWORD)v46 == 3)
    {
      sub_1C500FD34((uint64_t)&v48, a2, (uint64_t)&v58, 2u, (uint64_t)&__p);
      if ((v49 & 1) == 0)
      {
        *a1 = 0;
        if (v48)
        {
          if (!v48[16])
          {
            v45 = v48;
            v36 = 32 * *((_QWORD *)v58 + 1) - 32;
            sub_1C500A9B4(a2 + 1496, (uint64_t *)&v45)[1] = v36 + v44;
            if (v36 > *(_QWORD *)(a2 + 448))
              *(_QWORD *)(a2 + 448) = v36;
          }
        }
        goto LABEL_61;
      }
LABEL_59:
      v37 = v48;
      *a1 = (uint64_t)v48;
      if (v37)
      {
        LOBYTE(v20) = 0;
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    if ((_DWORD)v46 != 2)
    {
      if ((_DWORD)v46 == 1)
      {
        sub_1C500FD34((uint64_t)&v48, a2, (uint64_t)&v58, 1u, (uint64_t)&__p);
        if ((v49 & 1) != 0)
          goto LABEL_59;
        *a1 = 0;
      }
LABEL_61:
      LOBYTE(v20) = 1;
      goto LABEL_62;
    }
    v20 = v59;
    if ((_DWORD)v59)
    {
      v43 = v19;
      v22 = v17;
      v23 = v6;
      v24 = v16;
      v25 = (char *)v58;
      v26 = (v59 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v27 = v52;
      if (*((_QWORD *)&v52 + 1) < (unint64_t)(v52 + v26))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v51, v43, v52 + v26, 1);
        v27 = v52;
      }
      if ((_DWORD)v20 != 1)
      {
        v28 = (uint64_t *)(v25 + 8);
        v29 = (char *)v51 + v27;
        v30 = 8 * v20 - 8;
        do
        {
          v31 = *v28++;
          *v29++ = v31;
          v30 -= 8;
        }
        while (v30);
        v27 = v52;
      }
      v32 = v27 + v26;
      *(_QWORD *)&v52 = v27 + v26;
      v33 = *(unsigned int *)v58;
      v34 = *(_QWORD *)(a2 + 1392);
      if (v33 < (*(_QWORD *)(a2 + 1400) - v34) >> 3)
      {
        v35 = *(uint64_t ****)(v34 + 8 * v33);
        if (v35)
        {
          v50 = 261;
          v48 = (const char *)v51;
          v49 = v32;
          llvm::Value::setName(v35, (uint64_t)&v48);
          *(_QWORD *)&v52 = 0;
          v16 = v24;
          v6 = v23;
          v17 = v22;
          v19 = v43;
          goto LABEL_61;
        }
      }
      v48 = "Invalid bbentry record";
      v50 = 259;
      v16 = v24;
      sub_1C500A780(a1, v24, (llvm::Twine *)&v48);
      LOBYTE(v20) = 0;
      v6 = v23;
      v17 = v22;
      v19 = v43;
    }
    else
    {
      v48 = "Invalid bbentry record";
      v50 = 259;
      sub_1C500A780(a1, v16, (llvm::Twine *)&v48);
    }
LABEL_62:
    if ((v47 & 1) != 0)
    {
      v38 = v46;
      v46 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
    if ((v20 & 1) == 0)
      goto LABEL_81;
  }
  if (!a3
    || (*(_QWORD *)(a2 + 48) = ((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8,
        *(_DWORD *)(a2 + 64) = 0,
        (v6 & 0x3F) == 0)
    || (sub_1C4FF7E04(a2 + 32, v6 & 0x3F, (uint64_t)&v48), (v49 & 1) == 0)
    || (v42 = v48, *a1 = (uint64_t)v48, !v42))
  {
    *a1 = 0;
  }
LABEL_81:
  if (v51 != v19)
    free(v51);
  if (v57 < 0)
    operator delete(__p);
  if (v58 != v17)
    free(v58);
}

void sub_1C500E16C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  _QWORD *v30;
  char v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  char v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[512];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t)(a2 + 4);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 4), 0, 18, a1);
  if (*a1)
    return;
  v5 = (uint64_t)(a2 + 1);
  v54 = v56;
  v55 = 0x4000000000;
  while (1)
  {
    sub_1C4FF7B90(v4, 0, (uint64_t)&v48);
    if ((v49 & 1) != 0)
      break;
    switch((_DWORD)v48)
    {
      case 2:
        sub_1C4FF3F30(v4, &v57);
        v46 = v57;
        if ((v49 & 1) != 0)
        {
          v47 = v48;
          v48 = 0;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        }
        v5 = (uint64_t)(a2 + 1);
        if (v46)
          goto LABEL_92;
        break;
      case 1:
        *a1 = 0;
        goto LABEL_88;
      case 0:
        v48 = (uint64_t)"Malformed block";
        v51 = 259;
        sub_1C500A780(a1, v5, (llvm::Twine *)&v48);
        goto LABEL_88;
      default:
        LODWORD(v55) = 0;
        llvm::BitstreamCursor::readRecord(v4, SHIDWORD(v48), (uint64_t)&v54, 0, (uint64_t)&v52);
        if ((v53 & 1) != 0)
        {
          v9 = 0;
          v10 = v52;
          v52 = 0;
          *a1 = v10;
          goto LABEL_76;
        }
        if ((_DWORD)v52 == 1)
        {
          if (v55 > 2)
          {
            v11 = *((unsigned int *)v54 + 2 * v55 - 2);
            v7 = v55 - 1;
            LODWORD(v55) = v55 - 1;
            v8 = (uint64_t *)(a2[77] + 32 * v11 + 16);
            goto LABEL_15;
          }
LABEL_41:
          v48 = (uint64_t)"Invalid record";
          v51 = 259;
          sub_1C500A780(a1, v5, (llvm::Twine *)&v48);
          v9 = 0;
          goto LABEL_76;
        }
        if ((_DWORD)v52 == 2)
        {
          if (v55 > 2)
          {
            v6 = *((unsigned int *)v54 + 2 * v55 - 2);
            v7 = v55 - 1;
            LODWORD(v55) = v55 - 1;
            v8 = (uint64_t *)(a2[174] + 8 * v6);
LABEL_15:
            v12 = *v8;
            v48 = 1;
            for (i = 8; i != 264; i += 16)
              *(uint64_t *)((char *)&v48 + i) = -4096;
            v16 = *(_QWORD *)(v12 + 8);
            v15 = (uint64_t *)(v12 + 8);
            v14 = v16;
            if (v16)
            {
              v17 = 0;
              while (1)
              {
                v18 = v17++;
                v7 = v55;
                if (v55 < v17)
                  goto LABEL_44;
                v19 = *((_QWORD *)v54 + v18);
                v57 = v14;
                if ((v48 & 1) != 0)
                {
                  v20 = 16;
                  v21 = &v49;
                }
                else
                {
                  v20 = v50;
                  if (!v50)
                  {
                    v30 = 0;
LABEL_36:
                    v24 = sub_1C4FD0314((uint64_t)&v48, (uint64_t)&v57, &v57, v30);
                    *v24 = v57;
                    *((_DWORD *)v24 + 2) = 0;
                    goto LABEL_37;
                  }
                  v21 = v49;
                }
                v22 = v20 - 1;
                v23 = v22 & ((v14 >> 4) ^ (v14 >> 9));
                v24 = &v21[2 * v23];
                v25 = *v24;
                if (v14 != *v24)
                {
                  v26 = 0;
                  v27 = 1;
                  while (v25 != -4096)
                  {
                    if (v26)
                      v28 = 0;
                    else
                      v28 = v25 == -8192;
                    if (v28)
                      v26 = v24;
                    v29 = v23 + v27++;
                    v23 = v29 & v22;
                    v24 = &v21[2 * v23];
                    v25 = *v24;
                    if (v14 == *v24)
                      goto LABEL_37;
                  }
                  if (v26)
                    v30 = v26;
                  else
                    v30 = v24;
                  goto LABEL_36;
                }
LABEL_37:
                *((_DWORD *)v24 + 2) = v19;
                v14 = *(_QWORD *)(v14 + 8);
                if (!v14)
                {
                  v7 = v55;
                  goto LABEL_44;
                }
              }
            }
            v17 = 0;
LABEL_44:
            v31 = v48;
            if (v7 >= v17 && v7 == v48 >> 1)
            {
              v33 = *v15;
              if (*v15)
              {
                v34 = *(_QWORD *)(v33 + 8);
                if (v34)
                {
                  v73 = 0;
                  v71 = 0u;
                  v72 = 0u;
                  v69 = 0u;
                  v70 = 0u;
                  v67 = 0u;
                  v68 = 0u;
                  v65 = 0u;
                  v66 = 0u;
                  v63 = 0u;
                  v64 = 0u;
                  v61 = 0u;
                  v62 = 0u;
                  v59 = 0u;
                  v60 = 0u;
                  v58 = 0u;
                  *(_QWORD *)(v33 + 8) = 0;
                  v57 = v33;
                  v35 = *(_QWORD *)(v34 + 8);
                  if (v35)
                  {
                    v36 = 1;
                    do
                    {
                      v37 = v34;
                      v34 = v35;
                      v38 = v36;
                      *(_QWORD *)(v37 + 8) = 0;
                      if (v36)
                      {
                        v39 = 0;
                        while (1)
                        {
                          v40 = *(&v57 + v39);
                          if (!v40)
                            break;
                          v37 = sub_1C4FD0718(v40, v37, (int *)&v48);
                          *(&v57 + v39++) = 0;
                          if (v38 == v39)
                          {
                            LODWORD(v39) = v38;
                            break;
                          }
                        }
                      }
                      else
                      {
                        LODWORD(v39) = 0;
                      }
                      if ((_DWORD)v39 == (_DWORD)v38)
                        v36 = v38 + 1;
                      else
                        v36 = v38;
                      *(&v57 + v39) = v37;
                      v35 = *(_QWORD *)(v34 + 8);
                    }
                    while (v35);
                    *v15 = v34;
                    if (!v36)
                    {
                      do
                      {
LABEL_71:
                        v44 = *(_QWORD *)(v34 + 8);
                        v43 = (uint64_t *)(v34 + 8);
                        v43[1] = (uint64_t)v15;
                        v15 = v43;
                        v34 = v44;
                      }
                      while (v44);
                      goto LABEL_72;
                    }
                  }
                  else
                  {
                    *v15 = v34;
                    v36 = 1;
                  }
                  v41 = v36;
                  v42 = &v57;
                  do
                  {
                    if (*v42)
                    {
                      v34 = sub_1C4FD0718(*v42, v34, (int *)&v48);
                      *v15 = v34;
                    }
                    ++v42;
                    --v41;
                  }
                  while (v41);
                  if (v34)
                    goto LABEL_71;
LABEL_72:
                  v31 = v48;
                }
              }
            }
            if ((v31 & 1) == 0)
              MEMORY[0x1CAA32FB4](v49, 8);
            v9 = 1;
            v5 = (uint64_t)(a2 + 1);
            goto LABEL_76;
          }
          goto LABEL_41;
        }
        v9 = 1;
LABEL_76:
        if ((v53 & 1) != 0)
        {
          v45 = v52;
          v52 = 0;
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        }
        if ((v9 & 1) == 0)
          goto LABEL_88;
        break;
    }
  }
  v46 = v48;
LABEL_92:
  *a1 = v46;
LABEL_88:
  if (v54 != v56)
    free(v54);
}

BOOL sub_1C500E658(uint64_t a1, uint64_t *a2, _DWORD *a3, unsigned int a4, llvm::Type ***a5, int *a6)
{
  uint64_t v6;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Type **v16;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t *v19;

  v6 = *a3;
  if (*((_DWORD *)a2 + 2) == (_DWORD)v6)
    return 1;
  v11 = v6 + 1;
  v12 = *a2;
  v13 = *(_QWORD *)(*a2 + 8 * v6);
  *a3 = v6 + 1;
  if (*(_BYTE *)(a1 + 1640))
    v14 = a4 - v13;
  else
    v14 = v13;
  if (v14 >= a4)
  {
    if (*((_DWORD *)a2 + 2) == v11)
      return 1;
    *a3 = v6 + 2;
    v17 = *(_QWORD *)(v12 + 8 * v11);
    *a6 = v17;
    v18 = (llvm::Type *)sub_1C500E8C8((_QWORD *)a1, v17);
    v16 = sub_1C500EF80(a1, v14, v18, *a6);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 616);
    *a6 = *(_DWORD *)(v15 + 32 * v14 + 24);
    if (*(_DWORD *)(a1 + 672) <= v14)
    {
      v16 = 0;
    }
    else
    {
      if (v14 >= ((unint64_t)(*(_QWORD *)(a1 + 624) - v15) >> 5))
      {
        v19 = (uint64_t *)(a1 + 616);
        sub_1C5010ABC((uint64_t *)(a1 + 616), (v14 + 1));
        v15 = *v19;
      }
      v16 = *(llvm::Type ***)(v15 + 32 * v14 + 16);
    }
  }
  *a5 = v16;
  return v16 == 0;
}

uint64_t sub_1C500E764(int a1, uint64_t a2)
{
  unsigned int v2;

  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v2 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
  else
    v2 = *(_DWORD *)(a2 + 8);
  if (v2 >= 7)
    return 0xFFFFFFFFLL;
  if (a1)
    return 0xFFFFFFFFLL;
  return 12;
}

uint64_t sub_1C500E7B8(int a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t result;
  BOOL v7;
  unsigned int v8;

  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v2 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
  else
    v2 = *(_DWORD *)(a2 + 8);
  if (v2 >= 7)
  {
    if (v2 != 13)
      return 0xFFFFFFFFLL;
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  switch(a1)
  {
    case 0:
      v4 = v3 == 0;
      v5 = 13;
      goto LABEL_17;
    case 1:
      v4 = v3 == 0;
      v5 = 15;
      goto LABEL_17;
    case 2:
      v4 = v3 == 0;
      v5 = 17;
      goto LABEL_17;
    case 3:
      v7 = v3 == 0;
      v8 = 19;
      goto LABEL_26;
    case 4:
      v4 = v3 == 0;
      v5 = 20;
      goto LABEL_17;
    case 5:
      v7 = v3 == 0;
      v8 = 22;
      goto LABEL_26;
    case 6:
      v4 = v3 == 0;
      v5 = 23;
LABEL_17:
      if (v4)
        return v5;
      else
        return v5 + 1;
    case 7:
      v7 = v3 == 0;
      v8 = 25;
      goto LABEL_26;
    case 8:
      v7 = v3 == 0;
      v8 = 26;
      goto LABEL_26;
    case 9:
      v7 = v3 == 0;
      v8 = 27;
      goto LABEL_26;
    case 10:
      v7 = v3 == 0;
      v8 = 28;
      goto LABEL_26;
    case 11:
      v7 = v3 == 0;
      v8 = 29;
      goto LABEL_26;
    case 12:
      v7 = v3 == 0;
      v8 = 30;
LABEL_26:
      if (v7)
        result = v8;
      else
        result = 0xFFFFFFFFLL;
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t sub_1C500E8C8(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;

  v2 = a2;
  v3 = a1[65];
  if (a2 >= (unint64_t)((a1[66] - v3) >> 3))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
  {
    v6 = (_QWORD *)a1[53];
    v7 = sub_1C484358C(*v6 + 2040, 32, 3);
    v4 = v7;
    *(_QWORD *)v7 = v6;
    *(_DWORD *)(v7 + 8) = 16;
    *(_QWORD *)(v7 + 20) = 0;
    *(_QWORD *)(v7 + 12) = 0;
    *(_DWORD *)(v7 + 28) = 0;
    v8 = (unint64_t *)a1[221];
    v9 = a1[222];
    if ((unint64_t)v8 >= v9)
    {
      v11 = (_QWORD *)a1[220];
      v12 = v8 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        abort();
      v14 = v9 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          sub_1C4764EE4();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (unint64_t *)&v16[8 * v12];
      *v17 = v4;
      v10 = v17 + 1;
      if (v8 != v11)
      {
        do
        {
          v18 = *--v8;
          *--v17 = v18;
        }
        while (v8 != v11);
        v8 = (unint64_t *)a1[220];
      }
      a1[220] = v17;
      a1[221] = v10;
      a1[222] = &v16[8 * v15];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v7;
      v10 = v8 + 1;
    }
    a1[221] = v10;
    *(_QWORD *)(a1[65] + 8 * v2) = v4;
  }
  return v4;
}

unint64_t sub_1C500EA24(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v20;
  unsigned int v21;
  unint64_t v23;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t *v49;
  int v50;
  BOOL v51;
  unsigned int v53;
  uint64_t *v55;
  uint64_t *v56;
  int v57;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t *v70;
  int v71;
  BOOL v72;
  unsigned int v74;
  unint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  uint64_t *v88;
  int v89;
  BOOL v90;
  unsigned int v92;
  BOOL v93;
  int v94;

  if (a4)
    v8 = *(_DWORD *)a3;
  else
    v8 = -1;
  v9 = *(_QWORD *)(a1 + 568);
  v10 = *(_DWORD *)(a1 + 584);
  v11 = a2 >> 4;
  if (!v10)
  {
LABEL_18:
    v16 = (uint64_t *)(v9 + 24 * v10);
    goto LABEL_19;
  }
  v12 = ((37 * v8) | ((unint64_t)(v11 ^ (a2 >> 9)) << 32))
      + ~((unint64_t)(37 * v8) << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = (v10 - 1) & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v9 + 24 * v15);
  v17 = *v16;
  v18 = *((_DWORD *)v16 + 2);
  if (*v16 != a2 || v18 != v8)
  {
    v20 = 1;
    while (v17 != -4096 || v18 != -1)
    {
      v21 = v15 + v20++;
      v15 = v21 & (v10 - 1);
      v16 = (uint64_t *)(v9 + 24 * v15);
      v17 = *v16;
      v18 = *((_DWORD *)v16 + 2);
      if (*v16 == a2 && v18 == v8)
        goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_19:
  if (v16 != (uint64_t *)(v9 + 24 * v10))
    return *((unsigned int *)v16 + 4);
  v25 = *(char **)(a1 + 528);
  v26 = *(char **)(a1 + 520);
  v27 = v25 - v26;
  v23 = (unint64_t)(v25 - v26) >> 3;
  v94 = v23;
  v28 = *(_QWORD *)(a1 + 536);
  if ((unint64_t)v25 >= v28)
  {
    v30 = v27 >> 3;
    v31 = (v27 >> 3) + 1;
    if (v31 >> 61)
      abort();
    v32 = v28 - (_QWORD)v26;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        sub_1C4764EE4();
      v34 = (char *)operator new(8 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[8 * v30];
    v36 = &v34[8 * v33];
    *(_QWORD *)v35 = a2;
    v29 = v35 + 8;
    if (v25 == v26)
    {
      v23 = (unint64_t)(v25 - v26) >> 3;
    }
    else
    {
      v23 = (unint64_t)(v25 - v26) >> 3;
      do
      {
        v37 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *((_QWORD *)v35 - 1) = v37;
        v35 -= 8;
      }
      while (v25 != v26);
      v25 = *(char **)(a1 + 520);
    }
    *(_QWORD *)(a1 + 520) = v35;
    *(_QWORD *)(a1 + 528) = v29;
    *(_QWORD *)(a1 + 536) = v36;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *(_QWORD *)v25 = a2;
    v29 = v25 + 8;
  }
  *(_QWORD *)(a1 + 528) = v29;
  if (a4)
  {
    sub_1C5010368(a1 + 544, &v94);
    sub_1C50101C4((unsigned int *)(v38 + 8), *(_QWORD *)(v38 + 8) + 4 * *(unsigned int *)(v38 + 16), a3, &a3[4 * a4]);
  }
  v39 = *(_DWORD *)(a1 + 584);
  if (v39)
  {
    v40 = *(_QWORD *)(a1 + 568);
    v41 = ((37 * v8) | ((unint64_t)(v11 ^ (a2 >> 9)) << 32))
        + ~((unint64_t)(37 * v8) << 32);
    v42 = (v41 ^ (v41 >> 22)) + ~((v41 ^ (v41 >> 22)) << 13);
    v43 = (9 * (v42 ^ (v42 >> 8))) ^ ((9 * (v42 ^ (v42 >> 8))) >> 15);
    v44 = (v39 - 1) & (((v43 + ~(v43 << 27)) >> 31) ^ (v43 + ~((_DWORD)v43 << 27)));
    v45 = (uint64_t *)(v40 + 24 * v44);
    v46 = *v45;
    v47 = *((_DWORD *)v45 + 2);
    if (*v45 == a2 && v47 == v8)
      return v23;
    v49 = 0;
    v50 = 1;
    while (v46 != -4096 || v47 != -1)
    {
      if (v49)
        v51 = 0;
      else
        v51 = v47 == -2;
      if (v51 && v46 == -8192)
        v49 = v45;
      v53 = v44 + v50++;
      v44 = v53 & (v39 - 1);
      v45 = (uint64_t *)(v40 + 24 * v44);
      v46 = *v45;
      v47 = *((_DWORD *)v45 + 2);
      if (*v45 == a2 && v47 == v8)
        return v23;
    }
    if (v49)
      v55 = v49;
    else
      v55 = v45;
  }
  else
  {
    v55 = 0;
  }
  v56 = (uint64_t *)(a1 + 568);
  v57 = *(_DWORD *)(a1 + 576);
  if (4 * v57 + 4 >= 3 * v39)
  {
    sub_1C4DC4B70(v56, 2 * v39);
    v59 = *(_DWORD *)(a1 + 584);
    if (v59)
    {
      v60 = *(_QWORD *)(a1 + 568);
      v61 = ((37 * v8) | ((unint64_t)(v11 ^ (a2 >> 9)) << 32))
          + ~((unint64_t)(37 * v8) << 32);
      v62 = (v61 ^ (v61 >> 22)) + ~((v61 ^ (v61 >> 22)) << 13);
      v63 = (9 * (v62 ^ (v62 >> 8))) ^ ((9 * (v62 ^ (v62 >> 8))) >> 15);
      v64 = ((v63 + ~(v63 << 27)) >> 31) ^ (v63 + ~((_DWORD)v63 << 27));
      v65 = v59 - 1;
      v66 = (v59 - 1) & v64;
      v55 = (uint64_t *)(v60 + 24 * v66);
      v67 = *v55;
      v68 = *((_DWORD *)v55 + 2);
      if (*v55 != a2 || v68 != v8)
      {
        v70 = 0;
        v71 = 1;
        while (v67 != -4096 || v68 != -1)
        {
          if (v70)
            v72 = 0;
          else
            v72 = v68 == -2;
          if (v72 && v67 == -8192)
            v70 = v55;
          v74 = v66 + v71++;
          v66 = v74 & v65;
          v55 = (uint64_t *)(v60 + 24 * (v74 & v65));
          v67 = *v55;
          v68 = *((_DWORD *)v55 + 2);
          if (*v55 == a2 && v68 == v8)
            goto LABEL_70;
        }
        if (v70)
          v55 = v70;
      }
    }
    else
    {
      v55 = 0;
    }
  }
  else if (v39 + ~v57 - *(_DWORD *)(a1 + 580) <= v39 >> 3)
  {
    v76 = v23;
    sub_1C4DC4B70(v56, v39);
    v77 = *(_DWORD *)(a1 + 584);
    if (v77)
    {
      v78 = *(_QWORD *)(a1 + 568);
      v79 = ((37 * v8) | ((unint64_t)(v11 ^ (a2 >> 9)) << 32))
          + ~((unint64_t)(37 * v8) << 32);
      v80 = (v79 ^ (v79 >> 22)) + ~((v79 ^ (v79 >> 22)) << 13);
      v81 = (9 * (v80 ^ (v80 >> 8))) ^ ((9 * (v80 ^ (v80 >> 8))) >> 15);
      v82 = ((v81 + ~(v81 << 27)) >> 31) ^ (v81 + ~((_DWORD)v81 << 27));
      v83 = v77 - 1;
      v84 = (v77 - 1) & v82;
      v55 = (uint64_t *)(v78 + 24 * v84);
      v85 = *v55;
      v86 = *((_DWORD *)v55 + 2);
      if (*v55 != a2 || v86 != v8)
      {
        v88 = 0;
        v89 = 1;
        while (v85 != -4096 || v86 != -1)
        {
          if (v88)
            v90 = 0;
          else
            v90 = v86 == -2;
          if (v90 && v85 == -8192)
            v88 = v55;
          v92 = v84 + v89++;
          v84 = v92 & v83;
          v55 = (uint64_t *)(v78 + 24 * (v92 & v83));
          v85 = *v55;
          v86 = *((_DWORD *)v55 + 2);
          v93 = *v55 == a2 && v86 == v8;
          v23 = v76;
          if (v93)
            goto LABEL_70;
        }
        if (v88)
          v55 = v88;
      }
    }
    else
    {
      v55 = 0;
    }
    v23 = v76;
  }
LABEL_70:
  ++*(_DWORD *)(a1 + 576);
  if (*v55 != -4096 || *((_DWORD *)v55 + 2) != -1)
    --*(_DWORD *)(a1 + 580);
  *v55 = a2;
  *((_DWORD *)v55 + 2) = v8;
  *((_DWORD *)v55 + 4) = v23;
  return v23;
}

llvm::Type **sub_1C500EF80(uint64_t a1, unsigned int a2, llvm::Type *a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v9;
  uint64_t *v10;
  unsigned __int8 *OneMDString;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _OWORD v16[3];

  if (!a3 || *((_BYTE *)a3 + 8) != 9)
    return llvm::BitcodeReaderValueList::getValueFwdRef((llvm::BitcodeReaderValueList *)(a1 + 616), a2, a3, a4);
  v4 = *(_QWORD *)(a1 + 680);
  v5 = (uint64_t)(*(_QWORD *)(v4 + 608) - *(_QWORD *)(v4 + 600)) >> 4;
  if (v5 > a2)
  {
    v10 = *(uint64_t **)a3;
    OneMDString = llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString((llvm::MetadataLoader::MetadataLoaderImpl *)v4, a2);
    return (llvm::Type **)llvm::MetadataAsValue::get(v10, OneMDString);
  }
  else if (*(_DWORD *)(v4 + 8) > a2 && (v6 = *(unsigned __int8 **)(*(_QWORD *)v4 + 8 * a2)) != 0)
  {
    return (llvm::Type **)llvm::MetadataAsValue::get(*(uint64_t **)a3, v6);
  }
  else
  {
    v14 = *(uint64_t **)a3;
    v15 = *(_QWORD *)(a1 + 680);
    v13 = a2;
    if (v5 + ((uint64_t)(*(_QWORD *)(v4 + 632) - *(_QWORD *)(v4 + 624)) >> 3) <= a2)
    {
      v12 = sub_1C501FA6C(v4, a2);
      return (llvm::Type **)llvm::MetadataAsValue::get(v14, v12);
    }
    else
    {
      memset(v16, 0, sizeof(v16));
      sub_1C501F798(v4, a2, (uint64_t)v16);
      sub_1C5019980(v15, (llvm::MDNode *)v16);
      if (*(_DWORD *)(v15 + 8) <= a2)
        v9 = 0;
      else
        v9 = *(unsigned __int8 **)(*(_QWORD *)v15 + 8 * v13);
      sub_1C5020964((uint64_t)v16);
      return (llvm::Type **)llvm::MetadataAsValue::get(v14, v9);
    }
  }
}

void sub_1C500F0B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t AttributeAtIndex;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t ParamElementType;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  const char *v40;
  int v41;
  char *v42;
  void *v43;
  int v44;
  _BOOL4 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void **v50[4];
  __int16 v51;
  unsigned int v52;
  uint64_t v53;
  void *__p;
  char *v55;
  uint64_t v56;

  v7 = 0;
  v56 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a3 + 64);
  v53 = v8;
  v9 = (uint64_t *)(a3 - 32);
  v48 = a3 - 8;
LABEL_2:
  v52 = v7;
  v10 = *(unsigned __int8 *)(a3 + 16);
  if (v10 == 84)
  {
    v11 = 0;
  }
  else if (v10 == 39)
  {
    v11 = (*(_DWORD *)(a3 + 80) + 1);
  }
  else
  {
    v11 = 2;
  }
  v12 = *(_DWORD *)(a3 + 20);
  if (v12 < 0 && (v22 = v12 & 0x7FFFFFF, (*(_QWORD *)(v48 - 32 * v22) & 0xFFFFFFFF0) != 0))
  {
    v14 = -v22;
    v13 = *(_DWORD *)(a3 - 32 * v22 - 12) - *(_DWORD *)(a3 - 32 * v22 - *(_QWORD *)(a3 - 32 * v22 - 8));
  }
  else
  {
    v13 = 0;
    v14 = -(uint64_t)(v12 & 0x7FFFFFF);
  }
  if (v7 != (((unint64_t)&v9[4 * -v13] + -a3 + -32 * v11 + -32 * v14) >> 5))
  {
    v15 = 0;
    __p = (void *)0x4900000045;
    LODWORD(v55) = 71;
    while (1)
    {
      if (v8)
      {
        v16 = v52;
        if (v52 + 2 < *(_DWORD *)(v8 + 8))
        {
          v17 = *(_QWORD *)(v8 + 8 * (v52 + 2) + 40);
          if (v17)
          {
            v18 = *(_DWORD *)((char *)&__p + v15);
            if (((*(unsigned __int8 *)(v17 + v18 / 8 + 12) >> (v18 & 7)) & 1) != 0)
            {
              AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(&v53, v52 + 1, *(_DWORD *)((char *)&__p + v15));
              if (!AttributeAtIndex || !*(_QWORD *)(AttributeAtIndex + 16))
              {
                v20 = sub_1C500FA10(a2, *(_DWORD *)(a4 + 4 * v16));
                if (!v20)
                {
                  v39 = a2 + 8;
                  v40 = "Missing element type for typed attribute upgrade";
                  goto LABEL_45;
                }
                v21 = llvm::Attribute::get(*(uint64_t **)(a2 + 424), v18, v20);
                v8 = llvm::AttributeList::addParamAttribute(&v53, *(uint64_t **)(a2 + 424), &v52, 1, v21);
                v53 = v8;
              }
            }
          }
        }
      }
      v15 += 4;
      if (v15 == 12)
      {
        v7 = v52 + 1;
        goto LABEL_2;
      }
    }
  }
  v23 = *v9;
  v24 = *(unsigned __int8 *)(*v9 + 16);
  if (v24 == 24)
  {
    v52 = 0;
    v27 = *(char **)(v23 + 48);
    v25 = v23 + 48;
    v26 = v27;
    v28 = *(_BYTE *)(v25 + 23);
    if (v28 >= 0)
      v29 = (char *)v25;
    else
      v29 = v26;
    v30 = *(_QWORD *)(v25 + 8);
    if (v28 >= 0)
      v31 = v28 & 0x7F;
    else
      v31 = v30;
    llvm::InlineAsm::ParseConstraints(v29, v31, (uint64_t *)&__p);
    v33 = (char *)__p;
    v32 = v55;
    if (__p == v55)
    {
      v41 = 1;
      if (!__p)
        goto LABEL_53;
      goto LABEL_49;
    }
    v34 = 0;
    while (!*(_DWORD *)v33)
    {
      if (v33[13])
        goto LABEL_41;
LABEL_38:
      v52 = ++v34;
LABEL_39:
      v33 += 80;
      if (v33 == v32)
      {
        v41 = 1;
        goto LABEL_46;
      }
    }
    if (*(_DWORD *)v33 != 1 || !v33[13])
      goto LABEL_39;
LABEL_41:
    ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v53, v34);
    v34 = v52;
    if (!ParamElementType)
    {
      v36 = sub_1C500FA10(a2, *(_DWORD *)(a4 + 4 * v52));
      if (!v36)
      {
        v50[0] = (void **)"Missing element type for inline asm upgrade";
        v51 = 259;
        sub_1C500A780(a1, a2 + 8, (llvm::Twine *)v50);
        v41 = 0;
LABEL_46:
        v33 = (char *)__p;
        if (!__p)
        {
LABEL_53:
          if (v41)
          {
            v23 = *v9;
            if (*v9)
            {
              v24 = *(unsigned __int8 *)(v23 + 16);
              goto LABEL_56;
            }
            goto LABEL_79;
          }
          return;
        }
LABEL_49:
        v42 = v55;
        v43 = v33;
        if (v55 != v33)
        {
          do
          {
            v50[0] = (void **)(v42 - 32);
            sub_1C50107D8(v50);
            v50[0] = (void **)(v42 - 64);
            sub_1C4765410(v50);
            v42 -= 80;
          }
          while (v42 != v33);
          v43 = __p;
        }
        v55 = v33;
        operator delete(v43);
        goto LABEL_53;
      }
      v37 = *(uint64_t **)(a2 + 424);
      v38 = llvm::Attribute::get(v37, 70, v36);
      v53 = llvm::AttributeList::addParamAttribute(&v53, v37, &v52, 1, v38);
      v34 = v52;
    }
    goto LABEL_38;
  }
LABEL_56:
  if (v24 || *(_QWORD *)(v23 + 24) != *(_QWORD *)(a3 + 72))
    goto LABEL_79;
  v44 = *(_DWORD *)(v23 + 36);
  if (v44 > 650)
  {
    if (v44 <= 3652)
    {
      if (v44 != 651 && v44 != 3647)
        goto LABEL_79;
    }
    else if (v44 != 3653 && v44 != 4055 && v44 != 4053)
    {
      goto LABEL_79;
    }
  }
  else if (v44 > 449)
  {
    if (v44 != 450 && v44 != 649)
      goto LABEL_79;
  }
  else if ((v44 - 241) >= 2 && v44 != 447)
  {
    goto LABEL_79;
  }
  v45 = 1;
  if (v44 <= 4052 && v44 != 649)
    v45 = v44 == 651;
  LODWORD(__p) = v45;
  if (llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v53, v45))
  {
LABEL_79:
    *(_QWORD *)(a3 + 64) = v53;
    *a1 = 0;
  }
  else
  {
    v46 = sub_1C500FA10(a2, *(_DWORD *)(a4 + 4 * v45));
    if (v46)
    {
      v47 = llvm::Attribute::get(*(uint64_t **)(a2 + 424), 70, v46);
      v53 = llvm::AttributeList::addParamAttribute(&v53, *(uint64_t **)(a2 + 424), &__p, 1, v47);
      goto LABEL_79;
    }
    v39 = a2 + 8;
    v40 = "Missing element type for elementtype upgrade";
LABEL_45:
    v50[0] = (void **)v40;
    v51 = 259;
    sub_1C500A780(a1, v39, (llvm::Twine *)v50);
  }
}

void sub_1C500F5AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t v10;
  const char *v11;
  const char *v12;
  __int16 v13;

  if (*(_BYTE *)(a4 + 8) == 15)
  {
    v4 = *(_QWORD *)(a4 + 24);
    if (v4)
      v5 = v4 == a3;
    else
      v5 = 1;
    if (v5)
    {
      v6 = *(unsigned __int8 *)(a3 + 8);
      v7 = v6 > 0xE;
      v8 = (1 << v6) & 0x5B80;
      if (v7 || v8 == 0)
      {
        *a1 = 0;
        return;
      }
      v10 = a2 + 8;
      v11 = "Cannot load/store from pointer";
    }
    else
    {
      v10 = a2 + 8;
      v11 = "Explicit load/store type does not match pointee type of pointer operand";
    }
  }
  else
  {
    v10 = a2 + 8;
    v11 = "Load/Store operand is not a pointer type";
  }
  v12 = v11;
  v13 = 259;
  sub_1C500A780(a1, v10, (llvm::Twine *)&v12);
}

_QWORD *sub_1C500F648(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4E2FDA8(a1, v7);
      v17 = 0;
      sub_1C4E2FBDC((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4E2FDA8(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C500F778(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  int32x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;

  v3 = (char *)*a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    abort();
  v10 = a1[2] - (_QWORD)v3;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  if (v11)
  {
    if (v11 >> 59)
      sub_1C4764EE4();
    v12 = (char *)operator new(32 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = (uint64_t)&v12[32 * v5];
  v14 = *a2;
  *(_QWORD *)v13 = 6;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = v14;
  if (v14 != -8192 && v14 != -4096 && v14)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v13);
    v3 = (char *)*a1;
    v4 = a1[1];
  }
  v15 = &v12[32 * v11];
  *(_DWORD *)(v13 + 24) = *a3;
  v16 = v13 + 32;
  if ((char *)v4 == v3)
  {
    *a1 = v13;
    a1[1] = v16;
    a1[2] = (uint64_t)v15;
    if (!v3)
      return v16;
    goto LABEL_34;
  }
  do
  {
    v13 -= 32;
    v4 -= 32;
    sub_1C500F9A4(v13, v4);
  }
  while ((char *)v4 != v3);
  v3 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v13;
  a1[1] = v16;
  for (a1[2] = (uint64_t)v15; v17 != v3; v17 -= 32)
  {
    v18 = *((_QWORD *)v17 - 2);
    if (v18 && v18 != -8192 && v18 != -4096)
    {
      v19 = *((_QWORD *)v17 - 4) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v19 = *((_QWORD *)v17 - 3);
      v20 = (unint64_t *)*((_QWORD *)v17 - 3);
      if (v20)
      {
        *v20 = *v20 & 7 | v19;
      }
      else
      {
        v21 = *((_QWORD *)v17 - 2);
        v22 = ***(int32x2_t ****)v21;
        v23 = (unint64_t)v22[303];
        if (v23 <= v19)
        {
          v24 = v22[305].u32[0];
          if (v23 + 16 * v24 > v19)
          {
            v25 = v24 - 1;
            LODWORD(v26) = v25 & ((v21 >> 4) ^ (v21 >> 9));
            v27 = (uint64_t *)(v23 + 16 * v26);
            v28 = *v27;
            if (v21 == *v27)
            {
LABEL_29:
              *v27 = -8192;
              v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
              v21 = *((_QWORD *)v17 - 2);
            }
            else
            {
              v29 = 1;
              while (v28 != -4096)
              {
                v30 = v26 + v29++;
                v26 = v30 & v25;
                v28 = *(_QWORD *)(v23 + 16 * v26);
                if (v21 == v28)
                {
                  v27 = (uint64_t *)(v23 + 16 * v26);
                  goto LABEL_29;
                }
              }
            }
            *(_BYTE *)(v21 + 17) &= ~1u;
          }
        }
      }
    }
  }
  if (v3)
LABEL_34:
    operator delete(v3);
  return v16;
}

uint64_t sub_1C500F9A4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t *v5;

  *(_QWORD *)result = 6;
  *(_QWORD *)(result + 8) = 0;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 16) = v2;
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
  {
    v4 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(result + 8) = *(_QWORD *)v4;
    *(_QWORD *)v4 = result;
    *(_QWORD *)result = v4 | 6;
    v5 = *(uint64_t **)(result + 8);
    if (v5)
      *v5 = *v5 & 7 | (result + 8);
  }
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

unint64_t sub_1C500FA10(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  unsigned int v7;

  v2 = *(_QWORD *)(a1 + 520);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 528) - v2) >> 3) || *(_BYTE *)(*(_QWORD *)(v2 + 8 * a2) + 8) != 15)
    return 0;
  v4 = *(_QWORD *)(a1 + 544);
  v5 = *(unsigned int *)(a1 + 560);
  v6 = sub_1C4E341F8(v4, v5, a2);
  if ((int *)(v4 + 32 * v5) == v6 || !v6[4])
    v7 = -1;
  else
    v7 = **((_DWORD **)v6 + 1);
  return sub_1C500E8C8((_QWORD *)a1, v7);
}

_QWORD *sub_1C500FAB0(_QWORD *result, char *a2, char *a3)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _WORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[1];
  v8 = v7 + ((a3 - a2) >> 3);
  if (result[2] < v8)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 2);
    v7 = v5[1];
  }
  if (v4 != a3)
  {
    v9 = (_WORD *)(*v5 + 2 * v7);
    do
    {
      v10 = *(_QWORD *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[1] = v7 + (v6 >> 3);
  return result;
}

_QWORD *sub_1C500FB34(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61D0BC4(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1C500FBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v8;
  const char *v9;
  char v10;
  uint64_t v11;
  const char *v12;
  char v13;
  __int16 v14;
  const char *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(unsigned int *)(a3 + 32);
  *(_QWORD *)(a3 + 16) = (4 * a2) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a3 + 32) = 0;
  if (((32 * (_BYTE)a2) & 0x20) != 0)
  {
    sub_1C4FF7E04(a3, (32 * (_BYTE)a2) & 0x20, (uint64_t)&v12);
    if ((v13 & 1) != 0)
    {
      v9 = v12;
      if (v12)
        goto LABEL_12;
    }
  }
  sub_1C4FF7B90(a3, 0, (uint64_t)&v15);
  if ((v16 & 1) != 0)
  {
    v9 = v15;
LABEL_12:
    v10 = *(_BYTE *)(a1 + 8) | 1;
LABEL_14:
    *(_BYTE *)(a1 + 8) = v10;
    *(_QWORD *)a1 = v9;
    return;
  }
  if ((_DWORD)v15 == 2 && HIDWORD(v15) == 14)
  {
    v9 = (const char *)(8 * v5 - v6);
    v10 = *(_BYTE *)(a1 + 8) & 0xFE;
    goto LABEL_14;
  }
  v12 = "Expected value symbol table subblock";
  v14 = 259;
  sub_1C4FFAA54((llvm::Twine *)&v12, &v11);
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v11;
  if ((v16 & 1) != 0)
  {
    v8 = v15;
    v15 = 0;
    if (v8)
      (*(void (**)(const char *))(*(_QWORD *)v8 + 8))(v8);
  }
}

void sub_1C500FD34(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t ***v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ****v35;
  uint64_t ***v36;
  int v37;
  int v38;
  uint64_t ***v39;
  unsigned __int8 *v40;
  size_t v41;
  size_t v42;
  size_t *inserted;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  __int16 v47;
  uint64_t v48;
  void *__s;
  __int128 v50;
  _QWORD v51[17];

  v51[16] = *MEMORY[0x1E0C80C00];
  __s = v51;
  v50 = xmmword_1C85F20B0;
  v7 = *(unsigned int *)(a3 + 8);
  if (v7 < a4)
  {
    v46[0] = "Invalid record";
    v47 = 259;
    sub_1C500A780(&v48, a2 + 8, (llvm::Twine *)v46);
    *(_BYTE *)(a1 + 8) |= 1u;
    v8 = v48;
LABEL_16:
    *(_QWORD *)a1 = v8;
    goto LABEL_17;
  }
  v12 = (uint64_t *)(*(_QWORD *)a3 + 8 * a4);
  v13 = *(_QWORD *)a3 + 8 * v7 - (_QWORD)v12;
  v14 = v13 >> 3;
  if ((unint64_t)v13 >= 0x401)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__s, v51, v13 >> 3, 1);
    v15 = v50;
  }
  else
  {
    v15 = 0;
  }
  if ((_DWORD)v7 != a4)
  {
    v16 = (char *)__s + v15;
    v17 = 8 * v7 - 8 * a4;
    do
    {
      v18 = *v12++;
      *v16++ = v18;
      v17 -= 8;
    }
    while (v17);
    v15 = v50;
  }
  v19 = v15 + v14;
  *(_QWORD *)&v50 = v19;
  v20 = *(_QWORD *)(a2 + 616);
  if (((unint64_t)(*(_QWORD *)(a2 + 624) - v20) >> 5) <= **(_QWORD **)a3
    || (v21 = *(uint64_t ****)(v20 + 32 * **(_QWORD **)a3 + 16)) == 0)
  {
    v46[0] = "Invalid record";
    v47 = 259;
    sub_1C500A780(&v45, a2 + 8, (llvm::Twine *)v46);
    *(_BYTE *)(a1 + 8) |= 1u;
    v8 = v45;
    goto LABEL_16;
  }
  v22 = __s;
  if (v19)
  {
    v23 = memchr(__s, 0, v19);
    if (v23)
    {
      if (v23 - v22 != -1)
      {
        v46[0] = "Invalid value name";
        v47 = 259;
        sub_1C500A780(&v44, a2 + 8, (llvm::Twine *)v46);
        *(_BYTE *)(a1 + 8) |= 1u;
        v8 = v44;
        goto LABEL_16;
      }
    }
  }
  v47 = 261;
  v46[0] = v22;
  v46[1] = v19;
  llvm::Value::setName(v21, (uint64_t)v46);
  v24 = *((unsigned __int8 *)v21 + 16);
  if (v24 <= 3 && v24 != 1)
  {
    v46[0] = 0;
    if (sub_1C61B75F0(*(_QWORD *)(a2 + 720), *(_DWORD *)(a2 + 736), (uint64_t)v21, v46))
    {
      v27 = v46[0];
      v28 = *(_QWORD *)(a2 + 720);
      v29 = *(unsigned int *)(a2 + 736);
    }
    else
    {
      v28 = *(_QWORD *)(a2 + 720);
      v29 = *(unsigned int *)(a2 + 736);
      v27 = v28 + 8 * v29;
    }
    if (v27 != v28 + 8 * v29)
    {
      v30 = *(_DWORD *)(a5 + 44);
      if (v30 > 9 || ((1 << v30) & 0x320) == 0)
      {
        if ((*((_BYTE *)v21 + 23) & 0x10) == 0)
        {
          v41 = 0;
          v40 = (unsigned __int8 *)&byte_1C871356D;
          goto LABEL_42;
        }
        v31 = ***v21;
        v32 = *(_QWORD *)(v31 + 152);
        v33 = *(unsigned int *)(v31 + 168);
        if ((_DWORD)v33)
        {
          LODWORD(v34) = (v33 - 1) & ((v21 >> 4) ^ (v21 >> 9));
          v35 = (uint64_t ****)(v32 + 16 * v34);
          v36 = *v35;
          if (*v35 == v21)
          {
LABEL_41:
            v39 = v35[1];
            v42 = (size_t)*v39;
            v40 = (unsigned __int8 *)(v39 + 2);
            v41 = v42;
LABEL_42:
            inserted = llvm::Module::getOrInsertComdat(*(_QWORD *)(a2 + 432), v40, v41);
            llvm::GlobalObject::setComdat((llvm::GlobalObject *)v21, (llvm::Comdat *)inserted);
            goto LABEL_25;
          }
          v37 = 1;
          while (v36 != (uint64_t ***)-4096)
          {
            v38 = v34 + v37++;
            v34 = v38 & (v33 - 1);
            v36 = *(uint64_t ****)(v32 + 16 * v34);
            if (v36 == v21)
            {
              v35 = (uint64_t ****)(v32 + 16 * v34);
              goto LABEL_41;
            }
          }
        }
        v35 = (uint64_t ****)(v32 + 16 * v33);
        goto LABEL_41;
      }
    }
  }
LABEL_25:
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_QWORD *)a1 = v21;
LABEL_17:
  if (__s != v51)
    free(__s);
}

void sub_1C50100A0(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 3);
    if (v8 >> 61)
      abort();
    v9 = v4 - v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 61)
        sub_1C4764EE4();
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * (v7 >> 3)];
    v13 = &v11[8 * v10];
    bzero(v12, 8 * a2);
    if (v5 != v6)
    {
      do
      {
        v14 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v12 - 1) = v14;
        v12 -= 8;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = &v11[8 * a2 + v7];
    a1[2] = v13;
    if (v5)
      operator delete(v5);
  }
}

_BYTE *sub_1C50101C4(unsigned int *a1, uint64_t a2, char *__src, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  int v20;
  _BYTE *__srca;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 2;
  v9 = a1[2];
  v10 = a1[3];
  v11 = a4 - __src;
  v12 = v9 + ((a4 - __src) >> 2);
  if (*(_QWORD *)a1 + 4 * v9 == a2)
  {
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12, 4);
      LODWORD(v9) = a1[2];
      v7 = *(_QWORD *)a1;
    }
    if (v5 != a4)
    {
      memcpy((void *)(v7 + 4 * v9), v5, v11);
      LODWORD(v9) = a1[2];
      v7 = *(_QWORD *)a1;
    }
    a1[2] = v9 + (v11 >> 2);
    return (_BYTE *)(v7 + 4 * v8);
  }
  else
  {
    v15 = (uint64_t)v11 >> 2;
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12, 4);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v16 = (_BYTE *)(v7 + 4 * v9);
    __srca = (_BYTE *)(v7 + 4 * v8);
    v17 = (v16 - __srca) >> 2;
    if (v17 >= v15)
    {
      sub_1C617D750(a1, &v16[-4 * v15], (char *)(v7 + 4 * v9));
      if (&v16[-4 * v15] != __srca)
        memmove(&__srca[4 * v15], __srca, &v16[-4 * v15] - __srca);
      if (v5 != a4)
      {
        v13 = __srca;
        memmove(__srca, v5, v11);
        return v13;
      }
    }
    else
    {
      v18 = v9 + (v11 >> 2);
      a1[2] = v18;
      if (v8 != v9)
      {
        v19 = (_DWORD *)(v7 + 4 * v8);
        memcpy((void *)(v7 + 4 * v18 - 4 * v17), __srca, v16 - __srca);
        do
        {
          v20 = *(_DWORD *)v5;
          v5 += 4;
          *v19++ = v20;
          --v17;
        }
        while (v17);
      }
      if (v5 != a4)
        memcpy(v16, v5, a4 - v5);
    }
    return __srca;
  }
}

double sub_1C5010368(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  double result;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    v6 = *(_QWORD *)a1 + 32 * v5;
    v7 = *(_DWORD *)v6;
    if (*a2 == *(_DWORD *)v6)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      v6 = *(_QWORD *)a1 + 32 * v5;
      v7 = *(_DWORD *)v6;
      if (*a2 == *(_DWORD *)v6)
        return result;
    }
    if (v8)
      v6 = v8;
  }
  else
  {
    v6 = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_1C5010580((uint64_t *)a1, 2 * v4);
    v14 = *(_DWORD *)(a1 + 16);
    if (v14)
    {
      v15 = v14 - 1;
      v16 = (37 * *a2) & v15;
      v6 = *(_QWORD *)a1 + 32 * v16;
      v17 = *(_DWORD *)v6;
      if (*a2 == *(_DWORD *)v6)
        goto LABEL_15;
      v18 = 0;
      v19 = 1;
      while (v17 != -1)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == -2;
        if (v20)
          v18 = v6;
        v21 = v16 + v19++;
        v16 = v21 & v15;
        v6 = *(_QWORD *)a1 + 32 * v16;
        v17 = *(_DWORD *)v6;
        if (*a2 == *(_DWORD *)v6)
          goto LABEL_15;
      }
LABEL_45:
      if (v18)
        v6 = v18;
      goto LABEL_15;
    }
LABEL_44:
    v6 = 0;
    goto LABEL_15;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C5010580((uint64_t *)a1, v4);
    v22 = *(_DWORD *)(a1 + 16);
    if (v22)
    {
      v23 = v22 - 1;
      v24 = (37 * *a2) & v23;
      v6 = *(_QWORD *)a1 + 32 * v24;
      v25 = *(_DWORD *)v6;
      if (*a2 == *(_DWORD *)v6)
        goto LABEL_15;
      v18 = 0;
      v26 = 1;
      while (v25 != -1)
      {
        if (v18)
          v27 = 0;
        else
          v27 = v25 == -2;
        if (v27)
          v18 = v6;
        v28 = v24 + v26++;
        v24 = v28 & v23;
        v6 = *(_QWORD *)a1 + 32 * v24;
        v25 = *(_DWORD *)v6;
        if (*a2 == *(_DWORD *)v6)
          goto LABEL_15;
      }
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_15:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)v6 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)v6 = *a2;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(v6 + 16) = 0x100000000;
  return result;
}

_DWORD *sub_1C5010580(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  unsigned int v20;
  int *v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if (!(_DWORD)v3)
LABEL_46:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[8 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if (*v13 <= 0xFFFFFFFD)
        break;
LABEL_24:
      v13 += 8;
      if (v13 == v12)
        goto LABEL_46;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & (37 * v14);
    v17 = *a1 + 32 * v16;
    v18 = *(_DWORD *)v17;
    if (v14 != *(_DWORD *)v17)
    {
      v25 = 0;
      v26 = 1;
      while (v18 != -1)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v18 == -2;
        if (v27)
          v25 = v17;
        v28 = v16 + v26++;
        v16 = v28 & v15;
        v17 = *a1 + 32 * v16;
        v18 = *(_DWORD *)v17;
        if (v14 == *(_DWORD *)v17)
          goto LABEL_12;
      }
      if (v25)
        v17 = v25;
    }
LABEL_12:
    v19 = (void *)(v17 + 24);
    *(_QWORD *)(v17 + 8) = v17 + 24;
    *(_DWORD *)v17 = v14;
    *(_QWORD *)(v17 + 16) = 0x100000000;
    v20 = v13[4];
    v21 = (int *)*((_QWORD *)v13 + 1);
    if ((int *)v17 == v13 || v20 == 0)
    {
LABEL_22:
      ++*((_DWORD *)a1 + 2);
      if (v21 != v13 + 6)
        free(v21);
      goto LABEL_24;
    }
    if (v21 != v13 + 6)
    {
      *(_QWORD *)(v17 + 8) = v21;
      v24 = v13[5];
      *(_DWORD *)(v17 + 16) = v20;
      *(_DWORD *)(v17 + 20) = v24;
      *((_QWORD *)v13 + 1) = v13 + 6;
      v13[5] = 0;
      v21 = v13 + 6;
      goto LABEL_21;
    }
    if (v20 >= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 8, v17 + 24, v13[4], 4);
      v23 = v13[4];
      if (!(_DWORD)v23)
        goto LABEL_20;
      v21 = (int *)*((_QWORD *)v13 + 1);
      v19 = *(void **)(v17 + 8);
    }
    else
    {
      v23 = v13[4];
    }
    memcpy(v19, v21, 4 * v23);
LABEL_20:
    *(_DWORD *)(v17 + 16) = v20;
    v21 = (int *)*((_QWORD *)v13 + 1);
LABEL_21:
    v13[4] = 0;
    goto LABEL_22;
  }
  a1[1] = 0;
  v29 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v29)
  {
    v30 = 32 * v29;
    do
    {
      *result = -1;
      result += 8;
      v30 -= 32;
    }
    while (v30);
  }
  return result;
}

void sub_1C50107D8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        sub_1C4765410(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C5010850(uint64_t *a1, __int128 *a2, __n128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v4;
  v19 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_1C4764EE4();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  __p = v9;
  v16 = &v9[48 * v3];
  v18 = &v9[48 * v8];
  sub_1C501099C((uint64_t)v16, a2, a3);
  v17 = v16 + 48;
  sub_1C5010A18(a1, &__p);
  v10 = a1[1];
  v11 = (uint64_t)v16;
  while (1)
  {
    v12 = v17;
    if (v17 == (char *)v11)
      break;
    v17 -= 48;
    v13 = (void *)*((_QWORD *)v12 - 3);
    if (v13)
    {
      *((_QWORD *)v12 - 2) = v13;
      operator delete(v13);
    }
    if (*(v12 - 25) < 0)
      operator delete(*((void **)v12 - 6));
  }
  if (__p)
    operator delete(__p);
  return v10;
}

__n128 sub_1C501099C(uint64_t a1, __int128 *a2, __n128 *a3)
{
  unint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(&v7, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 2);
  }
  v5 = a3[1].n128_u64[0];
  result = *a3;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  *(_OWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t *sub_1C5010A18(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      v6 = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 48;
      v4 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void sub_1C5010ABC(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t i;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = a1[1];
  v3 = (v2 - *a1) >> 5;
  if (a2 > v3)
  {
    sub_1C5010BE4(a1, a2 - v3);
  }
  else if (a2 < v3)
  {
    for (i = *a1 + 32 * a2; v2 != i; v2 -= 32)
    {
      v5 = *(_QWORD *)(v2 - 16);
      if (v5 != -8192 && v5 != -4096 && v5 != 0)
      {
        v7 = *(_QWORD *)(v2 - 32) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = *(_QWORD *)(v2 - 24);
        v8 = *(unint64_t **)(v2 - 24);
        if (v8)
        {
          *v8 = *v8 & 7 | v7;
        }
        else
        {
          v9 = *(_QWORD *)(v2 - 16);
          v10 = ***(int32x2_t ****)v9;
          v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              v15 = (uint64_t *)(v11 + 16 * v14);
              v16 = *v15;
              if (v9 == *v15)
              {
LABEL_17:
                *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                v9 = *(_QWORD *)(v2 - 16);
              }
              else
              {
                v17 = 1;
                while (v16 != -4096)
                {
                  v18 = v14 + v17++;
                  v14 = v18 & v13;
                  v16 = *(_QWORD *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_17;
                  }
                }
              }
              *(_BYTE *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
    }
    a1[1] = i;
  }
}

void sub_1C5010BE4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int32x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      v12 = v5 + 32 * a2;
      do
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)v5 = 6;
        *(_DWORD *)(v5 + 24) = 0;
        v5 += 32;
      }
      while (v5 != v12);
      v5 = v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (void *)*a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 5);
    if (v8 >> 59)
      abort();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 59)
        sub_1C4764EE4();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (uint64_t)&v11[32 * (v7 >> 5)];
    v14 = v13 + 32 * a2;
    v15 = v13;
    do
    {
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)v15 = 6;
      *(_DWORD *)(v15 + 24) = 0;
      v15 += 32;
    }
    while (v15 != v14);
    v16 = &v11[32 * v10];
    while ((void *)v5 != v6)
    {
      v13 -= 32;
      v5 -= 32;
      sub_1C500F9A4(v13, v5);
    }
    v17 = (char *)*a1;
    v18 = (char *)a1[1];
    *a1 = v13;
    a1[1] = v14;
    for (a1[2] = (uint64_t)v16; v18 != v17; v18 -= 32)
    {
      v19 = *((_QWORD *)v18 - 2);
      if (v19 && v19 != -8192 && v19 != -4096)
      {
        v20 = *((_QWORD *)v18 - 4) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v20 = *((_QWORD *)v18 - 3);
        v21 = (unint64_t *)*((_QWORD *)v18 - 3);
        if (v21)
        {
          *v21 = *v21 & 7 | v20;
        }
        else
        {
          v22 = *((_QWORD *)v18 - 2);
          v23 = ***(int32x2_t ****)v22;
          v24 = (unint64_t)v23[303];
          if (v24 <= v20)
          {
            v25 = v23[305].u32[0];
            if (v24 + 16 * v25 > v20)
            {
              v26 = v25 - 1;
              LODWORD(v27) = v26 & ((v22 >> 4) ^ (v22 >> 9));
              v28 = (uint64_t *)(v24 + 16 * v27);
              v29 = *v28;
              if (v22 == *v28)
              {
LABEL_35:
                *v28 = -8192;
                v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
                v22 = *((_QWORD *)v18 - 2);
              }
              else
              {
                v30 = 1;
                while (v29 != -4096)
                {
                  v31 = v27 + v30++;
                  v27 = v31 & v26;
                  v29 = *(_QWORD *)(v24 + 16 * v27);
                  if (v22 == v29)
                  {
                    v28 = (uint64_t *)(v24 + 16 * v27);
                    goto LABEL_35;
                  }
                }
              }
              *(_BYTE *)(v22 + 17) &= ~1u;
            }
          }
        }
      }
    }
    if (v17)
      operator delete(v17);
  }
}

void sub_1C5010E14(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        if (*(v4 - 25) < 0)
          operator delete(*((void **)v4 - 6));
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C5010E9C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a2)
  {
    sub_1C5010E9C(a1, *a2);
    sub_1C5010E9C(a1, a2[1]);
    v4 = (_QWORD *)a2[4];
    if (v4 != a2 + 7)
      free(v4);
    operator delete(a2);
  }
}

void sub_1C5010F00(uint64_t *a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  llvm::BitstreamCursor *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;
  unint64_t v15;
  std::string::size_type v16;
  const char *v17;
  void *v18;
  int v19;
  int v20;
  void *v21;
  unsigned int v22;
  std::string::size_type v23;
  uint64_t v24;
  size_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  llvm::AttrBuilder *v32;
  unint64_t v33;
  __int16 v34;
  size_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  void *v39;
  unsigned int *v40;
  unint64_t v41;
  __int16 v42;
  uint64_t v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  void *v48;
  std::string::size_type v49;
  const char *v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int16 v60;
  unint64_t v61;
  unint64_t v62;
  __int16 v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t Sorted;
  uint64_t v67;
  uint64_t v68;
  char v69;
  llvm::GlobalValue *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  llvm::GlobalValue *v97;
  llvm::GlobalValue *v98;
  std::string::size_type v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  _BYTE *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  char hasOpaquePointersValue;
  llvm::LLVMContextImpl *v125;
  unsigned int *v126;
  llvm::Type *v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  int v132;
  std::string::size_type v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  _DWORD *v137;
  int64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t *v144;
  uint64_t v145;
  std::string::size_type size;
  unint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t **v157;
  unsigned int v158;
  BOOL v159;
  int v160;
  BOOL v161;
  uint64_t v162;
  unint64_t v163;
  llvm::ArrayType *v164;
  unsigned int v165;
  BOOL v166;
  int v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  unint64_t v172;
  llvm::PointerType *v173;
  unsigned int v174;
  BOOL v175;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  std::string::size_type v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t *v185;
  _DWORD *v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int i;
  unint64_t v190;
  unint64_t v191;
  int v192;
  uint64_t v194;
  unsigned int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t *v201;
  unint64_t v202;
  std::string::size_type v203;
  unint64_t v204;
  uint64_t *v205;
  _DWORD *v206;
  int64_t v207;
  uint64_t v208;
  int v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  std::string::size_type v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t *v222;
  _DWORD *v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  llvm::Type *v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unsigned int v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  void **v238;
  _QWORD *v239;
  llvm::GlobalValue *v240;
  unint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _DWORD *v244;
  _DWORD *v245;
  int v246;
  void *v247;
  void *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  llvm::PointerType *v252;
  uint64_t v253;
  uint64_t v254;
  int *v255;
  unsigned int v256;
  _DWORD *v257;
  unint64_t v258;
  int v259;
  size_t v260;
  std::string *v261;
  uint64_t *v262;
  unint64_t v263;
  __int128 v264;
  const char *v265;
  char *v266;
  unint64_t v267;
  std::string::size_type v268;
  const char *v269;
  char *v270;
  unint64_t v271;
  std::string::size_type v272;
  const char *v273;
  uint64_t *v274;
  uint64_t *v275;
  uint64_t v276;
  std::string::size_type v277;
  std::string::size_type v278;
  uint64_t *v279;
  _BYTE *v280;
  uint64_t v281;
  uint64_t v282;
  std::string *v283;
  size_t v284;
  unint64_t v285;
  __int128 v286;
  unint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  uint64_t v291;
  BOOL v292;
  uint64_t *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  unint64_t v299;
  unint64_t v300;
  int v301;
  const char *v302;
  std::string *p_p;
  unint64_t v304;
  std::string::size_type v305;
  std::string *v306;
  size_t v307;
  const char *v308;
  unint64_t *v309;
  uint64_t *v310;
  uint64_t v311;
  std::string::size_type v312;
  std::string::size_type v313;
  unint64_t *v314;
  _BYTE *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  llvm::StringMapImpl *v319;
  char v320;
  uint64_t v321;
  char v322;
  llvm::GlobalValue *v323;
  llvm::GlobalValue *v324;
  std::string::size_type v325;
  std::string *v326;
  unint64_t v327;
  std::string *v328;
  uint64_t v329;
  char v330;
  void *v331;
  std::string *v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  char *v337;
  char *v338;
  __int128 v339;
  int64x2_t v340;
  void *v341;
  std::string::size_type v342;
  const char *v343;
  unint64_t v344;
  llvm::PointerType *v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int *v350;
  unsigned int v351;
  unint64_t v352;
  llvm::PointerType *v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  int *v357;
  unsigned int v358;
  uint64_t *v359;
  uint64_t v360;
  char *v361;
  unint64_t v362;
  std::string::size_type v363;
  void *v364;
  unint64_t v365;
  uint64_t *v366;
  const char *v367;
  char *v368;
  char *v369;
  unint64_t v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unsigned int v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  char v380;
  char v381;
  int v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t *v385;
  char v386;
  uint64_t v387;
  uint64_t v388;
  char v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  unsigned int v394;
  unint64_t v395;
  uint64_t v396;
  int v397;
  int v398;
  BOOL v399;
  char v400;
  _DWORD *v401;
  uint64_t v402;
  _DWORD *v403;
  llvm::GlobalValue *v404;
  int v405;
  unsigned int v406;
  size_t v407;
  std::string *v408;
  llvm::GlobalValue *v409;
  llvm::GlobalValue *v410;
  llvm::GlobalValue *v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  int v415;
  unsigned int v416;
  llvm::GlobalValue **v417;
  llvm::GlobalValue *v418;
  int v419;
  unsigned int v420;
  unsigned int v421;
  int v422;
  unsigned int v423;
  unsigned int v424;
  int v425;
  int v426;
  uint64_t *v427;
  llvm::GlobalValue *v428;
  unsigned int v429;
  int v430;
  uint64_t v431;
  int v432;
  unsigned int v433;
  llvm::GlobalValue **v434;
  llvm::GlobalValue *v435;
  char *v436;
  llvm::GlobalValue **v437;
  int v438;
  BOOL v439;
  unsigned int v440;
  llvm::GlobalValue **v441;
  int v442;
  int v443;
  unsigned int v444;
  unsigned int v445;
  llvm::GlobalValue *v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  llvm::GlobalObject *v452;
  uint64_t v453;
  llvm::GlobalValue *v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t v457;
  int v458;
  uint64_t AttributeAtIndex;
  uint64_t v460;
  uint64_t v461;
  int *v462;
  unsigned int v463;
  unint64_t v464;
  unint64_t v465;
  llvm::GlobalValue *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int *v470;
  unsigned int v471;
  uint64_t j;
  size_t *inserted;
  _QWORD *v474;
  size_t *v475;
  size_t **v476;
  unint64_t v477;
  _QWORD *v478;
  _QWORD *v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  char *v484;
  int v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  llvm::GlobalValue *v491;
  llvm::GlobalValue **v492;
  unint64_t v493;
  _QWORD *v494;
  char *v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  char *v499;
  llvm::GlobalValue **v500;
  int v501;
  BOOL v502;
  unsigned int v503;
  llvm::GlobalValue **v504;
  llvm::GlobalValue **v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  size_t **v512;
  size_t *v513;
  unint64_t v514;
  uint64_t v515;
  int v516;
  uint64_t v517;
  int v518;
  unsigned int v519;
  uint64_t v520;
  char v521;
  size_t v522;
  int data;
  unint64_t v524;
  uint64_t v525;
  char *v526;
  unint64_t v527;
  _DWORD *v528;
  char *v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  unint64_t v533;
  char *v534;
  char *v535;
  char *v536;
  _QWORD *v537;
  int v538;
  size_t v539;
  unint64_t v540;
  unint64_t v541;
  llvm::GlobalValue *v542;
  unint64_t v543;
  uint64_t v544;
  llvm::GlobalValue *v545;
  int v546;
  unsigned int v547;
  uint64_t v548;
  unint64_t v549;
  uint64_t v550;
  uint64_t v551;
  char v552;
  llvm::GlobalValue *v553;
  size_t v554;
  llvm::GlobalValue *v555;
  llvm::GlobalValue *v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  int v560;
  unsigned int v561;
  llvm::GlobalValue **v562;
  llvm::GlobalValue *v563;
  int v564;
  int v565;
  unint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  llvm::GlobalValue *v570;
  __int128 *v571;
  __int128 v572;
  const char *v573;
  llvm::GlobalValue *v574;
  unint64_t v575;
  char hasExternalWeakLinkage;
  llvm::GlobalValue **v577;
  std::string::size_type v578;
  llvm::GlobalValue **v579;
  int v580;
  BOOL v581;
  unsigned int v582;
  int v583;
  int v584;
  unsigned int *v585;
  unsigned int v586;
  int v587;
  int v588;
  llvm::GlobalValue *v589;
  int v590;
  uint64_t v591;
  uint64_t v592;
  size_t v593;
  uint64_t v594;
  llvm::GlobalValue *v595;
  llvm::GlobalValue *v596;
  int v597;
  unint64_t v598;
  uint64_t v599;
  int v600;
  llvm::GlobalObject **v601;
  unint64_t v602;
  _QWORD *v603;
  _QWORD *v604;
  unint64_t v605;
  unint64_t v606;
  unint64_t v607;
  char *v608;
  int v609;
  int v610;
  uint64_t v611;
  uint64_t v612;
  char *v613;
  char *v614;
  __int128 v615;
  _QWORD *v616;
  char *v617;
  llvm::GlobalValue *v618;
  llvm::GlobalValue **v619;
  unint64_t v620;
  _QWORD *v621;
  _QWORD *v622;
  uint64_t v623;
  unint64_t v624;
  uint64_t v625;
  unint64_t v626;
  char *v627;
  llvm::GlobalValue **v628;
  llvm::GlobalValue *v629;
  llvm::GlobalValue **v630;
  std::string::size_type v631;
  uint64_t v632;
  _DWORD *v633;
  _BYTE *v634;
  uint64_t v635;
  _BYTE *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  _QWORD *v640;
  uint64_t v641;
  uint64_t v642;
  _QWORD *v643;
  _BYTE *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  _QWORD *v648;
  std::string::size_type v649;
  char v650;
  char v651;
  int v652;
  unsigned __int8 v653;
  uint64_t v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t v657;
  unint64_t v658;
  llvm::GlobalObject *v659;
  llvm::GlobalObject *v660;
  llvm::GlobalObject *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  char *v665;
  char v666;
  unint64_t v667;
  uint64_t v668;
  unsigned int v669;
  unint64_t v670;
  unsigned int v671;
  int v672;
  unint64_t v673;
  _DWORD *v674;
  int v675;
  void *v676;
  std::string::size_type v677;
  unint64_t v678;
  unint64_t v679;
  unsigned int v680;
  int v681;
  int v682;
  int v683;
  llvm::GlobalObject *v684;
  llvm::GlobalObject *v685;
  llvm::GlobalObject *v686;
  llvm::GlobalObject *v687;
  llvm::GlobalObject *v688;
  llvm::GlobalObject *v689;
  llvm::GlobalValue *v690;
  unsigned int v691;
  void *v692;
  uint64_t v693;
  uint64_t *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t *v699;
  unint64_t *v700;
  _QWORD *v701;
  std::string **v702;
  uint64_t **v704;
  uint64_t v705;
  uint64_t v706;
  _QWORD v707[3];
  char v708;
  _QWORD v709[2];
  unsigned int v710[8];
  __int16 v711;
  unsigned int v712;
  uint64_t v713;
  char v714;
  void *v715;
  uint64_t v716;
  _BYTE v717[512];
  llvm::GlobalValue *v718;
  __int128 v719;
  _BYTE v720[64];
  void *v721;
  __int128 v722;
  uint64_t v723;
  __int16 v724;
  void *v725;
  uint64_t v726;
  _BYTE v727[16];
  __int16 v728;
  uint64_t v729;
  char v730;
  std::string __p;
  unint64_t v732;
  _QWORD *v733;
  std::string v734;
  uint64_t v735;
  __int16 v736;
  char v737;
  uint64_t v738;

  v6 = a2;
  v738 = *MEMORY[0x1E0C80C00];
  v709[0] = a5;
  v709[1] = a6;
  if (a3)
  {
    *(_QWORD *)(a2 + 48) = (a3 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(a2 + 64) = 0;
    if ((a3 & 0x3F) != 0
      && (sub_1C4FF7E04(a2 + 32, a3 & 0x3F, (uint64_t)&v734), (v734.__r_.__value_.__s.__data_[8] & 1) != 0))
    {
      v649 = v734.__r_.__value_.__r.__words[0];
      *a1 = v734.__r_.__value_.__r.__words[0];
      if (v649)
        return;
    }
    else
    {
      *a1 = 0;
    }
  }
  else
  {
    llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 8, a1);
    if (*a1)
      return;
  }
  v715 = v717;
  v716 = 0x4000000000;
  v8 = v6 + 8;
  v708 = 0;
  v9 = (llvm::BitstreamCursor *)(v6 + 32);
  v693 = v6 + 1728;
  v707[0] = &v708;
  v707[1] = v6;
  v707[2] = v709;
  v692 = (void *)(v6 + 1752);
  v701 = (_QWORD *)(v6 + 1720);
  v702 = (std::string **)(v6 + 1704);
  v698 = v6 + 544;
  v704 = (uint64_t **)(v6 + 1368);
  v697 = v6 + 592;
  v699 = (unint64_t *)(v6 + 496);
  v700 = (unint64_t *)(v6 + 472);
  v696 = v6 + 720;
  v694 = (uint64_t *)(v6 + 616);
  v695 = v6 + 1496;
  v705 = v6 + 8;
  v706 = v6;
  do
  {
    sub_1C4FF7B90((uint64_t)v9, 0, (uint64_t)&v713);
    if ((v714 & 1) != 0)
    {
      v10 = v713;
      v713 = 0;
      *a1 = v10;
      goto LABEL_14;
    }
    switch((_DWORD)v713)
    {
      case 2:
        switch(HIDWORD(v713))
        {
          case 0:
            sub_1C50163F0(a1, v8);
            goto LABEL_838;
          case 9:
            llvm::BitstreamCursor::EnterSubBlock(v9, 0, 9, a1);
            if (*a1)
              goto LABEL_838;
            if (*(_QWORD *)(v6 + 1344) != *(_QWORD *)(v6 + 1352))
              goto LABEL_590;
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)&v734.__r_.__value_.__r.__words[2];
            v734.__r_.__value_.__l.__size_ = 0x4000000000;
            v721 = (char *)&v722 + 8;
            *(_QWORD *)&v722 = 0x800000000;
            while (2)
            {
              sub_1C4FF7B90((uint64_t)v9, 0, (uint64_t)&__p);
              if ((__p.__r_.__value_.__s.__data_[8] & 1) != 0)
              {
                v98 = (llvm::GlobalValue *)__p.__r_.__value_.__r.__words[0];
LABEL_1312:
                *a1 = (uint64_t)v98;
              }
              else
              {
                if (LODWORD(__p.__r_.__value_.__l.__data_) == 2)
                {
                  sub_1C4FF3F30((uint64_t)v9, (uint64_t *)&v718);
                  v98 = v718;
                  if ((__p.__r_.__value_.__s.__data_[8] & 1) != 0)
                  {
                    v99 = __p.__r_.__value_.__r.__words[0];
                    __p.__r_.__value_.__r.__words[0] = 0;
                    if (v99)
                      (*(void (**)(std::string::size_type))(*(_QWORD *)v99 + 8))(v99);
                  }
                  v8 = v705;
                  v6 = v706;
                  if (v98)
                    goto LABEL_1312;
                  continue;
                }
                if (LODWORD(__p.__r_.__value_.__l.__data_) == 1)
                {
                  *a1 = 0;
                }
                else
                {
                  if (LODWORD(__p.__r_.__value_.__l.__data_))
                  {
                    LODWORD(v734.__r_.__value_.__r.__words[1]) = 0;
                    llvm::BitstreamCursor::readRecord((uint64_t)v9, SHIDWORD(__p.__r_.__value_.__r.__words[0]), (uint64_t)&v734, 0, (uint64_t)&v718);
                    if ((v719 & 1) != 0)
                    {
                      v69 = 0;
                      v70 = v718;
                      v718 = 0;
                      *a1 = (uint64_t)v70;
                    }
                    else
                    {
                      if ((_DWORD)v718 == 2)
                      {
                        if (LODWORD(v734.__r_.__value_.__r.__words[1]))
                        {
                          v71 = 0;
                          v72 = 8 * LODWORD(v734.__r_.__value_.__r.__words[1]);
                          do
                          {
                            LODWORD(__p.__r_.__value_.__l.__data_) = *(_DWORD *)(v734.__r_.__value_.__r.__words[0] + v71);
                            v73 = sub_1C4FCE2AC(v704, __p.__r_.__value_.__l.__data_, &__p)[5];
                            v74 = v722;
                            if (v722 >= (unint64_t)DWORD1(v722))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v721, (uint64_t)&v722 + 8, v722 + 1, 8);
                              v74 = v722;
                            }
                            *((_QWORD *)v721 + v74) = v73;
                            v75 = v722 + 1;
                            LODWORD(v722) = v722 + 1;
                            v71 += 8;
                          }
                          while (v72 != v71);
                          v8 = v705;
                          v6 = v706;
                        }
                        else
                        {
                          v75 = v722;
                        }
                        v87 = llvm::AttributeList::get(*(uint64_t **)(v6 + 424), (uint64_t *)v721, v75);
                        v77 = (_QWORD *)v6;
                        v78 = v87;
                        v79 = (uint64_t *)v77[169];
                        v88 = v77[170];
                        if ((unint64_t)v79 >= v88)
                        {
                          v90 = (_QWORD *)v77[168];
                          v91 = v79 - v90;
                          v92 = v91 + 1;
                          if ((unint64_t)(v91 + 1) >> 61)
                            goto LABEL_1330;
                          v93 = v88 - (_QWORD)v90;
                          if (v93 >> 2 > v92)
                            v92 = v93 >> 2;
                          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
                            v85 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v85 = v92;
                          if (v85)
                          {
                            if (v85 >> 61)
                              goto LABEL_1331;
                            v86 = (char *)operator new(8 * v85);
                          }
                          else
                          {
                            v86 = 0;
                          }
                          v94 = &v86[8 * v91];
                          *(_QWORD *)v94 = v78;
                          v89 = v94 + 8;
                          if (v79 != v90)
                          {
                            v6 = v706;
                            do
                            {
                              v95 = *--v79;
                              *((_QWORD *)v94 - 1) = v95;
                              v94 -= 8;
                            }
                            while (v79 != v90);
                            goto LABEL_267;
                          }
LABEL_268:
                          v6 = v706;
                          goto LABEL_269;
                        }
LABEL_248:
                        *v79 = v78;
                        v89 = v79 + 1;
                        v6 = (uint64_t)v77;
LABEL_272:
                        *(_QWORD *)(v6 + 1352) = v89;
                        LODWORD(v722) = 0;
                        v69 = 1;
                        goto LABEL_273;
                      }
                      if ((_DWORD)v718 == 1)
                      {
                        v51 = v734.__r_.__value_.__r.__words[1];
                        if ((v734.__r_.__value_.__s.__data_[8] & 1) == 0)
                        {
                          if (LODWORD(v734.__r_.__value_.__r.__words[1]))
                          {
                            v52 = 0;
                            do
                            {
                              __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v6 + 424);
                              __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v732;
                              __p.__r_.__value_.__r.__words[2] = 0x800000000;
                              v53 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v52 | 1));
                              if ((v53 & 0xFFFF0000) != 0)
                                llvm::AttrBuilder::addAlignmentAttr((uint64_t)&__p, __clz(WORD1(v53)) ^ 0x13F);
                              v54 = (unsigned __int16)v53 | ((HIDWORD(v53) & 0xFFFFF) << 21);
                              if (v54)
                              {
                                v55 = 0;
                                while (1)
                                {
                                  v56 = 0;
                                  switch(v55)
                                  {
                                    case 2:
                                      v56 = 4096;
                                      goto LABEL_206;
                                    case 4:
                                      v56 = 0x20000000000;
                                      goto LABEL_206;
                                    case 5:
                                      v56 = 0x10000000000;
                                      goto LABEL_206;
                                    case 6:
                                      v56 = 0x400000000000;
                                      goto LABEL_206;
                                    case 9:
                                      v56 = 0x2000000000000000;
                                      goto LABEL_206;
                                    case 10:
                                      v56 = 8;
                                      goto LABEL_206;
                                    case 11:
                                      v56 = 0x2000000000000;
                                      goto LABEL_206;
                                    case 12:
                                      v56 = 0x4000000000000;
                                      goto LABEL_206;
                                    case 13:
                                      v56 = 0x2000000;
                                      goto LABEL_206;
                                    case 14:
                                      v56 = 0x200000000000;
                                      goto LABEL_206;
                                    case 15:
                                      v56 = 0x200000000;
                                      goto LABEL_206;
                                    case 17:
                                      v56 = 0x1000000;
                                      goto LABEL_206;
                                    case 18:
                                      v56 = 256;
                                      goto LABEL_206;
                                    case 19:
                                      v56 = 64;
                                      goto LABEL_206;
                                    case 20:
                                      v56 = 0x4000000000;
                                      goto LABEL_206;
                                    case 22:
                                      v56 = 0x200000;
                                      goto LABEL_206;
                                    case 23:
                                      v56 = 0x200000000000000;
                                      goto LABEL_206;
                                    case 24:
                                      v56 = 0x400000000;
                                      goto LABEL_206;
                                    case 25:
                                      v56 = 0x8000000000000000;
                                      goto LABEL_206;
                                    case 26:
                                      v56 = 0x800000;
                                      goto LABEL_206;
                                    case 27:
                                      v56 = 2048;
                                      goto LABEL_206;
                                    case 30:
                                      v56 = 0x1000000000000;
                                      goto LABEL_206;
                                    case 31:
                                      v56 = 0x400000;
                                      goto LABEL_206;
                                    case 32:
                                      v56 = 4;
                                      goto LABEL_206;
                                    case 37:
                                      v56 = 32;
                                      goto LABEL_206;
                                    case 38:
                                      v56 = 0x80000000;
                                      goto LABEL_206;
                                    case 39:
                                      v56 = 0x100000000000;
                                      goto LABEL_206;
                                    case 41:
                                      v56 = 0x400000000000000;
                                      goto LABEL_206;
                                    case 42:
                                      v56 = 0x2000;
                                      goto LABEL_206;
                                    case 43:
                                      v56 = 0x40000000000;
                                      goto LABEL_206;
                                    case 44:
                                      v56 = 512;
                                      goto LABEL_206;
                                    case 45:
                                      v56 = 1024;
                                      goto LABEL_206;
                                    case 46:
                                      v56 = 0x8000000000;
                                      goto LABEL_206;
                                    case 47:
                                      v56 = 0x20000000;
                                      goto LABEL_206;
                                    case 48:
                                      v56 = 2;
                                      goto LABEL_206;
                                    case 49:
                                      v56 = 0x800000000000;
                                      goto LABEL_206;
                                    case 50:
                                      v56 = 0x100000000;
                                      goto LABEL_206;
                                    case 51:
                                      v56 = 0x100000000000000;
                                      goto LABEL_206;
                                    case 53:
                                      v56 = 0x2000000000;
                                      goto LABEL_206;
                                    case 54:
                                      v56 = 0x1000000000;
                                      goto LABEL_206;
                                    case 55:
                                      v56 = 0x800000000000000;
                                      goto LABEL_206;
                                    case 56:
                                      v56 = 0x40000000000000;
                                      goto LABEL_206;
                                    case 57:
                                      v56 = 0x1000000000000000;
                                      goto LABEL_206;
                                    case 58:
                                      v56 = 0x4000;
                                      goto LABEL_206;
                                    case 59:
                                      v56 = 0x8000;
                                      goto LABEL_206;
                                    case 60:
                                      v56 = 0x800000000;
                                      goto LABEL_206;
                                    case 61:
                                      v56 = 0x80000000000000;
                                      goto LABEL_206;
                                    case 63:
                                      v56 = 0x10000000000000;
                                      goto LABEL_206;
                                    case 64:
                                      v56 = 0x8000000000000;
                                      goto LABEL_206;
                                    case 65:
                                      v56 = 0x4000000000000000;
                                      goto LABEL_206;
                                    case 66:
                                      v56 = 0x20000000000000;
                                      goto LABEL_206;
                                    case 67:
                                      v56 = 1;
                                      goto LABEL_206;
                                    case 69:
                                      v56 = 128;
                                      goto LABEL_206;
                                    case 71:
                                      v56 = 0x80000000000;
                                      goto LABEL_206;
                                    case 73:
                                      v56 = 16;
                                      goto LABEL_206;
                                    case 74:
                                      v56 = 2031616;
                                      goto LABEL_206;
                                    case 78:
                                      v56 = 469762048;
                                      goto LABEL_206;
                                    case 79:
                                      v56 = 0x40000000;
                                      goto LABEL_206;
                                    case 81:
                                      goto LABEL_221;
                                    default:
LABEL_206:
                                      v57 = v56 & v54;
                                      if (v57)
                                      {
                                        if (v55 == 78)
                                        {
                                          v61 = (v57 >> 26) - 1;
                                          v62 = __clz((1 << v61)) ^ 0x13F;
                                          if (v61 <= 0x1F)
                                            v63 = v62;
                                          else
                                            v63 = 0;
                                          llvm::AttrBuilder::addStackAlignmentAttr((uint64_t **)&__p, v63);
                                        }
                                        else if (v55 == 74)
                                        {
                                          v58 = (v57 >> 16) - 1;
                                          v59 = __clz((1 << v58)) ^ 0x13F;
                                          if (v58 == 31)
                                            v60 = v59;
                                          else
                                            v60 = 0;
                                          llvm::AttrBuilder::addAlignmentAttr((uint64_t)&__p, v60);
                                        }
                                        else if ((v55 - 68) <= 5)
                                        {
                                          llvm::AttrBuilder::addTypeAttr((uint64_t **)&__p, v55, 0);
                                        }
                                        else
                                        {
                                          llvm::AttrBuilder::addAttribute((unsigned int *)&__p, v55);
                                        }
                                      }
                                      ++v55;
                                      break;
                                  }
                                }
                              }
LABEL_221:
                              v64 = *(uint64_t **)(v706 + 424);
                              v65 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * v52);
                              Sorted = llvm::AttributeSetNode::getSorted(v64, (uint64_t *)__p.__r_.__value_.__l.__size_, LODWORD(__p.__r_.__value_.__r.__words[2]));
                              v67 = llvm::AttributeList::get(v64, v65, Sorted);
                              v68 = v722;
                              if (v722 >= (unint64_t)DWORD1(v722))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v721, (uint64_t)&v722 + 8, v722 + 1, 8);
                                v68 = v722;
                              }
                              *((_QWORD *)v721 + v68) = v67;
                              LODWORD(v722) = v722 + 1;
                              v6 = v706;
                              if ((unint64_t *)__p.__r_.__value_.__l.__size_ != &v732)
                                free((void *)__p.__r_.__value_.__l.__size_);
                              v52 += 2;
                            }
                            while (v52 != v51);
                          }
                          v76 = llvm::AttributeList::get(*(uint64_t **)(v6 + 424), (uint64_t *)v721, v722);
                          v77 = (_QWORD *)v6;
                          v78 = v76;
                          v79 = (uint64_t *)v77[169];
                          v80 = v77[170];
                          if ((unint64_t)v79 >= v80)
                          {
                            v81 = (_QWORD *)v77[168];
                            v82 = v79 - v81;
                            v83 = v82 + 1;
                            if ((unint64_t)(v82 + 1) >> 61)
                              goto LABEL_1330;
                            v84 = v80 - (_QWORD)v81;
                            if (v84 >> 2 > v83)
                              v83 = v84 >> 2;
                            if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                              v85 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v85 = v83;
                            if (v85)
                            {
                              if (v85 >> 61)
                                goto LABEL_1331;
                              v86 = (char *)operator new(8 * v85);
                            }
                            else
                            {
                              v86 = 0;
                            }
                            v94 = &v86[8 * v82];
                            *(_QWORD *)v94 = v78;
                            v89 = v94 + 8;
                            if (v79 != v81)
                            {
                              v6 = v706;
                              do
                              {
                                v96 = *--v79;
                                *((_QWORD *)v94 - 1) = v96;
                                v94 -= 8;
                              }
                              while (v79 != v81);
LABEL_267:
                              v79 = *(uint64_t **)(v6 + 1344);
LABEL_269:
                              *(_QWORD *)(v6 + 1344) = v94;
                              *(_QWORD *)(v6 + 1352) = v89;
                              *(_QWORD *)(v6 + 1360) = &v86[8 * v85];
                              if (v79)
                                operator delete(v79);
                              v8 = v705;
                              goto LABEL_272;
                            }
                            goto LABEL_268;
                          }
                          goto LABEL_248;
                        }
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid parameter attribute record";
                        LOWORD(v733) = 259;
                        sub_1C500A780(a1, v8, (llvm::Twine *)&__p);
                        v69 = 0;
                      }
                      else
                      {
                        v69 = 1;
                      }
                    }
LABEL_273:
                    if ((v719 & 1) != 0)
                    {
                      v97 = v718;
                      v718 = 0;
                      if (v97)
                        (*(void (**)(llvm::GlobalValue *))(*(_QWORD *)v97 + 8))(v97);
                    }
                    if ((v69 & 1) == 0)
                      break;
                    continue;
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
                  LOWORD(v733) = 259;
                  sub_1C500A780(a1, v8, (llvm::Twine *)&__p);
                }
              }
              break;
            }
            v368 = (char *)v721;
            v369 = (char *)&v722 + 8;
            goto LABEL_834;
          case 0xA:
            llvm::BitstreamCursor::EnterSubBlock(v9, 0, 10, a1);
            if (*a1)
              goto LABEL_838;
            if (*(_QWORD *)(v6 + 1384))
              goto LABEL_590;
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)&v734.__r_.__value_.__r.__words[2];
            v734.__r_.__value_.__l.__size_ = 0x4000000000;
            while (1)
            {
              sub_1C4FF7B90((uint64_t)v9, 0, (uint64_t)&__p);
              if ((__p.__r_.__value_.__s.__data_[8] & 1) != 0)
                goto LABEL_1307;
              switch(LODWORD(__p.__r_.__value_.__l.__data_))
              {
                case 2:
                  sub_1C4FF3F30((uint64_t)v9, (uint64_t *)&v721);
                  v48 = v721;
                  if ((__p.__r_.__value_.__s.__data_[8] & 1) != 0)
                  {
                    v49 = __p.__r_.__value_.__r.__words[0];
                    __p.__r_.__value_.__r.__words[0] = 0;
                    if (v49)
                      (*(void (**)(std::string::size_type))(*(_QWORD *)v49 + 8))(v49);
                  }
                  v8 = v705;
                  v6 = v706;
                  if (!v48)
                    continue;
                  goto LABEL_1308;
                case 1:
                  goto LABEL_831;
                case 0:
                  goto LABEL_773;
              }
              LODWORD(v734.__r_.__value_.__r.__words[1]) = 0;
              llvm::BitstreamCursor::readRecord((uint64_t)v9, SHIDWORD(__p.__r_.__value_.__r.__words[0]), (uint64_t)&v734, 0, (uint64_t)&v725);
              if ((v726 & 1) != 0)
              {
                LOBYTE(v20) = 0;
                v21 = v725;
                v725 = 0;
                *a1 = (uint64_t)v21;
                goto LABEL_110;
              }
              if ((_DWORD)v725 != 3)
                goto LABEL_109;
              v19 = v734.__r_.__value_.__r.__words[1];
              v683 = LODWORD(v734.__r_.__value_.__r.__words[1]) - 2;
              if (LODWORD(v734.__r_.__value_.__r.__words[1]) <= 2)
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid grp record";
                LOWORD(v733) = 259;
                sub_1C500A780(a1, v8, (llvm::Twine *)&__p);
                LOBYTE(v20) = 0;
                goto LABEL_110;
              }
              v662 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8);
              v668 = *(_QWORD *)v734.__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v6 + 424);
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v732;
              __p.__r_.__value_.__r.__words[2] = 0x800000000;
              v22 = 2;
              v675 = v734.__r_.__value_.__r.__words[1];
              while (2)
              {
                v23 = v734.__r_.__value_.__r.__words[0];
                v24 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * v22);
                switch(v24)
                {
                  case 0:
                    LODWORD(v718) = 0;
                    v26 = v22 + 1;
                    sub_1C5016DA4(a1, v6, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 1)), &v718);
                    v8 = v705;
                    if (*a1)
                      goto LABEL_118;
                    HIDWORD(v31) = (_DWORD)v718 - 69;
                    LODWORD(v31) = (_DWORD)v718 - 69;
                    switch((v31 >> 1))
                    {
                      case 0u:
                        llvm::AttrBuilder::addByValAttr((uint64_t **)&__p, 0);
                        goto LABEL_94;
                      case 1u:
                        llvm::AttrBuilder::addInAllocaAttr((uint64_t **)&__p, 0);
                        goto LABEL_94;
                      case 2u:
                        llvm::AttrBuilder::addStructRetAttr((llvm::AttrBuilder *)&__p, 0);
                        goto LABEL_94;
                      case 5u:
                        LODWORD(v43) = 2;
                        goto LABEL_103;
                      default:
                        if (((_DWORD)v718 - 1) > 0x42)
                        {
                          v721 = "Not an enum attribute";
                          v724 = 259;
                          sub_1C500A780(a1, v705, (llvm::Twine *)&v721);
LABEL_118:
                          v20 = 0;
                          goto LABEL_106;
                        }
                        llvm::AttrBuilder::addAttribute((unsigned int *)&__p, (int)v718);
                        break;
                    }
                    goto LABEL_94;
                  case 1:
                    LODWORD(v718) = 0;
                    v26 = v22 + 1;
                    sub_1C5016DA4(a1, v6, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 1)), &v718);
                    if (*a1)
                      goto LABEL_105;
                    if (((_DWORD)v718 - 74) < 7)
                    {
                      switch((int)v718)
                      {
                        case 'J':
                          v26 = v22 + 2;
                          v33 = __clz(*(unsigned int *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2))) ^ 0x13F;
                          if (*(_DWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2)))
                            v34 = v33;
                          else
                            v34 = 0;
                          llvm::AttrBuilder::addAlignmentAttr((uint64_t)&__p, v34);
                          break;
                        case 'K':
                          v26 = v22 + 2;
                          llvm::AttrBuilder::addAllocSizeAttrFromRawRepr((uint64_t **)&__p, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2)));
                          break;
                        case 'L':
                          v26 = v22 + 2;
                          llvm::AttrBuilder::addDereferenceableAttr((llvm::AttrBuilder *)&__p, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2)));
                          break;
                        case 'M':
                          v26 = v22 + 2;
                          llvm::AttrBuilder::addDereferenceableOrNullAttr((uint64_t **)&__p, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2)));
                          break;
                        case 'N':
                          v26 = v22 + 2;
                          v41 = __clz(*(unsigned int *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2))) ^ 0x13F;
                          if (*(_DWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2)))
                            v42 = v41;
                          else
                            v42 = 0;
                          llvm::AttrBuilder::addStackAlignmentAttr((uint64_t **)&__p, v42);
                          break;
                        case 'O':
                          v26 = v22 + 2;
                          v43 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2));
LABEL_103:
                          llvm::AttrBuilder::addUWTableAttr((uint64_t **)&__p, v43);
                          break;
                        case 'P':
                          v26 = v22 + 2;
                          llvm::AttrBuilder::addVScaleRangeAttrFromRawRepr((uint64_t **)&__p, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2)));
                          break;
                        default:
                          break;
                      }
LABEL_94:
                      v22 = v26 + 1;
                      if (v26 + 1 == v19)
                      {
                        llvm::UpgradeAttributes((llvm *)&__p, v32);
                        v45 = *(uint64_t **)(v706 + 424);
                        v46 = llvm::AttributeSetNode::getSorted(v45, (uint64_t *)__p.__r_.__value_.__l.__size_, LODWORD(__p.__r_.__value_.__r.__words[2]));
                        v47 = (uint64_t *)llvm::AttributeList::get(v45, v662, v46);
                        LODWORD(v721) = v668;
                        sub_1C4FCE2AC(v704, v668, &v721)[5] = v47;
                        v8 = v705;
                        v6 = v706;
                        v20 = 1;
                        goto LABEL_106;
                      }
                      continue;
                    }
                    v721 = "Not an int attribute";
                    v724 = 259;
                    sub_1C500A780(a1, v705, (llvm::Twine *)&v721);
LABEL_105:
                    v20 = 0;
                    v8 = v705;
LABEL_106:
                    if ((unint64_t *)__p.__r_.__value_.__l.__size_ != &v732)
                      free((void *)__p.__r_.__value_.__l.__size_);
                    if (v20)
LABEL_109:
                      LOBYTE(v20) = 1;
LABEL_110:
                    if ((v726 & 1) != 0)
                    {
                      v44 = v725;
                      v725 = 0;
                      if (v44)
                        (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
                    }
                    if ((v20 & 1) == 0)
                    {
LABEL_836:
                      if ((std::string::size_type *)v734.__r_.__value_.__l.__data_ != &v734.__r_.__value_.__r.__words[2])
                        free(v734.__r_.__value_.__l.__data_);
                      goto LABEL_838;
                    }
                    break;
                  case 3:
                  case 4:
                    v25 = 0;
                    v721 = &v723;
                    v722 = xmmword_1C64638C0;
                    v718 = (llvm::GlobalValue *)v720;
                    v719 = xmmword_1C64638C0;
                    v26 = v22 + 1;
                    if (v22 + 1 == v19)
                    {
                      v28 = v22;
                    }
                    else
                    {
                      v27 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * v26);
                      if (v27)
                      {
                        v25 = 0;
                        do
                        {
                          if (v25 + 1 > *((_QWORD *)&v722 + 1))
                          {
                            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v721, &v723, v25 + 1, 1);
                            v25 = v722;
                          }
                          *((_BYTE *)v721 + v25) = v27;
                          v25 = v722 + 1;
                          *(_QWORD *)&v722 = v722 + 1;
                          v23 = v734.__r_.__value_.__r.__words[0];
                          v28 = v22 + 1;
                          if (v683 == v22)
                            break;
                          v27 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2));
                          ++v22;
                        }
                        while (v27);
                        v26 = v28 + 1;
                      }
                      else
                      {
                        v28 = v22;
                      }
                      v19 = v675;
                    }
                    if (v24 == 4)
                    {
                      v26 = v28 + 2;
                      v35 = v719;
                      if (v28 + 2 != v19)
                      {
                        v36 = *(_QWORD *)(v23 + 8 * v26);
                        if (v36)
                        {
                          v37 = v28 + 3;
                          do
                          {
                            if (v35 + 1 > *((_QWORD *)&v719 + 1))
                            {
                              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v718, v720, v35 + 1, 1);
                              v35 = v719;
                            }
                            *((_BYTE *)v718 + v35) = v36;
                            v35 = v719 + 1;
                            *(_QWORD *)&v719 = v719 + 1;
                            v38 = v37 + 1;
                            if (v19 == v37)
                              break;
                            v36 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * v37++);
                          }
                          while (v36);
                          v25 = v722;
                          v26 = v38 - 1;
                        }
                      }
                    }
                    else
                    {
                      v35 = v719;
                    }
                    v39 = v721;
                    v40 = llvm::Attribute::get((uint64_t *)__p.__r_.__value_.__l.__data_, (unsigned __int8 *)v721, v25, (unsigned __int8 *)v718, v35);
                    sub_1C532EADC((uint64_t)&__p.__r_.__value_.__l.__size_, v39, v25, (uint64_t)v40);
                    if (v718 != (llvm::GlobalValue *)v720)
                      free(v718);
                    v6 = v706;
                    if (v721 != &v723)
                      free(v721);
                    goto LABEL_94;
                  case 5:
                  case 6:
                    LODWORD(v718) = 0;
                    v26 = v22 + 1;
                    sub_1C5016DA4(a1, v6, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 1)), &v718);
                    if (*a1)
                      goto LABEL_105;
                    v29 = (int)v718;
                    if (((_DWORD)v718 - 68) >= 6)
                    {
                      v721 = "Not a type attribute";
                      v724 = 259;
                      sub_1C500A780(a1, v705, (llvm::Twine *)&v721);
                      v6 = v706;
                      goto LABEL_105;
                    }
                    if (v24 == 6)
                    {
                      v26 = v22 + 2;
                      v30 = sub_1C500E8C8((_QWORD *)v706, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * (v22 + 2)));
                    }
                    else
                    {
                      v30 = 0;
                    }
                    llvm::AttrBuilder::addTypeAttr((uint64_t **)&__p, v29, v30);
                    v6 = v706;
                    goto LABEL_94;
                  default:
                    v721 = "Invalid attribute group entry";
                    v724 = 259;
                    v8 = v705;
                    sub_1C500A780(a1, v705, (llvm::Twine *)&v721);
                    v20 = 0;
                    goto LABEL_106;
                }
                break;
              }
            }
          case 0xB:
            sub_1C500AC84(a1, v6);
            if (*a1)
              goto LABEL_14;
            sub_1C501652C(a1, (_QWORD *)v6);
            goto LABEL_838;
          case 0xC:
            sub_1C5015FA0((uint64_t)v707);
            if (*(_BYTE *)(v6 + 1488))
              goto LABEL_585;
            v287 = *(_QWORD *)(v6 + 1416);
            v288 = *(_QWORD *)(v6 + 1424);
            if (v287 != v288)
            {
              v289 = (_QWORD *)(v288 - 8);
              if (v287 < (unint64_t)v289)
              {
                v290 = v287 + 8;
                do
                {
                  v291 = *(_QWORD *)(v290 - 8);
                  *(_QWORD *)(v290 - 8) = *v289;
                  *v289-- = v291;
                  v292 = v290 >= (unint64_t)v289;
                  v290 += 8;
                }
                while (!v292);
              }
            }
            sub_1C50160EC(a1, (_QWORD *)v6);
            if (*a1)
              goto LABEL_14;
            *(_BYTE *)(v6 + 1488) = 1;
LABEL_585:
            v249 = *(_QWORD *)(v6 + 464);
            if (!v249)
              goto LABEL_666;
            if (*(_BYTE *)(v6 + 456))
            {
LABEL_587:
              sub_1C4FF3F30((uint64_t)v9, a1);
              goto LABEL_838;
            }
            sub_1C500DA3C(a1, v6, v249);
            if (*a1)
              goto LABEL_14;
            *(_BYTE *)(v6 + 456) = 1;
LABEL_666:
            sub_1C500A908(a1, v6);
            if (*a1)
              goto LABEL_14;
            if (*(_BYTE *)(v6 + 456))
            {
              *(_QWORD *)(v6 + 440) = 8 * *(_QWORD *)(v6 + 48) - *(unsigned int *)(v6 + 64);
              goto LABEL_13;
            }
LABEL_669:
            v11 = 2;
            goto LABEL_15;
          case 0xE:
            if (*(_BYTE *)(v6 + 456))
              goto LABEL_587;
            sub_1C500DA3C(a1, v6, 0);
            if (*a1)
              goto LABEL_14;
            *(_BYTE *)(v6 + 456) = 1;
            goto LABEL_669;
          case 0xF:
            if (!a4)
            {
              llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*(llvm::MetadataLoader::MetadataLoaderImpl **)(v6 + 680), 1, a1);
              goto LABEL_838;
            }
            v100 = 8 * *(_QWORD *)(v6 + 48) - *(unsigned int *)(v6 + 64);
            v101 = *(uint64_t **)(v6 + 1528);
            v102 = *(_QWORD *)(v6 + 1536);
            if ((unint64_t)v101 >= v102)
            {
              v293 = *(uint64_t **)(v6 + 1520);
              v294 = v101 - v293;
              v295 = v294 + 1;
              if ((unint64_t)(v294 + 1) >> 61)
                goto LABEL_1330;
              v296 = v102 - (_QWORD)v293;
              if (v296 >> 2 > v295)
                v295 = v296 >> 2;
              if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFF8)
                v297 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v297 = v295;
              if (v297)
              {
                if (v297 >> 61)
                  goto LABEL_1331;
                v298 = (char *)operator new(8 * v297);
              }
              else
              {
                v298 = 0;
              }
              v359 = (uint64_t *)&v298[8 * v294];
              *v359 = v100;
              v103 = v359 + 1;
              while (v101 != v293)
              {
                v360 = *--v101;
                *--v359 = v360;
              }
              *(_QWORD *)(v706 + 1520) = v359;
              v361 = &v298[8 * v297];
              v6 = v706;
              *(_QWORD *)(v706 + 1528) = v103;
              *(_QWORD *)(v706 + 1536) = v361;
              if (v293)
                operator delete(v293);
            }
            else
            {
              *v101 = v100;
              v103 = v101 + 1;
            }
            v8 = v705;
            *(_QWORD *)(v6 + 1528) = v103;
            sub_1C4FF3F30((uint64_t)v9, a1);
            if (*a1)
            {
              v11 = 1;
            }
            else
            {
              *a1 = 0;
              v11 = 2;
            }
            goto LABEL_15;
          case 0x11:
            llvm::BitstreamCursor::EnterSubBlock(v9, 0, 17, a1);
            if (*a1)
              goto LABEL_838;
            if (*(_QWORD *)(v6 + 520) != *(_QWORD *)(v6 + 528))
              goto LABEL_590;
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)&v734.__r_.__value_.__r.__words[2];
            v734.__r_.__value_.__l.__size_ = 0x4000000000;
            v712 = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v732;
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C64638C0;
            while (1)
            {
              sub_1C4FF7B90((uint64_t)v9, 0, (uint64_t)&v721);
              if ((v722 & 1) != 0)
                break;
              switch((_DWORD)v721)
              {
                case 2:
                  sub_1C4FF3F30((uint64_t)v9, (uint64_t *)&v718);
                  v247 = v718;
                  if ((v722 & 1) != 0)
                  {
                    v248 = v721;
                    v721 = 0;
                    if (v248)
                      (*(void (**)(void *))(*(_QWORD *)v248 + 8))(v248);
                  }
                  v8 = v705;
                  v6 = v706;
                  if (v247)
                    goto LABEL_1310;
                  break;
                case 1:
                  if (v712 == (uint64_t)(*(_QWORD *)(v6 + 528) - *(_QWORD *)(v6 + 520)) >> 3)
                  {
                    *a1 = 0;
                  }
                  else
                  {
LABEL_828:
                    v721 = "Malformed block";
                    v724 = 259;
                    sub_1C500A780(a1, v8, (llvm::Twine *)&v721);
                  }
LABEL_829:
                  v368 = (char *)__p.__r_.__value_.__r.__words[0];
                  v369 = (char *)&v732;
LABEL_834:
                  if (v368 != v369)
                    free(v368);
                  goto LABEL_836;
                case 0:
                  goto LABEL_828;
                default:
                  LODWORD(v734.__r_.__value_.__r.__words[1]) = 0;
                  v718 = (llvm::GlobalValue *)((char *)&v719 + 8);
                  *(_QWORD *)&v719 = 0xC00000000;
                  llvm::BitstreamCursor::readRecord((uint64_t)v9, SHIDWORD(v721), (uint64_t)&v734, 0, (uint64_t)&v729);
                  if ((v730 & 1) != 0)
                  {
                    v116 = v729;
                    v729 = 0;
                    *a1 = v116;
LABEL_532:
                    v151 = 1;
                    goto LABEL_533;
                  }
                  switch((int)v729)
                  {
                    case 1:
                      if (!LODWORD(v734.__r_.__value_.__r.__words[1]))
                      {
                        v118 = "Invalid numentry record";
LABEL_466:
                        v721 = v118;
                        v724 = 259;
                        v201 = a1;
                        goto LABEL_531;
                      }
                      v104 = *(_QWORD *)v734.__r_.__value_.__l.__data_;
                      v105 = *(char **)(v6 + 528);
                      v106 = v6;
                      v107 = *(_BYTE **)(v6 + 520);
                      v108 = (char *)(v105 - v107);
                      v109 = (v105 - v107) >> 3;
                      if (*(_QWORD *)v734.__r_.__value_.__l.__data_ <= v109)
                      {
                        if (v104 < v109)
                          *(_QWORD *)(v706 + 528) = &v107[8 * v104];
                      }
                      else
                      {
                        v110 = *(_QWORD *)(v106 + 536);
                        if (v104 - v109 <= (v110 - (uint64_t)v105) >> 3)
                        {
                          v202 = v104 - v109;
                          bzero(v105, 8 * (v104 - v109));
                          *(_QWORD *)(v106 + 528) = &v105[8 * v202];
                        }
                        else
                        {
                          if (v104 >> 61)
                            goto LABEL_1330;
                          v684 = (llvm::GlobalObject *)(v104 - v109);
                          v111 = v110 - (_QWORD)v107;
                          if (v111 >> 2 > v104)
                            v104 = v111 >> 2;
                          if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
                            v112 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v112 = v104;
                          if (v112 >> 61)
                            goto LABEL_1331;
                          v676 = operator new(8 * v112);
                          v113 = (char *)v676 + 8 * v109;
                          bzero(v113, 8 * (_QWORD)v684);
                          if (v105 == v107)
                          {
                            v115 = (_QWORD *)v706;
                          }
                          else
                          {
                            do
                            {
                              v114 = *((_QWORD *)v105 - 1);
                              v105 -= 8;
                              *((_QWORD *)v113 - 1) = v114;
                              v113 -= 8;
                            }
                            while (v105 != v107);
                            v115 = (_QWORD *)v706;
                            v105 = *(char **)(v706 + 520);
                          }
                          v115[65] = v113;
                          v115[66] = &v108[8 * (_QWORD)v684 + (_QWORD)v676];
                          v115[67] = (char *)v676 + 8 * v112;
                          if (v105)
                            operator delete(v105);
                        }
                      }
LABEL_367:
                      v151 = 2;
                      goto LABEL_552;
                    case 2:
                      v117 = **(_QWORD **)(v6 + 424) + 1576;
                      goto LABEL_526;
                    case 3:
                      v117 = **(_QWORD **)(v6 + 424) + 1672;
                      goto LABEL_526;
                    case 4:
                      v117 = **(_QWORD **)(v6 + 424) + 1696;
                      goto LABEL_526;
                    case 5:
                      v117 = **(_QWORD **)(v6 + 424) + 1600;
                      goto LABEL_526;
                    case 6:
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) != 1)
                      {
                        v118 = "Invalid opaque type record";
                        goto LABEL_466;
                      }
                      v140 = v712;
                      v141 = *(_QWORD *)(v6 + 520);
                      if (v712 >= (unint64_t)((*(_QWORD *)(v6 + 528) - v141) >> 3))
                        goto LABEL_379;
                      v117 = *(_QWORD *)(v141 + 8 * v712);
                      if (v117)
                      {
                        llvm::StructType::setName(*(_QWORD *)(v141 + 8 * v712), (unsigned __int8 *)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                        *(_QWORD *)(*(_QWORD *)(v6 + 520) + 8 * v140) = 0;
                      }
                      else
                      {
                        v117 = sub_1C5016E2C((_QWORD *)v6, *(_QWORD **)(v6 + 424), (unsigned __int8 *)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                      }
                      __p.__r_.__value_.__l.__size_ = 0;
                      goto LABEL_526;
                    case 7:
                      if (!LODWORD(v734.__r_.__value_.__r.__words[1]))
                      {
                        v118 = "Invalid integer record";
                        goto LABEL_466;
                      }
                      v142 = *(_QWORD *)v734.__r_.__value_.__l.__data_;
                      if ((unint64_t)(*(_QWORD *)v734.__r_.__value_.__l.__data_ - 1) >> 23)
                      {
                        v118 = "Bitwidth for integer type out of range";
                        goto LABEL_466;
                      }
                      v143 = *(_QWORD **)(v6 + 424);
                      LODWORD(v721) = *(_QWORD *)v734.__r_.__value_.__l.__data_;
                      if ((int)v142 <= 63)
                      {
                        if ((int)v142 <= 31)
                        {
                          switch((_DWORD)v142)
                          {
                            case 0x10:
                              v117 = *v143 + 1936;
                              goto LABEL_526;
                            case 8:
                              v117 = *v143 + 1912;
                              goto LABEL_526;
                            case 1:
                              v117 = *v143 + 1888;
                              goto LABEL_526;
                          }
                        }
                        else if ((_DWORD)v142 == 32)
                        {
                          v117 = *v143 + 1960;
                          goto LABEL_526;
                        }
                      }
                      else
                      {
                        if ((_DWORD)v142 == 64)
                        {
                          v117 = *v143 + 1984;
                          goto LABEL_526;
                        }
                        if ((_DWORD)v142 == 128)
                        {
                          v117 = *v143 + 2008;
                          goto LABEL_526;
                        }
                      }
                      v244 = sub_1C5270984(*v143 + 2168, &v721);
                      v117 = *((_QWORD *)v244 + 1);
                      if (!v117)
                      {
                        v245 = v244;
                        v117 = sub_1C484358C(*v143 + 2040, 24, 3);
                        v246 = (int)v721;
                        *(_QWORD *)v117 = v143;
                        *(_QWORD *)(v117 + 16) = 0;
                        *(_QWORD *)(v117 + 8) = (v246 << 8) | 0xDu;
                        *((_QWORD *)v245 + 1) = v117;
                      }
                      goto LABEL_526;
                    case 8:
                      if (!LODWORD(v734.__r_.__value_.__r.__words[1]))
                      {
                        v118 = "Invalid pointer record";
                        goto LABEL_466;
                      }
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) == 2)
                      {
                        v126 = (unsigned int *)v734.__r_.__value_.__r.__words[0];
                        v127 = (llvm::Type *)*(unsigned int *)(v734.__r_.__value_.__r.__words[0] + 8);
                      }
                      else
                      {
                        v127 = 0;
                        v126 = (unsigned int *)v734.__r_.__value_.__r.__words[0];
                      }
                      v172 = sub_1C500E8C8((_QWORD *)v6, *v126);
                      if (!v172)
                        goto LABEL_422;
                      v173 = (llvm::PointerType *)v172;
                      v174 = *(unsigned __int8 *)(v172 + 8);
                      v175 = v174 > 0xC || ((1 << v174) & 0x1380) == 0;
                      if (!v175 || v174 == 11)
                        goto LABEL_422;
                      v199 = *(_DWORD *)v734.__r_.__value_.__l.__data_;
                      v200 = v719;
                      if (v719 >= (unint64_t)DWORD1(v719))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v718, (uint64_t)&v719 + 8, v719 + 1, 4);
                        v200 = v719;
                      }
                      *((_DWORD *)v718 + v200) = v199;
                      LODWORD(v719) = v719 + 1;
                      v170 = llvm::PointerType::get(v173, v127);
                      goto LABEL_506;
                    case 9:
                      v152 = v734.__r_.__value_.__r.__words[1];
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) <= 2)
                        goto LABEL_371;
                      v721 = (char *)&v722 + 8;
                      *(_QWORD *)&v722 = 0x800000000;
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) != 3)
                      {
                        v195 = 3;
                        do
                        {
                          v196 = sub_1C500E8C8((_QWORD *)v706, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * v195));
                          if (!v196)
                            break;
                          v197 = v196;
                          v198 = v722;
                          if (v722 >= (unint64_t)DWORD1(v722))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v721, (uint64_t)&v722 + 8, v722 + 1, 8);
                            v198 = v722;
                          }
                          *((_QWORD *)v721 + v198) = v197;
                          LODWORD(v722) = v722 + 1;
                          ++v195;
                        }
                        while (v152 != v195);
                      }
                      v117 = sub_1C500E8C8((_QWORD *)v706, *(_DWORD *)(v734.__r_.__value_.__r.__words[0] + 16));
                      if (!v117)
                        goto LABEL_404;
                      v171 = v734.__r_.__value_.__r.__words[1];
                      if ((unint64_t)LODWORD(v734.__r_.__value_.__r.__words[1]) - 3 > v722)
                        goto LABEL_404;
                      v203 = v734.__r_.__value_.__r.__words[0];
                      v123 = 8 * LODWORD(v734.__r_.__value_.__r.__words[1]) - 16;
                      v134 = v719;
                      v204 = v719 + (v123 >> 3);
                      if (v204 > DWORD1(v719))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v718, (uint64_t)&v719 + 8, v204, 4);
                        v134 = v719;
                      }
                      v161 = v171 == 2;
                      v8 = v705;
                      if (v161)
                        goto LABEL_474;
                      v205 = (uint64_t *)(v203 + 16);
                      v206 = (_DWORD *)((char *)v718 + 4 * v134);
                      v207 = v123;
                      do
                      {
                        v208 = *v205++;
                        *v206++ = v208;
                        v207 -= 8;
                      }
                      while (v207);
                      goto LABEL_473;
                    case 10:
                      v117 = **(_QWORD **)(v6 + 424) + 1624;
                      goto LABEL_526;
                    case 11:
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) <= 1)
                      {
                        v118 = "Invalid array type record";
                        goto LABEL_466;
                      }
                      v163 = sub_1C500E8C8((_QWORD *)v6, *(_DWORD *)(v734.__r_.__value_.__r.__words[0] + 8));
                      if (!v163)
                        goto LABEL_422;
                      v164 = (llvm::ArrayType *)v163;
                      v165 = *(unsigned __int8 *)(v163 + 8);
                      v166 = v165 > 0xE || ((1 << v165) & 0x5B80) == 0;
                      if (!v166 || v165 == 19)
                        goto LABEL_422;
                      v168 = *(_DWORD *)(v734.__r_.__value_.__r.__words[0] + 8);
                      v169 = v719;
                      if (v719 >= (unint64_t)DWORD1(v719))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v718, (uint64_t)&v719 + 8, v719 + 1, 4);
                        v169 = v719;
                      }
                      *((_DWORD *)v718 + v169) = v168;
                      LODWORD(v719) = v719 + 1;
                      llvm::ArrayType::get(v164, *(llvm::Type **)v734.__r_.__value_.__l.__data_);
                      goto LABEL_506;
                    case 12:
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) <= 1)
                      {
                        v118 = "Invalid vector type record";
                        goto LABEL_466;
                      }
                      if (!*(_QWORD *)v734.__r_.__value_.__l.__data_)
                      {
                        v118 = "Invalid vector length";
                        goto LABEL_466;
                      }
                      v156 = sub_1C500E8C8((_QWORD *)v6, *(_DWORD *)(v734.__r_.__value_.__r.__words[0] + 8));
                      if (!v156
                        || ((v157 = (uint64_t **)v156,
                             v158 = *(unsigned __int8 *)(v156 + 8),
                             v159 = v158 > 0x14,
                             v160 = (1 << v158) & 0x10A07F,
                             !v159)
                          ? (v161 = v160 == 0)
                          : (v161 = 1),
                            v161))
                      {
LABEL_422:
                        v118 = "Invalid type";
                        goto LABEL_466;
                      }
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) < 3)
                        v162 = 0;
                      else
                        v162 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 16);
                      v226 = *(_DWORD *)(v734.__r_.__value_.__r.__words[0] + 8);
                      v227 = v719;
                      if (v719 >= (unint64_t)DWORD1(v719))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v718, (uint64_t)&v719 + 8, v719 + 1, 4);
                        v227 = v719;
                      }
                      *((_DWORD *)v718 + v227) = v226;
                      LODWORD(v719) = v719 + 1;
                      v228 = (llvm::Type *)*(unsigned int *)v734.__r_.__value_.__l.__data_;
                      if (v162)
                        llvm::ScalableVectorType::get(v157, v228);
                      else
                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v157, v228);
                      goto LABEL_506;
                    case 13:
                      v117 = **(_QWORD **)(v6 + 424) + 1768;
                      goto LABEL_526;
                    case 14:
                      v117 = **(_QWORD **)(v6 + 424) + 1792;
                      goto LABEL_526;
                    case 15:
                      v117 = **(_QWORD **)(v6 + 424) + 1816;
                      goto LABEL_526;
                    case 16:
                      v117 = **(_QWORD **)(v6 + 424) + 1720;
                      goto LABEL_526;
                    case 17:
                      v117 = **(_QWORD **)(v6 + 424) + 1840;
                      goto LABEL_526;
                    case 18:
                      v128 = v734.__r_.__value_.__r.__words[1];
                      if (!LODWORD(v734.__r_.__value_.__r.__words[1]))
                      {
                        v153 = "Invalid anon struct record";
                        goto LABEL_530;
                      }
                      v721 = (char *)&v722 + 8;
                      *(_QWORD *)&v722 = 0x800000000;
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) == 1)
                      {
                        v129 = 0;
                        v130 = 1;
                      }
                      else
                      {
                        v177 = 1;
                        do
                        {
                          v178 = sub_1C500E8C8((_QWORD *)v706, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * v177));
                          v129 = v722;
                          if (!v178)
                            break;
                          v179 = v178;
                          if (v722 >= DWORD1(v722))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v721, (uint64_t)&v722 + 8, v722 + 1, 8);
                            v129 = v722;
                          }
                          *((_QWORD *)v721 + v129) = v179;
                          v129 = v722 + 1;
                          LODWORD(v722) = v722 + 1;
                          ++v177;
                        }
                        while (v128 != (_DWORD)v177);
                        v130 = LODWORD(v734.__r_.__value_.__r.__words[1]);
                      }
                      v8 = v705;
                      v180 = v130 - 1;
                      if (v130 - 1 == v129)
                      {
                        v181 = v734.__r_.__value_.__r.__words[0];
                        v182 = 8 * v130 - 8;
                        v183 = v719;
                        v184 = v719 + (v182 >> 3);
                        if (v184 > DWORD1(v719))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v718, (uint64_t)&v719 + 8, v184, 4);
                          v183 = v719;
                        }
                        if (v130 != 1)
                        {
                          v185 = (uint64_t *)(v181 + 8);
                          v186 = (_DWORD *)((char *)v718 + 4 * v183);
                          v187 = 8 * v130 - 8;
                          do
                          {
                            v188 = *v185++;
                            *v186++ = v188;
                            v187 -= 8;
                          }
                          while (v187);
                          LODWORD(v183) = v719;
                        }
                        LODWORD(v719) = v183 + ((unint64_t)v182 >> 3);
                        v117 = llvm::StructType::get(*(uint64_t **)(v706 + 424), (uint64_t)v721, v722, *(_QWORD *)v734.__r_.__value_.__l.__data_ != 0);
                        v151 = 5;
                        v8 = v705;
                      }
                      else
                      {
                        v725 = "Invalid type";
                        v728 = 259;
                        sub_1C500A780(a1, v705, (llvm::Twine *)&v725);
                        v117 = 0;
                        v151 = 1;
                      }
                      if (v721 != (char *)&v722 + 8)
                        free(v721);
                      if (v180 != v129)
                        goto LABEL_533;
                      goto LABEL_526;
                    case 19:
                      v144 = (uint64_t *)v734.__r_.__value_.__r.__words[0];
                      v145 = LODWORD(v734.__r_.__value_.__r.__words[1]);
                      size = __p.__r_.__value_.__l.__size_;
                      v147 = __p.__r_.__value_.__l.__size_ + LODWORD(v734.__r_.__value_.__r.__words[1]);
                      if (__p.__r_.__value_.__r.__words[2] < v147)
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, &v732, v147, 1);
                        size = __p.__r_.__value_.__l.__size_;
                        if (!(_DWORD)v145)
                          goto LABEL_366;
                      }
                      else if (!LODWORD(v734.__r_.__value_.__r.__words[1]))
                      {
                        goto LABEL_366;
                      }
                      v148 = (_BYTE *)(__p.__r_.__value_.__r.__words[0] + size);
                      v149 = 8 * v145;
                      do
                      {
                        v150 = *v144++;
                        *v148++ = v150;
                        v149 -= 8;
                      }
                      while (v149);
                      size = __p.__r_.__value_.__l.__size_;
LABEL_366:
                      __p.__r_.__value_.__l.__size_ = size + v145;
                      goto LABEL_367;
                    case 20:
                      if (!LODWORD(v734.__r_.__value_.__r.__words[1]))
                      {
                        v118 = "Invalid named struct record";
                        goto LABEL_466;
                      }
                      v154 = v712;
                      v155 = *(_QWORD *)(v6 + 520);
                      if (v712 >= (unint64_t)((*(_QWORD *)(v6 + 528) - v155) >> 3))
                        goto LABEL_379;
                      v117 = *(_QWORD *)(v155 + 8 * v712);
                      if (v117)
                      {
                        llvm::StructType::setName(*(_QWORD *)(v155 + 8 * v712), (unsigned __int8 *)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                        *(_QWORD *)(*(_QWORD *)(v6 + 520) + 8 * v154) = 0;
                      }
                      else
                      {
                        v117 = sub_1C5016E2C((_QWORD *)v6, *(_QWORD **)(v6 + 424), (unsigned __int8 *)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                      }
                      __p.__r_.__value_.__l.__size_ = 0;
                      v721 = (char *)&v722 + 8;
                      *(_QWORD *)&v722 = 0x800000000;
                      v209 = v734.__r_.__value_.__r.__words[1];
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) == 1)
                      {
                        v210 = 0;
                        v211 = 1;
                      }
                      else
                      {
                        v212 = 1;
                        do
                        {
                          v213 = sub_1C500E8C8((_QWORD *)v706, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * v212));
                          v210 = v722;
                          if (!v213)
                            break;
                          v214 = v213;
                          if (v722 >= DWORD1(v722))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v721, (uint64_t)&v722 + 8, v722 + 1, 8);
                            v210 = v722;
                          }
                          *((_QWORD *)v721 + v210) = v214;
                          v210 = v722 + 1;
                          LODWORD(v722) = v722 + 1;
                          ++v212;
                        }
                        while (v209 != (_DWORD)v212);
                        v211 = LODWORD(v734.__r_.__value_.__r.__words[1]);
                      }
                      v215 = v210;
                      v216 = v211 - 1;
                      if (v211 - 1 == v210)
                      {
                        llvm::StructType::setBody(v117, (uint64_t)v721, v210, *(_QWORD *)v734.__r_.__value_.__l.__data_ != 0);
                        v217 = v734.__r_.__value_.__r.__words[0];
                        v218 = v734.__r_.__value_.__r.__words[1];
                        v219 = 8 * LODWORD(v734.__r_.__value_.__r.__words[1]) - 8;
                        v220 = v719;
                        v221 = v719 + (v219 >> 3);
                        if (v221 > DWORD1(v719))
                        {
                          v685 = (llvm::GlobalObject *)v734.__r_.__value_.__r.__words[0];
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v718, (uint64_t)&v719 + 8, v221, 4);
                          v217 = (std::string::size_type)v685;
                          v220 = v719;
                        }
                        if (v218 != 1)
                        {
                          v222 = (uint64_t *)(v217 + 8);
                          v223 = (_DWORD *)((char *)v718 + 4 * v220);
                          v224 = v219;
                          do
                          {
                            v225 = *v222++;
                            *v223++ = v225;
                            v224 -= 8;
                          }
                          while (v224);
                          LODWORD(v220) = v719;
                        }
                        LODWORD(v719) = v220 + ((unint64_t)v219 >> 3);
                        v151 = 5;
                      }
                      else
                      {
                        v725 = "Invalid named struct record";
                        v728 = 259;
                        sub_1C500A780(a1, v705, (llvm::Twine *)&v725);
                        v117 = 0;
                        v151 = 1;
                      }
                      if (v721 != (char *)&v722 + 8)
                        free(v721);
                      v161 = v216 == v215;
                      v8 = v705;
                      if (!v161)
                        goto LABEL_533;
                      goto LABEL_526;
                    case 21:
                      v131 = v734.__r_.__value_.__r.__words[1];
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) <= 1)
                      {
LABEL_371:
                        v153 = "Invalid function record";
                        goto LABEL_530;
                      }
                      v721 = (char *)&v722 + 8;
                      *(_QWORD *)&v722 = 0x800000000;
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) == 2)
                        goto LABEL_342;
                      for (i = 2; v131 != i; ++i)
                      {
                        v190 = sub_1C500E8C8((_QWORD *)v706, *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * i));
                        if (!v190)
                          break;
                        v191 = v190;
                        v192 = *(unsigned __int8 *)(v190 + 8);
                        if (v192 == 7 || v192 == 14)
                        {
                          v725 = "Invalid function argument type";
                          v728 = 259;
                          v8 = v705;
                          sub_1C500A780(a1, v705, (llvm::Twine *)&v725);
                          v117 = 0;
LABEL_405:
                          LOBYTE(v123) = 0;
                          v151 = 1;
                          goto LABEL_523;
                        }
                        v194 = v722;
                        if (v722 >= (unint64_t)DWORD1(v722))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v721, (uint64_t)&v722 + 8, v722 + 1, 8);
                          v194 = v722;
                        }
                        *((_QWORD *)v721 + v194) = v191;
                        LODWORD(v722) = v722 + 1;
                      }
LABEL_342:
                      v117 = sub_1C500E8C8((_QWORD *)v706, *(_DWORD *)(v734.__r_.__value_.__r.__words[0] + 8));
                      if (!v117
                        || (v132 = v734.__r_.__value_.__r.__words[1],
                            (unint64_t)LODWORD(v734.__r_.__value_.__r.__words[1]) - 2 > v722))
                      {
LABEL_404:
                        v725 = "Invalid type";
                        v728 = 259;
                        v8 = v705;
                        sub_1C500A780(a1, v705, (llvm::Twine *)&v725);
                        goto LABEL_405;
                      }
                      v133 = v734.__r_.__value_.__r.__words[0];
                      v123 = 8 * LODWORD(v734.__r_.__value_.__r.__words[1]) - 8;
                      v134 = v719;
                      v135 = v719 + (v123 >> 3);
                      if (v135 > DWORD1(v719))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v718, (uint64_t)&v719 + 8, v135, 4);
                        v134 = v719;
                      }
                      v161 = v132 == 1;
                      v8 = v705;
                      if (!v161)
                      {
                        v136 = (uint64_t *)(v133 + 8);
                        v137 = (_DWORD *)((char *)v718 + 4 * v134);
                        v138 = v123;
                        do
                        {
                          v139 = *v136++;
                          *v137++ = v139;
                          v138 -= 8;
                        }
                        while (v138);
LABEL_473:
                        LODWORD(v134) = v719;
                      }
LABEL_474:
                      LODWORD(v719) = v134 + ((unint64_t)v123 >> 3);
                      v117 = llvm::FunctionType::get((uint64_t **)v117, (uint64_t *)v721, v722, *(_QWORD *)v734.__r_.__value_.__l.__data_ != 0);
                      v151 = 5;
                      LOBYTE(v123) = 1;
LABEL_523:
                      if (v721 != (char *)&v722 + 8)
                        free(v721);
                      if ((v123 & 1) == 0)
                        goto LABEL_533;
LABEL_526:
                      v233 = v712;
                      v234 = *(_QWORD *)(v706 + 520);
                      if (v712 >= (unint64_t)((*(_QWORD *)(v706 + 528) - v234) >> 3))
                      {
                        v153 = "Invalid TYPE table";
LABEL_530:
                        v721 = v153;
                        v724 = 259;
                        v201 = a1;
                        v8 = v705;
LABEL_531:
                        sub_1C500A780(v201, v8, (llvm::Twine *)&v721);
                        goto LABEL_532;
                      }
                      if (*(_QWORD *)(v234 + 8 * v712))
                      {
                        v153 = "Invalid TYPE table: Only named structs can be forward referenced";
                        goto LABEL_530;
                      }
                      *(_QWORD *)(v234 + 8 * v712) = v117;
                      if (!(_DWORD)v719)
                        goto LABEL_551;
                      sub_1C5010368(v698, &v712);
                      v238 = (void **)(v237 + 8);
                      if ((llvm::GlobalValue **)(v237 + 8) == &v718)
                        goto LABEL_551;
                      v239 = (_QWORD *)v237;
                      v240 = v718;
                      if (v718 != (llvm::GlobalValue *)((char *)&v719 + 8))
                      {
                        v243 = *(_QWORD **)(v237 + 8);
                        if (v243 != v239 + 3)
                        {
                          free(v243);
                          v240 = v718;
                        }
                        v239[1] = v240;
                        v239[2] = v719;
                        v718 = (llvm::GlobalValue *)((char *)&v719 + 8);
                        DWORD1(v719) = 0;
                        goto LABEL_550;
                      }
                      v241 = v719;
                      v242 = *(unsigned int *)(v237 + 16);
                      if (v242 >= v719)
                      {
                        if ((_DWORD)v719)
                          memmove(*v238, (char *)&v719 + 8, 4 * v719);
                        goto LABEL_549;
                      }
                      if (*(_DWORD *)(v237 + 20) < v719)
                      {
                        *(_DWORD *)(v237 + 16) = 0;
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v237 + 8, v237 + 24, v241, 4);
LABEL_546:
                        v242 = 0;
                        goto LABEL_547;
                      }
                      if (!(_DWORD)v242)
                        goto LABEL_546;
                      memmove(*v238, (char *)&v719 + 8, 4 * v242);
LABEL_547:
                      if (v242 != v719)
                        memcpy((char *)*v238 + 4 * v242, (char *)v718 + 4 * v242, 4 * v719 - 4 * v242);
LABEL_549:
                      *((_DWORD *)v239 + 4) = v241;
LABEL_550:
                      LODWORD(v719) = 0;
LABEL_551:
                      v151 = 0;
                      v712 = v233 + 1;
LABEL_552:
                      v8 = v705;
LABEL_533:
                      if ((v730 & 1) != 0)
                      {
                        v235 = v729;
                        v729 = 0;
                        if (v235)
                          (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
                      }
                      if (v718 != (llvm::GlobalValue *)((char *)&v719 + 8))
                        free(v718);
                      v236 = v151 | 2;
                      v6 = v706;
                      if (v236 != 2)
                        goto LABEL_829;
                      break;
                    case 22:
                      v117 = **(_QWORD **)(v6 + 424) + 1744;
                      goto LABEL_526;
                    case 23:
                      v117 = **(_QWORD **)(v6 + 424) + 1648;
                      goto LABEL_526;
                    case 24:
                      v117 = **(_QWORD **)(v6 + 424) + 1864;
                      goto LABEL_526;
                    case 25:
                      if (LODWORD(v734.__r_.__value_.__r.__words[1]) != 1)
                      {
                        v118 = "Invalid opaque pointer record";
                        goto LABEL_466;
                      }
                      hasOpaquePointersValue = llvm::LLVMContextImpl::hasOpaquePointersValue(**(llvm::LLVMContextImpl ***)(v6 + 424));
                      v125 = **(llvm::LLVMContextImpl ***)(v6 + 424);
                      if ((hasOpaquePointersValue & 1) != 0)
                      {
                        if (!llvm::LLVMContextImpl::getOpaquePointers(v125))
                        {
                          v118 = "Opaque pointers are only supported in -opaque-pointers mode";
                          goto LABEL_466;
                        }
                      }
                      else
                      {
                        llvm::LLVMContextImpl::setOpaquePointers((uint64_t)v125, 1);
                      }
                      v170 = llvm::PointerType::get(*(llvm::PointerType **)(v6 + 424), (llvm::LLVMContext *)*(unsigned int *)v734.__r_.__value_.__l.__data_);
LABEL_506:
                      v117 = v170;
                      goto LABEL_526;
                    case 26:
                      v119 = LODWORD(v734.__r_.__value_.__r.__words[1]);
                      if (!LODWORD(v734.__r_.__value_.__r.__words[1]))
                      {
                        v118 = "Invalid target extension type record";
                        goto LABEL_466;
                      }
                      if (v712 >= (unint64_t)((uint64_t)(*(_QWORD *)(v6 + 528) - *(_QWORD *)(v6 + 520)) >> 3))
                      {
LABEL_379:
                        v118 = "Invalid TYPE table";
                        goto LABEL_466;
                      }
                      v120 = *(_QWORD *)v734.__r_.__value_.__l.__data_;
                      if (*(_QWORD *)v734.__r_.__value_.__l.__data_ >= (unint64_t)LODWORD(v734.__r_.__value_.__r.__words[1]))
                      {
                        v118 = "Too many type parameters";
                        goto LABEL_466;
                      }
                      v121 = *(_QWORD *)v734.__r_.__value_.__l.__data_;
                      v721 = (char *)&v722 + 8;
                      *(_QWORD *)&v722 = 0x400000000;
                      v725 = v727;
                      v726 = 0x800000000;
                      if (!(_DWORD)v120)
                        goto LABEL_513;
                      v122 = 0;
                      while (1)
                      {
                        v123 = sub_1C500E8C8((_QWORD *)v706, *(_DWORD *)(v734.__r_.__value_.__r.__words[0] + v122 + 8));
                        if (!v123)
                          break;
                        v120 = v722;
                        if (v722 >= (unint64_t)DWORD1(v722))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v721, (uint64_t)&v722 + 8, v722 + 1, 8);
                          v120 = v722;
                        }
                        *((_QWORD *)v721 + v120) = v123;
                        LODWORD(v120) = v722 + 1;
                        LODWORD(v722) = v722 + 1;
                        v122 += 8;
                        if (8 * v121 == v122)
                        {
                          v119 = LODWORD(v734.__r_.__value_.__r.__words[1]);
LABEL_513:
                          v229 = v121 + 1;
                          if (v229 >= v119)
                          {
                            v232 = v726;
LABEL_562:
                            v117 = llvm::TargetExtType::get(*(_QWORD **)(v706 + 424), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t *)v721, v120, (int *)v725, v232);
                            __p.__r_.__value_.__l.__size_ = 0;
                            v151 = 5;
                            LOBYTE(v123) = 1;
                            v8 = v705;
                          }
                          else
                          {
                            while (1)
                            {
                              v230 = *(_QWORD *)(v734.__r_.__value_.__r.__words[0] + 8 * v229);
                              if (HIDWORD(v230))
                                break;
                              v231 = v726;
                              if (v726 >= (unint64_t)HIDWORD(v726))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v725, (uint64_t)v727, v726 + 1, 4);
                                v231 = v726;
                              }
                              *((_DWORD *)v725 + v231) = v230;
                              v232 = v726 + 1;
                              LODWORD(v726) = v726 + 1;
                              if (v119 == ++v229)
                              {
                                LODWORD(v120) = v722;
                                goto LABEL_562;
                              }
                            }
                            *(_QWORD *)v710 = "Integer parameter too large";
                            v711 = 259;
                            v8 = v705;
                            sub_1C500A780(a1, v705, (llvm::Twine *)v710);
                            v117 = 0;
                            LOBYTE(v123) = 0;
LABEL_520:
                            v151 = 1;
                          }
                          if (v725 != v727)
                            free(v725);
                          goto LABEL_523;
                        }
                      }
                      *(_QWORD *)v710 = "Invalid type";
                      v711 = 259;
                      v8 = v705;
                      sub_1C500A780(a1, v705, (llvm::Twine *)v710);
                      v117 = 0;
                      goto LABEL_520;
                    default:
                      v118 = "Invalid value";
                      goto LABEL_466;
                  }
                  break;
              }
            }
            v247 = v721;
LABEL_1310:
            *a1 = (uint64_t)v247;
            goto LABEL_829;
          case 0x12:
            sub_1C500E16C(a1, (_QWORD *)v6);
            goto LABEL_838;
          case 0x15:
            llvm::BitstreamCursor::EnterSubBlock(v9, 0, 21, a1);
            if (*a1)
              goto LABEL_838;
            if (*(_QWORD *)(v6 + 1704) == *(_QWORD *)(v6 + 1712))
            {
              v734.__r_.__value_.__r.__words[0] = (std::string::size_type)&v734.__r_.__value_.__r.__words[2];
              v734.__r_.__value_.__l.__size_ = 0x4000000000;
              while (1)
              {
                sub_1C4FF7B90((uint64_t)v9, 0, (uint64_t)&__p);
                if ((__p.__r_.__value_.__s.__data_[8] & 1) != 0)
                  break;
                switch(LODWORD(__p.__r_.__value_.__l.__data_))
                {
                  case 2:
                    sub_1C4FF3F30((uint64_t)v9, (uint64_t *)&v721);
                    v48 = v721;
                    if ((__p.__r_.__value_.__s.__data_[8] & 1) != 0)
                    {
                      v342 = __p.__r_.__value_.__r.__words[0];
                      __p.__r_.__value_.__r.__words[0] = 0;
                      if (v342)
                        (*(void (**)(std::string::size_type))(*(_QWORD *)v342 + 8))(v342);
                    }
                    v8 = v705;
                    v6 = v706;
                    if (v48)
                      goto LABEL_1308;
                    break;
                  case 1:
                    goto LABEL_831;
                  case 0:
                    goto LABEL_773;
                  default:
                    llvm::BitstreamCursor::readRecord((uint64_t)v9, SHIDWORD(__p.__r_.__value_.__r.__words[0]), (uint64_t)&v734, 0, (uint64_t)&v721);
                    if ((v722 & 1) != 0)
                    {
                      v330 = 0;
                      v331 = v721;
                      v721 = 0;
                      *a1 = (uint64_t)v331;
                    }
                    else if ((_DWORD)v721 == 1)
                    {
                      v326 = *(std::string **)(v6 + 1712);
                      v327 = *(_QWORD *)(v6 + 1720);
                      if ((unint64_t)v326 >= v327)
                      {
                        v332 = *v702;
                        v333 = 0xAAAAAAAAAAAAAAABLL * (((char *)v326 - (char *)*v702) >> 3);
                        v334 = v333 + 1;
                        if (v333 + 1 > 0xAAAAAAAAAAAAAAALL)
                          goto LABEL_1330;
                        if (0x5555555555555556 * ((uint64_t)(v327 - (_QWORD)v332) >> 3) > v334)
                          v334 = 0x5555555555555556 * ((uint64_t)(v327 - (_QWORD)v332) >> 3);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v327 - (_QWORD)v332) >> 3) >= 0x555555555555555)
                          v335 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v335 = v334;
                        v733 = v701;
                        if (v335)
                        {
                          if (v335 > 0xAAAAAAAAAAAAAAALL)
                            goto LABEL_1331;
                          v336 = (char *)operator new(24 * v335);
                        }
                        else
                        {
                          v336 = 0;
                        }
                        v337 = &v336[24 * v333];
                        *(_QWORD *)v337 = 0;
                        *((_QWORD *)v337 + 1) = 0;
                        *((_QWORD *)v337 + 2) = 0;
                        if (v326 == v332)
                        {
                          v340 = vdupq_n_s64((unint64_t)v326);
                          v338 = &v336[24 * v333];
                        }
                        else
                        {
                          v338 = &v336[24 * v333];
                          do
                          {
                            v339 = *(_OWORD *)&v326[-1].__r_.__value_.__l.__data_;
                            *((_QWORD *)v338 - 1) = *((_QWORD *)&v326[-1].__r_.__value_.__l + 2);
                            *(_OWORD *)(v338 - 24) = v339;
                            v338 -= 24;
                            v326[-1].__r_.__value_.__l.__size_ = 0;
                            v326[-1].__r_.__value_.__r.__words[2] = 0;
                            v326[-1].__r_.__value_.__r.__words[0] = 0;
                            --v326;
                          }
                          while (v326 != v332);
                          v340 = *(int64x2_t *)v702;
                          v327 = *v701;
                        }
                        v328 = (std::string *)(v337 + 24);
                        v329 = v706;
                        *(_QWORD *)(v706 + 1704) = v338;
                        *(_QWORD *)(v706 + 1712) = v337 + 24;
                        *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v340;
                        *(_QWORD *)(v706 + 1720) = &v336[24 * v335];
                        v732 = v327;
                        __p.__r_.__value_.__r.__words[0] = v340.i64[0];
                        sub_1C4D868F0((uint64_t)&__p);
                        v8 = v705;
                      }
                      else
                      {
                        v326->__r_.__value_.__r.__words[0] = 0;
                        v326->__r_.__value_.__l.__size_ = 0;
                        v328 = v326 + 1;
                        v326->__r_.__value_.__r.__words[2] = 0;
                        v329 = v706;
                      }
                      *(_QWORD *)(v329 + 1712) = v328;
                      sub_1C5000624(v328 - 1, (std::string *)v734.__r_.__value_.__l.__data_, (std::string *)(v734.__r_.__value_.__r.__words[0]+ 8 * LODWORD(v734.__r_.__value_.__r.__words[1])));
                      LODWORD(v734.__r_.__value_.__r.__words[1]) = 0;
                      v330 = 1;
                      v6 = v329;
                    }
                    else
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid operand bundle record";
                      LOWORD(v733) = 259;
                      sub_1C500A780(a1, v8, (llvm::Twine *)&__p);
                      v330 = 0;
                    }
                    if ((v722 & 1) != 0)
                    {
                      v341 = v721;
                      v721 = 0;
                      if (v341)
                        (*(void (**)(void *))(*(_QWORD *)v341 + 8))(v341);
                    }
                    if ((v330 & 1) == 0)
                      goto LABEL_836;
                    break;
                }
              }
LABEL_1307:
              v48 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_1308:
              *a1 = (uint64_t)v48;
              goto LABEL_836;
            }
LABEL_590:
            v50 = "Invalid multiple blocks";
LABEL_591:
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
            v736 = 259;
            sub_1C500A780(a1, v8, (llvm::Twine *)&v734);
LABEL_838:
            if (*a1)
              v11 = 1;
            else
              v11 = 2;
            goto LABEL_15;
          case 0x16:
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(*(llvm::BitstreamCursor ***)(v6 + 680), a1);
            goto LABEL_838;
          case 0x1A:
            llvm::BitstreamCursor::EnterSubBlock(v9, 0, 26, a1);
            if (*a1)
              goto LABEL_838;
            if (*(_QWORD *)(v6 + 1736))
            {
              v50 = "Invalid multiple synchronization scope names blocks";
              goto LABEL_591;
            }
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)&v734.__r_.__value_.__r.__words[2];
            v734.__r_.__value_.__l.__size_ = 0x4000000000;
            break;
          default:
            goto LABEL_587;
        }
        while (1)
        {
          while (1)
          {
            sub_1C4FF7B90((uint64_t)v9, 0, (uint64_t)&__p);
            if ((__p.__r_.__value_.__s.__data_[8] & 1) != 0)
              goto LABEL_1307;
            if (LODWORD(__p.__r_.__value_.__l.__data_) != 2)
              break;
            sub_1C4FF3F30((uint64_t)v9, (uint64_t *)&v721);
            v48 = v721;
            if ((__p.__r_.__value_.__s.__data_[8] & 1) != 0)
            {
              v325 = __p.__r_.__value_.__r.__words[0];
              __p.__r_.__value_.__r.__words[0] = 0;
              if (v325)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v325 + 8))(v325);
            }
            v8 = v705;
            v6 = v706;
            if (v48)
              goto LABEL_1308;
          }
          if (LODWORD(__p.__r_.__value_.__l.__data_) == 1)
          {
            if (*(_QWORD *)(v6 + 1736))
            {
LABEL_831:
              *a1 = 0;
              goto LABEL_836;
            }
            v343 = "Invalid empty synchronization scope names block";
LABEL_774:
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v343;
            LOWORD(v733) = 259;
            sub_1C500A780(a1, v8, (llvm::Twine *)&__p);
            goto LABEL_836;
          }
          if (!LODWORD(__p.__r_.__value_.__l.__data_))
          {
LABEL_773:
            v343 = "Malformed block";
            goto LABEL_774;
          }
          llvm::BitstreamCursor::readRecord((uint64_t)v9, SHIDWORD(__p.__r_.__value_.__r.__words[0]), (uint64_t)&v734, 0, (uint64_t)&v718);
          if ((v719 & 1) != 0)
          {
            v322 = 0;
            v323 = v718;
            v718 = 0;
            *a1 = (uint64_t)v323;
          }
          else
          {
            if ((_DWORD)v718 == 1)
            {
              v309 = &v732;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v732;
              *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C6612EE0;
              v310 = (uint64_t *)v734.__r_.__value_.__r.__words[0];
              v311 = LODWORD(v734.__r_.__value_.__r.__words[1]);
              if (LODWORD(v734.__r_.__value_.__r.__words[1]) < 0x11)
              {
                v312 = 0;
                v313 = 0;
                v314 = &v732;
                if (LODWORD(v734.__r_.__value_.__r.__words[1]))
                {
LABEL_714:
                  v315 = (char *)v314 + v312;
                  v316 = 8 * v311;
                  do
                  {
                    v317 = *v310++;
                    *v315++ = v317;
                    v316 -= 8;
                  }
                  while (v316);
                  v313 = __p.__r_.__value_.__l.__size_;
                  v309 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
                }
                __p.__r_.__value_.__l.__size_ = v313 + v311;
                v318 = **(_QWORD **)(v6 + 424);
                v319 = (llvm::StringMapImpl *)(v318 + 2608);
                LODWORD(v318) = *(_DWORD *)(v318 + 2620);
                v721 = v309;
                *(_QWORD *)&v722 = v313 + v311;
                BYTE8(v722) = v318;
                v320 = *(_BYTE *)(*sub_1C53FF564(v319, (unsigned __int8 *)v309, v313 + v311, (char *)&v722 + 8) + 8);
                v321 = *(_QWORD *)(v6 + 1736);
                if ((unint64_t)(v321 + 1) > *(_QWORD *)(v6 + 1744))
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod(v693, v692, v321 + 1, 1);
                  v321 = *(_QWORD *)(v6 + 1736);
                }
                *(_BYTE *)(*(_QWORD *)(v6 + 1728) + v321) = v320;
                ++*(_QWORD *)(v6 + 1736);
                LODWORD(v734.__r_.__value_.__r.__words[1]) = 0;
                v8 = v705;
                if ((unint64_t *)__p.__r_.__value_.__l.__data_ != &v732)
                  free(__p.__r_.__value_.__l.__data_);
                v322 = 1;
                goto LABEL_724;
              }
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, &v732, LODWORD(v734.__r_.__value_.__r.__words[1]), 1);
              v312 = __p.__r_.__value_.__l.__size_;
              v314 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_714;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid sync scope record";
            LOWORD(v733) = 259;
            sub_1C500A780(a1, v8, (llvm::Twine *)&__p);
            v322 = 0;
          }
LABEL_724:
          if ((v719 & 1) != 0)
          {
            v324 = v718;
            v718 = 0;
            if (v324)
              (*(void (**)(llvm::GlobalValue *))(*(_QWORD *)v324 + 8))(v324);
          }
          if ((v322 & 1) == 0)
            goto LABEL_836;
        }
      case 1:
        sub_1C5015FA0((uint64_t)v707);
LABEL_13:
        sub_1C50160EC(a1, (_QWORD *)v6);
        goto LABEL_14;
      case 0:
        v734.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
        v736 = 259;
        sub_1C500A780(a1, v8, (llvm::Twine *)&v734);
LABEL_14:
        v11 = 1;
        goto LABEL_15;
    }
    llvm::BitstreamCursor::readRecord((uint64_t)v9, SHIDWORD(v713), (uint64_t)&v715, 0, (uint64_t)&v721);
    if ((v722 & 1) != 0)
    {
      v18 = v721;
      v721 = 0;
      *a1 = (uint64_t)v18;
LABEL_28:
      v11 = 1;
    }
    else
    {
      v13 = (int)v721;
      switch((int)v721)
      {
        case 1:
          sub_1C5016BC8((uint64_t)&v734, v8, (int *)v715, v716);
          if ((v734.__r_.__value_.__s.__data_[8] & 1) != 0)
          {
            *a1 = v734.__r_.__value_.__r.__words[0];
            v11 = 1;
          }
          else
          {
            *(_BYTE *)(v6 + 1640) = LODWORD(v734.__r_.__value_.__l.__data_) != 0;
            v11 = 6;
          }
          goto LABEL_808;
        case 2:
          if (v708)
          {
            v265 = "target triple too late in module";
            goto LABEL_671;
          }
          memset(&v734, 0, sizeof(v734));
          sub_1C5000624(&v734, (std::string *)v715, (std::string *)((char *)v715 + 8 * v716));
          if ((v734.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v306 = &v734;
          else
            v306 = (std::string *)v734.__r_.__value_.__r.__words[0];
          if ((v734.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v307 = *((_BYTE *)&v734.__r_.__value_.__s + 23) & 0x7F;
          else
            v307 = v734.__r_.__value_.__l.__size_;
          sub_1C4D828E4(*(_QWORD *)(v6 + 432), v306, v307);
LABEL_813:
          if (SHIBYTE(v734.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v734.__r_.__value_.__l.__data_);
          goto LABEL_815;
        case 3:
          if (v708)
          {
            v265 = "datalayout too late in module";
            goto LABEL_671;
          }
          memset(&__p, 0, sizeof(__p));
          sub_1C5000624(&__p, (std::string *)v715, (std::string *)((char *)v715 + 8 * v716));
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v304 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            v304 = __p.__r_.__value_.__l.__size_;
          llvm::DataLayout::parse(p_p, v304, (uint64_t)&v734);
          if ((v737 & 1) != 0)
          {
            v363 = v734.__r_.__value_.__r.__words[0];
            v734.__r_.__value_.__r.__words[0] = 0;
            *a1 = v363;
            v11 = 1;
          }
          else
          {
            sub_1C48815D8(*(_QWORD *)(v6 + 432) + 272, (uint64_t)&v734);
            v11 = 6;
            if ((v737 & 1) == 0)
            {
              llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v734);
              goto LABEL_806;
            }
          }
          v305 = v734.__r_.__value_.__r.__words[0];
          v734.__r_.__value_.__r.__words[0] = 0;
          if (v305)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v305 + 8))(v305);
LABEL_806:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_808:
          if (v11 != 6)
            break;
          goto LABEL_815;
        case 4:
          memset(&v734, 0, sizeof(v734));
          sub_1C5000624(&v734, (std::string *)v715, (std::string *)((char *)v715 + 8 * v716));
          if ((v734.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v283 = &v734;
          else
            v283 = (std::string *)v734.__r_.__value_.__r.__words[0];
          if ((v734.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v284 = *((_BYTE *)&v734.__r_.__value_.__s + 23) & 0x7F;
          else
            v284 = v734.__r_.__value_.__l.__size_;
          LLVMSetModuleInlineAsm2_0(*(_QWORD *)(v6 + 432), v283, v284);
          goto LABEL_813;
        case 5:
          memset(&v734, 0, sizeof(v734));
          sub_1C5000624(&v734, (std::string *)v715, (std::string *)((char *)v715 + 8 * v716));
          v285 = *(_QWORD *)(v6 + 480);
          if (v285 >= *(_QWORD *)(v6 + 488))
          {
            v300 = sub_1C4D9AEFC(v700, (uint64_t)&v734);
          }
          else
          {
            if (SHIBYTE(v734.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_1C47EBC30(*(_BYTE **)(v6 + 480), v734.__r_.__value_.__l.__data_, v734.__r_.__value_.__l.__size_);
            }
            else
            {
              v286 = *(_OWORD *)&v734.__r_.__value_.__l.__data_;
              *(_QWORD *)(v285 + 16) = *((_QWORD *)&v734.__r_.__value_.__l + 2);
              *(_OWORD *)v285 = v286;
            }
            v300 = v285 + 24;
          }
          *(_QWORD *)(v6 + 480) = v300;
          goto LABEL_813;
        case 6:
          memset(&v734, 0, sizeof(v734));
          sub_1C5000624(&v734, (std::string *)v715, (std::string *)((char *)v715 + 8 * v716));
          goto LABEL_813;
        case 7:
          v266 = (char *)v715;
          v267 = v716;
          if (*(_BYTE *)(v6 + 392))
          {
            v268 = *((_QWORD *)v715 + 1);
            if (v268 + *(_QWORD *)v715 > *(_QWORD *)(v6 + 384))
              goto LABEL_698;
            v269 = (const char *)(*(_QWORD *)(v6 + 376) + *(_QWORD *)v715);
            v267 = v716 - 2;
            v266 = (char *)v715 + 16;
          }
          else
          {
            v268 = 0;
            v269 = "";
          }
          if (v267 <= 5)
          {
LABEL_698:
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid record";
            v736 = 259;
            sub_1C500A780(a1, v8, (llvm::Twine *)&v734);
            goto LABEL_1133;
          }
          v687 = (llvm::GlobalObject *)v269;
          LODWORD(v725) = *(_DWORD *)v266;
          v344 = sub_1C500E8C8((_QWORD *)v6, v725);
          if (!v344)
          {
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid record";
            v736 = 259;
            v366 = a1;
LABEL_877:
            sub_1C500A780(v366, v8, (llvm::Twine *)&v734);
            goto LABEL_1132;
          }
          v345 = (llvm::PointerType *)v344;
          v346 = *((_QWORD *)v266 + 1);
          if ((v346 & 2) != 0)
          {
            v658 = (v346 >> 2);
            v663 = *((_QWORD *)v266 + 1);
          }
          else
          {
            v347 = *(unsigned int *)(v344 + 8);
            if (*(_DWORD *)(v344 + 8) != 15)
            {
              v371 = "Invalid type for value";
LABEL_876:
              v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v371;
              v736 = 259;
              v366 = a1;
              v8 = v705;
              goto LABEL_877;
            }
            v663 = *((_QWORD *)v266 + 1);
            v678 = v267;
            v348 = *(_QWORD *)(v706 + 544);
            v349 = *(unsigned int *)(v706 + 560);
            v350 = sub_1C4E341F8(v348, *(_DWORD *)(v706 + 560), (int)v725);
            if ((int *)(v348 + 32 * v349) == v350 || !v350[4])
              v351 = -1;
            else
              v351 = **((_DWORD **)v350 + 1);
            v267 = v678;
            LODWORD(v725) = v351;
            v374 = sub_1C500E8C8((_QWORD *)v706, v351);
            if (!v374)
            {
              v371 = "Missing element type for old-style global";
              goto LABEL_876;
            }
            v345 = (llvm::PointerType *)v374;
            v658 = v347 >> 8;
            v8 = v705;
          }
          v656 = *((_QWORD *)v266 + 3);
          v672 = sub_1C5016F30(v656);
          v375 = *((_QWORD *)v266 + 4);
          if (v375 <= 0x21)
          {
            if (v375)
              v376 = (v375 - 1) | 0x100;
            else
              v376 = 0;
            v653 = v376;
            v654 = v376 >> 8;
            *a1 = 0;
          }
          else
          {
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid alignment value";
            v736 = 259;
            sub_1C500A780(a1, v8, (llvm::Twine *)&v734);
            if (*a1)
              goto LABEL_1132;
            v654 = 0;
            v653 = 0;
          }
          memset(&__p, 0, sizeof(__p));
          v377 = *((_QWORD *)v266 + 5);
          if (!v377)
            goto LABEL_866;
          v378 = v377 - 1;
          v379 = *(_QWORD *)(v706 + 472);
          if (v378 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v706 + 480) - v379) >> 3))
          {
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid ID";
            v736 = 259;
            v385 = a1;
LABEL_1047:
            sub_1C500A780(v385, v8, (llvm::Twine *)&v734);
            goto LABEL_1130;
          }
          std::string::operator=(&__p, (const std::string *)(v379 + 24 * v378));
LABEL_866:
          v380 = 0;
          if (v267 < 7)
          {
            v381 = v663;
          }
          else
          {
            v381 = v663;
            if ((v672 - 7) >= 2)
            {
              v382 = *((_DWORD *)v266 + 12);
              if (v382 == 2)
                v380 = 2;
              else
                v380 = v382 == 1;
            }
          }
          v679 = v267;
          v666 = v380;
          if (v267 < 8)
          {
            v651 = 0;
            v652 = 0;
            goto LABEL_906;
          }
          if (*((_DWORD *)v266 + 14) >= 5u)
            LOBYTE(v398) = 1;
          else
            v398 = *((_DWORD *)v266 + 14);
          v651 = v398;
          if (v267 == 8)
          {
            v652 = 0;
LABEL_906:
            v399 = 0;
            goto LABEL_907;
          }
          v425 = *((_DWORD *)v266 + 16);
          if (v425 == 2)
            v426 = 64;
          else
            v426 = (v425 == 1) << 7;
          v652 = v426;
          if (v267 == 9)
            goto LABEL_906;
          v399 = *((_QWORD *)v266 + 9) != 0;
LABEL_907:
          v400 = v381 & 1;
          v401 = operator new(0x78uLL);
          v401[13] = v401[13] & 0x38000000 | 1;
          *(_QWORD *)v401 = 0;
          *((_QWORD *)v401 + 1) = 0;
          *((_QWORD *)v401 + 2) = 0;
          *((_QWORD *)v401 + 3) = v401 + 8;
          v402 = *(_QWORD *)(v706 + 432);
          v736 = 261;
          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v687;
          v734.__r_.__value_.__l.__size_ = v268;
          v403 = v401;
          v650 = v399;
          v404 = (llvm::GlobalValue *)(v401 + 8);
          llvm::GlobalVariable::GlobalVariable((uint64_t)(v401 + 8), v402, v345, v400, v672, 0, (uint64_t)&v734, 0, v651, v658 | 0x100000000, v650);
          v405 = (v653 << 16) + 0x10000;
          if (!v654)
            v405 = 0;
          v406 = v403[16] & 0xFFC0FFFF | v405;
          v403[16] = v406;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v407 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            v407 = __p.__r_.__value_.__l.__size_;
          if (!v407)
            goto LABEL_919;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v408 = &__p;
          else
            v408 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v409 = (llvm::GlobalValue *)llvm::UniqueStringSaver::save(***(_QWORD ***)v404 + 2136, v408, v407);
          v411 = v410;
          v412 = ***(_QWORD ***)v404;
          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v404;
          v413 = *(_DWORD *)(v412 + 2520);
          if (v413)
          {
            v414 = *(_QWORD *)(v412 + 2504);
            v415 = v413 - 1;
            v416 = v415 & ((v404 >> 4) ^ (v404 >> 9));
            v417 = (llvm::GlobalValue **)(v414 + 24 * v416);
            v418 = *v417;
            if (*v417 == v404)
              goto LABEL_918;
            v500 = 0;
            v501 = 1;
            while (v418 != (llvm::GlobalValue *)-4096)
            {
              if (v500)
                v502 = 0;
              else
                v502 = v418 == (llvm::GlobalValue *)-8192;
              if (v502)
                v500 = v417;
              v503 = v416 + v501++;
              v416 = v503 & v415;
              v417 = (llvm::GlobalValue **)(v414 + 24 * v416);
              v418 = *v417;
              if (*v417 == v404)
                goto LABEL_918;
            }
            if (v500)
              v577 = v500;
            else
              v577 = v417;
          }
          else
          {
            v577 = 0;
          }
          v417 = (llvm::GlobalValue **)sub_1C53D65B8(v412 + 2504, (uint64_t)&v734, (uint64_t *)&v734, v577);
          v578 = v734.__r_.__value_.__r.__words[0];
          v417[1] = 0;
          v417[2] = 0;
          *v417 = (llvm::GlobalValue *)v578;
LABEL_918:
          v417[1] = v409;
          v417[2] = v411;
          v406 = v403[16] & 0xFFBFFFFF | ((v411 != 0) << 22);
LABEL_919:
          v419 = v406 & 0xF;
          v420 = v406 & 0xFFFFFFCF | (16 * (v666 & 3));
          v403[16] = v420;
          if ((v419 - 7) < 2
            || 16 * (v666 & 3)
            && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v404),
                v420 = v403[16],
                (hasExternalWeakLinkage & 1) == 0))
          {
            v420 |= 0x4000u;
          }
          v421 = v420 & 0xFFFFFF3F | v652;
          v403[16] = v421;
          if (v679 < 0xB)
          {
            if ((_DWORD)v656 == 6)
            {
              v423 = v421 & 0xFFFFFCFF;
              v424 = 512;
            }
            else
            {
              if ((_DWORD)v656 != 5)
                goto LABEL_1008;
              v423 = v421 & 0xFFFFFCFF;
              v424 = 256;
            }
          }
          else
          {
            v422 = *((_DWORD *)v266 + 20);
            if (v422 == 2)
              v423 = 512;
            else
              v423 = (v422 == 1) << 8;
            v424 = v421 & 0xFFFFFCFF;
          }
          v403[16] = v423 | v424;
LABEL_1008:
          v485 = sub_1C500EA24(v706, *(_QWORD *)v404, (char *)&v725, 1);
          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v404;
          LODWORD(v718) = v485;
          v486 = *(_QWORD *)(v706 + 624);
          v690 = v404;
          if (v486 >= *(_QWORD *)(v706 + 632))
          {
            v488 = sub_1C500F778(v694, (uint64_t *)&v734, &v718);
            v487 = v679;
          }
          else
          {
            *(_QWORD *)v486 = 6;
            *(_QWORD *)(v486 + 8) = 0;
            *(_QWORD *)(v486 + 16) = v404;
            v487 = v679;
            if (v404 != (llvm::GlobalValue *)-8192 && v404 != (llvm::GlobalValue *)-4096 && v404)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v486);
              v485 = (int)v718;
            }
            *(_DWORD *)(v486 + 24) = v485;
            v488 = v486 + 32;
          }
          v489 = (_QWORD *)v706;
          *(_QWORD *)(v706 + 624) = v488;
          v490 = *((_QWORD *)v266 + 2);
          if ((_DWORD)v490)
          {
            v674 = v403;
            v491 = (llvm::GlobalValue *)(v490 - 1);
            v492 = *(llvm::GlobalValue ***)(v706 + 1280);
            v493 = *(_QWORD *)(v706 + 1288);
            if ((unint64_t)v492 >= v493)
            {
              v495 = *(char **)(v706 + 1272);
              v496 = ((char *)v492 - v495) >> 4;
              v497 = v496 + 1;
              if ((unint64_t)(v496 + 1) >> 60)
                goto LABEL_1330;
              v498 = v493 - (_QWORD)v495;
              if (v498 >> 3 > v497)
                v497 = v498 >> 3;
              if ((unint64_t)v498 >= 0x7FFFFFFFFFFFFFF0)
                v497 = 0xFFFFFFFFFFFFFFFLL;
              v667 = v497;
              if (v497)
              {
                if (v497 >> 60)
                  goto LABEL_1331;
                v499 = (char *)operator new(16 * v497);
              }
              else
              {
                v499 = 0;
              }
              v504 = (llvm::GlobalValue **)&v499[16 * v496];
              *v504 = v690;
              v504[1] = v491;
              v505 = v504;
              if (v492 == (llvm::GlobalValue **)v495)
              {
                v506 = (_QWORD *)v706;
                v403 = v674;
              }
              else
              {
                v403 = v674;
                do
                {
                  *((_OWORD *)v505 - 1) = *((_OWORD *)v492 - 1);
                  v505 -= 2;
                  v492 -= 2;
                }
                while (v492 != (llvm::GlobalValue **)v495);
                v506 = (_QWORD *)v706;
                v492 = *(llvm::GlobalValue ***)(v706 + 1272);
              }
              v506[159] = v505;
              v494 = v504 + 2;
              v506[160] = v504 + 2;
              v506[161] = &v499[16 * v667];
              if (v492)
                operator delete(v492);
            }
            else
            {
              *v492 = v690;
              v492[1] = v491;
              v494 = v492 + 2;
              v403 = v674;
            }
            v489 = (_QWORD *)v706;
            *(_QWORD *)(v706 + 1280) = v494;
            v487 = v679;
          }
          if (v487 < 0xC)
          {
            if (v656 <= 0xB && ((1 << v656) & 0xC12) != 0)
            {
              v718 = v690;
              sub_1C6190580((uint64_t)&v734, v696, &v718);
            }
          }
          else
          {
            v507 = *((_QWORD *)v266 + 11);
            if ((_DWORD)v507)
            {
              v508 = v489[87];
              if (*((_QWORD *)v266 + 11) > (unint64_t)((v489[88] - v508) >> 3))
              {
                v734.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid global variable comdat ID";
                v736 = 259;
                v385 = a1;
                v8 = v705;
                goto LABEL_1047;
              }
              llvm::GlobalObject::setComdat(v690, *(llvm::Comdat **)(v508 + 8 * (v507 - 1)));
            }
            if (v487 >= 0xD)
            {
              v509 = (*((_DWORD *)v266 + 24) - 1);
              v510 = v489[168];
              if (v509 >= (v489[169] - v510) >> 3)
                goto LABEL_1118;
              v511 = *(_QWORD *)(v510 + 8 * v509);
              if (!v511)
                goto LABEL_1119;
              if (*(_DWORD *)(v511 + 8))
                v511 = *(_QWORD *)(v511 + 40);
              else
LABEL_1118:
                v511 = 0;
LABEL_1119:
              *((_QWORD *)v403 + 13) = v511;
              if (v487 >= 0xE)
                v403[16] = v403[16] & 0xFFFFBFFF | ((*((_DWORD *)v266 + 26) == 1) << 14);
            }
          }
          v538 = v403[16];
          if ((v538 & 0xFu) - 7 < 2)
            goto LABEL_1125;
          if ((v538 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v690) & 1) == 0)
          {
            v538 = v403[16];
LABEL_1125:
            v403[16] = v538 | 0x4000;
          }
          if (v487 >= 0x10)
          {
            v539 = *((_QWORD *)v266 + 15);
            if ((*((_BYTE *)v403 + 65) & 0x80) != 0 || v539)
            {
              v633 = v403;
              v634 = (_BYTE *)(v489[47] + *((_QWORD *)v266 + 14));
              if (v539)
              {
                v634 = llvm::UniqueStringSaver::save(***(_QWORD ***)v690 + 2136, (_QWORD *)(v489[47] + *((_QWORD *)v266 + 14)), v539);
                v635 = v638;
              }
              else
              {
                v635 = 0;
              }
              v639 = ***((_QWORD ***)v633 + 4) + 2528;
              v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v690;
              v640 = sub_1C617A140(v639, (uint64_t *)&v734);
              v640[1] = v634;
              v640[2] = v635;
              v633[16] = v633[16] & 0xFFFF7FFF | ((v635 != 0) << 15);
            }
          }
          *a1 = 0;
          v8 = v705;
LABEL_1130:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_1132:
          v6 = v706;
LABEL_1133:
          if (*a1)
            goto LABEL_28;
LABEL_815:
          v11 = 0;
          LODWORD(v716) = 0;
          break;
        case 8:
          sub_1C5015FA0((uint64_t)v707);
          v270 = (char *)v715;
          v271 = v716;
          if (*(_BYTE *)(v6 + 392))
          {
            v272 = *((_QWORD *)v715 + 1);
            if (v272 + *(_QWORD *)v715 > *(_QWORD *)(v6 + 384))
              goto LABEL_701;
            v273 = (const char *)(*(_QWORD *)(v6 + 376) + *(_QWORD *)v715);
            v271 = v716 - 2;
            v270 = (char *)v715 + 16;
          }
          else
          {
            v272 = 0;
            v273 = "";
          }
          if (v271 <= 7)
          {
LABEL_701:
            v308 = "Invalid record";
LABEL_702:
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v308;
            v736 = 259;
            v8 = v705;
            sub_1C500A780(a1, v705, (llvm::Twine *)&v734);
            goto LABEL_703;
          }
          v710[0] = *(_DWORD *)v270;
          v352 = sub_1C500E8C8((_QWORD *)v6, v710[0]);
          if (!v352)
          {
            v367 = "Invalid record";
LABEL_850:
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v367;
            v736 = 259;
            v8 = v705;
            sub_1C500A780(a1, v705, (llvm::Twine *)&v734);
            v6 = v706;
            goto LABEL_703;
          }
          v353 = (llvm::PointerType *)v352;
          v354 = *(unsigned __int8 *)(v352 + 8);
          if (v354 == 15)
          {
            v670 = v271;
            v355 = *(_QWORD *)(v706 + 544);
            v356 = *(unsigned int *)(v706 + 560);
            v357 = sub_1C4E341F8(v355, *(_DWORD *)(v706 + 560), v710[0]);
            if ((int *)(v355 + 32 * v356) == v357 || !v357[4])
              v358 = -1;
            else
              v358 = **((_DWORD **)v357 + 1);
            v271 = v670;
            v710[0] = v358;
            v370 = sub_1C500E8C8((_QWORD *)v706, v358);
            if (!v370)
            {
              v367 = "Missing element type for old-style function";
              goto LABEL_850;
            }
            v353 = (llvm::PointerType *)v370;
            v354 = *(unsigned __int8 *)(v370 + 8);
          }
          if (v354 != 14)
          {
            v367 = "Invalid type for value";
            goto LABEL_850;
          }
          if ((*((_QWORD *)v270 + 1) & 0xFFFFFC00) != 0)
          {
            v367 = "Invalid calling convention ID";
            goto LABEL_850;
          }
          v688 = (llvm::GlobalObject *)*((_QWORD *)v270 + 1);
          v665 = v270;
          v673 = v271;
          v383 = *(_QWORD *)(v706 + 432);
          if (v271 < 0x11)
            v384 = *(_DWORD *)(v383 + 284);
          else
            v384 = *((_DWORD *)v665 + 32);
          v680 = v384;
          v718 = 0;
          v736 = 261;
          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v273;
          v734.__r_.__value_.__l.__size_ = v272;
          v427 = (uint64_t *)operator new(0x80uLL);
          v428 = (llvm::GlobalValue *)(v427 + 1);
          *((_DWORD *)v427 + 7) = *((_DWORD *)v427 + 7) & 0x38000000 | 0x40000000;
          *v427 = 0;
          llvm::Function::Function(v427 + 1, v353, 0, (llvm::Type *)v680, (uint64_t)&v734, v383);
          v718 = v428;
          v429 = v710[0];
          v6 = v706;
          v430 = *(_DWORD *)(v706 + 608);
          if (v430)
          {
            v431 = *(_QWORD *)(v706 + 592);
            v432 = v430 - 1;
            v433 = v432 & ((v428 >> 4) ^ (v428 >> 9));
            v434 = (llvm::GlobalValue **)(v431 + 16 * v433);
            v435 = *v434;
            v436 = v665;
            if (v428 == *v434)
              goto LABEL_950;
            v437 = 0;
            v438 = 1;
            while (v435 != (llvm::GlobalValue *)-4096)
            {
              if (v437)
                v439 = 0;
              else
                v439 = v435 == (llvm::GlobalValue *)-8192;
              if (v439)
                v437 = v434;
              v440 = v433 + v438++;
              v433 = v440 & v432;
              v434 = (llvm::GlobalValue **)(v431 + 16 * v433);
              v435 = *v434;
              if (v428 == *v434)
                goto LABEL_950;
            }
            if (v437)
              v441 = v437;
            else
              v441 = v434;
          }
          else
          {
            v441 = 0;
            v436 = v665;
          }
          v434 = (llvm::GlobalValue **)sub_1C500F648(v697, (uint64_t)&v718, (uint64_t *)&v718, v441);
          *v434 = v718;
          *((_DWORD *)v434 + 2) = 0;
          v428 = v718;
LABEL_950:
          *((_DWORD *)v434 + 2) = v429;
          *((_WORD *)v428 + 9) = *((_WORD *)v428 + 9) & 0xC00F | (16 * (_WORD)v688);
          v657 = *((_QWORD *)v436 + 2);
          v660 = (llvm::GlobalObject *)*((_QWORD *)v436 + 3);
          v442 = sub_1C5016F30((int)v660);
          v443 = *((_DWORD *)v428 + 8);
          if ((v442 - 7) >= 2)
            v444 = *((_DWORD *)v428 + 8);
          else
            v444 = v443 & 0xFFFFFFC0;
          v445 = v444 & 0xFFFFFFF0 | v442;
          *((_DWORD *)v428 + 8) = v445;
          if ((v442 - 7) < 2)
          {
            v8 = v705;
LABEL_1183:
            *((_DWORD *)v428 + 8) = v445 | 0x4000;
            goto LABEL_956;
          }
          v8 = v705;
          if ((v443 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v428) & 1) == 0)
          {
            v445 = *((_DWORD *)v428 + 8);
            goto LABEL_1183;
          }
LABEL_956:
          v446 = v718;
          v447 = (*((_DWORD *)v436 + 8) - 1);
          v448 = *(_QWORD *)(v706 + 1344);
          if (v447 >= (*(_QWORD *)(v706 + 1352) - v448) >> 3)
            v449 = 0;
          else
            v449 = *(_QWORD *)(v448 + 8 * v447);
          *((_QWORD *)v718 + 14) = v449;
          if (!*((_QWORD *)v446 + 12))
            goto LABEL_1138;
          v450 = 0;
          do
          {
            v451 = 0;
            __p.__r_.__value_.__r.__words[0] = 0x4900000045;
            LODWORD(__p.__r_.__value_.__r.__words[1]) = 71;
            v452 = (llvm::GlobalObject *)(v450 + 1);
            v681 = v450;
            v453 = (v450 + 2);
            do
            {
              v454 = v718;
              v456 = (uint64_t *)((char *)v718 + 112);
              v455 = *((_QWORD *)v718 + 14);
              if (v455)
              {
                if (v453 < *(_DWORD *)(v455 + 8))
                {
                  v457 = *(_QWORD *)(v455 + 8 * v453 + 40);
                  if (v457)
                  {
                    v458 = *(_DWORD *)((char *)&__p.__r_.__value_.__l.__data_ + v451);
                    if (((*(unsigned __int8 *)(v457 + v458 / 8 + 12) >> (v458 & 7)) & 1) != 0)
                    {
                      v689 = v452;
                      AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)v718 + 14, (int)v452, v458);
                      v452 = v689;
                      if (!AttributeAtIndex || !*(_QWORD *)(AttributeAtIndex + 16))
                      {
                        *((_QWORD *)v454 + 14) = llvm::AttributeList::removeAttributeAtIndex(v456, **(uint64_t ***)v454, (int)v689, v458);
                        v460 = *(_QWORD *)(v706 + 544);
                        v461 = *(unsigned int *)(v706 + 560);
                        v462 = sub_1C4E341F8(v460, *(_DWORD *)(v706 + 560), v710[0]);
                        if ((int *)(v460 + 32 * v461) == v462 || v462[4] <= v689)
                          v463 = -1;
                        else
                          v463 = *(_DWORD *)(*((_QWORD *)v462 + 1) + 4 * (_QWORD)v689);
                        v464 = sub_1C500FA10(v706, v463);
                        if (!v464)
                        {
                          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)"Missing param element type for attribute upgrade";
                          v736 = 259;
                          v8 = v705;
                          sub_1C500A780(a1, v705, (llvm::Twine *)&v734);
                          v6 = v706;
                          goto LABEL_703;
                        }
                        v465 = llvm::Attribute::get(*(uint64_t **)(v706 + 424), v458, v464);
                        v466 = v718;
                        LODWORD(v734.__r_.__value_.__l.__data_) = v681;
                        *((_QWORD *)v466 + 14) = llvm::AttributeList::addParamAttribute((_QWORD *)v718 + 14, **(uint64_t ***)v718, &v734, 1, v465);
                        v452 = v689;
                      }
                    }
                  }
                }
              }
              v451 += 4;
            }
            while (v451 != 12);
            v450 = (int)v452;
          }
          while (*((llvm::GlobalObject **)v718 + 12) != v452);
          v8 = v705;
          v6 = v706;
          v436 = v665;
          if (!(_DWORD)v452)
            goto LABEL_1138;
          if ((*((_WORD *)v718 + 9) & 0x3FF0) != 0x530)
            goto LABEL_1138;
          v467 = *((_QWORD *)v718 + 14);
          if (v467)
          {
            if (*(_DWORD *)(v467 + 8) >= 3u)
            {
              v632 = *(_QWORD *)(v467 + 56);
              if (v632)
              {
                if ((*(_BYTE *)(v632 + 20) & 0x20) != 0)
                  goto LABEL_1138;
              }
            }
          }
          v468 = *(_QWORD *)(v706 + 544);
          v469 = *(unsigned int *)(v706 + 560);
          v470 = sub_1C4E341F8(v468, *(_DWORD *)(v706 + 560), v710[0]);
          if ((int *)(v468 + 32 * v469) == v470 || v470[4] < 2)
            v471 = -1;
          else
            v471 = *(_DWORD *)(*((_QWORD *)v470 + 1) + 4);
          v6 = v706;
          v540 = sub_1C500FA10(v706, v471);
          if (!v540)
          {
            v573 = "Missing param element type for x86_intrcc upgrade";
LABEL_1182:
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v573;
            v736 = 259;
            v262 = a1;
LABEL_610:
            sub_1C500A780(v262, v8, (llvm::Twine *)&v734);
            goto LABEL_703;
          }
          v541 = llvm::Attribute::get(*(uint64_t **)(v706 + 424), 69, v540);
          v542 = v718;
          LODWORD(v734.__r_.__value_.__l.__data_) = 0;
          *((_QWORD *)v542 + 14) = llvm::AttributeList::addParamAttribute((_QWORD *)v718 + 14, **(uint64_t ***)v718, &v734, 1, v541);
LABEL_1138:
          v543 = *((_QWORD *)v436 + 5);
          if (v543 <= 0x21)
          {
            if (v543)
              LODWORD(v543) = (v543 - 1) | 0x100;
            else
              LODWORD(v543) = 0;
            v544 = v543 >> 8;
            *a1 = 0;
          }
          else
          {
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid alignment value";
            v736 = 259;
            sub_1C500A780(a1, v8, (llvm::Twine *)&v734);
            v543 = *a1;
            if (*a1)
              goto LABEL_703;
            v544 = 0;
          }
          v545 = v718;
          v546 = (v543 << 16) + 0x10000;
          if (!(v544 << 8))
            v546 = 0;
          v547 = v546 | *((_DWORD *)v718 + 8) & 0xFFC0FFFF;
          *((_DWORD *)v718 + 8) = v547;
          v548 = *((_QWORD *)v436 + 6);
          if (!v548)
            goto LABEL_1162;
          v549 = v548 - 1;
          v550 = *(_QWORD *)(v6 + 472);
          if (v549 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 480) - v550) >> 3))
            goto LABEL_1172;
          v551 = v550 + 24 * v549;
          v552 = *(_BYTE *)(v551 + 23);
          if (v552 >= 0)
            v553 = (llvm::GlobalValue *)v551;
          else
            v553 = *(llvm::GlobalValue **)v551;
          if (v552 >= 0)
            v554 = v552 & 0x7F;
          else
            v554 = *(_QWORD *)(v551 + 8);
          if ((v547 & 0x400000) != 0 || v554)
          {
            if (v554)
            {
              v553 = (llvm::GlobalValue *)llvm::UniqueStringSaver::save(***(_QWORD ***)v545 + 2136, v553, v554);
              v556 = v555;
            }
            else
            {
              v556 = 0;
            }
            v557 = ***(_QWORD ***)v545;
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v545;
            v558 = *(_DWORD *)(v557 + 2520);
            if (v558)
            {
              v559 = *(_QWORD *)(v557 + 2504);
              v560 = v558 - 1;
              v561 = v560 & ((v545 >> 4) ^ (v545 >> 9));
              v562 = (llvm::GlobalValue **)(v559 + 24 * v561);
              v563 = *v562;
              if (*v562 == v545)
              {
LABEL_1161:
                v562[1] = v553;
                v562[2] = v556;
                *((_DWORD *)v545 + 8) = *((_DWORD *)v545 + 8) & 0xFFBFFFFF | ((v556 != 0) << 22);
                v545 = v718;
                v547 = *((_DWORD *)v718 + 8);
                v6 = v706;
                v436 = v665;
                goto LABEL_1162;
              }
              v579 = 0;
              v580 = 1;
              while (v563 != (llvm::GlobalValue *)-4096)
              {
                if (v579)
                  v581 = 0;
                else
                  v581 = v563 == (llvm::GlobalValue *)-8192;
                if (v581)
                  v579 = v562;
                v582 = v561 + v580++;
                v561 = v582 & v560;
                v562 = (llvm::GlobalValue **)(v559 + 24 * v561);
                v563 = *v562;
                if (*v562 == v545)
                  goto LABEL_1161;
              }
              if (v579)
                v630 = v579;
              else
                v630 = v562;
            }
            else
            {
              v630 = 0;
            }
            v562 = (llvm::GlobalValue **)sub_1C53D65B8(v557 + 2504, (uint64_t)&v734, (uint64_t *)&v734, v630);
            v631 = v734.__r_.__value_.__r.__words[0];
            v562[1] = 0;
            v562[2] = 0;
            *v562 = (llvm::GlobalValue *)v631;
            goto LABEL_1161;
          }
          v6 = v706;
LABEL_1162:
          if ((v547 & 0xF) - 7 >= 2)
          {
            v564 = *((_DWORD *)v436 + 14);
            v565 = v564 == 2 ? 32 : 16 * (v564 == 1);
            *((_DWORD *)v545 + 8) = v565 | v547 & 0xFFFFFFCF;
            if (v565)
            {
              if ((llvm::GlobalValue::hasExternalWeakLinkage(v545) & 1) == 0)
                *((_DWORD *)v545 + 8) |= 0x4000u;
            }
          }
          v566 = v673;
          if (v673 <= 8)
          {
            v574 = v718;
            v575 = (unint64_t)v660;
LABEL_1207:
            v691 = 0;
            v585 = (unsigned int *)((char *)v574 + 32);
            v586 = *((_DWORD *)v574 + 8) & 0xFFFFFF3F;
            *((_DWORD *)v574 + 8) = v586;
LABEL_1208:
            if ((_DWORD)v575 == 5)
            {
              v587 = 256;
LABEL_1212:
              *v585 = v587 | v586 & 0xFFFFFCFF;
            }
            else if ((_DWORD)v575 == 6)
            {
              v587 = 512;
              goto LABEL_1212;
            }
LABEL_1213:
            v588 = 0;
            v661 = v574;
            if (v575 <= 0xB && ((1 << v575) & 0xC12) != 0)
            {
              v725 = v574;
              sub_1C6190580((uint64_t)&v734, v696, &v725);
              v588 = 0;
              v682 = 0;
            }
            else
            {
              v682 = 0;
            }
            goto LABEL_1216;
          }
          v567 = *((_QWORD *)v436 + 8);
          if (v567)
          {
            v568 = v567 - 1;
            v569 = *(_QWORD *)(v6 + 496);
            if (v568 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 504) - v569) >> 3))
            {
LABEL_1172:
              v573 = "Invalid ID";
              goto LABEL_1182;
            }
            v570 = v718;
            v571 = (__int128 *)(v569 + 24 * v568);
            if (*((char *)v571 + 23) < 0)
            {
              sub_1C47EBC30(&__p, *(void **)v571, *((_QWORD *)v571 + 1));
            }
            else
            {
              v572 = *v571;
              __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v571 + 2);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v572;
            }
            llvm::Function::setGC((uint64_t)v570, (uint64_t)&__p);
            v566 = v673;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          v574 = v718;
          v575 = (unint64_t)v660;
          if (v566 <= 9)
            goto LABEL_1207;
          v583 = *((_DWORD *)v436 + 18);
          v584 = (v583 == 1) << 7;
          if (v583 == 2)
            v584 = 64;
          v585 = (unsigned int *)((char *)v718 + 32);
          v586 = v584 | *((_DWORD *)v718 + 8) & 0xFFFFFF3F;
          *((_DWORD *)v718 + 8) = v586;
          if (v566 == 10)
          {
            v691 = 0;
            goto LABEL_1208;
          }
          v691 = *((_DWORD *)v436 + 20);
          if (v566 <= 0xB)
            goto LABEL_1208;
          v609 = *((_DWORD *)v436 + 22);
          if (v609 == 2)
            v610 = 512;
          else
            v610 = (v609 == 1) << 8;
          *v585 = v610 | v586 & 0xFFFFFCFF;
          if (v566 == 12)
            goto LABEL_1213;
          v661 = v574;
          v611 = *((_QWORD *)v436 + 12);
          if ((_DWORD)v611)
          {
            v612 = *(_QWORD *)(v706 + 696);
            if (*((_QWORD *)v436 + 12) > (unint64_t)((*(_QWORD *)(v706 + 704) - v612) >> 3))
            {
              v367 = "Invalid function comdat ID";
              goto LABEL_850;
            }
            llvm::GlobalObject::setComdat(v574, *(llvm::Comdat **)(v612 + 8 * (v611 - 1)));
          }
          if (v566 < 0xE)
          {
            v588 = 0;
            v682 = 0;
          }
          else
          {
            v682 = *((_DWORD *)v665 + 26);
            if (v566 == 14)
            {
              v588 = 0;
            }
            else
            {
              v588 = *((_DWORD *)v665 + 28);
              if (v566 >= 0x10)
                *((_DWORD *)v718 + 8) = *((_DWORD *)v718 + 8) & 0xFFFFBFFF | ((*((_DWORD *)v665 + 30) == 1) << 14);
            }
          }
LABEL_1216:
          v589 = v718;
          v590 = *((_DWORD *)v718 + 8);
          if ((v590 & 0xFu) - 7 < 2)
            goto LABEL_1220;
          if ((v590 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v718) & 1) == 0)
          {
            v590 = *((_DWORD *)v589 + 8);
LABEL_1220:
            *((_DWORD *)v589 + 8) = v590 | 0x4000;
          }
          v591 = v706;
          if (v566 >= 0x13)
          {
            v592 = *(_QWORD *)(v706 + 376);
            if (v592)
            {
              v594 = *((_QWORD *)v665 + 17);
              v593 = *((_QWORD *)v665 + 18);
              if (v593 + v594 <= *(_QWORD *)(v706 + 384))
              {
                v595 = v718;
                if (v593 || (*((_DWORD *)v718 + 8) & 0x8000) != 0)
                {
                  v644 = (_BYTE *)(v592 + v594);
                  if (v593)
                  {
                    v644 = llvm::UniqueStringSaver::save(***(_QWORD ***)v718 + 2136, v644, v593);
                    v645 = v646;
                  }
                  else
                  {
                    v645 = 0;
                  }
                  v647 = ***(_QWORD ***)v595 + 2528;
                  v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v595;
                  v648 = sub_1C617A140(v647, (uint64_t *)&v734);
                  v648[1] = v644;
                  v648[2] = v645;
                  *((_DWORD *)v595 + 8) = *((_DWORD *)v595 + 8) & 0xFFFF7FFF | ((v645 != 0) << 15);
                  v591 = v706;
                }
              }
            }
          }
          v596 = v718;
          v597 = sub_1C500EA24(v591, *(_QWORD *)v718, (char *)v710, 1);
          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v596;
          LODWORD(v725) = v597;
          v598 = *(_QWORD *)(v591 + 624);
          if (v598 >= *(_QWORD *)(v591 + 632))
          {
            v599 = sub_1C500F778(v694, (uint64_t *)&v734, &v725);
            v8 = v705;
          }
          else
          {
            *(_QWORD *)v598 = 6;
            *(_QWORD *)(v598 + 8) = 0;
            *(_QWORD *)(v598 + 16) = v596;
            v8 = v705;
            if (v596 != (llvm::GlobalValue *)-8192 && v596 != (llvm::GlobalValue *)-4096 && v596)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v598);
              v597 = (int)v725;
            }
            *(_DWORD *)(v598 + 24) = v597;
            v599 = v598 + 32;
          }
          v600 = v682;
          v6 = v706;
          *(_QWORD *)(v706 + 624) = v599;
          if (v588 || v682 || v691)
          {
            v601 = *(llvm::GlobalObject ***)(v706 + 1328);
            v602 = *(_QWORD *)(v706 + 1336);
            if ((unint64_t)v601 >= v602)
            {
              v604 = *(_QWORD **)(v706 + 1320);
              v605 = 0xAAAAAAAAAAAAAAABLL * (v601 - (llvm::GlobalObject **)v604) + 1;
              if (v605 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_1330;
              v606 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v602 - (_QWORD)v604) >> 3);
              if (2 * v606 > v605)
                v605 = 2 * v606;
              if (v606 >= 0x555555555555555)
                v607 = 0xAAAAAAAAAAAAAAALL;
              else
                v607 = v605;
              if (v607)
              {
                if (v607 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_1331;
                v608 = (char *)operator new(24 * v607);
                v600 = v682;
              }
              else
              {
                v608 = 0;
              }
              v613 = &v608[8 * (v601 - (llvm::GlobalObject **)v604)];
              *(_QWORD *)v613 = v661;
              *((_DWORD *)v613 + 2) = v588;
              *((_DWORD *)v613 + 3) = v600;
              *((_DWORD *)v613 + 4) = v691;
              *((_DWORD *)v613 + 5) = 0;
              v614 = v613;
              if (v601 == v604)
              {
                v616 = (_QWORD *)v706;
              }
              else
              {
                do
                {
                  v615 = *(_OWORD *)(v601 - 3);
                  *((_QWORD *)v614 - 1) = *(v601 - 1);
                  *(_OWORD *)(v614 - 24) = v615;
                  v614 -= 24;
                  v601 -= 3;
                }
                while (v601 != v604);
                v616 = (_QWORD *)v706;
                v601 = *(llvm::GlobalObject ***)(v706 + 1320);
              }
              v617 = &v608[24 * v607];
              v616[165] = v614;
              v603 = v613 + 24;
              v616[166] = v613 + 24;
              v616[167] = v617;
              v8 = v705;
              if (v601)
                operator delete(v601);
            }
            else
            {
              *v601 = v661;
              *((_DWORD *)v601 + 2) = v588;
              *((_DWORD *)v601 + 3) = v682;
              v603 = v601 + 3;
              v601[2] = (llvm::GlobalObject *)v691;
            }
            v6 = v706;
            *(_QWORD *)(v706 + 1328) = v603;
          }
          if (!v657)
          {
            v618 = v718;
            *((_DWORD *)v718 + 8) |= 0x800000u;
            v619 = *(llvm::GlobalValue ***)(v6 + 1424);
            v620 = *(_QWORD *)(v6 + 1432);
            if ((unint64_t)v619 >= v620)
            {
              v622 = *(_QWORD **)(v6 + 1416);
              v623 = v619 - (llvm::GlobalValue **)v622;
              v624 = v623 + 1;
              if ((unint64_t)(v623 + 1) >> 61)
LABEL_1330:
                abort();
              v625 = v620 - (_QWORD)v622;
              if (v625 >> 2 > v624)
                v624 = v625 >> 2;
              if ((unint64_t)v625 >= 0x7FFFFFFFFFFFFFF8)
                v626 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v626 = v624;
              if (v626)
              {
                if (v626 >> 61)
LABEL_1331:
                  sub_1C4764EE4();
                v627 = (char *)operator new(8 * v626);
              }
              else
              {
                v627 = 0;
              }
              v628 = (llvm::GlobalValue **)&v627[8 * v623];
              *v628 = v618;
              v621 = v628 + 1;
              if (v619 == v622)
              {
                v6 = v706;
              }
              else
              {
                do
                {
                  v629 = *--v619;
                  *--v628 = v629;
                }
                while (v619 != v622);
                v6 = v706;
                v619 = *(llvm::GlobalValue ***)(v706 + 1416);
              }
              *(_QWORD *)(v6 + 1416) = v628;
              *(_QWORD *)(v6 + 1424) = v621;
              *(_QWORD *)(v6 + 1432) = &v627[8 * v626];
              if (v619)
                operator delete(v619);
              v8 = v705;
            }
            else
            {
              *v619 = v618;
              v621 = v619 + 1;
            }
            *(_QWORD *)(v6 + 1424) = v621;
            sub_1C500A9B4(v695, (uint64_t *)&v718)[1] = 0;
          }
LABEL_1117:
          *a1 = 0;
          goto LABEL_703;
        case 9:
        case 14:
        case 18:
          v14 = (char *)v715;
          v15 = v716;
          if (*(_BYTE *)(v6 + 392))
          {
            v16 = *((_QWORD *)v715 + 1);
            if (v16 + *(_QWORD *)v715 > *(_QWORD *)(v6 + 384))
              goto LABEL_701;
            v17 = (const char *)(*(_QWORD *)(v6 + 376) + *(_QWORD *)v715);
            v15 = v716 - 2;
            v14 = (char *)v715 + 16;
          }
          else
          {
            v16 = 0;
            v17 = "";
          }
          v250 = 3;
          if ((_DWORD)v721 != 9)
            v250 = 4;
          if (v15 < v250)
            goto LABEL_701;
          v677 = (std::string::size_type)v17;
          v686 = (llvm::GlobalObject *)v15;
          LODWORD(v718) = *(_DWORD *)v14;
          v251 = sub_1C500E8C8((_QWORD *)v6, v718);
          if (!v251)
            goto LABEL_701;
          v252 = (llvm::PointerType *)v251;
          if (v13 == 9)
          {
            if (*(_DWORD *)(v251 + 8) != 15)
            {
              v308 = "Invalid type for value";
              goto LABEL_702;
            }
            v669 = *(_DWORD *)(v251 + 8);
            v253 = *(_QWORD *)(v6 + 544);
            v254 = *(unsigned int *)(v6 + 560);
            v255 = sub_1C4E341F8(v253, v254, (int)v718);
            if ((int *)(v253 + 32 * v254) == v255 || !v255[4])
              v256 = -1;
            else
              v256 = **((_DWORD **)v255 + 1);
            v6 = v706;
            LODWORD(v718) = v256;
            v365 = sub_1C500E8C8((_QWORD *)v706, v256);
            if (!v365)
            {
              v308 = "Missing element type for old-style indirect symbol";
              goto LABEL_702;
            }
            v252 = (llvm::PointerType *)v365;
            v671 = v669 >> 8;
            v372 = *((_QWORD *)v14 + 2);
            v664 = *((_QWORD *)v14 + 1);
            v655 = 3;
            v373 = 1;
          }
          else
          {
            v671 = *((_DWORD *)v14 + 2);
            v372 = *((_QWORD *)v14 + 3);
            v664 = *((_QWORD *)v14 + 2);
            if (v13 != 14)
            {
              v659 = (llvm::GlobalObject *)*((_QWORD *)v14 + 3);
              v386 = sub_1C5016F30(v372);
              v736 = 261;
              v734.__r_.__value_.__r.__words[0] = v677;
              v734.__r_.__value_.__l.__size_ = v16;
              v387 = llvm::GlobalIFunc::create(v252, (llvm::Type *)v671, v386, (uint64_t)&v734, 0, *(_QWORD *)(v6 + 432));
              v388 = 4;
              v373 = 2;
              goto LABEL_881;
            }
            v655 = 4;
            v373 = 2;
          }
          LODWORD(v659) = v372;
          v389 = sub_1C5016F30(v372);
          v736 = 261;
          v734.__r_.__value_.__r.__words[0] = v677;
          v734.__r_.__value_.__l.__size_ = v16;
          v387 = llvm::GlobalAlias::create(v252, (llvm::Type *)v671, v389, (uint64_t)&v734, *(_QWORD *)(v706 + 432));
          v388 = v655;
LABEL_881:
          v390 = (unint64_t)v686;
          if (v686 == (llvm::GlobalObject *)v388)
          {
            v391 = v388;
          }
          else
          {
            v391 = v373 + 3;
            if ((*(_DWORD *)(v387 + 32) & 0xFu) - 7 >= 2)
            {
              v392 = *(_QWORD *)&v14[8 * v388];
              v393 = (_DWORD)v392 == 2 ? 32 : 16 * ((_DWORD)v392 == 1);
              *(_DWORD *)(v387 + 32) = v393 | *(_DWORD *)(v387 + 32) & 0xFFFFFFCF;
              if (v393)
              {
                if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v387) & 1) == 0)
                  *(_DWORD *)(v387 + 32) |= 0x4000u;
                v390 = (unint64_t)v686;
              }
            }
          }
          if (v13 != 14 && v13 != 9)
            goto LABEL_1081;
          if (v390 == v391)
          {
            if ((_DWORD)v659 == 6)
            {
              v394 = *(_DWORD *)(v387 + 32) & 0xFFFFFCFF | 0x200;
LABEL_1068:
              *(_DWORD *)(v387 + 32) = v394;
            }
            else if ((_DWORD)v659 == 5)
            {
              v394 = *(_DWORD *)(v387 + 32) & 0xFFFFFCFF | 0x100;
              goto LABEL_1068;
            }
            v395 = v390;
            goto LABEL_1070;
          }
          v395 = v391 + 1;
          v396 = *(_QWORD *)&v14[8 * v391];
          if ((_DWORD)v396 == 2)
            v397 = 512;
          else
            v397 = ((_DWORD)v396 == 1) << 8;
          *(_DWORD *)(v387 + 32) = v397 | *(_DWORD *)(v387 + 32) & 0xFFFFFCFF;
          ++v391;
LABEL_1070:
          if (v390 == v395)
          {
            v514 = v390;
          }
          else
          {
            v514 = v391 + 1;
            v515 = *(_QWORD *)&v14[8 * v395];
            if (v515 >= 5)
              v516 = 1024;
            else
              v516 = (_DWORD)v515 << 10;
            *(_DWORD *)(v387 + 32) = *(_DWORD *)(v387 + 32) & 0xFFFFE3FF | v516;
            ++v391;
          }
          if (v390 != v514)
          {
            ++v391;
            v517 = *(_QWORD *)&v14[8 * v514];
            if ((_DWORD)v517 == 2)
              v518 = 64;
            else
              v518 = ((_DWORD)v517 == 1) << 7;
            *(_DWORD *)(v387 + 32) = v518 | *(_DWORD *)(v387 + 32) & 0xFFFFFF3F;
          }
LABEL_1081:
          if (v390 == v391)
          {
            v519 = *(_DWORD *)(v387 + 32);
          }
          else
          {
            v520 = *(_QWORD *)&v14[8 * v391++];
            v519 = *(_DWORD *)(v387 + 32) & 0xFFFFBFFF | (((_DWORD)v520 == 1) << 14);
            *(_DWORD *)(v387 + 32) = v519;
          }
          if ((v519 & 0xF) - 7 < 2)
            goto LABEL_1088;
          if ((v519 & 0x30) != 0)
          {
            v521 = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v387);
            v390 = (unint64_t)v686;
            if ((v521 & 1) == 0)
            {
              v519 = *(_DWORD *)(v387 + 32);
LABEL_1088:
              *(_DWORD *)(v387 + 32) = v519 | 0x4000;
            }
          }
          if (v390 > v391 + 1)
          {
            v522 = *(_QWORD *)&v14[8 * v391 + 8];
            if ((*(_BYTE *)(v387 + 33) & 0x80) != 0 || v522)
            {
              v636 = (_BYTE *)(*(_QWORD *)(v706 + 376) + *(_QWORD *)&v14[8 * v391]);
              if (v522)
              {
                v636 = llvm::UniqueStringSaver::save(***(_QWORD ***)v387 + 2136, v636, v522);
                v637 = v641;
              }
              else
              {
                v637 = 0;
              }
              v642 = ***(_QWORD ***)v387 + 2528;
              v734.__r_.__value_.__r.__words[0] = v387;
              v643 = sub_1C617A140(v642, (uint64_t *)&v734);
              v643[1] = v636;
              v643[2] = v637;
              *(_DWORD *)(v387 + 32) = *(_DWORD *)(v387 + 32) & 0xFFFF7FFF | ((v637 != 0) << 15);
            }
          }
          data = sub_1C500EA24(v706, *(_QWORD *)v387, (char *)&v718, 1);
          v734.__r_.__value_.__r.__words[0] = v387;
          LODWORD(__p.__r_.__value_.__l.__data_) = data;
          v524 = *(_QWORD *)(v706 + 624);
          if (v524 >= *(_QWORD *)(v706 + 632))
          {
            v525 = sub_1C500F778(v694, (uint64_t *)&v734, &__p);
            v8 = v705;
          }
          else
          {
            *(_QWORD *)v524 = 6;
            *(_QWORD *)(v524 + 8) = 0;
            *(_QWORD *)(v524 + 16) = v387;
            v8 = v705;
            if (v387 != -8192 && v387 != -4096 && v387)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v524);
              data = (int)__p.__r_.__value_.__l.__data_;
            }
            *(_DWORD *)(v524 + 24) = data;
            v525 = v524 + 32;
          }
          *(_QWORD *)(v706 + 624) = v525;
          v526 = *(char **)(v706 + 1304);
          v527 = *(_QWORD *)(v706 + 1312);
          if ((unint64_t)v526 >= v527)
          {
            v529 = *(char **)(v706 + 1296);
            v530 = (v526 - v529) >> 4;
            v531 = v530 + 1;
            if ((unint64_t)(v530 + 1) >> 60)
              goto LABEL_1330;
            v532 = v527 - (_QWORD)v529;
            if (v532 >> 3 > v531)
              v531 = v532 >> 3;
            if ((unint64_t)v532 >= 0x7FFFFFFFFFFFFFF0)
              v533 = 0xFFFFFFFFFFFFFFFLL;
            else
              v533 = v531;
            if (v533)
            {
              if (v533 >> 60)
                goto LABEL_1331;
              v534 = (char *)operator new(16 * v533);
            }
            else
            {
              v534 = 0;
            }
            v535 = &v534[16 * v530];
            *(_QWORD *)v535 = v387;
            *((_DWORD *)v535 + 2) = v664;
            v536 = v535;
            if (v526 == v529)
            {
              v537 = (_QWORD *)v706;
            }
            else
            {
              do
              {
                *((_OWORD *)v536 - 1) = *((_OWORD *)v526 - 1);
                v536 -= 16;
                v526 -= 16;
              }
              while (v526 != v529);
              v537 = (_QWORD *)v706;
              v526 = *(char **)(v706 + 1296);
            }
            v537[162] = v536;
            v528 = v535 + 16;
            v537[163] = v535 + 16;
            v537[164] = &v534[16 * v533];
            v8 = v705;
            if (v526)
              operator delete(v526);
          }
          else
          {
            *(_QWORD *)v526 = v387;
            *((_DWORD *)v526 + 2) = v664;
            v528 = v526 + 16;
          }
          v6 = v706;
          *(_QWORD *)(v706 + 1304) = v528;
          goto LABEL_1117;
        case 11:
          memset(&v734, 0, sizeof(v734));
          sub_1C5000624(&v734, (std::string *)v715, (std::string *)((char *)v715 + 8 * v716));
          v263 = *(_QWORD *)(v6 + 504);
          if (v263 >= *(_QWORD *)(v6 + 512))
          {
            v299 = sub_1C4D9AEFC(v699, (uint64_t)&v734);
          }
          else
          {
            if (SHIBYTE(v734.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_1C47EBC30(*(_BYTE **)(v6 + 504), v734.__r_.__value_.__l.__data_, v734.__r_.__value_.__l.__size_);
            }
            else
            {
              v264 = *(_OWORD *)&v734.__r_.__value_.__l.__data_;
              *(_QWORD *)(v263 + 16) = *((_QWORD *)&v734.__r_.__value_.__l + 2);
              *(_OWORD *)v263 = v264;
            }
            v299 = v263 + 24;
          }
          *(_QWORD *)(v6 + 504) = v299;
          goto LABEL_813;
        case 12:
          v257 = v715;
          v258 = v716;
          v259 = *(unsigned __int8 *)(v6 + 392);
          if (*(_BYTE *)(v6 + 392))
          {
            v260 = *((_QWORD *)v715 + 1);
            if (v260 + *(_QWORD *)v715 > *(_QWORD *)(v6 + 384)
              || (v261 = (std::string *)(*(_QWORD *)(v6 + 376) + *(_QWORD *)v715),
                  v258 = v716 - 2,
                  v257 = (char *)v715 + 16,
                  v716 == 2))
            {
LABEL_609:
              v734.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid record";
              v736 = 259;
              v262 = a1;
              v8 = v705;
              goto LABEL_610;
            }
          }
          else
          {
            v260 = 0;
            v261 = (std::string *)"";
            if (!(_DWORD)v716)
              goto LABEL_609;
          }
          if ((*v257 - 2) >= 4)
            v301 = 0;
          else
            v301 = *v257 - 1;
          memset(&__p, 0, sizeof(__p));
          if (v259)
            goto LABEL_995;
          if (v258 <= 1)
          {
            v302 = "Invalid record";
LABEL_798:
            v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v302;
            v736 = 259;
            v8 = v705;
            sub_1C500A780(a1, v705, (llvm::Twine *)&v734);
            goto LABEL_799;
          }
          v362 = v257[2];
          if (v362 > v258 - 2)
          {
            v302 = "Comdat name size too large";
            goto LABEL_798;
          }
          std::string::reserve(&__p, v257[2]);
          if (v362)
          {
            for (j = 0; j != v362; ++j)
              std::string::push_back(&__p, *(_QWORD *)&v257[2 * (j + 2)]);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v261 = &__p;
          else
            v261 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v260 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            v260 = __p.__r_.__value_.__l.__size_;
          v6 = v706;
LABEL_995:
          inserted = llvm::Module::getOrInsertComdat(*(_QWORD *)(v6 + 432), (unsigned __int8 *)v261, v260);
          v474 = (_QWORD *)v6;
          v475 = inserted;
          *((_DWORD *)inserted + 2) = v301;
          v476 = (size_t **)v474[88];
          v477 = v474[89];
          if ((unint64_t)v476 >= v477)
          {
            v479 = (_QWORD *)v474[87];
            v480 = v476 - (size_t **)v479;
            v481 = v480 + 1;
            if ((unint64_t)(v480 + 1) >> 61)
              goto LABEL_1330;
            v482 = v477 - (_QWORD)v479;
            if (v482 >> 2 > v481)
              v481 = v482 >> 2;
            if ((unint64_t)v482 >= 0x7FFFFFFFFFFFFFF8)
              v483 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v483 = v481;
            if (v483)
            {
              if (v483 >> 61)
                goto LABEL_1331;
              v484 = (char *)operator new(8 * v483);
            }
            else
            {
              v484 = 0;
            }
            v512 = (size_t **)&v484[8 * v480];
            *v512 = v475;
            v478 = v512 + 1;
            if (v476 == v479)
            {
              v6 = v706;
            }
            else
            {
              v6 = v706;
              do
              {
                v513 = *--v476;
                *--v512 = v513;
              }
              while (v476 != v479);
              v476 = *(size_t ***)(v706 + 696);
            }
            *(_QWORD *)(v6 + 696) = v512;
            *(_QWORD *)(v6 + 704) = v478;
            *(_QWORD *)(v6 + 712) = &v484[8 * v483];
            if (v476)
              operator delete(v476);
          }
          else
          {
            *v476 = inserted;
            v478 = v476 + 1;
            v6 = (uint64_t)v474;
          }
          v8 = v705;
          *(_QWORD *)(v6 + 704) = v478;
          *a1 = 0;
LABEL_799:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_703:
          if (!*a1)
            goto LABEL_815;
          goto LABEL_28;
        case 13:
          if ((_DWORD)v716)
          {
            *(_QWORD *)(v6 + 464) = *(_QWORD *)v715 - 1;
            goto LABEL_815;
          }
          v265 = "Invalid record";
LABEL_671:
          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
          v736 = 259;
          sub_1C500A780(a1, v8, (llvm::Twine *)&v734);
          goto LABEL_28;
        case 16:
          v274 = &v735;
          v734.__r_.__value_.__r.__words[0] = (std::string::size_type)&v735;
          *(_OWORD *)&v734.__r_.__value_.__r.__words[1] = xmmword_1C85F20B0;
          v275 = (uint64_t *)v715;
          v276 = v716;
          if (v716 >= 0x81)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v734, &v735, v716, 1);
            v277 = v734.__r_.__value_.__l.__size_;
            v279 = (uint64_t *)v734.__r_.__value_.__r.__words[0];
          }
          else
          {
            v277 = 0;
            v278 = 0;
            v279 = &v735;
            if (!(_DWORD)v716)
              goto LABEL_632;
          }
          v280 = (char *)v279 + v277;
          v281 = 8 * v276;
          do
          {
            v282 = *v275++;
            *v280++ = v282;
            v281 -= 8;
          }
          while (v281);
          v278 = v734.__r_.__value_.__l.__size_;
          v274 = (uint64_t *)v734.__r_.__value_.__r.__words[0];
LABEL_632:
          v734.__r_.__value_.__l.__size_ = v278 + v276;
          LLVMSetSourceFileName_0(*(_QWORD *)(v6 + 432), v274, v278 + v276);
          if ((uint64_t *)v734.__r_.__value_.__l.__data_ != &v735)
            free(v734.__r_.__value_.__l.__data_);
          v8 = v705;
          goto LABEL_815;
        default:
          goto LABEL_815;
      }
    }
    if ((v722 & 1) != 0)
    {
      v364 = v721;
      v721 = 0;
      if (v364)
        (*(void (**)(void *))(*(_QWORD *)v364 + 8))(v364);
    }
LABEL_15:
    if ((v714 & 1) != 0)
    {
      v12 = v713;
      v713 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  while ((v11 | 2) == 2);
  if (v715 != v717)
    free(v715);
}

_DWORD *sub_1C5015F50(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C476B2A4(result);
    }
  }
  return result;
}

void sub_1C5015FA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char v7;
  char *v8;
  size_t v9;
  char v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  unint64_t v25;
  void *__p[2];
  char v27;
  char v28;
  void *v29[2];
  char v30;

  if (!**(_BYTE **)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    **(_BYTE **)a1 = 1;
    v3 = *(_QWORD *)(v2 + 432);
    v6 = *(char **)(v3 + 216);
    v4 = v3 + 216;
    v5 = v6;
    v7 = *(_BYTE *)(v4 + 287);
    if (v7 >= 0)
      v8 = (char *)(v4 + 264);
    else
      v8 = *(char **)(v4 + 264);
    if (v7 >= 0)
      v9 = v7 & 0x7F;
    else
      v9 = *(_QWORD *)(v4 + 272);
    v10 = *(_BYTE *)(v4 + 23);
    if (v10 >= 0)
      v11 = (char *)v4;
    else
      v11 = v5;
    v12 = *(_QWORD *)(v4 + 8);
    if (v10 >= 0)
      v13 = v10 & 0x7F;
    else
      v13 = v12;
    llvm::UpgradeDataLayoutString(v8, v9, v11, v13, (uint64_t)v29);
    if (v30 >= 0)
      v14 = v29;
    else
      v14 = (void **)v29[0];
    if (v30 >= 0)
      v15 = v30 & 0x7F;
    else
      v15 = (unint64_t)v29[1];
    llvm::DataLayout::reset(*(_QWORD *)(v2 + 432) + 272, v14, v15);
    v16 = *(_QWORD *)(v2 + 432);
    v19 = *(_QWORD *)(v16 + 216);
    v17 = v16 + 216;
    v18 = v19;
    v20 = *(_BYTE *)(v17 + 23);
    if (v20 >= 0)
      v21 = v17;
    else
      v21 = v18;
    v22 = *(_QWORD *)(v17 + 8);
    if (v20 >= 0)
      v23 = v20 & 0x7F;
    else
      v23 = v22;
    (**(void (***)(void **__return_ptr, _QWORD, uint64_t, uint64_t))(a1 + 16))(__p, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v21, v23);
    if (v28)
    {
      if (v27 >= 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      if (v27 >= 0)
        v25 = v27 & 0x7F;
      else
        v25 = (unint64_t)__p[1];
      llvm::DataLayout::reset(*(_QWORD *)(v2 + 432) + 272, v24, v25);
      if (v28 && v27 < 0)
        operator delete(__p[0]);
    }
    if (v30 < 0)
      operator delete(v29[0]);
  }
}

void sub_1C50160EC(uint64_t *a1, _QWORD *a2)
{
  llvm::GlobalVariable *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t ***v17;
  llvm::LLVMContext *v18;
  size_t v19;
  llvm::Function *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  llvm *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  llvm **v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::ValueSymbolTable *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  void **v44;
  void *v45;
  uint64_t ***v46;
  _QWORD v47[4];
  __int16 v48;

  sub_1C501652C(a1, a2);
  if (!*a1)
  {
    if (a2[159] == a2[160] && a2[162] == a2[163])
    {
      v5 = a2[54];
      v6 = v5 + 24;
      v7 = *(_QWORD *)(v5 + 32);
      if (v7 != v5 + 24)
      {
        do
        {
          if (v7)
            v8 = (uint64_t ***)(v7 - 56);
          else
            v8 = 0;
          sub_1C5021B88(a2[85], (uint64_t)v8);
          v47[0] = 0;
          v15 = sub_1C5332594(v8, (std::string::size_type)v47, v9, v10, v11, v12, v13, v14);
          v16 = v47[0];
          if (v47[0])
            v17 = (uint64_t ***)v47[0];
          else
            v17 = v8;
          v18 = (llvm::LLVMContext *)*((unsigned int *)v17 + 9);
          if ((_DWORD)v18)
            v17[14] = (uint64_t **)llvm::Intrinsic::getAttributes((llvm::Intrinsic *)**v17, v18);
          if (v15)
          {
            v46 = v8;
            sub_1C61B6040(a2 + 180, &v46)[1] = v16;
          }
          else
          {
            v19 = llvm::Intrinsic::remangleIntrinsicFunction((llvm::Intrinsic *)v8, v18);
            if ((_BYTE)v20)
            {
              v46 = v8;
              sub_1C61B6040(a2 + 183, &v46)[1] = v19;
            }
          }
          llvm::UpgradeFunctionAttributes((llvm *)v8, v20);
          v7 = *(_QWORD *)(v7 + 8);
        }
        while (v7 != v6);
        v5 = a2[54];
      }
      v21 = v5 + 8;
      v22 = *(_QWORD *)(v5 + 16);
      if (v22 == v5 + 8)
      {
        v25 = 0;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          if (v22)
            v26 = (llvm *)(v22 - 56);
          else
            v26 = 0;
          v27 = llvm::UpgradeGlobalVariable(v26, v4);
          if (v27)
          {
            v28 = v27;
            if (v25 >= v23)
            {
              v29 = (v25 - v24) >> 4;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 60)
                abort();
              if ((v23 - v24) >> 3 > v30)
                v30 = (v23 - v24) >> 3;
              if ((unint64_t)(v23 - v24) >= 0x7FFFFFFFFFFFFFF0)
                v31 = 0xFFFFFFFFFFFFFFFLL;
              else
                v31 = v30;
              if (v31 >> 60)
                sub_1C4764EE4();
              v32 = (char *)operator new(16 * v31);
              v33 = (llvm **)&v32[16 * v29];
              *v33 = v26;
              v33[1] = (llvm *)v28;
              if (v25 == v24)
              {
                v35 = &v32[16 * v29];
              }
              else
              {
                v34 = &v32[16 * v29];
                do
                {
                  v35 = v34 - 16;
                  *((_OWORD *)v34 - 1) = *((_OWORD *)v25 - 1);
                  v25 -= 16;
                  v34 -= 16;
                }
                while (v25 != v24);
              }
              v23 = &v32[16 * v31];
              v25 = (char *)(v33 + 2);
              if (v24)
                operator delete(v24);
              v24 = v35;
            }
            else
            {
              *(_QWORD *)v25 = v26;
              *((_QWORD *)v25 + 1) = v27;
              v25 += 16;
            }
          }
          v22 = *(_QWORD *)(v22 + 8);
        }
        while (v22 != v21);
        if (v24 != v25)
        {
          v36 = v24;
          do
          {
            llvm::GlobalVariable::eraseFromParent(*(llvm::GlobalVariable **)v36);
            v37 = a2[54];
            v38 = *((_QWORD *)v36 + 1);
            *(_QWORD *)(v38 + 40) = v37;
            if ((*(_BYTE *)(v38 + 23) & 0x10) != 0)
            {
              v39 = *(llvm::ValueSymbolTable **)(v37 + 112);
              if (v39)
                llvm::ValueSymbolTable::reinsertValue(v39, (llvm::Value *)v38);
            }
            v40 = *(_QWORD *)(v37 + 8);
            *(_QWORD *)(v38 + 56) = v40;
            *(_QWORD *)(v38 + 64) = v37 + 8;
            v41 = v38 + 56;
            *(_QWORD *)(v40 + 8) = v41;
            *(_QWORD *)(v37 + 8) = v41;
            v36 += 16;
          }
          while (v36 != v25);
          v25 = v24;
        }
      }
      v42 = a2 + 159;
      v43 = (void *)a2[159];
      v44 = (void **)(a2 + 162);
      v42[1] = 0;
      v42[2] = 0;
      *v42 = 0;
      if (v43)
        operator delete(v43);
      v45 = *v44;
      v44[1] = 0;
      v44[2] = 0;
      *v44 = 0;
      if (v45)
        operator delete(v45);
      *a1 = 0;
      if (v25)
        operator delete(v25);
    }
    else
    {
      v47[0] = "Malformed global initializer set";
      v48 = 259;
      sub_1C500A780(a1, (uint64_t)(a2 + 1), (llvm::Twine *)v47);
    }
  }
}

void sub_1C50163F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void **v8[3];
  char v9;
  __int16 v10;
  void ***v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::ReadBlockInfoBlock((llvm::BitstreamCursor *)(a2 + 24), 0, (uint64_t)&v12);
  if ((v15 & 1) != 0)
  {
    v5 = v12;
    *(_QWORD *)&v12 = 0;
    *a1 = v5;
  }
  else
  {
    if (v14)
    {
      v4 = v13;
      v7 = v12;
      v13 = 0;
      v12 = 0uLL;
      v9 = 1;
      sub_1C4FF8834((void **)a2);
      *(_OWORD *)a2 = v7;
      *(_QWORD *)(a2 + 16) = v4;
      memset(v8, 0, sizeof(v8));
      *a1 = 0;
      v11 = v8;
      sub_1C4FF8984((void ***)&v11);
    }
    else
    {
      v8[0] = (void **)"Malformed block";
      v10 = 259;
      sub_1C500A780(a1, a2, (llvm::Twine *)v8);
    }
    if ((v15 & 1) == 0)
    {
      if (v14)
      {
        v8[0] = (void **)&v12;
        sub_1C4FF8984(v8);
      }
      return;
    }
  }
  v6 = v12;
  *(_QWORD *)&v12 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void sub_1C501652C(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _OWORD *v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::UndefValue *v24;
  uint64_t v25;
  int v26;
  uint64_t **v28;
  llvm::PointerType *v29;
  llvm::Constant *v30;
  llvm::UndefValue **v31;
  uint64_t v32;
  uint64_t v33;
  llvm::UndefValue ***v34;
  uint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  __int128 v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  __int128 v73;
  char *v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  const char *v78;
  _QWORD *__p;
  uint64_t *v81;
  const char *v82;
  __int16 v83;

  v3 = (uint64_t *)a2[159];
  v4 = (uint64_t *)a2[160];
  *(_OWORD *)(a2 + 159) = 0u;
  a2[161] = 0;
  v5 = (uint64_t *)a2[162];
  v6 = (uint64_t *)a2[163];
  *((_OWORD *)a2 + 81) = 0u;
  a2[164] = 0;
  __p = (_QWORD *)a2[165];
  a2[165] = 0;
  v7 = (_DWORD *)a2[166];
  a2[167] = 0;
  a2[166] = 0;
  v81 = v5;
  while (v3 != v4)
  {
    v8 = *((unsigned int *)v4 - 2);
    v4 -= 2;
    v9 = a2[77];
    if (v8 >= ((unint64_t)(a2[78] - v9) >> 5))
    {
      v11 = (_OWORD *)a2[160];
      v12 = a2[161];
      if ((unint64_t)v11 >= v12)
      {
        v14 = (_OWORD *)a2[159];
        v15 = v11 - v14;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
LABEL_116:
          abort();
        v17 = v12 - (_QWORD)v14;
        if (v17 >> 3 > v16)
          v16 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 60)
LABEL_117:
            sub_1C4764EE4();
          v19 = (char *)operator new(16 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[16 * v15];
        *(_OWORD *)v20 = *(_OWORD *)v4;
        v21 = v20;
        if (v11 == v14)
        {
          v5 = v81;
        }
        else
        {
          v5 = v81;
          do
          {
            *((_OWORD *)v21 - 1) = *(v11 - 1);
            v21 -= 16;
            --v11;
          }
          while (v11 != v14);
          v11 = (_OWORD *)a2[159];
        }
        a2[159] = v21;
        v13 = v20 + 16;
        a2[160] = v20 + 16;
        a2[161] = &v19[16 * v18];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = *(_OWORD *)v4;
        v13 = v11 + 1;
      }
      a2[160] = v13;
    }
    else
    {
      v10 = *(unsigned __int8 **)(v9 + 32 * v8 + 16);
      if (!v10 || v10[16] >= 0x15u)
      {
LABEL_106:
        v77 = (uint64_t)(a2 + 1);
        v78 = "Expected a constant";
        goto LABEL_108;
      }
      llvm::GlobalVariable::setInitializer(*v4, (llvm::Constant *)v10);
    }
  }
  if (v5 == v6)
  {
LABEL_68:
    v47 = __p;
    if (__p == (_QWORD *)v7)
    {
LABEL_104:
      *a1 = 0;
      if (v47)
        goto LABEL_109;
      goto LABEL_110;
    }
    while (1)
    {
      v48 = *(v7 - 4);
      if (v48)
      {
        v49 = (v48 - 1);
        v50 = a2[77];
        if (v49 < ((unint64_t)(a2[78] - v50) >> 5))
        {
          v51 = *(_QWORD *)(v50 + 32 * v49 + 16);
          if (!v51 || *(unsigned __int8 *)(v51 + 16) >= 0x15u)
            goto LABEL_106;
          v52 = *((_QWORD *)v7 - 3);
          sub_1C53D1F60((_QWORD *)v52, v51);
          *(_WORD *)(v52 + 18) |= 8u;
          *(v7 - 4) = 0;
        }
      }
      v53 = *(v7 - 3);
      if (v53)
      {
        v54 = (v53 - 1);
        v55 = a2[77];
        if (v54 < ((unint64_t)(a2[78] - v55) >> 5))
        {
          v56 = *(_QWORD *)(v55 + 32 * v54 + 16);
          if (!v56 || *(unsigned __int8 *)(v56 + 16) >= 0x15u)
            goto LABEL_106;
          v57 = *((_QWORD *)v7 - 3);
          sub_1C53D2064((_QWORD *)v57, v56);
          v53 = 0;
          *(_WORD *)(v57 + 18) |= 2u;
          *(v7 - 3) = 0;
        }
      }
      v58 = v7 - 6;
      v59 = *(v7 - 2);
      if (v59)
      {
        v60 = (v59 - 1);
        v61 = a2[77];
        if (v60 >= ((unint64_t)(a2[78] - v61) >> 5))
          goto LABEL_85;
        v62 = *(_QWORD *)(v61 + 32 * v60 + 16);
        if (!v62 || *(unsigned __int8 *)(v62 + 16) >= 0x15u)
          goto LABEL_106;
        v63 = *((_QWORD *)v7 - 3);
        sub_1C53D2170((_QWORD *)v63, v62);
        *(_WORD *)(v63 + 18) |= 4u;
        *(v7 - 2) = 0;
        v53 = *(v7 - 3);
      }
      if (*(v7 - 4) | v53)
      {
LABEL_85:
        v64 = (_QWORD *)a2[166];
        v65 = a2[167];
        if ((unint64_t)v64 >= v65)
        {
          v68 = (_QWORD *)a2[165];
          v69 = 0xAAAAAAAAAAAAAAABLL * (v64 - v68) + 1;
          if (v69 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_116;
          v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)v68) >> 3);
          if (2 * v70 > v69)
            v69 = 2 * v70;
          if (v70 >= 0x555555555555555)
            v71 = 0xAAAAAAAAAAAAAAALL;
          else
            v71 = v69;
          if (v71)
          {
            if (v71 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_117;
            v72 = (char *)operator new(24 * v71);
          }
          else
          {
            v72 = 0;
          }
          v73 = *(_OWORD *)v58;
          v74 = &v72[8 * (v64 - v68)];
          *((_QWORD *)v74 + 2) = v58[2];
          *(_OWORD *)v74 = v73;
          v75 = v74;
          if (v64 != v68)
          {
            do
            {
              v76 = *(_OWORD *)(v64 - 3);
              *((_QWORD *)v75 - 1) = *(v64 - 1);
              *(_OWORD *)(v75 - 24) = v76;
              v75 -= 24;
              v64 -= 3;
            }
            while (v64 != v68);
            v64 = (_QWORD *)a2[165];
          }
          a2[165] = v75;
          v67 = v74 + 24;
          a2[166] = v74 + 24;
          a2[167] = &v72[24 * v71];
          v5 = v81;
          if (v64)
            operator delete(v64);
        }
        else
        {
          v66 = *(_OWORD *)v58;
          v64[2] = *((_QWORD *)v7 - 1);
          *(_OWORD *)v64 = v66;
          v67 = v64 + 3;
        }
        a2[166] = v67;
      }
      v7 = v58;
      v47 = __p;
      if (__p == v58)
        goto LABEL_104;
    }
  }
  while (1)
  {
    v22 = *((unsigned int *)v6 - 2);
    v6 -= 2;
    v23 = a2[77];
    if (v22 >= ((unint64_t)(a2[78] - v23) >> 5))
    {
      v36 = (_OWORD *)a2[163];
      v37 = a2[164];
      if ((unint64_t)v36 >= v37)
      {
        v39 = (_OWORD *)a2[162];
        v40 = v36 - v39;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 60)
          goto LABEL_116;
        v42 = v37 - (_QWORD)v39;
        if (v42 >> 3 > v41)
          v41 = v42 >> 3;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
          v43 = 0xFFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          if (v43 >> 60)
            goto LABEL_117;
          v44 = (char *)operator new(16 * v43);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[16 * v40];
        *(_OWORD *)v45 = *(_OWORD *)v6;
        v46 = v45;
        if (v36 != v39)
        {
          do
          {
            *((_OWORD *)v46 - 1) = *(v36 - 1);
            v46 -= 16;
            --v36;
          }
          while (v36 != v39);
          v36 = (_OWORD *)a2[162];
        }
        a2[162] = v46;
        v38 = v45 + 16;
        a2[163] = v45 + 16;
        a2[164] = &v44[16 * v43];
        if (v36)
          operator delete(v36);
        v5 = v81;
      }
      else
      {
        *v36 = *(_OWORD *)v6;
        v38 = v36 + 1;
      }
      a2[163] = v38;
      goto LABEL_67;
    }
    v24 = *(llvm::UndefValue **)(v23 + 32 * v22 + 16);
    if (!v24 || *((unsigned __int8 *)v24 + 16) >= 0x15u)
      goto LABEL_106;
    v25 = *v6;
    v26 = *(unsigned __int8 *)(*v6 + 16);
    if (!*v6 || v26 != 1)
      break;
    if (*(_QWORD *)v24 != *(_QWORD *)v25)
    {
      v77 = (uint64_t)(a2 + 1);
      v78 = "Alias and aliasee types don't match";
      goto LABEL_108;
    }
    llvm::GlobalAlias::setAliasee(*v6, v24);
LABEL_67:
    if (v5 == v6)
      goto LABEL_68;
  }
  if (v25 && v26 == 2)
  {
    v28 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)(v25 + 24), 0);
    v29 = (llvm::PointerType *)llvm::FunctionType::get(v28, 0, 0, 0);
    v30 = (llvm::Constant *)llvm::PointerType::get(v29, 0);
    if (*(llvm::Constant **)v24 != v30)
      v24 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v24, v30, 0);
    v31 = (llvm::UndefValue **)(v25 - 32);
    if (*(_QWORD *)(v25 - 32))
    {
      **(_QWORD **)(v25 - 16) = *(_QWORD *)(v25 - 24);
      v32 = *(_QWORD *)(v25 - 24);
      if (v32)
        *(_QWORD *)(v32 + 16) = *(_QWORD *)(v25 - 16);
    }
    *v31 = v24;
    if (v24)
    {
      v35 = *((_QWORD *)v24 + 1);
      v34 = (llvm::UndefValue ***)((char *)v24 + 8);
      v33 = v35;
      *(_QWORD *)(v25 - 24) = v35;
      if (v35)
        *(_QWORD *)(v33 + 16) = v25 - 24;
      *(_QWORD *)(v25 - 16) = v34;
      *v34 = v31;
    }
    goto LABEL_67;
  }
  v77 = (uint64_t)(a2 + 1);
  v78 = "Expected an alias or an ifunc";
LABEL_108:
  v82 = v78;
  v83 = 259;
  sub_1C500A780(a1, v77, (llvm::Twine *)&v82);
  v47 = __p;
  if (__p)
LABEL_109:
    operator delete(v47);
LABEL_110:
  if (v5)
    operator delete(v5);
  if (v3)
    operator delete(v3);
}

void sub_1C5016BC8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;

  if (!a4)
  {
    v8[0] = "Invalid version record";
    v9 = 259;
    sub_1C500A780(&v10, a2, (llvm::Twine *)v8);
    *(_BYTE *)(a1 + 8) |= 1u;
    v6 = v10;
    goto LABEL_5;
  }
  v5 = *a3;
  if (*a3 >= 3)
  {
    v8[0] = "Invalid value";
    v9 = 259;
    sub_1C500A780(&v7, a2, (llvm::Twine *)v8);
    *(_BYTE *)(a1 + 8) |= 1u;
    v6 = v7;
LABEL_5:
    *(_QWORD *)a1 = v6;
    return;
  }
  *(_BYTE *)(a2 + 384) = v5 == 2;
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_DWORD *)a1 = v5;
}

void LLVMSetModuleInlineAsm2_0(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  uint64_t v10;
  char *v11;
  __int128 __dst;
  unint64_t v13;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v13 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v13) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 104) = v13;
  if (*(char *)(a1 + 111) < 0)
  {
    v10 = *(_QWORD *)(a1 + 96);
    if (!v10)
      return;
    v11 = (char *)*v9;
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 111);
    if (!*(_BYTE *)(a1 + 111))
      return;
    v11 = (char *)(a1 + 88);
  }
  if (v11[v10 - 1] != 10)
    std::string::push_back((std::string *)(a1 + 88), 10);
}

void sub_1C5016DA4(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD v4[4];
  __int16 v5;
  _QWORD v6[4];
  __int16 v7;
  uint64_t v8;

  v8 = a3;
  if ((unint64_t)(a3 - 1) >= 0x50)
  {
    *a4 = 0;
    v4[0] = "Unknown attribute kind (";
    v4[2] = &v8;
    v5 = 3075;
    v6[0] = v4;
    v6[2] = ")";
    v7 = 770;
    sub_1C500A780(a1, a2 + 8, (llvm::Twine *)v6);
  }
  else
  {
    *a4 = dword_1C85F9AF0[a3 - 1];
    *a1 = 0;
  }
}

unint64_t sub_1C5016E2C(_QWORD *a1, _QWORD *a2, unsigned __int8 *a3, size_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;

  v5 = llvm::StructType::create(a2, a3, a4);
  v6 = v5;
  v7 = (unint64_t *)a1[221];
  v8 = a1[222];
  if ((unint64_t)v7 >= v8)
  {
    v10 = (_QWORD *)a1[220];
    v11 = v7 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (unint64_t *)&v15[8 * v11];
    *v16 = v6;
    v9 = v16 + 1;
    if (v7 != v10)
    {
      do
      {
        v17 = *--v7;
        *--v16 = v17;
      }
      while (v7 != v10);
      v7 = (unint64_t *)a1[220];
    }
    a1[220] = v16;
    a1[221] = v9;
    a1[222] = &v15[8 * v14];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  a1[221] = v9;
  return v6;
}

uint64_t sub_1C5016F30(int a1)
{
  if ((a1 - 1) > 0x12)
    return 0;
  else
    return dword_1C85F9C30[a1 - 1];
}

void sub_1C5016F54(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void sub_1C5016F64()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5016F78(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E813F270;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5016FAC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E813F270;
  a2[1] = v2;
  return result;
}

unint64_t sub_1C5016FC8(uint64_t a1, unsigned int *a2)
{
  return sub_1C500E8C8(*(_QWORD **)(a1 + 8), *a2);
}

void sub_1C5016FD4(uint64_t a1, int a2, int *a3, size_t a4, int a5, void *__src, size_t __len)
{
  int *v9;
  int *p_p;
  size_t size;
  int *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  llvm *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  int *v25;
  int *v26;
  char *v27;
  unint64_t v28;
  _DWORD *v29;
  std::string __p;
  int v31[4];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v9 = a3;
  v34 = *MEMORY[0x1E0C80C00];
  llvm::GlobalValue::getGlobalIdentifier(__src, __len, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (int *)&__p;
  else
    p_p = (int *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v32 = xmmword_1C85F4BB0;
  v33 = 0;
  llvm::MD5::update((int *)&v32, p_p, size);
  v14 = llvm::MD5::final((int *)&v32, v31);
  v15 = *(_QWORD *)v31;
  v16 = a5 - 7;
  v17 = *(_QWORD *)v31;
  if (v16 <= 1)
  {
    v32 = xmmword_1C85F4BB0;
    v33 = 0;
    llvm::MD5::update((int *)&v32, v9, a4);
    v14 = llvm::MD5::final((int *)&v32, v31);
    v17 = *(_QWORD *)v31;
  }
  if (byte_1ED7F49D0)
  {
    v18 = llvm::dbgs((llvm *)v14);
    v19 = v18;
    v20 = *((_QWORD *)v18 + 4);
    if ((unint64_t)(*((_QWORD *)v18 + 3) - v20) > 4)
    {
      *(_BYTE *)(v20 + 4) = 32;
      *(_DWORD *)v20 = 1145656647;
      *((_QWORD *)v18 + 4) += 5;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v18, "GUID ", 5uLL);
    }
    sub_1C5E21910(v19, v15, 0, 0, 0);
    v21 = (_BYTE *)*((_QWORD *)v19 + 4);
    if (*((_BYTE **)v19 + 3) == v21)
    {
      v19 = llvm::raw_ostream::write(v19, "(", 1uLL);
    }
    else
    {
      *v21 = 40;
      ++*((_QWORD *)v19 + 4);
    }
    sub_1C5E21910(v19, v17, 0, 0, 0);
    v22 = *((_QWORD *)v19 + 4);
    if ((unint64_t)(*((_QWORD *)v19 + 3) - v22) > 4)
    {
      *(_BYTE *)(v22 + 4) = 32;
      *(_DWORD *)v22 = 1936269353;
      v23 = (_BYTE *)(*((_QWORD *)v19 + 4) + 5);
      *((_QWORD *)v19 + 4) = v23;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, ") is ", 5uLL);
      v23 = (_BYTE *)*((_QWORD *)v19 + 4);
    }
    if (a4 <= *((_QWORD *)v19 + 3) - (_QWORD)v23)
    {
      if (a4)
      {
        memcpy(v23, v9, a4);
        v23 = (_BYTE *)(*((_QWORD *)v19 + 4) + a4);
        *((_QWORD *)v19 + 4) = v23;
      }
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, (const char *)v9, a4);
      v23 = (_BYTE *)*((_QWORD *)v19 + 4);
    }
    if (*((_BYTE **)v19 + 3) == v23)
    {
      llvm::raw_ostream::write(v19, "\n", 1uLL);
    }
    else
    {
      *v23 = 10;
      ++*((_QWORD *)v19 + 4);
    }
  }
  v24 = *(_QWORD *)(a1 + 416);
  if (!*(_BYTE *)(a1 + 384))
  {
    v25 = (int *)sub_1C484358C(*(_QWORD *)(v24 + 192), a4 + 1, 0);
    v26 = v25;
    if (a4)
      memcpy(v25, v9, a4);
    *((_BYTE *)v26 + a4) = 0;
    v9 = v26;
  }
  v27 = sub_1C4EEA81C(v24, v15);
  *((_QWORD *)v27 + 1) = v9;
  *((_QWORD *)v27 + 2) = a4;
  v28 = (unint64_t)v27 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(v24 + 133);
  LODWORD(v32) = a2;
  v29 = sub_1C61D0C8C(a1 + 440, (int *)&v32);
  *((_QWORD *)v29 + 1) = v28;
  *((_QWORD *)v29 + 2) = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

_DWORD *sub_1C5017310(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61D0E44(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -1;
      result += 6;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

void sub_1C50173D4(char **a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a4)
  {
    if (a4 >> 61)
LABEL_24:
      abort();
    v8 = (char *)operator new(8 * a4);
    v9 = &v8[8 * a4];
    v10 = &a3[a4];
    *a1 = v8;
    a1[2] = v9;
    v11 = a2 + 440;
    v12 = v8;
    do
    {
      v21 = *a3;
      v13 = *((_QWORD *)sub_1C61D0C8C(v11, &v21) + 1);
      if (v12 >= v9)
      {
        v15 = (v12 - v8) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          goto LABEL_24;
        if ((v9 - v8) >> 2 > v16)
          v16 = (v9 - v8) >> 2;
        if ((unint64_t)(v9 - v8) >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          if (v17 >> 61)
            sub_1C4764EE4();
          v18 = (char *)operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * v15];
        *(_QWORD *)v19 = v13;
        v14 = v19 + 8;
        while (v12 != v8)
        {
          v20 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *((_QWORD *)v19 - 1) = v20;
          v19 -= 8;
        }
        v9 = &v18[8 * v17];
        *a1 = v19;
        a1[1] = v14;
        a1[2] = v9;
        if (v8)
          operator delete(v8);
        v8 = v19;
      }
      else
      {
        *(_QWORD *)v12 = v13;
        v14 = v12 + 8;
      }
      a1[1] = v14;
      ++a3;
      v12 = v14;
    }
    while (a3 != v10);
  }
}

void sub_1C5017530(void **a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  unint64_t v7;
  char *v14;
  char *v15;
  unsigned int v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a4)
  {
    v7 = a4;
    if (a4 >> 60)
LABEL_37:
      abort();
    v14 = (char *)operator new(16 * a4);
    *a1 = v14;
    a1[1] = v14;
    a1[2] = &v14[16 * v7];
    if ((_DWORD)v7)
    {
      v15 = v14;
      v16 = 0;
      v38 = a2 + 440;
      if ((_DWORD)a6)
        v17 = 2;
      else
        v17 = 1;
      v36 = a7;
      v37 = v17;
      v34 = a3;
      v35 = v7;
      while (1)
      {
        v39 = *(_QWORD *)(a3 + 8 * v16);
        v18 = sub_1C61D0C8C(v38, &v39);
        if ((_DWORD)a5)
        {
          LOBYTE(v19) = 0;
          LODWORD(v20) = 0;
          v16 += v37;
        }
        else if ((_DWORD)a6)
        {
          LODWORD(v20) = 0;
          v19 = *(_QWORD *)(a3 + 8 * ++v16);
        }
        else
        {
          LOBYTE(v19) = 0;
          if (a7)
            v20 = *(_QWORD *)(a3 + 8 * ++v16);
          else
            LODWORD(v20) = 0;
        }
        v21 = *((_QWORD *)v18 + 1);
        v22 = v19 & 7 | (8 * v20);
        v23 = (unint64_t)a1[2];
        if ((unint64_t)v15 >= v23)
          break;
        *(_QWORD *)v15 = v21;
        *((_DWORD *)v15 + 2) = v22;
        v24 = v15 + 16;
LABEL_35:
        a1[1] = v24;
        ++v16;
        v15 = v24;
        if (v16 == (_DWORD)v7)
          return;
      }
      v25 = a6;
      v26 = (char *)*a1;
      v27 = (v15 - (_BYTE *)*a1) >> 4;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 60)
        goto LABEL_37;
      v7 = a5;
      v29 = v23 - (_QWORD)v26;
      if (v29 >> 3 > v28)
        v28 = v29 >> 3;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
        v30 = 0xFFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        if (v30 >> 60)
          sub_1C4764EE4();
        v31 = (char *)operator new(16 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[16 * v27];
      v33 = &v31[16 * v30];
      *(_QWORD *)v32 = v21;
      *((_DWORD *)v32 + 2) = v22;
      v24 = v32 + 16;
      if (v15 == v26)
      {
        *a1 = v32;
        a1[1] = v24;
        a1[2] = v33;
        a6 = v25;
        a5 = v7;
        a3 = v34;
        LODWORD(v7) = v35;
      }
      else
      {
        a6 = v25;
        a5 = v7;
        do
        {
          *((_OWORD *)v32 - 1) = *((_OWORD *)v15 - 1);
          v32 -= 16;
          v15 -= 16;
        }
        while (v15 != v26);
        v15 = (char *)*a1;
        *a1 = v32;
        a1[1] = v24;
        a1[2] = v33;
        a3 = v34;
        LODWORD(v7) = v35;
        if (!v15)
          goto LABEL_34;
      }
      operator delete(v15);
LABEL_34:
      a7 = v36;
      goto LABEL_35;
    }
  }
}

uint64_t *sub_1C5017748(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  _QWORD v14[5];

  v3 = result;
  v4 = result[2];
  v5 = result[1];
  if (v5 >= v4)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *result) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0x666666666666666)
      abort();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *result) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x333333333333333)
      v8 = 0x666666666666666;
    v14[4] = result + 2;
    if (v8 > 0x666666666666666)
      sub_1C4764EE4();
    v10 = 5 * v8;
    v11 = (char *)operator new(40 * v8);
    v12 = &v11[40 * v7];
    v14[0] = v11;
    v14[1] = v12;
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *((_OWORD *)v12 + 1) = v13;
    *((_QWORD *)v12 + 4) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v14[2] = v12 + 40;
    v14[3] = &v11[8 * v10];
    sub_1C61A7D7C(v3, v14);
    v6 = v3[1];
    result = (uint64_t *)sub_1C61A7E10((uint64_t)v14);
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
    v6 = v5 + 40;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
  v3[1] = v6;
  return result;
}

_QWORD *sub_1C501787C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61D10AC(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -1;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

_OWORD *sub_1C5017940(uint64_t a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;

  v5 = (void **)sub_1C4768D58(a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v8 = v12;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v7 = v6;
    v9 = **(_QWORD **)a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v10 = (uint64_t *)*v7;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v10);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

void sub_1C50179F8(void **a1, unint64_t a2)
{
  _OWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)v4) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v4[3 * a2];
      do
      {
        v4[1] = 0uLL;
        v4[2] = 0uLL;
        *v4 = 0uLL;
        *((_DWORD *)v4 + 6) = 64;
        *((_QWORD *)v4 + 2) = -1;
        *((_DWORD *)v4 + 10) = 64;
        *((_QWORD *)v4 + 4) = -1;
        v4 += 3;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (_BYTE *)*a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v9 = 0x555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x555555555555555)
        sub_1C4764EE4();
      v10 = (char *)operator new(48 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[48 * v6];
    v13 = &v12[48 * a2];
    v14 = v12;
    do
    {
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_DWORD *)v14 + 6) = 64;
      *((_QWORD *)v14 + 2) = -1;
      *((_DWORD *)v14 + 10) = 64;
      *((_QWORD *)v14 + 4) = -1;
      v14 += 48;
    }
    while (v14 != v13);
    v15 = &v10[48 * v9];
    v16 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v12[v18];
        v20 = &v17[v18];
        *((_OWORD *)v19 - 3) = *(_OWORD *)&v17[v18 - 48];
        *((_DWORD *)v19 - 6) = *(_DWORD *)&v17[v18 - 24];
        *((_QWORD *)v19 - 4) = *(_QWORD *)&v17[v18 - 32];
        *((_DWORD *)v20 - 6) = 0;
        *((_DWORD *)v19 - 2) = *(_DWORD *)&v17[v18 - 8];
        *((_QWORD *)v19 - 2) = *(_QWORD *)&v17[v18 - 16];
        *((_DWORD *)v20 - 2) = 0;
        v18 -= 48;
      }
      while (&v17[v18] != v16);
      v17 = (char *)*a1;
      v21 = (char *)a1[1];
      *a1 = &v12[v18];
      a1[1] = v13;
      a1[2] = v15;
      while (v21 != v17)
      {
        if (*((_DWORD *)v21 - 2) >= 0x41u)
        {
          v22 = *((_QWORD *)v21 - 2);
          if (v22)
            MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
        }
        if (*((_DWORD *)v21 - 6) >= 0x41u)
        {
          v23 = *((_QWORD *)v21 - 4);
          if (v23)
            MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
        }
        v21 -= 48;
      }
    }
    if (v17)
      operator delete(v17);
  }
}

_DWORD *sub_1C5017C34(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61D14EC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5017CEC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void **v14;
  __int16 v15;
  uint64_t (**v16)(llvm::DiagnosticInfo *__hidden);
  int v17;
  char v18;
  uint64_t v19;
  void ***v20;
  uint64_t v21;

  result = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  v7 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v9 = *(uint64_t **)a3;
    *v9 = v8;
    v9[1] = v10;
    v11 = *(_QWORD *)(a3 + 8);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 24))(__p, v7);
    v15 = 260;
    v14 = __p;
    v17 = 0;
    v18 = 0;
    v16 = &off_1E814E960;
    v19 = 0;
    v20 = &v14;
    v21 = 0;
    llvm::LLVMContext::diagnose(v11, (const llvm::DiagnosticInfo *)&v16);
    if (v13 < 0)
      operator delete(__p[0]);
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

_QWORD *sub_1C5017DE0()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E813F2B8;
  return result;
}

uint64_t sub_1C5017E14(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C5017E2C(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5017E50()
{
  return "llvm.bitcode";
}

void sub_1C5017E5C(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "Corrupted bitcode");
}

void sub_1C5017E80(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1C5017E8C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Print the global id for each value when reading the module summary";
  v1.n128_u64[1] = 66;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F4950, "print-summary-global-ids", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F4950, &dword_1C475E000);
}

void llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(llvm::MetadataLoader::MetadataLoaderImpl *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  int v3;
  llvm::BitstreamCursor *v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  int v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t inserted;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 **v51;
  char v52;
  unsigned __int8 *v53;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t **v60;
  llvm::BitstreamCursor *v61;
  unsigned __int8 *v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  __int16 v66;
  void *v67;
  uint64_t v68;
  _BYTE v69[512];
  unsigned __int8 *v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v6 = (llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 256);
  sub_1C61D15BC((uint64_t)this + 256, *((__int128 **)this + 25));
  v7 = v69;
  v67 = v69;
  v68 = 0x4000000000;
  *((_QWORD *)this + 81) = 0;
  v60 = (uint64_t **)((char *)this + 624);
  v61 = v6;
LABEL_2:
  while (2)
  {
    v8 = 8 * *((_QWORD *)this + 34) - *((unsigned int *)this + 72);
    while (1)
    {
      sub_1C4FF7B90((uint64_t)v6, 1, (uint64_t)&v63);
      if ((v64 & 1) != 0)
        break;
      v9 = (unsigned __int8 *)v63;
      if ((_DWORD)v63 != 2)
      {
        v10 = 0;
        goto LABEL_11;
      }
      sub_1C4FF3F30((uint64_t)v6, (uint64_t *)&v70);
      v9 = v70;
      if ((v64 & 1) != 0)
      {
        v11 = v63;
        v63 = 0;
        if (v11)
          (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
      }
      v10 = 1;
      v6 = v61;
      if (v9)
        goto LABEL_11;
    }
    v10 = 1;
    v9 = (unsigned __int8 *)v63;
LABEL_11:
    if (v10)
    {
      if (v9)
        break;
    }
    else
    {
      LODWORD(v2) = HIDWORD(v9);
    }
    if (!v10)
      v3 = (int)v9;
    switch(v3)
    {
      case 0:
      case 2:
        v63 = "Malformed block";
        v66 = 259;
        if (!atomic_load(qword_1EF8F6CB0))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
        v55 = qword_1EF8F6CB0[0];
        v56 = operator new();
        *(_QWORD *)v56 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v63, (_QWORD *)(v56 + 8));
        *(_QWORD *)(v56 + 32) = 1;
        *(_QWORD *)(v56 + 40) = v55;
        *(_BYTE *)(v56 + 48) = 1;
        *(_BYTE *)(a2 + 8) |= 1u;
        *(_QWORD *)a2 = v56;
        goto LABEL_117;
      case 1:
        *(_BYTE *)(a2 + 8) &= ~1u;
        *(_BYTE *)a2 = 1;
        goto LABEL_117;
      case 3:
        v12 = *((_QWORD *)this + 34);
        v13 = *((unsigned int *)this + 72);
        llvm::BitstreamCursor::skipRecord(v6, v2, (uint64_t)&v63);
        v14 = (int)v63;
        if ((v64 & 1) != 0)
        {
          v14 = 0;
          v15 = v63;
          if (v63)
          {
            *(_BYTE *)(a2 + 8) |= 1u;
            *(_QWORD *)a2 = v15;
            goto LABEL_117;
          }
        }
        v3 = 3;
        v16 = v14 - 1;
        v17 = 8 * v12 - v13;
        switch(v16)
        {
          case 0:
          case 1:
          case 2:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 36:
          case 39:
          case 40:
          case 43:
          case 44:
            *((_QWORD *)this + 76) = *((_QWORD *)this + 75);
            *((_QWORD *)this + 79) = *((_QWORD *)this + 78);
            *(_BYTE *)(a2 + 8) &= ~1u;
            *(_BYTE *)a2 = 0;
            goto LABEL_117;
          case 3:
            *((_QWORD *)this + 34) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *((_DWORD *)this + 72) = 0;
            if ((v17 & 0x3F) != 0)
            {
              sub_1C4FF7E04((uint64_t)v6, v17 & 0x3F, (uint64_t)&v63);
              if ((v64 & 1) != 0)
              {
                v22 = (unsigned __int8 *)v63;
                if (v63)
                  goto LABEL_110;
              }
            }
            LODWORD(v68) = 0;
            llvm::BitstreamCursor::readRecord((uint64_t)v6, v2, (uint64_t)&v67, 0, (uint64_t)&v63);
            if ((v64 & 1) != 0)
              goto LABEL_107;
            v18 = (uint64_t *)v67;
            v19 = v68;
            v63 = &v65;
            v64 = xmmword_1C6464ED0;
            if (v68 < 9)
            {
              v20 = 0;
              v39 = 0;
              v21 = &v65;
              if (!(_DWORD)v68)
                goto LABEL_72;
            }
            else
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, &v65, v68, 1);
              v21 = (uint64_t *)v63;
              v20 = v64;
            }
            v40 = (char *)v21 + v20;
            v41 = 8 * v19;
            do
            {
              v42 = *v18++;
              *v40++ = v42;
              v41 -= 8;
            }
            while (v41);
            v39 = v64;
LABEL_72:
            *(_QWORD *)&v64 = v39 + v19;
            v6 = v61;
            sub_1C4FF7E04((uint64_t)v61, *((_DWORD *)this + 73), (uint64_t)&v70);
            if ((v71 & 1) != 0
              || (LODWORD(v68) = 0,
                  llvm::BitstreamCursor::readRecord((uint64_t)v61, (int)v70, (uint64_t)&v67, 0, (uint64_t)&v70),
                  (v71 & 1) != 0))
            {
              v52 = 0;
              v53 = v70;
              *(_BYTE *)(a2 + 8) |= 1u;
              *(_QWORD *)a2 = v53;
            }
            else
            {
              v43 = v68;
              inserted = llvm::Module::getOrInsertNamedMetadata(*((_QWORD *)this + 27), (unsigned __int8 *)v63, v64);
              if ((_DWORD)v43)
              {
                v45 = inserted;
                v46 = 0;
                do
                {
                  v47 = sub_1C501FA6C((uint64_t)this, *(_DWORD *)((char *)v67 + v46));
                  v48 = v47;
                  if (v47)
                  {
                    switch(*v47)
                    {
                      case 4u:
                      case 5u:
                      case 6u:
                      case 7u:
                      case 8u:
                      case 9u:
                      case 0xAu:
                      case 0xBu:
                      case 0xCu:
                      case 0xDu:
                      case 0xEu:
                      case 0xFu:
                      case 0x10u:
                      case 0x11u:
                      case 0x12u:
                      case 0x13u:
                      case 0x14u:
                      case 0x15u:
                      case 0x16u:
                      case 0x17u:
                      case 0x18u:
                      case 0x19u:
                      case 0x1Au:
                      case 0x1Bu:
                      case 0x1Cu:
                      case 0x1Du:
                      case 0x1Eu:
                      case 0x1Fu:
                      case 0x20u:
                      case 0x21u:
                      case 0x22u:
                        break;
                      default:
                        v48 = 0;
                        break;
                    }
                  }
                  v70 = v48;
                  v49 = *(_QWORD *)(v45 + 48);
                  v50 = *(unsigned int *)(v49 + 8);
                  if (v50 >= *(_DWORD *)(v49 + 12))
                  {
                    sub_1C5419FD8(*(_QWORD *)(v45 + 48), &v70);
                  }
                  else
                  {
                    v51 = (unsigned __int8 **)(*(_QWORD *)v49 + 8 * v50);
                    *v51 = v48;
                    if (v48)
                    {
                      llvm::MetadataTracking::track((uint64_t)v51, v48, 2);
                      LODWORD(v50) = *(_DWORD *)(v49 + 8);
                    }
                    *(_DWORD *)(v49 + 8) = v50 + 1;
                  }
                  v46 += 8;
                }
                while (8 * v43 != v46);
              }
              v52 = 1;
              v6 = v61;
            }
            if (v63 != &v65)
              free(v63);
            v3 = 3;
            if ((v52 & 1) == 0)
              goto LABEL_117;
            continue;
          case 34:
            *((_QWORD *)this + 34) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *((_DWORD *)this + 72) = 0;
            if ((v17 & 0x3F) != 0)
            {
              sub_1C4FF7E04((uint64_t)v6, v17 & 0x3F, (uint64_t)&v63);
              if ((v64 & 1) != 0)
              {
                v22 = (unsigned __int8 *)v63;
                if (v63)
                  goto LABEL_110;
              }
            }
            v63 = 0;
            *(_QWORD *)&v64 = 0;
            LODWORD(v68) = 0;
            llvm::BitstreamCursor::readRecord((uint64_t)v6, v2, (uint64_t)&v67, (unsigned __int8 **)&v63, (uint64_t)&v70);
            if ((v71 & 1) != 0)
            {
              v22 = v70;
            }
            else
            {
              sub_1C501881C((uint64_t)this + 600, *(unsigned int *)v67);
              v70 = (unsigned __int8 *)this;
              llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings((int *)v67, v68, (const char *)v63, v64, (void (*)(uint64_t, const char *, unint64_t))sub_1C5021E04, (uint64_t)&v70, (uint64_t *)&v62);
              v22 = v62;
              if (!v62)
              {
LABEL_31:
                v3 = 3;
                continue;
              }
            }
            goto LABEL_110;
          case 35:
            v3 = 3;
            if (*((_QWORD *)this + 81))
              continue;
            *((_QWORD *)this + 81) = v8;
            goto LABEL_31;
          case 37:
            *((_QWORD *)this + 34) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *((_DWORD *)this + 72) = 0;
            if ((v17 & 0x3F) != 0)
            {
              sub_1C4FF7E04((uint64_t)v6, v17 & 0x3F, (uint64_t)&v63);
              if ((v64 & 1) != 0)
              {
                v22 = (unsigned __int8 *)v63;
                if (v63)
                  goto LABEL_110;
              }
            }
            LODWORD(v68) = 0;
            llvm::BitstreamCursor::readRecord((uint64_t)v6, v2, (uint64_t)&v67, 0, (uint64_t)&v63);
            if ((v64 & 1) != 0)
              goto LABEL_107;
            if ((_DWORD)v68 != 2)
            {
              v57 = "Invalid record";
LABEL_112:
              v63 = v57;
              v66 = 259;
              sub_1C5018778((uint64_t *)a2, (llvm::Twine *)&v63);
              *(_BYTE *)(a2 + 8) |= 1u;
              goto LABEL_117;
            }
            v23 = 8 * *((_QWORD *)this + 34) - *((unsigned int *)this + 72);
            v24 = *(_QWORD *)v67 + (*((_QWORD *)v67 + 1) << 32) + v23;
            *((_QWORD *)this + 34) = (v24 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *((_DWORD *)this + 72) = 0;
            if ((v24 & 0x3F) != 0)
            {
              sub_1C4FF7E04((uint64_t)v6, v24 & 0x3F, (uint64_t)&v63);
              if ((v64 & 1) != 0)
              {
                v22 = (unsigned __int8 *)v63;
                if (v63)
                {
LABEL_110:
                  *(_BYTE *)(a2 + 8) |= 1u;
                  *(_QWORD *)a2 = v22;
                  goto LABEL_117;
                }
              }
            }
            while (1)
            {
              sub_1C4FF7B90((uint64_t)v6, 1, (uint64_t)&v63);
              if ((v64 & 1) != 0)
                break;
              v3 = (int)v63;
              if ((_DWORD)v63 != 2)
              {
                v2 = (unint64_t)v63 >> 32;
                LODWORD(v68) = 0;
                llvm::BitstreamCursor::readRecord((uint64_t)v6, SHIDWORD(v63), (uint64_t)&v67, 0, (uint64_t)&v63);
                if ((v64 & 1) == 0)
                {
                  sub_1C4DB1D18((uint64_t)v60, v68);
                  if ((_DWORD)v68)
                  {
                    v58 = a2;
                    v59 = v7;
                    v26 = (char *)v67;
                    v27 = (char *)v67 + 8 * v68;
                    v28 = (uint64_t *)*((_QWORD *)this + 79);
                    do
                    {
                      v23 += *(_QWORD *)v26;
                      v29 = *((_QWORD *)this + 80);
                      if ((unint64_t)v28 >= v29)
                      {
                        v31 = *v60;
                        v32 = v28 - *v60;
                        v33 = v32 + 1;
                        if ((unint64_t)(v32 + 1) >> 61)
                          abort();
                        v34 = v29 - (_QWORD)v31;
                        if (v34 >> 2 > v33)
                          v33 = v34 >> 2;
                        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                          v35 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v35 = v33;
                        if (v35)
                        {
                          if (v35 >> 61)
                            sub_1C4764EE4();
                          v36 = (char *)operator new(8 * v35);
                        }
                        else
                        {
                          v36 = 0;
                        }
                        v37 = (uint64_t *)&v36[8 * v32];
                        *v37 = v23;
                        v30 = v37 + 1;
                        while (v28 != v31)
                        {
                          v38 = *--v28;
                          *--v37 = v38;
                        }
                        *((_QWORD *)this + 78) = v37;
                        *((_QWORD *)this + 79) = v30;
                        *((_QWORD *)this + 80) = &v36[8 * v35];
                        if (v31)
                          operator delete(v31);
                        v6 = v61;
                      }
                      else
                      {
                        *v28 = v23;
                        v30 = v28 + 1;
                      }
                      *((_QWORD *)this + 79) = v30;
                      v26 += 8;
                      v28 = v30;
                    }
                    while (v26 != v27);
                    a2 = v58;
                    v7 = v59;
                  }
                  goto LABEL_2;
                }
LABEL_107:
                v22 = (unsigned __int8 *)v63;
                goto LABEL_110;
              }
              sub_1C4FF3F30((uint64_t)v6, (uint64_t *)&v70);
              v9 = v70;
              if ((v64 & 1) != 0)
              {
                v25 = v63;
                v63 = 0;
                if (v25)
                  (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
              }
              v6 = v61;
              if (v9)
                goto LABEL_116;
            }
            v9 = (unsigned __int8 *)v63;
            break;
          case 38:
            v57 = "Corrupted Metadata block";
            goto LABEL_112;
          default:
            continue;
        }
        break;
      default:
        continue;
    }
    break;
  }
LABEL_116:
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v9;
LABEL_117:
  if (v67 != v7)
    free(v67);
}

void sub_1C5018778(uint64_t *a1, llvm::Twine *a2)
{
  unint64_t v5;
  uint64_t v6;

  if (!atomic_load(qword_1EF8F6CB0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
  v5 = qword_1EF8F6CB0[0];
  v6 = operator new();
  *(_QWORD *)v6 = off_1E81A0C88;
  llvm::Twine::str(a2, (_QWORD *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = 1;
  *(_QWORD *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 48) = 1;
  *a1 = v6;
}

void sub_1C501881C(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF0];
    v8 = v7;
    if (v5 != v2)
    {
      v9 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v8 = v9 - 16;
        *((_OWORD *)v9 - 1) = *((_OWORD *)v5 - 1);
        v5 -= 16;
        v9 -= 16;
      }
      while (v5 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[16 * a2];
    if (v2)
      operator delete(v2);
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings(int *a1@<X1>, uint64_t a2@<X2>, const char *a3@<X3>, unint64_t a4@<X4>, void (*a5)(uint64_t, const char *, unint64_t)@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  unint64_t v7;
  int v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  llvm::Twine *v17;
  const char *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const std::error_category *v28;
  const char *v29;
  const char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const std::error_category *v39;
  __int16 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a2 != 2)
  {
    v12 = "Invalid record: metadata strings layout";
    goto LABEL_7;
  }
  v9 = *a1;
  if (!*a1)
  {
    v12 = "Invalid record: metadata strings with no strings";
    goto LABEL_7;
  }
  v10 = a1[2];
  v11 = a4 - v10;
  if (a4 < v10)
  {
    v12 = "Invalid record: metadata strings corrupt offset";
LABEL_7:
    v31 = v12;
    LOWORD(v35) = 259;
    if (!atomic_load(qword_1EF8F6CB0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
    v14 = qword_1EF8F6CB0[0];
    v15 = operator new();
    *(_QWORD *)v15 = off_1E81A0C88;
    v16 = (_QWORD *)(v15 + 8);
    v17 = (llvm::Twine *)&v31;
    goto LABEL_10;
  }
  v31 = a3;
  v32 = v10;
  v20 = &a3[v10];
  v33 = 0;
  v34 = 0;
  v35 = 0;
  while (1)
  {
    if (v35)
      v21 = 1;
    else
      v21 = v32 > v33;
    if (!v21)
    {
      v29 = "Invalid record: metadata strings bad length";
      goto LABEL_35;
    }
    sub_1C4FF7E04((uint64_t)&v31, 6u, (uint64_t)&v38);
    if ((v39 & 1) != 0)
    {
LABEL_31:
      v27 = v38;
    }
    else
    {
      if ((v38 & 0x20) == 0)
      {
        v22 = v38;
        v23 = v7 & 0xFFFFFFFF00000000;
LABEL_21:
        v7 = v22 | v23;
        v24 = v22 | v23;
        *a7 = 0;
        goto LABEL_22;
      }
      v26 = 0;
      LODWORD(v23) = v38 & 0x1F;
      while (v26 < 0x1B)
      {
        sub_1C4FF7E04((uint64_t)&v31, 6u, (uint64_t)&v38);
        if ((v39 & 1) != 0)
          goto LABEL_31;
        v23 = ((v38 & 0x1F) << (v26 + 5)) | v23;
        v26 += 5;
        if ((v38 & 0x20) == 0)
        {
          v22 = v7 & 0xFFFFFFFF00000000;
          goto LABEL_21;
        }
      }
      v28 = std::generic_category();
      v38 = 92;
      v39 = v28;
      v37 = "Unterminated VBR";
      sub_1C5DF1730((_BYTE **)&v37, &v38, &v36);
      v27 = v36;
    }
    *a7 = v27;
    if (v27)
      return;
    v24 = 0;
    v7 = 0;
LABEL_22:
    v25 = v11 >= v24;
    v11 -= v24;
    if (!v25)
      break;
    a5(a6, v20, v24);
    v20 += v24;
    if (!--v9)
    {
      *a7 = 0;
      return;
    }
  }
  v29 = "Invalid record: metadata strings truncated chars";
LABEL_35:
  v38 = (uint64_t)v29;
  v40 = 259;
  if (!atomic_load(qword_1EF8F6CB0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
  v14 = qword_1EF8F6CB0[0];
  v15 = operator new();
  *(_QWORD *)v15 = off_1E81A0C88;
  v16 = (_QWORD *)(v15 + 8);
  v17 = (llvm::Twine *)&v38;
LABEL_10:
  llvm::Twine::str(v17, v16);
  *(_QWORD *)(v15 + 32) = 1;
  *(_QWORD *)(v15 + 40) = v14;
  *(_BYTE *)(v15 + 48) = 1;
  *a7 = v15;
}

void llvm::MetadataLoader::MetadataLoaderImpl::loadGlobalDeclAttachments(llvm::MetadataLoader::MetadataLoaderImpl *this@<X0>, _BYTE *a2@<X8>)
{
  int v2;
  int v3;
  llvm::MetadataLoader::MetadataLoaderImpl *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  char **v9;
  _BYTE *v10;
  unint64_t v11;
  int v12;
  char *v13;
  const char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char **v20;
  char *v21;
  unint64_t v23;
  uint64_t v24;
  char v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  const char *v35;
  unint64_t v37;
  uint64_t v38;
  const char *v39;
  llvm::MetadataLoader::MetadataLoaderImpl *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  const char *v44;
  char v45;
  __int16 v46;
  void *v47;
  uint64_t v48;
  _BYTE v49[512];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  void *__p[3];
  _QWORD v54[2];
  _QWORD v55[36];

  v55[34] = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 81))
  {
    a2[8] &= ~1u;
    *a2 = 1;
    return;
  }
  v5 = this;
  v6 = (__int128 *)*((_QWORD *)this + 25);
  v8 = *v6;
  v7 = v6[1];
  v52 = *((_QWORD *)v6 + 4);
  v50 = v8;
  v51 = v7;
  HIDWORD(v52) = *((_DWORD *)v6 + 9);
  memset(__p, 0, sizeof(__p));
  sub_1C4FF83E8(__p, *((_QWORD **)v6 + 5), *((_QWORD **)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 4);
  v9 = (char **)v54;
  v54[0] = v55;
  v54[1] = 0x800000000;
  if (*((_DWORD *)v6 + 18))
    sub_1C4FF8474((uint64_t)v54, (uint64_t)(v6 + 4));
  v55[32] = *((_QWORD *)v6 + 42);
  v10 = v49;
  v47 = v49;
  v48 = 0x4000000000;
  v11 = *((_QWORD *)v5 + 81);
  *(_QWORD *)&v51 = (v11 >> 3) & 0x1FFFFFFFFFFFFFF8;
  LODWORD(v52) = 0;
  if ((v11 & 0x3F) != 0)
  {
    sub_1C4FF7E04((uint64_t)&v50, v11 & 0x3F, (uint64_t)&v44);
    if ((v45 & 1) != 0)
    {
      v39 = v44;
      if (v44)
      {
        a2[8] |= 1u;
        *(_QWORD *)a2 = v39;
        goto LABEL_61;
      }
    }
  }
  v12 = a2[8];
  while (1)
  {
    while (1)
    {
      sub_1C4FF7B90((uint64_t)&v50, 1, (uint64_t)&v44);
      if ((v45 & 1) != 0)
      {
        v15 = 1;
        v14 = v44;
        goto LABEL_10;
      }
      v14 = v44;
      if ((_DWORD)v44 != 2)
        break;
      sub_1C4FF3F30((uint64_t)&v50, (uint64_t *)&v42);
      v14 = v42;
      if ((v45 & 1) != 0)
      {
        v35 = v44;
        v44 = 0;
        if (v35)
          (*(void (**)(const char *))(*(_QWORD *)v35 + 8))(v35);
      }
      if (v14)
      {
        v15 = 1;
        goto LABEL_10;
      }
    }
    v15 = 0;
LABEL_10:
    if (v15)
    {
      if (v14)
      {
        a2[8] = v12 | 1;
        *(_QWORD *)a2 = v14;
        goto LABEL_61;
      }
    }
    else
    {
      v2 = (int)v14;
      v3 = HIDWORD(v14);
    }
    if (v2 == 2)
      break;
    if (v2 == 1)
    {
      a2[8] = v12 & 0xFE;
      *a2 = 1;
      goto LABEL_61;
    }
    if (!v2)
      break;
    v16 = v51;
    v17 = v52;
    llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v50, v3, (uint64_t)&v42);
    if ((v43 & 1) != 0)
    {
      v25 = 0;
      v26 = v42;
      v42 = 0;
LABEL_26:
      v12 |= 1u;
      a2[8] = v12;
      *(_QWORD *)a2 = v26;
      goto LABEL_28;
    }
    if ((_DWORD)v42 == 36)
    {
      v18 = 8 * v16 - v17;
      *(_QWORD *)&v51 = (v18 >> 3) & 0x1FFFFFFFFFFFFFF8;
      LODWORD(v52) = 0;
      if ((v18 & 0x3F) != 0)
      {
        sub_1C4FF7E04((uint64_t)&v50, v18 & 0x3F, (uint64_t)&v44);
        if ((v45 & 1) != 0)
        {
          v26 = v44;
          if (v44)
            goto LABEL_40;
        }
      }
      LODWORD(v48) = 0;
      llvm::BitstreamCursor::readRecord((uint64_t)&v50, v3, (uint64_t)&v47, 0, (uint64_t)&v44);
      if ((v45 & 1) != 0)
      {
        v25 = 0;
        v26 = v44;
        goto LABEL_26;
      }
      if ((v48 & 1) == 0)
      {
        v40 = v5;
        v19 = v10;
        v20 = v9;
        v21 = v13;
        v44 = "Invalid record";
        v46 = 259;
        if (!atomic_load(qword_1EF8F6CB0))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
        v23 = qword_1EF8F6CB0[0];
        v24 = operator new();
        *(_QWORD *)v24 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v44, (_QWORD *)(v24 + 8));
        v25 = 0;
        *(_QWORD *)(v24 + 32) = 1;
        *(_QWORD *)(v24 + 40) = v23;
        *(_BYTE *)(v24 + 48) = 1;
        v12 |= 1u;
        a2[8] = v12;
        *(_QWORD *)a2 = v24;
        v13 = v21;
        v9 = v20;
        v10 = v19;
        v5 = v40;
        goto LABEL_28;
      }
      v28 = **((_QWORD **)v5 + 24);
      if (((unint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 24) + 8) - v28) >> 5) <= *(_QWORD *)v47)
      {
        v44 = "Invalid record";
        v46 = 259;
        sub_1C5018778(&v41, (llvm::Twine *)&v44);
        v25 = 0;
        v12 |= 1u;
        a2[8] = v12;
        *(_QWORD *)a2 = v41;
        v41 = 0;
      }
      else
      {
        v29 = *(unsigned __int8 **)(v28 + 32 * *(_QWORD *)v47 + 16);
        v30 = v29[16];
        if (v30 <= 3 && v30 != 1)
        {
          v32 = v51;
          v33 = v52;
          llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment((uint64_t)v5, (llvm::Value *)v29, (uint64_t)v47 + 8, v48 - 1, (uint64_t *)&v44);
          v26 = v44;
          if (v44
            || (v34 = 8 * v32 - v33,
                *(_QWORD *)&v51 = (v34 >> 3) & 0x1FFFFFFFFFFFFFF8,
                LODWORD(v52) = 0,
                (v34 & 0x3F) != 0)
            && (sub_1C4FF7E04((uint64_t)&v50, v34 & 0x3F, (uint64_t)&v44), (v45 & 1) != 0)
            && (v26 = v44) != 0)
          {
LABEL_40:
            v25 = 0;
            goto LABEL_26;
          }
        }
        v25 = 1;
      }
    }
    else
    {
      v25 = 0;
      v12 &= ~1u;
      a2[8] = v12;
      *a2 = 1;
    }
LABEL_28:
    if ((v43 & 1) != 0)
    {
      v27 = (uint64_t)v42;
      v42 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    if ((v25 & 1) == 0)
      goto LABEL_61;
  }
  v44 = "Malformed block";
  v46 = 259;
  if (!atomic_load(qword_1EF8F6CB0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
  v37 = qword_1EF8F6CB0[0];
  v38 = operator new();
  *(_QWORD *)v38 = v13 + 16;
  llvm::Twine::str((llvm::Twine *)&v44, (_QWORD *)(v38 + 8));
  *(_QWORD *)(v38 + 32) = 1;
  *(_QWORD *)(v38 + 40) = v37;
  *(_BYTE *)(v38 + 48) = 1;
  a2[8] = v12 | 1;
  *(_QWORD *)a2 = v38;
LABEL_61:
  if (v47 != v10)
    free(v47);
  sub_1C4FF8A28(v9);
  if (__p[0])
  {
    sub_1C4FF80DC((uint64_t *)__p);
    operator delete(__p[0]);
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment(uint64_t a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  llvm::MDNode *v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *OneMDString;
  const char *v26;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _OWORD v33[2];
  __int128 v34;

  if (!a4)
  {
LABEL_30:
    *a5 = 0;
    return;
  }
  v10 = 0;
  while (1)
  {
    v11 = *(_QWORD *)(a1 + 944);
    v12 = *(unsigned int *)(a1 + 960);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(a3 + 8 * v10);
      LODWORD(v14) = (v12 - 1) & (37 * v13);
      v15 = (_DWORD *)(v11 + 8 * v14);
      v16 = *v15;
      if (*v15 == (_DWORD)v13)
        goto LABEL_5;
      v21 = 1;
      while (v16 != -1)
      {
        v22 = v14 + v21++;
        v14 = v22 & (v12 - 1);
        v16 = *(_DWORD *)(v11 + 8 * v14);
        if (v16 == (_DWORD)v13)
        {
          v15 = (_DWORD *)(v11 + 8 * v14);
          goto LABEL_5;
        }
      }
    }
    v15 = (_DWORD *)(v11 + 8 * v12);
LABEL_5:
    if ((_DWORD *)(v11 + 8 * v12) == v15)
      break;
    v17 = *(_QWORD *)(a3 + 8 * (v10 | 1));
    v18 = (uint64_t)(*(_QWORD *)(a1 + 608) - *(_QWORD *)(a1 + 600)) >> 4;
    if (v18 > v17)
    {
      v30 = v15;
      v23 = v10;
      OneMDString = llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString((llvm::MetadataLoader::MetadataLoaderImpl *)a1, v17);
LABEL_22:
      v32 = OneMDString;
      goto LABEL_25;
    }
    v19 = *(_QWORD *)(a3 + 8 * (v10 | 1));
    if (*(_DWORD *)(a1 + 8) > v17)
    {
      v20 = *(llvm::MDNode **)(*(_QWORD *)a1 + 8 * v19);
      if (v20)
        goto LABEL_9;
    }
    v30 = v15;
    v31 = *(_QWORD *)(a3 + 8 * (v10 | 1));
    v23 = v10;
    if (v18 + ((uint64_t)(*(_QWORD *)(a1 + 632) - *(_QWORD *)(a1 + 624)) >> 3) <= v19)
    {
      OneMDString = sub_1C501FA6C(a1, v17);
      goto LABEL_22;
    }
    v34 = 0u;
    memset(v33, 0, sizeof(v33));
    v24 = v17;
    sub_1C501F798(a1, v17, (uint64_t)v33);
    sub_1C5019980(a1, (llvm::MDNode *)v33);
    if (*(_DWORD *)(a1 + 8) <= v24)
      v32 = 0;
    else
      v32 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v31);
    sub_1C5020964((uint64_t)v33);
LABEL_25:
    v15 = v30;
    v20 = (llvm::MDNode *)v32;
    v10 = v23;
    if (!v32)
    {
LABEL_26:
      v26 = "Invalid metadata attachment: expect fwd ref to MDNode";
      goto LABEL_27;
    }
LABEL_9:
    if (*(unsigned __int8 *)v20 - 4 >= 0x1F)
      goto LABEL_26;
    llvm::Value::addMetadata(a2, v15[1], v20);
    v10 += 2;
    if (v10 == a4)
      goto LABEL_30;
  }
  v26 = "Invalid ID";
LABEL_27:
  *(_QWORD *)&v33[0] = v26;
  LOWORD(v34) = 259;
  if (!atomic_load(qword_1EF8F6CB0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
  v28 = qword_1EF8F6CB0[0];
  v29 = operator new();
  *(_QWORD *)v29 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v29 + 8));
  *(_QWORD *)(v29 + 32) = 1;
  *(_QWORD *)(v29 + 40) = v28;
  *(_BYTE *)(v29 + 48) = 1;
  *a5 = v29;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(llvm::MetadataLoader::MetadataLoaderImpl *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  const char *v40;
  char *v41;
  _OWORD v42[3];
  char *v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  uint64_t v47;
  char v48;
  void *v49;
  uint64_t v50;
  _WORD v51[256];
  uint64_t v52;

  LODWORD(v3) = a2;
  v52 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0 && *((_DWORD *)this + 6) >= 2u)
  {
    v49 = "Invalid metadata: fwd refs into function blocks";
    v51[8] = 259;
    if (!atomic_load(qword_1EF8F6CB0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
    v7 = qword_1EF8F6CB0[0];
    v8 = operator new();
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v49, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 1;
    *(_QWORD *)(v8 + 40) = v7;
    *(_BYTE *)(v8 + 48) = 1;
    *a3 = v8;
    return;
  }
  v9 = *((_QWORD *)this + 25);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned int *)(v9 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v9, 0, 15, a3);
  if (*a3)
    return;
  v49 = v51;
  v50 = 0x4000000000;
  memset(v42, 0, sizeof(v42));
  if (!(_DWORD)v3 || !*((_BYTE *)this + 972) || *((_DWORD *)this + 2) || byte_1ED7F4B50)
    goto LABEL_13;
  llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(this, (uint64_t)&v47);
  if ((v48 & 1) != 0)
    goto LABEL_49;
  if (!(_BYTE)v47)
  {
LABEL_13:
    LODWORD(v43) = *((_DWORD *)this + 2);
    while (1)
    {
      v12 = *((_QWORD *)this + 25);
      while (1)
      {
        sub_1C4FF7B90(v12, 0, (uint64_t)&v44);
        if ((v45 & 1) != 0)
          break;
        v13 = v44;
        if ((_DWORD)v44 != 2)
        {
          v3 = HIDWORD(v44);
          *a3 = 0;
          LODWORD(v10) = v13;
          goto LABEL_23;
        }
        sub_1C4FF3F30(v12, &v47);
        v14 = v47;
        if ((v45 & 1) != 0)
        {
          v15 = (const char *)v44;
          v44 = 0;
          if (v15)
            (*(void (**)(const char *))(*(_QWORD *)v15 + 8))(v15);
        }
        if (v14)
        {
          *a3 = v14;
          goto LABEL_39;
        }
      }
      v18 = (const char *)v44;
      *a3 = v44;
      if (v18)
        goto LABEL_39;
LABEL_23:
      if ((_DWORD)v10 == 2)
        break;
      if ((_DWORD)v10 == 1)
      {
        sub_1C5019980((uint64_t)this, (llvm::MDNode *)v42);
        sub_1C502063C((uint64_t)this);
        sub_1C50206D8((uint64_t)this);
        *a3 = 0;
        goto LABEL_39;
      }
      if (!(_DWORD)v10)
        break;
      LODWORD(v50) = 0;
      v44 = 0;
      v45 = 0;
      llvm::BitstreamCursor::readRecord(*((_QWORD *)this + 25), v3, (uint64_t)&v49, (unsigned __int8 **)&v44, (uint64_t)&v47);
      if ((v48 & 1) != 0)
      {
        *a3 = v47;
        goto LABEL_39;
      }
      sub_1C501A270(a3, (uint64_t)this, (int **)&v49, v47, (uint64_t)v42, (const char *)v44, v45, (unsigned int *)&v43);
      v16 = *a3;
      if ((v48 & 1) != 0)
      {
        v17 = v47;
        v47 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      if (v16)
        goto LABEL_39;
    }
    v44 = (unint64_t)"Malformed block";
    v46 = 259;
    if (!atomic_load(qword_1EF8F6CB0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
    v20 = qword_1EF8F6CB0[0];
    v21 = operator new();
    *(_QWORD *)v21 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v44, (_QWORD *)(v21 + 8));
    *(_QWORD *)(v21 + 32) = 1;
    *(_QWORD *)(v21 + 40) = v20;
    *(_BYTE *)(v21 + 48) = 1;
    *a3 = v21;
    goto LABEL_39;
  }
  sub_1C50204F4((uint64_t)this, ((*((_QWORD *)this + 79) - *((_QWORD *)this + 78)) >> 3)+ ((*((_QWORD *)this + 76) - *((_QWORD *)this + 75)) >> 4));
  llvm::MetadataLoader::MetadataLoaderImpl::loadGlobalDeclAttachments(this, &v44);
  sub_1C617509C(&v47, &v44);
  if ((v45 & 1) != 0)
  {
    v22 = (const char *)v44;
    v44 = 0;
    if (v22)
      (*(void (**)(const char *))(*(_QWORD *)v22 + 8))(v22);
  }
  if ((v48 & 1) != 0)
  {
LABEL_49:
    v30 = v47;
    v47 = 0;
    *a3 = v30;
  }
  else
  {
    v23 = 8 * v10 - v11;
    sub_1C5019980((uint64_t)this, (llvm::MDNode *)v42);
    sub_1C502063C((uint64_t)this);
    sub_1C50206D8((uint64_t)this);
    v24 = *((_QWORD *)this + 25);
    v25 = *(unsigned int *)(v24 + 72);
    if ((_DWORD)v25)
    {
      v26 = *(_DWORD *)(v24 + 32);
      v27 = v26 >= 0x20;
      v28 = v26 - 32;
      if (v27)
      {
        *(_QWORD *)(v24 + 24) >>= v28;
        v29 = 32;
      }
      else
      {
        v29 = 0;
      }
      v33 = (void **)(v24 + 40);
      v32 = *(_QWORD *)(v24 + 40);
      *(_DWORD *)(v24 + 32) = v29;
      v34 = *(_QWORD *)(v24 + 64) + 32 * v25;
      *(_DWORD *)(v24 + 36) = *(_DWORD *)(v34 - 32);
      if (v32)
      {
        sub_1C4FF80DC((uint64_t *)(v24 + 40));
        operator delete(*v33);
        *v33 = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
      }
      *(_OWORD *)(v24 + 40) = *(_OWORD *)(v34 - 24);
      *(_QWORD *)(v24 + 56) = *(_QWORD *)(v34 - 8);
      *(_QWORD *)(v34 - 24) = 0;
      *(_QWORD *)(v34 - 16) = 0;
      *(_QWORD *)(v34 - 8) = 0;
      v35 = (*(_DWORD *)(v24 + 72) - 1);
      *(_DWORD *)(v24 + 72) = v35;
      v36 = *(_QWORD *)(v24 + 64) + 32 * v35;
      v38 = *(_QWORD *)(v36 + 8);
      v37 = (uint64_t *)(v36 + 8);
      if (v38)
      {
        sub_1C4FF80DC(v37);
        operator delete((void *)*v37);
      }
    }
    *((_QWORD *)this + 34) = (v23 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *((_DWORD *)this + 72) = 0;
    if ((v23 & 0x3F) == 0 || (sub_1C4FF7E04((uint64_t)this + 256, v23 & 0x3F, (uint64_t)&v44), (v45 & 1) == 0))
    {
      *a3 = 0;
      goto LABEL_61;
    }
    v40 = (const char *)v44;
    *a3 = v44;
    if (!v40)
    {
LABEL_61:
      sub_1C4FF3F30(*((_QWORD *)this + 25), (uint64_t *)&v41);
      v39 = v41;
      if (v41)
      {
        v41 = 0;
        v43 = v39;
        sub_1C4D62BD4(&v43, (char **)&v44);
        if (v43)
          (*(void (**)(char *))(*(_QWORD *)v43 + 8))(v43);
        *a3 = 0;
        if (v41)
          (*(void (**)(char *))(*(_QWORD *)v41 + 8))(v41);
      }
      else
      {
        *a3 = 0;
      }
    }
  }
  if ((v48 & 1) != 0)
  {
    v31 = v47;
    v47 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
LABEL_39:
  sub_1C5020964((uint64_t)v42);
  if (v49 != v51)
    free(v49);
}

uint64_t sub_1C5019980(uint64_t a1, llvm::MDNode *a2)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int *v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  llvm::Metadata *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned __int8 *v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  llvm::MDNode *v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  int v109;
  unsigned int *v110;
  uint64_t v111;
  unsigned int v112;
  _QWORD v113[3];

  v2 = (uint64_t)a2;
  v4 = (_DWORD *)(a1 + 24);
  v110 = 0;
  v111 = 0;
  v112 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)(v2 + 16) != v5)
    {
      v6 = *(_QWORD *)(v2 + 32);
      v7 = (_QWORD *)(v5 + 8 * (v6 >> 8));
      v8 = *v7 + 16 * v6;
      v9 = *(_QWORD *)(v5 + (((*(_QWORD *)(v2 + 40) + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*(_BYTE *)(v2 + 40) + v6);
      while (v8 != v9)
      {
        v10 = *(unsigned int *)(v8 + 4);
        LODWORD(v113[0]) = v10;
        if (*(_DWORD *)(a1 + 8) > v10 && (v11 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v10)) != 0)
        {
          if (*v11 - 4 <= 0x1E && (v11[1] & 0x7F) == 2)
          {
            if (!v112)
              goto LABEL_34;
            v12 = (v112 - 1) & (37 * v10);
            v13 = &v110[v12];
            v14 = *v13;
            if ((_DWORD)v10 != *v13)
            {
              v15 = 0;
              v16 = 1;
              while (v14 != -1)
              {
                if (v15)
                  v17 = 0;
                else
                  v17 = v14 == -2;
                if (v17)
                  v15 = v13;
                v18 = v12 + v16++;
                v12 = v18 & (v112 - 1);
                v13 = &v110[v12];
                v14 = *v13;
                if ((_DWORD)v10 == *v13)
                  goto LABEL_36;
              }
              goto LABEL_31;
            }
          }
        }
        else
        {
          if (!v112)
          {
LABEL_34:
            v24 = 0;
            goto LABEL_35;
          }
          v19 = (v112 - 1) & (37 * v10);
          v13 = &v110[v19];
          v20 = *v13;
          if ((_DWORD)v10 != *v13)
          {
            v15 = 0;
            v21 = 1;
            while (v20 != -1)
            {
              if (v15)
                v22 = 0;
              else
                v22 = v20 == -2;
              if (v22)
                v15 = v13;
              v23 = v19 + v21++;
              v19 = v23 & (v112 - 1);
              v13 = &v110[v19];
              v20 = *v13;
              if ((_DWORD)v10 == *v13)
                goto LABEL_36;
            }
LABEL_31:
            if (v15)
              v24 = v15;
            else
              v24 = v13;
LABEL_35:
            v25 = sub_1C4A0C948((uint64_t)&v110, (uint64_t)v113, v113, v24);
            *v25 = v113[0];
          }
        }
LABEL_36:
        v8 += 16;
        if (v8 - *v7 == 4096)
        {
          v26 = v7[1];
          ++v7;
          v8 = v26;
        }
      }
    }
    if (!(_DWORD)v111)
      break;
    v27 = v110;
    v28 = v112;
    v29 = &v110[v112];
    if (v112)
    {
      v30 = 0;
      while (v110[v30] >= 0xFFFFFFFE)
      {
        if (v112 == ++v30)
        {
          v31 = &v110[v112];
          goto LABEL_48;
        }
      }
      v31 = &v110[v30];
    }
    else
    {
      v28 = 0;
      v31 = v110;
    }
LABEL_48:
    v32 = &v27[v28];
LABEL_49:
    while (v31 != v32)
    {
      v34 = *v31;
      v33 = v31 + 1;
      sub_1C501F798(a1, v34, v2);
      while (v33 != v29)
      {
        v35 = *v33++;
        if (v35 <= 0xFFFFFFFD)
        {
          v31 = v33 - 1;
          goto LABEL_49;
        }
      }
      v31 = v29;
    }
    sub_1C4A0CC74(&v110);
    if (*v4 >= 2u)
    {
      do
      {
        v36 = sub_1C61D19C0(v4);
        sub_1C501F798(a1, *v36, v2);
      }
      while (*(_DWORD *)(a1 + 24) > 1u);
    }
  }
  if (*v4 >= 2u)
  {
    v27 = v110;
    v28 = v112;
    v31 = &v110[v112];
    v29 = v31;
    goto LABEL_48;
  }
  v37 = *(_DWORD *)(a1 + 120);
  if (v37 <= 1)
  {
    if (v37)
    {
      v38 = a1 + 128;
      v39 = 1;
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 128);
      v39 = *(unsigned int *)(a1 + 136);
    }
    v40 = (uint64_t *)(v38 + 16 * v39);
    v41 = *(_DWORD *)(a1 + 120);
    v42 = v40;
    goto LABEL_62;
  }
  if ((v37 & 1) != 0)
  {
    v43 = (uint64_t *)(a1 + 128);
    v42 = (uint64_t *)(a1 + 144);
LABEL_172:
    v41 = *(_DWORD *)(a1 + 120) & 1;
    v40 = v43;
    while ((*v40 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v40 += 2;
      if (v40 == v42)
      {
        v40 = v42;
        break;
      }
    }
LABEL_62:
    if (!v41)
    {
      v43 = *(uint64_t **)(a1 + 128);
      LODWORD(v44) = *(_DWORD *)(a1 + 136);
      goto LABEL_65;
    }
    v43 = (uint64_t *)(a1 + 128);
    v44 = 1;
  }
  else
  {
    v43 = *(uint64_t **)(a1 + 128);
    v44 = *(unsigned int *)(a1 + 136);
    if ((_DWORD)v44)
    {
      v42 = &v43[2 * v44];
      goto LABEL_172;
    }
    v42 = *(uint64_t **)(a1 + 128);
    v40 = v42;
LABEL_65:
    v44 = v44;
  }
  v45 = &v43[2 * v44];
  if (v40 != v45)
  {
    do
    {
      sub_1C61D1A34((uint64_t)v113, a1 + 96, v40, v40 + 1);
      v46 = v40 + 2;
      v40 = v42;
      if (v46 != v42)
      {
        v40 = v46;
        while ((*v40 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v40 += 2;
          if (v40 == v42)
          {
            v40 = v42;
            break;
          }
        }
      }
    }
    while (v40 != v45);
    v37 = *(_DWORD *)(a1 + 120);
  }
  if (v37 > 1 || *(_DWORD *)(a1 + 124))
  {
    if ((v37 & 1) != 0)
    {
      v98 = (_QWORD *)(a1 + 128);
      v99 = (_QWORD *)(a1 + 144);
    }
    else
    {
      v92 = *(unsigned int *)(a1 + 136);
      if (((2 * v37) & 0xFFFFFFFC) < v92 && v92 >= 0x41)
      {
        if (v37 >= 2)
        {
          v102 = (v37 >> 1) - 1;
          v103 = 1 << (33 - __clz(v102));
          if (v102 >= 0x10)
            v104 = v103;
          else
            v104 = 64;
          if ((_DWORD)v104 == (_DWORD)v92)
          {
            *(_QWORD *)(a1 + 120) = 0;
            v105 = 16 * v92;
            v106 = *(_QWORD **)(a1 + 128);
            do
            {
              *v106 = -4096;
              v106 += 2;
              v105 -= 16;
            }
            while (v105);
            goto LABEL_76;
          }
          MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 128), 8);
          if (v104 > 1)
          {
            *(_DWORD *)(a1 + 120) &= ~1u;
            v107 = operator new(16 * v104, (std::align_val_t)8uLL);
            *(_QWORD *)(a1 + 128) = v107;
            *(_QWORD *)(a1 + 136) = v104;
            v109 = *(_DWORD *)(a1 + 120);
            *(_QWORD *)(a1 + 120) = v109 & 1;
            if ((v109 & 1) == 0)
            {
              v108 = &v107[2 * v104];
              do
              {
LABEL_194:
                *v107 = -4096;
                v107 += 2;
              }
              while (v107 != v108);
              goto LABEL_76;
            }
LABEL_193:
            v107 = (_QWORD *)(a1 + 128);
            v108 = (_QWORD *)(a1 + 144);
            goto LABEL_194;
          }
        }
        else
        {
          MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 128), 8);
        }
        *(_QWORD *)(a1 + 120) = 1;
        goto LABEL_193;
      }
      if (!(_DWORD)v92)
      {
        v101 = 0;
LABEL_170:
        *(_DWORD *)(a1 + 120) = v101;
        *(_DWORD *)(a1 + 124) = 0;
        goto LABEL_76;
      }
      v98 = *(_QWORD **)(a1 + 128);
      v99 = &v98[2 * v92];
    }
    do
    {
      *v98 = -4096;
      v98 += 2;
    }
    while (v98 != v99);
    v101 = *(_DWORD *)(a1 + 120) & 1;
    goto LABEL_170;
  }
LABEL_76:
  v47 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v47)
  {
    v48 = 16 * v47;
    v49 = (uint64_t *)(*(_QWORD *)(a1 + 144) + 8);
    do
    {
      v50 = *v49;
      v51 = (llvm::Metadata *)sub_1C5020BB8(a1, *(v49 - 1));
      v52 = *(_QWORD *)(v50 + 16);
      if ((v52 & 4) != 0)
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v52 & 0xFFFFFFFFFFFFFFF8), v51);
      v49 += 2;
      v48 -= 16;
    }
    while (v48);
    v53 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v53)
    {
      v54 = 16 * v53;
      v55 = *(_QWORD *)(a1 + 144) - 16;
      do
      {
        sub_1C61D1F24(v55 + v54, a2);
        v54 -= 16;
      }
      while (v54);
    }
  }
  *(_DWORD *)(a1 + 152) = 0;
  v56 = *(_DWORD *)(a1 + 72);
  if (v56 <= 1)
  {
    if (v56)
    {
      v57 = a1 + 80;
      v58 = 1;
    }
    else
    {
      v57 = *(_QWORD *)(a1 + 80);
      v58 = *(unsigned int *)(a1 + 88);
    }
    v59 = (uint64_t *)(v57 + 16 * v58);
    v60 = *(_DWORD *)(a1 + 72);
    v61 = v59;
    goto LABEL_88;
  }
  if ((v56 & 1) != 0)
  {
    v64 = (uint64_t *)(a1 + 80);
    v61 = (uint64_t *)(a1 + 96);
LABEL_177:
    v60 = *(_DWORD *)(a1 + 72) & 1;
    v59 = v64;
    while ((*v59 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v59 += 2;
      if (v59 == v61)
      {
        v59 = v61;
        break;
      }
    }
LABEL_88:
    if (v60)
    {
      v62 = (uint64_t *)(a1 + 80);
      v63 = 1;
    }
    else
    {
      v62 = *(uint64_t **)(a1 + 80);
      v63 = *(unsigned int *)(a1 + 88);
    }
    v64 = v61;
  }
  else
  {
    v64 = *(uint64_t **)(a1 + 80);
    v97 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v97)
    {
      v61 = &v64[2 * v97];
      goto LABEL_177;
    }
    v63 = 0;
    v59 = *(uint64_t **)(a1 + 80);
    v62 = v59;
  }
  v65 = (unsigned int *)(a1 + 72);
  v66 = &v62[2 * v63];
  if (v59 != v66)
  {
    while (2)
    {
      v67 = *v59;
      v113[0] = 0;
      if ((sub_1C61D1AFC(a1 + 96, v67, v113) & 1) != 0 && (a2 = *(llvm::MDNode **)(v113[0] + 8)) != 0)
      {
        v68 = *(_QWORD *)(v59[1] + 16);
        if ((v68 & 4) == 0)
        {
LABEL_100:
          v69 = v59 + 2;
          v59 = v64;
          if (v69 != v64)
          {
            v59 = v69;
            while ((*v59 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v59 += 2;
              if (v59 == v64)
              {
                v59 = v64;
                break;
              }
            }
          }
          if (v59 == v66)
          {
            v56 = *v65;
            goto LABEL_107;
          }
          continue;
        }
      }
      else
      {
        v68 = *(_QWORD *)(v59[1] + 16);
        if ((v68 & 4) == 0)
          goto LABEL_100;
        a2 = (llvm::MDNode *)*v59;
      }
      break;
    }
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v68 & 0xFFFFFFFFFFFFFFF8), a2);
    goto LABEL_100;
  }
LABEL_107:
  if (v56 > 1 || *(_DWORD *)(a1 + 76))
  {
    if ((v56 & 1) == 0)
    {
      v93 = (2 * v56) & 0xFFFFFFFC;
      v94 = *(unsigned int *)(a1 + 88);
      if (v93 < v94 && v94 >= 0x41)
      {
        sub_1C61D1F64(a1 + 72, a2);
      }
      else
      {
        if ((_DWORD)v94)
        {
          v95 = *(_QWORD **)(a1 + 80);
          v96 = &v95[2 * v94];
          goto LABEL_158;
        }
LABEL_165:
        *(_DWORD *)(a1 + 72) = v94;
        *(_DWORD *)(a1 + 76) = 0;
      }
      goto LABEL_109;
    }
    v95 = (_QWORD *)(a1 + 80);
    v96 = (_QWORD *)(a1 + 96);
    while (1)
    {
LABEL_158:
      if (*v95 == -8192)
        goto LABEL_162;
      if (*v95 != -4096)
        break;
LABEL_163:
      v95 += 2;
      if (v95 == v96)
      {
        LODWORD(v94) = *v65 & 1;
        goto LABEL_165;
      }
    }
    v100 = (llvm::MDNode *)v95[1];
    v95[1] = 0;
    if (v100)
      llvm::MDNode::deleteTemporary(v100, a2);
LABEL_162:
    *v95 = -4096;
    goto LABEL_163;
  }
LABEL_109:
  v70 = *(_DWORD *)(a1 + 48);
  if (v70 >= 2)
  {
    v82 = sub_1C61D19C0((_DWORD *)(a1 + 48));
    v83 = v82;
    v85 = v84;
    if ((v70 & 1) != 0)
    {
      v86 = a1 + 56;
      v87 = 1;
    }
    else
    {
      v86 = *(_QWORD *)(a1 + 56);
      v87 = *(unsigned int *)(a1 + 64);
    }
    v88 = (unsigned int *)(v86 + 4 * v87);
    if (v88 != v82)
    {
      do
      {
        v89 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * *v83);
        if (v89 && *v89 - 4 <= 0x1E)
          llvm::MDNode::resolveCycles(v89);
        v90 = v83 + 1;
        while (v90 != v85)
        {
          v91 = *v90++;
          if (v91 <= 0xFFFFFFFD)
          {
            v83 = v90 - 1;
            goto LABEL_136;
          }
        }
        v83 = v85;
LABEL_136:
        ;
      }
      while (v83 != v88);
    }
    sub_1C61D2030((_DWORD *)(a1 + 48));
  }
  if (*(_QWORD *)(v2 + 40))
  {
    v71 = *(_QWORD *)(v2 + 32);
    do
    {
      v72 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + ((v71 >> 5) & 0x7FFFFFFFFFFFFF8));
      v73 = *(unsigned int *)(v72 + 16 * v71 + 4);
      if (*(_DWORD *)(a1 + 8) <= v73)
        v74 = 0;
      else
        v74 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v73);
      v75 = v72 + 16 * v71;
      v76 = (uint64_t *)(v75 + 8);
      v77 = *(_QWORD **)(v75 + 8);
      if (v77)
      {
        *v77 = v74;
        v78 = *(unsigned __int8 **)*v76;
        if (v78)
          llvm::MetadataTracking::track(*v76, v78, 2);
        v113[0] = v75;
        llvm::MetadataTracking::untrack((uint64_t)v113, (unsigned __int8 *)v75);
        v71 = *(_QWORD *)(v2 + 32);
        v79 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + ((v71 >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * v71
                         + 8);
        if (v79)
          *v79 = 0;
      }
      v80 = *(_QWORD *)(v2 + 40) - 1;
      *(_QWORD *)(v2 + 32) = ++v71;
      *(_QWORD *)(v2 + 40) = v80;
      if (v71 >= 0x200)
      {
        operator delete(**(void ***)(v2 + 8));
        *(_QWORD *)(v2 + 8) += 8;
        v80 = *(_QWORD *)(v2 + 40);
        v71 = *(_QWORD *)(v2 + 32) - 256;
        *(_QWORD *)(v2 + 32) = v71;
      }
    }
    while (v80);
  }
  return MEMORY[0x1CAA32FB4](v110, 4);
}

void sub_1C501A270(uint64_t *a1, uint64_t a2, int **a3, int a4, uint64_t a5, const char *a6, unint64_t a7, unsigned int *a8)
{
  uint64_t v8;
  uint64_t *v9;
  unsigned int *v10;
  int **v11;
  char v13;
  unint64_t v14;
  size_t v15;
  __int128 *v16;
  BOOL v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t *v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t *v31;
  int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t *v36;
  unint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t *v42;
  int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  int v65;
  unsigned __int8 *v66;
  uint64_t *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  unsigned __int8 *v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  int v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  int v92;
  unsigned __int8 *v93;
  uint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  const void *v106;
  _QWORD *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t *v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  unsigned __int8 *v117;
  int v118;
  uint64_t *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned __int8 *v123;
  int v124;
  unsigned __int8 *v125;
  int v126;
  int i;
  uint64_t v128;
  unsigned __int8 *v129;
  int v130;
  void *v131;
  uint64_t v132;
  llvm::Type **ValueFwdRef;
  llvm::Value *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  unsigned __int8 v142;
  uint64_t *v143;
  unint64_t v144;
  unsigned int v145;
  int v146;
  unsigned __int8 *v147;
  uint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  unsigned __int8 **v151;
  uint64_t *v152;
  uint64_t v153;
  _QWORD *v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  unsigned __int8 *v158;
  unint64_t v159;
  int *v160;
  uint64_t v161;
  unsigned __int8 *v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t *v165;
  _QWORD *v166;
  int v167;
  unsigned __int8 *v168;
  unsigned int v169;
  uint64_t *v170;
  unsigned int v171;
  int v173;
  unsigned __int8 *v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t Impl;
  uint64_t v180;
  uint64_t *v181;
  int v182;
  int v183;
  unsigned __int8 *v184;
  uint64_t *v185;
  int v186;
  void *v187;
  _QWORD *v188;
  int v189;
  unsigned __int8 *v190;
  unsigned int v191;
  uint64_t *v192;
  unint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  _QWORD *v196;
  int v197;
  unsigned __int8 *v198;
  uint64_t *v199;
  uint64_t v200;
  _QWORD *v201;
  int v202;
  unsigned __int8 *v203;
  uint64_t v204;
  uint64_t *v205;
  unint64_t v206;
  uint64_t *v207;
  int v208;
  unint64_t v209;
  uint64_t *v210;
  _QWORD *v211;
  int v212;
  unsigned __int8 *v213;
  int v214;
  uint64_t *v215;
  unsigned __int8 *v216;
  void *v217;
  const char *v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  int v222;
  int v224;
  size_t v225;
  size_t v226;
  unsigned __int8 *v227;
  unsigned __int8 *v228;
  _QWORD *v229;
  int v230;
  unsigned __int8 *v231;
  char v232;
  int v233;
  unsigned __int8 *v234;
  int v235;
  unsigned __int8 *v236;
  int v237;
  unsigned __int8 *v238;
  unint64_t v239;
  _QWORD *v240;
  int v241;
  unsigned __int8 *v242;
  uint64_t v243;
  _BYTE *v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t inserted;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unsigned __int8 *v253;
  unsigned __int8 *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned __int8 **v257;
  char v258;
  int v259;
  int v260;
  int v261;
  uint64_t v262;
  _BOOL4 v263;
  int v264;
  int v265;
  _BOOL4 v266;
  _BOOL4 v267;
  int v268;
  _QWORD *v269;
  int v270;
  int v271;
  unsigned __int8 *v272;
  size_t v273;
  unsigned __int8 **v274;
  int v275;
  unsigned __int8 *v276;
  uint64_t v277;
  int v278;
  unsigned __int8 *v279;
  llvm::Type **v280;
  llvm::Value *v281;
  uint64_t v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  unsigned __int8 *v285;
  unsigned __int8 *v286;
  unsigned __int8 *v287;
  int v288;
  unsigned __int8 *v289;
  unsigned __int8 *v290;
  int v291;
  int v292;
  unsigned __int8 *v293;
  int v294;
  int v295;
  unsigned __int8 *v296;
  llvm::MDNode *v297;
  int *v298;
  llvm::MDNode *v299;
  int v300;
  unsigned __int8 *v301;
  int v302;
  unsigned __int8 *v303;
  int v304;
  unsigned __int8 *v305;
  int v306;
  unsigned __int8 *v307;
  int v308;
  unsigned __int8 *v309;
  int v310;
  unsigned __int8 *v311;
  int v312;
  int v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int v319;
  unsigned __int8 *v320;
  int v321;
  unsigned __int8 *v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  unsigned __int8 *v329;
  unsigned int v330;
  uint64_t v331;
  int *v332;
  int v333;
  int v334;
  uint64_t v335;
  unsigned __int8 *v336;
  unsigned __int8 *v337;
  int v338;
  uint64_t v339;
  unsigned __int8 *v340;
  int v341;
  uint64_t v342;
  unsigned __int8 *v343;
  uint64_t *v344;
  uint64_t v345;
  unint64_t v347;
  uint64_t v348;
  _BYTE *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned __int8 *v354;
  int v355;
  unsigned __int8 *v356;
  int v357;
  unsigned __int8 *v358;
  int v359;
  unsigned __int8 *v360;
  unint64_t v362;
  uint64_t v363;
  void *v364;
  _QWORD *v365;
  int v366;
  _QWORD *v367;
  int v368;
  unsigned __int8 *v369;
  unsigned __int8 *v370;
  int v371;
  unsigned __int8 *v372;
  unsigned __int8 *v373;
  int v374;
  int v375;
  unsigned __int8 *v376;
  uint64_t v377;
  uint64_t v378;
  unsigned __int8 *v379;
  uint64_t v380;
  unsigned __int8 *v381;
  uint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  int v385;
  int v386;
  unsigned __int8 *v387;
  _QWORD *v388;
  int v389;
  int v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  uint64_t *v396;
  int v397;
  unint64_t v399;
  uint64_t v400;
  int v401;
  unsigned __int8 *v402;
  llvm::MDNode *v403;
  int *v404;
  int v405;
  BOOL v406;
  int v407;
  unsigned __int8 *v408;
  int v409;
  unsigned __int8 *v410;
  llvm::MDNode *v411;
  int *v412;
  int v413;
  unsigned __int8 *v414;
  int v415;
  int v416;
  unsigned __int8 *v417;
  llvm::MDNode *v418;
  int v419;
  char v420;
  _QWORD *v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  int v425;
  unsigned __int8 *v426;
  int v427;
  unsigned __int8 *v428;
  uint64_t v429;
  unsigned __int8 *v430;
  int v431;
  unsigned int v432;
  _QWORD *v433;
  uint64_t v434;
  int v435;
  _QWORD *v436;
  unsigned int v437;
  unsigned int v438;
  unint64_t v439;
  int v440;
  uint64_t v441;
  unsigned __int8 *v442;
  uint64_t v443;
  unsigned __int8 *v444;
  uint64_t v445;
  unsigned __int8 *v446;
  unsigned int v447;
  int v448;
  char v449;
  int v450;
  int v451;
  int v452;
  unsigned __int8 *v453;
  llvm::MDNode *v454;
  int v455;
  int v456;
  unsigned __int8 *v457;
  llvm::MDNode *v458;
  int *v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  unint64_t v463;
  int v464;
  unsigned __int8 *v465;
  int v466;
  unsigned __int8 *v467;
  _QWORD *v468;
  unsigned int v469;
  unsigned int v470;
  unint64_t v471;
  int v472;
  _QWORD *v473;
  uint64_t v474;
  int v475;
  int v476;
  unsigned __int8 *v477;
  int v478;
  _QWORD *v479;
  uint64_t v480;
  int v481;
  int v482;
  unsigned __int8 *v483;
  int v484;
  int v485;
  unsigned __int8 *v486;
  int v487;
  unsigned __int8 *v488;
  int v489;
  int v490;
  unsigned __int8 *v491;
  llvm::MDNode *v492;
  int v493;
  unsigned __int8 *v494;
  unsigned __int8 *v495;
  int v496;
  int v497;
  unsigned __int8 *v498;
  unsigned __int8 *v499;
  void *v500;
  _QWORD *v501;
  int v502;
  int v503;
  unsigned __int8 *v504;
  unsigned __int8 *v505;
  int v506;
  unsigned __int8 *v507;
  int v508;
  unsigned __int8 *v509;
  uint64_t v510;
  unsigned int v511;
  _QWORD *v512;
  _BYTE *v513;
  size_t v514;
  size_t v515;
  _BYTE *v516;
  BOOL v517;
  uint64_t v518;
  int v519;
  unsigned __int8 *v520;
  uint64_t v521;
  _QWORD *v522;
  unsigned int j;
  uint64_t v524;
  unsigned __int8 *v525;
  unsigned __int8 *v526;
  char v527;
  char v528;
  unsigned __int8 *v529;
  char v530;
  int v531;
  unsigned __int8 *v532;
  int v533;
  unsigned __int8 *v534;
  int v535;
  unsigned __int8 *v536;
  int v537;
  int v538;
  _QWORD *v539;
  uint64_t v540;
  uint64_t v541;
  int v542;
  _QWORD *v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  unsigned __int8 *v548;
  int v549;
  uint64_t v550;
  int v551;
  int v552;
  unsigned __int8 *v553;
  uint64_t v554;
  uint64_t v555;
  int v556;
  unsigned __int8 *v557;
  llvm::MDNode *v558;
  int v559;
  int v560;
  unsigned __int8 *v561;
  int v562;
  unsigned __int8 *v563;
  int v564;
  unsigned __int8 *v565;
  llvm::MDNode *v566;
  int *v567;
  int v568;
  BOOL v569;
  int v570;
  int v571;
  unsigned __int8 *v572;
  llvm::MDNode *v573;
  int *v574;
  int v575;
  unsigned __int8 *v576;
  int v577;
  int v578;
  unsigned __int8 *v579;
  int v580;
  llvm::MDNode *v581;
  int v582;
  int v583;
  uint64_t v584;
  unsigned __int8 *v585;
  uint64_t v586;
  unsigned __int8 *v587;
  uint64_t v588;
  unsigned __int8 *v589;
  uint64_t v590;
  unsigned __int8 *v591;
  unsigned int v592;
  int v593;
  char v594;
  int v595;
  int v596;
  unsigned __int8 *v597;
  int v598;
  unsigned __int8 *v599;
  llvm::MDNode *v600;
  int *v601;
  uint64_t v602;
  int v603;
  uint64_t v604;
  unint64_t v605;
  int v606;
  unsigned __int8 *v607;
  int v608;
  llvm::MDNode *v609;
  int *v610;
  int v611;
  unsigned __int8 *v612;
  int v613;
  unsigned __int8 *v614;
  int v615;
  unsigned __int8 *v616;
  unsigned int v617;
  int v618;
  unsigned __int8 *v619;
  uint64_t v620;
  int v621;
  int v622;
  unsigned __int8 *v623;
  int v624;
  int v625;
  unsigned __int8 *v626;
  int v627;
  unsigned __int8 *v628;
  int v629;
  int v630;
  unsigned __int8 *v631;
  llvm::MDNode *v632;
  uint64_t v633;
  _QWORD *v634;
  int v635;
  uint64_t v636;
  uint64_t v637;
  char v638;
  int v639;
  _QWORD *v640;
  int v641;
  unsigned __int8 *v642;
  int v643;
  unsigned __int8 *v644;
  uint64_t v645;
  unsigned __int8 *v646;
  uint64_t v647;
  int v648;
  unsigned __int8 *v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  unsigned __int8 *v653;
  llvm::MDNode *v654;
  int v655;
  unsigned __int8 *v656;
  unsigned __int8 *v657;
  size_t v658;
  int v659;
  unsigned __int8 *v660;
  unsigned __int8 *v661;
  unint64_t v662;
  uint64_t v663;
  int v664;
  unsigned __int8 *v665;
  int v666;
  unsigned __int8 *v667;
  unsigned __int8 *v668;
  unsigned __int8 **v669;
  unint64_t v670;
  _QWORD *v671;
  char *v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t v675;
  unint64_t v676;
  char *v677;
  unsigned __int8 **v678;
  int v679;
  unsigned __int8 *v680;
  int v681;
  unsigned __int8 *v682;
  int v683;
  unsigned __int8 *v684;
  uint64_t v685;
  unsigned __int8 *v686;
  uint64_t v687;
  unsigned __int8 *v688;
  uint64_t v689;
  uint64_t v690;
  int v691;
  uint64_t v692;
  uint64_t v693;
  llvm::Type *v694;
  int v695;
  unsigned __int8 *v696;
  int *v697;
  int v698;
  int v699;
  int v700;
  int v701;
  uint64_t v702;
  unsigned __int8 *v703;
  llvm::MDNode *v704;
  int *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  unsigned __int8 *v709;
  uint64_t v710;
  unsigned __int8 *v711;
  uint64_t v712;
  uint64_t v713;
  unsigned __int8 *v714;
  uint64_t v715;
  uint64_t v716;
  unsigned __int8 *v717;
  _BOOL4 v718;
  unsigned __int8 *v719;
  int v720;
  int v721;
  int v722;
  unsigned __int8 *v723;
  int v724;
  int v725;
  unsigned __int8 *v726;
  llvm::MDNode *v727;
  int *v728;
  uint64_t v729;
  uint64_t v730;
  int v731;
  unsigned __int8 *v732;
  int v733;
  unsigned __int8 *v734;
  int v735;
  int v736;
  uint64_t v737;
  int v738;
  int v739;
  int v740;
  int v741;
  unsigned __int8 *v742;
  int v743;
  int v744;
  int v745;
  unsigned __int8 *v746;
  int v747;
  unsigned __int8 *v748;
  llvm::MDNode *v749;
  int *v750;
  uint64_t v751;
  uint64_t v752;
  int v753;
  unsigned __int8 *v754;
  int *v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  char v759;
  char v760;
  uint64_t v761;
  int *v762;
  int v763;
  int v764;
  int v765;
  int v766;
  uint64_t v767;
  unsigned __int8 *v768;
  llvm::MDNode *v769;
  int *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  unsigned __int8 *v774;
  uint64_t v775;
  unsigned __int8 *v776;
  uint64_t v777;
  uint64_t v778;
  unsigned __int8 *v779;
  uint64_t v780;
  uint64_t v781;
  unsigned __int8 *v782;
  llvm::MDNode *v783;
  _BOOL4 v784;
  uint64_t v785;
  int v786;
  int v787;
  int v788;
  unsigned __int8 *v789;
  int v790;
  int v791;
  unsigned __int8 *v792;
  llvm::MDNode *v793;
  int *v794;
  uint64_t v795;
  uint64_t v796;
  int v797;
  unsigned __int8 *v798;
  int v799;
  unsigned __int8 *v800;
  unsigned __int8 *v801;
  unsigned int v802;
  uint64_t v803;
  int *v804;
  int v805;
  unsigned int v806;
  int v807;
  unsigned __int8 *v808;
  unsigned __int8 *v809;
  uint64_t v810;
  unsigned __int8 *v811;
  uint64_t v812;
  uint64_t v813;
  unsigned int v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  int v818;
  uint64_t v819;
  uint64_t v820;
  int v821;
  uint64_t v822;
  int v823;
  uint64_t v824;
  _QWORD *v825;
  _QWORD *v826;
  int v827;
  int v828;
  unsigned int v829;
  int v830;
  unsigned __int8 *v831;
  unsigned __int8 *v832;
  int *v833;
  int v834;
  int v835;
  int v836;
  unsigned __int8 *v837;
  int v838;
  unsigned __int8 *v839;
  int v840;
  int v841;
  unsigned __int8 *v842;
  llvm::MDNode *v843;
  int *v844;
  uint64_t v845;
  uint64_t v846;
  int v847;
  unsigned __int8 *v848;
  llvm::MDNode *v849;
  int v850;
  int v851;
  unsigned __int8 *v852;
  int v853;
  unsigned __int8 *v854;
  int v855;
  int v856;
  unsigned __int8 *v857;
  llvm::MDNode *v858;
  int *v859;
  uint64_t v860;
  uint64_t v861;
  int v862;
  unsigned __int8 *v863;
  uint64_t v864;
  _QWORD *v865;
  llvm::MDNode *v866;
  llvm::MDNode *v867;
  int v868;
  int v869;
  llvm::MDNode *v870;
  llvm::MDNode *v871;
  uint64_t v872;
  uint64_t v873;
  __int128 v874;
  __int128 v875;
  llvm::MDNode *v876;
  llvm::MDNode *v877;
  _BYTE v878[5];
  uint64_t v879;
  unsigned __int8 *v880;
  unsigned __int8 *v881;
  unsigned __int8 *v882;
  unsigned __int8 *v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  unsigned __int8 *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  unsigned int v891;
  unsigned __int8 *v892;
  uint64_t v893;
  uint64_t v894;
  BOOL v895;
  unsigned __int8 *v896;
  uint64_t v897;
  uint64_t v898;
  unsigned __int8 *v899;
  uint64_t v900;
  int v901;
  unsigned __int8 *v902;
  unsigned __int8 *v903;
  unsigned __int8 *v904;
  uint64_t v905;
  uint64_t v906;
  unsigned int *v907;
  uint64_t v908;
  uint64_t v909;
  llvm::MDNode *v910;
  int v911;
  int v912;
  unsigned __int8 *v913;
  uint64_t *v914;
  unsigned __int8 *v915;
  int v916;
  uint64_t v917;
  int v918;
  unsigned __int8 *v919;
  unsigned __int8 *v920;
  unsigned __int8 *v921;
  unsigned __int8 *v922;
  unint64_t v923;
  unsigned __int8 *v924;
  unsigned __int8 *v925;
  unsigned __int8 *v926;
  int v927;
  unsigned __int8 *v928;
  unsigned __int8 *v929;
  unsigned __int8 *v930;
  unsigned __int8 *v931;
  unsigned __int8 *v932;
  uint64_t v933;
  int v934;
  uint64_t *v935;
  llvm::MDNode *v936;
  llvm::MDNode *v937;
  _BOOL4 v938;
  unsigned __int8 *v939;
  int v940;
  llvm::MDNode *v941;
  uint64_t v942;
  unint64_t v943;
  uint64_t v944;
  unsigned __int8 *v945;
  _QWORD *v946;
  unsigned __int8 *v947;
  unsigned __int8 *v948;
  uint64_t v949;
  unsigned __int8 *v950;
  unsigned __int8 *v951;
  int v952;
  _BOOL4 v953;
  int v954;
  uint64_t v955;
  unsigned __int8 *v956;
  unsigned __int8 *v957;
  uint64_t v958;
  unsigned __int8 *v959;
  unsigned __int8 *v960;
  unsigned __int8 *v961;
  unsigned int v962;
  int v963;
  uint64_t v964;
  unsigned __int8 *v965;
  unsigned __int8 *v966;
  llvm::MDNode *v967;
  unsigned __int8 *v968;
  unsigned __int8 *v969;
  uint64_t v970;
  _QWORD *v971;
  _QWORD *v972;
  unsigned int v973;
  unsigned __int8 *v974;
  _BOOL4 v975;
  unsigned __int8 *v976;
  unsigned __int8 *v977;
  uint64_t v978;
  _QWORD *v979;
  int v980;
  unsigned __int8 *v981;
  unsigned __int8 *v982;
  unsigned __int8 *v983;
  _QWORD *v984;
  unsigned __int8 *v985;
  int v986;
  unsigned __int8 *v987;
  unsigned int v988;
  uint64_t v989;
  unsigned __int8 *v990;
  int v991;
  unsigned __int8 *v992;
  unsigned int v993;
  llvm::Value *v994;
  void *v995;
  unsigned int v996;
  void *v997;
  unsigned int v998;
  _QWORD v999[4];
  unsigned __int8 v1000;
  uint64_t v1001;
  __int128 v1002;
  _QWORD v1003[2];
  __int16 v1004;
  unsigned __int8 **v1005;
  char v1006;
  unsigned __int8 **v1007;
  __int128 v1008;
  uint64_t v1009;
  __int16 v1010;
  uint64_t v1011;

  v9 = a1;
  v1011 = *MEMORY[0x1E0C80C00];
  v1000 = 0;
  v999[0] = a2;
  v999[1] = &v1000;
  v999[2] = a8;
  v999[3] = a5;
  v10 = a8;
  v11 = a3;
  switch(a4)
  {
    case 1:
      sub_1C502188C(&v1002, (uint64_t *)*a3, (uint64_t *)&(*a3)[2 * *((unsigned int *)a3 + 2)], *((unsigned int *)a3 + 2));
      v13 = HIBYTE(v1003[0]);
      v14 = HIBYTE(v1003[0]) & 0x70;
      v15 = *((_QWORD *)&v1002 + 1);
      if (v1003[0] >= 0)
      {
        v16 = &v1002;
      }
      else
      {
        v14 = *((_QWORD *)&v1002 + 1);
        v16 = (__int128 *)v1002;
      }
      v17 = v14 >= 0x10 && *(_QWORD *)v16 == 0x6365762E6D766C6CLL && *((_QWORD *)v16 + 1) == 0x2E72657A69726F74;
      v224 = SHIBYTE(v1003[0]);
      *(_BYTE *)(a2 + 969) |= v17;
      v225 = v13 & 0x7F;
      if (v224 >= 0)
        v226 = v225;
      else
        v226 = v15;
      v227 = (unsigned __int8 *)llvm::MDString::get(*(uint64_t **)(a2 + 208), (unsigned __int8 *)v16, v226);
      sub_1C501EF04(a2, v227, *v10);
      ++*v10;
      if (SHIBYTE(v1003[0]) < 0)
        operator delete((void *)v1002);
      goto LABEL_1168;
    case 2:
      if (*((_DWORD *)a3 + 2) != 2)
        goto LABEL_299;
      v115 = **a3;
      LODWORD(v1002) = v115;
      v116 = *(_QWORD *)(a2 + 248);
      if (!v116)
        goto LABEL_1270;
      v117 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v116 + 48))(v116, &v1002);
      v118 = v117[8];
      if (v118 != 9 && v118 != 7)
        goto LABEL_326;
      goto LABEL_299;
    case 3:
      goto LABEL_148;
    case 4:
      v148 = (uint64_t *)*a3;
      v149 = *((unsigned int *)a3 + 2);
      v1007 = (unsigned __int8 **)&v1009;
      v1008 = xmmword_1C6464ED0;
      if (v149 < 9)
      {
        v150 = 0;
        v243 = 0;
        v151 = (unsigned __int8 **)&v1009;
        if (!(_DWORD)v149)
          goto LABEL_264;
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v1007, &v1009, v149, 1);
        v151 = v1007;
        v150 = v1008;
      }
      v244 = (char *)v151 + v150;
      v245 = 8 * v149;
      do
      {
        v246 = *v148++;
        *v244++ = v246;
        v245 -= 8;
      }
      while (v245);
      v243 = v1008;
LABEL_264:
      *(_QWORD *)&v1008 = v243 + v149;
      *((_DWORD *)v11 + 2) = 0;
      sub_1C4FF7E04(*(_QWORD *)(a2 + 200), *(_DWORD *)(*(_QWORD *)(a2 + 200) + 36), (uint64_t)&v1002);
      if ((BYTE8(v1002) & 1) != 0)
      {
        v872 = v1002;
        *v9 = v1002;
        if (v872)
        {
          v258 = 0;
          goto LABEL_483;
        }
        v247 = 4;
      }
      else
      {
        v247 = v1002;
        *v9 = 0;
      }
      llvm::BitstreamCursor::readRecord(*(_QWORD *)(a2 + 200), v247, (uint64_t)v11, 0, (uint64_t)&v1005);
      if ((v1006 & 1) != 0)
      {
        *v9 = (uint64_t)v1005;
        goto LABEL_482;
      }
      if ((_DWORD)v1005 != 10)
      {
        *(_QWORD *)&v1002 = "METADATA_NAME not followed by METADATA_NAMED_NODE";
        v1004 = 259;
        sub_1C5018778(v9, (llvm::Twine *)&v1002);
        if ((v1006 & 1) != 0)
        {
          v274 = v1005;
          v1005 = 0;
          if (v274)
            (*((void (**)(unsigned __int8 **))*v274 + 1))(v274);
        }
        goto LABEL_482;
      }
      v248 = *((unsigned int *)v11 + 2);
      inserted = llvm::Module::getOrInsertNamedMetadata(*(_QWORD *)(a2 + 216), (unsigned __int8 *)v1007, v1008);
      if ((_DWORD)v248)
      {
        v250 = inserted;
        v251 = 0;
        v252 = 8 * v248;
        while (1)
        {
          v253 = sub_1C501FA6C(a2, (*v11)[v251 / 4]);
          if (!v253)
            break;
          v254 = v253;
          if (*v253 - 4 >= 0x1F)
            break;
          *(_QWORD *)&v1002 = v253;
          v255 = *(_QWORD *)(v250 + 48);
          v256 = *(unsigned int *)(v255 + 8);
          if (v256 >= *(_DWORD *)(v255 + 12))
          {
            sub_1C5419FD8(*(_QWORD *)(v250 + 48), (unsigned __int8 **)&v1002);
          }
          else
          {
            v257 = (unsigned __int8 **)(*(_QWORD *)v255 + 8 * v256);
            *v257 = v254;
            llvm::MetadataTracking::track((uint64_t)v257, v254, 2);
            ++*(_DWORD *)(v255 + 8);
          }
          v251 += 8;
          v258 = 1;
          if (v252 == v251)
            goto LABEL_483;
        }
        *(_QWORD *)&v1002 = "Invalid named metadata: expect fwd ref to MDNode";
        v1004 = 259;
        sub_1C5018778(v9, (llvm::Twine *)&v1002);
LABEL_482:
        v258 = 0;
        goto LABEL_483;
      }
      v258 = 1;
LABEL_483:
      if (v1007 != (unsigned __int8 **)&v1009)
        free(v1007);
      if ((v258 & 1) == 0)
        return;
      goto LABEL_1168;
    case 5:
      v1000 = 1;
LABEL_148:
      *(_QWORD *)&v1002 = v1003;
      *((_QWORD *)&v1002 + 1) = 0x800000000;
      v159 = *((unsigned int *)a3 + 2);
      if (v159 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, v159, 8);
        LODWORD(v159) = *((_DWORD *)v11 + 2);
      }
      if ((_DWORD)v159)
      {
        v160 = *v11;
        v161 = 8 * v159;
        do
        {
          if (*v160)
            v162 = sub_1C50211EC((uint64_t)v999, (*v160 - 1));
          else
            v162 = 0;
          v163 = DWORD2(v1002);
          if (DWORD2(v1002) >= (unint64_t)HIDWORD(v1002))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, DWORD2(v1002) + 1, 8);
            v163 = DWORD2(v1002);
          }
          *(_QWORD *)(v1002 + 8 * v163) = v162;
          v164 = ++DWORD2(v1002);
          v160 += 2;
          v161 -= 8;
        }
        while (v161);
      }
      else
      {
        v164 = DWORD2(v1002);
      }
      v214 = v1000;
      v215 = *(uint64_t **)(a2 + 208);
      v137 = v164;
      v365 = (_QWORD *)v1002;
      goto LABEL_214;
    case 6:
      llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord(a2, (unsigned int **)a3, a1);
      goto LABEL_210;
    case 7:
      if ((unint64_t)*((unsigned int *)a3 + 2) - 5 >= 2)
        goto LABEL_299;
      v120 = (uint64_t *)*a3;
      v1000 = *(_QWORD *)*a3 != 0;
      v121 = *((_DWORD *)v120 + 2);
      v122 = *((_DWORD *)v120 + 4);
      v123 = sub_1C50211EC((uint64_t)v999, *((unsigned int *)v120 + 6));
      v124 = (*v11)[8];
      if (v124)
        v125 = sub_1C50211EC((uint64_t)v999, (v124 - 1));
      else
        v125 = 0;
      v291 = *((_DWORD *)v11 + 2) == 6 && *((_QWORD *)*v11 + 5) != 0;
      Impl = llvm::DILocation::getImpl(*(uint64_t **)(a2 + 208), v121, v122, (uint64_t)v123, (uint64_t)v125, v291, v1000, 1);
      goto LABEL_1165;
    case 8:
      v126 = *((_DWORD *)a3 + 2);
      if ((v126 & 1) != 0)
        goto LABEL_299;
      *(_QWORD *)&v1002 = v1003;
      *((_QWORD *)&v1002 + 1) = 0x800000000;
      if (v126)
      {
        for (i = 0; i != v126; i += 2)
        {
          v8 = *(_QWORD *)&(*v11)[2 * i];
          LODWORD(v1007) = v8;
          v128 = *(_QWORD *)(a2 + 248);
          if (!v128)
          {
LABEL_1270:
            sub_1C485C2F0();
            goto LABEL_1271;
          }
          v129 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 ***))(*(_QWORD *)v128 + 48))(v128, &v1007);
          if (!v129)
          {
            v1007 = (unsigned __int8 **)"Invalid record";
            v1010 = 259;
            if (!atomic_load(qword_1EF8F6CB0))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
            v362 = qword_1EF8F6CB0[0];
            v363 = operator new();
            *(_QWORD *)v363 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)&v1007, (_QWORD *)(v363 + 8));
            *(_QWORD *)(v363 + 32) = 1;
            *(_QWORD *)(v363 + 40) = v362;
            *(_BYTE *)(v363 + 48) = 1;
            *v9 = v363;
            goto LABEL_478;
          }
          v130 = v129[8];
          if (v130 == 7)
          {
            v132 = DWORD2(v1002);
            if (DWORD2(v1002) >= (unint64_t)HIDWORD(v1002))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, DWORD2(v1002) + 1, 8);
              v132 = DWORD2(v1002);
            }
            *(_QWORD *)(v1002 + 8 * v132) = 0;
          }
          else
          {
            if (v130 == 9)
            {
              v131 = sub_1C50211EC((uint64_t)v999, *(_QWORD *)&(*v11)[2 * (i + 1)]);
            }
            else
            {
              ValueFwdRef = llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), *(_QWORD *)&(*v11)[2 * (i + 1)], (llvm::Type *)v129, v8);
              v131 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)ValueFwdRef, v134);
            }
            v135 = v131;
            v136 = DWORD2(v1002);
            if (DWORD2(v1002) >= (unint64_t)HIDWORD(v1002))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, DWORD2(v1002) + 1, 8);
              v136 = DWORD2(v1002);
            }
            *(_QWORD *)(v1002 + 8 * v136) = v135;
          }
          v137 = ++DWORD2(v1002);
        }
        v365 = (_QWORD *)v1002;
      }
      else
      {
        v137 = 0;
        v365 = v1003;
      }
      v215 = *(uint64_t **)(a2 + 208);
      v214 = 0;
LABEL_214:
      v216 = (unsigned __int8 *)llvm::MDTuple::getImpl(v215, v365, v137, v214, 1);
      goto LABEL_215;
    case 9:
      v175 = *((_DWORD *)a3 + 2);
      if ((v175 & 1) != 0)
        goto LABEL_299;
      if (v175 != 2)
        goto LABEL_178;
      v115 = **a3;
      LODWORD(v1002) = v115;
      v176 = *(_QWORD *)(a2 + 248);
      if (!v176)
        goto LABEL_1270;
      v117 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v176 + 48))(v176, &v1002);
      v177 = v117[8];
      if (v177 == 9 || v177 == 7)
      {
LABEL_178:
        Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a2 + 208), 0, 0, 0, 1);
      }
      else
      {
LABEL_326:
        v280 = llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), (*v11)[2], (llvm::Type *)v117, v115);
        Impl = (uint64_t)llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v280, v281);
      }
      goto LABEL_1165;
    case 12:
      v169 = *((_DWORD *)a3 + 2);
      if (v169 <= 3)
        goto LABEL_299;
      v170 = (uint64_t *)*a3;
      v1000 = *(_QWORD *)*a3 != 0;
      v171 = *((_DWORD *)v170 + 2);
      if (HIWORD(v171) || *((_DWORD *)v170 + 4) != 0)
        goto LABEL_299;
      v173 = *((_DWORD *)v170 + 6);
      if (v173)
      {
        v174 = sub_1C50211EC((uint64_t)v999, (v173 - 1));
        v169 = *((_DWORD *)v11 + 2);
      }
      else
      {
        v174 = 0;
      }
      *(_QWORD *)&v1002 = v1003;
      *((_QWORD *)&v1002 + 1) = 0x800000000;
      if (v169 == 4)
      {
        v521 = 0;
        v522 = v1003;
      }
      else
      {
        LODWORD(v521) = 0;
        for (j = 4; j != v169; ++j)
        {
          v524 = *(_QWORD *)&(*v11)[2 * j];
          if ((_DWORD)v524)
          {
            v525 = sub_1C50211EC((uint64_t)v999, (v524 - 1));
            LODWORD(v521) = DWORD2(v1002);
          }
          else
          {
            v525 = 0;
          }
          if (v521 >= HIDWORD(v1002))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, v521 + 1, 8);
            LODWORD(v521) = DWORD2(v1002);
          }
          *(_QWORD *)(v1002 + 8 * v521) = v525;
          v521 = ++DWORD2(v1002);
        }
        v522 = (_QWORD *)v1002;
      }
      v526 = (unsigned __int8 *)llvm::GenericDINode::getImpl(*(uint64_t **)(a2 + 208), v171, v174, v522, v521, v1000, 1);
      sub_1C501EF04(a2, v526, *v10);
      ++*v10;
      v217 = (void *)v1002;
      if ((_QWORD *)v1002 == v1003)
        goto LABEL_1168;
      goto LABEL_216;
    case 13:
      v67 = (uint64_t *)*a3;
      v68 = *(_QWORD *)*a3 >> 1;
      if (v68 == 2)
      {
        v229 = *(_QWORD **)(a2 + 208);
        v230 = *((_DWORD *)v67 + 2);
        if (v230)
        {
          v231 = sub_1C50211EC((uint64_t)v999, (v230 - 1));
          v67 = (uint64_t *)*v11;
        }
        else
        {
          v231 = 0;
        }
        v355 = *((_DWORD *)v67 + 4);
        if (v355)
        {
          v356 = sub_1C50211EC((uint64_t)v999, (v355 - 1));
          v67 = (uint64_t *)*v11;
        }
        else
        {
          v356 = 0;
        }
        v357 = *((_DWORD *)v67 + 6);
        if (v357)
        {
          v358 = sub_1C50211EC((uint64_t)v999, (v357 - 1));
          v67 = (uint64_t *)*v11;
        }
        else
        {
          v358 = 0;
        }
        v359 = *((_DWORD *)v67 + 8);
        if (v359)
          v360 = sub_1C50211EC((uint64_t)v999, (v359 - 1));
        else
          v360 = 0;
        Impl = (uint64_t)llvm::DISubrange::getImpl(v229, (uint64_t)v231, (uint64_t)v356, (uint64_t)v358, (uint64_t)v360, 0, 1);
      }
      else if (v68 == 1)
      {
        v694 = *(llvm::Type **)(a2 + 208);
        v695 = *((_DWORD *)v67 + 2);
        if (v695)
        {
          v696 = sub_1C50211EC((uint64_t)v999, (v695 - 1));
          v67 = (uint64_t *)*v11;
        }
        else
        {
          v696 = 0;
        }
        Impl = (uint64_t)llvm::DISubrange::getImpl(v694, (llvm::LLVMContext *)v696, -(v67[2] & 1) ^ ((unint64_t)v67[2] >> 1), 0, 1);
      }
      else
      {
        if (v68)
        {
          v69 = "Invalid record: Unsupported version of DISubrange";
          goto LABEL_300;
        }
        Impl = (uint64_t)llvm::DISubrange::getImpl(*(llvm::Type **)(a2 + 208), (llvm::LLVMContext *)v67[1], -(v67[2] & 1) ^ ((unint64_t)v67[2] >> 1), 0, 1);
      }
      goto LABEL_1165;
    case 14:
      v101 = *((unsigned int *)a3 + 2);
      if (v101 <= 2)
        goto LABEL_299;
      v102 = (uint64_t *)*a3;
      v104 = *(_QWORD *)*a3;
      v103 = *((_QWORD *)*a3 + 1);
      v105 = *(_QWORD *)*v11 & 1;
      v1000 = *(_BYTE *)*v11 & 1;
      if ((v104 & 4) == 0)
      {
        v106 = (const void *)(-(uint64_t)(v103 & 1) ^ (v103 >> 1));
        v107 = *(_QWORD **)(a2 + 208);
        v108 = 64;
        if (!(_DWORD)v105)
        {
          v996 = 64;
          goto LABEL_664;
        }
        v998 = 64;
        goto LABEL_517;
      }
      llvm::readWideAPInt((unint64_t *)v102 + 3, v101 - 3, v103, (unsigned int *)&v1002);
      v106 = (const void *)v1002;
      v108 = DWORD2(v1002);
      v107 = *(_QWORD **)(a2 + 208);
      if (v1000)
      {
        v998 = DWORD2(v1002);
        if (DWORD2(v1002) > 0x40)
        {
          v273 = (((unint64_t)DWORD2(v1002) + 63) >> 3) & 0x3FFFFFF8;
          v997 = (void *)operator new[]();
          memcpy(v997, v106, v273);
          goto LABEL_518;
        }
LABEL_517:
        v997 = (void *)v106;
LABEL_518:
        v386 = (*v11)[4];
        if (v386)
          v387 = sub_1C50211EC((uint64_t)v999, (v386 - 1));
        else
          v387 = 0;
        v499 = (unsigned __int8 *)llvm::DIEnumerator::getImpl(v107, (uint64_t)&v997, (v104 >> 1) & 1, v387, 1, 1);
        sub_1C501EF04(a2, v499, *v10);
        if (v998 >= 0x41)
        {
          v500 = v997;
          if (v997)
            goto LABEL_923;
        }
        goto LABEL_924;
      }
      v996 = DWORD2(v1002);
      if (DWORD2(v1002) > 0x40)
      {
        v658 = (((unint64_t)DWORD2(v1002) + 63) >> 3) & 0x3FFFFFF8;
        v995 = (void *)operator new[]();
        memcpy(v995, v106, v658);
        goto LABEL_918;
      }
LABEL_664:
      v995 = (void *)v106;
LABEL_918:
      v659 = (*v11)[4];
      if (v659)
        v660 = sub_1C50211EC((uint64_t)v999, (v659 - 1));
      else
        v660 = 0;
      v661 = (unsigned __int8 *)llvm::DIEnumerator::getImpl(v107, (uint64_t)&v995, (v104 >> 1) & 1, v660, 0, 1);
      sub_1C501EF04(a2, v661, *v10);
      if (v996 >= 0x41)
      {
        v500 = v995;
        if (v995)
LABEL_923:
          MEMORY[0x1CAA32F9C](v500, 0x1000C8000313F17);
      }
LABEL_924:
      ++*v10;
      if (v108 >= 0x41 && v106)
        MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
LABEL_1168:
      *v9 = 0;
      return;
    case 15:
      v79 = *((_DWORD *)a3 + 2);
      if (v79 - 8 <= 0xFFFFFFFD)
        goto LABEL_299;
      v80 = (uint64_t *)*a3;
      v81 = *(_QWORD *)*a3;
      v1000 = v81 != 0;
      if (v79 < 7)
        v82 = 0;
      else
        v82 = *((_DWORD *)v80 + 12);
      v269 = *(_QWORD **)(a2 + 208);
      v270 = *((_DWORD *)v80 + 2);
      v271 = *((_DWORD *)v80 + 4);
      if (v81)
      {
        if (v271)
        {
          v272 = sub_1C50211EC((uint64_t)v999, (v271 - 1));
          v80 = (uint64_t *)*v11;
        }
        else
        {
          v272 = 0;
        }
        Impl = (uint64_t)llvm::DIBasicType::getImpl(v269, v270, (uint64_t)v272, v80[3], *((_DWORD *)v80 + 8), *((_DWORD *)v80 + 10), v82, 1, 1);
      }
      else
      {
        if (v271)
        {
          v286 = sub_1C50211EC((uint64_t)v999, (v271 - 1));
          v80 = (uint64_t *)*v11;
        }
        else
        {
          v286 = 0;
        }
        Impl = (uint64_t)llvm::DIBasicType::getImpl(v269, v270, (uint64_t)v286, v80[3], *((_DWORD *)v80 + 8), *((_DWORD *)v80 + 10), v82, 0, 1);
      }
      goto LABEL_1165;
    case 16:
      v45 = *((_DWORD *)a3 + 2);
      if (v45 > 6 || ((1 << v45) & 0x68) == 0)
        goto LABEL_299;
      v47 = (uint64_t *)*a3;
      v48 = *(_QWORD *)*a3 != 0;
      v1000 = *(_QWORD *)*a3 != 0;
      if (v45 < 5)
        goto LABEL_237;
      v49 = v47[3];
      if (v49)
      {
        v50 = v47[4];
        if (v50)
        {
          if ((_DWORD)v50)
          {
            v982 = sub_1C50211EC((uint64_t)v999, (v50 - 1));
            v48 = v1000;
            v47 = (uint64_t *)*v11;
          }
          else
          {
            v982 = 0;
          }
          v366 = v49 & 0xFFFFFF00;
          LODWORD(v49) = v49;
          v232 = 1;
LABEL_489:
          v367 = *(_QWORD **)(a2 + 208);
          v368 = *((_DWORD *)v47 + 2);
          if (v48)
          {
            if (v368)
            {
              v369 = sub_1C50211EC((uint64_t)v999, (v368 - 1));
              v47 = (uint64_t *)*v11;
            }
            else
            {
              v369 = 0;
            }
            v371 = *((_DWORD *)v47 + 4);
            if (v371)
              v372 = sub_1C50211EC((uint64_t)v999, (v371 - 1));
            else
              v372 = 0;
            v373 = v982;
            v374 = v366 | v49;
            if (*((_DWORD *)v11 + 2) < 6u)
            {
              v377 = 0;
              v378 = 0;
            }
            else
            {
              v375 = (*v11)[10];
              if (v375)
              {
                v376 = sub_1C50211EC((uint64_t)v999, (v375 - 1));
                v373 = v982;
                v377 = (uint64_t)v376;
              }
              else
              {
                v377 = 0;
              }
              v378 = 1;
            }
            LODWORD(v1002) = v374;
            *((_QWORD *)&v1002 + 1) = v373;
            LOBYTE(v1003[0]) = v232;
            v543 = v367;
            v544 = (uint64_t)v369;
            v545 = (uint64_t)v372;
            v546 = 1;
          }
          else
          {
            if (v368)
            {
              v370 = sub_1C50211EC((uint64_t)v999, (v368 - 1));
              v47 = (uint64_t *)*v11;
            }
            else
            {
              v370 = 0;
            }
            v493 = *((_DWORD *)v47 + 4);
            if (v493)
              v494 = sub_1C50211EC((uint64_t)v999, (v493 - 1));
            else
              v494 = 0;
            v495 = v982;
            v496 = v366 | v49;
            if (*((_DWORD *)v11 + 2) < 6u)
            {
              v377 = 0;
              v378 = 0;
            }
            else
            {
              v497 = (*v11)[10];
              if (v497)
              {
                v498 = sub_1C50211EC((uint64_t)v999, (v497 - 1));
                v495 = v982;
                v377 = (uint64_t)v498;
              }
              else
              {
                v377 = 0;
              }
              v378 = 1;
            }
            LODWORD(v1002) = v496;
            *((_QWORD *)&v1002 + 1) = v495;
            LOBYTE(v1003[0]) = v232;
            v543 = v367;
            v544 = (uint64_t)v370;
            v545 = (uint64_t)v494;
            v546 = 0;
          }
          Impl = (uint64_t)llvm::DIFile::getImpl(v543, v544, v545, &v1002, v377, v378, v546, 1);
          goto LABEL_1165;
        }
LABEL_237:
        v232 = 0;
        LODWORD(v49) = 0;
      }
      else
      {
        v232 = 0;
      }
      v366 = 0;
      goto LABEL_489;
    case 17:
      v138 = *((_DWORD *)a3 + 2);
      if (v138 - 16 <= 0xFFFFFFFB)
        goto LABEL_299;
      v139 = (uint64_t *)*a3;
      if (v138 < 0xD)
      {
        v962 = 0;
        v952 = 0;
        v943 = 0;
        v141 = 0;
        v142 = 0;
        v973 = *((_DWORD *)a3 + 2);
        v987 = 0;
        goto LABEL_530;
      }
      v140 = v139[12];
      v973 = (v140 - 1) >> 8;
      v141 = (unint64_t)(v140 != 0) << 32;
      if (v140)
        v142 = v140 - 1;
      else
        v142 = 0;
      if (v138 == 13)
      {
        v962 = 0;
        v952 = 0;
        v943 = 0;
      }
      else
      {
        v392 = v139[13];
        v962 = v392 & 0xFFFFFF00;
        v943 = (unint64_t)(v392 != 0) << 32;
        v952 = v392;
        if (v138 >= 0xF)
        {
          v393 = v139[14];
          if (v393)
          {
            if ((_DWORD)v393)
            {
              v987 = sub_1C50211EC((uint64_t)v999, (v393 - 1));
              v139 = (uint64_t *)*v11;
              goto LABEL_530;
            }
          }
        }
      }
      v987 = 0;
LABEL_530:
      v394 = *v139;
      v1000 = *v139 != 0;
      v395 = *((_DWORD *)v139 + 20);
      v396 = *(uint64_t **)(a2 + 208);
      v397 = *((_DWORD *)v139 + 4);
      v940 = *((_DWORD *)v139 + 2);
      if (v394)
      {
        if (v397)
        {
          v929 = sub_1C50211EC((uint64_t)v999, (v397 - 1));
          v139 = (uint64_t *)*v11;
        }
        else
        {
          v929 = 0;
        }
        v450 = *((_DWORD *)v139 + 6);
        if (v450)
        {
          v922 = sub_1C50211EC((uint64_t)v999, (v450 - 1));
          v139 = (uint64_t *)*v11;
        }
        else
        {
          v922 = 0;
        }
        v451 = *((_DWORD *)v139 + 8);
        v452 = *((_DWORD *)v139 + 10);
        v935 = v396;
        if (v452)
          v453 = sub_1C50211EC((uint64_t)v999, (v452 - 1));
        else
          v453 = 0;
        v454 = sub_1C5020E68(a2, (llvm::MDNode *)v453);
        v455 = (*v11)[12];
        v916 = v451;
        v909 = (uint64_t)v454;
        v456 = v395;
        if (v455)
          v457 = sub_1C50211EC((uint64_t)v999, (v455 - 1));
        else
          v457 = 0;
        v458 = sub_1C5020E68(a2, (llvm::MDNode *)v457);
        v459 = *v11;
        v460 = *((_QWORD *)*v11 + 7);
        v461 = v459[16];
        v462 = *((_QWORD *)v459 + 9);
        v463 = v142 | ((unint64_t)(v973 & 0xFFFFFF) << 8) | v141;
        v464 = v459[22];
        if (v464)
          v465 = sub_1C50211EC((uint64_t)v999, (v464 - 1));
        else
          v465 = 0;
        v876 = sub_1C5020E68(a2, (llvm::MDNode *)v465);
        Impl = llvm::DIDerivedType::getImpl(v935, v940, (uint64_t)v929, (uint64_t)v922, v916, v909, (uint64_t)v458, v460, v461, v462, v463, v943 | v952 | v962, v456, (uint64_t)v876, (uint64_t)v987, 1, 1);
      }
      else
      {
        if (v397)
        {
          v930 = sub_1C50211EC((uint64_t)v999, (v397 - 1));
          v139 = (uint64_t *)*v11;
        }
        else
        {
          v930 = 0;
        }
        v595 = *((_DWORD *)v139 + 6);
        if (v595)
        {
          v924 = sub_1C50211EC((uint64_t)v999, (v595 - 1));
          v139 = (uint64_t *)*v11;
        }
        else
        {
          v924 = 0;
        }
        v918 = *((_DWORD *)v139 + 8);
        v596 = *((_DWORD *)v139 + 10);
        if (v596)
          v597 = sub_1C50211EC((uint64_t)v999, (v596 - 1));
        else
          v597 = 0;
        v910 = sub_1C5020E68(a2, (llvm::MDNode *)v597);
        v598 = (*v11)[12];
        v901 = v395;
        if (v598)
          v599 = sub_1C50211EC((uint64_t)v999, (v598 - 1));
        else
          v599 = 0;
        v600 = sub_1C5020E68(a2, (llvm::MDNode *)v599);
        v601 = *v11;
        v602 = *((_QWORD *)*v11 + 7);
        v603 = v601[16];
        v604 = *((_QWORD *)v601 + 9);
        v605 = v142 | ((unint64_t)(v973 & 0xFFFFFF) << 8) | v141;
        v606 = v601[22];
        if (v606)
          v607 = sub_1C50211EC((uint64_t)v999, (v606 - 1));
        else
          v607 = 0;
        v877 = sub_1C5020E68(a2, (llvm::MDNode *)v607);
        Impl = llvm::DIDerivedType::getImpl(v396, v940, (uint64_t)v930, (uint64_t)v924, v918, (uint64_t)v910, (uint64_t)v600, v602, v603, v604, v605, v943 | v952 | v962, v901, (uint64_t)v877, (uint64_t)v987, 0, 1);
      }
      goto LABEL_1165;
    case 18:
      if ((*((_DWORD *)a3 + 2) - 23) <= 0xFFFFFFF8)
        goto LABEL_299;
      v143 = (uint64_t *)*a3;
      v144 = *(_QWORD *)*a3;
      v1000 = v144 & 1;
      v145 = *((_DWORD *)v143 + 2);
      v146 = *((_DWORD *)v143 + 4);
      if (v146)
      {
        v147 = sub_1C50211EC((uint64_t)v999, (v146 - 1));
        v143 = (uint64_t *)*v11;
      }
      else
      {
        v147 = 0;
      }
      v292 = *((_DWORD *)v143 + 6);
      if (v292)
      {
        v293 = sub_1C50211EC((uint64_t)v999, (v292 - 1));
        v143 = (uint64_t *)*v11;
      }
      else
      {
        v293 = 0;
      }
      v294 = *((_DWORD *)v143 + 8);
      v295 = *((_DWORD *)v143 + 10);
      if (v295)
        v296 = sub_1C50211EC((uint64_t)v999, (v295 - 1));
      else
        v296 = 0;
      v297 = sub_1C5020E68(a2, (llvm::MDNode *)v296);
      v298 = *v11;
      if (HIDWORD(*((_QWORD *)*v11 + 8)))
        goto LABEL_359;
      v299 = v297;
      v908 = *((_QWORD *)*v11 + 8);
      v933 = *((_QWORD *)v298 + 7);
      v988 = v298[20];
      v927 = v298[24];
      v300 = v298[30];
      if (v300)
        v977 = sub_1C50211EC((uint64_t)v999, (v300 - 1));
      else
        v977 = 0;
      v917 = (uint64_t)v299;
      v923 = v144;
      v914 = v9;
      v907 = v10;
      if (*(_BYTE *)(a2 + 972) && !byte_1ED7F4A90 && v977 && v145 <= 0x17 && ((1 << v145) & 0x880014) != 0)
      {
        v510 = (uint64_t)v293;
        v511 = v988 | 4;
        if (!v147)
        {
          v518 = 0;
          v688 = 0;
          v687 = 0;
          v686 = 0;
          v685 = 0;
          v620 = 0;
          v619 = 0;
          v616 = 0;
          v689 = 0;
          v737 = 0;
          v693 = 0;
          v692 = 0;
          v690 = v933;
LABEL_1089:
          v691 = v927;
          goto LABEL_1178;
        }
        v991 = v988 | 4;
        v512 = (_QWORD *)*((_QWORD *)v147 + 1);
        v515 = *v512;
        v513 = v512 + 3;
        v514 = v515;
        if (!v515
          || (v516 = memchr(v513, 60, v514)) == 0
          || v516 - v513 == -1
          || v514 >= 5 && (*(_DWORD *)v513 == 1314149215 ? (v517 = v513[4] == 124) : (v517 = 0), v517))
        {
          v518 = (uint64_t)v147;
          v735 = (*v11)[28];
          if (v735)
          {
            v616 = sub_1C50211EC((uint64_t)v999, (v735 - 1));
            v688 = 0;
            v687 = 0;
            v686 = 0;
            v685 = 0;
            v620 = 0;
            v619 = 0;
LABEL_1088:
            v689 = 0;
            v737 = 0;
            v693 = 0;
            v692 = 0;
            v690 = v933;
            v511 = v991;
            goto LABEL_1089;
          }
        }
        else
        {
          v518 = (uint64_t)v147;
        }
        v688 = 0;
        v687 = 0;
        v686 = 0;
        v685 = 0;
        v620 = 0;
        v619 = 0;
        v616 = 0;
        goto LABEL_1088;
      }
      v519 = (*v11)[12];
      if (v519)
        v520 = sub_1C50211EC((uint64_t)v999, (v519 - 1));
      else
        v520 = 0;
      v609 = sub_1C5020E68(a2, (llvm::MDNode *)v520);
      v610 = *v11;
      v955 = *((_QWORD *)*v11 + 9);
      v967 = v609;
      v611 = (*v11)[22];
      if (v611)
      {
        v612 = sub_1C50211EC((uint64_t)v999, (v611 - 1));
        v610 = *v11;
      }
      else
      {
        v612 = 0;
      }
      v945 = v612;
      v613 = v610[26];
      if (v613)
        v614 = sub_1C50211EC((uint64_t)v999, (v613 - 1));
      else
        v614 = 0;
      v941 = sub_1C5020E68(a2, (llvm::MDNode *)v614);
      v615 = (*v11)[28];
      if (v615)
        v616 = sub_1C50211EC((uint64_t)v999, (v615 - 1));
      else
        v616 = 0;
      v617 = *((_DWORD *)v11 + 2);
      if (v617 < 0x11)
      {
        v510 = (uint64_t)v293;
        v518 = (uint64_t)v147;
        v619 = 0;
        v620 = 0;
      }
      else
      {
        v896 = v616;
        v618 = (*v11)[32];
        if (v618)
        {
          v619 = sub_1C50211EC((uint64_t)v999, (v618 - 1));
          v617 = *((_DWORD *)v11 + 2);
        }
        else
        {
          v619 = 0;
        }
        if (v617 < 0x12)
        {
          v510 = (uint64_t)v293;
          v518 = (uint64_t)v147;
          v620 = 0;
          v685 = 0;
          v686 = 0;
          v687 = 0;
          v688 = 0;
          v690 = v933;
          v689 = (uint64_t)v941;
          v691 = v927;
          v693 = v955;
          v692 = (uint64_t)v967;
          v616 = v896;
          goto LABEL_1176;
        }
        v683 = (*v11)[34];
        v892 = v619;
        if (v683)
        {
          v684 = sub_1C50211EC((uint64_t)v999, (v683 - 1));
          v619 = v892;
          v620 = (uint64_t)v684;
          v617 = *((_DWORD *)v11 + 2);
        }
        else
        {
          v620 = 0;
        }
        v616 = v896;
        if (v617 >= 0x14)
        {
          v890 = v620;
          v804 = *v11;
          v805 = (*v11)[36];
          if (v805)
          {
            v904 = sub_1C50211EC((uint64_t)v999, (v805 - 1));
            v804 = *v11;
          }
          else
          {
            v904 = 0;
          }
          v828 = v804[38];
          if (v828)
            v686 = sub_1C50211EC((uint64_t)v999, (v828 - 1));
          else
            v686 = 0;
          v619 = v892;
          v616 = v896;
          v620 = v890;
          v510 = (uint64_t)v293;
          v829 = *((_DWORD *)v11 + 2);
          v518 = (uint64_t)v147;
          if (v829 < 0x15)
          {
            v687 = 0;
            v688 = 0;
            v690 = v933;
          }
          else
          {
            v830 = (*v11)[40];
            if (v830)
            {
              v831 = v686;
              v832 = sub_1C50211EC((uint64_t)v999, (v830 - 1));
              v686 = v831;
              v620 = v890;
              v619 = v892;
              v616 = v896;
              v687 = (uint64_t)v832;
              v829 = *((_DWORD *)v11 + 2);
            }
            else
            {
              v687 = 0;
            }
            v690 = v933;
            if (v829 >= 0x16)
            {
              v884 = v687;
              v887 = v686;
              v868 = (*v11)[42];
              if (v868)
                v688 = sub_1C50211EC((uint64_t)v999, (v868 - 1));
              else
                v688 = 0;
              v691 = v927;
              v693 = v955;
              v692 = (uint64_t)v967;
              v689 = (uint64_t)v941;
              v619 = v892;
              v616 = v896;
              v686 = v887;
              v620 = v890;
              v685 = (uint64_t)v904;
              v687 = v884;
LABEL_1176:
              if (!v977)
              {
                v823 = 0;
                v821 = v145;
                v817 = v917;
                v806 = v908;
                v815 = v692;
                v816 = v693;
                v820 = v689;
                v818 = v691;
                v814 = v988;
                v819 = (uint64_t)v945;
                goto LABEL_1181;
              }
              v511 = v988;
              v737 = (uint64_t)v945;
LABEL_1178:
              v993 = v511;
              v958 = v693;
              v970 = v692;
              v942 = v689;
              v949 = v737;
              v899 = v688;
              v905 = v685;
              v879 = (uint64_t)v688;
              v806 = v908;
              v873 = v690;
              v807 = v145;
              v891 = v145;
              v808 = v616;
              v809 = v619;
              v810 = v620;
              v811 = v686;
              v812 = v687;
              v813 = llvm::DICompositeType::buildODRType(*(uint64_t **)(a2 + 208), (uint64_t)v977, v807, v518, v510, v294, v917, v692, v873, v908, v693, v511, v737, v691, v689, (uint64_t)v616, (unint64_t)v619, v620, v685,
                       (uint64_t)v686,
                       v687,
                       v879);
              v814 = v993;
              v816 = v958;
              v815 = v970;
              v817 = v917;
              v688 = v899;
              v687 = v812;
              v818 = v927;
              v686 = v811;
              v620 = v810;
              v690 = v933;
              v619 = v809;
              v820 = v942;
              v819 = v949;
              v616 = v808;
              v821 = v891;
              v685 = v905;
              v822 = v813;
              v823 = 1;
              if (v813)
                goto LABEL_1182;
LABEL_1181:
              v822 = llvm::DICompositeType::getImpl(*(uint64_t **)(a2 + 208), v821, v518, v510, v294, v817, v815, v690, v806, v816, v814, v819, v818, v820, (uint64_t)v616, (uint64_t)v977, (unint64_t)v619, v620, v685,
                       (uint64_t)v686,
                       v687,
                       (uint64_t)v688,
                       v1000,
                       1);
LABEL_1182:
              v9 = v914;
              v10 = v907;
              if (v923 <= 1 && v823)
              {
                if ((*(_BYTE *)(v822 + 28) & 4) != 0)
                  v824 = a2 + 120;
                else
                  v824 = a2 + 96;
                v1007 = (unsigned __int8 **)v977;
                *(_QWORD *)&v1008 = v822;
                sub_1C61D1A34((uint64_t)&v1002, v824, (uint64_t *)&v1007, &v1008);
              }
              v802 = *v907;
              v803 = a2;
              v801 = (unsigned __int8 *)v822;
LABEL_1167:
              sub_1C501EF04(v803, v801, v802);
              ++*v10;
              goto LABEL_1168;
            }
            v688 = 0;
          }
          v691 = v927;
          v693 = v955;
          v692 = (uint64_t)v967;
          v689 = (uint64_t)v941;
          v685 = (uint64_t)v904;
          goto LABEL_1176;
        }
        v510 = (uint64_t)v293;
        v518 = (uint64_t)v147;
      }
      v685 = 0;
      v686 = 0;
      v687 = 0;
      v688 = 0;
      v690 = v933;
      v689 = (uint64_t)v941;
      v691 = v927;
      v693 = v955;
      v692 = (uint64_t)v967;
      goto LABEL_1176;
    case 19:
      v191 = *((_DWORD *)a3 + 2);
      if (v191 - 5 <= 0xFFFFFFFD)
        goto LABEL_299;
      v192 = (uint64_t *)*a3;
      v193 = *(_QWORD *)*a3;
      if (v191 < 4)
        LOBYTE(v8) = 0;
      else
        LOBYTE(v8) = *((_BYTE *)v192 + 24);
      v1000 = v193 & 1;
      LODWORD(v11) = *((_DWORD *)v192 + 2);
      v275 = *((_DWORD *)v192 + 4);
      if (v275)
      {
        v276 = sub_1C50211EC((uint64_t)v999, (v275 - 1));
        v277 = (uint64_t)v276;
        if (v193 < 2)
        {
          if (v276)
          {
            if (*v276 == 4)
            {
              *(_QWORD *)&v1002 = v276;
              v278 = v276[1] & 0x7F;
              if (v278 != 1)
              {
                if (v278 == 2)
                {
LABEL_1271:
                  v1007 = (unsigned __int8 **)&v1002;
                  v1001 = llvm::MDTuple::getImpl(*(uint64_t **)(a2 + 176), 0, 0, 2, 1);
                  v1005 = (unsigned __int8 **)&v1001;
                  sub_1C61D2184(a2 + 144, &v1007, &v1005);
                  v871 = (llvm::MDNode *)v1001;
                  v1001 = 0;
                  if (v871)
                    llvm::MDNode::deleteTemporary(v871, v870);
                  v277 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 16 * *(unsigned int *)(a2 + 152) - 8);
                }
                else
                {
                  v277 = sub_1C5020BB8(a2, (uint64_t)v276);
                }
              }
            }
          }
        }
      }
      else
      {
        v277 = 0;
      }
      Impl = (uint64_t)llvm::DISubroutineType::getImpl(*(_QWORD **)(a2 + 208), (int)v11, v8, v277, v1000, 1);
      goto LABEL_1165;
    case 20:
      if ((*((_DWORD *)a3 + 2) - 23) <= 0xFFFFFFF6)
        goto LABEL_299;
      v1000 = 1;
      v180 = *(_QWORD *)(a2 + 208);
      v181 = (uint64_t *)*a3;
      v182 = (*a3)[2];
      v183 = (*a3)[4];
      if (v183)
      {
        v184 = sub_1C50211EC((uint64_t)v999, (v183 - 1));
        v181 = (uint64_t *)*v11;
      }
      else
      {
        v184 = 0;
      }
      v319 = *((_DWORD *)v181 + 6);
      if (v319)
      {
        v320 = sub_1C50211EC((uint64_t)v999, (v319 - 1));
        v181 = (uint64_t *)*v11;
      }
      else
      {
        v320 = 0;
      }
      v321 = *((_DWORD *)v181 + 10);
      v944 = v181[4];
      if (v321)
      {
        v322 = sub_1C50211EC((uint64_t)v999, (v321 - 1));
        v181 = (uint64_t *)*v11;
      }
      else
      {
        v322 = 0;
      }
      v323 = *((_DWORD *)v181 + 12);
      v324 = *((_DWORD *)v181 + 14);
      if (v324)
      {
        v939 = sub_1C50211EC((uint64_t)v999, (v324 - 1));
        v181 = (uint64_t *)*v11;
      }
      else
      {
        v939 = 0;
      }
      v934 = *((_DWORD *)v181 + 16);
      v325 = *((_DWORD *)v181 + 18);
      if (v325)
      {
        v928 = sub_1C50211EC((uint64_t)v999, (v325 - 1));
        v181 = (uint64_t *)*v11;
      }
      else
      {
        v928 = 0;
      }
      v326 = *((_DWORD *)v181 + 20);
      if (v326)
      {
        v921 = sub_1C50211EC((uint64_t)v999, (v326 - 1));
        v181 = (uint64_t *)*v11;
      }
      else
      {
        v921 = 0;
      }
      v327 = *((_DWORD *)v181 + 24);
      if (v327)
      {
        v915 = sub_1C50211EC((uint64_t)v999, (v327 - 1));
        v181 = (uint64_t *)*v11;
      }
      else
      {
        v915 = 0;
      }
      v328 = *((_DWORD *)v181 + 26);
      if (v328)
        v329 = sub_1C50211EC((uint64_t)v999, (v328 - 1));
      else
        v329 = 0;
      v330 = *((_DWORD *)v11 + 2);
      v978 = (uint64_t)v320;
      v989 = (uint64_t)v184;
      v964 = (uint64_t)v322;
      v954 = v323;
      if (v330 >= 0x10)
      {
        v332 = *v11;
        v333 = (*v11)[30];
        if (!v333)
        {
          v331 = 0;
          goto LABEL_698;
        }
        v334 = v182;
        v335 = v180;
        v336 = v329;
        v337 = sub_1C50211EC((uint64_t)v999, (v333 - 1));
        v329 = v336;
        v180 = v335;
        v182 = v334;
        v331 = (uint64_t)v337;
        v330 = *((_DWORD *)v11 + 2);
      }
      else
      {
        v331 = 0;
      }
      if (v330 < 0xF)
      {
        v338 = v182;
        v339 = v180;
        v340 = 0;
        v341 = 0;
        v342 = 0;
LABEL_700:
        v527 = 0;
        v528 = 0;
        v529 = 0;
        v530 = 1;
        goto LABEL_945;
      }
      v332 = *v11;
LABEL_698:
      v342 = *((_QWORD *)v332 + 14);
      if (v330 < 0x11)
      {
        v338 = v182;
        v339 = v180;
        v340 = 0;
        v341 = 0;
        goto LABEL_700;
      }
      v530 = *((_QWORD *)v332 + 16) != 0;
      if (v330 == 17)
      {
        v338 = v182;
        v339 = v180;
        v340 = 0;
        v341 = 0;
        v527 = 0;
      }
      else
      {
        v527 = *((_QWORD *)v332 + 17) != 0;
        if (v330 >= 0x13)
        {
          v341 = v332[36];
          if (v330 != 19)
          {
            v528 = *((_QWORD *)v332 + 19) != 0;
            if (v330 >= 0x15)
            {
              v895 = *((_QWORD *)v332 + 16) != 0;
              v900 = *((_QWORD *)v332 + 14);
              v906 = v331;
              v913 = v329;
              v338 = v182;
              v339 = v180;
              v827 = v332[40];
              if (v827)
              {
                v340 = sub_1C50211EC((uint64_t)v999, (v827 - 1));
                v330 = *((_DWORD *)v11 + 2);
              }
              else
              {
                v340 = 0;
              }
              if (v330 >= 0x16 && (v869 = (*v11)[42]) != 0)
                v529 = sub_1C50211EC((uint64_t)v999, (v869 - 1));
              else
                v529 = 0;
              v329 = v913;
              v342 = v900;
              v331 = v906;
              v530 = v895;
LABEL_945:
              *(_QWORD *)&v875 = v915;
              *((_QWORD *)&v875 + 1) = v329;
              *(_QWORD *)&v874 = v928;
              *((_QWORD *)&v874 + 1) = v921;
              v665 = (unsigned __int8 *)llvm::DICompileUnit::getImpl(v339, v338, v989, v978, v944 != 0, v964, v954, (uint64_t)v939, v934, v874, v875, v331, v342, v530, v527, v341, v528, (uint64_t)v340, (uint64_t)v529,
                                          1);
              sub_1C501EF04(a2, v665, *v10);
              ++*v10;
              v666 = (*v11)[22];
              if (v666)
              {
                v667 = sub_1C501FA6C(a2, v666 - 1);
                if (v667)
                {
                  v668 = v667;
                  v669 = *(unsigned __int8 ***)(a2 + 664);
                  v670 = *(_QWORD *)(a2 + 672);
                  if ((unint64_t)v669 >= v670)
                  {
                    v672 = *(char **)(a2 + 656);
                    v673 = ((char *)v669 - v672) >> 4;
                    v674 = v673 + 1;
                    if ((unint64_t)(v673 + 1) >> 60)
                      abort();
                    v675 = v670 - (_QWORD)v672;
                    if (v675 >> 3 > v674)
                      v674 = v675 >> 3;
                    if ((unint64_t)v675 >= 0x7FFFFFFFFFFFFFF0)
                      v676 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v676 = v674;
                    if (v676)
                    {
                      if (v676 >> 60)
                        sub_1C4764EE4();
                      v677 = (char *)operator new(16 * v676);
                    }
                    else
                    {
                      v677 = 0;
                    }
                    v678 = (unsigned __int8 **)&v677[16 * v673];
                    *v678 = v665;
                    v678[1] = v668;
                    v671 = v678 + 2;
                    if (v669 != (unsigned __int8 **)v672)
                    {
                      do
                      {
                        *((_OWORD *)v678 - 1) = *((_OWORD *)v669 - 1);
                        v678 -= 2;
                        v669 -= 2;
                      }
                      while (v669 != (unsigned __int8 **)v672);
                      v669 = *(unsigned __int8 ***)(a2 + 656);
                    }
                    *(_QWORD *)(a2 + 656) = v678;
                    *(_QWORD *)(a2 + 664) = v671;
                    *(_QWORD *)(a2 + 672) = &v677[16 * v676];
                    if (v669)
                      operator delete(v669);
                  }
                  else
                  {
                    *v669 = v665;
                    v669[1] = v667;
                    v671 = v669 + 2;
                  }
                  *(_QWORD *)(a2 + 664) = v671;
                }
              }
              goto LABEL_1168;
            }
            v338 = v182;
            v339 = v180;
            v340 = 0;
LABEL_944:
            v529 = 0;
            goto LABEL_945;
          }
          v338 = v182;
          v339 = v180;
          v340 = 0;
        }
        else
        {
          v338 = v182;
          v339 = v180;
          v340 = 0;
          v341 = 0;
        }
      }
      v528 = 0;
      goto LABEL_944;
    case 21:
      v35 = *((_DWORD *)a3 + 2);
      if (v35 - 22 <= 0xFFFFFFFB)
        goto LABEL_299;
      v36 = (uint64_t *)*a3;
      v37 = *(_QWORD *)*a3;
      if ((v37 & 4) != 0)
      {
        v260 = *((_DWORD *)v36 + 22);
        v39 = (v260 & 0x200000) != 0 ? v260 & 0x3FDFFFFF : *((_DWORD *)v36 + 22);
        v40 = (v260 & 0x200000) != 0 ? *((_DWORD *)v36 + 18) | 0x100 : *((_DWORD *)v36 + 18);
      }
      else
      {
        v38 = *((_DWORD *)v36 + 26);
        v39 = (v38 & 0x200000) != 0 ? v38 & 0x3FDFFFFF : *((_DWORD *)v36 + 26);
        v40 = ((v38 & 0x200000u) >> 13) | (4 * (v36[7] != 0)) | (8 * (v36[8] != 0)) | (16 * (v36[14] != 0)) | v36[11] & 3;
      }
      v261 = v37 & 1 | ((v40 & 8) != 0);
      v1000 = v37 & 1 | ((v40 & 8) != 0);
      v262 = (v37 >> 1) & 1;
      if ((v37 & 4) == 0 && v35 <= 0x12 && (_DWORD)v262)
        goto LABEL_299;
      if ((v37 & 4) == 0)
        LOBYTE(v262) = 1;
      if ((v262 & 1) == 0)
        goto LABEL_299;
      v963 = v39;
      if ((v37 & 4) != 0)
      {
        v938 = v35 > 0x12;
        v953 = 0;
        v264 = 0;
        v265 = 0;
        v975 = v35 > 0x13;
        v266 = 1;
        v267 = 1;
      }
      else
      {
        v938 = 0;
        v975 = 0;
        v263 = v35 > 0x12;
        v264 = 2;
        if (v35 <= 0x12)
          v265 = 2;
        else
          v265 = 3;
        if ((v37 & 2) != 0)
          v263 = 0;
        v953 = v263;
        v266 = v35 > 0x13;
        v267 = v35 > 0x14;
      }
      v633 = v36[v265 | 0xCu];
      if ((_DWORD)v633)
      {
        v992 = sub_1C50211EC((uint64_t)v999, (v633 - 1));
        v261 = v1000;
        v36 = (uint64_t *)*v11;
      }
      else
      {
        v992 = 0;
      }
      v946 = *(_QWORD **)(a2 + 208);
      v655 = *((_DWORD *)v36 + 2);
      if (v261)
      {
        if (v655)
          v656 = sub_1C50211EC((uint64_t)v999, (v655 - 1));
        else
          v656 = 0;
        v936 = sub_1C5020E68(a2, (llvm::MDNode *)v656);
        v697 = *v11;
        v698 = (*v11)[4];
        if (v698)
        {
          v931 = sub_1C50211EC((uint64_t)v999, (v698 - 1));
          v697 = *v11;
        }
        else
        {
          v931 = 0;
        }
        v699 = v697[6];
        if (v699)
        {
          v925 = sub_1C50211EC((uint64_t)v999, (v699 - 1));
          v697 = *v11;
        }
        else
        {
          v925 = 0;
        }
        v700 = v697[8];
        if (v700)
        {
          v919 = sub_1C50211EC((uint64_t)v999, (v700 - 1));
          v697 = *v11;
        }
        else
        {
          v919 = 0;
        }
        v911 = v697[10];
        v701 = v697[12];
        if (v701)
        {
          v902 = sub_1C50211EC((uint64_t)v999, (v701 - 1));
          v697 = *v11;
        }
        else
        {
          v902 = 0;
        }
        v897 = *(_QWORD *)&v697[2 * (v264 + 7)];
        v702 = *(_QWORD *)&v697[2 * (v264 | 8)];
        if ((_DWORD)v702)
          v703 = sub_1C50211EC((uint64_t)v999, (v702 - 1));
        else
          v703 = 0;
        v704 = sub_1C5020E68(a2, (llvm::MDNode *)v703);
        v705 = *v11;
        v893 = (uint64_t)v704;
        if (v266)
          v888 = *(_QWORD *)&v705[2 * (v265 | 0x10)];
        else
          LODWORD(v888) = 0;
        v885 = *(_QWORD *)&v705[2 * (v264 + 10)];
        v706 = *(_QWORD *)&v705[2 * (v265 + 13)];
        if ((_DWORD)v706)
        {
          v882 = sub_1C50211EC((uint64_t)v999, (v706 - 1));
          v705 = *v11;
        }
        else
        {
          v882 = 0;
        }
        v707 = *(_QWORD *)&v705[2 * (v265 + 14)];
        if ((_DWORD)v707)
        {
          v880 = sub_1C50211EC((uint64_t)v999, (v707 - 1));
          v705 = *v11;
        }
        else
        {
          v880 = 0;
        }
        v708 = *(_QWORD *)&v705[2 * (v265 + 15)];
        if ((_DWORD)v708)
          v709 = sub_1C50211EC((uint64_t)v999, (v708 - 1));
        else
          v709 = 0;
        if (v267 && (v710 = *(_QWORD *)&(*v11)[2 * (v265 + 17)], (_DWORD)v710))
          v711 = sub_1C50211EC((uint64_t)v999, (v710 - 1));
        else
          v711 = 0;
        v712 = v37 << 62;
        if (v938 && (v713 = *(_QWORD *)&(*v11)[2 * (v265 + 18)], (_DWORD)v713))
          v714 = sub_1C50211EC((uint64_t)v999, (v713 - 1));
        else
          v714 = 0;
        v715 = (unint64_t)v992 & (v712 >> 63);
        if (v975 && (v716 = *(_QWORD *)&(*v11)[2 * (v265 + 19)], (_DWORD)v716))
          v717 = sub_1C50211EC((uint64_t)v999, (v716 - 1));
        else
          v717 = 0;
        v718 = v953;
        v719 = (unsigned __int8 *)llvm::DISubprogram::getImpl(v946, v936, (uint64_t)v931, v925, v919, v911, v902, v897, v893, __SPAIR64__(v888, v885), __SPAIR64__(v40, v963), v715, (uint64_t)v882, (uint64_t)v880, (uint64_t)v709, (uint64_t)v711, (uint64_t)v714, (uint64_t)v717, 1,
                                    1);
      }
      else
      {
        if (v655)
          v657 = sub_1C50211EC((uint64_t)v999, (v655 - 1));
        else
          v657 = 0;
        v937 = sub_1C5020E68(a2, (llvm::MDNode *)v657);
        v762 = *v11;
        v763 = (*v11)[4];
        if (v763)
        {
          v932 = sub_1C50211EC((uint64_t)v999, (v763 - 1));
          v762 = *v11;
        }
        else
        {
          v932 = 0;
        }
        v764 = v762[6];
        if (v764)
        {
          v926 = sub_1C50211EC((uint64_t)v999, (v764 - 1));
          v762 = *v11;
        }
        else
        {
          v926 = 0;
        }
        v765 = v762[8];
        if (v765)
        {
          v920 = sub_1C50211EC((uint64_t)v999, (v765 - 1));
          v762 = *v11;
        }
        else
        {
          v920 = 0;
        }
        v912 = v762[10];
        v766 = v762[12];
        if (v766)
        {
          v903 = sub_1C50211EC((uint64_t)v999, (v766 - 1));
          v762 = *v11;
        }
        else
        {
          v903 = 0;
        }
        v898 = *(_QWORD *)&v762[2 * (v264 + 7)];
        v767 = *(_QWORD *)&v762[2 * (v264 | 8)];
        if ((_DWORD)v767)
          v768 = sub_1C50211EC((uint64_t)v999, (v767 - 1));
        else
          v768 = 0;
        v769 = sub_1C5020E68(a2, (llvm::MDNode *)v768);
        v770 = *v11;
        v894 = (uint64_t)v769;
        if (v266)
          v889 = *(_QWORD *)&v770[2 * (v265 | 0x10)];
        else
          LODWORD(v889) = 0;
        v886 = *(_QWORD *)&v770[2 * (v264 + 10)];
        v771 = *(_QWORD *)&v770[2 * (v265 + 13)];
        if ((_DWORD)v771)
        {
          v883 = sub_1C50211EC((uint64_t)v999, (v771 - 1));
          v770 = *v11;
        }
        else
        {
          v883 = 0;
        }
        v772 = *(_QWORD *)&v770[2 * (v265 + 14)];
        if ((_DWORD)v772)
        {
          v881 = sub_1C50211EC((uint64_t)v999, (v772 - 1));
          v770 = *v11;
        }
        else
        {
          v881 = 0;
        }
        v773 = *(_QWORD *)&v770[2 * (v265 + 15)];
        if ((_DWORD)v773)
          v774 = sub_1C50211EC((uint64_t)v999, (v773 - 1));
        else
          v774 = 0;
        if (v267 && (v775 = *(_QWORD *)&(*v11)[2 * (v265 + 17)], (_DWORD)v775))
          v776 = sub_1C50211EC((uint64_t)v999, (v775 - 1));
        else
          v776 = 0;
        v777 = v37 << 62;
        if (v938 && (v778 = *(_QWORD *)&(*v11)[2 * (v265 + 18)], (_DWORD)v778))
          v779 = sub_1C50211EC((uint64_t)v999, (v778 - 1));
        else
          v779 = 0;
        v780 = (unint64_t)v992 & (v777 >> 63);
        if (v975 && (v781 = *(_QWORD *)&(*v11)[2 * (v265 + 19)], (_DWORD)v781))
          v782 = sub_1C50211EC((uint64_t)v999, (v781 - 1));
        else
          v782 = 0;
        v718 = v953;
        v719 = (unsigned __int8 *)llvm::DISubprogram::getImpl(v946, v937, (uint64_t)v932, v926, v920, v912, v903, v898, v894, __SPAIR64__(v889, v886), __SPAIR64__(v40, v963), v780, (uint64_t)v883, (uint64_t)v881, (uint64_t)v774, (uint64_t)v776, (uint64_t)v779, (uint64_t)v782, 0,
                                    1);
      }
      v783 = (llvm::MDNode *)v719;
      sub_1C501EF04(a2, v719, *v10);
      ++*v10;
      if (v992)
        v784 = v718;
      else
        v784 = 0;
      if (v784 && *v992 == 1)
      {
        v785 = *(_BYTE *)(*((_QWORD *)v992 + 16) + 16) ? 0 : *((_QWORD *)v992 + 16);
        *(_QWORD *)&v1002 = v785;
        if (v785)
        {
          if ((*(_BYTE *)(v785 + 34) & 0x80) != 0)
          {
            sub_1C61D2364((_DWORD *)(a2 + 680), (uint64_t *)&v1002)[1] = v783;
          }
          else if (*(_QWORD *)(v785 + 72) != v785 + 72)
          {
            llvm::Value::setMetadata((llvm::Value *)v785, 0, v783);
          }
        }
      }
      goto LABEL_1168;
    case 22:
      if (*((_DWORD *)a3 + 2) != 5)
        goto LABEL_299;
      v83 = (uint64_t *)*a3;
      v84 = *(_QWORD *)*a3;
      v1000 = v84 != 0;
      v85 = *(_QWORD **)(a2 + 208);
      v86 = *((_DWORD *)v83 + 2);
      if (v84)
      {
        if (v86)
        {
          v87 = sub_1C50211EC((uint64_t)v999, (v86 - 1));
          v83 = (uint64_t *)*v11;
        }
        else
        {
          v87 = 0;
        }
        v425 = *((_DWORD *)v83 + 4);
        if (v425)
        {
          v426 = sub_1C50211EC((uint64_t)v999, (v425 - 1));
          v83 = (uint64_t *)*v11;
        }
        else
        {
          v426 = 0;
        }
        v431 = *((_DWORD *)v83 + 6);
        v432 = *((_DWORD *)v83 + 8);
        v433 = v85;
        v434 = (uint64_t)v87;
        v435 = 1;
      }
      else
      {
        if (v86)
        {
          v287 = sub_1C50211EC((uint64_t)v999, (v86 - 1));
          v83 = (uint64_t *)*v11;
        }
        else
        {
          v287 = 0;
        }
        v580 = *((_DWORD *)v83 + 4);
        if (v580)
        {
          v426 = sub_1C50211EC((uint64_t)v999, (v580 - 1));
          v83 = (uint64_t *)*v11;
        }
        else
        {
          v426 = 0;
        }
        v431 = *((_DWORD *)v83 + 6);
        v432 = *((_DWORD *)v83 + 8);
        v433 = v85;
        v434 = (uint64_t)v287;
        v435 = 0;
      }
      Impl = (uint64_t)llvm::DILexicalBlock::getImpl(v433, v434, (uint64_t)v426, v431, v432, v435, 1);
      goto LABEL_1165;
    case 23:
      if (*((_DWORD *)a3 + 2) != 4)
        goto LABEL_299;
      v194 = (uint64_t *)*a3;
      v195 = *(_QWORD *)*a3;
      v1000 = v195 != 0;
      v196 = *(_QWORD **)(a2 + 208);
      v197 = *((_DWORD *)v194 + 2);
      if (v195)
      {
        if (v197)
        {
          v198 = sub_1C50211EC((uint64_t)v999, (v197 - 1));
          v194 = (uint64_t *)*v11;
        }
        else
        {
          v198 = 0;
        }
        v476 = *((_DWORD *)v194 + 4);
        if (v476)
        {
          v477 = sub_1C50211EC((uint64_t)v999, (v476 - 1));
          v194 = (uint64_t *)*v11;
        }
        else
        {
          v477 = 0;
        }
        v478 = *((_DWORD *)v194 + 6);
        v479 = v196;
        v480 = (uint64_t)v198;
        v481 = 1;
      }
      else
      {
        if (v197)
        {
          v343 = sub_1C50211EC((uint64_t)v999, (v197 - 1));
          v194 = (uint64_t *)*v11;
        }
        else
        {
          v343 = 0;
        }
        v621 = *((_DWORD *)v194 + 4);
        if (v621)
        {
          v477 = sub_1C50211EC((uint64_t)v999, (v621 - 1));
          v194 = (uint64_t *)*v11;
        }
        else
        {
          v477 = 0;
        }
        v478 = *((_DWORD *)v194 + 6);
        v479 = v196;
        v480 = (uint64_t)v343;
        v481 = 0;
      }
      Impl = (uint64_t)llvm::DILexicalBlockFile::getImpl(v479, v480, (uint64_t)v477, v478, v481, 1);
      goto LABEL_1165;
    case 24:
      v41 = *((_DWORD *)a3 + 2);
      if (v41 == 5)
      {
        v42 = (uint64_t *)*a3;
        v43 = (*a3)[6];
        if (v43)
        {
LABEL_31:
          v44 = sub_1C50211EC((uint64_t)v999, (v43 - 1));
          v42 = (uint64_t *)*v11;
          goto LABEL_253;
        }
      }
      else
      {
        if (v41 != 3)
          goto LABEL_299;
        v42 = (uint64_t *)*a3;
        v43 = (*a3)[4];
        if (v43)
          goto LABEL_31;
      }
      v44 = 0;
LABEL_253:
      v239 = *v42;
      v1000 = *(_BYTE *)v42 & 1;
      v240 = *(_QWORD **)(a2 + 208);
      v241 = *((_DWORD *)v42 + 2);
      if ((v239 & 1) != 0)
      {
        if (v241)
          v242 = sub_1C50211EC((uint64_t)v999, (v241 - 1));
        else
          v242 = 0;
        v382 = (v239 >> 1) & 1;
        v383 = v240;
        v384 = (uint64_t)v44;
        v385 = 1;
      }
      else
      {
        if (v241)
          v242 = sub_1C50211EC((uint64_t)v999, (v241 - 1));
        else
          v242 = 0;
        v382 = (v239 >> 1) & 1;
        v383 = v240;
        v384 = (uint64_t)v44;
        v385 = 0;
      }
      Impl = (uint64_t)llvm::DINamespace::getImpl(v383, (uint64_t)v242, v384, v382, v385, 1);
      goto LABEL_1165;
    case 25:
      if ((*((_DWORD *)a3 + 2) - 5) <= 0xFFFFFFFD)
        goto LABEL_299;
      v74 = (uint64_t *)*a3;
      v75 = *(_QWORD *)*a3;
      v1000 = v75 != 0;
      v76 = *(_QWORD **)(a2 + 208);
      v77 = *((_DWORD *)v74 + 2);
      if (v75)
      {
        if (v77)
        {
          v78 = sub_1C50211EC((uint64_t)v999, (v77 - 1));
          v74 = (uint64_t *)*v11;
        }
        else
        {
          v78 = 0;
        }
        v416 = *((_DWORD *)v74 + 4);
        if (v416)
          v417 = sub_1C50211EC((uint64_t)v999, (v416 - 1));
        else
          v417 = 0;
        v418 = sub_1C5020E68(a2, (llvm::MDNode *)v417);
        v420 = *((_DWORD *)v11 + 2) == 4
            && (v419 = (*v11)[6]) != 0
            && sub_1C50211EC((uint64_t)v999, (v419 - 1)) != 0;
        v421 = v76;
        v422 = (uint64_t)v78;
        v423 = (uint64_t)v418;
        v424 = 1;
      }
      else
      {
        if (v77)
        {
          v285 = sub_1C50211EC((uint64_t)v999, (v77 - 1));
          v74 = (uint64_t *)*v11;
        }
        else
        {
          v285 = 0;
        }
        v578 = *((_DWORD *)v74 + 4);
        if (v578)
          v579 = sub_1C50211EC((uint64_t)v999, (v578 - 1));
        else
          v579 = 0;
        v581 = sub_1C5020E68(a2, (llvm::MDNode *)v579);
        v420 = *((_DWORD *)v11 + 2) == 4
            && (v582 = (*v11)[6]) != 0
            && sub_1C50211EC((uint64_t)v999, (v582 - 1)) != 0;
        v421 = v76;
        v422 = (uint64_t)v285;
        v423 = (uint64_t)v581;
        v424 = 0;
      }
      Impl = (uint64_t)llvm::DITemplateTypeParameter::getImpl(v421, v422, v423, v420, v424, 1);
      goto LABEL_1165;
    case 26:
      if ((*((_DWORD *)a3 + 2) - 7) <= 0xFFFFFFFD)
        goto LABEL_299;
      v61 = (uint64_t *)*a3;
      v62 = *(_QWORD *)*a3;
      v1000 = v62 != 0;
      v63 = *(_QWORD **)(a2 + 208);
      v64 = *((_DWORD *)v61 + 2);
      v65 = *((_DWORD *)v61 + 4);
      if (v62)
      {
        if (v65)
        {
          v66 = sub_1C50211EC((uint64_t)v999, (v65 - 1));
          v61 = (uint64_t *)*v11;
        }
        else
        {
          v66 = 0;
        }
        v401 = *((_DWORD *)v61 + 6);
        if (v401)
          v402 = sub_1C50211EC((uint64_t)v999, (v401 - 1));
        else
          v402 = 0;
        v403 = sub_1C5020E68(a2, (llvm::MDNode *)v402);
        v404 = *v11;
        if (*((_DWORD *)v11 + 2) == 6)
        {
          v405 = v404[8];
          if (!v405)
          {
            v406 = 0;
            goto LABEL_877;
          }
          v406 = sub_1C50211EC((uint64_t)v999, (v405 - 1)) != 0;
          v404 = *v11;
          if (*((_DWORD *)v11 + 2) == 6)
          {
LABEL_877:
            v407 = v404[10];
            if (!v407)
              goto LABEL_878;
            goto LABEL_549;
          }
        }
        else
        {
          v406 = 0;
        }
        v407 = v404[8];
        if (!v407)
        {
LABEL_878:
          v408 = 0;
          goto LABEL_879;
        }
LABEL_549:
        v408 = sub_1C50211EC((uint64_t)v999, (v407 - 1));
LABEL_879:
        v634 = v63;
        v635 = v64;
        v636 = (uint64_t)v66;
        v637 = (uint64_t)v403;
        v638 = v406;
        v639 = 1;
        goto LABEL_969;
      }
      if (v65)
      {
        v284 = sub_1C50211EC((uint64_t)v999, (v65 - 1));
        v61 = (uint64_t *)*v11;
      }
      else
      {
        v284 = 0;
      }
      v564 = *((_DWORD *)v61 + 6);
      if (v564)
        v565 = sub_1C50211EC((uint64_t)v999, (v564 - 1));
      else
        v565 = 0;
      v566 = sub_1C5020E68(a2, (llvm::MDNode *)v565);
      v567 = *v11;
      if (*((_DWORD *)v11 + 2) == 6)
      {
        v568 = v567[8];
        if (!v568)
        {
          v569 = 0;
          goto LABEL_966;
        }
        v569 = sub_1C50211EC((uint64_t)v999, (v568 - 1)) != 0;
        v567 = *v11;
        if (*((_DWORD *)v11 + 2) == 6)
        {
LABEL_966:
          v570 = v567[10];
          if (!v570)
            goto LABEL_967;
          goto LABEL_764;
        }
      }
      else
      {
        v569 = 0;
      }
      v570 = v567[8];
      if (!v570)
      {
LABEL_967:
        v408 = 0;
LABEL_968:
        v634 = v63;
        v635 = v64;
        v636 = (uint64_t)v284;
        v637 = (uint64_t)v566;
        v638 = v569;
        v639 = 0;
LABEL_969:
        Impl = (uint64_t)llvm::DITemplateValueParameter::getImpl(v634, v635, v636, v637, v638, (uint64_t)v408, v639, 1);
        goto LABEL_1165;
      }
LABEL_764:
      v408 = sub_1C50211EC((uint64_t)v999, (v570 - 1));
      goto LABEL_968;
    case 27:
      v109 = *((_DWORD *)a3 + 2);
      if (v109 - 14 <= 0xFFFFFFFC)
        goto LABEL_299;
      v110 = (uint64_t *)*a3;
      v111 = *(_QWORD *)*a3;
      v112 = v111 & 1;
      v1000 = *(_BYTE *)*a3 & 1;
      v113 = v111 >> 1;
      if ((_DWORD)v113)
      {
        if ((_DWORD)v113 == 1)
        {
          v388 = *(_QWORD **)(a2 + 208);
          v389 = *((_DWORD *)v110 + 2);
          if (v112)
          {
            if (v389)
            {
              v990 = sub_1C50211EC((uint64_t)v999, (v389 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v990 = 0;
            }
            v738 = *((_DWORD *)v110 + 4);
            if (v738)
            {
              v981 = sub_1C50211EC((uint64_t)v999, (v738 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v981 = 0;
            }
            v740 = *((_DWORD *)v110 + 6);
            if (v740)
            {
              v969 = sub_1C50211EC((uint64_t)v999, (v740 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v969 = 0;
            }
            v743 = *((_DWORD *)v110 + 8);
            if (v743)
            {
              v742 = sub_1C50211EC((uint64_t)v999, (v743 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v742 = 0;
            }
            v744 = *((_DWORD *)v110 + 10);
            v747 = *((_DWORD *)v110 + 12);
            if (v747)
              v748 = sub_1C50211EC((uint64_t)v999, (v747 - 1));
            else
              v748 = 0;
            v749 = sub_1C5020E68(a2, (llvm::MDNode *)v748);
            v755 = *v11;
            v756 = *((_QWORD *)*v11 + 7);
            v757 = *((_QWORD *)*v11 + 8);
            v758 = (*v11)[20];
            if (v758)
            {
              v754 = sub_1C50211EC((uint64_t)v999, (v758 - 1));
              v755 = *v11;
            }
            else
            {
              v754 = 0;
            }
            v759 = v757 != 0;
            v760 = v756 != 0;
            v761 = *((_QWORD *)v755 + 11);
            v878[4] = 1;
            *(_DWORD *)v878 = 1;
          }
          else
          {
            if (v389)
            {
              v990 = sub_1C50211EC((uint64_t)v999, (v389 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v990 = 0;
            }
            v736 = *((_DWORD *)v110 + 4);
            if (v736)
            {
              v981 = sub_1C50211EC((uint64_t)v999, (v736 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v981 = 0;
            }
            v739 = *((_DWORD *)v110 + 6);
            if (v739)
            {
              v969 = sub_1C50211EC((uint64_t)v999, (v739 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v969 = 0;
            }
            v741 = *((_DWORD *)v110 + 8);
            if (v741)
            {
              v742 = sub_1C50211EC((uint64_t)v999, (v741 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v742 = 0;
            }
            v744 = *((_DWORD *)v110 + 10);
            v745 = *((_DWORD *)v110 + 12);
            if (v745)
              v746 = sub_1C50211EC((uint64_t)v999, (v745 - 1));
            else
              v746 = 0;
            v749 = sub_1C5020E68(a2, (llvm::MDNode *)v746);
            v750 = *v11;
            v751 = *((_QWORD *)*v11 + 7);
            v752 = *((_QWORD *)*v11 + 8);
            v753 = (*v11)[20];
            if (v753)
            {
              v754 = sub_1C50211EC((uint64_t)v999, (v753 - 1));
              v750 = *v11;
            }
            else
            {
              v754 = 0;
            }
            v759 = v752 != 0;
            v760 = v751 != 0;
            v761 = *((_QWORD *)v750 + 11);
            v878[4] = 1;
            *(_DWORD *)v878 = 0;
          }
          Impl = (uint64_t)llvm::DIGlobalVariable::getImpl(v388, (uint64_t)v990, (uint64_t)v981, (uint64_t)v969, (uint64_t)v742, v744, (uint64_t)v749, v760, v759, (uint64_t)v754, 0, v761, 0, *(int *)v878, v878[4]);
        }
        else
        {
          if ((_DWORD)v113 != 2)
          {
LABEL_299:
            v69 = "Invalid record";
            goto LABEL_300;
          }
          if (v109 >= 0xD && (v114 = *((_DWORD *)v110 + 24)) != 0)
          {
            v985 = sub_1C50211EC((uint64_t)v999, (v114 - 1));
            v112 = v1000;
            v110 = (uint64_t *)*v11;
          }
          else
          {
            v985 = 0;
          }
          v559 = *((_DWORD *)v110 + 2);
          v979 = *(_QWORD **)(a2 + 208);
          if (v112)
          {
            if (v559)
            {
              v966 = sub_1C50211EC((uint64_t)v999, (v559 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v966 = 0;
            }
            v720 = *((_DWORD *)v110 + 4);
            if (v720)
            {
              v956 = sub_1C50211EC((uint64_t)v999, (v720 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v956 = 0;
            }
            v721 = *((_DWORD *)v110 + 6);
            if (v721)
            {
              v947 = sub_1C50211EC((uint64_t)v999, (v721 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v947 = 0;
            }
            v722 = *((_DWORD *)v110 + 8);
            if (v722)
            {
              v723 = sub_1C50211EC((uint64_t)v999, (v722 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v723 = 0;
            }
            v724 = *((_DWORD *)v110 + 10);
            v725 = *((_DWORD *)v110 + 12);
            if (v725)
              v726 = sub_1C50211EC((uint64_t)v999, (v725 - 1));
            else
              v726 = 0;
            v727 = sub_1C5020E68(a2, (llvm::MDNode *)v726);
            v728 = *v11;
            v729 = *((_QWORD *)*v11 + 7);
            v730 = *((_QWORD *)*v11 + 8);
            v731 = (*v11)[18];
            if (v731)
            {
              v732 = sub_1C50211EC((uint64_t)v999, (v731 - 1));
              v728 = *v11;
            }
            else
            {
              v732 = 0;
            }
            v733 = v728[20];
            if (v733)
            {
              v734 = sub_1C50211EC((uint64_t)v999, (v733 - 1));
              v728 = *v11;
            }
            else
            {
              v734 = 0;
            }
            Impl = (uint64_t)llvm::DIGlobalVariable::getImpl(v979, (uint64_t)v966, (uint64_t)v956, (uint64_t)v947, (uint64_t)v723, v724, (uint64_t)v727, v729 != 0, v730 != 0, (uint64_t)v732, (uint64_t)v734, *((_QWORD *)v728 + 11), (uint64_t)v985, 1, 1);
          }
          else
          {
            if (v559)
            {
              v968 = sub_1C50211EC((uint64_t)v999, (v559 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v968 = 0;
            }
            v786 = *((_DWORD *)v110 + 4);
            if (v786)
            {
              v957 = sub_1C50211EC((uint64_t)v999, (v786 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v957 = 0;
            }
            v787 = *((_DWORD *)v110 + 6);
            if (v787)
            {
              v948 = sub_1C50211EC((uint64_t)v999, (v787 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v948 = 0;
            }
            v788 = *((_DWORD *)v110 + 8);
            if (v788)
            {
              v789 = sub_1C50211EC((uint64_t)v999, (v788 - 1));
              v110 = (uint64_t *)*v11;
            }
            else
            {
              v789 = 0;
            }
            v790 = *((_DWORD *)v110 + 10);
            v791 = *((_DWORD *)v110 + 12);
            if (v791)
              v792 = sub_1C50211EC((uint64_t)v999, (v791 - 1));
            else
              v792 = 0;
            v793 = sub_1C5020E68(a2, (llvm::MDNode *)v792);
            v794 = *v11;
            v795 = *((_QWORD *)*v11 + 7);
            v796 = *((_QWORD *)*v11 + 8);
            v797 = (*v11)[18];
            if (v797)
            {
              v798 = sub_1C50211EC((uint64_t)v999, (v797 - 1));
              v794 = *v11;
            }
            else
            {
              v798 = 0;
            }
            v799 = v794[20];
            if (v799)
            {
              v800 = sub_1C50211EC((uint64_t)v999, (v799 - 1));
              v794 = *v11;
            }
            else
            {
              v800 = 0;
            }
            Impl = (uint64_t)llvm::DIGlobalVariable::getImpl(v979, (uint64_t)v968, (uint64_t)v957, (uint64_t)v948, (uint64_t)v789, v790, (uint64_t)v793, v795 != 0, v796 != 0, (uint64_t)v798, (uint64_t)v800, *((_QWORD *)v794 + 11), (uint64_t)v985, 0, 1);
          }
        }
LABEL_1165:
        v801 = (unsigned __int8 *)Impl;
LABEL_1166:
        v802 = *v10;
        v803 = a2;
        goto LABEL_1167;
      }
      *(_BYTE *)(a2 + 970) = 1;
      v390 = *((_DWORD *)v110 + 18);
      if (v390)
      {
        v391 = (unint64_t)sub_1C50211EC((uint64_t)v999, (v390 - 1));
        v109 = *((_DWORD *)v11 + 2);
      }
      else
      {
        v391 = 0;
      }
      if (v109 < 0xC)
      {
        LODWORD(v662) = 0;
      }
      else
      {
        v662 = *((_QWORD *)*v11 + 11);
        if (HIDWORD(v662))
          goto LABEL_359;
      }
      v980 = v662;
      if (!v391 || *(_BYTE *)v391 != 1)
        goto LABEL_1206;
      v663 = *(_QWORD *)(v391 + 128);
      v664 = *(unsigned __int8 *)(v663 + 16);
      if (v663 && v664 == 3)
      {
        v391 = 0;
      }
      else
      {
        if (v664 == 16)
        {
          v825 = *(_QWORD **)(a2 + 208);
          *(_QWORD *)&v1002 = 16;
          v826 = (_QWORD *)(v663 + 24);
          if (*(_DWORD *)(v663 + 32) >= 0x41u)
            v826 = (_QWORD *)*v826;
          *((_QWORD *)&v1002 + 1) = *v826;
          v1003[0] = 159;
          v391 = (unint64_t)llvm::DIExpression::getImpl(v825, &v1002, 3, 0, 1);
        }
        else
        {
          v391 = 0;
        }
LABEL_1206:
        v663 = 0;
      }
      v971 = *(_QWORD **)(a2 + 208);
      v833 = *v11;
      v834 = (*v11)[2];
      v994 = (llvm::Value *)v663;
      if (v1000)
      {
        if (v834)
        {
          v959 = sub_1C50211EC((uint64_t)v999, (v834 - 1));
          v833 = *v11;
        }
        else
        {
          v959 = 0;
        }
        v835 = v833[4];
        if (v835)
        {
          v950 = sub_1C50211EC((uint64_t)v999, (v835 - 1));
          v833 = *v11;
        }
        else
        {
          v950 = 0;
        }
        v836 = v833[6];
        if (v836)
        {
          v837 = sub_1C50211EC((uint64_t)v999, (v836 - 1));
          v833 = *v11;
        }
        else
        {
          v837 = 0;
        }
        v838 = v833[8];
        if (v838)
        {
          v839 = sub_1C50211EC((uint64_t)v999, (v838 - 1));
          v833 = *v11;
        }
        else
        {
          v839 = 0;
        }
        v840 = v833[10];
        v841 = v833[12];
        if (v841)
          v842 = sub_1C50211EC((uint64_t)v999, (v841 - 1));
        else
          v842 = 0;
        v843 = sub_1C5020E68(a2, (llvm::MDNode *)v842);
        v844 = *v11;
        v845 = *((_QWORD *)*v11 + 7);
        v846 = *((_QWORD *)v844 + 8);
        v847 = v844[20];
        if (v847)
          v848 = sub_1C50211EC((uint64_t)v999, (v847 - 1));
        else
          v848 = 0;
        v849 = llvm::DIGlobalVariable::getImpl(v971, (uint64_t)v959, (uint64_t)v950, (uint64_t)v837, (uint64_t)v839, v840, (uint64_t)v843, v845 != 0, v846 != 0, (uint64_t)v848, 0, v980, 0, 1, 1);
      }
      else
      {
        if (v834)
        {
          v960 = sub_1C50211EC((uint64_t)v999, (v834 - 1));
          v833 = *v11;
        }
        else
        {
          v960 = 0;
        }
        v850 = v833[4];
        if (v850)
        {
          v951 = sub_1C50211EC((uint64_t)v999, (v850 - 1));
          v833 = *v11;
        }
        else
        {
          v951 = 0;
        }
        v851 = v833[6];
        if (v851)
        {
          v852 = sub_1C50211EC((uint64_t)v999, (v851 - 1));
          v833 = *v11;
        }
        else
        {
          v852 = 0;
        }
        v853 = v833[8];
        if (v853)
        {
          v854 = sub_1C50211EC((uint64_t)v999, (v853 - 1));
          v833 = *v11;
        }
        else
        {
          v854 = 0;
        }
        v855 = v833[10];
        v856 = v833[12];
        if (v856)
          v857 = sub_1C50211EC((uint64_t)v999, (v856 - 1));
        else
          v857 = 0;
        v858 = sub_1C5020E68(a2, (llvm::MDNode *)v857);
        v859 = *v11;
        v860 = *((_QWORD *)*v11 + 7);
        v861 = *((_QWORD *)v859 + 8);
        v862 = v859[20];
        if (v862)
          v863 = sub_1C50211EC((uint64_t)v999, (v862 - 1));
        else
          v863 = 0;
        v849 = llvm::DIGlobalVariable::getImpl(v971, (uint64_t)v960, (uint64_t)v951, (uint64_t)v852, (uint64_t)v854, v855, (uint64_t)v858, v860 != 0, v861 != 0, (uint64_t)v863, 0, v980, 0, 0, 1);
      }
      v864 = (uint64_t)v849;
      if ((unint64_t)v994 | v391)
      {
        v865 = *(_QWORD **)(a2 + 208);
        v866 = (llvm::MDNode *)v391;
        if (!v391)
          v866 = llvm::DIExpression::getImpl(*(_QWORD **)(a2 + 208), 0, 0, 0, 1);
        v867 = llvm::DIGlobalVariableExpression::getImpl(v865, v864, (uint64_t)v866, 1, 1);
        if (v994)
          llvm::Value::addMetadata(v994, 0, v867);
      }
      else
      {
        v867 = 0;
      }
      if (v391)
        v801 = (unsigned __int8 *)v867;
      else
        v801 = (unsigned __int8 *)v864;
      goto LABEL_1166;
    case 28:
      v51 = *((_DWORD *)a3 + 2);
      if (v51 - 11 <= 0xFFFFFFFC)
        goto LABEL_299;
      v52 = (uint64_t *)*a3;
      v53 = *(_QWORD *)*a3;
      v54 = v53 & 1;
      v1000 = *(_BYTE *)*a3 & 1;
      v55 = v51 > 8 && (v53 & 2) == 0;
      v56 = 7;
      if (v55)
        v56 = 8;
      v57 = v52[v56];
      if ((v53 & 2) != 0)
      {
        v58 = v52[8];
        if (HIDWORD(v58))
        {
LABEL_359:
          v69 = "Alignment value is too large";
          goto LABEL_300;
        }
        if (v51 >= 0xA)
        {
          v268 = *((_DWORD *)v52 + 18);
          if (v268)
          {
            v983 = sub_1C50211EC((uint64_t)v999, (v268 - 1));
            v54 = v1000;
            v52 = (uint64_t *)*v11;
LABEL_47:
            v972 = *(_QWORD **)(a2 + 208);
            v59 = 1;
            if (v55)
              v59 = 2;
            v60 = v52[v59];
            if (v54)
            {
              if (v60)
              {
                v961 = sub_1C50211EC((uint64_t)v999, (v60 - 1));
                v52 = (uint64_t *)*v11;
              }
              else
              {
                v961 = 0;
              }
              v547 = v52[v55 | 2u];
              if ((_DWORD)v547)
              {
                v548 = sub_1C50211EC((uint64_t)v999, (v547 - 1));
                v52 = (uint64_t *)*v11;
              }
              else
              {
                v548 = 0;
              }
              v549 = v58;
              v550 = 3;
              if (v55)
                v550 = 4;
              v551 = v52[v550];
              v552 = v57;
              if (v551)
              {
                v553 = sub_1C50211EC((uint64_t)v999, (v551 - 1));
                v52 = (uint64_t *)*v11;
              }
              else
              {
                v553 = 0;
              }
              v554 = v52[v55 | 4u];
              v555 = 5;
              if (v55)
                v555 = 6;
              v556 = v52[v555];
              if (v556)
                v557 = sub_1C50211EC((uint64_t)v999, (v556 - 1));
              else
                v557 = 0;
              v558 = sub_1C5020E68(a2, (llvm::MDNode *)v557);
              Impl = (uint64_t)llvm::DILocalVariable::getImpl(v972, (uint64_t)v961, (uint64_t)v548, (uint64_t)v553, v554, (uint64_t)v558, *(_QWORD *)&(*v11)[2 * (v55 | 6)], v552, v549, (uint64_t)v983, 1, 1);
            }
            else
            {
              if (v60)
              {
                v965 = sub_1C50211EC((uint64_t)v999, (v60 - 1));
                v52 = (uint64_t *)*v11;
              }
              else
              {
                v965 = 0;
              }
              v645 = v52[v55 | 2u];
              if ((_DWORD)v645)
              {
                v646 = sub_1C50211EC((uint64_t)v999, (v645 - 1));
                v52 = (uint64_t *)*v11;
              }
              else
              {
                v646 = 0;
              }
              v647 = 3;
              if (v55)
                v647 = 4;
              v648 = v52[v647];
              if (v648)
              {
                v649 = sub_1C50211EC((uint64_t)v999, (v648 - 1));
                v52 = (uint64_t *)*v11;
              }
              else
              {
                v649 = 0;
              }
              v650 = v52[v55 | 4u];
              v651 = 5;
              if (v55)
                v651 = 6;
              v652 = v52[v651];
              if (v652)
                v653 = sub_1C50211EC((uint64_t)v999, (v652 - 1));
              else
                v653 = 0;
              v654 = sub_1C5020E68(a2, (llvm::MDNode *)v653);
              Impl = (uint64_t)llvm::DILocalVariable::getImpl(v972, (uint64_t)v965, (uint64_t)v646, (uint64_t)v649, v650, (uint64_t)v654, *(_QWORD *)&(*v11)[2 * (v55 | 6)], v57, v58, (uint64_t)v983, 0, 1);
            }
            goto LABEL_1165;
          }
        }
      }
      else
      {
        LODWORD(v58) = 0;
      }
      v983 = 0;
      goto LABEL_47;
    case 29:
      v204 = *((unsigned int *)a3 + 2);
      if (!(_DWORD)v204)
        goto LABEL_299;
      v205 = (uint64_t *)*a3;
      v207 = (uint64_t *)(*a3 + 2);
      v206 = *(_QWORD *)*a3;
      v208 = v206 & 1;
      v1000 = *(_BYTE *)*a3 & 1;
      *(_QWORD *)&v1002 = v1003;
      *((_QWORD *)&v1002 + 1) = 0x600000000;
      v209 = v204 - 1;
      switch(v206 >> 1)
      {
        case 0uLL:
          if (v209 < 3)
            goto LABEL_422;
          if (v207[v204 - 4] == 157)
            v207[v204 - 4] = 4096;
          goto LABEL_423;
        case 1uLL:
LABEL_422:
          if (v204 != 1)
          {
LABEL_423:
            if (*v207 == 6)
            {
              v344 = &v205[v204];
              if (v209 >= 3 && *(v344 - 3) == 4096)
                v344 -= 3;
              if (v344 != v205 + 2)
                memmove(v207, v205 + 2, (char *)v344 - (char *)(v205 + 2));
              *(v344 - 1) = 6;
            }
          }
          *(_BYTE *)(a2 + 971) = 1;
          goto LABEL_431;
        case 2uLL:
LABEL_431:
          if (!v209)
          {
            v207 = v1003;
LABEL_505:
            v209 = DWORD2(v1002);
LABEL_506:
            *v9 = 0;
            v379 = (unsigned __int8 *)llvm::DIExpression::getImpl(*(_QWORD **)(a2 + 208), v207, v209, v208, 1);
            sub_1C501EF04(a2, v379, *v10);
            ++*v10;
            v217 = (void *)v1002;
            if ((_QWORD *)v1002 != v1003)
LABEL_216:
              free(v217);
            goto LABEL_1168;
          }
          break;
        case 3uLL:
          goto LABEL_506;
        default:
          v1007 = (unsigned __int8 **)"Invalid record";
          v1010 = 259;
          if (!atomic_load(qword_1EF8F6CB0))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
          v399 = qword_1EF8F6CB0[0];
          v400 = operator new();
          *(_QWORD *)v400 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v1007, (_QWORD *)(v400 + 8));
          *(_QWORD *)(v400 + 32) = 1;
          *(_QWORD *)(v400 + 40) = v399;
          *(_BYTE *)(v400 + 48) = 1;
          *v9 = v400;
          v364 = (void *)v1002;
          if ((_QWORD *)v1002 != v1003)
            goto LABEL_479;
          return;
      }
      while (1)
      {
        v345 = *v207;
        if ((unint64_t)*v207 > 0x22 || ((1 << *v207) & 0x410010000) == 0)
        {
          if (v345 == 4096)
          {
            if (v209 >= 3)
              v348 = 3;
            else
              v348 = v209;
            v349 = v207 + 1;
LABEL_451:
            v351 = DWORD2(v1002);
            if (DWORD2(v1002) >= (unint64_t)HIDWORD(v1002))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, DWORD2(v1002) + 1, 8);
              v351 = DWORD2(v1002);
            }
            *(_QWORD *)(v1002 + 8 * v351) = v345;
            goto LABEL_454;
          }
          v347 = 1;
        }
        else
        {
          v347 = 2;
        }
        if (v347 >= v209)
          v348 = v209;
        else
          v348 = v347;
        v349 = v207 + 1;
        if (v345 == 28)
        {
          v352 = DWORD2(v1002);
          if (DWORD2(v1002) >= (unint64_t)HIDWORD(v1002))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, DWORD2(v1002) + 1, 8);
            v352 = DWORD2(v1002);
          }
          *(_QWORD *)(v1002 + 8 * v352) = 16;
          ++DWORD2(v1002);
          sub_1C4DFE610((unsigned int *)&v1002, (_BYTE *)v207 + 8, &v207[v348]);
          v353 = DWORD2(v1002);
          if (DWORD2(v1002) >= (unint64_t)HIDWORD(v1002))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, DWORD2(v1002) + 1, 8);
            v353 = DWORD2(v1002);
          }
          *(_QWORD *)(v1002 + 8 * v353) = 28;
          ++DWORD2(v1002);
          goto LABEL_460;
        }
        if (v345 != 34)
          goto LABEL_451;
        v350 = DWORD2(v1002);
        if (DWORD2(v1002) >= (unint64_t)HIDWORD(v1002))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, DWORD2(v1002) + 1, 8);
          v350 = DWORD2(v1002);
        }
        *(_QWORD *)(v1002 + 8 * v350) = 35;
LABEL_454:
        ++DWORD2(v1002);
        sub_1C4DFE610((unsigned int *)&v1002, v349, &v207[v348]);
LABEL_460:
        v207 += v348;
        v209 -= v348;
        if (!v209)
        {
          v207 = (uint64_t *)v1002;
          v208 = v1000;
          goto LABEL_505;
        }
      }
    case 30:
      if (*((_DWORD *)a3 + 2) != 8)
        goto LABEL_299;
      v199 = (uint64_t *)*a3;
      v200 = *(_QWORD *)*a3;
      v1000 = v200 != 0;
      v201 = *(_QWORD **)(a2 + 208);
      v202 = *((_DWORD *)v199 + 2);
      if (v200)
      {
        if (v202)
        {
          v203 = sub_1C50211EC((uint64_t)v999, (v202 - 1));
          v199 = (uint64_t *)*v11;
        }
        else
        {
          v203 = 0;
        }
        v482 = *((_DWORD *)v199 + 4);
        if (v482)
        {
          v483 = sub_1C50211EC((uint64_t)v999, (v482 - 1));
          v199 = (uint64_t *)*v11;
        }
        else
        {
          v483 = 0;
        }
        v484 = *((_DWORD *)v199 + 6);
        v485 = *((_DWORD *)v199 + 8);
        if (v485)
        {
          v486 = sub_1C50211EC((uint64_t)v999, (v485 - 1));
          v199 = (uint64_t *)*v11;
        }
        else
        {
          v486 = 0;
        }
        v487 = *((_DWORD *)v199 + 10);
        if (v487)
        {
          v488 = sub_1C50211EC((uint64_t)v999, (v487 - 1));
          v199 = (uint64_t *)*v11;
        }
        else
        {
          v488 = 0;
        }
        v489 = *((_DWORD *)v199 + 12);
        v490 = *((_DWORD *)v199 + 14);
        if (v490)
          v491 = sub_1C50211EC((uint64_t)v999, (v490 - 1));
        else
          v491 = 0;
        v492 = sub_1C5020E68(a2, (llvm::MDNode *)v491);
        Impl = (uint64_t)llvm::DIObjCProperty::getImpl(v201, (uint64_t)v203, (uint64_t)v483, v484, (uint64_t)v486, (uint64_t)v488, v489, (uint64_t)v492, 1, 1);
      }
      else
      {
        if (v202)
        {
          v354 = sub_1C50211EC((uint64_t)v999, (v202 - 1));
          v199 = (uint64_t *)*v11;
        }
        else
        {
          v354 = 0;
        }
        v622 = *((_DWORD *)v199 + 4);
        if (v622)
        {
          v623 = sub_1C50211EC((uint64_t)v999, (v622 - 1));
          v199 = (uint64_t *)*v11;
        }
        else
        {
          v623 = 0;
        }
        v624 = *((_DWORD *)v199 + 6);
        v625 = *((_DWORD *)v199 + 8);
        if (v625)
        {
          v626 = sub_1C50211EC((uint64_t)v999, (v625 - 1));
          v199 = (uint64_t *)*v11;
        }
        else
        {
          v626 = 0;
        }
        v627 = *((_DWORD *)v199 + 10);
        if (v627)
        {
          v628 = sub_1C50211EC((uint64_t)v999, (v627 - 1));
          v199 = (uint64_t *)*v11;
        }
        else
        {
          v628 = 0;
        }
        v629 = *((_DWORD *)v199 + 12);
        v630 = *((_DWORD *)v199 + 14);
        if (v630)
          v631 = sub_1C50211EC((uint64_t)v999, (v630 - 1));
        else
          v631 = 0;
        v632 = sub_1C5020E68(a2, (llvm::MDNode *)v631);
        Impl = (uint64_t)llvm::DIObjCProperty::getImpl(v201, (uint64_t)v354, (uint64_t)v623, v624, (uint64_t)v626, (uint64_t)v628, v629, (uint64_t)v632, 0, 1);
      }
      goto LABEL_1165;
    case 31:
      v73 = *((_DWORD *)a3 + 2);
      if (v73 - 9 > 0xFFFFFFFC)
      {
        v219 = (uint64_t *)*a3;
        v220 = *(_QWORD *)*a3;
        v1000 = v220 != 0;
        v221 = *(_QWORD **)(a2 + 208);
        v222 = *((_DWORD *)v219 + 4);
        v986 = *((_DWORD *)v219 + 2);
        if (v220)
        {
          if (v222)
          {
            v974 = sub_1C50211EC((uint64_t)v999, (v222 - 1));
            v219 = (uint64_t *)*v11;
          }
          else
          {
            v974 = 0;
          }
          v409 = *((_DWORD *)v219 + 6);
          if (v409)
            v410 = sub_1C50211EC((uint64_t)v999, (v409 - 1));
          else
            v410 = 0;
          v411 = sub_1C5020E68(a2, (llvm::MDNode *)v410);
          v412 = *v11;
          if (v73 < 7)
          {
            v414 = 0;
            v415 = 0;
          }
          else
          {
            v413 = v412[12];
            if (v413)
            {
              v414 = sub_1C50211EC((uint64_t)v999, (v413 - 1));
              v412 = *v11;
            }
            else
            {
              v414 = 0;
            }
            v415 = v412[8];
          }
          v640 = v221;
          v641 = v412[10];
          if (v641)
            v642 = sub_1C50211EC((uint64_t)v999, (v641 - 1));
          else
            v642 = 0;
          if (v73 >= 8 && (v643 = (*v11)[14]) != 0)
            v644 = sub_1C50211EC((uint64_t)v999, (v643 - 1));
          else
            v644 = 0;
          Impl = (uint64_t)llvm::DIImportedEntity::getImpl(v640, v986, (uint64_t)v974, (uint64_t)v411, (uint64_t)v414, v415, (uint64_t)v642, (uint64_t)v644, 1, 1);
        }
        else
        {
          if (v222)
          {
            v976 = sub_1C50211EC((uint64_t)v999, (v222 - 1));
            v219 = (uint64_t *)*v11;
          }
          else
          {
            v976 = 0;
          }
          v571 = *((_DWORD *)v219 + 6);
          if (v571)
            v572 = sub_1C50211EC((uint64_t)v999, (v571 - 1));
          else
            v572 = 0;
          v573 = sub_1C5020E68(a2, (llvm::MDNode *)v572);
          v574 = *v11;
          if (v73 < 7)
          {
            v576 = 0;
            v577 = 0;
          }
          else
          {
            v575 = v574[12];
            if (v575)
            {
              v576 = sub_1C50211EC((uint64_t)v999, (v575 - 1));
              v574 = *v11;
            }
            else
            {
              v576 = 0;
            }
            v577 = v574[8];
          }
          v679 = v574[10];
          if (v679)
            v680 = sub_1C50211EC((uint64_t)v999, (v679 - 1));
          else
            v680 = 0;
          if (v73 >= 8 && (v681 = (*v11)[14]) != 0)
            v682 = sub_1C50211EC((uint64_t)v999, (v681 - 1));
          else
            v682 = 0;
          Impl = (uint64_t)llvm::DIImportedEntity::getImpl(v221, v986, (uint64_t)v976, (uint64_t)v573, (uint64_t)v576, v577, (uint64_t)v680, (uint64_t)v682, 0, 1);
        }
        goto LABEL_1165;
      }
      v69 = "Invalid DIImportedEntity record";
LABEL_300:
      *(_QWORD *)&v1002 = v69;
      v1004 = 259;
      sub_1C5018778(v9, (llvm::Twine *)&v1002);
      return;
    case 32:
      v88 = *((_DWORD *)a3 + 2);
      if (v88 - 10 <= 0xFFFFFFFA)
        goto LABEL_299;
      if (v88 <= 7)
        v89 = 1;
      else
        v89 = 2;
      v90 = (uint64_t *)*a3;
      v91 = *(_QWORD *)*a3;
      v1000 = v91 != 0;
      v984 = *(_QWORD **)(a2 + 208);
      if (v91)
      {
        if (v88 >= 8 && (v92 = *((_DWORD *)v90 + 2)) != 0)
        {
          v93 = sub_1C50211EC((uint64_t)v999, (v92 - 1));
          v90 = (uint64_t *)*v11;
        }
        else
        {
          v93 = 0;
        }
        v282 = v90[v89];
        if ((_DWORD)v282)
        {
          v283 = sub_1C50211EC((uint64_t)v999, (v282 - 1));
          v90 = (uint64_t *)*v11;
        }
        else
        {
          v283 = 0;
        }
        v429 = v90[v89 + 1];
        if ((_DWORD)v429)
        {
          v430 = sub_1C50211EC((uint64_t)v999, (v429 - 1));
          v90 = (uint64_t *)*v11;
        }
        else
        {
          v430 = 0;
        }
        v441 = v90[v89 + 2];
        if ((_DWORD)v441)
        {
          v442 = sub_1C50211EC((uint64_t)v999, (v441 - 1));
          v90 = (uint64_t *)*v11;
        }
        else
        {
          v442 = 0;
        }
        v443 = v90[v89 + 3];
        if ((_DWORD)v443)
        {
          v444 = sub_1C50211EC((uint64_t)v999, (v443 - 1));
          v90 = (uint64_t *)*v11;
        }
        else
        {
          v444 = 0;
        }
        v445 = v90[v89 | 4];
        if ((_DWORD)v445)
          v446 = sub_1C50211EC((uint64_t)v999, (v445 - 1));
        else
          v446 = 0;
        v447 = *((_DWORD *)v11 + 2);
        if (v447 >= 8)
        {
          v448 = (*v11)[14];
          if (v447 != 8)
          {
            v449 = *((_QWORD *)*v11 + 8) != 0;
            goto LABEL_743;
          }
        }
        else
        {
          v448 = 0;
        }
        v449 = 0;
LABEL_743:
        Impl = (uint64_t)llvm::DIModule::getImpl(v984, (uint64_t)v93, (uint64_t)v283, (uint64_t)v430, (uint64_t)v442, (uint64_t)v444, (uint64_t)v446, v448, v449, 1, 1);
        goto LABEL_1165;
      }
      if (v88 >= 8 && (v288 = *((_DWORD *)v90 + 2)) != 0)
      {
        v289 = sub_1C50211EC((uint64_t)v999, (v288 - 1));
        v90 = (uint64_t *)*v11;
      }
      else
      {
        v289 = 0;
      }
      v380 = v90[v89];
      if ((_DWORD)v380)
      {
        v381 = sub_1C50211EC((uint64_t)v999, (v380 - 1));
        v90 = (uint64_t *)*v11;
      }
      else
      {
        v381 = 0;
      }
      v584 = v90[v89 + 1];
      if ((_DWORD)v584)
      {
        v585 = sub_1C50211EC((uint64_t)v999, (v584 - 1));
        v90 = (uint64_t *)*v11;
      }
      else
      {
        v585 = 0;
      }
      v586 = v90[v89 + 2];
      if ((_DWORD)v586)
      {
        v587 = sub_1C50211EC((uint64_t)v999, (v586 - 1));
        v90 = (uint64_t *)*v11;
      }
      else
      {
        v587 = 0;
      }
      v588 = v90[v89 + 3];
      if ((_DWORD)v588)
      {
        v589 = sub_1C50211EC((uint64_t)v999, (v588 - 1));
        v90 = (uint64_t *)*v11;
      }
      else
      {
        v589 = 0;
      }
      v590 = v90[v89 | 4];
      if ((_DWORD)v590)
        v591 = sub_1C50211EC((uint64_t)v999, (v590 - 1));
      else
        v591 = 0;
      v592 = *((_DWORD *)v11 + 2);
      if (v592 >= 8)
      {
        v593 = (*v11)[14];
        if (v592 != 8)
        {
          v594 = *((_QWORD *)*v11 + 8) != 0;
          goto LABEL_928;
        }
      }
      else
      {
        v593 = 0;
      }
      v594 = 0;
LABEL_928:
      Impl = (uint64_t)llvm::DIModule::getImpl(v984, (uint64_t)v289, (uint64_t)v381, (uint64_t)v585, (uint64_t)v587, (uint64_t)v589, (uint64_t)v591, v593, v594, 0, 1);
      goto LABEL_1165;
    case 33:
      if (*((_DWORD *)a3 + 2) != 5)
        goto LABEL_299;
      v152 = (uint64_t *)*a3;
      v153 = *(_QWORD *)*a3;
      v1000 = v153 != 0;
      v154 = *(_QWORD **)(a2 + 208);
      v155 = *((_DWORD *)v152 + 2);
      v156 = *((_DWORD *)v152 + 4);
      v157 = *((_DWORD *)v152 + 6);
      if (v153)
      {
        if (v157)
        {
          v158 = sub_1C50211EC((uint64_t)v999, (v157 - 1));
          v152 = (uint64_t *)*v11;
        }
        else
        {
          v158 = 0;
        }
        v466 = *((_DWORD *)v152 + 8);
        if (v466)
          v467 = sub_1C50211EC((uint64_t)v999, (v466 - 1));
        else
          v467 = 0;
        v468 = v154;
        v469 = v155;
        v470 = v156;
        v471 = (unint64_t)v158;
        v472 = 1;
      }
      else
      {
        if (v157)
        {
          v301 = sub_1C50211EC((uint64_t)v999, (v157 - 1));
          v152 = (uint64_t *)*v11;
        }
        else
        {
          v301 = 0;
        }
        v608 = *((_DWORD *)v152 + 8);
        if (v608)
          v467 = sub_1C50211EC((uint64_t)v999, (v608 - 1));
        else
          v467 = 0;
        v468 = v154;
        v469 = v155;
        v470 = v156;
        v471 = (unint64_t)v301;
        v472 = 0;
      }
      Impl = (uint64_t)llvm::DIMacro::getImpl(v468, v469, v470, v471, (unint64_t)v467, v472, 1);
      goto LABEL_1165;
    case 34:
      if (*((_DWORD *)a3 + 2) != 5)
        goto LABEL_299;
      v94 = (uint64_t *)*a3;
      v95 = *(_QWORD *)*a3;
      v1000 = v95 != 0;
      v96 = *(_QWORD **)(a2 + 208);
      v97 = *((_DWORD *)v94 + 2);
      v98 = *((_DWORD *)v94 + 4);
      v99 = *((_DWORD *)v94 + 6);
      if (v95)
      {
        if (v99)
        {
          v100 = sub_1C50211EC((uint64_t)v999, (v99 - 1));
          v94 = (uint64_t *)*v11;
        }
        else
        {
          v100 = 0;
        }
        v427 = *((_DWORD *)v94 + 8);
        if (v427)
          v428 = sub_1C50211EC((uint64_t)v999, (v427 - 1));
        else
          v428 = 0;
        v436 = v96;
        v437 = v97;
        v438 = v98;
        v439 = (unint64_t)v100;
        v440 = 1;
      }
      else
      {
        if (v99)
        {
          v290 = sub_1C50211EC((uint64_t)v999, (v99 - 1));
          v94 = (uint64_t *)*v11;
        }
        else
        {
          v290 = 0;
        }
        v583 = *((_DWORD *)v94 + 8);
        if (v583)
          v428 = sub_1C50211EC((uint64_t)v999, (v583 - 1));
        else
          v428 = 0;
        v436 = v96;
        v437 = v97;
        v438 = v98;
        v439 = (unint64_t)v290;
        v440 = 0;
      }
      Impl = (uint64_t)llvm::DIMacroFile::getImpl(v436, v437, v438, v439, (unint64_t)v428, v440, 1);
      goto LABEL_1165;
    case 35:
      *(_QWORD *)&v1002 = a2;
      *((_QWORD *)&v1002 + 1) = a8;
      llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings(*a3, *((unsigned int *)a3 + 2), a6, a7, (void (*)(uint64_t, const char *, unint64_t))sub_1C502192C, (uint64_t)&v1002, a1);
      goto LABEL_210;
    case 36:
      if (((_DWORD)a3[1] & 1) == 0)
        goto LABEL_299;
      v70 = **(_QWORD **)(a2 + 192);
      if (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 192) + 8) - v70) >> 5) <= *(_QWORD *)*a3)
        goto LABEL_299;
      v71 = *(unsigned __int8 *)(*(_QWORD *)(v70 + 32 * *(_QWORD *)*a3 + 16) + 16);
      if (v71 > 3 || v71 == 1)
        goto LABEL_1168;
      llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment(a2);
LABEL_210:
      if (!*v9)
        goto LABEL_1168;
      return;
    case 37:
      if (*((_DWORD *)a3 + 2) != 3)
        goto LABEL_299;
      v185 = (uint64_t *)*a3;
      v1000 = *(_QWORD *)*a3 != 0;
      v186 = *((_DWORD *)v185 + 4);
      if (!v186 || (v187 = sub_1C50211EC((uint64_t)v999, (v186 - 1))) == 0)
        v187 = llvm::DIExpression::getImpl(*(_QWORD **)(a2 + 208), 0, 0, 0, 1);
      v188 = *(_QWORD **)(a2 + 208);
      v189 = (*v11)[2];
      if (v1000)
      {
        if (v189)
          v190 = sub_1C50211EC((uint64_t)v999, (v189 - 1));
        else
          v190 = 0;
        v473 = v188;
        v474 = (uint64_t)v187;
        v475 = 1;
      }
      else
      {
        if (v189)
          v190 = sub_1C50211EC((uint64_t)v999, (v189 - 1));
        else
          v190 = 0;
        v473 = v188;
        v474 = (uint64_t)v187;
        v475 = 0;
      }
      Impl = (uint64_t)llvm::DIGlobalVariableExpression::getImpl(v473, (uint64_t)v190, v474, v475, 1);
      goto LABEL_1165;
    case 40:
      if (*((_DWORD *)a3 + 2) != 5)
        goto LABEL_299;
      v210 = (uint64_t *)*a3;
      v1000 = *(_QWORD *)*a3 & 1;
      v211 = *(_QWORD **)(a2 + 208);
      v212 = *((_DWORD *)v210 + 2);
      if (v1000)
      {
        if (v212)
        {
          v279 = sub_1C50211EC((uint64_t)v999, (v212 - 1));
          v210 = (uint64_t *)*v11;
        }
        else
        {
          v279 = 0;
        }
        v533 = *((_DWORD *)v210 + 4);
        if (v533)
        {
          v534 = sub_1C50211EC((uint64_t)v999, (v533 - 1));
          v210 = (uint64_t *)*v11;
        }
        else
        {
          v534 = 0;
        }
        v537 = *((_DWORD *)v210 + 6);
        if (v537)
        {
          v536 = sub_1C50211EC((uint64_t)v999, (v537 - 1));
          v210 = (uint64_t *)*v11;
        }
        else
        {
          v536 = 0;
        }
        v538 = *((_DWORD *)v210 + 8);
        v539 = v211;
        v540 = (uint64_t)v279;
        v541 = (uint64_t)v534;
        v542 = 1;
      }
      else
      {
        if (v212)
        {
          v213 = sub_1C50211EC((uint64_t)v999, (v212 - 1));
          v210 = (uint64_t *)*v11;
        }
        else
        {
          v213 = 0;
        }
        v531 = *((_DWORD *)v210 + 4);
        if (v531)
        {
          v532 = sub_1C50211EC((uint64_t)v999, (v531 - 1));
          v210 = (uint64_t *)*v11;
        }
        else
        {
          v532 = 0;
        }
        v535 = *((_DWORD *)v210 + 6);
        if (v535)
        {
          v536 = sub_1C50211EC((uint64_t)v999, (v535 - 1));
          v210 = (uint64_t *)*v11;
        }
        else
        {
          v536 = 0;
        }
        v538 = *((_DWORD *)v210 + 8);
        v539 = v211;
        v540 = (uint64_t)v213;
        v541 = (uint64_t)v532;
        v542 = 0;
      }
      Impl = (uint64_t)llvm::DILabel::getImpl(v539, v540, v541, (uint64_t)v536, v538, v542, 1);
      goto LABEL_1165;
    case 41:
      v30 = *((_DWORD *)a3 + 2);
      if ((v30 - 10) <= 0xFFFFFFFD)
        goto LABEL_299;
      v31 = (uint64_t *)*a3;
      v32 = *(_QWORD *)*a3 != 0;
      v1000 = *(_QWORD *)*a3 != 0;
      if (v30 == 8)
      {
        v33 = 0;
        v34 = 5;
      }
      else
      {
        v259 = *((_DWORD *)v31 + 10);
        if (v259)
        {
          v33 = sub_1C50211EC((uint64_t)v999, (v259 - 1));
          v32 = v1000;
          v31 = (uint64_t *)*v11;
        }
        else
        {
          v33 = 0;
        }
        v34 = 6;
      }
      v501 = *(_QWORD **)(a2 + 208);
      v502 = *((_DWORD *)v31 + 2);
      v503 = *((_DWORD *)v31 + 4);
      if (v32)
      {
        if (v503)
        {
          v504 = sub_1C50211EC((uint64_t)v999, (v503 - 1));
          v31 = (uint64_t *)*v11;
        }
        else
        {
          v504 = 0;
        }
        v506 = *((_DWORD *)v31 + 6);
        if (v506)
        {
          v507 = sub_1C50211EC((uint64_t)v999, (v506 - 1));
          v31 = (uint64_t *)*v11;
        }
        else
        {
          v507 = 0;
        }
        v508 = *((_DWORD *)v31 + 8);
        if (v508)
        {
          v509 = sub_1C50211EC((uint64_t)v999, (v508 - 1));
          v31 = (uint64_t *)*v11;
        }
        else
        {
          v509 = 0;
        }
        Impl = (uint64_t)llvm::DIStringType::getImpl(v501, v502, (uint64_t)v504, (uint64_t)v507, (uint64_t)v509, (uint64_t)v33, v31[v34], v31[v34 + 1], v31[v34 + 2], 1, 1);
      }
      else
      {
        if (v503)
        {
          v505 = sub_1C50211EC((uint64_t)v999, (v503 - 1));
          v31 = (uint64_t *)*v11;
        }
        else
        {
          v505 = 0;
        }
        v560 = *((_DWORD *)v31 + 6);
        if (v560)
        {
          v561 = sub_1C50211EC((uint64_t)v999, (v560 - 1));
          v31 = (uint64_t *)*v11;
        }
        else
        {
          v561 = 0;
        }
        v562 = *((_DWORD *)v31 + 8);
        if (v562)
        {
          v563 = sub_1C50211EC((uint64_t)v999, (v562 - 1));
          v31 = (uint64_t *)*v11;
        }
        else
        {
          v563 = 0;
        }
        Impl = (uint64_t)llvm::DIStringType::getImpl(v501, v502, (uint64_t)v505, (uint64_t)v561, (uint64_t)v563, (uint64_t)v33, v31[v34], v31[v34 + 1], v31[v34 + 2], 0, 1);
      }
      goto LABEL_1165;
    case 44:
      v165 = (uint64_t *)*a3;
      v1000 = *(_QWORD *)*a3 & 1;
      v166 = *(_QWORD **)(a2 + 208);
      v167 = *((_DWORD *)v165 + 2);
      if (v1000)
      {
        if (v167)
        {
          v228 = sub_1C50211EC((uint64_t)v999, (v167 - 1));
          v165 = (uint64_t *)*v11;
        }
        else
        {
          v228 = 0;
        }
        v304 = *((_DWORD *)v165 + 4);
        if (v304)
        {
          v305 = sub_1C50211EC((uint64_t)v999, (v304 - 1));
          v165 = (uint64_t *)*v11;
        }
        else
        {
          v305 = 0;
        }
        v308 = *((_DWORD *)v165 + 6);
        if (v308)
        {
          v309 = sub_1C50211EC((uint64_t)v999, (v308 - 1));
          v165 = (uint64_t *)*v11;
        }
        else
        {
          v309 = 0;
        }
        v312 = *((_DWORD *)v165 + 8);
        if (v312)
        {
          v311 = sub_1C50211EC((uint64_t)v999, (v312 - 1));
          v165 = (uint64_t *)*v11;
        }
        else
        {
          v311 = 0;
        }
        v313 = *((_DWORD *)v165 + 10);
        v314 = v166;
        v315 = (uint64_t)v228;
        v316 = (uint64_t)v305;
        v317 = (uint64_t)v309;
        v318 = 1;
      }
      else
      {
        if (v167)
        {
          v168 = sub_1C50211EC((uint64_t)v999, (v167 - 1));
          v165 = (uint64_t *)*v11;
        }
        else
        {
          v168 = 0;
        }
        v302 = *((_DWORD *)v165 + 4);
        if (v302)
        {
          v303 = sub_1C50211EC((uint64_t)v999, (v302 - 1));
          v165 = (uint64_t *)*v11;
        }
        else
        {
          v303 = 0;
        }
        v306 = *((_DWORD *)v165 + 6);
        if (v306)
        {
          v307 = sub_1C50211EC((uint64_t)v999, (v306 - 1));
          v165 = (uint64_t *)*v11;
        }
        else
        {
          v307 = 0;
        }
        v310 = *((_DWORD *)v165 + 8);
        if (v310)
        {
          v311 = sub_1C50211EC((uint64_t)v999, (v310 - 1));
          v165 = (uint64_t *)*v11;
        }
        else
        {
          v311 = 0;
        }
        v313 = *((_DWORD *)v165 + 10);
        v314 = v166;
        v315 = (uint64_t)v168;
        v316 = (uint64_t)v303;
        v317 = (uint64_t)v307;
        v318 = 0;
      }
      Impl = (uint64_t)llvm::DICommonBlock::getImpl(v314, v315, v316, v317, (uint64_t)v311, v313, v318, 1);
      goto LABEL_1165;
    case 45:
      v26 = *(_QWORD **)(a2 + 208);
      v27 = (uint64_t *)*a3;
      v28 = (*a3)[2];
      if (v28)
      {
        v29 = sub_1C50211EC((uint64_t)v999, (v28 - 1));
        v27 = (uint64_t *)*v11;
      }
      else
      {
        v29 = 0;
      }
      v233 = *((_DWORD *)v27 + 4);
      if (v233)
      {
        v234 = sub_1C50211EC((uint64_t)v999, (v233 - 1));
        v27 = (uint64_t *)*v11;
      }
      else
      {
        v234 = 0;
      }
      v235 = *((_DWORD *)v27 + 6);
      if (v235)
      {
        v236 = sub_1C50211EC((uint64_t)v999, (v235 - 1));
        v27 = (uint64_t *)*v11;
      }
      else
      {
        v236 = 0;
      }
      v237 = *((_DWORD *)v27 + 8);
      if (v237)
        v238 = sub_1C50211EC((uint64_t)v999, (v237 - 1));
      else
        v238 = 0;
      Impl = (uint64_t)llvm::DIGenericSubrange::getImpl(v26, (uint64_t)v29, (uint64_t)v234, (uint64_t)v236, (uint64_t)v238, 0, 1);
      goto LABEL_1165;
    case 46:
      *(_QWORD *)&v1002 = v1003;
      *((_QWORD *)&v1002 + 1) = 0x400000000;
      v18 = *((unsigned int *)a3 + 2);
      if (v18 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, v18, 8);
        LODWORD(v18) = *((_DWORD *)v11 + 2);
      }
      if ((_DWORD)v18)
      {
        v19 = *v11;
        v20 = 8 * v18;
        do
        {
          v21 = sub_1C50211EC((uint64_t)v999, *v19);
          v22 = v21;
          v23 = *v21;
          if ((v23 - 4) <= 0x1E)
          {
            if ((v21[1] & 0x7F) == 2)
              v218 = "Invalid record: DIArgList should not contain forward refs";
            else
LABEL_258:
              v218 = "Invalid record";
            v1007 = (unsigned __int8 **)v218;
            v1010 = 259;
            sub_1C5018778(v9, (llvm::Twine *)&v1007);
LABEL_478:
            v364 = (void *)v1002;
            if ((_QWORD *)v1002 != v1003)
LABEL_479:
              free(v364);
            return;
          }
          if ((v23 - 1) >= 2)
            goto LABEL_258;
          v24 = DWORD2(v1002);
          if (DWORD2(v1002) >= (unint64_t)HIDWORD(v1002))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1003, DWORD2(v1002) + 1, 8);
            v24 = DWORD2(v1002);
          }
          *(_QWORD *)(v1002 + 8 * v24) = v22;
          v25 = ++DWORD2(v1002);
          v19 += 2;
          v20 -= 8;
        }
        while (v20);
      }
      else
      {
        v25 = DWORD2(v1002);
      }
      v216 = (unsigned __int8 *)llvm::DIArgList::getImpl(*(_QWORD **)(a2 + 208), (_BYTE *)v1002, v25, 0, 1);
LABEL_215:
      sub_1C501EF04(a2, v216, *v10);
      ++*v10;
      v217 = (void *)v1002;
      if ((_QWORD *)v1002 != v1003)
        goto LABEL_216;
      goto LABEL_1168;
    default:
      goto LABEL_1168;
  }
}

unsigned __int8 *llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString(llvm::MetadataLoader::MetadataLoaderImpl *this, unsigned int a2)
{
  unsigned __int8 *v4;
  uint64_t v5;

  if (*((_DWORD *)this + 2) <= a2 || (v4 = *(unsigned __int8 **)(*(_QWORD *)this + 8 * a2)) == 0)
  {
    v5 = *((_QWORD *)this + 75) + 16 * a2;
    v4 = (unsigned __int8 *)llvm::MDString::get(*((uint64_t **)this + 26), *(unsigned __int8 **)v5, *(_QWORD *)(v5 + 8));
    sub_1C501EF04((uint64_t)this, v4, a2);
  }
  return v4;
}

void sub_1C501EF04(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v6;
  _QWORD *v7;
  int v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::MDNode *v12;
  int v13;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 **v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int v25;
  unint64_t v26[3];

  v25 = a3;
  if (*a2 - 4 <= 0x1E && ((a2[1] & 0x7F) == 2 || *((_DWORD *)a2 + 3)))
    sub_1C61D16EC((uint64_t)v26, a1 + 48, (int *)&v25);
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 == a3)
  {
    if (*(_DWORD *)(a1 + 12) <= a3)
    {
      v26[0] = 0;
      v14 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 8, v26);
      v15 = &v14[*(unsigned int *)(a1 + 8)];
      *v15 = a2;
      llvm::MetadataTracking::track((uint64_t)v15, a2, 2);
      v16 = *(unsigned int *)(a1 + 8);
      v17 = *(unsigned __int8 ***)a1;
      if ((_DWORD)v16)
      {
        v18 = 8 * v16;
        v19 = v14;
        do
        {
          *v19 = *v17;
          if (*v17)
          {
            llvm::MetadataTracking::retrack((uint64_t)v17, *v17, (uint64_t)v19);
            *v17 = 0;
          }
          ++v17;
          ++v19;
          v18 -= 8;
        }
        while (v18);
        v17 = *(unsigned __int8 ***)a1;
        v20 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v20)
        {
          v21 = v20;
          v22 = v17 - 1;
          do
          {
            v23 = v22[v21];
            if (v23)
              llvm::MetadataTracking::untrack((uint64_t)&v22[v21], v23);
            --v21;
          }
          while (v21 * 8);
          v17 = *(unsigned __int8 ***)a1;
        }
      }
      v24 = v26[0];
      if (v17 != (unsigned __int8 **)(a1 + 16))
        free(v17);
      *(_QWORD *)a1 = v14;
      v8 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 12) = v24;
    }
    else
    {
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * a3);
      *v7 = a2;
      llvm::MetadataTracking::track((uint64_t)v7, a2, 2);
      v8 = *(_DWORD *)(a1 + 8) + 1;
    }
    *(_DWORD *)(a1 + 8) = v8;
  }
  else
  {
    if (v6 <= a3)
      sub_1C50204F4(a1, a3 + 1);
    v9 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * a3);
    v10 = *v9;
    if (*v9)
    {
      v11 = *((_QWORD *)v10 + 2);
      if ((v11 & 4) != 0)
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v11 & 0xFFFFFFFFFFFFFFF8), (llvm::Metadata *)a2);
      v26[0] = 0;
      if (sub_1C61D17A8(a1 + 24, a3, v26))
      {
        *(_DWORD *)v26[0] = -2;
        v13 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 24) -= 2;
        *(_DWORD *)(a1 + 28) = v13;
      }
      llvm::MDNode::deleteTemporary((llvm::MDNode *)v10, v12);
    }
    else
    {
      sub_1C4FCE378(v9, a2);
    }
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(uint64_t a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 **v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned __int8 *v33;
  int v34;
  llvm *v35;
  llvm::MDNode *v36;
  unsigned __int8 *v37;
  llvm::Value *v38;
  unsigned __int8 **v39;
  unint64_t *v40;
  int v41;
  int v42;
  const char *v43;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 **v51;
  llvm::Value *v52;
  uint64_t v53;
  _OWORD v54[3];
  uint64_t v55;
  char v56;
  char *v57;
  char v58;
  __int16 v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[66];

  v62[64] = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::EnterSubBlock(*(llvm::BitstreamCursor **)(a1 + 200), 0, 16, a4);
  if (!*a4)
  {
    v53 = a3;
    v60 = v62;
    v61 = 0x4000000000;
    memset(v54, 0, sizeof(v54));
    v10 = qword_1EF8F6CB0;
LABEL_3:
    v11 = *(_QWORD *)(a1 + 200);
    while (1)
    {
      sub_1C4FF7B90(v11, 0, (uint64_t)&v57);
      if ((v58 & 1) != 0)
      {
        v47 = v57;
        *a4 = (uint64_t)v57;
        if (v47)
          goto LABEL_86;
        goto LABEL_12;
      }
      v12 = (int)v57;
      if ((_DWORD)v57 != 2)
        break;
      sub_1C4FF3F30(v11, &v55);
      v13 = v55;
      if ((v58 & 1) != 0)
      {
        v14 = v57;
        v57 = 0;
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      }
      if (v13)
      {
        *a4 = v13;
        goto LABEL_86;
      }
    }
    v4 = (unint64_t)v57 >> 32;
    *a4 = 0;
    v5 = v12;
LABEL_12:
    switch(v5)
    {
      case 2:
        goto LABEL_82;
      case 1:
        sub_1C5019980(a1, (llvm::MDNode *)v54);
        *a4 = 0;
        goto LABEL_86;
      case 0:
LABEL_82:
        v57 = "Malformed block";
        v59 = 259;
        if (!atomic_load(v10))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
        v49 = qword_1EF8F6CB0[0];
        v50 = operator new();
        *(_QWORD *)v50 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v57, (_QWORD *)(v50 + 8));
        *(_QWORD *)(v50 + 32) = 1;
        *(_QWORD *)(v50 + 40) = v49;
        *(_BYTE *)(v50 + 48) = 1;
        *a4 = v50;
        goto LABEL_86;
    }
    LODWORD(v61) = 0;
    llvm::BitstreamCursor::readRecord(*(_QWORD *)(a1 + 200), v4, (uint64_t)&v60, 0, (uint64_t)&v55);
    if ((v56 & 1) != 0)
    {
      v17 = v55;
      v55 = 0;
      *a4 = v17;
      v16 = 1;
      goto LABEL_28;
    }
    if ((_DWORD)v55 != 11)
      goto LABEL_27;
    v15 = v61;
    if (!(_DWORD)v61)
    {
      v57 = "Invalid record";
      v59 = 259;
      if (!atomic_load(v10))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)v10, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
      v19 = v10;
      v20 = qword_1EF8F6CB0[0];
      v21 = operator new();
      *(_QWORD *)v21 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v57, (_QWORD *)(v21 + 8));
      v16 = 1;
      *(_QWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 40) = v20;
      v10 = v19;
      *(_BYTE *)(v21 + 48) = 1;
      *a4 = v21;
      goto LABEL_28;
    }
    if ((v61 & 1) == 0)
    {
      llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment(a1, a2, (uint64_t)v60, v61, a4);
      if (*a4)
        v16 = 1;
      else
        v16 = 2;
      goto LABEL_28;
    }
    if ((_DWORD)v61 == 1)
    {
LABEL_27:
      v16 = 0;
      goto LABEL_28;
    }
    v23 = (unsigned __int8 **)(*(_QWORD *)(v53 + 8 * *(_QWORD *)v60) + 48);
    v24 = 1;
    v51 = v23;
    v52 = *(llvm::Value **)(v53 + 8 * *(_QWORD *)v60);
    while (1)
    {
      v25 = *(_QWORD *)(a1 + 944);
      v26 = *(unsigned int *)(a1 + 960);
      if ((_DWORD)v26)
      {
        v27 = *((_QWORD *)v60 + v24);
        LODWORD(v28) = (v26 - 1) & (37 * v27);
        v29 = (int *)(v25 + 8 * v28);
        v30 = *v29;
        if (*v29 == (_DWORD)v27)
          goto LABEL_36;
        v38 = a2;
        v39 = v23;
        v40 = v10;
        v41 = 1;
        while (1)
        {
          v10 = v40;
          v23 = v39;
          a2 = v38;
          if (v30 == -1)
            break;
          v42 = v28 + v41++;
          v28 = v42 & (v26 - 1);
          v30 = *(_DWORD *)(v25 + 8 * v28);
          if (v30 == (_DWORD)v27)
          {
            v29 = (int *)(v25 + 8 * v28);
            v10 = v40;
            v23 = v39;
            a2 = v38;
            goto LABEL_36;
          }
        }
      }
      v29 = (int *)(v25 + 8 * v26);
LABEL_36:
      if ((int *)(v25 + 8 * v26) == v29)
      {
        v43 = "Invalid ID";
LABEL_77:
        v57 = (char *)v43;
        v59 = 259;
        if (!atomic_load(v10))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)v10, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
        v45 = qword_1EF8F6CB0[0];
        v46 = operator new();
        *(_QWORD *)v46 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v57, (_QWORD *)(v46 + 8));
        *(_QWORD *)(v46 + 32) = 1;
        *(_QWORD *)(v46 + 40) = v45;
        *(_BYTE *)(v46 + 48) = 1;
        *a4 = v46;
        v16 = 1;
LABEL_28:
        if ((v56 & 1) != 0)
        {
          v22 = v55;
          v55 = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
        if ((v16 | 2) != 2)
        {
LABEL_86:
          sub_1C5020964((uint64_t)v54);
          if (v60 != v62)
            free(v60);
          return;
        }
        goto LABEL_3;
      }
      if (v29[1] == 1 && *(_BYTE *)(a1 + 968))
        goto LABEL_59;
      v31 = v10;
      v32 = *((_QWORD *)v60 + v24 + 1);
      if (v32 < ((uint64_t)(*(_QWORD *)(a1 + 632) - *(_QWORD *)(a1 + 624)) >> 3)
               + ((uint64_t)(*(_QWORD *)(a1 + 608) - *(_QWORD *)(a1 + 600)) >> 4)
        && (*(_DWORD *)(a1 + 8) <= v32 || !*(_QWORD *)(*(_QWORD *)a1 + 8 * v32)))
      {
        sub_1C501F798(a1, v32, (uint64_t)v54);
        sub_1C5019980(a1, (llvm::MDNode *)v54);
      }
      v33 = sub_1C501FA6C(a1, v32);
      v34 = *v33;
      if (v34 == 2)
      {
        v16 = 0;
        v10 = v31;
        goto LABEL_28;
      }
      v10 = v31;
      if ((v34 - 4) >= 0x1F)
      {
        v43 = "Invalid metadata attachment";
        goto LABEL_77;
      }
      v35 = (llvm *)v33;
      if (!*(_BYTE *)(a1 + 969))
      {
        v23 = v51;
        goto LABEL_49;
      }
      v36 = (llvm::MDNode *)v29[1];
      v23 = v51;
      if ((_DWORD)v36 == 18)
      {
        v35 = llvm::upgradeInstructionLoopAttachment((llvm *)v33, v36);
LABEL_49:
        v36 = (llvm::MDNode *)v29[1];
      }
      if ((_DWORD)v36 == 1)
      {
        v35 = llvm::UpgradeTBAANode(v35, v36);
        LODWORD(v36) = v29[1];
      }
      if (v35)
      {
        if (!(_DWORD)v36)
        {
          v57 = (char *)v35;
          llvm::MetadataTracking::track((uint64_t)&v57, (unsigned __int8 *)v35, 2);
LABEL_62:
          if (&v57 == (char **)v23)
          {
            if (v57)
              llvm::MetadataTracking::untrack((uint64_t)&v57, (unsigned __int8 *)v57);
          }
          else
          {
            if (*v23)
              llvm::MetadataTracking::untrack((uint64_t)v23, *v23);
            v37 = (unsigned __int8 *)v57;
            *v23 = (unsigned __int8 *)v57;
            if (v37)
              llvm::MetadataTracking::retrack((uint64_t)&v57, v37, (uint64_t)v23);
          }
          goto LABEL_59;
        }
      }
      else
      {
        if (!*v23 && (*((_BYTE *)v52 + 23) & 0x20) == 0)
          goto LABEL_59;
        if (!(_DWORD)v36)
        {
          v57 = 0;
          goto LABEL_62;
        }
      }
      llvm::Value::setMetadata(v52, (int)v36, v35);
LABEL_59:
      v16 = 0;
      v24 += 2;
      if (v24 == v15)
        goto LABEL_28;
    }
  }
}

void sub_1C501F798(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string v19;
  std::string *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  const char *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  void *v31[2];
  _QWORD v32[65];

  v32[64] = *MEMORY[0x1E0C80C00];
  v26 = a2;
  if (*(_DWORD *)(a1 + 8) <= a2
    || (v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * a2)) == 0
    || (*(_BYTE *)(v5 + 1) & 0x7F) == 2)
  {
    v31[0] = v32;
    v31[1] = (void *)0x4000000000;
    v24 = 0;
    v25 = 0;
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 624) + 8 * (a2 - ((uint64_t)(*(_QWORD *)(a1 + 608) - *(_QWORD *)(a1 + 600)) >> 4)));
    *(_QWORD *)(a1 + 272) = (v6 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(a1 + 288) = 0;
    if ((v6 & 0x3F) != 0)
    {
      sub_1C4FF7E04(a1 + 256, v6 & 0x3F, (uint64_t)&v29);
      if ((v30 & 1) != 0)
      {
        if (v29)
        {
          v22[0] = (uint64_t)"lazyLoadOneMetadata failed jumping: ";
          v23 = 259;
          v18 = v29;
          v11 = (char **)&v18;
LABEL_27:
          sub_1C61D2548(v11, &v19);
          v21 = 260;
          v20 = &v19;
          sub_1C6131AAC(v22, (uint64_t *)&v20, (uint64_t)&v29);
          llvm::report_fatal_error((uint64_t)&v29, 1);
        }
      }
    }
    do
    {
      sub_1C4FF7B90(a1 + 256, 0, (uint64_t)&v29);
      if ((v30 & 1) != 0)
      {
        v7 = v29;
        v9 = 1;
        goto LABEL_14;
      }
      v7 = v29;
      if ((_DWORD)v29 != 2)
      {
        v9 = 0;
        goto LABEL_14;
      }
      sub_1C4FF3F30(a1 + 256, v22);
      v13 = v22[0];
      if ((v30 & 1) != 0)
      {
        v8 = v29;
        v29 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
    while (!v13);
    v9 = 1;
    v7 = v13;
LABEL_14:
    if (v9 && v7)
    {
      v22[0] = (uint64_t)"lazyLoadOneMetadata failed advanceSkippingSubblocks: ";
      v23 = 259;
      v17 = v7;
      v11 = (char **)&v17;
      goto LABEL_27;
    }
    llvm::BitstreamCursor::readRecord(a1 + 256, SHIDWORD(v7), (uint64_t)v31, (unsigned __int8 **)&v24, (uint64_t)&v27);
    if ((v28 & 1) != 0)
    {
      v22[0] = (uint64_t)"Can't lazyload MD: ";
      v23 = 259;
      v12 = v27;
      v27 = 0;
      v14 = v12;
      v11 = (char **)&v14;
      goto LABEL_27;
    }
    sub_1C501A270(&v16, a1, (int **)v31, v27, a3, v24, v25, &v26);
    if (v16)
    {
      v22[0] = (uint64_t)"Can't lazyload MD, parseOneMetadata: ";
      v23 = 259;
      v15 = v16;
      v11 = (char **)&v15;
      goto LABEL_27;
    }
    if ((v28 & 1) != 0)
    {
      v10 = v27;
      v27 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    if (v31[0] != v32)
      free(v31[0]);
  }
}

unsigned __int8 *sub_1C501FA6C(uint64_t a1, unsigned int a2)
{
  unsigned __int8 *Impl;
  unsigned int v6;
  _BYTE v7[24];

  v6 = a2;
  if (*(_DWORD *)(a1 + 184) <= a2)
    return 0;
  if (*(_DWORD *)(a1 + 8) <= a2)
    sub_1C50204F4(a1, a2 + 1);
  Impl = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * a2);
  if (!Impl)
  {
    sub_1C61D16EC((uint64_t)v7, a1 + 24, (int *)&v6);
    Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 176), 0, 0, 2, 1);
    sub_1C4FCE378((unsigned __int8 **)(*(_QWORD *)a1 + 8 * a2), Impl);
  }
  return Impl;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  unint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  void *v35;
  __int128 v36;
  _QWORD v37[2];

  v37[1] = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned int *)a2 + 2);
  if (v4 > 1)
  {
    v7 = (uint64_t *)(*a2 + 2);
    v6 = **a2;
    v35 = v37;
    v36 = xmmword_1C6464ED0;
    v8 = 8 * v4;
    v9 = v8 - 8;
    v10 = (unint64_t)(v8 - 8) >> 3;
    if ((unint64_t)(v8 - 8) < 0x41)
    {
      v11 = 0;
      v12 = v37;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v35, v37, (unint64_t)(v8 - 8) >> 3, 1);
      v12 = v35;
      v11 = v36;
    }
    v13 = (char *)v12 + v11;
    do
    {
      v14 = *v7++;
      *v13++ = v14;
      v9 -= 8;
    }
    while (v9);
    *(_QWORD *)&v36 = v36 + v10;
    v33[0] = v6 | (llvm::LLVMContext::getMDKindID(**(uint64_t ***)(a1 + 216), (unsigned __int8 *)v35, v36) << 32);
    v15 = *(_DWORD *)(a1 + 960);
    if (v15)
    {
      v16 = *(_QWORD *)(a1 + 944);
      v17 = v15 - 1;
      v18 = v17 & (37 * v6);
      v19 = (_DWORD *)(v16 + 8 * v18);
      v20 = *v19;
      if (*v19 == (_DWORD)v6)
      {
LABEL_28:
        v33[0] = "Conflicting METADATA_KIND records";
        v34 = 259;
        if (!atomic_load(qword_1EF8F6CB0))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
        v31 = qword_1EF8F6CB0[0];
        v32 = operator new();
        *(_QWORD *)v32 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v32 + 8));
        *(_QWORD *)(v32 + 32) = 1;
        *(_QWORD *)(v32 + 40) = v31;
        *(_BYTE *)(v32 + 48) = 1;
        *a3 = v32;
        goto LABEL_14;
      }
      v21 = 0;
      v22 = 1;
      while (v20 != -1)
      {
        if (v21)
          v28 = 0;
        else
          v28 = v20 == -2;
        if (v28)
          v21 = v19;
        v29 = v18 + v22++;
        v18 = v29 & v17;
        v19 = (_DWORD *)(v16 + 8 * v18);
        v20 = *v19;
        if (*v19 == (_DWORD)v6)
          goto LABEL_28;
      }
      if (v21)
        v23 = v21;
      else
        v23 = v19;
    }
    else
    {
      v23 = 0;
    }
    v24 = sub_1C476C0AC(a1 + 944, (uint64_t)v33, v33, v23);
    *(_QWORD *)v24 = v33[0];
    *a3 = 0;
LABEL_14:
    if (v35 != v37)
      free(v35);
    return;
  }
  v33[0] = "Invalid record";
  v34 = 259;
  if (!atomic_load(qword_1EF8F6CB0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
  v26 = qword_1EF8F6CB0[0];
  v27 = operator new();
  *(_QWORD *)v27 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v27 + 8));
  *(_QWORD *)(v27 + 32) = 1;
  *(_QWORD *)(v27 + 40) = v26;
  *(_BYTE *)(v27 + 48) = 1;
  *a3 = v27;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(llvm::BitstreamCursor **this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  int v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  __int16 v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[65];

  v22[64] = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::EnterSubBlock(this[25], 0, 22, a2);
  if (!*a2)
  {
    v20 = v22;
    v21 = 0x4000000000;
    while (1)
    {
      v6 = (uint64_t)this[25];
      while (1)
      {
        sub_1C4FF7B90(v6, 0, (uint64_t)&v17);
        if ((v18 & 1) != 0)
          break;
        v7 = v17;
        if ((_DWORD)v17 != 2)
        {
          v2 = HIDWORD(v17);
          *a2 = 0;
          v3 = v7;
          goto LABEL_12;
        }
        sub_1C4FF3F30(v6, &v16);
        v8 = v16;
        if ((v18 & 1) != 0)
        {
          v9 = v17;
          v17 = 0;
          if (v9)
            (*(void (**)(unint64_t))(*(_QWORD *)v9 + 8))(v9);
        }
        if (v8)
        {
          *a2 = v8;
          goto LABEL_29;
        }
      }
      v12 = v17;
      *a2 = v17;
      if (v12)
        goto LABEL_29;
LABEL_12:
      if (v3 == 2)
        break;
      if (v3 == 1)
      {
        *a2 = 0;
        goto LABEL_29;
      }
      if (!v3)
        break;
      LODWORD(v21) = 0;
      llvm::BitstreamCursor::readRecord((uint64_t)this[25], v2, (uint64_t)&v20, 0, (uint64_t)&v17);
      if ((v18 & 1) != 0)
      {
        *a2 = v17;
        goto LABEL_29;
      }
      if ((_DWORD)v17 == 6)
      {
        llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord((uint64_t)this, (unsigned int **)&v20, a2);
        v10 = *a2;
        if ((v18 & 1) != 0)
        {
          v11 = v17;
          v17 = 0;
          if (v11)
            (*(void (**)(unint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
        if (v10)
          goto LABEL_29;
      }
    }
    v17 = (unint64_t)"Malformed block";
    v19 = 259;
    if (!atomic_load(qword_1EF8F6CB0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6CB0, (void *(*)(void))sub_1C5017DE0, (void (*)(void *))sub_1C5017E14);
    v14 = qword_1EF8F6CB0[0];
    v15 = operator new();
    *(_QWORD *)v15 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v17, (_QWORD *)(v15 + 8));
    *(_QWORD *)(v15 + 32) = 1;
    *(_QWORD *)(v15 + 40) = v14;
    *(_BYTE *)(v15 + 48) = 1;
    *a2 = v15;
LABEL_29:
    if (v20 != v22)
      free(v20);
  }
}

_QWORD *llvm::MetadataLoader::MetadataLoader(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void llvm::MetadataLoader::~MetadataLoader(char ***this)
{
  char **v2;
  char **v3;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = sub_1C5021F0C(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10F0C4004B5578BLL);
  }
}

{
  char **v2;
  char **v3;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = sub_1C5021F0C(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10F0C4004B5578BLL);
  }
}

uint64_t *llvm::MetadataLoader::MetadataLoader(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v12;
  _QWORD *v13;
  void (**v14)(void);
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = operator new();
  v13 = (_QWORD *)a6[3];
  if (v13)
  {
    if (v13 == a6)
    {
      v17 = v16;
      (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v16);
    }
    else
    {
      v17 = (_QWORD *)a6[3];
      a6[3] = 0;
    }
  }
  else
  {
    v17 = 0;
  }
  sub_1C50220D0(v12, a2, a3, a4, (uint64_t)v16, a5);
  *a1 = v12;
  if (v17 == v16)
  {
    v14 = (void (**)(void))(v16[0] + 32);
    goto LABEL_10;
  }
  if (v17)
  {
    v14 = (void (**)(void))(*v17 + 40);
LABEL_10:
    (*v14)();
  }
  return a1;
}

{
  uint64_t v12;
  _QWORD *v13;
  void (**v14)(void);
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = operator new();
  v13 = (_QWORD *)a6[3];
  if (v13)
  {
    if (v13 == a6)
    {
      v17 = v16;
      (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v16);
    }
    else
    {
      v17 = (_QWORD *)a6[3];
      a6[3] = 0;
    }
  }
  else
  {
    v17 = 0;
  }
  sub_1C50220D0(v12, a2, a3, a4, (uint64_t)v16, a5);
  *a1 = v12;
  if (v17 == v16)
  {
    v14 = (void (**)(void))(v16[0] + 32);
    goto LABEL_7;
  }
  if (v17)
  {
    v14 = (void (**)(void))(*v17 + 40);
LABEL_7:
    (*v14)();
  }
  return a1;
}

void llvm::MetadataLoader::parseMetadata(llvm::MetadataLoader::MetadataLoaderImpl **this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*this, a2, a3);
}

BOOL llvm::MetadataLoader::hasFwdRefs(llvm::MetadataLoader *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 24) > 1u;
}

unsigned __int8 *llvm::MetadataLoader::getMetadataFwdRefOrLoad(llvm::MetadataLoader *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[3];

  v2 = *(_QWORD *)this;
  v3 = (uint64_t)(*(_QWORD *)(v2 + 608) - *(_QWORD *)(v2 + 600)) >> 4;
  if (v3 > a2)
    return llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString((llvm::MetadataLoader::MetadataLoaderImpl *)v2, a2);
  if (*(_DWORD *)(v2 + 8) > a2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)v2 + 8 * a2);
    if (v4)
      return (unsigned __int8 *)v4;
  }
  v8 = a2;
  v9 = v2;
  if (v3 + ((uint64_t)(*(_QWORD *)(v2 + 632) - *(_QWORD *)(v2 + 624)) >> 3) > a2)
  {
    memset(v10, 0, sizeof(v10));
    sub_1C501F798(v2, a2, (uint64_t)v10);
    sub_1C5019980(v9, (llvm::MDNode *)v10);
    if (*(_DWORD *)(v9 + 8) <= a2)
      v7 = 0;
    else
      v7 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v8);
    sub_1C5020964((uint64_t)v10);
    return (unsigned __int8 *)v7;
  }
  return sub_1C501FA6C(v2, a2);
}

uint64_t llvm::MetadataLoader::lookupSubprogramForFunction(llvm::MetadataLoader *this, llvm::Function *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  llvm::Function *v6;

  v2 = *(_QWORD *)this + 680;
  v5 = 0;
  v6 = a2;
  v3 = sub_1C5021AE0(v2, &v6, &v5);
  result = 0;
  if (v3)
    return *(_QWORD *)(v5 + 8);
  return result;
}

void llvm::MetadataLoader::parseMetadataAttachment(uint64_t *a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(*a1, a2, a3, a4);
}

void llvm::MetadataLoader::parseMetadataKinds(llvm::BitstreamCursor ***this@<X0>, uint64_t *a2@<X8>)
{
  llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(*this, a2);
}

uint64_t llvm::MetadataLoader::isStrippingTBAA(llvm::MetadataLoader *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 968);
}

uint64_t llvm::MetadataLoader::size(llvm::MetadataLoader *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 8);
}

void llvm::MetadataLoader::shrinkTo(llvm::MetadataLoader *this, unsigned int a2)
{
  sub_1C50204F4(*(_QWORD *)this, a2);
}

void llvm::MetadataLoader::upgradeDebugIntrinsics(llvm::MetadataLoader *this, llvm::Function *a2)
{
  sub_1C5021B88(*(_QWORD *)this, (uint64_t)a2);
}

void sub_1C50204F4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  unsigned __int8 **v6;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C61D1680(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * a2 - 8 * v2);
    }
    else
    {
      v5 = 8 * a2 - 8 * v2;
      v6 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v2 - 8);
      do
      {
        if (*v6)
          llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
        --v6;
        v5 += 8;
      }
      while (v5);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_1C50205A4(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(unsigned __int8 ***)result;
    v6 = 8 * v2;
    do
    {
      *a2 = *v5;
      if (*v5)
      {
        result = llvm::MetadataTracking::retrack((uint64_t)v5, *v5, (uint64_t)a2);
        *v5 = 0;
      }
      ++v5;
      ++a2;
      v6 -= 8;
    }
    while (v6);
    v7 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 8 * v7;
      v10 = v8 - 8;
      do
      {
        result = v10 + v9;
        v11 = *(unsigned __int8 **)(v10 + v9);
        if (v11)
          result = llvm::MetadataTracking::untrack(result, v11);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

void sub_1C502063C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Metadata *v6;
  uint64_t v7;
  llvm::MDNode *v8;

  v2 = *(_QWORD *)(a1 + 656);
  v3 = *(_QWORD *)(a1 + 664);
  if (v2 != v3)
  {
    do
    {
      v4 = *(_QWORD *)(v2 + 8);
      if (v4)
      {
        if (*(_BYTE *)v4 == 4)
        {
          v5 = *(unsigned int *)(v4 + 8);
          if ((_DWORD)v5)
          {
            v6 = *(llvm::Metadata **)v2;
            v7 = -8 * v5;
            do
            {
              v8 = *(llvm::MDNode **)(v4 + v7);
              if (v8 && *(_BYTE *)v8 == 17)
                llvm::MDNode::replaceOperandWith(v8, 5, v6);
              v7 += 8;
            }
            while (v7);
          }
        }
      }
      v2 += 16;
    }
    while (v2 != v3);
    v2 = *(_QWORD *)(a1 + 656);
  }
  *(_QWORD *)(a1 + 664) = v2;
}

void sub_1C50206D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t NamedMetadata;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t j;
  _BYTE *v11;
  _QWORD *v12;
  llvm::MDNode *Impl;
  llvm::MDNode *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::MDNode **v19;
  uint64_t v20;
  llvm::MDNode *v21;
  _QWORD *v22;
  llvm::MDNode *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _WORD v29[12];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 970))
  {
    v2 = *(_QWORD *)(a1 + 216);
    v27 = "llvm.dbg.cu";
    v29[8] = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v2, (uint64_t)&v27);
    if (NamedMetadata)
    {
      v4 = NamedMetadata;
      v5 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
      if ((_DWORD)v5)
      {
        for (i = 0; i != v5; ++i)
        {
          v7 = *(_QWORD *)(**(_QWORD **)(v4 + 48) + 8 * i);
          v8 = *(unsigned int **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 48);
          if (v8)
          {
            if (*(_BYTE *)v8 == 4)
            {
              v9 = v8[2];
              if ((_DWORD)v9)
              {
                for (j = 0; j < v9; ++j)
                {
                  v11 = *(_BYTE **)&v8[2 * j + -2 * v9];
                  if (v11 && *v11 == 24)
                  {
                    v12 = *(_QWORD **)(a1 + 208);
                    Impl = llvm::DIExpression::getImpl(v12, 0, 0, 0, 1);
                    v14 = llvm::DIGlobalVariableExpression::getImpl(v12, (uint64_t)v11, (uint64_t)Impl, 1, 1);
                    llvm::MDNode::replaceOperandWith((llvm::MDNode *)v8, j, v14);
                    v9 = v8[2];
                  }
                }
              }
            }
          }
        }
      }
    }
    v15 = *(_QWORD *)(a1 + 216);
    v16 = v15 + 8;
    v17 = *(_QWORD *)(v15 + 16);
    if (v17 != v15 + 8)
    {
      do
      {
        if (v17)
          v18 = v17 - 56;
        else
          v18 = 0;
        v27 = v29;
        v28 = 0x100000000;
        llvm::Value::getMetadata((unsigned int *)v18, 0, (uint64_t)&v27);
        if ((*(_BYTE *)(v18 + 23) & 0x20) != 0)
        {
          v24 = ***(_QWORD ***)v18 + 2480;
          v26 = v18;
          v25 = sub_1C541AA4C(v24, &v26);
          llvm::MDAttachments::erase((llvm::MDAttachments *)(v25 + 1), 0);
          if (!*((_DWORD *)v25 + 4))
            llvm::Value::clearMetadata((llvm::Value *)v18);
        }
        v19 = (llvm::MDNode **)v27;
        if ((_DWORD)v28)
        {
          v20 = 8 * v28;
          do
          {
            v21 = *v19;
            if (*(_BYTE *)*v19 == 24)
            {
              v22 = *(_QWORD **)(a1 + 208);
              v23 = llvm::DIExpression::getImpl(v22, 0, 0, 0, 1);
              v21 = llvm::DIGlobalVariableExpression::getImpl(v22, (uint64_t)v21, (uint64_t)v23, 1, 1);
            }
            llvm::Value::addMetadata((llvm::Value *)v18, 0, v21);
            ++v19;
            v20 -= 8;
          }
          while (v20);
          v19 = (llvm::MDNode **)v27;
        }
        if (v19 != (llvm::MDNode **)v29)
          free(v19);
        v17 = *(_QWORD *)(v17 + 8);
      }
      while (v17 != v16);
    }
  }
}

uint64_t sub_1C5020964(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 16 * v5;
    v9 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        v10 = *(_QWORD **)(v8 + 8);
        if (v10)
        {
          *v10 = 0;
          v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          v11 = (uint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    v14 = 256;
LABEL_16:
    *(_QWORD *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C5020AA8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(int **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_1C61D1910(a1, v7, &v7[v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = &v13;
  if (*(_DWORD *)(a1 + 8) <= 0xFFFFFFFD)
  {
    v13 = *(_DWORD *)(a1 + 8);
    v9 = (int *)&v14;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v10 = a2;
    *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v10;
  }
  return sub_1C61D1910(a1, &v13, v9);
}

uint64_t sub_1C5020BB8(uint64_t a1, uint64_t a2)
{
  uint64_t Impl;
  unint64_t v4;
  uint64_t v5;
  llvm::MDNode *v6;
  uint64_t v7;
  unsigned int v8;
  void *v10;
  uint64_t v11;
  _QWORD v12[33];

  Impl = a2;
  v12[32] = *MEMORY[0x1E0C80C00];
  if (a2 && *(_BYTE *)a2 == 4 && (*(_BYTE *)(a2 + 1) & 0x7F) != 1)
  {
    v10 = v12;
    v11 = 0x2000000000;
    v4 = *(unsigned int *)(a2 + 8);
    if (v4 >= 0x21)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10, (uint64_t)v12, v4, 8);
      LODWORD(v4) = *(_DWORD *)(Impl + 8);
    }
    if ((_DWORD)v4)
    {
      v5 = -8 * v4;
      do
      {
        v6 = sub_1C5020E68(a1, *(llvm::MDNode **)(Impl + v5));
        v7 = v11;
        if (v11 >= (unint64_t)HIDWORD(v11))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10, (uint64_t)v12, v11 + 1, 8);
          v7 = v11;
        }
        *((_QWORD *)v10 + v7) = v6;
        v8 = v11 + 1;
        LODWORD(v11) = v11 + 1;
        v5 += 8;
      }
      while (v5);
    }
    else
    {
      v8 = v11;
    }
    Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 176), v10, v8, 0, 1);
    if (v10 != v12)
      free(v10);
  }
  return Impl;
}

uint64_t sub_1C5020D0C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_1C61D1C64(a1, v7, &v7[2 * v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = v14;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v14[0] = *(_QWORD *)(a1 + 8);
    v14[1] = v10;
    v9 = &v15;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61D1C64(a1, v14, v9);
}

llvm::MDNode *sub_1C5020E68(uint64_t a1, llvm::MDNode *Impl)
{
  _QWORD *v4;
  _QWORD *v5;
  llvm::MDNode *v6;
  llvm::MDNode *v7;
  uint64_t v8;

  if (Impl)
  {
    if (!*(_BYTE *)Impl)
    {
      v7 = Impl;
      v8 = 0;
      if ((sub_1C61D1AFC(a1 + 96, (uint64_t)Impl, &v8) & 1) == 0 || (Impl = *(llvm::MDNode **)(v8 + 8)) == 0)
      {
        v4 = sub_1C61D1D2C((_DWORD *)(a1 + 72), (uint64_t *)&v7);
        Impl = (llvm::MDNode *)v4[1];
        if (!Impl)
        {
          v5 = v4;
          Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 176), 0, 0, 2, 1);
          v6 = (llvm::MDNode *)v5[1];
          v5[1] = Impl;
          if (v6)
          {
            llvm::MDNode::deleteTemporary(v6, Impl);
            return (llvm::MDNode *)v5[1];
          }
        }
      }
    }
  }
  return Impl;
}

void sub_1C5020F04(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_1C61D1E48(a1, v7, &v7[2 * v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = v13;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v13[0] = *(_QWORD *)(a1 + 8);
    v13[1] = v10;
    v9 = &v14;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  sub_1C61D1E48(a1, v13, v9);
}

void sub_1C5021064(uint64_t a1, llvm::MDNode *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::MDNode **v5;
  uint64_t v6;
  llvm::MDNode *v7;
  llvm::MDNode **v8;
  uint64_t v9;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v2 = a1 + 8;
    v3 = 1;
  }
  else
  {
    v3 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v3)
      return;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = 16 * v3;
  v5 = (llvm::MDNode **)(v2 + 8);
  do
  {
    v6 = (uint64_t)*(v5 - 1);
    if (v6 != -4096 && v6 != -8192)
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        v8 = v5;
        v9 = v4;
        llvm::MDNode::deleteTemporary(v7, a2);
        v5 = v8;
        v4 = v9;
      }
    }
    v5 += 2;
    v4 -= 16;
  }
  while (v4);
}

_QWORD *sub_1C50210E0(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 1)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 3;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(16 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[2 * v5];
  do
  {
LABEL_4:
    *result = -4096;
    result += 2;
  }
  while (result != v4);
  return result;
}

void *sub_1C5021160(_DWORD *a1, unsigned int a2)
{
  void *v2;
  size_t v3;
  uint64_t v5;
  int v6;
  size_t v7;
  _DWORD *v8;

  if (a2 > 1)
  {
    *a1 &= ~1u;
    v5 = a2;
    v7 = 4 * a2;
    v8 = a1;
    v2 = operator new(v7, (std::align_val_t)4uLL);
    a1 = v8;
    *((_QWORD *)v8 + 1) = v2;
    *((_QWORD *)v8 + 2) = v5;
    v6 = *v8;
    *(_QWORD *)v8 = *v8 & 1;
    if ((v6 & 1) == 0)
    {
      v3 = v7;
      return memset(v2, 255, v3);
    }
  }
  else
  {
    *(_QWORD *)a1 = 1;
  }
  v2 = a1 + 2;
  v3 = 4;
  return memset(v2, 255, v3);
}

unsigned __int8 *sub_1C50211EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *result;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  void *v33;
  _QWORD *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  void *v68;
  char *v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;

  v3 = *(_QWORD *)a1;
  v4 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 608) - *(_QWORD *)(*(_QWORD *)a1 + 600)) >> 4;
  if (v4 > a2)
    return llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString(*(llvm::MetadataLoader::MetadataLoaderImpl **)a1, a2);
  v7 = *(_DWORD *)(v3 + 8);
  if (**(_BYTE **)(a1 + 8))
  {
    if (v7 <= a2
      || (result = *(unsigned __int8 **)(*(_QWORD *)v3 + 8 * a2)) == 0
      || *result - 4 <= 0x1E && ((result[1] & 0x7F) == 2 || *((_DWORD *)result + 3)))
    {
      v8 = *(_QWORD *)(a1 + 24);
      v9 = *(char **)(v8 + 16);
      v10 = *(char **)(v8 + 8);
      v11 = v9 - v10;
      if (v9 == v10)
        v12 = 0;
      else
        v12 = 32 * (v9 - v10) - 1;
      v13 = *(_QWORD *)(v8 + 32);
      v14 = *(_QWORD *)(v8 + 40) + v13;
      if (v12 != v14)
        goto LABEL_52;
      if (v13 < 0x100)
      {
        v26 = *(char **)(v8 + 24);
        v27 = (uint64_t)&v26[-*(_QWORD *)v8];
        if (v11 < (unint64_t)v27)
        {
          if (v26 != v9)
          {
            v69 = (char *)operator new(0x1000uLL);
            sub_1C61A2C78(v8, &v69);
            goto LABEL_51;
          }
          v69 = (char *)operator new(0x1000uLL);
          sub_1C6135314((void **)v8, &v69);
          v47 = *(_QWORD **)(v8 + 8);
          v48 = *(char **)(v8 + 16);
          v51 = *v47;
          v49 = (char *)(v47 + 1);
          v50 = v51;
          *(_QWORD *)(v8 + 8) = v49;
          if (v48 == *(char **)(v8 + 24))
          {
            v52 = *(char **)v8;
            if ((unint64_t)v49 <= *(_QWORD *)v8)
            {
              if (v48 == v52)
                v59 = 1;
              else
                v59 = (v48 - v52) >> 2;
              if (v59 >> 61)
                goto LABEL_82;
              v60 = (char *)operator new(8 * v59);
              v61 = &v60[8 * (v59 >> 2)];
              v62 = v48 - v49;
              v39 = v48 == v49;
              v48 = v61;
              if (!v39)
              {
                v48 = &v61[v62 & 0xFFFFFFFFFFFFFFF8];
                v63 = 8 * (v62 >> 3);
                v64 = &v60[8 * (v59 >> 2)];
                do
                {
                  v65 = *(_QWORD *)v49;
                  v49 += 8;
                  *(_QWORD *)v64 = v65;
                  v64 += 8;
                  v63 -= 8;
                }
                while (v63);
              }
              *(_QWORD *)v8 = v60;
              *(_QWORD *)(v8 + 8) = v61;
              *(_QWORD *)(v8 + 16) = v48;
              *(_QWORD *)(v8 + 24) = &v60[8 * v59];
              if (v52)
              {
                operator delete(v52);
                v48 = *(char **)(v8 + 16);
              }
            }
            else
            {
              v53 = (uint64_t)&v49[-*(_QWORD *)v8] >> 3;
              if (v53 >= -1)
                v54 = v53 + 1;
              else
                v54 = v53 + 2;
              v55 = -(v54 >> 1);
              v56 = v54 >> 1;
              v57 = &v49[-8 * v56];
              v58 = v48 - v49;
              if (v58)
              {
                memmove(&v49[-8 * v56], v49, v58);
                v49 = *(char **)(v8 + 8);
              }
              v48 = &v57[v58];
              *(_QWORD *)(v8 + 8) = &v49[8 * v55];
              *(_QWORD *)(v8 + 16) = v48;
            }
          }
          *(_QWORD *)v48 = v50;
          goto LABEL_50;
        }
        v28 = v27 >> 2;
        if (v26 == *(char **)v8)
          v29 = 1;
        else
          v29 = v28;
        v73 = v8 + 24;
        if (!(v29 >> 61))
        {
          v30 = (char *)operator new(8 * v29);
          v31 = &v30[v11];
          v69 = v30;
          v70 = &v30[v11];
          v32 = &v30[8 * v29];
          v72 = v32;
          v33 = operator new(0x1000uLL);
          if (v29 == v11 >> 3)
          {
            v68 = v33;
            if (v11 < 1)
            {
              if (v9 == v10)
                v66 = 1;
              else
                v66 = v11 >> 2;
              if (v66 >> 61)
                goto LABEL_82;
              v67 = (char *)operator new(8 * v66);
              v31 = &v67[8 * (v66 >> 2)];
              v32 = &v67[8 * v66];
              v69 = v67;
              v70 = v31;
              v72 = v32;
              operator delete(v30);
              v10 = *(char **)(v8 + 8);
              v9 = *(char **)(v8 + 16);
              v30 = v67;
            }
            else
            {
              v31 -= (4 * v29 + 4) & 0xFFFFFFFFFFFFFFF8;
              v70 = v31;
            }
            v33 = v68;
          }
          *(_QWORD *)v31 = v33;
          v34 = v31 + 8;
          v71 = v31 + 8;
          if (v9 != v10)
          {
            do
            {
              v9 -= 8;
              sub_1C61A2DAC((const void **)&v69, v9);
            }
            while (v9 != *(char **)(v8 + 8));
            v30 = v69;
            v31 = v70;
            v34 = v71;
            v32 = v72;
          }
          v35 = *(char **)v8;
          *(_QWORD *)v8 = v30;
          *(_QWORD *)(v8 + 8) = v31;
          *(_QWORD *)(v8 + 16) = v34;
          *(_QWORD *)(v8 + 24) = v32;
          if (v35)
            operator delete(v35);
          goto LABEL_51;
        }
      }
      else
      {
        *(_QWORD *)(v8 + 32) = v13 - 256;
        v17 = *(_QWORD *)v10;
        v15 = v10 + 8;
        v16 = v17;
        *(_QWORD *)(v8 + 8) = v15;
        if (v9 != *(char **)(v8 + 24))
        {
LABEL_49:
          *(_QWORD *)v9 = v16;
LABEL_50:
          *(_QWORD *)(v8 + 16) += 8;
LABEL_51:
          v10 = *(char **)(v8 + 8);
          v14 = *(_QWORD *)(v8 + 32) + *(_QWORD *)(v8 + 40);
LABEL_52:
          v44 = *(_QWORD *)&v10[(v14 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v14;
          *(_QWORD *)(v44 + 8) = 0;
          *(_DWORD *)v44 = 259;
          *(_DWORD *)(v44 + 4) = a2;
          v46 = *(_QWORD *)(v8 + 32);
          v45 = *(_QWORD *)(v8 + 40);
          *(_QWORD *)(v8 + 40) = v45 + 1;
          return (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v8 + 8)
                                               + (((unint64_t)(v46 + v45) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v46 + v45));
        }
        v18 = *(char **)v8;
        if ((unint64_t)v15 > *(_QWORD *)v8)
        {
          v19 = (uint64_t)&v15[-*(_QWORD *)v8] >> 3;
          if (v19 >= -1)
            v20 = v19 + 1;
          else
            v20 = v19 + 2;
          v21 = -(v20 >> 1);
          v22 = v20 >> 1;
          v23 = &v15[-8 * v22];
          v24 = v9 - v15;
          if (v9 != v15)
          {
            memmove(&v15[-8 * v22], v15, v9 - v15);
            v9 = *(char **)(v8 + 8);
          }
          v25 = &v9[8 * v21];
          v9 = &v23[v24];
          *(_QWORD *)(v8 + 8) = v25;
          *(_QWORD *)(v8 + 16) = &v23[v24];
          goto LABEL_49;
        }
        if (v9 == v18)
          v36 = 1;
        else
          v36 = (v9 - v18) >> 2;
        if (!(v36 >> 61))
        {
          v37 = (char *)operator new(8 * v36);
          v38 = &v37[8 * (v36 >> 2)];
          v40 = v9 - v15;
          v39 = v9 == v15;
          v9 = v38;
          if (!v39)
          {
            v9 = &v38[v40 & 0xFFFFFFFFFFFFFFF8];
            v41 = 8 * (v40 >> 3);
            v42 = &v37[8 * (v36 >> 2)];
            do
            {
              v43 = *(_QWORD *)v15;
              v15 += 8;
              *(_QWORD *)v42 = v43;
              v42 += 8;
              v41 -= 8;
            }
            while (v41);
          }
          *(_QWORD *)v8 = v37;
          *(_QWORD *)(v8 + 8) = v38;
          *(_QWORD *)(v8 + 16) = v9;
          *(_QWORD *)(v8 + 24) = &v37[8 * v36];
          if (v18)
          {
            operator delete(v18);
            v9 = *(char **)(v8 + 16);
          }
          goto LABEL_49;
        }
      }
LABEL_82:
      sub_1C4764EE4();
    }
  }
  else if (v7 <= a2 || (result = *(unsigned __int8 **)(*(_QWORD *)v3 + 8 * a2)) == 0)
  {
    if (v4 + ((uint64_t)(*(_QWORD *)(v3 + 632) - *(_QWORD *)(v3 + 624)) >> 3) <= a2)
    {
      return sub_1C501FA6C(v3, a2);
    }
    else
    {
      sub_1C501FA6C(v3, **(_DWORD **)(a1 + 16));
      sub_1C501F798(v3, a2, *(_QWORD *)(a1 + 24));
      if (*(_DWORD *)(v3 + 8) <= a2)
        return 0;
      else
        return *(unsigned __int8 **)(*(_QWORD *)v3 + 8 * a2);
    }
  }
  return result;
}

uint64_t sub_1C5021708(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61D2480(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61D2480(a1, v14, v9);
}

_QWORD *sub_1C502188C(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

void sub_1C502192C(unsigned int **a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;

  v4 = (uint64_t)*a1;
  v5 = (unsigned __int8 *)llvm::MDString::get(*((uint64_t **)*a1 + 26), a2, a3);
  sub_1C501EF04(v4, v5, *a1[1]);
  ++*a1[1];
}

void sub_1C5021978(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  void *__p[2];
  char v7;

  v2 = *a1;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(__p, a2);
  v3 = sub_1C4E01890(v2, (unint64_t)__p, 1);
  v4 = *(_QWORD *)v2 + 24 * *(unsigned int *)(v2 + 8);
  v5 = *(_OWORD *)v3;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  ++*(_DWORD *)(v2 + 8);
  if (v7 < 0)
    operator delete(__p[0]);
}

std::string *sub_1C5021A04@<X0>(std::string *result@<X0>, std::string *a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  std::string *v8;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type size;
  char v13;
  BOOL v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;

  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  if (result != a2)
  {
    v8 = result;
    v10 = (0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)result) >> 3) - 1) * a4;
    v11 = result;
    do
    {
      if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
        size = v11->__r_.__value_.__l.__size_;
      else
        size = HIBYTE(v11->__r_.__value_.__r.__words[2]);
      v10 += size;
      ++v11;
    }
    while (v11 != a2);
    std::string::reserve(a5, v10);
    while (1)
    {
      v13 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      v14 = v13 < 0;
      v15 = v13 >= 0
          ? (const std::string::value_type *)v8
          : (const std::string::value_type *)v8->__r_.__value_.__r.__words[0];
      v16 = v13 & 0x7F;
      v17 = v14 ? v8->__r_.__value_.__l.__size_ : v16;
      result = std::string::append(a5, v15, v17);
      if (++v8 == a2)
        break;
      std::string::append(a5, a3, a4);
    }
  }
  return result;
}

uint64_t sub_1C5021AE0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void sub_1C5021B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  _BOOL4 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::MDNode *Impl;
  void *v19;
  uint64_t v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 971))
  {
    v2 = a2 + 72;
    v3 = *(_QWORD *)(a2 + 80);
    if (v3 != a2 + 72)
    {
      do
      {
        v5 = v3 - 24;
        if (!v3)
          v5 = 0;
        v6 = v5 + 40;
        for (i = *(_QWORD *)(v5 + 48); i != v6; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v8 = i - 24;
          else
            v8 = 0;
          v9 = sub_1C5021D50(v8);
          if (!v9)
            v8 = 0;
          if (i)
          {
            if (v9)
            {
              v10 = (_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
              v11 = *(_QWORD *)(v10[8] + 24);
              if (v11)
              {
                v13 = v11 + 24;
                v12 = *(_QWORD *)(v11 + 24);
                v14 = *(_QWORD *)(v13 + 8) - v12;
                if ((v14 & 0x7FFFFFFF8) != 0 && *(_QWORD *)v12 == 6)
                {
                  v15 = *(unsigned __int8 **)(*v10 + 24);
                  v16 = *v15;
                  if (v16 <= 0x22)
                  {
                    if (v16 == 32)
                    {
                      v15 = (unsigned __int8 *)**((_QWORD **)v15 + 3);
                    }
                    else if (((1 << v16) & 0x6FFFFFFF0) != 0)
                    {
                      continue;
                    }
                  }
                  v17 = *((_QWORD *)v15 + 16);
                  if (v17 && *(_BYTE *)(v17 + 16) == 21)
                  {
                    v19 = v21;
                    v20 = 0x800000000;
                    sub_1C4DFE610((unsigned int *)&v19, (_BYTE *)(v12 + 8), (_BYTE *)(v12 + v14));
                    Impl = llvm::DIExpression::getImpl(*(_QWORD **)(a1 + 208), v19, v20, 0, 1);
                    sub_1C61D279C(v8, (uint64_t)Impl);
                    if (v19 != v21)
                      free(v19);
                  }
                }
              }
            }
          }
        }
        v3 = *(_QWORD *)(v3 + 8);
      }
      while (v3 != v2);
    }
  }
}

BOOL sub_1C5021D50(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 56;
}

uint64_t LLVMSetArgOperand_0(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  v4 = (_QWORD *)(v3 + 32 * a2);
  v5 = v4;
  if (*v4)
  {
    v7 = (_QWORD *)v4[2];
    v6 = v4 + 2;
    *v7 = *(v6 - 1);
    v8 = *(v6 - 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *v6;
  }
  *v5 = a3;
  if (a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v9 = (_QWORD *)(a3 + 8);
    v10 = v11;
    v12 = v3 + 32 * a2;
    *(_QWORD *)(v12 + 8) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v9;
    *v9 = v5;
  }
  return result;
}

void sub_1C5021E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;

  v5 = *(_QWORD **)a1;
  v6 = *(char **)(*(_QWORD *)a1 + 608);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 616);
  if ((unint64_t)v6 >= v7)
  {
    v9 = (char *)v5[75];
    v10 = (v6 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    v12 = v7 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 60)
        sub_1C4764EE4();
      v14 = (char *)operator new(16 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[16 * v10];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    v8 = v15 + 16;
    if (v6 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v6 - 1);
        v15 -= 16;
        v6 -= 16;
      }
      while (v6 != v9);
      v6 = (char *)v5[75];
    }
    v5[75] = v15;
    v5[76] = v8;
    v5[77] = &v14[16 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = a2;
    *((_QWORD *)v6 + 1) = a3;
    v8 = v6 + 16;
  }
  v5[76] = v8;
}

char **sub_1C5021F0C(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  llvm::MDNode *v5;
  char **v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned __int8 *v16;

  MEMORY[0x1CAA32FB4](a1[118], 4);
  if (((_BYTE)a1[85] & 1) == 0)
    MEMORY[0x1CAA32FB4](a1[86], 8);
  v2 = a1[82];
  if (v2)
  {
    a1[83] = v2;
    operator delete(v2);
  }
  v3 = a1[78];
  if (v3)
  {
    a1[79] = v3;
    operator delete(v3);
  }
  v4 = a1[75];
  if (v4)
  {
    a1[76] = v4;
    operator delete(v4);
  }
  sub_1C4FF8A28(a1 + 40);
  if (a1[37])
  {
    sub_1C4FF80DC((uint64_t *)a1 + 37);
    operator delete(a1[37]);
  }
  v6 = (char **)a1[31];
  if (v6 == a1 + 28)
  {
    v7 = 4;
    v6 = a1 + 28;
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))&(*v6)[8 * v7])();
LABEL_16:
  v8 = a1[18];
  v9 = *((unsigned int *)a1 + 38);
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = v8 - 16;
    do
    {
      sub_1C61D1F24((uint64_t)&v11[v10], v5);
      v10 -= 16;
    }
    while (v10);
    v8 = a1[18];
  }
  if (v8 != (char *)(a1 + 20))
    free(v8);
  if (((_BYTE)a1[15] & 1) == 0)
    MEMORY[0x1CAA32FB4](a1[16], 8);
  if (((_BYTE)a1[12] & 1) == 0)
    MEMORY[0x1CAA32FB4](a1[13], 8);
  sub_1C5021064((uint64_t)(a1 + 9), v5);
  if (((_BYTE)a1[9] & 1) == 0)
    MEMORY[0x1CAA32FB4](a1[10], 8);
  if (((_BYTE)a1[6] & 1) == 0)
    MEMORY[0x1CAA32FB4](a1[7], 4);
  if (((_BYTE)a1[3] & 1) == 0)
    MEMORY[0x1CAA32FB4](a1[4], 4);
  v12 = *a1;
  v13 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = v12 - 8;
    do
    {
      v16 = *(unsigned __int8 **)&v15[v14];
      if (v16)
        llvm::MetadataTracking::untrack((uint64_t)&v15[v14], v16);
      v14 -= 8;
    }
    while (v14);
    v12 = *a1;
  }
  if (v12 != (char *)(a1 + 2))
    free(v12);
  return a1;
}

uint64_t sub_1C50220D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *a3;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  *(_QWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = -4096;
  *(_QWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 104) = -4096;
  *(_QWORD *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = -4096;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0x100000000;
  *(_QWORD *)(a1 + 176) = v8;
  if (v9 >= 0xFFFFFFFF)
    v10 = -1;
  else
    v10 = v9;
  *(_DWORD *)(a1 + 184) = v10;
  *(_QWORD *)(a1 + 192) = a4;
  *(_QWORD *)(a1 + 200) = a2;
  *(_QWORD *)(a1 + 208) = *a3;
  *(_QWORD *)(a1 + 216) = a3;
  v11 = *(_QWORD *)(a5 + 24);
  if (v11)
  {
    if (v11 == a5)
    {
      *(_QWORD *)(a1 + 248) = a1 + 224;
      (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 248) = v11;
      *(_QWORD *)(a5 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 248) = 0;
  }
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0x200000000;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 336;
  *(_QWORD *)(a1 + 328) = 0x800000000;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = 0;
  v12 = 688;
  *(_QWORD *)(a1 + 680) = 1;
  do
  {
    *(_QWORD *)(a1 + v12) = -4096;
    v12 += 16;
  }
  while (v12 != 944);
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(_BYTE *)(a1 + 972) = a6;
  return a1;
}

uint64_t sub_1C502221C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Import full type definitions for ThinLTO.";
  v1.n128_u64[1] = 41;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F4A10, "import-full-type-definitions", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F4A10, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Force disable the lazy-loading on-demand of metadata when loading bitcode for importing.";
  v1.n128_u64[1] = 88;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F4AD0, "disable-ondemand-mds-loading", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F4AD0, &dword_1C475E000);
}

void llvm::BitcodeReaderValueList::assignValue(llvm::BitcodeReaderValueList *this@<X0>, llvm::Value *a2@<X2>, unsigned int a3@<W1>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unsigned __int8 **v26;
  char *v27;
  llvm::Value *v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  int32x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  const char *v42;
  uint64_t v43[2];

  v10 = *(_QWORD *)this;
  v9 = *((_QWORD *)this + 1);
  v11 = (v9 - *(_QWORD *)this) >> 5;
  if ((_DWORD)v11 == a3)
  {
    v43[0] = (uint64_t)a2;
    LODWORD(v42) = a4;
    if (v9 >= *((_QWORD *)this + 2))
    {
      v12 = sub_1C500F778((uint64_t *)this, v43, &v42);
    }
    else
    {
      *(_QWORD *)v9 = 6;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = a2;
      if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096)
      {
        if (a2)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v9);
      }
      *(_DWORD *)(v9 + 24) = a4;
      v12 = v9 + 32;
    }
    *((_QWORD *)this + 1) = v12;
    goto LABEL_45;
  }
  if (v11 <= a3)
  {
    sub_1C5010ABC((uint64_t *)this, a3 + 1);
    v10 = *(_QWORD *)this;
  }
  v14 = (unsigned __int8 *)a3;
  v15 = v10 + 32 * a3;
  v16 = *(unsigned __int8 **)(v15 + 16);
  if (!v16)
  {
    if (!a2)
      goto LABEL_44;
    *(_QWORD *)(v15 + 16) = a2;
    if (((unint64_t)a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_44;
    goto LABEL_43;
  }
  if (v16[16] <= 0x14u)
  {
    v18 = (unsigned __int8 **)*((_QWORD *)this + 4);
    v17 = *((_QWORD *)this + 5);
    if ((unint64_t)v18 >= v17)
    {
      v41 = a5;
      v20 = (char *)*((_QWORD *)this + 3);
      v21 = ((char *)v18 - v20) >> 4;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60)
        abort();
      v23 = v17 - (_QWORD)v20;
      if (v23 >> 3 > v22)
        v22 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 60)
          sub_1C4764EE4();
        v25 = (char *)operator new(16 * v24);
        v21 = ((char *)v18 - v20) >> 4;
      }
      else
      {
        v25 = 0;
      }
      v26 = (unsigned __int8 **)&v25[16 * v21];
      v27 = &v25[16 * v24];
      *v26 = v16;
      v26[1] = v14;
      v19 = v26 + 2;
      if (v18 == (unsigned __int8 **)v20)
      {
        a5 = v41;
      }
      else
      {
        a5 = v41;
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v18 - 1);
          v26 -= 2;
          v18 -= 2;
        }
        while (v18 != (unsigned __int8 **)v20);
        v18 = (unsigned __int8 **)*((_QWORD *)this + 3);
      }
      *((_QWORD *)this + 3) = v26;
      *((_QWORD *)this + 4) = v19;
      *((_QWORD *)this + 5) = v27;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v18 = v16;
      v18[1] = v14;
      v19 = v18 + 2;
    }
    *((_QWORD *)this + 4) = v19;
    v28 = *(llvm::Value **)(v15 + 16);
    if (v28 == a2)
      goto LABEL_44;
    if (v28 && v28 != (llvm::Value *)-8192 && v28 != (llvm::Value *)-4096)
    {
      v29 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v29 = *(_QWORD *)(v15 + 8);
      v30 = *(unint64_t **)(v15 + 8);
      if (v30)
      {
        *v30 = *v30 & 7 | v29;
      }
      else
      {
        v31 = *(_QWORD *)(v15 + 16);
        v32 = ***(int32x2_t ****)v31;
        v33 = (unint64_t)v32[303];
        if (v33 <= v29)
        {
          v34 = v32[305].u32[0];
          if (v33 + 16 * v34 > v29)
          {
            v35 = v34 - 1;
            LODWORD(v36) = v35 & ((v31 >> 4) ^ (v31 >> 9));
            v37 = (uint64_t *)(v33 + 16 * v36);
            v38 = *v37;
            if (v31 == *v37)
            {
LABEL_57:
              *v37 = -8192;
              v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
              v31 = *(_QWORD *)(v15 + 16);
            }
            else
            {
              v39 = 1;
              while (v38 != -4096)
              {
                v40 = v36 + v39++;
                v36 = v40 & v35;
                v38 = *(_QWORD *)(v33 + 16 * v36);
                if (v31 == v38)
                {
                  v37 = (uint64_t *)(v33 + 16 * v36);
                  goto LABEL_57;
                }
              }
            }
            *(_BYTE *)(v31 + 17) &= ~1u;
          }
        }
      }
    }
    *(_QWORD *)(v15 + 16) = a2;
    if (a2 == (llvm::Value *)-8192 || a2 == (llvm::Value *)-4096 || !a2)
      goto LABEL_44;
LABEL_43:
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v15);
LABEL_44:
    *(_DWORD *)(v10 + 32 * (_QWORD)v14 + 24) = a4;
    goto LABEL_45;
  }
  if (*(_QWORD *)v16 != *(_QWORD *)a2)
  {
    v43[0] = 92;
    v43[1] = (uint64_t)std::generic_category();
    v42 = "Assigned value does not match type of forward declaration";
    sub_1C5DF1730((_BYTE **)&v42, v43, a5);
    return;
  }
  llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(v15 + 16), a2, (llvm::Value *)1);
  llvm::Value::deleteValue((llvm::Value *)v16);
LABEL_45:
  *a5 = 0;
}

llvm::Type **llvm::BitcodeReaderValueList::getConstantFwdRef(llvm::BitcodeReaderValueList *this, unsigned int a2, llvm::Type *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  llvm::Type **v10;
  _QWORD *v12;
  uint64_t v13;
  llvm::Type *v14;
  llvm::UndefValue *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int32x2_t ****v20;
  uint64_t v21;
  int32x2_t ****v22;
  BOOL v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  unint64_t v29;
  int32x2_t ****v30;
  int32x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int32x2_t *****v36;
  int32x2_t ****v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  int32x2_t *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t *v53;
  int32x2_t ****v54;
  int v55;

  if (*((_DWORD *)this + 14) <= a2)
    return 0;
  v8 = *(_QWORD *)this;
  if (((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 5) <= a2)
  {
    sub_1C5010ABC((uint64_t *)this, a2 + 1);
    v8 = *(_QWORD *)this;
  }
  v9 = a2;
  v10 = *(llvm::Type ***)(v8 + 32 * a2 + 16);
  if (v10)
  {
    if (*v10 != a3)
      llvm::report_fatal_error((llvm *)"Type mismatch in constant table!", (const char *)1);
  }
  else
  {
    v12 = operator new(0x38uLL);
    v12[4] = a3;
    v10 = (llvm::Type **)(v12 + 4);
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v12 + 4;
    v13 = *((_QWORD *)this + 6);
    v12[5] = 0;
    v12[6] = 0x1003A0005;
    v15 = llvm::UndefValue::get((llvm::UndefValue *)(*(_QWORD *)v13 + 1960), v14);
    if (*v12)
    {
      *(_QWORD *)v12[2] = v12[1];
      v16 = v12[1];
      if (v16)
        *(_QWORD *)(v16 + 16) = v12[2];
    }
    *v12 = v15;
    if (v15)
    {
      v19 = *((_QWORD *)v15 + 1);
      v17 = (_QWORD *)((char *)v15 + 8);
      v18 = v19;
      v12[1] = v19;
      if (v19)
        *(_QWORD *)(v18 + 16) = v12 + 1;
      v12[2] = v17;
      *v17 = v12;
    }
    v52 = 6;
    v53 = 0;
    v54 = (int32x2_t ****)(v12 + 4);
    v20 = (int32x2_t ****)(v12 + 4);
    if (v12 != (_QWORD *)-8224)
    {
      v20 = (int32x2_t ****)(v12 + 4);
      if (v12 != (_QWORD *)-4128)
      {
        v20 = (int32x2_t ****)(v12 + 4);
        if (v12 != (_QWORD *)-32)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v52);
          v20 = v54;
        }
      }
    }
    v55 = a4;
    v21 = *(_QWORD *)this + 32 * v9;
    v22 = *(int32x2_t *****)(v21 + 16);
    if (v22 != v20)
    {
      v23 = v22 == (int32x2_t ****)-4096 || v22 == 0;
      if (!v23 && v22 != (int32x2_t ****)-8192)
      {
        v40 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v40 = *(_QWORD *)(v21 + 8);
        v41 = *(unint64_t **)(v21 + 8);
        if (v41)
        {
          *v41 = *v41 & 7 | v40;
        }
        else
        {
          v42 = *(_QWORD *)(v21 + 16);
          v43 = ***(int32x2_t ****)v42;
          v44 = (unint64_t)v43[303];
          if (v44 <= v40)
          {
            v45 = v43[305].u32[0];
            if (v44 + 16 * v45 > v40)
            {
              v46 = v45 - 1;
              LODWORD(v47) = v46 & ((v42 >> 4) ^ (v42 >> 9));
              v48 = (uint64_t *)(v44 + 16 * v47);
              v49 = *v48;
              if (v42 == *v48)
              {
LABEL_57:
                *v48 = -8192;
                v43[304] = vadd_s32(v43[304], (int32x2_t)0x1FFFFFFFFLL);
                v42 = *(_QWORD *)(v21 + 16);
              }
              else
              {
                v50 = 1;
                while (v49 != -4096)
                {
                  v51 = v47 + v50++;
                  v47 = v51 & v46;
                  v49 = *(_QWORD *)(v44 + 16 * v47);
                  if (v42 == v49)
                  {
                    v48 = (uint64_t *)(v44 + 16 * v47);
                    goto LABEL_57;
                  }
                }
              }
              *(_BYTE *)(v42 + 17) &= ~1u;
            }
          }
        }
        v20 = v54;
      }
      *(_QWORD *)(v21 + 16) = v20;
      if (v20 != (int32x2_t ****)-4096 && v20 != (int32x2_t ****)-8192 && v20 != 0)
      {
        v25 = v52;
        v26 = (_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v21 + 8) = *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF8);
        *v26 = v21;
        *(_QWORD *)v21 = v25 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v21 & 7;
        v27 = *(uint64_t **)(v21 + 8);
        if (v27)
          *v27 = *v27 & 7 | (v21 + 8);
      }
    }
    *(_DWORD *)(v21 + 24) = v55;
    if (v54 != (int32x2_t ****)-8192 && v54 != (int32x2_t ****)-4096 && v54 != 0)
    {
      v29 = v52 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF8) = v53;
      if (v53)
      {
        *v53 = *v53 & 7 | v29;
      }
      else
      {
        v30 = v54;
        v31 = ***v54;
        v32 = (unint64_t)v31[303];
        if (v32 <= v29)
        {
          v33 = v31[305].u32[0];
          if (v32 + 16 * v33 > v29)
          {
            v34 = v33 - 1;
            LODWORD(v35) = v34 & ((v54 >> 4) ^ (v54 >> 9));
            v36 = (int32x2_t *****)(v32 + 16 * v35);
            v37 = *v36;
            if (v54 == *v36)
            {
LABEL_46:
              *v36 = (int32x2_t ****)-8192;
              v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
              v30 = v54;
            }
            else
            {
              v38 = 1;
              while (v37 != (int32x2_t ****)-4096)
              {
                v39 = v35 + v38++;
                v35 = v39 & v34;
                v37 = *(int32x2_t *****)(v32 + 16 * v35);
                if (v54 == v37)
                {
                  v36 = (int32x2_t *****)(v32 + 16 * v35);
                  goto LABEL_46;
                }
              }
            }
            *((_BYTE *)v30 + 17) &= ~1u;
          }
        }
      }
    }
  }
  return v10;
}

llvm::Type **llvm::BitcodeReaderValueList::getValueFwdRef(llvm::BitcodeReaderValueList *this, unsigned int a2, llvm::Type *a3, int a4)
{
  uint64_t v8;
  llvm::Type **result;
  uint64_t v10;
  unsigned int v11;
  int32x2_t ****v12;
  uint64_t v13;
  int32x2_t ****v14;
  BOOL v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v21;
  int32x2_t ****v22;
  int32x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int32x2_t *****v28;
  int32x2_t ****v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  int32x2_t ****v47;
  int v48;
  __int16 v49;

  if (*((_DWORD *)this + 14) <= a2)
    return 0;
  v8 = *(_QWORD *)this;
  if (((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 5) <= a2)
  {
    sub_1C5010ABC((uint64_t *)this, a2 + 1);
    v8 = *(_QWORD *)this;
  }
  result = *(llvm::Type ***)(v8 + 32 * a2 + 16);
  if (result)
  {
    if (a3 && *result != a3)
      return 0;
  }
  else
  {
    if (!a3)
      return 0;
    v44 = a2;
    v10 = operator new();
    v49 = 257;
    *(_QWORD *)v10 = a3;
    *(_QWORD *)(v10 + 8) = 0;
    v11 = *(_DWORD *)(v10 + 20) & 0xC0000000;
    *(_DWORD *)(v10 + 16) = 21;
    *(_DWORD *)(v10 + 20) = v11;
    *(_QWORD *)(v10 + 24) = 0;
    *(_DWORD *)(v10 + 32) = 0;
    llvm::Value::setName((uint64_t ***)v10, (uint64_t)&v45);
    v45 = 6;
    v46 = 0;
    v47 = (int32x2_t ****)v10;
    v12 = (int32x2_t ****)v10;
    if (v10 != -8192)
    {
      v12 = (int32x2_t ****)v10;
      if (v10 != -4096)
      {
        v12 = (int32x2_t ****)v10;
        if (v10)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v45);
          v12 = v47;
        }
      }
    }
    v48 = a4;
    v13 = *(_QWORD *)this + 32 * v44;
    v14 = *(int32x2_t *****)(v13 + 16);
    if (v14 != v12)
    {
      v15 = v14 == (int32x2_t ****)-4096 || v14 == 0;
      if (!v15 && v14 != (int32x2_t ****)-8192)
      {
        v32 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v32 = *(_QWORD *)(v13 + 8);
        v33 = *(unint64_t **)(v13 + 8);
        if (v33)
        {
          *v33 = *v33 & 7 | v32;
        }
        else
        {
          v34 = *(_QWORD *)(v13 + 16);
          v35 = ***(int32x2_t ****)v34;
          v36 = (unint64_t)v35[303];
          if (v36 <= v32)
          {
            v37 = v35[305].u32[0];
            if (v36 + 16 * v37 > v32)
            {
              v38 = v37 - 1;
              LODWORD(v39) = v38 & ((v34 >> 4) ^ (v34 >> 9));
              v40 = (uint64_t *)(v36 + 16 * v39);
              v41 = *v40;
              if (v34 == *v40)
              {
LABEL_53:
                *v40 = -8192;
                v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                v34 = *(_QWORD *)(v13 + 16);
              }
              else
              {
                v42 = 1;
                while (v41 != -4096)
                {
                  v43 = v39 + v42++;
                  v39 = v43 & v38;
                  v41 = *(_QWORD *)(v36 + 16 * v39);
                  if (v34 == v41)
                  {
                    v40 = (uint64_t *)(v36 + 16 * v39);
                    goto LABEL_53;
                  }
                }
              }
              *(_BYTE *)(v34 + 17) &= ~1u;
            }
          }
        }
        v12 = v47;
      }
      *(_QWORD *)(v13 + 16) = v12;
      if (v12 != (int32x2_t ****)-4096 && v12 != (int32x2_t ****)-8192 && v12 != 0)
      {
        v17 = v45;
        v18 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v13 + 8) = *(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF8);
        *v18 = v13;
        *(_QWORD *)v13 = v17 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v13 & 7;
        v19 = *(uint64_t **)(v13 + 8);
        if (v19)
          *v19 = *v19 & 7 | (v13 + 8);
      }
    }
    *(_DWORD *)(v13 + 24) = v48;
    if (v47 != (int32x2_t ****)-8192 && v47 != (int32x2_t ****)-4096 && v47 != 0)
    {
      v21 = v45 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF8) = v46;
      if (v46)
      {
        *v46 = *v46 & 7 | v21;
      }
      else
      {
        v22 = v47;
        v23 = ***v47;
        v24 = (unint64_t)v23[303];
        if (v24 <= v21)
        {
          v25 = v23[305].u32[0];
          if (v24 + 16 * v25 > v21)
          {
            v26 = v25 - 1;
            LODWORD(v27) = v26 & ((v47 >> 4) ^ (v47 >> 9));
            v28 = (int32x2_t *****)(v24 + 16 * v27);
            v29 = *v28;
            if (v47 == *v28)
            {
LABEL_38:
              *v28 = (int32x2_t ****)-8192;
              v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
              v22 = v47;
            }
            else
            {
              v30 = 1;
              while (v29 != (int32x2_t ****)-4096)
              {
                v31 = v27 + v30++;
                v27 = v31 & v26;
                v29 = *(int32x2_t *****)(v24 + 16 * v27);
                if (v47 == v29)
                {
                  v28 = (int32x2_t *****)(v24 + 16 * v27);
                  goto LABEL_38;
                }
              }
            }
            *((_BYTE *)v22 + 17) &= ~1u;
          }
        }
      }
    }
    return (llvm::Type **)v10;
  }
  return result;
}

void llvm::BitcodeReaderValueList::resolveConstantForwardRefs(llvm::BitcodeReaderValueList *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::FixedVectorType ***v32;
  uint64_t v33;
  llvm::UndefValue *Impl;
  _QWORD **v35;
  llvm::Value *v36;
  int v37;
  uint64_t v38;
  _QWORD **v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[66];

  v52[64] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  v4 = 126 - 2 * __clz((uint64_t)(v3 - v2) >> 4);
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  sub_1C502314C(v2, v3, v5, 1);
  v50 = v52;
  v51 = 0x4000000000;
  v6 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) != v6)
  {
    while (1)
    {
      v9 = *(_QWORD *)(v6 - 16);
      v7 = v6 - 16;
      v8 = v9;
      v10 = *(llvm::Value **)(*(_QWORD *)this + 32 * *(unsigned int *)(v7 + 8) + 16);
      *((_QWORD *)this + 4) = v7;
      v11 = *(_QWORD *)(v9 + 8);
      if (v11)
        break;
LABEL_45:
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v8, v10, (llvm::Value *)1);
      llvm::Value::~Value((llvm::Value *)v8, v36);
      v37 = *(_DWORD *)(v8 + 20);
      if ((v37 & 0x40000000) != 0)
      {
        v45 = *(char **)(v8 - 8);
        v44 = (char *)(v8 - 8);
        v43 = v45;
        v46 = v37 & 0x7FFFFFF;
        if ((_DWORD)v46)
        {
          v47 = 32 * v46;
          do
          {
            v48 = &v43[v47];
            if (*(_QWORD *)&v43[v47 - 32])
            {
              **((_QWORD **)v48 - 2) = *((_QWORD *)v48 - 3);
              v49 = *((_QWORD *)v48 - 3);
              if (v49)
                *(_QWORD *)(v49 + 16) = *((_QWORD *)v48 - 2);
            }
            v47 -= 32;
          }
          while (v47);
        }
        operator delete(v43);
        v42 = v44;
      }
      else
      {
        v38 = v37 & 0x7FFFFFF;
        if ((_DWORD)v38)
        {
          v39 = (_QWORD **)(v8 - 16);
          v40 = -32 * v38;
          do
          {
            if (*(v39 - 2))
            {
              **v39 = *(v39 - 1);
              v41 = (uint64_t)*(v39 - 1);
              if (v41)
                *(_QWORD *)(v41 + 16) = *v39;
            }
            v39 -= 4;
            v40 += 32;
          }
          while (v40);
        }
        v42 = (char *)(v8 - 32 * v38);
        if (v37 < 0)
          v42 = &v42[-*((_QWORD *)v42 - 1) - 8];
      }
      operator delete(v42);
      v6 = *((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) == v6)
      {
        if (v50 != v52)
          free(v50);
        return;
      }
    }
    v12 = (uint64_t *)((char *)v10 + 8);
    while (1)
    {
      v13 = *(_QWORD *)(v11 + 24);
      v14 = *(unsigned __int8 *)(v13 + 16);
      if ((v14 - 21) <= 0xFFFFFFEE)
      {
        if (*(_QWORD *)v11)
        {
          **(_QWORD **)(v11 + 16) = *(_QWORD *)(v11 + 8);
          v15 = *(_QWORD *)(v11 + 8);
          if (v15)
            *(_QWORD *)(v15 + 16) = *(_QWORD *)(v11 + 16);
        }
        *(_QWORD *)v11 = v10;
        if (v10)
        {
          v16 = *v12;
          *(_QWORD *)(v11 + 8) = *v12;
          if (v16)
            *(_QWORD *)(v16 + 16) = v11 + 8;
          *(_QWORD *)(v11 + 16) = v12;
          *v12 = v11;
        }
        goto LABEL_44;
      }
      v17 = *(_DWORD *)(v13 + 20);
      if ((v17 & 0x40000000) != 0)
      {
        v19 = *(_QWORD *)(v13 - 8);
        v18 = v17 & 0x7FFFFFF;
      }
      else
      {
        v18 = v17 & 0x7FFFFFF;
        v19 = v13 - 32 * v18;
      }
      v20 = v19 + 32 * v18;
      if (v18)
      {
        do
        {
          v21 = *(llvm::Value **)v19;
          if (*(_BYTE *)(*(_QWORD *)v19 + 16) == 5)
          {
            v22 = *(llvm::Value **)v19;
            if (*((_WORD *)v21 + 9) == 58)
            {
              v22 = v10;
              if (v21 != (llvm::Value *)v8)
              {
                v23 = (_QWORD *)*((_QWORD *)this + 3);
                v24 = *((_QWORD *)this + 4) - (_QWORD)v23;
                if (v24)
                {
                  v25 = v24 >> 4;
                  do
                  {
                    v26 = v25 >> 1;
                    v27 = &v23[2 * (v25 >> 1)];
                    v29 = *v27;
                    v28 = v27 + 2;
                    v25 += ~(v25 >> 1);
                    if (v29 < (unint64_t)v21)
                      v23 = v28;
                    else
                      v25 = v26;
                  }
                  while (v25);
                }
                v22 = *(llvm::Value **)(*(_QWORD *)this + 32 * *((unsigned int *)v23 + 2) + 16);
              }
            }
          }
          else
          {
            v22 = *(llvm::Value **)v19;
          }
          v30 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 8);
            v30 = v51;
          }
          *((_QWORD *)v50 + v30) = v22;
          LODWORD(v51) = v51 + 1;
          v19 += 32;
        }
        while (v19 != v20);
        v14 = *(unsigned __int8 *)(v13 + 16);
      }
      if (v14 == 8)
        break;
      v32 = (llvm::FixedVectorType ***)v50;
      v33 = v51;
      if (v14 != 10)
      {
        if (v14 == 9)
          v31 = (uint64_t)llvm::ConstantStruct::get(*(llvm::ConstantAggregateZero **)v13, (llvm::Type *)v50, v51);
        else
          v31 = llvm::ConstantExpr::getWithOperands(v13, (uint64_t)v50, (llvm::Constant *)v51, *(llvm::Constant **)v13, 0, 0);
        goto LABEL_42;
      }
      Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v50, (llvm::Type *)v51);
      if (!Impl)
      {
        llvm::FixedVectorType::get(**v32, (llvm::Type *)v33);
        v31 = sub_1C537B3A4(**v35 + 1288, (uint64_t)v35, v32, v33);
        goto LABEL_42;
      }
LABEL_43:
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, Impl, (llvm::Value *)1);
      llvm::Constant::destroyConstant((int32x2_t ****)v13);
      LODWORD(v51) = 0;
LABEL_44:
      v11 = *(_QWORD *)(v8 + 8);
      if (!v11)
        goto LABEL_45;
    }
    v31 = (uint64_t)llvm::ConstantArray::get(*(llvm::PoisonValue **)v13, (llvm::Type *)v50, v51);
LABEL_42:
    Impl = (llvm::UndefValue *)v31;
    goto LABEL_43;
  }
}

uint64_t sub_1C502314C(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t k;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t j;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t m;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unint64_t n;

  v7 = result;
LABEL_2:
  v8 = (unint64_t *)(a2 - 16);
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = a2 - i;
    v11 = (uint64_t)(a2 - i) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v44 = *(_QWORD *)(a2 - 16);
        v45 = *(_QWORD *)i;
        if (v44 >= *(_QWORD *)i)
        {
          if (v45 < v44)
            return result;
          v47 = *(_DWORD *)(a2 - 8);
          v46 = *(_DWORD *)(i + 8);
          if (v47 >= v46)
            return result;
        }
        else
        {
          v46 = *(_DWORD *)(i + 8);
          v47 = *(_DWORD *)(a2 - 8);
        }
        *(_QWORD *)i = v44;
        *(_QWORD *)(a2 - 16) = v45;
        *(_DWORD *)(i + 8) = v47;
        *(_DWORD *)(a2 - 8) = v46;
        return result;
      case 3:
        return (uint64_t)sub_1C5023B0C((unint64_t *)i, (unint64_t *)(i + 16), (unint64_t *)(a2 - 16));
      case 4:
        return (uint64_t)sub_1C5023E50(i, i + 16, i + 32, a2 - 16);
      case 5:
        return (uint64_t)sub_1C5023F50(i, i + 16, i + 32, i + 48, (unint64_t *)(a2 - 16));
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v63 = (unint64_t)(v11 - 2) >> 1;
            v64 = v63;
            while (1)
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = i + 16 * v66;
                if (2 * v65 + 2 < v11)
                {
                  v68 = *(_QWORD *)(v67 + 16);
                  if (*(_QWORD *)v67 < v68
                    || v68 >= *(_QWORD *)v67 && *(_DWORD *)(i + 16 * v66 + 8) < *(_DWORD *)(v67 + 24))
                  {
                    v67 += 16;
                    v66 = 2 * v65 + 2;
                  }
                }
                v69 = i + 16 * v65;
                v70 = *(_QWORD *)v67;
                v71 = *(_QWORD *)v69;
                if (*(_QWORD *)v67 >= *(_QWORD *)v69)
                {
                  if (v71 < v70)
                  {
                    v72 = *(_DWORD *)(v69 + 8);
                    v73 = *(_DWORD *)(v67 + 8);
LABEL_131:
                    *(_QWORD *)v69 = v70;
                    *(_DWORD *)(v69 + 8) = v73;
                    if (v63 >= v66)
                    {
                      while (1)
                      {
                        v75 = 2 * v66;
                        v66 = (2 * v66) | 1;
                        v74 = i + 16 * v66;
                        v76 = v75 + 2;
                        if (v76 < v11)
                        {
                          v77 = *(_QWORD *)(v74 + 16);
                          if (*(_QWORD *)v74 < v77
                            || v77 >= *(_QWORD *)v74 && *(_DWORD *)(i + 16 * v66 + 8) < *(_DWORD *)(v74 + 24))
                          {
                            v74 += 16;
                            v66 = v76;
                          }
                        }
                        v78 = *(_QWORD *)v74;
                        if (*(_QWORD *)v74 < v71)
                          break;
                        v79 = *(_DWORD *)(v74 + 8);
                        if (v71 >= v78 && v79 < v72)
                          break;
                        *(_QWORD *)v67 = v78;
                        *(_DWORD *)(v67 + 8) = v79;
                        v67 = v74;
                        if (v63 < v66)
                          goto LABEL_133;
                      }
                    }
                    v74 = v67;
LABEL_133:
                    *(_QWORD *)v74 = v71;
                    *(_DWORD *)(v74 + 8) = v72;
                    goto LABEL_134;
                  }
                  v73 = *(_DWORD *)(v67 + 8);
                  v72 = *(_DWORD *)(i + 16 * v65 + 8);
                  if (v73 >= v72)
                    goto LABEL_131;
                }
              }
LABEL_134:
              v64 = v65 - 1;
              if (!v65)
              {
                while (1)
                {
                  v81 = 0;
                  v82 = *(_QWORD *)i;
                  v83 = *(_DWORD *)(i + 8);
                  v84 = v11 - 2;
                  if (v11 < 2)
                    v84 = v11 - 1;
                  v85 = v84 >> 1;
                  v86 = i;
                  do
                  {
                    v87 = v86;
                    v88 = v81 + 1;
                    v86 += 16 * (v81 + 1);
                    v89 = 2 * v81;
                    result = (2 * v81) | 1;
                    v81 = result;
                    v90 = v89 + 2;
                    if (v90 < v11)
                    {
                      result = v86 + 16;
                      v91 = *(_QWORD *)(v86 + 16);
                      if (*(_QWORD *)v86 < v91
                        || v91 >= *(_QWORD *)v86 && *(_DWORD *)(v87 + 16 * v88 + 8) < *(_DWORD *)(v86 + 24))
                      {
                        v86 += 16;
                        v81 = v90;
                      }
                    }
                    *(_QWORD *)v87 = *(_QWORD *)v86;
                    *(_DWORD *)(v87 + 8) = *(_DWORD *)(v86 + 8);
                  }
                  while (v81 <= v85);
                  if (v86 == a2 - 16)
                  {
                    *(_QWORD *)v86 = v82;
                    *(_DWORD *)(v86 + 8) = v83;
                  }
                  else
                  {
                    *(_QWORD *)v86 = *(_QWORD *)(a2 - 16);
                    *(_DWORD *)(v86 + 8) = *(_DWORD *)(a2 - 8);
                    *(_QWORD *)(a2 - 16) = v82;
                    *(_DWORD *)(a2 - 8) = v83;
                    v92 = v86 - i + 16;
                    if (v92 >= 17)
                    {
                      v93 = ((unint64_t)v92 >> 4) - 2;
                      v94 = v93 >> 1;
                      v95 = i + 16 * (v93 >> 1);
                      v96 = *(_QWORD *)v95;
                      v97 = *(_QWORD *)v86;
                      if (*(_QWORD *)v95 < *(_QWORD *)v86)
                      {
                        v98 = *(_DWORD *)(v86 + 8);
                        result = *(unsigned int *)(v95 + 8);
LABEL_165:
                        *(_QWORD *)v86 = v96;
                        *(_DWORD *)(v86 + 8) = result;
                        if (v93 >= 2)
                        {
                          while (1)
                          {
                            v100 = v94 - 1;
                            v94 = (v94 - 1) >> 1;
                            v99 = i + 16 * v94;
                            v101 = *(_QWORD *)v99;
                            if (*(_QWORD *)v99 >= v97)
                            {
                              if (v97 < v101)
                                break;
                              result = *(unsigned int *)(i + 16 * v94 + 8);
                              if (result >= v98)
                                break;
                            }
                            else
                            {
                              result = *(unsigned int *)(v99 + 8);
                            }
                            *(_QWORD *)v95 = v101;
                            *(_DWORD *)(v95 + 8) = result;
                            v95 = i + 16 * v94;
                            if (v100 <= 1)
                              goto LABEL_172;
                          }
                        }
                        v99 = v95;
LABEL_172:
                        *(_QWORD *)v99 = v97;
                        *(_DWORD *)(v99 + 8) = v98;
                        goto LABEL_173;
                      }
                      if (v97 >= v96)
                      {
                        result = *(unsigned int *)(i + 16 * v94 + 8);
                        v98 = *(_DWORD *)(v86 + 8);
                        if (result < v98)
                          goto LABEL_165;
                      }
                    }
                  }
LABEL_173:
                  a2 -= 16;
                  if (v11-- <= 2)
                    return result;
                }
              }
            }
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = i + 16 * ((unint64_t)v11 >> 1);
          if ((unint64_t)v10 < 0x801)
          {
            result = (uint64_t)sub_1C5023B0C((unint64_t *)(v7 + 16 * ((unint64_t)v11 >> 1)), (unint64_t *)v7, (unint64_t *)(a2 - 16));
          }
          else
          {
            sub_1C5023B0C((unint64_t *)v7, (unint64_t *)(v7 + 16 * ((unint64_t)v11 >> 1)), (unint64_t *)(a2 - 16));
            sub_1C5023B0C((unint64_t *)(v7 + 16), (unint64_t *)(v13 - 16), (unint64_t *)(a2 - 32));
            sub_1C5023B0C((unint64_t *)(v7 + 32), (unint64_t *)(v7 + 16 + 16 * v12), (unint64_t *)(a2 - 48));
            result = (uint64_t)sub_1C5023B0C((unint64_t *)(v13 - 16), (unint64_t *)v13, (unint64_t *)(v7 + 16 + 16 * v12));
            v14 = *(_QWORD *)v7;
            *(_QWORD *)v7 = *(_QWORD *)v13;
            *(_QWORD *)v13 = v14;
            LODWORD(v14) = *(_DWORD *)(v7 + 8);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v13 + 8);
            *(_DWORD *)(v13 + 8) = v14;
          }
          --a3;
          v15 = *(_QWORD *)v7;
          if ((a4 & 1) == 0)
          {
            v16 = *(_QWORD *)(v7 - 16);
            if (v16 >= v15)
            {
              if (v15 < v16)
              {
                v17 = *(_DWORD *)(v7 + 8);
              }
              else
              {
                v17 = *(_DWORD *)(v7 + 8);
                if (*(_DWORD *)(v7 - 8) < v17)
                  goto LABEL_13;
              }
              v33 = *v8;
              if (v15 >= *v8 && (v33 < v15 || v17 >= *(_DWORD *)(a2 - 8)))
              {
                for (i = v7 + 16;
                      i < a2 && v15 >= *(_QWORD *)i && (*(_QWORD *)i < v15 || v17 >= *(_DWORD *)(i + 8));
              }
              else
              {
                i = v7;
                do
                {
                  v35 = *(_QWORD *)(i + 16);
                  i += 16;
                  v34 = v35;
                }
                while (v15 >= v35 && (v34 < v15 || v17 >= *(_DWORD *)(i + 8)));
              }
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 16; v15 < v33 || v33 >= v15 && v17 < *(_DWORD *)(j + 8); j -= 16)
                {
                  v37 = *(_QWORD *)(j - 16);
                  v33 = v37;
                }
              }
              if (i < j)
              {
                v38 = *(_QWORD *)i;
                v39 = *(_QWORD *)j;
                do
                {
                  *(_QWORD *)i = v39;
                  *(_QWORD *)j = v38;
                  v40 = *(_QWORD *)(i + 16);
                  i += 16;
                  v38 = v40;
                  v41 = *(_DWORD *)(i - 8);
                  *(_DWORD *)(i - 8) = *(_DWORD *)(j + 8);
                  *(_DWORD *)(j + 8) = v41;
                  while (v15 >= v38 && (v38 < v15 || v17 >= *(_DWORD *)(i + 8)))
                  {
                    v42 = *(_QWORD *)(i + 16);
                    i += 16;
                    v38 = v42;
                  }
                  do
                  {
                    do
                    {
                      v43 = *(_QWORD *)(j - 16);
                      j -= 16;
                      v39 = v43;
                    }
                    while (v15 < v43);
                  }
                  while (v39 >= v15 && v17 < *(_DWORD *)(j + 8));
                }
                while (i < j);
              }
              if (i - 16 != v7)
              {
                *(_QWORD *)v7 = *(_QWORD *)(i - 16);
                *(_DWORD *)(v7 + 8) = *(_DWORD *)(i - 8);
              }
              a4 = 0;
              *(_QWORD *)(i - 16) = v15;
              *(_DWORD *)(i - 8) = v17;
              continue;
            }
          }
LABEL_13:
          v18 = 0;
          v19 = *(_DWORD *)(v7 + 8);
          while (1)
          {
            v20 = *(_QWORD *)(v7 + v18 + 16);
            if (v20 >= v15 && (v15 < v20 || *(_DWORD *)(v7 + v18 + 24) >= v19))
              break;
            v18 += 16;
          }
          v21 = v7 + v18 + 16;
          if (v18)
          {
            v22 = *v8;
            for (k = a2 - 16; v22 >= v15 && (v15 < v22 || *(_DWORD *)(k + 8) >= v19); k -= 16)
            {
              v24 = *(_QWORD *)(k - 16);
              v22 = v24;
            }
          }
          else
          {
            k = a2;
            if (v21 < a2)
            {
              v25 = *v8;
              k = a2 - 16;
              if (*v8 >= v15)
              {
                k = a2 - 16;
                do
                {
                  if (v15 >= v25)
                  {
                    if (v21 >= k || *(_DWORD *)(k + 8) < v19)
                      break;
                  }
                  else if (v21 >= k)
                  {
                    break;
                  }
                  v26 = *(_QWORD *)(k - 16);
                  k -= 16;
                  v25 = v26;
                }
                while (v26 >= v15);
              }
            }
          }
          if (v21 >= k)
          {
            i = v21;
          }
          else
          {
            v27 = *(_QWORD *)k;
            i = v21;
            v28 = k;
            do
            {
              *(_QWORD *)i = v27;
              *(_QWORD *)v28 = v20;
              v29 = *(_DWORD *)(i + 8);
              *(_DWORD *)(i + 8) = *(_DWORD *)(v28 + 8);
              *(_DWORD *)(v28 + 8) = v29;
              do
              {
                do
                {
                  v30 = *(_QWORD *)(i + 16);
                  i += 16;
                  v20 = v30;
                }
                while (v30 < v15);
              }
              while (v15 >= v20 && *(_DWORD *)(i + 8) < v19);
              do
              {
                v31 = *(_QWORD *)(v28 - 16);
                v28 -= 16;
                v27 = v31;
              }
              while (v31 >= v15 && (v15 < v27 || *(_DWORD *)(v28 + 8) >= v19));
            }
            while (i < v28);
          }
          if (i - 16 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(i - 16);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(i - 8);
          }
          *(_QWORD *)(i - 16) = v15;
          *(_DWORD *)(i - 8) = v19;
          if (v21 < k)
          {
LABEL_50:
            result = sub_1C502314C(v7, i - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v32 = sub_1C5023C54(v7, i - 16);
          result = sub_1C5023C54(i, a2);
          if (!(_DWORD)result)
          {
            if (v32)
              continue;
            goto LABEL_50;
          }
          a2 = i - 16;
          if (v32)
            return result;
          goto LABEL_2;
        }
        v48 = i + 16;
        v50 = i == a2 || v48 == a2;
        if ((a4 & 1) == 0)
        {
          if (v50)
            return result;
          for (m = i + 8; ; m += 16)
          {
            v104 = v7;
            v7 = v48;
            v105 = *(_QWORD *)(v104 + 16);
            v106 = *(_QWORD *)v104;
            if (v105 < *(_QWORD *)v104)
              break;
            if (v106 >= v105)
            {
              v107 = *(_DWORD *)(v104 + 24);
              if (v107 < *(_DWORD *)(v104 + 8))
                goto LABEL_185;
            }
LABEL_191:
            v48 = v7 + 16;
            if (v7 + 16 == a2)
              return result;
          }
          v107 = *(_DWORD *)(v104 + 24);
LABEL_185:
          for (n = m; ; n -= 16)
          {
            *(_QWORD *)(n + 8) = v106;
            *(_DWORD *)(n + 16) = *(_DWORD *)n;
            v106 = *(_QWORD *)(n - 24);
            if (v105 >= v106 && (v106 < v105 || v107 >= *(_DWORD *)(n - 16)))
              break;
          }
          *(_QWORD *)(n - 8) = v105;
          *(_DWORD *)n = v107;
          goto LABEL_191;
        }
        if (v50)
          return result;
        v51 = 0;
        v52 = i;
        do
        {
          v53 = v52;
          v52 = v48;
          v54 = *(_QWORD *)(v53 + 16);
          v55 = *(_QWORD *)v53;
          if (v54 >= *(_QWORD *)v53)
          {
            if (v55 < v54)
              goto LABEL_117;
            v56 = *(_DWORD *)(v53 + 24);
            v57 = *(_DWORD *)(v53 + 8);
            if (v56 >= v57)
              goto LABEL_117;
          }
          else
          {
            v56 = *(_DWORD *)(v53 + 24);
            v57 = *(_DWORD *)(v53 + 8);
          }
          *(_QWORD *)(v53 + 16) = v55;
          *(_DWORD *)(v52 + 8) = v57;
          v58 = i;
          if (v53 == i)
            goto LABEL_116;
          v59 = v51;
          while (1)
          {
            v60 = *(_QWORD *)(i + v59 - 16);
            if (v54 >= v60)
              break;
            v61 = *(_DWORD *)(i + v59 - 8);
LABEL_113:
            v53 -= 16;
            v62 = i + v59;
            *(_QWORD *)v62 = v60;
            *(_DWORD *)(v62 + 8) = v61;
            v59 -= 16;
            if (!v59)
            {
              v58 = i;
              goto LABEL_116;
            }
          }
          if (v60 >= v54)
          {
            v58 = i + v59;
            v61 = *(_DWORD *)(i + v59 - 8);
            if (v56 >= v61)
              goto LABEL_116;
            goto LABEL_113;
          }
          v58 = v53;
LABEL_116:
          *(_QWORD *)v58 = v54;
          *(_DWORD *)(v58 + 8) = v56;
LABEL_117:
          v48 = v52 + 16;
          v51 += 16;
        }
        while (v52 + 16 != a2);
        return result;
    }
  }
}

unint64_t *sub_1C5023B0C(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;

  v3 = *a2;
  v4 = *result;
  if (*a2 >= *result && (v4 < v3 || *((_DWORD *)a2 + 2) >= *((_DWORD *)result + 2)))
  {
    v8 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v8)
        return result;
      v10 = *((_DWORD *)a3 + 2);
      v9 = *((_DWORD *)a2 + 2);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *((_DWORD *)a2 + 2);
      v10 = *((_DWORD *)a3 + 2);
    }
    *a2 = v8;
    *a3 = v3;
    *((_DWORD *)a2 + 2) = v10;
    *((_DWORD *)a3 + 2) = v9;
    v11 = *a2;
    v12 = *result;
    if (*a2 >= *result)
    {
      if (v12 < v11)
        return result;
      v14 = *((_DWORD *)a2 + 2);
      v13 = *((_DWORD *)result + 2);
      if (v14 >= v13)
        return result;
    }
    else
    {
      v13 = *((_DWORD *)result + 2);
      v14 = *((_DWORD *)a2 + 2);
    }
    *result = v11;
    *a2 = v12;
    *((_DWORD *)result + 2) = v14;
    *((_DWORD *)a2 + 2) = v13;
    return result;
  }
  v5 = *a3;
  if (*a3 < v3)
  {
    v6 = *((_DWORD *)a3 + 2);
LABEL_6:
    *result = v5;
    *a3 = v4;
    v7 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = v6;
    *((_DWORD *)a3 + 2) = v7;
    return result;
  }
  if (v3 >= v5)
  {
    v6 = *((_DWORD *)a3 + 2);
    v15 = *((_DWORD *)a2 + 2);
    if (v6 < v15)
      goto LABEL_6;
  }
  else
  {
    v15 = *((_DWORD *)a2 + 2);
  }
  *result = v3;
  *a2 = v4;
  v16 = *((_DWORD *)result + 2);
  *((_DWORD *)result + 2) = v15;
  *((_DWORD *)a2 + 2) = v16;
  v17 = *a3;
  if (*a3 < v4)
  {
    v18 = *((_DWORD *)a3 + 2);
LABEL_24:
    *a2 = v17;
    *a3 = v4;
    *((_DWORD *)a2 + 2) = v18;
    *((_DWORD *)a3 + 2) = v16;
    return result;
  }
  if (v4 >= v17)
  {
    v18 = *((_DWORD *)a3 + 2);
    if (v18 < v16)
      goto LABEL_24;
  }
  return result;
}

BOOL sub_1C5023C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 16);
      v7 = *(_QWORD *)a1;
      if (v6 < *(_QWORD *)a1)
      {
        v8 = *(_DWORD *)(a1 + 8);
        v9 = *(_DWORD *)(a2 - 8);
LABEL_30:
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 16) = v7;
        *(_DWORD *)(a1 + 8) = v9;
        *(_DWORD *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(_DWORD *)(a2 - 8);
        v8 = *(_DWORD *)(a1 + 8);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      sub_1C5023B0C((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      sub_1C5023E50(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1C5023F50(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16));
      return 1;
    default:
      v10 = a1 + 32;
      sub_1C5023B0C((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(_QWORD *)v11;
  v15 = *(_QWORD *)v10;
  if (*(_QWORD *)v11 >= *(_QWORD *)v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *(_DWORD *)(v11 + 8);
    v17 = *(_DWORD *)(v10 + 8);
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = *(_DWORD *)(v11 + 8);
    v17 = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)v11 = v15;
  *(_DWORD *)(v11 + 8) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(_QWORD *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = a1 + v19 + 32;
        goto LABEL_20;
      }
      v22 = *(_DWORD *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = v10;
LABEL_20:
        *(_QWORD *)v18 = v14;
        *(_DWORD *)(v18 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(_DWORD *)(v20 + 24);
    }
    v10 -= 16;
    *(_QWORD *)(v20 + 32) = v21;
    *(_DWORD *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

unint64_t *sub_1C5023E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;

  result = sub_1C5023B0C((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  v9 = *(_QWORD *)a4;
  v10 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 >= *(_QWORD *)a3)
  {
    if (v10 < v9)
      return result;
    v12 = *(_DWORD *)(a4 + 8);
    v11 = *(_DWORD *)(a3 + 8);
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = *(_DWORD *)(a3 + 8);
    v12 = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)a3 = v9;
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a3 + 8) = v12;
  *(_DWORD *)(a4 + 8) = v11;
  v13 = *(_QWORD *)a3;
  v14 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 >= *(_QWORD *)a2)
  {
    if (v14 < v13)
      return result;
    v16 = *(_DWORD *)(a3 + 8);
    v15 = *(_DWORD *)(a2 + 8);
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = *(_DWORD *)(a2 + 8);
    v16 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)a3 = v14;
  *(_DWORD *)(a2 + 8) = v16;
  *(_DWORD *)(a3 + 8) = v15;
  v17 = *(_QWORD *)a2;
  v18 = *(_QWORD *)a1;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
    v19 = *(_DWORD *)(a1 + 8);
    v20 = *(_DWORD *)(a2 + 8);
LABEL_15:
    *(_QWORD *)a1 = v17;
    *(_QWORD *)a2 = v18;
    *(_DWORD *)(a1 + 8) = v20;
    *(_DWORD *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = *(_DWORD *)(a2 + 8);
    v19 = *(_DWORD *)(a1 + 8);
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

unint64_t *sub_1C5023F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;

  result = sub_1C5023E50(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *(_QWORD *)a4;
  if (*a5 >= *(_QWORD *)a4)
  {
    if (v12 < v11)
      return result;
    v14 = *((_DWORD *)a5 + 2);
    v13 = *(_DWORD *)(a4 + 8);
    if (v14 >= v13)
      return result;
  }
  else
  {
    v13 = *(_DWORD *)(a4 + 8);
    v14 = *((_DWORD *)a5 + 2);
  }
  *(_QWORD *)a4 = v11;
  *a5 = v12;
  *(_DWORD *)(a4 + 8) = v14;
  *((_DWORD *)a5 + 2) = v13;
  v15 = *(_QWORD *)a4;
  v16 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 >= *(_QWORD *)a3)
  {
    if (v16 < v15)
      return result;
    v18 = *(_DWORD *)(a4 + 8);
    v17 = *(_DWORD *)(a3 + 8);
    if (v18 >= v17)
      return result;
  }
  else
  {
    v17 = *(_DWORD *)(a3 + 8);
    v18 = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)a3 = v15;
  *(_QWORD *)a4 = v16;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a4 + 8) = v17;
  v19 = *(_QWORD *)a3;
  v20 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 >= *(_QWORD *)a2)
  {
    if (v20 < v19)
      return result;
    v22 = *(_DWORD *)(a3 + 8);
    v21 = *(_DWORD *)(a2 + 8);
    if (v22 >= v21)
      return result;
  }
  else
  {
    v21 = *(_DWORD *)(a2 + 8);
    v22 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)a2 = v19;
  *(_QWORD *)a3 = v20;
  *(_DWORD *)(a2 + 8) = v22;
  *(_DWORD *)(a3 + 8) = v21;
  v23 = *(_QWORD *)a2;
  v24 = *(_QWORD *)a1;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
    v25 = *(_DWORD *)(a1 + 8);
    v26 = *(_DWORD *)(a2 + 8);
LABEL_9:
    *(_QWORD *)a1 = v23;
    *(_QWORD *)a2 = v24;
    *(_DWORD *)(a1 + 8) = v26;
    *(_DWORD *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v26 = *(_DWORD *)(a2 + 8);
    v25 = *(_DWORD *)(a1 + 8);
    if (v26 < v25)
      goto LABEL_9;
  }
  return result;
}

uint64_t LLVMWriteBitcodeToFile(const llvm::Module *a1, char *a2)
{
  size_t v4;
  uint64_t v5;
  _BYTE v7[96];
  _DWORD v8[4];

  v8[0] = 0;
  std::system_category();
  if (a2)
    v4 = strlen(a2);
  else
    v4 = 0;
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v7, a2, v4, (uint64_t)v8, 0);
  if (v8[0])
  {
    v5 = 0xFFFFFFFFLL;
  }
  else
  {
    llvm::WriteBitcodeToFile(a1, (llvm::raw_ostream *)v7, 0, 0, 0, 0);
    v5 = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v7);
  return v5;
}

uint64_t LLVMWriteBitcodeToFD(const llvm::Module *a1, int a2, int a3, int a4)
{
  _BYTE v6[96];

  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v6, a2, a3 != 0, a4 != 0, 0);
  llvm::WriteBitcodeToFile(a1, (llvm::raw_ostream *)v6, 0, 0, 0, 0);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v6);
  return 0;
}

uint64_t LLVMWriteBitcodeToFileHandle(const llvm::Module *a1, int a2)
{
  _BYTE v4[96];

  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v4, a2, 1, 0, 0);
  llvm::WriteBitcodeToFile(a1, (llvm::raw_ostream *)v4, 0, 0, 0, 0);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v4);
  return 0;
}

uint64_t LLVMWriteBitcodeToMemoryBuffer(const llvm::Module *a1)
{
  char v1;
  const void *v2;
  size_t v3;
  char v4;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;
  void (**v9)(llvm::raw_ostream *__hidden);
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *v18[2];
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  v10 = 0;
  v14 = 0;
  v15 = 0;
  v9 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v17 = v18;
  v16 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  llvm::WriteBitcodeToFile(a1, (llvm::raw_ostream *)&v9, 0, 0, 0, 0);
  v1 = *((_BYTE *)v17 + 23);
  if (v1 >= 0)
    v2 = v17;
  else
    v2 = *v17;
  if (v1 >= 0)
    v3 = v1 & 0x7F;
  else
    v3 = (size_t)v17[1];
  v8 = 257;
  sub_1C5E1F4D0(v2, v3, (uint64_t)v7, (uint64_t)&v20);
  v4 = v21;
  v5 = v20;
  v9 = off_1E81A6E70;
  if (v16 == 1 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  if ((v4 & 1) != 0)
    return 0;
  else
    return v5;
}

void llvm::BitcodeWriter::writeBlob(uint64_t a1, unsigned int a2, unsigned int a3, char *a4, uint64_t a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  llvm::raw_ostream *v16;
  char *v17;
  std::__shared_weak_count *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  sub_1C50244C4(*(_QWORD *)(a1 + 8), a2, 3u);
  v9 = (char *)operator new(0x228uLL);
  *(_QWORD *)v9 = &unk_1E813F300;
  *((_QWORD *)v9 + 1) = 0;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  *(_OWORD *)(v9 + 264) = 0u;
  *(_OWORD *)(v9 + 280) = 0u;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_OWORD *)(v9 + 408) = 0u;
  *(_OWORD *)(v9 + 424) = 0u;
  *(_OWORD *)(v9 + 440) = 0u;
  *(_OWORD *)(v9 + 456) = 0u;
  *(_OWORD *)(v9 + 472) = 0u;
  *(_OWORD *)(v9 + 488) = 0u;
  *(_OWORD *)(v9 + 504) = 0u;
  *(_OWORD *)(v9 + 520) = 0u;
  *(_OWORD *)(v9 + 536) = 0u;
  v10 = a3;
  *((_QWORD *)v9 + 5) = a3;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = v9 + 40;
  *((_OWORD *)v9 + 3) = xmmword_1C85F9DB0;
  *((_QWORD *)v9 + 8) = 10;
  *((_QWORD *)v9 + 4) = 0x2000000002;
  v11 = *(_QWORD *)(a1 + 8);
  v17 = v9 + 24;
  v18 = (std::__shared_weak_count *)v9;
  v12 = sub_1C50247B8(v11, (uint64_t)&v17);
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(llvm::raw_ostream **)(a1 + 8);
  v19[0] = v10;
  sub_1C5033D5C(v16, v12, (uint64_t)v19, 1, a4, a5, 0);
  sub_1C502481C(*(_QWORD *)(a1 + 8));
}

uint64_t *sub_1C50244C4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;

  v6 = *(_DWORD *)(a1 + 32);
  v7 = *(_DWORD *)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 28) | (1 << v7);
  *(_DWORD *)(a1 + 28) = v8;
  v9 = v7 + v6;
  if (v9 >= 0x20)
  {
    sub_1C503027C((uint64_t *)a1, v8);
    v35 = *(_DWORD *)(a1 + 24);
    if (v35)
      v8 = 1u >> -(char)v35;
    else
      v8 = 0;
    *(_DWORD *)(a1 + 28) = v8;
    v9 = ((_BYTE)v35 + (_BYTE)v6) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v9;
  v10 = a2;
  if (a2 >= 0x80)
  {
    v10 = a2;
    do
    {
      v38 = v10;
      sub_1C5030204((llvm::raw_ostream *)a1, v10 & 0x7F | 0x80, 8);
      v10 >>= 7;
    }
    while (v38 >> 14);
    v9 = *(_DWORD *)(a1 + 24);
    v8 = *(_DWORD *)(a1 + 28);
  }
  v11 = (v10 << v9) | v8;
  *(_DWORD *)(a1 + 28) = v11;
  v12 = v9 + 8;
  if (v12 >= 0x20)
  {
    sub_1C503027C((uint64_t *)a1, v11);
    v36 = *(_DWORD *)(a1 + 24);
    if (v36)
      v11 = v10 >> -(char)v36;
    else
      v11 = 0;
    *(_DWORD *)(a1 + 28) = v11;
    v12 = ((_BYTE)v36 + 8) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v12;
  v13 = a3;
  if (a3 >= 8)
  {
    v13 = a3;
    do
    {
      v39 = v13;
      sub_1C5030204((llvm::raw_ostream *)a1, v13 & 7 | 8, 4);
      v13 >>= 3;
    }
    while (v39 > 0x3F);
    v12 = *(_DWORD *)(a1 + 24);
    v11 = *(_DWORD *)(a1 + 28);
  }
  v14 = (v13 << v12) | v11;
  *(_DWORD *)(a1 + 28) = v14;
  v15 = v12 + 4;
  if (v15 >= 0x20)
  {
    sub_1C503027C((uint64_t *)a1, v14);
    v37 = *(_DWORD *)(a1 + 24);
    if (v37)
      v14 = v13 >> -(char)v37;
    else
      v14 = 0;
    *(_DWORD *)(a1 + 28) = v14;
    v15 = ((_BYTE)v37 + 4) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v15;
  if (v15)
  {
    sub_1C503027C((uint64_t *)a1, v14);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v16 = *(_QWORD **)(a1 + 8);
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v16)
  {
    v19 = (*(uint64_t (**)(_QWORD))(*v16 + 80))(*(_QWORD *)(a1 + 8)) + v16[4] - v16[2];
    v18 = *(_DWORD *)(a1 + 24);
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v20 = (unint64_t)(v19 + v17) >> 2;
  v41 = v20;
  v21 = *(_DWORD *)(a1 + 32);
  v40 = v21;
  if (v18 > 0xFFFFFFDF)
  {
    v23 = v18 + 32;
  }
  else
  {
    sub_1C503027C((uint64_t *)a1, *(_DWORD *)(a1 + 28));
    v22 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 28) = 0;
    v23 = v22 & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v23;
  *(_DWORD *)(a1 + 32) = a3;
  v24 = *(_QWORD *)(a1 + 72);
  if (v24 >= *(_QWORD *)(a1 + 80))
  {
    v25 = sub_1C503030C((uint64_t *)(a1 + 64), &v40, &v41);
  }
  else
  {
    *(_DWORD *)v24 = v21;
    v25 = v24 + 40;
    *(_QWORD *)(v24 + 8) = v20;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
  }
  result = (uint64_t *)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 72) = v25;
  v28 = *(_QWORD *)(v25 - 24);
  *(_QWORD *)(v25 - 24) = v27;
  *(_QWORD *)(a1 + 40) = v28;
  v29 = *(_QWORD *)(v25 - 16);
  *(_QWORD *)(v25 - 16) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v29;
  v30 = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v25 - 8) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v30;
  v31 = *(_QWORD *)(a1 + 88);
  v32 = *(_QWORD *)(a1 + 96);
  if (v31 == v32 || (i = v32 - 32, *(_DWORD *)(v32 - 32) != a2))
  {
    if (((v32 - v31) & 0x1FFFFFFFE0) == 0)
      return result;
    v34 = ((unint64_t)(v32 - v31) >> 5);
    for (i = *(_QWORD *)(a1 + 88); *(_DWORD *)i != a2; i += 32)
    {
      if (!--v34)
        return result;
    }
  }
  return sub_1C50304E0(result, *(_QWORD *)(a1 + 48), *(uint64_t **)(i + 8), *(uint64_t **)(i + 16), (uint64_t)(*(_QWORD *)(i + 16) - *(_QWORD *)(i + 8)) >> 4);
}

uint64_t sub_1C50247B8(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  char *v5;

  sub_1C5030898((llvm::raw_ostream *)a1, *(uint64_t **)a2);
  v4 = *(_OWORD **)(a1 + 48);
  if ((unint64_t)v4 < *(_QWORD *)(a1 + 56))
  {
    *v4 = *(_OWORD *)a2;
    v5 = (char *)(v4 + 1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    v5 = sub_1C5030C7C((char **)(a1 + 40), a2);
  }
  *(_QWORD *)(a1 + 48) = v5;
  return ((unint64_t)&v5[-*(_QWORD *)(a1 + 40)] >> 4) + 3;
}

void sub_1C502481C(off_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_DWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 24) + v3;
  if (v4 >= 0x20)
  {
    sub_1C503027C((uint64_t *)a1, *(_DWORD *)(a1 + 28));
    v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 28) = 0;
    v4 = (v9 + (_BYTE)v3) & 0x1F;
  }
  *(_DWORD *)(a1 + 24) = v4;
  if (v4)
  {
    sub_1C503027C((uint64_t *)a1, *(_DWORD *)(a1 + 28));
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v5)
  {
    v14 = v2;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    v12 = *(_QWORD *)(v10 + 32);
    v13 = *(_QWORD *)(v10 + 16);
    v2 = v14;
    v5 = v11 + v12 - v13;
  }
  sub_1C5030D94(a1, 32 * *(_QWORD *)(v2 - 32), ((unint64_t)(v5 + v6) >> 2) + ~*(_DWORD *)(v2 - 32));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v2 - 40);
  if (a1 + 40 != v2 - 24)
    sub_1C4FF8630((uint64_t *)(a1 + 40), *(uint64_t **)(v2 - 24), *(uint64_t **)(v2 - 16), (uint64_t)(*(_QWORD *)(v2 - 16) - *(_QWORD *)(v2 - 24)) >> 4);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = (uint64_t *)(v7 - 24);
  if (*(_QWORD *)(v7 - 24))
  {
    sub_1C4FF80DC(v8);
    operator delete((void *)*v8);
  }
  *(_QWORD *)(a1 + 72) = v7 - 40;
}

void llvm::BitcodeWriter::writeSymtab(llvm::BitcodeWriter *this)
{
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  _BOOL4 v6;
  llvm::Module **v7;
  char *v8;
  char *v9;
  char *v10[4];
  __int16 v11;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  char *v16[2];
  uint64_t v17;

  v2 = (char *)*((_QWORD *)this + 21);
  v3 = (uint64_t *)*((_QWORD *)this + 22);
  if (v2 == (char *)v3)
  {
    v7 = (llvm::Module **)*((_QWORD *)this + 21);
    goto LABEL_17;
  }
  do
  {
    v4 = *(_QWORD *)v2;
    if (*(char *)(*(_QWORD *)v2 + 111) < 0)
    {
      if (!*(_QWORD *)(v4 + 96))
        goto LABEL_14;
    }
    else if (!*(_BYTE *)(*(_QWORD *)v2 + 111))
    {
      goto LABEL_14;
    }
    v16[0] = 0;
    v16[1] = 0;
    v17 = 0;
    v11 = 260;
    v10[0] = (char *)(v4 + 216);
    llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v10);
    v5 = llvm::TargetRegistry::lookupTarget((std::string::size_type)&__p, (uint64_t)v16);
    if (v5)
      v6 = v5[14] == 0;
    else
      v6 = 1;
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    if (v6)
      return;
LABEL_14:
    v2 += 8;
  }
  while (v2 != (char *)v3);
  v7 = (llvm::Module **)*((_QWORD *)this + 21);
  v2 = (char *)*((_QWORD *)this + 22);
LABEL_17:
  *((_BYTE *)this + 161) = 1;
  v13 = 0;
  v14 = 0;
  __p = v15;
  llvm::irsymtab::build(v7, (v2 - (char *)v7) >> 3, (uint64_t *)&__p, (uint64_t)this + 16, (uint64_t)this + 64, (uint64_t *)&v9);
  v8 = v9;
  if (v9)
  {
    v9 = 0;
    v16[0] = v8;
    sub_1C4D62BD4(v16, v10);
    if (v16[0])
      (*(void (**)(char *))(*(_QWORD *)v16[0] + 8))(v16[0]);
    if (v9)
      (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    llvm::BitcodeWriter::writeBlob((uint64_t)this, 0x19u, 1u, (char *)__p, v13);
  }
  if (__p != v15)
    free(__p);
}

void llvm::BitcodeWriter::writeStrtab(llvm::BitcodeWriter *this)
{
  unsigned int *v2;
  unsigned __int8 *v3;
  void *__p;
  _BYTE *v5;
  uint64_t v6;

  v2 = (unsigned int *)((char *)this + 16);
  __p = 0;
  v5 = 0;
  v6 = 0;
  llvm::StringTableBuilder::finalizeInOrder((llvm::BitcodeWriter *)((char *)this + 16));
  v3 = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (v3)
  {
    sub_1C50429D8((unint64_t *)&__p, (size_t)v3);
    v3 = (unsigned __int8 *)__p;
  }
  llvm::StringTableBuilder::write(v2, v3);
  llvm::BitcodeWriter::writeBlob((uint64_t)this, 0x17u, 1u, (char *)__p, v5 - (_BYTE *)__p);
  *((_BYTE *)this + 160) = 1;
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void llvm::BitcodeWriter::copyStrtab(uint64_t a1, char *a2, uint64_t a3)
{
  llvm::BitcodeWriter::writeBlob(a1, 0x17u, 1u, a2, a3);
  *(_BYTE *)(a1 + 160) = 1;
}

uint64_t sub_1C5024B88(uint64_t *a1)
{
  llvm::raw_ostream *v2;
  char *v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  llvm::raw_ostream *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  llvm::raw_ostream *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  llvm::raw_ostream *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  llvm::raw_ostream *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  llvm::raw_ostream *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  llvm::raw_ostream *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  llvm::raw_ostream *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  llvm::raw_ostream *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  llvm::raw_ostream *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  llvm::raw_ostream *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  llvm::raw_ostream *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  llvm::raw_ostream *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  llvm::raw_ostream *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  llvm::raw_ostream *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  llvm::raw_ostream *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  llvm::raw_ostream *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  llvm::raw_ostream *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  llvm::raw_ostream *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  unsigned int v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _BOOL8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  std::__shared_weak_count **v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  std::__shared_weak_count **v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  unint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  unsigned int *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  void *v282;
  _DWORD *v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  unint64_t ***v292;
  unint64_t ***v293;
  unint64_t **v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE *v304;
  _BYTE *v305;
  _BYTE *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _BYTE *v310;
  uint64_t v311;
  _BYTE *v312;
  _BYTE *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _BYTE *v317;
  _BYTE *v318;
  _BYTE *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  uint64_t *v327;
  _BYTE *v328;
  __int16 v329;
  int v330;
  int v331;
  BOOL v332;
  __int128 *v333;
  unsigned int v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  int v338;
  unsigned int v339;
  _QWORD *v340;
  _BYTE *v341;
  size_t v342;
  const void *v343;
  void *v344;
  uint64_t v345;
  int v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  _OWORD *v352;
  llvm::raw_ostream *v353;
  _BYTE *v354;
  uint64_t v355;
  _QWORD *v356;
  int v357;
  BOOL v358;
  unsigned int v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  int v363;
  unsigned int v364;
  _QWORD *v365;
  _BYTE *v366;
  _QWORD *v367;
  void *v368;
  _QWORD *v369;
  int v370;
  BOOL v371;
  unsigned int v372;
  _QWORD *v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  void *v377;
  llvm::LLVMContext ***v378;
  unsigned int v379;
  int v380;
  int v381;
  uint64_t v383;
  int v384;
  uint64_t v385;
  int v386;
  unsigned int v387;
  llvm::LLVMContext ****v388;
  llvm::LLVMContext ***v389;
  size_t v390;
  uint64_t v391;
  llvm::LLVMContext ***v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  _OWORD *v399;
  llvm::raw_ostream *v400;
  llvm::LLVMContext ***v401;
  uint64_t v402;
  llvm::LLVMContext ****v403;
  int v404;
  BOOL v405;
  unsigned int v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  int v410;
  unsigned int v411;
  llvm::LLVMContext ****v412;
  llvm::LLVMContext ***v413;
  uint64_t *v414;
  uint64_t *v415;
  llvm::raw_ostream *v416;
  _QWORD *GC;
  char v418;
  BOOL v419;
  _BYTE *v420;
  uint64_t v421;
  uint64_t v422;
  llvm::LLVMContext ****v423;
  llvm::LLVMContext ***v424;
  llvm::LLVMContext ****v425;
  int v426;
  BOOL v427;
  unsigned int v428;
  llvm::LLVMContext ****v429;
  llvm::LLVMContext ***v430;
  llvm::ValueEnumerator *v431;
  char *v432;
  int32x2_t v433;
  int64x2_t v434;
  int8x16_t v435;
  int8x16_t v436;
  int32x2_t v437;
  uint64_t v438;
  llvm::raw_ostream *v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  unsigned __int8 *v444;
  unsigned __int8 *v445;
  unsigned __int8 *v446;
  signed __int8 v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  _BOOL4 v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  BOOL v455;
  BOOL v456;
  BOOL v457;
  _BOOL4 v458;
  char *v459;
  llvm::raw_ostream *v460;
  unsigned int v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  uint64_t v465;
  unsigned __int8 *v466;
  uint64_t v467;
  unsigned int v468;
  int v469;
  _QWORD *v470;
  _QWORD *v471;
  _QWORD *v472;
  uint64_t *v473;
  _QWORD *v474;
  uint64_t ***v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t ****v481;
  uint64_t ***v482;
  int v483;
  int v484;
  uint64_t ***v485;
  char *v486;
  unint64_t v487;
  unint64_t v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t ***v497;
  int v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  unsigned int v505;
  char v506;
  unsigned int v507;
  int v508;
  uint64_t v509;
  int v510;
  char v511;
  unsigned __int8 v512;
  uint64_t v513;
  int v514;
  uint64_t v515;
  uint64_t v516;
  int v517;
  uint64_t v518;
  int v519;
  unsigned int v520;
  uint64_t ****v521;
  uint64_t ***v522;
  size_t v523;
  uint64_t ***v524;
  __int128 *p_dst;
  uint64_t v526;
  uint64_t *v527;
  uint64_t v528;
  unint64_t v529;
  int v530;
  uint64_t v531;
  unsigned int v532;
  uint64_t v533;
  uint64_t v534;
  unsigned int v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  unsigned int v539;
  uint64_t v540;
  unsigned int v541;
  uint64_t v542;
  uint64_t **v543;
  _QWORD *v544;
  _QWORD *v545;
  unint64_t v546;
  BOOL v547;
  _QWORD *v548;
  int v549;
  __int128 *v550;
  int v551;
  uint64_t v552;
  uint64_t v553;
  unsigned int v554;
  _BYTE *Partition;
  unint64_t v556;
  int v557;
  uint64_t v558;
  int v559;
  int v560;
  uint64_t v561;
  unsigned int v562;
  uint64_t ****v563;
  int v564;
  BOOL v565;
  unsigned int v566;
  uint64_t ****v567;
  __int128 *v568;
  _QWORD *v569;
  _QWORD *v570;
  _QWORD *v571;
  llvm::LLVMContext ***v572;
  unsigned int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  llvm::LLVMContext ****v578;
  llvm::LLVMContext ***v579;
  int v580;
  int v581;
  llvm::LLVMContext ***v582;
  char *v583;
  unint64_t v584;
  unint64_t v585;
  int v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  llvm::LLVMContext ***v594;
  int v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  unsigned int v602;
  uint64_t v603;
  BOOL v604;
  int v605;
  uint64_t v606;
  int v607;
  unsigned int v608;
  __int128 *v609;
  int v610;
  char v611;
  unsigned __int8 v612;
  uint64_t v613;
  int v614;
  uint64_t v615;
  unsigned int v616;
  uint64_t v617;
  int v618;
  uint64_t v619;
  int v620;
  unsigned int v621;
  llvm::LLVMContext ****v622;
  llvm::LLVMContext ***v623;
  size_t v624;
  llvm::LLVMContext ***v625;
  __int128 *v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  int v630;
  uint64_t v631;
  unsigned int v632;
  unsigned int v633;
  int v634;
  uint64_t v635;
  int v636;
  unsigned int v637;
  int v638;
  int v639;
  llvm::LLVMContext ***v640;
  uint64_t v641;
  unsigned int v642;
  uint64_t v643;
  llvm::LLVMContext **v644;
  _QWORD *v645;
  _QWORD *v646;
  unint64_t v647;
  BOOL v648;
  _QWORD *v649;
  int v650;
  unsigned int v651;
  int v652;
  int v653;
  llvm::LLVMContext ***v654;
  unsigned int v655;
  int v656;
  int v657;
  uint64_t *v658;
  uint64_t v659;
  unsigned int v660;
  uint64_t v661;
  unsigned int v662;
  _BYTE *v663;
  unint64_t v664;
  int v665;
  uint64_t v666;
  int v667;
  int v668;
  uint64_t v669;
  llvm::LLVMContext ****v670;
  int v671;
  BOOL v672;
  unsigned int v673;
  llvm::LLVMContext ****v674;
  __int128 *v675;
  _QWORD *v676;
  _QWORD *v677;
  llvm::GlobalValue *v678;
  unsigned int v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  llvm::GlobalValue **v684;
  llvm::GlobalValue *v685;
  int v686;
  int v687;
  llvm::GlobalValue *v688;
  char *v689;
  unint64_t v690;
  unint64_t v691;
  int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  llvm::GlobalValue *v700;
  int v701;
  int v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  uint64_t v706;
  uint64_t v707;
  unsigned int v708;
  int ValueID;
  uint64_t v710;
  uint64_t v711;
  int v712;
  uint64_t v713;
  unsigned int v714;
  uint64_t v715;
  unsigned int v716;
  uint64_t v717;
  unsigned int v718;
  uint64_t v719;
  int v720;
  uint64_t v721;
  unsigned int v722;
  _BYTE *v723;
  unint64_t v724;
  int v725;
  uint64_t v726;
  int v727;
  int v728;
  uint64_t v729;
  _QWORD *v730;
  _QWORD *v731;
  llvm::GlobalValue *v732;
  unsigned int v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  llvm::GlobalValue **v738;
  llvm::GlobalValue *v739;
  int v740;
  int v741;
  llvm::GlobalValue *v742;
  char *v743;
  unint64_t v744;
  unint64_t v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  llvm::GlobalValue *v754;
  int v755;
  int v756;
  uint64_t v757;
  uint64_t v758;
  int v759;
  uint64_t v760;
  uint64_t v761;
  unsigned int v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  int v766;
  uint64_t v767;
  unsigned int v768;
  uint64_t v769;
  unsigned int v770;
  _BYTE *v771;
  unint64_t v772;
  int v773;
  uint64_t v774;
  int v775;
  int v776;
  uint64_t v777;
  char *v778;
  llvm::raw_ostream *v779;
  unsigned int v780;
  std::__shared_weak_count *v781;
  unint64_t *v782;
  unint64_t v783;
  llvm::raw_ostream *v784;
  _QWORD *v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  unint64_t v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  int v797;
  int v798;
  char *v799;
  llvm::raw_ostream *v800;
  unsigned int v801;
  std::__shared_weak_count *v802;
  unint64_t *v803;
  unint64_t v804;
  char *v805;
  llvm::raw_ostream *v806;
  unsigned int v807;
  std::__shared_weak_count *v808;
  unint64_t *v809;
  unint64_t v810;
  llvm::raw_ostream *v811;
  _QWORD *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  llvm::raw_ostream *v816;
  _QWORD *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  __int128 *v822;
  __int128 *v823;
  __int128 *v824;
  uint64_t v825;
  llvm::raw_ostream *v826;
  unint64_t v827;
  _QWORD *v828;
  char *v829;
  llvm::raw_ostream *v830;
  unsigned int v831;
  std::__shared_weak_count *v832;
  unint64_t *v833;
  unint64_t v834;
  _QWORD *v835;
  uint64_t v836;
  uint64_t *v837;
  char v838;
  int v839;
  unsigned __int8 *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  unsigned int v846;
  uint64_t v847;
  _QWORD *v848;
  _QWORD *v849;
  uint64_t v850;
  int v851;
  unsigned int v852;
  uint64_t v853;
  _QWORD *v854;
  _QWORD *v855;
  _BYTE *v856;
  unsigned int v857;
  uint64_t v858;
  char **v859;
  char **v860;
  char *v861;
  char *v862;
  char **v863;
  char **v864;
  char *v865;
  char *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t *v869;
  uint64_t v870;
  llvm::raw_ostream *v871;
  _QWORD *v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  unsigned int v877;
  const llvm::BasicBlock *v878;
  int v879;
  uint64_t v880;
  uint64_t v881;
  llvm::BlockAddress *v882;
  _QWORD *v883;
  _QWORD *v884;
  uint64_t v885;
  char v886;
  uint64_t v887;
  int v888;
  uint64_t v889;
  uint64_t v890;
  int v891;
  int v892;
  uint64_t v893;
  void *v894;
  int v895;
  uint64_t v896;
  uint64_t v897;
  unsigned int v898;
  uint64_t v899;
  uint64_t i;
  uint64_t v901;
  BOOL v902;
  uint64_t v903;
  unint64_t v904;
  uint64_t v905;
  _QWORD *v906;
  uint64_t v907;
  _QWORD *j;
  _QWORD *v910;
  _QWORD *v911;
  uint64_t v912;
  unsigned __int8 *v913;
  int v914;
  unsigned __int8 *v915;
  int v916;
  BOOL v917;
  BOOL v918;
  BOOL v919;
  _BOOL4 v920;
  int v921;
  unsigned int v922;
  uint64_t v923;
  unsigned int v924;
  unsigned int v925;
  unsigned int v926;
  int v927;
  uint64_t k;
  uint64_t v929;
  _QWORD *v930;
  BOOL v931;
  uint64_t m;
  uint64_t v933;
  uint64_t v934;
  uint64_t n;
  _BYTE *v936;
  unsigned int InstructionID;
  uint64_t v938;
  unsigned int v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  unsigned int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t *v946;
  unint64_t *v947;
  uint64_t v948;
  unsigned int v949;
  uint64_t v950;
  unint64_t *v951;
  unint64_t v952;
  llvm::raw_ostream *v953;
  _QWORD *v954;
  uint64_t v955;
  uint64_t v956;
  char *v957;
  llvm::raw_ostream *v958;
  unsigned int v959;
  std::__shared_weak_count *v960;
  unint64_t *v961;
  unint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v968;
  uint64_t v969;
  int v970;
  int v971;
  int v972;
  unsigned int v973;
  int v974;
  unsigned int v975;
  int v976;
  int v977;
  int v978;
  int v979;
  int v980;
  unsigned int v981;
  unint64_t v982;
  int v983;
  unsigned int v984;
  int v985;
  unsigned int v986;
  unint64_t v987;
  int v988;
  int v989;
  uint64_t v990;
  uint64_t v991;
  unint64_t v992;
  unsigned int v993;
  int v994;
  int v995;
  int v996;
  int v997;
  unsigned int v998;
  int v999;
  int v1000;
  int v1001;
  int v1002;
  unsigned int v1003;
  uint64_t v1004;
  unsigned int v1005;
  unsigned int v1006;
  unsigned int v1007;
  unsigned int v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  int v1012;
  unsigned int v1013;
  uint64_t *v1014;
  uint64_t v1015;
  uint64_t v1016;
  unsigned int v1017;
  uint64_t *v1018;
  int v1019;
  int v1020;
  uint64_t *v1021;
  uint64_t *v1022;
  llvm::BlockAddress *v1023;
  uint64_t v1024;
  std::__shared_weak_count *v1025;
  std::__shared_weak_count *v1026;
  std::__shared_weak_count *v1027;
  std::__shared_weak_count *v1028;
  std::__shared_weak_count *v1029;
  std::__shared_weak_count *v1030;
  std::__shared_weak_count *v1031;
  std::__shared_weak_count *v1032;
  std::__shared_weak_count *v1033;
  std::__shared_weak_count *v1034;
  std::__shared_weak_count *v1035;
  std::__shared_weak_count *v1036;
  std::__shared_weak_count *v1037;
  std::__shared_weak_count *v1038;
  std::__shared_weak_count *v1039;
  std::__shared_weak_count *v1040;
  std::__shared_weak_count *v1041;
  std::__shared_weak_count *v1042;
  std::__shared_weak_count *v1043;
  std::__shared_weak_count *v1044;
  std::__shared_weak_count *v1045;
  std::__shared_weak_count *v1046;
  __int128 *__dst;
  __int128 *v1048;
  uint64_t v1049;
  int v1050;
  _BYTE v1051[32];
  std::__shared_weak_count *v1052;
  std::__shared_weak_count *v1053;
  std::__shared_weak_count *v1054;
  std::__shared_weak_count *v1055;
  __int128 v1056;
  int v1057;
  void *v1058;
  uint64_t v1059;
  unsigned int v1060[64];
  void *v1061;
  uint64_t v1062;
  _QWORD v1063[8];
  void *__p[2];
  _QWORD v1065[66];

  v1065[64] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::raw_ostream *)*a1;
  sub_1C50244C4(*a1, 0xDu, 5u);
  v3 = (char *)operator new(0x228uLL);
  *(_QWORD *)v3 = &unk_1E813F300;
  *((_QWORD *)v3 + 1) = 0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 312) = 0u;
  *(_OWORD *)(v3 + 328) = 0u;
  *(_OWORD *)(v3 + 344) = 0u;
  *(_OWORD *)(v3 + 360) = 0u;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_OWORD *)(v3 + 392) = 0u;
  *(_OWORD *)(v3 + 408) = 0u;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_OWORD *)(v3 + 456) = 0u;
  *(_OWORD *)(v3 + 472) = 0u;
  *(_OWORD *)(v3 + 488) = 0u;
  *(_OWORD *)(v3 + 504) = 0u;
  *(_OWORD *)(v3 + 520) = 0u;
  *(_OWORD *)(v3 + 536) = 0u;
  *(_OWORD *)(v3 + 40) = xmmword_1C85F9DC0;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = v3 + 40;
  *(_OWORD *)(v3 + 56) = xmmword_1C85F9DD0;
  *(_OWORD *)(v3 + 72) = xmmword_1C6464ED0;
  *((_QWORD *)v3 + 4) = 0x2000000003;
  v1058 = v3 + 24;
  v1059 = (uint64_t)v3;
  v4 = sub_1C50247B8((uint64_t)v2, (uint64_t)&v1058);
  v5 = (std::__shared_weak_count *)v1059;
  if (v1059)
  {
    v6 = (unint64_t *)(v1059 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  HIBYTE(v1065[0]) = 0;
  LOBYTE(__p[0]) = 0;
  sub_1C5033124(v2, 1u, __p, 0, v4);
  if (SHIBYTE(v1065[0]) < 0)
    operator delete(__p[0]);
  v8 = (char *)operator new(0x228uLL);
  *(_QWORD *)v8 = &unk_1E813F300;
  *((_QWORD *)v8 + 1) = 0;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 40) = xmmword_1C85F9DE0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 40;
  *(_OWORD *)(v8 + 56) = xmmword_1C85F6930;
  *((_QWORD *)v8 + 4) = 0x2000000002;
  __p[0] = v8 + 24;
  __p[1] = v8;
  v9 = sub_1C50247B8((uint64_t)v2, (uint64_t)__p);
  v10 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v11 = (unint64_t *)((char *)__p[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  LODWORD(v1061) = 0;
  v1024 = (uint64_t)a1;
  if (v9)
  {
    sub_1C5033490(v2, v9, (uint64_t)&v1061, 1, 0, 0, 0x100000002);
  }
  else
  {
    v970 = *((_DWORD *)v2 + 8);
    v971 = *((_DWORD *)v2 + 6);
    v972 = *((_DWORD *)v2 + 7) | (3 << v971);
    *((_DWORD *)v2 + 7) = v972;
    v973 = v971 + v970;
    if (v973 >= 0x20)
    {
      sub_1C503027C((uint64_t *)v2, v972);
      v995 = *((_DWORD *)v2 + 6);
      if (v995)
        v972 = 3u >> -(char)v995;
      else
        v972 = 0;
      v973 = ((_BYTE)v995 + (_BYTE)v970) & 0x1F;
    }
    v974 = v972 | (2 << v973);
    *((_DWORD *)v2 + 6) = v973;
    *((_DWORD *)v2 + 7) = v974;
    if (v973 >= 0x1A)
    {
      sub_1C503027C((uint64_t *)v2, v974);
      v996 = *((_DWORD *)v2 + 6);
      if (v996)
        v974 = 2u >> -(char)v996;
      else
        v974 = 0;
      v975 = ((_BYTE)v996 + 6) & 0x1F;
    }
    else
    {
      v975 = v973 + 6;
    }
    v976 = v974 | (1 << v975);
    *((_DWORD *)v2 + 6) = v975;
    *((_DWORD *)v2 + 7) = v976;
    if (v975 >= 0x1A)
    {
      sub_1C503027C((uint64_t *)v2, v976);
      v997 = *((_DWORD *)v2 + 6);
      v998 = 1u >> -(char)v997;
      if (!v997)
        v998 = 0;
      *((_DWORD *)v2 + 7) = v998;
      v977 = ((_BYTE)v997 + 6) & 0x1F;
    }
    else
    {
      v977 = v975 + 6;
    }
    *((_DWORD *)v2 + 6) = v977;
    sub_1C5030AF8(v2, v1061, 6);
  }
  sub_1C502481C((off_t)v2);
  sub_1C50244C4(*a1, 8u, 3u);
  v1004 = *(_QWORD *)(a1[68] + 8);
  v13 = (llvm::raw_ostream *)*a1;
  v1058 = (void *)2;
  __p[0] = &v1058;
  __p[1] = (void *)1;
  sub_1C5033BDC(v13, 1u, __p);
  v14 = *a1;
  sub_1C50244C4(*a1, 0, 2u);
  *(_DWORD *)(v14 + 36) = -1;
  sub_1C5034214((uint64_t **)(v14 + 88));
  v15 = (std::__shared_weak_count *)operator new(0x228uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v15[4].__shared_owners_ = 0u;
  v15[5].std::__shared_count = 0u;
  *(_OWORD *)&v15[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v15[6].__shared_owners_ = 0u;
  v15[7].std::__shared_count = 0u;
  *(_OWORD *)&v15[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v15[8].__shared_owners_ = 0u;
  v15[9].std::__shared_count = 0u;
  *(_OWORD *)&v15[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v15[10].__shared_owners_ = 0u;
  v15[11].std::__shared_count = 0u;
  *(_OWORD *)&v15[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v15[12].__shared_owners_ = 0u;
  v15[13].std::__shared_count = 0u;
  *(_OWORD *)&v15[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v15[14].__shared_owners_ = 0u;
  v15[15].std::__shared_count = 0u;
  *(_OWORD *)&v15[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v15[16].__shared_owners_ = 0u;
  v15[17].std::__shared_count = 0u;
  *(_OWORD *)&v15[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v15[18].__shared_owners_ = 0u;
  v15[19].std::__shared_count = 0u;
  *(_OWORD *)&v15[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v15[20].__shared_owners_ = 0u;
  v15[21].std::__shared_count = 0u;
  *(_OWORD *)&v15[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v15[22].__shared_owners_ = 0u;
  *(_OWORD *)&v15[1].__shared_weak_owners_ = xmmword_1C85F9DF0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)&v15[1].__shared_weak_owners_;
  *(_OWORD *)&v15[2].__shared_owners_ = xmmword_1C85F6860;
  v15[3].std::__shared_count = (std::__shared_count)xmmword_1C85F9DD0;
  v17 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v15[3].__shared_weak_owners_ = xmmword_1C85F6850;
  v15[1].__shared_owners_ = 0x2000000004;
  __p[0] = &v15[1];
  __p[1] = v15;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  sub_1C5034188(v17, 14, (uint64_t)__p);
  v19 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v20 = (unint64_t *)((char *)__p[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v23 = (char *)operator new(0x228uLL);
  *((_QWORD *)v23 + 1) = 0;
  v24 = (unint64_t *)(v23 + 8);
  *(_QWORD *)v23 = &unk_1E813F300;
  *(_OWORD *)(v23 + 104) = 0u;
  *(_OWORD *)(v23 + 120) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(_OWORD *)(v23 + 152) = 0u;
  *(_OWORD *)(v23 + 168) = 0u;
  *(_OWORD *)(v23 + 184) = 0u;
  *(_OWORD *)(v23 + 200) = 0u;
  *(_OWORD *)(v23 + 216) = 0u;
  *(_OWORD *)(v23 + 232) = 0u;
  *(_OWORD *)(v23 + 248) = 0u;
  *(_OWORD *)(v23 + 264) = 0u;
  *(_OWORD *)(v23 + 280) = 0u;
  *(_OWORD *)(v23 + 296) = 0u;
  *(_OWORD *)(v23 + 312) = 0u;
  *(_OWORD *)(v23 + 328) = 0u;
  *(_OWORD *)(v23 + 344) = 0u;
  *(_OWORD *)(v23 + 360) = 0u;
  *(_OWORD *)(v23 + 376) = 0u;
  *(_OWORD *)(v23 + 392) = 0u;
  *(_OWORD *)(v23 + 408) = 0u;
  *(_OWORD *)(v23 + 424) = 0u;
  *(_OWORD *)(v23 + 440) = 0u;
  *(_OWORD *)(v23 + 456) = 0u;
  *(_OWORD *)(v23 + 472) = 0u;
  *(_OWORD *)(v23 + 488) = 0u;
  *(_OWORD *)(v23 + 504) = 0u;
  *(_OWORD *)(v23 + 40) = xmmword_1C85F9DC0;
  *(_OWORD *)(v23 + 520) = 0u;
  *(_OWORD *)(v23 + 536) = 0u;
  *((_QWORD *)v23 + 2) = 0;
  *((_QWORD *)v23 + 3) = v23 + 40;
  *(_OWORD *)(v23 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v23 + 72) = xmmword_1C85F9DD0;
  v25 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)(v23 + 88) = xmmword_1C85F6870;
  *((_QWORD *)v23 + 4) = 0x2000000004;
  v1058 = v23 + 24;
  v1059 = (uint64_t)v23;
  do
    v26 = __ldxr(v24);
  while (__stxr(v26 + 1, v24));
  sub_1C5034188(v25, 14, (uint64_t)&v1058);
  v27 = (std::__shared_weak_count *)v1059;
  if (v1059)
  {
    v28 = (unint64_t *)(v1059 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  do
    v30 = __ldaxr(v24);
  while (__stlxr(v30 - 1, v24));
  if (!v30)
  {
    (*(void (**)(char *))(*(_QWORD *)v23 + 16))(v23);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v23);
  }
  v31 = (char *)operator new(0x228uLL);
  *((_QWORD *)v31 + 1) = 0;
  v32 = (unint64_t *)(v31 + 8);
  *(_QWORD *)v31 = &unk_1E813F300;
  *(_OWORD *)(v31 + 104) = 0u;
  *(_OWORD *)(v31 + 120) = 0u;
  *(_OWORD *)(v31 + 136) = 0u;
  *(_OWORD *)(v31 + 152) = 0u;
  *(_OWORD *)(v31 + 168) = 0u;
  *(_OWORD *)(v31 + 184) = 0u;
  *(_OWORD *)(v31 + 200) = 0u;
  *(_OWORD *)(v31 + 216) = 0u;
  *(_OWORD *)(v31 + 232) = 0u;
  *(_OWORD *)(v31 + 248) = 0u;
  *(_OWORD *)(v31 + 264) = 0u;
  *(_OWORD *)(v31 + 280) = 0u;
  *(_OWORD *)(v31 + 296) = 0u;
  *(_OWORD *)(v31 + 312) = 0u;
  *(_OWORD *)(v31 + 328) = 0u;
  *(_OWORD *)(v31 + 344) = 0u;
  *(_OWORD *)(v31 + 360) = 0u;
  *(_OWORD *)(v31 + 376) = 0u;
  *(_OWORD *)(v31 + 392) = 0u;
  *(_OWORD *)(v31 + 408) = 0u;
  *(_OWORD *)(v31 + 424) = 0u;
  *(_OWORD *)(v31 + 440) = 0u;
  *(_OWORD *)(v31 + 456) = 0u;
  *(_OWORD *)(v31 + 472) = 0u;
  *(_OWORD *)(v31 + 488) = 0u;
  *(_OWORD *)(v31 + 504) = 0u;
  *(_OWORD *)(v31 + 520) = 0u;
  *(_OWORD *)(v31 + 536) = 0u;
  *(_OWORD *)(v31 + 40) = xmmword_1C85F9DC0;
  *((_QWORD *)v31 + 2) = 0;
  *((_QWORD *)v31 + 3) = v31 + 40;
  *(_OWORD *)(v31 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v31 + 72) = xmmword_1C85F9DD0;
  v33 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)(v31 + 88) = xmmword_1C6464ED0;
  *((_QWORD *)v31 + 4) = 0x2000000004;
  v1061 = v31 + 24;
  v1062 = (uint64_t)v31;
  do
    v34 = __ldxr(v32);
  while (__stxr(v34 + 1, v32));
  sub_1C5034188(v33, 14, (uint64_t)&v1061);
  v35 = (std::__shared_weak_count *)v1062;
  if (v1062)
  {
    v36 = (unint64_t *)(v1062 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  do
    v38 = __ldaxr(v32);
  while (__stlxr(v38 - 1, v32));
  if (!v38)
  {
    (*(void (**)(char *))(*(_QWORD *)v31 + 16))(v31);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v31);
  }
  v39 = (std::__shared_weak_count *)operator new(0x228uLL);
  v39->__shared_owners_ = 0;
  v40 = (unint64_t *)&v39->__shared_owners_;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v39[4].__shared_owners_ = 0u;
  v39[5].std::__shared_count = 0u;
  *(_OWORD *)&v39[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[6].__shared_owners_ = 0u;
  v39[7].std::__shared_count = 0u;
  *(_OWORD *)&v39[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[8].__shared_owners_ = 0u;
  v39[9].std::__shared_count = 0u;
  *(_OWORD *)&v39[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[10].__shared_owners_ = 0u;
  v39[11].std::__shared_count = 0u;
  *(_OWORD *)&v39[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[12].__shared_owners_ = 0u;
  v39[13].std::__shared_count = 0u;
  *(_OWORD *)&v39[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[14].__shared_owners_ = 0u;
  v39[15].std::__shared_count = 0u;
  *(_OWORD *)&v39[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[16].__shared_owners_ = 0u;
  v39[17].std::__shared_count = 0u;
  *(_OWORD *)&v39[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[18].__shared_owners_ = 0u;
  v39[19].std::__shared_count = 0u;
  *(_OWORD *)&v39[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[20].__shared_owners_ = 0u;
  v39[21].std::__shared_count = 0u;
  *(_OWORD *)&v39[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v39[22].__shared_owners_ = 0u;
  *(_OWORD *)&v39[1].__shared_weak_owners_ = xmmword_1C85F9DE0;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)&v39[1].__shared_weak_owners_;
  *(_OWORD *)&v39[2].__shared_owners_ = xmmword_1C85F6860;
  v39[3].std::__shared_count = (std::__shared_count)xmmword_1C85F9DD0;
  v41 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v39[3].__shared_weak_owners_ = xmmword_1C6464ED0;
  v39[1].__shared_owners_ = 0x2000000004;
  __dst = (__int128 *)&v39[1];
  v1048 = (__int128 *)v39;
  do
    v42 = __ldxr(v40);
  while (__stxr(v42 + 1, v40));
  sub_1C5034188(v41, 14, (uint64_t)&__dst);
  v43 = (std::__shared_weak_count *)v1048;
  if (v1048)
  {
    v44 = (unint64_t *)v1048 + 1;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  do
    v46 = __ldaxr(v40);
  while (__stlxr(v46 - 1, v40));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  v47 = (std::__shared_weak_count *)operator new(0x228uLL);
  v47->__shared_owners_ = 0;
  v48 = (unint64_t *)&v47->__shared_owners_;
  v47->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v47[3].std::__shared_count = 0u;
  *(_OWORD *)&v47[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[4].__shared_owners_ = 0u;
  v47[5].std::__shared_count = 0u;
  *(_OWORD *)&v47[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[6].__shared_owners_ = 0u;
  v47[7].std::__shared_count = 0u;
  *(_OWORD *)&v47[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[8].__shared_owners_ = 0u;
  v47[9].std::__shared_count = 0u;
  *(_OWORD *)&v47[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[10].__shared_owners_ = 0u;
  v47[11].std::__shared_count = 0u;
  *(_OWORD *)&v47[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[12].__shared_owners_ = 0u;
  v47[13].std::__shared_count = 0u;
  *(_OWORD *)&v47[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[14].__shared_owners_ = 0u;
  v47[15].std::__shared_count = 0u;
  *(_OWORD *)&v47[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[16].__shared_owners_ = 0u;
  v47[17].std::__shared_count = 0u;
  *(_OWORD *)&v47[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[18].__shared_owners_ = 0u;
  v47[19].std::__shared_count = 0u;
  *(_OWORD *)&v47[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[20].__shared_owners_ = 0u;
  v47[21].std::__shared_count = 0u;
  *(_OWORD *)&v47[1].__shared_weak_owners_ = xmmword_1C85F9DC0;
  *(_OWORD *)&v47[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v47[22].__shared_owners_ = 0u;
  v47->__shared_weak_owners_ = 0;
  v47[1].__vftable = (std::__shared_weak_count_vtbl *)&v47[1].__shared_weak_owners_;
  v47[2].__shared_owners_ = 32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3);
  v47[2].__shared_weak_owners_ = 2;
  v47[1].__shared_owners_ = 0x2000000002;
  v49 = (llvm::raw_ostream *)*a1;
  *(_QWORD *)&v1056 = v47 + 1;
  *((_QWORD *)&v1056 + 1) = v47;
  do
    v50 = __ldxr(v48);
  while (__stxr(v50 + 1, v48));
  sub_1C5034188(v49, 11, (uint64_t)&v1056);
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v1056 + 1);
  if (*((_QWORD *)&v1056 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v1056 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  do
    v54 = __ldaxr(v48);
  while (__stlxr(v54 - 1, v48));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  v55 = (std::__shared_weak_count *)operator new(0x228uLL);
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v55[3].std::__shared_count = 0u;
  *(_OWORD *)&v55[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[4].__shared_owners_ = 0u;
  v55[5].std::__shared_count = 0u;
  *(_OWORD *)&v55[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[6].__shared_owners_ = 0u;
  v55[7].std::__shared_count = 0u;
  *(_OWORD *)&v55[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[8].__shared_owners_ = 0u;
  v55[9].std::__shared_count = 0u;
  *(_OWORD *)&v55[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[10].__shared_owners_ = 0u;
  v55[11].std::__shared_count = 0u;
  *(_OWORD *)&v55[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[12].__shared_owners_ = 0u;
  v55[13].std::__shared_count = 0u;
  *(_OWORD *)&v55[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[14].__shared_owners_ = 0u;
  v55[15].std::__shared_count = 0u;
  *(_OWORD *)&v55[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[16].__shared_owners_ = 0u;
  v55[17].std::__shared_count = 0u;
  *(_OWORD *)&v55[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[18].__shared_owners_ = 0u;
  v55[19].std::__shared_count = 0u;
  *(_OWORD *)&v55[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[20].__shared_owners_ = 0u;
  v55[21].std::__shared_count = 0u;
  *(_OWORD *)&v55[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[22].__shared_owners_ = 0u;
  *(_OWORD *)&v55[1].__shared_weak_owners_ = xmmword_1C85F9E00;
  v55->__shared_weak_owners_ = 0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&v55[1].__shared_weak_owners_;
  *(_OWORD *)&v55[2].__shared_owners_ = xmmword_1C85F6860;
  v55[1].__shared_owners_ = 0x2000000002;
  v57 = (llvm::raw_ostream *)*a1;
  v1054 = v55 + 1;
  v1055 = v55;
  do
    v58 = __ldxr(v56);
  while (__stxr(v58 + 1, v56));
  sub_1C5034188(v57, 11, (uint64_t)&v1054);
  v59 = v1055;
  if (v1055)
  {
    v60 = (unint64_t *)&v1055->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  do
    v62 = __ldaxr(v56);
  while (__stlxr(v62 - 1, v56));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  v63 = (std::__shared_weak_count *)operator new(0x228uLL);
  v63->__shared_owners_ = 0;
  v64 = (unint64_t *)&v63->__shared_owners_;
  v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v63[4].__shared_owners_ = 0u;
  v63[5].std::__shared_count = 0u;
  *(_OWORD *)&v63[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[6].__shared_owners_ = 0u;
  v63[7].std::__shared_count = 0u;
  *(_OWORD *)&v63[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[8].__shared_owners_ = 0u;
  v63[9].std::__shared_count = 0u;
  *(_OWORD *)&v63[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[10].__shared_owners_ = 0u;
  v63[11].std::__shared_count = 0u;
  *(_OWORD *)&v63[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[12].__shared_owners_ = 0u;
  v63[13].std::__shared_count = 0u;
  *(_OWORD *)&v63[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[14].__shared_owners_ = 0u;
  v63[15].std::__shared_count = 0u;
  *(_OWORD *)&v63[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[16].__shared_owners_ = 0u;
  v63[17].std::__shared_count = 0u;
  *(_OWORD *)&v63[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[18].__shared_owners_ = 0u;
  v63[19].std::__shared_count = 0u;
  *(_OWORD *)&v63[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[20].__shared_owners_ = 0u;
  v63[21].std::__shared_count = 0u;
  *(_OWORD *)&v63[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v63[22].__shared_owners_ = 0u;
  *(_OWORD *)&v63[1].__shared_weak_owners_ = xmmword_1C85F9E10;
  v63->__shared_weak_owners_ = 0;
  v63[1].__vftable = (std::__shared_weak_count_vtbl *)&v63[1].__shared_weak_owners_;
  *(_OWORD *)&v63[2].__shared_owners_ = xmmword_1C85F9E20;
  v63[3].__vftable = (std::__shared_weak_count_vtbl *)(32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3));
  v65 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v63[3].__shared_owners_ = xmmword_1C85F9E30;
  v63[4].__vftable = (std::__shared_weak_count_vtbl *)4;
  v63[1].__shared_owners_ = 0x2000000004;
  v1052 = v63 + 1;
  v1053 = v63;
  do
    v66 = __ldxr(v64);
  while (__stxr(v66 + 1, v64));
  sub_1C5034188(v65, 11, (uint64_t)&v1052);
  v67 = v1053;
  if (v1053)
  {
    v68 = (unint64_t *)&v1053->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  do
    v70 = __ldaxr(v64);
  while (__stlxr(v70 - 1, v64));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  v71 = (std::__shared_weak_count *)operator new(0x228uLL);
  v71->__shared_owners_ = 0;
  v72 = (unint64_t *)&v71->__shared_owners_;
  v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v71[2].__shared_owners_ = 0u;
  v71[3].std::__shared_count = 0u;
  *(_OWORD *)&v71[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v71[4].__shared_owners_ = 0u;
  v71[5].std::__shared_count = 0u;
  *(_OWORD *)&v71[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v71[6].__shared_owners_ = 0u;
  v71[7].std::__shared_count = 0u;
  *(_OWORD *)&v71[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v71[8].__shared_owners_ = 0u;
  v71[9].std::__shared_count = 0u;
  *(_OWORD *)&v71[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v71[10].__shared_owners_ = 0u;
  v71[11].std::__shared_count = 0u;
  *(_OWORD *)&v71[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v71[12].__shared_owners_ = 0u;
  v71[13].std::__shared_count = 0u;
  *(_OWORD *)&v71[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v71[14].__shared_owners_ = 0u;
  v71[15].std::__shared_count = 0u;
  *(_OWORD *)&v71[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v71[16].__shared_owners_ = 0u;
  v71[17].std::__shared_count = 0u;
  *(_OWORD *)&v71[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v71[18].__shared_owners_ = 0u;
  v71[19].std::__shared_count = 0u;
  *(_OWORD *)&v71[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v71[20].__shared_owners_ = 0u;
  v71[21].std::__shared_count = 0u;
  *(_OWORD *)&v71[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v71[22].__shared_owners_ = 0u;
  *(_OWORD *)&v71[1].__shared_weak_owners_ = xmmword_1C85F9DE0;
  v71->__shared_weak_owners_ = 0;
  v71[1].__vftable = (std::__shared_weak_count_vtbl *)&v71[1].__shared_weak_owners_;
  v71[1].__shared_owners_ = 0x2000000001;
  v73 = (llvm::raw_ostream *)*a1;
  v1045 = v71 + 1;
  v1046 = v71;
  do
    v74 = __ldxr(v72);
  while (__stxr(v74 + 1, v72));
  sub_1C5034188(v73, 11, (uint64_t)&v1045);
  v75 = v1046;
  if (v1046)
  {
    v76 = (unint64_t *)&v1046->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  do
    v78 = __ldaxr(v72);
  while (__stlxr(v78 - 1, v72));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
  }
  v79 = (std::__shared_weak_count *)operator new(0x228uLL);
  v79->__shared_owners_ = 0;
  v80 = (unint64_t *)&v79->__shared_owners_;
  v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v79[5].std::__shared_count = 0u;
  *(_OWORD *)&v79[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v79[6].__shared_owners_ = 0u;
  v79[7].std::__shared_count = 0u;
  *(_OWORD *)&v79[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v79[8].__shared_owners_ = 0u;
  v79[9].std::__shared_count = 0u;
  *(_OWORD *)&v79[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v79[10].__shared_owners_ = 0u;
  v79[11].std::__shared_count = 0u;
  *(_OWORD *)&v79[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v79[12].__shared_owners_ = 0u;
  v79[13].std::__shared_count = 0u;
  *(_OWORD *)&v79[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v79[14].__shared_owners_ = 0u;
  v79[15].std::__shared_count = 0u;
  *(_OWORD *)&v79[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v79[16].__shared_owners_ = 0u;
  v79[17].std::__shared_count = 0u;
  *(_OWORD *)&v79[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v79[18].__shared_owners_ = 0u;
  v79[19].std::__shared_count = 0u;
  *(_OWORD *)&v79[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v79[20].__shared_owners_ = 0u;
  v79[21].std::__shared_count = 0u;
  *(_OWORD *)&v79[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v79[22].__shared_owners_ = 0u;
  *(_OWORD *)&v79[1].__shared_weak_owners_ = xmmword_1C85F9E40;
  v79->__shared_weak_owners_ = 0;
  v79[1].__vftable = (std::__shared_weak_count_vtbl *)&v79[1].__shared_weak_owners_;
  *(_OWORD *)&v79[2].__shared_owners_ = xmmword_1C85F6930;
  v79[3].__vftable = (std::__shared_weak_count_vtbl *)(32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3));
  v81 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v79[3].__shared_owners_ = xmmword_1C85F9E50;
  v79[4].std::__shared_count = (std::__shared_count)xmmword_1C85F9E60;
  v79[4].__shared_weak_owners_ = 2;
  v79[1].__shared_owners_ = 0x2000000005;
  v1043 = v79 + 1;
  v1044 = v79;
  do
    v82 = __ldxr(v80);
  while (__stxr(v82 + 1, v80));
  sub_1C5034188(v81, 12, (uint64_t)&v1043);
  v83 = v1044;
  if (v1044)
  {
    v84 = (unint64_t *)&v1044->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  do
    v86 = __ldaxr(v80);
  while (__stlxr(v86 - 1, v80));
  if (!v86)
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
  }
  v87 = (std::__shared_weak_count *)operator new(0x228uLL);
  v87->__shared_owners_ = 0;
  v88 = (unint64_t *)&v87->__shared_owners_;
  v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v87[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[4].__shared_owners_ = 0u;
  v87[5].std::__shared_count = 0u;
  *(_OWORD *)&v87[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[6].__shared_owners_ = 0u;
  v87[7].std::__shared_count = 0u;
  *(_OWORD *)&v87[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[8].__shared_owners_ = 0u;
  v87[9].std::__shared_count = 0u;
  *(_OWORD *)&v87[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[10].__shared_owners_ = 0u;
  v87[11].std::__shared_count = 0u;
  *(_OWORD *)&v87[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[12].__shared_owners_ = 0u;
  v87[13].std::__shared_count = 0u;
  *(_OWORD *)&v87[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[14].__shared_owners_ = 0u;
  v87[15].std::__shared_count = 0u;
  *(_OWORD *)&v87[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[16].__shared_owners_ = 0u;
  v87[17].std::__shared_count = 0u;
  *(_OWORD *)&v87[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[18].__shared_owners_ = 0u;
  v87[19].std::__shared_count = 0u;
  *(_OWORD *)&v87[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[20].__shared_owners_ = 0u;
  v87[21].std::__shared_count = 0u;
  *(_OWORD *)&v87[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[22].__shared_owners_ = 0u;
  *(_OWORD *)&v87[1].__shared_weak_owners_ = xmmword_1C85F9E70;
  v87->__shared_weak_owners_ = 0;
  v87[1].__vftable = (std::__shared_weak_count_vtbl *)&v87[1].__shared_weak_owners_;
  *(_OWORD *)&v87[2].__shared_owners_ = xmmword_1C85F6930;
  v87[3].std::__shared_count = (std::__shared_count)xmmword_1C85F9E20;
  v87[1].__shared_owners_ = 0x2000000003;
  v89 = (llvm::raw_ostream *)*a1;
  v1041 = v87 + 1;
  v1042 = v87;
  do
    v90 = __ldxr(v88);
  while (__stxr(v90 + 1, v88));
  sub_1C5034188(v89, 12, (uint64_t)&v1041);
  v91 = v1042;
  if (v1042)
  {
    v92 = (unint64_t *)&v1042->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  do
    v94 = __ldaxr(v88);
  while (__stlxr(v94 - 1, v88));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
  v95 = (std::__shared_weak_count *)operator new(0x228uLL);
  v95->__shared_owners_ = 0;
  v96 = (unint64_t *)&v95->__shared_owners_;
  v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v95[4].__shared_owners_ = 0u;
  v95[5].std::__shared_count = 0u;
  *(_OWORD *)&v95[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v95[6].__shared_owners_ = 0u;
  v95[7].std::__shared_count = 0u;
  *(_OWORD *)&v95[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v95[8].__shared_owners_ = 0u;
  v95[9].std::__shared_count = 0u;
  *(_OWORD *)&v95[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v95[10].__shared_owners_ = 0u;
  v95[11].std::__shared_count = 0u;
  *(_OWORD *)&v95[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v95[12].__shared_owners_ = 0u;
  v95[13].std::__shared_count = 0u;
  *(_OWORD *)&v95[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v95[14].__shared_owners_ = 0u;
  v95[15].std::__shared_count = 0u;
  *(_OWORD *)&v95[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v95[16].__shared_owners_ = 0u;
  v95[17].std::__shared_count = 0u;
  *(_OWORD *)&v95[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v95[18].__shared_owners_ = 0u;
  v95[19].std::__shared_count = 0u;
  *(_OWORD *)&v95[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v95[20].__shared_owners_ = 0u;
  v95[21].std::__shared_count = 0u;
  *(_OWORD *)&v95[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v95[22].__shared_owners_ = 0u;
  *(_OWORD *)&v95[1].__shared_weak_owners_ = xmmword_1C85F9E70;
  v95->__shared_weak_owners_ = 0;
  v95[1].__vftable = (std::__shared_weak_count_vtbl *)&v95[1].__shared_weak_owners_;
  *(_OWORD *)&v95[2].__shared_owners_ = xmmword_1C85F6930;
  v95[3].std::__shared_count = (std::__shared_count)xmmword_1C85F9E20;
  v97 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v95[3].__shared_weak_owners_ = xmmword_1C85F6850;
  v95[1].__shared_owners_ = 0x2000000004;
  v1039 = v95 + 1;
  v1040 = v95;
  do
    v98 = __ldxr(v96);
  while (__stxr(v98 + 1, v96));
  sub_1C5034188(v97, 12, (uint64_t)&v1039);
  v99 = v1040;
  if (v1040)
  {
    v100 = (unint64_t *)&v1040->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  do
    v102 = __ldaxr(v96);
  while (__stlxr(v102 - 1, v96));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
  }
  v103 = (std::__shared_weak_count *)operator new(0x228uLL);
  v103->__shared_owners_ = 0;
  v104 = (unint64_t *)&v103->__shared_owners_;
  v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v103[4].__shared_owners_ = 0u;
  v103[5].std::__shared_count = 0u;
  *(_OWORD *)&v103[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v103[6].__shared_owners_ = 0u;
  v103[7].std::__shared_count = 0u;
  *(_OWORD *)&v103[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v103[8].__shared_owners_ = 0u;
  v103[9].std::__shared_count = 0u;
  *(_OWORD *)&v103[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v103[10].__shared_owners_ = 0u;
  v103[11].std::__shared_count = 0u;
  *(_OWORD *)&v103[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v103[12].__shared_owners_ = 0u;
  v103[13].std::__shared_count = 0u;
  *(_OWORD *)&v103[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v103[14].__shared_owners_ = 0u;
  v103[15].std::__shared_count = 0u;
  *(_OWORD *)&v103[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v103[16].__shared_owners_ = 0u;
  v103[17].std::__shared_count = 0u;
  *(_OWORD *)&v103[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v103[18].__shared_owners_ = 0u;
  v103[19].std::__shared_count = 0u;
  *(_OWORD *)&v103[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v103[20].__shared_owners_ = 0u;
  v103[21].std::__shared_count = 0u;
  *(_OWORD *)&v103[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v103[22].__shared_owners_ = 0u;
  *(_OWORD *)&v103[1].__shared_weak_owners_ = xmmword_1C85F9DE0;
  v103->__shared_weak_owners_ = 0;
  v103[1].__vftable = (std::__shared_weak_count_vtbl *)&v103[1].__shared_weak_owners_;
  *(_OWORD *)&v103[2].__shared_owners_ = xmmword_1C85F6930;
  v103[3].std::__shared_count = (std::__shared_count)xmmword_1C85F6930;
  v105 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v103[3].__shared_weak_owners_ = xmmword_1C85F9E20;
  v103[1].__shared_owners_ = 0x2000000004;
  v1037 = v103 + 1;
  v1038 = v103;
  do
    v106 = __ldxr(v104);
  while (__stxr(v106 + 1, v104));
  sub_1C5034188(v105, 12, (uint64_t)&v1037);
  v107 = v1038;
  if (v1038)
  {
    v108 = (unint64_t *)&v1038->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  do
    v110 = __ldaxr(v104);
  while (__stlxr(v110 - 1, v104));
  if (!v110)
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  v111 = (std::__shared_weak_count *)operator new(0x228uLL);
  v111->__shared_owners_ = 0;
  v112 = (unint64_t *)&v111->__shared_owners_;
  v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v111[5].std::__shared_count = 0u;
  *(_OWORD *)&v111[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v111[6].__shared_owners_ = 0u;
  v111[7].std::__shared_count = 0u;
  *(_OWORD *)&v111[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v111[8].__shared_owners_ = 0u;
  v111[9].std::__shared_count = 0u;
  *(_OWORD *)&v111[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v111[10].__shared_owners_ = 0u;
  v111[11].std::__shared_count = 0u;
  *(_OWORD *)&v111[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v111[12].__shared_owners_ = 0u;
  v111[13].std::__shared_count = 0u;
  *(_OWORD *)&v111[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v111[14].__shared_owners_ = 0u;
  v111[15].std::__shared_count = 0u;
  *(_OWORD *)&v111[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v111[16].__shared_owners_ = 0u;
  v111[17].std::__shared_count = 0u;
  *(_OWORD *)&v111[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v111[18].__shared_owners_ = 0u;
  v111[19].std::__shared_count = 0u;
  *(_OWORD *)&v111[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v111[20].__shared_owners_ = 0u;
  v111[21].std::__shared_count = 0u;
  *(_OWORD *)&v111[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v111[22].__shared_owners_ = 0u;
  *(_OWORD *)&v111[1].__shared_weak_owners_ = xmmword_1C85F9DE0;
  v111->__shared_weak_owners_ = 0;
  v111[1].__vftable = (std::__shared_weak_count_vtbl *)&v111[1].__shared_weak_owners_;
  *(_OWORD *)&v111[2].__shared_owners_ = xmmword_1C85F6930;
  v111[3].std::__shared_count = (std::__shared_count)xmmword_1C85F6930;
  *(_OWORD *)&v111[3].__shared_weak_owners_ = xmmword_1C85F9E20;
  v113 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v111[4].__shared_owners_ = xmmword_1C85F6850;
  v111[1].__shared_owners_ = 0x2000000005;
  v1035 = v111 + 1;
  v1036 = v111;
  do
    v114 = __ldxr(v112);
  while (__stxr(v114 + 1, v112));
  sub_1C5034188(v113, 12, (uint64_t)&v1035);
  v115 = v1036;
  if (v1036)
  {
    v116 = (unint64_t *)&v1036->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  do
    v118 = __ldaxr(v112);
  while (__stlxr(v118 - 1, v112));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  v119 = (std::__shared_weak_count *)operator new(0x228uLL);
  v119->__shared_owners_ = 0;
  v120 = (unint64_t *)&v119->__shared_owners_;
  v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v119[4].__shared_owners_ = 0u;
  v119[5].std::__shared_count = 0u;
  *(_OWORD *)&v119[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v119[6].__shared_owners_ = 0u;
  v119[7].std::__shared_count = 0u;
  *(_OWORD *)&v119[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v119[8].__shared_owners_ = 0u;
  v119[9].std::__shared_count = 0u;
  *(_OWORD *)&v119[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v119[10].__shared_owners_ = 0u;
  v119[11].std::__shared_count = 0u;
  *(_OWORD *)&v119[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v119[12].__shared_owners_ = 0u;
  v119[13].std::__shared_count = 0u;
  *(_OWORD *)&v119[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v119[14].__shared_owners_ = 0u;
  v119[15].std::__shared_count = 0u;
  *(_OWORD *)&v119[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v119[16].__shared_owners_ = 0u;
  v119[17].std::__shared_count = 0u;
  *(_OWORD *)&v119[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v119[18].__shared_owners_ = 0u;
  v119[19].std::__shared_count = 0u;
  *(_OWORD *)&v119[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v119[20].__shared_owners_ = 0u;
  v119[21].std::__shared_count = 0u;
  *(_OWORD *)&v119[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v119[22].__shared_owners_ = 0u;
  *(_OWORD *)&v119[1].__shared_weak_owners_ = xmmword_1C85F9E80;
  v119->__shared_weak_owners_ = 0;
  v119[1].__vftable = (std::__shared_weak_count_vtbl *)&v119[1].__shared_weak_owners_;
  *(_OWORD *)&v119[2].__shared_owners_ = xmmword_1C85F6930;
  v119[3].__vftable = (std::__shared_weak_count_vtbl *)(32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3));
  v121 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v119[3].__shared_owners_ = xmmword_1C85F9E50;
  v119[4].__vftable = (std::__shared_weak_count_vtbl *)2;
  v119[1].__shared_owners_ = 0x2000000004;
  v1033 = v119 + 1;
  v1034 = v119;
  do
    v122 = __ldxr(v120);
  while (__stxr(v122 + 1, v120));
  sub_1C5034188(v121, 12, (uint64_t)&v1033);
  v123 = v1034;
  if (v1034)
  {
    v124 = (unint64_t *)&v1034->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  do
    v126 = __ldaxr(v120);
  while (__stlxr(v126 - 1, v120));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
    std::__shared_weak_count::__release_weak(v119);
  }
  v127 = (std::__shared_weak_count *)operator new(0x228uLL);
  v127->__shared_owners_ = 0;
  v128 = (unint64_t *)&v127->__shared_owners_;
  v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v127[2].__shared_owners_ = 0u;
  v127[3].std::__shared_count = 0u;
  *(_OWORD *)&v127[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v127[4].__shared_owners_ = 0u;
  v127[5].std::__shared_count = 0u;
  *(_OWORD *)&v127[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v127[6].__shared_owners_ = 0u;
  v127[7].std::__shared_count = 0u;
  *(_OWORD *)&v127[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v127[8].__shared_owners_ = 0u;
  v127[9].std::__shared_count = 0u;
  *(_OWORD *)&v127[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v127[10].__shared_owners_ = 0u;
  v127[11].std::__shared_count = 0u;
  *(_OWORD *)&v127[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v127[12].__shared_owners_ = 0u;
  v127[13].std::__shared_count = 0u;
  *(_OWORD *)&v127[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v127[14].__shared_owners_ = 0u;
  v127[15].std::__shared_count = 0u;
  *(_OWORD *)&v127[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v127[16].__shared_owners_ = 0u;
  v127[17].std::__shared_count = 0u;
  *(_OWORD *)&v127[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v127[18].__shared_owners_ = 0u;
  v127[19].std::__shared_count = 0u;
  *(_OWORD *)&v127[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v127[20].__shared_owners_ = 0u;
  v127[21].std::__shared_count = 0u;
  *(_OWORD *)&v127[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v127[22].__shared_owners_ = 0u;
  *(_OWORD *)&v127[1].__shared_weak_owners_ = xmmword_1C85F9E90;
  v127->__shared_weak_owners_ = 0;
  v127[1].__vftable = (std::__shared_weak_count_vtbl *)&v127[1].__shared_weak_owners_;
  v127[1].__shared_owners_ = 0x2000000001;
  v129 = (llvm::raw_ostream *)*a1;
  v1031 = v127 + 1;
  v1032 = v127;
  do
    v130 = __ldxr(v128);
  while (__stxr(v130 + 1, v128));
  sub_1C5034188(v129, 12, (uint64_t)&v1031);
  v131 = v1032;
  if (v1032)
  {
    v132 = (unint64_t *)&v1032->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  do
    v134 = __ldaxr(v128);
  while (__stlxr(v134 - 1, v128));
  if (!v134)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
  v135 = (std::__shared_weak_count *)operator new(0x228uLL);
  v135->__shared_owners_ = 0;
  v136 = (unint64_t *)&v135->__shared_owners_;
  v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v135[3].std::__shared_count = 0u;
  *(_OWORD *)&v135[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v135[4].__shared_owners_ = 0u;
  v135[5].std::__shared_count = 0u;
  *(_OWORD *)&v135[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v135[6].__shared_owners_ = 0u;
  v135[7].std::__shared_count = 0u;
  *(_OWORD *)&v135[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v135[8].__shared_owners_ = 0u;
  v135[9].std::__shared_count = 0u;
  *(_OWORD *)&v135[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v135[10].__shared_owners_ = 0u;
  v135[11].std::__shared_count = 0u;
  *(_OWORD *)&v135[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v135[12].__shared_owners_ = 0u;
  v135[13].std::__shared_count = 0u;
  *(_OWORD *)&v135[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v135[14].__shared_owners_ = 0u;
  v135[15].std::__shared_count = 0u;
  *(_OWORD *)&v135[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v135[16].__shared_owners_ = 0u;
  v135[17].std::__shared_count = 0u;
  *(_OWORD *)&v135[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v135[18].__shared_owners_ = 0u;
  v135[19].std::__shared_count = 0u;
  *(_OWORD *)&v135[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v135[20].__shared_owners_ = 0u;
  v135[21].std::__shared_count = 0u;
  *(_OWORD *)&v135[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v135[22].__shared_owners_ = 0u;
  *(_OWORD *)&v135[1].__shared_weak_owners_ = xmmword_1C85F9E90;
  v135->__shared_weak_owners_ = 0;
  v135[1].__vftable = (std::__shared_weak_count_vtbl *)&v135[1].__shared_weak_owners_;
  *(_OWORD *)&v135[2].__shared_owners_ = xmmword_1C85F6930;
  v135[1].__shared_owners_ = 0x2000000002;
  v137 = (llvm::raw_ostream *)*a1;
  v1029 = v135 + 1;
  v1030 = v135;
  do
    v138 = __ldxr(v136);
  while (__stxr(v138 + 1, v136));
  sub_1C5034188(v137, 12, (uint64_t)&v1029);
  v139 = v1030;
  if (v1030)
  {
    v140 = (unint64_t *)&v1030->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  do
    v142 = __ldaxr(v136);
  while (__stlxr(v142 - 1, v136));
  if (!v142)
  {
    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
    std::__shared_weak_count::__release_weak(v135);
  }
  v143 = (std::__shared_weak_count *)operator new(0x228uLL);
  v143->__shared_owners_ = 0;
  v144 = (unint64_t *)&v143->__shared_owners_;
  v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v143[2].__shared_owners_ = 0u;
  v143[3].std::__shared_count = 0u;
  *(_OWORD *)&v143[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v143[4].__shared_owners_ = 0u;
  v143[5].std::__shared_count = 0u;
  *(_OWORD *)&v143[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v143[6].__shared_owners_ = 0u;
  v143[7].std::__shared_count = 0u;
  *(_OWORD *)&v143[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v143[8].__shared_owners_ = 0u;
  v143[9].std::__shared_count = 0u;
  *(_OWORD *)&v143[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v143[10].__shared_owners_ = 0u;
  v143[11].std::__shared_count = 0u;
  *(_OWORD *)&v143[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v143[12].__shared_owners_ = 0u;
  v143[13].std::__shared_count = 0u;
  *(_OWORD *)&v143[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v143[14].__shared_owners_ = 0u;
  v143[15].std::__shared_count = 0u;
  *(_OWORD *)&v143[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v143[16].__shared_owners_ = 0u;
  v143[17].std::__shared_count = 0u;
  *(_OWORD *)&v143[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v143[18].__shared_owners_ = 0u;
  v143[19].std::__shared_count = 0u;
  *(_OWORD *)&v143[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v143[20].__shared_owners_ = 0u;
  v143[21].std::__shared_count = 0u;
  *(_OWORD *)&v143[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v143[22].__shared_owners_ = 0u;
  *(_OWORD *)&v143[1].__shared_weak_owners_ = xmmword_1C85F9EA0;
  v143->__shared_weak_owners_ = 0;
  v143[1].__vftable = (std::__shared_weak_count_vtbl *)&v143[1].__shared_weak_owners_;
  v143[1].__shared_owners_ = 0x2000000001;
  v145 = (llvm::raw_ostream *)*a1;
  v1027 = v143 + 1;
  v1028 = v143;
  do
    v146 = __ldxr(v144);
  while (__stxr(v146 + 1, v144));
  sub_1C5034188(v145, 12, (uint64_t)&v1027);
  v147 = v1028;
  if (v1028)
  {
    v148 = (unint64_t *)&v1028->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  do
    v150 = __ldaxr(v144);
  while (__stlxr(v150 - 1, v144));
  if (!v150)
  {
    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
    std::__shared_weak_count::__release_weak(v143);
  }
  v151 = (std::__shared_weak_count *)operator new(0x228uLL);
  v151->__shared_owners_ = 0;
  v152 = (unint64_t *)&v151->__shared_owners_;
  v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v151[5].std::__shared_count = 0u;
  *(_OWORD *)&v151[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v151[6].__shared_owners_ = 0u;
  v151[7].std::__shared_count = 0u;
  *(_OWORD *)&v151[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v151[8].__shared_owners_ = 0u;
  v151[9].std::__shared_count = 0u;
  *(_OWORD *)&v151[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v151[10].__shared_owners_ = 0u;
  v151[11].std::__shared_count = 0u;
  *(_OWORD *)&v151[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v151[12].__shared_owners_ = 0u;
  v151[13].std::__shared_count = 0u;
  *(_OWORD *)&v151[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v151[14].__shared_owners_ = 0u;
  v151[15].std::__shared_count = 0u;
  *(_OWORD *)&v151[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v151[16].__shared_owners_ = 0u;
  v151[17].std::__shared_count = 0u;
  *(_OWORD *)&v151[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v151[18].__shared_owners_ = 0u;
  v151[19].std::__shared_count = 0u;
  *(_OWORD *)&v151[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v151[20].__shared_owners_ = 0u;
  v151[21].std::__shared_count = 0u;
  *(_OWORD *)&v151[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v151[22].__shared_owners_ = 0u;
  *(_OWORD *)&v151[1].__shared_weak_owners_ = xmmword_1C85F9EB0;
  v151->__shared_weak_owners_ = 0;
  v151[1].__vftable = (std::__shared_weak_count_vtbl *)&v151[1].__shared_weak_owners_;
  *(_OWORD *)&v151[2].__shared_owners_ = xmmword_1C6A5FC00;
  v151[3].__vftable = (std::__shared_weak_count_vtbl *)(32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3));
  v153 = (llvm::raw_ostream *)*a1;
  *(_OWORD *)&v151[3].__shared_owners_ = xmmword_1C64169D0;
  v151[4].std::__shared_count = (std::__shared_count)vdupq_n_s64(6uLL);
  v151[4].__shared_weak_owners_ = 4;
  v151[1].__shared_owners_ = 0x2000000005;
  v1025 = v151 + 1;
  v1026 = v151;
  do
    v154 = __ldxr(v152);
  while (__stxr(v154 + 1, v152));
  sub_1C5034188(v153, 12, (uint64_t)&v1025);
  v155 = v1026;
  if (v1026)
  {
    v156 = (unint64_t *)&v1026->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  do
    v158 = __ldaxr(v152);
  while (__stlxr(v158 - 1, v152));
  if (!v158)
  {
    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
    std::__shared_weak_count::__release_weak(v151);
  }
  sub_1C502481C(*a1);
  sub_1C50244C4(*a1, 0x11u, 4u);
  __p[0] = v1065;
  __p[1] = (void *)0x4000000000;
  v159 = 32 - __clz((unint64_t)(a1[10] - a1[9]) >> 3);
  v160 = (char *)operator new(0x228uLL);
  *(_QWORD *)v160 = &unk_1E813F300;
  *((_QWORD *)v160 + 1) = 0;
  *(_OWORD *)(v160 + 88) = 0u;
  *(_OWORD *)(v160 + 104) = 0u;
  *(_OWORD *)(v160 + 120) = 0u;
  *(_OWORD *)(v160 + 136) = 0u;
  *(_OWORD *)(v160 + 152) = 0u;
  *(_OWORD *)(v160 + 168) = 0u;
  *(_OWORD *)(v160 + 184) = 0u;
  *(_OWORD *)(v160 + 200) = 0u;
  *(_OWORD *)(v160 + 216) = 0u;
  *(_OWORD *)(v160 + 232) = 0u;
  *(_OWORD *)(v160 + 248) = 0u;
  *(_OWORD *)(v160 + 264) = 0u;
  *(_OWORD *)(v160 + 280) = 0u;
  *(_OWORD *)(v160 + 296) = 0u;
  *(_OWORD *)(v160 + 312) = 0u;
  *(_OWORD *)(v160 + 328) = 0u;
  *(_OWORD *)(v160 + 344) = 0u;
  *(_OWORD *)(v160 + 360) = 0u;
  *(_OWORD *)(v160 + 376) = 0u;
  *(_OWORD *)(v160 + 392) = 0u;
  *(_OWORD *)(v160 + 408) = 0u;
  *(_OWORD *)(v160 + 424) = 0u;
  *(_OWORD *)(v160 + 440) = 0u;
  *(_OWORD *)(v160 + 456) = 0u;
  *(_OWORD *)(v160 + 472) = 0u;
  *(_OWORD *)(v160 + 488) = 0u;
  *(_OWORD *)(v160 + 504) = 0u;
  *(_OWORD *)(v160 + 520) = 0u;
  *(_OWORD *)(v160 + 536) = 0u;
  *(_OWORD *)(v160 + 40) = xmmword_1C85F9EC0;
  *((_QWORD *)v160 + 2) = 0;
  *((_QWORD *)v160 + 3) = v160 + 40;
  *((_QWORD *)v160 + 7) = v159;
  *((_OWORD *)v160 + 4) = xmmword_1C64169D0;
  *((_QWORD *)v160 + 10) = 255;
  *((_QWORD *)v160 + 4) = 0x2000000003;
  v161 = *a1;
  v1058 = v160 + 24;
  v1059 = (uint64_t)v160;
  v1007 = sub_1C50247B8(v161, (uint64_t)&v1058);
  v162 = (std::__shared_weak_count *)v1059;
  if (v1059)
  {
    v163 = (unint64_t *)(v1059 + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = (char *)operator new(0x228uLL);
  *(_QWORD *)v165 = &unk_1E813F300;
  *((_QWORD *)v165 + 1) = 0;
  *(_OWORD *)(v165 + 72) = 0u;
  *(_OWORD *)(v165 + 88) = 0u;
  *(_OWORD *)(v165 + 104) = 0u;
  *(_OWORD *)(v165 + 120) = 0u;
  *(_OWORD *)(v165 + 136) = 0u;
  *(_OWORD *)(v165 + 152) = 0u;
  *(_OWORD *)(v165 + 168) = 0u;
  *(_OWORD *)(v165 + 184) = 0u;
  *(_OWORD *)(v165 + 200) = 0u;
  *(_OWORD *)(v165 + 216) = 0u;
  *(_OWORD *)(v165 + 232) = 0u;
  *(_OWORD *)(v165 + 248) = 0u;
  *(_OWORD *)(v165 + 264) = 0u;
  *(_OWORD *)(v165 + 280) = 0u;
  *(_OWORD *)(v165 + 296) = 0u;
  *(_OWORD *)(v165 + 312) = 0u;
  *(_OWORD *)(v165 + 328) = 0u;
  *(_OWORD *)(v165 + 344) = 0u;
  *(_OWORD *)(v165 + 360) = 0u;
  *(_OWORD *)(v165 + 376) = 0u;
  *(_OWORD *)(v165 + 392) = 0u;
  *(_OWORD *)(v165 + 408) = 0u;
  *(_OWORD *)(v165 + 424) = 0u;
  *(_OWORD *)(v165 + 440) = 0u;
  *(_OWORD *)(v165 + 456) = 0u;
  *(_OWORD *)(v165 + 472) = 0u;
  *(_OWORD *)(v165 + 488) = 0u;
  *(_OWORD *)(v165 + 504) = 0u;
  *(_OWORD *)(v165 + 520) = 0u;
  *(_OWORD *)(v165 + 536) = 0u;
  *(_OWORD *)(v165 + 40) = xmmword_1C85F9ED0;
  *((_QWORD *)v165 + 2) = 0;
  *((_QWORD *)v165 + 3) = v165 + 40;
  *(_OWORD *)(v165 + 56) = xmmword_1C85F9EE0;
  *((_QWORD *)v165 + 4) = 0x2000000002;
  v166 = *a1;
  v1061 = v165 + 24;
  v1062 = (uint64_t)v165;
  v1005 = sub_1C50247B8(v166, (uint64_t)&v1061);
  v167 = (std::__shared_weak_count *)v1062;
  if (v1062)
  {
    v168 = (unint64_t *)(v1062 + 8);
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = (char *)operator new(0x228uLL);
  *(_QWORD *)v170 = &unk_1E813F300;
  *((_QWORD *)v170 + 1) = 0;
  *(_OWORD *)(v170 + 104) = 0u;
  *(_OWORD *)(v170 + 120) = 0u;
  *(_OWORD *)(v170 + 136) = 0u;
  *(_OWORD *)(v170 + 152) = 0u;
  *(_OWORD *)(v170 + 168) = 0u;
  *(_OWORD *)(v170 + 184) = 0u;
  *(_OWORD *)(v170 + 200) = 0u;
  *(_OWORD *)(v170 + 216) = 0u;
  *(_OWORD *)(v170 + 232) = 0u;
  *(_OWORD *)(v170 + 248) = 0u;
  *(_OWORD *)(v170 + 264) = 0u;
  *(_OWORD *)(v170 + 280) = 0u;
  *(_OWORD *)(v170 + 296) = 0u;
  *(_OWORD *)(v170 + 312) = 0u;
  *(_OWORD *)(v170 + 328) = 0u;
  *(_OWORD *)(v170 + 344) = 0u;
  *(_OWORD *)(v170 + 360) = 0u;
  *(_OWORD *)(v170 + 376) = 0u;
  *(_OWORD *)(v170 + 392) = 0u;
  *(_OWORD *)(v170 + 408) = 0u;
  *(_OWORD *)(v170 + 424) = 0u;
  *(_OWORD *)(v170 + 440) = 0u;
  *(_OWORD *)(v170 + 456) = 0u;
  *(_OWORD *)(v170 + 472) = 0u;
  *(_OWORD *)(v170 + 488) = 0u;
  *(_OWORD *)(v170 + 504) = 0u;
  *(_OWORD *)(v170 + 40) = xmmword_1C85F9EF0;
  *(_OWORD *)(v170 + 520) = 0u;
  *(_OWORD *)(v170 + 536) = 0u;
  *((_QWORD *)v170 + 2) = 0;
  *((_QWORD *)v170 + 3) = v170 + 40;
  *(_OWORD *)(v170 + 56) = xmmword_1C6A5FC00;
  *(_OWORD *)(v170 + 72) = xmmword_1C85F9DD0;
  v171 = *a1;
  *((_QWORD *)v170 + 11) = v159;
  *((_QWORD *)v170 + 12) = 2;
  *((_QWORD *)v170 + 4) = 0x2000000004;
  __dst = (__int128 *)(v170 + 24);
  v1048 = (__int128 *)v170;
  v1008 = sub_1C50247B8(v171, (uint64_t)&__dst);
  v172 = (std::__shared_weak_count *)v1048;
  if (v1048)
  {
    v173 = (unint64_t *)v1048 + 1;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = (char *)operator new(0x228uLL);
  *(_OWORD *)(v175 + 40) = xmmword_1C85F9F00;
  *(_QWORD *)v175 = &unk_1E813F300;
  *((_QWORD *)v175 + 1) = 0;
  *(_OWORD *)(v175 + 104) = 0u;
  *(_OWORD *)(v175 + 120) = 0u;
  *(_OWORD *)(v175 + 136) = 0u;
  *(_OWORD *)(v175 + 152) = 0u;
  *(_OWORD *)(v175 + 168) = 0u;
  *(_OWORD *)(v175 + 184) = 0u;
  *(_OWORD *)(v175 + 200) = 0u;
  *(_OWORD *)(v175 + 216) = 0u;
  *(_OWORD *)(v175 + 232) = 0u;
  *(_OWORD *)(v175 + 248) = 0u;
  *(_OWORD *)(v175 + 264) = 0u;
  *(_OWORD *)(v175 + 280) = 0u;
  *(_OWORD *)(v175 + 296) = 0u;
  *(_OWORD *)(v175 + 312) = 0u;
  *(_OWORD *)(v175 + 328) = 0u;
  *(_OWORD *)(v175 + 344) = 0u;
  *(_OWORD *)(v175 + 360) = 0u;
  *(_OWORD *)(v175 + 376) = 0u;
  *(_OWORD *)(v175 + 392) = 0u;
  *(_OWORD *)(v175 + 408) = 0u;
  *(_OWORD *)(v175 + 424) = 0u;
  *(_OWORD *)(v175 + 440) = 0u;
  *(_OWORD *)(v175 + 456) = 0u;
  *(_OWORD *)(v175 + 472) = 0u;
  *(_OWORD *)(v175 + 488) = 0u;
  *(_OWORD *)(v175 + 504) = 0u;
  *(_OWORD *)(v175 + 520) = 0u;
  *(_OWORD *)(v175 + 536) = 0u;
  *((_QWORD *)v175 + 2) = 0;
  *((_QWORD *)v175 + 3) = v175 + 40;
  *(_OWORD *)(v175 + 56) = xmmword_1C6A5FC00;
  *(_OWORD *)(v175 + 72) = xmmword_1C85F9DD0;
  v176 = *a1;
  *((_QWORD *)v175 + 11) = v159;
  *((_QWORD *)v175 + 12) = 2;
  *((_QWORD *)v175 + 4) = 0x2000000004;
  *(_QWORD *)&v1056 = v175 + 24;
  *((_QWORD *)&v1056 + 1) = v175;
  v1006 = sub_1C50247B8(v176, (uint64_t)&v1056);
  v177 = (std::__shared_weak_count *)*((_QWORD *)&v1056 + 1);
  if (*((_QWORD *)&v1056 + 1))
  {
    v178 = (unint64_t *)(*((_QWORD *)&v1056 + 1) + 8);
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = (char *)operator new(0x228uLL);
  *(_QWORD *)v180 = &unk_1E813F300;
  *((_QWORD *)v180 + 1) = 0;
  *(_OWORD *)(v180 + 88) = 0u;
  *(_OWORD *)(v180 + 104) = 0u;
  *(_OWORD *)(v180 + 120) = 0u;
  *(_OWORD *)(v180 + 136) = 0u;
  *(_OWORD *)(v180 + 152) = 0u;
  *(_OWORD *)(v180 + 168) = 0u;
  *(_OWORD *)(v180 + 184) = 0u;
  *(_OWORD *)(v180 + 200) = 0u;
  *(_OWORD *)(v180 + 216) = 0u;
  *(_OWORD *)(v180 + 232) = 0u;
  *(_OWORD *)(v180 + 248) = 0u;
  *(_OWORD *)(v180 + 264) = 0u;
  *(_OWORD *)(v180 + 280) = 0u;
  *(_OWORD *)(v180 + 296) = 0u;
  *(_OWORD *)(v180 + 312) = 0u;
  *(_OWORD *)(v180 + 328) = 0u;
  *(_OWORD *)(v180 + 344) = 0u;
  *(_OWORD *)(v180 + 360) = 0u;
  *(_OWORD *)(v180 + 376) = 0u;
  *(_OWORD *)(v180 + 392) = 0u;
  *(_OWORD *)(v180 + 408) = 0u;
  *(_OWORD *)(v180 + 424) = 0u;
  *(_OWORD *)(v180 + 440) = 0u;
  *(_OWORD *)(v180 + 456) = 0u;
  *(_OWORD *)(v180 + 472) = 0u;
  *(_OWORD *)(v180 + 488) = 0u;
  *(_OWORD *)(v180 + 504) = 0u;
  *(_OWORD *)(v180 + 520) = 0u;
  *(_OWORD *)(v180 + 536) = 0u;
  *(_OWORD *)(v180 + 40) = xmmword_1C85F9F10;
  *((_QWORD *)v180 + 2) = 0;
  *((_QWORD *)v180 + 3) = v180 + 40;
  *(_OWORD *)(v180 + 56) = xmmword_1C85F9DD0;
  *(_OWORD *)(v180 + 72) = xmmword_1C6464ED0;
  *((_QWORD *)v180 + 4) = 0x2000000003;
  v181 = *a1;
  v1054 = (std::__shared_weak_count *)(v180 + 24);
  v1055 = (std::__shared_weak_count *)v180;
  v182 = sub_1C50247B8(v181, (uint64_t)&v1054);
  v183 = v1055;
  if (v1055)
  {
    v184 = (unint64_t *)&v1055->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = (char *)operator new(0x228uLL);
  *(_QWORD *)v186 = &unk_1E813F300;
  *((_QWORD *)v186 + 1) = 0;
  *(_OWORD *)(v186 + 104) = 0u;
  *(_OWORD *)(v186 + 120) = 0u;
  *(_OWORD *)(v186 + 136) = 0u;
  *(_OWORD *)(v186 + 152) = 0u;
  *(_OWORD *)(v186 + 168) = 0u;
  *(_OWORD *)(v186 + 184) = 0u;
  *(_OWORD *)(v186 + 200) = 0u;
  *(_OWORD *)(v186 + 216) = 0u;
  *(_OWORD *)(v186 + 232) = 0u;
  *(_OWORD *)(v186 + 248) = 0u;
  *(_OWORD *)(v186 + 264) = 0u;
  *(_OWORD *)(v186 + 280) = 0u;
  *(_OWORD *)(v186 + 296) = 0u;
  *(_OWORD *)(v186 + 312) = 0u;
  *(_OWORD *)(v186 + 328) = 0u;
  *(_OWORD *)(v186 + 344) = 0u;
  *(_OWORD *)(v186 + 360) = 0u;
  *(_OWORD *)(v186 + 376) = 0u;
  *(_OWORD *)(v186 + 392) = 0u;
  *(_OWORD *)(v186 + 408) = 0u;
  *(_OWORD *)(v186 + 424) = 0u;
  *(_OWORD *)(v186 + 440) = 0u;
  *(_OWORD *)(v186 + 456) = 0u;
  *(_OWORD *)(v186 + 472) = 0u;
  *(_OWORD *)(v186 + 488) = 0u;
  *(_OWORD *)(v186 + 504) = 0u;
  *(_OWORD *)(v186 + 40) = xmmword_1C85F9E40;
  *(_OWORD *)(v186 + 520) = 0u;
  *(_OWORD *)(v186 + 536) = 0u;
  *((_QWORD *)v186 + 2) = 0;
  *((_QWORD *)v186 + 3) = v186 + 40;
  *(_OWORD *)(v186 + 56) = xmmword_1C6A5FC00;
  *(_OWORD *)(v186 + 72) = xmmword_1C85F9DD0;
  v187 = *a1;
  *((_QWORD *)v186 + 11) = v159;
  *((_QWORD *)v186 + 12) = 2;
  *((_QWORD *)v186 + 4) = 0x2000000004;
  v1052 = (std::__shared_weak_count *)(v186 + 24);
  v1053 = (std::__shared_weak_count *)v186;
  v1012 = sub_1C50247B8(v187, (uint64_t)&v1052);
  v188 = v1053;
  if (v1053)
  {
    v189 = (unint64_t *)&v1053->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = (char *)operator new(0x228uLL);
  *(_QWORD *)v191 = &unk_1E813F300;
  *((_QWORD *)v191 + 1) = 0;
  *(_OWORD *)(v191 + 88) = 0u;
  *(_OWORD *)(v191 + 104) = 0u;
  *(_OWORD *)(v191 + 120) = 0u;
  *(_OWORD *)(v191 + 136) = 0u;
  *(_OWORD *)(v191 + 152) = 0u;
  *(_OWORD *)(v191 + 168) = 0u;
  *(_OWORD *)(v191 + 184) = 0u;
  *(_OWORD *)(v191 + 200) = 0u;
  *(_OWORD *)(v191 + 216) = 0u;
  *(_OWORD *)(v191 + 232) = 0u;
  *(_OWORD *)(v191 + 248) = 0u;
  *(_OWORD *)(v191 + 264) = 0u;
  *(_OWORD *)(v191 + 280) = 0u;
  *(_OWORD *)(v191 + 296) = 0u;
  *(_OWORD *)(v191 + 312) = 0u;
  *(_OWORD *)(v191 + 328) = 0u;
  *(_OWORD *)(v191 + 344) = 0u;
  *(_OWORD *)(v191 + 360) = 0u;
  *(_OWORD *)(v191 + 376) = 0u;
  *(_OWORD *)(v191 + 392) = 0u;
  *(_OWORD *)(v191 + 408) = 0u;
  *(_OWORD *)(v191 + 424) = 0u;
  *(_OWORD *)(v191 + 440) = 0u;
  *(_OWORD *)(v191 + 456) = 0u;
  *(_OWORD *)(v191 + 472) = 0u;
  *(_OWORD *)(v191 + 488) = 0u;
  *(_OWORD *)(v191 + 504) = 0u;
  *(_OWORD *)(v191 + 520) = 0u;
  *(_OWORD *)(v191 + 536) = 0u;
  *(_OWORD *)(v191 + 40) = xmmword_1C85F9E10;
  *((_QWORD *)v191 + 2) = 0;
  *((_QWORD *)v191 + 3) = v191 + 40;
  *(_OWORD *)(v191 + 56) = xmmword_1C85F6860;
  *((_QWORD *)v191 + 9) = v159;
  *((_QWORD *)v191 + 10) = 2;
  *((_QWORD *)v191 + 4) = 0x2000000003;
  v192 = *a1;
  v1045 = (std::__shared_weak_count *)(v191 + 24);
  v1046 = (std::__shared_weak_count *)v191;
  v1017 = sub_1C50247B8(v192, (uint64_t)&v1045);
  v193 = v1046;
  if (v1046)
  {
    v194 = (unint64_t *)&v1046->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v1016 = (uint64_t)(a1 + 3);
  v196 = (a1[10] - a1[9]) >> 3;
  v197 = __p[1];
  if (LODWORD(__p[1]) >= HIDWORD(__p[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
    v197 = __p[1];
  }
  *((_QWORD *)__p[0] + v197) = v196;
  ++LODWORD(__p[1]);
  sub_1C5034740((llvm::raw_ostream *)*a1, 1u, (uint64_t)__p, 0);
  LODWORD(__p[1]) = 0;
  v199 = a1[9];
  v198 = a1[10];
  if (v199 != v198)
  {
    v200 = a1 + 6;
    do
    {
      v201 = 0;
      v202 = *(_QWORD *)v199;
      v203 = *(unsigned int *)(*(_QWORD *)v199 + 8);
      v204 = 0;
      switch(*(_DWORD *)(*(_QWORD *)v199 + 8))
      {
        case 0u:
          v204 = 0;
          v201 = 10;
          break;
        case 1u:
          v204 = 0;
          v201 = 23;
          break;
        case 2u:
          v204 = 0;
          v201 = 3;
          break;
        case 3u:
          v204 = 0;
          v201 = 4;
          break;
        case 4u:
          v204 = 0;
          v201 = 13;
          break;
        case 5u:
          v204 = 0;
          v201 = 14;
          break;
        case 6u:
          v204 = 0;
          v201 = 15;
          break;
        case 7u:
          v204 = 0;
          v201 = 2;
          break;
        case 8u:
          v204 = 0;
          v201 = 5;
          break;
        case 9u:
          v204 = 0;
          v201 = 16;
          break;
        case 0xAu:
          v204 = 0;
          v201 = 17;
          break;
        case 0xBu:
          v204 = 0;
          v201 = 24;
          break;
        case 0xCu:
          v204 = 0;
          v201 = 22;
          break;
        case 0xDu:
          if (HIDWORD(__p[1]))
          {
            v211 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, 1uLL, 8);
            v211 = LODWORD(__p[1]);
          }
          v204 = 0;
          *((_QWORD *)__p[0] + v211) = v203 >> 8;
          ++LODWORD(__p[1]);
          v201 = 7;
          break;
        case 0xEu:
          v212 = v203 > 0xFF;
          if (HIDWORD(__p[1]))
          {
            v213 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, 1uLL, 8);
            v213 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v213) = v212;
          ++LODWORD(__p[1]);
          v1043 = **(std::__shared_weak_count ***)(v202 + 16);
          v1041 = 0;
          if (sub_1C4DD8A9C(v200, &v1043, &v1041))
            v214 = (uint64_t)v1041;
          else
            v214 = *(_QWORD *)(v1024 + 48) + 16 * *(unsigned int *)(v1024 + 64);
          v239 = *(_DWORD *)(v214 + 8);
          v240 = LODWORD(__p[1]);
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
            v240 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v240) = (v239 - 1);
          ++LODWORD(__p[1]);
          if (*(_DWORD *)(v202 + 12) == 1)
          {
            v201 = 21;
          }
          else
          {
            v241 = 0;
            v242 = 8 * (*(_DWORD *)(v202 + 12) - 1);
            do
            {
              v1043 = *(std::__shared_weak_count **)(*(_QWORD *)(v202 + 16) + v241 + 8);
              v1041 = 0;
              if (sub_1C4DD8A9C(v200, &v1043, &v1041))
                v243 = (uint64_t)v1041;
              else
                v243 = *(_QWORD *)(v1024 + 48) + 16 * *(unsigned int *)(v1024 + 64);
              v244 = *(_DWORD *)(v243 + 8);
              v245 = LODWORD(__p[1]);
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
                v245 = LODWORD(__p[1]);
              }
              *((_QWORD *)__p[0] + v245) = (v244 - 1);
              ++LODWORD(__p[1]);
              v241 += 8;
              v201 = 21;
            }
            while (v242 != v241);
          }
          v204 = v1008;
          break;
        case 0xFu:
          v215 = v203 >> 8;
          if (*(_QWORD *)(v202 + 24))
          {
            v1043 = **(std::__shared_weak_count ***)(v202 + 16);
            v1041 = 0;
            if (sub_1C4DD8A9C(v200, &v1043, &v1041))
              v216 = (uint64_t)v1041;
            else
              v216 = *(_QWORD *)(v1024 + 48) + 16 * *(unsigned int *)(v1024 + 64);
            v252 = *(_DWORD *)(v216 + 8);
            v253 = LODWORD(__p[1]);
            if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
              v253 = LODWORD(__p[1]);
            }
            *((_QWORD *)__p[0] + v253) = (v252 - 1);
            v254 = (LODWORD(__p[1]) + 1);
            LODWORD(__p[1]) = v254;
            if (v254 >= HIDWORD(__p[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v254 + 1, 8);
              LODWORD(v254) = __p[1];
            }
            *((_QWORD *)__p[0] + v254) = v215;
            ++LODWORD(__p[1]);
            if (v203 >= 0x100)
              v204 = 0;
            else
              v204 = v1007;
            v201 = 8;
          }
          else
          {
            if (HIDWORD(__p[1]))
            {
              v251 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, 1uLL, 8);
              v251 = LODWORD(__p[1]);
            }
            *((_QWORD *)__p[0] + v251) = v215;
            ++LODWORD(__p[1]);
            if (v203 >= 0x100)
              v204 = 0;
            else
              v204 = v1005;
            v201 = 25;
          }
          break;
        case 0x10u:
          if (HIDWORD(__p[1]))
          {
            v220 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, 1uLL, 8);
            v220 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v220) = (v203 >> 9) & 1;
          ++LODWORD(__p[1]);
          v221 = *(unsigned int *)(v202 + 12);
          if ((_DWORD)v221)
          {
            v222 = *(std::__shared_weak_count ***)(v202 + 16);
            v223 = 8 * v221;
            do
            {
              v1043 = *v222;
              v1041 = 0;
              if (sub_1C4DD8A9C(v200, &v1043, &v1041))
                v224 = (uint64_t)v1041;
              else
                v224 = *(_QWORD *)(v1024 + 48) + 16 * *(unsigned int *)(v1024 + 64);
              v225 = *(_DWORD *)(v224 + 8);
              v226 = LODWORD(__p[1]);
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
                v226 = LODWORD(__p[1]);
              }
              *((_QWORD *)__p[0] + v226) = (v225 - 1);
              ++LODWORD(__p[1]);
              ++v222;
              v223 -= 8;
            }
            while (v223);
          }
          v227 = *(_DWORD *)(v202 + 8);
          if ((v227 & 0x400) != 0)
          {
            v201 = 18;
            v204 = v1006;
          }
          else
          {
            if ((v227 & 0x100) != 0)
              v201 = 20;
            else
              v201 = 6;
            v204 = v1012 & (v227 << 23 >> 31);
            v228 = *(_QWORD *)(v202 + 24);
            if (v228 && *(_QWORD *)v228)
              sub_1C5033124(*(llvm::raw_ostream **)v1024, 0x13u, (_BYTE *)(v228 + 16), *(_QWORD *)v228, v182);
          }
          break;
        case 0x11u:
          v217 = *(_QWORD *)(v202 + 32);
          if (HIDWORD(__p[1]))
          {
            v218 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, 1uLL, 8);
            v218 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v218) = v217;
          ++LODWORD(__p[1]);
          v1043 = *(std::__shared_weak_count **)(v202 + 24);
          v1041 = 0;
          if (sub_1C4DD8A9C(v200, &v1043, &v1041))
            v219 = (uint64_t)v1041;
          else
            v219 = *(_QWORD *)(v1024 + 48) + 16 * *(unsigned int *)(v1024 + 64);
          v246 = *(_DWORD *)(v219 + 8);
          v247 = LODWORD(__p[1]);
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
            v247 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v247) = (v246 - 1);
          ++LODWORD(__p[1]);
          v201 = 11;
          v204 = v1017;
          break;
        case 0x12u:
        case 0x13u:
          v205 = *(unsigned int *)(v202 + 32);
          if (HIDWORD(__p[1]))
          {
            v206 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, 1uLL, 8);
            v206 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v206) = v205;
          ++LODWORD(__p[1]);
          v1043 = *(std::__shared_weak_count **)(v202 + 24);
          v1041 = 0;
          if (sub_1C4DD8A9C(v200, &v1043, &v1041))
            v207 = (uint64_t)v1041;
          else
            v207 = *(_QWORD *)(v1024 + 48) + 16 * *(unsigned int *)(v1024 + 64);
          v208 = *(_DWORD *)(v207 + 8);
          v209 = LODWORD(__p[1]);
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
            v209 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v209) = (v208 - 1);
          v210 = ++LODWORD(__p[1]);
          if (*(_BYTE *)(v202 + 8) == 19)
          {
            if (v210 >= HIDWORD(__p[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v210 + 1, 8);
              LODWORD(v210) = __p[1];
            }
            v204 = 0;
            *((_QWORD *)__p[0] + v210) = 1;
            ++LODWORD(__p[1]);
          }
          else
          {
            v204 = 0;
          }
          v201 = 12;
          break;
        case 0x14u:
          break;
        case 0x15u:
          sub_1C5033124(*(llvm::raw_ostream **)v1024, 0x13u, *(_BYTE **)(v202 + 24), *(_QWORD *)(v202 + 32), v182);
          v229 = *(unsigned int *)(v202 + 12);
          v230 = LODWORD(__p[1]);
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
            v230 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v230) = v229;
          v231 = ++LODWORD(__p[1]);
          v232 = *(unsigned int *)(v202 + 12);
          if ((_DWORD)v232)
          {
            v233 = *(std::__shared_weak_count ***)(v202 + 16);
            v234 = 8 * v232;
            do
            {
              v1043 = *v233;
              v1041 = 0;
              if (sub_1C4DD8A9C(v200, &v1043, &v1041))
                v235 = (uint64_t)v1041;
              else
                v235 = *(_QWORD *)(v1024 + 48) + 16 * *(unsigned int *)(v1024 + 64);
              v236 = *(_DWORD *)(v235 + 8);
              v237 = LODWORD(__p[1]);
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
                v237 = LODWORD(__p[1]);
              }
              *((_QWORD *)__p[0] + v237) = (v236 - 1);
              v231 = ++LODWORD(__p[1]);
              ++v233;
              v234 -= 8;
            }
            while (v234);
          }
          v238 = *(unsigned int *)(v202 + 8);
          if (v238 >= 0x100)
          {
            v248 = *(unsigned int **)(v202 + 40);
            v249 = 4 * (v238 >> 8);
            do
            {
              v250 = *v248;
              if (v231 >= HIDWORD(__p[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v231 + 1, 8);
                v231 = __p[1];
              }
              v204 = 0;
              *((_QWORD *)__p[0] + v231) = v250;
              v231 = ++LODWORD(__p[1]);
              ++v248;
              v201 = 26;
              v249 -= 4;
            }
            while (v249);
          }
          else
          {
            v204 = 0;
            v201 = 26;
          }
          break;
        default:
          v204 = 0;
          break;
      }
      sub_1C5034740(*(llvm::raw_ostream **)v1024, v201, (uint64_t)__p, v204);
      LODWORD(__p[1]) = 0;
      v199 += 8;
    }
    while (v199 != v198);
  }
  v255 = (uint64_t *)v1024;
  sub_1C502481C(*(_QWORD *)v1024);
  if (__p[0] != v1065)
    free(__p[0]);
  v256 = v1016;
  if (*(_QWORD *)(v1024 + 320) != *(_QWORD *)(v1024 + 328))
  {
    sub_1C50244C4(*(_QWORD *)v1024, 0xAu, 3u);
    __p[0] = v1065;
    __p[1] = (void *)0x4000000000;
    v257 = *(uint64_t **)(v1024 + 320);
    v1018 = *(uint64_t **)(v1024 + 328);
    while (v257 != v1018)
    {
      v259 = *v257;
      v258 = v257[1];
      v260 = sub_1C503492C(v256, *v257, v258);
      v261 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
        v261 = LODWORD(__p[1]);
      }
      *((_QWORD *)__p[0] + v261) = v260;
      v262 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v262;
      if (v262 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v262 + 1, 8);
        LODWORD(v262) = __p[1];
      }
      *((_QWORD *)__p[0] + v262) = v259;
      v263 = ++LODWORD(__p[1]);
      if (v258)
        v264 = (uint64_t *)(v258 + 48);
      else
        v264 = 0;
      if (v258)
        v265 = v258 + 48 + 8 * *(unsigned int *)(v258 + 8);
      else
        v265 = 0;
      while (v264 != (uint64_t *)v265)
      {
        v266 = *v264;
        if (!*v264)
        {
          v277 = 0;
          goto LABEL_390;
        }
        v267 = *(unsigned __int8 *)(v266 + 8);
        if (v267 != 2)
        {
          if (v267 == 1)
          {
            if (v263 >= HIDWORD(__p[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v263 + 1, 8);
              v263 = __p[1];
            }
            *((_QWORD *)__p[0] + v263) = 1;
            ++LODWORD(__p[1]);
            v270 = LODWORD(__p[1]);
            v271 = sub_1C5034994(*(_DWORD *)(v266 + 12));
            if (v270 >= HIDWORD(__p[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v270 + 1, 8);
              LODWORD(v270) = __p[1];
            }
            *((_QWORD *)__p[0] + v270) = v271;
            v268 = LODWORD(__p[1]) + 1;
            LODWORD(__p[1]) = v268;
            v269 = *(_QWORD *)(v266 + 16);
            if (v268 < HIDWORD(__p[1]))
              goto LABEL_409;
          }
          else
          {
            if (!*(_BYTE *)(v266 + 8))
            {
              if (v263 >= HIDWORD(__p[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v263 + 1, 8);
                v263 = __p[1];
              }
              *((_QWORD *)__p[0] + v263) = 0;
              v268 = ++LODWORD(__p[1]);
              v269 = sub_1C5034994(*(_DWORD *)(v266 + 12));
              goto LABEL_408;
            }
            v277 = *(_QWORD *)(v266 + 16);
LABEL_390:
            if (v277)
              v278 = 6;
            else
              v278 = 5;
            if (v263 >= HIDWORD(__p[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v263 + 1, 8);
              v263 = __p[1];
            }
            *((_QWORD *)__p[0] + v263) = v278;
            v279 = ++LODWORD(__p[1]);
            if (v266)
              v280 = *(_DWORD *)(v266 + 12);
            else
              v280 = 0;
            v281 = sub_1C5034994(v280);
            if (v279 >= HIDWORD(__p[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v279 + 1, 8);
              LODWORD(v279) = __p[1];
            }
            *((_QWORD *)__p[0] + v279) = v281;
            v263 = ++LODWORD(__p[1]);
            if (!v277)
            {
              v256 = v1016;
              goto LABEL_410;
            }
            v256 = v1016;
            if (v266)
              v282 = *(void **)(v266 + 16);
            else
              v282 = 0;
            v1058 = v282;
            v1061 = 0;
            if (sub_1C4DD8A9C((uint64_t *)(v1024 + 48), &v1058, &v1061))
              v283 = v1061;
            else
              v283 = (_DWORD *)(*(_QWORD *)(v1024 + 48) + 16 * *(unsigned int *)(v1024 + 64));
            v269 = (v283[2] - 1);
LABEL_407:
            v268 = __p[1];
LABEL_408:
            if (v268 < HIDWORD(__p[1]))
            {
LABEL_409:
              *((_QWORD *)__p[0] + v268) = v269;
              v263 = ++LODWORD(__p[1]);
              goto LABEL_410;
            }
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v268 + 1, 8);
          v268 = __p[1];
          goto LABEL_409;
        }
        v272 = *(unsigned int *)(v266 + 12);
        v273 = *(unsigned int *)(v266 + 16);
        if ((_DWORD)v273)
          v274 = 4;
        else
          v274 = 3;
        if (v263 >= HIDWORD(__p[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v263 + 1, 8);
          v263 = __p[1];
        }
        v275 = (char *)(v266 + 24 + v272);
        *((_QWORD *)__p[0] + v263) = v274;
        ++LODWORD(__p[1]);
        sub_1C50349A8((unsigned int *)__p, (char *)(v266 + 24), v275);
        v276 = LODWORD(__p[1]);
        if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
          v276 = LODWORD(__p[1]);
        }
        v256 = v1016;
        *((_QWORD *)__p[0] + v276) = 0;
        v263 = ++LODWORD(__p[1]);
        if ((_DWORD)v273)
        {
          sub_1C50349A8((unsigned int *)__p, v275 + 1, &v275[v273 + 1]);
          v269 = 0;
          goto LABEL_407;
        }
LABEL_410:
        ++v264;
      }
      sub_1C5034740(*(llvm::raw_ostream **)v1024, 3u, (uint64_t)__p, 0);
      LODWORD(__p[1]) = 0;
      v257 += 2;
    }
    v255 = (uint64_t *)v1024;
    sub_1C502481C(*(_QWORD *)v1024);
    if (__p[0] != v1065)
      free(__p[0]);
  }
  if (v255[46] != v255[47])
  {
    sub_1C50244C4(*v255, 9u, 3u);
    __p[0] = v1065;
    __p[1] = (void *)0x4000000000;
    v284 = v255[46];
    v285 = v255[47];
    while (v284 != v285)
    {
      if (*(_QWORD *)v284)
      {
        v286 = *(_DWORD *)(*(_QWORD *)v284 + 8);
        if (v286)
        {
          v287 = 0;
          do
          {
            v288 = *(_QWORD *)v284;
            if (*(_QWORD *)v284)
            {
              if (v287 < *(_DWORD *)(v288 + 8))
              {
                v289 = *(_QWORD *)(v288 + 8 * v287 + 40);
                if (v289)
                {
                  v290 = sub_1C503492C(v256, (v287 - 1), v289);
                  v291 = LODWORD(__p[1]);
                  if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
                    v291 = LODWORD(__p[1]);
                  }
                  *((_QWORD *)__p[0] + v291) = v290;
                  ++LODWORD(__p[1]);
                }
              }
            }
            ++v287;
          }
          while (v286 != (_DWORD)v287);
        }
      }
      sub_1C5034740((llvm::raw_ostream *)*v255, 2u, (uint64_t)__p, 0);
      LODWORD(__p[1]) = 0;
      v284 += 8;
    }
    sub_1C502481C(*v255);
    if (__p[0] != v1065)
      free(__p[0]);
  }
  __p[0] = v1065;
  __p[1] = (void *)0x4000000000;
  v292 = (unint64_t ***)v255[21];
  v293 = (unint64_t ***)v255[22];
  if (v292 != v293)
  {
    do
    {
      v294 = *v292;
      v295 = sub_1C5034B2C((uint64_t)v255, (_BYTE *)**v292 + 72, ***v292);
      v296 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v296 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v296) = v295;
      v297 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v297;
      v298 = *(_DWORD *)*v294;
      if (v297 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v297 + 1, 4);
        LODWORD(v297) = __p[1];
      }
      *((_DWORD *)__p[0] + v297) = v298;
      v299 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v299;
      v300 = *((_DWORD *)v294 + 2);
      if (v299 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v299 + 1, 4);
        LODWORD(v299) = __p[1];
      }
      *((_DWORD *)__p[0] + v299) = v300 + 1;
      ++LODWORD(__p[1]);
      sub_1C5033274((llvm::raw_ostream *)*v255, 0xCu, (uint64_t)__p, 0);
      LODWORD(__p[1]) = 0;
      ++v292;
    }
    while (v292 != v293);
    if (__p[0] != v1065)
      free(__p[0]);
  }
  v301 = v255[2];
  v302 = *(unsigned __int8 *)(v301 + 239);
  if (*(char *)(v301 + 239) < 0)
  {
    if (!*(_QWORD *)(v301 + 224))
      goto LABEL_453;
  }
  else if (!*(_BYTE *)(v301 + 239))
  {
    goto LABEL_453;
  }
  v305 = *(_BYTE **)(v301 + 216);
  v303 = v301 + 216;
  v304 = v305;
  if ((v302 & 0x80u) == 0)
    v306 = (_BYTE *)v303;
  else
    v306 = v304;
  v307 = *(_QWORD *)(v303 + 8);
  if ((v302 & 0x80u) == 0)
    v308 = v302;
  else
    v308 = v307;
  sub_1C5033124((llvm::raw_ostream *)*v255, 2u, v306, v308, 0);
  v301 = v255[2];
LABEL_453:
  v309 = *(unsigned __int8 *)(v301 + 503);
  if (*(char *)(v301 + 503) < 0)
  {
    if (!*(_QWORD *)(v301 + 488))
      goto LABEL_462;
  }
  else if (!*(_BYTE *)(v301 + 503))
  {
    goto LABEL_462;
  }
  v310 = (_BYTE *)(v301 + 480);
  v312 = *(_BYTE **)(v301 + 480);
  v311 = *(_QWORD *)(v301 + 488);
  if ((v309 & 0x80u) == 0)
    v313 = v310;
  else
    v313 = v312;
  if ((v309 & 0x80u) == 0)
    v314 = v309;
  else
    v314 = v311;
  sub_1C5033124((llvm::raw_ostream *)*v255, 3u, v313, v314, 0);
  v301 = v255[2];
LABEL_462:
  v315 = *(unsigned __int8 *)(v301 + 111);
  if (*(char *)(v301 + 111) < 0)
  {
    if (*(_QWORD *)(v301 + 96))
      goto LABEL_464;
  }
  else if (*(_BYTE *)(v301 + 111))
  {
LABEL_464:
    v318 = *(_BYTE **)(v301 + 88);
    v316 = v301 + 88;
    v317 = v318;
    if ((v315 & 0x80u) == 0)
      v319 = (_BYTE *)v316;
    else
      v319 = v317;
    v320 = *(_QWORD *)(v316 + 8);
    if ((v315 & 0x80u) == 0)
      v321 = v315;
    else
      v321 = v320;
    sub_1C5033124((llvm::raw_ostream *)*v255, 4u, v319, v321, 0);
    v301 = v255[2];
  }
  *(_QWORD *)v1060 = 0;
  v1059 = 0;
  v1058 = &v1059;
  v1063[0] = 0;
  v1062 = 0;
  v1061 = &v1062;
  v322 = v301 + 8;
  v323 = *(_QWORD *)(v301 + 16);
  if (v323 != v301 + 8)
  {
    LODWORD(v324) = 0;
    v325 = 0;
    v326 = 0;
    v327 = (uint64_t *)(v1024 + 48);
    while (1)
    {
      if (v323)
        v328 = (_BYTE *)(v323 - 56);
      else
        v328 = 0;
      v329 = *((_WORD *)v328 + 17);
      v330 = v325;
      if ((v329 & 0x3F) != 0)
        v325 = 1;
      v331 = (v329 & 0x3F) - 1;
      if ((v329 & 0x3F) == 0)
        v331 = 0;
      v332 = v326 < v331 || v330 == 0;
      if (!v332)
        v331 = v326;
      if ((v329 & 0x3F) != 0)
        v326 = v331;
      __p[0] = *((void **)v328 + 3);
      __dst = 0;
      if (sub_1C4DD8A9C(v327, __p, &__dst))
        v333 = __dst;
      else
        v333 = (__int128 *)(*(_QWORD *)(v1024 + 48) + 16 * *(unsigned int *)(v1024 + 64));
      v334 = *((_DWORD *)v333 + 2) - 1;
      if (v324 <= v334)
        v324 = v334;
      else
        v324 = v324;
      if ((v328[34] & 0x40) == 0)
        goto LABEL_522;
      v335 = ***(_QWORD ***)v328;
      __p[0] = v328;
      v336 = *(_DWORD *)(v335 + 2520);
      if (v336)
      {
        v337 = *(_QWORD *)(v335 + 2504);
        v338 = v336 - 1;
        v339 = v338 & ((v328 >> 4) ^ (v328 >> 9));
        v340 = (_QWORD *)(v337 + 24 * v339);
        v341 = (_BYTE *)*v340;
        if ((_BYTE *)*v340 == v328)
          goto LABEL_496;
        v356 = 0;
        v357 = 1;
        while (v341 != (_BYTE *)-4096)
        {
          if (v356)
            v358 = 0;
          else
            v358 = v341 == (_BYTE *)-8192;
          if (v358)
            v356 = v340;
          v359 = v339 + v357++;
          v339 = v359 & v338;
          v340 = (_QWORD *)(v337 + 24 * v339);
          v341 = (_BYTE *)*v340;
          if ((_BYTE *)*v340 == v328)
            goto LABEL_496;
        }
        if (v356)
          v367 = v356;
        else
          v367 = v340;
      }
      else
      {
        v367 = 0;
      }
      v340 = sub_1C53D65B8(v335 + 2504, (uint64_t)__p, (uint64_t *)__p, v367);
      v368 = __p[0];
      v340[1] = 0;
      v340[2] = 0;
      *v340 = v368;
LABEL_496:
      v342 = v340[2];
      if (v342 > 0x7FFFFFFFFFFFFFF7)
LABEL_1419:
        abort();
      v343 = (const void *)v340[1];
      if (v342 >= 0x17)
      {
        v345 = (v342 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v342 | 7) != 0x17)
          v345 = v342 | 7;
        v1019 = v325;
        v346 = v326;
        v347 = v327;
        v348 = v322;
        v349 = v324;
        v350 = v345 + 1;
        v344 = operator new(v345 + 1);
        v351 = v350 | 0x8000000000000000;
        v324 = v349;
        v322 = v348;
        v327 = v347;
        v326 = v346;
        v325 = v1019;
        v1065[0] = v351;
        __p[0] = v344;
        __p[1] = (void *)v342;
LABEL_503:
        memmove(v344, v343, v342);
        goto LABEL_504;
      }
      HIBYTE(v1065[0]) = v340[2];
      v344 = __p;
      if (v342)
        goto LABEL_503;
LABEL_504:
      *((_BYTE *)v344 + v342) = 0;
      __dst = (__int128 *)__p;
      v352 = sub_1C4768C98((uint64_t)&v1058, (const void **)__p, (uint64_t)&std::piecewise_construct, &__dst);
      if (SHIBYTE(v1065[0]) < 0)
        operator delete(__p[0]);
      if (*((_DWORD *)v352 + 14))
        goto LABEL_522;
      v353 = *(llvm::raw_ostream **)v1024;
      if ((v328[34] & 0x40) != 0)
      {
        v360 = ***(_QWORD ***)v328;
        __p[0] = v328;
        v361 = *(_DWORD *)(v360 + 2520);
        if (v361)
        {
          v362 = *(_QWORD *)(v360 + 2504);
          v363 = v361 - 1;
          v364 = v363 & ((v328 >> 4) ^ (v328 >> 9));
          v365 = (_QWORD *)(v362 + 24 * v364);
          v366 = (_BYTE *)*v365;
          if ((_BYTE *)*v365 == v328)
          {
LABEL_520:
            v354 = (_BYTE *)v365[1];
            v355 = v365[2];
            goto LABEL_521;
          }
          v369 = 0;
          v370 = 1;
          while (v366 != (_BYTE *)-4096)
          {
            if (v369)
              v371 = 0;
            else
              v371 = v366 == (_BYTE *)-8192;
            if (v371)
              v369 = v365;
            v372 = v364 + v370++;
            v364 = v372 & v363;
            v365 = (_QWORD *)(v362 + 24 * v364);
            v366 = (_BYTE *)*v365;
            if ((_BYTE *)*v365 == v328)
              goto LABEL_520;
          }
          if (v369)
            v373 = v369;
          else
            v373 = v365;
        }
        else
        {
          v373 = 0;
        }
        v365 = sub_1C53D65B8(v360 + 2504, (uint64_t)__p, (uint64_t *)__p, v373);
        v374 = __p[0];
        v365[1] = 0;
        v365[2] = 0;
        *v365 = v374;
        goto LABEL_520;
      }
      v354 = 0;
      v355 = 0;
LABEL_521:
      sub_1C5033124(v353, 5u, v354, v355, 0);
      *((_DWORD *)v352 + 14) = v1060[0];
LABEL_522:
      v323 = *(_QWORD *)(v323 + 8);
      if (v323 == v322)
      {
        v301 = *(_QWORD *)(v1024 + 16);
        goto LABEL_550;
      }
    }
  }
  v326 = 0;
  v325 = 0;
  v324 = 0;
LABEL_550:
  v375 = v301 + 24;
  v376 = *(_QWORD *)(v301 + 32);
  if (v376 == v301 + 24)
    goto LABEL_626;
  v377 = &std::piecewise_construct;
  do
  {
    if (v376)
      v378 = (llvm::LLVMContext ***)(v376 - 56);
    else
      v378 = 0;
    v379 = *((_DWORD *)v378 + 8);
    if ((v379 & 0x3F0000) != 0)
      v380 = 1;
    else
      v380 = v325;
    v1020 = v380;
    v381 = (HIWORD(v379) & 0x3F) - 1;
    if ((v379 & 0x3F0000) == 0)
      v381 = 0;
    if (v326 >= v381 && v325 != 0)
      v381 = v326;
    if ((v379 & 0x3F0000) != 0)
      v326 = v381;
    if ((v379 & 0x400000) == 0)
      goto LABEL_596;
    v383 = *(_QWORD *)**v378;
    __p[0] = v378;
    v384 = *(_DWORD *)(v383 + 2520);
    if (v384)
    {
      v385 = *(_QWORD *)(v383 + 2504);
      v386 = v384 - 1;
      v387 = v386 & ((v378 >> 4) ^ (v378 >> 9));
      v388 = (llvm::LLVMContext ****)(v385 + 24 * v387);
      v389 = *v388;
      if (*v388 == v378)
        goto LABEL_570;
      v403 = 0;
      v404 = 1;
      while (v389 != (llvm::LLVMContext ***)-4096)
      {
        if (v403)
          v405 = 0;
        else
          v405 = v389 == (llvm::LLVMContext ***)-8192;
        if (v405)
          v403 = v388;
        v406 = v387 + v404++;
        v387 = v406 & v386;
        v388 = (llvm::LLVMContext ****)(v385 + 24 * v387);
        v389 = *v388;
        if (*v388 == v378)
          goto LABEL_570;
      }
      if (v403)
        v423 = v403;
      else
        v423 = v388;
    }
    else
    {
      v423 = 0;
    }
    v388 = (llvm::LLVMContext ****)sub_1C53D65B8(v383 + 2504, (uint64_t)__p, (uint64_t *)__p, v423);
    v424 = (llvm::LLVMContext ***)__p[0];
    v388[1] = 0;
    v388[2] = 0;
    *v388 = v424;
LABEL_570:
    v390 = (size_t)v388[2];
    if (v390 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1419;
    v391 = (uint64_t)v377;
    v392 = v388[1];
    if (v390 >= 0x17)
    {
      v394 = (v390 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v390 | 7) != 0x17)
        v394 = v390 | 7;
      v395 = v375;
      v396 = v324;
      v397 = v394 + 1;
      v393 = operator new(v394 + 1);
      v398 = v397 | 0x8000000000000000;
      v324 = v396;
      v375 = v395;
      v1065[0] = v398;
      __p[0] = v393;
      __p[1] = (void *)v390;
LABEL_577:
      memmove(v393, v392, v390);
      goto LABEL_578;
    }
    HIBYTE(v1065[0]) = v388[2];
    v393 = __p;
    if (v390)
      goto LABEL_577;
LABEL_578:
    *((_BYTE *)v393 + v390) = 0;
    __dst = (__int128 *)__p;
    v377 = (void *)v391;
    v399 = sub_1C4768C98((uint64_t)&v1058, (const void **)__p, v391, &__dst);
    if (SHIBYTE(v1065[0]) < 0)
      operator delete(__p[0]);
    if (!*((_DWORD *)v399 + 14))
    {
      v400 = *(llvm::raw_ostream **)v1024;
      if ((*((_BYTE *)v378 + 34) & 0x40) == 0)
      {
        v401 = 0;
        v402 = 0;
LABEL_595:
        sub_1C5033124(v400, 5u, v401, v402, 0);
        *((_DWORD *)v399 + 14) = v1060[0];
        goto LABEL_596;
      }
      v407 = *(_QWORD *)**v378;
      __p[0] = v378;
      v408 = *(_DWORD *)(v407 + 2520);
      if (v408)
      {
        v409 = *(_QWORD *)(v407 + 2504);
        v410 = v408 - 1;
        v411 = v410 & ((v378 >> 4) ^ (v378 >> 9));
        v412 = (llvm::LLVMContext ****)(v409 + 24 * v411);
        v413 = *v412;
        if (*v412 == v378)
        {
LABEL_594:
          v401 = v412[1];
          v402 = (uint64_t)v412[2];
          goto LABEL_595;
        }
        v425 = 0;
        v426 = 1;
        while (v413 != (llvm::LLVMContext ***)-4096)
        {
          if (v425)
            v427 = 0;
          else
            v427 = v413 == (llvm::LLVMContext ***)-8192;
          if (v427)
            v425 = v412;
          v428 = v411 + v426++;
          v411 = v428 & v410;
          v412 = (llvm::LLVMContext ****)(v409 + 24 * v411);
          v413 = *v412;
          if (*v412 == v378)
            goto LABEL_594;
        }
        if (v425)
          v429 = v425;
        else
          v429 = v412;
      }
      else
      {
        v429 = 0;
      }
      v412 = (llvm::LLVMContext ****)sub_1C53D65B8(v407 + 2504, (uint64_t)__p, (uint64_t *)__p, v429);
      v430 = (llvm::LLVMContext ***)__p[0];
      v412[1] = 0;
      v412[2] = 0;
      *v412 = v430;
      goto LABEL_594;
    }
LABEL_596:
    if ((*((_WORD *)v378 + 9) & 0x4000) != 0)
    {
      __p[0] = llvm::LLVMContext::getGC(**v378, (const llvm::Function *)v378);
      v414 = sub_1C4D9ADC8((uint64_t)&v1061, (const void **)__p[0], (uint64_t)v377, (__int128 **)__p);
      if (!*((_DWORD *)v414 + 14))
      {
        v415 = v414;
        v416 = *(llvm::raw_ostream **)v1024;
        GC = llvm::LLVMContext::getGC(**v378, (const llvm::Function *)v378);
        v418 = *((_BYTE *)GC + 23);
        v419 = v418 < 0;
        if (v418 >= 0)
          v420 = GC;
        else
          v420 = (_BYTE *)*GC;
        v421 = v418 & 0x7F;
        if (v419)
          v422 = GC[1];
        else
          v422 = v421;
        sub_1C5033124(v416, 0xBu, v420, v422, 0);
        *((_DWORD *)v415 + 14) = v1063[0];
      }
    }
    v376 = *(_QWORD *)(v376 + 8);
    v325 = v1020;
  }
  while (v376 != v375);
  v301 = *(_QWORD *)(v1024 + 16);
LABEL_626:
  v431 = (llvm::ValueEnumerator *)v1016;
  if (*(_QWORD *)(v301 + 8) == v301 + 8)
  {
    v1013 = 0;
    v438 = v1024;
  }
  else
  {
    v432 = (char *)operator new(0x228uLL);
    *(_QWORD *)v432 = &unk_1E813F300;
    *((_QWORD *)v432 + 1) = 0;
    *(_OWORD *)(v432 + 184) = 0u;
    *(_OWORD *)(v432 + 200) = 0u;
    *(_OWORD *)(v432 + 216) = 0u;
    *(_OWORD *)(v432 + 232) = 0u;
    *(_OWORD *)(v432 + 248) = 0u;
    *(_OWORD *)(v432 + 264) = 0u;
    *(_OWORD *)(v432 + 280) = 0u;
    *(_OWORD *)(v432 + 296) = 0u;
    *(_OWORD *)(v432 + 312) = 0u;
    *(_OWORD *)(v432 + 328) = 0u;
    *(_OWORD *)(v432 + 344) = 0u;
    *(_OWORD *)(v432 + 360) = 0u;
    *(_OWORD *)(v432 + 376) = 0u;
    *(_OWORD *)(v432 + 392) = 0u;
    *(_OWORD *)(v432 + 408) = 0u;
    *(_OWORD *)(v432 + 424) = 0u;
    *(_OWORD *)(v432 + 440) = 0u;
    *(_OWORD *)(v432 + 456) = 0u;
    *(_OWORD *)(v432 + 472) = 0u;
    *(_OWORD *)(v432 + 488) = 0u;
    *(_OWORD *)(v432 + 504) = 0u;
    *(_OWORD *)(v432 + 520) = 0u;
    *(_OWORD *)(v432 + 536) = 0u;
    *(_OWORD *)(v432 + 40) = xmmword_1C85F9F20;
    *((_QWORD *)v432 + 2) = 0;
    *((_QWORD *)v432 + 3) = v432 + 40;
    *(_OWORD *)(v432 + 56) = xmmword_1C85F6860;
    *(_OWORD *)(v432 + 72) = xmmword_1C85F6860;
    *((_QWORD *)v432 + 11) = 32 - __clz(v324);
    *((_OWORD *)v432 + 6) = xmmword_1C85F9F30;
    *((_OWORD *)v432 + 7) = xmmword_1C85F9F40;
    *((_OWORD *)v432 + 8) = xmmword_1C85F9F50;
    *((_QWORD *)v432 + 18) = 2;
    v433 = vdup_n_s32(v325 == 0);
    v434.i64[0] = v433.u32[0];
    v434.i64[1] = v433.u32[1];
    v435 = (int8x16_t)vdupq_n_s64(2uLL);
    v436.i64[1] = v435.i64[1];
    v436.i64[0] = 32 - __clz(v326 + 1);
    *(int8x16_t *)(v432 + 152) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v434, 0x3FuLL)), (int8x16_t)xmmword_1C85F9EE0, v436);
    v437 = vdup_n_s32(*(_QWORD *)v1060 == 0);
    v434.i64[0] = v437.u32[0];
    v434.i64[1] = v437.u32[1];
    v435.i64[0] = 32 - __clz(v1060[0]);
    *(int8x16_t *)(v432 + 168) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v434, 0x3FuLL)), (int8x16_t)xmmword_1C85F9EE0, v435);
    *((_QWORD *)v432 + 4) = 0x2000000009;
    v438 = v1024;
    v439 = *(llvm::raw_ostream **)v1024;
    v1054 = (std::__shared_weak_count *)(v432 + 24);
    v1055 = (std::__shared_weak_count *)v432;
    v1013 = sub_1C50247B8((uint64_t)v439, (uint64_t)&v1054);
    v440 = v1055;
    if (v1055)
    {
      v441 = (unint64_t *)&v1055->__shared_owners_;
      do
        v442 = __ldaxr(v441);
      while (__stlxr(v442 - 1, v441));
      if (!v442)
      {
        ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
        std::__shared_weak_count::__release_weak(v440);
      }
    }
  }
  __p[0] = v1065;
  __p[1] = (void *)0x4000000000;
  v443 = *(_QWORD *)(v438 + 16);
  v446 = *(unsigned __int8 **)(v443 + 192);
  v445 = (unsigned __int8 *)(v443 + 192);
  v444 = v446;
  v447 = v445[23];
  v448 = v447;
  if (v447 >= 0)
    v444 = v445;
  v449 = *((_QWORD *)v445 + 1);
  v450 = v447 & 0x7F;
  if (v448 >= 0)
    v449 = v450;
  if (v449)
  {
    LOBYTE(v451) = 1;
    v452 = 2;
    v453 = 8;
    while (1)
    {
      v454 = *v444;
      v455 = (v454 - 48) >= 0xA && (v454 & 0xFFFFFFDF) - 65 >= 0x1A;
      v456 = !v455 || v454 == 46;
      v457 = v456 || v454 == 95;
      v458 = v457;
      v451 = v451 && v458;
      if ((v454 & 0x80) != 0)
        break;
      ++v444;
      if (!--v449)
      {
        if (v451)
          goto LABEL_657;
        v452 = 2;
        v453 = 7;
        break;
      }
    }
  }
  else
  {
LABEL_657:
    v453 = 0;
    v452 = 8;
  }
  v459 = (char *)operator new(0x228uLL);
  *(_QWORD *)v459 = &unk_1E813F300;
  *((_QWORD *)v459 + 1) = 0;
  *(_OWORD *)(v459 + 88) = 0u;
  *(_OWORD *)(v459 + 104) = 0u;
  *(_OWORD *)(v459 + 120) = 0u;
  *(_OWORD *)(v459 + 136) = 0u;
  *(_OWORD *)(v459 + 152) = 0u;
  *(_OWORD *)(v459 + 168) = 0u;
  *(_OWORD *)(v459 + 184) = 0u;
  *(_OWORD *)(v459 + 200) = 0u;
  *(_OWORD *)(v459 + 216) = 0u;
  *(_OWORD *)(v459 + 232) = 0u;
  *(_OWORD *)(v459 + 248) = 0u;
  *(_OWORD *)(v459 + 264) = 0u;
  *(_OWORD *)(v459 + 280) = 0u;
  *(_OWORD *)(v459 + 296) = 0u;
  *(_OWORD *)(v459 + 312) = 0u;
  *(_OWORD *)(v459 + 328) = 0u;
  *(_OWORD *)(v459 + 344) = 0u;
  *(_OWORD *)(v459 + 360) = 0u;
  *(_OWORD *)(v459 + 376) = 0u;
  *(_OWORD *)(v459 + 392) = 0u;
  *(_OWORD *)(v459 + 408) = 0u;
  *(_OWORD *)(v459 + 424) = 0u;
  *(_OWORD *)(v459 + 440) = 0u;
  *(_OWORD *)(v459 + 456) = 0u;
  *(_OWORD *)(v459 + 472) = 0u;
  *(_OWORD *)(v459 + 488) = 0u;
  *(_OWORD *)(v459 + 504) = 0u;
  *(_OWORD *)(v459 + 520) = 0u;
  *(_OWORD *)(v459 + 536) = 0u;
  *(_OWORD *)(v459 + 40) = xmmword_1C85F9F60;
  *((_QWORD *)v459 + 2) = 0;
  *((_QWORD *)v459 + 3) = v459 + 40;
  *(_OWORD *)(v459 + 56) = xmmword_1C85F9DD0;
  v460 = *(llvm::raw_ostream **)v438;
  *((_QWORD *)v459 + 9) = v453;
  *((_QWORD *)v459 + 10) = v452;
  *((_QWORD *)v459 + 4) = 0x2000000003;
  v1052 = (std::__shared_weak_count *)(v459 + 24);
  v1053 = (std::__shared_weak_count *)v459;
  v461 = sub_1C50247B8((uint64_t)v460, (uint64_t)&v1052);
  v462 = v1053;
  if (v1053)
  {
    v463 = (unint64_t *)&v1053->__shared_owners_;
    do
      v464 = __ldaxr(v463);
    while (__stlxr(v464 - 1, v463));
    if (!v464)
    {
      ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
      std::__shared_weak_count::__release_weak(v462);
    }
  }
  v465 = *(_QWORD *)(v438 + 16);
  if (*(char *)(v465 + 215) < 0)
  {
    v466 = *(unsigned __int8 **)(v465 + 192);
    v467 = *(_QWORD *)(v465 + 200);
    if (!v467)
      goto LABEL_672;
  }
  else
  {
    v466 = (unsigned __int8 *)(v465 + 192);
    v467 = *(unsigned __int8 *)(v465 + 215);
    if (!*(_BYTE *)(v465 + 215))
      goto LABEL_672;
  }
  v468 = __p[1];
  do
  {
    v469 = *v466;
    if (v468 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v468 + 1, 4);
      v468 = __p[1];
    }
    *((_DWORD *)__p[0] + v468) = v469;
    v468 = ++LODWORD(__p[1]);
    ++v466;
    --v467;
  }
  while (v467);
LABEL_672:
  sub_1C5033274(*(llvm::raw_ostream **)v438, 0x10u, (uint64_t)__p, v461);
  LODWORD(__p[1]) = 0;
  v470 = *(_QWORD **)(v438 + 16);
  v471 = v470 + 1;
  v472 = (_QWORD *)v470[2];
  if (v472 == v470 + 1)
    goto LABEL_806;
  v473 = (uint64_t *)(v438 + 48);
  v1021 = (uint64_t *)(v438 + 344);
  v474 = (_QWORD *)(v438 + 152);
  while (2)
  {
    if (v472)
      v475 = (uint64_t ***)(v472 - 7);
    else
      v475 = 0;
    v476 = v475 >> 4;
    if ((*((_BYTE *)v475 + 23) & 0x10) != 0)
    {
      v477 = ***v475;
      v478 = *(_QWORD *)(v477 + 152);
      v479 = *(unsigned int *)(v477 + 168);
      if (!(_DWORD)v479)
        goto LABEL_684;
      LODWORD(v480) = (v479 - 1) & (v476 ^ (v475 >> 9));
      v481 = (uint64_t ****)(v478 + 16 * v480);
      v482 = *v481;
      if (*v481 != v475)
      {
        v483 = 1;
        while (v482 != (uint64_t ***)-4096)
        {
          v484 = v480 + v483++;
          v480 = v484 & (v479 - 1);
          v482 = *(uint64_t ****)(v478 + 16 * v480);
          if (v482 == v475)
          {
            v481 = (uint64_t ****)(v478 + 16 * v480);
            goto LABEL_685;
          }
        }
LABEL_684:
        v481 = (uint64_t ****)(v478 + 16 * v479);
      }
LABEL_685:
      v485 = v481[1];
      v488 = (unint64_t)*v485;
      v486 = (char *)(v485 + 2);
      v487 = v488;
    }
    else
    {
      v487 = 0;
      v486 = &byte_1C871356D;
    }
    v489 = sub_1C5034B2C(v438, v486, v487);
    v490 = LODWORD(__p[1]);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
      v490 = LODWORD(__p[1]);
    }
    *((_DWORD *)__p[0] + v490) = v489;
    v491 = ++LODWORD(__p[1]);
    if ((*((_BYTE *)v475 + 23) & 0x10) != 0)
    {
      v492 = ***v475;
      v493 = *(_QWORD *)(v492 + 152);
      v494 = *(unsigned int *)(v492 + 168);
      if (!(_DWORD)v494)
        goto LABEL_695;
      LODWORD(v495) = (v494 - 1) & (v476 ^ (v475 >> 9));
      v496 = v493 + 16 * v495;
      v497 = *(uint64_t ****)v496;
      if (*(uint64_t ****)v496 != v475)
      {
        v498 = 1;
        while (v497 != (uint64_t ***)-4096)
        {
          v499 = v495 + v498++;
          v495 = v499 & (v494 - 1);
          v497 = *(uint64_t ****)(v493 + 16 * v495);
          if (v497 == v475)
          {
            v496 = v493 + 16 * v495;
            goto LABEL_696;
          }
        }
LABEL_695:
        v496 = v493 + 16 * v494;
      }
LABEL_696:
      v500 = **(_QWORD **)(v496 + 8);
    }
    else
    {
      LODWORD(v500) = 0;
    }
    if (v491 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v491 + 1, 4);
      LODWORD(v491) = __p[1];
    }
    *((_DWORD *)__p[0] + v491) = v500;
    ++LODWORD(__p[1]);
    __dst = (__int128 *)v475[3];
    *(_QWORD *)&v1056 = 0;
    if (sub_1C4DD8A9C(v473, &__dst, &v1056))
      v501 = v1056;
    else
      v501 = *(_QWORD *)(v438 + 48) + 16 * *(unsigned int *)(v438 + 64);
    v502 = *(_DWORD *)(v501 + 8);
    v503 = LODWORD(__p[1]);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
      v503 = LODWORD(__p[1]);
    }
    *((_DWORD *)__p[0] + v503) = v502 - 1;
    v504 = (LODWORD(__p[1]) + 1);
    LODWORD(__p[1]) = v504;
    v505 = *((_DWORD *)*v475 + 2);
    v506 = *((_BYTE *)v475 + 80);
    if (v504 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v504 + 1, 4);
      LODWORD(v504) = __p[1];
    }
    *((_DWORD *)__p[0] + v504) = v506 & 1 | (4 * (v505 >> 8)) | 2;
    v507 = ++LODWORD(__p[1]);
    if (v472 && *((_BYTE *)v475 + 16) == 3)
    {
      if ((*((_DWORD *)v475 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_709;
LABEL_713:
      v508 = llvm::ValueEnumerator::getValueID((uint64_t)v431, (uint64_t)*(v475 - 4)) + 1;
      v507 = __p[1];
    }
    else
    {
      if (*((_BYTE *)v475 + 16) || v475[9] != (uint64_t **)(v475 + 9) || (*((_BYTE *)v475 + 34) & 0x80) != 0)
        goto LABEL_713;
LABEL_709:
      v508 = 0;
    }
    if (v507 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v507 + 1, 4);
      v507 = __p[1];
    }
    *((_DWORD *)__p[0] + v507) = v508;
    v509 = (LODWORD(__p[1]) + 1);
    LODWORD(__p[1]) = v509;
    v510 = dword_1C85FA178[(_DWORD)v475[4] & 0xF];
    if (v509 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v509 + 1, 4);
      LODWORD(v509) = __p[1];
    }
    *((_DWORD *)__p[0] + v509) = v510;
    v511 = *((_WORD *)v475 + 17);
    v512 = (v511 & 0x3F) - 1;
    v332 = (v511 & 0x3F) == 0;
    v513 = ++LODWORD(__p[1]);
    if (v332)
      v514 = 0;
    else
      v514 = v512 + 1;
    if (v513 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v513 + 1, 4);
      LODWORD(v513) = __p[1];
    }
    *((_DWORD *)__p[0] + v513) = v514;
    v515 = ++LODWORD(__p[1]);
    if ((*((_BYTE *)v475 + 34) & 0x40) == 0)
    {
      if (v515 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v515 + 1, 4);
        LODWORD(v515) = __p[1];
      }
      *((_DWORD *)__p[0] + v515) = 0;
      ++LODWORD(__p[1]);
      goto LABEL_741;
    }
    v516 = ***v475;
    __dst = (__int128 *)v475;
    v517 = *(_DWORD *)(v516 + 2520);
    if (v517)
    {
      v518 = *(_QWORD *)(v516 + 2504);
      v519 = v517 - 1;
      v520 = v519 & (v476 ^ (v475 >> 9));
      v521 = (uint64_t ****)(v518 + 24 * v520);
      v522 = *v521;
      if (*v521 == v475)
        goto LABEL_729;
      v563 = 0;
      v564 = 1;
      while (v522 != (uint64_t ***)-4096)
      {
        if (v563)
          v565 = 0;
        else
          v565 = v522 == (uint64_t ***)-8192;
        if (v565)
          v563 = v521;
        v566 = v520 + v564++;
        v520 = v566 & v519;
        v521 = (uint64_t ****)(v518 + 24 * v520);
        v522 = *v521;
        if (*v521 == v475)
          goto LABEL_729;
      }
      if (v563)
        v567 = v563;
      else
        v567 = v521;
    }
    else
    {
      v567 = 0;
    }
    v521 = (uint64_t ****)sub_1C53D65B8(v516 + 2504, (uint64_t)&__dst, (uint64_t *)&__dst, v567);
    v568 = __dst;
    v521[1] = 0;
    v521[2] = 0;
    *v521 = (uint64_t ***)v568;
LABEL_729:
    v523 = (size_t)v521[2];
    if (v523 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1419;
    v524 = v521[1];
    if (v523 >= 0x17)
    {
      v526 = (v523 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v523 | 7) != 0x17)
        v526 = v523 | 7;
      v527 = v473;
      v528 = v526 + 1;
      p_dst = (__int128 *)operator new(v526 + 1);
      v529 = v528 | 0x8000000000000000;
      v473 = v527;
      v1048 = (__int128 *)v523;
      v1049 = v529;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v1049) = v521[2];
      p_dst = (__int128 *)&__dst;
      if (!v523)
        goto LABEL_737;
    }
    memmove(p_dst, v524, v523);
LABEL_737:
    v438 = v1024;
    *((_BYTE *)p_dst + v523) = 0;
    *(_QWORD *)&v1056 = &__dst;
    v530 = *((_DWORD *)sub_1C4768C98((uint64_t)&v1058, (const void **)&__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1056)+ 14);
    v531 = LODWORD(__p[1]);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
      v531 = LODWORD(__p[1]);
    }
    v431 = (llvm::ValueEnumerator *)v1016;
    *((_DWORD *)__p[0] + v531) = v530;
    ++LODWORD(__p[1]);
    if (SHIBYTE(v1049) < 0)
      operator delete(__dst);
LABEL_741:
    v532 = *((_DWORD *)v475 + 8);
    if ((v532 & 0x1CF0) != 0
      || (_DWORD)v475[4] & 0x300 | (_BYTE)v475[10] & 2
      || v475[6]
      || (v532 & 0xC000) != 0
      || (v562 = v1013, v475[9]))
    {
      v533 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v533 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v533) = (v532 >> 4) & 3;
      v534 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v534;
      v535 = *((_DWORD *)v475 + 8);
      if (v534 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v534 + 1, 4);
        LODWORD(v534) = __p[1];
      }
      *((_DWORD *)__p[0] + v534) = (v535 >> 10) & 7;
      v536 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v536;
      v537 = dword_1C85FA16C[*((_DWORD *)v475 + 8) >> 6];
      if (v536 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v536 + 1, 4);
        LODWORD(v536) = __p[1];
      }
      *((_DWORD *)__p[0] + v536) = v537;
      v538 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v538;
      v539 = *((unsigned __int8 *)v475 + 80);
      if (v538 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v538 + 1, 4);
        LODWORD(v538) = __p[1];
      }
      *((_DWORD *)__p[0] + v538) = (v539 >> 1) & 1;
      v540 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v540;
      v541 = *((_DWORD *)v475 + 8);
      if (v540 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v540 + 1, 4);
        LODWORD(v540) = __p[1];
      }
      *((_DWORD *)__p[0] + v540) = (v541 >> 8) & 3;
      v542 = ++LODWORD(__p[1]);
      v543 = v475[6];
      if (!v543)
        goto LABEL_766;
      v544 = (_QWORD *)*v474;
      if (!*v474)
        goto LABEL_766;
      v545 = v474;
      do
      {
        v546 = v544[4];
        v547 = v546 >= (unint64_t)v543;
        if (v546 >= (unint64_t)v543)
          v548 = v544;
        else
          v548 = v544 + 1;
        if (v547)
          v545 = v544;
        v544 = (_QWORD *)*v548;
      }
      while (*v548);
      if (v545 != v474 && v545[4] <= (unint64_t)v543)
        v549 = *((_DWORD *)v545 + 10);
      else
LABEL_766:
        v549 = 0;
      if (v542 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v542 + 1, 4);
        LODWORD(v542) = __p[1];
      }
      *((_DWORD *)__p[0] + v542) = v549;
      ++LODWORD(__p[1]);
      *(_QWORD *)&v1056 = sub_1C5034B90((uint64_t)v475, -1);
      if ((_QWORD)v1056)
      {
        __dst = 0;
        if (sub_1C5034C00(v1021, &v1056, &__dst))
          v550 = __dst;
        else
          v550 = (__int128 *)(*(_QWORD *)(v438 + 344) + 16 * *(unsigned int *)(v438 + 360));
        v551 = *((_DWORD *)v550 + 2);
      }
      else
      {
        v551 = 0;
      }
      v552 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v552 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v552) = v551;
      v553 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v553;
      v554 = *((_DWORD *)v475 + 8);
      if (v553 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v553 + 1, 4);
        LODWORD(v553) = __p[1];
      }
      *((_DWORD *)__p[0] + v553) = (v554 >> 14) & 1;
      ++LODWORD(__p[1]);
      Partition = llvm::GlobalValue::getPartition((llvm::GlobalValue *)v475);
      v557 = sub_1C5034B2C(v438, Partition, v556);
      v558 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v558 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v558) = v557;
      ++LODWORD(__p[1]);
      llvm::GlobalValue::getPartition((llvm::GlobalValue *)v475);
      v560 = v559;
      v561 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v561 = LODWORD(__p[1]);
      }
      v562 = 0;
      *((_DWORD *)__p[0] + v561) = v560;
      ++LODWORD(__p[1]);
    }
    sub_1C5033274(*(llvm::raw_ostream **)v438, 7u, (uint64_t)__p, v562);
    LODWORD(__p[1]) = 0;
    v472 = (_QWORD *)v472[1];
    if (v472 != v471)
      continue;
    break;
  }
  v470 = *(_QWORD **)(v438 + 16);
LABEL_806:
  v569 = v470 + 3;
  v570 = (_QWORD *)v470[4];
  if (v570 != v470 + 3)
  {
    v1022 = (uint64_t *)(v438 + 48);
    v1014 = (uint64_t *)(v438 + 344);
    v571 = (_QWORD *)(v438 + 152);
    while (1)
    {
      v572 = v570 ? (llvm::LLVMContext ***)(v570 - 7) : 0;
      v573 = v572 >> 4;
      if ((*((_BYTE *)v572 + 23) & 0x10) != 0)
        break;
      v584 = 0;
      v583 = &byte_1C871356D;
LABEL_820:
      v586 = sub_1C5034B2C(v438, v583, v584);
      v587 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v587 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v587) = v586;
      v588 = ++LODWORD(__p[1]);
      if ((*((_BYTE *)v572 + 23) & 0x10) != 0)
      {
        v589 = *(_QWORD *)**v572;
        v590 = *(_QWORD *)(v589 + 152);
        v591 = *(unsigned int *)(v589 + 168);
        if (!(_DWORD)v591)
          goto LABEL_829;
        LODWORD(v592) = (v591 - 1) & (v573 ^ (v572 >> 9));
        v593 = v590 + 16 * v592;
        v594 = *(llvm::LLVMContext ****)v593;
        if (*(llvm::LLVMContext ****)v593 != v572)
        {
          v595 = 1;
          while (v594 != (llvm::LLVMContext ***)-4096)
          {
            v596 = v592 + v595++;
            v592 = v596 & (v591 - 1);
            v594 = *(llvm::LLVMContext ****)(v590 + 16 * v592);
            if (v594 == v572)
            {
              v593 = v590 + 16 * v592;
              goto LABEL_830;
            }
          }
LABEL_829:
          v593 = v590 + 16 * v591;
        }
LABEL_830:
        v597 = **(_QWORD **)(v593 + 8);
        goto LABEL_831;
      }
      LODWORD(v597) = 0;
LABEL_831:
      if (v588 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v588 + 1, 4);
        LODWORD(v588) = __p[1];
      }
      *((_DWORD *)__p[0] + v588) = v597;
      ++LODWORD(__p[1]);
      __dst = (__int128 *)v572[3];
      *(_QWORD *)&v1056 = 0;
      if (sub_1C4DD8A9C(v1022, &__dst, &v1056))
        v598 = v1056;
      else
        v598 = *(_QWORD *)(v438 + 48) + 16 * *(unsigned int *)(v438 + 64);
      v599 = *(_DWORD *)(v598 + 8);
      v600 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v600 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v600) = v599 - 1;
      v601 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v601;
      v602 = *((unsigned __int16 *)v572 + 9);
      if (v601 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v601 + 1, 4);
        LODWORD(v601) = __p[1];
      }
      *((_DWORD *)__p[0] + v601) = (v602 >> 4) & 0x3FF;
      v603 = ++LODWORD(__p[1]);
      if (v570 && *((_BYTE *)v572 + 16) == 3)
      {
        v604 = (*((_DWORD *)v572 + 5) & 0x7FFFFFF) == 0;
      }
      else
      {
        if (*((_BYTE *)v572 + 16) || v572[9] != (llvm::LLVMContext **)(v572 + 9))
        {
          v605 = 0;
          goto LABEL_849;
        }
        v604 = (*((_BYTE *)v572 + 34) & 0x80) == 0;
      }
      v605 = v604;
LABEL_849:
      if (v603 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v603 + 1, 4);
        LODWORD(v603) = __p[1];
      }
      *((_DWORD *)__p[0] + v603) = v605;
      v606 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v606;
      v607 = dword_1C85FA178[(_DWORD)v572[4] & 0xF];
      if (v606 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v606 + 1, 4);
        LODWORD(v606) = __p[1];
      }
      *((_DWORD *)__p[0] + v606) = v607;
      v608 = ++LODWORD(__p[1]);
      *(_QWORD *)&v1056 = v572[14];
      if ((_QWORD)v1056)
      {
        __dst = 0;
        if (sub_1C5034C00(v1014, &v1056, &__dst))
          v609 = __dst;
        else
          v609 = (__int128 *)(*(_QWORD *)(v438 + 344) + 16 * *(unsigned int *)(v438 + 360));
        v610 = *((_DWORD *)v609 + 2);
        v608 = __p[1];
      }
      else
      {
        v610 = 0;
      }
      if (v608 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v608 + 1, 4);
        v608 = __p[1];
      }
      *((_DWORD *)__p[0] + v608) = v610;
      v611 = *((_WORD *)v572 + 17);
      v612 = (v611 & 0x3F) - 1;
      v332 = (v611 & 0x3F) == 0;
      v613 = ++LODWORD(__p[1]);
      if (v332)
        v614 = 0;
      else
        v614 = v612 + 1;
      if (v613 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v613 + 1, 4);
        LODWORD(v613) = __p[1];
      }
      *((_DWORD *)__p[0] + v613) = v614;
      v615 = ++LODWORD(__p[1]);
      if ((*((_BYTE *)v572 + 34) & 0x40) != 0)
      {
        v617 = *(_QWORD *)**v572;
        __dst = (__int128 *)v572;
        v618 = *(_DWORD *)(v617 + 2520);
        if (v618)
        {
          v619 = *(_QWORD *)(v617 + 2504);
          v620 = v618 - 1;
          v621 = v620 & (v573 ^ (v572 >> 9));
          v622 = (llvm::LLVMContext ****)(v619 + 24 * v621);
          v623 = *v622;
          if (*v622 == v572)
            goto LABEL_872;
          v670 = 0;
          v671 = 1;
          while (v623 != (llvm::LLVMContext ***)-4096)
          {
            if (v670)
              v672 = 0;
            else
              v672 = v623 == (llvm::LLVMContext ***)-8192;
            if (v672)
              v670 = v622;
            v673 = v621 + v671++;
            v621 = v673 & v620;
            v622 = (llvm::LLVMContext ****)(v619 + 24 * v621);
            v623 = *v622;
            if (*v622 == v572)
              goto LABEL_872;
          }
          if (v670)
            v674 = v670;
          else
            v674 = v622;
        }
        else
        {
          v674 = 0;
        }
        v622 = (llvm::LLVMContext ****)sub_1C53D65B8(v617 + 2504, (uint64_t)&__dst, (uint64_t *)&__dst, v674);
        v675 = __dst;
        v622[1] = 0;
        v622[2] = 0;
        *v622 = (llvm::LLVMContext ***)v675;
LABEL_872:
        v624 = (size_t)v622[2];
        if (v624 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1419;
        v625 = v622[1];
        if (v624 >= 0x17)
        {
          v627 = (v624 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v624 | 7) != 0x17)
            v627 = v624 | 7;
          v628 = v627 + 1;
          v626 = (__int128 *)operator new(v627 + 1);
          v629 = v628 | 0x8000000000000000;
          v438 = v1024;
          v1048 = (__int128 *)v624;
          v1049 = v629;
          __dst = v626;
        }
        else
        {
          HIBYTE(v1049) = v622[2];
          v626 = (__int128 *)&__dst;
          if (!v624)
            goto LABEL_880;
        }
        memmove(v626, v625, v624);
LABEL_880:
        v431 = (llvm::ValueEnumerator *)v1016;
        *((_BYTE *)v626 + v624) = 0;
        *(_QWORD *)&v1056 = &__dst;
        v630 = *((_DWORD *)sub_1C4768C98((uint64_t)&v1058, (const void **)&__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v1056)+ 14);
        v631 = LODWORD(__p[1]);
        if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
          v631 = LODWORD(__p[1]);
        }
        *((_DWORD *)__p[0] + v631) = v630;
        v616 = ++LODWORD(__p[1]);
        if (SHIBYTE(v1049) < 0)
        {
          operator delete(__dst);
          v616 = __p[1];
        }
        goto LABEL_884;
      }
      if (v615 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v615 + 1, 4);
        LODWORD(v615) = __p[1];
      }
      *((_DWORD *)__p[0] + v615) = 0;
      v616 = ++LODWORD(__p[1]);
LABEL_884:
      v632 = *((_DWORD *)v572 + 8);
      if (v616 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v616 + 1, 4);
        v616 = __p[1];
      }
      *((_DWORD *)__p[0] + v616) = (v632 >> 4) & 3;
      v633 = ++LODWORD(__p[1]);
      if ((*((_WORD *)v572 + 9) & 0x4000) != 0)
      {
        __dst = (__int128 *)llvm::LLVMContext::getGC(**v572, (const llvm::Function *)v572);
        v634 = *((_DWORD *)sub_1C4D9ADC8((uint64_t)&v1061, (const void **)__dst, (uint64_t)&std::piecewise_construct, &__dst)+ 14);
        v633 = __p[1];
      }
      else
      {
        v634 = 0;
      }
      if (v633 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v633 + 1, 4);
        v633 = __p[1];
      }
      *((_DWORD *)__p[0] + v633) = v634;
      v635 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v635;
      v636 = dword_1C85FA16C[*((_DWORD *)v572 + 8) >> 6];
      if (v635 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v635 + 1, 4);
        LODWORD(v635) = __p[1];
      }
      *((_DWORD *)__p[0] + v635) = v636;
      v637 = ++LODWORD(__p[1]);
      if ((*((_WORD *)v572 + 9) & 4) != 0)
      {
        v639 = *((_DWORD *)v572 + 5);
        if ((v639 & 0x40000000) != 0)
          v640 = (llvm::LLVMContext ***)*(v572 - 1);
        else
          v640 = &v572[-4 * (v639 & 0x7FFFFFF)];
        v638 = llvm::ValueEnumerator::getValueID((uint64_t)v431, (uint64_t)v640[8]) + 1;
        v637 = __p[1];
      }
      else
      {
        v638 = 0;
      }
      if (v637 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v637 + 1, 4);
        v637 = __p[1];
      }
      *((_DWORD *)__p[0] + v637) = v638;
      v641 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v641;
      v642 = *((_DWORD *)v572 + 8);
      if (v641 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v641 + 1, 4);
        LODWORD(v641) = __p[1];
      }
      *((_DWORD *)__p[0] + v641) = (v642 >> 8) & 3;
      v643 = ++LODWORD(__p[1]);
      v644 = v572[6];
      if (!v644)
        goto LABEL_915;
      v645 = (_QWORD *)*v571;
      if (!*v571)
        goto LABEL_915;
      v646 = v571;
      do
      {
        v647 = v645[4];
        v648 = v647 >= (unint64_t)v644;
        if (v647 >= (unint64_t)v644)
          v649 = v645;
        else
          v649 = v645 + 1;
        if (v648)
          v646 = v645;
        v645 = (_QWORD *)*v649;
      }
      while (*v649);
      if (v646 != v571 && v646[4] <= (unint64_t)v644)
        v650 = *((_DWORD *)v646 + 10);
      else
LABEL_915:
        v650 = 0;
      if (v643 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v643 + 1, 4);
        LODWORD(v643) = __p[1];
      }
      *((_DWORD *)__p[0] + v643) = v650;
      v651 = ++LODWORD(__p[1]);
      if ((*((_WORD *)v572 + 9) & 2) != 0)
      {
        v653 = *((_DWORD *)v572 + 5);
        if ((v653 & 0x40000000) != 0)
          v654 = (llvm::LLVMContext ***)*(v572 - 1);
        else
          v654 = &v572[-4 * (v653 & 0x7FFFFFF)];
        v652 = llvm::ValueEnumerator::getValueID((uint64_t)v431, (uint64_t)v654[4]) + 1;
        v651 = __p[1];
      }
      else
      {
        v652 = 0;
      }
      if (v651 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v651 + 1, 4);
        v651 = __p[1];
      }
      *((_DWORD *)__p[0] + v651) = v652;
      v655 = ++LODWORD(__p[1]);
      if ((*((_WORD *)v572 + 9) & 8) != 0)
      {
        v657 = *((_DWORD *)v572 + 5);
        if ((v657 & 0x40000000) != 0)
          v658 = (uint64_t *)*(v572 - 1);
        else
          v658 = (uint64_t *)&v572[-4 * (v657 & 0x7FFFFFF)];
        v656 = llvm::ValueEnumerator::getValueID((uint64_t)v431, *v658) + 1;
        v655 = __p[1];
      }
      else
      {
        v656 = 0;
      }
      if (v655 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v655 + 1, 4);
        v655 = __p[1];
      }
      *((_DWORD *)__p[0] + v655) = v656;
      v659 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v659;
      v660 = *((_DWORD *)v572 + 8);
      if (v659 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v659 + 1, 4);
        LODWORD(v659) = __p[1];
      }
      *((_DWORD *)__p[0] + v659) = (v660 >> 14) & 1;
      v661 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v661;
      v662 = *((_DWORD *)*v572 + 2);
      if (v661 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v661 + 1, 4);
        LODWORD(v661) = __p[1];
      }
      *((_DWORD *)__p[0] + v661) = v662 >> 8;
      ++LODWORD(__p[1]);
      v663 = llvm::GlobalValue::getPartition((llvm::GlobalValue *)v572);
      v665 = sub_1C5034B2C(v438, v663, v664);
      v666 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v666 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v666) = v665;
      ++LODWORD(__p[1]);
      llvm::GlobalValue::getPartition((llvm::GlobalValue *)v572);
      v668 = v667;
      v669 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v669 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v669) = v668;
      ++LODWORD(__p[1]);
      sub_1C5033274(*(llvm::raw_ostream **)v438, 8u, (uint64_t)__p, 0);
      LODWORD(__p[1]) = 0;
      v570 = (_QWORD *)v570[1];
      if (v570 == v569)
      {
        v470 = *(_QWORD **)(v438 + 16);
        goto LABEL_962;
      }
    }
    v574 = *(_QWORD *)**v572;
    v575 = *(_QWORD *)(v574 + 152);
    v576 = *(unsigned int *)(v574 + 168);
    if ((_DWORD)v576)
    {
      LODWORD(v577) = (v576 - 1) & (v573 ^ (v572 >> 9));
      v578 = (llvm::LLVMContext ****)(v575 + 16 * v577);
      v579 = *v578;
      if (*v578 != v572)
      {
        v580 = 1;
        while (v579 != (llvm::LLVMContext ***)-4096)
        {
          v581 = v577 + v580++;
          v577 = v581 & (v576 - 1);
          v579 = *(llvm::LLVMContext ****)(v575 + 16 * v577);
          if (v579 == v572)
          {
            v578 = (llvm::LLVMContext ****)(v575 + 16 * v577);
            goto LABEL_819;
          }
        }
        goto LABEL_818;
      }
    }
    else
    {
LABEL_818:
      v578 = (llvm::LLVMContext ****)(v575 + 16 * v576);
    }
LABEL_819:
    v582 = v578[1];
    v585 = (unint64_t)*v582;
    v583 = (char *)(v582 + 2);
    v584 = v585;
    goto LABEL_820;
  }
LABEL_962:
  v676 = v470 + 5;
  v677 = (_QWORD *)v470[6];
  if (v677 == v470 + 5)
    goto LABEL_1017;
  while (2)
  {
    if (v677)
      v678 = (llvm::GlobalValue *)(v677 - 6);
    else
      v678 = 0;
    v679 = v678 >> 4;
    if ((*((_BYTE *)v678 + 23) & 0x10) != 0)
    {
      v680 = ***(_QWORD ***)v678;
      v681 = *(_QWORD *)(v680 + 152);
      v682 = *(unsigned int *)(v680 + 168);
      if (!(_DWORD)v682)
        goto LABEL_973;
      LODWORD(v683) = (v682 - 1) & (v679 ^ (v678 >> 9));
      v684 = (llvm::GlobalValue **)(v681 + 16 * v683);
      v685 = *v684;
      if (*v684 != v678)
      {
        v686 = 1;
        while (v685 != (llvm::GlobalValue *)-4096)
        {
          v687 = v683 + v686++;
          v683 = v687 & (v682 - 1);
          v685 = *(llvm::GlobalValue **)(v681 + 16 * v683);
          if (v685 == v678)
          {
            v684 = (llvm::GlobalValue **)(v681 + 16 * v683);
            goto LABEL_974;
          }
        }
LABEL_973:
        v684 = (llvm::GlobalValue **)(v681 + 16 * v682);
      }
LABEL_974:
      v688 = v684[1];
      v691 = *(_QWORD *)v688;
      v689 = (char *)v688 + 16;
      v690 = v691;
    }
    else
    {
      v690 = 0;
      v689 = &byte_1C871356D;
    }
    v692 = sub_1C5034B2C(v438, v689, v690);
    v693 = LODWORD(__p[1]);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
      v693 = LODWORD(__p[1]);
    }
    *((_DWORD *)__p[0] + v693) = v692;
    v694 = ++LODWORD(__p[1]);
    if ((*((_BYTE *)v678 + 23) & 0x10) != 0)
    {
      v695 = ***(_QWORD ***)v678;
      v696 = *(_QWORD *)(v695 + 152);
      v697 = *(unsigned int *)(v695 + 168);
      if (!(_DWORD)v697)
        goto LABEL_984;
      LODWORD(v698) = (v697 - 1) & (v679 ^ (v678 >> 9));
      v699 = v696 + 16 * v698;
      v700 = *(llvm::GlobalValue **)v699;
      if (*(llvm::GlobalValue **)v699 != v678)
      {
        v701 = 1;
        while (v700 != (llvm::GlobalValue *)-4096)
        {
          v702 = v698 + v701++;
          v698 = v702 & (v697 - 1);
          v700 = *(llvm::GlobalValue **)(v696 + 16 * v698);
          if (v700 == v678)
          {
            v699 = v696 + 16 * v698;
            goto LABEL_985;
          }
        }
LABEL_984:
        v699 = v696 + 16 * v697;
      }
LABEL_985:
      v703 = **(_QWORD **)(v699 + 8);
    }
    else
    {
      LODWORD(v703) = 0;
    }
    if (v694 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v694 + 1, 4);
      LODWORD(v694) = __p[1];
    }
    *((_DWORD *)__p[0] + v694) = v703;
    ++LODWORD(__p[1]);
    __dst = (__int128 *)*((_QWORD *)v678 + 3);
    *(_QWORD *)&v1056 = 0;
    if (sub_1C4DD8A9C((uint64_t *)(v438 + 48), &__dst, &v1056))
      v704 = v1056;
    else
      v704 = *(_QWORD *)(v438 + 48) + 16 * *(unsigned int *)(v438 + 64);
    v705 = *(_DWORD *)(v704 + 8);
    v706 = LODWORD(__p[1]);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
      v706 = LODWORD(__p[1]);
    }
    *((_DWORD *)__p[0] + v706) = v705 - 1;
    v707 = (LODWORD(__p[1]) + 1);
    LODWORD(__p[1]) = v707;
    v708 = *(_DWORD *)(*(_QWORD *)v678 + 8);
    if (v707 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v707 + 1, 4);
      LODWORD(v707) = __p[1];
    }
    *((_DWORD *)__p[0] + v707) = v708 >> 8;
    ++LODWORD(__p[1]);
    ValueID = llvm::ValueEnumerator::getValueID((uint64_t)v431, *((_QWORD *)v678 - 4));
    v710 = LODWORD(__p[1]);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
      v710 = LODWORD(__p[1]);
    }
    *((_DWORD *)__p[0] + v710) = ValueID;
    v711 = (LODWORD(__p[1]) + 1);
    LODWORD(__p[1]) = v711;
    v712 = dword_1C85FA178[*((_DWORD *)v678 + 8) & 0xF];
    if (v711 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v711 + 1, 4);
      LODWORD(v711) = __p[1];
    }
    *((_DWORD *)__p[0] + v711) = v712;
    v713 = (LODWORD(__p[1]) + 1);
    LODWORD(__p[1]) = v713;
    v714 = *((_DWORD *)v678 + 8);
    if (v713 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v713 + 1, 4);
      LODWORD(v713) = __p[1];
    }
    *((_DWORD *)__p[0] + v713) = (v714 >> 4) & 3;
    v715 = (LODWORD(__p[1]) + 1);
    LODWORD(__p[1]) = v715;
    v716 = *((_DWORD *)v678 + 8);
    if (v715 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v715 + 1, 4);
      LODWORD(v715) = __p[1];
    }
    *((_DWORD *)__p[0] + v715) = (v716 >> 8) & 3;
    v717 = (LODWORD(__p[1]) + 1);
    LODWORD(__p[1]) = v717;
    v718 = *((_DWORD *)v678 + 8);
    if (v717 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v717 + 1, 4);
      LODWORD(v717) = __p[1];
    }
    *((_DWORD *)__p[0] + v717) = (v718 >> 10) & 7;
    v719 = (LODWORD(__p[1]) + 1);
    LODWORD(__p[1]) = v719;
    v720 = dword_1C85FA16C[*((_DWORD *)v678 + 8) >> 6];
    if (v719 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v719 + 1, 4);
      LODWORD(v719) = __p[1];
    }
    *((_DWORD *)__p[0] + v719) = v720;
    v721 = (LODWORD(__p[1]) + 1);
    LODWORD(__p[1]) = v721;
    v722 = *((_DWORD *)v678 + 8);
    if (v721 >= HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v721 + 1, 4);
      LODWORD(v721) = __p[1];
    }
    *((_DWORD *)__p[0] + v721) = (v722 >> 14) & 1;
    ++LODWORD(__p[1]);
    v723 = llvm::GlobalValue::getPartition(v678);
    v725 = sub_1C5034B2C(v438, v723, v724);
    v726 = LODWORD(__p[1]);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
      v726 = LODWORD(__p[1]);
    }
    *((_DWORD *)__p[0] + v726) = v725;
    ++LODWORD(__p[1]);
    llvm::GlobalValue::getPartition(v678);
    v728 = v727;
    v729 = LODWORD(__p[1]);
    if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
      v729 = LODWORD(__p[1]);
    }
    *((_DWORD *)__p[0] + v729) = v728;
    ++LODWORD(__p[1]);
    sub_1C5033274(*(llvm::raw_ostream **)v438, 0xEu, (uint64_t)__p, 0);
    LODWORD(__p[1]) = 0;
    v677 = (_QWORD *)v677[1];
    if (v677 != v676)
      continue;
    break;
  }
  v470 = *(_QWORD **)(v438 + 16);
LABEL_1017:
  v730 = v470 + 7;
  v731 = (_QWORD *)v470[8];
  if (v731 != v470 + 7)
  {
    while (2)
    {
      if (v731)
        v732 = (llvm::GlobalValue *)(v731 - 7);
      else
        v732 = 0;
      v733 = v732 >> 4;
      if ((*((_BYTE *)v732 + 23) & 0x10) != 0)
      {
        v734 = ***(_QWORD ***)v732;
        v735 = *(_QWORD *)(v734 + 152);
        v736 = *(unsigned int *)(v734 + 168);
        if (!(_DWORD)v736)
          goto LABEL_1028;
        LODWORD(v737) = (v736 - 1) & (v733 ^ (v732 >> 9));
        v738 = (llvm::GlobalValue **)(v735 + 16 * v737);
        v739 = *v738;
        if (*v738 != v732)
        {
          v740 = 1;
          while (v739 != (llvm::GlobalValue *)-4096)
          {
            v741 = v737 + v740++;
            v737 = v741 & (v736 - 1);
            v739 = *(llvm::GlobalValue **)(v735 + 16 * v737);
            if (v739 == v732)
            {
              v738 = (llvm::GlobalValue **)(v735 + 16 * v737);
              goto LABEL_1029;
            }
          }
LABEL_1028:
          v738 = (llvm::GlobalValue **)(v735 + 16 * v736);
        }
LABEL_1029:
        v742 = v738[1];
        v745 = *(_QWORD *)v742;
        v743 = (char *)v742 + 16;
        v744 = v745;
      }
      else
      {
        v744 = 0;
        v743 = &byte_1C871356D;
      }
      v746 = sub_1C5034B2C(v438, v743, v744);
      v747 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v747 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v747) = v746;
      v748 = ++LODWORD(__p[1]);
      if ((*((_BYTE *)v732 + 23) & 0x10) != 0)
      {
        v749 = ***(_QWORD ***)v732;
        v750 = *(_QWORD *)(v749 + 152);
        v751 = *(unsigned int *)(v749 + 168);
        if (!(_DWORD)v751)
          goto LABEL_1039;
        LODWORD(v752) = (v751 - 1) & (v733 ^ (v732 >> 9));
        v753 = v750 + 16 * v752;
        v754 = *(llvm::GlobalValue **)v753;
        if (*(llvm::GlobalValue **)v753 != v732)
        {
          v755 = 1;
          while (v754 != (llvm::GlobalValue *)-4096)
          {
            v756 = v752 + v755++;
            v752 = v756 & (v751 - 1);
            v754 = *(llvm::GlobalValue **)(v750 + 16 * v752);
            if (v754 == v732)
            {
              v753 = v750 + 16 * v752;
              goto LABEL_1040;
            }
          }
LABEL_1039:
          v753 = v750 + 16 * v751;
        }
LABEL_1040:
        v757 = **(_QWORD **)(v753 + 8);
      }
      else
      {
        LODWORD(v757) = 0;
      }
      if (v748 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v748 + 1, 4);
        LODWORD(v748) = __p[1];
      }
      *((_DWORD *)__p[0] + v748) = v757;
      ++LODWORD(__p[1]);
      __dst = (__int128 *)*((_QWORD *)v732 + 3);
      *(_QWORD *)&v1056 = 0;
      if (sub_1C4DD8A9C((uint64_t *)(v438 + 48), &__dst, &v1056))
        v758 = v1056;
      else
        v758 = *(_QWORD *)(v438 + 48) + 16 * *(unsigned int *)(v438 + 64);
      v759 = *(_DWORD *)(v758 + 8);
      v760 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v760 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v760) = v759 - 1;
      v761 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v761;
      v762 = *(_DWORD *)(*(_QWORD *)v732 + 8);
      if (v761 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v761 + 1, 4);
        LODWORD(v761) = __p[1];
      }
      *((_DWORD *)__p[0] + v761) = v762 >> 8;
      ++LODWORD(__p[1]);
      v763 = llvm::ValueEnumerator::getValueID((uint64_t)v431, *((_QWORD *)v732 - 4));
      v764 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v764 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v764) = v763;
      v765 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v765;
      v766 = dword_1C85FA178[*((_DWORD *)v732 + 8) & 0xF];
      if (v765 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v765 + 1, 4);
        LODWORD(v765) = __p[1];
      }
      *((_DWORD *)__p[0] + v765) = v766;
      v767 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v767;
      v768 = *((_DWORD *)v732 + 8);
      if (v767 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v767 + 1, 4);
        LODWORD(v767) = __p[1];
      }
      *((_DWORD *)__p[0] + v767) = (v768 >> 4) & 3;
      v769 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v769;
      v770 = *((_DWORD *)v732 + 8);
      if (v769 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v769 + 1, 4);
        LODWORD(v769) = __p[1];
      }
      *((_DWORD *)__p[0] + v769) = (v770 >> 14) & 1;
      ++LODWORD(__p[1]);
      v771 = llvm::GlobalValue::getPartition(v732);
      v773 = sub_1C5034B2C(v438, v771, v772);
      v774 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v774 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v774) = v773;
      ++LODWORD(__p[1]);
      llvm::GlobalValue::getPartition(v732);
      v776 = v775;
      v777 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 4);
        v777 = LODWORD(__p[1]);
      }
      *((_DWORD *)__p[0] + v777) = v776;
      ++LODWORD(__p[1]);
      sub_1C5033274(*(llvm::raw_ostream **)v438, 0x12u, (uint64_t)__p, 0);
      LODWORD(__p[1]) = 0;
      v731 = (_QWORD *)v731[1];
      if (v731 == v730)
        break;
      continue;
    }
  }
  v778 = (char *)operator new(0x228uLL);
  *(_QWORD *)v778 = &unk_1E813F300;
  *((_QWORD *)v778 + 1) = 0;
  *(_OWORD *)(v778 + 72) = 0u;
  *(_OWORD *)(v778 + 88) = 0u;
  *(_OWORD *)(v778 + 104) = 0u;
  *(_OWORD *)(v778 + 120) = 0u;
  *(_OWORD *)(v778 + 136) = 0u;
  *(_OWORD *)(v778 + 152) = 0u;
  *(_OWORD *)(v778 + 168) = 0u;
  *(_OWORD *)(v778 + 184) = 0u;
  *(_OWORD *)(v778 + 200) = 0u;
  *(_OWORD *)(v778 + 216) = 0u;
  *(_OWORD *)(v778 + 232) = 0u;
  *(_OWORD *)(v778 + 248) = 0u;
  *(_OWORD *)(v778 + 264) = 0u;
  *(_OWORD *)(v778 + 280) = 0u;
  *(_OWORD *)(v778 + 296) = 0u;
  *(_OWORD *)(v778 + 312) = 0u;
  *(_OWORD *)(v778 + 328) = 0u;
  *(_OWORD *)(v778 + 344) = 0u;
  *(_OWORD *)(v778 + 360) = 0u;
  *(_OWORD *)(v778 + 376) = 0u;
  *(_OWORD *)(v778 + 392) = 0u;
  *(_OWORD *)(v778 + 408) = 0u;
  *(_OWORD *)(v778 + 424) = 0u;
  *(_OWORD *)(v778 + 440) = 0u;
  *(_OWORD *)(v778 + 456) = 0u;
  *(_OWORD *)(v778 + 472) = 0u;
  *(_OWORD *)(v778 + 488) = 0u;
  *(_OWORD *)(v778 + 504) = 0u;
  *(_OWORD *)(v778 + 520) = 0u;
  *(_OWORD *)(v778 + 536) = 0u;
  *(_OWORD *)(v778 + 40) = xmmword_1C85F9F70;
  *((_QWORD *)v778 + 2) = 0;
  *((_QWORD *)v778 + 3) = v778 + 40;
  *(_OWORD *)(v778 + 56) = xmmword_1C85F9F80;
  *((_QWORD *)v778 + 4) = 0x2000000002;
  v779 = *(llvm::raw_ostream **)v438;
  __dst = (__int128 *)(v778 + 24);
  v1048 = (__int128 *)v778;
  v780 = sub_1C50247B8((uint64_t)v779, (uint64_t)&__dst);
  v781 = (std::__shared_weak_count *)v1048;
  if (v1048)
  {
    v782 = (unint64_t *)v1048 + 1;
    do
      v783 = __ldaxr(v782);
    while (__stlxr(v783 - 1, v782));
    if (!v783)
    {
      ((void (*)(std::__shared_weak_count *))v781->__on_zero_shared)(v781);
      std::__shared_weak_count::__release_weak(v781);
    }
  }
  v1056 = xmmword_1C85FA050;
  sub_1C5033D5C(*(llvm::raw_ostream **)v438, v780, (uint64_t)&v1056, 2, 0, 0, 0);
  v784 = *(llvm::raw_ostream **)v438;
  v785 = *(_QWORD **)(*(_QWORD *)v438 + 8);
  v786 = *(_QWORD *)(**(_QWORD **)v438 + 8);
  if (v785)
    v787 = (*(uint64_t (**)(_QWORD))(*v785 + 80))(*(_QWORD *)(*(_QWORD *)v438 + 8)) + v785[4] - v785[2];
  else
    v787 = 0;
  *(_QWORD *)(v438 + 536) = *((unsigned int *)v784 + 6) + 8 * (v787 + v786) - 32;
  if (__p[0] != v1065)
    free(__p[0]);
  sub_1C47653C0((uint64_t)&v1061, (char *)v1062);
  sub_1C47653C0((uint64_t)&v1058, (char *)v1059);
  v788 = *(_QWORD *)(v438 + 120);
  v789 = *(_QWORD *)(v438 + 128) - v788;
  v790 = v789 >> 4;
  if ((v789 >> 4))
  {
    v791 = 0;
    v792 = (v789 >> 4);
    while (*(unsigned __int8 *)(*(_QWORD *)v788 + 16) < 4u)
    {
      ++v791;
      v788 += 16;
      if (v792 == v791)
        goto LABEL_1082;
    }
    sub_1C5034C9C(v438, v791, v790, 1);
  }
LABEL_1082:
  __p[0] = v1065;
  __p[1] = (void *)0x4000000000;
  v1058 = v1060;
  v1059 = 0x800000000;
  llvm::LLVMContext::getMDKindNames(**(_QWORD **)(v438 + 16), &v1058);
  if ((_DWORD)v1059)
  {
    sub_1C50244C4(*(_QWORD *)v438, 0x16u, 3u);
    v793 = v1059;
    if ((_DWORD)v1059)
    {
      v794 = 0;
      v795 = 0;
      v796 = LODWORD(__p[1]);
      do
      {
        if (v796 >= HIDWORD(__p[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v796 + 1, 8);
          v796 = LODWORD(__p[1]);
        }
        *((_QWORD *)__p[0] + v796) = v795;
        ++LODWORD(__p[1]);
        sub_1C50349A8((unsigned int *)__p, *(char **)((char *)v1058 + v794), (char *)(*(_QWORD *)((char *)v1058 + v794) + *(_QWORD *)((char *)v1058 + v794 + 8)));
        sub_1C5034740(*(llvm::raw_ostream **)v438, 6u, (uint64_t)__p, 0);
        v796 = 0;
        LODWORD(__p[1]) = 0;
        ++v795;
        v794 += 16;
      }
      while (v793 != v795);
    }
    sub_1C502481C(*(_QWORD *)v438);
  }
  if (v1058 != v1060)
    free(v1058);
  if (__p[0] != v1065)
    free(__p[0]);
  if (*(unsigned int *)(v438 + 476) < (unint64_t)((uint64_t)(*(_QWORD *)(v438 + 200) - *(_QWORD *)(v438 + 192)) >> 3)
    || *(_QWORD *)(*(_QWORD *)(v438 + 16) + 72) != *(_QWORD *)(v438 + 16) + 72)
  {
    sub_1C50244C4(*(_QWORD *)v438, 0xFu, 4u);
    __p[0] = v1065;
    __p[1] = (void *)0x4000000000;
    v1062 = 0;
    v1061 = 0;
    v1063[0] = 0;
    sub_1C4D63CD0((char **)&v1061, 0x1FuLL);
    v797 = sub_1C5036E28((uint64_t *)v438);
    *((_DWORD *)v1061 + 1) = v797;
    v798 = sub_1C5036F50((uint64_t *)v438);
    *((_DWORD *)v1061 + 4) = v798;
    v799 = (char *)operator new(0x228uLL);
    *(_QWORD *)v799 = &unk_1E813F300;
    *((_QWORD *)v799 + 1) = 0;
    *(_OWORD *)(v799 + 88) = 0u;
    *(_OWORD *)(v799 + 104) = 0u;
    *(_OWORD *)(v799 + 120) = 0u;
    *(_OWORD *)(v799 + 136) = 0u;
    *(_OWORD *)(v799 + 152) = 0u;
    *(_OWORD *)(v799 + 168) = 0u;
    *(_OWORD *)(v799 + 184) = 0u;
    *(_OWORD *)(v799 + 200) = 0u;
    *(_OWORD *)(v799 + 216) = 0u;
    *(_OWORD *)(v799 + 232) = 0u;
    *(_OWORD *)(v799 + 248) = 0u;
    *(_OWORD *)(v799 + 264) = 0u;
    *(_OWORD *)(v799 + 280) = 0u;
    *(_OWORD *)(v799 + 296) = 0u;
    *(_OWORD *)(v799 + 312) = 0u;
    *(_OWORD *)(v799 + 328) = 0u;
    *(_OWORD *)(v799 + 344) = 0u;
    *(_OWORD *)(v799 + 360) = 0u;
    *(_OWORD *)(v799 + 376) = 0u;
    *(_OWORD *)(v799 + 392) = 0u;
    *(_OWORD *)(v799 + 408) = 0u;
    *(_OWORD *)(v799 + 424) = 0u;
    *(_OWORD *)(v799 + 440) = 0u;
    *(_OWORD *)(v799 + 456) = 0u;
    *(_OWORD *)(v799 + 472) = 0u;
    *(_OWORD *)(v799 + 488) = 0u;
    *(_OWORD *)(v799 + 504) = 0u;
    *(_OWORD *)(v799 + 520) = 0u;
    *(_OWORD *)(v799 + 536) = 0u;
    *(_OWORD *)(v799 + 40) = xmmword_1C85F9F90;
    *((_QWORD *)v799 + 2) = 0;
    *((_QWORD *)v799 + 3) = v799 + 40;
    *(_OWORD *)(v799 + 56) = xmmword_1C85F9F80;
    *(_OWORD *)(v799 + 72) = xmmword_1C85F9F80;
    *((_QWORD *)v799 + 4) = 0x2000000003;
    v800 = *(llvm::raw_ostream **)v438;
    *(_QWORD *)&v1056 = v799 + 24;
    *((_QWORD *)&v1056 + 1) = v799;
    v801 = sub_1C50247B8((uint64_t)v800, (uint64_t)&v1056);
    v802 = (std::__shared_weak_count *)*((_QWORD *)&v1056 + 1);
    if (*((_QWORD *)&v1056 + 1))
    {
      v803 = (unint64_t *)(*((_QWORD *)&v1056 + 1) + 8);
      do
        v804 = __ldaxr(v803);
      while (__stlxr(v804 - 1, v803));
      if (!v804)
      {
        ((void (*)(std::__shared_weak_count *))v802->__on_zero_shared)(v802);
        std::__shared_weak_count::__release_weak(v802);
      }
    }
    v805 = (char *)operator new(0x228uLL);
    *(_QWORD *)v805 = &unk_1E813F300;
    *((_QWORD *)v805 + 1) = 0;
    *(_OWORD *)(v805 + 88) = 0u;
    *(_OWORD *)(v805 + 104) = 0u;
    *(_OWORD *)(v805 + 120) = 0u;
    *(_OWORD *)(v805 + 136) = 0u;
    *(_OWORD *)(v805 + 152) = 0u;
    *(_OWORD *)(v805 + 168) = 0u;
    *(_OWORD *)(v805 + 184) = 0u;
    *(_OWORD *)(v805 + 200) = 0u;
    *(_OWORD *)(v805 + 216) = 0u;
    *(_OWORD *)(v805 + 232) = 0u;
    *(_OWORD *)(v805 + 248) = 0u;
    *(_OWORD *)(v805 + 264) = 0u;
    *(_OWORD *)(v805 + 280) = 0u;
    *(_OWORD *)(v805 + 296) = 0u;
    *(_OWORD *)(v805 + 312) = 0u;
    *(_OWORD *)(v805 + 328) = 0u;
    *(_OWORD *)(v805 + 344) = 0u;
    *(_OWORD *)(v805 + 360) = 0u;
    *(_OWORD *)(v805 + 376) = 0u;
    *(_OWORD *)(v805 + 392) = 0u;
    *(_OWORD *)(v805 + 408) = 0u;
    *(_OWORD *)(v805 + 424) = 0u;
    *(_OWORD *)(v805 + 440) = 0u;
    *(_OWORD *)(v805 + 456) = 0u;
    *(_OWORD *)(v805 + 472) = 0u;
    *(_OWORD *)(v805 + 488) = 0u;
    *(_OWORD *)(v805 + 504) = 0u;
    *(_OWORD *)(v805 + 520) = 0u;
    *(_OWORD *)(v805 + 536) = 0u;
    *(_OWORD *)(v805 + 40) = xmmword_1C85F9FA0;
    *((_QWORD *)v805 + 2) = 0;
    *((_QWORD *)v805 + 3) = v805 + 40;
    *(_OWORD *)(v805 + 56) = xmmword_1C85F9DD0;
    *(_OWORD *)(v805 + 72) = xmmword_1C85F6930;
    *((_QWORD *)v805 + 4) = 0x2000000003;
    v806 = *(llvm::raw_ostream **)v438;
    v1054 = (std::__shared_weak_count *)(v805 + 24);
    v1055 = (std::__shared_weak_count *)v805;
    v807 = sub_1C50247B8((uint64_t)v806, (uint64_t)&v1054);
    v808 = v1055;
    if (v1055)
    {
      v809 = (unint64_t *)&v1055->__shared_owners_;
      do
        v810 = __ldaxr(v809);
      while (__stlxr(v810 - 1, v809));
      if (!v810)
      {
        ((void (*)(std::__shared_weak_count *))v808->__on_zero_shared)(v808);
        std::__shared_weak_count::__release_weak(v808);
      }
    }
    sub_1C5037078((llvm::raw_ostream **)v438, *(_QWORD *)(v438 + 192) + 8 * *(unsigned int *)(v438 + 476), *(unsigned int *)(v438 + 480), (uint64_t)__p);
    if (((uint64_t)(*(_QWORD *)(v438 + 200) - *(_QWORD *)(v438 + 192)) >> 3)
       - (*(unsigned int *)(v438 + 480)
        + (unint64_t)*(unsigned int *)(v438 + 476)) > dword_1ED7F4C10)
    {
      v1059 = 0;
      v1058 = 0;
      sub_1C503748C(*(int **)v438, 0x26u, (uint64_t)&v1058, v801);
    }
    v811 = *(llvm::raw_ostream **)v438;
    v812 = *(_QWORD **)(*(_QWORD *)v438 + 8);
    v813 = *(_QWORD *)(**(_QWORD **)v438 + 8);
    if (v812)
      v812 = (_QWORD *)((*(uint64_t (**)(_QWORD))(*v812 + 80))(*(_QWORD *)(*(_QWORD *)v438 + 8))
                      + v812[4]
                      - v812[2]);
    v814 = *((unsigned int *)v811 + 6);
    __dst = 0;
    v1048 = 0;
    v1049 = 0;
    sub_1C4DB1D18((uint64_t)&__dst, ((uint64_t)(*(_QWORD *)(v438 + 200) - *(_QWORD *)(v438 + 192)) >> 3)- (*(unsigned int *)(v438 + 480)+ (unint64_t)*(unsigned int *)(v438 + 476)));
    sub_1C5037560((llvm::raw_ostream *)v438, (uint64_t *)(*(_QWORD *)(v438 + 192) + 8 * *(unsigned int *)(v438 + 476) + 8 * *(unsigned int *)(v438 + 480)), ((uint64_t)(*(_QWORD *)(v438 + 200) - *(_QWORD *)(v438 + 192)) >> 3)- (*(unsigned int *)(v438 + 480)+ (unint64_t)*(unsigned int *)(v438 + 476)), (unsigned int *)__p, (unsigned int **)&v1061, (uint64_t)&__dst);
    if (((uint64_t)(*(_QWORD *)(v438 + 200) - *(_QWORD *)(v438 + 192)) >> 3)
       - (*(unsigned int *)(v438 + 480)
        + (unint64_t)*(unsigned int *)(v438 + 476)) > dword_1ED7F4C10)
    {
      v815 = v814 + 8 * ((_QWORD)v812 + v813);
      v816 = *(llvm::raw_ostream **)v438;
      v817 = *(_QWORD **)(*(_QWORD *)v438 + 8);
      v818 = *(_QWORD *)(**(_QWORD **)v438 + 8);
      if (v817)
        v819 = (*(uint64_t (**)(_QWORD))(*v817 + 80))(*(_QWORD *)(*(_QWORD *)v438 + 8))
             + v817[4]
             - v817[2];
      else
        v819 = 0;
      v820 = v819 + v818;
      v821 = *((unsigned int *)v816 + 6) - v815 + 8 * v820;
      sub_1C5030D94((off_t)v816, v815 - 64, *((_DWORD *)v816 + 6) - v815 + 8 * v820);
      sub_1C5030D94((off_t)v816, v815 - 32, HIDWORD(v821));
      v822 = __dst;
      v823 = v1048;
      if (__dst != v1048)
      {
        v824 = __dst;
        do
        {
          v825 = *(_QWORD *)v824;
          *(_QWORD *)v824 -= v815;
          v824 = (__int128 *)((char *)v824 + 8);
          v815 = v825;
        }
        while (v824 != v823);
      }
      v826 = *(llvm::raw_ostream **)v438;
      v827 = (char *)v823 - (char *)v822;
      if (v807)
      {
        sub_1C5033D5C(*(llvm::raw_ostream **)v438, v807, (uint64_t)v822, (uint64_t)v827 >> 3, 0, 0, 0x100000027);
      }
      else
      {
        v978 = *((_DWORD *)v826 + 8);
        v979 = *((_DWORD *)v826 + 6);
        v980 = *((_DWORD *)v826 + 7) | (3 << v979);
        *((_DWORD *)v826 + 7) = v980;
        v981 = v979 + v978;
        if (v981 >= 0x20)
        {
          sub_1C503027C((uint64_t *)v826, v980);
          v999 = *((_DWORD *)v826 + 6);
          if (v999)
            v980 = 3u >> -(char)v999;
          else
            v980 = 0;
          v981 = ((_BYTE)v999 + (_BYTE)v978) & 0x1F;
        }
        v982 = v827 >> 3;
        v983 = v980 | (39 << v981);
        *((_DWORD *)v826 + 6) = v981;
        *((_DWORD *)v826 + 7) = v983;
        if (v981 >= 0x1A)
        {
          sub_1C503027C((uint64_t *)v826, v983);
          v1000 = *((_DWORD *)v826 + 6);
          if (v1000)
            v983 = 0x27u >> -(char)v1000;
          else
            v983 = 0;
          v984 = ((_BYTE)v1000 + 6) & 0x1F;
        }
        else
        {
          v984 = v981 + 6;
        }
        v985 = v983 | (1 << v984);
        *((_DWORD *)v826 + 6) = v984;
        *((_DWORD *)v826 + 7) = v985;
        if (v984 >= 0x1A)
        {
          sub_1C503027C((uint64_t *)v826, v985);
          v1001 = *((_DWORD *)v826 + 6);
          if (v1001)
            v985 = 1u >> -(char)v1001;
          else
            v985 = 0;
          v986 = ((_BYTE)v1001 + 6) & 0x1F;
        }
        else
        {
          v986 = v984 + 6;
        }
        *((_DWORD *)v826 + 6) = v986;
        if (v982 >= 0x20)
        {
          v992 = v827 >> 3;
          do
          {
            v993 = v992 & 0x1F | 0x20;
            v985 |= v993 << v986;
            *((_DWORD *)v826 + 7) = v985;
            v986 += 6;
            if (v986 >= 0x20)
            {
              sub_1C503027C((uint64_t *)v826, v985);
              v994 = *((_DWORD *)v826 + 6);
              if (v994)
                v985 = v993 >> -(char)v994;
              else
                v985 = 0;
              *((_DWORD *)v826 + 7) = v985;
              v986 = ((_BYTE)v994 + 6) & 0x1F;
            }
            *((_DWORD *)v826 + 6) = v986;
            LODWORD(v987) = v992 >> 5;
            v419 = v992 > 0x3FF;
            LODWORD(v992) = v992 >> 5;
          }
          while (v419);
        }
        else
        {
          v987 = v827 >> 3;
        }
        v988 = v985 | ((_DWORD)v987 << v986);
        *((_DWORD *)v826 + 7) = v988;
        if (v986 >= 0x1A)
        {
          sub_1C503027C((uint64_t *)v826, v988);
          v1002 = *((_DWORD *)v826 + 6);
          v1003 = v987 >> -(char)v1002;
          if (!v1002)
            v1003 = 0;
          *((_DWORD *)v826 + 7) = v1003;
          v989 = ((_BYTE)v1002 + 6) & 0x1F;
        }
        else
        {
          v989 = v986 + 6;
        }
        *((_DWORD *)v826 + 6) = v989;
        v438 = v1024;
        v431 = (llvm::ValueEnumerator *)v1016;
        if ((_DWORD)v982)
        {
          v990 = 0;
          v991 = v827 & 0x7FFFFFFF8;
          do
          {
            sub_1C5030AF8(v826, *(_QWORD *)((char *)__dst + v990), 6);
            v990 += 8;
          }
          while (v991 != v990);
        }
      }
      v1048 = __dst;
    }
    v828 = *(_QWORD **)(v438 + 16);
    if ((_QWORD *)v828[9] != v828 + 9)
    {
      v829 = (char *)operator new(0x228uLL);
      *(_QWORD *)v829 = &unk_1E813F300;
      *((_QWORD *)v829 + 1) = 0;
      *(_OWORD *)(v829 + 88) = 0u;
      *(_OWORD *)(v829 + 104) = 0u;
      *(_OWORD *)(v829 + 120) = 0u;
      *(_OWORD *)(v829 + 136) = 0u;
      *(_OWORD *)(v829 + 152) = 0u;
      *(_OWORD *)(v829 + 168) = 0u;
      *(_OWORD *)(v829 + 184) = 0u;
      *(_OWORD *)(v829 + 200) = 0u;
      *(_OWORD *)(v829 + 216) = 0u;
      *(_OWORD *)(v829 + 232) = 0u;
      *(_OWORD *)(v829 + 248) = 0u;
      *(_OWORD *)(v829 + 264) = 0u;
      *(_OWORD *)(v829 + 280) = 0u;
      *(_OWORD *)(v829 + 296) = 0u;
      *(_OWORD *)(v829 + 312) = 0u;
      *(_OWORD *)(v829 + 328) = 0u;
      *(_OWORD *)(v829 + 344) = 0u;
      *(_OWORD *)(v829 + 360) = 0u;
      *(_OWORD *)(v829 + 376) = 0u;
      *(_OWORD *)(v829 + 392) = 0u;
      *(_OWORD *)(v829 + 408) = 0u;
      *(_OWORD *)(v829 + 424) = 0u;
      *(_OWORD *)(v829 + 440) = 0u;
      *(_OWORD *)(v829 + 456) = 0u;
      *(_OWORD *)(v829 + 472) = 0u;
      *(_OWORD *)(v829 + 488) = 0u;
      *(_OWORD *)(v829 + 504) = 0u;
      *(_OWORD *)(v829 + 520) = 0u;
      *(_OWORD *)(v829 + 536) = 0u;
      *(_OWORD *)(v829 + 40) = xmmword_1C85F9E00;
      *((_QWORD *)v829 + 2) = 0;
      *((_QWORD *)v829 + 3) = v829 + 40;
      *(_OWORD *)(v829 + 56) = xmmword_1C85F9DD0;
      *(_OWORD *)(v829 + 72) = xmmword_1C85F6850;
      *((_QWORD *)v829 + 4) = 0x2000000003;
      v830 = *(llvm::raw_ostream **)v438;
      v1058 = v829 + 24;
      v1059 = (uint64_t)v829;
      v831 = sub_1C50247B8((uint64_t)v830, (uint64_t)&v1058);
      v832 = (std::__shared_weak_count *)v1059;
      if (v1059)
      {
        v833 = (unint64_t *)(v1059 + 8);
        do
          v834 = __ldaxr(v833);
        while (__stlxr(v834 - 1, v833));
        if (!v834)
        {
          ((void (*)(std::__shared_weak_count *))v832->__on_zero_shared)(v832);
          std::__shared_weak_count::__release_weak(v832);
        }
      }
      v828 = *(_QWORD **)(v438 + 16);
      v835 = v828 + 9;
      v836 = v828[10];
      if ((_QWORD *)v836 != v828 + 9)
      {
        v837 = (uint64_t *)(v438 + 240);
        do
        {
          v838 = *(_BYTE *)(v836 + 39);
          v839 = v838;
          if (v838 >= 0)
            v840 = (unsigned __int8 *)(v836 + 16);
          else
            v840 = *(unsigned __int8 **)(v836 + 16);
          v841 = *(_QWORD *)(v836 + 24);
          v842 = v838 & 0x7F;
          if (v839 >= 0)
            v841 = v842;
          sub_1C503DAE8((uint64_t)__p, v840, &v840[v841]);
          sub_1C503D888(*(llvm::raw_ostream **)v438, 4u, (uint64_t)__p, v831);
          LODWORD(__p[1]) = 0;
          v843 = *(unsigned int *)(*(_QWORD *)(v836 + 48) + 8);
          if ((_DWORD)v843)
          {
            v844 = 0;
            v845 = 8 * v843;
            do
            {
              v1058 = *(void **)(**(_QWORD **)(v836 + 48) + v844);
              v1052 = 0;
              if (sub_1C4E36534(v837, &v1058, &v1052))
                v846 = HIDWORD(v1052->__shared_owners_) - 1;
              else
                v846 = -1;
              v847 = LODWORD(__p[1]);
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
                v847 = LODWORD(__p[1]);
              }
              *((_QWORD *)__p[0] + v847) = v846;
              ++LODWORD(__p[1]);
              v844 += 8;
            }
            while (v845 != v844);
          }
          v438 = v1024;
          sub_1C503D888(*(llvm::raw_ostream **)v1024, 0xAu, (uint64_t)__p, 0);
          LODWORD(__p[1]) = 0;
          v836 = *(_QWORD *)(v836 + 8);
        }
        while ((_QWORD *)v836 != v835);
        v828 = *(_QWORD **)(v1024 + 16);
        v431 = (llvm::ValueEnumerator *)v1016;
      }
    }
    v848 = v828 + 3;
    v849 = (_QWORD *)v828[4];
    if (v849 != v828 + 3)
    {
      while (1)
      {
        if (v849)
          v850 = (uint64_t)(v849 - 7);
        else
          v850 = 0;
        if (v849 && *(_BYTE *)(v850 + 16) == 3)
        {
          v851 = *(_DWORD *)(v850 + 20);
          if ((v851 & 0x7FFFFFF) == 0 && (v851 & 0x20000000) != 0)
            goto LABEL_1150;
        }
        else if (!*(_BYTE *)(v850 + 16)
               && *(_QWORD *)(v850 + 72) == v850 + 72
               && (*(_BYTE *)(v850 + 34) & 0x80) == 0
               && (*(_DWORD *)(v850 + 20) & 0x20000000) != 0)
        {
LABEL_1150:
          v1058 = v1060;
          v1059 = 0x400000000;
          v852 = llvm::ValueEnumerator::getValueID((uint64_t)v431, v850);
          v853 = v1059;
          if (v1059 >= (unint64_t)HIDWORD(v1059))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1058, (uint64_t)v1060, v1059 + 1, 8);
            v853 = v1059;
          }
          *((_QWORD *)v1058 + v853) = v852;
          LODWORD(v1059) = v1059 + 1;
          sub_1C503DB70(v438, (uint64_t)&v1058, (_BYTE *)v850);
          sub_1C61D2D58(*(int **)v438, 36, (uint64_t)&v1058);
          if (v1058 != v1060)
            free(v1058);
        }
        v849 = (_QWORD *)v849[1];
        if (v849 == v848)
        {
          v828 = *(_QWORD **)(v438 + 16);
          break;
        }
      }
    }
    v854 = v828 + 1;
    v855 = (_QWORD *)v828[2];
    if (v855 != v828 + 1)
    {
      do
      {
        if (v855)
          v856 = v855 - 7;
        else
          v856 = 0;
        if ((v856[23] & 0x20) != 0)
        {
          v1058 = v1060;
          v1059 = 0x400000000;
          v857 = llvm::ValueEnumerator::getValueID((uint64_t)v431, (uint64_t)v856);
          v858 = v1059;
          if (v1059 >= (unint64_t)HIDWORD(v1059))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1058, (uint64_t)v1060, v1059 + 1, 8);
            v858 = v1059;
          }
          *((_QWORD *)v1058 + v858) = v857;
          LODWORD(v1059) = v1059 + 1;
          sub_1C503DB70(v438, (uint64_t)&v1058, v856);
          sub_1C61D2D58(*(int **)v438, 36, (uint64_t)&v1058);
          if (v1058 != v1060)
            free(v1058);
        }
        v855 = (_QWORD *)v855[1];
      }
      while (v855 != v854);
    }
    sub_1C502481C(*(_QWORD *)v438);
    if (__dst)
    {
      v1048 = __dst;
      operator delete(__dst);
    }
    if (v1061)
    {
      v1062 = (uint64_t)v1061;
      operator delete(v1061);
    }
    if (__p[0] != v1065)
      free(__p[0]);
  }
  if (*(_BYTE *)(v438 + 288))
    sub_1C50311D0((uint64_t *)v438, 0);
  v1058 = v1060;
  v1059 = 0x800000000;
  llvm::LLVMContextImpl::getOperandBundleTags(***(_QWORD ***)(v438 + 16), &v1058);
  if ((_DWORD)v1059)
  {
    sub_1C50244C4(*(_QWORD *)v438, 0x15u, 3u);
    __p[0] = v1065;
    __p[1] = (void *)0x4000000000;
    if ((_DWORD)v1059)
    {
      v859 = (char **)v1058;
      v860 = (char **)((char *)v1058 + 16 * v1059);
      do
      {
        v861 = *v859;
        v862 = v859[1];
        v859 += 2;
        sub_1C50349A8((unsigned int *)__p, v861, &v862[(_QWORD)v861]);
        sub_1C5034740(*(llvm::raw_ostream **)v438, 1u, (uint64_t)__p, 0);
        LODWORD(__p[1]) = 0;
      }
      while (v859 != v860);
    }
    sub_1C502481C(*(_QWORD *)v438);
    if (__p[0] != v1065)
      free(__p[0]);
  }
  if (v1058 != v1060)
    free(v1058);
  v1058 = v1060;
  v1059 = 0x800000000;
  llvm::LLVMContextImpl::getSyncScopeNames(***(_QWORD ***)(v438 + 16), &v1058);
  if ((_DWORD)v1059)
  {
    sub_1C50244C4(*(_QWORD *)v438, 0x1Au, 2u);
    __p[0] = v1065;
    __p[1] = (void *)0x4000000000;
    if ((_DWORD)v1059)
    {
      v863 = (char **)v1058;
      v864 = (char **)((char *)v1058 + 16 * v1059);
      do
      {
        v865 = *v863;
        v866 = v863[1];
        v863 += 2;
        sub_1C50349A8((unsigned int *)__p, v865, &v866[(_QWORD)v865]);
        sub_1C5034740(*(llvm::raw_ostream **)v438, 1u, (uint64_t)__p, 0);
        LODWORD(__p[1]) = 0;
      }
      while (v863 != v864);
    }
    sub_1C502481C(*(_QWORD *)v438);
    if (__p[0] != v1065)
      free(__p[0]);
  }
  if (v1058 != v1060)
    free(v1058);
  v1056 = 0uLL;
  v1057 = 0;
  v867 = *(_QWORD *)(v438 + 16);
  v868 = *(_QWORD *)(v867 + 32);
  v1009 = v867 + 24;
  if (v868 == v867 + 24)
    goto LABEL_1388;
  v869 = (uint64_t *)(v438 + 240);
  while (2)
  {
    if (v868)
      v870 = v868 - 56;
    else
      v870 = 0;
    if (v868 && *(_BYTE *)(v870 + 16) == 3)
    {
      if ((*(_DWORD *)(v870 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_1364;
    }
    else if (!*(_BYTE *)(v870 + 16) && *(_QWORD *)(v870 + 72) == v870 + 72 && (*(_BYTE *)(v870 + 34) & 0x80) == 0)
    {
      goto LABEL_1364;
    }
    v1011 = v870;
    v1010 = v868;
    v871 = *(llvm::raw_ostream **)v438;
    v872 = *(_QWORD **)(*(_QWORD *)v438 + 8);
    v873 = *(_QWORD *)(**(_QWORD **)v438 + 8);
    if (v872)
      v874 = (*(uint64_t (**)(_QWORD))(*v872 + 80))(*(_QWORD *)(*(_QWORD *)v438 + 8)) + v872[4] - v872[2];
    else
      v874 = 0;
    v875 = *((unsigned int *)v871 + 6) + 8 * (v874 + v873);
    v876 = v1011;
    __p[0] = (void *)v1011;
    sub_1C4DE6D10((uint64_t *)&v1056, __p)[1] = v875;
    sub_1C50244C4(*(_QWORD *)v438, 0xCu, 4u);
    llvm::ValueEnumerator::incorporateFunction(v431, (const llvm::Function *)v1011);
    v1058 = v1060;
    v1060[0] = (*(_QWORD *)(v438 + 456) - *(_QWORD *)(v438 + 448)) >> 3;
    v1059 = 0x4000000001;
    sub_1C5033274(*(llvm::raw_ostream **)v438, 1u, (uint64_t)&v1058, 0);
    LODWORD(v1059) = 0;
    v877 = *(_DWORD *)(v438 + 488);
    sub_1C5034C9C(v438, *(_DWORD *)(v438 + 484), v877, 0);
    if (*(unsigned int *)(v438 + 476) < (unint64_t)((uint64_t)(*(_QWORD *)(v438 + 200) - *(_QWORD *)(v438 + 192)) >> 3))
    {
      sub_1C50244C4(*(_QWORD *)v438, 0xFu, 3u);
      __p[0] = v1065;
      __p[1] = (void *)0x4000000000;
      sub_1C5037078((llvm::raw_ostream **)v438, *(_QWORD *)(v438 + 192) + 8 * *(unsigned int *)(v438 + 476), *(unsigned int *)(v438 + 480), (uint64_t)__p);
      sub_1C5037560((llvm::raw_ostream *)v438, (uint64_t *)(*(_QWORD *)(v438 + 192) + 8 * *(unsigned int *)(v438 + 476) + 8 * *(unsigned int *)(v438 + 480)), ((uint64_t)(*(_QWORD *)(v438 + 200) - *(_QWORD *)(v438 + 192)) >> 3)- (*(unsigned int *)(v438 + 480)+ (unint64_t)*(unsigned int *)(v438 + 476)), (unsigned int *)__p, 0, 0);
      sub_1C502481C(*(_QWORD *)v438);
      if (__p[0] != v1065)
        free(__p[0]);
    }
    v879 = (*(_DWORD *)(v1011 + 20) >> 29) & 1;
    __dst = (__int128 *)v1051;
    v1048 = (__int128 *)v1051;
    v1049 = 4;
    v1050 = 0;
    v880 = *(_QWORD *)(v1011 + 80);
    v1015 = v1011 + 72;
    if (v880 == v1011 + 72)
    {
LABEL_1261:
      v438 = v1024;
      goto LABEL_1262;
    }
    v881 = 0;
    while (2)
    {
      v882 = (llvm::BlockAddress *)(v880 - 24);
      if (!v880)
        v882 = 0;
      v883 = (_QWORD *)((char *)v882 + 40);
      v1023 = v882;
      v884 = (_QWORD *)*((_QWORD *)v882 + 6);
      while (2)
      {
        if (v884 != v883)
        {
          if (v884)
            v885 = (uint64_t)(v884 - 3);
          else
            v885 = 0;
          sub_1C503DCF8(v1024, v885, v877, (uint64_t)&v1058);
          if (*(_BYTE *)(*(_QWORD *)v885 + 8) != 7)
            ++v877;
          v886 = *(_BYTE *)(v885 + 23);
          v887 = *(_QWORD *)(v885 + 48);
          if (v887)
          {
            if (v887 != v881)
            {
              v888 = *(_DWORD *)(v887 + 4);
              v889 = v1059;
              if (v1059 >= (unint64_t)HIDWORD(v1059))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1058, (uint64_t)v1060, v1059 + 1, 4);
                v889 = v1059;
              }
              *((_DWORD *)v1058 + v889) = v888;
              v890 = (v1059 + 1);
              LODWORD(v1059) = v890;
              v891 = *(unsigned __int16 *)(v887 + 2);
              if (v890 >= HIDWORD(v1059))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1058, (uint64_t)v1060, v890 + 1, 4);
                LODWORD(v890) = v1059;
              }
              *((_DWORD *)v1058 + v890) = v891;
              LODWORD(v1059) = v1059 + 1;
              __p[0] = *(void **)(v887 - 8 * *(unsigned int *)(v887 + 8));
              v1061 = 0;
              if (sub_1C4E36534(v869, __p, &v1061))
                v892 = *((_DWORD *)v1061 + 3);
              else
                v892 = 0;
              v893 = v1059;
              if (v1059 >= (unint64_t)HIDWORD(v1059))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1058, (uint64_t)v1060, v1059 + 1, 4);
                v893 = v1059;
              }
              *((_DWORD *)v1058 + v893) = v892;
              LODWORD(v1059) = v1059 + 1;
              if (*(_DWORD *)(v887 + 8) == 2)
                v894 = *(void **)(v887 - 8);
              else
                v894 = 0;
              __p[0] = v894;
              v1061 = 0;
              if (sub_1C4E36534(v869, __p, &v1061))
                v895 = *((_DWORD *)v1061 + 3);
              else
                v895 = 0;
              v896 = v1059;
              if (v1059 >= (unint64_t)HIDWORD(v1059))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1058, (uint64_t)v1060, v1059 + 1, 4);
                v896 = v1059;
              }
              *((_DWORD *)v1058 + v896) = v895;
              v897 = (v1059 + 1);
              LODWORD(v1059) = v897;
              v898 = *(unsigned __int8 *)(v887 + 1);
              if (v897 >= HIDWORD(v1059))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1058, (uint64_t)v1060, v897 + 1, 4);
                LODWORD(v897) = v1059;
              }
              *((_DWORD *)v1058 + v897) = v898 >> 7;
              LODWORD(v1059) = v1059 + 1;
              sub_1C5033274(*(llvm::raw_ostream **)v1024, 0x23u, (uint64_t)&v1058, 0);
              LODWORD(v1059) = 0;
              goto LABEL_1248;
            }
            sub_1C5033274(*(llvm::raw_ostream **)v1024, 0x21u, (uint64_t)&v1058, 0);
          }
          v887 = v881;
LABEL_1248:
          v879 |= (v886 & 0x20) >> 5;
          v884 = (_QWORD *)v884[1];
          v881 = v887;
          continue;
        }
        break;
      }
      v899 = llvm::BlockAddress::lookup(v1023, v878);
      v431 = (llvm::ValueEnumerator *)v1016;
      v876 = v1011;
      if (v899)
      {
        for (i = *(_QWORD *)(v899 + 8); i; i = *(_QWORD *)(i + 8))
        {
          v901 = *(_QWORD *)(i + 24);
          if (v901)
            v902 = *(unsigned __int8 *)(v901 + 16) >= 0x1Cu;
          else
            v902 = 0;
          if (v902)
          {
            v878 = *(const llvm::BasicBlock **)(*(_QWORD *)(v901 + 40) + 56);
            if (v878 != (const llvm::BasicBlock *)v1011)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&__dst, (uint64_t)v878);
          }
        }
      }
      v880 = *(_QWORD *)(v880 + 8);
      if (v880 != v1015)
        continue;
      break;
    }
    LODWORD(v903) = HIDWORD(v1049);
    v904 = (HIDWORD(v1049) - v1050);
    if (HIDWORD(v1049) == v1050)
      goto LABEL_1261;
    __p[0] = v1065;
    __p[1] = (void *)0x400000000;
    v438 = v1024;
    if (v904 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v904, 8);
      LODWORD(v903) = HIDWORD(v1049);
    }
    if (v1048 == __dst)
      v903 = v903;
    else
      v903 = v1049;
    if ((_DWORD)v903)
    {
      v945 = 8 * v903;
      v946 = (uint64_t *)v1048;
      while ((unint64_t)*v946 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v946;
        v945 -= 8;
        if (!v945)
          goto LABEL_1385;
      }
    }
    else
    {
      v946 = (uint64_t *)v1048;
    }
    v947 = (unint64_t *)v1048 + v903;
    if (v946 != (uint64_t *)v947)
    {
      v948 = *v946;
LABEL_1379:
      v949 = llvm::ValueEnumerator::getValueID(v1016, v948);
      v950 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
        v950 = LODWORD(__p[1]);
      }
      *((_QWORD *)__p[0] + v950) = v949;
      ++LODWORD(__p[1]);
      v951 = (unint64_t *)(v946 + 1);
      while (v951 != v947)
      {
        v952 = *v951++;
        v948 = v952;
        if (v952 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v946 = (uint64_t *)(v951 - 1);
          goto LABEL_1379;
        }
      }
    }
LABEL_1385:
    sub_1C61D2D58(*(int **)v1024, 60, (uint64_t)__p);
    if (__p[0] != v1065)
      free(__p[0]);
    v876 = v1011;
LABEL_1262:
    v905 = *(_QWORD *)(v876 + 104);
    if (v905 && *(_DWORD *)(v905 + 12))
    {
      sub_1C50244C4(*(_QWORD *)v438, 0xEu, 4u);
      __p[0] = v1065;
      __p[1] = (void *)0x4000000000;
      v906 = *(_QWORD **)v905;
      v907 = *(unsigned int *)(v905 + 8);
      if ((_DWORD)v907)
      {
        for (j = *(_QWORD **)v905; !*j || *j == -8; ++j)
          ;
      }
      else
      {
        j = *(_QWORD **)v905;
      }
      v910 = &v906[v907];
      if (j != v910)
      {
        v911 = (_QWORD *)*j;
        do
        {
          v913 = (unsigned __int8 *)(v911 + 2);
          v912 = *v911;
          if (*v911)
          {
            LOBYTE(v914) = 1;
            v915 = (unsigned __int8 *)(v911 + 2);
            while (1)
            {
              v916 = *v915;
              v917 = (v916 - 48) >= 0xA && (v916 & 0xFFFFFFDF) - 65 >= 0x1A;
              v918 = !v917 || v916 == 46;
              v919 = v918 || v916 == 95;
              v920 = v919;
              v914 = (v914 & 1) != 0 && v920;
              if ((v916 & 0x80) != 0)
                break;
              ++v915;
              if (!--v912)
                goto LABEL_1296;
            }
            v914 = 0;
            v921 = 2;
          }
          else
          {
            v914 = 1;
LABEL_1296:
            v921 = v914 ^ 1;
          }
          v922 = llvm::ValueEnumerator::getValueID(v1016, v911[1]);
          v923 = LODWORD(__p[1]);
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
            v923 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v923) = v922;
          v924 = ++LODWORD(__p[1]);
          if (*(_BYTE *)(v911[1] + 16) == 22)
          {
            if (v914)
              v925 = 7;
            else
              v925 = 4;
            v926 = 2;
          }
          else
          {
            if (v921 == 1)
              v927 = 5;
            else
              v927 = 4;
            v926 = 1;
            if (v921)
              v925 = v927;
            else
              v925 = 6;
          }
          for (k = *v911; k; --k)
          {
            v929 = *v913;
            if (v924 >= HIDWORD(__p[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v924 + 1, 8);
              v924 = __p[1];
            }
            *((_QWORD *)__p[0] + v924) = v929;
            v924 = ++LODWORD(__p[1]);
            ++v913;
          }
          v438 = v1024;
          sub_1C5034740(*(llvm::raw_ostream **)v1024, v926, (uint64_t)__p, v925);
          LODWORD(__p[1]) = 0;
          do
          {
            v930 = (_QWORD *)j[1];
            ++j;
            v911 = v930;
            if (v930)
              v931 = v911 + 1 == 0;
            else
              v931 = 1;
          }
          while (v931);
        }
        while (j != v910);
      }
      sub_1C502481C(*(_QWORD *)v438);
      if (__p[0] != v1065)
        free(__p[0]);
      v431 = (llvm::ValueEnumerator *)v1016;
      v876 = v1011;
    }
    if ((v879 & 1) != 0)
    {
      sub_1C50244C4(*(_QWORD *)v438, 0x10u, 3u);
      __p[0] = v1065;
      __p[1] = (void *)0x4000000000;
      if ((*(_BYTE *)(v876 + 23) & 0x20) != 0)
      {
        sub_1C503DB70(v438, (uint64_t)__p, (_BYTE *)v876);
        sub_1C5034740(*(llvm::raw_ostream **)v438, 0xBu, (uint64_t)__p, 0);
        LODWORD(__p[1]) = 0;
      }
      v1061 = v1063;
      v1062 = 0x400000000;
      for (m = *(_QWORD *)(v876 + 80); m != v1015; m = *(_QWORD *)(m + 8))
      {
        v933 = m - 24;
        if (!m)
          v933 = 0;
        v934 = v933 + 40;
        for (n = *(_QWORD *)(v933 + 48); n != v934; n = *(_QWORD *)(n + 8))
        {
          if (n)
            v936 = (_BYTE *)(n - 24);
          else
            v936 = 0;
          LODWORD(v1062) = 0;
          llvm::Value::getAllMetadata(v936, (uint64_t)&v1061);
          if ((_DWORD)v1062)
          {
            InstructionID = llvm::ValueEnumerator::getInstructionID((uint64_t)v431, (uint64_t)v936);
            v938 = LODWORD(__p[1]);
            if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
              v938 = LODWORD(__p[1]);
            }
            *((_QWORD *)__p[0] + v938) = InstructionID;
            v939 = ++LODWORD(__p[1]);
            if ((_DWORD)v1062)
            {
              v940 = 0;
              v941 = 16 * v1062;
              do
              {
                v942 = *(unsigned int *)((char *)v1061 + v940);
                if (v939 >= HIDWORD(__p[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, v939 + 1, 8);
                  v939 = __p[1];
                }
                *((_QWORD *)__p[0] + v939) = v942;
                ++LODWORD(__p[1]);
                v1054 = *(std::__shared_weak_count **)((char *)v1061 + v940 + 8);
                v1052 = 0;
                if (sub_1C4E36534(v869, &v1054, &v1052))
                  v943 = HIDWORD(v1052->__shared_owners_) - 1;
                else
                  v943 = -1;
                v944 = LODWORD(__p[1]);
                if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v1065, LODWORD(__p[1]) + 1, 8);
                  v944 = LODWORD(__p[1]);
                }
                *((_QWORD *)__p[0] + v944) = v943;
                v939 = ++LODWORD(__p[1]);
                v940 += 16;
              }
              while (v941 != v940);
            }
            sub_1C5034740(*(llvm::raw_ostream **)v438, 0xBu, (uint64_t)__p, 0);
            LODWORD(__p[1]) = 0;
          }
        }
      }
      sub_1C502481C(*(_QWORD *)v438);
      if (v1061 != v1063)
        free(v1061);
      if (__p[0] != v1065)
        free(__p[0]);
      v876 = v1011;
    }
    if (*(_BYTE *)(v438 + 288))
      sub_1C50311D0((uint64_t *)v438, v876);
    llvm::ValueEnumerator::purgeFunction(v431);
    sub_1C502481C(*(_QWORD *)v438);
    if (v1048 != __dst)
      free(v1048);
    if (v1058 != v1060)
      free(v1058);
    v868 = v1010;
LABEL_1364:
    v868 = *(_QWORD *)(v868 + 8);
    if (v868 != v1009)
      continue;
    break;
  }
LABEL_1388:
  if (*(_QWORD *)(v438 + 496))
    sub_1C503136C((off_t *)v438);
  v953 = *(llvm::raw_ostream **)v438;
  v954 = *(_QWORD **)(*(_QWORD *)v438 + 8);
  v955 = *(_QWORD *)(**(_QWORD **)v438 + 8);
  if (v954)
    v956 = (*(uint64_t (**)(_QWORD))(*v954 + 80))(*(_QWORD *)(*(_QWORD *)v438 + 8)) + v954[4] - v954[2];
  else
    v956 = 0;
  sub_1C5030D94(*(_QWORD *)v438, *(_QWORD *)(v438 + 536), (((unint64_t)*((unsigned int *)v953 + 6) + 8 * (v956 + v955) - *(_QWORD *)(v438 + 664)) >> 5) + 1);
  sub_1C50244C4(*(_QWORD *)v438, 0xEu, 4u);
  v957 = (char *)operator new(0x228uLL);
  *(_QWORD *)v957 = &unk_1E813F300;
  *((_QWORD *)v957 + 1) = 0;
  *(_OWORD *)(v957 + 88) = 0u;
  *(_OWORD *)(v957 + 104) = 0u;
  *(_OWORD *)(v957 + 120) = 0u;
  *(_OWORD *)(v957 + 136) = 0u;
  *(_OWORD *)(v957 + 152) = 0u;
  *(_OWORD *)(v957 + 168) = 0u;
  *(_OWORD *)(v957 + 184) = 0u;
  *(_OWORD *)(v957 + 200) = 0u;
  *(_OWORD *)(v957 + 216) = 0u;
  *(_OWORD *)(v957 + 232) = 0u;
  *(_OWORD *)(v957 + 248) = 0u;
  *(_OWORD *)(v957 + 264) = 0u;
  *(_OWORD *)(v957 + 280) = 0u;
  *(_OWORD *)(v957 + 296) = 0u;
  *(_OWORD *)(v957 + 312) = 0u;
  *(_OWORD *)(v957 + 328) = 0u;
  *(_OWORD *)(v957 + 344) = 0u;
  *(_OWORD *)(v957 + 360) = 0u;
  *(_OWORD *)(v957 + 376) = 0u;
  *(_OWORD *)(v957 + 392) = 0u;
  *(_OWORD *)(v957 + 408) = 0u;
  *(_OWORD *)(v957 + 424) = 0u;
  *(_OWORD *)(v957 + 440) = 0u;
  *(_OWORD *)(v957 + 456) = 0u;
  *(_OWORD *)(v957 + 472) = 0u;
  *(_OWORD *)(v957 + 488) = 0u;
  *(_OWORD *)(v957 + 504) = 0u;
  *(_OWORD *)(v957 + 520) = 0u;
  *(_OWORD *)(v957 + 536) = 0u;
  *(_OWORD *)(v957 + 40) = xmmword_1C85F9E80;
  *((_QWORD *)v957 + 2) = 0;
  *((_QWORD *)v957 + 3) = v957 + 40;
  *(_OWORD *)(v957 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v957 + 72) = xmmword_1C85F6860;
  *((_QWORD *)v957 + 4) = 0x2000000003;
  v958 = *(llvm::raw_ostream **)v438;
  __p[0] = v957 + 24;
  __p[1] = v957;
  v959 = sub_1C50247B8((uint64_t)v958, (uint64_t)__p);
  v960 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v961 = (unint64_t *)((char *)__p[1] + 8);
    do
      v962 = __ldaxr(v961);
    while (__stlxr(v962 - 1, v961));
    if (!v962)
    {
      ((void (*)(std::__shared_weak_count *))v960->__on_zero_shared)(v960);
      std::__shared_weak_count::__release_weak(v960);
    }
  }
  v963 = *(_QWORD *)(v438 + 16);
  v964 = v963 + 24;
  v965 = *(_QWORD *)(v963 + 32);
  while (2)
  {
    if (v965 != v964)
    {
      if (v965)
        v966 = v965 - 56;
      else
        v966 = 0;
      if (v965 && *(_BYTE *)(v966 + 16) == 3)
      {
        if ((*(_DWORD *)(v966 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_1411;
      }
      else if (!*(_BYTE *)(v966 + 16) && *(_QWORD *)(v966 + 72) == v966 + 72 && (*(_BYTE *)(v966 + 34) & 0x80) == 0)
      {
        goto LABEL_1411;
      }
      v1058 = (void *)llvm::ValueEnumerator::getValueID((uint64_t)v431, v966);
      v1061 = (void *)v966;
      v1059 = ((sub_1C4DE6D10((uint64_t *)&v1056, &v1061)[1] - *(_QWORD *)(v438 + 664)) >> 5) + 1;
      sub_1C503748C(*(int **)v438, 3u, (uint64_t)&v1058, v959);
LABEL_1411:
      v965 = *(_QWORD *)(v965 + 8);
      continue;
    }
    break;
  }
  sub_1C502481C(*(_QWORD *)v438);
  if (*(_BYTE *)(v438 + 552))
  {
    llvm::SHA1::update((_DWORD *)(v438 + 568), (_BYTE *)(**(_QWORD **)(v438 + 544) + v1004), *(_QWORD *)(*(_QWORD *)(v438 + 544) + 8) - v1004);
    v1059 = 0;
    v1058 = 0;
    v1060[0] = 0;
    llvm::SHA1::result((llvm::SHA1 *)(v438 + 568), (uint64_t)&v1058);
    v968 = 0;
    do
    {
      *(_DWORD *)((char *)__p + v968) = bswap32(*(_DWORD *)((char *)&v1058 + v968));
      v455 = v968 >= 0x10;
      v968 += 4;
    }
    while (!v455);
    sub_1C61D2EC0(*(int **)v438, (uint64_t)__p);
    v969 = *(_QWORD *)(v438 + 560);
    if (v969)
    {
      *(_OWORD *)v969 = *(_OWORD *)__p;
      *(_DWORD *)(v969 + 16) = v1065[0];
    }
  }
  sub_1C502481C(*(_QWORD *)v438);
  return MEMORY[0x1CAA32FB4](v1056, 8);
}

void llvm::BitcodeWriter::writeIndex(uint64_t a1, llvm::ModuleSummaryIndex *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  int v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  llvm::raw_ostream *v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  llvm::raw_ostream *v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  llvm::raw_ostream *v42;
  int v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  char *v47;
  llvm::raw_ostream *v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t **i;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  BOOL v58;
  _QWORD *v59;
  llvm::ModuleSummaryIndex *v60;
  char v61;
  unsigned __int8 *v62;
  size_t v63;
  int v64;
  size_t v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  llvm::raw_ostream *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  char *v80;
  int64x2_t v81;
  llvm::raw_ostream *v82;
  int v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  char *v87;
  int64x2_t v88;
  llvm::raw_ostream *v89;
  int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char *v94;
  llvm::raw_ostream *v95;
  int v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  char *v100;
  llvm::raw_ostream *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  unint64_t v120;
  BOOL v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD **v130;
  _QWORD **v131;
  _QWORD *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  int v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  char v150;
  _QWORD *v151;
  uint64_t v152;
  unsigned int v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  _QWORD *v179;
  uint64_t v180;
  unsigned int v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  llvm::ModuleSummaryIndex *v215;
  uint64_t v216;
  const void *v217;
  size_t v218;
  int v219;
  uint64_t v220;
  unsigned __int8 *v221;
  int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  _QWORD *v229;
  char *v230;
  const void *v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  llvm::raw_ostream **v237;
  void **v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  _QWORD *v243;
  char v244;
  int v245;
  int *v246;
  size_t v247;
  size_t v248;
  int v249;
  size_t v250;
  _QWORD *j;
  unint64_t v252;
  uint64_t v253;
  char v254;
  BOOL v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  _QWORD *v265;
  char v266;
  int v267;
  int *v268;
  size_t v269;
  size_t v270;
  int v271;
  size_t v272;
  _QWORD *k;
  unint64_t v274;
  uint64_t v275;
  char v276;
  BOOL v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  llvm::raw_ostream *v294;
  uint64_t v295;
  llvm::ModuleSummaryIndex *v296;
  _QWORD *v297;
  uint64_t *v298;
  _QWORD *v299[2];
  int v300;
  uint64_t **v301;
  llvm::raw_ostream **v302;
  char **v303;
  __int128 *v304;
  void **v305;
  int *v306;
  llvm::raw_ostream ***v307;
  uint64_t **v308;
  int *v309;
  int *v310;
  uint64_t *v311;
  _QWORD *v312[2];
  llvm::raw_ostream **v313;
  void **p_Flags;
  uint64_t *v315;
  _QWORD *v316[2];
  char *v317;
  std::__shared_weak_count *v318;
  int v319;
  char *v320;
  std::__shared_weak_count *v321;
  char *v322;
  std::__shared_weak_count *v323;
  int v324;
  char *v325;
  std::__shared_weak_count *v326;
  int v327;
  char *v328;
  std::__shared_weak_count *v329;
  int v330;
  uint64_t *v331;
  void *Flags;
  uint64_t v333;
  _QWORD v334[64];
  __int128 v335;
  _BYTE v336[512];
  uint64_t v337[2];
  __int128 v338;
  uint64_t v339;
  uint64_t v340;

  v340 = *MEMORY[0x1E0C80C00];
  v294 = *(llvm::raw_ostream **)(a1 + 8);
  v295 = a1 + 16;
  v296 = a2;
  v297 = a3;
  v299[0] = 0;
  v299[1] = 0;
  v298 = (uint64_t *)v299;
  v300 = 0;
  if (a3)
  {
    v11 = a3 + 1;
    v12 = (_QWORD *)*a3;
    if ((_QWORD *)*a3 != a3 + 1)
    {
      do
      {
        v13 = v12[7];
        v14 = *((unsigned int *)v12 + 18);
        v15 = (unint64_t *)(v13 + 16 * v14);
        if (*((_DWORD *)v12 + 16))
        {
          if (*((_DWORD *)v12 + 18))
          {
            v16 = 16 * v14;
            v17 = (unint64_t *)v12[7];
            while (*v17 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v17 += 2;
              v16 -= 16;
              if (!v16)
                goto LABEL_19;
            }
          }
          else
          {
            v17 = (unint64_t *)v12[7];
          }
        }
        else
        {
LABEL_19:
          v17 = (unint64_t *)(v13 + 16 * v14);
        }
        v18 = (unint64_t *)(v13 + 16 * v14);
LABEL_22:
        while (v17 != v18)
        {
          v335 = *(_OWORD *)v17;
          v19 = ++v300;
          *((_DWORD *)sub_1C5031104(&v298, v335, (uint64_t **)&v335) + 10) = v19;
          v20 = v17[1];
          if (v20)
            v21 = *(_DWORD *)(v20 + 8) == 0;
          else
            v21 = 0;
          if (v21)
          {
            v23 = *(_QWORD *)(v20 + 64);
            v22 = *(_QWORD *)(v20 + 72);
            *(_QWORD *)&v335 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
            *((_QWORD *)&v335 + 1) = v22;
            v24 = ++v300;
            *((_DWORD *)sub_1C5031104(&v298, v335, (uint64_t **)&v335) + 10) = v24;
          }
          v25 = v17 + 2;
          while (v25 != v15)
          {
            v26 = *v25;
            v25 += 2;
            if (v26 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v17 = v25 - 2;
              goto LABEL_22;
            }
          }
          v17 = v15;
        }
        v27 = (_QWORD *)v12[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v12[2];
            v21 = *v28 == (_QWORD)v12;
            v12 = v28;
          }
          while (!v21);
        }
        v12 = v28;
      }
      while (v28 != v11);
    }
  }
  else
  {
    v4 = (_QWORD *)((char *)a2 + 8);
    v3 = *(_QWORD **)a2;
    if (*(llvm::ModuleSummaryIndex **)a2 != (llvm::ModuleSummaryIndex *)((char *)a2 + 8))
    {
      do
      {
        v5 = (uint64_t *)v3[7];
        v6 = (uint64_t *)v3[8];
        while (v5 != v6)
        {
          v7 = *v5++;
          *(_QWORD *)&v335 = v3[4];
          *((_QWORD *)&v335 + 1) = v7;
          v8 = ++v300;
          *((_DWORD *)sub_1C5031104(&v298, v335, (uint64_t **)&v335) + 10) = v8;
        }
        v9 = (_QWORD *)v3[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v3[2];
            v21 = *v10 == (_QWORD)v3;
            v3 = v10;
          }
          while (!v21);
        }
        v3 = v10;
      }
      while (v10 != v4);
    }
  }
  sub_1C50244C4((uint64_t)v294, 8u, 3u);
  Flags = (void *)2;
  *(_QWORD *)&v335 = &Flags;
  *((_QWORD *)&v335 + 1) = 1;
  sub_1C5033BDC(v294, 1u, &v335);
  sub_1C50244C4((uint64_t)v294, 0x13u, 3u);
  v29 = (char *)operator new(0x228uLL);
  *(_QWORD *)v29 = &unk_1E813F300;
  *((_QWORD *)v29 + 1) = 0;
  *(_OWORD *)(v29 + 104) = 0u;
  *(_OWORD *)(v29 + 120) = 0u;
  *(_OWORD *)(v29 + 136) = 0u;
  *(_OWORD *)(v29 + 152) = 0u;
  *(_OWORD *)(v29 + 168) = 0u;
  *(_OWORD *)(v29 + 184) = 0u;
  *(_OWORD *)(v29 + 200) = 0u;
  *(_OWORD *)(v29 + 216) = 0u;
  *(_OWORD *)(v29 + 232) = 0u;
  *(_OWORD *)(v29 + 248) = 0u;
  *(_OWORD *)(v29 + 264) = 0u;
  *(_OWORD *)(v29 + 280) = 0u;
  *(_OWORD *)(v29 + 296) = 0u;
  *(_OWORD *)(v29 + 312) = 0u;
  *(_OWORD *)(v29 + 328) = 0u;
  *(_OWORD *)(v29 + 344) = 0u;
  *(_OWORD *)(v29 + 360) = 0u;
  *(_OWORD *)(v29 + 376) = 0u;
  *(_OWORD *)(v29 + 392) = 0u;
  *(_OWORD *)(v29 + 408) = 0u;
  *(_OWORD *)(v29 + 424) = 0u;
  *(_OWORD *)(v29 + 440) = 0u;
  *(_OWORD *)(v29 + 456) = 0u;
  *(_OWORD *)(v29 + 472) = 0u;
  *(_OWORD *)(v29 + 488) = 0u;
  *(_OWORD *)(v29 + 504) = 0u;
  *(_OWORD *)(v29 + 520) = 0u;
  *(_OWORD *)(v29 + 536) = 0u;
  *(_OWORD *)(v29 + 40) = xmmword_1C85F9DC0;
  *((_QWORD *)v29 + 2) = 0;
  *((_QWORD *)v29 + 3) = v29 + 40;
  *(_OWORD *)(v29 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v29 + 72) = xmmword_1C85F9DD0;
  v30 = v294;
  *(_OWORD *)(v29 + 88) = xmmword_1C85F6850;
  *((_QWORD *)v29 + 4) = 0x2000000004;
  LODWORD(v311) = 0;
  *(_QWORD *)&v338 = v29 + 24;
  *((_QWORD *)&v338 + 1) = v29;
  v31 = sub_1C50247B8((uint64_t)v30, (uint64_t)&v338);
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v338 + 1);
  if (*((_QWORD *)&v338 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v338 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  LODWORD(v311) = v31;
  v35 = (char *)operator new(0x228uLL);
  *(_QWORD *)v35 = &unk_1E813F300;
  *((_QWORD *)v35 + 1) = 0;
  *(_OWORD *)(v35 + 104) = 0u;
  *(_OWORD *)(v35 + 120) = 0u;
  *(_OWORD *)(v35 + 136) = 0u;
  *(_OWORD *)(v35 + 152) = 0u;
  *(_OWORD *)(v35 + 168) = 0u;
  *(_OWORD *)(v35 + 184) = 0u;
  *(_OWORD *)(v35 + 200) = 0u;
  *(_OWORD *)(v35 + 216) = 0u;
  *(_OWORD *)(v35 + 232) = 0u;
  *(_OWORD *)(v35 + 248) = 0u;
  *(_OWORD *)(v35 + 264) = 0u;
  *(_OWORD *)(v35 + 280) = 0u;
  *(_OWORD *)(v35 + 296) = 0u;
  *(_OWORD *)(v35 + 312) = 0u;
  *(_OWORD *)(v35 + 328) = 0u;
  *(_OWORD *)(v35 + 344) = 0u;
  *(_OWORD *)(v35 + 360) = 0u;
  *(_OWORD *)(v35 + 376) = 0u;
  *(_OWORD *)(v35 + 392) = 0u;
  *(_OWORD *)(v35 + 408) = 0u;
  *(_OWORD *)(v35 + 424) = 0u;
  *(_OWORD *)(v35 + 440) = 0u;
  *(_OWORD *)(v35 + 456) = 0u;
  *(_OWORD *)(v35 + 472) = 0u;
  *(_OWORD *)(v35 + 488) = 0u;
  *(_OWORD *)(v35 + 504) = 0u;
  *(_OWORD *)(v35 + 520) = 0u;
  *(_OWORD *)(v35 + 536) = 0u;
  *(_OWORD *)(v35 + 40) = xmmword_1C85F9DC0;
  *((_QWORD *)v35 + 2) = 0;
  *((_QWORD *)v35 + 3) = v35 + 40;
  *(_OWORD *)(v35 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v35 + 72) = xmmword_1C85F9DD0;
  v36 = v294;
  *(_OWORD *)(v35 + 88) = xmmword_1C85F6870;
  *((_QWORD *)v35 + 4) = 0x2000000004;
  LODWORD(v337[0]) = 0;
  v301 = (uint64_t **)(v35 + 24);
  v302 = (llvm::raw_ostream **)v35;
  v37 = sub_1C50247B8((uint64_t)v36, (uint64_t)&v301);
  v38 = (std::__shared_weak_count *)v302;
  if (v302)
  {
    v39 = (unint64_t *)(v302 + 1);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  LODWORD(v337[0]) = v37;
  v41 = (char *)operator new(0x228uLL);
  *(_QWORD *)v41 = &unk_1E813F300;
  *((_QWORD *)v41 + 1) = 0;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_OWORD *)(v41 + 136) = 0u;
  *(_OWORD *)(v41 + 152) = 0u;
  *(_OWORD *)(v41 + 168) = 0u;
  *(_OWORD *)(v41 + 184) = 0u;
  *(_OWORD *)(v41 + 200) = 0u;
  *(_OWORD *)(v41 + 216) = 0u;
  *(_OWORD *)(v41 + 232) = 0u;
  *(_OWORD *)(v41 + 248) = 0u;
  *(_OWORD *)(v41 + 264) = 0u;
  *(_OWORD *)(v41 + 280) = 0u;
  *(_OWORD *)(v41 + 296) = 0u;
  *(_OWORD *)(v41 + 312) = 0u;
  *(_OWORD *)(v41 + 328) = 0u;
  *(_OWORD *)(v41 + 344) = 0u;
  *(_OWORD *)(v41 + 360) = 0u;
  *(_OWORD *)(v41 + 376) = 0u;
  *(_OWORD *)(v41 + 392) = 0u;
  *(_OWORD *)(v41 + 408) = 0u;
  *(_OWORD *)(v41 + 424) = 0u;
  *(_OWORD *)(v41 + 440) = 0u;
  *(_OWORD *)(v41 + 456) = 0u;
  *(_OWORD *)(v41 + 472) = 0u;
  *(_OWORD *)(v41 + 488) = 0u;
  *(_OWORD *)(v41 + 504) = 0u;
  *(_OWORD *)(v41 + 520) = 0u;
  *(_OWORD *)(v41 + 536) = 0u;
  *(_OWORD *)(v41 + 40) = xmmword_1C85F9DC0;
  *((_QWORD *)v41 + 2) = 0;
  *((_QWORD *)v41 + 3) = v41 + 40;
  *(_OWORD *)(v41 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v41 + 72) = xmmword_1C85F9DD0;
  v42 = v294;
  *(_OWORD *)(v41 + 88) = xmmword_1C6464ED0;
  *((_QWORD *)v41 + 4) = 0x2000000004;
  LODWORD(v328) = 0;
  v317 = v41 + 24;
  v318 = (std::__shared_weak_count *)v41;
  v43 = sub_1C50247B8((uint64_t)v42, (uint64_t)&v317);
  v44 = v318;
  if (v318)
  {
    p_shared_owners = (unint64_t *)&v318->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  LODWORD(v328) = v43;
  v47 = (char *)operator new(0x228uLL);
  *(_QWORD *)v47 = &unk_1E813F300;
  *((_QWORD *)v47 + 1) = 0;
  *(_OWORD *)(v47 + 136) = 0u;
  *(_OWORD *)(v47 + 152) = 0u;
  *(_OWORD *)(v47 + 168) = 0u;
  *(_OWORD *)(v47 + 184) = 0u;
  *(_OWORD *)(v47 + 200) = 0u;
  *(_OWORD *)(v47 + 216) = 0u;
  *(_OWORD *)(v47 + 232) = 0u;
  *(_OWORD *)(v47 + 248) = 0u;
  *(_OWORD *)(v47 + 264) = 0u;
  *(_OWORD *)(v47 + 280) = 0u;
  *(_OWORD *)(v47 + 296) = 0u;
  *(_OWORD *)(v47 + 312) = 0u;
  *(_OWORD *)(v47 + 328) = 0u;
  *(_OWORD *)(v47 + 344) = 0u;
  *(_OWORD *)(v47 + 360) = 0u;
  *(_OWORD *)(v47 + 376) = 0u;
  *(_OWORD *)(v47 + 392) = 0u;
  *(_OWORD *)(v47 + 408) = 0u;
  *(_OWORD *)(v47 + 424) = 0u;
  *(_OWORD *)(v47 + 440) = 0u;
  *(_OWORD *)(v47 + 456) = 0u;
  *(_OWORD *)(v47 + 472) = 0u;
  *(_OWORD *)(v47 + 488) = 0u;
  *(_OWORD *)(v47 + 504) = 0u;
  *(_OWORD *)(v47 + 520) = 0u;
  *(_OWORD *)(v47 + 536) = 0u;
  *(_OWORD *)(v47 + 40) = xmmword_1C85F9DE0;
  *((_QWORD *)v47 + 2) = 0;
  *((_QWORD *)v47 + 3) = v47 + 40;
  *(_OWORD *)(v47 + 56) = xmmword_1C85F9F80;
  *(_OWORD *)(v47 + 72) = xmmword_1C85F9F80;
  *(_OWORD *)(v47 + 88) = xmmword_1C85F9F80;
  *(_OWORD *)(v47 + 104) = xmmword_1C85F9F80;
  v48 = v294;
  *(_OWORD *)(v47 + 120) = xmmword_1C85F9F80;
  *((_QWORD *)v47 + 4) = 0x2000000006;
  LODWORD(v325) = 0;
  v315 = (uint64_t *)(v47 + 24);
  v316[0] = v47;
  v49 = sub_1C50247B8((uint64_t)v48, (uint64_t)&v315);
  v50 = (std::__shared_weak_count *)v316[0];
  if (v316[0])
  {
    v51 = v316[0] + 1;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  LODWORD(v325) = v49;
  *(_QWORD *)&v335 = v336;
  *((_QWORD *)&v335 + 1) = 0x4000000000;
  Flags = &v311;
  v333 = (uint64_t)&v328;
  v334[0] = v337;
  v334[1] = &v335;
  v334[2] = &v294;
  v334[3] = &v325;
  if (v297)
  {
    v59 = (_QWORD *)*v297;
    if ((_QWORD *)*v297 != v297 + 1)
    {
      v291 = v297 + 1;
      do
      {
        v60 = v296;
        v61 = *((_BYTE *)v59 + 55);
        if (v61 >= 0)
          v62 = (unsigned __int8 *)(v59 + 4);
        else
          v62 = (unsigned __int8 *)v59[4];
        if (v61 >= 0)
          v63 = v61 & 0x7F;
        else
          v63 = v59[5];
        v293 = *((unsigned int *)v296 + 8);
        if ((_DWORD)v293)
        {
          v64 = 0;
          if (v63)
          {
            v65 = v63;
            v66 = v62;
            do
            {
              v67 = *v66++;
              v64 = 33 * v64 + v67;
              --v65;
            }
            while (v65);
          }
          v68 = *((_QWORD *)v296 + 3);
          v69 = 1;
          v70 = v64;
          while (1)
          {
            v71 = v70 & (v293 - 1);
            v72 = *(_QWORD **)(v68 + 8 * v71);
            if (v72 != (_QWORD *)-8)
            {
              if (!v72)
                goto LABEL_95;
              if (*(_DWORD *)(v68 + 8 * v293 + 8 + 4 * v71) == v64
                && v63 == *v72
                && (!v63 || !memcmp(v62, (char *)v72 + *((unsigned int *)v60 + 11), v63)))
              {
                break;
              }
            }
            v70 = v69 + v71;
            ++v69;
          }
          if ((_DWORD)v71 != -1 && (int)v71 != v293)
            sub_1C504128C((uint64_t)&Flags, *(uint64_t **)(v68 + 8 * (int)v71));
        }
LABEL_95:
        v73 = (_QWORD *)v59[1];
        if (v73)
        {
          do
          {
            v74 = v73;
            v73 = (_QWORD *)*v73;
          }
          while (v73);
        }
        else
        {
          do
          {
            v74 = (_QWORD *)v59[2];
            v21 = *v74 == (_QWORD)v59;
            v59 = v74;
          }
          while (!v21);
        }
        v59 = v74;
      }
      while (v74 != v291);
    }
  }
  else
  {
    v53 = *((unsigned int *)v296 + 8);
    if ((_DWORD)v53)
    {
      for (i = (uint64_t **)*((_QWORD *)v296 + 3); !*i || *i + 1 == 0; ++i)
        ;
    }
    else
    {
      i = (uint64_t **)*((_QWORD *)v296 + 3);
    }
    v55 = *((_QWORD *)v296 + 3) + 8 * v53;
    if (i != (uint64_t **)v55)
    {
      v56 = *i;
      do
      {
        sub_1C504128C((uint64_t)&Flags, v56);
        do
        {
          v57 = i[1];
          ++i;
          v56 = v57;
          if (v57)
            v58 = v56 + 1 == 0;
          else
            v58 = 1;
        }
        while (v58);
      }
      while (i != (uint64_t **)v55);
    }
  }
  sub_1C502481C((off_t)v294);
  if ((_BYTE *)v335 != v336)
    free((void *)v335);
  sub_1C50244C4((uint64_t)v294, 0x14u, 3u);
  Flags = (void *)9;
  *(_QWORD *)&v335 = &Flags;
  *((_QWORD *)&v335 + 1) = 1;
  sub_1C5033BDC(v294, 0xAu, &v335);
  v75 = v294;
  Flags = (void *)llvm::ModuleSummaryIndex::getFlags(v296);
  *(_QWORD *)&v335 = &Flags;
  *((_QWORD *)&v335 + 1) = 1;
  sub_1C5033BDC(v75, 0x14u, &v335);
  v76 = v298;
  if (v298 != (uint64_t *)v299)
  {
    do
    {
      v77 = v76[4];
      Flags = (void *)*((unsigned int *)v76 + 10);
      v333 = v77;
      *(_QWORD *)&v335 = &Flags;
      *((_QWORD *)&v335 + 1) = 2;
      sub_1C5033BDC(v294, 0x10u, &v335);
      v78 = (uint64_t *)v76[1];
      if (v78)
      {
        do
        {
          v79 = v78;
          v78 = (uint64_t *)*v78;
        }
        while (v78);
      }
      else
      {
        do
        {
          v79 = (uint64_t *)v76[2];
          v21 = *v79 == (_QWORD)v76;
          v76 = v79;
        }
        while (!v21);
      }
      v76 = v79;
    }
    while (v79 != (uint64_t *)v299);
  }
  v80 = (char *)operator new(0x228uLL);
  *(_QWORD *)v80 = &unk_1E813F300;
  *((_QWORD *)v80 + 1) = 0;
  *(_OWORD *)(v80 + 232) = 0u;
  *(_OWORD *)(v80 + 248) = 0u;
  *(_OWORD *)(v80 + 264) = 0u;
  *(_OWORD *)(v80 + 280) = 0u;
  *(_OWORD *)(v80 + 296) = 0u;
  *(_OWORD *)(v80 + 312) = 0u;
  *(_OWORD *)(v80 + 328) = 0u;
  *(_OWORD *)(v80 + 344) = 0u;
  *(_OWORD *)(v80 + 360) = 0u;
  *(_OWORD *)(v80 + 376) = 0u;
  *(_OWORD *)(v80 + 392) = 0u;
  *(_OWORD *)(v80 + 408) = 0u;
  *(_OWORD *)(v80 + 424) = 0u;
  *(_OWORD *)(v80 + 440) = 0u;
  *(_OWORD *)(v80 + 456) = 0u;
  *(_OWORD *)(v80 + 472) = 0u;
  *(_OWORD *)(v80 + 488) = 0u;
  *(_OWORD *)(v80 + 504) = 0u;
  *(_OWORD *)(v80 + 520) = 0u;
  *(_OWORD *)(v80 + 536) = 0u;
  *(_OWORD *)(v80 + 40) = xmmword_1C85F9E00;
  *((_QWORD *)v80 + 2) = 0;
  *((_QWORD *)v80 + 3) = v80 + 40;
  *(_OWORD *)(v80 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v80 + 72) = xmmword_1C85F6860;
  *(_OWORD *)(v80 + 88) = xmmword_1C85F6930;
  *(_OWORD *)(v80 + 104) = xmmword_1C85F6860;
  v81 = vdupq_n_s64(4uLL);
  *(int64x2_t *)(v80 + 120) = v81;
  *(_OWORD *)(v80 + 136) = xmmword_1C85F6860;
  *(int64x2_t *)(v80 + 152) = v81;
  *(int64x2_t *)(v80 + 168) = v81;
  *(int64x2_t *)(v80 + 184) = v81;
  *(_OWORD *)(v80 + 200) = xmmword_1C85F9DD0;
  v82 = v294;
  *(_OWORD *)(v80 + 216) = xmmword_1C85F6860;
  *((_QWORD *)v80 + 4) = 0x200000000CLL;
  v330 = 0;
  v328 = v80 + 24;
  v329 = (std::__shared_weak_count *)v80;
  v83 = sub_1C50247B8((uint64_t)v82, (uint64_t)&v328);
  v84 = v329;
  if (v329)
  {
    v85 = (unint64_t *)&v329->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v330 = v83;
  v87 = (char *)operator new(0x228uLL);
  *(_QWORD *)v87 = &unk_1E813F300;
  *((_QWORD *)v87 + 1) = 0;
  *(_OWORD *)(v87 + 232) = 0u;
  *(_OWORD *)(v87 + 248) = 0u;
  *(_OWORD *)(v87 + 264) = 0u;
  *(_OWORD *)(v87 + 280) = 0u;
  *(_OWORD *)(v87 + 296) = 0u;
  *(_OWORD *)(v87 + 312) = 0u;
  *(_OWORD *)(v87 + 328) = 0u;
  *(_OWORD *)(v87 + 344) = 0u;
  *(_OWORD *)(v87 + 360) = 0u;
  *(_OWORD *)(v87 + 376) = 0u;
  *(_OWORD *)(v87 + 392) = 0u;
  *(_OWORD *)(v87 + 408) = 0u;
  *(_OWORD *)(v87 + 424) = 0u;
  *(_OWORD *)(v87 + 440) = 0u;
  *(_OWORD *)(v87 + 456) = 0u;
  *(_OWORD *)(v87 + 472) = 0u;
  *(_OWORD *)(v87 + 488) = 0u;
  *(_OWORD *)(v87 + 504) = 0u;
  *(_OWORD *)(v87 + 520) = 0u;
  *(_OWORD *)(v87 + 536) = 0u;
  *(_OWORD *)(v87 + 40) = xmmword_1C85F9FB0;
  *((_QWORD *)v87 + 2) = 0;
  *((_QWORD *)v87 + 3) = v87 + 40;
  *(_OWORD *)(v87 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v87 + 72) = xmmword_1C85F6860;
  *(_OWORD *)(v87 + 88) = xmmword_1C85F6930;
  *(_OWORD *)(v87 + 104) = xmmword_1C85F6860;
  v88 = vdupq_n_s64(4uLL);
  *(int64x2_t *)(v87 + 120) = v88;
  *(_OWORD *)(v87 + 136) = xmmword_1C85F6860;
  *(int64x2_t *)(v87 + 152) = v88;
  *(int64x2_t *)(v87 + 168) = v88;
  *(int64x2_t *)(v87 + 184) = v88;
  *(_OWORD *)(v87 + 200) = xmmword_1C85F9DD0;
  v89 = v294;
  *(_OWORD *)(v87 + 216) = xmmword_1C85F6860;
  *((_QWORD *)v87 + 4) = 0x200000000CLL;
  v327 = 0;
  v325 = v87 + 24;
  v326 = (std::__shared_weak_count *)v87;
  v90 = sub_1C50247B8((uint64_t)v89, (uint64_t)&v325);
  v91 = v326;
  if (v326)
  {
    v92 = (unint64_t *)&v326->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v327 = v90;
  v94 = (char *)operator new(0x228uLL);
  *(_QWORD *)v94 = &unk_1E813F300;
  *((_QWORD *)v94 + 1) = 0;
  *(_OWORD *)(v94 + 136) = 0u;
  *(_OWORD *)(v94 + 152) = 0u;
  *(_OWORD *)(v94 + 168) = 0u;
  *(_OWORD *)(v94 + 184) = 0u;
  *(_OWORD *)(v94 + 200) = 0u;
  *(_OWORD *)(v94 + 216) = 0u;
  *(_OWORD *)(v94 + 232) = 0u;
  *(_OWORD *)(v94 + 248) = 0u;
  *(_OWORD *)(v94 + 264) = 0u;
  *(_OWORD *)(v94 + 280) = 0u;
  *(_OWORD *)(v94 + 296) = 0u;
  *(_OWORD *)(v94 + 312) = 0u;
  *(_OWORD *)(v94 + 328) = 0u;
  *(_OWORD *)(v94 + 344) = 0u;
  *(_OWORD *)(v94 + 360) = 0u;
  *(_OWORD *)(v94 + 376) = 0u;
  *(_OWORD *)(v94 + 392) = 0u;
  *(_OWORD *)(v94 + 408) = 0u;
  *(_OWORD *)(v94 + 424) = 0u;
  *(_OWORD *)(v94 + 440) = 0u;
  *(_OWORD *)(v94 + 456) = 0u;
  *(_OWORD *)(v94 + 472) = 0u;
  *(_OWORD *)(v94 + 488) = 0u;
  *(_OWORD *)(v94 + 504) = 0u;
  *(_OWORD *)(v94 + 520) = 0u;
  *(_OWORD *)(v94 + 536) = 0u;
  *(_OWORD *)(v94 + 40) = xmmword_1C85F9FC0;
  *((_QWORD *)v94 + 2) = 0;
  *((_QWORD *)v94 + 3) = v94 + 40;
  *(_OWORD *)(v94 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v94 + 72) = xmmword_1C85F6860;
  *(_OWORD *)(v94 + 88) = xmmword_1C85F6930;
  *(_OWORD *)(v94 + 104) = xmmword_1C85F9DD0;
  v95 = v294;
  *(_OWORD *)(v94 + 120) = xmmword_1C85F6860;
  *((_QWORD *)v94 + 4) = 0x2000000006;
  v324 = 0;
  v322 = v94 + 24;
  v323 = (std::__shared_weak_count *)v94;
  v96 = sub_1C50247B8((uint64_t)v95, (uint64_t)&v322);
  v97 = v323;
  if (v323)
  {
    v98 = (unint64_t *)&v323->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v324 = v96;
  v100 = (char *)operator new(0x228uLL);
  *(_QWORD *)v100 = &unk_1E813F300;
  *((_QWORD *)v100 + 1) = 0;
  *(_OWORD *)(v100 + 120) = 0u;
  *(_OWORD *)(v100 + 136) = 0u;
  *(_OWORD *)(v100 + 152) = 0u;
  *(_OWORD *)(v100 + 168) = 0u;
  *(_OWORD *)(v100 + 184) = 0u;
  *(_OWORD *)(v100 + 200) = 0u;
  *(_OWORD *)(v100 + 216) = 0u;
  *(_OWORD *)(v100 + 232) = 0u;
  *(_OWORD *)(v100 + 248) = 0u;
  *(_OWORD *)(v100 + 264) = 0u;
  *(_OWORD *)(v100 + 280) = 0u;
  *(_OWORD *)(v100 + 296) = 0u;
  *(_OWORD *)(v100 + 312) = 0u;
  *(_OWORD *)(v100 + 328) = 0u;
  *(_OWORD *)(v100 + 344) = 0u;
  *(_OWORD *)(v100 + 360) = 0u;
  *(_OWORD *)(v100 + 376) = 0u;
  *(_OWORD *)(v100 + 392) = 0u;
  *(_OWORD *)(v100 + 408) = 0u;
  *(_OWORD *)(v100 + 424) = 0u;
  *(_OWORD *)(v100 + 440) = 0u;
  *(_OWORD *)(v100 + 456) = 0u;
  *(_OWORD *)(v100 + 472) = 0u;
  *(_OWORD *)(v100 + 488) = 0u;
  *(_OWORD *)(v100 + 504) = 0u;
  *(_OWORD *)(v100 + 520) = 0u;
  *(_OWORD *)(v100 + 536) = 0u;
  *(_OWORD *)(v100 + 40) = xmmword_1C85F9EC0;
  *((_QWORD *)v100 + 2) = 0;
  *((_QWORD *)v100 + 3) = v100 + 40;
  *(_OWORD *)(v100 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v100 + 72) = xmmword_1C85F6860;
  *(_OWORD *)(v100 + 88) = xmmword_1C85F6930;
  v101 = v294;
  *(_OWORD *)(v100 + 104) = xmmword_1C85F6860;
  *((_QWORD *)v100 + 4) = 0x2000000005;
  v320 = v100 + 24;
  v321 = (std::__shared_weak_count *)v100;
  v289 = sub_1C50247B8((uint64_t)v101, (uint64_t)&v320);
  v102 = v321;
  if (v321)
  {
    v103 = (unint64_t *)&v321->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  *(_QWORD *)&v335 = v336;
  *((_QWORD *)&v335 + 1) = 0x4000000000;
  v317 = 0;
  v318 = 0;
  v319 = 0;
  Flags = v334;
  v333 = 0x4000000000;
  v316[0] = 0;
  v316[1] = 0;
  p_Flags = &Flags;
  v315 = (uint64_t *)v316;
  v312[1] = 0;
  v313 = &v294;
  v311 = (uint64_t *)v312;
  v312[0] = 0;
  v301 = &v311;
  v302 = &v294;
  v303 = &v317;
  v304 = &v335;
  v305 = &Flags;
  v306 = &v324;
  v307 = &v313;
  v308 = &v315;
  v309 = &v327;
  v310 = &v330;
  if (v297)
  {
    v112 = v297 + 1;
    v113 = (_QWORD *)*v297;
    if ((_QWORD *)*v297 != v297 + 1)
    {
      do
      {
        v114 = v113[7];
        v115 = *((unsigned int *)v113 + 18);
        v116 = (unint64_t *)(v114 + 16 * v115);
        if (*((_DWORD *)v113 + 16))
        {
          if (*((_DWORD *)v113 + 18))
          {
            v117 = 16 * v115;
            v118 = (unint64_t *)v113[7];
            while (*v118 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v118 += 2;
              v117 -= 16;
              if (!v117)
                goto LABEL_148;
            }
          }
          else
          {
            v118 = (unint64_t *)v113[7];
          }
        }
        else
        {
LABEL_148:
          v118 = (unint64_t *)(v114 + 16 * v115);
        }
        v119 = (unint64_t *)(v114 + 16 * v115);
LABEL_151:
        while (v118 != v119)
        {
          sub_1C50415A8((uint64_t)&v301, (uint64_t *)*v118, v118[1]);
          v120 = v118[1];
          if (v120)
            v121 = *(_DWORD *)(v120 + 8) == 0;
          else
            v121 = 0;
          if (v121)
          {
            v124 = *(_QWORD *)(v120 + 72);
            *(_QWORD *)&v338 = *(_QWORD *)(*(_QWORD *)(v120 + 64) & 0xFFFFFFFFFFFFFFF8);
            *((_QWORD *)&v338 + 1) = v124;
            v337[0] = v124;
            sub_1C47BC21C(&v311, (unint64_t *)&v338, (uint64_t **)&v338);
            v125 = *(uint64_t **)(v124 + 40);
            v126 = *(_QWORD *)(v124 + 48) - (_QWORD)v125;
            if (v126)
            {
              v127 = 8 * (v126 >> 3);
              do
              {
                v128 = *v125++;
                v331 = *(uint64_t **)(v128 & 0xFFFFFFFFFFFFFFF8);
                sub_1C47BC21C(&v311, (unint64_t *)&v331, &v331);
                v127 -= 8;
              }
              while (v127);
            }
            v129 = v299[0];
            if (!v299[0])
              goto LABEL_174;
            v130 = v299;
            do
            {
              v131 = v130;
              v132 = v129;
              v133 = v129[4];
              v134 = v129 + 1;
              if (v133 >= (unint64_t)v338)
              {
                v134 = v132;
                v130 = (_QWORD **)v132;
              }
              v129 = (_QWORD *)*v134;
            }
            while (v129);
            if (v130 != v299
              && (v133 >= (unint64_t)v338 ? (v135 = v132) : (v135 = v131), v135[4] <= (unint64_t)v338))
            {
              if (v133 >= (unint64_t)v338)
                v137 = v132;
              else
                v137 = v131;
              v136 = *((_DWORD *)v137 + 10);
            }
            else
            {
LABEL_174:
              v136 = 0;
            }
            *((_DWORD *)sub_1C6144C70((uint64_t)&v317, v337) + 2) = v136;
          }
          v122 = v118 + 2;
          while (v122 != v116)
          {
            v123 = *v122;
            v122 += 2;
            if (v123 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v118 = v122 - 2;
              goto LABEL_151;
            }
          }
          v118 = v116;
        }
        v138 = (_QWORD *)v113[1];
        if (v138)
        {
          do
          {
            v139 = v138;
            v138 = (_QWORD *)*v138;
          }
          while (v138);
        }
        else
        {
          do
          {
            v139 = (_QWORD *)v113[2];
            v21 = *v139 == (_QWORD)v113;
            v113 = v139;
          }
          while (!v21);
        }
        v113 = v139;
      }
      while (v139 != v112);
    }
  }
  else
  {
    v106 = (char *)v296 + 8;
    v105 = *(char **)v296;
    if (*(llvm::ModuleSummaryIndex **)v296 != (llvm::ModuleSummaryIndex *)((char *)v296 + 8))
    {
      do
      {
        v107 = (uint64_t *)*((_QWORD *)v105 + 7);
        v108 = (uint64_t *)*((_QWORD *)v105 + 8);
        while (v107 != v108)
        {
          v109 = *v107++;
          sub_1C50415A8((uint64_t)&v301, *((uint64_t **)v105 + 4), v109);
        }
        v110 = (char *)*((_QWORD *)v105 + 1);
        if (v110)
        {
          do
          {
            v111 = v110;
            v110 = *(char **)v110;
          }
          while (v110);
        }
        else
        {
          do
          {
            v111 = (char *)*((_QWORD *)v105 + 2);
            v21 = *(_QWORD *)v111 == (_QWORD)v105;
            v105 = v111;
          }
          while (!v21);
        }
        v105 = v111;
      }
      while (v111 != v106);
    }
  }
  if (DWORD2(v335))
  {
    v210 = (uint64_t *)v335;
    v288 = v335 + 8 * DWORD2(v335);
    do
    {
      v211 = *v210;
      *(_QWORD *)&v338 = *v210;
      v212 = *((unsigned int *)sub_1C6144C70((uint64_t)&v317, (uint64_t *)&v338) + 2);
      v213 = v333;
      if (v333 >= (unint64_t)HIDWORD(v333))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v333 + 1, 8);
        v213 = v333;
      }
      *((_QWORD *)Flags + v213) = v212;
      v214 = (v333 + 1);
      LODWORD(v333) = v333 + 1;
      v215 = v296;
      v216 = *((unsigned int *)v296 + 8);
      if ((_DWORD)v216)
      {
        v217 = *(const void **)(v211 + 24);
        v218 = *(_QWORD *)(v211 + 32);
        v292 = v211;
        v290 = v214;
        v219 = 0;
        if (v218)
        {
          v220 = *(_QWORD *)(v211 + 32);
          v221 = *(unsigned __int8 **)(v211 + 24);
          do
          {
            v222 = *v221++;
            v219 = 33 * v219 + v222;
            --v220;
          }
          while (v220);
        }
        v223 = v216 - 1;
        v224 = *((_QWORD *)v296 + 3);
        v287 = *((unsigned int *)v296 + 8);
        v225 = v224 + 8 * v216 + 8;
        v226 = 1;
        v227 = v219;
        while (1)
        {
          v228 = v227 & v223;
          v229 = *(_QWORD **)(v224 + 8 * v228);
          if (v229 != (_QWORD *)-8)
          {
            if (!v229)
              goto LABEL_300;
            if (*(_DWORD *)(v225 + 4 * v228) == v219 && v218 == *v229)
            {
              if (!v218)
                break;
              v230 = (char *)v229 + *((unsigned int *)v215 + 11);
              v231 = v217;
              v232 = memcmp(v217, v230, v218);
              v217 = v231;
              if (!v232)
                break;
            }
          }
          v227 = v226 + v228;
          ++v226;
        }
        if ((_DWORD)v228 == -1)
        {
          v229 = 0;
LABEL_300:
          v211 = v292;
          v214 = v290;
          goto LABEL_301;
        }
        v214 = v290;
        if ((int)v228 == v287)
          v229 = 0;
        else
          v229 = *(_QWORD **)(*(_QWORD *)(v224 + 8 * (int)v228) + 8);
        v211 = v292;
      }
      else
      {
        v229 = 0;
      }
LABEL_301:
      if (v214 >= HIDWORD(v333))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v214 + 1, 8);
        LODWORD(v214) = v333;
      }
      *((_QWORD *)Flags + v214) = v229;
      v233 = (v333 + 1);
      LODWORD(v333) = v233;
      v234 = *(unsigned int *)(v211 + 12);
      if (v233 >= HIDWORD(v333))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v233 + 1, 8);
        LODWORD(v233) = v333;
      }
      *((_QWORD *)Flags + v233) = v234 & 0xF | (16 * ((v234 >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | (((v234 >> 4) & 3) << 8);
      LODWORD(v333) = v333 + 1;
      *(_QWORD *)&v338 = *(_QWORD *)(v211 + 72);
      v235 = *((unsigned int *)sub_1C6144C70((uint64_t)&v317, (uint64_t *)&v338) + 2);
      v236 = v333;
      if (v333 >= (unint64_t)HIDWORD(v333))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v333 + 1, 8);
        v236 = v333;
      }
      *((_QWORD *)Flags + v236) = v235;
      LODWORD(v333) = v333 + 1;
      sub_1C5034740(v294, 8u, (uint64_t)&Flags, v289);
      LODWORD(v333) = 0;
      v237 = v313;
      if (!v313[3] && (*(_WORD *)(v211 + 12) & 0xFu) - 7 <= 1)
      {
        v238 = p_Flags;
        v239 = *(_QWORD *)(v211 + 16);
        v240 = *((unsigned int *)p_Flags + 2);
        if (v240 >= *((unsigned int *)p_Flags + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)p_Flags, (uint64_t)(p_Flags + 2), v240 + 1, 8);
          v240 = *((unsigned int *)v238 + 2);
        }
        *((_QWORD *)*v238 + v240) = v239;
        ++*((_DWORD *)v238 + 2);
        sub_1C5034740(*v237, 9u, (uint64_t)p_Flags, 0);
        *((_DWORD *)p_Flags + 2) = 0;
      }
      v241 = *(_QWORD *)(v211 + 72);
      if (v241 && *(_DWORD *)(v241 + 8) == 1)
        sub_1C5041444((uint64_t **)v241, &v315);
      ++v210;
    }
    while (v210 != (uint64_t *)v288);
  }
  if (*((_QWORD *)v296 + 20))
  {
    v140 = (char *)*((_QWORD *)v296 + 18);
    v141 = (char *)v296 + 152;
    if (v140 != (char *)v296 + 152)
    {
      do
      {
        v243 = v140 + 32;
        v244 = v140[55];
        v245 = v244;
        if (v244 >= 0)
          v246 = (int *)(v140 + 32);
        else
          v246 = (int *)*((_QWORD *)v140 + 4);
        v247 = *((_QWORD *)v140 + 5);
        v248 = v244 & 0x7F;
        if (v245 >= 0)
          v247 = v248;
        if (v247)
        {
          v249 = *(unsigned __int8 *)v246;
          if (v249 == 1)
            v250 = v247 - 1;
          else
            v250 = v247;
          if (v249 == 1)
            v246 = (int *)((char *)v246 + 1);
        }
        else
        {
          v250 = 0;
        }
        v338 = xmmword_1C85F4BB0;
        v339 = 0;
        llvm::MD5::update((int *)&v338, v246, v250);
        llvm::MD5::final((int *)&v338, (int *)v337);
        for (j = v312[0]; j; j = (_QWORD *)*j)
        {
          v252 = j[4];
          if (v337[0] >= v252)
          {
            if (v252 >= v337[0])
            {
              v253 = v295;
              v254 = v140[55];
              v255 = v254 < 0;
              if (v254 < 0)
                v243 = (_QWORD *)*((_QWORD *)v140 + 4);
              v256 = v254 & 0x7F;
              if (v255)
                v257 = *((_QWORD *)v140 + 5);
              else
                v257 = v256;
              v258 = sub_1C5E3DF4C(v243, (uint64_t)v243 + v257);
              v259 = llvm::StringTableBuilder::add(v253, (uint64_t)v243, v257 | ((unint64_t)v258 << 32));
              v260 = v333;
              if (v333 >= (unint64_t)HIDWORD(v333))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v333 + 1, 8);
                v260 = v333;
              }
              *((_QWORD *)Flags + v260) = v259;
              v261 = (v333 + 1);
              LODWORD(v333) = v333 + 1;
              if (v140[55] < 0)
                v262 = *((_QWORD *)v140 + 5);
              else
                v262 = v140[55];
              if (v261 >= HIDWORD(v333))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v261 + 1, 8);
                LODWORD(v261) = v333;
              }
              *((_QWORD *)Flags + v261) = v262;
              LODWORD(v333) = v333 + 1;
              break;
            }
            ++j;
          }
        }
        v263 = (char *)*((_QWORD *)v140 + 1);
        if (v263)
        {
          do
          {
            v264 = v263;
            v263 = *(char **)v263;
          }
          while (v263);
        }
        else
        {
          do
          {
            v264 = (char *)*((_QWORD *)v140 + 2);
            v21 = *(_QWORD *)v264 == (_QWORD)v140;
            v140 = v264;
          }
          while (!v21);
        }
        v140 = v264;
      }
      while (v264 != v141);
    }
    if ((_DWORD)v333)
    {
      sub_1C5034740(v294, 0x11u, (uint64_t)&Flags, 0);
      LODWORD(v333) = 0;
    }
  }
  if (*((_QWORD *)v296 + 23))
  {
    v142 = (char *)*((_QWORD *)v296 + 21);
    v143 = (char *)v296 + 176;
    if (v142 != (char *)v296 + 176)
    {
      do
      {
        v265 = v142 + 32;
        v266 = v142[55];
        v267 = v266;
        if (v266 >= 0)
          v268 = (int *)(v142 + 32);
        else
          v268 = (int *)*((_QWORD *)v142 + 4);
        v269 = *((_QWORD *)v142 + 5);
        v270 = v266 & 0x7F;
        if (v267 >= 0)
          v269 = v270;
        if (v269)
        {
          v271 = *(unsigned __int8 *)v268;
          if (v271 == 1)
            v272 = v269 - 1;
          else
            v272 = v269;
          if (v271 == 1)
            v268 = (int *)((char *)v268 + 1);
        }
        else
        {
          v272 = 0;
        }
        v338 = xmmword_1C85F4BB0;
        v339 = 0;
        llvm::MD5::update((int *)&v338, v268, v272);
        llvm::MD5::final((int *)&v338, (int *)v337);
        for (k = v312[0]; k; k = (_QWORD *)*k)
        {
          v274 = k[4];
          if (v337[0] >= v274)
          {
            if (v274 >= v337[0])
            {
              v275 = v295;
              v276 = v142[55];
              v277 = v276 < 0;
              if (v276 < 0)
                v265 = (_QWORD *)*((_QWORD *)v142 + 4);
              v278 = v276 & 0x7F;
              if (v277)
                v279 = *((_QWORD *)v142 + 5);
              else
                v279 = v278;
              v280 = sub_1C5E3DF4C(v265, (uint64_t)v265 + v279);
              v281 = llvm::StringTableBuilder::add(v275, (uint64_t)v265, v279 | ((unint64_t)v280 << 32));
              v282 = v333;
              if (v333 >= (unint64_t)HIDWORD(v333))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v333 + 1, 8);
                v282 = v333;
              }
              *((_QWORD *)Flags + v282) = v281;
              v283 = (v333 + 1);
              LODWORD(v333) = v333 + 1;
              if (v142[55] < 0)
                v284 = *((_QWORD *)v142 + 5);
              else
                v284 = v142[55];
              if (v283 >= HIDWORD(v333))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v283 + 1, 8);
                LODWORD(v283) = v333;
              }
              *((_QWORD *)Flags + v283) = v284;
              LODWORD(v333) = v333 + 1;
              break;
            }
            ++k;
          }
        }
        v285 = (char *)*((_QWORD *)v142 + 1);
        if (v285)
        {
          do
          {
            v286 = v285;
            v285 = *(char **)v285;
          }
          while (v285);
        }
        else
        {
          do
          {
            v286 = (char *)*((_QWORD *)v142 + 2);
            v21 = *(_QWORD *)v286 == (_QWORD)v142;
            v142 = v286;
          }
          while (!v21);
        }
        v142 = v286;
      }
      while (v286 != v143);
    }
    if ((_DWORD)v333)
    {
      sub_1C5034740(v294, 0x12u, (uint64_t)&Flags, 0);
      LODWORD(v333) = 0;
    }
  }
  v144 = v315;
  if (v315 != (uint64_t *)v316)
  {
    do
    {
      v145 = sub_1C4FCD918((uint64_t)v296 + 56, (unint64_t *)v144 + 4);
      if (v145 != v146)
      {
        v147 = v145;
        v148 = v146;
        do
        {
          v149 = v295;
          v150 = *((_BYTE *)v147 + 63);
          if (v150 >= 0)
            v151 = v147 + 5;
          else
            v151 = (_QWORD *)v147[5];
          if (v150 >= 0)
            v152 = v150 & 0x7F;
          else
            v152 = v147[6];
          v153 = sub_1C5E3DF4C(v151, (uint64_t)v151 + v152);
          v154 = llvm::StringTableBuilder::add(v149, (uint64_t)v151, v152 | ((unint64_t)v153 << 32));
          v155 = v333;
          if (v333 >= (unint64_t)HIDWORD(v333))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v333 + 1, 8);
            v155 = v333;
          }
          *((_QWORD *)Flags + v155) = v154;
          v156 = (v333 + 1);
          LODWORD(v333) = v333 + 1;
          v157 = *((_BYTE *)v147 + 63);
          v158 = v157;
          v159 = v157 & 0x7F;
          if (v158 >= 0)
            v160 = v159;
          else
            v160 = v147[6];
          if (v156 >= HIDWORD(v333))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v156 + 1, 8);
            LODWORD(v156) = v333;
          }
          *((_QWORD *)Flags + v156) = v160;
          v161 = (v333 + 1);
          LODWORD(v333) = v161;
          v162 = *((unsigned int *)v147 + 16);
          if (v161 >= HIDWORD(v333))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v161 + 1, 8);
            LODWORD(v161) = v333;
          }
          *((_QWORD *)Flags + v161) = v162;
          v163 = (v333 + 1);
          LODWORD(v333) = v163;
          v164 = *((unsigned int *)v147 + 17);
          if (v163 >= HIDWORD(v333))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v163 + 1, 8);
            LODWORD(v163) = v333;
          }
          *((_QWORD *)Flags + v163) = v164;
          v165 = (v333 + 1);
          LODWORD(v333) = v165;
          v166 = v147[9];
          if (v165 >= HIDWORD(v333))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v165 + 1, 8);
            LODWORD(v165) = v333;
          }
          *((_QWORD *)Flags + v165) = v166;
          v167 = (v333 + 1);
          LODWORD(v333) = v167;
          v168 = v147[10];
          if (v167 >= HIDWORD(v333))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v167 + 1, 8);
            LODWORD(v167) = v333;
          }
          *((_QWORD *)Flags + v167) = v168;
          v169 = (v333 + 1);
          LODWORD(v333) = v169;
          v170 = *((unsigned __int8 *)v147 + 88);
          if (v169 >= HIDWORD(v333))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v169 + 1, 8);
            LODWORD(v169) = v333;
          }
          *((_QWORD *)Flags + v169) = v170;
          v171 = (v333 + 1);
          LODWORD(v333) = v171;
          v172 = v147[12];
          if (v171 >= HIDWORD(v333))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v171 + 1, 8);
            LODWORD(v171) = v333;
          }
          *((_QWORD *)Flags + v171) = v172;
          v173 = v333 + 1;
          LODWORD(v333) = v333 + 1;
          v174 = (_QWORD *)v147[13];
          if (v174 != v147 + 14)
          {
            do
            {
              v175 = v174[4];
              if (v173 >= HIDWORD(v333))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v173 + 1, 8);
                v173 = v333;
              }
              *((_QWORD *)Flags + v173) = v175;
              v176 = (v333 + 1);
              LODWORD(v333) = v176;
              v177 = *((unsigned int *)v174 + 10);
              if (v176 >= HIDWORD(v333))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v176 + 1, 8);
                LODWORD(v176) = v333;
              }
              *((_QWORD *)Flags + v176) = v177;
              LODWORD(v333) = v333 + 1;
              v178 = *((_BYTE *)v174 + 71);
              if (v178 >= 0)
                v179 = v174 + 6;
              else
                v179 = (_QWORD *)v174[6];
              if (v178 >= 0)
                v180 = v178 & 0x7F;
              else
                v180 = v174[7];
              v181 = sub_1C5E3DF4C(v179, (uint64_t)v179 + v180);
              v182 = llvm::StringTableBuilder::add(v149, (uint64_t)v179, v180 | ((unint64_t)v181 << 32));
              v183 = v333;
              if (v333 >= (unint64_t)HIDWORD(v333))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v333 + 1, 8);
                v183 = v333;
              }
              *((_QWORD *)Flags + v183) = v182;
              v184 = (v333 + 1);
              LODWORD(v333) = v333 + 1;
              v185 = *((_BYTE *)v174 + 71);
              v186 = v185;
              v187 = v185 & 0x7F;
              if (v186 >= 0)
                v188 = v187;
              else
                v188 = v174[7];
              if (v184 >= HIDWORD(v333))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v184 + 1, 8);
                LODWORD(v184) = v333;
              }
              *((_QWORD *)Flags + v184) = v188;
              v189 = (v333 + 1);
              LODWORD(v333) = v189;
              v190 = v174[11];
              if (v189 >= HIDWORD(v333))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v189 + 1, 8);
                LODWORD(v189) = v333;
              }
              *((_QWORD *)Flags + v189) = v190;
              v173 = v333 + 1;
              LODWORD(v333) = v333 + 1;
              v191 = (_QWORD *)v174[9];
              if (v191 != v174 + 10)
              {
                do
                {
                  v193 = v191[4];
                  v192 = v191[5];
                  if (v173 >= HIDWORD(v333))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v173 + 1, 8);
                    v173 = v333;
                  }
                  *((_QWORD *)Flags + v173) = (v192 - v193) >> 3;
                  LODWORD(v333) = v333 + 1;
                  sub_1C5040FCC((unsigned int *)&Flags, (uint64_t)Flags + 8 * v333, (char *)v191[4], (char *)v191[5]);
                  v194 = *((unsigned int *)v191 + 14);
                  v195 = v333;
                  if (v333 >= (unint64_t)HIDWORD(v333))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v333 + 1, 8);
                    v195 = v333;
                  }
                  *((_QWORD *)Flags + v195) = v194;
                  v196 = (v333 + 1);
                  LODWORD(v333) = v196;
                  v197 = v191[8];
                  if (v196 >= HIDWORD(v333))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v196 + 1, 8);
                    LODWORD(v196) = v333;
                  }
                  *((_QWORD *)Flags + v196) = v197;
                  v198 = (v333 + 1);
                  LODWORD(v333) = v198;
                  v199 = *((unsigned int *)v191 + 18);
                  if (v198 >= HIDWORD(v333))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v198 + 1, 8);
                    LODWORD(v198) = v333;
                  }
                  *((_QWORD *)Flags + v198) = v199;
                  v200 = (v333 + 1);
                  LODWORD(v333) = v200;
                  v201 = *((unsigned int *)v191 + 19);
                  if (v200 >= HIDWORD(v333))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Flags, (uint64_t)v334, v200 + 1, 8);
                    LODWORD(v200) = v333;
                  }
                  *((_QWORD *)Flags + v200) = v201;
                  v173 = v333 + 1;
                  LODWORD(v333) = v333 + 1;
                  v202 = (_QWORD *)v191[1];
                  if (v202)
                  {
                    do
                    {
                      v203 = v202;
                      v202 = (_QWORD *)*v202;
                    }
                    while (v202);
                  }
                  else
                  {
                    do
                    {
                      v203 = (_QWORD *)v191[2];
                      v21 = *v203 == (_QWORD)v191;
                      v191 = v203;
                    }
                    while (!v21);
                  }
                  v191 = v203;
                }
                while (v203 != v174 + 10);
              }
              v204 = (_QWORD *)v174[1];
              if (v204)
              {
                do
                {
                  v205 = v204;
                  v204 = (_QWORD *)*v204;
                }
                while (v204);
              }
              else
              {
                do
                {
                  v205 = (_QWORD *)v174[2];
                  v21 = *v205 == (_QWORD)v174;
                  v174 = v205;
                }
                while (!v21);
              }
              v174 = v205;
            }
            while (v205 != v147 + 14);
          }
          sub_1C5034740(v294, 0x15u, (uint64_t)&Flags, 0);
          LODWORD(v333) = 0;
          v206 = (_QWORD *)v147[1];
          if (v206)
          {
            do
            {
              v207 = v206;
              v206 = (_QWORD *)*v206;
            }
            while (v206);
          }
          else
          {
            do
            {
              v207 = (_QWORD *)v147[2];
              v21 = *v207 == (_QWORD)v147;
              v147 = v207;
            }
            while (!v21);
          }
          v147 = v207;
        }
        while (v207 != v148);
      }
      v208 = (uint64_t *)v144[1];
      if (v208)
      {
        do
        {
          v209 = v208;
          v208 = (uint64_t *)*v208;
        }
        while (v208);
      }
      else
      {
        do
        {
          v209 = (uint64_t *)v144[2];
          v21 = *v209 == (_QWORD)v144;
          v144 = v209;
        }
        while (!v21);
      }
      v144 = v209;
    }
    while (v209 != (uint64_t *)v316);
  }
  v337[0] = *((_QWORD *)v296 + 37);
  *(_QWORD *)&v338 = v337;
  *((_QWORD *)&v338 + 1) = 1;
  sub_1C5033BDC(v294, 0x18u, &v338);
  sub_1C502481C((off_t)v294);
  sub_1C47655E8((uint64_t)&v311, v312[0]);
  sub_1C47655E8((uint64_t)&v315, v316[0]);
  if (Flags != v334)
    free(Flags);
  MEMORY[0x1CAA32FB4](v317, 8);
  if ((_BYTE *)v335 != v336)
    free((void *)v335);
  sub_1C502481C((off_t)v294);
  sub_1C61247C0((uint64_t)&v298, v299[0]);
}

void llvm::WriteBitcodeToFile(const llvm::Module *a1, llvm::raw_ostream *a2, int a3, _QWORD *a4, char a5, uint64_t a6)
{
  BOOL v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  size_t i;
  void *__p;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v26[4];
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v23 = (char *)v26;
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v23, v26, 0x40000uLL, 1);
  v27 = 260;
  v26[0] = (char *)a1 + 216;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v26);
  v12 = v21 > 0x21 || ((1 << v21) & 0x3F0000888) == 0;
  if (!v12 || v22 == 8 || v22 == 5)
    sub_1C502E368((uint64_t *)&v23, (uint64_t)v23, 0x14uLL, 0);
  if (*((_DWORD *)a2 + 2) == 1)
    v13 = (uint64_t)a2;
  else
    v13 = 0;
  llvm::BitcodeWriter::BitcodeWriter((uint64_t)v26, (uint64_t)&v23, v13);
  llvm::BitcodeWriter::writeModule((uint64_t)v26, a1, a3, a4, a5, a6);
  llvm::BitcodeWriter::writeSymtab((llvm::BitcodeWriter *)v26);
  llvm::BitcodeWriter::writeStrtab((llvm::BitcodeWriter *)v26);
  if ((v21 > 0x21 || ((1 << v21) & 0x3F0000888) == 0) && v22 != 8 && v22 != 5)
  {
    i = v24;
    goto LABEL_34;
  }
  v14 = 16777223;
  if (v20 > 38)
  {
    if (v20 != 39)
    {
      if (v20 == 42)
        goto LABEL_23;
      if (v20 == 41)
      {
        v14 = 7;
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_20:
    v14 = 12;
    goto LABEL_23;
  }
  switch(v20)
  {
    case 1:
      goto LABEL_20;
    case 21:
      v14 = 18;
      goto LABEL_23;
    case 23:
      v14 = 16777234;
      goto LABEL_23;
  }
LABEL_22:
  v14 = -1;
LABEL_23:
  v15 = v24 - 20;
  *(_DWORD *)v23 = 186106078;
  *((_DWORD *)v23 + 1) = 0;
  v16 = v23;
  *((_DWORD *)v23 + 2) = 20;
  *((_DWORD *)v16 + 3) = v15;
  *((_DWORD *)v16 + 4) = v14;
  for (i = v24; (i & 0xF) != 0; i = ++v24)
  {
    if (i + 1 > v25)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v23, v26, i + 1, 1);
      i = v24;
    }
    v23[i] = 0;
  }
LABEL_34:
  if (i)
    llvm::raw_ostream::write(a2, v23, i);
  llvm::BitcodeWriter::~BitcodeWriter((llvm::BitcodeWriter *)v26);
  if (v19 < 0)
    operator delete(__p);
  if (v23 != (char *)v26)
    free(v23);
}

char *sub_1C502E368(uint64_t *a1, uint64_t a2, size_t __len, int __c)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v14;
  size_t v15;
  uint64_t v16;
  char *__src;

  v7 = *a1;
  v8 = a1[1];
  v9 = a2 - *a1;
  v10 = v8 + __len;
  v11 = a1[2];
  if (*a1 + v8 == a2)
  {
    if (v10 > v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v10, 1);
      v7 = *a1;
      v8 = a1[1];
    }
    if (__len)
    {
      memset((void *)(v7 + v8), __c, __len);
      v7 = *a1;
      v8 = a1[1];
    }
    a1[1] = v8 + __len;
    return (char *)(v7 + v9);
  }
  else
  {
    v16 = a2 - *a1;
    if (v10 > v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v10, 1);
      v7 = *a1;
      v8 = a1[1];
    }
    v14 = (char *)(v7 + v8);
    __src = (char *)(v7 + v16);
    v15 = v8 - v16;
    if (__len <= v8 - v16)
    {
      sub_1C5042AFC(a1, &v14[-__len], (char *)(v7 + v8));
      if (&v14[-__len] != __src)
        memmove(&__src[__len], __src, &v14[-__len] - __src);
      if (__len)
      {
        v12 = __src;
        memset(__src, __c, __len);
        return v12;
      }
    }
    else
    {
      a1[1] = v8 + __len;
      if (v16 != v8)
      {
        memcpy((void *)(v7 + __len + v16), __src, v8 - v16);
        memset(__src, __c, v15);
      }
      if (__len != v15)
        memset(v14, __c, __len - v15);
    }
    return __src;
  }
}

void llvm::writeIndexToFile(llvm::ModuleSummaryIndex *a1, llvm::raw_ostream *a2, _QWORD *a3)
{
  void *v6;
  size_t v7;
  uint64_t v8;
  _BYTE v9[192];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = 0;
  v6 = v9;
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v6, v9, 0x40000uLL, 1);
  llvm::BitcodeWriter::BitcodeWriter((uint64_t)v9, (uint64_t)&v6, 0);
  llvm::BitcodeWriter::writeIndex((uint64_t)v9, a1, a3);
  llvm::BitcodeWriter::writeStrtab((llvm::BitcodeWriter *)v9);
  llvm::raw_ostream::write(a2, (const char *)v6, v7);
  llvm::BitcodeWriter::~BitcodeWriter((llvm::BitcodeWriter *)v9);
  if (v6 != v9)
    free(v6);
}

uint64_t llvm::BitcodeWriter::writeThinLinkBitcode(uint64_t *a1, const llvm::Module *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v8;
  const llvm::Module **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  const llvm::Module **v17;
  const llvm::Module *v18;
  unsigned __int8 *v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  _BOOL4 v33;
  int v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  _BOOL4 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ***v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ****v48;
  uint64_t ***v49;
  int v50;
  int v51;
  uint64_t ***v52;
  uint64_t **v53;
  char *v54;
  uint64_t **v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t ****v65;
  uint64_t ***v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  int v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t ***v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t ****v85;
  uint64_t ***v86;
  int v87;
  int v88;
  uint64_t ***v89;
  uint64_t **v90;
  char *v91;
  uint64_t **v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t ****v102;
  uint64_t ***v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t ***v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t ****v120;
  uint64_t ***v121;
  int v122;
  int v123;
  uint64_t ***v124;
  uint64_t **v125;
  char *v126;
  uint64_t **v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t ****v137;
  uint64_t ***v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  _QWORD *v147;
  _QWORD *v148;
  llvm::raw_ostream *v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t ***v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t ****v167;
  uint64_t ***v168;
  int v169;
  int v170;
  uint64_t ***v171;
  uint64_t **v172;
  char *v173;
  uint64_t **v174;
  uint64_t v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t ***v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  int v195;
  int v196;
  unsigned int v197;
  llvm::raw_ostream *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202[5];
  uint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  void *v206;
  uint64_t v207;
  _QWORD v208[34];

  v208[32] = *MEMORY[0x1E0C80C00];
  v9 = (const llvm::Module **)a1[22];
  v8 = a1[23];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (_QWORD *)a1[21];
    v12 = v9 - (const llvm::Module **)v11;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        sub_1C4764EE4();
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (const llvm::Module **)&v16[8 * v12];
    *v17 = a2;
    v10 = v17 + 1;
    if (v9 != v11)
    {
      do
      {
        v18 = *--v9;
        *--v17 = v18;
      }
      while (v9 != v11);
      v9 = (const llvm::Module **)a1[21];
    }
    a1[21] = (uint64_t)v17;
    a1[22] = (uint64_t)v10;
    a1[23] = (uint64_t)&v16[8 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = a2;
    v10 = v9 + 1;
  }
  a1[22] = (uint64_t)v10;
  sub_1C5030FB4((uint64_t)&v198, a2, (uint64_t)(a1 + 2), a1[1], 0, a3);
  v203 = a4;
  sub_1C50244C4((uint64_t)v198, 8u, 3u);
  v204 = 2;
  v206 = &v204;
  v207 = 1;
  sub_1C5033BDC(v198, 1u, &v206);
  v206 = v208;
  v207 = 0x4000000000;
  v19 = *(unsigned __int8 **)(v200 + 192);
  v20 = *(_BYTE *)(v200 + 215);
  v21 = v20;
  if (v20 >= 0)
    v19 = (unsigned __int8 *)(v200 + 192);
  v22 = *(_QWORD *)(v200 + 200);
  v23 = v20 & 0x7F;
  if (v21 >= 0)
    v22 = v23;
  if (v22)
  {
    LOBYTE(v33) = 1;
    v25 = 2;
    v24 = 8;
    while (1)
    {
      v34 = *v19;
      v35 = (v34 - 48) >= 0xA && (v34 & 0xFFFFFFDF) - 65 >= 0x1A;
      v36 = !v35 || v34 == 46;
      v37 = v36 || v34 == 95;
      v38 = v37;
      v33 = v33 && v38;
      if ((v34 & 0x80) != 0)
        break;
      ++v19;
      if (!--v22)
      {
        if (v33)
          goto LABEL_23;
        v25 = 2;
        v24 = 7;
        break;
      }
    }
  }
  else
  {
LABEL_23:
    v24 = 0;
    v25 = 8;
  }
  v26 = (char *)operator new(0x228uLL);
  *(_QWORD *)v26 = &unk_1E813F300;
  *((_QWORD *)v26 + 1) = 0;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_OWORD *)(v26 + 136) = 0u;
  *(_OWORD *)(v26 + 152) = 0u;
  *(_OWORD *)(v26 + 168) = 0u;
  *(_OWORD *)(v26 + 184) = 0u;
  *(_OWORD *)(v26 + 200) = 0u;
  *(_OWORD *)(v26 + 216) = 0u;
  *(_OWORD *)(v26 + 232) = 0u;
  *(_OWORD *)(v26 + 248) = 0u;
  *(_OWORD *)(v26 + 264) = 0u;
  *(_OWORD *)(v26 + 280) = 0u;
  *(_OWORD *)(v26 + 296) = 0u;
  *(_OWORD *)(v26 + 312) = 0u;
  *(_OWORD *)(v26 + 328) = 0u;
  *(_OWORD *)(v26 + 344) = 0u;
  *(_OWORD *)(v26 + 360) = 0u;
  *(_OWORD *)(v26 + 376) = 0u;
  *(_OWORD *)(v26 + 392) = 0u;
  *(_OWORD *)(v26 + 408) = 0u;
  *(_OWORD *)(v26 + 424) = 0u;
  *(_OWORD *)(v26 + 440) = 0u;
  *(_OWORD *)(v26 + 456) = 0u;
  *(_OWORD *)(v26 + 472) = 0u;
  *(_OWORD *)(v26 + 488) = 0u;
  *(_OWORD *)(v26 + 504) = 0u;
  *(_OWORD *)(v26 + 520) = 0u;
  *(_OWORD *)(v26 + 536) = 0u;
  *(_OWORD *)(v26 + 40) = xmmword_1C85F9F60;
  *((_QWORD *)v26 + 2) = 0;
  *((_QWORD *)v26 + 3) = v26 + 40;
  *(_OWORD *)(v26 + 56) = xmmword_1C85F9DD0;
  *((_QWORD *)v26 + 9) = v24;
  *((_QWORD *)v26 + 10) = v25;
  *((_QWORD *)v26 + 4) = 0x2000000003;
  v204 = (uint64_t)(v26 + 24);
  v205 = (std::__shared_weak_count *)v26;
  v27 = sub_1C50247B8((uint64_t)v198, (uint64_t)&v204);
  v28 = v205;
  if (v205)
  {
    p_shared_owners = (unint64_t *)&v205->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (*(char *)(v200 + 215) < 0)
  {
    v31 = *(unsigned __int8 **)(v200 + 192);
    v32 = *(_QWORD *)(v200 + 200);
    if (!v32)
      goto LABEL_53;
  }
  else
  {
    v31 = (unsigned __int8 *)(v200 + 192);
    v32 = *(unsigned __int8 *)(v200 + 215);
    if (!*(_BYTE *)(v200 + 215))
      goto LABEL_53;
  }
  v75 = v207;
  do
  {
    v76 = *v31;
    if (v75 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v75 + 1, 4);
      v75 = v207;
    }
    *((_DWORD *)v206 + v75) = v76;
    v75 = v207 + 1;
    LODWORD(v207) = v207 + 1;
    ++v31;
    --v32;
  }
  while (v32);
LABEL_53:
  sub_1C5033274(v198, 0x10u, (uint64_t)&v206, v27);
  LODWORD(v207) = 0;
  v39 = (_QWORD *)v200;
  v40 = v200 + 8;
  v41 = *(_QWORD *)(v200 + 16);
  if (v41 == v200 + 8)
    goto LABEL_96;
  do
  {
    if (v41)
      v42 = (uint64_t ***)(v41 - 56);
    else
      v42 = 0;
    v43 = v42 >> 4;
    if ((*((_BYTE *)v42 + 23) & 0x10) != 0)
    {
      v44 = ***v42;
      v45 = *(_QWORD *)(v44 + 152);
      v46 = *(unsigned int *)(v44 + 168);
      if ((_DWORD)v46)
      {
        LODWORD(v47) = (v46 - 1) & (v43 ^ (v42 >> 9));
        v48 = (uint64_t ****)(v45 + 16 * v47);
        v49 = *v48;
        if (*v48 == v42)
        {
LABEL_65:
          v52 = v48[1];
          v55 = *v52;
          v54 = (char *)(v52 + 2);
          v53 = v55;
          goto LABEL_66;
        }
        v50 = 1;
        while (v49 != (uint64_t ***)-4096)
        {
          v51 = v47 + v50++;
          v47 = v51 & (v46 - 1);
          v49 = *(uint64_t ****)(v45 + 16 * v47);
          if (v49 == v42)
          {
            v48 = (uint64_t ****)(v45 + 16 * v47);
            goto LABEL_65;
          }
        }
      }
      v48 = (uint64_t ****)(v45 + 16 * v46);
      goto LABEL_65;
    }
    v53 = 0;
    v54 = &byte_1C871356D;
LABEL_66:
    v56 = v199;
    v57 = sub_1C5E3DF4C(v54, (uint64_t)v53 + (_QWORD)v54);
    v58 = llvm::StringTableBuilder::add(v56, (uint64_t)v54, v53 | ((unint64_t)v57 << 32));
    v59 = v207;
    if (v207 >= (unint64_t)HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v207 + 1, 4);
      v59 = v207;
    }
    *((_DWORD *)v206 + v59) = v58;
    v60 = (v207 + 1);
    LODWORD(v207) = v207 + 1;
    if ((*((_BYTE *)v42 + 23) & 0x10) != 0)
    {
      v61 = ***v42;
      v62 = *(_QWORD *)(v61 + 152);
      v63 = *(unsigned int *)(v61 + 168);
      if ((_DWORD)v63)
      {
        LODWORD(v64) = (v63 - 1) & (v43 ^ (v42 >> 9));
        v65 = (uint64_t ****)(v62 + 16 * v64);
        v66 = *v65;
        if (*v65 == v42)
        {
LABEL_76:
          v69 = (uint64_t)*v65[1];
          goto LABEL_77;
        }
        v67 = 1;
        while (v66 != (uint64_t ***)-4096)
        {
          v68 = v64 + v67++;
          v64 = v68 & (v63 - 1);
          v66 = *(uint64_t ****)(v62 + 16 * v64);
          if (v66 == v42)
          {
            v65 = (uint64_t ****)(v62 + 16 * v64);
            goto LABEL_76;
          }
        }
      }
      v65 = (uint64_t ****)(v62 + 16 * v63);
      goto LABEL_76;
    }
    LODWORD(v69) = 0;
LABEL_77:
    if (v60 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v60 + 1, 4);
      LODWORD(v60) = v207;
    }
    *((_DWORD *)v206 + v60) = v69;
    v70 = (v207 + 1);
    LODWORD(v207) = v70;
    if (v70 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v70 + 1, 4);
      LODWORD(v70) = v207;
    }
    *((_DWORD *)v206 + v70) = 0;
    v71 = (v207 + 1);
    LODWORD(v207) = v71;
    if (v71 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v71 + 1, 4);
      LODWORD(v71) = v207;
    }
    *((_DWORD *)v206 + v71) = 0;
    v72 = (v207 + 1);
    LODWORD(v207) = v72;
    if (v72 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v72 + 1, 4);
      LODWORD(v72) = v207;
    }
    *((_DWORD *)v206 + v72) = 0;
    v73 = (v207 + 1);
    LODWORD(v207) = v73;
    v74 = dword_1C85FA178[(_DWORD)v42[4] & 0xF];
    if (v73 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v73 + 1, 4);
      LODWORD(v73) = v207;
    }
    *((_DWORD *)v206 + v73) = v74;
    LODWORD(v207) = v207 + 1;
    sub_1C5033274(v198, 7u, (uint64_t)&v206, 0);
    LODWORD(v207) = 0;
    v41 = *(_QWORD *)(v41 + 8);
  }
  while (v41 != v40);
  v39 = (_QWORD *)v200;
LABEL_96:
  v77 = v39 + 3;
  v78 = (_QWORD *)v39[4];
  if (v78 != v39 + 3)
  {
    while (2)
    {
      if (v78)
        v79 = (uint64_t ***)(v78 - 7);
      else
        v79 = 0;
      v80 = v79 >> 4;
      if ((*((_BYTE *)v79 + 23) & 0x10) != 0)
      {
        v81 = ***v79;
        v82 = *(_QWORD *)(v81 + 152);
        v83 = *(unsigned int *)(v81 + 168);
        if (!(_DWORD)v83)
          goto LABEL_107;
        LODWORD(v84) = (v83 - 1) & (v80 ^ (v79 >> 9));
        v85 = (uint64_t ****)(v82 + 16 * v84);
        v86 = *v85;
        if (*v85 != v79)
        {
          v87 = 1;
          while (v86 != (uint64_t ***)-4096)
          {
            v88 = v84 + v87++;
            v84 = v88 & (v83 - 1);
            v86 = *(uint64_t ****)(v82 + 16 * v84);
            if (v86 == v79)
            {
              v85 = (uint64_t ****)(v82 + 16 * v84);
              goto LABEL_108;
            }
          }
LABEL_107:
          v85 = (uint64_t ****)(v82 + 16 * v83);
        }
LABEL_108:
        v89 = v85[1];
        v92 = *v89;
        v91 = (char *)(v89 + 2);
        v90 = v92;
      }
      else
      {
        v90 = 0;
        v91 = &byte_1C871356D;
      }
      v93 = v199;
      v94 = sub_1C5E3DF4C(v91, (uint64_t)v90 + (_QWORD)v91);
      v95 = llvm::StringTableBuilder::add(v93, (uint64_t)v91, v90 | ((unint64_t)v94 << 32));
      v96 = v207;
      if (v207 >= (unint64_t)HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v207 + 1, 4);
        v96 = v207;
      }
      *((_DWORD *)v206 + v96) = v95;
      v97 = (v207 + 1);
      LODWORD(v207) = v207 + 1;
      if ((*((_BYTE *)v79 + 23) & 0x10) != 0)
      {
        v98 = ***v79;
        v99 = *(_QWORD *)(v98 + 152);
        v100 = *(unsigned int *)(v98 + 168);
        if (!(_DWORD)v100)
          goto LABEL_118;
        LODWORD(v101) = (v100 - 1) & (v80 ^ (v79 >> 9));
        v102 = (uint64_t ****)(v99 + 16 * v101);
        v103 = *v102;
        if (*v102 != v79)
        {
          v104 = 1;
          while (v103 != (uint64_t ***)-4096)
          {
            v105 = v101 + v104++;
            v101 = v105 & (v100 - 1);
            v103 = *(uint64_t ****)(v99 + 16 * v101);
            if (v103 == v79)
            {
              v102 = (uint64_t ****)(v99 + 16 * v101);
              goto LABEL_119;
            }
          }
LABEL_118:
          v102 = (uint64_t ****)(v99 + 16 * v100);
        }
LABEL_119:
        v106 = (uint64_t)*v102[1];
      }
      else
      {
        LODWORD(v106) = 0;
      }
      if (v97 >= HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v97 + 1, 4);
        LODWORD(v97) = v207;
      }
      *((_DWORD *)v206 + v97) = v106;
      v107 = (v207 + 1);
      LODWORD(v207) = v107;
      if (v107 >= HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v107 + 1, 4);
        LODWORD(v107) = v207;
      }
      *((_DWORD *)v206 + v107) = 0;
      v108 = (v207 + 1);
      LODWORD(v207) = v108;
      if (v108 >= HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v108 + 1, 4);
        LODWORD(v108) = v207;
      }
      *((_DWORD *)v206 + v108) = 0;
      v109 = (v207 + 1);
      LODWORD(v207) = v109;
      if (v109 >= HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v109 + 1, 4);
        LODWORD(v109) = v207;
      }
      *((_DWORD *)v206 + v109) = 0;
      v110 = (v207 + 1);
      LODWORD(v207) = v110;
      v111 = dword_1C85FA178[(_DWORD)v79[4] & 0xF];
      if (v110 >= HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v110 + 1, 4);
        LODWORD(v110) = v207;
      }
      *((_DWORD *)v206 + v110) = v111;
      LODWORD(v207) = v207 + 1;
      sub_1C5033274(v198, 8u, (uint64_t)&v206, 0);
      LODWORD(v207) = 0;
      v78 = (_QWORD *)v78[1];
      if (v78 == v77)
      {
        v39 = (_QWORD *)v200;
        break;
      }
      continue;
    }
  }
  v112 = v39 + 5;
  v113 = (_QWORD *)v39[6];
  if (v113 == v39 + 5)
    goto LABEL_172;
  while (2)
  {
    if (v113)
      v114 = (uint64_t ***)(v113 - 6);
    else
      v114 = 0;
    v115 = v114 >> 4;
    if ((*((_BYTE *)v114 + 23) & 0x10) != 0)
    {
      v116 = ***v114;
      v117 = *(_QWORD *)(v116 + 152);
      v118 = *(unsigned int *)(v116 + 168);
      if (!(_DWORD)v118)
        goto LABEL_145;
      LODWORD(v119) = (v118 - 1) & (v115 ^ (v114 >> 9));
      v120 = (uint64_t ****)(v117 + 16 * v119);
      v121 = *v120;
      if (*v120 != v114)
      {
        v122 = 1;
        while (v121 != (uint64_t ***)-4096)
        {
          v123 = v119 + v122++;
          v119 = v123 & (v118 - 1);
          v121 = *(uint64_t ****)(v117 + 16 * v119);
          if (v121 == v114)
          {
            v120 = (uint64_t ****)(v117 + 16 * v119);
            goto LABEL_146;
          }
        }
LABEL_145:
        v120 = (uint64_t ****)(v117 + 16 * v118);
      }
LABEL_146:
      v124 = v120[1];
      v127 = *v124;
      v126 = (char *)(v124 + 2);
      v125 = v127;
    }
    else
    {
      v125 = 0;
      v126 = &byte_1C871356D;
    }
    v128 = v199;
    v129 = sub_1C5E3DF4C(v126, (uint64_t)v125 + (_QWORD)v126);
    v130 = llvm::StringTableBuilder::add(v128, (uint64_t)v126, v125 | ((unint64_t)v129 << 32));
    v131 = v207;
    if (v207 >= (unint64_t)HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v207 + 1, 4);
      v131 = v207;
    }
    *((_DWORD *)v206 + v131) = v130;
    v132 = (v207 + 1);
    LODWORD(v207) = v207 + 1;
    if ((*((_BYTE *)v114 + 23) & 0x10) != 0)
    {
      v133 = ***v114;
      v134 = *(_QWORD *)(v133 + 152);
      v135 = *(unsigned int *)(v133 + 168);
      if (!(_DWORD)v135)
        goto LABEL_156;
      LODWORD(v136) = (v135 - 1) & (v115 ^ (v114 >> 9));
      v137 = (uint64_t ****)(v134 + 16 * v136);
      v138 = *v137;
      if (*v137 != v114)
      {
        v139 = 1;
        while (v138 != (uint64_t ***)-4096)
        {
          v140 = v136 + v139++;
          v136 = v140 & (v135 - 1);
          v138 = *(uint64_t ****)(v134 + 16 * v136);
          if (v138 == v114)
          {
            v137 = (uint64_t ****)(v134 + 16 * v136);
            goto LABEL_157;
          }
        }
LABEL_156:
        v137 = (uint64_t ****)(v134 + 16 * v135);
      }
LABEL_157:
      v141 = (uint64_t)*v137[1];
    }
    else
    {
      LODWORD(v141) = 0;
    }
    if (v132 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v132 + 1, 4);
      LODWORD(v132) = v207;
    }
    *((_DWORD *)v206 + v132) = v141;
    v142 = (v207 + 1);
    LODWORD(v207) = v142;
    if (v142 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v142 + 1, 4);
      LODWORD(v142) = v207;
    }
    *((_DWORD *)v206 + v142) = 0;
    v143 = (v207 + 1);
    LODWORD(v207) = v143;
    if (v143 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v143 + 1, 4);
      LODWORD(v143) = v207;
    }
    *((_DWORD *)v206 + v143) = 0;
    v144 = (v207 + 1);
    LODWORD(v207) = v144;
    if (v144 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v144 + 1, 4);
      LODWORD(v144) = v207;
    }
    *((_DWORD *)v206 + v144) = 0;
    v145 = (v207 + 1);
    LODWORD(v207) = v145;
    v146 = dword_1C85FA178[(_DWORD)v114[4] & 0xF];
    if (v145 >= HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v145 + 1, 4);
      LODWORD(v145) = v207;
    }
    *((_DWORD *)v206 + v145) = v146;
    LODWORD(v207) = v207 + 1;
    sub_1C5033274(v198, 0xEu, (uint64_t)&v206, 0);
    LODWORD(v207) = 0;
    v113 = (_QWORD *)v113[1];
    if (v113 != v112)
      continue;
    break;
  }
  v39 = (_QWORD *)v200;
LABEL_172:
  v147 = v39 + 7;
  v148 = (_QWORD *)v39[8];
  if (v148 != v39 + 7)
  {
    while (1)
    {
      v161 = v148 ? (uint64_t ***)(v148 - 7) : 0;
      v162 = v161 >> 4;
      if ((*((_BYTE *)v161 + 23) & 0x10) != 0)
        break;
      v172 = 0;
      v173 = &byte_1C871356D;
LABEL_195:
      v175 = v199;
      v176 = sub_1C5E3DF4C(v173, (uint64_t)v172 + (_QWORD)v173);
      v177 = llvm::StringTableBuilder::add(v175, (uint64_t)v173, v172 | ((unint64_t)v176 << 32));
      v178 = v207;
      if (v207 >= (unint64_t)HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v207 + 1, 4);
        v178 = v207;
      }
      *((_DWORD *)v206 + v178) = v177;
      v179 = (v207 + 1);
      LODWORD(v207) = v207 + 1;
      if ((*((_BYTE *)v161 + 23) & 0x10) == 0)
      {
        LODWORD(v188) = 0;
        goto LABEL_206;
      }
      v180 = ***v161;
      v181 = *(_QWORD *)(v180 + 152);
      v182 = *(unsigned int *)(v180 + 168);
      if (!(_DWORD)v182)
        goto LABEL_204;
      LODWORD(v183) = (v182 - 1) & (v162 ^ (v161 >> 9));
      v184 = v181 + 16 * v183;
      v185 = *(uint64_t ****)v184;
      if (*(uint64_t ****)v184 != v161)
      {
        v186 = 1;
        while (v185 != (uint64_t ***)-4096)
        {
          v187 = v183 + v186++;
          v183 = v187 & (v182 - 1);
          v185 = *(uint64_t ****)(v181 + 16 * v183);
          if (v185 == v161)
          {
            v184 = v181 + 16 * v183;
            goto LABEL_205;
          }
        }
LABEL_204:
        v184 = v181 + 16 * v182;
      }
LABEL_205:
      v188 = **(_QWORD **)(v184 + 8);
LABEL_206:
      if (v179 >= HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v179 + 1, 4);
        LODWORD(v179) = v207;
      }
      *((_DWORD *)v206 + v179) = v188;
      v189 = (v207 + 1);
      LODWORD(v207) = v189;
      if (v189 >= HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v189 + 1, 4);
        LODWORD(v189) = v207;
      }
      *((_DWORD *)v206 + v189) = 0;
      v190 = (v207 + 1);
      LODWORD(v207) = v190;
      if (v190 >= HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v190 + 1, 4);
        LODWORD(v190) = v207;
      }
      *((_DWORD *)v206 + v190) = 0;
      v191 = (v207 + 1);
      LODWORD(v207) = v191;
      if (v191 >= HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v191 + 1, 4);
        LODWORD(v191) = v207;
      }
      *((_DWORD *)v206 + v191) = 0;
      v192 = (v207 + 1);
      LODWORD(v207) = v192;
      v193 = dword_1C85FA178[(_DWORD)v161[4] & 0xF];
      if (v192 >= HIDWORD(v207))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v192 + 1, 4);
        LODWORD(v192) = v207;
      }
      *((_DWORD *)v206 + v192) = v193;
      LODWORD(v207) = v207 + 1;
      sub_1C5033274(v198, 0x12u, (uint64_t)&v206, 0);
      LODWORD(v207) = 0;
      v148 = (_QWORD *)v148[1];
      if (v148 == v147)
        goto LABEL_173;
    }
    v163 = ***v161;
    v164 = *(_QWORD *)(v163 + 152);
    v165 = *(unsigned int *)(v163 + 168);
    if ((_DWORD)v165)
    {
      LODWORD(v166) = (v165 - 1) & (v162 ^ (v161 >> 9));
      v167 = (uint64_t ****)(v164 + 16 * v166);
      v168 = *v167;
      if (*v167 == v161)
      {
LABEL_194:
        v171 = v167[1];
        v174 = *v171;
        v173 = (char *)(v171 + 2);
        v172 = v174;
        goto LABEL_195;
      }
      v169 = 1;
      while (v168 != (uint64_t ***)-4096)
      {
        v170 = v166 + v169++;
        v166 = v170 & (v165 - 1);
        v168 = *(uint64_t ****)(v164 + 16 * v166);
        if (v168 == v161)
        {
          v167 = (uint64_t ****)(v164 + 16 * v166);
          goto LABEL_194;
        }
      }
    }
    v167 = (uint64_t ****)(v164 + 16 * v165);
    goto LABEL_194;
  }
LABEL_173:
  if (v206 != v208)
    free(v206);
  sub_1C503136C((off_t *)&v198);
  v149 = v198;
  v150 = v203;
  v151 = *((_DWORD *)v198 + 8);
  v152 = *((_DWORD *)v198 + 6);
  v153 = *((_DWORD *)v198 + 7) | (3 << v152);
  *((_DWORD *)v198 + 7) = v153;
  v154 = v152 + v151;
  if (v154 >= 0x20)
  {
    sub_1C503027C((uint64_t *)v149, v153);
    v194 = *((_DWORD *)v149 + 6);
    if (v194)
      v153 = 3u >> -(char)v194;
    else
      v153 = 0;
    v154 = ((_BYTE)v194 + (_BYTE)v151) & 0x1F;
  }
  v155 = (17 << v154) | v153;
  *((_DWORD *)v149 + 6) = v154;
  *((_DWORD *)v149 + 7) = v155;
  if (v154 >= 0x1A)
  {
    sub_1C503027C((uint64_t *)v149, v155);
    v195 = *((_DWORD *)v149 + 6);
    if (v195)
      v155 = 0x11u >> -(char)v195;
    else
      v155 = 0;
    v156 = ((_BYTE)v195 + 6) & 0x1F;
  }
  else
  {
    v156 = v154 + 6;
  }
  v157 = (5 << v156) | v155;
  *((_DWORD *)v149 + 6) = v156;
  *((_DWORD *)v149 + 7) = v157;
  if (v156 >= 0x1A)
  {
    sub_1C503027C((uint64_t *)v149, v157);
    v196 = *((_DWORD *)v149 + 6);
    v197 = 5u >> -(char)v196;
    if (!v196)
      v197 = 0;
    *((_DWORD *)v149 + 7) = v197;
    v158 = ((_BYTE)v196 + 6) & 0x1F;
  }
  else
  {
    v158 = v156 + 6;
  }
  v159 = 0;
  *((_DWORD *)v149 + 6) = v158;
  do
  {
    sub_1C5030AF8(v149, *(unsigned int *)(v150 + v159), 6);
    v159 += 4;
  }
  while (v159 != 20);
  sub_1C502481C((off_t)v198);
  sub_1C61247C0((uint64_t)v202, v202[1]);
  return sub_1C504113C((uint64_t)&v201);
}

void llvm::writeThinLinkBitcodeToFile(const llvm::Module *a1, llvm::raw_ostream *a2, _QWORD *a3, uint64_t a4)
{
  void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11[25];

  v11[24] = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = 0;
  v8 = v11;
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v8, v11, 0x40000uLL, 1);
  llvm::BitcodeWriter::BitcodeWriter((uint64_t)v11, (uint64_t)&v8, 0);
  llvm::BitcodeWriter::writeThinLinkBitcode(v11, a1, a3, a4);
  llvm::BitcodeWriter::writeSymtab((llvm::BitcodeWriter *)v11);
  llvm::BitcodeWriter::writeStrtab((llvm::BitcodeWriter *)v11);
  llvm::raw_ostream::write(a2, (const char *)v8, v9);
  llvm::BitcodeWriter::~BitcodeWriter((llvm::BitcodeWriter *)v11);
  if (v8 != v11)
    free(v8);
}

void llvm::embedBitcodeInModule(uint64_t a1, unsigned __int8 **a2, int a3, int a4, uint64_t a5)
{
  llvm::Constant *v6;
  llvm::Type *v7;
  llvm::GlobalVariable *v8;
  llvm::UndefValue **v9;
  char *v10;
  llvm::UndefValue *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  llvm::UndefValue **v17;
  llvm::UndefValue *v18;
  int v19;
  int v20;
  llvm::UndefValue *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v27;
  llvm::UndefValue **v28;
  llvm::UndefValue *v29;
  int v30;
  int v31;
  llvm::UndefValue *v32;
  uint64_t v33;
  int v34;
  llvm::UndefValue *PointerBitCastOrAddrSpaceCast;
  uint64_t v37;
  llvm::Type *v38;
  _BYTE *v39;
  int v40;
  llvm::ConstantAggregateZero *v41;
  llvm::Value **Impl;
  _DWORD *v43;
  llvm::UndefValue *v44;
  llvm::PointerType *v45;
  size_t v46;
  char *v47;
  llvm::Type *v48;
  llvm::UndefValue *v49;
  llvm::UndefValue *v50;
  llvm::UndefValue *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  llvm::UndefValue **v57;
  llvm::UndefValue *v58;
  int v59;
  llvm::UndefValue *v60;
  unsigned int v61;
  llvm::Value *v62;
  _BYTE *v63;
  llvm::Type *v64;
  llvm::ConstantAggregateZero *v65;
  llvm::Value **v66;
  _DWORD *v67;
  llvm::UndefValue *v68;
  llvm::PointerType *v69;
  size_t v70;
  char *v71;
  llvm::Type *v72;
  llvm::UndefValue *v73;
  llvm::UndefValue *v74;
  llvm::UndefValue *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  llvm::UndefValue **v81;
  llvm::UndefValue *v82;
  int v83;
  llvm::UndefValue *v84;
  unsigned int v85;
  llvm::Value *v86;
  llvm::PoisonValue *v87;
  llvm::PoisonValue *v88;
  char *v89;
  char *v90;
  llvm::Value **v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  _QWORD *v100;
  uint64_t v101;
  llvm::UndefValue **v102;
  int v103;
  BOOL v104;
  unsigned int v105;
  _QWORD *v106;
  int v107;
  BOOL v108;
  unsigned int v109;
  llvm::UndefValue **v110;
  int v111;
  BOOL v112;
  unsigned int v113;
  llvm::UndefValue **v114;
  const char *v115;
  _QWORD *v116;
  const char *v117;
  llvm::GlobalVariable *v118;
  llvm::UndefValue **v119;
  const char *v120;
  llvm::GlobalVariable *v121;
  uint64_t **v126;
  const char *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  int v134;
  void **v135;
  void *__p;
  char v137;
  int v138;
  void *v139[2];
  uint64_t v140;
  llvm::UndefValue **v141;
  uint64_t v142;
  _BYTE v143[32];
  llvm::Type *v144;
  uint64_t v145;
  _QWORD v146[4];

  v146[2] = *MEMORY[0x1E0C80C00];
  v144 = (llvm::Type *)v146;
  v145 = 0x200000000;
  v141 = (llvm::UndefValue **)v143;
  v142 = 0x400000000;
  v6 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)a1 + 1912), 0);
  v126 = (uint64_t **)a1;
  v8 = (llvm::GlobalVariable *)llvm::collectUsedGlobalVariables(a1, (uint64_t)&v141, 1);
  if ((_DWORD)v142)
  {
    v9 = v141;
    v10 = (char *)&v141[v142];
    while (1)
    {
      v11 = *v9;
      if ((*((_BYTE *)*v9 + 23) & 0x10) == 0)
      {
LABEL_31:
        PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(v11, v6, v7);
        v37 = v145;
        if (v145 >= (unint64_t)HIDWORD(v145))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, (uint64_t)v146, v145 + 1, 8);
          v37 = v145;
        }
        *((_QWORD *)v144 + v37) = PointerBitCastOrAddrSpaceCast;
        LODWORD(v145) = v145 + 1;
        goto LABEL_34;
      }
      v12 = ***(_QWORD ***)v11;
      v13 = *(_QWORD *)(v12 + 152);
      v14 = *(unsigned int *)(v12 + 168);
      v15 = v11 >> 4;
      if (!(_DWORD)v14)
        goto LABEL_10;
      LODWORD(v16) = (v14 - 1) & (v15 ^ (v11 >> 9));
      v17 = (llvm::UndefValue **)(v13 + 16 * v16);
      v18 = *v17;
      if (*v17 != v11)
        break;
LABEL_11:
      v21 = v17[1];
      if (*(_QWORD *)v21 == 20)
      {
        v22 = *((_QWORD *)v21 + 2);
        v23 = *((_QWORD *)v21 + 3);
        v24 = *((_DWORD *)v21 + 8);
        v25 = v22 == 0x626D652E6D766C6CLL && v23 == 0x6F6D2E6465646465;
        if (v25 && v24 == 1701606756)
          goto LABEL_34;
      }
      if (!(_DWORD)v14)
        goto LABEL_25;
      LODWORD(v27) = (v14 - 1) & (v15 ^ (v11 >> 9));
      v28 = (llvm::UndefValue **)(v13 + 16 * v27);
      v29 = *v28;
      if (*v28 != v11)
      {
        v30 = 1;
        while (v29 != (llvm::UndefValue *)-4096)
        {
          v31 = v27 + v30++;
          v27 = v31 & (v14 - 1);
          v29 = *(llvm::UndefValue **)(v13 + 16 * v27);
          if (v29 == v11)
          {
            v28 = (llvm::UndefValue **)(v13 + 16 * v27);
            goto LABEL_26;
          }
        }
LABEL_25:
        v28 = (llvm::UndefValue **)(v13 + 16 * v14);
      }
LABEL_26:
      v32 = v28[1];
      if (*(_QWORD *)v32 != 12)
        goto LABEL_31;
      v33 = *((_QWORD *)v32 + 2);
      v34 = *((_DWORD *)v32 + 6);
      if (v33 != 0x646D632E6D766C6CLL || v34 != 1701734764)
        goto LABEL_31;
LABEL_34:
      if (++v9 == (llvm::UndefValue **)v10)
        goto LABEL_35;
    }
    v19 = 1;
    while (v18 != (llvm::UndefValue *)-4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v14 - 1);
      v18 = *(llvm::UndefValue **)(v13 + 16 * v16);
      if (v18 == v11)
      {
        v17 = (llvm::UndefValue **)(v13 + 16 * v16);
        goto LABEL_11;
      }
    }
LABEL_10:
    v17 = (llvm::UndefValue **)(v13 + 16 * v14);
    goto LABEL_11;
  }
LABEL_35:
  if (v8)
    llvm::GlobalVariable::eraseFromParent(v8);
  v139[0] = 0;
  v139[1] = 0;
  v140 = 0;
  LOWORD(v131) = 260;
  v127 = (const char *)(v126 + 27);
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v127);
  if (a3)
  {
    v38 = (llvm::Type *)a2[1];
    if (v38)
    {
      v39 = *a2;
      v40 = **a2;
      if (v40 == 66)
      {
        if (v39[1] == 67 && v39[2] == 192 && v39[3] == 222)
          goto LABEL_53;
      }
      else if (v40 == 222 && v39[1] == 192 && v39[2] == 23 && v39[3] == 11)
      {
        goto LABEL_53;
      }
    }
    v128 = 0;
    v132 = 0;
    v133 = 0;
    v127 = (const char *)&unk_1E81A7208;
    v135 = v139;
    v134 = 0;
    v130 = 0;
    v131 = 0;
    v129 = 0;
    llvm::WriteBitcodeToFile((const llvm::Module *)v126, (llvm::raw_ostream *)&v127, 1, 0, 0, 0);
    v39 = v135;
    if (*((char *)v135 + 23) < 0)
    {
      v39 = *v135;
      v38 = (llvm::Type *)v135[1];
    }
    else
    {
      v38 = (llvm::Type *)*((unsigned __int8 *)v135 + 23);
    }
    v127 = (const char *)off_1E81A6E70;
    if (v134 == 1 && v129)
      MEMORY[0x1CAA32F9C](v129, 0x1000C8077774924);
  }
  else
  {
    v39 = 0;
    v38 = 0;
  }
LABEL_53:
  llvm::ArrayType::get((llvm::ArrayType *)(**v126 + 1912), v38);
  Impl = llvm::ConstantDataSequential::getImpl(v39, v38, v41);
  v43 = operator new(0x78uLL);
  v44 = (llvm::UndefValue *)(v43 + 8);
  v43[13] = v43[13] & 0x38000000 | 1;
  *(_QWORD *)v43 = 0;
  *((_QWORD *)v43 + 1) = 0;
  *((_QWORD *)v43 + 2) = 0;
  *((_QWORD *)v43 + 3) = v43 + 8;
  v45 = *Impl;
  LOWORD(v131) = 257;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v43 + 8), (uint64_t)v126, v45, 1, 8, (uint64_t)Impl, (uint64_t)&v127, 0, 0, 0, 0);
  if (v138 == 5)
    v46 = 16;
  else
    v46 = 7;
  if (v138 == 5)
    v47 = "__LLVM,__bitcode";
  else
    v47 = ".llvmbc";
  v49 = (llvm::UndefValue *)llvm::UniqueStringSaver::save(***((_QWORD ***)v43 + 4) + 2136, v47, v46);
  v51 = v50;
  v52 = ***((_QWORD ***)v43 + 4);
  v127 = (const char *)(v43 + 8);
  v53 = *(_DWORD *)(v52 + 2520);
  if (v53)
  {
    v54 = *(_QWORD *)(v52 + 2504);
    v55 = v53 - 1;
    v56 = v55 & ((v44 >> 4) ^ (v44 >> 9));
    v57 = (llvm::UndefValue **)(v54 + 24 * v56);
    v58 = *v57;
    if (*v57 == v44)
      goto LABEL_61;
    v102 = 0;
    v103 = 1;
    while (v58 != (llvm::UndefValue *)-4096)
    {
      if (v102)
        v104 = 0;
      else
        v104 = v58 == (llvm::UndefValue *)-8192;
      if (v104)
        v102 = v57;
      v105 = v56 + v103++;
      v56 = v105 & v55;
      v57 = (llvm::UndefValue **)(v54 + 24 * v56);
      v58 = *v57;
      if (*v57 == v44)
        goto LABEL_61;
    }
    if (v102)
      v114 = v102;
    else
      v114 = v57;
  }
  else
  {
    v114 = 0;
  }
  v57 = (llvm::UndefValue **)sub_1C53D65B8(v52 + 2504, (uint64_t)&v127, (uint64_t *)&v127, v114);
  v115 = v127;
  v57[1] = 0;
  v57[2] = 0;
  *v57 = (llvm::UndefValue *)v115;
LABEL_61:
  v57[1] = v49;
  v57[2] = v51;
  if (v51)
    v59 = 4259840;
  else
    v59 = 0x10000;
  v43[16] = v59 | v43[16] & 0xFF80FFFF;
  v60 = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(v44, v6, v48);
  v61 = v145;
  if (v145 >= HIDWORD(v145))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, (uint64_t)v146, v145 + 1, 8);
    v61 = v145;
  }
  *((_QWORD *)v144 + v61) = v60;
  LODWORD(v145) = v145 + 1;
  v62 = (llvm::Value *)sub_1C4FB7E80(v126[14], "llvm.embedded.module", 0x14uLL);
  if (v62 && (v118 = v62, *((_BYTE *)v62 + 16) == 3))
  {
    llvm::Value::takeName(v44, v62);
    llvm::GlobalVariable::eraseFromParent(v118);
  }
  else
  {
    v127 = "llvm.embedded.module";
    LOWORD(v131) = 259;
    llvm::Value::setName((uint64_t ***)v44, (uint64_t)&v127);
  }
  if (a4)
  {
    v63 = *(_BYTE **)a5;
    v64 = (llvm::Type *)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5);
    llvm::ArrayType::get((llvm::ArrayType *)(**v126 + 1912), v64);
    v66 = llvm::ConstantDataSequential::getImpl(v63, v64, v65);
    v67 = operator new(0x78uLL);
    v68 = (llvm::UndefValue *)(v67 + 8);
    v67[13] = v67[13] & 0x38000000 | 1;
    *(_QWORD *)v67 = 0;
    *((_QWORD *)v67 + 1) = 0;
    *((_QWORD *)v67 + 2) = 0;
    *((_QWORD *)v67 + 3) = v67 + 8;
    v69 = *v66;
    LOWORD(v131) = 257;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v67 + 8), (uint64_t)v126, v69, 1, 8, (uint64_t)v66, (uint64_t)&v127, 0, 0, 0, 0);
    if (v138 == 5)
      v70 = 16;
    else
      v70 = 8;
    if (v138 == 5)
      v71 = "__LLVM,__cmdline";
    else
      v71 = ".llvmcmd";
    v73 = (llvm::UndefValue *)llvm::UniqueStringSaver::save(***((_QWORD ***)v67 + 4) + 2136, v71, v70);
    v75 = v74;
    v76 = ***((_QWORD ***)v67 + 4);
    v127 = (const char *)(v67 + 8);
    v77 = *(_DWORD *)(v76 + 2520);
    if (v77)
    {
      v78 = *(_QWORD *)(v76 + 2504);
      v79 = v77 - 1;
      v80 = v79 & ((v68 >> 4) ^ (v68 >> 9));
      v81 = (llvm::UndefValue **)(v78 + 24 * v80);
      v82 = *v81;
      if (*v81 == v68)
      {
LABEL_77:
        v81[1] = v73;
        v81[2] = v75;
        if (v75)
          v83 = 4259840;
        else
          v83 = 0x10000;
        v67[16] = v83 | v67[16] & 0xFF80FFFF;
        v84 = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(v68, v6, v72);
        v85 = v145;
        if (v145 >= HIDWORD(v145))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, (uint64_t)v146, v145 + 1, 8);
          v85 = v145;
        }
        *((_QWORD *)v144 + v85) = v84;
        LODWORD(v145) = v145 + 1;
        v86 = (llvm::Value *)sub_1C4FB7E80(v126[14], "llvm.cmdline", 0xCuLL);
        if (v86 && (v121 = v86, *((_BYTE *)v86 + 16) == 3))
        {
          llvm::Value::takeName(v68, v86);
          llvm::GlobalVariable::eraseFromParent(v121);
        }
        else
        {
          v127 = "llvm.cmdline";
          LOWORD(v131) = 259;
          llvm::Value::setName((uint64_t ***)v68, (uint64_t)&v127);
        }
        goto LABEL_84;
      }
      v110 = 0;
      v111 = 1;
      while (v82 != (llvm::UndefValue *)-4096)
      {
        if (v110)
          v112 = 0;
        else
          v112 = v82 == (llvm::UndefValue *)-8192;
        if (v112)
          v110 = v81;
        v113 = v80 + v111++;
        v80 = v113 & v79;
        v81 = (llvm::UndefValue **)(v78 + 24 * v80);
        v82 = *v81;
        if (*v81 == v68)
          goto LABEL_77;
      }
      if (v110)
        v119 = v110;
      else
        v119 = v81;
    }
    else
    {
      v119 = 0;
    }
    v81 = (llvm::UndefValue **)sub_1C53D65B8(v76 + 2504, (uint64_t)&v127, (uint64_t *)&v127, v119);
    v120 = v127;
    v81[1] = 0;
    v81[2] = 0;
    *v81 = (llvm::UndefValue *)v120;
    goto LABEL_77;
  }
LABEL_84:
  if (!(_DWORD)v145)
    goto LABEL_88;
  llvm::ArrayType::get(v6, (llvm::Type *)v145);
  v88 = v87;
  v89 = (char *)operator new(0x78uLL);
  v90 = v89 + 32;
  *((_DWORD *)v89 + 13) = *((_DWORD *)v89 + 13) & 0x38000000 | 1;
  *(_QWORD *)v89 = 0;
  *((_QWORD *)v89 + 1) = 0;
  *((_QWORD *)v89 + 2) = 0;
  *((_QWORD *)v89 + 3) = v89 + 32;
  v91 = llvm::ConstantArray::get(v88, v144, v145);
  v127 = "llvm.compiler.used";
  LOWORD(v131) = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v89 + 32), (uint64_t)v126, v88, 0, 6, (uint64_t)v91, (uint64_t)&v127, 0, 0, 0, 0);
  v92 = llvm::UniqueStringSaver::save(***((_QWORD ***)v89 + 4) + 2136, "llvm.metadata", 0xDuLL);
  v94 = v93;
  v95 = ***((_QWORD ***)v89 + 4);
  v127 = v89 + 32;
  v96 = *(_DWORD *)(v95 + 2520);
  if (!v96)
  {
    v116 = 0;
LABEL_131:
    v100 = sub_1C53D65B8(v95 + 2504, (uint64_t)&v127, (uint64_t *)&v127, v116);
    v117 = v127;
    v100[1] = 0;
    v100[2] = 0;
    *v100 = v117;
    goto LABEL_87;
  }
  v97 = *(_QWORD *)(v95 + 2504);
  v98 = v96 - 1;
  v99 = v98 & ((v90 >> 4) ^ (v90 >> 9));
  v100 = (_QWORD *)(v97 + 24 * v99);
  v101 = *v100;
  if ((char *)*v100 != v90)
  {
    v106 = 0;
    v107 = 1;
    while (v101 != -4096)
    {
      if (v106)
        v108 = 0;
      else
        v108 = v101 == -8192;
      if (v108)
        v106 = v100;
      v109 = v99 + v107++;
      v99 = v109 & v98;
      v100 = (_QWORD *)(v97 + 24 * v99);
      v101 = *v100;
      if ((char *)*v100 == v90)
        goto LABEL_87;
    }
    if (v106)
      v116 = v106;
    else
      v116 = v100;
    goto LABEL_131;
  }
LABEL_87:
  v100[1] = v92;
  v100[2] = v94;
  *((_DWORD *)v89 + 16) = *((_DWORD *)v89 + 16) & 0xFFBFFFFF | ((v94 != 0) << 22);
LABEL_88:
  if (v137 < 0)
    operator delete(__p);
  if (SHIBYTE(v140) < 0)
    operator delete(v139[0]);
  if (v141 != (llvm::UndefValue **)v143)
    free(v141);
  if (v144 != (llvm::Type *)v146)
    free(v144);
}

llvm::raw_ostream *sub_1C5030204(llvm::raw_ostream *result, unsigned int a2, int a3)
{
  llvm::raw_ostream *v4;
  int v5;
  int v6;
  unsigned int v7;
  char v8;
  int v9;
  unsigned int v10;

  v4 = result;
  v5 = *((_DWORD *)result + 6);
  v6 = *((_DWORD *)result + 7) | (a2 << v5);
  *((_DWORD *)result + 7) = v6;
  v7 = v5 + a3;
  if (v7 >= 0x20)
  {
    v8 = a3;
    result = sub_1C503027C((uint64_t *)result, v6);
    v9 = *((_DWORD *)v4 + 6);
    v10 = a2 >> -(char)v9;
    if (!v9)
      v10 = 0;
    *((_DWORD *)v4 + 7) = v10;
    v7 = ((_BYTE)v9 + v8) & 0x1F;
  }
  *((_DWORD *)v4 + 6) = v7;
  return result;
}

llvm::raw_ostream *sub_1C503027C(uint64_t *a1, int a2)
{
  _QWORD *v4;
  uint64_t v5;
  llvm::raw_ostream *result;
  size_t v7;

  v4 = (_QWORD *)*a1;
  v5 = *(_QWORD *)(*a1 + 8);
  if (*(_QWORD *)(*a1 + 16) < (unint64_t)(v5 + 4))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*a1, v4 + 3, v5 + 4, 1);
    v5 = v4[1];
  }
  *(_DWORD *)(*v4 + v5) = a2;
  v4[1] += 4;
  result = (llvm::raw_ostream *)a1[1];
  if (result)
  {
    v7 = *(_QWORD *)(*a1 + 8);
    if (v7 >= a1[2])
    {
      result = llvm::raw_ostream::write(result, *(const char **)*a1, v7);
      *(_QWORD *)(*a1 + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_1C503030C(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *i;
  uint64_t *v16;
  uint64_t v17;
  void *__p;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t *v23;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  v23 = a1 + 2;
  if (v6 > 0x666666666666666)
    sub_1C4764EE4();
  v9 = 5 * v6;
  v10 = (char *)operator new(40 * v6);
  v11 = &v10[40 * v3];
  __p = v10;
  v20 = (uint64_t *)v11;
  v12 = *a3;
  *(_DWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  v21 = (uint64_t *)(v11 + 40);
  v22 = &v10[8 * v9];
  sub_1C503044C(a1, &__p);
  v13 = a1[1];
  v14 = v20;
LABEL_9:
  for (i = v21; i != v14; i = v16 - 2)
  {
    v17 = *(i - 3);
    v16 = i - 3;
    v21 = v16 - 2;
    if (v17)
    {
      sub_1C4FF80DC(v16);
      operator delete((void *)*v16);
      goto LABEL_9;
    }
  }
  if (__p)
    operator delete(__p);
  return v13;
}

uint64_t *sub_1C503044C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 40;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 40;
      v4 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v6 = *result;
  *result = v5;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_1C50304E0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *__p;
  uint64_t *v44;
  uint64_t *v45;
  char *v46;
  _QWORD *v47;

  v5 = *a1;
  v6 = a2 - *a1;
  v7 = (_QWORD *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = v6 >> 4;
  v12 = a1[2];
  v13 = a1[1];
  if (a5 > (uint64_t)(v12 - v13) >> 4)
  {
    v14 = a5 + ((uint64_t)(v13 - v5) >> 4);
    if (v14 >> 60)
      abort();
    v15 = v12 - v5;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v47 = a1 + 2;
    if (v16)
    {
      if (v16 >> 60)
        sub_1C4764EE4();
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v25 = (uint64_t *)&v17[16 * v11];
    __p = v17;
    v44 = v25;
    v46 = &v17[16 * v16];
    v26 = &v25[2 * a5];
    do
    {
      *v25 = *v9;
      v27 = v9[1];
      v25[1] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v25 += 2;
      v9 += 2;
    }
    while (v25 != v26);
    v45 = v26;
    v7 = (_QWORD *)sub_1C5030788(a1, &__p, v7);
    v30 = v44;
    while (1)
    {
      v31 = v45;
      if (v45 == v30)
        break;
      v45 -= 2;
      v32 = (std::__shared_weak_count *)*(v31 - 1);
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    if (__p)
      operator delete(__p);
    return v7;
  }
  v18 = (uint64_t)(v13 - (_QWORD)v7) >> 4;
  if (v18 >= a5)
  {
    v19 = &a3[2 * a5];
    v21 = (char *)a1[1];
LABEL_38:
    v35 = (char *)&v7[2 * a5];
    v36 = &v21[-16 * a5];
    v37 = v21;
    if ((unint64_t)v36 < v13)
    {
      v37 = v21;
      do
      {
        *(_OWORD *)v37 = *(_OWORD *)v36;
        v37 += 16;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
        v36 += 16;
      }
      while ((unint64_t)v36 < v13);
    }
    a1[1] = (uint64_t)v37;
    if (v21 != v35)
    {
      v38 = (uint64_t)(v21 - 16);
      v39 = 16 * ((v21 - v35) >> 4);
      v40 = v5 + 16 * v11 - 16;
      do
      {
        sub_1C5030834(v38, (__int128 *)(v40 + v39));
        v38 -= 16;
        v39 -= 16;
      }
      while (v39);
    }
    if (v19 != v9)
    {
      v41 = v7;
      do
      {
        sub_1C4D82DC0(v41, v9);
        v9 += 2;
        v41 += 2;
      }
      while (v9 != v19);
    }
    return v7;
  }
  v19 = &a3[2 * v18];
  if (v19 == a4)
  {
    v21 = (char *)a1[1];
  }
  else
  {
    v20 = &a3[2 * v18];
    v21 = (char *)a1[1];
    do
    {
      *(_QWORD *)v21 = *v20;
      v22 = v20[1];
      *((_QWORD *)v21 + 1) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v20 += 2;
      v21 += 16;
    }
    while (v20 != a4);
  }
  a1[1] = (uint64_t)v21;
  if ((uint64_t)(v13 - (_QWORD)v7) >= 1)
    goto LABEL_38;
  return v7;
}

uint64_t sub_1C5030788(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v12 = a3;
    v6 = a2[1];
    do
    {
      v13 = *((_OWORD *)v12 - 1);
      v12 -= 2;
      *(_OWORD *)(v6 - 16) = v13;
      v6 -= 16;
      *v12 = 0;
      v12[1] = 0;
    }
    while (v12 != v5);
  }
  a2[1] = v6;
  v7 = (_QWORD *)a1[1];
  v8 = (_OWORD *)a2[2];
  if (v7 != a3)
  {
    do
    {
      *v8++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v7);
    v6 = a2[1];
  }
  a2[2] = v8;
  v9 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C5030834(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

llvm::raw_ostream *sub_1C5030898(llvm::raw_ostream *result, uint64_t *a2)
{
  llvm::raw_ostream *v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  BOOL v35;

  v3 = result;
  v4 = *((_DWORD *)result + 8);
  v5 = *((_DWORD *)result + 6);
  v6 = *((_DWORD *)result + 7) | (2 << v5);
  *((_DWORD *)result + 7) = v6;
  v7 = v5 + v4;
  if (v7 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)result, v6);
    v30 = *((_DWORD *)v3 + 6);
    if (v30)
      v6 = 2u >> -(char)v30;
    else
      v6 = 0;
    v7 = ((_BYTE)v30 + (_BYTE)v4) & 0x1F;
  }
  *((_DWORD *)v3 + 6) = v7;
  v8 = *((_DWORD *)a2 + 2);
  if (v8 >= 0x10)
  {
    do
    {
      v34 = v8 & 0xF | 0x10;
      v6 |= v34 << v7;
      *((_DWORD *)v3 + 7) = v6;
      if (v7 >= 0x1B)
      {
        result = sub_1C503027C((uint64_t *)v3, v6);
        v33 = *((_DWORD *)v3 + 6);
        if (v33)
          v6 = v34 >> -(char)v33;
        else
          v6 = 0;
        *((_DWORD *)v3 + 7) = v6;
        v7 = ((_BYTE)v33 + 5) & 0x1F;
      }
      else
      {
        v7 += 5;
      }
      *((_DWORD *)v3 + 6) = v7;
      v9 = v8 >> 4;
      v35 = v8 > 0xFF;
      v8 >>= 4;
    }
    while (v35);
  }
  else
  {
    v9 = *((_DWORD *)a2 + 2);
  }
  v10 = (v9 << v7) | v6;
  *((_DWORD *)v3 + 7) = v10;
  if (v7 >= 0x1B)
  {
    result = sub_1C503027C((uint64_t *)v3, v10);
    v31 = *((_DWORD *)v3 + 6);
    v32 = v9 >> -(char)v31;
    if (!v31)
      v32 = 0;
    *((_DWORD *)v3 + 7) = v32;
    v11 = ((_BYTE)v31 + 5) & 0x1F;
  }
  else
  {
    v11 = v7 + 5;
  }
  *((_DWORD *)v3 + 6) = v11;
  v12 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 16 * v12;
    do
    {
      v15 = *a2;
      v16 = *a2 + v13;
      v17 = *(_BYTE *)(v16 + 8) & 1;
      v18 = *((_DWORD *)v3 + 6);
      v19 = (v17 << v18) | *((_DWORD *)v3 + 7);
      *((_DWORD *)v3 + 7) = v19;
      v20 = v18 + 1;
      if (v20 >= 0x20)
      {
        result = sub_1C503027C((uint64_t *)v3, v19);
        v27 = *((_DWORD *)v3 + 6);
        if (v27)
          v19 = v17 >> -(char)v27;
        else
          v19 = 0;
        *((_DWORD *)v3 + 7) = v19;
        v20 = ((_BYTE)v27 + 1) & 0x1F;
      }
      *((_DWORD *)v3 + 6) = v20;
      v21 = *(unsigned __int8 *)(v16 + 8);
      if ((v21 & 1) != 0)
      {
        v26 = 8;
      }
      else
      {
        v22 = (v21 >> 1) & 7;
        v23 = (v22 << v20) | v19;
        *((_DWORD *)v3 + 7) = v23;
        if (v20 >= 0x1D)
        {
          result = sub_1C503027C((uint64_t *)v3, v23);
          v28 = *((_DWORD *)v3 + 6);
          v29 = v22 >> -(char)v28;
          if (!v28)
            v29 = 0;
          *((_DWORD *)v3 + 7) = v29;
          v24 = ((_BYTE)v28 + 3) & 0x1F;
        }
        else
        {
          v24 = v20 + 3;
        }
        *((_DWORD *)v3 + 6) = v24;
        v25 = (*(unsigned __int8 *)(v16 + 8) >> 1) & 7;
        if ((v25 - 1) >= 2)
        {
          if ((v25 - 3) >= 3)
            llvm::report_fatal_error((llvm *)"Invalid encoding", (const char *)1);
          goto LABEL_15;
        }
        v26 = 5;
      }
      result = sub_1C5030AF8(v3, *(_QWORD *)(v15 + v13), v26);
LABEL_15:
      v13 += 16;
    }
    while (v14 != v13);
  }
  return result;
}

llvm::raw_ostream *sub_1C5030AF8(llvm::raw_ostream *result, unint64_t a2, int a3)
{
  unint64_t v4;
  llvm::raw_ostream *v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  char v16;
  unint64_t v17;
  int v18;
  int v19;

  v4 = a2;
  v5 = result;
  if (HIDWORD(a2))
  {
    v16 = a3 - 1;
    v17 = (1 << (a3 - 1));
    v18 = v17 - 1;
    v9 = *((_DWORD *)result + 6);
    v8 = *((_DWORD *)result + 7);
    do
    {
      v8 |= (v18 & v4 | v17) << v9;
      *((_DWORD *)v5 + 7) = v8;
      v9 += a3;
      if (v9 >= 0x20)
      {
        result = sub_1C503027C((uint64_t *)v5, v8);
        v19 = *((_DWORD *)v5 + 6);
        if (v19)
          v8 = (v18 & v4 | v17) >> -(char)v19;
        else
          v8 = 0;
        *((_DWORD *)v5 + 7) = v8;
        v9 = ((_BYTE)v19 + (_BYTE)a3) & 0x1F;
      }
      *((_DWORD *)v5 + 6) = v9;
      v4 >>= v16;
    }
    while (v4 >= v17);
  }
  else
  {
    v6 = a3 - 1;
    v7 = 1 << (a3 - 1);
    if (v7 <= a2)
    {
      v9 = *((_DWORD *)result + 6);
      v8 = *((_DWORD *)result + 7);
      do
      {
        v12 = v4 & (v7 - 1) | v7;
        v8 |= v12 << v9;
        *((_DWORD *)v5 + 7) = v8;
        v9 += a3;
        if (v9 >= 0x20)
        {
          result = sub_1C503027C((uint64_t *)v5, v8);
          v13 = *((_DWORD *)v5 + 6);
          if (v13)
            v8 = v12 >> -(char)v13;
          else
            v8 = 0;
          *((_DWORD *)v5 + 7) = v8;
          v9 = ((_BYTE)v13 + (_BYTE)a3) & 0x1F;
        }
        *((_DWORD *)v5 + 6) = v9;
        LODWORD(v4) = v4 >> v6;
      }
      while (v4 >= v7);
    }
    else
    {
      v9 = *((_DWORD *)result + 6);
      v8 = *((_DWORD *)result + 7);
    }
  }
  v10 = ((_DWORD)v4 << v9) | v8;
  *((_DWORD *)v5 + 7) = v10;
  v11 = v9 + a3;
  if (v11 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)v5, v10);
    v14 = *((_DWORD *)v5 + 6);
    v15 = v4 >> -(char)v14;
    if (!v14)
      v15 = 0;
    *((_DWORD *)v5 + 7) = v15;
    v11 = ((_BYTE)v14 + (_BYTE)a3) & 0x1F;
  }
  *((_DWORD *)v5 + 6) = v11;
  return result;
}

char *sub_1C5030C7C(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = *a1;
  v2 = a1[1];
  v4 = (v2 - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v7 = a1[2] - v3;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v8 = 0xFFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8 >> 60)
    sub_1C4764EE4();
  v10 = (char *)operator new(16 * v8);
  v11 = &v10[16 * v4];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  while (v2 != v3)
  {
    v13 = *((_OWORD *)v2 - 1);
    v2 -= 16;
    *((_OWORD *)v11 - 1) = v13;
    v11 -= 16;
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
  }
  v14 = *a1;
  v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v8];
  while (v15 != v14)
  {
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v15 -= 16;
  }
  if (v14)
    operator delete(v14);
  return v12;
}

off_t sub_1C5030D94(off_t result, unint64_t a2, unsigned int a3)
{
  off_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  off_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  char v20[4];
  int v21;
  uint64_t v22;

  v4 = result;
  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2 >> 3;
  v6 = a2 & 7;
  v7 = *(_QWORD **)(result + 8);
  if (!v7)
  {
    v8 = 0;
LABEL_16:
    v16 = (int *)(**(_QWORD **)v4 + v5 - v8);
    if (v6)
    {
      v17 = v16[1] & (-1 << v6) | (a3 >> -(char)v6) & ~(-1 << v6);
      *v16 = *v16 & ~(-1 << v6) | (a3 << v6);
      v16[1] = v17;
    }
    else
    {
      *v16 = a3;
    }
    return result;
  }
  result = (*(uint64_t (**)(_QWORD))(*v7 + 80))(*(_QWORD *)(result + 8));
  v8 = v7[4] - v7[2] + result;
  v9 = v8 - v5;
  if (v8 <= v5)
    goto LABEL_16;
  v10 = *(_QWORD **)(v4 + 8);
  v11 = (*(uint64_t (**)(_QWORD *))(*v10 + 80))(v10) + v10[4] - v10[2];
  if (v6)
    v12 = 8;
  else
    v12 = 4;
  if (v9 >= v12)
    v13 = v12;
  else
    v13 = v9;
  v14 = v12 - v13;
  if (v6)
  {
    llvm::raw_fd_ostream::seek(*(llvm::raw_fd_ostream **)(v4 + 8), v5);
    llvm::raw_fd_stream::read(*(llvm::raw_fd_stream **)(v4 + 8), v20, v13);
    if (v9 <= 7)
    {
      v18 = 0;
      v19 = *(_QWORD **)v4;
      do
      {
        v20[v13 + v18] = *(_BYTE *)(*v19 + v18);
        ++v18;
      }
      while (v14 != v18);
    }
    *(_DWORD *)v20 = *(_DWORD *)v20 & ~(-1 << v6) | (a3 << v6);
    v21 = v21 & (-1 << v6) | (a3 >> -(char)v6) & ~(-1 << v6);
  }
  else
  {
    *(_DWORD *)v20 = a3;
  }
  llvm::raw_fd_ostream::seek(*(llvm::raw_fd_ostream **)(v4 + 8), v5);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(v4 + 8), v20, v13);
  if (v12 > v9)
  {
    v15 = 0;
    do
    {
      *(_BYTE *)(**(_QWORD **)v4 + v15) = v20[v13 + v15];
      ++v15;
    }
    while (v14 != v15);
  }
  return llvm::raw_fd_ostream::seek(*(llvm::raw_fd_ostream **)(v4 + 8), v11);
}

uint64_t sub_1C5030FB4(uint64_t a1, const llvm::Module *a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v24;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  llvm::ValueEnumerator::ValueEnumerator((llvm::ValueEnumerator *)(a1 + 24), a2, a5);
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = a1 + 512;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = a6;
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 528) = (*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4;
  if (a6)
  {
    v10 = (_QWORD *)*a6;
    v8 = a6 + 1;
    v9 = v10;
    if (v10 != v8)
    {
      do
      {
        v11 = (uint64_t *)v9[7];
        v12 = (uint64_t *)v9[8];
        while (v11 != v12)
        {
          v13 = *v11;
          if (*v11)
            v14 = *(_DWORD *)(*v11 + 8) == 1;
          else
            v14 = 0;
          if (v14)
          {
            v15 = *(_QWORD **)(v13 + 80);
            v16 = *(_QWORD *)(v13 + 88) - (_QWORD)v15;
            if (v16)
            {
              v17 = 16 * (v16 >> 4);
              do
              {
                v18 = *v15 & 0xFFFFFFFFFFFFFFF8;
                if ((*v15 & 1) == 0 || !*(_QWORD *)(v18 + 8))
                {
                  v24 = *(uint64_t **)v18;
                  v19 = v24;
                  v20 = *(_DWORD *)(a1 + 528) + 1;
                  *(_DWORD *)(a1 + 528) = v20;
                  *((_DWORD *)sub_1C5031104((uint64_t **)(a1 + 504), (unint64_t)v19, &v24) + 10) = v20;
                }
                v15 += 2;
                v17 -= 16;
              }
              while (v17);
            }
          }
          ++v11;
        }
        v21 = (_QWORD *)v9[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v9[2];
            v14 = *v22 == (_QWORD)v9;
            v9 = v22;
          }
          while (!v14);
        }
        v9 = v22;
      }
      while (v22 != v8);
    }
  }
  return a1;
}

uint64_t **sub_1C5031104(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    *((_DWORD *)v7 + 10) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1C50311D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  char *v9;
  unsigned int ValueID;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[65];

  v17[64] = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  v3 = (uint64_t)(a1 + 3);
  if (a1[3] != v2 && *(_QWORD *)(v2 - 32) == a2)
  {
    sub_1C50244C4(*a1, 0x12u, 3u);
    v6 = a1[4];
    if (a1[3] != v6)
    {
      do
      {
        if (*(_QWORD *)(v6 - 32) != a2)
          break;
        if (*(_BYTE *)(*(_QWORD *)(v6 - 40) + 16) == 22)
          v7 = 2;
        else
          v7 = 1;
        v8 = *(char **)(v6 - 24);
        v9 = *(char **)(v6 - 16);
        v15 = v17;
        v16 = 0x4000000000;
        sub_1C61D2E24((unsigned int *)&v15, v8, v9);
        ValueID = llvm::ValueEnumerator::getValueID(v3, *(_QWORD *)(v6 - 40));
        v11 = v16;
        if (v16 >= (unint64_t)HIDWORD(v16))
        {
          v14 = ValueID;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, v16 + 1, 8);
          ValueID = v14;
          v11 = v16;
        }
        *((_QWORD *)v15 + v11) = ValueID;
        LODWORD(v16) = v16 + 1;
        sub_1C5034740((llvm::raw_ostream *)*a1, v7, (uint64_t)&v15, 0);
        if (v15 != v17)
          free(v15);
        v12 = a1[4];
        v13 = *(void **)(v12 - 24);
        if (v13)
        {
          *(_QWORD *)(v12 - 16) = v13;
          operator delete(v13);
        }
        v6 = v12 - 40;
        a1[4] = v12 - 40;
      }
      while (a1[3] != v12 - 40);
    }
    sub_1C502481C(*a1);
  }
}

void sub_1C503136C(off_t *a1)
{
  off_t *v1;
  uint64_t ModuleFlag;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  off_t *v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  off_t *v12;
  off_t *v13;
  BOOL v14;
  char *v15;
  int64x2_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  llvm::GlobalValue *v53;
  off_t v54;
  unint64_t v55;
  _QWORD *v56;
  off_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  BOOL v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  unsigned int ValueID;
  uint64_t v67;
  llvm::raw_ostream *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *i;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  _BOOL4 v132;
  uint64_t v133;
  uint64_t v134;
  off_t *v135;
  unint64_t *v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  _QWORD *v140;
  unint64_t v141;
  off_t *v142;
  unint64_t v143;
  BOOL v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  llvm::GlobalValue *v155;
  off_t v156;
  unint64_t v157;
  _QWORD *v158;
  off_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  BOOL v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  char **v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  llvm::raw_ostream *v190;
  unsigned int v191;
  unsigned int v192;
  char *v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  llvm::GlobalAlias *v201;
  uint64_t AliaseeObject;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  llvm::ModuleSummaryIndex *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  off_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  char v216;
  _QWORD *v217;
  uint64_t v218;
  unsigned int v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t *v228;
  uint64_t *v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  llvm::raw_ostream *v235;
  llvm::raw_ostream *v236;
  unsigned int v237;
  _QWORD *v238;
  uint64_t ***v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  off_t *v246;
  off_t *v247;
  char *v248;
  std::__shared_weak_count *v249;
  char *v250;
  std::__shared_weak_count *v251;
  char *v252;
  std::__shared_weak_count *v253;
  char *v254;
  std::__shared_weak_count *v255;
  char *v256;
  std::__shared_weak_count *v257;
  char *v258;
  std::__shared_weak_count *v259;
  void *v260;
  unsigned int v261;
  void *v262;
  unsigned int v263;
  void *v264;
  unsigned int v265;
  void *v266;
  unsigned int v267;
  void *v268;
  uint64_t v269;
  _BYTE v270[512];
  void *v271;
  uint64_t v272;
  _BYTE v273[512];
  void *v274;
  unsigned int v275;
  void *v276;
  unsigned int v277;
  uint64_t v278;

  v1 = a1;
  v278 = *MEMORY[0x1E0C80C00];
  ModuleFlag = llvm::Module::getModuleFlag(a1[2], "ThinLTO", 7uLL);
  if (!ModuleFlag || (v3 = *(_QWORD *)(ModuleFlag + 128)) == 0)
  {
    v5 = *v1;
LABEL_8:
    v6 = 20;
    goto LABEL_9;
  }
  v4 = (_QWORD *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = (_QWORD *)*v4;
  v5 = *v1;
  if (*v4)
    goto LABEL_8;
  v6 = 24;
LABEL_9:
  sub_1C50244C4(v5, v6, 4u);
  v7 = (llvm::raw_ostream *)*v1;
  v268 = (void *)9;
  v271 = &v268;
  v272 = 1;
  sub_1C5033BDC(v7, 0xAu, &v271);
  v8 = (llvm::raw_ostream *)*v1;
  v268 = (void *)(8 * *(unsigned __int8 *)(v1[62] + 134));
  v271 = &v268;
  v272 = 1;
  sub_1C5033BDC(v8, 0x14u, &v271);
  if (*(_QWORD *)v1[62] == v1[62] + 8)
  {
    sub_1C502481C(*v1);
    return;
  }
  v9 = (off_t *)v1[63];
  v247 = v1 + 64;
  if (v9 != v1 + 64)
  {
    do
    {
      v10 = (llvm::raw_ostream *)*v1;
      v11 = v9[4];
      v268 = (void *)*((unsigned int *)v9 + 10);
      v269 = v11;
      v271 = &v268;
      v272 = 2;
      sub_1C5033BDC(v10, 0x10u, &v271);
      v12 = (off_t *)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (off_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (off_t *)v9[2];
          v14 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
    }
    while (v13 != v247);
  }
  v15 = (char *)operator new(0x228uLL);
  *(_QWORD *)v15 = &unk_1E813F300;
  *((_QWORD *)v15 + 1) = 0;
  *(_OWORD *)(v15 + 200) = 0u;
  *(_OWORD *)(v15 + 216) = 0u;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_OWORD *)(v15 + 248) = 0u;
  *(_OWORD *)(v15 + 264) = 0u;
  *(_OWORD *)(v15 + 280) = 0u;
  *(_OWORD *)(v15 + 296) = 0u;
  *(_OWORD *)(v15 + 312) = 0u;
  *(_OWORD *)(v15 + 328) = 0u;
  *(_OWORD *)(v15 + 344) = 0u;
  *(_OWORD *)(v15 + 360) = 0u;
  *(_OWORD *)(v15 + 376) = 0u;
  *(_OWORD *)(v15 + 392) = 0u;
  *(_OWORD *)(v15 + 408) = 0u;
  *(_OWORD *)(v15 + 424) = 0u;
  *(_OWORD *)(v15 + 440) = 0u;
  *(_OWORD *)(v15 + 456) = 0u;
  *(_OWORD *)(v15 + 472) = 0u;
  *(_OWORD *)(v15 + 488) = 0u;
  *(_OWORD *)(v15 + 504) = 0u;
  *(_OWORD *)(v15 + 520) = 0u;
  *(_OWORD *)(v15 + 536) = 0u;
  *(_OWORD *)(v15 + 40) = xmmword_1C85F9DE0;
  *((_QWORD *)v15 + 2) = 0;
  *((_QWORD *)v15 + 3) = v15 + 40;
  *(_OWORD *)(v15 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v15 + 72) = xmmword_1C85F6930;
  *(_OWORD *)(v15 + 88) = xmmword_1C85F6860;
  v16 = vdupq_n_s64(4uLL);
  *(int64x2_t *)(v15 + 104) = v16;
  *(int64x2_t *)(v15 + 120) = v16;
  *(int64x2_t *)(v15 + 136) = v16;
  *(int64x2_t *)(v15 + 152) = v16;
  *(_OWORD *)(v15 + 168) = xmmword_1C85F9DD0;
  v17 = *v1;
  *(_OWORD *)(v15 + 184) = xmmword_1C85F6860;
  *((_QWORD *)v15 + 4) = 0x200000000ALL;
  v258 = v15 + 24;
  v259 = (std::__shared_weak_count *)v15;
  v241 = sub_1C50247B8(v17, (uint64_t)&v258);
  v18 = v259;
  if (v259)
  {
    p_shared_owners = (unint64_t *)&v259->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)operator new(0x228uLL);
  *(_QWORD *)v21 = &unk_1E813F300;
  *((_QWORD *)v21 + 1) = 0;
  *(_OWORD *)(v21 + 200) = 0u;
  *(_OWORD *)(v21 + 216) = 0u;
  *(_OWORD *)(v21 + 232) = 0u;
  *(_OWORD *)(v21 + 248) = 0u;
  *(_OWORD *)(v21 + 264) = 0u;
  *(_OWORD *)(v21 + 280) = 0u;
  *(_OWORD *)(v21 + 296) = 0u;
  *(_OWORD *)(v21 + 312) = 0u;
  *(_OWORD *)(v21 + 328) = 0u;
  *(_OWORD *)(v21 + 344) = 0u;
  *(_OWORD *)(v21 + 360) = 0u;
  *(_OWORD *)(v21 + 376) = 0u;
  *(_OWORD *)(v21 + 392) = 0u;
  *(_OWORD *)(v21 + 408) = 0u;
  *(_OWORD *)(v21 + 424) = 0u;
  *(_OWORD *)(v21 + 440) = 0u;
  *(_OWORD *)(v21 + 456) = 0u;
  *(_OWORD *)(v21 + 472) = 0u;
  *(_OWORD *)(v21 + 488) = 0u;
  *(_OWORD *)(v21 + 504) = 0u;
  v22 = 19;
  if (!byte_1ED7F4CD0)
    v22 = 1;
  *((_QWORD *)v21 + 5) = v22;
  *(_OWORD *)(v21 + 520) = 0uLL;
  *(_OWORD *)(v21 + 536) = 0uLL;
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = v21 + 40;
  *((_OWORD *)v21 + 3) = xmmword_1C85F9FD0;
  *((_OWORD *)v21 + 4) = xmmword_1C85F9F40;
  v23 = vdupq_n_s64(4uLL);
  *((_OWORD *)v21 + 5) = xmmword_1C850F390;
  *((int64x2_t *)v21 + 6) = v23;
  *((int64x2_t *)v21 + 7) = v23;
  *((int64x2_t *)v21 + 8) = v23;
  *((int64x2_t *)v21 + 9) = v23;
  *((_OWORD *)v21 + 10) = xmmword_1C640F860;
  v24 = *v1;
  *((_OWORD *)v21 + 11) = xmmword_1C85F9FE0;
  *((_QWORD *)v21 + 24) = 4;
  *((_QWORD *)v21 + 4) = 0x200000000ALL;
  v256 = v21 + 24;
  v257 = (std::__shared_weak_count *)v21;
  v240 = sub_1C50247B8(v24, (uint64_t)&v256);
  v25 = v257;
  if (v257)
  {
    v26 = (unint64_t *)&v257->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (char *)operator new(0x228uLL);
  *(_QWORD *)v28 = &unk_1E813F300;
  *((_QWORD *)v28 + 1) = 0;
  *(_OWORD *)(v28 + 120) = 0u;
  *(_OWORD *)(v28 + 136) = 0u;
  *(_OWORD *)(v28 + 152) = 0u;
  *(_OWORD *)(v28 + 168) = 0u;
  *(_OWORD *)(v28 + 184) = 0u;
  *(_OWORD *)(v28 + 200) = 0u;
  *(_OWORD *)(v28 + 216) = 0u;
  *(_OWORD *)(v28 + 232) = 0u;
  *(_OWORD *)(v28 + 248) = 0u;
  *(_OWORD *)(v28 + 264) = 0u;
  *(_OWORD *)(v28 + 280) = 0u;
  *(_OWORD *)(v28 + 296) = 0u;
  *(_OWORD *)(v28 + 312) = 0u;
  *(_OWORD *)(v28 + 328) = 0u;
  *(_OWORD *)(v28 + 344) = 0u;
  *(_OWORD *)(v28 + 360) = 0u;
  *(_OWORD *)(v28 + 376) = 0u;
  *(_OWORD *)(v28 + 392) = 0u;
  *(_OWORD *)(v28 + 408) = 0u;
  *(_OWORD *)(v28 + 424) = 0u;
  *(_OWORD *)(v28 + 440) = 0u;
  *(_OWORD *)(v28 + 456) = 0u;
  *(_OWORD *)(v28 + 472) = 0u;
  *(_OWORD *)(v28 + 488) = 0u;
  *(_OWORD *)(v28 + 504) = 0u;
  *(_OWORD *)(v28 + 520) = 0u;
  *(_OWORD *)(v28 + 536) = 0u;
  *(_OWORD *)(v28 + 40) = xmmword_1C85F9E80;
  *((_QWORD *)v28 + 2) = 0;
  *((_QWORD *)v28 + 3) = v28 + 40;
  *(_OWORD *)(v28 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v28 + 72) = xmmword_1C85F6930;
  *(_OWORD *)(v28 + 88) = xmmword_1C85F9DD0;
  v29 = *v1;
  *(_OWORD *)(v28 + 104) = xmmword_1C85F6860;
  *((_QWORD *)v28 + 4) = 0x2000000005;
  v254 = v28 + 24;
  v255 = (std::__shared_weak_count *)v28;
  v244 = sub_1C50247B8(v29, (uint64_t)&v254);
  v30 = v255;
  if (v255)
  {
    v31 = (unint64_t *)&v255->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (char *)operator new(0x228uLL);
  *(_QWORD *)v33 = &unk_1E813F300;
  *((_QWORD *)v33 + 1) = 0;
  *(_OWORD *)(v33 + 136) = 0u;
  *(_OWORD *)(v33 + 152) = 0u;
  *(_OWORD *)(v33 + 168) = 0u;
  *(_OWORD *)(v33 + 184) = 0u;
  *(_OWORD *)(v33 + 200) = 0u;
  *(_OWORD *)(v33 + 216) = 0u;
  *(_OWORD *)(v33 + 232) = 0u;
  *(_OWORD *)(v33 + 248) = 0u;
  *(_OWORD *)(v33 + 264) = 0u;
  *(_OWORD *)(v33 + 280) = 0u;
  *(_OWORD *)(v33 + 296) = 0u;
  *(_OWORD *)(v33 + 312) = 0u;
  *(_OWORD *)(v33 + 328) = 0u;
  *(_OWORD *)(v33 + 344) = 0u;
  *(_OWORD *)(v33 + 360) = 0u;
  *(_OWORD *)(v33 + 376) = 0u;
  *(_OWORD *)(v33 + 392) = 0u;
  *(_OWORD *)(v33 + 408) = 0u;
  *(_OWORD *)(v33 + 424) = 0u;
  *(_OWORD *)(v33 + 440) = 0u;
  *(_OWORD *)(v33 + 456) = 0u;
  *(_OWORD *)(v33 + 472) = 0u;
  *(_OWORD *)(v33 + 488) = 0u;
  *(_OWORD *)(v33 + 504) = 0u;
  *(_OWORD *)(v33 + 520) = 0u;
  *(_OWORD *)(v33 + 536) = 0u;
  *(_OWORD *)(v33 + 40) = xmmword_1C85F9FF0;
  *((_QWORD *)v33 + 2) = 0;
  *((_QWORD *)v33 + 3) = v33 + 40;
  *(_OWORD *)(v33 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v33 + 72) = xmmword_1C85F6930;
  *(int64x2_t *)(v33 + 88) = vdupq_n_s64(4uLL);
  *(_OWORD *)(v33 + 104) = xmmword_1C85F9DD0;
  v34 = *v1;
  *(_OWORD *)(v33 + 120) = xmmword_1C85F6860;
  *((_QWORD *)v33 + 4) = 0x2000000006;
  v252 = v33 + 24;
  v253 = (std::__shared_weak_count *)v33;
  v243 = sub_1C50247B8(v34, (uint64_t)&v252);
  v35 = v253;
  if (v253)
  {
    v36 = (unint64_t *)&v253->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (char *)operator new(0x228uLL);
  *(_QWORD *)v38 = &unk_1E813F300;
  *((_QWORD *)v38 + 1) = 0;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  *(_OWORD *)(v38 + 152) = 0u;
  *(_OWORD *)(v38 + 168) = 0u;
  *(_OWORD *)(v38 + 184) = 0u;
  *(_OWORD *)(v38 + 200) = 0u;
  *(_OWORD *)(v38 + 216) = 0u;
  *(_OWORD *)(v38 + 232) = 0u;
  *(_OWORD *)(v38 + 248) = 0u;
  *(_OWORD *)(v38 + 264) = 0u;
  *(_OWORD *)(v38 + 280) = 0u;
  *(_OWORD *)(v38 + 296) = 0u;
  *(_OWORD *)(v38 + 312) = 0u;
  *(_OWORD *)(v38 + 328) = 0u;
  *(_OWORD *)(v38 + 344) = 0u;
  *(_OWORD *)(v38 + 360) = 0u;
  *(_OWORD *)(v38 + 376) = 0u;
  *(_OWORD *)(v38 + 392) = 0u;
  *(_OWORD *)(v38 + 408) = 0u;
  *(_OWORD *)(v38 + 424) = 0u;
  *(_OWORD *)(v38 + 440) = 0u;
  *(_OWORD *)(v38 + 456) = 0u;
  *(_OWORD *)(v38 + 472) = 0u;
  *(_OWORD *)(v38 + 488) = 0u;
  *(_OWORD *)(v38 + 504) = 0u;
  *(_OWORD *)(v38 + 40) = xmmword_1C85F9F20;
  *(_OWORD *)(v38 + 520) = 0u;
  *(_OWORD *)(v38 + 536) = 0u;
  *((_QWORD *)v38 + 2) = 0;
  *((_QWORD *)v38 + 3) = v38 + 40;
  *(_OWORD *)(v38 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v38 + 72) = xmmword_1C85F6930;
  v39 = *v1;
  *(_OWORD *)(v38 + 88) = xmmword_1C85F6860;
  *((_QWORD *)v38 + 4) = 0x2000000004;
  v250 = v38 + 24;
  v251 = (std::__shared_weak_count *)v38;
  v237 = sub_1C50247B8(v39, (uint64_t)&v250);
  v40 = v251;
  if (v251)
  {
    v41 = (unint64_t *)&v251->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (char *)operator new(0x228uLL);
  *(_QWORD *)v43 = &unk_1E813F300;
  *((_QWORD *)v43 + 1) = 0;
  *(_OWORD *)(v43 + 120) = 0u;
  *(_OWORD *)(v43 + 136) = 0u;
  *(_OWORD *)(v43 + 152) = 0u;
  *(_OWORD *)(v43 + 168) = 0u;
  *(_OWORD *)(v43 + 184) = 0u;
  *(_OWORD *)(v43 + 200) = 0u;
  *(_OWORD *)(v43 + 216) = 0u;
  *(_OWORD *)(v43 + 232) = 0u;
  *(_OWORD *)(v43 + 248) = 0u;
  *(_OWORD *)(v43 + 264) = 0u;
  *(_OWORD *)(v43 + 280) = 0u;
  *(_OWORD *)(v43 + 296) = 0u;
  *(_OWORD *)(v43 + 312) = 0u;
  *(_OWORD *)(v43 + 328) = 0u;
  *(_OWORD *)(v43 + 344) = 0u;
  *(_OWORD *)(v43 + 360) = 0u;
  *(_OWORD *)(v43 + 376) = 0u;
  *(_OWORD *)(v43 + 392) = 0u;
  *(_OWORD *)(v43 + 408) = 0u;
  *(_OWORD *)(v43 + 424) = 0u;
  *(_OWORD *)(v43 + 440) = 0u;
  *(_OWORD *)(v43 + 456) = 0u;
  *(_OWORD *)(v43 + 472) = 0u;
  *(_OWORD *)(v43 + 488) = 0u;
  *(_OWORD *)(v43 + 504) = 0u;
  *(_OWORD *)(v43 + 520) = 0u;
  *(_OWORD *)(v43 + 536) = 0u;
  *(_OWORD *)(v43 + 40) = xmmword_1C85FA000;
  *((_QWORD *)v43 + 2) = 0;
  *((_QWORD *)v43 + 3) = v43 + 40;
  *(_OWORD *)(v43 + 56) = xmmword_1C85F6860;
  *(_OWORD *)(v43 + 72) = xmmword_1C85F6860;
  *(_OWORD *)(v43 + 88) = xmmword_1C85F9DD0;
  v44 = *v1;
  *(_OWORD *)(v43 + 104) = xmmword_1C85F6860;
  *((_QWORD *)v43 + 4) = 0x2000000005;
  v248 = v43 + 24;
  v249 = (std::__shared_weak_count *)v43;
  v45 = sub_1C50247B8(v44, (uint64_t)&v248);
  v46 = v249;
  if (v249)
  {
    v47 = (unint64_t *)&v249->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v268 = v270;
  v269 = 0x4000000000;
  v49 = (_QWORD *)v1[2];
  v50 = v49 + 3;
  v51 = (_QWORD *)v49[4];
  v246 = v1;
  v242 = v45;
  if (v51 == v49 + 3)
    goto LABEL_241;
  v52 = (uint64_t)(v1 + 3);
  v238 = v49 + 3;
  do
  {
    if (v51)
      v53 = (llvm::GlobalValue *)(v51 - 7);
    else
      v53 = 0;
    if ((*((_BYTE *)v53 + 23) & 0x10) == 0)
      llvm::report_fatal_error((llvm *)"Unexpected anonymous function when writing summary", (const char *)1);
    v54 = v1[62];
    v55 = sub_1C4EE9DE0(v53);
    v58 = *(_QWORD **)(v54 + 8);
    v57 = v54 + 8;
    v56 = v58;
    if (!v58)
      goto LABEL_66;
    v59 = (_QWORD *)v57;
    do
    {
      v60 = v56[4];
      v61 = v60 >= v55;
      if (v60 >= v55)
        v62 = v56;
      else
        v62 = v56 + 1;
      if (v61)
        v59 = v56;
      v56 = (_QWORD *)*v62;
    }
    while (*v62);
    if (v59 == (_QWORD *)v57 || v59[4] > v55)
LABEL_66:
      v59 = (_QWORD *)v57;
    if (v59 == (_QWORD *)v57)
      v63 = 0;
    else
      v63 = (uint64_t)(v59 + 4);
    v64 = v63 & 0xFFFFFFFFFFFFFFF8;
    if ((v63 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v65 = *(uint64_t **)(v64 + 24);
      if (*(uint64_t **)(v64 + 32) != v65)
      {
        v245 = *v65;
        ValueID = llvm::ValueEnumerator::getValueID(v52, (uint64_t)v53);
        v67 = v269;
        if (v269 >= (unint64_t)HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
          v67 = v269;
        }
        *((_QWORD *)v268 + v67) = ValueID;
        LODWORD(v269) = v269 + 1;
        v68 = (llvm::raw_ostream *)*v1;
        v69 = *(_QWORD *)(v245 + 104);
        v239 = (uint64_t ***)v53;
        if (v69)
        {
          v70 = *(_QWORD *)(v69 + 8) - *(_QWORD *)v69;
          if (v70)
          {
            v271 = *(void **)v69;
            v272 = v70 >> 3;
            sub_1C5033BDC(v68, 0xBu, &v271);
            v69 = *(_QWORD *)(v245 + 104);
            v271 = v273;
            v272 = 0x4000000000;
            if (!v69)
              goto LABEL_107;
          }
          else
          {
            v271 = v273;
            v272 = 0x4000000000;
          }
          v71 = *(uint64_t **)(v69 + 24);
          v72 = *(uint64_t **)(v69 + 32);
          if (v72 == v71)
            goto LABEL_89;
          v73 = 0;
          LODWORD(v272) = 0;
          do
          {
            v74 = *v71;
            if (v73 >= HIDWORD(v272))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v73 + 1, 8);
              v73 = v272;
            }
            *((_QWORD *)v271 + v73) = v74;
            v75 = (v272 + 1);
            LODWORD(v272) = v75;
            v76 = v71[1];
            if (v75 >= HIDWORD(v272))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v75 + 1, 8);
              LODWORD(v75) = v272;
            }
            *((_QWORD *)v271 + v75) = v76;
            v73 = v272 + 1;
            LODWORD(v272) = v272 + 1;
            v71 += 2;
          }
          while (v71 != v72);
          sub_1C5034740(v68, 0xCu, (uint64_t)&v271, 0);
          v69 = *(_QWORD *)(v245 + 104);
          if (v69)
          {
LABEL_89:
            v77 = *(uint64_t **)(v69 + 48);
            v78 = *(uint64_t **)(v69 + 56);
            if (v78 == v77)
              goto LABEL_97;
            v79 = 0;
            LODWORD(v272) = 0;
            do
            {
              v80 = *v77;
              if (v79 >= HIDWORD(v272))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v79 + 1, 8);
                v79 = v272;
              }
              *((_QWORD *)v271 + v79) = v80;
              v81 = (v272 + 1);
              LODWORD(v272) = v81;
              v82 = v77[1];
              if (v81 >= HIDWORD(v272))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v81 + 1, 8);
                LODWORD(v81) = v272;
              }
              *((_QWORD *)v271 + v81) = v82;
              v79 = v272 + 1;
              LODWORD(v272) = v272 + 1;
              v77 += 2;
            }
            while (v77 != v78);
            sub_1C5034740(v68, 0xDu, (uint64_t)&v271, 0);
            v69 = *(_QWORD *)(v245 + 104);
            if (v69)
            {
LABEL_97:
              v83 = *(uint64_t **)(v69 + 72);
              v84 = *(uint64_t **)(v69 + 80);
              if (v84 == v83)
                goto LABEL_106;
              do
              {
                LODWORD(v272) = 0;
                v85 = *v83;
                if (HIDWORD(v272))
                {
                  v86 = 0;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, 1uLL, 8);
                  v86 = v272;
                }
                *((_QWORD *)v271 + v86) = v85;
                v87 = (v272 + 1);
                LODWORD(v272) = v87;
                v88 = v83[1];
                if (v87 >= HIDWORD(v272))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v87 + 1, 8);
                  LODWORD(v87) = v272;
                }
                *((_QWORD *)v271 + v87) = v88;
                LODWORD(v272) = v272 + 1;
                sub_1C5040FCC((unsigned int *)&v271, (uint64_t)v271 + 8 * v272, (char *)v83[2], (char *)v83[3]);
                sub_1C5034740(v68, 0xEu, (uint64_t)&v271, 0);
                v83 += 5;
              }
              while (v83 != v84);
              v69 = *(_QWORD *)(v245 + 104);
              if (v69)
              {
LABEL_106:
                v89 = *(uint64_t **)(v69 + 96);
                for (i = *(uint64_t **)(v69 + 104); v89 != i; v89 += 5)
                {
                  LODWORD(v272) = 0;
                  v111 = *v89;
                  if (HIDWORD(v272))
                  {
                    v112 = 0;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, 1uLL, 8);
                    v112 = v272;
                  }
                  *((_QWORD *)v271 + v112) = v111;
                  v113 = (v272 + 1);
                  LODWORD(v272) = v113;
                  v114 = v89[1];
                  if (v113 >= HIDWORD(v272))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v113 + 1, 8);
                    LODWORD(v113) = v272;
                  }
                  *((_QWORD *)v271 + v113) = v114;
                  LODWORD(v272) = v272 + 1;
                  sub_1C5040FCC((unsigned int *)&v271, (uint64_t)v271 + 8 * v272, (char *)v89[2], (char *)v89[3]);
                  sub_1C5034740(v68, 0xFu, (uint64_t)&v271, 0);
                }
              }
            }
          }
        }
        else
        {
          v271 = v273;
          v272 = 0x4000000000;
        }
LABEL_107:
        v236 = v68;
        v91 = *(uint64_t ***)(v245 + 112);
        if (v91)
        {
          v93 = *v91;
          v92 = v91[1];
          if (v92 != *v91)
          {
            LODWORD(v272) = 0;
            do
            {
              v94 = *v93;
              v95 = v272;
              if (v272 >= (unint64_t)HIDWORD(v272))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v272 + 1, 8);
                v95 = v272;
              }
              *((_QWORD *)v271 + v95) = v94;
              LODWORD(v272) = v272 + 1;
              v265 = *((_DWORD *)v93 + 4);
              if (v265 > 0x40)
              {
                v264 = (void *)operator new[]();
                memcpy(v264, (const void *)v93[1], (((unint64_t)v265 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v264 = (void *)v93[1];
              }
              v267 = *((_DWORD *)v93 + 8);
              if (v267 > 0x40)
              {
                v266 = (void *)operator new[]();
                memcpy(v266, (const void *)v93[3], (((unint64_t)v267 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v266 = (void *)v93[3];
              }
              llvm::ConstantRange::sextOrTrunc((llvm::ConstantRange *)&v264, 0x40u, (uint64_t)&v274);
              if (v265 >= 0x41 && v264)
                MEMORY[0x1CAA32F9C](v264, 0x1000C8000313F17);
              v264 = v274;
              v265 = v275;
              v275 = 0;
              if (v267 >= 0x41 && v266)
              {
                MEMORY[0x1CAA32F9C](v266, 0x1000C8000313F17);
                v266 = v276;
                v267 = v277;
                v277 = 0;
                if (v275 >= 0x41 && v274)
                  MEMORY[0x1CAA32F9C](v274, 0x1000C8000313F17);
              }
              else
              {
                v266 = v276;
                v267 = v277;
              }
              v96 = (uint64_t *)&v264;
              if (v265 >= 0x41)
                v96 = (uint64_t *)v264;
              sub_1C5036C04(&v271, *v96);
              v97 = (uint64_t *)&v266;
              if (v267 >= 0x41)
                v97 = (uint64_t *)v266;
              sub_1C5036C04(&v271, *v97);
              if (v267 >= 0x41 && v266)
                MEMORY[0x1CAA32F9C](v266, 0x1000C8000313F17);
              if (v265 >= 0x41 && v264)
                MEMORY[0x1CAA32F9C](v264, 0x1000C8000313F17);
              v99 = v93[5];
              v98 = v93[6];
              v100 = v272;
              if (v272 >= (unint64_t)HIDWORD(v272))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v272 + 1, 8);
                v100 = v272;
              }
              *((_QWORD *)v271 + v100) = 0xAAAAAAAAAAAAAAABLL * ((v98 - v99) >> 4);
              LODWORD(v272) = v272 + 1;
              v101 = v93[5];
              v102 = v93[6];
              if (v101 != v102)
              {
                v103 = v101 + 32;
                do
                {
                  v105 = v103 - 32;
                  v104 = *(_QWORD *)(v103 - 32);
                  v106 = v272;
                  if (v272 >= (unint64_t)HIDWORD(v272))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v272 + 1, 8);
                    v106 = v272;
                  }
                  *((_QWORD *)v271 + v106) = v104;
                  LODWORD(v272) = v272 + 1;
                  v107 = llvm::ValueEnumerator::getValueID(v52, *(_QWORD *)((*(_QWORD *)(v103 - 24) & 0xFFFFFFFFFFFFFFF8) + 8));
                  v108 = v272;
                  if (v272 >= (unint64_t)HIDWORD(v272))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v272 + 1, 8);
                    v108 = v272;
                  }
                  *((_QWORD *)v271 + v108) = v107;
                  LODWORD(v272) = v272 + 1;
                  v261 = *(_DWORD *)(v103 - 8);
                  if (v261 > 0x40)
                  {
                    v260 = (void *)operator new[]();
                    memcpy(v260, *(const void **)(v103 - 16), (((unint64_t)v261 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v260 = *(void **)(v103 - 16);
                  }
                  v263 = *(_DWORD *)(v103 + 8);
                  if (v263 > 0x40)
                  {
                    v262 = (void *)operator new[]();
                    memcpy(v262, *(const void **)v103, (((unint64_t)v263 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v262 = *(void **)v103;
                  }
                  llvm::ConstantRange::sextOrTrunc((llvm::ConstantRange *)&v260, 0x40u, (uint64_t)&v274);
                  if (v261 >= 0x41 && v260)
                    MEMORY[0x1CAA32F9C](v260, 0x1000C8000313F17);
                  v260 = v274;
                  v261 = v275;
                  v275 = 0;
                  if (v263 >= 0x41 && v262)
                  {
                    MEMORY[0x1CAA32F9C](v262, 0x1000C8000313F17);
                    v262 = v276;
                    v263 = v277;
                    v277 = 0;
                    if (v275 >= 0x41 && v274)
                      MEMORY[0x1CAA32F9C](v274, 0x1000C8000313F17);
                  }
                  else
                  {
                    v262 = v276;
                    v263 = v277;
                  }
                  if (v261 >= 0x41)
                    v109 = (uint64_t *)v260;
                  else
                    v109 = (uint64_t *)&v260;
                  sub_1C5036C04(&v271, *v109);
                  if (v263 >= 0x41)
                    v110 = (uint64_t *)v262;
                  else
                    v110 = (uint64_t *)&v262;
                  sub_1C5036C04(&v271, *v110);
                  if (v263 >= 0x41 && v262)
                    MEMORY[0x1CAA32F9C](v262, 0x1000C8000313F17);
                  if (v261 >= 0x41 && v260)
                    MEMORY[0x1CAA32F9C](v260, 0x1000C8000313F17);
                  v103 += 48;
                }
                while (v105 + 48 != v102);
              }
              v93 += 8;
            }
            while (v93 != v92);
            if ((_DWORD)v272)
              sub_1C5034740(v236, 0x19u, (uint64_t)&v271, 0);
          }
        }
        if (v271 != v273)
          free(v271);
        v115 = llvm::FunctionSummary::specialRefCounts((llvm::FunctionSummary *)v245);
        v116 = *(unsigned int *)(v245 + 12);
        v117 = v269;
        if (v269 >= (unint64_t)HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
          v117 = v269;
        }
        *((_QWORD *)v268 + v117) = v116 & 0xF | (16 * ((v116 >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | (((v116 >> 4) & 3) << 8);
        v118 = (v269 + 1);
        LODWORD(v269) = v118;
        v119 = *(unsigned int *)(v245 + 64);
        v1 = v246;
        if (v118 >= HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v118 + 1, 8);
          LODWORD(v118) = v269;
        }
        *((_QWORD *)v268 + v118) = v119;
        v120 = (v269 + 1);
        LODWORD(v269) = v120;
        v121 = *(_DWORD *)(v245 + 68);
        if (v120 >= HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v120 + 1, 8);
          LODWORD(v120) = v269;
        }
        *((_QWORD *)v268 + v120) = v121 & 0x3FF;
        v122 = (v269 + 1);
        LODWORD(v269) = v122;
        v123 = *(_QWORD *)(v245 + 40);
        v124 = *(_QWORD *)(v245 + 48);
        if (v122 >= HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v122 + 1, 8);
          LODWORD(v122) = v269;
        }
        *((_QWORD *)v268 + v122) = (v124 - v123) >> 3;
        v125 = (v269 + 1);
        LODWORD(v269) = v125;
        if (v125 >= HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v125 + 1, 8);
          LODWORD(v125) = v269;
        }
        *((_QWORD *)v268 + v125) = v115;
        v126 = (v269 + 1);
        LODWORD(v269) = v126;
        if (v126 >= HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v126 + 1, 8);
          LODWORD(v126) = v269;
        }
        *((_QWORD *)v268 + v126) = HIDWORD(v115);
        LODWORD(v269) = v269 + 1;
        v127 = *(_QWORD **)(v245 + 40);
        v128 = *(_QWORD *)(v245 + 48) - (_QWORD)v127;
        v45 = v242;
        if (v128)
        {
          v129 = 8 * (v128 >> 3);
          do
          {
            v130 = llvm::ValueEnumerator::getValueID(v52, *(_QWORD *)((*v127 & 0xFFFFFFFFFFFFFFF8) + 8));
            v131 = v269;
            if (v269 >= (unint64_t)HIDWORD(v269))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
              v131 = v269;
            }
            *((_QWORD *)v268 + v131) = v130;
            LODWORD(v269) = v269 + 1;
            ++v127;
            v129 -= 8;
          }
          while (v129);
        }
        llvm::Function::getEntryCount(v239, 0, (uint64_t)&v271);
        v132 = (v273[0] | ForceSummaryEdgesCold) != 0;
        v133 = *(_QWORD *)(v245 + 80);
        v134 = *(_QWORD *)(v245 + 88);
        v135 = v247;
        if (v134 == v133)
        {
LABEL_231:
          if (byte_1ED7F4CD0)
            v149 = 19;
          else
            v149 = 1;
          if (v132)
            v150 = v241;
          else
            v150 = v240;
          if (v132)
            v151 = 2;
          else
            v151 = v149;
          sub_1C5034740((llvm::raw_ostream *)*v246, v151, (uint64_t)&v268, v150);
          LODWORD(v269) = 0;
          v50 = v238;
          goto LABEL_72;
        }
        while (1)
        {
          v136 = (unint64_t *)(*(_QWORD *)v133 & 0xFFFFFFFFFFFFFFF8);
          if ((*(_QWORD *)v133 & 1) != 0 && (v137 = v136[1]) != 0)
          {
            v138 = llvm::ValueEnumerator::getValueID(v52, v137);
            v135 = v247;
            v139 = v138;
          }
          else
          {
            v140 = (_QWORD *)*v135;
            if (!*v135)
              goto LABEL_219;
            v141 = *v136;
            v142 = v135;
            do
            {
              v143 = v140[4];
              v144 = v143 >= v141;
              if (v143 >= v141)
                v145 = v140;
              else
                v145 = v140 + 1;
              if (v144)
                v142 = v140;
              v140 = (_QWORD *)*v145;
            }
            while (*v145);
            if (v142 == v135 || v142[4] > v141)
LABEL_219:
              v142 = v135;
            v139 = *((_DWORD *)v142 + 10);
          }
          v146 = v269;
          if (v269 >= (unint64_t)HIDWORD(v269))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
            v135 = v247;
            v146 = v269;
          }
          *((_QWORD *)v268 + v146) = v139;
          v147 = (v269 + 1);
          LODWORD(v269) = v269 + 1;
          if (v132)
            break;
          if (byte_1ED7F4CD0)
          {
            v148 = (unint64_t)*(unsigned int *)(v133 + 8) >> 3;
            goto LABEL_227;
          }
LABEL_230:
          v133 += 16;
          if (v133 == v134)
            goto LABEL_231;
        }
        v148 = *(_DWORD *)(v133 + 8) & 7;
LABEL_227:
        if (v147 >= HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v147 + 1, 8);
          v135 = v247;
          LODWORD(v147) = v269;
        }
        *((_QWORD *)v268 + v147) = v148;
        LODWORD(v269) = v269 + 1;
        goto LABEL_230;
      }
    }
LABEL_72:
    v51 = (_QWORD *)v51[1];
  }
  while (v51 != v50);
  v49 = (_QWORD *)v1[2];
LABEL_241:
  v152 = v49 + 1;
  v153 = (_QWORD *)v49[2];
  if (v153 == v49 + 1)
    goto LABEL_295;
  v154 = (uint64_t)(v1 + 3);
  do
  {
    if (v153)
      v155 = (llvm::GlobalValue *)(v153 - 7);
    else
      v155 = 0;
    v156 = v1[62];
    v157 = sub_1C4EE9DE0(v155);
    v160 = *(_QWORD **)(v156 + 8);
    v159 = v156 + 8;
    v158 = v160;
    if (!v160)
      goto LABEL_257;
    v161 = (_QWORD *)v159;
    do
    {
      v162 = v158[4];
      v163 = v162 >= v157;
      if (v162 >= v157)
        v164 = v158;
      else
        v164 = v158 + 1;
      if (v163)
        v161 = v158;
      v158 = (_QWORD *)*v164;
    }
    while (*v164);
    if (v161 == (_QWORD *)v159 || v161[4] > v157)
LABEL_257:
      v161 = (_QWORD *)v159;
    if (v161 == (_QWORD *)v159)
      v165 = 0;
    else
      v165 = (uint64_t)(v161 + 4);
    v166 = v165 & 0xFFFFFFFFFFFFFFF8;
    if ((v165 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v167 = *(uint64_t **)(v166 + 24);
      if (*(uint64_t **)(v166 + 32) != v167)
      {
        v168 = *v167;
        v169 = llvm::ValueEnumerator::getValueID(v154, (uint64_t)v155);
        v170 = v269;
        if (v269 >= (unint64_t)HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
          v170 = v269;
        }
        *((_QWORD *)v268 + v170) = v169;
        v171 = (v269 + 1);
        LODWORD(v269) = v171;
        v172 = *(unsigned int *)(v168 + 12);
        if (v171 >= HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v171 + 1, 8);
          LODWORD(v171) = v269;
        }
        *((_QWORD *)v268 + v171) = v172 & 0xF | (16 * ((v172 >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | (((v172 >> 4) & 3) << 8);
        v173 = (v269 + 1);
        LODWORD(v269) = v173;
        v174 = *(_DWORD *)(v168 + 72);
        if (v173 >= HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v173 + 1, 8);
          LODWORD(v173) = v269;
        }
        *((_QWORD *)v268 + v173) = v174 & 0x1F;
        v175 = (v269 + 1);
        LODWORD(v269) = v269 + 1;
        v176 = *(char ***)(v168 + 64);
        if (v176)
        {
          v178 = *v176;
          v177 = v176[1];
          v179 = v177 - v178;
          if (v177 != v178)
          {
            v180 = *(_QWORD *)(v168 + 40);
            v181 = *(_QWORD *)(v168 + 48);
            if (v175 >= HIDWORD(v269))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v175 + 1, 8);
              LODWORD(v175) = v269;
            }
            v182 = 0;
            v179 >>= 4;
            *((_QWORD *)v268 + v175) = (v181 - v180) >> 3;
            LODWORD(v175) = v269 + 1;
            LODWORD(v269) = v269 + 1;
            goto LABEL_276;
          }
        }
        else
        {
          v179 = 0;
          v178 = 0;
        }
        v182 = 1;
LABEL_276:
        v183 = v175;
        v184 = *(_QWORD **)(v168 + 40);
        v175 = v175;
        v185 = *(_QWORD *)(v168 + 48) - (_QWORD)v184;
        if (v185)
        {
          v186 = 8 * (v185 >> 3);
          do
          {
            v187 = llvm::ValueEnumerator::getValueID(v154, *(_QWORD *)((*v184 & 0xFFFFFFFFFFFFFFF8) + 8));
            v188 = v269;
            if (v269 >= (unint64_t)HIDWORD(v269))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
              v188 = v269;
            }
            *((_QWORD *)v268 + v188) = v187;
            v175 = (v269 + 1);
            LODWORD(v269) = v269 + 1;
            ++v184;
            v186 -= 8;
          }
          while (v186);
        }
        v189 = 8 * v175 - 8 * v183;
        if (v189 >= 16)
          qsort((char *)v268 + 8 * v183, (unint64_t)v189 >> 3, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C61D2EA4);
        v1 = v246;
        if ((v182 & 1) != 0)
        {
          v190 = (llvm::raw_ostream *)*v246;
          v191 = 3;
          v192 = v244;
        }
        else
        {
          v193 = &v178[16 * v179];
          if (v179)
          {
            do
            {
              v194 = llvm::ValueEnumerator::getValueID(v154, *(_QWORD *)((*(_QWORD *)v178 & 0xFFFFFFFFFFFFFFF8) + 8));
              v195 = v269;
              if (v269 >= (unint64_t)HIDWORD(v269))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
                v195 = v269;
              }
              *((_QWORD *)v268 + v195) = v194;
              v196 = (v269 + 1);
              LODWORD(v269) = v196;
              v197 = *((_QWORD *)v178 + 1);
              if (v196 >= HIDWORD(v269))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v196 + 1, 8);
                LODWORD(v196) = v269;
              }
              *((_QWORD *)v268 + v196) = v197;
              LODWORD(v269) = v269 + 1;
              v178 += 16;
            }
            while (v178 != v193);
          }
          v190 = (llvm::raw_ostream *)*v246;
          v191 = 23;
          v192 = v243;
        }
        sub_1C5034740(v190, v191, (uint64_t)&v268, v192);
        LODWORD(v269) = 0;
      }
    }
    v153 = (_QWORD *)v153[1];
  }
  while (v153 != v152);
  v49 = (_QWORD *)v1[2];
  v45 = v242;
LABEL_295:
  v198 = v49 + 5;
  v199 = (_QWORD *)v49[6];
  if (v199 != v49 + 5)
  {
    v200 = (uint64_t)(v1 + 3);
    do
    {
      if (v199)
        v201 = (llvm::GlobalAlias *)(v199 - 6);
      else
        v201 = 0;
      AliaseeObject = llvm::GlobalAlias::getAliaseeObject(v201);
      if ((*(_BYTE *)(AliaseeObject + 23) & 0x10) != 0)
      {
        v203 = AliaseeObject;
        v204 = llvm::ValueEnumerator::getValueID(v200, (uint64_t)v201);
        v205 = llvm::ValueEnumerator::getValueID(v200, v203);
        v206 = v269;
        if (v269 >= (unint64_t)HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
          v206 = v269;
        }
        *((_QWORD *)v268 + v206) = v204;
        LODWORD(v269) = v269 + 1;
        v1 = v246;
        v207 = (llvm::ModuleSummaryIndex *)v246[62];
        v208 = sub_1C4EE9DE0(v201);
        v209 = *(unsigned int *)(llvm::ModuleSummaryIndex::getGlobalValueSummary(v207, v208) + 12);
        v210 = v269;
        if (v269 >= (unint64_t)HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
          v210 = v269;
        }
        *((_QWORD *)v268 + v210) = v209 & 0xF | (16 * ((v209 >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | (((v209 >> 4) & 3) << 8);
        v211 = (v269 + 1);
        LODWORD(v269) = v211;
        if (v211 >= HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v211 + 1, 8);
          LODWORD(v211) = v269;
        }
        *((_QWORD *)v268 + v211) = v205;
        LODWORD(v269) = v269 + 1;
        sub_1C5034740((llvm::raw_ostream *)*v246, 7u, (uint64_t)&v268, v237);
        LODWORD(v269) = 0;
      }
      v199 = (_QWORD *)v199[1];
    }
    while (v199 != v198);
  }
  v212 = v1[62];
  v213 = *(_QWORD **)(v212 + 80);
  v214 = (_QWORD *)(v212 + 88);
  if (v213 != (_QWORD *)(v212 + 88))
  {
    do
    {
      v215 = v1[1];
      v216 = *((_BYTE *)v213 + 55);
      if (v216 >= 0)
        v217 = v213 + 4;
      else
        v217 = (_QWORD *)v213[4];
      if (v216 >= 0)
        v218 = v216 & 0x7F;
      else
        v218 = v213[5];
      v219 = sub_1C5E3DF4C(v217, (uint64_t)v217 + v218);
      v220 = llvm::StringTableBuilder::add(v215, (uint64_t)v217, v218 | ((unint64_t)v219 << 32));
      v221 = v269;
      if (v269 >= (unint64_t)HIDWORD(v269))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
        v221 = v269;
      }
      *((_QWORD *)v268 + v221) = v220;
      v222 = (v269 + 1);
      LODWORD(v269) = v269 + 1;
      v223 = *((_BYTE *)v213 + 55);
      v224 = v223;
      v225 = v223 & 0x7F;
      if (v224 >= 0)
        v226 = v225;
      else
        v226 = v213[5];
      if (v222 >= HIDWORD(v269))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v222 + 1, 8);
        LODWORD(v222) = v269;
      }
      *((_QWORD *)v268 + v222) = v226;
      v227 = v269 + 1;
      LODWORD(v269) = v269 + 1;
      v228 = (uint64_t *)v213[7];
      v229 = (uint64_t *)v213[8];
      while (v228 != v229)
      {
        v230 = *v228;
        if (v227 >= HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v227 + 1, 8);
          v227 = v269;
        }
        *((_QWORD *)v268 + v227) = v230;
        LODWORD(v269) = v269 + 1;
        v231 = llvm::ValueEnumerator::getValueID((uint64_t)(v1 + 3), *(_QWORD *)((v228[1] & 0xFFFFFFFFFFFFFFF8) + 8));
        v232 = v269;
        if (v269 >= (unint64_t)HIDWORD(v269))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
          v232 = v269;
        }
        *((_QWORD *)v268 + v232) = v231;
        v227 = v269 + 1;
        LODWORD(v269) = v269 + 1;
        v228 += 2;
      }
      sub_1C5034740((llvm::raw_ostream *)*v1, 0x16u, (uint64_t)&v268, v45);
      LODWORD(v269) = 0;
      v233 = (_QWORD *)v213[1];
      if (v233)
      {
        do
        {
          v234 = v233;
          v233 = (_QWORD *)*v233;
        }
        while (v233);
      }
      else
      {
        do
        {
          v234 = (_QWORD *)v213[2];
          v14 = *v234 == (_QWORD)v213;
          v213 = v234;
        }
        while (!v14);
      }
      v213 = v234;
    }
    while (v234 != v214);
    v212 = v1[62];
  }
  v235 = (llvm::raw_ostream *)*v1;
  v274 = *(void **)(v212 + 296);
  v271 = &v274;
  v272 = 1;
  sub_1C5033BDC(v235, 0x18u, &v271);
  sub_1C502481C(*v1);
  if (v268 != v270)
    free(v268);
}

