llvm::MachineFunction *sub_1C55048B4(llvm::MachineFunction *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if ((result & 0x80) != 0)
  {
    if (((unsigned __int16)result & 0x100) == 0)
      return sub_1C5547D24(a3, 295, 0, 0, 1);
    v4 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 48);
    if (v4 && v4 - 24 == a2)
      return sub_1C5547D24(a3, 295, 0, 0, 1);
    v6 = *(_QWORD *)(a2 + 24);
    result = v6 ? (llvm::MachineFunction *)(v6 - 24) : 0;
    if (!v6 || *((_BYTE *)result + 16) != 84)
      return sub_1C5547D24(a3, 295, 0, 0, 1);
    v7 = *((_QWORD *)result + 8);
    if (!v7 || (*(_BYTE *)(v7 + 16) & 1) == 0)
    {
      result = (llvm::MachineFunction *)llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)result, 32);
      if ((result & 1) == 0)
        return sub_1C5547D24(a3, 295, 0, 0, 1);
    }
  }
  return result;
}

_DWORD *sub_1C550494C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  int v25;
  uint64_t v26;
  _DWORD v27[4];
  _DWORD v28[18];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(*(_QWORD *)a2 + 32) == 1)
  {
    v25 = *(_DWORD *)(a2 + 20);
    if ((v25 & 0x40000000) != 0)
      v26 = *(_QWORD *)(a2 - 8);
    else
      v26 = a2 - 32 * (v25 & 0x7FFFFFF);
    return sub_1C54FF408(a1, (uint64_t *)a2, *(_QWORD *)(v26 + 32), a3);
  }
  else
  {
    v6 = (int *)sub_1C54F95B0(a1, a2);
    if (v7)
      v8 = *v6;
    else
      v8 = 0;
    v9 = *(_DWORD *)(a2 + 20);
    if ((v9 & 0x40000000) != 0)
      v10 = *(_QWORD **)(a2 - 8);
    else
      v10 = (_QWORD *)(a2 - 32 * (v9 & 0x7FFFFFF));
    v11 = (int *)sub_1C54F95B0(a1, *v10);
    if (v12)
      v13 = *v11;
    else
      v13 = 0;
    v14 = *(_DWORD *)(a2 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(_QWORD *)(a2 - 8);
    else
      v15 = a2 - 32 * (v14 & 0x7FFFFFF);
    v16 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(v15 + 32));
    if (v17)
      v18 = *v16;
    else
      v18 = 0;
    v19 = *(_DWORD *)(a2 + 20);
    if ((v19 & 0x40000000) != 0)
      v20 = *(_QWORD *)(a2 - 8);
    else
      v20 = a2 - 32 * (v19 & 0x7FFFFFF);
    v21 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(v20 + 64));
    if (v22)
      v23 = *v21;
    else
      v23 = 0;
    v27[0] = v8;
    v27[2] = 1;
    v28[0] = v13;
    v28[4] = 0;
    v28[6] = v18;
    v28[10] = 0;
    v28[12] = v23;
    v28[16] = 0;
    return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 204, v27, 1, v28, 3, 0);
  }
}

_DWORD *sub_1C5504B20(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  uint64_t *v7;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  const char *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  llvm::ValueHandleBase *v24;
  int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const llvm::APInt *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(uint64_t **)(a2 - 8);
  else
    v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
  if (*(_DWORD *)(*(_QWORD *)*v7 + 32) == 1)
    return sub_1C54FF408((uint64_t)a1, (uint64_t *)a2, *v7, (uint64_t)a3);
  v9 = (int *)sub_1C54F95B0(a1, a2);
  if (v10)
    v11 = *v9;
  else
    v11 = 0;
  v12 = *(_DWORD *)(a2 + 20);
  if ((v12 & 0x40000000) != 0)
    v13 = *(_QWORD **)(a2 - 8);
  else
    v13 = (_QWORD *)(a2 - 32 * (v12 & 0x7FFFFFF));
  v14 = (int *)sub_1C54F95B0(a1, *v13);
  if (v15)
    v16 = *v14;
  else
    v16 = 0;
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[108] + 16) + 120))(*(_QWORD *)(a1[108] + 16));
  LOBYTE(v39) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 72))(v17, a1[110]);
  v19 = sub_1C47A8C74((unsigned __int8 *)&v39);
  if ((_DWORD)v18 == 1)
  v20 = *(_DWORD *)(a2 + 20);
  if ((v20 & 0x40000000) != 0)
    v21 = *(_QWORD *)(a2 - 8);
  else
    v21 = a2 - 32 * (v20 & 0x7FFFFFF);
  v22 = *(_QWORD *)(v21 + 32);
  if (v22)
  {
    if (*(_BYTE *)(v22 + 16) == 16)
    {
      v23 = *(_DWORD *)(v22 + 32);
      if (v23 != v19)
      {
        if (v23 >= v19)
        {
          if (v23 > v19)
            llvm::APInt::trunc((llvm::APInt *)(v22 + 24), v19, (llvm::APInt *)&v39);
          else
            sub_1C5DD14E0((uint64_t)&v39, v22 + 24);
        }
        else
        {
          llvm::APInt::sext((llvm::APInt *)(v22 + 24), v19, (llvm::APInt *)&v39);
        }
        v24 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v22, (llvm::LLVMContext *)&v39, v36);
        v25 = (int *)sub_1C54F95B0(a1, v24);
        if (v26)
          v27 = *v25;
        else
          v27 = 0;
        if (v40 >= 0x41 && v39)
          MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
        if (v27)
          goto LABEL_40;
        v20 = *(_DWORD *)(a2 + 20);
      }
    }
  }
  if ((v20 & 0x40000000) != 0)
    v28 = *(_QWORD *)(a2 - 8);
  else
    v28 = a2 - 32 * (v20 & 0x7FFFFFF);
  v29 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(v28 + 32));
  if (!v30)
  {
    v27 = 0;
LABEL_44:
    v32 = 0;
    goto LABEL_45;
  }
  v27 = *v29;
LABEL_40:
  if ((v27 & 0x80000000) == 0)
    goto LABEL_44;
  v31 = a1[109];
  if ((v27 & 0x7FFFFFFFu) >= *(_DWORD *)(v31 + 432))
    goto LABEL_44;
  v32 = *(_QWORD *)(*(_QWORD *)(v31 + 424) + 8 * (v27 & 0x7FFFFFFF));
LABEL_45:
  v39 = v32;
  v34 = sub_1C4825F50(&v39);
  if ((_DWORD)v33 == 1)
  if (v34 != v19)
  {
    v37 = (8 * v19) | 1;
    v38 = 0;
    LODWORD(v39) = v27;
    v41 = 0;
    sub_1C5546B4C(a3, 124, (unint64_t *)&v37, (int *)&v39);
    v27 = *(_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
  }
  LODWORD(v37) = v11;
  v38 = 1;
  LODWORD(v39) = v16;
  v41 = 0;
  v42 = v27;
  v43 = 0;
  return (_DWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 205, &v37, 1, &v39, 2, 0);
}

void sub_1C5504E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  llvm::MachineFunction *v25;
  llvm::MachineInstr *v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _DWORD v31[12];
  _DWORD v32[4];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = 24;
  v7 = 32;
  if (*(_BYTE *)(a2 + 16) == 91)
    v7 = 72;
  v8 = *(unsigned int *)(a2 + v7);
  if (*(_BYTE *)(a2 + 16) == 91)
    v6 = 64;
  v9 = *(const void **)(a2 + v6);
  v10 = (void *)sub_1C484358C(*(_QWORD *)(a1 + 864) + 128, 4 * v8, 2);
  v11 = v10;
  if ((_DWORD)v8)
    memmove(v10, v9, 4 * v8);
  v12 = (int *)sub_1C54F95B0(a1, a2);
  if (v13)
    v14 = *v12;
  else
    v14 = 0;
  v32[0] = v14;
  v32[2] = 1;
  v15 = *(_DWORD *)(a2 + 20);
  if ((v15 & 0x40000000) != 0)
    v16 = *(_QWORD **)(a2 - 8);
  else
    v16 = (_QWORD *)(a2 - 32 * (v15 & 0x7FFFFFF));
  v17 = (int *)sub_1C54F95B0(a1, *v16);
  if (v18)
    v19 = *v17;
  else
    v19 = 0;
  v31[0] = v19;
  v31[4] = 0;
  v20 = *(_DWORD *)(a2 + 20);
  if ((v20 & 0x40000000) != 0)
    v21 = *(_QWORD *)(a2 - 8);
  else
    v21 = a2 - 32 * (v20 & 0x7FFFFFF);
  v22 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(v21 + 32));
  if (v23)
    v24 = *v22;
  else
    v24 = 0;
  v31[6] = v24;
  v31[10] = 0;
  v25 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 206, v32, 1, v31, 2, 0);
  v27 = 19;
  v28 = 0;
  v29 = v11;
  v30 = v8;
  llvm::MachineInstr::addOperand(v26, v25, (const llvm::MachineOperand *)&v27);
}

llvm::MachineFunction *sub_1C550501C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  __int16 v25;
  char v26;
  __int16 v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  __int128 v32;
  int v34;
  int v35;
  int v36;
  int v37;
  _OWORD v39[2];

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 16));
  v6 = *(_WORD *)(a2 + 18);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
  v8 = (int *)sub_1C54F95B0(a1, a2);
  v37 = *v8;
  v36 = v8[1];
  v9 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(a2 - 96));
  if (v10)
    v35 = *v9;
  else
    v35 = 0;
  v11 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(a2 - 64));
  if (v12)
    v13 = *v11;
  else
    v13 = 0;
  v14 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(a2 - 32));
  if (v15)
    v34 = *v14;
  else
    v34 = 0;
  v16 = *(_QWORD *)(a2 - 96);
  if (v16)
  {
    v17 = *(_DWORD *)(*(_QWORD *)v16 + 8);
    if ((v17 & 0xFE) == 0x12)
      v17 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v16 + 16) + 8);
    v18 = v17 >> 8;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(_QWORD *)(a1 + 864);
  v20 = v13;
  if (v13 < 0 && (v21 = *(_QWORD *)(a1 + 872), (v13 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v21 + 432)))
    v22 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * (v13 & 0x7FFFFFFF));
  else
    v22 = 0;
  v23 = v16 & 0xFFFFFFFFFFFFFFFBLL;
  if ((v6 & 1) != 0)
    v24 = 7;
  else
    v24 = 3;
  v25 = v7 | v24;
  v26 = sub_1C54FB58C(a1, a2);
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v39);
  v27 = *(unsigned __int8 *)(a2 + 60);
  v28 = *(unsigned __int16 *)(a2 + 18);
  v29 = v28 >> 5;
  v30 = v28 >> 2;
  v31 = sub_1C484358C(v19 + 128, 80, 3);
  *(_QWORD *)v31 = v23;
  *(_QWORD *)(v31 + 8) = 0;
  *(_DWORD *)(v31 + 16) = v18;
  *(_BYTE *)(v31 + 20) = 0;
  *(_QWORD *)(v31 + 24) = v22;
  v32 = v39[1];
  *(_OWORD *)(v31 + 40) = v39[0];
  *(_WORD *)(v31 + 32) = v25;
  *(_BYTE *)(v31 + 34) = v26;
  *(_OWORD *)(v31 + 56) = v32;
  *(_QWORD *)(v31 + 72) = 0;
  *(_WORD *)(v31 + 36) = v27 & 0x88FF | ((v30 & 7) << 8) & 0x8FFF | ((v29 & 7) << 12);
  return sub_1C5547F8C(a3, v37, v36, v35, v20, v34, (llvm::MachineMemOperand *)v31);
}

BOOL sub_1C5505210(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  int *v9;
  uint64_t v10;
  int v11;
  int *v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  __int16 v30;
  int v31;
  unint64_t v32;
  __int128 v33;
  _OWORD v35[2];
  int v36[6];
  int v37[6];
  int v38[4];

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 16));
  if ((*(_WORD *)(a2 + 18) & 1) != 0)
    v7 = 7;
  else
    v7 = 3;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(v6, a2);
  v9 = (int *)sub_1C54F95B0(a1, a2);
  if (v10)
    v11 = *v9;
  else
    v11 = 0;
  v12 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(a2 - 64));
  if (v13)
    v14 = *v12;
  else
    v14 = 0;
  v15 = (int *)sub_1C54F95B0(a1, *(_QWORD *)(a2 - 32));
  if (v16)
    v17 = *v15;
  else
    v17 = 0;
  v18 = *(_WORD *)(a2 + 18) >> 4;
  if (v18 <= 0xC)
  {
    v38[0] = v11;
    v38[2] = 1;
    v37[0] = v14;
    v37[4] = 0;
    v36[0] = v17;
    v36[4] = 0;
    v19 = *(_QWORD *)(a2 - 64);
    v20 = v19 & 0xFFFFFFFFFFFFFFFBLL;
    if (v19)
    {
      v21 = *(_QWORD *)v19;
      v22 = *(_DWORD *)(*(_QWORD *)v19 + 8);
      if ((v22 & 0xFE) == 0x12)
        v22 = *(_DWORD *)(**(_QWORD **)(v21 + 16) + 8);
      v23 = v22 >> 8;
    }
    else
    {
      v23 = 0;
    }
    v24 = v8 | v7;
    v25 = *(_QWORD *)(a1 + 864);
    if (v17 < 0 && (v26 = *(_QWORD *)(a1 + 872), v27 = v17 & 0x7FFFFFFF, v27 < *(_DWORD *)(v26 + 432)))
      v28 = *(_QWORD *)(*(_QWORD *)(v26 + 424) + 8 * v27);
    else
      v28 = 0;
    v29 = sub_1C54FB58C(a1, a2);
    llvm::Instruction::getAAMetadata((uint64_t ***)a2, v35);
    v30 = *(unsigned __int8 *)(a2 + 60);
    v31 = *(unsigned __int16 *)(a2 + 18) >> 1;
    v32 = sub_1C484358C(v25 + 128, 80, 3);
    *(_QWORD *)v32 = v20;
    *(_QWORD *)(v32 + 8) = 0;
    *(_DWORD *)(v32 + 16) = v23;
    *(_BYTE *)(v32 + 20) = 0;
    *(_QWORD *)(v32 + 24) = v28;
    v33 = v35[1];
    *(_OWORD *)(v32 + 40) = v35[0];
    *(_WORD *)(v32 + 32) = v24;
    *(_BYTE *)(v32 + 34) = v29;
    *(_OWORD *)(v32 + 56) = v33;
    *(_QWORD *)(v32 + 72) = 0;
    *(_WORD *)(v32 + 36) = v30 & 0xF8FF | ((v31 & 7) << 8);
    sub_1C554823C(a3, v18 + 100, v38, v37, v36, (llvm::MachineMemOperand *)v32);
  }
  return v18 < 0xD;
}

uint64_t sub_1C5505414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  _DWORD v18[6];
  _DWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = sub_1C54F95B0(a1, a2);
  v8 = v7;
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD **)(a2 - 8);
  else
    v10 = (_QWORD *)(a2 - 32 * (v9 & 0x7FFFFFF));
  result = sub_1C54F95B0(a1, *v10);
  if (v8)
  {
    v12 = result;
    v13 = 0;
    v14 = 1;
    do
    {
      v15 = *(_DWORD *)(v6 + 4 * v13);
      v16 = *(_DWORD *)(v12 + 4 * v13);
      v19[0] = v15;
      v19[2] = 1;
      v18[0] = v16;
      v18[4] = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 83, v19, 1, v18, 1, 0);
      v13 = v14;
    }
    while (v8 > v14++);
  }
  return result;
}

_DWORD *sub_1C5505510(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1C476B2A4(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t sub_1C5505560(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ***v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 **v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 **v26;
  llvm::OptimizationRemarkEmitter *v27;
  llvm::OptimizationRemarkEmitter *v28;
  uint64_t v29;
  void *v30;
  llvm::TargetMachine *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t ****v46;
  uint64_t ***v47;
  uint64_t ****v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  void **v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  llvm::MachineBasicBlock *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t ***v70;
  uint64_t **v71;
  uint64_t **v72;
  uint64_t *i;
  uint64_t *v74;
  unsigned __int8 *v75;
  uint64_t **v76;
  uint64_t ***v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *j;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t **v101;
  int v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  uint64_t ***v106;
  uint64_t **v107;
  uint64_t ***v108;
  int v109;
  BOOL v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  uint64_t ****v117;
  uint64_t ***v118;
  uint64_t ****v119;
  int v120;
  BOOL v121;
  unsigned int v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  int *v134;
  int *v135;
  uint64_t v136;
  int **v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  void *v141;
  int v142;
  char v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  int v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  int v157;
  BOOL v158;
  unsigned int v159;
  llvm::MachineBasicBlock *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unsigned __int8 **v166;
  unsigned __int8 **v167;
  unsigned __int8 *v168;
  uint64_t v169;
  const llvm::DataLayout *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  llvm ***v176;
  uint64_t v177;
  unint64_t LLTForType;
  const llvm::DataLayout *v179;
  unint64_t v180;
  int v181;
  uint64_t *v182;
  uint64_t v183;
  int *v184;
  uint64_t v185;
  int *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t *v192;
  void *v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t *v197;
  uint64_t v198;
  int v199;
  uint64_t **v200;
  uint64_t v201;
  int *v202;
  uint64_t v203;
  int v204;
  int *v205;
  uint64_t v206;
  int v207;
  int v208;
  uint64_t **v209;
  uint64_t v210;
  int *v211;
  uint64_t v212;
  int v213;
  int *v214;
  uint64_t v215;
  int v216;
  int v217;
  uint64_t **v218;
  uint64_t v219;
  int *v220;
  uint64_t v221;
  int v222;
  int *v223;
  uint64_t v224;
  int v225;
  int v226;
  uint64_t **v227;
  uint64_t v228;
  int *v229;
  uint64_t v230;
  int v231;
  int *v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t **v236;
  uint64_t v237;
  int *v238;
  uint64_t v239;
  int v240;
  int *v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t **v245;
  uint64_t v246;
  int *v247;
  uint64_t v248;
  int v249;
  int *v250;
  uint64_t v251;
  int v252;
  int v253;
  uint64_t **v254;
  uint64_t v255;
  int *v256;
  uint64_t v257;
  int v258;
  int *v259;
  uint64_t v260;
  int v261;
  int v262;
  uint64_t **v263;
  uint64_t v264;
  int *v265;
  uint64_t v266;
  int v267;
  int *v268;
  uint64_t v269;
  int v270;
  int v271;
  uint64_t **v272;
  uint64_t v273;
  int *v274;
  uint64_t v275;
  int v276;
  int *v277;
  uint64_t v278;
  int v279;
  int v280;
  uint64_t **v281;
  uint64_t v282;
  int *v283;
  uint64_t v284;
  int v285;
  int *v286;
  uint64_t v287;
  int v288;
  int v289;
  uint64_t **v290;
  uint64_t v291;
  int *v292;
  uint64_t v293;
  int v294;
  int *v295;
  uint64_t v296;
  int v297;
  uint64_t **v298;
  int *v299;
  uint64_t v300;
  int v301;
  int *v302;
  uint64_t v303;
  int v304;
  int v305;
  uint64_t **v306;
  uint64_t v307;
  int *v308;
  uint64_t v309;
  int v310;
  int *v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  int v320;
  int v321;
  int v322;
  int8x8_t *v323;
  unsigned int v324;
  BOOL v325;
  int v326;
  uint64_t v327;
  int v328;
  int8x8_t *v329;
  BOOL v330;
  int8x8_t *v331;
  int v332;
  _QWORD *v333;
  void *LLTForMVT;
  uint64_t v335;
  void *v336;
  unint64_t v337;
  uint8x8_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  unsigned int v344;
  llvm::APInt *v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  void *v349;
  void *v350;
  void *v351;
  void *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  int EdgeProbability;
  llvm::MachineBasicBlock *v365;
  uint64_t v366;
  int v367;
  llvm::MachineBasicBlock *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int **v384;
  int *v385;
  int *v386;
  int *v387;
  uint64_t v388;
  int *v389;
  int *v390;
  unsigned __int8 **v391;
  char *v392;
  unsigned __int8 *v393;
  int *v394;
  void **v395;
  void *v396;
  uint64_t v397;
  llvm *v398;
  llvm *v399;
  uint64_t v400;
  llvm::MachineBasicBlock *v401;
  const llvm::TargetInstrInfo *v402;
  unint64_t *SplitPointForStackProtector;
  unint64_t *v404;
  unint64_t v405;
  unint64_t *v406;
  uint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  char v412;
  uint64_t **v413;
  uint64_t *v414;
  uint64_t v415;
  _BYTE *v416;
  unint64_t v417;
  void **v418;
  void *v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  int v423;
  unsigned int v424;
  uint64_t ****v425;
  uint64_t ***v426;
  uint64_t ****v427;
  int v428;
  BOOL v429;
  unsigned int v430;
  uint64_t v431;
  _QWORD *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t **v436;
  uint64_t *v437;
  uint64_t v438;
  _BYTE *v439;
  unint64_t v440;
  void **v441;
  void *v442;
  unsigned __int8 *v443;
  uint64_t v444;
  unsigned int v445;
  unsigned __int8 *v446;
  unsigned __int8 *v447;
  unsigned __int8 *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  const llvm::BasicBlock *v452;
  unsigned int v453;
  uint64_t ***v454;
  uint64_t v455;
  const char *v456;
  char v457;
  BOOL v458;
  uint64_t v459;
  char *v460;
  unint64_t v461;
  void **v462;
  uint64_t ****v463;
  uint64_t ***v464;
  uint64_t v465;
  unint64_t v466;
  void **v467;
  uint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t v471;
  unsigned __int8 **v472;
  unsigned __int8 **v473;
  unsigned __int8 *v474;
  int v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  void *v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  unsigned int v483;
  unsigned int v484;
  uint64_t v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unsigned int v489;
  uint64_t v490;
  uint64_t v491;
  void *v492;
  int v494;
  unsigned int v495;
  int v497;
  uint64_t v498;
  unsigned int v499;
  int v500;
  unsigned int v501;
  _QWORD *v502;
  void *v503;
  _QWORD *v504;
  int v505;
  BOOL v506;
  unsigned int v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t *v510;
  char *v511;
  size_t v512;
  uint64_t *v513;
  char *v514;
  uint64_t v515;
  const void **v516;
  BOOL v517;
  uint64_t v518;
  char *v519;
  size_t v520;
  uint64_t v521;
  _QWORD *v522;
  uint64_t *v523;
  _QWORD *v524;
  _QWORD *v525;
  uint64_t v526;
  unsigned int v527;
  llvm::MachineInstr *v528;
  int v529;
  llvm::MachineFunction *v530;
  _QWORD *v531;
  uint64_t v532;
  llvm::MachineBasicBlock *v533;
  llvm::MachineBasicBlock *v534;
  unint64_t *v535;
  unint64_t *v536;
  _OWORD *v537;
  _OWORD *v538;
  _OWORD *v539;
  unint64_t v540;
  _OWORD *v541;
  _OWORD *v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  char *v547;
  char *v548;
  char *v549;
  uint64_t v550;
  _QWORD *v551;
  void **v552;
  void *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  void *v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  unsigned int v562;
  int v563;
  int v564;
  uint64_t v565;
  _QWORD *v566;
  unint64_t v567;
  unint64_t v568;
  _QWORD *v569;
  uint64_t v570;
  uint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  uint64_t v574;
  int v575;
  unsigned int v576;
  int v577;
  int v578;
  uint64_t v579;
  _QWORD *v580;
  unint64_t v581;
  unint64_t v582;
  _QWORD *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t ****v586;
  uint64_t ***v587;
  uint64_t ****v588;
  uint64_t ***v589;
  unint64_t v590;
  unint64_t *v591;
  _QWORD *v592;
  uint64_t v593;
  unsigned int v594;
  uint64_t v595;
  uint64_t v596;
  _QWORD *v598;
  uint64_t v599;
  int v600;
  int64x2_t *v601;
  uint64_t v602;
  int64x2_t v603;
  unint64_t v604;
  unint64_t v605;
  _OWORD *v606;
  uint64_t v607;
  uint64_t v608;
  int64x2_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  void *v614;
  _QWORD *v615;
  int v616;
  _QWORD *v617;
  uint64_t ****v618;
  _DWORD *v619;
  unint64_t *v620;
  llvm::MachineBasicBlock *v621;
  char *v622;
  const llvm::BasicBlock *v623;
  llvm::MachineBasicBlock *v624;
  llvm::SwiftErrorValueTracking *v625;
  llvm::MachineBasicBlock *v626;
  char *v627;
  _QWORD *v628;
  uint64_t v629;
  uint64_t v630;
  llvm::APInt *v631;
  uint64_t v632;
  _QWORD *v633;
  _DWORD *v634;
  uint64_t v635;
  _QWORD *v636;
  char v637;
  uint64_t v638;
  uint64_t v639;
  llvm::MachineBasicBlock *v640;
  uint64_t v641;
  uint64_t v642;
  int v643;
  uint64_t v644;
  uint64_t ***v645;
  uint64_t v646;
  int *v647;
  void *v648[2];
  uint64_t v649;
  void *v650[2];
  char v651;
  void *v652;
  char v653;
  void *v654[2];
  char v655;
  void *v656;
  char v657;
  void *v658[2];
  char v659;
  void *__p;
  char v661;
  unsigned __int8 *v662;
  unsigned __int8 *v663;
  uint64_t v664;
  const char *v665;
  uint64_t v666;
  void *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  char v672;
  uint64_t v673;
  int v674;
  void **v675;
  const char *v676;
  uint64_t v677;
  _BYTE *v678;
  void *v679;
  uint64_t v680;
  int v681;
  _BYTE v682[32];
  void *v683;
  uint64_t v684;
  _QWORD v685[4];
  void *v686;
  uint64_t v687;
  _BYTE v688[128];
  void *v689;
  void *v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t v693;
  const char *v694;
  const char *v695;
  uint64_t v696;
  int v697;
  char v698;
  void *v699;
  uint64_t v700;
  _BYTE v701[256];
  char v702;
  int v703;
  const llvm::BasicBlock *v704;
  char *v705;
  uint64_t v706;
  _QWORD v707[3];

  v3 = a1;
  v707[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 864) = a2;
  v4 = *(uint64_t ****)a2;
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &unk_1EF8F7108);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &unk_1EF8F7108);
  v8 = **(void ****)(v3 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::TargetPassConfig::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::TargetPassConfig::ID);
  *(_QWORD *)(v3 + 888) = v10;
  v645 = v4;
  if (word_1ED8059B8)
  {
    if (byte_1ED805A30)
    {
LABEL_7:
      v642 = v7 + 248;
      v11 = operator new();
      *(_OWORD *)(v11 + 16) = 0u;
      *(_QWORD *)(v11 + 64) = 0;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_QWORD *)v11 = &off_1E816EC08;
      *(_QWORD *)(v11 + 8) = a2;
      *(_QWORD *)(v11 + 24) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(v11 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
      if (*(_QWORD *)(v11 + 32))
        llvm::MetadataTracking::untrack(v11 + 32, *(unsigned __int8 **)(v11 + 32));
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)v11 = &unk_1E816DC08;
      v12 = *(_QWORD *)(v3 + 856);
      *(_QWORD *)(v3 + 856) = v11;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v3 + 888) + 288))(&v664);
      sub_1C54EB0C0(v642, &v664, 0);
      v13 = v664;
      v664 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      *(_QWORD *)(*(_QWORD *)(v3 + 856) + 64) = v642;
      v14 = operator new();
      *(_OWORD *)(v14 + 16) = 0u;
      *(_QWORD *)(v14 + 64) = 0;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      v15 = (void **)(v14 + 32);
      *(_QWORD *)v14 = &off_1E816EC08;
      *(_QWORD *)(v14 + 8) = a2;
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(v14 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
      v689 = 0;
      if (*(_QWORD *)(v14 + 32))
      {
        llvm::MetadataTracking::untrack((uint64_t)v15, *(unsigned __int8 **)(v14 + 32));
        v448 = (unsigned __int8 *)v689;
        *v15 = v689;
        if (v448)
          llvm::MetadataTracking::retrack((uint64_t)&v689, v448, (uint64_t)v15);
      }
      else
      {
        *v15 = 0;
      }
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_QWORD *)v14 = &unk_1E816DC08;
      v16 = *(_QWORD *)(v3 + 848);
      *(_QWORD *)(v3 + 848) = v14;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        v14 = *(_QWORD *)(v3 + 848);
      }
      v4 = v645;
      *(_QWORD *)(v14 + 64) = v642;
      v637 = 1;
      goto LABEL_24;
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 280))(v10))
  {
    goto LABEL_7;
  }
  v17 = operator new();
  *(_QWORD *)v17 = &off_1E816EC08;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  v18 = *(_QWORD *)(v3 + 856);
  *(_QWORD *)(v3 + 856) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = operator new();
  *(_QWORD *)v19 = &off_1E816EC08;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  v20 = *(_QWORD *)(v3 + 848);
  *(_QWORD *)(v3 + 848) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v637 = 0;
  v642 = 0;
LABEL_24:
  *(_QWORD *)(v3 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 864) + 16) + 136))(*(_QWORD *)(*(_QWORD *)(v3 + 864) + 16));
  v21 = *(_QWORD *)(v3 + 848);
  v22 = *(_QWORD *)(v3 + 864);
  *(_QWORD *)(v21 + 8) = v22;
  *(_QWORD *)(v21 + 40) = 0;
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 16) + 104))(*(_QWORD *)(v22 + 16));
  v689 = 0;
  v23 = (unsigned __int8 **)(v21 + 32);
  if (&v689 != (void **)(v21 + 32))
  {
    if (*v23)
    {
      llvm::MetadataTracking::untrack(v21 + 32, *v23);
      v446 = (unsigned __int8 *)v689;
      *v23 = (unsigned __int8 *)v689;
      if (v446)
        llvm::MetadataTracking::retrack((uint64_t)&v689, v446, v21 + 32);
    }
    else
    {
      *v23 = 0;
    }
  }
  *(_QWORD *)(v21 + 48) = 0;
  *(_QWORD *)(v21 + 56) = 0;
  v24 = *(_QWORD *)(v3 + 856);
  v25 = *(_QWORD *)(v3 + 864);
  *(_QWORD *)(v24 + 8) = v25;
  *(_QWORD *)(v24 + 40) = 0;
  *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v24 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 16) + 104))(*(_QWORD *)(v25 + 16));
  v689 = 0;
  v26 = (unsigned __int8 **)(v24 + 32);
  if (&v689 != (void **)(v24 + 32))
  {
    if (*v26)
    {
      llvm::MetadataTracking::untrack(v24 + 32, *v26);
      v447 = (unsigned __int8 *)v689;
      *v26 = (unsigned __int8 *)v689;
      if (v447)
        llvm::MetadataTracking::retrack((uint64_t)&v689, v447, v24 + 32);
    }
    else
    {
      *v26 = 0;
    }
  }
  *(_QWORD *)(v24 + 48) = 0;
  *(_QWORD *)(v24 + 56) = 0;
  *(_QWORD *)(v3 + 872) = *(_QWORD *)(*(_QWORD *)(v3 + 864) + 40);
  *(_QWORD *)(v3 + 880) = v4[5] + 34;
  v27 = (llvm::OptimizationRemarkEmitter *)operator new();
  v28 = llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v27, (const llvm::Function *)v4);
  v689 = 0;
  v29 = *(_QWORD *)(v3 + 904);
  *(_QWORD *)(v3 + 904) = v28;
  if (v29)
  {
    sub_1C4EF268C(v3 + 904, v29);
    v30 = v689;
    v689 = 0;
    if (v30)
      sub_1C4EF268C((uint64_t)&v689, (uint64_t)v30);
  }
  v31 = *(llvm::TargetMachine **)(*(_QWORD *)(v3 + 864) + 8);
  llvm::TargetMachine::resetTargetOptions(v31, (const llvm::Function *)v4);
  if (!*(_DWORD *)(v3 + 896))
  {
    *(_BYTE *)(v3 + 1760) = 0;
    v33 = *(_QWORD *)(v3 + 864);
    v34 = v3 + 912;
    *(_QWORD *)(v3 + 920) = v33;
    goto LABEL_39;
  }
  v32 = llvm::FunctionPass::skipFunction((llvm::FunctionPass *)v3, (const llvm::Function *)v4);
  *(_BYTE *)(v3 + 1760) = v32 ^ 1;
  v33 = *(_QWORD *)(v3 + 864);
  v34 = v3 + 912;
  *(_QWORD *)(v3 + 920) = v33;
  if ((v32 & 1) != 0)
  {
LABEL_39:
    *(_QWORD *)(v3 + 944) = 0;
    goto LABEL_40;
  }
  v35 = **(void ****)(v3 + 8);
  do
  {
    v36 = *v35;
    v35 += 2;
  }
  while (v36 != &llvm::BranchProbabilityInfoWrapperPass::ID);
  *(_QWORD *)(v3 + 944) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v35 - 1) + 96))(*(v35 - 1), &llvm::BranchProbabilityInfoWrapperPass::ID)+ 32;
  v33 = *(_QWORD *)(v3 + 864);
LABEL_40:
  *(_BYTE *)(v3 + 960) = sub_1C54F4E40(*(_QWORD *)(v3 + 248), v33);
  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v3 + 864) + 16));
  v38 = operator new();
  *(_OWORD *)(v38 + 8) = 0u;
  *(_OWORD *)(v38 + 24) = 0u;
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_QWORD *)(v38 + 72) = 0;
  *(_QWORD *)v38 = off_1E816DEF0;
  *(_QWORD *)(v38 + 104) = v34;
  *(_QWORD *)(v38 + 112) = v3;
  v39 = *(_QWORD *)(v3 + 1792);
  *(_QWORD *)(v3 + 1792) = v38;
  if (v39)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
    v38 = *(_QWORD *)(v3 + 1792);
  }
  v40 = *(_BYTE **)(v3 + 880);
  *(_QWORD *)(v38 + 80) = v37;
  *(_QWORD *)(v38 + 88) = v31;
  *(_QWORD *)(v38 + 96) = v40;
  v618 = (uint64_t ****)(v3 + 904);
  v639 = v34;
  if (*v40 && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 248) + 80))(*(_QWORD *)(v3 + 248)) & 1) == 0)
  {
    if ((*((_BYTE *)v645 + 23) & 0x20) == 0)
      goto LABEL_60;
    v41 = ***v645;
    v689 = v645;
    v42 = *(_DWORD *)(v41 + 2496);
    if (v42)
    {
      v43 = *(_QWORD *)(v41 + 2480);
      v44 = v42 - 1;
      v45 = v44 & ((v645 >> 4) ^ (v645 >> 9));
      v46 = (uint64_t ****)(v43 + 40 * v45);
      v47 = *v46;
      if (*v46 == v645)
        goto LABEL_55;
      v48 = 0;
      v49 = 1;
      while (v47 != (uint64_t ***)-4096)
      {
        if (v48)
          v50 = 0;
        else
          v50 = v47 == (uint64_t ***)-8192;
        if (v50)
          v48 = v46;
        v51 = v45 + v49++;
        v45 = v51 & v44;
        v46 = (uint64_t ****)(v43 + 40 * v45);
        v47 = *v46;
        if (*v46 == v645)
          goto LABEL_55;
      }
      if (v48)
        v586 = v48;
      else
        v586 = v46;
    }
    else
    {
      v586 = 0;
    }
    v46 = (uint64_t ****)sub_1C541AB24(v41 + 2480, (uint64_t)&v689, (uint64_t *)&v689, v586);
    v587 = (uint64_t ***)v689;
    v46[3] = 0;
    v46[4] = 0;
    *v46 = v587;
    v46[1] = (uint64_t ***)(v46 + 3);
    v46[2] = (uint64_t ***)0x100000000;
LABEL_55:
    v52 = *((unsigned int *)v46 + 4);
    if ((_DWORD)v52)
    {
      v53 = v46[1] + 1;
      v54 = 16 * v52;
      LODWORD(v55) = 0;
      while (*((_DWORD *)v53 - 2))
      {
        v56 = 0;
        v53 += 2;
        v54 -= 16;
        if (!v54)
          goto LABEL_62;
      }
      v55 = *v53;
      if (*v53)
      {
        v56 = *v53;
        if (*(_BYTE *)v55 != 15)
          v56 = *(_QWORD *)(v55 - 8 * *(unsigned int *)(v55 + 8));
        LODWORD(v55) = *(_DWORD *)(v55 + 28);
        goto LABEL_62;
      }
LABEL_61:
      v56 = 0;
LABEL_62:
      v57 = v645[10];
      if (v57)
        v58 = (uint64_t *)(v57 - 3);
      else
        v58 = 0;
      v59 = v58[7];
      LODWORD(v690) = 10;
      BYTE4(v690) = 2;
      v691 = v59;
      v692 = v56;
      v693 = v55;
      v694 = "gisel-irtranslator";
      v695 = "GISelFailure";
      v696 = 12;
      LOBYTE(v697) = 0;
      v698 = 0;
      v699 = v701;
      v700 = 0x400000000;
      v702 = 0;
      v703 = -1;
      v704 = (const llvm::BasicBlock *)v58;
      v689 = &off_1E814E538;
      v686 = "unable to translate in big endian mode";
      v687 = 38;
      sub_1C53B17B4((uint64_t)&v699, (const void **)&v686);
      sub_1C54FB238(**(uint64_t *****)(v3 + 864), *(uint64_t **)(*(_QWORD *)(v3 + 864) + 360), *(_QWORD *)(v3 + 888), *(llvm::OptimizationRemarkEmitter **)(v3 + 904), (llvm::DiagnosticInfoOptimizationBase *)&v689);
      v689 = &off_1E814E790;
      v60 = (char *)v699;
      if ((_DWORD)v700)
      {
        v61 = (unint64_t)v700 << 6;
        do
        {
          v62 = (void **)&v60[v61];
          if (v60[v61 - 17] < 0)
            operator delete(*(v62 - 5));
          if (*((char *)v62 - 41) < 0)
            operator delete(*(v62 - 8));
          v61 -= 64;
        }
        while (v61);
        v60 = (char *)v699;
      }
      if (v60 != v701)
        free(v60);
      goto LABEL_75;
    }
LABEL_60:
    LODWORD(v55) = 0;
    goto LABEL_61;
  }
LABEL_75:
  v63 = *(_QWORD *)(v3 + 864);
  v64 = *(_QWORD *)(v63 + 312);
  if (v64)
    *(_QWORD *)(v63 + 312) = *(_QWORD *)v64;
  else
    v64 = sub_1C484358C(v63 + 128, 232, 3);
  *(_QWORD *)v64 = 0;
  *(_QWORD *)(v64 + 8) = 0;
  *(_QWORD *)(v64 + 16) = 0;
  *(_DWORD *)(v64 + 24) = -1;
  v65 = (unint64_t *)(v64 + 48);
  *(_QWORD *)(v64 + 48) = (v64 + 48) | 4;
  *(_QWORD *)(v64 + 56) = v64 + 48;
  *(_BYTE *)(v64 + 144) = 0;
  *(_OWORD *)(v64 + 64) = 0u;
  *(_OWORD *)(v64 + 80) = 0u;
  *(_OWORD *)(v64 + 96) = 0u;
  *(_OWORD *)(v64 + 112) = 0u;
  *(_OWORD *)(v64 + 121) = 0u;
  *(_QWORD *)(v64 + 160) = 0;
  *(_QWORD *)(v64 + 168) = 0;
  *(_QWORD *)(v64 + 152) = 0;
  *(_BYTE *)(v64 + 176) = 0;
  *(_DWORD *)(v64 + 187) = 0;
  *(_QWORD *)(v64 + 180) = 0;
  *(_QWORD *)(v64 + 192) = 0;
  *(_DWORD *)(v64 + 199) = 0;
  *(_QWORD *)(v64 + 216) = 0;
  *(_QWORD *)(v64 + 224) = 0;
  *(_QWORD *)(v64 + 208) = 0;
  *(_QWORD *)(v64 + 32) = v63;
  *(_QWORD *)(v64 + 40) = v64;
  v66 = *(_QWORD *)(v3 + 864);
  v67 = (llvm::MachineBasicBlock *)v64;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v66 + 320, v64);
  v68 = *(_QWORD *)(v66 + 320);
  *(_QWORD *)v67 = v68;
  *((_QWORD *)v67 + 1) = v66 + 320;
  *(_QWORD *)(v68 + 8) = v67;
  *(_QWORD *)(v66 + 320) = v67;
  v69 = *(_QWORD *)(v3 + 856);
  v626 = v67;
  *(_QWORD *)(v69 + 40) = v67;
  *(_QWORD *)(v69 + 48) = v65;
  v620 = v65;
  v70 = v645;
  v71 = v645[10];
  if (v71)
    v72 = v71 - 3;
  else
    v72 = 0;
  for (i = v72[6]; ; i = (uint64_t *)i[1])
  {
    v74 = i - 3;
    if (!i)
      v74 = 0;
    if (*((_BYTE *)v74 + 16) != 83)
      break;
  }
  v75 = (unsigned __int8 *)i[3];
  v663 = v75;
  if (v75)
    llvm::MetadataTracking::track((uint64_t)&v663, v75, 2);
  v625 = (llvm::SwiftErrorValueTracking *)(v3 + 712);
  llvm::SwiftErrorValueTracking::setFunction((llvm::SwiftErrorValueTracking *)(v3 + 712), (llvm::MachineFunction *)a2);
  v662 = v663;
  if (v663)
    llvm::MetadataTracking::track((uint64_t)&v662, v663, 2);
  llvm::SwiftErrorValueTracking::createEntriesInEntryBlock((uint64_t)v625, &v662);
  if (v662)
    llvm::MetadataTracking::untrack((uint64_t)&v662, v662);
  v76 = (uint64_t **)(v645 + 9);
  v77 = (uint64_t ***)v645[10];
  v632 = v3;
  v78 = 0;
  if (v77 != v645 + 9)
  {
    v79 = *((_DWORD *)v645[3] + 2);
    v634 = (_DWORD *)(v3 + 496);
    while (1)
    {
      v80 = v77 ? (uint64_t)(v77 - 3) : 0;
      v689 = (void *)v80;
      v81 = *(_DWORD *)(v632 + 512);
      if (!v81)
        break;
      v82 = *(_QWORD *)(v632 + 496);
      v83 = v81 - 1;
      v84 = v83 & ((v80 >> 4) ^ (v80 >> 9));
      v85 = (_QWORD *)(v82 + 16 * v84);
      v86 = *v85;
      if (v80 != *v85)
      {
        v87 = 0;
        v88 = 1;
        while (v86 != -4096)
        {
          if (v87)
            v89 = 0;
          else
            v89 = v86 == -8192;
          if (v89)
            v87 = v85;
          v90 = v84 + v88++;
          v84 = v90 & v83;
          v85 = (_QWORD *)(v82 + 16 * v84);
          v86 = *v85;
          if (v80 == *v85)
            goto LABEL_106;
        }
        if (v87)
          v100 = v87;
        else
          v100 = v85;
        goto LABEL_127;
      }
LABEL_106:
      v91 = *(_QWORD *)(v632 + 864);
      v92 = *(_QWORD *)(v91 + 312);
      if (v92)
        *(_QWORD *)(v91 + 312) = *(_QWORD *)v92;
      else
        v92 = sub_1C484358C(v91 + 128, 232, 3);
      *(_QWORD *)v92 = 0;
      *(_QWORD *)(v92 + 8) = 0;
      *(_QWORD *)(v92 + 16) = v80;
      *(_DWORD *)(v92 + 24) = -1;
      *(_QWORD *)(v92 + 48) = (v92 + 48) | 4;
      *(_QWORD *)(v92 + 56) = v92 + 48;
      *(_BYTE *)(v92 + 144) = 0;
      *(_OWORD *)(v92 + 64) = 0u;
      *(_OWORD *)(v92 + 80) = 0u;
      *(_OWORD *)(v92 + 96) = 0u;
      *(_OWORD *)(v92 + 112) = 0u;
      *(_OWORD *)(v92 + 121) = 0u;
      *(_QWORD *)(v92 + 160) = 0;
      *(_QWORD *)(v92 + 168) = 0;
      *(_QWORD *)(v92 + 152) = 0;
      *(_BYTE *)(v92 + 176) = 0;
      *(_DWORD *)(v92 + 187) = 0;
      *(_QWORD *)(v92 + 180) = 0;
      *(_QWORD *)(v92 + 192) = 0;
      *(_DWORD *)(v92 + 199) = 0;
      *(_QWORD *)(v92 + 216) = 0;
      *(_QWORD *)(v92 + 224) = 0;
      *(_QWORD *)(v92 + 208) = 0;
      *(_QWORD *)(v92 + 32) = v91;
      *(_QWORD *)(v92 + 40) = v92;
      if (v77)
      {
        *(_QWORD *)(v92 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight((llvm::BasicBlock *)(v77 - 3));
        *(_QWORD *)(v92 + 144) = v93;
      }
      v85[1] = v92;
      v94 = *(_QWORD *)(v632 + 864);
      llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v94 + 320, v92);
      v95 = *(_QWORD *)(v94 + 320);
      *(_QWORD *)v92 = v95;
      *(_QWORD *)(v92 + 8) = v94 + 320;
      *(_QWORD *)(v95 + 8) = v92;
      *(_QWORD *)(v94 + 320) = v92;
      if ((*(_WORD *)(v80 + 18) & 0x7FFF) != 0)
        *(_BYTE *)(v85[1] + 185) = 1;
      if (!(v78 & 1 | (v79 < 0x100)))
      {
        v98 = *(_QWORD **)(v80 + 40);
        v97 = (_QWORD *)(v80 + 40);
        for (j = v98; ; j = (_QWORD *)*j)
        {
          if (j == v97)
          {
            v78 = 0;
            goto LABEL_122;
          }
          v99 = j - 3;
          if (!j)
            v99 = 0;
          if (*((_BYTE *)v99 + 16) == 84 && (*((_WORD *)v99 + 9) & 3) == 2)
            break;
        }
        v78 = 1;
      }
LABEL_122:
      v77 = (uint64_t ***)v77[1];
      if (v77 == (uint64_t ***)v76)
      {
        v70 = v645;
        v76 = v645[10];
        v3 = v632;
        goto LABEL_130;
      }
    }
    v100 = 0;
LABEL_127:
    v85 = sub_1C47AD254(v634, (uint64_t)&v689, &v689, v100);
    *v85 = v689;
    v85[1] = 0;
    goto LABEL_106;
  }
LABEL_130:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 864) + 56) + 653) = v78 & 1;
  v101 = v76 - 3;
  if (!v76)
    v101 = 0;
  v619 = (_DWORD *)(v3 + 496);
  v689 = v101;
  v102 = *(_DWORD *)(v3 + 512);
  if (v102)
  {
    v103 = *(_QWORD *)(v3 + 496);
    v104 = v102 - 1;
    v105 = v104 & ((v101 >> 4) ^ (v101 >> 9));
    v106 = (uint64_t ***)(v103 + 16 * v105);
    v107 = *v106;
    if (v101 == *v106)
      goto LABEL_142;
    v108 = 0;
    v109 = 1;
    while (v107 != (uint64_t **)-4096)
    {
      if (v108)
        v110 = 0;
      else
        v110 = v107 == (uint64_t **)-8192;
      if (v110)
        v108 = v106;
      v111 = v105 + v109++;
      v105 = v111 & v104;
      v106 = (uint64_t ***)(v103 + 16 * v105);
      v107 = *v106;
      if (v101 == *v106)
        goto LABEL_142;
    }
    if (v108)
      v454 = v108;
    else
      v454 = v106;
  }
  else
  {
    v454 = 0;
  }
  v106 = (uint64_t ***)sub_1C47AD254(v619, (uint64_t)&v689, &v689, (uint64_t ***)v454);
  *v106 = (uint64_t **)v689;
  v106[1] = 0;
LABEL_142:
  llvm::MachineBasicBlock::addSuccessor(v626, v106[1], -1);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 248) + 56))(*(_QWORD *)(v3 + 248), *(_QWORD *)(v3 + 864)) & 1) == 0)
  {
    v686 = v688;
    v687 = 0x800000000;
    v128 = sub_1C485F330((uint64_t)v70);
    if (v128 != v129)
    {
      v130 = v128;
      v131 = v129;
      do
      {
        sub_1C4768AD0(*(_QWORD *)(v3 + 880), *(_QWORD *)v130);
        if ((unint64_t)(v132 + 7) >= 8)
        {
          v133 = sub_1C54F95B0(v3, (uint64_t *)v130);
          v135 = v134;
          v136 = v687;
          if (v687 >= (unint64_t)HIDWORD(v687))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v686, (uint64_t)v688, v687 + 1, 16);
            v136 = v687;
          }
          v137 = (int **)((char *)v686 + 16 * v136);
          *v137 = v133;
          v137[1] = v135;
          LODWORD(v687) = v687 + 1;
          v138 = *(_QWORD *)(*(_QWORD *)(v130 + 24) + 112);
          if (v138)
          {
            v139 = *(_DWORD *)(v130 + 32) + 2;
            if (v139 < *(_DWORD *)(v138 + 8))
            {
              v140 = *(_QWORD *)(v138 + 8 * v139 + 40);
              if (v140)
              {
                if (*(char *)(v140 + 19) < 0)
                {
                  v141 = *(void **)(v3 + 816);
                  v142 = *v133;
                  v689 = v626;
                  v690 = v141;
                  *((_DWORD *)sub_1C62151E0((uint64_t *)(v3 + 744), &v689) + 4) = v142;
                }
              }
            }
          }
        }
        v130 += 40;
      }
      while (v130 != v131);
    }
    if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t ***, void *, _QWORD, uint64_t))(**(_QWORD **)(v3 + 248)
                                                                                          + 64))(*(_QWORD *)(v3 + 248), *(_QWORD *)(v3 + 856), v645, v686, v687, v639) & 1) != 0)
    {
      v678 = v682;
      v679 = v682;
      v680 = 4;
      v681 = 0;
      v676 = (const char *)&off_1E7FA1778;
      v677 = (uint64_t)&unk_1E7FA17D0;
      v683 = v685;
      v684 = 0x400000000;
      v143 = v637 ^ 1;
      if (!v642)
        v143 = 1;
      if ((v143 & 1) == 0)
      {
        v685[0] = v642;
        LODWORD(v684) = 1;
      }
      v689 = v645;
      v706 = 0;
      v707[0] = 0;
      v705 = 0;
      sub_1C4DC1ECC(&v705, (uint64_t)&v689);
      v144 = *(_QWORD *)(v3 + 864);
      *(_QWORD *)(v144 + 728) = &v676;
      *(_QWORD *)(v144 + 736) = &v677;
      v145 = v705;
      v146 = v706;
      v615 = (_QWORD *)(v144 + 728);
      v616 = 1;
      if ((char *)v706 == v705)
        goto LABEL_643;
      v617 = (_QWORD *)(v3 + 544);
      v624 = (llvm::MachineBasicBlock *)(v3 + 1768);
      v622 = v705;
      while (1)
      {
        v149 = *(_QWORD **)(v146 - 8);
        v148 = v146 - 8;
        v147 = v149;
        v689 = v149;
        v150 = *(_DWORD *)(v3 + 512);
        if (v150)
        {
          v151 = *(_QWORD *)(v3 + 496);
          v152 = v150 - 1;
          v153 = v152 & ((v147 >> 4) ^ (v147 >> 9));
          v154 = (_QWORD *)(v151 + 16 * v153);
          v155 = (_QWORD *)*v154;
          if (v147 == (_QWORD *)*v154)
            goto LABEL_188;
          v156 = 0;
          v157 = 1;
          while (v155 != (_QWORD *)-4096)
          {
            if (v156)
              v158 = 0;
            else
              v158 = v155 == (_QWORD *)-8192;
            if (v158)
              v156 = v154;
            v159 = v153 + v157++;
            v153 = v159 & v152;
            v154 = (_QWORD *)(v151 + 16 * v153);
            v155 = (_QWORD *)*v154;
            if (v147 == (_QWORD *)*v154)
              goto LABEL_188;
          }
          if (v156)
            v409 = v156;
          else
            v409 = v154;
        }
        else
        {
          v409 = 0;
        }
        v154 = sub_1C47AD254(v619, (uint64_t)&v689, &v689, v409);
        *v154 = v689;
        v154[1] = 0;
LABEL_188:
        v160 = (llvm::MachineBasicBlock *)v154[1];
        v161 = *(_QWORD *)(v3 + 848);
        v621 = v160;
        *(_QWORD *)(v161 + 40) = v160;
        *(_QWORD *)(v161 + 48) = (char *)v160 + 48;
        *(_BYTE *)(v3 + 1761) = 0;
        v623 = (const llvm::BasicBlock *)v147;
        v162 = (_QWORD *)v147[6];
        v628 = v147 + 5;
        if (v162 != v147 + 5)
        {
          while (1)
          {
            v163 = v3;
            if (v162)
              v164 = (unint64_t)(v162 - 3);
            else
              v164 = 0;
            v165 = *(_QWORD *)(v163 + 848);
            v166 = (unsigned __int8 **)(v164 + 48);
            v167 = (unsigned __int8 **)(v165 + 32);
            if (v164 + 48 != v165 + 32)
            {
              if (*v167)
                llvm::MetadataTracking::untrack(v165 + 32, *v167);
              v168 = *v166;
              *v167 = *v166;
              if (v168)
                llvm::MetadataTracking::track((uint64_t)v167, v168, 2);
            }
            v169 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v632 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v632 + 864) + 16));
            if (((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v169 + 168))(v169, v164) & 1) != 0)
              break;
            switch(*(_BYTE *)(v164 + 16))
            {
              case 0x1D:
                if ((sub_1C54FBF74(v632, v164, *(_QWORD *)(v632 + 848)) & 1) == 0)
                  goto LABEL_573;
                goto LABEL_337;
              case 0x1E:
                sub_1C54FC67C(v632, (uint64_t ***)v164, *(_QWORD **)(v632 + 848));
                goto LABEL_337;
              case 0x1F:
                sub_1C54FD79C(v632, v164, *(unsigned __int8 ***)(v632 + 848));
                goto LABEL_337;
              case 0x20:
                sub_1C626F9D8(v632, (_DWORD *)v164, *(_QWORD *)(v632 + 848));
                goto LABEL_337;
              case 0x21:
                if ((sub_1C626FDBC(v632, v164, *(_QWORD **)(v632 + 848)) & 1) == 0)
                  goto LABEL_573;
                goto LABEL_337;
              case 0x23:
                sub_1C55048B4((llvm::MachineFunction *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v632 + 864) + 8) + 1040), v164, *(_QWORD **)(v632 + 848));
                goto LABEL_337;
              case 0x28:
                sub_1C54FBBFC(v632, 177, v164, *(_QWORD *)(v632 + 848));
                goto LABEL_337;
              case 0x29:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 45;
                goto LABEL_336;
              case 0x2A:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 163;
                goto LABEL_336;
              case 0x2B:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 46;
                goto LABEL_336;
              case 0x2C:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 164;
                goto LABEL_336;
              case 0x2D:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 47;
                goto LABEL_336;
              case 0x2E:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 165;
                goto LABEL_336;
              case 0x2F:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 60;
                goto LABEL_336;
              case 0x30:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 59;
                goto LABEL_336;
              case 0x31:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 168;
                goto LABEL_336;
              case 0x32:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 62;
                goto LABEL_336;
              case 0x33:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 61;
                goto LABEL_336;
              case 0x34:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 169;
                goto LABEL_336;
              case 0x35:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 127;
                goto LABEL_336;
              case 0x36:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 128;
                goto LABEL_336;
              case 0x37:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 129;
                goto LABEL_336;
              case 0x38:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 65;
                goto LABEL_336;
              case 0x39:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 66;
                goto LABEL_336;
              case 0x3A:
                v172 = v632;
                v173 = *(_QWORD *)(v632 + 848);
                v174 = 67;
LABEL_336:
                sub_1C54FBAA8(v172, v174, v164, v173);
                goto LABEL_337;
              case 0x3B:
                if ((sub_1C550448C(v632, v164, *(uint64_t **)(v632 + 848)) & 1) == 0)
                  goto LABEL_573;
                goto LABEL_337;
              case 0x3C:
                sub_1C54FE594(v632, (uint64_t *)v164, *(const llvm::MachineBasicBlock ***)(v632 + 848));
                goto LABEL_337;
              case 0x3D:
                sub_1C54FEA20(v632, v164, *(const llvm::MachineBasicBlock ***)(v632 + 848));
                goto LABEL_337;
              case 0x3E:
                sub_1C54FF540(v632, (uint64_t *)v164, *(uint64_t **)(v632 + 848));
                goto LABEL_337;
              case 0x3F:
                sub_1C6275920(*(_QWORD *)(v632 + 848), *(_WORD *)(v164 + 18) & 7, *(unsigned __int8 *)(v164 + 60));
                goto LABEL_337;
              case 0x40:
                sub_1C550501C(v632, v164, *(_QWORD **)(v632 + 848));
                goto LABEL_337;
              case 0x41:
                if (!sub_1C5505210(v632, v164, *(_QWORD **)(v632 + 848)))
                  goto LABEL_573;
                goto LABEL_337;
              case 0x42:
                v208 = *(_DWORD *)(v164 + 20);
                if ((v208 & 0x40000000) != 0)
                  v209 = *(uint64_t ***)(v164 - 8);
                else
                  v209 = (uint64_t **)(v164 - 32 * (v208 & 0x7FFFFFF));
                v210 = *(_QWORD *)(v632 + 848);
                v211 = sub_1C54F95B0(v632, *v209);
                if (v212)
                  v213 = *v211;
                else
                  v213 = 0;
                v214 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v215)
                  v216 = *v214;
                else
                  v216 = 0;
                LODWORD(v667) = v216;
                LODWORD(v668) = 1;
                LODWORD(v689) = v213;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v210 + 32))(v210, 119, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x43:
                v199 = *(_DWORD *)(v164 + 20);
                if ((v199 & 0x40000000) != 0)
                  v200 = *(uint64_t ***)(v164 - 8);
                else
                  v200 = (uint64_t **)(v164 - 32 * (v199 & 0x7FFFFFF));
                v201 = *(_QWORD *)(v632 + 848);
                v202 = sub_1C54F95B0(v632, *v200);
                if (v203)
                  v204 = *v202;
                else
                  v204 = 0;
                v205 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v206)
                  v207 = *v205;
                else
                  v207 = 0;
                LODWORD(v667) = v207;
                LODWORD(v668) = 1;
                LODWORD(v689) = v204;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v201 + 32))(v201, 126, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x44:
                v244 = *(_DWORD *)(v164 + 20);
                if ((v244 & 0x40000000) != 0)
                  v245 = *(uint64_t ***)(v164 - 8);
                else
                  v245 = (uint64_t **)(v164 - 32 * (v244 & 0x7FFFFFF));
                v246 = *(_QWORD *)(v632 + 848);
                v247 = sub_1C54F95B0(v632, *v245);
                if (v248)
                  v249 = *v247;
                else
                  v249 = 0;
                v250 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v251)
                  v252 = *v250;
                else
                  v252 = 0;
                LODWORD(v667) = v252;
                LODWORD(v668) = 1;
                LODWORD(v689) = v249;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v246 + 32))(v246, 124, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x45:
                v271 = *(_DWORD *)(v164 + 20);
                if ((v271 & 0x40000000) != 0)
                  v272 = *(uint64_t ***)(v164 - 8);
                else
                  v272 = (uint64_t **)(v164 - 32 * (v271 & 0x7FFFFFF));
                v273 = *(_QWORD *)(v632 + 848);
                v274 = sub_1C54F95B0(v632, *v272);
                if (v275)
                  v276 = *v274;
                else
                  v276 = 0;
                v277 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v278)
                  v279 = *v277;
                else
                  v279 = 0;
                LODWORD(v667) = v279;
                LODWORD(v668) = 1;
                LODWORD(v689) = v276;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v273 + 32))(v273, 181, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x46:
                v289 = *(_DWORD *)(v164 + 20);
                if ((v289 & 0x40000000) != 0)
                  v290 = *(uint64_t ***)(v164 - 8);
                else
                  v290 = (uint64_t **)(v164 - 32 * (v289 & 0x7FFFFFF));
                v291 = *(_QWORD *)(v632 + 848);
                v292 = sub_1C54F95B0(v632, *v290);
                if (v293)
                  v294 = *v292;
                else
                  v294 = 0;
                v295 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v296)
                  v297 = *v295;
                else
                  v297 = 0;
                LODWORD(v667) = v297;
                LODWORD(v668) = 1;
                LODWORD(v689) = v294;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v291 + 32))(v291, 180, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x47:
                v253 = *(_DWORD *)(v164 + 20);
                if ((v253 & 0x40000000) != 0)
                  v254 = *(uint64_t ***)(v164 - 8);
                else
                  v254 = (uint64_t **)(v164 - 32 * (v253 & 0x7FFFFFF));
                v255 = *(_QWORD *)(v632 + 848);
                v256 = sub_1C54F95B0(v632, *v254);
                if (v257)
                  v258 = *v256;
                else
                  v258 = 0;
                v259 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v260)
                  v261 = *v259;
                else
                  v261 = 0;
                LODWORD(v667) = v261;
                LODWORD(v668) = 1;
                LODWORD(v689) = v258;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v255 + 32))(v255, 183, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x48:
                v262 = *(_DWORD *)(v164 + 20);
                if ((v262 & 0x40000000) != 0)
                  v263 = *(uint64_t ***)(v164 - 8);
                else
                  v263 = (uint64_t **)(v164 - 32 * (v262 & 0x7FFFFFF));
                v264 = *(_QWORD *)(v632 + 848);
                v265 = sub_1C54F95B0(v632, *v263);
                if (v266)
                  v267 = *v265;
                else
                  v267 = 0;
                v268 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v269)
                  v270 = *v268;
                else
                  v270 = 0;
                LODWORD(v667) = v270;
                LODWORD(v668) = 1;
                LODWORD(v689) = v267;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v264 + 32))(v264, 182, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x49:
                v217 = *(_DWORD *)(v164 + 20);
                if ((v217 & 0x40000000) != 0)
                  v218 = *(uint64_t ***)(v164 - 8);
                else
                  v218 = (uint64_t **)(v164 - 32 * (v217 & 0x7FFFFFF));
                v219 = *(_QWORD *)(v632 + 848);
                v220 = sub_1C54F95B0(v632, *v218);
                if (v221)
                  v222 = *v220;
                else
                  v222 = 0;
                v223 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v224)
                  v225 = *v223;
                else
                  v225 = 0;
                LODWORD(v667) = v225;
                LODWORD(v668) = 1;
                LODWORD(v689) = v222;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v219 + 32))(v219, 179, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x4A:
                v235 = *(_DWORD *)(v164 + 20);
                if ((v235 & 0x40000000) != 0)
                  v236 = *(uint64_t ***)(v164 - 8);
                else
                  v236 = (uint64_t **)(v164 - 32 * (v235 & 0x7FFFFFF));
                v237 = *(_QWORD *)(v632 + 848);
                v238 = sub_1C54F95B0(v632, *v236);
                if (v239)
                  v240 = *v238;
                else
                  v240 = 0;
                v241 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v242)
                  v243 = *v241;
                else
                  v243 = 0;
                LODWORD(v667) = v243;
                LODWORD(v668) = 1;
                LODWORD(v689) = v240;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v237 + 32))(v237, 178, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x4B:
                v280 = *(_DWORD *)(v164 + 20);
                if ((v280 & 0x40000000) != 0)
                  v281 = *(uint64_t ***)(v164 - 8);
                else
                  v281 = (uint64_t **)(v164 - 32 * (v280 & 0x7FFFFFF));
                v282 = *(_QWORD *)(v632 + 848);
                v283 = sub_1C54F95B0(v632, *v281);
                if (v284)
                  v285 = *v283;
                else
                  v285 = 0;
                v286 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v287)
                  v288 = *v286;
                else
                  v288 = 0;
                LODWORD(v667) = v288;
                LODWORD(v668) = 1;
                LODWORD(v689) = v285;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v282 + 32))(v282, 80, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x4C:
                v226 = *(_DWORD *)(v164 + 20);
                if ((v226 & 0x40000000) != 0)
                  v227 = *(uint64_t ***)(v164 - 8);
                else
                  v227 = (uint64_t **)(v164 - 32 * (v226 & 0x7FFFFFF));
                v228 = *(_QWORD *)(v632 + 848);
                v229 = sub_1C54F95B0(v632, *v227);
                if (v230)
                  v231 = *v229;
                else
                  v231 = 0;
                v232 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v233)
                  v234 = *v232;
                else
                  v234 = 0;
                LODWORD(v667) = v234;
                LODWORD(v668) = 1;
                LODWORD(v689) = v231;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v228 + 32))(v228, 81, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x4D:
                v175 = *(_DWORD *)(v164 + 20);
                if ((v175 & 0x40000000) != 0)
                  v176 = *(llvm ****)(v164 - 8);
                else
                  v176 = (llvm ***)(v164 - 32 * (v175 & 0x7FFFFFF));
                v177 = *(_QWORD *)(v632 + 848);
                LLTForType = llvm::getLLTForType(**v176, *(llvm::Type **)(v632 + 880), v170);
                v180 = llvm::getLLTForType(*(llvm **)v164, *(llvm::Type **)(v632 + 880), v179);
                v181 = *(_DWORD *)(v164 + 20);
                if (LLTForType == v180)
                {
                  if ((v181 & 0x40000000) != 0)
                    v182 = *(uint64_t **)(v164 - 8);
                  else
                    v182 = (uint64_t *)(v164 - 32 * (v181 & 0x7FFFFFF));
                  sub_1C54FF408(v632, (uint64_t *)v164, *v182, v177);
                }
                else
                {
                  if ((v181 & 0x40000000) != 0)
                    v298 = *(uint64_t ***)(v164 - 8);
                  else
                    v298 = (uint64_t **)(v164 - 32 * (v181 & 0x7FFFFFF));
                  v299 = sub_1C54F95B0(v632, *v298);
                  if (v300)
                    v301 = *v299;
                  else
                    v301 = 0;
                  v302 = sub_1C54F95B0(v632, (uint64_t *)v164);
                  if (v303)
                    v304 = *v302;
                  else
                    v304 = 0;
                  LODWORD(v667) = v304;
                  LODWORD(v668) = 1;
                  LODWORD(v689) = v301;
                  LODWORD(v691) = 0;
                  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v177 + 32))(v177, 82, &v667, 1, &v689, 1, 0);
                }
                goto LABEL_337;
              case 0x4E:
                v305 = *(_DWORD *)(v164 + 20);
                if ((v305 & 0x40000000) != 0)
                  v306 = *(uint64_t ***)(v164 - 8);
                else
                  v306 = (uint64_t **)(v164 - 32 * (v305 & 0x7FFFFFF));
                v307 = *(_QWORD *)(v632 + 848);
                v308 = sub_1C54F95B0(v632, *v306);
                if (v309)
                  v310 = *v308;
                else
                  v310 = 0;
                v311 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v312)
                  v313 = *v311;
                else
                  v313 = 0;
                LODWORD(v667) = v313;
                LODWORD(v668) = 1;
                LODWORD(v689) = v310;
                LODWORD(v691) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v307 + 32))(v307, 221, &v667, 1, &v689, 1, 0);
                goto LABEL_337;
              case 0x51:
              case 0x52:
                sub_1C54FBD14(v632, v164, *(_QWORD *)(v632 + 848));
                goto LABEL_337;
              case 0x53:
                v183 = *(_QWORD *)(v632 + 848);
                v689 = &v691;
                v690 = (void *)0x400000000;
                v184 = sub_1C54F95B0(v632, (uint64_t *)v164);
                if (v185)
                {
                  v186 = v184;
                  v187 = 4 * v185;
                  do
                  {
                    LODWORD(v667) = *v186;
                    LODWORD(v668) = 1;
                    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v183 + 32))(v183, 69, &v667, 1, 0, 0, 0);
                    v189 = v188;
                    v190 = v690;
                    if (v690 >= (unint64_t)HIDWORD(v690))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v689, (uint64_t)&v691, v690 + 1, 8);
                      v190 = v690;
                    }
                    *((_QWORD *)v689 + v190) = v189;
                    LODWORD(v690) = (_DWORD)v690 + 1;
                    ++v186;
                    v187 -= 4;
                  }
                  while (v187);
                }
                v667 = (void *)v164;
                v191 = *(unsigned int *)(v632 + 552);
                if (v191 < *(_DWORD *)(v632 + 556))
                {
                  v192 = (unint64_t *)(*v617 + 32 * v191);
                  *v192 = v164;
                  v193 = v192 + 3;
                  v192[2] = 0x100000000;
                  v192[1] = (unint64_t)(v192 + 3);
                  v194 = (uint64_t)(v192 + 1);
                  if ((void **)v194 != &v689)
                  {
                    v195 = v690;
                    if ((_DWORD)v690)
                    {
                      v196 = v689;
                      if (v689 == &v691)
                      {
                        if (v690 < 2)
                        {
                          v197 = &v691;
                          v198 = v690;
                          goto LABEL_227;
                        }
                        *(_DWORD *)(v194 + 8) = 0;
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v194, v194 + 16, v195, 8);
                        v198 = v690;
                        if ((_DWORD)v690)
                        {
                          v197 = (uint64_t *)v689;
                          v193 = *(void **)v194;
LABEL_227:
                          memcpy(v193, v197, 8 * v198);
                        }
                        *(_DWORD *)(v194 + 8) = v195;
                      }
                      else
                      {
                        if (v193 != (void *)(v194 + 16))
                        {
                          free(v193);
                          v196 = v689;
                          LODWORD(v195) = (_DWORD)v690;
                        }
                        *(_QWORD *)v194 = v196;
                        *(_DWORD *)(v194 + 8) = v195;
                        *(_DWORD *)(v194 + 12) = HIDWORD(v690);
                        v689 = &v691;
                        HIDWORD(v690) = 0;
                      }
                      LODWORD(v690) = 0;
                    }
                  }
                  ++*(_DWORD *)(v632 + 552);
                  goto LABEL_231;
                }
                sub_1C6270C54((uint64_t)v617, &v667, (uint64_t)&v689);
LABEL_231:
                if (v689 != &v691)
                  free(v689);
LABEL_337:
                v162 = (_QWORD *)v162[1];
                v3 = v632;
                if (v162 == v628 || *(_BYTE *)(v632 + 1761))
                  goto LABEL_413;
                break;
              case 0x54:
                if ((sub_1C5500BC0(v632, v164, *(_QWORD *)(v632 + 848), v171) & 1) == 0)
                  goto LABEL_573;
                goto LABEL_337;
              case 0x55:
                sub_1C54FF260(v632, v164, *(_QWORD *)(v632 + 848));
                goto LABEL_337;
              case 0x58:
                sub_1C62700F4(v632, v164, *(_QWORD *)(v632 + 848));
                goto LABEL_337;
              case 0x59:
                sub_1C5504B20((_QWORD *)v632, v164, *(uint64_t **)(v632 + 848));
                goto LABEL_337;
              case 0x5A:
                sub_1C550494C(v632, v164, *(_QWORD *)(v632 + 848));
                goto LABEL_337;
              case 0x5B:
                sub_1C5504E68(v632, v164, *(_QWORD *)(v632 + 848));
                goto LABEL_337;
              case 0x5C:
                sub_1C54FED98(v632, v164);
                goto LABEL_337;
              case 0x5D:
                sub_1C54FF160(v632, v164);
                goto LABEL_337;
              case 0x5E:
                if ((sub_1C5503E3C(v632, (llvm **)v164, *(uint64_t **)(v632 + 848)) & 1) == 0)
                  goto LABEL_573;
                goto LABEL_337;
              case 0x5F:
                sub_1C5505414(v632, v164, *(_QWORD *)(v632 + 848));
                goto LABEL_337;
              default:
                goto LABEL_573;
            }
          }
LABEL_573:
          v443 = *v166;
          if (*v166)
          {
            v444 = *(_QWORD *)&v443[-8 * *((unsigned int *)v443 + 2)];
            if (*(_BYTE *)v444 != 15)
              v444 = *(_QWORD *)(v444 - 8 * *(unsigned int *)(v444 + 8));
            v445 = *((_DWORD *)v443 + 1);
            LODWORD(v443) = *((unsigned __int16 *)v443 + 1);
          }
          else
          {
            v444 = 0;
            v445 = 0;
          }
          v455 = *((_QWORD *)v623 + 7);
          LODWORD(v690) = 10;
          BYTE4(v690) = 2;
          v691 = v455;
          v692 = v444;
          v693 = __PAIR64__(v443, v445);
          v694 = "gisel-irtranslator";
          v695 = "GISelFailure";
          v696 = 12;
          LOBYTE(v697) = 0;
          v698 = 0;
          v699 = v701;
          v700 = 0x400000000;
          v702 = 0;
          v703 = -1;
          v704 = v623;
          v689 = &off_1E814E538;
          v667 = "unable to translate instruction: ";
          v668 = 33;
          sub_1C53B17B4((uint64_t)&v699, (const void **)&v667);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v650, "Opcode", 6uLL, (_BYTE *)v164);
          sub_1C47E3888((uint64_t)&v689, (uint64_t)v650);
          if (v653 < 0)
            operator delete(v652);
          if (v651 < 0)
            operator delete(v650[0]);
          sub_1C550930C(****v618, (uint64_t)"gisel-irtranslator", 18);
          v648[0] = 0;
          v648[1] = 0;
          v649 = 0;
          LODWORD(v668) = 0;
          v672 = 0;
          v673 = 0;
          v667 = &unk_1E81A7208;
          v675 = v648;
          v674 = 0;
          v670 = 0;
          v671 = 0;
          v669 = 0;
          llvm::Value::print((llvm::Value *)v164, (llvm::raw_ostream *)&v667, 0);
          v665 = ": '";
          v666 = 3;
          sub_1C53B17B4((uint64_t)&v699, (const void **)&v665);
          v456 = (const char *)v675;
          v457 = *((_BYTE *)v675 + 23);
          v458 = v457 < 0;
          if (v457 < 0)
            v456 = (const char *)*v675;
          v459 = v457 & 0x7F;
          if (v458)
            v459 = (uint64_t)v675[1];
          v665 = v456;
          v666 = v459;
          sub_1C53B17B4((uint64_t)&v699, (const void **)&v665);
          v665 = "'";
          v666 = 1;
          sub_1C53B17B4((uint64_t)&v699, (const void **)&v665);
          v667 = off_1E81A6E70;
          if (v674 == 1 && v669)
            MEMORY[0x1CAA32F9C](v669, 0x1000C8077774924);
          v3 = v632;
          if (SHIBYTE(v649) < 0)
            operator delete(v648[0]);
          sub_1C54FB238(**(uint64_t *****)(v632 + 864), *(uint64_t **)(*(_QWORD *)(v632 + 864) + 360), *(_QWORD *)(v632 + 888), *(llvm::OptimizationRemarkEmitter **)(v632 + 904), (llvm::DiagnosticInfoOptimizationBase *)&v689);
          v689 = &off_1E814E790;
          v460 = (char *)v699;
          if ((_DWORD)v700)
          {
            v461 = (unint64_t)v700 << 6;
            do
            {
              v462 = (void **)&v460[v461];
              if (v460[v461 - 17] < 0)
                operator delete(*(v462 - 5));
              if (*((char *)v462 - 41) < 0)
                operator delete(*(v462 - 8));
              v461 -= 64;
            }
            while (v461);
LABEL_638:
            v460 = (char *)v699;
            goto LABEL_639;
          }
          goto LABEL_639;
        }
LABEL_413:
        v314 = *(_QWORD *)(v3 + 1792);
        v316 = *(_QWORD *)(v314 + 64);
        v315 = (uint64_t *)(v314 + 64);
        v317 = *(v315 - 1);
        v629 = v316;
        v627 = (char *)v148;
        if (v317 != v316)
        {
          do
          {
            if (!*(_BYTE *)(v317 + 45))
              sub_1C54FE118(v3, v317, *(_QWORD *)(v317 + 48));
            v630 = *(unsigned int *)(v317 + 72);
            if ((_DWORD)v630)
            {
              v318 = 0;
              v319 = *(_DWORD *)(v317 + 176);
              v635 = v317 + 56;
              v638 = v317;
              v320 = *(unsigned __int8 *)(v317 + 46);
              v321 = *(unsigned __int8 *)(v317 + 184);
              v631 = (llvm::APInt *)(v317 + 16);
              v322 = v630 - 2;
              while (1)
              {
                v646 = *(_QWORD *)(v317 + 64);
                v323 = (int8x8_t *)(v646 + v318);
                v324 = *(_DWORD *)(v646 + v318 + 24);
                v325 = v319 >= v324;
                v326 = v319 - v324;
                if (!v325)
                  v326 = 0;
                v643 = v326;
                v327 = (uint64_t)v323[1];
                v328 = v320 | v321;
                v329 = v323 + 5;
                if (32 * v630 - 32 == v318)
                  v329 = (int8x8_t *)v635;
                if (v322)
                  v330 = 1;
                else
                  v330 = v328 == 0;
                v331 = v323 + 6;
                if (v330)
                  v331 = v329;
                v640 = (llvm::MachineBasicBlock *)*v331;
                v332 = *(_DWORD *)(v317 + 40);
                v333 = *(_QWORD **)(v3 + 848);
                v333[5] = v327;
                v333[6] = v327 + 48;
                LLTForMVT = (void *)llvm::getLLTForMVT(*(_BYTE *)(v317 + 44));
                v335 = v317;
                v336 = LLTForMVT;
                v337 = (unint64_t)*v323;
                v338 = (uint8x8_t)vcnt_s8(*v323);
                v338.i16[0] = vaddlv_u8(v338);
                v339 = v338.u32[0];
                if (v338.u32[0] == 1)
                {
                  v689 = LLTForMVT;
                  LODWORD(v690) = 0;
                  v340 = sub_1C5544694((uint64_t)v333, (unint64_t *)&v689, __clz(__rbit64(v337)));
                  v667 = (void *)9;
                  LODWORD(v668) = 0;
                  LODWORD(v689) = 32;
                  LODWORD(v691) = 2;
                  LODWORD(v692) = v332;
                  LODWORD(v694) = 0;
                  v695 = (const char *)v340;
                  v696 = v341;
                  v697 = 1;
                  (*(void (**)(_QWORD *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v333 + 32))(v333, 134, &v667, 1, &v689, 3, 0);
                  v343 = *(_DWORD *)(*(_QWORD *)(v342 + 32) + 4);
                }
                else
                {
                  v344 = *(_DWORD *)(v335 + 24);
                  if (v344 >= 0x41 && v344 - llvm::APInt::countLeadingZerosSlowCase(v631) > 0x40)
                    goto LABEL_436;
                  v345 = *(llvm::APInt **)v631;
                  if (v344 < 0x41)
                    v345 = v631;
                  if (*(_QWORD *)v345 == v339)
                  {
                    v689 = v336;
                    LODWORD(v690) = 0;
                    v346 = sub_1C5544694((uint64_t)v333, (unint64_t *)&v689, __clz(__rbit64(~v337)));
                    v667 = (void *)9;
                    LODWORD(v668) = 0;
                    LODWORD(v689) = 33;
                    LODWORD(v691) = 2;
                    LODWORD(v692) = v332;
                    LODWORD(v694) = 0;
                    v695 = (const char *)v346;
                    v696 = v347;
                    v697 = 1;
                  }
                  else
                  {
LABEL_436:
                    v689 = v336;
                    LODWORD(v690) = 0;
                    v348 = (void *)sub_1C5544694((uint64_t)v333, (unint64_t *)&v689, 1);
                    v667 = v336;
                    LODWORD(v668) = 0;
                    v689 = v348;
                    v690 = v349;
                    LODWORD(v691) = 1;
                    LODWORD(v692) = v332;
                    LODWORD(v694) = 0;
                    v350 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v333 + 32))(v333, 127, &v667, 1, &v689, 2, 0);
                    v352 = v351;
                    v689 = v336;
                    LODWORD(v690) = 0;
                    v353 = sub_1C5544694((uint64_t)v333, (unint64_t *)&v689, *(_QWORD *)(v646 + v318));
                    v667 = v336;
                    LODWORD(v668) = 0;
                    v689 = v350;
                    v690 = v352;
                    LODWORD(v691) = 1;
                    v692 = v353;
                    v693 = v354;
                    LODWORD(v694) = 1;
                    v355 = (*(uint64_t (**)(_QWORD *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v333 + 32))(v333, 65, &v667, 1, &v689, 2, 0);
                    v357 = v356;
                    v689 = v336;
                    LODWORD(v690) = 0;
                    v358 = sub_1C5544694((uint64_t)v333, (unint64_t *)&v689, 0);
                    v667 = (void *)9;
                    LODWORD(v668) = 0;
                    LODWORD(v689) = 33;
                    LODWORD(v691) = 2;
                    v692 = v355;
                    v693 = v357;
                    LODWORD(v694) = 1;
                    v695 = (const char *)v358;
                    v696 = v359;
                    v697 = 1;
                  }
                  (*(void (**)(_QWORD *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v333 + 32))(v333, 134, &v667, 1, &v689, 3, 0);
                  v343 = *(_DWORD *)(*(_QWORD *)(v360 + 32) + 4);
                  v3 = v632;
                }
                v319 = v643;
                v361 = v646 + v318;
                v362 = *(_QWORD **)(v646 + v318 + 16);
                v363 = *(_QWORD *)(v3 + 944);
                if (v363)
                {
                  EdgeProbability = v323[3].i32[0];
                  if (EdgeProbability == -1)
                    EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v363, *(_QWORD *)(v327 + 16), v362[2]);
                  v365 = v640;
                  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v327, v362, EdgeProbability);
                }
                else
                {
                  llvm::MachineBasicBlock::addSuccessorWithoutProb((_QWORD *)v327, *(llvm::MachineBasicBlock **)(v646 + v318 + 16));
                  v365 = v640;
                }
                v366 = *(_QWORD *)(v3 + 944);
                v317 = v638;
                if (v366)
                {
                  v367 = v643;
                  if (v643 == -1)
                    v367 = llvm::BranchProbabilityInfo::getEdgeProbability(v366, *(_QWORD *)(v327 + 16), *((_QWORD *)v365 + 2));
                  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v327, v365, v367);
                }
                else
                {
                  llvm::MachineBasicBlock::addSuccessorWithoutProb((_QWORD *)v327, v365);
                }
                sub_1C50D6C6C(*(unsigned int **)(v327 + 112), *(unsigned int **)(v327 + 120));
                sub_1C54FB7D0(v3, *(_QWORD *)(*(_QWORD *)(v638 + 48) + 16), *(_QWORD *)(*(_QWORD *)(v361 + 16) + 16), v327);
                LODWORD(v689) = v343;
                LODWORD(v691) = 0;
                sub_1C5546168(v333, (int *)&v689, *(_QWORD *)(v361 + 16));
                if (*(_QWORD *)(v327 + 8) == *(_QWORD *)(v327 + 32) + 320)
                  v368 = 0;
                else
                  v368 = *(llvm::MachineBasicBlock **)(v327 + 8);
                if (v368 != v365)
                  sub_1C55450BC(v333, (unsigned __int8 *)v365);
                v320 = *(unsigned __int8 *)(v638 + 46);
                v321 = *(unsigned __int8 *)(v638 + 184);
                if (!v322)
                {
                  if (v320 | v321)
                    break;
                }
                v318 += 32;
                --v322;
                if (32 * v630 == v318)
                  goto LABEL_458;
              }
              sub_1C54FB7D0(v3, *(_QWORD *)(*(_QWORD *)(v638 + 48) + 16), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v638 + 64) + 32 * (v630 - 1) + 16) + 16), v327);
              --*(_DWORD *)(v638 + 72);
            }
LABEL_458:
            v369 = *(_QWORD *)(v317 + 48);
            v370 = *(_QWORD *)(v369 + 16);
            v371 = *(_QWORD *)(*(_QWORD *)(v317 + 56) + 16);
            sub_1C54FB7D0(v3, v370, v371, v369);
            if (!*(_BYTE *)(v317 + 46))
              sub_1C54FB7D0(v3, v370, v371, *(_QWORD *)(*(_QWORD *)(v317 + 64) + 32 * *(unsigned int *)(v317 + 72) - 24));
            v317 += 192;
          }
          while (v317 != v629);
          v372 = *(_QWORD *)(v3 + 1792);
          v373 = *(_QWORD *)(v372 + 64);
          v315 = (uint64_t *)(v372 + 64);
          v317 = v373;
          v374 = *(v315 - 1);
          if (v373 != v374)
          {
            do
            {
              v317 -= 192;
              sub_1C62158C4(v317);
            }
            while (v317 != v374);
            v317 = v374;
          }
        }
        *v315 = v317;
        v375 = *(_QWORD *)(v3 + 1792);
        v378 = *(_QWORD *)(v375 + 40);
        v376 = (uint64_t *)(v375 + 40);
        v377 = v378;
        v379 = *(v376 - 1);
        if (v379 != v378)
        {
          do
          {
            if (!*(_BYTE *)(v379 + 48))
              sub_1C626F2E4(v3, v379 + 56, v379, *(_QWORD *)(v379 + 40));
            sub_1C626F200(v3, (int *)(v379 + 56), *(_QWORD *)(v379 + 64));
            v379 += 80;
          }
          while (v379 != v377);
          v380 = *(_QWORD *)(v3 + 1792);
          v381 = *(_QWORD *)(v380 + 40);
          v376 = (uint64_t *)(v380 + 40);
          v379 = v381;
          v382 = *(v376 - 1);
          if (v381 != v382)
          {
            do
            {
              v379 -= 80;
              sub_1C61996A0(v379);
            }
            while (v379 != v382);
            v379 = v382;
          }
        }
        *v376 = v379;
        v383 = *(_QWORD *)(v3 + 1792);
        v386 = *(int **)(v383 + 16);
        v384 = (int **)(v383 + 16);
        v385 = v386;
        v387 = *(v384 - 1);
        if (v387 == v386)
          goto LABEL_482;
        do
        {
          sub_1C54FD04C(v3, v387, *(_QWORD *)(*(_QWORD *)(v3 + 848) + 40), *(unsigned __int8 ***)(v3 + 848));
          v387 += 22;
        }
        while (v387 != v385);
        v388 = *(_QWORD *)(v3 + 1792);
        v390 = *(int **)(v388 + 16);
        v384 = (int **)(v388 + 16);
        v389 = v390;
        v387 = *(v384 - 1);
        if (v390 == v387)
        {
          v387 = v389;
LABEL_482:
          v392 = v622;
          goto LABEL_483;
        }
        v391 = (unsigned __int8 **)(v389 - 4);
        v392 = v622;
        do
        {
          if (*v391)
            llvm::MetadataTracking::untrack((uint64_t)v391, *v391);
          v393 = *(v391 - 2);
          if (v393)
            llvm::MetadataTracking::untrack((uint64_t)(v391 - 2), v393);
          v394 = (int *)(v391 - 9);
          v391 -= 11;
        }
        while (v394 != v387);
LABEL_483:
        *v384 = v387;
        v395 = **(void ****)(v3 + 8);
        do
        {
          v396 = *v395;
          v395 += 2;
        }
        while (v396 != &llvm::StackProtector::ID);
        v397 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v395 - 1) + 96))(*(v395 - 1), &llvm::StackProtector::ID);
        if (*(_BYTE *)(v397 + 312) && !*(_BYTE *)(v397 + 313))
        {
          if (*v628)
            v410 = *v628 - 24;
          else
            v410 = 0;
          if (*(unsigned __int8 *)(v410 + 16) - 29 >= 0xB)
            v410 = 0;
          if (*(_BYTE *)(v410 + 16) == 29)
          {
            v411 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v3 + 864) + 16));
            v412 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v411 + 792))(v411, *(_QWORD *)(**(_QWORD **)(v3 + 864) + 40)) != 0;
            sub_1C62701FC(v624, v623, v621, v412);
          }
        }
        v398 = *(llvm **)v624;
        if (*(_QWORD *)v624)
        {
          v399 = *(llvm **)(v3 + 1776);
          v400 = *(_QWORD *)(v3 + 1784);
          if (v399 && v400)
          {
            v401 = (llvm::MachineBasicBlock *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 864)
                                                                                              + 16)
                                                                                + 104))(*(_QWORD *)(*(_QWORD *)(v3 + 864) + 16));
            SplitPointForStackProtector = (unint64_t *)llvm::findSplitPointForStackProtector(v398, v401, v402);
            if (v399 != v398)
            {
              v404 = (unint64_t *)((char *)v398 + 48);
              if ((unint64_t *)((char *)v398 + 48) != SplitPointForStackProtector)
              {
                v405 = *((_QWORD *)v399 + 5);
                v406 = SplitPointForStackProtector;
                do
                {
                  v406[3] = v405;
                  v406 = (unint64_t *)v406[1];
                }
                while (v406 != v404);
                sub_1C4785D30((unint64_t *)v399 + 6, SplitPointForStackProtector, v404);
              }
            }
            if (!sub_1C627025C(v3, (uint64_t)v624, (uint64_t)v398)
              || *(_QWORD *)(v3 + 1784) + 48 == (*(_QWORD *)(*(_QWORD *)(v3 + 1784) + 48) & 0xFFFFFFFFFFFFFFF8)
              && !sub_1C62705F4(v3, *(_QWORD *)(v3 + 1784), v407, v408))
            {
LABEL_591:
              if (*v628)
                v449 = *v628 - 24;
              else
                v449 = 0;
              if (*(unsigned __int8 *)(v449 + 16) - 29 >= 0xB)
                v449 = 0;
              v450 = *(_QWORD *)(v449 + 48);
              if (v450)
              {
                v451 = *(_QWORD *)(v450 - 8 * *(unsigned int *)(v450 + 8));
                v452 = v623;
                if (*(_BYTE *)v451 != 15)
                  v451 = *(_QWORD *)(v451 - 8 * *(unsigned int *)(v451 + 8));
                v453 = *(_DWORD *)(v450 + 4);
                LODWORD(v450) = *(unsigned __int16 *)(v450 + 2);
              }
              else
              {
                v451 = 0;
                v453 = 0;
                v452 = v623;
              }
              v465 = *((_QWORD *)v452 + 7);
              LODWORD(v690) = 10;
              BYTE4(v690) = 2;
              v691 = v465;
              v692 = v451;
              v693 = __PAIR64__(v450, v453);
              v694 = "gisel-irtranslator";
              v695 = "GISelFailure";
              v696 = 12;
              LOBYTE(v697) = 0;
              v698 = 0;
              v699 = v701;
              v700 = 0x400000000;
              v702 = 0;
              v703 = -1;
              v704 = v452;
              v689 = &off_1E814E538;
              v667 = "unable to translate basic block";
              v668 = 31;
              sub_1C53B17B4((uint64_t)&v699, (const void **)&v667);
              sub_1C54FB238(**(uint64_t *****)(v3 + 864), *(uint64_t **)(*(_QWORD *)(v3 + 864) + 360), *(_QWORD *)(v3 + 888), *(llvm::OptimizationRemarkEmitter **)(v3 + 904), (llvm::DiagnosticInfoOptimizationBase *)&v689);
              v689 = &off_1E814E790;
              v460 = (char *)v699;
              if ((_DWORD)v700)
              {
                v466 = (unint64_t)v700 << 6;
                do
                {
                  v467 = (void **)&v460[v466];
                  if (v460[v466 - 17] < 0)
                    operator delete(*(v467 - 5));
                  if (*((char *)v467 - 41) < 0)
                    operator delete(*(v467 - 8));
                  v466 -= 64;
                }
                while (v466);
                goto LABEL_638;
              }
LABEL_639:
              if (v460 != v701)
                free(v460);
              v616 = 0;
LABEL_642:
              v145 = v705;
LABEL_643:
              *v615 = 0;
              v615[1] = 0;
              if (v145)
              {
                v706 = (uint64_t)v145;
                operator delete(v145);
              }
              if (v616)
              {
                v468 = *(unsigned int *)(v3 + 552);
                if ((_DWORD)v468)
                {
                  v469 = *(_QWORD **)(v632 + 544);
                  v633 = &v469[4 * v468];
                  while (1)
                  {
                    v470 = *v469;
                    v644 = v469[1];
                    v641 = *(_QWORD *)(*(_QWORD *)v644 + 24);
                    v471 = *(_QWORD *)(v632 + 856);
                    v472 = (unsigned __int8 **)(*v469 + 48);
                    v473 = (unsigned __int8 **)(v471 + 32);
                    if (v472 != (unsigned __int8 **)(v471 + 32))
                    {
                      if (*v473)
                        llvm::MetadataTracking::untrack(v471 + 32, *v473);
                      v474 = *v472;
                      *v473 = *v472;
                      if (v474)
                        llvm::MetadataTracking::track((uint64_t)v473, v474, 2);
                    }
                    v689 = &v693;
                    v690 = &v693;
                    v691 = 16;
                    LODWORD(v692) = 0;
                    v475 = *(_DWORD *)(v470 + 20);
                    v476 = v475 & 0x7FFFFFF;
                    if ((v475 & 0x7FFFFFF) != 0)
                      break;
LABEL_734:
                    v469 += 4;
                    if (v469 == v633)
                      goto LABEL_735;
                  }
                  v636 = v469;
                  v477 = 0;
                  while (2)
                  {
                    if ((v475 & 0x40000000) != 0)
                      v478 = *(_QWORD *)(v470 - 8);
                    else
                      v478 = v470 - 32 * v476;
                    v479 = *(void **)(v478 + 32 * *(unsigned int *)(v470 + 60) + 8 * v477);
                    v647 = sub_1C54F95B0(v632, *(uint64_t **)(v478 + 32 * v477));
                    v481 = v480;
                    v482 = *(_QWORD *)(v632 + 520);
                    v483 = *(_DWORD *)(v632 + 536);
                    v484 = v479 >> 4;
                    if (v483)
                    {
                      v485 = *(_QWORD *)(v470 + 40);
                      v486 = ((v485 >> 4) ^ (v485 >> 9) | ((unint64_t)(v484 ^ (v479 >> 9)) << 32))
                           + ~((unint64_t)((v485 >> 4) ^ (v485 >> 9)) << 32);
                      v487 = (v486 ^ (v486 >> 22)) + ~((v486 ^ (v486 >> 22)) << 13);
                      v488 = (9 * (v487 ^ (v487 >> 8))) ^ ((9 * (v487 ^ (v487 >> 8))) >> 15);
                      v489 = (v483 - 1) & (((v488 + ~(v488 << 27)) >> 31) ^ (v488 + ~((_DWORD)v488 << 27)));
                      v490 = v482 + 40 * v489;
                      v492 = *(void **)v490;
                      v491 = *(_QWORD *)(v490 + 8);
                      if (*(void **)v490 != v479 || v491 != v485)
                      {
                        v494 = 1;
                        while (v492 != (void *)-4096 || v491 != -4096)
                        {
                          v495 = v489 + v494++;
                          v489 = v495 & (v483 - 1);
                          v490 = v482 + 40 * v489;
                          v492 = *(void **)v490;
                          v491 = *(_QWORD *)(v490 + 8);
                          if (*(void **)v490 == v479 && v491 == v485)
                            goto LABEL_672;
                        }
                        goto LABEL_671;
                      }
                    }
                    else
                    {
LABEL_671:
                      v490 = v482 + 40 * v483;
                    }
LABEL_672:
                    if (v490 == v482 + 40 * v483)
                    {
                      v648[0] = v479;
                      v497 = *(_DWORD *)(v632 + 512);
                      if (!v497)
                      {
                        v531 = 0;
                        goto LABEL_723;
                      }
                      v498 = *(_QWORD *)(v632 + 496);
                      v499 = v484 ^ (v479 >> 9);
                      v500 = v497 - 1;
                      v501 = (v497 - 1) & v499;
                      v502 = (_QWORD *)(v498 + 16 * v501);
                      v503 = (void *)*v502;
                      if ((void *)*v502 != v479)
                      {
                        v504 = 0;
                        v505 = 1;
                        while (v503 != (void *)-4096)
                        {
                          if (v504)
                            v506 = 0;
                          else
                            v506 = v503 == (void *)-8192;
                          if (v506)
                            v504 = v502;
                          v507 = v501 + v505++;
                          v501 = v507 & v500;
                          v502 = (_QWORD *)(v498 + 16 * v501);
                          v503 = (void *)*v502;
                          if ((void *)*v502 == v479)
                            goto LABEL_683;
                        }
                        if (v504)
                          v531 = v504;
                        else
                          v531 = v502;
LABEL_723:
                        v502 = sub_1C47AD254(v619, (uint64_t)v648, v648, v531);
                        *v502 = v648[0];
                        v502[1] = 0;
                      }
LABEL_683:
                      v508 = v502[1];
                      v667 = &v669;
                      v668 = 0x400000000;
                      sub_1C4848C0C((unsigned int *)&v667, 1uLL, v508);
                      v705 = (char *)v707;
                      v706 = 0x100000000;
                      v509 = v668;
                      v510 = (uint64_t *)v667;
                      if ((_DWORD)v668)
                      {
                        if (v667 == &v669)
                        {
                          if (v668 < 2uLL)
                          {
                            v511 = (char *)v707;
                            v512 = 8;
                            v510 = &v669;
                            goto LABEL_687;
                          }
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, v668, 8);
                          v510 = (uint64_t *)v667;
                          if ((_DWORD)v668)
                          {
                            v511 = v705;
                            v512 = 8 * v668;
LABEL_687:
                            memcpy(v511, v510, v512);
                            v510 = (uint64_t *)v667;
                          }
                          LODWORD(v706) = v509;
                        }
                        else
                        {
                          v705 = (char *)v667;
                          v706 = v668;
                          v667 = &v669;
                          HIDWORD(v668) = 0;
                          v510 = &v669;
                        }
                        LODWORD(v668) = 0;
                      }
                      if (v510 != &v669)
                      {
                        free(v510);
                        v509 = v706;
                      }
                      v513 = (uint64_t *)v705;
                      if (v509)
                      {
                        v514 = &v705[8 * v509];
                        goto LABEL_702;
                      }
                      goto LABEL_716;
                    }
                    v705 = (char *)v707;
                    v706 = 0x100000000;
                    v515 = *(unsigned int *)(v490 + 24);
                    v516 = (const void **)(v490 + 16);
                    if ((_DWORD)v515)
                      v517 = v516 == (const void **)&v705;
                    else
                      v517 = 1;
                    if (!v517)
                    {
                      if ((_DWORD)v515 == 1)
                      {
                        v518 = 1;
                        v519 = (char *)v707;
                        v520 = 8;
                        goto LABEL_700;
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, *(unsigned int *)(v490 + 24), 8);
                      v532 = *(unsigned int *)(v490 + 24);
                      if ((_DWORD)v532)
                      {
                        v519 = v705;
                        v520 = 8 * v532;
                        v518 = v515;
LABEL_700:
                        memcpy(v519, *v516, v520);
                      }
                      else
                      {
                        v518 = v515;
                      }
                      LODWORD(v706) = v515;
                      v513 = (uint64_t *)v705;
                      v514 = &v705[8 * v518];
                      do
                      {
LABEL_702:
                        v521 = *v513;
                        v522 = sub_1C477672C((uint64_t)&v689, *v513);
                        if (v690 == v689)
                          v523 = (uint64_t *)((char *)&v691 + 4);
                        else
                          v523 = &v691;
                        if (v522 == (_QWORD *)((char *)v690 + 8 * *(unsigned int *)v523))
                        {
                          v524 = *(_QWORD **)(v641 + 64);
                          v525 = *(_QWORD **)(v641 + 72);
                          if (v524 != v525)
                          {
                            while (*v524 != v521)
                            {
                              if (++v524 == v525)
                              {
                                v524 = *(_QWORD **)(v641 + 72);
                                break;
                              }
                            }
                          }
                          if (v524 != v525)
                          {
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v689, v521);
                            if (v481)
                            {
                              v526 = 0;
                              v527 = 1;
                              do
                              {
                                v528 = *(llvm::MachineInstr **)(v644 + 8 * v526);
                                v529 = v647[v526];
                                v530 = *(llvm::MachineFunction **)(v632 + 864);
                                v668 = 0;
                                HIDWORD(v667) = v529;
                                LODWORD(v667) = 0;
                                v669 = 0;
                                v670 = 0;
                                llvm::MachineInstr::addOperand(v528, v530, (const llvm::MachineOperand *)&v667);
                                v668 = 0;
                                v669 = v521;
                                LODWORD(v667) = 4;
                                llvm::MachineInstr::addOperand(v528, v530, (const llvm::MachineOperand *)&v667);
                                v526 = v527;
                                v458 = v481 > v527++;
                              }
                              while (v458);
                            }
                          }
                        }
                        ++v513;
                      }
                      while (v513 != (uint64_t *)v514);
                      v513 = (uint64_t *)v705;
LABEL_716:
                      if (v513 != v707)
                        free(v513);
                    }
                    ++v477;
                    v475 = *(_DWORD *)(v470 + 20);
                    v476 = v475 & 0x7FFFFFF;
                    if (v477 >= v476)
                    {
                      v469 = v636;
                      if (v690 != v689)
                        free(v690);
                      goto LABEL_734;
                    }
                    continue;
                  }
                }
LABEL_735:
                llvm::SwiftErrorValueTracking::propagateVRegs(v625);
                v533 = v626;
                v534 = (llvm::MachineBasicBlock *)**((_QWORD **)v626 + 11);
                v535 = (unint64_t *)*((_QWORD *)v626 + 7);
                if (v535 != v620)
                {
                  v536 = (unint64_t *)*((_QWORD *)v534 + 7);
                  if (v536 != v620)
                  {
                    if (v534 != v626)
                    {
                      v590 = *((_QWORD *)v534 + 5);
                      v591 = (unint64_t *)*((_QWORD *)v626 + 7);
                      do
                      {
                        v591[3] = v590;
                        v591 = (unint64_t *)v591[1];
                      }
                      while (v591 != v620);
                    }
                    sub_1C4785D30(v536, v535, v620);
                    v533 = v626;
                  }
                }
                v537 = (_OWORD *)*((_QWORD *)v533 + 19);
                v538 = (_OWORD *)*((_QWORD *)v533 + 20);
                if (v538 != v537)
                {
                  v539 = (_OWORD *)*((_QWORD *)v534 + 20);
                  do
                  {
                    v540 = *((_QWORD *)v534 + 21);
                    if ((unint64_t)v539 >= v540)
                    {
                      v542 = (_OWORD *)*((_QWORD *)v534 + 19);
                      v543 = v539 - v542;
                      v544 = v543 + 1;
                      if ((unint64_t)(v543 + 1) >> 60)
                        abort();
                      v545 = v540 - (_QWORD)v542;
                      if (v545 >> 3 > v544)
                        v544 = v545 >> 3;
                      if ((unint64_t)v545 >= 0x7FFFFFFFFFFFFFF0)
                        v546 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v546 = v544;
                      if (v546)
                      {
                        if (v546 >> 60)
                          sub_1C4764EE4();
                        v547 = (char *)operator new(16 * v546);
                      }
                      else
                      {
                        v547 = 0;
                      }
                      v548 = &v547[16 * v543];
                      *(_OWORD *)v548 = *v537;
                      v549 = v548;
                      if (v539 != v542)
                      {
                        do
                        {
                          *((_OWORD *)v549 - 1) = *(v539 - 1);
                          v549 -= 16;
                          --v539;
                        }
                        while (v539 != v542);
                        v539 = (_OWORD *)*((_QWORD *)v534 + 19);
                      }
                      v541 = v548 + 16;
                      *((_QWORD *)v534 + 19) = v549;
                      *((_QWORD *)v534 + 20) = v548 + 16;
                      *((_QWORD *)v534 + 21) = &v547[16 * v546];
                      if (v539)
                        operator delete(v539);
                    }
                    else
                    {
                      *v539 = *v537;
                      v541 = v539 + 1;
                    }
                    *((_QWORD *)v534 + 20) = v541;
                    ++v537;
                    v539 = v541;
                  }
                  while (v537 != v538);
                }
                llvm::MachineBasicBlock::sortUniqueLiveIns(v534);
                llvm::MachineBasicBlock::removeSuccessor(v626, v534, 0);
                *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v626 + 4) + 104) + 8 * *((unsigned int *)v626 + 6)) = 0;
                *((_DWORD *)v626 + 6) = -1;
                v550 = *(_QWORD *)v626;
                v551 = (_QWORD *)*((_QWORD *)v626 + 1);
                *v551 = *(_QWORD *)v626;
                *(_QWORD *)(v550 + 8) = v551;
                *(_QWORD *)v626 = 0;
                *((_QWORD *)v626 + 1) = 0;
                v3 = v632;
                llvm::MachineFunction::deleteMachineBasicBlock(*(llvm::MachineFunction **)(v632 + 864), (llvm::MachineBasicBlock **)v626);
                v552 = **(void ****)(v632 + 8);
                do
                {
                  v553 = *v552;
                  v552 += 2;
                }
                while (v553 != &llvm::StackProtector::ID);
                v554 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v552 - 1) + 96))(*(v552 - 1), &llvm::StackProtector::ID);
                llvm::StackProtector::copyToMachineFrameInfo(v554, *(llvm::MachineFrameInfo **)(*(_QWORD *)(v632 + 864) + 56));
              }
              v676 = (const char *)&off_1E7FA1778;
              v677 = (uint64_t)&unk_1E7FA17D0;
              if (v683 != v685)
                free(v683);
              v677 = (uint64_t)off_1E7FA1810;
              v442 = v679;
              if (v679 != v678)
LABEL_765:
                free(v442);
              goto LABEL_766;
            }
            *(_QWORD *)v624 = 0;
            *((_QWORD *)v624 + 1) = 0;
          }
          else if (!((unint64_t)v399 | v400))
          {
            goto LABEL_591;
          }
        }
        v50 = v627 == v392;
        v146 = (uint64_t)v627;
        if (v50)
        {
          v616 = 1;
          goto LABEL_642;
        }
      }
    }
    if ((*((_BYTE *)v645 + 23) & 0x20) == 0)
      goto LABEL_551;
    v420 = ***v645;
    v689 = v645;
    v421 = *(_DWORD *)(v420 + 2496);
    if (v421)
    {
      v422 = *(_QWORD *)(v420 + 2480);
      v423 = v421 - 1;
      v424 = v423 & ((v645 >> 4) ^ (v645 >> 9));
      v425 = (uint64_t ****)(v422 + 40 * v424);
      v426 = *v425;
      if (*v425 == v645)
        goto LABEL_546;
      v427 = 0;
      v428 = 1;
      while (v426 != (uint64_t ***)-4096)
      {
        if (v427)
          v429 = 0;
        else
          v429 = v426 == (uint64_t ***)-8192;
        if (v429)
          v427 = v425;
        v430 = v424 + v428++;
        v424 = v430 & v423;
        v425 = (uint64_t ****)(v422 + 40 * v424);
        v426 = *v425;
        if (*v425 == v645)
          goto LABEL_546;
      }
      if (v427)
        v588 = v427;
      else
        v588 = v425;
    }
    else
    {
      v588 = 0;
    }
    v425 = (uint64_t ****)sub_1C541AB24(v420 + 2480, (uint64_t)&v689, (uint64_t *)&v689, v588);
    v589 = (uint64_t ***)v689;
    v425[3] = 0;
    v425[4] = 0;
    *v425 = v589;
    v425[1] = (uint64_t ***)(v425 + 3);
    v425[2] = (uint64_t ***)0x100000000;
LABEL_546:
    v431 = *((unsigned int *)v425 + 4);
    if ((_DWORD)v431)
    {
      v432 = v425[1] + 1;
      v433 = 16 * v431;
      LODWORD(v434) = 0;
      while (*((_DWORD *)v432 - 2))
      {
        v435 = 0;
        v432 += 2;
        v433 -= 16;
        if (!v433)
          goto LABEL_552;
      }
      v434 = *v432;
      if (*v432)
      {
        v435 = *v432;
        if (*(_BYTE *)v434 != 15)
          v435 = *(_QWORD *)(v434 - 8 * *(unsigned int *)(v434 + 8));
        LODWORD(v434) = *(_DWORD *)(v434 + 28);
      }
      else
      {
        v435 = 0;
      }
LABEL_552:
      v436 = v645[10];
      if (v436)
        v437 = (uint64_t *)(v436 - 3);
      else
        v437 = 0;
      v438 = v437[7];
      LODWORD(v690) = 10;
      BYTE4(v690) = 2;
      v691 = v438;
      v692 = v435;
      v693 = v434;
      v694 = "gisel-irtranslator";
      v695 = "GISelFailure";
      v696 = 12;
      LOBYTE(v697) = 0;
      v698 = 0;
      v699 = v701;
      v700 = 0x400000000;
      v702 = 0;
      v703 = -1;
      v704 = (const llvm::BasicBlock *)v437;
      v689 = &off_1E814E538;
      v676 = "unable to lower arguments: ";
      v677 = 27;
      sub_1C53B17B4((uint64_t)&v699, (const void **)&v676);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v654, "Prototype", 9uLL, (llvm::Type *)*v645);
      sub_1C47E3888((uint64_t)&v689, (uint64_t)v654);
      if (v657 < 0)
        operator delete(v656);
      if (v655 < 0)
        operator delete(v654[0]);
      sub_1C54FB238(**(uint64_t *****)(v3 + 864), *(uint64_t **)(*(_QWORD *)(v3 + 864) + 360), *(_QWORD *)(v3 + 888), *(llvm::OptimizationRemarkEmitter **)(v3 + 904), (llvm::DiagnosticInfoOptimizationBase *)&v689);
      v689 = &off_1E814E790;
      v439 = v699;
      if ((_DWORD)v700)
      {
        v440 = (unint64_t)v700 << 6;
        do
        {
          v441 = (void **)&v439[v440];
          if ((char)v439[v440 - 17] < 0)
            operator delete(*(v441 - 5));
          if (*((char *)v441 - 41) < 0)
            operator delete(*(v441 - 8));
          v440 -= 64;
        }
        while (v440);
        v439 = v699;
      }
      if (v439 != v701)
      {
        v442 = v439;
        goto LABEL_765;
      }
LABEL_766:
      v419 = v686;
      if (v686 != v688)
        goto LABEL_767;
      goto LABEL_768;
    }
LABEL_551:
    v435 = 0;
    LODWORD(v434) = 0;
    goto LABEL_552;
  }
  if ((*((_BYTE *)v70 + 23) & 0x20) == 0)
  {
LABEL_516:
    LODWORD(v126) = 0;
LABEL_517:
    v127 = 0;
    goto LABEL_518;
  }
  v112 = ***v70;
  v689 = v70;
  v113 = *(_DWORD *)(v112 + 2496);
  if (v113)
  {
    v114 = *(_QWORD *)(v112 + 2480);
    v115 = v113 - 1;
    v116 = v115 & ((v70 >> 4) ^ (v70 >> 9));
    v117 = (uint64_t ****)(v114 + 40 * v116);
    v118 = *v117;
    if (*v117 == v70)
      goto LABEL_154;
    v119 = 0;
    v120 = 1;
    while (v118 != (uint64_t ***)-4096)
    {
      if (v119)
        v121 = 0;
      else
        v121 = v118 == (uint64_t ***)-8192;
      if (v121)
        v119 = v117;
      v122 = v116 + v120++;
      v116 = v122 & v115;
      v117 = (uint64_t ****)(v114 + 40 * v116);
      v118 = *v117;
      if (*v117 == v70)
        goto LABEL_154;
    }
    if (v119)
      v463 = v119;
    else
      v463 = v117;
  }
  else
  {
    v463 = 0;
  }
  v117 = (uint64_t ****)sub_1C541AB24(v112 + 2480, (uint64_t)&v689, (uint64_t *)&v689, v463);
  v464 = (uint64_t ***)v689;
  v117[3] = 0;
  v117[4] = 0;
  *v117 = v464;
  v117[1] = (uint64_t ***)(v117 + 3);
  v117[2] = (uint64_t ***)0x100000000;
LABEL_154:
  v123 = *((unsigned int *)v117 + 4);
  if (!(_DWORD)v123)
    goto LABEL_516;
  v124 = v117[1] + 1;
  v125 = 16 * v123;
  LODWORD(v126) = 0;
  while (*((_DWORD *)v124 - 2))
  {
    v127 = 0;
    v124 += 2;
    v125 -= 16;
    if (!v125)
      goto LABEL_518;
  }
  v126 = *v124;
  if (!*v124)
    goto LABEL_517;
  v127 = *v124;
  if (*(_BYTE *)v126 != 15)
    v127 = *(_QWORD *)(v126 - 8 * *(unsigned int *)(v126 + 8));
  LODWORD(v126) = *(_DWORD *)(v126 + 28);
LABEL_518:
  v413 = v70[10];
  if (v413)
    v414 = (uint64_t *)(v413 - 3);
  else
    v414 = 0;
  v415 = v414[7];
  LODWORD(v690) = 10;
  BYTE4(v690) = 2;
  v691 = v415;
  v692 = v127;
  v693 = v126;
  v694 = "gisel-irtranslator";
  v695 = "GISelFailure";
  v696 = 12;
  LOBYTE(v697) = 0;
  v698 = 0;
  v699 = v701;
  v700 = 0x400000000;
  v702 = 0;
  v703 = -1;
  v704 = (const llvm::BasicBlock *)v414;
  v689 = &off_1E814E538;
  v686 = "unable to lower function: ";
  v687 = 26;
  sub_1C53B17B4((uint64_t)&v699, (const void **)&v686);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v658, "Prototype", 9uLL, (llvm::Type *)*v70);
  sub_1C47E3888((uint64_t)&v689, (uint64_t)v658);
  if (v661 < 0)
    operator delete(__p);
  if (v659 < 0)
    operator delete(v658[0]);
  sub_1C54FB238(**(uint64_t *****)(v3 + 864), *(uint64_t **)(*(_QWORD *)(v3 + 864) + 360), *(_QWORD *)(v3 + 888), *(llvm::OptimizationRemarkEmitter **)(v3 + 904), (llvm::DiagnosticInfoOptimizationBase *)&v689);
  v689 = &off_1E814E790;
  v416 = v699;
  if ((_DWORD)v700)
  {
    v417 = (unint64_t)v700 << 6;
    do
    {
      v418 = (void **)&v416[v417];
      if ((char)v416[v417 - 17] < 0)
        operator delete(*(v418 - 5));
      if (*((char *)v418 - 41) < 0)
        operator delete(*(v418 - 8));
      v417 -= 64;
    }
    while (v417);
    v416 = v699;
  }
  if (v416 != v701)
  {
    v419 = v416;
LABEL_767:
    free(v419);
  }
LABEL_768:
  if (v663)
    llvm::MetadataTracking::untrack((uint64_t)&v663, v663);
  v555 = *(unsigned int *)(v3 + 552);
  if ((_DWORD)v555)
  {
    v556 = *(_QWORD *)(v3 + 544);
    v557 = 32 * v555;
    do
    {
      v558 = *(void **)(v556 + v557 - 24);
      if ((void *)(v556 + v557 - 8) != v558)
        free(v558);
      v557 -= 32;
    }
    while (v557);
  }
  *(_DWORD *)(v3 + 552) = 0;
  v559 = v3 + 256;
  v560 = v3 + 448;
  v561 = *(_DWORD *)(v3 + 456);
  if (v561)
  {
    v562 = *(_DWORD *)(v3 + 464);
    if (v562 > 4 * v561 && v562 >= 0x41)
    {
      v563 = 1 << (33 - __clz(v561 - 1));
      if (v563 <= 64)
        v564 = 64;
      else
        v564 = v563;
LABEL_781:
      if (v564 == v562)
      {
        *(_QWORD *)(v3 + 456) = 0;
        v565 = 16 * v562;
        v566 = *(_QWORD **)(v3 + 448);
        do
        {
          *v566 = -4096;
          v566 += 2;
          v565 -= 16;
        }
        while (v565);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v560, 8);
        if (v564)
        {
          v567 = (4 * v564 / 3u + 1) | ((unint64_t)(4 * v564 / 3u + 1) >> 1);
          v568 = v567 | (v567 >> 2) | ((v567 | (v567 >> 2)) >> 4);
          LODWORD(v568) = (((v568 | (v568 >> 8)) >> 16) | v568 | (v568 >> 8)) + 1;
          *(_DWORD *)(v3 + 464) = v568;
          v569 = operator new(16 * v568, (std::align_val_t)8uLL);
          *(_QWORD *)(v3 + 448) = v569;
          *(_QWORD *)(v3 + 456) = 0;
          v570 = *(unsigned int *)(v3 + 464);
          if ((_DWORD)v570)
          {
            v571 = 16 * v570;
            do
            {
              *v569 = -4096;
              v569 += 2;
              v571 -= 16;
            }
            while (v571);
          }
        }
        else
        {
          *(_QWORD *)v560 = 0;
          *(_QWORD *)(v560 + 8) = 0;
          *(_DWORD *)(v560 + 16) = 0;
        }
      }
      goto LABEL_797;
    }
  }
  else
  {
    if (!*(_DWORD *)(v3 + 460))
      goto LABEL_797;
    v562 = *(_DWORD *)(v3 + 464);
    if (v562 > 0x40)
    {
      v564 = 0;
      v3 = v632;
      goto LABEL_781;
    }
    v3 = v632;
  }
  if (v562)
  {
    v572 = *(_QWORD **)v560;
    v573 = 16 * v562;
    do
    {
      *v572 = -4096;
      v572 += 2;
      v573 -= 16;
    }
    while (v573);
  }
  *(_QWORD *)(v3 + 456) = 0;
LABEL_797:
  v574 = v3 + 472;
  v575 = *(_DWORD *)(v3 + 480);
  if (v575)
  {
    v576 = *(_DWORD *)(v3 + 488);
    if (v576 > 4 * v575 && v576 >= 0x41)
    {
      v577 = 1 << (33 - __clz(v575 - 1));
      if (v577 <= 64)
        v578 = 64;
      else
        v578 = v577;
LABEL_803:
      if (v578 == v576)
      {
        *(_QWORD *)(v3 + 480) = 0;
        v579 = 16 * v576;
        v580 = *(_QWORD **)(v3 + 472);
        do
        {
          *v580 = -4096;
          v580 += 2;
          v579 -= 16;
        }
        while (v579);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v574, 8);
        if (v578)
        {
          v581 = (4 * v578 / 3u + 1) | ((unint64_t)(4 * v578 / 3u + 1) >> 1);
          v582 = v581 | (v581 >> 2) | ((v581 | (v581 >> 2)) >> 4);
          LODWORD(v582) = (((v582 | (v582 >> 8)) >> 16) | v582 | (v582 >> 8)) + 1;
          *(_DWORD *)(v3 + 488) = v582;
          v583 = operator new(16 * v582, (std::align_val_t)8uLL);
          *(_QWORD *)(v3 + 472) = v583;
          *(_QWORD *)(v3 + 480) = 0;
          v584 = *(unsigned int *)(v3 + 488);
          if ((_DWORD)v584)
          {
            v585 = 16 * v584;
            do
            {
              *v583 = -4096;
              v583 += 2;
              v585 -= 16;
            }
            while (v585);
          }
        }
        else
        {
          *(_QWORD *)v574 = 0;
          *(_QWORD *)(v574 + 8) = 0;
          *(_DWORD *)(v574 + 16) = 0;
        }
      }
      goto LABEL_842;
    }
  }
  else
  {
    if (!*(_DWORD *)(v3 + 484))
      goto LABEL_842;
    v576 = *(_DWORD *)(v3 + 488);
    if (v576 > 0x40)
    {
      v578 = 0;
      v3 = v632;
      goto LABEL_803;
    }
    v3 = v632;
  }
  if (v576)
  {
    v592 = *(_QWORD **)v574;
    v593 = 16 * v576;
    do
    {
      *v592 = -4096;
      v592 += 2;
      v593 -= 16;
    }
    while (v593);
  }
  *(_QWORD *)(v3 + 480) = 0;
LABEL_842:
  sub_1C55091E0(v559);
  sub_1C55091E0(v3 + 352);
  sub_1C5505510((_DWORD *)(v3 + 688));
  v594 = *(_DWORD *)(v3 + 528);
  if (v594 || *(_DWORD *)(v3 + 532))
  {
    v598 = (_QWORD *)(v3 + 520);
    v599 = *(unsigned int *)(v3 + 536);
    if (v599 <= 4 * v594 || v599 < 0x41)
    {
      if ((_DWORD)v599)
      {
        v610 = 40 * v599;
        v611 = *v598 + 32;
        do
        {
          v613 = *(_QWORD *)(v611 - 32);
          v612 = *(_QWORD *)(v611 - 24);
          if (v613 != -4096 || v612 != -4096)
          {
            if (v613 != -8192 || v612 != -8192)
            {
              v614 = *(void **)(v611 - 16);
              if ((void *)v611 != v614)
                free(v614);
            }
            *(_QWORD *)(v611 - 32) = -4096;
            *(_QWORD *)(v611 - 24) = -4096;
          }
          v611 += 40;
          v610 -= 40;
        }
        while (v610);
      }
      *(_QWORD *)(v3 + 528) = 0;
    }
    else
    {
      sub_1C5509478(v3 + 520);
      if (v594)
      {
        v600 = 1 << (33 - __clz(v594 - 1));
        if (v600 <= 64)
          v594 = 64;
        else
          v594 = v600;
      }
      if (v594 == *(_DWORD *)(v3 + 536))
      {
        *(_QWORD *)(v3 + 528) = 0;
        if (v594)
        {
          v601 = *(int64x2_t **)(v3 + 520);
          v602 = 40 * v594;
          v603 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
          do
          {
            *v601 = v603;
            v601 = (int64x2_t *)((char *)v601 + 40);
            v602 -= 40;
          }
          while (v602);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v598, 8);
        if (v594)
        {
          v604 = (4 * v594 / 3 + 1) | ((unint64_t)(4 * v594 / 3 + 1) >> 1);
          v605 = v604 | (v604 >> 2) | ((v604 | (v604 >> 2)) >> 4);
          LODWORD(v605) = (((v605 | (v605 >> 8)) >> 16) | v605 | (v605 >> 8)) + 1;
          *(_DWORD *)(v3 + 536) = v605;
          v606 = operator new(40 * v605, (std::align_val_t)8uLL);
          *(_QWORD *)(v3 + 520) = v606;
          *(_QWORD *)(v3 + 528) = 0;
          v607 = *(unsigned int *)(v3 + 536);
          if ((_DWORD)v607)
          {
            v608 = 40 * v607;
            v609 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
            do
            {
              *v606 = v609;
              v606 = (_OWORD *)((char *)v606 + 40);
              v608 -= 40;
            }
            while (v608);
          }
        }
        else
        {
          *v598 = 0;
          *(_QWORD *)(v3 + 528) = 0;
          *(_DWORD *)(v3 + 536) = 0;
        }
      }
    }
  }
  v595 = *(_QWORD *)(v3 + 856);
  *(_QWORD *)(v3 + 856) = 0;
  if (v595)
    (*(void (**)(uint64_t))(*(_QWORD *)v595 + 8))(v595);
  v596 = *(_QWORD *)(v3 + 848);
  *(_QWORD *)(v3 + 848) = 0;
  if (v596)
    (*(void (**)(uint64_t))(*(_QWORD *)v596 + 8))(v596);
  sub_1C5CC8114(v3 + 912);
  *(_QWORD *)(v3 + 1784) = 0;
  return 0;
}

const char *sub_1C5509008()
{
  return "IRTranslator";
}

double sub_1C5509018(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 68) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 0x800000000;
  *(_QWORD *)(a1 + 304) = a1 + 320;
  *(_QWORD *)(a1 + 312) = 0x600000000;
  *(_DWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_QWORD *)(a1 + 432) = 0x3200000000;
  *(_QWORD *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 680) = a1 + 712;
  *(_QWORD *)(a1 + 688) = a1 + 712;
  *(_QWORD *)(a1 + 696) = 4;
  *(_DWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_QWORD *)(a1 + 784) = a1 + 800;
  *(_QWORD *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 800) = 0x80000000;
  *(_DWORD *)(a1 + 816) = 1;
  *(_QWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 832) = 1;
  *(_QWORD *)(a1 + 824) = 0;
  return result;
}

uint64_t sub_1C550910C(uint64_t result, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v18;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(result + 40 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != a3 || v12 != a4)
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16 && v11 == -8192)
          v14 = v10;
        v18 = v9 + v15++;
        v9 = v18 & v8;
        v10 = (_QWORD *)(result + 40 * (v18 & v8));
        v11 = *v10;
        v12 = v10[1];
        if (*v10 == a3 && v12 == a4)
          goto LABEL_25;
      }
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_25:
  *a5 = v10;
  return result;
}

uint64_t sub_1C55091E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v9 + 24 <= v8)
      {
        v10 = (_QWORD *)(v9 + 16);
        do
        {
          v11 = (_QWORD *)*(v10 - 2);
          if (v10 != v11)
            free(v11);
          v12 = (unint64_t)(v10 + 4);
          v10 += 3;
        }
        while (v12 <= v8);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v13 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD **)(a1 + 64);
    v15 = &v14[2 * v13];
    do
    {
      v16 = (*v14 + 7) & 0xFFFFFFFFFFFFFFF8;
      v17 = *v14 + v14[1];
      if (v16 + 24 <= v17)
      {
        v18 = (_QWORD *)(v16 + 16);
        do
        {
          v19 = (_QWORD *)*(v18 - 2);
          if (v18 != v19)
            free(v19);
          v20 = (unint64_t)(v18 + 4);
          v18 += 3;
        }
        while (v20 <= v17);
      }
      v14 += 2;
    }
    while (v14 != v15);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C550930C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (*(_QWORD *)(*(_QWORD *)a1 + 128))
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2, a3) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, a2, a3);
  }
}

void sub_1C550939C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E816DDA0;
  v2 = *(_QWORD *)(a1 + 1792);
  *(_QWORD *)(a1 + 1792) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_1C48C0B5C(a1 + 912);
  v3 = *(_QWORD *)(a1 + 904);
  *(_QWORD *)(a1 + 904) = 0;
  if (v3)
    sub_1C4EF268C(a1 + 904, v3);
  v4 = *(_QWORD *)(a1 + 856);
  *(_QWORD *)(a1 + 856) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 848) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_1C6270994((_QWORD *)(a1 + 712));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 688), 8);
  sub_1C62709F0((char **)(a1 + 544));
  sub_1C5509478(a1 + 520);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 520), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 496), 8);
  sub_1C5509500(a1 + 256);
  sub_1C4926674((llvm::Pass *)a1);
}

void sub_1C5509478(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)a1 + 40 * v1;
    v3 = *(_QWORD *)a1 + 32;
    do
    {
      v5 = *(_QWORD *)(v3 - 32);
      v4 = *(_QWORD *)(v3 - 24);
      v6 = v3 - 32;
      if ((v5 != -4096 || v4 != -4096) && (v5 != -8192 || v4 != -8192))
      {
        v7 = *(void **)(v3 - 16);
        if ((void *)v3 != v7)
          free(v7);
      }
      v3 += 40;
    }
    while (v6 + 40 != v2);
  }
}

uint64_t sub_1C5509500(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 216), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 192), 8);
  sub_1C55091E0(a1 + 96);
  sub_1C4926AE8(a1 + 96);
  sub_1C55091E0(a1);
  return sub_1C4926AE8(a1);
}

_QWORD *sub_1C5509554(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5509604((uint64_t)a1, v7);
  v9 = 0;
  sub_1C47A82D8((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C5509604(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C55096BC(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C55096BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C47A82D8(v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_1C5509768(_DWORD *a1, _QWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v13;

  v3 = a1[4];
  if (!v3)
  {
    v13 = 0;
LABEL_15:
    v6 = sub_1C47AD254(a1, (uint64_t)a2, a2, v13);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v13 = v8;
    else
      v13 = v6;
    goto LABEL_15;
  }
  return v6;
}

_OWORD *sub_1C5509820(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  BOOL v28;
  unsigned int v30;
  void *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t v39;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *result = v12;
        result = (_OWORD *)((char *)result + 40);
        v11 -= 40;
      }
      while (v11);
    }
    if (!v3)
LABEL_57:
      JUMPOUT(0x1CAA32FB4);
    v13 = &v4[5 * v3];
    v14 = v4;
    while (1)
    {
      v15 = *v14;
      v16 = v14[1];
      if (*v14 == -4096 && v16 == -4096 || v15 == -8192 && v16 == -8192)
        goto LABEL_47;
      v17 = ((v16 >> 4) ^ (v16 >> 9) | ((unint64_t)((v15 >> 4) ^ (v15 >> 9)) << 32))
          + ~((unint64_t)((v16 >> 4) ^ (v16 >> 9)) << 32);
      v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
      v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
      v20 = *((_DWORD *)a1 + 4) - 1;
      v21 = v20 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
      v22 = *a1 + 40 * v21;
      v23 = *(_QWORD *)v22;
      v24 = *(_QWORD *)(v22 + 8);
      if (v15 != *(_QWORD *)v22 || v16 != v24)
      {
        v26 = 0;
        v27 = 1;
        while (v23 != -4096 || v24 != -4096)
        {
          if (v26)
            v28 = 0;
          else
            v28 = v24 == -8192;
          if (v28 && v23 == -8192)
            v26 = v22;
          v30 = v21 + v27++;
          v21 = v30 & v20;
          v22 = *a1 + 40 * v21;
          v23 = *(_QWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v15 == *(_QWORD *)v22 && v16 == v24)
            goto LABEL_37;
        }
        if (v26)
          v22 = v26;
      }
LABEL_37:
      *(_QWORD *)v22 = v15;
      *(_QWORD *)(v22 + 8) = v14[1];
      v32 = (void *)(v22 + 32);
      *(_QWORD *)(v22 + 16) = v22 + 32;
      *(_QWORD *)(v22 + 24) = 0x100000000;
      v33 = (uint64_t *)v14[2];
      if ((uint64_t *)v22 != v14)
      {
        v34 = *((unsigned int *)v14 + 6);
        if ((_DWORD)v34)
          break;
      }
LABEL_45:
      ++*((_DWORD *)a1 + 2);
      if (v33 != v14 + 4)
        free(v33);
LABEL_47:
      v14 += 5;
      if (v14 == v13)
        goto LABEL_57;
    }
    if (v33 != v14 + 4)
    {
      *(_QWORD *)(v22 + 16) = v33;
      v36 = *((_DWORD *)v14 + 7);
      *(_DWORD *)(v22 + 24) = v34;
      *(_DWORD *)(v22 + 28) = v36;
      v14[2] = (uint64_t)(v14 + 4);
      *((_DWORD *)v14 + 7) = 0;
      v33 = v14 + 4;
      goto LABEL_44;
    }
    if (v34 >= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v22 + 16, v22 + 32, v34, 8);
      v35 = *((unsigned int *)v14 + 6);
      if (!(_DWORD)v35)
        goto LABEL_43;
      v33 = (uint64_t *)v14[2];
      v32 = *(void **)(v22 + 16);
    }
    else
    {
      v35 = *((unsigned int *)v14 + 6);
    }
    memcpy(v32, v33, 8 * v35);
LABEL_43:
    *(_DWORD *)(v22 + 24) = v34;
    v33 = (uint64_t *)v14[2];
LABEL_44:
    *((_DWORD *)v14 + 6) = 0;
    goto LABEL_45;
  }
  a1[1] = 0;
  v37 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v37)
  {
    v38 = 40 * v37;
    v39 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v39;
      result = (_OWORD *)((char *)result + 40);
      v38 -= 40;
    }
    while (v38);
  }
  return result;
}

uint64_t sub_1C5509B18(__int128 **a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  __int128 *v16;

  v2 = 0x2E8BA2E8BA2E8BA3 * (((char *)a1[1] - (char *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    abort();
  if (0x5D1745D1745D1746 * (((char *)a1[2] - (char *)*a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * (((char *)a1[2] - (char *)*a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)a1[2] - (char *)*a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      sub_1C4764EE4();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (__int128 *)&v7[88 * v6];
  v9 = sub_1C6270B40((uint64_t)&v7[88 * v2], a2);
  v10 = v9 + 88;
  v12 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = (__int128 *)v9;
    a1[1] = (__int128 *)v10;
    a1[2] = v8;
  }
  else
  {
    do
    {
      v11 = (__int128 *)((char *)v11 - 88);
      v9 = sub_1C6270BB8(v9 - 88, v11);
    }
    while (v11 != v12);
    v11 = *a1;
    v13 = a1[1];
    *a1 = (__int128 *)v9;
    a1[1] = (__int128 *)v10;
    a1[2] = v8;
    if (v13 != v11)
    {
      v14 = (unsigned __int8 **)(v13 - 1);
      do
      {
        if (*v14)
          llvm::MetadataTracking::untrack((uint64_t)v14, *v14);
        v15 = *(v14 - 2);
        if (v15)
          llvm::MetadataTracking::untrack((uint64_t)(v14 - 2), v15);
        v16 = (__int128 *)(v14 - 9);
        v14 -= 11;
      }
      while (v16 != v11);
    }
  }
  if (v11)
    operator delete(v11);
  return v10;
}

uint64_t sub_1C5509C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 **v17;
  uint64_t v18;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    v9 = a2 + v7;
    v10 = *(_OWORD *)(a2 + v7);
    v11 = *(_OWORD *)(a2 + v7 + 16);
    v12 = *(_OWORD *)(a2 + v7 + 32);
    *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + v7 + 48);
    *(_OWORD *)(v8 + 16) = v11;
    *(_OWORD *)(v8 + 32) = v12;
    *(_OWORD *)v8 = v10;
    if (a2 != a4)
    {
      v13 = *(unsigned __int8 **)(v8 + 56);
      if (v13)
        llvm::MetadataTracking::untrack(v8 + 56, v13);
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
      v14 = *(unsigned __int8 **)(v9 + 56);
      if (v14)
      {
        llvm::MetadataTracking::retrack(v9 + 56, v14, v8 + 56);
        *(_QWORD *)(v9 + 56) = 0;
      }
      v15 = a2 + v7;
      v16 = *(unsigned __int8 **)(a4 + v7 + 72);
      *(_DWORD *)(a4 + v7 + 64) = *(_DWORD *)(a2 + v7 + 64);
      if (v16)
        llvm::MetadataTracking::untrack(a4 + v7 + 72, v16);
      v18 = *(_QWORD *)(v15 + 72);
      v17 = (unsigned __int8 **)(v15 + 72);
      *(_QWORD *)(a4 + v7 + 72) = v18;
      if (*v17)
      {
        llvm::MetadataTracking::retrack((uint64_t)v17, *v17, a4 + v7 + 72);
        *v17 = 0;
      }
    }
    *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
    v7 += 88;
  }
  while (v9 + 88 != v6);
  return v6;
}

char *sub_1C5509DAC(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_1C4764EE4();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v4];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_QWORD *)v10 + 4) = *(_QWORD *)(a2 + 32);
  v12 = v10 + 40;
  if (v2 != v3)
  {
    do
    {
      v13 = *(_OWORD *)(v2 - 40);
      v14 = *(_OWORD *)(v2 - 24);
      *((_DWORD *)v10 - 2) = *((_DWORD *)v2 - 2);
      *(_OWORD *)(v10 - 24) = v14;
      *(_OWORD *)(v10 - 40) = v13;
      v10 -= 40;
      v2 -= 40;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[40 * v8];
  if (v2)
    operator delete(v2);
  return v12;
}

unint64_t sub_1C5509ECC(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  int v95;
  __int128 v96;
  __int128 v97;
  unint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  BOOL v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unsigned int v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  __int128 v204;
  __int128 v205;
  unint64_t v206;
  unsigned int v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  __int128 v242;
  __int128 v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  unsigned int v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  unint64_t v269;
  unsigned int v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 *v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  unsigned int v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  int64_t v295;
  int64_t v296;
  int64_t v297;
  uint64_t v298;
  unint64_t v299;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  BOOL v306;
  unint64_t v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int v329;
  _BOOL4 v330;
  unsigned int v331;
  uint64_t v332;
  uint64_t v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unsigned int v386;
  unsigned int v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int v395;
  __int128 v396;
  __int128 v397;
  uint64_t v398;
  uint64_t v399;
  unsigned int v400;
  unsigned int v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  __int128 v409;
  __int128 v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unsigned int v414;
  unsigned int v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unsigned int v422;
  int v423;
  __int128 v424;
  unint64_t v425;
  unint64_t v426;
  unsigned int v427;
  uint64_t v428;
  uint64_t v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  unsigned int v435;
  uint64_t v436;
  _QWORD *v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unsigned int v445;
  unsigned int v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  unint64_t v452;
  __int128 v453;
  __int128 v454;
  uint64_t v455;
  unsigned int v456;
  unsigned int v457;
  uint64_t v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  __int128 v465;
  unsigned int v466;
  uint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  unsigned int v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  __int128 *v478;
  uint64_t v479;
  uint64_t v480;
  unsigned int v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unsigned int v491;
  unsigned int v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;

  v7 = result;
LABEL_2:
  v8 = (__int128 *)(a2 - 40);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v250 = *(_DWORD *)(v9 + 32);
        v251 = *(_DWORD *)(a2 - 8);
        if (v251 == v250)
        {
          v252 = *(_QWORD *)(a2 - 32);
          v253 = *(_QWORD *)(v9 + 8);
          v254 = (_QWORD *)(v253 + 24);
          v255 = *(unsigned int *)(v252 + 32);
          if (v255 > 0x40)
          {
            v489 = *(_QWORD *)(v252 + 24);
            v490 = *(_QWORD *)(v489 + 8 * ((v255 - 1) >> 6)) & (1 << (v255 - 1));
            v491 = *(_DWORD *)(v253 + 32);
            v492 = v491 - 1;
            v493 = *(_QWORD *)(v253 + 24);
            if (v491 >= 0x41)
              v254 = (_QWORD *)(v493 + 8 * (v492 >> 6));
            if ((v490 != 0) == ((*v254 >> v492) & 1))
            {
              v494 = v255 + 63;
              v495 = v493 - 8;
              v496 = (v494 >> 3) & 0x3FFFFFF8;
              v497 = v489 - 8;
              do
              {
                if (!v496)
                  return result;
                v498 = *(_QWORD *)(v497 + v496);
                v499 = *(_QWORD *)(v495 + v496);
                v496 -= 8;
              }
              while (v498 == v499);
              if (v498 > v499)
                return result;
            }
            else if (!v490)
            {
              return result;
            }
          }
          else if ((uint64_t)(*(_QWORD *)(v252 + 24) << -(char)v255) >> -(char)v255 >= (uint64_t)(*v254 << -(char)v255) >> -(char)v255)
          {
            return result;
          }
        }
        else if (v251 <= v250)
        {
          return result;
        }
        v518 = *(_QWORD *)(v9 + 32);
        v508 = *(_OWORD *)v9;
        v514 = *(_OWORD *)(v9 + 16);
        v453 = *v8;
        v454 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v9 + 32) = *(_DWORD *)(a2 - 8);
        *(_OWORD *)v9 = v453;
        *(_OWORD *)(v9 + 16) = v454;
        *(_DWORD *)(a2 - 8) = v518;
        *v8 = v508;
        *(_OWORD *)(a2 - 24) = v514;
        return result;
      case 3:
        return (unint64_t)sub_1C550BFAC((__int128 *)v9, (__int128 *)(v9 + 40), (__int128 *)(a2 - 40));
      case 4:
        return (unint64_t)sub_1C550C8D4(v9, v9 + 40, v9 + 80, a2 - 40);
      case 5:
        return (unint64_t)sub_1C550BB64(v9, v9 + 40, v9 + 80, v9 + 120, a2 - 40);
      default:
        if (v10 <= 959)
        {
          v256 = v9 + 40;
          v258 = v9 == a2 || v256 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v258)
            {
              v259 = v9;
              while (1)
              {
                v260 = v259;
                v259 = v256;
                v261 = *(_DWORD *)(v260 + 32);
                v262 = *(_DWORD *)(v260 + 72);
                if (v262 != v261)
                  break;
                v263 = *(_QWORD *)(v260 + 48);
                v264 = *(_QWORD *)(v260 + 8);
                v265 = (_QWORD *)(v264 + 24);
                v266 = *(unsigned int *)(v263 + 32);
                if (v266 <= 0x40)
                {
                  if ((uint64_t)(*(_QWORD *)(v263 + 24) << -(char)v266) >> -(char)v266 >= (uint64_t)(*v265 << -(char)v266) >> -(char)v266)
                    goto LABEL_284;
                  goto LABEL_265;
                }
                v284 = *(_QWORD *)(v263 + 24);
                v285 = *(_QWORD *)(v284 + 8 * ((v266 - 1) >> 6)) & (1 << (v266 - 1));
                result = v285 != 0;
                v286 = *(_DWORD *)(v264 + 32);
                v287 = v286 - 1;
                v288 = *(_QWORD *)(v264 + 24);
                if (v286 >= 0x41)
                  v265 = (_QWORD *)(v288 + 8 * (v287 >> 6));
                if ((_DWORD)result != ((*v265 >> v287) & 1))
                {
                  if (!v285)
                    goto LABEL_284;
                  goto LABEL_265;
                }
                v289 = v266 + 63;
                v290 = v288 - 8;
                v291 = (v289 >> 3) & 0x3FFFFFF8;
                v292 = v284 - 8;
                do
                {
                  if (!v291)
                    goto LABEL_284;
                  v293 = *(_QWORD *)(v292 + v291);
                  v294 = *(_QWORD *)(v290 + v291);
                  v291 -= 8;
                }
                while (v293 == v294);
                if (v293 <= v294)
                  goto LABEL_265;
LABEL_284:
                v256 = v259 + 40;
                if (v259 + 40 == a2)
                  return result;
              }
              if (v262 <= v261)
                goto LABEL_284;
              v263 = *(_QWORD *)(v260 + 48);
LABEL_265:
              v267 = *(_QWORD *)(v260 + 40);
              v505 = *(_OWORD *)(v260 + 56);
              *(_DWORD *)(v259 + 32) = *(_DWORD *)(v260 + 32);
              v268 = *(_OWORD *)(v260 + 16);
              *(_OWORD *)v259 = *(_OWORD *)v260;
              *(_OWORD *)(v259 + 16) = v268;
              v269 = v9;
              if (v260 == v9)
                goto LABEL_283;
              while (1)
              {
                v270 = *(_DWORD *)(v260 - 8);
                if (v262 == v270)
                {
                  v271 = *(_QWORD *)(v260 - 32);
                  v272 = (_QWORD *)(v271 + 24);
                  v273 = *(unsigned int *)(v263 + 32);
                  if (v273 > 0x40)
                  {
                    v275 = *(_QWORD *)(v263 + 24);
                    result = *(_QWORD *)(v275 + 8 * ((v273 - 1) >> 6)) & (1 << (v273
                                                                                                - 1));
                    v276 = *(_DWORD *)(v271 + 32);
                    v277 = v276 - 1;
                    v278 = *(_QWORD *)(v271 + 24);
                    if (v276 >= 0x41)
                      v272 = (_QWORD *)(v278 + 8 * (v277 >> 6));
                    if ((result != 0) == ((*v272 >> v277) & 1))
                    {
                      v279 = v273 + 63;
                      v280 = v278 - 8;
                      v281 = (v279 >> 3) & 0x3FFFFFF8;
                      v282 = v275 - 8;
                      while (v281)
                      {
                        v283 = *(__int128 **)(v282 + v281);
                        result = *(_QWORD *)(v280 + v281);
                        v281 -= 8;
                        if (v283 != (__int128 *)result)
                        {
                          if ((unint64_t)v283 <= result)
                            goto LABEL_271;
                          break;
                        }
                      }
LABEL_282:
                      v269 = v260;
LABEL_283:
                      *(_QWORD *)v269 = v267;
                      *(_QWORD *)(v269 + 8) = v263;
                      *(_OWORD *)(v269 + 16) = v505;
                      *(_DWORD *)(v269 + 32) = v262;
                      goto LABEL_284;
                    }
                    if (!result)
                      goto LABEL_282;
                  }
                  else if ((uint64_t)(*(_QWORD *)(v263 + 24) << -(char)v273) >> -(char)v273 >= (uint64_t)(*v272 << -(char)v273) >> -(char)v273)
                  {
                    goto LABEL_282;
                  }
                }
                else if (v262 <= v270)
                {
                  goto LABEL_282;
                }
LABEL_271:
                v274 = *(_OWORD *)(v260 - 24);
                *(_OWORD *)v260 = *(_OWORD *)(v260 - 40);
                *(_OWORD *)(v260 + 16) = v274;
                *(_DWORD *)(v260 + 32) = *(_DWORD *)(v260 - 8);
                v260 -= 40;
                if (v260 == v9)
                {
                  v269 = v9;
                  goto LABEL_283;
                }
              }
            }
            return result;
          }
          if (v258)
            return result;
          while (1)
          {
            v455 = v7;
            v7 = v256;
            v456 = *(_DWORD *)(v455 + 32);
            v457 = *(_DWORD *)(v455 + 72);
            if (v457 == v456)
            {
              v458 = *(_QWORD *)(v455 + 48);
              v459 = *(_QWORD *)(v455 + 8);
              v460 = (_QWORD *)(v459 + 24);
              v461 = *(unsigned int *)(v458 + 32);
              if (v461 > 0x40)
              {
                v479 = *(_QWORD *)(v458 + 24);
                v480 = *(_QWORD *)(v479 + 8 * ((v461 - 1) >> 6)) & (1 << (v461 - 1));
                result = *(unsigned int *)(v459 + 32);
                v481 = result - 1;
                v482 = *(_QWORD *)(v459 + 24);
                if (result >= 0x41)
                  v460 = (_QWORD *)(v482 + 8 * (v481 >> 6));
                if ((v480 != 0) == ((*v460 >> v481) & 1))
                {
                  v483 = v461 + 63;
                  v484 = v482 - 8;
                  v485 = (v483 >> 3) & 0x3FFFFFF8;
                  v486 = v479 - 8;
                  while (v485)
                  {
                    v487 = *(_QWORD *)(v486 + v485);
                    v488 = *(_QWORD *)(v484 + v485);
                    v485 -= 8;
                    if (v487 != v488)
                    {
                      if (v487 <= v488)
                        goto LABEL_456;
                      goto LABEL_473;
                    }
                  }
                  goto LABEL_473;
                }
                if (v480)
                  goto LABEL_456;
              }
              else if ((uint64_t)(*(_QWORD *)(v458 + 24) << -(char)v461) >> -(char)v461 < (uint64_t)(*v460 << -(char)v461) >> -(char)v461)
              {
                goto LABEL_456;
              }
            }
            else if (v457 > v456)
            {
              v458 = *(_QWORD *)(v455 + 48);
LABEL_456:
              v462 = *(_QWORD *)v7;
              v509 = *(_OWORD *)(v455 + 56);
              v463 = v7;
              while (1)
              {
                while (1)
                {
LABEL_457:
                  while (1)
                  {
                    v464 = v463;
                    v463 = v455;
                    v465 = *(_OWORD *)(v455 + 16);
                    *(_OWORD *)v464 = *(_OWORD *)v455;
                    *(_OWORD *)(v464 + 16) = v465;
                    *(_DWORD *)(v464 + 32) = *(_DWORD *)(v455 + 32);
                    v455 -= 40;
                    v466 = *(_DWORD *)(v463 - 8);
                    if (v457 == v466)
                      break;
                    if (v457 <= v466)
                      goto LABEL_472;
                  }
                  v467 = *(_QWORD *)(v463 - 32);
                  v468 = (_QWORD *)(v467 + 24);
                  v469 = *(unsigned int *)(v458 + 32);
                  if (v469 > 0x40)
                    break;
                  if ((uint64_t)(*(_QWORD *)(v458 + 24) << -(char)v469) >> -(char)v469 >= (uint64_t)(*v468 << -(char)v469) >> -(char)v469)
                    goto LABEL_472;
                }
                v470 = *(_QWORD *)(v458 + 24);
                result = *(_QWORD *)(v470 + 8 * ((v469 - 1) >> 6)) & (1 << (v469 - 1));
                v471 = *(_DWORD *)(v467 + 32);
                v472 = v471 - 1;
                v473 = *(_QWORD *)(v467 + 24);
                if (v471 >= 0x41)
                  v468 = (_QWORD *)(v473 + 8 * (v472 >> 6));
                if ((result != 0) == ((*v468 >> v472) & 1))
                  break;
                if (!result)
                  goto LABEL_472;
              }
              v474 = v469 + 63;
              v475 = v473 - 8;
              v476 = (v474 >> 3) & 0x3FFFFFF8;
              v477 = v470 - 8;
              while (v476)
              {
                v478 = *(__int128 **)(v477 + v476);
                result = *(_QWORD *)(v475 + v476);
                v476 -= 8;
                if (v478 != (__int128 *)result)
                {
                  if ((unint64_t)v478 <= result)
                    goto LABEL_457;
                  break;
                }
              }
LABEL_472:
              *(_QWORD *)v463 = v462;
              *(_QWORD *)(v463 + 8) = v458;
              *(_OWORD *)(v463 + 16) = v509;
              *(_DWORD *)(v463 + 32) = v457;
            }
LABEL_473:
            v256 = v7 + 40;
            if (v7 + 40 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v9 == a2)
            return result;
          v295 = (unint64_t)(v11 - 2) >> 1;
          v296 = v295;
LABEL_298:
          v297 = v296;
          if (v295 < v296)
            goto LABEL_356;
          v298 = (2 * v296) | 1;
          v299 = v9 + 40 * v298;
          if (2 * v297 + 2 >= v11)
            goto LABEL_306;
          v300 = *(_DWORD *)(v299 + 72);
          v301 = *(_DWORD *)(v9 + 40 * v298 + 32);
          if (v301 == v300)
          {
            v302 = *(_QWORD *)(v9 + 40 * v298 + 8);
            v303 = *(_QWORD *)(v299 + 48);
            v304 = (_QWORD *)(v303 + 24);
            v305 = *(unsigned int *)(v302 + 32);
            if (v305 > 0x40)
            {
              v364 = *(_QWORD *)(v302 + 24);
              v365 = *(_QWORD *)(v364 + 8 * ((v305 - 1) >> 6)) & (1 << (v305 - 1));
              v366 = *(_DWORD *)(v303 + 32);
              v367 = v366 - 1;
              v368 = *(_QWORD *)(v303 + 24);
              if (v366 >= 0x41)
                v304 = (_QWORD *)(v368 + 8 * (v367 >> 6));
              if ((((v365 != 0) ^ (*v304 >> v367)) & 1) != 0)
              {
                v299 += 40 * (v365 != 0);
                if (!v365)
                  goto LABEL_306;
                goto LABEL_305;
              }
              v375 = v305 + 63;
              v376 = v368 - 8;
              v377 = (v375 >> 3) & 0x3FFFFFF8;
              v378 = v364 - 8;
              do
              {
                if (!v377)
                  goto LABEL_306;
                v379 = *(_QWORD *)(v378 + v377);
                v380 = *(_QWORD *)(v376 + v377);
                v377 -= 8;
              }
              while (v379 == v380);
              v306 = v379 <= v380;
            }
            else
            {
              v306 = (uint64_t)(*(_QWORD *)(v302 + 24) << -(char)v305) >> -(char)v305 < (uint64_t)(*v304 << -(char)v305) >> -(char)v305;
            }
          }
          else
          {
            v306 = v301 > v300;
          }
          v299 += 40 * v306;
          if (!v306)
          {
LABEL_306:
            v307 = v9 + 40 * v297;
            v308 = *(_DWORD *)(v307 + 32);
            v309 = *(_DWORD *)(v299 + 32);
            if (v309 == v308)
            {
              v310 = *(_QWORD *)(v299 + 8);
              v311 = *(_QWORD *)(v9 + 40 * v297 + 8);
              v312 = (_QWORD *)(v311 + 24);
              v313 = *(unsigned int *)(v310 + 32);
              if (v313 > 0x40)
              {
                v359 = *(_QWORD *)(v310 + 24);
                v360 = *(_QWORD *)(v359 + 8 * ((v313 - 1) >> 6)) & (1 << (v313 - 1));
                v361 = *(_DWORD *)(v311 + 32);
                v362 = v361 - 1;
                v363 = *(_QWORD *)(v311 + 24);
                if (v361 >= 0x41)
                  v312 = (_QWORD *)(v363 + 8 * (v362 >> 6));
                if ((v360 != 0) == ((*v312 >> v362) & 1))
                {
                  v369 = v313 + 63;
                  v370 = v363 - 8;
                  v371 = (v369 >> 3) & 0x3FFFFFF8;
                  v372 = v359 - 8;
                  do
                  {
                    if (!v371)
                      goto LABEL_312;
                    v373 = *(_QWORD *)(v372 + v371);
                    v374 = *(_QWORD *)(v370 + v371);
                    v371 -= 8;
                  }
                  while (v373 == v374);
                  if (v373 <= v374)
                    goto LABEL_356;
                }
                else if (v360)
                {
                  goto LABEL_356;
                }
              }
              else if ((uint64_t)(*(_QWORD *)(v310 + 24) << -(char)v313) >> -(char)v313 < (uint64_t)(*v312 << -(char)v313) >> -(char)v313)
              {
                goto LABEL_356;
              }
            }
            else
            {
              if (v309 > v308)
                goto LABEL_356;
              v311 = *(_QWORD *)(v307 + 8);
            }
LABEL_312:
            v314 = *(_QWORD *)v307;
            v506 = *(_OWORD *)(v307 + 16);
            v315 = *(_OWORD *)v299;
            v316 = *(_OWORD *)(v299 + 16);
            *(_DWORD *)(v307 + 32) = *(_DWORD *)(v299 + 32);
            *(_OWORD *)v307 = v315;
            *(_OWORD *)(v307 + 16) = v316;
            if (v295 < v298)
              goto LABEL_355;
            while (1)
            {
              v317 = v299;
              v318 = 2 * v298;
              v298 = (2 * v298) | 1;
              v299 = v9 + 40 * v298;
              v319 = v318 + 2;
              if (v319 < v11)
              {
                v320 = *(_DWORD *)(v299 + 72);
                v321 = *(_DWORD *)(v9 + 40 * v298 + 32);
                if (v321 == v320)
                {
                  v322 = *(_QWORD *)(v9 + 40 * v298 + 8);
                  v323 = *(_QWORD *)(v299 + 48);
                  v324 = (_QWORD *)(v323 + 24);
                  v325 = *(unsigned int *)(v322 + 32);
                  if (v325 > 0x40)
                  {
                    v342 = *(_QWORD *)(v322 + 24);
                    v343 = *(_QWORD *)(v342 + 8 * ((v325 - 1) >> 6)) & (1 << (v325 - 1));
                    v344 = *(_DWORD *)(v323 + 32);
                    v345 = v344 - 1;
                    v346 = *(_QWORD *)(v323 + 24);
                    if (v344 >= 0x41)
                      v324 = (_QWORD *)(v346 + 8 * (v345 >> 6));
                    if ((v343 != 0) == ((*v324 >> v345) & 1))
                    {
                      v353 = v325 + 63;
                      v354 = v346 - 8;
                      v355 = (v353 >> 3) & 0x3FFFFFF8;
                      v356 = v342 - 8;
                      do
                      {
                        if (!v355)
                        {
                          v329 = 0;
                          goto LABEL_319;
                        }
                        v357 = *(_QWORD *)(v356 + v355);
                        v358 = *(_QWORD *)(v354 + v355);
                        v355 -= 8;
                      }
                      while (v357 == v358);
                      if (v357 > v358)
                        v329 = 1;
                      else
                        v329 = -1;
                    }
                    else if (v343)
                    {
                      v329 = -1;
                    }
                    else
                    {
                      v329 = 1;
                    }
                  }
                  else
                  {
                    v326 = -v325;
                    v327 = (uint64_t)(*(_QWORD *)(v322 + 24) << v326) >> v326;
                    v328 = (uint64_t)(*v324 << v326) >> v326;
                    v77 = v327 < v328;
                    v329 = v327 > v328;
                    if (v77)
                      v329 = -1;
                  }
LABEL_319:
                  v330 = v329 >> 31;
                }
                else
                {
                  v330 = v321 > v320;
                }
                v299 += 40 * v330;
                if (v330)
                  v298 = v319;
              }
              v331 = *(_DWORD *)(v299 + 32);
              if (v331 == v308)
              {
                v332 = *(_QWORD *)(v299 + 8);
                v333 = *(unsigned int *)(v332 + 32);
                if (v333 > 0x40)
                {
                  v336 = *(_QWORD *)(v332 + 24);
                  v337 = *(_QWORD *)(v336 + 8 * ((v333 - 1) >> 6)) & (1 << (v333 - 1));
                  v338 = *(_DWORD *)(v311 + 32);
                  v339 = v338 - 1;
                  v340 = *(_QWORD *)(v311 + 24);
                  if (v338 >= 0x41)
                    v341 = (_QWORD *)(v340 + 8 * (v339 >> 6));
                  else
                    v341 = (_QWORD *)(v311 + 24);
                  if ((v337 != 0) == ((*v341 >> v339) & 1))
                  {
                    v347 = v333 + 63;
                    v348 = v340 - 8;
                    v349 = (v347 >> 3) & 0x3FFFFFF8;
                    v350 = v336 - 8;
                    do
                    {
                      if (!v349)
                        goto LABEL_328;
                      v351 = *(_QWORD *)(v350 + v349);
                      v352 = *(_QWORD *)(v348 + v349);
                      v349 -= 8;
                    }
                    while (v351 == v352);
                    if (v351 <= v352)
                    {
LABEL_354:
                      v299 = v317;
LABEL_355:
                      *(_QWORD *)v299 = v314;
                      *(_QWORD *)(v299 + 8) = v311;
                      *(_OWORD *)(v299 + 16) = v506;
                      *(_DWORD *)(v299 + 32) = v308;
LABEL_356:
                      v296 = v297 - 1;
                      if (!v297)
                      {
                        while (2)
                        {
                          v381 = 0;
                          v517 = *(_QWORD *)(v9 + 32);
                          v507 = *(_OWORD *)v9;
                          v513 = *(_OWORD *)(v9 + 16);
                          v382 = v9;
                          do
                          {
                            result = v381 + 1;
                            v383 = v382 + 40 * (v381 + 1);
                            v384 = (2 * v381) | 1;
                            v385 = 2 * v381 + 2;
                            if (v385 < v11)
                            {
                              v386 = *(_DWORD *)(v383 + 72);
                              v387 = *(_DWORD *)(v382 + 40 * result + 32);
                              if (v387 == v386)
                              {
                                v388 = *(_QWORD *)(v382 + 40 * result + 8);
                                v389 = *(_QWORD *)(v383 + 48);
                                v390 = (_QWORD *)(v389 + 24);
                                v391 = *(unsigned int *)(v388 + 32);
                                if (v391 > 0x40)
                                {
                                  v398 = *(_QWORD *)(v388 + 24);
                                  v399 = *(_QWORD *)(v398 + 8 * ((v391 - 1) >> 6)) & (1 << (v391 - 1));
                                  v400 = *(_DWORD *)(v389 + 32);
                                  v401 = v400 - 1;
                                  v402 = *(_QWORD *)(v389 + 24);
                                  if (v400 >= 0x41)
                                    v390 = (_QWORD *)(v402 + 8 * (v401 >> 6));
                                  if ((v399 != 0) == ((*v390 >> v401) & 1))
                                  {
                                    v403 = v391 + 63;
                                    v404 = v402 - 8;
                                    v405 = (v403 >> 3) & 0x3FFFFFF8;
                                    v406 = v398 - 8;
                                    do
                                    {
                                      if (!v405)
                                      {
                                        v395 = 0;
                                        goto LABEL_384;
                                      }
                                      v407 = *(_QWORD *)(v406 + v405);
                                      v408 = *(_QWORD *)(v404 + v405);
                                      v405 -= 8;
                                    }
                                    while (v407 == v408);
                                    if (v407 > v408)
                                      v395 = 1;
                                    else
                                      v395 = -1;
                                  }
                                  else if (v399)
                                  {
                                    v395 = -1;
                                  }
                                  else
                                  {
                                    v395 = 1;
                                  }
                                }
                                else
                                {
                                  v392 = -v391;
                                  v393 = (uint64_t)(*(_QWORD *)(v388 + 24) << v392) >> v392;
                                  v394 = (uint64_t)(*v390 << v392) >> v392;
                                  v77 = v393 < v394;
                                  v395 = v393 > v394;
                                  if (v77)
                                    v395 = -1;
                                }
LABEL_384:
                                result = v395 >> 31;
                              }
                              else
                              {
                                result = v387 > v386;
                              }
                              v383 += 40 * result;
                              if ((_DWORD)result)
                                v384 = v385;
                            }
                            v396 = *(_OWORD *)v383;
                            v397 = *(_OWORD *)(v383 + 16);
                            *(_DWORD *)(v382 + 32) = *(_DWORD *)(v383 + 32);
                            *(_OWORD *)v382 = v396;
                            *(_OWORD *)(v382 + 16) = v397;
                            v382 = v383;
                            v381 = v384;
                          }
                          while (v384 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
                          a2 -= 40;
                          if (v383 == a2)
                          {
                            *(_DWORD *)(v383 + 32) = v517;
                            *(_OWORD *)v383 = v507;
                            *(_OWORD *)(v383 + 16) = v513;
                            goto LABEL_415;
                          }
                          v409 = *(_OWORD *)a2;
                          v410 = *(_OWORD *)(a2 + 16);
                          *(_DWORD *)(v383 + 32) = *(_DWORD *)(a2 + 32);
                          *(_OWORD *)v383 = v409;
                          *(_OWORD *)(v383 + 16) = v410;
                          *(_DWORD *)(a2 + 32) = v517;
                          *(_OWORD *)a2 = v507;
                          *(_OWORD *)(a2 + 16) = v513;
                          v411 = v383 - v9 + 40;
                          if (v411 < 41)
                            goto LABEL_415;
                          v412 = v411 / 0x28uLL - 2;
                          v413 = v412 >> 1;
                          v414 = *(_DWORD *)(v383 + 32);
                          v415 = *(_DWORD *)(v9 + 40 * (v412 >> 1) + 32);
                          if (v415 != v414)
                          {
                            if (v415 <= v414)
                              goto LABEL_415;
                            v417 = *(_QWORD *)(v383 + 8);
                            goto LABEL_412;
                          }
                          v416 = *(_QWORD *)(v9 + 40 * v413 + 8);
                          v417 = *(_QWORD *)(v383 + 8);
                          v418 = (_QWORD *)(v417 + 24);
                          v419 = *(unsigned int *)(v416 + 32);
                          if (v419 > 0x40)
                          {
                            result = *(_QWORD *)(v416 + 24);
                            v444 = *(_QWORD *)(result + 8 * ((v419 - 1) >> 6)) & (1 << (v419 - 1));
                            v445 = *(_DWORD *)(v417 + 32);
                            v446 = v445 - 1;
                            v447 = *(_QWORD *)(v417 + 24);
                            if (v445 >= 0x41)
                              v418 = (_QWORD *)(v447 + 8 * (v446 >> 6));
                            if ((v444 != 0) != ((*v418 >> v446) & 1))
                            {
                              if (!v444)
                                goto LABEL_415;
                              goto LABEL_412;
                            }
                            v448 = v419 + 63;
                            v449 = v447 - 8;
                            v450 = (v448 >> 3) & 0x3FFFFFF8;
                            result -= 8;
                            while (v450)
                            {
                              v451 = *(_QWORD *)(result + v450);
                              v452 = *(_QWORD *)(v449 + v450);
                              v450 -= 8;
                              if (v451 != v452)
                              {
                                if (v451 <= v452)
                                  goto LABEL_412;
                                break;
                              }
                            }
                          }
                          else
                          {
                            v420 = -v419;
                            result = (uint64_t)(*(_QWORD *)(v416 + 24) << v420) >> v420;
                            if ((uint64_t)result >= (uint64_t)(*v418 << v420) >> v420)
                              goto LABEL_415;
LABEL_412:
                            v421 = *(_QWORD *)v383;
                            v502 = *(_OWORD *)(v383 + 16);
                            v422 = *(_DWORD *)(v383 + 32);
                            result = v9 + 40 * v413;
                            v423 = *(_DWORD *)(result + 32);
                            v424 = *(_OWORD *)(result + 16);
                            *(_OWORD *)v383 = *(_OWORD *)result;
                            *(_OWORD *)(v383 + 16) = v424;
                            *(_DWORD *)(v383 + 32) = v423;
                            if (v412 >= 2)
                            {
                              while (1)
                              {
                                v426 = v413 - 1;
                                v413 = (v413 - 1) >> 1;
                                v427 = *(_DWORD *)(v9 + 40 * v413 + 32);
                                if (v427 == v422)
                                {
                                  v428 = *(_QWORD *)(v9 + 40 * v413 + 8);
                                  v429 = *(unsigned int *)(v428 + 32);
                                  if (v429 > 0x40)
                                  {
                                    v432 = *(_QWORD *)(v428 + 24);
                                    v433 = *(_QWORD *)(v432 + 8 * ((v429 - 1) >> 6)) & (1 << (v429 - 1));
                                    v434 = *(_DWORD *)(v417 + 32);
                                    v435 = v434 - 1;
                                    v436 = *(_QWORD *)(v417 + 24);
                                    if (v434 >= 0x41)
                                      v437 = (_QWORD *)(v436 + 8 * (v435 >> 6));
                                    else
                                      v437 = (_QWORD *)(v417 + 24);
                                    if ((v433 != 0) == ((*v437 >> v435) & 1))
                                    {
                                      v438 = v429 + 63;
                                      v439 = v436 - 8;
                                      v440 = (v438 >> 3) & 0x3FFFFFF8;
                                      v441 = v432 - 8;
                                      while (v440)
                                      {
                                        v442 = *(_QWORD *)(v441 + v440);
                                        v443 = *(_QWORD *)(v439 + v440);
                                        v440 -= 8;
                                        if (v442 != v443)
                                        {
                                          if (v442 <= v443)
                                            goto LABEL_423;
                                          goto LABEL_413;
                                        }
                                      }
                                      break;
                                    }
                                    if (!v433)
                                      break;
                                  }
                                  else if ((uint64_t)(*(_QWORD *)(v428 + 24) << -(char)v429) >> -(char)v429 >= (uint64_t)(*(_QWORD *)(v417 + 24) << -(char)v429) >> -(char)v429)
                                  {
                                    break;
                                  }
                                }
                                else if (v427 <= v422)
                                {
                                  break;
                                }
LABEL_423:
                                v425 = v9 + 40 * v413;
                                v430 = *(_OWORD *)v425;
                                v431 = *(_OWORD *)(v425 + 16);
                                *(_DWORD *)(result + 32) = *(_DWORD *)(v425 + 32);
                                *(_OWORD *)result = v430;
                                *(_OWORD *)(result + 16) = v431;
                                result = v425;
                                if (v426 <= 1)
                                  goto LABEL_414;
                              }
                            }
LABEL_413:
                            v425 = result;
LABEL_414:
                            *(_QWORD *)v425 = v421;
                            *(_QWORD *)(v425 + 8) = v417;
                            *(_OWORD *)(v425 + 16) = v502;
                            *(_DWORD *)(v425 + 32) = v422;
                          }
LABEL_415:
                          v77 = v11-- <= 2;
                          if (v77)
                            return result;
                          continue;
                        }
                      }
                      goto LABEL_298;
                    }
                  }
                  else if (v337)
                  {
                    goto LABEL_354;
                  }
                }
                else if ((uint64_t)(*(_QWORD *)(v332 + 24) << -(char)v333) >> -(char)v333 < (uint64_t)(*(_QWORD *)(v311 + 24) << -(char)v333) >> -(char)v333)
                {
                  goto LABEL_354;
                }
              }
              else if (v331 > v308)
              {
                goto LABEL_354;
              }
LABEL_328:
              v334 = *(_OWORD *)v299;
              v335 = *(_OWORD *)(v299 + 16);
              *(_DWORD *)(v317 + 32) = *(_DWORD *)(v299 + 32);
              *(_OWORD *)v317 = v334;
              *(_OWORD *)(v317 + 16) = v335;
              if (v295 < v298)
                goto LABEL_355;
            }
          }
LABEL_305:
          v298 = 2 * v297 + 2;
          goto LABEL_306;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 40 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x1401)
        {
          result = (unint64_t)sub_1C550BFAC((__int128 *)v13, (__int128 *)v7, (__int128 *)(a2 - 40));
        }
        else
        {
          sub_1C550BFAC((__int128 *)v7, (__int128 *)v13, (__int128 *)(a2 - 40));
          v14 = 5 * v12;
          v15 = (__int128 *)(v7 + 40 * v12 - 40);
          sub_1C550BFAC((__int128 *)(v7 + 40), v15, (__int128 *)(a2 - 80));
          v16 = (__int128 *)(v7 + 40 + 8 * v14);
          sub_1C550BFAC((__int128 *)(v7 + 80), v16, (__int128 *)(a2 - 120));
          result = (unint64_t)sub_1C550BFAC(v15, (__int128 *)v13, v16);
          v515 = *(_QWORD *)(v7 + 32);
          v503 = *(_OWORD *)v7;
          v510 = *(_OWORD *)(v7 + 16);
          v17 = *(_OWORD *)v13;
          v18 = *(_OWORD *)(v13 + 16);
          *(_DWORD *)(v7 + 32) = *(_DWORD *)(v13 + 32);
          *(_OWORD *)v7 = v17;
          *(_OWORD *)(v7 + 16) = v18;
          *(_DWORD *)(v13 + 32) = v515;
          *(_OWORD *)v13 = v503;
          *(_OWORD *)(v13 + 16) = v510;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v19 = *(_DWORD *)(v7 + 32);
          v20 = *(_DWORD *)(v7 - 8);
          if (v20 == v19)
          {
            v21 = *(_QWORD *)(v7 - 32);
            v22 = *(_QWORD *)(v7 + 8);
            v23 = (_QWORD *)(v22 + 24);
            v24 = *(unsigned int *)(v21 + 32);
            if (v24 > 0x40)
            {
              v156 = *(_QWORD *)(v21 + 24);
              v157 = *(_QWORD *)(v156 + 8 * ((v24 - 1) >> 6)) & (1 << (v24 - 1));
              v158 = *(_DWORD *)(v22 + 32);
              v159 = v158 - 1;
              v160 = *(_QWORD *)(v22 + 24);
              result = v160 + 8 * ((v158 - 1) >> 6);
              if (v158 >= 0x41)
                v23 = (_QWORD *)(v160 + 8 * (v159 >> 6));
              if ((v157 != 0) == ((*v23 >> v159) & 1))
              {
                v161 = v24 + 63;
                v162 = v160 - 8;
                v163 = (v161 >> 3) & 0x3FFFFFF8;
                v164 = v156 - 8;
                do
                {
                  if (!v163)
                    goto LABEL_14;
                  v165 = *(_QWORD *)(v164 + v163);
                  v166 = *(_QWORD *)(v162 + v163);
                  v163 -= 8;
                }
                while (v165 == v166);
                if (v165 <= v166)
                  goto LABEL_20;
              }
              else if (v157)
              {
                goto LABEL_20;
              }
            }
            else if ((uint64_t)(*(_QWORD *)(v21 + 24) << -(char)v24) >> -(char)v24 < (uint64_t)(*v23 << -(char)v24) >> -(char)v24)
            {
              goto LABEL_20;
            }
          }
          else
          {
            if (v20 > v19)
              goto LABEL_20;
            v22 = *(_QWORD *)(v7 + 8);
          }
LABEL_14:
          v25 = *(_QWORD *)v7;
          v500 = *(_OWORD *)(v7 + 16);
          v26 = *(_DWORD *)(a2 - 8);
          if (v19 == v26)
          {
            v27 = *(_QWORD *)(a2 - 32);
            v28 = (_QWORD *)(v27 + 24);
            v29 = *(unsigned int *)(v22 + 32);
            if (v29 > 0x40)
            {
              v167 = *(_QWORD *)(v22 + 24);
              v168 = *(_QWORD *)(v167 + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
              result = *(unsigned int *)(v27 + 32);
              v169 = result - 1;
              v170 = *(_QWORD *)(v27 + 24);
              if (result >= 0x41)
                v28 = (_QWORD *)(v170 + 8 * (v169 >> 6));
              if ((v168 != 0) == ((*v28 >> v169) & 1))
              {
                v244 = v29 + 63;
                v245 = v170 - 8;
                v246 = (v244 >> 3) & 0x3FFFFFF8;
                v247 = v167 - 8;
                while (v246)
                {
                  v248 = *(_QWORD *)(v247 + v246);
                  v249 = *(_QWORD *)(v245 + v246);
                  v246 -= 8;
                  if (v248 != v249)
                  {
                    if (v248 <= v249)
                      goto LABEL_131;
                    break;
                  }
                }
              }
              else if (v168)
              {
LABEL_131:
                v138 = v7;
                do
                {
                  while (1)
                  {
                    while (1)
                    {
LABEL_132:
                      while (1)
                      {
                        v9 = v138 + 40;
                        v139 = *(_DWORD *)(v138 + 72);
                        if (v19 == v139)
                          break;
                        v138 += 40;
                        if (v19 > v139)
                          goto LABEL_180;
                      }
                      v140 = *(_QWORD *)(v138 + 48);
                      v141 = (_QWORD *)(v140 + 24);
                      v142 = *(unsigned int *)(v22 + 32);
                      if (v142 > 0x40)
                        break;
                      v143 = -v142;
                      v144 = (uint64_t)(*(_QWORD *)(v22 + 24) << v143) >> v143;
                      v145 = (uint64_t)(*v141 << v143) >> v143;
                      v138 = v9;
                      if (v144 < v145)
                        goto LABEL_180;
                    }
                    v146 = *(_QWORD *)(v22 + 24);
                    v147 = *(_QWORD *)(v146 + 8 * ((v142 - 1) >> 6)) & (1 << (v142 - 1));
                    result = *(unsigned int *)(v140 + 32);
                    v148 = result - 1;
                    v149 = *(_QWORD *)(v140 + 24);
                    if (result >= 0x41)
                      v141 = (_QWORD *)(v149 + 8 * (v148 >> 6));
                    if ((v147 != 0) != ((*v141 >> v148) & 1))
                      break;
                    v150 = v142 + 63;
                    v151 = v149 - 8;
                    v152 = (v150 >> 3) & 0x3FFFFFF8;
                    v153 = v146 - 8;
                    do
                    {
                      if (!v152)
                      {
                        v138 = v9;
                        goto LABEL_132;
                      }
                      v154 = *(_QWORD *)(v153 + v152);
                      v155 = *(_QWORD *)(v151 + v152);
                      v152 -= 8;
                    }
                    while (v154 == v155);
                    v138 = v9;
                    if (v154 <= v155)
                      goto LABEL_180;
                  }
                  v138 = v9;
                }
                while (!v147);
                goto LABEL_180;
              }
            }
            else if ((uint64_t)(*(_QWORD *)(v22 + 24) << -(char)v29) >> -(char)v29 < (uint64_t)(*v28 << -(char)v29) >> -(char)v29)
            {
              goto LABEL_131;
            }
          }
          else if (v19 > v26)
          {
            goto LABEL_131;
          }
          v9 = v7 + 40;
          v171 = v7;
          while (v9 < a2)
          {
            v172 = v171;
            v171 = v9;
            v173 = *(_DWORD *)(v172 + 72);
            if (v19 == v173)
            {
              v174 = *(_QWORD *)(v172 + 48);
              v175 = (_QWORD *)(v174 + 24);
              v176 = *(unsigned int *)(v22 + 32);
              if (v176 > 0x40)
              {
                v177 = *(_QWORD *)(v22 + 24);
                v178 = *(_QWORD *)(v177 + 8 * ((v176 - 1) >> 6)) & (1 << (v176 - 1));
                result = v178 != 0;
                v179 = *(_DWORD *)(v174 + 32);
                v180 = v179 - 1;
                v181 = *(_QWORD *)(v174 + 24);
                if (v179 >= 0x41)
                  v175 = (_QWORD *)(v181 + 8 * (v180 >> 6));
                if ((_DWORD)result == ((*v175 >> v180) & 1))
                {
                  v182 = v176 + 63;
                  v183 = v181 - 8;
                  v184 = (v182 >> 3) & 0x3FFFFFF8;
                  v185 = v177 - 8;
                  while (v184)
                  {
                    v186 = *(_QWORD *)(v185 + v184);
                    v187 = *(_QWORD *)(v183 + v184);
                    v184 -= 8;
                    if (v186 != v187)
                    {
                      if (v186 > v187)
                        break;
                      goto LABEL_180;
                    }
                  }
                }
                else if (v178)
                {
                  break;
                }
              }
              else if ((uint64_t)(*(_QWORD *)(v22 + 24) << -(char)v176) >> -(char)v176 < (uint64_t)(*v175 << -(char)v176) >> -(char)v176)
              {
                break;
              }
            }
            else if (v19 > v173)
            {
              break;
            }
            v9 += 40;
          }
LABEL_180:
          v188 = a2;
          if (v9 >= a2)
            goto LABEL_231;
          v188 = a2;
          while (1)
          {
            v189 = v188;
            v188 -= 40;
            if (v19 != v26)
            {
              if (v19 <= v26)
                goto LABEL_231;
              goto LABEL_187;
            }
            v190 = *(_QWORD *)(v189 - 32);
            v191 = (_QWORD *)(v190 + 24);
            v192 = *(unsigned int *)(v22 + 32);
            if (v192 <= 0x40)
            {
              if ((uint64_t)(*(_QWORD *)(v22 + 24) << -(char)v192) >> -(char)v192 >= (uint64_t)(*v191 << -(char)v192) >> -(char)v192)
                goto LABEL_231;
              goto LABEL_187;
            }
            v193 = *(_QWORD *)(v22 + 24);
            v194 = *(_QWORD *)(v193 + 8 * ((v192 - 1) >> 6)) & (1 << (v192 - 1));
            result = v194 != 0;
            v195 = *(_DWORD *)(v190 + 32);
            v196 = v195 - 1;
            v197 = *(_QWORD *)(v190 + 24);
            if (v195 >= 0x41)
              v191 = (_QWORD *)(v197 + 8 * (v196 >> 6));
            if ((_DWORD)result == ((*v191 >> v196) & 1))
              break;
            if (!v194)
              goto LABEL_231;
LABEL_187:
            v26 = *(_DWORD *)(v189 - 48);
          }
          v198 = v192 + 63;
          v199 = v197 - 8;
          v200 = (v198 >> 3) & 0x3FFFFFF8;
          v201 = v193 - 8;
          while (v200)
          {
            v202 = *(_QWORD *)(v201 + v200);
            v203 = *(_QWORD *)(v199 + v200);
            v200 -= 8;
            if (v202 != v203)
            {
              if (v202 <= v203)
                goto LABEL_187;
              break;
            }
          }
LABEL_231:
          while (v9 < v188)
          {
            v516 = *(_QWORD *)(v9 + 32);
            v504 = *(_OWORD *)v9;
            v512 = *(_OWORD *)(v9 + 16);
            v204 = *(_OWORD *)v188;
            v205 = *(_OWORD *)(v188 + 16);
            *(_DWORD *)(v9 + 32) = *(_DWORD *)(v188 + 32);
            *(_OWORD *)v9 = v204;
            *(_OWORD *)(v9 + 16) = v205;
            *(_DWORD *)(v188 + 32) = v516;
            *(_OWORD *)v188 = v504;
            *(_OWORD *)(v188 + 16) = v512;
LABEL_199:
            v206 = v9;
            do
            {
              while (1)
              {
LABEL_200:
                while (1)
                {
                  v9 = v206 + 40;
                  v207 = *(_DWORD *)(v206 + 72);
                  if (v19 == v207)
                    break;
                  v206 += 40;
                  if (v19 > v207)
                    goto LABEL_215;
                }
                v208 = *(_QWORD *)(v206 + 48);
                v209 = (_QWORD *)(v208 + 24);
                v210 = *(unsigned int *)(v22 + 32);
                if (v210 > 0x40)
                  break;
                v211 = -v210;
                v212 = (uint64_t)(*(_QWORD *)(v22 + 24) << v211) >> v211;
                v213 = (uint64_t)(*v209 << v211) >> v211;
                v206 = v9;
                if (v212 < v213)
                  goto LABEL_215;
              }
              v214 = *(_QWORD *)(v22 + 24);
              v215 = *(_QWORD *)(v214 + 8 * ((v210 - 1) >> 6)) & (1 << (v210 - 1));
              result = *(unsigned int *)(v208 + 32);
              v216 = result - 1;
              v217 = *(_QWORD *)(v208 + 24);
              if (result >= 0x41)
                v209 = (_QWORD *)(v217 + 8 * (v216 >> 6));
              if ((v215 != 0) == ((*v209 >> v216) & 1))
              {
                v218 = v210 + 63;
                v219 = v217 - 8;
                v220 = (v218 >> 3) & 0x3FFFFFF8;
                v221 = v214 - 8;
                while (v220)
                {
                  v222 = *(_QWORD *)(v221 + v220);
                  v223 = *(_QWORD *)(v219 + v220);
                  v220 -= 8;
                  if (v222 != v223)
                  {
                    v206 = v9;
                    if (v222 > v223)
                      goto LABEL_200;
                    goto LABEL_215;
                  }
                }
                goto LABEL_199;
              }
              v206 = v9;
            }
            while (!v215);
LABEL_215:
            v224 = v188;
            while (1)
            {
              while (1)
              {
LABEL_216:
                while (1)
                {
                  v188 = v224 - 40;
                  v225 = *(_DWORD *)(v224 - 8);
                  if (v19 == v225)
                    break;
                  v224 -= 40;
                  if (v19 <= v225)
                    goto LABEL_231;
                }
                v226 = *(_QWORD *)(v224 - 32);
                v227 = (_QWORD *)(v226 + 24);
                v228 = *(unsigned int *)(v22 + 32);
                if (v228 > 0x40)
                  break;
                v229 = -v228;
                v230 = (uint64_t)(*(_QWORD *)(v22 + 24) << v229) >> v229;
                v231 = (uint64_t)(*v227 << v229) >> v229;
                v224 = v188;
                if (v230 >= v231)
                  goto LABEL_231;
              }
              v232 = *(_QWORD *)(v22 + 24);
              v233 = *(_QWORD *)(v232 + 8 * ((v228 - 1) >> 6)) & (1 << (v228 - 1));
              result = *(unsigned int *)(v226 + 32);
              v234 = result - 1;
              v235 = *(_QWORD *)(v226 + 24);
              if (result >= 0x41)
                v227 = (_QWORD *)(v235 + 8 * (v234 >> 6));
              if ((v233 != 0) == ((*v227 >> v234) & 1))
                break;
              v224 = v188;
              if (!v233)
                goto LABEL_231;
            }
            v236 = v228 + 63;
            v237 = v235 - 8;
            v238 = (v236 >> 3) & 0x3FFFFFF8;
            v239 = v232 - 8;
            while (v238)
            {
              v240 = *(_QWORD *)(v239 + v238);
              v241 = *(_QWORD *)(v237 + v238);
              v238 -= 8;
              if (v240 != v241)
              {
                v224 = v188;
                if (v240 <= v241)
                  goto LABEL_216;
                goto LABEL_231;
              }
            }
          }
          if (v9 - 40 != v7)
          {
            v242 = *(_OWORD *)(v9 - 40);
            v243 = *(_OWORD *)(v9 - 24);
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v9 - 8);
            *(_OWORD *)v7 = v242;
            *(_OWORD *)(v7 + 16) = v243;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 40) = v25;
          *(_QWORD *)(v9 - 32) = v22;
          *(_OWORD *)(v9 - 24) = v500;
          *(_DWORD *)(v9 - 8) = v19;
          continue;
        }
        v19 = *(_DWORD *)(v7 + 32);
LABEL_20:
        v30 = *(_QWORD *)v7;
        v31 = *(_QWORD *)(v7 + 8);
        v501 = *(_OWORD *)(v7 + 16);
        v32 = (_QWORD *)(v31 + 24);
        v33 = v7;
        while (1)
        {
          while (1)
          {
LABEL_21:
            while (1)
            {
              v34 = v33;
              v33 += 40;
              v35 = *(_DWORD *)(v34 + 72);
              if (v35 == v19)
                break;
              if (v35 <= v19)
                goto LABEL_37;
            }
            v36 = *(_QWORD *)(v34 + 48);
            v37 = *(unsigned int *)(v36 + 32);
            if (v37 > 0x40)
              break;
            if ((uint64_t)(*(_QWORD *)(v36 + 24) << -(char)v37) >> -(char)v37 >= (uint64_t)(*v32 << -(char)v37) >> -(char)v37)
              goto LABEL_37;
          }
          v38 = *(_QWORD *)(v36 + 24);
          v39 = *(_QWORD *)(v38 + 8 * ((v37 - 1) >> 6)) & (1 << (v37 - 1));
          v40 = *(_DWORD *)(v31 + 32);
          v41 = v40 - 1;
          v42 = *(_QWORD *)(v31 + 24);
          v43 = (_QWORD *)(v40 >= 0x41 ? v42 + 8 * (v41 >> 6) : v31 + 24);
          if ((v39 != 0) == ((*v43 >> v41) & 1))
            break;
          if (!v39)
            goto LABEL_37;
        }
        v44 = v37 + 63;
        v45 = v42 - 8;
        v46 = (v44 >> 3) & 0x3FFFFFF8;
        v47 = v38 - 8;
        while (v46)
        {
          v48 = *(_QWORD *)(v47 + v46);
          v49 = *(_QWORD *)(v45 + v46);
          v46 -= 8;
          if (v48 != v49)
          {
            if (v48 <= v49)
              goto LABEL_21;
            break;
          }
        }
LABEL_37:
        v50 = a2;
        if (v34 == v7)
        {
          v51 = a2;
          if (v33 < a2)
          {
            v70 = a2;
            do
            {
              while (1)
              {
                v51 = v70 - 40;
                v71 = *(_DWORD *)(v70 - 8);
                if (v71 == v19)
                  break;
                v79 = v71 > v19 || v33 >= v51;
                v70 -= 40;
                if (v79)
                  goto LABEL_86;
              }
              v72 = *(_QWORD *)(v70 - 32);
              v73 = *(unsigned int *)(v72 + 32);
              if (v73 > 0x40)
              {
                v80 = *(_QWORD *)(v72 + 24);
                v81 = *(_QWORD *)(v80 + 8 * ((v73 - 1) >> 6)) & (1 << (v73 - 1));
                v82 = *(_DWORD *)(v31 + 32);
                v83 = v82 - 1;
                v84 = *(_QWORD *)(v31 + 24);
                if (v82 >= 0x41)
                  v85 = (_QWORD *)(v84 + 8 * (v83 >> 6));
                else
                  v85 = (_QWORD *)(v31 + 24);
                if ((v81 != 0) == ((*v85 >> v83) & 1))
                {
                  v86 = v73 + 63;
                  v87 = v84 - 8;
                  v88 = (v86 >> 3) & 0x3FFFFFF8;
                  v89 = v80 - 8;
                  do
                  {
                    if (!v88)
                    {
                      v78 = 0;
                      goto LABEL_63;
                    }
                    v90 = *(_QWORD *)(v89 + v88);
                    v91 = *(_QWORD *)(v87 + v88);
                    v88 -= 8;
                  }
                  while (v90 == v91);
                  if (v90 > v91)
                    v78 = 1;
                  else
                    v78 = -1;
                }
                else if (v81)
                {
                  v78 = -1;
                }
                else
                {
                  v78 = 1;
                }
              }
              else
              {
                v74 = -v73;
                v75 = (uint64_t)(*(_QWORD *)(v72 + 24) << v74) >> v74;
                v76 = (uint64_t)(*v32 << v74) >> v74;
                v77 = v75 < v76;
                v78 = v75 > v76;
                if (v77)
                  v78 = -1;
              }
LABEL_63:
              if (v78 < 0)
                break;
              v70 = v51;
            }
            while (v33 < v51);
          }
        }
        else
        {
          do
          {
            while (1)
            {
              while (1)
              {
LABEL_38:
                while (1)
                {
                  v51 = v50 - 40;
                  v52 = *(_DWORD *)(v50 - 8);
                  if (v52 == v19)
                    break;
                  v50 -= 40;
                  if (v52 > v19)
                    goto LABEL_86;
                }
                v53 = *(_QWORD *)(v50 - 32);
                v54 = *(unsigned int *)(v53 + 32);
                if (v54 > 0x40)
                  break;
                v55 = -v54;
                v56 = (uint64_t)(*(_QWORD *)(v53 + 24) << v55) >> v55;
                v57 = (uint64_t)(*v32 << v55) >> v55;
                v50 = v51;
                if (v56 < v57)
                  goto LABEL_86;
              }
              v58 = *(_QWORD *)(v53 + 24);
              v59 = *(_QWORD *)(v58 + 8 * ((v54 - 1) >> 6)) & (1 << (v54 - 1));
              v60 = *(_DWORD *)(v31 + 32);
              v61 = v60 - 1;
              v62 = *(_QWORD *)(v31 + 24);
              v63 = (_QWORD *)(v60 >= 0x41 ? v62 + 8 * (v61 >> 6) : v31 + 24);
              if ((v59 != 0) != ((*v63 >> v61) & 1))
                break;
              v64 = v54 + 63;
              v65 = v62 - 8;
              v66 = (v64 >> 3) & 0x3FFFFFF8;
              v67 = v58 - 8;
              do
              {
                if (!v66)
                {
                  v50 = v51;
                  goto LABEL_38;
                }
                v68 = *(_QWORD *)(v67 + v66);
                v69 = *(_QWORD *)(v65 + v66);
                v66 -= 8;
              }
              while (v68 == v69);
              v50 = v51;
              if (v68 <= v69)
                goto LABEL_86;
            }
            v50 = v51;
          }
          while (!v59);
        }
LABEL_86:
        v9 = v33;
        if (v33 < v51)
        {
          v92 = v51;
          do
          {
            v93 = v92;
            v94 = *(_OWORD *)v9;
            v511 = *(_OWORD *)(v9 + 16);
            v95 = *(_QWORD *)(v9 + 32);
            v97 = *(_OWORD *)v93;
            v96 = *(_OWORD *)(v93 + 16);
            *(_DWORD *)(v9 + 32) = *(_DWORD *)(v93 + 32);
            *(_OWORD *)v9 = v97;
            *(_OWORD *)(v9 + 16) = v96;
            *(_DWORD *)(v93 + 32) = v95;
            *(_OWORD *)v93 = v94;
            *(_OWORD *)(v93 + 16) = v511;
            v98 = v9;
            do
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    v9 = v98 + 40;
                    v99 = *(_DWORD *)(v98 + 72);
                    if (v99 == v19)
                      break;
                    v98 += 40;
                    if (v99 <= v19)
                      goto LABEL_120;
                  }
                  v100 = *(_QWORD *)(v98 + 48);
                  v101 = *(unsigned int *)(v100 + 32);
                  if (v101 > 0x40)
                    break;
                  v102 = -v101;
                  v103 = (uint64_t)(*(_QWORD *)(v100 + 24) << v102) >> v102;
                  v104 = (uint64_t)(*v32 << v102) >> v102;
                  v98 = v9;
                  if (v103 >= v104)
                    goto LABEL_120;
                }
                v105 = *(_QWORD *)(v100 + 24);
                v106 = *(_QWORD *)(v105 + 8 * ((v101 - 1) >> 6)) & (1 << (v101 - 1));
                v107 = *(_DWORD *)(v31 + 32);
                v108 = v107 - 1;
                v109 = *(_QWORD *)(v31 + 24);
                v110 = (_QWORD *)(v107 >= 0x41 ? v109 + 8 * (v108 >> 6) : v31 + 24);
                if ((v106 != 0) == ((*v110 >> v108) & 1))
                  break;
                v98 = v9;
                if (!v106)
                  goto LABEL_120;
              }
              v111 = v101 + 63;
              v112 = v109 - 8;
              v113 = (v111 >> 3) & 0x3FFFFFF8;
              v114 = v105 - 8;
              do
              {
                if (!v113)
                  goto LABEL_120;
                v115 = *(_QWORD *)(v114 + v113);
                v116 = *(_QWORD *)(v112 + v113);
                v113 -= 8;
              }
              while (v115 == v116);
              v98 = v9;
            }
            while (v115 <= v116);
            do
            {
              while (1)
              {
LABEL_120:
                while (1)
                {
                  v92 = v93 - 40;
                  v129 = *(_DWORD *)(v93 - 8);
                  if (v129 == v19)
                    break;
                  v93 -= 40;
                  if (v129 > v19)
                    goto LABEL_123;
                }
                v130 = *(_QWORD *)(v93 - 32);
                v131 = *(unsigned int *)(v130 + 32);
                if (v131 <= 0x40)
                  break;
                v117 = *(_QWORD *)(v130 + 24);
                v118 = *(_QWORD *)(v117 + 8 * ((v131 - 1) >> 6)) & (1 << (v131 - 1));
                v119 = *(_DWORD *)(v31 + 32);
                v120 = v119 - 1;
                v121 = *(_QWORD *)(v31 + 24);
                if (v119 >= 0x41)
                  v122 = (_QWORD *)(v121 + 8 * (v120 >> 6));
                else
                  v122 = (_QWORD *)(v31 + 24);
                if ((v118 != 0) == ((*v122 >> v120) & 1))
                {
                  v123 = v131 + 63;
                  v124 = v121 - 8;
                  v125 = (v123 >> 3) & 0x3FFFFFF8;
                  v126 = v117 - 8;
                  do
                  {
                    if (!v125)
                    {
                      v93 = v92;
                      goto LABEL_120;
                    }
                    v127 = *(_QWORD *)(v126 + v125);
                    v128 = *(_QWORD *)(v124 + v125);
                    v125 -= 8;
                  }
                  while (v127 == v128);
                  v93 = v92;
                  if (v127 <= v128)
                    goto LABEL_123;
                }
                else
                {
                  v93 = v92;
                  if (v118)
                    goto LABEL_123;
                }
              }
              v132 = -v131;
              v133 = (uint64_t)(*(_QWORD *)(v130 + 24) << v132) >> v132;
              v134 = (uint64_t)(*v32 << v132) >> v132;
              v93 = v92;
            }
            while (v133 >= v134);
LABEL_123:
            ;
          }
          while (v9 < v92);
        }
        if (v9 - 40 != v7)
        {
          v135 = *(_OWORD *)(v9 - 40);
          v136 = *(_OWORD *)(v9 - 24);
          *(_DWORD *)(v7 + 32) = *(_DWORD *)(v9 - 8);
          *(_OWORD *)v7 = v135;
          *(_OWORD *)(v7 + 16) = v136;
        }
        *(_QWORD *)(v9 - 40) = v30;
        *(_QWORD *)(v9 - 32) = v31;
        *(_OWORD *)(v9 - 24) = v501;
        *(_DWORD *)(v9 - 8) = v19;
        if (v33 < v51)
        {
LABEL_129:
          result = sub_1C5509ECC(v7, v9 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v137 = sub_1C550C4A8(v7, v9 - 40);
        result = sub_1C550C4A8(v9, a2);
        if (!(_DWORD)result)
        {
          if (v137)
            continue;
          goto LABEL_129;
        }
        a2 = v9 - 40;
        if (!v137)
          goto LABEL_2;
        return result;
    }
  }
}

__int128 *sub_1C550BB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *result;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  int v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;

  result = sub_1C550C8D4(a1, a2, a3, a4);
  v11 = *(_DWORD *)(a4 + 32);
  v12 = *(_DWORD *)(a5 + 32);
  if (v12 == v11)
  {
    v13 = *(_QWORD *)(a5 + 8);
    v14 = *(_QWORD *)(a4 + 8);
    v15 = (_QWORD *)(v14 + 24);
    v16 = *(unsigned int *)(v13 + 32);
    if (v16 > 0x40)
    {
      v55 = *(_QWORD *)(v13 + 24);
      v56 = *(_QWORD *)(v55 + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
      v57 = *(_DWORD *)(v14 + 32);
      v58 = v57 - 1;
      v59 = *(_QWORD *)(v14 + 24);
      if (v57 >= 0x41)
        v15 = (_QWORD *)(v59 + 8 * (v58 >> 6));
      if ((v56 != 0) == ((*v15 >> v58) & 1))
      {
        v70 = v16 + 63;
        v71 = v59 - 8;
        v72 = (v70 >> 3) & 0x3FFFFFF8;
        v73 = v55 - 8;
        while (v72)
        {
          v74 = *(_QWORD *)(v73 + v72);
          v75 = *(_QWORD *)(v71 + v72);
          v72 -= 8;
          if (v74 != v75)
          {
            if (v74 <= v75)
              goto LABEL_6;
            return result;
          }
        }
        return result;
      }
      if (!v56)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(v13 + 24) << -(char)v16) >> -(char)v16 >= (uint64_t)(*v15 << -(char)v16) >> -(char)v16)
    {
      return result;
    }
  }
  else if (v12 <= v11)
  {
    return result;
  }
LABEL_6:
  v17 = *(_QWORD *)(a4 + 32);
  v18 = *(_OWORD *)a4;
  v19 = *(_OWORD *)(a4 + 16);
  v20 = *(_DWORD *)(a5 + 32);
  v21 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)(a4 + 16) = v21;
  *(_DWORD *)(a4 + 32) = v20;
  *(_OWORD *)a5 = v18;
  *(_OWORD *)(a5 + 16) = v19;
  *(_DWORD *)(a5 + 32) = v17;
  v22 = *(_DWORD *)(a3 + 32);
  v23 = *(_DWORD *)(a4 + 32);
  if (v23 == v22)
  {
    v24 = *(_QWORD *)(a4 + 8);
    v25 = *(_QWORD *)(a3 + 8);
    v26 = (_QWORD *)(v25 + 24);
    v27 = *(unsigned int *)(v24 + 32);
    if (v27 > 0x40)
    {
      v60 = *(_QWORD *)(v24 + 24);
      v61 = *(_QWORD *)(v60 + 8 * ((v27 - 1) >> 6)) & (1 << (v27 - 1));
      v62 = *(_DWORD *)(v25 + 32);
      v63 = v62 - 1;
      v64 = *(_QWORD *)(v25 + 24);
      if (v62 >= 0x41)
        v26 = (_QWORD *)(v64 + 8 * (v63 >> 6));
      if ((v61 != 0) == ((*v26 >> v63) & 1))
      {
        v81 = v27 + 63;
        v82 = v64 - 8;
        v83 = (v81 >> 3) & 0x3FFFFFF8;
        v84 = v60 - 8;
        while (v83)
        {
          v85 = *(_QWORD *)(v84 + v83);
          v86 = *(_QWORD *)(v82 + v83);
          v83 -= 8;
          if (v85 != v86)
          {
            if (v85 <= v86)
              goto LABEL_11;
            return result;
          }
        }
        return result;
      }
      if (!v61)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(v24 + 24) << -(char)v27) >> -(char)v27 >= (uint64_t)(*v26 << -(char)v27) >> -(char)v27)
    {
      return result;
    }
  }
  else if (v23 <= v22)
  {
    return result;
  }
LABEL_11:
  v28 = *(_QWORD *)(a3 + 32);
  v29 = *(_OWORD *)a3;
  v30 = *(_OWORD *)(a3 + 16);
  v31 = *(_DWORD *)(a4 + 32);
  v32 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 16) = v32;
  *(_DWORD *)(a3 + 32) = v31;
  *(_OWORD *)a4 = v29;
  *(_OWORD *)(a4 + 16) = v30;
  *(_DWORD *)(a4 + 32) = v28;
  v33 = *(_DWORD *)(a2 + 32);
  v34 = *(_DWORD *)(a3 + 32);
  if (v34 == v33)
  {
    v35 = *(_QWORD *)(a3 + 8);
    v36 = *(_QWORD *)(a2 + 8);
    v37 = (_QWORD *)(v36 + 24);
    v38 = *(unsigned int *)(v35 + 32);
    if (v38 > 0x40)
    {
      v65 = *(_QWORD *)(v35 + 24);
      v66 = *(_QWORD *)(v65 + 8 * ((v38 - 1) >> 6)) & (1 << (v38 - 1));
      v67 = *(_DWORD *)(v36 + 32);
      v68 = v67 - 1;
      v69 = *(_QWORD *)(v36 + 24);
      if (v67 >= 0x41)
        v37 = (_QWORD *)(v69 + 8 * (v68 >> 6));
      if ((v66 != 0) == ((*v37 >> v68) & 1))
      {
        v87 = v38 + 63;
        v88 = v69 - 8;
        v89 = (v87 >> 3) & 0x3FFFFFF8;
        v90 = v65 - 8;
        while (v89)
        {
          v91 = *(_QWORD *)(v90 + v89);
          v92 = *(_QWORD *)(v88 + v89);
          v89 -= 8;
          if (v91 != v92)
          {
            if (v91 <= v92)
              goto LABEL_16;
            return result;
          }
        }
        return result;
      }
      if (!v66)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(v35 + 24) << -(char)v38) >> -(char)v38 >= (uint64_t)(*v37 << -(char)v38) >> -(char)v38)
    {
      return result;
    }
  }
  else if (v34 <= v33)
  {
    return result;
  }
LABEL_16:
  v39 = *(_QWORD *)(a2 + 32);
  v40 = *(_OWORD *)a2;
  v41 = *(_OWORD *)(a2 + 16);
  v42 = *(_DWORD *)(a3 + 32);
  v43 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v43;
  *(_DWORD *)(a2 + 32) = v42;
  *(_OWORD *)a3 = v40;
  *(_OWORD *)(a3 + 16) = v41;
  *(_DWORD *)(a3 + 32) = v39;
  v44 = *(_DWORD *)(a1 + 32);
  v45 = *(_DWORD *)(a2 + 32);
  if (v45 != v44)
  {
    if (v45 <= v44)
      return result;
    goto LABEL_21;
  }
  v46 = *(_QWORD *)(a2 + 8);
  v47 = *(_QWORD *)(a1 + 8);
  v48 = (_QWORD *)(v47 + 24);
  v49 = *(unsigned int *)(v46 + 32);
  if (v49 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(v46 + 24) << -(char)v49) >> -(char)v49 >= (uint64_t)(*v48 << -(char)v49) >> -(char)v49)
      return result;
    goto LABEL_21;
  }
  v76 = *(_QWORD *)(v46 + 24);
  v77 = *(_QWORD *)(v76 + 8 * ((v49 - 1) >> 6)) & (1 << (v49 - 1));
  v78 = *(_DWORD *)(v47 + 32);
  v79 = v78 - 1;
  v80 = *(_QWORD *)(v47 + 24);
  if (v78 >= 0x41)
    v48 = (_QWORD *)(v80 + 8 * (v79 >> 6));
  if ((v77 != 0) == ((*v48 >> v79) & 1))
  {
    v93 = v49 + 63;
    v94 = v80 - 8;
    v95 = (v93 >> 3) & 0x3FFFFFF8;
    v96 = v76 - 8;
    while (v95)
    {
      v97 = *(_QWORD *)(v96 + v95);
      v98 = *(_QWORD *)(v94 + v95);
      v95 -= 8;
      if (v97 != v98)
      {
        if (v97 <= v98)
          goto LABEL_21;
        return result;
      }
    }
  }
  else if (v77)
  {
LABEL_21:
    v50 = *(_QWORD *)(a1 + 32);
    v51 = *(_OWORD *)a1;
    v52 = *(_OWORD *)(a1 + 16);
    v53 = *(_DWORD *)(a2 + 32);
    v54 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v54;
    *(_DWORD *)(a1 + 32) = v53;
    *(_OWORD *)a2 = v51;
    *(_OWORD *)(a2 + 16) = v52;
    *(_DWORD *)(a2 + 32) = v50;
  }
  return result;
}

__int128 *sub_1C550BFAC(__int128 *result, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int128 v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  int v53;
  __int128 v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;

  v3 = *((_DWORD *)result + 8);
  v4 = *((_DWORD *)a2 + 8);
  if (v4 == v3)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *((_QWORD *)result + 1);
    v7 = (_QWORD *)(v6 + 24);
    v8 = *(unsigned int *)(v5 + 32);
    if (v8 <= 0x40)
    {
      if ((uint64_t)(*(_QWORD *)(v5 + 24) << -(char)v8) >> -(char)v8 >= (uint64_t)(*v7 << -(char)v8) >> -(char)v8)
        goto LABEL_16;
LABEL_6:
      v9 = *((_DWORD *)a3 + 8);
      if (v9 == v4)
      {
        v10 = *((_QWORD *)a3 + 1);
        v11 = *((_QWORD *)a2 + 1);
        v12 = (_QWORD *)(v11 + 24);
        v13 = *(unsigned int *)(v10 + 32);
        if (v13 <= 0x40)
        {
          if ((uint64_t)(*(_QWORD *)(v10 + 24) << -(char)v13) >> -(char)v13 >= (uint64_t)(*v12 << -(char)v13) >> -(char)v13)
            goto LABEL_31;
LABEL_11:
          v14 = *((_QWORD *)result + 4);
          v15 = *result;
          v16 = result[1];
          v17 = *((_DWORD *)a3 + 8);
          v18 = a3[1];
          *result = *a3;
          result[1] = v18;
          *((_DWORD *)result + 8) = v17;
          goto LABEL_37;
        }
        v45 = *(_QWORD *)(v10 + 24);
        v46 = *(_QWORD *)(v45 + 8 * ((v13 - 1) >> 6)) & (1 << (v13 - 1));
        v47 = *(_DWORD *)(v11 + 32);
        v48 = v47 - 1;
        v49 = *(_QWORD *)(v11 + 24);
        if (v47 >= 0x41)
          v12 = (_QWORD *)(v49 + 8 * (v48 >> 6));
        if ((v46 != 0) == ((*v12 >> v48) & 1))
        {
          v83 = v13 + 63;
          v84 = v49 - 8;
          v85 = (v83 >> 3) & 0x3FFFFFF8;
          v86 = v45 - 8;
          while (v85)
          {
            v87 = *(_QWORD *)(v86 + v85);
            v88 = *(_QWORD *)(v84 + v85);
            v85 -= 8;
            if (v87 != v88)
            {
              if (v87 <= v88)
                goto LABEL_11;
              goto LABEL_31;
            }
          }
          goto LABEL_31;
        }
        if (v46)
          goto LABEL_11;
      }
      else if (v9 > v4)
      {
        goto LABEL_11;
      }
LABEL_31:
      v50 = *((_QWORD *)result + 4);
      v51 = *result;
      v52 = result[1];
      v53 = *((_DWORD *)a2 + 8);
      v54 = a2[1];
      *result = *a2;
      result[1] = v54;
      *((_DWORD *)result + 8) = v53;
      *a2 = v51;
      a2[1] = v52;
      *((_DWORD *)a2 + 8) = v50;
      v55 = *((_DWORD *)a3 + 8);
      if (v55 == (_DWORD)v50)
      {
        v56 = *((_QWORD *)a3 + 1);
        v57 = *((_QWORD *)a2 + 1);
        v58 = (_QWORD *)(v57 + 24);
        v59 = *(unsigned int *)(v56 + 32);
        if (v59 > 0x40)
        {
          v78 = *(_QWORD *)(v56 + 24);
          v79 = *(_QWORD *)(v78 + 8 * ((v59 - 1) >> 6)) & (1 << (v59 - 1));
          v80 = *(_DWORD *)(v57 + 32);
          v81 = v80 - 1;
          v82 = *(_QWORD *)(v57 + 24);
          if (v80 >= 0x41)
            v58 = (_QWORD *)(v82 + 8 * (v81 >> 6));
          if ((v79 != 0) == ((*v58 >> v81) & 1))
          {
            v101 = v59 + 63;
            v102 = v82 - 8;
            v103 = (v101 >> 3) & 0x3FFFFFF8;
            v104 = v78 - 8;
            while (v103)
            {
              v105 = *(_QWORD *)(v104 + v103);
              v106 = *(_QWORD *)(v102 + v103);
              v103 -= 8;
              if (v105 != v106)
              {
                if (v105 <= v106)
                  goto LABEL_36;
                return result;
              }
            }
            return result;
          }
          if (!v79)
            return result;
        }
        else if ((uint64_t)(*(_QWORD *)(v56 + 24) << -(char)v59) >> -(char)v59 >= (uint64_t)(*v58 << -(char)v59) >> -(char)v59)
        {
          return result;
        }
      }
      else if (v55 <= v50)
      {
        return result;
      }
LABEL_36:
      v14 = *((_QWORD *)a2 + 4);
      v15 = *a2;
      v16 = a2[1];
      v60 = *((_DWORD *)a3 + 8);
      v61 = a3[1];
      *a2 = *a3;
      a2[1] = v61;
      *((_DWORD *)a2 + 8) = v60;
LABEL_37:
      *a3 = v15;
      a3[1] = v16;
      *((_DWORD *)a3 + 8) = v14;
      return result;
    }
    v19 = *(_QWORD *)(v5 + 24);
    v20 = *(_QWORD *)(v19 + 8 * ((v8 - 1) >> 6)) & (1 << (v8 - 1));
    v21 = *(_DWORD *)(v6 + 32);
    v22 = v21 - 1;
    v23 = *(_QWORD *)(v6 + 24);
    if (v21 >= 0x41)
      v7 = (_QWORD *)(v23 + 8 * (v22 >> 6));
    if ((v20 != 0) == ((*v7 >> v22) & 1))
    {
      v67 = v8 + 63;
      v68 = v23 - 8;
      v69 = (v67 >> 3) & 0x3FFFFFF8;
      v70 = v19 - 8;
      while (v69)
      {
        v71 = *(_QWORD *)(v70 + v69);
        v72 = *(_QWORD *)(v68 + v69);
        v69 -= 8;
        if (v71 != v72)
        {
          if (v71 <= v72)
            goto LABEL_6;
          goto LABEL_16;
        }
      }
      goto LABEL_16;
    }
    if (v20)
      goto LABEL_6;
  }
  else if (v4 > v3)
  {
    goto LABEL_6;
  }
LABEL_16:
  v24 = *((_DWORD *)a3 + 8);
  if (v24 == v4)
  {
    v25 = *((_QWORD *)a3 + 1);
    v26 = *((_QWORD *)a2 + 1);
    v27 = (_QWORD *)(v26 + 24);
    v28 = *(unsigned int *)(v25 + 32);
    if (v28 > 0x40)
    {
      v62 = *(_QWORD *)(v25 + 24);
      v63 = *(_QWORD *)(v62 + 8 * ((v28 - 1) >> 6)) & (1 << (v28 - 1));
      v64 = *(_DWORD *)(v26 + 32);
      v65 = v64 - 1;
      v66 = *(_QWORD *)(v26 + 24);
      if (v64 >= 0x41)
        v27 = (_QWORD *)(v66 + 8 * (v65 >> 6));
      if ((v63 != 0) == ((*v27 >> v65) & 1))
      {
        v89 = v28 + 63;
        v90 = v66 - 8;
        v91 = (v89 >> 3) & 0x3FFFFFF8;
        v92 = v62 - 8;
        while (v91)
        {
          v93 = *(_QWORD *)(v92 + v91);
          v94 = *(_QWORD *)(v90 + v91);
          v91 -= 8;
          if (v93 != v94)
          {
            if (v93 <= v94)
              goto LABEL_21;
            return result;
          }
        }
        return result;
      }
      if (!v63)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(v25 + 24) << -(char)v28) >> -(char)v28 >= (uint64_t)(*v27 << -(char)v28) >> -(char)v28)
    {
      return result;
    }
  }
  else if (v24 <= v4)
  {
    return result;
  }
LABEL_21:
  v29 = *((_QWORD *)a2 + 4);
  v30 = *a2;
  v31 = a2[1];
  v32 = *((_DWORD *)a3 + 8);
  v33 = a3[1];
  *a2 = *a3;
  a2[1] = v33;
  *((_DWORD *)a2 + 8) = v32;
  *a3 = v30;
  a3[1] = v31;
  *((_DWORD *)a3 + 8) = v29;
  v34 = *((_DWORD *)result + 8);
  v35 = *((_DWORD *)a2 + 8);
  if (v35 != v34)
  {
    if (v35 <= v34)
      return result;
    goto LABEL_26;
  }
  v36 = *((_QWORD *)a2 + 1);
  v37 = *((_QWORD *)result + 1);
  v38 = (_QWORD *)(v37 + 24);
  v39 = *(unsigned int *)(v36 + 32);
  if (v39 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(v36 + 24) << -(char)v39) >> -(char)v39 >= (uint64_t)(*v38 << -(char)v39) >> -(char)v39)
      return result;
LABEL_26:
    v40 = *((_QWORD *)result + 4);
    v41 = *result;
    v42 = result[1];
    v43 = *((_DWORD *)a2 + 8);
    v44 = a2[1];
    *result = *a2;
    result[1] = v44;
    *((_DWORD *)result + 8) = v43;
    *a2 = v41;
    a2[1] = v42;
    *((_DWORD *)a2 + 8) = v40;
    return result;
  }
  v73 = *(_QWORD *)(v36 + 24);
  v74 = *(_QWORD *)(v73 + 8 * ((v39 - 1) >> 6)) & (1 << (v39 - 1));
  v75 = *(_DWORD *)(v37 + 32);
  v76 = v75 - 1;
  v77 = *(_QWORD *)(v37 + 24);
  if (v75 >= 0x41)
    v38 = (_QWORD *)(v77 + 8 * (v76 >> 6));
  if ((v74 != 0) == ((*v38 >> v76) & 1))
  {
    v95 = v39 + 63;
    v96 = v77 - 8;
    v97 = (v95 >> 3) & 0x3FFFFFF8;
    v98 = v73 - 8;
    while (v97)
    {
      v99 = *(_QWORD *)(v98 + v97);
      v100 = *(_QWORD *)(v96 + v97);
      v97 -= 8;
      if (v99 != v100)
      {
        if (v99 <= v100)
          goto LABEL_26;
        return result;
      }
    }
  }
  else if (v74)
  {
    goto LABEL_26;
  }
  return result;
}

BOOL sub_1C550C4A8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a1 + 32);
      v7 = *(_DWORD *)(a2 - 8);
      if (v7 == v6)
      {
        v8 = *(_QWORD *)(a2 - 32);
        v9 = *(_QWORD *)(a1 + 8);
        v10 = (_QWORD *)(v9 + 24);
        v11 = *(unsigned int *)(v8 + 32);
        if (v11 > 0x40)
        {
          v57 = *(_QWORD *)(v8 + 24);
          v58 = *(_QWORD *)(v57 + 8 * ((v11 - 1) >> 6)) & (1 << (v11 - 1));
          v59 = *(_DWORD *)(v9 + 32);
          v60 = v59 - 1;
          v61 = *(_QWORD *)(v9 + 24);
          if (v59 >= 0x41)
            v10 = (_QWORD *)(v61 + 8 * (v60 >> 6));
          if ((v58 != 0) == ((*v10 >> v60) & 1))
          {
            v62 = v11 + 63;
            v63 = v61 - 8;
            v64 = (v62 >> 3) & 0x3FFFFFF8;
            v65 = v57 - 8;
            do
            {
              if (!v64)
                return 1;
              v66 = *(_QWORD *)(v65 + v64);
              v67 = *(_QWORD *)(v63 + v64);
              v64 -= 8;
            }
            while (v66 == v67);
            if (v66 > v67)
              return 1;
          }
          else if (!v58)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v11) >> -(char)v11 >= (uint64_t)(*v10 << -(char)v11) >> -(char)v11)
        {
          return result;
        }
      }
      else if (v7 <= v6)
      {
        return result;
      }
      v51 = a2 - 40;
      v52 = *(_QWORD *)(a1 + 32);
      v53 = *(_OWORD *)a1;
      v54 = *(_OWORD *)(a1 + 16);
      v55 = *(_DWORD *)(a2 - 8);
      v56 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v56;
      *(_DWORD *)(a1 + 32) = v55;
      *(_OWORD *)v51 = v53;
      *(_OWORD *)(v51 + 16) = v54;
      *(_DWORD *)(v51 + 32) = v52;
      return 1;
    case 3uLL:
      sub_1C550BFAC((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_1C550C8D4(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_1C550BB64(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v12 = a1 + 80;
      sub_1C550BFAC((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80));
      v13 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_DWORD *)(v12 + 32);
    v16 = *(_DWORD *)(v13 + 32);
    if (v16 != v15)
    {
      if (v16 <= v15)
        goto LABEL_33;
      v17 = *(_QWORD *)(v13 + 8);
      goto LABEL_14;
    }
    v17 = *(_QWORD *)(v13 + 8);
    v18 = *(_QWORD *)(v12 + 8);
    v19 = (_QWORD *)(v18 + 24);
    v20 = *(unsigned int *)(v17 + 32);
    if (v20 <= 0x40)
      break;
    v40 = *(_QWORD *)(v17 + 24);
    v41 = *(_QWORD *)(v40 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
    v42 = *(_DWORD *)(v18 + 32);
    v43 = v42 - 1;
    v44 = *(_QWORD *)(v18 + 24);
    if (v42 >= 0x41)
      v19 = (_QWORD *)(v44 + 8 * (v43 >> 6));
    if ((v41 != 0) != ((*v19 >> v43) & 1))
    {
      if (!v41)
        goto LABEL_33;
      goto LABEL_14;
    }
    v45 = v20 + 63;
    v46 = v44 - 8;
    v47 = (v45 >> 3) & 0x3FFFFFF8;
    v48 = v40 - 8;
    do
    {
      if (!v47)
        goto LABEL_33;
      v49 = *(_QWORD *)(v48 + v47);
      v50 = *(_QWORD *)(v46 + v47);
      v47 -= 8;
    }
    while (v49 == v50);
    if (v49 <= v50)
      goto LABEL_14;
LABEL_33:
    v12 = v13;
    v13 += 40;
    if (v13 == a2)
      return 1;
  }
  if ((uint64_t)(*(_QWORD *)(v17 + 24) << -(char)v20) >> -(char)v20 >= (uint64_t)(*v19 << -(char)v20) >> -(char)v20)
    goto LABEL_33;
LABEL_14:
  v21 = *(_QWORD *)v13;
  v68 = *(_OWORD *)(v13 + 16);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v12 + 32);
  v22 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v22;
  v23 = a1;
  if (v12 == a1)
    goto LABEL_32;
  while (1)
  {
    v24 = *(_DWORD *)(v12 - 8);
    if (v16 != v24)
    {
      if (v16 <= v24)
        goto LABEL_31;
      goto LABEL_20;
    }
    v25 = *(_QWORD *)(v12 - 32);
    v26 = (_QWORD *)(v25 + 24);
    v27 = *(unsigned int *)(v17 + 32);
    if (v27 <= 0x40)
    {
      if ((uint64_t)(*(_QWORD *)(v17 + 24) << -(char)v27) >> -(char)v27 >= (uint64_t)(*v26 << -(char)v27) >> -(char)v27)
        goto LABEL_31;
      goto LABEL_20;
    }
    v29 = *(_QWORD *)(v17 + 24);
    v30 = *(_QWORD *)(v29 + 8 * ((v27 - 1) >> 6)) & (1 << (v27 - 1));
    v31 = *(_DWORD *)(v25 + 32);
    v32 = v31 - 1;
    v33 = *(_QWORD *)(v25 + 24);
    if (v31 >= 0x41)
      v26 = (_QWORD *)(v33 + 8 * (v32 >> 6));
    if ((v30 != 0) == ((*v26 >> v32) & 1))
      break;
    if (!v30)
      goto LABEL_31;
LABEL_20:
    v28 = *(_OWORD *)(v12 - 24);
    *(_OWORD *)v12 = *(_OWORD *)(v12 - 40);
    *(_OWORD *)(v12 + 16) = v28;
    *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 - 8);
    v12 -= 40;
    if (v12 == a1)
    {
      v23 = a1;
      goto LABEL_32;
    }
  }
  v34 = v27 + 63;
  v35 = v33 - 8;
  v36 = (v34 >> 3) & 0x3FFFFFF8;
  v37 = v29 - 8;
  while (v36)
  {
    v38 = *(_QWORD *)(v37 + v36);
    v39 = *(_QWORD *)(v35 + v36);
    v36 -= 8;
    if (v38 != v39)
    {
      if (v38 <= v39)
        goto LABEL_20;
      break;
    }
  }
LABEL_31:
  v23 = v12;
LABEL_32:
  *(_QWORD *)v23 = v21;
  *(_QWORD *)(v23 + 8) = v17;
  *(_OWORD *)(v23 + 16) = v68;
  *(_DWORD *)(v23 + 32) = v16;
  if (++v14 != 8)
    goto LABEL_33;
  return v13 + 40 == a2;
}

__int128 *sub_1C550C8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;

  result = sub_1C550BFAC((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(_DWORD *)(a3 + 32);
  v10 = *(_DWORD *)(a4 + 32);
  if (v10 == v9)
  {
    v11 = *(_QWORD *)(a4 + 8);
    v12 = *(_QWORD *)(a3 + 8);
    v13 = (_QWORD *)(v12 + 24);
    v14 = *(unsigned int *)(v11 + 32);
    if (v14 > 0x40)
    {
      v42 = *(_QWORD *)(v11 + 24);
      v43 = *(_QWORD *)(v42 + 8 * ((v14 - 1) >> 6)) & (1 << (v14 - 1));
      v44 = *(_DWORD *)(v12 + 32);
      v45 = v44 - 1;
      v46 = *(_QWORD *)(v12 + 24);
      if (v44 >= 0x41)
        v13 = (_QWORD *)(v46 + 8 * (v45 >> 6));
      if ((v43 != 0) == ((*v13 >> v45) & 1))
      {
        v57 = v14 + 63;
        v58 = v46 - 8;
        v59 = (v57 >> 3) & 0x3FFFFFF8;
        v60 = v42 - 8;
        while (v59)
        {
          v61 = *(_QWORD *)(v60 + v59);
          v62 = *(_QWORD *)(v58 + v59);
          v59 -= 8;
          if (v61 != v62)
          {
            if (v61 <= v62)
              goto LABEL_6;
            return result;
          }
        }
        return result;
      }
      if (!v43)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(v11 + 24) << -(char)v14) >> -(char)v14 >= (uint64_t)(*v13 << -(char)v14) >> -(char)v14)
    {
      return result;
    }
  }
  else if (v10 <= v9)
  {
    return result;
  }
LABEL_6:
  v15 = *(_QWORD *)(a3 + 32);
  v16 = *(_OWORD *)a3;
  v17 = *(_OWORD *)(a3 + 16);
  v18 = *(_DWORD *)(a4 + 32);
  v19 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 16) = v19;
  *(_DWORD *)(a3 + 32) = v18;
  *(_OWORD *)a4 = v16;
  *(_OWORD *)(a4 + 16) = v17;
  *(_DWORD *)(a4 + 32) = v15;
  v20 = *(_DWORD *)(a2 + 32);
  v21 = *(_DWORD *)(a3 + 32);
  if (v21 == v20)
  {
    v22 = *(_QWORD *)(a3 + 8);
    v23 = *(_QWORD *)(a2 + 8);
    v24 = (_QWORD *)(v23 + 24);
    v25 = *(unsigned int *)(v22 + 32);
    if (v25 > 0x40)
    {
      v47 = *(_QWORD *)(v22 + 24);
      v48 = *(_QWORD *)(v47 + 8 * ((v25 - 1) >> 6)) & (1 << (v25 - 1));
      v49 = *(_DWORD *)(v23 + 32);
      v50 = v49 - 1;
      v51 = *(_QWORD *)(v23 + 24);
      if (v49 >= 0x41)
        v24 = (_QWORD *)(v51 + 8 * (v50 >> 6));
      if ((v48 != 0) == ((*v24 >> v50) & 1))
      {
        v63 = v25 + 63;
        v64 = v51 - 8;
        v65 = (v63 >> 3) & 0x3FFFFFF8;
        v66 = v47 - 8;
        while (v65)
        {
          v67 = *(_QWORD *)(v66 + v65);
          v68 = *(_QWORD *)(v64 + v65);
          v65 -= 8;
          if (v67 != v68)
          {
            if (v67 <= v68)
              goto LABEL_11;
            return result;
          }
        }
        return result;
      }
      if (!v48)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(v22 + 24) << -(char)v25) >> -(char)v25 >= (uint64_t)(*v24 << -(char)v25) >> -(char)v25)
    {
      return result;
    }
  }
  else if (v21 <= v20)
  {
    return result;
  }
LABEL_11:
  v26 = *(_QWORD *)(a2 + 32);
  v27 = *(_OWORD *)a2;
  v28 = *(_OWORD *)(a2 + 16);
  v29 = *(_DWORD *)(a3 + 32);
  v30 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v30;
  *(_DWORD *)(a2 + 32) = v29;
  *(_OWORD *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v28;
  *(_DWORD *)(a3 + 32) = v26;
  v31 = *(_DWORD *)(a1 + 32);
  v32 = *(_DWORD *)(a2 + 32);
  if (v32 != v31)
  {
    if (v32 <= v31)
      return result;
    goto LABEL_16;
  }
  v33 = *(_QWORD *)(a2 + 8);
  v34 = *(_QWORD *)(a1 + 8);
  v35 = (_QWORD *)(v34 + 24);
  v36 = *(unsigned int *)(v33 + 32);
  if (v36 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(v33 + 24) << -(char)v36) >> -(char)v36 >= (uint64_t)(*v35 << -(char)v36) >> -(char)v36)
      return result;
    goto LABEL_16;
  }
  v52 = *(_QWORD *)(v33 + 24);
  v53 = *(_QWORD *)(v52 + 8 * ((v36 - 1) >> 6)) & (1 << (v36 - 1));
  v54 = *(_DWORD *)(v34 + 32);
  v55 = v54 - 1;
  v56 = *(_QWORD *)(v34 + 24);
  if (v54 >= 0x41)
    v35 = (_QWORD *)(v56 + 8 * (v55 >> 6));
  if ((v53 != 0) == ((*v35 >> v55) & 1))
  {
    v69 = v36 + 63;
    v70 = v56 - 8;
    v71 = (v69 >> 3) & 0x3FFFFFF8;
    v72 = v52 - 8;
    while (v71)
    {
      v73 = *(_QWORD *)(v72 + v71);
      v74 = *(_QWORD *)(v70 + v71);
      v71 -= 8;
      if (v73 != v74)
      {
        if (v73 <= v74)
          goto LABEL_16;
        return result;
      }
    }
  }
  else if (v53)
  {
LABEL_16:
    v37 = *(_QWORD *)(a1 + 32);
    v38 = *(_OWORD *)a1;
    v39 = *(_OWORD *)(a1 + 16);
    v40 = *(_DWORD *)(a2 + 32);
    v41 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v41;
    *(_DWORD *)(a1 + 32) = v40;
    *(_OWORD *)a2 = v38;
    *(_OWORD *)(a2 + 16) = v39;
    *(_DWORD *)(a2 + 32) = v37;
  }
  return result;
}

BOOL sub_1C550CC10(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 196;
}

void sub_1C550CC60()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C550CC74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816DE60;
  result[1] = v3;
  return result;
}

uint64_t sub_1C550CCA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E816DE60;
  a2[1] = v2;
  return result;
}

int *sub_1C550CCC4(uint64_t a1, uint64_t *a2)
{
  return sub_1C54F95B0(*(_QWORD *)(a1 + 8), a2);
}

void sub_1C550CCD0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C550CCE4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E816DEA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C550CD1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E816DEA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C550CD3C(uint64_t a1)
{
  int *v1;
  uint64_t v2;

  v1 = sub_1C54F95B0(*(_QWORD *)(a1 + 8), *(uint64_t **)(*(_QWORD *)(a1 + 16) - 32));
  if (v2)
    return *v1;
  else
    return 0;
}

void sub_1C550CD6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  unsigned int v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;

  v2 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v2)
    return;
  v5 = 0;
  v6 = *a1;
  v7 = 32 * v2;
  do
  {
    v8 = a2 + v5;
    v9 = v6 + v5;
    *(_QWORD *)v8 = *(_QWORD *)(v6 + v5);
    v10 = (void *)(a2 + v5 + 24);
    *(_QWORD *)(a2 + v5 + 8) = v10;
    v11 = (void **)(a2 + v5 + 8);
    *(_QWORD *)(v8 + 16) = 0x100000000;
    v12 = *(_DWORD *)(v6 + v5 + 16);
    if (v12)
      v13 = v9 == v8;
    else
      v13 = 1;
    if (!v13)
    {
      v14 = *(void **)(v9 + 8);
      if ((void *)(v9 + 24) != v14)
      {
        *v11 = v14;
        v20 = *(_DWORD *)(v6 + v5 + 20);
        *(_DWORD *)(v8 + 16) = v12;
        *(_DWORD *)(v8 + 20) = v20;
        *(_QWORD *)(v9 + 8) = v9 + 24;
        *(_DWORD *)(v6 + v5 + 20) = 0;
        goto LABEL_12;
      }
      if (v12 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + v5 + 8, a2 + v5 + 24, *(unsigned int *)(v6 + v5 + 16), 8);
        v15 = *(unsigned int *)(v9 + 16);
        if (!(_DWORD)v15)
          goto LABEL_11;
        v14 = *(void **)(v9 + 8);
        v10 = *v11;
      }
      else
      {
        v15 = *(unsigned int *)(v6 + v5 + 16);
      }
      memcpy(v10, v14, 8 * v15);
LABEL_11:
      *(_DWORD *)(v8 + 16) = v12;
LABEL_12:
      *(_DWORD *)(v9 + 16) = 0;
    }
    v5 += 32;
  }
  while (v7 != v5);
  v16 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v16)
  {
    v17 = *a1;
    v18 = 32 * v16;
    do
    {
      v19 = *(void **)(v17 + v18 - 24);
      if ((void *)(v17 + v18 - 8) != v19)
        free(v19);
      v18 -= 32;
    }
    while (v18);
  }
}

uint64_t sub_1C550CEB4(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1E816DF18;
  v2 = (void **)(a1 + 8);
  v4 = (void **)(a1 + 56);
  sub_1C550CF30(&v4);
  v4 = (void **)(a1 + 32);
  sub_1C550CFA0(&v4);
  v4 = v2;
  sub_1C550D010(&v4);
  return MEMORY[0x1CAA32FC0](a1, 0xE1C40AE8C13AFLL);
}

void sub_1C550CF30(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_1C62158C4(v4 - 192);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C550CFA0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_1C61996A0(v4 - 80);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C550D010(void ***a1)
{
  void **v1;
  unsigned __int8 **v2;
  unsigned __int8 **v4;
  void *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;

  v1 = *a1;
  v2 = (unsigned __int8 **)**a1;
  if (v2)
  {
    v4 = (unsigned __int8 **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 2;
      do
      {
        if (*v6)
          llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
        v7 = *(v6 - 2);
        if (v7)
          llvm::MetadataTracking::untrack((uint64_t)(v6 - 2), v7);
        v8 = v6 - 9;
        v6 -= 11;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C550D0AC()
{
  char v1;
  char *v2;
  int v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Should enable CSE in irtranslator";
  *((_QWORD *)&v4 + 1) = 33;
  v3 = 0;
  v1 = 0;
  v2 = &v1;
  sub_1C6270A68(&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8059B0, &dword_1C475E000);
}

uint64_t sub_1C550D110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t ParamElementType;
  uint64_t v32;
  unsigned int v33;
  unsigned __int8 v34;
  int v35;
  uint64_t v36;
  const std::string *v37;
  unint64_t v38;
  char v39;
  BOOL v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  char v71;
  BOOL v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  llvm::MachineInstr *v76;
  llvm::MachineFunction *v77;
  llvm::MachineInstr *v78;
  _QWORD *v79;
  char *v80;
  const char **v81;
  int v82;
  const char *v83;
  char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char v91;
  int v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _QWORD **v97;
  int v98;
  unint64_t v99;
  const char *v100;
  uint64_t v101;
  int v102;
  _QWORD ***v103;
  unsigned __int16 *v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  int IncompleteVirtualRegister;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  char v113;
  BOOL v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  int v126;
  int v127;
  unsigned int v128;
  const char *v129;
  int v130;
  char *v131;
  uint64_t v132;
  const llvm::MachineOperand *v133;
  uint64_t v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  int v142;
  int v143;
  _BOOL4 v144;
  int v145;
  char *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  __int128 v152;
  int v153;
  uint64_t v154;
  unsigned int v155;
  int i;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int *v160;
  unsigned int *v161;
  unsigned int v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int *v175;
  int v176;
  unsigned int v177;
  uint64_t MetadataImpl;
  llvm::MachineInstr *v179;
  unint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int RegSizeInBits;
  unsigned int v199;
  uint64_t v200;
  const char *v201;
  unint64_t v202;
  uint64_t v203;
  int GenericVirtualRegister;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  llvm::AttributeList *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t *v223;
  unsigned int v224;
  unsigned int v225;
  _QWORD ***v226;
  unsigned int v227;
  _QWORD *v228;
  unsigned int v229;
  char *v230;
  unint64_t v231;
  void *v232;
  const llvm::MachineOperand *v233;
  uint64_t v234;
  llvm::MachineFunction *v235;
  llvm::MachineInstr *v236;
  uint64_t *v237;
  uint64_t *v238;
  void **v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  _QWORD v248[3];
  int v249;
  __int128 __p;
  uint64_t v251;
  __int128 v252;
  char v253;
  void *v254;
  uint64_t v255;
  _BYTE v256[2304];
  char *v257;
  uint64_t v258;
  _QWORD v259[306];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v220 = v5;
  v7 = v6;
  v9 = v8;
  v10 = v4;
  v259[304] = *MEMORY[0x1E0C80C00];
  v217 = *(_QWORD *)(v6 - 32);
  v257 = (char *)v259;
  v258 = 0x1000000000;
  v11 = (_QWORD **)v8[1];
  v12 = (*v11)[5] + 272;
  v13 = (*(uint64_t (**)(_QWORD *))(*v11[2] + 176))(v11[2]);
  v222 = v9;
  v218 = v9[3];
  v228 = (_QWORD *)v10;
  v216 = v13;
  (*(void (**)(uint64_t **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 2008))(&v237, *(_QWORD *)(v10 + 8), v12);
  v14 = *(_QWORD *)(v7 - 32);
  if (*(_BYTE *)(v14 + 81))
    v15 = *(unsigned __int8 *)(v14 + 80) | 2;
  else
    v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v7 + 64);
  v215 = (llvm::AttributeList *)(v7 + 64);
  if (v16 && (*(_BYTE *)(v16 + 12) & 0x40) != 0 || llvm::CallBase::hasFnAttrOnCalledFunction(v7, 6))
    v15 |= 0x20u;
  v224 = v15 | (4 * *(_DWORD *)(v14 + 84));
  v17 = v237;
  v223 = v238;
  v221 = v7;
  v226 = (_QWORD ***)v11;
  if (v237 != v238)
  {
    v227 = 0;
    v18 = 0;
    v219 = v12;
    do
    {
      v19 = *v17;
      *(_QWORD *)((char *)&v243 + 6) = *(uint64_t *)((char *)v17 + 6);
      *(_QWORD *)&v243 = v19;
      v245 = 0;
      v246 = 0;
      v244 = 0;
      sub_1C484333C(&v244, v17[2], v17[3], 0xAAAAAAAAAAAAAAABLL * ((v17[3] - v17[2]) >> 3));
      v247 = *((_BYTE *)v17 + 40);
      memset(v248, 0, sizeof(v248));
      sub_1C53DF0E8(v248, v17[6], v17[7], (v17[7] - v17[6]) >> 5);
      v249 = *((_DWORD *)v17 + 18);
      if (*((char *)v17 + 103) < 0)
      {
        sub_1C47EBC30(&__p, (void *)v17[10], v17[11]);
      }
      else
      {
        v20 = *((_OWORD *)v17 + 5);
        v251 = v17[12];
        __p = v20;
      }
      v21 = *(_OWORD *)(v17 + 13);
      v253 = *((_BYTE *)v17 + 120);
      v252 = v21;
      v254 = v256;
      v255 = 0x100000000;
      v22 = sub_1C550E76C((uint64_t)&v257, (unint64_t)&v243);
      v23 = &v257[152 * v258];
      v24 = *(_QWORD *)v22;
      *(_QWORD *)(v23 + 6) = *(_QWORD *)(v22 + 6);
      *(_QWORD *)v23 = v24;
      *((_QWORD *)v23 + 3) = 0;
      *((_QWORD *)v23 + 4) = 0;
      *((_QWORD *)v23 + 2) = 0;
      *((_OWORD *)v23 + 1) = *((_OWORD *)v22 + 1);
      *((_QWORD *)v23 + 4) = *((_QWORD *)v22 + 4);
      *((_QWORD *)v22 + 3) = 0;
      *((_QWORD *)v22 + 4) = 0;
      *((_QWORD *)v22 + 2) = 0;
      v23[40] = v22[40];
      *((_QWORD *)v23 + 7) = 0;
      *((_QWORD *)v23 + 8) = 0;
      *((_QWORD *)v23 + 6) = 0;
      *((_OWORD *)v23 + 3) = *((_OWORD *)v22 + 3);
      *((_QWORD *)v23 + 8) = *((_QWORD *)v22 + 8);
      *((_QWORD *)v22 + 6) = 0;
      *((_QWORD *)v22 + 7) = 0;
      *((_QWORD *)v22 + 8) = 0;
      *((_DWORD *)v23 + 18) = *((_DWORD *)v22 + 18);
      v25 = *((_OWORD *)v22 + 5);
      *((_QWORD *)v23 + 12) = *((_QWORD *)v22 + 12);
      *((_OWORD *)v23 + 5) = v25;
      *((_QWORD *)v22 + 11) = 0;
      *((_QWORD *)v22 + 12) = 0;
      *((_QWORD *)v22 + 10) = 0;
      v26 = *(_OWORD *)(v22 + 104);
      LOBYTE(v24) = v22[120];
      *((_QWORD *)v23 + 16) = v23 + 144;
      v27 = (uint64_t)(v23 + 128);
      *(_BYTE *)(v27 - 8) = v24;
      *(_OWORD *)(v27 - 24) = v26;
      *(_QWORD *)(v27 + 8) = 0x100000000;
      if (*((_DWORD *)v22 + 34))
        sub_1C48621E4(v27, (uint64_t)(v22 + 128));
      LODWORD(v258) = v258 + 1;
      if (v254 != v256)
        free(v254);
      if (SHIBYTE(v251) < 0)
        operator delete((void *)__p);
      v239 = (void **)v248;
      sub_1C50107D8(&v239);
      v239 = (void **)&v244;
      sub_1C4765410(&v239);
      v28 = &v257[152 * v258];
      v29 = *((_DWORD *)v28 - 38);
      if (!v29)
        goto LABEL_22;
      if (v29 != 1)
      {
        *(v28 - 32) = 1;
        goto LABEL_32;
      }
      if (!*(v28 - 139))
      {
        v67 = *(_QWORD *)v7;
        v68 = v228[1];
        if (*(_QWORD *)v7 && *(_BYTE *)(v67 + 8) == 16)
          v69 = sub_1C47A7FD0(v68, v12, *(_QWORD *)(*(_QWORD *)(v67 + 16) + 8 * v18), 0);
        else
          v69 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 568))(v68, v12);
        v35 = v69;
        *(v28 - 32) = v69;
        ++v18;
      }
      else
      {
LABEL_22:
        v30 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32 * v227);
        *((_QWORD *)v28 - 5) = v30;
        if (*(_BYTE *)(v30 + 16) == 22)
          goto LABEL_265;
        if (*(v28 - 139))
          ParamElementType = llvm::AttributeList::getParamElementType(v215, v227);
        else
          ParamElementType = *(_QWORD *)v30;
        if ((*(_DWORD *)(ParamElementType + 8) & 0xFE) != 0x12)
        {
          v32 = 0;
          v33 = *(_DWORD *)(ParamElementType + 8);
          if (v33 > 0x15 || ((1 << v33) & 0x20AC7F) == 0)
            goto LABEL_283;
        }
        v34 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v228[1] + 568))(v228[1], v12);
        v35 = v34;
        *(v28 - 32) = v34;
        ++v227;
      }
      if (v35 == 178)
      {
LABEL_265:
        v32 = 0;
        goto LABEL_283;
      }
LABEL_32:
      v36 = v228[1];
      v37 = (const std::string *)*((_QWORD *)v28 - 17);
      v38 = *((_QWORD *)v28 - 16) - (_QWORD)v37;
      v229 = v18;
      if (v38 == 24)
      {
        std::string::operator=((std::string *)v28 - 3, v37);
        v39 = *(v28 - 49);
        v40 = v39 < 0;
        if (v39 >= 0)
          v41 = v28 - 72;
        else
          v41 = (char *)*((_QWORD *)v28 - 9);
        v42 = v39 & 0x7F;
        if (v40)
          v43 = *((_QWORD *)v28 - 8);
        else
          v43 = v42;
        v44 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v36 + 2040))(v36, v41, v43);
      }
      else
      {
        v45 = -1431655765 * (v38 >> 3);
        if ((_DWORD)v45)
        {
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v44 = 6;
          v49 = -1;
          do
          {
            v50 = (uint64_t *)(*((_QWORD *)v28 - 17) + v46);
            v51 = *((_BYTE *)v50 + 23);
            if (v51 >= 0)
              v52 = *((_QWORD *)v28 - 17) + v46;
            else
              v52 = *v50;
            if (v51 >= 0)
              v53 = v51 & 0x7F;
            else
              v53 = v50[1];
            v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 2040))(v36, v52, v53);
            if (*(v28 - 139))
              v55 = v54 == 2;
            else
              v55 = 1;
            if (v55 || v54 == 0 || v54 == 1)
            {
              v58 = v54 != 2 || *((_DWORD *)v28 - 36) == -1;
              if (v58 && dword_1C86546E8[v54] > v49)
              {
                v48 = v47;
                v44 = v54;
                v49 = dword_1C86546E8[v54];
              }
            }
            ++v47;
            v46 += 24;
          }
          while (v45 != v47);
          v37 = (const std::string *)*((_QWORD *)v28 - 17);
          v7 = v221;
          v11 = v226;
          v12 = v219;
        }
        else
        {
          v48 = 0;
          v44 = 6;
        }
        std::string::operator=((std::string *)v28 - 3, &v37[v48]);
      }
      *((_DWORD *)v28 - 12) = v44;
      v59 = *(v28 - 49);
      if ((v59 & 0x80u) == 0)
        v60 = v59 & 0x7F;
      else
        v60 = *((_QWORD *)v28 - 8);
      if (v60 == 1)
      {
        v61 = v28 - 72;
        if ((v59 & 0x80) != 0)
        {
          v61 = (char *)*((_QWORD *)v28 - 9);
          v59 = *((_QWORD *)v28 - 8);
        }
        v62 = memcmp(v61, "X", v59 != 0);
        if (v59 == 1 && !v62)
        {
          v63 = *((_QWORD *)v28 - 5);
          if (v63)
          {
            v64 = *(unsigned __int8 *)(v63 + 16);
            if (v64 > 0x16 || ((1 << v64) & 0x410001) == 0)
            {
              v70 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 2064))(v36, *(v28 - 32), 0);
              if (v70)
              {
                MEMORY[0x1CAA32ABC](v28 - 72, v70);
                v71 = *(v28 - 49);
                v72 = v71 < 0;
                if (v71 >= 0)
                  v73 = v28 - 72;
                else
                  v73 = (char *)*((_QWORD *)v28 - 9);
                v74 = v71 & 0x7F;
                if (v72)
                  v75 = *((_QWORD *)v28 - 8);
                else
                  v75 = v74;
                v44 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v36 + 2040))(v36, v73, v75);
                *((_DWORD *)v28 - 12) = v44;
              }
              else
              {
                v44 = *((_DWORD *)v28 - 12);
              }
            }
          }
        }
      }
      if (v44 == 5 || v44 == 2)
      {
        v65 = *((_DWORD *)v28 - 38);
        if (v65 == 2)
        {
          v224 |= 0x18u;
          v18 = v229;
          goto LABEL_91;
        }
        v18 = v229;
        if (v65 == 1)
        {
          v66 = v224 | 0x10;
          goto LABEL_89;
        }
        if (!v65)
        {
          v66 = v224 | 8;
LABEL_89:
          v224 = v66;
        }
      }
      else
      {
        v18 = v229;
      }
LABEL_91:
      v17 += 16;
    }
    while (v17 != v223);
  }
  v77 = sub_1C55437B8(v222, 1u);
  v78 = v76;
  v79 = (_QWORD *)(v217 + 24);
  if (*(char *)(v217 + 47) < 0)
    v79 = (_QWORD *)*v79;
  v244 = v79;
  LODWORD(v245) = 0;
  v243 = 9uLL;
  llvm::MachineInstr::addOperand(v76, v77, (const llvm::MachineOperand *)&v243);
  LODWORD(v243) = 1;
  *((_QWORD *)&v243 + 1) = 0;
  v244 = (_QWORD *)v224;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v243);
  v235 = v77;
  v236 = v78;
  v225 = *((_DWORD *)v78 + 10);
  *(_QWORD *)&v243 = &v244;
  *((_QWORD *)&v243 + 1) = 0x1000000000;
  if ((_DWORD)v258)
  {
    v80 = v257;
    v230 = &v257[152 * v258];
    do
    {
      v81 = (const char **)(v80 + 80);
      if (v80[103] < 0)
      {
        v83 = *v81;
        v82 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)*v81 + 60);
      }
      else
      {
        v82 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)v81 + 60);
        v83 = v80 + 80;
      }
      v84 = v80;
      if ((v82 & 0x400) != 0)
      {
        v85 = atoi(v83);
        v84 = &v257[152 * v85];
      }
      v86 = (*(uint64_t (**)(_QWORD *))(*v11[2] + 120))(v11[2]);
      v87 = (*(uint64_t (**)(_QWORD *))(*v11[2] + 176))(v11[2]);
      if (*((_DWORD *)v80 + 26) != 2)
      {
        v90 = (char *)*((_QWORD *)v84 + 10);
        v89 = v84 + 80;
        v88 = v90;
        v91 = v89[23];
        v92 = v91;
        v93 = v91 >= 0 ? v89 : v88;
        v94 = v91 & 0x7F;
        v95 = v92 >= 0 ? v94 : *((_QWORD *)v89 + 1);
        v96 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)v86 + 2048))(v86, v87, v93, v95, v89[40]);
        if (v97)
        {
          v98 = v96;
          v99 = (unint64_t)v97;
          v100 = v80 + 80;
          if (v80[103] < 0)
            v100 = *v81;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)v100 + 60) & 0x400) == 0)
          {
            v101 = v80[120];
            if (v101 == 1)
            {
              v102 = 1;
              v103 = v226;
            }
            else
            {
              v103 = v226;
              v102 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v86 + 584))(v86, ***v226, v101, 0, 0);
            }
            v104 = **(unsigned __int16 ***)v99;
            v105 = (uint64_t)v103[5];
            if (v98)
            {
              --v104;
              do
              {
                v106 = v104[1];
                ++v104;
              }
              while (v98 != v106);
            }
            if (v102)
            {
              v107 = v99 & 0xFFFFFFFFFFFFFFFBLL;
              do
              {
                if (v98)
                {
                  IncompleteVirtualRegister = *v104;
                }
                else
                {
                  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v105, "", 0);
                  *(_QWORD *)(*(_QWORD *)(v105 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v107;
                  v109 = *(_QWORD *)(v105 + 8);
                  if (v109)
                    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 24))(v109);
                }
                v110 = *((unsigned int *)v80 + 34);
                if (v110 >= *((unsigned int *)v80 + 35))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v80 + 128), (uint64_t)(v80 + 144), v110 + 1, 4);
                  v110 = *((unsigned int *)v80 + 34);
                }
                *(_DWORD *)(*((_QWORD *)v80 + 16) + 4 * v110) = IncompleteVirtualRegister;
                ++*((_DWORD *)v80 + 34);
                ++v104;
                --v102;
              }
              while (v102);
            }
          }
        }
      }
      v111 = *(_DWORD *)v80;
      if (*(_DWORD *)v80)
      {
        if (v111 == 2)
        {
          v122 = *((_DWORD *)v80 + 34);
          v11 = v226;
          if (v122)
          {
            LODWORD(v239) = 1;
            v240 = 0;
            v241 = (8 * v122) | 4u;
            llvm::MachineInstr::addOperand(v236, v235, (const llvm::MachineOperand *)&v239);
            v123 = *((unsigned int *)v80 + 34);
            if ((_DWORD)v123)
            {
              v124 = (int *)*((_QWORD *)v80 + 16);
              v125 = 4 * v123;
              do
              {
                v127 = *v124++;
                v126 = v127;
                if ((v127 - 1) >= 0x3FFFFFFF)
                  v128 = 66;
                else
                  v128 = 70;
                sub_1C47BF4F4(&v235, v126, v128, 0);
                v125 -= 4;
              }
              while (v125);
            }
          }
          goto LABEL_217;
        }
        v11 = v226;
        if (v111 == 1)
        {
          if (*((_DWORD *)v80 + 26) != 2)
          {
            v135 = *((_DWORD *)v80 + 34);
            if (!v135)
              goto LABEL_281;
            if (v80[4])
              v136 = 3;
            else
              v136 = 2;
            v137 = v136 | (8 * v135);
            v138 = **((_DWORD **)v80 + 16);
            if (v138 < 0)
              v137 |= (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 24) + 16 * (v138 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                           + 24) << 16)
                    + 0x10000;
            LODWORD(v239) = 1;
            v240 = 0;
            v241 = v137;
            llvm::MachineInstr::addOperand(v236, v235, (const llvm::MachineOperand *)&v239);
            v139 = *((unsigned int *)v80 + 34);
            if ((_DWORD)v139)
            {
              v140 = (int *)*((_QWORD *)v80 + 16);
              v141 = 4 * v139;
              do
              {
                v143 = *v140++;
                v142 = v143;
                v144 = (v143 - 1) < 0x3FFFFFFF;
                if (v80[4])
                  v145 = 66;
                else
                  v145 = 2;
                sub_1C47BF4F4(&v235, v142, v145 | (4 * v144), 0);
                v141 -= 4;
              }
              while (v141);
            }
            v146 = sub_1C550E76C((uint64_t)&v243, (unint64_t)v80);
            v147 = v243;
            v148 = DWORD2(v243);
            v149 = v243 + 152 * DWORD2(v243);
            v150 = *(_QWORD *)v146;
            *(_QWORD *)(v149 + 6) = *(_QWORD *)(v146 + 6);
            *(_QWORD *)v149 = v150;
            *(_QWORD *)(v149 + 16) = 0;
            *(_QWORD *)(v149 + 24) = 0;
            *(_QWORD *)(v149 + 32) = 0;
            sub_1C484333C((_QWORD *)(v149 + 16), *((_QWORD *)v146 + 2), *((_QWORD *)v146 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v146 + 3) - *((_QWORD *)v146 + 2)) >> 3));
            *(_BYTE *)(v149 + 40) = v146[40];
            *(_QWORD *)(v149 + 56) = 0;
            *(_QWORD *)(v149 + 64) = 0;
            *(_QWORD *)(v149 + 48) = 0;
            sub_1C53DF0E8((_QWORD *)(v149 + 48), *((_QWORD *)v146 + 6), *((_QWORD *)v146 + 7), (uint64_t)(*((_QWORD *)v146 + 7) - *((_QWORD *)v146 + 6)) >> 5);
            *(_DWORD *)(v149 + 72) = *((_DWORD *)v146 + 18);
            v151 = (_BYTE *)(v149 + 80);
            if (v146[103] < 0)
            {
              sub_1C47EBC30(v151, *((void **)v146 + 10), *((_QWORD *)v146 + 11));
            }
            else
            {
              v152 = *((_OWORD *)v146 + 5);
              *(_QWORD *)(v149 + 96) = *((_QWORD *)v146 + 12);
              *(_OWORD *)v151 = v152;
            }
            v163 = *(_OWORD *)(v146 + 104);
            *(_BYTE *)(v149 + 120) = v146[120];
            *(_OWORD *)(v149 + 104) = v163;
            v164 = v147 + 152 * v148;
            *(_QWORD *)(v164 + 128) = v164 + 144;
            v165 = v164 + 128;
            *(_QWORD *)(v165 + 8) = 0x100000000;
            if (*((_DWORD *)v146 + 34))
              sub_1C48623F0(v165, (uint64_t)(v146 + 128));
            ++DWORD2(v243);
            goto LABEL_217;
          }
          v112 = v228[1];
          v113 = v80[103];
          v114 = v113 < 0;
          v115 = *((_QWORD *)v80 + 11);
          if (v113 >= 0)
            v116 = v80 + 80;
          else
            v116 = (char *)*((_QWORD *)v80 + 10);
          v117 = v113 & 0x7F;
LABEL_151:
          if (v114)
            v118 = v115;
          else
            v118 = v117;
          v119 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v112 + 2056))(v112, v116, v118);
          LODWORD(v239) = 1;
          v240 = 0;
          v241 = (v119 << 16) | 0xEu;
          llvm::MachineInstr::addOperand(v236, v235, (const llvm::MachineOperand *)&v239);
          v120 = *(_QWORD *)(v220 + 24);
          if (!v120)
            goto LABEL_284;
          v121 = *(_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v120 + 48))(v120, *((_QWORD *)v80 + 14));
LABEL_156:
          v240 = 0;
          LODWORD(v239) = 0;
          HIDWORD(v239) = v121;
          v241 = 0;
          v242 = 0;
          llvm::MachineInstr::addOperand(v236, v235, (const llvm::MachineOperand *)&v239);
        }
      }
      else
      {
        if (v80[103] < 0)
        {
          v129 = *v81;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)*v81 + 60) & 0x400) != 0)
          {
LABEL_199:
            v153 = atoi(v129);
            v154 = *((_QWORD *)v236 + 4);
            v155 = v225;
            for (i = v153; i; --i)
              v155 += ((unsigned __int16)*(_DWORD *)(v154 + 32 * v155 + 16) >> 3) + 1;
            v11 = v226;
            if ((*(_QWORD *)(v154 + 32 * v155 + 16) & 6) != 2)
              goto LABEL_281;
            v157 = *(_QWORD *)(v220 + 24);
            if (!v157)
              goto LABEL_284;
            v158 = v155 + 1;
            v159 = *(_DWORD *)(v154 + 32 * v158 + 4);
            v160 = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v157 + 48))(v157, *((_QWORD *)v80 + 14));
            v161 = v160;
            if (v159 < 0)
            {
              v166 = *(_QWORD *)(*(_QWORD *)(v218 + 24) + 16 * (v159 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
              v162 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v218, "", 0);
              *(_QWORD *)(*(_QWORD *)(v218 + 24) + 16 * (v162 & 0x7FFFFFFF)) = v166;
              v167 = *(_QWORD *)(v218 + 8);
              if (v167)
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v167 + 24))(v167, v162);
              v11 = v226;
              if (!sub_1C550E55C(v162, *v161, v222))
                goto LABEL_281;
            }
            else
            {
              v162 = *v160;
            }
            LODWORD(v239) = 1;
            v240 = 0;
            v241 = (v153 << 16) | 0x80000009;
            llvm::MachineInstr::addOperand(v236, v235, (const llvm::MachineOperand *)&v239);
            v240 = 0;
            LODWORD(v239) = 0;
            HIDWORD(v239) = v162;
            v241 = 0;
            v242 = 0;
            llvm::MachineInstr::addOperand(v236, v235, (const llvm::MachineOperand *)&v239);
            v168 = *((_DWORD *)v236 + 10);
            v169 = *((_QWORD *)v236 + 4);
            v170 = (unsigned int *)(v169 + 32 * (v168 - 1));
            v171 = *v170 & 0xFF0FFFFF | ((((((_DWORD)v158 << 20) + 0x100000) >> 20) & 0xF) << 20);
            if (v158 > 0xE)
              v171 = *v170 | 0xF00000;
            *v170 = v171;
            if (v168 >= 0xF)
              v168 = 15;
            *(_DWORD *)(v169 + 32 * v158) = *(_DWORD *)(v169 + 32 * v158) & 0xFF0FFFFF | (v168 << 20);
            goto LABEL_217;
          }
        }
        else
        {
          v129 = v80 + 80;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)v81 + 60) & 0x400) != 0)
            goto LABEL_199;
        }
        v117 = v80[103];
        v130 = *((_DWORD *)v80 + 26);
        if (v130 == 2)
        {
          v11 = v226;
          if (!v80[13])
            goto LABEL_281;
          v112 = v228[1];
          v114 = (v117 & 0x80u) != 0;
          v115 = *((_QWORD *)v80 + 11);
          if ((v117 & 0x80u) == 0)
            v116 = v80 + 80;
          else
            v116 = (char *)*((_QWORD *)v80 + 10);
          goto LABEL_151;
        }
        v11 = v226;
        if (v130 != 4)
        {
          if (v130 != 5)
          {
            if (v80[13])
              goto LABEL_281;
            v172 = *((_DWORD *)v80 + 34);
            if (!v172)
              goto LABEL_281;
            v173 = *(_QWORD *)(v220 + 24);
            if (!v173)
              goto LABEL_284;
            v174 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v173 + 48))(v173, *((_QWORD *)v80 + 14));
            if (v172 > 1)
              goto LABEL_281;
            v175 = (unsigned int *)v174;
            v176 = **((_DWORD **)v80 + 16);
            v177 = v176 < 0
                 ? (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 24) + 16 * (v176 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 24) << 16)
                 + 65545
                 : 9;
            LODWORD(v239) = 1;
            v240 = 0;
            v241 = v177;
            llvm::MachineInstr::addOperand(v236, v235, (const llvm::MachineOperand *)&v239);
            if (!sub_1C550E55C(**((_DWORD **)v80 + 16), *v175, v222))
              goto LABEL_281;
            v121 = **((_DWORD **)v80 + 16);
            goto LABEL_156;
          }
          if (v80[13])
            goto LABEL_281;
        }
        v233 = 0;
        v234 = 0;
        v232 = 0;
        if ((v117 & 0x80u) == 0)
          v131 = v80 + 80;
        else
          v131 = (char *)*((_QWORD *)v80 + 10);
        if ((v117 & 0x80u) == 0)
          v132 = v117;
        else
          v132 = *((_QWORD *)v80 + 11);
        if (!(*(unsigned int (**)(_QWORD *, _QWORD, char *, uint64_t, void **, _QWORD *))(*v228 + 8))(v228, *((_QWORD *)v80 + 14), v131, v132, &v232, v222))
        {
          if (v232)
          {
            v233 = (const llvm::MachineOperand *)v232;
            operator delete(v232);
          }
          goto LABEL_281;
        }
        LODWORD(v239) = 1;
        v240 = 0;
        v241 = ((unint64_t)(v233 - (const llvm::MachineOperand *)v232) >> 2) & 0xFFFFFFF8 | 5;
        llvm::MachineInstr::addOperand(v236, v235, (const llvm::MachineOperand *)&v239);
        v133 = (const llvm::MachineOperand *)v232;
        if (v233 != v232)
        {
          v134 = 32 * ((v233 - (const llvm::MachineOperand *)v232) >> 5);
          do
          {
            llvm::MachineInstr::addOperand(v236, v235, v133);
            v133 = (const llvm::MachineOperand *)((char *)v133 + 32);
            v134 -= 32;
          }
          while (v134);
          v133 = (const llvm::MachineOperand *)v232;
        }
        if (v133)
        {
          v233 = v133;
          operator delete(v133);
        }
      }
LABEL_217:
      v80 += 152;
    }
    while (v80 != v230);
  }
  if (*(_QWORD *)(v221 + 48) || (*(_BYTE *)(v221 + 23) & 0x20) != 0)
  {
    MetadataImpl = llvm::Instruction::getMetadataImpl((uint64_t ***)v221, "srcloc", 6uLL);
    if (MetadataImpl)
    {
      LODWORD(v239) = 14;
      v240 = 0;
      v241 = MetadataImpl;
      llvm::MachineInstr::addOperand(v236, v235, (const llvm::MachineOperand *)&v239);
    }
  }
  v179 = v236;
  v180 = (unint64_t *)v222[6];
  v181 = *(_QWORD *)(v222[5] + 40);
  *((_QWORD *)v236 + 3) = v181;
  v182 = *(_QWORD *)(v181 + 32);
  v183 = *((unsigned int *)v179 + 10);
  v184 = v216;
  if ((_DWORD)v183)
  {
    v207 = *((_QWORD *)v179 + 4);
    v208 = *(_QWORD *)(v182 + 40);
    v209 = 32 * v183;
    do
    {
      if (!*(_BYTE *)v207)
      {
        v210 = *(unsigned int *)(v207 + 4);
        if ((int)v210 >= 0)
          v211 = (uint64_t *)(*(_QWORD *)(v208 + 272) + 8 * v210);
        else
          v211 = (uint64_t *)(*(_QWORD *)(v208 + 24) + 16 * (v210 & 0x7FFFFFFF) + 8);
        v212 = *v211;
        if (*v211)
        {
          v213 = *(_QWORD *)(v212 + 16);
          *(_QWORD *)(v212 + 16) = v207;
          *(_QWORD *)(v207 + 16) = v213;
          if ((*(_BYTE *)(v207 + 3) & 1) != 0)
          {
            *(_QWORD *)(v207 + 24) = v212;
          }
          else
          {
            *(_QWORD *)(v207 + 24) = 0;
            v211 = (uint64_t *)(v213 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v207 + 16) = v207;
          *(_QWORD *)(v207 + 24) = 0;
        }
        *v211 = v207;
      }
      v207 += 32;
      v209 -= 32;
    }
    while (v209);
  }
  v185 = *(_QWORD *)(v182 + 728);
  if (v185)
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v185 + 24))(v185, v179);
  v186 = *v180 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v179 = v186 | *(_QWORD *)v179 & 7;
  *((_QWORD *)v179 + 1) = v180;
  *(_QWORD *)(v186 + 8) = v179;
  *v180 = *v180 & 7 | (unint64_t)v179;
  v187 = v222[7];
  if (v187)
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v187 + 24))(v187, v179);
  v188 = *(_QWORD *)(v220 + 24);
  if (!v188)
LABEL_284:
    sub_1C485C2F0();
  v189 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v188 + 48))(v188, v221);
  if (v190 == DWORD2(v243))
  {
    v32 = 1;
    if (!(_DWORD)v190)
      goto LABEL_282;
    v191 = (_DWORD *)v189;
    v192 = 0;
    v193 = 152 * v190;
    while (1)
    {
      v194 = v243 + v192;
      v195 = *(_DWORD *)(v243 + v192 + 136);
      if (v195)
      {
        v196 = *(_DWORD *)(v194 + 104);
        if (v196 >= 2)
        {
          if (v196 - 4 < 3)
            break;
        }
        else
        {
          if (v195 > 1)
            break;
          v197 = **(_DWORD **)(v194 + 128);
          RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v184, v197, v218);
          v199 = RegSizeInBits;
          if ((*v191 & 0x80000000) == 0 || (v200 = *v191 & 0x7FFFFFFF, v200 >= *(_DWORD *)(v218 + 432)))
          {
            v231 = 0;
LABEL_256:
            v203 = RegSizeInBits;
LABEL_257:
            v206 = sub_1C4825F50(&v231);
            if ((_DWORD)v205 == 1)
            if (v206 != v203)
              break;
            LODWORD(v232) = *v191;
            LODWORD(v233) = 1;
            LODWORD(v239) = v197;
            LODWORD(v241) = 0;
            (*(void (**)(_QWORD *, uint64_t, void **, uint64_t, void ***, uint64_t, _QWORD))(*v222 + 32))(v222, 19, &v232, 1, &v239, 1, 0);
            goto LABEL_262;
          }
          v231 = *(_QWORD *)(*(_QWORD *)(v218 + 424) + 8 * v200);
          if ((v231 & 1) == 0)
            goto LABEL_256;
          v202 = sub_1C4825F50(&v231);
          if ((_DWORD)v201 == 1)
          v203 = v199;
          if (v202 >= v199)
          {
            v184 = v216;
            goto LABEL_257;
          }
          GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v218, (8 * v199) | 1, "", 0);
          LODWORD(v232) = GenericVirtualRegister;
          LODWORD(v233) = 1;
          LODWORD(v239) = v197;
          LODWORD(v241) = 0;
          (*(void (**)(_QWORD *, uint64_t, void **, uint64_t, void ***, uint64_t, _QWORD))(*v222 + 32))(v222, 19, &v232, 1, &v239, 1, 0);
          LODWORD(v232) = *v191;
          LODWORD(v233) = 1;
          LODWORD(v239) = GenericVirtualRegister;
          LODWORD(v241) = 0;
          (*(void (**)(_QWORD *, uint64_t, void **, uint64_t, void ***, uint64_t, _QWORD))(*v222 + 32))(v222, 119, &v232, 1, &v239, 1, 0);
          v184 = v216;
        }
      }
LABEL_262:
      v192 += 152;
      ++v191;
      if (v193 == v192)
      {
        v32 = 1;
        goto LABEL_282;
      }
    }
  }
LABEL_281:
  v32 = 0;
LABEL_282:
  sub_1C550E6A4((char **)&v243);
LABEL_283:
  *(_QWORD *)&v243 = &v237;
  sub_1C509B1A8((void ***)&v243);
  sub_1C550E6A4(&v257);
  return v32;
}

uint64_t sub_1C550E55C(unsigned int a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int RegSizeInBits;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  _DWORD v15[4];
  int v16;
  uint64_t v17;
  int v18;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3[1] + 16) + 176))(*(_QWORD *)(a3[1] + 16));
  if ((a2 & 0x80000000) == 0)
    return 0;
  v7 = a3[3];
  if ((a2 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v7 + 432))
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * (a2 & 0x7FFFFFFF));
  if ((v8 & 0xFFFFFFFFFFFFFFF9) == 0)
    return 0;
  v9 = v6;
  RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v6, a2, a3[3]);
  v11 = llvm::TargetRegisterInfo::getRegSizeInBits(v9, a1, v7);
  if (v11 < RegSizeInBits)
    return 0;
  if (v11 <= RegSizeInBits)
  {
LABEL_10:
    v12 = 1;
    LODWORD(v17) = a1;
    v18 = 1;
    v15[0] = a2;
    v16 = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*a3 + 32))(a3, 19, &v17, 1, v15, 1, 0);
    return v12;
  }
  if ((v8 & 1) != 0)
  {
    v17 = (8 * v11) | 1;
    v18 = 0;
    v15[0] = a2;
    v16 = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*a3 + 32))(a3, 118, &v17, 1, v15, 1, 0);
    a2 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 4);
    goto LABEL_10;
  }
  return 0;
}

char **sub_1C550E6A4(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void **v8;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 0;
    v5 = 152 * v3;
    do
    {
      v6 = *(char **)&v2[v5 - 24];
      if (&v2[v5 - 8] != v6)
        free(v6);
      if (v2[v5 - 49] < 0)
        operator delete(*(void **)&v2[v5 - 72]);
      v8 = (void **)&v2[v5 - 104];
      sub_1C50107D8(&v8);
      v8 = (void **)&v2[v5 - 136];
      sub_1C4765410(&v8);
      v2 -= 152;
      v4 += 152;
    }
    while (v5 != v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char *sub_1C550E76C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  unint64_t v27;
  void **v28;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v6 = v3 + 1;
    v7 = *(_QWORD *)a1 + 152 * v3;
    v9 = *(_QWORD *)a1 <= a2 && v7 > a2;
    if (v9)
      v10 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2 - *(_QWORD *)a1) >> 3);
    else
      v10 = -1;
    v27 = 0;
    v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v6, 152, &v27);
    v12 = *(_BYTE **)a1;
    v13 = *(_DWORD *)(a1 + 8);
    if (v13)
    {
      v14 = 0;
      v15 = &v12[152 * v13];
      do
      {
        v16 = &v12[v14];
        v17 = &v11[v14];
        v18 = *(_QWORD *)&v12[v14];
        *(_QWORD *)(v17 + 6) = *(_QWORD *)&v12[v14 + 6];
        *(_QWORD *)v17 = v18;
        *((_QWORD *)v17 + 3) = 0;
        *((_QWORD *)v17 + 4) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *((_OWORD *)v17 + 1) = *(_OWORD *)&v12[v14 + 16];
        *((_QWORD *)v17 + 4) = *(_QWORD *)&v12[v14 + 32];
        v16[3] = 0;
        v16[4] = 0;
        v16[2] = 0;
        v17[40] = v12[v14 + 40];
        *((_QWORD *)v17 + 7) = 0;
        *((_QWORD *)v17 + 8) = 0;
        *((_QWORD *)v17 + 6) = 0;
        *((_OWORD *)v17 + 3) = *(_OWORD *)&v12[v14 + 48];
        *((_QWORD *)v17 + 8) = *(_QWORD *)&v12[v14 + 64];
        v16[7] = 0;
        v16[8] = 0;
        v16[6] = 0;
        *((_DWORD *)v17 + 18) = *(_DWORD *)&v12[v14 + 72];
        v19 = *(_OWORD *)&v12[v14 + 80];
        *((_QWORD *)v17 + 12) = *(_QWORD *)&v12[v14 + 96];
        *((_OWORD *)v17 + 5) = v19;
        v16[11] = 0;
        v16[12] = 0;
        v16[10] = 0;
        v20 = *(_OWORD *)&v12[v14 + 104];
        LOBYTE(v18) = v12[v14 + 120];
        *((_QWORD *)v17 + 16) = &v11[v14 + 144];
        v21 = (uint64_t)&v11[v14 + 128];
        *(_BYTE *)(v21 - 8) = v18;
        *(_OWORD *)(v21 - 24) = v20;
        *(_QWORD *)(v21 + 8) = 0x100000000;
        if (*(_DWORD *)&v12[v14 + 136])
          sub_1C48621E4(v21, (uint64_t)(v16 + 16));
        v14 += 152;
      }
      while (v16 + 19 != v15);
      v12 = *(_BYTE **)a1;
      v22 = *(_DWORD *)(a1 + 8);
      if (v22)
      {
        v23 = 0;
        v24 = 152 * v22;
        do
        {
          v25 = *(char **)&v12[v24 - 24];
          if (&v12[v24 - 8] != v25)
            free(v25);
          if ((char)v12[v24 - 49] < 0)
            operator delete(*(void **)&v12[v24 - 72]);
          v28 = (void **)&v12[v24 - 104];
          sub_1C50107D8(&v28);
          v28 = (void **)&v12[v24 - 136];
          sub_1C4765410(&v28);
          v12 -= 152;
          v23 += 152;
        }
        while (v24 != v23);
        v12 = *(_BYTE **)a1;
      }
    }
    v26 = v27;
    if (v12 != (_BYTE *)(a1 + 16))
      free(v12);
    *(_QWORD *)a1 = v11;
    *(_DWORD *)(a1 + 12) = v26;
    if (v9)
      return &v11[152 * v10];
  }
  return (char *)a2;
}

uint64_t sub_1C550E9B0(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeTargetPassConfigPass((uint64_t)a1);
  sub_1C54EB3A8((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v2);
  llvm::initializeLazyBlockFrequencyInfoPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Select target instructions out of generic instructions";
  *(_QWORD *)(v4 + 8) = 54;
  *(_QWORD *)(v4 + 16) = "instruction-select";
  *(_QWORD *)(v4 + 24) = 18;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F2FD0;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C6270ED0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C550EA5C(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  _WORD *v18;
  const void *size;
  std::string::size_type v20;
  int v21;
  unsigned int v22;
  _DWORD *v23;
  const void *v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  void **v28;
  uint64_t v29;
  char *v30;
  void **v32;
  unsigned int v33;
  void ***v34;
  void **v35;
  void ***v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  void ***v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t i;
  __int16 v79;
  unsigned __int16 *v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  const std::error_category *v86;
  uint64_t v87;
  const void *v88;
  size_t v89;
  void (**v90)(llvm::raw_ostream *__hidden);
  int v91;
  char **v93;
  char *v94;
  uint64_t v95;
  void *v96;
  llvm::Triple *ArchName;
  unint64_t v98;
  int v99;
  unsigned int v100;
  size_t v101;
  llvm::Triple *v102;
  void **p_dst;
  uint64_t v104;
  uint64_t v105;
  int v106;
  size_t v107;
  std::string *v108;
  void **v109;
  uint64_t v110;
  uint64_t v111;
  const std::string::value_type *v112;
  const std::string::value_type *v113;
  char v114;
  const std::string::value_type *v115;
  std::string::size_type v116;
  std::string::size_type v117;
  std::string *v118;
  std::string::size_type v119;
  std::string *v120;
  std::string::size_type v121;
  uint64_t ***v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t ****v127;
  uint64_t ***v128;
  int v129;
  int v130;
  unint64_t *v131;
  size_t v132;
  const void *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  const std::string::value_type *v138;
  std::string::size_type v139;
  std::string *v140;
  std::string::size_type v141;
  uint64_t ***v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  uint64_t ****v148;
  uint64_t ***v149;
  uint64_t ****v150;
  int v151;
  BOOL v152;
  unsigned int v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  std::string::size_type v160;
  void **v161;
  unint64_t v162;
  void **v163;
  uint64_t ****v164;
  std::string::size_type v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  std::string::size_type v171;
  int64_t v172;
  std::string v173;
  std::string v174;
  void **__dst;
  size_t v176;
  int64_t v177;
  _QWORD v178[2];
  int v179;
  uint64_t ***v180[2];
  std::string __p;
  uint64_t v182;
  int v183;
  int v184;
  const char *v185;
  const char *v186;
  uint64_t v187;
  char v188;
  char v189;
  void *v190;
  uint64_t v191;
  void *v192;
  int v193;
  uint64_t v194;
  void *v195;
  void *v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  void *v200;
  int v201;
  char v202;
  int v203;
  uint64_t v204;
  void *v205[2];
  _DWORD v206[14];
  void *v207;
  void *v208;
  uint64_t v209;
  _DWORD v210[16];
  uint64_t v211;
  void *v212[18];
  void *v213[2];
  std::string::size_type v214;
  int v215;
  _WORD v216[32];
  void *v217;
  uint64_t v218;
  _QWORD v219[20];

  v219[17] = *MEMORY[0x1E0C80C00];
  if ((**(_BYTE **)(a2 + 360) & 0x10) != 0)
    return 0;
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::TargetPassConfig::ID);
  v166 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::TargetPassConfig::ID);
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 152))(*(_QWORD *)(a2 + 16));
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 112);
  if (v7 && (*(_BYTE *)(v7 + 17) & 8) != 0)
    v8 = 0;
  else
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 552);
  v167 = *(_DWORD *)(a1 + 264);
  *(_DWORD *)(a1 + 264) = v8;
  v10 = **(void ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &unk_1EF8F7110);
  v12 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &unk_1EF8F7110);
  v13 = sub_1C491CBCC(v12, a2);
  if (*(_DWORD *)(a1 + 264))
  {
    v14 = **(void ****)(a1 + 8);
    do
    {
      v15 = *v14;
      v14 += 2;
    }
    while (v15 != &llvm::ProfileSummaryInfoWrapperPass::ID);
    v16 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
    *(_QWORD *)(a1 + 256) = v16;
    if (*(_QWORD *)(v16 + 8))
    {
      v93 = **(char ****)(a1 + 8);
      do
      {
        v94 = *v93;
        v93 += 2;
      }
      while (v94 != llvm::LazyBlockFrequencyInfoPass::ID);
      v95 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v93 - 1) + 96))(*(v93 - 1), llvm::LazyBlockFrequencyInfoPass::ID);
      *(_QWORD *)(a1 + 248) = sub_1C619C0A4(v95 + 32);
    }
  }
  v205[0] = v206;
  v205[1] = (void *)0x600000000;
  v206[12] = 0;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, void **, _QWORD, _QWORD))(*v6 + 32))(v6, a2, v13, v205, *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 248));
  v180[0] = (uint64_t ***)a2;
  v180[1] = 0;
  v17 = *(_QWORD **)(a2 + 40);
  v178[0] = 0;
  v178[1] = 0;
  v179 = 0;
  sub_1C486F76C((uint64_t)v213, *(_QWORD *)(a2 + 328));
  v211 = 0;
  memset(&v212[1], 0, 136);
  memset(v210, 0, sizeof(v210));
  v207 = &v210[2];
  v208 = &v210[2];
  v209 = 8;
  v212[0] = &v212[2];
  HIDWORD(v212[1]) = 8;
  sub_1C4EB6BDC((uint64_t)v213, (uint64_t)&v207, (uint64_t)&__p);
  if (v212[0] != &v212[2])
    free(v212[0]);
  if (v208 != v207)
    free(v208);
  if (v217 != v219)
    free(v217);
  if (v213[1] != v213[0])
    free(v213[1]);
  v18 = v216;
  v213[0] = v216;
  size = (const void *)__p.__r_.__value_.__l.__size_;
  v168 = a2;
  v169 = a1;
  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
  {
    v213[1] = v216;
    v20 = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    v99 = __p.__r_.__value_.__r.__words[2];
    v18 = malloc_type_malloc(8 * LODWORD(__p.__r_.__value_.__r.__words[2]), 0x4065EBACuLL);
    if (!v18)
    {
      if (v99)
        goto LABEL_337;
      v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v18)
        goto LABEL_337;
    }
    v213[1] = v18;
    size = (const void *)__p.__r_.__value_.__l.__size_;
    v20 = __p.__r_.__value_.__r.__words[0];
  }
  v21 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  LODWORD(v214) = __p.__r_.__value_.__r.__words[2];
  if (size == (const void *)v20)
    v22 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  else
    v22 = __p.__r_.__value_.__r.__words[2];
  if (v22)
  {
    memmove(v18, size, 8 * v22);
    v21 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  }
  HIDWORD(v214) = v21;
  v215 = v182;
  v217 = v219;
  v218 = 0x800000000;
  if (v193)
    sub_1C486F660((uint64_t)&v217, (uint64_t)&v192);
  v23 = &v210[2];
  v207 = &v210[2];
  v24 = v196;
  if (v196 != v195)
  {
    v100 = v197;
    v23 = malloc_type_malloc(8 * v197, 0x4065EBACuLL);
    if (v23 || !v100 && (v23 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v208 = v23;
      v25 = v195;
      v24 = v196;
      goto LABEL_34;
    }
LABEL_337:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v208 = &v210[2];
  v25 = v196;
LABEL_34:
  LODWORD(v209) = v197;
  v26 = v198;
  if (v24 == v25)
    v27 = v198;
  else
    v27 = v197;
  if (v27)
  {
    memmove(v23, v24, 8 * v27);
    v26 = v198;
  }
  HIDWORD(v209) = v26;
  v210[0] = v199;
  v212[0] = &v212[2];
  v212[1] = (void *)0x800000000;
  if (v201)
    sub_1C486F660((uint64_t)v212, (uint64_t)&v200);
  while (1)
  {
    if ((_DWORD)v218 == LODWORD(v212[1]))
    {
      v28 = (void **)v212[0];
      if (!(_DWORD)v218)
      {
LABEL_110:
        v57 = 1;
        v58 = v168;
        goto LABEL_112;
      }
      v29 = 0;
      while (1)
      {
        v30 = (char *)v217 + v29;
        if (*(_QWORD *)((char *)v217 + v29) != *(_QWORD *)((char *)v212[0] + v29)
          || *(_QWORD *)((char *)v217 + v29 + 8) != *(_QWORD *)((char *)v212[0] + v29 + 8))
        {
          break;
        }
        v29 += 16;
        if (v30 + 16 == (char *)v217 + 16 * v218)
          goto LABEL_110;
      }
    }
    __dst = 0;
    v32 = (void **)*((_QWORD *)v217 + 2 * v218 - 2);
    __dst = v32;
    v6[6] = v32;
    if (v179)
    {
      v33 = (v179 - 1) & ((v32 >> 4) ^ (v32 >> 9));
      v34 = (void ***)(v178[0] + 8 * v33);
      v35 = *v34;
      if (v32 == *v34)
        goto LABEL_66;
      v36 = 0;
      v37 = 1;
      while (v35 != (void **)-4096)
      {
        if (v36)
          v38 = 0;
        else
          v38 = v35 == (void **)-8192;
        if (v38)
          v36 = v34;
        v39 = v33 + v37++;
        v33 = v39 & (v179 - 1);
        v34 = (void ***)(v178[0] + 8 * v33);
        v35 = *v34;
        if (v32 == *v34)
          goto LABEL_66;
      }
      v40 = v36 ? v36 : v34;
    }
    else
    {
      v40 = 0;
    }
    v41 = sub_1C4A07FEC((uint64_t)v178, (uint64_t)&__dst, (uint64_t *)&__dst, v40);
    *v41 = __dst;
    v32 = __dst;
LABEL_66:
    v42 = (unint64_t)v32[6] & 0xFFFFFFFFFFFFFFF8;
    if (v32 + 6 != (void **)v42)
      break;
LABEL_107:
    LODWORD(v218) = v218 - 1;
    if ((_DWORD)v218)
      sub_1C486F1F8(v213);
  }
  if (!v42 || (*(_BYTE *)v42 & 4) == 0)
  {
    while ((*(_WORD *)(v42 + 44) & 4) != 0)
      v42 = *(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8;
  }
  v43 = (unint64_t)v32[7];
  while (1)
  {
    v44 = v42;
    v42 = v43;
    if (v44 != v43)
    {
      v42 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
      if (!v42 || (*(_BYTE *)v42 & 4) == 0)
      {
        while ((*(_WORD *)(v42 + 44) & 4) != 0)
          v42 = *(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    if (sub_1C554B164(v44, (uint64_t)v17))
    {
      v45 = v44;
      if ((*(_BYTE *)v44 & 4) == 0)
      {
        v45 = v44;
        if ((*(_WORD *)(v44 + 44) & 8) != 0)
        {
          v45 = v44;
          do
            v45 = *(_QWORD *)(v45 + 8);
          while ((*(_WORD *)(v45 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v44 + 24) + 40, v44, *(_QWORD *)(v45 + 8));
      goto LABEL_98;
    }
    if (**(unsigned __int16 **)(v44 + 16) - 42 <= 2)
    {
      v46 = *(_QWORD *)(v44 + 32);
      v47 = *(unsigned int *)(v46 + 4);
      v48 = *(_DWORD *)(v46 + 36);
      v49 = v17[3];
      v50 = *(_QWORD *)(v49 + 16 * (v47 & 0x7FFFFFFF));
      if ((v50 & 4) == 0)
      {
        v51 = v50 & 0xFFFFFFFFFFFFFFF8;
        if (v51)
          *(_QWORD *)(v49 + 16 * (v48 & 0x7FFFFFFF)) = v51;
      }
      v52 = v44;
      if ((*(_BYTE *)v44 & 4) == 0)
      {
        v52 = v44;
        if ((*(_WORD *)(v44 + 44) & 8) != 0)
        {
          v52 = v44;
          do
            v52 = *(_QWORD *)(v52 + 8);
          while ((*(_WORD *)(v52 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v44 + 24) + 40, v44, *(_QWORD *)(v52 + 8));
      v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v17 + 16) + 176))(*(_QWORD *)(*v17 + 16));
      if ((v47 & 0x80000000) != 0)
        v54 = (uint64_t *)(v17[3] + 16 * (v47 & 0x7FFFFFFF) + 8);
      else
        v54 = (uint64_t *)(v17[34] + 8 * v47);
      v55 = *v54;
      if (*v54)
      {
        do
        {
          v56 = *(_QWORD *)(v55 + 24);
          if (v48 - 1 <= 0x3FFFFFFE)
            llvm::MachineOperand::substPhysReg((unsigned int *)v55, v48, v53);
          else
            llvm::MachineOperand::setReg(v55, v48);
          v55 = v56;
        }
        while (v56);
      }
      goto LABEL_98;
    }
    if (!(*(unsigned int (**)(_QWORD *, uint64_t))(*v6 + 16))(v6, v44))
      break;
LABEL_98:
    if (v44 == v43)
      goto LABEL_107;
  }
  v58 = v168;
  sub_1C554B36C(v168, v166, (uint64_t *****)v180, "gisel-select", (uint64_t)"cannot select", 13, (llvm::MachineInstr *)v44);
  v57 = 0;
  v28 = (void **)v212[0];
LABEL_112:
  if (v28 != &v212[2])
    free(v28);
  if (v208 != v207)
    free(v208);
  if (v217 != v219)
    free(v217);
  if (v213[1] != v213[0])
    free(v213[1]);
  if (v200 != &v202)
    free(v200);
  if (v196 != v195)
    free(v196);
  if (v192 != &v194)
    free(v192);
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    free((void *)__p.__r_.__value_.__l.__size_);
  if (!v57)
  {
    v9 = 0;
    goto LABEL_207;
  }
  v59 = (_QWORD *)(v58 + 320);
  v60 = *(_QWORD **)(v58 + 328);
  if (v60 != (_QWORD *)(v58 + 320))
  {
    while (1)
    {
      v61 = v60[6] & 0xFFFFFFFFFFFFFFF8;
      if (v60 + 6 != (_QWORD *)v61)
      {
        if (v179)
        {
          v73 = (v179 - 1) & ((v60 >> 4) ^ (v60 >> 9));
          v74 = *(_QWORD **)(v178[0] + 8 * v73);
          if (v60 == v74)
          {
LABEL_164:
            if (v73 != v179)
            {
              if (!v61 || (*(_BYTE *)v61 & 4) == 0)
              {
                while ((*(_WORD *)(v61 + 44) & 4) != 0)
                  v61 = *(_QWORD *)v61 & 0xFFFFFFFFFFFFFFF8;
              }
              v62 = v60[7];
              do
              {
                v63 = v61;
                v61 = v62;
                if (v63 != v62)
                {
                  v61 = *(_QWORD *)v63 & 0xFFFFFFFFFFFFFFF8;
                  if (!v61 || (*(_BYTE *)v61 & 4) == 0)
                  {
                    while ((*(_WORD *)(v61 + 44) & 4) != 0)
                      v61 = *(_QWORD *)v61 & 0xFFFFFFFFFFFFFFF8;
                  }
                }
                if (**(_WORD **)(v63 + 16) == 19)
                {
                  v64 = *(_QWORD *)(v63 + 32);
                  v65 = *(_DWORD *)(v64 + 36);
                  if ((v65 & 0x80000000) != 0)
                  {
                    v66 = *(_DWORD *)(v64 + 4);
                    if (v66 < 0)
                    {
                      v67 = v66 & 0x7FFFFFFF;
                      if ((*(_QWORD *)(v17[3] + 16 * (v65 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v17[3] + 16 * v67) & 0xFFFFFFFFFFFFFFF8))
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)(*v17 + 16) + 176))(*(_QWORD *)(*v17 + 16));
                        v68 = *(_QWORD *)(v17[3] + 16 * v67 + 8);
                        if (v68)
                        {
                          do
                          {
                            v69 = *(_QWORD *)(v68 + 24);
                            llvm::MachineOperand::setReg(v68, v65);
                            v68 = v69;
                          }
                          while (v69);
                        }
                        v70 = v63;
                        if ((*(_BYTE *)v63 & 4) == 0)
                        {
                          v70 = v63;
                          if ((*(_WORD *)(v63 + 44) & 8) != 0)
                          {
                            v70 = v63;
                            do
                              v70 = *(_QWORD *)(v70 + 8);
                            while ((*(_WORD *)(v70 + 44) & 8) != 0);
                          }
                        }
                        sub_1C487FE80(*(_QWORD *)(v63 + 24) + 40, v63, *(_QWORD *)(v70 + 8));
                      }
                    }
                  }
                }
              }
              while (v63 != v62);
              goto LABEL_166;
            }
          }
          else
          {
            v71 = 1;
            while (v74 != (_QWORD *)-4096)
            {
              v72 = v73 + v71++;
              v73 = v72 & (v179 - 1);
              v74 = *(_QWORD **)(v178[0] + 8 * v73);
              if (v60 == v74)
                goto LABEL_164;
            }
          }
        }
        sub_1C487FE80((uint64_t)(v60 + 5), v60[7], (uint64_t)(v60 + 6));
      }
LABEL_166:
      v60 = (_QWORD *)v60[1];
      if (v60 == v59)
      {
        v75 = *(_QWORD **)(v58 + 328);
        if (v75 == v59)
          break;
        v76 = *(_QWORD *)(v58 + 56);
        v77 = *(unsigned __int8 *)(v76 + 62);
        while (1)
        {
          if (v77 && *(_BYTE *)(v58 + 354))
            goto LABEL_195;
          for (i = v75[7]; (_QWORD *)i != v75 + 6; i = *(_QWORD *)(i + 8))
          {
            v79 = *(_WORD *)(i + 44);
            v80 = *(unsigned __int16 **)(i + 16);
            v81 = *((_QWORD *)v80 + 1);
            if ((v79 & 0xC) != 0 && (v79 & 4) == 0)
            {
              v83 = i;
              if ((v81 & 0x80) != 0)
              {
LABEL_183:
                if ((v81 & 0x20) == 0)
                {
                  v84 = i;
                  while ((*(_WORD *)(v84 + 44) & 8) != 0)
                  {
                    v84 = *(_QWORD *)(v84 + 8);
                    if ((*(_BYTE *)(*(_QWORD *)(v84 + 16) + 8) & 0x20) != 0)
                      goto LABEL_187;
                  }
                  goto LABEL_178;
                }
              }
              else
              {
                while ((*(_WORD *)(v83 + 44) & 8) != 0)
                {
                  v83 = *(_QWORD *)(v83 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v83 + 16) + 8) & 0x80) != 0)
                    goto LABEL_183;
                }
              }
            }
            else if ((*((_QWORD *)v80 + 1) & 0xA0) == 0x80)
            {
              goto LABEL_178;
            }
LABEL_187:
            if (*v80 - 1 > 1)
              goto LABEL_188;
            if ((*(_BYTE *)(*(_QWORD *)(i + 32) + 48) & 2) == 0)
            {
LABEL_179:
              *(_BYTE *)(v58 + 354) = 1;
              goto LABEL_188;
            }
LABEL_178:
            v77 = 1;
            *(_BYTE *)(v76 + 62) = 1;
            if (*v80 - 1 <= 1)
              goto LABEL_179;
LABEL_188:
            if ((v79 & 8) != 0 && (*(_QWORD *)i & 4) == 0)
            {
              do
                i = *(_QWORD *)(i + 8);
              while ((*(_WORD *)(i + 44) & 8) != 0);
            }
          }
          v75 = (_QWORD *)v75[1];
          if (v75 == v59)
            goto LABEL_195;
        }
      }
    }
  }
LABEL_195:
  if (!byte_1ED805B18)
    goto LABEL_196;
  v207 = 0;
  HIBYTE(v209) = 0;
  v210[0] = 7777;
  v96 = (void *)(*(_QWORD *)(*(_QWORD *)v58 + 40) + 216);
  v216[0] = 260;
  v213[0] = v96;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v213);
  ArchName = llvm::Triple::getArchName((llvm::Triple *)&__p);
  if (!ArchName)
  {
    __dst = 0;
    v176 = 0;
    v177 = 0;
    goto LABEL_230;
  }
  v101 = v98;
  if (v98 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_331;
  v102 = ArchName;
  if (v98 >= 0x17)
  {
    v104 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v98 | 7) != 0x17)
      v104 = v98 | 7;
    v105 = v104 + 1;
    p_dst = (void **)operator new(v104 + 1);
    v176 = v101;
    v177 = v105 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v177) = v98;
    p_dst = (void **)&__dst;
    if (!v98)
      goto LABEL_229;
  }
  memmove(p_dst, v102, v101);
LABEL_229:
  *((_BYTE *)p_dst + v101) = 0;
LABEL_230:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v106 = SHIBYTE(v177);
  if (v177 >= 0)
    v107 = HIBYTE(v177) & 0x7F;
  else
    v107 = v176;
  sub_1C484371C((uint64_t)&v173, v107 + 1);
  if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v108 = &v173;
  else
    v108 = (std::string *)v173.__r_.__value_.__r.__words[0];
  if (v107)
  {
    if (v106 >= 0)
      v109 = (void **)&__dst;
    else
      v109 = __dst;
    memmove(v108, v109, v107);
  }
  *(_WORD *)((char *)&v108->__r_.__value_.__l.__data_ + v107) = 32;
  v110 = *(_QWORD *)(*(_QWORD *)v58 + 40);
  v113 = *(const std::string::value_type **)(v110 + 192);
  v111 = v110 + 192;
  v112 = v113;
  v114 = *(_BYTE *)(v111 + 23);
  if (v114 >= 0)
    v115 = (const std::string::value_type *)v111;
  else
    v115 = v112;
  v116 = *(_QWORD *)(v111 + 8);
  if (v114 >= 0)
    v117 = v114 & 0x7F;
  else
    v117 = v116;
  v118 = std::string::append(&v173, v115, v117);
  v119 = v118->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v174.__r_.__value_.__l.__data_ = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
  v174.__r_.__value_.__r.__words[2] = v119;
  v118->__r_.__value_.__l.__size_ = 0;
  v118->__r_.__value_.__r.__words[2] = 0;
  v118->__r_.__value_.__r.__words[0] = 0;
  v120 = std::string::append(&v174, " ");
  v121 = v120->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v121;
  v120->__r_.__value_.__l.__size_ = 0;
  v120->__r_.__value_.__r.__words[2] = 0;
  v120->__r_.__value_.__r.__words[0] = 0;
  v122 = *(uint64_t ****)v58;
  if ((*(_BYTE *)(*(_QWORD *)v58 + 23) & 0x10) == 0)
  {
    v132 = 0;
    HIBYTE(v172) = 0;
    v135 = &v170;
    goto LABEL_265;
  }
  v123 = ***v122;
  v124 = *(_QWORD *)(v123 + 152);
  v125 = *(unsigned int *)(v123 + 168);
  if (!(_DWORD)v125)
    goto LABEL_256;
  LODWORD(v126) = (v125 - 1) & ((v122 >> 4) ^ (v122 >> 9));
  v127 = (uint64_t ****)(v124 + 16 * v126);
  v128 = *v127;
  if (*v127 != v122)
  {
    v129 = 1;
    while (v128 != (uint64_t ***)-4096)
    {
      v130 = v126 + v129++;
      v126 = v130 & (v125 - 1);
      v128 = *(uint64_t ****)(v124 + 16 * v126);
      if (v128 == v122)
      {
        v127 = (uint64_t ****)(v124 + 16 * v126);
        goto LABEL_257;
      }
    }
LABEL_256:
    v127 = (uint64_t ****)(v124 + 16 * v125);
  }
LABEL_257:
  v131 = (unint64_t *)v127[1];
  v134 = *v131;
  v133 = v131 + 2;
  v132 = v134;
  if (v134 > 0x7FFFFFFFFFFFFFF7)
LABEL_331:
    abort();
  if (v132 >= 0x17)
  {
    v136 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v132 | 7) != 0x17)
      v136 = v132 | 7;
    v137 = v136 + 1;
    v135 = operator new(v136 + 1);
    v171 = v132;
    v172 = v137 | 0x8000000000000000;
    v170 = v135;
    goto LABEL_264;
  }
  HIBYTE(v172) = v132;
  v135 = &v170;
  if (v132)
LABEL_264:
    memmove(v135, v133, v132);
LABEL_265:
  *((_BYTE *)v135 + v132) = 0;
  if (v172 >= 0)
    v138 = (const std::string::value_type *)&v170;
  else
    v138 = (const std::string::value_type *)v170;
  if (v172 >= 0)
    v139 = HIBYTE(v172) & 0x7F;
  else
    v139 = v171;
  v140 = std::string::append(&__p, v138, v139);
  v141 = v140->__r_.__value_.__r.__words[2];
  *(_OWORD *)v213 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
  v214 = v141;
  v140->__r_.__value_.__l.__size_ = 0;
  v140->__r_.__value_.__r.__words[2] = 0;
  v140->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v172) < 0)
    operator delete(v170);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if (!llvm::RemoteBisectClient::shouldPerformBisectAction((llvm::RemoteBisectClient *)&v207, (uint64_t)v213))
  {
    v142 = *(uint64_t ****)v58;
    if ((*(_BYTE *)(*(_QWORD *)v58 + 23) & 0x20) == 0)
      goto LABEL_302;
    v143 = ***v142;
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v58;
    v144 = *(_DWORD *)(v143 + 2496);
    if (v144)
    {
      v145 = *(_QWORD *)(v143 + 2480);
      v146 = v144 - 1;
      v147 = v146 & ((v142 >> 4) ^ (v142 >> 9));
      v148 = (uint64_t ****)(v145 + 40 * v147);
      v149 = *v148;
      if (*v148 == v142)
        goto LABEL_297;
      v150 = 0;
      v151 = 1;
      while (v149 != (uint64_t ***)-4096)
      {
        if (v150)
          v152 = 0;
        else
          v152 = v149 == (uint64_t ***)-8192;
        if (v152)
          v150 = v148;
        v153 = v147 + v151++;
        v147 = v153 & v146;
        v148 = (uint64_t ****)(v145 + 40 * v147);
        v149 = *v148;
        if (*v148 == v142)
          goto LABEL_297;
      }
      if (v150)
        v164 = v150;
      else
        v164 = v148;
    }
    else
    {
      v164 = 0;
    }
    v148 = (uint64_t ****)sub_1C541AB24(v143 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v164);
    v165 = __p.__r_.__value_.__r.__words[0];
    v148[3] = 0;
    v148[4] = 0;
    *v148 = (uint64_t ***)v165;
    v148[1] = (uint64_t ***)(v148 + 3);
    v148[2] = (uint64_t ***)0x100000000;
LABEL_297:
    v154 = *((unsigned int *)v148 + 4);
    if ((_DWORD)v154)
    {
      v155 = v148[1] + 1;
      v156 = 16 * v154;
      LODWORD(v157) = 0;
      while (*((_DWORD *)v155 - 2))
      {
        v158 = 0;
        v155 += 2;
        v156 -= 16;
        if (!v156)
          goto LABEL_304;
      }
      v157 = *v155;
      if (*v155)
      {
        v158 = *v155;
        if (*(_BYTE *)v157 != 15)
          v158 = *(_QWORD *)(v157 - 8 * *(unsigned int *)(v157 + 8));
        LODWORD(v157) = *(_DWORD *)(v157 + 28);
        goto LABEL_304;
      }
LABEL_303:
      v158 = 0;
LABEL_304:
      v159 = *(_QWORD *)(v58 + 328);
      v160 = **(_QWORD **)(v159 + 32);
      LODWORD(__p.__r_.__value_.__r.__words[1]) = 16;
      __p.__r_.__value_.__s.__data_[12] = 2;
      __p.__r_.__value_.__r.__words[2] = v160;
      v182 = v158;
      v183 = v157;
      v184 = 0;
      v185 = "gisel-bisect";
      v186 = "GISelFailure";
      v187 = 12;
      v188 = 0;
      v189 = 0;
      v190 = &v192;
      v191 = 0x400000000;
      v202 = 0;
      v203 = -1;
      v204 = v159;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E8141F00;
      v174.__r_.__value_.__r.__words[0] = (std::string::size_type)"bisection specified fall back";
      v174.__r_.__value_.__l.__size_ = 29;
      sub_1C53B17B4((uint64_t)&v190, (const void **)&v174.__r_.__value_.__l.__data_);
      **(_QWORD **)(v58 + 360) |= 0x10uLL;
      sub_1C554B250(0, (llvm::Value **)v58, v166, v180, (llvm::DiagnosticInfoOptimizationBase *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E790;
      v161 = (void **)v190;
      if ((_DWORD)v191)
      {
        v162 = (unint64_t)v191 << 6;
        do
        {
          v163 = (void **)((char *)v161 + v162);
          if (*((char *)v161 + v162 - 17) < 0)
            operator delete(*(v163 - 5));
          if (*((char *)v163 - 41) < 0)
            operator delete(*(v163 - 8));
          v162 -= 64;
        }
        while (v162);
        v161 = (void **)v190;
      }
      if (v161 != &v192)
        free(v161);
      v91 = v167;
      if (SHIBYTE(v214) < 0)
        operator delete(v213[0]);
      if (SHIBYTE(v177) < 0)
        operator delete(__dst);
      if (SHIBYTE(v209) < 0)
        operator delete(v207);
      v9 = 0;
      goto LABEL_208;
    }
LABEL_302:
    LODWORD(v157) = 0;
    goto LABEL_303;
  }
  if (SHIBYTE(v214) < 0)
    operator delete(v213[0]);
  if (SHIBYTE(v177) < 0)
    operator delete(__dst);
  if (SHIBYTE(v209) < 0)
    operator delete(v207);
LABEL_196:
  v85 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v58 + 16) + 120))(*(_QWORD *)(v58 + 16));
  (*(void (**)(_QWORD *, uint64_t))(*v85 + 1480))(v85, v58);
  if (byte_1ED805A97 >= 0)
    v86 = (const std::error_category *)(byte_1ED805A97 & 0x7F);
  else
    v86 = *(const std::error_category **)algn_1ED805A88;
  v87 = *(_QWORD *)(v85[1] + 8);
  v88 = *(const void **)(v87 + 32);
  if (v88)
    v89 = strlen(*(const char **)(v87 + 32));
  else
    v89 = 0;
  if (byte_1ED805A97 >= 0)
    v90 = (void (**)(llvm::raw_ostream *__hidden))&qword_1ED805A80;
  else
    v90 = (void (**)(llvm::raw_ostream *__hidden))qword_1ED805A80;
  llvm::CodeGenCoverage::emit((uint64_t)v205, v90, v86, v88, v89);
  *((_DWORD *)v17 + 108) = 0;
  v9 = 1;
LABEL_207:
  v91 = v167;
LABEL_208:
  MEMORY[0x1CAA32FB4](v178[0], 8);
  if (v205[0] != v206)
    free(v205[0]);
  *(_DWORD *)(v169 + 264) = v91;
  return v9;
}

const char *sub_1C550FC70()
{
  return "InstructionSelect";
}

void sub_1C550FC80(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 0x61uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C550FDB4(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 0x80uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t sub_1C550FEE4()
{
  char v1;
  _BYTE *v2;
  __int128 v3;

  qword_1ED805A80 = 0;
  *(_QWORD *)algn_1ED805A88 = 0;
  unk_1ED805A90 = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE44D0], &qword_1ED805A80, &dword_1C475E000);
  *(_QWORD *)&v3 = "Enable remote bisection in GlobalISel after isel";
  *((_QWORD *)&v3 + 1) = 48;
  v1 = 0;
  v2 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED805A98, "gisel-bisect-selection", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED805A98, &dword_1C475E000);
}

uint64_t sub_1C550FF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v6;
  void (**v7)(_QWORD *);
  _QWORD *v8;
  void (**v9)(_QWORD *);
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  char v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a2)
    return 0;
  result = *(unsigned int *)(a2 + 4);
  if (!(_DWORD)result)
    return result;
  v17[0] = &off_1E816EFF0;
  v17[1] = sub_1C554C7E0;
  v18 = v17;
  v15[0] = &off_1E816F038;
  v15[1] = sub_1C554C7F8;
  v16 = v15;
  sub_1C554C3AC(result, a4, (uint64_t)v17, (uint64_t)v15, 1, 0, &v12);
  v6 = v16;
  if (v16 == v15)
  {
    v7 = (void (**)(_QWORD *))(v15[0] + 32);
    v6 = v15;
LABEL_5:
    (*v7)(v6);
    goto LABEL_6;
  }
  if (v16)
  {
    v7 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_5;
  }
LABEL_6:
  v8 = v18;
  if (v18 == v17)
  {
    v9 = (void (**)(_QWORD *))(v17[0] + 32);
    v8 = v17;
LABEL_8:
    (*v9)(v8);
    goto LABEL_9;
  }
  if (v18)
  {
    v9 = (void (**)(_QWORD *))(*v18 + 40);
    goto LABEL_8;
  }
LABEL_9:
  if (!v14)
    return 0;
  if (v13 > 0x40)
  {
    v11 = *v12;
    MEMORY[0x1CAA32F9C]();
    v10 = v11;
  }
  else
  {
    v10 = (uint64_t)((_QWORD)v12 << -(uint64_t)v13) >> -(uint64_t)v13;
  }
  return v10 == a3;
}

BOOL sub_1C55100F8(int a1, llvm::MachineInstr *this, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _BOOL8 result;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  llvm::MachineInstr *v17;
  llvm::MachineInstr *v18;

  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(a3 + 24);
  if (v3 == v4 && *((_QWORD *)this + 1) == a3)
    return 1;
  v7 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v8 = *v7 - 1;
  if (v8 > 1 || (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 0x20) == 0)
  {
    v9 = *((_QWORD *)v7 + 1);
    if ((*((_WORD *)this + 22) & 0xC) == 0 || (*((_WORD *)this + 22) & 4) != 0)
    {
      if (v3 != v4 && (v9 & 0x1000000000) != 0)
        return 0;
      goto LABEL_12;
    }
    if ((v9 & 0x1000000000) == 0)
    {
      v15 = this;
      while ((*((_WORD *)v15 + 22) & 8) != 0)
      {
        v15 = (llvm::MachineInstr *)*((_QWORD *)v15 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v15 + 2) + 12) & 0x10) != 0)
          goto LABEL_26;
      }
      goto LABEL_12;
    }
  }
LABEL_26:
  if (v3 != v4)
    return 0;
LABEL_12:
  if (v8 <= 1 && (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 8) != 0)
    return 0;
  v11 = *((unsigned __int16 *)this + 22);
  v12 = (v11 >> 2) & 1;
  if ((v11 & 0xC) == 0)
    LOBYTE(v12) = 1;
  v13 = *((_QWORD *)v7 + 1);
  if ((v12 & 1) != 0)
  {
    if ((v13 & 0x80000) != 0)
      return 0;
  }
  else
  {
    if ((v13 & 0x80000) != 0)
      return 0;
    v16 = this;
    result = 0;
    while ((*((_WORD *)v16 + 22) & 8) != 0)
    {
      v16 = (llvm::MachineInstr *)*((_QWORD *)v16 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v16 + 2) + 10) & 8) != 0)
        return result;
    }
  }
  if (v8 <= 1 && (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 0x10) != 0)
    return 0;
  if ((v12 & 1) == 0)
  {
    if ((v13 & 0x100000) != 0)
      return 0;
    v17 = this;
    result = 0;
    while ((*((_WORD *)v17 + 22) & 8) != 0)
    {
      v17 = (llvm::MachineInstr *)*((_QWORD *)v17 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v17 + 2) + 10) & 0x10) != 0)
        return result;
    }
    if ((v13 & 0x200000) == 0)
    {
      v18 = this;
      while ((*((_WORD *)v18 + 22) & 8) != 0)
      {
        v18 = (llvm::MachineInstr *)*((_QWORD *)v18 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v18 + 2) + 10) & 0x20) != 0)
          goto LABEL_51;
      }
      goto LABEL_21;
    }
LABEL_51:
    if ((v11 & 0x4000) == 0)
      return 0;
    goto LABEL_21;
  }
  if ((v13 & 0x100000) != 0)
    return 0;
  if ((v13 & 0x200000) != 0)
    goto LABEL_51;
LABEL_21:
  if (llvm::MachineInstr::hasUnmodeledSideEffects(this))
    return 0;
  return llvm::MachineInstr::getNumExplicitOperands((uint64_t)this) == *((_DWORD *)this + 10);
}

void sub_1C55102A4(int a1@<W0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  _BYTE *v13;
  char *v14;
  void *v15;
  int v16;
  _BYTE *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE v24[32];
  int v25;
  void *__src;
  uint64_t v27;
  _QWORD v28[5];

  v28[4] = *MEMORY[0x1E0C80C00];
  __src = v28;
  v27 = 0x400000000;
  v8 = 8 * a3;
  v9 = (8 * a3) >> 3;
  if (v8 >= 0x21 && a3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v28, v9, 8);
    v10 = v27;
LABEL_4:
    memcpy((char *)__src + 8 * v10, a2, v8);
    v10 = v27;
    goto LABEL_5;
  }
  v20 = a3;
  if (v8 < 0x21)
  {
    v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v28, v9, 8);
    v10 = v27;
  }
  if (v20)
    goto LABEL_4;
LABEL_5:
  v22 = v24;
  v23 = 0x400000000;
  v11 = v10 + (v8 >> 3);
  LODWORD(v27) = v11;
  if ((_DWORD)v11)
  {
    v12 = v11;
    v13 = v24;
    if (v11 < 5
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v11, 8),
          v12 = v27,
          v13 = v22,
          (_DWORD)v27))
    {
      memcpy(v13, __src, 8 * v12);
      v13 = v22;
    }
    LODWORD(v23) = v11;
    v25 = a1;
    v14 = (char *)operator new(0x40uLL);
    *(_QWORD *)v14 = &off_1E816E060;
    v15 = v14 + 24;
    *((_QWORD *)v14 + 1) = v14 + 24;
    *((_QWORD *)v14 + 2) = 0x400000000;
    if (v13 != v24)
    {
      *((_QWORD *)v14 + 1) = v13;
      v16 = HIDWORD(v23);
      *((_DWORD *)v14 + 4) = v11;
      *((_DWORD *)v14 + 5) = v16;
      v22 = v24;
      HIDWORD(v23) = 0;
      v17 = v24;
LABEL_11:
      LODWORD(v23) = 0;
      goto LABEL_12;
    }
    v18 = v14;
    if (v11 >= 5)
    {
      v21 = (void **)(v14 + 8);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v14 + 8), (uint64_t)v15, v11, 8);
      v19 = v23;
      v17 = v22;
      if (!(_DWORD)v23)
        goto LABEL_20;
      v15 = *v21;
    }
    else
    {
      v17 = v24;
      v19 = v11;
    }
    memcpy(v15, v17, 8 * v19);
    v17 = v22;
LABEL_20:
    v14 = v18;
    *((_DWORD *)v18 + 4) = v11;
    a1 = v25;
    goto LABEL_11;
  }
  v25 = a1;
  v14 = (char *)operator new(0x40uLL);
  *(_QWORD *)v14 = &off_1E816E060;
  *((_QWORD *)v14 + 1) = v14 + 24;
  *((_QWORD *)v14 + 2) = 0x400000000;
  v17 = v24;
LABEL_12:
  *((_DWORD *)v14 + 14) = a1;
  *(_QWORD *)(a4 + 24) = v14;
  if (v17 != v24)
    free(v17);
  if (__src != v28)
    free(__src);
}

uint64_t sub_1C5510508(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v9 = *(unsigned int *)(a1 + 8);
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        v6 = v9;
LABEL_6:
        v7 = *(unsigned int *)(a2 + 8);
        if (v6 != v7)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v6), (const void *)(*(_QWORD *)a2 + 8 * v6), *(_QWORD *)a2 + 8 * v7 - (*(_QWORD *)a2 + 8 * v6));
LABEL_8:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 8);
    }
    v6 = 0;
    goto LABEL_6;
  }
  return a1;
}

_QWORD *sub_1C55105E0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E816E060;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C5510620(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E816E060;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5510670(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void **v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  v2 = operator new(0x40uLL);
  v3 = v2;
  *v2 = &off_1E816E060;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v5 = (void **)(v2 + 1);
  v2[2] = 0x400000000;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
    v7 = v2 == (_QWORD *)a1;
  else
    v7 = 1;
  if (!v7)
  {
    if (v6 < 5)
    {
      v8 = *(unsigned int *)(a1 + 16);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, *(unsigned int *)(a1 + 16), 8);
      v8 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v8)
      {
LABEL_9:
        *((_DWORD *)v3 + 4) = v6;
        goto LABEL_10;
      }
      v4 = *v5;
    }
    memcpy(v4, *(const void **)(a1 + 8), 8 * v8);
    goto LABEL_9;
  }
LABEL_10:
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

unsigned int *sub_1C5510724(unsigned int *result, unsigned int *a2)
{
  const void **v3;
  void *v4;
  void **v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;

  v3 = (const void **)result;
  *(_QWORD *)a2 = &off_1E816E060;
  v4 = a2 + 6;
  *((_QWORD *)a2 + 1) = a2 + 6;
  v5 = (void **)(a2 + 2);
  *((_QWORD *)a2 + 2) = 0x400000000;
  v6 = result[4];
  if ((_DWORD)v6)
    v7 = a2 == result;
  else
    v7 = 1;
  if (!v7)
  {
    if (v6 < 5)
    {
      v8 = result[4];
    }
    else
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), (uint64_t)(a2 + 6), v6, 8);
      v8 = *((unsigned int *)v3 + 4);
      if (!(_DWORD)v8)
      {
LABEL_9:
        a2[4] = v6;
        goto LABEL_10;
      }
      v4 = *v5;
    }
    result = (unsigned int *)memcpy(v4, v3[1], 8 * v8);
    goto LABEL_9;
  }
LABEL_10:
  a2[14] = *((_DWORD *)v3 + 14);
  return result;
}

void sub_1C55107CC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C55107E8(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

BOOL sub_1C551081C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = *(_QWORD **)(a1 + 8);
    while (*v5 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 56)))
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (_QWORD *)(v2 + 8 * v3);
        return v3 != ((uint64_t)v5 - v2) >> 3;
      }
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 8);
  }
  return v3 != ((uint64_t)v5 - v2) >> 3;
}

uint64_t sub_1C5510874(uint64_t a1, const void **a2)
{
  const void **v3;
  const void **v4;
  const void **v5;
  void *v6;
  _DWORD *v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  unsigned int v15;
  const void **v16;
  const void **v17;

  if ((const void **)a1 != a2)
  {
    v3 = a2;
    v5 = a2 + 2;
    v4 = (const void **)*a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        v17 = v3;
        v13 = v5;
        free(v6);
        v5 = v13;
        v3 = v17;
        v4 = (const void **)*v17;
      }
      *(_QWORD *)a1 = v4;
      v7 = v3 + 1;
      *(_QWORD *)(a1 + 8) = v3[1];
      *v3 = v5;
      *((_DWORD *)v3 + 3) = 0;
      goto LABEL_6;
    }
    v7 = v3 + 1;
    v9 = *((_DWORD *)v3 + 2);
    v10 = *(unsigned int *)(a1 + 8);
    v15 = v9;
    v16 = v3;
    if (v10 >= v9)
    {
      if (v9)
        memmove(*(void **)a1, v4, 8 * v9);
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) < v9)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 8);
    }
    else if ((_DWORD)v10)
    {
      v14 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v4, 8 * v10);
      v11 = v14;
LABEL_12:
      v12 = *v7;
      if (v11 != v12)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v11), (char *)*v16 + 8 * v11, (_BYTE *)*v16 + 8 * v12 - ((_BYTE *)*v16 + 8 * v11));
LABEL_14:
      *(_DWORD *)(a1 + 8) = v15;
LABEL_6:
      *v7 = 0;
      return a1;
    }
    v11 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1C55109BC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v6 = *(_QWORD **)a2;
        v7 = *(_QWORD *)a2 + 16 * v4;
        v8 = *(_QWORD **)a1;
        do
        {
          *v8 = *v6;
          v8[1] = v6[1];
          v6 += 2;
          v8 += 2;
        }
        while (v6 != (_QWORD *)v7);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v9 = *(_QWORD **)a2;
        v10 = *(_QWORD *)a2 + 16 * v5;
        v11 = *(_QWORD **)a1;
        do
        {
          *v11 = *v9;
          v11[1] = v9[1];
          v9 += 2;
          v11 += 2;
        }
        while (v9 != (_QWORD *)v10);
LABEL_14:
        v12 = *(unsigned int *)(a2 + 8);
        if (v5 != v12)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v12 - (*(_QWORD *)a2 + 16 * v5));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 16);
    }
    v5 = 0;
    goto LABEL_14;
  }
  return a1;
}

_QWORD *sub_1C5510AC0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E816E0A8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_1C5510B00(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E816E0A8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5510B50(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x60uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E816E0A8;
  v2[1] = v3;
  v2[2] = v2 + 4;
  v2[3] = 0x400000000;
  if (*(_DWORD *)(a1 + 24))
    sub_1C55109BC((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

uint64_t sub_1C5510BB0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = &off_1E816E0A8;
  v2 = *(_QWORD *)(result + 8);
  a2[2] = a2 + 4;
  v3 = (uint64_t)(a2 + 2);
  *(_QWORD *)(v3 - 8) = v2;
  *(_QWORD *)(v3 + 8) = 0x400000000;
  if (*(_DWORD *)(result + 24))
    return sub_1C55109BC(v3, result + 16);
  return result;
}

void sub_1C5510BF4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 32))
    free(v2);
}

void sub_1C5510C10(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[2];
  if (v2 != __p + 4)
    free(v2);
  operator delete(__p);
}

BOOL sub_1C5510C44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(v4 + 8 * *(unsigned int *)(a1 + 8));
    v6 = *(_QWORD *)(v4 + 8 * *(unsigned int *)(a1 + 12));
    v7 = 16 * v3;
    v8 = *(_QWORD **)(a1 + 16);
    while (*v8 != v5 || v8[1] != v6)
    {
      v8 += 2;
      v7 -= 16;
      if (!v7)
      {
        v8 = (_QWORD *)(v2 + 16 * v3);
        return v3 != ((uint64_t)v8 - v2) >> 4;
      }
    }
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 16);
  }
  return v3 != ((uint64_t)v8 - v2) >> 4;
}

uint64_t sub_1C5510CA4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(_QWORD **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_21;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = &v4[2 * v8];
        v11 = *(_QWORD **)a1;
        do
        {
          *v11 = *v4;
          v11[1] = v4[1];
          v4 += 2;
          v11 += 2;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v12 = &v4[2 * v9];
        v13 = *(_QWORD **)a1;
        do
        {
          *v13 = *v4;
          v13[1] = v4[1];
          v4 += 2;
          v13 += 2;
        }
        while (v4 != v12);
LABEL_18:
        v14 = *v7;
        if (v9 != v14)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v14 - (*(_QWORD *)a2 + 16 * v9));
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 16);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

_QWORD *sub_1C5510DEC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E816E0F0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_1C5510E2C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E816E0F0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C5510E7C(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  v2 = (char *)operator new(0x40uLL);
  v3 = v2;
  *(_QWORD *)v2 = &off_1E816E0F0;
  *((_DWORD *)v2 + 2) = *(_DWORD *)(a1 + 8);
  v4 = v2 + 32;
  *((_QWORD *)v2 + 2) = v2 + 32;
  v5 = (void **)(v2 + 16);
  *((_QWORD *)v2 + 3) = 0x400000000;
  v6 = *(_DWORD *)(a1 + 24);
  if (v6)
    v7 = v2 == (char *)a1;
  else
    v7 = 1;
  if (!v7)
  {
    if (v6 < 5)
    {
      v8 = *(unsigned int *)(a1 + 24);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 16), (uint64_t)v4, *(unsigned int *)(a1 + 24), 8);
      v8 = *(unsigned int *)(a1 + 24);
      if (!(_DWORD)v8)
      {
LABEL_9:
        *((_DWORD *)v3 + 6) = v6;
        return v3;
      }
      v4 = *v5;
    }
    memcpy(v4, *(const void **)(a1 + 16), 8 * v8);
    goto LABEL_9;
  }
  return v3;
}

const void **sub_1C5510F30(const void **result, const void **a2)
{
  void *v2;
  void **v3;
  unint64_t v4;
  BOOL v5;
  const void **v7;
  uint64_t v8;

  *a2 = &off_1E816E0F0;
  *((_DWORD *)a2 + 2) = *((_DWORD *)result + 2);
  v2 = a2 + 4;
  a2[2] = a2 + 4;
  v3 = (void **)(a2 + 2);
  a2[3] = (const void *)0x400000000;
  v4 = *((unsigned int *)result + 6);
  if ((_DWORD)v4)
    v5 = a2 == result;
  else
    v5 = 1;
  if (!v5)
  {
    v7 = result;
    if (v4 < 5)
    {
      v8 = *((unsigned int *)result + 6);
    }
    else
    {
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), (uint64_t)(a2 + 4), v4, 8);
      v8 = *((unsigned int *)v7 + 6);
      if (!(_DWORD)v8)
      {
LABEL_9:
        *((_DWORD *)a2 + 6) = v4;
        return result;
      }
      v2 = *v3;
    }
    result = (const void **)memcpy(v2, v7[2], 8 * v8);
    goto LABEL_9;
  }
  return result;
}

void sub_1C5510FD8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 32))
    free(v2);
}

void sub_1C5510FF4(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[2];
  if (v2 != __p + 4)
    free(v2);
  operator delete(__p);
}

BOOL sub_1C5511028(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0
    || (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8)) & 4) == 0)
  {
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned int *)(a1 + 24);
  v7 = 3;
  if ((v2 & 1) == 0)
    v7 = 19;
  v8 = v2 >> v7;
  if ((v2 & 2) != 0)
    v9 = (v2 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v8) | 2;
  else
    v9 = v2 & 0x8000000000000000 | (8 * v8) | 1;
  if ((_DWORD)v6)
  {
    v10 = 8 * v6;
    v11 = *(_QWORD **)(a1 + 16);
    while (*v11 != v9)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
      {
        v11 = (_QWORD *)(v5 + 8 * v6);
        return v6 != ((uint64_t)v11 - v5) >> 3;
      }
    }
  }
  else
  {
    v11 = *(_QWORD **)(a1 + 16);
  }
  return v6 != ((uint64_t)v11 - v5) >> 3;
}

void sub_1C55110D8()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C55110EC(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E816E138;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5511124(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E816E138;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1C5511144(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8)) & 1;
}

void sub_1C551115C()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C5511170(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E816E180;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C55111A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E816E180;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1C55111C8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v4 = (v2 >> 2) & 1;
  if (v3)
    return 0;
  else
    return v4;
}

void sub_1C55111E8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C55111FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E1C8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5511230(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E1C8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL sub_1C5511250(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  unint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  if ((v7 & 1) == 0)
    return 0;
  v4 = sub_1C4825F50(&v7);
  if ((_DWORD)v5 == 1)
  {
    v6 = v4;
    v4 = v6;
  }
  return v4 < *(unsigned int *)(a1 + 12);
}

void sub_1C55112CC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C55112E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E210;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5511314(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E210;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL sub_1C5511334(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  unint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  if ((v7 & 1) == 0)
    return 0;
  v4 = sub_1C4825F50(&v7);
  if ((_DWORD)v5 == 1)
  {
    v6 = v4;
    v4 = v6;
  }
  return v4 > *(unsigned int *)(a1 + 12);
}

void sub_1C55113B0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C55113C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E258;
  result[1] = v3;
  return result;
}

uint64_t sub_1C55113F8(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E258;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL sub_1C5511418(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  const char *v4;
  unint64_t v6;
  unint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  v3 = sub_1C4825F50(&v7);
  if ((_DWORD)v4 == 1)
  {
    v6 = v3;
    v3 = v6;
  }
  return v3 < *(unsigned int *)(a1 + 12);
}

void sub_1C5511488()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C551149C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E2A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C55114D0(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E2A0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL sub_1C55114F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  const char *v4;
  unint64_t v6;
  unint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  v3 = sub_1C4825F50(&v7);
  if ((_DWORD)v4 == 1)
  {
    v6 = v3;
    v3 = v6;
  }
  return v3 > *(unsigned int *)(a1 + 12);
}

void sub_1C5511560()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5511574(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E2E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C55115A8(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E2E8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL sub_1C55115C8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  v3 = (unsigned __int16)(v2 >> 3);
  v4 = (unsigned __int16)(v2 >> 19);
  if ((v2 & 2) == 0)
    v4 = v2 >> 19;
  if ((v2 & 4) != 0)
    v3 = v4;
  if ((v2 & 1) != 0)
    v5 = v2 >> 3;
  else
    v5 = v3;
  return *(_DWORD *)(a1 + 12) > v5;
}

void sub_1C551160C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5511620(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E330;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5511654(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E330;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL sub_1C5511674(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  v3 = (unsigned __int16)(v2 >> 3);
  v4 = (unsigned __int16)(v2 >> 19);
  if ((v2 & 2) == 0)
    v4 = v2 >> 19;
  if ((v2 & 4) != 0)
    v3 = v4;
  if ((v2 & 1) != 0)
    v5 = v2 >> 3;
  else
    v5 = v3;
  return *(_DWORD *)(a1 + 12) < v5;
}

void sub_1C55116B8()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C55116CC(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E816E378;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5511704(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E816E378;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1C5511724(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  int v4;
  int v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  v3 = (unsigned __int16)(v2 >> 3);
  v4 = (unsigned __int16)(v2 >> 19);
  if ((v2 & 2) == 0)
    v4 = v2 >> 19;
  if ((v2 & 4) != 0)
    v3 = v4;
  if ((v2 & 1) != 0)
    v5 = v2 >> 3;
  else
    v5 = v3;
  return !v5 || (v5 & (v5 - 1)) != 0;
}

void sub_1C5511778()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C551178C(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E816E3C0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C55117C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E816E3C0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1C55117E4(uint64_t a1, uint64_t a2)
{
  int v3;
  const char *v4;
  int v5;
  unint64_t v6;

  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  if ((v6 & 1) == 0)
    return 0;
  v3 = sub_1C4825F50(&v6);
  if ((_DWORD)v4 == 1)
  {
    v5 = v3;
    v3 = v5;
  }
  return !v3 || (v3 & (v3 - 1)) != 0;
}

void sub_1C5511860()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5511874(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E408;
  result[1] = v3;
  return result;
}

uint64_t sub_1C55118A8(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E408;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL sub_1C55118C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v4 = sub_1C4825F50((unint64_t *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8)));
  v6 = v5;
  return v4 == sub_1C4825F50((unint64_t *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 12))) && v6 == v7;
}

void sub_1C5511928()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C551193C(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E816E450;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5511974(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E816E450;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1C5511994(uint64_t a1, uint64_t a2)
{
  const char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  v3 = sub_1C4825F50((unint64_t *)(*(_QWORD *)(a2 + 24) + 24 * *(unsigned int *)(a1 + 8))) + 7;
  if ((_DWORD)v2 == 1)
  {
    v6 = v3;
    v3 = v6;
  }
  v4 = v3 >> 3;
  return !(_DWORD)v4 || (v4 & ((_DWORD)v4 - 1)) != 0;
}

void sub_1C5511A04()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C5511A18(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E816E498;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5511A50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E816E498;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1C5511A70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0
    || (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8)) & 4) == 0)
  {
    return 0;
  }
  v5 = 0x800000000000000;
  if ((v2 & 2) == 0)
    v5 = 0x8000000000000;
  if ((v5 & v2) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  return !(unsigned __int16)(v2 >> 3)
      || ((unsigned __int16)(v2 >> 3) & ((unsigned __int16)(v2 >> 3) - 1)) != 0;
}

void sub_1C5511AF8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5511B0C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E4E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5511B40(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E4E0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL sub_1C5511B60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8 * v2);
  if ((v4 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(_QWORD *)(v3 + 8 * v2) & 4) == 0)
    return 0;
  v8 = 0x800000000000000;
  if ((v4 & 2) == 0)
    v8 = 0x8000000000000;
  if ((v8 & v4) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v4 = *(_QWORD *)(v3 + 8 * v2);
  }
  return (unsigned __int16)(v4 >> 3) % *(_DWORD *)(a1 + 12) != 0;
}

void sub_1C5511BF4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5511C08(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E816E528;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5511C40(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E816E528;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5511C60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1C5511C74()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5511C88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E816E570;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5511CC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E816E570;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5511CE0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  sub_1C626E984(&v4, *(_QWORD *)(a1 + 16));
  return *(unsigned int *)(a1 + 8);
}

void sub_1C5511D2C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5511D40(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E5B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5511D74(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E5B8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_1C5511D94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)(v3 + 8 * *(unsigned int *)(a1 + 8));
  v5 = *(_QWORD *)(v3 + 8 * v4);
  v6 = (unsigned __int16)(v5 >> 3);
  v7 = (unsigned __int16)(v5 >> 19);
  if ((v5 & 2) == 0)
    v7 = (v5 >> 19);
  if ((v5 & 4) != 0)
    v6 = v7;
  if ((v5 & 1) != 0)
    v8 = (v5 >> 3);
  else
    v8 = v6;
  sub_1C626E984(&v10, (8 * v8) | 1);
  return *(unsigned int *)(a1 + 8);
}

void sub_1C5511E10()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5511E24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E600;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5511E58(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E600;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_1C5511E78(uint64_t a1, uint64_t a2)
{
  const char *v3;

  sub_1C4825F50((unint64_t *)(*(_QWORD *)(a2 + 24) + 24 * *(unsigned int *)(a1 + 8)));
  if ((_DWORD)v3 == 1)
  return *(unsigned int *)(a1 + 12);
}

void sub_1C5511EE4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5511EF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E648;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5511F2C(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E648;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_1C5511F4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1C5511FFC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5512010(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E690;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5512044(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E690;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_1C5512064(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  v4 = 0x800000000000000;
  if ((v3 & 2) == 0)
    v4 = 0x8000000000000;
  if ((v4 & v3) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = 3;
  if ((v3 & 1) == 0)
    v6 = 19;
  v7 = v3 & 0x8000000000000000 | (8 * (v3 >> v6)) | 1;
  v8 = 35;
  v9 = 19;
  if ((v3 & 4) == 0)
    v8 = 19;
  v10 = v3 >> v8;
  if ((v3 & 4) == 0)
    v9 = 3;
  if ((v3 & 1) != 0)
    v9 = 3;
  v11 = (8 * (unsigned __int16)(v3 >> v9)) & 0xFFFFF8000007FFFFLL | ((v10 & 0xFFFFFF) << 19);
  if ((v3 & 2) != 0)
    v12 = v11 | 2;
  else
    v12 = v7;
  v13 = 1 << -(char)__clz((unsigned __int16)(v3 >> 3) - 1);
  if (v13 <= v5)
    v14 = v5;
  else
    v14 = v13;
  sub_1C4953AD0(v14, v12);
  return *(unsigned int *)(a1 + 8);
}

void sub_1C5512144()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5512158(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E6D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C551218C(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E6D8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_1C55121AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1C5512220()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5512234(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E720;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5512268(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E816E720;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_1C5512288(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1C55122F4()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C5512308(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E816E768;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5512340(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E816E768;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1C5512360(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1C55123CC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  sub_1C54E9CDC(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Legalize the Machine IR a function's Machine IR";
  *(_QWORD *)(v2 + 8) = 47;
  *(_QWORD *)(v2 + 16) = "legalizer";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2FD8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C6271528;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5512468(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t j;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned __int8 **v40;
  unsigned __int8 **v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned __int8 **v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  int **v78;
  int *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  void **v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  int v100;
  uint64_t v101;
  void **v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  int *v109;
  int v110;
  BOOL v111;
  uint64_t v112;
  unsigned __int8 **v113;
  unsigned __int8 **v114;
  unsigned __int8 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  const char *v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  char v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  void **v157;
  const char *v158;
  unsigned int v159;
  const char *v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  _DWORD *v165;
  int *v166;
  int *v167;
  void **v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void **v175;
  uint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  unsigned int i;
  uint64_t v182;
  int v183;
  unsigned int v184;
  unsigned __int8 v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  char v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  void **v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  unsigned int v213;
  unsigned __int8 v214;
  int *v215;
  uint64_t v216;
  int *v217;
  unint64_t *v218;
  int v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  int v223;
  int v225;
  uint64_t v226;
  void **v227;
  unint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  unint64_t v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  const char *v236;
  unsigned int v237;
  const char *v238;
  unsigned int v239;
  uint64_t v240;
  char v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  char v245;
  unint64_t v246;
  unint64_t v247;
  unsigned int v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  unsigned int v254;
  unsigned __int8 v255;
  char *v256;
  char v257;
  const char *v258;
  unint64_t v259;
  const char *v260;
  unint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  llvm::ConstantInt *****v272;
  llvm::APInt *v273;
  const char *v274;
  unsigned int v275;
  const llvm::APInt *v276;
  llvm::ValueHandleBase *v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  llvm::ConstantInt *****v281;
  llvm::APInt *v282;
  const char *v283;
  unsigned int v284;
  const llvm::APInt *v285;
  llvm::ValueHandleBase *v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  llvm::ConstantInt *****v291;
  llvm::APInt *v292;
  const char *v293;
  unsigned int v294;
  const llvm::APInt *v295;
  llvm::ValueHandleBase *v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  unsigned int v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  llvm::ConstantInt *****v316;
  llvm::APInt *v317;
  const char *v318;
  unsigned int v319;
  const llvm::APInt *v320;
  llvm::ValueHandleBase *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  uint64_t v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  int v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int GenericVirtualRegister;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  int v354;
  unsigned int v355;
  unsigned __int8 v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int v368;
  uint64_t v369;
  unsigned __int8 v370;
  BOOL v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  unsigned __int8 v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  uint64_t v380;
  unsigned __int8 v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t v385;
  unsigned __int8 v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  uint64_t v398;
  int v399;
  uint64_t v400;
  uint64_t v402;
  uint64_t v403;
  unsigned int v404;
  uint64_t v405;
  char v406;
  void **v407;
  const char *v408;
  unsigned int v409;
  unint64_t v410;
  const char *v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unsigned int v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  char v420;
  uint64_t v421;
  uint64_t v422;
  unsigned int v423;
  unint64_t v424;
  unsigned __int8 v425;
  char v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  unsigned int v430;
  int v432;
  void **v433;
  uint64_t v434;
  uint64_t v435;
  void **v436;
  uint64_t v437;
  uint64_t v438;
  unsigned int v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  unsigned int v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t *v453;
  unint64_t v454;
  unint64_t v455;
  const char *v456;
  int v457;
  unsigned int v458;
  unint64_t v459;
  const char *v460;
  unint64_t v461;
  unint64_t v462;
  unsigned int v463;
  unsigned int v464;
  uint64_t v465;
  uint64_t *v466;
  unsigned int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unsigned int v472;
  uint64_t v473;
  uint64_t *v474;
  uint64_t v475;
  int v476;
  unsigned int v477;
  unsigned __int8 v478;
  unsigned int v479;
  int v480;
  uint64_t v481;
  int v482;
  unsigned int v483;
  unsigned __int8 v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t *v489;
  uint64_t v490;
  unint64_t v491;
  unsigned int v492;
  unsigned int v493;
  uint64_t v494;
  uint64_t *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  void **v500;
  void **v501;
  llvm::ConstantInt *****v502;
  unsigned int v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t *v507;
  const llvm::APInt *v508;
  llvm::ValueHandleBase *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t *v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  uint64_t v528;
  uint64_t *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unsigned int v535;
  uint64_t v536;
  unsigned __int8 v537;
  uint64_t v538;
  uint64_t v539;
  unsigned int v540;
  uint64_t v541;
  unsigned __int8 v542;
  int v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  unsigned int v547;
  uint64_t v548;
  _BOOL4 v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unsigned int v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  unsigned int v560;
  uint64_t v561;
  int v562;
  int v563;
  int v564;
  uint64_t *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  char v570;
  char v571;
  unint64_t v572;
  int v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unsigned int v577;
  _BOOL4 v578;
  uint64_t v579;
  unsigned int v580;
  unsigned int v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  void **v589;
  unint64_t v590;
  void *v591;
  uint64_t v592;
  _DWORD v593[4];
  _QWORD *v594;
  uint64_t v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  unint64_t v599;
  int v600;
  unint64_t v601;
  void **v602;
  uint64_t v603;
  unint64_t *v604;
  uint64_t v605;
  unint64_t v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  uint64_t v610;

  v610 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)a3;
    v10 = *(_QWORD *)a3 + 8 * v8;
    do
    {
      v11 = *v9;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 40))(a4, *v9);
      v12 = v11;
      if ((*(_BYTE *)v11 & 4) == 0)
      {
        v12 = v11;
        if ((*(_WORD *)(v11 + 44) & 8) != 0)
        {
          v12 = v11;
          do
            v12 = *(_QWORD *)(v12 + 8);
          while ((*(_WORD *)(v12 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v11 + 24) + 40, v11, *(_QWORD *)(v12 + 8));
      ++v9;
    }
    while (v9 != (uint64_t *)v10);
    *(_DWORD *)(a3 + 8) = 0;
  }
  v13 = 0;
  v591 = v593;
  v592 = 0x400000000;
  switch(**(_WORD **)(a2 + 16))
  {
    case 'I':
      v35 = *(_QWORD *)(a2 + 32);
      v36 = a1[1];
      v37 = sub_1C5517B4C(v36, *(_DWORD *)(v35 + 36));
      if ((v37 & 0x80000000) != 0)
        v38 = (uint64_t *)(*(_QWORD *)(v36 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
      else
        v38 = (uint64_t *)(*(_QWORD *)(v36 + 272) + 8 * v37);
      v67 = *v38;
      if (!v67)
        goto LABEL_58;
      v587 = a3;
      if ((*(_BYTE *)(v67 + 3) & 1) == 0)
      {
        v67 = *(_QWORD *)(v67 + 24);
        if (!v67 || (*(_BYTE *)(v67 + 3) & 1) == 0)
          goto LABEL_58;
      }
      v429 = *(_QWORD *)(v67 + 8);
      if (!v429)
        goto LABEL_58;
      v430 = **(unsigned __int16 **)(v429 + 16) - 76;
      if (v430 > 3 || v430 == 2)
        goto LABEL_58;
      v432 = *(_DWORD *)(v35 + 4);
      if (v432 < 0 && (v432 & 0x7FFFFFFFu) < *(_DWORD *)(v36 + 432))
        v433 = *(void ***)(*(_QWORD *)(v36 + 424) + 8 * (v432 & 0x7FFFFFFF));
      else
        v433 = 0;
      v598 = (uint64_t)v433;
      if ((v37 & 0x80000000) != 0 && (v454 = v37 & 0x7FFFFFFF, v454 < *(unsigned int *)(v36 + 432)))
        v455 = *(_QWORD *)(*(_QWORD *)(v36 + 424) + 8 * v454);
      else
        v455 = 0;
      v601 = v455;
      v457 = sub_1C4825F50((unint64_t *)&v598);
      if ((_DWORD)v456 == 1)
      v458 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 80);
      v459 = (*(_DWORD *)(v429 + 40) - 1);
      v461 = sub_1C4825F50(&v601);
      if ((_DWORD)v460 == 1)
      v462 = v461 / v459;
      v463 = v458 / (v461 / v459);
      v464 = (v457 + v458 - 1) / (v461 / v459);
      v13 = v463 == v464;
      if (v463 == v464)
      {
        v465 = *a1;
        *(_QWORD *)(v465 + 40) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v465 + 48) = a2;
        v466 = (uint64_t *)*a1;
        LODWORD(v594) = v432;
        LODWORD(v595) = 1;
        LODWORD(v604) = *(_DWORD *)(*(_QWORD *)(v429 + 32) + 32 * (v463 + 1) + 4);
        LODWORD(v606) = 0;
        sub_1C5546FE4(v466, (unint64_t *)&v594, (int *)&v604, v458 - v463 * (_DWORD)v462);
        v467 = v592;
        if (v592 >= HIDWORD(v592))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
          v467 = v592;
        }
        *((_DWORD *)v591 + v467) = v432;
        LODWORD(v592) = v592 + 1;
        v468 = *(unsigned int *)(v587 + 8);
        if (v468 >= *(_DWORD *)(v587 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v587, v587 + 16, v468 + 1, 8);
          LODWORD(v468) = *(_DWORD *)(v587 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v587 + 8 * v468) = a2;
        ++*(_DWORD *)(v587 + 8);
        sub_1C55181AC((uint64_t)a1, a2, v429, v587, 0);
      }
      goto LABEL_534;
    case 'J':
      v584 = a3;
      v30 = *(_DWORD *)(a2 + 40);
      v31 = (v30 - 1);
      v32 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v31 + 4);
      sub_1C554CC94(v32, a1[1], (uint64_t)&v604);
      v13 = 0;
      if (!(_BYTE)v606)
        goto LABEL_534;
      v33 = v604;
      if (!v604)
        goto LABEL_534;
      v34 = a1[1];
      if ((v32 & 0x80000000) != 0 && (v32 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v34 + 432))
        v574 = *(_QWORD *)(*(_QWORD *)(v34 + 424) + 8 * (v32 & 0x7FFFFFFF));
      else
        v574 = 0;
      v100 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v100 < 0 && (v101 = v100 & 0x7FFFFFFF, v101 < *(_DWORD *)(v34 + 432)))
        v102 = *(void ***)(*(_QWORD *)(v34 + 424) + 8 * v101);
      else
        v102 = 0;
      v576 = (uint64_t)v102;
      v589 = v102;
      v103 = v604[4];
      v104 = v604[2];
      v105 = *(unsigned __int8 *)(v104 + 4);
      if ((*(_BYTE *)(v104 + 8) & 2) == 0 || (v198 = *((_DWORD *)v604 + 10), v198 == v105))
      {
        v106 = v105;
      }
      else
      {
        v199 = v198 - 1;
        v106 = v105;
        do
        {
          v200 = *(_DWORD *)(v103 + 32 * v105);
          if ((v200 & 0x10000FF) != 0x1000000)
            break;
          v106 += (v200 & 0x2000000) == 0;
          if (v199 == v105)
            break;
          ++v105;
        }
        while ((v200 & 0x2000000) == 0);
      }
      v573 = v30;
      v107 = 0;
      if (v106)
      {
        v108 = 32 * v106 - 32;
        v109 = (int *)(v103 + 4);
        do
        {
          v110 = *v109;
          v109 += 8;
          if (v110 == v32)
          {
            v111 = 1;
          }
          else
          {
            ++v107;
            v111 = v108 == 0;
          }
          v108 -= 32;
        }
        while (!v111);
      }
      v112 = *a1;
      *(_QWORD *)(v112 + 40) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(v112 + 48) = a2;
      v113 = (unsigned __int8 **)(a2 + 56);
      v114 = (unsigned __int8 **)(v112 + 32);
      if (a2 + 56 != v112 + 32)
      {
        if (*v114)
          llvm::MetadataTracking::untrack(v112 + 32, *v114);
        v115 = *v113;
        *v114 = *v113;
        if (v115)
          llvm::MetadataTracking::track((uint64_t)v114, v115, 2);
      }
      v575 = v31;
      v117 = *a1;
      v116 = a1[1];
      v118 = a1[2];
      v594 = (_QWORD *)v116;
      v595 = v117;
      v596 = v118;
      v597 = 0;
      v119 = *(_DWORD *)(a2 + 40);
      v120 = (v119 - 1);
      v121 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v121 < 0 && (v122 = v121 & 0x7FFFFFFF, v122 < *(_DWORD *)(v116 + 432)))
        v123 = *(unint64_t **)(*(_QWORD *)(v116 + 424) + 8 * v122);
      else
        v123 = 0;
      v579 = (uint64_t)v33;
      v124 = a4 + 8;
      v604 = v123;
      if (v120 >= 0x3A)
      {
        v333 = operator new();
        *(_QWORD *)v333 = v333 + 16;
        *(_QWORD *)(v333 + 8) = 0x600000000;
        sub_1C4765AA4((char *)v333, (v119 + 62) >> 6, 0);
        *(_DWORD *)(v333 + 64) = v120;
        v598 = v333;
      }
      else
      {
        v598 = (v120 << 58) | 1;
        if (v119 == 1)
          goto LABEL_154;
      }
      v125 = 0;
      v126 = 0;
      do
      {
        v127 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v125 + 4);
        if (sub_1C4A91738((uint64_t)v594, v127))
          goto LABEL_140;
        v129 = sub_1C4825F50((unint64_t *)&v604);
        if ((_DWORD)v128 == 1)
        v597 = 0;
        v130 = sub_1C5518630((uint64_t)&v594, v127, 0, v129);
        if (v130 != v127 && v130 != 0)
        {
          v132 = (v130 & 0x80000000) != 0 && (v130 & 0x7FFFFFFF) < (unint64_t)*((unsigned int *)v594 + 108)
               ? *(unint64_t **)(v594[53] + 8 * (v130 & 0x7FFFFFFF))
               : 0;
          if (v132 == v604)
          {
            sub_1C5517BEC(v127, v130, v594, v595, (uint64_t)&v591, a4 + 8);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 32))(a4 + 8, a2);
            llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + v125, v127);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 40))(a4 + 8, a2);
LABEL_140:
            sub_1C496F8DC((unint64_t *)&v598, v126);
          }
        }
        ++v126;
        v125 += 32;
      }
      while (v120 != v126);
LABEL_154:
      v133 = sub_1C54F8768((unint64_t *)&v598);
      sub_1C4914448((void ***)&v598);
      if (v133)
        goto LABEL_155;
      v162 = 0;
      v163 = v579;
      v164 = **(unsigned __int16 **)(v579 + 16);
      if (v164 - 74 > 0x34)
      {
        v165 = (_DWORD *)v579;
        goto LABEL_304;
      }
      if (((1 << (v164 - 74)) & 0x14300000000000) == 0)
      {
        v165 = (_DWORD *)v579;
        if (v164 == 74)
        {
          v201 = *(_DWORD *)(*(_QWORD *)(v579 + 32) + 32 * (*(_DWORD *)(v579 + 40) - 1) + 4);
          if (v201 < 0)
          {
            v270 = a1[1];
            v203 = v575;
            if ((v201 & 0x7FFFFFFFu) >= *(_DWORD *)(v270 + 432))
              v202 = 0;
            else
              v202 = *(void ***)(*(_QWORD *)(v270 + 424) + 8 * (v201 & 0x7FFFFFFF));
          }
          else
          {
            v202 = 0;
            v203 = v575;
          }
          v303 = a1[2];
          v601 = v574;
          v602 = v202;
          LODWORD(v604) = 74;
          v605 = (uint64_t)&v601;
          v606 = 2;
          v607 = 0;
          v608 = 0;
          v304 = *(_DWORD *)(v303 + 4880);
          if (v304)
            v305 = v304 - 45;
          else
            v305 = 29;
          v306 = sub_1C553C530(v303 + 168 * v305 + 8, (uint64_t)&v604);
          if (v306 != 11)
          {
            v13 = 0;
            v307 = v306 & 0xFFFFFFFF00000000;
            switch((char)v306)
            {
              case 1:
              case 3:
                goto LABEL_425;
              case 6:
              case 9:
                goto LABEL_426;
              default:
                goto LABEL_534;
            }
            goto LABEL_534;
          }
          if (!v606)
            goto LABEL_533;
          v417 = 0;
          v418 = 0;
          while (1)
          {
            v419 = *(_QWORD *)(v605 + 8 * v417);
            v598 = __PAIR64__(v418, v604);
            v599 = v419;
            v420 = sub_1C553DEB0(v303 + 35456, (uint64_t)&v598);
            if (v420)
              break;
            v417 = (v418 + 1);
            v418 = v417;
            if (v606 <= v417)
              goto LABEL_533;
          }
          switch(v420)
          {
            case 1:
            case 3:
              v307 = v418 << 32;
              v203 = v575;
LABEL_425:
              if (v307 == 0x100000000)
                goto LABEL_533;
              break;
            case 6:
            case 9:
              v203 = v575;
              break;
            default:
              goto LABEL_533;
          }
LABEL_426:
          v308 = (uint64_t *)*a1;
          LODWORD(v604) = v201;
          LODWORD(v606) = 0;
          sub_1C5544C30(v308, v576, (int *)&v604);
          if ((_DWORD)v203)
          {
            v310 = v309;
            v311 = 0;
            v312 = v203;
            v313 = v107 * v203;
            v314 = 32 * v312;
            do
            {
              sub_1C5517BEC(*(_DWORD *)(*(_QWORD *)(a2 + 32) + v311 + 4), *(_DWORD *)(*(_QWORD *)(v310 + 32) + 32 * v313 + 4), (_QWORD *)a1[1], *a1, (uint64_t)&v591, a4 + 8);
              v311 += 32;
              ++v313;
            }
            while (v314 != v311);
          }
LABEL_155:
          v134 = *(unsigned int *)(v584 + 8);
          if (v134 >= *(_DWORD *)(v584 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v584, v584 + 16, v134 + 1, 8);
            LODWORD(v134) = *(_DWORD *)(v584 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v584 + 8 * v134) = a2;
          ++*(_DWORD *)(v584 + 8);
          v135 = (uint64_t)a1;
          v136 = a2;
          v137 = v579;
          v138 = v584;
          v139 = v107;
          goto LABEL_392;
        }
LABEL_304:
        v222 = v576;
        v604 = (unint64_t *)v576;
        if (v164 - 76 < 2)
        {
          if (v162)
          {
            if ((v576 & 0xFFFFFFFFFFFFFFF9) != 0 && (v576 & 4) != 0
              || (v574 & 0xFFFFFFFFFFFFFFF9) == 0
              || (v574 & 4) == 0)
            {
              goto LABEL_306;
            }
            v426 = 3;
            if ((v574 & 1) == 0)
              v426 = 19;
            v427 = v574 >> v426;
            v428 = (v574 & 2) != 0
                 ? (v574 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v427) | 2
                 : v574 & 0x8000000000000000 | (8 * v427) | 1;
            v163 = v579;
            if (v428 != v576)
              goto LABEL_306;
LABEL_856:
            v324 = v575;
            v222 = v576;
            if (v165[10] != v573)
              goto LABEL_533;
            goto LABEL_857;
          }
        }
        else
        {
          if (v164 != 79)
            goto LABEL_306;
          if (v162)
          {
            if ((v576 & 0xFFFFFFFFFFFFFFF9) == 0 || (v576 & 4) == 0)
              goto LABEL_306;
            if ((v574 & 2) != 0)
            {
              v570 = 35;
              v571 = 19;
              if ((v574 & 4) == 0)
                v570 = 19;
              v572 = v574 >> v570;
              if ((v574 & 4) == 0)
                v571 = 3;
              if ((v574 & 1) != 0)
                v571 = 3;
              v407 = (void **)((8 * (unsigned __int16)(v574 >> v571)) & 0xFFFFF8000007FFFFLL | ((v572 & 0xFFFFFF) << 19) | 2);
            }
            else
            {
              v406 = 3;
              if ((v574 & 1) == 0)
                v406 = 19;
              v407 = (void **)(v574 & 0x8000000000000000 | (8 * (v574 >> v406)) | 1);
            }
            v598 = (uint64_t)v407;
            v409 = sub_1C4825F50((unint64_t *)&v598);
            if ((_DWORD)v408 == 1)
            v410 = v409;
            v412 = sub_1C4825F50((unint64_t *)&v604);
            if (v162 == 119)
            {
              if (v411 == 1)
              v163 = v579;
              if (v412 > v410)
                goto LABEL_306;
            }
            else
            {
              if (v411 == 1)
              v163 = v579;
              if (v412 < v410)
                goto LABEL_306;
            }
            goto LABEL_856;
          }
        }
        v323 = (v165[10] - 1);
        v324 = v575;
        if (v323 >= v575)
        {
          if (v323 <= v575)
          {
LABEL_857:
            v543 = *(_DWORD *)(*((_QWORD *)v165 + 4) + 36);
            if (v543 < 0)
            {
              v545 = a1[1];
              v546 = v543 & 0x7FFFFFFF;
              if (v546 >= *(_DWORD *)(v545 + 432))
                v544 = 0;
              else
                v544 = *(_QWORD *)(*(_QWORD *)(v545 + 424) + 8 * v546);
              v222 = v576;
            }
            else
            {
              v544 = 0;
            }
            if (v222 == v544)
              v547 = 0;
            else
              v547 = 82;
            v548 = v222;
            v549 = v162 != 0;
            if (v162)
              v550 = v162;
            else
              v550 = v547;
            v111 = v548 == v544;
            v601 = v544;
            v551 = *a1;
            if (!v111)
              v549 = 1;
            *(_QWORD *)(v551 + 40) = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(v551 + 48) = a2;
            v578 = v549;
            if (v549)
            {
              if ((_DWORD)v324)
              {
                v552 = 0;
                v553 = 32 * v324;
                do
                {
                  v554 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v552 + 4);
                  v555 = *(_DWORD *)(*((_QWORD *)v165 + 4) + v552 + 36);
                  if (!sub_1C4778650(a1[1], v554))
                  {
                    v556 = *a1;
                    LODWORD(v598) = v554;
                    LODWORD(v599) = 1;
                    LODWORD(v604) = v555;
                    LODWORD(v606) = 0;
                    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v556 + 32))(v556, v550, &v598, 1, &v604, 1, 0);
                    v557 = v592;
                    if (v592 >= (unint64_t)HIDWORD(v592))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                      v557 = v592;
                    }
                    *((_DWORD *)v591 + v557) = v554;
                    LODWORD(v592) = v592 + 1;
                  }
                  v552 += 32;
                }
                while (v553 != v552);
              }
              v569 = *(unsigned int *)(v584 + 8);
              if (v569 >= *(_DWORD *)(v584 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v584, v584 + 16, v569 + 1, 8);
                LODWORD(v569) = *(_DWORD *)(v584 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v584 + 8 * v569) = a2;
              ++*(_DWORD *)(v584 + 8);
              sub_1C55181AC((uint64_t)a1, a2, (uint64_t)v165, v584, 0);
LABEL_896:
              v13 = v578;
              goto LABEL_534;
            }
            if ((_DWORD)v324)
            {
              v558 = 0;
              v582 = 32 * v324;
              while (1)
              {
                v559 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v558 + 4);
                v560 = *(_DWORD *)(*((_QWORD *)v165 + 4) + v558 + 36);
                v561 = sub_1C4825F50((unint64_t *)&v589);
                v563 = v562;
                if (v561 != sub_1C4825F50(&v601) || v563 != v564)
                  goto LABEL_896;
                if (v589 != (void **)v601)
                {
                  v566 = (uint64_t *)*a1;
                  v598 = (uint64_t)v589;
                  LODWORD(v599) = 0;
                  LODWORD(v604) = v560;
                  LODWORD(v606) = 0;
                  sub_1C5546EF4(v566, &v598, (int *)&v604);
                  v560 = *(_DWORD *)(*(_QWORD *)(v567 + 32) + 4);
                }
                sub_1C5517BEC(v559, v560, (_QWORD *)a1[1], *a1, (uint64_t)&v591, a4 + 8);
                v558 += 32;
                if (v582 == v558)
                  goto LABEL_890;
              }
            }
            goto LABEL_890;
          }
          v334 = v323 / v575;
          if (v323 % v575)
            goto LABEL_533;
          v335 = *a1;
          *(_QWORD *)(v335 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v335 + 48) = a2;
          v336 = 0;
          if (v334 <= 1)
            v337 = 1;
          else
            v337 = v323 / v575;
          v581 = v337;
          do
          {
            LODWORD(v338) = 0;
            v604 = &v606;
            v605 = 0x800000000;
            LODWORD(v339) = v334 * v336;
            v340 = v581;
            do
            {
              v339 = (v339 + 1);
              v341 = *(_DWORD *)(*((_QWORD *)v165 + 4) + 32 * v339 + 4);
              if (v338 >= HIDWORD(v605))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v604, (uint64_t)&v606, v338 + 1, 4);
                LODWORD(v338) = v605;
              }
              *((_DWORD *)v604 + v338) = v341;
              v338 = (v605 + 1);
              LODWORD(v605) = v605 + 1;
              --v340;
            }
            while (v340);
            v342 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v336 + 4);
            v343 = *a1;
            LODWORD(v598) = v342;
            LODWORD(v599) = 1;
            sub_1C5544D6C(v343, (uint64_t)&v598, (int *)v604, v338);
            v344 = v592;
            if (v592 >= (unint64_t)HIDWORD(v592))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
              v344 = v592;
            }
            *((_DWORD *)v591 + v344) = v342;
            LODWORD(v592) = v592 + 1;
            if (v604 != &v606)
              free(v604);
            ++v336;
          }
          while (v336 != v575);
        }
        else
        {
          v580 = v575 / v323;
          if (v575 % v323)
            goto LABEL_533;
          v325 = *a1;
          *(_QWORD *)(v325 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v325 + 48) = a2;
          v326 = 0;
          v327 = v575 / v323;
          if (v580 <= 1)
            v327 = 1;
          v577 = v327;
          do
          {
            LODWORD(v328) = 0;
            v604 = &v606;
            v605 = 0x800000000;
            v329 = v580 * v326;
            v330 = v577;
            do
            {
              v331 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v329 + 4);
              if (v328 >= HIDWORD(v605))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v604, (uint64_t)&v606, v328 + 1, 4);
                LODWORD(v328) = v605;
              }
              *((_DWORD *)v604 + v328) = v331;
              v328 = (v605 + 1);
              LODWORD(v605) = v605 + 1;
              ++v329;
              --v330;
            }
            while (v330);
            v332 = *a1;
            ++v326;
            LODWORD(v598) = *(_DWORD *)(*((_QWORD *)v165 + 4) + 32 * v326 + 4);
            v600 = 0;
            sub_1C5547540(v332, (char *)v604, v328, (uint64_t)&v598);
            sub_1C4860A74((unsigned int *)&v591, v604, (_BYTE *)v604 + 4 * v605);
            if (v604 != &v606)
              free(v604);
          }
          while (v326 != v323);
        }
LABEL_890:
        v267 = v584;
        v568 = *(unsigned int *)(v584 + 8);
        if (v568 >= *(_DWORD *)(v584 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v584, v584 + 16, v568 + 1, 8);
          LODWORD(v568) = *(_DWORD *)(v584 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v584 + 8 * v568) = a2;
        ++*(_DWORD *)(v584 + 8);
        v135 = (uint64_t)a1;
        v136 = a2;
        v137 = (uint64_t)v165;
LABEL_390:
        v138 = v267;
LABEL_391:
        v139 = 0;
LABEL_392:
        sub_1C55181AC(v135, v136, v137, v138, v139);
LABEL_393:
        v13 = 1;
        goto LABEL_534;
      }
      sub_1C554CC94(*(unsigned int *)(*(_QWORD *)(v579 + 32) + 36), a1[1], (uint64_t)&v604);
      if ((_BYTE)v606)
      {
        v165 = v604;
        if (v604)
        {
          v162 = v164;
          v164 = *(unsigned __int16 *)v604[2];
          goto LABEL_304;
        }
      }
LABEL_306:
      v223 = **(unsigned __int16 **)(v163 + 16);
      if ((v223 - 118) > 8 || ((1 << (v223 - 118)) & 0x143) == 0)
        goto LABEL_533;
      v225 = *(_DWORD *)(*(_QWORD *)(v163 + 32) + 36);
      v226 = a1[1];
      if (v225 < 0 && (v225 & 0x7FFFFFFFu) < *(_DWORD *)(v226 + 432))
        v227 = *(void ***)(*(_QWORD *)(v226 + 424) + 8 * (v225 & 0x7FFFFFFF));
      else
        v227 = 0;
      v228 = (*(_DWORD *)(a2 + 40) - 1);
      v603 = (uint64_t)v227;
      v229 = *(_QWORD *)(a2 + 32);
      v230 = *(_DWORD *)(v229 + 4);
      if (v230 < 0 && (v231 = v230 & 0x7FFFFFFF, v231 < *(_DWORD *)(v226 + 432)))
        v232 = *(_QWORD *)(*(_QWORD *)(v226 + 424) + 8 * v231);
      else
        v232 = 0;
      v590 = v232;
      v233 = *(_DWORD *)(v229 + 32 * v228 + 4);
      if (v233 < 0 && (v234 = v233 & 0x7FFFFFFF, v234 < *(_DWORD *)(v226 + 432)))
        v235 = *(_QWORD *)(*(_QWORD *)(v226 + 424) + 8 * v234);
      else
        v235 = 0;
      v237 = sub_1C4825F50((unint64_t *)&v603);
      if ((_DWORD)v236 == 1)
      v239 = sub_1C4825F50(&v590);
      if ((_DWORD)v238 == 1)
      if (v223 != 119)
        goto LABEL_533;
      if ((v235 & 0xFFFFFFFFFFFFFFF9) == 0 || (v235 & 4) == 0)
      {
        v240 = v235 & 1;
        goto LABEL_347;
      }
      v240 = v235 & 1;
      v241 = 3;
      if ((v235 & 1) == 0)
        v241 = 19;
      v242 = v235 >> v241;
      v243 = v235 & 0x8000000000000000 | (8 * v242) | 1;
      v244 = (v235 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v242) | 2;
      if ((v235 & 2) == 0)
        v244 = v243;
      if ((v590 & 0xFFFFFFFFFFFFFFF9) == 0 || (v590 & 4) == 0)
      {
        if (v244 == v590)
        {
          v250 = 1;
          goto LABEL_485;
        }
LABEL_347:
        v13 = 0;
        if ((v603 & 1) == 0 || !v240)
          goto LABEL_534;
        if ((v590 & 0xFFFFFFFFFFFFFFF9) != 0 && (v590 & 4) != 0)
          goto LABEL_533;
        v251 = v237 / v239;
        if (v237 % v239)
          goto LABEL_533;
        v601 = v590;
        v602 = (void **)v603;
        LODWORD(v604) = 74;
        v605 = (uint64_t)&v601;
        v606 = 2;
        v607 = 0;
        v608 = 0;
        v252 = a1[2];
        v253 = *(_DWORD *)(v252 + 4880);
        if (v253)
          v254 = v253 - 45;
        else
          v254 = 29;
        v255 = sub_1C553C530(v252 + 168 * v254 + 8, (uint64_t)&v604);
        if (v255 == 11)
        {
          if (!v606)
          {
LABEL_357:
            v604 = &v606;
            v605 = 0x800000000;
            sub_1C4893E04((char *)&v604, v237 / v239, 0);
            if (v239 <= v237)
            {
              v345 = 0;
              if (v251 <= 1)
                v346 = 1;
              else
                v346 = v251;
              v347 = 4;
              do
              {
                if (v345 >= v228)
                  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[1], v590, "", 0);
                else
                  GenericVirtualRegister = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v347);
                v256 = (char *)v604;
                *((_DWORD *)v604 + v345++) = GenericVirtualRegister;
                v347 += 32;
              }
              while (v346 != v345);
            }
            else
            {
              v256 = (char *)v604;
            }
            v349 = *a1;
            *(_QWORD *)(v349 + 40) = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(v349 + 48) = a2;
            v350 = *a1;
            LODWORD(v598) = v225;
            v600 = 0;
            sub_1C5547540(v350, v256, v605, (uint64_t)&v598);
            sub_1C4860A74((unsigned int *)&v591, v604, (_BYTE *)v604 + 4 * v251);
            v351 = *(unsigned int *)(v584 + 8);
            if (v351 >= *(_DWORD *)(v584 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v584, v584 + 16, v351 + 1, 8);
              LODWORD(v351) = *(_DWORD *)(v584 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v584 + 8 * v351) = a2;
            ++*(_DWORD *)(v584 + 8);
            sub_1C55181AC((uint64_t)a1, a2, v579, v584, 0);
            if (v604 != &v606)
              free(v604);
            goto LABEL_393;
          }
          v413 = 0;
          v414 = v252 + 35456;
          v415 = 1;
          while (1)
          {
            v416 = *(_QWORD *)(v605 + 8 * v413);
            LODWORD(v598) = (_DWORD)v604;
            HIDWORD(v598) = v415 - 1;
            v599 = v416;
            v255 = sub_1C553DEB0(v414, (uint64_t)&v598);
            if (v255)
              break;
            v413 = v415;
            v371 = v606 > v415++;
            if (!v371)
              goto LABEL_357;
          }
        }
        if (v255 - 9 < 2)
          goto LABEL_533;
        goto LABEL_357;
      }
      v245 = 3;
      if ((v590 & 1) == 0)
        v245 = 19;
      v246 = v590 >> v245;
      if ((v590 & 2) != 0)
        v247 = (v590 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v246) | 2;
      else
        v247 = v590 & 0x8000000000000000 | (8 * v246) | 1;
      if (v244 != v247)
        goto LABEL_347;
      v248 = v603;
      v249 = 0x800000000000000;
      if ((v603 & 2) == 0)
        v249 = 0x8000000000000;
      if ((v249 & v603) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v238);
        v248 = v603;
      }
      v250 = (unsigned __int16)(v248 >> 3) / v228;
LABEL_485:
      v352 = sub_1C626E9C8((unint64_t *)&v603, v250);
      v601 = v352;
      v602 = (void **)v603;
      LODWORD(v604) = 74;
      v605 = (uint64_t)&v601;
      v606 = 2;
      v607 = 0;
      v608 = 0;
      v353 = a1[2];
      v354 = *(_DWORD *)(v353 + 4880);
      if (v354)
        v355 = v354 - 45;
      else
        v355 = 29;
      v356 = sub_1C553C530(v353 + 168 * v355 + 8, (uint64_t)&v604);
      if (v356 == 11)
      {
        if (v606)
        {
          v421 = 0;
          v422 = v353 + 35456;
          v423 = 1;
          while (1)
          {
            v424 = *(_QWORD *)(v605 + 8 * v421);
            LODWORD(v598) = (_DWORD)v604;
            HIDWORD(v598) = v423 - 1;
            v599 = v424;
            v425 = sub_1C553DEB0(v422, (uint64_t)&v598);
            if (v425)
              break;
            v421 = v423;
            v371 = v606 > v423++;
            if (!v371)
              goto LABEL_490;
          }
          if (v425 - 9 < 2)
            goto LABEL_533;
        }
LABEL_490:
        v357 = *a1;
        *(_QWORD *)(v357 + 40) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v357 + 48) = a2;
        v358 = (uint64_t *)*a1;
        LODWORD(v604) = v225;
        LODWORD(v606) = 0;
        sub_1C5544C30(v358, v352, (int *)&v604);
        if ((_DWORD)v228)
        {
          v360 = v359;
          v361 = 0;
          do
          {
            v362 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v361 + 4);
            v363 = v592;
            if (v592 >= (unint64_t)HIDWORD(v592))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
              v363 = v592;
            }
            *((_DWORD *)v591 + v363) = v362;
            LODWORD(v592) = v592 + 1;
            v364 = *a1;
            LODWORD(v598) = v362;
            LODWORD(v599) = 1;
            LODWORD(v604) = *(_DWORD *)(*(_QWORD *)(v360 + 32) + v361 + 4);
            LODWORD(v606) = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v364 + 32))(v364, 119, &v598, 1, &v604, 1, 0);
            v361 += 32;
          }
          while (32 * v228 != v361);
        }
        v267 = v584;
        v365 = *(unsigned int *)(v584 + 8);
        if (v365 >= *(_DWORD *)(v584 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v584, v584 + 16, v365 + 1, 8);
          LODWORD(v365) = *(_DWORD *)(v584 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v584 + 8 * v365) = a2;
        ++*(_DWORD *)(v584 + 8);
        v135 = (uint64_t)a1;
        v136 = a2;
        v137 = v579;
        goto LABEL_390;
      }
      if (v356 - 11 < 0xFFFFFFFE)
        goto LABEL_490;
LABEL_533:
      v13 = 0;
LABEL_534:
      for (i = v592; (_DWORD)v592; i = v592)
      {
LABEL_535:
        while (1)
        {
          v391 = *((unsigned int *)v591 + --i);
          LODWORD(v592) = i;
          v392 = a1[1];
          v393 = (uint64_t *)((v391 & 0x80000000) != 0
                           ? *(_QWORD *)(v392 + 24) + 16 * (v391 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v392 + 272) + 8 * v391);
          v394 = *v393;
          if (*v393)
            break;
LABEL_541:
          if (!i)
            goto LABEL_560;
        }
        while ((*(_BYTE *)(v394 + 3) & 1) != 0)
        {
          v394 = *(_QWORD *)(v394 + 24);
          if (!v394)
            goto LABEL_541;
        }
        v395 = *(_QWORD *)(v394 + 8);
LABEL_544:
        v396 = **(unsigned __int16 **)(v395 + 16);
        if ((v396 - 73) > 0x35 || ((1 << (v396 - 73)) & 0x28600000000003) == 0)
        {
          if (v396 == 19)
          {
            v399 = *(_DWORD *)(*(_QWORD *)(v395 + 32) + 4);
            if (v399 < 0)
            {
              v400 = v592;
              if (v592 >= (unint64_t)HIDWORD(v592))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                v400 = v592;
              }
              *((_DWORD *)v591 + v400) = v399;
              LODWORD(v592) = v592 + 1;
            }
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a4 + 64))(a4);
        }
        v398 = *(_QWORD *)(v394 + 8);
        while (1)
        {
          v394 = *(_QWORD *)(v394 + 24);
          if (!v394)
            break;
          if ((*(_BYTE *)(v394 + 3) & 1) == 0)
          {
            v395 = *(_QWORD *)(v394 + 8);
            if (v395 != v398)
              goto LABEL_544;
          }
        }
      }
LABEL_560:
      if (v591 != v593)
        free(v591);
      return v13;
    case 'K':
    case 'N':
      goto LABEL_560;
    case 'L':
    case 'M':
    case 'O':
      v14 = a1[1];
      v15 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
      if ((v15 & 0x80000000) != 0)
        v16 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
      else
        v16 = (uint64_t *)(*(_QWORD *)(v14 + 272) + 8 * v15);
      v27 = *v16;
      if (!v27)
        goto LABEL_58;
      while ((*(_BYTE *)(v27 + 3) & 1) != 0)
      {
        v27 = *(_QWORD *)(v27 + 24);
        if (!v27)
        {
LABEL_58:
          v13 = 0;
          goto LABEL_534;
        }
      }
      for (j = *(_QWORD *)(v27 + 8); ; j = *(_QWORD *)(v27 + 8))
      {
        v29 = **(unsigned __int16 **)(j + 16);
        if (v29 == 74 || v29 == 119)
        {
          v13 = 0;
          i = 1;
          v593[0] = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
          LODWORD(v592) = 1;
          goto LABEL_535;
        }
        do
        {
          v27 = *(_QWORD *)(v27 + 24);
          if (!v27)
            goto LABEL_58;
        }
        while ((*(_BYTE *)(v27 + 3) & 1) != 0 || *(_QWORD *)(v27 + 8) == j);
      }
    default:
      switch(**(_WORD **)(a2 + 16))
      {
        case 'v':
          v17 = *a1;
          *(_QWORD *)(v17 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v17 + 48) = a2;
          v18 = (unsigned __int8 **)(a2 + 56);
          v19 = (unsigned __int8 **)(v17 + 32);
          if (a2 + 56 != v17 + 32)
          {
            if (*v19)
              llvm::MetadataTracking::untrack(v17 + 32, *v19);
            v20 = *v18;
            *v19 = *v18;
            if (v20)
              llvm::MetadataTracking::track((uint64_t)v19, v20, 2);
          }
          v21 = *(_QWORD *)(a2 + 32);
          v22 = *(_DWORD *)(v21 + 4);
          v23 = a1[1];
          v24 = sub_1C5517B4C(v23, *(_DWORD *)(v21 + 36));
          v25 = v24;
          if ((v24 & 0x80000000) != 0)
            v26 = (uint64_t *)(*(_QWORD *)(v23 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
          else
            v26 = (uint64_t *)(*(_QWORD *)(v23 + 272) + 8 * v24);
          v76 = *v26;
          if (v76)
          {
            if ((*(_BYTE *)(v76 + 3) & 1) != 0 || (v76 = *(_QWORD *)(v76 + 24)) != 0 && (*(_BYTE *)(v76 + 3) & 1) != 0)
            {
              v443 = *(_QWORD *)(v76 + 8);
              if (v443)
              {
                if (**(_WORD **)(v443 + 16) == 119 && *(_DWORD *)(v443 + 40) == 2)
                {
                  v444 = *(_DWORD *)(*(_QWORD *)(v443 + 32) + 36);
                  if (v22 < 0 && (v22 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v23 + 432))
                    v445 = *(_QWORD *)(*(_QWORD *)(v23 + 424) + 8 * (v22 & 0x7FFFFFFF));
                  else
                    v445 = 0;
                  if ((v444 & 0x80000000) != 0 && (v444 & 0x7FFFFFFF) < *(_DWORD *)(v23 + 432))
                    v488 = *(_QWORD *)(*(_QWORD *)(v23 + 424) + 8 * (v444 & 0x7FFFFFFF));
                  else
                    v488 = 0;
                  v489 = (uint64_t *)*a1;
                  if (v445 == v488)
                  {
                    sub_1C5517BEC(v22, v444, (_QWORD *)v23, *a1, (uint64_t)&v591, a4 + 8);
                  }
                  else
                  {
                    LODWORD(v594) = v22;
                    LODWORD(v595) = 1;
                    LODWORD(v604) = v444;
                    LODWORD(v606) = 0;
                    sub_1C5546B4C(v489, 118, (unint64_t *)&v594, (int *)&v604);
                  }
                  v493 = v592;
                  if (v592 >= HIDWORD(v592))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                    v493 = v592;
                  }
                  *((_DWORD *)v591 + v493) = v22;
                  LODWORD(v592) = v592 + 1;
                  v494 = a1[1];
                  if ((v25 & 0x80000000) != 0)
                    v495 = (uint64_t *)(*(_QWORD *)(v494 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
                  else
                    v495 = (uint64_t *)(*(_QWORD *)(v494 + 272) + 8 * v25);
                  v497 = *v495;
                  if (v497
                    && ((*(_BYTE *)(v497 + 3) & 1) != 0
                     || (v497 = *(_QWORD *)(v497 + 24)) != 0 && (*(_BYTE *)(v497 + 3) & 1) != 0))
                  {
                    v498 = *(_QWORD *)(v497 + 8);
                  }
                  else
                  {
                    v498 = 0;
                  }
                  v499 = *(unsigned int *)(a3 + 8);
                  if (v499 >= *(_DWORD *)(a3 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v499 + 1, 8);
                    LODWORD(v499) = *(_DWORD *)(a3 + 8);
                  }
                  v302 = a3;
                  *(_QWORD *)(*(_QWORD *)a3 + 8 * v499) = a2;
                  ++*(_DWORD *)(a3 + 8);
LABEL_808:
                  v299 = (uint64_t)a1;
                  v300 = a2;
                  v301 = v498;
                  goto LABEL_417;
                }
              }
            }
          }
          v77 = a3;
          v78 = (int **)(*(_QWORD *)(v23 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
          if ((v24 & 0x80000000) == 0)
            v78 = (int **)(*(_QWORD *)(v23 + 272) + 8 * v24);
          v79 = *v78;
          v80 = *v79;
          if ((*v79 & 0x1000000) != 0)
          {
            v82 = *((_QWORD *)v79 + 1);
            if (!v82)
              goto LABEL_215;
          }
          else
          {
            v81 = *((_QWORD *)v79 + 3);
            if (!v81)
              goto LABEL_81;
            if ((*(_BYTE *)(v81 + 3) & 1) == 0)
              goto LABEL_81;
            v82 = *(_QWORD *)(v81 + 8);
            if (!v82)
              goto LABEL_81;
          }
          if (**(_WORD **)(v82 + 16) == 118)
          {
            v83 = v82;
            if (*(_DWORD *)(v82 + 40) == 2)
            {
LABEL_85:
              v84 = *(_DWORD *)(*(_QWORD *)(v83 + 32) + 36);
              v85 = *a1;
              v86 = **(unsigned __int16 **)(v82 + 16);
              LODWORD(v594) = v22;
              LODWORD(v595) = 1;
              LODWORD(v604) = v84;
              LODWORD(v606) = 0;
              (*(void (**)(uint64_t, uint64_t, _QWORD **, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, v86, &v594, 1, &v604, 1, 0);
              v87 = v592;
              if (v592 < HIDWORD(v592))
              {
LABEL_437:
                *((_DWORD *)v591 + v87) = v22;
                LODWORD(v592) = v592 + 1;
                v322 = *(unsigned int *)(v77 + 8);
                if (v322 >= *(_DWORD *)(v77 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v77, v77 + 16, v322 + 1, 8);
                  LODWORD(v322) = *(_DWORD *)(v77 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v77 + 8 * v322) = a2;
                ++*(_DWORD *)(v77 + 8);
                v206 = (uint64_t)a1;
                v207 = a2;
                v208 = v82;
                v209 = v77;
LABEL_440:
                sub_1C55181AC(v206, v207, v208, v209, 0);
                v13 = 1;
                goto LABEL_534;
              }
LABEL_86:
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v87 + 1, 4);
              LODWORD(v87) = v592;
              goto LABEL_437;
            }
          }
          v166 = v79;
          if ((v80 & 0x1000000) == 0)
          {
            v166 = (int *)*((_QWORD *)v79 + 3);
            if (!v166 || (*((_BYTE *)v166 + 3) & 1) == 0)
              goto LABEL_81;
          }
          v83 = *((_QWORD *)v166 + 1);
          if (v83 && **(_WORD **)(v83 + 16) == 124 && *(_DWORD *)(v83 + 40) == 2)
            goto LABEL_85;
          v167 = v79;
          if ((v80 & 0x1000000) == 0)
          {
            v167 = (int *)*((_QWORD *)v79 + 3);
            if (!v167 || (*((_BYTE *)v167 + 3) & 1) == 0)
              goto LABEL_81;
          }
          v83 = *((_QWORD *)v167 + 1);
          if (v83 && **(_WORD **)(v83 + 16) == 126 && *(_DWORD *)(v83 + 40) == 2)
            goto LABEL_85;
          if ((v80 & 0x1000000) == 0)
LABEL_81:
            v79 = (int *)*((_QWORD *)v79 + 3);
LABEL_215:
          v82 = *((_QWORD *)v79 + 1);
          if (**(_WORD **)(v82 + 16) == 120)
          {
            if (v22 < 0 && (v22 & 0x7FFFFFFFu) < *(_DWORD *)(v23 + 432))
              v168 = *(void ***)(*(_QWORD *)(v23 + 424) + 8 * (v22 & 0x7FFFFFFF));
            else
              v168 = 0;
            v598 = (uint64_t)v168;
            v601 = (unint64_t)v168;
            LODWORD(v604) = 120;
            v605 = (uint64_t)&v601;
            v606 = 1;
            v607 = 0;
            v608 = 0;
            v169 = a1[2];
            v170 = *(_DWORD *)(v169 + 12608);
            if (v170)
              v171 = v170 - 45;
            else
              v171 = 75;
            v172 = sub_1C553C530(v169 + 168 * v171 + 8, (uint64_t)&v604);
            if (v172 != 11)
            {
              if (v172)
                goto LABEL_225;
LABEL_431:
              v315 = *(_QWORD *)(v82 + 32);
              v316 = (llvm::ConstantInt *****)*a1;
              LODWORD(v604) = v22;
              LODWORD(v605) = 1;
              v317 = (llvm::APInt *)(*(_QWORD *)(v315 + 48) + 24);
              v319 = sub_1C4825F50((unint64_t *)&v598);
              if ((_DWORD)v318 == 1)
              llvm::APInt::sext(v317, v319, (llvm::APInt *)&v594);
              v321 = llvm::ConstantInt::get(***v316[1], (llvm::LLVMContext *)&v594, v320);
              ((void (*)(llvm::ConstantInt *****, unint64_t **, llvm::ValueHandleBase *))(*v316)[2])(v316, &v604, v321);
              if (v595 >= 0x41 && v594)
                MEMORY[0x1CAA32F9C](v594, 0x1000C8000313F17);
              v87 = v592;
              if (v592 < HIDWORD(v592))
                goto LABEL_437;
              goto LABEL_86;
            }
            if (!v606)
              goto LABEL_431;
            v382 = 0;
            v383 = v169 + 35456;
            v384 = 1;
            while (1)
            {
              v385 = *(_QWORD *)(v605 + 8 * v382);
              LODWORD(v594) = (_DWORD)v604;
              HIDWORD(v594) = v384 - 1;
              v595 = v385;
              v386 = sub_1C553DEB0(v383, (uint64_t)&v594);
              if (v386)
                break;
              v382 = v384;
              v371 = v606 > v384++;
              if (!v371)
                goto LABEL_431;
            }
            if (v386 - 1 >= 0xA)
              goto LABEL_431;
          }
LABEL_225:
          v13 = sub_1C5517EC8(a1, a2, v77, (uint64_t)&v591);
          goto LABEL_534;
        case 'w':
          v586 = a3;
          v50 = *a1;
          *(_QWORD *)(v50 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v50 + 48) = a2;
          v51 = *(_QWORD *)(a2 + 32);
          v52 = *(_DWORD *)(v51 + 4);
          v53 = a1[1];
          v54 = sub_1C5517B4C(v53, *(_DWORD *)(v51 + 36));
          v55 = v54;
          if ((v54 & 0x80000000) != 0)
            v56 = (uint64_t *)(*(_QWORD *)(v53 + 24) + 16 * (v54 & 0x7FFFFFFF) + 8);
          else
            v56 = (uint64_t *)(*(_QWORD *)(v53 + 272) + 8 * v54);
          v88 = *v56;
          if (v88
            && ((*(_BYTE *)(v88 + 3) & 1) != 0 || (v88 = *(_QWORD *)(v88 + 24)) != 0 && (*(_BYTE *)(v88 + 3) & 1) != 0))
          {
            v74 = *(_QWORD *)(v88 + 8);
          }
          else
          {
            v74 = 0;
          }
          v89 = **(unsigned __int16 **)(v74 + 16);
          if (v89 != 120)
            goto LABEL_172;
          if (v52 < 0 && (v52 & 0x7FFFFFFFu) < *(_DWORD *)(v53 + 432))
            v90 = *(void ***)(*(_QWORD *)(v53 + 424) + 8 * (v52 & 0x7FFFFFFF));
          else
            v90 = 0;
          v598 = (uint64_t)v90;
          v601 = (unint64_t)v90;
          LODWORD(v604) = 120;
          v605 = (uint64_t)&v601;
          v606 = 1;
          v607 = 0;
          v608 = 0;
          v144 = a1[2];
          v145 = *(_DWORD *)(v144 + 12608);
          if (v145)
            v146 = v145 - 45;
          else
            v146 = 75;
          v147 = sub_1C553C530(v144 + 168 * v146 + 8, (uint64_t)&v604);
          if (v147 == 11)
          {
            if (v606)
            {
              v372 = 0;
              v373 = v144 + 35456;
              v374 = 1;
              while (1)
              {
                v375 = *(_QWORD *)(v605 + 8 * v372);
                LODWORD(v594) = (_DWORD)v604;
                HIDWORD(v594) = v374 - 1;
                v595 = v375;
                v376 = sub_1C553DEB0(v373, (uint64_t)&v594);
                if (v376)
                  break;
                v372 = v374;
                v371 = v606 > v374++;
                if (!v371)
                  goto LABEL_395;
              }
              if (v376 - 1 <= 9)
              {
LABEL_171:
                v89 = **(unsigned __int16 **)(v74 + 16);
LABEL_172:
                if (v89 == 76)
                {
                  v148 = *(_DWORD *)(*(_QWORD *)(v74 + 32) + 36);
                  v149 = a1[1];
                  if ((v148 & 0x80000000) != 0 && (v148 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v149 + 432))
                    v150 = *(_QWORD *)(*(_QWORD *)(v149 + 424) + 8 * (v148 & 0x7FFFFFFF));
                  else
                    v150 = 0;
                  v601 = v150;
                  if (v52 < 0 && (v52 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v149 + 432))
                    v157 = *(void ***)(*(_QWORD *)(v149 + 424) + 8 * (v52 & 0x7FFFFFFF));
                  else
                    v157 = 0;
                  v603 = (uint64_t)v157;
                  v159 = sub_1C4825F50((unint64_t *)&v603);
                  if ((_DWORD)v158 == 1)
                  v161 = sub_1C4825F50(&v601);
                  if ((_DWORD)v160 == 1)
                  if ((v603 & 1) == 0 || (v601 & 1) == 0)
                    goto LABEL_269;
                  if (v159 < v161)
                  {
                    v598 = v603;
                    v599 = v601;
                    LODWORD(v604) = 119;
                    v605 = (uint64_t)&v598;
                    v606 = 2;
                    v607 = 0;
                    v608 = 0;
                    v182 = a1[2];
                    v183 = *(_DWORD *)(v182 + 12440);
                    if (v183)
                      v184 = v183 - 45;
                    else
                      v184 = 74;
                    v185 = sub_1C553C530(v182 + 168 * v184 + 8, (uint64_t)&v604);
                    if (v185 == 11)
                    {
                      if (!v606)
                      {
LABEL_246:
                        v186 = *a1;
                        LODWORD(v594) = v52;
                        LODWORD(v595) = 1;
                        LODWORD(v604) = v148;
                        LODWORD(v606) = 0;
                        (*(void (**)(uint64_t, uint64_t, _QWORD **, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v186 + 32))(v186, 119, &v594, 1, &v604, 1, 0);
                        v187 = v592;
                        if (v592 >= HIDWORD(v592))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                          v187 = v592;
                        }
                        *((_DWORD *)v591 + v187) = v52;
                        LODWORD(v592) = v592 + 1;
                        goto LABEL_284;
                      }
                      v387 = 0;
                      v388 = v182 + 35456;
                      v389 = 1;
                      while (1)
                      {
                        v390 = *(_QWORD *)(v605 + 8 * v387);
                        LODWORD(v594) = (_DWORD)v604;
                        HIDWORD(v594) = v389 - 1;
                        v595 = v390;
                        v185 = sub_1C553DEB0(v388, (uint64_t)&v594);
                        if (v185)
                          break;
                        v387 = v389;
                        v371 = v606 > v389++;
                        if (!v371)
                          goto LABEL_246;
                      }
                    }
                    if (v185 - 9 < 2)
                      goto LABEL_269;
                    goto LABEL_246;
                  }
                  if (v159 == v161)
                  {
                    sub_1C5517BEC(v52, v148, (_QWORD *)a1[1], *a1, (uint64_t)&v591, a4 + 8);
LABEL_284:
                    v204 = v586;
LABEL_285:
                    v205 = *(unsigned int *)(v204 + 8);
                    if (v205 >= *(_DWORD *)(v204 + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v204, v204 + 16, v205 + 1, 8);
                      LODWORD(v205) = *(_DWORD *)(v204 + 8);
                    }
                    *(_QWORD *)(*(_QWORD *)v204 + 8 * v205) = a2;
                    ++*(_DWORD *)(v204 + 8);
                    v206 = (uint64_t)a1;
                    v207 = a2;
                    v208 = v74;
                    v209 = v204;
                    goto LABEL_440;
                  }
                  v210 = v159 / v161;
                  if (v159 % v161)
                    goto LABEL_269;
                  v598 = v603;
                  v599 = v601;
                  LODWORD(v604) = 76;
                  v605 = (uint64_t)&v598;
                  v606 = 2;
                  v607 = 0;
                  v608 = 0;
                  v211 = a1[2];
                  v212 = *(_DWORD *)(v211 + 5216);
                  if (v212)
                    v213 = v212 - 45;
                  else
                    v213 = 31;
                  v214 = sub_1C553C530(v211 + 168 * v213 + 8, (uint64_t)&v604);
                  if (v214 == 11)
                  {
                    if (!v606)
                    {
LABEL_294:
                      v604 = &v606;
                      v605 = 0x800000000;
                      sub_1C4893E04((char *)&v604, v210, 0);
                      v215 = (int *)v604;
                      if (v210 <= 1)
                        v216 = 1;
                      else
                        v216 = v210;
                      v217 = (int *)(*(_QWORD *)(v74 + 32) + 36);
                      v218 = v604;
                      do
                      {
                        v219 = *v217;
                        v217 += 8;
                        *(_DWORD *)v218 = v219;
                        v218 = (unint64_t *)((char *)v218 + 4);
                        --v216;
                      }
                      while (v216);
                      v220 = *a1;
                      LODWORD(v594) = v52;
                      LODWORD(v595) = 1;
                      sub_1C5544D6C(v220, (uint64_t)&v594, v215, v605);
                      v221 = v592;
                      v204 = v586;
                      if (v592 >= HIDWORD(v592))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                        v221 = v592;
                      }
                      *((_DWORD *)v591 + v221) = v52;
                      LODWORD(v592) = v592 + 1;
                      if (v604 != &v606)
                        free(v604);
                      goto LABEL_285;
                    }
                    v402 = 0;
                    v403 = v211 + 35456;
                    v404 = 1;
                    while (1)
                    {
                      v405 = *(_QWORD *)(v605 + 8 * v402);
                      LODWORD(v594) = (_DWORD)v604;
                      HIDWORD(v594) = v404 - 1;
                      v595 = v405;
                      v214 = sub_1C553DEB0(v403, (uint64_t)&v594);
                      if (v214)
                        break;
                      v402 = v404;
                      v371 = v606 > v404++;
                      if (!v371)
                        goto LABEL_294;
                    }
                  }
                  if (v214 - 9 < 2)
                    goto LABEL_269;
                  goto LABEL_294;
                }
                v155 = a1[1];
                if ((v55 & 0x80000000) != 0)
                  v156 = (uint64_t *)(*(_QWORD *)(v155 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
                else
                  v156 = (uint64_t *)(*(_QWORD *)(v155 + 272) + 8 * v55);
                v173 = *v156;
                if (v173)
                {
                  if ((*(_BYTE *)(v173 + 3) & 1) != 0
                    || (v173 = *(_QWORD *)(v173 + 24)) != 0 && (*(_BYTE *)(v173 + 3) & 1) != 0)
                  {
                    v469 = *(_QWORD *)(v173 + 8);
                    if (v469)
                    {
                      if (**(_WORD **)(v469 + 16) == 119 && *(_DWORD *)(v469 + 40) == 2)
                      {
                        v470 = *(unsigned int *)(*(_QWORD *)(v469 + 32) + 36);
                        v471 = *a1;
                        LODWORD(v594) = v52;
                        LODWORD(v595) = 1;
                        LODWORD(v604) = v470;
                        LODWORD(v606) = 0;
                        (*(void (**)(uint64_t, uint64_t, _QWORD **, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v471 + 32))(v471, 119, &v594, 1, &v604, 1, 0);
                        v472 = v592;
                        if (v592 >= HIDWORD(v592))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                          v472 = v592;
                        }
                        *((_DWORD *)v591 + v472) = v52;
                        LODWORD(v592) = v592 + 1;
                        v473 = a1[1];
                        if ((v470 & 0x80000000) != 0)
                          v474 = (uint64_t *)(*(_QWORD *)(v473 + 24) + 16 * (v470 & 0x7FFFFFFF) + 8);
                        else
                          v474 = (uint64_t *)(*(_QWORD *)(v473 + 272) + 8 * v470);
                        v520 = *v474;
                        if (v520
                          && ((*(_BYTE *)(v520 + 3) & 1) != 0
                           || (v520 = *(_QWORD *)(v520 + 24)) != 0 && (*(_BYTE *)(v520 + 3) & 1) != 0))
                        {
                          v498 = *(_QWORD *)(v520 + 8);
                        }
                        else
                        {
                          v498 = 0;
                        }
                        v521 = *(unsigned int *)(v586 + 8);
                        if (v521 >= *(_DWORD *)(v586 + 12))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v586, v586 + 16, v521 + 1, 8);
                          LODWORD(v521) = *(_DWORD *)(v586 + 8);
                        }
                        v302 = v586;
                        *(_QWORD *)(*(_QWORD *)v586 + 8 * v521) = a2;
                        ++*(_DWORD *)(v586 + 8);
                        goto LABEL_808;
                      }
                    }
                  }
                }
                if (v52 < 0 && (v52 & 0x7FFFFFFFu) < *(_DWORD *)(v155 + 432))
                  v174 = *(_QWORD *)(*(_QWORD *)(v155 + 424) + 8 * (v52 & 0x7FFFFFFF));
                else
                  v174 = 0;
                v601 = v174;
                if ((v55 & 0x80000000) != 0
                  && (v55 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v155 + 432))
                {
                  v175 = *(void ***)(*(_QWORD *)(v155 + 424) + 8 * (v55 & 0x7FFFFFFF));
                }
                else
                {
                  v175 = 0;
                }
                v603 = (uint64_t)v175;
                v176 = sub_1C4825F50((unint64_t *)&v603);
                if (**(_WORD **)(v74 + 16) != 82)
                  goto LABEL_269;
                v178 = v176;
                v179 = a1[1];
                v180 = (uint64_t *)((v55 & 0x80000000) != 0
                                 ? *(_QWORD *)(v179 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8
                                 : *(_QWORD *)(v179 + 272) + 8 * v55);
                v188 = *v180;
                if (!v188)
                  goto LABEL_269;
                while ((*(_BYTE *)(v188 + 3) & 1) != 0)
                {
                  v188 = *(_QWORD *)(v188 + 24);
                  if (!v188)
                    goto LABEL_269;
                }
                while (1)
                {
                  v188 = *(_QWORD *)(v188 + 24);
                  if (!v188)
                    break;
                  if ((*(_BYTE *)(v188 + 3) & 1) == 0)
                    goto LABEL_269;
                }
                if ((_DWORD)v177 == 1)
                if (v178 < 0x41)
                {
LABEL_269:
                  v196 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
                  v197 = v592;
                  if (v592 >= HIDWORD(v592))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                    v197 = v592;
                  }
                  v13 = 0;
                  *((_DWORD *)v591 + v197) = v196;
                  i = v592 + 1;
                  LODWORD(v592) = i;
                  if (i)
                    goto LABEL_535;
                  goto LABEL_560;
                }
                v189 = *(_DWORD *)(*(_QWORD *)(v74 + 32) + 36);
                if (v189 < 0 && (v190 = a1[1], (v189 & 0x7FFFFFFFu) < *(_DWORD *)(v190 + 432)))
                {
                  v191 = *(_QWORD *)(*(_QWORD *)(v190 + 424) + 8 * (v189 & 0x7FFFFFFF));
                  if ((v191 & 2) != 0)
                  {
                    v192 = 35;
                    v193 = 19;
                    if ((v191 & 4) == 0)
                      v192 = 19;
                    v194 = v191 >> v192;
                    if ((v191 & 4) == 0)
                      v193 = 3;
                    if ((v191 & 1) != 0)
                      v193 = 3;
                    v195 = (8 * (unsigned __int16)(v191 >> v193)) & 0xFFFFF8000007FFFFLL | ((v194 & 0xFFFFFF) << 19) | 2;
LABEL_363:
                    v590 = v195;
                    v259 = sub_1C4825F50(&v601);
                    if ((_DWORD)v258 == 1)
                    v261 = sub_1C4825F50(&v590);
                    if ((_DWORD)v260 == 1)
                    v262 = v52;
                    if (v259 < v261)
                      v262 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[1], v590, "", 0);
                    v263 = *a1;
                    LODWORD(v594) = v262;
                    LODWORD(v595) = 1;
                    v598 = 257;
                    LODWORD(v599) = 0;
                    v264 = sub_1C5544694(v263, (unint64_t *)&v598, 0);
                    LODWORD(v604) = v189;
                    LODWORD(v606) = 0;
                    v607 = v264;
                    v608 = v265;
                    v609 = 1;
                    (*(void (**)(uint64_t, uint64_t, _QWORD **, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v263 + 32))(v263, 205, &v594, 1, &v604, 2, 0);
                    v266 = v592;
                    if (v592 >= HIDWORD(v592))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                      v266 = v592;
                    }
                    *((_DWORD *)v591 + v266) = v262;
                    LODWORD(v592) = v592 + 1;
                    v267 = v586;
                    if (v259 >= v261)
                      goto LABEL_387;
                    v268 = *a1;
                    LODWORD(v594) = v52;
                    LODWORD(v595) = 1;
                    LODWORD(v604) = v262;
                    LODWORD(v606) = 0;
                    (*(void (**)(uint64_t, uint64_t, _QWORD **, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v268 + 32))(v268, 119, &v594, 1, &v604, 1, 0);
                    v269 = v592;
                    if (v592 >= HIDWORD(v592))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                      v269 = v592;
                    }
                    *((_DWORD *)v591 + v269) = v52;
LABEL_386:
                    LODWORD(v592) = v592 + 1;
LABEL_387:
                    v279 = *(unsigned int *)(v267 + 8);
                    if (v279 >= *(_DWORD *)(v267 + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v267, v267 + 16, v279 + 1, 8);
                      LODWORD(v279) = *(_DWORD *)(v267 + 8);
                    }
                    *(_QWORD *)(*(_QWORD *)v267 + 8 * v279) = a2;
                    ++*(_DWORD *)(v267 + 8);
                    v135 = (uint64_t)a1;
                    v136 = a2;
                    v137 = v74;
                    goto LABEL_390;
                  }
                }
                else
                {
                  v191 = 0;
                }
                v257 = 3;
                if ((v191 & 1) == 0)
                  v257 = 19;
                v195 = v191 & 0x8000000000000000 | (8 * (v191 >> v257)) | 1;
                goto LABEL_363;
              }
            }
          }
          else if (v147)
          {
            goto LABEL_171;
          }
LABEL_395:
          v280 = *(_QWORD *)(v74 + 32);
          v281 = (llvm::ConstantInt *****)*a1;
          LODWORD(v604) = v52;
          LODWORD(v605) = 1;
          v282 = (llvm::APInt *)(*(_QWORD *)(v280 + 48) + 24);
          v284 = sub_1C4825F50((unint64_t *)&v598);
          if ((_DWORD)v283 == 1)
          llvm::APInt::trunc(v282, v284, (llvm::APInt *)&v594);
          v286 = llvm::ConstantInt::get(***v281[1], (llvm::LLVMContext *)&v594, v285);
          ((void (*)(llvm::ConstantInt *****, unint64_t **, llvm::ValueHandleBase *))(*v281)[2])(v281, &v604, v286);
          if (v595 >= 0x41 && v594)
            MEMORY[0x1CAA32F9C](v594, 0x1000C8000313F17);
          v287 = v592;
          if (v592 >= HIDWORD(v592))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
            v287 = v592;
          }
          *((_DWORD *)v591 + v287) = v52;
          LODWORD(v592) = v592 + 1;
          v288 = *(unsigned int *)(v586 + 8);
          if (v288 >= *(_DWORD *)(v586 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v586, v586 + 16, v288 + 1, 8);
            LODWORD(v288) = *(_DWORD *)(v586 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v586 + 8 * v288) = a2;
          ++*(_DWORD *)(v586 + 8);
          v206 = (uint64_t)a1;
          v207 = a2;
          v208 = v74;
          v209 = v586;
          goto LABEL_440;
        case '|':
          v39 = *a1;
          *(_QWORD *)(v39 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v39 + 48) = a2;
          v40 = (unsigned __int8 **)(a2 + 56);
          v41 = (unsigned __int8 **)(v39 + 32);
          if (a2 + 56 != v39 + 32)
          {
            if (*v41)
              llvm::MetadataTracking::untrack(v39 + 32, *v41);
            v42 = *v40;
            *v41 = *v40;
            if (v42)
              llvm::MetadataTracking::track((uint64_t)v41, v42, 2);
          }
          v585 = a3;
          v43 = *(_QWORD *)(a2 + 32);
          v44 = *(_DWORD *)(v43 + 4);
          v45 = a1[1];
          v46 = sub_1C5517B4C(v45, *(_DWORD *)(v43 + 36));
          v47 = v46;
          v48 = v46;
          if ((v46 & 0x80000000) != 0)
            v49 = (uint64_t *)(*(_QWORD *)(v45 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
          else
            v49 = (uint64_t *)(*(_QWORD *)(v45 + 272) + 8 * v46);
          v68 = *v49;
          if (v68)
          {
            if ((*(_BYTE *)(v68 + 3) & 1) != 0 || (v68 = *(_QWORD *)(v68 + 24)) != 0 && (*(_BYTE *)(v68 + 3) & 1) != 0)
            {
              v434 = *(_QWORD *)(v68 + 8);
              if (v434)
              {
                if (**(_WORD **)(v434 + 16) == 119 && *(_DWORD *)(v434 + 40) == 2)
                {
                  v435 = *(_QWORD *)(v434 + 32);
                  if (v44 < 0 && (v44 & 0x7FFFFFFFu) < *(_DWORD *)(v45 + 432))
                    v436 = *(void ***)(*(_QWORD *)(v45 + 424) + 8 * (v44 & 0x7FFFFFFF));
                  else
                    v436 = 0;
                  v480 = *(_DWORD *)(v435 + 36);
                  v598 = (uint64_t)v436;
                  LODWORD(v604) = 125;
                  v605 = (uint64_t)&v598;
                  v606 = 1;
                  v607 = 0;
                  v608 = 0;
                  v481 = a1[2];
                  v482 = *(_DWORD *)(v481 + 13448);
                  if (v482)
                    v483 = v482 - 45;
                  else
                    v483 = 80;
                  v484 = sub_1C553C530(v481 + 168 * v483 + 8, (uint64_t)&v604);
                  if (v484 == 11)
                  {
                    if (v606)
                    {
                      v538 = 0;
                      v539 = v481 + 35456;
                      v540 = 1;
                      while (1)
                      {
                        v541 = *(_QWORD *)(v605 + 8 * v538);
                        LODWORD(v594) = (_DWORD)v604;
                        HIDWORD(v594) = v540 - 1;
                        v595 = v541;
                        v542 = sub_1C553DEB0(v539, (uint64_t)&v594);
                        if (v542)
                          break;
                        v538 = v540;
                        v371 = v606 > v540++;
                        if (!v371)
                          goto LABEL_730;
                      }
                      if (v542 - 9 < 2)
                        goto LABEL_533;
                    }
                  }
                  else if (v484 - 11 >= 0xFFFFFFFE)
                  {
                    goto LABEL_533;
                  }
LABEL_730:
                  v485 = a1[1];
                  if ((v47 & 0x80000000) != 0
                    && (v48 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v485 + 432))
                  {
                    v486 = *(_QWORD *)(*(_QWORD *)(v485 + 424) + 8 * (v48 & 0x7FFFFFFF));
                    if ((v486 & 1) != 0)
                    {
                      v487 = (v486 >> 3);
LABEL_766:
                      if (v480 < 0 && (v480 & 0x7FFFFFFFu) < *(_DWORD *)(v485 + 432))
                        v500 = *(void ***)(*(_QWORD *)(v485 + 424) + 8 * (v480 & 0x7FFFFFFF));
                      else
                        v500 = 0;
                      if (v436 != v500)
                      {
                        v504 = (uint64_t *)*a1;
                        v594 = v436;
                        LODWORD(v595) = 0;
                        LODWORD(v604) = v480;
                        LODWORD(v606) = 0;
                        sub_1C5546B4C(v504, 118, (unint64_t *)&v594, (int *)&v604);
                        v480 = *(_DWORD *)(*(_QWORD *)(v505 + 32) + 4);
                      }
                      v506 = *a1;
                      LODWORD(v594) = v44;
                      LODWORD(v595) = 1;
                      LODWORD(v604) = v480;
                      LODWORD(v606) = 0;
                      v607 = v487;
                      v609 = 3;
                      (*(void (**)(uint64_t, uint64_t, _QWORD **, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v506 + 32))(v506, 125, &v594, 1, &v604, 2, 0);
                      v440 = a1[1];
                      if ((v47 & 0x80000000) == 0)
                      {
LABEL_782:
                        v507 = (uint64_t *)(*(_QWORD *)(v440 + 272) + 8 * v48);
                        goto LABEL_797;
                      }
                      v441 = *(_QWORD *)(v440 + 24) + 16 * (v48 & 0x7FFFFFFF);
LABEL_796:
                      v507 = (uint64_t *)(v441 + 8);
LABEL_797:
                      v517 = *v507;
                      if (v517
                        && ((*(_BYTE *)(v517 + 3) & 1) != 0
                         || (v517 = *(_QWORD *)(v517 + 24)) != 0 && (*(_BYTE *)(v517 + 3) & 1) != 0))
                      {
                        v518 = *(_QWORD *)(v517 + 8);
                      }
                      else
                      {
                        v518 = 0;
                      }
                      v519 = *(unsigned int *)(v585 + 8);
                      if (v519 >= *(_DWORD *)(v585 + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v585, v585 + 16, v519 + 1, 8);
                        LODWORD(v519) = *(_DWORD *)(v585 + 8);
                      }
                      v138 = v585;
                      *(_QWORD *)(*(_QWORD *)v585 + 8 * v519) = a2;
                      ++*(_DWORD *)(v585 + 8);
                      v135 = (uint64_t)a1;
                      v136 = a2;
                      v137 = v518;
                      goto LABEL_391;
                    }
                    if ((v486 & 4) != 0)
                    {
                      if ((v486 & 2) != 0)
                        v487 = (unsigned __int16)(v486 >> 19);
                      else
                        v487 = (v486 >> 19);
                      goto LABEL_766;
                    }
                  }
                  else
                  {
                    v486 = 0;
                  }
                  v487 = (unsigned __int16)(v486 >> 3);
                  goto LABEL_766;
                }
              }
            }
          }
          LODWORD(v590) = 0;
          v598 = 0;
          v604 = &v590;
          v605 = (uint64_t)&v590;
          v606 = (unint64_t)&v598;
          LODWORD(v594) = v46;
          v69 = v46 & 0x7FFFFFFF;
          v70 = (uint64_t *)(*(_QWORD *)(v45 + 24) + 16 * v69 + 8);
          if ((v46 & 0x80000000) == 0)
            v70 = (uint64_t *)(*(_QWORD *)(v45 + 272) + 8 * v46);
          v71 = *v70;
          if (v71
            && ((*(_BYTE *)(v71 + 3) & 1) != 0 || (v71 = *(_QWORD *)(v71 + 24)) != 0 && (*(_BYTE *)(v71 + 3) & 1) != 0))
          {
            v598 = *(_QWORD *)(v71 + 8);
            if (v598)
            {
              if ((sub_1C4957E98((_DWORD **)&v604, v45, (unsigned int *)&v594) & 1) != 0)
              {
                v437 = *a1;
                v438 = **(unsigned __int16 **)(v598 + 16);
                LODWORD(v594) = v44;
                LODWORD(v595) = 1;
                LODWORD(v604) = v590;
                LODWORD(v606) = 0;
                (*(void (**)(uint64_t, uint64_t, _QWORD **, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v437 + 32))(v437, v438, &v594, 1, &v604, 1, 0);
                v439 = v592;
                if (v592 >= HIDWORD(v592))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                  v439 = v592;
                }
                *((_DWORD *)v591 + v439) = v44;
                LODWORD(v592) = v592 + 1;
                v440 = a1[1];
                if ((v47 & 0x80000000) == 0)
                  goto LABEL_782;
                v441 = *(_QWORD *)(v440 + 24) + 16 * v69;
                goto LABEL_796;
              }
              v45 = a1[1];
            }
          }
          else
          {
            v598 = 0;
          }
          if ((v47 & 0x80000000) != 0)
            v72 = (uint64_t *)(*(_QWORD *)(v45 + 24) + 16 * v69 + 8);
          else
            v72 = (uint64_t *)(*(_QWORD *)(v45 + 272) + 8 * v48);
          v73 = *v72;
          if ((*(_BYTE *)(v73 + 3) & 1) == 0)
            v73 = *(_QWORD *)(v73 + 24);
          v74 = *(_QWORD *)(v73 + 8);
          if (**(_WORD **)(v74 + 16) != 120)
            goto LABEL_164;
          if (v44 < 0 && (v44 & 0x7FFFFFFFu) < *(_DWORD *)(v45 + 432))
            v75 = *(void ***)(*(_QWORD *)(v45 + 424) + 8 * (v44 & 0x7FFFFFFF));
          else
            v75 = 0;
          v601 = (unint64_t)v75;
          v603 = (uint64_t)v75;
          LODWORD(v604) = 120;
          v605 = (uint64_t)&v603;
          v606 = 1;
          v607 = 0;
          v608 = 0;
          v140 = a1[2];
          v141 = *(_DWORD *)(v140 + 12608);
          if (v141)
            v142 = v141 - 45;
          else
            v142 = 75;
          v143 = sub_1C553C530(v140 + 168 * v142 + 8, (uint64_t)&v604);
          if (v143 == 11)
          {
            if (v606)
            {
              v366 = 0;
              v367 = v140 + 35456;
              v368 = 1;
              while (1)
              {
                v369 = *(_QWORD *)(v605 + 8 * v366);
                LODWORD(v594) = (_DWORD)v604;
                HIDWORD(v594) = v368 - 1;
                v595 = v369;
                v370 = sub_1C553DEB0(v367, (uint64_t)&v594);
                if (v370)
                  break;
                v366 = v368;
                v371 = v606 > v368++;
                if (!v371)
                  goto LABEL_378;
              }
              if (v370 - 1 < 0xA)
              {
LABEL_164:
                v13 = sub_1C5517EC8(a1, a2, v585, (uint64_t)&v591);
                goto LABEL_534;
              }
            }
          }
          else if (v143)
          {
            goto LABEL_164;
          }
LABEL_378:
          v271 = *(_QWORD *)(v74 + 32);
          v272 = (llvm::ConstantInt *****)*a1;
          LODWORD(v604) = v44;
          LODWORD(v605) = 1;
          v273 = (llvm::APInt *)(*(_QWORD *)(v271 + 48) + 24);
          v275 = sub_1C4825F50(&v601);
          if ((_DWORD)v274 == 1)
          llvm::APInt::sext(v273, v275, (llvm::APInt *)&v594);
          v277 = llvm::ConstantInt::get(***v272[1], (llvm::LLVMContext *)&v594, v276);
          ((void (*)(llvm::ConstantInt *****, unint64_t **, llvm::ValueHandleBase *))(*v272)[2])(v272, &v604, v277);
          if (v595 >= 0x41 && v594)
            MEMORY[0x1CAA32F9C](v594, 0x1000C8000313F17);
          v278 = v592;
          v267 = v585;
          if (v592 >= HIDWORD(v592))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
            v278 = v592;
          }
          *((_DWORD *)v591 + v278) = v44;
          goto LABEL_386;
        case '~':
          v57 = *a1;
          *(_QWORD *)(v57 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v57 + 48) = a2;
          v58 = (unsigned __int8 **)(a2 + 56);
          v59 = (unsigned __int8 **)(v57 + 32);
          if (a2 + 56 != v57 + 32)
          {
            if (*v59)
              llvm::MetadataTracking::untrack(v57 + 32, *v59);
            v60 = *v58;
            *v59 = *v58;
            if (v60)
              llvm::MetadataTracking::track((uint64_t)v59, v60, 2);
          }
          v61 = *(_QWORD *)(a2 + 32);
          v62 = *(_DWORD *)(v61 + 4);
          v63 = a1[1];
          v64 = sub_1C5517B4C(v63, *(_DWORD *)(v61 + 36));
          v65 = v64;
          if ((v64 & 0x80000000) != 0)
            v66 = (uint64_t *)(*(_QWORD *)(v63 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8);
          else
            v66 = (uint64_t *)(*(_QWORD *)(v63 + 272) + 8 * v64);
          v91 = *v66;
          if (v91)
          {
            v442 = a3;
            if ((*(_BYTE *)(v91 + 3) & 1) != 0 || (v91 = *(_QWORD *)(v91 + 24)) != 0 && (*(_BYTE *)(v91 + 3) & 1) != 0)
            {
              v446 = *(_QWORD *)(v91 + 8);
              if (v446)
              {
                if (**(_WORD **)(v446 + 16) == 119 && *(_DWORD *)(v446 + 40) == 2)
                {
                  v583 = 0;
                  v588 = *(_DWORD *)(*(_QWORD *)(v446 + 32) + 36);
LABEL_676:
                  if (v62 < 0 && (v62 & 0x7FFFFFFFu) < *(_DWORD *)(v63 + 432))
                    v448 = *(_QWORD *)(*(_QWORD *)(v63 + 424) + 8 * (v62 & 0x7FFFFFFF));
                  else
                    v448 = 0;
                  v598 = v448;
                  LODWORD(v604) = 65;
                  v605 = (uint64_t)&v598;
                  v606 = 1;
                  v607 = 0;
                  v608 = 0;
                  v475 = a1[2];
                  v476 = *(_DWORD *)(v475 + 3368);
                  if (v476)
                    v477 = v476 - 45;
                  else
                    v477 = 20;
                  v478 = sub_1C553C530(v475 + 168 * v477 + 8, (uint64_t)&v604);
                  if (v478 == 11)
                  {
                    if (!v606)
                      goto LABEL_722;
                    v533 = 0;
                    v534 = v475 + 35456;
                    v535 = 1;
                    while (1)
                    {
                      v536 = *(_QWORD *)(v605 + 8 * v533);
                      LODWORD(v594) = (_DWORD)v604;
                      HIDWORD(v594) = v535 - 1;
                      v595 = v536;
                      v537 = sub_1C553DEB0(v534, (uint64_t)&v594);
                      if (v537)
                        break;
                      v533 = v535;
                      v371 = v606 > v535++;
                      if (!v371)
                        goto LABEL_722;
                    }
                    v479 = v537 - 9;
                  }
                  else
                  {
                    v479 = v478 - 9;
                  }
                  if (v479 < 2)
                  {
LABEL_723:
                    v13 = 0;
                    goto LABEL_534;
                  }
LABEL_722:
                  if (sub_1C5518468((uint64_t)a1, v448))
                    goto LABEL_723;
                  if ((v65 & 0x80000000) != 0
                    && (v490 = a1[1], (v65 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v490 + 432)))
                  {
                    v491 = *(_QWORD *)(*(_QWORD *)(v490 + 424) + 8 * (v65 & 0x7FFFFFFF));
                    if ((v491 & 1) != 0)
                    {
                      v492 = v491 >> 3;
                      goto LABEL_771;
                    }
                    if ((v491 & 4) != 0)
                    {
                      if ((v491 & 2) != 0)
                        v492 = (unsigned __int16)(v491 >> 19);
                      else
                        v492 = v491 >> 19;
                      goto LABEL_771;
                    }
                  }
                  else
                  {
                    v491 = 0;
                  }
                  v492 = (unsigned __int16)(v491 >> 3);
LABEL_771:
                  LODWORD(v599) = v492;
                  if (v492 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v598, -1, 1);
                  }
                  else
                  {
                    if (v492)
                      v501 = (void **)(0xFFFFFFFFFFFFFFFFLL >> -(char)v492);
                    else
                      v501 = 0;
                    v598 = (uint64_t)v501;
                  }
                  v502 = (llvm::ConstantInt *****)*a1;
                  v604 = (unint64_t *)v448;
                  LODWORD(v605) = 0;
                  if ((v448 & 1) != 0)
                  {
                    v503 = v448 >> 3;
                  }
                  else if ((v448 & 4) != 0)
                  {
                    if ((v448 & 2) != 0)
                      v503 = (unsigned __int16)(v448 >> 19);
                    else
                      v503 = v448 >> 19;
                  }
                  else
                  {
                    v503 = (unsigned __int16)(v448 >> 3);
                  }
                  llvm::APInt::zext((llvm::APInt *)&v598, v503, (uint64_t)&v594);
                  v509 = llvm::ConstantInt::get(***v502[1], (llvm::LLVMContext *)&v594, v508);
                  v510 = ((uint64_t (*)(llvm::ConstantInt *****, unint64_t **, llvm::ValueHandleBase *))(*v502)[2])(v502, &v604, v509);
                  v512 = v511;
                  if (v595 >= 0x41 && v594)
                    MEMORY[0x1CAA32F9C](v594, 0x1000C8000313F17);
                  if (v583)
                  {
                    if (v583 < 0 && (v513 = a1[1], (v583 & 0x7FFFFFFFu) < *(_DWORD *)(v513 + 432)))
                      v514 = *(_QWORD *)(*(_QWORD *)(v513 + 424) + 8 * (v583 & 0x7FFFFFFF));
                    else
                      v514 = 0;
                    if (v448 != v514)
                    {
                      v515 = (uint64_t *)*a1;
                      v594 = (_QWORD *)v448;
                      LODWORD(v595) = 0;
                      LODWORD(v604) = v583;
                      LODWORD(v606) = 0;
                      sub_1C5546B4C(v515, 124, (unint64_t *)&v594, (int *)&v604);
                      v583 = *(_DWORD *)(*(_QWORD *)(v516 + 32) + 4);
                    }
                  }
                  else
                  {
                    v583 = 0;
                  }
                  if (v588)
                  {
                    if (v588 < 0 && (v522 = a1[1], (v588 & 0x7FFFFFFFu) < *(_DWORD *)(v522 + 432)))
                      v523 = *(_QWORD *)(*(_QWORD *)(v522 + 424) + 8 * (v588 & 0x7FFFFFFF));
                    else
                      v523 = 0;
                    if (v448 != v523)
                    {
                      v524 = (uint64_t *)*a1;
                      v594 = (_QWORD *)v448;
                      LODWORD(v595) = 0;
                      LODWORD(v604) = v588;
                      LODWORD(v606) = 0;
                      sub_1C5546B4C(v524, 118, (unint64_t *)&v594, (int *)&v604);
                      v588 = *(_DWORD *)(*(_QWORD *)(v525 + 32) + 4);
                    }
                  }
                  else
                  {
                    v588 = 0;
                  }
                  v526 = *a1;
                  v527 = v588;
                  if (v583)
                    v527 = v583;
                  LODWORD(v594) = v62;
                  LODWORD(v595) = 1;
                  LODWORD(v604) = v527;
                  LODWORD(v606) = 0;
                  v607 = v510;
                  v608 = v512;
                  v609 = 1;
                  (*(void (**)(uint64_t, uint64_t, _QWORD **, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)v526 + 32))(v526, 65, &v594, 1, &v604, 2, 0);
                  v528 = a1[1];
                  if ((v65 & 0x80000000) != 0)
                    v529 = (uint64_t *)(*(_QWORD *)(v528 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
                  else
                    v529 = (uint64_t *)(*(_QWORD *)(v528 + 272) + 8 * v65);
                  v530 = *v529;
                  if (v530
                    && ((*(_BYTE *)(v530 + 3) & 1) != 0
                     || (v530 = *(_QWORD *)(v530 + 24)) != 0 && (*(_BYTE *)(v530 + 3) & 1) != 0))
                  {
                    v531 = *(_QWORD *)(v530 + 8);
                  }
                  else
                  {
                    v531 = 0;
                  }
                  v532 = *(unsigned int *)(v442 + 8);
                  if (v532 >= *(_DWORD *)(v442 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v442, v442 + 16, v532 + 1, 8);
                    LODWORD(v532) = *(_DWORD *)(v442 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v442 + 8 * v532) = a2;
                  ++*(_DWORD *)(v442 + 8);
                  sub_1C55181AC((uint64_t)a1, a2, v531, v442, 0);
                  if (v599 >= 0x41 && v598)
                    MEMORY[0x1CAA32F9C](v598, 0x1000C8000313F17);
                  goto LABEL_418;
                }
              }
            }
          }
          if ((v64 & 0x80000000) != 0)
            v92 = (uint64_t *)(*(_QWORD *)(v63 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8);
          else
            v92 = (uint64_t *)(*(_QWORD *)(v63 + 272) + 8 * v64);
          v93 = *v92;
          if (v93)
          {
            v442 = a3;
            if ((*(_BYTE *)(v93 + 3) & 1) != 0 || (v93 = *(_QWORD *)(v93 + 24)) != 0 && (*(_BYTE *)(v93 + 3) & 1) != 0)
            {
              v447 = *(_QWORD *)(v93 + 8);
              if (v447)
              {
                if (**(_WORD **)(v447 + 16) == 124 && *(_DWORD *)(v447 + 40) == 2)
                {
                  v588 = 0;
                  v583 = *(_DWORD *)(*(_QWORD *)(v447 + 32) + 36);
                  goto LABEL_676;
                }
              }
            }
          }
          if ((v64 & 0x80000000) != 0)
            v94 = (uint64_t *)(*(_QWORD *)(v63 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8);
          else
            v94 = (uint64_t *)(*(_QWORD *)(v63 + 272) + 8 * v64);
          v95 = *v94;
          if (v95)
          {
            v289 = a3;
            if ((*(_BYTE *)(v95 + 3) & 1) != 0 || (v95 = *(_QWORD *)(v95 + 24)) != 0 && (*(_BYTE *)(v95 + 3) & 1) != 0)
            {
              v449 = *(_QWORD *)(v95 + 8);
              if (v449)
              {
                if (**(_WORD **)(v449 + 16) == 126 && *(_DWORD *)(v449 + 40) == 2)
                {
                  v450 = *(_DWORD *)(*(_QWORD *)(v449 + 32) + 36);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 56))(a4, a2);
                  llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 32, v450);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 64))(a4, a2);
                  v451 = v592;
                  if (v592 >= HIDWORD(v592))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
                    v451 = v592;
                  }
                  *((_DWORD *)v591 + v451) = v62;
                  LODWORD(v592) = v592 + 1;
                  v452 = a1[1];
                  if ((v65 & 0x80000000) != 0)
                    v453 = (uint64_t *)(*(_QWORD *)(v452 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
                  else
                    v453 = (uint64_t *)(*(_QWORD *)(v452 + 272) + 8 * v65);
                  v496 = *v453;
                  if ((*(_BYTE *)(v496 + 3) & 1) == 0)
                    v496 = *(_QWORD *)(v496 + 24);
                  v301 = *(_QWORD *)(v496 + 8);
                  v299 = (uint64_t)a1;
                  v300 = a2;
LABEL_416:
                  v302 = v289;
LABEL_417:
                  sub_1C55181AC(v299, v300, v301, v302, 0);
LABEL_418:
                  v13 = 1;
                  goto LABEL_534;
                }
              }
            }
          }
          if ((v64 & 0x80000000) != 0)
            v96 = (uint64_t *)(*(_QWORD *)(v63 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8);
          else
            v96 = (uint64_t *)(*(_QWORD *)(v63 + 272) + 8 * v64);
          v97 = *v96;
          if ((*(_BYTE *)(v97 + 3) & 1) == 0)
            v97 = *(_QWORD *)(v97 + 24);
          v98 = *(_QWORD *)(v97 + 8);
          if (**(_WORD **)(v98 + 16) != 120)
            goto LABEL_182;
          if (v62 < 0 && (v62 & 0x7FFFFFFFu) < *(_DWORD *)(v63 + 432))
            v99 = *(void ***)(*(_QWORD *)(v63 + 424) + 8 * (v62 & 0x7FFFFFFF));
          else
            v99 = 0;
          v598 = (uint64_t)v99;
          v601 = (unint64_t)v99;
          LODWORD(v604) = 120;
          v605 = (uint64_t)&v601;
          v606 = 1;
          v607 = 0;
          v608 = 0;
          v151 = a1[2];
          v152 = *(_DWORD *)(v151 + 12608);
          if (v152)
            v153 = v152 - 45;
          else
            v153 = 75;
          v154 = sub_1C553C530(v151 + 168 * v153 + 8, (uint64_t)&v604);
          if (v154 == 11)
          {
            if (v606)
            {
              v377 = 0;
              v378 = v151 + 35456;
              v379 = 1;
              while (1)
              {
                v380 = *(_QWORD *)(v605 + 8 * v377);
                LODWORD(v594) = (_DWORD)v604;
                HIDWORD(v594) = v379 - 1;
                v595 = v380;
                v381 = sub_1C553DEB0(v378, (uint64_t)&v594);
                if (v381)
                  break;
                v377 = v379;
                v371 = v606 > v379++;
                if (!v371)
                  goto LABEL_406;
              }
              if (v381 - 1 < 0xA)
              {
LABEL_182:
                v13 = sub_1C5517EC8(a1, a2, a3, (uint64_t)&v591);
                goto LABEL_534;
              }
            }
          }
          else if (v154)
          {
            goto LABEL_182;
          }
LABEL_406:
          v289 = a3;
          v290 = *(_QWORD *)(v98 + 32);
          v291 = (llvm::ConstantInt *****)*a1;
          LODWORD(v604) = v62;
          LODWORD(v605) = 1;
          v292 = (llvm::APInt *)(*(_QWORD *)(v290 + 48) + 24);
          v294 = sub_1C4825F50((unint64_t *)&v598);
          if ((_DWORD)v293 == 1)
          llvm::APInt::zext(v292, v294, (uint64_t)&v594);
          v296 = llvm::ConstantInt::get(***v291[1], (llvm::LLVMContext *)&v594, v295);
          ((void (*)(llvm::ConstantInt *****, unint64_t **, llvm::ValueHandleBase *))(*v291)[2])(v291, &v604, v296);
          if (v595 >= 0x41 && v594)
            MEMORY[0x1CAA32F9C](v594, 0x1000C8000313F17);
          v297 = v592;
          if (v592 >= HIDWORD(v592))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 4);
            v297 = v592;
          }
          *((_DWORD *)v591 + v297) = v62;
          LODWORD(v592) = v592 + 1;
          v298 = *(unsigned int *)(v289 + 8);
          if (v298 >= *(_DWORD *)(v289 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v289, v289 + 16, v298 + 1, 8);
            LODWORD(v298) = *(_DWORD *)(v289 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v289 + 8 * v298) = a2;
          ++*(_DWORD *)(v289 + 8);
          v299 = (uint64_t)a1;
          v300 = a2;
          v301 = v98;
          goto LABEL_416;
        default:
          goto LABEL_560;
      }
  }
}

_QWORD *sub_1C5515F50(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E7FA1810;
  v2 = (void *)a1[2];
  if (v2 != (void *)a1[1])
    free(v2);
  return a1;
}

uint64_t sub_1C5515F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int8 *v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  _QWORD *v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  void *v69;
  unsigned int v70;
  uint64_t v71;
  void **v72;
  void *v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  _QWORD *v78;
  void *v79;
  _QWORD *v80;
  int v81;
  BOOL v82;
  unsigned int v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  void *v89;
  unsigned int v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  int v94;
  BOOL v95;
  unsigned int v96;
  _QWORD *v97;
  _QWORD *v98;
  void *v99;
  uint64_t v100;
  unsigned int v101;
  unsigned __int16 **v102;
  uint64_t v103;
  unsigned __int16 ***v104;
  unsigned __int16 **v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t ***v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  uint64_t ****v122;
  uint64_t ***v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t ****v127;
  int v128;
  BOOL v129;
  unsigned int v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  unint64_t v136;
  void **v137;
  uint64_t ***v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  uint64_t ****v145;
  uint64_t ***v146;
  uint64_t ****v147;
  int v148;
  BOOL v149;
  unsigned int v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t ****v156;
  uint64_t ***v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  void **v163;
  uint64_t ****v164;
  uint64_t ***v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  std::string v176;
  void *v177;
  char v178;
  uint64_t v179;
  uint64_t ***v180[2];
  uint64_t v181[3];
  uint64_t v182[5];
  void (**v183)();
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  int v187;
  _QWORD v188[6];
  void *__p;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  void (**v193)();
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  int v197;
  _QWORD v198[6];
  void *v199[2];
  uint64_t v200;
  _QWORD **v201;
  _QWORD *v202[2];
  _BYTE *v203;
  void *v204;
  uint64_t v205;
  int v206;
  _BYTE v207[32];
  unsigned int v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  _BYTE v214[32];
  void *v215;
  uint64_t v216;
  _BYTE v217[1024];
  uint64_t (**v218)(llvm::MachineFunction::Delegate *__hidden);
  void (**v219)();
  _BYTE *v220;
  void *v221;
  uint64_t v222;
  int v223;
  _BYTE v224[32];
  void *v225;
  uint64_t v226;
  _QWORD v227[4];
  void *v228;
  uint64_t v229;
  _BYTE v230[1024];
  _QWORD *v231;
  uint64_t v232;
  unsigned int v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  const char *v240;
  const char *v241;
  uint64_t v242;
  char v243;
  char v244;
  void *v245;
  uint64_t v246;
  _BYTE v247[256];
  char v248;
  int v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v254 = *MEMORY[0x1E0C80C00];
  if ((**(_BYTE **)(v5 + 360) & 0x10) != 0)
  {
    v19 = 0;
    return v19 & 1;
  }
  v6 = v5;
  v7 = v4;
  v8 = **(void ****)(v4 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::TargetPassConfig::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::TargetPassConfig::ID);
  v11 = **(void ****)(v7 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &unk_1EF8F7108);
  v13 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &unk_1EF8F7108);
  v14 = 0;
  v180[0] = (uint64_t ***)v6;
  v180[1] = 0;
  v15 = v6 + 320;
  v16 = v6 + 320;
  do
  {
    v16 = *(_QWORD *)(v16 + 8);
    ++v14;
  }
  while (v16 != v15);
  if (word_1ED805B68)
  {
    if (byte_1ED805BE0)
    {
LABEL_10:
      v17 = operator new();
      *(_OWORD *)(v17 + 8) = 0u;
      *(_OWORD *)(v17 + 24) = 0u;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_OWORD *)(v17 + 56) = 0u;
      *(_QWORD *)v17 = &unk_1E816DC08;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v10 + 288))(&v179, v10);
      sub_1C54EB0C0(v13 + 248, &v179, 0);
      v18 = v179;
      v179 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      *(_QWORD *)(v17 + 64) = v13 + 248;
      v209 = &v211;
      v211 = v13 + 248;
      v210 = 0x100000001;
      v167 = 1;
      goto LABEL_16;
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 280))(v10))
  {
    goto LABEL_10;
  }
  v17 = operator new();
  v167 = 0;
  *(_QWORD *)v17 = &off_1E816EC08;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  v209 = &v211;
  v210 = 0x100000000;
LABEL_16:
  v195 = v198;
  v196 = 4;
  v197 = 0;
  v193 = (void (**)())&off_1E816EBC8;
  v194 = v198;
  v198[4] = "legalizer";
  v198[5] = 9;
  v199[0] = &v200;
  v199[1] = (void *)0x400000000;
  v202[0] = 0;
  v201 = v202;
  v202[1] = 0;
  v203 = v207;
  v204 = v207;
  v205 = 4;
  v206 = 0;
  v208 = 0;
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 168))(*(_QWORD *)(v6 + 16));
  v169 = v209;
  v172 = v210;
  *(_QWORD *)(v17 + 8) = v6;
  *(_QWORD *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v17 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 104))(*(_QWORD *)(v6 + 16));
  v234 = 0;
  v22 = (void **)(v17 + 32);
  v21 = *(unsigned __int8 **)(v17 + 32);
  v173 = v20;
  if (v21)
  {
    llvm::MetadataTracking::untrack(v17 + 32, v21);
    v126 = (unsigned __int8 *)v234;
    *v22 = v234;
    if (v126)
      llvm::MetadataTracking::retrack((uint64_t)&v234, v126, v17 + 32);
  }
  else
  {
    *v22 = 0;
  }
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = 0;
  v23 = *(_QWORD *)(v6 + 40);
  v234 = &v236;
  v235 = 0x10000000000;
  v253 = 512;
  v24 = operator new(0x2000uLL, (std::align_val_t)8uLL);
  v251 = v24;
  v252 = 0;
  if (v253)
  {
    v25 = 16 * v253;
    do
    {
      *v24 = -4096;
      v24 += 2;
      v25 -= 16;
    }
    while (v25);
  }
  v166 = v13;
  v168 = v10;
  v175 = v17;
  v228 = v230;
  v229 = 0x8000000000;
  v233 = 256;
  v26 = operator new(0x1000uLL, (std::align_val_t)8uLL);
  v231 = v26;
  v232 = 0;
  if (v233)
  {
    v27 = 16 * v233;
    do
    {
      *v26 = -4096;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
  }
  v174 = v6;
  v215 = (void *)v6;
  v190 = 0;
  v191 = 0;
  __p = 0;
  sub_1C486DB3C((char **)&__p, (uint64_t)&v215);
  v29 = (char *)__p;
  v28 = v190;
  if (v190 != __p)
  {
    v30 = &unk_1ED805000;
    do
    {
      v32 = *((_QWORD *)v28 - 1);
      v28 -= 8;
      v31 = v32;
      v33 = v32 + 48;
      if (v32 + 48 != (*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFF8))
      {
        for (i = *(_QWORD *)(v31 + 56); i != v33; i = *(_QWORD *)(i + 8))
        {
          v35 = **(unsigned __int16 **)(i + 16);
          if ((v35 - 45) <= 0xD2)
          {
            v36 = (v35 - 73);
            if (v36 <= 0x35 && (((1 << v36) & 0x2860000000005BLL) != 0 || v36 == 2 && v30[3232]))
            {
              v37 = v229;
              v38 = &v228;
              if (v229 >= (unint64_t)HIDWORD(v229))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v228, (uint64_t)v230, v229 + 1, 8);
                v30 = (_BYTE *)&unk_1ED805000;
                v37 = v229;
              }
            }
            else
            {
              v37 = v235;
              v38 = &v234;
              if (v235 >= (unint64_t)HIDWORD(v235))
              {
                v171 = v15;
                v39 = v30;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, (uint64_t)&v236, v235 + 1, 8);
                v30 = v39;
                v15 = v171;
                v37 = v235;
              }
            }
            *((_QWORD *)*v38 + v37) = i;
            ++*((_DWORD *)v38 + 2);
          }
          if ((*(_BYTE *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              i = *(_QWORD *)(i + 8);
          }
        }
      }
    }
    while (v28 != v29);
  }
  v40 = v229;
  if (v229 >= 0x81)
  {
    sub_1C54F67FC(&v231, v229);
    v40 = v229;
  }
  if (v40)
  {
    v41 = 0;
    while (1)
    {
      v42 = (char *)v228 + 8 * v41;
      if (!v233)
        break;
      v43 = ((*v42 >> 4) ^ (*v42 >> 9)) & (v233 - 1);
      v44 = &v231[2 * v43];
      v45 = *v44;
      if (*v42 != *v44)
      {
        v46 = 0;
        v47 = 1;
        while (v45 != -4096)
        {
          if (v46)
            v48 = 0;
          else
            v48 = v45 == -8192;
          if (v48)
            v46 = v44;
          v49 = v43 + v47++;
          v43 = v49 & (v233 - 1);
          v44 = &v231[2 * v43];
          v45 = *v44;
          if (*v42 == *v44)
            goto LABEL_63;
        }
        if (v46)
          v50 = v46;
        else
          v50 = v44;
        goto LABEL_62;
      }
LABEL_63:
      if (++v41 >= (unint64_t)v40)
        goto LABEL_66;
    }
    v50 = 0;
LABEL_62:
    v51 = sub_1C48BE074((uint64_t)&v231, (uint64_t)v228 + 8 * v41, (uint64_t *)v228 + v41, v50);
    *v51 = *v42;
    *((_DWORD *)v51 + 2) = v41;
    v40 = v229;
    goto LABEL_63;
  }
LABEL_66:
  v52 = v235;
  if (v235 >= 0x101)
  {
    sub_1C54F67FC(&v251, v235);
    v52 = v235;
    if ((_DWORD)v235)
      goto LABEL_68;
  }
  else if ((_DWORD)v235)
  {
LABEL_68:
    v53 = 0;
    while (1)
    {
      v54 = (char *)v234 + 8 * v53;
      if (!v253)
        break;
      v55 = ((*v54 >> 4) ^ (*v54 >> 9)) & (v253 - 1);
      v56 = &v251[2 * v55];
      v57 = *v56;
      if (*v54 != *v56)
      {
        v58 = 0;
        v59 = 1;
        while (v57 != -4096)
        {
          if (v58)
            v60 = 0;
          else
            v60 = v57 == -8192;
          if (v60)
            v58 = v56;
          v61 = v55 + v59++;
          v55 = v61 & (v253 - 1);
          v56 = &v251[2 * v55];
          v57 = *v56;
          if (*v54 == *v56)
            goto LABEL_84;
        }
        if (v58)
          v62 = v58;
        else
          v62 = v56;
        goto LABEL_83;
      }
LABEL_84:
      if (++v53 >= (unint64_t)v52)
        goto LABEL_88;
    }
    v62 = 0;
LABEL_83:
    v63 = sub_1C48BE074((uint64_t)&v251, (uint64_t)v234 + 8 * v53, (uint64_t *)v234 + v53, v62);
    *v63 = *v54;
    *((_DWORD *)v63 + 2) = v53;
    v52 = v235;
    goto LABEL_84;
  }
LABEL_88:
  v184 = v188;
  v185 = v188;
  v186 = 4;
  v187 = 0;
  v183 = (void (**)())&off_1E816E870;
  v188[4] = &v234;
  v188[5] = &v228;
  v220 = v224;
  v221 = v224;
  v222 = 4;
  v223 = 0;
  v218 = &off_1E7FA1778;
  v219 = (void (**)())&unk_1E7FA17D0;
  v225 = v227;
  v227[0] = &v183;
  v226 = 0x400000001;
  v64 = v169;
  if ((_DWORD)v172)
  {
    v112 = 8 * v172;
    v113 = 1;
    do
    {
      v114 = *v64;
      if (v113 >= HIDWORD(v226))
      {
        v170 = v64;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, (uint64_t)v227, v113 + 1, 8);
        v64 = v170;
        v113 = v226;
      }
      *((_QWORD *)v225 + v113) = v114;
      v113 = v226 + 1;
      LODWORD(v226) = v226 + 1;
      ++v64;
      v112 -= 8;
    }
    while (v112);
  }
  *(_QWORD *)(v174 + 728) = &v218;
  *(_QWORD *)(v174 + 736) = &v219;
  v182[0] = v175;
  v182[1] = (uint64_t)&v219;
  v182[2] = *(_QWORD *)(v174 + 40);
  v182[3] = v173;
  v19 = 0;
  v182[4] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v174 + 16) + 120))(*(_QWORD *)(v174 + 16));
  v181[0] = v175;
  v181[1] = v23;
  v181[2] = v173;
  v215 = v217;
  v216 = 0x8000000000;
  while (2)
  {
    v65 = v252;
LABEL_91:
    if (v65)
    {
      v101 = v235;
      do
        v102 = (unsigned __int16 **)*((_QWORD *)v234 + --v101);
      while (!v102);
      LODWORD(v235) = v101;
      if (v253)
      {
        LODWORD(v103) = (v253 - 1) & ((v102 >> 4) ^ (v102 >> 9));
        v104 = (unsigned __int16 ***)&v251[2 * v103];
        v105 = *v104;
        if (v102 == *v104)
        {
LABEL_160:
          *v104 = (unsigned __int16 **)-8192;
          LODWORD(v252) = v65 - 1;
          ++HIDWORD(v252);
        }
        else
        {
          v106 = 1;
          while (v105 != (unsigned __int16 **)-4096)
          {
            v107 = v103 + v106++;
            v103 = v107 & (v253 - 1);
            v105 = (unsigned __int16 **)v251[2 * v103];
            if (v102 == v105)
            {
              v104 = (unsigned __int16 ***)&v251[2 * v103];
              goto LABEL_160;
            }
          }
        }
      }
      if (sub_1C554B164((uint64_t)v102, v23))
      {
        v212 = v102;
        sub_1C554FEEC((uint64_t *)&v212, 1, v23, (uint64_t)&v193);
      }
      else
      {
        v108 = sub_1C5518EE8(v182, (uint64_t)v102, (uint64_t)&v193);
        if (v108 == 2)
        {
          v110 = *v102[2] - 73;
          if (v110 > 0x35
            || ((1 << (*v102[2] - 73)) & 0x2860000000005BLL) == 0 && (v110 != 2 || !byte_1ED805CA0))
          {
            *(_QWORD *)(v182[0] + 56) = 0;
            goto LABEL_174;
          }
          v111 = v216;
          if (v216 >= (unint64_t)HIDWORD(v216))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v215, (uint64_t)v217, v216 + 1, 8);
            v111 = v216;
          }
          *((_QWORD *)v215 + v111) = v102;
          LODWORD(v216) = v216 + 1;
        }
        else
        {
          v109 = v108;
          sub_1C5543434((uint64_t)&v193, 1);
          v19 |= v109 == 1;
        }
      }
      continue;
    }
    break;
  }
  v66 = v216;
  if (!(_DWORD)v216)
  {
LABEL_93:
    sub_1C5543434((uint64_t)&v193, 1);
    while (1)
    {
      while (1)
      {
        v67 = v232;
        if (!(_DWORD)v232)
        {
          v65 = v252;
          if (!(_DWORD)v252)
          {
            v102 = 0;
            goto LABEL_174;
          }
          goto LABEL_91;
        }
        v68 = v229;
        do
          v69 = (void *)*((_QWORD *)v228 + --v68);
        while (!v69);
        LODWORD(v229) = v68;
        v70 = v69 >> 4;
        if (v233)
        {
          LODWORD(v71) = (v233 - 1) & (v70 ^ (v69 >> 9));
          v72 = (void **)&v231[2 * v71];
          v73 = *v72;
          if (v69 == *v72)
          {
LABEL_103:
            *v72 = (void *)-8192;
            LODWORD(v232) = v67 - 1;
            ++HIDWORD(v232);
          }
          else
          {
            v74 = 1;
            while (v73 != (void *)-4096)
            {
              v75 = v71 + v74++;
              v71 = v75 & (v233 - 1);
              v73 = (void *)v231[2 * v71];
              if (v69 == v73)
              {
                v72 = (void **)&v231[2 * v71];
                goto LABEL_103;
              }
            }
          }
        }
        if (!sub_1C554B164((uint64_t)v69, v23))
          break;
        v212 = v69;
        sub_1C554FEEC((uint64_t *)&v212, 1, v23, (uint64_t)&v193);
      }
      v212 = v214;
      v213 = 0x400000000;
      if (sub_1C5512468(v181, (uint64_t)v69, (uint64_t)&v212, (uint64_t)&v218))
      {
        sub_1C554FEEC((uint64_t *)v212, v213, v23, (uint64_t)&v193);
        sub_1C5543434((uint64_t)&v193, 0);
        v19 = 1;
        goto LABEL_124;
      }
      v192 = (uint64_t)v69;
      v76 = v235;
      if (v253)
      {
        v77 = (v253 - 1) & (v70 ^ (v69 >> 9));
        v78 = &v251[2 * v77];
        v79 = (void *)*v78;
        if ((void *)*v78 == v69)
          goto LABEL_124;
        v80 = 0;
        v81 = 1;
        while (v79 != (void *)-4096)
        {
          if (v80)
            v82 = 0;
          else
            v82 = v79 == (void *)-8192;
          if (v82)
            v80 = v78;
          v83 = v77 + v81++;
          v77 = v83 & (v253 - 1);
          v78 = &v251[2 * v77];
          v79 = (void *)*v78;
          if ((void *)*v78 == v69)
            goto LABEL_124;
        }
        if (v80)
          v84 = v80;
        else
          v84 = v78;
      }
      else
      {
        v84 = 0;
      }
      v85 = sub_1C48BE074((uint64_t)&v251, (uint64_t)&v192, &v192, v84);
      *v85 = v192;
      *((_DWORD *)v85 + 2) = v76;
      v86 = v192;
      v87 = v235;
      if (v235 >= (unint64_t)HIDWORD(v235))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, (uint64_t)&v236, v235 + 1, 8);
        v87 = v235;
      }
      *((_QWORD *)v234 + v87) = v86;
      LODWORD(v235) = v235 + 1;
LABEL_124:
      if (v212 != v214)
        free(v212);
    }
  }
  if ((_DWORD)v232)
  {
    v88 = v229;
    while (1)
    {
      while (1)
      {
        v89 = (void *)*((_QWORD *)v215 + --v66);
        LODWORD(v216) = v66;
        v212 = v89;
        if (v233)
          break;
        v97 = 0;
LABEL_147:
        v98 = sub_1C48BE074((uint64_t)&v231, (uint64_t)&v212, (uint64_t *)&v212, v97);
        *v98 = v212;
        *((_DWORD *)v98 + 2) = v88;
        v99 = v212;
        v100 = v229;
        if (v229 >= (unint64_t)HIDWORD(v229))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v228, (uint64_t)v230, v229 + 1, 8);
          v100 = v229;
        }
        *((_QWORD *)v228 + v100) = v99;
        v88 = v229 + 1;
        LODWORD(v229) = v229 + 1;
        v66 = v216;
        if (!(_DWORD)v216)
          goto LABEL_93;
      }
      v90 = (v233 - 1) & ((v89 >> 4) ^ (v89 >> 9));
      v91 = &v231[2 * v90];
      v92 = (void *)*v91;
      if ((void *)*v91 != v89)
      {
        v93 = 0;
        v94 = 1;
        while (v92 != (void *)-4096)
        {
          if (v93)
            v95 = 0;
          else
            v95 = v92 == (void *)-8192;
          if (v95)
            v93 = v91;
          v96 = v90 + v94++;
          v90 = v96 & (v233 - 1);
          v91 = &v231[2 * v90];
          v92 = (void *)*v91;
          if ((void *)*v91 == v89)
            goto LABEL_142;
        }
        if (v93)
          v97 = v93;
        else
          v97 = v91;
        goto LABEL_147;
      }
LABEL_142:
      if (!v66)
        goto LABEL_93;
    }
  }
  *(_QWORD *)(v182[0] + 56) = 0;
  v102 = *(unsigned __int16 ***)v215;
LABEL_174:
  if (v215 != v217)
    free(v215);
  *(_QWORD *)(v174 + 728) = 0;
  *(_QWORD *)(v174 + 736) = 0;
  v218 = &off_1E7FA1778;
  v219 = (void (**)())&unk_1E7FA17D0;
  if (v225 != v227)
    free(v225);
  v219 = off_1E7FA1810;
  if (v221 != v220)
    free(v221);
  v183 = off_1E7FA1810;
  if (v185 != v184)
    free(v185);
  if (__p)
  {
    v190 = (char *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v231, 8);
  if (v228 != v230)
    free(v228);
  MEMORY[0x1CAA32FB4](v251, 8);
  if (v234 != &v236)
  {
    free(v234);
    if (v102)
      goto LABEL_188;
LABEL_195:
    v115 = v15;
    do
    {
      v115 = *(_QWORD *)(v115 + 8);
      --v14;
    }
    while (v115 != v15);
    if (v14)
    {
      v116 = *(uint64_t ****)v174;
      if ((*(_BYTE *)(*(_QWORD *)v174 + 23) & 0x20) == 0)
      {
        LODWORD(v124) = 0;
        v125 = 0;
        goto LABEL_227;
      }
      v117 = ***v116;
      v234 = *(void **)v174;
      v118 = *(_DWORD *)(v117 + 2496);
      if (v118)
      {
        v119 = *(_QWORD *)(v117 + 2480);
        v120 = v118 - 1;
        v121 = v120 & ((v116 >> 4) ^ (v116 >> 9));
        v122 = (uint64_t ****)(v119 + 40 * v121);
        v123 = *v122;
        if (*v122 == v116)
          goto LABEL_216;
        v127 = 0;
        v128 = 1;
        while (v123 != (uint64_t ***)-4096)
        {
          if (v127)
            v129 = 0;
          else
            v129 = v123 == (uint64_t ***)-8192;
          if (v129)
            v127 = v122;
          v130 = v121 + v128++;
          v121 = v130 & v120;
          v122 = (uint64_t ****)(v119 + 40 * v121);
          v123 = *v122;
          if (*v122 == v116)
            goto LABEL_216;
        }
        if (v127)
          v156 = v127;
        else
          v156 = v122;
      }
      else
      {
        v156 = 0;
      }
      v122 = (uint64_t ****)sub_1C541AB24(v117 + 2480, (uint64_t)&v234, (uint64_t *)&v234, v156);
      v157 = (uint64_t ***)v234;
      v122[3] = 0;
      v122[4] = 0;
      *v122 = v157;
      v122[1] = (uint64_t ***)(v122 + 3);
      v122[2] = (uint64_t ***)0x100000000;
LABEL_216:
      v131 = *((unsigned int *)v122 + 4);
      if ((_DWORD)v131)
      {
        v132 = v122[1] + 1;
        v133 = 16 * v131;
        LODWORD(v124) = 0;
        while (*((_DWORD *)v132 - 2))
        {
          v125 = 0;
          v132 += 2;
          v133 -= 16;
          if (!v133)
            goto LABEL_227;
        }
        v124 = *v132;
        if (*v132)
        {
          v125 = *v132;
          if (*(_BYTE *)v124 != 15)
            v125 = *(_QWORD *)(v124 - 8 * *(unsigned int *)(v124 + 8));
          LODWORD(v124) = *(_DWORD *)(v124 + 28);
          goto LABEL_227;
        }
      }
      else
      {
        LODWORD(v124) = 0;
      }
      v125 = 0;
LABEL_227:
      v134 = *MEMORY[0x20];
      LODWORD(v235) = 16;
      BYTE4(v235) = 2;
      v236 = v134;
      v237 = v125;
      v238 = v124;
      v239 = 0;
      v240 = "gisel-legalize";
      v241 = "GISelFailure";
      v242 = 12;
      v243 = 0;
      v244 = 0;
      v245 = v247;
      v246 = 0x400000000;
      v248 = 0;
      v249 = -1;
      v250 = 0;
      v234 = &unk_1E8141F00;
      v228 = "inserting blocks is not supported yet";
      v229 = 37;
      sub_1C53B17B4((uint64_t)&v245, (const void **)&v228);
      **(_QWORD **)(v174 + 360) |= 0x10uLL;
      sub_1C554B250(0, (llvm::Value **)v174, v168, v180, (llvm::DiagnosticInfoOptimizationBase *)&v234);
      v234 = &off_1E814E790;
      v135 = (char *)v245;
      if ((_DWORD)v246)
      {
        v136 = (unint64_t)v246 << 6;
        do
        {
          v137 = (void **)&v135[v136];
          if (v135[v136 - 17] < 0)
            operator delete(*(v137 - 5));
          if (*((char *)v137 - 41) < 0)
            operator delete(*(v137 - 8));
          v136 -= 64;
        }
        while (v136);
        v135 = (char *)v245;
      }
      if (v135 != v247)
        free(v135);
      v19 = 0;
      goto LABEL_238;
    }
    if (!v208)
    {
LABEL_203:
      if ((v167 & 1) == 0)
        *(_BYTE *)(v166 + 624) = 0;
      goto LABEL_238;
    }
    v139 = *(uint64_t ****)v174;
    if ((*(_BYTE *)(*(_QWORD *)v174 + 23) & 0x20) == 0)
      goto LABEL_266;
    v140 = ***v139;
    v234 = *(void **)v174;
    v141 = *(_DWORD *)(v140 + 2496);
    if (v141)
    {
      v142 = *(_QWORD *)(v140 + 2480);
      v143 = v141 - 1;
      v144 = v143 & ((v139 >> 4) ^ (v139 >> 9));
      v145 = (uint64_t ****)(v142 + 40 * v144);
      v146 = *v145;
      if (*v145 == v139)
        goto LABEL_257;
      v147 = 0;
      v148 = 1;
      while (v146 != (uint64_t ***)-4096)
      {
        if (v147)
          v149 = 0;
        else
          v149 = v146 == (uint64_t ***)-8192;
        if (v149)
          v147 = v145;
        v150 = v144 + v148++;
        v144 = v150 & v143;
        v145 = (uint64_t ****)(v142 + 40 * v144);
        v146 = *v145;
        if (*v145 == v139)
          goto LABEL_257;
      }
      if (v147)
        v164 = v147;
      else
        v164 = v145;
    }
    else
    {
      v164 = 0;
    }
    v145 = (uint64_t ****)sub_1C541AB24(v140 + 2480, (uint64_t)&v234, (uint64_t *)&v234, v164);
    v165 = (uint64_t ***)v234;
    v145[3] = 0;
    v145[4] = 0;
    *v145 = v165;
    v145[1] = (uint64_t ***)(v145 + 3);
    v145[2] = (uint64_t ***)0x100000000;
LABEL_257:
    v151 = *((unsigned int *)v145 + 4);
    if ((_DWORD)v151)
    {
      v152 = v145[1] + 1;
      v153 = 16 * v151;
      LODWORD(v154) = 0;
      while (*((_DWORD *)v152 - 2))
      {
        v155 = 0;
        v152 += 2;
        v153 -= 16;
        if (!v153)
          goto LABEL_267;
      }
      v154 = *v152;
      if (*v152)
      {
        v155 = *v152;
        if (*(_BYTE *)v154 != 15)
          v155 = *(_QWORD *)(v154 - 8 * *(unsigned int *)(v154 + 8));
        LODWORD(v154) = *(_DWORD *)(v154 + 28);
      }
      else
      {
        v155 = 0;
      }
      goto LABEL_267;
    }
LABEL_266:
    v155 = 0;
    LODWORD(v154) = 0;
LABEL_267:
    v158 = *(_QWORD *)(v174 + 328);
    v159 = **(_QWORD **)(v158 + 32);
    LODWORD(v235) = 16;
    BYTE4(v235) = 2;
    v236 = v159;
    v237 = v155;
    v238 = v154;
    v239 = 0;
    v240 = "gisel-legalize";
    v241 = "LostDebugLoc";
    v242 = 12;
    v243 = 0;
    v244 = 0;
    v245 = v247;
    v246 = 0x400000000;
    v248 = 0;
    v249 = -1;
    v250 = v158;
    v234 = &unk_1E8141F00;
    v228 = "lost ";
    v229 = 5;
    sub_1C53B17B4((uint64_t)&v245, (const void **)&v228);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v176, "NumLostDebugLocs", 0x10uLL, v208);
    v160 = sub_1C47E3888((uint64_t)&v234, (uint64_t)&v176);
    v228 = " debug locations during pass";
    v229 = 28;
    sub_1C53B17B4(v160 + 80, (const void **)&v228);
    if (v178 < 0)
      operator delete(v177);
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v176.__r_.__value_.__l.__data_);
    sub_1C554B250(1, (llvm::Value **)v174, v168, v180, (llvm::DiagnosticInfoOptimizationBase *)&v234);
    v234 = &off_1E814E790;
    v161 = (char *)v245;
    if ((_DWORD)v246)
    {
      v162 = (unint64_t)v246 << 6;
      do
      {
        v163 = (void **)&v161[v162];
        if (v161[v162 - 17] < 0)
          operator delete(*(v163 - 5));
        if (*((char *)v163 - 41) < 0)
          operator delete(*(v163 - 8));
        v162 -= 64;
      }
      while (v162);
      v161 = (char *)v245;
    }
    if (v161 != v247)
      free(v161);
    goto LABEL_203;
  }
  if (!v102)
    goto LABEL_195;
LABEL_188:
  sub_1C554B36C(v174, v168, (uint64_t *****)v180, "gisel-legalize", (uint64_t)"unable to legalize instruction", 30, (llvm::MachineInstr *)v102);
  v19 = 0;
LABEL_238:
  v193 = (void (**)())&off_1E816EBC8;
  if (v204 != v203)
    free(v204);
  sub_1C5518D4C((uint64_t)&v201, v202[0]);
  sub_1C5518DAC(v199);
  v193 = off_1E7FA1810;
  if (v195 != v194)
    free(v195);
  if (v209 != &v211)
    free(v209);
  (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  return v19 & 1;
}

const char *sub_1C5517434()
{
  return "Legalizer";
}

void sub_1C5517444(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 1uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C5517574(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 0x20uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C55176A4(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 2uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C55177D4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E7FA1810;
  v2 = (void *)a1[2];
  if (v2 != (void *)a1[1])
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

int32x2_t sub_1C5517828(uint64_t a1, uint64_t a2)
{
  int32x2_t *v2;
  int32x2_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int32x2_t result;
  int32x2_t *v12;
  int32x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = *(int32x2_t **)(a1 + 72);
  v3 = v2[258];
  v4 = v2[260].u32[0];
  v5 = a2 >> 4;
  if ((_DWORD)v4)
  {
    LODWORD(v6) = (v4 - 1) & (v5 ^ (a2 >> 9));
    v7 = *(_QWORD *)&v3 + 16 * v6;
    v8 = *(_QWORD *)v7;
    if (*(_QWORD *)v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v4 - 1);
      v8 = *(_QWORD *)(*(_QWORD *)&v3 + 16 * v6);
      if (v8 == a2)
      {
        v7 = *(_QWORD *)&v3 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  v7 = *(_QWORD *)&v3 + 16 * v4;
LABEL_8:
  if (v7 != *(_QWORD *)&v3 + 16 * v4)
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8 * *(unsigned int *)(v7 + 8)) = 0;
    *(_QWORD *)v7 = -8192;
    result = vadd_s32(v2[259], (int32x2_t)0x1FFFFFFFFLL);
    v2[259] = result;
  }
  v12 = *(int32x2_t **)(a1 + 80);
  v13 = v12[130];
  v14 = v12[132].u32[0];
  if ((_DWORD)v14)
  {
    LODWORD(v15) = (v14 - 1) & (v5 ^ (a2 >> 9));
    v16 = *(_QWORD *)&v13 + 16 * v15;
    v17 = *(_QWORD *)v16;
    if (*(_QWORD *)v16 == a2)
      goto LABEL_17;
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(_QWORD *)(*(_QWORD *)&v13 + 16 * v15);
      if (v17 == a2)
      {
        v16 = *(_QWORD *)&v13 + 16 * v15;
        goto LABEL_17;
      }
    }
  }
  v16 = *(_QWORD *)&v13 + 16 * v14;
LABEL_17:
  if (v16 != *(_QWORD *)&v13 + 16 * v14)
  {
    *(_QWORD *)(*(_QWORD *)v12 + 8 * *(unsigned int *)(v16 + 8)) = 0;
    *(_QWORD *)v16 = -8192;
    result = vadd_s32(v12[131], (int32x2_t)0x1FFFFFFFFLL);
    v12[131] = result;
  }
  return result;
}

_QWORD *sub_1C5517968(_QWORD *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;

  v2 = **(unsigned __int16 **)(a2 + 16);
  if ((v2 - 45) <= 0xD2)
  {
    v3 = (v2 - 73);
    if (v3 <= 0x35 && (((1 << v3) & 0x2860000000005BLL) != 0 || v3 == 2 && byte_1ED805CA0))
    {
      v4 = result[10];
      v30 = a2;
      v5 = *(_DWORD *)(v4 + 8);
      v6 = *(_DWORD *)(v4 + 1056);
      if (v6)
      {
        v7 = *(_QWORD *)(v4 + 1040);
        v8 = v6 - 1;
        v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
        v10 = (_QWORD *)(v7 + 16 * v9);
        v11 = *v10;
        if (*v10 == a2)
          return result;
        v12 = 0;
        v13 = 1;
        while (v11 != -4096)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -8192;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = (_QWORD *)(v7 + 16 * v9);
          v11 = *v10;
          if (*v10 == a2)
            return result;
        }
        if (v12)
          v16 = v12;
        else
          v16 = v10;
      }
      else
      {
        v16 = 0;
      }
      v17 = v4 + 1040;
    }
    else
    {
      v4 = result[9];
      v30 = a2;
      v5 = *(_DWORD *)(v4 + 8);
      v20 = *(_DWORD *)(v4 + 2080);
      if (v20)
      {
        v21 = *(_QWORD *)(v4 + 2064);
        v22 = v20 - 1;
        v23 = v22 & ((a2 >> 4) ^ (a2 >> 9));
        v24 = (_QWORD *)(v21 + 16 * v23);
        v25 = *v24;
        if (*v24 == a2)
          return result;
        v26 = 0;
        v27 = 1;
        while (v25 != -4096)
        {
          if (v26)
            v28 = 0;
          else
            v28 = v25 == -8192;
          if (v28)
            v26 = v24;
          v29 = v23 + v27++;
          v23 = v29 & v22;
          v24 = (_QWORD *)(v21 + 16 * v23);
          v25 = *v24;
          if (*v24 == a2)
            return result;
        }
        if (v26)
          v16 = v26;
        else
          v16 = v24;
      }
      else
      {
        v16 = 0;
      }
      v17 = v4 + 2064;
    }
    result = sub_1C48BE074(v17, (uint64_t)&v30, &v30, v16);
    *result = v30;
    *((_DWORD *)result + 2) = v5;
    v18 = v30;
    v19 = *(unsigned int *)(v4 + 8);
    if (v19 >= *(_DWORD *)(v4 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, v19 + 1, 8);
      LODWORD(v19) = *(_DWORD *)(v4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v4 + 8 * v19) = v18;
    ++*(_DWORD *)(v4 + 8);
  }
  return result;
}

uint64_t sub_1C5517B4C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  do
  {
    v3 = v2;
    if ((v2 & 0x80000000) != 0)
      v4 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
    else
      v4 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v2);
    v5 = *v4;
    if (!v5)
      break;
    if ((*(_BYTE *)(v5 + 3) & 1) == 0)
    {
      v5 = *(_QWORD *)(v5 + 24);
      if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
        break;
    }
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      break;
    if (**(_WORD **)(v6 + 16) != 19)
      break;
    if (*(_DWORD *)(v6 + 40) != 2)
      break;
    v2 = *(unsigned int *)(*(_QWORD *)(v6 + 32) + 36);
    if ((v2 & 0x80000000) == 0)
      break;
  }
  while ((v2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a1 + 432)
       && (*(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * (v2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0);
  return v3;
}

void sub_1C5517BEC(int a1, unsigned int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD v29[4];
  void *v30;
  uint64_t v31;
  _DWORD v32[8];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  if (sub_1C554B0AC(a1, a2, (uint64_t)a3))
  {
    v30 = v32;
    v31 = 0x400000000;
    v14 = (uint64_t *)(a3[3] + 16 * (a1 & 0x7FFFFFFF) + 8);
    if (a1 >= 0)
      v14 = (uint64_t *)(a3[34] + 8 * v12);
    v15 = *v14;
    if (*v14)
    {
      while ((*(_BYTE *)(v15 + 3) & 1) != 0)
      {
        v15 = *(_QWORD *)(v15 + 24);
        if (!v15)
          goto LABEL_7;
      }
      v25 = 0;
      v26 = *(_QWORD *)(v15 + 8);
      v27 = 4;
LABEL_28:
      if (v25 >= v27)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v25 + 1, 8);
        v25 = v31;
      }
      *((_QWORD *)v30 + v25) = v26;
      LODWORD(v31) = v31 + 1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 32))(a6, v26);
      v28 = *(_QWORD *)(v15 + 8);
      while (1)
      {
        v15 = *(_QWORD *)(v15 + 24);
        if (!v15)
          break;
        if ((*(_BYTE *)(v15 + 3) & 1) == 0)
        {
          v26 = *(_QWORD *)(v15 + 8);
          if (v26 != v28)
          {
            v25 = v31;
            v27 = HIDWORD(v31);
            goto LABEL_28;
          }
        }
      }
    }
LABEL_7:
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 16) + 176))(*(_QWORD *)(*a3 + 16));
    if (a1 < 0)
      v17 = (uint64_t *)(a3[3] + 16 * (a1 & 0x7FFFFFFF) + 8);
    else
      v17 = (uint64_t *)(a3[34] + 8 * v12);
    v18 = *v17;
    if (*v17)
    {
      do
      {
        v19 = *(_QWORD *)(v18 + 24);
        if (a2 - 1 <= 0x3FFFFFFE)
          llvm::MachineOperand::substPhysReg((unsigned int *)v18, a2, v16);
        else
          llvm::MachineOperand::setReg(v18, a2);
        v18 = v19;
      }
      while (v19);
    }
    v21 = *(unsigned int *)(a5 + 8);
    if (v21 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v21 + 1, 4);
      LODWORD(v21) = *(_DWORD *)(a5 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a5 + 4 * v21) = a2;
    ++*(_DWORD *)(a5 + 8);
    v22 = (uint64_t *)v30;
    if ((_DWORD)v31)
    {
      v23 = 8 * v31;
      do
      {
        v24 = *v22++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, v24);
        v23 -= 8;
      }
      while (v23);
      v22 = (uint64_t *)v30;
    }
    if (v22 != (uint64_t *)v32)
      free(v22);
  }
  else
  {
    v29[0] = a1;
    v29[2] = 1;
    LODWORD(v30) = a2;
    v32[0] = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 19, v29, 1, &v30, 1, 0);
    v20 = *(unsigned int *)(a5 + 8);
    if (v20 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v20 + 1, 4);
      LODWORD(v20) = *(_DWORD *)(a5 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a5 + 4 * v20) = a1;
    ++*(_DWORD *)(a5 + 8);
  }
}

uint64_t sub_1C5517EC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned __int8 v32;
  _DWORD v34[2];
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v8 = **(unsigned __int16 **)(a2 + 16);
  sub_1C554CC94(*(unsigned int *)(*(_QWORD *)(a2 + 32) + 36), a1[1], (uint64_t)&v37);
  v10 = v37;
  if ((_BYTE)v39)
    v11 = v37 == 0;
  else
    v11 = 1;
  if (v11 || **(_WORD **)(v37 + 16) != 68)
  {
    v12 = 0;
    return v12 & v9;
  }
  v14 = *a1;
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v14 + 48) = a2;
  v15 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  if (v15 < 0 && (v16 = a1[1], (v15 & 0x7FFFFFFFu) < *(_DWORD *)(v16 + 432)))
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 424) + 8 * (v15 & 0x7FFFFFFF));
  else
    v17 = 0;
  if (v8 == 118)
  {
    v36 = v17;
    LODWORD(v37) = 68;
    v38 = &v36;
    v39 = 1;
    v40 = 0;
    v41 = 0;
    v18 = a1[2];
    v19 = *(_DWORD *)(v18 + 3872);
    if (v19)
      v20 = v19 - 45;
    else
      v20 = 23;
    v21 = sub_1C553C530(v18 + 168 * v20 + 8, (uint64_t)&v37);
    if (v21 == 11)
    {
      v24 = v15;
      if (v39)
      {
        v28 = 0;
        v29 = v18 + 35456;
        v30 = 1;
        while (1)
        {
          v31 = v38[v28];
          v34[0] = v37;
          v34[1] = v30 - 1;
          v35 = v31;
          v32 = sub_1C553DEB0(v29, (uint64_t)v34);
          if (v32)
            break;
          v28 = v30;
          if (v39 <= v30++)
            goto LABEL_23;
        }
        if (v32 - 1 < 0xA)
          goto LABEL_18;
      }
LABEL_23:
      v15 = v24;
    }
    else if (v21)
    {
LABEL_18:
      v9 = 0;
      v12 = 1;
      return v12 & v9;
    }
    v25 = *a1;
    LODWORD(v37) = v15;
    LODWORD(v38) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v25 + 32))(v25, 68, &v37, 1, 0, 0, 0);
  }
  else
  {
    v22 = sub_1C5518468((uint64_t)a1, v17);
    v12 = 1;
    if (v22)
    {
      v9 = 0;
      return v12 & v9;
    }
    v23 = *a1;
    LODWORD(v37) = v15;
    LODWORD(v38) = 1;
    sub_1C5544694(v23, (unint64_t *)&v37, 0);
  }
  v26 = *(_DWORD *)(a4 + 8);
  if (v26 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v26 + 1, 4);
    v26 = *(_DWORD *)(a4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a4 + 4 * v26) = v15;
  ++*(_DWORD *)(a4 + 8);
  v27 = *(unsigned int *)(a3 + 8);
  if (v27 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = a2;
  ++*(_DWORD *)(a3 + 8);
  sub_1C55181AC((uint64_t)a1, a2, v10, a3, 0);
  v12 = 1;
  v9 = 1;
  return v12 & v9;
}

uint64_t sub_1C55181AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;

  v8 = result;
  if (a2 != a3)
  {
    while (1)
    {
      if (**(_WORD **)(a2 + 16) == 74)
        v9 = (unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * (*(_DWORD *)(a2 + 40) - 1) + 4);
      else
        v9 = (unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
      v10 = *v9;
      v11 = *(_QWORD *)(v8 + 8);
      if ((v10 & 0x80000000) != 0)
        v12 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
      else
        v12 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v10);
      v13 = *v12;
      if (v13
        && ((*(_BYTE *)(v13 + 3) & 1) != 0 || (v13 = *(_QWORD *)(v13 + 24)) != 0 && (*(_BYTE *)(v13 + 3) & 1) != 0))
      {
        v14 = *(_QWORD *)(v13 + 8);
        if ((v10 & 0x80000000) == 0)
        {
LABEL_10:
          v15 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v10);
          goto LABEL_16;
        }
      }
      else
      {
        v14 = 0;
        if ((v10 & 0x80000000) == 0)
          goto LABEL_10;
      }
      v15 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
LABEL_16:
      v16 = *v15;
      if (!v16)
        break;
      while ((*(_BYTE *)(v16 + 3) & 1) != 0)
      {
        v16 = *(_QWORD *)(v16 + 24);
        if (!v16)
          goto LABEL_26;
      }
      while (1)
      {
        v16 = *(_QWORD *)(v16 + 24);
        if (!v16)
          break;
        if ((*(_BYTE *)(v16 + 3) & 1) == 0)
          goto LABEL_26;
      }
      if (v14 == a3)
        goto LABEL_27;
      v17 = *(unsigned int *)(a4 + 8);
      if (v17 >= *(unsigned int *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v17 + 1, 8);
        v17 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v17) = v14;
      ++*(_DWORD *)(a4 + 8);
      a2 = v14;
    }
  }
LABEL_26:
  if (a2 == a3)
  {
LABEL_27:
    v18 = *(_QWORD *)(a3 + 32);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = *(unsigned __int8 *)(v19 + 4);
    if ((*(_BYTE *)(v19 + 8) & 2) == 0 || (v28 = *(_DWORD *)(a3 + 40), v28 == v20))
    {
      v21 = v20;
    }
    else
    {
      v29 = v28 - 1;
      v21 = v20;
      do
      {
        v30 = *(_DWORD *)(v18 + 32 * v20);
        if ((v30 & 0x10000FF) != 0x1000000)
          break;
        v21 += (v30 & 0x2000000) == 0;
        if (v29 == v20)
          break;
        ++v20;
      }
      while ((v30 & 0x2000000) == 0);
    }
    if (v21)
    {
      v22 = 0;
      v23 = v18 + 32 * v21;
      while (1)
      {
        result = *(_QWORD *)(v8 + 8);
        if (v22 == a5)
        {
          v24 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 32 * a5 + 4);
          if ((v24 & 0x80000000) != 0)
            v25 = (uint64_t *)(*(_QWORD *)(result + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
          else
            v25 = (uint64_t *)(*(_QWORD *)(result + 272) + 8 * v24);
          v26 = *v25;
          if (!v26)
            break;
          while ((*(_BYTE *)(v26 + 3) & 1) != 0)
          {
            v26 = *(_QWORD *)(v26 + 24);
            if (!v26)
              goto LABEL_46;
          }
          while (1)
          {
            v26 = *(_QWORD *)(v26 + 24);
            if (!v26)
              break;
            if ((*(_BYTE *)(v26 + 3) & 1) == 0)
              goto LABEL_46;
          }
          v18 += 32;
          v22 = a5;
        }
        else
        {
          result = sub_1C4778650(result, *(_DWORD *)(v18 + 4));
          if ((result & 1) == 0)
            return result;
          v18 += 32;
        }
        if (v18 == v23)
          break;
        ++v22;
      }
    }
LABEL_46:
    v27 = *(unsigned int *)(a4 + 8);
    if (v27 >= *(_DWORD *)(a4 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v27 + 1, 8);
      LODWORD(v27) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v27) = a3;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

BOOL sub_1C5518468(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned __int8 v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v13;
  uint64_t v14;
  _DWORD v15[2];
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  if ((a2 & 0xFFFFFFFFFFFFFFF9) != 0 && (a2 & 4) != 0)
  {
    v13 = sub_1C492E6FC(&v25);
    v27[0] = v13;
    v20 = 120;
    v21 = v27;
    v22 = 1;
    v14 = 1;
    v23 = 0;
    v24 = 0;
    if (sub_1C553C644(*(_QWORD *)(a1 + 16), (uint64_t)&v20) - 9 >= 2)
    {
      v26[0] = v25;
      v26[1] = v13;
      v15[0] = 77;
      v16 = v26;
      v17 = 2;
      v18 = 0;
      v19 = 0;
      return sub_1C553C644(*(_QWORD *)(a1 + 16), (uint64_t)v15) - 9 < 2;
    }
    return v14;
  }
  else
  {
    v26[0] = a2;
    v20 = 120;
    v21 = v26;
    v22 = 1;
    v23 = 0;
    v24 = 0;
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_DWORD *)(v2 + 12608);
    if (v3)
      v4 = v3 - 45;
    else
      v4 = 75;
    v5 = sub_1C553C530(v2 + 168 * v4 + 8, (uint64_t)&v20);
    if (v5 == 11)
    {
      if (!v22)
        return 0;
      v7 = 0;
      v8 = v2 + 35456;
      v9 = 1;
      while (1)
      {
        v10 = (_QWORD *)v21[v7];
        v15[0] = v20;
        v15[1] = v9 - 1;
        v16 = v10;
        v5 = sub_1C553DEB0(v8, (uint64_t)v15);
        if (v5)
          break;
        result = 0;
        v7 = v9;
        if (v22 <= v9++)
          return result;
      }
    }
    return v5 - 9 < 2;
  }
}

uint64_t sub_1C5518630(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int *v42;
  int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  BOOL v48;
  char v49;
  uint64_t v50;
  void *v52;
  int v53;
  int v54;
  int v55;
  const char *v56;
  uint64_t v57;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  char v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned __int8 **v69;
  unsigned __int8 **v70;
  unsigned __int8 *v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _DWORD *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned __int8 v88;
  int v89;
  void *v90;
  uint64_t v91;
  _BYTE v92[48];
  unint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  _QWORD v97[25];

  v97[24] = *MEMORY[0x1E0C80C00];
  sub_1C554CC94(a2, *(_QWORD *)a1, (uint64_t)&v95);
  if (LOBYTE(v97[0]))
    v8 = (char *)v95;
  else
    v8 = 0;
  switch(**((_WORD **)v8 + 2))
  {
    case 'J':
      if ((a2 & 0x80000000) != 0 && (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 432))
        v9 = *(void **)(*(_QWORD *)(*(_QWORD *)a1 + 424) + 8 * (a2 & 0x7FFFFFFF));
      else
        v9 = 0;
      v95 = v9;
      v35 = sub_1C4825F50((unint64_t *)&v95);
      if ((_DWORD)v34 == 1)
      v36 = *((_QWORD *)v8 + 4);
      v37 = *((_QWORD *)v8 + 2);
      v38 = *(unsigned __int8 *)(v37 + 4);
      if ((*(_BYTE *)(v37 + 8) & 2) == 0 || (v53 = *((_DWORD *)v8 + 10), v53 == v38))
      {
        v39 = v38;
      }
      else
      {
        v54 = v53 - 1;
        v39 = v38;
        do
        {
          v55 = *(_DWORD *)(v36 + 32 * v38);
          if ((v55 & 0x10000FF) != 0x1000000)
            break;
          v39 += (v55 & 0x2000000) == 0;
          if (v54 == v38)
            break;
          ++v38;
        }
        while ((v55 & 0x2000000) == 0);
      }
      v40 = 0;
      if (v39)
      {
        v41 = 32 * v39 - 32;
        v42 = (int *)(v36 + 4);
        do
        {
          v43 = *v42;
          v42 += 8;
          v44 = v43 == a2;
          if (v43 == a2)
            v45 = 0;
          else
            v45 = v35;
          v46 = v44 || v41 == 0;
          v41 -= 32;
          v40 += v45;
        }
        while (!v46);
      }
      v47 = sub_1C5518630(a1, *(unsigned int *)(v36 + 32 * (*((_DWORD *)v8 + 10) - 1) + 4), (v40 + a3), a4);
      if ((_DWORD)a3)
        v48 = 0;
      else
        v48 = v35 == (_DWORD)a4;
      v49 = v48;
      if (v47)
        v50 = v47;
      else
        v50 = a2;
      if (!v47 && (v49 & 1) == 0)
        return *(unsigned int *)(a1 + 24);
      return v50;
    case 'K':
      v12 = *((_QWORD *)v8 + 4);
      v13 = *(unsigned int *)(v12 + 68);
      if ((v13 & 0x80000000) != 0
        && (v13 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 432))
      {
        v14 = *(void **)(*(_QWORD *)(*(_QWORD *)a1 + 424) + 8 * (v13 & 0x7FFFFFFF));
      }
      else
      {
        v14 = 0;
      }
      v23 = *(unsigned int *)(v12 + 36);
      v95 = v14;
      v24 = *(_QWORD *)(v12 + 112);
      v25 = sub_1C4825F50((unint64_t *)&v95);
      if ((_DWORD)v26 == 1)
      {
        v89 = v25;
        v25 = v89;
      }
      v27 = v25 + v24;
      v28 = (int)a4 + (int)a3 > v24 && v27 > a3;
      if (!v28)
      {
        v29 = a1;
        v30 = v23;
LABEL_91:
        v33 = a3;
        return sub_1C5518630(v29, v30, v33, a4);
      }
      if (a3 >= v24 && (int)a4 + (int)a3 <= v27)
      {
        a3 = (a3 - v24);
        if (!(_DWORD)a3)
        {
          if ((v13 & 0x80000000) != 0
            && (v13 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 432))
          {
            v52 = *(void **)(*(_QWORD *)(*(_QWORD *)a1 + 424) + 8 * (v13 & 0x7FFFFFFF));
          }
          else
          {
            v52 = 0;
          }
          v90 = v52;
          v57 = sub_1C4825F50((unint64_t *)&v90);
          if ((_DWORD)v56 == 1)
          if (v57 == a4)
            *(_DWORD *)(a1 + 24) = v13;
        }
        v29 = a1;
        v30 = v13;
        goto LABEL_91;
      }
      return 0;
    case 'M':
      v10 = *(_DWORD *)(*((_QWORD *)v8 + 4) + 36);
      if (v10 < 0 && (v10 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 432))
        v11 = *(void **)(*(_QWORD *)(*(_QWORD *)a1 + 424) + 8 * (v10 & 0x7FFFFFFF));
      else
        v11 = 0;
      v95 = v11;
      v19 = sub_1C4825F50((unint64_t *)&v95);
      if ((_DWORD)v18 == 1)
      if (a3 % v19 || v19 > a4)
        return *(unsigned int *)(a1 + 24);
      v20 = a3 / v19 + 1;
      if (v19 >= a4)
      {
        v22 = *((_QWORD *)v8 + 4) + 32 * v20;
        return *(unsigned int *)(v22 + 4);
      }
      v21 = a4 / v19;
      if (a4 % v19)
        return *(unsigned int *)(a1 + 24);
      if ((_DWORD)v21 == *((_DWORD *)v8 + 10) - 1)
      {
        v22 = *((_QWORD *)v8 + 4);
        return *(unsigned int *)(v22 + 4);
      }
      if (v10 < 0 && (v10 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 432))
        v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 424) + 8 * (v10 & 0x7FFFFFFF));
      else
        v59 = 0;
      v60 = sub_1C4953AD0(v21, v59);
      v61 = *(_QWORD *)(a1 + 16);
      v93 = v60;
      v94 = v59;
      LODWORD(v95) = 77;
      v96 = (uint64_t)&v93;
      v97[0] = 2;
      v97[1] = 0;
      v97[2] = 0;
      v62 = *(_DWORD *)(v61 + 5384);
      if (v62)
        v63 = v62 - 45;
      else
        v63 = 32;
      v64 = sub_1C553C530(v61 + 168 * v63 + 8, (uint64_t)&v95);
      if (v64 != 11)
      {
        if (!v64)
          goto LABEL_105;
        return *(unsigned int *)(a1 + 24);
      }
      if (v97[0])
      {
        v84 = 0;
        v85 = v61 + 35456;
        v86 = 1;
        while (1)
        {
          v87 = *(_QWORD *)(v96 + 8 * v84);
          LODWORD(v90) = (_DWORD)v95;
          HIDWORD(v90) = v86 - 1;
          v91 = v87;
          v88 = sub_1C553DEB0(v85, (uint64_t)&v90);
          if (v88)
            break;
          v84 = v86;
          v28 = v97[0] > (unint64_t)v86++;
          if (!v28)
            goto LABEL_105;
        }
        if (v88 - 1 <= 9)
          return *(unsigned int *)(a1 + 24);
      }
LABEL_105:
      v90 = v92;
      v91 = 0xC00000000;
      v65 = v21 + v20;
      if (v20 < v65)
      {
        v66 = 0;
        do
        {
          v67 = *(_DWORD *)(*((_QWORD *)v8 + 4) + 32 * v20 + 4);
          if (v66 >= HIDWORD(v91))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, v66 + 1, 4);
            v66 = v91;
          }
          *((_DWORD *)v90 + v66) = v67;
          v66 = v91 + 1;
          LODWORD(v91) = v91 + 1;
          ++v20;
        }
        while ((_DWORD)v20 != v65);
      }
      v68 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v68 + 40) = *((_QWORD *)v8 + 3);
      *(_QWORD *)(v68 + 48) = v8;
      v69 = (unsigned __int8 **)(v8 + 56);
      v70 = (unsigned __int8 **)(v68 + 32);
      if (v8 + 56 != (char *)(v68 + 32))
      {
        if (*v70)
          llvm::MetadataTracking::untrack(v68 + 32, *v70);
        v71 = *v69;
        *v70 = *v69;
        if (v71)
          llvm::MetadataTracking::track((uint64_t)v70, v71, 2);
      }
      v72 = *(_QWORD *)(a1 + 8);
      v93 = v60;
      LODWORD(v94) = 0;
      v73 = (int *)v90;
      v74 = v91;
      v95 = v97;
      v96 = 0x800000000;
      if (v91 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)v97, v91, 24);
        v75 = v96;
        v76 = v95;
LABEL_118:
        v77 = 3 * v75;
        v78 = 4 * v74;
        do
        {
          v79 = *v73++;
          v80 = &v76[v77];
          *v80 = v79;
          v80[4] = 0;
          v77 += 3;
          v78 -= 4;
        }
        while (v78);
        v81 = v96;
        goto LABEL_122;
      }
      if ((_DWORD)v91)
      {
        v75 = 0;
        v76 = v97;
        goto LABEL_118;
      }
      v81 = 0;
      v76 = v97;
LABEL_122:
      LODWORD(v96) = v81 + v74;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v72 + 32))(v72, 77, &v93, 1, v76);
      v83 = v82;
      if (v95 != v97)
        free(v95);
      v50 = *(unsigned int *)(*(_QWORD *)(v83 + 32) + 4);
      if (v90 != v92)
        free(v90);
      return v50;
    case 'O':
      v15 = *(_DWORD *)(*((_QWORD *)v8 + 4) + 36);
      if (v15 < 0 && (v16 = v15 & 0x7FFFFFFF, v16 < *(_DWORD *)(*(_QWORD *)a1 + 432)))
        v17 = *(void **)(*(_QWORD *)(*(_QWORD *)a1 + 424) + 8 * v16);
      else
        v17 = 0;
      v95 = v17;
      v32 = sub_1C4825F50((unint64_t *)&v95);
      if ((_DWORD)v31 == 1)
      v33 = a3 % v32;
      if ((int)v33 + (int)a4 > v32)
        return *(unsigned int *)(a1 + 24);
      v30 = *(unsigned int *)(*((_QWORD *)v8 + 4) + 32 * (a3 / v32 + 1) + 4);
      if (v32 == (_DWORD)a4 && !(_DWORD)v33)
        *(_DWORD *)(a1 + 24) = v30;
      v29 = a1;
      return sub_1C5518630(v29, v30, v33, a4);
    default:
      return *(unsigned int *)(a1 + 24);
  }
}

void sub_1C5518D4C(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;

  if (a2)
  {
    sub_1C5518D4C(a1, *a2);
    sub_1C5518D4C(a1, a2[1]);
    v4 = (unsigned __int8 *)a2[4];
    if (v4)
      llvm::MetadataTracking::untrack((uint64_t)(a2 + 4), v4);
    operator delete(a2);
  }
}

void **sub_1C5518DAC(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unsigned __int8 *v5;
  void **v6;
  void **v7;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v7 = result;
    v3 = 8 * v2;
    v4 = (char *)(v1 - 1);
    do
    {
      v5 = *(unsigned __int8 **)&v4[v3];
      if (v5)
        llvm::MetadataTracking::untrack((uint64_t)&v4[v3], v5);
      v3 -= 8;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

uint64_t sub_1C5518E28()
{
  char v1;
  char *v2;
  int v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Should enable CSE in Legalizer";
  *((_QWORD *)&v4 + 1) = 30;
  v3 = 0;
  v1 = 0;
  v2 = &v1;
  sub_1C6271568(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED805B60, &dword_1C475E000);
  *(_QWORD *)&v4 = "Allow G_INSERT to be considered an artifact. Hack around AMDGPU test infinite loops.";
  *((_QWORD *)&v4 + 1) = 84;
  v3 = 0;
  v1 = 1;
  v2 = &v1;
  sub_1C6271640(&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED805C20, &dword_1C475E000);
}

uint64_t sub_1C5518EE8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const llvm::APInt *v13;
  int8x8_t v14;
  uint64_t v15;
  uint64_t result;
  unsigned int (*v17)(void);

  v6 = *a1;
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 48) = a2;
  v7 = (unsigned __int8 **)(a2 + 56);
  v8 = (unsigned __int8 **)(v6 + 32);
  if (a2 + 56 != v6 + 32)
  {
    if (*v8)
      llvm::MetadataTracking::untrack(v6 + 32, *v8);
    v9 = *v7;
    *v8 = *v7;
    if (v9)
      llvm::MetadataTracking::track((uint64_t)v8, v9, 2);
  }
  v10 = a1[3];
  if ((**(_WORD **)(a2 + 16) & 0xFFFE) == 0x74)
  {
    v17 = *(unsigned int (**)(void))(*(_QWORD *)v10 + 24);
LABEL_11:
    if (v17())
      return 1;
    else
      return 2;
  }
  v11 = sub_1C553C7F0(v10, a2, a1[2]);
  v15 = v11;
  if (!(_BYTE)v11)
    return v15;
  switch((char)v11)
  {
    case 1:
      result = sub_1C551A098(a1, a2, SHIDWORD(v11), v12);
      break;
    case 2:
      result = sub_1C5521234(a1, a2, SHIDWORD(v11), v12);
      break;
    case 3:
      result = sub_1C553159C(a1, a2, SHIDWORD(v11), v12, v14);
      break;
    case 4:
      result = sub_1C553389C((uint64_t)a1, a2, SHIDWORD(v11), v12);
      break;
    case 5:
      result = sub_1C5524C34((uint64_t)a1, a2, SHIDWORD(v11), v12);
      break;
    case 6:
      result = sub_1C5525CEC((uint64_t)a1, a2, v13);
      break;
    case 7:
      result = sub_1C55190D8((uint64_t)a1, a2, a3, v12);
      break;
    case 8:
      v17 = *(unsigned int (**)(void))(*(_QWORD *)a1[3] + 16);
      goto LABEL_11;
    default:
      return 2;
  }
  return result;
}

uint64_t sub_1C55190D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v30;
  _QWORD *v31;
  const char *v32;
  int v33;
  unint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const char *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  const char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  const char *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _DWORD *v84;
  _DWORD *v85;
  int v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  _QWORD v99[59];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = (uint64_t *)v4;
  v99[57] = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(*(_QWORD *)(v5 + 32) + 4);
  if (v8 < 0 && (v9 = *(_QWORD *)(v4 + 16), v10 = v8 & 0x7FFFFFFF, v10 < *(_DWORD *)(v9 + 432)))
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v10);
  else
    v11 = 0;
  v87 = v11;
  v13 = sub_1C4825F50(&v87);
  if ((_DWORD)v12 == 1)
  v14 = *v7;
  v15 = *(_QWORD *)(*v7 + 8);
  v16 = ***(_QWORD ****)v15;
  v17 = **(unsigned __int16 **)(v6 + 16);
  result = 2;
  switch(**(_WORD **)(v6 + 16))
  {
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xBB:
    case 0xBC:
    case 0xD6:
    case 0xD7:
    case 0xD8:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
      goto LABEL_8;
    case 0xA7:
    case 0xAB:
    case 0xB1:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEB:
      return result;
    case 0xB2:
    case 0xB3:
      v42 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 36);
      if (v42 < 0 && (v43 = v7[2], v44 = v42 & 0x7FFFFFFF, v44 < *(_DWORD *)(v43 + 432)))
        v45 = *(_QWORD *)(*(_QWORD *)(v43 + 424) + 8 * v44);
      else
        v45 = 0;
      v64 = sub_1C5535F64(v16, v45);
      v65 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4);
      if (v65 < 0 && (v66 = v7[2], v67 = v65 & 0x7FFFFFFF, v67 < *(_DWORD *)(v66 + 432)))
        v68 = *(_QWORD *)(*(_QWORD *)(v66 + 424) + 8 * v67);
      else
        v68 = 0;
      v69 = sub_1C5535F64(v16, v68);
      if (v64)
        v70 = v69 == 0;
      else
        v70 = 1;
      if (v70)
        return 2;
      v60 = v69;
      v58 = *v7;
      v71 = v6;
      v72 = v64;
      goto LABEL_115;
    case 0xB4:
    case 0xB5:
      v38 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 36);
      if (v38 < 0 && (v39 = v7[2], v40 = v38 & 0x7FFFFFFF, v40 < *(_DWORD *)(v39 + 432)))
        v41 = *(_QWORD *)(*(_QWORD *)(v39 + 424) + 8 * v40);
      else
        v41 = 0;
      v90 = v41;
      v51 = sub_1C4825F50(&v90);
      if ((_DWORD)v50 == 1)
      v52 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4);
      if (v52 < 0 && (v53 = v7[2], v54 = v52 & 0x7FFFFFFF, v54 < *(_DWORD *)(v53 + 432)))
        v55 = *(_QWORD *)(*(_QWORD *)(v53 + 424) + 8 * v54);
      else
        v55 = 0;
      v90 = v55;
      v57 = sub_1C4825F50(&v90);
      if ((_DWORD)v56 == 1)
      if (v57 != 64 && v57 != 32 || v51 != 64 && v51 != 32)
        return 2;
      v58 = *v7;
      v59 = *v16;
      if (v57 == 32)
        v60 = *v16 + 1960;
      else
        v60 = *v16 + 1984;
      v61 = v59 + 1696;
      v62 = v59 + 1672;
      v63 = v51 == 64;
      goto LABEL_111;
    case 0xB6:
    case 0xB7:
      v46 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 36);
      if (v46 < 0 && (v47 = v7[2], v48 = v46 & 0x7FFFFFFF, v48 < *(_DWORD *)(v47 + 432)))
        v49 = *(_QWORD *)(*(_QWORD *)(v47 + 424) + 8 * v48);
      else
        v49 = 0;
      v90 = v49;
      v74 = sub_1C4825F50(&v90);
      if ((_DWORD)v73 == 1)
      v75 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4);
      if (v75 < 0 && (v76 = v7[2], v77 = v75 & 0x7FFFFFFF, v77 < *(_DWORD *)(v76 + 432)))
        v78 = *(_QWORD *)(*(_QWORD *)(v76 + 424) + 8 * v77);
      else
        v78 = 0;
      v90 = v78;
      v80 = sub_1C4825F50(&v90);
      if ((_DWORD)v79 == 1)
      if (v74 != 64 && v74 != 32 || v80 != 64 && v80 != 32)
        return 2;
      v58 = *v7;
      v81 = *v16;
      if (v80 == 64)
        v60 = *v16 + 1696;
      else
        v60 = *v16 + 1672;
      v61 = v81 + 1960;
      v62 = v81 + 1984;
      v63 = v74 == 32;
LABEL_111:
      if (v63)
        v72 = v61;
      else
        v72 = v62;
      v71 = v6;
LABEL_115:
      sub_1C5536028(v71, v58, v60, v72);
      goto LABEL_122;
    case 0xD2:
      goto LABEL_13;
    case 0xEA:
    case 0xEC:
    case 0xED:
    case 0xEE:
      v23 = *(_QWORD *)(v14 + 24);
      v97 = v99;
      v98 = 0x300000000;
      if (*(_DWORD *)(v6 + 40) == 1)
        goto LABEL_55;
      v24 = 0;
      v25 = 4;
      while (1)
      {
        v26 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + v25);
        v88 = v26;
        if (v26 < 0 && (v27 = v26 & 0x7FFFFFFF, v27 < *(_DWORD *)(v23 + 432)))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(v23 + 424) + 8 * v27);
          v89 = v28;
          if ((v28 & 0xFFFFFFFFFFFFFFF9) != 0 && (v28 & 6) == 2)
          {
            v30 = 35;
            if ((v28 & 4) == 0)
              v30 = 19;
            v31 = (_QWORD *)llvm::PointerType::get((llvm::PointerType *)(*v16 + 1912), (llvm::Type *)((v28 >> v30) & 0xFFFFFF));
            goto LABEL_39;
          }
        }
        else
        {
          v89 = 0;
        }
        v33 = sub_1C4825F50(&v89);
        if ((_DWORD)v32 == 1)
        LODWORD(v90) = v33;
        if (v33 <= 63)
        {
          if (v33 <= 31)
          {
            switch(v33)
            {
              case 16:
                v31 = (_QWORD *)(*v16 + 1936);
                break;
              case 8:
                v31 = (_QWORD *)(*v16 + 1912);
                break;
              case 1:
                v31 = (_QWORD *)(*v16 + 1888);
                break;
              default:
LABEL_53:
                v35 = sub_1C5270984(*v16 + 2168, &v90);
                v31 = (_QWORD *)*((_QWORD *)v35 + 1);
                if (!v31)
                {
                  v36 = v35;
                  v31 = (_QWORD *)sub_1C484358C(*v16 + 2040, 24, 3);
                  v37 = v90;
                  *v31 = v16;
                  v31[2] = 0;
                  v31[1] = (v37 << 8) | 0xDu;
                  *((_QWORD *)v36 + 1) = v31;
                }
                break;
            }
          }
          else
          {
            if (v33 != 32)
              goto LABEL_53;
            v31 = (_QWORD *)(*v16 + 1960);
          }
        }
        else if (v33 == 64)
        {
          v31 = (_QWORD *)(*v16 + 1984);
        }
        else
        {
          if (v33 != 128)
            goto LABEL_53;
          v31 = (_QWORD *)(*v16 + 2008);
        }
LABEL_39:
        sub_1C4860878((uint64_t)&v90, &v88, 1, (uint64_t)v31, 0, 0, 0, 1, 0);
        v34 = sub_1C4861E4C((uint64_t)&v97, (unint64_t)&v90, 1);
        sub_1C54F552C((uint64_t)v97 + 152 * v98, v34);
        LODWORD(v98) = v98 + 1;
        if (v95 != &v96)
          free(v95);
        if (v93 != &v94)
          free(v93);
        if (v91 != &v92)
          free(v91);
        ++v24;
        v25 += 32;
        if (v24 >= (*(_DWORD *)(v6 + 40) - 1))
        {
          v15 = *(_QWORD *)(v14 + 8);
LABEL_55:
          (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 136))(*(_QWORD *)(v15 + 16));
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 16));
          __asm { BR              X12 }
        }
      }
    default:
      if ((v17 - 59) >= 4)
      {
        if (v17 != 88)
          return result;
LABEL_8:
        v19 = sub_1C5535F64(v16, v87);
        if (!v19)
          return 2;
        v20 = (_QWORD *)v19;
        HIDWORD(v22) = v13;
        LODWORD(v22) = v13 - 32;
        v21 = v22 >> 4;
        result = 2;
        if (v21 > 6 || ((1 << v21) & 0x4D) == 0)
          return result;
      }
      else
      {
LABEL_13:
        LODWORD(v90) = v13;
        if (v13 <= 63)
        {
          if (v13 <= 31)
          {
            switch(v13)
            {
              case 16:
                v20 = (_QWORD *)(*v16 + 1936);
                goto LABEL_121;
              case 8:
                v20 = (_QWORD *)(*v16 + 1912);
                goto LABEL_121;
              case 1:
                v20 = (_QWORD *)(*v16 + 1888);
                goto LABEL_121;
            }
          }
          else if (v13 == 32)
          {
            v20 = (_QWORD *)(*v16 + 1960);
            goto LABEL_121;
          }
        }
        else
        {
          if (v13 == 64)
          {
            v20 = (_QWORD *)(*v16 + 1984);
            goto LABEL_121;
          }
          if (v13 == 128)
          {
            v20 = (_QWORD *)(*v16 + 2008);
            goto LABEL_121;
          }
        }
        v84 = sub_1C5270984(*v16 + 2168, &v90);
        v20 = (_QWORD *)*((_QWORD *)v84 + 1);
        if (!v20)
        {
          v85 = v84;
          v20 = (_QWORD *)sub_1C484358C(*v16 + 2040, 24, 3);
          v86 = v90;
          *v20 = v16;
          v20[2] = 0;
          v20[1] = (v86 << 8) | 0xDu;
          *((_QWORD *)v85 + 1) = v20;
        }
      }
LABEL_121:
      v82 = sub_1C5535998(v6, *v7, v13, (uint64_t)v20);
LABEL_122:
      if (v82 != 1)
        return 2;
      v83 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v83 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v83 = v6;
          do
            v83 = *(_QWORD *)(v83 + 8);
          while ((*(_WORD *)(v83 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v6 + 24) + 40, v6, *(_QWORD *)(v83 + 8));
      return 1;
  }
}

uint64_t sub_1C551A098(uint64_t *a1, uint64_t a2, int a3, unint64_t a4)
{
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  void *v25;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;
  _QWORD *v30;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v38;
  unsigned int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  void (*v90)(void);
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  int v98;
  int v99;
  _QWORD *v100;
  void *v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  void *v105;
  const char *v106;
  unsigned int v107;
  const char *v108;
  unsigned int v109;
  uint64_t v110;
  char v111;
  _DWORD *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v128;
  int v129;
  unint64_t v130;
  unsigned int v131;
  int v132;
  unint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  BOOL v139;
  unint64_t v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  llvm::ConstantInt *****v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  unsigned int v176;
  const char *v177;
  uint64_t v178;
  int v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  llvm::ConstantInt *****v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  unsigned int v194;
  const char *v195;
  uint64_t v196;
  int v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  llvm::ConstantInt *****v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unint64_t v211;
  uint64_t v212;
  void *v213;
  void *v214;
  uint64_t *v215;
  uint64_t *v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  _QWORD *v223;
  uint64_t v224;
  void *v225;
  unsigned int v226;
  _QWORD *v227;
  unint64_t v228;
  int v229;
  _QWORD *v230;
  unint64_t v231;
  uint64_t v232;
  _DWORD *v233;
  int v234;
  _QWORD *v235;
  int v237;
  unint64_t v238;
  int v239;
  _QWORD *v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  int v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  const char *v248;
  unint64_t v249;
  int v250;
  _QWORD *v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  int *v257;
  const char *v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  void (*v267)(void);
  int v268;
  _QWORD *v269;
  int v271;
  _QWORD *v272;
  int v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  const char *v282;
  unsigned int v283;
  const char *v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t *v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t *v294;
  const char *v295;
  uint64_t v296;
  int v297;
  unsigned int v298;
  void *v299;
  int v300;
  _QWORD *v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  const char *v314;
  int v315;
  const char *v316;
  int v317;
  uint64_t v318;
  unint64_t v319;
  const char *v320;
  unsigned int v321;
  unint64_t v322;
  uint64_t *v323;
  _QWORD *v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  unsigned int v333;
  int v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  int v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  unsigned int v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  uint64_t v360;
  void (*v361)(void);
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  void *v368;
  const char *v369;
  int v370;
  const char *v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  llvm::ConstantInt *****v379;
  llvm::ConstantInt *****v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int v387;
  uint64_t v388;
  llvm::ConstantInt *****v389;
  unsigned int v390;
  unint64_t v391;
  const llvm::APInt *v392;
  llvm::ValueHandleBase *v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  uint64_t v397;
  unint64_t v398;
  llvm::ConstantInt *****v399;
  uint64_t v400;
  const llvm::APInt *v401;
  llvm::ValueHandleBase *v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  unsigned int v406;
  uint64_t v407;
  int v408;
  int v409;
  int v410;
  const char *v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t *v414;
  int v415;
  uint64_t v416;
  const char *v417;
  uint64_t v418;
  const char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  int v428;
  _QWORD *v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  BOOL v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t *v437;
  uint64_t v438;
  const char *v439;
  unint64_t v440;
  const char *v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  int v446;
  int v447;
  _QWORD *v448;
  uint64_t v449;
  uint64_t v450;
  llvm::MachineMemOperand *v451;
  uint64_t v452;
  uint64_t v453;
  const char *v454;
  unint64_t v455;
  const char *v456;
  unint64_t v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  unsigned int v461;
  unint64_t v462;
  uint64_t v463;
  unsigned int v464;
  int v465;
  uint64_t v466;
  unsigned int v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  int v473;
  int v474;
  int v475;
  int *v476;
  unsigned int v477;
  uint64_t v478;
  int v479;
  const char *v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  _QWORD *v484;
  uint64_t v485;
  unint64_t v486;
  const char *v487;
  unsigned int v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  unint64_t v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  uint64_t **v505;
  unsigned int v506;
  uint64_t v507;
  int v508;
  uint64_t *v509;
  int v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  int v519;
  uint64_t v520;
  int v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  int v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  unsigned int v532;
  uint64_t v533;
  void **v534;
  void (**v535)(void **);
  __int128 *v536;
  void (**v537)(__int128 *);
  void *v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  int64_t v542;
  unint64_t v543;
  int v544;
  const char *v545;
  const llvm::APInt *v546;
  unsigned int v547;
  unint64_t v548;
  int v549;
  int v550;
  int64_t v551;
  unint64_t v552;
  int v553;
  void *v554;
  unint64_t v555;
  llvm::ConstantInt *****v556;
  size_t v557;
  const llvm::APInt *v558;
  llvm::ValueHandleBase *v559;
  uint64_t v560;
  llvm::ConstantInt *****v561;
  unint64_t v562;
  unint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  llvm::ConstantInt *****v567;
  llvm::ConstantInt *****v568;
  unint64_t v569;
  int v570;
  int v571;
  uint64_t v572;
  uint64_t v573;
  llvm::ConstantInt *****v574;
  llvm::ConstantInt *****v575;
  unsigned int v576;
  unsigned int v577;
  uint64_t v578;
  uint64_t v579;
  llvm::ConstantInt *****v580;
  uint64_t v581;
  llvm::ConstantInt *****v582;
  uint64_t v583;
  uint64_t v584;
  llvm::ConstantInt *****v585;
  llvm::ConstantInt *****v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  llvm::ConstantInt *****v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  llvm::ConstantInt *****v607;
  uint64_t v608;
  llvm::ConstantInt *****v609;
  uint64_t v610;
  uint64_t v611;
  llvm::ConstantInt *****v612;
  llvm::ConstantInt *****v613;
  uint64_t v614;
  uint64_t v615;
  llvm::ConstantInt *****v616;
  llvm::ConstantInt *****v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  llvm::ConstantInt *****v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  llvm::ConstantInt *****v628;
  uint64_t v629;
  llvm::ConstantInt *****v630;
  llvm::ConstantInt *****v631;
  int v632;
  uint64_t v633;
  llvm::ConstantInt *****v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  llvm::ConstantInt *****v638;
  uint64_t v639;
  llvm::ConstantInt *****v640;
  llvm::ConstantInt *****v641;
  int v642;
  uint64_t v643;
  llvm::ConstantInt *****v644;
  unint64_t v645;
  int v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  unsigned int v655;
  uint64_t v656;
  uint64_t v657;
  unsigned int v658;
  unint64_t v659;
  uint64_t v660;
  int v661;
  uint64_t v662;
  uint64_t v663;
  unint64_t v664;
  const char *v665;
  unsigned int v666;
  uint64_t v667;
  unint64_t v668;
  unint64_t v669;
  uint64_t v670;
  unint64_t v671;
  unint64_t v672;
  BOOL v673;
  _QWORD *v674;
  void *v675;
  uint64_t v676;
  unint64_t v677;
  int v678;
  uint64_t *v679;
  uint64_t v680;
  int v681;
  _QWORD *v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  BOOL v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t *v692;
  uint64_t v693;
  const char *v694;
  unint64_t v695;
  const char *v696;
  uint64_t v697;
  int v698;
  uint64_t v699;
  _QWORD *v700;
  uint64_t v701;
  llvm::MachineMemOperand *v702;
  uint64_t v703;
  unint64_t v704;
  int v705;
  const char *v706;
  unint64_t v707;
  int v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  llvm::ConstantInt *****v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  llvm::ConstantInt *****v724;
  uint64_t v725;
  llvm::ConstantInt *****v726;
  uint64_t v727;
  uint64_t v728;
  llvm::ConstantInt *****v729;
  uint64_t v730;
  uint64_t v731;
  llvm::ConstantInt *****v732;
  int *v733;
  int *v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  int v738;
  uint64_t v739;
  uint64_t v740;
  int v741;
  uint64_t v742;
  uint64_t v743;
  int v744;
  int v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  llvm::ConstantInt *****v749;
  llvm::ConstantInt *****v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  int v756;
  uint64_t v757;
  uint64_t v758;
  llvm::ConstantInt *****v759;
  int *v760;
  int *v761;
  unint64_t v762;
  uint64_t v763;
  uint64_t v764;
  int v765;
  int v766;
  int v767;
  uint64_t v768;
  uint64_t v769;
  void *v770;
  uint64_t v771;
  uint64_t v772;
  int v773;
  int v774;
  uint64_t v775;
  llvm::ConstantInt *****v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t *v779;
  uint64_t v780;
  int v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  llvm::ConstantInt *****v786;
  uint64_t v787;
  llvm::ConstantInt *****v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  llvm::ConstantInt *****v793;
  uint64_t v794;
  llvm::ConstantInt *****v795;
  uint64_t v796;
  uint64_t v797;
  int v798;
  uint64_t v799;
  int v800;
  int64_t v801;
  unint64_t v802;
  int v803;
  void *v804;
  unint64_t v805;
  llvm::ValueHandleBase *v806;
  uint64_t v807;
  llvm::ConstantInt *****v808;
  unint64_t v809;
  unint64_t v810;
  void *v811;
  llvm::ConstantInt *****v812;
  const llvm::APInt *v813;
  llvm::ValueHandleBase *v814;
  uint64_t v815;
  llvm::ConstantInt *****v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  llvm::ConstantInt *****v820;
  size_t v821;
  const llvm::APInt *v822;
  llvm::ValueHandleBase *v823;
  uint64_t v824;
  llvm::ConstantInt *****v825;
  uint64_t v826;
  llvm::ConstantInt *****v827;
  llvm::ConstantInt *****v828;
  uint64_t v829;
  llvm::ConstantInt *****v830;
  uint64_t v831;
  int *v832;
  uint64_t v833;
  uint64_t v834;
  int *v835;
  uint64_t v836;
  uint64_t v837;
  int v838;
  int *v839;
  int v840;
  char *v841;
  uint64_t v842;
  int *v843;
  uint64_t v844;
  uint64_t v845;
  int *v846;
  uint64_t v847;
  uint64_t v848;
  int v849;
  int *v850;
  int v851;
  unsigned int v852;
  unint64_t v853;
  unsigned int v854;
  llvm::MachineBasicBlock *v855;
  uint64_t v856;
  unint64_t FirstTerminator;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  int GenericVirtualRegister;
  _QWORD *v866;
  uint64_t v867;
  llvm::MachineFunction *v868;
  unint64_t *v869;
  unint64_t *v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unint64_t v875;
  uint64_t v876;
  int v877;
  unsigned int v878;
  int v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  int v890;
  int v891;
  uint64_t v892;
  uint64_t v893;
  int v894;
  int v895;
  int v896;
  uint64_t v897;
  int v898;
  int v899;
  int v900;
  uint64_t v901;
  uint64_t v902;
  unsigned int v903;
  uint64_t v904;
  unint64_t v905;
  unint64_t v906;
  uint64_t v907;
  int v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  int v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  void *v917;
  void *v918;
  unint64_t v919;
  llvm::ConstantInt *****v920;
  size_t v921;
  const llvm::APInt *v922;
  llvm::ValueHandleBase *v923;
  uint64_t v924;
  llvm::ConstantInt *****v925;
  llvm::ConstantInt *****v926;
  unint64_t v927;
  size_t v928;
  void *v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  int v933;
  uint64_t v934;
  uint64_t v935;
  int *v936;
  uint64_t v937;
  int *v938;
  uint64_t v939;
  uint64_t v940;
  int v941;
  int *v942;
  int v943;
  uint64_t v944;
  uint64_t v946;
  uint64_t v947;
  llvm::ConstantInt *****v948;
  llvm::ValueHandleBase *v949;
  uint64_t v950;
  uint64_t v951;
  void *v952;
  llvm::ConstantInt *****v953;
  uint64_t v954;
  uint64_t v955;
  llvm::ConstantInt *****v956;
  size_t v957;
  const llvm::APInt *v958;
  llvm::ValueHandleBase *v959;
  uint64_t v960;
  llvm::ConstantInt *****v961;
  uint64_t v962;
  llvm::ConstantInt *****v963;
  llvm::ConstantInt *****v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  llvm::ConstantInt *****v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  llvm::ConstantInt *****v974;
  uint64_t v975;
  uint64_t v976;
  llvm::ConstantInt *****v977;
  uint64_t v978;
  llvm::ConstantInt *****v979;
  unint64_t v980;
  void *v981;
  void *v982;
  void *v983;
  llvm::ConstantInt *****v984;
  uint64_t v985;
  unint64_t v986;
  unint64_t v987;
  int v988;
  int64_t v989;
  unint64_t v990;
  int v991;
  uint64_t v992;
  llvm::ConstantInt *****v993;
  uint64_t v994;
  llvm::ConstantInt *****v995;
  size_t v996;
  const llvm::APInt *v997;
  llvm::ValueHandleBase *v998;
  uint64_t v999;
  llvm::ConstantInt *****v1000;
  unint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  llvm::ConstantInt *****v1004;
  uint64_t v1005;
  llvm::ConstantInt *****v1006;
  llvm::ConstantInt *****v1007;
  uint64_t v1008;
  llvm::ConstantInt *****v1009;
  uint64_t v1010;
  llvm::ConstantInt *****v1011;
  llvm::ValueHandleBase *v1012;
  uint64_t v1013;
  uint64_t v1014;
  llvm::ConstantInt *****v1015;
  uint64_t v1016;
  uint64_t v1017;
  llvm::ConstantInt *****v1018;
  unint64_t v1019;
  size_t v1020;
  const llvm::APInt *v1021;
  llvm::ValueHandleBase *v1022;
  uint64_t v1023;
  llvm::ConstantInt *****v1024;
  uint64_t v1025;
  llvm::ConstantInt *****v1026;
  llvm::ConstantInt *****v1027;
  uint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  llvm::ConstantInt *****v1031;
  uint64_t v1032;
  _OWORD *v1033;
  uint64_t v1034;
  int v1035;
  llvm::ConstantInt *****v1036;
  int v1037;
  unint64_t v1038;
  unint64_t v1039;
  _OWORD *v1040;
  unint64_t v1041;
  uint64_t v1042;
  llvm::ConstantInt *****v1043;
  llvm::ConstantInt *****v1044;
  unint64_t v1045;
  llvm::ConstantInt *****v1046;
  _OWORD *v1047;
  _OWORD *v1048;
  uint64_t v1049;
  uint64_t v1050;
  llvm::ConstantInt *****v1051;
  uint64_t v1052;
  unint64_t v1053;
  __int128 v1054;
  unint64_t v1055;
  unint64_t v1056;
  llvm::ConstantInt *****v1057;
  int v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  int v1063;
  uint64_t v1064;
  uint64_t v1065;
  unint64_t v1066;
  int v1067;
  unsigned int v1068;
  uint64_t v1069;
  unsigned int v1070;
  unint64_t v1071;
  unsigned int v1072;
  int v1073;
  int v1074;
  unint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  llvm::ConstantInt *****v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t *v1081;
  unint64_t v1082;
  void *v1083;
  unint64_t v1084;
  void *v1085;
  uint64_t v1086;
  llvm::ConstantInt *****v1087;
  uint64_t v1090;
  unint64_t v1091;
  unint64_t v1092;
  unint64_t v1093;
  unint64_t v1094;
  int v1095;
  void *v1096;
  uint64_t v1097;
  _BYTE v1098[16];
  void *v1099;
  uint64_t v1100;
  _DWORD v1101[4];
  __int128 v1102;
  _DWORD v1103[4];
  void *v1104;
  uint64_t v1105;
  _BYTE v1106[16];
  void *__src;
  uint64_t v1108;
  int v1109;
  char v1110;
  void *v1111;
  uint64_t v1112;
  uint64_t v1113;
  void **v1114;
  __int128 v1115;
  int v1116;
  unint64_t v1117;
  llvm::ConstantInt *****v1118;
  int v1119;
  uint64_t v1120;
  llvm::ConstantInt *****v1121;
  int v1122;
  uint64_t v1123;

  v1123 = *MEMORY[0x1E0C80C00];
  v1091 = a4;
  v5 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  if (v5 < 0 && (v6 = (_QWORD *)a1[2], v7 = v5 & 0x7FFFFFFF, v7 < *((_DWORD *)v6 + 108)))
    v8 = *(_QWORD *)(v6[53] + 8 * v7);
  else
    v8 = 0;
  *(_QWORD *)&v1115 = v8;
  v10 = sub_1C4825F50((unint64_t *)&v1115);
  if ((_DWORD)v9 == 1)
  v12 = sub_1C4825F50(&v1091);
  if ((_DWORD)v11 == 1)
  v13 = *(unsigned __int16 **)(a2 + 16);
  v14 = *v13;
  v15 = 2;
  if (v14 <= 0xB1)
  {
    switch(*v13)
    {
      case 0x41u:
      case 0x42u:
      case 0x43u:
        v45 = v1091;
        v46 = *(_QWORD *)(a2 + 32);
        v47 = *(_DWORD *)(v46 + 4);
        if (v47 < 0 && (v48 = (_QWORD *)a1[2], (v47 & 0x7FFFFFFFu) < (unint64_t)*((unsigned int *)v48 + 108)))
          v49 = *(_QWORD *)(v48[53] + 8 * (v47 & 0x7FFFFFFF));
        else
          v49 = 0;
        v1111 = &v1113;
        v1112 = 0x400000000;
        __src = &v1109;
        v1108 = 0x400000000;
        v1104 = v1106;
        v1105 = 0x400000000;
        *(_QWORD *)&v1102 = v1103;
        *((_QWORD *)&v1102 + 1) = 0x400000000;
        v1099 = v1101;
        v1100 = 0x400000000;
        v1096 = v1098;
        v1097 = 0x400000000;
        v1093 = 0;
        sub_1C5534378(a1, *(_DWORD *)(v46 + 36), v49, v1091, (uint64_t *)&v1093, (uint64_t)&v1104, (uint64_t)&v1102);
        v1092 = 0;
        sub_1C5534378(a1, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68), v49, v45, (uint64_t *)&v1092, (uint64_t)&v1099, (uint64_t)&v1096);
        if ((_DWORD)v1100)
        {
          v58 = 0;
          v59 = 4 * v1100;
          do
          {
            v60 = *a1;
            v61 = **(unsigned __int16 **)(a2 + 16);
            v1094 = v45;
            v1095 = 0;
            LODWORD(v1115) = *(_DWORD *)((char *)v1104 + v58);
            v1116 = 0;
            LODWORD(v1117) = *(_DWORD *)((char *)v1099 + v58);
            v1119 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, v61, &v1094, 1, &v1115, 2, 0);
            v63 = *(_DWORD *)(*(_QWORD *)(v62 + 32) + 4);
            v64 = v1112;
            if (v1112 >= (unint64_t)HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)&v1113, v1112 + 1, 4);
              v64 = v1112;
            }
            *((_DWORD *)v1111 + v64) = v63;
            LODWORD(v1112) = v1112 + 1;
            v58 += 4;
          }
          while (v59 != v58);
        }
        v65 = v1093;
        if ((_DWORD)v1097)
        {
          v66 = 0;
          v67 = 4 * v1097;
          do
          {
            v68 = *a1;
            v69 = **(unsigned __int16 **)(a2 + 16);
            v1094 = v65;
            v1095 = 0;
            LODWORD(v1115) = *(_DWORD *)(v1102 + v66);
            v1116 = 0;
            LODWORD(v1117) = *(_DWORD *)((char *)v1096 + v66);
            v1119 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, v69, &v1094, 1, &v1115, 2, 0);
            v71 = *(_DWORD *)(*(_QWORD *)(v70 + 32) + 4);
            v72 = v1108;
            if (v1108 >= (unint64_t)HIDWORD(v1108))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1109, v1108 + 1, 4);
              v72 = v1108;
            }
            *((_DWORD *)__src + v72) = v71;
            v73 = v1108 + 1;
            LODWORD(v1108) = v1108 + 1;
            v66 += 4;
          }
          while (v67 != v66);
        }
        else
        {
          v73 = v1108;
        }
        sub_1C5534AB8(a1, v47, v49, v45, (int *)v1111, v1112, v65, v57, (uint64_t)__src, v73);
        v212 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v212 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v212 = a2;
            do
              v212 = *(_QWORD *)(v212 + 8);
            while ((*(_WORD *)(v212 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v212 + 8));
        if (v1096 != v1098)
          free(v1096);
        if (v1099 != v1101)
          free(v1099);
        if ((_DWORD *)v1102 != v1103)
          free((void *)v1102);
        v213 = v1104;
        if (v1104 != v1106)
          goto LABEL_202;
        goto LABEL_203;
      case 0x44u:
        v229 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        if (v229 < 0 && (v230 = (_QWORD *)a1[2], (v229 & 0x7FFFFFFFu) < *((_DWORD *)v230 + 108)))
          v231 = *(_QWORD *)(v230[53] + 8 * (v229 & 0x7FFFFFFF));
        else
          v231 = 0;
        v302 = v10 / v12;
        if (v10 % v12)
        {
          v303 = v1091;
          if ((v231 & 0xFFFFFFFFFFFFFFF9) != 0 && (v231 & 4) != 0)
          {
            v304 = 0x800000000000000;
            if ((v231 & 2) == 0)
              v304 = 0x8000000000000;
            v303 = sub_1C4953AD0((unsigned __int16)(v231 >> 3) | ((unint64_t)((v304 & v231) != 0) << 32), v1091);
          }
          v305 = *a1;
          *(_QWORD *)&v1115 = v303;
          DWORD2(v1115) = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v305 + 32))(v305, 68, &v1115, 1, 0, 0, 0);
          v307 = *(_DWORD *)(*(_QWORD *)(v306 + 32) + 4);
          v308 = *a1;
          LODWORD(v1111) = v229;
          LODWORD(v1112) = 1;
          LODWORD(v1115) = v307;
          v1116 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v308
                                                                                                  + 32))(v308, 118, &v1111, 1, &v1115, 1, 0);
          v309 = a2;
          v310 = *(_QWORD *)(a2 + 24);
          v311 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v311 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v311 = a2;
              do
                v311 = *(_QWORD *)(v311 + 8);
              while ((*(_WORD *)(v311 + 44) & 8) != 0);
            }
          }
          goto LABEL_351;
        }
        v287 = &v1113;
        v1111 = &v1113;
        v1112 = 0x200000000;
        if ((int)v302 >= 1)
        {
          do
          {
            v931 = *a1;
            *(_QWORD *)&v1115 = v1091;
            DWORD2(v1115) = 0;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v931
                                                                                                  + 32))(v931, 68, &v1115, 1, 0, 0, 0);
            v933 = *(_DWORD *)(*(_QWORD *)(v932 + 32) + 4);
            v934 = v1112;
            if (v1112 >= (unint64_t)HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)&v1113, v1112 + 1, 4);
              v934 = v1112;
            }
            *((_DWORD *)v1111 + v934) = v933;
            v427 = (v1112 + 1);
            LODWORD(v1112) = v1112 + 1;
            LODWORD(v302) = v302 - 1;
          }
          while ((_DWORD)v302);
        }
        else
        {
          v427 = 0;
        }
        v935 = *a1;
        if ((v231 & 0xFFFFFFFFFFFFFFF9) == 0 || (v231 & 4) == 0)
        {
          LODWORD(v1115) = v229;
          DWORD2(v1115) = 1;
          sub_1C5544D6C(v935, (uint64_t)&v1115, (int *)v1111, v427);
          goto LABEL_1004;
        }
        LODWORD(__src) = v229;
        LODWORD(v1108) = 1;
        v936 = (int *)v1111;
        *(_QWORD *)&v1115 = &v1116;
        *((_QWORD *)&v1115 + 1) = 0x800000000;
        if (v427 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1115, (uint64_t)&v1116, v427, 24);
          v937 = DWORD2(v1115);
          v938 = (int *)v1115;
        }
        else
        {
          if (!v427)
          {
            v943 = 0;
            v938 = &v1116;
            goto LABEL_1002;
          }
          v937 = 0;
          v938 = &v1116;
        }
        v939 = 6 * v937;
        v940 = 4 * v427;
        do
        {
          v941 = *v936++;
          v942 = &v938[v939];
          *v942 = v941;
          v942[4] = 0;
          v939 += 6;
          v940 -= 4;
        }
        while (v940);
        v943 = DWORD2(v1115);
LABEL_1002:
        DWORD2(v1115) = v943 + v427;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, int *))(*(_QWORD *)v935 + 32))(v935, 77, &__src, 1, v938);
        if ((int *)v1115 != &v1116)
          free((void *)v1115);
LABEL_1004:
        v944 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v944 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v944 = a2;
            do
              v944 = *(_QWORD *)(v944 + 8);
            while ((*(_WORD *)(v944 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v944 + 8));
        v215 = (uint64_t *)v1111;
        goto LABEL_1007;
      case 0x45u:
        v253 = v10 / v12;
        if (v10 % v12)
          return 2;
        v254 = (v10 / v12);
        __src = &v1109;
        v1108 = 0x200000000;
        sub_1C4893E04((char *)&__src, v254, 0);
        v255 = *(unsigned int *)(a2 + 40);
        v256 = v255 >> 1;
        v1111 = &v1113;
        v1112 = 0x200000000;
        v257 = &v1116;
        *(_QWORD *)&v1115 = &v1116;
        *((_QWORD *)&v1115 + 1) = 0x200000000;
        if (v255 < 6)
        {
          if (v255 >= 2)
          {
            v853 = v255 >> 1;
            do
            {
              *(_QWORD *)v257 = v257 + 4;
              *((_QWORD *)v257 + 1) = 0x200000000;
              if ((_DWORD)v1112)
                sub_1C48623F0((uint64_t)v257, (uint64_t)&v1111);
              v257 += 6;
              --v853;
            }
            while (v853);
          }
          DWORD2(v1115) = v256;
        }
        else
        {
          sub_1C6272D58((uint64_t)&v1115, v255 >> 1, (uint64_t)&v1111);
        }
        if (v1111 != &v1113)
          free(v1111);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
        if (*(_DWORD *)(a2 + 40) >= 2u)
        {
          v854 = 1;
          do
          {
            v855 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(a2 + 32) + 32 * (v854 + 1) + 16);
            v856 = *a1;
            FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v855);
            *(_QWORD *)(v856 + 40) = v855;
            *(_QWORD *)(v856 + 48) = FirstTerminator;
            sub_1C5534298(a1, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v854 + 4), v1091, v253, v1115 + 24 * (v854 >> 1));
            v854 += 2;
          }
          while (v854 < *(_DWORD *)(a2 + 40));
        }
        v858 = *a1;
        v1077 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v858 + 40) = v1077;
        *(_QWORD *)(v858 + 48) = a2;
        if ((_DWORD)v253)
        {
          v864 = 0;
          do
          {
            GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v1091, "", 0);
            *((_DWORD *)__src + v864) = GenericVirtualRegister;
            v866 = (_QWORD *)*a1;
            v868 = sub_1C55437B8((_QWORD *)*a1, 0x45u);
            v869 = (unint64_t *)v867;
            v870 = (unint64_t *)v866[6];
            v871 = *(_QWORD *)(v866[5] + 40);
            *(_QWORD *)(v867 + 24) = v871;
            v872 = *(_QWORD *)(v871 + 32);
            v873 = *(unsigned int *)(v867 + 40);
            if ((_DWORD)v873)
            {
              v880 = *(_QWORD *)(v867 + 32);
              v881 = *(_QWORD *)(v872 + 40);
              v882 = 32 * v873;
              do
              {
                if (!*(_BYTE *)v880)
                {
                  v883 = *(unsigned int *)(v880 + 4);
                  if ((int)v883 >= 0)
                    v884 = (uint64_t *)(*(_QWORD *)(v881 + 272) + 8 * v883);
                  else
                    v884 = (uint64_t *)(*(_QWORD *)(v881 + 24) + 16 * (v883 & 0x7FFFFFFF) + 8);
                  v885 = *v884;
                  if (*v884)
                  {
                    v886 = *(_QWORD *)(v885 + 16);
                    *(_QWORD *)(v885 + 16) = v880;
                    *(_QWORD *)(v880 + 16) = v886;
                    if ((*(_BYTE *)(v880 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v880 + 24) = v885;
                    }
                    else
                    {
                      *(_QWORD *)(v880 + 24) = 0;
                      v884 = (uint64_t *)(v886 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v880 + 16) = v880;
                    *(_QWORD *)(v880 + 24) = 0;
                  }
                  *v884 = v880;
                }
                v880 += 32;
                v882 -= 32;
              }
              while (v882);
            }
            v874 = *(_QWORD *)(v872 + 728);
            if (v874)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v874 + 24))(v874, v867);
            v875 = *v870 & 0xFFFFFFFFFFFFFFF8;
            *v869 = v875 | *v869 & 7;
            v869[1] = (unint64_t)v870;
            *(_QWORD *)(v875 + 8) = v869;
            *v870 = *v870 & 7 | (unint64_t)v869;
            v876 = v866[7];
            if (v876)
              (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v876 + 24))(v876, v869);
            v877 = *((_DWORD *)__src + v864);
            v1112 = 0;
            v1113 = 0;
            v1114 = 0;
            HIDWORD(v1111) = v877;
            LODWORD(v1111) = 0x1000000;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v869, v868, (const llvm::MachineOperand *)&v1111);
            if (*(_DWORD *)(a2 + 40) >= 2u)
            {
              v878 = 1;
              do
              {
                v879 = *(_DWORD *)(*(_QWORD *)(v1115 + 24 * (v878 >> 1)) + 4 * v864);
                v1112 = 0;
                HIDWORD(v1111) = v879;
                LODWORD(v1111) = 0;
                v1113 = 0;
                v1114 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v869, v868, (const llvm::MachineOperand *)&v1111);
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v869, v868, (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + 32 * (v878 + 1)));
                v878 += 2;
              }
              while (v878 < *(_DWORD *)(a2 + 40));
            }
            ++v864;
          }
          while (v864 != v254);
        }
        v859 = *a1;
        v860 = v1077 + 48;
        v861 = *(_QWORD *)(v1077 + 56);
        if (v861 == v1077 + 48)
        {
          v287 = (uint64_t *)&v1109;
        }
        else
        {
          v287 = (uint64_t *)&v1109;
          while (!**(_WORD **)(v861 + 16) || **(_WORD **)(v861 + 16) == 69)
          {
            v861 = *(_QWORD *)(v861 + 8);
            if (v861 == v860)
              goto LABEL_889;
          }
          v860 = v861;
        }
LABEL_889:
        *(_QWORD *)(v859 + 40) = v1077;
        *(_QWORD *)(v859 + 48) = v860;
        v862 = *a1;
        LODWORD(v1111) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        LODWORD(v1112) = 1;
        sub_1C5544D6C(v862, (uint64_t)&v1111, (int *)__src, v1108);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1], a2);
        v863 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v863 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v863 = a2;
            do
              v863 = *(_QWORD *)(v863 + 8);
            while ((*(_WORD *)(v863 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v863 + 8));
        sub_1C6272E44((char **)&v1115);
        v215 = (uint64_t *)__src;
        goto LABEL_1007;
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x4Au:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x54u:
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
      case 0x59u:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x87u:
      case 0x91u:
      case 0x92u:
        return v15;
      case 0x49u:
        v1099 = (void *)v1091;
        if (a3 != 1)
          return 2;
        v249 = sub_1C4825F50((unint64_t *)&v1099);
        if ((_DWORD)v248 == 1)
        v250 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
        if (v250 < 0 && (v251 = (_QWORD *)a1[2], (v250 & 0x7FFFFFFFu) < *((_DWORD *)v251 + 108)))
          v252 = *(_QWORD *)(v251[53] + 8 * (v250 & 0x7FFFFFFF));
        else
          v252 = 0;
        *(_QWORD *)&v1115 = v252;
        v412 = sub_1C4825F50((unint64_t *)&v1115);
        if ((_DWORD)v411 == 1)
        v413 = v412 / v249;
        if (v412 % v249)
        {
          v412 = v249 + v249 * v413;
          v414 = a1;
          v415 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], (8 * (v249 + v249 * v413)) | 1, "", 0);
          v416 = *a1;
          LODWORD(v1111) = v415;
          LODWORD(v1112) = 1;
          LODWORD(v1115) = v250;
          v1116 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v416
                                                                                                  + 32))(v416, 118, &v1111, 1, &v1115, 1, 0);
          v250 = v415;
        }
        else
        {
          v414 = a1;
        }
        __src = &v1109;
        v1108 = 0x200000000;
        v1104 = v1106;
        v1105 = 0x200000000;
        v1111 = &v1113;
        v1112 = 0x200000000;
        v659 = v412 / v249;
        sub_1C5534298(v414, v250, (uint64_t)v1099, v412 / v249, (uint64_t)&__src);
        v660 = *(_QWORD *)(a2 + 32);
        v661 = *(_DWORD *)(v660 + 4);
        if (v661 < 0 && (v662 = v414[2], (v661 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v662 + 432)))
          v663 = *(_QWORD *)(*(_QWORD *)(v662 + 424) + 8 * (v661 & 0x7FFFFFFF));
        else
          v663 = 0;
        v664 = *(_QWORD *)(v660 + 80);
        *(_QWORD *)&v1115 = v663;
        v1075 = sub_1C4825F50((unint64_t *)&v1115);
        if ((_DWORD)v665 == 1)
        if ((int)v659 < 1)
          goto LABEL_719;
        v666 = 0;
        v667 = 0;
        v668 = v1075 + v664;
        v669 = v661 & 0x7FFFFFFF;
        v670 = 4 * v659;
        v1084 = v664;
        while (1)
        {
          v671 = v249 + v666;
          v673 = v671 > v664;
          v672 = v671 - v664;
          v673 = v673 && v668 > v666;
          if (v673)
            break;
LABEL_718:
          v667 += 4;
          v666 += v249;
          if (v670 == v667)
          {
LABEL_719:
            v681 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
            if ((v681 & 0x80000000) == 0
              || (v682 = (_QWORD *)a1[2], (v681 & 0x7FFFFFFFu) >= *((_DWORD *)v682 + 108))
              || ((v683 = *(_QWORD *)(v682[53] + 8 * (v681 & 0x7FFFFFFF)),
                   v684 = v683 & 0xFFFFFFFFFFFFFFF9,
                   v685 = v683 & 4,
                   v684)
                ? (v686 = v685 == 0)
                : (v686 = 1),
                  v686))
            {
              v687 = *a1;
              if (v1105 < 2)
              {
                LODWORD(v1102) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
                DWORD2(v1102) = 1;
                LODWORD(v1115) = *(_DWORD *)v1104;
                v1116 = 0;
                (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v687 + 32))(v687, 19, &v1102, 1, &v1115, 1, 0);
              }
              else
              {
                LODWORD(v1115) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
                DWORD2(v1115) = 1;
                sub_1C5544D6C(v687, (uint64_t)&v1115, (int *)v1104, v1105);
              }
            }
            else
            {
              v831 = *a1;
              LODWORD(v1102) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
              DWORD2(v1102) = 1;
              v832 = (int *)v1104;
              v833 = v1105;
              *(_QWORD *)&v1115 = &v1116;
              *((_QWORD *)&v1115 + 1) = 0x800000000;
              if (v1105 >= 9)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1115, (uint64_t)&v1116, v1105, 24);
                v834 = DWORD2(v1115);
                v835 = (int *)v1115;
                goto LABEL_855;
              }
              if ((_DWORD)v1105)
              {
                v834 = 0;
                v835 = &v1116;
LABEL_855:
                v836 = 6 * v834;
                v837 = 4 * v833;
                do
                {
                  v838 = *v832++;
                  v839 = &v835[v836];
                  *v839 = v838;
                  v839[4] = 0;
                  v836 += 6;
                  v837 -= 4;
                }
                while (v837);
                v840 = DWORD2(v1115);
              }
              else
              {
                v840 = 0;
                v835 = &v1116;
              }
              DWORD2(v1115) = v840 + v833;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, int *))(*(_QWORD *)v831 + 32))(v831, 77, &v1102, 1, v835);
              if ((int *)v1115 != &v1116)
                free((void *)v1115);
            }
            v688 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v688 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v688 = a2;
                do
                  v688 = *(_QWORD *)(v688 + 8);
                while ((*(_WORD *)(v688 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v688 + 8));
            if (v1111 != &v1113)
              free(v1111);
            if (v1104 != v1106)
              free(v1104);
            v215 = (uint64_t *)__src;
            v216 = (uint64_t *)&v1109;
LABEL_206:
            if (v215 == v216)
              return 1;
LABEL_1008:
            free(v215);
            return 1;
          }
        }
        if (v664 == v666)
        {
          if (v661 < 0 && (v674 = (_QWORD *)a1[2], v669 < *((unsigned int *)v674 + 108)))
            v675 = *(void **)(v674[53] + 8 * v669);
          else
            v675 = 0;
          if (v1099 == v675)
            goto LABEL_712;
        }
        v676 = v664 - v666;
        if (v664 >= v666)
        {
          v677 = v1075;
          if (v1075 >= v672)
            v677 = v672;
          if (v676)
            goto LABEL_714;
        }
        else
        {
          v677 = v668 - v666;
          if (v677 >= v249)
            v677 = v249;
        }
        if (v677 == v249)
        {
LABEL_712:
          v678 = *(_DWORD *)((char *)__src + v667);
LABEL_715:
          v680 = v1105;
          if (v1105 >= (unint64_t)HIDWORD(v1105))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1104, (uint64_t)v1106, v1105 + 1, 4);
            v680 = v1105;
          }
          *((_DWORD *)v1104 + v680) = v678;
          LODWORD(v1105) = v1105 + 1;
          goto LABEL_718;
        }
        v676 = 0;
LABEL_714:
        v678 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], (8 * v677) | 1, "", 0);
        v679 = (uint64_t *)*a1;
        v664 = v1084;
        LODWORD(v1102) = v678;
        DWORD2(v1102) = 1;
        LODWORD(v1115) = *(_DWORD *)((char *)__src + v667);
        v1116 = 0;
        sub_1C5546FE4(v679, (unint64_t *)&v1102, (int *)&v1115, v676);
        goto LABEL_715;
      case 0x4Bu:
        v1094 = v1091;
        if (a3)
          return 2;
        v1111 = &v1113;
        v1112 = 0x200000000;
        __src = &v1109;
        v1108 = 0x200000000;
        v1104 = v1106;
        v1105 = 0x200000000;
        *(_QWORD *)&v1115 = &v1116;
        *((_QWORD *)&v1115 + 1) = 0x200000000;
        v243 = *(_QWORD *)(a2 + 32);
        v244 = *(_DWORD *)(v243 + 4);
        if (v244 < 0
          && (v245 = (_QWORD *)a1[2], v246 = v244 & 0x7FFFFFFF, v246 < *((_DWORD *)v245 + 108)))
        {
          v247 = *(_QWORD *)(v245[53] + 8 * v246);
        }
        else
        {
          v247 = 0;
        }
        v1092 = 0;
        v1093 = v247;
        sub_1C5534378(a1, *(_DWORD *)(v243 + 36), v247, v1091, (uint64_t *)&v1092, (uint64_t)&v1111, (uint64_t)&__src);
        if ((_DWORD)v1108)
        {
          v476 = (int *)__src;
          v477 = v1112;
          v478 = 4 * v1108;
          do
          {
            v479 = *v476;
            if (v477 >= HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)&v1113, v477 + 1, 4);
              v477 = v1112;
            }
            *((_DWORD *)v1111 + v477) = v479;
            v477 = v1112 + 1;
            LODWORD(v1112) = v1112 + 1;
            ++v476;
            v478 -= 4;
          }
          while (v478);
        }
        v481 = sub_1C4825F50(&v1094);
        if ((_DWORD)v480 == 1)
        v482 = *(_QWORD *)(a2 + 32);
        v483 = *(_DWORD *)(v482 + 68);
        if (v483 < 0
          && (v484 = (_QWORD *)a1[2], (v483 & 0x7FFFFFFFu) < (unint64_t)*((unsigned int *)v484 + 108)))
        {
          v485 = *(_QWORD *)(v484[53] + 8 * (v483 & 0x7FFFFFFF));
        }
        else
        {
          v485 = 0;
        }
        v486 = *(_QWORD *)(v482 + 112);
        *(_QWORD *)&v1102 = v485;
        v1056 = sub_1C4825F50((unint64_t *)&v1102);
        if ((_DWORD)v487 == 1)
        if (!(_DWORD)v1112)
        {
          v506 = v1105;
LABEL_757:
          v704 = v481 * v506;
          v705 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
          v707 = sub_1C4825F50(&v1093);
          if ((_DWORD)v706 == 1)
          if (v704 <= v707)
          {
            v711 = *a1;
            LODWORD(v1102) = v705;
            DWORD2(v1102) = 1;
            sub_1C5544D6C(v711, (uint64_t)&v1102, (int *)v1104, v1105);
          }
          else
          {
            v708 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], (8 * v704) | 1, "", 0);
            v709 = *a1;
            LODWORD(v1102) = v708;
            DWORD2(v1102) = 1;
            sub_1C5544D6C(v709, (uint64_t)&v1102, (int *)v1104, v1105);
            v710 = *a1;
            LODWORD(v1099) = v705;
            LODWORD(v1100) = 1;
            LODWORD(v1102) = v708;
            v1103[0] = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v710 + 32))(v710, 119, &v1099, 1, &v1102, 1, 0);
          }
          v712 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v712 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v712 = a2;
              do
                v712 = *(_QWORD *)(v712 + 8);
              while ((*(_WORD *)(v712 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v712 + 8));
          if ((int *)v1115 != &v1116)
            free((void *)v1115);
          if (v1104 != v1106)
            free(v1104);
          if (__src != &v1109)
            free(__src);
          v215 = (uint64_t *)v1111;
          if (v1111 == &v1113)
            return 1;
          goto LABEL_1008;
        }
        v488 = 0;
        v489 = 0;
        v490 = v483 & 0x7FFFFFFF;
        v491 = v1092;
        v1074 = v483;
        v1082 = v1056 + v486;
        v492 = 4 * v1112;
        v1066 = v490;
        v1069 = v1092;
        v1060 = v492;
        while (1)
        {
          v493 = a1[2];
          if (v486 == v488
            && ((v483 & 0x80000000) == 0 || v490 >= *(unsigned int *)(v493 + 432)
              ? (v494 = 0)
              : (v494 = *(_QWORD *)(*(_QWORD *)(v493 + 424) + 8 * v490)),
                v1094 == v494))
          {
            v495 = v1105;
            v496 = HIDWORD(v1105);
            v497 = v483;
          }
          else
          {
            v497 = *(_DWORD *)((char *)v1111 + v489);
            if (v497 < 0 && (v497 & 0x7FFFFFFFu) < *(_DWORD *)(v493 + 432))
              v498 = *(_QWORD *)(*(_QWORD *)(v493 + 424) + 8 * (v497 & 0x7FFFFFFF));
            else
              v498 = 0;
            if (v498 == v491)
            {
              v497 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v493, v1094, "", 0);
              v499 = *a1;
              LODWORD(v1099) = v497;
              LODWORD(v1100) = 1;
              LODWORD(v1102) = *(_DWORD *)((char *)v1111 + v489);
              v1103[0] = 0;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v499 + 32))(v499, 118, &v1099, 1, &v1102, 1, 0);
            }
            if ((unint64_t)v488 + v481 > v486)
            {
              v500 = v1082 - v488;
              if (v1082 > v488)
              {
                if (v486 >= v488)
                  v501 = v486 - v488;
                else
                  v501 = 0;
                v502 = v481;
                if (v500 >= v481 - v501)
                  v500 = v481 - v501;
                v503 = a1[2];
                if (v488 > v486 || v500 < v1056)
                {
                  if (v488 >= v486)
                    v507 = v488 - v486;
                  else
                    v507 = 0;
                  v504 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v503, (8 * v500) | 1, "", 0);
                  v508 = v483;
                  v505 = (uint64_t **)a1;
                  v509 = (uint64_t *)*a1;
                  LODWORD(v1099) = v504;
                  LODWORD(v1100) = 1;
                  LODWORD(v1102) = v508;
                  v1103[0] = 0;
                  sub_1C5546FE4(v509, (unint64_t *)&v1099, (int *)&v1102, v507);
                  v503 = a1[2];
                }
                else
                {
                  v504 = v483;
                  v505 = (uint64_t **)a1;
                }
                v510 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v503, v1094, "", 0);
                v511 = *v505;
                LODWORD(v1096) = v510;
                LODWORD(v1097) = 1;
                LODWORD(v1102) = v497;
                v1103[0] = 0;
                LODWORD(v1099) = v504;
                v1101[0] = 0;
                sub_1C55473DC(v511, (uint64_t)&v1096, &v1102, (int *)&v1099, v501);
                v495 = v1105;
                v497 = v510;
                v490 = v1066;
                v491 = v1069;
                v483 = v1074;
                v481 = v502;
                v492 = v1060;
                if (v1105 < (unint64_t)HIDWORD(v1105))
                  goto LABEL_590;
LABEL_597:
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1104, (uint64_t)v1106, v495 + 1, 4);
                v495 = v1105;
                goto LABEL_590;
              }
            }
            v495 = v1105;
            v496 = HIDWORD(v1105);
          }
          if (v495 >= v496)
            goto LABEL_597;
LABEL_590:
          *((_DWORD *)v1104 + v495) = v497;
          v506 = v1105 + 1;
          LODWORD(v1105) = v1105 + 1;
          v489 += 4;
          v488 += v481;
          if (v492 == v489)
            goto LABEL_757;
        }
      case 0x50u:
        if (!a3)
          goto LABEL_272;
        return 2;
      case 0x51u:
        if (a3 != 1)
          return 2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
        v15 = 1;
        sub_1C55366DC(*a1, *(_QWORD *)(a2 + 32), v1091, 1u);
        v267 = *(void (**)(void))(*(_QWORD *)a1[1] + 40);
        goto LABEL_683;
      case 0x52u:
        if (v10 % v12)
          return 2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
        v259 = sub_1C4825F50(&v1091);
        if ((_DWORD)v258 == 1)
        v75 = &v1113;
        v1111 = &v1113;
        v1112 = 0x200000000;
        __src = &v1109;
        v1108 = 0x200000000;
        v260 = v10 / v259;
        sub_1C5534298(a1, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), v1091, v260, (uint64_t)&v1111);
        if ((int)v260 >= 1)
        {
          v261 = 0;
          do
          {
            v262 = a1[2];
            v263 = *(_DWORD *)((char *)v1111 + v261);
            if (v263 < 0 && (v263 & 0x7FFFFFFFu) < *(_DWORD *)(v262 + 432))
              v264 = *(_QWORD *)(*(_QWORD *)(v262 + 424) + 8 * (v263 & 0x7FFFFFFF));
            else
              v264 = 0;
            if (v1091 != v264)
            {
              v263 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v262, v1091, "", 0);
              v265 = (uint64_t *)*a1;
              LODWORD(v1104) = v263;
              LODWORD(v1105) = 1;
              LODWORD(v1115) = *(_DWORD *)((char *)v1111 + v261);
              v1116 = 0;
              sub_1C5546EF4(v265, (uint64_t *)&v1104, (int *)&v1115);
            }
            v266 = v1108;
            if (v1108 >= (unint64_t)HIDWORD(v1108))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1109, v1108 + 1, 4);
              v266 = v1108;
            }
            *((_DWORD *)__src + v266) = v263;
            LODWORD(v1108) = v1108 + 1;
            v261 += 4;
          }
          while (4 * v260 != v261);
        }
        v428 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        if ((v428 & 0x80000000) == 0
          || (v429 = (_QWORD *)a1[2], (v428 & 0x7FFFFFFFu) >= *((_DWORD *)v429 + 108))
          || ((v430 = *(_QWORD *)(v429[53] + 8 * (v428 & 0x7FFFFFFF)),
               v431 = v430 & 0xFFFFFFFFFFFFFFF9,
               v432 = v430 & 4,
               v431)
            ? (v433 = v432 == 0)
            : (v433 = 1),
              v433))
        {
          v434 = a1;
          v435 = *a1;
          LODWORD(v1115) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
          DWORD2(v1115) = 1;
          sub_1C5544D6C(v435, (uint64_t)&v1115, (int *)__src, v1108);
          goto LABEL_499;
        }
        v842 = *a1;
        LODWORD(v1104) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        LODWORD(v1105) = 1;
        v843 = (int *)__src;
        v844 = v1108;
        *(_QWORD *)&v1115 = &v1116;
        *((_QWORD *)&v1115 + 1) = 0x800000000;
        if (v1108 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1115, (uint64_t)&v1116, v1108, 24);
          v845 = DWORD2(v1115);
          v846 = (int *)v1115;
        }
        else
        {
          if (!(_DWORD)v1108)
          {
            v851 = 0;
            v846 = &v1116;
            goto LABEL_980;
          }
          v845 = 0;
          v846 = &v1116;
        }
        v847 = 6 * v845;
        v848 = 4 * v844;
        do
        {
          v849 = *v843++;
          v850 = &v846[v847];
          *v850 = v849;
          v850[4] = 0;
          v847 += 6;
          v848 -= 4;
        }
        while (v848);
        v851 = DWORD2(v1115);
LABEL_980:
        DWORD2(v1115) = v851 + v844;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, int *))(*(_QWORD *)v842 + 32))(v842, 77, &v1104, 1, v846);
        if ((int *)v1115 != &v1116)
          free((void *)v1115);
        v434 = a1;
LABEL_499:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v434[1] + 40))(v434[1], a2);
        v436 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v436 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v436 = a2;
            do
              v436 = *(_QWORD *)(v436 + 8);
            while ((*(_WORD *)(v436 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v436 + 8));
        if (__src != &v1109)
          free(__src);
        v215 = (uint64_t *)v1111;
        goto LABEL_604;
      case 0x53u:
        if (a3)
          return 2;
        v239 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        if (v239 < 0
          && (v240 = (_QWORD *)a1[2], v241 = v239 & 0x7FFFFFFF, v241 < *((_DWORD *)v240 + 108)))
        {
          v242 = *(void **)(v240[53] + 8 * v241);
        }
        else
        {
          v242 = 0;
        }
        v1104 = v242;
        v455 = sub_1C4825F50((unint64_t *)&v1104);
        if ((_DWORD)v454 == 1)
        v457 = sub_1C4825F50(&v1091);
        if ((_DWORD)v456 == 1)
        if (v455 % v457)
          return 2;
        v458 = (uint64_t *)*a1;
        LODWORD(v1115) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
        v1116 = 0;
        sub_1C5544C30(v458, v1091, (int *)&v1115);
        v460 = v459;
        v461 = 0;
        v462 = 0;
        v287 = (uint64_t *)&v1116;
        *(_QWORD *)&v1115 = &v1116;
        *((_QWORD *)&v1115 + 1) = 0x800000000;
        while (1)
        {
          v463 = *(_QWORD *)(v460 + 16);
          v464 = *(unsigned __int8 *)(v463 + 4);
          if ((*(_BYTE *)(v463 + 8) & 2) == 0 || (v473 = *(_DWORD *)(v460 + 40), v473 == v464))
          {
            v465 = *(unsigned __int8 *)(v463 + 4);
          }
          else
          {
            v474 = v473 - 1;
            v465 = *(unsigned __int8 *)(v463 + 4);
            do
            {
              v475 = *(_DWORD *)(*(_QWORD *)(v460 + 32) + 32 * v464);
              if ((v475 & 0x10000FF) != 0x1000000)
                break;
              v465 += (v475 & 0x2000000) == 0;
              if (v474 == v464)
                break;
              ++v464;
            }
            while ((v475 & 0x2000000) == 0);
          }
          v466 = *(_QWORD *)(v463 + 32);
          if (v466)
          {
            v467 = -1;
            do
              ++v467;
            while (*(_WORD *)(v466 + 2 * v467));
          }
          else
          {
            v467 = 0;
          }
          v468 = *a1;
          if (v462 >= v467 + v465)
            break;
          v469 = *(_DWORD *)(*(_QWORD *)(v460 + 32) + 32 * v462 + 4);
          __src = (void *)v1091;
          LODWORD(v1108) = 0;
          LODWORD(v1111) = v469;
          LODWORD(v1113) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v468 + 32))(v468, 83, &__src, 1, &v1111, 1, 0);
          v471 = *(_DWORD *)(*(_QWORD *)(v470 + 32) + 4);
          v472 = DWORD2(v1115);
          if (DWORD2(v1115) >= (unint64_t)HIDWORD(v1115))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1115, (uint64_t)&v1116, DWORD2(v1115) + 1, 4);
            v472 = DWORD2(v1115);
          }
          *(_DWORD *)(v1115 + 4 * v472) = v471;
          v461 = ++DWORD2(v1115);
          ++v462;
        }
        LODWORD(v1111) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        LODWORD(v1112) = 1;
        sub_1C5544D6C(v468, (uint64_t)&v1111, (int *)v1115, v461);
        v703 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v703 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v703 = a2;
            do
              v703 = *(_QWORD *)(v703 + 8);
            while ((*(_WORD *)(v703 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v703 + 8));
        goto LABEL_463;
      case 0x5Au:
        v268 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        if (v268 < 0 && (v269 = (_QWORD *)a1[2], (v268 & 0x7FFFFFFFu) < *((_DWORD *)v269 + 108)))
        {
          __src = *(void **)(v269[53] + 8 * (v268 & 0x7FFFFFFF));
          if (((unint64_t)__src & 0xFFFFFFFFFFFFFFF9) != 0 && (__src & 4) != 0)
            return 2;
        }
        else
        {
          __src = 0;
        }
        v312 = *(_QWORD *)(a2 + 48);
        if ((v312 & 7) != 0)
        {
          v313 = *(_QWORD *)((v312 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v313 = v312 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(a2 + 48) = v312 & 0xFFFFFFFFFFFFFFF8;
        }
        v438 = *(_QWORD *)(v313 + 24);
        v437 = (unint64_t *)(v313 + 24);
        if ((v438 & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          v440 = (sub_1C4825F50(v437) + 7) & 0xFFFFFFFFFFFFFFF8;
          if ((_DWORD)v439 == 1)
        }
        else
        {
          v440 = -8;
        }
        v442 = sub_1C4825F50((unint64_t *)&__src);
        if ((_DWORD)v441 == 1)
        if (v440 == v442)
        {
          v443 = v1091;
          v445 = a2;
          v444 = a1;
          v446 = a3;
          return sub_1C55362C4(v444, v445, v446, v443);
        }
        v447 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v1091, "", 0);
        v448 = (_QWORD *)*a1;
        LODWORD(v1111) = v447;
        LODWORD(v1112) = 1;
        v449 = a2;
        LODWORD(v1115) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
        v1116 = 0;
        v450 = *(_QWORD *)(a2 + 48);
        if ((v450 & 7) != 0)
        {
          v451 = *(llvm::MachineMemOperand **)((v450 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v451 = (llvm::MachineMemOperand *)(v450 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)(a2 + 48) = v450 & 0xFFFFFFFFFFFFFFF8;
        }
        sub_1C55464EC(v448, 0x5Au, (int *)&v1111, (int *)&v1115, v451);
        v689 = *a1;
        LODWORD(v1111) = v268;
        LODWORD(v1112) = 1;
        LODWORD(v1115) = v447;
        v1116 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v689 + 32))(v689, 118, &v1111, 1, &v1115, 1, 0);
        v690 = *(_QWORD *)(a2 + 24);
        v691 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v691 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v691 = a2;
            do
              v691 = *(_QWORD *)(v691 + 8);
            while ((*(_WORD *)(v691 + 44) & 8) != 0);
          }
        }
        goto LABEL_830;
      case 0x5Bu:
      case 0x5Cu:
        v91 = *(_QWORD *)(a2 + 32);
        v92 = *(_DWORD *)(v91 + 4);
        v93 = *(_DWORD *)(v91 + 36);
        v94 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v1091, "", 0);
        v95 = *(_QWORD *)(a2 + 48);
        if ((v95 & 7) != 0)
        {
          v96 = *(unint64_t **)((v95 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v96 = (unint64_t *)(v95 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)(a2 + 48) = v95 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((v96[3] & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          v321 = sub_1C4825F50(v96 + 3);
          if ((_DWORD)v320 == 1)
          v322 = v321;
        }
        else
        {
          v322 = 0xFFFFFFFFLL;
        }
        if (v322 == v12)
        {
          v323 = a1;
          v324 = (_QWORD *)*a1;
          LODWORD(v1111) = v94;
          LODWORD(v1112) = 1;
          LODWORD(v1115) = v93;
          v1116 = 0;
          v325 = 90;
LABEL_348:
          sub_1C55464EC(v324, v325, (int *)&v1111, (int *)&v1115, (llvm::MachineMemOperand *)v96);
          goto LABEL_349;
        }
        if (v322 < v12)
        {
          v323 = a1;
          v324 = (_QWORD *)*a1;
          v325 = **(unsigned __int16 **)(a2 + 16);
          LODWORD(v1111) = v94;
          LODWORD(v1112) = 1;
          LODWORD(v1115) = v93;
          v1116 = 0;
          goto LABEL_348;
        }
        v673 = v322 > v12;
        v323 = a1;
        if (v673)
          return 2;
LABEL_349:
        v326 = *v323;
        LODWORD(v1111) = v92;
        LODWORD(v1112) = 1;
        LODWORD(v1115) = v94;
        v1116 = 0;
        (*(void (**)(void))(*(_QWORD *)v326 + 32))();
        v309 = a2;
        v310 = *(_QWORD *)(a2 + 24);
        v311 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v311 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v311 = a2;
            do
              v311 = *(_QWORD *)(v311 + 8);
            while ((*(_WORD *)(v311 + 44) & 8) != 0);
          }
        }
LABEL_351:
        v327 = *(_QWORD *)(v311 + 8);
        v328 = v310 + 40;
        goto LABEL_352;
      case 0x60u:
        v271 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        if (v271 < 0 && (v272 = (_QWORD *)a1[2], (v271 & 0x7FFFFFFFu) < *((_DWORD *)v272 + 108)))
        {
          __src = *(void **)(v272[53] + 8 * (v271 & 0x7FFFFFFF));
          if (((unint64_t)__src & 0xFFFFFFFFFFFFFFF9) != 0 && (__src & 4) != 0)
            return 2;
        }
        else
        {
          __src = 0;
        }
        v315 = sub_1C4825F50(&v1091);
        if ((_DWORD)v314 == 1)
        v317 = sub_1C4825F50((unint64_t *)&__src);
        if ((_DWORD)v316 == 1)
        if (((unint64_t)__src & 0xFFFFFFFFFFFFFFF9) != 0
          && (__src & 4) != 0
          && v317 != v315 * (v10 / v12))
        {
          return 2;
        }
        v318 = *(_QWORD *)(a2 + 48);
        if ((v318 & 7) != 0)
        {
          v319 = *(_QWORD *)((v318 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v319 = v318 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(a2 + 48) = v318 & 0xFFFFFFFFFFFFFFF8;
        }
        v693 = *(_QWORD *)(v319 + 24);
        v692 = (unint64_t *)(v319 + 24);
        if ((v693 & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          v695 = (sub_1C4825F50(v692) + 7) & 0xFFFFFFFFFFFFFFF8;
          if ((_DWORD)v694 == 1)
        }
        else
        {
          v695 = -8;
        }
        v697 = sub_1C4825F50((unint64_t *)&__src);
        if ((_DWORD)v696 == 1)
        if (v695 != v697)
        {
          v698 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v1091, "", 0);
          v699 = *a1;
          LODWORD(v1111) = v698;
          LODWORD(v1112) = 1;
          LODWORD(v1115) = v271;
          v1116 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v699
                                                                                                  + 32))(v699, 119, &v1111, 1, &v1115, 1, 0);
          v700 = (_QWORD *)*a1;
          LODWORD(v1115) = v698;
          v1116 = 0;
          v421 = a2;
          LODWORD(v1111) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
          LODWORD(v1113) = 0;
          v701 = *(_QWORD *)(a2 + 48);
          if ((v701 & 7) != 0)
          {
            v702 = *(llvm::MachineMemOperand **)((v701 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            v702 = (llvm::MachineMemOperand *)(v701 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(a2 + 48) = v701 & 0xFFFFFFFFFFFFFFF8;
          }
          sub_1C5546848(v700, (int *)&v1115, (int *)&v1111, v702);
          v425 = *(_QWORD *)(a2 + 24);
          v426 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v426 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v426 = a2;
              do
                v426 = *(_QWORD *)(v426 + 8);
              while ((*(_WORD *)(v426 + 44) & 8) != 0);
            }
          }
LABEL_825:
          v327 = *(_QWORD *)(v426 + 8);
          v328 = v425 + 40;
          v309 = v421;
          goto LABEL_352;
        }
        v443 = v1091;
        v445 = a2;
        v444 = a1;
        v446 = 0;
        return sub_1C55362C4(v444, v445, v446, v443);
      case 0x76u:
      case 0x7Cu:
      case 0x7Eu:
        if (a3)
          return 2;
        v50 = v1091;
        v51 = *(_QWORD *)(a2 + 32);
        v52 = *(_DWORD *)(v51 + 4);
        v53 = *(_DWORD *)(v51 + 36);
        if (v52 < 0 && (v54 = (_QWORD *)a1[2], (v52 & 0x7FFFFFFFu) < (unint64_t)*((unsigned int *)v54 + 108)))
        {
          v55 = *(_QWORD *)(v54[53] + 8 * (v52 & 0x7FFFFFFF));
          if ((v55 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(_QWORD *)(v54[53] + 8 * (v52 & 0x7FFFFFFF)) & 4) != 0)
            return 2;
        }
        else
        {
          v55 = 0;
        }
        v75 = (uint64_t *)&v1116;
        *(_QWORD *)&v1115 = &v1116;
        *((_QWORD *)&v1115 + 1) = 0x800000000;
        v278 = (void *)sub_1C5535914((uint64_t)a1, (uint64_t)&v1115, v55, v1091, v53);
        v279 = (void *)sub_1C5535100(a1, v55, v50, v278, (uint64_t)&v1115, **(unsigned __int16 **)(a2 + 16));
        sub_1C553555C(a1, v52, v279, (int *)v1115, DWORD2(v1115));
        v280 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v280 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v280 = a2;
            do
              v280 = *(_QWORD *)(v280 + 8);
            while ((*(_WORD *)(v280 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v280 + 8));
        goto LABEL_603;
      case 0x77u:
        if (a3 != 1)
          return 2;
        v274 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
        if (v274 < 0
          && (v275 = (_QWORD *)a1[2], v276 = v274 & 0x7FFFFFFF, v276 < *((_DWORD *)v275 + 108)))
        {
          v277 = *(_QWORD *)(v275[53] + 8 * v276);
        }
        else
        {
          v277 = 0;
        }
        *(_QWORD *)&v1115 = v277;
        v418 = sub_1C4825F50((unint64_t *)&v1115);
        if ((_DWORD)v417 == 1)
        v420 = 2 * sub_1C4825F50(&v1091);
        if ((_DWORD)v419 == 1)
        if (v420 != v418)
          return 2;
        v421 = a2;
        v422 = (uint64_t *)*a1;
        LODWORD(v1115) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
        v1116 = 0;
        sub_1C5544C30(v422, v1091, (int *)&v1115);
        v423 = *a1;
        LODWORD(v1111) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        LODWORD(v1112) = 1;
        LODWORD(v1115) = *(_DWORD *)(*(_QWORD *)(v424 + 32) + 4);
        v1116 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v423 + 32))(v423, 19, &v1111, 1, &v1115, 1, 0);
        v425 = *(_QWORD *)(a2 + 24);
        v426 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v426 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v426 = a2;
            do
              v426 = *(_QWORD *)(v426 + 8);
            while ((*(_WORD *)(v426 + 44) & 8) != 0);
          }
        }
        goto LABEL_825;
      case 0x78u:
        v221 = *(_QWORD *)(a2 + 32);
        v222 = *(_DWORD *)(v221 + 4);
        if (v222 < 0
          && (v223 = (_QWORD *)a1[2], v224 = v222 & 0x7FFFFFFF, v224 < *((_DWORD *)v223 + 108)))
        {
          v225 = *(void **)(v223[53] + 8 * v224);
        }
        else
        {
          v225 = 0;
        }
        v1099 = v225;
        v281 = *(_QWORD *)(v221 + 48);
        v283 = sub_1C4825F50((unint64_t *)&v1099);
        if ((_DWORD)v282 == 1)
        v286 = sub_1C4825F50(&v1091);
        if ((_DWORD)v284 == 1)
        v287 = (uint64_t *)&v1116;
        *(_QWORD *)&v1115 = &v1116;
        *((_QWORD *)&v1115 + 1) = 0x400000000;
        v288 = v283 / v286;
        if (v286 > v283)
        {
          v289 = 0;
          goto LABEL_303;
        }
        v387 = 0;
        v388 = v283 / v286;
        while (1)
        {
          v389 = (llvm::ConstantInt *****)*a1;
          v1111 = (void *)v1091;
          LODWORD(v1112) = 0;
          v390 = *(_DWORD *)(v281 + 32);
          LODWORD(v1105) = v390;
          if (v390 <= 0x40)
            break;
          v1081 = v287;
          v391 = operator new[]();
          v1104 = (void *)v391;
          v390 = v1105;
          v398 = v1105 + 63;
          memcpy((void *)v391, *(const void **)(v281 + 24), (v398 >> 3) & 0x3FFFFFF8);
          if (v390 <= 0x40)
          {
            v287 = v1081;
LABEL_431:
            if (v387 == v390)
              v1104 = 0;
            else
              v1104 = (void *)(v391 >> v387);
            goto LABEL_433;
          }
          llvm::APInt::tcShiftRight((llvm::APInt *)v391, (unint64_t *)(v398 >> 6), v387);
          v287 = v1081;
LABEL_433:
          llvm::APInt::trunc((llvm::APInt *)&v1104, v286, (llvm::APInt *)&__src);
          v393 = llvm::ConstantInt::get(***v389[1], (llvm::LLVMContext *)&__src, v392);
          ((void (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v389)[2])(v389, &v1111, v393);
          v395 = v394;
          if (v1108 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if (v1105 >= 0x41 && v1104)
            MEMORY[0x1CAA32F9C](v1104, 0x1000C8000313F17);
          v396 = *(_DWORD *)(*(_QWORD *)(v395 + 32) + 4);
          v397 = DWORD2(v1115);
          if (DWORD2(v1115) >= (unint64_t)HIDWORD(v1115))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1115, (uint64_t)v287, DWORD2(v1115) + 1, 4);
            v397 = DWORD2(v1115);
          }
          *(_DWORD *)(v1115 + 4 * v397) = v396;
          v289 = ++DWORD2(v1115);
          v387 += v286;
          if (!--v388)
          {
LABEL_303:
            v290 = v288 * v286;
            v1111 = &v1113;
            v1112 = 0x100000000;
            v291 = v283 % v286;
            if (v283 == v288 * v286)
            {
              v292 = 0;
              v293 = 0;
              v294 = &v1113;
            }
            else
            {
              v293 = (void *)((8 * v291) | 1);
              v399 = (llvm::ConstantInt *****)*a1;
              __src = v293;
              LODWORD(v1108) = 0;
              v400 = *(unsigned int *)(v281 + 32);
              DWORD2(v1102) = v400;
              if (v400 > 0x40)
              {
                v927 = v400 + 63;
                v928 = ((unint64_t)(v400 + 63) >> 3) & 0x3FFFFFF8;
                v929 = (void *)operator new[]();
                *(_QWORD *)&v1102 = v929;
                memcpy(v929, *(const void **)(v281 + 24), v928);
                llvm::APInt::tcShiftRight((llvm::APInt *)v929, (unint64_t *)(v927 >> 6), v290);
              }
              else if ((_DWORD)v400 == v290)
              {
                *(_QWORD *)&v1102 = 0;
              }
              else
              {
                *(_QWORD *)&v1102 = *(_QWORD *)(v281 + 24) >> v290;
              }
              llvm::APInt::trunc((llvm::APInt *)&v1102, v291, (llvm::APInt *)&v1104);
              v402 = llvm::ConstantInt::get(***v399[1], (llvm::LLVMContext *)&v1104, v401);
              ((void (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v399)[2])(v399, &__src, v402);
              v404 = v403;
              if (v1105 >= 0x41 && v1104)
                MEMORY[0x1CAA32F9C](v1104, 0x1000C8000313F17);
              if (DWORD2(v1102) >= 0x41 && (_QWORD)v1102)
                MEMORY[0x1CAA32F9C](v1102, 0x1000C8000313F17);
              v405 = *(_DWORD *)(*(_QWORD *)(v404 + 32) + 4);
              v406 = v1112;
              if (v1112 >= HIDWORD(v1112))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)&v1113, v1112 + 1, 4);
                v406 = v1112;
              }
              *((_DWORD *)v1111 + v406) = v405;
              v292 = (v1112 + 1);
              LODWORD(v1112) = v1112 + 1;
              v289 = DWORD2(v1115);
              v294 = (uint64_t *)v1111;
            }
            sub_1C5534AB8(a1, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4), (unint64_t)v1099, v1091, (int *)v1115, v289, (unint64_t)v293, v285, (uint64_t)v294, v292);
            v407 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v407 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v407 = a2;
                do
                  v407 = *(_QWORD *)(v407 + 8);
                while ((*(_WORD *)(v407 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v407 + 8));
            if (v1111 != &v1113)
              free(v1111);
LABEL_463:
            v215 = (uint64_t *)v1115;
LABEL_1007:
            if (v215 == v287)
              return 1;
            goto LABEL_1008;
          }
        }
        v391 = *(_QWORD *)(v281 + 24);
        goto LABEL_431;
      case 0x7Du:
        if (a3)
          return 2;
        v218 = *(_QWORD *)(a2 + 32);
        v219 = *(_QWORD *)(v218 + 80);
        if ((v1091 & 1) != 0)
        {
          v220 = (v1091 >> 3);
        }
        else if ((v1091 & 4) != 0)
        {
          if ((v1091 & 2) != 0)
            v220 = (unsigned __int16)(v1091 >> 19);
          else
            v220 = (v1091 >> 19);
        }
        else
        {
          v220 = (unsigned __int16)(v1091 >> 3);
        }
        if (v219 <= v220)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
          v650 = *(_QWORD *)(a2 + 32);
          v651 = v650 + 32;
          v652 = *a1;
          v1111 = (void *)v1091;
          LODWORD(v1112) = 0;
          LODWORD(v1115) = *(_DWORD *)(v650 + 36);
          v1116 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v652
                                                                                                  + 32))(v652, 119, &v1111, 1, &v1115, 1, 0);
          llvm::MachineOperand::setReg(v651, *(_DWORD *)(*(_QWORD *)(v653 + 32) + 4));
          v654 = *(_QWORD *)(a2 + 32);
          v655 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v1091, "", 0);
          v656 = *(_QWORD *)(*a1 + 48);
          if (!v656 || (*(_BYTE *)v656 & 4) == 0)
          {
            while ((*(_WORD *)(v656 + 44) & 8) != 0)
              v656 = *(_QWORD *)(v656 + 8);
          }
          *(_QWORD *)(*a1 + 48) = *(_QWORD *)(v656 + 8);
          v657 = *a1;
          v15 = 1;
          LODWORD(v1111) = *(_DWORD *)(v654 + 4);
          LODWORD(v1112) = 1;
          v658 = v655;
          LODWORD(v1115) = v655;
          v1116 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v657
                                                                                                  + 32))(v657, 124, &v1111, 1, &v1115, 1, 0);
          llvm::MachineOperand::setReg(v654, v658);
          v267 = *(void (**)(void))(*(_QWORD *)a1[1] + 40);
LABEL_683:
          v267();
          return v15;
        }
        v645 = v10 / v12;
        if (v10 % v12)
          return 2;
        v1111 = &v1113;
        v1112 = 0x200000000;
        __src = &v1109;
        v1108 = 0x200000000;
        if ((int)v645 < 1)
        {
          v649 = 0;
          v841 = (char *)&v1109;
        }
        else
        {
          v646 = v10 / v12;
          do
          {
            v647 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v1091, "", 0);
            v648 = v1108;
            if (v1108 >= (unint64_t)HIDWORD(v1108))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1109, v1108 + 1, 4);
              v648 = v1108;
            }
            *((_DWORD *)__src + v648) = v647;
            v649 = (v1108 + 1);
            LODWORD(v1108) = v1108 + 1;
            --v646;
          }
          while (v646);
          v841 = (char *)__src;
          v218 = *(_QWORD *)(a2 + 32);
        }
        v887 = *a1;
        LODWORD(v1115) = *(_DWORD *)(v218 + 36);
        v1116 = 0;
        sub_1C5547540(v887, v841, v649, (uint64_t)&v1115);
        v888 = *a1;
        *(_QWORD *)&v1115 = v1091;
        DWORD2(v1115) = 0;
        v889 = (unsigned __int16)(v1091 >> 3);
        v890 = (unsigned __int16)(v1091 >> 19);
        if ((v1091 & 2) == 0)
          v890 = v1091 >> 19;
        if ((v1091 & 4) != 0)
          v889 = v890;
        if ((v1091 & 1) != 0)
          v891 = v1091 >> 3;
        else
          v891 = v889;
        sub_1C5544694(v888, (unint64_t *)&v1115, (v891 - 1));
        if ((int)v645 <= 0)
        {
          v903 = v1112;
LABEL_962:
          v914 = *a1;
          LODWORD(v1115) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
          DWORD2(v1115) = 1;
          sub_1C5544D6C(v914, (uint64_t)&v1115, (int *)v1111, v903);
          v915 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v915 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v915 = a2;
              do
                v915 = *(_QWORD *)(v915 + 8);
              while ((*(_WORD *)(v915 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v915 + 8));
          v214 = __src;
          if (__src != &v1109)
LABEL_204:
            free(v214);
LABEL_205:
          v215 = (uint64_t *)v1111;
          v216 = &v1113;
          goto LABEL_206;
        }
        v893 = 0;
        v894 = 0;
        v895 = 0;
        v896 = *(_DWORD *)(*(_QWORD *)(v892 + 32) + 4);
        while (1)
        {
          v897 = v893 + 1;
          if ((v1091 & 1) != 0)
          {
            if (v219 > (v1091 >> 3) * v897)
              goto LABEL_936;
            v898 = v1091 >> 3;
          }
          else if ((v1091 & 4) != 0)
          {
            if ((v1091 & 2) != 0)
              v899 = 0xFFFF;
            else
              v899 = -1;
            if (v219 > (v899 & (v1091 >> 19)) * v897)
            {
LABEL_936:
              v900 = *((_DWORD *)__src + v893);
              v901 = v1112;
              if (v1112 >= (unint64_t)HIDWORD(v1112))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)&v1113, v1112 + 1, 4);
                v901 = v1112;
              }
              *((_DWORD *)v1111 + v901) = v900;
              goto LABEL_946;
            }
            v898 = (unsigned __int16)(v1091 >> 19);
            if ((v1091 & 2) == 0)
              v898 = v1091 >> 19;
          }
          else
          {
            v898 = (unsigned __int16)(v1091 >> 3);
            if (v219 > (v898 * v897))
              goto LABEL_936;
          }
          if (v219 >= (v898 * v893))
          {
            v904 = *a1;
            v1104 = (void *)v1091;
            LODWORD(v1105) = 0;
            LODWORD(v1115) = *((_DWORD *)__src + v893);
            v1116 = 0;
            v905 = (unsigned __int16)(v1091 >> 3);
            v906 = (unsigned __int16)(v1091 >> 19);
            if ((v1091 & 2) == 0)
              v906 = (v1091 >> 19);
            if ((v1091 & 4) != 0)
              v905 = v906;
            if ((v1091 & 1) != 0)
              v905 = (v1091 >> 3);
            v1117 = v219 % v905;
            v1119 = 3;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v904 + 32))(v904, 125, &v1104, 1, &v1115, 2, 0);
            v908 = *(_DWORD *)(*(_QWORD *)(v907 + 32) + 4);
            v909 = v1112;
            if (v1112 >= (unint64_t)HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)&v1113, v1112 + 1, 4);
              v909 = v1112;
            }
            *((_DWORD *)v1111 + v909) = v908;
            v903 = v1112 + 1;
            LODWORD(v1112) = v903;
            v895 = *((_DWORD *)v1111 + v903 - 1);
            goto LABEL_959;
          }
          if (!v894)
          {
            v910 = *a1;
            v1104 = (void *)v1091;
            LODWORD(v1105) = 0;
            LODWORD(v1115) = v895;
            v1116 = 0;
            LODWORD(v1117) = v896;
            v1119 = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v910 + 32))(v910, 129, &v1104, 1, &v1115, 2, 0);
            v912 = *(_DWORD *)(*(_QWORD *)(v911 + 32) + 4);
            v913 = v1112;
            if (v1112 >= (unint64_t)HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)&v1113, v1112 + 1, 4);
              v913 = v1112;
            }
            *((_DWORD *)v1111 + v913) = v912;
            v903 = v1112 + 1;
            LODWORD(v1112) = v903;
            v894 = *((_DWORD *)v1111 + v903 - 1);
            goto LABEL_959;
          }
          v902 = v1112;
          if (v1112 >= (unint64_t)HIDWORD(v1112))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)&v1113, v1112 + 1, 4);
            v902 = v1112;
          }
          *((_DWORD *)v1111 + v902) = v894;
LABEL_946:
          v903 = v1112 + 1;
          LODWORD(v1112) = v1112 + 1;
LABEL_959:
          v893 = v897;
          if ((v10 / v12) == v897)
            goto LABEL_962;
        }
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
        if (a3 == 1)
        {
          v40 = (void *)v1091;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
          v41 = *(_QWORD *)(a2 + 32);
          v42 = v41 + 64;
          v43 = *a1;
          v1111 = v40;
          LODWORD(v1112) = 0;
          LODWORD(v1115) = *(_DWORD *)(v41 + 68);
          v1116 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 119, &v1111, 1, &v1115, 1, 0);
          llvm::MachineOperand::setReg(v42, *(_DWORD *)(*(_QWORD *)(v44 + 32) + 4));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1], a2);
          return 1;
        }
        v164 = *(_QWORD *)(a2 + 32);
        v165 = *(_DWORD *)(v164 + 4);
        v166 = a1[2];
        if (v165 < 0 && (v165 & 0x7FFFFFFFu) < *(_DWORD *)(v166 + 432))
        {
          v167 = *(_QWORD *)(*(_QWORD *)(v166 + 424) + 8 * (v165 & 0x7FFFFFFF));
          v168 = v167 & 4;
          if ((v167 & 0xFFFFFFFFFFFFFFF9) != 0 && v168 != 0)
            return 2;
        }
        else
        {
          v168 = 0;
          v167 = 0;
        }
        v210 = *(_DWORD *)(v164 + 68);
        if (v210 < 0 && (v210 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v166 + 432))
          v211 = *(_QWORD *)(*(_QWORD *)(v166 + 424) + 8 * (v210 & 0x7FFFFFFF));
        else
          v211 = 0;
        if ((v167 & 1) != 0)
        {
          v217 = v167 >> 3;
        }
        else if (v168)
        {
          if ((v167 & 2) != 0)
            v217 = (unsigned __int16)(v167 >> 19);
          else
            v217 = v167 >> 19;
        }
        else
        {
          v217 = (unsigned __int16)(v167 >> 3);
        }
        if ((v217 & 1) != 0)
          return 2;
        v533 = v217 >> 1;
        *(_QWORD *)&v1115 = &off_1E816EFF0;
        *((_QWORD *)&v1115 + 1) = sub_1C554C7E0;
        v1117 = (unint64_t)&v1115;
        v1111 = &off_1E816F038;
        v1112 = (uint64_t)sub_1C554C7F8;
        v1114 = &v1111;
        sub_1C554C3AC(v210, v166, (uint64_t)&v1115, (uint64_t)&v1111, 1, 0, &__src);
        v534 = v1114;
        if (v1114 == &v1111)
        {
          v535 = (void (**)(void **))((char *)v1111 + 32);
          v534 = &v1111;
LABEL_623:
          (*v535)(v534);
          goto LABEL_624;
        }
        if (v1114)
        {
          v535 = (void (**)(void **))((char *)*v1114 + 40);
          goto LABEL_623;
        }
LABEL_624:
        v536 = (__int128 *)v1117;
        if ((__int128 *)v1117 == &v1115)
        {
          v537 = (void (**)(__int128 *))(v1115 + 32);
          v536 = &v1115;
        }
        else
        {
          if (!v1117)
          {
LABEL_627:
            v538 = (void *)((8 * v533) | 1);
            if (!v1110)
            {
              v1067 = v165;
              v572 = *a1;
              *(_QWORD *)&v1115 = v211;
              DWORD2(v1115) = 0;
              v1035 = v533;
              v573 = sub_1C5544694(v572, (unint64_t *)&v1115, v533);
              v575 = v574;
              v576 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], (uint64_t)v538, "", 0);
              v577 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], (uint64_t)v538, "", 0);
              v578 = *a1;
              v1111 = (void *)__PAIR64__(v577, v576);
              v1070 = v577;
              v449 = a2;
              LODWORD(v1115) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
              v1116 = 0;
              sub_1C5547540(v578, (char *)&v1111, 2, (uint64_t)&v1115);
              v579 = *a1;
              v1111 = (void *)v211;
              LODWORD(v1112) = 0;
              LODWORD(v1115) = v210;
              v1116 = 0;
              v1117 = v573;
              v1118 = v575;
              v1119 = 1;
              v1049 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v579 + 32))(v579, 46, &v1111, 1, &v1115, 2, 0);
              v1051 = v580;
              v581 = *a1;
              v1111 = (void *)v211;
              LODWORD(v1112) = 0;
              *(_QWORD *)&v1115 = v573;
              *((_QWORD *)&v1115 + 1) = v575;
              v1116 = 1;
              LODWORD(v1117) = v210;
              v1119 = 0;
              v1042 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v581 + 32))(v581, 46, &v1111, 1, &v1115, 2, 0);
              v1046 = v582;
              v583 = *a1;
              v1039 = v211;
              *(_QWORD *)&v1115 = v211;
              DWORD2(v1115) = 0;
              v584 = sub_1C5544694(v583, (unint64_t *)&v1115, 0);
              v1083 = v538;
              v586 = v585;
              v587 = *a1;
              v1111 = (void *)9;
              LODWORD(v1112) = 0;
              LODWORD(v1115) = 36;
              v1116 = 2;
              LODWORD(v1117) = v210;
              v1119 = 0;
              v1120 = v573;
              v1121 = v575;
              v1122 = 1;
              v588 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v587 + 32))(v587, 134, &v1111, 1, &v1115, 3, 0);
              v590 = v589;
              v591 = *a1;
              v1111 = (void *)9;
              LODWORD(v1112) = 0;
              LODWORD(v1115) = 32;
              v1116 = 2;
              LODWORD(v1117) = v210;
              v1119 = 0;
              v1120 = v584;
              v1121 = v586;
              v1122 = 1;
              v592 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v591 + 32))(v591, 134, &v1111, 1, &v1115, 3, 0);
              v594 = v593;
              __src = 0;
              v595 = **(unsigned __int16 **)(a2 + 16);
              *((_QWORD *)&v1054 + 1) = v594;
              v1061 = v590;
              *(_QWORD *)&v1054 = v592;
              if ((_DWORD)v595 == 127)
              {
                v596 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = v576;
                v1116 = 0;
                LODWORD(v1117) = v210;
                v1119 = 0;
                v597 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v596 + 32))(v596, v595, &v1111, 1, &v1115, 2, 0);
                v1036 = v598;
                v1040 = (_OWORD *)v597;
                v599 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = v576;
                v1116 = 0;
                v1117 = v1042;
                v1118 = v1046;
                v1119 = 1;
                v600 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v599 + 32))(v599, 128, &v1111, 1, &v1115, 2, 0);
                v601 = v588;
                v603 = v602;
                v604 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = v1070;
                v1116 = 0;
                LODWORD(v1117) = v210;
                v1119 = 0;
                v605 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v604 + 32))(v604, 127, &v1111, 1, &v1115, 2, 0);
                v606 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                *(_QWORD *)&v1115 = v600;
                *((_QWORD *)&v1115 + 1) = v603;
                v1116 = 1;
                v1117 = v605;
                v1118 = v607;
                v1119 = 1;
                v608 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v606 + 32))(v606, 66, &v1111, 1, &v1115, 2, 0);
                v1043 = v609;
                v1047 = (_OWORD *)v608;
                v610 = *a1;
                *(_QWORD *)&v1115 = v1083;
                DWORD2(v1115) = 0;
                v611 = sub_1C5544694(v610, (unint64_t *)&v1115, 0);
                v613 = v612;
                v614 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = v576;
                v1116 = 0;
                v1117 = v1049;
                v1118 = v1051;
                v1119 = 1;
                v615 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v614 + 32))(v614, 127, &v1111, 1, &v1115, 2, 0);
                v617 = v616;
                v618 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                *(_QWORD *)&v1115 = v601;
                *((_QWORD *)&v1115 + 1) = v590;
                v1116 = 1;
                v1117 = (unint64_t)v1040;
                v1118 = v1036;
                v1119 = 1;
                v1120 = v611;
                v1121 = v613;
                v1122 = 1;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v618 + 32))(v618, 136, &v1111, 1, &v1115, 3, 0);
                v620 = v619;
                v621 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                *(_QWORD *)&v1115 = v601;
                *((_QWORD *)&v1115 + 1) = v590;
                v1116 = 1;
                v1117 = (unint64_t)v1047;
                v1118 = v1043;
                v1119 = 1;
                v1120 = v615;
                v1121 = v617;
                v1122 = 1;
                v622 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v621 + 32))(v621, 136, &v1111, 1, &v1115, 3, 0);
                v1111 = v1083;
                LODWORD(v1112) = 0;
                v1115 = v1054;
                v1116 = 1;
                LODWORD(v1117) = v1070;
                v1119 = 0;
                v1120 = v622;
                v1121 = v623;
                v1122 = 1;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v621 + 32))(v621, 136, &v1111, 1, &v1115, 3, 0);
              }
              else
              {
                v1034 = v588;
                v714 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = v1070;
                v1116 = 0;
                LODWORD(v1117) = v210;
                v1119 = 0;
                v715 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v714 + 32))(v714, v595, &v1111, 1, &v1115, 2, 0);
                v1031 = v716;
                v1033 = (_OWORD *)v715;
                v717 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = v576;
                v1116 = 0;
                LODWORD(v1117) = v210;
                v1119 = 0;
                v718 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v717 + 32))(v717, 128, &v1111, 1, &v1115, 2, 0);
                v720 = v719;
                v721 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = v1070;
                v1116 = 0;
                v1117 = v1042;
                v1118 = v1046;
                v1119 = 1;
                v722 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v721 + 32))(v721, 127, &v1111, 1, &v1115, 2, 0);
                v723 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                *(_QWORD *)&v1115 = v718;
                *((_QWORD *)&v1115 + 1) = v720;
                v1116 = 1;
                v1117 = v722;
                v1118 = v724;
                v1119 = 1;
                v725 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v723 + 32))(v723, 66, &v1111, 1, &v1115, 2, 0);
                v1044 = v726;
                v1048 = (_OWORD *)v725;
                v727 = *a1;
                if (**(_WORD **)(a2 + 16) == 128)
                {
                  *(_QWORD *)&v1115 = v1083;
                  DWORD2(v1115) = 0;
                  v728 = sub_1C5544694(v727, (unint64_t *)&v1115, 0);
                }
                else
                {
                  *(_QWORD *)&v1115 = v1039;
                  DWORD2(v1115) = 0;
                  v784 = sub_1C5544694(v727, (unint64_t *)&v1115, (v1035 - 1));
                  v785 = *a1;
                  v1111 = v1083;
                  LODWORD(v1112) = 0;
                  LODWORD(v1115) = v1070;
                  v1116 = 0;
                  v1117 = v784;
                  v1118 = v786;
                  v1119 = 1;
                  v728 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v785 + 32))(v785, 129, &v1111, 1, &v1115, 2, 0);
                }
                v787 = v728;
                v788 = v729;
                v789 = *a1;
                v449 = a2;
                v790 = **(unsigned __int16 **)(a2 + 16);
                v1111 = v1083;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = v1070;
                v1116 = 0;
                v1117 = v1049;
                v1118 = v1051;
                v1119 = 1;
                v791 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v789 + 32))(v789, v790, &v1111, 1, &v1115, 2, 0);
                v792 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                *(_QWORD *)&v1115 = v1034;
                *((_QWORD *)&v1115 + 1) = v1061;
                v1116 = 1;
                v1117 = (unint64_t)v1048;
                v1118 = v1044;
                v1119 = 1;
                v1120 = v791;
                v1121 = v793;
                v1122 = 1;
                v794 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v792 + 32))(v792, 136, &v1111, 1, &v1115, 3, 0);
                v1111 = v1083;
                LODWORD(v1112) = 0;
                *(_QWORD *)&v1115 = v1054;
                *((_QWORD *)&v1115 + 1) = v594;
                v1116 = 1;
                LODWORD(v1117) = v576;
                v1119 = 0;
                v1120 = v794;
                v1121 = v795;
                v1122 = 1;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v792 + 32))(v792, 136, &v1111, 1, &v1115, 3, 0);
                v620 = v796;
                v797 = *a1;
                v1111 = v1083;
                LODWORD(v1112) = 0;
                *(_QWORD *)&v1115 = v1034;
                *((_QWORD *)&v1115 + 1) = v1061;
                v1116 = 1;
                v1117 = (unint64_t)v1033;
                v1118 = v1031;
                v1119 = 1;
                v1120 = v787;
                v1121 = v788;
                v1122 = 1;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v797 + 32))(v797, 136, &v1111, 1, &v1115, 3, 0);
              }
              v798 = *(_DWORD *)(*(_QWORD *)(v624 + 32) + 4);
              LODWORD(__src) = *(_DWORD *)(*(_QWORD *)(v620 + 32) + 4);
              HIDWORD(__src) = v798;
              v799 = *a1;
              LODWORD(v1115) = v1067;
              DWORD2(v1115) = 1;
              sub_1C5544D6C(v799, (uint64_t)&v1115, (int *)&__src, 2);
              v690 = *(_QWORD *)(v449 + 24);
              v691 = v449;
              if ((*(_BYTE *)v449 & 4) == 0)
              {
                v691 = v449;
                if ((*(_WORD *)(v449 + 44) & 8) != 0)
                {
                  v691 = v449;
                  do
                    v691 = *(_QWORD *)(v691 + 8);
                  while ((*(_WORD *)(v691 + 44) & 8) != 0);
                }
              }
LABEL_830:
              v327 = *(_QWORD *)(v691 + 8);
              v328 = v690 + 40;
              v309 = v449;
LABEL_352:
              sub_1C487FE80(v328, v309, v327);
              return 1;
            }
            v1094 = (8 * v533) | 1;
            LODWORD(v533) = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v1094, "", 0);
            LODWORD(v539) = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], (uint64_t)v538, "", 0);
            v540 = *a1;
            v1111 = (void *)__PAIR64__(v539, v533);
            LODWORD(v1115) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
            v1116 = 0;
            sub_1C5547540(v540, (char *)&v1111, 2, (uint64_t)&v1115);
            if (v1108 <= 0x40)
            {
              if (__src)
                goto LABEL_635;
            }
            else
            {
              v541 = 0;
              v542 = ((unint64_t)v1108 + 63) >> 6;
              do
              {
                v673 = v542-- < 1;
                if (v673)
                  break;
                v543 = *((_QWORD *)__src + v542);
                v541 += __clz(v543);
              }
              while (!v543);
              v544 = v1108 | 0xFFFFFFC0;
              if ((v1108 & 0x3F) == 0)
                v544 = 0;
              if (v541 + v544 != (_DWORD)v1108)
              {
LABEL_635:
                v547 = sub_1C4825F50(&v1094);
                if ((_DWORD)v545 == 1)
                v548 = 2 * v547;
                v549 = **(unsigned __int16 **)(a2 + 16);
                if (v549 == 128)
                {
                  if (v1108 < 0x41)
                  {
                    v554 = __src;
                    if ((unint64_t)__src <= v548)
                    {
                      v555 = v547;
                      if ((unint64_t)__src > v547)
                      {
                        v556 = (llvm::ConstantInt *****)*a1;
                        v1104 = (void *)v211;
                        LODWORD(v1105) = 0;
                        LODWORD(v1100) = v1108;
                        v1099 = __src;
LABEL_648:
                        llvm::APInt::operator-=((uint64_t)&v1099, v555);
                        DWORD2(v1102) = v1100;
                        *(_QWORD *)&v1102 = v1099;
                        LODWORD(v1100) = 0;
                        v559 = llvm::ConstantInt::get(***v556[1], (llvm::LLVMContext *)&v1102, v558);
                        v560 = ((uint64_t (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v556)[2])(v556, &v1104, v559);
                        *(_QWORD *)((char *)&v1115 + 4) = v1096;
                        v1111 = v538;
                        LODWORD(v1112) = 0;
                        LODWORD(v1115) = v539;
                        HIDWORD(v1115) = v1097;
                        v1116 = 0;
                        v1117 = v560;
                        v1118 = v561;
                        v1119 = 1;
                        v539 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v556)[4])(v556, 128, &v1111, 1, &v1115, 2, 0);
                        v211 = v562;
                        if (DWORD2(v1102) >= 0x41 && (_QWORD)v1102)
                          MEMORY[0x1CAA32F9C](v1102, 0x1000C8000313F17);
                        v563 = v539 & 0xFFFFFFFF00000000;
                        if (v1100 >= 0x41 && v1099)
                          MEMORY[0x1CAA32F9C](v1099, 0x1000C8000313F17);
                        v564 = a1;
                        v565 = *a1;
                        *(_QWORD *)&v1115 = v538;
                        DWORD2(v1115) = 0;
                        v566 = sub_1C5544694(v565, (unint64_t *)&v1115, 0);
                        v568 = v567;
                        v569 = v566 & 0xFFFFFFFF00000000;
                        v570 = 1;
LABEL_653:
                        LODWORD(v533) = v566;
                        v571 = 1;
LABEL_1100:
                        v947 = *v564;
                        v946 = a2;
                        LODWORD(v1111) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
                        LODWORD(v1112) = 1;
                        *(_QWORD *)&v1115 = v563 | v539;
                        *((_QWORD *)&v1115 + 1) = v211;
                        v1116 = v571;
                        v1117 = v569 | v533;
                        v1118 = v568;
                        v1119 = v570;
LABEL_1101:
                        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v947 + 32))(v947, 76, &v1111, 1, &v1115, 2, 0);
                        v971 = v946;
                        if ((*(_BYTE *)v946 & 4) == 0)
                        {
                          v971 = v946;
                          if ((*(_WORD *)(v946 + 44) & 8) != 0)
                          {
                            v971 = v946;
                            do
                              v971 = *(_QWORD *)(v971 + 8);
                            while ((*(_WORD *)(v971 + 44) & 8) != 0);
                          }
                        }
                        sub_1C487FE80(*(_QWORD *)(v946 + 24) + 40, v946, *(_QWORD *)(v971 + 8));
                        if (v1110 && v1108 >= 0x41 && __src)
                          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                        return 1;
                      }
                      goto LABEL_1090;
                    }
                  }
                  else
                  {
                    v550 = 0;
                    v551 = ((unint64_t)v1108 + 63) >> 6;
                    do
                    {
                      v673 = v551-- < 1;
                      if (v673)
                        break;
                      v552 = *((_QWORD *)__src + v551);
                      v550 += __clz(v552);
                    }
                    while (!v552);
                    v553 = v1108 | 0xFFFFFFC0;
                    if ((v1108 & 0x3F) == 0)
                      v553 = 0;
                    if ((v1108 - v550 - v553) <= 0x40)
                    {
                      v554 = *(void **)__src;
                      if (*(_QWORD *)__src <= v548)
                      {
                        v555 = v547;
                        if ((unint64_t)v554 > v547)
                        {
                          v556 = (llvm::ConstantInt *****)*a1;
                          v1104 = (void *)v211;
                          LODWORD(v1105) = 0;
                          LODWORD(v1100) = v1108;
                          v557 = (((unint64_t)v1108 + 63) >> 3) & 0x3FFFFFF8;
                          v1099 = (void *)operator new[]();
                          memcpy(v1099, __src, v557);
                          goto LABEL_648;
                        }
LABEL_1090:
                        v564 = a1;
                        v948 = (llvm::ConstantInt *****)*a1;
                        if (v554 == (void *)v555)
                        {
                          *(_QWORD *)&v1115 = v538;
                          DWORD2(v1115) = 0;
                          v978 = sub_1C5544694((uint64_t)v948, (unint64_t *)&v1115, 0);
                          v568 = v979;
                          v571 = 0;
                          v563 = 0;
                          v569 = v978 & 0xFFFFFFFF00000000;
                          v570 = 1;
                          LODWORD(v533) = v978;
                          goto LABEL_1100;
                        }
                        *(_QWORD *)&v1115 = v211;
                        DWORD2(v1115) = 0;
                        v949 = llvm::ConstantInt::get(***v948[1], (llvm::LLVMContext *)&__src, v546);
                        v950 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v948)[2])(v948, &v1115, v949);
                        v951 = *a1;
                        v952 = v538;
                        v1111 = v538;
                        LODWORD(v1112) = 0;
                        LODWORD(v1115) = v533;
                        v1116 = 0;
                        v1117 = v950;
                        v1118 = v953;
                        v1078 = v953;
                        v1119 = 1;
                        v1086 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v951 + 32))(v951, 128, &v1111, 1, &v1115, 2, 0);
                        v955 = v954;
                        v956 = (llvm::ConstantInt *****)*a1;
                        v1104 = (void *)v211;
                        LODWORD(v1105) = 0;
                        LODWORD(v1097) = v1108;
                        if (v1108 <= 0x40)
                        {
                          if ((_DWORD)v1108)
                            v980 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1108;
                          else
                            v980 = 0;
                          v1096 = (void *)(v980 & ~(unint64_t)__src);
                        }
                        else
                        {
                          v957 = (((unint64_t)v1108 + 63) >> 3) & 0x3FFFFFF8;
                          v1096 = (void *)operator new[]();
                          memcpy(v1096, __src, v957);
                          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1096);
                        }
                        llvm::APInt::operator++((uint64_t)&v1096);
                        LODWORD(v1100) = v1097;
                        v1099 = v1096;
                        LODWORD(v1097) = 0;
                        llvm::APInt::operator+=((uint64_t)&v1099, v555);
                        DWORD2(v1102) = v1100;
                        *(_QWORD *)&v1102 = v1099;
                        LODWORD(v1100) = 0;
                        v959 = llvm::ConstantInt::get(***v956[1], (llvm::LLVMContext *)&v1102, v958);
                        v960 = ((uint64_t (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v956)[2])(v956, &v1104, v959);
                        v1111 = v952;
                        LODWORD(v1112) = 0;
                        LODWORD(v1115) = v539;
                        v1116 = 0;
                        v1117 = v960;
                        v1118 = v961;
                        v1119 = 1;
                        v962 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v956)[4])(v956, 127, &v1111, 1, &v1115, 2, 0);
                        v964 = v963;
                        if (DWORD2(v1102) >= 0x41 && (_QWORD)v1102)
                          MEMORY[0x1CAA32F9C](v1102, 0x1000C8000313F17);
                        if (v1100 >= 0x41 && v1099)
                          MEMORY[0x1CAA32F9C](v1099, 0x1000C8000313F17);
                        if (v1097 >= 0x41 && v1096)
                          MEMORY[0x1CAA32F9C](v1096, 0x1000C8000313F17);
                        v564 = a1;
                        v965 = *a1;
                        v1111 = v952;
                        LODWORD(v1112) = 0;
                        *(_QWORD *)&v1115 = v1086;
                        *((_QWORD *)&v1115 + 1) = v955;
                        v571 = 1;
                        v1116 = 1;
                        v1117 = v962;
                        v1118 = v964;
                        v1119 = 1;
                        v966 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v965 + 32))(v965, 66, &v1111, 1, &v1115, 2, 0);
                        v211 = v967;
                        v563 = v966 & 0xFFFFFFFF00000000;
                        v968 = *a1;
                        v1111 = v952;
                        LODWORD(v1112) = 0;
                        LODWORD(v1115) = v539;
                        v1116 = 0;
                        v1117 = v950;
                        v1118 = v1078;
                        v1119 = 1;
                        v969 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v968 + 32))(v968, 128, &v1111, 1, &v1115, 2, 0);
                        v568 = v970;
                        v569 = v969 & 0xFFFFFFFF00000000;
                        v570 = 1;
                        LODWORD(v533) = v969;
                        goto LABEL_1099;
                      }
                    }
                  }
                  v564 = a1;
                  v972 = *a1;
                  *(_QWORD *)&v1115 = v538;
                  DWORD2(v1115) = 0;
                  v973 = sub_1C5544694(v972, (unint64_t *)&v1115, 0);
                  v568 = v974;
                  v569 = v973 & 0xFFFFFFFF00000000;
                  v570 = 1;
                  LODWORD(v539) = v973;
                  LODWORD(v533) = v973;
                  v211 = (unint64_t)v974;
                  v571 = 1;
LABEL_1111:
                  v563 = v569;
                  goto LABEL_1100;
                }
                if (v549 == 127)
                {
                  if (v1108 < 0x41)
                  {
                    v804 = __src;
                  }
                  else
                  {
                    v800 = 0;
                    v801 = ((unint64_t)v1108 + 63) >> 6;
                    do
                    {
                      v673 = v801-- < 1;
                      if (v673)
                        break;
                      v802 = *((_QWORD *)__src + v801);
                      v800 += __clz(v802);
                    }
                    while (!v802);
                    v803 = v1108 | 0xFFFFFFC0;
                    if ((v1108 & 0x3F) == 0)
                      v803 = 0;
                    if ((v1108 - v800 - v803) > 0x40)
                      goto LABEL_1114;
                    v804 = *(void **)__src;
                  }
                  if ((unint64_t)v804 <= v548)
                  {
                    v805 = v547;
                    if ((unint64_t)v804 <= v547)
                    {
                      v564 = a1;
                      v568 = (llvm::ConstantInt *****)*a1;
                      v1071 = v547;
                      if (v804 == (void *)v547)
                      {
                        *(_QWORD *)&v1115 = v538;
                        DWORD2(v1115) = 0;
                        v985 = sub_1C5544694((uint64_t)v568, (unint64_t *)&v1115, 0);
                        v211 = v986;
                        v570 = 0;
                        v569 = 0;
                        v563 = v985 & 0xFFFFFFFF00000000;
                        v571 = 1;
                        LODWORD(v539) = v985;
                        goto LABEL_1100;
                      }
                      v1104 = (void *)v211;
                      LODWORD(v1105) = 0;
                      v806 = llvm::ConstantInt::get(***v568[1], (llvm::LLVMContext *)&__src, v546);
                      v807 = ((uint64_t (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v568)[2])(v568, &v1104, v806);
                      v1111 = v538;
                      LODWORD(v1112) = 0;
                      LODWORD(v1115) = v533;
                      v1116 = 0;
                      v1117 = v807;
                      v1118 = v808;
                      v1119 = 1;
                      v1076 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v568)[4])(v568, 127, &v1111, 1, &v1115, 2, 0);
                      v810 = v809;
                      v811 = v538;
                      v812 = (llvm::ConstantInt *****)*a1;
                      v1104 = (void *)v211;
                      LODWORD(v1105) = 0;
                      v814 = llvm::ConstantInt::get(***v812[1], (llvm::LLVMContext *)&__src, v813);
                      v815 = ((uint64_t (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v812)[2])(v812, &v1104, v814);
                      v1085 = v811;
                      v1111 = v811;
                      LODWORD(v1112) = 0;
                      LODWORD(v1115) = v539;
                      v1116 = 0;
                      v1117 = v815;
                      v1118 = v816;
                      v1119 = 1;
                      v817 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v812)[4])(v812, 127, &v1111, 1, &v1115, 2, 0);
                      v819 = v818;
                      v820 = (llvm::ConstantInt *****)*a1;
                      v1104 = (void *)v211;
                      LODWORD(v1105) = 0;
                      LODWORD(v1097) = v1108;
                      if (v1108 <= 0x40)
                      {
                        if ((_DWORD)v1108)
                          v987 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1108;
                        else
                          v987 = 0;
                        v1096 = (void *)(v987 & ~(unint64_t)__src);
                      }
                      else
                      {
                        v821 = (((unint64_t)v1108 + 63) >> 3) & 0x3FFFFFF8;
                        v1096 = (void *)operator new[]();
                        memcpy(v1096, __src, v821);
                        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1096);
                      }
                      v211 = v810;
                      llvm::APInt::operator++((uint64_t)&v1096);
                      LODWORD(v1100) = v1097;
                      v1099 = v1096;
                      LODWORD(v1097) = 0;
                      llvm::APInt::operator+=((uint64_t)&v1099, v1071);
                      DWORD2(v1102) = v1100;
                      *(_QWORD *)&v1102 = v1099;
                      LODWORD(v1100) = 0;
                      v823 = llvm::ConstantInt::get(***v820[1], (llvm::LLVMContext *)&v1102, v822);
                      v824 = ((uint64_t (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v820)[2])(v820, &v1104, v823);
                      v1111 = v1085;
                      LODWORD(v1112) = 0;
                      LODWORD(v1115) = v533;
                      v1116 = 0;
                      v1117 = v824;
                      v1118 = v825;
                      v1119 = 1;
                      v826 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v820)[4])(v820, 128, &v1111, 1, &v1115, 2, 0);
                      v828 = v827;
                      LODWORD(v539) = v1076;
                      if (DWORD2(v1102) >= 0x41 && (_QWORD)v1102)
                        MEMORY[0x1CAA32F9C](v1102, 0x1000C8000313F17);
                      if (v1100 >= 0x41 && v1099)
                        MEMORY[0x1CAA32F9C](v1099, 0x1000C8000313F17);
                      v563 = v1076 & 0xFFFFFFFF00000000;
                      if (v1097 >= 0x41 && v1096)
                        MEMORY[0x1CAA32F9C](v1096, 0x1000C8000313F17);
                      v564 = a1;
                      v829 = *a1;
                      v1111 = v1085;
                      LODWORD(v1112) = 0;
                      *(_QWORD *)&v1115 = v817;
                      *((_QWORD *)&v1115 + 1) = v819;
                      v570 = 1;
                      v1116 = 1;
                      v1117 = v826;
                      v1118 = v828;
                      v1119 = 1;
                      v566 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v829 + 32))(v829, 66, &v1111, 1, &v1115, 2, 0);
                      v568 = v830;
                      v569 = v566 & 0xFFFFFFFF00000000;
                      goto LABEL_653;
                    }
                    v916 = *a1;
                    v917 = (void *)v211;
                    v918 = v538;
                    *(_QWORD *)&v1115 = v538;
                    DWORD2(v1115) = 0;
                    v539 = sub_1C5544694(v916, (unint64_t *)&v1115, 0);
                    v211 = v919;
                    v920 = (llvm::ConstantInt *****)*a1;
                    v1104 = v917;
                    LODWORD(v1105) = 0;
                    LODWORD(v1100) = v1108;
                    if (v1108 <= 0x40)
                    {
                      v1099 = __src;
                    }
                    else
                    {
                      v921 = (((unint64_t)v1108 + 63) >> 3) & 0x3FFFFFF8;
                      v1099 = (void *)operator new[]();
                      memcpy(v1099, __src, v921);
                    }
                    llvm::APInt::operator-=((uint64_t)&v1099, v805);
                    DWORD2(v1102) = v1100;
                    *(_QWORD *)&v1102 = v1099;
                    LODWORD(v1100) = 0;
                    v923 = llvm::ConstantInt::get(***v920[1], (llvm::LLVMContext *)&v1102, v922);
                    v924 = ((uint64_t (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v920)[2])(v920, &v1104, v923);
                    v1111 = v918;
                    LODWORD(v1112) = 0;
                    LODWORD(v1115) = v533;
                    v1116 = 0;
                    v1117 = v924;
                    v1118 = v925;
                    v1119 = 1;
                    v533 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v920)[4])(v920, 127, &v1111, 1, &v1115, 2, 0);
                    v568 = v926;
                    if (DWORD2(v1102) >= 0x41 && (_QWORD)v1102)
                      MEMORY[0x1CAA32F9C](v1102, 0x1000C8000313F17);
                    v563 = v539 & 0xFFFFFFFF00000000;
                    v569 = v533 & 0xFFFFFFFF00000000;
                    if (v1100 >= 0x41 && v1099)
                      MEMORY[0x1CAA32F9C](v1099, 0x1000C8000313F17);
                    v570 = 1;
                    v571 = 1;
LABEL_978:
                    v564 = a1;
                    goto LABEL_1100;
                  }
LABEL_1114:
                  v564 = a1;
                  v975 = *a1;
                  *(_QWORD *)&v1115 = v538;
                  DWORD2(v1115) = 0;
                  v976 = sub_1C5544694(v975, (unint64_t *)&v1115, 0);
                  LODWORD(v533) = v976;
                  v568 = v977;
                  v569 = v976 & 0xFFFFFFFF00000000;
                  v570 = 1;
                  v211 = (unint64_t)v977;
                  v571 = 1;
                  LODWORD(v539) = v976;
                  goto LABEL_1111;
                }
                v981 = (void *)v211;
                v982 = v538;
                if (v1108 >= 0x41)
                {
                  v988 = 0;
                  v989 = ((unint64_t)v1108 + 63) >> 6;
                  do
                  {
                    v673 = v989-- < 1;
                    if (v673)
                      break;
                    v990 = *((_QWORD *)__src + v989);
                    v988 += __clz(v990);
                  }
                  while (!v990);
                  v991 = v1108 | 0xFFFFFFC0;
                  if ((v1108 & 0x3F) == 0)
                    v991 = 0;
                  if ((v1108 - v988 - v991) <= 0x40)
                  {
                    v983 = *(void **)__src;
                    if (*(_QWORD *)__src <= v548)
                    {
                      v211 = v547;
                      if ((unint64_t)v983 > v547)
                      {
                        v984 = (llvm::ConstantInt *****)*a1;
                        v1104 = v981;
                        LODWORD(v1105) = 0;
                        LODWORD(v1100) = v1108;
                        v996 = (((unint64_t)v1108 + 63) >> 3) & 0x3FFFFFF8;
                        v1099 = (void *)operator new[]();
                        memcpy(v1099, __src, v996);
LABEL_1149:
                        llvm::APInt::operator-=((uint64_t)&v1099, v211);
                        DWORD2(v1102) = v1100;
                        *(_QWORD *)&v1102 = v1099;
                        LODWORD(v1100) = 0;
                        v998 = llvm::ConstantInt::get(***v984[1], (llvm::LLVMContext *)&v1102, v997);
                        v999 = ((uint64_t (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v984)[2])(v984, &v1104, v998);
                        v1111 = v538;
                        LODWORD(v1112) = 0;
                        *(_QWORD *)((char *)&v1115 + 4) = v1096;
                        LODWORD(v1115) = v539;
                        HIDWORD(v1115) = v1097;
                        v1116 = 0;
                        v1117 = v999;
                        v1118 = v1000;
                        v1119 = 1;
                        v966 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v984)[4])(v984, 129, &v1111, 1, &v1115, 2, 0);
                        v211 = v1001;
                        if (DWORD2(v1102) >= 0x41 && (_QWORD)v1102)
                          MEMORY[0x1CAA32F9C](v1102, 0x1000C8000313F17);
                        v563 = v966 & 0xFFFFFFFF00000000;
                        if (v1100 >= 0x41 && v1099)
                          MEMORY[0x1CAA32F9C](v1099, 0x1000C8000313F17);
                        v564 = a1;
                        v1002 = *a1;
                        v1104 = v981;
                        LODWORD(v1105) = 0;
                        v1003 = sub_1C5544694(v1002, (unint64_t *)&v1104, v547 - 1);
                        v1111 = v982;
                        LODWORD(v1112) = 0;
                        LODWORD(v1115) = v539;
                        v1116 = 0;
                        v1117 = v1003;
                        v1118 = v1004;
                        v571 = 1;
                        v1119 = 1;
                        v1005 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1002 + 32))(v1002, 129, &v1111, 1, &v1115, 2, 0);
                        goto LABEL_1173;
                      }
LABEL_1156:
                      v1007 = (llvm::ConstantInt *****)*a1;
                      if (v983 == (void *)v211)
                      {
                        v1104 = v981;
                        LODWORD(v1105) = 0;
                        v1008 = sub_1C5544694((uint64_t)v1007, (unint64_t *)&v1104, v547 - 1);
                        v1111 = v538;
                        LODWORD(v1112) = 0;
                        LODWORD(v1115) = v539;
                        v1116 = 0;
                        v1117 = v1008;
                        v1118 = v1009;
                        v570 = 1;
                        v1119 = 1;
                        v1010 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v1007)[4])(v1007, 129, &v1111, 1, &v1115, 2, 0);
                        v568 = v1011;
                        v571 = 0;
                        v563 = 0;
                        v569 = v1010 & 0xFFFFFFFF00000000;
                        LODWORD(v533) = v1010;
                        goto LABEL_978;
                      }
                      *(_QWORD *)&v1115 = v981;
                      DWORD2(v1115) = 0;
                      v1012 = llvm::ConstantInt::get(***v1007[1], (llvm::LLVMContext *)&__src, v546);
                      v1013 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1007)[2])(v1007, &v1115, v1012);
                      v1014 = *a1;
                      v1111 = v538;
                      LODWORD(v1112) = 0;
                      LODWORD(v1115) = v533;
                      v1116 = 0;
                      v1117 = v1013;
                      v1118 = v1015;
                      v1087 = v1015;
                      v1119 = 1;
                      v1079 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1014 + 32))(v1014, 128, &v1111, 1, &v1115, 2, 0);
                      v1017 = v1016;
                      v1018 = (llvm::ConstantInt *****)*a1;
                      v1104 = v981;
                      LODWORD(v1105) = 0;
                      LODWORD(v1097) = v1108;
                      if (v1108 > 0x40)
                      {
                        v1020 = (((unint64_t)v1108 + 63) >> 3) & 0x3FFFFFF8;
                        v1096 = (void *)operator new[]();
                        memcpy(v1096, __src, v1020);
                        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1096);
                      }
                      else
                      {
                        if ((_DWORD)v1108)
                          v1019 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1108;
                        else
                          v1019 = 0;
                        v1096 = (void *)(v1019 & ~(unint64_t)__src);
                      }
                      llvm::APInt::operator++((uint64_t)&v1096);
                      LODWORD(v1100) = v1097;
                      v1099 = v1096;
                      LODWORD(v1097) = 0;
                      llvm::APInt::operator+=((uint64_t)&v1099, v211);
                      DWORD2(v1102) = v1100;
                      *(_QWORD *)&v1102 = v1099;
                      LODWORD(v1100) = 0;
                      v1022 = llvm::ConstantInt::get(***v1018[1], (llvm::LLVMContext *)&v1102, v1021);
                      v1023 = ((uint64_t (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v1018)[2])(v1018, &v1104, v1022);
                      v1111 = v982;
                      LODWORD(v1112) = 0;
                      LODWORD(v1115) = v539;
                      v1116 = 0;
                      v1117 = v1023;
                      v1118 = v1024;
                      v1119 = 1;
                      v1025 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v1018)[4])(v1018, 127, &v1111, 1, &v1115, 2, 0);
                      v1027 = v1026;
                      if (DWORD2(v1102) >= 0x41 && (_QWORD)v1102)
                        MEMORY[0x1CAA32F9C](v1102, 0x1000C8000313F17);
                      if (v1100 >= 0x41 && v1099)
                        MEMORY[0x1CAA32F9C](v1099, 0x1000C8000313F17);
                      if (v1097 >= 0x41 && v1096)
                        MEMORY[0x1CAA32F9C](v1096, 0x1000C8000313F17);
                      v564 = a1;
                      v1028 = *a1;
                      v1111 = v982;
                      LODWORD(v1112) = 0;
                      *(_QWORD *)&v1115 = v1079;
                      *((_QWORD *)&v1115 + 1) = v1017;
                      v571 = 1;
                      v1116 = 1;
                      v1117 = v1025;
                      v1118 = v1027;
                      v1119 = 1;
                      v966 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1028 + 32))(v1028, 66, &v1111, 1, &v1115, 2, 0);
                      v211 = v1029;
                      v563 = v966 & 0xFFFFFFFF00000000;
                      v1030 = *a1;
                      v1111 = v982;
                      LODWORD(v1112) = 0;
                      LODWORD(v1115) = v539;
                      v1116 = 0;
                      v1117 = v1013;
                      v1118 = v1087;
                      v1119 = 1;
                      v1005 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1030 + 32))(v1030, 129, &v1111, 1, &v1115, 2, 0);
LABEL_1173:
                      v568 = v1006;
                      v569 = v1005 & 0xFFFFFFFF00000000;
                      v570 = 1;
                      LODWORD(v533) = v1005;
LABEL_1099:
                      LODWORD(v539) = v966;
                      goto LABEL_1100;
                    }
                  }
                }
                else
                {
                  v983 = __src;
                  if ((unint64_t)__src <= v548)
                  {
                    v211 = v547;
                    if ((unint64_t)__src > v547)
                    {
                      v984 = (llvm::ConstantInt *****)*a1;
                      v1104 = v981;
                      LODWORD(v1105) = 0;
                      LODWORD(v1100) = v1108;
                      v1099 = __src;
                      goto LABEL_1149;
                    }
                    goto LABEL_1156;
                  }
                }
                v564 = a1;
                v533 = *a1;
                v1104 = (void *)v211;
                LODWORD(v1105) = 0;
                v992 = sub_1C5544694(v533, (unint64_t *)&v1104, v547 - 1);
                v1111 = v538;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = v539;
                v1116 = 0;
                v1117 = v992;
                v1118 = v993;
                v571 = 1;
                v1119 = 1;
                v994 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v533 + 32))(v533, 129, &v1111, 1, &v1115, 2, 0);
                v568 = v995;
                v569 = v994 & 0xFFFFFFFF00000000;
                v570 = 1;
                LODWORD(v539) = v994;
                LODWORD(v533) = v994;
                v211 = (unint64_t)v995;
                goto LABEL_1111;
              }
            }
            v946 = a2;
            v947 = *a1;
            LODWORD(v1111) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
            LODWORD(v1112) = 1;
            LODWORD(v1115) = v533;
            v1116 = 0;
            LODWORD(v1117) = v539;
            v1119 = 0;
            goto LABEL_1101;
          }
          v537 = (void (**)(__int128 *))(*(_QWORD *)v1117 + 40);
        }
        (*v537)(v536);
        goto LABEL_627;
      case 0x86u:
        v226 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
        if ((v226 & 0x80000000) != 0
          && (v227 = (_QWORD *)a1[2], (v226 & 0x7FFFFFFF) < (unint64_t)*((unsigned int *)v227 + 108)))
        {
          v228 = *(_QWORD *)(v227[53] + 8 * (v226 & 0x7FFFFFFF));
        }
        else
        {
          v228 = 0;
        }
        v1093 = v228;
        v296 = sub_1C4825F50(&v1093);
        if ((_DWORD)v295 == 1)
        v297 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 48);
        v298 = v297 & 0xFFFFFFFE;
        if (v296 != 2 * v12 && v298 != 32)
          return 2;
        v1092 = 0;
        v1111 = &v1113;
        v1112 = 0x400000000;
        __src = &v1109;
        v1108 = 0x400000000;
        sub_1C5534378(a1, v226, v1093, v1091, (uint64_t *)&v1092, (uint64_t)&v1111, (uint64_t)&__src);
        v1090 = 0;
        v1104 = v1106;
        v1105 = 0x400000000;
        *(_QWORD *)&v1102 = v1103;
        *((_QWORD *)&v1102 + 1) = 0x400000000;
        sub_1C5534378(a1, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 100), v1093, v1091, &v1090, (uint64_t)&v1104, (uint64_t)&v1102);
        v299 = 0;
        v300 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        if (v300 < 0)
        {
          v301 = (_QWORD *)a1[2];
          if ((v300 & 0x7FFFFFFFu) >= *((_DWORD *)v301 + 108))
            v299 = 0;
          else
            v299 = *(void **)(v301[53] + 8 * (v300 & 0x7FFFFFFF));
        }
        if (v298 == 32)
        {
          v730 = *a1;
          *(_QWORD *)&v1115 = v1091;
          DWORD2(v1115) = 0;
          v731 = sub_1C5544694(v730, (unint64_t *)&v1115, 0);
          v1057 = v732;
          v1062 = v731;
          v1099 = v1101;
          v1100 = 0x400000000;
          if ((_DWORD)v1112 && (_DWORD)v1105)
          {
            v733 = (int *)v1111;
            v734 = (int *)v1104;
            v735 = 4 * v1105 - 4;
            v736 = 4 * v1112 - 4;
            do
            {
              v737 = *v733;
              v738 = *v734;
              v739 = *a1;
              v1096 = (void *)v1091;
              LODWORD(v1097) = 0;
              LODWORD(v1115) = v737;
              v1116 = 0;
              LODWORD(v1117) = v738;
              v1119 = 0;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v739 + 32))(v739, 67, &v1096, 1, &v1115, 2, 0);
              v741 = *(_DWORD *)(*(_QWORD *)(v740 + 32) + 4);
              v742 = v1100;
              if (v1100 >= (unint64_t)HIDWORD(v1100))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1099, (uint64_t)v1101, v1100 + 1, 4);
                v742 = v1100;
              }
              *((_DWORD *)v1099 + v742) = v741;
              LODWORD(v1100) = v1100 + 1;
              if (!v736)
                break;
              ++v733;
              ++v734;
              v743 = v735;
              v735 -= 4;
              v736 -= 4;
            }
            while (v743);
          }
          v1096 = v1098;
          v1097 = 0x400000000;
          if ((_DWORD)v1108 && DWORD2(v1102))
          {
            v760 = (int *)__src;
            v761 = (int *)v1102;
            v762 = v1092;
            v763 = 4 * DWORD2(v1102) - 4;
            v764 = 4 * v1108 - 4;
            do
            {
              v766 = *v760++;
              v765 = v766;
              v767 = *v761++;
              v768 = *a1;
              v1094 = v762;
              v1095 = 0;
              LODWORD(v1115) = v765;
              v1116 = 0;
              LODWORD(v1117) = v767;
              v1119 = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v768 + 32))(v768, 67, &v1094, 1, &v1115, 2, 0);
              v770 = (void *)sub_1C5535914((uint64_t)a1, (uint64_t)&v1096, v1091, v762, *(_DWORD *)(*(_QWORD *)(v769 + 32) + 4));
              sub_1C5535100(a1, v762, v1091, v770, (uint64_t)&v1096, 126);
              sub_1C6271A40((unsigned int *)&v1099, (uint64_t)v1099 + 4 * v1100, (int *)v1096, (int *)v1096 + v1097);
              if (!v764)
                break;
              v771 = v763;
              v763 -= 4;
              v764 -= 4;
            }
            while (v771);
          }
          v772 = *a1;
          v774 = *(_DWORD *)v1099;
          v773 = *((_DWORD *)v1099 + 1);
          v1094 = v1091;
          v1095 = 0;
          LODWORD(v1115) = v774;
          v1116 = 0;
          LODWORD(v1117) = v773;
          v1119 = 0;
          v775 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v772 + 32))(v772, 66, &v1094, 1, &v1115, 2, 0);
          if (v1100 < 3)
          {
            v779 = a1;
          }
          else
          {
            v777 = 4 * v1100;
            v778 = 8;
            v779 = a1;
            do
            {
              v780 = *a1;
              v781 = *(_DWORD *)((char *)v1099 + v778);
              v1094 = v1091;
              v1095 = 0;
              *(_QWORD *)&v1115 = v775;
              *((_QWORD *)&v1115 + 1) = v776;
              v1116 = 1;
              LODWORD(v1117) = v781;
              v1119 = 0;
              v775 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v780 + 32))(v780, 66, &v1094, 1, &v1115, 2, 0);
              v778 += 4;
            }
            while (v777 != v778);
          }
          v782 = *v779;
          LODWORD(v1094) = v300;
          v1095 = 1;
          LODWORD(v1115) = v297;
          v1116 = 2;
          v1117 = v775;
          v1118 = v776;
          v1119 = 1;
          v1120 = v1062;
          v1121 = v1057;
          v1122 = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v782 + 32))(v782, 134, &v1094, 1, &v1115, 3, 0);
          if (v1096 != v1098)
            free(v1096);
          if (v1099 != v1101)
            free(v1099);
        }
        else
        {
          v744 = *((_DWORD *)v1111 + 1);
          v1058 = *(_DWORD *)v1111;
          v1063 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
          v746 = *(_DWORD *)v1104;
          v745 = *((_DWORD *)v1104 + 1);
          v747 = *a1;
          v1099 = v299;
          LODWORD(v1100) = 0;
          LODWORD(v1115) = v297;
          v1116 = 2;
          LODWORD(v1117) = v744;
          v1119 = 0;
          LODWORD(v1120) = v745;
          v1122 = 0;
          v748 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v747 + 32))(v747, 134, &v1099, 1, &v1115, 3, 0);
          v750 = v749;
          v751 = *a1;
          v1099 = v299;
          LODWORD(v1100) = 0;
          LODWORD(v1115) = 32;
          v1116 = 2;
          LODWORD(v1117) = v744;
          v1119 = 0;
          LODWORD(v1120) = v745;
          v1122 = 0;
          v752 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v751 + 32))(v751, 134, &v1099, 1, &v1115, 3, 0);
          v754 = v753;
          v755 = *a1;
          v756 = dword_1C8654E28[v297 - 32];
          v1099 = v299;
          LODWORD(v1100) = 0;
          LODWORD(v1115) = v756;
          v1116 = 2;
          LODWORD(v1117) = v1058;
          v1119 = 0;
          LODWORD(v1120) = v746;
          v1122 = 0;
          v757 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v755 + 32))(v755, 134, &v1099, 1, &v1115, 3, 0);
          v758 = *a1;
          LODWORD(v1099) = v1063;
          LODWORD(v1100) = 1;
          *(_QWORD *)&v1115 = v752;
          *((_QWORD *)&v1115 + 1) = v754;
          v1116 = 1;
          v1117 = v757;
          v1118 = v759;
          v1119 = 1;
          v1120 = v748;
          v1121 = v750;
          v1122 = 1;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v758
                                                                                                  + 32))(v758, 136, &v1099, 1, &v1115, 3, 0);
        }
        v783 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v783 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v783 = a2;
            do
              v783 = *(_QWORD *)(v783 + 8);
            while ((*(_WORD *)(v783 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v783 + 8));
        if ((_DWORD *)v1102 != v1103)
          free((void *)v1102);
        v213 = v1104;
        if (v1104 == v1106)
          goto LABEL_203;
LABEL_202:
        free(v213);
LABEL_203:
        v214 = __src;
        if (__src != &v1109)
          goto LABEL_204;
        goto LABEL_205;
      case 0x88u:
        if (a3)
          return 2;
        v232 = v1091;
        v233 = *(_DWORD **)(a2 + 32);
        v234 = v233[9];
        v235 = (_QWORD *)a1[2];
        if (v234 < 0
          && (v234 & 0x7FFFFFFFu) < *((_DWORD *)v235 + 108)
          && (*(_QWORD *)(v235[53] + 8 * (v234 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
          && (*(_QWORD *)(v235[53] + 8 * (v234 & 0x7FFFFFFF)) & 4) != 0)
        {
          return 2;
        }
        v237 = v233[1];
        v1073 = v237;
        if (v237 < 0 && (v237 & 0x7FFFFFFFu) < (unint64_t)*((unsigned int *)v235 + 108))
          v238 = *(_QWORD *)(v235[53] + 8 * (v237 & 0x7FFFFFFF));
        else
          v238 = 0;
        v1111 = &v1113;
        v1112 = 0x400000000;
        __src = &v1109;
        v1108 = 0x400000000;
        v1104 = v1106;
        v1105 = 0x400000000;
        *(_QWORD *)&v1102 = v1103;
        *((_QWORD *)&v1102 + 1) = 0x400000000;
        v1099 = v1101;
        v1100 = 0x400000000;
        v1096 = v1098;
        v1097 = 0x400000000;
        v1093 = 0;
        sub_1C5534378(a1, v233[17], v238, v1091, (uint64_t *)&v1093, (uint64_t)&v1104, (uint64_t)&v1102);
        v1092 = 0;
        sub_1C5534378(a1, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 100), v238, v232, (uint64_t *)&v1092, (uint64_t)&v1099, (uint64_t)&v1096);
        if ((_DWORD)v1105)
        {
          v515 = 0;
          v516 = 4 * v1105;
          do
          {
            v517 = *a1;
            v518 = *(_DWORD *)((char *)v1104 + v515);
            v519 = *(_DWORD *)((char *)v1099 + v515);
            v1094 = v232;
            v1095 = 0;
            LODWORD(v1115) = v234;
            v1116 = 0;
            LODWORD(v1117) = v518;
            v1119 = 0;
            LODWORD(v1120) = v519;
            v1122 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v517 + 32))(v517, 136, &v1094, 1, &v1115, 3, 0);
            v521 = *(_DWORD *)(*(_QWORD *)(v520 + 32) + 4);
            v522 = v1112;
            if (v1112 >= (unint64_t)HIDWORD(v1112))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)&v1113, v1112 + 1, 4);
              v522 = v1112;
            }
            *((_DWORD *)v1111 + v522) = v521;
            LODWORD(v1112) = v1112 + 1;
            v515 += 4;
          }
          while (v516 != v515);
        }
        v523 = v1093;
        if (DWORD2(v1102))
        {
          v524 = 0;
          v525 = 4 * DWORD2(v1102);
          do
          {
            v526 = *a1;
            v527 = *(_DWORD *)(v1102 + v524);
            v528 = *(_DWORD *)((char *)v1096 + v524);
            v1094 = v523;
            v1095 = 0;
            LODWORD(v1115) = v234;
            v1116 = 0;
            LODWORD(v1117) = v527;
            v1119 = 0;
            LODWORD(v1120) = v528;
            v1122 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v526 + 32))(v526, 136, &v1094, 1, &v1115, 3, 0);
            v530 = *(_DWORD *)(*(_QWORD *)(v529 + 32) + 4);
            v531 = v1108;
            if (v1108 >= (unint64_t)HIDWORD(v1108))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1109, v1108 + 1, 4);
              v531 = v1108;
            }
            *((_DWORD *)__src + v531) = v530;
            v532 = v1108 + 1;
            LODWORD(v1108) = v1108 + 1;
            v524 += 4;
          }
          while (v525 != v524);
        }
        else
        {
          v532 = v1108;
        }
        sub_1C5534AB8(a1, v1073, v238, v232, (int *)v1111, v1112, v523, v514, (uint64_t)__src, v532);
        v713 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v713 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v713 = a2;
            do
              v713 = *(_QWORD *)(v713 + 8);
            while ((*(_WORD *)(v713 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v713 + 8));
        if (v1096 != v1098)
          free(v1096);
        if (v1099 != v1101)
          free(v1099);
        if ((_DWORD *)v1102 != v1103)
          free((void *)v1102);
        if (v1104 != v1106)
          free(v1104);
        if (__src != &v1109)
          free(__src);
        v215 = (uint64_t *)v1111;
        if (v1111 == &v1113)
          return 1;
        goto LABEL_1008;
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
        goto LABEL_11;
      case 0x93u:
        goto LABEL_29;
      default:
        if (v14 - 45 >= 2)
        {
          if (v14 != 47)
            return v15;
LABEL_29:
          v1096 = (void *)v1091;
          v26 = *(_DWORD **)(a2 + 32);
          v27 = v26[1];
          v28 = v26[9];
          v29 = v26[17];
          if (v27 < 0 && (v30 = (_QWORD *)a1[2], (v27 & 0x7FFFFFFFu) < *((_DWORD *)v30 + 108)))
          {
            v1094 = *(_QWORD *)(v30[53] + 8 * (v27 & 0x7FFFFFFF));
            if ((v1094 & 0xFFFFFFFFFFFFFFF9) != 0 && (v1094 & 4) != 0)
              return 2;
          }
          else
          {
            v1094 = 0;
          }
          v107 = sub_1C4825F50(&v1094);
          if ((_DWORD)v106 == 1)
          v109 = sub_1C4825F50((unint64_t *)&v1096);
          if ((_DWORD)v108 == 1)
          v110 = v107 / v109;
          if (v107 % v109)
            return 2;
          v111 = **(unsigned __int16 **)(a2 + 16) == 147;
          v1104 = v1106;
          v1105 = 0x200000000;
          *(_QWORD *)&v1102 = v1103;
          *((_QWORD *)&v1102 + 1) = 0x200000000;
          v1099 = v1101;
          v1100 = 0x200000000;
          v1045 = ((_DWORD)v110 << v111);
          sub_1C4893E04((char *)&v1099, v1045, 0);
          sub_1C5534298(a1, v28, (uint64_t)v1096, v110, (uint64_t)&v1104);
          sub_1C5534298(a1, v29, (uint64_t)v1096, v110, (uint64_t)&v1102);
          v112 = v1104;
          v1055 = v1105;
          v113 = v1102;
          v114 = v1096;
          v115 = *a1;
          v116 = v1100;
          v117 = *(_DWORD *)v1104;
          v118 = *(_DWORD *)v1102;
          v1111 = v1096;
          LODWORD(v1112) = 0;
          LODWORD(v1115) = v117;
          v1116 = 0;
          LODWORD(v1117) = v118;
          v1119 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v115
                                                                                                  + 32))(v115, 47, &v1111, 1, &v1115, 2, 0);
          v120 = (int *)v1099;
          *(_DWORD *)v1099 = *(_DWORD *)(*(_QWORD *)(v119 + 32) + 4);
          __src = &v1109;
          v121 = v116;
          v1108 = 0x400000000;
          if (v116 >= 2)
          {
            v1037 = v27;
            v1032 = v110;
            v122 = 0;
            v123 = 0;
            v124 = v1055;
            v1068 = v1055 - 1;
            v1050 = (v121 - 1);
            v1052 = v121;
            v125 = 1;
            v126 = 2;
            do
            {
              v127 = v125 - v124;
              if (v125 >= v124)
                v128 = v127;
              else
                v128 = 0;
              v1072 = v126;
              if (v126 >= v124)
                v129 = v126 - v124;
              else
                v129 = 0;
              if (v1068 >= v125)
                v130 = v125;
              else
                v130 = v1068;
              v1059 = v125 + 1;
              v1064 = v122;
              v1080 = v125;
              if (v125 + 1 < v124 || (v131 = 0, v127 + 1 <= v130))
              {
                v132 = v125 - v129;
                if (v126 >= v124)
                  v133 = v126 - v124;
                else
                  v133 = 0;
                do
                {
                  v134 = v112[v132];
                  v135 = *(_DWORD *)(v113 + 4 * v133);
                  v1111 = v114;
                  LODWORD(v1112) = 0;
                  LODWORD(v1115) = v134;
                  v1116 = 0;
                  LODWORD(v1117) = v135;
                  v1119 = 0;
                  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 47, &v1111, 1, &v1115, 2, 0);
                  v137 = *(_DWORD *)(*(_QWORD *)(v136 + 32) + 4);
                  v138 = v1108;
                  if (v1108 >= (unint64_t)HIDWORD(v1108))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1109, v1108 + 1, 4);
                    v138 = v1108;
                  }
                  *((_DWORD *)__src + v138) = v137;
                  v131 = v1108 + 1;
                  LODWORD(v1108) = v1108 + 1;
                  --v132;
                  v139 = v133++ >= v130;
                }
                while (!v139);
                v122 = v1064;
                v125 = v1080;
              }
              if (v1068 >= (int)v125 - 1)
                v140 = (v125 - 1);
              else
                v140 = v1068;
              if (v128 <= v140)
              {
                v141 = v122 - v128;
                do
                {
                  v142 = v112[v141];
                  v143 = *(_DWORD *)(v113 + 4 * v128);
                  v1111 = v114;
                  LODWORD(v1112) = 0;
                  LODWORD(v1115) = v142;
                  v1116 = 0;
                  LODWORD(v1117) = v143;
                  v1119 = 0;
                  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 147, &v1111, 1, &v1115, 2, 0);
                  v145 = *(_DWORD *)(*(_QWORD *)(v144 + 32) + 4);
                  v146 = v1108;
                  if (v1108 >= (unint64_t)HIDWORD(v1108))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1109, v1108 + 1, 4);
                    v146 = v1108;
                  }
                  *((_DWORD *)__src + v146) = v145;
                  v131 = v1108 + 1;
                  LODWORD(v1108) = v1108 + 1;
                  --v141;
                  v139 = v128++ >= v140;
                }
                while (!v139);
                v122 = v1064;
                v125 = v1080;
              }
              if (v125 != 1)
              {
                if (v131 >= HIDWORD(v1108))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1109, v131 + 1, 4);
                  v125 = v1080;
                  v131 = v1108;
                }
                *((_DWORD *)__src + v131) = v123;
                LODWORD(v1108) = v1108 + 1;
              }
              v148 = *(_DWORD *)__src;
              v147 = *((_DWORD *)__src + 1);
              if (v125 == v1050)
              {
                v1111 = v114;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = v148;
                v1116 = 0;
                LODWORD(v1117) = v147;
                v1119 = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 45, &v1111, 1, &v1115, 2, 0);
                v150 = *(_DWORD *)(*(_QWORD *)(v149 + 32) + 4);
                if (v1108 >= 3)
                {
                  v151 = 2;
                  do
                  {
                    v152 = *((_DWORD *)__src + v151);
                    v1111 = v114;
                    LODWORD(v1112) = 0;
                    LODWORD(v1115) = v150;
                    v1116 = 0;
                    LODWORD(v1117) = v152;
                    v1119 = 0;
                    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 45, &v1111, 1, &v1115, 2, 0);
                    v150 = *(_DWORD *)(*(_QWORD *)(v153 + 32) + 4);
                    ++v151;
                  }
                  while (v151 < v1108);
                }
                v123 = 0;
              }
              else
              {
                v1111 = v114;
                LODWORD(v1112) = 0;
                v1113 = 9;
                LODWORD(v1114) = 0;
                LODWORD(v1115) = v148;
                v1116 = 0;
                LODWORD(v1117) = v147;
                v1119 = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 137, &v1111, 2, &v1115, 2, 0);
                v155 = *(_QWORD *)(v154 + 32);
                v150 = *(_DWORD *)(v155 + 4);
                v1111 = v114;
                LODWORD(v1112) = 0;
                LODWORD(v1115) = *(_DWORD *)(v155 + 36);
                v1116 = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 126, &v1111, 1, &v1115, 1, 0);
                v123 = *(_DWORD *)(*(_QWORD *)(v156 + 32) + 4);
                if (v1108 >= 3)
                {
                  v157 = 2;
                  do
                  {
                    v158 = *((_DWORD *)__src + v157);
                    v1111 = v114;
                    LODWORD(v1112) = 0;
                    v1113 = 9;
                    LODWORD(v1114) = 0;
                    LODWORD(v1115) = v150;
                    v1116 = 0;
                    LODWORD(v1117) = v158;
                    v1119 = 0;
                    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 137, &v1111, 2, &v1115, 2, 0);
                    v160 = *(_QWORD *)(v159 + 32);
                    v150 = *(_DWORD *)(v160 + 4);
                    v1111 = v114;
                    LODWORD(v1112) = 0;
                    LODWORD(v1115) = *(_DWORD *)(v160 + 36);
                    v1116 = 0;
                    v161 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 126, &v1111, 1, &v1115, 1, 0);
                    v1111 = v114;
                    LODWORD(v1112) = 0;
                    LODWORD(v1115) = v123;
                    v1116 = 0;
                    v1117 = v161;
                    v1118 = v162;
                    v1119 = 1;
                    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 45, &v1111, 1, &v1115, 2, 0);
                    v123 = *(_DWORD *)(*(_QWORD *)(v163 + 32) + 4);
                    ++v157;
                  }
                  while (v157 < v1108);
                }
              }
              v120 = (int *)v1099;
              *((_DWORD *)v1099 + v1080) = v150;
              LODWORD(v1108) = 0;
              v126 = v1072 + 1;
              ++v122;
              v124 = v1055;
              v125 = v1059;
            }
            while (v1059 != v1052);
            if (__src != &v1109)
            {
              free(__src);
              v120 = (int *)v1099;
            }
            v27 = v1037;
            v110 = v1032;
          }
          v452 = *a1;
          LODWORD(v1115) = v27;
          DWORD2(v1115) = 1;
          sub_1C5544D6C(v452, (uint64_t)&v1115, &v120[(v1045 - v110)], v110);
          v453 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v453 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v453 = a2;
              do
                v453 = *(_QWORD *)(v453 + 8);
              while ((*(_WORD *)(v453 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v453 + 8));
          if (v1099 != v1101)
            free(v1099);
          if ((_DWORD *)v1102 != v1103)
            free((void *)v1102);
          v215 = (uint64_t *)v1104;
          if (v1104 != v1106)
            goto LABEL_1008;
          return 1;
        }
LABEL_11:
        if (a3)
          return 2;
        v16 = v1091;
        v17 = *(_QWORD *)(a2 + 32);
        v18 = *(_DWORD *)(v17 + 4);
        v19 = (_QWORD *)a1[2];
        if (v18 < 0
          && (v18 & 0x7FFFFFFFu) < *((_DWORD *)v19 + 108)
          && (*(_QWORD *)(v19[53] + 8 * (v18 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
          && (*(_QWORD *)(v19[53] + 8 * (v18 & 0x7FFFFFFF)) & 4) != 0)
        {
          return 2;
        }
        v329 = *((unsigned __int8 *)v13 + 4);
        if ((v13[4] & 2) == 0 || (v408 = *(_DWORD *)(a2 + 40), v408 == v329))
        {
          v330 = v329;
        }
        else
        {
          v409 = v408 - 1;
          v330 = v329;
          do
          {
            v410 = *(_DWORD *)(v17 + 32 * v329);
            if ((v410 & 0x10000FF) != 0x1000000)
              break;
            v330 += (v410 & 0x2000000) == 0;
            if (v409 == v329)
              break;
            ++v329;
          }
          while ((v410 & 0x2000000) == 0);
        }
        if (v330 == 2)
          v331 = *(_DWORD *)(v17 + 36);
        else
          v331 = 0;
        v332 = *(_DWORD *)(v17 + 32 * v330 + 4);
        v333 = *(_DWORD *)(v17 + 32 * (v330 + 1) + 4);
        if (*(_DWORD *)(a2 + 40) == v330 + 3)
        {
          v334 = *(_DWORD *)(v17 + 32 * (v330 + 2) + 4);
          if ((v18 & 0x80000000) == 0)
            goto LABEL_365;
        }
        else
        {
          v334 = 0;
          if ((v18 & 0x80000000) == 0)
            goto LABEL_365;
        }
        v335 = v18 & 0x7FFFFFFF;
        if (v335 < *((_DWORD *)v19 + 108))
        {
          v336 = *(_QWORD *)(v19[53] + 8 * v335);
          goto LABEL_366;
        }
LABEL_365:
        v336 = 0;
LABEL_366:
        v1093 = 0;
        v1094 = 0;
        __src = &v1109;
        v1108 = 0x200000000;
        v1104 = v1106;
        v1105 = 0x200000000;
        *(_QWORD *)&v1102 = v1103;
        *((_QWORD *)&v1102 + 1) = 0x200000000;
        v1099 = v1101;
        v1100 = 0x200000000;
        v1096 = v1098;
        v1097 = 0x200000000;
        sub_1C5534378(a1, v332, v336, v1091, (uint64_t *)&v1094, (uint64_t)&__src, (uint64_t)&v1102);
        sub_1C5534378(a1, v333, v336, v16, (uint64_t *)&v1093, (uint64_t)&v1104, (uint64_t)&v1099);
        v338 = v1108;
        if (DWORD2(v1102))
        {
          v339 = v336;
          v340 = 0;
          v341 = 4 * DWORD2(v1102);
          do
          {
            v342 = *(_DWORD *)(v1102 + v340);
            v343 = v1108;
            if (v1108 >= (unint64_t)HIDWORD(v1108))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1109, v1108 + 1, 4);
              v343 = v1108;
            }
            *((_DWORD *)__src + v343) = v342;
            LODWORD(v1108) = v1108 + 1;
            v344 = *(_DWORD *)((char *)v1099 + v340);
            v345 = v1105;
            if (v1105 >= (unint64_t)HIDWORD(v1105))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1104, (uint64_t)v1106, v1105 + 1, 4);
              v345 = v1105;
            }
            *((_DWORD *)v1104 + v345) = v344;
            LODWORD(v1105) = v1105 + 1;
            v340 += 4;
          }
          while (v341 != v340);
          v346 = v1108;
          v336 = v339;
        }
        else
        {
          v346 = v1108;
        }
        v1053 = v16;
        if (HIDWORD(v1097) < v346)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1096, (uint64_t)v1098, v346, 4);
          v346 = v1108;
        }
        v347 = v338;
        if (v346)
        {
          v1038 = v338;
          v1041 = v336;
          v348 = 0;
          v349 = 4 * v346;
          v1065 = v346 - 1;
          v350 = 4 * v1065;
          do
          {
            v351 = a1[2];
            v352 = *(_DWORD *)((char *)__src + v348);
            if (v352 < 0 && (v353 = v352 & 0x7FFFFFFF, v353 < *(_DWORD *)(v351 + 432)))
              v354 = *(_QWORD *)(*(_QWORD *)(v351 + 424) + 8 * v353);
            else
              v354 = 0;
            v355 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v351, v354, "", 0);
            v356 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], 9, "", 0);
            v357 = v356;
            if (v331)
              v358 = v331;
            else
              v358 = v356;
            if (v350 == v348)
              v359 = v358;
            else
              v359 = v356;
            v360 = *a1;
            if (v334)
            {
              LODWORD(v1111) = v355;
              LODWORD(v1112) = 1;
              if (v350 == v348)
              {
                LODWORD(v1113) = v358;
                LODWORD(v1114) = 1;
                LODWORD(v1115) = *((_DWORD *)__src + v1065);
                v1116 = 0;
                LODWORD(v1117) = *((_DWORD *)v1104 + v1065);
              }
              else
              {
                LODWORD(v1113) = v357;
                LODWORD(v1114) = 1;
                LODWORD(v1115) = *(_DWORD *)((char *)__src + v348);
                v1116 = 0;
                LODWORD(v1117) = *(_DWORD *)((char *)v1104 + v348);
              }
              v1119 = 0;
              LODWORD(v1120) = v334;
              v1122 = 0;
              v361 = *(void (**)(void))(*(_QWORD *)v360 + 32);
            }
            else
            {
              LODWORD(v1111) = v355;
              LODWORD(v1112) = 1;
              LODWORD(v1113) = v359;
              LODWORD(v1114) = 1;
              LODWORD(v1115) = *(_DWORD *)((char *)__src + v348);
              v1116 = 0;
              LODWORD(v1117) = *(_DWORD *)((char *)v1104 + v348);
              v1119 = 0;
              v361 = *(void (**)(void))(*(_QWORD *)v360 + 32);
            }
            v361();
            v362 = v1097;
            if (v1097 >= (unint64_t)HIDWORD(v1097))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1096, (uint64_t)v1098, v1097 + 1, 4);
              v362 = v1097;
            }
            *((_DWORD *)v1096 + v362) = v355;
            v363 = v1097 + 1;
            LODWORD(v1097) = v1097 + 1;
            v348 += 4;
            v334 = v359;
          }
          while (v349 != v348);
          v336 = v1041;
          v347 = v1038;
        }
        else
        {
          v363 = v1097;
        }
        if (v363 >= v347)
          v364 = v347;
        else
          v364 = v363;
        sub_1C5534AB8(a1, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4), v336, v1053, (int *)v1096, v364, v1094, v337, (uint64_t)v1096 + 4 * v347, v363 - v347);
        v365 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v365 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v365 = a2;
            do
              v365 = *(_QWORD *)(v365 + 8);
            while ((*(_WORD *)(v365 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v365 + 8));
        if (v1096 != v1098)
          free(v1096);
        if (v1099 != v1101)
          free(v1099);
        if ((_DWORD *)v1102 != v1103)
          free((void *)v1102);
        if (v1104 != v1106)
          free(v1104);
        v215 = (uint64_t *)__src;
        if (__src != &v1109)
          goto LABEL_1008;
        return 1;
    }
  }
  switch(*v13)
  {
    case 0xC1u:
    case 0xC2u:
      if (a3 != 1)
        return 2;
      v85 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v86 = v1091;
      v87 = *a1;
      v88 = *(_QWORD *)(a2 + 32);
      v89 = 2;
      goto LABEL_91;
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCEu:
      return v15;
    case 0xCCu:
    case 0xCDu:
      v15 = 2;
      if (a3 != 2)
        return v15;
      if (v14 == 205)
        v84 = 2;
      else
        v84 = 3;
      v85 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v86 = v1091;
      v87 = *a1;
      v88 = *(_QWORD *)(a2 + 32);
      v89 = v84;
LABEL_91:
      sub_1C55366DC(v87, v88, v86, v89);
      goto LABEL_92;
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
      if (a3 != 1)
      {
LABEL_272:
        v85 = a1;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
        v170 = v1091;
        v171 = *(_QWORD *)(a2 + 32);
        v172 = a1;
        v173 = 126;
        goto LABEL_273;
      }
      if (v14 - 207 < 2)
      {
        __src = (void *)v1091;
        v97 = *(_QWORD *)(a2 + 32);
        v98 = *(_DWORD *)(v97 + 4);
        v99 = *(_DWORD *)(v97 + 36);
        v100 = (_QWORD *)a1[2];
        if (v98 < 0 && (v98 & 0x7FFFFFFFu) < *((_DWORD *)v100 + 108))
          v101 = *(void **)(v100[53] + 8 * (v98 & 0x7FFFFFFF));
        else
          v101 = 0;
        if (v99 < 0 && (v99 & 0x7FFFFFFFu) < *((_DWORD *)v100 + 108))
          v174 = *(void **)(v100[53] + 8 * (v99 & 0x7FFFFFFF));
        else
          v174 = 0;
        v1104 = v174;
        v176 = sub_1C4825F50((unint64_t *)&__src);
        if ((_DWORD)v175 == 1)
        {
          if ((v174 & 1) == 0)
            return 2;
        }
        else if ((v174 & 1) == 0)
        {
          return 2;
        }
        v178 = sub_1C4825F50((unint64_t *)&v1104);
        if ((_DWORD)v177 == 1)
        v15 = 2;
        if (v178 == 2 * v176)
        {
          v179 = **(unsigned __int16 **)(a2 + 16);
          v180 = (uint64_t *)*a1;
          LODWORD(v1115) = v99;
          v1116 = 0;
          sub_1C5544C30(v180, (uint64_t)__src, (int *)&v1115);
          v182 = v181;
          *(_QWORD *)&v1115 = __src;
          DWORD2(v1115) = 0;
          v183 = sub_1C5544694((uint64_t)v180, (unint64_t *)&v1115, 0);
          v1111 = (void *)9;
          LODWORD(v1112) = 0;
          v184 = *(_DWORD *)(*(_QWORD *)(v182 + 32) + 4);
          LODWORD(v1115) = 32;
          v1116 = 2;
          LODWORD(v1117) = v184;
          v1119 = 0;
          v1120 = v183;
          v1121 = v185;
          v1122 = 1;
          v186 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v180 + 32))(v180, 134, &v1111, 1, &v1115, 3, 0);
          v188 = v187;
          v189 = *(_DWORD *)(*(_QWORD *)(v182 + 32) + 36);
          v1111 = v101;
          LODWORD(v1112) = 0;
          LODWORD(v1115) = v189;
          v1116 = 0;
          if (v179 == 208)
            v190 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v180 + 32))(v180, 208, &v1111, 1, &v1115, 1, 0);
          else
            v190 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v180 + 32))(v180, 207, &v1111, 1, &v1115, 1, 0);
          v625 = v190;
          v626 = v191;
          *(_QWORD *)&v1115 = v101;
          DWORD2(v1115) = 0;
          v627 = sub_1C5544694((uint64_t)v180, (unint64_t *)&v1115, v176);
          v1111 = v101;
          LODWORD(v1112) = 0;
          *(_QWORD *)&v1115 = v625;
          *((_QWORD *)&v1115 + 1) = v626;
          v1116 = 1;
          v1117 = v627;
          v1118 = v628;
          v1119 = 1;
          v629 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v180 + 32))(v180, 45, &v1111, 1, &v1115, 2, 0);
          v631 = v630;
          v632 = *(_DWORD *)(*(_QWORD *)(v182 + 32) + 4);
          v1111 = v101;
          LODWORD(v1112) = 0;
          LODWORD(v1115) = v632;
          v1116 = 0;
          v633 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v180 + 32))(v180, 208, &v1111, 1, &v1115, 1, 0);
          LODWORD(v1111) = v98;
          LODWORD(v1112) = 1;
          *(_QWORD *)&v1115 = v186;
          *((_QWORD *)&v1115 + 1) = v188;
          v1116 = 1;
          v1117 = v629;
          v1118 = v631;
          v1119 = 1;
          v1120 = v633;
          v1121 = v634;
          v1122 = 1;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v180 + 32))(v180, 136, &v1111, 1, &v1115, 3, 0);
          v309 = a2;
          v310 = *(_QWORD *)(a2 + 24);
          v311 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v311 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v311 = a2;
              do
                v311 = *(_QWORD *)(v311 + 8);
              while ((*(_WORD *)(v311 + 44) & 8) != 0);
            }
          }
          goto LABEL_351;
        }
        return v15;
      }
      if (v14 - 209 < 2)
      {
        __src = (void *)v1091;
        v21 = *(_QWORD *)(a2 + 32);
        v22 = *(_DWORD *)(v21 + 4);
        v23 = *(_DWORD *)(v21 + 36);
        v24 = (_QWORD *)a1[2];
        if (v22 < 0 && (v22 & 0x7FFFFFFFu) < *((_DWORD *)v24 + 108))
          v25 = *(void **)(v24[53] + 8 * (v22 & 0x7FFFFFFF));
        else
          v25 = 0;
        if (v23 < 0 && (v23 & 0x7FFFFFFFu) < *((_DWORD *)v24 + 108))
          v192 = *(void **)(v24[53] + 8 * (v23 & 0x7FFFFFFF));
        else
          v192 = 0;
        v1104 = v192;
        v194 = sub_1C4825F50((unint64_t *)&__src);
        if ((_DWORD)v193 == 1)
        {
          if ((v192 & 1) == 0)
            return 2;
        }
        else if ((v192 & 1) == 0)
        {
          return 2;
        }
        v196 = sub_1C4825F50((unint64_t *)&v1104);
        if ((_DWORD)v195 == 1)
        v15 = 2;
        if (v196 == 2 * v194)
        {
          v197 = **(unsigned __int16 **)(a2 + 16);
          v198 = (uint64_t *)*a1;
          LODWORD(v1115) = v23;
          v1116 = 0;
          sub_1C5544C30(v198, (uint64_t)__src, (int *)&v1115);
          v200 = v199;
          *(_QWORD *)&v1115 = __src;
          DWORD2(v1115) = 0;
          v201 = sub_1C5544694((uint64_t)v198, (unint64_t *)&v1115, 0);
          v1111 = (void *)9;
          LODWORD(v1112) = 0;
          v202 = *(_DWORD *)(*(_QWORD *)(v200 + 32) + 36);
          LODWORD(v1115) = 32;
          v1116 = 2;
          LODWORD(v1117) = v202;
          v1119 = 0;
          v1120 = v201;
          v1121 = v203;
          v1122 = 1;
          v204 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v198 + 32))(v198, 134, &v1111, 1, &v1115, 3, 0);
          v206 = v205;
          v207 = *(_DWORD *)(*(_QWORD *)(v200 + 32) + 4);
          v1111 = v25;
          LODWORD(v1112) = 0;
          LODWORD(v1115) = v207;
          v1116 = 0;
          if (v197 == 210)
            v208 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v198 + 32))(v198, 210, &v1111, 1, &v1115, 1, 0);
          else
            v208 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v198 + 32))(v198, 209, &v1111, 1, &v1115, 1, 0);
          v635 = v208;
          v636 = v209;
          *(_QWORD *)&v1115 = v25;
          DWORD2(v1115) = 0;
          v637 = sub_1C5544694((uint64_t)v198, (unint64_t *)&v1115, v194);
          v1111 = v25;
          LODWORD(v1112) = 0;
          *(_QWORD *)&v1115 = v635;
          *((_QWORD *)&v1115 + 1) = v636;
          v1116 = 1;
          v1117 = v637;
          v1118 = v638;
          v1119 = 1;
          v639 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v198 + 32))(v198, 45, &v1111, 1, &v1115, 2, 0);
          v641 = v640;
          v642 = *(_DWORD *)(*(_QWORD *)(v200 + 32) + 36);
          v1111 = v25;
          LODWORD(v1112) = 0;
          LODWORD(v1115) = v642;
          v1116 = 0;
          v643 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v198 + 32))(v198, 210, &v1111, 1, &v1115, 1, 0);
          LODWORD(v1111) = v22;
          LODWORD(v1112) = 1;
          *(_QWORD *)&v1115 = v204;
          *((_QWORD *)&v1115 + 1) = v206;
          v1116 = 1;
          v1117 = v639;
          v1118 = v641;
          v1119 = 1;
          v1120 = v643;
          v1121 = v644;
          v1122 = 1;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v198 + 32))(v198, 136, &v1111, 1, &v1115, 3, 0);
          v309 = a2;
          v310 = *(_QWORD *)(a2 + 24);
          v311 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v311 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v311 = a2;
              do
                v311 = *(_QWORD *)(v311 + 8);
              while ((*(_WORD *)(v311 + 44) & 8) != 0);
            }
          }
          goto LABEL_351;
        }
        return v15;
      }
      if (v14 != 211)
        return 2;
      __src = (void *)v1091;
      v102 = *(_QWORD *)(a2 + 32);
      v103 = *(_DWORD *)(v102 + 4);
      v104 = (_QWORD *)a1[2];
      if (v103 < 0 && (v103 & 0x7FFFFFFFu) < *((_DWORD *)v104 + 108))
        v105 = *(void **)(v104[53] + 8 * (v103 & 0x7FFFFFFF));
      else
        v105 = 0;
      v366 = *(_DWORD *)(v102 + 36);
      if (v366 < 0 && (v367 = v366 & 0x7FFFFFFF, v367 < *((_DWORD *)v104 + 108)))
        v368 = *(void **)(v104[53] + 8 * v367);
      else
        v368 = 0;
      v1104 = v368;
      v370 = sub_1C4825F50((unint64_t *)&__src);
      if ((_DWORD)v369 == 1)
      {
        if ((v368 & 1) == 0)
          return 2;
      }
      else if ((v368 & 1) == 0)
      {
        return 2;
      }
      v372 = sub_1C4825F50((unint64_t *)&v1104);
      if ((_DWORD)v371 == 1)
      if (v372 == 2 * v370)
      {
        v373 = (uint64_t *)*a1;
        LODWORD(v1115) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
        v1116 = 0;
        sub_1C5544C30(v373, (uint64_t)__src, (int *)&v1115);
        v375 = v374;
        v376 = *a1;
        v377 = *(_DWORD *)(*(_QWORD *)(v374 + 32) + 4);
        v1111 = v105;
        LODWORD(v1112) = 0;
        LODWORD(v1115) = v377;
        v1116 = 0;
        v378 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v376 + 32))(v376, 211, &v1111, 1, &v1115, 1, 0);
        v380 = v379;
        v381 = *a1;
        v382 = *(_DWORD *)(*(_QWORD *)(v375 + 32) + 36);
        v1111 = v105;
        LODWORD(v1112) = 0;
        LODWORD(v1115) = v382;
        v1116 = 0;
        v383 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v381 + 32))(v381, 211, &v1111, 1, &v1115, 1, 0);
        v384 = *a1;
        LODWORD(v1111) = v103;
        LODWORD(v1112) = 1;
        *(_QWORD *)&v1115 = v383;
        *((_QWORD *)&v1115 + 1) = v385;
        v1116 = 1;
        v1117 = v378;
        v1118 = v380;
        v1119 = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v384 + 32))(v384, 45, &v1111, 1, &v1115, 2, 0);
        v386 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v386 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v386 = a2;
            do
              v386 = *(_QWORD *)(v386 + 8);
            while ((*(_WORD *)(v386 + 44) & 8) != 0);
          }
        }
        v327 = *(_QWORD *)(v386 + 8);
        v328 = *(_QWORD *)(a2 + 24) + 40;
        v309 = a2;
        goto LABEL_352;
      }
      return 2;
    case 0xD4u:
    case 0xD5u:
      v74 = v10 / v12;
      if (v10 % v12)
        return 2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v75 = (uint64_t *)&v1116;
      *(_QWORD *)&v1115 = &v1116;
      *((_QWORD *)&v1115 + 1) = 0x200000000;
      v1111 = &v1113;
      v1112 = 0x200000000;
      sub_1C5534298(a1, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), v1091, v74, (uint64_t)&v1115);
      if ((_DWORD)v74)
      {
        v76 = 0;
        v77 = (v10 / v12);
        do
        {
          v78 = *a1;
          v79 = **(unsigned __int16 **)(a2 + 16);
          v1104 = (void *)v1091;
          LODWORD(v1105) = 0;
          LODWORD(__src) = *(_DWORD *)(v1115 + 4 * (v74 + ~v76));
          v1109 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, v79, &v1104, 1, &__src, 1, 0);
          v81 = *(_DWORD *)(*(_QWORD *)(v80 + 32) + 4);
          v82 = v1112;
          if (v1112 >= (unint64_t)HIDWORD(v1112))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1111, (uint64_t)&v1113, v1112 + 1, 4);
            v82 = v1112;
          }
          *((_DWORD *)v1111 + v82) = v81;
          v83 = v1112 + 1;
          LODWORD(v1112) = v1112 + 1;
          ++v76;
          --v77;
        }
        while (v77);
      }
      else
      {
        v83 = v1112;
      }
      v512 = *a1;
      LODWORD(__src) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      LODWORD(v1108) = 1;
      sub_1C5544D6C(v512, (uint64_t)&__src, (int *)v1111, v83);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1], a2);
      v513 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v513 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v513 = a2;
          do
            v513 = *(_QWORD *)(v513 + 8);
          while ((*(_WORD *)(v513 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v513 + 8));
      if (v1111 != &v1113)
        free(v1111);
LABEL_603:
      v215 = (uint64_t *)v1115;
LABEL_604:
      if (v215 == v75)
        return 1;
      goto LABEL_1008;
    default:
      if (v14 - 180 < 2)
      {
        if (!a3)
        {
          v32 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
          if (v32 < 0)
          {
            v33 = (_QWORD *)a1[2];
            v34 = v32 & 0x7FFFFFFF;
            if (v34 < *((_DWORD *)v33 + 108))
            {
              v35 = v1091;
              v36 = *(_QWORD *)(v33[53] + 8 * v34);
              if ((v36 & 0xFFFFFFFFFFFFFFF9) == 0 || (v36 & 4) == 0)
              {
LABEL_48:
                if (v36 != 129)
                  return 2;
                if ((v1091 & 1) != 0)
                {
                  v39 = v1091 >> 3;
                }
                else if ((v1091 & 4) != 0)
                {
                  v39 = (v1091 & 2) != 0 ? (unsigned __int16)(v1091 >> 19) : v1091 >> 19;
                }
                else
                {
                  v39 = (unsigned __int16)(v1091 >> 3);
                }
                v852 = v14 == 180 ? 17 : 16;
                if (v852 > v39)
                  return 2;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
                if (v14 == 180)
                  v930 = 124;
                else
                  v930 = 126;
                sub_1C6271944(a1, *(_QWORD *)(a2 + 32), v35, v930);
                v90 = *(void (**)(void))(*(_QWORD *)a1[1] + 40);
LABEL_93:
                v90();
                return 1;
              }
              if ((v36 & 2) == 0)
              {
                v38 = 3;
                if ((v36 & 1) == 0)
                  v38 = 19;
                v36 = v36 & 0x8000000000000000 | (8 * (v36 >> v38)) | 1;
                goto LABEL_48;
              }
            }
          }
        }
        return 2;
      }
      if (v14 == 178)
      {
        if (!a3)
        {
          v85 = a1;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
          v170 = v1091;
          v171 = *(_QWORD *)(a2 + 32);
          v172 = a1;
          v173 = 178;
LABEL_273:
          sub_1C6271944(v172, v171, v170, v173);
LABEL_92:
          v90 = *(void (**)(void))(*(_QWORD *)v85[1] + 40);
          goto LABEL_93;
        }
        return 2;
      }
      return v15;
  }
}

uint64_t sub_1C5521234(uint64_t *a1, uint64_t a2, int a3, unint64_t a4)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  _QWORD *v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  _DWORD *v100;
  int v101;
  int v102;
  _QWORD *v103;
  unint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  llvm::MachineBasicBlock *v130;
  uint64_t v131;
  unint64_t FirstTerminator;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  _QWORD *v153;
  int v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  llvm::ConstantInt *v169;
  _QWORD *v170;
  int v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v180;
  int v181;
  int v182;
  _QWORD *v183;
  unint64_t v184;
  char v185;
  unint64_t v186;
  char v187;
  char v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _DWORD *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  _QWORD *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  llvm::detail::DoubleAPFloat *v206;
  void *v207;
  const llvm::APInt *v208;
  uint64_t v209;
  unsigned __int8 **v210;
  unsigned __int8 **v211;
  unsigned __int8 *v212;
  llvm::ConstantInt *****v213;
  llvm::ValueHandleBase *v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  _BOOL4 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  _QWORD *v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  int v242;
  int v243;
  _QWORD *v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  int v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  int v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  llvm::APInt *v274;
  const char *v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  const char *v286;
  unint64_t v287;
  const char *v288;
  unint64_t v289;
  char v290;
  unint64_t v291;
  int v292;
  uint64_t v293;
  const char *v294;
  unsigned int v295;
  const char *v296;
  const llvm::APInt *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  llvm::ConstantInt *****v301;
  void *v302;
  llvm::ValueHandleBase *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  int v313;
  const char *v314;
  unsigned int v315;
  uint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  _BOOL4 v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  const llvm::APInt *v352;
  int v353;
  unsigned int v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  unint64_t v365;
  uint64_t v366;
  char v367;
  __int32 *v368;
  size_t v369;
  __int32 *v370;
  __int32 *v371;
  const char *v372;
  unsigned int v373;
  uint64_t v374;
  void *v375;
  const char *v376;
  unint64_t v377;
  const char *v378;
  unint64_t v379;
  uint64_t v380;
  void *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  const char *v389;
  int v390;
  const char *v391;
  const char *v392;
  int v393;
  int v394;
  const char *v395;
  unint64_t v396;
  int v397;
  int v398;
  int v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  const char *v414;
  unsigned int v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  int v428;
  unsigned int v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int v432;
  uint64_t v433;
  int v434;
  uint64_t v435;
  unint64_t v436;
  int v437;
  unsigned int v438;
  unint64_t v439;
  int v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  unint64_t v457;
  int *v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  int v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  const char *v477;
  unint64_t v478;
  const char *v479;
  unint64_t v480;
  uint64_t v481;
  int v482;
  int v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  const char *v491;
  unint64_t v492;
  const char *v493;
  unint64_t v494;
  unint64_t v495;
  const char *v496;
  unint64_t v497;
  const char *v498;
  unint64_t v499;
  uint64_t v500;
  _QWORD *v501;
  uint64_t v502;
  llvm::MachineFunction *v503;
  unint64_t *v504;
  unint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  int GenericVirtualRegister;
  int v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  char v526;
  __int32 *v527;
  size_t v528;
  __int32 *v529;
  __int32 *v530;
  const char *v531;
  unsigned int v532;
  uint64_t v533;
  uint64_t v534;
  const char *v535;
  unint64_t v536;
  const char *v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  const char *v541;
  unsigned int v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unsigned int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t i;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  int v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  int v569;
  uint64_t v570;
  unsigned int v571;
  int v572;
  uint64_t v573;
  uint64_t v574;
  int v575;
  int v576;
  int v577;
  int v578;
  uint64_t v579;
  void *v580;
  unint64_t v581;
  int v582;
  void *v583;
  unint64_t v584;
  uint64_t v585;
  unint64_t v586;
  void *v587;
  int v588;
  int v589;
  void *v590;
  uint64_t v591;
  _BYTE v592[32];
  void *v593[2];
  void *v594;
  int v595;
  __int128 v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  int v603;
  uint64_t v604;

  v604 = *MEMORY[0x1E0C80C00];
  v580 = (void *)a4;
  v4 = **(unsigned __int16 **)(a2 + 16);
  v5 = 2;
  v6 = a4;
  v10 = 0;
  v11 = 45;
  v12 = 124;
  v13 = 1;
  switch(**(_WORD **)(a2 + 16))
  {
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x41:
    case 0x42:
    case 0x43:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v29 = *(_QWORD *)(a2 + 32);
      v30 = v29 + 32;
      v31 = *a1;
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(v29 + 36);
      LODWORD(v597) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 118, v593, 1, &v596, 1, 0);
      llvm::MachineOperand::setReg(v30, *(_DWORD *)(*(_QWORD *)(v32 + 32) + 4));
      v33 = *(_QWORD *)(a2 + 32);
      v34 = v33 + 64;
      v35 = *a1;
      v593[0] = v580;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(v33 + 68);
      LODWORD(v597) = 0;
      v36 = *(void (**)(void))(*(_QWORD *)v35 + 32);
      goto LABEL_19;
    case 0x32:
      v145 = *(_QWORD *)(a2 + 32);
      v146 = *(_DWORD *)(v145 + 16);
      v147 = v146 - 32;
      if ((v146 - 38) >= 4)
        v148 = 126;
      else
        v148 = 124;
      if (v147 >= 0xA)
        v149 = 178;
      else
        v149 = v148;
      v5 = 1;
      sub_1C553674C(*a1, v145, a4, 1u, v149);
      v117 = *a1;
      v118 = *(_QWORD *)(a2 + 32);
      v119 = v6;
      v120 = 2;
      v121 = v149;
      goto LABEL_110;
    case 0x33:
      if (!a3)
      {
        sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), a4, 4u, 118);
        v93 = *a1;
        v94 = *(_QWORD *)(a2 + 32);
        v97 = v6;
        v99 = 5;
        goto LABEL_414;
      }
      v163 = *(_QWORD *)(a2 + 32);
      v165 = *(_DWORD *)(v163 + 48);
      v166 = v165 - 32;
      if ((v165 - 38) >= 4)
        v167 = 126;
      else
        v167 = 124;
      if (v166 >= 0xA)
        v164 = 178;
      else
        v164 = v167;
LABEL_140:
      sub_1C553674C(*a1, v163, v6, 2u, v164);
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      v95 = v6;
      v96 = 3;
      v116 = v164;
      goto LABEL_438;
    case 0x3A:
      if (a3)
        return 2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v5 = 1;
      sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v6, 1u, 178);
      v141 = *a1;
      v142 = *(_QWORD *)(a2 + 32);
      v143 = v6;
      v144 = 2;
      goto LABEL_214;
    case 0x3B:
    case 0x3D:
    case 0xC3:
    case 0xC4:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v45 = *(_QWORD *)(a2 + 32);
      v46 = v45 + 32;
      v47 = *a1;
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(v45 + 36);
      LODWORD(v597) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 124, v593, 1, &v596, 1, 0);
      llvm::MachineOperand::setReg(v46, *(_DWORD *)(*(_QWORD *)(v48 + 32) + 4));
      v49 = *(_QWORD *)(a2 + 32);
      v34 = v49 + 64;
      v50 = *a1;
      v593[0] = v580;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(v49 + 68);
      LODWORD(v597) = 0;
      v36 = *(void (**)(void))(*(_QWORD *)v50 + 32);
      goto LABEL_19;
    case 0x3C:
    case 0x3E:
    case 0xC5:
    case 0xC6:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v51 = *(_QWORD *)(a2 + 32);
      v52 = v51 + 32;
      v53 = *a1;
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(v51 + 36);
      LODWORD(v597) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 126, v593, 1, &v596, 1, 0);
      llvm::MachineOperand::setReg(v52, *(_DWORD *)(*(_QWORD *)(v54 + 32) + 4));
      v55 = *(_QWORD *)(a2 + 32);
      v34 = v55 + 64;
      v56 = *a1;
      v593[0] = v580;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(v55 + 68);
      LODWORD(v597) = 0;
      v36 = *(void (**)(void))(*(_QWORD *)v56 + 32);
LABEL_19:
      v36();
      llvm::MachineOperand::setReg(v34, *(_DWORD *)(*(_QWORD *)(v57 + 32) + 4));
      sub_1C55367EC(a1, *(_QWORD *)(a2 + 32), (uint64_t)v580, 0, 119);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1], a2);
      return 1;
    case 0x3F:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v6, 2u, 124);
      v125 = *a1;
      v126 = *(_QWORD *)(a2 + 32);
      v127 = v6;
      v128 = 124;
      goto LABEL_145;
    case 0x40:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v6, 2u, 126);
      v125 = *a1;
      v126 = *(_QWORD *)(a2 + 32);
      v127 = v6;
      v128 = 126;
LABEL_145:
      sub_1C553674C(v125, v126, v127, 3u, v128);
      sub_1C55367EC(a1, *(_QWORD *)(a2 + 32), v6, 0, 119);
      goto LABEL_149;
    case 0x44:
    case 0x5A:
    case 0x5B:
    case 0x5C:
      goto LABEL_132;
    case 0x45:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if (*(_DWORD *)(a2 + 40) >= 2u)
      {
        v129 = 1;
        do
        {
          v130 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(a2 + 32) + 32 * (v129 + 1) + 16);
          v131 = *a1;
          FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v130);
          *(_QWORD *)(v131 + 40) = v130;
          *(_QWORD *)(v131 + 48) = FirstTerminator;
          v133 = *(_QWORD *)(a2 + 32) + 32 * v129;
          v134 = *a1;
          v593[0] = v580;
          LODWORD(v593[1]) = 0;
          LODWORD(v596) = *(_DWORD *)(v133 + 4);
          LODWORD(v597) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v134
                                                                                                  + 32))(v134, 118, v593, 1, &v596, 1, 0);
          llvm::MachineOperand::setReg(v133, *(_DWORD *)(*(_QWORD *)(v135 + 32) + 4));
          v129 += 2;
        }
        while (v129 < *(_DWORD *)(a2 + 40));
      }
      v136 = *(_QWORD *)(a2 + 24);
      v137 = *a1;
      v138 = (_QWORD *)(v136 + 48);
      v139 = *(_QWORD *)(v136 + 56);
      while (2)
      {
        if ((_QWORD *)v139 != v138)
        {
          if (!**(_WORD **)(v139 + 16) || **(_WORD **)(v139 + 16) == 69)
          {
            v139 = *(_QWORD *)(v139 + 8);
            continue;
          }
          v138 = (_QWORD *)v139;
        }
        break;
      }
      v140 = *v138 & 0xFFFFFFFFFFFFFFF8;
      if (!v140 || (*(_BYTE *)v140 & 4) == 0)
      {
        while ((*(_WORD *)(v140 + 44) & 4) != 0)
          v140 = *(_QWORD *)v140 & 0xFFFFFFFFFFFFFFF8;
      }
      *(_QWORD *)(v137 + 40) = v136;
      *(_QWORD *)(v137 + 48) = v140;
LABEL_181:
      v23 = (unint64_t)v580;
      goto LABEL_182;
    case 0x49:
      v581 = a4;
      v180 = *(_QWORD *)(a2 + 32);
      v181 = *(_DWORD *)(v180 + 4);
      v182 = *(_DWORD *)(v180 + 36);
      v183 = (_QWORD *)a1[2];
      if (v182 < 0 && (v182 & 0x7FFFFFFFu) < *((_DWORD *)v183 + 108))
        v184 = *(_QWORD *)(v183[53] + 8 * (v182 & 0x7FFFFFFF));
      else
        v184 = 0;
      v586 = v184;
      if (v181 < 0 && (v181 & 0x7FFFFFFFu) < *((_DWORD *)v183 + 108))
        v277 = *(_QWORD *)(v183[53] + 8 * (v181 & 0x7FFFFFFF));
      else
        v277 = 0;
      v278 = *(_QWORD *)(v180 + 80);
      if (!a3)
      {
        if ((v184 & 0xFFFFFFFFFFFFFFF9) != 0 && (v184 & 4) != 0
          || (v277 & 0xFFFFFFFFFFFFFFF9) != 0 && (v277 & 4) != 0)
        {
          return 2;
        }
        LODWORD(v593[0]) = v182;
        LODWORD(v594) = 0;
        if ((v184 & 0xFFFFFFFFFFFFFFF9) != 0 && (v184 & 6) == 2)
        {
          v366 = *(_QWORD *)(**(_QWORD **)(*a1 + 8) + 40);
          v367 = 35;
          if ((v184 & 4) == 0)
            v367 = 19;
          v368 = *(__int32 **)(v366 + 656);
          v369 = *(unsigned int *)(v366 + 664);
          v370 = wmemchr(v368, (v184 >> v367) & 0xFFFFFF, v369);
          if (v370)
            v371 = v370;
          else
            v371 = &v368[v369];
          if (v369 != v371 - v368)
            return 2;
          v373 = sub_1C4825F50(&v586);
          if ((_DWORD)v372 == 1)
          v184 = (8 * v373) | 1;
          v374 = *a1;
          v590 = (void *)v184;
          LODWORD(v591) = 0;
          v596 = *(_OWORD *)v593;
          LODWORD(v597) = (_DWORD)v594;
          v593[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v374 + 32))(v374, 80, &v590, 1, &v596, 1, 0);
          v593[1] = v375;
          LODWORD(v594) = 1;
          v586 = v184;
        }
        if ((v277 & 0xFFFFFFFFFFFFFFF9) != 0 && (v277 & 6) == 2)
          return 2;
        if ((_DWORD)v278)
        {
          v377 = sub_1C4825F50(&v581);
          if ((_DWORD)v376 == 1)
          v379 = sub_1C4825F50(&v586);
          if ((_DWORD)v378 == 1)
          if (v377 > v379)
          {
            v380 = *a1;
            *(_QWORD *)&v596 = v581;
            DWORD2(v596) = 0;
            v593[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v380 + 32))(v380, 118, &v596, 1, v593, 1, 0);
            v593[1] = v381;
            LODWORD(v594) = 1;
            v184 = v581;
          }
          v382 = *a1;
          v587 = (void *)v184;
          v588 = 0;
          v383 = sub_1C5544694(v382, (unint64_t *)&v587, v278);
          v590 = (void *)v184;
          LODWORD(v591) = 0;
          v596 = *(_OWORD *)v593;
          LODWORD(v597) = (_DWORD)v594;
          v598 = v383;
          v599 = v384;
          v600 = 1;
          v385 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v382 + 32))(v382, 128, &v590, 1, &v596, 2, 0);
          v386 = *a1;
          LODWORD(v590) = v181;
          LODWORD(v591) = 1;
          *(_QWORD *)&v596 = v385;
          *((_QWORD *)&v596 + 1) = v387;
          LODWORD(v597) = 1;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v386
                                                                                                  + 32))(v386, 119, &v590, 1, &v596, 1, 0);
        }
        else
        {
          v554 = (uint64_t *)*a1;
          LODWORD(v590) = v181;
          LODWORD(v591) = 1;
          v587 = (void *)v581;
          v588 = 0;
          *(_QWORD *)&v596 = sub_1C5546B4C(v554, 118, (unint64_t *)&v587, (int *)v593);
          *((_QWORD *)&v596 + 1) = v555;
          LODWORD(v597) = 1;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v554 + 32))(v554, 119, &v590, 1, &v596, 1, 0);
        }
        v91 = *(_QWORD *)(a2 + 24);
        v92 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v92 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v92 = a2;
            do
              v92 = *(_QWORD *)(v92 + 8);
            while ((*(_WORD *)(v92 + 44) & 8) != 0);
          }
        }
        goto LABEL_362;
      }
      if ((v184 & 1) != 0)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
        v404 = *(_QWORD *)(a2 + 32);
        v405 = v404 + 32;
        v406 = *a1;
        v593[0] = (void *)v6;
        LODWORD(v593[1]) = 0;
        LODWORD(v596) = *(_DWORD *)(v404 + 36);
        LODWORD(v597) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v406 + 32))(v406, 118, v593, 1, &v596, 1, 0);
        llvm::MachineOperand::setReg(v405, *(_DWORD *)(*(_QWORD *)(v407 + 32) + 4));
LABEL_8:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1], a2);
        return 1;
      }
      v5 = 2;
      if ((v184 & 0xFFFFFFFFFFFFFFF9) == 0 || (v184 & 4) == 0)
        return v5;
      v279 = v184 >> 16;
      if ((v184 & 2) != 0)
      {
        if (v277 != (v279 & 0x7FFFFFFFFF8 | 2))
          return 2;
        v280 = 0xFFFF;
      }
      else
      {
        if (v277 != (v184 & 0x8000000000000000 | v279 & 0x7FFFFFFF8 | 1))
          return 2;
        v280 = -1;
      }
      if (v278 % (v280 & (v184 >> 19)))
        return 2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v281 = *(_QWORD *)(a2 + 32);
      v282 = v281 + 32;
      v283 = *a1;
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(v281 + 36);
      LODWORD(v597) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v283 + 32))(v283, 118, v593, 1, &v596, 1, 0);
      llvm::MachineOperand::setReg(v282, *(_DWORD *)(*(_QWORD *)(v284 + 32) + 4));
      v285 = *(_QWORD *)(a2 + 32);
      v287 = sub_1C4825F50(&v581);
      if ((_DWORD)v286 == 1)
      v289 = sub_1C4825F50(&v586);
      if ((_DWORD)v288 == 1)
      *(_QWORD *)(v285 + 80) = v287 / v289 * v278;
      v23 = v581;
      if ((v581 & 0xFFFFFFFFFFFFFFF9) != 0 && (v581 & 4) != 0)
      {
        v290 = 3;
        if ((v581 & 1) == 0)
          v290 = 19;
        v291 = v581 >> v290;
        if ((v581 & 2) != 0)
          v23 = (v581 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v291) | 2;
        else
          v23 = v581 & 0x8000000000000000 | (8 * v291) | 1;
      }
LABEL_182:
      v21 = *(_QWORD *)(a2 + 32);
      v22 = a1;
      goto LABEL_417;
    case 0x4A:
      v587 = (void *)a4;
      if (a3)
        return 2;
      v150 = (*(_DWORD *)(a2 + 40) - 1);
      v151 = *(_QWORD *)(a2 + 32);
      v152 = *(_DWORD *)(v151 + 32 * v150 + 4);
      v153 = (_QWORD *)a1[2];
      if (v152 < 0 && (v152 & 0x7FFFFFFFu) < *((_DWORD *)v153 + 108))
      {
        v581 = *(_QWORD *)(v153[53] + 8 * (v152 & 0x7FFFFFFF));
        if ((v581 & 0xFFFFFFFFFFFFFFF9) != 0 && (v581 & 4) != 0)
          return 2;
      }
      else
      {
        v581 = 0;
      }
      v408 = *(_DWORD *)(v151 + 4);
      if ((v408 & 0x80000000) == 0)
        return 2;
      if ((v408 & 0x7FFFFFFFu) >= *((_DWORD *)v153 + 108))
        return 2;
      v586 = *(_QWORD *)(v153[53] + 8 * (v408 & 0x7FFFFFFF));
      if ((v586 & 1) == 0)
        return 2;
      v478 = sub_1C4825F50((unint64_t *)&v587);
      if ((_DWORD)v477 == 1)
      v480 = sub_1C4825F50(&v581);
      if ((_DWORD)v479 == 1)
      if (v478 >= v480)
      {
        if ((v581 & 0xFFFFFFFFFFFFFFF9) != 0 && (v581 & 6) == 2)
        {
          v525 = *(_QWORD *)(**(_QWORD **)(*a1 + 8) + 40);
          v526 = 35;
          if ((v581 & 4) == 0)
            v526 = 19;
          v527 = *(__int32 **)(v525 + 656);
          v528 = *(unsigned int *)(v525 + 664);
          v529 = wmemchr(v527, (v581 >> v526) & 0xFFFFFF, v528);
          if (v529)
            v530 = v529;
          else
            v530 = &v527[v528];
          if (v528 != v530 - v527)
            return 2;
          v532 = sub_1C4825F50(&v581);
          if ((_DWORD)v531 == 1)
          v581 = (8 * v532) | 1;
          v533 = *a1;
          v593[0] = (void *)v581;
          LODWORD(v593[1]) = 0;
          LODWORD(v596) = v152;
          LODWORD(v597) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v533
                                                                                                  + 32))(v533, 80, v593, 1, &v596, 1, 0);
          v152 = *(_DWORD *)(*(_QWORD *)(v534 + 32) + 4);
        }
        v536 = sub_1C4825F50((unint64_t *)&v587);
        if ((_DWORD)v535 == 1)
        v538 = sub_1C4825F50(&v581);
        if ((_DWORD)v537 == 1)
        if (v536 > v538)
        {
          v581 = (unint64_t)v587;
          v539 = *a1;
          v593[0] = v587;
          LODWORD(v593[1]) = 0;
          LODWORD(v596) = v152;
          LODWORD(v597) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v539
                                                                                                  + 32))(v539, 118, v593, 1, &v596, 1, 0);
          v152 = *(_DWORD *)(*(_QWORD *)(v540 + 32) + 4);
        }
        v542 = sub_1C4825F50(&v586);
        if ((_DWORD)v541 == 1)
        v543 = *a1;
        LODWORD(v593[0]) = v408;
        LODWORD(v593[1]) = 1;
        LODWORD(v596) = v152;
        LODWORD(v597) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v543 + 32))(v543, 119, v593, 1, &v596, 1, 0);
        if ((_DWORD)v150 != 1)
        {
          v544 = v150 - 1;
          v545 = 36;
          v546 = v542;
          do
          {
            v547 = *a1;
            *(_QWORD *)&v596 = v581;
            DWORD2(v596) = 0;
            v548 = sub_1C5544694(v547, (unint64_t *)&v596, v546);
            v549 = *a1;
            v593[0] = (void *)v581;
            LODWORD(v593[1]) = 0;
            LODWORD(v596) = v152;
            LODWORD(v597) = 0;
            v598 = v548;
            v599 = v550;
            v600 = 1;
            v551 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v549 + 32))(v549, 128, v593, 1, &v596, 2, 0);
            v552 = *a1;
            LODWORD(v593[0]) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v545);
            LODWORD(v593[1]) = 1;
            *(_QWORD *)&v596 = v551;
            *((_QWORD *)&v596 + 1) = v553;
            LODWORD(v597) = 1;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v552 + 32))(v552, 119, v593, 1, &v596, 1, 0);
            v545 += 32;
            v546 += v542;
            --v544;
          }
          while (v544);
        }
        v91 = *(_QWORD *)(a2 + 24);
        v92 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v92 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v92 = a2;
            do
              v92 = *(_QWORD *)(v92 + 8);
            while ((*(_WORD *)(v92 + 44) & 8) != 0);
          }
        }
        goto LABEL_362;
      }
      v585 = sub_1C554EF4C(v581, (unint64_t)v587);
      v481 = sub_1C4825F50((unint64_t *)&v585);
      v483 = v482;
      if (v481 != sub_1C4825F50(&v581) || v483 != v484)
      {
        if ((v581 & 0xFFFFFFFFFFFFFFF9) != 0 && (v581 & 6) == 2)
          return 2;
        v485 = *a1;
        v593[0] = (void *)v585;
        LODWORD(v593[1]) = 0;
        LODWORD(v596) = v152;
        LODWORD(v597) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v485 + 32))(v485, 118, v593, 1, &v596, 1, 0);
        v152 = *(_DWORD *)(*(_QWORD *)(v486 + 32) + 4);
      }
      v487 = (uint64_t *)*a1;
      LODWORD(v596) = v152;
      LODWORD(v597) = 0;
      sub_1C5544C30(v487, (uint64_t)v587, (int *)&v596);
      v489 = v488;
      v584 = sub_1C554F3C8((unint64_t)v587, v586);
      v567 = v489;
      v490 = *(_DWORD *)(v489 + 40);
      v492 = sub_1C4825F50(&v586);
      if ((_DWORD)v491 == 1)
      v570 = (v490 - 1);
      v494 = sub_1C4825F50(&v584);
      if ((_DWORD)v493 == 1)
      v495 = v492 / v494;
      if ((_DWORD)v495 == 1)
      {
        v497 = sub_1C4825F50((unint64_t *)&v587);
        if ((_DWORD)v496 == 1)
        v499 = sub_1C4825F50(&v586);
        if ((_DWORD)v498 == 1)
        if (v490 != 1)
        {
          v574 = (v497 / v499);
          v579 = 0;
          v500 = (int)v150;
          v565 = (int)(v497 / v499);
          do
          {
            v501 = (_QWORD *)*a1;
            v503 = sub_1C55437B8((_QWORD *)*a1, 0x4Au);
            v504 = (unint64_t *)v502;
            v505 = (unint64_t *)v501[6];
            v506 = *(_QWORD *)(v501[5] + 40);
            *(_QWORD *)(v502 + 24) = v506;
            v507 = *(_QWORD *)(v506 + 32);
            v508 = *(unsigned int *)(v502 + 40);
            if ((_DWORD)v508)
            {
              v518 = *(_QWORD *)(v502 + 32);
              v519 = *(_QWORD *)(v507 + 40);
              v520 = 32 * v508;
              do
              {
                if (!*(_BYTE *)v518)
                {
                  v521 = *(unsigned int *)(v518 + 4);
                  if ((int)v521 >= 0)
                    v522 = (uint64_t *)(*(_QWORD *)(v519 + 272) + 8 * v521);
                  else
                    v522 = (uint64_t *)(*(_QWORD *)(v519 + 24) + 16 * (v521 & 0x7FFFFFFF) + 8);
                  v523 = *v522;
                  if (*v522)
                  {
                    v524 = *(_QWORD *)(v523 + 16);
                    *(_QWORD *)(v523 + 16) = v518;
                    *(_QWORD *)(v518 + 16) = v524;
                    if ((*(_BYTE *)(v518 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v518 + 24) = v523;
                    }
                    else
                    {
                      *(_QWORD *)(v518 + 24) = 0;
                      v522 = (uint64_t *)(v524 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v518 + 16) = v518;
                    *(_QWORD *)(v518 + 24) = 0;
                  }
                  *v522 = v518;
                }
                v518 += 32;
                v520 -= 32;
              }
              while (v520);
            }
            v509 = *(_QWORD *)(v507 + 728);
            if (v509)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v509 + 24))(v509, v502);
            v510 = *v505 & 0xFFFFFFFFFFFFFFF8;
            *v504 = v510 | *v504 & 7;
            v504[1] = (unint64_t)v505;
            *(_QWORD *)(v510 + 8) = v504;
            *v505 = *v505 & 7 | (unint64_t)v504;
            v511 = v501[7];
            if (v511)
              (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v511 + 24))(v511, v504);
            if (v574)
            {
              v512 = 0;
              v513 = v574;
              v514 = v579 * v565;
              do
              {
                if (v512 + v514 >= v500)
                {
                  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v586, "", 0);
                  *((_QWORD *)&v596 + 1) = 0;
                  v597 = 0;
                  v598 = 0;
                  DWORD1(v596) = GenericVirtualRegister;
                }
                else
                {
                  v515 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * (v512 + v514) + 4);
                  *((_QWORD *)&v596 + 1) = 0;
                  v597 = 0;
                  v598 = 0;
                  DWORD1(v596) = v515;
                }
                LODWORD(v596) = 0x1000000;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v504, v503, (const llvm::MachineOperand *)&v596);
                ++v512;
                --v513;
              }
              while (v513);
            }
            v517 = *(_DWORD *)(*(_QWORD *)(v567 + 32) + 32 * v579 + 4);
            *((_QWORD *)&v596 + 1) = 0;
            LODWORD(v596) = 0;
            DWORD1(v596) = v517;
            v597 = 0;
            v598 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v504, v503, (const llvm::MachineOperand *)&v596);
            ++v579;
          }
          while (v579 != v570);
        }
      }
      else
      {
        *(_QWORD *)&v596 = &v597;
        *((_QWORD *)&v596 + 1) = 0x1000000000;
        if (v490 != 1)
        {
          v556 = 0;
          do
          {
            sub_1C5535000((uint64_t)a1, (uint64_t)&v596, v584, *(_DWORD *)(*(_QWORD *)(v567 + 32) + v556 + 4));
            v556 += 32;
          }
          while (32 * v570 != v556);
        }
        v593[0] = &v594;
        v593[1] = (void *)0x800000000;
        if ((_DWORD)v150)
        {
          for (i = 0; i != v150; ++i)
          {
            if ((int)v495 < 1)
            {
              v561 = 0;
            }
            else
            {
              v558 = 0;
              v559 = v495;
              do
              {
                v560 = v558 + i * (int)v495;
                if (LODWORD(v593[1]) >= HIDWORD(v593[1]))
                {
                  sub_1C6272EB8(v593, *(_DWORD *)(v596 + 4 * v560));
                }
                else
                {
                  *((_DWORD *)v593[0] + LODWORD(v593[1])) = *(_DWORD *)(v596 + 4 * v560);
                  ++LODWORD(v593[1]);
                }
                ++v558;
                --v559;
              }
              while (v559);
              v561 = LODWORD(v593[1]);
            }
            v562 = *a1;
            LODWORD(v590) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * i + 4);
            LODWORD(v591) = 1;
            sub_1C5544D6C(v562, (uint64_t)&v590, (int *)v593[0], v561);
            LODWORD(v593[1]) = 0;
          }
          if (v593[0] != &v594)
            free(v593[0]);
        }
        if ((uint64_t *)v596 != &v597)
          free((void *)v596);
      }
      v91 = *(_QWORD *)(a2 + 24);
      v92 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v92 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v92 = a2;
          do
            v92 = *(_QWORD *)(v92 + 8);
          while ((*(_WORD *)(v92 + 44) & 8) != 0);
        }
      }
      goto LABEL_362;
    case 0x4B:
      return sub_1C6271E18((uint64_t)a1, a2, a3, a4);
    case 0x4C:
      v586 = a4;
      if (a3 != 1)
        return 2;
      v176 = *(_QWORD *)(a2 + 32);
      v177 = (_QWORD *)a1[2];
      v572 = *(_DWORD *)(v176 + 4);
      if (v572 < 0 && (v178 = v572 & 0x7FFFFFFF, v178 < *((_DWORD *)v177 + 108)))
      {
        v585 = *(_QWORD *)(v177[53] + 8 * v178);
        if ((v585 & 0xFFFFFFFFFFFFFFF9) != 0 && (v585 & 4) != 0)
          return 2;
      }
      else
      {
        v585 = 0;
      }
      v364 = *(_DWORD *)(v176 + 36);
      if (v364 < 0 && (v364 & 0x7FFFFFFFu) < *((_DWORD *)v177 + 108))
        v365 = *(_QWORD *)(v177[53] + 8 * (v364 & 0x7FFFFFFF));
      else
        v365 = 0;
      v584 = v365;
      v390 = sub_1C4825F50((unint64_t *)&v585);
      if ((_DWORD)v389 == 1)
      v577 = sub_1C4825F50(&v584);
      if ((_DWORD)v391 == 1)
      v393 = sub_1C4825F50(&v586);
      if ((_DWORD)v392 == 1)
      v394 = *(_DWORD *)(a2 + 40);
      v396 = sub_1C4825F50((unint64_t *)&v585);
      if ((_DWORD)v395 == 1)
      if (v393 < v390)
      {
        v397 = (v390 + v393 - 1) / v393;
        v398 = v577;
        v399 = v393;
        do
        {
          v400 = v399;
          v399 = v398 % v399;
          v398 = v400;
        }
        while (v399);
        *(_QWORD *)&v596 = &v597;
        *((_QWORD *)&v596 + 1) = 0x800000000;
        v593[0] = &v594;
        v593[1] = (void *)0x800000000;
        v590 = v592;
        v591 = 0x800000000;
        v401 = (v397 * v393);
        v583 = (void *)((8 * v401) | 1);
        v402 = *(unsigned int *)(a2 + 40);
        if ((_DWORD)v402 == 1)
        {
          v403 = 0;
        }
        else
        {
          v421 = *(_QWORD *)(a2 + 32);
          v422 = v421 + 32 * v402;
          v423 = v421 + 32;
          v564 = v393;
          v566 = v422;
          do
          {
            v424 = *(_DWORD *)(v421 + 36);
            v421 = v423;
            if (v400 == v577)
            {
              v425 = v591;
              if (v591 >= (unint64_t)HIDWORD(v591))
              {
                v435 = v422;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v590, (uint64_t)v592, v591 + 1, 4);
                v422 = v435;
                v425 = v591;
              }
              *((_DWORD *)v590 + v425) = v424;
              LODWORD(v591) = v591 + 1;
            }
            else
            {
              v426 = (uint64_t *)*a1;
              LODWORD(v587) = v424;
              v589 = 0;
              sub_1C5544C30(v426, (8 * v400) | 1, (int *)&v587);
              v422 = v566;
              v428 = *(_DWORD *)(v427 + 40);
              v429 = v428 - 1;
              if (v428 != 1)
              {
                v430 = v427;
                v431 = 0;
                v432 = v591;
                v433 = 32 * v429;
                do
                {
                  v434 = *(_DWORD *)(*(_QWORD *)(v430 + 32) + v431 + 4);
                  if (v432 >= HIDWORD(v591))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v590, (uint64_t)v592, v432 + 1, 4);
                    v422 = v566;
                    v432 = v591;
                  }
                  *((_DWORD *)v590 + v432) = v434;
                  v432 = v591 + 1;
                  LODWORD(v591) = v591 + 1;
                  v431 += 32;
                }
                while (v433 != v431);
              }
            }
            v423 = v421 + 32;
          }
          while (v421 + 32 != v422);
          v403 = v591;
          v393 = v564;
        }
        if ((_DWORD)v401 != v403)
        {
          v454 = *a1;
          v587 = (void *)((8 * v400) | 1);
          v588 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v454 + 32))(v454, 68, &v587, 1, 0, 0, 0);
          v456 = v401 - v591;
          if ((_DWORD)v401 != (_DWORD)v591)
          {
            v476 = *(_DWORD *)(*(_QWORD *)(v455 + 32) + 4);
            LODWORD(v401) = v591;
            do
            {
              if (v401 >= HIDWORD(v591))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v590, (uint64_t)v592, v401 + 1, 4);
                LODWORD(v401) = v591;
              }
              *((_DWORD *)v590 + v401) = v476;
              LODWORD(v401) = v591 + 1;
              LODWORD(v591) = v591 + 1;
              --v456;
            }
            while (v456);
          }
        }
        if (v397)
        {
          v457 = v401;
          v458 = (int *)v590;
          v459 = v393 / v400;
          do
          {
            v460 = *a1;
            v587 = (void *)v586;
            v588 = 0;
            v461 = v457 - v459;
            if (v457 >= v459)
              v462 = v393 / v400;
            else
              v462 = v457;
            sub_1C5544D6C(v460, (uint64_t)&v587, v458, v462);
            v464 = *(_DWORD *)(*(_QWORD *)(v463 + 32) + 4);
            v465 = LODWORD(v593[1]);
            if (LODWORD(v593[1]) >= (unint64_t)HIDWORD(v593[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v593, (uint64_t)&v594, LODWORD(v593[1]) + 1, 4);
              v465 = LODWORD(v593[1]);
            }
            *((_DWORD *)v593[0] + v465) = v464;
            ++LODWORD(v593[1]);
            v458 += v459;
            v457 = v461;
            --v397;
          }
          while (v397);
        }
        v466 = sub_1C4825F50((unint64_t *)&v585);
        v468 = v467;
        v470 = sub_1C4825F50((unint64_t *)&v583);
        v471 = *a1;
        if (v466 == v470 && v468 == v469)
        {
          LODWORD(v587) = v572;
          v588 = 1;
          sub_1C5544D6C(v471, (uint64_t)&v587, (int *)v593[0], LODWORD(v593[1]));
        }
        else
        {
          v587 = v583;
          v588 = 0;
          sub_1C5544D6C(v471, (uint64_t)&v587, (int *)v593[0], LODWORD(v593[1]));
          v472 = *a1;
          LODWORD(v581) = v572;
          v582 = 1;
          LODWORD(v587) = *(_DWORD *)(*(_QWORD *)(v473 + 32) + 4);
          v589 = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v472 + 32))(v472, 119, &v581, 1, &v587, 1, 0);
        }
        v474 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v474 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v474 = a2;
            do
              v474 = *(_QWORD *)(v474 + 8);
            while ((*(_WORD *)(v474 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v474 + 8));
        if (v590 != v592)
          free(v590);
        if (v593[0] != &v594)
          free(v593[0]);
        if ((uint64_t *)v596 != &v597)
          free((void *)v596);
        return 1;
      }
      v578 = v390;
      v563 = v393;
      v417 = *a1;
      v593[0] = (void *)v586;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = v364;
      LODWORD(v597) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v417 + 32))(v417, 126, v593, 1, &v596, 1, 0);
      v419 = *(_DWORD *)(*(_QWORD *)(v418 + 32) + 4);
      if (v394 == 2)
      {
        v420 = *(_DWORD *)(*(_QWORD *)(v418 + 32) + 4);
      }
      else
      {
        v436 = (v394 - 1);
        v437 = -v394;
        v438 = 2;
        v439 = v396 / v436;
        do
        {
          v440 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v438 + 4);
          v441 = *a1;
          v593[0] = (void *)v586;
          LODWORD(v593[1]) = 0;
          LODWORD(v596) = v440;
          LODWORD(v597) = 0;
          v442 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v441 + 32))(v441, 126, v593, 1, &v596, 1, 0);
          v444 = v443;
          v445 = v586;
          if (v437 + v438 == -1 && v586 == v585)
          {
            v420 = v572;
          }
          else
          {
            v420 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v586, "", 0);
            v445 = v586;
          }
          v446 = *a1;
          v447 = (v438++ - 1) * v439;
          *(_QWORD *)&v596 = v445;
          DWORD2(v596) = 0;
          v448 = sub_1C5544694(v446, (unint64_t *)&v596, v447);
          v449 = *a1;
          v593[0] = (void *)v586;
          LODWORD(v593[1]) = 0;
          *(_QWORD *)&v596 = v442;
          *((_QWORD *)&v596 + 1) = v444;
          LODWORD(v597) = 1;
          v598 = v448;
          v599 = v450;
          v600 = 1;
          v451 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v449 + 32))(v449, 127, v593, 1, &v596, 2, 0);
          v452 = *a1;
          LODWORD(v593[0]) = v420;
          LODWORD(v593[1]) = 1;
          LODWORD(v596) = v419;
          LODWORD(v597) = 0;
          v598 = v451;
          v599 = v453;
          v600 = 1;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v452
                                                                                                  + 32))(v452, 66, v593, 1, &v596, 2, 0);
          v419 = v420;
        }
        while (v437 + v438);
      }
      if (v563 > v578 || (v585 & 0xFFFFFFFFFFFFFFF9) != 0 && (v585 & 6) == 2)
      {
        v475 = *a1;
        LODWORD(v593[0]) = v572;
        LODWORD(v593[1]) = 1;
        LODWORD(v596) = v420;
        LODWORD(v597) = 0;
        (*(void (**)(void))(*(_QWORD *)v475 + 32))();
      }
      v91 = *(_QWORD *)(a2 + 24);
      v92 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v92 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v92 = a2;
          do
            v92 = *(_QWORD *)(v92 + 8);
          while ((*(_WORD *)(v92 + 44) & 8) != 0);
        }
      }
      goto LABEL_362;
    case 0x4D:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if (a3 != 1)
      {
        v185 = 3;
        if ((v6 & 1) == 0)
          v185 = 19;
        v186 = v6 & 0x8000000000000000 | (8 * (v6 >> v185)) | 1;
        v187 = 35;
        v188 = 19;
        if ((v6 & 4) == 0)
          v187 = 19;
        v189 = v6 >> v187;
        if ((v6 & 4) == 0)
          v188 = 3;
        if ((v6 & 1) != 0)
          v188 = 3;
        v190 = (8 * (unsigned __int16)(v6 >> v188)) & 0xFFFFF8000007FFFFLL | ((v189 & 0xFFFFFF) << 19);
        if ((v6 & 2) != 0)
          v6 = v190 | 2;
        else
          v6 = v186;
      }
      v191 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v191 != 1)
      {
        v192 = v191 - 1;
        v193 = 36;
        do
        {
          v194 = (_DWORD *)(*(_QWORD *)(a2 + 32) + v193);
          v195 = *a1;
          v593[0] = (void *)v6;
          LODWORD(v593[1]) = 0;
          LODWORD(v596) = *v194;
          LODWORD(v597) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v195
                                                                                                  + 32))(v195, 118, v593, 1, &v596, 1, 0);
          llvm::MachineOperand::setReg((uint64_t)(v194 - 1), *(_DWORD *)(*(_QWORD *)(v196 + 32) + 4));
          v193 += 32;
          --v192;
        }
        while (v192);
      }
      if (a3 != 1)
        goto LABEL_181;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 8) + 3744;
      goto LABEL_419;
    case 0x50:
      if (!a3)
        goto LABEL_132;
      return 2;
    case 0x51:
      if (a3 != 1)
        return 2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v117 = *a1;
      v118 = *(_QWORD *)(a2 + 32);
      v5 = 1;
      v119 = v6;
      v120 = 1;
      v121 = 126;
LABEL_110:
      sub_1C553674C(v117, v118, v119, v120, v121);
      goto LABEL_152;
    case 0x53:
      goto LABEL_68;
    case 0x55:
    case 0x56:
    case 0x58:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB8:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xD6:
    case 0xD7:
    case 0xD8:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v14 = *(_DWORD *)(a2 + 40);
      v15 = v14 - 1;
      if (v14 != 1)
      {
        v16 = 36;
        do
        {
          v17 = *(_QWORD *)(a2 + 32);
          v18 = *a1;
          v593[0] = v580;
          LODWORD(v593[1]) = 0;
          v19 = v17 + v16 - 4;
          LODWORD(v596) = *(_DWORD *)(v17 + v16);
          LODWORD(v597) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 178, v593, 1, &v596, 1, 0);
          llvm::MachineOperand::setReg(v19, *(_DWORD *)(*(_QWORD *)(v20 + 32) + 4));
          v16 += 32;
          --v15;
        }
        while (v15);
        v6 = (unint64_t)v580;
      }
      goto LABEL_6;
    case 0x60:
      if (a3)
        return 2;
      v197 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if ((v197 & 0x80000000) == 0)
        return 2;
      v198 = (_QWORD *)a1[2];
      v199 = v197 & 0x7FFFFFFF;
      if (v199 >= *((_DWORD *)v198 + 108))
        return 2;
      v200 = *(_QWORD *)(v198[53] + 8 * v199);
      if ((v200 & 1) == 0)
        return 2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if ((v200 & 0x7FFFFFFF8) == 8)
        v116 = 126;
      else
        v116 = 118;
LABEL_82:
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      v95 = v6;
      v96 = 0;
      goto LABEL_438;
    case 0x62:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if (a3)
        goto LABEL_149;
      sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v6, 3u, 118);
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      v97 = v6;
      v99 = 4;
      goto LABEL_414;
    case 0x63:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      goto LABEL_194;
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v25 + 64;
      v27 = *a1;
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(v25 + 68);
      LODWORD(v597) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 118, v593, 1, &v596, 1, 0);
      llvm::MachineOperand::setReg(v26, *(_DWORD *)(*(_QWORD *)(v28 + 32) + 4));
      sub_1C55367EC(a1, *(_QWORD *)(a2 + 32), (uint64_t)v580, 0, 119);
      goto LABEL_8;
    case 0x72:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v122 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 16);
      v123 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 120))(v122) + 52);
      if (v123 == 1)
        v124 = 126;
      else
        v124 = 118;
      if (v123 == 2)
        v116 = 124;
      else
        v116 = v124;
      goto LABEL_82;
    case 0x78:
      v168 = *(_QWORD *)(a2 + 32);
      v169 = ****(llvm::ConstantInt *****)(*a1 + 8);
      v170 = (_QWORD *)a1[3];
      v171 = *(_DWORD *)(v168 + 4);
      if (v171 < 0 && (v172 = (_QWORD *)a1[2], v173 = v171 & 0x7FFFFFFF, v173 < *((_DWORD *)v172 + 108)))
        v174 = *(_QWORD *)(v172[53] + 8 * v173);
      else
        v174 = 0;
      v273 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v170 + 32))(v170, v174);
      v274 = (llvm::APInt *)(*(_QWORD *)(v168 + 48) + 24);
      v276 = sub_1C4825F50((unint64_t *)&v580);
      if (v273 == 124)
      {
        if (v275 == 1)
        llvm::APInt::sext(v274, v276, (llvm::APInt *)&v596);
      }
      else
      {
        if (v275 == 1)
        llvm::APInt::zext(v274, v276, (uint64_t)&v596);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      *(_QWORD *)(v168 + 48) = llvm::ConstantInt::get(v169, (llvm::LLVMContext *)&v596, v352);
      sub_1C55367EC(a1, *(_QWORD *)(a2 + 32), (uint64_t)v580, 0, 119);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1], a2);
      goto LABEL_367;
    case 0x79:
      v205 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
      v207 = *(void **)(v205 + 32);
      v206 = (llvm::detail::DoubleAPFloat *)(v205 + 32);
      if (v207 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v206, (unsigned int *)&v596);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v206, (unsigned int *)&v596);
      v209 = *a1;
      *(_QWORD *)(v209 + 40) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(v209 + 48) = a2;
      v210 = (unsigned __int8 **)(a2 + 56);
      v211 = (unsigned __int8 **)(v209 + 32);
      if (a2 + 56 != v209 + 32)
      {
        if (*v211)
          llvm::MetadataTracking::untrack(v209 + 32, *v211);
        v212 = *v210;
        *v211 = *v210;
        if (v212)
          llvm::MetadataTracking::track((uint64_t)v211, v212, 2);
      }
      v213 = (llvm::ConstantInt *****)*a1;
      LODWORD(v593[0]) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      LODWORD(v593[1]) = 1;
      v214 = llvm::ConstantInt::get(***v213[1], (llvm::LLVMContext *)&v596, v208);
      ((void (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v213)[2])(v213, v593, v214);
      sub_1C55367EC(a1, *(_QWORD *)(v215 + 32), (uint64_t)v580, 0, 119);
      v216 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v216 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v216 = a2;
          do
            v216 = *(_QWORD *)(v216 + 8);
          while ((*(_WORD *)(v216 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v216 + 8));
LABEL_367:
      if (DWORD2(v596) >= 0x41 && (_QWORD)v596)
        MEMORY[0x1CAA32F9C](v596, 0x1000C8000313F17);
      return 1;
    case 0x7D:
      if (a3)
        return 2;
LABEL_68:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v112 = *a1;
      v113 = *(_QWORD *)(a2 + 32);
      v5 = 1;
      v114 = v6;
      v115 = 118;
      goto LABEL_125;
    case 0x7F:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      if (a3)
        goto LABEL_200;
      v97 = v6;
      goto LABEL_413;
    case 0x80:
    case 0x81:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if (a3)
        goto LABEL_198;
      if (**(_WORD **)(a2 + 16) == 129)
        v98 = 124;
      else
        v98 = 126;
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      v97 = v6;
      v99 = 1;
      goto LABEL_415;
    case 0x86:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if (!a3)
        goto LABEL_416;
      v163 = *(_QWORD *)(a2 + 32);
      if ((*(_DWORD *)(v163 + 48) - 38) >= 4)
        v164 = 126;
      else
        v164 = 124;
      goto LABEL_140;
    case 0x87:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if (!a3)
        goto LABEL_416;
      sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v6, 2u, 178);
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      v95 = v6;
      v96 = 3;
      goto LABEL_72;
    case 0x88:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if (!a3)
      {
LABEL_194:
        sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v6, 2u, 118);
        v93 = *a1;
        v94 = *(_QWORD *)(a2 + 32);
        v97 = v6;
        v99 = 3;
        goto LABEL_414;
      }
      v201 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
      if (v201 < 0 && (v202 = (_QWORD *)a1[2], v203 = v201 & 0x7FFFFFFF, v203 < *((_DWORD *)v202 + 108)))
        v204 = *(_QWORD *)(v202[53] + 8 * v203);
      else
        v204 = 0;
      v322 = (v204 & 0xFFFFFFFFFFFFFFF9) != 0;
      v323 = (v204 >> 2) & 1;
      v324 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 16);
      v325 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v324 + 120))(v324);
      v326 = 52;
      if ((v322 & v323) != 0)
        v326 = 60;
      v327 = *(_DWORD *)(v325 + v326);
      if (v327 == 1)
        v328 = 126;
      else
        v328 = 118;
      if (v327 == 2)
        v116 = 124;
      else
        v116 = v328;
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      v95 = v6;
      v96 = 1;
      goto LABEL_438;
    case 0x89:
      v10 = 0;
      goto LABEL_220;
    case 0x8A:
      v13 = 0;
      v10 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 132);
      v11 = 138;
      goto LABEL_220;
    case 0x8B:
      v10 = 0;
      v11 = 46;
      goto LABEL_220;
    case 0x8C:
      v13 = 0;
      v10 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 132);
      v11 = 140;
LABEL_220:
      v12 = 126;
      goto LABEL_221;
    case 0x8D:
      goto LABEL_221;
    case 0x8E:
      v13 = 0;
      v10 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 132);
      v11 = 138;
      goto LABEL_221;
    case 0x8F:
      v10 = 0;
      v11 = 46;
      goto LABEL_221;
    case 0x90:
      v13 = 0;
      v10 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 132);
      v11 = 140;
LABEL_221:
      v217 = (_QWORD *)*a1;
      if (a3 == 1)
      {
        v218 = (a4 & 0xFFFFFFFFFFFFFFF9) != 0;
        v219 = (a4 >> 2) & 1;
        v220 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v217[1] + 16) + 120))(*(_QWORD *)(v217[1] + 16));
        v221 = 52;
        if ((v218 & v219) != 0)
          v221 = 60;
        v222 = *(_DWORD *)(v220 + v221);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
        sub_1C55367EC(a1, *(_QWORD *)(a2 + 32), v6, 1u, 119);
        if ((v13 & 1) == 0)
        {
          if (v222 == 1)
            v223 = 126;
          else
            v223 = 118;
          if (v222 == 2)
            v224 = 124;
          else
            v224 = v223;
          v225 = *(_QWORD *)(a2 + 32);
          v226 = v225 + 128;
          v227 = *a1;
          v593[0] = (void *)v6;
          LODWORD(v593[1]) = 0;
          LODWORD(v596) = *(_DWORD *)(v225 + 132);
          LODWORD(v597) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v227
                                                                                                  + 32))(v227, v224, v593, 1, &v596, 1, 0);
          llvm::MachineOperand::setReg(v226, *(_DWORD *)(*(_QWORD *)(v228 + 32) + 4));
        }
        goto LABEL_419;
      }
      v593[0] = (void *)a4;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
      LODWORD(v597) = 0;
      v229 = (*(uint64_t (**)(_QWORD *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v217 + 32))(v217, v12, v593, 1, &v596, 1, 0);
      v231 = v230;
      v232 = *a1;
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 100);
      LODWORD(v597) = 0;
      v233 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v232 + 32))(v232, v12, v593, 1, &v596, 1, 0);
      if ((v13 & 1) != 0)
      {
        v235 = *a1;
        v593[0] = (void *)v6;
        LODWORD(v593[1]) = 0;
        *(_QWORD *)&v596 = v229;
        *((_QWORD *)&v596 + 1) = v231;
        LODWORD(v597) = 1;
        v598 = v233;
        v599 = v234;
        v600 = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v235 + 32))(v235, v11, v593, 1, &v596, 2, 0);
      }
      else
      {
        v237 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
        if (v237 < 0
          && (v238 = (_QWORD *)a1[2], v239 = v237 & 0x7FFFFFFF, v239 < *((_DWORD *)v238 + 108)))
        {
          v240 = *(void **)(v238[53] + 8 * v239);
        }
        else
        {
          v240 = 0;
        }
        v241 = *a1;
        v593[0] = (void *)v6;
        LODWORD(v593[1]) = 0;
        v594 = v240;
        v595 = 0;
        *(_QWORD *)&v596 = v229;
        *((_QWORD *)&v596 + 1) = v231;
        LODWORD(v597) = 1;
        v598 = v233;
        v599 = v234;
        v600 = 1;
        LODWORD(v601) = v10;
        v603 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v241 + 32))(v241, v11, v593, 2, &v596, 3, 0);
      }
      v242 = *(_DWORD *)(*(_QWORD *)(v236 + 32) + 4);
      v243 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v243 < 0 && (v244 = (_QWORD *)a1[2], v245 = v243 & 0x7FFFFFFF, v245 < *((_DWORD *)v244 + 108)))
        v246 = *(void **)(v244[53] + 8 * v245);
      else
        v246 = 0;
      v247 = *a1;
      v593[0] = v246;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = v242;
      LODWORD(v597) = 0;
      v248 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v247 + 32))(v247, 119, v593, 1, &v596, 1, 0);
      v249 = *a1;
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      *(_QWORD *)&v596 = v248;
      *((_QWORD *)&v596 + 1) = v250;
      LODWORD(v597) = 1;
      v251 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v249 + 32))(v249, v12, v593, 1, &v596, 1, 0);
      v252 = *a1;
      LODWORD(v593[0]) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
      LODWORD(v593[1]) = 1;
      LODWORD(v596) = 33;
      LODWORD(v597) = 2;
      LODWORD(v598) = v242;
      v600 = 0;
      v601 = v251;
      v602 = v253;
      v603 = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v252 + 32))(v252, 134, v593, 1, &v596, 3, 0);
      v254 = *a1;
      LODWORD(v593[0]) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      LODWORD(v593[1]) = 1;
      LODWORD(v596) = v242;
      LODWORD(v597) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v254 + 32))(v254, 119, v593, 1, &v596, 1, 0);
      v91 = *(_QWORD *)(a2 + 24);
      v92 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v92 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v92 = a2;
          do
            v92 = *(_QWORD *)(v92 + 8);
          while ((*(_WORD *)(v92 + 44) & 8) != 0);
        }
      }
      goto LABEL_362;
    case 0x91:
    case 0x92:
      if (a3 != 1)
      {
        v100 = *(_DWORD **)(a2 + 32);
        v101 = v100[9];
        v102 = v100[17];
        v103 = (_QWORD *)a1[2];
        if (v102 < 0 && (v102 & 0x7FFFFFFFu) < *((_DWORD *)v103 + 108))
          v104 = *(_QWORD *)(v103[53] + 8 * (v102 & 0x7FFFFFFF));
        else
          v104 = 0;
        if (v101 < 0 && (v101 & 0x7FFFFFFFu) < *((_DWORD *)v103 + 108))
          v262 = *(void **)(v103[53] + 8 * (v101 & 0x7FFFFFFF));
        else
          v262 = 0;
        v263 = v100[25];
        v576 = v100[9];
        v569 = v100[1];
        if ((v104 & 1) != 0)
        {
          v264 = (v104 >> 3);
        }
        else if ((v104 & 4) != 0)
        {
          if ((v104 & 2) != 0)
            v264 = (unsigned __int16)(v104 >> 19);
          else
            v264 = (v104 >> 19);
        }
        else
        {
          v264 = (unsigned __int16)(v104 >> 3);
        }
        v573 = v264;
        if (v4 == 146)
          v329 = 124;
        else
          v329 = 126;
        v330 = *a1;
        v593[0] = (void *)a4;
        LODWORD(v593[1]) = 0;
        LODWORD(v596) = v102;
        LODWORD(v597) = 0;
        v331 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v330 + 32))(v330, v329, v593, 1, &v596, 1, 0);
        v333 = v332;
        v334 = *a1;
        v593[0] = (void *)v6;
        LODWORD(v593[1]) = 0;
        LODWORD(v596) = v263;
        LODWORD(v597) = 0;
        v335 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v334 + 32))(v334, v329, v593, 1, &v596, 1, 0);
        v336 = *a1;
        v337 = **(unsigned __int16 **)(a2 + 16);
        v593[0] = (void *)v6;
        LODWORD(v593[1]) = 0;
        v594 = v262;
        v595 = 0;
        *(_QWORD *)&v596 = v331;
        *((_QWORD *)&v596 + 1) = v333;
        LODWORD(v597) = 1;
        v598 = v335;
        v599 = v338;
        v600 = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v336 + 32))(v336, v337, v593, 2, &v596, 2, 0);
        v340 = v339;
        v341 = *(_DWORD *)(*(_QWORD *)(v339 + 32) + 4);
        v342 = *a1;
        LODWORD(v593[0]) = v569;
        LODWORD(v593[1]) = 1;
        LODWORD(v596) = v341;
        LODWORD(v597) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v342 + 32))(v342, 119, v593, 1, &v596, 1, 0);
        v343 = *a1;
        v593[0] = (void *)v6;
        LODWORD(v593[1]) = 0;
        LODWORD(v596) = v341;
        LODWORD(v597) = 0;
        if (v4 == 146)
        {
          v598 = v573;
          v600 = 3;
          v344 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v343 + 32))(v343, 125, v593, 1, &v596, 2, 0);
        }
        else
        {
          v344 = sub_1C5546D24(v343, (unint64_t *)v593, &v596, v573);
        }
        if ((v6 & 1) != 0)
        {
          v346 = v6 >> 3;
        }
        else if ((v6 & 4) != 0)
        {
          if ((v6 & 2) != 0)
            v346 = (unsigned __int16)(v6 >> 19);
          else
            v346 = v6 >> 19;
        }
        else
        {
          v346 = (unsigned __int16)(v6 >> 3);
        }
        v347 = *a1;
        if (v346 >= 2 * (int)v573)
        {
          LODWORD(v593[0]) = v576;
          LODWORD(v593[1]) = 1;
          LODWORD(v596) = 33;
          LODWORD(v597) = 2;
          LODWORD(v598) = v341;
          v600 = 0;
          v601 = v344;
          v602 = v345;
          v603 = 1;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v347
                                                                                                  + 32))(v347, 134, v593, 1, &v596, 3, 0);
        }
        else
        {
          v593[0] = v262;
          LODWORD(v593[1]) = 0;
          LODWORD(v596) = 33;
          LODWORD(v597) = 2;
          LODWORD(v598) = v341;
          v600 = 0;
          v601 = v344;
          v602 = v345;
          v603 = 1;
          v348 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v347 + 32))(v347, 134, v593, 1, &v596, 3, 0);
          v349 = *a1;
          v350 = *(_DWORD *)(*(_QWORD *)(v340 + 32) + 36);
          LODWORD(v593[0]) = v576;
          LODWORD(v593[1]) = 1;
          LODWORD(v596) = v350;
          LODWORD(v597) = 0;
          v598 = v348;
          v599 = v351;
          v600 = 1;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v349
                                                                                                  + 32))(v349, 66, v593, 1, &v596, 2, 0);
        }
        v91 = *(_QWORD *)(a2 + 24);
        v92 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v92 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v92 = a2;
            do
              v92 = *(_QWORD *)(v92 + 8);
            while ((*(_WORD *)(v92 + 44) & 8) != 0);
          }
        }
        goto LABEL_362;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
LABEL_149:
      v159 = *(_QWORD *)(a2 + 32);
      v5 = 1;
      v160 = a1;
      v161 = v6;
      v162 = 1;
      goto LABEL_150;
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
      v58 = *(_QWORD *)(a2 + 32);
      v59 = *(_DWORD *)(v58 + 4);
      if ((a4 & 1) != 0)
      {
        v60 = a4 >> 3;
      }
      else if ((a4 & 4) != 0)
      {
        if ((a4 & 2) != 0)
          v60 = (unsigned __int16)(a4 >> 19);
        else
          v60 = a4 >> 19;
      }
      else
      {
        v60 = (unsigned __int16)(a4 >> 3);
      }
      v575 = *(_DWORD *)(v58 + 4);
      if ((v59 & 0x80000000) == 0 || (v61 = (_QWORD *)a1[2], (v59 & 0x7FFFFFFFu) >= *((_DWORD *)v61 + 108)))
      {
        v62 = 0;
        goto LABEL_32;
      }
      v62 = *(_QWORD *)(v61[53] + 8 * (v59 & 0x7FFFFFFF));
      if ((v62 & 1) != 0)
      {
        v63 = v62 >> 3;
        goto LABEL_33;
      }
      if ((v62 & 4) == 0)
      {
LABEL_32:
        v63 = (unsigned __int16)(v62 >> 3);
        goto LABEL_33;
      }
      if ((v62 & 2) != 0)
        v63 = (unsigned __int16)(v62 >> 19);
      else
        v63 = v62 >> 19;
LABEL_33:
      v64 = v60 - v63;
      v65 = *a1;
      v593[0] = (void *)a4;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(v58 + 36);
      LODWORD(v597) = 0;
      v568 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 118, v593, 1, &v596, 1, 0);
      v67 = v66;
      v68 = *a1;
      v571 = v4 - 153;
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
      if ((v4 - 153) > 1)
        v69 = 118;
      else
        v69 = 126;
      LODWORD(v597) = 0;
      v70 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v68 + 32))(v68, v69, v593, 1);
      v72 = v71;
      v73 = *a1;
      *(_QWORD *)&v596 = v6;
      DWORD2(v596) = 0;
      v74 = sub_1C5544694(v73, (unint64_t *)&v596, v64);
      v76 = v75;
      v77 = *a1;
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      *(_QWORD *)&v596 = v568;
      *((_QWORD *)&v596 + 1) = v67;
      LODWORD(v597) = 1;
      v598 = v74;
      v599 = v75;
      v600 = 1;
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 127, v593, 1, &v596, 2, 0);
      v80 = v79;
      if (v571 >= 2)
      {
        v81 = *a1;
        v593[0] = (void *)v6;
        LODWORD(v593[1]) = 0;
        *(_QWORD *)&v596 = v70;
        *((_QWORD *)&v596 + 1) = v72;
        LODWORD(v597) = 1;
        v598 = v74;
        v599 = v76;
        v600 = 1;
        v70 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 127, v593, 1, &v596, 2, 0);
        v72 = v82;
      }
      v83 = *a1;
      v84 = **(unsigned __int16 **)(a2 + 16);
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      *(_QWORD *)&v596 = v78;
      *((_QWORD *)&v596 + 1) = v80;
      LODWORD(v597) = 1;
      v598 = v70;
      v599 = v72;
      v600 = 1;
      v85 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v83 + 32))(v83, v84, v593, 1, &v596, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
      v86 = *a1;
      v593[0] = (void *)v6;
      LODWORD(v593[1]) = 0;
      *(_QWORD *)&v596 = v85;
      *((_QWORD *)&v596 + 1) = v87;
      LODWORD(v597) = 1;
      v598 = v74;
      v599 = v76;
      v600 = 1;
      v88 = (*(uint64_t (**)(void))(*(_QWORD *)v86 + 32))();
      v89 = *a1;
      LODWORD(v593[0]) = v575;
      LODWORD(v593[1]) = 1;
      *(_QWORD *)&v596 = v88;
      *((_QWORD *)&v596 + 1) = v90;
      LODWORD(v597) = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 119, v593, 1, &v596, 1, 0);
      v91 = *(_QWORD *)(a2 + 24);
      v92 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v92 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v92 = a2;
          do
            v92 = *(_QWORD *)(v92 + 8);
          while ((*(_WORD *)(v92 + 44) & 8) != 0);
        }
      }
LABEL_362:
      sub_1C487FE80(v91 + 40, a2, *(_QWORD *)(v92 + 8));
      return 1;
    case 0xAB:
      if (a3)
        return 2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v141 = *a1;
      v142 = *(_QWORD *)(a2 + 32);
      v5 = 1;
      v143 = v6;
      v144 = 1;
LABEL_214:
      sub_1C553674C(v141, v142, v143, v144, 178);
      v159 = *(_QWORD *)(a2 + 32);
      v160 = a1;
      v161 = v6;
      v162 = 0;
      v175 = 179;
      goto LABEL_151;
    case 0xB4:
    case 0xB5:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if (!a3)
        goto LABEL_416;
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      v95 = v6;
      v96 = 1;
LABEL_72:
      v116 = 178;
      goto LABEL_438;
    case 0xB6:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if (!a3)
        goto LABEL_6;
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      v95 = v6;
      v96 = 1;
      goto LABEL_437;
    case 0xB7:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      if (!a3)
      {
LABEL_6:
        v21 = *(_QWORD *)(a2 + 32);
        v22 = a1;
        v23 = v6;
        v24 = 179;
        goto LABEL_418;
      }
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      v95 = v6;
      v96 = 1;
      goto LABEL_218;
    case 0xC1:
      goto LABEL_256;
    case 0xC2:
      if (a3 != 1)
        return 2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
LABEL_198:
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
LABEL_200:
      v95 = v6;
      v96 = 2;
      goto LABEL_218;
    case 0xC7:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v112 = *a1;
      v113 = *(_QWORD *)(a2 + 32);
      v5 = 1;
      v114 = v6;
      v115 = 124;
LABEL_125:
      sub_1C553674C(v112, v113, v114, 1u, v115);
      v159 = *(_QWORD *)(a2 + 32);
      v160 = a1;
      v161 = v6;
      goto LABEL_126;
    case 0xCC:
      if (a3 == 2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
        v93 = *a1;
        v94 = *(_QWORD *)(a2 + 32);
        v95 = v6;
        v96 = 3;
        goto LABEL_437;
      }
      if (a3 != 1)
        return 2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v155 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
      if (v155 < 0 && (v156 = (_QWORD *)a1[2], v157 = v155 & 0x7FFFFFFF, v157 < *((_DWORD *)v156 + 108)))
        v158 = *(_QWORD *)(v156[53] + 8 * v157);
      else
        v158 = 0;
      v409 = 0x800000000000000;
      if ((v158 & 2) == 0)
        v409 = 0x8000000000000;
      v410 = sub_1C4953AD0((unsigned __int16)(v158 >> 3) | ((unint64_t)((v409 & v158) != 0) << 32), v6);
      v5 = 1;
      sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v410, 1u, 118);
      sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v6, 2u, 118);
      v159 = *(_QWORD *)(a2 + 32);
      v160 = a1;
      v161 = v410;
      goto LABEL_126;
    case 0xCD:
      if (a3 == 2)
      {
LABEL_256:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
        v93 = *a1;
        v94 = *(_QWORD *)(a2 + 32);
        v95 = v6;
        v96 = 2;
LABEL_437:
        v116 = 124;
        goto LABEL_438;
      }
      if (a3)
        return 2;
      v258 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
      if (v258 < 0 && (v259 = (_QWORD *)a1[2], v260 = v258 & 0x7FFFFFFF, v260 < *((_DWORD *)v259 + 108)))
        v261 = *(_QWORD *)(v259[53] + 8 * v260);
      else
        v261 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v411 = v261 & 0x7FFF8;
      v412 = 0x800000000000000;
      if ((v261 & 2) == 0)
        v412 = 0x8000000000000;
      v413 = v412 & v261;
      v415 = sub_1C4825F50((unint64_t *)&v580);
      if ((_DWORD)v414 == 1)
      v416 = v411 & 0xFFF800000007FFFFLL | ((unint64_t)(v413 != 0) << 51) | ((unint64_t)v415 << 19) | 4;
      v5 = 1;
      sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v416, 1u, 118);
      v161 = (uint64_t)v580;
      v159 = *(_QWORD *)(a2 + 32);
      v160 = a1;
LABEL_126:
      v162 = 0;
LABEL_150:
      v175 = 119;
LABEL_151:
      sub_1C55367EC(v160, v159, v161, v162, v175);
LABEL_152:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1], a2);
      return v5;
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      if (!a3)
      {
LABEL_132:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
        goto LABEL_416;
      }
      v37 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
      if ((v4 - 207) >= 2)
        v38 = 126;
      else
        v38 = 118;
      v39 = *a1;
      v593[0] = (void *)a4;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = v37;
      LODWORD(v597) = 0;
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, v38, v593, 1, &v596, 1, 0);
      v42 = v41;
      v43 = 0;
      if (v37 < 0)
      {
        v44 = (_QWORD *)a1[2];
        if ((v37 & 0x7FFFFFFFu) >= *((_DWORD *)v44 + 108))
          v43 = 0;
        else
          v43 = *(_QWORD *)(v44[53] + 8 * (v37 & 0x7FFFFFFF));
      }
      v581 = v43;
      v293 = **(unsigned __int16 **)(a2 + 16);
      if ((_DWORD)v293 != 207)
        goto LABEL_326;
      v295 = sub_1C4825F50((unint64_t *)&v580);
      if ((_DWORD)v294 == 1)
      v298 = sub_1C4825F50(&v581);
      if ((_DWORD)v296 == 1)
      LODWORD(v591) = v295;
      if (v295 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v590, 0, 0);
        v300 = 1 << v298;
        if (v591 > 0x40)
        {
          *((_QWORD *)v590 + (v298 >> 6)) |= v300;
LABEL_322:
          v301 = (llvm::ConstantInt *****)*a1;
          v302 = v580;
          v587 = v580;
          v588 = 0;
          v303 = llvm::ConstantInt::get(***v301[1], (llvm::LLVMContext *)&v590, v297);
          v304 = ((uint64_t (*)(llvm::ConstantInt *****, void **, llvm::ValueHandleBase *))(*v301)[2])(v301, &v587, v303);
          v593[0] = v302;
          LODWORD(v593[1]) = 0;
          *(_QWORD *)&v596 = v40;
          *((_QWORD *)&v596 + 1) = v42;
          LODWORD(v597) = 1;
          v598 = v304;
          v599 = v305;
          v600 = 1;
          v40 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v301)[4])(v301, 66, v593, 1, &v596, 2, 0);
          v42 = v306;
          if (v591 >= 0x41 && v590)
            MEMORY[0x1CAA32F9C](v590, 0x1000C8000313F17);
          v293 = 208;
LABEL_326:
          v307 = *a1;
          v593[0] = v580;
          LODWORD(v593[1]) = 0;
          *(_QWORD *)&v596 = v40;
          *((_QWORD *)&v596 + 1) = v42;
          LODWORD(v597) = 1;
          v308 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v307 + 32))(v307, v293, v593, 1, &v596, 1, 0);
          v310 = v309;
          if (**(unsigned __int16 **)(a2 + 16) - 209 <= 1)
          {
            v311 = sub_1C4825F50((unint64_t *)&v580);
            v313 = v312;
            v315 = v311 - sub_1C4825F50(&v581);
            if (v313 == 1)
            v316 = *a1;
            v317 = v580;
            v590 = v580;
            LODWORD(v591) = 0;
            v318 = sub_1C5544694(v316, (unint64_t *)&v590, v315);
            v593[0] = v317;
            LODWORD(v593[1]) = 0;
            *(_QWORD *)&v596 = v308;
            *((_QWORD *)&v596 + 1) = v310;
            LODWORD(v597) = 1;
            v598 = v318;
            v599 = v319;
            v600 = 1;
            v308 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v316 + 32))(v316, 46, v593, 1, &v596, 2, 0);
            v310 = v320;
          }
          v321 = (uint64_t *)*a1;
          LODWORD(v593[0]) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
          LODWORD(v593[1]) = 1;
          *(_QWORD *)&v596 = v308;
          *((_QWORD *)&v596 + 1) = v310;
          LODWORD(v597) = 1;
          sub_1C5546B4C(v321, 126, (unint64_t *)v593, (int *)&v596);
          v91 = *(_QWORD *)(a2 + 24);
          v92 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v92 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v92 = a2;
              do
                v92 = *(_QWORD *)(v92 + 8);
              while ((*(_WORD *)(v92 + 44) & 8) != 0);
            }
          }
          goto LABEL_362;
        }
        v299 = (unint64_t)v590;
      }
      else
      {
        v299 = 0;
        v300 = 1 << v298;
      }
      v590 = (void *)(v299 | v300);
      goto LABEL_322;
    case 0xD4:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v105 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      v106 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v6, "", 0);
      v107 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v6, "", 0);
      v108 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v6, "", 0);
      sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v6, 1u, 118);
      llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32), v107);
      v109 = *(_QWORD *)(*a1 + 48);
      if (!v109 || (*(_BYTE *)v109 & 4) == 0)
      {
        while ((*(_WORD *)(v109 + 44) & 8) != 0)
          v109 = *(_QWORD *)(v109 + 8);
      }
      *(_QWORD *)(*a1 + 48) = *(_QWORD *)(v109 + 8);
      if (v105 < 0 && (v110 = (_QWORD *)a1[2], (v105 & 0x7FFFFFFFu) < *((_DWORD *)v110 + 108)))
        v111 = *(_QWORD *)(v110[53] + 8 * (v105 & 0x7FFFFFFF));
      else
        v111 = 0;
      v265 = (unsigned __int16)(v6 >> 3);
      v266 = (unsigned __int16)(v6 >> 19);
      if ((v6 & 2) == 0)
        v266 = v6 >> 19;
      if ((v6 & 4) != 0)
        v265 = v266;
      if ((v6 & 1) != 0)
        v265 = v6 >> 3;
      v267 = (unsigned __int16)(v111 >> 3);
      v268 = (unsigned __int16)(v111 >> 19);
      if ((v111 & 2) == 0)
        v268 = v111 >> 19;
      if ((v111 & 4) != 0)
        v267 = v268;
      if ((v111 & 1) != 0)
        v269 = v111 >> 3;
      else
        v269 = v267;
      v270 = *a1;
      v5 = 1;
      LODWORD(v596) = v108;
      DWORD2(v596) = 1;
      sub_1C5544694(v270, (unint64_t *)&v596, (v265 - v269));
      v271 = *a1;
      LODWORD(v593[0]) = v106;
      LODWORD(v593[1]) = 1;
      LODWORD(v596) = v107;
      LODWORD(v597) = 0;
      LODWORD(v598) = v108;
      v600 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v271 + 32))(v271, 128, v593, 1, &v596, 2, 0);
      v272 = *a1;
      LODWORD(v593[0]) = v105;
      LODWORD(v593[1]) = 1;
      LODWORD(v596) = v106;
      LODWORD(v597) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v272 + 32))(v272, 119, v593, 1, &v596, 1, 0);
      goto LABEL_152;
    case 0xD5:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v255 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      v256 = a1[2];
      if (v255 < 0 && (v255 & 0x7FFFFFFFu) < *(_DWORD *)(v256 + 432))
        v257 = *(_QWORD *)(*(_QWORD *)(v256 + 424) + 8 * (v255 & 0x7FFFFFFF));
      else
        v257 = 0;
      if ((v6 & 1) != 0)
      {
        v292 = v6 >> 3;
      }
      else if ((v6 & 4) != 0)
      {
        if ((v6 & 2) != 0)
          v292 = (unsigned __int16)(v6 >> 19);
        else
          v292 = v6 >> 19;
      }
      else
      {
        v292 = (unsigned __int16)(v6 >> 3);
      }
      if ((v257 & 1) != 0)
      {
        v353 = v257 >> 3;
      }
      else if ((v257 & 4) != 0)
      {
        if ((v257 & 2) != 0)
          v353 = (unsigned __int16)(v257 >> 19);
        else
          v353 = v257 >> 19;
      }
      else
      {
        v353 = (unsigned __int16)(v257 >> 3);
      }
      v354 = v292 - v353;
      v355 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v256, v6, "", 0);
      sub_1C553674C(*a1, *(_QWORD *)(a2 + 32), v6, 1u, 118);
      llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32), v355);
      v356 = *(_QWORD *)(*a1 + 48);
      if (!v356 || (*(_BYTE *)v356 & 4) == 0)
      {
        while ((*(_WORD *)(v356 + 44) & 8) != 0)
          v356 = *(_QWORD *)(v356 + 8);
      }
      *(_QWORD *)(*a1 + 48) = *(_QWORD *)(v356 + 8);
      v357 = *a1;
      *(_QWORD *)&v596 = v6;
      DWORD2(v596) = 0;
      v358 = sub_1C5544694(v357, (unint64_t *)&v596, v354);
      v359 = *a1;
      v593[0] = v580;
      LODWORD(v593[1]) = 0;
      LODWORD(v596) = v355;
      LODWORD(v597) = 0;
      v598 = v358;
      v599 = v360;
      v5 = 1;
      v600 = 1;
      v361 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v359 + 32))(v359, 128, v593, 1, &v596, 2, 0);
      v362 = *a1;
      LODWORD(v593[0]) = v255;
      LODWORD(v593[1]) = 1;
      *(_QWORD *)&v596 = v361;
      *((_QWORD *)&v596 + 1) = v363;
      LODWORD(v597) = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v362 + 32))(v362, 119, v593, 1, &v596, 1, 0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1], a2);
      return v5;
    case 0xFE:
    case 0xFF:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 32))(a1[1], a2);
      v93 = *a1;
      v94 = *(_QWORD *)(a2 + 32);
      v97 = v6;
      if (a3)
      {
        sub_1C553674C(v93, v94, v6, 2u, 126);
        v93 = *a1;
        v94 = *(_QWORD *)(a2 + 32);
        v95 = v6;
        v96 = 3;
LABEL_218:
        v116 = 126;
LABEL_438:
        sub_1C553674C(v93, v94, v95, v96, v116);
      }
      else
      {
LABEL_413:
        v99 = 1;
LABEL_414:
        v98 = 118;
LABEL_415:
        sub_1C553674C(v93, v94, v97, v99, v98);
LABEL_416:
        v21 = *(_QWORD *)(a2 + 32);
        v22 = a1;
        v23 = v6;
LABEL_417:
        v24 = 119;
LABEL_418:
        sub_1C55367EC(v22, v21, v23, 0, v24);
      }
LABEL_419:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1], a2);
      return 1;
    default:
      return v5;
  }
}

uint64_t sub_1C5524C34(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  void *v38;
  int v39;
  int v40;
  int v41;
  void *v42;
  char v43;
  unint64_t v44;
  const char *v45;
  unsigned int v46;
  const char *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  const char *v58;
  unsigned int v59;
  unsigned int v60;
  const char *v61;
  unsigned int v62;
  int8x8_t v63;
  unsigned int v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  unint64_t v126;
  char v127;
  char v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int8x8_t v133;
  uint8x8_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  llvm::ConstantInt *****v147;
  uint64_t v148;
  void *v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  unsigned int v157;
  const char *v158;
  unsigned int v159;
  const llvm::APInt *v160;
  llvm::ValueHandleBase *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  void *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  void *v189;
  void *v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  _BYTE v194[32];
  void *v195;
  int v196;
  __int128 v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v188 = a4;
  v7 = **(unsigned __int16 **)(a2 + 16);
  v8 = 2;
  if (v7 <= 0x87)
  {
    if (v7 == 90)
    {
      if (a3)
        return v8;
      v29 = *(_QWORD *)(a2 + 48);
      if ((v29 & 7) != 0)
      {
        v15 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v15 = v29 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a2 + 48) = v29 & 0xFFFFFFFFFFFFFFF8;
      }
      *(_QWORD *)&v197 = *(_QWORD *)(v15 + 24);
      v86 = sub_1C4825F50((unint64_t *)&v197);
      v88 = v87;
      if (v86 != sub_1C4825F50((unint64_t *)&v188) || v88 != v89)
        return v8;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
      sub_1C6271D28((uint64_t *)a1, *(_QWORD *)(a2 + 32), v188);
    }
    else
    {
      if (v7 != 96)
      {
        if (v7 - 65 < 3)
        {
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
          v8 = 1;
          sub_1C55368F4(*(_QWORD *)a1, *(_QWORD *)(a2 + 32), a4, 1u);
          sub_1C55368F4(*(_QWORD *)a1, *(_QWORD *)(a2 + 32), a4, 2u);
          sub_1C6271D28((uint64_t *)a1, *(_QWORD *)(a2 + 32), a4);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
        }
        return v8;
      }
      if (a3)
        return v8;
      v14 = *(_QWORD *)(a2 + 48);
      if ((v14 & 7) != 0)
      {
        v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v15 = v14 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a2 + 48) = v14 & 0xFFFFFFFFFFFFFFF8;
      }
      *(_QWORD *)&v197 = *(_QWORD *)(v15 + 24);
      v82 = sub_1C4825F50((unint64_t *)&v197);
      v84 = v83;
      if (v82 != sub_1C4825F50((unint64_t *)&v188) || v84 != v85)
        return v8;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
      sub_1C55368F4(*(_QWORD *)a1, *(_QWORD *)(a2 + 32), v188, 0);
    }
    *(_QWORD *)(v15 + 24) = v188;
LABEL_110:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
    return 1;
  }
  if (v7 == 136)
  {
    if (a3)
      return v8;
    v16 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
    if (v16 < 0)
    {
      v17 = *(_QWORD *)(a1 + 16);
      v18 = v16 & 0x7FFFFFFF;
      if (v18 < *(_DWORD *)(v17 + 432))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v17 + 424) + 8 * v18);
        v20 = v19 & 0xFFFFFFFFFFFFFFF9;
        v21 = v19 & 4;
        if (v20 && v21 != 0)
          return v8;
      }
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
    sub_1C55368F4(*(_QWORD *)a1, *(_QWORD *)(a2 + 32), a4, 2u);
    sub_1C55368F4(*(_QWORD *)a1, *(_QWORD *)(a2 + 32), a4, 3u);
    sub_1C6271D28((uint64_t *)a1, *(_QWORD *)(a2 + 32), a4);
    goto LABEL_110;
  }
  if (v7 != 204)
  {
    if (v7 == 205 && a3 == 1)
    {
      v9 = *(_DWORD **)(a2 + 32);
      v10 = v9[9];
      v11 = v9[17];
      v12 = *(_QWORD *)(a1 + 16);
      if (v10 < 0 && (v10 & 0x7FFFFFFFu) < *(_DWORD *)(v12 + 432))
        v13 = *(_QWORD *)(*(_QWORD *)(v12 + 424) + 8 * (v10 & 0x7FFFFFFF));
      else
        v13 = 0;
      if (v11 < 0 && (v11 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v12 + 432))
        v30 = *(void **)(*(_QWORD *)(v12 + 424) + 8 * (v11 & 0x7FFFFFFF));
      else
        v30 = 0;
      if ((v13 & 2) != 0)
      {
        v124 = 35;
        v125 = 19;
        if ((v13 & 4) == 0)
          v124 = 19;
        v126 = v13 >> v124;
        if ((v13 & 4) == 0)
          v125 = 3;
        if ((v13 & 1) != 0)
          v125 = 3;
        v32 = (8 * (unsigned __int16)(v13 >> v125)) & 0xFFFFF8000007FFFFLL | ((v126 & 0xFFFFFF) << 19) | 2;
      }
      else
      {
        v31 = 3;
        if ((v13 & 1) == 0)
          v31 = 19;
        v32 = v13 & 0x8000000000000000 | (8 * (v13 >> v31)) | 1;
      }
      v33 = v9[1];
      v191 = v32;
      if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0)
        v34 = (a4 >> 2) & 1;
      else
        v34 = 0;
      v183 = v33;
      v187 = v11;
      if (v34 == 1)
      {
        v35 = 0x800000000000000;
        if ((a4 & 2) == 0)
          v35 = 0x8000000000000;
        if ((v35 & a4) != 0)
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
        v36 = (unsigned __int16)(a4 >> 3);
      }
      else
      {
        v36 = 1;
      }
      v51 = 0x800000000000000;
      if ((v13 & 2) == 0)
        v51 = 0x8000000000000;
      if ((v51 & v13) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
      v52 = (void *)a4;
      if (v34)
      {
        v53 = 3;
        if ((a4 & 1) == 0)
          v53 = 19;
        v54 = a4 >> v53;
        if ((a4 & 2) != 0)
          v52 = (void *)((a4 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v54) | 2);
        else
          v52 = (void *)(a4 & 0x8000000000000000 | (8 * v54) | 1);
      }
      v190 = v52;
      v55 = *(_QWORD *)a1;
      v192 = (void *)a4;
      LODWORD(v193) = 0;
      LODWORD(v197) = v10;
      v198 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 82, &v192, 1, &v197, 1, 0);
      v57 = *(_DWORD *)(*(_QWORD *)(v56 + 32) + 4);
      v59 = sub_1C4825F50((unint64_t *)&v190);
      if ((_DWORD)v58 == 1)
      v60 = (unsigned __int16)(v13 >> 3);
      v62 = sub_1C4825F50(&v191);
      if ((_DWORD)v61 == 1)
      if (v36 > v60)
      {
        v64 = v13 >> 3;
        v65 = v36 / (unsigned __int16)(v13 >> 3);
        if (!(v36 % (unsigned __int16)(v13 >> 3)))
        {
          if ((_DWORD)v65 == 1)
            v179 = v190;
          else
            v179 = (void *)sub_1C4953AD0(v36 / (unsigned __int16)(v13 >> 3), (unint64_t)v190);
          v90 = *(_QWORD *)a1;
          *(_QWORD *)&v197 = v30;
          DWORD2(v197) = 0;
          v91 = sub_1C5544694(v90, (unint64_t *)&v197, v36 / (unsigned __int16)(v13 >> 3));
          v93 = v92;
          v192 = v194;
          v193 = 0x800000000;
          sub_1C4893E04((char *)&v192, v65, 0);
          v94 = *(_QWORD *)a1;
          v195 = v30;
          v196 = 0;
          LODWORD(v197) = v187;
          v198 = 0;
          v199 = v91;
          v200 = v93;
          v201 = 1;
          v95 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 47, &v195, 1, &v197, 2, 0);
          if (v36 >= (unsigned __int16)v64)
          {
            v98 = v95;
            v99 = v96;
            v100 = 0;
            if (v65 <= 1)
              v101 = 1;
            else
              v101 = v65;
            do
            {
              v102 = *(_QWORD *)a1;
              *(_QWORD *)&v197 = v30;
              DWORD2(v197) = 0;
              v103 = sub_1C5544694(v102, (unint64_t *)&v197, v100);
              v104 = *(_QWORD *)a1;
              v195 = v30;
              v196 = 0;
              *(_QWORD *)&v197 = v98;
              *((_QWORD *)&v197 + 1) = v99;
              v198 = 1;
              v199 = v103;
              v200 = v105;
              v201 = 1;
              v106 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 45, &v195, 1, &v197, 2, 0);
              v107 = *(_QWORD *)a1;
              v195 = v190;
              v196 = 0;
              LODWORD(v197) = v57;
              v198 = 0;
              v199 = v106;
              v200 = v108;
              v201 = 1;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 205, &v195, 1, &v197, 2, 0);
              v97 = (int *)v192;
              *((_DWORD *)v192 + v100++) = *(_DWORD *)(*(_QWORD *)(v109 + 32) + 4);
            }
            while (v101 != v100);
          }
          else
          {
            v97 = (int *)v192;
          }
          v110 = *(_QWORD *)a1;
          v195 = v179;
          v196 = 0;
          v111 = v193;
          *(_QWORD *)&v197 = &v198;
          *((_QWORD *)&v197 + 1) = 0x800000000;
          if (v193 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v197, (uint64_t)&v198, v193, 24);
            v112 = DWORD2(v197);
            v113 = (int *)v197;
          }
          else
          {
            if (!(_DWORD)v193)
            {
              v118 = 0;
              v113 = &v198;
LABEL_130:
              DWORD2(v197) = v118 + v111;
              v119 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, int *))(*(_QWORD *)v110 + 32))(v110, 77, &v195, 1, v113);
              v121 = v120;
              if ((int *)v197 != &v198)
                free((void *)v197);
              v122 = *(_QWORD *)a1;
              LODWORD(v195) = v183;
              v196 = 1;
              *(_QWORD *)&v197 = v119;
              *((_QWORD *)&v197 + 1) = v121;
              v198 = 1;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 82, &v195, 1, &v197, 1, 0);
              v123 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v123 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v123 = a2;
                  do
                    v123 = *(_QWORD *)(v123 + 8);
                  while ((*(_WORD *)(v123 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v123 + 8));
              if (v192 != v194)
                free(v192);
              return 1;
            }
            v112 = 0;
            v113 = &v198;
          }
          v114 = 6 * v112;
          v115 = 4 * v111;
          do
          {
            v116 = *v97++;
            v117 = &v113[v114];
            *v117 = v116;
            v117[4] = 0;
            v114 += 6;
            v115 -= 4;
          }
          while (v115);
          v118 = DWORD2(v197);
          goto LABEL_130;
        }
        return 2;
      }
      if (v36 >= v60 || v59 % v62)
        return 2;
      v8 = 2;
      if (v62 <= v59)
      {
        v63.i32[0] = v59 / v62;
        v66 = (uint8x8_t)vcnt_s8(v63);
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.i32[0] <= 1u)
        {
          v67 = *(_QWORD *)a1;
          *(_QWORD *)&v197 = v30;
          DWORD2(v197) = 0;
          v68 = sub_1C5544694(v67, (unint64_t *)&v197, 31 - __clz(v59 / v62));
          v69 = *(_QWORD *)a1;
          v192 = v30;
          LODWORD(v193) = 0;
          LODWORD(v197) = v187;
          v198 = 0;
          v199 = v68;
          v200 = v70;
          v201 = 1;
          v71 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 128, &v192, 1, &v197, 2, 0);
          if (v34)
          {
            v73 = *(_QWORD *)a1;
            v192 = v190;
            LODWORD(v193) = 0;
            LODWORD(v197) = v57;
            v198 = 0;
            v199 = v71;
            v200 = v72;
            v201 = 1;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 205, &v192, 1, &v197, 2, 0);
            v57 = *(_DWORD *)(*(_QWORD *)(v74 + 32) + 4);
          }
          v75 = sub_1C5536A58(*(_QWORD *)a1, v187, v59, v62);
          v76 = *(_QWORD *)a1;
          v192 = v190;
          LODWORD(v193) = 0;
          LODWORD(v197) = v57;
          v198 = 0;
          LODWORD(v199) = v75;
          v201 = 0;
          v77 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 128, &v192, 1, &v197, 2, 0);
          v78 = *(_QWORD *)a1;
          LODWORD(v192) = v183;
          LODWORD(v193) = 1;
          *(_QWORD *)&v197 = v77;
          *((_QWORD *)&v197 + 1) = v79;
          v198 = 1;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 119, &v192, 1, &v197, 1, 0);
          v80 = *(_QWORD *)(a2 + 24);
          v81 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v81 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v81 = a2;
              do
                v81 = *(_QWORD *)(v81 + 8);
              while ((*(_WORD *)(v81 + 44) & 8) != 0);
            }
          }
LABEL_190:
          sub_1C487FE80(v80 + 40, a2, *(_QWORD *)(v81 + 8));
          return 1;
        }
      }
    }
    return v8;
  }
  if (a3)
    return v8;
  v23 = *(_DWORD **)(a2 + 32);
  v24 = v23[1];
  v25 = v23[25];
  v26 = *(_QWORD *)(a1 + 16);
  v186 = v24;
  if (v24 < 0 && (v27 = v24 & 0x7FFFFFFF, v27 < *(_DWORD *)(v26 + 432)))
    v28 = *(_QWORD *)(*(_QWORD *)(v26 + 424) + 8 * v27);
  else
    v28 = 0;
  if (v25 < 0 && (v25 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v26 + 432))
    v181 = *(void **)(*(_QWORD *)(v26 + 424) + 8 * (v25 & 0x7FFFFFFF));
  else
    v181 = 0;
  if ((v28 & 2) != 0)
  {
    v127 = 35;
    v128 = 19;
    if ((v28 & 4) == 0)
      v127 = 19;
    v129 = v28 >> v127;
    if ((v28 & 4) == 0)
      v128 = 3;
    if ((v28 & 1) != 0)
      v128 = 3;
    v38 = (void *)((8 * (unsigned __int16)(v28 >> v128)) & 0xFFFFF8000007FFFFLL | ((v129 & 0xFFFFFF) << 19) | 2);
  }
  else
  {
    v37 = 3;
    if ((v28 & 1) == 0)
      v37 = 19;
    v38 = (void *)(v28 & 0x8000000000000000 | (8 * (v28 >> v37)) | 1);
  }
  v39 = v23[17];
  v40 = v23[9];
  v190 = v38;
  if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0)
    v41 = (a4 >> 2) & 1;
  else
    v41 = 0;
  v42 = (void *)a4;
  if (v41 == 1)
  {
    v43 = 3;
    if ((a4 & 1) == 0)
      v43 = 19;
    v44 = a4 >> v43;
    if ((a4 & 2) != 0)
      v42 = (void *)((a4 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v44) | 2);
    else
      v42 = (void *)(a4 & 0x8000000000000000 | (8 * v44) | 1);
  }
  v184 = v39;
  v189 = v42;
  v46 = sub_1C4825F50((unint64_t *)&v189);
  if ((_DWORD)v45 == 1)
  v48 = sub_1C4825F50((unint64_t *)&v190);
  if ((_DWORD)v47 == 1)
  {
    if (v41)
      goto LABEL_71;
LABEL_155:
    v50 = 1;
    goto LABEL_156;
  }
  if (!v41)
    goto LABEL_155;
LABEL_71:
  v49 = 0x800000000000000;
  if ((a4 & 2) == 0)
    v49 = 0x8000000000000;
  if ((v49 & a4) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v47);
  v50 = (unsigned __int16)(a4 >> 3);
LABEL_156:
  v130 = 0x800000000000000;
  if ((v28 & 2) == 0)
    v130 = 0x8000000000000;
  if ((v130 & v28) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v47);
  v131 = *(_QWORD *)a1;
  v192 = (void *)a4;
  LODWORD(v193) = 0;
  LODWORD(v197) = v40;
  v198 = 0;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v131 + 32))(v131, 82, &v192, 1, &v197, 1, 0);
  if (v50 >= (unsigned __int16)(v28 >> 3) || v46 % v48)
    return 2;
  v8 = 2;
  if (v48 <= v46)
  {
    v133.i32[0] = v46 / v48;
    v135 = (uint8x8_t)vcnt_s8(v133);
    v135.i16[0] = vaddlv_u8(v135);
    if (v135.i32[0] <= 1u)
    {
      v136 = *(_DWORD *)(*(_QWORD *)(v132 + 32) + 4);
      v137 = *(_QWORD *)a1;
      *(_QWORD *)&v197 = v181;
      DWORD2(v197) = 0;
      v138 = sub_1C5544694(v137, (unint64_t *)&v197, 31 - __clz(v46 / v48));
      v139 = *(_QWORD *)a1;
      v192 = v181;
      LODWORD(v193) = 0;
      LODWORD(v197) = v25;
      v198 = 0;
      v199 = v138;
      v200 = v140;
      v201 = 1;
      v141 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v139 + 32))(v139, 128, &v192, 1, &v197, 2, 0);
      v180 = v142;
      v182 = v141;
      v143 = v136;
      if (v41)
      {
        v144 = *(_QWORD *)a1;
        v192 = v189;
        LODWORD(v193) = 0;
        LODWORD(v197) = v136;
        v198 = 0;
        v199 = v182;
        v200 = v142;
        v201 = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v144 + 32))(v144, 205, &v192, 1, &v197, 2, 0);
        v143 = *(_DWORD *)(*(_QWORD *)(v145 + 32) + 4);
      }
      v146 = sub_1C5536A58(*(_QWORD *)a1, v25, v46, v48);
      v147 = *(llvm::ConstantInt ******)a1;
      v148 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      if (v143 < 0)
      {
        v150 = v184;
        if ((v143 & 0x7FFFFFFFu) >= *(_DWORD *)(v148 + 432))
          v149 = 0;
        else
          v149 = *(void **)(*(_QWORD *)(v148 + 424) + 8 * (v143 & 0x7FFFFFFF));
      }
      else
      {
        v149 = 0;
        v150 = v184;
      }
      v195 = v149;
      v178 = v136;
      if (v150 < 0 && (v150 & 0x7FFFFFFFu) < *(_DWORD *)(v148 + 432))
        v151 = *(_QWORD *)(*(_QWORD *)(v148 + 424) + 8 * (v150 & 0x7FFFFFFF));
      else
        v151 = 0;
      v191 = v151;
      v192 = v149;
      LODWORD(v193) = 0;
      LODWORD(v197) = v150;
      v198 = 0;
      v152 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v147)[4])(v147, 126, &v192, 1, &v197, 1, 0);
      v192 = v149;
      LODWORD(v193) = 0;
      *(_QWORD *)&v197 = v152;
      *((_QWORD *)&v197 + 1) = v153;
      v198 = 1;
      LODWORD(v199) = v146;
      v201 = 0;
      v154 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v147)[4])(v147, 127, &v192, 1, &v197, 2, 0);
      v185 = v155;
      *(_QWORD *)&v197 = v149;
      DWORD2(v197) = 0;
      v157 = sub_1C4825F50((unint64_t *)&v195);
      if ((_DWORD)v156 == 1)
      v159 = sub_1C4825F50(&v191);
      if ((_DWORD)v158 == 1)
      {
        v177 = v159;
        v159 = v177;
      }
      LODWORD(v193) = v157;
      if (v157 > 0x40)
      {
        v176 = v159;
        llvm::APInt::initSlowCase((llvm::APInt *)&v192, 0, 0);
        v159 = v176;
      }
      else
      {
        v192 = 0;
      }
      sub_1C4912E54(&v192, 0, v159);
      v161 = llvm::ConstantInt::get(***v147[1], (llvm::LLVMContext *)&v192, v160);
      v162 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v147)[2])(v147, &v197, v161);
      v164 = v163;
      if (v193 >= 0x41 && v192)
        MEMORY[0x1CAA32F9C](v192, 0x1000C8000313F17);
      v192 = v195;
      LODWORD(v193) = 0;
      *(_QWORD *)&v197 = v162;
      *((_QWORD *)&v197 + 1) = v164;
      v198 = 1;
      LODWORD(v199) = v146;
      v201 = 0;
      v165 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v147)[4])(v147, 127, &v192, 1, &v197, 2, 0);
      v192 = v195;
      LODWORD(v193) = 0;
      *(_QWORD *)&v197 = v165;
      *((_QWORD *)&v197 + 1) = v166;
      v198 = 1;
      v167 = sub_1C54F8544(v147, (uint64_t *)&v192, &v197);
      v192 = v195;
      LODWORD(v193) = 0;
      LODWORD(v197) = v143;
      v198 = 0;
      v199 = v167;
      v200 = v168;
      v201 = 1;
      v169 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v147)[4])(v147, 65, &v192, 1, &v197, 2, 0);
      v192 = v195;
      LODWORD(v193) = 0;
      *(_QWORD *)&v197 = v169;
      *((_QWORD *)&v197 + 1) = v170;
      v198 = 1;
      v199 = v154;
      v200 = v185;
      v201 = 1;
      ((void (*)(llvm::ConstantInt *****, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v147)[4])(v147, 66, &v192, 1, &v197, 2, 0);
      v172 = *(_DWORD *)(*(_QWORD *)(v171 + 32) + 4);
      if (v41)
      {
        v173 = *(_QWORD *)a1;
        v192 = (void *)a4;
        LODWORD(v193) = 0;
        LODWORD(v197) = v178;
        v198 = 0;
        LODWORD(v199) = v172;
        v201 = 0;
        v202 = v182;
        v203 = v180;
        v204 = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v173 + 32))(v173, 204, &v192, 1, &v197, 3, 0);
        v172 = *(_DWORD *)(*(_QWORD *)(v174 + 32) + 4);
      }
      v175 = *(_QWORD *)a1;
      LODWORD(v192) = v186;
      LODWORD(v193) = 1;
      LODWORD(v197) = v172;
      v198 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v175 + 32))(v175, 82, &v192, 1, &v197, 1, 0);
      v80 = *(_QWORD *)(a2 + 24);
      v81 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v81 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v81 = a2;
          do
            v81 = *(_QWORD *)(v81 + 8);
          while ((*(_WORD *)(v81 + 44) & 8) != 0);
        }
      }
      goto LABEL_190;
    }
  }
  return v8;
}

uint64_t sub_1C5525CEC(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _DWORD *v94;
  int v95;
  int v96;
  int v97;
  llvm::ConstantInt ******v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int8 v120;
  BOOL v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  int v158;
  uint64_t v159;
  _DWORD *v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  unsigned int v179;
  char v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  llvm::LLVMContext ****v188;
  const char *v189;
  unsigned __int32 v190;
  const char *v191;
  unsigned int v192;
  int8x8_t v193;
  uint64_t v194;
  uint8x8_t v195;
  unsigned __int32 v196;
  uint64_t v197;
  unint64_t v198;
  unsigned __int32 v199;
  char v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  __int16 v207;
  char v208;
  __int16 v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  const char *v213;
  unint64_t v214;
  int v215;
  int v216;
  _QWORD *v217;
  llvm::MachineFunction *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int8 **v222;
  unsigned __int8 **v223;
  unsigned __int8 *v224;
  int v225;
  uint64_t v226;
  unsigned int v227;
  int v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  int v234;
  char v235;
  uint64_t v236;
  unsigned int v237;
  int v238;
  char v239;
  int8x8_t v240;
  _BOOL4 v241;
  uint8x8_t v242;
  _BOOL4 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  int v302;
  uint64_t v303;
  int v304;
  _DWORD *v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v320;
  int v321;
  int v322;
  uint64_t v323;
  unint64_t v324;
  _DWORD *v325;
  int v326;
  int v327;
  uint64_t v328;
  uint64_t **v329;
  unint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  int v338;
  uint64_t v339;
  unint64_t v340;
  _DWORD *v341;
  int v342;
  int v343;
  int v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  int v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  int v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  _DWORD *v359;
  int v360;
  int v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _DWORD *v373;
  int v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  int v380;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  int v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v391;
  unint64_t v392;
  int v393;
  uint64_t v394;
  int v395;
  int v396;
  uint64_t v397;
  uint64_t v399;
  int v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  int v407;
  uint64_t v408;
  unint64_t v409;
  _DWORD *v410;
  int v411;
  int v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v423;
  unint64_t v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v432;
  int v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  _DWORD *v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  _DWORD *v441;
  int v442;
  int v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  int v447;
  int v448;
  uint64_t v449;
  unint64_t v451;
  uint64_t v452;
  int v453;
  uint64_t v454;
  unint64_t v455;
  int v456;
  uint64_t v457;
  int v458;
  int v459;
  uint64_t v460;
  uint64_t v462;
  uint64_t v463;
  const char *v464;
  llvm::APInt *v465;
  int v466;
  _QWORD *v467;
  uint64_t v468;
  uint64_t *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t *v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  unint64_t v515;
  int v516;
  uint64_t v517;
  unsigned int *v518;
  unint64_t v519;
  char v520;
  unint64_t v521;
  unsigned int v522;
  int v523;
  uint64_t v524;
  uint64_t v525;
  unsigned int v526;
  int v527;
  int v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  uint64_t v534;
  unsigned int v535;
  unint64_t v536;
  const char *v537;
  unsigned int v538;
  unsigned int v539;
  unint64_t *v540;
  const char *v541;
  uint64_t v542;
  void *v543;
  const char *v544;
  unsigned int v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  llvm::ConstantFP *****v549;
  const llvm::APFloat *v550;
  llvm::APFloatBase *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  llvm::ConstantInt *****v562;
  const llvm::APInt *v563;
  llvm::ValueHandleBase *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  int v577;
  int v578;
  unint64_t v579;
  char v580;
  unint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  BOOL v585;
  int v586;
  const char *v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t v590;
  llvm::LLVMContext ****v591;
  uint64_t v592;
  unint64_t v593;
  int v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  int v603;
  unint64_t v604;
  BOOL v605;
  char v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  void *v612;
  unint64_t v614;
  char v616;
  unint64_t v617;
  unint64_t v618;
  const char *v619;
  unsigned int v620;
  const char *v621;
  unsigned int v622;
  uint64_t v623;
  unint64_t v624;
  const char *v625;
  unint64_t v626;
  uint64_t *v627;
  char v628;
  unint64_t v629;
  char v630;
  char v631;
  unint64_t v632;
  unint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unsigned int v637;
  int v638;
  int v639;
  uint64_t v640;
  unint64_t v641;
  const char *v642;
  unsigned int v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  int v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  int v679;
  unint64_t v680;
  char v681;
  unint64_t v682;
  unint64_t v683;
  const char *v684;
  unsigned int v685;
  const char *v686;
  unsigned int v687;
  unint64_t v688;
  unint64_t v689;
  unint64_t v690;
  const char *v691;
  unint64_t v692;
  unint64_t v693;
  char v694;
  unint64_t v695;
  unint64_t v696;
  unint64_t v697;
  uint64_t v698;
  char v699;
  __int32 *v700;
  size_t v701;
  __int32 *v702;
  __int32 *v703;
  char v704;
  __int32 *v705;
  size_t v706;
  __int32 *v707;
  __int32 *v708;
  uint64_t v709;
  const char *v710;
  unsigned int v711;
  uint64_t *v712;
  uint64_t v713;
  const char *v714;
  unsigned int v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  int v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  const char *v726;
  unsigned int v727;
  const char *v728;
  int v729;
  unsigned int v730;
  llvm::ConstantInt *****v731;
  const llvm::APInt *v732;
  llvm::ValueHandleBase *v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t *v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  unsigned int v777;
  int v778;
  unint64_t v779;
  const char *v780;
  const char *v781;
  unsigned int v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  int v786;
  int GenericVirtualRegister;
  unint64_t v788;
  char v789;
  char v790;
  uint64_t v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t *v795;
  uint64_t v796;
  uint64_t v797;
  int v798;
  int v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t *v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  int v1019;
  unsigned int v1020;
  uint64_t v1021;
  uint64_t v1022;
  int v1023;
  int v1024;
  int v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  llvm::ConstantInt *****v1029;
  const char *v1030;
  const llvm::APInt *v1031;
  unsigned int v1032;
  unsigned int v1033;
  __int128 *v1034;
  llvm::ValueHandleBase *v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  int v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  int v1051;
  int v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  int v1056;
  uint64_t v1057;
  unint64_t v1058;
  unsigned int v1059;
  unint64_t v1060;
  BOOL v1061;
  unint64_t v1062;
  char v1063;
  unint64_t v1064;
  char v1065;
  unsigned int v1066;
  unsigned int v1067;
  uint64_t v1068;
  unsigned int v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  const llvm::APInt *v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  unsigned int v1087;
  int v1088;
  uint64_t v1089;
  unint64_t v1090;
  uint64_t v1091;
  llvm::ConstantInt *****v1092;
  llvm::ValueHandleBase *v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  const char *v1119;
  unsigned int v1120;
  uint64_t v1121;
  int v1122;
  unsigned int v1123;
  unsigned __int8 v1124;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t *v1134;
  uint64_t v1135;
  unint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  unint64_t v1145;
  const char *v1146;
  uint64_t v1147;
  int v1148;
  unsigned int v1149;
  unsigned __int8 v1150;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t *v1159;
  uint64_t v1160;
  unint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  unint64_t v1171;
  unint64_t v1173;
  unsigned int v1174;
  llvm::ConstantInt *****v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  llvm::ConstantInt *****v1179;
  uint64_t v1180;
  const llvm::APInt *v1181;
  uint64_t v1182;
  llvm::ConstantInt *****v1183;
  unsigned int v1184;
  __int128 *v1185;
  llvm::ValueHandleBase *v1186;
  const llvm::APInt *v1187;
  uint64_t v1188;
  uint64_t v1189;
  llvm::ConstantInt *****v1190;
  unint64_t v1191;
  __int128 *v1192;
  llvm::ValueHandleBase *v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  llvm::ConstantInt *****v1201;
  uint64_t v1202;
  int v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  const llvm::APInt *v1209;
  uint64_t v1210;
  llvm::ConstantInt *****v1211;
  unint64_t v1212;
  llvm::ValueHandleBase *v1213;
  uint64_t v1214;
  llvm::ConstantInt *****v1215;
  uint64_t v1216;
  llvm::ConstantInt *****v1217;
  uint64_t v1218;
  uint64_t v1219;
  const char *v1220;
  unsigned int v1221;
  uint64_t v1222;
  char v1223;
  __int32 *v1224;
  size_t v1225;
  __int32 *v1226;
  __int32 *v1227;
  uint64_t v1228;
  void (*v1229)(void);
  uint64_t *v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  int v1235;
  int v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  int v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  int v1254;
  const char *v1255;
  unsigned int v1256;
  int v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t *v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  const char *v1269;
  unsigned int v1270;
  uint64_t v1271;
  unint64_t v1272;
  unint64_t v1273;
  unint64_t v1274;
  unint64_t v1275;
  llvm::ConstantInt *****v1276;
  const llvm::APInt *v1277;
  llvm::ValueHandleBase *v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t *v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  int v1289;
  unsigned int v1290;
  unsigned int v1291;
  int v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  char v1306;
  __int32 *v1307;
  size_t v1308;
  __int32 *v1309;
  __int32 *v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  signed int v1314;
  int v1315;
  llvm::ConstantInt *****v1316;
  unsigned int v1317;
  __int128 *v1318;
  llvm::ValueHandleBase *v1319;
  uint64_t v1320;
  uint64_t v1321;
  llvm::ConstantInt *****v1322;
  const llvm::APInt *v1323;
  llvm::ValueHandleBase *v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  int v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  char v1343;
  uint64_t v1344;
  char v1345;
  char v1346;
  unint64_t v1347;
  unint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  int *v1356;
  uint64_t v1357;
  unint64_t *v1358;
  uint64_t v1359;
  uint64_t v1360;
  int v1361;
  unint64_t *v1362;
  int v1363;
  const char *v1364;
  unsigned int v1365;
  const char *v1366;
  unint64_t v1367;
  char v1368;
  uint64_t v1369;
  const char *v1370;
  unsigned int v1371;
  int v1372;
  uint64_t v1373;
  unsigned int v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  llvm::MachineMemOperand *MachineMemOperand;
  llvm::MachineMemOperand *v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  int v1405;
  uint64_t v1406;
  _QWORD *v1407;
  llvm::MachineFunction *v1408;
  uint64_t v1409;
  uint64_t v1410;
  llvm::MachineFunction *v1411;
  llvm::MachineInstr *v1412;
  const char *v1413;
  unsigned int v1414;
  uint8x8_t v1415;
  const char *v1416;
  unint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  const char *v1420;
  int v1421;
  unsigned int v1422;
  uint64_t v1423;
  const char *v1424;
  uint64_t v1425;
  unint64_t v1426;
  unint64_t v1427;
  uint64_t v1428;
  unint64_t v1429;
  unint64_t v1430;
  const char *v1431;
  unint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  int v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  _QWORD *v1449;
  uint64_t v1450;
  uint64_t *v1451;
  uint64_t v1452;
  uint64_t *v1453;
  char v1454;
  unint64_t v1455;
  uint64_t v1456;
  int v1457;
  uint64_t *v1458;
  uint64_t v1459;
  uint64_t v1460;
  int v1461;
  int v1462;
  int v1463;
  uint64_t *v1464;
  uint64_t v1465;
  int v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t *v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t *v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t *v1476;
  uint64_t v1477;
  uint64_t *v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  unint64_t v1484;
  __int16 v1485;
  char v1486;
  __int16 v1487;
  uint64_t v1488;
  _QWORD *v1489;
  uint64_t v1490;
  char v1491;
  unint64_t v1492;
  unint64_t v1493;
  uint64_t v1495;
  uint64_t v1496;
  unsigned int v1497;
  unsigned int v1498;
  char v1499;
  unint64_t v1500;
  unint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t (*v1526)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD);
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  _DWORD *v1530;
  int v1531;
  int v1532;
  int v1533;
  int v1534;
  int v1535;
  uint64_t v1536;
  uint64_t v1537;
  llvm::MachineMemOperand *v1538;
  int v1539;
  uint64_t v1540;
  unint64_t v1541;
  uint64_t v1542;
  int v1543;
  uint64_t v1544;
  unint64_t v1545;
  uint64_t v1546;
  const char *v1547;
  uint64_t v1548;
  unint64_t v1549;
  unint64_t v1550;
  uint64_t v1551;
  const char *v1552;
  llvm::APInt *v1553;
  llvm::ConstantInt *****v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  const llvm::APInt *v1560;
  llvm::ValueHandleBase *v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  const llvm::APInt *v1574;
  llvm::ValueHandleBase *v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  const llvm::APInt *v1594;
  llvm::ValueHandleBase *v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  const llvm::APInt *v1601;
  llvm::ValueHandleBase *v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  _DWORD *v1612;
  int v1613;
  int v1614;
  int v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  unint64_t v1627;
  uint64_t v1628;
  int8x8_t v1629;
  int8x8_t v1630;
  int8x8_t v1631;
  uint8x8_t v1632;
  int v1633;
  uint64_t v1634;
  int v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  int v1641;
  unint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  int v1645;
  int v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  int v1653;
  uint64_t v1654;
  uint64_t v1655;
  int v1656;
  uint64_t v1657;
  int v1658;
  int v1659;
  uint64_t v1660;
  int v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  int8x8_t v1666;
  uint8x8_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  int v1670;
  _QWORD *v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  int v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  int v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  _QWORD *v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  unsigned int v1714;
  uint64_t v1715;
  unsigned __int8 v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t *v1723;
  unint64_t v1724;
  int v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  unint64_t v1729;
  int v1730;
  uint64_t v1731;
  unsigned __int8 v1732;
  uint64_t v1733;
  uint64_t v1734;
  unint64_t v1735;
  uint64_t *v1736;
  uint64_t v1737;
  uint64_t *v1738;
  uint64_t v1739;
  int *v1740;
  uint64_t v1741;
  uint64_t v1742;
  int v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  const llvm::APInt *v1759;
  uint64_t v1760;
  llvm::ConstantInt *****v1761;
  unsigned int v1762;
  __int128 *v1763;
  llvm::ValueHandleBase *v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t *v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  const char *v1847;
  unint64_t v1848;
  uint64_t *v1849;
  unint64_t v1850;
  const char *v1851;
  unsigned int v1852;
  unsigned int v1853;
  int v1854;
  int v1855;
  unint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  unsigned int v1859;
  uint64_t v1860;
  int v1861;
  uint64_t v1862;
  uint64_t v1863;
  unsigned int v1864;
  uint64_t v1865;
  unsigned __int8 v1866;
  uint64_t v1867;
  uint64_t v1868;
  unsigned int v1869;
  uint64_t v1870;
  unsigned __int8 v1871;
  uint64_t v1872;
  uint64_t v1873;
  unsigned int v1874;
  uint64_t v1875;
  unsigned int v1876;
  unsigned int v1877;
  int v1878;
  unsigned int v1879;
  uint64_t i;
  unint64_t v1882;
  uint64_t v1883;
  int v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  unsigned int v1889;
  uint64_t v1890;
  unsigned __int8 v1891;
  uint64_t v1892;
  uint64_t v1893;
  unsigned int v1894;
  uint64_t v1895;
  int v1896;
  uint64_t v1899;
  uint64_t v1900;
  unsigned int v1901;
  uint64_t v1902;
  unsigned __int8 v1903;
  int *v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  unsigned int v1910;
  uint64_t v1911;
  unsigned __int8 v1912;
  uint64_t v1915;
  uint64_t v1916;
  unint64_t v1917;
  unint64_t v1918;
  unsigned int v1919;
  unsigned int v1920;
  int v1921;
  uint64_t *v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  unint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  uint64_t v1936;
  int v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  unint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  uint64_t *v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  int v1958;
  unsigned int v1959;
  unsigned __int8 v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  unsigned int v1964;
  uint64_t v1965;
  unsigned __int8 v1966;
  uint64_t v1967;
  BOOL v1968;
  uint64_t v1969;
  int v1970;
  unsigned int v1971;
  unsigned __int8 v1972;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  int v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  unsigned int v1985;
  uint64_t v1986;
  unsigned __int8 v1987;
  BOOL v1988;
  unsigned int v1989;
  _QWORD *v1990;
  uint64_t v1991;
  uint64_t v1992;
  int v1993;
  const char *v1994;
  unsigned int v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  int v1999;
  uint64_t v2000;
  uint64_t v2001;
  _QWORD *v2002;
  unsigned int v2003;
  uint64_t v2004;
  llvm::MachineFunction *v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  uint64_t v2016;
  int v2017;
  int v2018;
  int v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  char v2028;
  char v2029;
  unint64_t v2030;
  const char *v2031;
  unsigned int v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t *v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  unint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  uint64_t v2049;
  const char *v2050;
  unsigned int v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  _QWORD **v2059;
  llvm::MachineMemOperand *v2060;
  llvm::MachineMemOperand *v2061;
  _QWORD *v2062;
  _QWORD *v2063;
  char v2064;
  char v2065;
  unint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  unsigned int v2072;
  uint64_t v2073;
  uint64_t v2074;
  uint64_t v2075;
  unint64_t v2076;
  uint64_t v2077;
  uint64_t v2078;
  unint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  char v2082;
  uint64_t v2083;
  uint64_t v2084;
  unsigned int v2085;
  uint64_t v2086;
  unsigned int v2087;
  uint64_t v2088;
  int v2089;
  uint64_t v2090;
  uint64_t v2091;
  int v2092;
  unsigned int v2093;
  uint64_t v2094;
  uint64_t v2095;
  uint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  uint64_t v2099;
  unsigned int v2100;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t v2103;
  unsigned int v2104;
  uint64_t v2105;
  int v2106;
  uint64_t v2107;
  uint64_t v2108;
  int v2109;
  signed int v2110;
  uint64_t v2111;
  llvm::MachineFunction *v2112;
  int v2113;
  int v2114;
  int v2115;
  uint64_t v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  unsigned int v2126;
  int v2127;
  int v2128;
  int v2129;
  int v2130;
  int v2131;
  unint64_t v2132;
  uint64_t v2133;
  int v2134;
  int v2135;
  int v2136;
  unsigned int v2137;
  uint64_t v2138;
  uint64_t v2139;
  int v2140;
  unsigned int v2141;
  int v2142;
  int v2143;
  uint64_t *v2144;
  int v2145;
  uint64_t v2146;
  unint64_t v2147;
  uint64_t *v2148;
  uint64_t v2151;
  uint64_t v2158;
  uint64_t v2159;
  uint64_t v2161;
  uint64_t v2162;
  unint64_t v2163;
  unsigned int v2164;
  unint64_t v2165;
  unsigned int v2166;
  unint64_t v2167;
  __int128 v2168;
  unint64_t v2169;
  uint64_t v2170;
  uint64_t v2171;
  __int128 v2172;
  unint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  int v2176;
  uint64_t v2177;
  uint64_t v2178;
  int v2179;
  __int128 v2180;
  int v2181;
  unint64_t v2182;
  unint64_t v2183;
  unint64_t v2184;
  unint64_t v2185;
  uint64_t v2186;

  v2186 = *MEMORY[0x1E0C80C00];
  v4 = **(unsigned __int16 **)(a2 + 16);
  v5 = 2;
  v6 = a2;
  v7 = a1;
  switch(**(_WORD **)(a2 + 16))
  {
    case 0x3D:
    case 0x3E:
      v69 = *(_DWORD **)(a2 + 32);
      v70 = v69[1];
      if (v70 < 0 && (v71 = *(_QWORD *)(a1 + 16), v72 = v70 & 0x7FFFFFFF, v72 < *(_DWORD *)(v71 + 432)))
        v73 = *(_QWORD *)(*(_QWORD *)(v71 + 424) + 8 * v72);
      else
        v73 = 0;
      v141 = *(_QWORD *)a1;
      if ((_DWORD)v4 == 61)
        v142 = 59;
      else
        v142 = 60;
      *(_QWORD *)&v2168 = v73;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v69[9];
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v69[17];
      v2176 = 0;
      v143 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v141 + 32))(v141, v142, &v2168, 1, &v2172, 2, 0);
      v144 = *(_QWORD *)v7;
      v145 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 68);
      *(_QWORD *)&v2168 = v73;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v143;
      *((_QWORD *)&v2172 + 1) = v146;
      LODWORD(v2173) = 1;
      LODWORD(v2174) = v145;
      v2176 = 0;
      v147 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v144 + 32))(v144, 47, &v2168, 1, &v2172, 2, 0);
      v148 = *(_QWORD *)v7;
      v149 = *(_QWORD *)(v6 + 32);
      v150 = *(_DWORD *)(v149 + 4);
      LODWORD(v149) = *(_DWORD *)(v149 + 36);
      LODWORD(v2168) = v150;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v149;
      LODWORD(v2173) = 0;
      v2174 = v147;
      v2175 = v151;
      v2176 = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v148 + 32))(v148, 46, &v2168, 1, &v2172, 2, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0x3F:
    case 0x40:
      sub_1C6271F34((uint64_t *)a1, a2);
      return 1;
    case 0x49:
      v353 = *(_QWORD *)(a2 + 32);
      v354 = *(_DWORD *)(v353 + 4);
      v355 = *(_DWORD *)(v353 + 36);
      v356 = *(_QWORD *)(v353 + 80);
      v357 = *(_QWORD *)(a1 + 16);
      if (v354 < 0 && (v354 & 0x7FFFFFFFu) < *(_DWORD *)(v357 + 432))
        v358 = *(_QWORD *)(*(_QWORD *)(v357 + 424) + 8 * (v354 & 0x7FFFFFFF));
      else
        v358 = 0;
      v2184 = v358;
      if (v355 < 0 && (v355 & 0x7FFFFFFFu) < *(_DWORD *)(v357 + 432))
      {
        v614 = *(_QWORD *)(*(_QWORD *)(v357 + 424) + 8 * (v355 & 0x7FFFFFFF));
        v2182 = v614;
        if ((v614 & 0xFFFFFFFFFFFFFFF9) != 0 && (v614 & 4) != 0)
        {
          v616 = 3;
          if ((v614 & 1) == 0)
            v616 = 19;
          v617 = v614 >> v616;
          if ((v614 & 2) != 0)
            v618 = (v614 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v617) | 2;
          else
            v618 = v614 & 0x8000000000000000 | (8 * v617) | 1;
          *(_QWORD *)&v2172 = v618;
          v620 = sub_1C4825F50((unint64_t *)&v2172);
          if ((_DWORD)v619 == 1)
          v622 = sub_1C4825F50(&v2184);
          if ((_DWORD)v621 == 1)
          v623 = v356 / v620;
          if (!(v356 % v620) && !(v622 % v620))
          {
            v624 = v622 + v356;
            v626 = sub_1C4825F50(&v2182);
            if ((_DWORD)v625 == 1)
            if (v626 >= v624)
            {
              v627 = *(uint64_t **)a1;
              v628 = 3;
              if ((v2182 & 1) == 0)
                v628 = 19;
              v629 = v2182 & 0x8000000000000000 | (8 * (v2182 >> v628)) | 1;
              v630 = 35;
              v631 = 19;
              if ((v2182 & 4) == 0)
                v630 = 19;
              v632 = v2182 >> v630;
              if ((v2182 & 4) == 0)
                v631 = 3;
              if ((v2182 & 1) != 0)
                v631 = 3;
              v633 = (8 * (unsigned __int16)(v2182 >> v631)) & 0xFFFFF8000007FFFFLL | ((v632 & 0xFFFFFF) << 19);
              if ((v2182 & 2) != 0)
                v634 = v633 | 2;
              else
                v634 = v629;
              LODWORD(v2172) = v355;
              LODWORD(v2173) = 0;
              sub_1C5544C30(v627, v634, (int *)&v2172);
              *(_QWORD *)&v2172 = &v2173;
              *((_QWORD *)&v2172 + 1) = 0x800000000;
              if (v623 >= v624 / v620)
              {
                v637 = 0;
                v1905 = (int *)&v2173;
              }
              else
              {
                v636 = v635;
                v637 = 0;
                do
                {
                  v638 = *(_DWORD *)(*(_QWORD *)(v636 + 32) + 32 * v623 + 4);
                  if (v637 >= HIDWORD(v2172))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2172, (uint64_t)&v2173, v637 + 1, 4);
                    v637 = DWORD2(v2172);
                  }
                  *(_DWORD *)(v2172 + 4 * v637) = v638;
                  v639 = DWORD2(v2172);
                  v637 = ++DWORD2(v2172);
                  ++v623;
                }
                while ((_DWORD)v623 != v624 / v620);
                v1905 = (int *)v2172;
                if (!v639)
                {
                  v1967 = *(_QWORD *)a1;
                  LODWORD(v2180) = v354;
                  DWORD2(v2180) = 1;
                  LODWORD(v2168) = *(_DWORD *)v2172;
                  LODWORD(v2169) = 0;
                  (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1967 + 32))(v1967, 19, &v2180, 1, &v2168, 1, 0);
                  goto LABEL_1516;
                }
              }
              v1906 = *(_QWORD *)a1;
              LODWORD(v2168) = v354;
              DWORD2(v2168) = 1;
              sub_1C5544D6C(v1906, (uint64_t)&v2168, v1905, v637);
LABEL_1516:
              v1907 = v6;
              if ((*(_BYTE *)v6 & 4) == 0)
              {
                v1907 = v6;
                if ((*(_WORD *)(v6 + 44) & 8) != 0)
                {
                  v1907 = v6;
                  do
                    v1907 = *(_QWORD *)(v1907 + 8);
                  while ((*(_WORD *)(v1907 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(v6 + 24) + 40, v6, *(_QWORD *)(v1907 + 8));
              v612 = (void *)v2172;
              if ((unint64_t *)v2172 != &v2173)
                goto LABEL_1162;
              return 1;
            }
          }
        }
      }
      else
      {
        v2182 = 0;
      }
      if ((v2184 & 1) == 0)
        return 2;
      v640 = v2182;
      if ((v2182 & 1) != 0)
        goto LABEL_612;
      v5 = 2;
      if ((v2182 & 0xFFFFFFFFFFFFFFF9) == 0 || (v2182 & 4) == 0)
        return v5;
      v641 = (v2182 >> 16) & 0x7FFFFFFFFF8 | 2;
      if ((v2182 & 2) == 0)
        v641 = v2182 & 0x8000000000000000 | (v2182 >> 16) & 0x7FFFFFFF8 | 1;
      if (v2184 == v641)
      {
        v643 = sub_1C4825F50(&v2182);
        if ((_DWORD)v642 == 1)
        v640 = (8 * v643) | 1;
        v644 = *(_QWORD *)a1;
        *(_QWORD *)&v2168 = v640;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v355;
        LODWORD(v2173) = 0;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v644 + 32))(v644, 82, &v2168, 1, &v2172, 1, 0);
        v355 = *(_DWORD *)(*(_QWORD *)(v645 + 32) + 4);
LABEL_612:
        v646 = *(_QWORD *)a1;
        if ((_DWORD)v356)
        {
          *(_QWORD *)&v2172 = v640;
          DWORD2(v2172) = 0;
          v647 = sub_1C5544694(v646, (unint64_t *)&v2172, v356);
          v648 = *(_QWORD *)a1;
          *(_QWORD *)&v2168 = v640;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v355;
          LODWORD(v2173) = 0;
          v2174 = v647;
          v2175 = v649;
          v2176 = 1;
          v650 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v648 + 32))(v648, 128, &v2168, 1, &v2172, 2, 0);
          v651 = *(_QWORD *)a1;
          LODWORD(v2168) = v354;
          DWORD2(v2168) = 1;
          *(_QWORD *)&v2172 = v650;
          *((_QWORD *)&v2172 + 1) = v652;
          LODWORD(v2173) = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v651 + 32))(v651, 119, &v2168, 1, &v2172, 1, 0);
        }
        else
        {
          LODWORD(v2168) = v354;
          DWORD2(v2168) = 1;
          LODWORD(v2172) = v355;
          LODWORD(v2173) = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v646 + 32))(v646, 119, &v2168, 1, &v2172, 1, 0);
        }
        v38 = *(_QWORD *)(v6 + 24);
        v39 = v6;
        if ((*(_BYTE *)v6 & 4) == 0)
        {
          v39 = v6;
          if ((*(_WORD *)(v6 + 44) & 8) != 0)
          {
            v39 = v6;
            do
              v39 = *(_QWORD *)(v39 + 8);
            while ((*(_WORD *)(v39 + 44) & 8) != 0);
          }
        }
        goto LABEL_1550;
      }
      return 2;
    case 0x4A:
      v393 = *(_DWORD *)(a2 + 40);
      v394 = *(_QWORD *)(a2 + 32);
      v395 = *(_DWORD *)(v394 + 32 * (v393 - 1) + 4);
      v396 = *(_DWORD *)(v394 + 4);
      v397 = *(_QWORD *)(a1 + 16);
      if (v396 < 0 && (v396 & 0x7FFFFFFFu) < *(_DWORD *)(v397 + 432))
      {
        v2184 = *(_QWORD *)(*(_QWORD *)(v397 + 424) + 8 * (v396 & 0x7FFFFFFF));
        if ((v2184 & 0xFFFFFFFFFFFFFFF9) != 0 && (v2184 & 6) == 2)
          return 2;
      }
      else
      {
        v2184 = 0;
      }
      if (v395 < 0 && (v776 = v395 & 0x7FFFFFFF, v777 = *(_DWORD *)(v397 + 432), (v395 & 0x7FFFFFFFu) < v777))
      {
        *(_QWORD *)&v2180 = *(_QWORD *)(*(_QWORD *)(v397 + 424) + 8 * v776);
        if ((v2180 & 1) != 0)
          goto LABEL_1033;
      }
      else
      {
        *(_QWORD *)&v2180 = 0;
      }
      v1219 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 8) + 40);
      v1221 = sub_1C4825F50((unint64_t *)&v2180);
      if ((_DWORD)v1220 == 1)
      v1222 = (8 * v1221) | 1;
      if ((v2180 & 0xFFFFFFFFFFFFFFF9) == 0 || (v2180 & 6) != 2)
      {
        v1343 = 3;
        if ((v2180 & 1) == 0)
          v1343 = 19;
        v1344 = v2180 & 0x8000000000000000 | (8 * ((unint64_t)v2180 >> v1343)) | 1;
        v1345 = 35;
        v1346 = 19;
        if ((v2180 & 4) == 0)
          v1345 = 19;
        v1347 = (unint64_t)v2180 >> v1345;
        if ((v2180 & 4) == 0)
          v1346 = 3;
        if ((v2180 & 1) != 0)
          v1346 = 3;
        v1348 = (8 * (unsigned __int16)((unint64_t)v2180 >> v1346)) & 0xFFFFF8000007FFFFLL | ((v1347 & 0xFFFFFF) << 19);
        if ((v2180 & 2) != 0)
          v1349 = v1348 | 2;
        else
          v1349 = v1344;
        if ((v1349 & 0xFFFFFFFFFFFFFFF9) != 0 && (v1349 & 6) == 2)
        {
          v1350 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = (8 * v1221) | 1;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v395;
          LODWORD(v2173) = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1350 + 32))(v1350, 80, &v2168, 1, &v2172, 1, 0);
          v395 = *(_DWORD *)(*(_QWORD *)(v1351 + 32) + 4);
        }
        v1352 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = (8 * v1221) | 1;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v395;
        LODWORD(v2173) = 0;
        v1229 = *(void (**)(void))(*(_QWORD *)v1352 + 32);
        goto LABEL_1030;
      }
      v1223 = 35;
      if ((v2180 & 4) == 0)
        v1223 = 19;
      v1224 = *(__int32 **)(v1219 + 656);
      v1225 = *(unsigned int *)(v1219 + 664);
      v1226 = wmemchr(v1224, ((unint64_t)v2180 >> v1223) & 0xFFFFFF, v1225);
      if (v1226)
        v1227 = v1226;
      else
        v1227 = &v1224[v1225];
      if (v1225 == v1227 - v1224)
      {
        v1228 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v1222;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v395;
        LODWORD(v2173) = 0;
        v1229 = *(void (**)(void))(*(_QWORD *)v1228 + 32);
LABEL_1030:
        v1229();
        v395 = *(_DWORD *)(*(_QWORD *)(v1353 + 32) + 4);
        if (!v395)
          return 2;
        if ((v395 & 0x80000000) == 0)
          goto LABEL_1062;
        v397 = *(_QWORD *)(v7 + 16);
        v777 = *(_DWORD *)(v397 + 432);
        LODWORD(v776) = v395 & 0x7FFFFFFF;
LABEL_1033:
        if (v776 < v777)
        {
          v1354 = *(_QWORD *)(*(_QWORD *)(v397 + 424) + 8 * v776);
LABEL_1063:
          v1369 = *(_QWORD *)v7;
          LODWORD(v2168) = v396;
          DWORD2(v2168) = 1;
          LODWORD(v2172) = v395;
          LODWORD(v2173) = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1369 + 32))(v1369, 119, &v2168, 1, &v2172, 1, 0);
          v1371 = sub_1C4825F50(&v2184);
          if ((_DWORD)v1370 == 1)
          if (v393 != 2)
          {
            v1372 = v393 - 2;
            v1373 = 36;
            v1374 = v1371;
            do
            {
              v1375 = *(_QWORD *)v7;
              *(_QWORD *)&v2172 = v1354;
              DWORD2(v2172) = 0;
              v1376 = sub_1C5544694(v1375, (unint64_t *)&v2172, v1374);
              v1377 = *(_QWORD *)v7;
              *(_QWORD *)&v2168 = v1354;
              DWORD2(v2168) = 0;
              LODWORD(v2172) = v395;
              LODWORD(v2173) = 0;
              v2174 = v1376;
              v2175 = v1378;
              v2176 = 1;
              v1379 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1377 + 32))(v1377, 128, &v2168, 1, &v2172, 2, 0);
              v1380 = *(_QWORD *)v7;
              LODWORD(v2168) = *(_DWORD *)(*(_QWORD *)(v6 + 32) + v1373);
              DWORD2(v2168) = 1;
              *(_QWORD *)&v2172 = v1379;
              *((_QWORD *)&v2172 + 1) = v1381;
              LODWORD(v2173) = 1;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1380 + 32))(v1380, 119, &v2168, 1, &v2172, 1, 0);
              v1374 += v1371;
              v1373 += 32;
              --v1372;
            }
            while (v1372);
          }
          v38 = *(_QWORD *)(v6 + 24);
          v39 = v6;
          if ((*(_BYTE *)v6 & 4) == 0)
          {
            v39 = v6;
            if ((*(_WORD *)(v6 + 44) & 8) != 0)
            {
              v39 = v6;
              do
                v39 = *(_QWORD *)(v39 + 8);
              while ((*(_WORD *)(v39 + 44) & 8) != 0);
            }
          }
          goto LABEL_1550;
        }
LABEL_1062:
        v1354 = 0;
        goto LABEL_1063;
      }
      return 2;
    case 0x4B:
      v378 = *(_QWORD *)(a2 + 32);
      v379 = *(_DWORD *)(v378 + 36);
      v380 = *(_DWORD *)(v378 + 68);
      v382 = *(_QWORD *)(a1 + 16);
      if (v379 < 0 && (v379 & 0x7FFFFFFFu) < *(_DWORD *)(v382 + 432))
        v383 = *(_QWORD *)(*(_QWORD *)(v382 + 424) + 8 * (v379 & 0x7FFFFFFF));
      else
        v383 = 0;
      v678 = *(_QWORD *)(v378 + 112);
      v679 = *(_DWORD *)(v378 + 4);
      v2184 = v383;
      if (v380 < 0 && (v380 & 0x7FFFFFFFu) < *(_DWORD *)(v382 + 432))
        v680 = *(_QWORD *)(*(_QWORD *)(v382 + 424) + 8 * (v380 & 0x7FFFFFFF));
      else
        v680 = 0;
      v2182 = v680;
      if ((v383 & 0xFFFFFFFFFFFFFFF9) == 0
        || (v383 & 4) == 0
        || (v680 & 0xFFFFFFFFFFFFFFF9) != 0 && (v680 & 2) != 0 && (v680 & 4) == 0)
      {
        goto LABEL_654;
      }
      v681 = 3;
      if ((v383 & 1) == 0)
        v681 = 19;
      v682 = v383 >> v681;
      if ((v383 & 2) != 0)
        v683 = (v383 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v682) | 2;
      else
        v683 = v383 & 0x8000000000000000 | (8 * v682) | 1;
      v2136 = v679;
      *(_QWORD *)&v2180 = v683;
      v685 = sub_1C4825F50((unint64_t *)&v2180);
      if ((_DWORD)v684 == 1)
      v687 = sub_1C4825F50(&v2182);
      if ((_DWORD)v686 == 1)
      v688 = v685;
      v689 = v678 / v685;
      if (v678 % v685 || v687 % v685)
        goto LABEL_653;
      v690 = v678 + v687;
      v692 = sub_1C4825F50(&v2184);
      if ((_DWORD)v691 == 1)
      if (v690 > v692)
      {
LABEL_653:
        v680 = v2182;
        v679 = v2136;
LABEL_654:
        v693 = v680 & 0xFFFFFFFFFFFFFFF9;
        if ((v680 & 0xFFFFFFFFFFFFFFF9) != 0 && (v680 & 4) != 0)
          return 2;
        if ((v2184 & 0xFFFFFFFFFFFFFFF9) != 0 && (v2184 & 4) != 0)
        {
          v694 = 3;
          if ((v2184 & 1) == 0)
            v694 = 19;
          v695 = v2184 >> v694;
          v696 = v2184 & 0x8000000000000000 | (8 * v695) | 1;
          v697 = (v2184 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v695) | 2;
          if ((v2184 & 2) == 0)
            v697 = v696;
          if (v697 != v680)
            return 2;
        }
        v698 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 8) + 40);
        if ((v2184 & 0xFFFFFFFFFFFFFFF9) != 0 && (v2184 & 6) == 2)
        {
          v699 = 35;
          if ((v2184 & 4) == 0)
            v699 = 19;
          v700 = *(__int32 **)(v698 + 656);
          v701 = *(unsigned int *)(v698 + 664);
          v702 = wmemchr(v700, (v2184 >> v699) & 0xFFFFFF, v701);
          if (v702)
            v703 = v702;
          else
            v703 = &v700[v701];
          if (v701 != v703 - v700)
            return 2;
          v680 = v2182;
          v693 = v2182 & 0xFFFFFFFFFFFFFFF9;
        }
        if (v693 && (v680 & 6) == 2)
        {
          v704 = 35;
          if ((v680 & 4) == 0)
            v704 = 19;
          v705 = *(__int32 **)(v698 + 656);
          v706 = *(unsigned int *)(v698 + 664);
          v707 = wmemchr(v705, (v680 >> v704) & 0xFFFFFF, v706);
          v708 = v707 ? v707 : &v705[v706];
          if (v706 != v708 - v705)
            return 2;
        }
        v709 = v2184;
        if ((v2184 & 1) == 0)
        {
          v711 = sub_1C4825F50(&v2184);
          if ((_DWORD)v710 == 1)
          v712 = *(uint64_t **)a1;
          v709 = (8 * v711) | 1;
          *(_QWORD *)&v2168 = v709;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v379;
          LODWORD(v2173) = 0;
          sub_1C5546EF4(v712, (uint64_t *)&v2168, (int *)&v2172);
          v379 = *(_DWORD *)(*(_QWORD *)(v713 + 32) + 4);
        }
        if ((v2182 & 1) == 0)
        {
          v715 = sub_1C4825F50(&v2182);
          if ((_DWORD)v714 == 1)
          v716 = *(_QWORD *)a1;
          *(_QWORD *)&v2168 = (8 * v715) | 1;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v380;
          LODWORD(v2173) = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v716 + 32))(v716, 80, &v2168, 1, &v2172, 1, 0);
          v380 = *(_DWORD *)(*(_QWORD *)(v717 + 32) + 4);
        }
        v718 = *(_QWORD *)a1;
        *(_QWORD *)&v2168 = v709;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v380;
        LODWORD(v2173) = 0;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v718 + 32))(v718, 126, &v2168, 1, &v2172, 1, 0);
        v720 = *(_DWORD *)(*(_QWORD *)(v719 + 32) + 4);
        if (v678)
        {
          v721 = *(_QWORD *)a1;
          *(_QWORD *)&v2172 = v709;
          DWORD2(v2172) = 0;
          v722 = sub_1C5544694(v721, (unint64_t *)&v2172, v678);
          v723 = *(_QWORD *)a1;
          *(_QWORD *)&v2168 = v709;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v720;
          LODWORD(v2173) = 0;
          v2174 = v722;
          v2175 = v724;
          v2176 = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v723 + 32))(v723, 127, &v2168, 1, &v2172, 2, 0);
          v720 = *(_DWORD *)(*(_QWORD *)(v725 + 32) + 4);
        }
        v727 = sub_1C4825F50(&v2184);
        if ((_DWORD)v726 == 1)
        v729 = sub_1C4825F50(&v2182);
        if ((_DWORD)v728 == 1)
        v730 = v729 + v678;
        DWORD2(v2180) = v727;
        if (v727 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v2180, 0, 0);
        else
          *(_QWORD *)&v2180 = 0;
        sub_1C6272CF0((uint64_t)&v2180, v730, v678);
        v731 = *(llvm::ConstantInt ******)a1;
        *(_QWORD *)&v2172 = v709;
        DWORD2(v2172) = 0;
        v733 = llvm::ConstantInt::get(***v731[1], (llvm::LLVMContext *)&v2180, v732);
        v734 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v731)[2])(v731, &v2172, v733);
        v735 = *(_QWORD *)a1;
        *(_QWORD *)&v2168 = v709;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v379;
        LODWORD(v2173) = 0;
        v2174 = v734;
        v2175 = v736;
        v2176 = 1;
        v737 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v735 + 32))(v735, 65, &v2168, 1, &v2172, 2, 0);
        v738 = *(_QWORD *)a1;
        *(_QWORD *)&v2168 = v709;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2172 = v737;
        *((_QWORD *)&v2172 + 1) = v739;
        LODWORD(v2173) = 1;
        LODWORD(v2174) = v720;
        v2176 = 0;
        v740 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v738 + 32))(v738, 66, &v2168, 1, &v2172, 2, 0);
        v741 = *(uint64_t **)a1;
        LODWORD(v2168) = v679;
        DWORD2(v2168) = 1;
        *(_QWORD *)&v2172 = v740;
        *((_QWORD *)&v2172 + 1) = v742;
        LODWORD(v2173) = 1;
        sub_1C5546EF4(v741, (uint64_t *)&v2168, (int *)&v2172);
        v743 = v6;
        if ((*(_BYTE *)v6 & 4) == 0)
        {
          v743 = v6;
          if ((*(_WORD *)(v6 + 44) & 8) != 0)
          {
            v743 = v6;
            do
              v743 = *(_QWORD *)(v743 + 8);
            while ((*(_WORD *)(v743 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v6 + 24) + 40, v6, *(_QWORD *)(v743 + 8));
LABEL_1245:
        if (DWORD2(v2180) >= 0x41)
        {
          v576 = v2180;
          if ((_QWORD)v2180)
LABEL_1247:
            MEMORY[0x1CAA32F9C](v576, 0x1000C8000313F17);
        }
      }
      else
      {
        v1843 = *(uint64_t **)a1;
        LODWORD(v2172) = v379;
        LODWORD(v2173) = 0;
        sub_1C5544C30(v1843, v2180, (int *)&v2172);
        v1845 = v1844;
        LODWORD(v1846) = 0;
        *(_QWORD *)&v2172 = &v2173;
        *((_QWORD *)&v2172 + 1) = 0x800000000;
        if (v688 <= v678)
        {
          v1876 = 0;
          v1846 = 0;
          v1877 = 0;
          do
          {
            v1878 = *(_DWORD *)(*(_QWORD *)(v1845 + 32) + 32 * v1846 + 4);
            if (v1876 >= HIDWORD(v2172))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2172, (uint64_t)&v2173, v1876 + 1, 4);
              v1876 = DWORD2(v2172);
            }
            *(_DWORD *)(v2172 + 4 * v1876) = v1878;
            v1876 = ++DWORD2(v2172);
            v1846 = ++v1877;
          }
          while (v689 > v1877);
        }
        v1848 = sub_1C4825F50(&v2182);
        if ((_DWORD)v1847 == 1)
        if (v1848 <= v688)
        {
          v1879 = DWORD2(v2172);
          if (DWORD2(v2172) >= HIDWORD(v2172))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2172, (uint64_t)&v2173, DWORD2(v2172) + 1, 4);
            v1879 = DWORD2(v2172);
          }
          *(_DWORD *)(v2172 + 4 * v1879) = v380;
          ++DWORD2(v2172);
          v1856 = (v1846 + 1);
        }
        else
        {
          v1849 = *(uint64_t **)a1;
          LODWORD(v2168) = v380;
          LODWORD(v2169) = 0;
          sub_1C5544C30(v1849, v2180, (int *)&v2168);
          v1850 = v690 / v688;
          if (v1850 <= v1846)
          {
            v1856 = v1846;
          }
          else
          {
            v1851 = v1847;
            v1852 = 0;
            v1853 = DWORD2(v2172);
            v1854 = v1846 + 1;
            do
            {
              v1855 = *(_DWORD *)(*((_QWORD *)v1851 + 4) + 32 * v1852 + 4);
              if (v1853 >= HIDWORD(v2172))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2172, (uint64_t)&v2173, v1853 + 1, 4);
                v1853 = DWORD2(v2172);
              }
              *(_DWORD *)(v2172 + 4 * v1853) = v1855;
              v1853 = ++DWORD2(v2172);
              v1856 = v1854 + v1852++;
            }
            while (v1850 > v1856);
          }
        }
        for (i = (32 * v1856) | 4; ; i += 32)
        {
          v1882 = v2184;
          if ((v2184 & 2) != 0)
            v1883 = 0x800000000000000;
          else
            v1883 = 0x8000000000000;
          if ((v1883 & v2184) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v1847);
            v1882 = v2184;
          }
          if (v1856 >= (unsigned __int16)(v1882 >> 3))
            break;
          v1884 = *(_DWORD *)(*(_QWORD *)(v1845 + 32) + i);
          v1885 = DWORD2(v2172);
          if (DWORD2(v2172) >= (unint64_t)HIDWORD(v2172))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2172, (uint64_t)&v2173, DWORD2(v2172) + 1, 4);
            v1885 = DWORD2(v2172);
          }
          *(_DWORD *)(v2172 + 4 * v1885) = v1884;
          ++DWORD2(v2172);
          ++v1856;
        }
        v1886 = *(_QWORD *)a1;
        LODWORD(v2168) = v2136;
        DWORD2(v2168) = 1;
        sub_1C5544D6C(v1886, (uint64_t)&v2168, (int *)v2172, DWORD2(v2172));
        v1887 = v6;
        if ((*(_BYTE *)v6 & 4) == 0)
        {
          v1887 = v6;
          if ((*(_WORD *)(v6 + 44) & 8) != 0)
          {
            v1887 = v6;
            do
              v1887 = *(_QWORD *)(v1887 + 8);
            while ((*(_WORD *)(v1887 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v6 + 24) + 40, v6, *(_QWORD *)(v1887 + 8));
        v612 = (void *)v2172;
        if ((unint64_t *)v2172 != &v2173)
          goto LABEL_1162;
      }
      return 1;
    case 0x4C:
      v399 = *(_QWORD *)(a2 + 32);
      v400 = *(_DWORD *)(v399 + 4);
      v401 = *(_DWORD *)(v399 + 36);
      v402 = *(_QWORD *)(a1 + 16);
      v2115 = v400;
      if (v400 < 0 && (v403 = v400 & 0x7FFFFFFF, v403 < *(_DWORD *)(v402 + 432)))
        v404 = *(_QWORD *)(*(_QWORD *)(v402 + 424) + 8 * v403);
      else
        v404 = 0;
      v778 = *(_DWORD *)(a2 + 40);
      *(_QWORD *)&v2180 = v404;
      if (v401 < 0 && (v401 & 0x7FFFFFFFu) < *(_DWORD *)(v402 + 432))
        v779 = *(_QWORD *)(*(_QWORD *)(v402 + 424) + 8 * (v401 & 0x7FFFFFFF));
      else
        v779 = 0;
      v2184 = v779;
      v2137 = sub_1C4825F50(&v2184);
      if ((_DWORD)v780 == 1)
      v782 = sub_1C4825F50((unint64_t *)&v2180);
      if ((_DWORD)v781 == 1)
      v2158 = v6;
      v783 = (8 * v782) | 1;
      v784 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = v783;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v401;
      LODWORD(v2173) = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v784 + 32))(v784, 126, &v2168, 1, &v2172, 1, 0);
      v786 = *(_DWORD *)(*(_QWORD *)(v785 + 32) + 4);
      if (v778 == 2)
      {
        GenericVirtualRegister = *(_DWORD *)(*(_QWORD *)(v785 + 32) + 4);
      }
      else
      {
        v1289 = -v778;
        v1290 = v2137;
        v1291 = 2;
        do
        {
          v1292 = *(_DWORD *)(*(_QWORD *)(v2158 + 32) + 32 * v1291 + 4);
          v1293 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v783;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v1292;
          LODWORD(v2173) = 0;
          v1294 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1293 + 32))(v1293, 126, &v2168, 1, &v2172, 1, 0);
          v1296 = v1295;
          if (v1289 + v1291 != -1 || (GenericVirtualRegister = v2115, v783 != (_QWORD)v2180))
            GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(v7 + 16), v783, "", 0);
          ++v1291;
          v1297 = *(_QWORD *)v7;
          *(_QWORD *)&v2172 = v783;
          DWORD2(v2172) = 0;
          v1298 = sub_1C5544694(v1297, (unint64_t *)&v2172, v1290);
          v1299 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v783;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1294;
          *((_QWORD *)&v2172 + 1) = v1296;
          LODWORD(v2173) = 1;
          v2174 = v1298;
          v2175 = v1300;
          v2176 = 1;
          v1301 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1299 + 32))(v1299, 127, &v2168, 1, &v2172, 2, 0);
          v1302 = *(_QWORD *)v7;
          LODWORD(v2168) = GenericVirtualRegister;
          DWORD2(v2168) = 1;
          LODWORD(v2172) = v786;
          LODWORD(v2173) = 0;
          v2174 = v1301;
          v2175 = v1303;
          v2176 = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1302 + 32))(v1302, 66, &v2168, 1, &v2172, 2, 0);
          v1290 += v2137;
          v786 = GenericVirtualRegister;
        }
        while (v1289 + v1291);
      }
      v1304 = v2158;
      if ((v2180 & 0xFFFFFFFFFFFFFFF9) == 0 || (v2180 & 6) != 2)
        goto LABEL_991;
      v1305 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v7 + 8) + 40);
      v1306 = 35;
      if ((v2180 & 4) == 0)
        v1306 = 19;
      v1307 = *(__int32 **)(v1305 + 656);
      v1308 = *(unsigned int *)(v1305 + 664);
      v1309 = wmemchr(v1307, ((unint64_t)v2180 >> v1306) & 0xFFFFFF, v1308);
      if (v1309)
        v1310 = v1309;
      else
        v1310 = &v1307[v1308];
      if (v1308 != v1310 - v1307)
        return 2;
      v1311 = *(_QWORD *)v7;
      LODWORD(v2168) = v2115;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = GenericVirtualRegister;
      LODWORD(v2173) = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1311
                                                                                                 + 32))(v1311, 81, &v2168, 1, &v2172, 1, 0);
LABEL_991:
      v1312 = *(_QWORD *)(v2158 + 24);
      v1313 = v2158;
      if ((*(_BYTE *)v2158 & 4) == 0)
      {
        v1313 = v2158;
        if ((*(_WORD *)(v2158 + 44) & 8) != 0)
        {
          v1313 = v2158;
          do
            v1313 = *(_QWORD *)(v1313 + 8);
          while ((*(_WORD *)(v1313 + 44) & 8) != 0);
        }
      }
      goto LABEL_1328;
    case 0x52:
      v348 = *(_QWORD *)(a2 + 32);
      v349 = *(_DWORD *)(v348 + 4);
      v350 = *(_DWORD *)(v348 + 36);
      v351 = *(_QWORD *)(a1 + 16);
      if (v349 < 0 && (v349 & 0x7FFFFFFFu) < *(_DWORD *)(v351 + 432))
        v352 = *(_QWORD *)(*(_QWORD *)(v351 + 424) + 8 * (v349 & 0x7FFFFFFF));
      else
        v352 = 0;
      if ((v350 & 0x80000000) == 0
        || (v350 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v351 + 432)
        || ((v604 = *(_QWORD *)(*(_QWORD *)(v351 + 424) + 8 * (v350 & 0x7FFFFFFF)), (v604 & 0xFFFFFFFFFFFFFFF9) != 0)
          ? (v605 = (*(_QWORD *)(*(_QWORD *)(v351 + 424) + 8 * (v350 & 0x7FFFFFFF)) & 4) == 0)
          : (v605 = 1),
            v605))
      {
        v5 = 2;
        if ((v352 & 0xFFFFFFFFFFFFFFF9) == 0 || (v352 & 4) == 0)
          return v5;
        *(_QWORD *)&v2172 = &v2173;
        *((_QWORD *)&v2172 + 1) = 0x800000000;
        v606 = 3;
        if ((v352 & 1) == 0)
          v606 = 19;
        v607 = v352 >> v606;
        if ((v352 & 2) != 0)
          v608 = (v352 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v607) | 2;
        else
          v608 = v352 & 0x8000000000000000 | (8 * v607) | 1;
        sub_1C5536990((uint64_t)&v2172, *(uint64_t **)a1, v350, v608);
        v609 = *(_QWORD *)v7;
        LODWORD(v2168) = v349;
        DWORD2(v2168) = 1;
        sub_1C5544D6C(v609, (uint64_t)&v2168, (int *)v2172, DWORD2(v2172));
        v610 = *(_QWORD *)(v6 + 24);
        v611 = v6;
        if ((*(_BYTE *)v6 & 4) == 0)
        {
          v611 = v6;
          if ((*(_WORD *)(v6 + 44) & 8) != 0)
          {
            v611 = v6;
            do
              v611 = *(_QWORD *)(v611 + 8);
            while ((*(_WORD *)(v611 + 44) & 8) != 0);
          }
        }
      }
      else
      {
        v1491 = 3;
        if ((v604 & 1) == 0)
          v1491 = 19;
        v1492 = v604 >> v1491;
        if ((v604 & 2) != 0)
          v1493 = (v604 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v1492) | 2;
        else
          v1493 = v604 & 0x8000000000000000 | (8 * v1492) | 1;
        *(_QWORD *)&v2172 = &v2173;
        *((_QWORD *)&v2172 + 1) = 0x800000000;
        if ((v352 & 0xFFFFFFFFFFFFFFF9) != 0 && (v352 & 4) != 0)
        {
          if ((v352 & 2) != 0)
            v1495 = 0x800000000000000;
          else
            v1495 = 0x8000000000000;
          if ((v1495 & v352) != 0)
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
          if ((v604 & 2) != 0)
            v1496 = 0x800000000000000;
          else
            v1496 = 0x8000000000000;
          if ((v1496 & v604) != 0)
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
          v1497 = (unsigned __int16)(v352 >> 3);
          v1498 = (unsigned __int16)(v604 >> 3);
          v1499 = 3;
          if ((v352 & 1) == 0)
            v1499 = 19;
          v1500 = v352 >> v1499;
          v7 = a1;
          if ((v352 & 2) != 0)
            v1501 = (v352 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v1500) | 2;
          else
            v1501 = v352 & 0x8000000000000000 | (8 * v1500) | 1;
          if (v1498 >= v1497)
          {
            if (v1498 > v1497)
              v1493 = sub_1C4953AD0(v1498 / v1497, v1493);
          }
          else
          {
            v1501 = sub_1C4953AD0(v1497 / v1498, v1501);
          }
          sub_1C5536990((uint64_t)&v2172, *(uint64_t **)a1, v350, v1493);
          if (DWORD2(v2172))
          {
            v1740 = (int *)v2172;
            v1741 = 4 * DWORD2(v2172);
            do
            {
              v1742 = *(_QWORD *)a1;
              v1743 = *v1740;
              *(_QWORD *)&v2180 = v1501;
              DWORD2(v2180) = 0;
              LODWORD(v2168) = v1743;
              LODWORD(v2169) = 0;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1742 + 32))(v1742, 82, &v2180, 1, &v2168, 1, 0);
              *v1740++ = *(_DWORD *)(*(_QWORD *)(v1744 + 32) + 4);
              v1741 -= 4;
            }
            while (v1741);
          }
        }
        else
        {
          sub_1C5536990((uint64_t)&v2172, *(uint64_t **)a1, v350, v1493);
        }
        v1745 = *(_QWORD *)v7;
        LODWORD(v2168) = v349;
        DWORD2(v2168) = 1;
        sub_1C5544D6C(v1745, (uint64_t)&v2168, (int *)v2172, DWORD2(v2172));
        v610 = *(_QWORD *)(v6 + 24);
        v611 = v6;
        if ((*(_BYTE *)v6 & 4) == 0)
        {
          v611 = v6;
          if ((*(_WORD *)(v6 + 44) & 8) != 0)
          {
            v611 = v6;
            do
              v611 = *(_QWORD *)(v611 + 8);
            while ((*(_WORD *)(v611 + 44) & 8) != 0);
          }
        }
      }
      sub_1C487FE80(v610 + 40, v6, *(_QWORD *)(v611 + 8));
      v612 = (void *)v2172;
      if ((unint64_t *)v2172 != &v2173)
        goto LABEL_1162;
      return 1;
    case 0x56:
      v384 = *(_QWORD *)(a2 + 32);
      v385 = *(_DWORD *)(v384 + 4);
      v386 = *(_DWORD *)(v384 + 36);
      v387 = *(unsigned __int16 *)(a2 + 44);
      v2130 = v385;
      if (v385 < 0 && (v388 = *(_QWORD *)(a1 + 16), (v385 & 0x7FFFFFFFu) < *(_DWORD *)(v388 + 432)))
      {
        v389 = *(_QWORD *)(*(_QWORD *)(v388 + 424) + 8 * (v385 & 0x7FFFFFFF));
        if ((v389 & 0xFFFFFFFFFFFFFFF9) != 0
          && (*(_QWORD *)(*(_QWORD *)(v388 + 424) + 8 * (v385 & 0x7FFFFFFF)) & 4) != 0)
        {
          v391 = 0x800000000000000;
          if ((v389 & 2) == 0)
            v391 = 0x8000000000000;
          v392 = v389 & 0x7FFF8 | ((unint64_t)((v391 & v389) != 0) << 51) | 0x80004;
LABEL_701:
          v2076 = v392;
          v744 = *(_QWORD *)a1;
          v745 = v387 | 0x100000000;
          *(_QWORD *)&v2168 = v389;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v386;
          LODWORD(v2173) = 0;
          v746 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v744 + 32))(v744, 85, &v2168, 1, &v2172, 1, v387 | 0x100000000);
          v2105 = v747;
          v2118 = v746;
          v748 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v389;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v386;
          LODWORD(v2173) = 0;
          v2174 = v746;
          v2175 = v747;
          v2176 = 1;
          v749 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v748 + 32))(v748, 164, &v2168, 1, &v2172, 2, v745);
          v750 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v389;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v749;
          *((_QWORD *)&v2172 + 1) = v751;
          LODWORD(v2173) = 1;
          v2083 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v750 + 32))(v750, 184, &v2168, 1, &v2172, 1, v745);
          v753 = v752;
          v754 = *(_QWORD *)v7;
          *(_QWORD *)&v2172 = v389;
          DWORD2(v2172) = 0;
          v755 = sub_1C5545FFC(v754, (unint64_t *)&v2172, 0.0);
          v2090 = v756;
          v2097 = v755;
          v757 = *(_QWORD *)v7;
          *(_QWORD *)&v2172 = v389;
          DWORD2(v2172) = 0;
          v758 = sub_1C5545FFC(v757, (unint64_t *)&v2172, 1.0);
          v760 = v759;
          v761 = *(_QWORD *)v7;
          *(_QWORD *)&v2172 = v389;
          DWORD2(v2172) = 0;
          v762 = sub_1C5545FFC(v761, (unint64_t *)&v2172, 0.5);
          v764 = v763;
          v765 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v389;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v758;
          *((_QWORD *)&v2172 + 1) = v760;
          LODWORD(v2173) = 1;
          LODWORD(v2174) = v386;
          v2176 = 0;
          v766 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v765 + 32))(v765, 185, &v2168, 1, &v2172, 2, 0);
          v768 = v767;
          v769 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v2076;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = 3;
          LODWORD(v2173) = 2;
          v2174 = v2083;
          v2175 = v753;
          v2176 = 1;
          v2177 = v762;
          v2178 = v764;
          v2179 = 1;
          v770 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v769 + 32))(v769, 135, &v2168, 1, &v2172, 3, v745);
          v771 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v389;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v770;
          *((_QWORD *)&v2172 + 1) = v772;
          LODWORD(v2173) = 1;
          v2174 = v766;
          v2175 = v768;
          v2176 = 1;
          v2177 = v2097;
          v2178 = v2090;
          v2179 = 1;
          v773 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v771 + 32))(v771, 136, &v2168, 1, &v2172, 3, v745);
          v774 = *(_QWORD *)v7;
          LODWORD(v2168) = v2130;
          DWORD2(v2168) = 1;
          *(_QWORD *)&v2172 = v2118;
          *((_QWORD *)&v2172 + 1) = v2105;
          LODWORD(v2173) = 1;
          v2174 = v773;
          v2175 = v775;
          v2176 = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v774 + 32))(v774, 163, &v2168, 1, &v2172, 2, v745);
          v265 = a2;
          v266 = *(_QWORD *)(a2 + 24);
          v267 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v267 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v267 = a2;
              do
                v267 = *(_QWORD *)(v267 + 8);
              while ((*(_WORD *)(v267 + 44) & 8) != 0);
            }
          }
          goto LABEL_1699;
        }
      }
      else
      {
        v389 = 0;
      }
      v392 = 9;
      goto LABEL_701;
    case 0x58:
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
      v371 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 16) + 8);
      v372 = 10512;
LABEL_384:
      v15 = v371 + v372;
      goto LABEL_385;
    case 0x5A:
    case 0x5B:
    case 0x5C:
      v41 = *(_QWORD *)(a2 + 32);
      v42 = *(_DWORD *)(v41 + 4);
      if (v42 < 0 && (v43 = *(_QWORD *)(a1 + 16), (v42 & 0x7FFFFFFFu) < *(_DWORD *)(v43 + 432)))
        v44 = *(_QWORD *)(*(_QWORD *)(v43 + 424) + 8 * (v42 & 0x7FFFFFFF));
      else
        v44 = 0;
      v45 = *(_DWORD *)(v41 + 36);
      v2184 = v44;
      v46 = *(_QWORD *)(a2 + 48);
      if ((v46 & 7) != 0)
      {
        v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v47 = v46 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a2 + 48) = v46 & 0xFFFFFFFFFFFFFFF8;
      }
      v2182 = *(_QWORD *)(v47 + 24);
      v188 = *(llvm::LLVMContext *****)(*(_QWORD *)a1 + 8);
      v190 = sub_1C4825F50(&v2182);
      if ((_DWORD)v189 == 1)
      v192 = sub_1C4825F50(&v2182) + 7;
      if ((_DWORD)v191 == 1)
      if ((v192 & 0xFFFFFFF8) != v190)
      {
        if ((v2182 & 0xFFFFFFFFFFFFFFF9) != 0 && (v2182 & 4) != 0)
          return 2;
        v205 = ((unint64_t)(v192 >> 3) << 6) | 1;
        v206 = sub_1C484358C((uint64_t)(v188 + 16), 80, 3);
        v207 = *(_WORD *)(v47 + 32);
        v208 = *(_BYTE *)(v47 + 34);
        v209 = *(_WORD *)(v47 + 36);
        v210 = *(_QWORD *)(v47 + 16);
        *(_OWORD *)v206 = *(_OWORD *)v47;
        *(_QWORD *)(v206 + 16) = v210;
        *(_QWORD *)(v206 + 24) = v205;
        *(_WORD *)(v206 + 32) = v207;
        *(_BYTE *)(v206 + 34) = v208;
        *(_QWORD *)(v206 + 72) = 0;
        *(_OWORD *)(v206 + 56) = 0u;
        *(_OWORD *)(v206 + 40) = 0u;
        *(_WORD *)(v206 + 36) = v209;
        v211 = v192 & 0xFFFFFFF8;
        v212 = v2184;
        v214 = sub_1C4825F50(&v2184);
        if ((_DWORD)v213 == 1)
        v215 = v42;
        if (v211 > v214)
        {
          v215 = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(v7 + 16), v205, "", 0);
          v212 = v205;
        }
        v216 = **(unsigned __int16 **)(a2 + 16);
        if (v216 != 92)
        {
          if (v216 == 91)
          {
            v217 = *(_QWORD **)v7;
            *(_QWORD *)&v2168 = v212;
            DWORD2(v2168) = 0;
            LODWORD(v2172) = v45;
            LODWORD(v2173) = 0;
            v218 = sub_1C55464EC(v217, 0x5Au, (int *)&v2168, (int *)&v2172, (llvm::MachineMemOperand *)v206);
            v219 = *(_QWORD *)v7;
            LODWORD(v2168) = v215;
            DWORD2(v2168) = 1;
            *(_QWORD *)&v2172 = v218;
            *((_QWORD *)&v2172 + 1) = v220;
            LODWORD(v2173) = 1;
            v2174 = v190;
            v2176 = 3;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v219 + 32))(v219, 125, &v2168, 1, &v2172, 2, 0);
LABEL_1122:
            if (v2184 != v212)
            {
              v1450 = *(_QWORD *)v7;
              LODWORD(v2168) = v42;
              DWORD2(v2168) = 1;
              LODWORD(v2172) = v215;
              LODWORD(v2173) = 0;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1450 + 32))(v1450, 119, &v2168, 1, &v2172, 1, 0);
            }
            v265 = a2;
            v266 = *(_QWORD *)(a2 + 24);
            v267 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v267 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v267 = a2;
                do
                  v267 = *(_QWORD *)(v267 + 8);
                while ((*(_WORD *)(v267 + 44) & 8) != 0);
              }
            }
LABEL_1699:
            v1446 = *(_QWORD *)(v267 + 8);
            v1447 = v266 + 40;
            goto LABEL_1700;
          }
          if (v205 != v212)
          {
            v1449 = *(_QWORD **)v7;
            LODWORD(v2168) = v215;
            DWORD2(v2168) = 1;
            LODWORD(v2172) = v45;
            LODWORD(v2173) = 0;
            sub_1C55464EC(v1449, 0x5Au, (int *)&v2168, (int *)&v2172, (llvm::MachineMemOperand *)v206);
            goto LABEL_1122;
          }
        }
        v1407 = *(_QWORD **)v7;
        *(_QWORD *)&v2168 = v212;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v45;
        LODWORD(v2173) = 0;
        v1408 = sub_1C55464EC(v1407, 0x5Au, (int *)&v2168, (int *)&v2172, (llvm::MachineMemOperand *)v206);
        v1409 = *(_QWORD *)v7;
        LODWORD(v2180) = v215;
        DWORD2(v2180) = 1;
        *(_QWORD *)&v2168 = v1408;
        *((_QWORD *)&v2168 + 1) = v1410;
        LODWORD(v2169) = 1;
        v1411 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1409 + 32))(v1409, 43, &v2180, 1, &v2168, 1, 0);
        LODWORD(v2172) = 1;
        *((_QWORD *)&v2172 + 1) = 0;
        v2173 = v190;
        llvm::MachineInstr::addOperand(v1412, v1411, (const llvm::MachineOperand *)&v2172);
        goto LABEL_1122;
      }
      v194 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v7 + 8) + 40);
      if (*(_BYTE *)(v194 + 272))
        return 2;
      v193.i32[0] = v190;
      v195 = (uint8x8_t)vcnt_s8(v193);
      v195.i16[0] = vaddlv_u8(v195);
      if (v195.i32[0] == 1)
      {
        if ((llvm::TargetLoweringBase::allowsMemoryAccess(*(_QWORD *)(v7 + 32), ***v188, v194 + 272, v2182, v47, 0) & 1) != 0)
          return 2;
        v199 = v190 >> 1;
        v198 = v190 >> 1;
      }
      else
      {
        v196 = v190;
        v197 = 1 << ~__clz(v190);
        if (v190)
          v198 = v197;
        else
          v198 = 0;
        v199 = v196 - v198;
      }
      if ((v2182 & 0xFFFFFFFFFFFFFFF9) == 0 || (v2182 & 4) == 0)
      {
        v2144 = (uint64_t *)v7;
        MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v188, v47, 0, ((unint64_t)(v198 >> 3) << 6) | 1);
        v1383 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v188, v47, v198 >> 3, ((unint64_t)(v199 >> 3) << 6) | 1);
        v1384 = 0;
        if (v45 < 0)
        {
          v1385 = v2144[2];
          if ((v45 & 0x7FFFFFFFu) >= *(_DWORD *)(v1385 + 432))
            v1384 = 0;
          else
            v1384 = *(_QWORD *)(*(_QWORD *)(v1385 + 424) + 8 * (v45 & 0x7FFFFFFF));
        }
        *(_QWORD *)&v2180 = v1384;
        v1546 = sub_1C4825F50(&v2184);
        v1548 = v1546;
        if ((_DWORD)v1547 == 1)
        {
          if (v1548)
            goto LABEL_1216;
        }
        else if (v1546)
        {
LABEL_1216:
          v1549 = (v1548 - 1) | ((unint64_t)(v1548 - 1) >> 1) | (((v1548 - 1) | ((unint64_t)(v1548 - 1) >> 1)) >> 2);
          v1550 = v1549 | (v1549 >> 4) | ((v1549 | (v1549 >> 4)) >> 8);
          v1551 = (8 * (((v1550 | (v1550 >> 16)) >> 32) | v1550 | (v1550 >> 16)) + 8) & 0x7FFFFFFF8 | 1;
LABEL_1662:
          v2165 = v1551;
          v1990 = (_QWORD *)*v2144;
          *(_QWORD *)&v2168 = v1551;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v45;
          LODWORD(v2173) = 0;
          v2112 = sub_1C55464EC(v1990, 0x5Cu, (int *)&v2168, (int *)&v2172, MachineMemOperand);
          v2125 = v1991;
          v1992 = *v2144;
          v1993 = v45;
          v1995 = sub_1C4825F50((unint64_t *)&v2180);
          if ((_DWORD)v1994 == 1)
          *(_QWORD *)&v2172 = (8 * v1995) | 1;
          DWORD2(v2172) = 0;
          v1996 = sub_1C5544694(v1992, (unint64_t *)&v2172, v198 >> 3);
          v1998 = v1997;
          v1999 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v2144[2], v2180, "", 0);
          v2000 = *v2144;
          LODWORD(v2168) = v1999;
          DWORD2(v2168) = 1;
          LODWORD(v2172) = v1993;
          LODWORD(v2173) = 0;
          v2174 = v1996;
          v2175 = v1998;
          v2176 = 1;
          v2001 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v2000 + 32))(v2000, 193, &v2168, 1, &v2172, 2, 0);
          v2002 = (_QWORD *)*v2144;
          v2003 = **(unsigned __int16 **)(a2 + 16);
          *(_QWORD *)&v2168 = v1551;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v2001;
          *((_QWORD *)&v2172 + 1) = v2004;
          LODWORD(v2173) = 1;
          v2005 = sub_1C55464EC(v2002, v2003, (int *)&v2168, (int *)&v2172, v1383);
          v2007 = v2006;
          v2008 = *v2144;
          *(_QWORD *)&v2172 = v1551;
          DWORD2(v2172) = 0;
          v2009 = sub_1C5544694(v2008, (unint64_t *)&v2172, v198);
          v2010 = *v2144;
          *(_QWORD *)&v2168 = v1551;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v2005;
          *((_QWORD *)&v2172 + 1) = v2007;
          LODWORD(v2173) = 1;
          v2174 = v2009;
          v2175 = v2011;
          v2176 = 1;
          v2013 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v2010 + 32))(v2010, 127, &v2168, 1, &v2172, 2, 0);
          v2014 = v2012;
          if (v2165 == v2184)
          {
            v2015 = *v2144;
            LODWORD(v2168) = v42;
            DWORD2(v2168) = 1;
            *(_QWORD *)&v2172 = v2013;
            *((_QWORD *)&v2172 + 1) = v2012;
            LODWORD(v2173) = 1;
            v2174 = (uint64_t)v2112;
            v2175 = v2125;
            v2176 = 1;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v2015 + 32))(v2015, 66, &v2168, 1, &v2172, 2, 0);
          }
          else
          {
            v2016 = sub_1C4825F50(&v2165);
            v2018 = v2017;
            v2020 = sub_1C4825F50(&v2184);
            v2021 = *v2144;
            if (v2016 == v2020 && v2018 == v2019)
            {
              *(_QWORD *)&v2168 = v2165;
              DWORD2(v2168) = 0;
              *(_QWORD *)&v2172 = v2013;
              *((_QWORD *)&v2172 + 1) = v2014;
              LODWORD(v2173) = 1;
              v2174 = (uint64_t)v2112;
              v2175 = v2125;
              v2176 = 1;
              v2022 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v2021 + 32))(v2021, 66, &v2168, 1, &v2172, 2, 0);
              v2023 = *v2144;
              LODWORD(v2168) = v42;
              DWORD2(v2168) = 1;
              *(_QWORD *)&v2172 = v2022;
              *((_QWORD *)&v2172 + 1) = v2024;
              LODWORD(v2173) = 1;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v2023 + 32))(v2023, 81, &v2168, 1, &v2172, 1, 0);
            }
            else
            {
              *(_QWORD *)&v2168 = v2165;
              DWORD2(v2168) = 0;
              *(_QWORD *)&v2172 = v2013;
              *((_QWORD *)&v2172 + 1) = v2014;
              LODWORD(v2173) = 1;
              v2174 = (uint64_t)v2112;
              v2175 = v2125;
              v2176 = 1;
              v2025 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v2021 + 32))(v2021, 66, &v2168, 1, &v2172, 2, 0);
              v2026 = *v2144;
              LODWORD(v2168) = v42;
              DWORD2(v2168) = 1;
              *(_QWORD *)&v2172 = v2025;
              *((_QWORD *)&v2172 + 1) = v2027;
              LODWORD(v2173) = 1;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v2026 + 32))(v2026, 119, &v2168, 1, &v2172, 1, 0);
            }
          }
          v265 = a2;
          v266 = *(_QWORD *)(a2 + 24);
          v267 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v267 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v267 = a2;
              do
                v267 = *(_QWORD *)(v267 + 8);
              while ((*(_WORD *)(v267 + 44) & 8) != 0);
            }
          }
          goto LABEL_1699;
        }
        v1551 = 1;
        goto LABEL_1662;
      }
      if (v2182 != v2184)
        return 2;
      v200 = 3;
      if ((v2182 & 1) == 0)
        v200 = 19;
      v201 = v2182 >> v200;
      if ((v2182 & 2) != 0)
        v202 = (v2182 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v201) | 2;
      else
        v202 = v2182 & 0x8000000000000000 | (8 * v201) | 1;
      v203 = a2;
      v204 = (uint64_t *)v7;
      return sub_1C55362C4(v204, v203, 0, v202);
    case 0x60:
      v331 = *(_QWORD *)(a2 + 32);
      v332 = *(_DWORD *)(v331 + 4);
      if (v332 < 0 && (v333 = *(_QWORD *)(a1 + 16), (v332 & 0x7FFFFFFFu) < *(_DWORD *)(v333 + 432)))
        v334 = *(_QWORD *)(*(_QWORD *)(v333 + 424) + 8 * (v332 & 0x7FFFFFFF));
      else
        v334 = 0;
      v2134 = *(_DWORD *)(v331 + 36);
      *(_QWORD *)&v2180 = v334;
      v591 = *(llvm::LLVMContext *****)(*(_QWORD *)a1 + 8);
      v592 = *(_QWORD *)(a2 + 48);
      if ((v592 & 7) != 0)
      {
        v593 = *(_QWORD *)((v592 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v593 = v592 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a2 + 48) = v592 & 0xFFFFFFFFFFFFFFF8;
      }
      v2184 = *(_QWORD *)(v593 + 24);
      v1365 = sub_1C4825F50(&v2184);
      if ((_DWORD)v1364 == 1)
      v1367 = sub_1C4825F50(&v2184) + 7;
      if ((_DWORD)v1366 == 1)
      if ((v1367 & 0xFFFFFFF8) == v1365)
      {
        if ((v2184 & 0xFFFFFFFFFFFFFFF9) != 0 && (v2184 & 4) != 0)
        {
          if (v2184 != v334)
            return 2;
          if ((v334 & 2) != 0)
          {
            v2064 = 35;
            v2065 = 19;
            if ((v334 & 4) == 0)
              v2064 = 19;
            v2066 = v334 >> v2064;
            if ((v334 & 4) == 0)
              v2065 = 3;
            if ((v334 & 1) != 0)
              v2065 = 3;
            v202 = (8 * (unsigned __int16)(v334 >> v2065)) & 0xFFFFF8000007FFFFLL | ((v2066 & 0xFFFFFF) << 19) | 2;
          }
          else
          {
            v1368 = 3;
            if ((v334 & 1) == 0)
              v1368 = 19;
            v202 = v334 & 0x8000000000000000 | (8 * (v334 >> v1368)) | 1;
          }
          v204 = (uint64_t *)v7;
          v203 = v6;
          return sub_1C55362C4(v204, v203, 0, v202);
        }
        v1414 = sub_1C4825F50(&v2184);
        if ((_DWORD)v1413 == 1)
        v1415 = (uint8x8_t)vcnt_s8((int8x8_t)v1414);
        v1415.i16[0] = vaddlv_u8(v1415);
        if (v1415.i32[0] == 1)
        {
          if ((llvm::TargetLoweringBase::allowsMemoryAccess(*(_QWORD *)(v7 + 32), ***v591, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v7 + 8) + 40) + 272, v2184, v593, 0) & 1) != 0)return 2;
          v1422 = v1414 >> 1;
          v1419 = v1414 >> 1;
        }
        else
        {
          v1417 = sub_1C4825F50(&v2184);
          if ((_DWORD)v1416 == 1)
          v1418 = 1 << ~__clz(v1417);
          if (v1417)
            v1419 = v1418;
          else
            v1419 = 0;
          v1421 = sub_1C4825F50(&v2184);
          if ((_DWORD)v1420 == 1)
          v1422 = v1421 - v1419;
        }
        v1423 = sub_1C4825F50(&v2184);
        v1425 = v1423;
        if ((_DWORD)v1424 == 1)
        {
          if (v1425)
            goto LABEL_1098;
        }
        else if (v1423)
        {
LABEL_1098:
          v1426 = (v1425 - 1) | ((unint64_t)(v1425 - 1) >> 1) | (((v1425 - 1) | ((unint64_t)(v1425 - 1) >> 1)) >> 2);
          v1427 = v1426 | (v1426 >> 4) | ((v1426 | (v1426 >> 4)) >> 8);
          v1428 = (8 * (((v1427 | (v1427 >> 16)) >> 32) | v1427 | (v1427 >> 16)) + 8) & 0x7FFFFFFF8 | 1;
          goto LABEL_1685;
        }
        v1428 = 1;
LABEL_1685:
        v2126 = v1422;
        if ((v2180 & 0xFFFFFFFFFFFFFFF9) != 0 && (v2180 & 6) == 2)
        {
          v2032 = sub_1C4825F50((unint64_t *)&v2180);
          if ((_DWORD)v2031 == 1)
          v2033 = (uint64_t)v591;
          v2034 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = (8 * v2032) | 1;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v332;
          LODWORD(v2173) = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v2034 + 32))(v2034, 80, &v2168, 1, &v2172, 1, 0);
          v332 = *(_DWORD *)(*(_QWORD *)(v2035 + 32) + 4);
        }
        else
        {
          v2033 = (uint64_t)v591;
        }
        v2036 = *(uint64_t **)v7;
        *(_QWORD *)&v2168 = v1428;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v332;
        LODWORD(v2173) = 0;
        v2037 = sub_1C5546B4C(v2036, 118, (unint64_t *)&v2168, (int *)&v2172);
        v2039 = v2038;
        v2040 = *(_QWORD *)v7;
        *(_QWORD *)&v2172 = v1428;
        DWORD2(v2172) = 0;
        v2041 = sub_1C5544694(v2040, (unint64_t *)&v2172, v1419);
        v2042 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v1428;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2172 = v2037;
        *((_QWORD *)&v2172 + 1) = v2039;
        LODWORD(v2173) = 1;
        v2174 = v2041;
        v2175 = v2043;
        v2176 = 1;
        v2044 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v2042 + 32))(v2042, 128, &v2168, 1, &v2172, 2, 0);
        v2096 = v2045;
        v2103 = v2044;
        v2046 = 0;
        if (v2134 < 0)
        {
          v2047 = *(_QWORD *)(v7 + 16);
          v2048 = v2134 & 0x7FFFFFFF;
          if (v2048 >= *(_DWORD *)(v2047 + 432))
            v2046 = 0;
          else
            v2046 = *(_QWORD *)(*(_QWORD *)(v2047 + 424) + 8 * v2048);
        }
        v2162 = v6;
        v2182 = v2046;
        v2049 = *(_QWORD *)v7;
        v2051 = sub_1C4825F50(&v2182);
        if ((_DWORD)v2050 == 1)
        *(_QWORD *)&v2172 = (8 * v2051) | 1;
        DWORD2(v2172) = 0;
        v2052 = v1419 >> 3;
        v2053 = sub_1C5544694(v2049, (unint64_t *)&v2172, v1419 >> 3);
        v2054 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v2182;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v2134;
        LODWORD(v2173) = 0;
        v2174 = v2053;
        v2175 = v2055;
        v2176 = 1;
        v2056 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v2054 + 32))(v2054, 193, &v2168, 1, &v2172, 2, 0);
        v2058 = v2057;
        v2059 = (_QWORD **)v7;
        v2060 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v2033, v593, 0, ((unint64_t)(v2052 & 0x1FFFFFFF) << 6) | 1);
        v2061 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v2033, v593, v2052, ((unint64_t)(v2126 >> 3) << 6) | 1);
        v2062 = *v2059;
        *(_QWORD *)&v2172 = v2037;
        *((_QWORD *)&v2172 + 1) = v2039;
        LODWORD(v2173) = 1;
        LODWORD(v2168) = v2134;
        LODWORD(v2169) = 0;
        sub_1C5546848(v2062, (int *)&v2172, (int *)&v2168, v2060);
        v2063 = *v2059;
        *(_QWORD *)&v2172 = v2103;
        *((_QWORD *)&v2172 + 1) = v2096;
        LODWORD(v2173) = 1;
        *(_QWORD *)&v2168 = v2056;
        *((_QWORD *)&v2168 + 1) = v2058;
        LODWORD(v2169) = 1;
        sub_1C5546848(v2063, (int *)&v2172, (int *)&v2168, v2061);
        v265 = v2162;
        v266 = *(_QWORD *)(v2162 + 24);
        v267 = v2162;
        if ((*(_BYTE *)v2162 & 4) == 0)
        {
          v267 = v2162;
          if ((*(_WORD *)(v2162 + 44) & 8) != 0)
          {
            v267 = v2162;
            do
              v267 = *(_QWORD *)(v267 + 8);
            while ((*(_WORD *)(v267 + 44) & 8) != 0);
          }
        }
        goto LABEL_1699;
      }
      if ((v334 & 0xFFFFFFFFFFFFFFF9) != 0 && (v334 & 4) != 0)
        return 2;
      v1429 = v1367 >> 3;
      v1430 = v1367 & 0xFFFFFFF8;
      v1432 = sub_1C4825F50((unint64_t *)&v2180);
      if ((_DWORD)v1431 == 1)
      if (v1430 > v1432)
      {
        v1433 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = ((v1429 & 0x1FFFFFFF) << 6) | 1;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v332;
        LODWORD(v2173) = 0;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1433 + 32))(v1433, 118, &v2168, 1, &v2172, 1, 0);
        v332 = *(_DWORD *)(*(_QWORD *)(v1434 + 32) + 4);
        *(_QWORD *)&v2180 = ((v1429 & 0x1FFFFFFF) << 6) | 1;
      }
      v1480 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = v2180;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v332;
      LODWORD(v2173) = 0;
      v1481 = sub_1C5546D24(v1480, (unint64_t *)&v2168, &v2172, v1365);
      v1483 = v1482;
      v1484 = sub_1C484358C((uint64_t)(v591 + 16), 80, 3);
      v1485 = *(_WORD *)(v593 + 32);
      v1486 = *(_BYTE *)(v593 + 34);
      v1487 = *(_WORD *)(v593 + 36);
      v1488 = *(_QWORD *)(v593 + 16);
      *(_OWORD *)v1484 = *(_OWORD *)v593;
      *(_QWORD *)(v1484 + 16) = v1488;
      *(_QWORD *)(v1484 + 24) = ((v1429 & 0x1FFFFFFF) << 6) | 1;
      *(_WORD *)(v1484 + 32) = v1485;
      *(_BYTE *)(v1484 + 34) = v1486;
      *(_QWORD *)(v1484 + 72) = 0;
      *(_OWORD *)(v1484 + 56) = 0u;
      *(_OWORD *)(v1484 + 40) = 0u;
      *(_WORD *)(v1484 + 36) = v1487;
      v1489 = *(_QWORD **)v7;
      *(_QWORD *)&v2172 = v1481;
      *((_QWORD *)&v2172 + 1) = v1483;
      LODWORD(v2173) = 1;
      LODWORD(v2168) = v2134;
      LODWORD(v2169) = 0;
      sub_1C5546848(v1489, (int *)&v2172, (int *)&v2168, (llvm::MachineMemOperand *)v1484);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0x62:
      v1530 = *(_DWORD **)(a2 + 32);
      v1531 = v1530[1];
      v1532 = v1530[9];
      v1533 = v1530[17];
      v1534 = v1530[25];
      v1535 = v1530[33];
      v1536 = *(_QWORD *)a1;
      v1537 = *(_QWORD *)(a2 + 48);
      if ((v1537 & 7) != 0)
      {
        v1538 = *(llvm::MachineMemOperand **)((v1537 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v1538 = (llvm::MachineMemOperand *)(v1537 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(a2 + 48) = v1537 & 0xFFFFFFFFFFFFFFF8;
      }
      sub_1C6275810(v1536, v1531, v1533, v1534, v1535, v1538);
      v1717 = *(_QWORD *)v7;
      LODWORD(v2168) = v1532;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = 32;
      LODWORD(v2173) = 2;
      LODWORD(v2174) = v1531;
      v2176 = 0;
      LODWORD(v2177) = v1534;
      v2179 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1717
                                                                                                 + 32))(v1717, 134, &v2168, 1, &v2172, 3, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0x7D:
      v335 = *(_QWORD *)(a2 + 32);
      v336 = *(_QWORD *)(v335 + 80);
      v337 = *(_DWORD *)(v335 + 4);
      v338 = *(_DWORD *)(v335 + 36);
      v339 = *(_QWORD *)(a1 + 16);
      if (v337 < 0 && (v337 & 0x7FFFFFFFu) < *(_DWORD *)(v339 + 432))
        v340 = *(_QWORD *)(*(_QWORD *)(v339 + 424) + 8 * (v337 & 0x7FFFFFFF));
      else
        v340 = 0;
      v594 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v339, v340, "", 0);
      v595 = *(_QWORD *)v7;
      *(_QWORD *)&v2172 = v340;
      DWORD2(v2172) = 0;
      v596 = (unsigned __int16)(v340 >> 3);
      v597 = (unsigned __int16)(v340 >> 19);
      if ((v340 & 2) == 0)
        v597 = (v340 >> 19);
      if ((v340 & 4) != 0)
        v596 = v597;
      if ((v340 & 1) != 0)
        v596 = (v340 >> 3);
      sub_1C5544694(v595, (unint64_t *)&v2172, v596 - v336);
      v599 = v598;
      v600 = *(_QWORD *)v7;
      v601 = *(_DWORD *)(*(_QWORD *)(v598 + 32) + 4);
      LODWORD(v2168) = v594;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v338;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v601;
      v2176 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v600 + 32))(v600, 127, &v2168, 1, &v2172, 2, 0);
      v602 = *(_QWORD *)v7;
      v603 = *(_DWORD *)(*(_QWORD *)(v599 + 32) + 4);
      LODWORD(v2168) = v337;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v594;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v603;
      v2176 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v602 + 32))(v602, 129, &v2168, 1, &v2172, 2, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0x82:
    case 0x83:
      v74 = *(_QWORD *)(a2 + 32);
      v75 = *(_DWORD *)(v74 + 4);
      v76 = *(_QWORD *)(a1 + 16);
      if (v75 < 0 && (v77 = v75 & 0x7FFFFFFF, v77 < *(_DWORD *)(v76 + 432)))
        v78 = *(_QWORD *)(*(_QWORD *)(v76 + 424) + 8 * v77);
      else
        v78 = 0;
      v152 = *(_DWORD *)(v74 + 100);
      if (v152 < 0 && (v153 = v152 & 0x7FFFFFFF, v153 < *(_DWORD *)(v76 + 432)))
        v154 = *(_QWORD *)(*(_QWORD *)(v76 + 424) + 8 * v153);
      else
        v154 = 0;
      if ((_DWORD)v4 == 130)
        v155 = 131;
      else
        v155 = 130;
      v156 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)&v2180 = v78;
      *((_QWORD *)&v2180 + 1) = v154;
      LODWORD(v2172) = v155;
      *((_QWORD *)&v2172 + 1) = &v2180;
      v2173 = 2;
      v2174 = 0;
      v2175 = 0;
      v157 = v155 - 45;
      v158 = *(_DWORD *)(v156 + 8 + 168 * (v155 - 45));
      if (v158)
        v157 = v158 - 45;
      v159 = sub_1C553C530(v156 + 8 + 168 * v157, (uint64_t)&v2172);
      v2151 = v6;
      if (v159 == 11)
      {
        if (v2173)
        {
          v1892 = 0;
          v1893 = v156 + 35456;
          v1894 = 1;
          while (1)
          {
            v1895 = *(_QWORD *)(*((_QWORD *)&v2172 + 1) + 8 * v1892);
            LODWORD(v2168) = v2172;
            DWORD1(v2168) = v1894 - 1;
            *((_QWORD *)&v2168 + 1) = v1895;
            v1896 = sub_1C553DEB0(v1893, (uint64_t)&v2168);
            if (v1896)
              break;
            v1892 = v1894;
            v121 = v2173 > v1894++;
            if (!v121)
              goto LABEL_1264;
          }
          if (v1896 == 6)
          {
            v160 = *(_DWORD **)(v6 + 32);
            goto LABEL_139;
          }
        }
LABEL_1264:
        v160 = *(_DWORD **)(v6 + 32);
      }
      else
      {
        v160 = *(_DWORD **)(v6 + 32);
        if (v159 == 6)
        {
LABEL_139:
          v2129 = v160[1];
          v161 = v160[9];
          v2113 = v160[17];
          v162 = v160[25];
          v163 = *(_QWORD *)(v7 + 16);
          goto LABEL_1286;
        }
      }
      v162 = v160[25];
      v163 = *(_QWORD *)(v7 + 16);
      v2129 = v160[1];
      if (v2129 < 0 && (v1626 = v2129 & 0x7FFFFFFF, v1626 < *(_DWORD *)(v163 + 432)))
        v1627 = *(_QWORD *)(*(_QWORD *)(v163 + 424) + 8 * v1626);
      else
        v1627 = 0;
      if ((v162 & 0x80000000) != 0 && (v162 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v163 + 432))
        v1628 = *(_QWORD *)(*(_QWORD *)(v163 + 424) + 8 * (v162 & 0x7FFFFFFF));
      else
        v1628 = 0;
      v161 = v160[9];
      v2113 = v160[17];
      v1629 = (int8x8_t)(unsigned __int16)(v1627 >> 3);
      v1630 = (int8x8_t)(unsigned __int16)(v1627 >> 19);
      if ((v1627 & 2) == 0)
        v1630 = (int8x8_t)(v1627 >> 19);
      if ((v1627 & 4) != 0)
        v1629 = v1630;
      if ((v1627 & 1) != 0)
        v1631 = (int8x8_t)(v1627 >> 3);
      else
        v1631 = v1629;
      v1632 = (uint8x8_t)vcnt_s8(v1631);
      v1632.i16[0] = vaddlv_u8(v1632);
      if (v1632.i32[0] == 1)
      {
        v1633 = **(unsigned __int16 **)(v6 + 16);
        if (v1633 == 130)
          v1634 = 131;
        else
          v1634 = 130;
        v1635 = sub_1C553ABF0(v163, v162, v1631.i32[0]);
        v1636 = *(_QWORD *)v7;
        if (v1635)
        {
          *(_QWORD *)&v2172 = v1628;
          DWORD2(v2172) = 0;
          v1637 = sub_1C5544694(v1636, (unint64_t *)&v2172, 0);
          v1638 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v1627;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1637;
          *((_QWORD *)&v2172 + 1) = v1639;
          LODWORD(v2173) = 1;
          LODWORD(v2174) = v162;
          v2176 = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1638 + 32))(v1638, 46, &v2168, 1, &v2172, 2, 0);
          v1641 = *(_DWORD *)(*(_QWORD *)(v1640 + 32) + 4);
          v1304 = v2151;
        }
        else
        {
          *(_QWORD *)&v2172 = v1628;
          DWORD2(v2172) = 0;
          v1699 = sub_1C5544694(v1636, (unint64_t *)&v2172, 1);
          v1701 = v1700;
          v1702 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v1627;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v161;
          LODWORD(v2173) = 0;
          LODWORD(v2174) = v2113;
          v2176 = 0;
          v2177 = v1699;
          v2178 = v1700;
          v2179 = 1;
          if (v1633 == 130)
          {
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1702 + 32))(v1702, 131, &v2168, 1, &v2172, 3, 0);
            v2113 = *(_DWORD *)(*(_QWORD *)(v1703 + 32) + 4);
            v1704 = *(_QWORD *)v7;
            *(_QWORD *)&v2168 = v1627;
            DWORD2(v2168) = 0;
            LODWORD(v2172) = v161;
            LODWORD(v2173) = 0;
            v2174 = v1699;
            v2175 = v1701;
            v2176 = 1;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1704 + 32))(v1704, 128, &v2168, 1, &v2172, 2, 0);
            v161 = *(_DWORD *)(*(_QWORD *)(v1705 + 32) + 4);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1702 + 32))(v1702, 130, &v2168, 1, &v2172, 3, 0);
            v161 = *(_DWORD *)(*(_QWORD *)(v1706 + 32) + 4);
            v1707 = *(_QWORD *)v7;
            *(_QWORD *)&v2168 = v1627;
            DWORD2(v2168) = 0;
            LODWORD(v2172) = v2113;
            LODWORD(v2173) = 0;
            v2174 = v1699;
            v2175 = v1701;
            v2176 = 1;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1707 + 32))(v1707, 127, &v2168, 1, &v2172, 2, 0);
            v2113 = *(_DWORD *)(*(_QWORD *)(v1708 + 32) + 4);
          }
          v1304 = v2151;
          v1709 = *(_QWORD **)v7;
          *(_QWORD *)&v2168 = v1628;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v162;
          LODWORD(v2173) = 0;
          sub_1C54F8544(v1709, (uint64_t *)&v2168, &v2172);
          v1641 = *(_DWORD *)(*(_QWORD *)(v1710 + 32) + 4);
        }
        v1711 = *(_QWORD *)v7;
        LODWORD(v2168) = v2129;
        DWORD2(v2168) = 1;
        LODWORD(v2172) = v161;
        LODWORD(v2173) = 0;
        LODWORD(v2174) = v2113;
        v2176 = 0;
        LODWORD(v2177) = v1641;
        v2179 = 0;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1711 + 32))(v1711, v1634, &v2168, 1, &v2172, 3, 0);
        v1312 = *(_QWORD *)(v1304 + 24);
        if ((*(_BYTE *)v1304 & 4) == 0 && (*(_WORD *)(v1304 + 44) & 8) != 0)
        {
          v1313 = v1304;
          do
            v1313 = *(_QWORD *)(v1313 + 8);
          while ((*(_WORD *)(v1313 + 44) & 8) != 0);
          v1304 = v2151;
          goto LABEL_1328;
        }
LABEL_1327:
        v1313 = v1304;
        goto LABEL_1328;
      }
LABEL_1286:
      if (v2129 < 0 && (v2129 & 0x7FFFFFFFu) < *(_DWORD *)(v163 + 432))
        v1642 = *(_QWORD *)(*(_QWORD *)(v163 + 424) + 8 * (v2129 & 0x7FFFFFFF));
      else
        v1642 = 0;
      if ((v162 & 0x80000000) != 0 && (v162 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v163 + 432))
        v1643 = *(_QWORD *)(*(_QWORD *)(v163 + 424) + 8 * (v162 & 0x7FFFFFFF));
      else
        v1643 = 0;
      if ((v1642 & 1) != 0)
      {
        v1644 = (v1642 >> 3);
      }
      else if ((v1642 & 4) != 0)
      {
        if ((v1642 & 2) != 0)
          v1644 = (unsigned __int16)(v1642 >> 19);
        else
          v1644 = (v1642 >> 19);
      }
      else
      {
        v1644 = (unsigned __int16)(v1642 >> 3);
      }
      v1645 = **(unsigned __int16 **)(v2151 + 16);
      v1646 = sub_1C553ABF0(v163, v162, v1644);
      v1647 = *(_QWORD *)v7;
      if (v1646)
      {
        *(_QWORD *)&v2172 = v1643;
        DWORD2(v2172) = 0;
        v1648 = sub_1C5544694(v1647, (unint64_t *)&v2172, v1644);
        v1650 = v1649;
        v1651 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v1643;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v162;
        LODWORD(v2173) = 0;
        v2174 = v1648;
        v2175 = v1649;
        v2176 = 1;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1651 + 32))(v1651, 62, &v2168, 1, &v2172, 2, 0);
        v1653 = *(_DWORD *)(*(_QWORD *)(v1652 + 32) + 4);
        v1654 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v1643;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2172 = v1648;
        *((_QWORD *)&v2172 + 1) = v1650;
        LODWORD(v2173) = 1;
        LODWORD(v2174) = v1653;
        v2176 = 0;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1654 + 32))(v1654, 46, &v2168, 1, &v2172, 2, 0);
        v1656 = *(_DWORD *)(*(_QWORD *)(v1655 + 32) + 4);
        v1657 = *(_QWORD *)v7;
        if (v1645 == 130)
          v1658 = v1653;
        else
          v1658 = *(_DWORD *)(*(_QWORD *)(v1655 + 32) + 4);
        *(_QWORD *)&v2168 = v1642;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v161;
        LODWORD(v2173) = 0;
        LODWORD(v2174) = v1658;
        v2176 = 0;
        if (v1645 == 130)
          v1659 = v1656;
        else
          v1659 = v1653;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1657 + 32))(v1657, 127, &v2168, 1, &v2172, 2, 0);
        v1661 = *(_DWORD *)(*(_QWORD *)(v1660 + 32) + 4);
        v1662 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v1642;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v2113;
        LODWORD(v2173) = 0;
        LODWORD(v2174) = v1659;
      }
      else
      {
        *(_QWORD *)&v2172 = v1643;
        DWORD2(v2172) = 0;
        v1664 = sub_1C5544694(v1647, (unint64_t *)&v2172, (v1644 - 1));
        v1665 = v1663;
        v1666.i32[0] = v1644;
        v1667 = (uint8x8_t)vcnt_s8(v1666);
        v1667.i16[0] = vaddlv_u8(v1667);
        v1668 = *(_QWORD *)v7;
        if (v1667.i32[0] == 1)
        {
          *(_QWORD *)&v2168 = v1643;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v162;
          LODWORD(v2173) = 0;
          v2174 = v1664;
          v2175 = v1663;
          v2176 = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1668 + 32))(v1668, 65, &v2168, 1, &v2172, 2, 0);
          v1670 = *(_DWORD *)(*(_QWORD *)(v1669 + 32) + 4);
          v1671 = *(_QWORD **)v7;
          *(_QWORD *)&v2168 = v1643;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v162;
          LODWORD(v2173) = 0;
          v1672 = sub_1C54F8544(v1671, (uint64_t *)&v2168, &v2172);
          v1673 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v1643;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1672;
          *((_QWORD *)&v2172 + 1) = v1674;
          LODWORD(v2173) = 1;
          v2174 = v1664;
          v2175 = v1665;
          v2176 = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1673 + 32))(v1673, 65, &v2168, 1, &v2172, 2, 0);
        }
        else
        {
          *(_QWORD *)&v2172 = v1643;
          DWORD2(v2172) = 0;
          v1676 = sub_1C5544694(v1668, (unint64_t *)&v2172, v1644);
          v1677 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v1643;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v162;
          LODWORD(v2173) = 0;
          v2174 = v1676;
          v2175 = v1678;
          v2176 = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1677 + 32))(v1677, 62, &v2168, 1, &v2172, 2, 0);
          v1670 = *(_DWORD *)(*(_QWORD *)(v1679 + 32) + 4);
          v1680 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v1643;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1664;
          *((_QWORD *)&v2172 + 1) = v1665;
          LODWORD(v2173) = 1;
          LODWORD(v2174) = v1670;
          v2176 = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1680 + 32))(v1680, 46, &v2168, 1, &v2172, 2, 0);
        }
        v1681 = *(_DWORD *)(*(_QWORD *)(v1675 + 32) + 4);
        v1682 = *(_QWORD *)v7;
        *(_QWORD *)&v2172 = v1643;
        DWORD2(v2172) = 0;
        v1684 = sub_1C5544694(v1682, (unint64_t *)&v2172, 1);
        v1685 = v1683;
        v1686 = *(_QWORD *)v7;
        if (v1645 == 130)
        {
          *(_QWORD *)&v2168 = v1642;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v161;
          LODWORD(v2173) = 0;
          LODWORD(v2174) = v1670;
          v2176 = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1686 + 32))(v1686, 127, &v2168, 1, &v2172, 2, 0);
          v1661 = *(_DWORD *)(*(_QWORD *)(v1687 + 32) + 4);
          v1688 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v1642;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v2113;
          LODWORD(v2173) = 0;
          v2174 = v1684;
          v2175 = v1685;
          v2176 = 1;
          v1689 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1688 + 32))(v1688, 128, &v2168, 1, &v2172, 2, 0);
          v1690 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v1642;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1689;
          *((_QWORD *)&v2172 + 1) = v1691;
          LODWORD(v2173) = 1;
          LODWORD(v2174) = v1681;
          v2176 = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1690 + 32))(v1690, 128, &v2168, 1, &v2172, 2, 0);
LABEL_1315:
          v1697 = *(_DWORD *)(*(_QWORD *)(v1692 + 32) + 4);
          v1698 = *(_QWORD *)v7;
          LODWORD(v2168) = v2129;
          DWORD2(v2168) = 1;
          LODWORD(v2172) = v1661;
          LODWORD(v2173) = 0;
          LODWORD(v2174) = v1697;
          v2176 = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1698 + 32))(v1698, 66, &v2168, 1, &v2172, 2, 0);
          v1304 = v2151;
          v1312 = *(_QWORD *)(v2151 + 24);
          if ((*(_BYTE *)v2151 & 4) == 0 && (*(_WORD *)(v2151 + 44) & 8) != 0)
          {
            v1313 = v2151;
            do
              v1313 = *(_QWORD *)(v1313 + 8);
            while ((*(_WORD *)(v1313 + 44) & 8) != 0);
LABEL_1328:
            v1446 = *(_QWORD *)(v1313 + 8);
            v1447 = v1312 + 40;
            v265 = v1304;
LABEL_1700:
            sub_1C487FE80(v1447, v265, v1446);
            return 1;
          }
          goto LABEL_1327;
        }
        *(_QWORD *)&v2168 = v1642;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v161;
        LODWORD(v2173) = 0;
        v2174 = v1684;
        v2175 = v1683;
        v2176 = 1;
        v1693 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1686 + 32))(v1686, 127, &v2168, 1, &v2172, 2, 0);
        v1694 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v1642;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2172 = v1693;
        *((_QWORD *)&v2172 + 1) = v1695;
        LODWORD(v2173) = 1;
        LODWORD(v2174) = v1681;
        v2176 = 0;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1694 + 32))(v1694, 127, &v2168, 1, &v2172, 2, 0);
        v1661 = *(_DWORD *)(*(_QWORD *)(v1696 + 32) + 4);
        v1662 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v1642;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v2113;
        LODWORD(v2173) = 0;
        LODWORD(v2174) = v1670;
      }
      v2176 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1662
                                                                                                 + 32))(v1662, 128, &v2168, 1, &v2172, 2, 0);
      goto LABEL_1315;
    case 0x84:
    case 0x85:
      v48 = *(_DWORD **)(a2 + 32);
      v49 = v48[1];
      v50 = v48[9];
      v51 = v48[17];
      v52 = *(_QWORD *)(a1 + 16);
      if (v49 < 0 && (v49 & 0x7FFFFFFFu) < *(_DWORD *)(v52 + 432))
        v53 = *(_QWORD *)(*(_QWORD *)(v52 + 424) + 8 * (v49 & 0x7FFFFFFF));
      else
        v53 = 0;
      if (v50 < 0 && (v50 & 0x7FFFFFFFu) < *(_DWORD *)(v52 + 432))
        v103 = *(_QWORD *)(*(_QWORD *)(v52 + 424) + 8 * (v50 & 0x7FFFFFFF));
      else
        v103 = 0;
      if (v51 < 0 && (v51 & 0x7FFFFFFFu) < *(_DWORD *)(v52 + 432))
        v104 = *(_QWORD *)(*(_QWORD *)(v52 + 424) + 8 * (v51 & 0x7FFFFFFF));
      else
        v104 = 0;
      v2127 = v51;
      if ((v53 & 1) != 0)
      {
        v105 = (v53 >> 3);
      }
      else if ((v53 & 4) != 0)
      {
        if ((v53 & 2) != 0)
          v105 = (unsigned __int16)(v53 >> 19);
        else
          v105 = (v53 >> 19);
      }
      else
      {
        v105 = (unsigned __int16)(v53 >> 3);
      }
      v221 = *(_QWORD *)a1;
      *(_QWORD *)(v221 + 40) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(v221 + 48) = a2;
      v222 = (unsigned __int8 **)(a2 + 56);
      v223 = (unsigned __int8 **)(v221 + 32);
      if (a2 + 56 != v221 + 32)
      {
        if (*v223)
          llvm::MetadataTracking::untrack(v221 + 32, *v223);
        v224 = *v222;
        *v223 = *v222;
        if (v224)
          llvm::MetadataTracking::track((uint64_t)v223, v224, 2);
      }
      if ((_DWORD)v4 == 133)
        v225 = 132;
      else
        v225 = 133;
      v226 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)&v2180 = v53;
      *((_QWORD *)&v2180 + 1) = v103;
      LODWORD(v2172) = v225;
      *((_QWORD *)&v2172 + 1) = &v2180;
      v2173 = 2;
      v2174 = 0;
      v2175 = 0;
      v227 = v225 - 45;
      v228 = *(_DWORD *)(v226 + 8 + 168 * v227);
      if (v228)
        v227 = v228 - 45;
      v229 = sub_1C553C530(v226 + 8 + 168 * v227, (uint64_t)&v2172);
      if (v229 == 11)
      {
        if (v2173)
        {
          v1888 = 0;
          v1889 = 1;
          while (1)
          {
            v1890 = *(_QWORD *)(*((_QWORD *)&v2172 + 1) + 8 * v1888);
            LODWORD(v2168) = v2172;
            DWORD1(v2168) = v1889 - 1;
            *((_QWORD *)&v2168 + 1) = v1890;
            v1891 = sub_1C553DEB0(v226 + 35456, (uint64_t)&v2168);
            if (v1891)
              break;
            v1888 = v1889;
            v121 = v2173 > v1889++;
            if (!v121)
              goto LABEL_1249;
          }
          if (v1891 <= 0xAu && ((1 << v1891) & 0x6FE) != 0)
            goto LABEL_219;
        }
      }
      else if ((v229 & 0xF7) != 0)
      {
        goto LABEL_219;
      }
LABEL_1249:
      if ((_DWORD)v105 && (v105 & ((_DWORD)v105 - 1)) == 0)
      {
        v250 = a2;
        v1612 = *(_DWORD **)(a2 + 32);
        v1613 = v1612[1];
        v1614 = v1612[9];
        v1615 = v1612[17];
        if (v1615 < 0 && (v1616 = *(_QWORD *)(v7 + 16), (v1615 & 0x7FFFFFFFu) < *(_DWORD *)(v1616 + 432)))
          v1617 = *(_QWORD *)(*(_QWORD *)(v1616 + 424) + 8 * (v1615 & 0x7FFFFFFF));
        else
          v1617 = 0;
        v1618 = *(_QWORD *)v7;
        *(_QWORD *)&v2172 = v1617;
        DWORD2(v2172) = 0;
        v1619 = sub_1C5544694(v1618, (unint64_t *)&v2172, 0);
        if (**(_WORD **)(a2 + 16) == 133)
          v1621 = 132;
        else
          v1621 = 133;
        v1622 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v1617;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2172 = v1619;
        *((_QWORD *)&v2172 + 1) = v1620;
        LODWORD(v2173) = 1;
        LODWORD(v2174) = v1615;
        v2176 = 0;
        v1623 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1622 + 32))(v1622, 46, &v2168, 1, &v2172, 2, 0);
        v1624 = *(_QWORD *)v7;
        LODWORD(v2168) = v1613;
        DWORD2(v2168) = 1;
        LODWORD(v2172) = v1614;
        LODWORD(v2173) = 0;
        v2174 = v1623;
        v2175 = v1625;
        v2176 = 1;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1624 + 32))(v1624, v1621, &v2168, 1, &v2172, 2, 0);
        v251 = *(_QWORD *)(a2 + 24);
        if ((*(_BYTE *)a2 & 4) != 0 || (*(_WORD *)(a2 + 44) & 8) == 0)
          goto LABEL_1348;
        v252 = a2;
        do
          v252 = *(_QWORD *)(v252 + 8);
        while ((*(_WORD *)(v252 + 44) & 8) != 0);
        goto LABEL_1630;
      }
LABEL_219:
      v2114 = v50;
      if ((_DWORD)v4 == 133)
        v230 = 130;
      else
        v230 = 131;
      if ((_DWORD)v4 == 133)
        v231 = 131;
      else
        v231 = 130;
      v232 = *(_QWORD *)(v7 + 24);
      v2184 = v53;
      v2185 = v104;
      LODWORD(v2172) = v230;
      *((_QWORD *)&v2172 + 1) = &v2184;
      v2173 = 2;
      v2174 = 0;
      v2175 = 0;
      v233 = v230 - 45;
      v234 = *(_DWORD *)(v232 + 8 + 168 * (v230 - 45));
      if (v234)
        v233 = v234 - 45;
      v235 = sub_1C553C530(v232 + 8 + 168 * v233, (uint64_t)&v2172);
      if (v235 == 11)
      {
        v1718 = v7;
        if (v2173)
        {
          v1899 = 0;
          v1900 = v232 + 35456;
          v1901 = 1;
          while (1)
          {
            v1902 = *(_QWORD *)(*((_QWORD *)&v2172 + 1) + 8 * v1899);
            LODWORD(v2168) = v2172;
            DWORD1(v2168) = v1901 - 1;
            *((_QWORD *)&v2168 + 1) = v1902;
            v1903 = sub_1C553DEB0(v1900, (uint64_t)&v2168);
            if (v1903)
              break;
            v1899 = v1901;
            v121 = v2173 > v1901++;
            if (!v121)
              goto LABEL_1345;
          }
          if (v1903 <= 0xAu && ((1 << v1903) & 0x6FE) != 0)
          {
            v7 = v1718;
LABEL_229:
            v236 = *(_QWORD *)(v7 + 24);
            v2182 = v53;
            v2183 = v104;
            LODWORD(v2168) = v231;
            *((_QWORD *)&v2168 + 1) = &v2182;
            v2169 = 2;
            v2170 = 0;
            v2171 = 0;
            v237 = v231 - 45;
            v238 = *(_DWORD *)(v236 + 8 + 168 * (v231 - 45));
            if (v238)
              v237 = v238 - 45;
            v239 = sub_1C553C530(v236 + 8 + 168 * v237, (uint64_t)&v2168);
            if (v239 == 11)
            {
              if (v2169)
              {
                v1908 = 0;
                v1909 = v236 + 35456;
                v1910 = 1;
                v2109 = v49;
                while (1)
                {
                  v1230 = (uint64_t *)v7;
                  v1911 = *(_QWORD *)(*((_QWORD *)&v2168 + 1) + 8 * v1908);
                  LODWORD(v2180) = v2168;
                  DWORD1(v2180) = v1910 - 1;
                  *((_QWORD *)&v2180 + 1) = v1911;
                  v1912 = sub_1C553DEB0(v1909, (uint64_t)&v2180);
                  if (v1912)
                    break;
                  v1908 = v1910;
                  v121 = v2169 > v1910++;
                  v241 = 1;
                  if (!v121)
                    goto LABEL_233;
                }
                v241 = 1;
                if (v1912 <= 0xAu && ((1 << v1912) & 0x6FE) != 0)
                {
                  v243 = (v105 & ((_DWORD)v105 - 1)) == 0 && (_DWORD)v105 != 0;
                  v244 = *(_QWORD *)v7;
LABEL_945:
                  *(_QWORD *)&v2172 = v104;
                  DWORD2(v2172) = 0;
                  v1231 = sub_1C5544694(v244, (unint64_t *)&v2172, 0);
                  v1233 = v1232;
                  v1234 = *v1230;
                  if ((_DWORD)v4 == 133)
                    v1235 = 127;
                  else
                    v1235 = 128;
                  v2093 = v1235;
                  if ((_DWORD)v4 == 133)
                    v1236 = 128;
                  else
                    v1236 = 127;
                  v2100 = v1236;
                  *(_QWORD *)&v2172 = v104;
                  DWORD2(v2172) = 0;
                  v1237 = sub_1C5544694(v1234, (unint64_t *)&v2172, (v105 - 1));
                  v1239 = v1238;
                  v1240 = *v1230;
                  if (v243)
                  {
                    *(_QWORD *)&v2168 = v104;
                    DWORD2(v2168) = 0;
                    *(_QWORD *)&v2172 = v1231;
                    *((_QWORD *)&v2172 + 1) = v1233;
                    LODWORD(v2173) = 1;
                    LODWORD(v2174) = v2127;
                    v2176 = 0;
                    v1241 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1240 + 32))(v1240, 46, &v2168, 1, &v2172, 2, 0);
                    v1243 = v1242;
                    v1244 = *v1230;
                    *(_QWORD *)&v2168 = v104;
                    DWORD2(v2168) = 0;
                    LODWORD(v2172) = v2127;
                    LODWORD(v2173) = 0;
                    v2174 = v1237;
                    v2175 = v1239;
                    v2176 = 1;
                    v1245 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1244 + 32))(v1244, 65, &v2168, 1, &v2172, 2, 0);
                    v1246 = *v1230;
                    *(_QWORD *)&v2168 = v53;
                    DWORD2(v2168) = 0;
                    LODWORD(v2172) = v2114;
                    LODWORD(v2173) = 0;
                    v2174 = v1245;
                    v2175 = v1247;
                    v2176 = 1;
                    (*(void (**)(uint64_t, _QWORD, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1246 + 32))(v1246, v2093, &v2168, 1, &v2172, 2, 0);
                    v1249 = *(_DWORD *)(*(_QWORD *)(v1248 + 32) + 4);
                    v1250 = *v1230;
                    *(_QWORD *)&v2168 = v104;
                    DWORD2(v2168) = 0;
                    *(_QWORD *)&v2172 = v1241;
                    *((_QWORD *)&v2172 + 1) = v1243;
                    LODWORD(v2173) = 1;
                    v2174 = v1237;
                    v2175 = v1239;
                    v2176 = 1;
                    v1251 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1250 + 32))(v1250, 65, &v2168, 1, &v2172, 2, 0);
                    v1252 = *v1230;
                    *(_QWORD *)&v2168 = v53;
                    DWORD2(v2168) = 0;
                    LODWORD(v2172) = v2114;
                    LODWORD(v2173) = 0;
                    v2174 = v1251;
                    v2175 = v1253;
                  }
                  else
                  {
                    *(_QWORD *)&v2172 = v104;
                    DWORD2(v2172) = 0;
                    v1386 = sub_1C5544694(v1240, (unint64_t *)&v2172, v105);
                    v1387 = *v1230;
                    *(_QWORD *)&v2168 = v104;
                    DWORD2(v2168) = 0;
                    LODWORD(v2172) = v2127;
                    LODWORD(v2173) = 0;
                    v2174 = v1386;
                    v2175 = v1388;
                    v2176 = 1;
                    v1389 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1387 + 32))(v1387, 62, &v2168, 1, &v2172, 2, 0);
                    v1391 = v1390;
                    v1392 = *v1230;
                    *(_QWORD *)&v2168 = v53;
                    DWORD2(v2168) = 0;
                    LODWORD(v2172) = v2114;
                    LODWORD(v2173) = 0;
                    v2174 = v1389;
                    v2175 = v1390;
                    v2176 = 1;
                    (*(void (**)(uint64_t, _QWORD, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1392 + 32))(v1392, v2093, &v2168, 1, &v2172, 2, 0);
                    v1249 = *(_DWORD *)(*(_QWORD *)(v1393 + 32) + 4);
                    v1394 = *v1230;
                    *(_QWORD *)&v2168 = v104;
                    DWORD2(v2168) = 0;
                    *(_QWORD *)&v2172 = v1237;
                    *((_QWORD *)&v2172 + 1) = v1239;
                    LODWORD(v2173) = 1;
                    v2174 = v1389;
                    v2175 = v1391;
                    v2176 = 1;
                    v1395 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1394 + 32))(v1394, 46, &v2168, 1, &v2172, 2, 0);
                    v1397 = v1396;
                    v1398 = *v1230;
                    *(_QWORD *)&v2172 = v104;
                    DWORD2(v2172) = 0;
                    v1399 = sub_1C5544694(v1398, (unint64_t *)&v2172, 1);
                    v1400 = *v1230;
                    *(_QWORD *)&v2168 = v53;
                    DWORD2(v2168) = 0;
                    LODWORD(v2172) = v2114;
                    LODWORD(v2173) = 0;
                    v2174 = v1399;
                    v2175 = v1401;
                    v2176 = 1;
                    v1402 = (*(uint64_t (**)(uint64_t, _QWORD, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1400 + 32))(v1400, v2100, &v2168, 1, &v2172, 2, 0);
                    v1252 = *v1230;
                    *(_QWORD *)&v2168 = v53;
                    DWORD2(v2168) = 0;
                    *(_QWORD *)&v2172 = v1402;
                    *((_QWORD *)&v2172 + 1) = v1403;
                    LODWORD(v2173) = 1;
                    v2174 = v1395;
                    v2175 = v1397;
                  }
                  v2176 = 1;
                  (*(void (**)(uint64_t, _QWORD, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1252 + 32))(v1252, v2100, &v2168, 1, &v2172, 2, 0);
                  v1405 = *(_DWORD *)(*(_QWORD *)(v1404 + 32) + 4);
                  v1406 = *v1230;
                  LODWORD(v2168) = v2109;
                  DWORD2(v2168) = 1;
                  LODWORD(v2172) = v1249;
                  LODWORD(v2173) = 0;
                  LODWORD(v2174) = v1405;
                  v2176 = 0;
                  (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1406 + 32))(v1406, 66, &v2168, 1, &v2172, 2, 0);
                  v250 = a2;
                  v251 = *(_QWORD *)(a2 + 24);
                  if ((*(_BYTE *)a2 & 4) != 0 || (*(_WORD *)(a2 + 44) & 8) == 0)
                    goto LABEL_1348;
                  v252 = a2;
                  do
                    v252 = *(_QWORD *)(v252 + 8);
                  while ((*(_WORD *)(v252 + 44) & 8) != 0);
                  goto LABEL_1630;
                }
              }
              else
              {
                v241 = 1;
              }
            }
            else
            {
              v241 = (v239 & 0xF7) == 0;
            }
LABEL_233:
            v240.i32[0] = v105;
            v242 = (uint8x8_t)vcnt_s8(v240);
            v242.i16[0] = vaddlv_u8(v242);
            v243 = v242.i32[0] == 1;
            v244 = *(_QWORD *)v7;
            if (v241 && v242.i32[0] == 1)
            {
              *(_QWORD *)&v2172 = v53;
              DWORD2(v2172) = 0;
              v245 = sub_1C5544694(v244, (unint64_t *)&v2172, 0);
              *(_QWORD *)&v2168 = v53;
              DWORD2(v2168) = 0;
              *(_QWORD *)&v2172 = v245;
              *((_QWORD *)&v2172 + 1) = v246;
              LODWORD(v2173) = 1;
              LODWORD(v2174) = v2127;
              v2176 = 0;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v244 + 32))(v244, 46, &v2168, 1, &v2172, 2, 0);
              v248 = *(_DWORD *)(*(_QWORD *)(v247 + 32) + 4);
              v249 = *(_QWORD *)v7;
              LODWORD(v2168) = v49;
              DWORD2(v2168) = 1;
              LODWORD(v2172) = v2114;
              LODWORD(v2173) = 0;
              LODWORD(v2174) = v2114;
              v2176 = 0;
              LODWORD(v2177) = v248;
              v2179 = 0;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v249 + 32))(v249, v231, &v2168, 1, &v2172, 3, 0);
              v250 = a2;
              v251 = *(_QWORD *)(a2 + 24);
              if ((*(_BYTE *)a2 & 4) == 0 && (*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v252 = a2;
                do
                  v252 = *(_QWORD *)(v252 + 8);
                while ((*(_WORD *)(v252 + 44) & 8) != 0);
                goto LABEL_1630;
              }
LABEL_1348:
              v252 = v250;
              goto LABEL_1349;
            }
            v2109 = v49;
            v1230 = (uint64_t *)v7;
            goto LABEL_945;
          }
        }
LABEL_1345:
        v7 = v1718;
      }
      else if ((v235 & 0xF7) != 0)
      {
        goto LABEL_229;
      }
      v1719 = *(_QWORD *)v7;
      LODWORD(v2168) = v49;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v2114;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v2114;
      v2176 = 0;
      LODWORD(v2177) = v2127;
      v2179 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1719
                                                                                                 + 32))(v1719, v230, &v2168, 1, &v2172, 3, 0);
      v250 = a2;
      v251 = *(_QWORD *)(a2 + 24);
      if ((*(_BYTE *)a2 & 4) != 0 || (*(_WORD *)(a2 + 44) & 8) == 0)
        goto LABEL_1348;
      v252 = a2;
      do
        v252 = *(_QWORD *)(v252 + 8);
      while ((*(_WORD *)(v252 + 44) & 8) != 0);
LABEL_1630:
      v250 = a2;
LABEL_1349:
      v1446 = *(_QWORD *)(v252 + 8);
      v1447 = v251 + 40;
      v265 = v250;
      goto LABEL_1700;
    case 0x88:
      v325 = *(_DWORD **)(a2 + 32);
      v326 = v325[1];
      v327 = v325[9];
      v328 = *(_QWORD *)(a1 + 16);
      if (v326 < 0 && (v326 & 0x7FFFFFFFu) < *(_DWORD *)(v328 + 432))
      {
        v329 = (uint64_t **)a1;
        v330 = *(_QWORD *)(*(_QWORD *)(v328 + 424) + 8 * (v326 & 0x7FFFFFFF));
      }
      else
      {
        v329 = (uint64_t **)a1;
        v330 = 0;
      }
      v577 = v325[17];
      v578 = v325[25];
      *(_QWORD *)&v2180 = v330;
      if (v327 < 0 && (v327 & 0x7FFFFFFFu) < *(_DWORD *)(v328 + 432))
        v579 = *(_QWORD *)(*(_QWORD *)(v328 + 424) + 8 * (v327 & 0x7FFFFFFF));
      else
        v579 = 0;
      v2184 = v579;
      v5 = 2;
      if ((v330 & 0xFFFFFFFFFFFFFFF9) == 0 || (v330 & 4) == 0)
        return v5;
      v580 = 3;
      if ((v330 & 1) == 0)
        v580 = 19;
      v581 = v330 >> v580;
      v582 = v330 & 0x8000000000000000 | (8 * v581) | 1;
      v583 = (v330 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v581) | 2;
      if ((v330 & 2) == 0)
        v583 = v582;
      v33 = (v583 & 0xFFFFFFFFFFFFFFF9) == 0;
      v584 = v583 & 6;
      v585 = !v33 && v584 == 2;
      v586 = v585;
      if (!v585)
      {
        if ((v579 & 1) == 0)
          goto LABEL_1138;
        goto LABEL_524;
      }
      v1733 = (unsigned __int16)(v330 >> 19);
      if ((v330 & 2) == 0)
        v1733 = (v330 >> 19);
      if ((v330 & 1) != 0)
        v1734 = (v330 >> 3);
      else
        v1734 = v1733;
      v1735 = sub_1C626E984((unint64_t *)&v2180, (8 * v1734) | 1);
      v1736 = *v329;
      *(_QWORD *)&v2168 = v1735;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v577;
      LODWORD(v2173) = 0;
      (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1736 + 32))(v1736, 80, &v2168, 1, &v2172, 1, 0);
      v577 = *(_DWORD *)(*(_QWORD *)(v1737 + 32) + 4);
      v1738 = *v329;
      *(_QWORD *)&v2168 = v1735;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v578;
      LODWORD(v2173) = 0;
      (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1738 + 32))(v1738, 80, &v2168, 1, &v2172, 1, 0);
      v578 = *(_DWORD *)(*(_QWORD *)(v1739 + 32) + 4);
      *(_QWORD *)&v2180 = v1735;
      if ((v579 & 1) != 0)
      {
LABEL_524:
        v588 = sub_1C4825F50(&v2184);
        if ((_DWORD)v587 == 1)
        v589 = v2180;
        if ((v2180 & 1) != 0)
        {
          v590 = ((unint64_t)v2180 >> 3);
        }
        else if ((v2180 & 4) != 0)
        {
          if ((v2180 & 2) != 0)
            v590 = (unsigned __int16)((unint64_t)v2180 >> 19);
          else
            v590 = ((unint64_t)v2180 >> 19);
        }
        else
        {
          v590 = (unsigned __int16)((unint64_t)v2180 >> 3);
        }
        if (v588 <= v590 && v2184 != 9)
        {
          v1451 = *v329;
          *(_QWORD *)&v2168 = v2184;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v327;
          LODWORD(v2173) = 0;
          v2174 = 1;
          v2176 = 3;
          (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1451 + 32))(v1451, 125, &v2168, 1, &v2172, 2, 0);
          v327 = *(_DWORD *)(*(_QWORD *)(v1452 + 32) + 4);
          v589 = v2180;
        }
        v1453 = *v329;
        if ((v589 & 2) != 0)
        {
          v2028 = 35;
          v2029 = 19;
          if ((v589 & 4) == 0)
            v2028 = 19;
          v2030 = v589 >> v2028;
          if ((v589 & 4) == 0)
            v2029 = 3;
          if ((v589 & 1) != 0)
            v2029 = 3;
          v1455 = (8 * (unsigned __int16)(v589 >> v2029)) & 0xFFFFF8000007FFFFLL | ((v2030 & 0xFFFFFF) << 19) | 2;
        }
        else
        {
          v1454 = 3;
          if ((v589 & 1) == 0)
            v1454 = 19;
          v1455 = v589 & 0x8000000000000000 | (8 * (v589 >> v1454)) | 1;
        }
        *(_QWORD *)&v2168 = v1455;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v327;
        LODWORD(v2173) = 0;
        sub_1C5546B4C(v1453, 124, (unint64_t *)&v2168, (int *)&v2172);
        v1457 = *(_DWORD *)(*(_QWORD *)(v1456 + 32) + 4);
        v1458 = *v329;
        *(_QWORD *)&v2168 = v2180;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v1457;
        LODWORD(v2173) = 0;
        sub_1C5547894(v1458, &v2168, &v2172);
        v327 = *(_DWORD *)(*(_QWORD *)(v1459 + 32) + 4);
        v2184 = v2180;
      }
LABEL_1138:
      v1460 = sub_1C4825F50(&v2184);
      v1462 = v1461;
      v5 = 2;
      if (v1460 != sub_1C4825F50((unint64_t *)&v2180) || v1462 != v1463)
        return v5;
      v2145 = v326;
      v1464 = *v329;
      *(_QWORD *)&v2168 = v2184;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v327;
      LODWORD(v2173) = 0;
      v1465 = sub_1C54F8544(v1464, (uint64_t *)&v2168, &v2172);
      v1466 = v586;
      v1468 = v1467;
      v1469 = *v329;
      *(_QWORD *)&v2168 = v2184;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v577;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v327;
      v2176 = 0;
      v1470 = (*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1469 + 32))(v1469, 65, &v2168, 1, &v2172, 2, 0);
      v1472 = v1471;
      v1473 = *v329;
      *(_QWORD *)&v2168 = v2184;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v578;
      LODWORD(v2173) = 0;
      v2174 = v1465;
      v2175 = v1468;
      v2176 = 1;
      v1475 = (*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1473 + 32))(v1473, 65, &v2168, 1, &v2172, 2, 0);
      v1476 = *v329;
      if (v1466)
      {
        *(_QWORD *)&v2168 = v2180;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2172 = v1470;
        *((_QWORD *)&v2172 + 1) = v1472;
        LODWORD(v2173) = 1;
        v2174 = v1475;
        v2175 = v1474;
        v2176 = 1;
        v1477 = (*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1476 + 32))(v1476, 66, &v2168, 1, &v2172, 2, 0);
        v1478 = *v329;
        LODWORD(v2168) = v2145;
        DWORD2(v2168) = 1;
        *(_QWORD *)&v2172 = v1477;
        *((_QWORD *)&v2172 + 1) = v1479;
        LODWORD(v2173) = 1;
        (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1478 + 32))(v1478, 81, &v2168, 1, &v2172, 1, 0);
      }
      else
      {
        LODWORD(v2168) = v2145;
        DWORD2(v2168) = 1;
        *(_QWORD *)&v2172 = v1470;
        *((_QWORD *)&v2172 + 1) = v1472;
        LODWORD(v2173) = 1;
        v2174 = v1475;
        v2175 = v1474;
        v2176 = 1;
        (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1476 + 32))(v1476, 66, &v2168, 1, &v2172, 2, 0);
      }
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0x89:
      v341 = *(_DWORD **)(a2 + 32);
      v343 = v341[9];
      v344 = v341[17];
      v345 = v341[25];
      v346 = *(_QWORD *)a1;
      LODWORD(v2168) = v341[1];
      v342 = v2168;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v344;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v345;
      v2176 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v346 + 32))(v346, 45, &v2168, 1, &v2172, 2, 0);
      v347 = *(_QWORD *)v7;
      LODWORD(v2168) = v343;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = 36;
      LODWORD(v2173) = 2;
      LODWORD(v2174) = v342;
      v2176 = 0;
      LODWORD(v2177) = v345;
      v2179 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v347 + 32))(v347, 134, &v2168, 1, &v2172, 3, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0x8A:
      v306 = *(_DWORD **)(a2 + 32);
      v307 = v306[1];
      v308 = v306[9];
      v309 = v306[17];
      v310 = v306[25];
      v311 = v306[33];
      if (v307 < 0 && (v312 = *(_QWORD *)(a1 + 16), (v307 & 0x7FFFFFFFu) < *(_DWORD *)(v312 + 432)))
        v313 = *(_QWORD *)(*(_QWORD *)(v312 + 424) + 8 * (v307 & 0x7FFFFFFF));
      else
        v313 = 0;
      v505 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v313;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v309;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v310;
      v2176 = 0;
      v506 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v505 + 32))(v505, 45, &v2168, 1, &v2172, 2, 0);
      v508 = v507;
      v509 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v313;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v311;
      LODWORD(v2173) = 0;
      v510 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v509 + 32))(v509, 126, &v2168, 1, &v2172, 1, 0);
      v511 = *(_QWORD *)a1;
      LODWORD(v2168) = v307;
      DWORD2(v2168) = 1;
      *(_QWORD *)&v2172 = v506;
      *((_QWORD *)&v2172 + 1) = v508;
      LODWORD(v2173) = 1;
      v2174 = v510;
      v2175 = v512;
      v2176 = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v511 + 32))(v511, 45, &v2168, 1, &v2172, 2, 0);
      v513 = *(_QWORD *)a1;
      LODWORD(v2168) = v308;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = 36;
      LODWORD(v2173) = 2;
      LODWORD(v2174) = v307;
      v2176 = 0;
      LODWORD(v2177) = v309;
      v2179 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v513 + 32))(v513, 134, &v2168, 1, &v2172, 3, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0x8B:
      v410 = *(_DWORD **)(a2 + 32);
      v411 = v410[9];
      v412 = v410[17];
      v413 = v410[25];
      v414 = *(_QWORD *)a1;
      LODWORD(v2168) = v410[1];
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v412;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v413;
      v2176 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v414 + 32))(v414, 46, &v2168, 1, &v2172, 2, 0);
      v415 = *(_QWORD *)v7;
      LODWORD(v2168) = v411;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = 36;
      LODWORD(v2173) = 2;
      LODWORD(v2174) = v412;
      v2176 = 0;
      LODWORD(v2177) = v413;
      v2179 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v415 + 32))(v415, 134, &v2168, 1, &v2172, 3, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0x8C:
      v373 = *(_DWORD **)(a2 + 32);
      v374 = v373[1];
      v375 = v373[9];
      v376 = *(_QWORD *)(a1 + 16);
      if (v375 < 0 && (v375 & 0x7FFFFFFFu) < *(_DWORD *)(v376 + 432))
        v377 = *(_QWORD *)(*(_QWORD *)(v376 + 424) + 8 * (v375 & 0x7FFFFFFF));
      else
        v377 = 0;
      v658 = v373[17];
      v659 = v373[25];
      v660 = v373[33];
      v2135 = v373[9];
      if (v374 < 0 && (v374 & 0x7FFFFFFFu) < *(_DWORD *)(v376 + 432))
        v661 = *(_QWORD *)(*(_QWORD *)(v376 + 424) + 8 * (v374 & 0x7FFFFFFF));
      else
        v661 = 0;
      v662 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v661;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v658;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v659;
      v2176 = 0;
      v663 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v662 + 32))(v662, 46, &v2168, 1, &v2172, 2, 0);
      v665 = v664;
      v666 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = v661;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v660;
      LODWORD(v2173) = 0;
      v667 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v666 + 32))(v666, 126, &v2168, 1, &v2172, 1, 0);
      v668 = *(_QWORD *)v7;
      LODWORD(v2168) = v374;
      DWORD2(v2168) = 1;
      *(_QWORD *)&v2172 = v663;
      *((_QWORD *)&v2172 + 1) = v665;
      LODWORD(v2173) = 1;
      v2174 = v667;
      v2175 = v669;
      v2176 = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v668 + 32))(v668, 46, &v2168, 1, &v2172, 2, 0);
      v670 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = v377;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = 32;
      LODWORD(v2173) = 2;
      LODWORD(v2174) = v658;
      v2176 = 0;
      LODWORD(v2177) = v659;
      v2179 = 0;
      v671 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v670 + 32))(v670, 134, &v2168, 1, &v2172, 3, 0);
      v673 = v672;
      v674 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = v377;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = 36;
      LODWORD(v2173) = 2;
      LODWORD(v2174) = v658;
      v2176 = 0;
      LODWORD(v2177) = v659;
      v2179 = 0;
      v675 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v674 + 32))(v674, 134, &v2168, 1, &v2172, 3, 0);
      v676 = *(_QWORD *)v7;
      LODWORD(v2168) = v2135;
      DWORD2(v2168) = 1;
      *(_QWORD *)&v2172 = v671;
      *((_QWORD *)&v2172 + 1) = v673;
      LODWORD(v2173) = 1;
      LODWORD(v2174) = v660;
      v2176 = 0;
      v2177 = v675;
      v2178 = v677;
      v2179 = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v676 + 32))(v676, 136, &v2168, 1, &v2172, 3, 0);
      v265 = a2;
      v266 = *(_QWORD *)(a2 + 24);
      v267 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v267 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v267 = a2;
          do
            v267 = *(_QWORD *)(v267 + 8);
          while ((*(_WORD *)(v267 + 44) & 8) != 0);
        }
      }
      goto LABEL_1699;
    case 0x8D:
    case 0x8F:
      v54 = *(_DWORD **)(a2 + 32);
      v55 = v54[1];
      v56 = v54[9];
      v57 = *(_QWORD *)(a1 + 16);
      if (v55 < 0 && (v55 & 0x7FFFFFFFu) < *(_DWORD *)(v57 + 432))
        v58 = *(_QWORD *)(*(_QWORD *)(v57 + 424) + 8 * (v55 & 0x7FFFFFFF));
      else
        v58 = 0;
      if (v56 < 0 && (v56 & 0x7FFFFFFFu) < *(_DWORD *)(v57 + 432))
        v107 = *(_QWORD *)(*(_QWORD *)(v57 + 424) + 8 * (v56 & 0x7FFFFFFF));
      else
        v107 = 0;
      v108 = v54[17];
      v109 = v54[25];
      v110 = *(_QWORD *)a1;
      v2128 = v54[9];
      LODWORD(v2168) = v54[1];
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v108;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v109;
      v2176 = 0;
      if ((_DWORD)v4 == 141)
      {
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 45, &v2168, 1, &v2172, 2, 0);
        v111 = 40;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 46, &v2168, 1, &v2172, 2, 0);
        v111 = 38;
      }
      v253 = *(_QWORD *)a1;
      *(_QWORD *)&v2172 = v58;
      DWORD2(v2172) = 0;
      v254 = sub_1C5544694(v253, (unint64_t *)&v2172, 0);
      v256 = v255;
      v257 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v107;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = 40;
      LODWORD(v2173) = 2;
      LODWORD(v2174) = v55;
      v2176 = 0;
      LODWORD(v2177) = v108;
      v2179 = 0;
      v258 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v257 + 32))(v257, 134, &v2168, 1, &v2172, 3, 0);
      v260 = v259;
      v261 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v107;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v111;
      LODWORD(v2173) = 2;
      LODWORD(v2174) = v109;
      v2176 = 0;
      v2177 = v254;
      v2178 = v256;
      v2179 = 1;
      v262 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v261 + 32))(v261, 134, &v2168, 1, &v2172, 3, 0);
      v263 = *(_QWORD *)a1;
      LODWORD(v2168) = v2128;
      DWORD2(v2168) = 1;
      *(_QWORD *)&v2172 = v262;
      *((_QWORD *)&v2172 + 1) = v264;
      LODWORD(v2173) = 1;
      v2174 = v258;
      v2175 = v260;
      v2176 = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v263 + 32))(v263, 67, &v2168, 1, &v2172, 2, 0);
      v265 = a2;
      v266 = *(_QWORD *)(a2 + 24);
      v267 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v267 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v267 = a2;
          do
            v267 = *(_QWORD *)(v267 + 8);
          while ((*(_WORD *)(v267 + 44) & 8) != 0);
        }
      }
      goto LABEL_1699;
    case 0x91:
    case 0x92:
      v63 = *(_DWORD **)(a2 + 32);
      v64 = v63[1];
      v65 = v63[17];
      v66 = v63[25];
      if (v64 < 0 && (v67 = *(_QWORD *)(a1 + 16), (v64 & 0x7FFFFFFFu) < *(_DWORD *)(v67 + 432)))
        v68 = *(_QWORD *)(*(_QWORD *)(v67 + 424) + 8 * (v64 & 0x7FFFFFFF));
      else
        v68 = 0;
      v122 = v63[9];
      *(_QWORD *)&v2180 = v68;
      if ((_DWORD)v4 == 146)
        v123 = 148;
      else
        v123 = 147;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 16) + 8) + 2256;
      llvm::MachineInstr::removeOperand(v6, 1u);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 8) + 40))(*(_QWORD *)(v7 + 8), v6);
      v124 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = v68;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v65;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v66;
      v2176 = 0;
      v125 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v124 + 32))(v124, v123, &v2168, 1, &v2172, 2, 0);
      v127 = v126;
      v128 = *(_QWORD *)v7;
      *(_QWORD *)&v2172 = v68;
      DWORD2(v2172) = 0;
      v129 = sub_1C5544694(v128, (unint64_t *)&v2172, 0);
      v131 = *(_QWORD *)(*(_QWORD *)v7 + 48);
      if (!v131 || (*(_BYTE *)v131 & 4) == 0)
      {
        while ((*(_WORD *)(v131 + 44) & 8) != 0)
          v131 = *(_QWORD *)(v131 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v7 + 48) = *(_QWORD *)(v131 + 8);
      v132 = *(_QWORD *)v7;
      if ((_DWORD)v4 == 146)
      {
        *(_QWORD *)&v2172 = v68;
        DWORD2(v2172) = 0;
        v134 = sub_1C4825F50((unint64_t *)&v2180);
        if ((_DWORD)v133 == 1)
        v135 = sub_1C5544694(v132, (unint64_t *)&v2172, v134 - 1);
        v136 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v2180;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v64;
        LODWORD(v2173) = 0;
        v2174 = v135;
        v2175 = v137;
        v2176 = 1;
        v138 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v136 + 32))(v136, 129, &v2168, 1, &v2172, 2, 0);
        v139 = *(_QWORD *)v7;
        LODWORD(v2168) = v122;
        DWORD2(v2168) = 1;
        LODWORD(v2172) = 33;
        LODWORD(v2173) = 2;
        v2174 = v125;
        v2175 = v127;
        v2176 = 1;
        v2177 = v138;
        v2178 = v140;
        v2179 = 1;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v139 + 32))(v139, 134, &v2168, 1, &v2172, 3, 0);
      }
      else
      {
        LODWORD(v2168) = v122;
        DWORD2(v2168) = 1;
        LODWORD(v2172) = 33;
        LODWORD(v2173) = 2;
        v2174 = v125;
        v2175 = v127;
        v2176 = 1;
        v2177 = v129;
        v2178 = v130;
        v2179 = 1;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v132 + 32))(v132, 134, &v2168, 1, &v2172, 3, 0);
      }
      return 1;
    case 0x93:
    case 0x94:
      v79 = *(_QWORD *)(a2 + 32);
      v80 = *(_DWORD *)(v79 + 4);
      if (v80 < 0 && (v81 = *(_QWORD *)(a1 + 16), (v80 & 0x7FFFFFFFu) < *(_DWORD *)(v81 + 432)))
      {
        v82 = *(_QWORD *)(*(_QWORD *)(v81 + 424) + 8 * (v80 & 0x7FFFFFFF));
        if ((v82 & 1) != 0)
        {
          v83 = (v82 >> 3);
LABEL_142:
          v165 = (2 * v83);
          if ((v82 & 0xFFFFFFFFFFFFFFF9) != 0 && (v82 & 4) != 0)
          {
            v166 = 0x800000000000000;
            if ((v82 & 2) == 0)
              v166 = 0x8000000000000;
            v167 = v82 & 0x7FFF8 | (v165 << 19) | ((unint64_t)((v166 & v82) != 0) << 51) | 4;
          }
          else
          {
            v167 = (8 * v165) | 1;
          }
          if ((_DWORD)v4 == 148)
            v268 = 124;
          else
            v268 = 126;
          v269 = *(_QWORD *)a1;
          *(_QWORD *)&v2168 = v167;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = *(_DWORD *)(v79 + 36);
          LODWORD(v2173) = 0;
          if ((_DWORD)v4 == 148)
            v270 = 129;
          else
            v270 = 128;
          v271 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v269 + 32))(v269, v268, &v2168, 1, &v2172, 1, 0);
          v273 = v272;
          v274 = *(_QWORD *)a1;
          *(_QWORD *)&v2168 = v167;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 68);
          LODWORD(v2173) = 0;
          v275 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v274 + 32))(v274, v268, &v2168, 1, &v2172, 1, 0);
          v276 = *(_QWORD *)a1;
          *(_QWORD *)&v2168 = v167;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v271;
          *((_QWORD *)&v2172 + 1) = v273;
          LODWORD(v2173) = 1;
          v2174 = v275;
          v2175 = v277;
          v2176 = 1;
          v278 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v276 + 32))(v276, 47, &v2168, 1, &v2172, 2, 0);
          v280 = v279;
          v281 = *(_QWORD *)a1;
          *(_QWORD *)&v2172 = v167;
          DWORD2(v2172) = 0;
          v282 = sub_1C5544694(v281, (unint64_t *)&v2172, v83);
          v283 = *(_QWORD *)a1;
          *(_QWORD *)&v2168 = v167;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v278;
          *((_QWORD *)&v2172 + 1) = v280;
          LODWORD(v2173) = 1;
          v2174 = v282;
          v2175 = v284;
          v2176 = 1;
          v285 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v283 + 32))(v283, v270, &v2168, 1, &v2172, 2, 0);
          v286 = *(_QWORD *)a1;
          LODWORD(v2168) = v80;
          DWORD2(v2168) = 1;
          *(_QWORD *)&v2172 = v285;
          *((_QWORD *)&v2172 + 1) = v287;
          LODWORD(v2173) = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v286 + 32))(v286, 119, &v2168, 1, &v2172, 1, 0);
          v38 = *(_QWORD *)(v6 + 24);
          v39 = v6;
          if ((*(_BYTE *)v6 & 4) == 0)
          {
            v39 = v6;
            if ((*(_WORD *)(v6 + 44) & 8) != 0)
            {
              v39 = v6;
              do
                v39 = *(_QWORD *)(v39 + 8);
              while ((*(_WORD *)(v39 + 44) & 8) != 0);
            }
          }
LABEL_1550:
          v1446 = *(_QWORD *)(v39 + 8);
          v1447 = v38 + 40;
          v265 = v6;
          goto LABEL_1700;
        }
        if ((v82 & 4) != 0)
        {
          if ((v82 & 2) != 0)
            v83 = (unsigned __int16)(v82 >> 19);
          else
            v83 = (v82 >> 19);
          goto LABEL_142;
        }
      }
      else
      {
        v82 = 0;
      }
      v83 = (unsigned __int16)(v82 >> 3);
      goto LABEL_142;
    case 0x95:
    case 0x97:
      v59 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v59 < 0 && (v60 = *(_QWORD *)(a1 + 16), v61 = v59 & 0x7FFFFFFF, v61 < *(_DWORD *)(v60 + 432)))
        v62 = *(_QWORD *)(*(_QWORD *)(v60 + 424) + 8 * v61);
      else
        v62 = 0;
      *(_QWORD *)&v2180 = v62;
      v112 = *(_QWORD *)(a1 + 24);
      LODWORD(v2172) = 197;
      *((_QWORD *)&v2172 + 1) = &v2180;
      v2173 = 1;
      v2174 = 0;
      v2175 = 0;
      v113 = *(_DWORD *)(v112 + 25544);
      if (v113)
        v114 = v113 - 45;
      else
        v114 = 152;
      v115 = sub_1C553C530(v112 + 168 * v114 + 8, (uint64_t)&v2172);
      if (v115 != 11)
        goto LABEL_171;
      if (!v2173)
        goto LABEL_1464;
      v116 = 0;
      v117 = v112 + 35456;
      v118 = 1;
      while (1)
      {
        v119 = *(_QWORD *)(*((_QWORD *)&v2172 + 1) + 8 * v116);
        LODWORD(v2168) = v2172;
        DWORD1(v2168) = v118 - 1;
        *((_QWORD *)&v2168 + 1) = v119;
        v120 = sub_1C553DEB0(v117, (uint64_t)&v2168);
        if (v120)
          break;
        v116 = v118;
        v121 = v2173 > v118++;
        if (!v121)
          goto LABEL_1464;
      }
LABEL_1459:
      if (v120 <= 0xAu && ((1 << v120) & 0x6FE) != 0)
      {
LABEL_172:
        sub_1C5537D90(v7, v6);
        return 1;
      }
LABEL_1464:
      sub_1C5537678(v7, v6);
      return 1;
    case 0x96:
    case 0x98:
      v90 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v90 < 0 && (v91 = *(_QWORD *)(a1 + 16), v92 = v90 & 0x7FFFFFFF, v92 < *(_DWORD *)(v91 + 432)))
        v93 = *(_QWORD *)(*(_QWORD *)(v91 + 424) + 8 * v92);
      else
        v93 = 0;
      v2184 = v93;
      v177 = *(_QWORD *)(a1 + 24);
      LODWORD(v2172) = 195;
      *((_QWORD *)&v2172 + 1) = &v2184;
      v2173 = 1;
      v2174 = 0;
      v2175 = 0;
      v178 = *(_DWORD *)(v177 + 25208);
      if (v178)
        v179 = v178 - 45;
      else
        v179 = 150;
      v180 = sub_1C553C530(v177 + 168 * v179 + 8, (uint64_t)&v2172);
      if (v180 == 11)
      {
        if (!v2173)
          goto LABEL_167;
        v1712 = 0;
        v1713 = v177 + 35456;
        v1714 = 1;
        while (1)
        {
          v1715 = *(_QWORD *)(*((_QWORD *)&v2172 + 1) + 8 * v1712);
          LODWORD(v2168) = v2172;
          DWORD1(v2168) = v1714 - 1;
          *((_QWORD *)&v2168 + 1) = v1715;
          v1716 = sub_1C553DEB0(v1713, (uint64_t)&v2168);
          if (v1716)
            break;
          v1712 = v1714;
          v121 = v2173 > v1714++;
          if (!v121)
            goto LABEL_167;
        }
        if (v1716 <= 0xAu && ((1 << v1716) & 0x6FE) != 0)
          goto LABEL_172;
      }
      else if ((v180 & 0xF7) != 0)
      {
        goto LABEL_172;
      }
LABEL_167:
      v181 = *(_QWORD *)(v7 + 24);
      LODWORD(v2168) = 196;
      *((_QWORD *)&v2168 + 1) = &v2184;
      v2169 = 1;
      v2170 = 0;
      v2171 = 0;
      v182 = *(_DWORD *)(v181 + 25376);
      if (v182)
        v183 = v182 - 45;
      else
        v183 = 151;
      v115 = sub_1C553C530(v181 + 168 * v183 + 8, (uint64_t)&v2168);
      if (v115 != 11)
      {
LABEL_171:
        if ((v115 & 0xF7) == 0)
          goto LABEL_1464;
        goto LABEL_172;
      }
      if (!v2169)
        goto LABEL_1464;
      v1872 = 0;
      v1873 = v181 + 35456;
      v1874 = 1;
      do
      {
        v1875 = *(_QWORD *)(*((_QWORD *)&v2168 + 1) + 8 * v1872);
        LODWORD(v2180) = v2168;
        DWORD1(v2180) = v1874 - 1;
        *((_QWORD *)&v2180 + 1) = v1875;
        v120 = sub_1C553DEB0(v1873, (uint64_t)&v2180);
        if (v120)
          goto LABEL_1459;
        v1872 = v1874;
        v121 = v2169 > v1874++;
      }
      while (v121);
      goto LABEL_1464;
    case 0x99:
    case 0x9A:
      v94 = *(_DWORD **)(a2 + 32);
      v95 = v94[1];
      v96 = v94[9];
      v97 = v94[17];
      if (v95 < 0)
      {
        v98 = (llvm::ConstantInt ******)a1;
        v1170 = *(_QWORD *)(a1 + 16);
        if ((v95 & 0x7FFFFFFFu) < *(_DWORD *)(v1170 + 432))
        {
          v1171 = *(_QWORD *)(*(_QWORD *)(v1170 + 424) + 8 * (v95 & 0x7FFFFFFF));
          if ((v1171 & 0xFFFFFFFFFFFFFFF9) == 0
            || (*(_QWORD *)(*(_QWORD *)(v1170 + 424) + 8 * (v95 & 0x7FFFFFFF)) & 4) == 0)
          {
            v1173 = 9;
          }
          else
          {
            v1448 = 0x800000000000000;
            if ((v1171 & 2) == 0)
              v1448 = 0x8000000000000;
            v1173 = v1171 & 0x7FFF8 | ((unint64_t)((v1448 & v1171) != 0) << 51) | 0x80004;
          }
          v2122 = v1173;
          if ((v1171 & 1) != 0)
          {
            v1174 = v1171 >> 3;
          }
          else
          {
            if ((v1171 & 4) == 0)
              goto LABEL_899;
            if ((v1171 & 2) != 0)
              v1174 = (unsigned __int16)(v1171 >> 19);
            else
              v1174 = v1171 >> 19;
          }
LABEL_900:
          v1175 = *v98;
          *(_QWORD *)&v2168 = v1171;
          DWORD2(v2168) = 0;
          v2142 = v96;
          LODWORD(v2172) = v96;
          LODWORD(v2173) = 0;
          LODWORD(v2174) = v97;
          v2176 = 0;
          v1177 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1175)[4])(v1175, 127, &v2168, 1, &v2172, 2, 0);
          v1178 = v1176;
          v1179 = *v98;
          if ((_DWORD)v4 == 154)
          {
            *(_QWORD *)&v2168 = v1171;
            DWORD2(v2168) = 0;
            *(_QWORD *)&v2172 = v1177;
            *((_QWORD *)&v2172 + 1) = v1176;
            LODWORD(v2173) = 1;
            LODWORD(v2174) = v97;
            v2176 = 0;
            v1180 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1179)[4])(v1179, 129, &v2168, 1, &v2172, 2, 0);
            v2099 = v1182;
            v2108 = v1180;
            v1183 = *v98;
            *(_QWORD *)&v2172 = v1171;
            DWORD2(v2172) = 0;
            DWORD2(v2168) = v1174;
            if (v1174 > 0x40)
            {
              v1185 = &v2168;
              llvm::APInt::initSlowCase((llvm::APInt *)&v2168, 0, 0);
              v1184 = v1174 - 1;
              if (DWORD2(v2168) >= 0x41)
                v1185 = (__int128 *)(v2168 + 8 * (v1184 >> 6));
            }
            else
            {
              *(_QWORD *)&v2168 = 0;
              LOBYTE(v1184) = v1174 - 1;
              v1185 = &v2168;
            }
            *(_QWORD *)v1185 |= 1 << v1184;
            v1186 = llvm::ConstantInt::get(***v1183[1], (llvm::LLVMContext *)&v2168, v1181);
            v1188 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1183)[2])(v1183, &v2172, v1186);
            v2080 = v1189;
            if (DWORD2(v2168) >= 0x41 && (_QWORD)v2168)
              MEMORY[0x1CAA32F9C](v2168, 0x1000C8000313F17);
            v1190 = *v98;
            *(_QWORD *)&v2172 = v1171;
            DWORD2(v2172) = 0;
            DWORD2(v2168) = v1174;
            v2161 = v6;
            v2086 = v1188;
            if (v1174 > 0x40)
            {
              v1192 = &v2168;
              llvm::APInt::initSlowCase((llvm::APInt *)&v2168, -1, 1);
              LODWORD(v1191) = v1174 - 1;
              if (DWORD2(v2168) >= 0x41)
                v1192 = (__int128 *)(v2168 + 8 * (v1191 >> 6));
            }
            else
            {
              if (v1174)
                v1191 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1174;
              else
                v1191 = 0;
              *(_QWORD *)&v2168 = v1191;
              LOBYTE(v1191) = v1174 - 1;
              v1192 = &v2168;
            }
            *(_QWORD *)v1192 &= ~(1 << v1191);
            v1193 = llvm::ConstantInt::get(***v1190[1], (llvm::LLVMContext *)&v2168, v1187);
            v1194 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1190)[2])(v1190, &v2172, v1193);
            v1196 = v1195;
            if (DWORD2(v2168) >= 0x41 && (_QWORD)v2168)
              MEMORY[0x1CAA32F9C](v2168, 0x1000C8000313F17);
            v1197 = (uint64_t)*v98;
            *(_QWORD *)&v2168 = v2122;
            DWORD2(v2168) = 0;
            *(_QWORD *)&v2180 = v1171;
            DWORD2(v2180) = 0;
            v1198 = sub_1C5544694(v1197, (unint64_t *)&v2180, 0);
            LODWORD(v2172) = 40;
            LODWORD(v2173) = 2;
            LODWORD(v2174) = v2142;
            v2176 = 0;
            v2177 = v1198;
            v2178 = v1199;
            v2179 = 1;
            v1200 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1197 + 32))(v1197, 134, &v2168, 1, &v2172, 3, 0);
            v1201 = *v98;
            *(_QWORD *)&v2168 = v1171;
            DWORD2(v2168) = 0;
            *(_QWORD *)&v2172 = v1200;
            *((_QWORD *)&v2172 + 1) = v1202;
            LODWORD(v2173) = 1;
            v2174 = v2086;
            v2175 = v2080;
            v2176 = 1;
            v2177 = v1194;
            v2178 = v1196;
            v1203 = v2142;
            v2179 = 1;
            v1204 = v2122;
            v1205 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1201)[4])(v1201, 136, &v2168, 1, &v2172, 3, 0);
            v1207 = v1206;
            v6 = v2161;
          }
          else
          {
            *(_QWORD *)&v2168 = v1171;
            DWORD2(v2168) = 0;
            *(_QWORD *)&v2172 = v1177;
            *((_QWORD *)&v2172 + 1) = v1176;
            LODWORD(v2173) = 1;
            LODWORD(v2174) = v97;
            v2176 = 0;
            v1208 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1179)[4])(v1179, 128, &v2168, 1, &v2172, 2, 0);
            v2099 = v1210;
            v2108 = v1208;
            v1211 = *v98;
            *(_QWORD *)&v2172 = v1171;
            DWORD2(v2172) = 0;
            DWORD2(v2168) = v1174;
            if (v1174 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v2168, -1, 1);
            }
            else
            {
              v1212 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1174;
              if (!v1174)
                v1212 = 0;
              *(_QWORD *)&v2168 = v1212;
            }
            v1203 = v2142;
            v1213 = llvm::ConstantInt::get(***v1211[1], (llvm::LLVMContext *)&v2168, v1209);
            v1205 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1211)[2])(v1211, &v2172, v1213);
            v1207 = v1214;
            v1204 = v2122;
            if (DWORD2(v2168) >= 0x41 && (_QWORD)v2168)
              MEMORY[0x1CAA32F9C](v2168, 0x1000C8000313F17);
          }
          v1215 = *v98;
          *(_QWORD *)&v2168 = v1204;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = 33;
          LODWORD(v2173) = 2;
          LODWORD(v2174) = v1203;
          v2176 = 0;
          v2177 = v2108;
          v2178 = v2099;
          v2179 = 1;
          v1216 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1215)[4])(v1215, 134, &v2168, 1, &v2172, 3, 0);
          v1217 = *v98;
          LODWORD(v2168) = v95;
          DWORD2(v2168) = 1;
          *(_QWORD *)&v2172 = v1216;
          *((_QWORD *)&v2172 + 1) = v1218;
          LODWORD(v2173) = 1;
          v2174 = v1205;
          v2175 = v1207;
          v2176 = 1;
          v2177 = v1177;
          v2178 = v1178;
          v2179 = 1;
          ((void (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1217)[4])(v1217, 136, &v2168, 1, &v2172, 3, 0);
          v38 = *(_QWORD *)(v6 + 24);
          v39 = v6;
          if ((*(_BYTE *)v6 & 4) == 0)
          {
            v39 = v6;
            if ((*(_WORD *)(v6 + 44) & 8) != 0)
            {
              v39 = v6;
              do
                v39 = *(_QWORD *)(v39 + 8);
              while ((*(_WORD *)(v39 + 44) & 8) != 0);
            }
          }
          goto LABEL_1550;
        }
      }
      else
      {
        v98 = (llvm::ConstantInt ******)a1;
      }
      v1171 = 0;
      v2122 = 9;
LABEL_899:
      v1174 = (unsigned __int16)(v1171 >> 3);
      goto LABEL_900;
    case 0xA4:
      v425 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v425 < 0 && (v426 = *(_QWORD *)(a1 + 16), (v425 & 0x7FFFFFFFu) < *(_DWORD *)(v426 + 432)))
        v427 = *(_QWORD *)(*(_QWORD *)(v426 + 424) + 8 * (v425 & 0x7FFFFFFF));
      else
        v427 = 0;
      v1018 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)&v2180 = v427;
      LODWORD(v2172) = 177;
      *((_QWORD *)&v2172 + 1) = &v2180;
      v2173 = 1;
      v2174 = 0;
      v2175 = 0;
      v1019 = *(_DWORD *)(v1018 + 22184);
      if (v1019)
        v1020 = v1019 - 45;
      else
        v1020 = 132;
      v1021 = sub_1C553C530(v1018 + 168 * v1020 + 8, (uint64_t)&v2172);
      if (v1021 == 11)
      {
        if (!v2173)
          goto LABEL_766;
        v1857 = 0;
        v1858 = v1018 + 35456;
        v1859 = 1;
        while (1)
        {
          v1860 = *(_QWORD *)(*((_QWORD *)&v2172 + 1) + 8 * v1857);
          LODWORD(v2168) = v2172;
          DWORD1(v2168) = v1859 - 1;
          *((_QWORD *)&v2168 + 1) = v1860;
          v1861 = sub_1C553DEB0(v1858, (uint64_t)&v2168);
          if (v1861)
            break;
          v1857 = v1859;
          v121 = v2173 > v1859++;
          if (!v121)
            goto LABEL_766;
        }
        if (v1861 == 6)
          return 2;
      }
      else if (v1021 == 6)
      {
        return 2;
      }
LABEL_766:
      v1022 = *(_QWORD *)(v6 + 32);
      v1023 = *(_DWORD *)(v1022 + 36);
      v1024 = *(_DWORD *)(v1022 + 68);
      v1025 = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(v7 + 16), v427, "", 0);
      v1026 = *(_QWORD *)v7;
      LODWORD(v2168) = v1025;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v1024;
      LODWORD(v2173) = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1026
                                                                                                 + 32))(v1026, 177, &v2168, 1, &v2172, 1, 0);
      v1027 = *(_QWORD *)v7;
      v1028 = *(unsigned __int16 *)(v6 + 44) | 0x100000000;
      LODWORD(v2168) = v425;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v1023;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v1025;
      v2176 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v1027
                                                                                                  + 32))(v1027, 163, &v2168, 1, &v2172, 2, v1028);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0xA7:
      v437 = *(_DWORD **)(a2 + 32);
      v438 = v437[1];
      if (v438 < 0 && (v439 = *(_QWORD *)(a1 + 16), (v438 & 0x7FFFFFFFu) < *(_DWORD *)(v439 + 432)))
        v440 = *(_QWORD *)(*(_QWORD *)(v439 + 424) + 8 * (v438 & 0x7FFFFFFF));
      else
        v440 = 0;
      v1050 = *(_QWORD *)a1;
      v1051 = v437[9];
      v1052 = v437[17];
      v1053 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
      *(_QWORD *)&v2168 = v440;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v1051;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v1052;
      v2176 = 0;
      v1054 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v1050 + 32))(v1050, 165, &v2168, 1, &v2172, 2, v1053);
      v1055 = *(_QWORD *)v7;
      v1056 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 100);
      LODWORD(v2168) = v438;
      DWORD2(v2168) = 1;
      *(_QWORD *)&v2172 = v1054;
      *((_QWORD *)&v2172 + 1) = v1057;
      LODWORD(v2173) = 1;
      LODWORD(v2174) = v1056;
      v2176 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v1055
                                                                                                  + 32))(v1055, 163, &v2168, 1, &v2172, 2, v1053);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0xAB:
      v359 = *(_DWORD **)(a2 + 32);
      v360 = v359[1];
      v361 = v359[9];
      v362 = v359[17];
      if (v360 < 0 && (v363 = *(_QWORD *)(a1 + 16), (v360 & 0x7FFFFFFFu) < *(_DWORD *)(v363 + 432)))
        v364 = *(_QWORD *)(*(_QWORD *)(v363 + 424) + 8 * (v360 & 0x7FFFFFFF));
      else
        v364 = 0;
      v653 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v364;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v362;
      LODWORD(v2173) = 0;
      v654 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v653 + 32))(v653, 182, &v2168, 1, &v2172, 1, 0);
      v655 = *(_QWORD *)v7;
      v656 = *(unsigned __int16 *)(v6 + 44) | 0x100000000;
      LODWORD(v2168) = v360;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v361;
      LODWORD(v2173) = 0;
      v2174 = v654;
      v2175 = v657;
      v2176 = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v655
                                                                                                  + 32))(v655, 170, &v2168, 1, &v2172, 2, v656);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0xB1:
      v428 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v428 < 0 && (v429 = *(_QWORD *)(a1 + 16), (v428 & 0x7FFFFFFFu) < *(_DWORD *)(v429 + 432)))
      {
        v430 = *(_QWORD *)(*(_QWORD *)(v429 + 424) + 8 * (v428 & 0x7FFFFFFF));
        *(_QWORD *)&v2180 = v430;
        if ((v430 & 0xFFFFFFFFFFFFFFF9) != 0 && (v430 & 4) != 0)
          return 2;
      }
      else
      {
        v430 = 0;
        *(_QWORD *)&v2180 = 0;
      }
      v1029 = *(llvm::ConstantInt ******)a1;
      *(_QWORD *)&v2172 = v430;
      DWORD2(v2172) = 0;
      v1032 = sub_1C4825F50((unint64_t *)&v2180);
      if ((_DWORD)v1030 == 1)
      DWORD2(v2168) = v1032;
      if (v1032 > 0x40)
      {
        v1034 = &v2168;
        llvm::APInt::initSlowCase((llvm::APInt *)&v2168, 0, 0);
        v1033 = v1032 - 1;
        if (DWORD2(v2168) >= 0x41)
          v1034 = (__int128 *)(v2168 + 8 * (v1033 >> 6));
      }
      else
      {
        *(_QWORD *)&v2168 = 0;
        LOBYTE(v1033) = v1032 - 1;
        v1034 = &v2168;
      }
      *(_QWORD *)v1034 |= 1 << v1033;
      v1035 = llvm::ConstantInt::get(***v1029[1], (llvm::LLVMContext *)&v2168, v1031);
      v1036 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1029)[2])(v1029, &v2172, v1035);
      v1038 = v1037;
      if (DWORD2(v2168) >= 0x41 && (_QWORD)v2168)
        MEMORY[0x1CAA32F9C](v2168, 0x1000C8000313F17);
      v1039 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 36);
      v1040 = *(_QWORD *)v7;
      LODWORD(v2168) = v428;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v1039;
      LODWORD(v2173) = 0;
      v2174 = v1036;
      v2175 = v1038;
      v2176 = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1040
                                                                                                 + 32))(v1040, 67, &v2168, 1, &v2172, 2, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0xB3:
      v405 = *(_QWORD *)(a2 + 32);
      v406 = *(_DWORD *)(v405 + 4);
      v407 = *(_DWORD *)(v405 + 36);
      v408 = *(_QWORD *)(a1 + 16);
      if (v406 < 0 && (v406 & 0x7FFFFFFFu) < *(_DWORD *)(v408 + 432))
        v409 = *(_QWORD *)(*(_QWORD *)(v408 + 424) + 8 * (v406 & 0x7FFFFFFF));
      else
        v409 = 0;
      if (v407 < 0 && (v407 & 0x7FFFFFFFu) < *(_DWORD *)(v408 + 432))
        v788 = *(_QWORD *)(*(_QWORD *)(v408 + 424) + 8 * (v407 & 0x7FFFFFFF));
      else
        v788 = 0;
      if ((v409 & 0xFFFFFFFFFFFFFFF9) == 0 || (v409 & 4) == 0)
        goto LABEL_733;
      if ((v409 & 2) != 0)
        return 2;
      v789 = 3;
      if ((v409 & 1) == 0)
        v789 = 19;
      v409 = v409 & 0x8000000000000000 | (8 * (v409 >> v789)) | 1;
LABEL_733:
      if (v409 != 129)
        return 2;
      if ((v788 & 0xFFFFFFFFFFFFFFF9) == 0 || (v788 & 4) == 0)
        goto LABEL_740;
      if ((v788 & 2) != 0)
        return 2;
      v790 = 3;
      if ((v788 & 1) == 0)
        v790 = 19;
      v788 = v788 & 0x8000000000000000 | (8 * (v788 >> v790)) | 1;
LABEL_740:
      if (v788 != 513)
        return 2;
      if (v407 < 0 && (v407 & 0x7FFFFFFFu) < *(_DWORD *)(v408 + 432))
      {
        v791 = *(_QWORD *)(*(_QWORD *)(v408 + 424) + 8 * (v407 & 0x7FFFFFFF));
        v792 = v791 & 0xFFFFFFFFFFFFFFF9;
        v793 = v791 & 4;
        if (v792 && v793 != 0)
          return 2;
      }
      v795 = *(uint64_t **)a1;
      LODWORD(v2172) = v407;
      LODWORD(v2173) = 0;
      v2106 = v406;
      sub_1C5544C30(v795, 257, (int *)&v2172);
      v797 = *(_QWORD *)(v796 + 32);
      v798 = *(_DWORD *)(v797 + 4);
      v799 = *(_DWORD *)(v797 + 36);
      v800 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v801 = sub_1C5544694(v800, (unint64_t *)&v2180, 20);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v799;
      LODWORD(v2173) = 0;
      v2174 = v801;
      v2175 = v802;
      v2176 = 1;
      v803 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v800 + 32))(v800, 128, &v2168, 1, &v2172, 2, 0);
      v805 = v804;
      v806 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v807 = sub_1C5544694(v806, (unint64_t *)&v2180, 2047);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v803;
      *((_QWORD *)&v2172 + 1) = v805;
      LODWORD(v2173) = 1;
      v2174 = v807;
      v2175 = v808;
      v2176 = 1;
      v809 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v806 + 32))(v806, 65, &v2168, 1, &v2172, 2, 0);
      v811 = v810;
      v812 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v813 = sub_1C5544694(v812, (unint64_t *)&v2180, 4294966288);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v809;
      *((_QWORD *)&v2172 + 1) = v811;
      LODWORD(v2173) = 1;
      v2174 = v813;
      v2175 = v814;
      v2176 = 1;
      v815 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v812 + 32))(v812, 45, &v2168, 1, &v2172, 2, 0);
      v2119 = v816;
      v2138 = v815;
      v817 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v818 = sub_1C5544694(v817, (unint64_t *)&v2180, 8);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v799;
      LODWORD(v2173) = 0;
      v2174 = v818;
      v2175 = v819;
      v2176 = 1;
      v820 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v817 + 32))(v817, 128, &v2168, 1, &v2172, 2, 0);
      v822 = v821;
      v823 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v824 = sub_1C5544694(v823, (unint64_t *)&v2180, 4094);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v820;
      *((_QWORD *)&v2172 + 1) = v822;
      LODWORD(v2173) = 1;
      v2174 = v824;
      v2175 = v825;
      v2176 = 1;
      v826 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v823 + 32))(v823, 65, &v2168, 1, &v2172, 2, 0);
      v828 = v827;
      v829 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v830 = sub_1C5544694(v829, (unint64_t *)&v2180, 511);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v799;
      LODWORD(v2173) = 0;
      v2174 = v830;
      v2175 = v831;
      v2176 = 1;
      v832 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v829 + 32))(v829, 65, &v2168, 1, &v2172, 2, 0);
      v833 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v832;
      *((_QWORD *)&v2172 + 1) = v834;
      LODWORD(v2173) = 1;
      LODWORD(v2174) = v798;
      v2176 = 0;
      v835 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v833 + 32))(v833, 66, &v2168, 1, &v2172, 2, 0);
      v837 = v836;
      v838 = *(_QWORD *)v7;
      *(_QWORD *)&v2172 = 257;
      DWORD2(v2172) = 0;
      v839 = sub_1C5544694(v838, (unint64_t *)&v2172, 0);
      v2159 = v6;
      v841 = v840;
      v842 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = 9;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = 33;
      LODWORD(v2173) = 2;
      v2174 = v835;
      v2175 = v837;
      v2176 = 1;
      v2177 = v839;
      v2178 = v840;
      v2179 = 1;
      v843 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v842 + 32))(v842, 134, &v2168, 1, &v2172, 3, 0);
      v844 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v843;
      *((_QWORD *)&v2172 + 1) = v845;
      LODWORD(v2173) = 1;
      v846 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v844 + 32))(v844, 126, &v2168, 1, &v2172, 1, 0);
      v847 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v826;
      *((_QWORD *)&v2172 + 1) = v828;
      LODWORD(v2173) = 1;
      v2174 = v846;
      v2175 = v848;
      v2176 = 1;
      v849 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v847 + 32))(v847, 66, &v2168, 1, &v2172, 2, 0);
      v851 = v850;
      v852 = *(_QWORD *)v7;
      *(_QWORD *)&v2172 = 257;
      DWORD2(v2172) = 0;
      v853 = sub_1C5544694(v852, (unint64_t *)&v2172, 512);
      v855 = v854;
      v856 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = 9;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = 33;
      LODWORD(v2173) = 2;
      v2174 = v849;
      v2175 = v851;
      v2176 = 1;
      v2177 = v839;
      v2178 = v841;
      v2179 = 1;
      v857 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v856 + 32))(v856, 134, &v2168, 1, &v2172, 3, 0);
      v858 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v857;
      *((_QWORD *)&v2172 + 1) = v859;
      LODWORD(v2173) = 1;
      v2174 = v853;
      v2175 = v855;
      v2176 = 1;
      v2177 = v839;
      v2178 = v841;
      v2179 = 1;
      v860 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v858 + 32))(v858, 136, &v2168, 1, &v2172, 3, 0);
      v862 = v861;
      v863 = *(_QWORD *)v7;
      *(_QWORD *)&v2172 = 257;
      DWORD2(v2172) = 0;
      v864 = sub_1C5544694(v863, (unint64_t *)&v2172, 31744);
      v865 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v860;
      *((_QWORD *)&v2172 + 1) = v862;
      LODWORD(v2173) = 1;
      v2174 = v864;
      v2175 = v866;
      v2176 = 1;
      v867 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v865 + 32))(v865, 66, &v2168, 1, &v2172, 2, 0);
      v2084 = v868;
      v2091 = v867;
      v869 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v870 = sub_1C5544694(v869, (unint64_t *)&v2180, 12);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v2138;
      *((_QWORD *)&v2172 + 1) = v2119;
      LODWORD(v2173) = 1;
      v2174 = v870;
      v2175 = v871;
      v2176 = 1;
      v872 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v869 + 32))(v869, 127, &v2168, 1, &v2172, 2, 0);
      v873 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v849;
      *((_QWORD *)&v2172 + 1) = v851;
      LODWORD(v2173) = 1;
      v2174 = v872;
      v2175 = v874;
      v2176 = 1;
      v875 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v873 + 32))(v873, 66, &v2168, 1, &v2172, 2, 0);
      v2073 = v876;
      v2077 = v875;
      v877 = *(_QWORD *)v7;
      *(_QWORD *)&v2172 = 257;
      DWORD2(v2172) = 0;
      v878 = sub_1C5544694(v877, (unint64_t *)&v2172, 1);
      v2068 = v879;
      v2070 = v878;
      v880 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v878;
      *((_QWORD *)&v2172 + 1) = v879;
      LODWORD(v2173) = 1;
      v2174 = v2138;
      v2175 = v2119;
      v2176 = 1;
      v881 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v880 + 32))(v880, 46, &v2168, 1, &v2172, 2, 0);
      v882 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v881;
      *((_QWORD *)&v2172 + 1) = v883;
      LODWORD(v2173) = 1;
      v2174 = v839;
      v2175 = v841;
      v2176 = 1;
      v884 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v882 + 32))(v882, 196, &v2168, 1, &v2172, 2, 0);
      v885 = (uint64_t *)v7;
      v887 = v886;
      v888 = *v885;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v889 = sub_1C5544694(v888, (unint64_t *)&v2180, 13);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v884;
      *((_QWORD *)&v2172 + 1) = v887;
      LODWORD(v2173) = 1;
      v2174 = v889;
      v2175 = v890;
      v2176 = 1;
      v891 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v888 + 32))(v888, 195, &v2168, 1, &v2172, 2, 0);
      v893 = v892;
      v894 = *v885;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v895 = sub_1C5544694(v894, (unint64_t *)&v2180, 4096);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v849;
      *((_QWORD *)&v2172 + 1) = v851;
      LODWORD(v2173) = 1;
      v2174 = v895;
      v2175 = v896;
      v2176 = 1;
      v897 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v894 + 32))(v894, 66, &v2168, 1, &v2172, 2, 0);
      v899 = v898;
      v900 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v897;
      *((_QWORD *)&v2172 + 1) = v898;
      LODWORD(v2173) = 1;
      v2174 = v891;
      v2175 = v893;
      v2176 = 1;
      v901 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v900 + 32))(v900, 128, &v2168, 1, &v2172, 2, 0);
      v903 = v902;
      v904 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v901;
      *((_QWORD *)&v2172 + 1) = v902;
      LODWORD(v2173) = 1;
      v2174 = v891;
      v2175 = v893;
      v2176 = 1;
      v905 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v904 + 32))(v904, 127, &v2168, 1, &v2172, 2, 0);
      v906 = *v885;
      *(_QWORD *)&v2168 = 9;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = 33;
      LODWORD(v2173) = 2;
      v2174 = v905;
      v2175 = v907;
      v2176 = 1;
      v2177 = v897;
      v2178 = v899;
      v2179 = 1;
      v908 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v906 + 32))(v906, 134, &v2168, 1, &v2172, 3, 0);
      v909 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v908;
      *((_QWORD *)&v2172 + 1) = v910;
      LODWORD(v2173) = 1;
      v911 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v909 + 32))(v909, 126, &v2168, 1, &v2172, 1, 0);
      v912 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v901;
      *((_QWORD *)&v2172 + 1) = v903;
      LODWORD(v2173) = 1;
      v2174 = v911;
      v2175 = v913;
      v2176 = 1;
      v914 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v912 + 32))(v912, 66, &v2168, 1, &v2172, 2, 0);
      v916 = v915;
      v917 = *v885;
      *(_QWORD *)&v2168 = 9;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = 40;
      LODWORD(v2173) = 2;
      v2174 = v2138;
      v2175 = v2119;
      v2176 = 1;
      v2177 = v2070;
      v2178 = v2068;
      v2179 = 1;
      v918 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v917 + 32))(v917, 134, &v2168, 1, &v2172, 3, 0);
      v919 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v918;
      *((_QWORD *)&v2172 + 1) = v920;
      LODWORD(v2173) = 1;
      v2174 = v914;
      v2175 = v916;
      v2176 = 1;
      v2177 = v2077;
      v2178 = v2073;
      v2179 = 1;
      v921 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v919 + 32))(v919, 136, &v2168, 1, &v2172, 3, 0);
      v923 = v922;
      v924 = *v885;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v925 = sub_1C5544694(v924, (unint64_t *)&v2180, 7);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v921;
      *((_QWORD *)&v2172 + 1) = v923;
      LODWORD(v2173) = 1;
      v2174 = v925;
      v2175 = v926;
      v2176 = 1;
      v927 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v924 + 32))(v924, 65, &v2168, 1, &v2172, 2, 0);
      v929 = v928;
      v930 = *v885;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v931 = sub_1C5544694(v930, (unint64_t *)&v2180, 2);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v921;
      *((_QWORD *)&v2172 + 1) = v923;
      LODWORD(v2173) = 1;
      v2174 = v931;
      v2175 = v932;
      v2176 = 1;
      v933 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v930 + 32))(v930, 128, &v2168, 1, &v2172, 2, 0);
      v2074 = v934;
      v2078 = v933;
      v935 = *v885;
      *(_QWORD *)&v2168 = 9;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v936 = sub_1C5544694(v935, (unint64_t *)&v2180, 3);
      LODWORD(v2172) = 32;
      LODWORD(v2173) = 2;
      v2174 = v927;
      v2175 = v929;
      v2176 = 1;
      v2177 = v936;
      v2178 = v937;
      v2179 = 1;
      v938 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v935 + 32))(v935, 134, &v2168, 1, &v2172, 3, 0);
      v939 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v938;
      *((_QWORD *)&v2172 + 1) = v940;
      LODWORD(v2173) = 1;
      v941 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v939 + 32))(v939, 126, &v2168, 1, &v2172, 1, 0);
      v943 = v942;
      v944 = *v885;
      *(_QWORD *)&v2168 = 9;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v945 = sub_1C5544694(v944, (unint64_t *)&v2180, 5);
      LODWORD(v2172) = 38;
      LODWORD(v2173) = 2;
      v2174 = v927;
      v2175 = v929;
      v2176 = 1;
      v2177 = v945;
      v2178 = v946;
      v2179 = 1;
      v947 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v944 + 32))(v944, 134, &v2168, 1, &v2172, 3, 0);
      v948 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v947;
      *((_QWORD *)&v2172 + 1) = v949;
      LODWORD(v2173) = 1;
      v950 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v948 + 32))(v948, 126, &v2168, 1, &v2172, 1, 0);
      v951 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v941;
      *((_QWORD *)&v2172 + 1) = v943;
      LODWORD(v2173) = 1;
      v2174 = v950;
      v2175 = v952;
      v2176 = 1;
      v953 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v951 + 32))(v951, 66, &v2168, 1, &v2172, 2, 0);
      v954 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v2078;
      *((_QWORD *)&v2172 + 1) = v2074;
      LODWORD(v2173) = 1;
      v2174 = v953;
      v2175 = v955;
      v2176 = 1;
      v956 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v954 + 32))(v954, 45, &v2168, 1, &v2172, 2, 0);
      v958 = v957;
      v959 = *v885;
      *(_QWORD *)&v2168 = 9;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v960 = sub_1C5544694(v959, (unint64_t *)&v2180, 30);
      LODWORD(v2172) = 38;
      LODWORD(v2173) = 2;
      v2174 = v2138;
      v2175 = v2119;
      v2176 = 1;
      v2177 = v960;
      v2178 = v961;
      v2179 = 1;
      v962 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v959 + 32))(v959, 134, &v2168, 1, &v2172, 3, 0);
      v964 = v963;
      v965 = *v885;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v966 = sub_1C5544694(v965, (unint64_t *)&v2180, 31744);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v962;
      *((_QWORD *)&v2172 + 1) = v964;
      LODWORD(v2173) = 1;
      v2174 = v966;
      v2175 = v967;
      v2176 = 1;
      v2177 = v956;
      v2178 = v958;
      v2179 = 1;
      v968 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v965 + 32))(v965, 136, &v2168, 1, &v2172, 3, 0);
      v970 = v969;
      v971 = *v885;
      *(_QWORD *)&v2168 = 9;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v972 = sub_1C5544694(v971, (unint64_t *)&v2180, 1039);
      LODWORD(v2172) = 32;
      LODWORD(v2173) = 2;
      v2174 = v2138;
      v2175 = v2119;
      v2176 = 1;
      v2177 = v972;
      v2178 = v973;
      v2179 = 1;
      v974 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v971 + 32))(v971, 134, &v2168, 1, &v2172, 3, 0);
      v975 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v974;
      *((_QWORD *)&v2172 + 1) = v976;
      LODWORD(v2173) = 1;
      v2174 = v2091;
      v2175 = v2084;
      v2176 = 1;
      v2177 = v968;
      v2178 = v970;
      v2179 = 1;
      v977 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v975 + 32))(v975, 136, &v2168, 1, &v2172, 3, 0);
      v979 = v978;
      v980 = *v885;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v981 = sub_1C5544694(v980, (unint64_t *)&v2180, 16);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v799;
      LODWORD(v2173) = 0;
      v2174 = v981;
      v2175 = v982;
      v2176 = 1;
      v983 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v980 + 32))(v980, 128, &v2168, 1, &v2172, 2, 0);
      v985 = v984;
      v986 = *v885;
      *(_QWORD *)&v2180 = 257;
      DWORD2(v2180) = 0;
      v987 = sub_1C5544694(v986, (unint64_t *)&v2180, 0x8000);
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v983;
      *((_QWORD *)&v2172 + 1) = v985;
      LODWORD(v2173) = 1;
      v2174 = v987;
      v2175 = v988;
      v2176 = 1;
      v989 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v986 + 32))(v986, 65, &v2168, 1, &v2172, 2, 0);
      v990 = *v885;
      *(_QWORD *)&v2168 = 257;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v989;
      *((_QWORD *)&v2172 + 1) = v991;
      LODWORD(v2173) = 1;
      v2174 = v977;
      v2175 = v979;
      v2176 = 1;
      v992 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v990 + 32))(v990, 66, &v2168, 1, &v2172, 2, 0);
      v993 = *v885;
      LODWORD(v2168) = v2106;
      DWORD2(v2168) = 1;
      *(_QWORD *)&v2172 = v992;
      *((_QWORD *)&v2172 + 1) = v994;
      LODWORD(v2173) = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v993 + 32))(v993, 119, &v2168, 1, &v2172, 1, 0);
      v265 = v2159;
      v266 = *(_QWORD *)(v2159 + 24);
      v267 = v2159;
      if ((*(_BYTE *)v2159 & 4) == 0)
      {
        v267 = v2159;
        if ((*(_WORD *)(v2159 + 44) & 8) != 0)
        {
          v267 = v2159;
          do
            v267 = *(_QWORD *)(v267 + 8);
          while ((*(_WORD *)(v267 + 44) & 8) != 0);
        }
      }
      goto LABEL_1699;
    case 0xB4:
      v446 = *(_QWORD *)(a2 + 32);
      v447 = *(_DWORD *)(v446 + 4);
      v448 = *(_DWORD *)(v446 + 36);
      v449 = *(_QWORD *)(a1 + 16);
      if (v447 < 0 && (v447 & 0x7FFFFFFFu) < *(_DWORD *)(v449 + 432))
        v451 = *(_QWORD *)(*(_QWORD *)(v449 + 424) + 8 * (v447 & 0x7FFFFFFF));
      else
        v451 = 0;
      if ((v448 & 0x80000000) == 0 || (v448 & 0x7FFFFFFFu) >= *(_DWORD *)(v449 + 432))
        return 2;
      v1060 = *(_QWORD *)(*(_QWORD *)(v449 + 424) + 8 * (v448 & 0x7FFFFFFF));
      v1061 = (v1060 & 0xFFFFFFFFFFFFFFF9) == 0
           || (*(_QWORD *)(*(_QWORD *)(v449 + 424) + 8 * (v448 & 0x7FFFFFFF)) & 4) == 0;
      v1062 = *(_QWORD *)(*(_QWORD *)(v449 + 424) + 8 * (v448 & 0x7FFFFFFF));
      if (v1061)
        goto LABEL_815;
      if ((v1060 & 2) != 0)
        return 2;
      v1063 = 3;
      if ((v1060 & 1) == 0)
        v1063 = 19;
      v1062 = v1060 & 0x8000000000000000 | (8 * (v1060 >> v1063)) | 1;
LABEL_815:
      if (v1062 != 257)
        return 2;
      v1064 = v451;
      if ((v451 & 0xFFFFFFFFFFFFFFF9) == 0)
        goto LABEL_822;
      v1064 = v451;
      if ((v451 & 4) == 0)
        goto LABEL_822;
      if ((v451 & 2) != 0)
        return 2;
      v1065 = 3;
      if ((v451 & 1) == 0)
        v1065 = 19;
      v1064 = v451 & 0x8000000000000000 | (8 * (v451 >> v1065)) | 1;
LABEL_822:
      if (v1064 != 513)
        return 2;
      if ((v1060 & 1) != 0)
      {
        v1066 = v1060 >> 3;
      }
      else if ((v1060 & 4) != 0)
      {
        if ((v1060 & 2) != 0)
          v1066 = (unsigned __int16)(v1060 >> 19);
        else
          v1066 = v1060 >> 19;
      }
      else
      {
        v1066 = (unsigned __int16)(v1060 >> 3);
      }
      v2087 = v1066;
      v1746 = *(_QWORD *)a1;
      *(_QWORD *)&v2172 = v1060;
      DWORD2(v2172) = 0;
      v1747 = sub_1C5544694(v1746, (unint64_t *)&v2172, 2139095040);
      v1749 = v1748;
      v1750 = *(_QWORD *)a1;
      *(_QWORD *)&v2172 = v1060;
      DWORD2(v2172) = 0;
      v1751 = sub_1C5544694(v1750, (unint64_t *)&v2172, 23);
      v1753 = v1752;
      v1754 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v1060;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v448;
      LODWORD(v2173) = 0;
      v2174 = v1747;
      v2175 = v1749;
      v2176 = 1;
      v1755 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1754 + 32))(v1754, 65, &v2168, 1, &v2172, 2, 0);
      v1756 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v1060;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1755;
      *((_QWORD *)&v2172 + 1) = v1757;
      LODWORD(v2173) = 1;
      v2111 = v1753;
      v2174 = v1751;
      v2175 = v1753;
      v2176 = 1;
      v1758 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1756 + 32))(v1756, 128, &v2168, 1, &v2172, 2, 0);
      v2094 = v1760;
      v2101 = v1758;
      v2148 = (uint64_t *)a1;
      v1761 = *(llvm::ConstantInt ******)a1;
      *(_QWORD *)&v2172 = v1060;
      DWORD2(v2172) = 0;
      DWORD2(v2168) = v2087;
      if (v2087 > 0x40)
      {
        v1763 = &v2168;
        llvm::APInt::initSlowCase((llvm::APInt *)&v2168, 0, 0);
        v1762 = v2087 - 1;
        if (DWORD2(v2168) >= 0x41)
          v1763 = (__int128 *)(v2168 + 8 * (v1762 >> 6));
      }
      else
      {
        *(_QWORD *)&v2168 = 0;
        LOBYTE(v1762) = v2087 - 1;
        v1763 = &v2168;
      }
      *(_QWORD *)v1763 |= 1 << v1762;
      v1764 = llvm::ConstantInt::get(***v1761[1], (llvm::LLVMContext *)&v2168, v1759);
      v1765 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1761)[2])(v1761, &v2172, v1764);
      v1767 = v1766;
      if (DWORD2(v2168) >= 0x41 && (_QWORD)v2168)
        MEMORY[0x1CAA32F9C](v2168, 0x1000C8000313F17);
      v1768 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v1060;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v448;
      LODWORD(v2173) = 0;
      v2174 = v1765;
      v2175 = v1767;
      v2176 = 1;
      v1769 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1768 + 32))(v1768, 65, &v2168, 1, &v2172, 2, 0);
      v1771 = v1770;
      v1772 = *(_QWORD *)a1;
      *(_QWORD *)&v2172 = v1060;
      DWORD2(v2172) = 0;
      v1773 = sub_1C5544694(v1772, (unint64_t *)&v2172, v2087 - 1);
      v1774 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v1060;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1769;
      *((_QWORD *)&v2172 + 1) = v1771;
      LODWORD(v2173) = 1;
      v2174 = v1773;
      v2175 = v1775;
      v2176 = 1;
      v1776 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1774 + 32))(v1774, 129, &v2168, 1, &v2172, 2, 0);
      v1777 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v451;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1776;
      *((_QWORD *)&v2172 + 1) = v1778;
      LODWORD(v2173) = 1;
      v1779 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1777 + 32))(v1777, 124, &v2168, 1, &v2172, 1, 0);
      v2081 = v1780;
      v2088 = v1779;
      v1781 = *(_QWORD *)a1;
      *(_QWORD *)&v2172 = v1060;
      DWORD2(v2172) = 0;
      v1782 = sub_1C5544694(v1781, (unint64_t *)&v2172, 0x7FFFFFLL);
      v1783 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v1060;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v448;
      LODWORD(v2173) = 0;
      v2174 = v1782;
      v2175 = v1784;
      v2176 = 1;
      v1785 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1783 + 32))(v1783, 65, &v2168, 1, &v2172, 2, 0);
      v1787 = v1786;
      v1788 = *(_QWORD *)a1;
      *(_QWORD *)&v2172 = v1060;
      DWORD2(v2172) = 0;
      v1789 = sub_1C5544694(v1788, (unint64_t *)&v2172, 0x800000);
      v1790 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v1060;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1785;
      *((_QWORD *)&v2172 + 1) = v1787;
      LODWORD(v2173) = 1;
      v2174 = v1789;
      v2175 = v1791;
      v2176 = 1;
      v1792 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1790 + 32))(v1790, 66, &v2168, 1, &v2172, 2, 0);
      v1793 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v451;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1792;
      *((_QWORD *)&v2172 + 1) = v1794;
      LODWORD(v2173) = 1;
      v1795 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1793 + 32))(v1793, 126, &v2168, 1, &v2172, 1, 0);
      v2071 = v1796;
      v2075 = v1795;
      v1797 = *(_QWORD *)a1;
      *(_QWORD *)&v2172 = v1060;
      DWORD2(v2172) = 0;
      v1798 = sub_1C5544694(v1797, (unint64_t *)&v2172, 127);
      v1799 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v1060;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v2101;
      *((_QWORD *)&v2172 + 1) = v2094;
      LODWORD(v2173) = 1;
      v2174 = v1798;
      v2175 = v1800;
      v2176 = 1;
      v1801 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1799 + 32))(v1799, 46, &v2168, 1, &v2172, 2, 0);
      v1802 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v1060;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1801;
      *((_QWORD *)&v2172 + 1) = v1803;
      v1804 = v1801;
      v2095 = v1803;
      v2102 = v1801;
      v1805 = v1803;
      LODWORD(v2173) = 1;
      v2174 = v1751;
      v2175 = v2111;
      v2176 = 1;
      v2069 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1802 + 32))(v1802, 46, &v2168, 1, &v2172, 2, 0);
      v1807 = v1806;
      v1808 = *v2148;
      *(_QWORD *)&v2168 = v1060;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1751;
      *((_QWORD *)&v2172 + 1) = v2111;
      LODWORD(v2173) = 1;
      v2174 = v1804;
      v2175 = v1805;
      v2176 = 1;
      v2067 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1808 + 32))(v1808, 46, &v2168, 1, &v2172, 2, 0);
      v1810 = v1809;
      v1811 = *v2148;
      *(_QWORD *)&v2168 = v451;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v2075;
      *((_QWORD *)&v2172 + 1) = v2071;
      LODWORD(v2173) = 1;
      v2174 = v2069;
      v2175 = v1807;
      v2176 = 1;
      v1812 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1811 + 32))(v1811, 127, &v2168, 1, &v2172, 2, 0);
      v1814 = v1813;
      v1815 = *v2148;
      *(_QWORD *)&v2168 = v451;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v2075;
      *((_QWORD *)&v2172 + 1) = v2071;
      LODWORD(v2173) = 1;
      v2174 = v2067;
      v2175 = v1810;
      v2176 = 1;
      v1816 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1815 + 32))(v1815, 128, &v2168, 1, &v2172, 2, 0);
      v1818 = v1817;
      v1819 = *v2148;
      *(_QWORD *)&v2168 = 9;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = 38;
      LODWORD(v2173) = 2;
      v2174 = v2102;
      v2175 = v2095;
      v2176 = 1;
      v2177 = v1751;
      v2178 = v2111;
      v2179 = 1;
      v1820 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1819 + 32))(v1819, 134, &v2168, 1, &v2172, 3, 0);
      v1821 = *v2148;
      *(_QWORD *)&v2168 = v451;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1820;
      *((_QWORD *)&v2172 + 1) = v1822;
      LODWORD(v2173) = 1;
      v2174 = v1812;
      v2175 = v1814;
      v2176 = 1;
      v2177 = v1816;
      v2178 = v1818;
      v2179 = 1;
      v1823 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1821 + 32))(v1821, 136, &v2168, 1, &v2172, 3, 0);
      v1824 = *v2148;
      *(_QWORD *)&v2168 = v451;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1823;
      *((_QWORD *)&v2172 + 1) = v1825;
      LODWORD(v2173) = 1;
      v2174 = v2088;
      v2175 = v2081;
      v2176 = 1;
      v1826 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1824 + 32))(v1824, 67, &v2168, 1, &v2172, 2, 0);
      v1827 = *v2148;
      *(_QWORD *)&v2168 = v451;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1826;
      *((_QWORD *)&v2172 + 1) = v1828;
      LODWORD(v2173) = 1;
      v2174 = v2088;
      v2175 = v2081;
      v2176 = 1;
      v1829 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1827 + 32))(v1827, 46, &v2168, 1, &v2172, 2, 0);
      v1831 = v1830;
      v1832 = *v2148;
      *(_QWORD *)&v2172 = v1060;
      DWORD2(v2172) = 0;
      v1833 = sub_1C5544694(v1832, (unint64_t *)&v2172, 0);
      v1834 = *v2148;
      *(_QWORD *)&v2168 = 9;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = 40;
      LODWORD(v2173) = 2;
      v2174 = v2102;
      v2175 = v2095;
      v2176 = 1;
      v2177 = v1833;
      v2178 = v1835;
      v2179 = 1;
      v1836 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1834 + 32))(v1834, 134, &v2168, 1, &v2172, 3, 0);
      v1838 = v1837;
      v1839 = *v2148;
      *(_QWORD *)&v2172 = v451;
      DWORD2(v2172) = 0;
      v1840 = sub_1C5544694(v1839, (unint64_t *)&v2172, 0);
      v1841 = *v2148;
      LODWORD(v2168) = v447;
      DWORD2(v2168) = 1;
      *(_QWORD *)&v2172 = v1836;
      *((_QWORD *)&v2172 + 1) = v1838;
      LODWORD(v2173) = 1;
      v2174 = v1840;
      v2175 = v1842;
      v2176 = 1;
      v2177 = v1829;
      v2178 = v1831;
      v2179 = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1841
                                                                                                 + 32))(v1841, 136, &v2168, 1, &v2172, 3, 0);
      v265 = v6;
      v266 = *(_QWORD *)(v6 + 24);
      v267 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v267 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v267 = v6;
          do
            v267 = *(_QWORD *)(v267 + 8);
          while ((*(_WORD *)(v267 + 44) & 8) != 0);
        }
      }
      goto LABEL_1699;
    case 0xB5:
      v320 = *(_QWORD *)(a2 + 32);
      v321 = *(_DWORD *)(v320 + 4);
      v322 = *(_DWORD *)(v320 + 36);
      v323 = *(_QWORD *)(a1 + 16);
      if (v321 < 0 && (v321 & 0x7FFFFFFFu) < *(_DWORD *)(v323 + 432))
        v324 = *(_QWORD *)(*(_QWORD *)(v323 + 424) + 8 * (v321 & 0x7FFFFFFF));
      else
        v324 = 0;
      v2182 = v324;
      if ((v322 & 0x80000000) == 0)
        return 2;
      if ((v322 & 0x7FFFFFFFu) >= *(_DWORD *)(v323 + 432))
        return 2;
      v536 = *(_QWORD *)(*(_QWORD *)(v323 + 424) + 8 * (v322 & 0x7FFFFFFF));
      v2165 = v536;
      if (v536 != 513 && v536 != 257)
        return 2;
      if (v324 != 513 && v324 != 257)
        return 2;
      v538 = sub_1C4825F50(&v2182);
      if ((_DWORD)v537 == 1)
      LODWORD(v2185) = v538;
      if (v538 > 0x40)
      {
        v540 = &v2184;
        llvm::APInt::initSlowCase((llvm::APInt *)&v2184, 0, 0);
        v539 = v538 - 1;
        if (v2185 >= 0x41)
          v540 = (unint64_t *)(v2184 + 8 * (v539 >> 6));
      }
      else
      {
        v2184 = 0;
        LOBYTE(v539) = v538 - 1;
        v540 = &v2184;
      }
      *v540 |= 1 << v539;
      v542 = sub_1C4825F50(&v2165);
      if ((_DWORD)v541 == 1)
      if (v542 == 32)
        v543 = &unk_1C866F184;
      else
        v543 = &unk_1C866F198;
      v545 = sub_1C4825F50(&v2165);
      if ((_DWORD)v544 == 1)
      DWORD2(v2172) = v545;
      if (v545 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v2172, 0, 0);
        v1989 = DWORD2(v2172);
        llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)((char *)&v2168 + 8), v543, (const llvm::APInt **)&v2172);
        if (v1989 >= 0x41 && (_QWORD)v2172)
          MEMORY[0x1CAA32F9C](v2172, 0x1000C8000313F17);
      }
      else
      {
        *(_QWORD *)&v2172 = 0;
        llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)((char *)&v2168 + 8), v543, (const llvm::APInt **)&v2172);
      }
      sub_1C4959BCC((uint64_t)&v2168, (uint64_t)&v2184, 0, 1);
      v546 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = v2182;
      DWORD2(v2180) = 0;
      LODWORD(v2172) = v322;
      LODWORD(v2173) = 0;
      v547 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v546 + 32))(v546, 180, &v2180, 1, &v2172, 1, 0);
      v2117 = v548;
      v2133 = v547;
      v549 = *(llvm::ConstantFP ******)v7;
      *(_QWORD *)&v2172 = v2165;
      DWORD2(v2172) = 0;
      v551 = llvm::ConstantFP::get(***v549[1], (llvm::LLVMContext *)&v2168, v550);
      v552 = ((uint64_t (*)(llvm::ConstantFP *****, __int128 *, llvm::APFloatBase *))(*v549)[3])(v549, &v2172, v551);
      v554 = v553;
      v555 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = v2165;
      DWORD2(v2180) = 0;
      LODWORD(v2172) = v322;
      LODWORD(v2173) = 0;
      v2174 = v552;
      v2175 = v553;
      v2176 = 1;
      v556 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v555 + 32))(v555, 164, &v2180, 1, &v2172, 2, 0);
      v557 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = v2182;
      DWORD2(v2180) = 0;
      *(_QWORD *)&v2172 = v556;
      *((_QWORD *)&v2172 + 1) = v558;
      LODWORD(v2173) = 1;
      v559 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v557 + 32))(v557, 180, &v2180, 1, &v2172, 1, 0);
      v561 = v560;
      v562 = *(llvm::ConstantInt ******)v7;
      *(_QWORD *)&v2172 = v2182;
      DWORD2(v2172) = 0;
      v564 = llvm::ConstantInt::get(***v562[1], (llvm::LLVMContext *)&v2184, v563);
      v565 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v562)[2])(v562, &v2172, v564);
      v566 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = v2182;
      DWORD2(v2180) = 0;
      *(_QWORD *)&v2172 = v559;
      *((_QWORD *)&v2172 + 1) = v561;
      LODWORD(v2173) = 1;
      v2174 = v565;
      v2175 = v567;
      v2176 = 1;
      v568 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v566 + 32))(v566, 67, &v2180, 1, &v2172, 2, 0);
      v570 = v569;
      v571 = *(_QWORD *)v7;
      *(_QWORD *)&v2180 = 9;
      DWORD2(v2180) = 0;
      LODWORD(v2172) = 12;
      LODWORD(v2173) = 2;
      LODWORD(v2174) = v322;
      v2176 = 0;
      v2177 = v552;
      v2178 = v554;
      v2179 = 1;
      v572 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v571 + 32))(v571, 135, &v2180, 1, &v2172, 3, 0);
      v573 = *(_QWORD *)v7;
      LODWORD(v2180) = v321;
      DWORD2(v2180) = 1;
      *(_QWORD *)&v2172 = v572;
      *((_QWORD *)&v2172 + 1) = v574;
      LODWORD(v2173) = 1;
      v2174 = v2133;
      v2175 = v2117;
      v2176 = 1;
      v2177 = v568;
      v2178 = v570;
      v2179 = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v573 + 32))(v573, 136, &v2180, 1, &v2172, 3, 0);
      v575 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v575 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v575 = a2;
          do
            v575 = *(_QWORD *)(v575 + 8);
          while ((*(_WORD *)(v575 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v575 + 8));
      if (*((_UNKNOWN **)&v2168 + 1) == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v2169);
      }
      else if ((*(_DWORD *)(*((_QWORD *)&v2168 + 1) + 8) - 64) <= 0xFFFFFF7F && v2169)
      {
        MEMORY[0x1CAA32F9C](v2169, 0x1000C8000313F17);
      }
      if (v2185 < 0x41)
        return 1;
      v576 = v2184;
      if (!v2184)
        return 1;
      goto LABEL_1247;
    case 0xB6:
      v432 = *(_QWORD *)(a2 + 32);
      v433 = *(_DWORD *)(v432 + 4);
      v434 = *(_DWORD *)(v432 + 36);
      v435 = *(_QWORD *)(a1 + 16);
      if (v433 < 0 && (v433 & 0x7FFFFFFFu) < *(_DWORD *)(v435 + 432))
        v436 = *(_QWORD *)(*(_QWORD *)(v435 + 424) + 8 * (v433 & 0x7FFFFFFF));
      else
        v436 = 0;
      if ((v434 & 0x80000000) == 0 || (v434 & 0x7FFFFFFFu) >= *(_DWORD *)(v435 + 432))
        return 2;
      v1041 = *(_QWORD *)(*(_QWORD *)(v435 + 424) + 8 * (v434 & 0x7FFFFFFF));
      if (v1041 == 513)
      {
        v5 = 2;
        if (v436 != 257)
          return v5;
        v1502 = *(_QWORD *)a1;
        *(_QWORD *)&v2172 = 513;
        DWORD2(v2172) = 0;
        v1503 = sub_1C5544694(v1502, (unint64_t *)&v2172, 63);
        v1504 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = 513;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v434;
        LODWORD(v2173) = 0;
        v2174 = v1503;
        v2175 = v1505;
        v2176 = 1;
        v1506 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1504 + 32))(v1504, 129, &v2168, 1, &v2172, 2, 0);
        v1508 = v1507;
        v1509 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = 513;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v434;
        LODWORD(v2173) = 0;
        v2174 = v1506;
        v2175 = v1507;
        v2176 = 1;
        v1510 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1509 + 32))(v1509, 45, &v2168, 1, &v2172, 2, 0);
        v1511 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = 513;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2172 = v1510;
        *((_QWORD *)&v2172 + 1) = v1512;
        LODWORD(v2173) = 1;
        v2174 = v1506;
        v2175 = v1508;
        v2176 = 1;
        v1513 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1511 + 32))(v1511, 67, &v2168, 1, &v2172, 2, 0);
        v1514 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = 257;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2172 = v1513;
        *((_QWORD *)&v2172 + 1) = v1515;
        LODWORD(v2173) = 1;
        v1516 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1514 + 32))(v1514, 183, &v2168, 1, &v2172, 1, 0);
        v1518 = v1517;
        v1519 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = 257;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2172 = v1516;
        *((_QWORD *)&v2172 + 1) = v1517;
        LODWORD(v2173) = 1;
        v1520 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1519 + 32))(v1519, 177, &v2168, 1, &v2172, 1, 0);
        v2124 = v1521;
        v2146 = v1520;
        v1522 = v6;
        v1523 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = 9;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2180 = 513;
        DWORD2(v2180) = 0;
        v1524 = sub_1C5544694(v1523, (unint64_t *)&v2180, 0);
        LODWORD(v2172) = 33;
        LODWORD(v2173) = 2;
        v2174 = v1506;
        v2175 = v1508;
        v2176 = 1;
        v2177 = v1524;
        v2178 = v1525;
        v2179 = 1;
        v1526 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1523 + 32);
        v1527 = v1523;
        v6 = v1522;
        v1528 = v1526(v1527, 134, &v2168, 1, &v2172, 3, 0);
        v1048 = *(_QWORD *)v7;
        LODWORD(v2168) = v433;
        DWORD2(v2168) = 1;
        *(_QWORD *)&v2172 = v1528;
        *((_QWORD *)&v2172 + 1) = v1529;
        LODWORD(v2173) = 1;
        v2174 = v2146;
        v2175 = v2124;
        v2176 = 1;
        v2177 = v1516;
        v2178 = v1518;
        v2179 = 1;
      }
      else
      {
        if (v1041 != 9)
          return 2;
        v1042 = *(_QWORD *)a1;
        *(_QWORD *)&v2172 = v436;
        DWORD2(v2172) = 0;
        v1043 = sub_1C5545FFC(v1042, (unint64_t *)&v2172, -1.0);
        v1045 = v1044;
        v1046 = *(_QWORD *)v7;
        *(_QWORD *)&v2172 = v436;
        DWORD2(v2172) = 0;
        v1047 = sub_1C5545FFC(v1046, (unint64_t *)&v2172, 0.0);
        v1048 = *(_QWORD *)v7;
        LODWORD(v2168) = v433;
        DWORD2(v2168) = 1;
        LODWORD(v2172) = v434;
        LODWORD(v2173) = 0;
        v2174 = v1043;
        v2175 = v1045;
        v2176 = 1;
        v2177 = v1047;
        v2178 = v1049;
        v2179 = 1;
      }
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1048
                                                                                                 + 32))(v1048, 136, &v2168, 1, &v2172, 3, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0xB7:
      v292 = *(_QWORD *)(a2 + 32);
      v293 = *(_DWORD *)(v292 + 4);
      v294 = *(_DWORD *)(v292 + 36);
      v295 = *(_QWORD *)(a1 + 16);
      if (v293 < 0 && (v293 & 0x7FFFFFFFu) < *(_DWORD *)(v295 + 432))
        v296 = *(_QWORD *)(*(_QWORD *)(v295 + 424) + 8 * (v293 & 0x7FFFFFFF));
      else
        v296 = 0;
      if ((v294 & 0x80000000) == 0 || (v294 & 0x7FFFFFFFu) >= *(_DWORD *)(v295 + 432))
        return 2;
      v486 = *(_QWORD *)(*(_QWORD *)(v295 + 424) + 8 * (v294 & 0x7FFFFFFF));
      if (v486 != 513)
      {
        if (v486 != 9)
          return 2;
        v487 = *(_QWORD *)a1;
        *(_QWORD *)&v2172 = v296;
        DWORD2(v2172) = 0;
        v488 = sub_1C5545FFC(v487, (unint64_t *)&v2172, 1.0);
        v490 = v489;
        v491 = *(_QWORD *)v7;
        *(_QWORD *)&v2172 = v296;
        DWORD2(v2172) = 0;
        v492 = sub_1C5545FFC(v491, (unint64_t *)&v2172, 0.0);
        v493 = *(_QWORD *)v7;
        LODWORD(v2168) = v293;
        DWORD2(v2168) = 1;
        LODWORD(v2172) = v294;
        LODWORD(v2173) = 0;
        v2174 = v488;
        v2175 = v490;
        v2176 = 1;
        v2177 = v492;
        v2178 = v494;
        v2179 = 1;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v493 + 32))(v493, 136, &v2168, 1, &v2172, 3, 0);
        v38 = *(_QWORD *)(v6 + 24);
        v39 = v6;
        if ((*(_BYTE *)v6 & 4) == 0)
        {
          v39 = v6;
          if ((*(_WORD *)(v6 + 44) & 8) != 0)
          {
            v39 = v6;
            do
              v39 = *(_QWORD *)(v39 + 8);
            while ((*(_WORD *)(v39 + 44) & 8) != 0);
          }
        }
        goto LABEL_1550;
      }
      if (v296 != 257)
        return 2;
      sub_1C6272620((uint64_t *)a1, (llvm::MachineInstr *)a2);
      return 1;
    case 0xB9:
      v441 = *(_DWORD **)(a2 + 32);
      v442 = v441[9];
      v443 = v441[17];
      v444 = *(_QWORD *)(a1 + 16);
      if (v442 < 0 && (v442 & 0x7FFFFFFFu) < *(_DWORD *)(v444 + 432))
        v445 = *(_QWORD *)(*(_QWORD *)(v444 + 424) + 8 * (v442 & 0x7FFFFFFF));
      else
        v445 = 0;
      if (v443 < 0 && (v443 & 0x7FFFFFFFu) < *(_DWORD *)(v444 + 432))
        v1058 = *(_QWORD *)(*(_QWORD *)(v444 + 424) + 8 * (v443 & 0x7FFFFFFF));
      else
        v1058 = 0;
      if ((v445 & 1) != 0)
      {
        v1059 = v445 >> 3;
      }
      else if ((v445 & 4) != 0)
      {
        if ((v445 & 2) != 0)
          v1059 = (unsigned __int16)(v445 >> 19);
        else
          v1059 = v445 >> 19;
      }
      else
      {
        v1059 = (unsigned __int16)(v445 >> 3);
      }
      if ((v1058 & 1) != 0)
      {
        v1314 = v1058 >> 3;
      }
      else if ((v1058 & 4) != 0)
      {
        if ((v1058 & 2) != 0)
          v1314 = (unsigned __int16)(v1058 >> 19);
        else
          v1314 = v1058 >> 19;
      }
      else
      {
        v1314 = (unsigned __int16)(v1058 >> 3);
      }
      v1315 = v441[1];
      v1316 = *(llvm::ConstantInt ******)a1;
      *(_QWORD *)&v2172 = v445;
      DWORD2(v2172) = 0;
      DWORD2(v2168) = v1059;
      v2143 = v1315;
      v2110 = v1314;
      if (v1059 > 0x40)
      {
        v1318 = &v2168;
        llvm::APInt::initSlowCase((llvm::APInt *)&v2168, 0, 0);
        v1317 = v1059 - 1;
        if (DWORD2(v2168) >= 0x41)
          v1318 = (__int128 *)(v2168 + 8 * (v1317 >> 6));
      }
      else
      {
        *(_QWORD *)&v2168 = 0;
        LOBYTE(v1317) = v1059 - 1;
        v1318 = &v2168;
      }
      *(_QWORD *)v1318 |= 1 << v1317;
      v1319 = llvm::ConstantInt::get(***v1316[1], (llvm::LLVMContext *)&v2168, a3);
      v1320 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1316)[2])(v1316, &v2172, v1319);
      v2123 = v1321;
      if (DWORD2(v2168) >= 0x41 && (_QWORD)v2168)
        MEMORY[0x1CAA32F9C](v2168, 0x1000C8000313F17);
      v1322 = *(llvm::ConstantInt ******)v7;
      *(_QWORD *)&v2172 = v445;
      DWORD2(v2172) = 0;
      DWORD2(v2168) = v1059;
      if (v1059 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v2168, 0, 0);
      else
        *(_QWORD *)&v2168 = 0;
      sub_1C4912E54(&v2168, 0, v1059 - 1);
      v1324 = llvm::ConstantInt::get(***v1322[1], (llvm::LLVMContext *)&v2168, v1323);
      v1325 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1322)[2])(v1322, &v2172, v1324);
      v1327 = v1326;
      if (DWORD2(v2168) >= 0x41 && (_QWORD)v2168)
        MEMORY[0x1CAA32F9C](v2168, 0x1000C8000313F17);
      v1328 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = v445;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v442;
      LODWORD(v2173) = 0;
      v2174 = v1325;
      v2175 = v1327;
      v2176 = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1328
                                                                                                 + 32))(v1328, 65, &v2168, 1, &v2172, 2, 0);
      v1330 = *(_DWORD *)(*(_QWORD *)(v1329 + 32) + 4);
      if (v445 == v1058)
      {
        v1331 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v445;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v443;
        LODWORD(v2173) = 0;
        v2174 = v1320;
        v2175 = v2123;
        v2176 = 1;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1331 + 32))(v1331, 65, &v2168, 1, &v2172, 2, 0);
      }
      else
      {
        v1333 = *(_QWORD *)v7;
        if ((int)v1059 <= v2110)
        {
          *(_QWORD *)&v2172 = v1058;
          DWORD2(v2172) = 0;
          v1435 = sub_1C5544694(v1333, (unint64_t *)&v2172, (int)(v2110 - v1059));
          v1436 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v1058;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v443;
          LODWORD(v2173) = 0;
          v2174 = v1435;
          v2175 = v1437;
          v2176 = 1;
          v1438 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1436 + 32))(v1436, 128, &v2168, 1, &v2172, 2, 0);
          v1439 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v445;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1438;
          *((_QWORD *)&v2172 + 1) = v1440;
          LODWORD(v2173) = 1;
          v1341 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1439 + 32))(v1439, 119, &v2168, 1, &v2172, 1, 0);
        }
        else
        {
          *(_QWORD *)&v2172 = v445;
          DWORD2(v2172) = 0;
          v1334 = sub_1C5544694(v1333, (unint64_t *)&v2172, (int)(v1059 - v2110));
          v1336 = v1335;
          v1337 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v445;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v443;
          LODWORD(v2173) = 0;
          v1338 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1337 + 32))(v1337, 126, &v2168, 1, &v2172, 1, 0);
          v1339 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v445;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1338;
          *((_QWORD *)&v2172 + 1) = v1340;
          LODWORD(v2173) = 1;
          v2174 = v1334;
          v2175 = v1336;
          v2176 = 1;
          v1341 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1339 + 32))(v1339, 127, &v2168, 1, &v2172, 2, 0);
        }
        v1441 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v445;
        DWORD2(v2168) = 0;
        *(_QWORD *)&v2172 = v1341;
        *((_QWORD *)&v2172 + 1) = v1342;
        LODWORD(v2173) = 1;
        v2174 = v1320;
        v2175 = v2123;
        v2176 = 1;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1441 + 32))(v1441, 65, &v2168, 1, &v2172, 2, 0);
      }
      v1442 = *(_DWORD *)(*(_QWORD *)(v1332 + 32) + 4);
      v1443 = *(_QWORD *)v7;
      v1444 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
      LODWORD(v2168) = v2143;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v1330;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v1442;
      v2176 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v1443
                                                                                                  + 32))(v1443, 66, &v2168, 1, &v2172, 2, v1444);
      v1445 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v1445 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v1445 = a2;
          do
            v1445 = *(_QWORD *)(v1445 + 8);
          while ((*(_WORD *)(v1445 + 44) & 8) != 0);
        }
      }
      v1446 = *(_QWORD *)(v1445 + 8);
      v1447 = *(_QWORD *)(a2 + 24) + 40;
      v265 = a2;
      goto LABEL_1700;
    case 0xBB:
    case 0xBC:
      v84 = *(_DWORD **)(a2 + 32);
      v85 = v84[1];
      v86 = v84[9];
      v87 = v84[17];
      v88 = *(_QWORD *)(a1 + 16);
      if (v85 < 0 && (v85 & 0x7FFFFFFFu) < *(_DWORD *)(v88 + 432))
        v89 = *(_QWORD *)(*(_QWORD *)(v88 + 424) + 8 * (v85 & 0x7FFFFFFF));
      else
        v89 = 0;
      LODWORD(v168) = *(unsigned __int16 *)(v6 + 44);
      if ((v168 & 0x10) == 0)
      {
        if ((sub_1C554E074(v86, v88, 1) & 1) == 0)
        {
          v169 = *(_QWORD *)v7;
          v170 = *(unsigned __int16 *)(v6 + 44) | 0x100000000;
          *(_QWORD *)&v2168 = v89;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v86;
          LODWORD(v2173) = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v169 + 32))(v169, 186, &v2168, 1, &v2172, 1, v170);
          v86 = *(_DWORD *)(*(_QWORD *)(v171 + 32) + 4);
        }
        v172 = sub_1C554E074(v87, *(_QWORD *)(v7 + 16), 1);
        v168 = *(unsigned __int16 *)(v6 + 44);
        if ((v172 & 1) == 0)
        {
          v173 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v89;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v87;
          LODWORD(v2173) = 0;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v173 + 32))(v173, 186, &v2168, 1, &v2172, 1, v168 | 0x100000000);
          v87 = *(_DWORD *)(*(_QWORD *)(v174 + 32) + 4);
          LODWORD(v168) = *(unsigned __int16 *)(v6 + 44);
        }
      }
      if ((_DWORD)v4 == 187)
        v175 = 189;
      else
        v175 = 190;
      v176 = *(_QWORD *)v7;
      LODWORD(v2168) = v85;
      DWORD2(v2168) = 1;
      LODWORD(v2172) = v86;
      LODWORD(v2173) = 0;
      LODWORD(v2174) = v87;
      v2176 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v176
                                                                                                  + 32))(v176, v175, &v2168, 1, &v2172, 2, v168 | 0x100000000);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
      v23 = *(_DWORD **)(a2 + 32);
      v24 = v23[1];
      v25 = v23[9];
      v26 = v23[17];
      if (v24 < 0 && (v27 = *(_QWORD *)(a1 + 16), (v24 & 0x7FFFFFFFu) < *(_DWORD *)(v27 + 432)))
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v27 + 424) + 8 * (v24 & 0x7FFFFFFF));
        v29 = v28 & 0xFFFFFFFFFFFFFFF9;
        v30 = v28 & 4;
        v31 = 0x800000000000000;
        if ((v28 & 2) == 0)
          v31 = 0x8000000000000;
        v32 = v28 & 0x7FFF8 | ((unint64_t)((v31 & v28) != 0) << 51) | 0x80004;
        if (v29)
          v33 = v30 == 0;
        else
          v33 = 1;
        if (v33)
          v32 = 9;
      }
      else
      {
        v32 = 9;
      }
      v34 = *(_QWORD *)a1;
      *(_QWORD *)&v2168 = v32;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = 40 - 2 * (unsigned __int16)(v4 - 195);
      LODWORD(v2173) = 2;
      LODWORD(v2174) = v25;
      v2176 = 0;
      LODWORD(v2177) = v26;
      v2179 = 0;
      v35 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 134, &v2168, 1, &v2172, 3, 0);
      v36 = *(_QWORD *)v7;
      LODWORD(v2168) = v24;
      DWORD2(v2168) = 1;
      *(_QWORD *)&v2172 = v35;
      *((_QWORD *)&v2172 + 1) = v37;
      LODWORD(v2173) = 1;
      LODWORD(v2174) = v25;
      v2176 = 0;
      LODWORD(v2177) = v26;
      v2179 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 136, &v2168, 1, &v2172, 3, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0xC7:
      v297 = *(_QWORD *)(a2 + 32);
      v298 = *(_DWORD *)(v297 + 4);
      if (v298 < 0
        && (v299 = *(_QWORD *)(a1 + 16), v300 = v298 & 0x7FFFFFFF, v300 < *(_DWORD *)(v299 + 432)))
      {
        v301 = *(_QWORD *)(*(_QWORD *)(v299 + 424) + 8 * v300);
        v302 = *(_DWORD *)(v297 + 36);
        v303 = *(_QWORD *)a1;
        *(_QWORD *)&v2172 = v301;
        DWORD2(v2172) = 0;
        if ((v301 & 1) != 0)
        {
          v304 = v301 >> 3;
          goto LABEL_431;
        }
        if ((v301 & 4) != 0)
        {
          if ((v301 & 2) != 0)
            v304 = (unsigned __int16)(v301 >> 19);
          else
            v304 = v301 >> 19;
LABEL_431:
          v495 = sub_1C5544694(v303, (unint64_t *)&v2172, (v304 - 1));
          v496 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v301;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v302;
          LODWORD(v2173) = 0;
          v2174 = v495;
          v2175 = v497;
          v2176 = 1;
          v498 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v496 + 32))(v496, 129, &v2168, 1, &v2172, 2, 0);
          v500 = v499;
          v501 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v301;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v302;
          LODWORD(v2173) = 0;
          v2174 = v498;
          v2175 = v499;
          v2176 = 1;
          v502 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v501 + 32))(v501, 45, &v2168, 1, &v2172, 2, 0);
          v503 = *(_QWORD *)v7;
          LODWORD(v2168) = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4);
          DWORD2(v2168) = 1;
          *(_QWORD *)&v2172 = v502;
          *((_QWORD *)&v2172 + 1) = v504;
          LODWORD(v2173) = 1;
          v2174 = v498;
          v2175 = v500;
          v2176 = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v503 + 32))(v503, 67, &v2168, 1, &v2172, 2, 0);
          v38 = *(_QWORD *)(v6 + 24);
          v39 = v6;
          if ((*(_BYTE *)v6 & 4) == 0)
          {
            v39 = v6;
            if ((*(_WORD *)(v6 + 44) & 8) != 0)
            {
              v39 = v6;
              do
                v39 = *(_QWORD *)(v39 + 8);
              while ((*(_WORD *)(v39 + 44) & 8) != 0);
            }
          }
          goto LABEL_1550;
        }
      }
      else
      {
        v301 = 0;
        v302 = *(_DWORD *)(v297 + 36);
        v303 = *(_QWORD *)a1;
        *(_QWORD *)&v2172 = 0;
        DWORD2(v2172) = 0;
      }
      v304 = (unsigned __int16)(v301 >> 3);
      goto LABEL_431;
    case 0xCC:
    case 0xCD:
      return sub_1C5536D7C((uint64_t *)a1, a2);
    case 0xCE:
      v314 = *(_QWORD *)(a2 + 32);
      v315 = *(_DWORD *)(v314 + 4);
      v316 = *(_DWORD *)(v314 + 36);
      v317 = *(_QWORD *)(a1 + 16);
      if (v316 < 0 && (v316 & 0x7FFFFFFFu) < *(_DWORD *)(v317 + 432))
        v318 = *(_QWORD *)(*(_QWORD *)(v317 + 424) + 8 * (v316 & 0x7FFFFFFF));
      else
        v318 = 0;
      v2089 = *(_DWORD *)(v314 + 4);
      if (v315 < 0 && (v315 & 0x7FFFFFFFu) < *(_DWORD *)(v317 + 432))
      {
        v514 = (uint64_t *)a1;
        v515 = *(_QWORD *)(*(_QWORD *)(v317 + 424) + 8 * (v315 & 0x7FFFFFFF));
      }
      else
      {
        v514 = (uint64_t *)a1;
        v515 = 0;
      }
      v516 = *(_DWORD *)(v314 + 68);
      v518 = *(unsigned int **)(v314 + 112);
      v517 = *(_QWORD *)(v314 + 120);
      *(_QWORD *)&v2168 = &v2169;
      *((_QWORD *)&v2168 + 1) = 0x2000000000;
      v519 = v515;
      if ((v515 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        v519 = v515;
        if ((v515 & 4) != 0)
        {
          v520 = 3;
          if ((v515 & 1) == 0)
            v520 = 19;
          v521 = v515 >> v520;
          if ((v515 & 2) != 0)
            v519 = (v515 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v521) | 2;
          else
            v519 = v515 & 0x8000000000000000 | (8 * v521) | 1;
        }
      }
      v2082 = v515;
      if (v517)
      {
        v2132 = v519;
        v522 = 0;
        v523 = 0;
        v524 = 0x800000000000000;
        if ((v318 & 2) == 0)
          v524 = 0x8000000000000;
        v2116 = v524 & v318;
        v2104 = (unsigned __int16)(v318 >> 3);
        v525 = 4 * v517;
        do
        {
          v526 = *v518;
          if ((*v518 & 0x80000000) != 0)
          {
            if (!v523)
            {
              v534 = *v514;
              *(_QWORD *)&v2172 = v2132;
              DWORD2(v2172) = 0;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v534 + 32))(v534, 68, &v2172, 1, 0, 0, 0);
              v523 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
              v522 = DWORD2(v2168);
            }
            v535 = HIDWORD(v2168);
            v533 = v523;
          }
          else
          {
            if ((v318 & 1) != 0)
            {
              if (v526)
                v533 = v516;
              else
                v533 = v316;
            }
            else
            {
              if (v2116)
                llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
              v527 = (unsigned __int16)(v318 >> 3);
              if (v526 >= v2104)
                v528 = v516;
              else
                v528 = v316;
              if (v526 < v2104)
                v527 = 0;
              v529 = *v514;
              *(_QWORD *)&v2172 = 257;
              DWORD2(v2172) = 0;
              v530 = sub_1C5544694(v529, (unint64_t *)&v2172, (int)(v526 - v527));
              v531 = *v514;
              *(_QWORD *)&v2180 = v2132;
              DWORD2(v2180) = 0;
              LODWORD(v2172) = v528;
              LODWORD(v2173) = 0;
              v2174 = v530;
              v2175 = v532;
              v2176 = 1;
              (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v531 + 32))(v531, 205, &v2180, 1, &v2172, 2, 0);
              v533 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
              v522 = DWORD2(v2168);
            }
            v535 = HIDWORD(v2168);
          }
          if (v522 >= v535)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2168, (uint64_t)&v2169, v522 + 1, 4);
            v522 = DWORD2(v2168);
          }
          *(_DWORD *)(v2168 + 4 * v522) = v533;
          v522 = ++DWORD2(v2168);
          ++v518;
          v525 -= 4;
        }
        while (v525);
      }
      else
      {
        v522 = 0;
      }
      v1355 = *v514;
      if ((v2082 & 1) != 0)
      {
        LODWORD(v2180) = v2089;
        DWORD2(v2180) = 1;
        LODWORD(v2172) = *(_DWORD *)v2168;
        LODWORD(v2173) = 0;
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1355 + 32))(v1355, 19, &v2180, 1, &v2172, 1, 0);
        goto LABEL_1159;
      }
      LODWORD(v2180) = v2089;
      DWORD2(v2180) = 1;
      v1356 = (int *)v2168;
      *(_QWORD *)&v2172 = &v2173;
      *((_QWORD *)&v2172 + 1) = 0x800000000;
      if (v522 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2172, (uint64_t)&v2173, v522, 24);
        v1357 = DWORD2(v2172);
        v1358 = (unint64_t *)v2172;
      }
      else
      {
        if (!v522)
        {
          v1363 = 0;
          v1358 = &v2173;
          goto LABEL_1157;
        }
        v1357 = 0;
        v1358 = &v2173;
      }
      v1359 = 3 * v1357;
      v1360 = 4 * v522;
      do
      {
        v1361 = *v1356++;
        v1362 = &v1358[v1359];
        *(_DWORD *)v1362 = v1361;
        *((_DWORD *)v1362 + 4) = 0;
        v1359 += 3;
        v1360 -= 4;
      }
      while (v1360);
      v1363 = DWORD2(v2172);
LABEL_1157:
      DWORD2(v2172) = v1363 + v522;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, unint64_t *))(*(_QWORD *)v1355 + 32))(v1355, 77, &v2180, 1, v1358);
      if ((unint64_t *)v2172 != &v2173)
        free((void *)v2172);
LABEL_1159:
      v1490 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v1490 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v1490 = a2;
          do
            v1490 = *(_QWORD *)(v1490 + 8);
          while ((*(_WORD *)(v1490 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v1490 + 8));
      v612 = (void *)v2168;
      if ((unint64_t *)v2168 != &v2169)
LABEL_1162:
        free(v612);
      return 1;
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v16 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      switch(**(_WORD **)(a2 + 16))
      {
        case 0xCF:
          v17 = *(_QWORD *)(a2 + 32);
          v18 = *(_DWORD *)(v17 + 4);
          v19 = *(_DWORD *)(v17 + 36);
          v20 = *(_QWORD *)(a1 + 16);
          if (v18 < 0 && (v18 & 0x7FFFFFFFu) < *(_DWORD *)(v20 + 432))
            v22 = *(_QWORD *)(*(_QWORD *)(v20 + 424) + 8 * (v18 & 0x7FFFFFFF));
          else
            v22 = 0;
          if (v19 < 0 && (v19 & 0x7FFFFFFFu) < *(_DWORD *)(v20 + 432))
            v1145 = *(_QWORD *)(*(_QWORD *)(v20 + 424) + 8 * (v19 & 0x7FFFFFFF));
          else
            v1145 = 0;
          v2165 = v1145;
          v2141 = sub_1C4825F50(&v2165);
          if ((_DWORD)v1146 == 1)
          *(_QWORD *)&v2180 = v22;
          *((_QWORD *)&v2180 + 1) = v2165;
          LODWORD(v2172) = 208;
          *((_QWORD *)&v2172 + 1) = &v2180;
          v2173 = 2;
          v2174 = 0;
          v2175 = 0;
          v1147 = *(_QWORD *)(a1 + 24);
          v1148 = *(_DWORD *)(v1147 + 27392);
          if (v1148)
            v1149 = v1148 - 45;
          else
            v1149 = 163;
          v1150 = sub_1C553C530(v1147 + 168 * v1149 + 8, (uint64_t)&v2172);
          if (v1150 == 11)
          {
            if (!v2173)
              goto LABEL_881;
            v1867 = 0;
            v1868 = v1147 + 35456;
            v1869 = 1;
            while (1)
            {
              v1870 = *(_QWORD *)(*((_QWORD *)&v2172 + 1) + 8 * v1867);
              LODWORD(v2168) = v2172;
              DWORD1(v2168) = v1869 - 1;
              *((_QWORD *)&v2168 + 1) = v1870;
              v1871 = sub_1C553DEB0(v1868, (uint64_t)&v2168);
              if (v1871)
                break;
              v1867 = v1869;
              v121 = v2173 > v1869++;
              if (!v121)
                goto LABEL_881;
            }
            if (v1871 > 0xAu || ((1 << v1871) & 0x67E) == 0)
              goto LABEL_881;
          }
          else if (v1150 <= 8u && ((1 << v1150) & 0x181) != 0)
          {
LABEL_881:
            v1152 = *(_QWORD *)a1;
            *(_QWORD *)&v2168 = v22;
            DWORD2(v2168) = 0;
            LODWORD(v2172) = v19;
            LODWORD(v2173) = 0;
            v1153 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1152 + 32))(v1152, 208, &v2168, 1, &v2172, 1, 0);
            v1155 = v1154;
            v1156 = *(_QWORD *)a1;
            *(_QWORD *)&v2172 = v2165;
            DWORD2(v2172) = 0;
            v1158 = sub_1C5544694(v1156, (unint64_t *)&v2172, 0);
            v1159 = (uint64_t *)a1;
            v1160 = *(_QWORD *)a1;
            v1161 = 9;
            if ((v22 & 0xFFFFFFFFFFFFFFF9) != 0 && (v22 & 4) != 0)
            {
              v1162 = 0x800000000000000;
              if ((v22 & 2) == 0)
                v1162 = 0x8000000000000;
              v1161 = v22 & 0x7FFF8 | ((unint64_t)((v1162 & v22) != 0) << 51) | 0x80004;
            }
            *(_QWORD *)&v2168 = v1161;
            DWORD2(v2168) = 0;
            LODWORD(v2172) = 32;
            LODWORD(v2173) = 2;
            LODWORD(v2174) = v19;
            v2176 = 0;
            v2177 = v1158;
            v2178 = v1157;
            v2179 = 1;
            v1163 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1160 + 32))(v1160, 134, &v2168, 1, &v2172, 3, 0);
            v1165 = v1164;
            v1166 = *v1159;
            *(_QWORD *)&v2172 = v22;
            DWORD2(v2172) = 0;
            v1167 = sub_1C5544694(v1166, (unint64_t *)&v2172, v2141);
            v1168 = *v1159;
            LODWORD(v2168) = v18;
            DWORD2(v2168) = 1;
            *(_QWORD *)&v2172 = v1163;
            *((_QWORD *)&v2172 + 1) = v1165;
            LODWORD(v2173) = 1;
            v2174 = v1167;
            v2175 = v1169;
            v2176 = 1;
            v2177 = v1153;
            v2178 = v1155;
            v2179 = 1;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1168 + 32))(v1168, 136, &v2168, 1, &v2172, 3, 0);
            v38 = *(_QWORD *)(v6 + 24);
            v39 = v6;
            if ((*(_BYTE *)v6 & 4) == 0)
            {
              v39 = v6;
              if ((*(_WORD *)(v6 + 44) & 8) != 0)
              {
                v39 = v6;
                do
                  v39 = *(_QWORD *)(v39 + 8);
                while ((*(_WORD *)(v39 + 44) & 8) != 0);
              }
            }
            goto LABEL_1550;
          }
          v1941 = *(_QWORD *)a1;
          *(_QWORD *)&v2172 = v2165;
          DWORD2(v2172) = 0;
          v1942 = sub_1C5544694(v1941, (unint64_t *)&v2172, -1);
          v1944 = v1943;
          v1945 = *(_QWORD *)a1;
          *(_QWORD *)&v2168 = v2165;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v19;
          LODWORD(v2173) = 0;
          v2174 = v1942;
          v2175 = v1943;
          v2176 = 1;
          v1946 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1945 + 32))(v1945, 67, &v2168, 1, &v2172, 2, 0);
          v1948 = v1947;
          v1949 = *(_QWORD *)a1;
          v1950 = v2165;
          *(_QWORD *)&v2168 = v2165;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v19;
          LODWORD(v2173) = 0;
          v2174 = v1942;
          v2175 = v1944;
          v2176 = 1;
          v1951 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1949 + 32))(v1949, 45, &v2168, 1, &v2172, 2, 0);
          *(_QWORD *)&v2168 = v1950;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1946;
          *((_QWORD *)&v2172 + 1) = v1948;
          LODWORD(v2173) = 1;
          v2174 = v1951;
          v2175 = v1952;
          v2176 = 1;
          v1953 = (uint64_t *)a1;
          v1954 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1949 + 32))(v1949, 65, &v2168, 1, &v2172, 2, 0);
          v1956 = v1955;
          v2184 = v2165;
          v2185 = v2165;
          LODWORD(v2172) = 211;
          *((_QWORD *)&v2172 + 1) = &v2184;
          v2173 = 2;
          v2174 = 0;
          v2175 = 0;
          v1957 = *(_QWORD *)(a1 + 24);
          v1958 = *(_DWORD *)(v1957 + 27896);
          if (v1958)
            v1959 = v1958 - 45;
          else
            v1959 = 166;
          v1960 = sub_1C553C530(v1957 + 168 * v1959 + 8, (uint64_t)&v2172);
          if (v1960 == 11)
          {
            v1961 = v6;
            if (!v2173)
              goto LABEL_1561;
            v1962 = 0;
            v1963 = v1957 + 35456;
            v1964 = 1;
            v1961 = v6;
            while (1)
            {
              v1965 = *(_QWORD *)(*((_QWORD *)&v2172 + 1) + 8 * v1962);
              LODWORD(v2168) = v2172;
              DWORD1(v2168) = v1964 - 1;
              *((_QWORD *)&v2168 + 1) = v1965;
              v1966 = sub_1C553DEB0(v1963, (uint64_t)&v2168);
              if (v1966)
                break;
              v1962 = v1964;
              v121 = v2173 > v1964++;
              if (!v121)
                goto LABEL_1561;
            }
            v1968 = v1966 > 0xAu || ((1 << v1966) & 0x67E) == 0;
            v1961 = v6;
            if (v1968)
              goto LABEL_1561;
          }
          else
          {
            v1961 = v6;
            if (v1960 <= 8u && ((1 << v1960) & 0x181) != 0)
              goto LABEL_1561;
          }
          v2182 = v2165;
          v2183 = v2165;
          LODWORD(v2168) = 209;
          *((_QWORD *)&v2168 + 1) = &v2182;
          v2169 = 2;
          v2170 = 0;
          v2171 = 0;
          v1969 = v1953[3];
          v1970 = *(_DWORD *)(v1969 + 27560);
          if (v1970)
            v1971 = v1970 - 45;
          else
            v1971 = 164;
          v1972 = sub_1C553C530(v1969 + 168 * v1971 + 8, (uint64_t)&v2168);
          if (v1972 != 11)
          {
            if (v1972 > 8u || ((1 << v1972) & 0x181) == 0)
              goto LABEL_1561;
LABEL_1582:
            v1974 = *v1953;
            *(_QWORD *)&v2172 = v2165;
            DWORD2(v2172) = 0;
            v1975 = sub_1C5544694(v1974, (unint64_t *)&v2172, v2141);
            v1977 = v1976;
            v1978 = *v1953;
            v1979 = *(_DWORD *)(*(_QWORD *)(v1961 + 32) + 4);
            *(_QWORD *)&v2168 = v2165;
            DWORD2(v2168) = 0;
            *(_QWORD *)&v2172 = v1954;
            *((_QWORD *)&v2172 + 1) = v1956;
            LODWORD(v2173) = 1;
            v1980 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1978 + 32))(v1978, 209, &v2168, 1, &v2172, 1, 0);
            LODWORD(v2168) = v1979;
            DWORD2(v2168) = 1;
            *(_QWORD *)&v2172 = v1975;
            *((_QWORD *)&v2172 + 1) = v1977;
            LODWORD(v2173) = 1;
            v2174 = v1980;
            v2175 = v1981;
            v2176 = 1;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1978 + 32))(v1978, 46, &v2168, 1, &v2172, 2, 0);
            v1982 = v1961;
            if ((*(_BYTE *)v1961 & 4) == 0)
            {
              v1982 = v1961;
              if ((*(_WORD *)(v1961 + 44) & 8) != 0)
              {
                v1982 = v1961;
                do
                  v1982 = *(_QWORD *)(v1982 + 8);
                while ((*(_WORD *)(v1982 + 44) & 8) != 0);
              }
            }
            v1446 = *(_QWORD *)(v1982 + 8);
            v1447 = *(_QWORD *)(v1961 + 24) + 40;
            v265 = v1961;
            goto LABEL_1700;
          }
          if (!v2169)
            goto LABEL_1582;
          v1983 = 0;
          v1984 = v1969 + 35456;
          v1985 = 1;
          v1961 = v6;
          while (1)
          {
            v1986 = *(_QWORD *)(*((_QWORD *)&v2168 + 1) + 8 * v1983);
            LODWORD(v2180) = v2168;
            DWORD1(v2180) = v1985 - 1;
            *((_QWORD *)&v2180 + 1) = v1986;
            v1987 = sub_1C553DEB0(v1984, (uint64_t)&v2180);
            if (v1987)
              break;
            v1983 = v1985;
            v121 = v2169 > v1985++;
            if (!v121)
              goto LABEL_1582;
          }
          v1988 = v1987 > 0xAu || ((1 << v1987) & 0x67E) == 0;
          v1961 = v6;
          if (v1988)
            goto LABEL_1582;
LABEL_1561:
          *(_QWORD *)(v1961 + 16) = *(_QWORD *)(v16 + 8) + 10128;
          llvm::MachineOperand::setReg(*(_QWORD *)(v1961 + 32) + 32, *(_DWORD *)(*(_QWORD *)(v1956 + 32) + 4));
          return 1;
        case 0xD0:
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
          v371 = *(_QWORD *)(v16 + 8);
          v372 = 9936;
          goto LABEL_384;
        case 0xD1:
          v457 = *(_QWORD *)(a2 + 32);
          v458 = *(_DWORD *)(v457 + 4);
          v459 = *(_DWORD *)(v457 + 36);
          v460 = *(_QWORD *)(a1 + 16);
          if (v458 < 0 && (v458 & 0x7FFFFFFFu) < *(_DWORD *)(v460 + 432))
            v462 = *(_QWORD *)(*(_QWORD *)(v460 + 424) + 8 * (v458 & 0x7FFFFFFF));
          else
            v462 = 0;
          if (v459 < 0 && (v459 & 0x7FFFFFFFu) < *(_DWORD *)(v460 + 432))
            v1118 = *(_QWORD *)(*(_QWORD *)(v460 + 424) + 8 * (v459 & 0x7FFFFFFF));
          else
            v1118 = 0;
          v2184 = v1118;
          v1120 = sub_1C4825F50(&v2184);
          if ((_DWORD)v1119 == 1)
          *(_QWORD *)&v2180 = v462;
          *((_QWORD *)&v2180 + 1) = v2184;
          LODWORD(v2172) = 210;
          *((_QWORD *)&v2172 + 1) = &v2180;
          v2173 = 2;
          v2174 = 0;
          v2175 = 0;
          v1121 = *(_QWORD *)(a1 + 24);
          v1122 = *(_DWORD *)(v1121 + 27728);
          if (v1122)
            v1123 = v1122 - 45;
          else
            v1123 = 165;
          v1124 = sub_1C553C530(v1121 + 168 * v1123 + 8, (uint64_t)&v2172);
          if (v1124 == 11)
          {
            if (!v2173)
              goto LABEL_860;
            v1862 = 0;
            v1863 = v1121 + 35456;
            v1864 = 1;
            while (1)
            {
              v1865 = *(_QWORD *)(*((_QWORD *)&v2172 + 1) + 8 * v1862);
              LODWORD(v2168) = v2172;
              DWORD1(v2168) = v1864 - 1;
              *((_QWORD *)&v2168 + 1) = v1865;
              v1866 = sub_1C553DEB0(v1863, (uint64_t)&v2168);
              if (v1866)
                break;
              v1862 = v1864;
              v121 = v2173 > v1864++;
              if (!v121)
                goto LABEL_860;
            }
            if (v1866 > 0xAu || ((1 << v1866) & 0x67E) == 0)
              goto LABEL_860;
          }
          else if (v1124 <= 8u && ((1 << v1124) & 0x181) != 0)
          {
LABEL_860:
            v2140 = v458;
            v1126 = *(_QWORD *)a1;
            v1127 = v462;
            *(_QWORD *)&v2168 = v462;
            DWORD2(v2168) = 0;
            LODWORD(v2172) = v459;
            LODWORD(v2173) = 0;
            v1128 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1126 + 32))(v1126, 210, &v2168, 1, &v2172, 1, 0);
            v1130 = v1129;
            v1131 = *(_QWORD *)a1;
            *(_QWORD *)&v2172 = v2184;
            DWORD2(v2172) = 0;
            v1133 = sub_1C5544694(v1131, (unint64_t *)&v2172, 0);
            v1134 = (uint64_t *)a1;
            v1135 = *(_QWORD *)a1;
            v1136 = 9;
            if ((v2184 & 0xFFFFFFFFFFFFFFF9) != 0 && (v2184 & 4) != 0)
            {
              v1137 = 0x800000000000000;
              if ((v2184 & 2) == 0)
                v1137 = 0x8000000000000;
              v1136 = v2184 & 0x7FFF8 | ((unint64_t)((v1137 & v2184) != 0) << 51) | 0x80004;
            }
            *(_QWORD *)&v2168 = v1136;
            DWORD2(v2168) = 0;
            LODWORD(v2172) = 32;
            LODWORD(v2173) = 2;
            LODWORD(v2174) = v459;
            v2176 = 0;
            v2177 = v1133;
            v2178 = v1132;
            v2179 = 1;
            v1138 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1135 + 32))(v1135, 134, &v2168, 1, &v2172, 3, 0);
            v1140 = v1139;
            v1141 = *v1134;
            *(_QWORD *)&v2172 = v1127;
            DWORD2(v2172) = 0;
            v1142 = sub_1C5544694(v1141, (unint64_t *)&v2172, v1120);
            v1143 = *v1134;
            LODWORD(v2168) = v2140;
            DWORD2(v2168) = 1;
            *(_QWORD *)&v2172 = v1138;
            *((_QWORD *)&v2172 + 1) = v1140;
            LODWORD(v2173) = 1;
            v2174 = v1142;
            v2175 = v1144;
            v2176 = 1;
            v2177 = v1128;
            v2178 = v1130;
            v2179 = 1;
            (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1143 + 32))(v1143, 136, &v2168, 1, &v2172, 3, 0);
LABEL_1548:
            v38 = *(_QWORD *)(v6 + 24);
            v39 = v6;
            if ((*(_BYTE *)v6 & 4) == 0)
            {
              v39 = v6;
              if ((*(_WORD *)(v6 + 44) & 8) != 0)
              {
                v39 = v6;
                do
                  v39 = *(_QWORD *)(v39 + 8);
                while ((*(_WORD *)(v39 + 44) & 8) != 0);
              }
            }
            goto LABEL_1550;
          }
          v1915 = v1120;
          if (v1120)
          {
            v1916 = v462;
            v1917 = (v1915 - 1) | ((unint64_t)(v1915 - 1) >> 1) | (((v1915 - 1) | ((unint64_t)(v1915 - 1) >> 1)) >> 2);
            v1918 = v1917 | (v1917 >> 4) | ((v1917 | (v1917 >> 4)) >> 8);
            v1919 = ((v1918 >> 16) | v1918) + 1;
            if (v1919 >= 2)
            {
              v1920 = v1919 >> 1;
              v1921 = 1;
              v1922 = (uint64_t *)a1;
              do
              {
                v1923 = *v1922;
                *(_QWORD *)&v2172 = v2184;
                DWORD2(v2172) = 0;
                v1924 = sub_1C5544694(v1923, (unint64_t *)&v2172, 1 << (v1921 - 1));
                v1925 = *v1922;
                v1926 = v2184;
                *(_QWORD *)&v2168 = v2184;
                DWORD2(v2168) = 0;
                LODWORD(v2172) = v459;
                LODWORD(v2173) = 0;
                v2174 = v1924;
                v2175 = v1927;
                v2176 = 1;
                v1928 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1925 + 32))(v1925, 128, &v2168, 1, &v2172, 2, 0);
                *(_QWORD *)&v2168 = v1926;
                DWORD2(v2168) = 0;
                LODWORD(v2172) = v459;
                LODWORD(v2173) = 0;
                v2174 = v1928;
                v2175 = v1929;
                v2176 = 1;
                (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1925 + 32))(v1925, 66, &v2168, 1, &v2172, 2, 0);
                v459 = *(_DWORD *)(*(_QWORD *)(v1930 + 32) + 4);
              }
              while (v1920 >> v1921++);
              goto LABEL_1547;
            }
          }
          else
          {
            v1916 = v462;
          }
          v1922 = (uint64_t *)a1;
LABEL_1547:
          v1932 = *v1922;
          *(_QWORD *)&v2168 = v1916;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v459;
          LODWORD(v2173) = 0;
          v1933 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1932 + 32))(v1932, 211, &v2168, 1, &v2172, 1, 0);
          v1935 = v1934;
          v1936 = *v1922;
          v1937 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4);
          *(_QWORD *)&v2180 = v1916;
          DWORD2(v2180) = 0;
          v1938 = sub_1C5544694(v1936, (unint64_t *)&v2180, v1915);
          LODWORD(v2168) = v1937;
          DWORD2(v2168) = 1;
          *(_QWORD *)&v2172 = v1938;
          *((_QWORD *)&v2172 + 1) = v1939;
          LODWORD(v2173) = 1;
          v2174 = v1933;
          v2175 = v1935;
          v2176 = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1936 + 32))(v1936, 46, &v2168, 1, &v2172, 2, 0);
          goto LABEL_1548;
        case 0xD2:
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
          v371 = *(_QWORD *)(v16 + 8);
          v372 = 10032;
          goto LABEL_384;
        case 0xD3:
          v1539 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
          if (v1539 < 0 && (v1540 = *(_QWORD *)(a1 + 16), (v1539 & 0x7FFFFFFFu) < *(_DWORD *)(v1540 + 432)))
            v1541 = *(_QWORD *)(*(_QWORD *)(v1540 + 424) + 8 * (v1539 & 0x7FFFFFFF));
          else
            v1541 = 0;
          v2163 = v1541;
          v1553 = (llvm::APInt *)sub_1C4825F50(&v2163);
          if ((_DWORD)v1552 == 1)
          v1554 = *(llvm::ConstantInt ******)v7;
          *(_QWORD *)&v2172 = v2163;
          DWORD2(v2172) = 0;
          v1555 = sub_1C5544694((uint64_t)v1554, (unint64_t *)&v2172, 1);
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v1539;
          LODWORD(v2173) = 0;
          v2174 = v1555;
          v2175 = v1556;
          v2176 = 1;
          v1557 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 128, &v2168, 1, &v2172, 2, 0);
          v1559 = v1558;
          DWORD2(v2172) = 8;
          *(_QWORD *)&v2172 = 85;
          llvm::APInt::getSplat(v1553, (llvm::APInt *)&v2172, (uint64_t)&v2180);
          if (DWORD2(v2172) >= 0x41 && (_QWORD)v2172)
            MEMORY[0x1CAA32F9C](v2172, 0x1000C8000313F17);
          *(_QWORD *)&v2172 = v2163;
          DWORD2(v2172) = 0;
          v1561 = llvm::ConstantInt::get(***v1554[1], (llvm::LLVMContext *)&v2180, v1560);
          v1562 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1554)[2])(v1554, &v2172, v1561);
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1557;
          *((_QWORD *)&v2172 + 1) = v1559;
          LODWORD(v2173) = 1;
          v2174 = v1562;
          v2175 = v1563;
          v2176 = 1;
          v1564 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 65, &v2168, 1, &v2172, 2, 0);
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v1539;
          LODWORD(v2173) = 0;
          v2174 = v1564;
          v2175 = v1565;
          v2176 = 1;
          v1566 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 46, &v2168, 1, &v2172, 2, 0);
          v1568 = v1567;
          *(_QWORD *)&v2172 = v2163;
          DWORD2(v2172) = 0;
          v1569 = sub_1C5544694((uint64_t)v1554, (unint64_t *)&v2172, 2);
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1566;
          *((_QWORD *)&v2172 + 1) = v1568;
          LODWORD(v2173) = 1;
          v2174 = v1569;
          v2175 = v1570;
          v2176 = 1;
          v1571 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 128, &v2168, 1, &v2172, 2, 0);
          v1573 = v1572;
          DWORD2(v2172) = 8;
          *(_QWORD *)&v2172 = 51;
          llvm::APInt::getSplat(v1553, (llvm::APInt *)&v2172, (uint64_t)&v2184);
          if (DWORD2(v2172) >= 0x41 && (_QWORD)v2172)
            MEMORY[0x1CAA32F9C](v2172, 0x1000C8000313F17);
          *(_QWORD *)&v2172 = v2163;
          DWORD2(v2172) = 0;
          v1575 = llvm::ConstantInt::get(***v1554[1], (llvm::LLVMContext *)&v2184, v1574);
          v1576 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1554)[2])(v1554, &v2172, v1575);
          v1578 = v1577;
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1571;
          *((_QWORD *)&v2172 + 1) = v1573;
          LODWORD(v2173) = 1;
          v2174 = v1576;
          v2175 = v1577;
          v2176 = 1;
          v1579 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 65, &v2168, 1, &v2172, 2, 0);
          v1581 = v1580;
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1566;
          *((_QWORD *)&v2172 + 1) = v1568;
          LODWORD(v2173) = 1;
          v2174 = v1576;
          v2175 = v1578;
          v2176 = 1;
          v1582 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 65, &v2168, 1, &v2172, 2, 0);
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1579;
          *((_QWORD *)&v2172 + 1) = v1581;
          LODWORD(v2173) = 1;
          v2174 = v1582;
          v2175 = v1583;
          v2176 = 1;
          v1584 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 45, &v2168, 1, &v2172, 2, 0);
          v1586 = v1585;
          *(_QWORD *)&v2172 = v2163;
          DWORD2(v2172) = 0;
          v1587 = sub_1C5544694((uint64_t)v1554, (unint64_t *)&v2172, 4);
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1584;
          *((_QWORD *)&v2172 + 1) = v1586;
          LODWORD(v2173) = 1;
          v2174 = v1587;
          v2175 = v1588;
          v2176 = 1;
          v1589 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 128, &v2168, 1, &v2172, 2, 0);
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1589;
          *((_QWORD *)&v2172 + 1) = v1590;
          LODWORD(v2173) = 1;
          v2174 = v1584;
          v2175 = v1586;
          v2176 = 1;
          v1591 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 45, &v2168, 1, &v2172, 2, 0);
          v1593 = v1592;
          DWORD2(v2172) = 8;
          *(_QWORD *)&v2172 = 15;
          llvm::APInt::getSplat(v1553, (llvm::APInt *)&v2172, (uint64_t)&v2182);
          if (DWORD2(v2172) >= 0x41 && (_QWORD)v2172)
            MEMORY[0x1CAA32F9C](v2172, 0x1000C8000313F17);
          *(_QWORD *)&v2172 = v2163;
          DWORD2(v2172) = 0;
          v1595 = llvm::ConstantInt::get(***v1554[1], (llvm::LLVMContext *)&v2182, v1594);
          v1596 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1554)[2])(v1554, &v2172, v1595);
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1591;
          *((_QWORD *)&v2172 + 1) = v1593;
          LODWORD(v2173) = 1;
          v2174 = v1596;
          v2175 = v1597;
          v2176 = 1;
          v1598 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 65, &v2168, 1, &v2172, 2, 0);
          v1600 = v1599;
          *(_QWORD *)&v2172 = v2163;
          DWORD2(v2172) = 0;
          v2166 = 8;
          v2165 = 1;
          llvm::APInt::getSplat(v1553, (llvm::APInt *)&v2165, (uint64_t)&v2168);
          v1602 = llvm::ConstantInt::get(***v1554[1], (llvm::LLVMContext *)&v2168, v1601);
          v1603 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1554)[2])(v1554, &v2172, v1602);
          v1605 = v1604;
          if (DWORD2(v2168) >= 0x41 && (_QWORD)v2168)
            MEMORY[0x1CAA32F9C](v2168, 0x1000C8000313F17);
          if (v2166 >= 0x41 && v2165)
            MEMORY[0x1CAA32F9C](v2165, 0x1000C8000313F17);
          *(_QWORD *)&v2168 = v2163;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1598;
          *((_QWORD *)&v2172 + 1) = v1600;
          LODWORD(v2173) = 1;
          v2174 = v1603;
          v2175 = v1605;
          v2176 = 1;
          v1606 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 47, &v2168, 1, &v2172, 2, 0);
          v1608 = v1607;
          *(_QWORD *)&v2172 = v2163;
          DWORD2(v2172) = 0;
          v1609 = sub_1C5544694((uint64_t)v1554, (unint64_t *)&v2172, ((_DWORD)v1553 - 8));
          LODWORD(v2168) = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4);
          DWORD2(v2168) = 1;
          *(_QWORD *)&v2172 = v1606;
          *((_QWORD *)&v2172 + 1) = v1608;
          LODWORD(v2173) = 1;
          v2174 = v1609;
          v2175 = v1610;
          v2176 = 1;
          ((void (*)(llvm::ConstantInt *****, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*v1554)[4])(v1554, 128, &v2168, 1, &v2172, 2, 0);
          v1611 = v6;
          if ((*(_BYTE *)v6 & 4) == 0)
          {
            v1611 = v6;
            if ((*(_WORD *)(v6 + 44) & 8) != 0)
            {
              v1611 = v6;
              do
                v1611 = *(_QWORD *)(v1611 + 8);
              while ((*(_WORD *)(v1611 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v6 + 24) + 40, v6, *(_QWORD *)(v1611 + 8));
          if (v2183 >= 0x41 && v2182)
            MEMORY[0x1CAA32F9C](v2182, 0x1000C8000313F17);
          if (v2185 >= 0x41 && v2184)
            MEMORY[0x1CAA32F9C](v2184, 0x1000C8000313F17);
          goto LABEL_1245;
        default:
          return 2;
      }
    case 0xD4:
      v452 = *(_QWORD *)(a2 + 32);
      v453 = *(_DWORD *)(v452 + 36);
      v2072 = *(_DWORD *)(v452 + 4);
      if (v453 < 0 && (v454 = *(_QWORD *)(a1 + 16), (v453 & 0x7FFFFFFFu) < *(_DWORD *)(v454 + 432)))
      {
        v455 = *(_QWORD *)(*(_QWORD *)(v454 + 424) + 8 * (v453 & 0x7FFFFFFF));
        if ((v455 & 1) != 0)
        {
          v456 = v455 >> 3;
LABEL_828:
          v1067 = v456 + 7;
          v1068 = *(_QWORD *)a1;
          v1069 = (v456 + 7) & 0xFFFFFFF8;
          *(_QWORD *)&v2172 = v455;
          DWORD2(v2172) = 0;
          v1070 = sub_1C5544694(v1068, (unint64_t *)&v2172, v1069 - 8);
          v1072 = v1071;
          v1073 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v455;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v453;
          LODWORD(v2173) = 0;
          v2174 = v1070;
          v2175 = v1071;
          v2176 = 1;
          v1074 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1073 + 32))(v1073, 127, &v2168, 1, &v2172, 2, 0);
          v1076 = v1075;
          v1077 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v455;
          DWORD2(v2168) = 0;
          v2092 = v453;
          LODWORD(v2172) = v453;
          LODWORD(v2173) = 0;
          v2174 = v1070;
          v2175 = v1072;
          v2176 = 1;
          v1078 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1077 + 32))(v1077, 128, &v2168, 1, &v2172, 2, 0);
          v1079 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v455;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1078;
          *((_QWORD *)&v2172 + 1) = v1080;
          LODWORD(v2173) = 1;
          v2174 = v1074;
          v2175 = v1076;
          v2176 = 1;
          v1081 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1079 + 32))(v1079, 66, &v2168, 1, &v2172, 2, 0);
          v1084 = v1083;
          if (v1067 >= 0x20)
          {
            v1085 = v1081;
            v2079 = 0xFFFFFFFFFFFFFFFFLL >> (-(char)v1069 & 0x38);
            v1086 = (v1067 >> 4) - 1;
            v1087 = v1069 - 24;
            v1088 = 8;
            v2085 = v1069;
            do
            {
              v1089 = 255 << v1088;
              DWORD2(v2180) = v1069;
              v2121 = v1084;
              v2139 = v1086;
              if (v1069 > 0x40)
              {
                v1091 = v1085;
                llvm::APInt::initSlowCase((llvm::APInt *)&v2180, v1089, 0);
              }
              else
              {
                v1090 = v2079;
                if (!v1069)
                  v1090 = 0;
                v1091 = v1085;
                *(_QWORD *)&v2180 = v1090 & v1089;
              }
              v1092 = *(llvm::ConstantInt ******)v7;
              *(_QWORD *)&v2172 = v455;
              DWORD2(v2172) = 0;
              v1093 = llvm::ConstantInt::get(***v1092[1], (llvm::LLVMContext *)&v2180, v1082);
              v2098 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1092)[2])(v1092, &v2172, v1093);
              v2107 = v1094;
              v1095 = v1094;
              v1096 = *(_QWORD *)v7;
              *(_QWORD *)&v2172 = v455;
              DWORD2(v2172) = 0;
              v1097 = sub_1C5544694(v1096, (unint64_t *)&v2172, v1087);
              v1099 = v1098;
              v1100 = *(_QWORD *)v7;
              *(_QWORD *)&v2168 = v455;
              DWORD2(v2168) = 0;
              LODWORD(v2172) = v2092;
              LODWORD(v2173) = 0;
              v2174 = v2098;
              v2175 = v1095;
              v2176 = 1;
              v1101 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1100 + 32))(v1100, 65, &v2168, 1, &v2172, 2, 0);
              v1102 = *(_QWORD *)v7;
              *(_QWORD *)&v2168 = v455;
              DWORD2(v2168) = 0;
              *(_QWORD *)&v2172 = v1101;
              *((_QWORD *)&v2172 + 1) = v1103;
              LODWORD(v2173) = 1;
              v2174 = v1097;
              v2175 = v1099;
              v2176 = 1;
              v1104 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1102 + 32))(v1102, 127, &v2168, 1, &v2172, 2, 0);
              v1105 = *(_QWORD *)v7;
              *(_QWORD *)&v2168 = v455;
              DWORD2(v2168) = 0;
              *(_QWORD *)&v2172 = v1091;
              *((_QWORD *)&v2172 + 1) = v2121;
              LODWORD(v2173) = 1;
              v2174 = v1104;
              v2175 = v1106;
              v2176 = 1;
              v1107 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1105 + 32))(v1105, 66, &v2168, 1, &v2172, 2, 0);
              v1109 = v1108;
              v1110 = *(_QWORD *)v7;
              *(_QWORD *)&v2168 = v455;
              DWORD2(v2168) = 0;
              LODWORD(v2172) = v2092;
              LODWORD(v2173) = 0;
              v2174 = v1097;
              v2175 = v1099;
              v2176 = 1;
              v1111 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1110 + 32))(v1110, 128, &v2168, 1, &v2172, 2, 0);
              v1112 = *(_QWORD *)v7;
              *(_QWORD *)&v2168 = v455;
              DWORD2(v2168) = 0;
              *(_QWORD *)&v2172 = v1111;
              *((_QWORD *)&v2172 + 1) = v1113;
              LODWORD(v2173) = 1;
              v2174 = v2098;
              v2175 = v2107;
              v2176 = 1;
              v1114 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1112 + 32))(v1112, 65, &v2168, 1, &v2172, 2, 0);
              v1115 = *(_QWORD *)v7;
              *(_QWORD *)&v2168 = v455;
              DWORD2(v2168) = 0;
              *(_QWORD *)&v2172 = v1107;
              *((_QWORD *)&v2172 + 1) = v1109;
              LODWORD(v2173) = 1;
              v2174 = v1114;
              v2175 = v1116;
              v2176 = 1;
              v1085 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1115 + 32))(v1115, 66, &v2168, 1, &v2172, 2, 0);
              v1084 = v1117;
              if (DWORD2(v2180) >= 0x41 && (_QWORD)v2180)
                MEMORY[0x1CAA32F9C](v2180, 0x1000C8000313F17);
              v1087 -= 16;
              v1088 += 8;
              v1086 = v2139 - 1;
              v1069 = v2085;
            }
            while (v2139 != 1);
          }
          llvm::MachineOperand::setReg(*(_QWORD *)(v1084 + 32), v2072);
          v265 = a2;
          v266 = *(_QWORD *)(a2 + 24);
          v267 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v267 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v267 = a2;
              do
                v267 = *(_QWORD *)(v267 + 8);
              while ((*(_WORD *)(v267 + 44) & 8) != 0);
            }
          }
          goto LABEL_1699;
        }
        if ((v455 & 4) != 0)
        {
          if ((v455 & 2) != 0)
            v456 = (unsigned __int16)(v455 >> 19);
          else
            v456 = v455 >> 19;
          goto LABEL_828;
        }
      }
      else
      {
        v455 = 0;
      }
      v456 = (unsigned __int16)(v455 >> 3);
      goto LABEL_828;
    case 0xD5:
      v288 = *(_QWORD *)(a2 + 32);
      v289 = *(unsigned int *)(v288 + 36);
      if ((v289 & 0x80000000) != 0
        && (v290 = *(_QWORD *)(a1 + 16),
            (v289 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v290 + 432)))
      {
        v291 = *(_QWORD *)(*(_QWORD *)(v290 + 424) + 8 * (v289 & 0x7FFFFFFF));
      }
      else
      {
        v291 = 0;
      }
      v463 = *(unsigned int *)(v288 + 4);
      v2167 = v291;
      v465 = (llvm::APInt *)sub_1C4825F50(&v2167);
      if ((_DWORD)v464 == 1)
      if (v465 >= 8)
        v466 = 8;
      else
        v466 = (int)v465;
      if ((_DWORD)v465 == 1)
      {
        v467 = *(_QWORD **)(v7 + 16);
        v468 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v467 + 16) + 176))(*(_QWORD *)(*v467 + 16));
        if ((v463 & 0x80000000) != 0)
          v469 = (uint64_t *)(v467[3] + 16 * (v463 & 0x7FFFFFFF) + 8);
        else
          v469 = (uint64_t *)(v467[34] + 8 * v463);
        v470 = *v469;
        if (*v469)
        {
          do
          {
            v471 = *(_QWORD *)(v470 + 24);
            if ((v289 - 1) <= 0x3FFFFFFE)
              llvm::MachineOperand::substPhysReg((unsigned int *)v470, v289, v468);
            else
              llvm::MachineOperand::setReg(v470, v289);
            v470 = v471;
          }
          while (v471);
        }
        v472 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 32);
        if (v472)
        {
          v473 = *(_QWORD *)(v472 + 728);
          if (v473)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v473 + 32))(v473, v6);
          v474 = *(unsigned int *)(v6 + 40);
          if ((_DWORD)v474)
          {
            v475 = *(_QWORD *)(v6 + 32);
            v476 = *(_QWORD *)(v472 + 40);
            v477 = 32 * v474;
            do
            {
              if (!*(_BYTE *)v475)
              {
                v478 = *(unsigned int *)(v475 + 4);
                if ((v478 & 0x80000000) != 0)
                  v479 = (uint64_t *)(*(_QWORD *)(v476 + 24) + 16 * (v478 & 0x7FFFFFFF) + 8);
                else
                  v479 = (uint64_t *)(*(_QWORD *)(v476 + 272) + 8 * v478);
                v480 = *v479;
                v482 = *(_QWORD *)(v475 + 16);
                v481 = *(_QWORD *)(v475 + 24);
                if (v475 != *v479)
                  v479 = (uint64_t *)(v482 + 24);
                *v479 = v481;
                if (v481)
                  v483 = v481;
                else
                  v483 = v480;
                *(_QWORD *)(v483 + 16) = v482;
                *(_QWORD *)(v475 + 16) = 0;
                *(_QWORD *)(v475 + 24) = 0;
              }
              v475 += 32;
              v477 -= 32;
            }
            while (v477);
          }
        }
        *(_QWORD *)(v6 + 24) = 0;
        v484 = *(unint64_t **)(v6 + 8);
        v485 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
        *v484 = v485 | *v484 & 7;
        *(_QWORD *)(v485 + 8) = v484;
        *(_QWORD *)v6 &= 7uLL;
        *(_QWORD *)(v6 + 8) = 0;
        return 1;
      }
      if (v465 < 9)
      {
        if (v465 < 5)
        {
          v1723 = (uint64_t *)v7;
          v1724 = 0;
          v1725 = 0;
          v1730 = 0;
          v1729 = 0;
          v2147 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v466;
          if (v465 < 3)
            goto LABEL_1366;
LABEL_1359:
          v1726 = v2167;
          v1727 = *v1723;
          *(_QWORD *)&v2168 = v1724 | v289;
          *((_QWORD *)&v2168 + 1) = v3;
          LODWORD(v2169) = v1725;
          DWORD2(v2180) = v466;
          *(_QWORD *)&v2180 = v2147 & 0xCC;
          llvm::APInt::getSplat(v465, (llvm::APInt *)&v2180, (uint64_t)&v2182);
          v289 = sub_1C553AC9C(2u, v1726, 0, v1727, &v2168, (llvm::LLVMContext *)&v2182);
          v4 = v1728;
          if (v2183 >= 0x41 && v2182)
            MEMORY[0x1CAA32F9C](v2182, 0x1000C8000313F17);
          v1729 = v289 & 0xFFFFFFFF00000000;
          if (DWORD2(v2180) >= 0x41 && (_QWORD)v2180)
            MEMORY[0x1CAA32F9C](v2180, 0x1000C8000313F17);
          v289 = v289;
          v1730 = 1;
LABEL_1366:
          v1731 = *v1723;
          *(_QWORD *)&v2180 = v1729 | v289;
          *((_QWORD *)&v2180 + 1) = v4;
          v2181 = v1730;
          v2164 = v466;
          v1732 = v2147;
          if (!v466)
            v1732 = 0;
          v2163 = v1732 & 0xAA;
          llvm::APInt::getSplat(v465, (llvm::APInt *)&v2163, (uint64_t)&v2165);
          sub_1C553AC9C(1u, v463, 1, v1731, &v2180, (llvm::LLVMContext *)&v2165);
          if (v2166 >= 0x41 && v2165)
            MEMORY[0x1CAA32F9C](v2165, 0x1000C8000313F17);
          if (v2164 >= 0x41 && v2163)
            MEMORY[0x1CAA32F9C](v2163, 0x1000C8000313F17);
          v38 = *(_QWORD *)(v6 + 24);
          v39 = v6;
          if ((*(_BYTE *)v6 & 4) == 0)
          {
            v39 = v6;
            if ((*(_WORD *)(v6 + 44) & 8) != 0)
            {
              v39 = v6;
              do
                v39 = *(_QWORD *)(v39 + 8);
              while ((*(_WORD *)(v39 + 44) & 8) != 0);
            }
          }
          goto LABEL_1550;
        }
        v1545 = 0;
        v1543 = 0;
      }
      else
      {
        v1542 = *(_QWORD *)v7;
        *(_QWORD *)&v2168 = v2167;
        DWORD2(v2168) = 0;
        LODWORD(v2172) = v289;
        LODWORD(v2173) = 0;
        v1543 = 1;
        v1544 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1542 + 32))(v1542, 212, &v2168, 1, &v2172, 1, 0);
        v1545 = v1544 & 0xFFFFFFFF00000000;
        v289 = v1544;
      }
      v1720 = v2167;
      v1721 = *(_QWORD *)v7;
      *(_QWORD *)&v2172 = v1545 | v289;
      *((_QWORD *)&v2172 + 1) = v464;
      LODWORD(v2173) = v1543;
      DWORD2(v2168) = v466;
      v2147 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v466;
      *(_QWORD *)&v2168 = v2147 & 0xF0;
      llvm::APInt::getSplat(v465, (llvm::APInt *)&v2168, (uint64_t)&v2184);
      v289 = sub_1C553AC9C(4u, v1720, 0, v1721, &v2172, (llvm::LLVMContext *)&v2184);
      v3 = v1722;
      if (v2185 >= 0x41 && v2184)
        MEMORY[0x1CAA32F9C](v2184, 0x1000C8000313F17);
      v1723 = (uint64_t *)v7;
      v1724 = v289 & 0xFFFFFFFF00000000;
      if (DWORD2(v2168) >= 0x41 && (_QWORD)v2168)
        MEMORY[0x1CAA32F9C](v2168, 0x1000C8000313F17);
      v289 = v289;
      v1725 = 1;
      goto LABEL_1359;
    case 0xDA:
      v416 = *(_QWORD *)(a2 + 32);
      v417 = *(_DWORD *)(v416 + 4);
      v418 = *(_DWORD *)(v416 + 36);
      v419 = *(unsigned __int16 *)(a2 + 44);
      v2131 = v417;
      if (v417 < 0 && (v420 = *(_QWORD *)(a1 + 16), (v417 & 0x7FFFFFFFu) < *(_DWORD *)(v420 + 432)))
      {
        v421 = *(_QWORD *)(*(_QWORD *)(v420 + 424) + 8 * (v417 & 0x7FFFFFFF));
        if ((v421 & 0xFFFFFFFFFFFFFFF9) != 0
          && (*(_QWORD *)(*(_QWORD *)(v420 + 424) + 8 * (v417 & 0x7FFFFFFF)) & 4) != 0)
        {
          v423 = 0x800000000000000;
          if ((v421 & 2) == 0)
            v423 = 0x8000000000000;
          v424 = v421 & 0x7FFF8 | ((unint64_t)((v423 & v421) != 0) << 51) | 0x80004;
LABEL_755:
          v995 = *(_QWORD *)a1;
          v996 = v419 | 0x100000000;
          *(_QWORD *)&v2168 = v421;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = v418;
          LODWORD(v2173) = 0;
          v997 = v421;
          v2120 = v421;
          v998 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v995 + 32))(v995, 85, &v2168, 1, &v2172, 1, v419 | 0x100000000);
          v1000 = v999;
          v1001 = *(_QWORD *)v7;
          *(_QWORD *)&v2172 = v997;
          DWORD2(v2172) = 0;
          v1002 = sub_1C5545FFC(v1001, (unint64_t *)&v2172, 0.0);
          v1003 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v424;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = 4;
          LODWORD(v2173) = 2;
          LODWORD(v2174) = v418;
          v2176 = 0;
          v2177 = v1002;
          v2178 = v1004;
          v2179 = 1;
          v1005 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v1003 + 32))(v1003, 135, &v2168, 1, &v2172, 3, v996);
          v1007 = v1006;
          v1008 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v424;
          DWORD2(v2168) = 0;
          LODWORD(v2172) = 6;
          LODWORD(v2173) = 2;
          LODWORD(v2174) = v418;
          v2176 = 0;
          v2177 = v998;
          v2178 = v1000;
          v2179 = 1;
          v1009 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v1008 + 32))(v1008, 135, &v2168, 1, &v2172, 3, v996);
          v1010 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v424;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1005;
          *((_QWORD *)&v2172 + 1) = v1007;
          LODWORD(v2173) = 1;
          v2174 = v1009;
          v2175 = v1011;
          v2176 = 1;
          v1012 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1010 + 32))(v1010, 65, &v2168, 1, &v2172, 2, 0);
          v1013 = *(_QWORD *)v7;
          *(_QWORD *)&v2168 = v2120;
          DWORD2(v2168) = 0;
          *(_QWORD *)&v2172 = v1012;
          *((_QWORD *)&v2172 + 1) = v1014;
          LODWORD(v2173) = 1;
          v1015 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1013 + 32))(v1013, 182, &v2168, 1, &v2172, 1, 0);
          v1016 = *(_QWORD *)v7;
          LODWORD(v2168) = v2131;
          DWORD2(v2168) = 1;
          *(_QWORD *)&v2172 = v998;
          *((_QWORD *)&v2172 + 1) = v1000;
          LODWORD(v2173) = 1;
          v2174 = v1015;
          v2175 = v1017;
          v2176 = 1;
          (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v1016 + 32))(v1016, 163, &v2168, 1, &v2172, 2, v996);
          v265 = a2;
          v266 = *(_QWORD *)(a2 + 24);
          v267 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v267 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v267 = a2;
              do
                v267 = *(_QWORD *)(v267 + 8);
              while ((*(_WORD *)(v267 + 44) & 8) != 0);
            }
          }
          goto LABEL_1699;
        }
      }
      else
      {
        v421 = 0;
      }
      v424 = 9;
      goto LABEL_755;
    case 0xE0:
      v365 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 16);
      if (!*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v365 + 112))(v365) + 8))
        return 2;
      v366 = *(_QWORD *)(v6 + 32);
      v367 = *(_DWORD *)(v366 + 4);
      v368 = *(_QWORD *)(v366 + 80);
      if (v367 < 0 && (v369 = *(_QWORD *)(v7 + 16), (v367 & 0x7FFFFFFFu) < *(_DWORD *)(v369 + 432)))
        v370 = *(_QWORD *)(*(_QWORD *)(v369 + 424) + 8 * (v367 & 0x7FFFFFFF));
      else
        v370 = 0;
      v1254 = *(_DWORD *)(v366 + 36);
      v2184 = v370;
      v1256 = sub_1C4825F50(&v2184);
      if ((_DWORD)v1255 == 1)
      v2182 = (8 * v1256) | 1;
      v1257 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 88);
      v1258 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = v2184;
      DWORD2(v2168) = 0;
      LODWORD(v2172) = v1257;
      LODWORD(v2173) = 0;
      v1259 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1258 + 32))(v1258, 19, &v2168, 1, &v2172, 1, 0);
      v1260 = *(uint64_t **)v7;
      *(_QWORD *)&v2168 = (8 * v1256) | 1;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1259;
      *((_QWORD *)&v2172 + 1) = v1261;
      LODWORD(v2173) = 1;
      v1262 = sub_1C5546EF4(v1260, (uint64_t *)&v2168, (int *)&v2172);
      v1263 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = (8 * v1256) | 1;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1262;
      *((_QWORD *)&v2172 + 1) = v1264;
      LODWORD(v2173) = 1;
      LODWORD(v2174) = v1254;
      v2176 = 0;
      v1265 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1263 + 32))(v1263, 46, &v2168, 1, &v2172, 2, 0);
      v1267 = v1266;
      if (!v368)
        goto LABEL_970;
      v1268 = (63 - __clz(v368));
      if (!v1268)
        goto LABEL_970;
      v1270 = sub_1C4825F50(&v2182);
      if ((_DWORD)v1269 == 1)
      v1271 = 1 << v1268;
      DWORD2(v2180) = v1270;
      if (v1270 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v2180, v1271, 1);
        v1270 = DWORD2(v2180);
        if (DWORD2(v2180) > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v2180);
          goto LABEL_967;
        }
        v1273 = v2180;
      }
      else
      {
        if (v1270)
          v1272 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1270;
        else
          v1272 = 0;
        v1273 = v1272 & v1271;
      }
      v1274 = ~v1273;
      if (v1270)
        v1275 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1270;
      else
        v1275 = 0;
      *(_QWORD *)&v2180 = v1275 & v1274;
LABEL_967:
      llvm::APInt::operator++((uint64_t)&v2180);
      v1276 = *(llvm::ConstantInt ******)v7;
      *(_QWORD *)&v2172 = v2182;
      DWORD2(v2172) = 0;
      v1278 = llvm::ConstantInt::get(***v1276[1], (llvm::LLVMContext *)&v2180, v1277);
      v1279 = ((uint64_t (*)(llvm::ConstantInt *****, __int128 *, llvm::ValueHandleBase *))(*v1276)[2])(v1276, &v2172, v1278);
      v1280 = *(_QWORD *)v7;
      *(_QWORD *)&v2168 = v2182;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1265;
      *((_QWORD *)&v2172 + 1) = v1267;
      LODWORD(v2173) = 1;
      v2174 = v1279;
      v2175 = v1281;
      v2176 = 1;
      v1265 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1280 + 32))(v1280, 65, &v2168, 1, &v2172, 2, 0);
      v1267 = v1282;
      if (DWORD2(v2180) >= 0x41 && (_QWORD)v2180)
        MEMORY[0x1CAA32F9C](v2180, 0x1000C8000313F17);
LABEL_970:
      v1283 = *(uint64_t **)v7;
      *(_QWORD *)&v2168 = v2184;
      DWORD2(v2168) = 0;
      *(_QWORD *)&v2172 = v1265;
      *((_QWORD *)&v2172 + 1) = v1267;
      LODWORD(v2173) = 1;
      v1284 = sub_1C5546EF4(v1283, (uint64_t *)&v2168, (int *)&v2172);
      v1286 = v1285;
      v1287 = *(_QWORD *)v7;
      LODWORD(v2168) = v1257;
      DWORD2(v2168) = 1;
      *(_QWORD *)&v2172 = v1284;
      *((_QWORD *)&v2172 + 1) = v1285;
      LODWORD(v2173) = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1287
                                                                                                 + 32))(v1287, 19, &v2168, 1, &v2172, 1, 0);
      v1288 = *(_QWORD *)v7;
      LODWORD(v2168) = v367;
      DWORD2(v2168) = 1;
      *(_QWORD *)&v2172 = v1284;
      *((_QWORD *)&v2172 + 1) = v1286;
      LODWORD(v2173) = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v1288
                                                                                                 + 32))(v1288, 19, &v2168, 1, &v2172, 1, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0xE8:
    case 0xE9:
      v99 = *(_QWORD *)(a2 + 32);
      v100 = *(_DWORD *)(v99 + 32 * ((_DWORD)v4 != 232) + 4);
      if (v100 < 0 && (v101 = *(_QWORD *)(a1 + 16), (v100 & 0x7FFFFFFFu) < *(_DWORD *)(v101 + 432)))
        v102 = *(_QWORD *)(*(_QWORD *)(v101 + 424) + 8 * (v100 & 0x7FFFFFFF));
      else
        v102 = 0;
      v184 = *(_QWORD *)(v99 + 32 * ((_DWORD)v4 == 232) + 16);
      v185 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32) + 1896))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(v184 - 8 * *(unsigned int *)(v184 + 8)) + 8) + 24, v102, *(_QWORD *)(*(_QWORD *)a1 + 8));
      if (!v185)
        return 2;
      v186 = v185;
      v187 = *(_QWORD *)v7;
      if ((_DWORD)v4 == 232)
      {
        LODWORD(v2168) = v100;
        DWORD2(v2168) = 1;
        LODWORD(v2172) = v186;
      }
      else
      {
        LODWORD(v2168) = v186;
        DWORD2(v2168) = 1;
        LODWORD(v2172) = v100;
      }
      LODWORD(v2173) = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v187 + 32))(v187, 19, &v2168, 1, &v2172, 1, 0);
      v38 = *(_QWORD *)(v6 + 24);
      v39 = v6;
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        v39 = v6;
        if ((*(_WORD *)(v6 + 44) & 8) != 0)
        {
          v39 = v6;
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
      }
      goto LABEL_1550;
    case 0xEA:
    case 0xEC:
    case 0xED:
      return sub_1C553818C(a1, a2, 0);
    case 0xEB:
      return sub_1C6272054(a1, (unint64_t *)a2);
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
      v8 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
      if ((v8 & 0x80000000) == 0)
        return 2;
      v9 = *(_QWORD *)(a1 + 16);
      v10 = v8 & 0x7FFFFFFF;
      if (v10 >= *(_DWORD *)(v9 + 432))
        return 2;
      *(_QWORD *)&v2172 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v10);
      *(_QWORD *)&v2168 = v2172;
      if ((v2172 & 1) == 0)
        return 2;
      v12 = sub_1C4825F50((unint64_t *)&v2168);
      if ((_DWORD)v11 == 1)
      v14 = sub_1C4825F50((unint64_t *)&v2172);
      if ((_DWORD)v13 == 1)
      if (v12 > v14)
        return 2;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 8) + 32))(*(_QWORD *)(v7 + 8), v6);
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 16) + 8) + 912;
LABEL_385:
      *(_QWORD *)(v6 + 16) = v15;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 8) + 40))(*(_QWORD *)(v7 + 8), v6);
      return 1;
    default:
      return v5;
  }
}

uint64_t sub_1C553159C(uint64_t *a1, uint64_t a2, int a3, unint64_t a4, int8x8_t a5)
{
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  int8x8_t v47;
  uint64_t v48;
  uint8x8_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  const char *v92;
  void **v93;
  void (**v94)(void **);
  void **v95;
  void (**v96)(void **);
  unsigned int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  char v106;
  const char *v107;
  unint64_t v108;
  const char *v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  const char *v119;
  unint64_t v120;
  const char *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t *v126;
  uint64_t v127;
  void *v128;
  const char *v129;
  unint64_t v130;
  const char *v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  const char *v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  llvm::MachineFunction *v143;
  unint64_t *v144;
  unint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const char *v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint8x8_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  const char *v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  unsigned int v210;
  BOOL v211;
  char v212;
  unsigned int v213;
  uint64_t v214;
  unsigned int v215;
  int v216;
  int v217;
  unsigned int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  llvm::MachineBasicBlock *v226;
  uint64_t v227;
  unint64_t FirstTerminator;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  llvm::MachineFunction *v237;
  unint64_t *v238;
  unint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int *v247;
  int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  int GenericVirtualRegister;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int *v279;
  uint64_t v280;
  uint64_t v281;
  int *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t *v289;
  int v290;
  unint64_t v291;
  const char *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  __int128 v298;
  char v299;
  unint64_t v300;
  char v301;
  unint64_t v302;
  char v303;
  unint64_t v304;
  void *v305;
  char v306;
  char v307;
  unsigned int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  uint64_t v312;
  char v313;
  char v314;
  int v315;
  unsigned int v316;
  int v317;
  unsigned int *v318;
  uint64_t v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  unsigned int v331;
  uint64_t v332;
  int *v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t *v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int v343;
  int v344;
  int *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  int v359;
  int v360;
  int v361;
  void *v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int v365;
  int v366;
  const char *v367;
  int v368;
  char v369;
  uint64_t v370;
  uint64_t v371;
  void *v372;
  uint64_t v373;
  unsigned int v374;
  int v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  uint64_t v380;
  unint64_t v381;
  int v382;
  unint64_t v383;
  int v384;
  unint64_t v385;
  void *v386;
  uint64_t v387;
  int v388;
  void **v389;
  int v390;
  void *v391;
  uint64_t v392;
  int v393;
  int v394;
  int v395;
  uint64_t v396;
  __int128 v397;
  void *v398[2];
  _BYTE v399[48];
  void *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  void **v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  uint64_t v413;

  v413 = *MEMORY[0x1E0C80C00];
  v380 = a4;
  if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0)
    v9 = (a4 >> 2) & 1;
  else
    v9 = 0;
  if (v9 == 1)
  {
    v10 = 0x800000000000000;
    if ((a4 & 2) == 0)
      v10 = 0x8000000000000;
    if ((v10 & a4) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v11 = (unsigned __int16)(a4 >> 3);
  }
  else
  {
    v11 = 1;
  }
  v12 = *(unsigned __int16 **)(a2 + 16);
  v13 = *v12;
  v14 = 2;
  switch(*v12)
  {
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x50u:
    case 0x51u:
    case 0x53u:
    case 0x55u:
    case 0x56u:
    case 0x58u:
    case 0x76u:
    case 0x77u:
    case 0x7Cu:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
      goto LABEL_12;
    case 0x45u:
      v204 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v204 < 0 && (v205 = a1[2], v206 = v204 & 0x7FFFFFFF, v206 < *(_DWORD *)(v205 + 432)))
        v207 = *(_QWORD *)(*(_QWORD *)(v205 + 424) + 8 * v206);
      else
        v207 = 0;
      v208 = 0x800000000000000;
      if ((v207 & 2) == 0)
        v208 = 0x8000000000000;
      if ((v208 & v207) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
        v12 = *(unsigned __int16 **)(a2 + 16);
      }
      v209 = *(_DWORD *)(a2 + 40);
      v210 = *((unsigned __int8 *)v12 + 4);
      v211 = (v12[4] & 2) == 0 || v209 == v210;
      v212 = v211;
      v213 = *((unsigned __int8 *)v12 + 4);
      if (!v211)
      {
        v358 = *((unsigned __int8 *)v12 + 4);
        v213 = v358;
        do
        {
          v359 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v358);
          if ((v359 & 0x10000FF) != 0x1000000)
            break;
          v213 += (v359 & 0x2000000) == 0;
          if (v209 - 1 == v358)
            break;
          ++v358;
        }
        while ((v359 & 0x2000000) == 0);
      }
      v214 = *((_QWORD *)v12 + 4);
      if (v214)
      {
        v215 = -1;
        do
          ++v215;
        while (*(_WORD *)(v214 + 2 * v215));
      }
      else
      {
        v215 = 0;
      }
      if ((v212 & 1) != 0)
      {
        v216 = *((unsigned __int8 *)v12 + 4);
      }
      else
      {
        v216 = *((unsigned __int8 *)v12 + 4);
        do
        {
          v360 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v210);
          if ((v360 & 0x10000FF) != 0x1000000)
            break;
          v216 += (v360 & 0x2000000) == 0;
          if (v209 - 1 == v210)
            break;
          ++v210;
        }
        while ((v360 & 0x2000000) == 0);
      }
      v217 = v209 - v213;
      if (v214)
      {
        v218 = -1;
        do
          ++v218;
        while (*(_WORD *)(v214 + 2 * v218));
      }
      else
      {
        v218 = 0;
      }
      v379 = v217 - v215;
      v386 = &v388;
      v387 = 0x800000000;
      v391 = &v393;
      v392 = 0x800000000;
      v219 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v219 < 0 && (v220 = a1[2], v221 = v219 & 0x7FFFFFFF, v221 < *(_DWORD *)(v220 + 432)))
        v222 = *(_QWORD *)(*(_QWORD *)(v220 + 424) + 8 * v221);
      else
        v222 = 0;
      v223 = v218 + v216;
      sub_1C5539EC0((uint64_t)&v386, v222, v11);
      v400 = &v402;
      v401 = 0x800000000;
      v404 = &v406;
      v405 = 0x300000000;
      sub_1C553C3FC((uint64_t)&v404, v379 >> 1, (uint64_t)&v400);
      if (v400 != &v402)
        free(v400);
      v224 = (unsigned __int16)(v207 >> 3);
      if (v223 < *(_DWORD *)(a2 + 40))
      {
        v225 = 0;
        do
        {
          v226 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(a2 + 32) + 32 * (v223 + 1) + 16);
          v227 = *a1;
          FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v226);
          *(_QWORD *)(v227 + 40) = v226;
          *(_QWORD *)(v227 + 48) = FirstTerminator;
          sub_1C55347B8(a1, (const char *)*(unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * v223 + 4), v11, (uint64_t)v404 + 48 * v225);
          v223 += 2;
          ++v225;
        }
        while (v223 < *(_DWORD *)(a2 + 40));
      }
      v229 = v224 / v11;
      v368 = v224 % v11;
      v230 = *a1;
      *(_QWORD *)(v230 + 40) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(v230 + 48) = a2;
      if (v224 % v11)
        v231 = v229 + 1;
      else
        v231 = v229;
      if (!(_DWORD)v231)
        goto LABEL_312;
      v232 = 0;
      if (v379 >> 1 <= 1)
        v233 = 1;
      else
        v233 = v379 >> 1;
      v234 = 48 * v233;
      while (1)
      {
        v235 = (_QWORD *)*a1;
        v237 = sub_1C55437B8((_QWORD *)*a1, 0x45u);
        v238 = (unint64_t *)v236;
        v239 = (unint64_t *)v235[6];
        v240 = *(_QWORD *)(v235[5] + 40);
        *(_QWORD *)(v236 + 24) = v240;
        v241 = *(_QWORD *)(v240 + 32);
        v242 = *(unsigned int *)(v236 + 40);
        if ((_DWORD)v242)
        {
          v258 = *(_QWORD *)(v236 + 32);
          v259 = *(_QWORD *)(v241 + 40);
          v260 = 32 * v242;
          do
          {
            if (!*(_BYTE *)v258)
            {
              v261 = *(unsigned int *)(v258 + 4);
              if ((int)v261 >= 0)
                v262 = (uint64_t *)(*(_QWORD *)(v259 + 272) + 8 * v261);
              else
                v262 = (uint64_t *)(*(_QWORD *)(v259 + 24) + 16 * (v261 & 0x7FFFFFFF) + 8);
              v263 = *v262;
              if (*v262)
              {
                v264 = *(_QWORD *)(v263 + 16);
                *(_QWORD *)(v263 + 16) = v258;
                *(_QWORD *)(v258 + 16) = v264;
                if ((*(_BYTE *)(v258 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v258 + 24) = v263;
                }
                else
                {
                  *(_QWORD *)(v258 + 24) = 0;
                  v262 = (uint64_t *)(v264 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v258 + 16) = v258;
                *(_QWORD *)(v258 + 24) = 0;
              }
              *v262 = v258;
            }
            v258 += 32;
            v260 -= 32;
          }
          while (v260);
        }
        v243 = *(_QWORD *)(v241 + 728);
        if (v243)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 24))(v243, v236);
        v244 = *v239 & 0xFFFFFFFFFFFFFFF8;
        *v238 = v244 | *v238 & 7;
        v238[1] = (unint64_t)v239;
        *(_QWORD *)(v244 + 8) = v238;
        *v239 = *v239 & 7 | (unint64_t)v238;
        v245 = v235[7];
        if (v245)
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v245 + 24))(v245, v238);
        v246 = a1[2];
        v247 = (int *)((char *)v386 + 16 * v232);
        v248 = v247[2];
        if (v248)
        {
          if (v248 == 2
            || (v249 = *v247, (v249 & 0x80000000) == 0)
            || (v250 = v249 & 0x7FFFFFFF, v250 >= *(_DWORD *)(v246 + 432)))
          {
            v251 = 0;
            goto LABEL_330;
          }
          v247 = (int *)(*(_QWORD *)(v246 + 424) + 8 * v250);
        }
        v251 = *(_QWORD *)v247;
LABEL_330:
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v246, v251, "", 0);
        v401 = 0;
        v402 = 0;
        v403 = 0;
        HIDWORD(v400) = GenericVirtualRegister;
        LODWORD(v400) = 0x1000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v238, v237, (const llvm::MachineOperand *)&v400);
        v253 = *(_DWORD *)(v238[4] + 4);
        v254 = v392;
        if (v392 >= (unint64_t)HIDWORD(v392))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v391, (uint64_t)&v393, v392 + 1, 4);
          v254 = v392;
        }
        *((_DWORD *)v391 + v254) = v253;
        LODWORD(v392) = v392 + 1;
        if (v379 >= 2)
        {
          v255 = 0;
          v256 = 64;
          do
          {
            v257 = *(_DWORD *)(*(_QWORD *)((char *)v404 + v255) + 4 * v232);
            v401 = 0;
            HIDWORD(v400) = v257;
            LODWORD(v400) = 0;
            v402 = 0;
            v403 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v238, v237, (const llvm::MachineOperand *)&v400);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v238, v237, (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + v256));
            v256 += 64;
            v255 += 48;
          }
          while (v234 != v255);
        }
        if (++v232 == v231)
        {
LABEL_312:
          if (v368)
          {
            sub_1C5534E9C(a1, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4), (uint64_t)v391, v392);
          }
          else
          {
            v265 = *a1;
            LODWORD(v400) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
            LODWORD(v401) = 1;
            sub_1C5544D6C(v265, (uint64_t)&v400, (int *)v391, v392);
          }
          v266 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v266 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v266 = a2;
              do
                v266 = *(_QWORD *)(v266 + 8);
              while ((*(_WORD *)(v266 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v266 + 8));
          sub_1C618F3AC((char **)&v404);
          if (v391 != &v393)
            free(v391);
          v194 = (uint64_t *)v386;
          v267 = (uint64_t *)&v388;
LABEL_356:
          if (v194 != v267)
LABEL_357:
            free(v194);
          return 1;
        }
      }
    case 0x4Au:
      v386 = (void *)a4;
      v78 = (*(_DWORD *)(a2 + 40) - 1);
      v79 = *(_QWORD *)(a2 + 32);
      v80 = *(_DWORD *)(v79 + 32 * v78 + 4);
      v81 = a1[2];
      v82 = *(_DWORD *)(v79 + 4);
      if (v82 < 0 && (v83 = v82 & 0x7FFFFFFF, v83 < *(_DWORD *)(v81 + 432)))
        v84 = *(void **)(*(_QWORD *)(v81 + 424) + 8 * v83);
      else
        v84 = 0;
      v391 = v84;
      if (v80 < 0 && (v80 & 0x7FFFFFFFu) < *(_DWORD *)(v81 + 432))
        v128 = *(void **)(*(_QWORD *)(v81 + 424) + 8 * (v80 & 0x7FFFFFFF));
      else
        v128 = 0;
      v400 = v128;
      v14 = 2;
      if (a3 != 1 || v84 == (void *)a4)
        return v14;
      v130 = sub_1C4825F50((unint64_t *)&v400);
      if ((_DWORD)v129 == 1)
      v132 = sub_1C4825F50((unint64_t *)&v386);
      if ((_DWORD)v131 == 1)
      if (v130 % v132)
        return 2;
      v134 = sub_1C4825F50((unint64_t *)&v386);
      if ((_DWORD)v133 == 1)
      v136 = sub_1C4825F50((unint64_t *)&v391);
      if ((_DWORD)v135 == 1)
      if (v134 % v136)
        return 2;
      v137 = (uint64_t *)*a1;
      LODWORD(v404) = v80;
      LODWORD(v406) = 0;
      sub_1C5544C30(v137, (uint64_t)v386, (int *)&v404);
      v370 = v138;
      v373 = (*(_DWORD *)(v138 + 40) - 1);
      if (*(_DWORD *)(v138 + 40) != 1)
      {
        v139 = 0;
        v140 = 0;
        v377 = ((int)v78 / (int)v373);
        do
        {
          v141 = (_QWORD *)*a1;
          v143 = sub_1C55437B8((_QWORD *)*a1, 0x4Au);
          v144 = (unint64_t *)v142;
          v145 = (unint64_t *)v141[6];
          v146 = *(_QWORD *)(v141[5] + 40);
          *(_QWORD *)(v142 + 24) = v146;
          v147 = *(_QWORD *)(v146 + 32);
          v148 = *(unsigned int *)(v142 + 40);
          if ((_DWORD)v148)
          {
            v156 = *(_QWORD *)(v142 + 32);
            v157 = *(_QWORD *)(v147 + 40);
            v158 = 32 * v148;
            do
            {
              if (!*(_BYTE *)v156)
              {
                v159 = *(unsigned int *)(v156 + 4);
                if ((int)v159 >= 0)
                  v160 = (uint64_t *)(*(_QWORD *)(v157 + 272) + 8 * v159);
                else
                  v160 = (uint64_t *)(*(_QWORD *)(v157 + 24) + 16 * (v159 & 0x7FFFFFFF) + 8);
                v161 = *v160;
                if (*v160)
                {
                  v162 = *(_QWORD *)(v161 + 16);
                  *(_QWORD *)(v161 + 16) = v156;
                  *(_QWORD *)(v156 + 16) = v162;
                  if ((*(_BYTE *)(v156 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v156 + 24) = v161;
                  }
                  else
                  {
                    *(_QWORD *)(v156 + 24) = 0;
                    v160 = (uint64_t *)(v162 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v156 + 16) = v156;
                  *(_QWORD *)(v156 + 24) = 0;
                }
                *v160 = v156;
              }
              v156 += 32;
              v158 -= 32;
            }
            while (v158);
          }
          v149 = *(_QWORD *)(v147 + 728);
          if (v149)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v149 + 24))(v149, v142);
          v150 = *v145 & 0xFFFFFFFFFFFFFFF8;
          *v144 = v150 | *v144 & 7;
          v144[1] = (unint64_t)v145;
          *(_QWORD *)(v150 + 8) = v144;
          *v145 = *v145 & 7 | (unint64_t)v144;
          v151 = v141[7];
          if (v151)
            (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v151 + 24))(v151, v144);
          v152 = v139;
          v153 = v377;
          if ((_DWORD)v377)
          {
            do
            {
              v154 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v152 + 4);
              v405 = 0;
              v406 = 0;
              v407 = 0;
              HIDWORD(v404) = v154;
              LODWORD(v404) = 0x1000000;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v143, (const llvm::MachineOperand *)&v404);
              ++v152;
              --v153;
            }
            while (v153);
          }
          v155 = *(_DWORD *)(*(_QWORD *)(v370 + 32) + 32 * v140 + 4);
          v405 = 0;
          HIDWORD(v404) = v155;
          LODWORD(v404) = 0;
          v406 = 0;
          v407 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v143, (const llvm::MachineOperand *)&v404);
          ++v140;
          v139 += v377;
        }
        while (v140 != v373);
      }
      v202 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v202 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v202 = a2;
          do
            v202 = *(_QWORD *)(v202 + 8);
          while ((*(_WORD *)(v202 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v202 + 8));
      return 1;
    case 0x4Du:
      v66 = (uint64_t)a1;
      v67 = a2;
      v68 = a3;
      return sub_1C553A028(v66, v67, v68, a4);
    case 0x4Fu:
      if (a3 != 1)
        return 2;
      v66 = (uint64_t)a1;
      v67 = a2;
      v68 = 1;
      return sub_1C553A028(v66, v67, v68, a4);
    case 0x52u:
      v73 = a1[2];
      v74 = *(_QWORD *)(a2 + 32);
      v75 = *(_DWORD *)(v74 + 4);
      if (v75 < 0 && (v76 = v75 & 0x7FFFFFFF, v76 < *(_DWORD *)(v73 + 432)))
        v77 = *(void **)(*(_QWORD *)(v73 + 424) + 8 * v76);
      else
        v77 = 0;
      v398[0] = v77;
      v99 = *(_DWORD *)(v74 + 36);
      if (v99 < 0 && (v100 = v99 & 0x7FFFFFFF, v100 < *(_DWORD *)(v73 + 432)))
      {
        v101 = *(_QWORD *)(*(_QWORD *)(v73 + 424) + 8 * v100);
        *(_QWORD *)&v397 = v101;
        if ((v101 & 2) != 0)
        {
          v102 = 35;
          v103 = 19;
          if ((v101 & 4) == 0)
            v102 = 19;
          v104 = v101 >> v102;
          if ((v101 & 4) == 0)
            v103 = 3;
          if ((v101 & 1) != 0)
            v103 = 3;
          v105 = (8 * (unsigned __int16)(v101 >> v103)) & 0xFFFFF8000007FFFFLL | ((v104 & 0xFFFFFF) << 19) | 2;
          goto LABEL_148;
        }
      }
      else
      {
        v101 = 0;
        *(_QWORD *)&v397 = 0;
      }
      v106 = 3;
      if ((v101 & 1) == 0)
        v106 = 19;
      v105 = v101 & 0x8000000000000000 | (8 * (v101 >> v106)) | 1;
LABEL_148:
      v383 = v105;
      v108 = sub_1C4825F50((unint64_t *)v398);
      if ((_DWORD)v107 == 1)
      v110 = sub_1C4825F50((unint64_t *)&v380);
      if ((_DWORD)v109 == 1)
      if (v108 % v110)
        return 2;
      v112 = sub_1C4825F50((unint64_t *)&v380);
      if ((_DWORD)v111 == 1)
      v114 = sub_1C4825F50(&v383);
      if ((_DWORD)v113 == 1)
      v381 = sub_1C4953AD0((v112 / v114), v383);
      v115 = sub_1C4825F50((unint64_t *)&v380);
      v117 = v116;
      v14 = 2;
      if (v115 != sub_1C4825F50(&v381) || v117 != v118)
        return v14;
      v120 = sub_1C4825F50((unint64_t *)&v397);
      if ((_DWORD)v119 == 1)
      v122 = sub_1C4825F50(&v381);
      if ((_DWORD)v121 == 1)
      v386 = &v388;
      v387 = 0x200000000;
      v391 = &v393;
      v392 = 0x200000000;
      v123 = v120 / v122;
      sub_1C5534298(a1, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), v381, v123, (uint64_t)&v391);
      if ((int)v123 >= 1)
      {
        v124 = 0;
        do
        {
          if (v380 == v381)
          {
            v125 = *(_DWORD *)((char *)v391 + v124);
          }
          else
          {
            v125 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v380, "", 0);
            v126 = (uint64_t *)*a1;
            LODWORD(v400) = v125;
            LODWORD(v401) = 1;
            LODWORD(v404) = *(_DWORD *)((char *)v391 + v124);
            LODWORD(v406) = 0;
            sub_1C5546EF4(v126, (uint64_t *)&v400, (int *)&v404);
          }
          v127 = v387;
          if (v387 >= (unint64_t)HIDWORD(v387))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v386, (uint64_t)&v388, v387 + 1, 4);
            v127 = v387;
          }
          *((_DWORD *)v386 + v127) = v125;
          LODWORD(v387) = v387 + 1;
          v124 += 4;
        }
        while (4 * v123 != v124);
      }
      v186 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if ((v186 & 0x80000000) == 0
        || (v187 = a1[2], (v186 & 0x7FFFFFFFu) >= *(_DWORD *)(v187 + 432))
        || ((v188 = *(_QWORD *)(*(_QWORD *)(v187 + 424) + 8 * (v186 & 0x7FFFFFFF)),
             v189 = v188 & 0xFFFFFFFFFFFFFFF9,
             v190 = v188 & 4,
             v189)
          ? (v191 = v190 == 0)
          : (v191 = 1),
            v191))
      {
        v192 = *a1;
        LODWORD(v404) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        LODWORD(v405) = 1;
        sub_1C5544D6C(v192, (uint64_t)&v404, (int *)v386, v387);
        goto LABEL_263;
      }
      v281 = *a1;
      LODWORD(v400) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      LODWORD(v401) = 1;
      v282 = (int *)v386;
      v283 = v387;
      v404 = &v406;
      v405 = 0x800000000;
      if (v387 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v404, (uint64_t)&v406, v387, 24);
        v284 = v405;
        v285 = (uint64_t *)v404;
      }
      else
      {
        if (!(_DWORD)v387)
        {
          v290 = 0;
          v285 = &v406;
          goto LABEL_464;
        }
        v284 = 0;
        v285 = &v406;
      }
      v286 = 3 * v284;
      v287 = 4 * v283;
      do
      {
        v288 = *v282++;
        v289 = &v285[v286];
        *(_DWORD *)v289 = v288;
        *((_DWORD *)v289 + 4) = 0;
        v286 += 3;
        v287 -= 4;
      }
      while (v287);
      v290 = v405;
LABEL_464:
      LODWORD(v405) = v290 + v283;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *))(*(_QWORD *)v281 + 32))(v281, 77, &v400, 1, v285);
      if (v404 != &v406)
        free(v404);
LABEL_263:
      v193 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v193 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v193 = a2;
          do
            v193 = *(_QWORD *)(v193 + 8);
          while ((*(_WORD *)(v193 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v193 + 8));
      if (v391 != &v393)
        free(v391);
      v194 = (uint64_t *)v386;
      if (v386 == &v388)
        return 1;
      goto LABEL_357;
    case 0x5Au:
    case 0x60u:
      return sub_1C55362C4(a1, a2, a3, a4);
    case 0x7Du:
      LODWORD(v404) = 2;
      v14 = 1;
      goto LABEL_105;
    case 0x86u:
    case 0x87u:
      v14 = 1;
      LODWORD(v404) = 1;
LABEL_105:
      sub_1C55395D0(a1, a2, v11, &v404, 1);
      return v14;
    case 0x88u:
      v59 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
      if (v59 < 0)
      {
        v60 = a1[2];
        v61 = v59 & 0x7FFFFFFF;
        if (v61 < *(_DWORD *)(v60 + 432))
        {
          v62 = *(_QWORD *)(*(_QWORD *)(v60 + 424) + 8 * v61);
          v63 = v62 & 0xFFFFFFFFFFFFFFF9;
          v64 = v62 & 4;
          if (v63 && v64 != 0)
          {
LABEL_12:
            sub_1C55395D0(a1, a2, v11, 0, 0);
            return 1;
          }
        }
      }
      v14 = 1;
      LODWORD(v404) = 1;
      sub_1C55395D0(a1, a2, v11, &v404, 1);
      return v14;
    case 0xCCu:
    case 0xCDu:
      v57 = *(_DWORD **)(a2 + 32);
      if ((_DWORD)v13 == 204)
        v58 = v57[17];
      else
        v58 = 0;
      if (!v9)
        return 2;
      v69 = v57[9];
      v70 = v57[8 * (*(_DWORD *)(a2 + 40) - 1) + 1];
      v71 = a1[2];
      if (v69 < 0 && (v69 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v71 + 432))
        v72 = *(_QWORD *)(*(_QWORD *)(v71 + 424) + 8 * (v69 & 0x7FFFFFFF));
      else
        v72 = 0;
      v91 = v57[1];
      v404 = &off_1E816EFF0;
      v405 = (uint64_t)sub_1C554C7E0;
      v407 = &v404;
      v386 = &off_1E816F038;
      v387 = (uint64_t)sub_1C554C7F8;
      v389 = &v386;
      sub_1C554C3AC(v70, v71, (uint64_t)&v404, (uint64_t)&v386, 1, 0, &v391);
      v93 = v389;
      if (v389 == &v386)
      {
        v94 = (void (**)(void **))((char *)v386 + 32);
        v93 = &v386;
LABEL_126:
        (*v94)(v93);
        goto LABEL_127;
      }
      if (v389)
      {
        v94 = (void (**)(void **))((char *)*v389 + 40);
        goto LABEL_126;
      }
LABEL_127:
      v95 = v407;
      if (v407 == &v404)
      {
        v96 = (void (**)(void **))((char *)v404 + 32);
        v95 = &v404;
LABEL_129:
        (*v96)(v95);
        goto LABEL_130;
      }
      if (v407)
      {
        v96 = (void (**)(void **))((char *)*v407 + 40);
        goto LABEL_129;
      }
LABEL_130:
      if (!(_BYTE)v394)
        return sub_1C5536D7C(a1, a2);
      v376 = v91;
      v97 = v392;
      v372 = v391;
      if (v392 > 0x40)
        v98 = *(_QWORD *)v391;
      else
        v98 = (uint64_t)((_QWORD)v391 << -(char)v392) >> -(char)v392;
      v169 = 0x800000000000000;
      if ((v72 & 2) == 0)
        v169 = 0x8000000000000;
      if ((v169 & v72) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v92);
      if (v98 < (unsigned __int16)(v72 >> 3))
      {
        v386 = &v388;
        v387 = 0x800000000;
        v170 = (void *)sub_1C5535914((uint64_t)a1, (uint64_t)&v386, v72, a4, v69);
        v172 = (void *)sub_1C5535100(a1, v72, a4, v170, (uint64_t)&v386, 118);
        v173 = 0x800000000000000;
        if ((a4 & 2) == 0)
          v173 = 0x8000000000000;
        if ((v173 & a4) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v171);
          if ((v70 & 0x80000000) == 0)
            goto LABEL_359;
        }
        else if ((v70 & 0x80000000) == 0)
        {
          goto LABEL_359;
        }
        v174 = a1[2];
        if ((v70 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v174 + 432))
        {
          v175 = *(void **)(*(_QWORD *)(v174 + 424) + 8 * (v70 & 0x7FFFFFFF));
LABEL_360:
          v268 = (unsigned __int16)(a4 >> 3);
          v269 = v98 / v268;
          v270 = *a1;
          v404 = v175;
          LODWORD(v405) = 0;
          v271 = sub_1C5544694(v270, (unint64_t *)&v404, v98 % v268);
          if ((_DWORD)v13 == 204)
          {
            v273 = *((_DWORD *)v386 + v269);
            if (v273 < 0 && (v274 = a1[2], (v273 & 0x7FFFFFFFu) < *(_DWORD *)(v274 + 432)))
              v275 = *(void **)(*(_QWORD *)(v274 + 424) + 8 * (v273 & 0x7FFFFFFF));
            else
              v275 = 0;
            v277 = *a1;
            v400 = v275;
            LODWORD(v401) = 0;
            LODWORD(v404) = v273;
            LODWORD(v406) = 0;
            LODWORD(v407) = v58;
            v409 = 0;
            v410 = v271;
            v411 = v272;
            v412 = 1;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v277 + 32))(v277, 204, &v400, 1, &v404, 3, 0);
            v279 = (int *)v386;
            *((_DWORD *)v386 + v269) = *(_DWORD *)(*(_QWORD *)(v278 + 32) + 4);
            sub_1C553555C(a1, v376, v172, v279, v387);
          }
          else
          {
            v276 = *a1;
            LODWORD(v400) = v376;
            LODWORD(v401) = 1;
            LODWORD(v404) = *((_DWORD *)v386 + v269);
            LODWORD(v406) = 0;
            v407 = (void **)v271;
            v408 = v272;
            v409 = 1;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v276 + 32))(v276, 205, &v400, 1, &v404, 2, 0);
          }
          v280 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v280 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v280 = a2;
              do
                v280 = *(_QWORD *)(v280 + 8);
              while ((*(_WORD *)(v280 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v280 + 8));
          if (v386 != &v388)
            free(v386);
          goto LABEL_371;
        }
LABEL_359:
        v175 = 0;
        goto LABEL_360;
      }
      v176 = *a1;
      LODWORD(v404) = v376;
      LODWORD(v405) = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v176 + 32))(v176, 68, &v404, 1, 0, 0, 0);
      v177 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v177 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v177 = a2;
          do
            v177 = *(_QWORD *)(v177 + 8);
          while ((*(_WORD *)(v177 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v177 + 8));
LABEL_371:
      v14 = 1;
      if (v97 >= 0x41 && v372)
      {
        MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
        return 1;
      }
      return v14;
    case 0xCEu:
      if (a3)
        return 2;
      v85 = *(_QWORD *)(a2 + 32);
      v86 = *(_DWORD *)(v85 + 4);
      v87 = *(_DWORD *)(v85 + 36);
      v88 = *(_DWORD *)(v85 + 68);
      v89 = a1[2];
      if (v86 < 0 && (v86 & 0x7FFFFFFFu) < *(_DWORD *)(v89 + 432))
        v90 = *(_QWORD *)(*(_QWORD *)(v89 + 424) + 8 * (v86 & 0x7FFFFFFF));
      else
        v90 = 0;
      v378 = *(_QWORD *)(v85 + 112);
      v385 = v90;
      if (v87 < 0 && (v87 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v89 + 432))
        v178 = *(_QWORD *)(*(_QWORD *)(v89 + 424) + 8 * (v87 & 0x7FFFFFFF));
      else
        v178 = 0;
      if (v88 < 0 && (v88 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v89 + 432))
        v179 = *(_QWORD *)(*(_QWORD *)(v89 + 424) + 8 * (v88 & 0x7FFFFFFF));
      else
        v179 = 0;
      v14 = 2;
      if (v90 != v178 || v90 != v179)
        return v14;
      v180 = 0x800000000000000;
      if ((v90 & 2) == 0)
        v180 = 0x8000000000000;
      v181 = v180 & v90;
      if ((v180 & v90) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
      a5.i32[0] = (unsigned __int16)(v90 >> 3);
      v182 = (uint8x8_t)vcnt_s8(a5);
      v182.i16[0] = vaddlv_u8(v182);
      if (v182.i32[0] != 1)
        return 2;
      v361 = v86;
      v291 = sub_1C626E9C8(&v385, (v90 >> 4) & 0x7FFF | ((unint64_t)(v181 != 0) << 32));
      v293 = v291;
      v294 = 0x800000000000000;
      if ((v291 & 2) == 0)
        v294 = 0x8000000000000;
      if ((v294 & v291) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v292);
      v295 = (unsigned __int16)(v293 >> 3);
      v400 = &v402;
      v401 = 0xC00000000;
      v398[0] = v399;
      v398[1] = (void *)0xC00000000;
      sub_1C5534298(a1, v87, v293, 2, (uint64_t)&v400);
      sub_1C5534298(a1, v88, v293, 2, (uint64_t)v398);
      v296 = 0;
      v297 = 0;
      v374 = 0;
      *(_QWORD *)&v298 = *(_QWORD *)v400;
      *((_QWORD *)&v298 + 1) = *(_QWORD *)v398[0];
      v397 = v298;
      v299 = 35;
      if ((v293 & 4) == 0)
        v299 = 19;
      v300 = v293 >> v299;
      if ((v293 & 4) != 0)
        v301 = 19;
      else
        v301 = 3;
      if ((v293 & 1) != 0)
        v301 = 3;
      v386 = &v388;
      v302 = (8 * (unsigned __int16)(v293 >> v301)) & 0xFFFFF8000007FFFFLL | ((v300 & 0xFFFFFF) << 19);
      v387 = 0x1000000000;
      if ((v293 & 1) != 0)
        v303 = 3;
      else
        v303 = 19;
      v304 = v293 & 0x8000000000000000 | (8 * (v293 >> v303)) | 1;
      v362 = (void *)v293;
      if ((v293 & 2) != 0)
        v305 = (void *)(v302 | 2);
      else
        v305 = (void *)v304;
      v306 = 1;
      while (1)
      {
        v307 = v306;
        v396 = -1;
        if (!(_DWORD)v295)
          goto LABEL_437;
        v369 = v306;
        v365 = v297;
        v308 = 0;
        v309 = 0;
        while (1)
        {
          v310 = *(_DWORD *)(v378 + 4 * (v309 + v296 * v295));
          v311 = v310 / v295;
          if (v310 / v295 <= 3)
            break;
          v316 = HIDWORD(v387);
          v317 = -1;
LABEL_409:
          if (v308 >= v316)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v386, (uint64_t)&v388, v308 + 1, 4);
            v308 = v387;
          }
          *((_DWORD *)v386 + v308) = v317;
          v308 = v387 + 1;
          LODWORD(v387) = v387 + 1;
          if (++v309 == v295)
          {
            v307 = v369;
            if ((_DWORD)v396 != -1)
            {
              v344 = *((_DWORD *)&v398[-2] + v396);
              if (HIDWORD(v396) == -1)
              {
                v351 = *a1;
                v346 = (unint64_t)v362;
                v404 = v362;
                LODWORD(v405) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v351 + 32))(v351, 68, &v404, 1, 0, 0, 0);
                v345 = (int *)(*(_QWORD *)(v352 + 32) + 4);
                v308 = v387;
              }
              else
              {
                v345 = (int *)&v398[-2] + HIDWORD(v396);
                v346 = (unint64_t)v362;
              }
              v353 = *v345;
              v354 = (_QWORD *)*a1;
              v383 = v346;
              v384 = 0;
              LODWORD(v404) = v344;
              LODWORD(v406) = 0;
              LODWORD(v391) = v353;
              v393 = 0;
              sub_1C5547A94(v354, (uint64_t *)&v383, (int *)&v404, (int *)&v391, v386, v308);
              v349 = *(_DWORD *)(*(_QWORD *)(v355 + 32) + 4);
              v307 = v369;
              goto LABEL_438;
            }
LABEL_437:
            v347 = *a1;
            v404 = v362;
            LODWORD(v405) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v347 + 32))(v347, 68, &v404, 1, 0, 0, 0);
            v349 = *(_DWORD *)(*(_QWORD *)(v348 + 32) + 4);
LABEL_438:
            v350 = v374;
            if ((v307 & 1) != 0)
              v350 = v349;
            v374 = v350;
            if ((v307 & 1) == 0)
              v297 = v349;
            goto LABEL_442;
          }
        }
        v312 = 0;
        v313 = 1;
        do
        {
          v314 = v313;
          v315 = *((_DWORD *)&v396 + v312);
          if (v315 == v311)
            goto LABEL_408;
          if (v315 == -1)
          {
            *((_DWORD *)&v396 + v312) = v311;
LABEL_408:
            v317 = v310 + (v312 - v311) * v295;
            v316 = HIDWORD(v387);
            goto LABEL_409;
          }
          v313 = 0;
          v312 = 1;
        }
        while ((v314 & 1) != 0);
        v391 = &v393;
        v392 = 0x1000000000;
        v318 = (unsigned int *)(v378 + 4 * v295 * v296);
        v319 = v295;
        do
        {
          v321 = *v318++;
          v320 = v321;
          v322 = v321 / v295;
          if (v321 / v295 >= 4)
          {
            v328 = *a1;
            v404 = v305;
            LODWORD(v405) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v328 + 32))(v328, 68, &v404, 1, 0, 0, 0);
          }
          else
          {
            v323 = *a1;
            v383 = (unint64_t)v305;
            v384 = 0;
            v324 = *((_DWORD *)&v398[-2] + v322);
            v381 = 257;
            v382 = 0;
            v325 = sub_1C5544694(v323, &v381, (int)(v320 - v322 * v295));
            LODWORD(v404) = v324;
            LODWORD(v406) = 0;
            v407 = (void **)v325;
            v408 = v326;
            v409 = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v323 + 32))(v323, 205, &v383, 1, &v404, 2, 0);
          }
          v329 = *(_DWORD *)(*(_QWORD *)(v327 + 32) + 4);
          v330 = v392;
          if (v392 >= (unint64_t)HIDWORD(v392))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v391, (uint64_t)&v393, v392 + 1, 4);
            v330 = v392;
          }
          *((_DWORD *)v391 + v330) = v329;
          v331 = v392 + 1;
          LODWORD(v392) = v392 + 1;
          --v319;
        }
        while (v319);
        v332 = *a1;
        v383 = (unint64_t)v362;
        v384 = 0;
        v333 = (int *)v391;
        v404 = &v406;
        v405 = 0x800000000;
        if (v331 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v404, (uint64_t)&v406, v331, 24);
          v334 = v405;
          v335 = (uint64_t *)v404;
          goto LABEL_422;
        }
        if (v331)
        {
          v334 = 0;
          v335 = &v406;
LABEL_422:
          v336 = 3 * v334;
          v337 = 4 * v331;
          do
          {
            v338 = *v333++;
            v339 = &v335[v336];
            *(_DWORD *)v339 = v338;
            *((_DWORD *)v339 + 4) = 0;
            v336 += 3;
            v337 -= 4;
          }
          while (v337);
          v340 = v405;
        }
        else
        {
          v340 = 0;
          v335 = &v406;
        }
        v297 = v365;
        LODWORD(v405) = v340 + v331;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v332 + 32))(v332, 77, &v383, 1, v335);
        v342 = v341;
        v307 = v369;
        if (v404 != &v406)
          free(v404);
        v343 = v374;
        if ((v369 & 1) != 0)
          v343 = *(_DWORD *)(*(_QWORD *)(v342 + 32) + 4);
        v374 = v343;
        if ((v369 & 1) == 0)
          v297 = *(_DWORD *)(*(_QWORD *)(v342 + 32) + 4);
        if (v391 != &v393)
          free(v391);
LABEL_442:
        v306 = 0;
        LODWORD(v387) = 0;
        v296 = 1;
        if ((v307 & 1) == 0)
        {
          v356 = *a1;
          LODWORD(v404) = v361;
          LODWORD(v405) = 1;
          v391 = (void *)__PAIR64__(v297, v374);
          sub_1C5547BE0(v356, (uint64_t)&v404, (int *)&v391, 2);
          v357 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v357 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v357 = a2;
              do
                v357 = *(_QWORD *)(v357 + 8);
              while ((*(_WORD *)(v357 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v357 + 8));
          if (v386 != &v388)
            free(v386);
          if (v398[0] != v399)
            free(v398[0]);
          v194 = (uint64_t *)v400;
          v267 = &v402;
          goto LABEL_356;
        }
      }
    case 0xF1u:
    case 0xF2u:
    case 0xF3u:
    case 0xF4u:
    case 0xF5u:
    case 0xF6u:
    case 0xF7u:
    case 0xF8u:
    case 0xF9u:
    case 0xFAu:
    case 0xFBu:
    case 0xFCu:
    case 0xFDu:
      if (a3 != 1)
        return 2;
      v16 = *(_QWORD *)(a2 + 32);
      v17 = (const char *)*(unsigned int *)(v16 + 36);
      v18 = a1[2];
      if ((v17 & 0x80000000) != 0
        && (v17 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v18 + 432))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v18 + 424) + 8 * (v17 & 0x7FFFFFFF));
      }
      else
      {
        v19 = 0;
      }
      v20 = *(_DWORD *)(v16 + 4);
      if (v20 < 0 && (v20 & 0x7FFFFFFFu) < *(_DWORD *)(v18 + 432))
        v21 = *(void **)(*(_QWORD *)(v18 + 424) + 8 * (v20 & 0x7FFFFFFF));
      else
        v21 = 0;
      if (v9)
      {
        if ((v19 & 2) != 0)
          v22 = 0x800000000000000;
        else
          v22 = 0x8000000000000;
        if ((v22 & v19) != 0)
        {
          v367 = (const char *)*(unsigned int *)(v16 + 36);
          v183 = v19;
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v17);
          v19 = v183;
          v17 = v367;
        }
        v23 = (unsigned __int16)(v19 >> 3);
        if ((a4 & 2) != 0)
          v24 = 0x800000000000000;
        else
          v24 = 0x8000000000000;
        if ((v24 & a4) != 0)
        {
          v184 = v17;
          v185 = v19;
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v17);
          v19 = v185;
          v17 = v184;
        }
        if (v23 % (unsigned __int16)(a4 >> 3))
          return 2;
      }
      v375 = v20;
      v25 = dword_1C8654E50[(__int16)v13 - 241];
      v404 = &v406;
      v405 = 0xC00000000;
      v26 = 0x800000000000000;
      if ((v19 & 2) == 0)
        v26 = 0x8000000000000;
      v27 = v26 & v19;
      v371 = v19;
      if (v9)
      {
        if (v27)
        {
          v195 = v17;
          v196 = v26 & v19;
          v197 = v19;
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v17);
          LODWORD(v19) = v197;
          v27 = v196;
          v17 = v195;
        }
        v28 = (unsigned __int16)(v19 >> 3);
        v29 = 0x800000000000000;
        if ((a4 & 2) == 0)
          v29 = 0x8000000000000;
        if ((v29 & a4) != 0)
        {
          v364 = v27;
          v198 = (int)v17;
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v17);
          LODWORD(v17) = v198;
          v27 = v364;
        }
        v30 = v28 / (unsigned __int16)(a4 >> 3);
      }
      else
      {
        if (v27)
        {
          v199 = (int)v17;
          v200 = v26 & v19;
          v201 = v19;
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v17);
          LODWORD(v19) = v201;
          v27 = v200;
          LODWORD(v17) = v199;
        }
        v30 = (unsigned __int16)(v19 >> 3);
      }
      v366 = (int)v17;
      sub_1C5534298(a1, (int)v17, a4, v30, (uint64_t)&v404);
      if ((a4 & 1) != 0)
      {
        if (v21 != (void *)a4)
        {
          v14 = 2;
          goto LABEL_220;
        }
        if (v30 && (v32.i32[0] = v30, v37 = (uint8x8_t)vcnt_s8(v32), v37.i16[0] = vaddlv_u8(v37), v37.i32[0] <= 1u))
        {
          v386 = &v388;
          v387 = 0xC00000000;
          if (v30 >= 2)
          {
            do
            {
              if (v30 != 1)
              {
                v38 = 0;
                do
                {
                  v39 = *a1;
                  v400 = (void *)a4;
                  LODWORD(v401) = 0;
                  v40 = (char *)v404 + 4 * v38;
                  LODWORD(v391) = *v40;
                  v393 = 0;
                  v394 = v40[1];
                  v395 = 0;
                  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, v25, &v400, 1, &v391, 2, 0);
                  v42 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + 4);
                  if (v387 >= HIDWORD(v387))
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v386, (uint64_t)&v388, v387 + 1, 4);
                  *((_DWORD *)v386 + v387) = v42;
                  LODWORD(v387) = v387 + 1;
                  v38 += 2;
                }
                while (v38 < v30 - 1);
              }
              sub_1C48623F0((uint64_t)&v404, (uint64_t)&v386);
              LODWORD(v387) = 0;
              v30 = v405;
            }
            while (v405 > 1);
          }
          v43 = *a1;
          LODWORD(v400) = v20;
          LODWORD(v401) = 1;
          LODWORD(v391) = *(_DWORD *)v404;
          v393 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 19, &v400, 1, &v391, 1, 0);
          v44 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v44 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v44 = a2;
              do
                v44 = *(_QWORD *)(v44 + 8);
              while ((*(_WORD *)(v44 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v44 + 8));
          v45 = v386;
          if (v386 != &v388)
            goto LABEL_88;
        }
        else
        {
          v163 = *(_DWORD *)v404;
          if (v30 >= 2)
          {
            v164 = 4;
            do
            {
              v165 = *a1;
              v391 = (void *)a4;
              LODWORD(v392) = 0;
              LODWORD(v386) = v163;
              v388 = 0;
              LODWORD(v389) = *(_DWORD *)((char *)v404 + v164);
              v390 = 0;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v165 + 32))(v165, v25, &v391, 1, &v386, 2, 0);
              v163 = *(_DWORD *)(*(_QWORD *)(v166 + 32) + 4);
              v164 += 4;
            }
            while (4 * v30 != v164);
          }
          v167 = *a1;
          LODWORD(v391) = v20;
          LODWORD(v392) = 1;
          LODWORD(v386) = v163;
          v388 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v167 + 32))(v167, 19, &v391, 1, &v386, 1, 0);
          v168 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v168 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v168 = a2;
              do
                v168 = *(_QWORD *)(v168 + 8);
              while ((*(_WORD *)(v168 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v168 + 8));
        }
      }
      else
      {
        v363 = v27;
        v386 = &v388;
        v387 = 0xC00000000;
        if (v30)
        {
          v33 = 0;
          do
          {
            v34 = *a1;
            v400 = v21;
            LODWORD(v401) = 0;
            LODWORD(v391) = *(_DWORD *)((char *)v404 + v33);
            v393 = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, v13, &v400, 1, &v391, 1, 0);
            v35 = *(_DWORD *)(*(_QWORD *)(v31 + 32) + 4);
            v36 = v387;
            if (v387 >= (unint64_t)HIDWORD(v387))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v386, (uint64_t)&v388, v387 + 1, 4);
              v36 = v387;
            }
            *((_DWORD *)v386 + v36) = v35;
            LODWORD(v387) = v387 + 1;
            v33 += 4;
          }
          while (4 * v30 != v33);
        }
        v46 = v371;
        if (v363)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v31);
          v46 = v371;
        }
        v32.i32[0] = (unsigned __int16)(v46 >> 3);
        v47 = vcnt_s8(v32);
        v47.i16[0] = vaddlv_u8((uint8x8_t)v47);
        if (v47.i32[0] != 1)
          goto LABEL_78;
        v48 = 0x800000000000000;
        if ((a4 & 2) == 0)
          v48 = 0x8000000000000;
        if ((v48 & a4) != 0)
        {
          v203 = v46;
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v31);
          v46 = v203;
        }
        v47.i32[0] = (unsigned __int16)(a4 >> 3);
        v49 = (uint8x8_t)vcnt_s8(v47);
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.i32[0] == 1)
        {
          sub_1C62722AC((uint64_t)a1, a2, v366, v46, a4, v25);
        }
        else
        {
LABEL_78:
          if (v30 >= 2)
          {
            v50 = *(_DWORD *)v386;
            v51 = v30 - 1;
            v52 = 4 * v30;
            v53 = 4;
            do
            {
              v54 = *a1;
              if (4 * v51 == v53)
              {
                LODWORD(v400) = v375;
                LODWORD(v401) = 1;
                LODWORD(v391) = v50;
                v393 = 0;
                v394 = *((_DWORD *)v386 + v51);
                v395 = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, v25, &v400, 1, &v391, 2, 0);
              }
              else
              {
                v400 = v21;
                LODWORD(v401) = 0;
                LODWORD(v391) = v50;
                v393 = 0;
                v394 = *(_DWORD *)((char *)v386 + v53);
                v395 = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, v25, &v400, 1, &v391, 2, 0);
                v50 = *(_DWORD *)(*(_QWORD *)(v55 + 32) + 4);
              }
              v53 += 4;
            }
            while (v52 != v53);
          }
          v56 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v56 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v56 = a2;
              do
                v56 = *(_QWORD *)(v56 + 8);
              while ((*(_WORD *)(v56 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v56 + 8));
        }
        v45 = v386;
        if (v386 != &v388)
LABEL_88:
          free(v45);
      }
      v14 = 1;
LABEL_220:
      if (v404 != &v406)
        free(v404);
      return v14;
    default:
      return v14;
  }
}

uint64_t sub_1C553389C(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  int v76;
  uint64_t *v77;
  unsigned __int8 **v78;
  unsigned __int8 **v79;
  unsigned __int8 *v80;
  uint64_t *v81;
  _DWORD *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  int v89;
  int v90;
  __int128 v91;
  _DWORD v92[48];
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int16 **)(a2 + 16);
  v8 = *v7;
  v9 = 2;
  if (v8 <= 0x7C)
  {
    if (*v7 > 0x59u)
    {
      if (v8 != 90)
      {
        if (v8 != 96)
        {
          if (v8 != 119)
            return v9;
LABEL_27:
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
          v24 = *(uint64_t **)a1;
          v25 = *(_QWORD *)(a2 + 32);
          v9 = 1;
          v26 = a4;
          v27 = 1;
          goto LABEL_86;
        }
        if (a3)
          return v9;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
        sub_1C6271C7C(*(uint64_t **)a1, *(_QWORD *)(a2 + 32), a4, 0);
LABEL_55:
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
        return 1;
      }
LABEL_23:
      if (a3)
        return v9;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
LABEL_54:
      sub_1C6271BCC((uint64_t *)a1, *(_QWORD *)(a2 + 32), a4);
      goto LABEL_55;
    }
    switch(*v7)
    {
      case 'A':
      case 'B':
      case 'C':
        goto LABEL_85;
      case 'D':
        goto LABEL_23;
      case 'E':
        sub_1C6272500((uint64_t **)a1, a2, a4);
        return 1;
      case 'F':
      case 'G':
      case 'H':
      case 'J':
      case 'L':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
        return v9;
      case 'I':
        if (a3 != 1)
          return v9;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
        v9 = 1;
        sub_1C6271C7C(*(uint64_t **)a1, *(_QWORD *)(a2 + 32), a4, 1u);
        goto LABEL_87;
      case 'K':
      case 'S':
        goto LABEL_26;
      case 'M':
        *(_QWORD *)&v91 = v92;
        *((_QWORD *)&v91 + 1) = 0x800000000;
        v28 = *(_QWORD *)(a2 + 32);
        v29 = *((unsigned __int8 *)v7 + 4);
        v30 = *(unsigned int *)(a2 + 40);
        if ((v7[4] & 2) != 0)
        {
          if ((_DWORD)v30 == v29)
            goto LABEL_31;
          v31 = *((unsigned __int8 *)v7 + 4);
          do
          {
            v84 = *(_DWORD *)(v28 + 32 * v29);
            if ((v84 & 0x10000FF) != 0x1000000)
              break;
            v31 += (v84 & 0x2000000) == 0;
            if ((_DWORD)v30 - 1 == v29)
              break;
            ++v29;
          }
          while ((v84 & 0x2000000) == 0);
        }
        else
        {
          v31 = *((unsigned __int8 *)v7 + 4);
        }
        if (v31 != (_DWORD)v30)
        {
          v41 = 32 * v30 - 32 * v31;
          v42 = (int *)(v28 + 32 * v31 + 4);
          do
          {
            v43 = *v42;
            v42 += 8;
            LODWORD(v93) = v43;
            v95 = 0;
            v44 = sub_1C4926708((uint64_t)&v91, (unint64_t)&v93, 1);
            v45 = v91 + 24 * DWORD2(v91);
            v46 = *(_OWORD *)v44;
            *(_QWORD *)(v45 + 16) = *(_QWORD *)(v44 + 16);
            *(_OWORD *)v45 = v46;
            v32 = ++DWORD2(v91);
            v41 -= 32;
          }
          while (v41);
LABEL_58:
          v47 = 3;
          if ((a4 & 1) == 0)
            v47 = 19;
          if (v32 <= (unsigned __int16)(a4 >> 3))
            v48 = (unsigned __int16)(a4 >> 3);
          else
            v48 = v32;
          v49 = 0x800000000000000;
          if ((a4 & 2) == 0)
            v49 = 0x8000000000000;
          v50 = v49 & a4;
          v51 = a4 >> v47;
          v52 = (a4 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v51) | 2;
          v53 = a4 & 0x8000000000000000 | (8 * v51) | 1;
          if ((a4 & 2) != 0)
            v53 = v52;
          if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0 && (a4 & 4) != 0)
            v54 = v53;
          else
            v54 = a4;
          v55 = v32 - v48;
          if (v50)
            goto LABEL_73;
          while (v55)
          {
            while (1)
            {
              v56 = *(uint64_t **)a1;
              v93 = v54;
              LODWORD(v94) = 0;
              v93 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*v56 + 32))(v56, 68, &v93, 1, 0, 0, 0);
              v94 = v57;
              v95 = 1;
              v58 = sub_1C4926708((uint64_t)&v91, (unint64_t)&v93, 1);
              v59 = v91 + 24 * DWORD2(v91);
              v60 = *(_OWORD *)v58;
              *(_QWORD *)(v59 + 16) = *(_QWORD *)(v58 + 16);
              *(_OWORD *)v59 = v60;
              ++DWORD2(v91);
              ++v55;
              if (!v50)
                break;
LABEL_73:
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
              if (!v55)
                goto LABEL_74;
            }
          }
LABEL_74:
          v61 = *(uint64_t **)a1;
          LODWORD(v88) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
          v89 = 1;
          v96 = a4;
          v97 = 0;
          v93 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*v61 + 32))(v61, 77, &v96, 1, v91, DWORD2(v91), 0);
          v94 = v62;
          v95 = 1;
          sub_1C5544EB0(v61, &v88, (int *)&v93);
          v63 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v63 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v63 = a2;
              do
                v63 = *(_QWORD *)(v63 + 8);
              while ((*(_WORD *)(v63 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v63 + 8));
          v64 = (void *)v91;
          if ((_DWORD *)v91 == v92)
            return 1;
LABEL_77:
          free(v64);
          return 1;
        }
LABEL_31:
        v32 = 0;
        goto LABEL_58;
      default:
        if (v8 - 45 < 3)
          goto LABEL_85;
        return v9;
    }
  }
  if (*v7 <= 0xA4u)
  {
    if (*v7 <= 0x87u)
    {
      if (v8 != 125)
      {
        if (v8 - 130 >= 2)
          return v9;
LABEL_122:
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
        v9 = 1;
        sub_1C6271C7C(*(uint64_t **)a1, *(_QWORD *)(a2 + 32), a4, 1u);
        sub_1C6271C7C(*(uint64_t **)a1, *(_QWORD *)(a2 + 32), a4, 2u);
        v24 = *(uint64_t **)a1;
        v25 = *(_QWORD *)(a2 + 32);
        v26 = a4;
        v27 = 3;
LABEL_86:
        sub_1C6271C7C(v24, v25, v26, v27);
        sub_1C6271BCC((uint64_t *)a1, *(_QWORD *)(a2 + 32), a4);
LABEL_87:
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
        return v9;
      }
LABEL_26:
      if (a3)
        return v9;
      goto LABEL_27;
    }
    if (v8 != 136)
    {
      if (v8 - 149 >= 4 && v8 != 163)
        return v9;
      goto LABEL_85;
    }
    v18 = *(_QWORD *)(a2 + 32);
    v19 = *(_DWORD *)(v18 + 4);
    v20 = *(_DWORD *)(v18 + 36);
    v21 = *(_QWORD *)(a1 + 16);
    if (v19 < 0 && (v22 = v19 & 0x7FFFFFFF, v22 < *(_DWORD *)(v21 + 432)))
      v23 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * v22);
    else
      v23 = 0;
    if (v20 < 0 && (v20 & 0x7FFFFFFFu) < *(_DWORD *)(v21 + 432))
      v33 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * (v20 & 0x7FFFFFFF));
    else
      v33 = 0;
    if (a3 == 1)
    {
      if ((v33 & 1) == 0)
        return v9;
      v34 = 0x800000000000000;
      if ((v23 & 2) != 0)
        v35 = 0x800000000000000;
      else
        v35 = 0x8000000000000;
      v36 = (v35 & v23) != 0;
      if ((a4 & 2) == 0)
        v34 = 0x8000000000000;
      v37 = (v34 & a4) != 0;
      if (((v23 ^ a4) & 0x7FFF8) != 0 || ((v37 ^ v36) & 1) != 0)
        return v9;
      v38 = *(uint64_t **)a1;
      v93 = a4;
      LODWORD(v94) = 0;
      LODWORD(v91) = v20;
      v92[0] = 0;
      sub_1C5547894(v38, &v93, &v91);
      v40 = v39;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
      llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 32, *(_DWORD *)(*(_QWORD *)(v40 + 32) + 4));
      goto LABEL_55;
    }
    if ((v33 & 0xFFFFFFFFFFFFFFF9) != 0 && (v33 & 4) != 0)
      return v9;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
    sub_1C6271C7C(*(uint64_t **)a1, *(_QWORD *)(a2 + 32), a4, 2u);
    sub_1C6271C7C(*(uint64_t **)a1, *(_QWORD *)(a2 + 32), a4, 3u);
    goto LABEL_54;
  }
  v10 = v8 - 177;
  if (v10 > 0x23)
  {
LABEL_48:
    if (v8 != 165)
    {
      if (v8 != 166)
        return v9;
      goto LABEL_122;
    }
LABEL_85:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
    v9 = 1;
    sub_1C6271C7C(*(uint64_t **)a1, *(_QWORD *)(a2 + 32), a4, 1u);
    v24 = *(uint64_t **)a1;
    v25 = *(_QWORD *)(a2 + 32);
    v26 = a4;
    v27 = 2;
    goto LABEL_86;
  }
  if (((1 << (v8 + 79)) & 0x800000281) != 0)
    goto LABEL_26;
  if (v10 != 29)
  {
    if (((1 << (v8 + 79)) & 0x3CFC00) != 0)
      goto LABEL_85;
    goto LABEL_48;
  }
  if (!a3)
  {
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_DWORD *)(v11 + 4);
    v13 = *(_DWORD *)(v11 + 36);
    v14 = *(_DWORD *)(v11 + 68);
    v15 = *(_QWORD *)(a1 + 16);
    if (v12 < 0 && (v16 = v12 & 0x7FFFFFFF, v16 < *(_DWORD *)(v15 + 432)))
      v17 = *(_QWORD *)(*(_QWORD *)(v15 + 424) + 8 * v16);
    else
      v17 = 0;
    if (v13 < 0 && (v66 = v13 & 0x7FFFFFFF, v66 < *(_DWORD *)(v15 + 432)))
      v67 = *(_QWORD *)(*(_QWORD *)(v15 + 424) + 8 * v66);
    else
      v67 = 0;
    if (v14 < 0 && (v68 = v14 & 0x7FFFFFFF, v68 < *(_DWORD *)(v15 + 432)))
      v69 = *(_QWORD *)(*(_QWORD *)(v15 + 424) + 8 * v68);
    else
      v69 = 0;
    v70 = *(int **)(v11 + 112);
    if ((v17 & 2) != 0)
      v71 = 0x800000000000000;
    else
      v71 = 0x8000000000000;
    if ((v71 & v17) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    if ((a4 & 2) != 0)
      v72 = 0x800000000000000;
    else
      v72 = 0x8000000000000;
    if ((v72 & a4) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v9 = 2;
    if (v17 == v67 && v17 == v69)
    {
      v73 = (unsigned __int16)(v17 >> 3);
      v74 = (unsigned __int16)(a4 >> 3);
      sub_1C6271C7C(*(uint64_t **)a1, *(_QWORD *)(a2 + 32), a4, 1u);
      sub_1C6271C7C(*(uint64_t **)a1, *(_QWORD *)(a2 + 32), a4, 2u);
      *(_QWORD *)&v91 = v92;
      *((_QWORD *)&v91 + 1) = 0x1000000000;
      v75 = 0;
      if ((_DWORD)v73)
      {
        v85 = v73;
        do
        {
          v87 = *v70++;
          v86 = v87;
          if (v87 >= (int)v73)
            v86 += v74 - v73;
          if (v75 >= HIDWORD(v91))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, (uint64_t)v92, v75 + 1, 4);
            v75 = DWORD2(v91);
          }
          *(_DWORD *)(v91 + 4 * v75) = v86;
          v75 = ++DWORD2(v91);
          --v85;
        }
        while (v85);
      }
      v76 = v74 - v73;
      if (v74 != (_DWORD)v73)
      {
        do
        {
          if (v75 >= HIDWORD(v91))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, (uint64_t)v92, v75 + 1, 4);
            v75 = DWORD2(v91);
          }
          *(_DWORD *)(v91 + 4 * v75) = -1;
          v75 = ++DWORD2(v91);
          --v76;
        }
        while (v76);
      }
      sub_1C6271BCC((uint64_t *)a1, *(_QWORD *)(a2 + 32), a4);
      v77 = *(uint64_t **)a1;
      v77[5] = *(_QWORD *)(a2 + 24);
      v77[6] = a2;
      v78 = (unsigned __int8 **)(a2 + 56);
      v79 = (unsigned __int8 **)(v77 + 4);
      if ((uint64_t *)(a2 + 56) != v77 + 4)
      {
        if (*v79)
          llvm::MetadataTracking::untrack((uint64_t)(v77 + 4), *v79);
        v80 = *v78;
        *v79 = *v78;
        if (v80)
          llvm::MetadataTracking::track((uint64_t)v79, v80, 2);
      }
      v81 = *(uint64_t **)a1;
      v82 = *(_DWORD **)(a2 + 32);
      LODWORD(v96) = v82[1];
      v97 = 1;
      LODWORD(v93) = v82[9];
      v95 = 0;
      LODWORD(v88) = v82[17];
      v90 = 0;
      sub_1C5547A94(v81, (uint64_t *)&v96, (int *)&v93, (int *)&v88, (const void *)v91, DWORD2(v91));
      v83 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v83 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v83 = a2;
          do
            v83 = *(_QWORD *)(v83 + 8);
          while ((*(_WORD *)(v83 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v83 + 8));
      v64 = (void *)v91;
      if ((_DWORD *)v91 == v92)
        return 1;
      goto LABEL_77;
    }
  }
  return v9;
}

uint64_t sub_1C5534298(uint64_t *a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v8;
  int GenericVirtualRegister;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  _DWORD v16[6];

  if (a4 <= 0)
  {
    v12 = *(_DWORD *)(a5 + 8);
  }
  else
  {
    v8 = a4;
    do
    {
      GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], a3, "", 0);
      v11 = *(unsigned int *)(a5 + 8);
      if (v11 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v11 + 1, 4);
        v11 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v11) = GenericVirtualRegister;
      v12 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v12;
      --v8;
    }
    while (v8);
  }
  v13 = *a1;
  v14 = *(char **)a5;
  v16[0] = a2;
  v16[4] = 0;
  return sub_1C5547540(v13, v14, v12, (uint64_t)v16);
}

void sub_1C5534378(uint64_t *a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  const char *v12;
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int GenericVirtualRegister;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  _DWORD v52[8];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v48 = a4;
  v49 = a3;
  v13 = sub_1C4825F50(&v49);
  if ((_DWORD)v12 == 1)
  v15 = sub_1C4825F50((unint64_t *)&v48);
  if ((_DWORD)v14 == 1)
  v16 = v13 / v15;
  if (v13 == v13 / v15 * v15)
  {
    if (v15 <= v13)
    {
      if (v16 <= 1)
        v32 = 1;
      else
        v32 = v13 / v15;
      do
      {
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v48, "", 0);
        v34 = *(unsigned int *)(a6 + 8);
        if (v34 >= *(unsigned int *)(a6 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v34 + 1, 4);
          v34 = *(unsigned int *)(a6 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a6 + 4 * v34) = GenericVirtualRegister;
        v17 = *(_DWORD *)(a6 + 8) + 1;
        *(_DWORD *)(a6 + 8) = v17;
        --v32;
      }
      while (v32);
    }
    else
    {
      v17 = *(_DWORD *)(a6 + 8);
    }
    v18 = *a1;
    v19 = *(char **)a6;
    LODWORD(v50) = a2;
    v52[0] = 0;
    sub_1C5547540(v18, v19, v17, (uint64_t)&v50);
  }
  else
  {
    v20 = v48;
    if ((v48 & 0xFFFFFFFFFFFFFFF9) != 0 && (v48 & 4) != 0)
    {
      v50 = v52;
      v51 = 0x800000000;
      v21 = 0x800000000000000;
      if ((v48 & 2) == 0)
        v21 = 0x8000000000000;
      if ((v21 & v48) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v14);
        v20 = v48;
      }
      sub_1C55347B8(a1, (const char *)a2, (unsigned __int16)(v20 >> 3), (uint64_t)&v50);
      if ((_DWORD)v51 == 1)
      {
        v22 = 0;
      }
      else
      {
        v39 = 0;
        v40 = *(_DWORD *)(a6 + 8);
        v41 = 1;
        do
        {
          v42 = *((_DWORD *)v50 + v39);
          if (v40 >= *(_DWORD *)(a6 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v40 + 1, 4);
            v40 = *(_DWORD *)(a6 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a6 + 4 * v40) = v42;
          v40 = *(_DWORD *)(a6 + 8) + 1;
          *(_DWORD *)(a6 + 8) = v40;
          v39 = v41;
          v22 = v51 - 1;
        }
        while (v22 > v41++);
      }
      v23 = *((_DWORD *)v50 + v22);
      v24 = *(unsigned int *)(a7 + 8);
      if (v24 >= *(_DWORD *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a7, a7 + 16, v24 + 1, 4);
        LODWORD(v24) = *(_DWORD *)(a7 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a7 + 4 * v24) = v23;
      ++*(_DWORD *)(a7 + 8);
      v25 = **(_DWORD **)a7;
      if (v25 < 0 && (v26 = a1[2], v27 = v25 & 0x7FFFFFFF, v27 < *(_DWORD *)(v26 + 432)))
        v28 = *(_QWORD *)(*(_QWORD *)(v26 + 424) + 8 * v27);
      else
        v28 = 0;
      *a5 = v28;
      if (v50 != v52)
        free(v50);
    }
    else
    {
      v44 = a7;
      v45 = v16 * v15;
      *a5 = (8 * (v13 % v15)) | 1;
      if (v15 <= v13)
      {
        v35 = 0;
        do
        {
          v36 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v48, "", 0);
          v37 = *(unsigned int *)(a6 + 8);
          if (v37 >= *(unsigned int *)(a6 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v37 + 1, 4);
            v37 = *(unsigned int *)(a6 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a6 + 4 * v37) = v36;
          ++*(_DWORD *)(a6 + 8);
          v38 = (uint64_t *)*a1;
          LODWORD(v46) = v36;
          v47 = 1;
          LODWORD(v50) = a2;
          v52[0] = 0;
          sub_1C5546FE4(v38, &v46, (int *)&v50, v35);
          v35 += v15;
          --v16;
        }
        while (v16);
      }
      if (v13 > v45)
      {
        v29 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], *a5, "", 0);
        v30 = *(unsigned int *)(v44 + 8);
        if (v30 >= *(_DWORD *)(v44 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v44, v44 + 16, v30 + 1, 4);
          LODWORD(v30) = *(_DWORD *)(v44 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v44 + 4 * v30) = v29;
        ++*(_DWORD *)(v44 + 8);
        v31 = (uint64_t *)*a1;
        LODWORD(v46) = v29;
        v47 = 1;
        LODWORD(v50) = a2;
        v52[0] = 0;
        sub_1C5546FE4(v31, &v46, (int *)&v50, v45);
      }
    }
  }
}

void sub_1C55347B8(uint64_t *a1, const char *a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  void *v33[2];
  _QWORD v34[5];

  v6 = (int)a2;
  v34[4] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0
    && (v8 = a1[2], (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v8 + 432)))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 424) + 8 * (a2 & 0x7FFFFFFF));
    if ((v9 & 2) != 0)
    {
      v10 = 35;
      v11 = 19;
      if ((v9 & 4) == 0)
        v10 = 19;
      v12 = v9 >> v10;
      if ((v9 & 4) == 0)
        v11 = 3;
      if ((v9 & 1) != 0)
        v11 = 3;
      v13 = (8 * (unsigned __int16)(v9 >> v11)) & 0xFFFFF8000007FFFFLL | ((v12 & 0xFFFFFF) << 19) | 2;
      v14 = 0x800000000000000;
      goto LABEL_15;
    }
  }
  else
  {
    v9 = 0;
  }
  v15 = 3;
  if ((v9 & 1) == 0)
    v15 = 19;
  v13 = v9 & 0x8000000000000000 | (8 * (v9 >> v15)) | 1;
  v14 = 0x8000000000000;
LABEL_15:
  v16 = v13;
  if (a3 != 1)
    v16 = sub_1C4953AD0(a3, v13);
  v17 = v6;
  if ((v9 & v14) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
  v18 = (unsigned __int16)(v9 >> 3);
  v19 = v18 / a3;
  v20 = v18 % a3;
  if ((_DWORD)v20)
  {
    v33[0] = v34;
    v33[1] = (void *)0x800000000;
    sub_1C5534298(a1, v17, v13, v18, (uint64_t)v33);
    if (v18 >= a3)
    {
      LODWORD(v21) = 0;
      if (v19 <= 1)
        v19 = 1;
      do
      {
        v22 = *a1;
        v31 = v16;
        v32 = 0;
        sub_1C5544D6C(v22, (uint64_t)&v31, (int *)v33[0] + v21, a3);
        v24 = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 4);
        v25 = *(unsigned int *)(a4 + 8);
        if (v25 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v25 + 1, 4);
          v25 = *(unsigned int *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v25) = v24;
        ++*(_DWORD *)(a4 + 8);
        v21 = v21 + a3;
        --v19;
      }
      while (v19);
    }
    else
    {
      v21 = 0;
    }
    if ((_DWORD)v20 == 1)
    {
      v26 = *((_DWORD *)v33[0] + v21);
    }
    else
    {
      v27 = sub_1C4953AD0(v20, v13);
      v28 = *a1;
      v31 = v27;
      v32 = 0;
      sub_1C5544D6C(v28, (uint64_t)&v31, (int *)v33[0] + v21, v20);
      v26 = *(_DWORD *)(*(_QWORD *)(v29 + 32) + 4);
    }
    v30 = *(unsigned int *)(a4 + 8);
    if (v30 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v30 + 1, 4);
      LODWORD(v30) = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v30) = v26;
    ++*(_DWORD *)(a4 + 8);
    if (v33[0] != v34)
      free(v33[0]);
  }
  else
  {
    sub_1C5534298(a1, v17, v16, v18 / a3, a4);
  }
}

void sub_1C5534AB8(uint64_t *a1, int a2, unint64_t a3, unint64_t a4, int *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int *v11;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v28;
  void *v29;
  int *v30;
  uint64_t v31;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  _QWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  int *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[26];

  v11 = a5;
  v53[24] = *MEMORY[0x1E0C80C00];
  v15 = (a3 >> 2) & 1;
  if ((a3 & 0xFFFFFFFFFFFFFFF9) == 0)
    LODWORD(v15) = 0;
  if ((a7 & 0xFFFFFFFFFFFFFFF9) == 0)
  {
    if ((v15 & 1) == 0)
    {
      v38 = *a1;
      LODWORD(v51) = a2;
      LODWORD(v52) = 1;
      sub_1C5544D6C(v38, (uint64_t)&v51, a5, a6);
      return;
    }
    v25 = *a1;
    if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0 && (a4 & 4) != 0)
    {
      LODWORD(v51) = a2;
      LODWORD(v52) = 1;
      sub_1C5547BE0(v25, (uint64_t)&v51, a5, a6);
      return;
    }
    LODWORD(v47) = a2;
    LODWORD(v48) = 1;
    v39 = 4 * a6;
    v51 = v53;
    v52 = 0x800000000;
    if ((unint64_t)(4 * a6) >= 0x21)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)v53, (4 * a6) >> 2, 24);
      v40 = v52;
      v42 = v51;
      v41 = v52;
      if (!a6)
        goto LABEL_49;
    }
    else
    {
      v40 = 0;
      v41 = 0;
      v42 = v53;
      if (!a6)
        goto LABEL_49;
    }
    v43 = &v42[3 * v40];
    v44 = 4 * a6;
    do
    {
      v45 = *v11++;
      *v43 = v45;
      v43[4] = 0;
      v43 += 6;
      v44 -= 4;
    }
    while (v44);
    v41 = v52;
LABEL_49:
    LODWORD(v52) = v41 + (v39 >> 2);
    (*(void (**)(uint64_t, uint64_t, int **, uint64_t, _QWORD *))(*(_QWORD *)v25 + 32))(v25, 77, &v47, 1, v42);
    v36 = v51;
    if (v51 == v53)
      return;
    goto LABEL_42;
  }
  v16 = a9;
  if (!(_DWORD)v15)
  {
    v51 = v53;
    v52 = 0xC00000000;
    v28 = sub_1C554F3C8(a3, a7);
    v29 = (void *)sub_1C554F3C8(v28, a4);
    v47 = v11;
    v48 = a9;
    v30 = &v11[a6];
    v31 = a9 + 4 * a10;
    v49 = v30;
    v50 = v31;
    while (v11 != v30 || v16 != v31 || v49 != v30 || v50 != v31)
    {
      v33 = 0;
      do
      {
        v34 = (int *)(*(uint64_t (**)(int **))((char *)&off_1E816E908 + v33))(&v47);
        v33 += 16;
      }
      while (!v34);
      sub_1C5535000((uint64_t)a1, (uint64_t)&v51, (uint64_t)v29, *v34);
      v35 = 0;
      do
      {
        if (((*(uint64_t (**)(int **))((char *)&off_1E816E8E8 + v35))(&v47) & 1) != 0)
          break;
        v19 = v35 == 16;
        v35 += 16;
      }
      while (!v19);
      v11 = v47;
      v16 = v48;
    }
    v37 = (void *)sub_1C5535100(a1, a3, a7, v29, (uint64_t)&v51, 118);
    sub_1C553555C(a1, a2, v37, (int *)v51, v52);
    v36 = v51;
    if (v51 == v53)
      return;
LABEL_42:
    free(v36);
    return;
  }
  v52 = 0x800000000;
  v47 = a5;
  v48 = a9;
  v17 = &a5[a6];
  v18 = a9 + 4 * a10;
  v49 = v17;
  v50 = v18;
  v51 = v53;
  while (1)
  {
    if (v11 == v17 && v16 == v18)
    {
      v19 = v49 == v17 && v50 == v18;
      if (v19)
        break;
    }
    v20 = 0;
    do
    {
      v21 = (int *)(*(uint64_t (**)(int **))((char *)&off_1E816E908 + v20))(&v47);
      v20 += 16;
    }
    while (!v21);
    v22 = *v21;
    v23 = v52;
    if (v52 >= (unint64_t)HIDWORD(v52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)v53, v52 + 1, 4);
      v23 = v52;
    }
    v24 = 0;
    *((_DWORD *)v51 + v23) = v22;
    LODWORD(v52) = v52 + 1;
    do
    {
      if (((*(uint64_t (**)(int **))((char *)&off_1E816E8E8 + v24))(&v47) & 1) != 0)
        break;
      v19 = v24 == 16;
      v24 += 16;
    }
    while (!v19);
    v11 = v47;
    v16 = v48;
  }
  sub_1C5534E9C(a1, a2, (uint64_t)v51, v52);
  v36 = v51;
  if (v51 != v53)
    goto LABEL_42;
}

void sub_1C5534E9C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  _DWORD v17[4];
  void *v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x800000000;
  v7 = a4 - 1;
  if (a4 != 1)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      sub_1C55357B0(a1, (char *)&v18, *(_DWORD *)(a3 + 4 * v8));
      v8 = v9;
    }
    while (v7 > v9++);
  }
  v11 = *(_DWORD *)(a3 + 4 * v7);
  if (v11 < 0
    && (v12 = a1[2], (v11 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v12 + 432))
    && (*(_QWORD *)(*(_QWORD *)(v12 + 424) + 8 * (v11 & 0x7FFFFFFF)) & 1) != 0)
  {
    v15 = v19;
    if (v19 >= HIDWORD(v19))
    {
      v16 = *(_DWORD *)(a3 + 4 * v7);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v20, v19 + 1, 4);
      v11 = v16;
      v15 = v19;
    }
    *((_DWORD *)v18 + v15) = v11;
    v13 = v19 + 1;
    LODWORD(v19) = v19 + 1;
  }
  else
  {
    sub_1C55357B0(a1, (char *)&v18, v11);
    v13 = v19;
  }
  v14 = *a1;
  v17[0] = a2;
  v17[2] = 1;
  sub_1C5544D6C(v14, (uint64_t)v17, (int *)v18, v13);
  if (v18 != v20)
    free(v18);
}

void sub_1C5535000(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  int v17[6];

  if (a4 < 0 && (v6 = *(_QWORD *)(a1 + 16), (a4 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v6 + 432)))
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * (a4 & 0x7FFFFFFF));
  else
    v7 = 0;
  if (v7 == a3)
  {
    v8 = *(unsigned int *)(a2 + 8);
    if (v8 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v8 + 1, 4);
      LODWORD(v8) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v8) = a4;
    ++*(_DWORD *)(a2 + 8);
  }
  else
  {
    v9 = *(uint64_t **)a1;
    v17[0] = a4;
    v17[4] = 0;
    sub_1C5544C30(v9, a3, v17);
    v11 = v10;
    v12 = *(unsigned int *)(a2 + 8);
    v13 = (*(_DWORD *)(v10 + 40) - 1);
    sub_1C4A90934(a2, v12 + (int)v13);
    if ((_DWORD)v13)
    {
      v14 = (_DWORD *)(*(_QWORD *)a2 + 4 * (int)v12);
      v15 = (int *)(*(_QWORD *)(v11 + 32) + 4);
      do
      {
        v16 = *v15;
        v15 += 8;
        *v14++ = v16;
        --v13;
      }
      while (v13);
    }
  }
}

uint64_t sub_1C5535100(uint64_t *a1, unint64_t a2, unint64_t a3, void *a4, uint64_t a5, int a6)
{
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[16];
  void *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v52 = a4;
  v53 = a3;
  v54 = sub_1C554EF4C(a2, a3);
  v9 = sub_1C4825F50((unint64_t *)&v54);
  if ((_DWORD)v8 == 1)
  v10 = sub_1C4825F50(&v53);
  if ((_DWORD)v11 == 1)
  {
    v48 = v10;
    v10 = v48;
  }
  v12 = v9 / v10;
  v14 = sub_1C4825F50(&v53);
  if ((_DWORD)v13 == 1)
  v15 = sub_1C4825F50((unint64_t *)&v52);
  if ((_DWORD)v16 == 1)
  {
    v49 = v15;
    v15 = v49;
  }
  v17 = v14 / v15;
  v18 = *(int *)(a5 + 8);
  if ((int)(v14 / v15 * v12) <= (int)v18)
  {
    v19 = a1;
    v22 = 0;
  }
  else
  {
    if (a6 == 118)
    {
      v19 = a1;
      v23 = *a1;
      v58 = v52;
      LODWORD(v59) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 68, &v58, 1, 0, 0, 0);
    }
    else if (a6 == 126)
    {
      v19 = a1;
      v20 = *a1;
      v58 = v52;
      LODWORD(v59) = 0;
      sub_1C5544694(v20, (unint64_t *)&v58, 0);
    }
    else
    {
      v24 = *a1;
      v58 = (void *)513;
      LODWORD(v59) = 0;
      v25 = sub_1C4825F50((unint64_t *)&v52);
      if ((_DWORD)v26 == 1)
      {
        v50 = v25;
        v25 = v50;
      }
      v27 = sub_1C5544694(v24, (unint64_t *)&v58, v25 - 1);
      v19 = a1;
      v28 = *a1;
      v29 = *(_DWORD *)(*(_QWORD *)a5 + 4 * *(unsigned int *)(a5 + 8) - 4);
      v55 = v52;
      LODWORD(v56) = 0;
      LODWORD(v58) = v29;
      v60 = 0;
      v61 = v27;
      v62 = v30;
      v63 = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 129, &v55, 1, &v58, 2, 0);
    }
    v22 = *(_DWORD *)(*(_QWORD *)(v21 + 32) + 4);
  }
  v58 = &v60;
  v59 = 0x400000000;
  sub_1C4893E04((char *)&v58, (int)v12, 0);
  v55 = v57;
  v56 = 0x400000000;
  sub_1C4893E04((char *)&v55, (int)v17, 0);
  if ((_DWORD)v12)
  {
    v31 = 0;
    v32 = 0;
    do
    {
      if ((_DWORD)v17)
      {
        v33 = 0;
        v34 = v31 * (int)v17;
        v35 = v55;
        v36 = *(_QWORD *)a5;
        v37 = 1;
        v38 = v17;
        do
        {
          v39 = v22;
          if (v33 + v34 < v18)
          {
            v37 = 0;
            v39 = *(_DWORD *)(v36 + 4 * (v33 + v34));
          }
          *v35++ = v39;
          ++v33;
          --v38;
        }
        while (v38);
        if ((v37 & 1) == 0)
          goto LABEL_35;
      }
      else
      {
        v37 = 1;
      }
      if (!v32)
      {
        if (a6 == 126)
        {
          v42 = *v19;
          v64 = v53;
          v65 = 0;
          sub_1C5544694(v42, &v64, 0);
        }
        else
        {
          if (a6 != 118)
            goto LABEL_37;
          v40 = *v19;
          v64 = v53;
          v65 = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v40 + 32))(v40, 68, &v64, 1, 0, 0, 0);
        }
        v32 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + 4);
      }
LABEL_35:
      if (!v32)
      {
LABEL_37:
        if ((_DWORD)v17 == 1)
        {
          v43 = v58;
          v44 = *(_DWORD *)v55;
        }
        else
        {
          v45 = *v19;
          v64 = v53;
          v65 = 0;
          sub_1C5544D6C(v45, (uint64_t)&v64, (int *)v55, v56);
          v44 = *(_DWORD *)(*(_QWORD *)(v46 + 32) + 4);
          v43 = v58;
        }
        v43[v31] = v44;
        if ((v37 & 1) != 0)
          v32 = v43[v31];
        else
          v32 = 0;
        goto LABEL_43;
      }
      *((_DWORD *)v58 + v31) = v32;
LABEL_43:
      ++v31;
    }
    while (v31 != v12);
  }
  sub_1C48621E4(a5, (uint64_t)&v58);
  if (v55 != v57)
    free(v55);
  if (v58 != &v60)
    free(v58);
  return v54;
}

void sub_1C553555C(uint64_t *a1, int a2, void *a3, int *a4, uint64_t a5)
{
  char v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  int GenericVirtualRegister;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  _DWORD v37[8];
  uint64_t v38;

  v7 = (char)a3;
  v38 = *MEMORY[0x1E0C80C00];
  v34 = (unint64_t)a3;
  if (a2 < 0 && (v10 = a1[2], (a2 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v10 + 432)))
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 424) + 8 * (a2 & 0x7FFFFFFF));
  else
    v11 = 0;
  v33 = v11;
  v12 = *a1;
  if ((void *)v11 == a3)
  {
    LODWORD(v35) = a2;
    LODWORD(v36) = 1;
    sub_1C5544D6C(v12, (uint64_t)&v35, a4, a5);
  }
  else
  {
    v35 = a3;
    LODWORD(v36) = 0;
    v13 = (void *)sub_1C5544D6C(v12, (uint64_t)&v35, a4, a5);
    if ((v11 & 1) != 0 && (v7 & 1) != 0)
    {
      v15 = *a1;
      LODWORD(v30) = a2;
      LODWORD(v31) = 1;
      v35 = v13;
      v36 = v14;
      v37[0] = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 119, &v30, 1, &v35, 1, 0);
    }
    else
    {
      v17 = sub_1C4825F50(&v34);
      if ((_DWORD)v16 == 1)
      v18 = sub_1C4825F50((unint64_t *)&v33);
      if ((_DWORD)v19 == 1)
      {
        v27 = v18;
        v18 = v27;
      }
      v20 = v17 / v18;
      v35 = v37;
      v36 = 0x800000000;
      sub_1C4893E04((char *)&v35, (v17 / v18), 0);
      v21 = (char *)v35;
      *(_DWORD *)v35 = a2;
      if ((_DWORD)v20 != 1)
      {
        v22 = 1;
        do
        {
          GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v33, "", 0);
          v21 = (char *)v35;
          *((_DWORD *)v35 + v22++) = GenericVirtualRegister;
        }
        while ((_DWORD)v20 != (_DWORD)v22);
      }
      v24 = *a1;
      v25 = v36;
      v28 = v34;
      v29 = 0;
      v30 = sub_1C5544D6C(v24, (uint64_t)&v28, a4, a5);
      v31 = v26;
      v32 = 1;
      sub_1C5547540(v24, v21, v25, (uint64_t)&v30);
      if (v35 != v37)
        free(v35);
    }
  }
}

void sub_1C55357B0(uint64_t *a1, char *a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__src;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  if (a3 < 0 && (v5 = a1[2], (a3 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v5 + 432)))
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * (a3 & 0x7FFFFFFF));
  else
    v6 = 0;
  __src = v16;
  v15 = 0x800000000;
  if ((v6 & 0xFFFFFFFFFFFFFFF9) != 0 && (v6 & 4) != 0)
  {
    v8 = 3;
    if ((v6 & 1) == 0)
      v8 = 19;
    v9 = v6 >> v8;
    v10 = v6 & 0x8000000000000000 | (8 * v9) | 1;
    v11 = (v6 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v9) | 2;
    v12 = 0x800000000000000;
    if ((v6 & 2) != 0)
    {
      v13 = v11;
    }
    else
    {
      v12 = 0x8000000000000;
      v13 = v10;
    }
  }
  else
  {
    v12 = 0x800000000000000;
    if ((v6 & 2) == 0)
      v12 = 0x8000000000000;
    v13 = v6;
  }
  if ((v12 & v6) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
  sub_1C5534298(a1, a3, v13, (unsigned __int16)(v6 >> 3), (uint64_t)&__src);
  sub_1C4860A74((unsigned int *)a2, __src, (_BYTE *)__src + 4 * v15);
  if (__src != v16)
    free(__src);
}

unint64_t sub_1C5535914(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;

  if (a5 < 0 && (v8 = *(_QWORD *)(a1 + 16), (a5 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v8 + 432)))
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 424) + 8 * (a5 & 0x7FFFFFFF));
  else
    v9 = 0;
  v11 = sub_1C554F3C8(v9, a4);
  v12 = sub_1C554F3C8(v11, a3);
  sub_1C5535000(a1, a2, v12, a5);
  return v12;
}

uint64_t sub_1C5535998(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43[8];
  void *v44;
  _BYTE v45[56];
  void *v46;
  _BYTE v47[16];
  void *v48;
  _BYTE v49[24];
  char *v50;
  uint64_t v51;
  _QWORD v52[59];

  v5 = a2;
  v6 = result;
  v52[57] = *MEMORY[0x1E0C80C00];
  if (**(unsigned __int16 **)(result + 16) > 0xD1u)
    __asm { BR              X10 }
  switch(**(_WORD **)(result + 16))
  {
    case 0xA3:
      HIDWORD(v8) = a3;
      LODWORD(v8) = a3 - 32;
      v7 = v8 >> 4;
      v9 = &unk_1C8654E88;
      goto LABEL_32;
    case 0xA4:
      HIDWORD(v20) = a3;
      LODWORD(v20) = a3 - 32;
      v7 = v20 >> 4;
      v9 = &unk_1C8654EC0;
      goto LABEL_32;
    case 0xA5:
      HIDWORD(v15) = a3;
      LODWORD(v15) = a3 - 32;
      v7 = v15 >> 4;
      v9 = &unk_1C8654EF8;
      goto LABEL_32;
    case 0xA6:
      HIDWORD(v16) = a3;
      LODWORD(v16) = a3 - 32;
      v7 = v16 >> 4;
      v9 = &unk_1C8655048;
      goto LABEL_32;
    case 0xA7:
    case 0xAB:
    case 0xB1:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
      __break(1u);
      return result;
    case 0xA8:
      HIDWORD(v21) = a3;
      LODWORD(v21) = a3 - 32;
      v7 = v21 >> 4;
      v9 = &unk_1C8654F30;
      goto LABEL_32;
    case 0xA9:
      HIDWORD(v17) = a3;
      LODWORD(v17) = a3 - 32;
      v7 = v17 >> 4;
      v9 = &unk_1C8654FD8;
      goto LABEL_32;
    case 0xAA:
      HIDWORD(v22) = a3;
      LODWORD(v22) = a3 - 32;
      v7 = v22 >> 4;
      v9 = &unk_1C8655010;
      goto LABEL_32;
    case 0xAC:
      HIDWORD(v18) = a3;
      LODWORD(v18) = a3 - 32;
      v7 = v18 >> 4;
      v9 = &unk_1C8654F68;
      goto LABEL_32;
    case 0xAD:
      HIDWORD(v23) = a3;
      LODWORD(v23) = a3 - 32;
      v7 = v23 >> 4;
      v9 = &unk_1C8654FA0;
      goto LABEL_32;
    case 0xAE:
      HIDWORD(v13) = a3;
      LODWORD(v13) = a3 - 32;
      v7 = v13 >> 4;
      v9 = &unk_1C8655128;
      goto LABEL_32;
    case 0xAF:
      HIDWORD(v24) = a3;
      LODWORD(v24) = a3 - 32;
      v7 = v24 >> 4;
      v9 = &unk_1C8655160;
      goto LABEL_32;
    case 0xB0:
      HIDWORD(v11) = a3;
      LODWORD(v11) = a3 - 32;
      v7 = v11 >> 4;
      v9 = &unk_1C86550F0;
      goto LABEL_32;
    case 0xBB:
      HIDWORD(v14) = a3;
      LODWORD(v14) = a3 - 32;
      v7 = v14 >> 4;
      v9 = &unk_1C8655208;
      goto LABEL_32;
    case 0xBC:
      HIDWORD(v19) = a3;
      LODWORD(v19) = a3 - 32;
      v7 = v19 >> 4;
      v9 = &unk_1C8655240;
LABEL_32:
      v10 = v9[v7];
      break;
    default:
      switch(**(_WORD **)(result + 16))
      {
        case ';':
          if (a3 == 32)
          {
            v10 = 23;
          }
          else if (a3 == 128)
          {
            v10 = 25;
          }
          else
          {
            v10 = 24;
          }
          break;
        case '<':
          if (a3 == 32)
          {
            v10 = 29;
          }
          else if (a3 == 128)
          {
            v10 = 31;
          }
          else
          {
            v10 = 30;
          }
          break;
        case '=':
          if (a3 == 32)
          {
            v10 = 35;
          }
          else if (a3 == 128)
          {
            v10 = 37;
          }
          else
          {
            v10 = 36;
          }
          break;
        case '>':
          if (a3 == 32)
          {
            v10 = 41;
          }
          else if (a3 == 128)
          {
            v10 = 43;
          }
          else
          {
            v10 = 42;
          }
          break;
        default:
          HIDWORD(v12) = a3;
          LODWORD(v12) = a3 - 32;
          v7 = v12 >> 4;
          v9 = &unk_1C8655320;
          goto LABEL_32;
      }
      break;
  }
  v50 = (char *)v52;
  v51 = 0x300000000;
  v25 = *(_QWORD *)(result + 32);
  v26 = *(unsigned int *)(result + 40);
  if ((_DWORD)v26 != 1)
  {
    v40 = v10;
    v41 = a2;
    v27 = 32 * v26 - 32;
    v28 = (int *)(v25 + 36);
    do
    {
      v29 = *v28;
      v28 += 8;
      v42 = v29;
      sub_1C4860878((uint64_t)v43, &v42, 1, a4, 0, 0, 0, 1, 0);
      v30 = sub_1C4861E4C((uint64_t)&v50, (unint64_t)v43, 1);
      sub_1C54F552C((uint64_t)&v50[152 * v51], v30);
      LODWORD(v51) = v51 + 1;
      if (v48 != v49)
        free(v48);
      if (v46 != v47)
        free(v46);
      if (v44 != v45)
        free(v44);
      v27 -= 32;
    }
    while (v27);
    v25 = *(_QWORD *)(v6 + 32);
    v10 = v40;
    v5 = v41;
  }
  v42 = *(_DWORD *)(v25 + 4);
  sub_1C4860878((uint64_t)v43, &v42, 1, a4, 0, 0, 0, 1, 0);
  v31 = (uint64_t)v50;
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 16));
  v33 = sub_1C6271718(v5, *(_QWORD *)(v32 + 8 * v10 + 174048), (uint64_t)v43, v31);
  if (v48 != v49)
    free(v48);
  if (v46 != v47)
    free(v46);
  if (v44 != v45)
    free(v44);
  v34 = v50;
  if ((_DWORD)v51)
  {
    v35 = 152 * v51;
    do
    {
      v36 = &v34[v35];
      v37 = *(char **)&v34[v35 - 40];
      if (&v34[v35 - 24] != v37)
        free(v37);
      v38 = (char *)*((_QWORD *)v36 - 9);
      if (v36 - 56 != v38)
        free(v38);
      v39 = *(char **)&v34[v35 - 144];
      if (&v34[v35 - 128] != v39)
        free(v39);
      v35 -= 152;
    }
    while (v35);
    v34 = v50;
  }
  if (v34 != (char *)v52)
    free(v34);
  return v33;
}

uint64_t sub_1C5535F64(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  const char *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;

  v8 = a2;
  if ((a2 & 1) == 0)
    return 0;
  v5 = sub_1C4825F50(&v8);
  if ((_DWORD)v4 == 1)
  {
    v7 = v5;
    v5 = v7;
  }
  result = 0;
  *((_QWORD *)&v6 + 1) = v5;
  *(_QWORD *)&v6 = v5 - 16;
  switch((unint64_t)(v6 >> 4))
  {
    case 0uLL:
      result = *a1 + 1624;
      break;
    case 1uLL:
      result = *a1 + 1672;
      break;
    case 3uLL:
      result = *a1 + 1696;
      break;
    case 4uLL:
      result = *a1 + 1768;
      break;
    case 7uLL:
      result = *a1 + 1792;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1C5536028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  BOOL v6;

  v5 = **(unsigned __int16 **)(a1 + 16);
  llvm::MVT::getVT(a3, 0, a3);
  llvm::MVT::getVT(a4, 0, v6);
  __asm { BR              X10 }
}

uint64_t sub_1C55360A4(char a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int FPEXT;
  uint64_t v67;
  uint64_t v68;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;

  FPEXT = llvm::RTLIB::getFPEXT(a1, 0, v65);
  v71 = *(_DWORD *)(*(_QWORD *)(v63 + 32) + 4);
  sub_1C4860878((uint64_t)&v79, &v71, 1, v64, 0, 0, 0, 1, 0);
  v70 = *(_DWORD *)(*(_QWORD *)(v63 + 32) + 36);
  sub_1C4860878((uint64_t)&v72, &v70, 1, v62, 0, 0, 0, 1, 0);
  v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v61 + 8) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v61 + 8) + 16));
  v68 = sub_1C6271718(v61, *(_QWORD *)(v67 + 8 * FPEXT + 174048), (uint64_t)&v79, (uint64_t)&v72);
  if (v77 != &v78)
    free(v77);
  if (v75 != &v76)
    free(v75);
  if (v73 != &v74)
    free(v73);
  if (v84 != &v85)
    free(v84);
  if (v82 != &v83)
    free(v82);
  if (v80 != &v81)
    free(v80);
  return v68;
}

uint64_t sub_1C55362C4(uint64_t *a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  const char *v30;
  unsigned int v31;
  const char *v32;
  int v33;
  int v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  const char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  int v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  BOOL v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE v68[32];
  int *v69;
  uint64_t v70;
  _QWORD v71[6];

  v71[4] = *MEMORY[0x1E0C80C00];
  v65 = a4;
  if (a3)
    return 2;
  v6 = *(_QWORD *)(a2 + 48);
  if ((v6 & 7) != 0)
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v7;
  }
  if ((*(_WORD *)(v7 + 36) & 0xF00) != 0)
    return 2;
  v8 = **(unsigned __int16 **)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 0x80000000) != 0 && (v11 = a1[2], (v10 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v11 + 432)))
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v10 & 0x7FFFFFFF));
  else
    v12 = 0;
  v13 = *(_DWORD *)(v9 + 36);
  v64 = v12;
  v15 = sub_1C4825F50(&v64);
  if ((_DWORD)v14 == 1)
  v16 = *(_QWORD *)(a2 + 48);
  if ((v16 & 7) != 0)
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v16 & 0xFFFFFFFFFFFFFFF8;
  }
  v19 = *(_QWORD *)(v17 + 24);
  v18 = (unint64_t *)(v17 + 24);
  if ((v19 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v21 = (sub_1C4825F50(v18) + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((_DWORD)v20 == 1)
  }
  else
  {
    v21 = -8;
  }
  if (v15 != v21)
    return 2;
  v63 = 0;
  v69 = (int *)v71;
  v70 = 0x800000000;
  v66 = v68;
  v67 = 0x800000000;
  v22 = v65;
  if (v8 == 90)
  {
    v23 = sub_1C553A8CC(v64, v65, &v63);
    v24 = v23;
    v25 = HIDWORD(v23);
  }
  else
  {
    sub_1C5534378(a1, v10, v64, v65, (uint64_t *)&v63, (uint64_t)&v69, (uint64_t)&v66);
    v24 = v70;
    LODWORD(v25) = v67;
  }
  if (v24 == -1)
  {
    v26 = 2;
  }
  else
  {
    v45 = v25;
    if (v13 < 0 && (v28 = a1[2], (v13 & 0x7FFFFFFFu) < *(_DWORD *)(v28 + 432)))
      v29 = *(_QWORD *)(*(_QWORD *)(v28 + 424) + 8 * (v13 & 0x7FFFFFFF));
    else
      v29 = 0;
    v62 = v29;
    v31 = sub_1C4825F50(&v62);
    if ((_DWORD)v30 == 1)
    v33 = sub_1C4825F50(&v64);
    if ((_DWORD)v32 == 1)
    v34 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(*a1 + 8) + 40) + 272);
    v35 = *(_QWORD *)(a2 + 48);
    if ((v35 & 7) != 0)
    {
      v36 = *(__int128 **)((v35 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v36 = (__int128 *)(v35 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a2 + 48) = v36;
    }
    v37 = v36[3];
    v59 = v36[2];
    v60 = v37;
    v61 = v36[4];
    v38 = v36[1];
    v57 = *v36;
    v58 = v38;
    v46 = a1;
    v47 = v33;
    v48 = v13;
    v49 = (8 * v31) | 1;
    v51 = v38;
    v52 = v59;
    v53 = v37;
    v54 = v61;
    v50 = v57;
    v55 = v8 == 90;
    v56 = v34;
    if (v34)
    {
      v40 = sub_1C4825F50(&v65);
      if ((_DWORD)v39 == 1)
      v41 = (v33 - v40);
      v22 = v65;
    }
    else
    {
      v41 = 0;
    }
    v42 = sub_1C553AA14((uint64_t)&v46, v22, (uint64_t)&v69, v24, v41);
    if ((v63 & 0xFFFFFFFFFFFFFFF9) != 0)
      sub_1C553AA14((uint64_t)&v46, v63, (uint64_t)&v66, v45, v42);
    if (v8 == 90)
      sub_1C5534AB8(a1, v10, v64, v65, v69, v70, v63, v43, (uint64_t)v66, v67);
    v44 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v44 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v44 = a2;
        do
          v44 = *(_QWORD *)(v44 + 8);
        while ((*(_WORD *)(v44 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v44 + 8));
    v26 = 1;
  }
  if (v66 != v68)
    free(v66);
  if (v69 != (int *)v71)
    free(v69);
  return v26;
}

uint64_t sub_1C55366DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD v7[6];
  uint64_t v8;
  int v9;

  v4 = a2 + 32 * a4;
  v8 = a3;
  v9 = 0;
  v7[0] = *(_DWORD *)(v4 + 4);
  v7[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 119, &v8, 1, v7, 1, 0);
  return llvm::MachineOperand::setReg(v4, *(_DWORD *)(*(_QWORD *)(v5 + 32) + 4));
}

uint64_t sub_1C553674C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD v8[6];
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a2 + 32 * a4;
  v9 = a3;
  v10 = 0;
  v8[0] = *(_DWORD *)(v5 + 4);
  v8[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a5, &v9, 1, v8, 1, 0);
  return llvm::MachineOperand::setReg(v5, *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4));
}

uint64_t sub_1C55367EC(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int GenericVirtualRegister;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD v15[6];
  _DWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], a3, "", 0);
  v10 = *(_QWORD *)(*a1 + 48);
  if (!v10 || (*(_BYTE *)v10 & 4) == 0)
  {
    while ((*(_WORD *)(v10 + 44) & 8) != 0)
      v10 = *(_QWORD *)(v10 + 8);
  }
  v11 = a2 + 32 * a4;
  *(_QWORD *)(*a1 + 48) = *(_QWORD *)(v10 + 8);
  v12 = *a1;
  v16[0] = *(_DWORD *)(v11 + 4);
  v16[2] = 1;
  v13 = GenericVirtualRegister;
  v15[0] = GenericVirtualRegister;
  v15[4] = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, a5, v16, 1, v15, 1, 0);
  return llvm::MachineOperand::setReg(v11, v13);
}

uint64_t sub_1C55368F4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD v8[6];
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 32 * a4;
  v5 = *(_DWORD *)(v4 + 4);
  v9 = a3;
  v10 = 0;
  v8[0] = v5;
  v8[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 82, &v9, 1, v8, 1, 0);
  return llvm::MachineOperand::setReg(v4, *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4));
}

uint64_t sub_1C5536990(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14[6];

  v14[0] = a3;
  v14[4] = 0;
  result = sub_1C5544C30(a2, a4, v14);
  v7 = *(_DWORD *)(v6 + 40);
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = v6;
    v10 = 0;
    v11 = *(_DWORD *)(a1 + 8);
    v12 = 32 * v8;
    do
    {
      v13 = *(_DWORD *)(*(_QWORD *)(v9 + 32) + v10 + 4);
      if (v11 >= *(_DWORD *)(a1 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11 + 1, 4);
        v11 = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v11) = v13;
      v11 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v11;
      v10 += 32;
    }
    while (v12 != v10);
  }
  return result;
}

uint64_t sub_1C5536A58(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  const char *v11;
  unsigned int v12;
  void *v13;
  const llvm::APInt *v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  llvm::ValueHandleBase *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v30;
  void *__src;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void *v42;
  unsigned int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v7 = __clz(a3 / a4);
  if (a2 < 0 && (v8 = *(_QWORD *)(a1 + 24), (a2 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v8 + 432)))
    v9 = *(void **)(*(_QWORD *)(v8 + 424) + 8 * (a2 & 0x7FFFFFFF));
  else
    v9 = 0;
  v10 = 31 - v7;
  v35 = v9;
  v36 = (uint64_t)v9;
  LODWORD(v37) = 0;
  v12 = sub_1C4825F50((unint64_t *)&v35);
  if ((_DWORD)v11 == 1)
  v32 = v12;
  if (v12 <= 0x40)
  {
    v13 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v12);
    if (!v12)
      v13 = 0;
    __src = v13;
    v34 = v12;
    goto LABEL_11;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v34 = v32;
  if (v32 <= 0x40)
  {
    v13 = __src;
LABEL_11:
    v33 = (uint64_t)v13;
    goto LABEL_12;
  }
  v30 = (((unint64_t)v32 + 63) >> 3) & 0x3FFFFFF8;
  v33 = operator new[]();
  memcpy((void *)v33, __src, v30);
LABEL_12:
  sub_1C4888094((uint64_t)&v33, v10);
  v15 = v34;
  if (v34 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v33);
    v15 = v34;
    v17 = (void *)v33;
  }
  else
  {
    if (v34)
      v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
    else
      v16 = 0;
    v17 = (void *)(v16 & ~v33);
    v33 = (uint64_t)v17;
  }
  v43 = v15;
  v42 = v17;
  v34 = 0;
  v18 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a1 + 8), (llvm::LLVMContext *)&v42, v14);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t *, llvm::ValueHandleBase *))(*(_QWORD *)a1 + 16))(a1, &v36, v18);
  v21 = v20;
  if (v43 >= 0x41 && v42)
    MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  if (v34 >= 0x41 && v33)
    MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
  if (v32 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  v42 = v35;
  v43 = 0;
  LODWORD(v36) = a2;
  v38 = 0;
  v39 = v19;
  v40 = v21;
  v41 = 1;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 65, &v42, 1, &v36, 2, 0);
  v24 = v23;
  v25 = v35;
  __src = v35;
  v32 = 0;
  v26 = sub_1C5544694(a1, (unint64_t *)&__src, 31 - __clz(a4));
  v42 = v25;
  v43 = 0;
  v36 = v22;
  v37 = v24;
  v38 = 1;
  v39 = v26;
  v40 = v27;
  v41 = 1;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 127, &v42, 1, &v36, 2, 0);
  return *(unsigned int *)(*(_QWORD *)(v28 + 32) + 4);
}

uint64_t sub_1C5536D7C(uint64_t *a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  char v26;
  const char *v27;
  const char *v28;
  llvm::MachineFunction *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  int v37;
  const char *v38;
  unint64_t v39;
  uint64_t v40;
  const char *v41;
  int8x8_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint8x8_t v48;
  unsigned int v49;
  const char *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  const llvm::APInt *v54;
  llvm::ValueHandleBase *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  _QWORD *v81;
  char v82;
  __int128 *v83;
  uint64_t v84;
  unsigned int v85;
  char v86;
  char v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  llvm::MachineFunction *v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  _BYTE v105[24];
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  _OWORD v115[2];
  uint64_t v116;
  int v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD **)(a2 + 32);
  v5 = v4[9];
  if (**(_WORD **)(a2 + 16) == 204)
    v6 = v4[17];
  else
    v6 = 0;
  v7 = v4[1];
  v8 = v4[8 * (*(_DWORD *)(a2 + 40) - 1) + 1];
  v9 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v9 + 432))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v5 & 0x7FFFFFFF));
    v107 = v10;
    if ((v10 & 2) != 0)
    {
      v11 = 35;
      v12 = 19;
      if ((v10 & 4) == 0)
        v11 = 19;
      v13 = v10 >> v11;
      if ((v10 & 4) == 0)
        v12 = 3;
      if ((v10 & 1) != 0)
        v12 = 3;
      v14 = (8 * (unsigned __int16)(v10 >> v12)) & 0xFFFFF8000007FFFFLL | ((v13 & 0xFFFFFF) << 19) | 2;
      v15 = 0x800000000000000;
      goto LABEL_18;
    }
  }
  else
  {
    v10 = 0;
    v107 = 0;
  }
  v16 = 3;
  if ((v10 & 1) == 0)
    v16 = 19;
  v14 = v10 & 0x8000000000000000 | (8 * (v10 >> v16)) | 1;
  v15 = 0x8000000000000;
LABEL_18:
  v106 = v14;
  if ((v10 & v15) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v9);
    v9 = a1[2];
  }
  v17 = sub_1C554C050(v8, v9);
  if (v18 && (v19 = v17, v17 <= (unsigned __int16)(v10 >> 3)))
  {
    *(_QWORD *)&v115[0] = &v115[1];
    *((_QWORD *)&v115[0] + 1) = 0x800000000;
    sub_1C5534298(a1, v5, v14, (unsigned __int16)(v10 >> 3), (uint64_t)v115);
    if (v6)
    {
      v21 = *(int **)&v115[0];
      *(_DWORD *)(*(_QWORD *)&v115[0] + 4 * v19) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
      v22 = *a1;
      *(_DWORD *)v105 = v7;
      *(_DWORD *)&v105[8] = 1;
      sub_1C5544D6C(v22, (uint64_t)v105, v21, DWORD2(v115[0]));
    }
    else
    {
      v23 = *a1;
      LODWORD(v112) = v7;
      LODWORD(v113) = 1;
      *(_DWORD *)v105 = *(_DWORD *)(*(_QWORD *)&v115[0] + 4 * v19);
      *(_DWORD *)&v105[16] = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 19, &v112, 1, v105, 1, 0);
    }
    v24 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v24 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v24 = a2;
        do
          v24 = *(_QWORD *)(v24 + 8);
        while ((*(_WORD *)(v24 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v24 + 8));
    if (*(_OWORD **)&v115[0] != &v115[1])
      free(*(void **)&v115[0]);
  }
  else
  {
    if ((sub_1C4825F50(&v106) & 7) != 0)
      return 2;
    v92 = sub_1C4825F50(&v106);
    if ((_DWORD)v25 == 1)
    v26 = sub_1C5539548(v10);
    memset(v105, 0, 21);
    v28 = (const char *)((unint64_t)(sub_1C4825F50(&v107) + 7) >> 3);
    if ((_DWORD)v27 == 1)
    v29 = sub_1C62721B0((uint64_t)a1, v28, 0, v26, (uint64_t)v105);
    v31 = v30;
    v32 = (_QWORD *)*a1;
    LODWORD(v112) = v5;
    v114 = 0;
    v102 = (unint64_t)v29;
    v103 = v30;
    v104 = 1;
    v100 = *(_OWORD *)v105;
    v101 = *(_QWORD *)&v105[16];
    memset(v115, 0, sizeof(v115));
    v93 = v26;
    sub_1C6275674(v32, (int *)&v112, (int *)&v102, &v100, v26, 0, v115);
    v90 = v31;
    v91 = v29;
    v33 = *(_QWORD *)(v31 + 32);
    v34 = v107;
    if ((v107 & 2) != 0)
    {
      v86 = 35;
      v87 = 19;
      if ((v107 & 4) == 0)
        v86 = 19;
      v88 = v107 >> v86;
      if ((v107 & 4) == 0)
        v87 = 3;
      if ((v107 & 1) != 0)
        v87 = 3;
      v36 = (8 * (unsigned __int16)(v107 >> v87)) & 0xFFFFF8000007FFFFLL | ((v88 & 0xFFFFFF) << 19) | 2;
    }
    else
    {
      v35 = 3;
      if ((v107 & 1) == 0)
        v35 = 19;
      v36 = v107 & 0x8000000000000000 | (8 * (v107 >> v35)) | 1;
    }
    v37 = *(_DWORD *)(v33 + 4);
    v108 = v36;
    v39 = sub_1C4825F50(&v108);
    if ((_DWORD)v38 == 1)
    v40 = *a1;
    sub_1C554C050(v8, *(_QWORD *)(*a1 + 24));
    if ((_BYTE)v41)
    {
      v43 = v8;
    }
    else
    {
      if (v8 < 0 && (v44 = *(_QWORD *)(v40 + 24), (v8 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v44 + 432)))
        v45 = *(_QWORD *)(*(_QWORD *)(v44 + 424) + 8 * (v8 & 0x7FFFFFFF));
      else
        v45 = 0;
      v111 = v45;
      v46 = 0x800000000000000;
      if ((v34 & 2) == 0)
        v46 = 0x8000000000000;
      if ((v46 & v34) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v41);
      v47 = (unsigned __int16)(v34 >> 3);
      v42.i32[0] = v47;
      v48 = (uint8x8_t)vcnt_s8(v42);
      v48.i16[0] = vaddlv_u8(v48);
      if (v48.i32[0] == 1)
      {
        v49 = sub_1C4825F50(&v111);
        if ((_DWORD)v50 == 1)
        {
          v89 = v49;
          v49 = v89;
        }
        v51 = __clz(v47);
        v52 = 31 - v51;
        LODWORD(v103) = v49;
        if (v49 > 0x40)
        {
          v85 = 31 - v51;
          llvm::APInt::initSlowCase((llvm::APInt *)&v102, 0, 0);
          v52 = v85;
        }
        else
        {
          v102 = 0;
        }
        sub_1C4912E54(&v102, 0, v52);
        v53 = v111;
        v109 = v111;
        v110 = 0;
        v55 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(v40 + 8), (llvm::LLVMContext *)&v102, v54);
        v56 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::ValueHandleBase *))(*(_QWORD *)v40 + 16))(v40, &v109, v55);
        v112 = v53;
        LODWORD(v113) = 0;
        LODWORD(v115[0]) = v8;
        LODWORD(v115[1]) = 0;
        *((_QWORD *)&v115[1] + 1) = v56;
        v116 = v57;
        v117 = 1;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 65, &v112, 1, v115, 2, 0);
        v43 = *(_DWORD *)(*(_QWORD *)(v58 + 32) + 4);
        if (v103 >= 0x41 && v102)
          MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
      }
      else
      {
        v102 = v45;
        LODWORD(v103) = 0;
        v59 = sub_1C5544694(v40, &v102, v47 - 1);
        v112 = v45;
        LODWORD(v113) = 0;
        LODWORD(v115[0]) = v8;
        LODWORD(v115[1]) = 0;
        *((_QWORD *)&v115[1] + 1) = v59;
        v116 = v60;
        v117 = 1;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 197, &v112, 1, v115, 2, 0);
        v43 = *(_DWORD *)(*(_QWORD *)(v61 + 32) + 4);
      }
    }
    if (v43 < 0 && (v62 = a1[2], (v43 & 0x7FFFFFFFu) < *(_DWORD *)(v62 + 432)))
      v63 = *(_QWORD *)(*(_QWORD *)(v62 + 424) + 8 * (v43 & 0x7FFFFFFF));
    else
      v63 = 0;
    v64 = *a1;
    v102 = v63;
    LODWORD(v103) = 0;
    v65 = sub_1C5544694(v64, &v102, (v39 >> 3));
    v112 = v63;
    LODWORD(v113) = 0;
    LODWORD(v115[0]) = v43;
    LODWORD(v115[1]) = 0;
    *((_QWORD *)&v115[1] + 1) = v65;
    v116 = v66;
    v117 = 1;
    v67 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 47, &v112, 1, v115, 2, 0);
    v69 = 0;
    if (v37 < 0)
    {
      v70 = a1[2];
      if ((v37 & 0x7FFFFFFFu) >= *(_DWORD *)(v70 + 432))
        v69 = 0;
      else
        v69 = *(_QWORD *)(*(_QWORD *)(v70 + 424) + 8 * (v37 & 0x7FFFFFFF));
    }
    v71 = *a1;
    v112 = v69;
    LODWORD(v113) = 0;
    LODWORD(v115[0]) = v37;
    LODWORD(v115[1]) = 0;
    *((_QWORD *)&v115[1] + 1) = v67;
    v116 = v68;
    v117 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 193, &v112, 1, v115, 2, 0);
    v73 = *(_DWORD *)(*(_QWORD *)(v72 + 32) + 4);
    v74 = sub_1C554C050(v8, a1[2]);
    if (v75)
    {
      v76 = v74 * ((unint64_t)(v92 + 7) >> 3);
      sub_1C4824250((uint64_t *)v105, v76, (uint64_t)v115);
      *(_OWORD *)v105 = v115[0];
      *(_QWORD *)&v105[13] = *(_QWORD *)((char *)v115 + 13);
      v77 = 63 - __clz((v76 | (1 << v93)) & -(v76 | (1 << v93)));
    }
    else
    {
      v77 = sub_1C5539548(v106);
      if (v73 < 0 && (v78 = a1[2], (v73 & 0x7FFFFFFFu) < *(_DWORD *)(v78 + 432)))
        v79 = *(_QWORD *)(*(_QWORD *)(v78 + 424) + 8 * (v73 & 0x7FFFFFFF));
      else
        v79 = 0;
      v80 = 35;
      if ((v79 & 4) == 0)
        v80 = 19;
      *(_OWORD *)v105 = 0uLL;
      *(_DWORD *)&v105[16] = (v79 >> v80) & 0xFFFFFF;
      v105[20] = 0;
    }
    v81 = (_QWORD *)*a1;
    v82 = v77;
    if (v6)
    {
      LODWORD(v112) = v6;
      v114 = 0;
      LODWORD(v102) = v73;
      v104 = 0;
      v98 = *(_OWORD *)v105;
      v99 = *(_QWORD *)&v105[16];
      memset(v115, 0, sizeof(v115));
      sub_1C6275674(v81, (int *)&v112, (int *)&v102, &v98, v77, 0, v115);
      v81 = (_QWORD *)*a1;
      LODWORD(v102) = v7;
      LODWORD(v103) = 1;
      v112 = (unint64_t)v91;
      v113 = v90;
      v114 = 1;
      v96 = *(_OWORD *)v105;
      v97 = *(_QWORD *)&v105[16];
      memset(v115, 0, sizeof(v115));
      v83 = &v96;
      v82 = v93;
    }
    else
    {
      LODWORD(v102) = v7;
      LODWORD(v103) = 1;
      LODWORD(v112) = v73;
      v114 = 0;
      v94 = *(_OWORD *)v105;
      v95 = *(_QWORD *)&v105[16];
      memset(v115, 0, sizeof(v115));
      v83 = &v94;
    }
    sub_1C55463F0(v81, (int *)&v102, (int *)&v112, v83, v82, 0, v115);
    v84 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v84 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v84 = a2;
        do
          v84 = *(_QWORD *)(v84 + 8);
        while ((*(_WORD *)(v84 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v84 + 8));
  }
  return 1;
}

void sub_1C5537678(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C5537714()
{
  uint64_t v0;
  _QWORD **v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v6 = *v1;
  v20 = v3;
  v21 = 0;
  LODWORD(v15) = v4;
  v16 = 0;
  sub_1C54F8544(v6, &v20, &v15);
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 4);
  v9 = *v1;
  v20 = v3;
  v21 = 0;
  LODWORD(v15) = v8;
  v16 = 0;
  LODWORD(v17) = v2;
  v19 = 0;
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*v9 + 32))(v9, 197, &v20, 1, &v15, 2, 0);
  v11 = *v1;
  LODWORD(v20) = v5;
  v21 = 1;
  LODWORD(v15) = v4;
  v16 = 0;
  v17 = v10;
  v18 = v12;
  v19 = 1;
  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*v11 + 32))(v11, 45, &v20, 1, &v15, 2, 0);
  v13 = v0;
  if ((*(_BYTE *)v0 & 4) == 0)
  {
    v13 = v0;
    if ((*(_WORD *)(v0 + 44) & 8) != 0)
    {
      v13 = v0;
      do
        v13 = *(_QWORD *)(v13 + 8);
      while ((*(_WORD *)(v13 + 44) & 8) != 0);
    }
  }
  return sub_1C487FE80(*(_QWORD *)(v0 + 24) + 40, v0, *(_QWORD *)(v13 + 8));
}

void sub_1C5537D90(uint64_t a1, uint64_t a2)
{
  __asm { BR              X13 }
}

uint64_t sub_1C5537E7C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const llvm::APInt *v18;
  llvm::ConstantInt *****v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t *v24;
  llvm::ValueHandleBase *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;

  v8 = *v4;
  v37 = v7;
  v38 = 0;
  v39 = a1;
  v40 = 0;
  LODWORD(v41) = v2;
  v43 = 0;
  LODWORD(v44) = v1;
  v46 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 141, &v37, 2, &v41, 2, 0);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(_DWORD *)(v10 + 4);
  v36 = *(_DWORD *)(v10 + 36);
  if ((v7 & 1) != 0)
  {
    v12 = (v7 >> 3);
  }
  else if (v5)
  {
    if ((v7 & 2) != 0)
      v12 = (unsigned __int16)(v7 >> 19);
    else
      v12 = (v7 >> 19);
  }
  else
  {
    v12 = (unsigned __int16)(v7 >> 3);
  }
  v13 = *v4;
  v41 = v7;
  LODWORD(v42) = 0;
  v14 = sub_1C5544694(v13, &v41, v12 - 1);
  v15 = *v4;
  v37 = v7;
  v38 = 0;
  LODWORD(v41) = v11;
  v43 = 0;
  v44 = v14;
  v45 = v16;
  v46 = 1;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 129, &v37, 1, &v41, 2, 0);
  v19 = (llvm::ConstantInt *****)*v4;
  v41 = v7;
  LODWORD(v42) = 0;
  v38 = v12;
  v35 = v6;
  v21 = v20;
  v22 = v17;
  if (v12 > 0x40)
  {
    v24 = &v37;
    llvm::APInt::initSlowCase((llvm::APInt *)&v37, 0, 0);
    v23 = v12 - 1;
    if (v38 >= 0x41)
      v24 = (unint64_t *)(v37 + 8 * (v23 >> 6));
  }
  else
  {
    v37 = 0;
    LOBYTE(v23) = v12 - 1;
    v24 = &v37;
  }
  *v24 |= 1 << v23;
  v25 = llvm::ConstantInt::get(***v19[1], (llvm::LLVMContext *)&v37, v18);
  v26 = ((uint64_t (*)(llvm::ConstantInt *****, unint64_t *, llvm::ValueHandleBase *))(*v19)[2])(v19, &v41, v25);
  v28 = v27;
  if (v38 >= 0x41 && v37)
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  v29 = *v4;
  v37 = v7;
  v38 = 0;
  v41 = v22;
  v42 = v21;
  v43 = 1;
  v44 = v26;
  v45 = v28;
  v46 = 1;
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 45, &v37, 1, &v41, 2, 0);
  v31 = *v4;
  LODWORD(v37) = v35;
  v38 = 1;
  LODWORD(v41) = v36;
  v43 = 0;
  v44 = v30;
  v45 = v32;
  v46 = 1;
  v47 = v11;
  v48 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 136, &v37, 1, &v41, 3, 0);
  v33 = v3;
  if ((*(_BYTE *)v3 & 4) == 0)
  {
    v33 = v3;
    if ((*(_WORD *)(v3 + 44) & 8) != 0)
    {
      v33 = v3;
      do
        v33 = *(_QWORD *)(v33 + 8);
      while ((*(_WORD *)(v33 + 44) & 8) != 0);
    }
  }
  return sub_1C487FE80(*(_QWORD *)(v3 + 24) + 40, v3, *(_QWORD *)(v33 + 8));
}

uint64_t sub_1C553818C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  unsigned __int8 *v18;
  void **v19;
  void (**v20)(void **);
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char ***v38;
  unsigned int v39;
  const char **v40;
  uint64_t v41;
  _BOOL4 v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  const char ***v46;
  unsigned int v47;
  const char **v48;
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  _QWORD *v60;
  unsigned int *v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  _QWORD *v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t *v81;
  const char *v82;
  uint64_t v83;
  llvm::MachineMemOperand *MachineMemOperand;
  int v85;
  uint64_t v86;
  unint64_t v87;
  const char *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t (***v100)();
  unsigned __int8 *v101;
  uint64_t v102;
  void **v103;
  void (**v104)(void **);
  int v105;
  _QWORD *v106;
  int v107;
  int64_t v108;
  BOOL v109;
  unint64_t v110;
  unsigned int v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 v115;
  int v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unint64_t *v124;
  unint64_t *v125;
  uint64_t (**v126)();
  unsigned int v127;
  uint64_t v128;
  unint64_t *v129;
  const char *v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int v138;
  const char *v139;
  uint64_t v140;
  llvm::MachineMemOperand *v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  const char *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  const char *v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  const char *v163;
  unint64_t v164;
  const char *v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  llvm::MachineMemOperand *v169;
  int v170;
  const char *v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  unsigned __int8 MVTForLLT;
  unsigned __int8 v179;
  uint64_t (**v180)();
  int v181;
  uint64_t v182;
  uint64_t v183;
  const char **v184;
  const char **v185;
  uint64_t v186;
  int v187;
  _BOOL4 v188;
  int v189;
  _BOOL4 v190;
  _QWORD *v191;
  const char **v192;
  const char *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  int v201;
  const char **v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  unsigned int v213;
  char v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  void *__p;
  unint64_t *v219;
  uint64_t v220;
  void *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t (**v226)();
  _QWORD *(*v227)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t v228;
  unsigned __int8 **v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  _QWORD *v233;
  unsigned int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  unint64_t v239;
  int v240;
  int v241;
  uint64_t v242;

  v242 = *MEMORY[0x1E0C80C00];
  v6 = (unint64_t *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  v7 = **(unsigned __int16 **)(a2 + 16);
  if ((v5 & 7) != 0)
  {
    v8 = v5 & 0xFFFFFFFFFFFFFFF8;
    v11 = *(_QWORD *)(v8 + 8);
    v9 = v8 + 8;
    v10 = v11;
  }
  else
  {
    v10 = v5 & 0xFFFFFFFFFFFFFFF8;
    *v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v9 = a2 + 48;
  }
  v12 = *(unsigned int **)(a2 + 32);
  v211 = v12[1];
  v210 = v12[9];
  v13 = v12[17];
  v206 = *(unsigned __int8 *)(v10 + 34);
  if (v7 == 237)
  {
    v15 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 8);
    v15 = *(unsigned __int8 *)(v10 + 34);
  }
  v209 = a1;
  v16 = *(_QWORD *)(a1 + 16);
  v221 = &off_1E816EFF0;
  *(_QWORD *)&v222 = sub_1C554C7E0;
  *(_QWORD *)&v223 = &v221;
  v226 = &off_1E816F038;
  v227 = sub_1C554C7F8;
  v229 = (unsigned __int8 **)&v226;
  sub_1C554C3AC(v13, v16, (uint64_t)&v221, (uint64_t)&v226, 1, 0, &v212);
  v17 = (uint64_t (***)())v229;
  if (v229 == (unsigned __int8 **)&v226)
  {
    v18 = (unsigned __int8 *)(v226 + 4);
    v17 = &v226;
LABEL_9:
    (*(void (**)(uint64_t (***)()))v18)(v17);
    goto LABEL_10;
  }
  if (v229)
  {
    v18 = *v229 + 40;
    goto LABEL_9;
  }
LABEL_10:
  v19 = (void **)v223;
  if ((void **)v223 == &v221)
  {
    v20 = (void (**)(void **))((char *)v221 + 32);
    v19 = &v221;
LABEL_12:
    (*v20)(v19);
    goto LABEL_13;
  }
  if ((_QWORD)v223)
  {
    v20 = (void (**)(void **))(*(_QWORD *)v223 + 40);
    goto LABEL_12;
  }
LABEL_13:
  if (!v214)
    return 2;
  v21 = v213;
  v22 = v212;
  if (v213 < 0x41)
    v22 = (unint64_t *)&v212;
  v23 = *v22;
  if (!*v22)
  {
    v27 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v27 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v27 = a2;
        do
          v27 = *(_QWORD *)(v27 + 8);
        while ((*(_WORD *)(v27 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v27 + 8));
    v26 = 1;
    goto LABEL_28;
  }
  v24 = *(_WORD *)(v10 + 32);
  if (v7 != 235)
  {
    if ((v24 & 4) != 0 || a3 && v23 > a3)
      goto LABEL_27;
    if (v7 != 237)
    {
      if (v7 != 236)
      {
        if (v7 == 234)
        {
          v29 = v23;
          v30 = *(uint64_t **)(*(_QWORD *)(a2 + 24) + 32);
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30[2] + 120))(v30[2]);
          v32 = (unsigned int *)(v31 + 184260);
          v33 = *v30;
          v34 = *(_DWORD *)(v30[1] + 484);
          if ((v34 > 0x21 || ((1 << v34) & 0x3F0000888) == 0)
            && (v186 = *(_QWORD *)(v33 + 112)) != 0
            && (*(_BYTE *)(v186 + 17) & 4) != 0
            || (v35 = *(_QWORD *)(v33 + 112)) != 0 && *(char *)(v35 + 13) < 0)
          {
            v32 = (unsigned int *)(v31 + 184264);
          }
          v25 = sub_1C553BA20(v209, a2, v211, v210, v29, *v32, v206, v15, 0);
          goto LABEL_19;
        }
LABEL_27:
        v26 = 2;
        goto LABEL_28;
      }
      v204 = (void *)v23;
      v36 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
      v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v36 + 16) + 120))(*(_QWORD *)(v36 + 16));
      v38 = *(const char ****)v36;
      v195 = *(_QWORD *)(v36 + 56);
      v197 = a2;
      v39 = *(_DWORD *)(*(_QWORD *)(v36 + 8) + 484);
      if ((v39 > 0x21 || ((1 << v39) & 0x3F0000888) == 0)
        && (v184 = v38[14]) != 0
        && (*((_BYTE *)v184 + 17) & 4) != 0)
      {
        v42 = 1;
        v41 = v211;
      }
      else
      {
        v40 = v38[14];
        v41 = v211;
        if (v40)
          v42 = *((char *)v40 + 13) < 0;
        else
          v42 = 0;
      }
      v200 = ***(const char ****)v36;
      v202 = v38[5];
      v51 = v15;
      if (v15 >= v206)
        v52 = v206;
      else
        v52 = v15;
      sub_1C554CC94(v41, *(_QWORD *)(v209 + 16), (uint64_t)&v221);
      v53 = 0;
      v54 = 0;
      if (BYTE8(v222) && v221)
      {
        if (**((_WORD **)v221 + 2) == 70)
        {
          v187 = *(_DWORD *)(*((_QWORD *)v221 + 4) + 48);
          v188 = v187 < 0 && v187 >= -*(_DWORD *)(v195 + 32);
          v53 = !v188;
          v54 = v221;
          v51 = v15;
        }
        else
        {
          v54 = 0;
          v53 = 0;
        }
      }
      v55 = (unsigned int *)(v37 + 184284);
      if (!v42)
        v55 = (unsigned int *)(v37 + 184280);
      v56 = *v55;
      __p = 0;
      v219 = 0;
      v220 = 0;
      v57 = *v6;
      if ((*v6 & 7) != 0)
      {
        v207 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v57 &= 0xFFFFFFFFFFFFFFF8;
        *v6 = v57;
        v207 = v57;
      }
      v64 = v54;
      if ((v57 & 3) != 0)
        v6 = (unint64_t *)((v57 & 0xFFFFFFFFFFFFFFF8) + 8);
      else
        *v6 = v57 & 0xFFFFFFFFFFFFFFF8;
      v65 = v6[1];
      v66 = *(_DWORD *)(v207 + 16);
      v221 = v204;
      *(_QWORD *)&v222 = (v51 << 48) | (v52 << 8) | v53;
      v226 = *(uint64_t (***)())(*(_QWORD *)v36 + 112);
      if ((sub_1C553AF20((char **)&__p, v56, (unsigned __int8 *)&v221, v66, (uint64_t)&v226, v37) & 1) != 0)
      {
        if (v53)
        {
          sub_1C553B2F8(*(_QWORD *)__p, v200);
          llvm::DataLayout::getAlignment((uint64_t)(v202 + 34), v67);
          v69 = v68;
          v70 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v36 + 16) + 176))(*(_QWORD *)(v36 + 16));
          if ((!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 440))(v70, v36)
             || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 432))(v70, v36) & 1) == 0)
            && v52 < v69)
          {
            do
            {
              if (!*((_BYTE *)v202 + 281))
                break;
              if (*((unsigned __int8 *)v202 + 280) >= v69)
                break;
              v69 = 63 - __clz((unint64_t)(1 << v69) >> 1);
            }
            while (v52 < v69);
          }
          if (v52 < v69)
          {
            v71 = *(_DWORD *)(v64[4] + 48);
            v72 = *(_QWORD *)(v195 + 8) + 40 * (*(_DWORD *)(v195 + 32) + v71);
            v74 = *(unsigned __int8 *)(v72 + 16);
            v73 = (unsigned __int8 *)(v72 + 16);
            if (v74 < v69)
            {
              *v73 = v69;
              if (!*(_BYTE *)(*(_QWORD *)(v195 + 8) + 40 * (*(_DWORD *)(v195 + 32) + v71) + 20)
                && *(unsigned __int8 *)(v195 + 60) < v69)
              {
                *(_BYTE *)(v195 + 60) = v69;
              }
            }
          }
        }
        v75 = *(_QWORD *)(v197 + 24);
        v230 = 0u;
        v231 = 0u;
        v232 = 0;
        v76 = *(_QWORD *)(v75 + 32);
        v226 = &off_1E816EC08;
        v227 = (_QWORD *(*)@<X0>(_QWORD *@<X0>, uint64_t@<X8>))v76;
        v229 = *(unsigned __int8 ***)(v76 + 40);
        v228 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v76 + 16) + 104))(*(_QWORD *)(v76 + 16));
        v221 = 0;
        if ((_QWORD)v230)
        {
          llvm::MetadataTracking::untrack((uint64_t)&v230, (unsigned __int8 *)v230);
          *(_QWORD *)&v230 = v221;
          if (v221)
            llvm::MetadataTracking::retrack((uint64_t)&v221, (unsigned __int8 *)v221, (uint64_t)&v230);
        }
        else
        {
          *(_QWORD *)&v230 = 0;
        }
        v231 = (unint64_t)v197;
        *((_QWORD *)&v230 + 1) = *(_QWORD *)(v197 + 24);
        if ((__int128 *)(v197 + 56) != &v230)
        {
          if ((_QWORD)v230)
            llvm::MetadataTracking::untrack((uint64_t)&v230, (unsigned __int8 *)v230);
          *(_QWORD *)&v230 = *(_QWORD *)(v197 + 56);
          if ((_QWORD)v230)
            llvm::MetadataTracking::track((uint64_t)&v230, (unsigned __int8 *)v230, 2);
        }
        v221 = (char *)&v222 + 8;
        *(_QWORD *)&v222 = 0x1000000000;
        v78 = __p;
        v77 = v219;
        if (__p != v219)
        {
          v79 = 0;
          v80 = v210 & 0x7FFFFFFF;
          v81 = (unint64_t *)__p;
          do
          {
            v217 = *v81;
            v83 = sub_1C4825F50(&v217);
            if ((_DWORD)v82 == 1)
            MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v36, v65, v79, (8 * v83 + 56) & 0x7FFFFFFC0 | 1);
            v85 = v210;
            if (v79)
            {
              if ((v210 & 0x80000000) != 0
                && (v86 = *(_QWORD *)(v209 + 16), v80 < *(_DWORD *)(v86 + 432)))
              {
                v87 = *(_QWORD *)(*(_QWORD *)(v86 + 424) + 8 * v80);
              }
              else
              {
                v87 = 0;
              }
              v216 = v87;
              v89 = sub_1C4825F50(&v216);
              if ((_DWORD)v88 == 1)
              v233 = (_QWORD *)((8 * v89) | 1);
              v234 = 0;
              v90 = sub_1C5544694((uint64_t)&v226, (unint64_t *)&v233, v79);
              v239 = v216;
              v240 = 0;
              LODWORD(v233) = v210;
              v235 = 0;
              v236 = v90;
              v237 = v91;
              v238 = 1;
              ((void (*)(uint64_t (***)(), uint64_t, unint64_t *, uint64_t, _QWORD **, uint64_t, _QWORD))v226[4])(&v226, 193, &v239, 1, &v233, 2, 0);
              v85 = *(_DWORD *)(*(_QWORD *)(v92 + 32) + 4);
            }
            v239 = v217;
            v240 = 0;
            LODWORD(v233) = v85;
            v235 = 0;
            sub_1C55464EC(&v226, 0x5Au, (int *)&v239, (int *)&v233, MachineMemOperand);
            v94 = *(_DWORD *)(*(_QWORD *)(v93 + 32) + 4);
            v95 = v222;
            if (v222 >= (unint64_t)DWORD1(v222))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v221, (uint64_t)&v222 + 8, v222 + 1, 4);
              v95 = v222;
            }
            *((_DWORD *)v221 + v95) = v94;
            LODWORD(v222) = v222 + 1;
            v97 = sub_1C4825F50(&v217);
            if ((_DWORD)v96 == 1)
            v79 += (unint64_t)(v97 + 7) >> 3;
            ++v81;
          }
          while (v81 != v77);
          v134 = 0;
          v135 = 0;
          v136 = v77 - v78;
          v137 = v211 & 0x7FFFFFFF;
          v138 = 1;
          do
          {
            v217 = v78[v134];
            v140 = sub_1C4825F50(&v217);
            if ((_DWORD)v139 == 1)
            v141 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v36, v207, v135, (8 * v140 + 56) & 0x7FFFFFFC0 | 1);
            v142 = v211;
            if (v135)
            {
              if ((v211 & 0x80000000) != 0 && (v143 = *(_QWORD *)(v209 + 16), v137 < *(unsigned int *)(v143 + 432)))
                v144 = *(_QWORD *)(*(_QWORD *)(v143 + 424) + 8 * v137);
              else
                v144 = 0;
              v216 = v144;
              v146 = sub_1C4825F50(&v216);
              if ((_DWORD)v145 == 1)
              v233 = (_QWORD *)((8 * v146) | 1);
              v234 = 0;
              v147 = sub_1C5544694((uint64_t)&v226, (unint64_t *)&v233, v135);
              v239 = v216;
              v240 = 0;
              LODWORD(v233) = v211;
              v235 = 0;
              v236 = v147;
              v237 = v148;
              v238 = 1;
              ((void (*)(uint64_t (***)(), uint64_t, unint64_t *, uint64_t, _QWORD **, uint64_t, _QWORD))v226[4])(&v226, 193, &v239, 1, &v233, 2, 0);
              v142 = *(_DWORD *)(*(_QWORD *)(v149 + 32) + 4);
            }
            LODWORD(v233) = *((_DWORD *)v221 + v134);
            v235 = 0;
            LODWORD(v239) = v142;
            v241 = 0;
            sub_1C5546848(&v226, (int *)&v233, (int *)&v239, v141);
            v151 = sub_1C4825F50(&v217);
            if ((_DWORD)v150 == 1)
            v135 += (unint64_t)(v151 + 7) >> 3;
            v134 = v138;
            v109 = v136 > v138++;
          }
          while (v109);
        }
        v152 = v197;
        if ((*(_BYTE *)v197 & 4) == 0)
        {
          v152 = v197;
          if ((*(_WORD *)(v197 + 44) & 8) != 0)
          {
            v152 = v197;
            do
              v152 = *(_QWORD *)(v152 + 8);
            while ((*(_WORD *)(v152 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v197 + 24) + 40, v197, *(_QWORD *)(v152 + 8));
        if (v221 != (char *)&v222 + 8)
          free(v221);
        v226 = &off_1E816EC08;
        if ((_QWORD)v230)
          llvm::MetadataTracking::untrack((uint64_t)&v230, (unsigned __int8 *)v230);
        v26 = 1;
      }
      else
      {
        v26 = 2;
        v78 = __p;
      }
      if (!v78)
        goto LABEL_28;
      v153 = v78;
LABEL_225:
      operator delete(v153);
      goto LABEL_28;
    }
    v43 = (void *)v23;
    v44 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
    v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v44 + 16) + 120))(*(_QWORD *)(v44 + 16));
    v46 = *(const char ****)v44;
    v205 = v44;
    v47 = *(_DWORD *)(*(_QWORD *)(v44 + 8) + 484);
    v199 = *(_QWORD *)(v44 + 56);
    if ((v47 > 0x21 || ((1 << v47) & 0x3F0000888) == 0)
      && (v185 = v46[14]) != 0
      && (*((_BYTE *)v185 + 17) & 4) != 0)
    {
      v50 = 1;
      v49 = v211;
    }
    else
    {
      v48 = v46[14];
      v49 = v211;
      if (v48)
        v50 = *((char *)v48 + 13) < 0;
      else
        v50 = 0;
    }
    v192 = v46[5];
    v193 = ***(const char ****)v44;
    v196 = v45;
    v58 = (unsigned int *)(v45 + 184252);
    sub_1C554CC94(v49, *(_QWORD *)(v209 + 16), (uint64_t)&v221);
    v59 = 0;
    v60 = 0;
    if (BYTE8(v222) && v221)
    {
      if (**((_WORD **)v221 + 2) == 70)
      {
        v189 = *(_DWORD *)(*((_QWORD *)v221 + 4) + 48);
        v190 = v189 < 0 && v189 >= -*(_DWORD *)(v199 + 32);
        v59 = !v190;
        v60 = v221;
      }
      else
      {
        v60 = 0;
        v59 = 0;
      }
    }
    v61 = v58 + 1;
    if (!v50)
      v61 = v58;
    v62 = *v61;
    __p = 0;
    v219 = 0;
    v220 = 0;
    v191 = v60;
    v63 = *v6 & 0xFFFFFFFFFFFFFFF8;
    if ((*v6 & 7) != 0)
      v63 = *(_QWORD *)(v63 + 8);
    else
      *v6 = v63;
    v203 = v63;
    v98 = *(_DWORD *)(v63 + 16);
    v99 = *(_QWORD *)(v209 + 16);
    v221 = &off_1E816EFF0;
    *(_QWORD *)&v222 = sub_1C554C7E0;
    *(_QWORD *)&v223 = &v221;
    v226 = &off_1E816F038;
    v227 = sub_1C554C7F8;
    v229 = (unsigned __int8 **)&v226;
    sub_1C554C3AC(v210, v99, (uint64_t)&v221, (uint64_t)&v226, 1, 0, &v233);
    v100 = (uint64_t (***)())v229;
    if (v229 == (unsigned __int8 **)&v226)
    {
      v101 = (unsigned __int8 *)(v226 + 4);
      v100 = &v226;
      v102 = v206;
    }
    else
    {
      v102 = v206;
      if (!v229)
      {
LABEL_117:
        v103 = (void **)v223;
        if ((void **)v223 == &v221)
        {
          v104 = (void (**)(void **))((char *)v221 + 32);
          v103 = &v221;
        }
        else
        {
          if (!(_QWORD)v223)
          {
LABEL_120:
            v105 = v236;
            if ((_BYTE)v236)
            {
              v106 = v233;
              if (v234 < 0x41)
                goto LABEL_129;
              v107 = 0;
              v108 = ((unint64_t)v234 + 63) >> 6;
              do
              {
                v109 = v108-- < 1;
                if (v109)
                  break;
                v110 = v233[v108];
                v107 += __clz(v110);
              }
              while (!v110);
              v111 = v234 | 0xFFFFFFC0;
              if ((v234 & 0x3F) == 0)
                v111 = 0;
              if (v234 - v107 - v111 <= 0x40)
              {
                v106 = (_QWORD *)*v233;
LABEL_129:
                v112 = v106 == 0;
                v113 = 0x1000000;
                if (v112)
                  v113 = 0x101000000;
LABEL_133:
                v221 = v43;
                *(_QWORD *)&v222 = v113 | v59 | (unint64_t)(v102 << 8) | 0x10000;
                v226 = *(uint64_t (***)())(*(_QWORD *)v205 + 112);
                if (sub_1C553AF20((char **)&__p, v62, (unsigned __int8 *)&v221, v98, (uint64_t)&v226, v196))
                {
                  if (v59)
                  {
                    sub_1C553B2F8(*(_QWORD *)__p, v193);
                    llvm::DataLayout::getAlignment((uint64_t)(v192 + 34), v114);
                    if (v102 < v115)
                    {
                      v116 = *(_DWORD *)(v191[4] + 48);
                      v117 = *(_QWORD *)(v199 + 8) + 40 * (*(_DWORD *)(v199 + 32) + v116);
                      v119 = *(unsigned __int8 *)(v117 + 16);
                      v118 = (unsigned __int8 *)(v117 + 16);
                      if (v119 < v115)
                      {
                        *v118 = v115;
                        if (!*(_BYTE *)(*(_QWORD *)(v199 + 8)
                                       + 40 * (*(_DWORD *)(v199 + 32) + v116)
                                       + 20)
                          && *(unsigned __int8 *)(v199 + 60) < v115)
                        {
                          *(_BYTE *)(v199 + 60) = v115;
                        }
                      }
                    }
                  }
                  v120 = *(_QWORD *)(a2 + 24);
                  v225 = 0u;
                  v224 = 0u;
                  v223 = 0u;
                  v222 = 0u;
                  v121 = *(_QWORD *)(v120 + 32);
                  v122 = *(_QWORD *)(v121 + 40);
                  v221 = &off_1E816EC08;
                  *(_QWORD *)&v222 = v121;
                  *(_QWORD *)&v223 = v122;
                  *((_QWORD *)&v222 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v121 + 16) + 104))(*(_QWORD *)(v121 + 16));
                  v226 = 0;
                  if (*((_QWORD *)&v223 + 1))
                  {
                    llvm::MetadataTracking::untrack((uint64_t)&v223 + 8, *((unsigned __int8 **)&v223 + 1));
                    *((_QWORD *)&v223 + 1) = v226;
                    if (v226)
                      llvm::MetadataTracking::retrack((uint64_t)&v226, (unsigned __int8 *)v226, (uint64_t)&v223 + 8);
                  }
                  else
                  {
                    *((_QWORD *)&v223 + 1) = 0;
                  }
                  *((_QWORD *)&v224 + 1) = a2;
                  *(_QWORD *)&v225 = 0;
                  *(_QWORD *)&v224 = *(_QWORD *)(a2 + 24);
                  if ((__int128 *)(a2 + 56) != (__int128 *)((char *)&v223 + 8))
                  {
                    if (*((_QWORD *)&v223 + 1))
                      llvm::MetadataTracking::untrack((uint64_t)&v223 + 8, *((unsigned __int8 **)&v223 + 1));
                    v123 = *(unsigned __int8 **)(a2 + 56);
                    *((_QWORD *)&v223 + 1) = v123;
                    if (v123)
                      llvm::MetadataTracking::track((uint64_t)&v223 + 8, v123, 2);
                  }
                  v194 = v105;
                  v198 = a2;
                  v124 = (unint64_t *)__p;
                  v125 = v219;
                  v126 = *(uint64_t (***)())__p;
                  v217 = *(_QWORD *)__p;
                  v208 = ((char *)v219 - (_BYTE *)__p) >> 3;
                  if ((unint64_t)((char *)v219 - (_BYTE *)__p) >= 9)
                  {
                    v127 = 2;
                    v128 = 1;
                    do
                    {
                      v129 = &v124[v128];
                      v131 = sub_1C4825F50(v129);
                      if ((_DWORD)v130 == 1)
                      v133 = sub_1C4825F50(&v217);
                      if ((_DWORD)v132 == 1)
                      if (v131 > v133)
                        v217 = *v129;
                      v128 = v127;
                      v109 = v208 > v127++;
                    }
                    while (v109);
                    v126 = (uint64_t (**)())v217;
                  }
                  v201 = sub_1C553B584(v210, v126, (uint64_t)&v221);
                  if (v201)
                  {
                    if ((v211 & 0x80000000) != 0
                      && (v154 = *(_QWORD *)(v209 + 16),
                          (v211 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v154 + 432)))
                    {
                      v155 = *(_QWORD *)(*(_QWORD *)(v154 + 424) + 8 * (v211 & 0x7FFFFFFF));
                    }
                    else
                    {
                      v155 = 0;
                    }
                    v216 = v155;
                    if (v125 == v124)
                    {
LABEL_214:
                      v183 = v198;
                      v105 = v194;
                      if ((*(_BYTE *)v198 & 4) == 0)
                      {
                        v183 = v198;
                        if ((*(_WORD *)(v198 + 44) & 8) != 0)
                        {
                          v183 = v198;
                          do
                            v183 = *(_QWORD *)(v183 + 8);
                          while ((*(_WORD *)(v183 + 44) & 8) != 0);
                        }
                      }
                      sub_1C487FE80(*(_QWORD *)(v198 + 24) + 40, v198, *(_QWORD *)(v183 + 8));
                      v26 = 1;
                    }
                    else
                    {
                      v156 = 0;
                      v157 = 0;
                      v158 = 1;
                      while (1)
                      {
                        v215 = v124[v156];
                        v160 = sub_1C4825F50(&v215);
                        if ((_DWORD)v159 == 1)
                        v161 = (unint64_t)(v160 + 7) >> 3;
                        if (v161 >= v43)
                          v162 = v161 - (_DWORD)v43;
                        else
                          v162 = 0;
                        v164 = sub_1C4825F50(&v215);
                        if ((_DWORD)v163 == 1)
                        v166 = sub_1C4825F50(&v217);
                        if ((_DWORD)v165 == 1)
                        v167 = v201;
                        if (v164 < v166)
                        {
                          if ((MVTForLLT = llvm::getMVTForLLT(v215),
                                v179 = llvm::getMVTForLLT(v217),
                                v180 = (uint64_t (**)())v215,
                                (v217 & 0xFFFFFFFFFFFFFFF9) != 0)
                            && (v217 & 4) != 0
                            || (v215 & 0xFFFFFFFFFFFFFFF9) != 0 && (v215 & 4) != 0
                            || (v181 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v196 + 1160))(v196, v179, 0, MVTForLLT, 0), v180 = (uint64_t (**)())v215, !v181))
                          {
                            v167 = sub_1C553B584(v210, v180, (uint64_t)&v221);
                          }
                          else
                          {
                            v239 = v215;
                            v240 = 0;
                            LODWORD(v226) = v201;
                            LODWORD(v228) = 0;
                            (*((void (**)(void **, uint64_t, unint64_t *, uint64_t, uint64_t (***)(), uint64_t, _QWORD))v221
                             + 4))(&v221, 119, &v239, 1, &v226, 1, 0);
                            v167 = *(_DWORD *)(*(_QWORD *)(v182 + 32) + 4);
                          }
                          if (!v167)
                            break;
                        }
                        v168 = (v157 - v162);
                        v169 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v205, v203, v168, v215);
                        v170 = v211;
                        if (v157 != v162)
                        {
                          v172 = sub_1C4825F50(&v216);
                          if ((_DWORD)v171 == 1)
                          v226 = (uint64_t (**)())((8 * v172) | 1);
                          LODWORD(v227) = 0;
                          v173 = sub_1C5544694((uint64_t)&v221, (unint64_t *)&v226, v168);
                          v239 = v216;
                          v240 = 0;
                          LODWORD(v226) = v211;
                          LODWORD(v228) = 0;
                          v229 = (unsigned __int8 **)v173;
                          *(_QWORD *)&v230 = v174;
                          DWORD2(v230) = 1;
                          (*((void (**)(void **, uint64_t, unint64_t *, uint64_t, uint64_t (***)(), uint64_t, _QWORD))v221
                           + 4))(&v221, 193, &v239, 1, &v226, 2, 0);
                          v170 = *(_DWORD *)(*(_QWORD *)(v175 + 32) + 4);
                        }
                        LODWORD(v226) = v167;
                        LODWORD(v228) = 0;
                        LODWORD(v239) = v170;
                        v241 = 0;
                        sub_1C5546848(&v221, (int *)&v226, (int *)&v239, v169);
                        v177 = sub_1C4825F50(&v215);
                        if ((_DWORD)v176 == 1)
                        LODWORD(v43) = (_DWORD)v43 - v161;
                        v157 = v168 + ((unint64_t)(v177 + 7) >> 3);
                        v156 = v158;
                        v109 = v208 > v158++;
                        if (!v109)
                          goto LABEL_214;
                      }
                      v26 = 2;
                      v105 = v194;
                    }
                  }
                  else
                  {
                    v26 = 2;
                    v105 = v194;
                  }
                  v221 = &off_1E816EC08;
                  if (*((_QWORD *)&v223 + 1))
                    llvm::MetadataTracking::untrack((uint64_t)&v223 + 8, *((unsigned __int8 **)&v223 + 1));
                }
                else
                {
                  v26 = 2;
                }
                if (v105 && v234 >= 0x41 && v233)
                  MEMORY[0x1CAA32F9C](v233, 0x1000C8000313F17);
                v153 = __p;
                if (!__p)
                  goto LABEL_28;
                goto LABEL_225;
              }
            }
            v113 = 0x1000000;
            goto LABEL_133;
          }
          v104 = (void (**)(void **))(*(_QWORD *)v223 + 40);
        }
        (*v104)(v103);
        goto LABEL_120;
      }
      v101 = *v229 + 40;
    }
    (*(void (**)(uint64_t (***)()))v101)(v100);
    goto LABEL_117;
  }
  v25 = sub_1C553BA20(v209, a2, v211, v210, v23, -1, v206, v15, (v24 & 4) != 0);
LABEL_19:
  v26 = v25;
LABEL_28:
  if (v21 >= 0x41 && v212)
    MEMORY[0x1CAA32F9C](v212, 0x1000C8000313F17);
  return v26;
}

uint64_t sub_1C5539548(unint64_t a1)
{
  const char *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;

  v9 = a1;
  v2 = sub_1C4825F50(&v9) + 7;
  if ((_DWORD)v1 == 1)
  {
    v8 = v2;
    v2 = v8;
  }
  if (v2 >= 8)
  {
    v4 = ((v2 >> 3) - 1) | (((v2 >> 3) - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = v5 | (v5 >> 8) | ((v5 | (v5 >> 8)) >> 16);
    v3 = (v6 | HIDWORD(v6)) + 1;
  }
  else
  {
    v3 = 0;
  }
  return 63 - __clz(v3);
}

char **sub_1C55395D0(uint64_t *a1, uint64_t a2, unsigned int a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int *v38;
  uint64_t v39;
  int v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  char *v46;
  uint64_t v47;
  void **v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  __int128 v59;
  _DWORD *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  __int128 v90;
  unsigned int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  _DWORD v100[8];
  void *v101;
  uint64_t v102;
  _DWORD v103[48];
  void *v104;
  uint64_t v105;
  _BYTE v106[624];
  char *v107[2];
  uint64_t v108;
  char *v109;
  uint64_t v110;
  _QWORD v111[38];

  v6 = a2;
  v111[36] = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  if (v8 < 0 && (v9 = a1[2], v10 = v8 & 0x7FFFFFFF, v10 < *(_DWORD *)(v9 + 432)))
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v10);
  else
    v11 = 0;
  v12 = 0x800000000000000;
  if ((v11 & 2) == 0)
    v12 = 0x8000000000000;
  if ((v12 & v11) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  v13 = *(_QWORD *)(v6 + 16);
  v14 = *(unsigned __int8 *)(v13 + 4);
  v93 = *(_DWORD *)(v6 + 40);
  v15 = (*(_BYTE *)(v13 + 8) & 2) == 0 || *(_DWORD *)(v6 + 40) == v14;
  v16 = v15;
  v17 = *(unsigned __int8 *)(v13 + 4);
  if (!v15)
  {
    v83 = *(unsigned __int8 *)(v13 + 4);
    v17 = v83;
    do
    {
      v84 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 32 * v83);
      if ((v84 & 0x10000FF) != 0x1000000)
        break;
      v17 += (v84 & 0x2000000) == 0;
      if (v93 - 1 == v83)
        break;
      ++v83;
    }
    while ((v84 & 0x2000000) == 0);
  }
  v18 = *(_QWORD *)(v13 + 32);
  if (v18)
  {
    v19 = -1;
    do
      ++v19;
    while (*(_WORD *)(v18 + 2 * v19));
  }
  else
  {
    v19 = 0;
  }
  if ((v16 & 1) != 0)
  {
    v20 = v14;
  }
  else
  {
    v20 = v14;
    do
    {
      v85 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 32 * v14);
      if ((v85 & 0x10000FF) != 0x1000000)
        break;
      v20 += (v85 & 0x2000000) == 0;
      if (v93 - 1 == v14)
        break;
      ++v14;
    }
    while ((v85 & 0x2000000) == 0);
  }
  if (v18)
  {
    v21 = -1;
    do
      ++v21;
    while (*(_WORD *)(v18 + 2 * v21));
  }
  else
  {
    v21 = 0;
  }
  v22 = v21 + v20;
  v104 = v106;
  v105 = 0x800000000;
  v23 = v111;
  v109 = (char *)v111;
  v110 = 0x200000000;
  v94 = v22;
  v87 = a3;
  if (v22 < 3)
  {
    if ((_DWORD)v22)
    {
      v81 = v21 + v20;
      do
      {
        *v23 = v23 + 2;
        v23[1] = 0x800000000;
        if ((_DWORD)v105)
          v23 = (_QWORD *)sub_1C6273000((uint64_t)v23, (uint64_t)&v104);
        v23 += 18;
        --v81;
      }
      while (v81);
    }
    LODWORD(v110) = v94;
  }
  else
  {
    sub_1C6272F14((uint64_t)&v109, v22, (uint64_t)&v104);
  }
  if (v104 != v106)
    free(v104);
  v92 = v19 + v17;
  v104 = v106;
  v105 = 0x800000000;
  v107[0] = (char *)&v108;
  v107[1] = (char *)0x200000000;
  sub_1C553C3FC((uint64_t)v107, v94, (uint64_t)&v104);
  if (v104 != v106)
    free(v104);
  v24 = v93 - v92;
  v25 = v87;
  if ((_DWORD)v94)
  {
    v26 = 0;
    v27 = 4;
    do
    {
      v28 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + v27);
      if (v28 < 0 && (v29 = a1[2], v30 = v28 & 0x7FFFFFFF, v30 < *(_DWORD *)(v29 + 432)))
        v31 = *(_QWORD *)(*(_QWORD *)(v29 + 424) + 8 * v30);
      else
        v31 = 0;
      sub_1C5539EC0((uint64_t)&v109[v26], v31, v87);
      v26 += 144;
      v27 += 32;
    }
    while (144 * v94 != v26);
  }
  v101 = v103;
  v102 = 0x800000000;
  v32 = v106;
  v104 = v106;
  v105 = 0x300000000;
  if (v24 < 4)
  {
    v33 = v94;
    if (v93 != v92)
    {
      v82 = v93 - v92;
      do
      {
        *v32 = v32 + 2;
        v32[1] = 0x800000000;
        if ((_DWORD)v102)
          v32 = (_QWORD *)sub_1C6273398((uint64_t)v32, (uint64_t)&v101);
        v32 += 26;
        --v82;
      }
      while (v82);
    }
    LODWORD(v105) = v93 - v92;
    v25 = v87;
  }
  else
  {
    sub_1C62732AC((uint64_t)&v104, v24, (uint64_t)&v101);
    v33 = v94;
  }
  v96 = a1;
  if (v101 != v103)
    free(v101);
  v86 = (unsigned __int16)(v11 >> 3);
  v97 = v6;
  if (v33 < *(_DWORD *)(v6 + 40))
  {
    v34 = 0;
    v35 = v94;
    do
    {
      if (a5)
      {
        v36 = 4 * a5;
        v37 = a4;
        while (v35 != *v37)
        {
          ++v37;
          v36 -= 4;
          if (!v36)
            goto LABEL_54;
        }
        v45 = *((_DWORD *)v109 + 2);
        if (v45)
        {
          v46 = (char *)v104 + 208 * v34;
          v47 = *(_QWORD *)(v97 + 32) + 32 * v35;
          v48 = (void **)(v47 + 16);
          while (*(_BYTE *)v47 != 1)
          {
            if (*(_BYTE *)v47)
            {
              LODWORD(v101) = *(_DWORD *)v48;
              v49 = 2;
              goto LABEL_67;
            }
            LODWORD(v101) = *(_DWORD *)(v47 + 4);
            v103[0] = 0;
LABEL_68:
            v50 = sub_1C4926708((uint64_t)v46, (unint64_t)&v101, 1);
            v51 = *(_QWORD *)v46 + 24 * *((unsigned int *)v46 + 2);
            v52 = *(_OWORD *)v50;
            *(_QWORD *)(v51 + 16) = *(_QWORD *)(v50 + 16);
            *(_OWORD *)v51 = v52;
            ++*((_DWORD *)v46 + 2);
            if (!--v45)
              goto LABEL_69;
          }
          v101 = *v48;
          v49 = 3;
LABEL_67:
          v103[0] = v49;
          goto LABEL_68;
        }
      }
      else
      {
LABEL_54:
        v101 = v103;
        v102 = 0x800000000;
        sub_1C55347B8(a1, (const char *)*(unsigned int *)(*(_QWORD *)(v6 + 32) + 32 * v35 + 4), v25, (uint64_t)&v101);
        v38 = (int *)v101;
        if ((_DWORD)v102)
        {
          v39 = 4 * v102;
          do
          {
            v40 = *v38++;
            v41 = (char *)v104 + 208 * v34;
            LODWORD(v98) = v40;
            v100[0] = 0;
            v42 = sub_1C4926708((uint64_t)v41, (unint64_t)&v98, 1);
            v43 = *(_QWORD *)v41 + 24 * *((unsigned int *)v41 + 2);
            v44 = *(_OWORD *)v42;
            *(_QWORD *)(v43 + 16) = *(_QWORD *)(v42 + 16);
            *(_OWORD *)v43 = v44;
            ++*((_DWORD *)v41 + 2);
            v39 -= 4;
          }
          while (v39);
          v38 = (int *)v101;
          v25 = v87;
        }
        if (v38 != v103)
          free(v38);
      }
LABEL_69:
      ++v35;
      ++v34;
      v6 = v97;
    }
    while (v35 < *(unsigned int *)(v97 + 40));
  }
  LODWORD(v53) = v86 / v25;
  v88 = v86 % v25;
  if (v86 % v25)
    v53 = (v53 + 1);
  else
    v53 = v53;
  v54 = a1;
  v55 = v94;
  v95 = v53;
  if ((_DWORD)v53)
  {
    v56 = 0;
    do
    {
      v98 = v100;
      v99 = 0x200000000;
      if ((_DWORD)v55)
      {
        v57 = 0;
        v58 = 0;
        do
        {
          v59 = *(_OWORD *)(*(_QWORD *)&v109[v57] + 16 * v56);
          if (v58 >= HIDWORD(v99))
          {
            v90 = *(_OWORD *)(*(_QWORD *)&v109[v57] + 16 * v56);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v58 + 1, 16);
            v59 = v90;
            v58 = v99;
          }
          *((_OWORD *)v98 + v58) = v59;
          v58 = v99 + 1;
          LODWORD(v99) = v99 + 1;
          v57 += 144;
        }
        while (144 * v94 != v57);
      }
      else
      {
        v58 = 0;
      }
      v101 = v103;
      v102 = 0x300000000;
      if (v93 == v92)
      {
        v60 = v103;
        v61 = 0;
      }
      else
      {
        v62 = 0;
        v63 = v93 - v92;
        do
        {
          v64 = sub_1C4926708((uint64_t)&v101, *(_QWORD *)((char *)v104 + v62) + 24 * v56, 1);
          v65 = (char *)v101 + 24 * v102;
          v66 = *(_OWORD *)v64;
          *((_QWORD *)v65 + 2) = *(_QWORD *)(v64 + 16);
          *(_OWORD *)v65 = v66;
          v61 = v102 + 1;
          LODWORD(v102) = v102 + 1;
          v62 += 208;
          --v63;
        }
        while (v63);
        v58 = v99;
        v60 = v101;
      }
      (*(void (**)(uint64_t, _QWORD, void *, _QWORD, _DWORD *, _QWORD, uint64_t))(*(_QWORD *)*v54 + 32))(*v54, **(unsigned __int16 **)(v6 + 16), v98, v58, v60, v61, *(unsigned __int16 *)(v6 + 44) | 0x100000000);
      if ((_DWORD)v55)
      {
        v68 = v67;
        v69 = 0;
        v70 = 4;
        do
        {
          v71 = &v107[0][v69];
          v72 = *(_DWORD *)(*(_QWORD *)(v68 + 32) + v70);
          v73 = *(unsigned int *)&v107[0][v69 + 8];
          if (v73 >= *(unsigned int *)&v107[0][v69 + 12])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107[0][v69], (uint64_t)(v71 + 16), v73 + 1, 4);
            v73 = *((unsigned int *)v71 + 2);
          }
          *(_DWORD *)(*(_QWORD *)v71 + 4 * v73) = v72;
          ++*((_DWORD *)v71 + 2);
          v69 += 48;
          v70 += 32;
        }
        while (48 * v94 != v69);
      }
      if (v101 != v103)
        free(v101);
      if (v98 != v100)
        free(v98);
      ++v56;
      v54 = v96;
      v6 = v97;
      v55 = v94;
    }
    while (v56 != v95);
  }
  if (v88)
  {
    if ((_DWORD)v55)
    {
      v74 = 0;
      v75 = 4;
      do
      {
        sub_1C5534E9C(v54, *(_DWORD *)(*(_QWORD *)(v6 + 32) + v75), *(_QWORD *)&v107[0][v74], *(unsigned int *)&v107[0][v74 + 8]);
        v74 += 48;
        v75 += 32;
      }
      while (48 * v55 != v74);
    }
  }
  else if ((_DWORD)v55)
  {
    v76 = 0;
    v77 = 4;
    do
    {
      v78 = *v54;
      LODWORD(v101) = *(_DWORD *)(*(_QWORD *)(v6 + 32) + v77);
      LODWORD(v102) = 1;
      sub_1C5544D6C(v78, (uint64_t)&v101, *(int **)&v107[0][v76], *(unsigned int *)&v107[0][v76 + 8]);
      v76 += 48;
      v77 += 32;
    }
    while (48 * v55 != v76);
  }
  v79 = v6;
  if ((*(_BYTE *)v6 & 4) == 0)
  {
    v79 = v6;
    if ((*(_WORD *)(v6 + 44) & 8) != 0)
    {
      v79 = v6;
      do
        v79 = *(_QWORD *)(v79 + 8);
      while ((*(_WORD *)(v79 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(v6 + 24) + 40, v6, *(_QWORD *)(v79 + 8));
  sub_1C6273478((char **)&v104);
  sub_1C6273234(v107);
  return sub_1C62730D0(&v109);
}

unint64_t sub_1C5539EC0(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v5;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t result;
  int v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v19 = 0;
  v5 = 3;
  if ((a2 & 1) == 0)
    v5 = 19;
  v6 = a2 & 0x8000000000000000 | (8 * (a2 >> v5)) | 1;
  v7 = 35;
  v8 = 19;
  if ((a2 & 4) == 0)
    v7 = 19;
  v9 = a2 >> v7;
  if ((a2 & 4) == 0)
    v8 = 3;
  if ((a2 & 1) != 0)
    v8 = 3;
  v10 = (8 * (unsigned __int16)(a2 >> v8)) & 0xFFFFF8000007FFFFLL | ((v9 & 0xFFFFFF) << 19);
  if ((a2 & 2) != 0)
    v11 = v10 | 2;
  else
    v11 = v6;
  if (a3 != 1)
    v11 = sub_1C4953AD0(a3, v11);
  result = sub_1C553A8CC(a2, v11, &v19);
  v13 = result;
  if ((int)result >= 1)
  {
    v14 = *(_DWORD *)(a1 + 8);
    do
    {
      if (v14 >= *(_DWORD *)(a1 + 12))
      {
        result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v14 + 1, 16);
        v14 = *(_DWORD *)(a1 + 8);
      }
      v15 = (unint64_t *)(*(_QWORD *)a1 + 16 * v14);
      *v15 = v11;
      v15[1] = 0;
      v14 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v14;
      --v13;
    }
    while (v13);
  }
  v16 = v19;
  if ((v19 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v17 = *(unsigned int *)(a1 + 8);
    if (v17 >= *(_DWORD *)(a1 + 12))
    {
      result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v17 + 1, 16);
      LODWORD(v17) = *(_DWORD *)(a1 + 8);
    }
    v18 = (unint64_t *)(*(_QWORD *)a1 + 16 * v17);
    *v18 = v16;
    v18[1] = 0;
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t sub_1C553A028(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  const char *v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  const char *v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t *v36;
  const char *v37;
  unint64_t i;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  _DWORD v105[8];
  void *v106;
  uint64_t v107;
  _QWORD v108[6];

  v5 = a1;
  v108[4] = *MEMORY[0x1E0C80C00];
  v102 = a4;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_DWORD *)(v6 + 4);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432))
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 424) + 8 * (v7 & 0x7FFFFFFF));
  else
    v9 = 0;
  v101 = v9;
  v10 = *(_DWORD *)(v6 + 36);
  if (v10 < 0 && (v11 = v10 & 0x7FFFFFFF, v11 < *(_DWORD *)(v8 + 432)))
    v12 = *(_QWORD *)(*(_QWORD *)(v8 + 424) + 8 * v11);
  else
    v12 = 0;
  v100 = v12;
  if (v12 == a4)
    return 2;
  if (a3 == 1)
  {
    v14 = sub_1C4825F50(&v101);
    if ((_DWORD)v13 == 1)
    v16 = sub_1C4825F50(&v102);
    if ((_DWORD)v15 == 1)
    if (!(v14 % v16))
    {
      v17 = v102;
      if ((v102 & 2) != 0)
        v18 = 0x800000000000000;
      else
        v18 = 0x8000000000000;
      if ((v18 & v102) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
        v17 = v102;
      }
      if ((v12 & 2) != 0)
        v19 = 0x800000000000000;
      else
        v19 = 0x8000000000000;
      if ((v19 & v12) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
      if ((unsigned __int16)(v17 >> 3) < (unsigned __int16)(v12 >> 3))
      {
        v106 = v108;
        v107 = 0x800000000;
        v20 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
        v93 = v7;
        if (v20 < 0 && (v21 = *(_QWORD *)(v5 + 16), v22 = v20 & 0x7FFFFFFF, v22 < *(_DWORD *)(v21 + 432)))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * v22);
          if ((v23 & 0xFFFFFFFFFFFFFFF9) != 0 && (v23 & 4) != 0)
          {
            v24 = 3;
            if ((v23 & 1) == 0)
              v24 = 19;
            v25 = v23 >> v24;
            if ((v23 & 2) != 0)
              v23 = (v23 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v25) | 2;
            else
              v23 = v23 & 0x8000000000000000 | (8 * v25) | 1;
          }
        }
        else
        {
          v23 = 0;
        }
        if (*(_DWORD *)(a2 + 40) >= 2u)
        {
          v35 = 1;
          do
          {
            v36 = *(uint64_t **)v5;
            LODWORD(v103) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v35 + 4);
            v105[0] = 0;
            sub_1C5544C30(v36, v23, (int *)&v103);
            v37 = v15;
            for (i = 0; ; ++i)
            {
              v39 = *((_QWORD *)v37 + 2);
              v40 = *(unsigned __int8 *)(v39 + 4);
              if ((*(_BYTE *)(v39 + 8) & 2) == 0 || (v46 = *((_DWORD *)v37 + 10), v46 == v40))
              {
                v41 = *(unsigned __int8 *)(v39 + 4);
              }
              else
              {
                v47 = v46 - 1;
                v41 = *(unsigned __int8 *)(v39 + 4);
                do
                {
                  v48 = *(_DWORD *)(*((_QWORD *)v37 + 4) + 32 * v40);
                  if ((v48 & 0x10000FF) != 0x1000000)
                    break;
                  v41 += (v48 & 0x2000000) == 0;
                  if (v47 == v40)
                    break;
                  ++v40;
                }
                while ((v48 & 0x2000000) == 0);
              }
              v42 = *(_QWORD *)(v39 + 32);
              if (v42)
              {
                v43 = -1;
                do
                  ++v43;
                while (*(_WORD *)(v42 + 2 * v43));
              }
              else
              {
                v43 = 0;
              }
              if (i >= v43 + v41)
                break;
              v44 = *(_DWORD *)(*((_QWORD *)v37 + 4) + 32 * i + 4);
              v45 = v107;
              if (v107 >= (unint64_t)HIDWORD(v107))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v107 + 1, 4);
                v45 = v107;
              }
              *((_DWORD *)v106 + v45) = v44;
              LODWORD(v107) = v107 + 1;
            }
            ++v35;
          }
          while (v35 < *(unsigned int *)(a2 + 40));
        }
        v103 = v105;
        v104 = 0x800000000;
        v49 = v102;
        if ((v102 & 2) != 0)
          v50 = 0x800000000000000;
        else
          v50 = 0x8000000000000;
        if ((v50 & v102) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
          v49 = v102;
        }
        v51 = v101;
        if ((v101 & 2) != 0)
          v52 = 0x800000000000000;
        else
          v52 = 0x8000000000000;
        if ((v52 & v101) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
          v51 = v101;
        }
        if ((unsigned __int16)(v49 >> 3) <= (unsigned __int16)(v51 >> 3))
        {
          v68 = 0;
          v69 = (unsigned __int16)(v49 >> 3);
          v70 = (unsigned __int16)(v51 >> 3) / v69;
          if (v70 <= 1)
            v71 = 1;
          else
            v71 = v70;
          do
          {
            v72 = *(_QWORD *)v5;
            v98 = v102;
            v99 = 0;
            sub_1C5544D6C(v72, (uint64_t)&v98, (int *)((char *)v106 + v68), v69);
            v74 = *(_DWORD *)(*(_QWORD *)(v73 + 32) + 4);
            v75 = v104;
            if (v104 >= (unint64_t)HIDWORD(v104))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, (uint64_t)v105, v104 + 1, 4);
              v75 = v104;
            }
            *((_DWORD *)v103 + v75) = v74;
            v53 = v104 + 1;
            LODWORD(v104) = v104 + 1;
            v68 += 4 * v69;
            --v71;
          }
          while (v71);
        }
        else
        {
          v53 = v104;
        }
        v54 = *(_QWORD *)v5;
        LODWORD(v98) = v93;
        v99 = 1;
        sub_1C5544D6C(v54, (uint64_t)&v98, (int *)v103, v53);
        v55 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v55 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v55 = a2;
            do
              v55 = *(_QWORD *)(v55 + 8);
            while ((*(_WORD *)(v55 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v55 + 8));
        if (v103 != v105)
          free(v103);
        v56 = v106;
        if (v106 == v108)
          return 1;
        goto LABEL_85;
      }
    }
    return 2;
  }
  v27 = sub_1C4825F50(&v102);
  if ((_DWORD)v26 == 1)
  v29 = sub_1C4825F50(&v100);
  if ((_DWORD)v28 == 1)
  if (v27 % v29)
    return 2;
  v31 = sub_1C4825F50(&v101);
  if ((_DWORD)v30 == 1)
  v33 = sub_1C4825F50(&v102);
  if ((_DWORD)v32 == 1)
  if (v31 % v33)
    return 2;
  v106 = v108;
  v107 = 0x800000000;
  v57 = v101;
  if ((v101 & 2) != 0)
    v58 = 0x800000000000000;
  else
    v58 = 0x8000000000000;
  if ((v58 & v101) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v32);
    v57 = v101;
  }
  v94 = v7;
  v59 = v102;
  if ((v102 & 2) != 0)
    v60 = 0x800000000000000;
  else
    v60 = 0x8000000000000;
  if ((v60 & v102) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v32);
    v59 = v102;
  }
  v61 = v100;
  LOWORD(v62) = 1;
  v63 = v59;
  if ((v100 & 0xFFFFFFFFFFFFFFF9) != 0 && (v100 & 4) != 0)
  {
    v64 = 0x8000000000000;
    if ((v100 & 2) != 0)
      v64 = 0x800000000000000;
    v63 = v59;
    if ((v64 & v100) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v32);
      v61 = v100;
      v63 = v102;
    }
    v62 = v61 >> 3;
  }
  v65 = 0x800000000000000;
  if ((v63 & 2) == 0)
    v65 = 0x8000000000000;
  if ((v65 & v63) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v32);
    LODWORD(v63) = v102;
  }
  if ((unsigned __int16)(v59 >> 3) <= (unsigned __int16)(v57 >> 3))
  {
    v76 = 0;
    v77 = (unsigned __int16)(v57 >> 3) / (unsigned __int16)(v59 >> 3);
    v62 = (unsigned __int16)v62;
    if (v77 <= 1)
      v78 = 1;
    else
      v78 = v77;
    LODWORD(v79) = (unsigned __int16)(v63 >> 3) / (unsigned __int16)v62;
    v97 = v79;
    if (v79 <= 1)
      v79 = 1;
    else
      v79 = v79;
    v95 = v5;
    v96 = v79;
    v80 = v63 >> 3;
    do
    {
      v103 = v105;
      v104 = 0x800000000;
      if (v62 <= (unsigned __int16)v80)
      {
        v83 = v80;
        v84 = v78;
        v85 = v62;
        v81 = 0;
        v86 = 0;
        v87 = v96;
        do
        {
          v88 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * (v76 * v97 + 1 + v86) + 4);
          if (v81 >= HIDWORD(v104))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, (uint64_t)v105, v81 + 1, 4);
            v81 = v104;
          }
          *((_DWORD *)v103 + v81) = v88;
          v81 = v104 + 1;
          LODWORD(v104) = v104 + 1;
          ++v86;
          --v87;
        }
        while (v87);
        v82 = (int *)v103;
        v62 = v85;
        v78 = v84;
        v80 = v83;
        v5 = v95;
      }
      else
      {
        v81 = 0;
        v82 = v105;
      }
      v89 = *(_QWORD *)v5;
      v98 = v102;
      v99 = 0;
      sub_1C5544D6C(v89, (uint64_t)&v98, v82, v81);
      v91 = *(_DWORD *)(*(_QWORD *)(v90 + 32) + 4);
      v92 = v107;
      if (v107 >= (unint64_t)HIDWORD(v107))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v107 + 1, 4);
        v92 = v107;
      }
      *((_DWORD *)v106 + v92) = v91;
      LODWORD(v107) = v107 + 1;
      if (v103 != v105)
        free(v103);
      ++v76;
    }
    while (v76 != v78);
  }
  v66 = *(_QWORD *)v5;
  LODWORD(v103) = v94;
  LODWORD(v104) = 1;
  sub_1C5544D6C(v66, (uint64_t)&v103, (int *)v106, v107);
  v67 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v67 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v67 = a2;
      do
        v67 = *(_QWORD *)(v67 + 8);
      while ((*(_WORD *)(v67 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v67 + 8));
  v56 = v106;
  if (v106 == v108)
    return 1;
LABEL_85:
  free(v56);
  return 1;
}

unint64_t sub_1C553A8CC(unint64_t a1, unint64_t a2, unint64_t *a3)
{
  const char *v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;

  v20 = a2;
  v21 = a1;
  v5 = sub_1C4825F50(&v21);
  if ((_DWORD)v4 == 1)
  v6 = sub_1C4825F50(&v20);
  if ((_DWORD)v7 == 1)
  {
    v19 = v6;
    v6 = v19;
  }
  v8 = v5 / v6;
  v9 = v5 % v6;
  if ((_DWORD)v9)
  {
    if ((v20 & 0xFFFFFFFFFFFFFFF9) != 0 && (v20 & 4) != 0)
    {
      v11 = (unsigned __int16)(v21 >> 3);
      v12 = (unsigned __int16)(v21 >> 19);
      if ((v21 & 2) == 0)
        v12 = (v21 >> 19);
      if ((v21 & 4) != 0)
        v11 = v12;
      if ((v21 & 1) != 0)
        v13 = (v21 >> 3);
      else
        v13 = v11;
      v14 = v9 / v13;
      if (v9 % v13)
      {
        v10 = 0xFFFFFFFF00000000;
        v8 = -1;
        return v10 | v8;
      }
      v15 = (8 * v13) | 1;
      if ((_DWORD)v14 != 1)
        v15 = sub_1C4953AD0(v14, v15);
    }
    else
    {
      v15 = (8 * v9) | 1;
    }
    *a3 = v15;
    v17 = sub_1C4825F50(a3);
    if ((_DWORD)v16 == 1)
    v10 = (v9 / v17) << 32;
  }
  else
  {
    v10 = 0;
  }
  return v10 | v8;
}

uint64_t sub_1C553AA14(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::MachineMemOperand *MachineMemOperand;
  int GenericVirtualRegister;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v20;
  int v21;
  int v22[6];
  int v23[4];
  int v24;
  int v25;
  uint64_t v26;

  v26 = a2;
  v9 = *(uint64_t **)a1;
  v20 = *(_QWORD *)(**(_QWORD **)a1 + 8);
  v21 = sub_1C4825F50((unint64_t *)&v26);
  if ((_DWORD)v10 == 1)
  {
    if (!a4)
      return a5;
  }
  else if (!a4)
  {
    return a5;
  }
  v11 = 0;
  v12 = 4 * a4;
  do
  {
    if (a5 >= *(_DWORD *)(a1 + 8))
      break;
    v25 = 0;
    sub_1C5544564(*v9, &v25, *(_DWORD *)(a1 + 12), *(_QWORD *)(a1 + 16), a5 >> 3, (uint64_t)v23);
    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v20, a1 + 24, a5 >> 3, v26);
    if (*(_BYTE *)(a1 + 104))
    {
      GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v9[2], v26, "", 0);
      v15 = *(unsigned int *)(a3 + 8);
      if (v15 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 4);
        v15 = *(unsigned int *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v15) = GenericVirtualRegister;
      ++*(_DWORD *)(a3 + 8);
      v16 = (_QWORD *)*v9;
      v22[0] = GenericVirtualRegister;
      v22[2] = 1;
      v23[0] = v25;
      v24 = 0;
      sub_1C55464EC(v16, 0x5Au, v22, v23, MachineMemOperand);
    }
    else
    {
      v17 = (_QWORD *)*v9;
      v23[0] = *(_DWORD *)(*(_QWORD *)a3 + v11);
      v24 = 0;
      v22[0] = v25;
      v22[4] = 0;
      sub_1C5546848(v17, v23, v22, MachineMemOperand);
    }
    v18 = *(_BYTE *)(a1 + 105) ? -v21 : v21;
    a5 = (v18 + a5);
    v11 += 4;
  }
  while (v12 != v11);
  return a5;
}

uint64_t sub_1C553ABF0(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  void (**v4)(void);
  uint64_t (**v6)();
  int v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = &off_1E816E8B0;
  v7 = a3;
  v8 = &v6;
  v3 = sub_1C554FA88(a1, a2, (uint64_t)&v6, 1);
  if (v8 == &v6)
  {
    v4 = (void (**)(void))(v6 + 4);
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = (void (**)(void))(*v8 + 5);
LABEL_5:
    (*v4)();
  }
  return v3;
}

uint64_t sub_1C553AC9C(unsigned int a1, uint64_t a2, int a3, uint64_t a4, __int128 *a5, llvm::LLVMContext *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const llvm::APInt *v14;
  llvm::ValueHandleBase *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a3 == 2)
    goto LABEL_6;
  v9 = a2;
  if (a3 == 1)
  {
    if ((a2 & 0x80000000) != 0)
    {
      v10 = *(_QWORD *)(a4 + 24);
      if ((a2 & 0x7FFFFFFF) < *(_DWORD *)(v10 + 432))
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v10 + 424) + 8 * (a2 & 0x7FFFFFFF));
        goto LABEL_7;
      }
    }
LABEL_6:
    v9 = 0;
  }
LABEL_7:
  *(_QWORD *)&v31 = v9;
  DWORD2(v31) = 0;
  v11 = sub_1C5544694(a4, (unint64_t *)&v31, a1);
  v13 = v12;
  *(_QWORD *)&v31 = v9;
  DWORD2(v31) = 0;
  v15 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a4 + 8), a6, v14);
  v16 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::ValueHandleBase *))(*(_QWORD *)a4 + 16))(a4, &v31, v15);
  v18 = v17;
  v36 = v9;
  v37 = 0;
  v31 = *a5;
  v32 = *((_DWORD *)a5 + 4);
  v33 = v16;
  v34 = v17;
  v35 = 1;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v36, 1, &v31, 2, 0);
  v36 = v9;
  v37 = 0;
  *(_QWORD *)&v31 = v19;
  *((_QWORD *)&v31 + 1) = v20;
  v32 = 1;
  v33 = v11;
  v34 = v13;
  v35 = 1;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 128, &v36, 1, &v31, 2, 0);
  v23 = v22;
  v36 = v9;
  v37 = 0;
  v31 = *a5;
  v32 = *((_DWORD *)a5 + 4);
  v33 = v11;
  v34 = v13;
  v35 = 1;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 127, &v36, 1, &v31, 2, 0);
  v36 = v9;
  v37 = 0;
  *(_QWORD *)&v31 = v24;
  *((_QWORD *)&v31 + 1) = v25;
  v32 = 1;
  v33 = v16;
  v34 = v18;
  v35 = 1;
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v36, 1, &v31, 2, 0);
  v36 = a2;
  v37 = a3;
  *(_QWORD *)&v31 = v21;
  *((_QWORD *)&v31 + 1) = v23;
  v32 = 1;
  v33 = v26;
  v34 = v27;
  v35 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 66, &v36, 1, &v31, 2, 0);
}

uint64_t sub_1C553AF20(char **a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v6;
  _BOOL8 v8;
  unint64_t v9;
  unsigned int v10;
  char **v11;
  const char *v12;
  uint64_t v13;
  unint64_t i;
  const char *v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 MVTForLLT;
  unsigned __int8 v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unsigned __int8 v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  char v50;
  unint64_t v51;
  unint64_t v52;

  v6 = a3;
  if (!(a3[11] | a3[8]) && a3[14] < a3[9])
    return 0;
  v52 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a6 + 680))(a6, a3, a5);
  if (!v52)
  {
    v52 = 513;
    if (!v6[8])
    {
      while (1)
      {
        v42 = v6[9];
        v44 = sub_1C4825F50(&v52);
        if ((_DWORD)v43 == 1)
        if (1 << v42 >= (unint64_t)(v44 + 7) >> 3
          || ((*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a6 + 656))(a6, v52, a4, v6[9], 0, 0) & 1) != 0)
        {
          break;
        }
        v46 = sub_1C4825F50(&v52);
        if ((_DWORD)v45 == 1)
        v52 = (v46 + 7) & 0x7FFFFFFF8 | 1;
      }
    }
  }
  v9 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
    return 1;
  v10 = 0;
  v11 = a1;
  do
  {
    v13 = sub_1C4825F50(&v52);
    if ((_DWORD)v12 == 1)
    for (i = ((unint64_t)(v13 + 7) >> 3); i > v9; i = v27)
    {
      v51 = v52;
      if ((v52 & 0xFFFFFFFFFFFFFFF9) != 0 && (v52 & 4) != 0)
      {
        v17 = sub_1C4825F50(&v51);
        if ((_DWORD)v16 == 1)
        v18 = 257;
        if (v17 > 0x40)
          v18 = 513;
        v51 = v18;
      }
      v20 = sub_1C4825F50(&v51);
      if ((_DWORD)v19 == 1)
      v21 = (8 << ~__clz(v20 - 1)) & 0x7FFFFFFF8 | 1;
      if (v20 == 1)
        v21 = 1;
      v51 = v21;
      v23 = sub_1C4825F50(&v51);
      if ((_DWORD)v22 == 1)
      v24 = v23 + 7;
      v50 = 0;
      MVTForLLT = llvm::getMVTForLLT(v52);
      if (v10 && v6[10] && (v24 >> 3) < v9)
      {
        v26 = v6[8] ? 0 : v6[9];
        if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *))(*(_QWORD *)a6 + 648))(a6, MVTForLLT, 0, a4, v26, 0, &v50))
        {
          LODWORD(v27) = v9;
          if (v50)
            continue;
        }
      }
      v27 = v24 >> 3;
      v52 = v51;
    }
    v8 = ++v10 <= a2;
    if (v10 > a2)
      break;
    v29 = v11[1];
    v28 = (unint64_t)v11[2];
    if ((unint64_t)v29 >= v28)
    {
      v31 = *v11;
      v32 = (v29 - v31) >> 3;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61)
        abort();
      v34 = v6;
      v35 = a2;
      v36 = v28 - (_QWORD)v31;
      if (v36 >> 2 > v33)
        v33 = v36 >> 2;
      v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v33;
      if (v37)
      {
        if (v37 >> 61)
          sub_1C4764EE4();
        v38 = (char *)operator new(8 * v37);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[8 * v32];
      *(_QWORD *)v39 = v52;
      v30 = v39 + 8;
      if (v29 == v31)
      {
        v11 = a1;
      }
      else
      {
        do
        {
          v40 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v39 - 1) = v40;
          v39 -= 8;
        }
        while (v29 != v31);
        v11 = a1;
        v29 = *a1;
      }
      *v11 = v39;
      v11[1] = v30;
      v11[2] = &v38[8 * v37];
      if (v29)
        operator delete(v29);
      a2 = v35;
      v6 = v34;
    }
    else
    {
      *(_QWORD *)v29 = v52;
      v30 = v29 + 8;
    }
    v11[1] = v30;
    v9 -= i;
  }
  while (v9);
  return v8;
}

double sub_1C553B2F8(unint64_t a1, const char *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::FixedVectorType *v8;
  const char *v9;
  int v10;
  double result;
  _DWORD *v12;
  _QWORD *v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  unint64_t v18;
  int v19;

  v18 = a1;
  if ((a1 & 0xFFFFFFFFFFFFFFF9) != 0 && (a1 & 4) != 0)
  {
    v4 = (unsigned __int16)(a1 >> 19);
    v5 = 0x800000000000000;
    if ((a1 & 2) != 0)
      v6 = 0x800000000000000;
    else
      v6 = 0x8000000000000;
    if ((a1 & 2) == 0)
    {
      v4 = a1 >> 19;
      v5 = 0x8000000000000;
    }
    if ((a1 & 1) != 0)
      v7 = v5;
    else
      v7 = v6;
    if ((a1 & 1) != 0)
      v4 = a1 >> 3;
    v19 = v4;
    if (v4 <= 63)
    {
      if (v4 <= 31)
      {
        switch(v4)
        {
          case 16:
            v8 = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
            goto LABEL_31;
          case 8:
            v8 = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
            goto LABEL_31;
          case 1:
            v8 = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
            goto LABEL_31;
        }
      }
      else if (v4 == 32)
      {
        v8 = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
        goto LABEL_31;
      }
    }
    else
    {
      if (v4 == 64)
      {
        v8 = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
LABEL_31:
        if ((v7 & a1) != 0)
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
        return llvm::FixedVectorType::get(v8, (llvm::Type *)(unsigned __int16)(a1 >> 3));
      }
      if (v4 == 128)
      {
        v8 = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 2008);
        goto LABEL_31;
      }
    }
    v15 = sub_1C5270984(*(_QWORD *)a2 + 2168, &v19);
    v8 = (llvm::FixedVectorType *)*((_QWORD *)v15 + 1);
    if (!v8)
    {
      v16 = v15;
      v8 = (llvm::FixedVectorType *)sub_1C484358C(*(_QWORD *)a2 + 2040, 24, 3);
      v17 = v19;
      *(_QWORD *)v8 = a2;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 1) = (v17 << 8) | 0xDu;
      *((_QWORD *)v16 + 1) = v8;
    }
    goto LABEL_31;
  }
  v10 = sub_1C4825F50(&v18);
  if ((_DWORD)v9 == 1)
  v19 = v10;
  if (v10 <= 63)
  {
    if (v10 <= 31)
    {
      if (v10 == 16 || v10 == 8 || v10 == 1)
        return result;
    }
    else if (v10 == 32)
    {
      return result;
    }
  }
  else if (v10 == 64 || v10 == 128)
  {
    return result;
  }
  v12 = sub_1C5270984(*(_QWORD *)a2 + 2168, &v19);
  if (!*((_QWORD *)v12 + 1))
  {
    v13 = (_QWORD *)sub_1C484358C(*(_QWORD *)a2 + 2040, 24, 3);
    v14 = v19;
    *v13 = a2;
    v13[2] = 0;
    v13[1] = (v14 << 8) | 0xDu;
    *((_QWORD *)v12 + 1) = v13;
  }
  return result;
}

uint64_t sub_1C553B584(uint64_t a1, uint64_t (**a2)(), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (***v9)();
  void (**v10)(uint64_t (***)());
  __int128 *v11;
  void (**v12)(__int128 *);
  unint64_t v13;
  BOOL v14;
  int v15;
  _QWORD *v16;
  int v17;
  int64_t v18;
  unint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const llvm::APInt *v34;
  llvm::ValueHandleBase *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const llvm::APInt *v39;
  llvm::ValueHandleBase *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)();
  unsigned int v45;
  _QWORD *v46;
  unsigned int v47;
  unsigned __int8 v48;
  __int128 v49;
  int v50;
  __int128 *v51;
  uint64_t v52;
  int v53;
  uint64_t (**v54)();
  _DWORD v55[4];
  unint64_t *v56;
  uint64_t v57;

  v5 = a1;
  v57 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 24);
  if ((a2 & 1) != 0)
  {
    v8 = ((unint64_t)a2 >> 3);
    v7 = a2 & 4;
  }
  else if ((a2 & 4) != 0)
  {
    v7 = a2 & 4;
    if ((a2 & 2) != 0)
      v8 = (unsigned __int16)((unint64_t)a2 >> 19);
    else
      v8 = ((unint64_t)a2 >> 19);
  }
  else
  {
    v7 = 0;
    v8 = (unsigned __int16)((unint64_t)a2 >> 3);
  }
  *(_QWORD *)&v49 = &off_1E816EFF0;
  *((_QWORD *)&v49 + 1) = sub_1C554C7E0;
  v51 = &v49;
  v54 = &off_1E816F038;
  *(_QWORD *)v55 = sub_1C554C7F8;
  v56 = (unint64_t *)&v54;
  sub_1C554C3AC(a1, v6, (uint64_t)&v49, (uint64_t)&v54, 1, 0, &v46);
  v9 = (uint64_t (***)())v56;
  if (v56 == (unint64_t *)&v54)
  {
    v10 = (void (**)(uint64_t (***)()))(v54 + 4);
    v9 = &v54;
LABEL_7:
    (*v10)(v9);
    goto LABEL_8;
  }
  if (v56)
  {
    v10 = (void (**)(uint64_t (***)()))(*v56 + 40);
    goto LABEL_7;
  }
LABEL_8:
  v11 = v51;
  if (v51 == &v49)
  {
    v12 = (void (**)(__int128 *))(v49 + 32);
    v11 = &v49;
LABEL_10:
    (*v12)(v11);
    goto LABEL_11;
  }
  if (v51)
  {
    v12 = (void (**)(__int128 *))(*(_QWORD *)v51 + 40);
    goto LABEL_10;
  }
LABEL_11:
  v13 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFF9;
  if (v7)
    v14 = v13 == 0;
  else
    v14 = 1;
  v15 = v48;
  if (!v14 || !v48)
  {
    if (!v48)
      goto LABEL_27;
    v16 = v46;
    if (v47 >= 0x41)
    {
      v17 = 0;
      v18 = ((unint64_t)v47 + 63) >> 6;
      do
      {
        if (v18-- < 1)
          break;
        v20 = v46[v18];
        v17 += __clz(v20);
      }
      while (!v20);
      v21 = v47 | 0xFFFFFFC0;
      if ((v47 & 0x3F) == 0)
        v21 = 0;
      if (v47 - v17 - v21 > 0x40)
        goto LABEL_27;
      v16 = (_QWORD *)*v46;
    }
    if (!v16)
    {
      *(_QWORD *)&v49 = a2;
      DWORD2(v49) = 0;
      sub_1C5544694(a3, (unint64_t *)&v49, 0);
      v5 = *(unsigned int *)(*(_QWORD *)(v32 + 32) + 4);
      v15 = 1;
      goto LABEL_47;
    }
LABEL_27:
    if (v13)
      v22 = v7 == 0;
    else
      v22 = 1;
    v23 = !v22;
    v24 = 3;
    if ((a2 & 1) == 0)
      v24 = 19;
    v25 = (unint64_t)a2 >> v24;
    v26 = (unint64_t)a2 & 0x8000000000000000 | (8 * v25) | 1;
    v27 = ((unint64_t)a2 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v25) | 2;
    if ((a2 & 2) == 0)
      v27 = v26;
    if (v23 == 1)
      v28 = (uint64_t (**)())v27;
    else
      v28 = a2;
    v54 = v28;
    v55[0] = 0;
    LODWORD(v49) = v5;
    v50 = 0;
    v29 = sub_1C5546B4C((uint64_t *)a3, 126, (unint64_t *)&v54, (int *)&v49);
    if (v8 >= 9)
    {
      v37 = v29;
      v38 = v30;
      DWORD2(v49) = 8;
      *(_QWORD *)&v49 = 1;
      llvm::APInt::getSplat((llvm::APInt *)v8, (llvm::APInt *)&v49, (uint64_t)&v44);
      if (DWORD2(v49) >= 0x41 && (_QWORD)v49)
        MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
      *(_QWORD *)&v49 = v28;
      DWORD2(v49) = 0;
      v40 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a3 + 8), (llvm::LLVMContext *)&v44, v39);
      v41 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::ValueHandleBase *))(*(_QWORD *)a3 + 16))(a3, &v49, v40);
      v54 = v28;
      v55[0] = 0;
      *(_QWORD *)&v49 = v37;
      *((_QWORD *)&v49 + 1) = v38;
      v50 = 1;
      v51 = (__int128 *)v41;
      v52 = v42;
      v53 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t (***)(), uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 47, &v54, 1, &v49, 2, 0);
      v5 = *(unsigned int *)(*(_QWORD *)(v43 + 32) + 4);
      if (v45 >= 0x41 && v44)
        MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
    }
    if (v23)
    {
      v54 = a2;
      v55[0] = 0;
      LODWORD(v49) = v5;
      v50 = 0;
      sub_1C5545898((_QWORD *)a3, (uint64_t)&v54, &v49);
      v5 = *(unsigned int *)(*(_QWORD *)(v31 + 32) + 4);
      if (!v15)
        return v5;
      goto LABEL_48;
    }
LABEL_47:
    if (!v15)
      return v5;
    goto LABEL_48;
  }
  llvm::APInt::truncOrSelf((llvm::APInt *)&v46, 8u, (llvm::APInt *)&v49);
  llvm::APInt::getSplat((llvm::APInt *)v8, (llvm::APInt *)&v49, (uint64_t)&v54);
  v44 = a2;
  v45 = 0;
  v35 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a3 + 8), (llvm::LLVMContext *)&v54, v34);
  (*(void (**)(uint64_t, uint64_t (***)(), llvm::ValueHandleBase *))(*(_QWORD *)a3 + 16))(a3, &v44, v35);
  v5 = *(unsigned int *)(*(_QWORD *)(v36 + 32) + 4);
  if (v55[0] >= 0x41u && v54)
    MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
  if (DWORD2(v49) >= 0x41 && (_QWORD)v49)
    MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
  if (v48)
  {
LABEL_48:
    if (v47 >= 0x41 && v46)
      MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
  }
  return v5;
}

uint64_t sub_1C553BA20(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unint64_t a5, uint64_t a6, unsigned __int8 a7, unsigned __int8 a8, char a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t (**v19)();
  unint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  llvm::MachineMemOperand *MachineMemOperand;
  const char *v45;
  uint64_t v46;
  llvm::MachineMemOperand *v47;
  uint64_t v48;
  unint64_t v49;
  const char *v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int v71;
  _BOOL4 v72;
  _DWORD *__p;
  char *__pa;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v84;
  unint64_t v85;
  uint64_t (**v86)();
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  unsigned __int8 *v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 120))(*(_QWORD *)(v15 + 16));
  v76 = ***(const char ****)v15;
  v78 = *(_QWORD *)(*(_QWORD *)v15 + 40);
  __p = *(_DWORD **)(v15 + 56);
  if (a8 >= a7)
    v17 = a7;
  else
    v17 = a8;
  v80 = a1;
  sub_1C554CC94(a3, *(_QWORD *)(a1 + 16), (uint64_t)&v86);
  v18 = 0;
  v19 = 0;
  if ((_BYTE)v88 && v86)
  {
    if (*(_WORD *)v86[2] == 70)
    {
      v71 = *((_DWORD *)v86[4] + 12);
      v72 = v71 < 0 && v71 >= -__p[8];
      v18 = !v72;
      v19 = v86;
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
  }
  v20 = (unint64_t *)(a2 + 48);
  v21 = *(_QWORD *)(a2 + 48);
  v93 = 0;
  v94 = 0;
  v95 = 0;
  if ((v21 & 7) != 0)
  {
    v82 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
    *v20 = v21;
    v82 = v21;
  }
  if ((v21 & 3) != 0)
    v20 = (unint64_t *)((v21 & 0xFFFFFFFFFFFFFFF8) + 8);
  else
    *v20 = v21 & 0xFFFFFFFFFFFFFFF8;
  v81 = v20[1];
  v22 = *(_DWORD *)(v82 + 16);
  v23 = 0x10000;
  if (a9)
    v23 = 0;
  v86 = (uint64_t (**)())a5;
  v87 = v23 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)a8 << 48) | (v17 << 8) | v18;
  v99 = *(unsigned __int8 **)(*(_QWORD *)v15 + 112);
  if ((sub_1C553AF20(&v93, a6, (unsigned __int8 *)&v86, v22, (uint64_t)&v99, v16) & 1) == 0)
  {
    v67 = 2;
    v68 = v93;
    if (!v93)
      return v67;
    goto LABEL_76;
  }
  if (v18)
  {
    sub_1C553B2F8(*(_QWORD *)v93, v76);
    llvm::DataLayout::getAlignment(v78 + 272, v24);
    v26 = v25;
    v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 176))(*(_QWORD *)(v15 + 16));
    if ((!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 440))(v27, v15)
       || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 432))(v27, v15) & 1) == 0)
      && v17 < v26)
    {
      do
      {
        if (!*(_BYTE *)(v78 + 281))
          break;
        if (*(unsigned __int8 *)(v78 + 280) >= v26)
          break;
        v26 = 63 - __clz((unint64_t)(1 << v26) >> 1);
      }
      while (v17 < v26);
    }
    if (v17 < v26)
    {
      v28 = *((_DWORD *)v19[4] + 12);
      v29 = *((_QWORD *)__p + 1) + 40 * (__p[8] + v28);
      v31 = *(unsigned __int8 *)(v29 + 16);
      v30 = (unsigned __int8 *)(v29 + 16);
      if (v31 < v26)
      {
        *v30 = v26;
        if (!*(_BYTE *)(*((_QWORD *)__p + 1) + 40 * (__p[8] + v28) + 20)
          && *((unsigned __int8 *)__p + 60) < v26)
        {
          *((_BYTE *)__p + 60) = v26;
        }
      }
    }
  }
  v32 = *(_QWORD *)(a2 + 24);
  v90 = 0u;
  v91 = 0u;
  v92 = 0;
  v33 = *(_QWORD *)(v32 + 32);
  v86 = &off_1E816EC08;
  v87 = v33;
  v89 = *(_QWORD *)(v33 + 40);
  v88 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v33 + 16) + 104))(*(_QWORD *)(v33 + 16));
  v99 = 0;
  if ((_QWORD)v90)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v90, (unsigned __int8 *)v90);
    *(_QWORD *)&v90 = v99;
    if (v99)
      llvm::MetadataTracking::retrack((uint64_t)&v99, v99, (uint64_t)&v90);
  }
  else
  {
    *(_QWORD *)&v90 = 0;
  }
  v91 = (unint64_t)a2;
  *((_QWORD *)&v90 + 1) = *(_QWORD *)(a2 + 24);
  if ((__int128 *)(a2 + 56) != &v90)
  {
    if ((_QWORD)v90)
      llvm::MetadataTracking::untrack((uint64_t)&v90, (unsigned __int8 *)v90);
    v34 = *(unsigned __int8 **)(a2 + 56);
    *(_QWORD *)&v90 = v34;
    if (v34)
      llvm::MetadataTracking::track((uint64_t)&v90, v34, 2);
  }
  v35 = (unint64_t *)v94;
  __pa = v93;
  if (v93 != v94)
  {
    v36 = 0;
    v77 = a3 & 0x7FFFFFFF;
    v79 = a4 & 0x7FFFFFFF;
    v37 = (unint64_t *)v93;
    do
    {
      v85 = *v37;
      v39 = sub_1C4825F50(&v85);
      if ((_DWORD)v38 == 1)
      if ((unint64_t)(v39 + 7) >> 3 > a5)
      {
        v41 = sub_1C4825F50(&v85);
        if ((_DWORD)v40 == 1)
        v36 += a5 - ((unint64_t)(v41 + 7) >> 3);
      }
      v43 = sub_1C4825F50(&v85);
      if ((_DWORD)v42 == 1)
      MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v15, v81, v36, (8 * v43 + 56) & 0x7FFFFFFC0 | 1);
      v46 = sub_1C4825F50(&v85);
      if ((_DWORD)v45 == 1)
      v47 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v15, v82, v36, (8 * v46 + 56) & 0x7FFFFFFC0 | 1);
      if (v36)
      {
        if (a4 < 0 && (v48 = *(_QWORD *)(v80 + 16), v79 < *(unsigned int *)(v48 + 432)))
          v49 = *(_QWORD *)(*(_QWORD *)(v48 + 424) + 8 * v79);
        else
          v49 = 0;
        v84 = v49;
        v51 = sub_1C4825F50(&v84);
        if ((_DWORD)v50 == 1)
        v99 = (unsigned __int8 *)((8 * v51) | 1);
        LODWORD(v100) = 0;
        sub_1C5544694((uint64_t)&v86, (unint64_t *)&v99, v36);
        v53 = *(_DWORD *)(*(_QWORD *)(v52 + 32) + 4);
        v96 = v84;
        v97 = 0;
        LODWORD(v99) = a4;
        v101 = 0;
        v102 = v53;
        v103 = 0;
        ((void (*)(uint64_t (***)(), uint64_t, unint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))v86[4])(&v86, 193, &v96, 1, &v99, 2, 0);
        v55 = *(_DWORD *)(*(_QWORD *)(v54 + 32) + 4);
      }
      else
      {
        v53 = 0;
        v55 = a4;
      }
      v96 = v85;
      v97 = 0;
      LODWORD(v99) = v55;
      v101 = 0;
      v56 = (unsigned __int8 *)sub_1C55464EC(&v86, 0x5Au, (int *)&v96, (int *)&v99, MachineMemOperand);
      v58 = v57;
      v59 = a3;
      if (v36)
      {
        if ((a3 & 0x80000000) != 0 && (v60 = *(_QWORD *)(v80 + 16), v77 < *(unsigned int *)(v60 + 432)))
          v61 = *(_QWORD *)(*(_QWORD *)(v60 + 424) + 8 * v77);
        else
          v61 = 0;
        v96 = v61;
        v97 = 0;
        LODWORD(v99) = a3;
        v101 = 0;
        v102 = v53;
        v103 = 0;
        ((void (*)(uint64_t (***)(), uint64_t, unint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))v86[4])(&v86, 193, &v96, 1, &v99, 2, 0);
        v59 = *(_DWORD *)(*(_QWORD *)(v62 + 32) + 4);
      }
      v99 = v56;
      v100 = v58;
      v101 = 1;
      LODWORD(v96) = v59;
      v98 = 0;
      sub_1C5546848(&v86, (int *)&v99, (int *)&v96, v47);
      v64 = sub_1C4825F50(&v85);
      if ((_DWORD)v63 == 1)
      v66 = sub_1C4825F50(&v85);
      if ((_DWORD)v65 == 1)
      v36 += (unint64_t)(v64 + 7) >> 3;
      a5 = a5 - ((unint64_t)(v66 + 7) >> 3);
      ++v37;
    }
    while (v37 != v35);
  }
  v69 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v69 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v69 = a2;
      do
        v69 = *(_QWORD *)(v69 + 8);
      while ((*(_WORD *)(v69 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v69 + 8));
  v86 = &off_1E816EC08;
  if ((_QWORD)v90)
    llvm::MetadataTracking::untrack((uint64_t)&v90, (unsigned __int8 *)v90);
  v67 = 1;
  v68 = __pa;
  if (__pa)
LABEL_76:
    operator delete(v68);
  return v67;
}

void sub_1C553C1E0()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C553C1F4(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E816E8B0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C553C22C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E816E8B0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1C553C24C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  return !*a2 || *(_BYTE *)(v2 + 16) != 16 || llvm::APInt::urem((uint64_t **)(v2 + 24), *(unsigned int *)(a1 + 8)) != 0;
}

BOOL sub_1C553C290(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[2];
  if (*a1 != v2)
    *a1 = v1 + 4;
  return v1 != v2;
}

BOOL sub_1C553C2B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = v1 + 4;
  return v1 != v2;
}

uint64_t sub_1C553C2D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = sub_1C4861E4C(a3, v5, 1);
      v7 = *(_QWORD *)a3;
      v8 = *(_DWORD *)(a3 + 8);
      v9 = *(_QWORD *)a3 + 152 * v8;
      *(_QWORD *)v9 = *(_QWORD *)v6;
      *(_QWORD *)(v9 + 8) = v9 + 24;
      *(_QWORD *)(v9 + 16) = 0x400000000;
      if (*(_DWORD *)(v6 + 16))
        sub_1C4862300(v9 + 8, v6 + 8);
      *(_BYTE *)(v9 + 72) = *(_BYTE *)(v6 + 72);
      v10 = v7 + 152 * v8;
      *(_QWORD *)(v10 + 80) = v10 + 96;
      v11 = v10 + 80;
      *(_QWORD *)(v11 + 8) = 0x400000000;
      if (*(_DWORD *)(v6 + 88))
        sub_1C48623F0(v11, v6 + 80);
      v12 = v7 + 152 * v8;
      *(_QWORD *)(v12 + 112) = v12 + 128;
      result = v12 + 112;
      *(_QWORD *)(result + 8) = 0x200000000;
      if (*(_DWORD *)(v6 + 120))
        result = sub_1C48623F0(result, v6 + 112);
      v13 = v7 + 152 * v8;
      v14 = *(_QWORD *)(v6 + 136);
      *(_DWORD *)(v13 + 144) = *(_DWORD *)(v6 + 144);
      *(_QWORD *)(v13 + 136) = v14;
      ++*(_DWORD *)(a3 + 8);
      v5 += 152;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_1C553C3FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  void **v13;
  uint64_t v14;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    sub_1C6273148(a1, a2, a3);
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      do
      {
        sub_1C48623F0(v8, a3);
        v8 += 48;
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v12 = 3 * v6;
        v13 = (void **)(*(_QWORD *)a1 + 16 * v12 - 48);
        v14 = 48 * a2 - 16 * v12;
        do
        {
          if (v13 + 2 != *v13)
            free(*v13);
          v13 -= 6;
          v14 += 48;
        }
        while (v14);
      }
    }
    else
    {
      v10 = (_QWORD *)(*(_QWORD *)a1 + 48 * v6);
      do
      {
        *v10 = v10 + 2;
        v10[1] = 0x800000000;
        if (*(_DWORD *)(a3 + 8))
          sub_1C48623F0((uint64_t)v10, a3);
        v10 += 6;
      }
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_1C553C530(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int *v11;
  uint64_t v12;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v4 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 32);
    v5 = 72 * v2;
    v6 = 9;
    while (1)
    {
      v7 = *((_QWORD *)v4 - 1);
      if (!v7)
      {
        sub_1C485C2F0();
        return sub_1C553C5E0(v10, v11, v12);
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2))
        break;
      v4 += 72;
      v5 -= 72;
      if (!v5)
      {
        v8 = 0;
        return v6 | (v8 << 32);
      }
    }
    v8 = *((_QWORD *)v4 + 4);
    if (v8)
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, a2);
    v6 = *v4;
  }
  else
  {
    v8 = 0;
    v6 = 11;
  }
  return v6 | (v8 << 32);
}

uint64_t sub_1C553C5E0(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t result;

  v3 = *a2;
  if (a3 != 1)
  {
    v4 = a2 + 1;
    v5 = 4 * a3 - 4;
    do
    {
      v6 = *v4++;
      *(_DWORD *)(a1 + 168 * (v6 - 45) + 8) = v3;
      v5 -= 4;
    }
    while (v5);
  }
  v7 = v3 - 45;
  v8 = *(_DWORD *)(a1 + 8 + 168 * v7);
  if (v8)
    v7 = v8 - 45;
  result = a1 + 8 + 168 * v7;
  *(_BYTE *)(result + 4) = 1;
  return result;
}

unint64_t sub_1C553C644(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _DWORD v16[2];
  uint64_t v17;

  v4 = *(_DWORD *)a2 - 45;
  v5 = *(_DWORD *)(a1 + 8 + 168 * v4);
  if (v5)
    v4 = v5 - 45;
  v6 = sub_1C553C530(a1 + 8 + 168 * v4, a2);
  v7 = v6;
  if (v6 == 11)
  {
    v9 = *(_QWORD *)(a2 + 16);
    if (v9)
    {
      v11 = 0;
      v12 = 0;
      v13 = a1 + 35456;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v11);
        v16[0] = *(_DWORD *)a2;
        v16[1] = v12;
        v17 = v14;
        v15 = sub_1C553DEB0(v13, (uint64_t)v16);
        if (v15)
          break;
        v8 = 0;
        v9 = 0;
        v7 = 0;
        v11 = (v12 + 1);
        v12 = v11;
        if (*(_QWORD *)(a2 + 16) <= v11)
          return v9 | v8 | v7;
      }
      v9 = v12 << 32;
      if (v15 == 8)
      {
        v8 = 0;
        v7 = 8;
      }
      else
      {
        v8 = 0;
        v7 = 0;
        switch(v15)
        {
          case 1:
            v8 = 0;
            v7 = 1;
            break;
          case 2:
            v8 = 0;
            v7 = 2;
            break;
          case 3:
            v8 = 0;
            v7 = 3;
            break;
          case 4:
            v8 = 0;
            v7 = 4;
            break;
          case 5:
            v8 = 0;
            v7 = 5;
            break;
          case 6:
            v8 = 0;
            v7 = 6;
            break;
          case 7:
            v8 = 0;
            v7 = 7;
            break;
          case 8:
            return v9 | v8 | v7;
          case 9:
            v8 = 0;
            v7 = 9;
            break;
          case 10:
            v8 = 0;
            v7 = 10;
            break;
          default:
            v7 = 0;
            break;
        }
      }
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
  }
  else
  {
    v8 = v6 & 0xFFFFFF00;
    v9 = v6 & 0xFFFFFFFF00000000;
  }
  return v9 | v8 | v7;
}

unint64_t sub_1C553C7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v4;
  unsigned int v5;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  int *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  __int128 v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _BYTE v49[48];
  void *v50;
  uint64_t v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x1E0C80C00];
  v50 = v52;
  v51 = 0x800000000;
  v46 = 0x2000000000000001;
  v4 = *(unsigned __int16 **)(a2 + 16);
  v5 = v4[1];
  if (v4[1])
  {
    v5 = 0;
    v7 = 0;
    v8 = (unsigned __int8 *)(*((_QWORD *)v4 + 5) + 3);
    v9 = 4;
    v10 = 0x2000000000000001;
    do
    {
      v11 = *v8;
      v8 += 6;
      v12 = v11 - 6;
      if ((v11 - 6) <= 5)
      {
        if ((v10 & 1) != 0)
        {
          if (((1 << v12) & (v10 >> 1)) == 0)
          {
            v10 = (2 * ((1 << v12) | (v10 >> 1))) | 0x2000000000000001;
            v46 = v10;
            goto LABEL_9;
          }
        }
        else
        {
          v13 = *(_QWORD *)(*(_QWORD *)v10 + 8 * (v12 >> 6));
          if ((v13 & (1 << v12)) == 0)
          {
            *(_QWORD *)(*(_QWORD *)v10 + 8 * (v12 >> 6)) = v13 | (1 << v12);
LABEL_9:
            if (v12 == 1 && *v4 == 74)
            {
              v14 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * (*(_DWORD *)(a2 + 40) - 1) + 4);
              if (v14 < 0)
              {
LABEL_14:
                v15 = v14 & 0x7FFFFFFF;
                if (v15 < *(unsigned int *)(a3 + 432))
                {
                  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v15);
LABEL_17:
                  if (v5 >= HIDWORD(v51))
                  {
                    v40 = a1;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v5 + 1, 8);
                    a1 = v40;
                    v5 = v51;
                  }
                  *((_QWORD *)v50 + v5) = v16;
                  v5 = v51 + 1;
                  LODWORD(v51) = v51 + 1;
                  v4 = *(unsigned __int16 **)(a2 + 16);
                  goto LABEL_20;
                }
              }
            }
            else
            {
              v14 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v9);
              if (v14 < 0)
                goto LABEL_14;
            }
            v16 = 0;
            goto LABEL_17;
          }
        }
      }
LABEL_20:
      ++v7;
      v9 += 32;
    }
    while (v7 < v4[1]);
  }
  v47 = v49;
  v48 = 0x200000000;
  v18 = (uint64_t *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 48);
  if (v17 < 8)
    goto LABEL_29;
  if ((v17 & 7) == 0)
  {
    v23 = a1;
    *(_QWORD *)(a2 + 48) = v17 & 0xFFFFFFFFFFFFFFF8;
    v24 = (uint64_t *)(a2 + 56);
    goto LABEL_31;
  }
  v19 = (int *)(v17 & 0xFFFFFFFFFFFFFFF8);
  v20 = (*(_QWORD *)(a2 + 48) & 7) != 3 || v19 == 0;
  if (v20 || (v22 = *v19, v18 = (uint64_t *)(v19 + 2), v21 = v22, !(_DWORD)v22))
  {
LABEL_29:
    v25 = 0;
    v26 = v49;
    goto LABEL_33;
  }
  v23 = a1;
  v24 = &v18[v21];
  do
  {
LABEL_31:
    v27 = *v18++;
    v28 = (1 << *(_BYTE *)(v27 + 34)) | *(_QWORD *)(v27 + 8);
    v41 = *(_QWORD *)(v27 + 24);
    v42 = (void *)(8 << (63 - __clz(v28 & -v28)));
    LODWORD(v43) = *(_BYTE *)(v27 + 37) & 0xF;
    v29 = sub_1C4926708((uint64_t)&v47, (unint64_t)&v41, 1);
    v30 = (char *)v47 + 24 * v48;
    v31 = *(_OWORD *)v29;
    *((_QWORD *)v30 + 2) = *(_QWORD *)(v29 + 16);
    *(_OWORD *)v30 = v31;
    v25 = (v48 + 1);
    LODWORD(v48) = v48 + 1;
  }
  while (v18 != v24);
  v4 = *(unsigned __int16 **)(a2 + 16);
  v5 = v51;
  v26 = v47;
  a1 = v23;
LABEL_33:
  LODWORD(v41) = *v4;
  v42 = v50;
  v43 = v5;
  v44 = v26;
  v45 = v25;
  v32 = v41 - 45;
  v33 = *(_DWORD *)(a1 + 8 + 168 * (v41 - 45));
  if (v33)
    v32 = v33 - 45;
  v34 = a1;
  v35 = sub_1C553C530(a1 + 8 + 168 * v32, (uint64_t)&v41);
  v36 = v35;
  if (v35 == 11)
  {
    v37 = sub_1C553E3B8(v34 + 35456, (uint64_t)&v41);
    switch((char)v37)
    {
      case 1:
        v38 = 0;
        v36 = 1;
        break;
      case 2:
        v38 = 0;
        v36 = 2;
        break;
      case 3:
        v38 = 0;
        v36 = 3;
        break;
      case 4:
        v38 = 0;
        v36 = 4;
        break;
      case 5:
        v38 = 0;
        v36 = 5;
        break;
      case 6:
        v38 = 0;
        v36 = 6;
        break;
      case 7:
        v38 = 0;
        v36 = 7;
        break;
      case 8:
        v38 = 0;
        v36 = 8;
        break;
      case 9:
        v38 = 0;
        v36 = 9;
        break;
      case 10:
        v38 = 0;
        v36 = 10;
        break;
      default:
        v38 = 0;
        v36 = 0;
        break;
    }
  }
  else
  {
    v37 = v35;
    v38 = v35 & 0xFFFFFF00;
  }
  if (v47 != v49)
    free(v47);
  sub_1C4914448((void ***)&v46);
  if (v50 != v52)
    free(v50);
  return v37 & 0xFFFFFFFF00000000 | v38 | v36;
}

uint64_t sub_1C553CC38(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = a2;
  if ((sub_1C4825F50(&v3) & 7) != 0)
    return 126;
  else
    return 124;
}

uint64_t sub_1C553CC6C()
{
  int v1;
  __int128 v2;

  *(_QWORD *)&v2 = "Don't verify that MIR is fully legal between GlobalISel passes";
  *((_QWORD *)&v2 + 1) = 62;
  v1 = 1;
  sub_1C62735D4(&v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED805CE0, &dword_1C475E000);
}

uint64_t sub_1C553CCC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _QWORD *v23;
  void (**v24)(_QWORD *);
  _QWORD *v25;
  void (**v26)(_QWORD *);
  _QWORD *v27;
  void (**v28)(_QWORD *);
  _QWORD *v29;
  void (**v30)(_QWORD *);
  _QWORD *v31;
  void (**v32)(_QWORD *);
  _QWORD *v33;
  void (**v34)(_QWORD *);
  _QWORD *v35;
  void (**v36)(_QWORD *);
  _QWORD **v37;
  _QWORD *v38;
  void (**v39)(_QWORD *);
  void (**v40)(void);
  _DWORD *v41;
  void *__p;
  void *v44;
  _DWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  _QWORD v56[3];
  _QWORD *v57;
  _QWORD v58[3];
  _QWORD *v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 16;
  v3 = 211;
  do
  {
    *(_QWORD *)(v2 - 16) = v2;
    *(_QWORD *)(v2 - 8) = 0x100000000;
    v2 += 40;
    --v3;
  }
  while (v3);
  v4 = 0;
  v5 = a1 + 10128;
  do
  {
    *(_QWORD *)(v5 + v4 - 1688) = v5 + v4 - 1672;
    *(_QWORD *)(v5 + v4 - 1680) = 0x100000000;
    v4 += 48;
  }
  while (v4 != 10128);
  v6 = a1 + 18584;
  v7 = 10128;
  do
  {
    *(_QWORD *)(v6 - 16) = v6;
    *(_QWORD *)(v6 - 8) = 0x100000000;
    v6 += 48;
    v7 -= 48;
  }
  while (v7);
  *(_BYTE *)(a1 + 28696) = 0;
  v8 = a1 + 28720;
  v9 = 8440;
  do
  {
    *(_QWORD *)(v8 - 16) = v8;
    *(_QWORD *)(v8 - 8) = 0x100000000;
    v8 += 40;
    v9 -= 40;
  }
  while (v9);
  v10 = a1 + 37160;
  v11 = 8440;
  do
  {
    *(_QWORD *)(v10 - 16) = v10;
    *(_QWORD *)(v10 - 8) = 0x100000000;
    v10 += 40;
    v11 -= 40;
  }
  while (v11);
  v12 = 45584;
  do
  {
    v13 = a1 + v12;
    *(_OWORD *)v13 = 0uLL;
    *(_OWORD *)(v13 + 16) = 0uLL;
    *(_DWORD *)(v13 + 32) = 1065353216;
    v12 += 40;
  }
  while (v13 + 40 != a1 + 54024);
  v14 = 54024;
  do
  {
    v15 = a1 + v14;
    *(_OWORD *)v15 = 0uLL;
    *(_OWORD *)(v15 + 16) = 0uLL;
    *(_DWORD *)(v15 + 32) = 1065353216;
    v14 += 40;
  }
  while (v15 + 40 != a1 + 62464);
  v16 = operator new(4uLL);
  __p = v16;
  *v16 = 1;
  v44 = v16 + 1;
  v45 = v16 + 1;
  sub_1C553E454(1u, a1 + 31624, (char **)&__p);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v17 = operator new(4uLL);
  __p = v17;
  *v17 = 1;
  v44 = v17 + 1;
  v45 = v17 + 1;
  sub_1C553E454(1u, a1 + 31944, (char **)&__p);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v18 = operator new(4uLL);
  __p = v18;
  *v18 = 1;
  v44 = v18 + 1;
  v45 = v18 + 1;
  sub_1C553E454(1u, a1 + 31864, (char **)&__p);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v19 = operator new(4uLL);
  __p = v19;
  *v19 = 1;
  v44 = v19 + 1;
  v45 = v19 + 1;
  sub_1C553E454(0, a1 + 31664, (char **)&__p);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v20 = operator new(4uLL);
  __p = v20;
  *v20 = 1;
  v44 = v20 + 1;
  v45 = v20 + 1;
  sub_1C553E454(1u, a1 + 31664, (char **)&__p);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v21 = operator new(4uLL);
  __p = v21;
  *v21 = 1;
  v44 = v21 + 1;
  v45 = v21 + 1;
  sub_1C553E454(0, a1 + 31544, (char **)&__p);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v22 = operator new(4uLL);
  __p = v22;
  *v22 = 1;
  v44 = v22 + 1;
  v45 = v22 + 1;
  sub_1C553E454(0, a1 + 31584, (char **)&__p);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v62[0] = &off_1E816E970;
  v62[1] = sub_1C6273694;
  v63 = v62;
  if (!*(_DWORD *)(a1 + 9552))
    sub_1C6273CEC(a1 + 9544, 1uLL);
  sub_1C62736DC(*(_QWORD **)(a1 + 9544), v62);
  v23 = v63;
  if (v63 == v62)
  {
    v24 = (void (**)(_QWORD *))(v62[0] + 32);
    v23 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_36;
    v24 = (void (**)(_QWORD *))(*v63 + 40);
  }
  (*v24)(v23);
LABEL_36:
  v60[0] = &off_1E816E970;
  v60[1] = sub_1C62736A0;
  v61 = v60;
  if (!*(_DWORD *)(a1 + 8448))
    sub_1C6273CEC(a1 + 8440, 1uLL);
  sub_1C62736DC(*(_QWORD **)(a1 + 8440), v60);
  v25 = v61;
  if (v61 == v60)
  {
    v26 = (void (**)(_QWORD *))(v60[0] + 32);
    v25 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_43;
    v26 = (void (**)(_QWORD *))(*v61 + 40);
  }
  (*v26)(v25);
LABEL_43:
  v58[0] = &off_1E816E970;
  v58[1] = sub_1C62736A0;
  v59 = v58;
  if (!*(_DWORD *)(a1 + 9456))
    sub_1C6273CEC(a1 + 9448, 1uLL);
  sub_1C62736DC(*(_QWORD **)(a1 + 9448), v58);
  v27 = v59;
  if (v59 == v58)
  {
    v28 = (void (**)(_QWORD *))(v58[0] + 32);
    v27 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_50;
    v28 = (void (**)(_QWORD *))(*v59 + 40);
  }
  (*v28)(v27);
LABEL_50:
  v56[0] = &off_1E816E970;
  v56[1] = sub_1C6273694;
  v57 = v56;
  if (!*(_DWORD *)(a1 + 10608))
    sub_1C6273CEC(a1 + 10600, 1uLL);
  sub_1C62736DC(*(_QWORD **)(a1 + 10600), v56);
  v29 = v57;
  if (v57 == v56)
  {
    v30 = (void (**)(_QWORD *))(v56[0] + 32);
    v29 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_57;
    v30 = (void (**)(_QWORD *))(*v57 + 40);
  }
  (*v30)(v29);
LABEL_57:
  v54[0] = &off_1E816E970;
  v54[1] = sub_1C6273694;
  v55 = v54;
  if (!*(_DWORD *)(a1 + 10896))
    sub_1C6273CEC(a1 + 10888, 1uLL);
  sub_1C62736DC(*(_QWORD **)(a1 + 10888), v54);
  v31 = v55;
  if (v55 == v54)
  {
    v32 = (void (**)(_QWORD *))(v54[0] + 32);
    v31 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_64;
    v32 = (void (**)(_QWORD *))(*v55 + 40);
  }
  (*v32)(v31);
LABEL_64:
  v52[0] = &off_1E816E970;
  v52[1] = sub_1C62736B4;
  v53 = v52;
  if (!*(_DWORD *)(a1 + 11760))
    sub_1C6273CEC(a1 + 11752, 1uLL);
  sub_1C62736DC(*(_QWORD **)(a1 + 11752), v52);
  v33 = v53;
  if (v53 == v52)
  {
    v34 = (void (**)(_QWORD *))(v52[0] + 32);
    v33 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_71;
    v34 = (void (**)(_QWORD *))(*v53 + 40);
  }
  (*v34)(v33);
LABEL_71:
  v50[0] = &off_1E816E970;
  v50[1] = sub_1C6273694;
  v51 = v50;
  if (!*(_DWORD *)(a1 + 9888))
    sub_1C6273CEC(a1 + 9880, 1uLL);
  sub_1C62736DC(*(_QWORD **)(a1 + 9880), v50);
  v35 = v51;
  if (v51 == v50)
  {
    v36 = (void (**)(_QWORD *))(v50[0] + 32);
    v35 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_78;
    v36 = (void (**)(_QWORD *))(*v51 + 40);
  }
  (*v36)(v35);
LABEL_78:
  v48[0] = &off_1E816E970;
  v48[1] = sub_1C6273694;
  v49 = v48;
  v37 = (_QWORD **)(a1 + 9784);
  if (!*(_DWORD *)(a1 + 9792))
    sub_1C6273CEC(a1 + 9784, 1uLL);
  sub_1C62736DC(*v37, v48);
  v38 = v49;
  if (v49 == v48)
  {
    v39 = (void (**)(_QWORD *))(v48[0] + 32);
    v38 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_85;
    v39 = (void (**)(_QWORD *))(*v49 + 40);
  }
  (*v39)(v38);
LABEL_85:
  v46[0] = &off_1E816E970;
  v46[1] = sub_1C6273694;
  v47 = v46;
  if (*(_DWORD *)(a1 + 9792) <= 1u)
    sub_1C6273CEC(a1 + 9784, 2uLL);
  sub_1C62736DC(*v37 + 4, v46);
  if (v47 == v46)
  {
    v40 = (void (**)(void))(v46[0] + 32);
  }
  else
  {
    if (!v47)
      goto LABEL_92;
    v40 = (void (**)(void))(*v47 + 40);
  }
  (*v40)();
LABEL_92:
  v41 = operator new(4uLL);
  __p = v41;
  *v41 = 393217;
  v44 = v41 + 1;
  v45 = v41 + 1;
  sub_1C553E454(0, a1 + 33984, (char **)&__p);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1C553D3C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  const char *v16;
  unsigned __int16 v17;
  int v18;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  char v23;
  const char *v24;
  _QWORD *v25;
  unint64_t v26;
  int *v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char v34;
  unint64_t v35;
  void *v36;
  const char *v37;
  unsigned __int16 v38;
  const char *v39;
  unint64_t v40;
  _DWORD *v41;
  char *v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  int v53;
  int *v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t (***v63)();
  void (**v64)(uint64_t (***)());
  uint64_t *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  unsigned __int16 v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  char *v86;
  char *v87;
  char *v88;
  int v89;
  unsigned int v90;
  _DWORD *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unsigned int *v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t *v101;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t (***v107)();
  uint64_t (**v108)();
  void (**v109)(void);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v117;
  void *v118[3];
  void *v119;
  void *v120;
  char *v121;
  void *__p;
  char *v123;
  char *v124;
  uint64_t *v125;
  _QWORD *v126[2];
  uint64_t *v127;
  _QWORD *v128[2];
  char *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  unint64_t *v135;
  uint64_t v136;

  v1 = 0;
  v136 = *MEMORY[0x1E0C80C00];
  do
  {
    v110 = v1;
    if (!*(_DWORD *)(a1 + 40 * v1 + 8))
      goto LABEL_204;
    v2 = 0;
    v3 = 0;
    v112 = a1 + 40 * v1;
    v4 = a1 + 48 * v1;
    v113 = v4 + 8440;
    v111 = v4 + 18568;
    v5 = (_QWORD *)v112;
    v115 = v1 + 45;
    do
    {
      v117 = v3;
      v129 = 0;
      v130 = 0;
      v131 = 0;
      v128[0] = 0;
      v128[1] = 0;
      v127 = (uint64_t *)v128;
      v126[0] = 0;
      v126[1] = 0;
      v125 = (uint64_t *)v126;
      v6 = *v5 + 24 * v2;
      v7 = *(_DWORD *)(v6 + 8);
      v8 = *(_QWORD *)v6;
      v9 = *(unsigned int *)(v6 + 16);
      v10 = v8 + 16 * v9;
      if (v7)
      {
        if (v9)
        {
          v11 = 16 * v9;
          v12 = v8;
          while (1)
          {
            v13 = *(_QWORD *)v12 == 4 || *(_QWORD *)v12 == 2;
            if (!v13)
              break;
            v12 += 16;
            v11 -= 16;
            if (!v11)
              goto LABEL_13;
          }
        }
        else
        {
          v12 = v8;
        }
      }
      else
      {
LABEL_13:
        v12 = v8 + 16 * v9;
      }
      v114 = v2;
      v14 = v8 + 16 * v9;
LABEL_16:
      while (v12 != v14)
      {
        v15 = *(unsigned __int8 *)(v12 + 8);
        v132 = *(_QWORD *)v12;
        v17 = sub_1C4825F50(&v132);
        v18 = (int)v16;
        if ((v132 & 0xFFFFFFFFFFFFFFF9) != 0 && (v132 & 6) == 2)
        {
          v23 = 19;
          if ((v132 & 4) != 0)
            v23 = 35;
          LOWORD(__p) = v132 >> v23;
          v25 = sub_1C553ED08(&v127, (unsigned __int16)__p, &__p);
          if (v18 == 1)
          v27 = (int *)v25[6];
          v26 = v25[7];
          if ((unint64_t)v27 >= v26)
          {
            v28 = (_DWORD *)v25[5];
            v29 = v27 - v28;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62)
              goto LABEL_206;
            v31 = v26 - (_QWORD)v28;
            if (v31 >> 1 > v30)
              v30 = v31 >> 1;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
              v32 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              if (v32 >> 62)
                goto LABEL_207;
              v33 = (char *)operator new(4 * v32);
            }
            else
            {
              v33 = 0;
            }
            v52 = (int *)&v33[4 * v29];
            *v52 = v17 | (v15 << 16);
            v41 = v52 + 1;
            if (v27 != v28)
            {
              do
              {
                v53 = *--v27;
                *--v52 = v53;
              }
              while (v27 != v28);
LABEL_87:
              v27 = (int *)v25[5];
            }
LABEL_88:
            v25[5] = v52;
            v25[6] = v41;
            v25[7] = &v33[4 * v32];
            if (v27)
              operator delete(v27);
LABEL_90:
            v25[6] = v41;
            goto LABEL_91;
          }
LABEL_54:
          *v27 = v17 | (v15 << 16);
          v41 = v27 + 1;
          goto LABEL_90;
        }
        if ((v132 & 0xFFFFFFFFFFFFFFF9) != 0 && (v132 & 4) != 0)
        {
          v34 = 3;
          if ((v132 & 1) == 0)
            v34 = 19;
          v35 = v132 >> v34;
          if ((v132 & 2) != 0)
            v36 = (void *)((v132 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v35) | 2);
          else
            v36 = (void *)(v132 & 0x8000000000000000 | (8 * v35) | 1);
          __p = v36;
          v38 = sub_1C4825F50((unint64_t *)&__p);
          if ((_DWORD)v37 == 1)
          LOWORD(v119) = v38;
          v25 = sub_1C553ED08(&v125, v38, &v119);
          if (v18 == 1)
          v27 = (int *)v25[6];
          v40 = v25[7];
          if ((unint64_t)v27 >= v40)
          {
            v48 = (_DWORD *)v25[5];
            v49 = v27 - v48;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62)
LABEL_206:
              abort();
            v51 = v40 - (_QWORD)v48;
            if (v51 >> 1 > v50)
              v50 = v51 >> 1;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
              v32 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v32 = v50;
            if (v32)
            {
              if (v32 >> 62)
LABEL_207:
                sub_1C4764EE4();
              v33 = (char *)operator new(4 * v32);
            }
            else
            {
              v33 = 0;
            }
            v52 = (int *)&v33[4 * v49];
            *v52 = v17 | (v15 << 16);
            v41 = v52 + 1;
            if (v27 != v48)
            {
              do
              {
                v56 = *--v27;
                *--v52 = v56;
              }
              while (v27 != v48);
              goto LABEL_87;
            }
            goto LABEL_88;
          }
          goto LABEL_54;
        }
        if ((_DWORD)v16 == 1)
        v21 = (unsigned __int16 *)v130;
        if ((unint64_t)v130 >= v131)
        {
          v42 = v129;
          v43 = (v130 - v129) >> 2;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62)
            goto LABEL_206;
          v45 = v131 - (_QWORD)v129;
          if ((uint64_t)(v131 - (_QWORD)v129) >> 1 > v44)
            v44 = v45 >> 1;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
            v46 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          if (v46)
          {
            if (v46 >> 62)
              goto LABEL_207;
            v47 = (char *)operator new(4 * v46);
          }
          else
          {
            v47 = 0;
          }
          v54 = (int *)&v47[4 * v43];
          *v54 = v17 | (v15 << 16);
          v22 = (unsigned __int16 *)(v54 + 1);
          if (v21 != (unsigned __int16 *)v42)
          {
            do
            {
              v55 = *((_DWORD *)v21 - 1);
              v21 -= 2;
              *--v54 = v55;
            }
            while (v21 != (unsigned __int16 *)v42);
            v21 = (unsigned __int16 *)v129;
          }
          v129 = (char *)v54;
          v130 = (char *)v22;
          v131 = (unint64_t)&v47[4 * v46];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v130 = v17 | (v15 << 16);
          v22 = v21 + 2;
        }
        v130 = (char *)v22;
LABEL_91:
        v57 = v12 + 16;
        v12 = v10;
        if (v57 != v10)
        {
          v12 = v57;
          while (*(_QWORD *)v12 == 4 || *(_QWORD *)v12 == 2)
          {
            v12 += 16;
            if (v12 == v10)
            {
              v12 = v10;
              goto LABEL_16;
            }
          }
        }
      }
      v132 = (unint64_t)&off_1E816E970;
      v133 = (char *)sub_1C62736C8;
      v135 = &v132;
      v59 = v117;
      if (*(_DWORD *)(v113 + 8) > v117)
      {
        v60 = (_QWORD *)(*(_QWORD *)v113 + 32 * v114);
        if (v60[3])
          sub_1C62736DC(&v132, v60);
      }
      v61 = 126 - 2 * __clz((v130 - v129) >> 2);
      if (v130 == v129)
        v62 = 0;
      else
        v62 = v61;
      sub_1C553EEB0((unint64_t)v129, (unsigned __int16 *)v130, v62, 1);
      if (!v135)
        goto LABEL_208;
      (*(void (**)(void **__return_ptr, unint64_t *, char **))(*v135 + 48))(&__p, v135, &v129);
      sub_1C553E454(v117, v112 + 28704, (char **)&__p);
      if (__p)
      {
        v123 = (char *)__p;
        operator delete(__p);
      }
      v63 = (uint64_t (***)())v135;
      if (v135 == &v132)
      {
        v64 = (void (**)(uint64_t (***)()))(v132 + 32);
        v63 = (uint64_t (***)())&v132;
LABEL_113:
        (*v64)(v63);
      }
      else if (v135)
      {
        v64 = (void (**)(uint64_t (***)()))(*v135 + 40);
        goto LABEL_113;
      }
      v65 = v127;
      if (v127 != (uint64_t *)v128)
      {
        do
        {
          LOWORD(v132) = *((_WORD *)v65 + 16);
          v134 = 0;
          v135 = 0;
          v133 = 0;
          sub_1C553E70C(&v133, (_BYTE *)v65[5], (_BYTE *)v65[6], (v65[6] - v65[5]) >> 2);
          v66 = v133;
          v67 = 126 - 2 * __clz((v134 - v133) >> 2);
          if (v134 == v133)
            v68 = 0;
          else
            v68 = v67;
          sub_1C553EEB0((unint64_t)v133, (unsigned __int16 *)v134, v68, 1);
          v69 = v132;
          sub_1C553DFFC((uint64_t)&__p, (uint64_t)&v133, 9, 9);
          sub_1C62737C0(a1, v115, v117, v69, (char **)&__p);
          if (__p)
          {
            v123 = (char *)__p;
            operator delete(__p);
          }
          if (v66)
            operator delete(v66);
          v70 = (uint64_t *)v65[1];
          if (v70)
          {
            do
            {
              v71 = v70;
              v70 = (uint64_t *)*v70;
            }
            while (v70);
          }
          else
          {
            do
            {
              v71 = (uint64_t *)v65[2];
              v13 = *v71 == (_QWORD)v65;
              v65 = v71;
            }
            while (!v13);
          }
          v65 = v71;
        }
        while (v71 != (uint64_t *)v128);
      }
      __p = 0;
      v123 = 0;
      v124 = 0;
      v72 = v125;
      if (v125 == (uint64_t *)v126)
      {
        v103 = 0;
        v102 = 0;
      }
      else
      {
        do
        {
          LOWORD(v132) = *((_WORD *)v72 + 16);
          v134 = 0;
          v135 = 0;
          v133 = 0;
          sub_1C553E70C(&v133, (_BYTE *)v72[5], (_BYTE *)v72[6], (v72[6] - v72[5]) >> 2);
          v73 = 126 - 2 * __clz((v134 - v133) >> 2);
          if (v134 == v133)
            v74 = 0;
          else
            v74 = v73;
          sub_1C553EEB0((unint64_t)v133, (unsigned __int16 *)v134, v74, 1);
          v75 = (unsigned __int16)v132;
          v76 = v123;
          if (v123 >= v124)
          {
            v78 = (char *)__p;
            v79 = (v123 - (_BYTE *)__p) >> 2;
            v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 62)
              goto LABEL_206;
            v81 = v124 - (_BYTE *)__p;
            if ((v124 - (_BYTE *)__p) >> 1 > v80)
              v80 = v81 >> 1;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
              v82 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v82 = v80;
            if (v82)
            {
              if (v82 >> 62)
                goto LABEL_207;
              v83 = (char *)operator new(4 * v82);
            }
            else
            {
              v83 = 0;
            }
            v84 = &v83[4 * v79];
            *(_DWORD *)v84 = v75;
            v77 = v84 + 4;
            if (v76 != v78)
            {
              do
              {
                v85 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v84 - 1) = v85;
                v84 -= 4;
              }
              while (v76 != v78);
              v76 = (char *)__p;
            }
            __p = v84;
            v123 = v77;
            v124 = &v83[4 * v82];
            if (v76)
              operator delete(v76);
          }
          else
          {
            *(_DWORD *)v123 = (unsigned __int16)v132;
            v77 = v76 + 4;
          }
          v123 = v77;
          v119 = 0;
          v120 = 0;
          v121 = 0;
          v86 = v133;
          v87 = v134;
          if (v133 != v134)
          {
            v88 = 0;
            do
            {
              v89 = *(_DWORD *)v86;
              v90 = (unsigned __int16)*(_DWORD *)v86 / v75;
              if (v88 >= v121)
              {
                v92 = (char *)v119;
                v93 = (v88 - (_BYTE *)v119) >> 2;
                v94 = v93 + 1;
                if ((unint64_t)(v93 + 1) >> 62)
                  goto LABEL_206;
                v95 = v121 - (_BYTE *)v119;
                if ((v121 - (_BYTE *)v119) >> 1 > v94)
                  v94 = v95 >> 1;
                if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
                  v96 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v96 = v94;
                if (v96)
                {
                  if (v96 >> 62)
                    goto LABEL_207;
                  v97 = (char *)operator new(4 * v96);
                }
                else
                {
                  v97 = 0;
                }
                v98 = (unsigned int *)&v97[4 * v93];
                *v98 = v89 & 0xFF0000 | v90;
                v91 = v98 + 1;
                if (v88 != v92)
                {
                  do
                  {
                    v99 = *((_DWORD *)v88 - 1);
                    v88 -= 4;
                    *--v98 = v99;
                  }
                  while (v88 != v92);
                  v88 = (char *)v119;
                }
                v119 = v98;
                v120 = v91;
                v121 = &v97[4 * v96];
                if (v88)
                  operator delete(v88);
              }
              else
              {
                *(_DWORD *)v88 = v89 & 0xFF0000 | v90;
                v91 = v88 + 4;
              }
              v120 = v91;
              v86 += 4;
              v88 = (char *)v91;
            }
            while (v86 != v87);
          }
          sub_1C553DFFC((uint64_t)v118, (uint64_t)&v119, 4, 3);
          v59 = v117;
          sub_1C62738A0(a1, v115, v117, v75, (char **)v118);
          if (v118[0])
          {
            v118[1] = v118[0];
            operator delete(v118[0]);
          }
          if (v119)
            operator delete(v119);
          if (v133)
            operator delete(v133);
          v100 = (uint64_t *)v72[1];
          if (v100)
          {
            do
            {
              v101 = v100;
              v100 = (uint64_t *)*v100;
            }
            while (v100);
          }
          else
          {
            do
            {
              v101 = (uint64_t *)v72[2];
              v13 = *v101 == (_QWORD)v72;
              v72 = v101;
            }
            while (!v13);
          }
          v72 = v101;
        }
        while (v101 != (uint64_t *)v126);
        v102 = (unsigned __int16 *)__p;
        v103 = (unsigned __int16 *)v123;
      }
      v104 = 126 - 2 * __clz(((char *)v103 - (char *)v102) >> 2);
      if (v103 == v102)
        v105 = 0;
      else
        v105 = v104;
      sub_1C553EEB0((unint64_t)v102, v103, v105, 1);
      v132 = (unint64_t)&off_1E816E970;
      v133 = (char *)sub_1C62736C8;
      v135 = &v132;
      if (*(_DWORD *)(v111 + 8) <= v59 || (v106 = (_QWORD *)(*(_QWORD *)v111 + 32 * v114), !v106[3]))
      {
        v107 = (uint64_t (***)())&v132;
        v108 = &off_1E816E970;
        goto LABEL_189;
      }
      sub_1C62736DC(&v132, v106);
      v107 = (uint64_t (***)())v135;
      if (!v135)
LABEL_208:
        sub_1C485C2F0();
      v108 = (uint64_t (**)())*v135;
LABEL_189:
      ((void (*)(void **__return_ptr, uint64_t (***)(), void **))v108[6])(&v119, v107, &__p);
      sub_1C553E454(v59, v112 + 37144, (char **)&v119);
      if (v119)
      {
        v120 = v119;
        operator delete(v119);
      }
      if (v135 == &v132)
      {
        v109 = (void (**)(void))(v132 + 32);
LABEL_195:
        (*v109)();
      }
      else if (v135)
      {
        v109 = (void (**)(void))(*v135 + 40);
        goto LABEL_195;
      }
      if (__p)
      {
        v123 = (char *)__p;
        operator delete(__p);
      }
      sub_1C61CEBB4(v126[0]);
      sub_1C61CEBB4(v128[0]);
      if (v129)
      {
        v130 = v129;
        operator delete(v129);
      }
      v2 = v59 + 1;
      v5 = (_QWORD *)v112;
      v3 = v2;
    }
    while (*(_DWORD *)(v112 + 8) != (_DWORD)v2);
LABEL_204:
    v1 = v110 + 1;
  }
  while (v110 != 210);
  *(_BYTE *)(a1 + 28696) = 1;
}

uint64_t sub_1C553DEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if ((v2 & 1) != 0)
    return sub_1C553DED4(a1, a2);
  if ((v2 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(_QWORD *)(a2 + 8) & 6) == 2)
    return sub_1C553DED4(a1, a2);
  else
    return sub_1C6273980(a1, (int *)a2);
}

uint64_t sub_1C553DED4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v7;
  uint64_t **v8;
  unsigned int v9;
  unsigned __int16 **v10;
  const char *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;

  if ((*(_DWORD *)a2 - 256) < 0xFFFFFF2D)
    goto LABEL_13;
  v3 = *(_DWORD *)a2 - 45;
  v5 = (unint64_t *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(_QWORD *)(a2 + 8) & 6) == 2)
  {
    v8 = sub_1C553FEEC((_QWORD *)(a1 + 40 * v3 + 45584), v4 >> 19);
    if (!v8)
    {
LABEL_13:
      LOBYTE(v14) = 10;
      return v14;
    }
    v7 = (uint64_t)(v8 + 3);
  }
  else
  {
    v7 = a1 + 40 * v3 + 28704;
  }
  v9 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)(v7 + 8) <= v9)
    goto LABEL_13;
  v10 = (unsigned __int16 **)(*(_QWORD *)v7 + 24 * v9);
  v12 = sub_1C4825F50(v5);
  if ((_DWORD)v11 == 1)
  {
    v16 = v12;
    v12 = v16;
  }
  sub_1C553E214(v10, v12);
  return BYTE2(v13);
}

void sub_1C553DFFC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _WORD *v6;
  _WORD *v7;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  unint64_t v15;
  int v16;
  unsigned __int16 v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  int *v25;
  _DWORD *v26;
  int v27;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(_WORD **)a2;
  v7 = *(_WORD **)(a2 + 8);
  if (v7 == *(_WORD **)a2)
  {
    v10 = 0;
LABEL_17:
    LOWORD(v14) = 0;
    goto LABEL_18;
  }
  if (*v6 == 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = sub_1C553EDDC((void **)a1, (a3 << 16) | 1u);
    *(_QWORD *)(a1 + 8) = v10;
    v6 = *(_WORD **)a2;
    v7 = *(_WORD **)(a2 + 8);
  }
  if (v7 == v6)
    goto LABEL_17;
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = (int *)&v6[v11];
    if ((unint64_t)v10 < *(_QWORD *)(a1 + 16))
      *v10++ = *v13;
    else
      v10 = sub_1C553FE14((void **)a1, v13);
    *(_QWORD *)(a1 + 8) = v10;
    v6 = *(_WORD **)a2;
    v14 = *(unsigned __int16 *)(*(_QWORD *)a2 + v11 * 2);
    ++v12;
    v15 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
    if (v12 < v15 && v14 + 1 != (unsigned __int16)v6[v11 + 2])
    {
      v16 = (unsigned __int16)(v14 + 1) | (a3 << 16);
      if ((unint64_t)v10 < *(_QWORD *)(a1 + 16))
        *v10++ = v16;
      else
        v10 = sub_1C553EDDC((void **)a1, v16);
      *(_QWORD *)(a1 + 8) = v10;
      v6 = *(_WORD **)a2;
      LOWORD(v14) = *(_WORD *)(*(_QWORD *)a2 + v11 * 2) + 1;
      v15 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
    }
    v11 += 2;
  }
  while (v12 < v15);
LABEL_18:
  v17 = v14 + 1;
  v18 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v10 < v18)
  {
    *v10 = (unsigned __int16)(v14 + 1) | (a4 << 16);
    v26 = v10 + 1;
  }
  else
  {
    v19 = *(int **)a1;
    v20 = ((uint64_t)v10 - *(_QWORD *)a1) >> 2;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62)
      abort();
    v22 = v18 - (_QWORD)v19;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 62)
        sub_1C4764EE4();
      v24 = (char *)operator new(4 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = (int *)&v24[4 * v20];
    *v25 = v17 | (a4 << 16);
    v26 = v25 + 1;
    if (v10 != v19)
    {
      do
      {
        v27 = *--v10;
        *--v25 = v27;
      }
      while (v10 != v19);
      v10 = *(int **)a1;
    }
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v26;
    *(_QWORD *)(a1 + 16) = &v24[4 * v23];
    if (v10)
      operator delete(v10);
  }
  *(_QWORD *)(a1 + 8) = v26;
}

void sub_1C553E214(unsigned __int16 **a1, unsigned int a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned int v8;

  v2 = a1[1];
  if (v2 == *a1)
  {
    v3 = *a1;
  }
  else
  {
    v3 = *a1;
    v4 = ((char *)v2 - (char *)*a1) >> 2;
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[2 * (v4 >> 1)];
      v8 = *v6;
      v7 = v6 + 2;
      v4 += ~(v4 >> 1);
      if (v8 <= a2)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
  }
  __asm { BR              X11 }
}

uint64_t sub_1C553E2A8@<X0>(unsigned __int16 a1@<W1>, unint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *i;
  int v7;

  v5 = v2 >> 32;
  if (v5 < a2)
  {
    for (i = (unsigned __int8 *)(v4 + 4 * v5 + 2); ; i += 4)
    {
      v7 = *i;
      if ((v7 - 1) >= 4 && v7 != 9)
        break;
      if (a2 == ++v5)
        return a1 | (v3 << 16);
    }
    a1 = *((_WORD *)i - 1);
  }
  return a1 | (v3 << 16);
}

uint64_t sub_1C553E3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v7);
      v10[0] = *(_DWORD *)a2;
      v10[1] = v8;
      v11 = v9;
      v2 = sub_1C553DEB0(a1, (uint64_t)v10);
      if (v2)
        break;
      v3 = 0;
      v7 = (v8 + 1);
      v8 = v7;
      if (*(_QWORD *)(a2 + 16) <= v7)
        return v2 | (v3 << 32);
    }
    v3 = v8;
  }
  else
  {
    v3 = 0;
  }
  return v2 | (v3 << 32);
}

void sub_1C553E454(unsigned int a1, uint64_t a2, char **a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  char *v32;
  char *v33;

  if (*(_DWORD *)(a2 + 8) <= a1)
    sub_1C553E640(a2, a1 + 1);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)a2 + 24 * a1;
  if ((char **)v7 != a3)
  {
    v8 = *a3;
    v9 = a3[1];
    v10 = v9 - *a3;
    v11 = v10 >> 2;
    v12 = v6 + 24 * a1;
    v15 = *(_QWORD *)(v12 + 16);
    v14 = (_QWORD *)(v12 + 16);
    v13 = v15;
    v16 = *(char **)v7;
    if (v10 >> 2 <= (unint64_t)((v15 - *(_QWORD *)v7) >> 2))
    {
      v25 = v6 + 24 * a1;
      v26 = *(char **)(v25 + 8);
      v22 = (_QWORD *)(v25 + 8);
      v20 = v26;
      v27 = (v26 - v16) >> 2;
      if (v27 >= v11)
      {
        v32 = *(char **)v7;
        if (v8 != v9)
        {
          v33 = *(char **)v7;
          do
          {
            *(_WORD *)v33 = *(_WORD *)v8;
            v33[2] = v8[2];
            v32 += 4;
            v8 += 4;
            v33 += 4;
          }
          while (v8 != v9);
        }
        v24 = v32 - v16;
        v20 = v16;
      }
      else
      {
        v28 = &v8[4 * v27];
        if (v20 != v16)
        {
          do
          {
            *(_WORD *)v16 = *(_WORD *)v8;
            v16[2] = v8[2];
            v8 += 4;
            v16 += 4;
          }
          while (v8 != v28);
        }
        v29 = v20;
        if (v28 != v9)
        {
          v30 = v20;
          do
          {
            v31 = *(_DWORD *)v28;
            v28 += 4;
            *(_DWORD *)v30 = v31;
            v30 += 4;
            v29 += 4;
          }
          while (v28 != v9);
        }
        v24 = v29 - v20;
      }
    }
    else
    {
      if (v16)
      {
        *(_QWORD *)(v6 + 24 * a1 + 8) = v16;
        operator delete(v16);
        v13 = 0;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
      }
      if (v10 < 0)
        goto LABEL_30;
      v17 = v13 >> 1;
      if (v13 >> 1 <= v11)
        v17 = v10 >> 2;
      v18 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v17;
      if (v18 >> 62)
LABEL_30:
        abort();
      v19 = (char *)operator new(4 * v18);
      v20 = v19;
      *(_QWORD *)v7 = v19;
      v21 = v6 + 24 * a1;
      *(_QWORD *)(v21 + 8) = v19;
      v22 = (_QWORD *)(v21 + 8);
      *v14 = &v19[4 * v18];
      v23 = v19;
      if (v8 != v9)
      {
        memcpy(v19, v8, v10 & 0xFFFFFFFFFFFFFFFCLL);
        v23 = &v20[v10 & 0xFFFFFFFFFFFFFFFCLL];
      }
      v24 = v23 - v20;
    }
    *v22 = &v20[v24];
  }
}

void sub_1C553E640(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = 3 * v2;
      v6 = *(_QWORD *)a1 + 8 * v5 - 24;
      v7 = 24 * a2 - 8 * v5;
      do
      {
        v8 = *(void **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)(v6 + 8) = v8;
          operator delete(v8);
        }
        v6 -= 24;
        v7 += 24;
      }
      while (v7);
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C6273BE8(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 24 * v2), 24 * ((24 * (a2 - v2) - 24) / 0x18) + 24);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

_QWORD *sub_1C553E70C(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >> 62)
      abort();
    v7 = result;
    result = operator new(4 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * a4;
    if (a2 != a3)
    {
      v9 = (a3 - a2) & 0xFFFFFFFFFFFFFFFCLL;
      result = memcpy(result, a2, v9);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

uint64_t **sub_1C553E794(_QWORD *a1, unsigned __int16 a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t ***v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **result;

  v2 = a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] <= 1uLL)
    {
      v4 = ((_DWORD)v2 - 1) & a2;
    }
    else
    {
      v4 = a2;
      if (v2 <= a2)
        v4 = a2 % v2;
    }
    v5 = *(uint64_t ****)(*a1 + 8 * v4);
    if (v5)
    {
      v6 = *v5;
      if (v6)
      {
        while (1)
        {
          v7 = (unint64_t)v6[1];
          if (v7 == a2)
          {
            if (*((unsigned __int16 *)v6 + 8) == a2)
              return v6;
          }
          else
          {
            if (v3.u32[0] <= 1uLL)
            {
              v7 &= v2 - 1;
            }
            else if (v7 >= v2)
            {
              v7 %= v2;
            }
            if (v7 != v4)
              return 0;
          }
          result = 0;
          v6 = (uint64_t **)*v6;
          if (!v6)
            return result;
        }
      }
    }
  }
  return 0;
}

_QWORD *sub_1C553E858(float *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x40uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[3] = v10 + 5;
  v10[4] = 0x100000000;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_1C4764EE4();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_1C553EC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  _BYTE *v10;

  v4 = a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
  v7 = *(unsigned int *)(a1 + 8);
  if (v6 + v7 > *(unsigned int *)(a1 + 12))
  {
    sub_1C6273BE8(a1, v6 + v7);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)a1 + 24 * v7);
    do
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      v9 = *(_BYTE **)v4;
      v10 = *(_BYTE **)(v4 + 8);
      v4 += 24;
      sub_1C553E70C(v8, v9, v10, (v10 - v9) >> 2);
      v8 += 3;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + v6;
}

uint64_t sub_1C553ECF0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E816E970;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C553ED08(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  unsigned __int16 *v5;
  uint64_t **v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = v5[16];
        if (v8 <= a2)
          break;
        v5 = (unsigned __int16 *)*v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (unsigned __int16 *)v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = v7;
    v7 = operator new(0x40uLL);
    *((_WORD *)v7 + 16) = *a3;
    *v7 = 0;
    v7[1] = 0;
    v7[6] = 0;
    v7[7] = 0;
    v7[5] = 0;
    v7[2] = v9;
    *v6 = v7;
    v10 = (uint64_t *)**a1;
    v11 = v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_DWORD *sub_1C553EDDC(void **a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _DWORD *v12;
  int v13;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 2;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 62)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 1 > v5)
    v5 = v8 >> 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v9 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 62)
      sub_1C4764EE4();
    v10 = (char *)operator new(4 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[4 * v4];
  *(_DWORD *)v11 = a2;
  v12 = v11 + 4;
  if (v2 != v3)
  {
    do
    {
      v13 = *((_DWORD *)v2 - 1);
      v2 -= 4;
      *((_DWORD *)v11 - 1) = v13;
      v11 -= 4;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[4 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

unint64_t sub_1C553EEB0(unint64_t result, unsigned __int16 *a2, uint64_t a3, char a4)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *j;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned __int16 *m;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int16 *k;
  unsigned int v40;
  unsigned int v41;
  unsigned __int16 v42;
  unsigned int v43;
  char v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int16 *v53;
  BOOL v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned __int16 *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  char *v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned __int16 *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned __int16 *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned __int16 *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int16 *v94;
  unsigned __int16 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned __int16 *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned __int16 *v109;
  unint64_t v110;
  unsigned int v111;
  unsigned __int16 *v112;
  unsigned __int16 *v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  unsigned __int16 *i;

  v7 = (unsigned __int16 *)result;
LABEL_2:
  v8 = a2 - 2;
  j = v7;
  while (2)
  {
    v7 = j;
    v10 = (char *)a2 - (char *)j;
    v11 = ((char *)a2 - (char *)j) >> 2;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v49 = *(a2 - 2);
        v50 = *j;
        if (v49 >= v50)
        {
          if (v50 < v49)
            return result;
          v52 = *((unsigned __int8 *)a2 - 2);
          v51 = *((unsigned __int8 *)j + 2);
          if (v52 >= v51)
            return result;
        }
        else
        {
          LOBYTE(v51) = *((_BYTE *)j + 2);
          LOBYTE(v52) = *((_BYTE *)a2 - 2);
        }
        *j = v49;
        *(a2 - 2) = v50;
        *((_BYTE *)j + 2) = v52;
        *((_BYTE *)a2 - 2) = v51;
        return result;
      case 3:
        return (unint64_t)sub_1C553F87C(j, j + 2, a2 - 2);
      case 4:
        return (unint64_t)sub_1C553FBC4(j, j + 2, j + 4, a2 - 2);
      case 5:
        return (unint64_t)sub_1C553FCC4(j, j + 2, j + 4, j + 6, a2 - 2);
      default:
        if (v10 <= 95)
        {
          v53 = j + 2;
          v55 = j == a2 || v53 == a2;
          if ((a4 & 1) == 0)
          {
            if (!v55)
            {
              v112 = j + 1;
              do
              {
                v113 = v7;
                v7 = v53;
                v114 = v113[2];
                v115 = *v113;
                if (v114 < v115
                  || v115 >= v114 && *((unsigned __int8 *)v113 + 6) < *((unsigned __int8 *)v113 + 2))
                {
                  v116 = *(_DWORD *)v7;
                  v117 = (unsigned __int16)*(_DWORD *)v7;
                  for (i = v112; ; i -= 2)
                  {
                    i[1] = v115;
                    *((_BYTE *)i + 4) = *(_BYTE *)i;
                    v115 = *(i - 3);
                    if (v115 <= v117 && (v115 < v117 || *((unsigned __int8 *)i - 4) <= BYTE2(v116)))
                      break;
                  }
                  *(i - 1) = v117;
                  *(_BYTE *)i = BYTE2(v116);
                }
                v53 = v7 + 2;
                v112 += 2;
              }
              while (v7 + 2 != a2);
            }
            return result;
          }
          if (v55)
            return result;
          v56 = 0;
          v57 = j;
          while (1)
          {
            v58 = v57;
            v57 = v53;
            v59 = v58[2];
            v60 = *v58;
            if (v59 < v60)
              break;
            if (v60 >= v59)
            {
              v61 = *((unsigned __int8 *)v58 + 2);
              if (*((unsigned __int8 *)v58 + 6) < v61)
                goto LABEL_107;
            }
LABEL_117:
            v53 = v57 + 2;
            v56 += 4;
            if (v57 + 2 == a2)
              return result;
          }
          LOBYTE(v61) = *((_BYTE *)v58 + 2);
LABEL_107:
          v62 = *((_DWORD *)v58 + 1);
          v63 = (unsigned __int16)v62;
          v58[2] = v60;
          *((_BYTE *)v57 + 2) = v61;
          v64 = HIWORD(v62);
          v65 = j;
          if (v58 != j)
          {
            v66 = v56;
            do
            {
              v67 = *(unsigned __int16 *)((char *)j + v66 - 4);
              if (v67 <= v63)
              {
                if (v67 < v63)
                {
                  v65 = v58;
                  goto LABEL_116;
                }
                v65 = (unsigned __int16 *)((char *)j + v66);
                v68 = *((unsigned __int8 *)j + v66 - 2);
                if (v68 <= v64)
                  goto LABEL_116;
              }
              else
              {
                LOBYTE(v68) = *((_BYTE *)j + v66 - 2);
              }
              v58 -= 2;
              v69 = (char *)j + v66;
              *(_WORD *)v69 = v67;
              v69[2] = v68;
              v66 -= 4;
            }
            while (v66);
            v65 = j;
          }
LABEL_116:
          *v65 = v63;
          *((_BYTE *)v65 + 2) = v64;
          goto LABEL_117;
        }
        if (!a3)
        {
          if (j == a2)
            return result;
          v70 = (unint64_t)(v11 - 2) >> 1;
          v71 = v70;
          do
          {
            v72 = v71;
            if (v70 >= v71)
            {
              v73 = (2 * v71) | 1;
              v74 = &j[2 * v73];
              if (2 * v72 + 2 < v11)
              {
                v75 = v74[2];
                v76 = *v74;
                if (v76 < v75 || v75 >= v76 && LOBYTE(j[2 * v73 + 1]) < *((unsigned __int8 *)v74 + 6))
                {
                  v74 += 2;
                  v73 = 2 * v72 + 2;
                }
              }
              v77 = &j[2 * v72];
              v78 = *v74;
              v79 = *v77;
              if (v78 >= v79)
              {
                v80 = *((unsigned __int8 *)v74 + 2);
                if (v79 < v78 || v80 >= LOBYTE(j[2 * v72 + 1]))
                {
                  v81 = &j[2 * v72];
                  result = *(unsigned int *)v81;
                  v82 = (unsigned __int16)*(_DWORD *)v81;
                  *v77 = v78;
                  *((_BYTE *)v81 + 2) = v80;
                  v83 = WORD1(result);
                  if (v70 >= v73)
                  {
                    while (1)
                    {
                      v85 = 2 * v73;
                      v73 = (2 * v73) | 1;
                      v84 = &j[2 * v73];
                      v86 = v85 + 2;
                      if (v86 < v11)
                      {
                        result = v84[2];
                        v87 = *v84;
                        if (v87 < result
                          || result >= v87
                          && (result = LOBYTE(j[2 * v73 + 1]), result < *((unsigned __int8 *)v84 + 6)))
                        {
                          v84 += 2;
                          v73 = v86;
                        }
                      }
                      v88 = *v84;
                      if (v88 < v82)
                        break;
                      v89 = *((unsigned __int8 *)v84 + 2);
                      if (v88 <= v82 && v89 < v83)
                        break;
                      *v74 = v88;
                      *((_BYTE *)v74 + 2) = v89;
                      v74 = v84;
                      if (v70 < v73)
                        goto LABEL_132;
                    }
                  }
                  v84 = v74;
LABEL_132:
                  *v84 = v82;
                  *((_BYTE *)v84 + 2) = v83;
                }
              }
            }
            v71 = v72 - 1;
          }
          while (v72);
          while (1)
          {
            v90 = 0;
            v91 = *(_DWORD *)j;
            v92 = v11 - 2;
            if (v11 < 2)
              v92 = v11 - 1;
            v93 = v92 >> 1;
            v94 = j;
            do
            {
              v95 = v94;
              v96 = v90 + 1;
              v94 += 2 * v90 + 2;
              v97 = 2 * v90;
              v90 = (2 * v90) | 1;
              v98 = v97 + 2;
              if (v98 < v11)
              {
                result = v94[2];
                v99 = *v94;
                if (v99 < result
                  || result >= v99
                  && (result = *((unsigned __int8 *)v94 + 6), LOBYTE(v95[2 * v96 + 1]) < result))
                {
                  v94 += 2;
                  v90 = v98;
                }
              }
              *v95 = *v94;
              *((_BYTE *)v95 + 2) = *((_BYTE *)v94 + 2);
            }
            while (v90 <= v93);
            if (v94 == a2 - 2)
            {
              *v94 = v91;
              *((_BYTE *)v94 + 2) = BYTE2(v91);
            }
            else
            {
              *v94 = *(a2 - 2);
              *((_BYTE *)v94 + 2) = *((_BYTE *)a2 - 2);
              *(a2 - 2) = v91;
              *((_BYTE *)a2 - 2) = BYTE2(v91);
              v100 = (char *)v94 - (char *)j + 4;
              if (v100 >= 5)
              {
                v101 = ((unint64_t)v100 >> 2) - 2;
                v102 = v101 >> 1;
                v103 = &j[2 * (v101 >> 1)];
                v104 = *v103;
                v105 = *v94;
                if (v104 < v105)
                {
                  LOBYTE(v106) = *((_BYTE *)v103 + 2);
LABEL_161:
                  result = *(unsigned int *)v94;
                  v107 = (unsigned __int16)*(_DWORD *)v94;
                  *v94 = v104;
                  *((_BYTE *)v94 + 2) = v106;
                  v108 = WORD1(result);
                  if (v101 >= 2)
                  {
                    while (1)
                    {
                      v110 = v102 - 1;
                      v102 = (v102 - 1) >> 1;
                      v109 = &j[2 * v102];
                      v111 = *v109;
                      if (v111 >= v107)
                      {
                        if (v111 > v107)
                          break;
                        result = LOBYTE(j[2 * v102 + 1]);
                        if (result >= v108)
                          break;
                      }
                      else
                      {
                        result = *((unsigned __int8 *)v109 + 2);
                      }
                      *v103 = v111;
                      *((_BYTE *)v103 + 2) = result;
                      v103 = &j[2 * v102];
                      if (v110 <= 1)
                        goto LABEL_168;
                    }
                  }
                  v109 = v103;
LABEL_168:
                  *v109 = v107;
                  *((_BYTE *)v109 + 2) = v108;
                  goto LABEL_169;
                }
                if (v105 >= v104)
                {
                  v106 = LOBYTE(j[2 * v102 + 1]);
                  if (v106 < *((unsigned __int8 *)v94 + 2))
                    goto LABEL_161;
                }
              }
            }
LABEL_169:
            a2 -= 2;
            v31 = v11-- <= 2;
            if (v31)
              return result;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &j[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x201)
        {
          result = (unint64_t)sub_1C553F87C(&v7[2 * ((unint64_t)v11 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_1C553F87C(v7, &v7[2 * ((unint64_t)v11 >> 1)], a2 - 2);
          sub_1C553F87C(v7 + 2, v13 - 2, a2 - 4);
          sub_1C553F87C(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
          result = (unint64_t)sub_1C553F87C(v13 - 2, v13, &v7[2 * v12 + 2]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
          LOBYTE(v14) = *((_BYTE *)v7 + 2);
          *((_BYTE *)v7 + 2) = *((_BYTE *)v13 + 2);
          *((_BYTE *)v13 + 2) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(v7 - 2);
          v16 = *v7;
          if (v15 >= v16 && (v16 < v15 || *((unsigned __int8 *)v7 - 2) >= *((unsigned __int8 *)v7 + 2)))
          {
            v34 = (unsigned __int16)*(_DWORD *)v7;
            v35 = BYTE2(*(_DWORD *)v7);
            v36 = *v8;
            if (v36 <= v34 && (v36 < v34 || *((unsigned __int8 *)a2 - 2) <= v35))
            {
              for (j = v7 + 2; j < a2; j += 2)
              {
                v48 = *j;
                if (v48 > v34 || v48 >= v34 && *((unsigned __int8 *)j + 2) > v35)
                  break;
              }
            }
            else
            {
              j = v7;
              do
              {
                v38 = j[2];
                j += 2;
                v37 = v38;
              }
              while (v38 <= v34 && (v37 < v34 || *((unsigned __int8 *)j + 2) <= v35));
            }
            k = a2;
            if (j < a2)
            {
              for (k = a2 - 2; v36 > v34 || v36 >= v34 && *((unsigned __int8 *)k + 2) > v35; k -= 2)
              {
                v40 = *(k - 2);
                v36 = v40;
              }
            }
            if (j < k)
            {
              LOWORD(v41) = *j;
              v42 = *k;
              do
              {
                *j = v42;
                *k = v41;
                v43 = j[2];
                j += 2;
                v41 = v43;
                v44 = *((_BYTE *)j - 2);
                *((_BYTE *)j - 2) = *((_BYTE *)k + 2);
                *((_BYTE *)k + 2) = v44;
                while (v41 <= v34 && (v41 < v34 || *((unsigned __int8 *)j + 2) <= v35))
                {
                  v45 = j[2];
                  j += 2;
                  v41 = v45;
                }
                do
                {
                  do
                  {
                    v46 = *(k - 2);
                    k -= 2;
                    v42 = v46;
                    v47 = v46 >= v34;
                  }
                  while (v46 > v34);
                }
                while (v47 && *((unsigned __int8 *)k + 2) > v35);
              }
              while (j < k);
            }
            if (j - 2 != v7)
            {
              *v7 = *(j - 2);
              *((_BYTE *)v7 + 2) = *((_BYTE *)j - 2);
            }
            a4 = 0;
            *(j - 2) = v34;
            *((_BYTE *)j - 2) = v35;
            continue;
          }
        }
        v17 = 0;
        v18 = (unsigned __int16)*(_DWORD *)v7;
        v19 = BYTE2(*(_DWORD *)v7);
        while (1)
        {
          v20 = v7[v17 + 2];
          if (v20 >= v18 && (v20 > v18 || LOBYTE(v7[v17 + 3]) >= v19))
            break;
          v17 += 2;
        }
        v21 = (unint64_t)&v7[v17 + 2];
        if (v17 * 2)
        {
          v22 = *v8;
          for (m = a2 - 2; v22 >= v18 && (v22 > v18 || *((unsigned __int8 *)m + 2) >= v19); m -= 2)
          {
            v24 = *(m - 2);
            v22 = v24;
          }
        }
        else
        {
          m = a2;
          if (v21 < (unint64_t)a2)
          {
            v25 = *v8;
            m = a2 - 2;
            if (v25 >= v18)
            {
              m = a2 - 2;
              do
              {
                if (v25 <= v18)
                {
                  if (v21 >= (unint64_t)m || *((unsigned __int8 *)m + 2) < v19)
                    break;
                }
                else if (v21 >= (unint64_t)m)
                {
                  break;
                }
                v26 = *(m - 2);
                m -= 2;
                v25 = v26;
              }
              while (v26 >= v18);
            }
          }
        }
        if (v21 >= (unint64_t)m)
        {
          j = (unsigned __int16 *)v21;
        }
        else
        {
          LOWORD(v27) = *m;
          j = (unsigned __int16 *)v21;
          v28 = (unint64_t)m;
          do
          {
            *j = v27;
            *(_WORD *)v28 = v20;
            v29 = *((_BYTE *)j + 2);
            *((_BYTE *)j + 2) = *(_BYTE *)(v28 + 2);
            *(_BYTE *)(v28 + 2) = v29;
            do
            {
              do
              {
                v30 = j[2];
                j += 2;
                LOWORD(v20) = v30;
                v31 = v30 > v18;
              }
              while (v30 < v18);
            }
            while (!v31 && *((unsigned __int8 *)j + 2) < v19);
            do
            {
              v32 = *(unsigned __int16 *)(v28 - 4);
              v28 -= 4;
              v27 = v32;
            }
            while (v32 >= v18 && (v27 > v18 || *(unsigned __int8 *)(v28 + 2) >= v19));
          }
          while ((unint64_t)j < v28);
        }
        if (j - 2 != v7)
        {
          *v7 = *(j - 2);
          *((_BYTE *)v7 + 2) = *((_BYTE *)j - 2);
        }
        *(j - 2) = v18;
        *((_BYTE *)j - 2) = v19;
        if (v21 < (unint64_t)m)
        {
LABEL_50:
          result = sub_1C553EEB0(v7, j - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_1C553F9C4(v7, j - 2);
        result = sub_1C553F9C4(j, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_50;
        }
        a2 = j - 2;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned __int16 *sub_1C553F87C(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *a2;
  v4 = *result;
  if (v3 >= v4 && (v4 < v3 || *((unsigned __int8 *)a2 + 2) >= *((unsigned __int8 *)result + 2)))
  {
    v8 = *a3;
    if (v8 >= v3)
    {
      if (v3 < v8)
        return result;
      v10 = *((unsigned __int8 *)a3 + 2);
      v9 = *((unsigned __int8 *)a2 + 2);
      if (v10 >= v9)
        return result;
    }
    else
    {
      LOBYTE(v9) = *((_BYTE *)a2 + 2);
      LOBYTE(v10) = *((_BYTE *)a3 + 2);
    }
    *a2 = v8;
    *a3 = v3;
    *((_BYTE *)a2 + 2) = v10;
    *((_BYTE *)a3 + 2) = v9;
    v11 = *a2;
    v12 = *result;
    if (v11 >= v12)
    {
      if (v12 < v11)
        return result;
      v14 = *((unsigned __int8 *)a2 + 2);
      v13 = *((unsigned __int8 *)result + 2);
      if (v14 >= v13)
        return result;
    }
    else
    {
      LOBYTE(v13) = *((_BYTE *)result + 2);
      LOBYTE(v14) = *((_BYTE *)a2 + 2);
    }
    *result = v11;
    *a2 = v12;
    *((_BYTE *)result + 2) = v14;
    *((_BYTE *)a2 + 2) = v13;
    return result;
  }
  v5 = *a3;
  if (v5 < v3)
  {
    LOBYTE(v6) = *((_BYTE *)a3 + 2);
LABEL_6:
    *result = v5;
    *a3 = v4;
    v7 = *((_BYTE *)result + 2);
    *((_BYTE *)result + 2) = v6;
    *((_BYTE *)a3 + 2) = v7;
    return result;
  }
  if (v3 >= v5)
  {
    v6 = *((unsigned __int8 *)a3 + 2);
    v15 = *((unsigned __int8 *)a2 + 2);
    if (v6 < v15)
      goto LABEL_6;
  }
  else
  {
    LOBYTE(v15) = *((_BYTE *)a2 + 2);
  }
  *result = v3;
  *a2 = v4;
  v16 = *((unsigned __int8 *)result + 2);
  *((_BYTE *)result + 2) = v15;
  *((_BYTE *)a2 + 2) = v16;
  v17 = *a3;
  if (v17 < v4)
  {
    LOBYTE(v18) = *((_BYTE *)a3 + 2);
LABEL_24:
    *a2 = v17;
    *a3 = v4;
    *((_BYTE *)a2 + 2) = v18;
    *((_BYTE *)a3 + 2) = v16;
    return result;
  }
  if (v4 >= v17)
  {
    v18 = *((unsigned __int8 *)a3 + 2);
    if (v18 < v16)
      goto LABEL_24;
  }
  return result;
}

BOOL sub_1C553F9C4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  unsigned int v24;

  v4 = ((char *)a2 - (char *)a1) >> 2;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < v7)
      {
        LOBYTE(v8) = *((_BYTE *)a1 + 2);
        LOBYTE(v9) = *((_BYTE *)a2 - 2);
LABEL_30:
        *a1 = v6;
        *(a2 - 2) = v7;
        *((_BYTE *)a1 + 2) = v9;
        *((_BYTE *)a2 - 2) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *((unsigned __int8 *)a2 - 2);
        v8 = *((unsigned __int8 *)a1 + 2);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      sub_1C553F87C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1C553FBC4(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1C553FCC4(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      sub_1C553F87C(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *v11;
  v15 = *v10;
  if (v14 >= v15)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *((unsigned __int8 *)v10 + 2);
    if (*((unsigned __int8 *)v11 + 2) >= v16)
      goto LABEL_21;
  }
  else
  {
    LOBYTE(v16) = *((_BYTE *)v10 + 2);
  }
  v17 = *(_DWORD *)v11;
  v18 = (unsigned __int16)*(_DWORD *)v11;
  *v11 = v15;
  *((_BYTE *)v11 + 2) = v16;
  v19 = HIWORD(v17);
  v20 = (uint64_t)a1;
  if (v10 == a1)
    goto LABEL_20;
  v21 = v12;
  while (1)
  {
    v22 = (char *)a1 + v21;
    v23 = *(unsigned __int16 *)((char *)a1 + v21 + 4);
    if (v23 <= v18)
    {
      if (v23 < v18)
      {
        v20 = (uint64_t)a1 + v21 + 8;
        goto LABEL_20;
      }
      v24 = *((unsigned __int8 *)a1 + v21 + 6);
      if (v24 <= v19)
      {
        v20 = (uint64_t)v10;
LABEL_20:
        *(_WORD *)v20 = v18;
        *(_BYTE *)(v20 + 2) = v19;
        if (++v13 == 8)
          return v11 + 2 == a2;
LABEL_21:
        v10 = v11;
        v12 += 4;
        v11 += 2;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      LOBYTE(v24) = v22[6];
    }
    v10 -= 2;
    *((_WORD *)v22 + 4) = v23;
    *((_BYTE *)a1 + v21 + 10) = v24;
    v21 -= 4;
    if (v21 == -8)
    {
      v20 = (uint64_t)a1;
      goto LABEL_20;
    }
  }
}

unsigned __int16 *sub_1C553FBC4(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unsigned __int16 *result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  result = sub_1C553F87C(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (v9 >= v10)
  {
    if (v10 < v9)
      return result;
    v12 = *((unsigned __int8 *)a4 + 2);
    v11 = *((unsigned __int8 *)a3 + 2);
    if (v12 >= v11)
      return result;
  }
  else
  {
    LOBYTE(v11) = *((_BYTE *)a3 + 2);
    LOBYTE(v12) = *((_BYTE *)a4 + 2);
  }
  *a3 = v9;
  *a4 = v10;
  *((_BYTE *)a3 + 2) = v12;
  *((_BYTE *)a4 + 2) = v11;
  v13 = *a3;
  v14 = *a2;
  if (v13 >= v14)
  {
    if (v14 < v13)
      return result;
    v16 = *((unsigned __int8 *)a3 + 2);
    v15 = *((unsigned __int8 *)a2 + 2);
    if (v16 >= v15)
      return result;
  }
  else
  {
    LOBYTE(v15) = *((_BYTE *)a2 + 2);
    LOBYTE(v16) = *((_BYTE *)a3 + 2);
  }
  *a2 = v13;
  *a3 = v14;
  *((_BYTE *)a2 + 2) = v16;
  *((_BYTE *)a3 + 2) = v15;
  v17 = *a2;
  v18 = *a1;
  if (v17 < v18)
  {
    LOBYTE(v19) = *((_BYTE *)a1 + 2);
    LOBYTE(v20) = *((_BYTE *)a2 + 2);
LABEL_15:
    *a1 = v17;
    *a2 = v18;
    *((_BYTE *)a1 + 2) = v20;
    *((_BYTE *)a2 + 2) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = *((unsigned __int8 *)a2 + 2);
    v19 = *((unsigned __int8 *)a1 + 2);
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

unsigned __int16 *sub_1C553FCC4(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  unsigned __int16 *result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  result = sub_1C553FBC4(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (v11 >= v12)
  {
    if (v12 < v11)
      return result;
    v14 = *((unsigned __int8 *)a5 + 2);
    v13 = *((unsigned __int8 *)a4 + 2);
    if (v14 >= v13)
      return result;
  }
  else
  {
    LOBYTE(v13) = *((_BYTE *)a4 + 2);
    LOBYTE(v14) = *((_BYTE *)a5 + 2);
  }
  *a4 = v11;
  *a5 = v12;
  *((_BYTE *)a4 + 2) = v14;
  *((_BYTE *)a5 + 2) = v13;
  v15 = *a4;
  v16 = *a3;
  if (v15 >= v16)
  {
    if (v16 < v15)
      return result;
    v18 = *((unsigned __int8 *)a4 + 2);
    v17 = *((unsigned __int8 *)a3 + 2);
    if (v18 >= v17)
      return result;
  }
  else
  {
    LOBYTE(v17) = *((_BYTE *)a3 + 2);
    LOBYTE(v18) = *((_BYTE *)a4 + 2);
  }
  *a3 = v15;
  *a4 = v16;
  *((_BYTE *)a3 + 2) = v18;
  *((_BYTE *)a4 + 2) = v17;
  v19 = *a3;
  v20 = *a2;
  if (v19 >= v20)
  {
    if (v20 < v19)
      return result;
    v22 = *((unsigned __int8 *)a3 + 2);
    v21 = *((unsigned __int8 *)a2 + 2);
    if (v22 >= v21)
      return result;
  }
  else
  {
    LOBYTE(v21) = *((_BYTE *)a2 + 2);
    LOBYTE(v22) = *((_BYTE *)a3 + 2);
  }
  *a2 = v19;
  *a3 = v20;
  *((_BYTE *)a2 + 2) = v22;
  *((_BYTE *)a3 + 2) = v21;
  v23 = *a2;
  v24 = *a1;
  if (v23 < v24)
  {
    LOBYTE(v25) = *((_BYTE *)a1 + 2);
    LOBYTE(v26) = *((_BYTE *)a2 + 2);
LABEL_9:
    *a1 = v23;
    *a2 = v24;
    *((_BYTE *)a1 + 2) = v26;
    *((_BYTE *)a2 + 2) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v26 = *((unsigned __int8 *)a2 + 2);
    v25 = *((unsigned __int8 *)a1 + 2);
    if (v26 < v25)
      goto LABEL_9;
  }
  return result;
}

_DWORD *sub_1C553FE14(void **a1, _DWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _DWORD *v12;
  int v13;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 2;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 62)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 1 > v5)
    v5 = v8 >> 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v9 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 62)
      sub_1C4764EE4();
    v10 = (char *)operator new(4 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[4 * v4];
  *(_DWORD *)v11 = *a2;
  v12 = v11 + 4;
  if (v2 != v3)
  {
    do
    {
      v13 = *((_DWORD *)v2 - 1);
      v2 -= 4;
      *((_DWORD *)v11 - 1) = v13;
      v11 -= 4;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[4 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t **sub_1C553FEEC(_QWORD *a1, unsigned __int16 a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t ***v5;
  uint64_t **result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] <= 1uLL)
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  else
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  v5 = *(uint64_t ****)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t **)*result)
  {
    v7 = (unint64_t)result[1];
    if (v7 == a2)
    {
      if (*((unsigned __int16 *)result + 8) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] <= 1uLL)
      {
        v7 &= v2 - 1;
      }
      else if (v7 >= v2)
      {
        v7 %= v2;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1C553FFA0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Generic memory optimizations";
  *(_QWORD *)(v2 + 8) = 28;
  *(_QWORD *)(v2 + 16) = "loadstore-opt";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2FE0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C62748E4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5540030(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;
  void (**v8)(_QWORD *);
  uint64_t (**v9)(uint64_t);
  _QWORD *v10;
  unsigned int v11;
  char v12;
  int v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t (**v16)();
  BOOL (*v17)(_BOOL8);
  uint64_t (***v18)();
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v13 = 0;
  LODWORD(v14[0]) = a2;
  v16 = (uint64_t (**)())a1;
  v17 = (BOOL (*)(_BOOL8))&v13;
  result = sub_1C4A6024C((uint64_t)&v16, a3, (unsigned int *)v14);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = 0;
    goto LABEL_13;
  }
  v16 = &off_1E816EFF0;
  v17 = sub_1C554C7E0;
  v18 = &v16;
  v14[0] = &off_1E816F038;
  v14[1] = sub_1C554C7F8;
  v15 = v14;
  sub_1C554C3AC(v13, a3, (uint64_t)&v16, (uint64_t)v14, 1, 0, &v10);
  v7 = v15;
  if (v15 == v14)
  {
    v8 = (void (**)(_QWORD *))(v14[0] + 32);
    v7 = v14;
LABEL_4:
    (*v8)(v7);
    goto LABEL_5;
  }
  if (v15)
  {
    v8 = (void (**)(_QWORD *))(*v15 + 40);
    goto LABEL_4;
  }
LABEL_5:
  result = (uint64_t)v18;
  if (v18 == &v16)
  {
    v9 = (uint64_t (**)(uint64_t))(v16 + 4);
    result = (uint64_t)&v16;
  }
  else
  {
    if (!v18)
      goto LABEL_8;
    v9 = (uint64_t (**)(uint64_t))(*v18 + 5);
  }
  result = (*v9)(result);
LABEL_8:
  if (v12)
  {
    if (v11 > 0x40)
    {
      *(_QWORD *)(a1 + 8) = *v10;
      *(_DWORD *)(a1 + 4) = v13;
      *(_BYTE *)(a1 + 16) = 0;
      return MEMORY[0x1CAA32F9C]();
    }
    *(_QWORD *)(a1 + 8) = (uint64_t)((_QWORD)v10 << -(uint64_t)v11) >> -(uint64_t)v11;
  }
  *(_DWORD *)(a1 + 4) = v13;
LABEL_13:
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1C55401F0(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD v39[2];
  char v40;

  v4 = **(unsigned __int16 **)(a1 + 16) - 90;
  v5 = v4 > 6;
  v6 = (1 << v4) & 0x47;
  if (v5 || v6 == 0)
    v8 = 0;
  else
    v8 = a1;
  v9 = **(unsigned __int16 **)(a2 + 16) - 90;
  v5 = v9 > 6;
  v10 = (1 << v9) & 0x47;
  v11 = v5 || v10 == 0;
  if (v11 || !v8)
    return 0;
  sub_1C5540030((uint64_t)&v37, *(_DWORD *)(*(_QWORD *)(v8 + 32) + 36), a4);
  sub_1C5540030((uint64_t)&v35, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), a4);
  result = 0;
  if (!v37 || !v35)
    return result;
  v16 = *(_QWORD *)(v8 + 48);
  if ((v16 & 7) != 0)
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v8 + 48) = v16 & 0xFFFFFFFFFFFFFFF8;
  }
  v19 = *(_QWORD *)(v17 + 24);
  v18 = (unint64_t *)(v17 + 24);
  if ((v19 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v21 = (unint64_t)(sub_1C4825F50(v18) + 7) >> 3;
    if ((_DWORD)v20 == 1)
  }
  else
  {
    v21 = -1;
  }
  v22 = *(_QWORD *)(a2 + 48);
  if ((v22 & 7) != 0)
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v22 & 0xFFFFFFFFFFFFFFF8;
  }
  v25 = *(_QWORD *)(v23 + 24);
  v24 = (unint64_t *)(v23 + 24);
  if ((v25 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v27 = (unint64_t)(sub_1C4825F50(v24) + 7) >> 3;
    if ((_DWORD)v26 == 1)
  }
  else
  {
    v27 = -1;
  }
  if (v37 == v35)
  {
    v28 = v36 - v38;
    if (v36 - v38 >= 0 && v21 != -1)
    {
      LOBYTE(result) = v21 > v28;
LABEL_51:
      *a3 = result;
      return 1;
    }
    result = 0;
    if ((v28 & 0x8000000000000000) != 0 && v27 != -1)
    {
      if (((uint64_t)(v28 + v27) < 0) ^ __OFADD__(v28, v27) | (v28 + v27 == 0))
        LOBYTE(result) = 0;
      else
        LOBYTE(result) = 1;
      goto LABEL_51;
    }
    return result;
  }
  sub_1C554CC94(v37, a4, (uint64_t)v39);
  if (v40)
    v29 = v39[0];
  else
    v29 = 0;
  sub_1C554CC94(v35, a4, (uint64_t)v39);
  result = 0;
  if (v40)
    v30 = v39[0];
  else
    v30 = 0;
  if (!v29 || !v30)
    return result;
  v31 = **(unsigned __int16 **)(v29 + 16);
  if (v31 != **(unsigned __int16 **)(v30 + 16))
    return 0;
  if (v31 == 71)
  {
    result = 0;
    if (*(_QWORD *)(*(_QWORD *)(v29 + 32) + 48) != *(_QWORD *)(*(_QWORD *)(v30 + 32) + 48))
      goto LABEL_51;
    return result;
  }
  if (v31 != 70 || v29 == v30)
    return 0;
  v32 = *(_DWORD *)(*(_QWORD *)(v29 + 32) + 48);
  if ((v32 & 0x80000000) == 0)
  {
    LOBYTE(result) = 0;
    goto LABEL_51;
  }
  LOBYTE(result) = 0;
  v33 = -*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 24) + 32) + 56) + 32);
  if (v32 < v33)
    goto LABEL_51;
  result = 0;
  v34 = *(_DWORD *)(*(_QWORD *)(v30 + 32) + 48);
  if ((v34 & 0x80000000) == 0 || v34 < v33)
    goto LABEL_51;
  return result;
}

uint64_t sub_1C55404A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  __int16 v12;
  __int16 v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;

  sub_1C5540688(&v36, a3, a1);
  sub_1C5540688(&v33, a3, a2);
  if (DWORD1(v36))
    v8 = DWORD1(v36) == DWORD1(v33);
  else
    v8 = 0;
  if (!v8 || *((_QWORD *)&v36 + 1) != *((_QWORD *)&v33 + 1))
  {
    v9 = !(_BYTE)v36 || v33 == 0;
    if (v9 && (!BYTE1(v36) || !BYTE1(v33)))
    {
      v10 = v38;
      if (v38 && (v11 = v35) != 0)
      {
        v12 = *((_WORD *)v38 + 16);
        v13 = *((_WORD *)v35 + 16);
        if ((v12 & 0x20) != 0 && (v13 & 2) != 0 || (v12 & 2) != 0 && (v13 & 0x20) != 0)
          return 0;
        v32 = 0;
        if ((sub_1C55401F0(a1, a2, &v32, a3) & 1) != 0)
          return v32 != 0;
        if (a4)
        {
          v15 = *v10;
          if ((unint64_t)*v10 >= 8 && (v15 & 4) == 0)
          {
            v16 = *v11;
            if ((unint64_t)*v11 >= 8 && (v16 & 4) == 0 && v37 != -1 && v34 != -1)
            {
              v17 = v10[1];
              v18 = v11[1];
              if (v18 >= v17)
                v19 = v10[1];
              else
                v19 = v11[1];
              v20 = v37 + v17 - v19;
              v21 = v15 & 0xFFFFFFFFFFFFFFF8;
              if (v20 > 0x7FFFFFFFFFFFFFFBLL)
                v20 = -2;
              v29[0] = v21;
              v29[1] = v20;
              v22 = *(_OWORD *)(v10 + 5);
              v31 = *(_OWORD *)(v10 + 7);
              v30 = v22;
              v23 = v16 & 0xFFFFFFFFFFFFFFF8;
              v24 = (unint64_t)(v18 - v19 + v34) <= 0x7FFFFFFFFFFFFFFBLL ? v18 - v19 + v34 : -2;
              v26[0] = v23;
              v26[1] = v24;
              v25 = *(_OWORD *)(v11 + 5);
              v28 = *(_OWORD *)(v11 + 7);
              v27 = v25;
              if (!llvm::AAResults::alias(a4, (uint64_t)v29, (uint64_t)v26))
                return 0;
            }
          }
        }
      }
      else
      {
        v32 = 0;
        if (sub_1C55401F0(a1, a2, &v32, a3))
          return v32 != 0;
      }
    }
  }
  return 1;
}

_OWORD *sub_1C5540688(_OWORD *result, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unsigned int v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19[2];
  uint64_t v20;
  int v21;
  unsigned int v22;

  v3 = result;
  v4 = **(unsigned __int16 **)(a3 + 16) - 90;
  v5 = v4 > 6;
  v6 = (1 << v4) & 0x47;
  if (v5 || v6 == 0)
  {
    *result = 0u;
    result[1] = 0u;
  }
  else
  {
    v21 = 0;
    v9 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 36);
    v19[0] = (unint64_t)&v21;
    v19[1] = (unint64_t)&v20;
    v20 = 0;
    v22 = v9;
    v10 = sub_1C626EEA4((uint64_t)v19, a2, &v22);
    if ((v10 & 1) == 0)
    {
      v21 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 36);
      v20 = 0;
    }
    v11 = *(_QWORD *)(a3 + 48);
    if ((v11 & 7) != 0)
    {
      v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a3 + 48) = v12;
    }
    v19[0] = *(_QWORD *)(v12 + 24);
    result = (_OWORD *)sub_1C4825F50(v19);
    if (v13 == 1)
      v14 = -1;
    else
      v14 = ((unint64_t)result + 7) >> 3;
    v15 = *(_QWORD *)(a3 + 48);
    if ((v15 & 7) != 0)
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a3 + 48) = v15;
      v16 = v15;
    }
    *(_BYTE *)v3 = (*(_BYTE *)(v16 + 32) & 4) != 0;
    if ((v15 & 3) != 0)
    {
      v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a3 + 48) = v15;
      v17 = v15;
    }
    *((_BYTE *)v3 + 1) = (*(_WORD *)(v17 + 36) & 0xF00) != 0;
    *((_DWORD *)v3 + 1) = v21;
    *((_QWORD *)v3 + 1) = v20;
    *((_QWORD *)v3 + 2) = v14;
    if ((v15 & 7) != 0)
    {
      v18 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v18 = v15 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a3 + 48) = v18;
    }
    *((_QWORD *)v3 + 3) = v18;
  }
  return result;
}

uint64_t sub_1C55407F4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t ApproximateEVTForLLT;
  uint64_t v19;
  unsigned __int8 v20;
  BOOL v21;
  unint64_t v22;
  BOOL v23;
  const char *v24;
  unint64_t v25;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  const llvm::DILocation *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 *MergedLocation;
  uint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  uint64_t v50;
  std::string *v51;
  void (**v52)(std::string *);
  unsigned __int8 **v53;
  unsigned __int8 *v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  unint64_t MachineMemOperand;
  int v61;
  llvm::MachineMemOperand *v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned __int8 v66;
  int v67;
  const char *v68;
  const llvm::APInt *v69;
  unsigned int v70;
  llvm::ValueHandleBase *v71;
  uint64_t v72;
  uint64_t v73;
  llvm::SmallPtrSetImplBase *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  const char *v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  void **v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  std::string::size_type v106;
  unsigned __int8 v107;
  llvm::MachineMemOperand *v109;
  _QWORD *v110;
  unsigned int v111;
  unsigned __int8 **v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  int v116;
  unsigned int *v117;
  _DWORD *v118;
  unsigned int v120;
  unint64_t v121;
  uint64_t ***v122[2];
  void *v123;
  unsigned int v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unint64_t v127;
  std::string v128;
  void *__p;
  char v130;
  const void *v131[2];
  uint64_t *v132;
  uint64_t v133;
  _BYTE v134[64];
  char *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  BOOL (*v139)(_BOOL8);
  unint64_t v140;
  unsigned __int8 **v141;
  unint64_t v142;
  const char *v143;
  const char *v144;
  uint64_t v145;
  char v146;
  char v147;
  char *v148;
  uint64_t v149;
  _BYTE v150[260];
  int v151;
  uint64_t v152;
  std::string v153;
  void *v154;
  char v155;
  std::string v156;
  std::string *v157;
  char v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 280);
  v4 = *(_QWORD *)(**(_QWORD **)a2 + 32);
  v5 = *(_DWORD *)(v4 + 4);
  if (v5 < 0 && (v6 = v5 & 0x7FFFFFFF, v6 < *(_DWORD *)(v3 + 432)))
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 424) + 8 * v6);
  else
    v7 = 0;
  v121 = v7;
  v8 = *(_DWORD *)(v4 + 36);
  if (v8 < 0 && (v9 = v8 & 0x7FFFFFFF, v9 < *(_DWORD *)(v3 + 432)))
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 424) + 8 * v9);
  else
    v10 = 0;
  v11 = 35;
  if ((v10 & 4) == 0)
    v11 = 19;
  v120 = (v10 >> v11) & 0xFFFFFF;
  v111 = v120;
  sub_1C62741C8(a1, v120);
  v118 = sub_1C627490C(a1 + 392, (int *)&v120);
  v12 = 0;
  v115 = *(_QWORD *)(**(_QWORD **)(a1 + 296) + 40) + 272;
  v112 = (unsigned __int8 **)(a1 + 352);
  v13 = a2[2];
  v110 = (_QWORD *)(a1 + 320);
  v117 = a2;
  while (1)
  {
    v116 = v12;
    v14 = 1 << ~__clz(v13);
    v15 = v13 ? v14 : 0;
    v16 = sub_1C4825F50(&v121);
    v17 = (v15 * v16);
    if ((v15 * v16) < 2)
    {
      v22 = (v15 * v16);
    }
    else
    {
      while (1)
      {
        ApproximateEVTForLLT = llvm::getApproximateEVTForLLT((8 * v17) | 1, v115, ****(llvm::LLVMContext *****)(a1 + 296));
        if (v118[18] > v17
          && ((*(_QWORD *)(*((_QWORD *)v118 + 1) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
        {
          v20 = ApproximateEVTForLLT;
          v21 = !(*(unsigned int (**)(_QWORD, _QWORD, unint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 288) + 208))(*(_QWORD *)(a1 + 288), v111, ApproximateEVTForLLT, v19, *(_QWORD *)(a1 + 296))|| v20 == 0;
          if (!v21 && *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v20 + 96))
            break;
        }
        v22 = v17 >> 1;
        v23 = v17 > 3;
        v17 >>= 1;
        if (!v23)
          goto LABEL_26;
      }
      v22 = v17;
    }
LABEL_26:
    v25 = sub_1C4825F50(&v121);
    if ((_DWORD)v24 == 1)
    if (v25 >= v22)
      break;
    v27 = sub_1C4825F50(&v121);
    if ((_DWORD)v26 == 1)
    v28 = v22 / v27;
    v29 = *(_BYTE **)v117;
    v30 = (_BYTE *)(*(_QWORD *)v117 + 8 * (v22 / v27));
    v132 = (uint64_t *)v134;
    v133 = 0x800000000;
    sub_1C618A450((unsigned int *)&v132, v29, v30);
    v31 = v133;
    v32 = *(_DWORD *)(*(_QWORD *)(*v132 + 32) + 4);
    v113 = v28;
    if (v32 < 0 && (v33 = *(_QWORD *)(a1 + 280), v34 = v32 & 0x7FFFFFFF, v34 < *(_DWORD *)(v33 + 432)))
      v35 = *(_QWORD *)(*(_QWORD *)(v33 + 424) + 8 * v34);
    else
      v35 = 0;
    v114 = (_QWORD *)*v132;
    v127 = v35;
    v36 = sub_1C4825F50(&v127);
    v125 = 0;
    v126 = (unsigned __int8 *)((8 * v31 * v36) | 1);
    if (v31 >= 2)
    {
      v38 = 0;
      v39 = 8 * (v31 - 1);
      do
      {
        MergedLocation = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*(llvm::DILocation **)(v132[v38 / 8] + 56), *(const llvm::DILocation **)(v132[v38 / 8 + 1] + 56), v37);
        v138 = MergedLocation;
        if (MergedLocation)
          llvm::MetadataTracking::track((uint64_t)&v138, MergedLocation, 2);
        if (v125)
          llvm::MetadataTracking::untrack((uint64_t)&v125, v125);
        v125 = v138;
        if (v138)
          llvm::MetadataTracking::retrack((uint64_t)&v138, v138, (uint64_t)&v125);
        v38 += 8;
      }
      while (v39 != v38);
    }
    v41 = v132[v133 - 1];
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(v41 + 24);
    *(_QWORD *)(a1 + 368) = v41;
    v42 = (_QWORD *)(a1 + 352);
    if (&v125 != v112)
    {
      if (*v112)
      {
        llvm::MetadataTracking::untrack((uint64_t)v112, *v112);
        v42 = (_QWORD *)(a1 + 352);
      }
      v43 = v125;
      *v42 = v125;
      if (v43)
        llvm::MetadataTracking::track((uint64_t)v42, v43, 2);
    }
    v135 = (char *)&v137;
    v136 = 0x800000000;
    if ((_DWORD)v133)
    {
      v47 = (char *)v132;
      v48 = (char *)&v132[v133];
      while (1)
      {
        v49 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v47 + 32) + 4);
        v50 = *(_QWORD *)(a1 + 280);
        v138 = (unsigned __int8 *)&off_1E816EFF0;
        v139 = sub_1C554C7E0;
        v141 = &v138;
        v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E816F038;
        v156.__r_.__value_.__l.__size_ = (std::string::size_type)sub_1C554C7F8;
        v157 = &v156;
        sub_1C554C3AC(v49, v50, (uint64_t)&v138, (uint64_t)&v156, 1, 0, &v153);
        v51 = v157;
        if (v157 == &v156)
          break;
        if (v157)
        {
          v52 = (void (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 40);
          goto LABEL_55;
        }
LABEL_56:
        v53 = v141;
        if (v141 == &v138)
        {
          v54 = v138 + 32;
          v53 = &v138;
LABEL_58:
          (*(void (**)(unsigned __int8 **))v54)(v53);
          goto LABEL_59;
        }
        if (v141)
        {
          v54 = *v141 + 40;
          goto LABEL_58;
        }
LABEL_59:
        v55 = v154;
        if (!(_BYTE)v154)
        {
          if ((_DWORD)v136)
          {
            v56 = v135;
            v57 = 16 * v136;
            do
            {
              if (*(_DWORD *)&v56[v57 - 8] >= 0x41u)
              {
                v58 = *(_QWORD *)&v56[v57 - 16];
                if (v58)
                  MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
              }
              v57 -= 16;
            }
            while (v57);
          }
          LODWORD(v136) = 0;
          if (!v55)
            goto LABEL_70;
LABEL_67:
          if (LODWORD(v153.__r_.__value_.__r.__words[1]) >= 0x41 && v153.__r_.__value_.__r.__words[0])
            MEMORY[0x1CAA32F9C](v153.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
          goto LABEL_70;
        }
        sub_1C6274458((uint64_t)&v135, (uint64_t)&v153);
        if (v55)
          goto LABEL_67;
LABEL_70:
        if (v55)
        {
          v47 += 8;
          if (v47 != v48)
            continue;
        }
        goto LABEL_50;
      }
      v52 = (void (**)(std::string *))(v156.__r_.__value_.__r.__words[0] + 32);
      v51 = &v156;
LABEL_55:
      (*v52)(v51);
      goto LABEL_56;
    }
LABEL_50:
    v44 = *(_QWORD *)(a1 + 296);
    v45 = v114[6];
    if ((v45 & 7) != 0)
    {
      v46 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v46 = v45 & 0xFFFFFFFFFFFFFFF8;
      v114[6] = v45 & 0xFFFFFFFFFFFFFFF8;
    }
    v59 = (void **)v117;
    MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v44, v46, 0, (uint64_t)v126);
    if ((_DWORD)v136)
    {
      v62 = (llvm::MachineMemOperand *)MachineMemOperand;
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v126;
      LODWORD(v138) = 120;
      v139 = (BOOL (*)(_BOOL8))&v153;
      v140 = 1;
      v141 = 0;
      v142 = 0;
      v63 = *(_QWORD *)(a1 + 312);
      v64 = *(_DWORD *)(v63 + 12608);
      if (v64)
        v65 = v64 - 45;
      else
        v65 = 75;
      v66 = sub_1C553C530(v63 + 168 * v65 + 8, (uint64_t)&v138);
      v67 = v66;
      if (v66 == 11)
      {
        if (!v140)
          goto LABEL_91;
        v103 = 0;
        v104 = v63 + 35456;
        v105 = 1;
        while (1)
        {
          v106 = *((_QWORD *)v139 + v103);
          LODWORD(v156.__r_.__value_.__l.__data_) = (_DWORD)v138;
          HIDWORD(v156.__r_.__value_.__r.__words[0]) = v105 - 1;
          v156.__r_.__value_.__l.__size_ = v106;
          v107 = sub_1C553DEB0(v104, (uint64_t)&v156);
          if (v107)
            break;
          v103 = v105;
          v23 = v140 > v105++;
          if (!v23)
            goto LABEL_91;
        }
        v67 = 10;
        if (v107 - 1 < 8)
        {
LABEL_87:
          if (v67 && !*(_BYTE *)(a1 + 416))
            goto LABEL_89;
LABEL_91:
          v109 = v62;
          v70 = sub_1C4825F50((unint64_t *)&v126);
          if ((_DWORD)v68 == 1)
          v124 = v70;
          if (v70 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v123, 0, 0);
          else
            v123 = 0;
          if ((_DWORD)v136)
          {
            v78 = 0;
            v79 = 0;
            do
            {
              v80 = v135;
              v82 = sub_1C4825F50(&v127);
              if ((_DWORD)v81 == 1)
              llvm::APInt::insertBits(&v123, (const llvm::APInt *)&v80[v78], v82 * v79++);
              v78 += 16;
            }
            while (v79 < v136);
          }
          v138 = v126;
          LODWORD(v139) = 0;
          v71 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a1 + 328), (llvm::LLVMContext *)&v123, v69);
          (*(void (**)(_QWORD *, unsigned __int8 **, llvm::ValueHandleBase *))(*(_QWORD *)(a1 + 320) + 16))(v110, &v138, v71);
          LODWORD(v138) = *(_DWORD *)(*(_QWORD *)(v72 + 32) + 4);
          LODWORD(v140) = 0;
          LODWORD(v156.__r_.__value_.__l.__data_) = *(_DWORD *)(v114[4] + 36);
          LODWORD(v156.__r_.__value_.__r.__words[2]) = 0;
          sub_1C5546848(v110, (int *)&v138, (int *)&v156, v109);
          v122[0] = *(uint64_t ****)(a1 + 296);
          v122[1] = 0;
          v73 = ****(_QWORD ****)v122[0];
          v74 = (llvm::SmallPtrSetImplBase *)(a1 + 424);
          if (*(_QWORD *)(v73 + 128)
            || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v73 + 72) + 48))(*(_QWORD *)(v73 + 72)))
          {
            v75 = v114[7];
            if (v75)
            {
              v77 = *(_QWORD *)(v75 - 8 * *(unsigned int *)(v75 + 8));
              if (*(_BYTE *)v77 != 15)
                v77 = *(_QWORD *)(v77 - 8 * *(unsigned int *)(v77 + 8));
              v76 = *(_DWORD *)(v75 + 4);
              LODWORD(v75) = *(unsigned __int16 *)(v75 + 2);
            }
            else
            {
              v76 = 0;
              v77 = 0;
            }
            v83 = v114[3];
            v84 = **(_QWORD **)(v83 + 32);
            LODWORD(v139) = 15;
            BYTE4(v139) = 2;
            v140 = v84;
            v141 = (unsigned __int8 **)v77;
            v142 = __PAIR64__(v75, v76);
            v143 = "loadstore-opt";
            v144 = "MergedStore";
            v145 = 11;
            v146 = 0;
            v147 = 0;
            v148 = v150;
            v149 = 0x400000000;
            v150[256] = 0;
            v151 = -1;
            v152 = v83;
            v138 = (unsigned __int8 *)&unk_1E8141E08;
            v156.__r_.__value_.__r.__words[0] = (std::string::size_type)"Merged ";
            v156.__r_.__value_.__l.__size_ = 7;
            sub_1C53B17B4((uint64_t)&v148, (const void **)&v156.__r_.__value_.__l.__data_);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v156, "NumMerged", 9uLL, v133);
            v85 = sub_1C47E3888((uint64_t)&v138, (uint64_t)&v156);
            v153.__r_.__value_.__r.__words[0] = (std::string::size_type)" stores of ";
            v153.__r_.__value_.__l.__size_ = 11;
            sub_1C53B17B4(v85 + 80, (const void **)&v153.__r_.__value_.__l.__data_);
            v87 = sub_1C4825F50(&v127);
            if ((_DWORD)v86 == 1)
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v153, "OrigWidth", 9uLL, (unint64_t)(v87 + 7) >> 3);
            v88 = sub_1C47E3888(v85, (uint64_t)&v153);
            v128.__r_.__value_.__r.__words[0] = (std::string::size_type)" bytes into a single store of ";
            v128.__r_.__value_.__l.__size_ = 30;
            sub_1C53B17B4(v88 + 80, (const void **)&v128.__r_.__value_.__l.__data_);
            v90 = sub_1C4825F50((unint64_t *)&v126);
            if ((_DWORD)v89 == 1)
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v128, "NewWidth", 8uLL, (unint64_t)(v90 + 7) >> 3);
            v91 = sub_1C47E3888(v88, (uint64_t)&v128);
            v131[0] = " bytes";
            v131[1] = (const void *)6;
            sub_1C53B17B4(v91 + 80, v131);
            if (v130 < 0)
              operator delete(__p);
            v74 = (llvm::SmallPtrSetImplBase *)(a1 + 424);
            if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v128.__r_.__value_.__l.__data_);
            if (v155 < 0)
              operator delete(v154);
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v153.__r_.__value_.__l.__data_);
            if (v158 < 0)
              operator delete(v157);
            if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v156.__r_.__value_.__l.__data_);
            llvm::MachineOptimizationRemarkEmitter::emit(v122, (llvm::DiagnosticInfoOptimizationBase *)&v138);
            v138 = (unsigned __int8 *)&off_1E814E790;
            v92 = v148;
            if ((_DWORD)v149)
            {
              v93 = (unint64_t)v149 << 6;
              do
              {
                v94 = (void **)&v92[v93];
                if (v92[v93 - 17] < 0)
                  operator delete(*(v94 - 5));
                if (*((char *)v94 - 41) < 0)
                  operator delete(*(v94 - 8));
                v93 -= 64;
              }
              while (v93);
              v92 = v148;
            }
            if (v92 != v150)
              free(v92);
          }
          if ((_DWORD)v133)
          {
            v95 = v132;
            v96 = 8 * v133;
            do
            {
              v97 = *v95++;
              sub_1C4774094(v74, v97);
              v96 -= 8;
            }
            while (v96);
          }
          if (v124 >= 0x41 && v123)
            MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
          v61 = 1;
          goto LABEL_141;
        }
        if (v107 != 9)
        {
          if (v107 != 10)
            goto LABEL_91;
          goto LABEL_87;
        }
      }
      else if (v66 != 9)
      {
        goto LABEL_87;
      }
LABEL_89:
      v61 = 0;
LABEL_141:
      v59 = (void **)v117;
      goto LABEL_142;
    }
    v61 = 0;
LABEL_142:
    sub_1C618E390(&v135);
    if (v125)
      llvm::MetadataTracking::untrack((uint64_t)&v125, v125);
    v98 = (char *)*v59;
    v99 = (char *)*v59 + 8 * v113;
    v100 = *((unsigned int *)v59 + 2);
    v101 = (_BYTE *)*v59 + 8 * v100 - v99;
    if (v113 != v100)
      memmove(*v59, v99, (_BYTE *)*v59 + 8 * v100 - v99);
    v102 = &v98[v101] - (_BYTE *)*v59;
    *((_DWORD *)v59 + 2) = v102 >> 3;
    if (v132 == (uint64_t *)v134)
    {
      v13 = (v102 >> 3);
    }
    else
    {
      free(v132);
      v13 = *((unsigned int *)v59 + 2);
    }
    v12 = v116 | v61;
    if (v13 <= 1)
      return v12 & 1;
  }
  LOBYTE(v12) = v116;
  return v12 & 1;
}

uint64_t sub_1C554142C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  const char *v53;
  uint64_t v54;
  int v55;
  const char *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v74;
  unsigned int v76;
  int v77;
  unsigned int v78;
  void *v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  _BYTE v90[48];
  void *v91[2];
  _QWORD v92[8];

  v92[6] = *MEMORY[0x1E0C80C00];
  v86 = 0;
  v88 = v90;
  v89 = 0x600000000;
  v91[0] = v92;
  v91[1] = (void *)0x300000000;
  v3 = a2 + 48;
  v4 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (*(_BYTE *)v4 & 4) == 0)
  {
    while ((*(_WORD *)(v4 + 44) & 4) != 0)
      v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v4 != v3)
  {
    v5 = 0;
    while (1)
    {
      v13 = sub_1C477672C(a1 + 424, v4);
      v14 = *(_QWORD *)(a1 + 432);
      if (v14 == *(_QWORD *)(a1 + 424))
        v15 = 444;
      else
        v15 = 440;
      if (v13 != (_QWORD *)(v14 + 8 * *(unsigned int *)(a1 + v15)))
        goto LABEL_33;
      if (**(_WORD **)(v4 + 16) != 96)
      {
        if (!(_DWORD)v89)
          goto LABEL_33;
        if (llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v4)
          || llvm::MachineInstr::hasOrderedMemoryRef((llvm::MachineInstr *)v4))
        {
          v5 |= sub_1C62744C4(a1, (uint64_t)&v86);
          LODWORD(v89) = 0;
          goto LABEL_33;
        }
        v16 = *(unsigned __int16 **)(v4 + 16);
        v17 = *v16 - 1;
        if (v17 <= 1 && (*(_BYTE *)(*(_QWORD *)(v4 + 32) + 48) & 8) != 0)
          goto LABEL_101;
        v18 = *(unsigned __int16 *)(v4 + 44);
        v19 = (v18 & 0xC) == 0;
        v20 = (v18 >> 2) & 1;
        if (v19)
          LOBYTE(v20) = 1;
        v21 = *((_QWORD *)v16 + 1);
        if ((v20 & 1) != 0)
        {
          if ((v21 & 0x80000) == 0)
          {
LABEL_30:
            if (v17 > 1 || (*(_BYTE *)(*(_QWORD *)(v4 + 32) + 48) & 0x10) == 0)
            {
              if ((v20 & 1) != 0)
              {
                if ((v21 & 0x100000) == 0)
                  goto LABEL_33;
              }
              else
              {
                v66 = v4;
                if ((v21 & 0x100000) == 0)
                {
                  while ((*(_WORD *)(v66 + 44) & 8) != 0)
                  {
                    v66 = *(_QWORD *)(v66 + 8);
                    if ((*(_BYTE *)(*(_QWORD *)(v66 + 16) + 10) & 0x10) != 0)
                      goto LABEL_101;
                  }
                  goto LABEL_33;
                }
              }
            }
          }
        }
        else
        {
          v62 = v4;
          if ((v21 & 0x80000) == 0)
          {
            while ((*(_WORD *)(v62 + 44) & 8) != 0)
            {
              v62 = *(_QWORD *)(v62 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v62 + 16) + 10) & 8) != 0)
                goto LABEL_101;
            }
            goto LABEL_30;
          }
        }
LABEL_101:
        if (!(_DWORD)v89)
        {
LABEL_102:
          v63 = 0;
LABEL_107:
          sub_1C627466C((uint64_t)v91, v4, v63 - 1);
          goto LABEL_33;
        }
        v64 = (uint64_t *)v88;
        v65 = 8 * v89;
        while (!sub_1C55404A0(v4, *v64, *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 304)))
        {
          ++v64;
          v65 -= 8;
          if (!v65)
            goto LABEL_106;
        }
        goto LABEL_108;
      }
      v22 = *(_QWORD *)(a1 + 280);
      v23 = *(_QWORD *)(v4 + 32);
      v24 = *(_DWORD *)(v23 + 4);
      if (v24 < 0 && (v25 = v24 & 0x7FFFFFFF, v25 < *(_DWORD *)(v22 + 432)))
        v26 = *(_QWORD *)(*(_QWORD *)(v22 + 424) + 8 * v25);
      else
        v26 = 0;
      v85 = v26;
      v27 = *(_DWORD *)(v23 + 36);
      if (v27 < 0 && (v28 = v27 & 0x7FFFFFFF, v28 < *(_DWORD *)(v22 + 432)))
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v22 + 424) + 8 * v28);
        if ((v26 & 1) != 0)
          goto LABEL_50;
      }
      else
      {
        v29 = 0;
        if ((v26 & 1) != 0)
        {
LABEL_50:
          v30 = sub_1C54F7EA0(v4);
          v31 = sub_1C4825F50(&v85);
          if ((_DWORD)v32 == 1)
          {
            v67 = v31;
            v31 = v67;
          }
          if (v30 == v31 && sub_1C626EC5C(v4))
          {
            sub_1C5540030((uint64_t)&v83, *(_DWORD *)(*(_QWORD *)(v4 + 32) + 36), *(_QWORD *)(a1 + 280));
            v81 = v84;
            if ((_DWORD)v89)
            {
              v33 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v88 + 32) + 4);
              v80 = v83;
              if (v33 < 0
                && (v34 = *(_QWORD *)(a1 + 280), v35 = v33 & 0x7FFFFFFF, v35 < *(_DWORD *)(v34 + 432)))
              {
                v36 = *(_QWORD *)(*(_QWORD *)(v34 + 424) + 8 * v35);
              }
              else
              {
                v36 = 0;
              }
              v82 = v36;
              v37 = sub_1C4825F50(&v82);
              v39 = v38;
              if (v37 == sub_1C4825F50(&v85) && v39 == v40)
              {
                v41 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v88 + 32) + 36);
                if (v41 < 0
                  && (v42 = *(_QWORD *)(a1 + 280), v43 = v41 & 0x7FFFFFFF, v43 < *(_DWORD *)(v42 + 432)))
                {
                  v44 = *(_QWORD *)(*(_QWORD *)(v42 + 424) + 8 * v43);
                }
                else
                {
                  v44 = 0;
                }
                v45 = (v44 & 4) != 0 ? 35 : 19;
                v46 = v44 >> v45;
                v47 = (v29 & 4) != 0 ? 35 : 19;
                if (((v46 ^ (v29 >> v47)) & 0xFFFFFF) == 0 && v86 == v80)
                {
                  v48 = v87;
                  v50 = sub_1C4825F50(&v85);
                  if ((_DWORD)v49 == 1)
                  if (v48 - ((unint64_t)(v50 + 7) >> 3) == v81)
                  {
                    v51 = v89;
                    if (v89 >= HIDWORD(v89))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, (uint64_t)v90, v89 + 1, 8);
                      *((_QWORD *)v88 + v89) = v4;
                      v51 = v89;
                    }
                    else
                    {
                      *((_QWORD *)v88 + v89) = v4;
                    }
                    LODWORD(v89) = v51 + 1;
                    v52 = v87;
                    v54 = sub_1C4825F50(&v85);
                    if ((_DWORD)v53 == 1)
                    v87 = v52 - ((unint64_t)(v54 + 7) >> 3);
                    goto LABEL_33;
                  }
                }
              }
            }
            else
            {
              v55 = v83;
              v57 = sub_1C4825F50(&v85);
              if ((_DWORD)v56 == 1)
              if (v81 >= (unint64_t)(v57 + 7) >> 3)
              {
                v86 = v55;
                v87 = v81;
                v58 = v89;
                if (v89 >= HIDWORD(v89))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, (uint64_t)v90, v89 + 1, 8);
                  *((_QWORD *)v88 + v89) = v4;
                  v59 = v89 + 1;
                }
                else
                {
                  *((_QWORD *)v88 + v89) = v4;
                  v59 = v58 + 1;
                }
                LODWORD(v89) = v59;
                goto LABEL_33;
              }
            }
          }
        }
      }
      if (!(_DWORD)v89)
        goto LABEL_102;
      v60 = (uint64_t *)v88;
      v61 = 8 * v89;
      while (!sub_1C55404A0(v4, *v60, *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 304)))
      {
        ++v60;
        v61 -= 8;
        if (!v61)
        {
LABEL_106:
          v63 = v89;
          goto LABEL_107;
        }
      }
LABEL_108:
      v5 |= sub_1C62744C4(a1, (uint64_t)&v86);
LABEL_33:
      v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
      if (!v4 || (*(_BYTE *)v4 & 4) == 0)
      {
        while ((*(_WORD *)(v4 + 44) & 4) != 0)
          v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v4 == v3)
        goto LABEL_8;
    }
  }
  v5 = 0;
LABEL_8:
  v6 = sub_1C62744C4(a1, (uint64_t)&v86);
  v8 = *(char **)(a1 + 424);
  v7 = *(char **)(a1 + 432);
  v9 = 440;
  if (v7 == v8)
    v9 = 444;
  v10 = *(unsigned int *)(a1 + v9);
  v11 = *(uint64_t **)(a1 + 432);
  if ((_DWORD)v10)
  {
    v12 = 0;
    while (*(_QWORD *)&v7[v12] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v12 += 8;
      if (8 * v10 == v12)
        goto LABEL_127;
    }
    v11 = (uint64_t *)&v7[v12];
  }
  v68 = &v7[8 * v10];
  if (v11 != (uint64_t *)v68)
  {
    v69 = *v11;
LABEL_117:
    v70 = v69;
    if ((*(_BYTE *)v69 & 4) == 0)
    {
      v70 = v69;
      if ((*(_WORD *)(v69 + 44) & 8) != 0)
      {
        v70 = v69;
        do
          v70 = *(_QWORD *)(v70 + 8);
        while ((*(_WORD *)(v70 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v69 + 24) + 40, v69, *(_QWORD *)(v70 + 8));
    v71 = (unint64_t *)(v11 + 1);
    while (v71 != (unint64_t *)v68)
    {
      v72 = *v71++;
      v69 = v72;
      if (v72 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v11 = (uint64_t *)(v71 - 1);
        goto LABEL_117;
      }
    }
    v8 = *(char **)(a1 + 424);
    v7 = *(char **)(a1 + 432);
  }
LABEL_127:
  if (v7 == v8)
    goto LABEL_128;
  v74 = *(unsigned int *)(a1 + 440);
  if (v74 < 0x21 || 4 * (*(_DWORD *)(a1 + 444) - *(_DWORD *)(a1 + 448)) >= v74)
  {
    memset(v7, 255, 8 * v74);
LABEL_128:
    *(_QWORD *)(a1 + 444) = 0;
    goto LABEL_129;
  }
  free(v7);
  v76 = *(_DWORD *)(a1 + 444) - *(_DWORD *)(a1 + 448);
  v77 = 1 << (33 - __clz(v76 - 1));
  if (v76 <= 0x10)
    v78 = 32;
  else
    v78 = v77;
  *(_DWORD *)(a1 + 440) = v78;
  *(_QWORD *)(a1 + 444) = 0;
  v79 = malloc_type_malloc(8 * v78, 0x4065EBACuLL);
  if (!v79)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 432) = v79;
  memset(v79, 255, 8 * *(unsigned int *)(a1 + 440));
LABEL_129:
  if (v91[0] != v92)
    free(v91[0]);
  if (v88 != v90)
    free(v88);
  return (v5 | v6) & 1;
}

void sub_1C5541BD8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  *(_QWORD *)a1 = &off_1E816E9B8;
  v2 = *(void **)(a1 + 432);
  if (v2 != *(void **)(a1 + 424))
    free(v2);
  v3 = *(unsigned int *)(a1 + 408);
  v4 = *(_QWORD *)(a1 + 392);
  if ((_DWORD)v3)
  {
    v5 = 80 * v3;
    v6 = (_QWORD *)(v4 + 24);
    do
    {
      if (*((_DWORD *)v6 - 6) <= 0xFFFFFFFD)
      {
        v7 = (_QWORD *)*(v6 - 2);
        if (v6 != v7)
          free(v7);
      }
      v6 += 10;
      v5 -= 80;
    }
    while (v5);
    v4 = *(_QWORD *)(a1 + 392);
  }
  MEMORY[0x1CAA32FB4](v4, 8);
  *(_QWORD *)(a1 + 320) = &off_1E816EC08;
  v8 = *(unsigned __int8 **)(a1 + 352);
  if (v8)
    llvm::MetadataTracking::untrack(a1 + 352, v8);
  v9 = *(_QWORD **)(a1 + 272);
  if (v9 == (_QWORD *)(a1 + 248))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 248);
  }
  else
  {
    if (!v9)
      goto LABEL_17;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_17:
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v11 = *(void **)(a1 + 176);
  if (v11 != (void *)(a1 + 192))
    free(v11);
  v12 = *(void **)(a1 + 104);
  if (v12 != (void *)(a1 + 120))
    free(v12);
  v13 = *(void **)(a1 + 32);
  if (v13 != (void *)(a1 + 48))
    free(v13);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5541D18()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5541D2C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E816EA78;
  return result;
}

void sub_1C5541D50(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E816EA78;
}

uint64_t sub_1C5541D68()
{
  return 0;
}

uint64_t sub_1C5541D70(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 80 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 80 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_1C5541E0C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(80 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6274A40(a1, v4, v4 + 80 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 80 * v10;
    do
    {
      *result = -1;
      result += 20;
      v11 -= 80;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5541ED0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

void sub_1C5541F4C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v4 = 80 * v2;
    v5 = *(_QWORD *)a1 + 24;
    do
    {
      if (*(_DWORD *)(v5 - 24) <= 0xFFFFFFFD)
      {
        v6 = *(void **)(v5 - 16);
        if ((void *)v5 != v6)
          free(v6);
      }
      v5 += 80;
      v4 -= 80;
    }
    while (v4);
  }
  v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64)
    v7 = 64;
  if (v3)
    v8 = v7;
  else
    v8 = 0;
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD **)a1;
      v10 = 80 * v8;
      do
      {
        *v9 = -1;
        v9 += 20;
        v10 -= 80;
      }
      while (v10);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v8)
    {
      v11 = (4 * (int)v8 / 3u + 1) | ((unint64_t)(4 * (int)v8 / 3u + 1) >> 1);
      v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
      LODWORD(v12) = (((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v12;
      v13 = operator new(80 * v12, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = 0;
      v14 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v14)
      {
        v15 = 80 * v14;
        do
        {
          *v13 = -1;
          v13 += 20;
          v15 -= 80;
        }
        while (v15);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

uint64_t sub_1C554209C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Move/duplicate certain instructions close to their use";
  *(_QWORD *)(v2 + 8) = 54;
  *(_QWORD *)(v2 + 16) = "localizer";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2FE8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C6274E78;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5542130(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  int v43;
  unsigned int v44;
  llvm::MachineInstr *v46;
  llvm::MachineInstr *v47;
  int v48;
  _QWORD *v49;
  int v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  _BYTE *v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  llvm::MachineInstr **v70;
  llvm::MachineInstr *v71;
  llvm::MachineInstr **v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  llvm::MachineInstr **v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  _BYTE *v101;
  int v102;
  BOOL v103;
  unsigned int v105;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  _BYTE *v124;
  int v125;
  BOOL v126;
  unsigned int v128;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  int v139;
  BOOL v140;
  unsigned int v142;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  char v194;
  unsigned int v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  _BYTE *v199;
  _BYTE *v200;
  uint64_t v201;
  int v202;
  _BYTE v203[256];
  uint64_t v204;
  _QWORD *v205;
  int v206;
  _QWORD v207[2];
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  void *v212;
  uint64_t v213;
  _QWORD v214[34];

  v214[32] = *MEMORY[0x1E0C80C00];
  if ((**(_BYTE **)(a2 + 360) & 0x10) != 0)
    goto LABEL_4;
  v5 = a1;
  v6 = *(_QWORD *)(a1 + 272);
  if (!v6)
    goto LABEL_319;
  v2 = (uint64_t *)a2;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) & 1) != 0)
  {
LABEL_4:
    v7 = 0;
    return v7 & 1;
  }
  v193 = v2;
  *(_QWORD *)(v5 + 280) = v2[5];
  v8 = **(void ****)(v5 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::TargetTransformInfoWrapperPass::ID);
  v4 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::TargetTransformInfoWrapperPass::ID);
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v207[0] = 0;
  v207[1] = 0;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v10 = *(_QWORD *)(v4 + 56);
  if (!v10)
  {
LABEL_319:
    sub_1C485C2F0();
    goto LABEL_320;
  }
  v3 = v207;
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v10 + 48))(&v199);
  v2 = (uint64_t *)(v4 + 64);
  v11 = (uint64_t)v199;
  if (!*(_BYTE *)(v4 + 72))
  {
LABEL_320:
    *(_QWORD *)(v4 + 64) = v11;
    *(_BYTE *)(v4 + 72) = 1;
    v13 = v193;
    goto LABEL_12;
  }
  v199 = 0;
  v12 = *v2;
  *v2 = v11;
  v13 = v193;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v14 = (uint64_t)v199;
    v199 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
LABEL_12:
  v15 = 8;
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v3);
  sub_1C4D8B52C(&v204);
  *(_QWORD *)(v5 + 288) = v2;
  v204 = 1;
  v16 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v204 + v15) = v16;
    v15 += 16;
  }
  while (v15 != 264);
  v212 = v214;
  v213 = 0x2000000000;
  v199 = 0;
  v200 = 0;
  LODWORD(v201) = 0;
  v17 = v13[41];
  v191 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13[2] + 120))(v13[2]);
  v192 = v17 + 48;
  v18 = *(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v18 || (*(_BYTE *)v18 & 4) == 0)
  {
    while ((*(_WORD *)(v18 + 44) & 4) != 0)
      v18 = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8;
  }
  v197 = v5;
  if (v18 != v192)
  {
    v19 = 0;
    v190 = (uint64_t)(v13 + 16);
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v191 + 1488))(v191, v18, *(_QWORD *)(v5 + 288)))
      {
        v20 = v5;
        v21 = *(unsigned int *)(*(_QWORD *)(v18 + 32) + 4);
        v22 = *(_QWORD *)(v20 + 280);
        v23 = (uint64_t *)((v21 & 0x80000000) != 0
                        ? *(_QWORD *)(v22 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(v22 + 272) + 8 * v21);
        v24 = *v23;
        if (*v23)
        {
          while ((*(_BYTE *)(v24 + 3) & 1) != 0)
          {
            v24 = *(_QWORD *)(v24 + 24);
            if (!v24)
              goto LABEL_28;
          }
          v25 = ~((unint64_t)(37 * v21) << 32) + (37 * v21);
          v195 = (v18 >> 4) ^ (v18 >> 9);
          while (2)
          {
            while (2)
            {
              v26 = v24;
              do
                v24 = *(_QWORD *)(v24 + 24);
              while (v24 && (*(_BYTE *)(v24 + 3) & 1) != 0);
              v27 = *(_QWORD *)(v26 + 8);
              v28 = **(unsigned __int16 **)(v27 + 16);
              if (v28 == 69 || v28 == 0)
                v30 = (uint64_t *)(*(_QWORD *)(v27 + 32)
                                + 32 * (((unint64_t)(v26 - *(_QWORD *)(v27 + 32)) >> 5) + 1)
                                + 16);
              else
                v30 = (uint64_t *)(v27 + 24);
              v31 = *v30;
              if (*v30 == *(_QWORD *)(v18 + 24))
              {
                v198 = v18;
                if ((v204 & 1) != 0)
                {
                  v50 = 32;
                  v51 = &v205;
LABEL_83:
                  v56 = v50 - 1;
                  v57 = v56 & v195;
                  v58 = &v51[v56 & v195];
                  v59 = *v58;
                  if (v18 == *v58)
                    goto LABEL_99;
                  v60 = 0;
                  v61 = 1;
                  while (v59 != -4096)
                  {
                    if (v60)
                      v62 = 0;
                    else
                      v62 = v59 == -8192;
                    if (v62)
                      v60 = v58;
                    v63 = v57 + v61++;
                    v57 = v63 & v56;
                    v58 = &v51[v57];
                    v59 = *v58;
                    if (v18 == *v58)
                      goto LABEL_99;
                  }
                  if (v60)
                    v64 = v60;
                  else
                    v64 = v58;
                }
                else
                {
                  v50 = v206;
                  if (v206)
                  {
                    v51 = v205;
                    goto LABEL_83;
                  }
                  v64 = 0;
                }
                v65 = sub_1C4993C28((uint64_t)&v204, (uint64_t)&v198, &v198, v64);
                *v65 = v198;
                v66 = v198;
                v67 = v213;
                if (v213 >= (unint64_t)HIDWORD(v213))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, (uint64_t)v214, v213 + 1, 8);
                  v67 = v213;
                }
                *((_QWORD *)v212 + v67) = v66;
                LODWORD(v213) = v213 + 1;
                goto LABEL_99;
              }
              if (v28 == 69 || v28 == 0)
              {
                v52 = *(_DWORD *)(v27 + 40);
                if (v52 >= 2)
                {
                  v53 = *(_QWORD *)(v27 + 32);
                  v54 = 1;
                  while (1)
                  {
                    v55 = (_BYTE *)(v53 + 32 * v54);
                    if (v55 != (_BYTE *)v26 && !*v55 && *(_DWORD *)(v53 + 32 * v54 + 4) == *(_DWORD *)(v26 + 4))
                      break;
                    v54 += 2;
                    if (v54 >= v52)
                      goto LABEL_51;
                  }
LABEL_99:
                  if (!v24)
                    goto LABEL_28;
                  continue;
                }
              }
              break;
            }
LABEL_51:
            v33 = v31 >> 4;
            if ((_DWORD)v201)
            {
              v34 = v25 + ((unint64_t)(v33 ^ (v31 >> 9)) << 32);
              v35 = (v34 ^ (v34 >> 22)) + ~((v34 ^ (v34 >> 22)) << 13);
              v36 = (9 * (v35 ^ (v35 >> 8))) ^ ((9 * (v35 ^ (v35 >> 8))) >> 15);
              v37 = v201 - 1;
              v38 = (v201 - 1) & (((v36 + ~(v36 << 27)) >> 31) ^ (v36 + ~((_DWORD)v36 << 27)));
              v39 = &v199[24 * v38];
              v40 = *(_QWORD *)v39;
              v41 = *((_DWORD *)v39 + 2);
              if (v31 != *(_QWORD *)v39 || (_DWORD)v21 != v41)
              {
                v43 = 1;
                while (v40 != -4096 || v41 != -1)
                {
                  v44 = v38 + v43++;
                  v38 = v44 & v37;
                  v39 = &v199[24 * (v44 & v37)];
                  v40 = *(_QWORD *)v39;
                  v41 = *((_DWORD *)v39 + 2);
                  if (v31 == *(_QWORD *)v39 && (_DWORD)v21 == v41)
                    goto LABEL_66;
                }
                goto LABEL_65;
              }
            }
            else
            {
LABEL_65:
              v39 = &v199[24 * v201];
            }
LABEL_66:
            if (v39 == &v199[24 * v201])
            {
              v198 = 0;
              v46 = (llvm::MachineInstr *)v13[28];
              if (v46)
                v13[28] = *(_QWORD *)v46;
              else
                v46 = (llvm::MachineInstr *)sub_1C484358C(v190, 72, 3);
              v47 = llvm::MachineInstr::MachineInstr(v46, (llvm::MachineFunction *)v13, (const llvm::MachineInstr *)v18);
              v198 = (unint64_t)v47;
              if ((v204 & 1) != 0)
              {
                v48 = 32;
                v49 = &v205;
LABEL_102:
                v68 = v48 - 1;
                v69 = v68 & ((v47 >> 4) ^ (v47 >> 9));
                v70 = (llvm::MachineInstr **)&v49[v69];
                v71 = *v70;
                if (v47 != *v70)
                {
                  v72 = 0;
                  v73 = 1;
                  while (v71 != (llvm::MachineInstr *)-4096)
                  {
                    if (v72)
                      v74 = 0;
                    else
                      v74 = v71 == (llvm::MachineInstr *)-8192;
                    if (v74)
                      v72 = v70;
                    v75 = v69 + v73++;
                    v69 = v75 & v68;
                    v70 = (llvm::MachineInstr **)&v49[v69];
                    v71 = *v70;
                    if (v47 == *v70)
                      goto LABEL_118;
                  }
                  if (v72)
                    v76 = v72;
                  else
                    v76 = v70;
                  goto LABEL_115;
                }
              }
              else
              {
                v48 = v206;
                if (v206)
                {
                  v49 = v205;
                  goto LABEL_102;
                }
                v76 = 0;
LABEL_115:
                v77 = sub_1C4993C28((uint64_t)&v204, (uint64_t)&v198, &v198, v76);
                *v77 = v198;
                v78 = v198;
                v79 = v213;
                if (v213 >= (unint64_t)HIDWORD(v213))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, (uint64_t)v214, v213 + 1, 8);
                  v79 = v213;
                }
                *((_QWORD *)v212 + v79) = v78;
                LODWORD(v213) = v213 + 1;
              }
LABEL_118:
              v80 = *(_QWORD *)(v26 + 8);
              v81 = *(_QWORD *)(v197 + 280);
              if ((v21 & 0x80000000) != 0)
                v82 = (uint64_t *)(*(_QWORD *)(v81 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
              else
                v82 = (uint64_t *)(*(_QWORD *)(v81 + 272) + 8 * v21);
              v83 = *v82;
              if (!v83)
                goto LABEL_133;
              while ((*(_BYTE *)(v83 + 3) & 1) != 0)
              {
                v83 = *(_QWORD *)(v83 + 24);
                if (!v83)
                  goto LABEL_133;
              }
              while (1)
              {
                v83 = *(_QWORD *)(v83 + 24);
                if (!v83)
                  break;
                if ((*(_BYTE *)(v83 + 3) & 1) == 0)
                  goto LABEL_133;
              }
              v84 = **(unsigned __int16 **)(v80 + 16);
              if (v84 == 69 || v84 == 0)
LABEL_133:
                v80 = llvm::MachineBasicBlock::SkipPHIsAndLabels(v31, *(_QWORD *)(v31 + 56));
              v86 = v198;
              v87 = *(_QWORD *)(v31 + 40);
              *(_QWORD *)(v198 + 24) = v87;
              v88 = *(_QWORD *)(v87 + 32);
              v89 = *(unsigned int *)(v86 + 40);
              if ((_DWORD)v89)
              {
                v108 = *(_QWORD *)(v86 + 32);
                v109 = *(_QWORD *)(v88 + 40);
                v110 = 32 * v89;
                do
                {
                  if (!*(_BYTE *)v108)
                  {
                    v111 = *(unsigned int *)(v108 + 4);
                    if ((int)v111 >= 0)
                      v112 = (uint64_t *)(*(_QWORD *)(v109 + 272) + 8 * v111);
                    else
                      v112 = (uint64_t *)(*(_QWORD *)(v109 + 24) + 16 * (v111 & 0x7FFFFFFF) + 8);
                    v113 = *v112;
                    if (*v112)
                    {
                      v114 = *(_QWORD *)(v113 + 16);
                      *(_QWORD *)(v113 + 16) = v108;
                      *(_QWORD *)(v108 + 16) = v114;
                      if ((*(_BYTE *)(v108 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v108 + 24) = v113;
                      }
                      else
                      {
                        *(_QWORD *)(v108 + 24) = 0;
                        v112 = (uint64_t *)(v114 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v108 + 16) = v108;
                      *(_QWORD *)(v108 + 24) = 0;
                    }
                    *v112 = v108;
                  }
                  v108 += 32;
                  v110 -= 32;
                }
                while (v110);
              }
              v90 = *(_QWORD *)(v88 + 728);
              if (v90)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v90 + 24))(v90, v86);
              v91 = *(_QWORD *)v80 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v86 = v91 | *(_QWORD *)v86 & 7;
              *(_QWORD *)(v86 + 8) = v80;
              *(_QWORD *)(v91 + 8) = v86;
              *(_QWORD *)v80 = *(_QWORD *)v80 & 7 | v86;
              v92 = llvm::MachineRegisterInfo::cloneVirtualRegister(*(_QWORD *)(v197 + 280), v21, "", 0);
              llvm::MachineOperand::setReg(*(_QWORD *)(v198 + 32), v92);
              if (!(_DWORD)v201)
              {
                v39 = 0;
                goto LABEL_161;
              }
              v93 = v25 + ((unint64_t)(v33 ^ (v31 >> 9)) << 32);
              v94 = (v93 ^ (v93 >> 22)) + ~((v93 ^ (v93 >> 22)) << 13);
              v95 = (9 * (v94 ^ (v94 >> 8))) ^ ((9 * (v94 ^ (v94 >> 8))) >> 15);
              v96 = v201 - 1;
              v97 = (v201 - 1) & (((v95 + ~(v95 << 27)) >> 31) ^ (v95 + ~((_DWORD)v95 << 27)));
              v39 = &v199[24 * v97];
              v98 = *(_QWORD *)v39;
              v99 = *((_DWORD *)v39 + 2);
              if (v31 != *(_QWORD *)v39 || (_DWORD)v21 != v99)
              {
                v101 = 0;
                v102 = 1;
                while (v98 != -4096 || v99 != -1)
                {
                  if (v101)
                    v103 = 0;
                  else
                    v103 = v99 == -2;
                  if (v103 && v98 == -8192)
                    v101 = v39;
                  v105 = v97 + v102++;
                  v97 = v105 & v96;
                  v39 = &v199[24 * (v105 & v96)];
                  v98 = *(_QWORD *)v39;
                  v99 = *((_DWORD *)v39 + 2);
                  if (v31 == *(_QWORD *)v39 && (_DWORD)v21 == v99)
                    goto LABEL_169;
                }
                if (v101)
                  v39 = v101;
LABEL_161:
                if (4 * (int)v200 + 4 < (3 * v201))
                {
                  if ((int)v201 + ~(_DWORD)v200 - HIDWORD(v200) > v201 >> 3)
                    goto LABEL_163;
                  sub_1C4DC4B70((uint64_t *)&v199, v201);
                  if ((_DWORD)v201)
                  {
                    v130 = v25 + ((unint64_t)(v33 ^ (v31 >> 9)) << 32);
                    v131 = (v130 ^ (v130 >> 22)) + ~((v130 ^ (v130 >> 22)) << 13);
                    v132 = (9 * (v131 ^ (v131 >> 8))) ^ ((9 * (v131 ^ (v131 >> 8))) >> 15);
                    v133 = ((v132 + ~(v132 << 27)) >> 31) ^ (v132 + ~((_DWORD)v132 << 27));
                    v134 = v201 - 1;
                    v135 = (v201 - 1) & v133;
                    v39 = &v199[24 * v135];
                    v136 = *(_QWORD *)v39;
                    v137 = *((_DWORD *)v39 + 2);
                    if (*(_QWORD *)v39 != v31 || v137 != (_DWORD)v21)
                    {
                      v124 = 0;
                      v139 = 1;
                      while (v136 != -4096 || v137 != -1)
                      {
                        if (v124)
                          v140 = 0;
                        else
                          v140 = v137 == -2;
                        if (v140 && v136 == -8192)
                          v124 = v39;
                        v142 = v135 + v139++;
                        v135 = v142 & v134;
                        v39 = &v199[24 * (v142 & v134)];
                        v136 = *(_QWORD *)v39;
                        v137 = *((_DWORD *)v39 + 2);
                        if (*(_QWORD *)v39 == v31 && v137 == (_DWORD)v21)
                          goto LABEL_163;
                      }
                      goto LABEL_233;
                    }
                    goto LABEL_163;
                  }
LABEL_236:
                  v39 = 0;
                  goto LABEL_163;
                }
                sub_1C4DC4B70((uint64_t *)&v199, 2 * v201);
                if (!(_DWORD)v201)
                  goto LABEL_236;
                v115 = v25 + ((unint64_t)(v33 ^ (v31 >> 9)) << 32);
                v116 = (v115 ^ (v115 >> 22)) + ~((v115 ^ (v115 >> 22)) << 13);
                v117 = (9 * (v116 ^ (v116 >> 8))) ^ ((9 * (v116 ^ (v116 >> 8))) >> 15);
                v118 = ((v117 + ~(v117 << 27)) >> 31) ^ (v117 + ~((_DWORD)v117 << 27));
                v119 = v201 - 1;
                v120 = (v201 - 1) & v118;
                v39 = &v199[24 * v120];
                v121 = *(_QWORD *)v39;
                v122 = *((_DWORD *)v39 + 2);
                if (v31 != *(_QWORD *)v39 || (_DWORD)v21 != v122)
                {
                  v124 = 0;
                  v125 = 1;
                  while (v121 != -4096 || v122 != -1)
                  {
                    if (v124)
                      v126 = 0;
                    else
                      v126 = v122 == -2;
                    if (v126 && v121 == -8192)
                      v124 = v39;
                    v128 = v120 + v125++;
                    v120 = v128 & v119;
                    v39 = &v199[24 * (v128 & v119)];
                    v121 = *(_QWORD *)v39;
                    v122 = *((_DWORD *)v39 + 2);
                    if (v31 == *(_QWORD *)v39 && (_DWORD)v21 == v122)
                      goto LABEL_163;
                  }
LABEL_233:
                  if (v124)
                    v39 = v124;
                }
LABEL_163:
                LODWORD(v200) = (_DWORD)v200 + 1;
                if (*(_QWORD *)v39 != -4096 || *((_DWORD *)v39 + 2) != -1)
                  --HIDWORD(v200);
                *(_QWORD *)v39 = v31;
                *((_DWORD *)v39 + 2) = v21;
                *((_DWORD *)v39 + 4) = v92;
              }
LABEL_169:
              v13 = v193;
            }
            llvm::MachineOperand::setReg(v26, *((_DWORD *)v39 + 4));
            v19 = 1;
            if (!v24)
              break;
            continue;
          }
        }
      }
LABEL_28:
      v18 = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8;
      if (!v18)
        break;
      v5 = v197;
      if ((*(_BYTE *)v18 & 4) == 0)
        goto LABEL_33;
LABEL_34:
      if (v18 == v192)
      {
        v144 = (uint64_t)v199;
        goto LABEL_238;
      }
    }
    v5 = v197;
LABEL_33:
    while ((*(_WORD *)(v18 + 44) & 4) != 0)
      v18 = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_34;
  }
  v144 = 0;
  v19 = 0;
LABEL_238:
  MEMORY[0x1CAA32FB4](v144, 8);
  v145 = (char *)v212;
  if ((_DWORD)v213)
  {
    v194 = 0;
    v146 = (char *)v212 + 8 * v213;
    v196 = v146;
    do
    {
      v147 = *(_QWORD *)v145;
      v148 = *(_QWORD *)(*(_QWORD *)v145 + 24);
      v149 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v145 + 32) + 4);
      v199 = v203;
      v200 = v203;
      v201 = 32;
      v202 = 0;
      v150 = *(_QWORD *)(v5 + 280);
      if ((v149 & 0x80000000) != 0)
        v151 = (uint64_t *)(*(_QWORD *)(v150 + 24) + 16 * (v149 & 0x7FFFFFFF) + 8);
      else
        v151 = (uint64_t *)(*(_QWORD *)(v150 + 272) + 8 * v149);
      v152 = *v151;
      if (*v151)
      {
        while ((*(_DWORD *)v152 & 0x81000000) != 0)
        {
          v152 = *(_QWORD *)(v152 + 24);
          if (!v152)
            goto LABEL_298;
        }
        v153 = 0;
        v154 = *(_QWORD *)(v152 + 8);
        v155 = v203;
        v156 = v203;
LABEL_248:
        if (**(_WORD **)(v154 + 16) && **(_WORD **)(v154 + 16) != 69)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v199, v154);
          v155 = v199;
          v156 = v200;
          v153 = HIDWORD(v201);
          v154 = *(_QWORD *)(v152 + 8);
        }
        while (1)
        {
          v152 = *(_QWORD *)(v152 + 24);
          if (!v152)
            break;
          if ((*(_DWORD *)v152 & 0x81000000) == 0 && *(_QWORD *)(v152 + 8) != v154)
          {
            v154 = *(_QWORD *)(v152 + 8);
            goto LABEL_248;
          }
        }
        if (v153 != v202)
        {
          if (!v147 || (v157 = v147, (*(_BYTE *)v147 & 4) == 0))
          {
            v157 = v147;
            if ((*(_WORD *)(v147 + 44) & 8) != 0)
            {
              v157 = v147;
              do
                v157 = *(_QWORD *)(v157 + 8);
              while ((*(_WORD *)(v157 + 44) & 8) != 0);
            }
          }
          v158 = *(_QWORD *)(v157 + 8);
          if (v158 != v148 + 48)
          {
            v159 = 0;
            while (1)
            {
              v160 = sub_1C477672C((uint64_t)&v199, v158);
              v155 = v199;
              v156 = v200;
              v161 = (uint64_t *)((char *)&v201 + 4);
              if (v200 != v199)
                v161 = &v201;
              if (v160 != (_QWORD *)&v200[8 * *(unsigned int *)v161])
                break;
              if (++v159 > dword_1ED805E28)
              {
                v146 = v196;
                v5 = v197;
                goto LABEL_296;
              }
              if (!v158 || (*(_BYTE *)v158 & 4) == 0)
              {
                while ((*(_WORD *)(v158 + 44) & 8) != 0)
                  v158 = *(_QWORD *)(v158 + 8);
              }
              v158 = *(_QWORD *)(v158 + 8);
              if (v158 == v148 + 48)
              {
                v158 = v148 + 48;
                break;
              }
            }
          }
          v162 = *(_QWORD *)(*(_QWORD *)(v147 + 24) + 32);
          v5 = v197;
          if (v162)
          {
            v163 = *(_QWORD *)(v162 + 728);
            if (v163)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 32))(v163, v147);
            v164 = *(unsigned int *)(v147 + 40);
            if ((_DWORD)v164)
            {
              v165 = *(_QWORD *)(v147 + 32);
              v166 = *(_QWORD *)(v162 + 40);
              v167 = 32 * v164;
              do
              {
                if (!*(_BYTE *)v165)
                {
                  v168 = *(unsigned int *)(v165 + 4);
                  if ((v168 & 0x80000000) != 0)
                    v169 = (uint64_t *)(*(_QWORD *)(v166 + 24) + 16 * (v168 & 0x7FFFFFFF) + 8);
                  else
                    v169 = (uint64_t *)(*(_QWORD *)(v166 + 272) + 8 * v168);
                  v170 = *v169;
                  v172 = *(_QWORD *)(v165 + 16);
                  v171 = *(_QWORD *)(v165 + 24);
                  if (v165 != *v169)
                    v169 = (uint64_t *)(v172 + 24);
                  *v169 = v171;
                  if (v171)
                    v173 = v171;
                  else
                    v173 = v170;
                  *(_QWORD *)(v173 + 16) = v172;
                  *(_QWORD *)(v165 + 16) = 0;
                  *(_QWORD *)(v165 + 24) = 0;
                }
                v165 += 32;
                v167 -= 32;
              }
              while (v167);
            }
          }
          v174 = *(unint64_t **)(v147 + 8);
          v175 = *(_QWORD *)v147 & 0xFFFFFFFFFFFFFFF8;
          *v174 = v175 | *v174 & 7;
          *(_QWORD *)(v175 + 8) = v174;
          *(_QWORD *)v147 &= 7uLL;
          *(_QWORD *)(v147 + 8) = 0;
          v176 = *(_QWORD *)(v148 + 40);
          *(_QWORD *)(v147 + 24) = v176;
          v177 = *(_QWORD *)(v176 + 32);
          v178 = *(unsigned int *)(v147 + 40);
          v146 = v196;
          if ((_DWORD)v178)
          {
            v181 = *(_QWORD *)(v147 + 32);
            v182 = *(_QWORD *)(v177 + 40);
            v183 = 32 * v178;
            do
            {
              if (!*(_BYTE *)v181)
              {
                v184 = *(unsigned int *)(v181 + 4);
                if ((int)v184 >= 0)
                  v185 = (uint64_t *)(*(_QWORD *)(v182 + 272) + 8 * v184);
                else
                  v185 = (uint64_t *)(*(_QWORD *)(v182 + 24) + 16 * (v184 & 0x7FFFFFFF) + 8);
                v186 = *v185;
                if (*v185)
                {
                  v187 = *(_QWORD *)(v186 + 16);
                  *(_QWORD *)(v186 + 16) = v181;
                  *(_QWORD *)(v181 + 16) = v187;
                  if ((*(_BYTE *)(v181 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v181 + 24) = v186;
                  }
                  else
                  {
                    *(_QWORD *)(v181 + 24) = 0;
                    v185 = (uint64_t *)(v187 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v181 + 16) = v181;
                  *(_QWORD *)(v181 + 24) = 0;
                }
                *v185 = v181;
              }
              v181 += 32;
              v183 -= 32;
            }
            while (v183);
          }
          v179 = *(_QWORD *)(v177 + 728);
          if (v179)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v179 + 24))(v179, v147);
          v180 = *(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v147 = v180 | *(_QWORD *)v147 & 7;
          *(_QWORD *)(v147 + 8) = v158;
          *(_QWORD *)(v180 + 8) = v147;
          *(_QWORD *)v158 = *(_QWORD *)v158 & 7 | v147;
          v194 = 1;
          v155 = v199;
          v156 = v200;
        }
LABEL_296:
        if (v156 != v155)
          free(v156);
      }
LABEL_298:
      v145 += 8;
    }
    while (v145 != v146);
    v145 = (char *)v212;
    v188 = v194;
  }
  else
  {
    v188 = 0;
  }
  if (v145 != (char *)v214)
    free(v145);
  v7 = v19 | v188;
  if ((v204 & 1) == 0)
    MEMORY[0x1CAA32FB4](v205, 8);
  return v7 & 1;
}

const char *sub_1C5543028()
{
  return "Localizer";
}

void sub_1C5543038(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 1uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C554316C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5543180()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E816EB80;
  return result;
}

void sub_1C55431A4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E816EB80;
}

uint64_t sub_1C55431BC()
{
  return 0;
}

uint64_t sub_1C55431C4()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Max number of unrelated insts to scan over during intra-block localization.";
  *((_QWORD *)&v4 + 1) = 75;
  v3 = &v2;
  v1 = 1;
  v2 = 10000;
  sub_1C61D8E94((uint64_t)&unk_1ED805DA8, "localizer-intrablock-scan-threshold", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED805DA8, &dword_1C475E000);
}

void sub_1C5543244(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[32];

  v2 = *(_DWORD *)(a1 + 96);
  if ((v2 || *(_QWORD *)(a1 + 152)) && *(_DWORD *)(a1 + 180) != *(_DWORD *)(a1 + 184))
  {
    v15 = v19;
    v16 = v19;
    v17 = 4;
    v18 = 0;
    v3 = *(_QWORD *)(a1 + 168);
    v4 = 176;
    if (v3 == *(_QWORD *)(a1 + 160))
      v4 = 180;
    v5 = *(unsigned int *)(a1 + v4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      v7 = *(uint64_t **)(a1 + 168);
      while ((unint64_t)*v7 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v7;
        v6 -= 8;
        if (!v6)
          goto LABEL_23;
      }
    }
    else
    {
      v7 = *(uint64_t **)(a1 + 168);
    }
    v8 = (_QWORD *)(v3 + 8 * v5);
    if (v7 != v8)
    {
      v9 = *v7;
LABEL_14:
      v10 = *(_QWORD *)(v9 + 56);
      if (v10)
      {
        if (!*(_DWORD *)(v10 + 4))
        {
LABEL_30:
          if (v16 != v15)
            free(v16);
          return;
        }
        if (sub_1C554338C(a1 + 88, (unsigned __int8 **)(v9 + 56)))
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v15, v9);
      }
      v11 = (unint64_t *)(v7 + 1);
      while (v11 != v8)
      {
        v12 = *v11++;
        v9 = v12;
        if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v7 = (uint64_t *)(v11 - 1);
          goto LABEL_14;
        }
      }
      v2 = *(_DWORD *)(a1 + 96);
    }
LABEL_23:
    v13 = *(_QWORD *)(a1 + 152);
    if (v2)
      v14 = 0;
    else
      v14 = v13 == 0;
    if (!v14)
    {
      if (v13)
        v2 = *(_QWORD *)(a1 + 152);
      *(_DWORD *)(a1 + 224) += v2;
    }
    goto LABEL_30;
  }
}

uint64_t sub_1C554338C(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 64))
  {
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = *(unsigned __int8 ***)a1;
      v13 = *a2;
      v14 = 8 * v11;
      while (*v12 != v13)
      {
        ++v12;
        v14 -= 8;
        if (!v14)
          return 0;
      }
      sub_1C6275028((uint64_t *)a1, v12);
      return 1;
    }
    return 0;
  }
  v5 = *(_QWORD **)(a1 + 56);
  v3 = (uint64_t *)(a1 + 56);
  v4 = v5;
  if (!v5)
    return 0;
  v6 = (unint64_t)*a2;
  v7 = v3;
  do
  {
    v8 = v4[4];
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v3 || v6 < v7[4])
    return 0;
  sub_1C62750B8((uint64_t **)v3 - 1, v7);
  return 1;
}

void sub_1C5543434(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v9;
  int v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;

  if (a2)
    sub_1C5543244(a1);
  v3 = *(void **)(a1 + 168);
  if (v3 == *(void **)(a1 + 160))
    goto LABEL_4;
  v7 = *(unsigned int *)(a1 + 176);
  if (v7 < 0x21 || 4 * (*(_DWORD *)(a1 + 180) - *(_DWORD *)(a1 + 184)) >= v7)
  {
    memset(v3, 255, 8 * v7);
LABEL_4:
    *(_DWORD *)(a1 + 180) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    goto LABEL_5;
  }
  free(v3);
  v9 = *(_DWORD *)(a1 + 180) - *(_DWORD *)(a1 + 184);
  v10 = 1 << (33 - __clz(v9 - 1));
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  if (v9 <= 0x10)
    v11 = 32;
  else
    v11 = v10;
  *(_DWORD *)(a1 + 176) = v11;
  v12 = malloc_type_malloc(8 * v11, 0x4065EBACuLL);
  if (!v12)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 168) = v12;
  memset(v12, 255, 8 * *(unsigned int *)(a1 + 176));
LABEL_5:
  v4 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v4)
  {
    v13 = 8 * v4;
    v14 = *(_QWORD *)(a1 + 88) - 8;
    do
    {
      v15 = *(unsigned __int8 **)(v14 + v13);
      if (v15)
        llvm::MetadataTracking::untrack(v14 + v13, v15);
      v13 -= 8;
    }
    while (v13);
  }
  v6 = *(_QWORD **)(a1 + 144);
  v5 = (_QWORD *)(a1 + 144);
  *((_DWORD *)v5 - 12) = 0;
  sub_1C5518D4C((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  *v5 = 0;
  v5[1] = 0;
}

uint64_t sub_1C554355C(uint64_t result, unsigned __int8 **a2)
{
  unsigned __int8 **v2;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t **v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  unint64_t v14;
  char *v16;

  v2 = a2;
  v3 = result;
  if (*(_QWORD *)(result + 64))
  {
    v10 = (uint64_t **)(result + 48);
    v11 = *a2;
    return sub_1C62750F8(v10, (unint64_t)v11, v11);
  }
  v4 = *(unsigned __int8 ***)result;
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = *(unsigned __int8 ***)result;
    while (*v7 != *a2)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
        goto LABEL_8;
    }
    if (v6)
      return result;
LABEL_8:
    if (v5 >= 4)
    {
      do
      {
        v12 = *(unsigned __int8 **)(*(_QWORD *)v3 + 8 * v5 - 8);
        sub_1C62750F8((uint64_t **)(v3 + 48), (unint64_t)v12, v12);
        LODWORD(v5) = *(_DWORD *)(v3 + 8) - 1;
        *(_DWORD *)(v3 + 8) = v5;
        v13 = (unsigned __int8 **)(*(_QWORD *)v3 + 8 * v5);
        if (*v13)
        {
          llvm::MetadataTracking::untrack((uint64_t)v13, *v13);
          LODWORD(v5) = *(_DWORD *)(v3 + 8);
        }
      }
      while ((_DWORD)v5);
      v11 = *v2;
      v10 = (uint64_t **)(v3 + 48);
      return sub_1C62750F8(v10, (unint64_t)v11, v11);
    }
  }
  if (v5 >= *(_DWORD *)(result + 12))
  {
    v14 = v5 + 1;
    if (v4 <= v2 && &v4[v5] > v2)
    {
      v16 = (char *)((char *)v2 - (char *)v4);
      sub_1C62751D0(result, v14);
      v4 = *(unsigned __int8 ***)v3;
      v2 = (unsigned __int8 **)&v16[*(_QWORD *)v3];
    }
    else
    {
      sub_1C62751D0(result, v14);
      v4 = *(unsigned __int8 ***)v3;
    }
  }
  v8 = *(unsigned int *)(v3 + 8);
  result = (uint64_t)&v4[v8];
  v9 = *v2;
  *(_QWORD *)result = *v2;
  if (v9)
  {
    result = llvm::MetadataTracking::track(result, v9, 2);
    LODWORD(v8) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(v3 + 8) = v8 + 1;
  return result;
}

uint64_t sub_1C55436A8(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E816EBC8;
  v2 = *(void **)(a1 + 168);
  if (v2 != *(void **)(a1 + 160))
    free(v2);
  sub_1C5518D4C(a1 + 136, *(_QWORD **)(a1 + 144));
  sub_1C5518DAC((void **)(a1 + 88));
  *(_QWORD *)a1 = off_1E7FA1810;
  v3 = *(void **)(a1 + 16);
  if (v3 != *(void **)(a1 + 8))
    free(v3);
  return a1;
}

uint64_t sub_1C5543728(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  a1[1] = a2;
  a1[5] = 0;
  a1[3] = *(_QWORD *)(a2 + 40);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  a1[2] = result;
  v6 = 0;
  v4 = (unsigned __int8 **)(a1 + 4);
  if (&v6 != a1 + 4)
  {
    if (*v4)
    {
      result = llvm::MetadataTracking::untrack((uint64_t)(a1 + 4), *v4);
      v5 = v6;
      *v4 = v6;
      if (v5)
        result = llvm::MetadataTracking::retrack((uint64_t)&v6, v5, (uint64_t)(a1 + 4));
    }
    else
    {
      *v4 = 0;
    }
  }
  a1[6] = 0;
  a1[7] = 0;
  return result;
}

llvm::MachineFunction *sub_1C55437B8(_QWORD *a1, unsigned int a2)
{
  llvm::MachineFunction *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  llvm::MachineInstr *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  v3 = (llvm::MachineFunction *)a1[1];
  v4 = *(_QWORD *)(a1[2] + 8);
  v5 = (unsigned __int8 *)a1[4];
  v9 = v5;
  if (v5)
    llvm::MetadataTracking::track((uint64_t)&v9, v5, 2);
  v6 = v4 + 48 * a2;
  v7 = (llvm::MachineInstr *)*((_QWORD *)v3 + 28);
  if (v7)
    *((_QWORD *)v3 + 28) = *(_QWORD *)v7;
  else
    v7 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v3 + 128, 72, 3);
  v10 = v9;
  if (v9)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v9, v9, (uint64_t)&v10);
    v9 = 0;
  }
  llvm::MachineInstr::MachineInstr(v7, v3, v6, &v10, 0);
  if (v10)
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  if (v9)
    llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  return v3;
}

uint64_t sub_1C55438A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = (uint64_t *)a1[6];
  v7 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(a3 + 24) = v7;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v9)
  {
    v14 = *(_QWORD *)(a3 + 32);
    v15 = *(_QWORD *)(v8 + 40);
    v16 = 32 * v9;
    do
    {
      if (!*(_BYTE *)v14)
      {
        v17 = *(unsigned int *)(v14 + 4);
        if ((int)v17 >= 0)
          v18 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * v17);
        else
          v18 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
        v19 = *v18;
        if (*v18)
        {
          v20 = *(_QWORD *)(v19 + 16);
          *(_QWORD *)(v19 + 16) = v14;
          *(_QWORD *)(v14 + 16) = v20;
          if ((*(_BYTE *)(v14 + 3) & 1) != 0)
          {
            *(_QWORD *)(v14 + 24) = v19;
          }
          else
          {
            *(_QWORD *)(v14 + 24) = 0;
            v18 = (uint64_t *)(v20 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v14 + 16) = v14;
          *(_QWORD *)(v14 + 24) = 0;
        }
        *v18 = v14;
      }
      v14 += 32;
      v16 -= 32;
    }
    while (v16);
  }
  v10 = *(_QWORD *)(v8 + 728);
  if (v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a3);
  v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)a3 = v11 | *(_QWORD *)a3 & 7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(v11 + 8) = a3;
  *v6 = *v6 & 7 | a3;
  v12 = a1[7];
  if (v12)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, a3);
  return a2;
}

llvm::MachineFunction *sub_1C55439CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  llvm::MachineFunction *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = llvm::BuildMI(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 624, 0, a2, a3, a4);
  v7 = (unint64_t *)v5;
  v8 = *(unint64_t **)(a1 + 48);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40);
  *(_QWORD *)(v5 + 24) = v9;
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int *)(v5 + 40);
  if ((_DWORD)v11)
  {
    v16 = *(_QWORD *)(v5 + 32);
    v17 = *(_QWORD *)(v10 + 40);
    v18 = 32 * v11;
    do
    {
      if (!*(_BYTE *)v16)
      {
        v19 = *(unsigned int *)(v16 + 4);
        if ((int)v19 >= 0)
          v20 = (uint64_t *)(*(_QWORD *)(v17 + 272) + 8 * v19);
        else
          v20 = (uint64_t *)(*(_QWORD *)(v17 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
        v21 = *v20;
        if (*v20)
        {
          v22 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v21 + 16) = v16;
          *(_QWORD *)(v16 + 16) = v22;
          if ((*(_BYTE *)(v16 + 3) & 1) != 0)
          {
            *(_QWORD *)(v16 + 24) = v21;
          }
          else
          {
            *(_QWORD *)(v16 + 24) = 0;
            v20 = (uint64_t *)(v22 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v16 + 16) = v16;
          *(_QWORD *)(v16 + 24) = 0;
        }
        *v20 = v16;
      }
      v16 += 32;
      v18 -= 32;
    }
    while (v18);
  }
  v12 = *(_QWORD *)(v10 + 728);
  if (v12)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, v5);
  v13 = *v8 & 0xFFFFFFFFFFFFFFF8;
  *v7 = v13 | *v7 & 7;
  v7[1] = (unint64_t)v8;
  *(_QWORD *)(v13 + 8) = v7;
  *v8 = *v8 & 7 | (unint64_t)v7;
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v14 + 24))(v14, v7);
  return v6;
}

llvm::MachineFunction *sub_1C5543B24(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::MachineFunction *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 *v33;

  v8 = (llvm::MachineFunction *)a1[1];
  v9 = *(_QWORD *)(a1[2] + 8);
  v10 = (unsigned __int8 *)a1[4];
  v33 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v33, v10, 2);
  v11 = v9 + 624;
  v12 = *((_QWORD *)v8 + 28);
  if (v12)
    *((_QWORD *)v8 + 28) = *(_QWORD *)v12;
  else
    v12 = sub_1C484358C((uint64_t)v8 + 128, 72, 3);
  *(_QWORD *)&v31 = v33;
  if (v33)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v33, v33, (uint64_t)&v31);
    v33 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v12, v8, v11, (unsigned __int8 **)&v31, 0);
  if ((_QWORD)v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, (unsigned __int8 *)v31);
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  v13 = *(unsigned __int8 *)(a2 + 16);
  if (v13 == 5 && *(_WORD *)(a2 + 18) == 48)
  {
    a2 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v13 = *(unsigned __int8 *)(a2 + 16);
  }
  switch(v13)
  {
    case 19:
      LODWORD(v31) = 1;
      *((_QWORD *)&v31 + 1) = 0;
      *(_QWORD *)&v32 = 0;
      break;
    case 17:
      v14 = 3;
      goto LABEL_21;
    case 16:
      if (*(_DWORD *)(a2 + 32) >= 0x41u)
      {
        v14 = 2;
LABEL_21:
        LODWORD(v31) = v14;
        *((_QWORD *)&v31 + 1) = 0;
        *(_QWORD *)&v32 = a2;
        break;
      }
      v15 = *(_QWORD *)(a2 + 24);
      LODWORD(v31) = 1;
      *((_QWORD *)&v31 + 1) = 0;
      *(_QWORD *)&v32 = v15;
      break;
    default:
      v31 = 0u;
      v32 = 0u;
      break;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v8, (const llvm::MachineOperand *)&v31);
  LODWORD(v31) = 1;
  *((_QWORD *)&v31 + 1) = 0;
  *(_QWORD *)&v32 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v8, (const llvm::MachineOperand *)&v31);
  LODWORD(v31) = 14;
  *((_QWORD *)&v31 + 1) = 0;
  *(_QWORD *)&v32 = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v8, (const llvm::MachineOperand *)&v31);
  LODWORD(v31) = 14;
  *((_QWORD *)&v31 + 1) = 0;
  *(_QWORD *)&v32 = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v8, (const llvm::MachineOperand *)&v31);
  v16 = (unint64_t *)a1[6];
  v17 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v12 + 24) = v17;
  v18 = *(_QWORD *)(v17 + 32);
  v19 = *(unsigned int *)(v12 + 40);
  if ((_DWORD)v19)
  {
    v24 = *(_QWORD *)(v12 + 32);
    v25 = *(_QWORD *)(v18 + 40);
    v26 = 32 * v19;
    do
    {
      if (!*(_BYTE *)v24)
      {
        v27 = *(unsigned int *)(v24 + 4);
        if ((int)v27 >= 0)
          v28 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v27);
        else
          v28 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
        v29 = *v28;
        if (*v28)
        {
          v30 = *(_QWORD *)(v29 + 16);
          *(_QWORD *)(v29 + 16) = v24;
          *(_QWORD *)(v24 + 16) = v30;
          if ((*(_BYTE *)(v24 + 3) & 1) != 0)
          {
            *(_QWORD *)(v24 + 24) = v29;
          }
          else
          {
            *(_QWORD *)(v24 + 24) = 0;
            v28 = (uint64_t *)(v30 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v24 + 16) = v24;
          *(_QWORD *)(v24 + 24) = 0;
        }
        *v28 = v24;
      }
      v24 += 32;
      v26 -= 32;
    }
    while (v26);
  }
  v20 = *(_QWORD *)(v18 + 728);
  if (v20)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 24))(v20, v12);
  v21 = *v16 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = v21 | *(_QWORD *)v12 & 7;
  *(_QWORD *)(v12 + 8) = v16;
  *(_QWORD *)(v21 + 8) = v12;
  *v16 = *v16 & 7 | v12;
  v22 = a1[7];
  if (v22)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v22 + 24))(v22, v12);
  return v8;
}

void sub_1C5543E0C(int *a1, uint64_t a2, llvm::MachineFunction **a3)
{
  int v4;
  int v5;
  llvm::MachineInstr *v6;
  llvm::MachineFunction *v7;
  int GenericVirtualRegister;
  llvm::MachineInstr *v10;
  uint64_t v11;
  int IncompleteVirtualRegister;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1[2];
  switch(v4)
  {
    case 1:
      v5 = *a1;
      v7 = *a3;
      v6 = a3[1];
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v14 = 0x1000000;
      v15 = v5;
LABEL_3:
      llvm::MachineInstr::addOperand(v6, v7, (const llvm::MachineOperand *)&v14);
      return;
    case 0:
      GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, *(_QWORD *)a1, (unsigned __int8 *)&unk_1C8725DB3, 0);
      v7 = *a3;
      v10 = a3[1];
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v14 = 0x1000000;
      v15 = GenericVirtualRegister;
      v6 = v10;
      goto LABEL_3;
    case 2:
      v11 = *(_QWORD *)a1;
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, (unsigned __int8 *)&unk_1C8725DB3, 0);
      *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v11 & 0xFFFFFFFFFFFFFFFBLL;
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v7 = *a3;
      v6 = a3[1];
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v14 = 0x1000000;
      v15 = IncompleteVirtualRegister;
      goto LABEL_3;
  }
}

void sub_1C5543F10(int *a1, llvm::MachineFunction **a2)
{
  int v2;
  int v3;
  llvm::MachineInstr *v4;
  llvm::MachineFunction *v5;
  int v7;
  uint64_t v9;
  _DWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[4];
  switch(v2)
  {
    case 0:
      v3 = *a1;
LABEL_3:
      v5 = *a2;
      v4 = a2[1];
      v12 = 0;
      v13 = 0;
      v11[0] = 0;
      v11[1] = v3;
      v14 = 0;
LABEL_4:
      llvm::MachineInstr::addOperand(v4, v5, (const llvm::MachineOperand *)v11);
      return;
    case 1:
      v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 32) + 4);
      goto LABEL_3;
    case 2:
      v7 = *a1;
      v5 = *a2;
      v4 = a2[1];
      v11[0] = 18;
      v12 = 0;
      LODWORD(v13) = v7;
      goto LABEL_4;
    case 3:
      v9 = *(_QWORD *)a1;
      v5 = *a2;
      v4 = a2[1];
      v11[0] = 1;
      v12 = 0;
      v13 = v9;
      goto LABEL_4;
  }
}

llvm::MachineFunction *sub_1C5543FA8(_QWORD *a1, int *a2, int a3)
{
  llvm::MachineFunction *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  int GenericVirtualRegister;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int IncompleteVirtualRegister;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = (llvm::MachineFunction *)a1[1];
  v7 = *(_QWORD *)(a1[2] + 8);
  v8 = (unsigned __int8 *)a1[4];
  v33 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v33, v8, 2);
  v9 = v7 + 3360;
  v10 = *((_QWORD *)v6 + 28);
  if (v10)
    *((_QWORD *)v6 + 28) = *(_QWORD *)v10;
  else
    v10 = sub_1C484358C((uint64_t)v6 + 128, 72, 3);
  v34 = v33;
  if (v33)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v33, v33, (uint64_t)&v34);
    v33 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v10, v6, v9, &v34, 0);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  v11 = (unint64_t *)a1[6];
  v12 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v10 + 24) = v12;
  v13 = *(_QWORD *)(v12 + 32);
  v14 = *(unsigned int *)(v10 + 40);
  if ((_DWORD)v14)
  {
    v23 = *(_QWORD *)(v10 + 32);
    v24 = *(_QWORD *)(v13 + 40);
    v25 = 32 * v14;
    do
    {
      if (!*(_BYTE *)v23)
      {
        v26 = *(unsigned int *)(v23 + 4);
        if ((int)v26 >= 0)
          v27 = (uint64_t *)(*(_QWORD *)(v24 + 272) + 8 * v26);
        else
          v27 = (uint64_t *)(*(_QWORD *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
        v28 = *v27;
        if (*v27)
        {
          v29 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v28 + 16) = v23;
          *(_QWORD *)(v23 + 16) = v29;
          if ((*(_BYTE *)(v23 + 3) & 1) != 0)
          {
            *(_QWORD *)(v23 + 24) = v28;
          }
          else
          {
            *(_QWORD *)(v23 + 24) = 0;
            v27 = (uint64_t *)(v29 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v23 + 16) = v23;
          *(_QWORD *)(v23 + 24) = 0;
        }
        *v27 = v23;
      }
      v23 += 32;
      v25 -= 32;
    }
    while (v25);
  }
  v15 = *(_QWORD *)(v13 + 728);
  if (v15)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 24))(v15, v10);
  v16 = *v11 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = v16 | *(_QWORD *)v10 & 7;
  *(_QWORD *)(v10 + 8) = v11;
  *(_QWORD *)(v16 + 8) = v10;
  *v11 = *v11 & 7 | v10;
  v17 = a1[7];
  if (v17)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 24))(v17, v10);
  v18 = a2[2];
  if (v18 == 1)
  {
    v19 = *a2;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    LODWORD(v34) = 0x1000000;
    HIDWORD(v34) = v19;
  }
  else
  {
    v21 = a1[3];
    if (v18)
    {
      if (v18 != 2)
        goto LABEL_19;
      v30 = *(_QWORD *)a2;
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v21, (unsigned __int8 *)&unk_1C8725DB3, 0);
      *(_QWORD *)(*(_QWORD *)(v21 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v30 & 0xFFFFFFFFFFFFFFFBLL;
      v32 = *(_QWORD *)(v21 + 8);
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      v35 = 0;
      v36 = 0;
      v37 = 0;
      HIDWORD(v34) = IncompleteVirtualRegister;
    }
    else
    {
      GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v21, *(_QWORD *)a2, (unsigned __int8 *)&unk_1C8725DB3, 0);
      v35 = 0;
      v36 = 0;
      v37 = 0;
      HIDWORD(v34) = GenericVirtualRegister;
    }
    LODWORD(v34) = 0x1000000;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v6, (const llvm::MachineOperand *)&v34);
LABEL_19:
  LODWORD(v34) = 5;
  v35 = 0;
  LODWORD(v36) = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v6, (const llvm::MachineOperand *)&v34);
  return v6;
}

llvm::MachineFunction *sub_1C5544284(_QWORD *a1, int *a2, uint64_t a3)
{
  llvm::MachineFunction *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  int GenericVirtualRegister;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int IncompleteVirtualRegister;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = (llvm::MachineFunction *)a1[1];
  v7 = *(_QWORD *)(a1[2] + 8);
  v8 = (unsigned __int8 *)a1[4];
  v33 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v33, v8, 2);
  v9 = v7 + 3408;
  v10 = *((_QWORD *)v6 + 28);
  if (v10)
    *((_QWORD *)v6 + 28) = *(_QWORD *)v10;
  else
    v10 = sub_1C484358C((uint64_t)v6 + 128, 72, 3);
  v34 = (uint64_t)v33;
  if (v33)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v33, v33, (uint64_t)&v34);
    v33 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v10, v6, v9, (unsigned __int8 **)&v34, 0);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, (unsigned __int8 *)v34);
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  v11 = (unint64_t *)a1[6];
  v12 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v10 + 24) = v12;
  v13 = *(_QWORD *)(v12 + 32);
  v14 = *(unsigned int *)(v10 + 40);
  if ((_DWORD)v14)
  {
    v23 = *(_QWORD *)(v10 + 32);
    v24 = *(_QWORD *)(v13 + 40);
    v25 = 32 * v14;
    do
    {
      if (!*(_BYTE *)v23)
      {
        v26 = *(unsigned int *)(v23 + 4);
        if ((int)v26 >= 0)
          v27 = (uint64_t *)(*(_QWORD *)(v24 + 272) + 8 * v26);
        else
          v27 = (uint64_t *)(*(_QWORD *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
        v28 = *v27;
        if (*v27)
        {
          v29 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v28 + 16) = v23;
          *(_QWORD *)(v23 + 16) = v29;
          if ((*(_BYTE *)(v23 + 3) & 1) != 0)
          {
            *(_QWORD *)(v23 + 24) = v28;
          }
          else
          {
            *(_QWORD *)(v23 + 24) = 0;
            v27 = (uint64_t *)(v29 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v23 + 16) = v23;
          *(_QWORD *)(v23 + 24) = 0;
        }
        *v27 = v23;
      }
      v23 += 32;
      v25 -= 32;
    }
    while (v25);
  }
  v15 = *(_QWORD *)(v13 + 728);
  if (v15)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 24))(v15, v10);
  v16 = *v11 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = v16 | *(_QWORD *)v10 & 7;
  *(_QWORD *)(v10 + 8) = v11;
  *(_QWORD *)(v16 + 8) = v10;
  *v11 = *v11 & 7 | v10;
  v17 = a1[7];
  if (v17)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 24))(v17, v10);
  v18 = a2[2];
  if (v18 == 1)
  {
    v19 = *a2;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    LODWORD(v34) = 0x1000000;
    HIDWORD(v34) = v19;
  }
  else
  {
    v21 = a1[3];
    if (v18)
    {
      if (v18 != 2)
        goto LABEL_19;
      v30 = *(_QWORD *)a2;
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v21, (unsigned __int8 *)&unk_1C8725DB3, 0);
      *(_QWORD *)(*(_QWORD *)(v21 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v30 & 0xFFFFFFFFFFFFFFFBLL;
      v32 = *(_QWORD *)(v21 + 8);
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      v35 = 0;
      v36 = 0;
      v37 = 0;
      HIDWORD(v34) = IncompleteVirtualRegister;
    }
    else
    {
      GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v21, *(_QWORD *)a2, (unsigned __int8 *)&unk_1C8725DB3, 0);
      v35 = 0;
      v36 = 0;
      v37 = 0;
      HIDWORD(v34) = GenericVirtualRegister;
    }
    LODWORD(v34) = 0x1000000;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v6, (const llvm::MachineOperand *)&v34);
LABEL_19:
  v35 = 0;
  v36 = a3;
  LODWORD(v37) = 0;
  v34 = 10;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v6, (const llvm::MachineOperand *)&v34);
  return v6;
}

uint64_t sub_1C5544564@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _DWORD v22[4];
  uint64_t v23;

  v6 = a5;
  v23 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v11 = result;
    v12 = *(_QWORD *)(result + 24);
    if (a3 < 0 && (a3 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v12 + 432))
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 424) + 8 * (a3 & 0x7FFFFFFF));
    else
      v13 = 0;
    *a2 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v12, v13, (unsigned __int8 *)&unk_1C8725DB3, 0);
    v17 = a4;
    v18 = 0;
    sub_1C5544694(v11, &v17, v6);
    v15 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 4);
    LOBYTE(v6) = 1;
    v22[0] = *a2;
    v22[2] = 1;
    LODWORD(v17) = a3;
    v19 = 0;
    v20 = v15;
    v21 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 193, v22, 1, &v17, 2, 0);
    *(_QWORD *)a6 = result;
    *(_QWORD *)(a6 + 8) = v16;
  }
  else
  {
    *a2 = a3;
    *(_BYTE *)a6 = 0;
  }
  *(_BYTE *)(a6 + 16) = v6;
  return result;
}

uint64_t sub_1C5544694(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  llvm::ConstantInt *v14;
  unsigned int v15;
  unint64_t v16;
  llvm::ValueHandleBase *v17;
  _DWORD *v19;
  int v20;
  llvm::ConstantInt *v21;
  unint64_t v22;
  unsigned int v23;

  v6 = ****(_QWORD *****)(a1 + 8);
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2;
  if (v7)
  {
    if (v7 == 2
      || (v9 = *(_QWORD *)(a1 + 24), (*(_DWORD *)a2 & 0x80000000) == 0)
      || (v10 = *(_DWORD *)a2 & 0x7FFFFFFF, v10 >= *(_DWORD *)(v9 + 432)))
    {
      v11 = 0;
      goto LABEL_12;
    }
    v8 = (unint64_t *)(*(_QWORD *)(v9 + 424) + 8 * v10);
  }
  v11 = *v8;
  if ((v11 & 1) != 0)
  {
    v12 = v11 >> 3;
    goto LABEL_14;
  }
  if ((v11 & 4) == 0)
  {
LABEL_12:
    v12 = (unsigned __int16)(v11 >> 3);
    goto LABEL_14;
  }
  if ((v11 & 2) != 0)
    v12 = (unsigned __int16)(v11 >> 19);
  else
    v12 = v11 >> 19;
LABEL_14:
  LODWORD(v22) = v12;
  if (v12 <= 63)
  {
    if (v12 <= 31)
    {
      switch(v12)
      {
        case 16:
          v13 = (_QWORD *)(*v6 + 1936);
          goto LABEL_22;
        case 8:
          v13 = (_QWORD *)(*v6 + 1912);
          goto LABEL_22;
        case 1:
          v13 = (_QWORD *)(*v6 + 1888);
          goto LABEL_22;
      }
    }
    else if (v12 == 32)
    {
      v13 = (_QWORD *)(*v6 + 1960);
      goto LABEL_22;
    }
  }
  else
  {
    if (v12 == 64)
    {
      v13 = (_QWORD *)(*v6 + 1984);
      goto LABEL_22;
    }
    if (v12 == 128)
    {
      v13 = (_QWORD *)(*v6 + 2008);
      goto LABEL_22;
    }
  }
  v19 = sub_1C5270984(*v6 + 2168, &v22);
  v13 = (_QWORD *)*((_QWORD *)v19 + 1);
  if (!v13)
  {
    v13 = (_QWORD *)sub_1C484358C(*v6 + 2040, 24, 3);
    v20 = v22;
    *v13 = v6;
    v13[2] = 0;
    v13[1] = (v20 << 8) | 0xDu;
    *((_QWORD *)v19 + 1) = v13;
  }
LABEL_22:
  v14 = (llvm::ConstantInt *)*v13;
  v15 = *((_DWORD *)v13 + 2);
  v23 = v15 >> 8;
  if (v15 >> 8 > 0x40)
  {
    v21 = v14;
    llvm::APInt::initSlowCase((llvm::APInt *)&v22, a3, 1);
    v14 = v21;
  }
  else
  {
    if (v15 <= 0xFF)
      v16 = 0;
    else
      v16 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v15);
    v22 = v16 & a3;
  }
  v17 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v22, (const llvm::APInt *)a3);
  if (v23 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  return (*(uint64_t (**)(uint64_t, unint64_t *, llvm::ValueHandleBase *))(*(_QWORD *)a1 + 16))(a1, a2, v17);
}

uint64_t sub_1C55448CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int *v27;
  int v28;
  int v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v39;
  int v40;
  int v41;
  int v42;
  char v43;
  char v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  _BYTE v48[32];
  unint64_t v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = a1[3];
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2;
  if (!v7)
    goto LABEL_6;
  if (v7 != 2 && (*(_DWORD *)a2 & 0x80000000) != 0)
  {
    v9 = *(_DWORD *)a2 & 0x7FFFFFFF;
    if (v9 < *(_DWORD *)(v6 + 432))
    {
      v8 = (uint64_t *)(*(_QWORD *)(v6 + 424) + 8 * v9);
LABEL_6:
      v10 = *v8;
      goto LABEL_8;
    }
  }
  v10 = 0;
LABEL_8:
  v11 = sub_1C54F0874(a3, v6);
  v12 = v11;
  v13 = 3;
  if ((v11 & 1) == 0)
    v13 = 19;
  v14 = v11 & 0x8000000000000000 | (8 * (v11 >> v13)) | 1;
  v15 = 35;
  v16 = 19;
  if ((v11 & 4) == 0)
    v15 = 19;
  v17 = v11 >> v15;
  if ((v11 & 4) == 0)
    v16 = 3;
  if ((v11 & 1) != 0)
    v16 = 3;
  v18 = (8 * (unsigned __int16)(v11 >> v16)) & 0xFFFFF8000007FFFFLL | ((v17 & 0xFFFFFF) << 19);
  if ((v11 & 2) != 0)
    v19 = v18 | 2;
  else
    v19 = v14;
  sub_1C5544C30(a1, v19, a3);
  v46 = v48;
  v47 = 0x800000000;
  v21 = *(_QWORD *)(v20 + 32);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = *(unsigned __int8 *)(v22 + 4);
  if ((*(_BYTE *)(v22 + 8) & 2) == 0 || (v40 = *(_DWORD *)(v20 + 40), v40 == v23))
  {
    v24 = v23;
  }
  else
  {
    v41 = v40 - 1;
    v24 = v23;
    do
    {
      v42 = *(_DWORD *)(v21 + 32 * v23);
      if ((v42 & 0x10000FF) != 0x1000000)
        break;
      v24 += (v42 & 0x2000000) == 0;
      if (v41 == v23)
        break;
      ++v23;
    }
    while ((v42 & 0x2000000) == 0);
  }
  if (v24)
  {
    v25 = 0;
    v26 = 32 * v24;
    v27 = (int *)(v21 + 4);
    do
    {
      v29 = *v27;
      v27 += 8;
      v28 = v29;
      if (v25 >= HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v25 + 1, 4);
        v25 = v47;
      }
      *((_DWORD *)v46 + v25) = v28;
      v25 = v47 + 1;
      LODWORD(v47) = v47 + 1;
      v26 -= 32;
    }
    while (v26);
  }
  if ((v12 & 2) != 0)
  {
    v43 = 35;
    v44 = 19;
    if ((v12 & 4) == 0)
      v43 = 19;
    v45 = v12 >> v43;
    if ((v12 & 4) == 0)
      v44 = 3;
    if ((v12 & 1) != 0)
      v44 = 3;
    v31 = (8 * (unsigned __int16)(v12 >> v44)) & 0xFFFFF8000007FFFFLL | ((v45 & 0xFFFFFF) << 19) | 2;
  }
  else
  {
    v30 = 3;
    if ((v12 & 1) == 0)
      v30 = 19;
    v31 = v12 & 0x8000000000000000 | (8 * (v12 >> v30)) | 1;
  }
  v49 = v31;
  v50 = 0;
  (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*a1 + 32))(a1, 68, &v49, 1, 0, 0, 0);
  v33 = *(_DWORD *)(*(_QWORD *)(v32 + 32) + 4);
  v34 = 0x800000000000000;
  if ((v10 & 2) == 0)
    v34 = 0x8000000000000;
  if ((v34 & v10) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v32);
  v35 = v47;
  v36 = (unsigned __int16)(v10 >> 3) - (_DWORD)v47;
  if (v36)
  {
    if (v36 <= 1)
      v39 = 1;
    else
      v39 = (unsigned __int16)(v10 >> 3) - (_DWORD)v47;
    do
    {
      if (v35 >= HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v35 + 1, 4);
        v35 = v47;
      }
      *((_DWORD *)v46 + v35) = v33;
      v35 = v47 + 1;
      LODWORD(v47) = v47 + 1;
      --v39;
    }
    while (v39);
  }
  v37 = sub_1C5544D6C((uint64_t)a1, (uint64_t)a2, (int *)v46, v35);
  if (v46 != v48)
    free(v46);
  return v37;
}

uint64_t sub_1C5544C30(uint64_t *a1, uint64_t a2, int *a3)
{
  const char *v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = (void *)sub_1C54F0874(a3, a1[3]);
  v6 = sub_1C4825F50((unint64_t *)&v13);
  if ((_DWORD)v5 == 1)
  v7 = sub_1C4825F50((unint64_t *)&v12);
  if ((_DWORD)v8 == 1)
  {
    v11 = v7;
    v7 = v11;
  }
  v13 = v15;
  v14 = 0x800000000;
  sub_1C4825C80((unsigned int *)&v13, (v6 / v7), v12, 0);
  v9 = (*(uint64_t (**)(uint64_t *, uint64_t, void *, _QWORD, int *, uint64_t, _QWORD))(*a1 + 32))(a1, 74, v13, v14, a3, 1, 0);
  if (v13 != v15)
    free(v13);
  return v9;
}

uint64_t sub_1C5544D6C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  int v10;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[25];

  v19[24] = *MEMORY[0x1E0C80C00];
  v8 = 4 * a4;
  v17 = v19;
  v18 = 0x800000000;
  if ((unint64_t)(4 * a4) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, (4 * a4) >> 2, 24);
    v9 = v18;
    v11 = v17;
    v10 = v18;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = v19;
  }
  if (a4)
  {
    v12 = &v11[3 * v9];
    v13 = v8;
    do
    {
      v14 = *a3++;
      *v12 = v14;
      v12[4] = 0;
      v12 += 6;
      v13 -= 4;
    }
    while (v13);
    v10 = v18;
  }
  LODWORD(v18) = v10 + (v8 >> 2);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 32))(a1, 76, a2, 1, v11);
  if (v17 != v19)
    free(v17);
  return v15;
}

uint64_t sub_1C5544EB0(uint64_t *a1, unint64_t *a2, int *a3)
{
  uint64_t v6;
  int v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  v6 = a1[3];
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2;
  if (!v7)
    goto LABEL_6;
  if (v7 != 2 && (*(_DWORD *)a2 & 0x80000000) != 0)
  {
    v9 = *(_DWORD *)a2 & 0x7FFFFFFF;
    if (v9 < *(_DWORD *)(v6 + 432))
    {
      v8 = (unint64_t *)(*(_QWORD *)(v6 + 424) + 8 * v9);
LABEL_6:
      v10 = *v8;
      goto LABEL_8;
    }
  }
  v10 = 0;
LABEL_8:
  v11 = sub_1C54F0874(a3, v6);
  v28 = v30;
  v29 = 0x800000000;
  v12 = 3;
  if ((v11 & 1) == 0)
    v12 = 19;
  v13 = v11 & 0x8000000000000000 | (8 * (v11 >> v12)) | 1;
  v14 = 35;
  v15 = 19;
  if ((v11 & 4) == 0)
    v14 = 19;
  v16 = v11 >> v14;
  if ((v11 & 4) == 0)
    v15 = 3;
  if ((v11 & 1) != 0)
    v15 = 3;
  v17 = (8 * (unsigned __int16)(v11 >> v15)) & 0xFFFFF8000007FFFFLL | ((v16 & 0xFFFFFF) << 19);
  if ((v11 & 2) != 0)
    v18 = v17 | 2;
  else
    v18 = v13;
  sub_1C5544C30(a1, v18, a3);
  v20 = v19;
  v21 = 0;
  v22 = 0x800000000000000;
  if ((v10 & 2) == 0)
    v22 = 0x8000000000000;
  v23 = v22 & v10;
  if ((v22 & v10) != 0)
    goto LABEL_26;
  while (32 * (unsigned __int16)(v10 >> 3) != v21)
  {
    v24 = *(_DWORD *)(*((_QWORD *)v20 + 4) + v21 + 4);
    v25 = v29;
    if (v29 >= (unint64_t)HIDWORD(v29))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v29 + 1, 4);
      v25 = v29;
    }
    *((_DWORD *)v28 + v25) = v24;
    LODWORD(v29) = v29 + 1;
    v21 += 32;
    if (v23)
LABEL_26:
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v19);
  }
  v26 = sub_1C5544D6C((uint64_t)a1, (uint64_t)a2, (int *)v28, v29);
  if (v28 != v30)
    free(v28);
  return v26;
}

llvm::MachineFunction *sub_1C55450BC(_QWORD *a1, unsigned __int8 *a2)
{
  llvm::MachineFunction *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24[4];
  unsigned __int8 *v25;

  v4 = (llvm::MachineFunction *)a1[1];
  v5 = *(_QWORD *)(a1[2] + 8);
  v6 = (unsigned __int8 *)a1[4];
  v25 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v25, v6, 2);
  v7 = v5 + 9696;
  v8 = *((_QWORD *)v4 + 28);
  if (v8)
    *((_QWORD *)v4 + 28) = *(_QWORD *)v8;
  else
    v8 = sub_1C484358C((uint64_t)v4 + 128, 72, 3);
  v24[0] = v25;
  if (v25)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v25, v25, (uint64_t)v24);
    v25 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v8, v4, v7, v24, 0);
  if (v24[0])
    llvm::MetadataTracking::untrack((uint64_t)v24, v24[0]);
  if (v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  v9 = (unint64_t *)a1[6];
  v10 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v8 + 24) = v10;
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *(unsigned int *)(v8 + 40);
  if ((_DWORD)v12)
  {
    v17 = *(_QWORD *)(v8 + 32);
    v18 = *(_QWORD *)(v11 + 40);
    v19 = 32 * v12;
    do
    {
      if (!*(_BYTE *)v17)
      {
        v20 = *(unsigned int *)(v17 + 4);
        if ((int)v20 >= 0)
          v21 = (uint64_t *)(*(_QWORD *)(v18 + 272) + 8 * v20);
        else
          v21 = (uint64_t *)(*(_QWORD *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
        v22 = *v21;
        if (*v21)
        {
          v23 = *(_QWORD *)(v22 + 16);
          *(_QWORD *)(v22 + 16) = v17;
          *(_QWORD *)(v17 + 16) = v23;
          if ((*(_BYTE *)(v17 + 3) & 1) != 0)
          {
            *(_QWORD *)(v17 + 24) = v22;
          }
          else
          {
            *(_QWORD *)(v17 + 24) = 0;
            v21 = (uint64_t *)(v23 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v17 + 16) = v17;
          *(_QWORD *)(v17 + 24) = 0;
        }
        *v21 = v17;
      }
      v17 += 32;
      v19 -= 32;
    }
    while (v19);
  }
  v13 = *(_QWORD *)(v11 + 728);
  if (v13)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v13 + 24))(v13, v8);
  v14 = *v9 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v8 = v14 | *(_QWORD *)v8 & 7;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v14 + 8) = v8;
  *v9 = *v9 & 7 | v8;
  v15 = a1[7];
  if (v15)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 24))(v15, v8);
  v24[1] = 0;
  v24[2] = a2;
  LODWORD(v24[0]) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v8, v4, (const llvm::MachineOperand *)v24);
  return v4;
}

uint64_t sub_1C55452C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  llvm::MachineFunction *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  int v25;
  int v26;
  uint64_t v27;
  int GenericVirtualRegister;
  char v30;
  unint64_t v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int IncompleteVirtualRegister;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v6 = *(_DWORD *)(a2 + 8);
  v7 = (unint64_t *)a2;
  if (v6)
  {
    if (v6 == 2)
      goto LABEL_11;
    v8 = a1[3];
    if ((*(_DWORD *)a2 & 0x80000000) == 0)
      goto LABEL_11;
    v9 = *(_DWORD *)a2 & 0x7FFFFFFF;
    if (v9 >= *(_DWORD *)(v8 + 432))
      goto LABEL_11;
    v7 = (unint64_t *)(*(_QWORD *)(v8 + 424) + 8 * v9);
  }
  v10 = *v7;
  if ((v10 & 0xFFFFFFFFFFFFFFF9) == 0 || (v10 & 4) == 0)
  {
LABEL_11:
    v12 = (llvm::MachineFunction *)a1[1];
    v13 = *(_QWORD *)(a1[2] + 8);
    v14 = (unsigned __int8 *)a1[4];
    v65 = v14;
    if (v14)
      llvm::MetadataTracking::track((uint64_t)&v65, v14, 2);
    v15 = v13 + 5760;
    v16 = *((_QWORD *)v12 + 28);
    if (v16)
      *((_QWORD *)v12 + 28) = *(_QWORD *)v16;
    else
      v16 = sub_1C484358C((uint64_t)v12 + 128, 72, 3);
    *(_QWORD *)&v66 = v65;
    if (v65)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v65, v65, (uint64_t)&v66);
      v65 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v12, v15, (unsigned __int8 **)&v66, 0);
    if ((_QWORD)v66)
      llvm::MetadataTracking::untrack((uint64_t)&v66, (unsigned __int8 *)v66);
    if (v65)
      llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
    v17 = (unint64_t *)a1[6];
    v18 = *(_QWORD *)(a1[5] + 40);
    *(_QWORD *)(v16 + 24) = v18;
    v19 = *(_QWORD *)(v18 + 32);
    v20 = *(unsigned int *)(v16 + 40);
    if ((_DWORD)v20)
    {
      v47 = *(_QWORD *)(v16 + 32);
      v48 = *(_QWORD *)(v19 + 40);
      v49 = 32 * v20;
      do
      {
        if (!*(_BYTE *)v47)
        {
          v50 = *(unsigned int *)(v47 + 4);
          if ((int)v50 >= 0)
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 272) + 8 * v50);
          else
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
          v52 = *v51;
          if (*v51)
          {
            v53 = *(_QWORD *)(v52 + 16);
            *(_QWORD *)(v52 + 16) = v47;
            *(_QWORD *)(v47 + 16) = v53;
            if ((*(_BYTE *)(v47 + 3) & 1) != 0)
            {
              *(_QWORD *)(v47 + 24) = v52;
            }
            else
            {
              *(_QWORD *)(v47 + 24) = 0;
              v51 = (uint64_t *)(v53 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v47 + 16) = v47;
            *(_QWORD *)(v47 + 24) = 0;
          }
          *v51 = v47;
        }
        v47 += 32;
        v49 -= 32;
      }
      while (v49);
    }
    v21 = *(_QWORD *)(v19 + 728);
    if (v21)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 24))(v21, v16);
    v22 = *v17 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v16 = v22 | *(_QWORD *)v16 & 7;
    *(_QWORD *)(v16 + 8) = v17;
    *(_QWORD *)(v22 + 8) = v16;
    *v17 = *v17 & 7 | v16;
    v23 = a1[7];
    if (v23)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 24))(v23, v16);
    v64 = 0;
    v24 = (unsigned __int8 **)(v16 + 56);
    if (&v64 != (unsigned __int8 **)(v16 + 56))
    {
      if (*v24)
      {
        llvm::MetadataTracking::untrack(v16 + 56, *v24);
        v46 = v64;
        *v24 = v64;
        if (v46)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v64, v46, v16 + 56);
          v64 = 0;
        }
      }
      else
      {
        *v24 = 0;
      }
    }
    v25 = *(_DWORD *)(a2 + 8);
    if (v25 == 1)
    {
      v26 = *(_DWORD *)a2;
      *((_QWORD *)&v66 + 1) = 0;
      v67 = 0;
      v68 = 0;
      LODWORD(v66) = 0x1000000;
      DWORD1(v66) = v26;
    }
    else
    {
      v27 = a1[3];
      if (v25)
      {
        if (v25 != 2)
          goto LABEL_36;
        v54 = *(_QWORD *)a2;
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v27, (unsigned __int8 *)&unk_1C8725DB3, 0);
        *(_QWORD *)(*(_QWORD *)(v27 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v54 & 0xFFFFFFFFFFFFFFFBLL;
        v56 = *(_QWORD *)(v27 + 8);
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
        *((_QWORD *)&v66 + 1) = 0;
        v67 = 0;
        v68 = 0;
        DWORD1(v66) = IncompleteVirtualRegister;
      }
      else
      {
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v27, *(_QWORD *)a2, (unsigned __int8 *)&unk_1C8725DB3, 0);
        *((_QWORD *)&v66 + 1) = 0;
        v67 = 0;
        v68 = 0;
        DWORD1(v66) = GenericVirtualRegister;
      }
      LODWORD(v66) = 0x1000000;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v12, (const llvm::MachineOperand *)&v66);
LABEL_36:
    LODWORD(v66) = 2;
    *((_QWORD *)&v66 + 1) = 0;
    v67 = a3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v12, (const llvm::MachineOperand *)&v66);
    return (uint64_t)v12;
  }
  v30 = 3;
  if ((v10 & 1) == 0)
    v30 = 19;
  v31 = v10 >> v30;
  if ((v10 & 2) != 0)
    v32 = (v10 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v31) | 2;
  else
    v32 = v10 & 0x8000000000000000 | (8 * v31) | 1;
  v33 = (llvm::MachineFunction *)a1[1];
  v34 = *(_QWORD *)(a1[2] + 8);
  v35 = (unsigned __int8 *)a1[4];
  v65 = v35;
  if (v35)
    llvm::MetadataTracking::track((uint64_t)&v65, v35, 2);
  v36 = v34 + 5760;
  v37 = *((_QWORD *)v33 + 28);
  if (v37)
    *((_QWORD *)v33 + 28) = *(_QWORD *)v37;
  else
    v37 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
  *(_QWORD *)&v66 = v65;
  if (v65)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v65, v65, (uint64_t)&v66);
    v65 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v37, v33, v36, (unsigned __int8 **)&v66, 0);
  if ((_QWORD)v66)
    llvm::MetadataTracking::untrack((uint64_t)&v66, (unsigned __int8 *)v66);
  if (v65)
    llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
  v38 = (unint64_t *)a1[6];
  v39 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v37 + 24) = v39;
  v40 = *(_QWORD *)(v39 + 32);
  v41 = *(unsigned int *)(v37 + 40);
  if ((_DWORD)v41)
  {
    v57 = *(_QWORD *)(v37 + 32);
    v58 = *(_QWORD *)(v40 + 40);
    v59 = 32 * v41;
    do
    {
      if (!*(_BYTE *)v57)
      {
        v60 = *(unsigned int *)(v57 + 4);
        if ((int)v60 >= 0)
          v61 = (uint64_t *)(*(_QWORD *)(v58 + 272) + 8 * v60);
        else
          v61 = (uint64_t *)(*(_QWORD *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
        v62 = *v61;
        if (*v61)
        {
          v63 = *(_QWORD *)(v62 + 16);
          *(_QWORD *)(v62 + 16) = v57;
          *(_QWORD *)(v57 + 16) = v63;
          if ((*(_BYTE *)(v57 + 3) & 1) != 0)
          {
            *(_QWORD *)(v57 + 24) = v62;
          }
          else
          {
            *(_QWORD *)(v57 + 24) = 0;
            v61 = (uint64_t *)(v63 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v57 + 16) = v57;
          *(_QWORD *)(v57 + 24) = 0;
        }
        *v61 = v57;
      }
      v57 += 32;
      v59 -= 32;
    }
    while (v59);
  }
  v42 = *(_QWORD *)(v40 + 728);
  if (v42)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 24))(v42, v37);
  v43 = *v38 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = v43 | *(_QWORD *)v37 & 7;
  *(_QWORD *)(v37 + 8) = v38;
  *(_QWORD *)(v43 + 8) = v37;
  *v38 = *v38 & 7 | v37;
  v44 = a1[7];
  if (v44)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v44 + 24))(v44, v37);
  v45 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[3], v32, (unsigned __int8 *)&unk_1C8725DB3, 0);
  *((_QWORD *)&v66 + 1) = 0;
  v67 = 0;
  v68 = 0;
  LODWORD(v66) = 0x1000000;
  DWORD1(v66) = v45;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v33, (const llvm::MachineOperand *)&v66);
  LODWORD(v66) = 2;
  *((_QWORD *)&v66 + 1) = 0;
  v67 = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v33, (const llvm::MachineOperand *)&v66);
  *(_QWORD *)&v66 = v33;
  *((_QWORD *)&v66 + 1) = v37;
  LODWORD(v67) = 1;
  return sub_1C5545898(a1, a2, &v66);
}

uint64_t sub_1C5545898(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[25];

  v16[24] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 8);
  v7 = (unint64_t *)a2;
  if (!v6)
    goto LABEL_6;
  if (v6 != 2)
  {
    v8 = a1[3];
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
    {
      v9 = *(_DWORD *)a2 & 0x7FFFFFFF;
      if (v9 < *(_DWORD *)(v8 + 432))
      {
        v7 = (unint64_t *)(*(_QWORD *)(v8 + 424) + 8 * v9);
LABEL_6:
        v10 = *v7;
        goto LABEL_8;
      }
    }
  }
  v10 = 0;
LABEL_8:
  v11 = 0x800000000000000;
  if ((v10 & 2) == 0)
    v11 = 0x8000000000000;
  if ((v11 & v10) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  v14 = v16;
  v15 = 0x800000000;
  sub_1C5548D54((char *)&v14, (unsigned __int16)(v10 >> 3), a3);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, void *, _QWORD, _QWORD))(*a1 + 32))(a1, 77, a2, 1, v14, v15, 0);
  if (v14 != v16)
    free(v14);
  return v12;
}

uint64_t sub_1C55459DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  llvm::MachineFunction *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  int v25;
  int v26;
  uint64_t v27;
  int GenericVirtualRegister;
  char v30;
  unint64_t v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int IncompleteVirtualRegister;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v6 = *(_DWORD *)(a2 + 8);
  v7 = (unint64_t *)a2;
  if (v6)
  {
    if (v6 == 2)
      goto LABEL_11;
    v8 = a1[3];
    if ((*(_DWORD *)a2 & 0x80000000) == 0)
      goto LABEL_11;
    v9 = *(_DWORD *)a2 & 0x7FFFFFFF;
    if (v9 >= *(_DWORD *)(v8 + 432))
      goto LABEL_11;
    v7 = (unint64_t *)(*(_QWORD *)(v8 + 424) + 8 * v9);
  }
  v10 = *v7;
  if ((v10 & 0xFFFFFFFFFFFFFFF9) == 0 || (v10 & 4) == 0)
  {
LABEL_11:
    v12 = (llvm::MachineFunction *)a1[1];
    v13 = *(_QWORD *)(a1[2] + 8);
    v14 = (unsigned __int8 *)a1[4];
    v65 = v14;
    if (v14)
      llvm::MetadataTracking::track((uint64_t)&v65, v14, 2);
    v15 = v13 + 5808;
    v16 = *((_QWORD *)v12 + 28);
    if (v16)
      *((_QWORD *)v12 + 28) = *(_QWORD *)v16;
    else
      v16 = sub_1C484358C((uint64_t)v12 + 128, 72, 3);
    *(_QWORD *)&v66 = v65;
    if (v65)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v65, v65, (uint64_t)&v66);
      v65 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v12, v15, (unsigned __int8 **)&v66, 0);
    if ((_QWORD)v66)
      llvm::MetadataTracking::untrack((uint64_t)&v66, (unsigned __int8 *)v66);
    if (v65)
      llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
    v17 = (unint64_t *)a1[6];
    v18 = *(_QWORD *)(a1[5] + 40);
    *(_QWORD *)(v16 + 24) = v18;
    v19 = *(_QWORD *)(v18 + 32);
    v20 = *(unsigned int *)(v16 + 40);
    if ((_DWORD)v20)
    {
      v47 = *(_QWORD *)(v16 + 32);
      v48 = *(_QWORD *)(v19 + 40);
      v49 = 32 * v20;
      do
      {
        if (!*(_BYTE *)v47)
        {
          v50 = *(unsigned int *)(v47 + 4);
          if ((int)v50 >= 0)
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 272) + 8 * v50);
          else
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
          v52 = *v51;
          if (*v51)
          {
            v53 = *(_QWORD *)(v52 + 16);
            *(_QWORD *)(v52 + 16) = v47;
            *(_QWORD *)(v47 + 16) = v53;
            if ((*(_BYTE *)(v47 + 3) & 1) != 0)
            {
              *(_QWORD *)(v47 + 24) = v52;
            }
            else
            {
              *(_QWORD *)(v47 + 24) = 0;
              v51 = (uint64_t *)(v53 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v47 + 16) = v47;
            *(_QWORD *)(v47 + 24) = 0;
          }
          *v51 = v47;
        }
        v47 += 32;
        v49 -= 32;
      }
      while (v49);
    }
    v21 = *(_QWORD *)(v19 + 728);
    if (v21)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 24))(v21, v16);
    v22 = *v17 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v16 = v22 | *(_QWORD *)v16 & 7;
    *(_QWORD *)(v16 + 8) = v17;
    *(_QWORD *)(v22 + 8) = v16;
    *v17 = *v17 & 7 | v16;
    v23 = a1[7];
    if (v23)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 24))(v23, v16);
    v64 = 0;
    v24 = (unsigned __int8 **)(v16 + 56);
    if (&v64 != (unsigned __int8 **)(v16 + 56))
    {
      if (*v24)
      {
        llvm::MetadataTracking::untrack(v16 + 56, *v24);
        v46 = v64;
        *v24 = v64;
        if (v46)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v64, v46, v16 + 56);
          v64 = 0;
        }
      }
      else
      {
        *v24 = 0;
      }
    }
    v25 = *(_DWORD *)(a2 + 8);
    if (v25 == 1)
    {
      v26 = *(_DWORD *)a2;
      *((_QWORD *)&v66 + 1) = 0;
      v67 = 0;
      v68 = 0;
      LODWORD(v66) = 0x1000000;
      DWORD1(v66) = v26;
    }
    else
    {
      v27 = a1[3];
      if (v25)
      {
        if (v25 != 2)
          goto LABEL_36;
        v54 = *(_QWORD *)a2;
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v27, (unsigned __int8 *)&unk_1C8725DB3, 0);
        *(_QWORD *)(*(_QWORD *)(v27 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v54 & 0xFFFFFFFFFFFFFFFBLL;
        v56 = *(_QWORD *)(v27 + 8);
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
        *((_QWORD *)&v66 + 1) = 0;
        v67 = 0;
        v68 = 0;
        DWORD1(v66) = IncompleteVirtualRegister;
      }
      else
      {
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v27, *(_QWORD *)a2, (unsigned __int8 *)&unk_1C8725DB3, 0);
        *((_QWORD *)&v66 + 1) = 0;
        v67 = 0;
        v68 = 0;
        DWORD1(v66) = GenericVirtualRegister;
      }
      LODWORD(v66) = 0x1000000;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v12, (const llvm::MachineOperand *)&v66);
LABEL_36:
    LODWORD(v66) = 3;
    *((_QWORD *)&v66 + 1) = 0;
    v67 = a3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v12, (const llvm::MachineOperand *)&v66);
    return (uint64_t)v12;
  }
  v30 = 3;
  if ((v10 & 1) == 0)
    v30 = 19;
  v31 = v10 >> v30;
  if ((v10 & 2) != 0)
    v32 = (v10 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v31) | 2;
  else
    v32 = v10 & 0x8000000000000000 | (8 * v31) | 1;
  v33 = (llvm::MachineFunction *)a1[1];
  v34 = *(_QWORD *)(a1[2] + 8);
  v35 = (unsigned __int8 *)a1[4];
  v65 = v35;
  if (v35)
    llvm::MetadataTracking::track((uint64_t)&v65, v35, 2);
  v36 = v34 + 5808;
  v37 = *((_QWORD *)v33 + 28);
  if (v37)
    *((_QWORD *)v33 + 28) = *(_QWORD *)v37;
  else
    v37 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
  *(_QWORD *)&v66 = v65;
  if (v65)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v65, v65, (uint64_t)&v66);
    v65 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v37, v33, v36, (unsigned __int8 **)&v66, 0);
  if ((_QWORD)v66)
    llvm::MetadataTracking::untrack((uint64_t)&v66, (unsigned __int8 *)v66);
  if (v65)
    llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
  v38 = (unint64_t *)a1[6];
  v39 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v37 + 24) = v39;
  v40 = *(_QWORD *)(v39 + 32);
  v41 = *(unsigned int *)(v37 + 40);
  if ((_DWORD)v41)
  {
    v57 = *(_QWORD *)(v37 + 32);
    v58 = *(_QWORD *)(v40 + 40);
    v59 = 32 * v41;
    do
    {
      if (!*(_BYTE *)v57)
      {
        v60 = *(unsigned int *)(v57 + 4);
        if ((int)v60 >= 0)
          v61 = (uint64_t *)(*(_QWORD *)(v58 + 272) + 8 * v60);
        else
          v61 = (uint64_t *)(*(_QWORD *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
        v62 = *v61;
        if (*v61)
        {
          v63 = *(_QWORD *)(v62 + 16);
          *(_QWORD *)(v62 + 16) = v57;
          *(_QWORD *)(v57 + 16) = v63;
          if ((*(_BYTE *)(v57 + 3) & 1) != 0)
          {
            *(_QWORD *)(v57 + 24) = v62;
          }
          else
          {
            *(_QWORD *)(v57 + 24) = 0;
            v61 = (uint64_t *)(v63 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v57 + 16) = v57;
          *(_QWORD *)(v57 + 24) = 0;
        }
        *v61 = v57;
      }
      v57 += 32;
      v59 -= 32;
    }
    while (v59);
  }
  v42 = *(_QWORD *)(v40 + 728);
  if (v42)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 24))(v42, v37);
  v43 = *v38 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = v43 | *(_QWORD *)v37 & 7;
  *(_QWORD *)(v37 + 8) = v38;
  *(_QWORD *)(v43 + 8) = v37;
  *v38 = *v38 & 7 | v37;
  v44 = a1[7];
  if (v44)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v44 + 24))(v44, v37);
  v45 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[3], v32, (unsigned __int8 *)&unk_1C8725DB3, 0);
  *((_QWORD *)&v66 + 1) = 0;
  v67 = 0;
  v68 = 0;
  LODWORD(v66) = 0x1000000;
  DWORD1(v66) = v45;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v33, (const llvm::MachineOperand *)&v66);
  LODWORD(v66) = 3;
  *((_QWORD *)&v66 + 1) = 0;
  v67 = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v33, (const llvm::MachineOperand *)&v66);
  *(_QWORD *)&v66 = v33;
  *((_QWORD *)&v66 + 1) = v37;
  LODWORD(v67) = 1;
  return sub_1C5545898(a1, a2, &v66);
}

uint64_t sub_1C5545FB0(llvm::ConstantInt *****a1, uint64_t a2, llvm::LLVMContext *a3)
{
  llvm::ValueHandleBase *v5;

  v5 = llvm::ConstantInt::get(***a1[1], a3, a3);
  return ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, llvm::ValueHandleBase *))(*a1)[2])(a1, a2, v5);
}

uint64_t sub_1C5545FFC(uint64_t a1, unint64_t *a2, double a3)
{
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  llvm::ConstantFP *v10;
  int v11;
  const llvm::APFloat *v12;
  llvm::APFloatBase *v13;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a2 + 2);
  v6 = a2;
  if (v5)
  {
    if (v5 == 2
      || (v7 = *(_QWORD *)(a1 + 24), (*(_DWORD *)a2 & 0x80000000) == 0)
      || (v8 = *(_DWORD *)a2 & 0x7FFFFFFF, v8 >= *(_DWORD *)(v7 + 432)))
    {
      v9 = 0;
      v10 = ****(llvm::ConstantFP *****)(a1 + 8);
      goto LABEL_12;
    }
    v6 = (unint64_t *)(*(_QWORD *)(v7 + 424) + 8 * v8);
  }
  v9 = *v6;
  v10 = ****(llvm::ConstantFP *****)(a1 + 8);
  if ((v9 & 1) != 0)
  {
    v11 = v9 >> 3;
    goto LABEL_14;
  }
  if ((v9 & 4) == 0)
  {
LABEL_12:
    v11 = (unsigned __int16)(v9 >> 3);
    goto LABEL_14;
  }
  if ((v9 & 2) != 0)
    v11 = (unsigned __int16)(v9 >> 19);
  else
    v11 = v9 >> 19;
LABEL_14:
  sub_1C554CD98(v11, (uint64_t)v15, *(const llvm::APInt **)&a3);
  v13 = llvm::ConstantFP::get(v10, (llvm::LLVMContext *)v15, v12);
  if ((_UNKNOWN *)v16 == &unk_1C866F1C0)
  {
    sub_1C4773C74(v17);
  }
  else if ((*(_DWORD *)(v16 + 8) - 64) <= 0xFFFFFF7F && v17[0])
  {
    MEMORY[0x1CAA32F9C](v17[0], 0x1000C8000313F17);
  }
  return (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)a1 + 24))(a1, a2, v13);
}

llvm::MachineFunction *sub_1C5546168(_QWORD *a1, int *a2, uint64_t a3)
{
  llvm::MachineFunction *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = (llvm::MachineFunction *)a1[1];
  v7 = *(_QWORD *)(a1[2] + 8);
  v8 = (unsigned __int8 *)a1[4];
  v30 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v30, v8, 2);
  v9 = v7 + 5472;
  v10 = *((_QWORD *)v6 + 28);
  if (v10)
    *((_QWORD *)v6 + 28) = *(_QWORD *)v10;
  else
    v10 = sub_1C484358C((uint64_t)v6 + 128, 72, 3);
  v31 = v30;
  if (v30)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v30, v30, (uint64_t)&v31);
    v30 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v10, v6, v9, &v31, 0);
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  v11 = (unint64_t *)a1[6];
  v12 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v10 + 24) = v12;
  v13 = *(_QWORD *)(v12 + 32);
  v14 = *(unsigned int *)(v10 + 40);
  if ((_DWORD)v14)
  {
    v21 = *(_QWORD *)(v10 + 32);
    v22 = *(_QWORD *)(v13 + 40);
    v23 = 32 * v14;
    do
    {
      if (!*(_BYTE *)v21)
      {
        v24 = *(unsigned int *)(v21 + 4);
        if ((int)v24 >= 0)
          v25 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
        else
          v25 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
        v26 = *v25;
        if (*v25)
        {
          v27 = *(_QWORD *)(v26 + 16);
          *(_QWORD *)(v26 + 16) = v21;
          *(_QWORD *)(v21 + 16) = v27;
          if ((*(_BYTE *)(v21 + 3) & 1) != 0)
          {
            *(_QWORD *)(v21 + 24) = v26;
          }
          else
          {
            *(_QWORD *)(v21 + 24) = 0;
            v25 = (uint64_t *)(v27 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v21 + 16) = v21;
          *(_QWORD *)(v21 + 24) = 0;
        }
        *v25 = v21;
      }
      v21 += 32;
      v23 -= 32;
    }
    while (v23);
  }
  v15 = *(_QWORD *)(v13 + 728);
  if (v15)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 24))(v15, v10);
  v16 = *v11 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = v16 | *(_QWORD *)v10 & 7;
  *(_QWORD *)(v10 + 8) = v11;
  *(_QWORD *)(v16 + 8) = v10;
  *v11 = *v11 & 7 | v10;
  v17 = a1[7];
  if (v17)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 24))(v17, v10);
  v18 = a2[4];
  switch(v18)
  {
    case 0:
      v19 = *a2;
LABEL_18:
      v32 = 0;
      v33 = 0;
      LODWORD(v31) = 0;
      HIDWORD(v31) = v19;
      v34 = 0;
      break;
    case 1:
      v19 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 4);
      goto LABEL_18;
    case 2:
      v28 = *a2;
      LODWORD(v31) = 18;
      v32 = 0;
      LODWORD(v33) = v28;
      break;
    case 3:
      v29 = *(_QWORD *)a2;
      LODWORD(v31) = 1;
      v32 = 0;
      v33 = v29;
      break;
    default:
      goto LABEL_20;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v6, (const llvm::MachineOperand *)&v31);
LABEL_20:
  v32 = 0;
  v33 = a3;
  LODWORD(v31) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v6, (const llvm::MachineOperand *)&v31);
  return v6;
}

llvm::MachineFunction *sub_1C55463F0(_QWORD *a1, int *a2, int *a3, __int128 *a4, char a5, __int16 a6, _OWORD *a7)
{
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v21;
  uint64_t v22;

  v12 = a2[2];
  v13 = a2;
  if (v12)
  {
    if (v12 == 2
      || (v14 = a1[3], (*a2 & 0x80000000) == 0)
      || (v15 = *a2 & 0x7FFFFFFF, v15 >= *(_DWORD *)(v14 + 432)))
    {
      v16 = 0;
      goto LABEL_8;
    }
    v13 = (int *)(*(_QWORD *)(v14 + 424) + 8 * v15);
  }
  v16 = *(_QWORD *)v13;
LABEL_8:
  v17 = a6 | 1;
  v21 = *a4;
  v22 = *((_QWORD *)a4 + 2);
  v18 = sub_1C484358C(a1[1] + 128, 80, 3);
  *(_OWORD *)v18 = v21;
  *(_QWORD *)(v18 + 16) = v22;
  *(_QWORD *)(v18 + 24) = v16;
  *(_WORD *)(v18 + 32) = v17;
  *(_BYTE *)(v18 + 34) = a5;
  v19 = a7[1];
  *(_OWORD *)(v18 + 40) = *a7;
  *(_OWORD *)(v18 + 56) = v19;
  *(_QWORD *)(v18 + 72) = 0;
  *(_WORD *)(v18 + 36) = 1;
  return sub_1C55464EC(a1, 0x5Au, a2, a3, (llvm::MachineMemOperand *)v18);
}

llvm::MachineFunction *sub_1C55464EC(_QWORD *a1, unsigned int a2, int *a3, int *a4, llvm::MachineMemOperand *a5)
{
  llvm::MachineFunction *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v27;
  int GenericVirtualRegister;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int IncompleteVirtualRegister;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v10 = (llvm::MachineFunction *)a1[1];
  v11 = *(_QWORD *)(a1[2] + 8);
  v12 = (unsigned __int8 *)a1[4];
  v41 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v41, v12, 2);
  v13 = v11 + 48 * a2;
  v14 = *((_QWORD *)v10 + 28);
  if (v14)
    *((_QWORD *)v10 + 28) = *(_QWORD *)v14;
  else
    v14 = sub_1C484358C((uint64_t)v10 + 128, 72, 3);
  v42 = v41;
  if (v41)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v41, v41, (uint64_t)&v42);
    v41 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v14, v10, v13, &v42, 0);
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  if (v41)
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  v15 = (unint64_t *)a1[6];
  v16 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v14 + 24) = v16;
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v18)
  {
    v29 = *(_QWORD *)(v14 + 32);
    v30 = *(_QWORD *)(v17 + 40);
    v31 = 32 * v18;
    do
    {
      if (!*(_BYTE *)v29)
      {
        v32 = *(unsigned int *)(v29 + 4);
        if ((int)v32 >= 0)
          v33 = (uint64_t *)(*(_QWORD *)(v30 + 272) + 8 * v32);
        else
          v33 = (uint64_t *)(*(_QWORD *)(v30 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
        v34 = *v33;
        if (*v33)
        {
          v35 = *(_QWORD *)(v34 + 16);
          *(_QWORD *)(v34 + 16) = v29;
          *(_QWORD *)(v29 + 16) = v35;
          if ((*(_BYTE *)(v29 + 3) & 1) != 0)
          {
            *(_QWORD *)(v29 + 24) = v34;
          }
          else
          {
            *(_QWORD *)(v29 + 24) = 0;
            v33 = (uint64_t *)(v35 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v29 + 16) = v29;
          *(_QWORD *)(v29 + 24) = 0;
        }
        *v33 = v29;
      }
      v29 += 32;
      v31 -= 32;
    }
    while (v31);
  }
  v19 = *(_QWORD *)(v17 + 728);
  if (v19)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v19 + 24))(v19, v14);
  v20 = *v15 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = v20 | *(_QWORD *)v14 & 7;
  *(_QWORD *)(v14 + 8) = v15;
  *(_QWORD *)(v20 + 8) = v14;
  *v15 = *v15 & 7 | v14;
  v21 = a1[7];
  if (v21)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 24))(v21, v14);
  v22 = a3[2];
  if (v22 == 1)
  {
    v23 = *a3;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    LODWORD(v42) = 0x1000000;
    HIDWORD(v42) = v23;
LABEL_18:
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v10, (const llvm::MachineOperand *)&v42);
    goto LABEL_19;
  }
  v27 = a1[3];
  if (!v22)
  {
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v27, *(_QWORD *)a3, (unsigned __int8 *)&unk_1C8725DB3, 0);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    HIDWORD(v42) = GenericVirtualRegister;
LABEL_27:
    LODWORD(v42) = 0x1000000;
    goto LABEL_18;
  }
  if (v22 == 2)
  {
    v37 = *(_QWORD *)a3;
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v27, (unsigned __int8 *)&unk_1C8725DB3, 0);
    *(_QWORD *)(*(_QWORD *)(v27 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v37 & 0xFFFFFFFFFFFFFFFBLL;
    v39 = *(_QWORD *)(v27 + 8);
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    HIDWORD(v42) = IncompleteVirtualRegister;
    goto LABEL_27;
  }
LABEL_19:
  v24 = a4[4];
  switch(v24)
  {
    case 0:
      v25 = *a4;
LABEL_21:
      v43 = 0;
      v44 = 0;
      LODWORD(v42) = 0;
      HIDWORD(v42) = v25;
      v45 = 0;
      break;
    case 1:
      v25 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 32) + 4);
      goto LABEL_21;
    case 2:
      v36 = *a4;
      LODWORD(v42) = 18;
      v43 = 0;
      LODWORD(v44) = v36;
      break;
    case 3:
      v40 = *(_QWORD *)a4;
      LODWORD(v42) = 1;
      v43 = 0;
      v44 = v40;
      break;
    default:
      goto LABEL_23;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v10, (const llvm::MachineOperand *)&v42);
LABEL_23:
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v14, v10, a5);
  return v10;
}

llvm::MachineFunction *sub_1C5546848(_QWORD *a1, int *a2, int *a3, llvm::MachineMemOperand *a4)
{
  llvm::MachineFunction *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = (llvm::MachineFunction *)a1[1];
  v9 = *(_QWORD *)(a1[2] + 8);
  v10 = (unsigned __int8 *)a1[4];
  v36 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v36, v10, 2);
  v11 = v9 + 4608;
  v12 = *((_QWORD *)v8 + 28);
  if (v12)
    *((_QWORD *)v8 + 28) = *(_QWORD *)v12;
  else
    v12 = sub_1C484358C((uint64_t)v8 + 128, 72, 3);
  v37 = v36;
  if (v36)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v36, v36, (uint64_t)&v37);
    v36 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v12, v8, v11, &v37, 0);
  if (v37)
    llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  v13 = (unint64_t *)a1[6];
  v14 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v12 + 24) = v14;
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(unsigned int *)(v12 + 40);
  if ((_DWORD)v16)
  {
    v25 = *(_QWORD *)(v12 + 32);
    v26 = *(_QWORD *)(v15 + 40);
    v27 = 32 * v16;
    do
    {
      if (!*(_BYTE *)v25)
      {
        v28 = *(unsigned int *)(v25 + 4);
        if ((int)v28 >= 0)
          v29 = (uint64_t *)(*(_QWORD *)(v26 + 272) + 8 * v28);
        else
          v29 = (uint64_t *)(*(_QWORD *)(v26 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
        v30 = *v29;
        if (*v29)
        {
          v31 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 16) = v25;
          *(_QWORD *)(v25 + 16) = v31;
          if ((*(_BYTE *)(v25 + 3) & 1) != 0)
          {
            *(_QWORD *)(v25 + 24) = v30;
          }
          else
          {
            *(_QWORD *)(v25 + 24) = 0;
            v29 = (uint64_t *)(v31 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v25 + 16) = v25;
          *(_QWORD *)(v25 + 24) = 0;
        }
        *v29 = v25;
      }
      v25 += 32;
      v27 -= 32;
    }
    while (v27);
  }
  v17 = *(_QWORD *)(v15 + 728);
  if (v17)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 24))(v17, v12);
  v18 = *v13 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = v18 | *(_QWORD *)v12 & 7;
  *(_QWORD *)(v12 + 8) = v13;
  *(_QWORD *)(v18 + 8) = v12;
  *v13 = *v13 & 7 | v12;
  v19 = a1[7];
  if (v19)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v19 + 24))(v19, v12);
  v20 = a2[4];
  switch(v20)
  {
    case 0:
      v21 = *a2;
LABEL_18:
      v38 = 0;
      v39 = 0;
      LODWORD(v37) = 0;
      HIDWORD(v37) = v21;
      v40 = 0;
LABEL_19:
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v8, (const llvm::MachineOperand *)&v37);
      break;
    case 1:
      v21 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 4);
      goto LABEL_18;
    case 2:
      v32 = *a2;
      LODWORD(v37) = 18;
      v38 = 0;
      LODWORD(v39) = v32;
      goto LABEL_19;
    case 3:
      v34 = *(_QWORD *)a2;
      LODWORD(v37) = 1;
      v38 = 0;
      v39 = v34;
      goto LABEL_19;
  }
  v22 = a3[4];
  switch(v22)
  {
    case 0:
      v23 = *a3;
LABEL_22:
      v38 = 0;
      v39 = 0;
      LODWORD(v37) = 0;
      HIDWORD(v37) = v23;
      v40 = 0;
      break;
    case 1:
      v23 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 32) + 4);
      goto LABEL_22;
    case 2:
      v33 = *a3;
      LODWORD(v37) = 18;
      v38 = 0;
      LODWORD(v39) = v33;
      break;
    case 3:
      v35 = *(_QWORD *)a3;
      LODWORD(v37) = 1;
      v38 = 0;
      v39 = v35;
      break;
    default:
      goto LABEL_24;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v8, (const llvm::MachineOperand *)&v37);
LABEL_24:
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v12, v8, a4);
  return v8;
}

uint64_t sub_1C5546B4C(uint64_t *a1, uint64_t a2, unint64_t *a3, int *a4)
{
  int v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  int v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v8 = *((_DWORD *)a3 + 2);
  v9 = a3;
  if (!v8)
    goto LABEL_6;
  if (v8 != 2)
  {
    v10 = a1[3];
    if ((*(_DWORD *)a3 & 0x80000000) != 0)
    {
      v11 = *(_DWORD *)a3 & 0x7FFFFFFF;
      if (v11 < *(_DWORD *)(v10 + 432))
      {
        v9 = (unint64_t *)(*(_QWORD *)(v10 + 424) + 8 * v11);
LABEL_6:
        v12 = *v9;
        goto LABEL_8;
      }
    }
  }
  v12 = 0;
LABEL_8:
  v29 = v12;
  v14 = sub_1C4825F50(&v29);
  if ((_DWORD)v13 == 1)
  v28 = sub_1C54F0874(a4, a1[3]);
  v15 = sub_1C4825F50((unint64_t *)&v28);
  if ((_DWORD)v16 == 1)
  {
    v27 = v15;
    v15 = v27;
  }
  if (v14 <= v15)
  {
    v17 = *((_DWORD *)a3 + 2);
    v18 = a3;
    if (v17)
    {
      if (v17 == 2
        || (v19 = a1[3], (*(_DWORD *)a3 & 0x80000000) == 0)
        || (v20 = *(_DWORD *)a3 & 0x7FFFFFFF, v20 >= *(_DWORD *)(v19 + 432)))
      {
        v21 = 0;
        goto LABEL_20;
      }
      v18 = (unint64_t *)(*(_QWORD *)(v19 + 424) + 8 * v20);
    }
    v21 = *v18;
LABEL_20:
    v29 = v21;
    v23 = sub_1C4825F50(&v29);
    if ((_DWORD)v22 == 1)
    v28 = sub_1C54F0874(a4, a1[3]);
    v25 = sub_1C4825F50((unint64_t *)&v28);
    if ((_DWORD)v24 == 1)
    if (v23 >= v25)
      a2 = 19;
    else
      a2 = 119;
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, int *, uint64_t, _QWORD))(*a1 + 32))(a1, a2, a3, 1, a4, 1, 0);
}

uint64_t sub_1C5546D14(uint64_t *a1, unint64_t *a2, int *a3)
{
  return sub_1C5546B4C(a1, 126, a2, a3);
}

uint64_t sub_1C5546D24(uint64_t a1, unint64_t *a2, __int128 *a3, unsigned int a4)
{
  int v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  const llvm::APInt *v13;
  llvm::ValueHandleBase *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2;
  if (v7)
  {
    if (v7 == 2
      || (v9 = *(_QWORD *)(a1 + 24), (*(_DWORD *)a2 & 0x80000000) == 0)
      || (v10 = *(_DWORD *)a2 & 0x7FFFFFFF, v10 >= *(_DWORD *)(v9 + 432)))
    {
      v11 = 0;
      *(_QWORD *)&v20 = 0;
      DWORD2(v20) = 0;
LABEL_11:
      v12 = (unsigned __int16)(v11 >> 3);
      goto LABEL_13;
    }
    v8 = (unint64_t *)(*(_QWORD *)(v9 + 424) + 8 * v10);
  }
  v11 = *v8;
  *(_QWORD *)&v20 = v11;
  DWORD2(v20) = 0;
  if ((v11 & 1) == 0)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v12 = (unsigned __int16)(v11 >> 19);
      else
        v12 = v11 >> 19;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  v12 = v11 >> 3;
LABEL_13:
  v26 = v12;
  if (v12 > 0x40)
  {
    v19 = a4;
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, 0, 0);
    a4 = v19;
  }
  else
  {
    v25 = 0;
  }
  sub_1C4912E54(&v25, 0, a4);
  v14 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a1 + 8), (llvm::LLVMContext *)&v25, v13);
  v15 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::ValueHandleBase *))(*(_QWORD *)a1 + 16))(a1, &v20, v14);
  v17 = v16;
  if (v26 >= 0x41 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  v25 = *a2;
  v26 = *((_DWORD *)a2 + 2);
  v20 = *a3;
  v21 = *((_DWORD *)a3 + 4);
  v22 = v15;
  v23 = v17;
  v24 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 65, &v25, 1, &v20, 2, 0);
}

uint64_t sub_1C5546EF4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v6 = sub_1C54F0874(a3, a1[3]);
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2;
  if (!v7)
    goto LABEL_6;
  if (v7 != 2)
  {
    v9 = a1[3];
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
    {
      v10 = *(_DWORD *)a2 & 0x7FFFFFFF;
      if (v10 < *(_DWORD *)(v9 + 432))
      {
        v8 = (uint64_t *)(*(_QWORD *)(v9 + 424) + 8 * v10);
LABEL_6:
        v11 = *v8;
        goto LABEL_8;
      }
    }
  }
  v11 = 0;
LABEL_8:
  if (v6 == v11)
  {
    v12 = 19;
  }
  else
  {
    v13 = (v6 & 0xFFFFFFFFFFFFFFF9) == 0 || (v6 & 2) == 0;
    if (v13 || (v6 & 4) != 0 || (v11 & 1) == 0)
    {
      if ((v11 & 0xFFFFFFFFFFFFFFF9) != 0 && (v11 & 2) != 0 && (v11 & 4) == 0 && (v6 & 1) != 0)
        v12 = 81;
      else
        v12 = 82;
    }
    else
    {
      v12 = 80;
    }
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, _QWORD))(*a1 + 32))(a1, v12, a2, 1, a3, 1, 0);
}

uint64_t sub_1C5546FE4(uint64_t *a1, unint64_t *a2, int *a3, uint64_t a4)
{
  int v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  llvm::MachineFunction *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int GenericVirtualRegister;
  int v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int IncompleteVirtualRegister;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v49 = sub_1C54F0874(a3, a1[3]);
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2;
  if (v8)
  {
    if (v8 == 2
      || (v10 = a1[3], (*(_DWORD *)a2 & 0x80000000) == 0)
      || (v11 = *(_DWORD *)a2 & 0x7FFFFFFF, v11 >= *(_DWORD *)(v10 + 432)))
    {
      v12 = 0;
      goto LABEL_8;
    }
    v9 = (unint64_t *)(*(_QWORD *)(v10 + 424) + 8 * v11);
  }
  v12 = *v9;
LABEL_8:
  v48 = v12;
  v13 = sub_1C4825F50(&v48);
  v15 = v14;
  if (v13 != sub_1C4825F50((unint64_t *)&v49) || v15 != v16)
  {
    v17 = (llvm::MachineFunction *)a1[1];
    v18 = *(_QWORD *)(a1[2] + 8);
    v19 = (unsigned __int8 *)a1[4];
    v50 = v19;
    if (v19)
      llvm::MetadataTracking::track((uint64_t)&v50, v19, 2);
    v20 = v18 + 3504;
    v21 = *((_QWORD *)v17 + 28);
    if (v21)
      *((_QWORD *)v17 + 28) = *(_QWORD *)v21;
    else
      v21 = sub_1C484358C((uint64_t)v17 + 128, 72, 3);
    v51 = v50;
    if (v50)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v50, v50, (uint64_t)&v51);
      v50 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v21, v17, v20, &v51, 0);
    if (v51)
      llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
    if (v50)
      llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
    v22 = (unint64_t *)a1[6];
    v23 = *(_QWORD *)(a1[5] + 40);
    *(_QWORD *)(v21 + 24) = v23;
    v24 = *(_QWORD *)(v23 + 32);
    v25 = *(unsigned int *)(v21 + 40);
    if ((_DWORD)v25)
    {
      v36 = *(_QWORD *)(v21 + 32);
      v37 = *(_QWORD *)(v24 + 40);
      v38 = 32 * v25;
      do
      {
        if (!*(_BYTE *)v36)
        {
          v39 = *(unsigned int *)(v36 + 4);
          if ((int)v39 >= 0)
            v40 = (uint64_t *)(*(_QWORD *)(v37 + 272) + 8 * v39);
          else
            v40 = (uint64_t *)(*(_QWORD *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
          v41 = *v40;
          if (*v40)
          {
            v42 = *(_QWORD *)(v41 + 16);
            *(_QWORD *)(v41 + 16) = v36;
            *(_QWORD *)(v36 + 16) = v42;
            if ((*(_BYTE *)(v36 + 3) & 1) != 0)
            {
              *(_QWORD *)(v36 + 24) = v41;
            }
            else
            {
              *(_QWORD *)(v36 + 24) = 0;
              v40 = (uint64_t *)(v42 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v36 + 16) = v36;
            *(_QWORD *)(v36 + 24) = 0;
          }
          *v40 = v36;
        }
        v36 += 32;
        v38 -= 32;
      }
      while (v38);
    }
    v26 = *(_QWORD *)(v24 + 728);
    if (v26)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 24))(v26, v21);
    v27 = *v22 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v21 = v27 | *(_QWORD *)v21 & 7;
    *(_QWORD *)(v21 + 8) = v22;
    *(_QWORD *)(v27 + 8) = v21;
    *v22 = *v22 & 7 | v21;
    v28 = a1[7];
    if (v28)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v28 + 24))(v28, v21);
    v29 = *((_DWORD *)a2 + 2);
    if (v29 == 1)
    {
      v30 = *(_DWORD *)a2;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      LODWORD(v51) = 0x1000000;
      HIDWORD(v51) = v30;
    }
    else
    {
      v31 = a1[3];
      if (v29)
      {
        if (v29 != 2)
        {
LABEL_33:
          v33 = a3[4];
          if (v33)
          {
            if (v33 != 1)
            {
              if (v33 == 2)
              {
                v43 = *a3;
                LODWORD(v51) = 18;
                v52 = 0;
                LODWORD(v53) = v43;
              }
              else
              {
                if (v33 != 3)
                  goto LABEL_37;
                v47 = *(_QWORD *)a3;
                LODWORD(v51) = 1;
                v52 = 0;
                v53 = v47;
              }
LABEL_36:
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v17, (const llvm::MachineOperand *)&v51);
LABEL_37:
              LODWORD(v51) = 1;
              v52 = 0;
              v53 = a4;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v17, (const llvm::MachineOperand *)&v51);
              return (uint64_t)v17;
            }
            v34 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 32) + 4);
          }
          else
          {
            v34 = *a3;
          }
          v52 = 0;
          v53 = 0;
          LODWORD(v51) = 0;
          HIDWORD(v51) = v34;
          v54 = 0;
          goto LABEL_36;
        }
        v44 = *a2;
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v31, (unsigned __int8 *)&unk_1C8725DB3, 0);
        *(_QWORD *)(*(_QWORD *)(v31 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v44 & 0xFFFFFFFFFFFFFFFBLL;
        v46 = *(_QWORD *)(v31 + 8);
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        HIDWORD(v51) = IncompleteVirtualRegister;
      }
      else
      {
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v31, *a2, (unsigned __int8 *)&unk_1C8725DB3, 0);
        v52 = 0;
        v53 = 0;
        v54 = 0;
        HIDWORD(v51) = GenericVirtualRegister;
      }
      LODWORD(v51) = 0x1000000;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v17, (const llvm::MachineOperand *)&v51);
    goto LABEL_33;
  }
  return sub_1C5546EF4(a1, (uint64_t *)a2, a3);
}

uint64_t sub_1C55473DC(uint64_t *a1, uint64_t a2, __int128 *a3, int *a4, unsigned int a5)
{
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a2 + 8);
  v11 = (uint64_t *)a2;
  if (v10)
  {
    if (v10 == 2
      || (v12 = a1[3], (*(_DWORD *)a2 & 0x80000000) == 0)
      || (v13 = *(_DWORD *)a2 & 0x7FFFFFFF, v13 >= *(_DWORD *)(v12 + 432)))
    {
      v14 = 0;
      goto LABEL_8;
    }
    v11 = (uint64_t *)(*(_QWORD *)(v12 + 424) + 8 * v13);
  }
  v14 = *v11;
LABEL_8:
  *(_QWORD *)&v21 = v14;
  v15 = sub_1C4825F50((unint64_t *)&v21);
  v17 = v16;
  v20 = sub_1C54F0874(a4, a1[3]);
  if (v15 == sub_1C4825F50((unint64_t *)&v20) && v17 == v18)
    return sub_1C5546EF4(a1, (uint64_t *)a2, a4);
  v21 = *a3;
  v22 = *((_DWORD *)a3 + 4);
  v23 = *(_OWORD *)a4;
  v24 = a4[4];
  v25 = a5;
  v26 = 3;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, _QWORD))(*a1 + 32))(a1, 75, a2, 1, &v21, 3, 0);
}

uint64_t sub_1C5547540(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = 0x800000000;
  sub_1C5548CC0((unsigned int *)&v8, a2, &a2[4 * a3]);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 74, v8, v9, a4, 1, 0);
  if (v8 != v10)
    free(v8);
  return v6;
}

uint64_t sub_1C554760C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  int v10;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[25];

  v19[24] = *MEMORY[0x1E0C80C00];
  v8 = 4 * a4;
  v17 = v19;
  v18 = 0x800000000;
  if ((unint64_t)(4 * a4) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, (4 * a4) >> 2, 24);
    v9 = v18;
    v11 = v17;
    v10 = v18;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = v19;
  }
  if (a4)
  {
    v12 = &v11[3 * v9];
    v13 = v8;
    do
    {
      v14 = *a3++;
      *v12 = v14;
      v12[4] = 0;
      v12 += 6;
      v13 -= 4;
    }
    while (v13);
    v10 = v18;
  }
  LODWORD(v18) = v10 + (v8 >> 2);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 32))(a1, 77, a2, 1, v11);
  if (v17 != v19)
    free(v17);
  return v15;
}

uint64_t sub_1C5547750(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  int v10;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[25];

  v19[24] = *MEMORY[0x1E0C80C00];
  v8 = 4 * a4;
  v17 = v19;
  v18 = 0x800000000;
  if ((unint64_t)(4 * a4) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, (4 * a4) >> 2, 24);
    v9 = v18;
    v11 = v17;
    v10 = v18;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = v19;
  }
  if (a4)
  {
    v12 = &v11[3 * v9];
    v13 = v8;
    do
    {
      v14 = *a3++;
      *v12 = v14;
      v12[4] = 0;
      v12 += 6;
      v13 -= 4;
    }
    while (v13);
    v10 = v18;
  }
  LODWORD(v18) = v10 + (v8 >> 2);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 32))(a1, 78, a2, 1, v11);
  if (v17 != v19)
    free(v17);
  return v15;
}

llvm::MachineFunction *sub_1C5547894(_QWORD *a1, _DWORD *a2, __int128 *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  llvm::MachineFunction *v18;
  _QWORD v20[2];
  int v21;
  unint64_t v22;
  const char *v23;
  int v24;
  unint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2[2];
  if (!v5)
    goto LABEL_6;
  if (v5 != 2)
  {
    v6 = a1[3];
    if ((*a2 & 0x80000000) != 0)
    {
      v7 = *a2 & 0x7FFFFFFF;
      if (v7 < *(_DWORD *)(v6 + 432))
      {
        a2 = (_DWORD *)(*(_QWORD *)(v6 + 424) + 8 * v7);
LABEL_6:
        v8 = *(_QWORD *)a2;
        goto LABEL_8;
      }
    }
  }
  v8 = 0;
LABEL_8:
  v27 = (void *)v8;
  LODWORD(v28) = 0;
  v9 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a1 + 32))(a1, 68, &v27, 1, 0, 0, 0);
  v11 = v10;
  v27 = (void *)513;
  LODWORD(v28) = 0;
  v12 = sub_1C5544694((uint64_t)a1, (unint64_t *)&v27, 0);
  v22 = v8;
  LODWORD(v23) = 0;
  v27 = v9;
  v28 = v11;
  v29 = 1;
  v30 = *a3;
  v31 = *((_DWORD *)a3 + 4);
  v32 = v12;
  v33 = v13;
  v34 = 1;
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a1 + 32))(a1, 204, &v22, 1, &v27, 3, 0);
  v16 = v14;
  v17 = 0x800000000000000;
  if ((v8 & 2) == 0)
    v17 = 0x8000000000000;
  if ((v17 & v8) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v14);
  v27 = &v29;
  v28 = 0x1000000000;
  sub_1C4893E04((char *)&v27, (unsigned __int16)(v8 >> 3), 0);
  v25 = v8;
  v26 = 0;
  v22 = v15;
  v23 = v16;
  v24 = 1;
  v20[0] = v9;
  v20[1] = v11;
  v21 = 1;
  v18 = sub_1C5547A94(a1, (uint64_t *)&v25, (int *)&v22, (int *)v20, v27, v28);
  if (v27 != &v29)
    free(v27);
  return v18;
}

llvm::MachineFunction *sub_1C5547A94(_QWORD *a1, uint64_t *a2, int *a3, int *a4, const void *a5, uint64_t a6)
{
  void *v12;
  void *v13;
  llvm::MachineFunction *v14;
  llvm::MachineInstr *v15;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  sub_1C54F0874(a3, a1[3]);
  sub_1C54F0874(a4, a1[3]);
  v12 = (void *)sub_1C484358C(a1[1] + 128, 4 * a6, 2);
  v13 = v12;
  if (a6)
    memmove(v12, a5, 4 * a6);
  v25 = *a2;
  v26 = *((_DWORD *)a2 + 2);
  v21 = *(_OWORD *)a3;
  v22 = a3[4];
  v23 = *(_OWORD *)a4;
  v24 = a4[4];
  v14 = (llvm::MachineFunction *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*a1 + 32))(a1, 206, &v25, 1, &v21, 2, 0);
  v17 = 19;
  v18 = 0;
  v19 = v13;
  v20 = a6;
  llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v17);
  return v14;
}

uint64_t sub_1C5547BE0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  int v10;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[25];

  v19[24] = *MEMORY[0x1E0C80C00];
  v8 = 4 * a4;
  v17 = v19;
  v18 = 0x800000000;
  if ((unint64_t)(4 * a4) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, (4 * a4) >> 2, 24);
    v9 = v18;
    v11 = v17;
    v10 = v18;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = v19;
  }
  if (a4)
  {
    v12 = &v11[3 * v9];
    v13 = v8;
    do
    {
      v14 = *a3++;
      *v12 = v14;
      v12[4] = 0;
      v12 += 6;
      v13 -= 4;
    }
    while (v13);
    v10 = v18;
  }
  LODWORD(v18) = v10 + (v8 >> 2);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 32))(a1, 79, a2, 1, v11);
  if (v17 != v19)
    free(v17);
  return v15;
}

llvm::MachineFunction *sub_1C5547D24(_QWORD *a1, int a2, int *a3, uint64_t a4, int a5)
{
  llvm::MachineFunction *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;

  v9 = (llvm::MachineFunction *)a1[1];
  v10 = *(_QWORD *)(a1[2] + 8);
  if (a5)
    v11 = 5616;
  else
    v11 = 5568;
  v12 = (unsigned __int8 *)a1[4];
  v36 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v36, v12, 2);
  v13 = v10 + v11;
  v14 = *((_QWORD *)v9 + 28);
  if (v14)
    *((_QWORD *)v9 + 28) = *(_QWORD *)v14;
  else
    v14 = sub_1C484358C((uint64_t)v9 + 128, 72, 3);
  v32 = v36;
  if (v36)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v36, v36, (uint64_t)&v32);
    v36 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v14, v9, v13, &v32, 0);
  if (v32)
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  v15 = (unint64_t *)a1[6];
  v16 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v14 + 24) = v16;
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v18)
  {
    v25 = *(_QWORD *)(v14 + 32);
    v26 = *(_QWORD *)(v17 + 40);
    v27 = 32 * v18;
    do
    {
      if (!*(_BYTE *)v25)
      {
        v28 = *(unsigned int *)(v25 + 4);
        if ((int)v28 >= 0)
          v29 = (uint64_t *)(*(_QWORD *)(v26 + 272) + 8 * v28);
        else
          v29 = (uint64_t *)(*(_QWORD *)(v26 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
        v30 = *v29;
        if (*v29)
        {
          v31 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 16) = v25;
          *(_QWORD *)(v25 + 16) = v31;
          if ((*(_BYTE *)(v25 + 3) & 1) != 0)
          {
            *(_QWORD *)(v25 + 24) = v30;
          }
          else
          {
            *(_QWORD *)(v25 + 24) = 0;
            v29 = (uint64_t *)(v31 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v25 + 16) = v25;
          *(_QWORD *)(v25 + 24) = 0;
        }
        *v29 = v25;
      }
      v25 += 32;
      v27 -= 32;
    }
    while (v27);
  }
  v19 = *(_QWORD *)(v17 + 728);
  if (v19)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v19 + 24))(v19, v14);
  v20 = *v15 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = v20 | *(_QWORD *)v14 & 7;
  *(_QWORD *)(v14 + 8) = v15;
  *(_QWORD *)(v20 + 8) = v14;
  *v15 = *v15 & 7 | v14;
  v21 = a1[7];
  if (v21)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 24))(v21, v14);
  if (a4)
  {
    v23 = 4 * a4;
    do
    {
      v24 = *a3++;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      LODWORD(v32) = 0x1000000;
      HIDWORD(v32) = v24;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v9, (const llvm::MachineOperand *)&v32);
      v23 -= 4;
    }
    while (v23);
  }
  LODWORD(v32) = 17;
  v33 = 0;
  LODWORD(v34) = a2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v9, (const llvm::MachineOperand *)&v32);
  return v9;
}

llvm::MachineFunction *sub_1C5547F8C(_QWORD *a1, int a2, int a3, int a4, int a5, int a6, llvm::MachineMemOperand *a7)
{
  llvm::MachineFunction *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;

  v14 = (llvm::MachineFunction *)a1[1];
  v15 = *(_QWORD *)(a1[2] + 8);
  v16 = (unsigned __int8 *)a1[4];
  v38 = v16;
  if (v16)
    llvm::MetadataTracking::track((uint64_t)&v38, v16, 2);
  v17 = v15 + 4704;
  v18 = *((_QWORD *)v14 + 28);
  if (v18)
    *((_QWORD *)v14 + 28) = *(_QWORD *)v18;
  else
    v18 = sub_1C484358C((uint64_t)v14 + 128, 72, 3);
  v34 = v38;
  if (v38)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v38, v38, (uint64_t)&v34);
    v38 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v18, v14, v17, &v34, 0);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  if (v38)
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  v19 = (unint64_t *)a1[6];
  v20 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v18 + 24) = v20;
  v21 = *(_QWORD *)(v20 + 32);
  v22 = *(unsigned int *)(v18 + 40);
  if ((_DWORD)v22)
  {
    v27 = *(_QWORD *)(v18 + 32);
    v28 = *(_QWORD *)(v21 + 40);
    v29 = 32 * v22;
    do
    {
      if (!*(_BYTE *)v27)
      {
        v30 = *(unsigned int *)(v27 + 4);
        if ((int)v30 >= 0)
          v31 = (uint64_t *)(*(_QWORD *)(v28 + 272) + 8 * v30);
        else
          v31 = (uint64_t *)(*(_QWORD *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
        v32 = *v31;
        if (*v31)
        {
          v33 = *(_QWORD *)(v32 + 16);
          *(_QWORD *)(v32 + 16) = v27;
          *(_QWORD *)(v27 + 16) = v33;
          if ((*(_BYTE *)(v27 + 3) & 1) != 0)
          {
            *(_QWORD *)(v27 + 24) = v32;
          }
          else
          {
            *(_QWORD *)(v27 + 24) = 0;
            v31 = (uint64_t *)(v33 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v27 + 16) = v27;
          *(_QWORD *)(v27 + 24) = 0;
        }
        *v31 = v27;
      }
      v27 += 32;
      v29 -= 32;
    }
    while (v29);
  }
  v23 = *(_QWORD *)(v21 + 728);
  if (v23)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 24))(v23, v18);
  v24 = *v19 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = v24 | *(_QWORD *)v18 & 7;
  *(_QWORD *)(v18 + 8) = v19;
  *(_QWORD *)(v24 + 8) = v18;
  *v19 = *v19 & 7 | v18;
  v25 = a1[7];
  if (v25)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 24))(v25, v18);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  LODWORD(v34) = 0x1000000;
  HIDWORD(v34) = a2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v14, (const llvm::MachineOperand *)&v34);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  LODWORD(v34) = 0x1000000;
  HIDWORD(v34) = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v14, (const llvm::MachineOperand *)&v34);
  v35 = 0;
  v36 = 0;
  LODWORD(v34) = 0;
  HIDWORD(v34) = a4;
  v37 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v14, (const llvm::MachineOperand *)&v34);
  v35 = 0;
  v36 = 0;
  LODWORD(v34) = 0;
  HIDWORD(v34) = a5;
  v37 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v14, (const llvm::MachineOperand *)&v34);
  v35 = 0;
  v36 = 0;
  LODWORD(v34) = 0;
  HIDWORD(v34) = a6;
  v37 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v14, (const llvm::MachineOperand *)&v34);
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v18, v14, a7);
  return v14;
}

llvm::MachineFunction *sub_1C554823C(_QWORD *a1, unsigned int a2, int *a3, int *a4, int *a5, llvm::MachineMemOperand *a6)
{
  llvm::MachineFunction *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  int GenericVirtualRegister;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int IncompleteVirtualRegister;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v12 = (llvm::MachineFunction *)a1[1];
  v13 = *(_QWORD *)(a1[2] + 8);
  v14 = (unsigned __int8 *)a1[4];
  v47 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v47, v14, 2);
  v15 = v13 + 48 * a2;
  v16 = *((_QWORD *)v12 + 28);
  if (v16)
    *((_QWORD *)v12 + 28) = *(_QWORD *)v16;
  else
    v16 = sub_1C484358C((uint64_t)v12 + 128, 72, 3);
  v48 = v47;
  if (v47)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v47, v47, (uint64_t)&v48);
    v47 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v12, v15, &v48, 0);
  if (v48)
    llvm::MetadataTracking::untrack((uint64_t)&v48, v48);
  if (v47)
    llvm::MetadataTracking::untrack((uint64_t)&v47, v47);
  v17 = (unint64_t *)a1[6];
  v18 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v16 + 24) = v18;
  v19 = *(_QWORD *)(v18 + 32);
  v20 = *(unsigned int *)(v16 + 40);
  if ((_DWORD)v20)
  {
    v33 = *(_QWORD *)(v16 + 32);
    v34 = *(_QWORD *)(v19 + 40);
    v35 = 32 * v20;
    do
    {
      if (!*(_BYTE *)v33)
      {
        v36 = *(unsigned int *)(v33 + 4);
        if ((int)v36 >= 0)
          v37 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * v36);
        else
          v37 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
        v38 = *v37;
        if (*v37)
        {
          v39 = *(_QWORD *)(v38 + 16);
          *(_QWORD *)(v38 + 16) = v33;
          *(_QWORD *)(v33 + 16) = v39;
          if ((*(_BYTE *)(v33 + 3) & 1) != 0)
          {
            *(_QWORD *)(v33 + 24) = v38;
          }
          else
          {
            *(_QWORD *)(v33 + 24) = 0;
            v37 = (uint64_t *)(v39 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v33 + 16) = v33;
          *(_QWORD *)(v33 + 24) = 0;
        }
        *v37 = v33;
      }
      v33 += 32;
      v35 -= 32;
    }
    while (v35);
  }
  v21 = *(_QWORD *)(v19 + 728);
  if (v21)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 24))(v21, v16);
  v22 = *v17 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = v22 | *(_QWORD *)v16 & 7;
  *(_QWORD *)(v16 + 8) = v17;
  *(_QWORD *)(v22 + 8) = v16;
  *v17 = *v17 & 7 | v16;
  v23 = a1[7];
  if (v23)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 24))(v23, v16);
  v24 = a3[2];
  if (v24 == 1)
  {
    v25 = *a3;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    LODWORD(v48) = 0x1000000;
    HIDWORD(v48) = v25;
LABEL_18:
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v12, (const llvm::MachineOperand *)&v48);
    goto LABEL_19;
  }
  v31 = a1[3];
  if (!v24)
  {
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v31, *(_QWORD *)a3, (unsigned __int8 *)&unk_1C8725DB3, 0);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    HIDWORD(v48) = GenericVirtualRegister;
LABEL_31:
    LODWORD(v48) = 0x1000000;
    goto LABEL_18;
  }
  if (v24 == 2)
  {
    v42 = *(_QWORD *)a3;
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v31, (unsigned __int8 *)&unk_1C8725DB3, 0);
    *(_QWORD *)(*(_QWORD *)(v31 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v42 & 0xFFFFFFFFFFFFFFFBLL;
    v44 = *(_QWORD *)(v31 + 8);
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    HIDWORD(v48) = IncompleteVirtualRegister;
    goto LABEL_31;
  }
LABEL_19:
  v26 = a4[4];
  switch(v26)
  {
    case 0:
      v27 = *a4;
LABEL_21:
      v49 = 0;
      v50 = 0;
      LODWORD(v48) = 0;
      HIDWORD(v48) = v27;
      v51 = 0;
LABEL_22:
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v12, (const llvm::MachineOperand *)&v48);
      break;
    case 1:
      v27 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 32) + 4);
      goto LABEL_21;
    case 2:
      v40 = *a4;
      LODWORD(v48) = 18;
      v49 = 0;
      LODWORD(v50) = v40;
      goto LABEL_22;
    case 3:
      v45 = *(_QWORD *)a4;
      LODWORD(v48) = 1;
      v49 = 0;
      v50 = v45;
      goto LABEL_22;
  }
  v28 = a5[4];
  switch(v28)
  {
    case 0:
      v29 = *a5;
LABEL_25:
      v49 = 0;
      v50 = 0;
      LODWORD(v48) = 0;
      HIDWORD(v48) = v29;
      v51 = 0;
      break;
    case 1:
      v29 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 1) + 32) + 4);
      goto LABEL_25;
    case 2:
      v41 = *a5;
      LODWORD(v48) = 18;
      v49 = 0;
      LODWORD(v50) = v41;
      break;
    case 3:
      v46 = *(_QWORD *)a5;
      LODWORD(v48) = 1;
      v49 = 0;
      v50 = v46;
      break;
    default:
      goto LABEL_27;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v12, (const llvm::MachineOperand *)&v48);
LABEL_27:
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v16, v12, a6);
  return v12;
}

uint64_t sub_1C5548620(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  int *v9;
  uint64_t *v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t *v21;
  int *v22;
  llvm::MachineFunction *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int GenericVirtualRegister;
  uint64_t v40;
  int IncompleteVirtualRegister;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  char v56;
  unsigned __int8 *v57;
  int v58;
  uint64_t (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  char v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v9 = a5;
  v11 = a3;
  if (a2 > 148)
  {
    if (a2 > 178)
    {
      if ((a2 - 195) >= 4)
      {
        if (a2 != 179 && a2 != 199)
          goto LABEL_21;
        goto LABEL_17;
      }
    }
    else if ((a2 - 149) >= 4 && (a2 - 153) >= 2)
    {
      if (a2 != 177)
        goto LABEL_21;
LABEL_17:
      v21 = a1 + 3;
      v22 = a5;
LABEL_20:
      sub_1C54F0874(v22, *v21);
      goto LABEL_21;
    }
LABEL_19:
    v21 = a1 + 3;
    sub_1C54F0874(a5, a1[3]);
    v22 = v9 + 6;
    goto LABEL_20;
  }
  v13 = (a2 - 45);
  if (v13 > 0x21)
    goto LABEL_16;
  if (((1 << (a2 - 45)) & 0x73C007) != 0)
    goto LABEL_19;
  if (v13 != 31)
  {
    if (v13 == 33)
    {
      v74 = (unsigned __int8 *)sub_1C54F0874(a5, a1[3]);
      v14 = sub_1C4825F50((unint64_t *)&v74);
      v16 = v15;
      v17 = *((_DWORD *)v11 + 2);
      if (v17)
      {
        if (v17 == 2
          || (v18 = a1[3], (*(_DWORD *)v11 & 0x80000000) == 0)
          || (v19 = *(_DWORD *)v11 & 0x7FFFFFFF, v19 >= *(_DWORD *)(v18 + 432)))
        {
          v51 = 0;
          goto LABEL_76;
        }
        v20 = (unint64_t *)(*(_QWORD *)(v18 + 424) + 8 * v19);
      }
      else
      {
        v20 = (unint64_t *)v11;
      }
      v51 = *v20;
      if ((v51 & 2) != 0)
      {
        v67 = 35;
        v68 = 19;
        if ((v51 & 4) == 0)
          v67 = 19;
        v69 = v51 >> v67;
        if ((v51 & 4) == 0)
          v68 = 3;
        if ((v51 & 1) != 0)
          v68 = 3;
        v57 = (unsigned __int8 *)((8 * (unsigned __int16)(v51 >> v68)) & 0xFFFFF8000007FFFFLL | ((v69 & 0xFFFFFF) << 19) | 2);
LABEL_79:
        v73 = v57;
        if (v14 == sub_1C4825F50((unint64_t *)&v73) && v16 == v58)
        {
          v59 = *(uint64_t (**)(void))(*a1 + 32);
          return v59();
        }
        goto LABEL_21;
      }
LABEL_76:
      v56 = 3;
      if ((v51 & 1) == 0)
        v56 = 19;
      v57 = (unsigned __int8 *)(v51 & 0x8000000000000000 | (8 * (v51 >> v56)) | 1);
      goto LABEL_79;
    }
LABEL_16:
    switch(a2)
    {
      case 118:
      case 119:
      case 124:
      case 126:
        goto LABEL_17;
      case 127:
      case 128:
      case 129:
        goto LABEL_19;
      case 136:
        v21 = a1 + 3;
        sub_1C54F0874(a5, a1[3]);
        sub_1C54F0874(v9 + 6, a1[3]);
        v22 = v9 + 12;
        goto LABEL_20;
      default:
        goto LABEL_21;
    }
    goto LABEL_21;
  }
  if (a6 == 1)
    return sub_1C5546EF4(a1, a3, a5);
  v52 = a1[3];
  v53 = *((_DWORD *)a3 + 2);
  if (v53)
  {
    if (v53 == 2)
      goto LABEL_21;
    if ((*(_DWORD *)a3 & 0x80000000) == 0)
      goto LABEL_21;
    v54 = *(_DWORD *)a3 & 0x7FFFFFFF;
    if (v54 >= *(_DWORD *)(v52 + 432))
      goto LABEL_21;
    v55 = (uint64_t *)(*(_QWORD *)(v52 + 424) + 8 * v54);
  }
  else
  {
    v55 = a3;
  }
  v60 = *v55;
  if ((v60 & 0xFFFFFFFFFFFFFFF9) != 0 && (v60 & 4) != 0)
  {
    sub_1C54F0874(a5, v52);
    v59 = *(uint64_t (**)(void))(*a1 + 32);
    return v59();
  }
LABEL_21:
  v71 = a6;
  v23 = (llvm::MachineFunction *)a1[1];
  v24 = *(_QWORD *)(a1[2] + 8);
  v25 = (unsigned __int8 *)a1[4];
  v73 = v25;
  if (v25)
    llvm::MetadataTracking::track((uint64_t)&v73, v25, 2);
  v26 = v24 + 48 * a2;
  v27 = *((_QWORD *)v23 + 28);
  if (v27)
    *((_QWORD *)v23 + 28) = *(_QWORD *)v27;
  else
    v27 = sub_1C484358C((uint64_t)v23 + 128, 72, 3);
  v74 = v73;
  if (v73)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v73, v73, (uint64_t)&v74);
    v73 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v27, v23, v26, &v74, 0);
  if (v74)
    llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
  if (v73)
    llvm::MetadataTracking::untrack((uint64_t)&v73, v73);
  v28 = (unint64_t *)a1[6];
  v29 = *(_QWORD *)(a1[5] + 40);
  *(_QWORD *)(v27 + 24) = v29;
  v30 = *(_QWORD *)(v29 + 32);
  v31 = *(unsigned int *)(v27 + 40);
  if ((_DWORD)v31)
  {
    v43 = *(_QWORD *)(v27 + 32);
    v44 = *(_QWORD *)(v30 + 40);
    v45 = 32 * v31;
    do
    {
      if (!*(_BYTE *)v43)
      {
        v46 = *(unsigned int *)(v43 + 4);
        if ((int)v46 >= 0)
          v47 = (uint64_t *)(*(_QWORD *)(v44 + 272) + 8 * v46);
        else
          v47 = (uint64_t *)(*(_QWORD *)(v44 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
        v48 = *v47;
        if (*v47)
        {
          v49 = *(_QWORD *)(v48 + 16);
          *(_QWORD *)(v48 + 16) = v43;
          *(_QWORD *)(v43 + 16) = v49;
          if ((*(_BYTE *)(v43 + 3) & 1) != 0)
          {
            *(_QWORD *)(v43 + 24) = v48;
          }
          else
          {
            *(_QWORD *)(v43 + 24) = 0;
            v47 = (uint64_t *)(v49 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v43 + 16) = v43;
          *(_QWORD *)(v43 + 24) = 0;
        }
        *v47 = v43;
      }
      v43 += 32;
      v45 -= 32;
    }
    while (v45);
  }
  v32 = *(_QWORD *)(v30 + 728);
  if (v32)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v32 + 24))(v32, v27);
  v33 = *v28 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v27 = v33 | *(_QWORD *)v27 & 7;
  *(_QWORD *)(v27 + 8) = v28;
  *(_QWORD *)(v33 + 8) = v27;
  *v28 = *v28 & 7 | v27;
  v34 = a1[7];
  if (v34)
  {
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v34 + 24))(v34, v27);
    if (a4)
      goto LABEL_37;
  }
  else if (a4)
  {
LABEL_37:
    v35 = 16 * a4;
    v70 = a7;
    do
    {
      v36 = *((_DWORD *)v11 + 2);
      if (v36 == 1)
      {
        v37 = *(_DWORD *)v11;
        v75 = 0;
        v76 = 0;
        v77 = 0;
        HIDWORD(v74) = v37;
      }
      else
      {
        v38 = a1[3];
        if (v36)
        {
          if (v36 == 2)
          {
            v40 = *v11;
            IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1[3], (unsigned __int8 *)&unk_1C8725DB3, 0);
            *(_QWORD *)(*(_QWORD *)(v38 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v40 & 0xFFFFFFFFFFFFFFFBLL;
            v42 = *(_QWORD *)(v38 + 8);
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
            v75 = 0;
            v76 = 0;
            v77 = 0;
            LODWORD(v74) = 0x1000000;
            HIDWORD(v74) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v23, (const llvm::MachineOperand *)&v74);
            a7 = v70;
          }
          goto LABEL_43;
        }
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[3], *v11, (unsigned __int8 *)&unk_1C8725DB3, 0);
        v75 = 0;
        v76 = 0;
        v77 = 0;
        HIDWORD(v74) = GenericVirtualRegister;
      }
      LODWORD(v74) = 0x1000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v23, (const llvm::MachineOperand *)&v74);
LABEL_43:
      v11 += 2;
      v35 -= 16;
    }
    while (v35);
  }
  if (v71)
  {
    v61 = 24 * v71;
    while (1)
    {
      v62 = v9[4];
      if (!v62)
        break;
      switch(v62)
      {
        case 1:
          v63 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 1) + 32) + 4);
          goto LABEL_93;
        case 2:
          v64 = *v9;
          LODWORD(v74) = 18;
          v75 = 0;
          LODWORD(v76) = v64;
          break;
        case 3:
          v65 = *(_QWORD *)v9;
          LODWORD(v74) = 1;
          v75 = 0;
          v76 = v65;
          break;
        default:
          goto LABEL_95;
      }
LABEL_94:
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v23, (const llvm::MachineOperand *)&v74);
LABEL_95:
      v9 += 6;
      v61 -= 24;
      if (!v61)
        goto LABEL_103;
    }
    v63 = *v9;
LABEL_93:
    v75 = 0;
    LODWORD(v74) = 0;
    HIDWORD(v74) = v63;
    v76 = 0;
    v77 = 0;
    goto LABEL_94;
  }
LABEL_103:
  if ((a7 & 0xFF00000000) != 0)
    *(_WORD *)(v27 + 44) = *(_WORD *)(v27 + 44) & 0xC | a7 & 0xFFF3;
  return (uint64_t)v23;
}

unsigned int *sub_1C5548CC0(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  int v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 2);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 16);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_DWORD *)(*(_QWORD *)v5 + 16 * v7);
    do
    {
      v10 = *(_DWORD *)v4;
      v4 += 4;
      *v9 = v10;
      v9[2] = 1;
      v9 += 4;
    }
    while (v4 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 2);
  return result;
}

char *sub_1C5548D54(char *result, unint64_t a2, __int128 *a3)
{
  uint64_t *v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v16;
  uint64_t v17;

  v4 = (uint64_t *)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v5 = result + 8;
    v8 = *((unsigned int *)result + 2);
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = *((unsigned int *)result + 2);
    if (v9)
    {
      v10 = *(_QWORD *)result;
      do
      {
        v11 = *a3;
        *(_DWORD *)(v10 + 16) = *((_DWORD *)a3 + 4);
        *(_OWORD *)v10 = v11;
        v10 += 24;
        --v9;
      }
      while (v9);
      v8 = *v5;
    }
    v12 = v8 - a2;
    if (v8 < a2)
    {
      v13 = *(_QWORD *)result + 24 * v8;
      do
      {
        v14 = *a3;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v13 = v14;
        v13 += 24;
      }
      while (!__CFADD__(v12++, 1));
    }
  }
  else
  {
    v16 = *a3;
    v17 = *((_QWORD *)a3 + 2);
    *((_DWORD *)result + 2) = 0;
    v5 = result + 8;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 24);
    v6 = *v4;
    v7 = a2;
    do
    {
      *(_OWORD *)v6 = v16;
      *(_QWORD *)(v6 + 16) = v17;
      v6 += 24;
      --v7;
    }
    while (v7);
  }
  *v5 = a2;
  return result;
}

uint64_t sub_1C5548E50(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeMachineBlockFrequencyInfoPass(a1, a2);
  llvm::initializeMachineBranchProbabilityInfoPass(a1, v3);
  llvm::initializeTargetPassConfigPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Assign register bank of generic virtual registers";
  *(_QWORD *)(v4 + 8) = 49;
  *(_QWORD *)(v4 + 16) = "regbankselect";
  *(_QWORD *)(v4 + 24) = 13;
  *(_QWORD *)(v4 + 32) = &unk_1ED805E78;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C6277154;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5548EF4(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int **a5)
{
  int v9;
  int v10;
  llvm::MachineFunction *v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  llvm::MachineInstr *v14;
  llvm::MachineFunction *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MachineFunction *v21;
  llvm::MachineInstr *v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE **v30;
  uint64_t v31;
  char v32;
  llvm::MachineInstr **v33;
  llvm::MachineInstr *v34;
  llvm::MachineFunction *v35;
  _BYTE *v36;
  unsigned int v38;
  uint64_t v39;
  llvm::MachineFunction *v40;
  llvm::MachineInstr *v41;
  int v42;
  int *v43;
  int *v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (a3 == 1)
  {
    if ((*(_DWORD *)a2 & 0x1000000) != 0)
      v9 = *(_DWORD *)(a2 + 4);
    else
      v9 = **a5;
    if ((*(_DWORD *)a2 & 0x1000000) != 0)
      v10 = **a5;
    else
      v10 = *(_DWORD *)(a2 + 4);
    v11 = sub_1C55437B8(a1 + 37, 0x13u);
    v13 = v12;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v46 = 0x1000000;
    v47 = v9;
    llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v46);
    v48 = 0;
    v49 = 0;
    v46 = 0;
    v47 = v10;
    v50 = 0;
    v14 = v13;
    v15 = v11;
LABEL_17:
    llvm::MachineInstr::addOperand(v14, v15, (const llvm::MachineOperand *)&v46);
    goto LABEL_18;
  }
  v17 = *(_DWORD *)(a2 + 4);
  if (v17 < 0 && (v18 = a1[32], v19 = v17 & 0x7FFFFFFF, v19 < *(_DWORD *)(v18 + 432)))
    v20 = *(_QWORD *)(*(_QWORD *)(v18 + 424) + 8 * v19);
  else
    v20 = 0;
  if ((*(_BYTE *)(a2 + 3) & 1) == 0)
  {
    v21 = sub_1C55437B8(a1 + 37, 0x4Au);
    v13 = v22;
    v24 = *a5;
    v23 = a5[1];
    while (v24 != v23)
    {
      v25 = *v24++;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v46 = 0x1000000;
      v47 = v25;
      llvm::MachineInstr::addOperand(v13, v21, (const llvm::MachineOperand *)&v46);
    }
    v26 = *(_DWORD *)(a2 + 4);
    v48 = 0;
    v49 = 0;
    v46 = 0;
    v47 = v26;
    v50 = 0;
    v14 = v13;
    v15 = v21;
    goto LABEL_17;
  }
  v38 = 76;
  if ((v20 & 0xFFFFFFFFFFFFFFF9) != 0 && (v20 & 4) != 0)
  {
    v39 = 0x800000000000000;
    if ((v20 & 2) == 0)
      v39 = 0x8000000000000;
    if ((v39 & v20) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)0x4C);
    if (a3 == (unsigned __int16)(v20 >> 3))
      v38 = 77;
    else
      v38 = 79;
  }
  v40 = sub_1C55437B8(a1 + 37, v38);
  v13 = v41;
  v42 = *(_DWORD *)(a2 + 4);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v46 = 0x1000000;
  v47 = v42;
  llvm::MachineInstr::addOperand(v41, v40, (const llvm::MachineOperand *)&v46);
  v43 = *a5;
  v44 = a5[1];
  while (v43 != v44)
  {
    v45 = *v43++;
    v48 = 0;
    v46 = 0;
    v47 = v45;
    v49 = 0;
    v50 = 0;
    llvm::MachineInstr::addOperand(v13, v40, (const llvm::MachineOperand *)&v46);
  }
LABEL_18:
  if (*(_DWORD *)(a4 + 24) != 1)
    llvm::report_fatal_error((llvm *)"need testcase to support multiple insertion points", (const char *)1);
  v27 = operator new[]();
  v28 = v27;
  v29 = *(unsigned int *)(a4 + 24);
  if ((_DWORD)v29)
  {
    v30 = *(_BYTE ***)(a4 + 16);
    v31 = 8 * v29;
    v32 = 1;
    v33 = (llvm::MachineInstr **)v27;
    do
    {
      v34 = v13;
      if ((v32 & 1) == 0)
      {
        v35 = (llvm::MachineFunction *)a1[38];
        v34 = (llvm::MachineInstr *)*((_QWORD *)v35 + 28);
        if (v34)
          *((_QWORD *)v35 + 28) = *(_QWORD *)v34;
        else
          v34 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v35 + 128, 72, 3);
        llvm::MachineInstr::MachineInstr(v34, v35, v13);
      }
      v36 = *v30++;
      sub_1C6275DAC(v36, (uint64_t)v34);
      v32 = 0;
      *v33++ = v34;
      v31 -= 8;
    }
    while (v31);
  }
  return MEMORY[0x1CAA32F9C](v28, 0x20C8093837F09);
}

void sub_1C55491EC(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  BOOL v7;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  int *v31;
  int *v32;
  unint64_t RegBank;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t RegSizeInBits;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  _BOOL4 v79;
  _BOOL4 v82;
  int v83;
  int v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t *v95;
  __int128 v97;
  uint64_t v98;
  _DWORD v99[2];
  __int16 v100;
  void *v101;
  uint64_t v102;
  _QWORD v103[5];

  v103[3] = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)a4 == -2 || *(_QWORD *)(a4 + 8) == 0;
  if (v7)
  {
LABEL_6:
    a1[1] = -1;
    a1[2] = -1;
    *a1 = -1;
    return;
  }
  v12 = a2[34];
  if (!v12)
  {
    v21 = 1;
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(v12 + 248);
  if (!v13)
    goto LABEL_137;
  v14 = *(_DWORD *)(v13 + 176);
  if (!v14)
    goto LABEL_137;
  v15 = *(_QWORD *)(a3 + 24);
  v16 = *(_QWORD *)(v13 + 160);
  v17 = v14 - 1;
  v18 = (v14 - 1) & ((v15 >> 4) ^ (v15 >> 9));
  v19 = *(_QWORD *)(v16 + 16 * v18);
  if (v19 != v15)
  {
    v84 = 1;
    while (v19 != -4096)
    {
      v85 = v18 + v84++;
      v18 = v85 & v17;
      v19 = *(_QWORD *)(v16 + 16 * v18);
      if (v19 == v15)
        goto LABEL_11;
    }
    goto LABEL_137;
  }
LABEL_11:
  v20 = *(unsigned int *)(v16 + 16 * v18 + 8);
  if (v20 == 0xFFFFFFFFLL)
  {
LABEL_137:
    v21 = 0;
    goto LABEL_14;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 24 * v20 + 16);
LABEL_14:
  v98 = v21;
  v94 = *(unsigned int *)(a4 + 4);
  v97 = *(unsigned int *)(a4 + 4);
  v22 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v22)
  {
    v23 = *(_QWORD *)a5 - 40;
    v24 = 56 * v22;
    do
    {
      sub_1C627717C((char **)(v23 + v24));
      v24 -= 56;
    }
    while (v24);
  }
  *(_DWORD *)(a5 + 8) = 0;
  if (!a6 || *a6 == v94 && !a6[1] && v21 == a6[2] || !sub_1C5549934(a6, (unint64_t *)&v97))
  {
    v92 = v21;
    v95 = a2;
    v90 = a5;
    v25 = *(unsigned int *)(a4 + 16);
    if ((_DWORD)v25)
    {
      v26 = 0;
      v91 = 0;
      LOBYTE(v93) = 0;
      do
      {
        v27 = *(_QWORD *)(a3 + 32);
        v28 = v27 + 32 * v26;
        if (*(_BYTE *)v28)
          goto LABEL_28;
        v30 = (unsigned int *)(v28 + 4);
        v29 = *(_DWORD *)(v28 + 4);
        if (!v29)
          goto LABEL_28;
        v31 = (int *)(*(_QWORD *)(a4 + 8) + 16 * v26);
        v32 = v31 + 2;
        if (v31[2] == 1)
        {
          RegBank = llvm::RegisterBankInfo::getRegBank(v95[31], v29, v95[32], v95[33]);
          if (RegBank == *(_QWORD *)(*(_QWORD *)v31 + 8))
            goto LABEL_28;
          if (!RegBank)
          {
            v99[0] = 2;
            v99[1] = v26;
            v100 = 1;
            v101 = v103;
            v102 = 0x200000000;
            v103[2] = v95;
            sub_1C62760A4(v90, (uint64_t)v99);
            v34 = v101;
            if ((_DWORD)v102)
            {
              v35 = 8 * v102;
              v36 = (char *)v101 - 8;
              do
              {
                v37 = *(_QWORD *)&v36[v35];
                *(_QWORD *)&v36[v35] = 0;
                if (v37)
                  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
                v35 -= 8;
              }
              while (v35);
              v34 = v101;
            }
            if (v34 != v103)
              free(v34);
            goto LABEL_28;
          }
        }
        sub_1C62762EC((uint64_t)v99, a3, v26, v95[33], (uint64_t)v95);
        sub_1C62760A4(v90, (uint64_t)v99);
        v38 = v101;
        v89 = a6;
        if ((_DWORD)v102)
        {
          v86 = a1;
          v39 = 8 * v102;
          v40 = (char *)v101 - 8;
          do
          {
            v41 = *(_QWORD *)&v40[v39];
            *(_QWORD *)&v40[v39] = 0;
            if (v41)
              (*(void (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);
            v39 -= 8;
          }
          while (v39);
          v38 = v101;
          a1 = v86;
          a6 = v89;
        }
        if (v38 != v103)
          free(v38);
        v42 = *(_QWORD *)v90 + 56 * *(unsigned int *)(v90 + 8);
        if (*(_BYTE *)(v42 - 47))
        {
          v43 = v31[2];
          if ((*(_BYTE *)(v28 + 3) & 1) != 0)
          {
            if (*v30 - 1 >= 0x3FFFFFFF && v43 != 1)
            {
              *(_DWORD *)(v42 - 56) = 3;
              v48 = *(unsigned int *)(v42 - 32);
              if ((_DWORD)v48)
              {
                v49 = a1;
                v87 = v42;
                v50 = 8 * v48;
                v51 = *(_QWORD *)(v42 - 40) - 8;
                do
                {
                  v52 = *(_QWORD *)(v51 + v50);
                  *(_QWORD *)(v51 + v50) = 0;
                  if (v52)
                    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52);
                  v50 -= 8;
                }
                while (v50);
                LOBYTE(v48) = 0;
LABEL_75:
                a1 = v49;
                v42 = v87;
                a6 = v89;
              }
LABEL_77:
              *(_DWORD *)(v42 - 32) = 0;
              *(_BYTE *)(v42 - 48) = v48;
              *(_BYTE *)(v42 - 47) = 0;
            }
          }
          else
          {
            v44 = *(_QWORD *)(v27 + 32 * v26 + 8);
            v45 = *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8);
            if ((*(_WORD *)(v44 + 44) & 0xC) != 0 && (*(_WORD *)(v44 + 44) & 4) == 0)
            {
              if ((v45 & 0x200) != 0)
                goto LABEL_78;
              while ((*(_WORD *)(v44 + 44) & 8) != 0)
              {
                v44 = *(_QWORD *)(v44 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v44 + 16) + 9) & 2) != 0)
                  goto LABEL_78;
              }
              LOBYTE(v47) = 0;
            }
            else
            {
              v47 = (v45 >> 9) & 1;
            }
            if ((v47 & 1) == 0 && v43 == 1)
            {
              *(_DWORD *)(v42 - 56) = 2;
              v53 = *(unsigned int *)(v42 - 32);
              if ((_DWORD)v53)
              {
                v49 = a1;
                v87 = v42;
                v54 = 8 * v53;
                v55 = *(_QWORD *)(v42 - 40) - 8;
                do
                {
                  v56 = *(_QWORD *)(v55 + v54);
                  *(_QWORD *)(v55 + v54) = 0;
                  if (v56)
                    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
                  v54 -= 8;
                }
                while (v54);
                LOBYTE(v48) = 1;
                goto LABEL_75;
              }
              LOBYTE(v48) = 1;
              goto LABEL_77;
            }
          }
        }
LABEL_78:
        if (!*(_BYTE *)(v42 - 48))
          goto LABEL_6;
        if (!((a6 == 0) | v93 & 1))
        {
          v88 = v42;
          v57 = *v32;
          v58 = llvm::RegisterBankInfo::getRegBank(v95[31], *v30, v95[32], v95[33]);
          if (*v32 == 1)
          {
            v7 = v57 == 1;
            a6 = v89;
            if (!v7)
              goto LABEL_6;
            v59 = *(_QWORD *)(*(_QWORD *)v31 + 8);
            v60 = (*(_DWORD *)v28 & 0x1000000) != 0 ? *(_QWORD *)(*(_QWORD *)v31 + 8) : v58;
            v61 = (*(_DWORD *)v28 & 0x1000000) != 0 ? v58 : v59;
            v62 = v95[31];
            v63 = *v30;
            if (*v30 - 1 <= 0x3FFFFFFE)
            {
              v64 = v95[33];
              RegSizeInBits = *(unsigned int *)(*(_QWORD *)(v64 + 264)
                                              + 24
                                              * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v95[31], v63, v64)+ 24)+ *(_DWORD *)(v64 + 272)* ((*(_QWORD *)(v64 + 248) - *(_QWORD *)(v64 + 240)) >> 3)));
            }
            else
            {
              RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v95[33], v63, v95[32]);
            }
            v66 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 32))(v62, v61, v60, RegSizeInBits);
            if (v66 == -1)
              goto LABEL_6;
          }
          else
          {
            v66 = (*(uint64_t (**)(uint64_t, int *, unint64_t))(*(_QWORD *)v95[31] + 40))(v95[31], v31, v58);
            a6 = v89;
            if (v66 == -1)
              goto LABEL_6;
          }
          v67 = *(unsigned int *)(v88 - 32);
          if (!(_DWORD)v67)
          {
            LOBYTE(v93) = 0;
            goto LABEL_28;
          }
          v68 = v66;
          v69 = *(_QWORD **)(v88 - 40);
          v70 = (((5 * (unint64_t)v66 + 99) * (unsigned __int128)0x28F5C28F5C28F5DuLL) >> 64) + v66;
          v71 = 8 * v67 - 8;
          v72 = v91;
LABEL_96:
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v69 + 40))(*v69) & 1) != 0)
          {
            v73 = (*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v69 + 48))(*v69, v95);
            v74 = v73 * v70;
            if (v73 * v70 >= v70)
            {
              v75 = __CFADD__(v74, v72);
              v72 += v74;
              if (!v75)
              {
                *((_QWORD *)&v97 + 1) = v72;
                v76 = v94;
                v79 = v94 == -2 && v72 == -1 && v92 == -1;
                v93 = v79;
                v91 = v72;
                goto LABEL_122;
              }
            }
          }
          else
          {
            v76 = v94 + v68;
            if (!__CFADD__(v94, v68))
            {
              *(_QWORD *)&v97 = v94 + v68;
              v82 = v76 == -2 && v72 == -1 && v92 == -1;
              v93 = v82;
LABEL_122:
              v94 = v76;
              if ((v76 != *a6 || v72 != a6[1] || v92 != a6[2]) && sub_1C5549934(a6, (unint64_t *)&v97))
                break;
              ++v69;
              v83 = v93;
              if (!v71)
                v83 = 1;
              v71 -= 8;
              if (v83 == 1)
                goto LABEL_28;
              goto LABEL_96;
            }
          }
          *((_QWORD *)&v97 + 1) = -1;
          v98 = -1;
          v76 = -2;
          *(_QWORD *)&v97 = -2;
          v93 = 1;
          v91 = -1;
          v92 = -1;
          v72 = -1;
          goto LABEL_122;
        }
LABEL_28:
        ++v26;
      }
      while (v26 != v25);
    }
  }
  *(_OWORD *)a1 = v97;
  a1[2] = v98;
}

BOOL sub_1C5549934(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL8 result;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v23;
  _BOOL4 v24;
  int v25;
  unint64_t v26;
  _BOOL4 v27;
  unsigned int v29;
  unsigned int v31;
  BOOL v32;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2])
    return 0;
  if (v2 == -1 && a1[1] == -1 && a1[2] == -1)
  {
    v10 = 0;
    v9 = a2[1] == -1;
LABEL_23:
    v11 = 0;
    if (v3 == -1 && v9)
      v11 = a2[2] == -1;
    return v10 && v11;
  }
  v4 = a2[1];
  v5 = a2[2];
  if (v3 == -1 && v4 == -1 && v5 == -1)
  {
    if (v2 == -1 && a1[1] == -1)
    {
      v10 = a1[2] != -1;
      v9 = 1;
    }
    else
    {
      v9 = 1;
      v10 = 1;
    }
    goto LABEL_23;
  }
  if (v2 != -2)
  {
    if (v3 != -2 || v4 != -1 || v5 != -1)
    {
      v8 = a1[1];
      goto LABEL_32;
    }
LABEL_30:
    v13 = 1;
    return v3 == -2 && v4 == -1 && v5 == -1 && v13;
  }
  v8 = a1[1];
  if (v8 != -1)
  {
    if (v3 != -2 || v4 != -1 || v5 != -1)
      goto LABEL_32;
    goto LABEL_30;
  }
  v20 = a1[2];
  if (v20 == -1 || (v8 = -1, v3 == -2) && v4 == -1 && v5 == -1)
  {
    v13 = v20 != -1;
    return v3 == -2 && v4 == -1 && v5 == -1 && v13;
  }
LABEL_32:
  v14 = a1[2];
  if (v14 != v5)
  {
LABEL_58:
    v18 = v8 - v4;
    if (v8 < v4)
      v18 = 0;
    v19 = v4 - v8;
    if (v4 < v8)
      v19 = 0;
    v23 = v2 * v14;
    v24 = v2 * v14 < v14;
    v25 = v23 < v2 || v24;
    if (v2)
      v16 = v23;
    else
      v16 = 0;
    if (v2)
      v17 = v25;
    else
      v17 = 0;
    goto LABEL_71;
  }
  result = v2 < v3;
  if (v8 == v4)
    return result;
  v15 = v2 - v3;
  if (v2 >= v3)
  {
    v3 = 0;
    v2 = v15;
    goto LABEL_58;
  }
  v16 = 0;
  v17 = 0;
  v3 -= v2;
  if (v8 >= v4)
    v18 = v8 - v4;
  else
    v18 = 0;
  if (v4 >= v8)
    v19 = v4 - v8;
  else
    v19 = 0;
LABEL_71:
  v26 = v3 * v5;
  v27 = v3 * v5 < v5;
  if (v26 < v3)
    v27 = 1;
  if (!v3)
    v27 = 0;
  if (__CFADD__(v18, v16) && v8 > v4)
    v29 = 1;
  else
    v29 = v17;
  v31 = __CFADD__(v19, v26) && v4 > v8 || v27;
  if (v29 && v31)
    return 0;
  if (v29 | v31)
    v32 = v29 >= v31;
  else
    v32 = v18 + v16 >= v26 + v19;
  return !v32;
}

uint64_t sub_1C5549B84(uint64_t a1, _BYTE **a2)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unsigned int v16;
  const llvm::MachineInstr *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const llvm::RegisterBankInfo::InstructionMapping *v27;
  int v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  int v32;
  char v33;
  int v34;
  char *v35;
  void *__p;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[48];
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[30];

  v47[28] = *MEMORY[0x1E0C80C00];
  if ((*a2[45] & 0x10) != 0)
    return 0;
  v34 = *(_DWORD *)(a1 + 368);
  v5 = *((_QWORD *)*a2 + 14);
  if (v5 && (*(_BYTE *)(v5 + 17) & 8) != 0)
    *(_DWORD *)(a1 + 368) = 0;
  sub_1C6275BE8(a1, (uint64_t)a2);
  v45 = a2;
  v37 = 0;
  v38 = 0;
  __p = 0;
  sub_1C486DB3C((char **)&__p, (uint64_t)&v45);
  v6 = v37;
  v35 = (char *)__p;
  do
  {
    if (v6 == v35)
    {
      *(_DWORD *)(a1 + 368) = v34;
      break;
    }
    v7 = *((_QWORD *)v6 - 1);
    v6 -= 8;
    v8 = (_QWORD *)(v7 + 48);
    *(_QWORD *)(a1 + 336) = v7;
    *(_QWORD *)(a1 + 344) = v7 + 48;
    v9 = *(_QWORD **)(v7 + 56);
    v39 = v41;
    v40 = 0x600000000;
    if ((_QWORD *)(v7 + 48) == v9)
    {
      v14 = 0;
      v12 = 0;
    }
    else
    {
      v10 = -1;
      v11 = v8;
      do
      {
        v11 = (_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF8);
        ++v10;
      }
      while (v9 != v11);
      v12 = v10 + 1;
      if (v10 < 6)
      {
        v13 = 0;
        v14 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v10 + 1, 8);
        v13 = v40;
        v14 = v40;
      }
      v15 = (char *)v39 + 8 * v13;
      do
      {
        v8 = (_QWORD *)(*v8 & 0xFFFFFFFFFFFFFFF8);
        *v15++ = v8;
      }
      while (v9 != v8);
    }
    v16 = v14 + v12;
    LODWORD(v40) = v16;
    if (!v16)
    {
LABEL_50:
      v33 = 1;
      goto LABEL_51;
    }
    while (1)
    {
      v17 = (const llvm::MachineInstr *)*((_QWORD *)v39 + --v16);
      LODWORD(v40) = v16;
      v18 = (unsigned __int16 *)*((_QWORD *)v17 + 2);
      v19 = *v18;
      if (v19 >= 0x100 && (v18[4] & 1) == 0)
        goto LABEL_24;
      v20 = v19 > 0x11 || ((1 << v19) & 0x3E406) == 0;
      if (!v20)
        goto LABEL_24;
      if (v19 - 42 <= 2)
      {
        v21 = *((_QWORD *)v17 + 4);
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 24);
        v23 = *(_QWORD *)(v22 + 16 * (*(_DWORD *)(v21 + 36) & 0x7FFFFFFF));
        v24 = 16 * (*(_DWORD *)(v21 + 4) & 0x7FFFFFFF);
        v25 = v23 & 0xFFFFFFFFFFFFFFF8 | 4;
        v20 = (v23 & 4) == 0;
        v26 = 4;
        if (!v20)
          v26 = v25;
        *(_QWORD *)(v22 + v24) = v26;
        goto LABEL_24;
      }
      v45 = v47;
      v46 = 0x400000000;
      if (*(_DWORD *)(a1 + 368))
      {
        llvm::RegisterBankInfo::getInstrPossibleMappings(*(llvm::RegisterBankInfo **)(a1 + 248), v17, (uint64_t)&v42);
        v32 = v43;
        if ((_DWORD)v43)
          v27 = (const llvm::RegisterBankInfo::InstructionMapping *)sub_1C6275E70(a1, (unint64_t)v17, (uint64_t **)&v42, (uint64_t)&v45);
        else
          v27 = 0;
        if (v42 != &v44)
          free(v42);
        if (!v32)
        {
LABEL_34:
          v28 = 0;
          goto LABEL_35;
        }
      }
      else
      {
        v27 = (const llvm::RegisterBankInfo::InstructionMapping *)(*(uint64_t (**)(_QWORD, const llvm::MachineInstr *))(**(_QWORD **)(a1 + 248) + 48))(*(_QWORD *)(a1 + 248), v17);
        sub_1C55491EC(&v42, (uint64_t *)a1, (unint64_t)v17, (uint64_t)v27, (uint64_t)&v45, 0);
        if (v42 == (void *)-1 && v43 == -1 && v44 == -1)
          goto LABEL_34;
      }
      v28 = sub_1C627614C(a1, v17, v27, (uint64_t)&v45);
LABEL_35:
      v29 = v45;
      if ((_DWORD)v46)
      {
        v30 = (char *)v45 - 40;
        v31 = 56 * v46;
        do
        {
          sub_1C627717C((char **)&v30[v31]);
          v31 -= 56;
        }
        while (v31);
        v29 = v45;
      }
      if (v29 != v47)
        free(v29);
      if (!v28)
        break;
      v16 = v40;
LABEL_24:
      if (!v16)
        goto LABEL_50;
    }
    sub_1C554B36C((uint64_t)a2, *(_QWORD *)(a1 + 376), *(uint64_t ******)(a1 + 288), "gisel-regbankselect", (uint64_t)"unable to map instruction", 25, v17);
    v33 = 0;
LABEL_51:
    if (v39 != v41)
      free(v39);
  }
  while ((v33 & 1) != 0);
  if (__p)
  {
    v37 = (char *)__p;
    operator delete(__p);
  }
  return 0;
}

uint64_t sub_1C5549F68(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v6;
  unsigned int v8;
  unsigned int v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 24) + 56) == v1)
      return 0;
    v2 = *(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8;
    if (!v2)
      return 0;
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
    if ((*(_WORD *)(v2 + 44) & 0xC) == 0 || (*(_WORD *)(v2 + 44) & 4) != 0)
      return (v3 >> 9) & 1;
    if ((v3 & 0x200) == 0)
    {
      do
      {
        v9 = *(unsigned __int16 *)(v2 + 44);
        result = (v9 >> 3) & 1;
        if ((v9 & 8) == 0)
          break;
        v2 = *(_QWORD *)(v2 + 8);
      }
      while ((*(_BYTE *)(*(_QWORD *)(v2 + 16) + 9) & 2) == 0);
      return result;
    }
    return 1;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
  if ((*(_WORD *)(v1 + 44) & 0xC) == 0 || (*(_WORD *)(v1 + 44) & 4) != 0)
    return (v6 >> 9) & 1;
  if ((v6 & 0x200) != 0)
    return 1;
  do
  {
    v8 = *(unsigned __int16 *)(v1 + 44);
    result = (v8 >> 3) & 1;
    if ((v8 & 8) == 0)
      break;
    v1 = *(_QWORD *)(v1 + 8);
  }
  while ((*(_BYTE *)(*(_QWORD *)(v1 + 16) + 9) & 2) == 0);
  return result;
}

BOOL sub_1C554A038(uint64_t a1)
{
  return ((*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96) - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88)) & 0x7FFFFFFF0) != 0
      && ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 24) + 64)) & 0x7FFFFFFF0) != 0;
}

uint64_t sub_1C554A06C(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void sub_1C554A080(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C6277384(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C554A0C4(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED805F30 >= HIDWORD(qword_1ED805F30))
  {
    v3 = qword_1ED805F30 + 1;
    if (qword_1ED805F28 <= a1 && qword_1ED805F28 + 48 * (unint64_t)qword_1ED805F30 > a1)
    {
      v5 = a1 - qword_1ED805F28;
      sub_1C6277438(v3);
      return qword_1ED805F28 + v5;
    }
    else
    {
      sub_1C6277438(v3);
    }
  }
  return a1;
}

uint64_t sub_1C554A138(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v11 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v12 = 0;
          do
          {
            v13 = *(_QWORD *)&v4[v12];
            *(_QWORD *)&v4[v12] = 0;
            v14 = *(_QWORD *)&v11[v12];
            *(_QWORD *)&v11[v12] = v13;
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
            v12 += 8;
          }
          while (8 * v5 != v12);
          v6 = *(unsigned int *)(a1 + 8);
          v15 = &v11[v12];
          v11 = *(char **)a1;
        }
        else
        {
          v15 = *(char **)a1;
        }
        v16 = &v11[8 * v6];
        while (v16 != v15)
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          v17 = v18;
          *(_QWORD *)v16 = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v19 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v19)
        {
          v20 = 8 * v19;
          v21 = *(_QWORD *)a2 - 8;
          do
          {
            v22 = *(_QWORD *)(v21 + v20);
            *(_QWORD *)(v21 + v20) = 0;
            if (v22)
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
            v20 -= 8;
          }
          while (v20);
        }
        goto LABEL_45;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v23 = 8 * v6;
          v24 = *(_QWORD *)a1 - 8;
          do
          {
            v25 = *(_QWORD *)(v24 + v23);
            *(_QWORD *)(v24 + v23) = 0;
            if (v25)
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
            v23 -= 8;
          }
          while (v23);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C627772C(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = 8 * v6;
        do
        {
          v9 = *(_QWORD *)v4;
          *(_QWORD *)v4 = 0;
          v10 = *(_QWORD *)v7;
          *(_QWORD *)v7 = v9;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
          v4 += 8;
          v7 += 8;
          v8 -= 8;
        }
        while (v8);
        goto LABEL_36;
      }
      v6 = 0;
LABEL_36:
      v26 = *(char **)a2;
      v27 = *(unsigned int *)(a2 + 8);
      if (v6 != v27)
      {
        v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v6);
        v29 = &v26[8 * v6];
        v30 = 8 * v27 - 8 * v6;
        do
        {
          v31 = *(_QWORD *)v29;
          *(_QWORD *)v29 = 0;
          v29 += 8;
          *v28++ = v31;
          v30 -= 8;
        }
        while (v30);
        v26 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v32 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v32)
      {
        v33 = 8 * v32;
        v34 = v26 - 8;
        do
        {
          v35 = *(_QWORD *)&v34[v33];
          *(_QWORD *)&v34[v33] = 0;
          if (v35)
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
          v33 -= 8;
        }
        while (v33);
      }
LABEL_45:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_1C62776A4((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_1C554A364()
{
  int v1;
  int v2;
  __int128 v3;
  void *v4[2];
  _QWORD v5[2];
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3 = "Mode of the RegBankSelect pass";
  *((_QWORD *)&v3 + 1) = 30;
  v1 = 0;
  v2 = 1;
  v4[0] = v5;
  v5[0] = "regbankselect-fast";
  v5[1] = 18;
  v6 = 0;
  v7 = "Run the Fast mode (default mapping)";
  v8 = 35;
  v9 = "regbankselect-greedy";
  v10 = 20;
  v11 = 1;
  v12 = "Use the Greedy mode (best local mapping)";
  v13 = 40;
  v4[1] = (void *)0x400000002;
  sub_1C6277258(&v3, &v2, &v1, (uint64_t)v4);
  if (v4[0] != v5)
    free(v4[0]);
  return __cxa_atexit((void (*)(void *))sub_1C6275B10, &qword_1ED805E80, &dword_1C475E000);
}

uint64_t sub_1C554A468(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Assign the only register bank";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "single-regbankselect";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1ED8060D8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C62779C8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C554A4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 184))(*(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 24);
    v8 = **(_QWORD **)(v3 + 8) | 4;
    do
    {
      v9 = (uint64_t *)(v7 + 16 * (v6 & 0x7FFFFFFF));
      if ((unint64_t)*v9 <= 7)
        *v9 = v8;
      ++v6;
    }
    while (v5 != v6);
  }
  return 1;
}

const char *sub_1C554A56C()
{
  return "SingleRegBankSelect";
}

void sub_1C554A57C(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 0x21uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C554A6B0(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 0x40uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C554A7E0(char a1, uint64_t a2)
{
  void *v2;
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint32_t v8;
  uint64_t v9[2];
  char v10;
  uint64_t v11[2];
  char v12;
  uint64_t v13[2];
  char v14;
  uint64_t v15[3];
  uint64_t v16[2];
  char v17;
  uint64_t v18[4];
  uint8_t buf[4];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((a1 & 1) == 0)
  {
    HIBYTE(v18[2]) = 16;
    strcpy((char *)v18, "already reported");
    sub_1C554AAAC(v18);
    if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
      return;
    v2 = (void *)v18[0];
    goto LABEL_9;
  }
  if (a2 != 54282728 && a2 != 54283368 && a2 != 54284310)
  {
    v17 = 6;
    strcpy((char *)v16, "denied");
    sub_1C554AAAC(v16);
    if ((v17 & 0x80000000) == 0)
      return;
    v2 = (void *)v16[0];
    goto LABEL_9;
  }
  v3 = os_fault_with_payload();
  if (!v3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v6 = MEMORY[0x1E0C81028];
    v7 = "fallback report generated (but might not be delivered)";
    v8 = 2;
    goto LABEL_29;
  }
  v4 = v3;
  v5 = *__error();
  if (v5 <= 44)
  {
    if (v5 == 1)
    {
      HIBYTE(v15[2]) = 17;
      strcpy((char *)v15, "denied by sandbox");
      sub_1C554AAAC(v15);
      if (SHIBYTE(v15[2]) < 0)
      {
        v2 = (void *)v15[0];
        goto LABEL_9;
      }
      return;
    }
    if (v5 == 16)
    {
      v14 = 12;
      strcpy((char *)v13, "too frequent");
      sub_1C554AAAC(v13);
      if (v14 < 0)
      {
        v2 = (void *)v13[0];
LABEL_9:
        operator delete(v2);
        return;
      }
      return;
    }
    goto LABEL_27;
  }
  if (v5 == 45)
  {
    v10 = 8;
    strcpy((char *)v9, "disabled");
    sub_1C554AAAC(v9);
    if (v10 < 0)
    {
      v2 = (void *)v9[0];
      goto LABEL_9;
    }
    return;
  }
  if (v5 != 106)
  {
LABEL_27:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 67109120;
    v20 = v4;
    v6 = MEMORY[0x1E0C81028];
    v7 = "fallback report suppressed (unknown error %d)";
    v8 = 8;
LABEL_29:
    _os_log_impl(&dword_1C475E000, v6, OS_LOG_TYPE_DEFAULT, v7, buf, v8);
    return;
  }
  v12 = 14;
  strcpy((char *)v11, "quota exceeded");
  sub_1C554AAAC(v11);
  if (v12 < 0)
  {
    v2 = (void *)v11[0];
    goto LABEL_9;
  }
}

void sub_1C554AAAC(uint64_t *a1)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v2 = 136315138;
    v3 = a1;
    _os_log_impl(&dword_1C475E000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "fallback report suppressed (%s)", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t sub_1C554AB54(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v24;
  uint64_t v25;
  uint64_t VirtualRegister;
  uint64_t v27;
  uint64_t v28;
  llvm::MachineFunction *v29;
  llvm::MachineInstr *v30;
  llvm::MachineInstr *v31;
  uint64_t v32;
  llvm::MachineInstr *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v14 = *(unsigned int *)(a8 + 4);
  v15 = v14 & 0x7FFFFFFF;
  v16 = (uint64_t *)(a3[3] + 16 * v15);
  v17 = *v16 & 0xFFFFFFFFFFFFFFF8;
  if ((*v16 & 4) != 0)
    v18 = 0;
  else
    v18 = *v16 & 0xFFFFFFFFFFFFFFF8;
  if ((*v16 & 4) != 0)
  {
    if (!v17
      || ((*(_QWORD *)(*(_QWORD *)(v17 + 24)
                     + (((unint64_t)*(unsigned __int16 *)(*(_QWORD *)a7 + 24) >> 3) & 0x1FF8)) >> *(_WORD *)(*(_QWORD *)a7 + 24)) & 1) != 0)
    {
      *v16 = a7;
      goto LABEL_10;
    }
  }
  else if (sub_1C51A3F30(a3, *(_DWORD *)(a8 + 4), v17, a7, 0))
  {
    goto LABEL_10;
  }
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister((uint64_t)a3, a7, (unsigned __int8 *)&unk_1C872600A, 0);
  if ((_DWORD)VirtualRegister != (_DWORD)v14)
  {
    v27 = VirtualRegister;
    v28 = *(_QWORD *)(a6 + 24);
    if ((*(_BYTE *)(a8 + 3) & 1) != 0)
    {
      v32 = a6;
      if ((*(_BYTE *)a6 & 4) == 0)
      {
        v32 = a6;
        if ((*(_WORD *)(a6 + 44) & 8) != 0)
        {
          v32 = a6;
          do
            v32 = *(_QWORD *)(v32 + 8);
          while ((*(_WORD *)(v32 + 44) & 8) != 0);
        }
      }
      v29 = sub_1C4787570(v28, *(unint64_t **)(v32 + 8), (unsigned __int8 **)(a6 + 56), *(_QWORD *)(a4 + 8) + 912, v14);
      v31 = v33;
      v38 = 0;
      v39 = 0;
      v37 = v27;
    }
    else
    {
      v29 = sub_1C4787570(v28, (unint64_t *)a6, (unsigned __int8 **)(a6 + 56), *(_QWORD *)(a4 + 8) + 912, v27);
      v31 = v30;
      v38 = 0;
      v39 = 0;
      v37 = v14;
    }
    v36 = 0;
    v40 = 0;
    llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)&v36);
    v34 = *(_QWORD *)(a1 + 736);
    if (v34)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, *(_QWORD *)(a8 + 8));
    llvm::MachineOperand::setReg(a8, v27);
    v35 = *(_QWORD *)(a1 + 736);
    if (v35)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 40))(v35, *(_QWORD *)(a8 + 8));
    return v27;
  }
LABEL_10:
  v19 = a3[3];
  v20 = *(_QWORD *)(v19 + 16 * v15);
  if ((v20 & 4) != 0)
    v21 = 0;
  else
    v21 = v20 & 0xFFFFFFFFFFFFFFF8;
  if (v18 != v21)
  {
    v22 = *(_QWORD **)(a1 + 736);
    if (v22)
    {
      if ((*(_BYTE *)(a8 + 3) & 1) == 0)
      {
        v24 = (uint64_t *)(v19 + 16 * v15 + 8);
        if ((int)v14 >= 0)
          v24 = (uint64_t *)(a3[34] + 8 * v14);
        v25 = *v24;
        if ((*(_BYTE *)(v25 + 3) & 1) == 0)
          v25 = *(_QWORD *)(v25 + 24);
        (*(void (**)(_QWORD *, _QWORD))(*v22 + 40))(v22, *(_QWORD *)(v25 + 8));
      }
      sub_1C54F8CF8(v22, (uint64_t)a3, v14);
      sub_1C54F8DA0((uint64_t)v22);
    }
  }
  return v14;
}

uint64_t sub_1C554ADA8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t CommonSubClass;
  _QWORD *v20;
  _QWORD *AllocatableClass;
  uint64_t v22;
  uint64_t v23;

  v15 = *(unsigned int *)(a8 + 4);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, a7, a9, a2, a1);
  if (v16
    && ((v17 = v16,
         v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 568))(a2, a8, a3),
         (CommonSubClass = llvm::TargetRegisterInfo::getCommonSubClass(a2, v17, v18)) != 0)
      ? (v20 = (_QWORD *)CommonSubClass)
      : (v20 = (_QWORD *)v17),
        (AllocatableClass = llvm::TargetRegisterInfo::getAllocatableClass(a2, v20)) != 0))
  {
    return sub_1C554AB54(a1, v22, a3, a4, v23, a6, (uint64_t)AllocatableClass, a8);
  }
  else
  {
    return v15;
  }
}

uint64_t sub_1C554AE8C(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned int NumExplicitOperands;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t CommonSubClass;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;

  v6 = *(_QWORD *)(a1[3] + 32);
  v7 = *(_QWORD **)(v6 + 40);
  NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands((uint64_t)a1);
  if (NumExplicitOperands)
  {
    v9 = 0;
    v10 = NumExplicitOperands;
    while (1)
    {
      v11 = a1[4] + 32 * v9;
      if (!*(_BYTE *)v11)
      {
        if (*(_DWORD *)(v11 + 4) >> 30)
          break;
      }
LABEL_4:
      if (++v9 == v10)
        return 1;
    }
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1[2], v9, a3, v6);
    if (v12)
    {
      v13 = v12;
      v14 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD *))(*a3 + 568))(a3, v11, v7);
      CommonSubClass = llvm::TargetRegisterInfo::getCommonSubClass((uint64_t)a3, v13, v14);
      if (CommonSubClass)
        v18 = (_QWORD *)CommonSubClass;
      else
        v18 = (_QWORD *)v13;
      if (*(_BYTE *)(*v18 + 31))
      {
LABEL_12:
        sub_1C554AB54(v6, v16, v7, a2, v17, (uint64_t)a1, (uint64_t)v18, v11);
        goto LABEL_13;
      }
      v27 = (unsigned int *)v18[1];
      v28 = a3[30];
      v29 = (unint64_t)(a3[31] - v28) >> 3;
      v30 = *v27;
      if (!*v27)
      {
        v31 = 0;
        while (1)
        {
          v31 += 32;
          if (v31 >= v29)
            goto LABEL_13;
          v39 = v27[1];
          ++v27;
          v30 = v39;
          if (v39)
            goto LABEL_25;
        }
      }
      v31 = 0;
LABEL_25:
      v32 = __clz(__rbit32(v30));
      v33 = v32 | v31;
      if ((v32 | v31) != (_DWORD)v29)
      {
        v34 = v30 >> v32;
        do
        {
          v18 = *(_QWORD **)(v28 + 8 * v33);
          if (*(_BYTE *)(*v18 + 31))
            goto LABEL_12;
          if (v34 <= 1)
          {
            while (1)
            {
              v31 += 32;
              if (v31 >= v29)
                goto LABEL_13;
              v36 = v27[1];
              ++v27;
              v35 = v36;
              if (v36)
              {
                v37 = v31;
                goto LABEL_33;
              }
            }
          }
          v37 = v33 + 1;
          v35 = v34 >> 1;
LABEL_33:
          v38 = __clz(__rbit32(v35));
          v33 = v38 + v37;
          v34 = v35 >> v38;
        }
        while (v33 != (_DWORD)v29);
      }
    }
LABEL_13:
    if ((*(_BYTE *)(v11 + 3) & 1) == 0)
    {
      v19 = a1[2];
      if (v9 < *(unsigned __int16 *)(v19 + 2))
      {
        v20 = *(_WORD *)(*(_QWORD *)(v19 + 40) + 6 * v9 + 4);
        if ((v20 & 1) != 0)
        {
          v21 = v20 >> 4;
          v22 = *(_DWORD *)(a1[4] + 32 * v21);
          v23 = v22 & 0x10000FF;
          v24 = v22 & 0xF00000;
          if (v23 != 0x1000000 || v24 == 0)
            llvm::MachineInstr::tieOperands((uint64_t)a1, v21, v9);
        }
      }
    }
    goto LABEL_4;
  }
  return 1;
}

BOOL sub_1C554B0AC(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = 0;
  if ((a1 - 1) >= 0x3FFFFFFF && (a2 - 1) >= 0x3FFFFFFF)
  {
    if (a1 < 0 && (a1 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a3 + 432))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (a1 & 0x7FFFFFFF));
      if ((a2 & 0x80000000) == 0)
        goto LABEL_10;
    }
    else
    {
      v4 = 0;
      if ((a2 & 0x80000000) == 0)
        goto LABEL_10;
    }
    if ((a2 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a3 + 432))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (a2 & 0x7FFFFFFF));
      goto LABEL_11;
    }
LABEL_10:
    v5 = 0;
LABEL_11:
    if (v4 == v5)
    {
      v6 = *(_QWORD *)(a3 + 24);
      v7 = *(_QWORD *)(v6 + 16 * (a1 & 0x7FFFFFFF));
      return v7 < 8 || v7 == *(_QWORD *)(v6 + 16 * (a2 & 0x7FFFFFFF));
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

BOOL sub_1C554B164(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  _BOOL8 result;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int *i;
  BOOL v14;

  v2 = **(unsigned __int16 **)(a1 + 16);
  v3 = v2 > 0x20;
  v4 = (1 << v2) & 0x100600000;
  if (!v3 && v4 != 0)
    return 0;
  v14 = 0;
  if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)a1, 0, &v14))
  {
    v9 = **(unsigned __int16 **)(a1 + 16);
    if (v9 != 69 && v9 != 0)
      return 0;
  }
  v11 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v11)
    return 1;
  v12 = 32 * v11;
  for (i = (unsigned int *)(*(_QWORD *)(a1 + 32) + 4); ; i += 8)
  {
    if ((*(i - 1) & 0x10000FF) == 0x1000000)
    {
      if (*i - 1 < 0x3FFFFFFF)
        return 0;
      result = sub_1C4A91738(a2, *i);
      if (!result)
        break;
    }
    v12 -= 32;
    if (!v12)
      return 1;
  }
  return result;
}

uint64_t sub_1C554B250(int a1, llvm::Value **a2, uint64_t a3, uint64_t ****this, llvm::DiagnosticInfoOptimizationBase *a5)
{
  _BOOL4 v7;
  BOOL v8;
  char *Name;
  uint64_t v10;
  void **v11;
  const void *v12;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  void *v18[2];
  char v19;
  const void *v20[2];

  if (a1)
    v7 = 0;
  else
    v7 = *(_DWORD *)(*(_QWORD *)(a3 + 112) + 1024) == 1;
  if (*((_QWORD *)a5 + 3))
    v8 = !v7;
  else
    v8 = 0;
  if (!v8)
  {
    Name = llvm::Value::getName(*a2);
    v15 = 1283;
    v14[0] = " (in function: ";
    v14[2] = Name;
    v14[3] = v10;
    v16[0] = v14;
    v16[2] = ")";
    v17 = 770;
    llvm::Twine::str((llvm::Twine *)v16, v18);
    v11 = (void **)v18[0];
    if (v19 >= 0)
      v11 = v18;
    v12 = (const void *)(v19 & 0x7F);
    if (v19 < 0)
      v12 = v18[1];
    v20[0] = v11;
    v20[1] = v12;
    sub_1C53B17B4((uint64_t)a5 + 80, v20);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  if (v7)
  {
    llvm::DiagnosticInfoOptimizationBase::getMsg(a5, (uint64_t)v14);
    v17 = 260;
    v16[0] = v14;
    llvm::report_fatal_error((uint64_t)v16, 1);
  }
  return llvm::MachineOptimizationRemarkEmitter::emit(this, a5);
}

void sub_1C554B36C(uint64_t a1, uint64_t a2, uint64_t *****a3, const char *a4, uint64_t a5, uint64_t a6, llvm::MachineInstr *a7)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  char *v19;
  unint64_t v20;
  void **v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *i;
  void *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  llvm::MachineInstr **v96;
  unint64_t v97;
  uint64_t v98;
  std::string *v99;
  std::string::size_type v100;
  void **v101;
  size_t v102;
  uint64_t v103;
  void **v104;
  void **v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t *****v115;
  uint64_t v116;
  void *v117[2];
  uint64_t v118;
  void *__p[2];
  uint64_t v120;
  __int128 v121;
  std::string v122;
  void *v123[2];
  uint64_t v124;
  void *v125[2];
  _BYTE v126[24];
  uint64_t v127;
  __int128 v128;
  void *v129[2];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  const void *v137[2];
  uint64_t (**v138)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  const char *v145;
  const char *v146;
  uint64_t v147;
  char v148;
  char v149;
  void *v150;
  uint64_t v151;
  _BYTE v152[260];
  int v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  void *v160;
  uint64_t v161;
  __int128 v162;
  char *v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)a7 + 7);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8));
    if (*(_BYTE *)v13 != 15)
      v13 = *(_QWORD *)(v13 - 8 * *(unsigned int *)(v13 + 8));
    v14 = *(_DWORD *)(v12 + 4);
    LODWORD(v12) = *(unsigned __int16 *)(v12 + 2);
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = *((_QWORD *)a7 + 3);
  v16 = **(_QWORD **)(v15 + 32);
  v139 = 16;
  v140 = 2;
  v141 = v16;
  v142 = v13;
  v143 = v14;
  v144 = v12;
  v145 = a4;
  v146 = "GISelFailure: ";
  v147 = 14;
  v148 = 0;
  v149 = 0;
  v17 = v152;
  v150 = v152;
  v151 = 0x400000000;
  v152[256] = 0;
  v153 = -1;
  v154 = v15;
  v138 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E8141F00;
  *(_QWORD *)&v132 = a5;
  *((_QWORD *)&v132 + 1) = a6;
  sub_1C53B17B4((uint64_t)&v150, (const void **)&v132);
  if (*(_DWORD *)(*(_QWORD *)(a2 + 112) + 1024) == 1
    || (!a4 ? (v18 = 0) : (v18 = strlen(a4)), sub_1C5239474(a3, (uint64_t)a4, v18)))
  {
    *(_QWORD *)&v132 = ": ";
    *((_QWORD *)&v132 + 1) = 2;
    sub_1C53B17B4((uint64_t)&v150, (const void **)&v132);
    llvm::DiagnosticInfoMIROptimization::MachineArgument::MachineArgument((uint64_t)&v132, "Inst", 4uLL, a7);
    v118 = v133;
    *(_OWORD *)v117 = v132;
    v132 = 0uLL;
    *(_OWORD *)__p = v134;
    v120 = v135;
    v133 = 0;
    v134 = 0uLL;
    v135 = 0;
    v121 = v136;
    sub_1C47E3888((uint64_t)&v138, (uint64_t)v117);
    if (SHIBYTE(v120) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v118) < 0)
      operator delete(v117[0]);
    if (SHIBYTE(v135) < 0)
      operator delete((void *)v134);
    if (SHIBYTE(v133) < 0)
      operator delete((void *)v132);
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 8) + 472) - 26) <= 3)
    {
      *(_QWORD *)&v132 = "\n";
      *((_QWORD *)&v132 + 1) = 1;
      sub_1C53B17B4((uint64_t)&v150, (const void **)&v132);
      v116 = a1;
      v22 = *(_QWORD *)(a1 + 40);
      v160 = a7;
      sub_1C6277B1C((llvm::SmallPtrSetImplBase *)&v132, (uint64_t *)&v160, 1);
      *(_QWORD *)&v155 = a7;
      *(_OWORD *)v129 = 0u;
      v130 = 0u;
      v131 = 0u;
      v23 = (char *)&v130 + 8;
      v163 = (char *)&v130 + 8;
      v160 = operator new(8uLL);
      v161 = (uint64_t)v160;
      *(_QWORD *)&v162 = v160;
      *((_QWORD *)&v162 + 1) = (char *)v160 + 8;
      v125[0] = operator new(0x1000uLL);
      sub_1C61351F0((uint64_t)&v160, v125);
      v24 = v129[1];
      v25 = (_QWORD *)v130;
      while (v25 != v24)
      {
        sub_1C6135314(&v160, --v25);
        v24 = v129[1];
      }
      v26 = v129[0];
      v27 = (char *)v161;
      v129[0] = v160;
      v129[1] = (void *)v161;
      v130 = v162;
      if (v26)
      {
        operator delete(v26);
        v27 = (char *)v129[1];
        v28 = (char *)v130;
      }
      else
      {
        v28 = (char *)v162;
      }
      v29 = *((_QWORD *)&v131 + 1);
      v30 = &v27[8 * (((_QWORD)v131 + *((_QWORD *)&v131 + 1)) >> 9)];
      v31 = *(_QWORD *)v30;
      if (v28 == v27)
        v32 = 0;
      else
        v32 = *(_QWORD *)v30 + 8 * ((v131 + *((_QWORD *)&v131 + 1)) & 0x1FF);
      v33 = (v32 - v31) >> 3;
      if (v32 - v31 < -7)
      {
        v36 = 510 - v33;
        v34 = ~(_WORD)v36;
        v35 = &v30[-8 * (v36 >> 9)];
      }
      else
      {
        v34 = v33 + 1;
        v35 = &v30[8 * ((unint64_t)(v33 + 1) >> 9)];
      }
      v37 = *(_QWORD *)v35 + 8 * (v34 & 0x1FF);
      if (v32 != v37)
      {
        v38 = &v155;
        do
        {
          v39 = (_QWORD *)(v31 + 4096);
          if (v30 == v35)
            v39 = (_QWORD *)v37;
          if ((_QWORD *)v32 == v39)
          {
            v39 = (_QWORD *)v32;
          }
          else
          {
            v40 = (_QWORD *)v32;
            do
            {
              v41 = *(_QWORD *)v38;
              v38 = (__int128 *)((char *)v38 + 8);
              *v40++ = v41;
            }
            while (v40 != v39);
          }
          v29 += ((uint64_t)v39 - v32) >> 3;
          if (v30 == v35)
            break;
          v42 = *((_QWORD *)v30 + 1);
          v30 += 8;
          v31 = v42;
          v32 = v42;
        }
        while (v42 != v37);
        *((_QWORD *)&v131 + 1) = v29;
      }
      v160 = &v162;
      v161 = 0x1400000000;
      v43 = 1;
      while (*((_QWORD *)&v131 + 1))
      {
        v44 = *(_QWORD *)(*(_QWORD *)((char *)v129[1] + (((unint64_t)v131 >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (v131 & 0x1FF));
        *(_QWORD *)&v131 = v131 + 1;
        --*((_QWORD *)&v131 + 1);
        if ((unint64_t)v131 >= 0x400)
        {
          operator delete(*(void **)v129[1]);
          v129[1] = (char *)v129[1] + 8;
          *(_QWORD *)&v131 = v131 - 512;
        }
        v45 = v161;
        if (v161 >= (unint64_t)HIDWORD(v161))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160, (uint64_t)&v162, v161 + 1, 8);
          v45 = v161;
        }
        *((_QWORD *)v160 + v45) = v44;
        LODWORD(v161) = v161 + 1;
        v46 = *(_QWORD *)(v44 + 32);
        v47 = *(_QWORD *)(v44 + 16);
        v48 = *(unsigned __int8 *)(v47 + 4);
        if ((*(_BYTE *)(v47 + 8) & 2) != 0)
        {
          v49 = *(_DWORD *)(v44 + 40);
          if (v49 == v48)
            goto LABEL_64;
          v94 = v48;
          do
          {
            v95 = *(_DWORD *)(v46 + 32 * v48);
            if ((v95 & 0x10000FF) != 0x1000000)
              break;
            v94 += (v95 & 0x2000000) == 0;
            if (v49 - 1 == v48)
              break;
            ++v48;
          }
          while ((v95 & 0x2000000) == 0);
          v48 = v94;
        }
        else
        {
          v49 = *(_DWORD *)(v44 + 40);
        }
        if (v48 != v49)
        {
          v50 = v46 + 32 * v49;
          v51 = v46 + 32 * v48;
          while (2)
          {
            if (*(_BYTE *)v51)
              goto LABEL_70;
            v52 = *(_DWORD *)(v51 + 4);
            if ((v52 & 0x80000000) == 0)
              goto LABEL_70;
            v53 = *(_QWORD *)(*(_QWORD *)(v22 + 24) + 16 * (v52 & 0x7FFFFFFF) + 8);
            if (!v53)
              goto LABEL_70;
            v114 = a2;
            v115 = a3;
            v112 = v22;
            v113 = v23;
            v111 = v17;
            if ((*(_BYTE *)(v53 + 3) & 1) == 0)
            {
              v53 = *(_QWORD *)(v53 + 24);
              if (!v53 || (*(_BYTE *)(v53 + 3) & 1) == 0)
                goto LABEL_70;
            }
            v110 = *(_QWORD *)(v53 + 8);
            if (!v110)
              goto LABEL_70;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v132, v110);
            if (!v54)
              goto LABEL_70;
            v55 = (char *)v129[1];
            v56 = (char *)v130;
            v57 = (char *)v129[1];
            v58 = v130 - (unint64_t)v129[1];
            if ((void *)v130 == v129[1])
              v59 = 0;
            else
              v59 = (((_QWORD)v130 - (unint64_t)v129[1]) << 6) - 1;
            v60 = *((_QWORD *)&v131 + 1);
            v61 = *((_QWORD *)&v131 + 1) + v131;
            if (v59 == *((_QWORD *)&v131 + 1) + (_QWORD)v131)
            {
              if ((unint64_t)v131 >= 0x200)
              {
                *(_QWORD *)&v131 = v131 - 512;
                v63 = (char *)v129[1] + 8;
                v62 = *(_QWORD *)v129[1];
                v129[1] = (char *)v129[1] + 8;
                if ((_QWORD)v130 == *((_QWORD *)&v130 + 1))
                {
                  v64 = v129[0];
                  if (v63 <= v129[0])
                  {
                    if ((void *)v130 == v129[0])
                      v70 = 1;
                    else
                      v70 = (uint64_t)(v130 - (unint64_t)v129[0]) >> 2;
                    if (v70 >> 61)
                      goto LABEL_178;
                    v71 = (char *)operator new(8 * v70);
                    v73 = v56 - v63;
                    v72 = v56 == v63;
                    v56 = &v71[8 * (v70 >> 2)];
                    if (!v72)
                    {
                      v56 = &v71[8 * (v70 >> 2) + (v73 & 0xFFFFFFFFFFFFFFF8)];
                      v74 = 8 * (v73 >> 3);
                      v75 = &v71[8 * (v70 >> 2)];
                      do
                      {
                        v76 = *(_QWORD *)v63;
                        v63 += 8;
                        *(_QWORD *)v75 = v76;
                        v75 += 8;
                        v74 -= 8;
                      }
                      while (v74);
                    }
                    v129[0] = v71;
                    v129[1] = &v71[8 * (v70 >> 2)];
                    *(_QWORD *)&v130 = v56;
                    *((_QWORD *)&v130 + 1) = &v71[8 * v70];
                    if (v64)
                    {
                      operator delete(v64);
                      v56 = (char *)v130;
                    }
                  }
                  else
                  {
                    v65 = (v63 - (char *)v129[0]) >> 3;
                    if (v65 >= -1)
                      v66 = v65 + 1;
                    else
                      v66 = v65 + 2;
                    v67 = &v63[-8 * (v66 >> 1)];
                    v68 = v130 - (_QWORD)v63;
                    if ((char *)v130 != v63)
                    {
                      memmove(&v63[-8 * (v66 >> 1)], v55 + 8, v130 - (_QWORD)v63);
                      v56 = (char *)v129[1];
                    }
                    v69 = &v56[-8 * (v66 >> 1)];
                    v56 = &v67[v68];
                    v129[1] = v69;
                    *(_QWORD *)&v130 = &v67[v68];
                  }
                }
                *(_QWORD *)v56 = v62;
                goto LABEL_100;
              }
              if (v58 >= *((_QWORD *)&v130 + 1) - (unint64_t)v129[0])
              {
                if (*((void **)&v130 + 1) == v129[0])
                  v85 = 1;
                else
                  v85 = (uint64_t)(*((_QWORD *)&v130 + 1) - (unint64_t)v129[0]) >> 2;
                *(_QWORD *)&v126[16] = v23;
                if (v85 >> 61)
LABEL_178:
                  sub_1C4764EE4();
                v125[0] = operator new(8 * v85);
                v125[1] = (char *)v125[0] + v58;
                *(_QWORD *)v126 = (char *)v125[0] + v58;
                *(_QWORD *)&v126[8] = (char *)v125[0] + 8 * v85;
                *(_QWORD *)&v155 = operator new(0x1000uLL);
                sub_1C61351F0((uint64_t)v125, &v155);
                for (i = (_QWORD *)v130; i != v129[1]; sub_1C6135314(v125, i))
                  --i;
                v87 = v129[0];
                *(_OWORD *)v129 = *(_OWORD *)v125;
                v130 = *(_OWORD *)v126;
                if (v87)
                  operator delete(v87);
              }
              else if (*((_QWORD *)&v130 + 1) == (_QWORD)v130)
              {
                v125[0] = operator new(0x1000uLL);
                sub_1C6135314(v129, v125);
                v77 = (char *)v130;
                v79 = (char *)v129[1] + 8;
                v78 = *(_QWORD *)v129[1];
                v129[1] = (char *)v129[1] + 8;
                if ((_QWORD)v130 == *((_QWORD *)&v130 + 1))
                {
                  v80 = v129[0];
                  if (v79 <= v129[0])
                  {
                    if ((void *)v130 == v129[0])
                      v88 = 1;
                    else
                      v88 = (uint64_t)(v130 - (unint64_t)v129[0]) >> 2;
                    if (v88 >> 61)
                      goto LABEL_178;
                    v89 = (char *)operator new(8 * v88);
                    v90 = v77 - v79;
                    v72 = v77 == v79;
                    v77 = &v89[8 * (v88 >> 2)];
                    if (!v72)
                    {
                      v77 = &v89[8 * (v88 >> 2) + (v90 & 0xFFFFFFFFFFFFFFF8)];
                      v91 = 8 * (v90 >> 3);
                      v92 = &v89[8 * (v88 >> 2)];
                      do
                      {
                        v93 = *(_QWORD *)v79;
                        v79 += 8;
                        *(_QWORD *)v92 = v93;
                        v92 += 8;
                        v91 -= 8;
                      }
                      while (v91);
                    }
                    v129[0] = v89;
                    v129[1] = &v89[8 * (v88 >> 2)];
                    *(_QWORD *)&v130 = v77;
                    *((_QWORD *)&v130 + 1) = &v89[8 * v88];
                    if (v80)
                    {
                      operator delete(v80);
                      v77 = (char *)v130;
                    }
                  }
                  else
                  {
                    v81 = (v79 - (char *)v129[0]) >> 3;
                    if (v81 >= -1)
                      v82 = v81 + 1;
                    else
                      v82 = v81 + 2;
                    v83 = &v79[-8 * (v82 >> 1)];
                    v84 = v130 - (_QWORD)v79;
                    if ((_QWORD)v130 != (_QWORD)v79)
                    {
                      memmove(&v79[-8 * (v82 >> 1)], v79, v130 - (_QWORD)v79);
                      v79 = (char *)v129[1];
                    }
                    v77 = &v83[v84];
                    v129[1] = &v79[-8 * (v82 >> 1)];
                    *(_QWORD *)&v130 = v77;
                  }
                }
                *(_QWORD *)v77 = v78;
LABEL_100:
                *(_QWORD *)&v130 = v130 + 8;
              }
              else
              {
                v125[0] = operator new(0x1000uLL);
                sub_1C61351F0((uint64_t)v129, v125);
              }
              v60 = *((_QWORD *)&v131 + 1);
              v57 = (char *)v129[1];
              v61 = v131 + *((_QWORD *)&v131 + 1);
            }
            v17 = v111;
            *(_QWORD *)(*(_QWORD *)&v57[(v61 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v61 & 0x1FF)) = v110;
            *((_QWORD *)&v131 + 1) = v60 + 1;
            v22 = v112;
            v23 = v113;
            a2 = v114;
            a3 = v115;
LABEL_70:
            v51 += 32;
            if (v51 == v50)
              break;
            continue;
          }
        }
LABEL_64:
        if (++v43 == 21)
          break;
      }
      v125[0] = "Context:\n";
      v125[1] = (void *)9;
      sub_1C53B17B4((uint64_t)&v150, (const void **)v125);
      v96 = (llvm::MachineInstr **)v160;
      if ((_DWORD)v161)
      {
        v97 = 0;
        v98 = 8 * v161;
        do
        {
          std::to_string(&v122, v97);
          v99 = std::string::insert(&v122, 0, "ContextInst");
          v100 = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)v123 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          v124 = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          if (v124 >= 0)
            v101 = v123;
          else
            v101 = (void **)v123[0];
          if (v124 >= 0)
            v102 = HIBYTE(v124) & 0x7F;
          else
            v102 = (size_t)v123[1];
          llvm::DiagnosticInfoMIROptimization::MachineArgument::MachineArgument((uint64_t)&v155, v101, v102, v96[v97]);
          *(_OWORD *)v125 = v155;
          *(_QWORD *)v126 = v156;
          v156 = 0;
          v155 = 0uLL;
          *(_OWORD *)&v126[8] = v157;
          v127 = v158;
          v157 = 0uLL;
          v158 = 0;
          v128 = v159;
          v103 = sub_1C47E3888((uint64_t)&v138, (uint64_t)v125);
          v137[0] = "\n";
          v137[1] = (const void *)1;
          sub_1C53B17B4(v103 + 80, v137);
          if (SHIBYTE(v127) < 0)
            operator delete(*(void **)&v126[8]);
          if ((v126[7] & 0x80000000) != 0)
            operator delete(v125[0]);
          if (SHIBYTE(v158) < 0)
            operator delete((void *)v157);
          if (SHIBYTE(v156) < 0)
            operator delete((void *)v155);
          if (SHIBYTE(v124) < 0)
            operator delete(v123[0]);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
          ++v97;
          v98 -= 8;
        }
        while (v98);
        v96 = (llvm::MachineInstr **)v160;
      }
      a1 = v116;
      if (v96 != (llvm::MachineInstr **)&v162)
        free(v96);
      v104 = (void **)v129[1];
      v105 = (void **)v130;
      *((_QWORD *)&v131 + 1) = 0;
      v106 = v130 - (unint64_t)v129[1];
      if ((unint64_t)v130 - (unint64_t)v129[1] >= 0x11)
      {
        do
        {
          operator delete(*v104);
          v105 = (void **)v130;
          v104 = (void **)((char *)v129[1] + 8);
          v129[1] = v104;
          v106 = v130 - (_QWORD)v104;
        }
        while ((_QWORD)v130 - (_QWORD)v104 > 0x10uLL);
      }
      v107 = v106 >> 3;
      if (v107 == 1)
      {
        v108 = 256;
      }
      else
      {
        if (v107 != 2)
          goto LABEL_170;
        v108 = 512;
      }
      *(_QWORD *)&v131 = v108;
LABEL_170:
      if (v104 != v105)
      {
        do
        {
          v109 = *v104++;
          operator delete(v109);
        }
        while (v104 != v105);
        if ((void *)v130 != v129[1])
          *(_QWORD *)&v130 = v130 + (((unint64_t)v129[1] - v130 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v129[0])
        operator delete(v129[0]);
      if (*((_QWORD *)&v132 + 1) != (_QWORD)v132)
        free(*((void **)&v132 + 1));
    }
  }
  **(_QWORD **)(a1 + 360) |= 0x10uLL;
  sub_1C554B250(0, (llvm::Value **)a1, a2, (uint64_t ****)a3, (llvm::DiagnosticInfoOptimizationBase *)&v138);
  v138 = &off_1E814E790;
  v19 = (char *)v150;
  if ((_DWORD)v151)
  {
    v20 = (unint64_t)v151 << 6;
    do
    {
      v21 = (void **)&v19[v20];
      if (v19[v20 - 17] < 0)
        operator delete(*(v21 - 5));
      if (*((char *)v21 - 41) < 0)
        operator delete(*(v21 - 8));
      v20 -= 64;
    }
    while (v20);
    v19 = (char *)v150;
  }
  if (v19 != v17)
    free(v19);
}

_QWORD *sub_1C554BF50@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  void (**v5)(_QWORD *);
  _QWORD *result;
  uint64_t (**v7)(_QWORD *);
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10[0] = &off_1E816EFF0;
  v10[1] = sub_1C554C7E0;
  v11 = v10;
  v8[0] = &off_1E816F038;
  v8[1] = sub_1C554C7F8;
  v9 = v8;
  sub_1C554C3AC(a1, a2, (uint64_t)v10, (uint64_t)v8, a3, 0, a4);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = (void (**)(_QWORD *))(v8[0] + 32);
    v4 = v8;
LABEL_3:
    (*v5)(v4);
    goto LABEL_4;
  }
  if (v9)
  {
    v5 = (void (**)(_QWORD *))(*v9 + 40);
    goto LABEL_3;
  }
LABEL_4:
  result = v11;
  if (v11 == v10)
  {
    v7 = (uint64_t (**)(_QWORD *))(v10[0] + 32);
    result = v10;
    return (_QWORD *)(*v7)(result);
  }
  if (v11)
  {
    v7 = (uint64_t (**)(_QWORD *))(*v11 + 40);
    return (_QWORD *)(*v7)(result);
  }
  return result;
}

uint64_t sub_1C554C050(int a1, uint64_t a2)
{
  _QWORD *v2;
  void (**v3)(_QWORD *);
  _QWORD *v4;
  void (**v5)(_QWORD *);
  size_t v7;
  void *v8;
  void *v9;
  void *__src;
  unsigned int v11;
  char v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15[0] = &off_1E816EFF0;
  v15[1] = sub_1C554C7E0;
  v16 = v15;
  v13[0] = &off_1E816F038;
  v13[1] = sub_1C554C7F8;
  v14 = v13;
  sub_1C554C3AC(a1, a2, (uint64_t)v15, (uint64_t)v13, 0, 0, &__src);
  v2 = v14;
  if (v14 == v13)
  {
    v3 = (void (**)(_QWORD *))(v13[0] + 32);
    v2 = v13;
LABEL_3:
    (*v3)(v2);
    goto LABEL_4;
  }
  if (v14)
  {
    v3 = (void (**)(_QWORD *))(*v14 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v4 = v16;
  if (v16 == v15)
  {
    v5 = (void (**)(_QWORD *))(v15[0] + 32);
    v4 = v15;
LABEL_6:
    (*v5)(v4);
    goto LABEL_7;
  }
  if (v16)
  {
    v5 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_6;
  }
LABEL_7:
  if (!v12)
    return 0;
  if (v11 >= 0x41)
  {
    v7 = (((unint64_t)v11 + 63) >> 3) & 0x3FFFFFF8;
    v8 = (void *)operator new[]();
    v9 = __src;
    memcpy(v8, __src, v7);
    if (v9)
      MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
    MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
    return 0;
  }
  return (uint64_t)((_QWORD)__src << -(char)v11) >> -(char)v11;
}

uint64_t sub_1C554C1FC(int a1, uint64_t a2)
{
  _QWORD *v2;
  void (**v3)(_QWORD *);
  _QWORD *v4;
  void (**v5)(_QWORD *);
  size_t v7;
  void *v8;
  void *v9;
  void *__src;
  unsigned int v11;
  char v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15[0] = &off_1E816EFF0;
  v15[1] = sub_1C554C894;
  v16 = v15;
  v13[0] = &off_1E816F038;
  v13[1] = sub_1C554C8B0;
  v14 = v13;
  sub_1C554C3AC(a1, a2, (uint64_t)v15, (uint64_t)v13, 0, 0, &__src);
  v2 = v14;
  if (v14 == v13)
  {
    v3 = (void (**)(_QWORD *))(v13[0] + 32);
    v2 = v13;
LABEL_3:
    (*v3)(v2);
    goto LABEL_4;
  }
  if (v14)
  {
    v3 = (void (**)(_QWORD *))(*v14 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v4 = v16;
  if (v16 == v15)
  {
    v5 = (void (**)(_QWORD *))(v15[0] + 32);
    v4 = v15;
LABEL_6:
    (*v5)(v4);
    goto LABEL_7;
  }
  if (v16)
  {
    v5 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_6;
  }
LABEL_7:
  if (v12)
  {
    if (v11 < 0x41)
      return (uint64_t)((_QWORD)__src << -(char)v11) >> -(char)v11;
    v7 = (((unint64_t)v11 + 63) >> 3) & 0x3FFFFFF8;
    v8 = (void *)operator new[]();
    v9 = __src;
    memcpy(v8, __src, v7);
    if (v9)
      MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
    MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  }
  return 0;
}

void sub_1C554C3AC(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  void *v36;
  unsigned int v37;
  void *v38;
  size_t v39;
  _BOOL8 v40;
  void *v41;
  unsigned int v42;
  void *__src;
  unsigned int v44;
  char v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[5];

  v48[4] = *MEMORY[0x1E0C80C00];
  v46 = v48;
  v47 = 0x400000000;
  v7 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v8 = *v7;
  if (!v8)
    goto LABEL_4;
  LODWORD(v9) = a1;
  v10 = a5 ^ 1;
  while (2)
  {
    v11 = a2;
    v12 = a3;
    v13 = a6;
    v14 = a4;
    v15 = a7;
    if ((*(_BYTE *)(v8 + 3) & 1) != 0)
    {
      v16 = a3;
    }
    else
    {
      v8 = *(_QWORD *)(v8 + 24);
      if (!v8)
        goto LABEL_4;
      v16 = a3;
      if ((*(_BYTE *)(v8 + 3) & 1) == 0)
        goto LABEL_4;
    }
    v17 = *(_QWORD *)(v8 + 8);
    if (!v17)
      goto LABEL_4;
    __src = *(void **)(v8 + 8);
    v18 = *(_QWORD *)(v16 + 24);
    if (!v18)
      goto LABEL_61;
    if ((((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v18 + 48))(v18, &__src) | v10) & 1) == 0)
    {
      v19 = **(unsigned __int16 **)(v17 + 16);
      switch(**(_WORD **)(v17 + 16))
      {
        case 'v':
          if ((v13 & 1) == 0)
            goto LABEL_54;
          goto LABEL_19;
        case 'w':
        case '|':
        case '~':
LABEL_19:
          v21 = *(_QWORD *)(v17 + 32);
          v20 = v17 + 32;
          v22 = *(_DWORD *)(v21 + 4);
          if (v22 < 0 && (v23 = v22 & 0x7FFFFFFF, v23 < *(_DWORD *)(v11 + 432)))
            v24 = *(void **)(*(_QWORD *)(v11 + 424) + 8 * v23);
          else
            v24 = 0;
          __src = v24;
          v26 = sub_1C4825F50((unint64_t *)&__src);
          if ((_DWORD)v25 == 1)
          v27 = v47;
          if (v47 >= (unint64_t)HIDWORD(v47))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 8);
            v27 = v47;
          }
          *((_QWORD *)v46 + v27) = v19 | (v26 << 32);
          LODWORD(v47) = v47 + 1;
          goto LABEL_28;
        case 'x':
        case 'y':
        case 'z':
        case '{':
        case '}':
          goto LABEL_54;
        default:
          if ((_DWORD)v19 == 19)
          {
            v9 = *(unsigned int *)(*(_QWORD *)(v17 + 32) + 36);
            if ((unint64_t)(v9 - 1) <= 0x3FFFFFFE)
              goto LABEL_54;
          }
          else
          {
            if ((_DWORD)v19 != 81)
              goto LABEL_54;
            v20 = v17 + 32;
LABEL_28:
            v9 = *(unsigned int *)(*(_QWORD *)v20 + 36);
          }
          a2 = v11;
          v28 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
          if ((int)v9 >= 0)
            v28 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v9);
          v8 = *v28;
          a7 = v15;
          a4 = v14;
          a6 = v13;
          a3 = v12;
          if (v8)
            continue;
          goto LABEL_4;
      }
    }
    break;
  }
  __src = (void *)v17;
  v29 = *(_QWORD *)(v12 + 24);
  if (!v29)
    goto LABEL_61;
  v30 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, &__src);
  a7 = v15;
  if ((v30 & 1) != 0)
  {
    v41 = (void *)v17;
    v31 = *(_QWORD *)(v14 + 24);
    if (v31)
    {
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v31 + 48))(&__src, v31, &v41);
      if (v45)
      {
        v32 = v47;
        while (v32)
        {
          v34 = *((_DWORD *)v46 + 2 * v32 - 2);
          v33 = *((_DWORD *)v46 + 2 * v32-- - 1);
          LODWORD(v47) = v32;
          switch(v34)
          {
            case 'v':
            case '|':
              llvm::APInt::sext((llvm::APInt *)&__src, v33, (llvm::APInt *)&v41);
              goto LABEL_47;
            case 'w':
              llvm::APInt::trunc((llvm::APInt *)&__src, v33, (llvm::APInt *)&v41);
              goto LABEL_47;
            case '~':
              llvm::APInt::zext((llvm::APInt *)&__src, v33, (uint64_t)&v41);
LABEL_47:
              if (v44 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              __src = v41;
              v44 = v42;
              v32 = v47;
              break;
            default:
              break;
          }
        }
        v35 = v44;
        if (v44 >= 0x41)
        {
          v39 = (((unint64_t)v44 + 63) >> 3) & 0x3FFFFFF8;
          v38 = (void *)operator new[]();
          v36 = __src;
          memcpy(v38, __src, v39);
          v37 = v44;
        }
        else
        {
          v36 = __src;
          v37 = v44;
          v38 = __src;
        }
        *((_DWORD *)v15 + 2) = v35;
        *(_QWORD *)v15 = v38;
        *((_DWORD *)v15 + 4) = v9;
        v15[24] = 1;
        if (v45 && v37 >= 0x41 && v36)
          MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
      }
      else
      {
LABEL_54:
        *v15 = 0;
        v15[24] = 0;
      }
      goto LABEL_5;
    }
LABEL_61:
    sub_1C485C2F0();
    sub_1C554C7E0(v40);
    return;
  }
LABEL_4:
  *a7 = 0;
  a7[24] = 0;
LABEL_5:
  if (v46 != v48)
    free(v46);
}

BOOL sub_1C554C7E0(_BOOL8 result)
{
  if (result)
    return **(unsigned __int16 **)(result + 16) == 120;
  return result;
}

_QWORD *sub_1C554C7F8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  size_t v7;
  void *v8;

  v3 = result[4];
  if (*(_BYTE *)(v3 + 32) == 2)
  {
    v4 = *(_QWORD *)(v3 + 48);
    v5 = *(unsigned int *)(v4 + 32);
    *(_DWORD *)(a2 + 8) = v5;
    if (v5 > 0x40)
    {
      v7 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
      v8 = (void *)operator new[]();
      *(_QWORD *)a2 = v8;
      result = memcpy(v8, *(const void **)(v4 + 24), v7);
    }
    else
    {
      *(_QWORD *)a2 = *(_QWORD *)(v4 + 24);
    }
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

BOOL sub_1C554C894(_BOOL8 result)
{
  if (result)
    return (**(_WORD **)(result + 16) & 0xFFFE) == 120;
  return result;
}

uint64_t sub_1C554C8B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  llvm::detail::DoubleAPFloat *v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  int v13;

  v3 = *(_QWORD *)(result + 32);
  v4 = *(unsigned __int8 *)(v3 + 32);
  if (v4 == 3)
  {
    v8 = *(_QWORD *)(v3 + 48);
    v10 = *(void **)(v8 + 32);
    v9 = (llvm::detail::DoubleAPFloat *)(v8 + 32);
    if (v10 == &unk_1C866F1C0)
      result = (uint64_t)llvm::detail::DoubleAPFloat::bitcastToAPInt(v9, (unsigned int *)&v12);
    else
      result = llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v9, (unsigned int *)&v12);
    *(_DWORD *)(a2 + 8) = v13;
    *(_QWORD *)a2 = v12;
  }
  else
  {
    if (v4 != 2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }
    v5 = *(_QWORD *)(v3 + 48);
    v6 = *(unsigned int *)(v5 + 32);
    *(_DWORD *)(a2 + 8) = v6;
    if (v6 > 0x40)
    {
      v11 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
      v7 = (void *)operator new[]();
      result = (uint64_t)memcpy(v7, *(const void **)(v5 + 24), v11);
    }
    else
    {
      v7 = *(void **)(v5 + 24);
    }
    *(_QWORD *)a2 = v7;
  }
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

_QWORD *sub_1C554C99C@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  void (**v7)(_QWORD *);
  _QWORD *result;
  uint64_t (**v9)(_QWORD *);
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  _BOOL4 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD *v33;
  unsigned int v34;
  int v35;
  char v36;
  void *v37;
  _QWORD *v38;
  int v39;
  char v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v43[0] = &off_1E816EFF0;
  v43[1] = sub_1C554CC7C;
  v44 = v43;
  v41[0] = &off_1E816F038;
  v41[1] = sub_1C554C8B0;
  v42 = v41;
  sub_1C554C3AC(a1, a2, (uint64_t)v43, (uint64_t)v41, a3, 0, &v33);
  v6 = v42;
  if (v42 == v41)
  {
    v7 = (void (**)(_QWORD *))(v41[0] + 32);
    v6 = v41;
LABEL_3:
    (*v7)(v6);
    goto LABEL_4;
  }
  if (v42)
  {
    v7 = (void (**)(_QWORD *))(*v42 + 40);
    goto LABEL_3;
  }
LABEL_4:
  result = v44;
  if (v44 == v43)
  {
    v9 = (uint64_t (**)(_QWORD *))(v43[0] + 32);
    result = v43;
LABEL_6:
    result = (_QWORD *)(*v9)(result);
    goto LABEL_7;
  }
  if (v44)
  {
    v9 = (uint64_t (**)(_QWORD *))(*v44 + 40);
    goto LABEL_6;
  }
LABEL_7:
  if (v36)
  {
    v10 = v35;
    v11 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
    if (v35 >= 0)
      v11 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v35);
    v12 = *v11;
    if ((*(_BYTE *)(v12 + 3) & 1) == 0)
      v12 = *(_QWORD *)(v12 + 24);
    v13 = *(_QWORD *)(v12 + 8);
    if (**(_WORD **)(v13 + 16) == 121)
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 48);
    else
      v14 = 0;
    v15 = *(_QWORD *)(v14 + 32);
    if ((_UNKNOWN *)v15 == &unk_1C866F1C0)
    {
      v31 = v35;
      result = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v37, (const llvm::detail::DoubleAPFloat *)(v14 + 32));
      v10 = v31;
    }
    else
    {
      v37 = *(void **)(v14 + 32);
      if ((*(_DWORD *)(v15 + 8) + 64) >= 0x80)
      {
        v30 = v15;
        v32 = v35;
        v29 = v14;
        result = (_QWORD *)operator new[]();
        v14 = v29;
        v15 = v30;
        v10 = v32;
        v38 = result;
      }
      v16 = *(_BYTE *)(v14 + 52);
      v17 = v16 & 7;
      v40 = v16 & 0xF;
      v39 = *(_DWORD *)(v14 + 48);
      v19 = (v16 & 6) != 0 && v17 != 3;
      if (v17 == 1 || v19)
      {
        v20 = *(unsigned int *)(v15 + 8);
        if ((v20 - 64) <= 0xFFFFFF7F)
          v21 = result;
        else
          v21 = &v38;
        v24 = *(uint64_t **)(v14 + 40);
        v22 = (uint64_t *)(v14 + 40);
        v23 = v24;
        if ((*(_DWORD *)(*(v22 - 1) + 8) - 64) < 0xFFFFFF80)
          v22 = v23;
        if (v20 <= 0xFFFFFFBF)
        {
          v25 = (unint64_t)(v20 + 64) >> 6;
          do
          {
            v26 = *v22++;
            *v21++ = v26;
            --v25;
          }
          while (v25);
        }
      }
    }
    v27 = v37;
    v28 = v38;
    if (v37 != &unk_1C866F1C0)
    {
      *(_DWORD *)(a4 + 24) = v39;
      *(_BYTE *)(a4 + 28) = *(_BYTE *)(a4 + 28) & 0xF0 | v40 & 0xF;
    }
    *(_QWORD *)(a4 + 8) = v27;
    *(_QWORD *)(a4 + 16) = v28;
    *(_DWORD *)(a4 + 32) = v10;
    *(_BYTE *)(a4 + 40) = 1;
    if (v34 >= 0x41)
    {
      result = v33;
      if (v33)
        return (_QWORD *)MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 40) = 0;
  }
  return result;
}

BOOL sub_1C554CC7C(_BOOL8 result)
{
  if (result)
    return **(unsigned __int16 **)(result + 16) == 121;
  return result;
}

uint64_t sub_1C554CC94@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = (uint64_t *)(v3 + 16 * (result & 0x7FFFFFFF) + 8);
  if ((int)result >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * result);
  v5 = *v4;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
    v5 = *(_QWORD *)(v5 + 24);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4);
  if (v7 < 0
    && (v8 = v7 & 0x7FFFFFFF, v9 = *(_DWORD *)(a2 + 432), v8 < v9)
    && (v10 = *(_QWORD *)(a2 + 424), (*(_QWORD *)(v10 + 8 * v8) & 0xFFFFFFFFFFFFFFF9) != 0))
  {
    while (1)
    {
      v11 = **(unsigned __int16 **)(v6 + 16);
      if ((v11 - 42) >= 3 && v11 != 19)
        break;
      v13 = *(unsigned int *)(*(_QWORD *)(v6 + 32) + 36);
      if ((v13 & 0x80000000) == 0)
        break;
      v14 = v13 & 0x7FFFFFFF;
      if ((v13 & 0x7FFFFFFF) >= v9 || (*(_QWORD *)(v10 + 8 * v14) & 0xFFFFFFFFFFFFFFF9) == 0)
        break;
      v6 = 0;
      v15 = *(_QWORD *)(v3 + 16 * v14 + 8);
      result = v13;
      if (v15)
      {
        if ((*(_BYTE *)(v15 + 3) & 1) != 0
          || (v6 = 0, v15 = *(_QWORD *)(v15 + 24), result = v13, v15)
          && (v6 = 0, result = v13, (*(_BYTE *)(v15 + 3) & 1) != 0))
        {
          v6 = *(_QWORD *)(v15 + 8);
          result = v13;
        }
      }
    }
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(a3 + 8) = result;
    v16 = 1;
  }
  else
  {
    v16 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v16;
  return result;
}

void sub_1C554CD98(int a1@<W0>, uint64_t a2@<X8>, const llvm::APInt *a3@<D0>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  unint64_t v11;
  int v12;

  if (a1 == 32)
  {
    *(float *)&v4 = *(double *)&a3;
    v12 = 32;
    v11 = v4;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v7, (const llvm::APInt **)&v11);
    v5 = v8;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 24) = v9;
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a2 + 28) & 0xF0 | v10 & 0xF;
  }
  else if (a1 == 64)
  {
    sub_1C47BC1BC(a2, *(double *)&a3);
  }
  else
  {
    v12 = 64;
    v11 = (unint64_t)a3;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v7, (const llvm::APInt **)&v11);
    v6 = v8;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 24) = v9;
    *(_BYTE *)(a2 + 28) = *(_BYTE *)(a2 + 28) & 0xF0 | v10 & 0xF;
    llvm::APFloat::convert(a2, &unk_1C866F15C, 1, &v7);
  }
}

void sub_1C554CE74(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t (***v9)();
  void (**v10)(uint64_t (***)());
  uint64_t (***v11)();
  void (**v12)(uint64_t (***)());
  uint64_t (***v13)();
  void (**v14)(uint64_t (***)());
  uint64_t (***v15)();
  void (**v16)(uint64_t (***)());
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  void *v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  unsigned int *v24;
  unsigned int v25;
  _BOOL4 v26;
  unsigned int *v27;
  void **p_src;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BOOL4 v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  size_t v50;
  unsigned int v51;
  size_t v52;
  size_t v53;
  uint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  int64_t v59;
  uint64_t *v60;
  unsigned int v61;
  int v62;
  int64_t v63;
  uint64_t *v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _BOOL4 v73;
  unint64_t v74;
  int v75;
  int64_t v76;
  uint64_t *v77;
  unsigned int v78;
  size_t v79;
  uint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  int64_t v85;
  uint64_t *v86;
  unsigned int v87;
  size_t v88;
  uint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  size_t v93;
  unsigned int v94;
  uint64_t (**v95)();
  uint64_t v96;
  uint64_t **v97;
  uint64_t v98;
  uint64_t **v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  void *v112;
  void *__src;
  unsigned int v114;
  char v115;
  unint64_t v116;
  unsigned int v117;
  char v118;
  uint64_t (**v119)();
  uint64_t (*v120)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t (***v121)();
  uint64_t (**v122)();
  BOOL (*v123)(_BOOL8);
  void **v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v122 = &off_1E816EFF0;
  v123 = sub_1C554C894;
  v124 = (void **)&v122;
  v119 = &off_1E816F038;
  v120 = sub_1C554C8B0;
  v121 = &v119;
  sub_1C554C3AC(a3, a4, (uint64_t)&v122, (uint64_t)&v119, 0, 0, &v116);
  v9 = v121;
  if (v121 == &v119)
  {
    v10 = (void (**)(uint64_t (***)()))(v119 + 4);
    v9 = &v119;
LABEL_3:
    (*v10)(v9);
    goto LABEL_4;
  }
  if (v121)
  {
    v10 = (void (**)(uint64_t (***)()))(*v121 + 5);
    goto LABEL_3;
  }
LABEL_4:
  v11 = (uint64_t (***)())v124;
  if (v124 == (void **)&v122)
  {
    v12 = (void (**)(uint64_t (***)()))(v122 + 4);
    v11 = &v122;
LABEL_6:
    (*v12)(v11);
    goto LABEL_7;
  }
  if (v124)
  {
    v12 = (void (**)(uint64_t (***)()))((char *)*v124 + 40);
    goto LABEL_6;
  }
LABEL_7:
  if (!v118)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 16) = 0;
    return;
  }
  v122 = &off_1E816EFF0;
  v123 = sub_1C554C894;
  v124 = (void **)&v122;
  v119 = &off_1E816F038;
  v120 = sub_1C554C8B0;
  v121 = &v119;
  sub_1C554C3AC(a2, a4, (uint64_t)&v122, (uint64_t)&v119, 0, 0, &__src);
  v13 = v121;
  if (v121 == &v119)
  {
    v14 = (void (**)(uint64_t (***)()))(v119 + 4);
    v13 = &v119;
LABEL_10:
    (*v14)(v13);
    goto LABEL_11;
  }
  if (v121)
  {
    v14 = (void (**)(uint64_t (***)()))(*v121 + 5);
    goto LABEL_10;
  }
LABEL_11:
  v15 = (uint64_t (***)())v124;
  if (v124 == (void **)&v122)
  {
    v16 = (void (**)(uint64_t (***)()))(v122 + 4);
    v15 = &v122;
  }
  else
  {
    if (!v124)
      goto LABEL_14;
    v16 = (void (**)(uint64_t (***)()))((char *)*v124 + 40);
  }
  (*v16)(v15);
LABEL_14:
  if (!v115)
  {
LABEL_132:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 16) = 0;
    goto LABEL_184;
  }
  if (a1 <= 127)
  {
    switch(a1)
    {
      case '-':
        goto LABEL_22;
      case '.':
        LODWORD(v17) = v114;
        if (v114 >= 0x41)
        {
          v66 = v114 + 63;
          v37 = (void *)operator new[]();
          memcpy(v37, __src, (v66 >> 3) & 0x3FFFFFF8);
          v67 = 0;
          v68 = (unint64_t *)v116;
          v40 = v66 >> 6;
          v69 = (unint64_t *)v37;
          v70 = v66 >> 6;
          do
          {
            v71 = *v68++;
            v72 = *v69 - v71;
            v73 = *v69 < v71;
            v74 = *v69 + ~v71;
            if (v67)
            {
              v67 = v74 >= *v69;
            }
            else
            {
              v74 = v72;
              v67 = v73;
            }
            *v69++ = v74;
            --v70;
          }
          while (v70);
          goto LABEL_115;
        }
        v18 = (int64_t)__src - v116;
        if (v114)
          goto LABEL_24;
        goto LABEL_19;
      case '/':
        llvm::APInt::operator*((uint64_t)&__src, &v116, (uint64_t)&v122);
        goto LABEL_139;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case '?':
      case '@':
        goto LABEL_132;
      case ';':
        if (v117 <= 0x40)
        {
          if (!v116)
            goto LABEL_132;
          goto LABEL_122;
        }
        v75 = 0;
        v76 = ((unint64_t)v117 + 63) >> 6;
        do
        {
          v22 = v76-- < 1;
          if (v22)
            break;
          v77 = *(uint64_t **)(v116 + 8 * v76);
          v75 += __clz((unint64_t)v77);
        }
        while (!v77);
        v78 = v117 | 0xFFFFFFC0;
        if ((v117 & 0x3F) == 0)
          v78 = 0;
        if (v75 + v78 != v117)
        {
LABEL_122:
          llvm::APInt::sdiv((llvm::APInt *)&__src, (const void **)&v116, (llvm::APInt *)&v122);
          goto LABEL_139;
        }
        goto LABEL_132;
      case '<':
        if (v117 <= 0x40)
        {
          if (!v116)
            goto LABEL_132;
          goto LABEL_102;
        }
        v58 = 0;
        v59 = ((unint64_t)v117 + 63) >> 6;
        do
        {
          v22 = v59-- < 1;
          if (v22)
            break;
          v60 = *(uint64_t **)(v116 + 8 * v59);
          v58 += __clz((unint64_t)v60);
        }
        while (!v60);
        v61 = v117 | 0xFFFFFFC0;
        if ((v117 & 0x3F) == 0)
          v61 = 0;
        if (v58 + v61 != v117)
        {
LABEL_102:
          llvm::APInt::udiv((llvm::APInt *)&__src, (const llvm::APInt *)&v116, (llvm::APInt *)&v122);
          goto LABEL_139;
        }
        goto LABEL_132;
      case '=':
        if (v117 <= 0x40)
        {
          if (!v116)
            goto LABEL_132;
          goto LABEL_133;
        }
        v84 = 0;
        v85 = ((unint64_t)v117 + 63) >> 6;
        do
        {
          v22 = v85-- < 1;
          if (v22)
            break;
          v86 = *(uint64_t **)(v116 + 8 * v85);
          v84 += __clz((unint64_t)v86);
        }
        while (!v86);
        v87 = v117 | 0xFFFFFFC0;
        if ((v117 & 0x3F) == 0)
          v87 = 0;
        if (v84 + v87 != v117)
        {
LABEL_133:
          llvm::APInt::srem((llvm::APInt *)&__src, (const void **)&v116, (llvm::APInt *)&v122);
          goto LABEL_139;
        }
        goto LABEL_132;
      case '>':
        if (v117 <= 0x40)
        {
          if (!v116)
            goto LABEL_132;
          goto LABEL_109;
        }
        v62 = 0;
        v63 = ((unint64_t)v117 + 63) >> 6;
        do
        {
          v22 = v63-- < 1;
          if (v22)
            break;
          v64 = *(uint64_t **)(v116 + 8 * v63);
          v62 += __clz((unint64_t)v64);
        }
        while (!v64);
        v65 = v117 | 0xFFFFFFC0;
        if ((v117 & 0x3F) == 0)
          v65 = 0;
        if (v62 + v65 != v117)
        {
LABEL_109:
          llvm::APInt::urem((llvm::APInt *)&__src, (const llvm::APInt *)&v116, (llvm::APInt *)&v122);
          goto LABEL_139;
        }
        break;
      case 'A':
        v17 = v114;
        if (v114 <= 0x40)
        {
          v18 = (int64_t)__src;
          v19 = v116;
          goto LABEL_71;
        }
        v53 = (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8;
        v37 = (void *)operator new[]();
        memcpy(v37, __src, v53);
        v54 = (uint64_t *)v116;
        v55 = (unint64_t)(v17 + 63) >> 6;
        v56 = v37;
        do
        {
          v57 = *v54++;
          *v56++ &= v57;
          --v55;
        }
        while (v55);
        goto LABEL_136;
      case 'B':
        v17 = v114;
        if (v114 > 0x40)
        {
          v88 = (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8;
          v37 = (void *)operator new[]();
          memcpy(v37, __src, v88);
          v89 = (uint64_t *)v116;
          v90 = (unint64_t)(v17 + 63) >> 6;
          v91 = v37;
          do
          {
            v92 = *v89++;
            *v91++ |= v92;
            --v90;
          }
          while (v90);
        }
        else
        {
          v37 = (void *)(v116 | (unint64_t)__src);
        }
        goto LABEL_136;
      case 'C':
        v17 = v114;
        if (v114 > 0x40)
        {
          v79 = (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8;
          v37 = (void *)operator new[]();
          memcpy(v37, __src, v79);
          v80 = (uint64_t *)v116;
          v81 = (unint64_t)(v17 + 63) >> 6;
          v82 = v37;
          do
          {
            v83 = *v80++;
            *v82++ ^= v83;
            --v81;
          }
          while (v81);
        }
        else
        {
          v37 = (void *)(v116 ^ (unint64_t)__src);
        }
        goto LABEL_136;
      default:
        if (a1 != 127)
          goto LABEL_132;
        v35 = v114;
        LODWORD(v123) = v114;
        if (v114 > 0x40)
        {
          v93 = (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8;
          v122 = (uint64_t (**)())operator new[]();
          memcpy(v122, __src, v93);
        }
        else
        {
          v122 = (uint64_t (**)())__src;
        }
        v94 = sub_1C47EE5B8((uint64_t ***)&v116, v35);
        sub_1C4888094((uint64_t)&v122, v94);
        goto LABEL_139;
    }
    goto LABEL_132;
  }
  switch(a1)
  {
    case 193:
LABEL_22:
      LODWORD(v17) = v114;
      if (v114 >= 0x41)
      {
        v36 = v114 + 63;
        v37 = (void *)operator new[]();
        memcpy(v37, __src, (v36 >> 3) & 0x3FFFFFF8);
        v38 = 0;
        v39 = (uint64_t *)v116;
        v40 = v36 >> 6;
        v41 = (unint64_t *)v37;
        v42 = v36 >> 6;
        do
        {
          v43 = *v39++;
          v44 = v43 + *v41;
          v45 = v44 + 1 <= *v41;
          if (v38)
          {
            ++v44;
            v38 = v45;
          }
          else
          {
            v38 = v44 < *v41;
          }
          *v41++ = v44;
          --v42;
        }
        while (v42);
LABEL_115:
        *((_QWORD *)v37 + (v40 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
      }
      else
      {
        v18 = (int64_t)__src + v116;
        if (v114)
LABEL_24:
          v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
        else
LABEL_19:
          v19 = 0;
LABEL_71:
        v37 = (void *)(v19 & v18);
      }
LABEL_136:
      *(_DWORD *)(a5 + 8) = v17;
      *(_QWORD *)a5 = v37;
      goto LABEL_183;
    case 194:
      goto LABEL_132;
    case 195:
      if (v114 <= 0x40)
      {
        v25 = v117;
        LOBYTE(v26) = (uint64_t)((_QWORD)__src << -(char)v114) >> -(char)v114 < (uint64_t)(v116 << -(char)v114) >> -(char)v114;
        if ((uint64_t)((_QWORD)__src << -(char)v114) >> -(char)v114 >= (uint64_t)(v116 << -(char)v114) >> -(char)v114)
          goto LABEL_38;
        goto LABEL_144;
      }
      v96 = *((_QWORD *)__src + ((v114 - 1) >> 6)) & (1 << (v114 - 1));
      v26 = v96 != 0;
      v25 = v117;
      v97 = (uint64_t **)(v116 + 8 * ((v117 - 1) >> 6));
      if (v117 < 0x41)
        v97 = (uint64_t **)&v116;
      if (((v26 ^ ((unint64_t)*v97 >> (v117 - 1))) & 1) != 0)
      {
        if (!v96)
          goto LABEL_38;
LABEL_144:
        v27 = (unsigned int *)(a5 + 8);
        p_src = &__src;
        if (!v26)
          goto LABEL_146;
        goto LABEL_145;
      }
      v100 = (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8;
      while (v100)
      {
        v101 = *(_QWORD *)((char *)__src + v100 - 8);
        v102 = *(_QWORD *)(v116 - 8 + v100);
        v100 -= 8;
        if (v101 != v102)
        {
          LOBYTE(v26) = v101 <= v102;
          if (v101 <= v102)
            goto LABEL_144;
LABEL_38:
          v27 = (unsigned int *)(a5 + 8);
          p_src = (void **)&v116;
          if (!v26)
            goto LABEL_146;
LABEL_145:
          v25 = v114;
          goto LABEL_146;
        }
      }
      v27 = (unsigned int *)(a5 + 8);
      p_src = (void **)&v116;
LABEL_146:
      *v27 = v25;
      if (v25 > 0x40)
        goto LABEL_182;
      goto LABEL_180;
    case 196:
      v29 = v114;
      if (v114 > 0x40)
      {
        v98 = *((_QWORD *)__src + ((v114 - 1) >> 6)) & (1 << (v114 - 1));
        v34 = v117;
        v99 = (uint64_t **)(v116 + 8 * ((v117 - 1) >> 6));
        if (v117 < 0x41)
          v99 = (uint64_t **)&v116;
        if ((v98 != 0) == (((unint64_t)*v99 >> (v117 - 1)) & 1))
        {
          v103 = (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v103)
            {
              v33 = 0;
              goto LABEL_45;
            }
            v104 = *(_QWORD *)((char *)__src + v103 - 8);
            v105 = *(_QWORD *)(v116 - 8 + v103);
            v103 -= 8;
          }
          while (v104 == v105);
          if (v104 > v105)
            v33 = 1;
          else
            v33 = -1;
        }
        else if (v98)
        {
          v33 = -1;
        }
        else
        {
          v33 = 1;
        }
      }
      else
      {
        v30 = (uint64_t)((_QWORD)__src << -(char)v114) >> -(char)v114;
        v31 = (uint64_t)(v116 << -(char)v114) >> -(char)v114;
        v22 = v30 < v31;
        v32 = v30 > v31;
        if (v22)
          v33 = -1;
        else
          v33 = v32;
        v34 = v117;
      }
LABEL_45:
      if (v33 <= 0)
        p_src = (void **)&v116;
      else
        p_src = &__src;
      if (v33 <= 0)
        v29 = v34;
      *(_DWORD *)(a5 + 8) = v29;
      if (v29 > 0x40)
        goto LABEL_182;
      goto LABEL_180;
    case 197:
      v21 = v114;
      if (v114 > 0x40)
      {
        v109 = (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8;
        while (v109)
        {
          v110 = *(_QWORD *)((char *)__src + v109 - 8);
          v111 = *(_QWORD *)(v116 - 8 + v109);
          v109 -= 8;
          if (v110 != v111)
          {
            v23 = v110 <= v111;
            if (v110 > v111)
              goto LABEL_176;
LABEL_54:
            v24 = (unsigned int *)(a5 + 8);
            goto LABEL_55;
          }
        }
LABEL_193:
        v24 = (unsigned int *)(a5 + 8);
        p_src = (void **)&v116;
        goto LABEL_178;
      }
      v23 = (unint64_t)__src < v116;
      if ((unint64_t)__src < v116)
        goto LABEL_54;
LABEL_176:
      v24 = (unsigned int *)(a5 + 8);
LABEL_177:
      p_src = (void **)&v116;
      if (!v23)
LABEL_178:
        v21 = v117;
LABEL_179:
      *v24 = v21;
      if (v21 > 0x40)
      {
LABEL_182:
        v112 = (void *)operator new[]();
        *(_QWORD *)a5 = v112;
        memcpy(v112, *p_src, (((unint64_t)*(unsigned int *)(a5 + 8) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
LABEL_180:
        v95 = (uint64_t (**)())*p_src;
LABEL_181:
        *(_QWORD *)a5 = v95;
      }
LABEL_183:
      *(_BYTE *)(a5 + 16) = 1;
LABEL_184:
      if (v115 && v114 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (v118 && v117 >= 0x41)
      {
        if (v116)
          MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
      }
      return;
    case 198:
      v21 = v114;
      if (v114 > 0x40)
      {
        v106 = (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v106)
            goto LABEL_193;
          v107 = *(_QWORD *)((char *)__src + v106 - 8);
          v108 = *(_QWORD *)(v116 - 8 + v106);
          v106 -= 8;
          v22 = v107 > v108;
        }
        while (v107 == v108);
      }
      else
      {
        v22 = (unint64_t)__src > v116;
      }
      v23 = v22;
      v24 = (unsigned int *)(a5 + 8);
      if (!v22)
        goto LABEL_177;
LABEL_55:
      p_src = &__src;
      if (!v23)
        goto LABEL_178;
      goto LABEL_179;
    default:
      if (a1 == 128)
      {
        v46 = v114;
        if (v114 > 0x40)
        {
          v50 = (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8;
          v49 = operator new[]();
          memcpy((void *)v49, __src, v50);
          v51 = sub_1C47EE5B8((uint64_t ***)&v116, v46);
          llvm::APInt::tcShiftRight((llvm::APInt *)v49, (unint64_t *)((v46 + 63) >> 6), v51);
        }
        else
        {
          v47 = (unint64_t)__src;
          v48 = sub_1C47EE5B8((uint64_t ***)&v116, v114);
          if ((_DWORD)v46 == v48)
            v49 = 0;
          else
            v49 = v47 >> v48;
        }
        *(_DWORD *)(a5 + 8) = v46;
        *(_QWORD *)a5 = v49;
        goto LABEL_183;
      }
      if (a1 != 129)
        goto LABEL_132;
      LODWORD(v123) = v114;
      if (v114 > 0x40)
      {
        v52 = (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8;
        v20 = (void *)operator new[]();
        memcpy(v20, __src, v52);
      }
      else
      {
        v20 = __src;
      }
      v122 = (uint64_t (**)())v20;
      llvm::APInt::ashrInPlace((llvm::APInt *)&v122, (uint64_t ***)&v116);
LABEL_139:
      *(_DWORD *)(a5 + 8) = (_DWORD)v123;
      v95 = v122;
      goto LABEL_181;
  }
}

uint64_t *sub_1C554DA98@<X0>(uint64_t *result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE v20[8];
  uint64_t v21[3];
  _BYTE v22[8];
  uint64_t v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a4 + 24);
  v6 = (uint64_t *)(v5 + 16 * (a3 & 0x7FFFFFFF) + 8);
  v7 = *(_QWORD *)(a4 + 272);
  if (a3 >= 0)
    v6 = (uint64_t *)(v7 + 8 * a3);
  v8 = *v6;
  if ((*(_BYTE *)(v8 + 3) & 1) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(_QWORD *)(v8 + 8);
  if (**(_WORD **)(v9 + 16) != 121)
    goto LABEL_6;
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 48);
  if (!v10)
    goto LABEL_6;
  v11 = (uint64_t *)(v5 + 16 * (a2 & 0x7FFFFFFF) + 8);
  v12 = (uint64_t *)(v7 + 8 * a2);
  if (a2 >= 0)
    v11 = v12;
  v13 = *v11;
  if ((*(_BYTE *)(v13 + 3) & 1) == 0)
    v13 = *(_QWORD *)(v13 + 24);
  v14 = *(_QWORD *)(v13 + 8);
  if (**(_WORD **)(v14 + 16) == 121 && (v15 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 48)) != 0)
  {
    v17 = (int)result;
    v18 = v10;
    sub_1C47A813C((llvm::detail::DoubleAPFloat *)v23, (uint64_t *)(v15 + 32));
    v19 = (_QWORD *)(v18 + 24);
    if (v17 == 163)
    {
      sub_1C47B4138((uint64_t)v22, (uint64_t)v19, 1);
LABEL_16:
      sub_1C5552F50((uint64_t)(a5 + 8), (uint64_t)v23);
      a5[32] = 1;
    }
    else
    {
      switch(v17)
      {
        case 164:
          sub_1C48DB604((uint64_t)v22, (uint64_t)v19, 1);
          goto LABEL_16;
        case 165:
          sub_1C48DB628((uint64_t)v22, (uint64_t)v19, 1);
          goto LABEL_16;
        case 166:
        case 167:
LABEL_20:
          *a5 = 0;
          a5[32] = 0;
          break;
        case 168:
          sub_1C47B1140((uint64_t)v22, (uint64_t)v19, 1);
          goto LABEL_16;
        case 169:
          sub_1C6187438((uint64_t)v22, (uint64_t)v19);
          goto LABEL_16;
        default:
          switch(v17)
          {
            case 185:
              sub_1C61875D4((uint64_t)v22, (uint64_t)v19);
              goto LABEL_16;
            case 187:
              sub_1C4DF8CF0((uint64_t)v22, (uint64_t)v19, (uint64_t)v20);
              break;
            case 188:
              sub_1C4DF8DC8((llvm::detail::IEEEFloat *)v22, v19, (uint64_t)v20);
              break;
            case 191:
              sub_1C618737C((uint64_t)v22, (uint64_t)v19, (uint64_t)v20);
              break;
            case 192:
              sub_1C6187458((uint64_t)v22, (uint64_t)v19, (uint64_t)v20);
              break;
            default:
              goto LABEL_20;
          }
          sub_1C5552F50((uint64_t)(a5 + 8), (uint64_t)v21);
          a5[32] = 1;
          sub_1C47A8258(v21);
          break;
      }
    }
    return sub_1C47A8258(v23);
  }
  else
  {
LABEL_6:
    *a5 = 0;
    a5[32] = 0;
  }
  return result;
}

uint64_t sub_1C554DD18(int a1, unsigned int a2, unsigned int a3, uint64_t a4, llvm::ConstantInt *****a5)
{
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  const llvm::APInt *v20;
  llvm::ValueHandleBase *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  void *v43;
  uint64_t v44;
  _BYTE v45[192];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  sub_1C554CC94(a3, a4, (uint64_t)&v43);
  v9 = v43;
  if (v45[0])
    v10 = v43 == 0;
  else
    v10 = 1;
  if (v10 || **((_WORD **)v43 + 2) != 77)
    return 0;
  sub_1C554CC94(a2, a4, (uint64_t)&v43);
  v11 = 0;
  if (!v45[0])
    return v11;
  v12 = v43;
  if (!v43)
    return v11;
  if (**((_WORD **)v43 + 2) != 77)
    return 0;
  v13 = *((_QWORD *)v43 + 4);
  v14 = *(_DWORD *)(v13 + 36);
  if (v14 < 0 && (v15 = v14 & 0x7FFFFFFF, v15 < *(_DWORD *)(a4 + 432)))
    v16 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * v15);
  else
    v16 = 0;
  v40 = v42;
  v41 = 0x1000000000;
  if (*((_DWORD *)v43 + 10) != 1)
  {
    v18 = 0;
    v19 = 32 * (*((_DWORD *)v43 + 10) - 1);
    while (1)
    {
      sub_1C554CE74(a1, *(_DWORD *)(v12[4] + v18 + 36), *(_DWORD *)(v9[4] + v18 + 36), a4, (uint64_t)&v43);
      if (!v45[0])
        break;
      v38 = v16;
      v39 = 0;
      v21 = llvm::ConstantInt::get(***a5[1], (llvm::LLVMContext *)&v43, v20);
      ((void (*)(llvm::ConstantInt *****, uint64_t *, llvm::ValueHandleBase *))(*a5)[2])(a5, &v38, v21);
      v23 = *(_DWORD *)(*(_QWORD *)(v22 + 32) + 4);
      if (v41 >= HIDWORD(v41))
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v41 + 1, 4);
      *((_DWORD *)v40 + v41) = v23;
      LODWORD(v41) = v41 + 1;
      if (v45[0] && v44 >= 0x41 && v43)
        MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
      v18 += 32;
      if (v19 == v18)
      {
        v13 = v12[4];
        goto LABEL_27;
      }
    }
    v11 = 0;
    goto LABEL_41;
  }
LABEL_27:
  v24 = *(_DWORD *)(v13 + 4);
  if (v24 < 0 && (v25 = v24 & 0x7FFFFFFF, v25 < *(_DWORD *)(a4 + 432)))
    v26 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * v25);
  else
    v26 = 0;
  v38 = v26;
  v39 = 0;
  v27 = (int *)v40;
  v28 = v41;
  v43 = v45;
  v44 = 0x800000000;
  if (v41 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v41, 24);
    v29 = v44;
    v30 = v43;
LABEL_34:
    v31 = 24 * v29;
    v32 = 4 * v28;
    do
    {
      v33 = *v27++;
      v34 = &v30[v31];
      *v34 = v33;
      v34[4] = 0;
      v31 += 24;
      v32 -= 4;
    }
    while (v32);
    v35 = v44;
    goto LABEL_38;
  }
  if ((_DWORD)v41)
  {
    v29 = 0;
    v30 = v45;
    goto LABEL_34;
  }
  v35 = 0;
  v30 = v45;
LABEL_38:
  LODWORD(v44) = v35 + v28;
  ((void (*)(llvm::ConstantInt *****, uint64_t, uint64_t *, uint64_t, _BYTE *))(*a5)[4])(a5, 77, &v38, 1, v30);
  v37 = v36;
  if (v43 != v45)
    free(v43);
  v11 = *(unsigned int *)(*(_QWORD *)(v37 + 32) + 4);
LABEL_41:
  if (v40 != v42)
    free(v40);
  return v11;
}

uint64_t sub_1C554E074(unsigned int a1, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  BOOL v29;
  _BYTE *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  _QWORD *v38;

  v3 = a1;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  v6 = (a1 & 0x80000000) == 0;
  v7 = (uint64_t *)(v4 + 16 * (a1 & 0x7FFFFFFF) + 8);
  if ((a1 & 0x80000000) == 0)
    v7 = (uint64_t *)(v5 + 8 * a1);
  v8 = *v7;
  if (!*v7)
    return 0;
  v10 = a1;
  while (1)
  {
    if ((*(_BYTE *)(v8 + 3) & 1) == 0)
    {
      v8 = *(_QWORD *)(v8 + 24);
      if (!v8 || (*(_BYTE *)(v8 + 3) & 1) == 0)
        return 0;
    }
    v11 = *(_QWORD *)(v8 + 8);
    if (!v11)
      return 0;
    if ((*(_WORD *)(v11 + 44) & 0x10) != 0
      || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 32) + 8) + 1020) & 4) != 0)
    {
      return 1;
    }
    v12 = (uint64_t *)(v4 + 16 * (v3 & 0x7FFFFFFF) + 8);
    v13 = (uint64_t *)(v5 + 8 * v10);
    if (v6)
      v12 = v13;
    v14 = *v12;
    if ((*(_BYTE *)(v14 + 3) & 1) == 0)
      v14 = *(_QWORD *)(v14 + 24);
    v15 = *(_QWORD *)(v14 + 8);
    if (**(_WORD **)(v15 + 16) == 121)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48);
      if (v16)
        break;
    }
    v17 = *(unsigned __int16 **)(v11 + 16);
    v18 = *v17;
    if ((v18 - 187) >= 2)
    {
      if ((v18 - 189) >= 2)
      {
        if (v18 == 77)
        {
          v23 = *(_QWORD *)(v11 + 32);
          v24 = *((unsigned __int8 *)v17 + 4);
          if ((v17[4] & 2) == 0)
          {
            v25 = *(_DWORD *)(v11 + 40);
            goto LABEL_35;
          }
          v25 = *(_DWORD *)(v11 + 40);
          if (v25 != v24)
          {
            v35 = v24;
            do
            {
              v36 = *(_DWORD *)(v23 + 32 * v24);
              if ((v36 & 0x10000FF) != 0x1000000)
                break;
              v35 += (v36 & 0x2000000) == 0;
              if (v25 - 1 == v24)
                break;
              ++v24;
            }
            while ((v36 & 0x2000000) == 0);
            v24 = v35;
LABEL_35:
            if (v24 != v25)
            {
              v26 = 32 * v25 - 32 * v24 - 32;
              v27 = (unsigned int *)(v23 + 32 * v24 + 4);
              do
              {
                v28 = *v27;
                v27 += 8;
                result = sub_1C554E074(v28, a2, a3 & 1);
                if ((_DWORD)result)
                  v29 = v26 == 0;
                else
                  v29 = 1;
                v26 -= 32;
              }
              while (!v29);
              return result;
            }
          }
          return 1;
        }
        if ((a3 & 1) != 0)
        {
          v32 = v18 - 178;
          if (v32 <= 8)
            return (0x103u >> v32) & 1;
        }
        return 0;
      }
      if ((a3 & 1) != 0)
        return 1;
      v21 = *(_QWORD *)(v11 + 32);
      v22 = *(unsigned int *)(v21 + 36);
      if (sub_1C554E074(v22, a2, 0))
      {
        if ((sub_1C554E074(*(unsigned int *)(v21 + 68), a2, 1) & 1) != 0)
          return 1;
      }
      result = sub_1C554E074(v22, a2, 1);
      if (!(_DWORD)result)
        return result;
      a3 = 0;
      result = 0;
      v10 = *(unsigned int *)(v21 + 68);
    }
    else
    {
      v19 = *(_QWORD *)(v11 + 32);
      if ((sub_1C554E074(*(unsigned int *)(v19 + 36), a2, a3 & 1) & 1) != 0)
        return 1;
      result = 0;
      v10 = *(unsigned int *)(v19 + 68);
    }
    v6 = (int)v10 >= 0;
    v20 = (uint64_t *)(v4 + 16 * (v10 & 0x7FFFFFFF) + 8);
    if ((int)v10 >= 0)
      v20 = (uint64_t *)(v5 + 8 * v10);
    v8 = *v20;
    v3 = v10;
    if (!v8)
      return result;
  }
  v30 = (_BYTE *)(v16 + 32);
  if (*(_UNKNOWN **)(v16 + 32) == &unk_1C866F1C0)
  {
    v33 = *(_QWORD *)(v16 + 40);
    v34 = *(_BYTE *)(v33 + 28) & 7;
    result = v34 != 1;
    if (v34 != 1 || ((a3 ^ 1) & 1) != 0)
      return result;
    v30 = (_BYTE *)(v33 + 8);
  }
  else
  {
    v31 = *(_BYTE *)(v16 + 52) & 7;
    result = v31 != 1;
    if (v31 != 1 || ((a3 ^ 1) & 1) != 0)
      return result;
  }
  if ((v30[20] & 7) != 1 || *(_DWORD *)(*(_QWORD *)v30 + 16) == 1)
    return 1;
  v37 = *(_DWORD *)(*(_QWORD *)v30 + 8);
  v38 = v30 + 8;
  if ((v37 - 64) <= 0xFFFFFF7F)
    v38 = (_QWORD *)*v38;
  return (v38[(v37 - 2) >> 6] >> (v37 - 2)) & 1;
}

uint64_t (***sub_1C554E3D4@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>))()
{
  unsigned int v5;
  uint64_t (***v11)();
  void (**v12)(uint64_t (***)());
  uint64_t (***result)();
  uint64_t (**v14)(uint64_t (***)());
  int v15;
  unint64_t v16;
  unsigned int v17;
  size_t v18;
  void *v19;
  void *__src;
  unsigned int v21;
  unsigned __int8 v22;
  uint64_t (**v23)();
  _DWORD v24[4];
  uint64_t (***v25)();
  uint64_t (**v26)();
  BOOL (*v27)(_BOOL8);
  char v28;
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v26 = &off_1E816EFF0;
  v27 = sub_1C554C7E0;
  v29 = (void **)&v26;
  v23 = &off_1E816F038;
  *(_QWORD *)v24 = sub_1C554C7F8;
  v25 = &v23;
  sub_1C554C3AC(a2, a4, (uint64_t)&v26, (uint64_t)&v23, 0, 0, &__src);
  v11 = v25;
  if (v25 == &v23)
  {
    v12 = (void (**)(uint64_t (***)()))(v23 + 4);
    v11 = &v23;
LABEL_3:
    (*v12)(v11);
    goto LABEL_4;
  }
  if (v25)
  {
    v12 = (void (**)(uint64_t (***)()))(*v25 + 5);
    goto LABEL_3;
  }
LABEL_4:
  result = (uint64_t (***)())v29;
  if (v29 == (void **)&v26)
  {
    v14 = (uint64_t (**)(uint64_t (***)()))(v26 + 4);
    result = &v26;
LABEL_6:
    result = (uint64_t (***)())(*v14)(result);
    goto LABEL_7;
  }
  if (v29)
  {
    v14 = (uint64_t (**)(uint64_t (***)()))((char *)*v29 + 40);
    goto LABEL_6;
  }
LABEL_7:
  v15 = v22;
  if (!v22)
  {
    LOBYTE(v26) = 0;
    v28 = 0;
    goto LABEL_19;
  }
  v5 = v21;
  LODWORD(v27) = v21;
  if (v21 > 0x40)
  {
    v18 = (((unint64_t)v21 + 63) >> 3) & 0x3FFFFFF8;
    v26 = (uint64_t (**)())operator new[]();
    v19 = __src;
    result = (uint64_t (***)())memcpy(v26, __src, v18);
    v28 = 1;
    if (v19)
      result = (uint64_t (***)())MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  }
  else
  {
    v26 = (uint64_t (**)())__src;
    v28 = 1;
  }
  if (a1 != 125)
  {
    v15 = 1;
LABEL_19:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 16) = 0;
    if (!v15)
      return result;
    goto LABEL_27;
  }
  if ((a2 & 0x80000000) == 0 || (a2 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a4 + 432))
  {
    llvm::APInt::trunc((llvm::APInt *)&v26, a3, (llvm::APInt *)&__src);
    v16 = 0;
LABEL_22:
    v17 = (unsigned __int16)(v16 >> 3);
    goto LABEL_23;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (a2 & 0x7FFFFFFF));
  llvm::APInt::trunc((llvm::APInt *)&v26, a3, (llvm::APInt *)&__src);
  if ((v16 & 1) != 0)
  {
    v17 = v16 >> 3;
    goto LABEL_23;
  }
  if ((v16 & 4) == 0)
    goto LABEL_22;
  if ((v16 & 2) != 0)
    v17 = (unsigned __int16)(v16 >> 19);
  else
    v17 = v16 >> 19;
LABEL_23:
  result = (uint64_t (***)())llvm::APInt::sext((llvm::APInt *)&__src, v17, (llvm::APInt *)&v23);
  *(_DWORD *)(a5 + 8) = v24[0];
  *(_QWORD *)a5 = v23;
  v24[0] = 0;
  *(_BYTE *)(a5 + 16) = 1;
  if (v21 >= 0x41)
  {
    result = (uint64_t (***)())__src;
    if (__src)
      result = (uint64_t (***)())MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  v5 = v27;
  if (v28)
  {
LABEL_27:
    if (v5 >= 0x41)
    {
      result = (uint64_t (***)())v26;
      if (v26)
        return (uint64_t (***)())MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t (***sub_1C554E6A0@<X0>(int a1@<W0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>))()
{
  _QWORD *v8;
  void (**v9)(_QWORD *);
  uint64_t (***result)();
  uint64_t (**v11)(uint64_t (***)());
  void *FltSemanticForLLT;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  void *v17;
  unsigned int v18;
  char v19;
  void *__src;
  unsigned int v21;
  char v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t (**v25)();
  _QWORD v26[2];
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v25 = &off_1E816EFF0;
  v26[0] = sub_1C554C7E0;
  v27 = &v25;
  v23[0] = &off_1E816F038;
  v23[1] = sub_1C554C7F8;
  v24 = v23;
  sub_1C554C3AC(a3, a4, (uint64_t)&v25, (uint64_t)v23, 0, 0, &__src);
  v8 = v24;
  if (v24 == v23)
  {
    v9 = (void (**)(_QWORD *))(v23[0] + 32);
    v8 = v23;
LABEL_3:
    (*v9)(v8);
    goto LABEL_4;
  }
  if (v24)
  {
    v9 = (void (**)(_QWORD *))(*v24 + 40);
    goto LABEL_3;
  }
LABEL_4:
  result = v27;
  if (v27 == &v25)
  {
    v11 = (uint64_t (**)(uint64_t (***)()))(v25 + 4);
    result = &v25;
LABEL_6:
    result = (uint64_t (***)())(*v11)(result);
    goto LABEL_7;
  }
  if (v27)
  {
    v11 = (uint64_t (**)(uint64_t (***)()))(*v27 + 5);
    goto LABEL_6;
  }
LABEL_7:
  if (v22)
  {
    v18 = v21;
    if (v21 > 0x40)
    {
      v15 = (((unint64_t)v21 + 63) >> 3) & 0x3FFFFFF8;
      v17 = (void *)operator new[]();
      v16 = __src;
      memcpy(v17, __src, v15);
      v19 = 1;
      if (v16)
        MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
    }
    else
    {
      v17 = __src;
      v19 = 1;
    }
    FltSemanticForLLT = llvm::getFltSemanticForLLT(a2);
    sub_1C4DF9184(v26, FltSemanticForLLT);
    result = (uint64_t (***)())sub_1C4959BCC((uint64_t)&v25, (uint64_t)&v17, a1 == 182, 1);
    v13 = v26[0];
    v14 = v26[1];
    if ((_UNKNOWN *)v26[0] != &unk_1C866F1C0)
    {
      *(_DWORD *)(a5 + 24) = (_DWORD)v27;
      *(_BYTE *)(a5 + 28) = *(_BYTE *)(a5 + 28) & 0xF0 | BYTE4(v27) & 0xF;
    }
    *(_QWORD *)(a5 + 8) = v13;
    *(_QWORD *)(a5 + 16) = v14;
    *(_BYTE *)(a5 + 32) = 1;
    if (v19 && v18 >= 0x41)
    {
      result = (uint64_t (***)())v17;
      if (v17)
        return (uint64_t (***)())MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 32) = 0;
  }
  return result;
}

void sub_1C554E900(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t (***v7)();
  void (**v8)(uint64_t (***)());
  uint64_t (***v9)();
  void (**v10)(uint64_t (***)());
  uint64_t v11;
  int v12;
  unint64_t v13;
  BOOL v14;
  void *v15;
  char v16;
  _BYTE *v17;
  unsigned int v18;
  unint64_t v19;
  BOOL (*v20)(_BOOL8);
  int v21;
  BOOL (*v22)(_BOOL8);
  uint64_t (***v23)();
  void (**v24)(uint64_t (***)());
  uint64_t (***v25)();
  void (**v26)(uint64_t (***)());
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t (**v31)();
  size_t v32;
  void *v33;
  void *v34;
  int v35;
  int64_t v36;
  BOOL v37;
  unint64_t v38;
  int v39;
  int v40;
  void *v41;
  _BYTE *v42;
  unsigned int v43;
  size_t v44;
  void *v45;
  void *v46;
  int v47;
  int64_t v48;
  unint64_t v49;
  int v50;
  void *__src;
  unsigned int v52;
  char v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[48];
  uint64_t (**v57)();
  _QWORD *(*v58)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t (***v59)();
  uint64_t (**v60)();
  BOOL (*v61)(_BOOL8);
  char v62;
  uint64_t (***v63)();
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if ((a1 & 0x80000000) != 0 && (a1 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432))
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
  else
    v5 = 0;
  v54 = v56;
  v55 = 0xC00000000;
  if ((v5 & 0xFFFFFFFFFFFFFFF9) == 0 || (v5 & 4) == 0)
  {
    v60 = &off_1E816EFF0;
    v61 = sub_1C554C7E0;
    v63 = &v60;
    v57 = &off_1E816F038;
    v58 = sub_1C554C7F8;
    v59 = &v57;
    sub_1C554C3AC(a1, a2, (uint64_t)&v60, (uint64_t)&v57, 0, 0, &__src);
    v7 = v59;
    if (v59 == &v57)
    {
      v8 = (void (**)(uint64_t (***)()))(v57 + 4);
      v7 = &v57;
    }
    else
    {
      if (!v59)
      {
LABEL_15:
        v9 = v63;
        if (v63 == &v60)
        {
          v10 = (void (**)(uint64_t (***)()))(v60 + 4);
          v9 = &v60;
        }
        else
        {
          if (!v63)
          {
LABEL_18:
            if (!v53)
            {
LABEL_58:
              v16 = 0;
              *(_BYTE *)a3 = 0;
              goto LABEL_59;
            }
            v11 = v52;
            if (v52 >= 0x41)
            {
              v44 = (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8;
              v45 = (void *)operator new[]();
              v46 = __src;
              memcpy(v45, __src, v44);
              if (v46)
                MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
              v47 = 0;
              v48 = (unint64_t)(v11 + 63) >> 6;
              do
              {
                v37 = v48-- < 1;
                if (v37)
                  break;
                v49 = *((_QWORD *)v45 + v48);
                v47 += __clz(v49);
              }
              while (!v49);
              v50 = v11 | 0xFFFFFFC0;
              if ((v11 & 0x3F) == 0)
                v50 = 0;
              v12 = v47 + v50;
              MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
            }
            else
            {
              v12 = v52 + __clz((unint64_t)__src) - 64;
            }
            if (v55 >= HIDWORD(v55))
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 4);
            *((_DWORD *)v54 + v55) = v12;
            v13 = (v55 + 1);
            v14 = (_DWORD)v55 == -1;
            LODWORD(v55) = v55 + 1;
            v15 = (void *)(a3 + 16);
            *(_QWORD *)a3 = a3 + 16;
            *(_QWORD *)(a3 + 8) = 0xC00000000;
            v16 = 1;
            if (v14 || &v54 == (void **)a3)
              goto LABEL_59;
            if (v54 != v56)
            {
              *(_QWORD *)a3 = v54;
              v40 = HIDWORD(v55);
              *(_DWORD *)(a3 + 8) = v13;
LABEL_63:
              *(_DWORD *)(a3 + 12) = v40;
              v54 = v56;
              HIDWORD(v55) = 0;
              goto LABEL_30;
            }
            if (v13 >= 0xD)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v13, 4);
              v18 = v55;
              if (!(_DWORD)v55)
                goto LABEL_29;
              v17 = v54;
              v15 = *(void **)a3;
            }
            else
            {
              v17 = v56;
              v18 = v13;
            }
            memcpy(v15, v17, 4 * v18);
LABEL_29:
            *(_DWORD *)(a3 + 8) = v13;
            goto LABEL_30;
          }
          v10 = (void (**)(uint64_t (***)()))(*v63 + 5);
        }
        (*v10)(v9);
        goto LABEL_18;
      }
      v8 = (void (**)(uint64_t (***)()))(*v59 + 5);
    }
    (*v8)(v7);
    goto LABEL_15;
  }
  sub_1C554CC94(a1, a2, (uint64_t)&v60);
  if (!v62)
    goto LABEL_58;
  v6 = v60;
  if (!v60 || *(_WORD *)v60[2] != 77)
    goto LABEL_58;
  if (*((_DWORD *)v60 + 10) == 1)
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0xC00000000;
    goto LABEL_31;
  }
  v19 = 0;
  v20 = sub_1C554C7E0;
  do
  {
    ++v19;
    v21 = *((_DWORD *)v6[4] + 8 * v19 + 1);
    v60 = &off_1E816EFF0;
    v61 = v20;
    v22 = v20;
    v63 = &v60;
    v57 = &off_1E816F038;
    v58 = sub_1C554C7F8;
    v59 = &v57;
    sub_1C554C3AC(v21, a2, (uint64_t)&v60, (uint64_t)&v57, 0, 0, &__src);
    v23 = v59;
    if (v59 == &v57)
    {
      v24 = (void (**)(uint64_t (***)()))(v57 + 4);
      v23 = &v57;
LABEL_35:
      (*v24)(v23);
      goto LABEL_36;
    }
    if (v59)
    {
      v24 = (void (**)(uint64_t (***)()))(*v59 + 5);
      goto LABEL_35;
    }
LABEL_36:
    v25 = v63;
    if (v63 == &v60)
    {
      v26 = (void (**)(uint64_t (***)()))(v60 + 4);
      v25 = &v60;
LABEL_38:
      (*v26)(v25);
      goto LABEL_39;
    }
    if (v63)
    {
      v26 = (void (**)(uint64_t (***)()))(*v63 + 5);
      goto LABEL_38;
    }
LABEL_39:
    if (!v53)
      goto LABEL_58;
    v20 = v22;
    v27 = v52;
    if (v52 >= 0x41)
    {
      v30 = v19;
      v31 = v6;
      v32 = (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8;
      v33 = (void *)operator new[]();
      v34 = __src;
      memcpy(v33, __src, v32);
      if (v34)
        MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
      v35 = 0;
      v36 = (unint64_t)(v27 + 63) >> 6;
      do
      {
        v37 = v36-- < 1;
        if (v37)
          break;
        v38 = *((_QWORD *)v33 + v36);
        v35 += __clz(v38);
      }
      while (!v38);
      v39 = v27 | 0xFFFFFFC0;
      if ((v27 & 0x3F) == 0)
        v39 = 0;
      v28 = v35 + v39;
      MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
      v6 = v31;
      v19 = v30;
      v20 = sub_1C554C7E0;
    }
    else
    {
      v28 = v52 + __clz((unint64_t)__src) - 64;
    }
    if (v55 >= HIDWORD(v55))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 4);
      v20 = sub_1C554C7E0;
    }
    *((_DWORD *)v54 + v55) = v28;
    v29 = (v55 + 1);
    LODWORD(v55) = v55 + 1;
  }
  while (v19 < (*((_DWORD *)v6 + 10) - 1));
  v41 = (void *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0xC00000000;
  v16 = 1;
  if (!(_DWORD)v29 || &v54 == (void **)a3)
    goto LABEL_59;
  if (v54 != v56)
  {
    *(_QWORD *)a3 = v54;
    v40 = HIDWORD(v55);
    *(_DWORD *)(a3 + 8) = v29;
    goto LABEL_63;
  }
  if (v29 < 0xD)
  {
    v42 = v56;
    v43 = v29;
    goto LABEL_71;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v29, 4);
  v43 = v55;
  if ((_DWORD)v55)
  {
    v42 = v54;
    v41 = *(void **)a3;
LABEL_71:
    memcpy(v41, v42, 4 * v43);
  }
  *(_DWORD *)(a3 + 8) = v29;
LABEL_30:
  LODWORD(v55) = 0;
LABEL_31:
  v16 = 1;
LABEL_59:
  *(_BYTE *)(a3 + 64) = v16;
  if (v54 != v56)
    free(v54);
}

uint64_t sub_1C554EF4C(unint64_t a1, unint64_t a2)
{
  const char *v2;
  unsigned int v3;
  unsigned int v4;
  const char *v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  const char *v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v45 = a2;
  v46 = a1;
  v3 = sub_1C4825F50(&v46);
  if ((_DWORD)v2 == 1)
  v4 = sub_1C4825F50(&v45);
  if ((_DWORD)v5 == 1)
  {
    v12 = v4;
    v4 = v12;
  }
  v6 = v46;
  if (v3 != v4)
  {
    if ((v46 & 0xFFFFFFFFFFFFFFF9) == 0 || (v46 & 4) == 0)
    {
      if ((v45 & 0xFFFFFFFFFFFFFFF9) == 0 || (v45 & 4) == 0)
      {
        v7 = v3;
        if (v4)
        {
          v8 = v3;
          v9 = v4;
          do
          {
            v7 = v9;
            v9 = v8 % v9;
            v8 = v7;
          }
          while (v9);
        }
        v10 = v4 * v3 / v7;
        if ((_DWORD)v10 != v3)
        {
          v6 = v45;
          if ((_DWORD)v10 != v4)
            return (8 * v10) | 1;
        }
        return v6;
      }
      v25 = v3;
      if (v4)
      {
        v26 = v3;
        v27 = v4;
        do
        {
          v25 = v27;
          v27 = v26 % v27;
          v26 = v25;
        }
        while (v27);
      }
      v28 = v4 * v3 / v25 / v3;
      return sub_1C4953AD0(v28, v6);
    }
    v42 = v4;
    v44 = sub_1C492E6FC(&v46);
    if ((v45 & 0xFFFFFFFFFFFFFFF9) != 0 && (v45 & 4) != 0)
    {
      v43 = sub_1C492E6FC(&v45);
      v13 = sub_1C4825F50((unint64_t *)&v44);
      v15 = v14;
      if (v13 == sub_1C4825F50((unint64_t *)&v43) && v15 == (_DWORD)v16)
      {
        v17 = v46;
        if ((v46 & 2) != 0)
          v18 = 0x800000000000000;
        else
          v18 = 0x8000000000000;
        if ((v18 & v46) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v16);
          v17 = v46;
        }
        v19 = (unsigned __int16)(v17 >> 3);
        v20 = v45;
        if ((v45 & 2) != 0)
          v21 = 0x800000000000000;
        else
          v21 = 0x8000000000000;
        if ((v21 & v45) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v16);
          v20 = v45;
        }
        v22 = v20 >> 3;
        v23 = (unsigned __int16)(v20 >> 3);
        if ((unsigned __int16)(v20 >> 3))
        {
          do
          {
            v24 = v23;
            v23 = v19 % v23;
            v19 = v24;
          }
          while (v23);
        }
        else
        {
          v24 = v19;
        }
        v37 = v46;
        v38 = 0x800000000000000;
        if ((v46 & 2) != 0)
          v39 = 0x800000000000000;
        else
          v39 = 0x8000000000000;
        v40 = v39 & v46;
        if ((v20 & 2) == 0)
          v38 = 0x8000000000000;
        if ((v38 & v20) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v16);
          v22 = v45 >> 3;
        }
        v41 = ((unsigned __int16)v22 * (unsigned __int16)(v37 >> 3) / v24) | ((unint64_t)(v40 != 0) << 32);
        v6 = sub_1C492E6FC(&v46);
        v28 = v41;
        return sub_1C4953AD0(v28, v6);
      }
    }
    else
    {
      v30 = sub_1C4825F50((unint64_t *)&v44);
      if ((_DWORD)v29 == 1)
      if (v30 == v42)
        return v46;
    }
    v31 = v3;
    if (v42)
    {
      v32 = v3;
      v33 = v42;
      do
      {
        v31 = v33;
        v33 = v32 % v33;
        v32 = v31;
      }
      while (v33);
    }
    v34 = v42 * v3 / v31;
    v36 = sub_1C4825F50((unint64_t *)&v44);
    if ((_DWORD)v35 == 1)
    v6 = v44;
    v28 = v34 / v36;
    return sub_1C4953AD0(v28, v6);
  }
  return v6;
}

unint64_t sub_1C554F268(unint64_t result, unint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v13 = result;
  if ((result & 0xFFFFFFFFFFFFFFF9) == 0
    || (result & 4) == 0
    || (a2 & 0xFFFFFFFFFFFFFFF9) == 0
    || (a2 & 4) == 0
    || result == a2)
  {
    return sub_1C554EF4C(result, a2);
  }
  if ((result & 1) != 0)
    v2 = result >> 3;
  else
    v2 = (result & 2) != 0 ? (unsigned __int16)(result >> 19) : result >> 19;
  if ((a2 & 1) != 0)
    v3 = a2 >> 3;
  else
    v3 = (a2 & 2) != 0 ? (unsigned __int16)(a2 >> 19) : a2 >> 19;
  if (v2 != v3)
    return sub_1C554EF4C(result, a2);
  v4 = 0x8000000000000;
  if ((result & 2) != 0)
    v5 = 0x800000000000000;
  else
    v5 = 0x8000000000000;
  if ((v5 & result) != 0)
  {
    v9 = a2;
    v11 = result;
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v4 = 0x8000000000000;
    a2 = v9;
    result = v11;
  }
  v6 = (unsigned __int16)(result >> 3);
  if ((a2 & 2) != 0)
    v4 = 0x800000000000000;
  if ((v4 & a2) != 0)
  {
    v10 = (unsigned __int16)(result >> 3);
    v12 = result;
    v7 = a2;
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v6 = v10;
    a2 = v7;
    result = v12;
  }
  if (v6 % (unsigned __int16)(a2 >> 3))
  {
    v8 = (((unsigned __int16)(result >> 3) + (unint64_t)(unsigned __int16)(a2 >> 3) - 1)
                      / (unsigned __int16)(a2 >> 3))
       * (unsigned __int16)(a2 >> 3);
    result = sub_1C492E6FC(&v13);
    if ((_DWORD)v8 != 1)
      return sub_1C4953AD0(v8, result);
  }
  return result;
}

unint64_t sub_1C554F3C8(unint64_t a1, unint64_t a2)
{
  const char *v2;
  unsigned int v3;
  const char *v4;
  unsigned int v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v27;
  const char *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v42 = a2;
  v43 = a1;
  v3 = sub_1C4825F50(&v43);
  if ((_DWORD)v2 == 1)
  v5 = sub_1C4825F50(&v42);
  if ((_DWORD)v4 == 1)
  v6 = v43;
  if (v3 == v5)
    return v6;
  if ((v43 & 0xFFFFFFFFFFFFFFF9) == 0 || (v43 & 4) == 0)
  {
    if ((v42 & 0xFFFFFFFFFFFFFFF9) == 0 || (v42 & 4) == 0)
      goto LABEL_40;
    v41 = sub_1C492E6FC(&v42);
    v39 = sub_1C4825F50((unint64_t *)&v41);
    if ((_DWORD)v38 == 1)
    if (v39 == v3)
      return v43;
LABEL_40:
    if (v5)
    {
      do
      {
        v27 = v5;
        v5 = v3 % v5;
        v3 = v27;
      }
      while (v5);
    }
    else
    {
      v27 = v3;
    }
    return (8 * v27) | 1;
  }
  v7 = 3;
  if ((v43 & 1) == 0)
    v7 = 19;
  v8 = v43 >> v7;
  v9 = v43 & 0x8000000000000000 | (8 * v8) | 1;
  v10 = (v43 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v8) | 2;
  if ((v43 & 2) == 0)
    v10 = v9;
  v41 = v10;
  if ((v42 & 0xFFFFFFFFFFFFFFF9) == 0 || (v42 & 4) == 0)
  {
    v29 = sub_1C4825F50((unint64_t *)&v41);
    if ((_DWORD)v28 == 1)
    if (v29 == v5)
      return v41;
    goto LABEL_49;
  }
  v11 = 3;
  if ((v42 & 1) == 0)
    v11 = 19;
  v12 = v42 >> v11;
  if ((v42 & 2) != 0)
    v13 = (v42 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v12) | 2;
  else
    v13 = v42 & 0x8000000000000000 | (8 * v12) | 1;
  v40 = v13;
  v14 = sub_1C4825F50((unint64_t *)&v41);
  v16 = v15;
  if (v14 != sub_1C4825F50(&v40) || v16 != (_DWORD)v17)
  {
LABEL_49:
    if (v5)
    {
      do
      {
        v30 = v5;
        v5 = v3 % v5;
        v3 = v30;
      }
      while (v5);
    }
    else
    {
      v30 = v3;
    }
    v31 = v30;
    v33 = sub_1C4825F50((unint64_t *)&v41);
    if ((_DWORD)v32 == 1)
    if (v33 != v31)
    {
      v35 = sub_1C4825F50((unint64_t *)&v41);
      if ((_DWORD)v34 == 1)
      if (v35 > v31)
        return (8 * v31) | 1;
      v37 = sub_1C4825F50((unint64_t *)&v41);
      if ((_DWORD)v36 == 1)
      v6 = v41;
      v25 = v31 / v37;
      return sub_1C4953AD0(v25, v6);
    }
    return v41;
  }
  v18 = v43;
  if ((v43 & 2) != 0)
    v19 = 0x800000000000000;
  else
    v19 = 0x8000000000000;
  if ((v19 & v43) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v17);
    v18 = v43;
  }
  v20 = (unsigned __int16)(v18 >> 3);
  v21 = v42;
  if ((v42 & 2) != 0)
    v22 = 0x800000000000000;
  else
    v22 = 0x8000000000000;
  if ((v22 & v42) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v17);
    v21 = v42;
  }
  v23 = (unsigned __int16)(v21 >> 3);
  if ((unsigned __int16)(v21 >> 3))
  {
    do
    {
      v24 = v23;
      v23 = v20 % v23;
      v20 = v24;
    }
    while (v23);
  }
  else
  {
    v24 = v20;
  }
  v6 = v41;
  if (v24 != 1)
  {
    v25 = v24;
    return sub_1C4953AD0(v25, v6);
  }
  return v6;
}

uint64_t sub_1C554F70C(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t result;
  BOOL v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  void (**v17)(_QWORD *);
  uint64_t (**v18)(uint64_t);
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  void *__s2;
  unsigned int v28;
  char v29;
  void *__s1;
  unsigned int v31;
  int v32;
  unsigned __int8 v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[2];
  char v37;
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  result = sub_1C554CC94(a2, a3, (uint64_t)v36);
  if (v37)
    v7 = v36[0] == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_9;
  v8 = *(unsigned __int16 **)(v36[0] + 16);
  if (*v8 - 77 >= 2)
    goto LABEL_9;
  LOBYTE(__s1) = 0;
  v33 = 0;
  v9 = *(_QWORD *)(v36[0] + 32);
  v10 = *((unsigned __int8 *)v8 + 4);
  if ((v8[4] & 2) != 0)
  {
    v11 = *(_DWORD *)(v36[0] + 40);
    if (v11 == v10)
      goto LABEL_9;
    v24 = *((unsigned __int8 *)v8 + 4);
    do
    {
      v25 = *(_DWORD *)(v9 + 32 * v10);
      if ((v25 & 0x10000FF) != 0x1000000)
        break;
      v24 += (v25 & 0x2000000) == 0;
      if (v11 - 1 == v10)
        break;
      ++v10;
    }
    while ((v25 & 0x2000000) == 0);
    v10 = v24;
  }
  else
  {
    v11 = *(_DWORD *)(v36[0] + 40);
  }
  if (v10 == v11)
  {
LABEL_9:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  v12 = 32 * v11 - 32 * v10;
  v13 = (unsigned int *)(v9 + 32 * v10 + 4);
  while (1)
  {
    v15 = *v13;
    v13 += 8;
    v14 = v15;
    v36[0] = &off_1E816EFF0;
    v36[1] = sub_1C554C894;
    v38 = v36;
    v34[0] = &off_1E816F038;
    v34[1] = sub_1C554C8B0;
    v35 = v34;
    sub_1C554C3AC(v15, a3, (uint64_t)v36, (uint64_t)v34, 1, 1, &__s2);
    v16 = v35;
    if (v35 == v34)
    {
      v17 = (void (**)(_QWORD *))(v34[0] + 32);
      v16 = v34;
LABEL_14:
      (*v17)(v16);
      goto LABEL_15;
    }
    if (v35)
    {
      v17 = (void (**)(_QWORD *))(*v35 + 40);
      goto LABEL_14;
    }
LABEL_15:
    result = (uint64_t)v38;
    if (v38 == v36)
    {
      v18 = (uint64_t (**)(uint64_t))(v36[0] + 32);
      result = (uint64_t)v36;
LABEL_17:
      result = (*v18)(result);
      goto LABEL_18;
    }
    if (v38)
    {
      v18 = (uint64_t (**)(uint64_t))(*v38 + 40);
      goto LABEL_17;
    }
LABEL_18:
    if (v29)
    {
      if (!v33)
        result = (uint64_t)sub_1C6277B7C((llvm::APInt *)&__s1, (llvm::APInt *)&__s2);
      if (v31 > 0x40)
      {
        result = memcmp(__s1, __s2, (((unint64_t)v31 + 63) >> 3) & 0x3FFFFFF8);
        if (!(_DWORD)result)
        {
LABEL_33:
          v21 = 0;
          goto LABEL_34;
        }
      }
      else if (__s1 == __s2)
      {
        goto LABEL_33;
      }
LABEL_32:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      v21 = 1;
      goto LABEL_34;
    }
    if (!a4)
      goto LABEL_32;
    v19 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
    if ((int)v14 >= 0)
      v19 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v14);
    v20 = *v19;
    if ((*(_BYTE *)(v20 + 3) & 1) == 0)
      v20 = *(_QWORD *)(v20 + 24);
    if (**(_WORD **)(*(_QWORD *)(v20 + 8) + 16) != 68)
      goto LABEL_32;
    v21 = 3;
LABEL_34:
    if (v29)
    {
      if (v28 >= 0x41)
      {
        result = (uint64_t)__s2;
        if (__s2)
          result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
    if (v21 != 3 && v21)
      break;
    v12 -= 32;
    if (!v12)
    {
      v22 = v33;
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      if (v22)
      {
        v23 = v32;
        *(_DWORD *)(a1 + 8) = v31;
        *(_QWORD *)a1 = __s1;
        *(_DWORD *)(a1 + 16) = v23;
        *(_BYTE *)(a1 + 24) = 1;
      }
      return result;
    }
  }
  if (v33)
  {
    if (v31 >= 0x41)
    {
      result = (uint64_t)__s1;
      if (__s1)
        return MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1C554FA88(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  char v19;

  sub_1C554CC94(a2, a1, (uint64_t)v18);
  if (v19)
    v7 = v18[0];
  else
    v7 = 0;
  v8 = **(unsigned __int16 **)(v7 + 16);
  if (a4 && v8 == 68)
  {
    v18[0] = 0;
LABEL_10:
    v9 = *(_QWORD *)(a3 + 24);
    if (v9)
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v18);
LABEL_29:
    sub_1C485C2F0();
    return sub_1C554FBF0();
  }
  if (v8 != 77)
  {
    if (v8 != 120)
      return 0;
    v18[0] = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 48);
    goto LABEL_10;
  }
  v11 = *(_DWORD *)(v7 + 40);
  v12 = v11 - 1;
  if (v11 != 1)
  {
    v13 = 36;
    do
    {
      sub_1C554CC94(*(unsigned int *)(*(_QWORD *)(v7 + 32) + v13), a1, (uint64_t)v18);
      if (v19)
        v14 = v18[0];
      else
        v14 = 0;
      v15 = **(unsigned __int16 **)(v14 + 16);
      if (a4 && v15 == 68)
      {
        v18[0] = 0;
        v16 = *(_QWORD *)(a3 + 24);
        if (!v16)
          goto LABEL_29;
        if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 48))(v16, v18) & 1) == 0)
          return 0;
      }
      else
      {
        if (v15 != 120)
          return 0;
        v18[0] = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 48);
        v17 = *(_QWORD *)(a3 + 24);
        if (!v17)
          goto LABEL_29;
        result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v18);
        if (!(_DWORD)result)
          return result;
      }
      v13 += 32;
      --v12;
    }
    while (v12);
  }
  return 1;
}

void sub_1C554FBF0(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  uint64_t v15;
  __int32 v16;
  __int32 v17;
  int32x2_t v18;
  __int32 v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  int32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned __int8 *)(v9 + 4);
  if ((*(_BYTE *)(v9 + 8) & 2) != 0)
  {
    v11 = *(_DWORD *)(a1 + 40);
    if (v11 == v10)
      goto LABEL_26;
    v39 = v10;
    do
    {
      v40 = *(_DWORD *)(v8 + 32 * v10);
      if ((v40 & 0x10000FF) != 0x1000000)
        break;
      v39 += (v40 & 0x2000000) == 0;
      if (v11 - 1 == v10)
        break;
      ++v10;
    }
    while ((v40 & 0x2000000) == 0);
    v10 = v39;
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 40);
  }
  if (v10 != v11)
  {
    v12 = v8 + 32 * v11;
    for (i = v8 + 32 * v10; i != v12; i += 32)
    {
      if (*(_BYTE *)i)
        continue;
      v14 = *(_DWORD *)(i + 4);
      if ((v14 & 0x80000000) == 0)
        continue;
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
      if (v15)
      {
        if ((*(_BYTE *)(v15 + 3) & 1) != 0)
          goto LABEL_54;
        v15 = *(_QWORD *)(v15 + 24);
        if (v15)
        {
          if ((*(_BYTE *)(v15 + 3) & 1) != 0)
          {
LABEL_54:
            v15 = *(_QWORD *)(v15 + 8);
            goto LABEL_8;
          }
          v15 = 0;
        }
      }
LABEL_8:
      v41 = v15;
      v16 = a4[1].i32[0];
      v17 = a4[8].i32[0];
      if (!v17)
      {
        v27 = 0;
LABEL_22:
        v28 = sub_1C48BE074((uint64_t)&a4[6], (uint64_t)&v41, &v41, v27);
        *v28 = v41;
        *((_DWORD *)v28 + 2) = v16;
        v29 = v41;
        v30 = a4[1].u32[0];
        if (v30 >= a4[1].u32[1])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a4, (uint64_t)&a4[2], v30 + 1, 8);
          v30 = a4[1].u32[0];
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v30) = v29;
        ++a4[1].i32[0];
        continue;
      }
      v18 = a4[6];
      v19 = v17 - 1;
      v20 = v19 & ((v15 >> 4) ^ (v15 >> 9));
      v21 = (_QWORD *)(*(_QWORD *)&v18 + 16 * v20);
      v22 = *v21;
      if (*v21 != v15)
      {
        v23 = 0;
        v24 = 1;
        while (v22 != -4096)
        {
          if (v23)
            v25 = 0;
          else
            v25 = v22 == -8192;
          if (v25)
            v23 = v21;
          v26 = v20 + v24++;
          v20 = v26 & v19;
          v21 = (_QWORD *)(*(_QWORD *)&v18 + 16 * v20);
          v22 = *v21;
          if (*v21 == v15)
            goto LABEL_25;
        }
        if (v23)
          v27 = v23;
        else
          v27 = v21;
        goto LABEL_22;
      }
LABEL_25:
      ;
    }
  }
LABEL_26:
  v31 = a4[6];
  v32 = a4[8].u32[0];
  if ((_DWORD)v32)
  {
    LODWORD(v33) = (v32 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v34 = *(_QWORD *)&v31 + 16 * v33;
    v35 = *(_QWORD *)v34;
    if (*(_QWORD *)v34 == a1)
      goto LABEL_33;
    v36 = 1;
    while (v35 != -4096)
    {
      v37 = v33 + v36++;
      v33 = v37 & (v32 - 1);
      v35 = *(_QWORD *)(*(_QWORD *)&v31 + 16 * v33);
      if (v35 == a1)
      {
        v34 = *(_QWORD *)&v31 + 16 * v33;
        goto LABEL_33;
      }
    }
  }
  v34 = *(_QWORD *)&v31 + 16 * v32;
LABEL_33:
  if (v34 != *(_QWORD *)&v31 + 16 * v32)
  {
    *(_QWORD *)(*(_QWORD *)a4 + 8 * *(unsigned int *)(v34 + 8)) = 0;
    *(_QWORD *)v34 = -8192;
    a4[7] = vadd_s32(a4[7], (int32x2_t)0x1FFFFFFFFLL);
  }
  v38 = a1;
  if ((*(_BYTE *)a1 & 4) == 0)
  {
    v38 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      v38 = a1;
      do
        v38 = *(_QWORD *)(v38 + 8);
      while ((*(_WORD *)(v38 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v38 + 8));
  if (a3)
    sub_1C5543434(a3, 0);
}

void sub_1C554FEEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[32];
  _QWORD *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  v25 = 8;
  v8 = operator new(0x80uLL, (std::align_val_t)8uLL);
  v23 = v8;
  v24 = 0;
  if (v25)
  {
    v9 = 16 * v25;
    do
    {
      *v8 = -4096;
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  if (a2)
  {
    v10 = 8 * a2;
    do
    {
      v11 = *a1++;
      sub_1C554FBF0(v11, a3, a4, (int32x2_t *)&v20);
      v10 -= 8;
    }
    while (v10);
    for (i = v24; (_DWORD)v24; i = v24)
    {
      v13 = v21;
      do
        v14 = *((_QWORD *)v20 + --v13);
      while (!v14);
      LODWORD(v21) = v13;
      if (v25)
      {
        LODWORD(v15) = (v25 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        v16 = &v23[2 * v15];
        v17 = *v16;
        if (v14 == *v16)
        {
LABEL_16:
          *v16 = -8192;
          v24 = __PAIR64__(HIDWORD(v24), i - 1) + 0x100000000;
        }
        else
        {
          v18 = 1;
          while (v17 != -4096)
          {
            v19 = v15 + v18++;
            v15 = v19 & (v25 - 1);
            v17 = v23[2 * v15];
            if (v14 == v17)
            {
              v16 = &v23[2 * v15];
              goto LABEL_16;
            }
          }
        }
      }
      if (sub_1C554B164(v14, a3))
        sub_1C554FBF0(v14, a3, a4, (int32x2_t *)&v20);
    }
  }
  MEMORY[0x1CAA32FB4](v23, 8);
  if (v20 != v22)
    free(v20);
}

char *sub_1C55500A8@<X0>(llvm::APInt *a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  void *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unsigned int v66;
  char *v67;
  unint64_t v68;
  void *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  char *v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  unsigned int v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _BOOL4 v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _BOOL4 v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  BOOL v108;
  char **v109;
  char *result;
  unsigned int v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  size_t v119;
  char *v120;
  uint64_t v121;
  unint64_t *v122;
  uint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BOOL4 v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _BOOL4 v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _BOOL4 v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _BOOL4 v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  _BOOL8 v164;
  unint64_t v165;
  unint64_t v166;
  _BOOL4 v167;
  _BOOL4 v168;
  uint64_t v169;
  uint64_t v170;
  _BOOL8 v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _BOOL4 v175;
  _BOOL4 v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _BOOL4 v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _BOOL4 v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  _BOOL4 v201;
  unint64_t v202;
  unsigned int v203;
  uint64_t *v204;
  uint64_t v205;
  _BOOL8 v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  _BOOL4 v210;
  _BOOL4 v211;
  uint64_t v212;
  _BOOL8 v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  _BOOL4 v217;
  _BOOL4 v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t *v221;
  uint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  _BOOL4 v226;
  unint64_t v227;
  _BOOL8 v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  _BOOL4 v233;
  _BOOL4 v234;
  unint64_t v235;
  _BOOL8 v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  _BOOL4 v243;
  unint64_t v244;
  _BOOL4 v245;
  char *v246;
  char **v247;
  char *__src;
  unint64_t __srca;
  unsigned int v250;
  unsigned int v251;
  void *v252;
  char *v253;
  unsigned int v254;
  char *v255;
  unsigned int v256;
  unint64_t v257;
  unsigned int v258;
  unint64_t *v259;
  unsigned int v260;
  char *v261;
  unsigned int v262;
  char *v263;
  unsigned int v264;
  char *v265;
  unsigned int v266;
  void *v267;
  unsigned int v268;
  unint64_t v269;
  unsigned int v270;
  char *v271;
  unsigned int v272;
  char *v273;
  unsigned int v274;
  uint64_t v275;
  unsigned int v276;
  unint64_t v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  char *v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int v284;

  v284 = 1;
  v283 = 0;
  v282 = 1;
  v281 = 0;
  v280 = 1;
  v279 = 0;
  v278 = 1;
  v277 = 0;
  *((_DWORD *)a3 + 2) = 1;
  *a3 = 0;
  *((_BYTE *)a3 + 16) = 0;
  v6 = *((_DWORD *)a1 + 2);
  v274 = v6;
  if (v6 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v273, -1, 1);
    v6 = v274;
    v276 = v274;
    if (v274 > 0x40)
    {
      v119 = (((unint64_t)v274 + 63) >> 3) & 0x3FFFFFF8;
      v275 = operator new[]();
      v120 = v273;
      memcpy((void *)v275, v273, v119);
      llvm::APInt::lshrSlowCase((llvm::APInt **)&v275, a2);
      if (v120)
        MEMORY[0x1CAA32F9C](v120, 0x1000C8000313F17);
      goto LABEL_7;
    }
    v7 = (unint64_t)v273;
  }
  else
  {
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!v6)
      v7 = 0;
    v276 = v6;
  }
  if (v6 == a2)
    v275 = 0;
  else
    v275 = v7 >> a2;
LABEL_7:
  v8 = *((_DWORD *)a1 + 2);
  v274 = v8;
  if (v8 > 0x40)
  {
    v10 = (char *)&v273;
    llvm::APInt::initSlowCase((llvm::APInt *)&v273, 0, 0);
    v9 = v8 - 1;
    if (v274 >= 0x41)
      v10 = &v273[8 * (v9 >> 6)];
  }
  else
  {
    v273 = 0;
    LOBYTE(v9) = v8 - 1;
    v10 = (char *)&v273;
  }
  *(_QWORD *)v10 |= 1 << v9;
  v11 = *((_DWORD *)a1 + 2);
  v272 = v11;
  if (v11 > 0x40)
  {
    v13 = (char *)&v271;
    llvm::APInt::initSlowCase((llvm::APInt *)&v271, -1, 1);
    LODWORD(v12) = v11 - 1;
    if (v272 >= 0x41)
      v13 = &v271[8 * (v12 >> 6)];
  }
  else
  {
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    if (!v11)
      v12 = 0;
    v271 = (char *)v12;
    LOBYTE(v12) = v11 - 1;
    v13 = (char *)&v271;
  }
  *(_QWORD *)v13 &= ~(1 << v12);
  v14 = v276;
  v247 = a3;
  if (v276 >= 0x41)
  {
    v16 = (void *)operator new[]();
    memcpy(v16, (const void *)v275, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
    v194 = 0;
    v195 = *(unint64_t **)a1;
    v196 = (unint64_t)(v14 + 63) >> 6;
    v197 = (unint64_t *)v16;
    v198 = v196;
    do
    {
      v199 = *v195++;
      v200 = *v197 - v199;
      v201 = *v197 < v199;
      v202 = *v197 + ~v199;
      if (v194)
      {
        v194 = v202 >= *v197;
      }
      else
      {
        v202 = v200;
        v194 = v201;
      }
      *v197++ = v202;
      --v198;
    }
    while (v198);
    *((_QWORD *)v16 + (v196 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
  }
  else
  {
    if (v276)
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v276;
    else
      v15 = 0;
    v16 = (void *)(v15 & (v275 - *(_QWORD *)a1));
  }
  v268 = v14;
  v267 = v16;
  llvm::APInt::urem((llvm::APInt *)&v267, a1, (llvm::APInt *)&v269);
  if (v270 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v269);
  }
  else
  {
    if (v270)
      v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v270;
    else
      v17 = 0;
    v269 = v17 & ~v269;
  }
  llvm::APInt::operator++((uint64_t)&v269);
  v18 = v270;
  if (v270 >= 0x41)
  {
    v121 = 0;
    v122 = (unint64_t *)v269;
    v123 = (uint64_t *)v275;
    v124 = ((unint64_t)v270 + 63) >> 6;
    v125 = v124;
    do
    {
      v126 = *v123++;
      v127 = v126 + *v122;
      v128 = v127 + 1 <= *v122;
      if (v121)
      {
        ++v127;
        v121 = v128;
      }
      else
      {
        v121 = v127 < *v122;
      }
      *v122++ = v127;
      --v125;
    }
    while (v125);
    *(_QWORD *)(v269 + 8 * (v124 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
    v18 = v270;
    v21 = v269;
  }
  else
  {
    v19 = v269 + v275;
    if (v270)
      v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v270;
    else
      v20 = 0;
    v21 = v20 & v19;
    v269 = v20 & v19;
  }
  v270 = 0;
  if (v284 > 0x40 && v283)
  {
    MEMORY[0x1CAA32F9C](v283, 0x1000C8000313F17);
    v283 = v21;
    v284 = v18;
    if (v270 >= 0x41 && v269)
      MEMORY[0x1CAA32F9C](v269, 0x1000C8000313F17);
  }
  else
  {
    v283 = v21;
    v284 = v18;
  }
  if (v268 >= 0x41 && v267)
    MEMORY[0x1CAA32F9C](v267, 0x1000C8000313F17);
  v22 = *((_DWORD *)a1 + 2);
  llvm::APInt::udiv((llvm::APInt *)&v273, (const llvm::APInt *)&v283, (llvm::APInt *)&v269);
  if (v282 >= 0x41 && v281)
    MEMORY[0x1CAA32F9C](v281, 0x1000C8000313F17);
  v23 = v269;
  v281 = (char *)v269;
  v24 = v270;
  v282 = v270;
  llvm::APInt::operator*((uint64_t)&v281, &v283, (uint64_t)&v269);
  if (v270 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v269);
  }
  else
  {
    if (v270)
      v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v270;
    else
      v25 = 0;
    v269 = v25 & ~v269;
  }
  llvm::APInt::operator++((uint64_t)&v269);
  v26 = v270;
  if (v270 >= 0x41)
  {
    v129 = 0;
    v130 = (unint64_t *)v269;
    v131 = (uint64_t *)v273;
    v132 = ((unint64_t)v270 + 63) >> 6;
    v133 = v132;
    do
    {
      v134 = *v131++;
      v135 = v134 + *v130;
      v136 = v135 + 1 <= *v130;
      if (v129)
      {
        ++v135;
        v129 = v136;
      }
      else
      {
        v129 = v135 < *v130;
      }
      *v130++ = v135;
      --v133;
    }
    while (v133);
    *(_QWORD *)(v269 + 8 * (v132 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
    v26 = v270;
    v29 = (char *)v269;
  }
  else
  {
    v27 = (unint64_t)&v273[v269];
    if (v270)
      v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v270;
    else
      v28 = 0;
    v29 = (char *)(v28 & v27);
    v269 = v28 & v27;
  }
  v270 = 0;
  if (v280 > 0x40 && v279)
  {
    MEMORY[0x1CAA32F9C](v279, 0x1000C8000313F17);
    v279 = (uint64_t)v29;
    v280 = v26;
    if (v270 >= 0x41 && v269)
      MEMORY[0x1CAA32F9C](v269, 0x1000C8000313F17);
  }
  else
  {
    v279 = (uint64_t)v29;
    v280 = v26;
  }
  llvm::APInt::udiv((llvm::APInt *)&v271, a1, (llvm::APInt *)&v269);
  if (v278 >= 0x41 && v277)
    MEMORY[0x1CAA32F9C](v277, 0x1000C8000313F17);
  v277 = v269;
  v278 = v270;
  llvm::APInt::operator*((uint64_t)&v277, a1, (uint64_t)&v269);
  if (v270 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v269);
  }
  else
  {
    if (v270)
      v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v270;
    else
      v30 = 0;
    v269 = v30 & ~v269;
  }
  v31 = v22 - 1;
  llvm::APInt::operator++((uint64_t)&v269);
  v32 = v270;
  if (v270 >= 0x41)
  {
    v137 = 0;
    v138 = (unint64_t *)v269;
    v139 = (uint64_t *)v271;
    v140 = ((unint64_t)v270 + 63) >> 6;
    v141 = v140;
    do
    {
      v142 = *v139++;
      v143 = v142 + *v138;
      v144 = v143 + 1 <= *v138;
      if (v137)
      {
        ++v143;
        v137 = v144;
      }
      else
      {
        v137 = v143 < *v138;
      }
      *v138++ = v143;
      --v141;
    }
    while (v141);
    *(_QWORD *)(v269 + 8 * (v140 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
    v32 = v270;
    v34 = v269;
  }
  else
  {
    v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v270;
    if (!v270)
      v33 = 0;
    v34 = v33 & (unint64_t)&v271[v269];
  }
  v252 = (void *)v34;
  v35 = 0;
  v36 = (char *)v23;
  v37 = 1;
  while (1)
  {
    while (1)
    {
LABEL_49:
      v250 = v37;
      v246 = v35;
      v38 = v284;
      if (v284 >= 0x41)
      {
        __srca = v284 + 63;
        v40 = (char *)operator new[]();
        memcpy(v40, (const void *)v283, (__srca >> 3) & 0x3FFFFFF8);
        v145 = 0;
        v146 = (unint64_t *)v40;
        v147 = (unint64_t *)v29;
        v148 = __srca >> 6;
        do
        {
          v149 = *v147++;
          v150 = *v146 - v149;
          v151 = *v146 < v149;
          v152 = *v146 + ~v149;
          if (v145)
          {
            v145 = v152 >= *v146;
          }
          else
          {
            v152 = v150;
            v145 = v151;
          }
          *v146++ = v152;
          --v148;
        }
        while (v148);
        *(_QWORD *)&v40[8 * (__srca >> 6) - 8] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
      }
      else
      {
        v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v284;
        if (!v284)
          v39 = 0;
        v40 = (char *)(v39 & (v283 - (_QWORD)v29));
      }
      v41 = v280;
      if (v280 > 0x40)
      {
        v98 = (((unint64_t)v280 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v98)
          {
            v42 = 0;
            goto LABEL_57;
          }
          v99 = *(_QWORD *)&v29[v98 - 8];
          v100 = *(_QWORD *)&v40[v98 - 8];
          v98 -= 8;
        }
        while (v99 == v100);
        if (v99 > v100)
          v42 = 1;
        else
          v42 = -1;
      }
      else if (v29 < v40)
      {
        v42 = -1;
      }
      else
      {
        v42 = v29 > v40;
      }
LABEL_57:
      if (v38 >= 0x41 && v40)
        MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
      v43 = v252;
      if (v42 < 0)
      {
        if (v24 >= 0x41)
        {
          v162 = v24 + 63;
          v45 = (char *)operator new[]();
          memcpy(v45, v36, (v162 >> 3) & 0x3FFFFFF8);
          v163 = 0;
          v164 = 0;
          do
          {
            v165 = *(_QWORD *)&v45[v163];
            v166 = *(_QWORD *)&v36[v163] + v165;
            v167 = v166 < v165;
            v168 = v166 + 1 <= v165;
            if (v164)
            {
              ++v166;
              v164 = v168;
            }
            else
            {
              v164 = v167;
            }
            *(_QWORD *)&v45[v163] = v166;
            v163 += 8;
          }
          while (8 * (v162 >> 6) != v163);
          *(_QWORD *)&v45[8 * (v162 >> 6) - 8] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
          MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
          v43 = v252;
        }
        else
        {
          if (v24)
            v44 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
          else
            v44 = 0;
          v45 = (char *)(v44 & (2 * v23));
        }
        v281 = v45;
        if (v41 < 0x41)
        {
          if ((_DWORD)v41)
            v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
          else
            v46 = 0;
          v47 = 2 * v279;
          goto LABEL_67;
        }
        v29 = (char *)operator new[]();
        v169 = v279;
        memcpy(v29, (const void *)v279, ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8);
        v170 = 0;
        v171 = 0;
        v172 = (unint64_t)(v41 + 63) >> 6;
        do
        {
          v173 = *(_QWORD *)&v29[v170];
          v174 = *(_QWORD *)(v169 + v170) + v173;
          v175 = v174 < v173;
          v176 = v174 + 1 <= v173;
          if (v171)
          {
            ++v174;
            v171 = v176;
          }
          else
          {
            v171 = v175;
          }
          *(_QWORD *)&v29[v170] = v174;
          v170 += 8;
        }
        while (8 * v172 != v170);
        *(_QWORD *)&v29[8 * (v172 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
LABEL_265:
        MEMORY[0x1CAA32F9C](v169, 0x1000C8000313F17);
        goto LABEL_266;
      }
      if (v24 >= 0x41)
      {
        v219 = v24 + 63;
        v77 = (char *)operator new[]();
        memcpy(v77, v36, (v219 >> 3) & 0x3FFFFFF8);
        v220 = 0;
        v221 = (unint64_t *)v77;
        v222 = (uint64_t *)v36;
        v223 = v219 >> 6;
        do
        {
          v224 = *v222++;
          v225 = v224 + *v221;
          v226 = v225 + 1 <= *v221;
          if (v220)
          {
            ++v225;
            v220 = v226;
          }
          else
          {
            v220 = v225 < *v221;
          }
          *v221++ = v225;
          --v223;
        }
        while (v223);
        *(_QWORD *)&v77[8 * (v219 >> 6) - 8] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
        v43 = v252;
      }
      else
      {
        if (v24)
          v76 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
        else
          v76 = 0;
        v77 = (char *)(v76 & (2 * v23));
      }
      v266 = v24;
      v265 = v77;
      llvm::APInt::operator+=((uint64_t)&v265, 1uLL);
      v78 = v266;
      v79 = v265;
      v266 = 0;
      if (v24 > 0x40)
      {
        if (v36)
        {
          MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
          v281 = v79;
          v282 = v78;
          v43 = v252;
          if (v266 >= 0x41 && v265)
            MEMORY[0x1CAA32F9C](v265, 0x1000C8000313F17);
        }
        else
        {
          v281 = v265;
          v282 = v78;
          v43 = v252;
        }
      }
      else
      {
        v281 = v265;
        v282 = v78;
      }
      if (v41 < 0x41)
      {
        if ((_DWORD)v41)
        {
          v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
          v47 = (v46 & (2 * v279)) - v283;
        }
        else
        {
          v46 = 0;
          v47 = -v283;
        }
LABEL_67:
        v29 = (char *)(v46 & v47);
        v279 = v46 & v47;
        goto LABEL_68;
      }
      v29 = (char *)operator new[]();
      v169 = v279;
      memcpy(v29, (const void *)v279, ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8);
      v227 = 0;
      v228 = 0;
      v229 = (unint64_t)(v41 + 63) >> 6;
      v230 = 8 * v229;
      do
      {
        v231 = *(_QWORD *)&v29[v227];
        v232 = *(_QWORD *)(v169 + v227) + v231;
        v233 = v232 < v231;
        v234 = v232 + 1 <= v231;
        if (v228)
        {
          ++v232;
          v228 = v234;
        }
        else
        {
          v228 = v233;
        }
        *(_QWORD *)&v29[v227] = v232;
        v227 += 8;
      }
      while (v230 != v227);
      v235 = 0;
      v236 = 0;
      v237 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
      v238 = (v229 - 1);
      *(_QWORD *)&v29[8 * v238] &= v237;
      v239 = v283;
      do
      {
        v240 = *(_QWORD *)&v29[v235];
        v241 = *(_QWORD *)(v239 + v235);
        v242 = v240 - v241;
        v243 = v240 < v241;
        v244 = v240 + ~v241;
        v245 = v244 >= v240;
        if (v236)
        {
          v236 = v245;
        }
        else
        {
          v244 = v242;
          v236 = v243;
        }
        *(_QWORD *)&v29[v235] = v244;
        v235 += 8;
      }
      while (v230 != v235);
      *(_QWORD *)&v29[8 * v238] &= v237;
      if (v169)
        goto LABEL_265;
LABEL_266:
      v279 = (uint64_t)v29;
      v43 = v252;
LABEL_68:
      v264 = v32;
      if (v32 > 0x40)
      {
        v263 = (char *)operator new[]();
        memcpy(v263, v43, (((unint64_t)v264 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v263 = (char *)v43;
      }
      llvm::APInt::operator+=((uint64_t)&v263, 1uLL);
      v48 = v264;
      v49 = v263;
      v264 = 0;
      v50 = *((unsigned int *)a1 + 2);
      if (v50 >= 0x41)
      {
        v252 = v43;
        v52 = (char *)operator new[]();
        memcpy(v52, *(const void **)a1, ((unint64_t)(v50 + 63) >> 3) & 0x3FFFFFF8);
        v153 = 0;
        v154 = (unint64_t)(v50 + 63) >> 6;
        v155 = (unint64_t *)v52;
        v156 = (unint64_t *)v43;
        v157 = v154;
        do
        {
          v158 = *v156++;
          v159 = *v155 - v158;
          v160 = *v155 < v158;
          v161 = *v155 + ~v158;
          if (v153)
          {
            v153 = v161 >= *v155;
          }
          else
          {
            v161 = v159;
            v153 = v160;
          }
          *v155++ = v161;
          --v157;
        }
        while (v157);
        *(_QWORD *)&v52[8 * (v154 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
      }
      else
      {
        v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
        if (!(_DWORD)v50)
          v51 = 0;
        v52 = (char *)(v51 & (*(_QWORD *)a1 - (_QWORD)v43));
      }
      if (v48 > 0x40)
      {
        v101 = ((unint64_t)(v48 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v101)
          {
            v53 = 0;
            goto LABEL_78;
          }
          v102 = *(_QWORD *)&v49[v101 - 8];
          v103 = *(_QWORD *)&v52[v101 - 8];
          v101 -= 8;
        }
        while (v102 == v103);
        if (v102 > v103)
          v53 = 1;
        else
          v53 = -1;
      }
      else if (v49 < v52)
      {
        v53 = -1;
      }
      else
      {
        v53 = v49 > v52;
      }
LABEL_78:
      if (v50 >= 0x41 && v52)
        MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
      if (v48 >= 0x41 && v49)
        MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
      if (v264 >= 0x41 && v263)
        MEMORY[0x1CAA32F9C](v263, 0x1000C8000313F17);
      v54 = v278;
      if (v53 < 0)
      {
        if (v278 > 0x40)
        {
          v55 = v277;
          v113 = (((unint64_t)v278 + 63) >> 3) & 0x3FFFFFF8;
          while (v113)
          {
            v114 = *(_QWORD *)(v277 + v113 - 8);
            v115 = *(_QWORD *)&v273[v113 - 8];
            v113 -= 8;
            if (v114 != v115)
            {
              if (v114 <= v115)
                goto LABEL_126;
              break;
            }
          }
        }
        else
        {
          v55 = v277;
          if (v277 < (unint64_t)v273)
            goto LABEL_84;
        }
        *((_BYTE *)v247 + 16) = 1;
LABEL_126:
        if (v54 < 0x41)
        {
LABEL_84:
          v56 = 2 * v55;
          v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v54;
          if (!(_DWORD)v54)
            v57 = 0;
          v58 = (char *)(v57 & v56);
          v277 = v57 & v56;
        }
        else
        {
          v58 = (char *)operator new[]();
          memcpy(v58, (const void *)v55, ((unint64_t)(v54 + 63) >> 3) & 0x3FFFFFF8);
          v205 = 0;
          v206 = 0;
          v207 = (unint64_t)(v54 + 63) >> 6;
          do
          {
            v208 = *(_QWORD *)&v58[v205];
            v209 = *(_QWORD *)(v55 + v205) + v208;
            v210 = v209 < v208;
            v211 = v209 + 1 <= v208;
            if (v206)
            {
              ++v209;
              v206 = v211;
            }
            else
            {
              v206 = v210;
            }
            *(_QWORD *)&v58[v205] = v209;
            v205 += 8;
          }
          while (8 * v207 != v205);
          *(_QWORD *)&v58[8 * (v207 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v54;
          MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
          v277 = (unint64_t)v58;
          v43 = v252;
        }
        __src = v58;
        if (v32 >= 0x41)
        {
          v177 = v32 + 63;
          v178 = (uint64_t *)v43;
          v60 = (void *)operator new[]();
          memcpy(v60, v43, (v177 >> 3) & 0x3FFFFFF8);
          v179 = 0;
          v180 = (unint64_t *)v60;
          v181 = v177 >> 6;
          do
          {
            v182 = *v178++;
            v183 = v182 + *v180;
            v184 = v183 + 1 <= *v180;
            if (v179)
            {
              ++v183;
              v179 = v184;
            }
            else
            {
              v179 = v183 < *v180;
            }
            *v180++ = v183;
            --v181;
          }
          while (v181);
          *((_QWORD *)v60 + (v177 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
          v43 = v252;
        }
        else
        {
          if (v32)
            v59 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
          else
            v59 = 0;
          v60 = (void *)(v59 & (2 * (_QWORD)v43));
        }
        v258 = v32;
        v257 = (unint64_t)v60;
        llvm::APInt::operator+=((uint64_t)&v257, 1uLL);
        LODWORD(v61) = v258;
        v62 = v257;
        v258 = 0;
        if (v32 < 0x41)
          goto LABEL_111;
        if (!v43)
          goto LABEL_111;
        MEMORY[0x1CAA32F9C](v252, 0x1000C8000313F17);
        if (v258 < 0x41)
          goto LABEL_111;
        v185 = (_QWORD *)v257;
        v66 = v54;
        goto LABEL_293;
      }
      if (v278 > 0x40)
      {
        v63 = v277;
        v116 = (((unint64_t)v278 + 63) >> 3) & 0x3FFFFFF8;
        while (v116)
        {
          v117 = *(_QWORD *)(v277 + v116 - 8);
          v118 = *(_QWORD *)&v271[v116 - 8];
          v116 -= 8;
          if (v117 != v118)
          {
            if (v117 <= v118)
              goto LABEL_129;
            break;
          }
        }
      }
      else
      {
        v63 = v277;
        if (v277 < (unint64_t)v271)
          goto LABEL_95;
      }
      *((_BYTE *)v247 + 16) = 1;
LABEL_129:
      if (v54 >= 0x41)
      {
        v65 = (char *)operator new[]();
        memcpy(v65, (const void *)v63, ((unint64_t)(v54 + 63) >> 3) & 0x3FFFFFF8);
        v212 = 0;
        v213 = 0;
        v214 = (unint64_t)(v54 + 63) >> 6;
        do
        {
          v215 = *(_QWORD *)&v65[v212];
          v216 = *(_QWORD *)(v63 + v212) + v215;
          v217 = v216 < v215;
          v218 = v216 + 1 <= v215;
          if (v213)
          {
            ++v216;
            v213 = v218;
          }
          else
          {
            v213 = v217;
          }
          *(_QWORD *)&v65[v212] = v216;
          v212 += 8;
        }
        while (8 * v214 != v212);
        *(_QWORD *)&v65[8 * (v214 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v54;
        v43 = v252;
        goto LABEL_98;
      }
LABEL_95:
      v64 = (_DWORD)v54 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v54 : 0;
      v65 = (char *)(v64 & (2 * v63));
LABEL_98:
      v262 = v54;
      v261 = v65;
      llvm::APInt::operator+=((uint64_t)&v261, 1uLL);
      v66 = v262;
      v67 = v261;
      v262 = 0;
      if (v54 > 0x40)
      {
        if (v63)
        {
          MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
          v277 = (unint64_t)v67;
          v278 = v66;
          v43 = v252;
          if (v262 >= 0x41 && v261)
            MEMORY[0x1CAA32F9C](v261, 0x1000C8000313F17);
        }
        else
        {
          v277 = (unint64_t)v261;
          v278 = v66;
          v43 = v252;
        }
      }
      else
      {
        v277 = (unint64_t)v261;
        v278 = v66;
      }
      __src = v67;
      if (v32 >= 0x41)
      {
        v186 = v32 + 63;
        v187 = (uint64_t *)v43;
        v69 = (void *)operator new[]();
        memcpy(v69, v43, (v186 >> 3) & 0x3FFFFFF8);
        v188 = 0;
        v189 = (unint64_t *)v69;
        v190 = v186 >> 6;
        do
        {
          v191 = *v187++;
          v192 = v191 + *v189;
          v193 = v192 + 1 <= *v189;
          if (v188)
          {
            ++v192;
            v188 = v193;
          }
          else
          {
            v188 = v192 < *v189;
          }
          *v189++ = v192;
          --v190;
        }
        while (v190);
        *((_QWORD *)v69 + (v186 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
        v43 = v252;
      }
      else
      {
        if (v32)
          v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
        else
          v68 = 0;
        v69 = (void *)(v68 & (2 * (_QWORD)v43));
      }
      v260 = v32;
      v259 = (unint64_t *)v69;
      llvm::APInt::operator+=((uint64_t)&v259, 1uLL);
      v61 = v260;
      v62 = (unint64_t)v259;
      v260 = 0;
      if (v61 >= 0x41)
      {
        v89 = 0;
        v90 = *(unint64_t **)a1;
        v91 = (unint64_t)(v61 + 63) >> 6;
        v92 = v259;
        v93 = v91;
        do
        {
          v94 = *v90++;
          v95 = *v92 - v94;
          v96 = *v92 < v94;
          v97 = *v92 + ~v94;
          if (v89)
          {
            v89 = v97 >= *v92;
          }
          else
          {
            v97 = v95;
            v89 = v96;
          }
          *v92++ = v97;
          --v93;
        }
        while (v93);
        *(_QWORD *)(v62 + 8 * (v91 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v61;
      }
      else
      {
        v70 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v61;
        if (!(_DWORD)v61)
          v70 = 0;
        v62 = v70 & ((unint64_t)v259 - *(_QWORD *)a1);
      }
      if (v32 >= 0x41 && v43)
        MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
      if (v260 < 0x41)
        goto LABEL_110;
      v185 = v259;
      LODWORD(v54) = v66;
LABEL_293:
      v71 = (void *)v62;
      v32 = v61;
      if (v185)
      {
        MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
LABEL_110:
        LODWORD(v54) = v66;
LABEL_111:
        v71 = (void *)v62;
        v32 = v61;
      }
      v256 = *((_DWORD *)a1 + 2);
      v252 = v71;
      if (v256 > 0x40)
      {
        v255 = (char *)operator new[]();
        memcpy(v255, *(const void **)a1, (((unint64_t)v256 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v255 = *(char **)a1;
      }
      llvm::APInt::operator-=((uint64_t)&v255, 1uLL);
      v72 = v256;
      v73 = v255;
      v256 = 0;
      if (v72 >= 0x41)
      {
        v80 = 0;
        v81 = (unint64_t)(v72 + 63) >> 6;
        v82 = (unint64_t *)v255;
        v83 = (unint64_t *)v252;
        v84 = v81;
        v74 = v250;
        do
        {
          v85 = *v83++;
          v86 = *v82 - v85;
          v87 = *v82 < v85;
          v88 = *v82 + ~v85;
          if (v80)
          {
            v80 = v88 >= *v82;
          }
          else
          {
            v88 = v86;
            v80 = v87;
          }
          *v82++ = v88;
          --v84;
        }
        while (v84);
        *(_QWORD *)&v73[8 * (v81 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v72;
      }
      else
      {
        v74 = v250;
        if ((_DWORD)v72)
          v75 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v72;
        else
          v75 = 0;
        v73 = (char *)(v75 & (v255 - (_BYTE *)v252));
      }
      if (v74 >= 0x41 && v246)
        MEMORY[0x1CAA32F9C](v246, 0x1000C8000313F17);
      if (v256 >= 0x41 && v255)
        MEMORY[0x1CAA32F9C](v255, 0x1000C8000313F17);
      if (++v31 >= (2 * *((_DWORD *)a1 + 2)))
        goto LABEL_170;
      v24 = v282;
      if (v282 > 0x40)
        break;
      v23 = (unint64_t)v281;
      v36 = v281;
      v35 = v73;
      v37 = v72;
      if (v281 >= v73)
      {
        if (v281 != v73)
          goto LABEL_170;
        v36 = v281;
        v23 = (unint64_t)v73;
        goto LABEL_344;
      }
    }
    v36 = v281;
    v104 = ((unint64_t)v282 + 63) >> 3;
    v105 = v104 & 0x3FFFFFF8;
    while (v105)
    {
      v106 = *(_QWORD *)&v281[v105 - 8];
      v107 = *(_QWORD *)&v73[v105 - 8];
      v105 -= 8;
      v108 = v106 > v107;
      if (v106 != v107)
      {
        v23 = (unint64_t)v281;
        v35 = v73;
        v37 = v72;
        if (!v108)
          goto LABEL_49;
        break;
      }
    }
    if (memcmp(v281, v73, v104 & 0x3FFFFFF8))
      break;
    v23 = (unint64_t)v36;
LABEL_344:
    v251 = v280;
    if (v280 < 0x41 || v251 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v279) <= 0x40)
    {
      v29 = (char *)v279;
      v204 = &v279;
      if (v251 >= 0x41)
        v204 = (uint64_t *)v279;
      v35 = v73;
      v37 = v72;
      if (!*v204)
        continue;
    }
    break;
  }
LABEL_170:
  v254 = v54;
  if (v54 > 0x40)
  {
    v253 = (char *)operator new[]();
    memcpy(v253, __src, (((unint64_t)v254 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v253 = __src;
  }
  v109 = v247;
  result = (char *)llvm::APInt::operator+=((uint64_t)&v253, 1uLL);
  v111 = v254;
  v112 = v253;
  v254 = 0;
  if (*((_DWORD *)v247 + 2) > 0x40u)
  {
    result = *v247;
    if (!*v247)
    {
      v109 = v247;
      goto LABEL_173;
    }
    result = (char *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    v203 = v254;
    v109 = v247;
    *v247 = v112;
    *((_DWORD *)v247 + 2) = v111;
    if (v203 >= 0x41)
    {
      result = v253;
      if (v253)
        result = (char *)MEMORY[0x1CAA32F9C](v253, 0x1000C8000313F17);
    }
  }
  else
  {
LABEL_173:
    *v109 = v253;
    *((_DWORD *)v109 + 2) = v111;
  }
  *((_DWORD *)v109 + 5) = v31 - *((_DWORD *)a1 + 2);
  if (v272 >= 0x41)
  {
    result = v271;
    if (v271)
      result = (char *)MEMORY[0x1CAA32F9C](v271, 0x1000C8000313F17);
  }
  if (v274 >= 0x41)
  {
    result = v273;
    if (v273)
      result = (char *)MEMORY[0x1CAA32F9C](v273, 0x1000C8000313F17);
  }
  if (v276 >= 0x41)
  {
    result = (char *)v275;
    if (v275)
      result = (char *)MEMORY[0x1CAA32F9C](v275, 0x1000C8000313F17);
  }
  if (v32 >= 0x41 && v252)
    result = (char *)MEMORY[0x1CAA32F9C](v252, 0x1000C8000313F17);
  if (v54 >= 0x41 && __src)
    result = (char *)MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v280 >= 0x41)
  {
    result = (char *)v279;
    if (v279)
      result = (char *)MEMORY[0x1CAA32F9C](v279, 0x1000C8000313F17);
  }
  if (v282 >= 0x41)
  {
    result = v281;
    if (v281)
      result = (char *)MEMORY[0x1CAA32F9C](v281, 0x1000C8000313F17);
  }
  if (v72 >= 0x41 && v73)
    result = (char *)MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
  if (v284 >= 0x41)
  {
    result = (char *)v283;
    if (v283)
      return (char *)MEMORY[0x1CAA32F9C](v283, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *sub_1C5551B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unsigned int v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  int v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  const void **v31;
  unint64_t v32;
  const void *v33;
  unsigned int v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  llvm::APInt *v39;
  unsigned int v40;
  void *v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BOOL4 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  llvm::APInt *result;
  unsigned int v61;
  const void *v62;
  unsigned int v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  llvm::APInt *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _BOOL4 v78;
  uint64_t v79;
  unint64_t *v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BOOL4 v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BOOL4 v94;
  const void *v95;
  const void *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _BOOL4 v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _BOOL4 v114;
  unint64_t v115;
  unsigned int v116;
  unsigned int v117;
  char *v118;
  void *v121;
  unsigned int v122;
  int v123;
  void *__src;
  llvm::APInt *v125;
  unsigned int v126;
  void *v127;
  unsigned int v128;
  void *v129;
  unsigned int v130;
  void *v131;
  unsigned int v132;
  void *v133;
  unsigned int v134;
  void *v135;
  unsigned int v136;
  unint64_t v137;
  unsigned int v138;
  uint64_t *v139;
  unsigned int v140;
  void *v141;
  unsigned int v142;
  const void *v143;
  int v144;
  void *v145;
  int v146;
  llvm::APInt *v147;
  int v148;
  llvm::APInt *v149;
  unsigned int v150;
  char *v151;
  unsigned int v152;

  v152 = 1;
  v151 = 0;
  v150 = 1;
  v149 = 0;
  v148 = 1;
  v147 = 0;
  v146 = 1;
  v145 = 0;
  v144 = 1;
  v143 = 0;
  v142 = 1;
  v141 = 0;
  v2 = *(_DWORD *)(a1 + 8);
  v140 = v2;
  if (v2 > 0x40)
  {
    v4 = (uint64_t *)&v139;
    llvm::APInt::initSlowCase((llvm::APInt *)&v139, 0, 0);
    v3 = v2 - 1;
    if (v140 >= 0x41)
      v4 = &v139[v3 >> 6];
  }
  else
  {
    v139 = 0;
    LOBYTE(v3) = v2 - 1;
    v4 = (uint64_t *)&v139;
  }
  *v4 |= 1 << v3;
  *(_DWORD *)(a2 + 8) = 1;
  *(_QWORD *)a2 = 0;
  sub_1C4DA6CE8((const void **)a1, (uint64_t)&v137);
  if (v152 >= 0x41 && v151)
    MEMORY[0x1CAA32F9C](v151, 0x1000C8000313F17);
  v151 = (char *)v137;
  v152 = v138;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = v5 - 1;
  v138 = v5;
  if (v5 <= 0x40)
  {
    v7 = *(_QWORD *)a1;
LABEL_6:
    v137 = v7 >> v6;
    v6 = v5;
    goto LABEL_7;
  }
  v7 = operator new[]();
  v137 = v7;
  v5 = v138;
  memcpy((void *)v7, *(const void **)a1, (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8);
  if (v5 <= 0x40)
  {
    if (v5 != v6)
      goto LABEL_6;
    v137 = 0;
  }
  else
  {
    llvm::APInt::lshrSlowCase((llvm::APInt **)&v137, v6);
    v6 = v138;
  }
  if (v6 >= 0x41)
  {
    v42 = 0;
    v43 = (unint64_t *)v137;
    v44 = v139;
    v45 = ((unint64_t)v6 + 63) >> 6;
    v46 = v45;
    do
    {
      v47 = *v44++;
      v48 = v47 + *v43;
      v49 = v48 + 1 <= *v43;
      if (v42)
      {
        ++v48;
        v42 = v49;
      }
      else
      {
        v42 = v48 < *v43;
      }
      *v43++ = v48;
      --v46;
    }
    while (v46);
    *(_QWORD *)(v137 + 8 * (v45 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    v6 = v138;
    v10 = (void *)v137;
    goto LABEL_10;
  }
LABEL_7:
  v8 = (unint64_t)v139 + v137;
  if (v6)
    v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  else
    v9 = 0;
  v10 = (void *)(v9 & v8);
  v137 = v9 & v8;
LABEL_10:
  v138 = 0;
  if (v142 > 0x40 && v141)
  {
    MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
    v141 = v10;
    v142 = v6;
    if (v138 >= 0x41 && v137)
    {
      MEMORY[0x1CAA32F9C](v137, 0x1000C8000313F17);
      v6 = v142;
    }
  }
  else
  {
    v141 = v10;
    v142 = v6;
  }
  v136 = v6;
  if (v6 > 0x40)
  {
    v135 = (void *)operator new[]();
    memcpy(v135, v141, (((unint64_t)v136 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v135 = v141;
  }
  llvm::APInt::operator-=((uint64_t)&v135, 1uLL);
  v11 = v136;
  v12 = (uint64_t *)v135;
  v136 = 0;
  llvm::APInt::urem((llvm::APInt *)&v141, (const llvm::APInt *)&v151, (llvm::APInt *)&v137);
  if (v138 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v137);
  }
  else
  {
    if (v138)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
    else
      v13 = 0;
    v137 = v13 & ~v137;
  }
  llvm::APInt::operator++((uint64_t)&v137);
  v14 = v138;
  if (v138 >= 0x41)
  {
    v71 = 0;
    v72 = (unint64_t *)v137;
    v73 = ((unint64_t)v138 + 63) >> 6;
    v74 = v12;
    v75 = v73;
    do
    {
      v76 = *v74++;
      v77 = v76 + *v72;
      v78 = v77 + 1 <= *v72;
      if (v71)
      {
        ++v77;
        v71 = v78;
      }
      else
      {
        v71 = v77 < *v72;
      }
      *v72++ = v77;
      --v75;
    }
    while (v75);
    *(_QWORD *)(v137 + 8 * (v73 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
    v14 = v138;
    v17 = (unint64_t *)v137;
  }
  else
  {
    v15 = (unint64_t)v12 + v137;
    if (v138)
      v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
    else
      v16 = 0;
    v17 = (unint64_t *)(v16 & v15);
    v137 = v16 & v15;
  }
  v138 = 0;
  if (v150 > 0x40 && v149)
  {
    MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
    v149 = (llvm::APInt *)v17;
    v150 = v14;
    if (v138 >= 0x41 && v137)
      MEMORY[0x1CAA32F9C](v137, 0x1000C8000313F17);
  }
  else
  {
    v149 = (llvm::APInt *)v17;
    v150 = v14;
  }
  if (v11 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if (v136 >= 0x41 && v135)
    MEMORY[0x1CAA32F9C](v135, 0x1000C8000313F17);
  v18 = *(_DWORD *)(a1 + 8);
  llvm::APInt::udiv((llvm::APInt *)&v139, (const llvm::APInt *)&v149, (llvm::APInt *)&v137);
  v19 = (char *)v137;
  v147 = (llvm::APInt *)v137;
  v20 = v138;
  v148 = v138;
  llvm::APInt::operator*((uint64_t)&v147, &v149, (uint64_t)&v137);
  if (v138 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v137);
  }
  else
  {
    if (v138)
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
    else
      v21 = 0;
    v137 = v21 & ~v137;
  }
  llvm::APInt::operator++((uint64_t)&v137);
  v22 = v138;
  if (v138 >= 0x41)
  {
    v79 = 0;
    v80 = (unint64_t *)v137;
    v81 = v139;
    v82 = ((unint64_t)v138 + 63) >> 6;
    v83 = v82;
    do
    {
      v84 = *v81++;
      v85 = v84 + *v80;
      v86 = v85 + 1 <= *v80;
      if (v79)
      {
        ++v85;
        v79 = v86;
      }
      else
      {
        v79 = v85 < *v80;
      }
      *v80++ = v85;
      --v83;
    }
    while (v83);
    *(_QWORD *)(v137 + 8 * (v82 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
    v22 = v138;
    v24 = (void *)v137;
  }
  else
  {
    if (v138)
      v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
    else
      v23 = 0;
    v24 = (void *)(v23 & ((unint64_t)v139 + v137));
  }
  v145 = v24;
  v146 = v22;
  llvm::APInt::udiv((llvm::APInt *)&v139, (const llvm::APInt *)&v151, (llvm::APInt *)&v137);
  v143 = (const void *)v137;
  v25 = v138;
  v144 = v138;
  llvm::APInt::operator*((uint64_t)&v143, &v151, (uint64_t)&v137);
  if (v138 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v137);
  }
  else
  {
    if (v138)
      v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
    else
      v26 = 0;
    v137 = v26 & ~v137;
  }
  v123 = v18 - 1;
  llvm::APInt::operator++((uint64_t)&v137);
  v27 = v138;
  if (v138 >= 0x41)
  {
    v87 = 0;
    v88 = (unint64_t *)v137;
    v89 = v139;
    v90 = ((unint64_t)v138 + 63) >> 6;
    v91 = v90;
    do
    {
      v92 = *v89++;
      v93 = v92 + *v88;
      v94 = v93 + 1 <= *v88;
      if (v87)
      {
        ++v93;
        v87 = v94;
      }
      else
      {
        v87 = v93 < *v88;
      }
      *v88++ = v93;
      --v91;
    }
    while (v91);
    *(_QWORD *)(v137 + 8 * (v90 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
    v27 = v138;
    __src = (void *)v137;
  }
  else
  {
    if (v138)
      v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
    else
      v28 = 0;
    __src = (void *)(v28 & ((unint64_t)v139 + v137));
  }
  v118 = 0;
  v122 = 1;
  v29 = v22;
  LODWORD(v30) = v27;
  while (1)
  {
LABEL_43:
    v138 = v20;
    if (v20 > 0x40)
    {
      v137 = operator new[]();
      memcpy((void *)v137, v19, (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8);
      sub_1C4888094((uint64_t)&v137, 1u);
      if (v19)
        MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    }
    else
    {
      v137 = (unint64_t)v19;
      sub_1C4888094((uint64_t)&v137, 1u);
    }
    v19 = (char *)v137;
    v147 = (llvm::APInt *)v137;
    v20 = v138;
    v138 = v29;
    if (v29 > 0x40)
    {
      v137 = operator new[]();
      v95 = v145;
      memcpy((void *)v137, v145, (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8);
      sub_1C4888094((uint64_t)&v137, 1u);
      if (v95)
        MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
    }
    else
    {
      v137 = (unint64_t)v145;
      sub_1C4888094((uint64_t)&v137, 1u);
    }
    v31 = (const void **)v137;
    v145 = (void *)v137;
    v29 = v138;
    v146 = v138;
    if (v138 > 0x40)
    {
      v50 = (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8;
      while (v50)
      {
        v51 = *(_QWORD *)(v137 + v50 - 8);
        v52 = *(_QWORD *)((char *)v149 + v50 - 8);
        v50 -= 8;
        if (v51 != v52)
        {
          if (v51 <= v52)
            goto LABEL_49;
          break;
        }
      }
    }
    else if (v137 < (unint64_t)v149)
    {
      goto LABEL_49;
    }
    v134 = v20;
    if (v20 > 0x40)
    {
      v133 = (void *)operator new[]();
      memcpy(v133, v19, (((unint64_t)v134 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v133 = v19;
    }
    llvm::APInt::operator+=((uint64_t)&v133, 1uLL);
    v38 = v134;
    v39 = (llvm::APInt *)v133;
    v134 = 0;
    if (v20 > 0x40 && v19)
    {
      MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
      v147 = v39;
      if (v134 >= 0x41 && v133)
        MEMORY[0x1CAA32F9C](v133, 0x1000C8000313F17);
    }
    else
    {
      v147 = (llvm::APInt *)v133;
    }
    v132 = v29;
    if (v29 > 0x40)
    {
      v131 = (void *)operator new[]();
      memcpy(v131, v31, (((unint64_t)v132 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v131 = v31;
    }
    llvm::APInt::operator-=((uint64_t)&v131, (unint64_t **)&v149);
    v40 = v132;
    v41 = v131;
    v132 = 0;
    if (v29 > 0x40 && v31)
    {
      MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
      v145 = v41;
      v146 = v40;
      if (v132 >= 0x41 && v131)
        MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
    }
    else
    {
      v145 = v131;
      v146 = v40;
    }
    v31 = (const void **)v41;
    v19 = (char *)v39;
    v29 = v40;
    v20 = v38;
LABEL_49:
    v138 = v25;
    if (v25 > 0x40)
    {
      v137 = operator new[]();
      v96 = v143;
      memcpy((void *)v137, v143, (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8);
      sub_1C4888094((uint64_t)&v137, 1u);
      if (v96)
        MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
    }
    else
    {
      v137 = (unint64_t)v143;
      sub_1C4888094((uint64_t)&v137, 1u);
    }
    v121 = (void *)v137;
    v143 = (const void *)v137;
    v32 = v138;
    v138 = v30;
    if (v30 > 0x40)
    {
      v137 = operator new[]();
      memcpy((void *)v137, __src, (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8);
      sub_1C4888094((uint64_t)&v137, 1u);
      if (__src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    }
    else
    {
      v137 = (unint64_t)__src;
      sub_1C4888094((uint64_t)&v137, 1u);
    }
    v30 = v138;
    __src = (void *)v137;
    if (v138 > 0x40)
    {
      v53 = (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8;
      while (v53)
      {
        v54 = *(_QWORD *)(v137 - 8 + v53);
        v55 = *(_QWORD *)&v151[v53 - 8];
        v53 -= 8;
        if (v54 != v55)
        {
          if (v54 <= v55)
            goto LABEL_55;
          break;
        }
      }
    }
    else if (v137 < (unint64_t)v151)
    {
LABEL_55:
      v33 = v121;
      v25 = v32;
      goto LABEL_56;
    }
    v130 = v32;
    if (v32 > 0x40)
    {
      v129 = (void *)operator new[]();
      memcpy(v129, v121, (((unint64_t)v130 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v129 = v121;
    }
    llvm::APInt::operator+=((uint64_t)&v129, 1uLL);
    v25 = v130;
    v33 = v129;
    v130 = 0;
    if (v32 > 0x40)
    {
      if (v121)
      {
        MEMORY[0x1CAA32F9C](v121, 0x1000C8000313F17);
        v143 = v33;
        if (v130 >= 0x41 && v129)
          MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
      }
      else
      {
        v143 = v129;
      }
    }
    else
    {
      v143 = v129;
    }
    if (v30 >= 0x41)
    {
      v106 = (void *)operator new[]();
      memcpy(v106, __src, ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8);
      v107 = 0;
      v108 = (unint64_t *)v151;
      v109 = (unint64_t)(v30 + 63) >> 6;
      v110 = (unint64_t *)v106;
      v111 = v109;
      do
      {
        v112 = *v108++;
        v113 = *v110 - v112;
        v114 = *v110 < v112;
        v115 = *v110 + ~v112;
        if (v107)
        {
          v107 = v115 >= *v110;
        }
        else
        {
          v115 = v113;
          v107 = v114;
        }
        *v110++ = v115;
        --v111;
      }
      while (v111);
      *((_QWORD *)v106 + (v109 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
      if (__src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      v121 = (void *)v33;
      __src = v106;
    }
    else
    {
      v37 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
      if (!(_DWORD)v30)
        v37 = 0;
      __src = (void *)(v37 & ((_BYTE *)__src - v151));
      v121 = (void *)v33;
    }
LABEL_56:
    v34 = v152;
    if (v152 >= 0x41)
    {
      v97 = v152 + 63;
      v36 = (char *)operator new[]();
      memcpy(v36, v151, (v97 >> 3) & 0x3FFFFFF8);
      v98 = 0;
      v99 = (unint64_t *)v36;
      v100 = (unint64_t *)__src;
      v101 = v97 >> 6;
      do
      {
        v102 = *v100++;
        v103 = *v99 - v102;
        v104 = *v99 < v102;
        v105 = *v99 + ~v102;
        if (v98)
        {
          v98 = v105 >= *v99;
        }
        else
        {
          v105 = v103;
          v98 = v104;
        }
        *v99++ = v105;
        --v101;
      }
      while (v101);
      *(_QWORD *)&v36[8 * (v97 >> 6) - 8] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
    }
    else
    {
      v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v152;
      if (!v152)
        v35 = 0;
      v36 = (char *)(v35 & (v151 - (_BYTE *)__src));
    }
    if (v122 >= 0x41 && v118)
      MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
    ++v123;
    if (v20 > 0x40)
      break;
    v118 = v36;
    v122 = v34;
    if (v19 >= v36)
    {
      if (v19 != v36)
        goto LABEL_120;
LABEL_64:
      if (v29 >= 0x41)
      {
        if (v29 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v145) > 0x40)
          goto LABEL_120;
      }
      else
      {
        v31 = (const void **)&v145;
      }
      v118 = v36;
      v122 = v34;
      if (*v31)
        goto LABEL_120;
    }
  }
  v56 = (v20 + 63) >> 3;
  v57 = v56 & 0x3FFFFFF8;
  while (v57)
  {
    v58 = *(_QWORD *)&v19[v57 - 8];
    v59 = *(_QWORD *)&v36[v57 - 8];
    v57 -= 8;
    if (v58 != v59)
    {
      v118 = v36;
      v122 = v34;
      if (v58 <= v59)
        goto LABEL_43;
      break;
    }
  }
  if (!memcmp(v19, v36, v56 & 0x3FFFFFF8))
    goto LABEL_64;
LABEL_120:
  v128 = v25;
  if (v25 > 0x40)
  {
    v127 = (void *)operator new[]();
    memcpy(v127, v121, (((unint64_t)v128 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v127 = (void *)v33;
  }
  result = (llvm::APInt *)llvm::APInt::operator+=((uint64_t)&v127, 1uLL);
  v61 = v128;
  v62 = v127;
  v128 = 0;
  if (*(_DWORD *)(a2 + 8) > 0x40u)
  {
    result = *(llvm::APInt **)a2;
    if (*(_QWORD *)a2)
    {
      result = (llvm::APInt *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      v116 = v128;
      *(_QWORD *)a2 = v62;
      *(_DWORD *)(a2 + 8) = v61;
      if (v116 >= 0x41)
      {
        result = (llvm::APInt *)v127;
        if (v127)
          result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
      }
    }
    else
    {
      *(_QWORD *)a2 = v127;
      *(_DWORD *)(a2 + 8) = v61;
    }
  }
  else
  {
    *(_QWORD *)a2 = v127;
    *(_DWORD *)(a2 + 8) = v61;
  }
  v63 = *(_DWORD *)(a1 + 8);
  v64 = v63 - 1;
  if (v63 >= 0x41)
    v65 = (_QWORD *)(*(_QWORD *)a1 + 8 * ((v63 - 1) >> 6));
  else
    v65 = (_QWORD *)a1;
  if (((*v65 >> v64) & 1) != 0)
  {
    v126 = v61;
    v66 = (uint64_t)v62;
    v67 = v61;
    if (v61 < 0x41
      || (v66 = operator new[](),
          v125 = (llvm::APInt *)v66,
          v67 = v126,
          memcpy((void *)v66, v62, (((unint64_t)v126 + 63) >> 3) & 0x3FFFFFF8),
          v126 <= 0x40))
    {
      if (v67)
        v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
      else
        v68 = 0;
      v125 = (llvm::APInt *)(v68 & ~v66);
    }
    else
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v125);
    }
    result = (llvm::APInt *)llvm::APInt::operator++((uint64_t)&v125);
    v69 = v126;
    v70 = v125;
    v126 = 0;
    if (v61 > 0x40 && v62)
    {
      result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
      v117 = v126;
      *(_QWORD *)a2 = v70;
      *(_DWORD *)(a2 + 8) = v69;
      if (v117 >= 0x41)
      {
        result = v125;
        if (v125)
          result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
      }
    }
    else
    {
      *(_QWORD *)a2 = v125;
      *(_DWORD *)(a2 + 8) = v69;
    }
  }
  *(_DWORD *)(a2 + 16) = v123 - *(_DWORD *)(a1 + 8);
  if (v140 >= 0x41)
  {
    result = (llvm::APInt *)v139;
    if (v139)
      result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v139, 0x1000C8000313F17);
  }
  if (v142 >= 0x41)
  {
    result = (llvm::APInt *)v141;
    if (v141)
      result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
  }
  if (v30 >= 0x41 && __src)
    result = (llvm::APInt *)MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v25 >= 0x41 && v121)
  {
    result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v121, 0x1000C8000313F17);
    v29 = v146;
  }
  if (v29 >= 0x41)
  {
    result = (llvm::APInt *)v145;
    if (v145)
      result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
  }
  if (v20 >= 0x41)
  {
    result = v147;
    if (v147)
      result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
  }
  if (v34 >= 0x41 && v36)
    result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
  if (v150 >= 0x41)
  {
    result = v149;
    if (v149)
      result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
  }
  if (v152 >= 0x41)
  {
    result = (llvm::APInt *)v151;
    if (v151)
      return (llvm::APInt *)MEMORY[0x1CAA32F9C](v151, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C5552F50(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;

  if (*(_UNKNOWN **)a2 == &unk_1C866F1C0)
  {
    *(_QWORD *)result = &unk_1C866F1C0;
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v3;
  }
  else
  {
    *(_QWORD *)result = &unk_1C866F210;
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
    v2 = *(_BYTE *)(result + 20) & 0xF8 | *(_BYTE *)(a2 + 20) & 7;
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 20) = v2 & 0xF7 | *(_BYTE *)(a2 + 20) & 8;
  }
  *(_QWORD *)a2 = &unk_1C866F210;
  return result;
}

uint64_t sub_1C5552FCC(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t sub_1C5552FDC(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t LLVMAGXRuntimeMajorVersion()
{
  return 1;
}

uint64_t LLVMAGXRuntimeMinorVersion()
{
  return 104;
}

uint64_t llvm::LLVMAGXDriverMajorVersionFromMetadata(llvm *this, llvm::Module *a2)
{
  return sub_1C5553000((uint64_t)this, 0);
}

uint64_t sub_1C5553000(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  const char *v16;
  __int16 v17;

  v16 = "agx.interface";
  v17 = 259;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)&v16);
  if (result)
  {
    v4 = *(uint64_t ***)(result + 48);
    if (*((_DWORD *)v4 + 2) != 1)
      return 0;
    v5 = **v4;
    if (*(_DWORD *)(v5 + 8) != 3)
      return 0;
    v8 = *(_BYTE **)(v5 - 24);
    v6 = v5 - 24;
    v7 = v8;
    if (*v8)
      return 0;
    v9 = *((_QWORD *)v7 + 1);
    if (*(_QWORD *)v9 != 7)
      return 0;
    v10 = *(_DWORD *)(v9 + 24);
    v11 = *(_DWORD *)(v9 + 27);
    v12 = v10 == 1936876918 && v11 == 1852795251;
    if (v12
      && (v13 = *(_QWORD *)(v6 + 8 * (a2 + 1)), *(_BYTE *)v13 == 1)
      && (v14 = *(_QWORD *)(v13 + 128), *(_BYTE *)(v14 + 16) == 16))
    {
      v15 = (unsigned int *)(v14 + 24);
      if (*(_DWORD *)(v14 + 32) >= 0x41u)
        v15 = *(unsigned int **)v15;
      return *v15;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::LLVMAGXDriverMinorVersionFromMetadata(llvm *this, llvm::Module *a2)
{
  return sub_1C5553000((uint64_t)this, 1);
}

uint64_t llvm::LLVMAGXDriverVersionFromMetadata(llvm *this, llvm::Module *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[13];
  char v7;
  uint64_t v8;

  sub_1C4D7C8B4((uint64_t)v6);
  sub_1C5553000((uint64_t)this, 0);
  v3 = (_QWORD *)std::ostream::operator<<();
  sub_1C4D7C62C(v3, (uint64_t)".", 1);
  sub_1C5553000((uint64_t)this, 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v6[2] = v4;
  v6[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CAA32F18](&v8);
}

void llvm::GetGitHash(_BYTE *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

uint64_t llvm::AGXPseudoWaitPlacement::needsImplicitUse(llvm::AGXPseudoWaitPlacement *this, llvm::MachineInstr *a2)
{
  return (*(uint64_t (**)(llvm::AGXPseudoWaitPlacement *, _QWORD))(*(_QWORD *)this + 176))(this, *(_QWORD *)(*((_QWORD *)a2 + 2) + 16));
}

uint64_t llvm::AGXPseudoWaitPlacement::runOnMachineFunction(llvm::AGXPseudoWaitPlacement *this, llvm::MachineFunction *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _DWORD *v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  unsigned __int32 v20;
  int v21;
  _OWORD *v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  int v44;
  __int32 *v45;
  __int32 *v46;
  int v47;
  __int32 *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v62;
  unint64_t FirstTerminator;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __int32 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  _QWORD *v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  _OWORD *v99;
  uint64_t v100;
  uint64_t v101;
  llvm::MachineFunction *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v123;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  char v129;
  uint64_t v130;
  llvm::MachineBasicBlock *v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  _OWORD *v140;
  int v141;
  __int32 *__s;
  size_t __n;
  _QWORD v144[10];

  v144[8] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 31) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 32) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 33) = *((_QWORD *)a2 + 5);
  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::LiveIntervals::ID);
  *((_QWORD *)this + 34) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::LiveIntervals::ID);
  if (*(_BYTE *)(*((_QWORD *)this + 33) + 16))
  {
    v6 = *((_QWORD *)a2 + 41);
    if ((llvm::MachineFunction *)v6 != (llvm::MachineFunction *)((char *)a2 + 320))
    {
      v129 = 0;
      v7 = &v140;
      while (1)
      {
        v139 = 1;
        *(_QWORD *)&v8 = -1;
        *((_QWORD *)&v8 + 1) = -1;
        v7[2] = v8;
        v7[3] = v8;
        *v7 = v8;
        v7[1] = v8;
        __s = (__int32 *)v144;
        __n = 0x1000000000;
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 34) + 288) + 392)
                       + 16 * *(unsigned int *)(v6 + 24));
        v10 = v6 + 48;
        v131 = (llvm::MachineBasicBlock *)v6;
        v132 = v6 + 48;
        v11 = *(_QWORD *)(v6 + 56);
        while (v11 != v10)
        {
          v12 = *(_QWORD *)(v11 + 16);
          v13 = *(unsigned __int16 *)(v12 + 2);
          v14 = *(unsigned __int8 *)(v12 + 4);
          if ((*(unsigned int (**)(llvm::AGXPseudoWaitPlacement *, uint64_t))(*(_QWORD *)this + 184))(this, v11))
          {
            v15 = (_DWORD)v14 == 0;
          }
          else
          {
            v15 = 1;
          }
          if (!v15)
          {
            v16 = *(_DWORD **)(v11 + 32);
            if ((*v16 & 0xFFFFF) == 0)
            {
              v54 = v16[1];
              v55 = *((_QWORD *)this + 34);
              if ((v54 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v55 + 416)
                || (v56 = *(_QWORD *)(*(_QWORD *)(v55 + 408) + 8 * (v54 & 0x7FFFFFFF))) == 0)
              {
                v56 = sub_1C4851220(*((_QWORD *)this + 34), v54);
                v127 = *(_QWORD *)(v55 + 304);
                v58 = *(_QWORD *)(v55 + 248);
                *(_QWORD *)v127 = v58;
                *(_QWORD *)(v127 + 8) = *(_QWORD *)(v58 + 40);
                *(_OWORD *)(v127 + 16) = *(_OWORD *)(v55 + 288);
                *(_QWORD *)(v127 + 32) = v55 + 312;
                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v127);
                *(_DWORD *)(v127 + 184) = 0;
                v59 = *(_QWORD *)(v55 + 256);
                v15 = *(_BYTE *)(v59 + 16) == 0;
                v60 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v59 + 24)
                                                      + 16 * (*(_DWORD *)(v56 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                         + 34);
                v62 = !v15 && v60 != 0;
                llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v55 + 304), (llvm::LiveInterval *)v56, v62);
                llvm::LiveIntervals::computeDeadValues(v55, v56, 0);
              }
              v57 = *(_QWORD *)(v56 + 104);
              if (v57)
              {
                while ((**(_QWORD **)v57 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)v57
                                                                                + 24 * *(unsigned int *)(v57 + 8)
                                                                                - 16) & 0xFFFFFFFFFFFFFFF8))
                {
                  v57 = *(_QWORD *)(v57 + 104);
                  if (!v57)
                    goto LABEL_13;
                }
                LODWORD(v134) = v54;
                sub_1C4838834((uint64_t)&v139, &v134);
              }
            }
          }
LABEL_13:
          if ((_DWORD)__n)
            v17 = v13 > v14;
          else
            v17 = 0;
          if (v17)
          {
            while (1)
            {
              v18 = *(_QWORD *)(v11 + 32);
              v19 = *(_DWORD *)(v18 + 32 * v14);
              if ((v19 & 0x10000FF) == 0 && (v19 & 0xFFF00) != 0)
              {
                v20 = *(_DWORD *)(v18 + 32 * v14 + 4);
                if ((v139 & 1) != 0)
                {
                  v21 = 16;
                  v22 = v7;
                }
                else
                {
                  v21 = v141;
                  if (!v141)
                    goto LABEL_21;
                  v22 = v140;
                }
                v23 = v21 - 1;
                v24 = v23 & (37 * v20);
                v25 = *((_DWORD *)v22 + v24);
                if (v20 != v25)
                {
                  v26 = 1;
                  do
                  {
                    if (v25 == -1)
                      goto LABEL_21;
                    v27 = v24 + v26++;
                    v24 = v27 & v23;
                    v25 = *((_DWORD *)v22 + v24);
                  }
                  while (v20 != v25);
                }
                if (llvm::MachineInstr::findRegisterDefOperandIdx(v11, v20, 0, 1, *((_QWORD *)this + 32)) == -1)
                  break;
              }
LABEL_21:
              if (++v14 == v13)
                goto LABEL_17;
            }
            v28 = *((_QWORD *)this + 34);
            if ((v20 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v28 + 416)
              || (v29 = *(_QWORD *)(*(_QWORD *)(v28 + 408) + 8 * (v20 & 0x7FFFFFFF))) == 0)
            {
              v29 = sub_1C4851220(*((_QWORD *)this + 34), v20);
              v130 = *(_QWORD *)(v28 + 304);
              v49 = *(_QWORD *)(v28 + 248);
              *(_QWORD *)v130 = v49;
              *(_QWORD *)(v130 + 8) = *(_QWORD *)(v49 + 40);
              *(_OWORD *)(v130 + 16) = *(_OWORD *)(v28 + 288);
              *(_QWORD *)(v130 + 32) = v28 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v130);
              *(_DWORD *)(v130 + 184) = 0;
              v50 = *(_QWORD *)(v28 + 256);
              v15 = *(_BYTE *)(v50 + 16) == 0;
              v51 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v50 + 24)
                                                    + 16 * (*(_DWORD *)(v29 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                       + 34);
              v53 = !v15 && v51 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v28 + 304), (llvm::LiveInterval *)v29, v53);
              llvm::LiveIntervals::computeDeadValues(v28, v29, 0);
            }
            v135 = 0;
            v136 = 0;
            v137 = 0;
            LODWORD(v134) = 0x2000000;
            HIDWORD(v134) = v20;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v11, *(llvm::MachineFunction **)(*(_QWORD *)(v11 + 24) + 32), (const llvm::MachineOperand *)&v134);
            while (2)
            {
              v29 = *(_QWORD *)(v29 + 104);
              if (!v29)
              {
                if (sub_1C5553D9C((uint64_t)&v139, v20))
                {
                  v45 = &__s[__n];
                  v46 = wmemchr(__s, v20, __n);
                  if (!v46)
                    v46 = v45;
                  v47 = __n;
                  v48 = &__s[__n];
                  if (v48 != v46 + 1)
                  {
                    memmove(v46, v46 + 1, (char *)v48 - (char *)(v46 + 1));
                    v47 = __n;
                  }
                  LODWORD(__n) = v47 - 1;
                  v129 = 1;
                }
                else
                {
                  v129 = 1;
                }
                goto LABEL_21;
              }
              v30 = *(_WORD *)(v11 + 44);
              v31 = v11;
              if ((v30 & 4) != 0)
              {
                do
                  v31 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v31 + 44) & 4) != 0);
              }
              v32 = v11;
              if ((v30 & 8) != 0)
              {
                do
                  v32 = *(_QWORD *)(v32 + 8);
                while ((*(_WORD *)(v32 + 44) & 8) != 0);
              }
              v33 = *(_QWORD *)(v32 + 8);
              if (v31 != v33)
              {
                while (1)
                {
                  v34 = **(unsigned __int16 **)(v31 + 16);
                  v17 = v34 > 0x17;
                  v35 = (1 << v34) & 0x83E000;
                  if (v17 || v35 == 0)
                    break;
                  v31 = *(_QWORD *)(v31 + 8);
                  if (v31 == v33)
                  {
                    v31 = v33;
                    break;
                  }
                }
              }
              v37 = *(_QWORD *)(*((_QWORD *)this + 34) + 288);
              v38 = *(_QWORD *)(v37 + 368);
              v39 = *(unsigned int *)(v37 + 384);
              if ((_DWORD)v39)
              {
                LODWORD(v40) = ((v31 >> 4) ^ (v31 >> 9)) & (v39 - 1);
                v41 = (uint64_t *)(v38 + 16 * v40);
                v42 = *v41;
                if (v31 != *v41)
                {
                  v43 = 1;
                  while (v42 != -4096)
                  {
                    v44 = v40 + v43++;
                    v40 = v44 & (v39 - 1);
                    v42 = *(_QWORD *)(v38 + 16 * v40);
                    if (v31 == v42)
                    {
                      v41 = (uint64_t *)(v38 + 16 * v40);
                      goto LABEL_51;
                    }
                  }
                  goto LABEL_50;
                }
              }
              else
              {
LABEL_50:
                v41 = (uint64_t *)(v38 + 16 * v39);
              }
LABEL_51:
              llvm::LiveRange::extendInBlock(v29, v9, v41[1] & 0xFFFFFFFFFFFFFFF8 | 4);
              continue;
            }
          }
LABEL_17:
          if (!v11 || (*(_BYTE *)v11 & 4) == 0)
          {
            while ((*(_WORD *)(v11 + 44) & 8) != 0)
              v11 = *(_QWORD *)(v11 + 8);
          }
          v11 = *(_QWORD *)(v11 + 8);
          v10 = v132;
        }
        FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v131);
        v64 = FirstTerminator;
        v65 = *(_QWORD *)(*((_QWORD *)this + 34) + 288);
        if (v132 == FirstTerminator)
        {
          v80 = (uint64_t *)(*(_QWORD *)(v65 + 392) + 16 * *((unsigned int *)v131 + 6) + 8);
          goto LABEL_108;
        }
        v66 = *(_WORD *)(FirstTerminator + 44);
        v67 = FirstTerminator;
        if ((v66 & 4) != 0)
        {
          v67 = FirstTerminator;
          do
            v67 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v67 + 44) & 4) != 0);
        }
        v68 = FirstTerminator;
        if ((v66 & 8) != 0)
        {
          v68 = FirstTerminator;
          do
            v68 = *(_QWORD *)(v68 + 8);
          while ((*(_WORD *)(v68 + 44) & 8) != 0);
        }
        v69 = *(_QWORD *)(v68 + 8);
        if (v67 != v69)
        {
          while (1)
          {
            v70 = **(unsigned __int16 **)(v67 + 16);
            v17 = v70 > 0x17;
            v71 = (1 << v70) & 0x83E000;
            if (v17 || v71 == 0)
              break;
            v67 = *(_QWORD *)(v67 + 8);
            if (v67 == v69)
            {
              v67 = v69;
              break;
            }
          }
        }
        v73 = *(_QWORD *)(v65 + 368);
        v74 = *(unsigned int *)(v65 + 384);
        if (!(_DWORD)v74)
          goto LABEL_106;
        LODWORD(v75) = ((v67 >> 4) ^ (v67 >> 9)) & (v74 - 1);
        v76 = (uint64_t *)(v73 + 16 * v75);
        v77 = *v76;
        if (v67 != *v76)
          break;
LABEL_107:
        v80 = v76 + 1;
LABEL_108:
        v81 = __n;
        if ((_DWORD)__n)
        {
          v82 = *v80;
          v83 = v82 & 0xFFFFFFFFFFFFFFF8;
          v84 = (v82 >> 1) & 3;
          v126 = v82 & 0xFFFFFFFFFFFFFFF8;
          v128 = (_QWORD *)FirstTerminator;
          while (2)
          {
            v85 = __s[v81 - 1];
            sub_1C5553D9C((uint64_t)&v139, v85);
            LODWORD(__n) = __n - 1;
            v86 = *((_QWORD *)this + 34);
            if ((v85 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v86 + 416)
              || (v87 = *(_QWORD *)(*(_QWORD *)(v86 + 408) + 8 * (v85 & 0x7FFFFFFF))) == 0)
            {
              v87 = sub_1C4851220(*((_QWORD *)this + 34), v85);
              v125 = *(_QWORD *)(v86 + 304);
              v119 = *(_QWORD *)(v86 + 248);
              *(_QWORD *)v125 = v119;
              *(_QWORD *)(v125 + 8) = *(_QWORD *)(v119 + 40);
              *(_OWORD *)(v125 + 16) = *(_OWORD *)(v86 + 288);
              *(_QWORD *)(v125 + 32) = v86 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v125);
              *(_DWORD *)(v125 + 184) = 0;
              v120 = *(_QWORD *)(v86 + 256);
              v15 = *(_BYTE *)(v120 + 16) == 0;
              v121 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v120 + 24)
                                                     + 16 * (*(_DWORD *)(v87 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 34);
              v123 = !v15 && v121 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v86 + 304), (llvm::LiveInterval *)v87, v123);
              llvm::LiveIntervals::computeDeadValues(v86, v87, 0);
            }
            if (v132 != v64
              && llvm::MachineInstr::findRegisterDefOperandIdx(v64, v85, 0, 1, *((_QWORD *)this + 32)) != -1)
            {
              goto LABEL_145;
            }
            v88 = *(_DWORD *)(v87 + 8);
            v89 = *(_QWORD **)v87;
            if (v88)
            {
              v90 = v89[3 * v88 - 2];
              v91 = *(_DWORD *)(v83 + 24) | v84;
              v92 = (v90 >> 1) & 3 | *(_DWORD *)((v90 & 0xFFFFFFFFFFFFFFF8) + 24);
              v93 = *(_QWORD **)v87;
              v94 = *(unsigned int *)(v87 + 8);
              if (v91 < v92)
              {
                do
                {
                  v95 = v94 >> 1;
                  v96 = v93[3 * (v94 >> 1) + 1];
                  LODWORD(v96) = (v96 >> 1) & 3 | *(_DWORD *)((v96 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v94 -= (v94 >> 1) + 1;
                  v97 = v91 >= v96;
                  if (v91 >= v96)
                    v98 = v95 + 1;
                  else
                    v98 = 0;
                  v93 += 3 * v98;
                  if (!v97)
                    v94 = v95;
                }
                while (v94);
LABEL_125:
                if (v93 != &v89[3 * v88]
                  && ((*v93 >> 1) & 3 | *(_DWORD *)((*v93 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v83 + 24) | v84))
                {
                  v99 = v7;
                  v100 = v84;
                  v133 = 0;
                  v101 = *(_QWORD *)(*((_QWORD *)this + 31) + 8);
                  v102 = (llvm::MachineFunction *)*((_QWORD *)v131 + 4);
                  v138 = 0;
                  v103 = *((_QWORD *)v102 + 28);
                  if (v103)
                  {
                    *((_QWORD *)v102 + 28) = *(_QWORD *)v103;
                    v134 = 0;
                  }
                  else
                  {
                    v103 = sub_1C484358C((uint64_t)v102 + 128, 72, 3);
                    v134 = v138;
                    if (v138)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v138, v138, (uint64_t)&v134);
                      v138 = 0;
                    }
                  }
                  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v103, v102, v101 + 336, &v134, 0);
                  if (v134)
                    llvm::MetadataTracking::untrack((uint64_t)&v134, v134);
                  v84 = v100;
                  if (v138)
                    llvm::MetadataTracking::untrack((uint64_t)&v138, v138);
                  v104 = *((_QWORD *)v131 + 5);
                  *(_QWORD *)(v103 + 24) = v104;
                  v105 = *(_QWORD *)(v104 + 32);
                  v106 = *(unsigned int *)(v103 + 40);
                  v7 = v99;
                  v64 = (uint64_t)v128;
                  if ((_DWORD)v106)
                  {
                    v112 = *(_QWORD *)(v103 + 32);
                    v113 = *(_QWORD *)(v105 + 40);
                    v114 = 32 * v106;
                    do
                    {
                      if (!*(_BYTE *)v112)
                      {
                        v115 = *(unsigned int *)(v112 + 4);
                        if ((int)v115 >= 0)
                          v116 = (uint64_t *)(*(_QWORD *)(v113 + 272) + 8 * v115);
                        else
                          v116 = (uint64_t *)(*(_QWORD *)(v113 + 24) + 16 * (v115 & 0x7FFFFFFF) + 8);
                        v117 = *v116;
                        if (*v116)
                        {
                          v118 = *(_QWORD *)(v117 + 16);
                          *(_QWORD *)(v117 + 16) = v112;
                          *(_QWORD *)(v112 + 16) = v118;
                          if ((*(_BYTE *)(v112 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v112 + 24) = v117;
                          }
                          else
                          {
                            *(_QWORD *)(v112 + 24) = 0;
                            v116 = (uint64_t *)(v118 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v112 + 16) = v112;
                          *(_QWORD *)(v112 + 24) = 0;
                        }
                        *v116 = v112;
                      }
                      v112 += 32;
                      v114 -= 32;
                    }
                    while (v114);
                  }
                  v107 = *(_QWORD *)(v105 + 728);
                  if (v107)
                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v107 + 24))(v107, v103);
                  v108 = *v128 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v103 = v108 | *(_QWORD *)v103 & 7;
                  *(_QWORD *)(v103 + 8) = v128;
                  *(_QWORD *)(v108 + 8) = v103;
                  *v128 = *v128 & 7 | v103;
                  if (v133)
                    llvm::MetadataTracking::untrack((uint64_t)&v133, v133);
                  v135 = 0;
                  v136 = 0;
                  v137 = 0;
                  LODWORD(v134) = 0x2000000;
                  HIDWORD(v134) = v85;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v103, v102, (const llvm::MachineOperand *)&v134);
                  v109 = sub_1C4850BC8(*(_QWORD *)(*((_QWORD *)this + 34) + 288), v103, 0);
                  v110 = *(_QWORD *)(v87 + 104);
                  if (v110)
                  {
                    v111 = v109 & 0xFFFFFFFFFFFFFFF8 | 4;
                    v83 = v126;
                    do
                    {
                      llvm::LiveRange::extendInBlock(v110, v9, v111);
                      v110 = *(_QWORD *)(v110 + 104);
                    }
                    while (v110);
                    v129 = 1;
                  }
                  else
                  {
                    v129 = 1;
                    v83 = v126;
                  }
                }
LABEL_145:
                v81 = __n;
                if (!(_DWORD)__n)
                  goto LABEL_167;
                continue;
              }
            }
            else
            {
              v88 = 0;
            }
            break;
          }
          v93 = &v89[3 * v88];
          goto LABEL_125;
        }
LABEL_167:
        if (__s != (__int32 *)v144)
          free(__s);
        if ((v139 & 1) == 0)
          MEMORY[0x1CAA32FB4](v140, 4);
        v6 = *((_QWORD *)v131 + 1);
        if ((llvm::MachineFunction *)v6 == (llvm::MachineFunction *)((char *)a2 + 320))
          return v129 & 1;
      }
      v78 = 1;
      while (v77 != -4096)
      {
        v79 = v75 + v78++;
        v75 = v79 & (v74 - 1);
        v77 = *(_QWORD *)(v73 + 16 * v75);
        if (v67 == v77)
        {
          v76 = (uint64_t *)(v73 + 16 * v75);
          goto LABEL_107;
        }
      }
LABEL_106:
      v76 = (uint64_t *)(v73 + 16 * v74);
      goto LABEL_107;
    }
  }
  v129 = 0;
  return v129 & 1;
}

const char *sub_1C5553D8C()
{
  return "AGX pseudo wait placement pass";
}

uint64_t sub_1C5553D9C(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 16;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & (37 * a2);
  v6 = (int *)(v2 + 4 * v5);
  v7 = *v6;
  if (*v6 == a2)
  {
LABEL_8:
    *v6 = -2;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -1)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v7 = *(_DWORD *)(v2 + 4 * v5);
    if (v7 == a2)
    {
      v6 = (int *)(v2 + 4 * v5);
      goto LABEL_8;
    }
  }
  return 0;
}

uint64_t sub_1C5553E2C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeSlotIndexesPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX Pre RA Analysis";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "agx-pre-ra-analysis";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2FF0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55546E0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C5553EC4(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C5553F58(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5553FE4()
{
  return "AGX pre-RA Analysis pass";
}

uint64_t sub_1C5553FF4(uint64_t a1)
{
  *(_DWORD *)(a1 + 264) = 0;
  return 0;
}

uint64_t sub_1C5554000()
{
  return 0;
}

void *sub_1C5554008(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  *((_BYTE *)this + 160) = 1;
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C55540A4(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t i;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  uint64_t v65;
  int8x8_t v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  unsigned int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int8x8_t v91;
  uint8x8_t v92;
  unsigned int v93;

  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::LiveIntervals::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::LiveIntervals::ID);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 248) = v6;
  *(_QWORD *)(a1 + 256) = v5;
  v7 = a2 + 320;
  v8 = *(_QWORD *)(a2 + 328);
  if (v8 == a2 + 320)
  {
    v9 = 0;
    goto LABEL_139;
  }
  v9 = 0;
  do
  {
    for (i = *(_QWORD *)(v8 + 56); i != v8 + 48; i = *(_QWORD *)(i + 8))
    {
      v11 = *(_WORD *)(i + 44);
      v12 = *(_QWORD *)(*(_QWORD *)(i + 16) + 8);
      if ((v11 & 0xC) != 0 && (v11 & 4) == 0)
      {
        v29 = i;
        if ((v12 & 0x80) != 0)
        {
          v14 = *(_QWORD *)(v5 + 288);
LABEL_13:
          v15 = i;
          goto LABEL_14;
        }
        do
        {
          if ((*(_WORD *)(v29 + 44) & 8) == 0)
            goto LABEL_127;
          v29 = *(_QWORD *)(v29 + 8);
        }
        while ((*(_BYTE *)(*(_QWORD *)(v29 + 16) + 8) & 0x80) == 0);
      }
      else if ((v12 & 0x80) == 0)
      {
        goto LABEL_127;
      }
      v14 = *(_QWORD *)(v5 + 288);
      v15 = i;
      if ((v11 & 4) == 0)
        goto LABEL_13;
      do
        v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v15 + 44) & 4) != 0);
LABEL_14:
      v16 = i;
      if ((v11 & 8) != 0)
      {
        do
          v16 = *(_QWORD *)(v16 + 8);
        while ((*(_WORD *)(v16 + 44) & 8) != 0);
      }
      v17 = *(_QWORD *)(v16 + 8);
      if (v15 != v17)
      {
        while (1)
        {
          v18 = **(unsigned __int16 **)(v15 + 16);
          v19 = v18 > 0x17;
          v20 = (1 << v18) & 0x83E000;
          if (v19 || v20 == 0)
            break;
          v15 = *(_QWORD *)(v15 + 8);
          if (v15 == v17)
          {
            v15 = v17;
            break;
          }
        }
      }
      v22 = *(_QWORD *)(v14 + 368);
      v23 = *(unsigned int *)(v14 + 384);
      if (!(_DWORD)v23)
        goto LABEL_32;
      LODWORD(v24) = ((v15 >> 4) ^ (v15 >> 9)) & (v23 - 1);
      v25 = (uint64_t *)(v22 + 16 * v24);
      v26 = *v25;
      if (v15 != *v25)
      {
        v27 = 1;
        while (v26 != -4096)
        {
          v28 = v24 + v27++;
          v24 = v28 & (v23 - 1);
          v26 = *(_QWORD *)(v22 + 16 * v24);
          if (v15 == v26)
          {
            v25 = (uint64_t *)(v22 + 16 * v24);
            goto LABEL_33;
          }
        }
LABEL_32:
        v25 = (uint64_t *)(v22 + 16 * v23);
      }
LABEL_33:
      v30 = *(_DWORD *)(v6 + 32);
      if (!v30)
      {
        v31 = 0;
        goto LABEL_124;
      }
      v31 = 0;
      v32 = 0;
      v33 = v25[1];
      v34 = v33 & 0xFFFFFFFFFFFFFFF8;
      v35 = (v33 >> 1) & 3;
      do
      {
        v36 = v32 & 0x7FFFFFFF;
        if (v36 >= *(_DWORD *)(v5 + 416))
          goto LABEL_120;
        v37 = *(_QWORD *)(*(_QWORD *)(v5 + 408) + 8 * v36);
        if (!v37)
          goto LABEL_120;
        v38 = *(_DWORD *)(v37 + 8);
        v39 = *(_QWORD **)v37;
        if (!v38)
        {
          v43 = 0;
LABEL_47:
          v44 = &v39[3 * v43];
          goto LABEL_48;
        }
        v40 = v39[3 * v38 - 2];
        v41 = *(_DWORD *)(v34 + 24) | v35;
        v42 = (v40 >> 1) & 3 | *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24);
        v43 = *(unsigned int *)(v37 + 8);
        v44 = *(_QWORD **)v37;
        v45 = v43;
        if (v41 >= v42)
          goto LABEL_47;
        do
        {
          v46 = v45 >> 1;
          v47 = v44[3 * (v45 >> 1) + 1];
          LODWORD(v47) = (v47 >> 1) & 3 | *(_DWORD *)((v47 & 0xFFFFFFFFFFFFFFF8) + 24);
          v45 -= (v45 >> 1) + 1;
          v48 = v41 >= v47;
          if (v41 >= v47)
            v49 = v46 + 1;
          else
            v49 = 0;
          v44 += 3 * v49;
          if (!v48)
            v45 = v46;
        }
        while (v45);
        v43 = *(unsigned int *)(v37 + 8);
LABEL_48:
        v50 = &v39[3 * v43];
        if (v44 == v50)
          goto LABEL_120;
        v51 = (*v44 >> 1) & 3 | *(_DWORD *)((*v44 & 0xFFFFFFFFFFFFFFF8) + 24);
        v52 = *(_DWORD *)(v34 + 24);
        v53 = v52 | v35;
        if (v51 > (v52 | v35))
          goto LABEL_120;
        if (!v38
          || v52 >= ((*(v50 - 2) >> 1) & 3 | *(_DWORD *)((*(v50 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          goto LABEL_70;
        }
        do
        {
          v54 = v39;
          v55 = v43 >> 1;
          v56 = v39[3 * (v43 >> 1) + 1];
          LODWORD(v56) = (v56 >> 1) & 3 | *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24);
          v43 -= (v43 >> 1) + 1;
          v57 = v52 >= v56;
          if (v52 >= v56)
            v58 = v55 + 1;
          else
            v58 = 0;
          v39 = &v54[3 * v58];
          if (!v57)
            v43 = v55;
        }
        while (v43);
        if (v39 == v50)
        {
LABEL_70:
          LOBYTE(v61) = 0;
          v62 = 0;
          v60 = 0;
          goto LABEL_71;
        }
        v59 = *(_DWORD *)((*v39 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (((*v39 >> 1) & 3 | v59) > v52)
        {
          LOBYTE(v61) = 0;
          v60 = 0;
        }
        else
        {
          v61 = v54[3 * v58 + 1];
          v60 = v54[3 * v58 + 2];
          if (v34 == (v61 & 0xFFFFFFFFFFFFFFF8))
          {
            v39 += 3;
            if (v39 == v50)
              goto LABEL_69;
            v59 = *(_DWORD *)((*v39 & 0xFFFFFFFFFFFFFFF8) + 24);
          }
          if (*(_QWORD *)(v60 + 8) == v34)
            v60 = 0;
        }
        if (v52 < v59)
        {
LABEL_69:
          v62 = 0;
          goto LABEL_71;
        }
        v61 = v39[1];
        v62 = v39[2];
LABEL_71:
        if ((~(_BYTE)v61 & 6) != 0)
          v63 = v62;
        else
          v63 = 0;
        if (v60 != v63)
          goto LABEL_120;
        v64 = *(int8x8_t *)((*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * v36) & 0xFFFFFFFFFFFFFFF8) + 24);
        v65 = *(_QWORD *)(v37 + 104);
        if (!v65)
        {
          v91 = v64;
          goto LABEL_119;
        }
        v66 = 0;
        while (1)
        {
          v67 = *(_DWORD *)(v65 + 8);
          v68 = *(_QWORD **)v65;
          if (!v67)
          {
            v71 = 0;
LABEL_87:
            v72 = &v68[3 * v71];
            goto LABEL_88;
          }
          v69 = v68[3 * v67 - 2];
          v70 = (v69 >> 1) & 3 | *(_DWORD *)((v69 & 0xFFFFFFFFFFFFFFF8) + 24);
          v71 = *(unsigned int *)(v65 + 8);
          v72 = *(_QWORD **)v65;
          v73 = v71;
          if (v53 >= v70)
            goto LABEL_87;
          do
          {
            v74 = v73 >> 1;
            v75 = v72[3 * (v73 >> 1) + 1];
            v76 = (v75 >> 1) & 3 | *(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 24);
            v73 -= (v73 >> 1) + 1;
            v77 = v53 >= v76;
            if (v53 >= v76)
              v78 = v74 + 1;
            else
              v78 = 0;
            v72 += 3 * v78;
            if (!v77)
              v73 = v74;
          }
          while (v73);
          v71 = *(unsigned int *)(v65 + 8);
LABEL_88:
          v79 = &v68[3 * v71];
          if (v72 != v79 && ((*v72 >> 1) & 3 | *(_DWORD *)((*v72 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v53)
            break;
LABEL_116:
          v65 = *(_QWORD *)(v65 + 104);
          if (!v65)
            goto LABEL_117;
        }
        if (!v67
          || v52 >= ((*(v79 - 2) >> 1) & 3 | *(_DWORD *)((*(v79 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          goto LABEL_110;
        }
        do
        {
          v80 = v68;
          v81 = v71 >> 1;
          v82 = v68[3 * (v71 >> 1) + 1];
          LODWORD(v82) = (v82 >> 1) & 3 | *(_DWORD *)((v82 & 0xFFFFFFFFFFFFFFF8) + 24);
          v71 -= (v71 >> 1) + 1;
          v83 = v52 >= v82;
          if (v52 >= v82)
            v84 = v81 + 1;
          else
            v84 = 0;
          v68 = &v80[3 * v84];
          if (!v83)
            v71 = v81;
        }
        while (v71);
        if (v68 == v79)
        {
LABEL_110:
          v87 = 0;
          v89 = 0;
          LOBYTE(v88) = 0;
          goto LABEL_111;
        }
        v85 = *(_DWORD *)((*v68 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (((*v68 >> 1) & 3 | v85) > v52)
        {
          LOBYTE(v88) = 0;
          v87 = 0;
        }
        else
        {
          v86 = &v80[3 * v84];
          v88 = v86[1];
          v87 = v86[2];
          if (v34 == (v88 & 0xFFFFFFFFFFFFFFF8))
          {
            v68 += 3;
            if (v68 != v79)
            {
              v85 = *(_DWORD *)((*v68 & 0xFFFFFFFFFFFFFFF8) + 24);
              goto LABEL_103;
            }
LABEL_109:
            v89 = 0;
            goto LABEL_111;
          }
LABEL_103:
          if (*(_QWORD *)(v87 + 8) == v34)
            v87 = 0;
        }
        if (v52 < v85)
          goto LABEL_109;
        v88 = v68[1];
        v89 = v68[2];
LABEL_111:
        if ((~(_BYTE)v88 & 6) != 0)
          v90 = v89;
        else
          v90 = 0;
        if (v87 != v90)
          goto LABEL_116;
        *(_QWORD *)&v66 |= *(_QWORD *)(v65 + 112);
        if (*(_QWORD *)&v66 != *(_QWORD *)&v64)
          goto LABEL_116;
        v66 = v64;
LABEL_117:
        v91 = v66;
LABEL_119:
        v92 = (uint8x8_t)vcnt_s8(v91);
        v92.i16[0] = vaddlv_u8(v92);
        v31 += v92.i32[0];
LABEL_120:
        ++v32;
      }
      while (v32 != v30);
LABEL_124:
      if (v9 <= v31)
        v9 = v31;
      if (i)
      {
LABEL_127:
        if ((*(_BYTE *)i & 4) == 0)
          goto LABEL_128;
      }
      else
      {
LABEL_128:
        if ((v11 & 8) != 0)
        {
          do
            i = *(_QWORD *)(i + 8);
          while ((*(_WORD *)(i + 44) & 8) != 0);
        }
      }
    }
    v8 = *(_QWORD *)(v8 + 8);
  }
  while (v8 != v7);
LABEL_139:
  v93 = *(_DWORD *)(a1 + 264);
  if (v93 <= v9)
    v93 = v9;
  *(_DWORD *)(a1 + 264) = v93;
  return 0;
}

_QWORD *sub_1C55546E0()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F2FF0);
  *result = &off_1E816F150;
  return result;
}

void llvm::AGXTOCOptimizer::getLiveInRegisters(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;

  v4 = *(unsigned __int16 **)(a2 + 152);
  v5 = *(unsigned __int16 **)(a2 + 160);
  if (v5 != v4)
  {
    if (a4)
      v6 = (uint64_t *)(a4 + 8);
    else
      v6 = 0;
    v7 = *v6;
    v8 = v6[6];
    v9 = v6[7];
    do
    {
      v10 = v7 + 24 * *v4;
      v11 = *(unsigned int *)(v10 + 16);
      v12 = (v11 >> 3) & 0x1FFFFFFE;
      v13 = *(_WORD *)(v8 + v12) + (v11 & 0xF) * *v4;
      v14 = (_QWORD *)(v9 + 8 * *(unsigned __int16 *)(v10 + 20));
      v15 = *a3;
      v16 = (unsigned __int16 *)(v8 + 2 + v12);
      do
      {
        if (!*v14 || (*((_QWORD *)v4 + 1) & *v14) != 0)
          *(_QWORD *)(v15 + 8 * (v13 >> 6)) |= 1 << v13;
        ++v14;
        v17 = *v16++;
        v13 += v17;
      }
      while (v17);
      v4 += 8;
    }
    while (v4 != v5);
  }
}

void llvm::AGXTOCOptimizer::collectImplicitDefs(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  int v32;

  v5 = *(_QWORD *)(a2 + 328);
  v6 = v5 + 48;
  v7 = *(_QWORD *)(v5 + 56);
  if (v7 != v6)
  {
    v8 = (_QWORD *)(a4 + 8);
    if (!a4)
      v8 = 0;
    while (1)
    {
      v9 = *(unsigned __int16 **)(v7 + 16);
      v10 = *v9 - 9;
      if (v10 > 0x3C)
        goto LABEL_16;
      if (v10 != 1)
        break;
      v11 = *(unsigned int *)(v7 + 40);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = *(_QWORD *)(v7 + 32);
        v14 = *a3;
        do
        {
          if (!*(_DWORD *)(v13 + 32 * v12) && (*(_DWORD *)(v13 + 32 * v12) & 0x1000000) != 0)
          {
            v15 = *(_DWORD *)(v13 + 32 * v12 + 4);
            if (v15)
            {
              v16 = (unsigned __int16 *)(v8[6]
                                       + (((unint64_t)*(unsigned int *)(*v8 + 24 * v15 + 16) >> 3) & 0x1FFFFFFE));
              v18 = *v16;
              v17 = v16 + 1;
              v19 = v18 + (*(_DWORD *)(*v8 + 24 * v15 + 16) & 0xF) * v15;
              do
              {
                *(_QWORD *)(v14 + 8 * ((unsigned __int16)v19 >> 6)) |= 1 << v19;
                v20 = *v17++;
                v19 += v20;
              }
              while (v20);
            }
          }
          ++v12;
        }
        while (v12 != v11);
      }
LABEL_17:
      if ((v9[4] & 0x10) == 0)
      {
        v21 = *((unsigned __int8 *)v9 + 4);
        if (v21)
        {
          v22 = 0;
          v23 = *(_QWORD *)(v7 + 32);
          v24 = *a5;
          v25 = *a3;
          do
          {
            v26 = *(_DWORD *)(v23 + 32 * v22);
            if ((v26 & 0x20000FF) == 0 && (v26 & 0x1000000) != 0)
            {
              v27 = *(unsigned int *)(v23 + 32 * v22 + 4);
              if ((_DWORD)v27)
              {
                if (v27 >> 30
                  || *(_DWORD *)(v23 + 32 * v22 + 4) >> 3 >= *(unsigned __int16 *)(v24 + 22)
                  || ((*(unsigned __int8 *)(*(_QWORD *)(v24 + 8) + (v27 >> 3)) >> (v27 & 7)) & 1) == 0)
                {
                  v28 = (unsigned __int16 *)(v8[6]
                                           + (((unint64_t)*(unsigned int *)(*v8 + 24 * v27 + 16) >> 3) & 0x1FFFFFFE));
                  v30 = *v28;
                  v29 = v28 + 1;
                  v31 = v30 + (*(_DWORD *)(*v8 + 24 * v27 + 16) & 0xF) * v27;
                  do
                  {
                    *(_QWORD *)(v25 + 8 * ((unsigned __int16)v31 >> 6)) &= ~(1 << v31);
                    v32 = *v29++;
                    v31 += v32;
                  }
                  while (v32);
                }
              }
            }
            ++v22;
          }
          while (v22 != v21);
        }
        if (!v7)
        {
LABEL_33:
          while ((*(_WORD *)(v7 + 44) & 8) != 0)
            v7 = *(_QWORD *)(v7 + 8);
          goto LABEL_34;
        }
      }
LABEL_30:
      if ((*(_BYTE *)v7 & 4) == 0)
        goto LABEL_33;
LABEL_34:
      v7 = *(_QWORD *)(v7 + 8);
      if (v7 == v6)
        return;
    }
    if (((1 << (*v9 - 9)) & 0x1000000000000605) != 0)
      goto LABEL_30;
LABEL_16:
    if (!*v9)
      goto LABEL_30;
    goto LABEL_17;
  }
}

_QWORD *llvm::AGXTOCOptimizer::findInOptimizableBlocks(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *result;

  result = a2;
  if (a2 != a3)
  {
    while (*result != a4)
    {
      result += 10;
      if (result == a3)
        return a3;
    }
  }
  return result;
}

void llvm::AGXTOCOptimizer::collectOptimizableBlocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  int v30;
  int v31;
  _QWORD *v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  int v42;
  char v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int *v61;
  int v62;
  char v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t *v73;
  int v74;
  int v75;
  uint64_t *v76;
  char *v77;
  uint64_t *v78;
  char *v79;
  uint64_t *v80;
  char *v81;
  uint64_t *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  BOOL v95;
  unsigned int v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t *v99;
  int v100;
  int v101;
  _QWORD *v102;
  int v103;
  unsigned int v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  _QWORD *v111;
  int v112;
  BOOL v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  char *v118;
  unint64_t v119;
  unsigned __int16 *v120;
  unsigned __int16 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unsigned __int16 v128;
  _QWORD *v129;
  uint64_t v130;
  unsigned __int16 *v131;
  int v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  _QWORD **v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  int v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  void **v159;
  unsigned int v160;
  BOOL v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  unsigned int v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t *v175;
  uint64_t v176;
  _BYTE *v177;
  void *v178;
  uint64_t v179;
  int v180;
  _BYTE v181[128];
  char *v182;
  char *v183;
  uint64_t v184;
  int v185;
  _BYTE v186[128];
  char *v187;
  char *v188;
  uint64_t v189;
  int v190;
  _BYTE v191[128];
  void *__dst;
  uint64_t v193;
  _BYTE v194[48];
  int v195;
  uint64_t v196;
  _QWORD *v197;
  int v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v187 = v191;
  v188 = v191;
  v189 = 16;
  v190 = 0;
  v182 = v186;
  v183 = v186;
  v184 = 16;
  v185 = 0;
  v196 = 1;
  for (i = 8; i != 264; i += 16)
    *(uint64_t *)((char *)&v196 + i) = -4096;
  v10 = *(_QWORD *)(a2 + 328);
  __dst = v194;
  v193 = 0x600000000;
  if (&__dst != (void **)a4)
  {
    v11 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v11)
    {
      if (v11 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v194, *(unsigned int *)(a4 + 8), 8);
        v12 = *(unsigned int *)(a4 + 8);
        v13 = __dst;
        if (!(_DWORD)v12)
          goto LABEL_10;
      }
      else
      {
        v12 = *(unsigned int *)(a4 + 8);
        v13 = v194;
      }
      memcpy(v13, *(const void **)a4, 8 * v12);
      v13 = __dst;
LABEL_10:
      v14 = *(_DWORD *)(a4 + 64);
      LODWORD(v193) = v11;
      v195 = v14;
      v15 = &v13[v11];
      v16 = 8 * v11;
      do
      {
        *v13 = ~*v13;
        ++v13;
        v16 -= 8;
      }
      while (v16);
      goto LABEL_12;
    }
  }
  v14 = *(_DWORD *)(a4 + 64);
  v195 = v14;
  v15 = v194;
LABEL_12:
  v169 = v10;
  v17 = v14 & 0x3F;
  if (v17)
    *((_QWORD *)v15 - 1) &= ~(-1 << v17);
  v18 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v18)
  {
    v19 = *(char **)a3;
    v20 = 80 * v18;
    do
    {
      v21 = *(char **)&v19[v20 - 72];
      if (&v19[v20 - 56] != v21)
        free(v21);
      v20 -= 80;
    }
    while (v20);
  }
  *(_DWORD *)(a3 + 8) = 0;
  v22 = (_QWORD *)(a2 + 320);
  v23 = -1;
  v24 = (_QWORD *)(a2 + 320);
  do
  {
    v24 = (_QWORD *)v24[1];
    ++v23;
  }
  while (v24 != v22);
  v25 = v23;
  v173 = a3;
  if (!v23)
  {
    v23 = 0;
    goto LABEL_28;
  }
  if (v23 <= (unint64_t)*(unsigned int *)(a3 + 12))
  {
    v26 = 0;
    v27 = *(char **)a3;
    goto LABEL_24;
  }
  v177 = 0;
  v27 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a3, v23, 80, (unint64_t *)&v177);
  v149 = *(char **)a3;
  v150 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v150)
    goto LABEL_207;
  v171 = v23;
  v152 = *(char **)a3;
  v153 = v27;
  v154 = 0;
  v155 = 80 * v150;
  do
  {
    v156 = &v153[v154];
    v157 = &v152[v154];
    *(_QWORD *)v156 = *(_QWORD *)&v152[v154];
    v158 = (uint64_t)&v153[v154 + 24];
    *(_QWORD *)&v153[v154 + 8] = v158;
    v159 = (void **)&v153[v154 + 8];
    *((_QWORD *)v156 + 2) = 0x600000000;
    v160 = *(_DWORD *)&v152[v154 + 16];
    if (v160)
      v161 = v157 == v156;
    else
      v161 = 1;
    if (!v161)
    {
      v162 = (char *)*((_QWORD *)v157 + 1);
      if (v157 + 24 != v162)
      {
        *v159 = v162;
        *((_DWORD *)v156 + 4) = v160;
        *((_DWORD *)v156 + 5) = *(_DWORD *)&v152[v154 + 20];
        *((_QWORD *)v157 + 1) = v157 + 24;
        *(_DWORD *)&v152[v154 + 20] = 0;
        goto LABEL_221;
      }
      if (v160 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153[v154 + 8], v158, *(unsigned int *)&v152[v154 + 16], 8);
        v163 = *((unsigned int *)v157 + 4);
        if (!(_DWORD)v163)
          goto LABEL_220;
      }
      else
      {
        v163 = *(unsigned int *)&v152[v154 + 16];
      }
      memcpy(*v159, *((const void **)v157 + 1), 8 * v163);
LABEL_220:
      *((_DWORD *)v156 + 4) = v160;
LABEL_221:
      *((_DWORD *)v157 + 4) = 0;
    }
    *((_DWORD *)v156 + 18) = *((_DWORD *)v157 + 18);
    v154 += 80;
  }
  while (v155 != v154);
  a3 = v173;
  v149 = *(char **)v173;
  v165 = *(unsigned int *)(v173 + 8);
  v27 = v153;
  v23 = v171;
  v22 = (_QWORD *)(a2 + 320);
  if ((_DWORD)v165)
  {
    v166 = *(char **)v173;
    v167 = 80 * v165;
    do
    {
      v168 = *(char **)&v166[v167 - 72];
      if (&v166[v167 - 56] != v168)
        free(v168);
      v167 -= 80;
    }
    while (v167);
    a3 = v173;
    v149 = *(char **)v173;
    v27 = v153;
    v23 = v171;
    v22 = (_QWORD *)(a2 + 320);
  }
LABEL_207:
  v151 = (int)v177;
  if (v149 != (char *)(a3 + 16))
  {
    v164 = v27;
    free(v149);
    v27 = v164;
  }
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 12) = v151;
  v26 = *(unsigned int *)(a3 + 8);
LABEL_24:
  if (v26 != v25)
  {
    v28 = &v27[80 * v26];
    do
    {
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = v28 + 24;
      *((_QWORD *)v28 + 2) = 0x600000000;
      *((_DWORD *)v28 + 18) = 0;
      v28 += 80;
    }
    while (v28 != &v27[80 * v25]);
  }
  *(_DWORD *)(a3 + 8) = v23;
LABEL_28:
  v29 = *(_QWORD **)(a2 + 328);
  if (v29 == v22)
    goto LABEL_86;
  v30 = 0;
  v172 = v22;
  while (2)
  {
    if ((v196 & 1) != 0)
    {
      v31 = 16;
      v32 = &v197;
LABEL_34:
      v33 = v31 - 1;
      v34 = v33 & ((v29 >> 4) ^ (v29 >> 9));
      v35 = (_QWORD *)v32[2 * v34];
      if (v35 != v29)
      {
        v36 = 1;
        while (v35 != (_QWORD *)-4096)
        {
          v37 = v34 + v36++;
          v34 = v37 & v33;
          v35 = (_QWORD *)v32[2 * v34];
          if (v35 == v29)
            goto LABEL_83;
        }
        goto LABEL_39;
      }
    }
    else
    {
      v31 = v198;
      if (v198)
      {
        v32 = v197;
        goto LABEL_34;
      }
LABEL_39:
      v38 = *(_QWORD *)a3 + 80 * v30;
      *(_QWORD *)v38 = v29;
      v39 = v38 + 8;
      v40 = *(_DWORD *)(a5 + 44);
      v42 = *(_DWORD *)(v38 + 72);
      v41 = (int *)(v38 + 72);
      v43 = v42 & 0x3F;
      v44 = *(unsigned int *)(v39 + 8);
      if ((v42 & 0x3F) != 0)
        *(_QWORD *)(*(_QWORD *)v39 + 8 * v44 - 8) &= ~(-1 << v43);
      v45 = v44;
      *v41 = v40;
      v46 = v40 + 63;
      if ((_DWORD)v44 != (v40 + 63) >> 6)
      {
        v47 = v46 >> 6;
        if (v44 > v47)
        {
          *(_DWORD *)(v39 + 8) = v47;
          v45 = v46 >> 6;
        }
        else
        {
          v48 = v44;
          if (v47 > *(_DWORD *)(v39 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v39, v39 + 16, v47, 8);
            v48 = *(unsigned int *)(v39 + 8);
            v45 = *(_DWORD *)(v39 + 8);
          }
          if (v47 != v44)
            bzero((void *)(*(_QWORD *)v39 + 8 * v48), 8 * (v47 - v44));
          v45 += v47 - v44;
          *(_DWORD *)(v39 + 8) = v45;
          v40 = *v41;
        }
      }
      v49 = v40 & 0x3F;
      if (v49)
        *(_QWORD *)(*(_QWORD *)v39 + 8 * v45 - 8) &= ~(-1 << v49);
      LODWORD(v50) = v30 + 1;
      v177 = v29;
      *((_DWORD *)sub_1C555569C((uint64_t)&v196, (uint64_t *)&v177) + 2) = v30;
      if (((v29[12] - v29[11]) >> 3) >= 3)
      {
        v51 = v29[1];
        v177 = v181;
        v178 = v181;
        v179 = 16;
        v180 = 0;
        v52 = *(uint64_t **)(v51 + 64);
        v53 = *(uint64_t **)(v51 + 72);
        if (v52 == v53)
        {
          v22 = v172;
        }
        else
        {
          do
          {
            v54 = *v52++;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v177, v54);
          }
          while (v52 != v53);
          if (HIDWORD(v179) == v180)
          {
            v55 = v178;
          }
          else
          {
            v56 = (uint64_t *)(v29[12] - 8);
            v50 = (int)v50;
            do
            {
              v57 = *v56;
              v58 = *(_QWORD *)a3 + 80 * v50;
              *(_QWORD *)v58 = *v56;
              v59 = v58 + 8;
              v60 = *(_DWORD *)(a5 + 44);
              v62 = *(_DWORD *)(v58 + 72);
              v61 = (int *)(v58 + 72);
              v63 = v62 & 0x3F;
              v64 = *(unsigned int *)(v59 + 8);
              if ((v62 & 0x3F) != 0)
                *(_QWORD *)(*(_QWORD *)v59 + 8 * v64 - 8) &= ~(-1 << v63);
              v65 = v64;
              *v61 = v60;
              v66 = v60 + 63;
              if ((_DWORD)v64 != (v60 + 63) >> 6)
              {
                v67 = v66 >> 6;
                if (v64 > v67)
                {
                  *(_DWORD *)(v59 + 8) = v67;
                  v65 = v66 >> 6;
                }
                else
                {
                  v68 = v64;
                  if (v67 > *(_DWORD *)(v59 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v59, v59 + 16, v67, 8);
                    v68 = *(unsigned int *)(v59 + 8);
                    v65 = *(_DWORD *)(v59 + 8);
                  }
                  if (v67 != v64)
                    bzero((void *)(*(_QWORD *)v59 + 8 * v68), 8 * (v67 - v64));
                  v65 += v67 - v64;
                  *(_DWORD *)(v59 + 8) = v65;
                  v60 = *v61;
                }
              }
              v69 = v60 & 0x3F;
              a3 = v173;
              if (v69)
                *(_QWORD *)(*(_QWORD *)v59 + 8 * v65 - 8) &= ~(-1 << v69);
              v176 = v57;
              *((_DWORD *)sub_1C555569C((uint64_t)&v196, &v176) + 2) = v50;
              v70 = *(_QWORD **)(v57 + 88);
              v71 = *(_QWORD **)(v57 + 96);
              while (v70 != v71)
              {
                if (*v70 == v51)
                {
                  v72 = sub_1C477672C((uint64_t)&v177, v57);
                  v73 = v178 == v177 ? (uint64_t *)((char *)&v179 + 4) : &v179;
                  if (v72 != (_QWORD *)((char *)v178 + 8 * *(unsigned int *)v73))
                  {
                    *v72 = -2;
                    ++v180;
                  }
                }
                ++v70;
              }
              ++v50;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v182, v57);
              v56 = (uint64_t *)(v57 + 8);
            }
            while (HIDWORD(v179) != v180);
            v55 = v178;
          }
          v22 = v172;
          if (v55 != v177)
            free(v55);
        }
      }
      v30 = v50;
    }
LABEL_83:
    v29 = (_QWORD *)v29[1];
    if (v29 != v22)
      continue;
    break;
  }
  v23 = *(_DWORD *)(a3 + 8);
LABEL_86:
  if (v23)
  {
    v74 = 0;
    v75 = 0;
    v76 = (uint64_t *)(a5 + 8);
    if (!a5)
      v76 = 0;
    v175 = v76;
    do
    {
      v77 = *(char **)a3;
      v78 = (uint64_t *)&v77[80 * v74];
      v79 = (char *)sub_1C477672C((uint64_t)&v187, *v78);
      if (v188 == v187)
        v80 = (uint64_t *)((char *)&v189 + 4);
      else
        v80 = &v189;
      if (v79 != &v188[8 * *(unsigned int *)v80])
      {
        *(_QWORD *)v79 = -2;
        ++v190;
      }
      v81 = (char *)sub_1C477672C((uint64_t)&v182, *v78);
      if (v183 == v182)
        v82 = (uint64_t *)((char *)&v184 + 4);
      else
        v82 = &v184;
      if (v81 == &v183[8 * *(unsigned int *)v82]
        && ((**(_BYTE **)(*(_QWORD *)a6 + 360) & 4) != 0 || HIDWORD(v189) == v190))
      {
        if (v188 == v187)
          v115 = HIDWORD(v189);
        else
          v115 = v189;
        if ((_DWORD)v115)
        {
          v116 = 8 * v115;
          v117 = (unint64_t *)v188;
          while (*v117 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v117;
            v116 -= 8;
            if (!v116)
              goto LABEL_177;
          }
        }
        else
        {
          v117 = (unint64_t *)v188;
        }
        v118 = &v188[8 * v115];
        if (v117 != (unint64_t *)v118)
        {
          v119 = *v117;
LABEL_165:
          v120 = *(unsigned __int16 **)(v119 + 152);
          v121 = *(unsigned __int16 **)(v119 + 160);
          if (v121 != v120)
          {
            v122 = *v175;
            v123 = v175[6];
            v124 = v175[7];
            do
            {
              v125 = v122 + 24 * *v120;
              v126 = *(unsigned int *)(v125 + 16);
              v127 = (v126 >> 3) & 0x1FFFFFFE;
              v128 = *(_WORD *)(v123 + v127) + (v126 & 0xF) * *v120;
              v129 = (_QWORD *)(v124 + 8 * *(unsigned __int16 *)(v125 + 20));
              v130 = *(_QWORD *)&v77[80 * v74 + 8];
              v131 = (unsigned __int16 *)(v123 + 2 + v127);
              do
              {
                if (!*v129 || (*((_QWORD *)v120 + 1) & *v129) != 0)
                  *(_QWORD *)(v130 + 8 * (v128 >> 6)) |= 1 << v128;
                ++v129;
                v132 = *v131++;
                v128 += v132;
              }
              while (v132);
              v120 += 8;
            }
            while (v120 != v121);
          }
          v133 = v117 + 1;
          while (v133 != (unint64_t *)v118)
          {
            v134 = *v133++;
            v119 = v134;
            if (v134 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v117 = v133 - 1;
              goto LABEL_165;
            }
          }
        }
LABEL_177:
        v136 = *(_QWORD *)(*v78 + 64);
        v135 = *(_QWORD *)(*v78 + 72);
        v137 = v135 - v136;
        if (((v135 - v136) & 0x7FFFFFFF8) == 8)
        {
          if (v136 != v135)
          {
            v138 = 0;
            while (*(_QWORD *)(v136 + v138) != v169)
            {
              v138 += 8;
              if (v136 + v138 == v135)
                goto LABEL_184;
            }
            v137 = v138;
          }
LABEL_184:
          if (v136 + v137 != v135 && *(_QWORD *)(v169 + 8) == *v78)
          {
            v139 = &v77[80 * v74];
            v140 = (_QWORD **)(v139 + 8);
            v141 = *((_DWORD *)v139 + 4);
            v142 = v193;
            if (v193 >= v141)
              v143 = v141;
            else
              v143 = v193;
            if ((_DWORD)v143)
            {
              v144 = (uint64_t *)__dst;
              v145 = *v140;
              v146 = v143;
              do
              {
                v147 = *v144++;
                *v145++ &= v147;
                --v146;
              }
              while (v146);
            }
            if (v141 > v142)
            {
              v148 = *v140;
              do
              {
                v148[v143] = 0;
                LODWORD(v143) = v143 + 1;
              }
              while (v141 != (_DWORD)v143);
            }
          }
        }
      }
      else
      {
        v83 = &v77[80 * v74];
        v84 = *((_QWORD *)v83 + 1);
        v85 = *((unsigned int *)v83 + 4);
        if ((_DWORD)v85)
          memset(*((void **)v83 + 1), 255, 8 * v85);
        if ((*(_DWORD *)&v77[80 * v74 + 72] & 0x3F) != 0)
          *(_QWORD *)(v84 + 8 * v85 - 8) &= ~(-1 << (*(_DWORD *)&v77[80 * v74 + 72] & 0x3F));
      }
      if ((v196 & 1) != 0)
      {
        v86 = 16;
        v87 = &v197;
        a3 = v173;
      }
      else
      {
        v86 = v198;
        a3 = v173;
        if (!v198)
        {
          v97 = 0;
          goto LABEL_121;
        }
        v87 = v197;
      }
      v88 = *v78;
      v89 = v86 - 1;
      v90 = ((*v78 >> 4) ^ (*v78 >> 9)) & v89;
      v91 = &v87[2 * v90];
      v92 = *v91;
      if (*v78 == *v91)
        goto LABEL_122;
      v93 = 0;
      v94 = 1;
      while (v92 != -4096)
      {
        if (v93)
          v95 = 0;
        else
          v95 = v92 == -8192;
        if (v95)
          v93 = v91;
        v96 = v90 + v94++;
        v90 = v96 & v89;
        v91 = &v87[2 * v90];
        v92 = *v91;
        if (v88 == *v91)
          goto LABEL_122;
      }
      if (v93)
        v97 = v93;
      else
        v97 = v91;
LABEL_121:
      v91 = sub_1C5555800((uint64_t)&v196, v78, v97);
      *v91 = *v78;
      *((_DWORD *)v91 + 2) = 0;
      v88 = *v78;
LABEL_122:
      v99 = *(uint64_t **)(v88 + 88);
      v98 = *(uint64_t **)(v88 + 96);
      if (v99 != v98)
      {
        v100 = *((_DWORD *)v91 + 2);
        do
        {
          if ((v196 & 1) != 0)
          {
            v101 = 16;
            v102 = &v197;
          }
          else
          {
            v101 = v198;
            if (!v198)
            {
              v111 = 0;
LABEL_140:
              v105 = sub_1C5555800((uint64_t)&v196, v99, v111);
              *v105 = *v99;
              *((_DWORD *)v105 + 2) = 0;
              goto LABEL_141;
            }
            v102 = v197;
          }
          v103 = v101 - 1;
          v104 = ((*v99 >> 4) ^ (*v99 >> 9)) & v103;
          v105 = &v102[2 * v104];
          v106 = *v105;
          if (*v99 != *v105)
          {
            v107 = 0;
            v108 = 1;
            while (v106 != -4096)
            {
              if (v107)
                v109 = 0;
              else
                v109 = v106 == -8192;
              if (v109)
                v107 = v105;
              v110 = v104 + v108++;
              v104 = v110 & v103;
              v105 = &v102[2 * v104];
              v106 = *v105;
              if (*v99 == *v105)
                goto LABEL_141;
            }
            if (v107)
              v111 = v107;
            else
              v111 = v105;
            goto LABEL_140;
          }
LABEL_141:
          v112 = *((_DWORD *)v105 + 2);
          if (v112 <= v100)
          {
            v113 = v112 != 0;
            v114 = v112 - 1;
            if (!v113)
              v114 = 0;
            if (v100 > v75)
            {
              v75 = v100;
              v74 = v114;
            }
          }
          else
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v187, *v99);
          }
          ++v99;
        }
        while (v99 != v98);
      }
      ++v74;
    }
    while (v74 != v23);
  }
  if (__dst != v194)
    free(__dst);
  if ((v196 & 1) == 0)
    MEMORY[0x1CAA32FB4](v197, 8);
  if (v183 != v182)
    free(v183);
  if (v188 != v187)
    free(v188);
}

_QWORD *sub_1C555569C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v13 = 0;
LABEL_17:
      v7 = sub_1C5555800(a1, a2, v13);
      *v7 = *a2;
      *((_DWORD *)v7 + 2) = 0;
      return v7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 != *v7)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        return v7;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
    goto LABEL_17;
  }
  return v7;
}

uint64_t sub_1C5555768(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5555800(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _QWORD *v19;

  v5 = *(_DWORD *)a1;
  v6 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v7 = 16;
  else
    v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C5555974(a1, 2 * v7);
    v10 = a1 + 8;
    v5 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v11 = 16;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v8 = *(_DWORD *)a1 & 1;
    v12 = v11 - 1;
    v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (_QWORD *)(v10 + 16 * v13);
    v14 = *a3;
    if (*a2 != *a3)
    {
      v15 = 0;
      v16 = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = a3;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        a3 = (_QWORD *)(v10 + 16 * v13);
        v14 = *a3;
        if (*a2 == *a3)
          goto LABEL_7;
      }
      if (v15)
        a3 = v15;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1C5555974(a1, v7);
      v19 = 0;
      sub_1C5555768(a1, *a2, &v19);
      a3 = v19;
      v5 = *(_DWORD *)a1;
    }
    v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a3;
}

int *sub_1C5555974(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5555AF8((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5555AF8((int *)a1, v14, v9);
}

int *sub_1C5555AF8(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 66;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 16;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t *)&v8[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t llvm::GPUBaseInfo::getDeviceTypeFromTarget(uint64_t a1)
{
  int v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(char *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 3);
  if (v1 != 49)
  {
    if (v1 == 50)
    {
      v2 = *(_BYTE *)(a1 + 519);
      v3 = v2;
      v4 = v2 & 0x7F;
      if (v3 < 0)
        v4 = *(_QWORD *)(a1 + 504);
      if (!v4)
        return 4;
      if (v3 >= 0)
        v5 = a1 + 496;
      else
        v5 = *(_QWORD *)(a1 + 496);
      if ((unint64_t)(v4 - 4) <= 0xFFFFFFFFFFFFFFFCLL)
      {
        if (*(_WORD *)(v5 + 1) == 13105 && *(_BYTE *)(v5 + 3) == 112)
          return 8;
LABEL_48:
        if (*(_WORD *)(v5 + 1) != 12337)
        {
          if (*(_WORD *)(v5 + 1) == 12593)
            return 5;
          if (*(_WORD *)(v5 + 1) == 12849)
            return 6;
          if (*(_WORD *)(v5 + 1) != 13105)
          {
            result = 9;
            if (*(_WORD *)(v5 + 1) != 13361)
            {
              if (*(_WORD *)(v5 + 1) == 13617)
                return 9;
              else
                return 0;
            }
            return result;
          }
          return 7;
        }
        return 4;
      }
      if ((unint64_t)(v4 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_48;
      return 0;
    }
    v13 = *(_BYTE *)(a1 + 519);
    v14 = v13;
    v15 = v13 & 0x7F;
    if (v14 < 0)
      v15 = *(_QWORD *)(a1 + 504);
    if (v15)
    {
      if (v14 >= 0)
        v16 = a1 + 496;
      else
        v16 = *(_QWORD *)(a1 + 496);
      if ((unint64_t)(v15 - 4) > 0xFFFFFFFFFFFFFFFCLL)
      {
        if (v15 != 3)
          return 0;
      }
      else
      {
        if (*(_WORD *)(v16 + 1) == 14129 && *(_BYTE *)(v16 + 3) == 103)
          return 13;
        if (*(_WORD *)(v16 + 1) == 14129 && *(_BYTE *)(v16 + 3) == 115)
          return 13;
        if (*(_WORD *)(v16 + 1) == 14385 && *(_BYTE *)(v16 + 3) == 103)
          return 15;
      }
      if (*(_WORD *)(v16 + 1) == 13105)
        return 7;
      if (*(_WORD *)(v16 + 1) != 13617)
      {
        switch(*(_WORD *)(v16 + 1))
        {
          case 0x3631:
            return 11;
          case 0x3731:
            return 12;
          case 0x3831:
            return 14;
        }
        return 0;
      }
    }
    return 10;
  }
  v8 = *(_BYTE *)(a1 + 519);
  v9 = v8;
  v10 = v8 & 0x7F;
  if (v9 < 0)
    v10 = *(_QWORD *)(a1 + 504);
  if (!v10)
    return 1;
  v11 = v9 >= 0 ? a1 + 496 : *(_QWORD *)(a1 + 496);
  v12 = *(char *)(v11 + 1);
  if (v12 == 52)
    return 1;
  if (v12 == 53)
    return 2;
  return 3;
}

uint64_t sub_1C5555E7C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineLoopInfoPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "CFG Lowering";
  *(_QWORD *)(v2 + 8) = 12;
  *(_QWORD *)(v2 + 16) = "gpu-cfg-lower";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1ED8060F0;
  *(_WORD *)(v2 + 40) = 1;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5555F14;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C5555F14()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1ED8060F0);
  *result = &off_1E816F210;
  result[31] = 0;
  return result;
}

void sub_1C5555F58(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C5555FEC(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5556078()
{
  return "GPU Control Flow Lowering";
}

void *sub_1C5556088(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachinePostDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
}

uint64_t sub_1C55560EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  int32x2_t *v12;
  llvm::TargetInstrInfo *v13;
  void (**v14)(void);
  uint64_t i;
  uint64_t j;
  uint64_t ***v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t ***v27;
  char *v28;
  uint64_t **v29;
  uint64_t **v30;
  void *v31;
  uint64_t v32;
  const std::error_category *v33;
  uint64_t v34;
  int v35;
  llvm::raw_ostream *v36;
  char *v37;
  unint64_t v38;
  _BYTE *v39;
  llvm::raw_ostream *v40;
  void *v41;
  _BYTE *v42;
  _BYTE *v43;
  void **v44;
  size_t v45;
  llvm *v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  void **v49;
  size_t v50;
  llvm::raw_ostream *v51;
  void *v52;
  uint64_t ***v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ****v58;
  uint64_t ***v59;
  int v60;
  int v61;
  uint64_t ***v62;
  char *v63;
  uint64_t **v64;
  uint64_t **v65;
  void *v66;
  void *v67;
  const std::error_category *v68;
  uint64_t v69;
  int v70;
  llvm::raw_ostream *v71;
  char *v72;
  unint64_t v73;
  _BYTE *v74;
  llvm::raw_ostream *v75;
  void *v76;
  _BYTE *v77;
  _BYTE *v78;
  void **v79;
  size_t v80;
  llvm *v81;
  llvm::raw_ostream *v82;
  uint64_t v83;
  void **v84;
  size_t v85;
  llvm::raw_ostream *v86;
  void *v87;
  const llvm::Module *v88;
  uint64_t ***v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t ****v94;
  uint64_t ***v95;
  int v96;
  int v97;
  uint64_t ***v98;
  char *v99;
  uint64_t **v100;
  uint64_t **v101;
  void *v102;
  void *v103;
  const std::error_category *v104;
  uint64_t v105;
  int v106;
  llvm::raw_ostream *v107;
  char *v108;
  unint64_t v109;
  _BYTE *v110;
  llvm::raw_ostream *v111;
  void *v112;
  _BYTE *v113;
  _BYTE *v114;
  void **v115;
  size_t v116;
  llvm *v117;
  llvm::raw_ostream *v118;
  uint64_t v119;
  void **v120;
  size_t v121;
  llvm::raw_ostream *v122;
  void *v123;
  unint64_t ShaderID;
  llvm::raw_ostream *v125;
  llvm::raw_ostream *v126;
  _OWORD *v127;
  void *v128;
  uint64_t ***v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t ****v134;
  uint64_t ***v135;
  int v136;
  int v137;
  size_t *v138;
  const void *v139;
  size_t v140;
  size_t v141;
  _QWORD *v142;
  _DWORD *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  int v151;
  _DWORD *v152;
  uint64_t *v153;
  int v154;
  unsigned int v155;
  int v156;
  int v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t **v161;
  uint64_t *v162;
  uint64_t *v163;
  unint64_t v164;
  char *v165;
  _QWORD *v166;
  __int32 v167;
  uint64_t v168;
  int32x2_t v169;
  __int32 v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  _QWORD *v176;
  int v177;
  uint64_t v178;
  unsigned int v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  int v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  uint64_t *v192;
  BOOL v193;
  uint64_t *v194;
  int v195;
  int v196;
  char *v197;
  char *v198;
  unint64_t v199;
  char *v200;
  _QWORD *v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  uint64_t *v210;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  uint64_t v218;
  int v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  _QWORD *v224;
  char *v225;
  int v226;
  llvm::MachineFunction *v227;
  uint64_t v228;
  uint64_t v229;
  _DWORD *v230;
  char *v231;
  char *v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  int v237;
  unsigned __int8 v238;
  uint64_t v239;
  int32x2_t v240;
  __int32 v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  int v245;
  _QWORD *v246;
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  __int32 v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  _QWORD *v256;
  uint64_t v257;
  BOOL v258;
  int v259;
  _DWORD *v260;
  uint64_t v261;
  int v262;
  uint64_t *v263;
  _QWORD *v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  int v273;
  uint64_t v274;
  _QWORD *v275;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t *v284;
  unint64_t v285;
  _QWORD *v286;
  int v287;
  int v288;
  uint64_t *v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  int v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int *v297;
  uint64_t v298;
  unint64_t v299;
  _DWORD *v301;
  int v302;
  int v303;
  int v304;
  char *v305;
  int v306;
  int v307;
  int v308;
  unsigned int v309;
  char *v310;
  unsigned int v311;
  _BOOL8 v312;
  int v313;
  char *v314;
  unsigned int v315;
  uint64_t v316;
  BOOL v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  int32x2_t v321;
  __int32 v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  char *v330;
  unsigned int v331;
  uint64_t v332;
  _DWORD *v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  __int32 v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  int v341;
  _DWORD *v342;
  uint64_t v343;
  int v344;
  uint64_t *v345;
  _QWORD *v346;
  int v347;
  uint64_t v348;
  _QWORD *v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t **v355;
  uint64_t *v356;
  int v357;
  uint64_t v358;
  _QWORD *v359;
  int v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t *v368;
  unint64_t v369;
  _QWORD *v370;
  int v371;
  int v372;
  uint64_t *v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  int v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  _DWORD *v381;
  unsigned int *v382;
  uint64_t v383;
  unint64_t v384;
  char *v386;
  unsigned int v387;
  uint64_t v388;
  BOOL v389;
  int v390;
  uint64_t v391;
  _DWORD *v392;
  char v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  char *v399;
  char *v400;
  unsigned int v401;
  unsigned int *v402;
  unsigned int v403;
  unsigned int v404;
  uint64_t v405;
  void *v406;
  char *v407;
  uint64_t v408;
  unint64_t v409;
  void **v410;
  uint64_t v411;
  __int128 v412;
  unsigned int v413;
  char *v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  unint64_t v425;
  BOOL v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  void *v432;
  char *v433;
  char *v434;
  char *v435;
  char *v436;
  int v437;
  int v438;
  int *v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  void *v449;
  int v450;
  void **v451;
  uint64_t v452;
  int v453;
  void **v454;
  uint64_t v455;
  void *v456;
  unsigned int v457;
  BOOL v458;
  uint64_t v459;
  char *v460;
  char *v461;
  int v462;
  unsigned int v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  char *v467;
  unsigned int v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t *v473;
  uint64_t v474;
  unsigned int v475;
  uint64_t v476;
  char v477;
  int v478;
  char *v479;
  int v480;
  BOOL v481;
  void **v482;
  char v483;
  uint64_t *v484;
  int v485;
  uint64_t *v486;
  unsigned int v487;
  uint64_t *v488;
  int v489;
  unsigned int v490;
  llvm::MachineBasicBlock *v491;
  uint64_t v492;
  _QWORD *v493;
  uint64_t v494;
  const void *v495;
  uint64_t v496;
  unsigned int v497;
  unint64_t v498;
  unint64_t v499;
  char *v500;
  char *v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  llvm::MachineBasicBlock **v505;
  llvm::MachineBasicBlock **v506;
  llvm::MachineBasicBlock *v507;
  uint64_t v508;
  uint64_t v509;
  llvm::MachineBasicBlock *v510;
  _OWORD *v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  uint64_t v521;
  uint64_t *v522;
  uint64_t *v523;
  unsigned int v524;
  uint64_t *v525;
  uint64_t *v526;
  uint64_t v527;
  uint64_t v528;
  char *v529;
  uint64_t k;
  uint64_t v531;
  uint64_t *v532;
  llvm::MachineBasicBlock **v533;
  llvm::MachineBasicBlock *v534;
  char *v535;
  char *v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  uint64_t *v540;
  uint64_t v541;
  unint64_t v542;
  int v543;
  char v544;
  uint64_t v545;
  uint64_t v546;
  _QWORD *v547;
  uint64_t *v548;
  BOOL v549;
  uint64_t v550;
  llvm::MachineBasicBlock *v551;
  uint64_t v552;
  char v553;
  uint64_t *v554;
  unsigned int v555;
  uint64_t v556;
  char *v557;
  unsigned int v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t *v564;
  unsigned int v565;
  uint64_t *v566;
  uint64_t v567;
  uint64_t **v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t v571;
  int v572;
  uint64_t v573;
  _QWORD *v574;
  char *v575;
  unint64_t v576;
  char *v577;
  int v578;
  uint64_t *v579;
  unsigned int v580;
  uint64_t *v581;
  unsigned int v582;
  uint64_t *v583;
  void **v584;
  BOOL v585;
  uint64_t *v586;
  unsigned int v587;
  uint64_t *v588;
  BOOL v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _DWORD *v593;
  int v594;
  void **v595;
  llvm *v596;
  llvm::raw_ostream *v597;
  _QWORD *v598;
  void *v599;
  int v600;
  llvm *v601;
  llvm::raw_ostream *v602;
  _QWORD *v603;
  void *v604;
  int v605;
  llvm *v606;
  llvm::raw_ostream *v607;
  _QWORD *v608;
  void *v609;
  int v610;
  unint64_t v611;
  char *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unsigned int v616;
  int v617;
  uint64_t v618;
  int v619;
  char *v620;
  char *v621;
  char *v622;
  uint64_t v623;
  char *v624;
  uint64_t v625;
  void **v626;
  uint64_t v627;
  char *v628;
  uint64_t *v629;
  unsigned int v630;
  void *v631;
  llvm::MachineFunction *v632;
  char *v633;
  char *v634;
  uint64_t v635;
  uint64_t *v636;
  _WORD *v637;
  char *v638;
  uint64_t v639;
  unsigned int v640;
  uint64_t v641;
  void *v642[2];
  uint64_t v643;
  void *v644[2];
  uint64_t v645;
  void *__p[2];
  uint64_t v647;
  __int128 v648;
  uint64_t v649;
  uint64_t **v650;
  _WORD v651[128];
  uint64_t *v652;
  void **v653;
  void *v654;
  const char *v655;
  uint64_t v656;
  __int16 v657;
  void *v658;
  uint64_t v659;
  void *v660;
  uint64_t v661;
  void *v662;
  _BYTE v663[132];
  unsigned int v664;
  char *v665[2];
  _WORD v666[1024];
  void *v667;
  uint64_t v668;
  _DWORD v669[14];
  void **v670;
  void *v671;
  uint64_t v672;
  _BYTE v673[64];
  uint64_t v674;
  _QWORD *v675;
  unsigned int v676;
  uint64_t v677;
  _QWORD *v678;
  unsigned int v679;
  char *v680;
  uint64_t v681;
  uint64_t v682;
  void *v683;
  uint64_t v684;
  _BYTE v685[16];
  __int16 v686;
  void *v687[2];
  _QWORD v688[16];
  void *v689[2];
  _QWORD v690[2];
  __int16 v691;
  void *v692;
  uint64_t v693;
  unsigned int v694;
  void **v695;
  __int16 v696;
  void *v697;
  uint64_t v698;
  _BYTE v699[32];
  void *v700;
  void *v701;
  uint64_t v702;
  uint64_t **v703;
  _WORD v704[128];
  _BYTE *v705;
  uint64_t v706;
  _BYTE v707[7];
  char v708;
  uint64_t v709;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v709 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(v5 + 48);
  if (!v8)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8) + 216))(*(_QWORD *)(v5 + 8), v5 + 128, v5);
    *(_QWORD *)(v6 + 48) = v8;
  }
  *(_DWORD *)(v8 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 248) + 8))(*(_QWORD *)(v7 + 248), v6);
  v9 = *(_QWORD *)(v6 + 328);
  if (v9 == v6 + 320 || *(_QWORD *)(v9 + 8) == v6 + 320)
    return 0;
  v10 = **(void ****)(v7 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::MachineLoopInfo::ID);
  v12 = (int32x2_t *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::MachineLoopInfo::ID);
  v13 = (llvm::TargetInstrInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 104))(*(_QWORD *)(v6 + 16));
  *(_QWORD *)(v7 + 256) = v13;
  v692 = &off_1E816F2D0;
  v693 = v7;
  v695 = &v692;
  llvm::foldBlocksForCFGProcessing(v6, v12, v13, (uint64_t)&v692);
  if (v695 == &v692)
  {
    v14 = (void (**)(void))((char *)v692 + 32);
    goto LABEL_12;
  }
  if (v695)
  {
    v14 = (void (**)(void))((char *)*v695 + 40);
LABEL_12:
    (*v14)();
  }
  v671 = v673;
  v672 = 0x1000000000;
  v674 = 1;
  for (i = 88; i != 344; i += 16)
    *(void **)((char *)&v671 + i) = (void *)-4096;
  v677 = 1;
  for (j = 352; j != 864; j += 32)
    *(void **)((char *)&v671 + j) = (void *)-4096;
  v680 = (char *)&v682;
  v681 = 0x2000000000;
  sub_1C4AA068C((uint64_t)&v671, v6, (uint64_t)v12);
  if (!byte_1ED806180)
    goto LABEL_69;
  v665[0] = "CFGUnloopifier";
  v666[8] = 259;
  v686 = 257;
  v18 = *(uint64_t ****)v6;
  if ((*(_BYTE *)(*(_QWORD *)v6 + 23) & 0x10) != 0)
  {
    v19 = ***v18;
    v20 = *(_QWORD *)(v19 + 152);
    v21 = *(unsigned int *)(v19 + 168);
    if ((_DWORD)v21)
    {
      LODWORD(v22) = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v23 = (uint64_t ****)(v20 + 16 * v22);
      v24 = *v23;
      if (*v23 == v18)
      {
LABEL_26:
        v27 = v23[1];
        v30 = *v27;
        v28 = (char *)(v27 + 2);
        v29 = v30;
        goto LABEL_27;
      }
      v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == v18)
        {
          v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_26;
        }
      }
    }
    v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_26;
  }
  v29 = 0;
  v28 = &byte_1C871356D;
LABEL_27:
  v704[0] = 1283;
  v700 = "CFGUnloopifier.";
  v702 = (uint64_t)v28;
  v703 = v29;
  v653 = &v700;
  v655 = ".dot";
  v657 = 770;
  llvm::Twine::str((llvm::Twine *)&v653, __p);
  v31 = (void *)HIBYTE(v647);
  if (v647 < 0)
    v31 = __p[1];
  LODWORD(v687[0]) = 0;
  if (!v31)
  {
    llvm::Twine::str((llvm::Twine *)v665, v689);
    v696 = 260;
    v692 = v689;
    llvm::createGraphFilename((llvm::Twine *)&v692, (int *)v687, &v648);
    if (SHIBYTE(v647) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v648;
    v647 = v649;
    HIBYTE(v649) = 0;
    LOBYTE(v648) = 0;
    if (SHIBYTE(v690[0]) < 0)
      operator delete(v689[0]);
    goto LABEL_55;
  }
  v696 = 260;
  v692 = __p;
  *(_QWORD *)&v648 = llvm::sys::fs::openFile((unsigned __int8 *)&v692, (int *)v687, 0, 2, 1, 438);
  *((_QWORD *)&v648 + 1) = v32;
  v33 = std::generic_category();
  v692 = (void *)17;
  v693 = (uint64_t)v33;
  v34 = (*(uint64_t (**)(_QWORD, _QWORD, void **))(**((_QWORD **)&v648 + 1) + 32))(*((_QWORD *)&v648 + 1), v648, &v692);
  if ((v34 & 1) != 0
    || (v34 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v693 + 40))(v693, &v648, v692), (v34 & 1) != 0))
  {
    v40 = (llvm::raw_ostream *)llvm::errs((llvm *)v34);
    v41 = (void *)*((_QWORD *)v40 + 4);
    if (*((_QWORD *)v40 + 3) - (_QWORD)v41 > 0x17uLL)
    {
      qmemcpy(v41, "file exists, overwriting", 24);
      v42 = (_BYTE *)(*((_QWORD *)v40 + 4) + 24);
      *((_QWORD *)v40 + 4) = v42;
    }
    else
    {
      v40 = llvm::raw_ostream::write(v40, "file exists, overwriting", 0x18uLL);
      v42 = (_BYTE *)*((_QWORD *)v40 + 4);
    }
    v43 = (_BYTE *)*((_QWORD *)v40 + 3);
    goto LABEL_53;
  }
  v35 = v648;
  v36 = (llvm::raw_ostream *)llvm::errs((llvm *)v34);
  v37 = (char *)*((_QWORD *)v36 + 4);
  v38 = *((_QWORD *)v36 + 3) - (_QWORD)v37;
  if (!v35)
  {
    if (v38 > 0x21)
    {
      qmemcpy(v37, "writing to the newly created file ", 34);
      *((_QWORD *)v36 + 4) += 34;
    }
    else
    {
      v36 = llvm::raw_ostream::write(v36, "writing to the newly created file ", 0x22uLL);
    }
    if (v647 >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    if (v647 >= 0)
      v45 = HIBYTE(v647) & 0x7F;
    else
      v45 = (size_t)__p[1];
    v40 = llvm::raw_ostream::write(v36, (const char *)v44, v45);
    v43 = (_BYTE *)*((_QWORD *)v40 + 3);
    v42 = (_BYTE *)*((_QWORD *)v40 + 4);
LABEL_53:
    if (v43 == v42)
    {
      llvm::raw_ostream::write(v40, "\n", 1uLL);
    }
    else
    {
      *v42 = 10;
      ++*((_QWORD *)v40 + 4);
    }
LABEL_55:
    v46 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v692, (int)v687[0], 1, 0, 0);
    if (LODWORD(v687[0]) == -1)
    {
      v47 = (llvm::raw_ostream *)llvm::errs(v46);
      v48 = *((_QWORD *)v47 + 4);
      if ((unint64_t)(*((_QWORD *)v47 + 3) - v48) > 0x13)
      {
        *(_DWORD *)(v48 + 16) = 656434540;
        *(_OWORD *)v48 = *(_OWORD *)"error opening file '";
        *((_QWORD *)v47 + 4) += 20;
      }
      else
      {
        v47 = llvm::raw_ostream::write(v47, "error opening file '", 0x14uLL);
      }
      if (v647 >= 0)
        v49 = __p;
      else
        v49 = (void **)__p[0];
      if (v647 >= 0)
        v50 = HIBYTE(v647) & 0x7F;
      else
        v50 = (size_t)__p[1];
      v51 = llvm::raw_ostream::write(v47, (const char *)v49, v50);
      v52 = (void *)*((_QWORD *)v51 + 4);
      if (*((_QWORD *)v51 + 3) - (_QWORD)v52 > 0xEuLL)
      {
        qmemcpy(v52, "' for writing!\n", 15);
        *((_QWORD *)v51 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v51, "' for writing!\n", 0xFuLL);
      }
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v692);
    }
    else
    {
      *(_QWORD *)&v648 = &v692;
      *((_QWORD *)&v648 + 1) = &v671;
      LOWORD(v649) = 0;
      llvm::Twine::str((llvm::Twine *)&v683, v689);
      v596 = sub_1C6277F6C((uint64_t)&v648, (uint64_t)v689);
      if (SHIBYTE(v690[0]) < 0)
        operator delete(v689[0]);
      v597 = (llvm::raw_ostream *)llvm::errs(v596);
      v598 = (_QWORD *)*((_QWORD *)v597 + 4);
      if (*((_QWORD *)v597 + 3) - (_QWORD)v598 > 7uLL)
      {
        *v598 = 0xA202E656E6F6420;
        *((_QWORD *)v597 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v597, " done. \n", 8uLL);
      }
      v599 = __p[0];
      v600 = SHIBYTE(v647);
      __p[1] = 0;
      v647 = 0;
      __p[0] = 0;
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v692);
      if (v600 < 0)
        operator delete(v599);
    }
    goto LABEL_67;
  }
  if (v38 > 0x16)
  {
    qmemcpy(v37, "error writing into file", 23);
    v39 = (_BYTE *)(*((_QWORD *)v36 + 4) + 23);
    *((_QWORD *)v36 + 4) = v39;
  }
  else
  {
    v36 = llvm::raw_ostream::write(v36, "error writing into file", 0x17uLL);
    v39 = (_BYTE *)*((_QWORD *)v36 + 4);
  }
  if (*((_BYTE **)v36 + 3) == v39)
  {
    llvm::raw_ostream::write(v36, "\n", 1uLL);
  }
  else
  {
    *v39 = 10;
    ++*((_QWORD *)v36 + 4);
  }
LABEL_67:
  if (SHIBYTE(v647) < 0)
    operator delete(__p[0]);
LABEL_69:
  v665[0] = (char *)v666;
  v665[1] = (char *)0x2000000000;
  v667 = v669;
  v668 = 0x600000000;
  v669[12] = 0;
  v670 = &v671;
  sub_1C4AA2680((uint64_t)v665);
  if (!byte_1ED806240)
    goto LABEL_121;
  v683 = "ControlGraph";
  v686 = 259;
  v657 = 257;
  v53 = *(uint64_t ****)v6;
  if ((*(_BYTE *)(*(_QWORD *)v6 + 23) & 0x10) != 0)
  {
    v54 = ***v53;
    v55 = *(_QWORD *)(v54 + 152);
    v56 = *(unsigned int *)(v54 + 168);
    if ((_DWORD)v56)
    {
      LODWORD(v57) = (v56 - 1) & ((v53 >> 4) ^ (v53 >> 9));
      v58 = (uint64_t ****)(v55 + 16 * v57);
      v59 = *v58;
      if (*v58 == v53)
      {
LABEL_78:
        v62 = v58[1];
        v65 = *v62;
        v63 = (char *)(v62 + 2);
        v64 = v65;
        goto LABEL_79;
      }
      v60 = 1;
      while (v59 != (uint64_t ***)-4096)
      {
        v61 = v57 + v60++;
        v57 = v61 & (v56 - 1);
        v59 = *(uint64_t ****)(v55 + 16 * v57);
        if (v59 == v53)
        {
          v58 = (uint64_t ****)(v55 + 16 * v57);
          goto LABEL_78;
        }
      }
    }
    v58 = (uint64_t ****)(v55 + 16 * v56);
    goto LABEL_78;
  }
  v64 = 0;
  v63 = &byte_1C871356D;
LABEL_79:
  v651[0] = 1283;
  *(_QWORD *)&v648 = "ControlGraph.";
  v649 = (uint64_t)v63;
  v650 = v64;
  v700 = &v648;
  v702 = (uint64_t)".dot";
  v704[0] = 770;
  llvm::Twine::str((llvm::Twine *)&v700, v644);
  v66 = (void *)HIBYTE(v645);
  if (v645 < 0)
    v66 = v644[1];
  LODWORD(v705) = 0;
  if (!v66)
  {
    llvm::Twine::str((llvm::Twine *)&v683, v687);
    v696 = 260;
    v692 = v687;
    llvm::createGraphFilename((llvm::Twine *)&v692, (int *)&v705, v689);
    if (SHIBYTE(v645) < 0)
      operator delete(v644[0]);
    *(_OWORD *)v644 = *(_OWORD *)v689;
    v645 = v690[0];
    HIBYTE(v690[0]) = 0;
    LOBYTE(v689[0]) = 0;
    if (SHIBYTE(v688[0]) < 0)
      operator delete(v687[0]);
    goto LABEL_107;
  }
  v696 = 260;
  v692 = v644;
  v689[0] = (void *)llvm::sys::fs::openFile((unsigned __int8 *)&v692, (int *)&v705, 0, 2, 1, 438);
  v689[1] = v67;
  v68 = std::generic_category();
  v692 = (void *)17;
  v693 = (uint64_t)v68;
  v69 = (*(uint64_t (**)(void *, _QWORD, void **))(*(_QWORD *)v689[1] + 32))(v689[1], LODWORD(v689[0]), &v692);
  if ((v69 & 1) != 0
    || (v69 = (*(uint64_t (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v693 + 40))(v693, v689, v692), (v69 & 1) != 0))
  {
    v75 = (llvm::raw_ostream *)llvm::errs((llvm *)v69);
    v76 = (void *)*((_QWORD *)v75 + 4);
    if (*((_QWORD *)v75 + 3) - (_QWORD)v76 > 0x17uLL)
    {
      qmemcpy(v76, "file exists, overwriting", 24);
      v77 = (_BYTE *)(*((_QWORD *)v75 + 4) + 24);
      *((_QWORD *)v75 + 4) = v77;
    }
    else
    {
      v75 = llvm::raw_ostream::write(v75, "file exists, overwriting", 0x18uLL);
      v77 = (_BYTE *)*((_QWORD *)v75 + 4);
    }
    v78 = (_BYTE *)*((_QWORD *)v75 + 3);
    goto LABEL_105;
  }
  v70 = (int)v689[0];
  v71 = (llvm::raw_ostream *)llvm::errs((llvm *)v69);
  v72 = (char *)*((_QWORD *)v71 + 4);
  v73 = *((_QWORD *)v71 + 3) - (_QWORD)v72;
  if (!v70)
  {
    if (v73 > 0x21)
    {
      qmemcpy(v72, "writing to the newly created file ", 34);
      *((_QWORD *)v71 + 4) += 34;
    }
    else
    {
      v71 = llvm::raw_ostream::write(v71, "writing to the newly created file ", 0x22uLL);
    }
    if (v645 >= 0)
      v79 = v644;
    else
      v79 = (void **)v644[0];
    if (v645 >= 0)
      v80 = HIBYTE(v645) & 0x7F;
    else
      v80 = (size_t)v644[1];
    v75 = llvm::raw_ostream::write(v71, (const char *)v79, v80);
    v78 = (_BYTE *)*((_QWORD *)v75 + 3);
    v77 = (_BYTE *)*((_QWORD *)v75 + 4);
LABEL_105:
    if (v78 == v77)
    {
      llvm::raw_ostream::write(v75, "\n", 1uLL);
    }
    else
    {
      *v77 = 10;
      ++*((_QWORD *)v75 + 4);
    }
LABEL_107:
    v81 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v692, (int)v705, 1, 0, 0);
    if ((_DWORD)v705 == -1)
    {
      v82 = (llvm::raw_ostream *)llvm::errs(v81);
      v83 = *((_QWORD *)v82 + 4);
      if ((unint64_t)(*((_QWORD *)v82 + 3) - v83) > 0x13)
      {
        *(_DWORD *)(v83 + 16) = 656434540;
        *(_OWORD *)v83 = *(_OWORD *)"error opening file '";
        *((_QWORD *)v82 + 4) += 20;
      }
      else
      {
        v82 = llvm::raw_ostream::write(v82, "error opening file '", 0x14uLL);
      }
      if (v645 >= 0)
        v84 = v644;
      else
        v84 = (void **)v644[0];
      if (v645 >= 0)
        v85 = HIBYTE(v645) & 0x7F;
      else
        v85 = (size_t)v644[1];
      v86 = llvm::raw_ostream::write(v82, (const char *)v84, v85);
      v87 = (void *)*((_QWORD *)v86 + 4);
      if (*((_QWORD *)v86 + 3) - (_QWORD)v87 > 0xEuLL)
      {
        qmemcpy(v87, "' for writing!\n", 15);
        *((_QWORD *)v86 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v86, "' for writing!\n", 0xFuLL);
      }
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v692);
    }
    else
    {
      v689[0] = &v692;
      v689[1] = v665;
      LOWORD(v690[0]) = 0;
      llvm::Twine::str((llvm::Twine *)&v653, v687);
      v601 = sub_1C6278124((uint64_t)v689, (uint64_t)v687);
      if (SHIBYTE(v688[0]) < 0)
        operator delete(v687[0]);
      v602 = (llvm::raw_ostream *)llvm::errs(v601);
      v603 = (_QWORD *)*((_QWORD *)v602 + 4);
      if (*((_QWORD *)v602 + 3) - (_QWORD)v603 > 7uLL)
      {
        *v603 = 0xA202E656E6F6420;
        *((_QWORD *)v602 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v602, " done. \n", 8uLL);
      }
      v604 = v644[0];
      v605 = SHIBYTE(v645);
      v644[1] = 0;
      v645 = 0;
      v644[0] = 0;
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v692);
      if (v605 < 0)
        operator delete(v604);
    }
    goto LABEL_119;
  }
  if (v73 > 0x16)
  {
    qmemcpy(v72, "error writing into file", 23);
    v74 = (_BYTE *)(*((_QWORD *)v71 + 4) + 23);
    *((_QWORD *)v71 + 4) = v74;
  }
  else
  {
    v71 = llvm::raw_ostream::write(v71, "error writing into file", 0x17uLL);
    v74 = (_BYTE *)*((_QWORD *)v71 + 4);
  }
  if (*((_BYTE **)v71 + 3) == v74)
  {
    llvm::raw_ostream::write(v71, "\n", 1uLL);
  }
  else
  {
    *v74 = 10;
    ++*((_QWORD *)v71 + 4);
  }
LABEL_119:
  if (SHIBYTE(v645) < 0)
    operator delete(v644[0]);
LABEL_121:
  llvm::FlowAnalyzer::FlowAnalyzer((uint64_t)&v653, (uint64_t *)v665, (uint64_t)&v671, (uint64_t)v12, *(_QWORD *)(v7 + 248), *(llvm::TargetInstrInfo **)(v7 + 256));
  if (!byte_1ED806300)
    goto LABEL_173;
  v683 = "FlowAnalyzer";
  v686 = 259;
  v704[0] = 257;
  v89 = *(uint64_t ****)v6;
  if ((*(_BYTE *)(*(_QWORD *)v6 + 23) & 0x10) != 0)
  {
    v90 = ***v89;
    v91 = *(_QWORD *)(v90 + 152);
    v92 = *(unsigned int *)(v90 + 168);
    if ((_DWORD)v92)
    {
      LODWORD(v93) = (v92 - 1) & ((v89 >> 4) ^ (v89 >> 9));
      v94 = (uint64_t ****)(v91 + 16 * v93);
      v95 = *v94;
      if (*v94 == v89)
      {
LABEL_130:
        v98 = v94[1];
        v101 = *v98;
        v99 = (char *)(v98 + 2);
        v100 = v101;
        goto LABEL_131;
      }
      v96 = 1;
      while (v95 != (uint64_t ***)-4096)
      {
        v97 = v93 + v96++;
        v93 = v97 & (v92 - 1);
        v95 = *(uint64_t ****)(v91 + 16 * v93);
        if (v95 == v89)
        {
          v94 = (uint64_t ****)(v91 + 16 * v93);
          goto LABEL_130;
        }
      }
    }
    v94 = (uint64_t ****)(v91 + 16 * v92);
    goto LABEL_130;
  }
  v100 = 0;
  v99 = &byte_1C871356D;
LABEL_131:
  v691 = 1283;
  v689[0] = "FlowAnalyzer.";
  v690[0] = v99;
  v690[1] = v100;
  *(_QWORD *)&v648 = v689;
  v649 = (uint64_t)".dot";
  v651[0] = 770;
  llvm::Twine::str((llvm::Twine *)&v648, v642);
  v102 = (void *)HIBYTE(v643);
  if (v643 < 0)
    v102 = v642[1];
  LODWORD(v697) = 0;
  if (!v102)
  {
    llvm::Twine::str((llvm::Twine *)&v683, &v705);
    v696 = 260;
    v692 = &v705;
    llvm::createGraphFilename((llvm::Twine *)&v692, (int *)&v697, v687);
    if (SHIBYTE(v643) < 0)
      operator delete(v642[0]);
    *(_OWORD *)v642 = *(_OWORD *)v687;
    v643 = v688[0];
    HIBYTE(v688[0]) = 0;
    LOBYTE(v687[0]) = 0;
    if (v708 < 0)
      operator delete(v705);
    goto LABEL_159;
  }
  v696 = 260;
  v692 = v642;
  v687[0] = (void *)llvm::sys::fs::openFile((unsigned __int8 *)&v692, (int *)&v697, 0, 2, 1, 438);
  v687[1] = v103;
  v104 = std::generic_category();
  v692 = (void *)17;
  v693 = (uint64_t)v104;
  v105 = (*(uint64_t (**)(void *, _QWORD, void **))(*(_QWORD *)v687[1] + 32))(v687[1], LODWORD(v687[0]), &v692);
  if ((v105 & 1) != 0
    || (v105 = (*(uint64_t (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v693 + 40))(v693, v687, v692), (v105 & 1) != 0))
  {
    v111 = (llvm::raw_ostream *)llvm::errs((llvm *)v105);
    v112 = (void *)*((_QWORD *)v111 + 4);
    if (*((_QWORD *)v111 + 3) - (_QWORD)v112 > 0x17uLL)
    {
      qmemcpy(v112, "file exists, overwriting", 24);
      v113 = (_BYTE *)(*((_QWORD *)v111 + 4) + 24);
      *((_QWORD *)v111 + 4) = v113;
    }
    else
    {
      v111 = llvm::raw_ostream::write(v111, "file exists, overwriting", 0x18uLL);
      v113 = (_BYTE *)*((_QWORD *)v111 + 4);
    }
    v114 = (_BYTE *)*((_QWORD *)v111 + 3);
    goto LABEL_157;
  }
  v106 = (int)v687[0];
  v107 = (llvm::raw_ostream *)llvm::errs((llvm *)v105);
  v108 = (char *)*((_QWORD *)v107 + 4);
  v109 = *((_QWORD *)v107 + 3) - (_QWORD)v108;
  if (!v106)
  {
    if (v109 > 0x21)
    {
      qmemcpy(v108, "writing to the newly created file ", 34);
      *((_QWORD *)v107 + 4) += 34;
    }
    else
    {
      v107 = llvm::raw_ostream::write(v107, "writing to the newly created file ", 0x22uLL);
    }
    if (v643 >= 0)
      v115 = v642;
    else
      v115 = (void **)v642[0];
    if (v643 >= 0)
      v116 = HIBYTE(v643) & 0x7F;
    else
      v116 = (size_t)v642[1];
    v111 = llvm::raw_ostream::write(v107, (const char *)v115, v116);
    v114 = (_BYTE *)*((_QWORD *)v111 + 3);
    v113 = (_BYTE *)*((_QWORD *)v111 + 4);
LABEL_157:
    if (v114 == v113)
    {
      llvm::raw_ostream::write(v111, "\n", 1uLL);
    }
    else
    {
      *v113 = 10;
      ++*((_QWORD *)v111 + 4);
    }
LABEL_159:
    v117 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v692, (int)v697, 1, 0, 0);
    if ((_DWORD)v697 == -1)
    {
      v118 = (llvm::raw_ostream *)llvm::errs(v117);
      v119 = *((_QWORD *)v118 + 4);
      if ((unint64_t)(*((_QWORD *)v118 + 3) - v119) > 0x13)
      {
        *(_DWORD *)(v119 + 16) = 656434540;
        *(_OWORD *)v119 = *(_OWORD *)"error opening file '";
        *((_QWORD *)v118 + 4) += 20;
      }
      else
      {
        v118 = llvm::raw_ostream::write(v118, "error opening file '", 0x14uLL);
      }
      if (v643 >= 0)
        v120 = v642;
      else
        v120 = (void **)v642[0];
      if (v643 >= 0)
        v121 = HIBYTE(v643) & 0x7F;
      else
        v121 = (size_t)v642[1];
      v122 = llvm::raw_ostream::write(v118, (const char *)v120, v121);
      v123 = (void *)*((_QWORD *)v122 + 4);
      if (*((_QWORD *)v122 + 3) - (_QWORD)v123 > 0xEuLL)
      {
        qmemcpy(v123, "' for writing!\n", 15);
        *((_QWORD *)v122 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v122, "' for writing!\n", 0xFuLL);
      }
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v692);
    }
    else
    {
      v687[0] = &v692;
      v687[1] = &v653;
      LOWORD(v688[0]) = 0;
      llvm::Twine::str((llvm::Twine *)&v700, &v705);
      v606 = sub_1C62783A8((uint64_t)v687, (uint64_t)&v705);
      if (v708 < 0)
        operator delete(v705);
      v607 = (llvm::raw_ostream *)llvm::errs(v606);
      v608 = (_QWORD *)*((_QWORD *)v607 + 4);
      if (*((_QWORD *)v607 + 3) - (_QWORD)v608 > 7uLL)
      {
        *v608 = 0xA202E656E6F6420;
        *((_QWORD *)v607 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v607, " done. \n", 8uLL);
      }
      v609 = v642[0];
      v610 = SHIBYTE(v643);
      v642[1] = 0;
      v643 = 0;
      v642[0] = 0;
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v692);
      if (v610 < 0)
        operator delete(v609);
    }
    goto LABEL_171;
  }
  if (v109 > 0x16)
  {
    qmemcpy(v108, "error writing into file", 23);
    v110 = (_BYTE *)(*((_QWORD *)v107 + 4) + 23);
    *((_QWORD *)v107 + 4) = v110;
  }
  else
  {
    v107 = llvm::raw_ostream::write(v107, "error writing into file", 0x17uLL);
    v110 = (_BYTE *)*((_QWORD *)v107 + 4);
  }
  if (*((_BYTE **)v107 + 3) == v110)
  {
    llvm::raw_ostream::write(v107, "\n", 1uLL);
  }
  else
  {
    *v110 = 10;
    ++*((_QWORD *)v107 + 4);
  }
LABEL_171:
  if (SHIBYTE(v643) < 0)
    operator delete(v642[0]);
LABEL_173:
  if (v664 < 0x100)
    goto LABEL_199;
  ShaderID = llvm::AGXIR::getShaderID(*(llvm::AGXIR **)(*(_QWORD *)v6 + 40), v88);
  v125 = (llvm::raw_ostream *)llvm::errs((llvm *)ShaderID);
  v126 = v125;
  v127 = (_OWORD *)*((_QWORD *)v125 + 4);
  if (*((_QWORD *)v125 + 3) - (_QWORD)v127 > 0xFuLL)
  {
    *v127 = *(_OWORD *)"Max Unstruct ID ";
    *((_QWORD *)v125 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v125, "Max Unstruct ID ", 0x10uLL);
  }
  sub_1C5E21910(v126, v664, 0, 0, 0);
  v128 = (void *)*((_QWORD *)v126 + 4);
  if (*((_QWORD *)v126 + 3) - (_QWORD)v128 > 0xCuLL)
  {
    qmemcpy(v128, " in function ", 13);
    *((_QWORD *)v126 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v126, " in function ", 0xDuLL);
  }
  v129 = *(uint64_t ****)v6;
  if ((*(_BYTE *)(*(_QWORD *)v6 + 23) & 0x10) == 0)
    goto LABEL_188;
  v130 = ***v129;
  v131 = *(_QWORD *)(v130 + 152);
  v132 = *(unsigned int *)(v130 + 168);
  if (!(_DWORD)v132)
    goto LABEL_185;
  LODWORD(v133) = (v132 - 1) & ((v129 >> 4) ^ (v129 >> 9));
  v134 = (uint64_t ****)(v131 + 16 * v133);
  v135 = *v134;
  if (*v134 != v129)
  {
    v136 = 1;
    while (v135 != (uint64_t ***)-4096)
    {
      v137 = v133 + v136++;
      v133 = v137 & (v132 - 1);
      v135 = *(uint64_t ****)(v131 + 16 * v133);
      if (v135 == v129)
      {
        v134 = (uint64_t ****)(v131 + 16 * v133);
        goto LABEL_186;
      }
    }
LABEL_185:
    v134 = (uint64_t ****)(v131 + 16 * v132);
  }
LABEL_186:
  v138 = (size_t *)v134[1];
  v141 = *v138;
  v139 = v138 + 2;
  v140 = v141;
  v142 = (_QWORD *)*((_QWORD *)v126 + 4);
  if (v141 <= *((_QWORD *)v126 + 3) - (_QWORD)v142)
  {
    if (v140)
    {
      memcpy(v142, v139, v140);
      v142 = (_QWORD *)(*((_QWORD *)v126 + 4) + v140);
      *((_QWORD *)v126 + 4) = v142;
    }
    goto LABEL_191;
  }
  llvm::raw_ostream::write(v126, (const char *)v139, v140);
LABEL_188:
  v142 = (_QWORD *)*((_QWORD *)v126 + 4);
LABEL_191:
  if (*((_QWORD *)v126 + 3) - (_QWORD)v142 > 0xAuLL)
  {
    *(_DWORD *)((char *)v142 + 7) = 544367972;
    *v142 = *(_QWORD *)" in shader ";
    *((_QWORD *)v126 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v126, " in shader ", 0xBuLL);
  }
  if ((ShaderID & 0xFF00000000) != 0)
  {
    sub_1C5E21910(v126, ShaderID, 0, 0, 0);
  }
  else
  {
    v143 = (_DWORD *)*((_QWORD *)v126 + 4);
    if (*((_QWORD *)v126 + 3) - (_QWORD)v143 > 3uLL)
    {
      *v143 = 1701736270;
      *((_QWORD *)v126 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v126, "None", 4uLL);
    }
  }
  v144 = (void *)*((_QWORD *)v126 + 4);
  if (*((_QWORD *)v126 + 3) - (_QWORD)v144 > 0x18uLL)
  {
    qmemcpy(v144, " exceeds supported limit\n", 25);
    *((_QWORD *)v126 + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(v126, " exceeds supported limit\n", 0x19uLL);
  }
LABEL_199:
  v146 = *(_QWORD *)(v7 + 248);
  v145 = *(_QWORD *)(v7 + 256);
  v147 = *(uint64_t **)(*((_QWORD *)v680 + 2) + 32);
  *(_QWORD *)&v648 = v651;
  *((_QWORD *)&v648 + 1) = v651;
  v649 = 32;
  LODWORD(v650) = 0;
  v640 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v146 + 8))(v146, v147);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v146 + 24))(v146, v147);
  v630 = 0;
  if (*(unsigned __int8 *)(v147[7] + 62) | v663[128])
  {
    v630 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v146 + 16))(v146, v147);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 48))(v146, v147[41]);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v146 + 32))(v146, v147[41], v640, v145);
  v689[0] = v690;
  v689[1] = (void *)0x2000000000;
  v150 = (uint64_t *)((char *)v671 + 4);
  v151 = *(_DWORD *)v671;
  v152 = v660;
  if (v672 <= 1)
    v150 = &v681;
  v153 = v147;
  v154 = *(_DWORD *)v150;
  v625 = (uint64_t)v12;
  v632 = (llvm::MachineFunction *)v153;
  if (*(_DWORD *)v150 == v151)
  {
    v636 = v153 + 40;
    v687[0] = v688;
    v687[1] = (void *)0x2000000000;
    goto LABEL_289;
  }
  v155 = 0;
  do
  {
    v156 = v152[--v154];
    if (v155 >= HIDWORD(v689[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v689, (uint64_t)v690, v155 + 1, 4);
      v155 = v689[1];
    }
    *((_DWORD *)v689[0] + v155) = v156;
    v155 = ++LODWORD(v689[1]);
  }
  while (v151 != v154);
  v636 = (uint64_t *)((char *)v632 + 320);
  v687[0] = v688;
  v687[1] = (void *)0x2000000000;
  while (v155)
  {
    v157 = *((_DWORD *)v689[0] + --v155);
    LODWORD(v689[1]) = v155;
    v158 = v680;
    if ((v680[48 * v157 + 8] & 0x10) == 0)
    {
      v159 = LODWORD(v687[1]);
      if (LODWORD(v687[1]) >= (unint64_t)HIDWORD(v687[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v687, (uint64_t)v688, LODWORD(v687[1]) + 1, 4);
        v159 = LODWORD(v687[1]);
      }
      *((_DWORD *)v687[0] + v159) = v157;
      ++LODWORD(v687[1]);
      v160 = &v158[48 * v157];
      v163 = (uint64_t *)*((_QWORD *)v160 + 2);
      v161 = (uint64_t **)(v160 + 16);
      v162 = v163;
      if (v163[8] != v163[9])
      {
        v165 = (char *)v162[20];
        v164 = v162[21];
        if ((unint64_t)v165 >= v164)
        {
          v180 = (char *)v162[19];
          v181 = (v165 - v180) >> 4;
          v182 = v181 + 1;
          if ((unint64_t)(v181 + 1) >> 60)
            goto LABEL_914;
          v183 = v164 - (_QWORD)v180;
          if (v183 >> 3 > v182)
            v182 = v183 >> 3;
          v184 = (unint64_t)v183 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v182;
          if (v184)
          {
            if (v184 >> 60)
              goto LABEL_915;
            v185 = (char *)operator new(16 * v184);
          }
          else
          {
            v185 = 0;
          }
          v197 = &v185[16 * v181];
          *(_WORD *)v197 = v640;
          *((_QWORD *)v197 + 1) = -1;
          v198 = v197;
          if (v165 != v180)
          {
            do
            {
              *((_OWORD *)v198 - 1) = *((_OWORD *)v165 - 1);
              v198 -= 16;
              v165 -= 16;
            }
            while (v165 != v180);
            v165 = (char *)v162[19];
          }
          v166 = v197 + 16;
          v162[19] = (uint64_t)v198;
          v162[20] = (uint64_t)(v197 + 16);
          v162[21] = (uint64_t)&v185[16 * v184];
          v12 = (int32x2_t *)v625;
          if (v165)
            operator delete(v165);
        }
        else
        {
          *(_WORD *)v165 = v640;
          *((_QWORD *)v165 + 1) = -1;
          v166 = v165 + 16;
        }
        v162[20] = (uint64_t)v166;
        v162 = *v161;
        if (v630)
        {
          v200 = (char *)v162[20];
          v199 = v162[21];
          if ((unint64_t)v200 >= v199)
          {
            v202 = (char *)v162[19];
            v203 = (v200 - v202) >> 4;
            v204 = v203 + 1;
            if ((unint64_t)(v203 + 1) >> 60)
LABEL_914:
              abort();
            v205 = v199 - (_QWORD)v202;
            if (v205 >> 3 > v204)
              v204 = v205 >> 3;
            if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF0)
              v206 = 0xFFFFFFFFFFFFFFFLL;
            else
              v206 = v204;
            if (v206)
            {
              if (v206 >> 60)
LABEL_915:
                sub_1C4764EE4();
              v207 = (char *)operator new(16 * v206);
            }
            else
            {
              v207 = 0;
            }
            v208 = &v207[16 * v203];
            *(_WORD *)v208 = v630;
            *((_QWORD *)v208 + 1) = -1;
            v209 = v208;
            if (v200 != v202)
            {
              do
              {
                *((_OWORD *)v209 - 1) = *((_OWORD *)v200 - 1);
                v209 -= 16;
                v200 -= 16;
              }
              while (v200 != v202);
              v200 = (char *)v162[19];
            }
            v201 = v208 + 16;
            v162[19] = (uint64_t)v209;
            v162[20] = (uint64_t)(v208 + 16);
            v162[21] = (uint64_t)&v207[16 * v206];
            v12 = (int32x2_t *)v625;
            if (v200)
              operator delete(v200);
          }
          else
          {
            *(_WORD *)v200 = v630;
            *((_QWORD *)v200 + 1) = -1;
            v201 = v200 + 16;
          }
          v162[20] = (uint64_t)v201;
          v162 = *v161;
        }
      }
      v210 = (uint64_t *)v162[1];
      if (v636 != v162 && v210 != v636 && v210 != v162)
      {
        v213 = *v210;
        v214 = *v162;
        *(_QWORD *)(v214 + 8) = v210;
        *v210 = v214;
        v215 = *v636;
        *(_QWORD *)(v213 + 8) = v636;
        *v162 = v215;
        *(_QWORD *)(v215 + 8) = v162;
        *v636 = v213;
      }
      goto LABEL_278;
    }
    v167 = v12[33].i32[0];
    if (!v167)
      goto LABEL_225;
    v168 = *(_QWORD *)&v680[48 * v157 + 16];
    v169 = v12[31];
    v170 = v167 - 1;
    v171 = ((v168 >> 4) ^ (v168 >> 9)) & (v167 - 1);
    v172 = *(_QWORD *)(*(_QWORD *)&v169 + 16 * v171);
    if (v168 != v172)
    {
      v173 = 1;
      while (v172 != -4096)
      {
        v174 = v171 + v173++;
        v171 = v174 & v170;
        v172 = *(_QWORD *)(*(_QWORD *)&v169 + 16 * v171);
        if (v168 == v172)
          goto LABEL_221;
      }
LABEL_225:
      v179 = 0;
      goto LABEL_238;
    }
LABEL_221:
    v175 = *(_QWORD *)(*(_QWORD *)&v169 + 16 * v171 + 8);
    if (!v175)
      goto LABEL_225;
    if ((v674 & 1) != 0)
    {
      v177 = 16;
      v176 = &v675;
    }
    else
    {
      v176 = v675;
      v177 = v676;
      if (!v676)
      {
        v178 = 0;
LABEL_288:
        v188 = &v176[2 * v178];
        goto LABEL_237;
      }
    }
    v186 = v177 - 1;
    LODWORD(v187) = (v177 - 1) & ((v175 >> 4) ^ (v175 >> 9));
    v188 = &v176[2 * v187];
    v189 = *v188;
    if (*v188 != v175)
    {
      v216 = 1;
      while (v189 != -4096)
      {
        v217 = v187 + v216++;
        v187 = v217 & v186;
        v189 = v176[2 * v187];
        if (v189 == v175)
        {
          v188 = &v176[2 * v187];
          goto LABEL_237;
        }
      }
      if ((v674 & 1) != 0)
      {
        v176 = &v675;
        v178 = 16;
      }
      else
      {
        v176 = v675;
        v178 = v676;
      }
      goto LABEL_288;
    }
LABEL_237:
    v179 = *((_DWORD *)v188 + 2);
LABEL_238:
    v190 = *((_DWORD *)v671 + v179);
    v191 = v179 + 1;
    v192 = (uint64_t *)((char *)v671 + 4 * v191);
    v193 = v191 >= v672;
    v194 = &v681;
    if (!v193)
      v194 = v192;
    v195 = *(_DWORD *)v194;
    if (*(_DWORD *)v194 != v190)
    {
      do
      {
        v196 = v152[--v195];
        if (v155 >= HIDWORD(v689[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v689, (uint64_t)v690, v155 + 1, 4);
          v155 = v689[1];
        }
        *((_DWORD *)v689[0] + v155) = v196;
        v155 = ++LODWORD(v689[1]);
      }
      while (v190 != v195);
      continue;
    }
LABEL_278:
    v155 = v689[1];
  }
LABEL_289:
  v218 = v681;
  v219 = v681;
  v692 = &v694;
  v693 = 0x200000000;
  v683 = v685;
  v684 = 0x2000000000;
  if (v681 < 0x21)
  {
    if ((_DWORD)v681)
    {
      v224 = v685;
      do
      {
        *v224 = v224 + 2;
        v224[1] = 0x200000000;
        if ((_DWORD)v693)
          v224 = (_QWORD *)sub_1C555CB6C((uint64_t)v224, (uint64_t *)&v692);
        v224 += 8;
        --v218;
      }
      while (v218);
    }
  }
  else
  {
    v700 = 0;
    v220 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v683, v681, 64, (unint64_t *)&v700);
    v221 = 0;
    v222 = v218 << 6;
    do
    {
      v223 = &v220[v221];
      *(_QWORD *)v223 = &v220[v221 + 16];
      *((_QWORD *)v223 + 1) = 0x200000000;
      if ((_DWORD)v693)
        sub_1C555CB6C((uint64_t)v223, (uint64_t *)&v692);
      v221 += 64;
    }
    while (v222 != v221);
    v225 = (char *)v683;
    if ((_DWORD)v684)
    {
      v611 = (unint64_t)v684 << 6;
      do
      {
        v612 = *(char **)&v225[v611 - 64];
        if (&v225[v611 - 48] != v612)
          free(v612);
        v611 -= 64;
      }
      while (v611);
      v225 = (char *)v683;
      v12 = (int32x2_t *)v625;
    }
    v226 = (int)v700;
    if (v225 != v685)
      free(v225);
    v683 = v220;
    HIDWORD(v684) = v226;
  }
  LODWORD(v684) = v219;
  v227 = v632;
  if (v692 != &v694)
    free(v692);
  v623 = LODWORD(v687[1]);
  if (LODWORD(v687[1]))
  {
    v228 = 0;
    while (1)
    {
      v229 = *((unsigned int *)v687[0] + v228);
      v230 = v658;
      v231 = v680;
      v232 = (char *)v658 + 48 * v229;
      v233 = *((unsigned __int16 *)v232 + 22);
      v637 = v232 + 44;
      if ((*((_WORD *)v232 + 22) & 0x600) == 0)
      {
        v234 = *((_DWORD *)v658 + 12 * v229 + 3);
        if (v234 == -1)
          LOBYTE(v235) = 0;
        else
          v235 = *((_DWORD *)v658 + 12 * v234 + 8);
        v236 = *((_DWORD *)v658 + 12 * v229 + 4);
        if (v236 == -1)
          LOBYTE(v237) = 0;
        else
          v237 = *((_DWORD *)v658 + 12 * v236 + 8);
        if ((v233 & 2) == 0 && v235 | v237)
        {
          if ((v233 & 4) != 0)
            v238 = v237;
          else
            v238 = v235;
          if ((v233 & 4) == 0)
            LOBYTE(v235) = v237;
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v146 + 144))(v146, *(_QWORD *)&v680[48 * v229 + 16], v640, v630, v238, v235, v145);
          v233 = (unsigned __int16)*v637;
        }
      }
      if ((v233 & 0x30) != 0)
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v146 + 64))(v146, *(_QWORD *)&v231[48 * v229 + 16], v640, (v233 >> 2) & 1, v145);
        v233 = (unsigned __int16)*v637;
      }
      v633 = v231;
      v627 = v228;
      if ((v233 & 0x400) != 0)
        break;
LABEL_395:
      if ((v233 & 0x200) != 0)
      {
        v320 = *(_QWORD *)&v231[48 * v229 + 16];
        v321 = v12[31];
        v322 = v12[33].i32[0];
        if (!v322)
          goto LABEL_404;
        v323 = ((v320 >> 4) ^ (v320 >> 9)) & (v322 - 1);
        v324 = *(_QWORD *)(*(_QWORD *)&v321 + 16 * v323);
        if (v320 == v324)
        {
LABEL_403:
          v327 = *(_QWORD *)(*(_QWORD *)&v321 + 16 * v323 + 8);
        }
        else
        {
          v325 = 1;
          while (v324 != -4096)
          {
            v326 = v323 + v325++;
            v323 = v326 & (v322 - 1);
            v324 = *(_QWORD *)(*(_QWORD *)&v321 + 16 * v323);
            if (v320 == v324)
              goto LABEL_403;
          }
LABEL_404:
          v327 = 0;
        }
        v328 = v230[12 * v229 + 3];
        v329 = v665[0];
        v330 = &v665[0][64 * v328];
        v331 = *((_DWORD *)v330 + 4);
        v332 = v331 == 1 && (*((_BYTE *)v670[108] + 48 * **((unsigned int **)v330 + 1) + 8) & 0x10) != 0 || v331 > 1;
        v333 = v658;
        v334 = v230[12 * v229 + 4];
        if ((_DWORD)v334 != -1)
        {
          v335 = v680;
          v616 = v332;
          v614 = v320;
          if (!v322)
            goto LABEL_416;
          v336 = *(_QWORD *)&v680[48 * v328 + 16];
          v337 = v322 - 1;
          v338 = ((v336 >> 4) ^ (v336 >> 9)) & (v322 - 1);
          v339 = *(_QWORD *)(*(_QWORD *)&v321 + 16 * v338);
          if (v336 == v339)
          {
LABEL_415:
            v342 = v658;
            v343 = *(_QWORD *)(*(_QWORD *)&v321 + 16 * v338 + 8);
          }
          else
          {
            v340 = 1;
            while (v339 != -4096)
            {
              v341 = v338 + v340++;
              v338 = v341 & v337;
              v339 = *(_QWORD *)(*(_QWORD *)&v321 + 16 * v338);
              if (v336 == v339)
                goto LABEL_415;
            }
LABEL_416:
            v342 = v658;
            v343 = 0;
          }
          v619 = v230[12 * v229 + 3];
          if (v343 == v327)
            v344 = v230[12 * v229 + 4];
          else
            v344 = v230[12 * v229 + 3];
          v615 = v327;
          v345 = sub_1C555CC90(v625, (_QWORD *)v327, *(_QWORD *)&v680[48 * v344 + 16]);
          if (v345)
          {
            if ((v674 & 1) != 0)
            {
              v347 = 16;
              v346 = &v675;
            }
            else
            {
              v346 = v675;
              v347 = v676;
              if (!v676)
              {
                v348 = 0;
                goto LABEL_529;
              }
            }
            v353 = v347 - 1;
            LODWORD(v354) = (v347 - 1) & ((v345 >> 4) ^ (v345 >> 9));
            v355 = (uint64_t **)&v346[2 * v354];
            v356 = *v355;
            if (*v355 != v345)
            {
              v419 = 1;
              while (v356 != (uint64_t *)-4096)
              {
                v420 = v354 + v419++;
                v354 = v420 & v353;
                v356 = (uint64_t *)v346[2 * v354];
                if (v356 == v345)
                {
                  v355 = (uint64_t **)&v346[2 * v354];
                  goto LABEL_431;
                }
              }
              if ((v674 & 1) != 0)
              {
                v346 = &v675;
                v348 = 16;
              }
              else
              {
                v346 = v675;
                v348 = v676;
              }
LABEL_529:
              v355 = (uint64_t **)&v346[2 * v348];
            }
LABEL_431:
            v352 = *((unsigned int *)v355 + 2);
          }
          else
          {
            v352 = 0;
          }
          v357 = *((_DWORD *)v671 + v352);
          v358 = *v345;
          if (*v345)
          {
            if ((v674 & 1) != 0)
            {
              v360 = 16;
              v359 = &v675;
            }
            else
            {
              v359 = v675;
              v360 = v676;
              if (!v676)
              {
                v361 = 0;
                goto LABEL_531;
              }
            }
            v362 = v360 - 1;
            LODWORD(v363) = (v360 - 1) & ((v358 >> 4) ^ (v358 >> 9));
            v364 = &v359[2 * v363];
            v365 = *v364;
            if (*v364 != v358)
            {
              v421 = 1;
              while (v365 != -4096)
              {
                v422 = v363 + v421++;
                v363 = v422 & v362;
                v365 = v359[2 * v363];
                if (v365 == v358)
                {
                  v364 = &v359[2 * v363];
                  goto LABEL_438;
                }
              }
              if ((v674 & 1) != 0)
              {
                v359 = &v675;
                v361 = 16;
              }
              else
              {
                v359 = v675;
                v361 = v676;
              }
LABEL_531:
              v364 = &v359[2 * v361];
            }
LABEL_438:
            LODWORD(v358) = *((_DWORD *)v364 + 2);
          }
          v366 = *(_QWORD *)&v335[48 * v357 + 16];
          v367 = *((unsigned int *)v671 + v358);
          v368 = (uint64_t *)((char *)v671 + 4 * (v358 + 1));
          if ((int)v358 + 1 >= v672)
            v368 = &v681;
          v369 = *(unsigned int *)v368;
          if ((v677 & 1) != 0)
          {
            v371 = 16;
            v370 = &v678;
LABEL_443:
            v372 = v371 - 1;
            v373 = &v370[4 * (v372 & ((v366 >> 4) ^ (v366 >> 9)))];
            v374 = *v373;
            if (*v373 != v366)
            {
              v375 = 1;
              LODWORD(v376) = v372 & ((v366 >> 4) ^ (v366 >> 9));
              while (v374 != -4096)
              {
                v377 = v376 + v375++;
                v376 = v377 & v372;
                v374 = v370[4 * v376];
                if (v374 == v366)
                {
                  v373 = &v370[4 * v376];
                  goto LABEL_448;
                }
              }
              if ((v677 & 1) != 0)
              {
                v370 = &v678;
                v429 = 16;
              }
              else
              {
                v370 = v678;
                v429 = v679;
              }
              goto LABEL_543;
            }
          }
          else
          {
            v370 = v678;
            v371 = v679;
            if (v679)
              goto LABEL_443;
            v429 = 0;
LABEL_543:
            v373 = &v370[4 * v429];
          }
LABEL_448:
          v378 = &v678;
          if ((v677 & 1) != 0)
          {
            v379 = 16;
          }
          else
          {
            v378 = v678;
            v379 = v679;
          }
          if (&v378[4 * v379] == v373)
          {
            LODWORD(v384) = -1;
            v381 = v342;
          }
          else
          {
            v380 = *((unsigned int *)v373 + 4);
            v381 = v342;
            if ((_DWORD)v380)
            {
              v382 = (unsigned int *)v373[1];
              v383 = 4 * v380;
              while (1)
              {
                v384 = *v382;
                if (v384 >= v367 && v384 <= v369)
                  break;
                ++v382;
                v383 -= 4;
                if (!v383)
                  goto LABEL_460;
              }
            }
            else
            {
LABEL_460:
              LODWORD(v384) = -1;
            }
          }
          v386 = &v329[64 * v334];
          v387 = *((_DWORD *)v386 + 4);
          if (v387 == 1)
          {
            v388 = (uint64_t)v670[108];
            if ((*(_BYTE *)(v388 + 48 * **((unsigned int **)v386 + 1) + 8) & 0x10) != 0)
            {
              v389 = 1;
              goto LABEL_466;
            }
          }
          else
          {
            v388 = (uint64_t)v670[108];
          }
          v389 = v387 > 1;
LABEL_466:
          v390 = v381[12 * v334 + 8];
          v391 = (uint64_t)v329;
          v392 = v381;
          v393 = sub_1C555CD6C(v391, v388, v384);
          v333 = v392;
          LODWORD(v328) = v619;
          v332 = v616;
          v320 = v614;
          v327 = v615;
LABEL_472:
          v399 = (char *)&v333[12 * v357];
          BYTE4(v613) = (v233 & 0x1000) != 0;
          BYTE3(v613) = v393;
          BYTE2(v613) = v390;
          BYTE1(v613) = v389;
          LOBYTE(v613) = v333[12 * v328 + 8];
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v146 + 88))(v146, v320, **(_QWORD **)(v327 + 32), v640, v630, (v233 >> 2) & 1, v230[12 * v229 + 6]+ ((v233 >> 7) & 1)- v230[12 * v229 + 9]- *((_DWORD *)v399 + 6)+ *((_DWORD *)v399 + 9)+ 2 * (*((_DWORD *)v399 + 10) - v230[12 * v229 + 10])- ((*((unsigned __int16 *)v399 + 22) >> 7) & 1), v332, v613, v145);
          LOWORD(v233) = *v637;
          v12 = (int32x2_t *)v625;
          v228 = v627;
          v231 = v633;
          if ((*v637 & 0x100) == 0)
            goto LABEL_474;
LABEL_473:
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v146 + 104))(v146, *(_QWORD *)&v231[48 * v229 + 16], v640, 0, v145);
          LOWORD(v233) = *v637;
          goto LABEL_474;
        }
        if (v327)
        {
          if ((v674 & 1) != 0)
          {
            v350 = 16;
            v349 = &v675;
          }
          else
          {
            v349 = v675;
            v350 = v676;
            if (!v676)
            {
              v351 = 0;
              goto LABEL_533;
            }
          }
          v395 = v350 - 1;
          LODWORD(v396) = (v350 - 1) & ((v327 >> 4) ^ (v327 >> 9));
          v397 = &v349[2 * v396];
          v398 = *v397;
          if (*v397 != v327)
          {
            v423 = 1;
            while (v398 != -4096)
            {
              v424 = v396 + v423++;
              v396 = v424 & v395;
              v398 = v349[2 * v396];
              if (v398 == v327)
              {
                v397 = &v349[2 * v396];
                goto LABEL_470;
              }
            }
            if ((v674 & 1) != 0)
            {
              v349 = &v675;
              v351 = 16;
            }
            else
            {
              v349 = v675;
              v351 = v676;
            }
LABEL_533:
            v397 = &v349[2 * v351];
          }
LABEL_470:
          v394 = *((unsigned int *)v397 + 2);
        }
        else
        {
          v394 = 0;
        }
        LOBYTE(v390) = 0;
        v393 = 0;
        v389 = 0;
        v357 = *((_DWORD *)v671 + v394);
        goto LABEL_472;
      }
      if ((v233 & 0x100) != 0)
        goto LABEL_473;
LABEL_474:
      if ((v233 & 1) != 0)
        (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v146 + 96))(v146, *(_QWORD *)&v231[48 * v229 + 16], 1, v640, v145, 0);
      v400 = (char *)&v230[12 * v229];
      v403 = *((_DWORD *)v400 + 5);
      v402 = (unsigned int *)(v400 + 20);
      v401 = v403;
      if (v403 != -1)
      {
        v404 = (unsigned __int16)*v637;
        if ((v404 & 1) == 0
          && (int)(((v404 >> 7) & 1)
                 - *((_DWORD *)v658 + 12 * v401 + 6)
                 + *((_DWORD *)v658 + 12 * v401 + 9)
                 + v230[12 * v229 + 6]
                 - v230[12 * v229 + 9]
                 + 2 * (*((_DWORD *)v658 + 12 * v401 + 10) - v230[12 * v229 + 10])) >= 0)
        {
          v405 = *(_QWORD *)&v680[48 * v401 + 16];
          v406 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v146 + 120))(v146, *(_QWORD *)&v633[48 * v229 + 16], v405, v145);
          if (v406)
          {
            v407 = (char *)v683 + 64 * (unint64_t)*v402;
            v692 = v406;
            v693 = v405;
            v694 = v229;
            v408 = *((unsigned int *)v407 + 2);
            v409 = *(_QWORD *)v407;
            if (v408 < *((_DWORD *)v407 + 3))
              goto LABEL_481;
            v425 = v408 + 1;
            v426 = v409 + 24 * v408 > (unint64_t)&v692;
            if (v409 <= (unint64_t)&v692 && v426)
            {
              v427 = (char *)&v692 - v409;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v407, (uint64_t)(v407 + 16), v425, 24);
              v409 = *(_QWORD *)v407;
              v410 = (void **)&v427[*(_QWORD *)v407];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v407, (uint64_t)(v407 + 16), v425, 24);
              v409 = *(_QWORD *)v407;
LABEL_481:
              v410 = &v692;
            }
            v411 = v409 + 24 * *((unsigned int *)v407 + 2);
            v412 = *(_OWORD *)v410;
            *(_QWORD *)(v411 + 16) = v410[2];
            *(_OWORD *)v411 = v412;
            ++*((_DWORD *)v407 + 2);
          }
        }
      }
      v413 = (unsigned __int16)*v637;
      if ((v413 & 0x880) == 0)
      {
        v227 = v632;
        v414 = v633;
        if ((v413 & 0x40) == 0)
          goto LABEL_486;
LABEL_485:
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v146 + 72))(v146, *(_QWORD *)&v414[48 * v229 + 16], v640, v145);
        v413 = (unsigned __int16)*v637;
        goto LABEL_486;
      }
      v414 = v633;
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v146 + 152))(v146, *(_QWORD *)&v633[48 * v229 + 16], v640, v630, LOBYTE(v230[12 * v229 + 8]), (v413 >> 11) & 1, v145);
      v413 = (unsigned __int16)*v637;
      v227 = v632;
      if ((v413 & 0x40) != 0)
        goto LABEL_485;
LABEL_486:
      if ((v413 & 8) != 0)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v146 + 112))(v146, *(_QWORD *)&v414[48 * v229 + 16], v640, v230[12 * v229 + 6] + ((v413 >> 7) & 1) - (v230[12 * v229 + 9] + 2 * v230[12 * v229 + 10]), v145);
      if (++v228 == v623)
        goto LABEL_550;
    }
    v239 = *(_QWORD *)&v231[48 * v229 + 16];
    v240 = v12[31];
    v241 = v12[33].i32[0];
    v618 = v239;
    if (v241)
    {
      v242 = ((v239 >> 4) ^ (v239 >> 9)) & (v241 - 1);
      v243 = *(_QWORD *)(*(_QWORD *)&v240 + 16 * v242);
      if (v239 == v243)
      {
LABEL_332:
        v246 = *(_QWORD **)(*(_QWORD *)&v240 + 16 * v242 + 8);
        goto LABEL_334;
      }
      v244 = 1;
      while (v243 != -4096)
      {
        v245 = v242 + v244++;
        v242 = v245 & (v241 - 1);
        v243 = *(_QWORD *)(*(_QWORD *)&v240 + 16 * v242);
        if (v239 == v243)
          goto LABEL_332;
      }
    }
    v246 = 0;
LABEL_334:
    v247 = (char *)&v230[12 * v229];
    v248 = *((unsigned int *)v247 + 3);
    v249 = v680;
    if (v241)
    {
      v250 = *(_QWORD *)&v680[48 * v248 + 16];
      v251 = v241 - 1;
      v252 = ((v250 >> 4) ^ (v250 >> 9)) & (v241 - 1);
      v253 = *(_QWORD *)(*(_QWORD *)&v240 + 16 * v252);
      if (v250 == v253)
      {
LABEL_339:
        v256 = *(_QWORD **)(*(_QWORD *)&v240 + 16 * v252 + 8);
      }
      else
      {
        v254 = 1;
        while (v253 != -4096)
        {
          v255 = v252 + v254++;
          v252 = v255 & v251;
          v253 = *(_QWORD *)(*(_QWORD *)&v240 + 16 * v252);
          if (v250 == v253)
            goto LABEL_339;
        }
        v256 = 0;
      }
      v257 = (uint64_t)v12;
      v258 = v256 == v246;
    }
    else
    {
      v257 = (uint64_t)v12;
      v258 = v246 == 0;
    }
    v259 = v258;
    v260 = v658;
    v261 = *((unsigned int *)v247 + 4);
    if (v259)
      v262 = *((_DWORD *)v247 + 4);
    else
      v262 = *((_DWORD *)v247 + 3);
    v263 = sub_1C555CC90(v257, v246, *(_QWORD *)&v680[48 * v262 + 16]);
    if (!v263)
    {
      v268 = 0;
      v266 = v261;
      goto LABEL_356;
    }
    if ((v674 & 1) != 0)
    {
      v265 = 16;
      v264 = &v675;
      v266 = v261;
    }
    else
    {
      v264 = v675;
      v265 = v676;
      v266 = v261;
      if (!v676)
      {
        v267 = 0;
        goto LABEL_523;
      }
    }
    v269 = v265 - 1;
    LODWORD(v270) = (v265 - 1) & ((v263 >> 4) ^ (v263 >> 9));
    v271 = (uint64_t **)&v264[2 * v270];
    v272 = *v271;
    if (*v271 == v263)
    {
LABEL_355:
      v268 = *((unsigned int *)v271 + 2);
LABEL_356:
      v273 = *((_DWORD *)v671 + v268);
      v274 = *v263;
      if (!*v263)
        goto LABEL_363;
      if ((v674 & 1) != 0)
      {
        v276 = 16;
        v275 = &v675;
      }
      else
      {
        v275 = v675;
        v276 = v676;
        if (!v676)
        {
          v277 = 0;
          goto LABEL_525;
        }
      }
      v278 = v276 - 1;
      LODWORD(v279) = (v276 - 1) & ((v274 >> 4) ^ (v274 >> 9));
      v280 = &v275[2 * v279];
      v281 = *v280;
      if (*v280 == v274)
      {
LABEL_362:
        LODWORD(v274) = *((_DWORD *)v280 + 2);
LABEL_363:
        v282 = *(_QWORD *)&v249[48 * v273 + 16];
        v283 = *((unsigned int *)v671 + v274);
        v284 = (uint64_t *)((char *)v671 + 4 * (v274 + 1));
        if ((int)v274 + 1 >= v672)
          v284 = &v681;
        v285 = *(unsigned int *)v284;
        if ((v677 & 1) != 0)
        {
          v287 = 16;
          v286 = &v678;
        }
        else
        {
          v286 = v678;
          v287 = v679;
          if (!v679)
          {
            v428 = 0;
            goto LABEL_540;
          }
        }
        v288 = v287 - 1;
        v289 = &v286[4 * (v288 & ((v282 >> 4) ^ (v282 >> 9)))];
        v290 = *v289;
        if (*v289 == v282)
          goto LABEL_372;
        v291 = 1;
        LODWORD(v292) = v288 & ((v282 >> 4) ^ (v282 >> 9));
        while (v290 != -4096)
        {
          v293 = v292 + v291++;
          v292 = v293 & v288;
          v290 = v286[4 * v292];
          if (v290 == v282)
          {
            v289 = &v286[4 * v292];
            goto LABEL_372;
          }
        }
        if ((v677 & 1) != 0)
        {
          v286 = &v678;
          v428 = 16;
        }
        else
        {
          v286 = v678;
          v428 = v679;
        }
LABEL_540:
        v289 = &v286[4 * v428];
        v266 = v261;
LABEL_372:
        v294 = &v678;
        if ((v677 & 1) != 0)
        {
          v295 = 16;
        }
        else
        {
          v294 = v678;
          v295 = v679;
        }
        if (&v294[4 * v295] == v289 || (v296 = *((unsigned int *)v289 + 4), !(_DWORD)v296))
        {
LABEL_384:
          LODWORD(v299) = -1;
        }
        else
        {
          v297 = (unsigned int *)v289[1];
          v298 = 4 * v296;
          while (1)
          {
            v299 = *v297;
            if (v299 >= v283 && v299 <= v285)
              break;
            ++v297;
            v298 -= 4;
            if (!v298)
              goto LABEL_384;
          }
        }
        v301 = &v230[12 * v229];
        v302 = v301[6];
        v303 = v301[9];
        v304 = v301[10];
        v305 = (char *)&v260[12 * v273];
        v306 = *((_DWORD *)v305 + 6);
        v307 = *((_DWORD *)v305 + 9);
        v308 = *((_DWORD *)v305 + 10);
        v309 = *((unsigned __int16 *)v305 + 22);
        v310 = &v665[0][64 * v248];
        v311 = *((_DWORD *)v310 + 4);
        v312 = v311 == 1 && (*((_BYTE *)v670[108] + 48 * **((unsigned int **)v310 + 1) + 8) & 0x10) != 0 || v311 > 1;
        v313 = v260[12 * v248 + 8];
        v314 = &v665[0][64 * v266];
        v315 = *((_DWORD *)v314 + 4);
        if (v315 == 1)
        {
          v316 = (uint64_t)v670[108];
          if ((*(_BYTE *)(v316 + 48 * **((unsigned int **)v314 + 1) + 8) & 0x10) != 0)
          {
            v317 = 1;
LABEL_394:
            v318 = v302 + ((v233 >> 7) & 1) - (v303 + v306) + v307 + 2 * (v308 - v304) - ((v309 >> 7) & 1);
            v319 = v260[12 * v266 + 8];
            BYTE2(v613) = sub_1C555CD6C((uint64_t)v665[0], v316, v299);
            BYTE1(v613) = v319;
            LOBYTE(v613) = v317;
            (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _BOOL8, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v146 + 80))(v146, v618, v640, v630, (v233 >> 2) & 1, v318, v312, v313, v613, v145);
            v233 = (unsigned __int16)*v637;
            v12 = (int32x2_t *)v625;
            v228 = v627;
            v231 = v633;
            goto LABEL_395;
          }
        }
        else
        {
          v316 = (uint64_t)v670[108];
        }
        v317 = v315 > 1;
        goto LABEL_394;
      }
      v417 = 1;
      while (v281 != -4096)
      {
        v418 = v279 + v417++;
        v279 = v418 & v278;
        v281 = v275[2 * v279];
        if (v281 == v274)
        {
          v280 = &v275[2 * v279];
          goto LABEL_362;
        }
      }
      if ((v674 & 1) != 0)
      {
        v275 = &v675;
        v277 = 16;
      }
      else
      {
        v275 = v675;
        v277 = v676;
      }
LABEL_525:
      v280 = &v275[2 * v277];
      goto LABEL_362;
    }
    v415 = 1;
    while (v272 != (uint64_t *)-4096)
    {
      v416 = v270 + v415++;
      v270 = v416 & v269;
      v272 = (uint64_t *)v264[2 * v270];
      if (v272 == v263)
      {
        v271 = (uint64_t **)&v264[2 * v270];
        goto LABEL_355;
      }
    }
    if ((v674 & 1) != 0)
    {
      v264 = &v675;
      v267 = 16;
    }
    else
    {
      v264 = v675;
      v267 = v676;
    }
LABEL_523:
    v271 = (uint64_t **)&v264[2 * v267];
    goto LABEL_355;
  }
LABEL_550:
  v692 = (void *)1;
  v430 = -6144;
  do
  {
    *(void **)((char *)&v697 + v430) = (void *)-4096;
    v430 += 192;
  }
  while (v430);
  v431 = v640;
  if ((_DWORD)v684)
  {
    v432 = 0;
    v433 = (char *)v683;
    v624 = (char *)v683 + 64 * (unint64_t)v684;
    while (1)
    {
      v434 = (char *)v658;
      v435 = (char *)v658 + 48 * (_QWORD)v432;
      v437 = *((_DWORD *)v435 + 9);
      v436 = v435 + 36;
      v439 = (int *)(v436 + 4);
      v438 = *((_DWORD *)v436 + 1);
      v440 = (v437 + 2 * v438);
      if (v437 + 2 * v438)
        break;
LABEL_602:
      v433 += 64;
      v432 = (char *)v432 + 1;
      if (v433 == v624)
        goto LABEL_609;
    }
    v634 = v433;
    v638 = v436;
    v628 = &v680[48 * (_QWORD)v432 + 16];
    v441 = sub_1C555CE08((uint64_t)&v692, (uint64_t)v628, v148, v149);
    v444 = v638;
    v445 = v441;
    v700 = &v702;
    v701 = (void *)0x100000000;
    v703 = 0;
    v446 = *(unsigned int *)(v441 + 8);
    v631 = v432;
    if ((_DWORD)v446 == (_DWORD)v440)
    {
LABEL_582:
      v460 = &v434[48 * (_QWORD)v432];
      v462 = *((_DWORD *)v460 + 6);
      v461 = v460 + 24;
      *(_DWORD *)(v445 + 176) = v462 - (*(_DWORD *)v444 + 2 * *v439) + ((*((unsigned __int16 *)v461 + 10) >> 7) & 1);
      v463 = *((_DWORD *)v634 + 2);
      if (v463)
      {
        v464 = *(uint64_t **)v634;
        v465 = *(_QWORD *)v634 + 24 * v463;
        do
        {
          *(_BYTE *)(v445 + 180) = 1;
          v466 = *((unsigned int *)v464 + 4);
          v467 = (char *)v658 + 48 * v466;
          v468 = *((unsigned __int16 *)v467 + 22);
          v469 = *((_DWORD *)v467 + 6)
               - (*((_DWORD *)v467 + 9)
                + *(_DWORD *)v461)
               + *(_DWORD *)v444
               + ((v468 >> 7) & 1)
               + 2 * (*v439 - *((_DWORD *)v467 + 10));
          if (v469)
          {
            if ((v468 & 0x80) != 0
              && v469 > (int)v440
              && (v680[48 * *((unsigned int *)v660 + (*((_DWORD *)v662 + v466) + 1)) + 8] & 0x10) != 0)
            {
              v469 = v440;
            }
            v470 = *v464;
            v471 = *(_QWORD *)v445 + 32 * (v440 - v469);
            v472 = *(unsigned int *)(v471 + 8);
            if (v472 >= *(unsigned int *)(v471 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v471, v471 + 16, v472 + 1, 8);
              v444 = v638;
              v472 = *(unsigned int *)(v471 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v471 + 8 * v472) = v470;
            ++*(_DWORD *)(v471 + 8);
            v431 = v640;
          }
          v464 += 3;
        }
        while (v464 != (uint64_t *)v465);
      }
      v473 = (uint64_t *)sub_1C555CE08((uint64_t)&v692, (uint64_t)v628, v442, v443);
      LODWORD(v474) = 0;
      v475 = 0;
      v476 = *v473;
      v227 = v632;
      v433 = v634;
      v477 = 1;
      v432 = v631;
      do
      {
        if (*(_DWORD *)(v476 + 32 * v475 + 8))
          v474 = v475;
        else
          v474 = v474;
        if ((v477 & 1) != 0 && (v478 = *v439) != 0)
        {
          *(_DWORD *)(v476 + 32 * v474 + 28) += v478;
          v475 = v475 + 2 * v478 - 1;
        }
        else
        {
          ++*(_DWORD *)(v476 + 32 * v474 + 24);
        }
        v477 = 0;
        ++v475;
      }
      while (v475 != (_DWORD)v440);
      goto LABEL_602;
    }
    if (v446 > v440)
    {
      v620 = v434;
      v447 = *(_QWORD *)v441 + 32 * v446 - 16;
      v448 = 32 * v440 - 32 * v446;
      do
      {
        v449 = *(void **)(v447 - 16);
        if ((void *)v447 != v449)
        {
          free(v449);
          v444 = v638;
        }
        v447 -= 32;
        v448 += 32;
      }
      while (v448);
      v450 = v440;
      v434 = v620;
      goto LABEL_580;
    }
    if (*(_DWORD *)(v441 + 12) < v440)
    {
      if (*(_QWORD *)v441 <= (unint64_t)&v700 && *(_QWORD *)v441 + 32 * v446 > (unint64_t)&v700)
      {
        v622 = v434;
        v479 = (char *)&v700 - *(_QWORD *)v441;
        sub_1C555D498(v441, v440);
        v451 = (void **)&v479[*(_QWORD *)v445];
        v434 = v622;
      }
      else
      {
        sub_1C555D498(v441, v440);
        v451 = &v700;
      }
      v444 = v638;
    }
    else
    {
      v451 = &v700;
    }
    v452 = *(unsigned int *)(v445 + 8);
    v453 = v440 - v446;
    if (v440 == v446)
    {
LABEL_579:
      v450 = v452 + v453;
LABEL_580:
      *(_DWORD *)(v445 + 8) = v450;
      if (v700 != &v702)
      {
        free(v700);
        v444 = v638;
      }
      goto LABEL_582;
    }
    v617 = v440 - v446;
    v621 = v434;
    v454 = (void **)(*(_QWORD *)v445 + 32 * v452);
    v455 = v446 - v440;
    while (1)
    {
      v456 = v454 + 2;
      *v454 = v454 + 2;
      v454[1] = (void *)0x100000000;
      v457 = *((_DWORD *)v451 + 2);
      if (v457)
        v458 = v454 == v451;
      else
        v458 = 1;
      if (v458)
        goto LABEL_574;
      if (v457 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v454, (uint64_t)(v454 + 2), *((unsigned int *)v451 + 2), 8);
        v459 = *((unsigned int *)v451 + 2);
        if (!(_DWORD)v459)
          goto LABEL_573;
        v456 = *v454;
      }
      else
      {
        v459 = 1;
      }
      memcpy(v456, *v451, 8 * v459);
LABEL_573:
      *((_DWORD *)v454 + 2) = v457;
      v444 = v638;
LABEL_574:
      v454[3] = v451[3];
      v454 += 4;
      v193 = __CFADD__(v455++, 1);
      if (v193)
      {
        LODWORD(v452) = *(_DWORD *)(v445 + 8);
        v432 = v631;
        v453 = v617;
        v434 = v621;
        goto LABEL_579;
      }
    }
  }
LABEL_609:
  v480 = (*(unsigned __int16 *)(*(_QWORD *)v227 + 18) >> 4) & 0x3FF;
  if (v480)
    v481 = v480 == 8;
  else
    v481 = 1;
  v482 = &v697;
  if (!v481 && v480 != 255)
  {
    v578 = (int)v692;
    if (v692 <= 1)
    {
      v579 = (uint64_t *)v693;
      v580 = v694;
      if ((_DWORD)v692)
        v581 = &v693;
      else
        v581 = (uint64_t *)v693;
      if ((_DWORD)v692)
        v582 = 32;
      else
        v582 = v694;
      v583 = &v581[24 * v582];
      v584 = (void **)v583;
LABEL_837:
      v585 = v578 == 0;
      if (v578)
        v586 = &v693;
      else
        v586 = v579;
      if (v585)
        v587 = v580;
      else
        v587 = 32;
      v588 = &v586[24 * v587];
LABEL_844:
      while (v583 != v588)
      {
        if (*((_BYTE *)v583 + 188))
          v589 = *((_DWORD *)v583 + 46) == 0;
        else
          v589 = 0;
        if (v589)
        {
          v590 = *((unsigned int *)v583 + 4);
          if ((_DWORD)v590)
          {
            v591 = 0;
            v592 = v583[1];
            v593 = (_DWORD *)(v592 + 24);
            v594 = -1;
            do
            {
              if ((*(_BYTE *)v593 & 1) != 0)
              {
                if (v594 == -1)
                {
                  v594 = v591;
                }
                else
                {
                  --*(_DWORD *)(v592 + 32 * v594 + 24);
                  ++*v593;
                  v594 = -1;
                }
              }
              ++v591;
              v593 += 8;
            }
            while (v590 != v591);
          }
        }
        v595 = (void **)(v583 + 24);
        v583 = (uint64_t *)v584;
        if (v595 != v584)
        {
          v583 = (uint64_t *)v595;
          while ((*v583 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v583 += 24;
            if (v583 == (uint64_t *)v584)
            {
              v583 = (uint64_t *)v584;
              goto LABEL_844;
            }
          }
        }
      }
      goto LABEL_614;
    }
    v584 = &v697;
    v579 = &v693;
    if ((v692 & 1) == 0)
    {
      v579 = (uint64_t *)v693;
      if (!v694)
      {
        v578 = 0;
        v580 = 0;
        v583 = (uint64_t *)v693;
        v584 = (void **)v693;
        goto LABEL_837;
      }
      v584 = (void **)(v693 + 192 * v694);
    }
    v578 = v692 & 1;
    while ((*v579 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v579 += 24;
      if (v579 == (uint64_t *)v584)
      {
        v579 = (uint64_t *)v584;
        break;
      }
    }
    v583 = v579;
    v579 = (uint64_t *)v693;
    v580 = v694;
    goto LABEL_837;
  }
LABEL_614:
  v483 = (char)v692;
  if (v692 <= 1)
  {
    v484 = (uint64_t *)v693;
    v485 = v694;
    if ((_DWORD)v692)
      v486 = &v693;
    else
      v486 = (uint64_t *)v693;
    if ((_DWORD)v692)
      v487 = 32;
    else
      v487 = v694;
    v488 = &v486[24 * v487];
    v489 = (int)v692;
    v482 = (void **)v488;
    goto LABEL_630;
  }
  v484 = &v693;
  if ((v692 & 1) != 0)
  {
LABEL_625:
    v489 = v692 & 1;
    while ((*v484 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v484 += 24;
      if (v484 == (uint64_t *)v482)
      {
        v484 = (uint64_t *)v482;
        break;
      }
    }
    v488 = v484;
    v484 = (uint64_t *)v693;
    v485 = v694;
    goto LABEL_630;
  }
  v484 = (uint64_t *)v693;
  v489 = v694;
  if (v694)
  {
    v482 = (void **)(v693 + 192 * v694);
    goto LABEL_625;
  }
  v485 = 0;
  v488 = (uint64_t *)v693;
  v482 = (void **)v693;
LABEL_630:
  if (v489)
  {
    v484 = &v693;
    v490 = 32;
  }
  else
  {
    v490 = v485;
  }
  v629 = &v484[24 * v490];
  if (v488 != v629)
  {
    v635 = (uint64_t)v227 + 128;
    v626 = v482;
    while (1)
    {
      v491 = (llvm::MachineBasicBlock *)*v488;
      if (*((_BYTE *)v488 + 188))
      {
        v700 = &v702;
        v701 = (void *)0x800000000;
        v492 = *((unsigned int *)v488 + 4);
        if ((_DWORD)v492)
        {
          v493 = 0;
          v494 = v488[1];
          v639 = v494 + 32 * v492;
          while (1)
          {
            v495 = *(const void **)v494;
            v496 = *(unsigned int *)(v494 + 8);
            v497 = v701;
            v498 = v701 + v496;
            if (v498 > HIDWORD(v701))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v700, (uint64_t)&v702, v498, 8);
              v497 = v701;
              if (!(_DWORD)v496)
                goto LABEL_640;
            }
            else if (!(_DWORD)v496)
            {
              goto LABEL_640;
            }
            memcpy((char *)v700 + 8 * v497, v495, 8 * v496);
            v497 = v701;
LABEL_640:
            LODWORD(v701) = v497 + v496;
            if (*(_DWORD *)(v494 + 24) || *(_DWORD *)(v494 + 28))
            {
              v499 = *((_QWORD *)v227 + 39);
              if (v499)
                *((_QWORD *)v227 + 39) = *(_QWORD *)v499;
              else
                v499 = sub_1C484358C(v635, 232, 3);
              *(_QWORD *)v499 = 0;
              *(_QWORD *)(v499 + 8) = 0;
              *(_QWORD *)(v499 + 16) = 0;
              *(_DWORD *)(v499 + 24) = -1;
              *(_QWORD *)(v499 + 48) = (v499 + 48) | 4;
              *(_QWORD *)(v499 + 56) = v499 + 48;
              *(_BYTE *)(v499 + 144) = 0;
              *(_OWORD *)(v499 + 64) = 0u;
              *(_OWORD *)(v499 + 80) = 0u;
              *(_OWORD *)(v499 + 96) = 0u;
              *(_OWORD *)(v499 + 112) = 0u;
              *(_OWORD *)(v499 + 121) = 0u;
              *(_QWORD *)(v499 + 160) = 0;
              *(_QWORD *)(v499 + 168) = 0;
              *(_QWORD *)(v499 + 152) = 0;
              *(_BYTE *)(v499 + 176) = 0;
              *(_DWORD *)(v499 + 187) = 0;
              *(_QWORD *)(v499 + 180) = 0;
              *(_QWORD *)(v499 + 192) = 0;
              *(_DWORD *)(v499 + 199) = 0;
              *(_QWORD *)(v499 + 216) = 0;
              *(_QWORD *)(v499 + 224) = 0;
              *(_QWORD *)(v499 + 208) = 0;
              *(_QWORD *)(v499 + 32) = v227;
              *(_QWORD *)(v499 + 40) = v499;
              sub_1C555D610(*((_OWORD **)v491 + 19), *((_OWORD **)v491 + 20), (_QWORD *)v499);
              if (v493)
              {
                llvm::MachineBasicBlock::addSuccessor(v493, (_QWORD *)v499, -1);
              }
              else
              {
                v500 = (char *)*((_QWORD *)v491 + 8);
                v501 = (char *)*((_QWORD *)v491 + 9);
                v705 = v707;
                v706 = 0x400000000;
                v502 = v501 - v500;
                if ((unint64_t)(v501 - v500) >= 0x21)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, v502 >> 3, 8);
                  v503 = v706;
                  v505 = (llvm::MachineBasicBlock **)v705;
                  v504 = v706;
                }
                else
                {
                  v503 = 0;
                  v504 = 0;
                  v505 = (llvm::MachineBasicBlock **)v707;
                }
                if (v500 != v501)
                {
                  v506 = &v505[v503];
                  do
                  {
                    v507 = *(llvm::MachineBasicBlock **)v500;
                    v500 += 8;
                    *v506++ = v507;
                  }
                  while (v500 != v501);
                  v505 = (llvm::MachineBasicBlock **)v705;
                }
                v508 = v504 + ((unint64_t)v502 >> 3);
                LODWORD(v706) = v508;
                v227 = v632;
                v431 = v640;
                if ((_DWORD)v508)
                {
                  v509 = 8 * v508;
                  do
                  {
                    v510 = *v505++;
                    llvm::MachineBasicBlock::replaceSuccessor(v510, v491, (llvm::MachineBasicBlock *)v499);
                    v509 -= 8;
                  }
                  while (v509);
                  v505 = (llvm::MachineBasicBlock **)v705;
                }
                if (v505 != (llvm::MachineBasicBlock **)v707)
                  free(v505);
              }
              llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v636, v499);
              v511 = *(_OWORD **)v491;
              *(_QWORD *)v499 = *(_QWORD *)v491;
              *(_QWORD *)(v499 + 8) = v491;
              *((_QWORD *)v511 + 1) = v499;
              *(_QWORD *)v491 = v499;
              if ((_DWORD)v701)
              {
                v512 = (uint64_t *)v700;
                v513 = 8 * v701;
                do
                {
                  v514 = *v512++;
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v146 + 128))(v146, v514, v499, v145);
                  v513 -= 8;
                }
                while (v513);
              }
              LODWORD(v701) = 0;
              if (*(_DWORD *)(v494 + 28))
              {
                v515 = 0;
                do
                {
                  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v146 + 104))(v146, v499, v431, 1, v145);
                  ++v515;
                }
                while (v515 != *(_DWORD *)(v494 + 28));
              }
              v516 = *(unsigned int *)(v494 + 24);
              if ((_DWORD)v516)
                (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v146 + 96))(v146, v499, v516, v431, v145, 1);
            }
            else
            {
              v499 = (unint64_t)v493;
            }
            v494 += 32;
            v493 = (_QWORD *)v499;
            if (v494 == v639)
              goto LABEL_683;
          }
        }
        v499 = 0;
LABEL_683:
        llvm::MachineBasicBlock::addSuccessor((_QWORD *)v499, v491, -1);
        if (v700 != &v702)
          free(v700);
      }
      else
      {
        v517 = *((unsigned int *)v488 + 4);
        if ((_DWORD)v517)
        {
          v518 = v488[1];
          v519 = v518 + 32 * v517;
          do
          {
            if (*(_DWORD *)(v518 + 28))
            {
              v520 = 0;
              do
              {
                (*(void (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v146 + 104))(v146, v491, v431, 1, v145);
                ++v520;
              }
              while (v520 != *(_DWORD *)(v518 + 28));
            }
            v521 = *(unsigned int *)(v518 + 24);
            if ((_DWORD)v521)
              (*(void (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v146 + 96))(v146, v491, v521, v431, v145, 1);
            v518 += 32;
          }
          while (v518 != v519);
        }
      }
      v522 = v488 + 24;
      v488 = (uint64_t *)v626;
      v227 = v632;
      if (v522 != (uint64_t *)v626)
      {
        v488 = v522;
        while ((*v488 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v488 += 24;
          if (v488 == (uint64_t *)v626)
          {
            v488 = (uint64_t *)v626;
            break;
          }
        }
      }
      if (v488 == v629)
      {
        v483 = (char)v692;
        v485 = v694;
        v489 = v692 & 1;
        break;
      }
    }
  }
  if (v489 | v485)
  {
    v523 = v489 ? &v693 : (uint64_t *)v693;
    v524 = v489 ? 32 : v485;
    if (v524)
    {
      v525 = &v523[24 * v524];
      do
      {
        if ((*v523 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v526 = (uint64_t *)v523[1];
          v527 = *((unsigned int *)v523 + 4);
          if ((_DWORD)v527)
          {
            v528 = 4 * v527;
            do
            {
              v529 = (char *)v526[v528 - 4];
              if (&v526[v528 - 2] != (uint64_t *)v529)
                free(v529);
              v528 -= 4;
            }
            while (v528 * 8);
            v526 = (uint64_t *)v523[1];
          }
          if (v526 != v523 + 3)
            free(v526);
        }
        v523 += 24;
      }
      while (v523 != v525);
      v483 = (char)v692;
      v227 = v632;
    }
  }
  if ((v483 & 1) == 0)
    MEMORY[0x1CAA32FB4](v693, 8);
  v705 = v707;
  v706 = 0xA00000000;
  v692 = (void *)1;
  for (k = 8; k != 520; k += 16)
    *(void **)((char *)&v692 + k) = (void *)-4096;
  v700 = v704;
  v701 = v704;
  v702 = 32;
  LODWORD(v703) = 0;
  v531 = *((_QWORD *)v227 + 41);
  if ((uint64_t *)v531 != v636)
  {
    v532 = (uint64_t *)v699;
    while (1)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v700, v531);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v145 + 264))(v145, v531, 0);
      if (v531 + 48 == (*(_QWORD *)(v531 + 48) & 0xFFFFFFFFFFFFFFF8))
      {
        v533 = *(llvm::MachineBasicBlock ***)(v531 + 88);
        if (((*(_QWORD *)(v531 + 96) - (_QWORD)v533) & 0x7FFFFFFF8) == 8)
          break;
      }
LABEL_759:
      v531 = *(_QWORD *)(v531 + 8);
      if ((uint64_t *)v531 == v636)
        goto LABEL_765;
    }
    v534 = *v533;
    v536 = *(char **)(v531 + 64);
    v535 = *(char **)(v531 + 72);
    v697 = v699;
    v698 = 0x400000000;
    v537 = v535 - v536;
    if ((unint64_t)(v535 - v536) >= 0x21)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v697, (uint64_t)v699, v537 >> 3, 8);
      v538 = v698;
      v532 = (uint64_t *)v697;
      v539 = v698;
    }
    else
    {
      v538 = 0;
      v539 = 0;
    }
    if (v536 != v535)
    {
      v540 = &v532[v538];
      do
      {
        v541 = *(_QWORD *)v536;
        v536 += 8;
        *v540++ = v541;
      }
      while (v536 != v535);
      v532 = (uint64_t *)v697;
    }
    v542 = (unint64_t)v537 >> 3;
    v543 = *(unsigned __int8 *)(v531 + 185);
    v544 = *(_BYTE *)(v531 + 185) != 0;
    v545 = (v539 + v542);
    LODWORD(v698) = v545;
    if ((_DWORD)v545)
    {
      v546 = 8 * v545 - 8;
      do
      {
        if (*v532 == v531)
        {
          v532 = (uint64_t *)v697;
          goto LABEL_756;
        }
        v547 = sub_1C477672C((uint64_t)&v700, *v532);
        if (v701 == v700)
          v548 = (uint64_t *)((char *)&v702 + 4);
        else
          v548 = &v702;
        v549 = v547 == (_QWORD *)((char *)v701 + 8 * *(unsigned int *)v548) || v546 == 0;
        v546 -= 8;
        v544 |= v547 == (_QWORD *)((char *)v701 + 8 * *(unsigned int *)v548);
        ++v532;
      }
      while (!v549);
      v532 = (uint64_t *)v697;
      if ((v544 & 1) != 0)
        goto LABEL_756;
      if ((_DWORD)v698)
      {
        v550 = 8 * v698;
        do
        {
          v551 = (llvm::MachineBasicBlock *)*v532++;
          llvm::MachineBasicBlock::replaceSuccessor(v551, (llvm::MachineBasicBlock *)v531, v534);
          v550 -= 8;
        }
        while (v550);
      }
    }
    else if (v543)
    {
LABEL_756:
      if (v532 != (uint64_t *)v699)
        free(v532);
      v532 = (uint64_t *)v699;
      goto LABEL_759;
    }
    sub_1C555D610(*(_OWORD **)(v531 + 152), *(_OWORD **)(v531 + 160), v534);
    llvm::MachineBasicBlock::removeSuccessor((llvm::MachineBasicBlock *)v531, v534, 0);
    v552 = v706;
    if (v706 >= (unint64_t)HIDWORD(v706))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, v706 + 1, 8);
      v552 = v706;
    }
    v532 = (uint64_t *)v699;
    *(_QWORD *)&v705[8 * v552] = v531;
    LODWORD(v706) = v706 + 1;
    v652 = 0;
    v553 = sub_1C555D7DC((uint64_t)&v692, v531, &v652);
    v554 = v652;
    if ((v553 & 1) != 0)
    {
LABEL_753:
      v554[1] = (uint64_t)v534;
      if (v697 != v699)
        free(v697);
      goto LABEL_759;
    }
    if ((v692 & 1) != 0)
      v555 = 32;
    else
      v555 = v694;
    if (4 * (v692 >> 1) + 4 >= 3 * v555)
    {
      v555 *= 2;
    }
    else if (v555 + ~(v692 >> 1) - HIDWORD(v692) > v555 >> 3)
    {
LABEL_750:
      LODWORD(v692) = (_DWORD)v692 + 2;
      if (*v554 != -4096)
        --HIDWORD(v692);
      *v554 = v531;
      v554[1] = 0;
      goto LABEL_753;
    }
    sub_1C555D880((uint64_t)&v692, v555);
    v652 = 0;
    sub_1C555D7DC((uint64_t)&v692, v531, &v652);
    v554 = v652;
    goto LABEL_750;
  }
LABEL_765:
  v641 = v684;
  if ((_DWORD)v684)
  {
    v556 = 0;
    do
    {
      v557 = (char *)v683 + 64 * v556;
      v558 = *((_DWORD *)v557 + 2);
      if (v558)
      {
        v559 = *(_QWORD **)v557;
        v560 = *(_QWORD *)v557 + 24 * v558;
        do
        {
          v561 = *v559;
          v562 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v146 + 136))(v146, *v559);
          v563 = sub_1C555D740((uint64_t)&v692, v562);
          if ((v692 & 1) != 0)
            v564 = &v693;
          else
            v564 = (uint64_t *)v693;
          v565 = v694;
          if ((v692 & 1) != 0)
            v565 = 32;
          v566 = &v564[2 * v565];
          while (v566 != v563)
          {
            v562 = v563[1];
            v563 = sub_1C555D740((uint64_t)&v692, v562);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v146 + 128))(v146, v561, v562, v145);
          if (((*(_QWORD *)(v562 + 72) - *(_QWORD *)(v562 + 64)) & 0x7FFFFFFF8) == 8)
          {
            v567 = *(_QWORD *)(v562 + 16);
            if (!v567 || (*(_WORD *)(v567 + 18) & 0x7FFF) == 0)
              *(_BYTE *)(v562 + 184) = 1;
          }
          v559 += 3;
        }
        while (v559 != (_QWORD *)v560);
      }
      ++v556;
    }
    while (v556 != v641);
  }
  if ((_DWORD)v706)
  {
    v568 = (uint64_t **)v705;
    v569 = 8 * v706;
    do
    {
      v570 = *v568++;
      v571 = v570[4];
      v572 = v571 + 320;
      *(_QWORD *)(*(_QWORD *)(v571 + 104) + 8 * *((unsigned int *)v570 + 6)) = 0;
      *((_DWORD *)v570 + 6) = -1;
      v573 = *v570;
      v574 = (_QWORD *)v570[1];
      *v574 = *v570;
      *(_QWORD *)(v573 + 8) = v574;
      *v570 = 0;
      v570[1] = 0;
      llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v572, (llvm::MachineBasicBlock *)v570);
      v569 -= 8;
    }
    while (v569);
  }
  llvm::MachineFunction::RenumberBlocks(v632, 0);
  if (v701 != v700)
    free(v701);
  if ((v692 & 1) == 0)
    MEMORY[0x1CAA32FB4](v693, 8);
  if (v705 != v707)
    free(v705);
  v575 = (char *)v683;
  if ((_DWORD)v684)
  {
    v576 = (unint64_t)v684 << 6;
    do
    {
      v577 = *(char **)&v575[v576 - 64];
      if (&v575[v576 - 48] != v577)
        free(v577);
      v576 -= 64;
    }
    while (v576);
    v575 = (char *)v683;
  }
  if (v575 != v685)
    free(v575);
  if (v687[0] != v688)
    free(v687[0]);
  if (v689[0] != v690)
    free(v689[0]);
  if (*((_QWORD *)&v648 + 1) != (_QWORD)v648)
    free(*((void **)&v648 + 1));
  if (v662 != v663)
    free(v662);
  if (v660 != &v661)
    free(v660);
  if (v658 != &v659)
    free(v658);
  if (v654 != &v656)
    free(v654);
  if (v667 != v669)
    free(v667);
  sub_1C4AA315C(v665);
  sub_1C4AA31F0(&v680);
  sub_1C4AA326C((uint64_t)&v677);
  if ((v674 & 1) == 0)
    MEMORY[0x1CAA32FB4](v675, 8);
  if (v671 != v673)
    free(v671);
  return 1;
}

void sub_1C5559D20()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5559D34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816F2D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5559D68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E816F2D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5559D84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 248) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248));
}

llvm::raw_ostream *sub_1C5559D98(llvm::raw_ostream **a1, uint64_t a2)
{
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  unint64_t v10;
  std::string *p_p;
  size_t size;
  _DWORD *v13;
  char v14;
  int v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  _QWORD *v18;
  std::string *v19;
  size_t v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *result;
  _BYTE *v24;
  std::string __p;

  v4 = *(_BYTE *)(a2 + 23);
  v5 = v4;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 & 0x7F;
  if (v5 >= 0)
    v6 = v7;
  v8 = *a1;
  v9 = *((_QWORD *)*a1 + 4);
  v10 = *((_QWORD *)*a1 + 3) - v9;
  if (v6)
  {
    if (v10 > 8)
    {
      *(_BYTE *)(v9 + 8) = 34;
      *(_QWORD *)v9 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v8 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "digraph \"", 9uLL);
    }
    llvm::DOT::EscapeString((char *)a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v8, (const char *)p_p, size);
    v13 = (_DWORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v13 > 3uLL)
    {
      *v13 = 175841314;
      *((_QWORD *)v8 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v8, "\" {\n", 4uLL);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (v10 > 0x11)
  {
    *(_WORD *)(v9 + 16) = 2683;
    *(_OWORD *)v9 = *(_OWORD *)"digraph unnamed {\n";
    *((_QWORD *)v8 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(*a1, "digraph unnamed {\n", 0x12uLL);
  }
  v14 = *(_BYTE *)(a2 + 23);
  v15 = v14;
  v16 = v14 & 0x7F;
  if (v15 < 0)
    v16 = *(_QWORD *)(a2 + 8);
  if (v16)
  {
    v17 = *a1;
    v18 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v18 > 7uLL)
    {
      *v18 = 0x223D6C6562616C09;
      *((_QWORD *)v17 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "\tlabel=\"", 8uLL);
    }
    llvm::DOT::EscapeString((char *)a2, &__p);
    v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F
        : __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v17, (const char *)v19, v20);
    v21 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v21) > 2)
    {
      *(_BYTE *)(v21 + 2) = 10;
      *(_WORD *)v21 = 15138;
      *((_QWORD *)v17 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v17, "\";\n", 3uLL);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v22 = *a1;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(v22, (const char *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result = *a1;
  v24 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v24)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v24 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

void sub_1C555A050(uint64_t *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  _QWORD *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  size_t v11;
  size_t v12;
  const char *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  unsigned int **v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  llvm::raw_ostream *v35;
  _WORD *v36;
  const char *v37;
  int v38;
  llvm::raw_ostream *v39;
  void *v40;
  void *v41;
  unint64_t v42;
  _WORD *v43;
  llvm::raw_ostream *v44;
  std::string *p_p;
  size_t size;
  uint64_t v47;
  void *v48;
  std::string *v49;
  size_t v50;
  unsigned int **v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v59;
  llvm::raw_ostream *v61;
  uint64_t *v62;
  _WORD *v63;
  unint64_t v64;
  const char *v65;
  size_t v66;
  llvm::raw_ostream *v67;
  uint64_t v68;
  unsigned int **v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int *v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v83;
  int i;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  _BOOL4 v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  _BOOL4 v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[3];
  BOOL v102;
  _QWORD v103[3];
  BOOL v104;
  std::string __p;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  int v110;
  void **v111;
  void *v112[2];
  uint64_t v113;
  void *v114[2];
  char v115;

  sub_1C6277FD0((char *)v114, a2, a1[1]);
  v4 = (llvm::raw_ostream *)*a1;
  v5 = *(_QWORD *)(*a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v5) > 4)
  {
    *(_BYTE *)(v5 + 4) = 101;
    *(_DWORD *)v5 = 1685016073;
    *((_QWORD *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, a2, 3, 0, 0);
  v6 = (_QWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 7uLL)
  {
    *v6 = 0x3D65706168735B20;
    *((_QWORD *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [shape=", 8uLL);
  }
  v7 = (llvm::raw_ostream *)*a1;
  v8 = *(_QWORD *)(*a1 + 32);
  v9 = *(_QWORD *)(*a1 + 24) - v8;
  if (*((_BYTE *)a1 + 16))
  {
    if (v9 <= 4)
    {
      v10 = "none,";
      v11 = 5;
LABEL_10:
      llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_11;
    }
    *(_BYTE *)(v8 + 4) = 44;
    *(_DWORD *)v8 = 1701736302;
    v99 = *((_QWORD *)v7 + 4) + 5;
  }
  else
  {
    if (v9 <= 6)
    {
      v10 = "record,";
      v11 = 7;
      goto LABEL_10;
    }
    *(_DWORD *)(v8 + 3) = 744780399;
    *(_DWORD *)v8 = 1868785010;
    v99 = *((_QWORD *)v7 + 4) + 7;
  }
  *((_QWORD *)v7 + 4) = v99;
LABEL_11:
  if (v115 >= 0)
    v12 = v115 & 0x7F;
  else
    v12 = (size_t)v114[1];
  if (v12)
  {
    if (v115 >= 0)
      v13 = (const char *)v114;
    else
      v13 = (const char *)v114[0];
    v14 = llvm::raw_ostream::write((llvm::raw_ostream *)*a1, v13, v12);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if (*((_BYTE **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, ",", 1uLL);
    }
    else
    {
      *v15 = 44;
      ++*((_QWORD *)v14 + 4);
    }
  }
  v16 = (llvm::raw_ostream *)*a1;
  v17 = *(_QWORD *)(*a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 15724;
    *(_DWORD *)v17 = 1700946284;
    *((_QWORD *)v16 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v16, "label=", 6uLL);
  }
  if (*((_BYTE *)a1 + 16))
  {
    v18 = *(unsigned int ***)a2;
    v19 = *(unsigned int *)(*(_QWORD *)a2 + 8);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = *v18;
      v22 = (uint64_t)&(*v18)[v19];
      v23 = v18[108];
      v24 = 4 * v19;
      while (1)
      {
        v25 = v21[v20 / 4];
        v26 = &v23[12 * v25];
        if (v26 != (unsigned int *)a2 && *(_QWORD *)(a2 + 16) == *(_QWORD *)&v23[12 * v25 + 4])
          break;
        v20 += 4;
        if (v24 == v20)
        {
          v26 = 0;
          break;
        }
      }
      v27 = v26 != 0;
      v28 = *(_DWORD *)(a2 + 32);
      do
      {
        while (1)
        {
          v29 = *v21;
          if (&v23[12 * *v21] != (unsigned int *)a2)
            break;
          if (++v21 == (unsigned int *)v22)
            goto LABEL_38;
        }
        ++v21;
        v30 = *(_QWORD *)(a2 + 16) == *(_QWORD *)&v23[12 * v29 + 4] || v21 == (unsigned int *)v22;
      }
      while (!v30);
LABEL_38:
      if (v28)
        goto LABEL_39;
    }
    else
    {
      v27 = 0;
      v28 = *(_DWORD *)(a2 + 32);
      if (v28)
      {
LABEL_39:
        v31 = 0;
        v32 = *(_QWORD *)(a2 + 24);
        v33 = v32 + 4 * v28;
        do
        {
          v32 += 4 * !v27;
          v28 = v31 + 1;
          v34 = v32 != v33;
          if (v32 == v33)
            break;
          v27 = 0;
          v30 = v31++ == 63;
        }
        while (!v30);
        goto LABEL_48;
      }
    }
    v34 = 0;
LABEL_48:
    if (v28 <= 1)
      v38 = 1;
    else
      v38 = v28;
    v39 = (llvm::raw_ostream *)*a1;
    v40 = *(void **)(*a1 + 32);
    if (*(_QWORD *)(*a1 + 24) - (_QWORD)v40 > 0x30uLL)
    {
      qmemcpy(v40, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      v41 = (void *)(*((_QWORD *)v39 + 4) + 49);
      *((_QWORD *)v39 + 4) = v41;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      v41 = (void *)*((_QWORD *)v39 + 4);
    }
    v42 = (v38 + v34);
    if (*((_QWORD *)v39 + 3) - (_QWORD)v41 > 0x2EuLL)
    {
      qmemcpy(v41, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((_QWORD *)v39 + 4) += 47;
    }
    else
    {
      llvm::raw_ostream::write(v39, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    sub_1C5E21910(v39, v42, 0, 0, 0);
    v43 = (_WORD *)*((_QWORD *)v39 + 4);
    if (*((_QWORD *)v39 + 3) - (_QWORD)v43 <= 1uLL)
    {
      v37 = "\">";
      v35 = v39;
      goto LABEL_57;
    }
    *v43 = 15906;
    *((_QWORD *)v39 + 4) += 2;
    goto LABEL_58;
  }
  v35 = (llvm::raw_ostream *)*a1;
  v36 = *(_WORD **)(*a1 + 32);
  if (*(_QWORD *)(*a1 + 24) - (_QWORD)v36 <= 1uLL)
  {
    v37 = "\"{";
LABEL_57:
    llvm::raw_ostream::write(v35, v37, 2uLL);
    goto LABEL_58;
  }
  *v36 = 31522;
  *((_QWORD *)v35 + 4) += 2;
LABEL_58:
  v44 = (llvm::raw_ostream *)*a1;
  if (*((_BYTE *)a1 + 16))
  {
    sub_1C555A9E0((char *)&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v44, (const char *)p_p, size);
    v47 = *((_QWORD *)v44 + 4);
    if ((unint64_t)(*((_QWORD *)v44 + 3) - v47) > 4)
    {
      *(_BYTE *)(v47 + 4) = 62;
      *(_DWORD *)v47 = 1685335868;
      *((_QWORD *)v44 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v44, "</td>", 5uLL);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v48 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_79:
      operator delete(v48);
    }
  }
  else
  {
    sub_1C555A9E0((char *)v112, a2);
    llvm::DOT::EscapeString((char *)v112, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &__p;
    else
      v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v50 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v44, (const char *)v49, v50);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v113) < 0)
    {
      v48 = v112[0];
      goto LABEL_79;
    }
  }
  v112[0] = 0;
  v112[1] = 0;
  v113 = 0;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  v108 = 0;
  v109 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  v111 = v112;
  v110 = 0;
  v106 = 0;
  v107 = 0;
  __p.__r_.__value_.__r.__words[2] = 0;
  v51 = *(unsigned int ***)a2;
  v52 = *(unsigned int *)(*(_QWORD *)a2 + 8);
  if ((_DWORD)v52)
  {
    v53 = *v51;
    v54 = (uint64_t)&(*v51)[v52];
    v55 = v51[108];
    v56 = v53;
    do
    {
      while (1)
      {
        v57 = *v56;
        if (&v55[12 * *v56] != (unsigned int *)a2)
          break;
        if (++v56 == (unsigned int *)v54)
          goto LABEL_90;
      }
      ++v56;
    }
    while (*(_QWORD *)(a2 + 16) != *(_QWORD *)&v55[12 * v57 + 4] && v56 != (unsigned int *)v54);
    do
    {
LABEL_90:
      while (1)
      {
        v59 = *v53;
        if (&v55[12 * *v53] != (unsigned int *)a2)
          break;
        if (++v53 == (unsigned int *)v54)
          goto LABEL_98;
      }
      ++v53;
    }
    while (*(_QWORD *)(a2 + 16) != *(_QWORD *)&v55[12 * v59 + 4] && v53 != (unsigned int *)v54);
  }
LABEL_98:
  if (*((_BYTE *)a1 + 16))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "</tr><tr>", 9uLL);
    v61 = (llvm::raw_ostream *)*a1;
    v62 = (uint64_t *)(*a1 + 32);
    v63 = (_WORD *)*v62;
    v64 = *(_QWORD *)(*a1 + 24) - *v62;
    if (*((_BYTE *)a1 + 16))
    {
      if (v64 <= 0xD)
      {
        v65 = "</tr></table>>";
        v66 = 14;
LABEL_105:
        llvm::raw_ostream::write(v61, v65, v66);
        goto LABEL_106;
      }
      qmemcpy(v63, "</tr></table>>", 14);
      v100 = *v62 + 14;
      goto LABEL_171;
    }
  }
  else
  {
    v61 = (llvm::raw_ostream *)*a1;
    v62 = (uint64_t *)(*a1 + 32);
    v63 = (_WORD *)*v62;
    v64 = *(_QWORD *)(*a1 + 24) - *v62;
  }
  if (v64 <= 1)
  {
    v65 = "}\"";
    v66 = 2;
    goto LABEL_105;
  }
  *v63 = 8829;
  v100 = *v62 + 2;
LABEL_171:
  *v62 = v100;
LABEL_106:
  v67 = (llvm::raw_ostream *)*a1;
  v68 = *(_QWORD *)(*a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v68) > 2)
  {
    *(_BYTE *)(v68 + 2) = 10;
    *(_WORD *)v68 = 15197;
    *((_QWORD *)v67 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v67, "];\n", 3uLL);
  }
  v69 = *(unsigned int ***)a2;
  v70 = *(_QWORD *)(a2 + 24);
  v71 = *(unsigned int *)(*(_QWORD *)a2 + 8);
  if ((_DWORD)v71)
  {
    v72 = 0;
    v73 = *v69;
    v74 = (uint64_t)&(*v69)[v71];
    v75 = v69[108];
    v76 = 4 * v71;
    while (1)
    {
      v77 = v73[v72 / 4];
      v78 = &v75[12 * v77];
      if (v78 != (unsigned int *)a2 && *(_QWORD *)(a2 + 16) == *(_QWORD *)&v75[12 * v77 + 4])
        break;
      v72 += 4;
      if (v76 == v72)
      {
        v78 = 0;
        break;
      }
    }
    v79 = v78 != 0;
    v80 = *(_DWORD *)(a2 + 32);
    do
    {
      while (1)
      {
        v81 = *v73;
        if (&v75[12 * *v73] != (unsigned int *)a2)
          break;
        if (++v73 == (unsigned int *)v74)
          goto LABEL_125;
      }
      ++v73;
    }
    while (*(_QWORD *)(a2 + 16) != *(_QWORD *)&v75[12 * v81 + 4] && v73 != (unsigned int *)v74);
  }
  else
  {
    v79 = 0;
    v80 = *(_DWORD *)(a2 + 32);
  }
LABEL_125:
  v83 = v70 + 4 * v80;
  if (v80)
  {
    for (i = 0; i != 64; ++i)
    {
      if (v79)
      {
        v85 = *((unsigned int *)v69 + 2);
        if ((_DWORD)v85)
        {
          v86 = *v69;
          v87 = (uint64_t)&(*v69)[v85];
          v88 = v69[108];
          do
          {
            while (1)
            {
              v89 = *v86;
              if (&v88[12 * *v86] != (unsigned int *)a2)
                break;
              if (++v86 == (unsigned int *)v87)
                goto LABEL_138;
            }
            ++v86;
          }
          while (*(_QWORD *)(a2 + 16) != *(_QWORD *)&v88[12 * v89 + 4] && v86 != (unsigned int *)v87);
        }
      }
LABEL_138:
      v91 = !v79;
      v103[0] = v70;
      v103[1] = v69;
      v103[2] = a2;
      v104 = v79;
      sub_1C555AB88((llvm::raw_ostream **)a1, a2, (uint64_t)v103);
      v79 = 0;
      v70 += 4 * v91;
      if (v70 == v83)
        break;
    }
  }
  for (; v70 != v83; v70 += 4 * v98)
  {
    if (v79)
    {
      v92 = *((unsigned int *)v69 + 2);
      if ((_DWORD)v92)
      {
        v93 = *v69;
        v94 = (uint64_t)&(*v69)[v92];
        v95 = v69[108];
        do
        {
          while (1)
          {
            v96 = *v93;
            if (&v95[12 * *v93] != (unsigned int *)a2)
              break;
            if (++v93 == (unsigned int *)v94)
              goto LABEL_152;
          }
          ++v93;
        }
        while (*(_QWORD *)(a2 + 16) != *(_QWORD *)&v95[12 * v96 + 4] && v93 != (unsigned int *)v94);
      }
    }
LABEL_152:
    v98 = !v79;
    v101[0] = v70;
    v101[1] = v69;
    v101[2] = a2;
    v102 = v79;
    sub_1C555AB88((llvm::raw_ostream **)a1, a2, (uint64_t)v101);
    v79 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v110 == 1 && __p.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  if (SHIBYTE(v113) < 0)
    operator delete(v112[0]);
  if (v115 < 0)
    operator delete(v114[0]);
}

void sub_1C555A9E0(char *a1, uint64_t a2)
{
  uint64_t v3;
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  char *v18;
  uint64_t ***v19;
  uint64_t ***v20;
  std::string v21;
  std::string v22;
  void *__p[2];
  std::string::size_type v24;
  _QWORD v25[4];
  __int16 v26;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
  {
    a1[23] = 9;
    strcpy(a1, "(null-bb)");
    return;
  }
  std::to_string(&v21, *(_DWORD *)(v3 + 24));
  v5 = std::string::insert(&v21, 0, "bb.");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v22, ".");
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v24 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = *(uint64_t ****)(*(_QWORD *)(a2 + 16) + 16);
  if (v9)
  {
    if ((*((_BYTE *)v9 + 23) & 0x10) == 0)
    {
      v9 = 0;
      v18 = &byte_1C871356D;
      goto LABEL_14;
    }
    v10 = ***v9;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v14 = (uint64_t ****)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == v9)
      {
LABEL_13:
        v19 = v14[1];
        v20 = (uint64_t ***)*v19;
        v18 = (char *)(v19 + 2);
        v9 = v20;
        goto LABEL_14;
      }
      v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v9)
        {
          v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_13;
        }
      }
    }
    v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_13;
  }
  v18 = (char *)&unk_1C86ACCDB;
LABEL_14:
  v25[0] = __p;
  v25[2] = v18;
  v25[3] = v9;
  v26 = 1284;
  llvm::Twine::str((llvm::Twine *)v25, a1);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1C555AB88(llvm::raw_ostream **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  char __p[22];
  char v9;

  v6 = sub_1C62780AC((unsigned int **)a3);
  if (v6)
  {
    v7 = *(_BYTE *)(a3 + 24);
    if (v7)
    {
      strcpy(__p, "style=dotted,minlen=5");
      v7 = 21;
    }
    else
    {
      __p[0] = 0;
    }
    v9 = v7;
    sub_1C617C7A0(a1, a2, v6, (uint64_t)__p);
    if (v9 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_1C555AC24(llvm::raw_ostream **a1, unint64_t a2)
{
  unint64_t v2;
  llvm::raw_ostream *v4;
  uint64_t v5;
  _QWORD *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  size_t v11;
  size_t v12;
  void **v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  const char *v20;
  unsigned int v21;
  int v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  int v29;
  BOOL v30;
  int v31;
  char *v32;
  char *v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  llvm::raw_ostream *v39;
  void *v40;
  void *v41;
  unint64_t v42;
  _WORD *v43;
  llvm::raw_ostream *v44;
  const char *v45;
  size_t v46;
  uint64_t v47;
  const char *v48;
  size_t v49;
  uint64_t v50;
  llvm::raw_ostream *v51;
  uint64_t *v52;
  _WORD *v53;
  unint64_t v54;
  const char *v55;
  size_t v56;
  llvm::raw_ostream *v57;
  uint64_t v58;
  int v59;
  int v60;
  char *v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  int v67;
  BOOL v69;
  BOOL v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _OWORD v76[6];
  _OWORD v77[6];
  void (**v78)(llvm::raw_ostream *__hidden);
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  void **v86;
  void *v87[2];
  uint64_t v88;
  void *v89[2];
  char v90;
  void *__p[2];
  char v92;
  uint64_t v93;
  int v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v2 = a2;
  sub_1C6277FD0((char *)v89, *(_QWORD *)(*((_QWORD *)a1[1] + 267) + 864) + 48 * *(unsigned int *)(a2 + 32), *((_QWORD *)a1[1] + 267));
  v4 = *a1;
  v5 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v5) > 4)
  {
    *(_BYTE *)(v5 + 4) = 101;
    *(_DWORD *)v5 = 1685016073;
    *((_QWORD *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(*a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, v2, 3, 0, 0);
  v6 = (_QWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 7uLL)
  {
    *v6 = 0x3D65706168735B20;
    *((_QWORD *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [shape=", 8uLL);
  }
  v7 = *a1;
  v8 = *((_QWORD *)*a1 + 4);
  v9 = *((_QWORD *)*a1 + 3) - v8;
  if (*((_BYTE *)a1 + 16))
  {
    if (v9 <= 4)
    {
      v10 = "none,";
      v11 = 5;
      goto LABEL_10;
    }
    *(_BYTE *)(v8 + 4) = 44;
    *(_DWORD *)v8 = 1701736302;
    v74 = *((_QWORD *)v7 + 4) + 5;
  }
  else
  {
    if (v9 <= 6)
    {
      v10 = "record,";
      v11 = 7;
LABEL_10:
      llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_11;
    }
    *(_DWORD *)(v8 + 3) = 744780399;
    *(_DWORD *)v8 = 1868785010;
    v74 = *((_QWORD *)v7 + 4) + 7;
  }
  *((_QWORD *)v7 + 4) = v74;
LABEL_11:
  if (v90 >= 0)
    v12 = v90 & 0x7F;
  else
    v12 = (size_t)v89[1];
  if (v12)
  {
    if (v90 >= 0)
      v13 = v89;
    else
      v13 = (void **)v89[0];
    v14 = llvm::raw_ostream::write(*a1, (const char *)v13, v12);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if (*((_BYTE **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, ",", 1uLL);
    }
    else
    {
      *v15 = 44;
      ++*((_QWORD *)v14 + 4);
    }
  }
  v16 = *a1;
  v17 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 15724;
    *(_DWORD *)v17 = 1700946284;
    *((_QWORD *)v16 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v16, "label=", 6uLL);
  }
  v75 = v2;
  if (*((_BYTE *)a1 + 16))
  {
    sub_1C6278184((uint64_t)&v95, v2);
    sub_1C6278298((uint64_t)__p, v2);
    v21 = 0;
    v22 = DWORD2(v100);
    v23 = (char *)v95;
    v24 = v99;
    v25 = BYTE8(v96);
    v26 = BYTE8(v96);
    v27 = v99;
    v28 = (char *)v95;
    v29 = DWORD2(v100);
    while (1)
    {
      if (v29 == v94)
      {
        v30 = v28 == __p[0] && v27 == v93;
        v31 = !v30;
        if (v30 || v21 == 64)
        {
          BYTE8(v96) = v25;
          *(_QWORD *)&v95 = v23;
          DWORD2(v100) = v22;
          *(_QWORD *)&v99 = v24;
          if (v21 <= 1)
            v38 = 1;
          else
            v38 = v21;
LABEL_64:
          v39 = *a1;
          v40 = (void *)*((_QWORD *)*a1 + 4);
          if (*((_QWORD *)*a1 + 3) - (_QWORD)v40 > 0x30uLL)
          {
            qmemcpy(v40, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
            v41 = (void *)(*((_QWORD *)v39 + 4) + 49);
            *((_QWORD *)v39 + 4) = v41;
          }
          else
          {
            llvm::raw_ostream::write(*a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
            v41 = (void *)*((_QWORD *)v39 + 4);
          }
          v42 = (v38 + v31);
          if (*((_QWORD *)v39 + 3) - (_QWORD)v41 > 0x2EuLL)
          {
            qmemcpy(v41, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
            *((_QWORD *)v39 + 4) += 47;
          }
          else
          {
            llvm::raw_ostream::write(v39, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
          }
          v2 = v75;
          sub_1C5E21910(v39, v42, 0, 0, 0);
          v43 = (_WORD *)*((_QWORD *)v39 + 4);
          if (*((_QWORD *)v39 + 3) - (_QWORD)v43 > 1uLL)
          {
            *v43 = 15906;
            *((_QWORD *)v39 + 4) += 2;
          }
          else
          {
            v20 = "\">";
            v18 = v39;
LABEL_70:
            llvm::raw_ostream::write(v18, v20, 2uLL);
          }
          goto LABEL_71;
        }
      }
      else if (v21 == 64)
      {
        BYTE8(v96) = v25;
        *(_QWORD *)&v95 = v23;
        DWORD2(v100) = v22;
        v31 = 1;
        v38 = 64;
        *(_QWORD *)&v99 = v24;
        goto LABEL_64;
      }
      v32 = v28 + 4;
      if (v26)
        v33 = v23;
      else
        v33 = v28 + 4;
      if (v26)
        v34 = 0;
      else
        v34 = v25;
      if (v26)
        v32 = v28;
      v35 = v32 == (char *)v97;
      if (v32 == (char *)v97)
        v36 = 1;
      else
        v36 = v22;
      if (v32 == (char *)v97)
        v32 = (char *)v97;
      if (v35)
        v37 = 1;
      else
        v37 = v29;
      if (v29 == 1)
        v24 = v27 + 4;
      else
        v22 = v36;
      if (v29 == 1)
      {
        v27 += 4;
        v29 = 1;
      }
      else
      {
        v23 = v33;
        v25 = v34;
        v26 = 0;
        v28 = v32;
        v29 = v37;
      }
      ++v21;
    }
  }
  v18 = *a1;
  v19 = (_WORD *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v19 <= 1uLL)
  {
    v20 = "\"{";
    goto LABEL_70;
  }
  *v19 = 31522;
  *((_QWORD *)v18 + 4) += 2;
LABEL_71:
  v44 = *a1;
  if (*((_BYTE *)a1 + 16))
  {
    sub_1C555A9E0((char *)&v95, *(_QWORD *)(*((_QWORD *)a1[1] + 267) + 864) + 48 * *(unsigned int *)(v2 + 32));
    if ((SBYTE7(v96) & 0x80u) == 0)
      v48 = (const char *)&v95;
    else
      v48 = (const char *)v95;
    if ((SBYTE7(v96) & 0x80u) == 0)
      v49 = BYTE7(v96) & 0x7F;
    else
      v49 = *((_QWORD *)&v95 + 1);
    llvm::raw_ostream::write(v44, v48, v49);
    v50 = *((_QWORD *)v44 + 4);
    if ((unint64_t)(*((_QWORD *)v44 + 3) - v50) > 4)
    {
      *(_BYTE *)(v50 + 4) = 62;
      *(_DWORD *)v50 = 1685335868;
      *((_QWORD *)v44 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v44, "</td>", 5uLL);
    }
    v47 = v75;
    if (SBYTE7(v96) < 0)
      operator delete((void *)v95);
  }
  else
  {
    sub_1C555A9E0((char *)__p, *(_QWORD *)(*((_QWORD *)a1[1] + 267) + 864) + 48 * *(unsigned int *)(v2 + 32));
    llvm::DOT::EscapeString((char *)__p, (std::string *)&v95);
    if ((SBYTE7(v96) & 0x80u) == 0)
      v45 = (const char *)&v95;
    else
      v45 = (const char *)v95;
    if ((SBYTE7(v96) & 0x80u) == 0)
      v46 = BYTE7(v96) & 0x7F;
    else
      v46 = *((_QWORD *)&v95 + 1);
    llvm::raw_ostream::write(v44, v45, v46);
    if (SBYTE7(v96) < 0)
      operator delete((void *)v95);
    if (v92 < 0)
      operator delete(__p[0]);
    v47 = v75;
  }
  v87[0] = 0;
  v87[1] = 0;
  v88 = 0;
  v79 = 0;
  v83 = 0;
  v84 = 0;
  v78 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v86 = v87;
  v85 = 0;
  v81 = 0;
  v82 = 0;
  v80 = 0;
  sub_1C6278184((uint64_t)&v95, v47);
  sub_1C6278298((uint64_t)__p, v47);
  if (!*((_BYTE *)a1 + 16))
  {
    v51 = *a1;
    v52 = (uint64_t *)((char *)*a1 + 32);
    v53 = (_WORD *)*v52;
    v54 = *((_QWORD *)*a1 + 3) - *v52;
LABEL_96:
    if (v54 <= 1)
    {
      v55 = "}\"";
      v56 = 2;
LABEL_100:
      llvm::raw_ostream::write(v51, v55, v56);
      goto LABEL_101;
    }
    *v53 = 8829;
    v73 = *v52 + 2;
    goto LABEL_144;
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)&v78, "</tr><tr>", 9uLL);
  v51 = *a1;
  v52 = (uint64_t *)((char *)*a1 + 32);
  v53 = (_WORD *)*v52;
  v54 = *((_QWORD *)*a1 + 3) - *v52;
  if (!*((_BYTE *)a1 + 16))
    goto LABEL_96;
  if (v54 <= 0xD)
  {
    v55 = "</tr></table>>";
    v56 = 14;
    goto LABEL_100;
  }
  qmemcpy(v53, "</tr></table>>", 14);
  v73 = *v52 + 14;
LABEL_144:
  *v52 = v73;
LABEL_101:
  v57 = *a1;
  v58 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v58) > 2)
  {
    *(_BYTE *)(v58 + 2) = 10;
    *(_WORD *)v58 = 15197;
    *((_QWORD *)v57 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v57, "];\n", 3uLL);
  }
  sub_1C6278184((uint64_t)&v95, v47);
  sub_1C6278298((uint64_t)__p, v47);
  v59 = DWORD2(v100);
  v60 = v94;
  v61 = (char *)v95;
  v62 = BYTE8(v96);
  v63 = (char *)__p[0];
  v64 = v93;
  v65 = v99;
  v66 = (char *)v97;
  if (DWORD2(v100) != v94 || (void *)v95 != __p[0] || (_QWORD)v99 != v93)
  {
    v67 = 63;
    do
    {
      v77[2] = v97;
      v77[3] = v98;
      v77[4] = v99;
      v77[5] = v100;
      v77[0] = v95;
      v77[1] = v96;
      sub_1C555B540(a1, v75, (uint64_t)v77);
      if (v59 == 1)
      {
        v65 += 4;
        *(_QWORD *)&v99 = v65;
      }
      else
      {
        if (v62)
        {
          BYTE8(v96) = 0;
        }
        else
        {
          v61 += 4;
          *(_QWORD *)&v95 = v61;
        }
        v62 = 0;
        if (v61 == v66)
        {
          v59 = 1;
          DWORD2(v100) = 1;
          v61 = v66;
        }
      }
      v69 = v67-- != 0;
      v71 = v65 == v64 && v61 == v63 && v59 == v60;
    }
    while (!v71 && v69);
  }
  if (v59 == v60)
  {
    v72 = v75;
    if (v61 == v63)
      goto LABEL_145;
  }
  else
  {
    v72 = v75;
  }
  do
  {
    do
    {
      v76[2] = v97;
      v76[3] = v98;
      v76[4] = v99;
      v76[5] = v100;
      v76[0] = v95;
      v76[1] = v96;
      sub_1C555B540(a1, v72, (uint64_t)v76);
      if (v59 == 1)
      {
        v65 += 4;
        *(_QWORD *)&v99 = v65;
      }
      else
      {
        if (v62)
        {
          BYTE8(v96) = 0;
        }
        else
        {
          v61 += 4;
          *(_QWORD *)&v95 = v61;
        }
        v62 = 0;
        if (v61 == v66)
        {
          v59 = 1;
          DWORD2(v100) = 1;
          v61 = v66;
        }
      }
    }
    while (v59 != v60 || v61 != v63);
LABEL_145:
    ;
  }
  while (v65 != v64);
  v78 = off_1E81A6E70;
  if (v85 == 1 && v80)
    MEMORY[0x1CAA32F9C](v80, 0x1000C8077774924);
  if (SHIBYTE(v88) < 0)
    operator delete(v87[0]);
  if (v90 < 0)
    operator delete(v89[0]);
}

void sub_1C555B540(llvm::raw_ostream **a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  std::string *v10;
  std::string::size_type v11;
  void *__p[2];
  std::string::size_type v13;
  std::string v14;

  if (*(_DWORD *)(a3 + 88))
  {
    v6 = **(_QWORD **)(a3 + 72);
    if (!v6)
      return;
    v7 = v6 + ((unint64_t)**(unsigned int **)(a3 + 64) << 6);
    HIBYTE(v13) = 8;
    strcpy((char *)__p, "dir=back");
  }
  else
  {
    v8 = sub_1C555B65C((unsigned int **)a3);
    if (!v8)
      return;
    v7 = v8;
    v9 = *(_BYTE *)(a3 + 24);
    if (v9)
    {
      strcpy((char *)&v14, "style=dotted,minlen=5");
      v9 = 21;
    }
    else
    {
      v14.__r_.__value_.__s.__data_[0] = 0;
    }
    *((_BYTE *)&v14.__r_.__value_.__s + 23) = v9;
    v10 = std::string::append(&v14, "color=lightgrey,");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  sub_1C617C7A0(a1, a2, v7, (uint64_t)__p);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C555B65C(unsigned int **a1)
{
  unsigned int *v1;
  unsigned int **v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1[1];
  if (*((_BYTE *)a1 + 24))
  {
    v2 = (unsigned int **)*((_QWORD *)v1 + 267);
    v3 = *((unsigned int *)v2 + 2);
    if (!(_DWORD)v3)
      return 0;
    v4 = *v2;
    v5 = a1[2][8];
    v6 = 4 * v3;
    while (1)
    {
      v7 = *v4;
      if (v5 != (_DWORD)v7 && *(_QWORD *)&v2[108][12 * v5 + 4] == *(_QWORD *)&v2[108][12 * v7 + 4])
        break;
      ++v4;
      v6 -= 4;
      if (!v6)
        return 0;
    }
  }
  else
  {
    v7 = **a1;
  }
  return *(_QWORD *)v1 + (v7 << 6);
}

void sub_1C555B6D8(uint64_t a1, unint64_t a2)
{
  int v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  _QWORD *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  size_t v12;
  size_t v13;
  const char *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  int v21;
  int v22;
  _DWORD *v23;
  unsigned int v24;
  llvm::raw_ostream *v25;
  _WORD *v26;
  const char *v27;
  unint64_t v28;
  llvm::raw_ostream *v29;
  void *v30;
  void *v31;
  _WORD *v32;
  llvm::raw_ostream *v33;
  std::string *p_p;
  size_t size;
  uint64_t v36;
  void *v37;
  std::string *v38;
  size_t v39;
  _BYTE *v40;
  _BYTE *v41;
  _OWORD *v42;
  _BYTE *v43;
  _OWORD *v44;
  _BYTE *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _OWORD *v49;
  _BYTE *v50;
  _BYTE *v51;
  _QWORD *v52;
  _BYTE *v53;
  _OWORD *v54;
  __int128 v55;
  char v56;
  void *v57;
  llvm::raw_ostream *v58;
  _BYTE *v59;
  std::string *v60;
  size_t v61;
  llvm::raw_ostream *v62;
  uint64_t *v63;
  _WORD *v64;
  unint64_t v65;
  const char *v66;
  size_t v67;
  llvm::raw_ostream *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  _DWORD *v72;
  int v73;
  int v74;
  _DWORD *v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  int v80;
  _QWORD v81[2];
  int v82;
  void *__dst[2];
  void *v84;
  void *v85[2];
  char v86;
  std::string __p;
  _BYTE *v88;
  _BYTE *v89;
  char v90;
  uint64_t v91;
  int v92;
  void **v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;

  v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    strcpy((char *)v85, "color=red");
    LOBYTE(v4) = 9;
  }
  else
  {
    LOBYTE(v85[0]) = 0;
  }
  v86 = v4;
  v5 = *(llvm::raw_ostream **)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v6) > 4)
  {
    *(_BYTE *)(v6 + 4) = 101;
    *(_DWORD *)v6 = 1685016073;
    *((_QWORD *)v5 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v5, a2, 3, 0, 0);
  v7 = (_QWORD *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v7 > 7uLL)
  {
    *v7 = 0x3D65706168735B20;
    *((_QWORD *)v5 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v5, " [shape=", 8uLL);
  }
  v8 = *(llvm::raw_ostream **)a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 24) - v9;
  if (*(_BYTE *)(a1 + 16))
  {
    if (v10 <= 4)
    {
      v11 = "none,";
      v12 = 5;
LABEL_13:
      llvm::raw_ostream::write(v8, v11, v12);
      goto LABEL_14;
    }
    *(_BYTE *)(v9 + 4) = 44;
    *(_DWORD *)v9 = 1701736302;
    v77 = *((_QWORD *)v8 + 4) + 5;
  }
  else
  {
    if (v10 <= 6)
    {
      v11 = "record,";
      v12 = 7;
      goto LABEL_13;
    }
    *(_DWORD *)(v9 + 3) = 744780399;
    *(_DWORD *)v9 = 1868785010;
    v77 = *((_QWORD *)v8 + 4) + 7;
  }
  *((_QWORD *)v8 + 4) = v77;
LABEL_14:
  if (v86 >= 0)
    v13 = v86 & 0x7F;
  else
    v13 = (size_t)v85[1];
  if (v13)
  {
    if (v86 >= 0)
      v14 = (const char *)v85;
    else
      v14 = (const char *)v85[0];
    v15 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v14, v13);
    v16 = (_BYTE *)*((_QWORD *)v15 + 4);
    if (*((_BYTE **)v15 + 3) == v16)
    {
      llvm::raw_ostream::write(v15, ",", 1uLL);
    }
    else
    {
      *v16 = 44;
      ++*((_QWORD *)v15 + 4);
    }
  }
  v17 = *(llvm::raw_ostream **)a1;
  v18 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v18) > 5)
  {
    *(_WORD *)(v18 + 4) = 15724;
    *(_DWORD *)v18 = 1700946284;
    *((_QWORD *)v17 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v17, "label=", 6uLL);
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v19 = 0;
    while (2)
    {
      v20 = (_DWORD *)(a2 + 12);
      switch(v19)
      {
        case 0:
          goto LABEL_30;
        case 1:
          v20 = (_DWORD *)(a2 + 16);
          goto LABEL_30;
        case 2:
          v20 = (_DWORD *)(a2 + 20);
LABEL_30:
          if (*v20 == -1)
            goto LABEL_31;
          v21 = 0;
          v22 = v19 + 1;
          while (2)
          {
            v23 = (_DWORD *)(a2 + 12);
            switch(v22)
            {
              case 0:
                goto LABEL_36;
              case 1:
                v23 = (_DWORD *)(a2 + 16);
                goto LABEL_36;
              case 2:
                v23 = (_DWORD *)(a2 + 20);
LABEL_36:
                if (*v23 == -1)
                  goto LABEL_37;
                ++v21;
                ++v22;
                if (v21 != 64)
                  continue;
                v24 = 64;
                break;
              case 3:
                v24 = v21 + 1;
                goto LABEL_44;
              default:
LABEL_37:
                ++v22;
                continue;
            }
            break;
          }
LABEL_45:
          if (v24 <= 1)
            v24 = 1;
          if (v22 == 4)
            v28 = v24;
          else
            v28 = v24 + 1;
          v29 = *(llvm::raw_ostream **)a1;
          v30 = *(void **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v30 > 0x30uLL)
          {
            qmemcpy(v30, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
            v31 = (void *)(*((_QWORD *)v29 + 4) + 49);
            *((_QWORD *)v29 + 4) = v31;
          }
          else
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
            v31 = (void *)*((_QWORD *)v29 + 4);
          }
          if (*((_QWORD *)v29 + 3) - (_QWORD)v31 > 0x2EuLL)
          {
            qmemcpy(v31, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
            *((_QWORD *)v29 + 4) += 47;
          }
          else
          {
            llvm::raw_ostream::write(v29, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
          }
          sub_1C5E21910(v29, v28, 0, 0, 0);
          v32 = (_WORD *)*((_QWORD *)v29 + 4);
          if (*((_QWORD *)v29 + 3) - (_QWORD)v32 <= 1uLL)
          {
            v27 = "\">";
            v25 = v29;
            goto LABEL_56;
          }
          *v32 = 15906;
          *((_QWORD *)v29 + 4) += 2;
          break;
        case 3:
          v24 = 0;
LABEL_44:
          v22 = 4;
          goto LABEL_45;
        default:
LABEL_31:
          ++v19;
          continue;
      }
      break;
    }
  }
  else
  {
    v25 = *(llvm::raw_ostream **)a1;
    v26 = *(_WORD **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v26 > 1uLL)
    {
      *v26 = 31522;
      *((_QWORD *)v25 + 4) += 2;
    }
    else
    {
      v27 = "\"{";
LABEL_56:
      llvm::raw_ostream::write(v25, v27, 2uLL);
    }
  }
  v33 = *(llvm::raw_ostream **)a1;
  if (*(_BYTE *)(a1 + 16))
  {
    sub_1C555C7A8((uint64_t)&__p, a2, *(_QWORD *)(a1 + 8));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v33, (const char *)p_p, size);
    v36 = *((_QWORD *)v33 + 4);
    if ((unint64_t)(*((_QWORD *)v33 + 3) - v36) > 4)
    {
      *(_BYTE *)(v36 + 4) = 62;
      *(_DWORD *)v36 = 1685335868;
      *((_QWORD *)v33 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v33, "</td>", 5uLL);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v37 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_78:
      operator delete(v37);
    }
  }
  else
  {
    sub_1C555C7A8((uint64_t)&v94, a2, *(_QWORD *)(a1 + 8));
    llvm::DOT::EscapeString((char *)&v94, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &__p;
    else
      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v39 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v33, (const char *)v38, v39);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v96) < 0)
    {
      v37 = v94;
      goto LABEL_78;
    }
  }
  v94 = 0;
  v95 = 0;
  v96 = 0;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  v90 = 0;
  v91 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  v93 = &v94;
  v92 = 0;
  v88 = 0;
  v89 = 0;
  __p.__r_.__value_.__r.__words[2] = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "EntryNestingLevel=", 0x12uLL);
  sub_1C5E21910((llvm::raw_ostream *)&__p, *(unsigned int *)(a2 + 24), 0, 0, 0);
  if (v88 == v89)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
    v40 = v89;
  }
  else
  {
    *v89 = 10;
    v40 = ++v89;
  }
  if ((unint64_t)(v88 - v40) > 0x10)
  {
    v40[16] = 61;
    *(_OWORD *)v40 = *(_OWORD *)"ExitNestingLevel=";
    v89 += 17;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "ExitNestingLevel=", 0x11uLL);
  }
  sub_1C5E21910((llvm::raw_ostream *)&__p, *(unsigned int *)(a2 + 28), 0, 0, 0);
  if (v88 == v89)
    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
  else
    *v89++ = 10;
  if (*(_DWORD *)(a2 + 32))
  {
    v41 = v89;
    if ((unint64_t)(v88 - v89) > 0xE)
    {
      *(_QWORD *)v89 = *(_QWORD *)"UnstructuredID=";
      *(_QWORD *)(v41 + 7) = *(_QWORD *)"turedID=";
      v89 += 15;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "UnstructuredID=", 0xFuLL);
    }
    sub_1C5E21910((llvm::raw_ostream *)&__p, *(unsigned int *)(a2 + 32), 0, 0, 0);
    if (v88 == v89)
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
    else
      *v89++ = 10;
  }
  if (*(_DWORD *)(a2 + 36))
  {
    v42 = v89;
    if ((unint64_t)(v88 - v89) > 0x12)
    {
      *(_DWORD *)(v89 + 15) = 1030972526;
      *v42 = *(_OWORD *)"PrologExtraCndEnds=";
      v89 += 19;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "PrologExtraCndEnds=", 0x13uLL);
    }
    sub_1C5E21910((llvm::raw_ostream *)&__p, *(unsigned int *)(a2 + 36), 0, 0, 0);
    if (v88 == v89)
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
    else
      *v89++ = 10;
  }
  if (*(_DWORD *)(a2 + 40))
  {
    v43 = v89;
    if ((unint64_t)(v88 - v89) > 0xE)
    {
      *(_QWORD *)v89 = *(_QWORD *)"LoopEndPrologs=";
      *(_QWORD *)(v43 + 7) = *(_QWORD *)"Prologs=";
      v89 += 15;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "LoopEndPrologs=", 0xFuLL);
    }
    sub_1C5E21910((llvm::raw_ostream *)&__p, *(unsigned int *)(a2 + 40), 0, 0, 0);
    if (v88 == v89)
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
    else
      *v89++ = 10;
  }
  if ((*(_WORD *)(a2 + 44) & 1) != 0)
  {
    v44 = v89;
    if ((unint64_t)(v88 - v89) > 0x12)
    {
      *(_DWORD *)(v89 + 15) = 174353989;
      *v44 = *(_OWORD *)"UnstructuredCndEnd\n";
      v89 += 19;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "UnstructuredCndEnd\n", 0x13uLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 2) != 0)
  {
    v45 = v89;
    if ((unint64_t)(v88 - v89) > 0x1D)
    {
      *(_OWORD *)v89 = *(_OWORD *)"SkipUnstructuredSuccessorEmit\n";
      *(_OWORD *)(v45 + 14) = *(_OWORD *)"edSuccessorEmit\n";
      v89 += 30;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "SkipUnstructuredSuccessorEmit\n", 0x1EuLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 4) != 0)
  {
    if ((unint64_t)(v88 - v89) > 0xF)
    {
      *(_OWORD *)v89 = *(_OWORD *)"InvertPredicate\n";
      v89 += 16;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "InvertPredicate\n", 0x10uLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 8) != 0)
  {
    v46 = v89;
    if ((unint64_t)(v88 - v89) > 9)
    {
      *((_WORD *)v89 + 4) = 2670;
      *v46 = *(_QWORD *)"LoopBegin\n";
      v89 += 10;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "LoopBegin\n", 0xAuLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0x10) != 0)
  {
    if ((unint64_t)(v88 - v89) > 7)
    {
      *(_QWORD *)v89 = 0xA6E696765426649;
      v89 += 8;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "IfBegin\n", 8uLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0x20) != 0)
  {
    v47 = v89;
    if ((unint64_t)(v88 - v89) > 0xB)
    {
      *((_DWORD *)v89 + 2) = 175008103;
      *v47 = *(_QWORD *)"IfElseBegin\n";
      v89 += 12;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "IfElseBegin\n", 0xCuLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0x40) != 0)
  {
    v48 = v89;
    if ((unint64_t)(v88 - v89) > 9)
    {
      *((_WORD *)v89 + 4) = 2670;
      *v48 = *(_QWORD *)"ElseBegin\n";
      v89 += 10;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "ElseBegin\n", 0xAuLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0x80) != 0)
  {
    v49 = v89;
    if ((unint64_t)(v88 - v89) > 0x12)
    {
      *(_DWORD *)(v89 + 15) = 174550892;
      *v49 = *(_OWORD *)"UnstructuredProlog\n";
      v89 += 19;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "UnstructuredProlog\n", 0x13uLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0x100) != 0)
  {
    v50 = v89;
    if ((unint64_t)(v88 - v89) > 0xD)
    {
      *(_QWORD *)v89 = *(_QWORD *)"LoopEndEpilog\n";
      *(_QWORD *)(v50 + 6) = *(_QWORD *)"dEpilog\n";
      v89 += 14;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "LoopEndEpilog\n", 0xEuLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0x200) != 0)
  {
    v51 = v89;
    if ((unint64_t)(v88 - v89) > 0xC)
    {
      *(_QWORD *)v89 = *(_QWORD *)"LoopBackedge\n";
      *(_QWORD *)(v51 + 5) = *(_QWORD *)"ackedge\n";
      v89 += 13;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "LoopBackedge\n", 0xDuLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0x400) != 0)
  {
    v52 = v89;
    if ((unint64_t)(v88 - v89) > 9)
    {
      *((_WORD *)v89 + 4) = 2667;
      *v52 = *(_QWORD *)"LoopBreak\n";
      v89 += 10;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "LoopBreak\n", 0xAuLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0x800) != 0)
  {
    v53 = v89;
    if ((unint64_t)(v88 - v89) > 0x1D)
    {
      *(_OWORD *)v89 = *(_OWORD *)"OptimizedUnstructuredLoopExit\n";
      *(_OWORD *)(v53 + 14) = *(_OWORD *)"ucturedLoopExit\n";
      v89 += 30;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "OptimizedUnstructuredLoopExit\n", 0x1EuLL);
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0x1000) != 0)
  {
    v54 = v89;
    if ((unint64_t)(v88 - v89) > 0x13)
    {
      *((_DWORD *)v89 + 4) = 174550892;
      *v54 = *(_OWORD *)"OptimizedLoopEpilog\n";
      v89 += 20;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "OptimizedLoopEpilog\n", 0x14uLL);
    }
  }
  if (*((char *)v93 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *v93, (unint64_t)v93[1]);
  }
  else
  {
    v55 = *(_OWORD *)v93;
    v84 = v93[2];
    *(_OWORD *)__dst = v55;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v92 == 1 && __p.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v56 = HIBYTE(v84);
  v57 = (void *)(HIBYTE(v84) & 0x7F);
  if (SHIBYTE(v84) < 0)
    v57 = __dst[1];
  if (v57)
  {
    v58 = *(llvm::raw_ostream **)a1;
    v59 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v59)
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "|", 1uLL);
    }
    else
    {
      *v59 = 124;
      ++*((_QWORD *)v58 + 4);
    }
    llvm::DOT::EscapeString((char *)__dst, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = &__p;
    else
      v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v61 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v58, (const char *)v60, v61);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v56 = HIBYTE(v84);
  }
  if (v56 < 0)
    operator delete(__dst[0]);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  v90 = 0;
  v91 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  v93 = &v94;
  v92 = 0;
  v88 = 0;
  v89 = 0;
  __p.__r_.__value_.__r.__words[2] = 0;
  if (!*(_BYTE *)(a1 + 16))
  {
    v62 = *(llvm::raw_ostream **)a1;
    v63 = (uint64_t *)(*(_QWORD *)a1 + 32);
    v64 = (_WORD *)*v63;
    v65 = *(_QWORD *)(*(_QWORD *)a1 + 24) - *v63;
    goto LABEL_166;
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "</tr><tr>", 9uLL);
  v62 = *(llvm::raw_ostream **)a1;
  v63 = (uint64_t *)(*(_QWORD *)a1 + 32);
  v64 = (_WORD *)*v63;
  v65 = *(_QWORD *)(*(_QWORD *)a1 + 24) - *v63;
  if (!*(_BYTE *)(a1 + 16))
  {
LABEL_166:
    if (v65 <= 1)
    {
      v66 = "}\"";
      v67 = 2;
      goto LABEL_168;
    }
    *v64 = 8829;
    v78 = *v63 + 2;
LABEL_233:
    *v63 = v78;
    goto LABEL_169;
  }
  if (v65 > 0xD)
  {
    qmemcpy(v64, "</tr></table>>", 14);
    v78 = *v63 + 14;
    goto LABEL_233;
  }
  v66 = "</tr></table>>";
  v67 = 14;
LABEL_168:
  llvm::raw_ostream::write(v62, v66, v67);
LABEL_169:
  v68 = *(llvm::raw_ostream **)a1;
  v69 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v69) > 2)
  {
    *(_BYTE *)(v69 + 2) = 10;
    *(_WORD *)v69 = 15197;
    *((_QWORD *)v68 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v68, "];\n", 3uLL);
  }
  v70 = 0;
  v71 = *(_QWORD *)a2;
  while (1)
  {
    v72 = (_DWORD *)(a2 + 12);
    switch(v70)
    {
      case 0:
        goto LABEL_175;
      case 1:
        v72 = (_DWORD *)(a2 + 16);
        goto LABEL_175;
      case 2:
        v72 = (_DWORD *)(a2 + 20);
LABEL_175:
        if (*v72 != -1)
        {
          v73 = 0;
          v74 = v70 + 1;
          while (2)
          {
            v81[0] = v71;
            v81[1] = a2;
            v82 = v74;
            sub_1C555CA98((llvm::raw_ostream **)a1, a2, (uint64_t)v81);
LABEL_179:
            v75 = (_DWORD *)(a2 + 12);
            switch(v74)
            {
              case 0:
                goto LABEL_182;
              case 1:
                v75 = (_DWORD *)(a2 + 16);
                goto LABEL_182;
              case 2:
                v75 = (_DWORD *)(a2 + 20);
LABEL_182:
                if (*v75 == -1)
                  goto LABEL_183;
                ++v73;
                ++v74;
                if (v73 == 64)
                {
                  while (2)
                  {
                    v79[0] = v71;
                    v79[1] = a2;
                    v80 = v74;
                    sub_1C555CA98((llvm::raw_ostream **)a1, a2, (uint64_t)v79);
LABEL_186:
                    v76 = (_DWORD *)(a2 + 12);
                    switch(v74)
                    {
                      case 0:
                        goto LABEL_189;
                      case 1:
                        v76 = (_DWORD *)(a2 + 16);
                        goto LABEL_189;
                      case 2:
                        v76 = (_DWORD *)(a2 + 20);
LABEL_189:
                        if (*v76 == -1)
                          goto LABEL_190;
                        ++v74;
                        continue;
                      case 3:
                        goto LABEL_192;
                      default:
LABEL_190:
                        ++v74;
                        goto LABEL_186;
                    }
                  }
                }
                continue;
              case 3:
                goto LABEL_192;
              default:
LABEL_183:
                ++v74;
                goto LABEL_179;
            }
          }
        }
        break;
      case 3:
LABEL_192:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
        if (v92 == 1 && __p.__r_.__value_.__r.__words[2])
          MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
        if (SHIBYTE(v96) < 0)
          operator delete(v94);
        if (v86 < 0)
          operator delete(v85[0]);
        return;
      default:
        break;
    }
    ++v70;
  }
}

void sub_1C555C7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  size_t v9;
  std::string::size_type v10;
  uint64_t ***v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  size_t v20;
  char *v21;
  uint64_t ***v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  std::string v27;
  std::string v28;
  void *__p[2];
  std::string::size_type v30;
  void (**v31)(llvm::raw_ostream *__hidden);
  int v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  char v36;
  uint64_t v37;
  int v38;
  void **v39;
  void *v40[2];
  uint64_t v41;

  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v32 = 0;
  v36 = 0;
  v37 = 0;
  v31 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v39 = v40;
  v38 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 864) + 48 * *(unsigned int *)(a2 + 8);
  std::to_string(&v27, *(_DWORD *)(*(_QWORD *)(v5 + 16) + 24));
  v6 = std::string::insert(&v27, 0, "bb");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v28, ".");
  v10 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v30 = v10;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v11 = *(uint64_t ****)(*(_QWORD *)(v5 + 16) + 16);
  if (!v11)
  {
    v20 = 0;
    v21 = (char *)&unk_1C86ACCDB;
    goto LABEL_12;
  }
  if ((*((_BYTE *)v11 + 23) & 0x10) != 0)
  {
    v12 = ***v11;
    v13 = *(_QWORD *)(v12 + 152);
    v14 = *(unsigned int *)(v12 + 168);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v16 = (uint64_t ****)(v13 + 16 * v15);
      v17 = *v16;
      if (*v16 == v11)
      {
LABEL_11:
        v22 = v16[1];
        v23 = (size_t)*v22;
        v21 = (char *)(v22 + 2);
        v20 = v23;
        goto LABEL_12;
      }
      v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == v11)
        {
          v16 = (uint64_t ****)(v13 + 16 * v15);
          goto LABEL_11;
        }
      }
    }
    v16 = (uint64_t ****)(v13 + 16 * v14);
    goto LABEL_11;
  }
  v20 = 0;
  v21 = &byte_1C871356D;
LABEL_12:
  llvm::Twine::printOneChild((uint64_t)v8, (llvm::raw_ostream *)&v31, (uint64_t)__p, v9, 4);
  llvm::Twine::printOneChild(v24, (llvm::raw_ostream *)&v31, (uint64_t)v21, v20, 5);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v25 = v35;
  if ((unint64_t)(v34 - v35) > 9)
  {
    *((_WORD *)v35 + 4) = 15730;
    *v25 = *(_QWORD *)" (NodePtr=";
    v35 += 10;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v31, " (NodePtr=", 0xAuLL);
  }
  sub_1C5E21910((llvm::raw_ostream *)&v31, *(unsigned int *)(a2 + 8), 0, 0, 0);
  if (v34 == v35)
    llvm::raw_ostream::write((llvm::raw_ostream *)&v31, ")", 1uLL);
  else
    *v35++ = 41;
  if (*((char *)v39 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a1, *v39, (unint64_t)v39[1]);
  }
  else
  {
    v26 = *(_OWORD *)v39;
    *(_QWORD *)(a1 + 16) = v39[2];
    *(_OWORD *)a1 = v26;
  }
  v31 = off_1E81A6E70;
  if (v38 == 1 && v33)
    MEMORY[0x1CAA32F9C](v33, 0x1000C8077774924);
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
}

void sub_1C555CA98(llvm::raw_ostream **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  char __p[20];
  char v9;

  v6 = sub_1C627840C(a3);
  if (v6)
  {
    v7 = *(_DWORD *)(a3 + 16);
    if (v7 == 3)
    {
      v9 = 19;
      strcpy(__p, "style=\"grey,dotted\"");
    }
    else if (v7 == 2)
    {
      v9 = 9;
      strcpy(__p, "color=red");
    }
    else
    {
      v9 = 0;
      __p[0] = 0;
    }
    sub_1C617C7A0(a1, a2, v6, (uint64_t)__p);
    if (v9 < 0)
      operator delete(*(void **)__p);
  }
}

uint64_t sub_1C555CB6C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v6 = *a2;
        v7 = *a2 + 24 * v4;
        v8 = *(_QWORD *)a1;
        do
        {
          *(_QWORD *)v8 = *(_QWORD *)v6;
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
          *(_DWORD *)(v8 + 16) = *(_DWORD *)(v6 + 16);
          v6 += 24;
          v8 += 24;
        }
        while (v6 != v7);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v9 = *a2;
        v10 = *a2 + 24 * v5;
        v11 = *(_QWORD *)a1;
        do
        {
          *(_QWORD *)v11 = *(_QWORD *)v9;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v9 + 16);
          v9 += 24;
          v11 += 24;
        }
        while (v9 != v10);
LABEL_14:
        v12 = *((unsigned int *)a2 + 2);
        if (v5 != v12)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v5), (const void *)(*a2 + 24 * v5), *a2 + 24 * v12 - (*a2 + 24 * v5));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 24);
    }
    v5 = 0;
    goto LABEL_14;
  }
  return a1;
}

_QWORD *sub_1C555CC90(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t i;
  _QWORD *v15;

  v3 = *(_DWORD *)(a1 + 264);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 248);
    v5 = v3 - 1;
    v6 = (v3 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v7 = *(_QWORD *)(v4 + 16 * v6);
    if (v7 == a3)
    {
LABEL_6:
      v10 = *(_QWORD *)(v4 + 16 * v6 + 8);
      if (v10)
      {
        v11 = *(_QWORD **)(v10 + 8);
        v12 = *(_QWORD **)(v10 + 16);
        while (v11 != v12)
        {
          if (a2 != (_QWORD *)*v11)
          {
            v13 = a2;
            while (v13)
            {
              v13 = (_QWORD *)*v13;
              if (v13 == (_QWORD *)*v11)
              {
                a2 = (_QWORD *)*v11;
                break;
              }
            }
          }
          ++v11;
        }
        return a2;
      }
    }
    else
    {
      v8 = 1;
      while (v7 != -4096)
      {
        v9 = v6 + v8++;
        v6 = v9 & v5;
        v7 = *(_QWORD *)(v4 + 16 * v6);
        if (v7 == a3)
          goto LABEL_6;
      }
    }
  }
  for (i = *(_QWORD *)(a1 + 272); i != *(_QWORD *)(a1 + 280) && *(_QWORD **)i != a2; i += 8)
  {
    v15 = a2;
    while (v15)
    {
      v15 = (_QWORD *)*v15;
      if (v15 == *(_QWORD **)i)
        return *(_QWORD **)i;
    }
  }
  return a2;
}

uint64_t sub_1C555CD6C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  char v12;
  uint64_t v13;

  v3 = a2 + 48 * a3;
  v4 = *(unsigned int *)(v3 + 32);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(unsigned int **)(v3 + 24);
    v8 = 4 * v4 - 4;
    do
    {
      v9 = a1 + ((unint64_t)*v7 << 6);
      v10 = *(_DWORD *)(v9 + 16);
      v11 = v10 == 1 && (*(_BYTE *)(a2 + 48 * **(unsigned int **)(v9 + 8) + 8) & 0x10) != 0 || v10 > 1;
      v6 |= v11;
      v5 |= !v11;
      v12 = v6 & v5;
      if ((v6 & v5 & 1) != 0)
        break;
      ++v7;
      v13 = v8;
      v8 -= 4;
    }
    while (v13);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_1C555CE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[6144];
  uint64_t v32;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v32 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v8 = sub_1C555D0FC(v4, *v5, &v29);
  v9 = v29;
  if ((v8 & 1) != 0)
    return v9 + 8;
  v30 = v29;
  v10 = *(_DWORD *)v7;
  v11 = *(_DWORD *)v7 >> 1;
  v12 = *(_DWORD *)v7 & 1;
  if (v12)
    v13 = 32;
  else
    v13 = *(_DWORD *)(v7 + 16);
  if (4 * v11 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_12;
  }
  if (v13 + ~v11 - *(_DWORD *)(v7 + 4) <= v13 >> 3)
  {
LABEL_12:
    if (v13 >= 0x21)
    {
      v16 = (v13 - 1) | ((unint64_t)(v13 - 1) >> 1);
      v17 = v16 | (v16 >> 2) | ((v16 | (v16 >> 2)) >> 4);
      v18 = ((v17 | (v17 >> 8)) >> 16) | v17 | (v17 >> 8);
      if ((v18 + 1) > 0x40)
        v13 = v18 + 1;
      else
        v13 = 64;
    }
    if (v12)
    {
      v21 = 0;
      v22 = v31;
      v23 = v7 + 8;
      do
      {
        if ((*(_QWORD *)v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = (uint64_t)(v22 + 1);
          *v22 = *(_QWORD *)v23;
          v22 += 24;
          sub_1C555D1AC(v24, (uint64_t *)(v23 + 8));
          v25 = *(char **)(v23 + 8);
          v26 = *(unsigned int *)(v23 + 16);
          if ((_DWORD)v26)
          {
            v27 = 32 * v26;
            do
            {
              v28 = *(char **)&v25[v27 - 32];
              if (&v25[v27 - 16] != v28)
                free(v28);
              v27 -= 32;
            }
            while (v27);
            v25 = *(char **)(v23 + 8);
          }
          if (v25 != (char *)(v23 + 24))
            free(v25);
        }
        ++v21;
        v23 = v7 + 8 + 192 * v21;
      }
      while (v21 != 32);
      if (v13 > 0x20)
      {
        *(_DWORD *)v7 &= ~1u;
        *(_QWORD *)(v7 + 8) = operator new(192 * v13, (std::align_val_t)8uLL);
        *(_QWORD *)(v7 + 16) = v13;
      }
      sub_1C555D37C(v7, (uint64_t)v31, (uint64_t)v22);
    }
    else
    {
      v19 = *(_QWORD *)(v7 + 8);
      v20 = *(_DWORD *)(v7 + 16);
      if (v13 > 0x20)
      {
        *(_QWORD *)(v7 + 8) = operator new(192 * v13, (std::align_val_t)8uLL);
        *(_QWORD *)(v7 + 16) = v13;
      }
      else
      {
        *(_DWORD *)v7 = v10 | 1;
      }
      sub_1C555D37C(v7, v19, v19 + 192 * v20);
      MEMORY[0x1CAA32FB4](v19, 8);
    }
    sub_1C555D0FC(v7, *v6, &v30);
    v10 = *(_DWORD *)v7;
    v9 = v30;
    v12 = *(_DWORD *)v7 & 1;
  }
  *(_DWORD *)v7 = (v10 & 0xFFFFFFFE | v12) + 2;
  if (*(_QWORD *)v9 != -4096)
    --*(_DWORD *)(v7 + 4);
  v14 = *v6;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_QWORD *)(v9 + 184) = 0;
  *(_QWORD *)v9 = v14;
  *(_QWORD *)(v9 + 8) = v9 + 24;
  *(_QWORD *)(v9 + 16) = 0x500000000;
  return v9 + 8;
}

uint64_t sub_1C555D0FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 192 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 192 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1C555D1AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;

  v4 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x500000000;
  if ((uint64_t *)a1 != a2)
  {
    v5 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v5)
    {
      v6 = *a2;
      if ((uint64_t *)*a2 != a2 + 2)
      {
        v7 = *((_DWORD *)a2 + 3);
        *(_QWORD *)a1 = v6;
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v7;
        *a2 = (uint64_t)(a2 + 2);
        *((_DWORD *)a2 + 3) = 0;
LABEL_28:
        *((_DWORD *)a2 + 2) = 0;
        goto LABEL_29;
      }
      if (v5 <= 5)
      {
        v9 = v6 + 32 * v5;
      }
      else
      {
        sub_1C555D498(a1, *((unsigned int *)a2 + 2));
        v6 = *a2;
        v8 = *((unsigned int *)a2 + 2);
        if (!(_DWORD)v8)
        {
LABEL_23:
          *(_DWORD *)(a1 + 8) = v5;
          v20 = *((unsigned int *)a2 + 2);
          if ((_DWORD)v20)
          {
            v21 = 32 * v20;
            do
            {
              v22 = *(void **)(v6 + v21 - 32);
              if ((void *)(v6 + v21 - 16) != v22)
                free(v22);
              v21 -= 32;
            }
            while (v21);
          }
          goto LABEL_28;
        }
        v4 = *(_QWORD *)a1;
        v9 = v6 + 32 * v8;
      }
      v10 = 0;
      while (1)
      {
        v11 = v4 + v10;
        v12 = v6 + v10;
        v13 = (void *)(v4 + v10 + 16);
        *(_QWORD *)v11 = v13;
        *(_QWORD *)(v11 + 8) = 0x100000000;
        if (v6 == v4)
          goto LABEL_18;
        v14 = *(_DWORD *)(v12 + 8);
        if (!v14)
          goto LABEL_18;
        v15 = v6 + v10;
        v17 = v6 + v10 + 16;
        v16 = *(const void **)(v6 + v10);
        if ((const void *)v17 != v16)
        {
          *(_QWORD *)v11 = v16;
          v19 = *(_DWORD *)(v15 + 12);
          *(_DWORD *)(v11 + 8) = v14;
          *(_DWORD *)(v11 + 12) = v19;
          *(_QWORD *)v15 = v17;
          *(_DWORD *)(v15 + 12) = 0;
          goto LABEL_17;
        }
        if (v14 >= 2)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + v10, v4 + v10 + 16, *(unsigned int *)(v12 + 8), 8);
          v18 = *(unsigned int *)(v12 + 8);
          if (!(_DWORD)v18)
            goto LABEL_16;
          v16 = *(const void **)v12;
          v13 = *(void **)v11;
        }
        else
        {
          v18 = 1;
        }
        memcpy(v13, v16, 8 * v18);
LABEL_16:
        *(_DWORD *)(v11 + 8) = v14;
LABEL_17:
        *(_DWORD *)(v12 + 8) = 0;
LABEL_18:
        *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
        v10 += 32;
        if (v6 + v10 == v9)
        {
          v6 = *a2;
          goto LABEL_23;
        }
      }
    }
  }
LABEL_29:
  v23 = *((_DWORD *)a2 + 44);
  *(_BYTE *)(a1 + 180) = *((_BYTE *)a2 + 180);
  *(_DWORD *)(a1 + 176) = v23;
  return a1;
}

void sub_1C555D37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 6152);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_17;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[24 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 24;
  }
  while (v8 != v9);
LABEL_17:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v16 = 0;
      sub_1C555D0FC(a1, v10, &v16);
      v11 = v16;
      *v16 = *(_QWORD *)a2;
      sub_1C555D1AC((uint64_t)(v11 + 1), (uint64_t *)(a2 + 8));
      *(_DWORD *)a1 += 2;
      v12 = *(char **)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          v15 = *(char **)&v12[v14 - 32];
          if (&v12[v14 - 16] != v15)
            free(v15);
          v14 -= 32;
        }
        while (v14);
        v12 = *(char **)(a2 + 8);
      }
      if (v12 != (char *)(a2 + 24))
        free(v12);
    }
    a2 += 192;
  }
}

void sub_1C555D498(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;

  v21 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v21);
  v4 = *(char **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v5)
    goto LABEL_22;
  v6 = 0;
  v7 = 32 * v5;
  do
  {
    v8 = &v3[v6];
    v9 = &v4[v6];
    v10 = &v3[v6 + 16];
    *(_QWORD *)v8 = v10;
    *((_QWORD *)v8 + 1) = 0x100000000;
    if (v4 != v3)
    {
      v11 = *((_DWORD *)v9 + 2);
      if (v11)
      {
        v12 = &v4[v6];
        v14 = (uint64_t)&v4[v6 + 16];
        v13 = *(const void **)&v4[v6];
        if ((const void *)v14 != v13)
        {
          *(_QWORD *)v8 = v13;
          v16 = *((_DWORD *)v12 + 3);
          *((_DWORD *)v8 + 2) = v11;
          *((_DWORD *)v8 + 3) = v16;
          *(_QWORD *)v12 = v14;
          *((_DWORD *)v12 + 3) = 0;
          goto LABEL_10;
        }
        if (v11 >= 2)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3[v6], (uint64_t)&v3[v6 + 16], *((unsigned int *)v9 + 2), 8);
          v15 = *((unsigned int *)v9 + 2);
          if (!(_DWORD)v15)
            goto LABEL_9;
          v13 = *(const void **)v9;
          v10 = *(char **)v8;
        }
        else
        {
          v15 = 1;
        }
        memcpy(v10, v13, 8 * v15);
LABEL_9:
        *((_DWORD *)v8 + 2) = v11;
LABEL_10:
        *((_DWORD *)v9 + 2) = 0;
      }
    }
    *((_QWORD *)v8 + 3) = *((_QWORD *)v9 + 3);
    v6 += 32;
  }
  while (v7 != v6);
  v4 = *(char **)a1;
  v17 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v17)
  {
    v18 = 32 * v17;
    do
    {
      v19 = *(char **)&v4[v18 - 32];
      if (&v4[v18 - 16] != v19)
        free(v19);
      v18 -= 32;
    }
    while (v18);
    v4 = *(char **)a1;
  }
LABEL_22:
  v20 = v21;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v20;
}

void sub_1C555D610(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  if (a2 != a1)
  {
    v5 = a1;
    v6 = (_OWORD *)a3[20];
    do
    {
      v7 = a3[21];
      if ((unint64_t)v6 >= v7)
      {
        v9 = (_OWORD *)a3[19];
        v10 = v6 - v9;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60)
          abort();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 3 > v11)
          v11 = v12 >> 3;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          if (v13 >> 60)
            sub_1C4764EE4();
          v14 = (char *)operator new(16 * v13);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[16 * v10];
        *(_OWORD *)v15 = *v5;
        v16 = v15;
        if (v6 != v9)
        {
          do
          {
            *((_OWORD *)v16 - 1) = *(v6 - 1);
            v16 -= 16;
            --v6;
          }
          while (v6 != v9);
          v6 = (_OWORD *)a3[19];
        }
        v8 = v15 + 16;
        a3[19] = v16;
        a3[20] = v15 + 16;
        a3[21] = &v14[16 * v13];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v6 = *v5;
        v8 = v6 + 1;
      }
      a3[20] = v8;
      ++v5;
      v6 = v8;
    }
    while (v5 != a2);
  }
}

uint64_t *sub_1C555D740(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v11;

  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v2 = 32;
    v3 = a1 + 8;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      v9 = 0;
      return (uint64_t *)(v3 + 16 * v9);
    }
  }
  v4 = v2 - 1;
  LODWORD(v5) = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v3 + 16 * v5);
  v7 = *v6;
  if (*v6 != a2)
  {
    v8 = 1;
    while (v7 != -4096)
    {
      v11 = v5 + v8++;
      v5 = v11 & v4;
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
        return (uint64_t *)(v3 + 16 * v5);
    }
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v9 = 32;
      v3 = a1 + 8;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    return (uint64_t *)(v3 + 16 * v9);
  }
  return v6;
}

uint64_t sub_1C555D7DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C555D880(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[65];

  v14[64] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6278470(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6278470(a1, v14, v9);
}

uint64_t sub_1C555DA04()
{
  __int128 v1;
  int v2;

  v2 = 1;
  *(_QWORD *)&v1 = "Print a DAG showing the CFG unloopified representation";
  *((_QWORD *)&v1 + 1) = 54;
  sub_1C61B2D38((uint64_t)&unk_1ED806100, "print-gpucfglower-cfgunloopifier", &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED806100, &dword_1C475E000);
  v2 = 1;
  *(_QWORD *)&v1 = "Print a DAG showing the control graph";
  *((_QWORD *)&v1 + 1) = 37;
  sub_1C61B2D38((uint64_t)&unk_1ED8061C0, "print-gpucfglower-controlgraph", &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8061C0, &dword_1C475E000);
  v2 = 1;
  *(_QWORD *)&v1 = "Print a DAG showing the flow analysis";
  *((_QWORD *)&v1 + 1) = 37;
  sub_1C61B2D38((uint64_t)&algn_1ED806241[63], "print-gpucfglower-flowanalyzer", &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED806241[63], &dword_1C475E000);
}

uint64_t llvm::FlowAnalyzer::FlowAnalyzer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::TargetInstrInfo *a6)
{
  uint64_t v11;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0xA00000000;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x2000000000;
  *(_QWORD *)(a1 + 1616) = a1 + 1632;
  *(_QWORD *)(a1 + 1624) = 0x2000000000;
  *(_QWORD *)(a1 + 1760) = a1 + 1776;
  *(_QWORD *)(a1 + 1768) = 0x2000000000;
  *(_BYTE *)(a1 + 1904) = 0;
  *(_DWORD *)(a1 + 1908) = 0;
  llvm::FlowAnalyzer::analyze(a1, a2, a3, a4, a5, (uint64_t)a6);
  llvm::FlowAnalyzer::optimize(a1, a3, a4, a2, v11, a6);
  return a1;
}

void llvm::FlowAnalyzer::analyze(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  llvm::MachineBasicBlock *LoopPreheader;
  unint64_t v52;
  unsigned int *v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  llvm::MachineBasicBlock *v60;
  int v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  _WORD *v85;
  __int16 v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  _WORD *v101;
  __int16 v102;
  uint64_t v103;
  unsigned int v104;
  int *v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  int *v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  char v118;
  _BYTE *v119;
  char v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t *v129;
  int v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  _WORD *v151;
  __int16 v152;
  __int16 v153;
  _DWORD *v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  _DWORD *v162;
  BOOL v163;
  _DWORD *v164;
  uint64_t v165;
  __int16 v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  _WORD *v170;
  __int16 v171;
  __int16 v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  unsigned int *v194;
  unint64_t v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  _DWORD *v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t *v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  _BYTE v210[40];
  void *v211[2];
  _DWORD v212[14];
  uint64_t v213;

  v9 = a3;
  v213 = *MEMORY[0x1E0C80C00];
  v206 = (uint64_t *)(a1 + 64);
  v194 = (unsigned int *)(a3 + 872);
  v12 = *(_DWORD *)(a3 + 872);
  v13 = *(_DWORD *)(a1 + 72);
  if (v13 != v12)
  {
    if (v13 <= v12)
    {
      if (*(_DWORD *)(a1 + 76) < v12)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v206, a1 + 80, *(unsigned int *)(a3 + 872), 48);
        v13 = *(_DWORD *)(a1 + 72);
      }
      if (v13 != v12)
      {
        v14 = *v206 + 48 * v12;
        v15 = *v206 + 48 * v13;
        do
        {
          *(_QWORD *)v15 = 0;
          *(_QWORD *)(v15 + 8) = -1;
          *(_QWORD *)(v15 + 16) = -1;
          *(_QWORD *)(v15 + 24) = -1;
          *(_QWORD *)(v15 + 32) = 0;
          *(_DWORD *)(v15 + 40) = 0;
          *(_WORD *)(v15 + 44) &= 0xE000u;
          v15 += 48;
        }
        while (v15 != v14);
      }
    }
    *(_DWORD *)(a1 + 72) = v12;
  }
  if (v12)
  {
    v16 = 0;
    v17 = *v206;
    v18 = *v206 + 48 * v12;
    do
    {
      *(_QWORD *)v17 = a1;
      *(_DWORD *)(v17 + 8) = v16++;
      v17 += 48;
    }
    while (v17 != v18);
  }
  v192 = (_QWORD *)(a1 + 1760);
  v19 = *v194;
  v20 = *(_DWORD *)(a1 + 1768);
  if (v20 != (_DWORD)v19)
  {
    if (v20 <= v19)
    {
      if (*(_DWORD *)(a1 + 1772) < v19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v192, a1 + 1776, *v194, 4);
        v20 = *(_DWORD *)(a1 + 1768);
      }
      if (v20 != (_DWORD)v19)
        bzero((void *)(*v192 + 4 * v20), 4 * (v19 - v20));
    }
    *(_DWORD *)(a1 + 1768) = v19;
  }
  llvm::FlowAnalyzer::analyzeBranches((_QWORD *)a1, (unsigned int *)(a1 + 8), a2, v9, a4, a5, a6);
  llvm::FlowAnalyzer::constructBlockOrder(a1, v9, a4, a2, (_QWORD *)(a1 + 8));
  v21 = *(_DWORD *)(v9 + 872);
  v211[0] = v212;
  v211[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v211, (v21 + 63) >> 6, 0);
  v212[12] = v21;
  v208 = v210;
  v209 = 0xA00000000;
  v193 = *(unsigned int *)(v9 + 8);
  if ((_DWORD)v193)
  {
    v22 = 0;
    v198 = 0;
    v190 = v9 + 352;
    v191 = v9 + 88;
    v199 = a4;
    v204 = v9;
    v207 = (uint64_t)a2;
    while (1)
    {
      v23 = *(unsigned int *)(*(_QWORD *)v9 + 4 * v22);
      v24 = v22 + 1;
      v25 = (unsigned int *)(*(_QWORD *)v9 + 4 * v24);
      v195 = v24;
      if (v24 >= *(unsigned int *)(v9 + 8))
        v25 = v194;
      v205 = *v25;
      v26 = *(_QWORD *)(v9 + 864);
      v27 = *v206;
      v28 = v23 + 2 * v23;
      v29 = *v206 + 16 * v28;
      *(_DWORD *)(v29 + 24) = 0;
      v30 = (_DWORD *)(v29 + 24);
      v30[1] = 0;
      v31 = *(_DWORD *)(a4 + 264);
      if (!v31)
        goto LABEL_33;
      v32 = *(_QWORD *)(v26 + 16 * v28 + 16);
      v33 = *(_QWORD *)(a4 + 248);
      v34 = v31 - 1;
      v35 = ((v32 >> 4) ^ (v32 >> 9)) & (v31 - 1);
      v36 = *(_QWORD *)(v33 + 16 * v35);
      if (v32 != v36)
      {
        v37 = 1;
        while (v36 != -4096)
        {
          v38 = v35 + v37++;
          v35 = v38 & v34;
          v36 = *(_QWORD *)(v33 + 16 * v35);
          if (v32 == v36)
            goto LABEL_28;
        }
LABEL_33:
        v45 = 0;
        goto LABEL_61;
      }
LABEL_28:
      v39 = *(uint64_t **)(v33 + 16 * v35 + 8);
      if (!v39)
        goto LABEL_33;
      v40 = *v39;
      if (!*v39)
      {
        v46 = 0;
        goto LABEL_38;
      }
      v41 = *(_DWORD *)(v9 + 80);
      if ((v41 & 1) != 0)
      {
        v43 = 16;
        v42 = v191;
      }
      else
      {
        v42 = *(_QWORD *)(v9 + 88);
        v43 = *(_DWORD *)(v9 + 96);
        if (!v43)
        {
          v44 = 0;
LABEL_200:
          v49 = (uint64_t *)(v42 + 16 * v44);
          goto LABEL_37;
        }
      }
      v47 = v43 - 1;
      LODWORD(v48) = (v43 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      v49 = (uint64_t *)(v42 + 16 * v48);
      v50 = *v49;
      if (*v49 != v40)
      {
        v187 = 1;
        while (v50 != -4096)
        {
          v188 = v48 + v187++;
          v48 = v188 & v47;
          v50 = *(_QWORD *)(v42 + 16 * v48);
          if (v50 == v40)
          {
            v49 = (uint64_t *)(v42 + 16 * v48);
            goto LABEL_37;
          }
        }
        if ((v41 & 1) != 0)
        {
          v42 = v191;
          v44 = 16;
        }
        else
        {
          v42 = *(_QWORD *)(v9 + 88);
          v44 = *(unsigned int *)(v9 + 96);
        }
        goto LABEL_200;
      }
LABEL_37:
      v46 = *((_DWORD *)v49 + 2);
LABEL_38:
      LoopPreheader = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader((uint64_t)v39);
      v52 = *(unsigned int *)(*(_QWORD *)v9 + 4 * v46);
      v53 = (unsigned int *)(*(_QWORD *)v9 + 4 * (v46 + 1));
      if (v46 + 1 >= *(_DWORD *)(v9 + 8))
        v53 = v194;
      v54 = *v53;
      v55 = *(_DWORD *)(v9 + 344);
      if ((v55 & 1) != 0)
      {
        v57 = 16;
        v56 = v190;
        a4 = v199;
      }
      else
      {
        v56 = *(_QWORD *)(v9 + 352);
        v57 = *(_DWORD *)(v9 + 360);
        a4 = v199;
        if (!v57)
        {
          v189 = 0;
LABEL_202:
          v59 = v56 + 32 * v189;
          a4 = v199;
          v9 = v204;
          a2 = (uint64_t *)v207;
          goto LABEL_47;
        }
      }
      v58 = v57 - 1;
      v59 = v56 + 32 * (v58 & ((LoopPreheader >> 4) ^ (LoopPreheader >> 9)));
      v60 = *(llvm::MachineBasicBlock **)v59;
      if (*(llvm::MachineBasicBlock **)v59 != LoopPreheader)
      {
        v61 = 1;
        LODWORD(v62) = v58 & ((LoopPreheader >> 4) ^ (LoopPreheader >> 9));
        while (v60 != (llvm::MachineBasicBlock *)-4096)
        {
          v63 = v62 + v61++;
          v62 = v63 & v58;
          v60 = *(llvm::MachineBasicBlock **)(v56 + 32 * v62);
          if (v60 == LoopPreheader)
          {
            v59 = v56 + 32 * v62;
            goto LABEL_47;
          }
        }
        if ((v55 & 1) != 0)
        {
          v56 = v190;
          v189 = 16;
        }
        else
        {
          v56 = *(_QWORD *)(v204 + 352);
          v189 = *(unsigned int *)(v204 + 360);
        }
        goto LABEL_202;
      }
LABEL_47:
      v64 = (v55 & 1) == 0;
      v65 = v190;
      if (v64)
      {
        v65 = *(_QWORD *)(v9 + 352);
        v66 = *(unsigned int *)(v9 + 360);
      }
      else
      {
        v66 = 16;
      }
      if (v65 + 32 * v66 == v59 || (v67 = *(unsigned int *)(v59 + 16), !(_DWORD)v67))
      {
LABEL_59:
        LODWORD(v70) = -1;
      }
      else
      {
        v68 = *(unsigned int **)(v59 + 8);
        v69 = 4 * v67;
        while (1)
        {
          v70 = *v68;
          if (v70 >= v52 && v70 <= v54)
            break;
          ++v68;
          v69 -= 4;
          if (!v69)
            goto LABEL_59;
        }
      }
      v45 = *(_DWORD *)(*v206 + 48 * v70 + 28);
      *v30 = v45;
LABEL_61:
      v72 = *(unsigned __int16 *)(v27 + 48 * v23 + 44);
      v73 = v45 + ((v72 >> 7) & 1);
      if ((v72 & 0x30) != 0)
        ++v73;
      v30[1] = v73;
      v74 = v205;
      if ((_DWORD)v23 != v205)
      {
        v200 = v23;
        v75 = v23;
        while (1)
        {
          v76 = *(_QWORD *)(a1 + 1616);
          v77 = *(unsigned int *)(v76 + 4 * v75);
          v78 = *(_QWORD *)(v9 + 864);
          v79 = *(_QWORD *)(a1 + 64);
          v202 = *(_DWORD *)(v78 + 48 * v77 + 32);
          v80 = *a2 + (v77 << 6);
          v203 = *(_DWORD **)(v80 + 40);
          v201 = *(unsigned int *)(v80 + 48);
          v81 = *(_DWORD *)(*(_QWORD *)(a1 + 1760) + 4 * v77) + 1;
          if (v81 >= v74)
          {
            v83 = 0;
            goto LABEL_90;
          }
          v82 = *(unsigned int *)(v76 + 4 * v81);
          if ((*(_BYTE *)(v78 + 48 * v82 + 8) & 0x10) == 0)
          {
            v83 = 0;
            goto LABEL_89;
          }
          v84 = v79 + 48 * v77;
          v86 = *(_WORD *)(v84 + 44);
          v85 = (_WORD *)(v84 + 44);
          *v85 = v86 | 8;
          v87 = *(_DWORD *)(a4 + 264);
          if (!v87)
            goto LABEL_77;
          v88 = *(_QWORD *)(v78 + 48 * v82 + 16);
          v89 = *(_QWORD *)(a4 + 248);
          v90 = v87 - 1;
          v91 = ((v88 >> 4) ^ (v88 >> 9)) & (v87 - 1);
          v92 = *(_QWORD *)(v89 + 16 * v91);
          if (v88 != v92)
            break;
LABEL_76:
          v95 = *(uint64_t **)(v89 + 16 * v91 + 8);
LABEL_78:
          v96 = sub_1C5560C18(v95, v204, a4, *(_QWORD *)(a1 + 1616), *(unsigned int *)(a1 + 1624), *(_QWORD *)(a1 + 1760));
          if (v96 == -1)
          {
            *(_WORD *)(*v206 + 48 * v82 + 44) |= 0x100u;
            if ((*v85 & 0x80) != 0)
            {
              a2 = (uint64_t *)v207;
              if (*(_DWORD *)(*v192 + 4 * v82) + 1 >= v205)
              {
                v83 = 1;
                v9 = v204;
                goto LABEL_89;
              }
              *v85 &= ~1u;
              LODWORD(v82) = *(_DWORD *)(*(_QWORD *)(a1 + 1616)
                                       + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 1760) + 4 * v82) + 1));
              v9 = v204;
              goto LABEL_88;
            }
          }
          else
          {
            v97 = v96;
            ++*(_DWORD *)(*v206 + 48 * v96 + 40);
            if ((*v85 & 0x80) != 0)
            {
              v82 = v96;
              *v85 &= ~1u;
              if (sub_1C5560998(v207, v96, v77))
              {
                do
                {
                  v98 = *(_DWORD *)(*(_QWORD *)(a1 + 1760) + 4 * v82) + 1;
                  v99 = *(_QWORD *)(a1 + 1616);
                  v82 = *(unsigned int *)(v99 + 4 * v98);
                }
                while ((sub_1C5560998(v207, *(_DWORD *)(v99 + 4 * v98), v77) & 1) != 0);
                v97 = v82;
              }
              v9 = v204;
              *(_DWORD *)(v79 + 48 * v77 + 20) = v97;
              a2 = (uint64_t *)v207;
LABEL_88:
              ++*(_DWORD *)(*v206 + 48 * v82 + 36);
              v83 = 1;
              goto LABEL_89;
            }
          }
          v83 = 1;
          v9 = v204;
          a2 = (uint64_t *)v207;
LABEL_89:
          v74 = v205;
LABEL_90:
          if ((_DWORD)v77 != v200)
          {
            v100 = v79 + 48 * v77;
            v102 = *(_WORD *)(v100 + 44);
            v101 = (_WORD *)(v100 + 44);
            if ((v102 & 0x80) != 0)
            {
              *(_DWORD *)(v79 + 48 * v77 + 32) = ++v198;
              if ((v83 & 1) == 0 && llvm::FlowAnalyzer::doesntControlDirectlyNodes(v77, v9, a2))
                *v101 |= 1u;
              v110 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v77);
              v197 = *(_DWORD *)(*(_QWORD *)(a1 + 1616)
                               + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 1760) + 4 * v77) - 1));
              v111 = *(_QWORD *)(a1 + 64);
              v112 = v209;
              v113 = (int *)(v79 + 48 * v77 + 36);
              v114 = v111;
              do
              {
                if (!v112)
                  break;
                v115 = *((_DWORD *)v208 + v112 - 1);
                if (v115 != v110)
                {
                  if (sub_1C555FA5C(v207, *((_DWORD *)v208 + v112 - 1), v110) == -1)
                    break;
                  v114 = *v206;
                }
                if ((*(_WORD *)(v114 + 48 * v115 + 44) & 0x80) != 0)
                {
                  *(_DWORD *)(v114 + 48 * v115 + 20) = v77;
                  v116 = *v113 + 1;
                }
                else
                {
                  v116 = *v113;
                }
                *v113 = v116 + 1;
                v112 = v209 - 1;
                LODWORD(v209) = v209 - 1;
              }
              while (v115 != v110);
              v109 = v111 + 48 * v197;
            }
            else
            {
              v196 = *(_DWORD *)(*(_QWORD *)(a1 + 1616)
                               + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 1760) + 4 * v77) - 1));
              v103 = *(_QWORD *)(a1 + 64);
              v104 = v209;
              if ((_DWORD)v209)
              {
                v105 = (int *)(v79 + 48 * v77 + 36);
                do
                {
                  v106 = *((_DWORD *)v208 + v104 - 1);
                  v107 = *v206;
                  if (sub_1C555FA5C(v207, v77, v106) != -1)
                    break;
                  if ((*(_WORD *)(v107 + 48 * v106 + 44) & 0x80) != 0)
                  {
                    *(_DWORD *)(v107 + 48 * v106 + 20) = v77;
                    v108 = *v105 + 1;
                  }
                  else
                  {
                    v108 = *v105;
                  }
                  v104 = v209 - 1;
                  v64 = (_DWORD)v209 == 1;
                  LODWORD(v209) = v209 - 1;
                  *v105 = v108 + 1;
                }
                while (!v64);
              }
              v109 = v103 + 48 * v196;
            }
            *(_DWORD *)(v79 + 48 * v77 + 24) = *(_DWORD *)(v109 + 28);
            a4 = v199;
            v9 = v204;
            v74 = v205;
            a2 = (uint64_t *)v207;
          }
          llvm::FlowAnalyzer::evaluateSkipTargets((_QWORD *)a1, v77, v74, (uint64_t *)v211, a2);
          v117 = v78 + 48 * v77;
          v120 = *(_BYTE *)(v117 + 8);
          v119 = (_BYTE *)(v117 + 8);
          v118 = v120;
          if ((v120 & 0x10) == 0)
          {
            if ((v118 & 0xA) == 0)
              goto LABEL_145;
            v121 = *(_DWORD *)(a4 + 264);
            if (!v121)
              goto LABEL_124;
            v122 = *(_QWORD *)(v78 + 48 * v77 + 16);
            v123 = *(_QWORD *)(a4 + 248);
            v124 = v121 - 1;
            v125 = ((v122 >> 4) ^ (v122 >> 9)) & (v121 - 1);
            v126 = *(_QWORD *)(v123 + 16 * v125);
            if (v122 == v126)
            {
LABEL_122:
              v129 = *(uint64_t **)(v123 + 16 * v125 + 8);
            }
            else
            {
              v127 = 1;
              while (v126 != -4096)
              {
                v128 = v125 + v127++;
                v125 = v128 & v124;
                v126 = *(_QWORD *)(v123 + 16 * v125);
                if (v122 == v126)
                  goto LABEL_122;
              }
LABEL_124:
              v129 = 0;
            }
            v131 = sub_1C5560C18(v129, v9, a4, *(_QWORD *)(a1 + 1616), *(unsigned int *)(a1 + 1624), *(_QWORD *)(a1 + 1760));
            if ((*v119 & 0xA) == 2)
            {
              v132 = v79 + 48 * v77;
              v133 = *(unsigned __int16 *)(v132 + 44);
              *(_WORD *)(v132 + 44) = v133 | 0x400;
              if (v131 != -1)
              {
                v134 = v79 + 48 * v77;
                v137 = *(_DWORD *)(v134 + 12);
                v135 = (unsigned int *)(v134 + 12);
                v136 = v137;
                if (v137 < v200 || v136 >= v205)
                  ++v135;
                if (v129)
                {
                  v139 = *(_DWORD *)(v9 + 80);
                  if ((v139 & 1) != 0)
                  {
                    v141 = 16;
                    v140 = v191;
                  }
                  else
                  {
                    v140 = *(_QWORD *)(v9 + 88);
                    v141 = *(_DWORD *)(v9 + 96);
                    if (!v141)
                    {
                      v142 = 0;
                      goto LABEL_191;
                    }
                  }
                  v144 = v141 - 1;
                  LODWORD(v145) = (v141 - 1) & ((v129 >> 4) ^ (v129 >> 9));
                  v146 = v140 + 16 * v145;
                  v147 = *(uint64_t **)v146;
                  if (*(uint64_t **)v146 != v129)
                  {
                    v185 = 1;
                    while (v147 != (uint64_t *)-4096)
                    {
                      v186 = v145 + v185++;
                      v145 = v186 & v144;
                      v147 = *(uint64_t **)(v140 + 16 * v145);
                      if (v147 == v129)
                      {
                        v146 = v140 + 16 * v145;
                        goto LABEL_139;
                      }
                    }
                    if ((v139 & 1) != 0)
                    {
                      v140 = v191;
                      v142 = 16;
                    }
                    else
                    {
                      v140 = *(_QWORD *)(v9 + 88);
                      v142 = *(unsigned int *)(v9 + 96);
                    }
LABEL_191:
                    v146 = v140 + 16 * v142;
                  }
LABEL_139:
                  v143 = *(unsigned int *)(v146 + 8);
                }
                else
                {
                  v143 = 0;
                }
                v148 = *v206 + 48 * *(unsigned int *)(*(_QWORD *)v9 + 4 * v143);
                if (*(_DWORD *)(v79 + 48 * v77 + 24)
                   + ((v133 >> 7) & 1)
                   - (*(_DWORD *)(v79 + 48 * v77 + 36)
                    + 2 * *(_DWORD *)(v79 + 48 * v77 + 40)) == *(_DWORD *)(v148 + 24)
                                                                             - (*(_DWORD *)(v148 + 36)
                                                                              + 2 * *(_DWORD *)(v148 + 40))
                                                                             + ((*(unsigned __int16 *)(v148 + 44) >> 7) & 1))
                  *(_DWORD *)(*v206 + 48 * *v135 + 20) = v131;
              }
            }
            v149 = *v119;
            a2 = (uint64_t *)v207;
            if ((v149 & 8) != 0)
            {
              v150 = v79 + 48 * v77;
              v153 = *(_WORD *)(v150 + 44);
              v151 = (_WORD *)(v150 + 44);
              v152 = v153;
              *v151 = v153 | 0x200;
              if (v131 == -1)
                *v151 = v152 | 0x300;
LABEL_145:
              v149 = *v119;
            }
            if (v149 == 1)
            {
              v74 = v205;
              v154 = v203;
              if (v202 < 2)
                goto LABEL_178;
            }
            else
            {
              v74 = v205;
              v154 = v203;
              if ((v149 & 4) == 0 || v202 <= 1)
                goto LABEL_178;
            }
            v155 = v79 + 48 * v77;
            v158 = *(_DWORD *)(v155 + 16);
            v157 = (unsigned int *)(v155 + 16);
            v156 = v158;
            v159 = *(v157 - 1);
            if ((_DWORD)v201)
            {
              v160 = 4 * v201;
              v161 = 4 * v201;
              v162 = v154;
              while (*v162 != v159)
              {
                ++v162;
                v161 -= 4;
                if (!v161)
                {
                  v162 = &v154[v201];
                  break;
                }
              }
              v163 = v201 == v162 - v154;
              v164 = v154;
              while (*v164 != v156)
              {
                ++v164;
                v160 -= 4;
                if (!v160)
                {
                  v164 = &v154[v201];
                  break;
                }
              }
            }
            else
            {
              v163 = 1;
              v164 = v154;
            }
            v165 = v164 - v154;
            v166 = *(_WORD *)(*v206 + 48 * v156 + 44);
            if ((*(_WORD *)(*v206 + 48 * v159 + 44) & 0x80) != 0)
            {
              v74 = v205;
              if ((v166 & 0x80) != 0 || v165 == v201)
                goto LABEL_178;
            }
            else
            {
              if ((v166 & 0x80) == 0)
              {
                v167 = v209;
                if (v209 >= (unint64_t)HIDWORD(v209))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v208, (uint64_t)v210, v209 + 1, 4);
                  v167 = v209;
                }
                *((_DWORD *)v208 + v167) = v77;
                LODWORD(v209) = v209 + 1;
                v168 = v165 == v201 || v163;
                v169 = v79 + 48 * v77;
                v172 = *(_WORD *)(v169 + 44);
                v170 = (_WORD *)(v169 + 44);
                v171 = v172;
                if ((v168 & 1) != 0)
                {
                  *v170 = v171 | 0x10;
                  v74 = v205;
                }
                else
                {
                  *v170 = v171 | 0x20;
                  v174 = *v157;
                  v74 = v205;
                  *(_WORD *)(*v206 + 48 * v174 + 44) |= 0x40u;
                }
                goto LABEL_178;
              }
              v74 = v205;
              if (v163)
              {
LABEL_178:
                v175 = v79 + 48 * v77;
                v176 = *(_DWORD *)(v175 + 24);
                v177 = *(unsigned __int16 *)(v175 + 44);
                v179 = *(_DWORD *)(v175 + 36);
                v178 = *(_DWORD *)(v175 + 40);
                v180 = v176 - v179 - (v177 & 1);
                v64 = (v177 & 0x30) == 0;
                v181 = v177 >> 7;
                v182 = (v177 >> 7) & 1;
                v183 = (v177 >> 2) & 2;
                v184 = v181 & 2;
                if (!v64)
                  ++v180;
                v130 = v180 + v182 + v183 - (v184 + 2 * v178);
                a4 = v199;
                v9 = v204;
                goto LABEL_181;
              }
            }
            *(_WORD *)(v79 + 48 * v77 + 44) |= 0x10u;
            v173 = v209;
            if (v209 >= (unint64_t)HIDWORD(v209))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v208, (uint64_t)v210, v209 + 1, 4);
              v173 = v209;
            }
            *((_DWORD *)v208 + v173) = v77;
            LODWORD(v209) = v209 + 1;
            goto LABEL_178;
          }
          v130 = *(_DWORD *)(v79 + 48 * v77 + 24)
               - ((*(unsigned __int16 *)(v79 + 48 * v77 + 44) >> 7) & 2);
          v74 = v205;
LABEL_181:
          *(_DWORD *)(v79 + 48 * v77 + 28) = v130;
          if (++v75 == v74)
            goto LABEL_64;
        }
        v93 = 1;
        while (v92 != -4096)
        {
          v94 = v91 + v93++;
          v91 = v94 & v90;
          v92 = *(_QWORD *)(v89 + 16 * v91);
          if (v88 == v92)
            goto LABEL_76;
        }
LABEL_77:
        v95 = 0;
        goto LABEL_78;
      }
LABEL_64:
      v22 = v195;
      if (v195 == v193)
      {
        if (v208 != v210)
          free(v208);
        break;
      }
    }
  }
  if (v211[0] != v212)
    free(v211[0]);
}

void llvm::FlowAnalyzer::optimize(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, llvm::TargetInstrInfo *a6)
{
  int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (*(_BYTE *)(a1 + 1904))
  {
    if (*(_QWORD *)(a3 + 272) == *(_QWORD *)(a3 + 280))
      llvm::FlowAnalyzer::collapseEmptyUnstructuredNodes(a1, a2, a3);
    llvm::FlowAnalyzer::optimizeUnstructuredSkipping((_QWORD *)a1, a2, a4);
    llvm::FlowAnalyzer::optimizeUnstructuredLoops((_QWORD *)a1, a2, a3, a4, v11, a6);
    v12 = *(unsigned int *)(a1 + 1624);
    if ((_DWORD)v12)
    {
      v13 = *(unsigned int **)(a1 + 1616);
      v14 = *(_QWORD *)(a1 + 64);
      v15 = 4 * v12;
      v16 = 1;
      do
      {
        if ((*(_WORD *)(v14 + 48 * *v13 + 44) & 0x880) != 0)
          *(_DWORD *)(v14 + 48 * *v13 + 32) = v16++;
        ++v13;
        v15 -= 4;
      }
      while (v15);
    }
    else
    {
      v16 = 1;
    }
    *(_DWORD *)(a1 + 1908) = v16 - 1;
  }
}

_QWORD *llvm::FlowAnalyzer::analyzeBranches(_QWORD *result, unsigned int *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t **v50;
  uint64_t *v51;
  int v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  BOOL v61;
  unsigned int *v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t **v94;
  uint64_t *v95;
  int v96;
  int v97;
  unsigned int *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  _DWORD *v103;
  unsigned int v104;
  char *v105;
  char *v106;
  unsigned int *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  _DWORD *v120;
  uint64_t v121;
  _DWORD *v122;
  _BYTE *v123;
  int v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int v141;
  unsigned int *v142;
  int v143;
  int v144;
  uint64_t *v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  int v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  uint64_t v163;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t *v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  int v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  int v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int *v185;
  uint64_t v186;
  unsigned int v187;
  int v189;
  uint64_t v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t *v194;
  int v195;
  int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  uint64_t *v205;
  int v206;
  uint64_t v207;
  uint64_t *v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  int v214;
  int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  unsigned int *v227;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  int v233;
  int *v234;
  uint64_t v235;
  void *v236[2];
  _DWORD v237[14];
  void *v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  _BYTE *v242;
  uint64_t v243;
  _BYTE v244[24];
  void *v245[2];
  _BYTE v246[24];
  _QWORD *v247;
  uint64_t v248;
  _QWORD v249[5];

  v249[3] = *MEMORY[0x1E0C80C00];
  v229 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v229)
  {
    v11 = result;
    v12 = 0;
    v231 = a4 + 88;
    v234 = (int *)(a4 + 872);
    v235 = a4 + 352;
    do
    {
      v13 = *(_DWORD *)(*(_QWORD *)a4 + 4 * v12);
      v14 = v12 + 1;
      v15 = (int *)(*(_QWORD *)a4 + 4 * v14);
      v230 = v14;
      if (v14 >= *(unsigned int *)(a4 + 8))
        v15 = v234;
      v16 = *v15;
      v233 = v16;
      while (v13 != v16)
      {
        v17 = v13;
        v18 = *(_QWORD *)(a4 + 864);
        v19 = v11[8];
        v20 = *a3 + ((unint64_t)v13 << 6);
        v21 = *(_DWORD *)(v20 + 16);
        if (v21 == 1)
        {
          if ((*(_BYTE *)(*(_QWORD *)(a3[267] + 864) + 48 * **(unsigned int **)(v20 + 8) + 8) & 0x10) == 0)
            goto LABEL_9;
        }
        else if (!v21)
        {
          goto LABEL_9;
        }
        if (!*((_BYTE *)v11 + 1904))
        {
          v226 = v11;
          sub_1C4AA2F7C(a2, *((unsigned int *)a3 + 2));
          v247 = v249;
          v248 = 0x500000000;
          v211 = *((unsigned int *)a3 + 2);
          if ((_DWORD)v211)
          {
            v217 = 0;
            v55 = 0;
            v56 = 16;
            do
            {
              if (!*(_DWORD *)(*a3 + v56))
              {
                if (v217 >= HIDWORD(v248))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v247, (uint64_t)v249, v217 + 1, 4);
                  v217 = v248;
                }
                *((_DWORD *)v247 + v217) = v55;
                v217 = v248 + 1;
                LODWORD(v248) = v248 + 1;
              }
              ++v55;
              v56 += 64;
            }
            while (v211 != v55);
            v142 = (unsigned int *)v247;
            if (v217)
            {
              v227 = (unsigned int *)v247 + v217;
              do
              {
                v98 = v142;
                v99 = *v142;
                v100 = *((unsigned int *)a3 + 2);
                v245[0] = v246;
                v245[1] = (void *)0x500000000;
                sub_1C4893E04((char *)v245, v100, 0);
                v242 = v244;
                v243 = 0x500000000;
                v101 = *(_QWORD *)(*a3 + (v99 << 6) + 40);
                v238 = &v240;
                v240 = v99;
                v241 = v101;
                v239 = 0x500000001;
                v102 = *((_DWORD *)a3 + 2);
                v236[0] = v237;
                v236[1] = (void *)0x600000000;
                sub_1C4765AA4((char *)v236, (v102 + 63) >> 6, 0);
                v237[12] = v102;
                v103 = v236[0];
                *(_QWORD *)((char *)v236[0] + ((v99 >> 3) & 0x1FFFFFF8)) |= 1 << v99;
                v104 = v239;
                if ((_DWORD)v239)
                {
                  do
                  {
                    v105 = (char *)v238;
                    v106 = (char *)v238 + 16 * v104;
                    v107 = (unsigned int *)*((_QWORD *)v106 - 1);
                    v108 = *a3;
                    v109 = *a3 + ((unint64_t)*((unsigned int *)v106 - 4) << 6);
                    if (v107 == (unsigned int *)(*(_QWORD *)(v109 + 40) + 4 * *(unsigned int *)(v109 + 48)))
                    {
                      LODWORD(v239) = v104 - 1;
                      v115 = *((_DWORD *)v106 - 4);
                      v116 = v243;
                      if (v243 >= (unint64_t)HIDWORD(v243))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v242, (uint64_t)v244, v243 + 1, 4);
                        v116 = v243;
                      }
                      *(_DWORD *)&v242[4 * v116] = v115;
                      LODWORD(v243) = v243 + 1;
                      v104 = v239;
                    }
                    else
                    {
                      v111 = *v107;
                      v110 = *v107;
                      *((_QWORD *)v106 - 1) = v107 + 1;
                      v112 = 1 << v111;
                      v113 = (unint64_t)v111 >> 6;
                      v114 = *((_QWORD *)v236[0] + v113);
                      if (((1 << v111) & v114) == 0)
                      {
                        v117 = v104;
                        *((_QWORD *)v236[0] + v113) = v112 | v114;
                        v118 = *(_QWORD *)(v108 + (v110 << 6) + 40);
                        if (v104 >= HIDWORD(v239))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v238, (uint64_t)&v240, v104 + 1, 16);
                          v105 = (char *)v238;
                          v117 = v239;
                        }
                        v119 = &v105[16 * v117];
                        *(_QWORD *)v119 = v110;
                        *((_QWORD *)v119 + 1) = v118;
                        v104 = v239 + 1;
                        LODWORD(v239) = v239 + 1;
                      }
                    }
                  }
                  while (v104);
                  v103 = v236[0];
                }
                if (v103 != v237)
                  free(v103);
                if (v238 != &v240)
                  free(v238);
                v120 = v242;
                v121 = v243;
                if ((_DWORD)v243)
                {
                  v122 = &v242[4 * v243 - 4];
                  if (v242 < (_BYTE *)v122)
                  {
                    v123 = v242 + 4;
                    do
                    {
                      v124 = *((_DWORD *)v123 - 1);
                      *((_DWORD *)v123 - 1) = *v122;
                      *v122-- = v124;
                      v61 = v123 >= (_BYTE *)v122;
                      v123 += 4;
                    }
                    while (!v61);
                    v121 = v243;
                  }
                }
                if (v121)
                {
                  v125 = 0;
                  v126 = v245[0];
                  do
                  {
                    v126[v120[v125]] = v125;
                    ++v125;
                  }
                  while (v121 != v125);
                }
                v127 = *(_QWORD *)a2;
                *(_DWORD *)(*(_QWORD *)a2 + 4 * *v120) = *v120;
                v128 = v243;
                if ((_DWORD)v243 != 1)
                {
                  v129 = *a3;
                  v130 = (unsigned int *)v245[0];
                  v131 = 1;
                  do
                  {
                    v132 = v120[v131];
                    v133 = v129 + (v132 << 6);
                    v134 = *(unsigned int **)(v133 + 8);
                    v135 = v130[*v134];
                    v136 = *(_DWORD *)(v133 + 16);
                    if (v136 == 1)
                    {
                      v137 = v130[*v134];
                    }
                    else
                    {
                      v138 = 1;
                      v137 = v130[*v134];
                      do
                      {
                        v139 = v130[v134[2 * v138]];
                        if (*(_DWORD *)(v127 + 4 * v120[v139]) != -1 && v135 != v139)
                        {
                          do
                          {
                            while (v139 > v135)
                              v139 = v130[*(unsigned int *)(v127 + 4 * v120[v139])];
                            while (v135 > v139)
                              v135 = v130[*(unsigned int *)(v127 + 4 * v120[v135])];
                            v137 = v139;
                          }
                          while (v135 != v139);
                        }
                        ++v138;
                        v135 = v137;
                      }
                      while (v136 != (_DWORD)v138);
                    }
                    v141 = v120[v137];
                    if (*(_DWORD *)(v127 + 4 * v132) != v141)
                      *(_DWORD *)(v127 + 4 * v132) = v141;
                    ++v131;
                  }
                  while (v128 != (_DWORD)v131);
                }
                if (v120 != (_DWORD *)v244)
                  free(v120);
                if (v245[0] != v246)
                  free(v245[0]);
                v142 = v98 + 1;
              }
              while (v98 + 1 != v227);
              v142 = (unsigned int *)v247;
            }
            if (v142 != (unsigned int *)v249)
              free(v142);
          }
          v11 = v226;
        }
        *((_BYTE *)v11 + 1904) = 1;
        if ((*(_BYTE *)(v18 + 48 * v17 + 8) & 0x10) == 0)
          *(_WORD *)(v19 + 48 * v17 + 44) |= 0x80u;
LABEL_9:
        v22 = v18 + 48 * v17;
        v24 = *(_QWORD *)(v22 + 16);
        v23 = v22 + 16;
        result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 56))(&v238, a6, v24, a7);
        *(_WORD *)(v19 + 48 * v17 + 44) = *(_WORD *)(v19 + 48 * v17 + 44) & 0xFFFB | (4 * (BYTE1(v240) & 0x3F));
        if (!v238)
        {
          v36 = *(uint64_t **)(*(_QWORD *)v23 + 88);
          if (((*(_QWORD *)(*(_QWORD *)v23 + 96) - (_QWORD)v36) & 0x7FFFFFFF8) != 8)
            goto LABEL_63;
          v37 = *v36;
          LODWORD(v38) = *(_DWORD *)(a5 + 264);
          v39 = v37 >> 4;
          if (!(_DWORD)v38)
            goto LABEL_142;
          v40 = *(_QWORD *)(a5 + 248);
          v41 = (_DWORD)v38 - 1;
          v42 = (v39 ^ (v37 >> 9)) & ((_DWORD)v38 - 1);
          v43 = *(_QWORD *)(v40 + 16 * v42);
          if (v37 != v43)
          {
            v44 = 1;
            while (v43 != -4096)
            {
              v45 = v42 + v44++;
              v42 = v45 & v41;
              v43 = *(_QWORD *)(v40 + 16 * v42);
              if (v37 == v43)
                goto LABEL_25;
            }
LABEL_141:
            LODWORD(v38) = 0;
LABEL_142:
            v146 = *(_DWORD *)(*(_QWORD *)a4 + 4 * v38);
            v147 = (_DWORD)v38 + 1;
            v148 = *(_QWORD *)a4 + 4 * v147;
            v61 = v147 >= *(_DWORD *)(a4 + 8);
            v149 = (unsigned int *)v234;
            if (!v61)
              v149 = (unsigned int *)v148;
            v150 = *v149;
            v151 = *(_DWORD *)(a4 + 344);
            if ((v151 & 1) != 0)
            {
              v153 = 16;
              v152 = v235;
LABEL_146:
              v154 = v39 ^ (v37 >> 9);
              v155 = v153 - 1;
              v156 = (v153 - 1) & v154;
              v157 = (uint64_t *)(v152 + 32 * v156);
              v158 = *v157;
              if (*v157 != v37)
              {
                v165 = 1;
                LODWORD(v166) = v156;
                while (v158 != -4096)
                {
                  v167 = v166 + v165++;
                  v166 = v167 & v155;
                  v158 = *(_QWORD *)(v152 + 32 * v166);
                  if (v158 == v37)
                  {
                    v157 = (uint64_t *)(v152 + 32 * v166);
                    goto LABEL_147;
                  }
                }
                if ((v151 & 1) != 0)
                {
                  v220 = 16;
                  v152 = v235;
                }
                else
                {
                  v152 = *(_QWORD *)(a4 + 352);
                  v220 = *(unsigned int *)(a4 + 360);
                }
                goto LABEL_264;
              }
            }
            else
            {
              v152 = *(_QWORD *)(a4 + 352);
              v153 = *(_DWORD *)(a4 + 360);
              if (v153)
                goto LABEL_146;
              v220 = 0;
LABEL_264:
              v157 = (uint64_t *)(v152 + 32 * v220);
            }
LABEL_147:
            v159 = *(_QWORD *)(a4 + 352);
            LODWORD(v160) = *(_DWORD *)(a4 + 360);
            if ((v151 & 1) != 0)
            {
              v159 = v235;
              v160 = 16;
            }
            else
            {
              v160 = v160;
            }
            if ((uint64_t *)(v159 + 32 * v160) != v157)
            {
              v161 = *((unsigned int *)v157 + 4);
              if ((_DWORD)v161)
              {
                v162 = (unsigned int *)v157[1];
                v163 = 4 * v161;
                do
                {
                  v77 = *v162;
                  if (*v162 >= v146 && v77 <= v150)
                    break;
                  ++v162;
                  v77 = -1;
                  v163 -= 4;
                }
                while (v163);
                goto LABEL_62;
              }
            }
            goto LABEL_200;
          }
LABEL_25:
          v38 = *(uint64_t **)(v40 + 16 * v42 + 8);
          if (!v38)
            goto LABEL_142;
          v46 = *(_DWORD *)(a4 + 80);
          if ((v46 & 1) != 0)
          {
            v48 = 16;
            v47 = v231;
          }
          else
          {
            v47 = *(_QWORD *)(a4 + 88);
            v48 = *(_DWORD *)(a4 + 96);
            if (!v48)
            {
              v223 = 0;
              goto LABEL_197;
            }
          }
          v52 = v48 - 1;
          LODWORD(v223) = (v48 - 1) & ((v38 >> 4) ^ (v38 >> 9));
          v53 = (uint64_t **)(v47 + 16 * v223);
          v54 = *v53;
          if (*v53 != v38)
          {
            v195 = 1;
            while (v54 != (uint64_t *)-4096)
            {
              v196 = v223 + v195++;
              v223 = v196 & v52;
              v54 = *(uint64_t **)(v47 + 16 * v223);
              if (v54 == v38)
                goto LABEL_197;
            }
            if ((v46 & 1) != 0)
            {
              v47 = v231;
              v223 = 16;
            }
            else
            {
              v47 = *(_QWORD *)(a4 + 88);
              v223 = *(unsigned int *)(a4 + 96);
            }
LABEL_197:
            v53 = (uint64_t **)(v47 + 16 * v223);
          }
          if (*(_QWORD *)v38[4] != v37)
          {
LABEL_38:
            LODWORD(v38) = *((_DWORD *)v53 + 2);
            goto LABEL_142;
          }
          v145 = (uint64_t *)*v38;
          if (!*v38)
            goto LABEL_141;
          if ((v46 & 1) != 0)
          {
            v202 = 16;
            v201 = v231;
LABEL_216:
            v203 = v202 - 1;
            LODWORD(v204) = (v202 - 1) & ((v145 >> 4) ^ (v145 >> 9));
            v53 = (uint64_t **)(v201 + 16 * v204);
            v205 = *v53;
            if (*v53 == v145)
              goto LABEL_38;
            v214 = 1;
            while (v205 != (uint64_t *)-4096)
            {
              v215 = v204 + v214++;
              v204 = v215 & v203;
              v205 = *(uint64_t **)(v201 + 16 * v204);
              if (v205 == v145)
              {
                v53 = (uint64_t **)(v201 + 16 * v204);
                goto LABEL_38;
              }
            }
            if ((v46 & 1) != 0)
            {
              v201 = v231;
              v216 = 16;
            }
            else
            {
              v201 = *(_QWORD *)(a4 + 88);
              v216 = *(unsigned int *)(a4 + 96);
            }
          }
          else
          {
            v201 = *(_QWORD *)(a4 + 88);
            v202 = *(_DWORD *)(a4 + 96);
            if (v202)
              goto LABEL_216;
            v216 = 0;
          }
          v53 = (uint64_t **)(v201 + 16 * v216);
          goto LABEL_38;
        }
        LODWORD(v25) = *(_DWORD *)(a5 + 264);
        v26 = v238 >> 4;
        if ((_DWORD)v25)
        {
          v27 = *(_QWORD *)(a5 + 248);
          v28 = (_DWORD)v25 - 1;
          v29 = ((_DWORD)v25 - 1) & (v26 ^ (v238 >> 9));
          v30 = *(void **)(v27 + 16 * v29);
          if (v238 != v30)
          {
            v31 = 1;
            while (v30 != (void *)-4096)
            {
              v32 = v29 + v31++;
              v29 = v32 & v28;
              v30 = *(void **)(v27 + 16 * v29);
              if (v238 == v30)
                goto LABEL_15;
            }
LABEL_46:
            LODWORD(v25) = 0;
            goto LABEL_47;
          }
LABEL_15:
          v25 = *(uint64_t **)(v27 + 16 * v29 + 8);
          if (!v25)
            goto LABEL_47;
          v33 = *(_DWORD *)(a4 + 80);
          if ((v33 & 1) != 0)
          {
            v35 = 16;
            v34 = v231;
          }
          else
          {
            v34 = *(_QWORD *)(a4 + 88);
            v35 = *(_DWORD *)(a4 + 96);
            if (!v35)
            {
              v221 = 0;
              goto LABEL_85;
            }
          }
          v49 = v35 - 1;
          LODWORD(v221) = (v35 - 1) & ((v25 >> 4) ^ (v25 >> 9));
          v50 = (uint64_t **)(v34 + 16 * v221);
          v51 = *v50;
          if (*v50 != v25)
          {
            v96 = 1;
            while (v51 != (uint64_t *)-4096)
            {
              v97 = v221 + v96++;
              v221 = v97 & v49;
              v51 = *(uint64_t **)(v34 + 16 * v221);
              if (v51 == v25)
                goto LABEL_85;
            }
            if ((v33 & 1) != 0)
            {
              v34 = v231;
              v221 = 16;
            }
            else
            {
              v34 = *(_QWORD *)(a4 + 88);
              v221 = *(unsigned int *)(a4 + 96);
            }
LABEL_85:
            v50 = (uint64_t **)(v34 + 16 * v221);
          }
          if (*(void **)v25[4] != v238)
            goto LABEL_34;
          v57 = (uint64_t *)*v25;
          if (*v25)
          {
            if ((v33 & 1) != 0)
            {
              v197 = 16;
              v198 = v231;
              goto LABEL_190;
            }
            v198 = *(_QWORD *)(a4 + 88);
            v197 = *(_DWORD *)(a4 + 96);
            if (!v197)
            {
              v224 = 0;
              goto LABEL_249;
            }
LABEL_190:
            v192 = v197 - 1;
            LODWORD(v193) = (v197 - 1) & ((v57 >> 4) ^ (v57 >> 9));
            v50 = (uint64_t **)(v198 + 16 * v193);
            v194 = *v50;
            if (*v50 != v57)
            {
              v212 = 1;
              while (v194 != (uint64_t *)-4096)
              {
                v213 = v193 + v212++;
                v193 = v213 & v192;
                v194 = *(uint64_t **)(v198 + 16 * v193);
                if (v194 == v57)
                {
                  v50 = (uint64_t **)(v198 + 16 * v193);
                  goto LABEL_34;
                }
              }
              if ((v33 & 1) != 0)
              {
                v198 = v231;
                v224 = 16;
              }
              else
              {
                v198 = *(_QWORD *)(a4 + 88);
                v224 = *(unsigned int *)(a4 + 96);
              }
LABEL_249:
              v50 = (uint64_t **)(v198 + 16 * v224);
            }
LABEL_34:
            LODWORD(v25) = *((_DWORD *)v50 + 2);
            goto LABEL_47;
          }
          goto LABEL_46;
        }
LABEL_47:
        v58 = *(_DWORD *)(*(_QWORD *)a4 + 4 * v25);
        v59 = (_DWORD)v25 + 1;
        v60 = *(_QWORD *)a4 + 4 * v59;
        v61 = v59 >= *(_DWORD *)(a4 + 8);
        v62 = (unsigned int *)v234;
        if (!v61)
          v62 = (unsigned int *)v60;
        v63 = *v62;
        v64 = *(_DWORD *)(a4 + 344);
        if ((v64 & 1) != 0)
        {
          v66 = 16;
          v65 = v235;
        }
        else
        {
          v65 = *(_QWORD *)(a4 + 352);
          v66 = *(_DWORD *)(a4 + 360);
          if (!v66)
          {
            v218 = 0;
            goto LABEL_260;
          }
        }
        v67 = v26 ^ (v238 >> 9);
        v68 = v66 - 1;
        v69 = (v66 - 1) & v67;
        v70 = v65 + 32 * v69;
        v71 = *(void **)v70;
        if (*(void **)v70 == v238)
          goto LABEL_52;
        v90 = 1;
        LODWORD(v91) = v69;
        while (v71 != (void *)-4096)
        {
          v92 = v91 + v90++;
          v91 = v92 & v68;
          v71 = *(void **)(v65 + 32 * v91);
          if (v71 == v238)
          {
            v70 = v65 + 32 * v91;
            goto LABEL_52;
          }
        }
        if ((v64 & 1) != 0)
        {
          v218 = 16;
          v65 = v235;
        }
        else
        {
          v65 = *(_QWORD *)(a4 + 352);
          v218 = *(unsigned int *)(a4 + 360);
        }
LABEL_260:
        v70 = v65 + 32 * v218;
LABEL_52:
        v72 = *(_QWORD *)(a4 + 352);
        LODWORD(v73) = *(_DWORD *)(a4 + 360);
        if ((v64 & 1) != 0)
        {
          v72 = v235;
          v73 = 16;
        }
        else
        {
          v73 = v73;
        }
        if (v72 + 32 * v73 != v70)
        {
          v74 = *(unsigned int *)(v70 + 16);
          if ((_DWORD)v74)
          {
            v75 = *(unsigned int **)(v70 + 8);
            v76 = 4 * v74;
            do
            {
              v77 = *v75;
              if (*v75 >= v58 && v77 <= v63)
                break;
              ++v75;
              v77 = -1;
              v76 -= 4;
            }
            while (v76);
            goto LABEL_62;
          }
        }
LABEL_200:
        v77 = -1;
LABEL_62:
        *(_DWORD *)(v19 + 48 * v17 + 12) = v77;
LABEL_63:
        if (!v239)
          goto LABEL_182;
        LODWORD(v79) = *(_DWORD *)(a5 + 264);
        v80 = v239 >> 4;
        if ((_DWORD)v79)
        {
          v81 = *(_QWORD *)(a5 + 248);
          v82 = (_DWORD)v79 - 1;
          v83 = ((_DWORD)v79 - 1) & (v80 ^ (v239 >> 9));
          v84 = *(_QWORD *)(v81 + 16 * v83);
          if (v239 != v84)
          {
            v85 = 1;
            while (v84 != -4096)
            {
              v86 = v83 + v85++;
              v83 = v86 & v82;
              v84 = *(_QWORD *)(v81 + 16 * v83);
              if (v239 == v84)
                goto LABEL_69;
            }
LABEL_165:
            LODWORD(v79) = 0;
            goto LABEL_166;
          }
LABEL_69:
          v79 = *(uint64_t **)(v81 + 16 * v83 + 8);
          if (!v79)
            goto LABEL_166;
          v87 = *(_DWORD *)(a4 + 80);
          if ((v87 & 1) != 0)
          {
            v89 = 16;
            v88 = v231;
          }
          else
          {
            v88 = *(_QWORD *)(a4 + 88);
            v89 = *(_DWORD *)(a4 + 96);
            if (!v89)
            {
              v222 = 0;
              goto LABEL_137;
            }
          }
          v93 = v89 - 1;
          LODWORD(v222) = (v89 - 1) & ((v79 >> 4) ^ (v79 >> 9));
          v94 = (uint64_t **)(v88 + 16 * v222);
          v95 = *v94;
          if (*v94 != v79)
          {
            v143 = 1;
            while (v95 != (uint64_t *)-4096)
            {
              v144 = v222 + v143++;
              v222 = v144 & v93;
              v95 = *(uint64_t **)(v88 + 16 * v222);
              if (v95 == v79)
                goto LABEL_137;
            }
            if ((v87 & 1) != 0)
            {
              v88 = v231;
              v222 = 16;
            }
            else
            {
              v88 = *(_QWORD *)(a4 + 88);
              v222 = *(unsigned int *)(a4 + 96);
            }
LABEL_137:
            v94 = (uint64_t **)(v88 + 16 * v222);
          }
          if (*(_QWORD *)v79[4] != v239)
            goto LABEL_80;
          v168 = (uint64_t *)*v79;
          if (*v79)
          {
            if ((v87 & 1) != 0)
            {
              v200 = 16;
              v199 = v231;
            }
            else
            {
              v199 = *(_QWORD *)(a4 + 88);
              v200 = *(_DWORD *)(a4 + 96);
              if (!v200)
              {
                v225 = 0;
                goto LABEL_256;
              }
            }
            v206 = v200 - 1;
            LODWORD(v207) = (v200 - 1) & ((v168 >> 4) ^ (v168 >> 9));
            v94 = (uint64_t **)(v199 + 16 * v207);
            v208 = *v94;
            if (*v94 != v168)
            {
              v209 = 1;
              while (v208 != (uint64_t *)-4096)
              {
                v210 = v207 + v209++;
                v207 = v210 & v206;
                v208 = *(uint64_t **)(v199 + 16 * v207);
                if (v208 == v168)
                {
                  v94 = (uint64_t **)(v199 + 16 * v207);
                  goto LABEL_80;
                }
              }
              if ((v87 & 1) != 0)
              {
                v199 = v231;
                v225 = 16;
              }
              else
              {
                v199 = *(_QWORD *)(a4 + 88);
                v225 = *(unsigned int *)(a4 + 96);
              }
LABEL_256:
              v94 = (uint64_t **)(v199 + 16 * v225);
            }
LABEL_80:
            LODWORD(v79) = *((_DWORD *)v94 + 2);
            goto LABEL_166;
          }
          goto LABEL_165;
        }
LABEL_166:
        v169 = *(_DWORD *)(*(_QWORD *)a4 + 4 * v79);
        v170 = (_DWORD)v79 + 1;
        v171 = *(_QWORD *)a4 + 4 * v170;
        v61 = v170 >= *(_DWORD *)(a4 + 8);
        v172 = (unsigned int *)v234;
        if (!v61)
          v172 = (unsigned int *)v171;
        v173 = *v172;
        v174 = *(_DWORD *)(a4 + 344);
        if ((v174 & 1) != 0)
        {
          v176 = 16;
          v175 = v235;
        }
        else
        {
          v175 = *(_QWORD *)(a4 + 352);
          v176 = *(_DWORD *)(a4 + 360);
          if (!v176)
          {
            v219 = 0;
LABEL_262:
            v180 = (uint64_t *)(v175 + 32 * v219);
            goto LABEL_171;
          }
        }
        v177 = v80 ^ (v239 >> 9);
        v178 = v176 - 1;
        v179 = (v176 - 1) & v177;
        v180 = (uint64_t *)(v175 + 32 * v179);
        v181 = *v180;
        if (*v180 != v239)
        {
          v189 = 1;
          LODWORD(v190) = v179;
          while (v181 != -4096)
          {
            v191 = v190 + v189++;
            v190 = v191 & v178;
            v181 = *(_QWORD *)(v175 + 32 * v190);
            if (v181 == v239)
            {
              v180 = (uint64_t *)(v175 + 32 * v190);
              goto LABEL_171;
            }
          }
          if ((v174 & 1) != 0)
          {
            v219 = 16;
            v175 = v235;
          }
          else
          {
            v175 = *(_QWORD *)(a4 + 352);
            v219 = *(unsigned int *)(a4 + 360);
          }
          goto LABEL_262;
        }
LABEL_171:
        v182 = *(_QWORD *)(a4 + 352);
        LODWORD(v183) = *(_DWORD *)(a4 + 360);
        if ((v174 & 1) != 0)
        {
          v182 = v235;
          v183 = 16;
        }
        else
        {
          v183 = v183;
        }
        if ((uint64_t *)(v182 + 32 * v183) == v180 || (v184 = *((unsigned int *)v180 + 4), !(_DWORD)v184))
        {
LABEL_209:
          v187 = -1;
        }
        else
        {
          v185 = (unsigned int *)v180[1];
          v186 = 4 * v184;
          while (1)
          {
            v187 = *v185;
            if (*v185 >= v169 && v187 <= v173)
              break;
            ++v185;
            v186 -= 4;
            if (!v186)
              goto LABEL_209;
          }
        }
        *(_DWORD *)(v19 + 48 * v17 + 16) = v187;
LABEL_182:
        v13 = v17 + 1;
        v16 = v233;
      }
      v12 = v230;
    }
    while (v230 != v229);
  }
  return result;
}

uint64_t llvm::FlowAnalyzer::doesntControlDirectlyNodes(unsigned int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)(a2 + 864) + 48 * a1;
  v5 = *(unsigned int *)(v4 + 32);
  if (!(_DWORD)v5)
    return 1;
  v7 = *(unsigned int **)(v4 + 24);
  v8 = 4 * v5;
  while (1)
  {
    v9 = *v7;
    v10 = *a3 + (v9 << 6);
    v11 = *(_DWORD *)(v10 + 16);
    if (v11 == 1)
      break;
    if (!v11)
      goto LABEL_7;
LABEL_8:
    ++v7;
    v8 -= 4;
    if (!v8)
      return 1;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a3[267] + 864) + 48 * **(unsigned int **)(v10 + 8) + 8) & 0x10) != 0)
    goto LABEL_8;
LABEL_7:
  if (sub_1C555FA5C((uint64_t)a3, v9, a1) == -1)
    goto LABEL_8;
  return 0;
}

unint64_t sub_1C555FA5C(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[6];

  v25[5] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0xA00000000;
  sub_1C55623BC((char *)&v23, a2);
  v5 = *(unsigned int *)(a1 + 2072);
  if ((_DWORD)v5)
    bzero(*(void **)(a1 + 2064), 8 * v5);
  v6 = v24;
  if ((_DWORD)v24)
  {
    v7 = 0xFFFFFFFFLL;
    while (1)
    {
      v8 = *((unsigned int *)v23 + --v6);
      LODWORD(v24) = v6;
      v9 = *(_QWORD *)a1 + (v8 << 6);
      v10 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v10)
        break;
LABEL_13:
      if (!v6)
      {
        v16 = 0;
        v17 = 0xFF00000000;
        goto LABEL_16;
      }
    }
    v11 = *(_QWORD **)(v9 + 8);
    v12 = 8 * v10;
    while (1)
    {
      v13 = *(unsigned int *)v11;
      if ((_DWORD)v13 == a3)
        break;
      v14 = *(_QWORD *)(a1 + 2064);
      v15 = *(_QWORD *)(v14 + 8 * (v13 >> 6));
      if ((v15 & (1 << v13)) == 0)
      {
        *(_QWORD *)(v14 + 8 * (v13 >> 6)) = v15 | (1 << v13);
        if (v6 >= HIDWORD(v24))
        {
          v21 = v13;
          v22 = v11;
          v20 = v12;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v6 + 1, 4);
          v12 = v20;
          LODWORD(v13) = v21;
          v11 = v22;
          v7 = 0xFFFFFFFFLL;
          v6 = v24;
        }
        *((_DWORD *)v23 + v6) = v13;
        v6 = v24 + 1;
        LODWORD(v24) = v24 + 1;
      }
      ++v11;
      v12 -= 8;
      if (!v12)
        goto LABEL_13;
    }
    v16 = *v11 & 0xFFFFFF0000000000;
    v17 = *v11 & 0xFF00000000;
    v7 = *v11;
  }
  else
  {
    v16 = 0;
    v17 = 0xFF00000000;
    v7 = 0xFFFFFFFFLL;
  }
LABEL_16:
  if (v23 != v25)
  {
    v19 = v7;
    free(v23);
    v7 = v19;
  }
  return v17 | v7 | v16;
}

void llvm::FlowAnalyzer::constructBlockOrder(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *i;
  unsigned int v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  _DWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unsigned int v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  int v92;
  BOOL v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  unint64_t v108;
  int v109;
  BOOL v110;
  char *v111;
  uint64_t v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v125;
  unint64_t v126;
  unsigned int v128;
  void *v129;
  uint64_t v130;
  _DWORD v131[32];
  char *v132;
  unint64_t v133;
  _BYTE v134[768];
  _BYTE *v135;
  uint64_t v136;
  _BYTE v137[64];
  _QWORD **v138;
  _QWORD *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  _QWORD v143[18];

  v6 = a2;
  v143[16] = *MEMORY[0x1E0C80C00];
  v8 = a1 + 1616;
  v9 = *(unsigned int *)(a2 + 872);
  if (*(_DWORD *)(a1 + 1628) < v9)
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1616, a1 + 1632, v9, 4);
  v117 = v8;
  v120 = *(unsigned int *)(v6 + 8);
  if ((_DWORD)v120)
  {
    v10 = 0;
    v11 = 0;
    v12 = (int *)(v6 + 872);
    v125 = v6;
    v118 = (int *)(v6 + 872);
    v119 = a3;
    do
    {
      v123 = v11;
      v13 = *(unsigned int *)(*(_QWORD *)v6 + 4 * v10);
      v14 = v10 + 1;
      v15 = (int *)(*(_QWORD *)v6 + 4 * v14);
      v122 = v14;
      if (v14 >= *(unsigned int *)(v6 + 8))
        v15 = v12;
      v16 = *v15;
      v17 = (*v15 - v13);
      v18 = v17;
      v141 = (char *)v143;
      v142 = 0x200000000;
      v132 = v134;
      v133 = 0x2000000000;
      v126 = v13;
      v121 = v16;
      if (v17 < 0x21)
      {
        if (v16 != (_DWORD)v13)
        {
          v114 = v134;
          do
          {
            *v114 = v114 + 2;
            v114[1] = 0x200000000;
            if ((_DWORD)v142)
            {
              v114 = (_QWORD *)sub_1C62249BC((uint64_t)v114, (uint64_t)&v141);
              v13 = v126;
            }
            v114 += 3;
            --v17;
          }
          while (v17);
        }
        LODWORD(v133) = v18;
      }
      else
      {
        v129 = 0;
        v19 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v132, (v16 - v13), 24, (unint64_t *)&v129);
        v20 = 0;
        do
        {
          v21 = &v19[v20];
          *(_QWORD *)v21 = &v19[v20 + 16];
          *((_QWORD *)v21 + 1) = 0x200000000;
          if ((_DWORD)v142)
            sub_1C62249BC((uint64_t)v21, (uint64_t)&v141);
          v20 += 24;
        }
        while (24 * v17 != v20);
        v22 = v132;
        if ((_DWORD)v133)
        {
          v115 = 24 * v133;
          do
          {
            v116 = *(char **)&v22[v115 - 24];
            if (&v22[v115 - 8] != v116)
              free(v116);
            v115 -= 24;
          }
          while (v115);
          v22 = v132;
        }
        v23 = v129;
        v13 = v126;
        if (v22 != v134)
        {
          free(v22);
          v13 = v126;
        }
        v132 = v19;
        v133 = __PAIR64__(v23, v18);
        v6 = v125;
      }
      if (v141 != (char *)v143)
      {
        free(v141);
        v13 = v126;
      }
      v129 = v131;
      v130 = 0x2000000000;
      v141 = (char *)v143;
      v143[0] = v13;
      v142 = 0x1000000001;
      v135 = v137;
      v136 = 0x1000000000;
      v139 = 0;
      v140 = 0;
      LODWORD(v24) = 1;
      v138 = &v139;
      do
      {
        while (1)
        {
          v25 = v141;
          v26 = &v141[8 * v24];
          v27 = *((_DWORD *)v26 - 2);
          v28 = *(v26 - 4);
          v29 = *(_QWORD *)(v6 + 864) + 48 * v27;
          if (*(_DWORD *)(v29 + 32) == (_DWORD)v28)
            break;
          v31 = *(_QWORD *)(v29 + 24);
          v32 = *(unsigned int *)(v31 + 4 * v28);
          v128 = *(_DWORD *)(v31 + 4 * v28);
          *(v26 - 4) = v28 + 1;
          if (v140)
          {
            for (i = v139; i; i = (_QWORD *)*i)
            {
              v34 = *((_DWORD *)i + 7);
              if (v32 >= v34)
              {
                if (v34 >= v32)
                  goto LABEL_43;
                ++i;
              }
            }
          }
          else if ((_DWORD)v136)
          {
            v35 = v135;
            v36 = 4 * v136;
            while (*v35 != (_DWORD)v32)
            {
              ++v35;
              v36 -= 4;
              if (!v36)
                goto LABEL_40;
            }
            if (v36)
              goto LABEL_43;
          }
LABEL_40:
          v24 = v24;
          if (v24 >= HIDWORD(v142))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v24 + 1, 8);
            v25 = v141;
            v24 = v142;
          }
          v25[v24] = v32;
          LODWORD(v142) = v142 + 1;
LABEL_43:
          sub_1C48302EC((uint64_t)&v135, &v128);
          LODWORD(v24) = v142;
          if (!(_DWORD)v142)
            goto LABEL_44;
        }
        v30 = v130;
        if (v130 >= (unint64_t)HIDWORD(v130))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, (uint64_t)v131, v130 + 1, 4);
          v30 = v130;
        }
        *((_DWORD *)v129 + v30) = v27;
        LODWORD(v130) = v130 + 1;
        LODWORD(v24) = v142 - 1;
        LODWORD(v142) = v24;
      }
      while ((_DWORD)v24);
LABEL_44:
      sub_1C47655E8((uint64_t)&v138, v139);
      if (v135 != v137)
        free(v135);
      if (v141 != (char *)v143)
        free(v141);
      v37 = (unsigned int *)v129;
      v38 = (unsigned int *)((char *)v129 + 4 * v130);
      v39 = v126;
      if ((_DWORD)v130)
      {
        while (1)
        {
          v40 = *v37;
          v41 = *a4 + (v40 << 6);
          v42 = *(_DWORD *)(v41 + 16);
          if (v42
            && (v42 != 1
             || (*(_BYTE *)(*(_QWORD *)(a4[267] + 864) + 48 * **(unsigned int **)(v41 + 8) + 8) & 0x10) != 0))
          {
            v43 = &v132[24 * (*(_DWORD *)(*a5 + 4 * v40) - v39)];
            v44 = *((unsigned int *)v43 + 2);
            if (v44 >= *((unsigned int *)v43 + 3))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132[24 * (*(_DWORD *)(*a5 + 4 * v40) - v39)], (uint64_t)(v43 + 16), v44 + 1, 4);
              v39 = v126;
              v44 = *((unsigned int *)v43 + 2);
            }
            *(_DWORD *)(*(_QWORD *)v43 + 4 * v44) = v40;
            ++*((_DWORD *)v43 + 2);
          }
          v45 = *(_QWORD *)(a1 + 64);
          v46 = &v132[24 * (v40 - v39)];
          v47 = *(_QWORD *)(v125 + 864) + 48 * v40;
          v48 = *(const void **)(v47 + 24);
          v49 = *(unsigned int *)(v47 + 32);
          v50 = *((unsigned int *)v46 + 2);
          if (v49 + v50 > (unint64_t)*((unsigned int *)v46 + 3))
            break;
          v51 = *((_DWORD *)v46 + 2);
          if ((_DWORD)v49)
            goto LABEL_57;
LABEL_58:
          v52 = v51 + v49;
          *((_DWORD *)v46 + 2) = v52;
          v53 = *(_DWORD *)(v45 + 48 * v40 + 16);
          if (v53 != -1)
          {
            v54 = (_DWORD *)(*(_QWORD *)v46 + 4 * v50);
            v55 = *(_QWORD *)v46 + 4 * v52;
            v56 = v54;
            if ((_DWORD)v50 != (_DWORD)v52)
            {
              v57 = 4 * v52 - 4 * v50;
              v56 = (_DWORD *)(*(_QWORD *)v46 + 4 * v50);
              while (*v56 != v53)
              {
                ++v56;
                v57 -= 4;
                if (!v57)
                {
                  v56 = (_DWORD *)v55;
                  break;
                }
              }
            }
            if (v56 != (_DWORD *)v55)
            {
              v58 = *v54;
              *v54 = *v56;
              *v56 = v58;
            }
          }
          if (++v37 == v38)
          {
            v37 = (unsigned int *)v129;
            goto LABEL_70;
          }
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132[24 * (v40 - v39)], (uint64_t)(v46 + 16), v49 + v50, 4);
        v39 = v126;
        v51 = *((_DWORD *)v46 + 2);
        if (!(_DWORD)v49)
          goto LABEL_58;
LABEL_57:
        memcpy((void *)(*(_QWORD *)v46 + 4 * v51), v48, 4 * v49);
        v39 = v126;
        v51 = *((_DWORD *)v46 + 2);
        goto LABEL_58;
      }
LABEL_70:
      if (v37 != v131)
      {
        free(v37);
        v39 = v126;
      }
      v141 = (char *)v143;
      v143[0] = v39;
      v142 = 0xA00000001;
      v12 = v118;
      v59 = *v118;
      v129 = v131;
      v130 = 0x600000000;
      sub_1C4765AA4((char *)&v129, (v59 + 63) >> 6, 0);
      v6 = v125;
      v60 = v126;
      v131[12] = v59;
      *(_QWORD *)((char *)v129 + ((v126 >> 3) & 0x1FFFFFF8)) |= 1 << v126;
      LODWORD(v61) = v142;
      if ((_DWORD)v142)
      {
        while (2)
        {
          while (1)
          {
            v62 = v141;
            v63 = &v141[8 * v61];
            v64 = *((unsigned int *)v63 - 2);
            v65 = *((_DWORD *)v63 - 1);
            v66 = &v132[24 * (v64 - v60)];
            v67 = *((_DWORD *)v66 + 2);
            if (v67 == v65)
              break;
            v80 = *(_QWORD *)v66;
            v81 = v129;
            v82 = v67 - 1;
            do
            {
              *((_DWORD *)v63 - 1) = v65 + 1;
              v83 = *(unsigned int *)(v80 + 4 * v65);
              if (((*(_QWORD *)((char *)v81 + ((v83 >> 3) & 0x1FFFFFF8)) >> v83) & 1) != 0)
                v84 = 0xFFFFFFFFLL;
              else
                v84 = v83;
              if (v82 == v65)
                break;
              ++v65;
            }
            while ((_DWORD)v84 == -1);
            v61 = v142;
            if ((_DWORD)v84 != -1)
            {
              v81[v84 >> 6] |= 1 << v84;
              if (v61 >= HIDWORD(v142))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v61 + 1, 8);
                v60 = v126;
                v62 = v141;
                LODWORD(v61) = v142;
              }
              v62[v61] = v84;
              LODWORD(v61) = v142 + 1;
              LODWORD(v142) = v142 + 1;
            }
            if (!(_DWORD)v61)
              goto LABEL_127;
          }
          v68 = *(_QWORD *)(v125 + 864);
          v69 = *(_QWORD *)(a1 + 64);
          v70 = *(unsigned __int8 *)(v68 + 48 * v64 + 8);
          if ((v70 & 8) != 0)
          {
            v85 = *(_QWORD *)(v68 + 48 * v64 + 16);
            v86 = *(_QWORD *)(v119 + 248);
            v87 = *(_DWORD *)(v119 + 264) - 1;
            v88 = ((v85 >> 4) ^ (v85 >> 9)) & v87;
            v89 = (_QWORD *)(v86 + 16 * v88);
            v90 = *v89;
            if (v85 != *v89)
            {
              v91 = 0;
              v92 = 1;
              while (v90 != -4096)
              {
                if (v91)
                  v93 = 0;
                else
                  v93 = v90 == -8192;
                if (v93)
                  v91 = v89;
                v94 = v88 + v92++;
                v88 = v94 & v87;
                v89 = (_QWORD *)(v86 + 16 * (v94 & v87));
                v90 = *v89;
                if (v85 == *v89)
                  goto LABEL_106;
              }
              if (v91)
                v89 = v91;
            }
LABEL_106:
            v95 = *(_DWORD *)(v69 + 48 * v64 + 12);
            if (**(_QWORD **)(v89[1] + 32) != *(_QWORD *)(v68 + 48 * v95 + 16))
            {
LABEL_123:
              v61 = v69 + 48 * v64;
              *(_DWORD *)(v61 + 12) = *(_DWORD *)(v61 + 16);
              *(_DWORD *)(v61 + 16) = v95;
              *(_WORD *)(v61 + 44) ^= 4u;
              LODWORD(v61) = v142;
            }
          }
          else if ((v70 & 0x12) == 2)
          {
            v71 = *(_DWORD *)(v119 + 264);
            if (v71)
            {
              v72 = *(_QWORD *)(v68 + 48 * v64 + 16);
              v73 = *(_QWORD *)(v119 + 248);
              v74 = v71 - 1;
              v75 = ((v72 >> 4) ^ (v72 >> 9)) & v74;
              v76 = *(_QWORD *)(v73 + 16 * v75);
              if (v72 == v76)
              {
LABEL_81:
                v79 = *(_QWORD *)(v73 + 16 * v75 + 8);
              }
              else
              {
                v77 = 1;
                while (v76 != -4096)
                {
                  v78 = v75 + v77++;
                  v75 = v78 & v74;
                  v76 = *(_QWORD *)(v73 + 16 * v75);
                  if (v72 == v76)
                    goto LABEL_81;
                }
                v79 = 0;
              }
              v95 = *(_DWORD *)(v69 + 48 * v64 + 12);
              v97 = *(_QWORD *)(v68 + 48 * v95 + 16);
              v98 = ((v97 >> 4) ^ (v97 >> 9)) & v74;
              v99 = *(_QWORD *)(v73 + 16 * v98);
              if (v97 == v99)
              {
LABEL_120:
                v102 = *(_QWORD *)(v73 + 16 * v98 + 8);
              }
              else
              {
                v100 = 1;
                while (v99 != -4096)
                {
                  v101 = v98 + v100++;
                  v98 = v101 & v74;
                  v99 = *(_QWORD *)(v73 + 16 * v98);
                  if (v97 == v99)
                    goto LABEL_120;
                }
                v102 = 0;
              }
              if (v102 != v79)
                goto LABEL_123;
            }
          }
          else if ((v70 == 1 || (v70 & 4) != 0) && *(_DWORD *)(v68 + 48 * v64 + 32) >= 2u)
          {
            v95 = *(_DWORD *)(v69 + 48 * v64 + 12);
            if (v95 != *(_DWORD *)(*(_QWORD *)(a1 + 1616) + 4 * *(unsigned int *)(a1 + 1624) - 4))
              goto LABEL_123;
          }
          LODWORD(v142) = v61 - 1;
          v103 = *((_DWORD *)v63 - 2);
          v61 = *(unsigned int *)(a1 + 1624);
          if (v61 >= *(unsigned int *)(a1 + 1628))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v117, a1 + 1632, v61 + 1, 4);
            v60 = v126;
            v61 = *(unsigned int *)(a1 + 1624);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 1616) + 4 * v61) = v103;
          v104 = *(_DWORD *)(a1 + 1624);
          *(_DWORD *)(a1 + 1624) = v104 + 1;
          *(_DWORD *)(*(_QWORD *)(a1 + 1760) + 4 * *((unsigned int *)v63 - 2)) = v121 + v123 + ~v104;
          LODWORD(v61) = v142;
          if (!(_DWORD)v142)
            break;
          continue;
        }
      }
LABEL_127:
      v105 = *(unsigned int *)(a1 + 1624);
      if (v123 != (_DWORD)v105)
      {
        v106 = *(_QWORD *)(a1 + 1616);
        v107 = (_DWORD *)(v106 + 4 * v105 - 4);
        if (v106 + 4 * (unint64_t)v123 < (unint64_t)v107)
        {
          v108 = v106 + 4 * v123 + 4;
          do
          {
            v109 = *(_DWORD *)(v108 - 4);
            *(_DWORD *)(v108 - 4) = *v107;
            *v107-- = v109;
            v110 = v108 >= (unint64_t)v107;
            v108 += 4;
          }
          while (!v110);
          LODWORD(v105) = *(_DWORD *)(a1 + 1624);
        }
      }
      if (v129 != v131)
        free(v129);
      if (v141 != (char *)v143)
        free(v141);
      v111 = v132;
      if ((_DWORD)v133)
      {
        v112 = 24 * v133;
        do
        {
          v113 = *(char **)&v111[v112 - 24];
          if (&v111[v112 - 8] != v113)
            free(v113);
          v112 -= 24;
        }
        while (v112);
        v111 = v132;
      }
      if (v111 != v134)
        free(v111);
      v11 = v105;
      v10 = v122;
    }
    while (v122 != v120);
  }
}

void llvm::FlowAnalyzer::evaluateSkipTargets(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a1[8];
  if ((*(_WORD *)(v6 + 48 * a2 + 44) & 0x101) != 0)
    return;
  v7 = v6 + 48 * a2;
  v9 = *(_DWORD *)(v7 + 20);
  v8 = (unsigned int *)(v7 + 20);
  if (v9 != -1)
    return;
  if (((*(_QWORD *)(*a4 + 8 * (a2 >> 6)) >> a2) & 1) != 0)
    return;
  if (!*(_DWORD *)(*a5 + ((unint64_t)a2 << 6) + 16))
    return;
  v32 = v34;
  v33 = 0x1000000000;
  v15 = *(_DWORD *)(a1[220] + 4 * a2) + 1;
  if (v15 >= a3)
    return;
  v16 = *(_DWORD *)(a1[202] + 4 * v15);
  if (v16 == -1 || v16 == a3)
    return;
  while (1)
  {
    if (v16 == a2)
      goto LABEL_40;
    v19 = *a5 + ((unint64_t)v16 << 6);
    v20 = *(unsigned int *)(v19 + 16);
    v21 = *a5 + (v5 << 6);
    if ((_DWORD)v20 != *(_DWORD *)(v21 + 16))
      goto LABEL_25;
    if (!(_DWORD)v20)
    {
LABEL_40:
    {
LABEL_12:
      v18 = v33;
      if (v33 >= (unint64_t)HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v33 + 1, 4);
        v18 = v33;
      }
    }
      *((_DWORD *)v32 + v18) = v16;
      LODWORD(v33) = v33 + 1;
    }
    else
    {
      v22 = *(_QWORD *)(v19 + 8);
      v23 = v22 + 8 * v20;
      v24 = *(_QWORD *)(v21 + 8);
      while (*(_DWORD *)v22 == *(_DWORD *)v24 && *(unsigned __int8 *)(v22 + 4) == *(unsigned __int8 *)(v24 + 4))
      {
        v22 += 8;
        v24 += 8;
        if (v22 == v23)
          goto LABEL_12;
      }
    }
LABEL_25:
    if ((sub_1C5560998((uint64_t)a5, v16, v5) & 1) == 0)
      break;
    v26 = *(_DWORD *)(a1[220] + 4 * v16) + 1;
    if (v26 < a3)
    {
      v16 = *(_DWORD *)(a1[202] + 4 * v26);
      if (v16 != -1 && v16 != a3)
        continue;
    }
    v28 = (char *)v32;
    goto LABEL_36;
  }
  *v8 = v16;
  v28 = (char *)v32;
  if ((_DWORD)v33)
  {
    v29 = 0;
    v30 = *a4;
    v31 = 4 * v33;
    do
    {
      *(_QWORD *)(v30 + (((unint64_t)*(unsigned int *)&v28[v29] >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)&v28[v29];
      v29 += 4;
    }
    while (v31 != v29);
  }
LABEL_36:
  if (v28 != (char *)v34)
    free(v28);
}

uint64_t sub_1C5560998(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  uint64_t v30;
  _BYTE v31[16];
  void *v32[2];
  _DWORD v33[14];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    return 1;
  v6 = *(_QWORD *)a1 + ((unint64_t)a2 << 6);
  v7 = *(unsigned int *)(v6 + 16);
  v8 = *(_QWORD *)a1 + ((unint64_t)a3 << 6);
  v9 = v8 + 8;
  if ((_DWORD)v7 == *(_DWORD *)(v8 + 16))
  {
    if (!(_DWORD)v7)
      return 1;
    v10 = *(_QWORD *)(v6 + 8);
    v11 = v10 + 8 * v7;
    for (i = *(_QWORD *)v9;
          *(_DWORD *)v10 == *(_DWORD *)i && *(unsigned __int8 *)(v10 + 4) == *(unsigned __int8 *)(i + 4);
          i += 8)
    {
      v10 += 8;
      if (v10 == v11)
        return 1;
    }
  }
  v14 = *(_DWORD *)(a1 + 8);
  v32[0] = v33;
  v32[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v32, (v14 + 63) >> 6, 0);
  v33[12] = v14;
  v29 = v31;
  v30 = 0x400000000;
  sub_1C55623BC((char *)&v29, a2);
  v15 = v30;
  if ((_DWORD)v30)
  {
    do
    {
      v16 = *((unsigned int *)v29 + --v15);
      LODWORD(v30) = v15;
      v17 = *(_QWORD *)a1 + (v16 << 6);
      v18 = *(unsigned int *)(v17 + 16);
      v3 = *(_DWORD *)(v17 + 16) != 0;
      if (!(_DWORD)v18)
        break;
      v19 = *(uint64_t **)(v17 + 8);
      v20 = &v19[v18];
      do
      {
        v21 = *v19;
        v22 = *(_QWORD *)v9;
        v23 = *(unsigned int *)(v9 + 8);
        if ((_DWORD)v23)
        {
          v24 = 8 * v23;
          v25 = *(_QWORD *)v9;
          while (__PAIR64__(*(unsigned __int8 *)(v25 + 4), *(_DWORD *)v25) != __PAIR64__(BYTE4(v21), v21))
          {
            v25 += 8;
            v24 -= 8;
            if (!v24)
            {
              v25 = v22 + 8 * v23;
              break;
            }
          }
        }
        else
        {
          v25 = *(_QWORD *)v9;
        }
        if (v23 == (v25 - v22) >> 3)
        {
          v26 = v21 >> 6;
          v27 = *((_QWORD *)v32[0] + v26);
          if ((v27 & (1 << v21)) == 0)
          {
            *((_QWORD *)v32[0] + v26) = v27 | (1 << v21);
            if (v15 >= HIDWORD(v30))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v15 + 1, 4);
              v15 = v30;
            }
            *((_DWORD *)v29 + v15) = v21;
            v15 = v30 + 1;
            LODWORD(v30) = v30 + 1;
          }
        }
        ++v19;
      }
      while (v19 != v20);
    }
    while (v15);
  }
  else
  {
    v3 = 1;
  }
  if (v29 != v31)
    free(v29);
  if (v32[0] != v33)
    free(v32[0]);
  return v3;
}

uint64_t sub_1C5560C18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int *v86;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  _QWORD v94[5];

  v94[4] = *MEMORY[0x1E0C80C00];
  v92 = v94;
  v93 = 0x400000000;
  llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlocks(a1, (uint64_t)&v92);
  if ((_DWORD)v93)
  {
    v11 = v92;
    v12 = *(_QWORD *)v92;
    if (*(_QWORD *)v92)
    {
      v13 = 8;
      while (8 * v93 != v13)
      {
        v14 = *(_QWORD *)((char *)v92 + v13);
        v13 += 8;
        if (v14 != v12)
          goto LABEL_6;
      }
      v49 = *(_DWORD *)(a3 + 264);
      v50 = v12 >> 4;
      if (!v49)
        goto LABEL_60;
      v51 = *(_QWORD *)(a3 + 248);
      v52 = v49 - 1;
      v53 = (v49 - 1) & (v50 ^ (v12 >> 9));
      v54 = *(_QWORD *)(v51 + 16 * v53);
      if (v12 != v54)
      {
        v55 = 1;
        while (v54 != -4096)
        {
          v56 = v53 + v55++;
          v53 = v56 & v52;
          v54 = *(_QWORD *)(v51 + 16 * v53);
          if (v12 == v54)
            goto LABEL_56;
        }
        goto LABEL_60;
      }
LABEL_56:
      v57 = *(_QWORD *)(v51 + 16 * v53 + 8);
      if (!v57)
      {
LABEL_60:
        v62 = 0;
        goto LABEL_71;
      }
      v58 = *(_DWORD *)(a2 + 80);
      if ((v58 & 1) != 0)
      {
        v60 = 16;
        v59 = a2 + 88;
      }
      else
      {
        v59 = *(_QWORD *)(a2 + 88);
        v60 = *(_DWORD *)(a2 + 96);
        if (!v60)
        {
          v61 = 0;
          goto LABEL_104;
        }
      }
      v65 = v60 - 1;
      LODWORD(v66) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      v67 = (uint64_t *)(v59 + 16 * v66);
      v68 = *v67;
      if (*v67 == v57)
      {
LABEL_70:
        v62 = *((_DWORD *)v67 + 2);
LABEL_71:
        if (v62 + 1 >= *(_DWORD *)(a2 + 8))
          v69 = (_DWORD *)(a2 + 872);
        else
          v69 = (_DWORD *)(*(_QWORD *)a2 + 4 * (v62 + 1));
        v70 = *(_DWORD *)(a2 + 344);
        if ((v70 & 1) != 0)
        {
          v72 = 16;
          v71 = a2 + 352;
        }
        else
        {
          v71 = *(_QWORD *)(a2 + 352);
          v72 = *(_DWORD *)(a2 + 360);
          if (!v72)
          {
            v91 = 0;
            goto LABEL_110;
          }
        }
        v73 = v50 ^ (v12 >> 9);
        v74 = v72 - 1;
        v75 = (v72 - 1) & v73;
        v76 = (uint64_t *)(v71 + 32 * v75);
        v77 = *v76;
        if (*v76 == v12)
          goto LABEL_81;
        v78 = 1;
        LODWORD(v79) = v75;
        while (v77 != -4096)
        {
          v80 = v79 + v78++;
          v79 = v80 & v74;
          v77 = *(_QWORD *)(v71 + 32 * v79);
          if (v77 == v12)
          {
            v76 = (uint64_t *)(v71 + 32 * v79);
            goto LABEL_81;
          }
        }
        if ((v70 & 1) != 0)
        {
          v91 = 16;
          v71 = a2 + 352;
        }
        else
        {
          v71 = *(_QWORD *)(a2 + 352);
          v91 = *(unsigned int *)(a2 + 360);
        }
LABEL_110:
        v76 = (uint64_t *)(v71 + 32 * v91);
LABEL_81:
        v81 = *(_QWORD *)(a2 + 352);
        LODWORD(v82) = *(_DWORD *)(a2 + 360);
        if ((v70 & 1) != 0)
        {
          v81 = a2 + 352;
          v82 = 16;
        }
        else
        {
          v82 = v82;
        }
        if ((uint64_t *)(v81 + 32 * v82) != v76)
        {
          v83 = *((unsigned int *)v76 + 4);
          if ((_DWORD)v83)
          {
            v84 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v62);
            v85 = 4 * v83;
            v86 = (unsigned int *)v76[1];
            do
            {
              v46 = *v86;
              if (v46 >= v84 && v46 <= *v69)
                break;
              ++v86;
              v46 = 0xFFFFFFFFLL;
              v85 -= 4;
            }
            while (v85);
            goto LABEL_48;
          }
        }
LABEL_47:
        v46 = 0xFFFFFFFFLL;
        goto LABEL_48;
      }
      v88 = 1;
      while (v68 != -4096)
      {
        v89 = v66 + v88++;
        v66 = v89 & v65;
        v68 = *(_QWORD *)(v59 + 16 * v66);
        if (v68 == v57)
        {
          v67 = (uint64_t *)(v59 + 16 * v66);
          goto LABEL_70;
        }
      }
      if ((v58 & 1) != 0)
      {
        v61 = 16;
        v59 = a2 + 88;
      }
      else
      {
        v59 = *(_QWORD *)(a2 + 88);
        v61 = *(unsigned int *)(a2 + 96);
      }
LABEL_104:
      v67 = (uint64_t *)(v59 + 16 * v61);
      goto LABEL_70;
    }
  }
LABEL_6:
  v15 = *a1;
  if (!*a1)
  {
    v20 = 0;
    goto LABEL_14;
  }
  v16 = *(_DWORD *)(a2 + 80);
  if ((v16 & 1) != 0)
  {
    v18 = 16;
    v17 = a2 + 88;
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 88);
    v18 = *(_DWORD *)(a2 + 96);
    if (!v18)
    {
      v19 = 0;
LABEL_95:
      v23 = (uint64_t *)(v17 + 16 * v19);
      goto LABEL_13;
    }
  }
  v21 = v18 - 1;
  LODWORD(v22) = (v18 - 1) & ((v15 >> 4) ^ (v15 >> 9));
  v23 = (uint64_t *)(v17 + 16 * v22);
  v24 = *v23;
  if (*v23 != v15)
  {
    v63 = 1;
    while (v24 != -4096)
    {
      v64 = v22 + v63++;
      v22 = v64 & v21;
      v24 = *(_QWORD *)(v17 + 16 * v22);
      if (v24 == v15)
      {
        v23 = (uint64_t *)(v17 + 16 * v22);
        goto LABEL_13;
      }
    }
    if ((v16 & 1) != 0)
    {
      v19 = 16;
      v17 = a2 + 88;
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 88);
      v19 = *(unsigned int *)(a2 + 96);
    }
    goto LABEL_95;
  }
LABEL_13:
  v20 = *((_DWORD *)v23 + 2);
LABEL_14:
  v25 = *(_QWORD *)a1[4];
  if (v20 + 1 >= *(_DWORD *)(a2 + 8))
    v26 = (unsigned int *)(a2 + 872);
  else
    v26 = (unsigned int *)(*(_QWORD *)a2 + 4 * (v20 + 1));
  v27 = *(_DWORD *)(a2 + 344);
  if ((v27 & 1) != 0)
  {
    v29 = 16;
    v28 = a2 + 352;
  }
  else
  {
    v28 = *(_QWORD *)(a2 + 352);
    v29 = *(_DWORD *)(a2 + 360);
    if (!v29)
    {
      v90 = 0;
      goto LABEL_106;
    }
  }
  v30 = v29 - 1;
  v31 = (uint64_t *)(v28 + 32 * (v30 & ((v25 >> 4) ^ (v25 >> 9))));
  v32 = *v31;
  if (*v31 == v25)
    goto LABEL_24;
  v33 = 1;
  LODWORD(v34) = v30 & ((v25 >> 4) ^ (v25 >> 9));
  while (v32 != -4096)
  {
    v35 = v34 + v33++;
    v34 = v35 & v30;
    v32 = *(_QWORD *)(v28 + 32 * v34);
    if (v32 == v25)
    {
      v31 = (uint64_t *)(v28 + 32 * v34);
      goto LABEL_24;
    }
  }
  if ((v27 & 1) != 0)
  {
    v90 = 16;
    v28 = a2 + 352;
  }
  else
  {
    v28 = *(_QWORD *)(a2 + 352);
    v90 = *(unsigned int *)(a2 + 360);
  }
LABEL_106:
  v31 = (uint64_t *)(v28 + 32 * v90);
LABEL_24:
  if ((v27 & 1) != 0)
    v36 = a2 + 352;
  else
    v36 = *(_QWORD *)(a2 + 352);
  if ((*(_DWORD *)(a2 + 344) & 1) != 0)
    v37 = 16;
  else
    v37 = *(unsigned int *)(a2 + 360);
  if ((uint64_t *)(v36 + 32 * v37) == v31 || (v38 = *((unsigned int *)v31 + 4), !(_DWORD)v38))
  {
LABEL_39:
    v43 = -1;
  }
  else
  {
    v39 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v20);
    v40 = *v26;
    v41 = 4 * v38;
    v42 = (unsigned int *)v31[1];
    while (1)
    {
      v43 = *v42;
      if (*v42 >= v39 && v43 <= v40)
        break;
      ++v42;
      v41 -= 4;
      if (!v41)
        goto LABEL_39;
    }
  }
  v11 = v92;
  if (!(_DWORD)v93)
    goto LABEL_47;
  v45 = 0;
  v46 = *(unsigned int *)(a4 + 4 * (*(_DWORD *)(a6 + 4 * v43) + 1));
  v47 = (char *)v92 + 8 * v93;
  while (*(_QWORD *)((char *)v92 + v45) != *(_QWORD *)(*(_QWORD *)(a2 + 864) + 48 * v46 + 16))
  {
    v45 += 8;
    if (8 * v93 == v45)
      goto LABEL_46;
  }
  v47 = (char *)v92 + v45;
LABEL_46:
  if (v93 == (v47 - (_BYTE *)v92) >> 3)
    goto LABEL_47;
LABEL_48:
  if (v11 != v94)
    free(v11);
  return v46;
}

void llvm::FlowAnalyzer::collapseEmptyUnstructuredNodes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  llvm::MachineBasicBlock *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t j;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  int v68;
  BOOL v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int *v79;
  int v80;
  BOOL v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  BOOL v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  _DWORD *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  _DWORD *v106;
  int v107;
  uint64_t v108;
  _DWORD *v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  void *v125[2];
  _DWORD v126[14];
  void *v127;
  uint64_t v128;
  _BYTE v129[24];
  void *v130[2];
  _DWORD v131[14];
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v120 = *(_QWORD *)(a1 + 1616);
  v119 = *(_DWORD *)(a1 + 1624);
  v6 = *(_DWORD *)(a2 + 872);
  v130[0] = v131;
  v130[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v130, (v6 + 63) >> 6, 0);
  v131[12] = v6;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v7 = *(unsigned int *)(a2 + 872);
  if ((_DWORD)v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = *(_QWORD *)(a2 + 864);
      if ((*(_BYTE *)(v9 + 48 * i + 8) & 0x10) == 0)
      {
        v10 = *(_QWORD *)(a1 + 64);
        v11 = *(unsigned __int16 *)(v10 + 48 * i + 44);
        if ((~v11 & 0x81) == 0
          && (v11 & 4) == 0
          && *(_DWORD *)(v10 + 48 * i + 12) != -1
          && *(_DWORD *)(v10 + 48 * i + 16) == -1)
        {
          v12 = *(llvm::MachineBasicBlock **)(v9 + 48 * i + 16);
          v13 = (_QWORD *)((char *)v12 + 48);
          if ((llvm::MachineBasicBlock *)((char *)v12 + 48) != (llvm::MachineBasicBlock *)(*((_QWORD *)v12 + 6) & 0xFFFFFFFFFFFFFFF8))
          {
            v14 = -1;
            v15 = (_QWORD *)((char *)v12 + 48);
            do
            {
              v15 = (_QWORD *)v15[1];
              ++v14;
            }
            while (v15 != v13);
            if (v14 != 1 || v13 == (_QWORD *)llvm::MachineBasicBlock::getFirstTerminator(v12))
            {
              for (j = *((_QWORD *)v12 + 7); (_QWORD *)j != v13; j = *(_QWORD *)(j + 8))
              {
                if (**(_WORD **)(j + 16) != 10)
                  goto LABEL_14;
                if ((*(_BYTE *)j & 4) == 0)
                {
                  while ((*(_WORD *)(j + 44) & 8) != 0)
                    j = *(_QWORD *)(j + 8);
                }
              }
            }
          }
          *((_QWORD *)v130[0] + (i >> 6)) |= 1 << i;
        }
      }
LABEL_14:
      ;
    }
  }
  v121 = a1;
  v17 = **(_DWORD **)a2;
  v127 = v129;
  v128 = 0x500000000;
  sub_1C55623BC((char *)&v127, v17);
  v18 = *(_DWORD *)(a2 + 872);
  v125[0] = v126;
  v125[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v125, (v18 + 63) >> 6, 0);
  v126[12] = v18;
  v19 = v128;
  if (!(_DWORD)v128)
    goto LABEL_134;
  v20 = a2 + 88;
  do
  {
    v21 = *((_DWORD *)v127 + --v19);
    LODWORD(v128) = v19;
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 864) + 48 * v21 + 16);
    v23 = *(uint64_t **)(v22 + 88);
    v24 = *(uint64_t **)(v22 + 96);
    if (v23 == v24)
      continue;
    do
    {
      v25 = *v23;
      LODWORD(v26) = *(_DWORD *)(a3 + 264);
      v27 = *v23 >> 4;
      if (!(_DWORD)v26)
        goto LABEL_39;
      v28 = *(_QWORD *)(a3 + 248);
      v29 = v26 - 1;
      v30 = (v27 ^ (v25 >> 9)) & ((_DWORD)v26 - 1);
      v31 = *(_QWORD *)(v28 + 16 * v30);
      if (v25 == v31)
      {
LABEL_31:
        v26 = *(_QWORD *)(v28 + 16 * v30 + 8);
        if (!v26)
          goto LABEL_39;
        v34 = *(_DWORD *)(a2 + 80);
        if ((v34 & 1) != 0)
        {
          v36 = 16;
          v35 = v20;
        }
        else
        {
          v35 = *(_QWORD *)(a2 + 88);
          v36 = *(_DWORD *)(a2 + 96);
          if (!v36)
          {
            v37 = 0;
            goto LABEL_95;
          }
        }
        v38 = v36 - 1;
        LODWORD(v39) = (v36 - 1) & ((v26 >> 4) ^ (v26 >> 9));
        v40 = (uint64_t *)(v35 + 16 * v39);
        v41 = *v40;
        if (*v40 != v26)
        {
          v75 = 1;
          while (v41 != -4096)
          {
            v76 = v39 + v75++;
            v39 = v76 & v38;
            v41 = *(_QWORD *)(v35 + 16 * v39);
            if (v41 == v26)
            {
              v40 = (uint64_t *)(v35 + 16 * v39);
              goto LABEL_38;
            }
          }
          if ((v34 & 1) != 0)
          {
            v35 = v20;
            v37 = 16;
          }
          else
          {
            v35 = *(_QWORD *)(a2 + 88);
            v37 = *(unsigned int *)(a2 + 96);
          }
LABEL_95:
          v40 = (uint64_t *)(v35 + 16 * v37);
        }
LABEL_38:
        LODWORD(v26) = *((_DWORD *)v40 + 2);
        goto LABEL_39;
      }
      v32 = 1;
      while (v31 != -4096)
      {
        v33 = v30 + v32++;
        v30 = v33 & v29;
        v31 = *(_QWORD *)(v28 + 16 * v30);
        if (v25 == v31)
          goto LABEL_31;
      }
      LODWORD(v26) = 0;
LABEL_39:
      v42 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v26);
      v43 = v26 + 1;
      if (v43 >= *(_DWORD *)(a2 + 8))
        v44 = (unsigned int *)(a2 + 872);
      else
        v44 = (unsigned int *)(*(_QWORD *)a2 + 4 * v43);
      v45 = *v44;
      v46 = *(_DWORD *)(a2 + 344);
      if ((v46 & 1) != 0)
      {
        v48 = 16;
        v47 = a2 + 352;
      }
      else
      {
        v47 = *(_QWORD *)(a2 + 352);
        v48 = *(_DWORD *)(a2 + 360);
        if (!v48)
        {
          v89 = 0;
          goto LABEL_129;
        }
      }
      v49 = v27 ^ (v25 >> 9);
      v50 = v48 - 1;
      v51 = (v48 - 1) & v49;
      v52 = (uint64_t *)(v47 + 32 * v51);
      v53 = *v52;
      if (*v52 == v25)
        goto LABEL_49;
      v54 = 1;
      LODWORD(v55) = v51;
      while (v53 != -4096)
      {
        v56 = v55 + v54++;
        v55 = v56 & v50;
        v53 = *(_QWORD *)(v47 + 32 * v55);
        if (v53 == v25)
        {
          v52 = (uint64_t *)(v47 + 32 * v55);
          goto LABEL_49;
        }
      }
      if ((v46 & 1) != 0)
      {
        v47 = a2 + 352;
        v89 = 16;
      }
      else
      {
        v47 = *(_QWORD *)(a2 + 352);
        v89 = *(unsigned int *)(a2 + 360);
      }
LABEL_129:
      v52 = (uint64_t *)(v47 + 32 * v89);
LABEL_49:
      v57 = *(_QWORD *)(a2 + 352);
      LODWORD(v58) = *(_DWORD *)(a2 + 360);
      if ((v46 & 1) != 0)
      {
        v57 = a2 + 352;
        v58 = 16;
      }
      else
      {
        v58 = v58;
      }
      if ((uint64_t *)(v57 + 32 * v58) == v52 || (v59 = *((unsigned int *)v52 + 4), !(_DWORD)v59))
      {
LABEL_61:
        v62 = -1;
      }
      else
      {
        v60 = (unsigned int *)v52[1];
        v61 = 4 * v59;
        while (1)
        {
          v62 = *v60;
          if (*v60 >= v42 && v62 <= v45)
            break;
          ++v60;
          v61 -= 4;
          if (!v61)
            goto LABEL_61;
        }
      }
      if (v124)
      {
        v64 = (v124 - 1) & (37 * v62);
        v65 = (unsigned int *)(v122 + 32 * v64);
        v66 = *v65;
        if (v62 == *v65)
          goto LABEL_79;
        v67 = 0;
        v68 = 1;
        while (v66 != -1)
        {
          if (v67)
            v69 = 0;
          else
            v69 = v66 == -2;
          if (v69)
            v67 = v65;
          v70 = v64 + v68++;
          v64 = v70 & (v124 - 1);
          v65 = (unsigned int *)(v122 + 32 * v64);
          v66 = *v65;
          if (v62 == *v65)
            goto LABEL_79;
        }
        if (v67)
          v65 = v67;
      }
      else
      {
        v65 = 0;
      }
      if (4 * (int)v123 + 4 >= 3 * v124)
      {
        v118 = v20;
        sub_1C5562438(&v122, 2 * v124);
        if (v124)
        {
          v77 = (v124 - 1) & (37 * v62);
          v65 = (unsigned int *)(v122 + 32 * v77);
          v78 = *v65;
          v20 = v118;
          if (v62 == *v65)
            goto LABEL_76;
          v79 = 0;
          v80 = 1;
          while (v78 != -1)
          {
            if (v79)
              v81 = 0;
            else
              v81 = v78 == -2;
            if (v81)
              v79 = v65;
            v82 = v77 + v80++;
            v77 = v82 & (v124 - 1);
            v65 = (unsigned int *)(v122 + 32 * v77);
            v78 = *v65;
            v20 = v118;
            if (v62 == *v65)
              goto LABEL_76;
          }
LABEL_125:
          if (v79)
            v65 = v79;
LABEL_115:
          v20 = v118;
          goto LABEL_76;
        }
LABEL_114:
        v65 = 0;
        goto LABEL_115;
      }
      if (v124 + ~(_DWORD)v123 - HIDWORD(v123) <= v124 >> 3)
      {
        v118 = v20;
        sub_1C5562438(&v122, v124);
        if (v124)
        {
          v83 = (v124 - 1) & (37 * v62);
          v65 = (unsigned int *)(v122 + 32 * v83);
          v84 = *v65;
          if (v62 == *v65)
          {
            v20 = v118;
            goto LABEL_76;
          }
          v79 = 0;
          v86 = 1;
          while (v84 != -1)
          {
            if (v79)
              v87 = 0;
            else
              v87 = v84 == -2;
            if (v87)
              v79 = v65;
            v88 = v83 + v86++;
            v83 = v88 & (v124 - 1);
            v65 = (unsigned int *)(v122 + 32 * v83);
            v84 = *v65;
            v20 = v118;
            if (v62 == *v65)
              goto LABEL_76;
          }
          goto LABEL_125;
        }
        goto LABEL_114;
      }
LABEL_76:
      LODWORD(v123) = v123 + 1;
      if (*v65 != -1)
        --HIDWORD(v123);
      *v65 = v62;
      *((_QWORD *)v65 + 1) = v65 + 6;
      *((_QWORD *)v65 + 2) = 0x200000000;
LABEL_79:
      v71 = v65[4];
      if (v71 >= v65[5])
      {
        v117 = v20;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v65 + 2), (uint64_t)(v65 + 6), v71 + 1, 4);
        v20 = v117;
        v71 = v65[4];
      }
      *(_DWORD *)(*((_QWORD *)v65 + 1) + 4 * v71) = v21;
      ++v65[4];
      v72 = v62 >> 6;
      v73 = *((_QWORD *)v125[0] + v72);
      if ((v73 & (1 << v62)) == 0)
      {
        *((_QWORD *)v125[0] + v72) = v73 | (1 << v62);
        v74 = v128;
        if (v128 >= (unint64_t)HIDWORD(v128))
        {
          v85 = v20;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, (uint64_t)v129, v128 + 1, 4);
          v20 = v85;
          v74 = v128;
        }
        *((_DWORD *)v127 + v74) = v62;
        LODWORD(v128) = v128 + 1;
      }
      ++v23;
    }
    while (v23 != v24);
    v19 = v128;
  }
  while (v19);
LABEL_134:
  if (v125[0] != v126)
    free(v125[0]);
  if (v127 != v129)
    free(v127);
  v90 = (v119 - 1);
  if (v119 - 1 <= 0)
  {
    v92 = v124;
    v91 = v122;
  }
  else
  {
    v91 = v122;
    v92 = v124;
    v93 = v124 - 1;
    v94 = v122 + 32 * v124;
    do
    {
      v95 = *(unsigned int *)(v120 + 4 * v90);
      if (((*(_QWORD *)((char *)v130[0] + ((v95 >> 3) & 0x1FFFFFF8)) >> v95) & 1) != 0)
      {
        v96 = v94;
        if (v92)
        {
          v97 = v93 & (37 * (_DWORD)v95);
          v96 = v91 + 32 * v97;
          v98 = *(_DWORD *)v96;
          if (*(_DWORD *)v96 != (_DWORD)v95)
          {
            v112 = 1;
            while (v98 != -1)
            {
              v113 = v97 + v112++;
              v97 = v113 & v93;
              v98 = *(_DWORD *)(v91 + 32 * v97);
              if (v98 == (_DWORD)v95)
              {
                v96 = v91 + 32 * v97;
                goto LABEL_143;
              }
            }
            v96 = v94;
          }
        }
LABEL_143:
        v99 = *(unsigned int *)(v96 + 16);
        v100 = *(_QWORD *)(v121 + 64);
        if ((_DWORD)v99)
        {
          v101 = *(unsigned int **)(v96 + 8);
          v102 = (_DWORD *)(v100 + 48 * v95 + 12);
          v103 = 4 * v99;
          do
          {
            v104 = *v101;
            v105 = v100 + 48 * *v101;
            v107 = *(_DWORD *)(v105 + 12);
            v106 = (_DWORD *)(v105 + 12);
            if (v107 == (_DWORD)v95)
              *v106 = *v102;
            v108 = v100 + 48 * v104;
            v110 = *(_DWORD *)(v108 + 16);
            v109 = (_DWORD *)(v108 + 16);
            if (v110 == (_DWORD)v95)
              *v109 = *v102;
            ++v101;
            v103 -= 4;
          }
          while (v103);
        }
        v111 = 3 * v95;
        *(_WORD *)(v100 + 16 * v111 + 44) |= 2u;
        *(_WORD *)(*(_QWORD *)(v121 + 64) + 16 * v111 + 44) &= ~0x80u;
        *(_WORD *)(*(_QWORD *)(v121 + 64) + 16 * v111 + 44) &= ~1u;
        *(_DWORD *)(*(_QWORD *)(v121 + 64) + 16 * v111 + 32) = 0;
      }
      --v90;
    }
    while ((int)v90 > 0);
  }
  if (v92)
  {
    v114 = 32 * v92;
    v115 = (_QWORD *)(v91 + 24);
    do
    {
      if (*((_DWORD *)v115 - 6) <= 0xFFFFFFFD)
      {
        v116 = (_QWORD *)*(v115 - 2);
        if (v115 != v116)
          free(v116);
      }
      v115 += 4;
      v114 -= 32;
    }
    while (v114);
  }
  MEMORY[0x1CAA32FB4](v91, 8);
  if (v130[0] != v131)
    free(v130[0]);
}

_QWORD *llvm::FlowAnalyzer::optimizeUnstructuredSkipping(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  __int16 v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = result[220];
    do
    {
      v6 = *(unsigned int *)(*(_QWORD *)a2 + 4 * v4++);
      v7 = (unsigned int *)(*(_QWORD *)a2 + 4 * v4);
      if (v4 >= *(unsigned int *)(a2 + 8))
        v7 = (unsigned int *)(a2 + 872);
      v8 = *v7;
      v9 = *(_DWORD *)(v5 + 4 * v6) + 1;
      if (v9 < v8)
      {
        v10 = result[8];
        do
        {
          v11 = *(unsigned int *)(result[202] + 4 * v9);
          v12 = v10 + 48 * v6;
          v15 = *(unsigned __int16 *)(v12 + 44);
          v13 = (_WORD *)(v12 + 44);
          v14 = v15;
          if ((~v15 & 0x81) == 0)
          {
            *v13 = v14 & 0xFFFE;
            ++*(_DWORD *)(v10 + 48 * v6 + 28);
            v16 = result[8];
            while (1)
            {
              v17 = v16 + 48 * v11;
              v20 = *(_WORD *)(v17 + 44);
              v18 = (_WORD *)(v17 + 44);
              v19 = v20;
              ++*((_DWORD *)v18 - 5);
              if ((v20 & 0x89) != 0x81)
                break;
              if (v11 != v6)
              {
                v21 = *a3 + (v11 << 6);
                v22 = *(unsigned int *)(v21 + 16);
                v23 = *a3 + (v6 << 6);
                if ((_DWORD)v22 != *(_DWORD *)(v23 + 16))
                  break;
                if ((_DWORD)v22)
                {
                  v24 = *(_QWORD *)(v21 + 8);
                  v25 = v24 + 8 * v22;
                  v26 = *(_QWORD *)(v23 + 8);
                  while (*(_DWORD *)v24 == *(_DWORD *)v26
                       && *(unsigned __int8 *)(v24 + 4) == *(unsigned __int8 *)(v26 + 4))
                  {
                    v24 += 8;
                    v26 += 8;
                    if (v24 == v25)
                      goto LABEL_20;
                  }
                  break;
                }
              }
LABEL_20:
              *v18 = v19 & 0xFF7F;
              v28 = v16 + 48 * v11;
              *(_DWORD *)(v28 + 32) = 0;
              v29 = result[8]
                  + 48 * *(unsigned int *)(result[202] + 4 * (*(_DWORD *)(result[220] + 4 * v11) - 1));
              *(_WORD *)(v29 + 44) |= 2u;
              *(_DWORD *)(v28 + 20) = -1;
              if ((*v18 & 1) != 0)
              {
                *v18 &= ~1u;
                ++*(_DWORD *)(v16 + 48 * v11 + 28);
              }
              v30 = *(_DWORD *)(result[220] + 4 * v11) + 1;
              v16 = result[8];
              if (v30 >= v8)
                break;
              v11 = *(unsigned int *)(result[202] + 4 * v30);
            }
            ++*(_DWORD *)(v16 + 48 * v11 + 36);
            *(_DWORD *)(v10 + 48 * v6 + 20) = v11;
            v5 = result[220];
            v10 = v16;
          }
          v9 = *(_DWORD *)(v5 + 4 * v11) + 1;
          v6 = v11;
        }
        while (v9 < v8);
      }
    }
    while (v4 != v3);
  }
  return result;
}

void llvm::FlowAnalyzer::optimizeUnstructuredLoops(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, llvm::TargetInstrInfo *this)
{
  uint64_t v6;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  unsigned int *v30;
  char *v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  const llvm::MachineInstr *v50;
  const llvm::MachineInstr *v51;
  unsigned __int16 *v52;
  int v53;
  BOOL v54;
  BOOL v55;
  _BYTE *v56;
  const void *v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int *v61;
  unint64_t v62;
  unsigned int *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  __int16 v80;
  char isEmptyBasicBlock;
  uint64_t v82;
  int v83;
  unint64_t v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  llvm::MachineBasicBlock *v96;
  llvm::MachineBasicBlock *v97;
  llvm::MachineBasicBlock *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  int v102;
  _BYTE v103[128];
  void *v104;
  uint64_t v105;
  _BYTE v106[32];
  unsigned int *v107;
  uint64_t v108;
  _QWORD v109[10];

  v109[8] = *MEMORY[0x1E0C80C00];
  v107 = (unsigned int *)v109;
  v108 = 0x1000000000;
  v99 = v103;
  v100 = v103;
  v101 = 16;
  v102 = 0;
  v6 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v6)
    goto LABEL_42;
  v10 = 0;
  v11 = (unsigned int *)(a2 + 872);
  do
  {
    v12 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v10++);
    v13 = (unsigned int *)(*(_QWORD *)a2 + 4 * v10);
    if (v10 >= *(unsigned int *)(a2 + 8))
      v13 = v11;
    v14 = *v13;
LABEL_6:
    if (v12 == v14)
      continue;
    v15 = *(_QWORD *)(a2 + 864);
    if ((*(_WORD *)(a1[8] + 48 * v12 + 44) & 0x80) != 0)
    {
      v19 = *(_DWORD *)(a3 + 264);
      v93 = a4;
      v96 = this;
      v88 = v6;
      v90 = v11;
      if (v19)
      {
        v20 = *(_QWORD *)(v15 + 48 * v12 + 16);
        v21 = *(_QWORD *)(a3 + 248);
        v22 = v19 - 1;
        v23 = ((v20 >> 4) ^ (v20 >> 9)) & (v19 - 1);
        v24 = *(_QWORD *)(v21 + 16 * v23);
        if (v20 == v24)
        {
LABEL_47:
          v28 = *(_QWORD **)(v21 + 16 * v23 + 8);
          goto LABEL_24;
        }
        v25 = 1;
        while (v24 != -4096)
        {
          v26 = v23 + v25++;
          v23 = v26 & v22;
          v24 = *(_QWORD *)(v21 + 16 * v23);
          if (v20 == v24)
            goto LABEL_47;
        }
      }
      v28 = 0;
LABEL_24:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v99, (uint64_t)v28);
      a4 = v93;
      this = v96;
      v6 = v88;
      v11 = v90;
      if (v28 && v29)
      {
        while (1)
        {
          v28 = (_QWORD *)*v28;
          if (!v28)
            break;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v99, (uint64_t)v28);
          v6 = v88;
          v11 = v90;
          a4 = v93;
          this = v96;
        }
      }
    }
    if ((*(_WORD *)(a1[8] + 48 * v12 + 44) & 0x200) != 0)
    {
      v27 = v108;
      if (v108 >= (unint64_t)HIDWORD(v108))
      {
        v95 = a4;
        v98 = this;
        v82 = v6;
        v92 = v11;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, (uint64_t)v109, v108 + 1, 4);
        v11 = v92;
        a4 = v95;
        v6 = v82;
        this = v98;
        v27 = v108;
      }
      v107[v27] = v12;
      LODWORD(v108) = v108 + 1;
    }
    if ((*(_BYTE *)(v15 + 48 * v12 + 8) & 0x10) == 0)
      goto LABEL_11;
    v16 = v15 + 48 * v12;
    v17 = *(unsigned int *)(v16 + 32);
    if (v17 < 2)
      goto LABEL_11;
    v45 = *(unsigned int *)(a1[202] + 4 * (*(_DWORD *)(a1[220] + 4 * v12) + 1));
    v87 = v16 + 24;
    v46 = *(_DWORD **)(v16 + 24);
    v47 = 4 * v17;
    v48 = v46;
    while (*v48 != v45)
    {
      ++v48;
      v47 -= 4;
      if (!v47)
      {
        v48 = &v46[v17];
        break;
      }
    }
    if (v17 == v48 - v46)
      goto LABEL_11;
    v49 = *(_QWORD *)(*(_QWORD *)(a2 + 864) + 48 * v45 + 16);
    v50 = (const llvm::MachineInstr *)(v49 + 48);
    v86 = v49;
    v51 = *(const llvm::MachineInstr **)(v49 + 56);
    if (v50 == v51)
      goto LABEL_11;
    v94 = a4;
    v97 = this;
    v89 = v6;
    v91 = v11;
    while (1)
    {
      v50 = (const llvm::MachineInstr *)(*(_QWORD *)v50 & 0xFFFFFFFFFFFFFFF8);
      v52 = (unsigned __int16 *)*((_QWORD *)v50 + 2);
      v53 = *v52;
      v54 = (v53 - 9) > 0x3C || ((1 << (v53 - 9)) & 0x1000000000000605) == 0;
      v55 = !v54 || v53 == 0;
      if (v55 || (v52[4] & 0x10) != 0)
        goto LABEL_66;
      if (!llvm::TargetInstrInfo::isUnpredicatedTerminator(this, v50))
        break;
      v51 = *(const llvm::MachineInstr **)(v86 + 56);
      a4 = v94;
      this = v97;
      v6 = v89;
      v11 = v91;
LABEL_66:
      if (v51 == v50)
        goto LABEL_11;
    }
    v56 = v106;
    v57 = *(const void **)v87;
    v58 = *(unsigned int *)(v87 + 8);
    v104 = v106;
    v105 = 0x800000000;
    if (v58 >= 9)
    {
      v85 = v57;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v106, v58, 4);
      v57 = v85;
      v59 = v105;
      v56 = v104;
LABEL_71:
      memcpy(&v56[4 * v59], v57, 4 * v58);
      v60 = v105;
      v61 = (unsigned int *)v104;
    }
    else
    {
      if ((_DWORD)v58)
      {
        v59 = 0;
        goto LABEL_71;
      }
      v60 = 0;
      v61 = (unsigned int *)v106;
    }
    v62 = (v60 + v58);
    v54 = (_DWORD)v62 == 0;
    LODWORD(v105) = v62;
    v63 = &v61[v62];
    v64 = 126 - 2 * __clz(v62);
    if (v54)
      v65 = 0;
    else
      v65 = v64;
    sub_1C5562694(v61, v63, v65, 1);
    a4 = v94;
    if (*(_DWORD *)(v87 + 8) >= 2u)
    {
      v66 = v45;
      v67 = 1;
      do
      {
        v68 = a1[220];
        v69 = a1[202];
        do
        {
          v66 = *(unsigned int *)(v69 + 4 * (*(_DWORD *)(v68 + 4 * v66) + 1));
          v70 = (unsigned int *)v104;
          if ((_DWORD)v105)
          {
            v70 = (unsigned int *)v104;
            v71 = v105;
            do
            {
              v72 = v71 >> 1;
              v73 = &v70[v71 >> 1];
              v75 = *v73;
              v74 = v73 + 1;
              v71 += ~(v71 >> 1);
              if (v75 < v66)
                v70 = v74;
              else
                v71 = v72;
            }
            while (v71);
          }
        }
        while (v70 == (unsigned int *)((char *)v104 + 4 * v105) || *v70 > v66);
        v76 = *a4 + (v66 << 6);
        if (*(_DWORD *)(v76 + 16) != 1)
          break;
        if (**(_DWORD **)(v76 + 8) != v12)
          break;
        v77 = a1[8];
        v78 = v77 + 48 * *(unsigned int *)(v69 + 4 * (*(_DWORD *)(v68 + 4 * v66) - 1));
        v80 = *(_WORD *)(v78 + 44);
        v79 = (_WORD *)(v78 + 44);
        if ((v80 & 1) != 0)
          break;
        v84 = v66;
        v83 = v67;
        isEmptyBasicBlock = llvm::isEmptyBasicBlock(*(llvm **)(*(_QWORD *)(a2 + 864) + 48 * v66 + 16), v97, (const llvm::TargetInstrInfo *)v66);
        v66 = v84;
        a4 = v94;
        if ((isEmptyBasicBlock & 1) != 0)
          break;
        *(_WORD *)(v77 + 48 * v84 + 44) = *(_WORD *)(v77 + 48 * v84 + 44) & 0xF77F | 0x800;
        if ((*v79 & 2) == 0)
          --*(_DWORD *)(v77 + 48 * v84 + 36);
        v67 = v83 + 1;
      }
      while (*(_DWORD *)(v87 + 8) > (v83 + 1));
    }
    if (v104 != v106)
    {
      free(v104);
      a4 = v94;
    }
    this = v97;
    v6 = v89;
    v11 = v91;
LABEL_11:
    v18 = *(_DWORD *)(a1[220] + 4 * v12) + 1;
    if (v18 < v14)
    {
      v12 = *(_DWORD *)(a1[202] + 4 * v18);
      goto LABEL_6;
    }
  }
  while (v10 != v6);
  if ((_DWORD)v108)
  {
    v30 = v107;
    v31 = (char *)&v107[v108];
    while (1)
    {
      v32 = *v30;
      v33 = *(_DWORD *)(a3 + 264);
      if (!v33)
        goto LABEL_35;
      v34 = *(_QWORD *)(*(_QWORD *)(a2 + 864) + 48 * v32 + 16);
      v35 = *(_QWORD *)(a3 + 248);
      v36 = v33 - 1;
      v37 = ((v34 >> 4) ^ (v34 >> 9)) & (v33 - 1);
      v38 = *(_QWORD *)(v35 + 16 * v37);
      if (v34 != v38)
        break;
LABEL_34:
      v41 = *(_QWORD *)(v35 + 16 * v37 + 8);
LABEL_36:
      v42 = (char *)sub_1C477672C((uint64_t)&v99, v41);
      if (v100 == v99)
        v43 = (uint64_t *)((char *)&v101 + 4);
      else
        v43 = &v101;
      if (v42 == &v100[8 * *(unsigned int *)v43])
      {
        v44 = a1[8] + 48 * v32;
        *(_WORD *)(v44 + 44) |= 0x1000u;
      }
      if (++v30 == (unsigned int *)v31)
        goto LABEL_42;
    }
    v39 = 1;
    while (v38 != -4096)
    {
      v40 = v37 + v39++;
      v37 = v40 & v36;
      v38 = *(_QWORD *)(v35 + 16 * v37);
      if (v34 == v38)
        goto LABEL_34;
    }
LABEL_35:
    v41 = 0;
    goto LABEL_36;
  }
LABEL_42:
  if (v100 != v99)
    free(v100);
  if (v107 != (unsigned int *)v109)
    free(v107);
}

uint64_t llvm::FlowAnalyzer::compressUnstructuredIds(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = *(unsigned int *)(this + 1624);
  if ((_DWORD)v1)
  {
    v2 = *(unsigned int **)(this + 1616);
    v3 = *(_QWORD *)(this + 64);
    v4 = 4 * v1;
    v5 = 1;
    do
    {
      if ((*(_WORD *)(v3 + 48 * *v2 + 44) & 0x880) != 0)
        *(_DWORD *)(v3 + 48 * *v2 + 32) = v5++;
      ++v2;
      v4 -= 4;
    }
    while (v4);
  }
  else
  {
    v5 = 1;
  }
  *(_DWORD *)(this + 1908) = v5 - 1;
  return this;
}

char *sub_1C55623BC(char *result, int a2)
{
  _DWORD **v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (_DWORD **)result;
  if (!*((_DWORD *)result + 3))
  {
    *((_DWORD *)result + 2) = 0;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), 1uLL, 4);
    v4 = *v3;
    v5 = v3 + 1;
LABEL_6:
    *v4 = a2;
    goto LABEL_7;
  }
  v4 = *(_DWORD **)result;
  v5 = result + 8;
  if (!*((_DWORD *)result + 2))
    goto LABEL_6;
  *v4 = a2;
  if (!*v5)
    goto LABEL_6;
LABEL_7:
  *v5 = 1;
  return result;
}

_DWORD *sub_1C5562438(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  unint64_t v20;
  int *v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if (!(_DWORD)v3)
LABEL_46:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[8 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if (*v13 <= 0xFFFFFFFD)
        break;
LABEL_24:
      v13 += 8;
      if (v13 == v12)
        goto LABEL_46;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & (37 * v14);
    v17 = *a1 + 32 * v16;
    v18 = *(_DWORD *)v17;
    if (v14 != *(_DWORD *)v17)
    {
      v24 = 0;
      v25 = 1;
      while (v18 != -1)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v18 == -2;
        if (v26)
          v24 = v17;
        v27 = v16 + v25++;
        v16 = v27 & v15;
        v17 = *a1 + 32 * v16;
        v18 = *(_DWORD *)v17;
        if (v14 == *(_DWORD *)v17)
          goto LABEL_12;
      }
      if (v24)
        v17 = v24;
    }
LABEL_12:
    v19 = (void *)(v17 + 24);
    *(_QWORD *)(v17 + 8) = v17 + 24;
    *(_DWORD *)v17 = v14;
    *(_QWORD *)(v17 + 16) = 0x200000000;
    v20 = v13[4];
    v21 = (int *)*((_QWORD *)v13 + 1);
    if ((int *)v17 == v13 || (_DWORD)v20 == 0)
    {
LABEL_22:
      ++*((_DWORD *)a1 + 2);
      if (v21 != v13 + 6)
        free(v21);
      goto LABEL_24;
    }
    if (v21 != v13 + 6)
    {
      *(_QWORD *)(v17 + 8) = v21;
      v28 = v13[5];
      *(_DWORD *)(v17 + 16) = v20;
      *(_DWORD *)(v17 + 20) = v28;
      *((_QWORD *)v13 + 1) = v13 + 6;
      v13[5] = 0;
      v21 = v13 + 6;
      goto LABEL_21;
    }
    if (v20 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 8, v17 + 24, v20, 4);
      v23 = v13[4];
      if (!(_DWORD)v23)
        goto LABEL_20;
      v21 = (int *)*((_QWORD *)v13 + 1);
      v19 = *(void **)(v17 + 8);
    }
    else
    {
      v23 = v13[4];
    }
    memcpy(v19, v21, 4 * v23);
LABEL_20:
    *(_DWORD *)(v17 + 16) = v20;
    v21 = (int *)*((_QWORD *)v13 + 1);
LABEL_21:
    v13[4] = 0;
    goto LABEL_22;
  }
  a1[1] = 0;
  v29 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v29)
  {
    v30 = 32 * v29;
    do
    {
      *result = -1;
      result += 8;
      v30 -= 32;
    }
    while (v30);
  }
  return result;
}

unsigned int *sub_1C5562694(unsigned int *result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  BOOL v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  BOOL v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  BOOL v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v72;
  unsigned int v73;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (v37 < *v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C49F6588(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C49F6754(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_1C49F67D0(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 95)
        {
          v39 = v8 + 1;
          v41 = v8 == a2 || v39 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v41)
            {
              v42 = 4;
              v43 = v8;
              do
              {
                v45 = *v43;
                v44 = v43[1];
                v43 = v39;
                if (v44 < v45)
                {
                  v46 = v42;
                  while (1)
                  {
                    *(unsigned int *)((char *)v8 + v46) = v45;
                    v47 = v46 - 4;
                    if (v46 == 4)
                      break;
                    v45 = *(unsigned int *)((char *)v8 + v46 - 8);
                    v46 -= 4;
                    if (v44 >= v45)
                    {
                      v48 = (unsigned int *)((char *)v8 + v47);
                      goto LABEL_75;
                    }
                  }
                  v48 = v8;
LABEL_75:
                  *v48 = v44;
                }
                v39 = v43 + 1;
                v42 += 4;
              }
              while (v43 + 1 != a2);
            }
          }
          else if (!v41)
          {
            do
            {
              v73 = *v7;
              v72 = v7[1];
              v7 = v39;
              if (v72 < v73)
              {
                do
                {
                  *v39 = v73;
                  v73 = *(v39 - 2);
                  --v39;
                }
                while (v72 < v73);
                *v39 = v72;
              }
              v39 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v49 = (unint64_t)(v10 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &v8[v52];
                if (2 * v51 + 2 >= v10)
                {
                  v54 = *v53;
                }
                else
                {
                  v54 = v53[1];
                  v55 = *v53 >= v54;
                  if (*v53 > v54)
                    v54 = *v53;
                  if (!v55)
                  {
                    ++v53;
                    v52 = 2 * v51 + 2;
                  }
                }
                v56 = &v8[v51];
                v57 = *v56;
                if (v54 >= *v56)
                {
                  do
                  {
                    *v56 = v54;
                    v56 = v53;
                    if (v49 < v52)
                      break;
                    v58 = (2 * v52) | 1;
                    v53 = &v8[v58];
                    v52 = 2 * v52 + 2;
                    if (v52 >= v10)
                    {
                      v54 = *v53;
                      v52 = v58;
                    }
                    else
                    {
                      v54 = *v53;
                      result = (unsigned int *)v53[1];
                      if (*v53 <= result)
                        v54 = v53[1];
                      if (*v53 >= result)
                        v52 = v58;
                      else
                        ++v53;
                    }
                  }
                  while (v54 >= v57);
                  *v56 = v57;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            do
            {
              v59 = 0;
              v60 = *v8;
              v61 = v8;
              do
              {
                v62 = &v61[v59 + 1];
                v63 = (2 * v59) | 1;
                v59 = 2 * v59 + 2;
                if (v59 >= v10)
                {
                  v64 = *v62;
                  v59 = v63;
                }
                else
                {
                  v64 = *v62;
                  v65 = v62[1];
                  if (*v62 <= v65)
                    v64 = v62[1];
                  if (*v62 >= v65)
                    v59 = v63;
                  else
                    ++v62;
                }
                *v61 = v64;
                v61 = v62;
              }
              while (v59 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v62 == --a2)
              {
                *v62 = v60;
              }
              else
              {
                *v62 = *a2;
                *a2 = v60;
                v66 = (char *)v62 - (char *)v8 + 4;
                if (v66 >= 5)
                {
                  v67 = (((unint64_t)v66 >> 2) - 2) >> 1;
                  v68 = &v8[v67];
                  v69 = *v68;
                  v70 = *v62;
                  if (*v68 < *v62)
                  {
                    do
                    {
                      *v62 = v69;
                      v62 = v68;
                      if (!v67)
                        break;
                      v67 = (v67 - 1) >> 1;
                      v68 = &v8[v67];
                      v69 = *v68;
                    }
                    while (*v68 < v70);
                    *v62 = v70;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x201)
        {
          result = sub_1C49F6588(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C49F6588(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C49F6588(v7 + 1, v12 - 1, a2 - 2);
          sub_1C49F6588(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C49F6588(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v14)
        {
          if (v14 >= *(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v14 >= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v14 >= v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v14 < v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v14 >= v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v14 < v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v7[++v15];
        while (v16 < v14);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (v20 >= v14);
        }
        else
        {
          do
            v19 = *--v18;
          while (v19 >= v14);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v7[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            do
            {
              v24 = v22[1];
              ++v22;
              v16 = v24;
            }
            while (v24 < v14);
            do
            {
              v25 = *--v23;
              v21 = v25;
            }
            while (v25 >= v14);
          }
          while (v22 < v23);
          v26 = v22 - 1;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = (unsigned int *)sub_1C5562694(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = sub_1C5562CB4(v7, v26);
        v8 = v26 + 1;
        result = (unsigned int *)sub_1C5562CB4(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5562CB4(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C49F6588(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C49F6754(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C49F67D0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C49F6588(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(unsigned int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          v16 = (unsigned int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t llvm::isEmptyBasicBlock(llvm *this, const llvm::MachineBasicBlock *a2, const llvm::TargetInstrInfo *a3)
{
  llvm *v3;
  llvm *v4;
  unsigned __int16 *v7;
  int v8;
  BOOL v10;
  uint64_t result;

  v3 = (llvm *)((char *)this + 48);
  v4 = (llvm *)*((_QWORD *)this + 7);
  if ((llvm *)((char *)this + 48) != v4)
  {
    do
    {
      v3 = (llvm *)(*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8);
      v7 = (unsigned __int16 *)*((_QWORD *)v3 + 2);
      v8 = *v7;
      v10 = (v8 - 9) <= 0x3C && ((1 << (v8 - 9)) & 0x1000000000000605) != 0
         || v8 == 0;
      if (!v10 && (v7[4] & 0x10) == 0)
      {
        result = llvm::TargetInstrInfo::isUnpredicatedTerminator(a2, v3);
        if (!(_DWORD)result)
          return result;
        v4 = (llvm *)*((_QWORD *)this + 7);
      }
    }
    while (v4 != v3);
  }
  return 1;
}

void llvm::foldBlocksForCFGProcessing(uint64_t a1, int32x2_t *a2, llvm::TargetInstrInfo *a3, uint64_t a4)
{
  int32x2_t *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  __int32 v9;
  int32x2_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  const llvm::MachineInstr *v36;
  const llvm::MachineInstr *v37;
  unsigned __int16 *v38;
  int v39;
  BOOL v41;
  uint64_t *v42;
  uint64_t v43;
  int32x2_t v44;
  __int32 v45;
  unsigned __int32 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  int v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  unsigned __int32 v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  int v63;
  int v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unsigned __int16 *v68;
  int v69;
  BOOL v70;
  BOOL v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t v90;
  int32x2_t *v91;
  _QWORD *v94;
  char v95;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  int v100;
  _BYTE v101[128];
  char *v102;
  char *v103;
  uint64_t v104;
  int v105;
  _BYTE v106[128];
  unsigned __int8 *v107;
  uint64_t **v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  _BYTE v112[16];
  _QWORD *v113;
  unsigned int v114;
  unsigned int v115;
  _QWORD v116[12];

  v4 = a2;
  v116[10] = *MEMORY[0x1E0C80C00];
  v113 = v116;
  v115 = 10;
  v102 = v106;
  v103 = v106;
  v104 = 16;
  v105 = 0;
  v97 = v101;
  v98 = v101;
  v99 = 16;
  v100 = 0;
  v116[0] = *(_QWORD *)(a1 + 328);
  v91 = a2 + 31;
  v5 = 1;
  do
  {
    v6 = (_QWORD *)v113[v5 - 1];
    v114 = v5 - 1;
    v7 = sub_1C477672C((uint64_t)&v97, (uint64_t)v6);
    if (v98 == v97)
      v8 = (uint64_t *)((char *)&v99 + 4);
    else
      v8 = &v99;
    if (v7 != (_QWORD *)&v98[8 * *(unsigned int *)v8])
      goto LABEL_136;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v102, (uint64_t)v6);
    v9 = v4[33].i32[0];
    if (!v9)
      goto LABEL_12;
    v10 = v4[31];
    v11 = v9 - 1;
    v12 = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
    v13 = *(_QWORD **)(*(_QWORD *)&v10 + 16 * v12);
    if (v6 != v13)
    {
      v14 = 1;
      while (v13 != (_QWORD *)-4096)
      {
        v15 = v12 + v14++;
        v12 = v15 & v11;
        v13 = *(_QWORD **)(*(_QWORD *)&v10 + 16 * v12);
        if (v6 == v13)
          goto LABEL_11;
      }
LABEL_12:
      v16 = 0;
      goto LABEL_13;
    }
LABEL_11:
    v16 = *(_QWORD **)(*(_QWORD *)&v10 + 16 * v12 + 8);
LABEL_13:
    v17 = (char *)v6[11];
    v18 = (char *)v6[12];
    v110 = (uint64_t *)v112;
    v111 = 0x200000000;
    v19 = v18 - v17;
    if ((unint64_t)(v18 - v17) >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, (uint64_t)v112, v19 >> 3, 8);
      v20 = v111;
      v22 = v110;
      v21 = v111;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = (uint64_t *)v112;
    }
    if (v17 != v18)
    {
      v23 = &v22[v20];
      do
      {
        v24 = *(_QWORD *)v17;
        v17 += 8;
        *v23++ = v24;
      }
      while (v17 != v18);
      v22 = v110;
    }
    v25 = v21 + ((unint64_t)v19 >> 3);
    LODWORD(v111) = v25;
    if (v25)
    {
      v26 = &v22[v25];
      v94 = v6 + 6;
      while (1)
      {
        v27 = *v22;
        v28 = sub_1C477672C((uint64_t)&v97, *v22);
        if (v98 == v97)
          v29 = (uint64_t *)((char *)&v99 + 4);
        else
          v29 = &v99;
        if (v28 != (_QWORD *)&v98[8 * *(unsigned int *)v29])
          goto LABEL_112;
        if (v16)
        {
          v30 = v16;
          do
          {
            v31 = sub_1C477672C((uint64_t)(v30 + 7), v27);
            v32 = v30[8];
            if (v32 == v30[7])
              v33 = 76;
            else
              v33 = 72;
            if (v31 != (_QWORD *)(v32 + 8 * *(unsigned int *)((char *)v30 + v33)))
              break;
            if (llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlock(v30) == v27)
              goto LABEL_34;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        if (*(_BYTE *)(v27 + 185))
        {
LABEL_34:
          v34 = v27;
          goto LABEL_105;
        }
        v95 = 0;
        v35 = (_QWORD *)v27;
        do
        {
          v36 = (const llvm::MachineInstr *)(v35 + 6);
          v37 = (const llvm::MachineInstr *)v35[7];
          if (v35 + 6 != (_QWORD *)v37)
          {
            do
            {
              v36 = (const llvm::MachineInstr *)(*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8);
              v38 = (unsigned __int16 *)*((_QWORD *)v36 + 2);
              v39 = *v38;
              v41 = (v39 - 9) <= 0x3C && ((1 << (v39 - 9)) & 0x1000000000000605) != 0
                 || v39 == 0;
              if (!v41 && (v38[4] & 0x10) == 0)
              {
                if (!llvm::TargetInstrInfo::isUnpredicatedTerminator(a3, v36))
                {
                  v34 = (uint64_t)v35;
                  goto LABEL_83;
                }
                v37 = (const llvm::MachineInstr *)v35[7];
              }
            }
            while (v37 != v36);
          }
          v42 = (uint64_t *)v35[11];
          if (((v35[12] - (_QWORD)v42) & 0x7FFFFFFF8) != 8
            || (v43 = v35[8], ((v35[9] - v43) & 0x7FFFFFFF8) != 8)
            || ((*(_QWORD *)(*(_QWORD *)v43 + 96) - *(_QWORD *)(*(_QWORD *)v43 + 88)) >> 3) > 2)
          {
LABEL_133:
            v34 = (uint64_t)v35;
            break;
          }
          v34 = *v42;
          v44 = a2[31];
          v45 = a2[33].i32[0];
          if (!v45)
          {
            if (!v16)
              goto LABEL_79;
            goto LABEL_65;
          }
          v46 = v45 - 1;
          v47 = (v45 - 1) & ((v34 >> 4) ^ (v34 >> 9));
          v48 = *(_QWORD *)(*(_QWORD *)&v44 + 16 * v47);
          if (v34 == v48)
          {
LABEL_56:
            v51 = *(_QWORD *)(*(_QWORD *)&v44 + 16 * v47 + 8);
            if (v51 && **(_QWORD **)(v51 + 32) == v34)
              goto LABEL_133;
          }
          else
          {
            v49 = 1;
            while (v48 != -4096)
            {
              v50 = v47 + v49++;
              v47 = v50 & v46;
              v48 = *(_QWORD *)(*(_QWORD *)&v44 + 16 * v47);
              if (v34 == v48)
                goto LABEL_56;
            }
          }
          if (!v16)
            goto LABEL_79;
          v52 = v46 & ((v35 >> 4) ^ (v35 >> 9));
          v53 = *(_QWORD **)(*(_QWORD *)&v44 + 16 * v52);
          if (v35 != v53)
          {
            v54 = 1;
            while (v53 != (_QWORD *)-4096)
            {
              v55 = v52 + v54++;
              v52 = v55 & v46;
              v53 = *(_QWORD **)(*(_QWORD *)&v44 + 16 * v52);
              if (v35 == v53)
                goto LABEL_63;
            }
LABEL_65:
            v56 = 0;
            goto LABEL_66;
          }
LABEL_63:
          v56 = *(_QWORD **)(*(_QWORD *)&v44 + 16 * v52 + 8);
LABEL_66:
          if (v56 != v16)
          {
            v57 = *(_QWORD **)(v34 + 64);
            v58 = *(_QWORD **)(v34 + 72);
            if (v57 != v58)
            {
              v59 = v45 - 1;
              while (1)
              {
                v60 = (_QWORD *)*v57;
                if ((_QWORD *)*v57 != v35)
                  break;
LABEL_78:
                if (++v57 == v58)
                  goto LABEL_79;
              }
              if (v45)
              {
                v61 = ((v60 >> 4) ^ (v60 >> 9)) & v59;
                v62 = *(_QWORD **)(*(_QWORD *)&v44 + 16 * v61);
                if (v60 != v62)
                {
                  v63 = 1;
                  while (v62 != (_QWORD *)-4096)
                  {
                    v64 = v61 + v63++;
                    v61 = v64 & v59;
                    v62 = *(_QWORD **)(*(_QWORD *)&v44 + 16 * v61);
                    if (v60 == v62)
                      goto LABEL_75;
                  }
                  goto LABEL_76;
                }
LABEL_75:
                v65 = *(_QWORD **)(*(_QWORD *)&v44 + 16 * v61 + 8);
              }
              else
              {
LABEL_76:
                v65 = 0;
              }
              if (v65 != v16)
                goto LABEL_80;
              goto LABEL_78;
            }
          }
LABEL_79:
          llvm::MachineBasicBlock::replaceSuccessor((llvm::MachineBasicBlock *)v6, (llvm::MachineBasicBlock *)v35, (llvm::MachineBasicBlock *)v34);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v97, (uint64_t)v35);
          llvm::MachineBasicBlock::removeSuccessor((llvm::MachineBasicBlock *)v35, (llvm::MachineBasicBlock *)v34, 0);
          v95 = 1;
LABEL_80:
          v35 = (_QWORD *)v34;
        }
        while (!*(_BYTE *)(v34 + 185));
LABEL_83:
        if ((v95 & 1) != 0)
        {
          v66 = (_QWORD *)v6[7];
          if (v94 != v66)
          {
            v67 = *v94 & 0xFFFFFFFFFFFFFFF8;
            if (!v67 || (*(_BYTE *)v67 & 4) == 0)
            {
              while ((*(_WORD *)(v67 + 44) & 4) != 0)
                v67 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
            }
            while (1)
            {
              v68 = *(unsigned __int16 **)(v67 + 16);
              v69 = *v68;
              v70 = (v69 - 9) > 0x3C || ((1 << (v69 - 9)) & 0x1000000000000605) == 0;
              v71 = !v70 || v69 == 0;
              if (!v71 && (v68[4] & 0x10) == 0)
                break;
              if ((_QWORD *)v67 == v66)
                goto LABEL_105;
              v67 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
              if (!v67 || (*(_BYTE *)v67 & 4) == 0)
              {
                while ((*(_WORD *)(v67 + 44) & 4) != 0)
                  v67 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
              }
            }
            if (((v6[12] - v6[11]) & 0x7FFFFFFF8) == 8)
            {
              (*(void (**)(llvm::TargetInstrInfo *, _QWORD *, _QWORD))(*(_QWORD *)a3 + 264))(a3, v6, 0);
              v108 = &v110;
              v109 = 0;
              v107 = 0;
              (*(void (**)(llvm::TargetInstrInfo *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)a3 + 272))(a3, v6, v34, 0);
              goto LABEL_127;
            }
            if (llvm::TargetInstrInfo::isUnpredicatedTerminator(a3, (const llvm::MachineInstr *)v67))
            {
              while (1)
              {
                v75 = *(_QWORD *)(a4 + 24);
                if (!v75)
                  goto LABEL_161;
                if (*(_QWORD *)((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v75 + 48))(v75, v67)+ 16) == v27)break;
                if (v67 != v6[7])
                {
                  v67 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
                  if (!v67 || (*(_BYTE *)v67 & 4) == 0)
                  {
                    while ((*(_WORD *)(v67 + 44) & 4) != 0)
                      v67 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
                  }
                  if ((llvm::TargetInstrInfo::isUnpredicatedTerminator(a3, (const llvm::MachineInstr *)v67) & 1) != 0)
                    continue;
                }
                goto LABEL_126;
              }
              v76 = *(_QWORD *)(a4 + 24);
              if (!v76)
LABEL_161:
                sub_1C485C2F0();
              *(_QWORD *)((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v76 + 48))(v76, v67) + 16) = v34;
            }
            else
            {
LABEL_126:
              v108 = &v110;
              v109 = 0;
              v107 = 0;
              (*(void (**)(llvm::TargetInstrInfo *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)a3 + 272))(a3, v6, v34, 0);
LABEL_127:
              if (v107)
                llvm::MetadataTracking::untrack((uint64_t)&v107, v107);
              if (v108 != &v110)
                free(v108);
            }
          }
        }
LABEL_105:
        v72 = (char *)sub_1C477672C((uint64_t)&v102, v34);
        if (v103 == v102)
          v73 = (uint64_t *)((char *)&v104 + 4);
        else
          v73 = &v104;
        if (v72 == &v103[8 * *(unsigned int *)v73])
        {
          v74 = v114;
          if (v114 >= (unint64_t)v115)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)v116, v114 + 1, 8);
            v74 = v114;
          }
          v113[v74] = v34;
          ++v114;
        }
LABEL_112:
        if (++v22 == v26)
        {
          v22 = v110;
          v4 = a2;
          break;
        }
      }
    }
    if (v22 != (uint64_t *)v112)
      free(v22);
LABEL_136:
    v5 = v114;
  }
  while (v114);
  v78 = v97;
  v77 = v98;
  v79 = (uint64_t *)((char *)&v99 + 4);
  if (v98 != v97)
    v79 = &v99;
  v80 = *(unsigned int *)v79;
  v81 = (uint64_t *)v98;
  if ((_DWORD)v80)
  {
    v82 = 0;
    while (*(_QWORD *)&v98[v82] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v82 += 8;
      if (8 * v80 == v82)
        goto LABEL_154;
    }
    v81 = (uint64_t *)&v98[v82];
  }
  v83 = &v98[8 * v80];
  if (v81 != v83)
  {
    v84 = *v81;
LABEL_149:
    llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlock(v91, v84);
    v85 = *(_QWORD *)(v84 + 32);
    v86 = v85 + 320;
    *(_QWORD *)(*(_QWORD *)(v85 + 104) + 8 * *(unsigned int *)(v84 + 24)) = 0;
    *(_DWORD *)(v84 + 24) = -1;
    v87 = *(_QWORD *)v84;
    v88 = *(_QWORD **)(v84 + 8);
    *v88 = *(_QWORD *)v84;
    *(_QWORD *)(v87 + 8) = v88;
    *(_QWORD *)v84 = 0;
    *(_QWORD *)(v84 + 8) = 0;
    llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v86, (llvm::MachineBasicBlock *)v84);
    v89 = (unint64_t *)(v81 + 1);
    while (v89 != v83)
    {
      v90 = *v89++;
      v84 = v90;
      if (v90 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v81 = (uint64_t *)(v89 - 1);
        goto LABEL_149;
      }
    }
    v78 = v97;
    v77 = v98;
  }
LABEL_154:
  if (v77 != v78)
    free(v77);
  if (v103 != v102)
    free(v103);
  if (v113 != v116)
    free(v113);
}

uint64_t sub_1C55637B0(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineLoopInfoPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "GPU Conditional Flattener";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "gpu-cond-flatten";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2FF8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5563844;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

double sub_1C5563844()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F2FF8);
  *(_QWORD *)v1 = &off_1E816F318;
  *(_QWORD *)(v1 + 248) = -1;
  *(_BYTE *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 296) = v1 + 312;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v1 + 304) = 0x800000000;
  return result;
}

void sub_1C55638A8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E816F318;
  v2 = (char *)*((_QWORD *)this + 37);
  if (v2 != (char *)this + 312)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

